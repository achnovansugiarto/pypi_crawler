{
  "info": {
    "author": "Jack van Zyl",
    "author_email": "jackvanzyl@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mezzanine API\n\n[![PyPI](https://img.shields.io/pypi/v/mezzanine-cartridge-api.svg)](https://pypi.org/project/mezzanine-cartridge-api/)\n[![Travis CI](https://travis-ci.com/jackvz/mezzanine-cartridge-api.svg?branch=production)](https://travis-ci.com/jackvz/mezzanine-cartridge-api)\n[![License](https://img.shields.io/github/license/jackvz/mezzanine-cartridge-api.svg)](https://github.com/jackvz/mezzanine-cartridge-api/blob/master/license)\n[![Codecov](https://img.shields.io/codecov/c/github/jackvz/mezzanine-cartridge-api/production.svg?token=b618b46fd1fc46118196eb4b83c9c73b)](https://codecov.io/gh/jackvz/mezzanine-cartridge-api/branch/production)\n\nA REST Web API for the [Mezzanine content management system](http://mezzanine.jupo.org/) with the [Cartridge](http://cartridge.jupo.org/index.html) e-commerce extension.\n\nOh, and this will work even if you're just running a blog or any other Mezzanine website without the Cartridge package.\n\n[![Buy Me A Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/sTZBGpQ)\n\n## Features\n\nWeb API methods for Mezzanine objects, including sites, users, groups, pages, blog posts and settings, and Cartridge objects, including products, categories, carts and orders.\n\n[Swagger-UI](https://swagger.io/tools/swagger-ui/) as development tool and documentation.\n\nComes with [API key authentication/authorisation](https://pypi.org/project/djangorestframework-api-key/) configured, but can also be configured to work with Password-based and/or Authorisation code OAuth2 authentication/authorisation.\n\nAdditional features:\n- User activation method, and user password creation and checking methods (with password hashing).\n- Methods for e-commerce customisation: Handlers for billing/shipping, tax, payment and order placement, to execute any customisation work done in the Mezzanine site installation.\n\n## Screenshots\n\nAPI docs\n\n![API docs](https://raw.githubusercontent.com/jackvz/mezzanine-cartridge-api/master/screenshot-api-docs.png)\n\nAPI keys\n\n![API keys](https://raw.githubusercontent.com/jackvz/mezzanine-cartridge-api/master/screenshot-add-api-key.png)\n\n## Installation\n\nInstall [Python](https://www.python.org/)\n\n## New installation\n\nInstall Mezzanine and Cartridge:\n```bash\npip install mezzanine\npip install cartridge\n```\n\nCreate a new Mezzanine project with Cartridge, and set up a clean development database by running:\n```bash\nmezzanine-project -a cartridge [project-name]\ncd [project_name]\npython manage.py createdb --noinput --nodata\n```\n\nYou may need to set ALLOWED_HOSTS, DATABASES and SHOP_CURRENCY_LOCALE in your project's settings.py file before creating the database.\n\n    ALLOWED_HOSTS = ['*']\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': 'db.dev',\n        }\n    }\n\n    SHOP_CURRENCY_LOCALE = 'en_GB.UTF-8'\n\nStart a Python [virtual environment](https://virtualenv.pypa.io/en/latest/), install the requirements and run the development server:\n```bash\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\npython manage.py runserver\n```\n\nThen see the following section on adding to an existing installation.\n\n## Adding to an existing installation\n\nWith Mezzanine and Cartridge installed, add the package to your project's requirements.txt file:\n\n    mezzanine-cartridge-api\n\nAdd the following to installed apps and middleware in your project's settings.py file:\n\n    INSTALLED_APPS = (\n        ...\n        'corsheaders',\n        'rest_framework',\n        'rest_framework_api_key',\n        'drf_yasg',\n        'mezzanine_cartridge_api',\n        ...\n    )\n\n    # Use `MIDDLEWARE_CLASSES` prior to Django 1.10\n    MIDDLEWARE = [\n        ...\n        'corsheaders.middleware.CorsMiddleware',\n        ...\n    ]\n\nFor OAuth2 authentication/authorisation, also add the following to installed apps in your project's settings.py file:\n\n    INSTALLED_APPS = (\n        ...\n        'oauth2_provider',\n        'rest_framework.authtoken',\n        ...\n    )\n\nAdd the following to your project's urls.py file:\n\n    urlpatterns = [\n        ...\n        url(r'^api/', include('mezzanine_cartridge_api.urls')),\n        ...\n    ]\n\nStart the Python virtual environment, install the requirements and run the development server:\n```bash\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\npython manage.py runserver\n```\n\n## Configuration\n\nThe following configuration settings are available:\n\nCORS_ORIGIN_ALLOW_ALL\n\nAnd other [django-cors-middleware](https://pypi.org/project/django-cors-middleware/) settings.\n\nREST_FRAMEWORK\n\nSee the [Django REST framework settings](https://www.django-rest-framework.org/api-guide/settings/).\n\nSWAGGER_SETTINGS\n\nSee the [drf-yasg Swagger settings](https://drf-yasg.readthedocs.io/en/stable/settings.html#swagger-settings).\n\nSWAGGER_SCHEME_HTTPS\n\nTrue or False: Defaults to False. True for when your API is available over HTTPS.\n\n## Notes\n\nIf you are using the included Swagger UI to test your API and get a message \"CSRF Failed: CSRF token missing or incorrect\", be sure to log out of the Mezzanine site.\n\nIf you are using the included Swagger UI to test your API and get a message \"TypeError: Failed to fetch\", and you are running a secure site (over HTTPS), be sure to select the HTTPS scheme from the Shemes dropdown. This dropdown keeps reverting to HTTP in the Swagger UI, so you may have to select it again after making API call changes and/or selecting API methods.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jackvz/mezzanine-cartridge-api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mezzanine-cartridge-api",
    "package_url": "https://pypi.org/project/mezzanine-cartridge-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/mezzanine-cartridge-api/",
    "project_urls": {
      "Homepage": "https://github.com/jackvz/mezzanine-cartridge-api"
    },
    "release_url": "https://pypi.org/project/mezzanine-cartridge-api/1.5.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A REST Web API for Mezzanine CMS with the Cartridge e-commerce extension",
    "version": "1.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5162448,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32d1cf6c863e8474180c3a2be601ca8735beace9162b2bd6ad59bebeebbbbe74",
        "md5": "b51796a60df9257c8e6dca786513af96",
        "sha256": "fa57a8c82f28221284cd20bd5d10e7f0e9aed0c9bfbd04691f135c023cceef7e"
      },
      "downloads": -1,
      "filename": "mezzanine_cartridge_api-1.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b51796a60df9257c8e6dca786513af96",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 666696,
      "upload_time": "2019-04-14T04:36:58",
      "upload_time_iso_8601": "2019-04-14T04:36:58.935180Z",
      "url": "https://files.pythonhosted.org/packages/32/d1/cf6c863e8474180c3a2be601ca8735beace9162b2bd6ad59bebeebbbbe74/mezzanine_cartridge_api-1.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}