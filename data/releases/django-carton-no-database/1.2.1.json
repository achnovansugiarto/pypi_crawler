{
  "info": {
    "author": "jgouveia",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Django Carton\n=============\n\n\n      +------+\n     /|     /|\n    +-+----+ |    django-carton is a simple and lightweight application\n    | |    | |    for shopping carts and wish lists.\n    | +----+-+\n    |/     |/\n    +------+\n\n\n\n* Simple: You decide how to implement the views, templates and payment\n  processing.\n* Lightweight: The cart lives in the session.\n* Just a container: You define your product model the way you want.\n\n\nUsage Example\n-------------\n\nView:\n\n    from django.http import HttpResponse\n\n    from carton.cart import Cart\n    from products.models import Product\n\n    def add(request):\n        cart = Cart(request.session)\n        product = Product.objects.get(id=request.GET.get('product_id'))\n        cart.add(product, price=product.price)\n        return HttpResponse(\"Added\")\n\n    def show(request):\n        return render(request, 'shopping/show-cart.html')\n\n\nWe are assuming here that your products are defined in an application\ncalled ``products``.\n\nTemplate:\n\n    {% load carton_tags %}\n    {% get_cart as cart %}\n\n    {% for item in cart.items %}\n        {{ item.product.name }}\n        {{ item.quantity }}\n        {{ item.subtotal }}\n    {% endfor %}\n\n    You can also use this convinent shortcut:\n    {% for product in cart.products %}\n        {{ product.name }}\n    {% endfor %}\n\nWithin the template you can access the product id with {{product.id}}.\n\nSettings:\n\n    CART_PRODUCT_MODEL = 'products.models.Product'\n\n\nThis project is shipped with an application example called ``shopping``\nimplementing basic add, remove, display features.\nTo use it, you will need to install the ``shopping`` application and\ninclude the URLs in your project ``urls.py``\n\n    # settings.py\n    INSTALLED_APPS = (\n        'carton',\n        'shopping',\n        'products',\n    )\n\n    # urls.py\n    urlpatterns = patterns('',\n        url(r'^shopping-cart/', include('shopping.urls')),\n    )\n\n\nAssuming you have some products defined, you should be able to\nadd, show and remove products like this:\n\n    /shopping-cart/add/?id=1\n    /shopping-cart/show/\n    /shopping-cart/remove/?id=1\n\n\nInstallation\n------------\n\nThis application requires Django version 1.4; all versions above should be fine.\n\nJust install the package using something like pip and add ``carton`` to\nyour ``INSTALLED_APPS`` setting.\n\nAdd the `CART_PRODUCT_MODEL` setting, a dotted path to your product model.\n\nThis is how you run tests:\n\n    ./manage.py test carton.tests --settings=carton.tests.settings\n\n\nAbstract\n--------\n\nThe cart is an object that's stored in session. Products are associated\nto cart items.\n\n    Cart\n    |-- CartItem\n    |----- product\n    |----- price\n    |----- quantity\n\nA cart item stores a price, a quantity and an arbitrary instance of\na product model.\n\n\nYou can access all your product's attributes, for instance it's name:\n\n    {% for item in cart.items %}\n        {{ item.price }}\n        {{ item.quantity }}\n        {{ item.product.name }}\n    {% endfor %}\n\n\n\nManaging Cart Items\n-------------------\n\nThese are simple operations to add, remove and access cart items:\n\n    >>> apple = Product.objects.all()[0]\n    >>> cart.add(apple, price=1.5)\n    >>> apple in cart\n    True\n    >>> cart.remove(apple)\n    >>> apple in cart\n    False\n\n    >>> orange = Product.objects.all()[1]\n    >>> cart.add(apple, price=1.5)\n    >>> cart.total\n    Decimal('1.5')\n    >>> cart.add(orange, price=2.0)\n    >>> cart.total\n    Decimal('3.5')\n\nNote how we check weather the product is in the cart - The following\nstatements are different ways to do the same thing:\n\n    >>> apple in cart\n    >>> apple in cart.products\n    >>> apple in [item.product for item in cart.items]\n\n\nThe \"product\" refers to the database object. The \"cart item\" is where\nwe store a copy of the product, it's quantity and it's price.\n\n    >>> cart.items\n    [CartItem Object (apple), CartItem Object (orange)]\n\n    >>> cart.products\n    [<Product: apple>, <Product: orange>]\n\n\nClear all items:\n\n    >>> cart.clear()\n    >>> cart.total\n    0\n\n\nIncrease the quantity by adding more products:\n\n    >>> cart.add(apple, price=1.5)\n    >>> cart.add(apple)  # no need to repeat the price.\n    >>> cart.total\n    Decimal('3.0')\n\n\nNote that the price is only needed when you add a product for the first time.\n\n    >>> cart.add(orange)\n    *** ValueError: Missing price when adding a cart item.\n\n\nYou can tell how many items are in your cart:\n\n    >>> cart.clear()\n    >>> cart.add(apple, price=1.5)\n    >>> cart.add(orange, price=2.0, quantity=3)\n    >>> cart.count\n    4\n    >>> cart.unique_count  # Regarless of product's quantity\n    2\n\n\nYou can add several products at the same time:\n\n    >>> cart.clear()\n    >>> cart.add(orange, price=2.0, quantity=3)\n    >>> cart.total\n    Decimal('6')\n    >>> cart.add(orange, quantity=2)\n    >>> cart.total\n    Decimal('10')\n\n\nThe price is relevant only the first time you add a product:\n\n    >>> cart.clear()\n    >>> cart.add(orange, price=2.0)\n    >>> cart.total\n    Decimal('2')\n    >>> cart.add(orange, price=100)  # this price is ignored\n    >>> cart.total\n    Decimal('4')\n\n\nNote how the price is ignored on the second call.\n\n\nYou can change the quantity of product that are already in the cart:\n\n    >>> cart.add(orange, price=2.0)\n    >>> cart.total\n    Decimal('2')\n    >>> cart.set_quantity(orange, quantity=3)\n    >>> cart.total\n    Decimal('6')\n    >>> cart.set_quantity(orange, quantity=1)\n    >>> cart.total\n    Decimal('2')\n    >>> cart.set_quantity(orange, quantity=0)\n    >>> cart.total\n    0\n    >>> cart.set_quantity(orange, quantity=-1)\n    *** ValueError: Quantity must be positive when updating cart\n\n\n\nRemoving all occurrence of a product:\n\n    >>> cart.add(apple, price=1.5, quantity=4)\n    >>> cart.total\n    Decimal('6.0')\n    >>> cart.remove(apple)\n    >>> cart.total\n    0\n    >>> apple in cart\n    False\n\n\nRemove a single occurrence of a product:\n\n    >>> cart.add(apple, price=1.5, quantity=4)\n    >>> cart.remove_single(apple)\n    >>> apple in cart\n    True\n    >>> cart.total\n    Decimal('4.5')\n    >>> cart.remove_single(apple)\n    >>> cart.total\n    Decimal('3.0')\n    >>> cart.remove_single(apple)\n    >>> cart.total\n    Decimal('1.5')\n    >>> cart.remove_single(apple)\n    >>> cart.total\n    0\n\n\nMultiple carts\n--------------\n\nDjango Carton has support for using multiple carts in the same project.\nThe carts would need to be stored in Django session using different session\nkeys.\n\n    from carton.cart import Cart\n\n    cart_1 = Cart(session=request.session, session_key='CART-1')\n    cart_2 = Cart(session=request.session, session_key='CART-2')\n\n\nWorking With Product Model\n--------------------------\n\nDjango Carton needs to know how to list your product objects.\n\nThe default behaviour is to get the product model using the\n`CART_PRODUCT_MODEL` setting and list all products.\n\nThe default queryset manager is used and all products are\nretrieved. You can filter products by defining some lookup\nparameters in `CART_PRODUCT_LOOKUP` setting.\n\n    # settings.py\n\n    CART_PRODUCT_LOOKUP = {\n        'published': True,\n        'status': 'A',\n    }\n\n\nIf you need further customization of the way product model and queryset\nare retrieved, you can always sub-class the default `Cart` and overwrite\nthe `get_queryset` method. In that case, you should take into account that:\n\n* You probably won't need `CART_PRODUCT_MODEL` and `CART_PRODUCT_LOOKUP`\n  if you get a direct access to your product model and define the\n  filtering directly on the cart sub-class.\n* You probably have to write your own template tag to retrieve the cart\n  since the default `get_cart` template tag point on the `Cart` class\n  defined by django-carton.\n\n\nSettings\n--------\n\n### Template Tag Name\n\nYou can retrieve the cart in templates using\n`{% get_cart as my_cart %}`.\n\nYou can change the name of this template tag using the\n`CART_TEMPLATE_TAG_NAME` setting.\n\n\n    # In you project settings\n    CART_TEMPLATE_TAG_NAME = 'get_basket'\n\n    # In templates\n    {% load carton_tags %}\n    {% get_basket as my_basket %}\n\n\n### Stale Items\n\nCart items are associated to products in the database. Sometime a product can be found\nin the cart when its database instance has been removed. These items are called stale\nitems. By default they are removed from the cart.\n\n### Session Key\n\nThe `CART_SESSION_KEY` settings controls the name of the session key.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/julianogouveia/django-carton",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-carton-no-database",
    "package_url": "https://pypi.org/project/django-carton-no-database/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-carton-no-database/",
    "project_urls": {
      "Homepage": "https://github.com/julianogouveia/django-carton"
    },
    "release_url": "https://pypi.org/project/django-carton-no-database/1.2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-carton is a simple and lightweight application for shopping carts and wish lists.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2365222,
  "urls": [],
  "vulnerabilities": []
}