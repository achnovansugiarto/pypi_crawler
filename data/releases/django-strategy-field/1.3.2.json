{
  "info": {
    "author": "sax",
    "author_email": "sax@os4d.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=====================\ndjango-strategy-field\n=====================\n\nSet of custom fields useful to implement the `Strategy Pattern`_ with Django models.\n\nThe Strategies are displayed in SelectBoxes as standard choice field\n\nThis package provides the following custom fields:\n\n* StrategyField\n* MultipleStrategyField\n* StrategyClassField\n* MultipleStrategyClassField\n\nThe StrategyField can be accessed as instance of the model with an attribute\n``context`` that points to model that 'owns' the field (inverse relation). So:\n\nExample\n=======\n\n.. code-block:: python\n\n    from strategy_field.fields import StrategyField\n    from django.core.mail.backends.filebased.EmailBackend\n\n\n    class Event(models.Model):\n        backend = StrategyField()\n\n    Event(sender='django.core.mail.backends.filebased.EmailBackend')\n\n\nUse case\n========\n\nAs example we can imagine an application that manages `Events` that need to be notified to users.\nEach `Occurrence` of `Event` can be notified using different transport, (email, sms,...).\nWe want to be able to add/change the way we send notification, per event basis, simply using\nthe Django admin panel.\n\n.. code-block:: python\n\n    from strategy_field.fields import StrategyField\n    from strategy_field.registry import Registry\n\n    class TransportRegistry(Registry)\n        pass\n\n    class AbstractStrategy(object):\n        def __init__(self, context):\n            self.context = context\n\n        def send(self):\n            raise NotImplementedError\n\n    class EmailStrategy(AbstractTransport):\n        def send(self):\n            ...\n\n    class SMSStrategy(AbstractTransport):\n        def send(self):\n            ...\n    registry = TransportRegistry(AbstractTransport)\n    registry.register(EmailStrategy)\n    registry.register(SMSStrategy)\n\n    class Event(models.Model):\n        sender = StrategyField(registry)\n\n    Event.objects.get_or_create(sender=EmailStrategy)\n    ...\n    ...\n    e = Event.objects.get(sender=EmailStrategy)\n    e.sender.send() # e.sender.context == e\n\n\nMore examples\n-------------\n\nUse callable\n~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from strategy_field.fields import StrategyField\n    from strategy_field.registry import Registry\n\n    registry1 = Registry()\n    registry2 = Registry()\n\n    class A(model):\n        sender = StrategyField(registry=lambda model: model._registry)\n        class Meta:\n            abstract = True\n\n    class C1(A):\n        _registry = registry1\n        class Meta:\n            abstract = True\n\n    class C2(A):\n        _registry = registry2\n        class Meta:\n            abstract = True\n\n\nProject links\n=============\n\n+--------------------+----------------+--------------+---------------------------+\n| Stable             | |master-build| | |master-cov| |                           |\n+--------------------+----------------+--------------+---------------------------+\n| Development        | |dev-build|    | |dev-cov|    |                           |\n+--------------------+----------------+--------------+---------------------------+\n| Project home page: |https://github.com/saxix/django-strategy-field             |\n+--------------------+---------------+-------------------------------------------+\n| Issue tracker:     |https://github.com/saxix/django-strategy-field/issues?sort |\n+--------------------+---------------+-------------------------------------------+\n| Download:          |http://pypi.python.org/pypi/django-strategy-field/         |\n+--------------------+---------------+-------------------------------------------+\n\n.. _Strategy Pattern: http://www.oodesign.com/strategy-pattern.html\n\n.. |master-build| image:: https://secure.travis-ci.org/saxix/django-strategy-field.png?branch=master\n    :target: http://travis-ci.org/saxix/django-strategy-field/\n\n.. |master-cov| image:: https://codecov.io/github/saxix/django-strategy-field/coverage.svg?branch=master\n    :target: https://codecov.io/github/saxix/django-strategy-field?branch=develop\n\n\n.. |dev-build| image:: https://secure.travis-ci.org/saxix/django-strategy-field.png?branch=develop\n    :target: http://travis-ci.org/saxix/django-strategy-field/\n\n.. |dev-cov| image:: https://codecov.io/github/saxix/django-strategy-field/coverage.svg?branch=develop\n    :target: https://codecov.io/github/saxix/django-strategy-field?branch=develop",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/saxix/django-strategy-field",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-strategy-field",
    "package_url": "https://pypi.org/project/django-strategy-field/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/django-strategy-field/",
    "project_urls": {
      "Homepage": "https://github.com/saxix/django-strategy-field"
    },
    "release_url": "https://pypi.org/project/django-strategy-field/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django custom field to implement the strategy pattern",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14836011,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "204fcb02c68983d81d6d74e87144a64f14f31f050bf0d37ca636aec020e5da83",
        "md5": "dc03b3d7c539f51f6368fc52d58afb98",
        "sha256": "659ce7d1fec5dc7770291f64d530e345e155d4d24f843f225d0b5a451f7b3706"
      },
      "downloads": -1,
      "filename": "django-strategy-field-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dc03b3d7c539f51f6368fc52d58afb98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23656,
      "upload_time": "2018-08-10T08:45:43",
      "upload_time_iso_8601": "2018-08-10T08:45:43.816560Z",
      "url": "https://files.pythonhosted.org/packages/20/4f/cb02c68983d81d6d74e87144a64f14f31f050bf0d37ca636aec020e5da83/django-strategy-field-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}