{
  "info": {
    "author": "Raphael Macedo",
    "author_email": "raphaelcmacedo@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Easy Test\n=========\n\nA unit test framework for Django that will make your unit tests as easy\nas it should be\n\n|Code Health| |Pypi Version| |Pypi Downaloads| |License|\n\nWhat is Easy Test?\n------------------\n\nEasy Test is an extension of Djangoâ€™s test framework for the purpose of\nproviding premade configurable test cases, avoiding code replication and\nincreasing test coverage in the project.\n\nHow to install?\n---------------\n\nDownload the module using pip:\n\n.. code:: console\n\n    pip install django-easy-test\n\nThen add it to your INSTALLED\\_APPS on your settings.py:\n\n.. code:: console\n\n    INSTALLED_APPS = (\n        # ...\n        'easy_test',\n    )\n\nHow to use?\n-----------\n\nTo use it simply extend the wanted test case configuring it with a meta\nclass:\n\n.. code:: console\n\n    class MyTest(FormTest):\n        class Meta:\n            obj = Person(\n                name='John Doe',\n            )\n            url = 'my_url'\n    )\n\nYou can also check our example project `Easy Test Example`_ containning\nfunctional samples for each test case comparing the *conventional test*\nwith Easy Test. Please find an example below:\n\nA conventional form test\n''''''''''''''''''''''''\n\n.. code:: console\n\n     class TaskNewGet(TestCase):\n        def setUp(self):\n            self.response = self.client.get(resolve_url('task_new'))\n\n        def test_html(self):\n            tags = (\n                ('<form',1),\n                ('<input', 3),\n                ('<textarea', 1),\n                ('type=\"text\"', 1),\n                ('type=\"submit\"', 1),\n            )\n\n            for text, count in tags:\n                with self.subTest():\n                    self.assertContains(self.response, text, count)\n\n        def test_csrf(self):\n            self.assertContains(self.response, 'csrfmiddlewaretoken')\n\n        def test_has_form(self):\n            form = self.response.context['form']\n            self.assertIsInstance(form,TaskForm)\n\n\n    class TaskNewPostValid(TestCase):\n        def setUp(self):\n            data = dict(name='Easy Test', description='')\n            self.response = self.client.post(resolve_url('task_new'), data)\n\n        def test_save_subscription(self):\n            self.assertTrue(Task.objects.exists())\n\n\n    class TaskNewPostInvalid(TestCase):\n        def setUp(self):\n            self.response = self.client.post(resolve_url('task_new'),{})\n\n        def test_post(self):\n            self.assertEqual(200,self.response.status_code)\n\n        def test_template(self):\n            self.assertTemplateUsed(self.response, \"core/task_form.html\")\n\n        def test_has_form(self):\n            form = self.response.context['form']\n            self.assertIsInstance(form,TaskForm)\n\n        def test_has_erros(self):\n            form = self.response.context['form']\n            self.assertTrue(form.errors)\n\n        def test_not_save_subscription(self):\n            self.assertFalse(Task.objects.exists())\n\nSame test using Easy Test\n'''''''''''''''''''''''''\n\n.. code:: console\n\n\n   class TaskFormEasyTest(FormTest):\n       class Meta:\n           obj = Task(\n               name='Easy Test',\n               description='A unit test framework for Django that will make your unit tests as easy as it should be.'\n           )\n           url = 'task_new'\n           template = 'core/task_form.html'\n           contents = [\n               ('<form',1),\n               ('<input', 3),\n               ('<textarea', 1),\n               ('type=\"text\"', 1),\n               ('type=\"submit\"', 1)\n           ]\n           form = TaskForm\n\n.. _Easy Test Example: https://github.com/raphaelcmacedo/easy-test-example\n\n.. |Code Health| image:: https://landscape.io/github/raphaelcmacedo/easy-test/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/raphaelcmacedo/easy-test/master\n.. |Build Status| image:: https://img.shields.io/travis/raphaelcmacedo/easy-test.svg\n    :target: https://travis-ci.org/henriquebastos/easy-test\n    :alt: Build Status\n.. |Pypi Version| image:: https://img.shields.io/pypi/v/django-easy-test.svg\n    :target: https://pypi.python.org/pypi/django-easy-test/\n    :alt: Latest PyPI version\n.. |Pypi Downaloads| image:: https://img.shields.io/pypi/dm/django-easy-test.svg\n    :target: https://pypi.python.org/pypi/django-easy-test/\n    :alt: Number of PyPI downloads\n.. |License| image:: https://img.shields.io/github/license/raphaelcmacedo/easy-test.svg\n    :target: https://pypi.python.org/pypi/django-easy-test/\n    :alt: License",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/raphaelcmacedo/easy-test",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-easy-test",
    "package_url": "https://pypi.org/project/django-easy-test/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-easy-test/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/raphaelcmacedo/easy-test"
    },
    "release_url": "https://pypi.org/project/django-easy-test/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An extension of django tests that contains premade cases with the most comom tests for a web application",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2560592,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d7b4f021be97ca9bbc5df6514de4acc860226633295d357cbc0280465d22f7",
        "md5": "d5ca98af391a4241eb88d5d944669cc1",
        "sha256": "c93105f3b3c941689d1f6becf16a006843afccf37a336662ad889a53a6c12a8e"
      },
      "downloads": -1,
      "filename": "django-easy-test-1.0.zip",
      "has_sig": false,
      "md5_digest": "d5ca98af391a4241eb88d5d944669cc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10422,
      "upload_time": "2017-01-08T12:50:30",
      "upload_time_iso_8601": "2017-01-08T12:50:30.299984Z",
      "url": "https://files.pythonhosted.org/packages/b0/d7/b4f021be97ca9bbc5df6514de4acc860226633295d357cbc0280465d22f7/django-easy-test-1.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}