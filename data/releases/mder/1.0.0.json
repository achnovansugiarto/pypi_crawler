{
  "info": {
    "author": "walkureHHH",
    "author_email": "1779599839@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# M3u8_Downloader\na multithread m3u8 download module and the number of threads can decide by yourself. using how many threads is decide by your network and your device\n\ngithub : https://github.com/walkureHHH/M3u8_Downloader/\n\n## 1.install\n```shell\npip install mder-walkureHHH\n```\n\n## 2.import\n```python\nimport mder\n```\n\n## 3.instance object and start download\n```python\ndownloader = mder.m3u8_downloader(m3u8_file_path='./test.m3u8',temp_file_path='./',mp4_path='./test.mp4',num_of_threads=10)\n# parameters\n# m3u8_file_path\n# default : no default   (type : str)\n# temp_file_path\n# default : '.'          (type : str)\n# mp4_path\n# default : './test.mp4' (type : str)\n# num_of_threads\n# default : 10           (type : int)\ndownloader.start()\n```\n\n**before download**\n\nthe structure of ./ is:\n```\n.\n├── test.m3u8\n└── test.py\n```\n\n**when it is downloading**\n\nthe structure of ./ is:\n```\n.\n├── TS\n│   ├── qzCFnDUZE9_720_5308_0000.ts\n│   ├── qzCFnDUZE9_720_5308_0001.ts\n│   ├── qzCFnDUZE9_720_5308_0002.ts\n│   ├── qzCFnDUZE9_720_5308_0003.ts\n│   ├── qzCFnDUZE9_720_5308_0004.ts\n│   ├── qzCFnDUZE9_720_5308_0005.ts\n│   ├── qzCFnDUZE9_720_5308_0006.ts\n│   ├── qzCFnDUZE9_720_5308_0007.ts\n│   ├── qzCFnDUZE9_720_5308_0008.ts\n│   ├── qzCFnDUZE9_720_5308_0009.ts\n│   └── qzCFnDUZE9_720_5308_0010.ts  \n├── test.m3u8\n└── test.py\n```\nprocess bar:  <<\\*>>  29% 500/1752 [01:33<04:02] <<\\*>> \n\nTS is temp folder, all .ts file are in it. The path of it is %temp_file_path%/TS, in the test case, it is in ./TS. TS folder and the .m3u8 file will be delete automatically if download successfully. If the mission is not complete, the m3u8 file and TS folder will be reserved, you can instance a new downloader with corresponding TS folder and m3u8 file, and use the start() function to begin, in this way, the mission will go on.\n\n**after download and download successfully**\n\nthe structure of ./ is:\n```\n.\n├── test.mp4\n└── test.py\n```\n\nif some .ts download failed, the module will redownload for 3 times, and the information will print to the command line\n\nat last, the command line is like this:\n```\n<<*>>  99% 1737/1752 [05:35<00:22] <<*>>\nthread0 Time out ERROR qzCFnDUZE9_720_5308_1710.ts\nthread2 Time out ERROR qzCFnDUZE9_720_5308_1722.ts\nthread0 redownload successfully qzCFnDUZE9_720_5308_1710.ts\n<<*>>  99% 1738/1752 [06:20<03:19] <<*>>\nthread2 redownload successfully qzCFnDUZE9_720_5308_1722.ts\n<<*>> 100% 1752/1752 [06:26<00:00] <<*>>\ndownloading finished 100.00%\n```\n## 4.restart\nIf you want to restart a incomplete mission, you only should use the corresponding TS folder and .m3u8 file\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/walkureHHH/M3u8_Downloader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mder",
    "package_url": "https://pypi.org/project/mder/",
    "platform": "",
    "project_url": "https://pypi.org/project/mder/",
    "project_urls": {
      "Homepage": "https://github.com/walkureHHH/M3u8_Downloader"
    },
    "release_url": "https://pypi.org/project/mder/1.0.0/",
    "requires_dist": [
      "requests",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "A multithreading m3u8 download module for python, and the number of threads can decide by yourself; Convert .m3u8 file to .mp4 file; Support redownload.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7624375,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "715052bdeaebaf9652dcef7577e3be12ca2f018abcbc4aba887d183796c7c818",
        "md5": "f5c5598ea4ad1e22401a135e0c40cdc4",
        "sha256": "21f8fce9ba09146a948a40b98a943ee0edc91eb14ea4e592069200f1c997c160"
      },
      "downloads": -1,
      "filename": "mder-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5c5598ea4ad1e22401a135e0c40cdc4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3705,
      "upload_time": "2020-06-25T16:57:21",
      "upload_time_iso_8601": "2020-06-25T16:57:21.437511Z",
      "url": "https://files.pythonhosted.org/packages/71/50/52bdeaebaf9652dcef7577e3be12ca2f018abcbc4aba887d183796c7c818/mder-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07d9ecf0338cc221a86f04d016c05998349a19653f217fa1dfd14dfae8cc870a",
        "md5": "bb62922a83d1dd2fd1938fd8b37d6092",
        "sha256": "ab9a285abc225c92cb8c3bc8db713f706c3f00784c60a6bf687d329b13d266e0"
      },
      "downloads": -1,
      "filename": "mder-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bb62922a83d1dd2fd1938fd8b37d6092",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3765,
      "upload_time": "2020-06-25T16:57:25",
      "upload_time_iso_8601": "2020-06-25T16:57:25.045325Z",
      "url": "https://files.pythonhosted.org/packages/07/d9/ecf0338cc221a86f04d016c05998349a19653f217fa1dfd14dfae8cc870a/mder-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}