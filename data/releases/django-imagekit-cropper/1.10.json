{
  "info": {
    "author": "Nina Pavlich",
    "author_email": "nina@ninalp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# django-imagekit-cropper\nA library to enhance django-imagekit which allows you to specify your image variant crops:\n\n![CKEditor Dialog](https://raw.github.com/ninapavlich/django-imagekit-cropper/master/docs/screenshots/crop_screenshot.png)\n\n**InstanceSpecField** This is a class that extends ImageSpecField which passes the model instance to \nthe processors so that you can access other model fields to process the image.\n\n**InstanceFormatSpecField** This is a class that extends InstanceSpecField and can dynamically choose the image format (e.g. JPEG, PNG, GIF). PNGs have a much larger file size than JPEGs, but sometimes it's worth the filesize; this allows the admins to control on a per-image basis. Just pass a reference to the model field that returns a PIL-compatible file format.\n\n**ImageCropField** This is a custom model field for setting the image crop. This uses a custom\nwidget to allow admins to visually crop the image.\n\n**PositionCrop** This a custom processor which recieves the model instance and crops the image\nusing the image source and the value of the image crop field.\n\n**FormatProcessor** This is a custom processor which implements resizing and outputs to a dynamic format.\n\n**PositionAndFormatCrop** This processor extends PositionCrop and also implements dynamic format.\n\n**WARNING:** This library is in very early alpha stages. I have only tested this on version django-imagekit==3.2.5\n\n## Example Usage\n```\n    $ pip install django-imagekit-cropper\n```\n\n```\n    #settings.py\n\n    INSTALLED_APPS = (\n        ...\n        imagekit_cropper,\n        ...\n    )\n```    \n\n\n```python\n    #models.py\n\n    from imagekit_cropper.fields import ImageCropField, InstanceSpecField, InstanceFormatSpecField\n    from imagekit_cropper.processors import PositionCrop, PositionAndFormatCrop, FormatProcessor\n\n    image = models.ImageField(blank=True, null=True)\n    \n    #Example 1 - BASIC CROP FIELD\n    width_1200_wide_crop_properties = {\n        'source':'image',\n        'crop_field':'width_1200_wide_crop', \n        'resize_method':'fill',\n        'width':1200,\n        'height':750, \n        'upscale':True\n    }\n    width_1200_wide_crop = ImageCropField(null=True, blank=True, \n        properties=width_1200_wide_crop_properties)\n\n    width_1200_wide = InstanceSpecField( \n        source=width_1200_wide_crop_properties['source'], \n        options={'quality': 85}, \n        processors=[PositionCrop(width_1200_wide_crop_properties)])\n\n    #Example 2 - DYNAMIC FORMAT FIELD\n    \n    \n    width_1200_crop_properties = {\n        'source':'image',\n        'format_field':'get_format',\n        'resize_method':'fit',\n        'width':1200,\n        'height':None, \n        'upscale':False\n    }\n    width_1200 = InstanceFormatSpecField( \n        source=width_1200_crop_properties['source'], \n        format_field=width_1200_crop_properties['format_field'],\n        options={'quality': 95}, \n        processors=[FormatProcessor(width_1200_crop_properties)])\n    \n    use_png = models.BooleanField( default = False, \n        verbose_name='Use .PNG (instead of .JPG)')\n        \n    @property\n    def get_format(self):\n        if self.use_png:\n            return 'PNG'\n        return 'JPEG'\n\n\n    #Example 3 - TWO SPECS USING THE SAME CROP\n\n    square_crop_properties = {\n        'source':'image',\n        'crop_field':'square_crop', \n        'format_field':'get_format',\n        'resize_method':'fill',\n        'aspect_ratio':1,\n        'min_width':400,\n        'min_height':400,\n        'upscale':False\n    }\n    square_crop = ImageCropField(null=True, blank=True, properties=square_crop_properties)\n\n    square_200_crop_properties = copy.copy(square_crop_properties)\n    square_200_crop_properties['width'] = 200\n    square_200_crop_properties['height'] = 200\n    \n    square_200 = InstanceSpecField(\n        format='PNG',\n        source=square_200_crop_properties['source'], \n        options={'quality': 85}, \n        processors=[PositionCrop(square_200_crop_properties)]\n    )\n\n    square_400_crop_properties = copy.copy(square_crop_properties)\n    square_400_crop_properties['width'] = 400\n    square_400_crop_properties['height'] = 400\n\n    square_400 = InstanceFormatSpecField(\n        source=square_400_crop_properties['source'], \n        format_field=square_400_crop_properties['format_field'],\n        options={'quality': 85}, \n        processors=[PositionAndFormatCrop(square_400_crop_properties)]\n    )\n\n```  \n\n```python\n    #admin.py\n\n    from .forms import ImageAdminForm\n    \n    class ImageAdmin(models.ModelAdmin):\n        form = ImageAdminForm\n\n```        \n\n```python\n    #forms.py\n\n    from django import forms\n    from imagekit_cropper.widgets import ImageCropWidget    \n    from .models import Image\n\n    \n    class ImageAdminForm(forms.ModelForm):\n        square_150_crop = forms.CharField(widget=ImageCropWidget(properties=Image.square_150_crop_properties, help_text=Image.help['square_150_crop']))\n\n        class Meta:\n            model = Image\n\n``` \n\nTo generate images, you'll need to use this modified version of the generateimages command:\n```\n    $ python manage.py generateimages_cropped\n```\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ninapavlich/django-imagekit-cropper",
    "keywords": "libraries,web development,cms,django,django-grappelli",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-imagekit-cropper",
    "package_url": "https://pypi.org/project/django-imagekit-cropper/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-imagekit-cropper/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ninapavlich/django-imagekit-cropper"
    },
    "release_url": "https://pypi.org/project/django-imagekit-cropper/1.10/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Allow users to manually specify image variant crops",
    "version": "1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7612397,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41b528887bcbd93a7f075791340eb39b00138b108257984e45167726214b012a",
        "md5": "1d6fa2b410280162542e9c5ef7ccf040",
        "sha256": "175f3a2d457344f57d7890a29911337d46532103c53c52a67ac9edd5150d1896"
      },
      "downloads": -1,
      "filename": "django-imagekit-cropper-1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "1d6fa2b410280162542e9c5ef7ccf040",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 151606,
      "upload_time": "2015-12-10T04:20:11",
      "upload_time_iso_8601": "2015-12-10T04:20:11.560298Z",
      "url": "https://files.pythonhosted.org/packages/41/b5/28887bcbd93a7f075791340eb39b00138b108257984e45167726214b012a/django-imagekit-cropper-1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}