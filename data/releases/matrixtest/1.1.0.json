{
  "info": {
    "author": "Quan Fan",
    "author_email": "qfan005@ucr.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Benchmark",
      "Topic :: System :: Shells",
      "Topic :: System :: System Shells",
      "Topic :: Utilities"
    ],
    "description": "# MatrixTest: Make your machine busy, make you idle.\n\n[![PyPI](https://img.shields.io/pypi/v/MatrixTest)](https://pypi.org/project/MatrixTest/)\n[![GitHub](https://img.shields.io/github/license/DavyVan/MatrixTest)](https://github.com/DavyVan/MatrixTest)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/MatrixTest)](https://pypi.org/project/MatrixTest/)\n[![Read the Docs](https://img.shields.io/readthedocs/matrixtest)](https://matrixtest.readthedocs.io/en/latest/)\n\n`MatrixTest` is a tool for matrix test where you have to run a cluster of similar shell commands.\nWhen these commands have similar pattern, they are just combinations of different arguments (including argument 0, the executable itself).\nUsing `MatrixTest`, the only a few things you need to do are: configure, run, and output.\nBy providing a formatted command template string, all the possible arguments, and a function to parse the standard output, `MatrixTest` will handle the rest for you.\nAfter that, just wait and find the results in the Excel.\n\nTutorial (this page)  \n[API Documentation](https://matrixtest.readthedocs.io/en/latest/)\n\n# How to use\n\n`MatrixTest` is a pure Python module so that you need to install and import it into your Python test script.\n\nIn the following How-tos, a toy script will be used as the executable.\nIt can accept any arguments and echo them out.\nThe source code is as simple as below:\n\n```python\nimport sys\n\nfor item in sys.argv:\n    print(item)\n```\n\nIt can be executed with:\n\n```shell\npython cmd_example_program.py arg1 arg2 arg3    # You can add more\n```\n\nThis will output:\n```text\ncmd_example_program.py      # argv[0]\narg1                        # argv[1]\narg2                        # argv[2]\narg3                        # argv[3]\n```\n\n## Install\n\n```shell\npip install MatrixTest\n```\n\nThen you can import it in your script as:\n```python\nimport MatrixTest\n```\n\n## Configure `MatrixTestRunner`\n\n`MatrixTestRunner` is the main component of `MatrixTest` package.\nYou need to pass all the required information via its constructor:\n\n```python\nimport MatrixTest\nimport random\n\n\ndef parser(stdout: str):\n    lines = stdout.splitlines()\n    result = {\n        \"lineCount\": len(lines),\n        \"programName\": lines[0],\n        \"random\": random.randint(1, 10)\n    }\n    # return len(lines)\n    return result\n\n\ndef main():\n    cmd_template = \"python E:\\\\MatrixTest\\\\cmd_example_program.py {arg1} {arg2} {arg3}\"\n    args = {\n        \"arg1\": [\"arg1_1\", \"arg1_2\"],\n        \"arg2\": [\"arg2_1\", \"arg2_2\", \"arg2_3\"],\n        \"arg3\": [\"arg3_1\"]\n    }\n    mtr = MatrixTest.MatrixTestRunner(cmd_template, args, parser)\n```\n\n`cmd_template` is the command line template string.\n`MatrixTest` uses Python's `string.format_map()` to generate generate executable command lines.\nThe template string includes mutable parts braced with `{key}` where the `key` is the name for that specific place and it will be replaced before actual execution.\n\n`args` is a `dict` storing all possible values for all the keys. For example, 6 commands will be generated from the above configuration:\n```text\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_1 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_2 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_3 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_1 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_2 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_3 arg3_1\n```\n\n`parser` is a parser function that takes textual `stdout` of each command and output parsed result(s). \nFor example, you may want to get the numeric execution time from \"Data processed in 2.333 seconds\".\nYou can return a single or multiple result(s) from the parser function.\nIn the example above, we output multiple results in a dict.\n\nFinally, just pass all three parameters into the `MatrixTestRunner` constructor and then it will check the parameters and do some initialization works.\n\n## Run\n\nTo start testing, call the `run()` function with a integer indicating how many times you would like to execute repeatly:\n\n```python\n    mtr.run()                           # repeat once by default\n    mtr.run(3)                          # repeat three times\n```\n\n## Aggregate (statistics result)\n\nAfter getting the raw data, you may calculate the aggregated results from it. Take arithmetic mean as the example here:\n\n```python\n    mtr.average([\"random\", \"lineCount\"])        # only calculate mean for designated keys, \n                                                # remember we return these from the parser function\n    mtr.average()                               # calculate mean for all keys\n```\n\nFor now, we support the following aggregation operators:\n\n* average (arithmetic mean)\n\n## Access the results\n\nWe use `pandas.DataFrame` to store all the results for the current run.\nBoth raw data and aggregated data are stored in a single DataFrame.\n\n### Data layout\n\nThe structure of the result table is like below:\n\n| cmd_full                                                         | arg1   | arg2   | arg3   | attempt1_lineCount | attempt1_programName                 | attempt1_random | attempt2_lineCount | ... | avg_random | avg_lineCount |\n|------------------------------------------------------------------|--------|--------|--------|--------------------|--------------------------------------|-----------------|--------------------|-----|------------|---------------|\n| python E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_1 arg3_1 | arg1_1 | arg2_1 | arg3_1 | 4                  | E:\\MatrixTest\\cmd_example_program.py | 6               | 4                  |     | 3          | 4             |\n| ...                                                              |        |        |        |                    |                                      |                 |                    |     |            |               |\n\nThe table starts with the full command and arguments, followed by results for every attempt.\nThe columns are named after `attempt<No.repeat>_<key from parser>`.\nFinally, aggregated results in those `avg_<key from parser & params of average()>` columns.\n\nData types are inferred by `pandas`.\n\n### Access the internal data structure\n\nYou can directly access the `DataFrame` by calling `mtr.get_last_result()`.\n\n### Output to Excel\n\nGenerally, we recommend you to output your data to an Excel spreadsheet for further inspection.\n\n```python\n    mtr.to_excel(\"E:\\\\MatrixTest\\\\example_output.xlsx\", include_agg=True, include_raw=True)\n```\n\nThe first parameter is the output file path. Also, you can choose whether include raw/aggregated data in the Excel or not via the last two parameters.\n\nFiles of this example are available at:\n\n* [cmd_example_program.py](cmd_example_program.py)\n* [example.py](example.py)\n* [example_output.xlsx](example_output.xlsx)\n\n# Contributing\n\nAny of your comments, issues, PRs are welcome and appreciated.\n\n# Dependencies\n\n* Pandas\n* openpyxl\n* colorama\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DavyVan/MatrixTest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MatrixTest",
    "package_url": "https://pypi.org/project/MatrixTest/",
    "platform": "",
    "project_url": "https://pypi.org/project/MatrixTest/",
    "project_urls": {
      "Bug Tracker": "https://github.com/DavyVan/MatrixTest/issues",
      "Homepage": "https://github.com/DavyVan/MatrixTest"
    },
    "release_url": "https://pypi.org/project/MatrixTest/1.1.0/",
    "requires_dist": [
      "pandas",
      "colorama",
      "openpyxl"
    ],
    "requires_python": ">=3.7.1",
    "summary": "A tool to facilitate matrix test via countless combination of arguments of a command line",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10401878,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11f9fac70d07dc2a6bb8946e741efb1d5a7e41ab203e84bc0ea4e1cdfef18726",
        "md5": "ba1c1997e1e69d8dda432e7ae504fbd4",
        "sha256": "30f79cadd73eea05eb8b3e81d538be826355027908dff6707d13f3cef9239930"
      },
      "downloads": -1,
      "filename": "MatrixTest-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba1c1997e1e69d8dda432e7ae504fbd4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.1",
      "size": 10445,
      "upload_time": "2021-04-02T03:18:18",
      "upload_time_iso_8601": "2021-04-02T03:18:18.756687Z",
      "url": "https://files.pythonhosted.org/packages/11/f9/fac70d07dc2a6bb8946e741efb1d5a7e41ab203e84bc0ea4e1cdfef18726/MatrixTest-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81578e5bc89c14ae527fd84dac3f51de52c5674b478ad74e1b13ba62c6a9a712",
        "md5": "ba88773ed27df13453f739b5f9aa9c3e",
        "sha256": "e10d09ea0de594f4709243d965af7948e3ee662f34aabaccb1377161b8475ba0"
      },
      "downloads": -1,
      "filename": "MatrixTest-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ba88773ed27df13453f739b5f9aa9c3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.1",
      "size": 9341,
      "upload_time": "2021-04-02T03:18:19",
      "upload_time_iso_8601": "2021-04-02T03:18:19.902627Z",
      "url": "https://files.pythonhosted.org/packages/81/57/8e5bc89c14ae527fd84dac3f51de52c5674b478ad74e1b13ba62c6a9a712/MatrixTest-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}