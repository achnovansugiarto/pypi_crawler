{
  "info": {
    "author": "Quan Fan",
    "author_email": "qfan005@ucr.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Benchmark",
      "Topic :: System :: Shells",
      "Topic :: System :: System Shells",
      "Topic :: Utilities"
    ],
    "description": "# MatrixTest: Make your machine busy, make you idle.\n\n[![PyPI](https://img.shields.io/pypi/v/MatrixTest)](https://pypi.org/project/MatrixTest/)\n[![GitHub](https://img.shields.io/github/license/DavyVan/MatrixTest)](https://github.com/DavyVan/MatrixTest)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/MatrixTest)](https://pypi.org/project/MatrixTest/)\n[![Read the Docs](https://img.shields.io/readthedocs/matrixtest)](https://matrixtest.readthedocs.io/en/latest/)\n\n`MatrixTest` is a tool for matrix test where you have to run a cluster of similar shell commands.\nWhen these commands have similar pattern, they are just combinations of different arguments (including argument 0, the executable itself).\nUsing `MatrixTest`, the only a few things you need to do are: configure, run, and output.\nBy providing a formatted command template string, all the possible arguments, and a function to parse the standard output, `MatrixTest` will handle the rest for you.\nAfter that, just wait and find the results in the Excel.\n\n__*This tutorial only show the very basic usage, for full functionalities, please refer to the [API Documentation](https://matrixtest.readthedocs.io/en/latest/).*__\n\n# How to use\n\n---\n\n\n`MatrixTest` is a pure Python module so that you need to install and import it into your Python test script.\n\nIn the following How-tos, a toy script will be used as the executable.\nIt can accept any arguments and echo them out.\nThe source code is as simple as below:\n\n```python\nimport sys\n\nfor item in sys.argv:\n    print(item)\n```\n\nIt can be executed with:\n\n```shell\npython cmd_example_program.py arg1 arg2 arg3    # You can add more\n```\n\nThis will output:\n```text\ncmd_example_program.py      # argv[0]\narg1                        # argv[1]\narg2                        # argv[2]\narg3                        # argv[3]\n```\n\n## Install\n\n---\n\n\n```shell\npip install MatrixTest\n```\n\nThen you can import it in your script as:\n```python\nimport MatrixTest\n```\n\n## Configure `MatrixTestRunner`\n\n---\n\n`MatrixTestRunner` is the main component of `MatrixTest` package.\nYou need to pass all the required information via its constructor:\n\n```python\nimport MatrixTest\nimport random\n\n\ndef parser(stdout: str):\n    lines = stdout.splitlines()\n    result = {\n        \"lineCount\": len(lines),\n        \"programName\": lines[0],\n        \"random\": random.randint(1, 10)\n    }\n    # return len(lines)\n    return result\n\n\ndef main():\n    cmd_template = \"python E:\\\\MatrixTest\\\\cmd_example_program.py {arg1} {arg2} {arg3}\"\n    args = {\n        \"arg1\": [\"arg1_1\", \"arg1_2\"],\n        \"arg2\": [\"arg2_1\", \"arg2_2\", \"arg2_3\"],\n        \"arg3\": [\"arg3_1\"]\n    }\n    mtr = MatrixTest.MatrixTestRunner(cmd_template, args, parser)\n```\n\n`cmd_template` is the command line template string.\n`MatrixTest` uses Python's `string.format_map()` to generate generate executable command lines.\nThe template string includes mutable parts braced with `{key}` where the `key` is the name for that specific place and it will be replaced before actual execution.\n\n`args` is a `dict` storing all possible values for all the keys. For example, 6 commands will be generated from the above configuration:\n```text\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_1 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_2 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_3 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_1 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_2 arg3_1\npython E:\\MatrixTest\\cmd_example_program.py arg1_2 arg2_3 arg3_1\n```\n\n`parser` is a parser function that takes textual `stdout` of each command and output parsed result(s). \nFor example, you may want to get the numeric execution time from \"Data processed in 2.333 seconds\".\nYou can return a single or multiple result(s) from the parser function.\nIn the example above, we output multiple results in a dict.\n\nFinally, just pass all three parameters into the `MatrixTestRunner` constructor and then it will check the parameters and do some initialization works.\n\n## Run\n\n---\n\nTo start testing, call the `run()` function with a integer indicating how many times you would like to execute repeatly:\n\n```python\n    mtr.run()                           # repeat once by default\n    mtr.run(3)                          # repeat three times\n```\n\n## Aggregate (statistics result)\n\n---\n\nAfter getting the raw data, you may calculate the aggregated results from it. Take arithmetic mean as the example here:\n\n```python\n    mtr.average([\"random\", \"lineCount\"])        # only calculate mean for designated keys, \n                                                # remember we return these from the parser function\n    mtr.average()                               # calculate mean for all keys\n```\n\nFor now, we support the following aggregation operators:\n\n* average (arithmetic mean)\n\n## Access the results\n\n---\n\nWe use `pandas.DataFrame` to store all the results for the current run.\nBoth raw data and aggregated data are stored in a single DataFrame.\n\n### Data layout\n\nThe structure of the result table is like below:\n\n| cmd_full                                                         | arg1   | arg2   | arg3   | attempt1_lineCount | attempt1_programName                 | attempt1_random | attempt2_lineCount | ... | avg_random | avg_lineCount |\n|------------------------------------------------------------------|--------|--------|--------|--------------------|--------------------------------------|-----------------|--------------------|-----|------------|---------------|\n| python E:\\MatrixTest\\cmd_example_program.py arg1_1 arg2_1 arg3_1 | arg1_1 | arg2_1 | arg3_1 | 4                  | E:\\MatrixTest\\cmd_example_program.py | 6               | 4                  |     | 3          | 4             |\n| ...                                                              |        |        |        |                    |                                      |                 |                    |     |            |               |\n\nThe table starts with the full command and arguments, followed by results for every attempt.\nThe columns are named after `attempt<No.repeat>_<key from parser>`.\nFinally, aggregated results in those `avg_<key from parser & params of average()>` columns.\n\nData types are inferred by `pandas`.\n\n### Access the internal data structure\n\nYou can directly access the `DataFrame` by calling `mtr.get_last_result()`.\n\n### Output to Excel\n\nGenerally, we recommend you to output your data to an Excel spreadsheet for further inspection.\n\n```python\n    mtr.to_excel(\"E:\\\\MatrixTest\\\\example_output.xlsx\", include_agg=True, include_raw=True)\n```\n\nThe first parameter is the output file path. Also, you can choose whether include raw/aggregated data in the Excel or not via the last two parameters.\n\n## Email Notification Service\n\n---\n\nFrom version `1.3.0`, you have the option to send an email to a designated email address when the experiments finished (i.e. at the end of `run()`)\nor when the Excel file is generated (i.e. at the end of `to_excel()`) then you will find the Excel file in the attachment.\n\n### How to enable email notification\n\nFirst, you need to instantiate a `EmailProvider`:\n```python\n    email_provider = MatrixTest.EmailService.MailjetProvider(api_key='xxxx',\n                                                             api_secret='xxxx')\n```\n\nFor now we only support the [Mailjet](https://mailjet.com) as the email service vendor.\n\n__Please note:__ There is a key pair in the `example.py` that you can use for free. But please __DO NOT__ send more than\n200 emails per day. That is the limit of Mailjet free account. We encourage you to create your own account and then replace\nthe keys if you expect to receive a lot of emails.\n\nThen, register the provider to `MatrixTestRunner` and enable the feature:\n```python\n    mtr.register_email_service(email_provider, \"example@example.com\")\n    mtr.enable_email_notification()\n```\nOnly one recipient is allowed.\n\nYou can also do this at initialization, refer to the [doc](https://matrixtest.readthedocs.io/en/latest/MatrixTestRunner.html#MatrixTest.MatrixTestRunner.MatrixTestRunner.__init__).\n\n__Please note:__ By enabling this, you will only receive a notification which includes the argument matrix for your reference.\nKeep reading if you want to receive the Excel file.\n\nTo receive a copy of the generate Excel file, just set the `send_by_email` argument to `True`. However, you still need to \nregister the provider and recipient.\n```python\n    mtr.to_excel(\"./example_output.xlsx\", send_by_email=True)\n```\n\n__Please note:__ You will receive two emails if you enable both of above. Usually, if you want to receive the Excel file,\njust enable it once when you call `to_excel()`.\n\n# Contributing\n\nAny of your comments, issues, PRs are welcome and appreciated.\n\n# Dependencies\n\n* Pandas\n* openpyxl\n* colorama\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DavyVan/MatrixTest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MatrixTest",
    "package_url": "https://pypi.org/project/MatrixTest/",
    "platform": "",
    "project_url": "https://pypi.org/project/MatrixTest/",
    "project_urls": {
      "Bug Tracker": "https://github.com/DavyVan/MatrixTest/issues",
      "Homepage": "https://github.com/DavyVan/MatrixTest"
    },
    "release_url": "https://pypi.org/project/MatrixTest/1.3.0/",
    "requires_dist": [
      "pandas",
      "colorama",
      "openpyxl",
      "mailjet-rest"
    ],
    "requires_python": ">=3.7.1",
    "summary": "A tool to facilitate matrix test via countless combination of arguments of a command line",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10401878,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eea9d8cbe61a6e458f110ba011a1ec61ef3cc2ef1c18735b506e6e6df51c4d48",
        "md5": "031a29766cd178d2bea94f9db1880423",
        "sha256": "9d0f2748612d7239e8f5557c2cb996f6bb3dfc34dd697d8773f0c4cf4765e70d"
      },
      "downloads": -1,
      "filename": "MatrixTest-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "031a29766cd178d2bea94f9db1880423",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.1",
      "size": 15169,
      "upload_time": "2021-05-19T07:57:33",
      "upload_time_iso_8601": "2021-05-19T07:57:33.978858Z",
      "url": "https://files.pythonhosted.org/packages/ee/a9/d8cbe61a6e458f110ba011a1ec61ef3cc2ef1c18735b506e6e6df51c4d48/MatrixTest-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88499527e78f84510aec1df22176bd4b2f33c1e8ab45528fe13f6e243b0e82fd",
        "md5": "49acd8f9a093bc53991408e2f4c11fec",
        "sha256": "58c1d76b1190bed2eeb9c17200f60498c8f9084044b557ad1eba1db122c40dc8"
      },
      "downloads": -1,
      "filename": "MatrixTest-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "49acd8f9a093bc53991408e2f4c11fec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.1",
      "size": 14095,
      "upload_time": "2021-05-19T07:57:34",
      "upload_time_iso_8601": "2021-05-19T07:57:34.879730Z",
      "url": "https://files.pythonhosted.org/packages/88/49/9527e78f84510aec1df22176bd4b2f33c1e8ab45528fe13f6e243b0e82fd/MatrixTest-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}