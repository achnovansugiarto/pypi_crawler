{
  "info": {
    "author": "Felipe Faria",
    "author_email": "felipefaria@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# üë®‚Äçüíª mitm\n\n<p align=\"center\">\n\n<a href=\"https://synchronizing.github.io/mitm/\">\n    <img src=\"https://github.com/synchronizing/mitm/actions/workflows/docs-publish.yaml/badge.svg\">\n  </a>\n\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\">\n  </a>\n</p>\n\nA customizable man-in-the-middle TCP proxy with out-of-the-box support for HTTP & HTTPS¬π.\n\n## Installing\n\n```\npip install mitm\n```\n\nNote that OpenSSL 1.1.1 or greater is required.\n\n## Documentation\n\nDocumentation can be found [**here**](https://synchronizing.github.io/mitm/). \n\n## Using\n\nUsing the default values for the `MITM` class:\n\n```python\nfrom mitm import MITM, protocol, middleware, crypto\n\nmitm = MITM(\n    host=\"127.0.0.1\",\n    port=8888,\n    protocols=[protocol.HTTP],\n    middlewares=[middleware.Log],\n    buffer_size=8192,\n    timeout=5,\n    keep_alive=True,\n    ssl_context=crypto.mitm_ssl_default_context(),\n)\nmitm.run()\n```\n\nThis will start a proxy on port 8888 that is capable of intercepting all HTTP traffic (with support for `CONNECT`), and log all activity.\n#### Protocols\n\n`mitm` comes with a set of built-in protocols, and a way to add your own. `Protocols` and are used to implement custom\n[application-layer protocols](https://en.wikipedia.org/wiki/Application_layer) that interpret and route traffic. Out-of-the-box `HTTP` is available.\n\n#### Middlewares\n\nMiddleware are used to implement event-driven behavior as it relates to the client and server connection. Out-of-the-box `Log` is available.\n\n### Example\n\nUsing the example above we can send a request to the server via another script:\n\n```python\nimport requests\n\nproxies = {\"http\": \"http://127.0.0.1:8888\", \"https\": \"http://127.0.0.1:8888\"}\nrequests.get(\"https://httpbin.org/anything\", proxies=proxies, verify=False)\n```\n\nWhich will lead to the following being logged where `mitm` is running in:\n\n```\n2022-02-27 12:19:40 INFO     MITM server started on 127.0.0.1:8080.\n2022-02-27 12:19:42 INFO     Client 127.0.0.1:53033 has connected.\n2022-02-27 12:19:42 INFO     Client 127.0.0.1:53033 to mitm:\n\n\tb'CONNECT httpbin.org:443 HTTP/1.0\\r\\n\\r\\n'\n\n2022-02-27 12:19:42 INFO     Connected to server 52.55.211.119:443.\n2022-02-27 12:19:42 INFO     Client 127.0.0.1:53033 to server 52.55.211.119:443:\n\n\tb'GET /anything HTTP/1.1\\r\\nHost: httpbin.org\\r\\nUser-Agent: python-requests/2.26.0\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n\n2022-02-27 12:19:42 INFO     Server 52.55.211.119:443 to client 127.0.0.1:53033:\n\n\tb'HTTP/1.1 200 OK\\r\\nDate: Sun, 27 Feb 2022 17:19:42 GMT\\r\\nContent-Type: application/json\\r\\nContent-Length: 396\\r\\nConnection: keep-alive\\r\\nServer: gunicorn/19.9.0\\r\\nAccess-Control-Allow-Origin: *\\r\\nAccess-Control-Allow-Credentials: true\\r\\n\\r\\n{\\n  \"args\": {}, \\n  \"data\": \"\", \\n  \"files\": {}, \\n  \"form\": {}, \\n  \"headers\": {\\n    \"Accept\": \"*/*\", \\n    \"Accept-Encoding\": \"gzip, deflate\", \\n    \"Host\": \"httpbin.org\", \\n    \"User-Agent\": \"python-requests/2.26.0\", \\n    \"X-Amzn-Trace-Id\": \"Root=1-621bb2ae-38b24f564e3a026c13e948b6\"\\n  }, \\n  \"json\": null, \\n  \"method\": \"GET\", \\n  \"origin\": \"xx.xxx.xxx.xxx\", \\n  \"url\": \"https://httpbin.org/anything\"\\n}\\n'\n\n2022-02-27 12:19:47 INFO     Server 52.55.211.119:443 has disconnected.\n2022-02-27 12:19:47 INFO     Client 127.0.0.1:53033 has disconnected.\n```\n\n---\n\n[1] Note that by \"HTTPS\" we mean a proxy that supports the `CONNECT` statement and not one that instantly performs a TLS handshake on connection with the client (before a valid HTTP/1.1 exchange). `mitm` is flexible enough that this can be added if needed.\n\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/synchronizing/mitm",
    "keywords": "mitm",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mitm",
    "package_url": "https://pypi.org/project/mitm/",
    "platform": null,
    "project_url": "https://pypi.org/project/mitm/",
    "project_urls": {
      "Bug Tracker": "https://github.com/synchronizing/mitm/issues",
      "Documentation": "https://synchronizing.github.io/mitm/",
      "Homepage": "https://github.com/synchronizing/mitm",
      "Source Code": "https://github.com/synchronizing/mitm/tree/master"
    },
    "release_url": "https://pypi.org/project/mitm/1.3.0/",
    "requires_dist": [
      "PyOpenSSL (==22.0.0)",
      "appdirs (==1.4.4)",
      "httpq (==1.1.1)",
      "toolbox (==1.8.1)",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "coveralls ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "sphinx-copybutton ; extra == 'dev'",
      "sphinx-autobuild ; extra == 'dev'",
      "furo ; extra == 'dev'"
    ],
    "requires_python": ">=3.5",
    "summary": "Man-in-the-middle proxy with customizable options.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15893703,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "603eff0cde0686792d93053676838c2b79c0233729da173b3de31e1cb7699dd9",
        "md5": "c6af1cd24cda6d413aabc2348d2af4a0",
        "sha256": "b52d12c855cc3b65ed97424a62766fca14d1408435a7f7ac517c921ee0e36e95"
      },
      "downloads": -1,
      "filename": "mitm-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6af1cd24cda6d413aabc2348d2af4a0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 14472,
      "upload_time": "2022-05-22T20:32:54",
      "upload_time_iso_8601": "2022-05-22T20:32:54.662441Z",
      "url": "https://files.pythonhosted.org/packages/60/3e/ff0cde0686792d93053676838c2b79c0233729da173b3de31e1cb7699dd9/mitm-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cf69a75281d413697451106375452ecf0497c6086f30838889ce3d184400849",
        "md5": "47c1d3804e789f54406332e5c4374712",
        "sha256": "5b0ddc03ceca9b2200491d434d0224c713eaf009b1da0e6305f257a590d1f3c9"
      },
      "downloads": -1,
      "filename": "mitm-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47c1d3804e789f54406332e5c4374712",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 24866,
      "upload_time": "2022-05-22T20:32:56",
      "upload_time_iso_8601": "2022-05-22T20:32:56.833937Z",
      "url": "https://files.pythonhosted.org/packages/0c/f6/9a75281d413697451106375452ecf0497c6086f30838889ce3d184400849/mitm-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}