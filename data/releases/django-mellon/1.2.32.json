{
  "info": {
    "author": "Entr'ouvert",
    "author_email": "info@entrouvert.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-mellon\n=============\n\nSAML 2.0 authentication for Django\n\nUsage\n=====\n\nYou need to have the Python binding for the Lasso library installed, you can\nfind source and package for Debian on http://lasso.entrouvert.org/download/.\n\nAdd mellon to your installed apps::\n\n    INSTALLED_APPS = (\n       ...\n       'mellon',\n    )\n\nAdd the SAMLBacked to your authentication backends::\n\n    AUTHENTICATION_BACKENDS = (\n        ...\n        'mellon.backends.SAMLBackend',\n    )\n\nAdd mellon urls to your urls::\n\n    urlpatterns = patterns('',\n        ...\n        url(r'^/accounts/mellon/', include('mellon.urls')),\n    )\n\nIf SAML 2.0 should be your only authentication method you can define `mellon_login` as you main `LOGIN_URL`::\n\n    LOGIN_URL = 'mellon_login'\n    LOGOUT_URL = 'mellon_logout'\n\nYour metadata will be downloadable through HTTP on \n\n    http://whatever.example.net/accounts/mellon/metadata\n\nIf your identity provider ask for your assertion consumer URL it's on\n\n    http://whatever.example.net/accounts/mellon/login\n\nIf your identity provider ask for your logout URL it's on\n\n    http://whatever.example.net/accounts/mellon/logout\n\nSession\n=======\n\nAfter an authentication attributes are stored in the session using a\ndictionary, the key is `mellon_session`. The dictionary contains:\n\n - issuer: the EntityID of the identity provider\n - name_id_content: the value of the NameID\n - name_id_format: the format of the NameID\n - authn_instant: the ISO8601 date of the authentication on the identity provider, optional.\n - session_not_on_or_after: the ISO8691 date after which the local\n   session should be closed. Note that we automatically set the\n   expiration of the Django session to this value if it's available.\n - authn_context_class_ref: the authentication method of the current\n   authentication on the identity provider. You can restrict\n   authorized authentication methods using the setting\n   `MELLON_AUTHN_CLASSREF`.\n - all attributes extracted from the assertion.\n\nSettings\n========\n\nAll generic setting apart from `MELLON_IDENTITY_PROVIDERS` can be\noverridden in the identity provider settings by removing the\n`MELLON_` prefix.\n\nMELLON_IDENTITY_PROVIDERS\n-------------------------\n\nA list of dictionaries, only one key is mandatory in those\ndictionaries `METADATA` it should contain the UTF-8 content of the\nmetadata file of the identity provider or if it starts with a slash\nthe absolute path toward a metadata file. All other keys are override\nof generic settings.\n\nMELLON_PUBLIC_KEYS\n------------------\n\nList of public keys of this service provider, add multiple keys for\ndoing key roll-over\n\nMELLON_PRIVATE_KEY\n------------------\n\nThe PKCS#8 PEM encoded private key. If neither MELLON_PRIVATE_KEYS and\nMELLON_PRIVATE_KEY are set, request will not be signed.\n\nMELLON_PRIVATE_KEY_PASSWORD\n---------------------------\n\nPassword for the private key if needed, default is None\n\nMELLON_PRIVATE_KEYS\n-------------------\n\nA list of private keys contained in strings (same format ass\nMELLON_PRIVATE_KEY) or of tuple paris (private_key, private_key_password). If\nMELLON_PRIVATE_KEY is None, the first key in MELLON_PRIVATE_KEYS will be used\nto sign messages. Other keys are only for decrypting encrypted assertions.  If\nthe same key appear in MELLON_PRIVATE_KEY and MELLON_PRIVATE_KEYS it will be\nignored the second time. If neither MELLON_PRIVATE_KEYS and MELLON_PRIVATE_KEY\nare set, request will not be signed.\n\nMELLON_NAME_ID_FORMATS\n----------------------\n\nNameID formats to advertise in the metadata file, default is ().\n\nMELLON_NAME_ID_POLICY_FORMAT\n----------------------------\n\nThe NameID format to request, default is None.\n\nMELLON_FORCE_AUTHN\n------------------\n\nWhether to force authentication on each authencation request,\ndefault is False.\n\nMELLON_ADAPTER\n--------------\n\nA list of class providings methods handling SAML authorization, user\nlookup and provisioning. Optional methods on theses classes are\n\n - authorize(idp, saml_attributes) -> boolean\n\n   If any adapter returns False, the authentication is refused. It's\n   possible to raise PermissionDenied to show a specific message on\n   the login interface.\n\n - lookup_user(idp, saml_attributes) -> User / None\n\n   Each adapter is called in the order of the settings, the first\n   return value which is not None is kept as the authenticated user.\n\n - provision(user, idp, saml_attributes -> None\n\n   This method is there to fill an existing user fields with data\n   from the SAML attributes or to provision any kind of object in the\n   application.\n\nSettings of the default adapter\n===============================\n\nThe following settings are used by the default adapter\n`mellon.adapters.DefaulAdapter` if you use your own adapter you can\nignore them. If your adapter inherit from the default adapter those\nsettings can still be applicable.\n\nMELLON_REALM\n------------\n\nThe default realm to associate to user created with the default\nadapter, default is 'saml'.\n\nMELLON_PROVISION\n----------------\n\nWhether to create user if their username does not already exists,\ndefault is True.\n\nMELLON_USERNAME_TEMPLATE\n------------------------\n\nThe template to build and/or retrieve a user from its username based\non received attributes, the syntax is the one from the str.format()\nmethod of Python. Available variables are:\n\n - realm\n - idp (current setting for the idp issuing the assertion)\n - attributes\n\nThe default value is `{attributes{name_id_content]}@realm`.\n\nAnother example could be `{atttributes[uid][0]}` to set the passed\nusername as the username of the newly created user.\n\nMELLON_ATTRIBUTE_MAPPING\n------------------------\n\nMaps templates based on SAML attributes to field of the user model.\nDefault is {}. To copy standard LDAP attributes into your Django user\nmodel could for example do that::\n\n    MELLON_ATTRIBUTE_MAPPING = {\n        'email': '{attributes[mail][0]',\n        'first_name': '{attributes[gn][0]}',\n        'last_name': '{attributes[sn][0]}',\n    }\n\nMELLON_SUPERUSER_MAPPING\n------------------------\n\nAttributes superuser flags to user if a SAML attribute contains a given value,\ndefault is {}. Ex.::\n\n    MELLON_SUPERUSER_MAPPING = {\n        'roles': 'Admin',\n    }\n\nMELLON_AUTHN_CLASSREF\n---------------------\n\nAuthorized authentication class references, default is (). Empty\nvalue means everything is authorized. Authentication class reference\nmust be obtained from your identity provider but SHOULD come from the\nSAML 2.0 specification.\n\nMELLON_GROUP_ATTRIBUTE\n----------------------\n\nName of the SAML attribute to map to Django group names, default is None. Ex.:\n\n   MELLON_GROUP_ATTRIBUTE = 'role'\n\nMELLON_CREATE_GROUP\n-------------------\n\nWhether to create group or only assign existing groups, default is True.\n\nMELLON_ERROR_URL\n----------------\n\nURL for the continue link when authentication fails, default is\nNone. If not ERROR_URL is None, the RelayState is used. If there is\nno RelayState, the LOGIN_REDIRECT_URL, which defaults to /, is used.\n\nMELLON_ERROR_REDIRECT_AFTER_TIMEOUT\n-----------------------------------\n\nTimeout in seconds before automatically redirecting the user to the\ncontinue URL when authentication has failed. Default is 120 seconds.\n\nMELLON_VERIFY_SSL_CERTIFICATE\n-----------------------------\n\nVerify SSL certificate when doing HTTP requests, used when resolving artifacts.\nDefault is True.\n\nMELLON_TRANSIENT_FEDERATION_ATTRIBUTE\n-------------------------------------\n\nName of an attribute to use in replacement of the NameID content when the NameID\nformat is transient. Without it no login using a transient NameID can occur with\nthe default adapter.\nDefault is None.\n\nMELLON_DEFAULT_ASSERTION_CONSUMER_BINDING\n-----------------------------------------\n\nShould be post or artifact. Default is post. You can refer to the SAML 2.0\nspecification to learn the difference.\n\nTests\n=====\n\nUnit tests are written using pytest and launched using tox, and can be run with:\n\n   tox\n\nRemarks\n=======\n\nTo honor the SessionNotOnOrAfter attribute sent by an IdP you must use a specific SessionEngine,\nonly db and cached_db are supported currently, the equivalent session engines are:\n\n    mellon.sessions_backends.db\n\nand\n\n    mellon.sessions_backends.cached_db\n\nChanges\n=======\n\n1.2.26\n------\n- allow federation with IdP using transient NameID and stable identifier\n  attribute\n- add support for artifact POST\n- replace dateutil by isodate\n- do not wrap login view in a transaction (using the non_atomic_request\n  decorator), to allow finer use of transaction in the login workflow",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dev.entrouvert.org/projects/django-mellon/",
    "keywords": "",
    "license": "AGPLv3 or later",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mellon",
    "package_url": "https://pypi.org/project/django-mellon/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mellon/",
    "project_urls": {
      "Homepage": "http://dev.entrouvert.org/projects/django-mellon/"
    },
    "release_url": "https://pypi.org/project/django-mellon/1.2.32/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SAML 2.0 authentication for Django",
    "version": "1.2.32",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15459434,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "352c27e3cd65c40f04cc6a39a12213af65fc60b948ecce5bd7030cfb2439d992",
        "md5": "df6d0ed4a81ca9cda5ab5403e28d043c",
        "sha256": "dbdac2a5aa408b848717ae5fb68859c44efa30fbf36ab5a98783afc2982a37e4"
      },
      "downloads": -1,
      "filename": "django-mellon-1.2.32.tar.gz",
      "has_sig": false,
      "md5_digest": "df6d0ed4a81ca9cda5ab5403e28d043c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32682,
      "upload_time": "2017-05-06T08:15:59",
      "upload_time_iso_8601": "2017-05-06T08:15:59.556980Z",
      "url": "https://files.pythonhosted.org/packages/35/2c/27e3cd65c40f04cc6a39a12213af65fc60b948ecce5bd7030cfb2439d992/django-mellon-1.2.32.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}