{
  "info": {
    "author": "Mark Haakman",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# [dslinter](hynn01.github.io/dslinter/)\n[![build](https://github.com/SERG-Delft/dslinter/actions/workflows/build.yml/badge.svg)](https://github.com/SERG-Delft/dslinter/actions/workflows/build.yml)\n[![codecov.io](https://codecov.io/github/SERG-Delft/dslinter/coverage.svg?branch=main)](https://codecov.io/github/SERG-Delft/dslinter?branch=main)\n[![PyPI version](https://badge.fury.io/py/dslinter.svg)](https://badge.fury.io/py/dslinter)\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![PyPI - Downloads - Monthly](https://img.shields.io/pypi/dm/dslinter)](https://pypi.org/project/dslinter/) \n[![Code Grade](https://api.codiga.io/project/33224/status/svg)](https://api.codiga.io/project/33224/status/svg)\n\n`dslinter` is a PyLint plugin for linting data science and machine learning code. We plan to support the following Python libraries: TensorFlow, PyTorch, Scikit-Learn, Pandas, NumPy and SciPy.\n\n## Installation\nTo install from the Python Package Index:\n```\npip install dslinter\n```\n\n## Usage\nTo only use the checkers implemented in this plugin, run:\n```\npylint --load-plugins=dslinter --disable=all --enable=import,data-leakage <other_options> <path_to_sources>\n```\nTo expand a current pylint configuration with the checkers from this plugin, run:\n```\npylint --load-plugins=dslinter <other_options> <path_to_sources>\n```\n\n## How to contribute\nContributions are welcome! If you want to contribute, please see the following steps:\n1. fork the repository and clone the repository you forked.\n```\ngit clone https://github.com/your-github-account/dslinter.git\ngit submodule update --init --recursive\n```\n2. `dslinter` uses `poetry` to manage dependencies, so you will need to install `poetry` first and then install the dependencies. \n```\npip install poerty\npoetry install\n```\n- To install `dslinter` from source for development purposes, install it with:\n```\npoetry build\npip install ./dist/dslinter-version.tar.gz\n```\n3. Assign yourself to the issue you want to solve. If you identify a new issue that needs to be solved, feel free to open a new issue.\n4. Make changes to the repository and run the tests.\nTo run the tests using pytest:\n```\npoetry run pytest .\n```\n5. Make a pull request. The pull request is expected to pass the tests. :)\n\n\n## Implemented Checkers:\n\n- **C5501 - C5506 | import | Import Checker**: Check whether data science modules are imported using the correct naming conventions.\n\n- **R5501 | unnecessary-iteration-pandas | Unnecessary Iteration Checker(Pandas)**: Vectorized solutions are preferred over iterators for DataFrames. If iterations are used while there are vectorized APIs can be used, the rule is violated.\n\n- **W5501 | dataframe-iteration-modification-pandas | Unnecessary Iteration Checker(Pandas)**: A dataframe where is iterated over should not be modified. If the dataframe is modified during iteration, the rule is violated.\n\n- **R5502 | unnecessary-iteration-tensorflow | Unnecessary Iteration Checker(TensorFlow)**: If there is any augment assignment operation in the loop, the rule is violated. Augment assignment in the loop can be replaced with vectorized solution in TensorFlow APIs.\n\n- **E5501 | nan-numpy | Nan Equality Checker(NumPy)**: Values cannot be compared with np.nan, as `np.nan != np.nan`.\n\n- **W5502 | chain-indexing-pandas | Chain Indexing Checker(Pandas)**: Chain indexing is considered bad practice in pandas code and should be avoided. If chain indexing is used on a pandas dataframe, the rule is violated.\n\n- **R5503 | datatype-pandas | Datatype Checker(Pandas)**: Datatype should be set when a dataframe is imported from data to ensure the data formats are imported as expected. If the datatype is not set when importing, the rule is violated.\n\n- **R5504 | column-selection-pandas | Column Selection Checker(Pandas)**: Column should be selected after the dataframe is imported for better readability. The developer will know what data to be expected in the downstream.\n\n- **R5505 | merge-parameter-pandas | Merge Parameter Checker(Pandas)**: Parameters 'how', 'on' and 'validate' should be set for merge operations to ensure the correct usage of merging.\n\n- **W5503 | inplace-pandas | InPlace Checker(Pandas)**: Operations on DataFrames return new DataFrames, and they should be assigned to a variable. Otherwise the result will be lost, and the rule is violated. Operations from the whitelist and with `in_place` parameter set are excluded.\n\n- **W5504 | dataframe-conversion-pandas | Dataframe Conversion Checker(Pandas)**: For dataframe conversion in pandas code, use .to_numpy() instead of .values. If .values is used in pandas code, the rule is violated.\n\n- **W5505 | scaler-missing-scikitlearn | Scaler Missing Checker(ScikitLearn)**: Check whether the scaler is used before every scaling-sensitive operation in scikit-learn codes. Scaling-sensitive operations includes Principal Component Analysis (PCA), Support Vector Machine (SVM), Stochastic Gradient Descent (SGD), Multi-layer Perceptron classifier and L1 and L2 regularization.\n\n- **R5506 | hyperparameters-scikitlearn | Hyperparameter Checker(ScikitLearn)**: For scikit-learn learning algorithms, some important hyperparameters should be set.\n\n- **R5507 | hyperparameter-tensorflow | Hyperparameter Checker(TensorFlow)**: For neural network learning algorithm, some imporatnt hyperparameters should be set, such as learning rate, batch size, momentum and weight decay.\n\n- **R5508 | hyperparameter-pytorch | Hyperparameter Checker(PyTorch)**: For neural network learning algorithm, some imporatnt hyperparameters should be set, such as learning rate, batch size, momentum and weight decay.\n\n- **W5506 | memory-release-tensorflow | Memory Release Checker(TensorFlow)**: If a neural network is created in the loop, and no memory clear operation is used, the rule is violated.\n\n- **W5507 | deterministic-pytorch | Deterministic Algorithm Usage Checker(PyTorch)**: If use_deterministic algorithm is not used in a pytorch program, the rule is violated.\n\n- **W5508 | randomness-control-numpy | Randomness Control Checker(NumPy)**: The np.seed() should be used to preserve reproducibility in a machine learning program.\n\n- **W5509 | randomness-control-scikitlearn | Randomness Control Checker(ScikitLearn)**: For reproducible results across executions, remove any use of random_state=None in scikit-learn estimators.\n\n- **W5510 | randomness-control-tensorflow | Randomness Control Checker(TensorFlow)**: The tf.random.set_seed() should be used to preserve reproducibility in a Tensorflow program.\n\n- **W5511 | randomness-control-pytorch | Randomness Control Checker(PyTorch)**: The torch.manual_seed() should be used to preserve reproducibility in a Tensorflow program.\n\n- **W5512 | randomness-control-dataloader-pytorch | Randomness Control Checker(PyTorch-Dataloader)**: The worker_init_fn() and generator should be set in dataloader to preserve reproducibility. If they're not set, the rule is violated.\n\n- **W5513 | missing-mask-tensorflow | Mask Missing Checker(TensorFlow)**: If log function is used in the code, check whether the argument value is valid. \n\n- **W5514 | missing-mask-pytorch | Mask Missing Checker(PyTorch)**: If log function is used in the code, check whether the argument value is valid. \n\n- **W5516 | tensor-array-tensorflow | Tensor Array Checker(Tensorflow)**: Use tf.TensorArray() for growing array in the loop.\n\n- **W5517 | forward-pytorch | Net Forward Checker(PyTorch)**: It is recommended to use self.net() rather than self.net.forward() in PyTorch code. If self.net.forward() is used in the code, the rule is violated.\n\n- **W5518 | gradient-clear-pytorch | Gradient Clear Checker(PyTorch)**: The loss_fn.backward() and optimizer.step() should be used together with optimizer.zero_grad(). If the \".backward()\" is missing in the code, the rule is violated.\n\n- **W5519 | data-leakage-scikitlearn | Data Leakage Checker(ScikitLearn)**: All scikit-learn estimators should be used inside Pipelines, to prevent data leakage between training and test data.\n\n- **W5520 | dependent-threshold-scikitlearn | Dependent Threshold Checker(TensorFlow)**: If threshold-dependent evaluation(e.g., f-score) is used in the code, check whether threshold-indenpendent evaluation(e.g., auc) metrics is also used in the code.\n\n- **W5521 | dependent-threshold-tensorflow | Dependent Threshold Checker(PyTorch)**: If threshold-dependent evaluation(e.g., f-score) is used in the code, check whether threshold-indenpendent evaluation(e.g., auc) metrics is also used in the code.\n\n- **W5522 | dependent-threshold-pytorch | Dependent Threshold Checker(ScikitLearn)**: If threshold-dependent evaluation(e.g., f-score) is used in the code, check whether threshold-indenpendent evaluation(e.g., auc) metrics is also used in the code.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.org/project/dslinter/",
    "keywords": "machine learning,software engineering",
    "license": "GPL-3.0 License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dslinter",
    "package_url": "https://pypi.org/project/dslinter/",
    "platform": null,
    "project_url": "https://pypi.org/project/dslinter/",
    "project_urls": {
      "Homepage": "https://pypi.org/project/dslinter/",
      "Repository": "https://github.com/SERG-Delft/dslinter"
    },
    "release_url": "https://pypi.org/project/dslinter/2.0.0/",
    "requires_dist": [
      "toml (>=0.9,<0.10)",
      "pylint (==2.12.2)",
      "astroid (==2.9.3)",
      "mypy (==0.931)",
      "data-science-types (==0.2.23)",
      "pyspark-stubs (==3.0.0.post3)",
      "pytest (==3.10.1)",
      "pytest-cov (==2.9.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "`dslinter` is a pylint plugin for linting data science and machine learning code. We plan to support the following Python libraries: TensorFlow, PyTorch, Scikit-Learn, Pandas, NumPy and SciPy.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14167215,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03218ec1257e07f061909656dd2452a2d7849bed0839c818b87a23261549c4ed",
        "md5": "28043a673dcc98a2ad837c983972958a",
        "sha256": "83b8bd2912312cf01f5f098b26864e819ed24b315d8005eebdcf29f50baf67fc"
      },
      "downloads": -1,
      "filename": "dslinter-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28043a673dcc98a2ad837c983972958a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 102803,
      "upload_time": "2022-05-01T09:46:07",
      "upload_time_iso_8601": "2022-05-01T09:46:07.081711Z",
      "url": "https://files.pythonhosted.org/packages/03/21/8ec1257e07f061909656dd2452a2d7849bed0839c818b87a23261549c4ed/dslinter-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df1b634f0df4782adbcdabc1edff9ab453563d19e0e37a502a19830efacd35bf",
        "md5": "b0adcf0f041f5a50b7e47159bb5a6140",
        "sha256": "44de9b125b70f407cc615b82a701c54dd08a846ba118fd5c698d4f12492a8973"
      },
      "downloads": -1,
      "filename": "dslinter-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b0adcf0f041f5a50b7e47159bb5a6140",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 65478,
      "upload_time": "2022-05-01T09:46:09",
      "upload_time_iso_8601": "2022-05-01T09:46:09.168691Z",
      "url": "https://files.pythonhosted.org/packages/df/1b/634f0df4782adbcdabc1edff9ab453563d19e0e37a502a19830efacd35bf/dslinter-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}