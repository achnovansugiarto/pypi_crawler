{
  "info": {
    "author": "Jonas Obrist et al.",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=====================\nDjango Mailchimp v1.3\n=====================\n\nThis is an integrated app for Django dealing with the Mailchimp mailing list system.\n\n.. warning::\n    This package used to be called simply ``django-mailchimp``. But since the\n    mailchimp API changed in non-backwards-compatible ways between v1.2 and v1.3,\n    we renamed it to ``django-mailchimp-v1.3``.\n\n    Stuff may break in funny ways with this release, so make sure to thoroughly\n    test your code if you want to update from ``django-mailchimp``.\n\nQuick start guide:\n------------------\n\nInstallation:\n*************\n\n1. Install ``django-mailchimp-v1.3``::\n\n    pip install django-mailchimp-v1.3\n\n2. Add a ``MAILCHIMP_API_KEY`` to your settings.py with your mailchimp API key as the value (obviously)\n\n3. Add ``mailchimp`` to your project's list of INSTALLED_APPS\n\n4. To start using the API, you should start by using utils.get_connection(). This will use the API_KEY you\njust defined in settings.py\n\n\nSubscribing a user to a list:\n*****************************\n\n1. To get the list::\n\n    list = mailchimp.utils.get_connection().get_list_by_id(<list key id>)\n\n2. Now add a member to the mailing list::\n\n    list.subscribe('example@example.com', {'EMAIL':'example@example.com'})\n\n\nThose pesky merge vars:\n-----------------------\n\nGeneral info:\n*************\n\nMailchimp is a quite generic service. As such, it needs to store information on people who subscribe to a list,\nand that information is specific to this very list!\n\nSo to help you build dynamic forms (presumabely), mailchimp added the merge_vars. They are, basically, a \ndictionnary showing infromation and meta-information defined for each piece of information.\nHere's what the default set of merge vars look like (ona  brand new list with default options)::\n\n    [\n        {\n        'field_type': 'email', \n        'name': 'Email Address', \n        'show': True, \n        'default': None, \n        'req': True, \n        'public': True, \n        'tag': 'EMAIL', \n        'helptext': None, \n        'order': '1', \n        'size': '25'\n        },{\n        'field_type': 'text', \n        'name': 'First Name', \n        'show': True, \n        'default': '', \n        'req': False, \n        'public': True, \n        'tag': 'FNAME', \n        'helptext': '', \n        'order': '2', \n        'size': '25'\n        },{\n        'field_type': 'text', \n        'name': 'Last Name', \n        'show': True, \n        'default': '', \n        'req': False, \n        'public': True, \n        'tag': 'LNAME', \n        'helptext': '', \n        'order': '3', \n        'size': '25'\n        }\n    ]\n\nAs you can see, it's a list of 3 dictionnaries, each containing several fields that you should use to build your \nuser interface with (since you're using this app, that means your Django form).\n\nObtaining them:\n***************\n\nYou can recreate this list using the following API call::\n\n    list = mailchimp.utils.get_connection().get_list_by_id(<The list's key ID>)\n    print list.merges\n\n\nUsing them:\n***********\n\nWhen you make a post to mailchimp, you need to pass merge_vars. For example, in a new list created with the default\nsettings on the mailchimp website, the following call adds a member to a list (with a little more info than our bare minimum example up there)::\n\n    list = mailchimp.utils.get_connection().get_list_by_id(<The list's key ID>)\n    list.subscribe('example@example.com', {'EMAIL': 'example@example.com', 'FNAME': 'Monthy', 'LNAME': 'Pythons'})\n\nNote the use of the 'tag' field as the key for fields (why they didn't call it 'key' or 'id' is beyond comprehension).\n\n\n\nCreate a view:\n--------------\n\nWe'll now try to move up the stack and create the necessary elements to make a useable mailchimp interface\n\nFire up your favorite editor and open your views.py. Put in the following snippet of code::\n\n    from django.http import HttpResponseRedirect\n    from mailchimp import utils\n\n    MAILCHIMP_LIST_ID = 'spamspamspamspameggsspamspam' # DRY :)\n    REDIRECT_URL_NAME = '/mailing_list_success/'\n    def add_email_to_mailing_list(request):\n        if request.POST['email']:\n            email_address = request.POST['email']\n            list = utils.get_connection().get_list_by_id(MAILCHIMP_LIST_ID)\n            list.subscribe(email_address, {'EMAIL': email_address})\n            return HttpResponseRedirect('/mailing_list_success/')\n        else:\n            return HttpResponseRedirect('/mailing_list_failure/')\n\nOf course, if you feel redirecting the user is not the right approach (handling a form might be a good idea), feel\nfree to adapt this simple example to your needs :p\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/piquadrat/django-mailchimp",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-mailchimp-v1.3",
    "package_url": "https://pypi.org/project/django-mailchimp-v1.3/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-mailchimp-v1.3/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/piquadrat/django-mailchimp"
    },
    "release_url": "https://pypi.org/project/django-mailchimp-v1.3/1.3.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mailchimp wrapper for Django, using Mailchimp API 1.3",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2410839,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9ff1fedd270341e7d30e678cab4ebf14158ce6f481dbed1ab9b44be76fdaae3",
        "md5": "02d38248ebfdc099dfd75306dc4ba6df",
        "sha256": "78dc00e135da380b09ba3824193fd006a78eeebcd0644e2437ce74f96dc0b1f9"
      },
      "downloads": -1,
      "filename": "django-mailchimp-v1.3-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "02d38248ebfdc099dfd75306dc4ba6df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32586,
      "upload_time": "2014-01-09T14:49:22",
      "upload_time_iso_8601": "2014-01-09T14:49:22.069435Z",
      "url": "https://files.pythonhosted.org/packages/f9/ff/1fedd270341e7d30e678cab4ebf14158ce6f481dbed1ab9b44be76fdaae3/django-mailchimp-v1.3-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}