{
  "info": {
    "author": "CloudBlue",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Text Processing :: Filters"
    ],
    "description": "Django RQL\n==========\n![pyversions](https://img.shields.io/pypi/pyversions/django-rql.svg)  [![PyPi Status](https://img.shields.io/pypi/v/django-rql.svg)](https://pypi.org/project/django-rql/) [![Docs](https://readthedocs.org/projects/django-rql/badge/?version=latest)](https://readthedocs.org/projects/django-rql) [![codecov](https://codecov.io/gh/cloudblue/django-rql/branch/master/graph/badge.svg)](https://codecov.io/gh/cloudblue/django-rql) [![Build Status](https://travis-ci.org/cloudblue/django-rql.svg?branch=master)](https://travis-ci.org/cloudblue/django-rql) [![PyPI status](https://img.shields.io/pypi/status/django-rql.svg)](https://pypi.python.org/pypi/django-rql/) [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=django-rql&metric=alert_status)](https://sonarcloud.io/dashboard?id=django-rql)\n\n\n`django-rql` is an Django application, that implements RQL filter backend for your web application.\n\n\nRQL\n---\n\nRQL (Resource query language) is designed for modern application development. It is built for the web, ready for NoSQL, and highly extensible with simple syntax.\nThis is a query language fast and convenient database interaction. RQL was designed for use in URLs to request object-style data structures.\n\n\n[RQL Reference](https://connect.cloudblue.com/community/api/rql/)\n\n[RQL for Web](https://www.sitepen.com/blog/resource-query-language-a-query-language-for-the-web-nosql/)\n\nNotes\n-----\n\nParsing is done with [Lark](https://github.com/lark-parser/lark) ([cheatsheet](https://lark-parser.readthedocs.io/en/latest/lark_cheatsheet.pdf)).\nThe current parsing algorithm is [LALR(1)](https://www.wikiwand.com/en/LALR_parser) with standard lexer.\n\nCurrently supported operators\n=============================\n1. Comparison (eq, ne, gt, ge, lt, le, like, ilike, search)\n0. List (in, out)\n0. Logical (and, or, not)\n0. Constants (null(), empty())\n0. Ordering (ordering)\n0. Select (select)\n\n\nDocumentation\n=============\n\nFull documentation is available at [https://django-rql.readthedocs.org](https://django-rql.readthedocs.org).\n\n\nExample\n=======\n```python\nfrom dj_rql.constants import FilterLookups\nfrom dj_rql.filter_cls import RQLFilterClass, RQL_NULL\n\n\nclass ModelFilterClass(RQLFilterClass):\n    \"\"\"\n    MODEL - Django ORM model\n    FILTERS - List of filters\n    EXTENDED_SEARCH_ORM_ROUTES - List of additional Django ORM fields for search\n    DISTINCT - Boolean flag, that specifies if queryset must always be DISTINCT\n    SELECT - Boolean flag, that specifies if Filter Class supports select operations and queryset optimizations\n    OPENAPI_SPECIFICATION - Python class that renders OpenAPI specification\n\n    Filters can be set in two ways:\n        1) string (default settings are calculated from ORM)\n        2) dict (overriding settings for specific cases)\n\n    Filter Dict Structure\n    {\n        'filter': str\n        # or\n        'namespace': str\n\n        'source': str\n        # or\n        'sources': iterable\n        # or\n        'custom': bool\n        # or\n        'dynamic': bool\n        'field': obj\n\n        'lookups': set\n\n        'qs': obj\n\n        'use_repr': bool  # can't be used in namespaces\n        'ordering': bool  # can't be true if 'use_repr=True'\n        'search': bool    # can't be true if 'use_repr=True'\n        'hidden': bool\n    }\n\n    \"\"\"\n    MODEL = Model\n    FILTERS = ['id', {\n        # `null_values` can be set to override ORM is_null behaviour\n        # RQL_NULL is the default value if NULL lookup is supported by field\n        'filter': 'title',\n        'null_values': {RQL_NULL, 'NULL_ID'},\n        'ordering': False,\n    }, {\n        # `ordering` can be set to True, if filter must support ordering (sorting)\n        # `ordering` can't be applied to non-db fields\n        'filter': 'status',\n        'ordering': True,\n    }, {\n        # `search` must be set to True for filter to be used in searching\n        # `search` must be applied only to text db-fields, which have ilike lookup\n        'filter': 'author__email',\n        'search': True,\n    }, {\n        # `source` must be set when filter name doesn't match ORM path\n        'filter': 'name',\n        'source': 'author__name',\n    }, {\n        # `namespace` is useful for API consistency, when dealing with related models\n        'namespace': 'author',\n        'filters': ['id', 'name'],  # will be converted to `author.id` and `author.name`\n    },{\n        # `distinct` needs to be setup for filters that require QS to work in DISTINCT mode\n        # `openapi` configuration is automatically collected by OpenAPI autogenerator\n        'filter': 'published.at',\n        'source': 'published_at',\n        'distinct': True,\n        'openapi': {\n            'required': True,\n            'deprecated': True,\n            'description': 'Good description',\n            'hidden': False,  # can be set to avoid collecting by autogenerator\n            # type and format are collected automatically and shouldn't be setup, in general\n            'type': 'string',\n            'format': 'date',\n        },\n    }, {\n        # `use_repr` flag is used to filter by choice representations\n        'filter': 'rating.blog',\n        'source': 'blog_rating',\n        'use_repr': True,\n    }, {\n        # `hidden` flag is used to set default select behaviour for associated field\n        'filter': 'rating.blog_int',\n        'source': 'blog_rating',\n        'use_repr': False,\n        'ordering': True,\n        'hidden': True,\n    }, {\n        # We can change default lookups for a certain filter\n        'filter': 'amazon_rating',\n        'lookups': {FilterLookups.GE, FilterLookups.LT},\n    }, {\n        # Sometimes it's needed to filter by several sources at once (distinct is always True).\n        # F.e. this could be helpful for searching.\n        'filter': 'd_id',\n        'sources': {'id', 'author__id'},\n        'ordering': True,\n    }, {\n        # Some fields may have no DB representation or non-typical ORM filtering\n        # `custom` option must be set to True for such fields\n        'filter': 'custom_filter',\n        'custom': True,\n        'lookups': {FilterLookups.EQ, FilterLookups.IN, FilterLookups.I_LIKE},\n        'ordering': True,\n        'search': True,\n\n        'custom_data': [1],\n    }]\n\n\nfrom dj_rql.drf.backend import  RQLFilterBackend\nfrom dj_rql.drf.paginations import RQLContentRangeLimitOffsetPagination\n\nclass DRFViewSet(mixins.ListModelMixin, GenericViewSet):\n    queryset = MODEL.objects.all()\n    serializer_class = ModelSerializer\n    rql_filter_class = ModelFilterClass\n    pagination_class = RQLContentRangeLimitOffsetPagination\n    filter_backends = (RQLFilterBackend,)\n```\n\nNotes\n=====\n0. Values with whitespaces or special characters, like ',' need to have \"\" or ''\n1. Supported date format is ISO8601: 2019-02-12\n2. Supported datetime format is ISO8601: 2019-02-12T10:02:00 / 2019-02-12T10:02Z / 2019-02-12T10:02:00+03:00\n3. Support for Choices() fields from [Django Model Utilities](https://django-model-utils.readthedocs.io/en/latest/utilities.html#choices) is added\n\n\nDjango Rest Framework Extensions\n================================\n1. Pagination (limit, offset)\n0. Support for custom fields, inherited at any depth from basic model fields, like CharField().\n0. Backend `DjangoFiltersRQLFilterBackend` with automatic conversion of [Django-Filters](https://django-filter.readthedocs.io/en/master/) query to RQL query.\n0. OpenAPI docs are autogenerated for filter classes.\n\nBest Practices\n==============\n1. Use `dj_rql.utils.assert_filter_cls` to test your API view filters. If the mappings are correct and there is no custom filtering logic, then it's practically guaranteed, that filtering will work correctly.\n0. Prefer using `custom=True` with `RQLFilterClass.build_q_for_custom_filter` overriding over overriding `RQLFilterClass.build_q_for_filter`.\n0. Custom filters may support ordering (`ordering=True`) with `build_name_for_custom_ordering`.\n\nDevelopment\n===========\n\n1. Python 3.5+\n0. Install dependencies `requirements/dev.txt` and `requirements/extra.txt`\n\nTesting\n=======\n\n1. Python 3.6+\n0. Install dependencies `requirements/test.txt`\n0. `export PYTHONPATH=/your/path/to/django-rql/`\n\nCheck code style: `flake8`\nRun tests: `pytest`\n\nTests reports are generated in `tests/reports`.\n* `out.xml` - JUnit test results\n* `coverage.xml` - Coverage xml results\n\nTo generate HTML coverage reports use:\n`--cov-report html:tests/reports/cov_html`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://connect.cloudblue.com",
    "keywords": "django rql filter rest api",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rql",
    "package_url": "https://pypi.org/project/django-rql/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rql/",
    "project_urls": {
      "Homepage": "https://connect.cloudblue.com"
    },
    "release_url": "https://pypi.org/project/django-rql/3.7.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Django RQL Filtering",
    "version": "3.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16182691,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e366e1985eba72d713c31dc0c35f53ec2aba4c4c5da203fec8c1ebaa279be39f",
        "md5": "fc1637d08f3bb26b2af47ad34fd5edc4",
        "sha256": "c43e472cd2aef5496210f7a911301e883b75fab53809fa75bad84bb6874acefb"
      },
      "downloads": -1,
      "filename": "django-rql-3.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fc1637d08f3bb26b2af47ad34fd5edc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 41613,
      "upload_time": "2020-09-07T09:36:06",
      "upload_time_iso_8601": "2020-09-07T09:36:06.514823Z",
      "url": "https://files.pythonhosted.org/packages/e3/66/e1985eba72d713c31dc0c35f53ec2aba4c4c5da203fec8c1ebaa279be39f/django-rql-3.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}