{
  "info": {
    "author": "CloudBlue",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Text Processing :: Filters"
    ],
    "description": "Django RQL\n==========\n[![pyversions](https://img.shields.io/pypi/pyversions/django-rql.svg)](https://pypi.org/project/django-rql/)\n[![PyPi Status](https://img.shields.io/pypi/v/django-rql.svg)](https://pypi.org/project/django-rql/)\n[![PyPI status](https://img.shields.io/pypi/status/django-rql.svg)](https://pypi.org/project/django-rql/)\n[![Docs](https://readthedocs.org/projects/django-rql/badge/?version=latest)](https://readthedocs.org/projects/django-rql) \n[![Build Status](https://github.com/cloudblue/django-rql/workflows/Build%20Django-RQL%20library/badge.svg)](https://github.com/cloudblue/django-rql/actions)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=django-rql&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=django-rql)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=django-rql&metric=coverage)](https://sonarcloud.io/summary/new_code?id=django-rql)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/django-rql)](https://pypi.org/project/django-rql/)\n\n`django-rql` is the Django app, that adds RQL filtering to your application.\nThis library is based on core [lib-rql](https://github.com/cloudblue/lib-rql) library.\n\n\nRQL\n---\n\nRQL (Resource query language) is designed for modern application development. It is built for the web, ready for NoSQL, and highly extensible with simple syntax.\nThis is a query language fast and convenient database interaction. RQL was designed for use in URLs to request object-style data structures.\n\n[RQL Reference](https://connect.cloudblue.com/community/api/rql/)\n\n\nCurrently supported operators\n=============================\n1. Comparison (eq, ne, gt, ge, lt, le, like, ilike, search)\n2. List (in, out)\n3. Logical (and, or, not)\n4. Constants (null(), empty())\n5. Ordering (ordering)\n6. Select (select)\n7. Tuple (t)\n\n\nDocumentation\n=============\n\nFull documentation is available at [https://django-rql.readthedocs.org](https://django-rql.readthedocs.org).\n\n\nExample\n=======\n\n```python\nfrom dj_rql.filter_cls import RQLFilterClass, RQL_NULL\n\nfrom py_rql.constants import FilterLookups\n\n\nclass ModelFilterClass(RQLFilterClass):\n    \"\"\"\n    MODEL - Django ORM model\n    FILTERS - List of filters\n    EXTENDED_SEARCH_ORM_ROUTES - List of additional Django ORM fields for search\n    DISTINCT - Boolean flag, that specifies if queryset must always be DISTINCT\n    SELECT - Boolean flag, that specifies if Filter Class supports select operations and queryset optimizations\n    OPENAPI_SPECIFICATION - Python class that renders OpenAPI specification\n\n    Filters can be set in two ways:\n        1) string (default settings are calculated from ORM)\n        2) dict (overriding settings for specific cases)\n\n    Filter Dict Structure\n    {\n        'filter': str\n        # or\n        'namespace': str\n\n        'source': str\n        # or\n        'sources': iterable\n        # or\n        'custom': bool\n        # or\n        'dynamic': bool\n        'field': obj\n\n        'lookups': set\n\n        'qs': obj\n\n        'use_repr': bool  # can't be used in namespaces\n        'ordering': bool  # can't be true if 'use_repr=True'\n        'search': bool    # can't be true if 'use_repr=True'\n        'hidden': bool\n    }\n\n    \"\"\"\n    MODEL = Model\n    FILTERS = ['id', {\n        # `null_values` can be set to override ORM is_null behaviour\n        # RQL_NULL is the default value if NULL lookup is supported by field\n        'filter': 'title',\n        'null_values': {RQL_NULL, 'NULL_ID'},\n        'ordering': False,\n    }, {\n        # `ordering` can be set to True, if filter must support ordering (sorting)\n        # `ordering` can't be applied to non-db fields\n        'filter': 'status',\n        'ordering': True,\n    }, {\n        # `search` must be set to True for filter to be used in searching\n        # `search` must be applied only to text db-fields, which have ilike lookup\n        'filter': 'author__email',\n        'search': True,\n    }, {\n        # `source` must be set when filter name doesn't match ORM path\n        'filter': 'name',\n        'source': 'author__name',\n    }, {\n        # `namespace` is useful for API consistency, when dealing with related models\n        'namespace': 'author',\n        'filters': ['id', 'name'],  # will be converted to `author.id` and `author.name`\n    },{\n        # `distinct` needs to be setup for filters that require QS to work in DISTINCT mode\n        # `openapi` configuration is automatically collected by OpenAPI autogenerator\n        'filter': 'published.at',\n        'source': 'published_at',\n        'distinct': True,\n        'openapi': {\n            'required': True,\n            'deprecated': True,\n            'description': 'Good description',\n            'hidden': False,  # can be set to avoid collecting by autogenerator\n            # type and format are collected automatically and shouldn't be setup, in general\n            'type': 'string',\n            'format': 'date',\n        },\n    }, {\n        # `use_repr` flag is used to filter by choice representations\n        'filter': 'rating.blog',\n        'source': 'blog_rating',\n        'use_repr': True,\n    }, {\n        # `hidden` flag is used to set default select behaviour for associated field\n        'filter': 'rating.blog_int',\n        'source': 'blog_rating',\n        'use_repr': False,\n        'ordering': True,\n        'hidden': True,\n    }, {\n        # We can change default lookups for a certain filter\n        'filter': 'amazon_rating',\n        'lookups': {FilterLookups.GE, FilterLookups.LT},\n    }, {\n        # Sometimes it's needed to filter by several sources at once (distinct is always True).\n        # F.e. this could be helpful for searching.\n        'filter': 'd_id',\n        'sources': {'id', 'author__id'},\n        'ordering': True,\n    }, {\n        # Some fields may have no DB representation or non-typical ORM filtering\n        # `custom` option must be set to True for such fields\n        'filter': 'custom_filter',\n        'custom': True,\n        'lookups': {FilterLookups.EQ, FilterLookups.IN, FilterLookups.I_LIKE},\n        'ordering': True,\n        'search': True,\n         # Optional ORM field for query parameter value validation\n        'field': IntegerField(), \n\n        'custom_data': [1],\n    }]\n\n\nfrom dj_rql.drf.backend import RQLFilterBackend\nfrom dj_rql.drf.paginations import RQLContentRangeLimitOffsetPagination\n\n\nclass DRFViewSet(mixins.ListModelMixin, GenericViewSet):\n    queryset = MODEL.objects.all()\n    serializer_class = ModelSerializer\n    rql_filter_class = ModelFilterClass\n    pagination_class = RQLContentRangeLimitOffsetPagination\n    filter_backends = (RQLFilterBackend,)\n```\n\nNotes\n=====\n0. Values with whitespaces or special characters, like ',' need to have \"\" or ''\n1. Supported date format is ISO8601: 2019-02-12\n2. Supported datetime format is ISO8601: 2019-02-12T10:02:00 / 2019-02-12T10:02Z / 2019-02-12T10:02:00+03:00\n3. Support for Choices() fields from [Django Model Utilities](https://django-model-utils.readthedocs.io/en/latest/utilities.html#choices) is added\n4. Library supports [caching with different strategies](https://cachetools.readthedocs.io/en/stable/#cache-implementations) for queryset building, which can be very useful for collections, which use `select()`.\n> Queryset execution result (filtered data) is NOT cached (!), only queryset building is cached.\n\n```python\nfrom dj_rql.filter_cls import RQLFilterClass\n\nfrom cachetools import LRUCache\n\nclass MyFilterClass(RQLFilterClass):\n    SELECT = True\n    QUERIES_CACHE_BACKEND = LRUCache\n    QUERIES_CACHE_SIZE = 100\n```\n\nHelpers\n================================\nThere is a Django command `generate_rql_class` to decrease development and integration efforts for filtering.\nThis command automatically generates a filter class for a given model with all relations and all optimizations (!) to the specified depth.\n\nExample\n-------\n```commandline\ndjango-admin generate_rql_class --settings=tests.dj_rf.settings tests.dj_rf.models.Publisher --depth=1 --exclude=authors,fk2\n```\nThis command for the model `Publisher` from tests package will produce the following output to stdout:\n```python\nfrom tests.dj_rf.models import Publisher\n\nfrom dj_rql.filter_cls import RQLFilterClass\nfrom dj_rql.qs import NSR\n\n\nclass PublisherFilters(RQLFilterClass):\n    MODEL = Publisher\n    SELECT = True\n    EXCLUDE_FILTERS = ['authors', 'fk2']\n    FILTERS = [\n    {\n        \"filter\": \"id\",\n        \"ordering\": True,\n        \"search\": False\n    },\n    {\n        \"filter\": \"name\",\n        \"ordering\": True,\n        \"search\": True\n    },\n    {\n        \"namespace\": \"fk1\",\n        \"filters\": [\n            {\n                \"filter\": \"id\",\n                \"ordering\": True,\n                \"search\": False\n            }\n        ],\n        \"qs\": NSR('fk1')\n    }\n]\n\n```\n\n\nDjango Rest Framework Extensions\n================================\n1. Pagination (limit, offset)\n0. Support for custom fields, inherited at any depth from basic model fields, like CharField().\n0. Backend `DjangoFiltersRQLFilterBackend` with automatic conversion of [Django-Filters](https://django-filter.readthedocs.io/en/master/) query to RQL query.\n0. OpenAPI docs are autogenerated for filter classes.\n\nBest Practices\n==============\n1. Use `dj_rql.utils.assert_filter_cls` to test your API view filters. If the mappings are correct and there is no custom filtering logic, then it's practically guaranteed, that filtering will work correctly.\n2. Prefer using `custom=True` with `RQLFilterClass.build_q_for_custom_filter` overriding over overriding `RQLFilterClass.build_q_for_filter`.\n3. Custom filters may support ordering (`ordering=True`) with `build_name_for_custom_ordering`.\n4. Django JSON fields can't be used as namespaces currently, but can be supported via `dynamic=True`, for example:\n```python\n{\n    'filter': 'json_data.key',\n    'source': 'json_data__key',\n    'dynamic': True,\n    'field': CharField(null=True),\n},\n```\n\nDevelopment\n===========\n\n1. Python 3.6+\n0. Install dependencies `requirements/dev.txt` and `requirements/extra.txt`\n\nTesting\n=======\n\n1. Python 3.6+\n0. Install dependencies `requirements/test.txt`\n0. `export PYTHONPATH=/your/path/to/django-rql/`\n\nCheck code style: `flake8`\nRun tests: `pytest`\n\nTests reports are generated in `tests/reports`.\n* `out.xml` - JUnit test results\n* `coverage.xml` - Coverage xml results\n\nTo generate HTML coverage reports use:\n`--cov-report html:tests/reports/cov_html`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://connect.cloudblue.com/community/api/rql/",
    "keywords": "django rql filter rest api",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rql",
    "package_url": "https://pypi.org/project/django-rql/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-rql/",
    "project_urls": {
      "Homepage": "https://connect.cloudblue.com/community/api/rql/"
    },
    "release_url": "https://pypi.org/project/django-rql/4.0.1/",
    "requires_dist": [
      "lib-rql (>=1.1.1)",
      "Django (>=2.2.19)",
      "djangorestframework (>=3.11.1) ; extra == 'drf'"
    ],
    "requires_python": ">=3.6",
    "summary": "Django RQL Filtering",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16182691,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed054c98585725b599fa315cd642d7322625e264e361932307ec89a8d8eab75a",
        "md5": "c20ade74cb816cdde70eb92ba356bb03",
        "sha256": "9b3344da98730672dceea16cc0529bb25ad38f699c6c1dbea076c7198db0f2b2"
      },
      "downloads": -1,
      "filename": "django_rql-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c20ade74cb816cdde70eb92ba356bb03",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 66532,
      "upload_time": "2022-03-29T09:57:03",
      "upload_time_iso_8601": "2022-03-29T09:57:03.806772Z",
      "url": "https://files.pythonhosted.org/packages/ed/05/4c98585725b599fa315cd642d7322625e264e361932307ec89a8d8eab75a/django_rql-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "683d1b6ed24a6c21c090d6b4f5cef03a42e55cbd579d2c1b83d5e58a36ceb7dd",
        "md5": "c372cac4b609ce130244bd0b6b971d53",
        "sha256": "fd8405f72bb27a3ba65b4221f83d91dfbfd54603a0713db65db993246d791db0"
      },
      "downloads": -1,
      "filename": "django-rql-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c372cac4b609ce130244bd0b6b971d53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 48052,
      "upload_time": "2022-03-29T09:57:05",
      "upload_time_iso_8601": "2022-03-29T09:57:05.595978Z",
      "url": "https://files.pythonhosted.org/packages/68/3d/1b6ed24a6c21c090d6b4f5cef03a42e55cbd579d2c1b83d5e58a36ceb7dd/django-rql-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}