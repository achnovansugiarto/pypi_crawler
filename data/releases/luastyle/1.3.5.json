{
  "info": {
    "author": "Eliott Dumeix",
    "author_email": "eliott.dumeix@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "py-lua-style\n===============================================================================\n\n.. image:: https://travis-ci.org/boolangery/py-lua-style.svg?branch=master\n    :target: https://travis-ci.org/boolangery/py-lua-style\n.. image:: https://img.shields.io/pypi/v/luastyle.svg\n    :target: https://pypi.python.org/pypi/luastyle/\n.. image:: https://img.shields.io/pypi/pyversions/luastyle.svg\n    :target: https://pypi.python.org/pypi/luastyle/\n\nA Lua code formatter written in Python.\n\n\nInstallation:\n------------------------------------------------------------------------------\n\nThe package can be installed through `pip`:\n\n.. code-block::\n\n    $ python3.6 -m pip install luastyle\n\nIt will install the shell command 'luastyle'.\n\n\nOptions\n------------------------------------------------------------------------------\n\nThese are the command-line flags:\n\nUsage: luastyle [options] file_or_dir1 file_or_dir2 ...\n\n.. code-block::\n\n  CLI Options:\n    --version                       Show program's version number and exit\n    -h, --help                      Show this help message and exit\n    -i, --in-place                  Write output in-place, replacing input\n    --config=F                      Path to config file\n    --config-generate               Generate a default config file\n    --type=EXT                      File extension to indent (can be repeated) [lua]\n    -d, --debug                     Enable debugging messages\n    -j N, --jobs=N                  Number of parallel jobs in recursive mode\n    -C, --check-bytecode            Check lua bytecode with luac, $LUAC can also be set to\n                                    use a specific compiler\n\n\n  Beautifier Options:\n    -a, --space-around-assign       Ensure one space before and after assign op \"=\"\n    -c S, --indent-char=S           Indentation character [\" \"]\n    -f, --check-field-list          Format field-list (table)\n    -l N, --indent-level=N          Initial indentation level [0]\n    -p, --check-param-list          Format var-list, name-list and expr-list\n    -s N, --indent-size=N           Indentation size [2]\n    -t, --indent-with-tabs          Indent with tabs, overrides -s and -c\n    --close-on-lowest-level         If several closing tokens, indent on lowest token level\n    -F N, --func-cont-level=N       Continuation lines level in function arguments [2]\n    -I N, --if-cont-level=N         If statement continuation line level [2]\n    -M, --check-line-comment-text   Ensure that line comments text is started by at least N char\n    -N N, --com-txt-space-size=N    If --check-line-comment-text is enabled, configure the number of spaces [1]\n    -S, --skip-sem-colon            Skip all semi-colon after statements\n    --break-if                      Break mono-line if statement\n    --break-while                   In while and repeat statement, ensure newline after\n                                    \"do\" or \"repeat\" and before \"end\" or \"until\" keyword\n    --break-all                     Enable --break-if --break-for and --break-while and\n                                    before \"end\" or \"until\" keyword\n    --force-call-spaces             Force spaces before opening parenthesis in function\n                                    call [0]\n    --call-spaces-size=N            If --force-call-spaces is enabled, configure the\n                                    number of spaces\n    --strict                        Enable all features\n\n\nLoading settings from environment or .luastylerc\n------------------------------------------------------------------------------\n\nIn addition to CLI arguments, you may pass a config file via:\n\n- the LUASTYLE_CONF environment variables pointing to a config file\n- a .luastylerc file located in your user directory\n\n\nOptions examples\n------------------------------------------------------------------------------\n\n\nContinuation lines level in function arguments (-F)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block::\n\n    -F N, --func-cont-level=N   Continuation lines level in function arguments [2]\n\nGiven:\n\n.. code-block:: lua\n\n    local function process(param_1, param_2, param_3,\n      param_4, param_5, param_6)\n      return do_something()\n    end\n\n.. code-block:: console\n\n    $ luastyle -c \".\" -F 2 source.lua\n\n.. code-block:: lua\n\n    local function process(param_1, param_2, param_3,\n    ....param_4, param_5, param_6)\n    ..return do_something()\n    end\n\n\nComments formatting options (-M, -N)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAvailable options are:\n\n.. code-block::\n\n    -M, --check-line-comment-text Ensure that line comments text is started by at least N char\n    -N N, --com-txt-space-size=N  If --check-line-comment-text is enabled, configure the number of spaces [1]\n\nGiven:\n\n.. code-block:: lua\n\n    --Lorem ipsum dolor sit amet\n    local foo --In sodales elit id orci mollis varius\n\n\n.. code-block:: console\n\n    $ luastyle -M -N 1 source.lua\n\n\n.. code-block:: lua\n\n    -- Lorem ipsum dolor sit amet\n    local foo -- In sodales elit id orci mollis varius\n\n\nBreak If statement option (--break-if)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGiven:\n\n.. code-block:: lua\n\n    if condition then return success() else return failure() end\n\n\n.. code-block:: console\n\n    $ luastyle --break-if source.lua\n\n\n.. code-block:: lua\n\n    if condition then\n      return success()\n    else\n      return failure()\n    end\n\n\nFormat table field-list (-f)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis option ensure that:\n  * field separator in table (',' or ';') are trailing\n  * comma is preceded by one space and followed by two spaces\n\nThe keyword '@luastyle.disable' placed in a comment just after the opening brace\nwill disable this feature in the concerned table.\n\nGiven:\n\n.. code-block:: lua\n\n    local days = {\n      monday = 1,\n      tuesday = 2\n    , wednesday = 3\n    }\n\n    local n = {1  , 2,3}\n\n    local t = {\n      -- @luastyle.disable\n      1,    2,    4,\n      8,    16,   32\n    }\n\n\n.. code-block:: console\n\n    $ luastyle -f source.lua\n\n\n.. code-block:: lua\n\n    local days = {\n      monday = 1,\n      tuesday = 2,\n      wednesday = 3\n    }\n\n    local n = {1, 2, 3}\n\n    local t = {\n      -- @luastyle.disable\n      1,    2,    4,\n      8,    16,   32\n    }\n\n\n\nIndent closing token (--close-on-lowest-level )\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGiven:\n\n.. code-block:: lua\n\n    describe('must indent', function()\n      done()\n    end)\n\n\n.. code-block:: console\n\n    $ luastyle --close-on-lowest-level source.lua\n\n\n.. code-block:: lua\n\n    describe('must indent', function()\n        done()\n      end)\n\n\n.. code-block:: console\n\n    $ luastyle source.lua\n\n\n.. code-block:: lua\n\n    describe('must indent', function()\n        done()\n    end)\n\nFunction call formatting options (--force-call-spaces, --call-spaces-size)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGiven:\n\n.. code-block:: lua\n\n    build (foo)\n\n\n.. code-block:: console\n\n    $ luastyle --force-call-spaces source.lua\n\n\n.. code-block:: lua\n\n    build(foo)\n\n.. code-block:: console\n\n    $ luastyle --force-call-spaces --call-spaces-size=1 source.lua\n\n\n.. code-block:: lua\n\n    build (foo)\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/boolangery/py-lua-style/archive/1.3.5.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boolangery/py-lua-style",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "luastyle",
    "package_url": "https://pypi.org/project/luastyle/",
    "platform": "",
    "project_url": "https://pypi.org/project/luastyle/",
    "project_urls": {
      "Download": "https://github.com/boolangery/py-lua-style/archive/1.3.5.tar.gz",
      "Homepage": "https://github.com/boolangery/py-lua-style"
    },
    "release_url": "https://pypi.org/project/luastyle/1.3.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A lua code formatter in Python !",
    "version": "1.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4043493,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0545351af7f604126ffe01bf85b7a705428debaa12022368db7ac66cb5ca5016",
        "md5": "0fda01005040087c0c1ab55aa10f30d5",
        "sha256": "2c96c15facfa4f2546c53b40a5c31680809e2a3e62c88783d9a5d3bd1fa8370b"
      },
      "downloads": -1,
      "filename": "luastyle-1.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "0fda01005040087c0c1ab55aa10f30d5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 119067,
      "upload_time": "2018-07-09T12:34:44",
      "upload_time_iso_8601": "2018-07-09T12:34:44.281474Z",
      "url": "https://files.pythonhosted.org/packages/05/45/351af7f604126ffe01bf85b7a705428debaa12022368db7ac66cb5ca5016/luastyle-1.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}