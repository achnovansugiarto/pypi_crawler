{
  "info": {
    "author": "Antonio Di Mariano",
    "author_email": "antonio.dimariano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Triskelion\n\n## A Kafka Messaging helper for Microservices \n\n![](ermes.png)\n\n\n\n# Service description\n\n\nTriskelion provides your code with a helper for Kafka and Confluent Kafka producers. \nThe end goal of this project is to become a messages communication layer for microservices.\nHowever, The code is at its earlier stage and there is room for improvements. If you want to contribute to it please contact me at antonio.dimariano[AT]gmail.com\nIf you find a bug please submit it [here](https://github.com/antoniodimariano/kafka_messaging_layer/issues)\n\nI would like to thank all the [Confluent Community on Slack](https://confluentcommunity.slack.com/archives/C49G1J750) for the priceless help during my learning path.\n\n\n<a name=\"confluent_kafka_producer_configuration\"><h1>Confluent Kafka Producer Configuration</h1></a>\n\n\n\n\n# Brokers \n\n ENV variables name  | VALUE                                                                                    |\n|---------------------|------------------------------------------------------------------------------------------|\n| brokers             | mybroker1:9093,mybroker2:9093,mybroker3:9093                                                |\n| schema_registry     | http://my_avro_schema_registry:8081                                                    |\n\n\n# SASL Identification \n\nPlease refer to https://docs.confluent.io/3.0.0/kafka/sasl.html. \nIf your broker requires SASL authentication, these are the ENVironment variables to include\n\n\n| ENV variables name  | VALUE                                                                                    |\n|---------------------|------------------------------------------------------------------------------------------|\n| sasl_mechanisms     | PLAIN                                                                                   |\n| security_protocol   | SASL_SSL                                                                                   |\n| sasl_username   | YOUR USERNAME HERE                                                                                   |\n| sasl_password   | YOUR PASSWORD HERE                                                                                   |\n\n\nIf you schema registry requires authentication, these are the ENVironment variables to include\n\n| ENV variables name  | VALUE                                                                                    |\n|---------------------|------------------------------------------------------------------------------------------|\n| schema\\_registry\\_basic\\_auth\\_user_info     | authentication string                                                |\n| schema\\_registry\\_basic\\_auth\\_credentials_source   | USER_INFO                                                    |\n\n\n# SSL certificate for brokers and schema registry\n\nIf your brokers and schema registry servers require a SSL certificate, these are the \n\n| ENV variables name  | VALUE                                                                                    |\n|---------------------|------------------------------------------------------------------------------------------|\n| security_protocol     | ssl string                                                |\n\nYou have to place your certificate in \n\n# How to use it \n\n\n## Confluent Kafka Producer  \n\nThe `produce_message` method accepts a list of messages. Messages are dispatched asynchronously to the Kafka Broker\nThe module provides you with two different Producers' class. Both of them have a public method `producer_message`.\nHowever, If your are working with AVRO topics, you have to do `from messaging_middleware.confluent_producer.AVROProducer import AVROPRODUCER`. \nOtherwise you can `from messaging_middleware.confluent_producer.ConfluentProducer import ConfluentProducer`\nThe following is an example how to produce a message in both cases.\n\n\n```python\nfrom messaging_middleware.confluent_producer.ConfluentProducer import ConfluentProducer\nfrom messaging_middleware.confluent_producer.AVROProducer import AVROPRODUCER\n\nimport os\ndefault_key_value = {\"service_name\":\"test\"}\n\nclass OutboundCommunicationLayer:\n\n    def __init__(self,topic,brokers_uri,security_protocol='plaintext',schema_registry=None):\n        print(\"OS:\",os.environ.get('brokers'),os.environ.get('schema_registry'))\n\n        if schema_registry is None:\n            self.producer = ConfluentProducer(\n                brokers_uri=brokers_uri,\n                topic=topic, security_protocol=security_protocol)\n        else:\n            self.avro_producer = AVROPRODUCER(\n                brokers_uri=brokers_uri,\n                schema_registry_url=schema_registry,\n                topic=topic, security_protocol=security_protocol)\n\n    def produce_topic(self,value):\n        self.producer.produce_message(message=value)\n\n    def produce_avro_topic(self, value,key=default_key_value):\n\n        self.avro_producer.produce_message(value=value, key=key)\n\n\n\n\nif __name__ == \"__main__\":\n\n    o = OutboundCommunicationLayer(topic='my-test-2',brokers_uri=os.environ.get('brokers'),schema_registry=os.environ.get('schema_registry'))\n    o.produce_avro_topic(value={\"my_text\":\"ciaociaociaociao\"},key=default_key_value)\n\n```\n\n\n# Using Synchronous Producer\n\nEven though it is not always the best practise and it has its issues (https://github.com/edenhill/librdkafka/wiki/FAQ#why-is-there-no-sync-produce-interface) , there is no harm to have a synchronous producer. \nThe module provides you with two classes to \n\n\n\n\n## Integrated Logging System \n\nThe  Logger class aims to be used to print log messages and/or to produce logging message to an AVRO topic.\nIt uses the AVRO_PRODUCER and by default it produces messages to the AVRO topic `tcservicesmonitor` with the following schema \nIf you want to configure the Confluent Kafka producer, you have to pass a `init_kafka=1` when creating your instance.\n\n```json\nlogger = Logger(init_kafka=1, brokers_uri=os.environ.get('brokers'),\n                    schema_registry_url=os.environ.get('schema_registry_url'))\n```\n* tcservicesmonitor-value\n```json\n {\n        \"service_name\": \"string\",\n        \"last_operation\": \"string\",\n        \"timestamp\": \"string\",\n        \"operation_result\": \"string\",\n        \"operation_description\": \"string\",\n        \"error_description\": \"string\"\n    }\n```\n\n* tcservicesmonitor-key \n```json\n\"service_name\": \"string\"}\n```\n\nIf you want to use another topic you have to specify it in the ENV variable `monitoring_topic`\n\nIn order to use the Logging system, please refer to the configuration used to set up a [Confluent Kafka Producer](#confluent_kafka_producer_configuration)   \n\n\n```python\nimport os\nfrom messaging_middleware.Logger.Logger import Logger\nfrom datetime import datetime, timezone\n\n    logger = Logger(init_kafka=1, brokers_uri=os.environ.get('brokers'),\n                    schema_registry_url=os.environ.get('schema_registry_url'))\n    logger.print_log('info', 'My log ', 10)\n    logger.print_log('debug', 'my second log')\n    message_to_produce = {\n        \"service_name\": \"my-test-microservice\",\n        \"last_operation\": \"last-completed-operation\",\n        \"timestamp\": datetime.now(timezone.utc).replace(microsecond=0).isoformat(),\n        \"operation_result\": \"SUCCESS\",\n        \"operation_description\": \"The operation description\",\n        \"error_description\": \"\"\n    }\n\n\n    logger.produce_msg(message_to_produce=message_to_produce, schema_key={\n        \"service_name\": \"my-test-service\"})\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antoniodimariano/kafka_messaging_layer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microservices-messaging-layer",
    "package_url": "https://pypi.org/project/microservices-messaging-layer/",
    "platform": "",
    "project_url": "https://pypi.org/project/microservices-messaging-layer/",
    "project_urls": {
      "Homepage": "https://github.com/antoniodimariano/kafka_messaging_layer"
    },
    "release_url": "https://pypi.org/project/microservices-messaging-layer/1.0.22/",
    "requires_dist": [
      "avro-python3",
      "kafka",
      "requests",
      "confluent-kafka"
    ],
    "requires_python": "~=3.6",
    "summary": "Messaging Communication Layer for Microservices Architecture",
    "version": "1.0.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6778513,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d43513dae22ef5875237f8e62c92fd5006bed82f410e6803c75c171fabea108",
        "md5": "1b4659b920edfb6611bf7125c59fade2",
        "sha256": "e35f49ea49e6635b6d531fcee0ed165632c51f0b2a66fd9d073dd0a57e505538"
      },
      "downloads": -1,
      "filename": "microservices_messaging_layer-1.0.22-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b4659b920edfb6611bf7125c59fade2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 23260,
      "upload_time": "2020-03-09T16:58:11",
      "upload_time_iso_8601": "2020-03-09T16:58:11.838779Z",
      "url": "https://files.pythonhosted.org/packages/8d/43/513dae22ef5875237f8e62c92fd5006bed82f410e6803c75c171fabea108/microservices_messaging_layer-1.0.22-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f919bcd1ca624acb1004c2045c5d097f54ba1c3f08acac6640ac838e9c774517",
        "md5": "ea5775e7d78294efcb0857edb5b85694",
        "sha256": "d7126f70273f65ab75d59eb28566a2686273f446ea793937bce26563fbfc7e43"
      },
      "downloads": -1,
      "filename": "microservices-messaging-layer-1.0.22.tar.gz",
      "has_sig": false,
      "md5_digest": "ea5775e7d78294efcb0857edb5b85694",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 12031,
      "upload_time": "2020-03-09T16:58:13",
      "upload_time_iso_8601": "2020-03-09T16:58:13.346784Z",
      "url": "https://files.pythonhosted.org/packages/f9/19/bcd1ca624acb1004c2045c5d097f54ba1c3f08acac6640ac838e9c774517/microservices-messaging-layer-1.0.22.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}