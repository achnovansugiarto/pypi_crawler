{
  "info": {
    "author": "Antonio Di Mariano",
    "author_email": "antonio.dimariano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Messaging Layer for Microservices \n\n\n\n![](http://www.italiamappe.it/mappa/ImmaginiVetrine/0000106274/Immagine1lrg.jpg)\n\n\n```json\n     _ _          _       _                     \n    | (_)        | |     (_)                    \n  __| |_ ___  ___| | __ _ _ _ __ ___   ___ _ __ \n / _` | / __|/ __| |/ _` | | '_ ` _ \\ / _ \\ '__|\n| (_| | \\__ \\ (__| | (_| | | | | | | |  __/ |   \n \\__,_|_|___/\\___|_|\\__,_|_|_| |_| |_|\\___|_|   \n\n\n```\n\nThis service is in his early age. **DO NOT USE in production** or if you want to, please be aware you are going to use a piece of code which probably will be\nchanged or improved ( and not necessarily in this order) soon and very often. You have been warned!\nThis service requires at least another service listening to a few KAFKA topics.\n\n# Service description\n\n\nThis service provides microservices with an universal communication layer based on KAFKA messages.\nIt provides two kind of Producer. One based on KAFKA and the other one based on the Confluent KAFKA version. \n\n\n\n# Required ENV variables \n\n* brokers=mybroker1:9093,mybroker2:9093,mybroker3:9093\n* monitoring_topic=tcservicesmonitor\n\nIf you are using AVRO you must have \n* schema_registry=https://my_avro_schema_registry:8081\n\n\n# How to use it \n\n### PLAIN TEXT connection\n\n```python\nfrom messaging_middleware.avro_communication_layer.Producer import Producer\nproducer = Producer(bootstrap_servers=\"your broker list here\",\n                                 schema_reqistry_url=\"your schema registry here\",topic='mytopic')\n\n\nproducer.produce_message(\n            value={your json message here},\n            key={your key schema here}, callback=my_callback_function)\n\n\n\n```\n### SSL configuration \n\n\nin order to connect to brokers using the SSL protocol, we need to pass the following kwargs to consumers/producers configuration \n\n\n```python\nfrom messaging_middleware.avro_communication_layer.Consumer import Consumer as AvroConsumer\nfrom messaging_middleware.avro_communication_layer.Producer import Producer as AvroProducer\n\nif __name__ == \"__main__\":\n    c = AvroConsumer(\n        bootstrap_servers=\"sslbroker:29080\",\n        security_protocoll='ssl', consumer_topic='my-topic')\n\n    p = AvroProducer(\n        bootstrap_servers=\"sslbroker:29080\",\n        security_protocoll='ssl', topic='my-topic')\n```\n\n\n## Integrated Logging System \n\nBy default, the Logger is connected to the following ENV variables \n\n* brokers=mybroker:202021,mybroker2:202019\n* schema_registry=\"https://sksk:8081\"\n* monitoring_topic=tcservicesmonitor\n\n```python\nfrom messaging_middleware.utils.logger import Logger\n\nlogger = Logger(ssl=1) \nlogger = Logger()  # no ssl\n\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "microservices-messaging-layer",
    "package_url": "https://pypi.org/project/microservices-messaging-layer/",
    "platform": "",
    "project_url": "https://pypi.org/project/microservices-messaging-layer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/microservices-messaging-layer/1.0.17/",
    "requires_dist": [
      "avro-python3",
      "kafka",
      "requests",
      "confluent-kafka"
    ],
    "requires_python": "~=3.6",
    "summary": "Messaging Communication Layer for Microservices Architecture",
    "version": "1.0.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6778513,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5334ccfe388d3ce305b8f25454649bc30dbd0e62029f619257b621663dc66dc6",
        "md5": "0a95c03cb4364feebe496c4ad8b9207c",
        "sha256": "6a9ef7606a960a886193938e87841127da6f851a9c0d96a512d9b31fd795fda3"
      },
      "downloads": -1,
      "filename": "microservices_messaging_layer-1.0.17-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a95c03cb4364feebe496c4ad8b9207c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 11436,
      "upload_time": "2019-02-13T13:39:06",
      "upload_time_iso_8601": "2019-02-13T13:39:06.378532Z",
      "url": "https://files.pythonhosted.org/packages/53/34/ccfe388d3ce305b8f25454649bc30dbd0e62029f619257b621663dc66dc6/microservices_messaging_layer-1.0.17-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b645fded284d82779643986bbc76eb16a1a19d370a2e7c14dc154f94e1f9b57",
        "md5": "e63f803ceab7e3a15bcf91f748e134c1",
        "sha256": "1dfe57f5008804b05f4981905e46258d83258908b8bc95530e6bed85f95e3d2a"
      },
      "downloads": -1,
      "filename": "microservices_messaging_layer-1.0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "e63f803ceab7e3a15bcf91f748e134c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 6429,
      "upload_time": "2019-02-13T13:39:07",
      "upload_time_iso_8601": "2019-02-13T13:39:07.389397Z",
      "url": "https://files.pythonhosted.org/packages/2b/64/5fded284d82779643986bbc76eb16a1a19d370a2e7c14dc154f94e1f9b57/microservices_messaging_layer-1.0.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}