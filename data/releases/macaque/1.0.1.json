{
  "info": {
    "author": "lijiawei",
    "author_email": "jiawei.li2@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console :: Curses",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "## Macaque   \n基于fastbot改造的 稳定性测试工具\n\n## 本地接入\n### 前置准备\n* 静音设置\n    ```shell\n    adb shell media volume --set 0\n    ```\n### 环境预备\n* 支持 Android 5，6，7，8，9，10，11，12 真机及模拟器\n* 将 `framework.jar macaque-thirdpart.jar monkeyq.jar` push 到手机上某个目录中，建议/sdcard，push `libs/* ` 到 `/data/local/tmp/`\n    ```shell\n    adb push *.jar /sdcard\n    adb push libs/* /data/local/tmp/\n    ```\n\n\n### shell运行\n* 添加限定词，可提升模型， `aapt2` 可根据本机环境替换为 `aapt`，如果提示不可用，需要添加到 `PATH` 环境变量中， 示例具体路径为 ``` ${ANDROID_HOME}/build-tools/28.0.2/aapt2```\n\n    ```shell\n    aapt dump  --values strings ymt_V6.24.40.2620.beta_852.36947.189208.b64.apk > max.valid.strings\n    adb push max.valid.strings /sdcard \n    ```\n* 启动 macaque\n    ```shell\n    adb -s 630fee38 shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/macaque-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p com.ymt360.app.mass --agent reuseq --running-minutes 2 --throttle 500 -v -v --bugreport\n    ```\n\n### 参数说明\n1. `-s 设备号 ` 多个设备需要指定设备号，单独设备无需此-s参数\n2. `-p 包名 ` 遍历app的包名，-p+包名\n3. `--agent reuseq ` 遍历模式，无需更改\n4. `--running-minutes 遍历时长(分钟)` # 遍历时间：--running-minutes 时间\n5. `--throttle 事件频率`  遍历事件频率，建议为500-800\n7. 可选参数\n    * `--bugreport ` 崩溃时保存bug report log\n    * `--output-directory /sdcard/xxx` log/crash 另存目录\n\n###  结果说明\n1. Crash、ANR 捕获\n    * 捕获到Java Crash、ANR、Nativie Crash会以追加方式写入`/sdcard/crash-dump.log`文件\n    * 捕获的Anr 同时也会写入 `/sdcard/oom-traces.log` 文件\n2. Activity覆盖率统计\n    * 正常跑完macaque会在当前shell中打印totalActivity（总activity列表），ExploredActivity（遍历到的activity列表）以及本次遍历的总覆盖率\n    * 总覆盖率计算公式： `coverage = testedActivity / totalActivities * 100`\n\n### 注意事项\n  totalActivities：通过framework接口 PackageManager.getPackageInfo 获取，这包含app中所有的Activity，其中也包含了很多废弃、不可见、不可达等Activity\n\n\n## 专家系统\n\n### 自定义输入法（自动输入+屏蔽输入栏）\nADBKeyBoard在输入栏自动输入内容，屏蔽UI输入法\n\n**适用需求：** 遇到搜索栏乱输入，想要输入指定字符\n\n**环境准备：**  下载 ADBKeyBoard，并在手机端中设置为默认输入法 ADBKeyBoard下载地址， \n生效后，当遇到输入栏ADBKeyBoard不会弹起ui输入栏，会显示 `ADB Keyboard{ON} tarbar`\n\n1. 随机输入字符串：\n    * 配置 `max.config` 中 `max.randomPickFromStringList = false `  \n        * 在pc端新建 `max.config` 文件（文件名称不可更改）\n        * 输入 `max.randomPickFromStringList = false`\n        * 通过以下命令将 `max.config` 文件push到手机端\n            ```\n            adb push max.config /sdcard\n            ```\n2. 从文件中随机读取字符串输入\n    * 配置 `max.config` 中 `max.randomPickFromStringList = true `  \n        * 在pc端新建 `max.strings` 文件（文件名称不可更改）\n        * 输入想要输入的字符串，字符串结束要换行\n        * 通过以下命令将文件push到手机端\n            ``` \n            adb push max.strings /sdcard\n            ```\n        ![](doc/strings.png )\n3. 对文本控件输入fuzzing 【new】\n   * 将项目中 test 目录中 `max.fuzzing.strings`文件（max.fuzzing.strings文件存在即生效），参考：https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/big-list-of-naughty-strings.txt\n   * 文件中输入想要输入的字符串，字符串结束换行\n   * 通过以下命令将文件push到手机端\n        ``` \n        adb push test/max.fuzzing.strings /sdcard\n        ```\n   * fuzz概率如下：\n        ``` \n        1. 50% 概率输入fuzzing.strings中某个string\n        2. 35% 概率输入被测试 App 历史页面中text/desc文本内容（不存在max.fuzzing.strings文件时概率提高到85%）\n        3. 15% 概率不输入\n        ```\n\n### 自定义事件序列\n手动配置Activity的路径（UI自动化用例）\n\n**适用需求：** 场景覆盖不全，通过人工配置到达 Fastbot 遍历不到的场景， 或自定义操作序列（例如前置登录等）\n1. 在pc端新建 `max.xpath.actions` 文件（文件名称不可更改）\n2. 编写事件序列配置（case）：\n  \n    * `prob`：发生概率，\"prob\"：1,代表发生概率为100%\n    * `activity`：所属场景，详见：三.获取当前页面所属的Activity\n    * `times`：重复次数，默认为1即可\n    * `actions`：具体步骤的执行类型\n    * `throttle`：action间隔事件（ms）\n    > action 支持以下类型：必须大写\n    * `CLICK`：点击，想要输入内容在action下补充text，如果有text 则执行文本输入\n    * `LONG_CLICK`：长按\n    * `BACK`：返回\n    * `SCROLL_TOP_DOWN`：从上向下滚动\n    * `SCROLL_BOTTOM_UP`：从下向上滑动\n    * `SCROLL_LEFT_RIGHT`：从左向右滑动\n    * `SCROLL_RIGHT_LEFT`：从右向左滑动\n\n![](doc/actions.png )\n\n*  **注意**: 存在切换页面情况：\n        * activity会跳转，actions也应该拆分（同一个activity不需要做拆分）\n    格式为图下：从prob开始写下一个activity\n  \n![](doc/actions2.png )\n\n3. 编写好文件后，可在 [json.cn](http://json.cn)中检查无误后，推送到手机端中\n    ```\n    adb push max.xpath.actions /sdcard   \n    ```\n4. 有用的经验：\n   * 包名的获取方式（需要配置好ADB命令）：\n     * `aapt dump badging [apk路径] ` #mac系统直接拖动apk文件到命令行\n![](doc/getpackagename.png )\n   * 使用 [Maxim](https://github.com/zhangzhao4444/Maxim) 获取当前控件所属的Activity\n        ```\n        adb shell CLASSPATH=/sdcard/monkey.jar:/sdcard/framework.jar exec app_process /system/bin tv.panda.test.monkey.api.CurrentActivity\n        ```\n    头条登录页面的所属activity\n  \n![](doc/getactivity.png )\n   * 定位当前页面的控件\n      * 使用Android SDK自带的页面属性检查工具UiAutomatorViewer（需提前配置好Android SDK）\n        ```\n            ${ANDROID_HOME}/tools//bin/uiautomatorviewer\n        ```\n\n![](doc/automatorview.png )\n   * 使用[Maxim](https://github.com/zhangzhao4444/Maxim) 在终端查看当前Tree结构\n        ```\n        adb shell CLASSPATH=/sdcard/monkey.jar:/sdcard/framework.jar exec app_process /system/bin tv.panda.test.monkey.api.Dumptree\n        ```\n  \n![](doc/maximview.png )\n   * 尽量使用`resource-id`作为xpath路径，也可以组合使用比如`\"xpath\": \"//*[@resource-id='xxx'and @text='xx']\"`\n\n### 场景细粒度控制\n手动配置黑、白名单配置\n\n**适用需求** 单独覆盖几个场景或屏蔽一些不必要场景\n\n1. Activity白名单配置（只覆盖白名单内的activity）\n    * 在PC端新建 `awl.strings`文件（名称固定为：awl.strings）\n    * 在文件中写入Activity的名称，例如\n    ![](doc/activitys.png )\n    * 将 `awl.strings` 文件push到手机端的sdcard目录下, 目录必须为sdcard\n        ```\n        adb push awl.strings  /sdcard \n        ```\n    * 运行命令时添加以下参数：`--act-whitelist-file  /sdcard/awl.strings`\n    \n```\nadb -s 630fee38 shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p com.ymt360.app.mass --agent reuseq --running-minutes 2 --throttle 500 -v -v --act-whitelist-file /sdcard/awl.strings --bugreport\n```\n\n2. Activity黑名单配置（黑名单内的activity不覆盖）\n    * 在PC端新建 `abl.strings` 文件（名称固定为：abl.strings）\n    * 在文件中输入Activity的名称，同白名单方法一致\n    * 将 `abl.strings` 文件push到手机端的sdcard目录下， 目录必须为sdcard\n        ```\n        adb push abl.strings  /sdcard \n        ```\n    * 运行命令时添加以下参数：`--act-blacklist-file  /sdcard/abl.strings` \n        ```\n        adb -s 设备号 shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p 包名 --agent reuseq  --act-blacklist-file /sdcard/abl.strings --running-minutes 遍历时长 --throttle 事件频率 -v -v\n        ```\n\n**注意：** *白名单和黑名单不能同时设置，按照非白即黑的原则，即设置了白名单则白名单外的都为黑名单。通过hook 可以监控activity 启动和切换，如果启动的是黑名单中的activity，就拒绝启动该activity，从ui上看就是点了跳转没效果*\n\n\n### 屏蔽控件或区域\n手动配置需要屏蔽的控件或区域\n\n**适用需求：** 测试过程中“半路”中途退出登录，屏蔽退出登录按钮\n1. 黑控件、黑区域\n    * 在PC端新建 `max.widget.black` 文件（名称固定为：max.widget.black），文件内容配置格式如下：\n    * 匹配条件activity：当activity与currentactivity一致时执行如下匹配\n    * 屏蔽控件或区域共有三种方式：\n        * 配置bounds：屏蔽某个区域，在该区域内的控件或坐标不会被点击，bounds 为 0.0～1.0 之间的一个百分比值。\n        * 配置xpath：查找匹配的控件，屏蔽点击该控件。\n        * 配置xpath+bounds：查找匹配的控件，当控件存在时屏蔽指定的区域，bounds 为 0.0～1.0 之间的一个百分比值。。\n    \n    * 将max.widget.black文件push到手机端的sdcard目录下，目录必须为sdcard\n        ```shell\n        adb push max.widget.black /sdcard \n        ```\n![](doc/black.png )\n\n2. 树剪枝屏蔽\n    * 在PC端新建 `max.tree.pruning `文件（名称固定为：max.tree.pruning），文件内容配置格式如下：\n    * 匹配条件activity：当activity与currentactivity一致时执行如下匹配\n    * 剪枝方式：\n        * 配置xpath：查找匹配的控件，改变控件属性，从而使控件屏蔽\n    * 将 `max.tree.pruning` 文件push到手机端的sdcard目录下， /sdcard # 目录必须为sdcard\n        ```\n        adb push max.tree.pruning /sdcard \n        ```\n\n### 支持反混淆\n手动配置反混淆文件，针对每个包的混淆xpath做处理，这样可以使得配置在 App 版本迭代的过程中也可以通用\n\n**适用需求：** 对黑、白名单、屏蔽控件和自定义事件中的xpath做反混淆转换\n* 配置混淆映射文件并push到手机端sdcard中, 名称固定为 `max.mapping`\n    ```\n    adb push resguard_mapping_NewsArticle_beta_version_v7.2.x_?????.txt /sdcard/max.mapping\n    ```\n* 配置反混淆文件，以自定义事件为例，在 `max.xpath.actions` 中配置混淆前的 resource-id\n\n\n### 高速截图及打印xml结构\n保存测试过程中的截图和打印xml结构\n\n**适用需求：** 观察测试过程中的截图\n\n1. 高速截图\n    * 在PC 端新建 `max.config`文件，增加以下属性\n    * `max.takeScreenshot = true`\n    * `max.takeScreenshotForEveryStep = true`\n    * `max.saveGUITreeToXmlEveryStep =true`\n    * 将 `max.config` 文件push到手机端sdcard中 ， 目录必须为sdcard\n        ```\n        adb push max.config /sdcard \n        ```\n    * 目录默认保存为手机端sdcard中，如需改变保存位置，在执行命令末尾添加 `--output-directory` 指定路径， --throttle 参数要 >200 才会截图\n        ```shell\n        adb -s 设备号 shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p 包名 --agent reuseq --running-minutes 遍历时长 --throttle 事件频率 -v -v --output-directory 指定路径\n        ```\n        \n###  Schema Event支持\napp需支持允许第三方通过intent方式执行Schema跳转\n1. Schema Event （schema跳转）\n    * 在PC端新建 `max.schema` 文件\n\n    * 将max.schema文件push到手机端的sdcard目录下， 目录必须为sdcard\n        ```\n        adb push max.schema  /sdcard\n        ``` \n    * 配置max.config 增加 \n       ``` shell\n       max.execSchema = true\n       max.execSchemaEveryStartup  = true  #每次启动app先执行schema\n       ```\n    * schema事件默认会在App启动后执行\n\n![](doc/scheme.png )\n\n### 权限自动授予\napp 的权限弹窗处理， \n默认启动app前会自动授予app所需的所有权限，但如果想测试app运行过程中的动态权限弹窗\n在 `max.config` 配置\n* `max.grantAllPermission = false` Fastbot启动后不会自动授予各种权限；\n\n* shell中增加 \n    ```shell\n     -p com.android.packageinstaller \n     -p com.android.permissioncontroller\n     -p com.lbe.security.miui  # for (miui android 10)\n     -p com.samsung.android.permissioncontroller #  for (samsung android 10)\n    ```\n增加其一弹窗相关package，可在权限弹窗时关闭弹窗\n\n### Fuzzing数据集 【new】\n提供各种格式image和video素材，用于遍历过程中执行选取各种类型的素材\n* 执行shell命令\n    ```shell\n     adb push data/fuzzing/ /sdcard\n     adb shell am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:///sdcard/fuzzing\n     ```\n![](doc/permission.png )\n\n### 增加Fuzz和mutation event 【new】\n模型推理执行某个action后按fuzzingrate几率生成5-10个fuzz序列，由如下event乱序组合\n* 在PC端新建 `max.config`文件\n* 增加以下参数\n  * `max.fuzzingRate = 0.01D //0.01为Fuzz事件的总概率`\n    ```shell\n    fuzzingRate包含的事件(数字为默认概率):\n    max.doRotateFuzzing = 0.15\n    max.doAppSwitchFuzzing = 0.15\n    max.doTrackballFuzzing = 0.15\n    max.doNavKeyFuzzing = 0.15\n    max.doKeyCodeFuzzing = 0.15\n    max.doSystemKeyFuzzing = 0.15\n    max.doDragFuzzing = 0.5\n    max.doPinchZoomFuzzing = 0.15 \n    max.doClickFuzzing = 0.7\n     ```\n  * `max.startMutation = 0.3D //启动Fastbot立刻设置mutation的几率，默认30%`\n    ```shell\n    fuzzingRate包含的事件(数字为默认概率，此概率为事件总概率):\n    max.doMutationAirplaneFuzzing = 0.001\n    max.doMutationMutationAlwaysFinishActivitysFuzzing = 0.1\n    max.doMutationWifiFuzzing = 0.001\n     ```\n* 飞行模式、wifi开关这两个在Fastbot执行完会重置开启\n* 将 `max.config` 文件push到手机端sdcard中，目录必须为sdcard\n    ```\n    adb push max.config /sdcard \n    ```\n\n## 常见问题\n1. 本地测试时，手机的顶部状态栏找不到了，怎么恢复呢？\n\n    答：` adb shell wm overscan reset`   ps: 为了防止测试时点击到设置，影响测试效果，做的特殊设置\n2. 小米手机运行 Fastbot 报错？\n\n    答：开启 “开发者选项” -> \"USB调试（安全设置）允许通过usb调试修改权限或模拟点击\"\n![](doc/usb1.png )\n3. 运行Fastbot时无任何log，启动后就退出?\n\n    答：需检查/sdcard/是否存在 `monkey.jar fastbot-thirdpart.jar framework.jar`。`部分机型发现adb push过去monkey.jar 自动被更名成monkey. 导致无法运行。        \n4. vivo7.1运行Fastbot报错？\n\n    答：关闭锁屏和开启usb模拟点击即可。\n![](doc/vivo1.png )\n5. oppo运行Fastbot 1.0模式报错？ \n\n    答：oppo存在权限监控，需要在开发者-> 开启 禁止权限监控 即可\n  \n![](doc/oppo1.png )\n\n6. 报错 `NoClassDefFoundError ` `Lcom/google/gson/GsonBuilder`?\n    \n    答：需按照 Usage 所写，将项目下所有 jar `monkey.jar fastbot-thirdpart.jar framework.jar` push 到 `/sdcard`中，并且注意按照文档中运行命令 classpath 包含 `fastbot-thirdpart.jar`\n\n\n7. 报错 Error: `Could not load library` `dlopen failed! libfastbot_native.so`\n\n    答：需按照 Usage 所写，将项目下所有libs文件push到手机中  `adb push libs/* /data/local/tmp/` \n\n7. 报错 Error: `Could not load library` `dlopen failed! libfastbot_native.so`\n\n    答：需按照 Usage 所写，将项目下所有libs文件push到手机中  `adb push libs/* /data/local/tmp/` \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openutx",
    "keywords": "utx,macaque,monkey,tools",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macaque",
    "package_url": "https://pypi.org/project/macaque/",
    "platform": "any",
    "project_url": "https://pypi.org/project/macaque/",
    "project_urls": {
      "Homepage": "https://github.com/openutx"
    },
    "release_url": "https://pypi.org/project/macaque/1.0.1/",
    "requires_dist": [
      "airtest",
      "fire"
    ],
    "requires_python": "",
    "summary": "Macaque will help you write ui automated tests more easily!",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16246693,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9cb4c3b704d957a6ebb48d6710385f8548142cac5464c7a225d8cef2fe7d33c4",
        "md5": "249287c09352032339c53afe60a26f82",
        "sha256": "0b861f4f0ab53813af2ac5f6a8cb1cdca7a3352867d4479f8af3d9e226122811"
      },
      "downloads": -1,
      "filename": "macaque-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "249287c09352032339c53afe60a26f82",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3932912,
      "upload_time": "2022-11-28T14:04:33",
      "upload_time_iso_8601": "2022-11-28T14:04:33.199111Z",
      "url": "https://files.pythonhosted.org/packages/9c/b4/c3b704d957a6ebb48d6710385f8548142cac5464c7a225d8cef2fe7d33c4/macaque-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3ebd43640f64cdb664cdb17c08f4832206c4ec06fd6a66be46a9e45e2d4adc1",
        "md5": "2762e5e68722e71ed442eb8f2a9ba105",
        "sha256": "195417b352b387e83fb5d93c1a660e085583f207bea31da14666523efb1f3c26"
      },
      "downloads": -1,
      "filename": "macaque-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2762e5e68722e71ed442eb8f2a9ba105",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3922866,
      "upload_time": "2022-11-28T14:04:35",
      "upload_time_iso_8601": "2022-11-28T14:04:35.507573Z",
      "url": "https://files.pythonhosted.org/packages/e3/eb/d43640f64cdb664cdb17c08f4832206c4ec06fd6a66be46a9e45e2d4adc1/macaque-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}