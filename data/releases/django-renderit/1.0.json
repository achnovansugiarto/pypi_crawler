{
  "info": {
    "author": "Jose Soares",
    "author_email": "jose@linux.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Framework :: Django",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python"
    ],
    "description": "|BUILD|_\n\n.. |BUILD| image::\n   https://travis-ci.org/jsoa/django-renderit.png?branch=master\n.. _BUILD: https://travis-ci.org/jsoa/django-renderit\n\n============\nInstallation\n============\n\nInstallation is easy using ``pip``.\n\n::\n\n\tpip install django-renderit\n\n\nAdd renderit to your installed apps::\n\n\tINSTALLED_APPS = (\n\t\t...\n\t\t'renderit',\n\t\t...\n\t)\n\n===============\nGetting Started\n===============\n\nThe idea here is to take a object and render it based off of its content type.\n\ndjango-renderit is one template tag called ``renderit`` and it takes\na bunch of different parameters to determine what template to render.\n\nBasic Usage\n===========\n\n::\n\n\t{% load renderit %}\n\n\t{% renderit object %}\n\nThis will render ``object`` using the default template, which is::\n\n    '/renderit/default.html'\n\nYou can then create a template that is object specific, for example, if the\nobject is a``auth.user`` instance, it will look for this template::\n\n    '/renderit/auth_user.html'\n\nExtra Arguments\n===============\n\nWe can add extra arguments to further make this template unique, for example,\nlets say we want to render the authentication information for websites that\nrequired logged in users. We would normally have some html on our base\ntemplate, such as\n\n::\n\n    <html>\n        <head>MySite</head>\n        <body>\n            <div class=\"auth\">\n                Welcome,\n                {% if request.user.is_authenticated %}\n                    {{ request.user.username }}, <a href=\"/profile/\">Profile</a> <a href=\"/logout/\">Logout</a>\n                {% else %}\n                    Guest, <a href=\"/login/\">Login</a> or <a href=\"/register/\">Register</a>\n                {% endif %}\n            </div>\n            <div class=\"content\">\n                ...\n            </div>\n        </body>\n    </html>\n\n``renderit``'s goal is to take these little blocks of code and seperate them out\nin there own specific, resuable templates, and to clean up the main templates.\n\n::\n\n    {% load renderit %}\n    <html>\n        <head>MySite</head>\n        <body>\n            {% renderit request.user auth %}\n            <div class=\"content\">\n                ...\n            </div>\n        </body>\n    </html>\n\nThe above example takes an extra argument ``auth``, this can be a context\nvariable or taken literally. If ``auth`` not a variable in the template then\n``renderit`` will take is as a string::\n\n    '/renderit/auth_user_auth.html'\n\nAny arguments specified after the object, will be appended to the end of the\ntemplate name.\n\nWhile the above example can be used with django's include tag in the same way,\na better use case would be when your dealing with a list of gerneric objects.\n\nLets take the following models::\n\n    class DummyEntry(models.Model):\n        title = models.CharField(max_length=200)\n        body = models.TextField()\n        publish_date = models.DateTimeField(default=datetime.datetime.now)\n        author = models.CharField(max_length=200)\n\n        def __unicode__(self):\n            return self.title\n\n\n    class DummyBookmark(models.Model):\n        url = models.URLField()\n        name = models.CharField(max_length=200)\n\n\n    class DummyVideo(models.Model):\n        url = models.URLField()\n        name = models.CharField(max_length=200)\n\n\n    class DummyImage(models.Model):\n        url = models.URLField()\n        name = models.CharField(max_length=200)\n\n\n    class RelatedContent(models.Model):\n        entry = models.ForeignKey(DummyEntry)\n        content_type = models.ForeignKey(ContentType)\n        object_id = models.IntegerField()\n        content_object = generic.GenericForeignKey('content_type', 'object_id')\n        add_date = models.DateTimeField(default=datetime.datetime.now)\n\nLets create and add the content to a generic list::\n\n    bm_ctype = ContentType.objects.get_for_model(DummyBookmark)\n    vi_ctype = ContentType.objects.get_for_model(DummyVideo)\n    im_ctype = ContentType.objects.get_for_model(DummyImage)\n    en_ctype = ContentType.objects.get_for_model(DummyEntry)\n\n\n    entry = DummyEntry.objects.create(\n        title=\"This is an example entry\",\n        body=\"This is only an example entry\",\n        author=\"John Smith\")\n\n    bm = DummyBookmark.objects.create(\n        url=\"http://google.com\",\n        name=\"Google\")\n\n    vid = DummyVideo.objects.create(\n        url=\"http://www.youtube.com/watch?v=K24mFGlJij0&playnext=1&list=PL4A64BDBA5F9629AE\",\n        name=\"Django's Caravan - Gypsy Jazz Guitar - Leigh Jackson\")\n\n    img1 = DummyImage.objects.create(\n        url=\"http://www.flickr.com/photos/alisonlyons/5678882139/\",\n        name=\"Fair Exchange From alison lyons photography\")\n\n    RelatedContent.objects.create(\n        entry=entry,\n        content_type=bm_ctype,\n        object_id=bm.pk)\n\n    RelatedContent.objects.create(\n        entry=entry,\n        content_type=vi_ctype,\n        object_id=vid.pk)\n\n    RelatedContent.objects.create(\n        entry=entry,\n        content_type=im_ctype,\n        object_id=img.pk)\n\n    RelatedContent.objects.create(\n        entry=entry,\n        content_type=en_ctype,\n        object_id=entry.pk)\n\n    related_objects = RelatedContent.objects.all()\n\nWhen related_content is used in your template, there will be 4 different\ntypes of objects. If we dont want they all to look the same, for example have\na image show up for ``DummyImage`` types or embdeded video\nplayer for ``DummyVideo`` types, the way we can do that is to have a bunch of\n``if`` statements to check the type of object, but thats ugly, and can clutter\nup the template. Enstead ``renderit`` will know the type of object you are\ntrying to render and use the appropriete template.\n\n::\n\n    {% for obj in related_content %}\n        {% renderit obj %}\n    {% endfor %}\n\nWhen we output the template list that is created for each item in the loop above,\nit will look something like this::\n\n    [u'renderit/sample_app_dummybookmark.html', 'renderit/default.html']\n    [u'renderit/sample_app_dummyvideo.html', 'renderit/default.html']\n    [u'renderit/sample_app_dummyimage.html', 'renderit/default.html']\n    [u'renderit/sample_app_dummyentry.html', 'renderit/default.html']\n\nWe can then create the templates and make them custom to the type of object.\n\nPython Objects\n==============\n\nWhile the examples shown are specific to django models, we can pass in any object\nand its type will be used (slugified) to build the template. If we have a python\ndictionary, the template will be::\n\n    '/renderit/dict.html'\n\nOf course this is rather broad, so we should pass in extra arguments to ensure\nits specific to what we use it for\n\n::\n\n    {% renderit dict_obj top10 %}\n\nThe template that will be looked for first would be::\n\n    '/renderit/dict_top10.html'\n\nFallback\n========\n\nFallback template paths are generated based on the arguments supplied, which\nthe last possible template being '/renderit/default.html'.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jsoa/django-renderit/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-renderit",
    "package_url": "https://pypi.org/project/django-renderit/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-renderit/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/jsoa/django-renderit/"
    },
    "release_url": "https://pypi.org/project/django-renderit/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Application that can render any object",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3349197,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d88a589de7ca996d4aee618c29d68555a7b10f39115e170860cd37c847f68dc",
        "md5": "68ccf874b187b98697e87df36741d01b",
        "sha256": "8a6b259c889a8d9bae56c587be64aa2b1ab641163d88e2d51d5fde84e1465140"
      },
      "downloads": -1,
      "filename": "django-renderit-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "68ccf874b187b98697e87df36741d01b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 601334,
      "upload_time": "2013-07-22T14:32:41",
      "upload_time_iso_8601": "2013-07-22T14:32:41.424980Z",
      "url": "https://files.pythonhosted.org/packages/5d/88/a589de7ca996d4aee618c29d68555a7b10f39115e170860cd37c847f68dc/django-renderit-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}