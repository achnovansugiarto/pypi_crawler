{
  "info": {
    "author": "Timothée Peignier",
    "author_email": "timothee.peignier@tryphon.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "=========\nMetrology\n=========\n\nA library to easily measure what's going on in your python.\n\nMetrology allows you to add instruments to your python code and hook them to external reporting tools like Graphite so as to better understand what's going on in your running python program.\n\nInstalling\n==========\n\nTo install : ::\n\n    pip install metrology\n\nAPI\n===\n\nGauge\n-----\n\nA gauge is an instantaneous measurement of a value\n\n.. code-block:: python\n\n    class JobGauge(metrology.instruments.Gauge):\n        def value(self):\n            return len(queue)\n    gauge = Metrology.gauge('pending-jobs', JobGauge())\n\n\nCounters\n--------\n\nA counter is like a gauge, but you can increment or decrement its value\n\n.. code-block:: python\n\n    counter = Metrology.counter('pending-jobs')\n    counter.increment()\n    counter.decrement()\n    counter.count\n\nMeters\n------\n\nA meter measures the rate of events over time (e.g., \"requests per second\").\nIn addition to the mean rate, you can also track 1, 5 and 15 minutes moving averages\n\n.. code-block:: python\n\n    meter = Metrology.meter('requests')\n    meter.mark()\n    meter.count\n\nor as a decorator:\n\n.. code-block:: python\n\n    @Metrology.meter('requests')\n    def do_this_again():\n        # do something\n\nor with context manager:\n\n.. code-block:: python\n\n    with Metrology.meter('requests'):\n        # do something\n\nTimers\n------\n\nA timer measures both the rate that a particular piece of code is called and the distribution of its duration\n\n.. code-block:: python\n\n    timer = Metrology.timer('responses')\n    with timer:\n        do_something()\n\nor as a decorator:\n\n.. code-block:: python\n\n    @Metrology.timer('responses')\n    def response():\n        # do_something\n\n\nUtilization Timer\n-----------------\n\nA specialized timer that calculates the percentage of wall-clock time that was spent\n\n.. code-block:: python\n\n    utimer = Metrology.utilization_timer('responses')\n    with utimer:\n      do_something()\n\nReporters\n=========\n\nLogger Reporter\n---------------\n\nA logging reporter that write metrics to a logger\n\n.. code-block:: python\n\n    reporter = LoggerReporter(level=logging.INFO, interval=10)\n    reporter.start()\n\n\nGraphite Reporter\n-----------------\n\nA graphite reporter that send metrics to graphite\n\n.. code-block:: python\n\n    reporter = GraphiteReporter('graphite.local', 2003)\n    reporter.start()\n\n\nLibrato Reporter\n----------------\n\nA librator metric reporter that send metrics to librato API\n\n.. code-block:: python\n\n    reporter = LibratoReporter(\"<email>\", \"<token>\")\n    reporter.start()\n\n\nGanglia Reporter\n----------------\n\nA ganglia reporter that sends metrics to gmond.\n\n.. code-block:: python\n\n    reporter = GangliaReporter(\"Group Name\", \"localhost\", 8649, \"udp\", interval=60)\n    reporter.start()\n\nStatsD Reporter\n----------------\n\nA statsd reporter that sends metrics to statsd daemon.\n\n.. code-block:: python\n\n    reporter = StatsDReporter('localhost', 3333, conn_type='tcp')\n    reporter.start()\n\nor use default UDP setting:\n\n.. code-block:: python\n\n    reporter = StatsDReporter('localhost', 3333)\n    reporter.start()\n\n\nAcknowledgement\n===============\n\nThis is heavily inspired by the awesome `metrics <https://github.com/codahale/metrics>`_ library.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyberdelia/metrology",
    "keywords": "",
    "license": "Copyright (©) 2012 Timothée Peignier <timothee.peignier@tryphon.org>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metrology",
    "package_url": "https://pypi.org/project/metrology/",
    "platform": "",
    "project_url": "https://pypi.org/project/metrology/",
    "project_urls": {
      "Homepage": "https://github.com/cyberdelia/metrology"
    },
    "release_url": "https://pypi.org/project/metrology/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library to easily measure what's going on in your python.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7631183,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e3f8511f4a24ee7a87a68bf2ec3094a551f3d9bd0f78b0dad9dbc588917cbbe",
        "md5": "f157289b3057f5b33cb3928f76a7a7b4",
        "sha256": "9dbbd85f3e59dcae0fe6d572fa46ee701c96f71c5e79ca5f344bff4a532eefa2"
      },
      "downloads": -1,
      "filename": "metrology-1.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f157289b3057f5b33cb3928f76a7a7b4",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 24809,
      "upload_time": "2017-02-22T02:24:12",
      "upload_time_iso_8601": "2017-02-22T02:24:12.706362Z",
      "url": "https://files.pythonhosted.org/packages/6e/3f/8511f4a24ee7a87a68bf2ec3094a551f3d9bd0f78b0dad9dbc588917cbbe/metrology-1.2.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83686974dca6b15f38f7f6f32f47392c4006aae0d81125cf00fae696c631d93a",
        "md5": "998321126e64e247356c9279f4e90f0c",
        "sha256": "d132e2d54d58a5a57a6b14e6733f7b906c543ebbfffbce5779d30a35aa8fed20"
      },
      "downloads": -1,
      "filename": "metrology-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "998321126e64e247356c9279f4e90f0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20685,
      "upload_time": "2017-02-22T02:24:11",
      "upload_time_iso_8601": "2017-02-22T02:24:11.146778Z",
      "url": "https://files.pythonhosted.org/packages/83/68/6974dca6b15f38f7f6f32f47392c4006aae0d81125cf00fae696c631d93a/metrology-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}