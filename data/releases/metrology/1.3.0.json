{
  "info": {
    "author": "Timoth√©e Peignier'",
    "author_email": "timothee.peignier@tryphon.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "=========\nMetrology\n=========\n\nA library to easily measure what's going on in your python.\n\nMetrology allows you to add instruments to your python code and hook them to external reporting tools like Graphite so as to better understand what's going on in your running python program.\n\nInstalling\n==========\n\nTo install : ::\n\n    pip install metrology\n\nAPI\n===\n\nGauge\n-----\n\nA gauge is an instantaneous measurement of a value\n\n.. code-block:: python\n\n    class JobGauge(metrology.instruments.Gauge):\n        def value(self):\n            return len(queue)\n    gauge = Metrology.gauge('pending-jobs', JobGauge())\n\n\nCounters\n--------\n\nA counter is like a gauge, but you can increment or decrement its value\n\n.. code-block:: python\n\n    counter = Metrology.counter('pending-jobs')\n    counter.increment()\n    counter.decrement()\n    counter.count\n\nMeters\n------\n\nA meter measures the rate of events over time (e.g., \"requests per second\").\nIn addition to the mean rate, you can also track 1, 5 and 15 minutes moving averages\n\n.. code-block:: python\n\n    meter = Metrology.meter('requests')\n    meter.mark()\n    meter.count\n\nor as a decorator:\n\n.. code-block:: python\n\n    @Metrology.meter('requests')\n    def do_this_again():\n        # do something\n\nor with context manager:\n\n.. code-block:: python\n\n    with Metrology.meter('requests'):\n        # do something\n\nTimers\n------\n\nA timer measures both the rate that a particular piece of code is called and the distribution of its duration\n\n.. code-block:: python\n\n    timer = Metrology.timer('responses')\n    with timer:\n        do_something()\n\nor as a decorator:\n\n.. code-block:: python\n\n    @Metrology.timer('responses')\n    def response():\n        # do_something\n\n\nUtilization Timer\n-----------------\n\nA specialized timer that calculates the percentage of wall-clock time that was spent\n\n.. code-block:: python\n\n    utimer = Metrology.utilization_timer('responses')\n    with utimer:\n      do_something()\n\nTagging metrics\n---------------\n\nAll metrics can be tagged if the reporter supports it (currently: Graphite, Librato, Logger. The StatsD reporter supports the Datadog tag format because no official tag standard has been devised by the project).\nTags can be arbitrary key-value pairs. Just assign a dict as metric name. A 'name'-entry is required.\n\n.. code-block:: python\n\n    counter = Metrology.counter({\n      'name': 'pending-jobs',\n      'host': 'backend',\n      'priority': 'high'\n    })\n    counter.increment()\n    counter.decrement()\n    counter.count\n\nAll metric types support tagging.\n\nReporters\n=========\n\nLogger Reporter\n---------------\n\nA logging reporter that write metrics to a logger\n\n.. code-block:: python\n\n    reporter = LoggerReporter(level=logging.INFO, interval=10)\n    reporter.start()\n\n\nGraphite Reporter\n-----------------\n\nA graphite reporter that send metrics to graphite\n\n.. code-block:: python\n\n    reporter = GraphiteReporter('graphite.local', 2003)\n    reporter.start()\n\n\nLibrato Reporter\n----------------\n\nA librator metric reporter that send metrics to librato API\n\n.. code-block:: python\n\n    reporter = LibratoReporter(\"<email>\", \"<token>\")\n    reporter.start()\n\n\nGanglia Reporter\n----------------\n\nA ganglia reporter that sends metrics to gmond.\n\n.. code-block:: python\n\n    reporter = GangliaReporter(\"Group Name\", \"localhost\", 8649, \"udp\", interval=60)\n    reporter.start()\n\nStatsD Reporter\n----------------\n\nA statsd reporter that sends metrics to statsd daemon.\n\n.. code-block:: python\n\n    reporter = StatsDReporter('localhost', 3333, conn_type='tcp')\n    reporter.start()\n\nor use default UDP setting:\n\n.. code-block:: python\n\n    reporter = StatsDReporter('localhost', 3333)\n    reporter.start()\n\n\nAcknowledgement\n===============\n\nThis is heavily inspired by the awesome `metrics <https://github.com/codahale/metrics>`_ library.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyberdelia/metrology",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metrology",
    "package_url": "https://pypi.org/project/metrology/",
    "platform": "",
    "project_url": "https://pypi.org/project/metrology/",
    "project_urls": {
      "Homepage": "https://github.com/cyberdelia/metrology"
    },
    "release_url": "https://pypi.org/project/metrology/1.3.0/",
    "requires_dist": [
      "astrolabe (>=0.4.0)",
      "atomic (>=0.7.0)",
      "ganglia",
      "requests"
    ],
    "requires_python": "",
    "summary": "A library to easily measure what\\'s going on in your python.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7631183,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac618ea1c52b78bdc9c69b8cd3ae3d5367a9dc97e9845b8cda9d187568e229f9",
        "md5": "4304197d5e7adc071d4f4b300aa76410",
        "sha256": "2254a2e31439ca692fe13f418848f5ca0d061cbe0ef654b25ebb04469b4ac8ae"
      },
      "downloads": -1,
      "filename": "metrology-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4304197d5e7adc071d4f4b300aa76410",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 24655,
      "upload_time": "2020-07-05T00:16:30",
      "upload_time_iso_8601": "2020-07-05T00:16:30.128558Z",
      "url": "https://files.pythonhosted.org/packages/ac/61/8ea1c52b78bdc9c69b8cd3ae3d5367a9dc97e9845b8cda9d187568e229f9/metrology-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12550b5f0452e98461d12bc2fb92164eec1c64cbdf9f81fc8b8cbce186ef8058",
        "md5": "61d32b611b7a0eccefe9a180056bbe05",
        "sha256": "4136c2d20851445ebfe39be56357a96135c1ef704191ebfb5616d88b25a040c9"
      },
      "downloads": -1,
      "filename": "metrology-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61d32b611b7a0eccefe9a180056bbe05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32411,
      "upload_time": "2020-07-05T00:16:31",
      "upload_time_iso_8601": "2020-07-05T00:16:31.103367Z",
      "url": "https://files.pythonhosted.org/packages/12/55/0b5f0452e98461d12bc2fb92164eec1c64cbdf9f81fc8b8cbce186ef8058/metrology-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}