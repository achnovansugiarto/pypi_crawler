{
  "info": {
    "author": "Gary Burgmann",
    "author_email": "garyburgmann@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# DRF Firebase Auth\n\n## Requirements\n\n\n* Python3\n* Django\n* Django Rest Framework\n\n\n\n## Installation\n\n```\n$ pip install drf-firebase-auth\n```\n\nAdd the application to your project's `INSTALLED_APPS` in `settings.py`.\n\n```python\nINSTALLED_APPS = [\n    ...\n    'drf_firebase_auth',\n]\n```\n\nIn your project's `settings.py`, add this to the `REST_FRAMEWORK` configuration. Note that if you want to retain access to the browsable API for locally created users, then you will probably want to keep `rest_framework.authentication.SessionAuthentication` too.\n\n\n```python\nREST_FRAMEWORK = {\n  ...\n  'DEFAULT_AUTHENTICATION_CLASSES': [\n    ...\n    'rest_framework.authentication.SessionAuthentication',\n    'drf_firebase_auth.authentication.FirebaseAuthentication',\n  ]\n}\n```\n\n\nThe `drf_firebase_auth` application comes with the following settings as default, which can be overridden in your project's `settings.py` file. For convenience in version >= 1, most of these can be conveniently set form environment variables also. Make sure to nest them within `DRF_FIREBASE_AUTH` as below:\n\n\n```python\nDRF_FIREBASE_AUTH = {\n    # allow anonymous requests without Authorization header set\n    'ALLOW_ANONYMOUS_REQUESTS': os.getenv('ALLOW_ANONYMOUS_REQUESTS', False),\n    # path to JSON file with firebase secrets\n    'FIREBASE_SERVICE_ACCOUNT_KEY':\n        os.getenv('FIREBASE_SERVICE_ACCOUNT_KEY', ''),\n    # allow creation of new local user in db\n    'FIREBASE_CREATE_LOCAL_USER':\n        os.getenv('FIREBASE_CREATE_LOCAL_USER', True),\n    # attempt to split firebase user.display_name and set local user\n    # first_name and last_name\n    'FIREBASE_ATTEMPT_CREATE_WITH_DISPLAY_NAME':\n        os.getenv('FIREBASE_ATTEMPT_CREATE_WITH_DISPLAY_NAME', True),\n    # commonly JWT or Bearer (e.g. JWT <token>)\n    'FIREBASE_AUTH_HEADER_PREFIX':\n        os.getenv('FIREBASE_AUTH_HEADER_PREFIX', 'JWT'),\n    # verify that JWT has not been revoked\n    'FIREBASE_CHECK_JWT_REVOKED':\n        os.getenv('FIREBASE_CHECK_JWT_REVOKED', True),\n    # require that firebase user.email_verified is True\n    'FIREBASE_AUTH_EMAIL_VERIFICATION':\n        os.getenv('FIREBASE_AUTH_EMAIL_VERIFICATION', False),\n    # function should accept firebase_admin.auth.UserRecord as argument\n    # and return str\n    'FIREBASE_USERNAME_MAPPING_FUNC': map_firebase_uid_to_username\n}\n```\n\nYou can get away with leaving all the settings as default except for `FIREBASE_SERVICE_ACCOUNT_KEY`, which is obviously required.\n\nNOTE: `FIREBASE_USERNAME_MAPPING_FUNC` will replace behaviour in version < 1 as default (formerly provided by logic in `map_firebase_to_username_legacy`, described below). One can simply switch out this function.\n\n`drf_firebase_auth.utils` contains functions for mapping firebase user info to the Django username field (new in version >= 1). Any custom function can be supplied here, as long as it accepts a `firebase_admin.auth.UserRecord` argument. The supplied functions are common use-cases:\n\n```python\ndef map_firebase_to_username_legacy(firebase_user: auth.UserRecord) -> str:\n    try:\n        username = '_'.join(\n            firebase_user.display_name.split(' ')\n            if firebase_user.display_name\n            else str(uuid.uuid4())\n        )\n        return username if len(username) <= 30 else username[:30]\n    except Exception as e:\n        raise Exception(e)\n\n\ndef map_firebase_display_name_to_username(\n    firebase_user: auth.UserRecord\n) -> str:\n    try:\n        return '_'.join(firebase_user.display_name.split(' '))\n    except Exception as e:\n        raise Exception(e)\n\n\ndef map_firebase_uid_to_username(\n    firebase_user: auth.UserRecord\n) -> str:\n    try:\n        return firebase_user.uid\n    except Exception as e:\n        raise Exception(e)\n\n\ndef map_firebase_email_to_username(\n    firebase_user: auth.UserRecord\n) -> str:\n    try:\n        return get_firebase_user_email(firebase_user)\n    except Exception as e:\n        raise Exception(e)\n\n\ndef map_uuid_to_username(\n    _: auth.UserRecord\n) -> str:\n    try:\n        return str(uuid.uuid4())\n    except Exception as e:\n        raise Exception(e)\n```\n\nNow that you have configured the application, run the migrations so that the Firebase data can be stored.\n\n```\n$ ./manage.py migrate drf_firebase_auth\n```\n\nAll you need to do now is have your client code handle the Firebase popup/redirect authentication flow, retrieve the idToken from the currentUser (Firebase explains this flow well in their docs: `https://firebase.google.com/docs/auth/admin/verify-id-tokens`), and then use the idToken for the user in an `Authorization` header in requests to your API.\n\n```\nJWT <token>\n```\n\nVoila!\n\n## Contributing\n\n* Trello board created! Please follow this link if you wish to collabrate in the future direction of this package: https://trello.com/invite/b/lkAsvStS/af54d9a94359c042f3bd9afb47f82eab/drf-firebase-auth\n* Please raise an issue/feature and name your branch 'feature-n' or 'issue-n', where 'n' is the issue number.\n* If you test this code with a Python version not listed above and all is well, please fork and update the README to include the Python version you used :)\n* I almost always setup Django with a custom user class inheriting from AbstractUser, where I switch the USERNAME_FIELD to be 'email'. This backend is setup to assign a username still anyway, but if there are any issues, please raise them and/or make a pull request to help the community!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/garyburgmann/drf-firebase-auth",
    "keywords": "drf,django,rest_framework,djangorestframework,authentication,python3,firebase",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-firebase-auth",
    "package_url": "https://pypi.org/project/drf-firebase-auth/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-firebase-auth/",
    "project_urls": {
      "Homepage": "https://github.com/garyburgmann/drf-firebase-auth"
    },
    "release_url": "https://pypi.org/project/drf-firebase-auth/1.0.0/",
    "requires_dist": [
      "djangorestframework (<4,>=3.9)",
      "firebase-admin (<5,>=4.5)"
    ],
    "requires_python": ">=3.4",
    "summary": "Custom Django Rest Framework authentication backend for parsing Firebase uid tokens and storing as local users.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9313779,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed3608740ecc1383b2eb808438d90fc0c0b628c6e3ed4adb97a07e7bc2c21d5d",
        "md5": "f091aaf856a4df397e9ee56fc8e247bd",
        "sha256": "0953f2b11cd5ae40284d0ef46c0caaad679f8e6bfc9d68acb3091a75ee302400"
      },
      "downloads": -1,
      "filename": "drf_firebase_auth-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f091aaf856a4df397e9ee56fc8e247bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 9987,
      "upload_time": "2021-02-04T03:54:33",
      "upload_time_iso_8601": "2021-02-04T03:54:33.318778Z",
      "url": "https://files.pythonhosted.org/packages/ed/36/08740ecc1383b2eb808438d90fc0c0b628c6e3ed4adb97a07e7bc2c21d5d/drf_firebase_auth-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2924233eb5efbaf254ea43769e96d70e98ebbc41b5c3a87b98e2820563b95f44",
        "md5": "084b40261fcf3b5948fe7ff268972bc0",
        "sha256": "d42a226e1ef3605362d460b681253f8b49bf271e89eba0dc3fe8bdb204648114"
      },
      "downloads": -1,
      "filename": "drf-firebase-auth-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "084b40261fcf3b5948fe7ff268972bc0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 8867,
      "upload_time": "2021-02-04T03:54:35",
      "upload_time_iso_8601": "2021-02-04T03:54:35.300512Z",
      "url": "https://files.pythonhosted.org/packages/29/24/233eb5efbaf254ea43769e96d70e98ebbc41b5c3a87b98e2820563b95f44/drf-firebase-auth-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}