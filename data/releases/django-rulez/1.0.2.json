{
  "info": {
    "author": "Christopher Glass",
    "author_email": "tribaal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. |travisci| image:: https://api.travis-ci.org/chrisglass/django-rulez.png\n.. _travisci https://travis-ci.org/chrisglass/django-rulez\n\n|travisci|\n\n#############\ndjango-rulez\n#############\n\ndjango-rulez is a lean, fast and complete rules-based permissions system for\nthe django framework.\n\nMost other authentication frameworks focus on using database joins, which gets\npretty slow after a while (since mostly every query generates a lot of joins).\nDjango-rulez uses a memory-based hashmap instead.\n\nDjango-rulez also implements a role concept, allowing for very readable and\nmaintainable code.\n\ndjango-rulez was forked from django-rules, since some of the goals django-rules\nset themselves didn't match our current project goals. You can refer to their \ngithub project page for more information about this other cool project: \nhttps://github.com/maraujop/django-rules\nKudos for the good work guys!\n\nGenerally, it is also an instance-level authorization backend, that stores the \nrules themselves as methods on models.\n\nStatus\n======\n\nSince many people asked - this project is still active and used in production\nsystems, but its current goals have been reached and not much further\ndevelopment happens.\n\nPull requests or discussion is very welcome, especially if you have an\ninteresting use-case we haven't thought of :)\n\nOur test coverage is 100%, and we would like to keep it this way, so\nplease make sure you test before you push.\n\nInstallation\n=============\n\n\nFrom source\n------------\n\nTo install django-rulez from source::\n\n\tgit clone https://github.com/chrisglass/django-rulez/ django-rulez\n\tcd django-rulez\n\tpython setup.py install\n\nFrom Pypi\n----------\n\nSimply install django-rulez like you would install any other pypi package::\n\n    pip install django-rulez\n\n\nConfiguration\n==============\n\n* Add `rulez` to the list of `INSTALLED_APPS` in your `settings.py`\n* Add the django-rulez authorization backend to the list of `AUTHENTICATION_BACKENDS` in `settings.py`::\n\n\tAUTHENTICATION_BACKENDS = [\n\t    'django.contrib.auth.backends.ModelBackend', # Django's default auth backend\n\t    'rulez.backends.ObjectPermissionBackend',\n\t]\n\nExample\n=========\n\nThe following example should get you started::\n\n    # models.py\n    from rulez import registry\n    \n    class myModel(models.Model):\n        \n        def can_edit(self, user_obj):\n            '''\n            Not a very useful rule, but it's an example\n            '''\n            if user_obj.username == 'chris':\n                return True\n            return False\n            \n    registry.register('can_edit', myModel)\n\nDjango-rulez requires to declare the rule as a method in the same model. This\nis very simple in case the rule applies to a model in our own application, but\nin some cases, we might need to set object permisions to models from 3rd-party\napplications (e.g. to the User model). Let's see an example for this case::\n\n    # models.py\n    from django.contrib.auth.models import User\n    from rulez import registry\n    \n    def user_can_edit(self, user_obj):\n        '''\n        This function will be hooked up to the User model as a method.\n        The rule says that a user can only be modified by the same user\n        '''\n        if self == user_obj:\n            return True\n        return False\n    \n    # 'add_to_class' is a standard Django method\n    User.add_to_class('can_edit', user_can_edit)\n            \n    registry.register('can_edit', User)\n\nAnother example: using roles\n=============================\n\nA little more code is needed to use roles, but it's still pretty concise::\n\n    # models.py\n    from rulez.rolez.base import AbstractRole\n    from rulez.roles.models import ModelRoleMixin\n    from rulez import registry\n\n    class Editor(AbstractRole):\n        \"\"\" That's a role\"\"\"\n        @classmethod\n        def is_member(cls, user, obj):\n            \"\"\"Remember, class methods take the class instead of self\"\"\"\n            if user.username == 'chris':\n                return True\n            return False\n\n    class myModel(models.Model, ModelRoleMixin): # Don't forget the mixin!\n        \n        def can_edit(self, user_obj):\n            '''\n            Not a very useful either but it's an example\n            '''\n            return self.has_role(user_obj, Editor):\n\n        roles = [Editor, ]\n\n    registry.register('can_edit', myModel)\n\nUsing your rules\n=================\n\nOnce you have created a rule or role, you can utilize them directly on \nan instance of your model:::\n\n    model_instance = MyModel.objects.get(pk=1)\n    user_chris = User.objects.get(username='chris')\n\n    model_instance.can_edit(user_chris)\n\nOr, with the help of django-rulez's authentication backend, on a user \nobject:::\n\n    user_chris.has_perm('can_edit', model_instance)\n\nIn addition, the following templatetag usage is supported:::\n\n   {% load rulez_perms %}\n   {% rulez_perms can_edit model_instance as VARNAME %}\n   {% if VARNAME %}\n   You have permissions\n   {% else %}\n   Sorry, you don't have permission\n   {% endif %}",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/chrisglass/django-rulez",
    "keywords": "authorization,backends,django,rules,permissions,rulez",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-rulez",
    "package_url": "https://pypi.org/project/django-rulez/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-rulez/",
    "project_urls": {
      "Homepage": "http://github.com/chrisglass/django-rulez"
    },
    "release_url": "https://pypi.org/project/django-rulez/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A lean and mean object-level rules system for the Django framework",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1503643,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aa3bc2e830b6fe659c04909075a32be30995e6c4424f8d8c352810fccbbdbfb",
        "md5": "4168d0c61632d289cf912ac3bd7ccbe3",
        "sha256": "88866a1a3be59262432eb92c6dc0673ad569a05aa183048360970286a4ca2b30"
      },
      "downloads": -1,
      "filename": "django-rulez-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4168d0c61632d289cf912ac3bd7ccbe3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11995,
      "upload_time": "2015-04-13T20:12:08",
      "upload_time_iso_8601": "2015-04-13T20:12:08.077826Z",
      "url": "https://files.pythonhosted.org/packages/7a/a3/bc2e830b6fe659c04909075a32be30995e6c4424f8d8c352810fccbbdbfb/django-rulez-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}