{
  "info": {
    "author": "Georg Brandl, Michael Foord and Richard Jones",
    "author_email": "richard@python.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "For example::\n\n    $ python -me 1 + 1\n    2\n\nLike python -c but no need for a print. But wait, there's more.\n\nAs a bonus, if the first argument is a module name then it will output the\nlocation of the module source code::\n\n    $ python -me os\n    /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/os.py\n\nIf you follow the name of the module with a command then the module will be\nopened with that command. For example, the following will open the os module\nsource in vim::\n\n    $ python -me os vim\n\nThe \"e\" module recognises the special command names \"edit\" and \"view\" which\nwill result in it looking up your editor and viewer commands in the\nenvironment variables $EDITOR and $PAGER respectively. The latter defaults to\n\"less\". This is slightly easier than writing, for example::\n\n    $ vim `python -me os`\n\n... especially if you're going back to edit a previous \"python -me\" command\nusing line editing.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "e",
    "package_url": "https://pypi.org/project/e/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/e/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/e/1.4.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Evaluate and display command line expressions with\n        python -me expr",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2522448,
  "urls": [],
  "vulnerabilities": []
}