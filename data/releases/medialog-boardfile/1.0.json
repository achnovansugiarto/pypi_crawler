{
  "info": {
    "author": "Espen Moe-Nilssen",
    "author_email": "espen@medialog.no",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)"
    ],
    "description": ".. contents::\r\n        \r\n        .. Medialog Boardfile\r\n        -----\r\n        \r\n        – Content type for uploading of documents that needs to be approved by\r\nmany persons.\r\n        - The workflow is called \"Multiapprove workflow\"\r\n        – After installing you can set the group that can approve in\r\n/portal_workflow (default to \"Reviewers\")\r\n        – Reviewer is also added to portal_catalog index, so it is possible to\r\nmake a smart folder showing only objects the current user has not approved\r\n        - Content that nobody has looked at for a certain time automatically\r\ngets published if nobody has \"rejected\" it.\r\n        – You will have to add clockserver after [instance] in your buildout,\r\nsomething like:\r\n        \r\n        zope-conf-additional =\r\n        <clock-server>\r\n        method /mysite/@@tick\r\n        period 120\r\n        host localhost\r\n        user admin\r\n        password mypassword\r\n        </clock-server>\r\n        \r\n        Please note, this product is still in the making\r\n        \r\n        \r\n        \r\n        Espen Moe-Nilssen <espen at medialog dot no>, author\r\n        Change history\r\n        **************\r\n        \r\n        Changelog\r\n        =========\r\n        \r\n        1.0 (2010-06-06)\r\n        ----------------\r\n        \r\n        _ Alfa version\r\n        - Created recipe with ZopeSkel\r\n        �Added content type \"Boardfile\"\r\n        - Added browser views\r\n        �Added workflow \"multiapprove workflow\" so all \"Reviewers\" can \"approve\"\r\nor \"reject\" the boardfile\r\n        �Added time based trasaction... the \"Boardfile\" gets published after \"n\"\r\ndays if none of the \"Reviewers\" has \"rejected\" it.\r\n        - Added \"Boardfile_listing\" view.\r\n        Warning: This will give you an error if you use it on a folder\r\ncontaining something else than \"Boardfiles\", so it is in \"skins\" dir and not in ues.\r\n        \r\n        To do:\r\n        =======\r\n        �Change time to \"creation date\", it should take 20 days from creation,\r\nnot from \"last transaction in history\".\r\n        �Far to much code in \"browser\"... could need some help here.\r\n        �Time before the transaction is now about 14 minutes (for testing), will\r\nchange to 20 days.\r\n        \r\n        \r\n        \r\n        [Espen Moe-Nilssen]\r\n        \r\n        Detailed Documentation\r\n        **********************\r\n        \r\n        Introduction\r\n        ============\r\n        \r\n        This is a full-blown functional test. The emphasis here is on testing what\r\n        the user may input and see, and the system is largely tested as a black box.\r\n        We use PloneTestCase to set up this test as well, so we have a full\r\nPlone site\r\n        to play with. We *can* inspect the state of the portal, e.g. using\r\n        self.portal and self.folder, but it is often frowned upon since you are not\r\n        treating the system as a black box. Also, if you, for example, log in or set\r\n        roles using calls like self.setRoles(), these are not reflected in the test\r\n        browser, which runs as a separate session.\r\n        \r\n        Being a doctest, we can tell a story here.\r\n        \r\n        First, we must perform some setup. We use the testbrowser that is shipped\r\n        with Five, as this provides proper Zope 2 integration. Most of the\r\n        documentation, though, is in the underlying zope.testbrower package.\r\n        \r\n        >>> from Products.Five.testbrowser import Browser\r\n        >>> browser = Browser()\r\n        >>> portal_url = self.portal.absolute_url()\r\n        \r\n        The following is useful when writing and debugging testbrowser tests. It\r\nlets\r\n        us see all error messages in the error_log.\r\n        \r\n        >>> self.portal.error_log._ignored_exceptions = ()\r\n        \r\n        With that in place, we can go to the portal front page and log in. We will\r\n        do this using the default user from PloneTestCase:\r\n        \r\n        >>> from Products.PloneTestCase.setup import portal_owner, default_password\r\n        \r\n        >>> browser.open(portal_url)\r\n        \r\n        We have the login portlet, so let's use that.\r\n        \r\n        >>> browser.getControl(name='__ac_name').value = portal_owner\r\n        >>> browser.getControl(name='__ac_password').value = default_password\r\n        >>> browser.getControl(name='submit').click()\r\n        \r\n        Here, we set the value of the fields on the login form and then simulate a\r\n        submit click.\r\n        \r\n        We then test that we are still on the portal front page:\r\n        \r\n        >>> browser.url == portal_url\r\n        True\r\n        \r\n        And we ensure that we get the friendly logged-in message:\r\n        \r\n        >>> \"You are now logged in\" in browser.contents\r\n        True\r\n        \r\n        \r\n        -*- extra stuff goes here -*-\r\n        The Boardfile content type\r\n        ===============================\r\n        \r\n        In this section we are tesing the Boardfile content type by performing\r\n        basic operations like adding, updadating and deleting Boardfile content\r\n        items.\r\n        \r\n        Adding a new Boardfile content item\r\n        --------------------------------\r\n        \r\n        We use the 'Add new' menu to add a new content item.\r\n        \r\n        >>> browser.getLink('Add new').click()\r\n        \r\n        Then we select the type of item we want to add. In this case we select\r\n        'Boardfile' and click the 'Add' button to get to the add form.\r\n        \r\n        >>> browser.getControl('Boardfile').click()\r\n        >>> browser.getControl(name='form.button.Add').click()\r\n        >>> 'Boardfile' in browser.contents\r\n        True\r\n        \r\n        Now we fill the form and submit it.\r\n        \r\n        >>> browser.getControl(name='title').value = 'Boardfile Sample'\r\n        >>> browser.getControl('Save').click()\r\n        >>> 'Changes saved' in browser.contents\r\n        True\r\n        \r\n        And we are done! We added a new 'Boardfile' content item to the portal.\r\n        \r\n        Updating an existing Boardfile content item\r\n        ---------------------------------------\r\n        \r\n        Let's click on the 'edit' tab and update the object attribute values.\r\n        \r\n        >>> browser.getLink('Edit').click()\r\n        >>> browser.getControl(name='title').value = 'New Boardfile Sample'\r\n        >>> browser.getControl('Save').click()\r\n        \r\n        We check that the changes were applied.\r\n        \r\n        >>> 'Changes saved' in browser.contents\r\n        True\r\n        >>> 'New Boardfile Sample' in browser.contents\r\n        True\r\n        \r\n        Removing a/an Boardfile content item\r\n        --------------------------------\r\n        \r\n        If we go to the home page, we can see a tab with the 'New Boardfile\r\n        Sample' title in the global navigation tabs.\r\n        \r\n        >>> browser.open(portal_url)\r\n        >>> 'New Boardfile Sample' in browser.contents\r\n        True\r\n        \r\n        Now we are going to delete the 'New Boardfile Sample' object. First we\r\n        go to the contents tab and select the 'New Boardfile Sample' for\r\n        deletion.\r\n        \r\n        >>> browser.getLink('Contents').click()\r\n        >>> browser.getControl('New Boardfile Sample').click()\r\n        \r\n        We click on the 'Delete' button.\r\n        \r\n        >>> browser.getControl('Delete').click()\r\n        >>> 'Item(s) deleted' in browser.contents\r\n        True\r\n        \r\n        So, if we go back to the home page, there is no longer a 'New Boardfile\r\n        Sample' tab.\r\n        \r\n        >>> browser.open(portal_url)\r\n        >>> 'New Boardfile Sample' in browser.contents\r\n        False\r\n        \r\n        Adding a new Boardfile content item as contributor\r\n        ------------------------------------------------\r\n        \r\n        Not only site managers are allowed to add Boardfile content items, but\r\n        also site contributors.\r\n        \r\n        Let's logout and then login as 'contributor', a portal member that has the\r\n        contributor role assigned.\r\n        \r\n        >>> browser.getLink('Log out').click()\r\n        >>> browser.open(portal_url)\r\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\r\n        >>> browser.getControl(name='__ac_password').value = default_password\r\n        >>> browser.getControl(name='submit').click()\r\n        >>> browser.open(portal_url)\r\n        \r\n        We use the 'Add new' menu to add a new content item.\r\n        \r\n        >>> browser.getLink('Add new').click()\r\n        \r\n        We select 'Boardfile' and click the 'Add' button to get to the add form.\r\n        \r\n        >>> browser.getControl('Boardfile').click()\r\n        >>> browser.getControl(name='form.button.Add').click()\r\n        >>> 'Boardfile' in browser.contents\r\n        True\r\n        \r\n        Now we fill the form and submit it.\r\n        \r\n        >>> browser.getControl(name='title').value = 'Boardfile Sample'\r\n        >>> browser.getControl('Save').click()\r\n        >>> 'Changes saved' in browser.contents\r\n        True\r\n        \r\n        Done! We added a new Boardfile content item logged in as contributor.\r\n        \r\n        Finally, let's login back as manager.\r\n        \r\n        >>> browser.getLink('Log out').click()\r\n        >>> browser.open(portal_url)\r\n        >>> browser.getControl(name='__ac_name').value = portal_owner\r\n        >>> browser.getControl(name='__ac_password').value = default_password\r\n        >>> browser.getControl(name='submit').click()\r\n        >>> browser.open(portal_url)\r\n        \r\n        \r\n        \r\n        \r\n        Contributors\r\n        ************\r\n        \r\n        Espen Moe-Nilssen, Author\r\n        \r\n        \r\n        Download\r\n        ********",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://medialog.no",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medialog.boardfile",
    "package_url": "https://pypi.org/project/medialog.boardfile/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/medialog.boardfile/",
    "project_urls": {
      "Homepage": "http://medialog.no"
    },
    "release_url": "https://pypi.org/project/medialog.boardfile/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Boardfile content type",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1857235,
  "urls": [],
  "vulnerabilities": []
}