{
  "info": {
    "author": "Losant",
    "author_email": "hello@losant.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Losant Python MQTT Client\n=========================\n\n|travis-badge|_ |pypi-badge|_\n\n.. |travis-badge| image:: https://travis-ci.org/Losant/losant-mqtt-python.svg?branch=master\n.. _travis-badge: https://travis-ci.org/Losant/losant-mqtt-python\n\n.. |pypi-badge| image:: https://badge.fury.io/py/losant-mqtt.svg\n.. _pypi-badge: https://badge.fury.io/py/losant-mqtt\n\nThe `Losant <https://www.losant.com>`_ MQTT client provides a simple way for\ncustom things to communicate with the Losant platform over MQTT.  You can authenticate\nas a device, publish device state, and listen for device commands.\n\nThis client works with both Python 2.7 and 3. It uses the\n`Paho MQTT Client <https://github.com/eclipse/paho.mqtt.python>`_ under the\ncovers for the actual MQTT communication.\n\nInstallation\n------------\n\nThe latest stable version is available in the Python Package Index (PyPi)\nand can be installed using\n\n::\n\n    pip install losant-mqtt\n\n\nExample\n-------\n\nBelow is a high-level example of using the Losant Python MQTT client to send the value\nof a temperature sensor to the Losant platform.\n\n::\n\n    import time\n    from losantmqtt import Device\n\n    # Construct device\n    device = Device(\"my-device-id\", \"my-app-access-key\", \"my-app-access-secret\")\n\n    def on_command(device, command):\n        print(\"Command received.\")\n        print(command[\"name\"])\n        print(command[\"payload\"])\n\n    # Listen for commands.\n    device.add_event_observer(\"command\", on_command)\n\n    # Connect to Losant.\n    device.connect(blocking=False)\n\n    # Send temperature once every second.\n    while True:\n        device.loop()\n        if device.is_connected():\n            temp = call_out_to_your_sensor_here()\n            device.send_state({\"temperature\": temp})\n        time.sleep(1)\n\n\nAPI Documentation\n-----------------\n\n* `Device`_\n    * `constructor`_\n    * `connect`_\n    * `is_connected`_\n    * `close`_\n    * `send_state`_\n    * `loop`_\n    * `add_event_observer`_\n    * `remove_event_observer`_\n\nDevice\n******\n\nA device represents a single thing or widget that you'd like to connect to the Losant platform.\nA single device can contain many different sensors or other attached peripherals.\nDevices can either report state or respond to commands.\n\nA device's state represents a snapshot of the device at some point in time.\nIf the device has a temperature sensor, it might report state every few seconds\nwith the temperature. If a device has a button, it might only report state when\nthe button is pressed. Devices can report state as often as needed by your specific application.\n\nCommands instruct a device to take a specific action. Commands are defined as a\nname and an optional payload. For example, if the device is a scrolling marquee,\nthe command might be \"update text\" and the payload would include the text to update.\n\nconstructor\n```````````\n\n::\n\n    Device(device_id, key, secret, secure=True, transport=\"tcp\")\n\nThe ``Device()`` constructor takes the following arguments:\n\ndevice_id\n    The device's ID. Obtained by first registering a device using the Losant platform.\n\nkey\n    The Losant access key.\n\nsecret\n    The Losant access secret.\n\nsecure\n    If the client should connect to Losant over SSL - default is true.\n\ntransport\n    Allowed values are \"tcp\" and \"websockets\". Defaults to \"tcp\", which is a raw TCP connection over\n    ports 1883 (insecure) or 8883 (secure). When \"websockets\" is passed in, connects using MQTT over\n    WebSockets, which uses either port 80 (insecure) or port 443 (secure).\n\nExample\n.......\n\n::\n\n    from losantmqtt import Device\n\n    device = Device(\"my-device-id\", \"my-app-access-key\", \"my-app-access-secret\")\n\nconnect\n```````\n\n::\n\n    connect(blocking=True)\n\nConnects the device to the Losant platform. Hook the connect event to know when a connection\nhas been successfully established.  Connect takes the following arguments:\n\nblocking\n    If the connect method should block or not.  True is the default, which means that the connect\n    call will be a blocking call that will not return until the connection is closed or an error\n    occurs - all interaction has to be done through the various event callbacks.  If blocking is\n    set to False, the function will only block until the connection is kicked off - after that point\n    you must run the network loop yourself, by calling the `loop`_ method periodically.\n\nis_connected\n````````````\n\n::\n\n    is_connected()\n\nReturns a boolean indicating whether or not the device is currently connected\nto the Losant platform.\n\nclose\n`````\n\n::\n\n    close()\n\nCloses the device's connection to the Losant platform.\n\nsend_state\n``````````\n\n::\n\n    send_state(state, time_like=None)\n\nSends a device state to the Losant platform. In many scenarios, device states will\nchange rapidly. For example a GPS device will report GPS coordinates once a second or\nmore. Because of this, sendState is typically the most invoked function. Any state\ndata sent to Losant is stored and made available in data visualization tools\nand workflow triggers.\n\nstate\n    The state to send as a Dict.\n\ntime_like\n    When the state occurred - if None or not set, will default to now.\n\nExample\n.......\n\n::\n\n    device.send_state({ \"voltage\": read_analog_in() })\n\nloop\n`````\n\n::\n\n    loop(timeout=1)\n\nLoops the network stack for the connection.  Only valid to call when connected in non-blocking mode.\nBe sure to call this reasonably frequently when in that model to make sure the underlying\nMQTT connection does not get timed out.\n\ntimeout\n    Max time to block on the socket before continuing - defaults to 1 second.\n\nadd_event_observer\n``````````````````\n\n::\n\n    add_event_observer(event_name, observer)\n\nAdds an observer to listen for an event on this device.\n\nevent_name\n    The event to listen for.  Possible events are: \"connect\" (the device has connected),\n    \"reconnect\" (the device lost its connection and reconnected),\n    \"close\" (the device's connection was closed), and\n    \"command\" (the device has received a command from Losant).\n\nobserver\n    Callback method to call when the given event fires.  The first argument for all callbacks\n    will be the device instance.  Command callbacks have a second argument - the command\n    received.\n\n\nExample\n.......\n\n::\n\n    def on_command(device, cmd):\n        print(cmd[\"time\"]) # time of the command\n        print(cmd[\"name\"]) # name of the command\n        print(cmd[\"payload\"]) # payload of the command\n\n    device.add_event_observer(\"command\", on_command)\n\nremove_event_observer\n`````````````````````\n\n::\n\n    remove_event_observer(event_name, observer)\n\nRemoves an observer from listening for an event on this device.\n\nevent_name\n    The event to stop listening for.  Same events as `add_event_observer`_.\n\nobserver\n    Callback method to remove.\n\n\nCopyright (c) 2018 Losant IoT, Inc\n\nhttps://www.losant.com\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Losant/losant-mqtt-python",
    "keywords": "MQTT,Losant,IoT",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "losant-mqtt",
    "package_url": "https://pypi.org/project/losant-mqtt/",
    "platform": "",
    "project_url": "https://pypi.org/project/losant-mqtt/",
    "project_urls": {
      "Homepage": "https://github.com/Losant/losant-mqtt-python"
    },
    "release_url": "https://pypi.org/project/losant-mqtt/1.1.0/",
    "requires_dist": [
      "paho-mqtt (>=1.2,<2)"
    ],
    "requires_python": "",
    "summary": "An MQTT client for Losant",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5265313,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a8ed5f5e3c0077e49579bac1d631050750bc0ab214a3a09f241b38ae1fc184e",
        "md5": "d7cdd67c64a115104720571a4926f0bc",
        "sha256": "0c1e229a93b40ae965b464e5e9f612b6876620ba067100ec56a347e7de5ab612"
      },
      "downloads": -1,
      "filename": "losant_mqtt-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d7cdd67c64a115104720571a4926f0bc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12880,
      "upload_time": "2018-08-10T15:36:54",
      "upload_time_iso_8601": "2018-08-10T15:36:54.715563Z",
      "url": "https://files.pythonhosted.org/packages/0a/8e/d5f5e3c0077e49579bac1d631050750bc0ab214a3a09f241b38ae1fc184e/losant_mqtt-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c68eac719398e3ab5db4b1bba5e69615a9c9772528fdab107dadd8fb050f2c5",
        "md5": "1651753ac7647b512d43bab1a9f1322a",
        "sha256": "c493dfc613281a8bca15c2e7835c7b866e692d3a2bfe2d08403d590a1de59286"
      },
      "downloads": -1,
      "filename": "losant-mqtt-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1651753ac7647b512d43bab1a9f1322a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9188,
      "upload_time": "2018-08-10T15:36:56",
      "upload_time_iso_8601": "2018-08-10T15:36:56.197610Z",
      "url": "https://files.pythonhosted.org/packages/3c/68/eac719398e3ab5db4b1bba5e69615a9c9772528fdab107dadd8fb050f2c5/losant-mqtt-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}