{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-fluent-blogs\n===================\n\nThis is a basic blogging engine, with the following features:\n\n* Archive views by date, author, category and tags.\n* Contents filled by django-fluent-contents_\n* RSS and Atom feeds\n* Granularity in templates to override layouts.\n* Abstract base model for custom blog models.\n\nUsed applications:\n\n* Categories based on django-categories-i18n_ (or django-categories_).\n* *Optional* comments based on django.contrib.comments_\n* *Optional* multilingual support based on django-parler_.\n* *Optional* integration with django-taggit_ and django-taggit-autocomplete-modified_ for tag support\n* *Optional* integration with django-fluent-comments_ for Ajax-based comments\n* *Optional* integration with django-fluent-pages_\n* *Optional* integration with django.contrib.sitemaps_\n\nTODO:\n\n* Have integration with blog publication protocols (like django-blog-zinnia_ provides), built in a similar way like django.contrib.syndication_ works.\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment::\n\n    git clone https://github.com/edoburu/django-fluent-blogs.git\n    cd django-fluent-blogs\n    pip install .\n\n    # Install the plugins of fluent-contents that you use:\n    pip install django-fluent-contents[text]\n\n    # Optional: to add tagging support + autocomplete use:\n    pip install django-taggit django-taggit-autocomplete-modified\n\n\nConfiguration\n-------------\n\nAdd the applications to ``settings.py``::\n\n    INSTALLED_APPS += (\n        # Blog engine\n        'fluent_blogs',\n\n        # The content plugins\n        'fluent_contents',\n        'fluent_contents.plugins.text',\n\n        # Support libs\n        'categories_i18n',\n        'django_wysiwyg',\n        'slug_preview',\n\n        # Optional commenting support\n        'django.contrib.comments',\n\n        # Optional tagging\n        'taggit',\n        'taggit_autocomplete_modified',\n    )\n\n    DJANGO_WYSIWYG_FLAVOR = \"yui_advanced\"\n\nNote that not all applications are required;\ntagging is optional, and so are the various ``fluent_contents.plugin.*`` packages.\n\nInclude the apps in ``urls.py``::\n\n    urlpatterns += patterns('',\n        url(r'^admin/util/taggit_autocomplete_modified/', include('taggit_autocomplete_modified.urls')),\n        url(r'^blog/comments/', include('django.contrib.comments.urls')),\n        url(r'^blog/', include('fluent_blogs.urls')),\n    )\n\nThe database can be created afterwards::\n\n    ./manage.py syncdb\n\nIn case additional plugins of django-fluent-contents_ are used, follow their\n`installation instructions <http://django-fluent-contents.readthedocs.org/en/latest/plugins/index.html>`_ as well.\nTypically this includes:\n\n* adding the package name to ``INSTALLED_APPS``.\n* running ``pip install django-fluent-contents[pluginname]``\n* running  ``./manage.py syncdb``\n\n\nConfiguring the templates\n-------------------------\n\nTo display the blog contents, a ``fluent_blogs/base.html`` file needs to be created.\nThis will be used to map the output of the module to your site templates.\n\nThe base template needs to have the blocks:\n\n* ``content`` - displays the main content\n* ``title`` - the ``<head>`` title fragment.\n* ``link`` - displays ``<link>`` tags for RSS feeds.\n* ``script`` - includes additional ``<script>`` tags.\n* ``meta-description`` - the ``value`` of the meta-description tag.\n* ``meta-keywords`` - the ``value`` for the meta-keywords tag.\n* ``og-type`` - the OpenGraph type for Facebook (optional)\n* ``og-description`` the OpenGraph description for Facebook (optional)\n\nThe ``fluent_blogs/base.html`` template could simply remap the block names to the site's ``base.html`` template.\nFor example::\n\n    {% extends \"base.html\" %}\n\n    {% block headtitle %}{% block title %}{% endblock %}{% endblock %}\n\n    {% block main %}\n        {# This area is filled with the blog archive/details:\n        {% block content %}{% endblock %}\n\n        {# Add any common layout, e.g. a sidebar here #}\n    {% endblock %}\n\nWhen all other block names are already available in the site's ``base.html`` template,\nthis example should be sufficient.\n\nThe filename of the base template can also be changed by defining the  ``FLUENT_BLOGS_BASE_TEMPLATE`` setting.\n\nComments\n~~~~~~~~\n\nThe commenting support can be based on django.contrib.comments_, or any other system of your choice.\nTo integrate django.contrib.comments_ with your site theme, also create a ``comments/base.html`` template that maps the blocks:\n\n* ``title``\n* ``content``\n* ``extrahead`` (only for django-fluent-comments_)\n\n\nAdding pages to the sitemap\n---------------------------\n\nOptionally, the blog pages can be included in the sitemap.\nAdd the following in ``urls.py``::\n\n    from fluent_blogs.sitemaps import EntrySitemap, CategoryArchiveSitemap, AuthorArchiveSitemap, TagArchiveSitemap\n\n    sitemaps = {\n        'blog_entries': EntrySitemap,\n        'blog_categories': CategoryArchiveSitemap,\n        'blog_authors': AuthorArchiveSitemap,\n        'blog_tags': TagArchiveSitemap,\n    }\n\n    urlpatterns += patterns('',\n        url(r'^sitemap.xml$', 'django.contrib.sitemaps.views.sitemap', {'sitemaps': sitemaps}),\n    )\n\n\nIntegration with django-fluent-pages:\n-------------------------------------\n\nTo integrate with the page types of django-fluent-pages_, don't include ``fluent_blogs.urls`` in the URLconf::\n\n    urlpatterns += patterns('',\n        url(r'^admin/util/taggit_autocomplete_modified/', include('taggit_autocomplete_modified.urls')),\n        url(r'^blog/comments/', include('django.contrib.comments.urls')),   # or fluent_comments.urls\n    )\n\nInstead, add a page type instead::\n\n    INSTALLED_APPS += (\n        'fluent_pages',\n        'fluent_blogs.pagetypes.blogpage',\n    )\n\nA \"Blog\" page can now be created in the page tree of django-fluent-pages_\nat the desired URL path.\n\n\nIntegration with django-fluent-comments:\n----------------------------------------\n\nTo use Ajax-based commenting features of django-fluent-comments_, include it in ``settings.py``::\n\n    INSTALLED_APPS += (\n        'fluent_blogs',\n        'fluent_comments',      # Before django.contrib.comments\n        'django.contrib.comments',\n\n        ...\n    )\n\nInclude the proper module in ``urls.py``::\n\n    urlpatterns += patterns('',\n        url(r'^blog/comments/', include('fluent_comments.urls')),\n\n        ...\n    )\n\nThis module will detect the installation, and enable the moderation features and include\nthe required CSS and JavaScript files to have a Ajax-based commenting system.\n\n\nIntegration with other commenting systems\n-----------------------------------------\n\nTo use a different commenting system instead of django.contrib.comments_ (e.g. DISQUS_ or Facebook-comments_), override the following templates:\n\n* ``fluent_blogs/entry_detail/comments.html``\n\nThese CSS/JavaScript includes are generated using:\n\n* ``fluent_blogs/entry_detail/comments_css.html``\n* ``fluent_blogs/entry_detail/comments_script.html``\n\n\nOverriding the blog layout\n--------------------------\n\nTo change the layout of the blog , the following templates can be overwritten:\n\nIn the archive/list page:\n\n* ``fluent_blogs/entry_archive.html`` - the starting point, which includes all sub templates:\n* ``fluent_blogs/entry_archive/item.html`` - a single list item (extends ``fluent_blogs/entry_contents_base.html``).\n* ``fluent_blogs/entry_archive/empty.html`` - the default message when there are no entries.\n* ``fluent_blogs/entry_archive/pagination.html`` - the pagination at the bottom of the page.\n\nIn the detail page:\n\n* ``fluent_blogs/entry_detail.html`` - the starting point, which includes all sub templates:\n* ``fluent_blogs/entry_detail/contents.html`` - the entry contents (extends ``fluent_blogs/entry_contents_base.html``).\n* ``fluent_blogs/entry_detail/widgets.html`` - space to add Social Media buttons.\n* ``fluent_blogs/entry_detail/comments.html`` - the comments.\n* ``fluent_blogs/entry_detail/navigation.html`` - the entry navigation links\n* ``fluent_blogs/entry_detail/page_footer.html`` - space below the comments to add Social Media buttons.\n* ``fluent_blogs/entry_detail/comments_css.html``\n* ``fluent_blogs/entry_detail/comments_script.html``\n\nCommon appearance:\n\n* ``fluent_blogs/entry_contents_base.html`` - the common appearance of entries in the archive and detail page.\n* ``fluent_blogs/base.html`` - the base template, e.g. to introduce a common sidebar.\n\n\nShared entry layout\n~~~~~~~~~~~~~~~~~~~\n\nWhen the layout of individual entries is shared with\n\n* By default, the contents ``fluent_blogs/entry_archive/item.html`` and , based on ``fluent_blogs/entry_archive/item.html`` by default\n\n\nCustom entry models\n-------------------\n\nThis applications supports the use of custom models for the blog entries.\nInclude the following setting in your project::\n\n    FLUENT_BLOGS_ENTRY_MODEL = 'myapp.ModelName'\n\nThis application will use the custom model for feeds, views and the sitemap.\nThe model can either inherit from the following classes:\n\n* ``fluent_blogs.models.Entry`` (the default entry)\n* ``fluent_blogs.base_models.AbstractEntry`` (the default entry, as abstract model)\n* A mix of ``fluent_blogs.base_models.AbstractEntryBase`` combined with:\n\n * ``fluent_blogs.base_models.ExcerptEntryMixin``\n * ``fluent_blogs.base_models.ContentsEntryMixin``\n * ``fluent_blogs.base_models.CommentsEntryMixin``\n * ``fluent_blogs.base_models.CategoriesEntryMixin``\n * ``fluent_blogs.base_models.TagsEntryMixin``\n\nWhen a custom model is used, the admin needs to be registered manually.\nThe admin can inherit from either:\n\n* ``fluent_blogs.admin.AbstractEntryBaseAdmin``\n* ``fluent_blogs.admin.EntryAdmin``\n\nThe views are still rendered using the same templates, but you can also override:\n\n* ``myapp/modelname_archive_*.html``\n* ``myapp/modelname_detail.html``\n* ``myapp/modelname_feed_description.html``\n\n\nContributing\n------------\n\nThis module is designed to be generic, and easy to plug into your site.\nIn case there is anything you didn't like about it, or think it's not\nflexible enough, please let us know. We'd love to improve it!\n\nIf you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)\n\n\n\n.. _DISQUS: http://disqus.com/\n.. _django-blog-zinnia: http://django-blog-zinnia.com/documentation/\n.. _django.contrib.syndication: https://docs.djangoproject.com/en/dev/ref/contrib/syndication/\n.. _django.contrib.comments: https://docs.djangoproject.com/en/dev/ref/contrib/comments/\n.. _django.contrib.sitemaps: https://docs.djangoproject.com/en/dev/ref/contrib/sitemaps/\n.. _django-categories: https://github.com/callowayproject/django-categories\n.. _django-categories-i18n: https://github.com/edoburu/django-categories-i18n\n.. _django-fluent-comments: https://github.com/edoburu/django-fluent-comments\n.. _django-fluent-contents: https://github.com/edoburu/django-fluent-contents\n.. _django-fluent-pages: https://github.com/edoburu/django-fluent-pages\n.. _django-parler: https://github.com/edoburu/django-parler\n.. _django-polymorphic: https://github.com/bconstantin/django_polymorphic\n.. _django-taggit: https://github.com/alex/django-taggit\n.. _django-taggit-autocomplete-modified: http://packages.python.org/django-taggit-autocomplete-modified/\n.. _Facebook-comments: https://developers.facebook.com/docs/reference/plugins/comments/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-fluent-blogs/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-fluent-blogs",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fluent-blogs",
    "package_url": "https://pypi.org/project/django-fluent-blogs/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-fluent-blogs/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-fluent-blogs/zipball/master",
      "Homepage": "https://github.com/edoburu/django-fluent-blogs"
    },
    "release_url": "https://pypi.org/project/django-fluent-blogs/1.2.3/",
    "requires_dist": [
      "django-categories-i18n (>=1.0)",
      "django-fluent-contents (>=1.0)",
      "django-fluent-utils (>=1.2.3)",
      "django-parler (>=1.6)",
      "django-slug-preview (>=1.0.1)",
      "django-tag-parser (>=2.1)",
      "django-fluent-pages (>=0.9); extra == 'blogpage'",
      "taggit; extra == 'taggit'",
      "taggit-autosuggest; extra == 'taggit'"
    ],
    "requires_python": "",
    "summary": "A blog engine with flexible block contents (based on django-fluent-contents).",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12520228,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40ed6ea86497b273f8b3231ae931edb2778687fca90a2dcec8f30890e51d5a04",
        "md5": "33f05f2c01b682d7921036fdfbfa5bc4",
        "sha256": "fdf9afb2da7174367eafc7ce80f7884455f9a9be0109ce234dc7301ea2360ff7"
      },
      "downloads": -1,
      "filename": "django_fluent_blogs-1.2.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "33f05f2c01b682d7921036fdfbfa5bc4",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 107192,
      "upload_time": "2016-06-19T10:44:23",
      "upload_time_iso_8601": "2016-06-19T10:44:23.760564Z",
      "url": "https://files.pythonhosted.org/packages/40/ed/6ea86497b273f8b3231ae931edb2778687fca90a2dcec8f30890e51d5a04/django_fluent_blogs-1.2.3-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b132c9c279b1324604d1e7f10a2068b55a752085fb8b7d7844fe2179650fef9",
        "md5": "df1806488fdac17505398ede06975df3",
        "sha256": "7c59e56a3637f177edf14e149e42c2aeedbb10fda52573b368b38f2ed8698f4d"
      },
      "downloads": -1,
      "filename": "django-fluent-blogs-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "df1806488fdac17505398ede06975df3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 65579,
      "upload_time": "2016-06-19T10:44:28",
      "upload_time_iso_8601": "2016-06-19T10:44:28.229374Z",
      "url": "https://files.pythonhosted.org/packages/4b/13/2c9c279b1324604d1e7f10a2068b55a752085fb8b7d7844fe2179650fef9/django-fluent-blogs-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}