{
  "info": {
    "author": "Alexandre Vicenzi",
    "author_email": "vicenzi.alexandre@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-pjax |Build Status| |Version|\n====================================\n\nAn improvement of\n`Django-PJAX <https://github.com/jacobian-archive/django-pjax>`__: The\nDjango helper for jQuery-PJAX.\n\nWhat’s PJAX?\n------------\n\nPJAX is essentially\n`AHAH <http://www.xfront.com/microformats/AHAH.html>`__ (\"Asynchronous\nHTML and HTTP\"), except with real permalinks and a working back button.\nIt lets you load just a portion of a page (so things are faster) while\nstill maintaining the usability of real links.\n\nA demo makes more sense, so `check out the one defunkt put\ntogether <http://pjax.heroku.com/>`__.\n\nCredits\n-------\n\nThis project is an extension of\n`Django-PJAX <https://github.com/jacobian-archive/django-pjax>`__ and\nall credits from the original version goes to `Jacob\nKaplan-Moss <http://jacobian.org/>`__.\n\nAbout\n-----\n\nThis project keeps the original structure, but add new features to it,\nand aims to keep django-pjax updated. Some goals are to keep this\nproject working with Python 2.7+ and 3.3+ and also Django 1.5+.\n\nFeel free to submit a PR and contribute to this project.\n\nCompatibility\n-------------\n\n-  Python 2.6+ or 3.2+\n-  PyPy or PyPy3\n-  CPython\n-  Django 1.3+\n\nNot all Django versions works with Python, PyPy or CPython. See the\nDjango docs to know more about supported versions.\n\nInstall\n-------\n\nJust run:\n\n``pip install django-pjax``\n\nUsage\n-----\n\nFirst, read about `how to use\njQuery-PJAX <https://github.com/defunkt/jquery-pjax>`__ and pick one of\nthe techniques there.\n\nNext, make sure the views you’re PJAXing are using\n`TemplateResponse <http://django.me/TemplateResponse>`__. You can’t use\nDjango-PJAX with a normal ``HttpResponse``; only ``TemplateResponse``.\n\nDecorate these views with the ``pjax`` decorator:\n\n.. code:: python\n\n    from djpjax import pjax\n\n    @pjax()\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nAfter doing this, if the request is made via jQuery-PJAX, the\n``@pjax()`` decorator will automatically swap out ``template.html`` for\n``template-pjax.html``.\n\nMore formally: if the request is a PJAX request, the template used in\nyour ``TemplateResponse`` will be replaced with one with ``-pjax``\nbefore the file extension. So ``template.html`` becomes\n``template-pjax.html``, ``my.template.xml`` becomes\n``my.template-pjax.xml``, etc. If there’s no file extension, the\ntemplate name will just be suffixed with ``-pjax``.\n\nYou can also manually pick a PJAX template by passing it as an argument\nto the decorator:\n\n.. code:: python\n\n    from djpjax import pjax\n\n    @pjax(\"pjax.html\")\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nYou can also pick a PJAX template for a PJAX container and use multiple\ndecorators to define the template for multiple containers:\n\n.. code:: python\n\n    from djpjax import pjax\n\n    @pjax(\"pjax.html\") # This is the default template.\n    @pjax(\"pjax_inner.html\", \"#pjax-inner-content\") # This is the template for #pjax-inner-content.\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nIf you’d like to use Django 1.3’s class-based views instead, a PJAX\nMixin class is provided as well. Simply use ``PJAXResponseMixin`` where\nyou would normally have used ``TemplateResponseMixin``, and your\n``template_name`` will be treated the same way as above.\n\nYou can alternately provide a ``pjax_template_name`` class variable if\nyou want a specific template used for PJAX responses:\n\n.. code:: python\n\n    from django.views.generic import View\n    from djpjax import PJAXResponseMixin\n\n    class MyView(PJAXResponseMixin, View):\n        template_name = \"template.html\"\n        pjax_template_name = \"pjax.html\"\n\n        def get(self, request):\n            return self.render_to_response({'my': 'context'})\n\nThat’s it!\n\nUsing Template Extensions\n-------------------------\n\nIf the content in your ``template-pjax.html`` file is very similar to\nyour ``template.html`` an alternative method of operation is to use the\ndecorator ``pjaxtend``, as follows:\n\n.. code:: python\n\n    from djpjax import pjaxtend\n\n    @pjaxtend\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nThen, in your ``template.html`` file you can do the following:\n\n::\n\n    {% extends parent %}\n    ...\n    ...\n\nNote that the template will extend ``base.html`` unless its a pjax\nrequest in which case it will extend ``pjax.html``.\n\nIf you want to define the parent for a standard http or pjax request,\nyou can do so as follows:\n\n.. code:: python\n\n    from djpjax import pjaxtend\n\n    @pjaxtend('someapp/base.html', 'my-pjax-extension.html')\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nUsing this approach you don’t need to create many ``*-pjax.html`` files.\n\nIf you have a collision with the variable name ``parent`` you can\nspecify the context variable to use as the third parameter to pjaxtexd,\nas follows:\n\n.. code:: python\n\n    from djpjax import pjaxtend\n\n    @pjaxtend('someapp/base.html', 'my-pjax-extension.html', 'my_parent')\n    def my_view(request):\n        return TemplateResponse(request, \"template.html\", {'my': 'context'})\n\nWhich would require the following in your template:\n\n::\n\n    {% extends my\\_parent %}\n    ...\n    ...\n\nTesting\n-------\n\nInstall dependencies:\n\n``pip install -r requirements.txt``\n\nRun the tests:\n\n``python tests.py``\n\n.. |Build Status| image:: https://travis-ci.org/eventials/django-pjax.svg?branch=master\n   :target: https://travis-ci.org/eventials/django-pjax\n.. |Version| image:: https://img.shields.io/pypi/v/django-pjax.svg\n   :target: https://pypi.python.org/pypi/django-pjax",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eventials/django-pjax",
    "keywords": "django,PJAX,ajax,jQuery",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pjax",
    "package_url": "https://pypi.org/project/django-pjax/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pjax/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/eventials/django-pjax"
    },
    "release_url": "https://pypi.org/project/django-pjax/1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django-PJAX: The Django helper for jQuery-PJAX.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7745631,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf5fda0b18c02044c53099e115453052ac93918f111363ad49065dee5d4c6de",
        "md5": "4bf049203314b9303bc38f38b0176701",
        "sha256": "37a7451b2d04ff6d44538048d11ab02fb411fa26ffe91b5808bb7358a72c8562"
      },
      "downloads": -1,
      "filename": "django-pjax-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4bf049203314b9303bc38f38b0176701",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4664,
      "upload_time": "2015-07-06T18:21:29",
      "upload_time_iso_8601": "2015-07-06T18:21:29.855873Z",
      "url": "https://files.pythonhosted.org/packages/ed/f5/fda0b18c02044c53099e115453052ac93918f111363ad49065dee5d4c6de/django-pjax-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}