{
  "info": {
    "author": "Luna Chen",
    "author_email": "luna@bnmetrics.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================================\nLogme - Python Logging Made Easy\n================================\n\n.. image:: https://travis-ci.org/BNMetrics/logme.svg?branch=master\n    :target: https://travis-ci.org/BNMetrics/logme\n\n\n\nLogme is a Python package that makes logging simple and robost. If you have found\nlogging in Python not so straight forward, download this package and give it a try! :)\n\n\nIn A Nutshell\n-------------\n\nIf you have a function you want to log, you can do this in your python file:\n\n.. code-block:: python\n\n    import logme\n\n\n    @logme.log\n    def my_awesome_function(my_arg, logger=None):\n        logger.info('this is my log message')\n        \"\"\"rest of the function\"\"\"\n\n\nYou can do the same with classes too:\n\n.. code-block:: python\n\n    import logme\n\n\n    @logme.log\n    class MyAwesomeClass:\n        def my_function(self, my_arg):\n            self.logger.info('this is my log message')\n\n\n\npretty nice right? :)\n\nInstallation\n------------\n\nTo install logme:\n\n.. code-block:: bash\n\n    $ pip3 install logme\n\n\nSpecifications\n--------------\n\nGetting Started\n~~~~~~~~~~~~~~~\nTo get logme started, you will need to cd into your project root and type:\n\n.. code-block:: bash\n\n    $ logme init\n\nThen you will see a configuration file 'logme.ini', it looks like this:\n\n.. code-block:: ini\n\n    [logme]\n    level = DEBUG\n    formatter = {asctime} - {name} - {levelname} - {message}\n    StreamHandler =\n        active: True\n        level: DEBUG\n    FileHandler =\n        active: True\n        level: DEBUG\n        filename: None\n    NullHandler =\n        active: False\n        level: NOTSET\n\nAnd this is where you configure your loggers, and each block of configuration are independent,\nyou can have as many of them as you like.\n\n**level** and **formatter** are at the master level handler configurations. This means if the level and formatter on\neach handler are not specified, the handlers will use the master level ones. To customize each handler,\nsimple edit the logme.ini file.\n\n\nTo add a config, do this:\n\n.. code-block:: bash\n\n    $ logme add my_configuration_here\n\n\nUsing Logger in Your Project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n*logme.log()* can accepts 3 optional arguments for customize your logger:\n    * scope: the scope of your logger: *class*, *function* or *module*. You can omit this parameter for class and\n      function. **this is required for module level logger**\n    * config: the name of logging config specified in logme.ini, default would be the *logme* config\n    * name: the name of the logger, default would be the __name__ of the file where you are calling logme.ini\n\n\n**logging for functions and methods**\nFor functions, you can simple just decorate the function/method in which you want to use the logger, like so:\n\n.. code-block:: python\n\n    @logme.log(config='my_custom_conf', name='custom_test_logger')\n    def dummy_function_custom(name, logger=None):\n        logger.info('test function logger with custom params')\n\n        return logger, name\n\n\n*Be sure to pass in the \"logger\" as a keyword argument, and you can assign it to None when defining the function*\n\n\n**logging for classes**\nFor classes, you can also use the decorator, and an attribute *self.logger* will be available.\n\n.. code-block:: python\n\n    @logme.log\n    class MyAwesomeClass:\n        def my_function(self, my_arg):\n            self.logger.info('this is my log message')\n\n\n\n**logging for modules**\nLogging modules is slightly different from classes and functions, but it's just as straight forward.\n*and remember, scope keyword argument must be passed in*\n\n.. code-block:: python\n\n    module_logger = logme.log(scope='module', name='my_module_logger')\n\n\nAdvanced Usage - Delegation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAssuming you are making a distributed package, and you still want to include logging,\nbut you want to give the user the freedom to configure the logger. Follow these steps:\n\n1. Have only the NullHandler active in your project root logme.ini file.\n2. In your __init__.py file, make a module logger, like so:\n\n.. code-block:: python\n\n    logger = logme.log(scope='module')\n\n3. Import this logger throughout your project.\n4. When user need to see the logging messages, they can then import the logger and change the configuration.\n\n.. code-block:: python\n\n    from your_project import logger\n\n    # assuming if the importer also has logme installed and initialized\n    logger.reset_configuration(config_name='my_own_logger')\n\n    # if not, a configuration dictionary can also be passed in this format:\n    config = {\n                \"level\": \"DEBUG\",\n                \"format\": \"{levelname}: {message}\",\n                \"StreamHandler\": {\n                    \"level\": \"DEBUG\",\n                },\n                \"FileHandler\": {\n                    \"level\": \"DEBUG\",\n                    \"filename\": \"/var/log/mylog.log\",\n                },\n            }\n\n    }\n    logger.reset_configuration(config=config)\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BNMetrics/logme",
    "keywords": "logging,cli",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logme",
    "package_url": "https://pypi.org/project/logme/",
    "platform": "",
    "project_url": "https://pypi.org/project/logme/",
    "project_urls": {
      "Homepage": "https://github.com/BNMetrics/logme"
    },
    "release_url": "https://pypi.org/project/logme/1.0.0/",
    "requires_dist": [
      "click"
    ],
    "requires_python": ">=3",
    "summary": "package for easy logging",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4399834,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6007f82704aaea58e1957e2d88c872315531f7e3f547673a6d01f79d5a96f7f2",
        "md5": "b6a0712808400b5f937e5cd793feb7b7",
        "sha256": "45dc106c2780b547463ca5bb38f46b13605fa5189131998c4d2a3b4bab1de3a6"
      },
      "downloads": -1,
      "filename": "logme-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b6a0712808400b5f937e5cd793feb7b7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3",
      "size": 14701,
      "upload_time": "2018-02-21T22:00:52",
      "upload_time_iso_8601": "2018-02-21T22:00:52.628146Z",
      "url": "https://files.pythonhosted.org/packages/60/07/f82704aaea58e1957e2d88c872315531f7e3f547673a6d01f79d5a96f7f2/logme-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b7f8cf2ad58368554ed4fc8ad9683899cc7ed1471e5a25a56666aa1dd729305",
        "md5": "caf913182ac95dc54e0883a6398ec9b7",
        "sha256": "ea1cd896b0d4474dfc902228127c62a7ce23f8646e0529ce77bbf3622da0743b"
      },
      "downloads": -1,
      "filename": "logme-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "caf913182ac95dc54e0883a6398ec9b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 10433,
      "upload_time": "2018-02-21T22:02:19",
      "upload_time_iso_8601": "2018-02-21T22:02:19.268980Z",
      "url": "https://files.pythonhosted.org/packages/5b/7f/8cf2ad58368554ed4fc8ad9683899cc7ed1471e5a25a56666aa1dd729305/logme-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}