{
  "info": {
    "author": "Tobias Hommel",
    "author_email": "software@genoetigt.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "logex\n        =====\n        \n        .. contents::\n        \n        Logex is a python module to easily add logging for unhandled exceptions in\n        D-Bus, thread and other functions.\n        It can also be quite helpful when developing with the new asyncio module of\n        python 3.4. Although this module does some sort of exception logging, it can\n        easily happen that exceptions are accidentally swallowed.\n        Although unhandled exceptions get written to STDERR by default and most modules\n        provide some mechanism to log these, this is not always sufficient, e.g. when\n        inside a daemon which discards all default output.\n        Sometimes it may also be desirable to automatically send an email if some\n        exception occurs or at least write some kind of audit log.\n        \n        This modlue comes with a decorator function which can be applied on demand. It\n        provides advanced debugging information which gives you the most relevant\n        information for each frame in the exception's traceback.\n        \n        ========\n        Settings\n        ========\n        \n        A description of all available settings is available in the source\n        documentation of the `log()` function in the `logex.py <logex.py>`_ module.\n        \n        All settings can be set \"globally\", e.g. by using:\n        \n        .. code:: python\n        \n            import logex\n            logex.VIEW_SOURCE = True\n        \n        or they can be specified when decorating a function or method:\n        \n        .. code:: python\n        \n            import logex\n            @logex.log(view_source=True)\n            def f():\n                pass\n        \n        Currently available module variables and their defaults:\n        \n        - ``LOGFUNCTION = logging.error``\n        - ``TEMPLATE = ('Unhandled exception calling %(funcname)s(%(argsview)s):\\n%(traceback)s\\n%(sourceview)s')``\n        - ``ADVANCED = False``\n        - ``LAZY = False``\n        - ``RERAISE = True``\n        - ``CATCHALL = False``\n        - ``VIEW_SOURCE = False``\n        - ``DETECT_NESTED = True``\n        \n        The default behaviour of the log() decorator is to generate a log message using\n        ``TEMPLATE`` and pass this to ``LOGFUNCTION``.\n        For a list of place holders that are replaced, see the `generate_log_message()`\n        function in `logex.py <logex.py>`_.\n        \n        Setting ``ADVANCED`` to True, gives you the opportunity to use a logging function\n        which interprets the exception data itself. For a description of the arguments\n        to an advanced logging function, see the `generate_log_message()` function in\n        `logex.py <logex.py>`_.\n        \n        If ``LAZY`` is True, the logging function itself must return another function\n        object which is then used as the actual logging function.\n        \n        ``RERAISE`` can be set to False to only log the exception and continue \"normally\".\n        This will, of course, not resume the decorated function itself, but return to\n        the caller of this function and resume execution there.\n        \n        If ``CATCHALL`` is True, all exceptions are caught, i.e. also KeyboardInterrupt,\n        SystemExit and GeneratorExit.\n        \n        ``VIEW_SOURCE`` can be used to show the source code and local variables for every\n        function in the exceptions traceback.\n        \n        logex will usually detect if an exception occurs in a logex-decorated function\n        which, in turn, was called by a logex-decorated function and shorten the output\n        so you do not get the same source view twice. ``DETECT_NESTED`` can be used to\n        disable this feature and always print the full source view.\n        \n        =======\n        Example\n        =======\n        Several examples can be found in the ``examples`` directory, so we show just some\n        simple usage here:\n        \n        .. code:: python\n        \n            #!/usr/bin/python\n            import logex\n        \n            @logex.log\n            def my_function():\n                raise Exception(\"something bad happens here\")\n        \n            my_function()\n        \n        This will simply print the exception traceback, like this:\n        \n        .. code:: python\n        \n            ERROR:root:Unhandled exception calling my_function():\n            Traceback (most recent call last):\n              File \"./x.py\", line 10, in my_function\n                do_something_dangerous()\n              File \"./x.py\", line 5, in do_something_dangerous\n                raise Exception(\"something bad happens here\")\n            Exception: something bad happens here\n            \n            \n            Traceback (most recent call last):\n              File \"./x.py\", line 13, in <module>\n                my_function()\n              File \"/home/tobi/repos/logex/logex.py\", line 318, in wrapper_f\n                template, view_source, reraise, wrapper_code=wrapper_code)\n              File \"/home/tobi/repos/logex/logex.py\", line 306, in wrapper_f\n                wrapped_f(*args, **kwargs)\n              File \"./x.py\", line 10, in my_function\n                do_something_dangerous()\n              File \"./x.py\", line 5, in do_something_dangerous\n                raise Exception(\"something bad happens here\")\n            Exception: something bad happens here\n        \n        The second traceback is the one generated because an unhandled exception\n        occurs(logex reraises exceptions by default), it also contains some extra\n        frames generated by the logex decorator.\n        Let's make it a bit more advanced and pleasant to read:\n        \n        .. code:: python\n        \n            #!/usr/bin/python\n            import logex\n        \n            @logex.log(view_source=True, reraise=False)\n            def my_function():\n                x = 1\n                raise Exception(\"something bad happens here\")\n        \n            my_function()\n        \n        This yields:\n        \n        .. code:: python\n        \n            ERROR:root:Unhandled exception calling my_function():\n            Traceback (most recent call last):\n              File \"./x.py\", line 10, in my_function\n                do_something_dangerous()\n              File \"./x.py\", line 5, in do_something_dangerous\n                raise Exception(\"something bad happens here\")\n            Exception: something bad happens here\n            \n            ========== sourcecode ==========\n            -------------------------\n            -- ./x.py: my_function --\n            -------------------------\n                7   @logex.log(view_source=True, reraise=False)\n                8   def my_function():\n                9           x = 1\n               10-->        do_something_dangerous()\n            ...\n            \n            Locals when executing line 10:\n            * x: 1\n            \n            ------------------------------------\n            -- ./x.py: do_something_dangerous --\n            ------------------------------------\n                4   def do_something_dangerous():\n                5-->        raise Exception(\"something bad happens here\")\n            \n            ================================\n        \n        We have several differences here:\n        \n        - the exception is not reraised, this is probably not always desired, but makes\n          some nicer output here ;)\n        - a view of the sourcecode for each function in the traceback\n        - a list of the current values for local variables, if present",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/insecure/logex",
    "keywords": "debug log unhandled exception thread dbus D-Bus",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "logex",
    "package_url": "https://pypi.org/project/logex/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/logex/",
    "project_urls": {
      "Homepage": "https://github.com/insecure/logex"
    },
    "release_url": "https://pypi.org/project/logex/2.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Easily log uncaught exceptions in D-Bus, thread and other functions.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1530155,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b77b089aa16d7725dcc9e2dea3270d6b1c7d5a653ca48f10084fb2089f1e76",
        "md5": "d4ca1ef7268ecba235ba842dd3dfa6eb",
        "sha256": "bd9ef7062cf906cd1ef8435b1949dd1c71b584c7cf1013dd9960b0b83f2545cd"
      },
      "downloads": -1,
      "filename": "logex-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d4ca1ef7268ecba235ba842dd3dfa6eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12267,
      "upload_time": "2014-12-14T21:01:19",
      "upload_time_iso_8601": "2014-12-14T21:01:19.012717Z",
      "url": "https://files.pythonhosted.org/packages/62/b7/7b089aa16d7725dcc9e2dea3270d6b1c7d5a653ca48f10084fb2089f1e76/logex-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}