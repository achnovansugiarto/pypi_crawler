{
  "info": {
    "author": "Moesif, Inc",
    "author_email": "xing@moesif.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Moesif Middleware for Python WSGI based Frameworks\n\n[WSGI (Web Server Gateway Interface)](https://wsgi.readthedocs.io/en/latest/)\nis a standard (PEP 3333) that describes\nhow a web server communicates with web applications. Many Python Frameworks\nare build on top of WSGI, such as [Flask](http://flask.pocoo.org/),\n[Bottle](https://bottlepy.org/docs/dev/), [Pyramid](https://trypyramid.com/) etc.\nMoesif WSGI Middleware help APIs that are build on top of these Frameworks to\neasily integrate with [Moesif](https://www.moesif.com).\n\n## How to install\n\n```shell\npip install moesifwsgi\n```\n\n## How to use\n\n### Flask\n\nWrap your wsgi_app with the Moesif middleware.\n\n```python\nfrom moesifwsgi import MoesifMiddleware\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your application id'\n}\n\napp.wsgi_app = MoesifMiddleware(app.wsgi_app, moesif_settings)\n\n```\n\nYou can find your Application Id from [_Moesif Dashboard_](https://www.moesif.com/) -> _Top Right Menu_ -> _App Setup_\n\n### Bottle\nWrap your bottle app with the Moesif middleware.\n\n```python\n\nfrom moesifwsgi import MoesifMiddleware\n\napp = bottle.Bottle()\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your application id',\n}\n\nbottle.run(app=MoesifMiddleware(app, moesif_settings))\n\n```\n\n### Pyramid\n\n\n```python\nfrom pyramid.config import Configurator\nfrom moesifwsgi import MoesifMiddleware\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('hello', '/')\n    config.scan()\n    app = config.make_wsgi_app()\n\n    # configure your moesif settings\n    moesif_settings = {\n        'APPLICATION_ID': 'Your application id',\n        'DEBUG': True\n        # ... other options see below.\n    }\n    # Put middleware\n    app = MoesifMiddleware(app, moesif_settings)\n\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n\n```\n### Other WSGI frameworks\n\nIf you are using a framework that is built on top of WSGI, it should work just by adding the Moesif middleware.\nPlease read the documentation for your specific framework on how to add middleware.\n\n## Configuration options\n\n#### __`APPLICATION_ID`__\n(__required__), _string_, is obtained via your Moesif Account, this is required.\n\n#### __`SKIP`__\n(optional) _(app, environ) => boolean_, a function that takes a wsgi app and an environ, and returns true if you want to skip this particular event.\n\n#### __`IDENTIFY_USER`__\n(optional, but highly recommended) _(request, response) => string_, a function that takes an app and an environ, and returns a string that is the user id used by your system. While Moesif tries to identify users automatically,\nbut different frameworks and your implementation might be very different, it would be helpful and much more accurate to provide this function.\n\n#### __`GET_SESSION_TOKEN`__\n(optional) _(request, response) => string_, a function that takes an app and an environ, and returns a string that is the session token for this event. Again, Moesif tries to get the session token automatically, but if you setup is very different from standard, this function will be very help for tying events together, and help you replay the events.\n\n#### __`MASK_EVENT_MODEL`__\n(optional) _(EventModel) => EventModel_, a function that takes an EventModel and returns an EventModel with desired data removed. Use this if you prefer to write your own mask function than use the string based filter options: REQUEST_BODY_MASKS, REQUEST_HEADER_MASKS, RESPONSE_BODY_MASKS, & RESPONSE_HEADER_MASKS. The return value must be a valid EventModel required by Moesif data ingestion API. For details regarding EventModel please see the [Moesif Python API Documentation](https://www.moesif.com/docs/api?python).\n\n#### __'DEBUG'__\n\n(optional) _boolean_, a flag to see debugging messages.\n\n### Example:\n\n```python\ndef identifyUser(app, environ):\n    # if your setup do not use the standard request.user.username\n    # return the user id here\n    return \"user_id_1\"\n\ndef should_skip(app, environ):\n    if \"healthprobe\" in environ.get('PATH_INFO', ''):\n        return True\n    else:\n        return False\n\ndef get_token(app, environ):\n    # if your setup do not use the standard Django method for\n    # setting session tokens. do it here.\n    return \"token\"\n\ndef mask_event(eventmodel):\n    # do something to remove sensitive fields\n    # be sure not to remove any required fields.\n    return eventmodel\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your application id',\n    'DEBUG': False,\n    'IDENTIFY_USER': identifyUser,\n    'GET_SESSION_TOKEN': get_token,\n    'SKIP': should_skip,\n    'MASK_EVENT_MODEL': mask_event,\n}\n\napp.wsgi_app = MoesifMiddleware(app.wsgi_app, moesif_settings)\n\n```\n\n\n## Other integrations\n\nTo view more more documentation on integration options, please visit __[the Integration Options Documentation](https://www.moesif.com/docs/getting-started/integration-options/).__\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.moesif.com/developer-documentation",
    "keywords": "log analysis restful api development debug wsgi flask bottle http middleware",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moesifwsgi",
    "package_url": "https://pypi.org/project/moesifwsgi/",
    "platform": "",
    "project_url": "https://pypi.org/project/moesifwsgi/",
    "project_urls": {
      "Homepage": "https://www.moesif.com/developer-documentation"
    },
    "release_url": "https://pypi.org/project/moesifwsgi/1.0.0/",
    "requires_dist": [
      "isodatetimehandler",
      "moesifapi",
      "requests",
      "nose; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Moesif Middleware for Python WSGI based flatforms (Flask, Bottle & Others)",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15394595,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "158a0f8f60fe27baa6291474c3496582da00da3c03f268ef115520659c0ff74e",
        "md5": "f1ae4ea78a68c0caa630b21db3d4df9d",
        "sha256": "ac95c0de2ae10ea9a0920b4372d201c64fe475037200e51e599a21fba34773c9"
      },
      "downloads": -1,
      "filename": "moesifwsgi-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1ae4ea78a68c0caa630b21db3d4df9d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10130,
      "upload_time": "2017-05-01T20:53:24",
      "upload_time_iso_8601": "2017-05-01T20:53:24.679156Z",
      "url": "https://files.pythonhosted.org/packages/15/8a/0f8f60fe27baa6291474c3496582da00da3c03f268ef115520659c0ff74e/moesifwsgi-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32468a8121aa3280815d1ccb6f409fd239e99ef036e9eb2e2c7d7110c01e4af9",
        "md5": "4ec9bca391f3f0eaccbd954b0cd60ef7",
        "sha256": "943f00dc9ab61fcf5afb1b3406f2a8946b09a03528010c4728b2a4146a06e837"
      },
      "downloads": -1,
      "filename": "moesifwsgi-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4ec9bca391f3f0eaccbd954b0cd60ef7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11625,
      "upload_time": "2017-05-01T20:53:25",
      "upload_time_iso_8601": "2017-05-01T20:53:25.662836Z",
      "url": "https://files.pythonhosted.org/packages/32/46/8a8121aa3280815d1ccb6f409fd239e99ef036e9eb2e2c7d7110c01e4af9/moesifwsgi-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}