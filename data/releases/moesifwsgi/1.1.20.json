{
  "info": {
    "author": "Moesif, Inc",
    "author_email": "xing@moesif.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Moesif Middleware for Python WSGI based Frameworks\n\n[![Built For][ico-built-for]][link-built-for]\n[![Latest Version][ico-version]][link-package]\n[![Language Versions][ico-language]][link-language]\n[![Software License][ico-license]][link-license]\n[![Source Code][ico-source]][link-source]\n\nWSGI middleware that logs _incoming_ or _outgoing_ API calls and sends to [Moesif](https://www.moesif.com) for API analytics and log analysis.\nSupports Python Frameworks built on WSGI such as Flask, Bottle, and Pyramid.\n\n[Source Code on GitHub](https://github.com/moesif/moesifwsgi)\n\n[WSGI (Web Server Gateway Interface)](https://wsgi.readthedocs.io/en/latest/)\nis a standard (PEP 3333) that describes\nhow a web server communicates with web applications. Many Python Frameworks\nare build on top of WSGI, such as [Flask](http://flask.pocoo.org/),\n[Bottle](https://bottlepy.org/docs/dev/), [Pyramid](https://trypyramid.com/) etc.\nMoesif WSGI Middleware help APIs that are build on top of these Frameworks to\neasily integrate with [Moesif](https://www.moesif.com).\n\n## How to install\n\n```shell\npip install moesifwsgi\n```\n\n## How to use\n\n### Flask\n\nWrap your wsgi_app with the Moesif middleware.\n\n```python\nfrom moesifwsgi import MoesifMiddleware\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your Moesif Application id',\n    'LOG_BODY': True,\n    # ... For other options see below.\n}\n\napp.wsgi_app = MoesifMiddleware(app.wsgi_app, moesif_settings)\n\n```\n\nYour Moesif Application Id can be found in the [_Moesif Portal_](https://www.moesif.com/).\nAfter signing up for a Moesif account, your Moesif Application Id will be displayed during the onboarding steps. \n\nYou can always find your Moesif Application Id at any time by logging \ninto the [_Moesif Portal_](https://www.moesif.com/), click on the top right menu,\nand then clicking _Installation_.\n\nFor an example with Flask, see example in the `/examples/flask` folder of this repo.\n\n### Bottle\nWrap your bottle app with the Moesif middleware.\n\n```python\n\nfrom moesifwsgi import MoesifMiddleware\n\napp = bottle.Bottle()\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your Moesif Application Id',\n    'LOG_BODY': True,\n    # ... For other options see below.\n}\n\nbottle.run(app=MoesifMiddleware(app, moesif_settings))\n\n```\n\nFor an example with Bottle, see example in the `/examples/bottle` folder of this repo.\n\n### Pyramid\n\n\n```python\nfrom pyramid.config import Configurator\nfrom moesifwsgi import MoesifMiddleware\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_route('hello', '/')\n    config.scan()\n    app = config.make_wsgi_app()\n\n    # configure your moesif settings\n    moesif_settings = {\n        'APPLICATION_ID': 'Your Moesif Application Id',\n        'LOG_BODY': True,\n        # ... For other options see below.\n    }\n    # Put middleware\n    app = MoesifMiddleware(app, moesif_settings)\n\n    server = make_server('0.0.0.0', 8080, app)\n    server.serve_forever()\n\n```\n### Other WSGI frameworks\n\nIf you are using a framework that is built on top of WSGI, it should work just by adding the Moesif middleware.\nPlease read the documentation for your specific framework on how to add middleware.\n\n## Configuration options\n\n#### __`APPLICATION_ID`__\n(__required__), _string_, is obtained via your Moesif Account, this is required.\n\n#### __`SKIP`__\n(optional) _(app, environ) => boolean_, a function that takes a WSGI app and an environ,\nand returns true if you want to skip this particular event. The app is the original WSGI app instance, and the\nenviron is a [WSGI environ](http://wsgi.readthedocs.io/en/latest/definitions.html).\n\n#### __`IDENTIFY_USER`__\n(optional, but highly recommended) _(app, environ) => string_, a function that takes an app and an environ, and returns a string that is the user id used by your system. While Moesif tries to identify users automatically,\nbut different frameworks and your implementation might be very different, it would be helpful and much more accurate to provide this function.\n\n#### __`IDENTIFY_COMPANY`__\n(optional) _(app, environ) => string_, a function that takes an app and an environ, and returns a string that is the company id for this event.\n\n#### __`GET_METADATA`__\n(optional) _(app, environ) => dictionary_, a function that takes an app and an environ, and\nreturns a dictionary (must be able to be encoded into JSON). This allows your\nto associate this event with custom metadata. For example, you may want to save a VM instance_id, a trace_id, or a tenant_id with the request.\n\n#### __`GET_SESSION_TOKEN`__\n(optional) _(app, environ) => string_, a function that takes an app and an environ, and returns a string that is the session token for this event. Again, Moesif tries to get the session token automatically, but if you setup is very different from standard, this function will be very help for tying events together, and help you replay the events.\n\n#### __`MASK_EVENT_MODEL`__\n(optional) _(EventModel) => EventModel_, a function that takes an EventModel and returns an EventModel with desired data removed. The return value must be a valid EventModel required by Moesif data ingestion API. For details regarding EventModel please see the [Moesif Python API Documentation](https://www.moesif.com/docs/api?python).\n\n#### __`DEBUG`__\n(optional) _boolean_, a flag to see debugging messages.\n\n#### __`LOG_BODY`__\n(optional) _boolean_, default True, Set to False to remove logging request and response body.\n\n#### __`CAPTURE_OUTGOING_REQUESTS`__\n_boolean_, Default False. Set to True to capture all outgoing API calls from your app to third parties like Stripe or to your own dependencies while using [Requests](http://docs.python-requests.org/en/master/) library. The options below is applied to outgoing API calls.\nWhen the request is outgoing, for options functions that take request and response as input arguments, the request and response objects passed in are [Requests](http://docs.python-requests.org/en/master/api/) request or response objects.\n\n##### __`SKIP_OUTGOING`__\n(optional) _(req, res) => boolean_, a function that takes a [Requests](http://docs.python-requests.org/en/master/api/) request and response,\nand returns true if you want to skip this particular event.\n\n##### __`IDENTIFY_USER_OUTGOING`__\n(optional, but highly recommended) _(req, res) => string_, a function that takes [Requests](http://docs.python-requests.org/en/master/api/) request and response, and returns a string that is the user id used by your system. While Moesif tries to identify users automatically,\nbut different frameworks and your implementation might be very different, it would be helpful and much more accurate to provide this function.\n\n##### __`IDENTIFY_COMPANY_OUTGOING`__\n(optional) _(req, res) => string_, a function that takes [Requests](http://docs.python-requests.org/en/master/api/) request and response, and returns a string that is the company id for this event.\n\n##### __`GET_METADATA_OUTGOING`__\n(optional) _(req, res) => dictionary_, a function that takes [Requests](http://docs.python-requests.org/en/master/api/) request and response, and\nreturns a dictionary (must be able to be encoded into JSON). This allows\nto associate this event with custom metadata. For example, you may want to save a VM instance_id, a trace_id, or a tenant_id with the request.\n\n##### __`GET_SESSION_TOKEN_OUTGOING`__\n(optional) _(req, res) => string_, a function that takes [Requests](http://docs.python-requests.org/en/master/api/) request and response, and returns a string that is the session token for this event. Again, Moesif tries to get the session token automatically, but if you setup is very different from standard, this function will be very help for tying events together, and help you replay the events.\n\n##### __`LOG_BODY_OUTGOING`__\n(optional) _boolean_, default True, Set to False to remove logging request and response body.\n\n### Example:\n\n```python\ndef identifyUser(app, environ):\n    # return the user id here\n    return \"user_id_1\"\n\ndef identifyCompany(app, environ):\n    # return the company id here\n    return \"12345\"\n\ndef should_skip(app, environ):\n    if \"healthprobe\" in environ.get('PATH_INFO', ''):\n        return True\n    else:\n        return False\n\ndef get_session(app, environ):\n    # extract session id from environ.\n    return \"session_id\"\n\ndef mask_event(eventmodel):\n    # do something to remove sensitive fields\n    # be sure not to remove any required fields.\n    return eventmodel\n\ndef get_metadata(app, environ):\n    return { 'foo' : 'some data', 'bar' : 'another data', }\n\nmoesif_settings = {\n    'APPLICATION_ID': 'Your Moesif Application Id',\n    'DEBUG': False,\n    'LOG_BODY': True,\n    'IDENTIFY_USER': identifyUser,\n    'IDENTIFY_COMPANY': identifyCompany,\n    'GET_SESSION_TOKEN': get_token,\n    'SKIP': should_skip,\n    'MASK_EVENT_MODEL': mask_event,\n    'GET_METADATA': get_metadata,\n    'CAPTURE_OUTGOING_REQUESTS': False\n}\n\napp.wsgi_app = MoesifMiddleware(app.wsgi_app, moesif_settings)\n\n```\n\n## Update User\n\n### update_user method\nA method is attached to the moesif WSGI middleware object to update the user profile or metadata.\nThe metadata field can be any custom data you want to set on the user. The `user_id` field is required.\n\n```python\nupdate_user = MoesifMiddleware(app, moesif_settings).update_user({\n        'user_id': 'test',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    })\n```\n\n### update_users_batch method\nA method is attached to the moesif WSGI middleware object to update the users profile or metadata in batch.\nThe metadata field can be any custom data you want to set on the user. The `user_id` field is required.\n\n```python\nupdate_users_batch = MoesifMiddleware(app, moesif_settings).update_users_batch([UserModel.from_dictionary({\n        'user_id': 'test',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    }), UserModel.from_dictionary({\n        'user_id': 'abc_user',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    })])\n```\n\n## Update Company\n\n### update_company method\nA method is attached to the moesif WSGI middleware object to update the company profile or metadata.\nThe metadata field can be any custom data you want to set on the company. The `company_id` field is required.\n\n```python\nupdate_company = MoesifMiddleware(app, moesif_settings).update_company({\n        'company_id': '1',\n        'company_domain': 'acmeinc.com',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    })\n```\n\n### update_companies_batch method\nA method is attached to the moesif WSGI middleware object to update the companies profile or metadata in batch.\nThe metadata field can be any custom data you want to set on the company. The `company_id` field is required.\n\n```python\nupdate_companies_batch = MoesifMiddleware(app, moesif_settings).update_companies_batch([CompanyModel.from_dictionary({\n        'company_id': '1',\n        'company_domain': 'nowhere.com',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    }), CompanyModel.from_dictionary({\n        'company_id': '2',\n        'company_domain': 'acmeinc.com',\n        'metadata': {'email': 'abc@email.com', 'name': 'abcde', 'image': '123'}\n    })])\n```\n\n## Other integrations\n\nTo view more more documentation on integration options, please visit __[the Integration Options Documentation](https://www.moesif.com/docs/getting-started/integration-options/).__\n\n[ico-built-for]: https://img.shields.io/badge/built%20for-python%20wsgi-blue.svg\n[ico-version]: https://img.shields.io/pypi/v/moesifwsgi.svg\n[ico-language]: https://img.shields.io/pypi/pyversions/moesifwsgi.svg\n[ico-license]: https://img.shields.io/badge/License-Apache%202.0-green.svg\n[ico-source]: https://img.shields.io/github/last-commit/moesif/moesifwsgi.svg?style=social\n\n[link-built-for]: https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\n[link-package]: https://pypi.python.org/pypi/moesifwsgi\n[link-language]: https://pypi.python.org/pypi/moesifwsgi\n[link-license]: https://raw.githubusercontent.com/Moesif/moesifwsgi/master/LICENSE\n[link-source]: https://github.com/Moesif/moesifwsgi\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.moesif.com/docs/server-integration/python-wsgi/",
    "keywords": "log analysis restful api development debug wsgi flask bottle http middleware",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moesifwsgi",
    "package_url": "https://pypi.org/project/moesifwsgi/",
    "platform": "",
    "project_url": "https://pypi.org/project/moesifwsgi/",
    "project_urls": {
      "Homepage": "https://www.moesif.com/docs/server-integration/python-wsgi/"
    },
    "release_url": "https://pypi.org/project/moesifwsgi/1.1.20/",
    "requires_dist": [
      "requests",
      "isodatetimehandler",
      "moesifapi",
      "moesifpythonrequest",
      "nose ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Moesif Middleware for Python WSGI based flatforms (Flask, Bottle & Others)",
    "version": "1.1.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15394595,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcdbb7d8c0d86b3f4ee8c94a3810d878189bc4eb3ee7a44eb4d0a94bbb451429",
        "md5": "2da0d243252a3c279610e9d17c9e5b96",
        "sha256": "c272cb330ca893b8f5cae118d7d7538b43abbed6f737a1bc34620fb9d1465fd1"
      },
      "downloads": -1,
      "filename": "moesifwsgi-1.1.20-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2da0d243252a3c279610e9d17c9e5b96",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18314,
      "upload_time": "2019-08-09T17:32:06",
      "upload_time_iso_8601": "2019-08-09T17:32:06.171601Z",
      "url": "https://files.pythonhosted.org/packages/bc/db/b7d8c0d86b3f4ee8c94a3810d878189bc4eb3ee7a44eb4d0a94bbb451429/moesifwsgi-1.1.20-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8af651baaa9b12d7355e44c4ea45cfd5a8ce68b5b715380a1dd04fddef7375a",
        "md5": "9137adfe29e44fbb0a6643017384b782",
        "sha256": "f47be3c60b54e5ea7a409b7112fb75a53c3db789124eb5949131bbb73b1efbb0"
      },
      "downloads": -1,
      "filename": "moesifwsgi-1.1.20.tar.gz",
      "has_sig": false,
      "md5_digest": "9137adfe29e44fbb0a6643017384b782",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17272,
      "upload_time": "2019-08-09T17:32:07",
      "upload_time_iso_8601": "2019-08-09T17:32:07.720750Z",
      "url": "https://files.pythonhosted.org/packages/c8/af/651baaa9b12d7355e44c4ea45cfd5a8ce68b5b715380a1dd04fddef7375a/moesifwsgi-1.1.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}