{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================================================================================\n:banana: Django Bananas - Django extensions the monkey way\n================================================================================\n\n.. image:: https://api.travis-ci.org/5monkeys/django-bananas.svg?branch=master\n  :target: https://travis-ci.org/5monkeys/django-bananas?branch=master\n\n.. image:: https://coveralls.io/repos/5monkeys/django-bananas/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/5monkeys/django-bananas?branch=master\n\n.. image:: https://img.shields.io/pypi/v/django-bananas.svg\n  :target: https://pypi.python.org/pypi/django-bananas/\n\n--------------------------------------------------------------------------------\n Install\n--------------------------------------------------------------------------------\n\ndjango-bananas is on PyPI, so just run:\n\n.. code-block:: bash\n\n    pip install django-bananas\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Compatibility\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nCurrently tested only for\n\n-   Django 1.11-2.2 under Python 3.5-3.7\n-   Django 3.0 under Python 3.6-3.7\n\npull requests welcome!\n\n--------------------------------------------------------------------------------\n Examples\n--------------------------------------------------------------------------------\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Models\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nTimeStampedModel\n================================================================================\n\nAbstract ``TimeStampedModel`` with date created/modified fields:\n\nUse TimeStampedModel as base class for your model\n\n.. code-block:: py\n\n    from bananas.models import TimeStampedModel\n\n    class Book(TimeStampedModel):\n        pass\n\n\nthe timestamps can be accessed on the model as\n\n.. code-block:: py\n\n    >>> book.date_created\n    >>> book.date_modified\n\n\nUUIDModel\n================================================================================\n\nAbstract model that uses a Django 1.8 UUID field as the primary key.\n\n.. code-block:: py\n\n    from bananas.models import UUIDModel\n\n    class User(UUIDModel):\n        display_name = models.CharField(max_length=255)\n        email = models.EmailField()\n\n    >>> user.id\n    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')\n\n    >>> user.pk\n    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')\n\nSecretField\n================================================================================\n\nCan be used to generate and store \"safe\" random bytes for authentication.\n\n.. code-block:: py\n\n    from bananas.models import SecretField\n\n    class User(models.Model):\n        # Ask for 32 bytes and require 24 bytes from urandom\n        token = SecretField(num_bytes=32, min_bytes=24)\n\n    >>> User.objects.create()  # Token is generated automatically\n    >>> user.token\n    '3076f884da827809e80ced236e8da20fa36d0c27dd036bdd4afbac34807e5cf1'\n\n\n\nURLSecretField\n================================================================================\n\nAn implementation of SecretField that generates an URL-safe base64 string\ninstead of a hex representation of the random bytes.\n\n\n.. code-block:: py\n\n    from bananas.models import URLSecretField\n\n\n    class User(models.Model):\n        # Generates an URL-safe base64 representation of the random value\n        token = URLSecretField(num_bytes=32, min_bytes=24)\n\n    >>> user.token\n    'WOgrNwqFKOF_LsHorJy_hGpPepjvVH7Uar-4Z_K6DzU-'\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n ORM\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nNew ``queryset.dicts()`` with field renaming through kwargs, and `dot-dict`\nstyle results:\n\n.. code-block:: py\n\n    from bananas.query import ExtendedQuerySet\n\n    class Book(TimeStampedModel):\n        author = ForeignKey(Author)\n        objects = Manager.from_queryset(ExtendedQuerySet)()\n\n    >>> book = Book.objects.dicts('id', author='author__name').first()\n    {'id': 1, 'author': 'Jonas'}\n    >>> book.author\n    'Jonas'\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Admin\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nCustom django admin stylesheet.\n\n.. warning:: Work in progress. Only a few views styled completely as of now.\n\n.. code-block:: py\n\n    # settings.py\n    INSTALLED_APPS = (\n        'bananas',  # Needs to be before 'django.contrib.admin'\n        'django.contrib.admin',\n        ...\n    )\n\n    ADMIN = {\n        'SITE_HEADER': 'Bananas',\n        'SITE_TITLE': 'Bananas Admin',\n        'INDEX_TITLE': 'Admin Panel',\n        # 'BACKGROUND_COLOR': '#363c3f',\n    }\n\n.. code-block:: py\n\n    # your main urls.py\n    from bananas import admin\n\n    urlpatterns = [\n        ...\n        url(r'^admin/', include(admin.site.urls)),\n    ]\n\n.. code-block:: py\n\n    # app/admin.py or something\n    from django.conf.urls import url\n    from bananas import admin\n\n    @admin.register\n    class MyAdminView(admin.AdminView):\n        def get_urls(self):\n            return [\n                url(r'^custom/$',\n                    self.admin_view(self.custom_view)),\n                    # ^^ Note that the view is wrapped in self.admin_view.\n                    # Needed for permissions and to prevent any\n                    # threading issues.\n            ]\n\n        def get(self, request):\n            return self.render('admin/template.html', {})\n\n        def custom_view(self, request):\n            return self.render('admin/custom.html', {})\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Admin API\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nDjango admin API for use with django-bananas.js (react admin site)\n\n.. code-block:: py\n\n    # app/admin.py or something\n    from bananas.admin.api.mixins import BananasAPI\n    from bananas.admin.api.schemas import schema\n    from bananas.admin.api.views import BananasAdminAPI\n    from bananas.lazy import lazy_title\n    from django.utils.translation import gettext_lazy as _\n    from rest_framework import viewsets\n\n    class CustomAdminAPI(BananasAdminAPI):\n\n        name = lazy_title(_(\"custom\"))\n\n        @schema(query_serializer=SomeSerializer, responses={200: SomeSerializer})\n        def list(self, request):\n            return ...\n\n    class SomeModelAdminAPI(BananasAPI, viewsets.ModelViewSet)\n\n        serializer_class = SomeModelSerializer\n\n        def list(self, request):\n            return ...\n\n.. code-block:: py\n\n    # app/urls.py or something\n    from bananas.admin import api\n    from django.conf.urls import include, path\n\n    from .admin import CustomAdminAPI, SomeModelAdminAPI\n\n    api.register(CustomAdminAPI)\n    api.register(SomeModelAdminAPI)\n\n    urlpatterns = [\n        path(r\"^api/\", include(\"bananas.admin.api.urls\"))\n    ]\n\n.. code-block:: py\n\n   # setting.py\n   ADMIN = {\n      'API': {\n         # Optional: override the default OpenAPI schemes\n         'SCHEMES': ['https'],\n      }\n   }\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Database URLs\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nParse database information from a URL, kind of like SQLAlchemy.\n\nEngines\n================================================================================\n\nCurrently supported engines are:\n\n==============================  ===========================================\n URI scheme                     Engine\n==============================  ===========================================\n pgsql, postgres, postgresql    django.db.backends.postgresql_psycopg2\n mysql                          django.db.backends.mysql\n oracle                         django.db.backends.oracle\n sqlite, sqlite3                django.db.backends.sqlite3\n mysqlgis                       django.contrib.gis.db.backends.mysql\n oraclegis                      django.contrib.gis.db.backends.oracle\n postgis                        django.contrib.gis.db.backends.postgis\n spatialite                     django.contrib.gis.db.backends.spatialite\n==============================  ===========================================\n\nYou can add your own by running ``register(scheme, module_name)`` before parsing.\n\ndatabase_conf_from_url(url)\n  Return a django-style database configuration based on ``url``.\n\n  :param url: Database URL\n  :return: Django-style database configuration dict\n\n  Example:\n\n  .. code-block:: py\n\n      >>> from bananas.url import database_conf_from_url\n      >>> conf = database_conf_from_url(\n      ...     'pgsql://joar:hunter2@5monkeys.se:4242/tweets/tweetschema'\n      ...     '?hello=world')\n      >>> sorted(conf.items())  # doctest: +NORMALIZE_WHITESPACE\n      [('ENGINE', 'django.db.backends.postgresql_psycopg2'),\n       ('HOST', '5monkeys.se'),\n       ('NAME', 'tweets'),\n       ('PARAMS', {'hello': 'world'}),\n       ('PASSWORD', 'hunter2'),\n       ('PORT', 4242),\n       ('SCHEMA', 'tweetschema'),\n       ('USER', 'joar')]\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nbananas.environment - Helpers to get setting values from environment variables\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n``bananas.environment.env`` is a wrapper around ``os.environ``, it provides the\nstandard ``.get(key, value)``, method to get a value for a key, or a default if\nthe key is not set - by default that default is ``None`` as you would expect.\nWhat is more useful is the additional type-parsing ``.get_*`` methods it\nprovides:\n\n-   ``get_bool``\n-   ``get_int``\n-   ``get_list``, ``get_set``, ``get_tuple``\n\n\n:get_int:\n\n    .. code-block:: python\n\n        >>> # env ONE=1\n        >>> env.get_int('ONE')\n        1\n        >>> env.get_int('TWO')  # Not set\n        None\n        >>> env.get_int('TWO', -1)  # Not set, default to -1\n        -1\n\n\n:get_bool:\n    returns ``True`` if the environment variable value is any of,\n    case-insensitive:\n\n    -   ``\"true\"``\n    -   ``\"yes\"``\n    -   ``\"on\"``\n    -   ``\"1\"``\n\n    returns ``False`` if the environment variable value is any of,\n    case-insensitive:\n\n    -   ``\"false\"``\n    -   ``\"no\"``\n    -   ``\"off\"``\n    -   ``\"0\"``\n\n    if the value is set to anything other than above, the default value will be returned instead.\n\n    e.g.:\n\n    .. code-block:: python\n\n        >>> # env CAN_DO=1 NO_THANKS=false NO_HABLA=f4lse\n        >>> env.get_bool('CAN_DO')\n        True\n        >>> env.get_bool('NO_THANKS')\n        False\n        >>> env.get_bool('NO_HABLA')  # Set, but not valid\n        None\n        >>> env.get_bool('NO_HABLA', True)  # Set, but not valid, with default\n        True\n        >>> env.get_bool('IS_NONE')  # Not set\n        None\n        >>> env.get_bool('IS_NONE', False)  # Not set, default provided\n        False\n\n\n:get_tuple, get_list, get_set:\n\n    Returns a ``tuple``, ``list`` or ``set`` of the environment variable string,\n    split by the ascii comma character. e.g.:\n\n    .. code-block:: python\n\n        >>> # env FOOS=foo,foo,bar\n        >>> get_list('FOO')\n        ['foo', 'foo', 'bar']\n        >>> get_set('FOO')\n        set(['foo', 'bar'])\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nbananas.secrets - Helpers for getting secrets from files\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nIs useful for getting the content of secrets stored in files. One usecase is `docker secrets\n<https://docs.docker.com/engine/swarm/secrets/>`_.\n\n``BANANAS_SECRETS_DIR`` can be used to configure the directory that secrets live in. Defaults to ``/run/secrets/``.\n\n.. code-block:: py\n\n    >>> from bananas import secrets\n\n    >>> secrets.get_secret(\"hemlis\")\n    \"topsecret\"\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5monkeys/django-bananas",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-bananas",
    "package_url": "https://pypi.org/project/django-bananas/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-bananas/",
    "project_urls": {
      "Homepage": "https://github.com/5monkeys/django-bananas"
    },
    "release_url": "https://pypi.org/project/django-bananas/1.5.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Bananas - Django extensions the monkey way",
    "version": "1.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14946100,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "197132dd319056c62f35177401dc64e1e2dbbf2608d710ededff101f61c5e0a5",
        "md5": "1eb30223cfdb66d5f3ec7be590cfb6e3",
        "sha256": "234a04f403364831d5d33f3173d373f2f02581938d60a1b6815699b38e0aa2d1"
      },
      "downloads": -1,
      "filename": "django_bananas-1.5.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1eb30223cfdb66d5f3ec7be590cfb6e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 47437,
      "upload_time": "2020-08-18T08:27:34",
      "upload_time_iso_8601": "2020-08-18T08:27:34.307735Z",
      "url": "https://files.pythonhosted.org/packages/19/71/32dd319056c62f35177401dc64e1e2dbbf2608d710ededff101f61c5e0a5/django_bananas-1.5.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bb4d6f4e9ece290c6ecbdd4f51e23cffbc56a370eedac36732a6ea0eb6d72d9",
        "md5": "f17377af1df3c3840481feb0b6294bab",
        "sha256": "46e9c4cf318f786dfc58f67b6e472ccdfefc6cae11e8d83ebf7c971c52fd9688"
      },
      "downloads": -1,
      "filename": "django-bananas-1.5.5.tar.gz",
      "has_sig": false,
      "md5_digest": "f17377af1df3c3840481feb0b6294bab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41425,
      "upload_time": "2020-08-18T08:27:36",
      "upload_time_iso_8601": "2020-08-18T08:27:36.563653Z",
      "url": "https://files.pythonhosted.org/packages/1b/b4/d6f4e9ece290c6ecbdd4f51e23cffbc56a370eedac36732a6ea0eb6d72d9/django-bananas-1.5.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}