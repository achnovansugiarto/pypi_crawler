{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "================================================================================\n:banana: Django Bananas - Django extensions the monkey way\n================================================================================\n\n.. image:: https://github.com/5monkeys/django-bananas/workflows/CI/badge.svg\n  :target: https://github.com/5monkeys/django-bananas/actions\n\n.. image:: https://img.shields.io/pypi/v/django-bananas.svg\n  :target: https://pypi.python.org/pypi/django-bananas/\n\n--------------------------------------------------------------------------------\n Install\n--------------------------------------------------------------------------------\n\ndjango-bananas is on PyPI, so just run:\n\n.. code-block:: bash\n\n    python3 -m pip install django-bananas\n\nUsing DRF specific features like Bananas Admin and fencing requires\ndjangorestframework and drf-yasg and it's recommended to install django-bananas\nwith the ``drf`` extra to keep those in sync:\n\n.. code-block:: bash\n\n    python3 -m pip install django-bananas[drf]\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Compatibility\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nCurrently tested only for\n\n-   Django 2.2 under Python 3.7-3.9\n-   Django 3.2 under Python 3.7-3.9\n-   Django 4.0 under Python 3.8-3.10\n\nPull requests welcome!\n\n--------------------------------------------------------------------------------\n Examples\n--------------------------------------------------------------------------------\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Models\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nTimeStampedModel\n================================================================================\n\nAbstract ``TimeStampedModel`` with date created/modified fields:\n\nUse TimeStampedModel as base class for your model\n\n.. code-block:: py\n\n    from bananas.models import TimeStampedModel\n\n\n    class Book(TimeStampedModel):\n        pass\n\n\nthe timestamps can be accessed on the model as\n\n.. code-block:: pycon\n\n    >>> book.date_created\n    >>> book.date_modified\n\n\nUUIDModel\n================================================================================\n\nAbstract model that uses a Django 1.8 UUID field as the primary key.\n\n.. code-block:: py\n\n    from bananas.models import UUIDModel\n\n\n    class User(UUIDModel):\n        display_name = models.CharField(max_length=255)\n        email = models.EmailField()\n\n.. code-block:: pycon\n\n    >>> user.id\n    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')\n\n    >>> user.pk\n    UUID('70cf1f46-2c79-4fc9-8cc8-523d67484182')\n\nSecretField\n================================================================================\n\nCan be used to generate and store \"safe\" random bytes for authentication.\n\n.. code-block:: py\n\n    from bananas.models import SecretField\n\n\n    class User(models.Model):\n        # Ask for 32 bytes and require 24 bytes from urandom\n        token = SecretField(num_bytes=32, min_bytes=24)\n\n.. code-block:: pycon\n\n    >>> User.objects.create()  # Token is generated automatically\n    >>> user.token\n    '3076f884da827809e80ced236e8da20fa36d0c27dd036bdd4afbac34807e5cf1'\n\n\n\nURLSecretField\n================================================================================\n\nAn implementation of SecretField that generates an URL-safe base64 string\ninstead of a hex representation of the random bytes.\n\n\n.. code-block:: py\n\n    from bananas.models import URLSecretField\n\n\n    class User(models.Model):\n        # Generates an URL-safe base64 representation of the random value\n        token = URLSecretField(num_bytes=32, min_bytes=24)\n\n.. code-block:: pycon\n\n    >>> user.token\n    'WOgrNwqFKOF_LsHorJy_hGpPepjvVH7Uar-4Z_K6DzU-'\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n ORM\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nNew ``queryset.dicts()`` with field renaming through kwargs, and `dot-dict`\nstyle results:\n\n.. code-block:: py\n\n    from bananas.query import ExtendedQuerySet\n\n\n    class Book(TimeStampedModel):\n        author = ForeignKey(Author)\n        objects = Manager.from_queryset(ExtendedQuerySet)()\n\n.. code-block:: pycon\n\n    >>> book = Book.objects.dicts(\"id\", author=\"author__name\").first()\n    {'id': 1, 'author': 'Jonas'}\n    >>> book.author\n    'Jonas'\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Admin\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nCustom django admin stylesheet.\n\n.. warning:: Work in progress. Only a few views styled completely as of now.\n\n.. code-block:: py\n\n    # settings.py\n    INSTALLED_APPS = (\n        \"bananas\",  # Needs to be before \"django.contrib.admin\"\n        \"django.contrib.admin\",\n        ...,\n    )\n\n    ADMIN = {\n        \"SITE_HEADER\": \"Bananas\",\n        \"SITE_TITLE\": \"Bananas Admin\",\n        \"INDEX_TITLE\": \"Admin Panel\",\n        # 'BACKGROUND_COLOR': '#363c3f',\n    }\n\n.. code-block:: py\n\n    # your main urls.py\n    from bananas import admin\n\n    urlpatterns = [\n        # ...\n        url(r\"^admin/\", include(admin.site.urls)),\n    ]\n\n.. code-block:: py\n\n    # app/admin.py or something\n    from django.conf.urls import url\n    from bananas import admin\n\n\n    @admin.register\n    class MyAdminView(admin.AdminView):\n        def get_urls(self):\n            return [\n                url(r\"^custom/$\", self.admin_view(self.custom_view)),\n                # ^^ Note that the view is wrapped in self.admin_view.\n                # Needed for permissions and to prevent any\n                # threading issues.\n            ]\n\n        def get(self, request):\n            return self.render(\"admin/template.html\", {})\n\n        def custom_view(self, request):\n            return self.render(\"admin/custom.html\", {})\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Admin API\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nDjango admin API for use with `django-bananas.js\n<https://github.com/5monkeys/django-bananas.js/>`_ (react admin site). This\nfeature requires installation with the ``drf`` extra.\n\n.. code-block:: py\n\n    # app/admin.py or something\n    from bananas.admin.api.mixins import BananasAPI\n    from bananas.admin.api.schemas import schema\n    from bananas.admin.api.views import BananasAdminAPI\n    from bananas.lazy import lazy_title\n    from django.utils.translation import gettext_lazy as _\n    from rest_framework import viewsets\n\n\n    class CustomAdminAPI(BananasAdminAPI):\n\n        name = lazy_title(_(\"custom\"))\n\n        @schema(query_serializer=SomeSerializer, responses={200: SomeSerializer})\n        def list(self, request):\n            return ...\n\n\n    class SomeModelAdminAPI(BananasAPI, viewsets.ModelViewSet):\n\n        serializer_class = SomeModelSerializer\n\n        def list(self, request):\n            return ...\n\n.. code-block:: py\n\n    # app/urls.py or something\n    from bananas.admin import api\n    from django.conf.urls import include, path\n\n    from .admin import CustomAdminAPI, SomeModelAdminAPI\n\n    api.register(CustomAdminAPI)\n    api.register(SomeModelAdminAPI)\n\n    urlpatterns = [\n        path(r\"^api/\", include(\"bananas.admin.api.urls\")),\n    ]\n\n.. code-block:: py\n\n   # setting.py\n   ADMIN = {\n       \"API\": {\n           # Optional: override the default OpenAPI schemes\n           \"SCHEMES\": [\"https\"],\n       }\n   }\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n Database URLs\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nParse database information from a URL, kind of like SQLAlchemy.\n\nEngines\n================================================================================\n\nCurrently supported engines are:\n\n==============================  ===========================================\n URI scheme                     Engine\n==============================  ===========================================\n pgsql, postgres, postgresql    django.db.backends.postgresql_psycopg2\n mysql                          django.db.backends.mysql\n oracle                         django.db.backends.oracle\n sqlite, sqlite3                django.db.backends.sqlite3\n mysqlgis                       django.contrib.gis.db.backends.mysql\n oraclegis                      django.contrib.gis.db.backends.oracle\n postgis                        django.contrib.gis.db.backends.postgis\n spatialite                     django.contrib.gis.db.backends.spatialite\n==============================  ===========================================\n\nYou can add your own by running ``register(scheme, module_name)`` before parsing.\n\ndatabase_conf_from_url(url)\n  Return a django-style database configuration based on ``url``.\n\n  :param url: Database URL\n  :return: Django-style database configuration dict\n\n  Example:\n\n  .. code-block:: pycon\n\n      >>> from bananas.url import database_conf_from_url\n      >>> conf = database_conf_from_url(\n      ...     \"pgsql://joar:hunter2@5monkeys.se:4242/tweets/tweetschema?hello=world\"\n      ... )\n      >>> sorted(conf.items())  # doctest: +NORMALIZE_WHITESPACE\n      [('ENGINE', 'django.db.backends.postgresql_psycopg2'),\n       ('HOST', '5monkeys.se'),\n       ('NAME', 'tweets'),\n       ('PARAMS', {'hello': 'world'}),\n       ('PASSWORD', 'hunter2'),\n       ('PORT', 4242),\n       ('SCHEMA', 'tweetschema'),\n       ('USER', 'joar')]\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nbananas.environment - Helpers to get setting values from environment variables\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n``bananas.environment.env`` is a wrapper around ``os.environ``, it provides the\nstandard ``.get(key, value)``, method to get a value for a key, or a default if\nthe key is not set - by default that default is ``None`` as you would expect.\nWhat is more useful is the additional type-parsing ``.get_*`` methods it\nprovides:\n\n-   ``get_bool``\n-   ``get_int``\n-   ``get_list``, ``get_set``, ``get_tuple``\n\n\n:get_int:\n\n    .. code-block:: pycon\n\n        >>> # env ONE=1\n        >>> env.get_int(\"ONE\")\n        1\n        >>> env.get_int(\"TWO\")  # Not set\n        None\n        >>> env.get_int(\"TWO\", -1)  # Not set, default to -1\n        -1\n\n\n:get_bool:\n\n    returns ``True`` if the environment variable value is any of,\n    case-insensitive:\n\n    -   ``\"true\"``\n    -   ``\"yes\"``\n    -   ``\"on\"``\n    -   ``\"1\"``\n\n    returns ``False`` if the environment variable value is any of,\n    case-insensitive:\n\n    -   ``\"false\"``\n    -   ``\"no\"``\n    -   ``\"off\"``\n    -   ``\"0\"``\n\n    if the value is set to anything other than above, the default value will be returned instead.\n\n    e.g.:\n\n    .. code-block:: pycon\n\n        >>> # env CAN_DO=1 NO_THANKS=false NO_HABLA=f4lse\n        >>> env.get_bool(\"CAN_DO\")\n        True\n        >>> env.get_bool(\"NO_THANKS\")\n        False\n        >>> env.get_bool(\"NO_HABLA\")  # Set, but not valid\n        None\n        >>> env.get_bool(\"NO_HABLA\", True)  # Set, but not valid, with default\n        True\n        >>> env.get_bool(\"IS_NONE\")  # Not set\n        None\n        >>> env.get_bool(\"IS_NONE\", False)  # Not set, default provided\n        False\n\n\n:get_tuple, get_list, get_set:\n\n    Returns a ``tuple``, ``list`` or ``set`` of the environment variable string,\n    split by the ascii comma character. e.g.:\n\n    .. code-block:: pycon\n\n        >>> # env FOOS=foo,foo,bar\n        >>> get_list(\"FOO\")\n        ['foo', 'foo', 'bar']\n        >>> get_set(\"FOO\")\n        set(['foo', 'bar'])\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nbananas.secrets - Helpers for getting secrets from files\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nIs useful for getting the content of secrets stored in files. One usecase is `docker secrets\n<https://docs.docker.com/engine/swarm/secrets/>`_.\n\n``BANANAS_SECRETS_DIR`` can be used to configure the directory that secrets live in. Defaults to ``/run/secrets/``.\n\n.. code-block:: pycon\n\n    >>> from bananas import secrets\n\n    >>> secrets.get_secret(\"hemlis\")\n    \"topsecret\"\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nbananas.drf.fencing - Fence DRF views with HTTP conditional headers\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nBuilding blocks for composing HTTP conditionals to guard DRF views. Built to\nwork well in conjunction with ``BananasAdminAPI`` and ``TimeStampedModel``. This\nfeature requires installation with the ``drf`` extra.\n\nFences add a header parameter to the exposed OpenAPI schema if you're using\ndrf-yasg.\n\n``allow_if_unmodified_since``\n=============================\n\nMake a view-set for a ``TimeStampedModel`` only accept updates when\n``If-Unmodified-Since`` specifies a date before the ``date_modified`` of the\nupdated instance.\n\nDue to comparing datetime instances, using ``allow_if_unmodified_since``\nrequires running Django with timezone support enabled, ``USE_TZ = TRUE``.\n\n.. code-block:: python\n\n    from bananas.drf.fencing import FencedUpdateModelMixin, allow_if_unmodified_since\n\n\n    class ItemAPI(FencedUpdateModelMixin, GenericViewSet):\n        fence = allow_if_unmodified_since()\n        serializer_class = ItemSerializer\n\n``allow_if_match``\n==================\n\nMake a view-set that requires passing a version string in ``If-Match`` and\nrejects requests when the given version does not match the ``version`` attribute\nof the updated instance.\n\n.. code-block:: python\n\n    from bananas.drf.fencing import FencedUpdateModelMixin, allow_if_match\n\n\n    class ItemAPI(FencedUpdateModelMixin, GenericViewSet):\n        fence = allow_if_match(operator.attrgetter(\"version\"))\n        serializer_class = ItemSerializer\n\n``Fence``\n=========\n\nExample implementing a fence for ``If-Modified-Since``:\n\n.. code-block:: python\n\n    import operator\n    from drf_yasg import openapi\n    from rest_framework import status\n    from rest_framework.exceptions import APIException\n    from bananas.drf.fencing import Fence, header_date_parser, parse_date_modified\n\n\n    class NotModified(APIException):\n        status_code = status.HTTP_304_NOT_MODIFIED\n        default_detail = \"An HTTP precondition failed\"\n        default_code = \"not_modified\"\n\n\n    allow_if_not_modified_since = Fence(\n        get_token=header_date_parser(\"If-Modified-Since\"),\n        compare=operator.gt,\n        get_version=parse_date_modified,\n        openapi_parameter=openapi.Parameter(\n            in_=openapi.IN_HEADER,\n            name=\"If-Modified-Since\",\n            type=openapi.TYPE_STRING,\n            required=True,\n            description=(\n                \"Time of last edit of the client's representation of the resource in \"\n                \"RFC7231 format.\"\n            ),\n        ),\n        rejection=NotModified(\"The resource is unmodified\"),\n    )\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nContributing\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nContributing is welcome in the form of PRs and issues. If you want to add a\nbigger feature or contribute with a large change in current behaviour it's\nalways a good idea to start a discussion with an issue before getting started.\n\nNew additions will be expected to have 100% test coverage as well as type hints\nand documentation to be considered to be merged.\n\nDevelopment\n===========\n\nTesting and development requirements can be installed using package extras\n``test`` and ``dev`` respectively. You'll most likely always want to install the\n``drf`` extra when installing ``dev``.\n\nTo get started, setup a virtualenv and then install test requirements and run\ntests and checks on Python 3.9/Django 3.1 with:\n\n.. code-block:: bash\n\n    python3 -m pip install -e .[test]\n    TOXENV=py39-django31,checks python3 -m tox\n\nYou can install development requirements into your virtualenv. Linting and\nformatting uses pre-commit which you could also install on a system level.\n\n.. code-block:: bash\n\n    python3 -m pip install -e .[dev,drf]\n    make type-check\n    pre-commit run --all-files\n\nAfter installing pre-commit, you can enable hooks to have it run before you\npublish pull requests.\n\n.. code-block:: bash\n\n    pre-commit install -t pre-push\n\nAfter installing ``dev`` you can also run tests without tox for rapid iteration\nand select specific tests with the ``test`` argument to ``make test``:\n\n.. code-block:: bash\n\n    make test test='tests.test_admin.APITest.test_logout'\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5monkeys/django-bananas",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-bananas",
    "package_url": "https://pypi.org/project/django-bananas/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-bananas/",
    "project_urls": {
      "Homepage": "https://github.com/5monkeys/django-bananas"
    },
    "release_url": "https://pypi.org/project/django-bananas/2.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "typing-extensions (>=3.7.4.3)",
      "drf-yasg (>=1.20.0)",
      "mypy ; extra == 'dev'",
      "django-stubs ; extra == 'dev'",
      "djangorestframework-stubs ; extra == 'dev'",
      "pytest-mypy-plugins ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "djangorestframework (>=3.10) ; extra == 'drf'",
      "drf-yasg (>=1.20.0) ; extra == 'drf'",
      "tox ; extra == 'test'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Django Bananas - Django extensions the monkey way",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14946100,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "324498c4eaff1f62fd6c9328dd7a5a2f12665ad4eb5eca8ef7cc903539bfb11c",
        "md5": "8c5f51a20f288e41d8f3ca147349fb19",
        "sha256": "9578187e22277dedf0dacad4194ba2425fe1ff314a6db610308172c8b8d48854"
      },
      "downloads": -1,
      "filename": "django_bananas-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c5f51a20f288e41d8f3ca147349fb19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 54693,
      "upload_time": "2022-08-31T08:06:32",
      "upload_time_iso_8601": "2022-08-31T08:06:32.063286Z",
      "url": "https://files.pythonhosted.org/packages/32/44/98c4eaff1f62fd6c9328dd7a5a2f12665ad4eb5eca8ef7cc903539bfb11c/django_bananas-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1cacadc860b77430bb36c936ede7d31593796a8575406aaee3a509e77235225",
        "md5": "a07d67c4d6b44b9fcc6d10c76438a6e6",
        "sha256": "3aa2831d992187ae7f5c1920683534e23fd1585e609bf3a9e8a08f85953f56d5"
      },
      "downloads": -1,
      "filename": "django-bananas-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a07d67c4d6b44b9fcc6d10c76438a6e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 50606,
      "upload_time": "2022-08-31T08:06:33",
      "upload_time_iso_8601": "2022-08-31T08:06:33.994148Z",
      "url": "https://files.pythonhosted.org/packages/b1/ca/cadc860b77430bb36c936ede7d31593796a8575406aaee3a509e77235225/django-bananas-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}