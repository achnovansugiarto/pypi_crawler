{
  "info": {
    "author": "",
    "author_email": "Shacham Ginat <shacham6@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Logo](imgs/logo.svg)\n\n`mockitup` is a small package that provides a DSL for quickly configuring mock behaviors.\n\n<!-- You can read more in our [documentation](https://shacham6.github.io/mockitup/) website. -->\n\n## Installation\n\nSimply run the commands:\n\n``` shell\n> pip install [--upgrade] mockitup\n```\n\n## The `mockitup` library\n\nYou can easily use the `mockitup` DSL to configure `unittest.mock` objects.\n\n``` python\nfrom unittest.mock import Mock\nfrom mockitup import allow\n\n# Configure the mock\nmock = Mock()\nallow(mock).add_five(4).returns(9)\nallow(mock).add_five(5).returns(10)\n\n# And now to use the mock\nassert mock.add_five(4) == 9  # SUCCESS\nassert mock.add_five(5) == 10 # SUCCESS\nassert mock.add_five(3) == 8  # FAILED. WE DIDN'T ALLOW THAT TO HAPPEN.\n```\n\nThe library has two main concepts that it uses to configure the mock objects: `allowances`, and `expectations`. \n\n### Allowances\n\n***Allowances*** let us give the mock _permission_ to be invoked in a certain way, without **requiring** it actually being invoked.\n\n``` python\nfrom unittest.mock import Mock\nfrom mockitup import allow\n\nmock = Mock()\n\nallow(mock).add_five(5).returns(10)\nallow(mock).add_five(1).returns(6)\n\nassert mock.add_five(5) == 10  # That's fine, since we've allowed that to happen.\n\nmock.add_five(4) # Will raise an `UnregisteredCall` exception!\n```\n\nYou'll notice that we didn't call `mock.add_five(1)` and that's fine.\nThis is because we used the allow function, which doesn't enforce calls to be made.\n\nIf we do want to ensure that certain calls are made we can use the `expection_suite`.\n\n### Expectations\n\n***Expectations*** allow us to ensure that a mock is used in a certain way, in terms of both parameters and order.\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import expectation_suite\n\nmock = Mock()\nwith expectation_suite() as es:\n    es.expect(mock).add_five(1).returns(6)\n    es.expect(mock).add_five(2).returns(7)\n```\n\nIn the example shown above we initialized an `expectation_suite` inside a `with` clause.\nNot fulfilling those expectations before the end of the `with` clause will result in the exception `ExpectationNotFulfilled` being raised.\n\n``` text\nmockitup.composer.ExpectationNotFulfilled: Expected mock `mock.add_five` to be called with (args: '(1,)', kwargs: '{}'), but wasn't\n```\n\nInvoking the mock as expected will result in the `with` clause passing silently, not\nraising any errors:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import expectation_suite\n\nmock = Mock()\nwith expectation_suite() as es:\n    es.expect(mock).add_five(1).returns(6)\n    es.expect(mock).add_five(2).returns(7)\n\n    assert mock.add_five(2) == 7\n    assert mock.add_five(1) == 6\n\n```\n\nHere you'll probably notice that we don't enforce order by default.\nIn order to enforce the order, simply pass `ordered=True` to the `expectation_suite`:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import expectation_suite\n\nmock = Mock()\nwith expectation_suite(ordered=True) as es:\n    es.expect(mock).add_five(1).returns(6)\n    es.expect(mock).add_five(2).returns(7)\n\n    assert mock.add_five(2) == 7\n    assert mock.add_five(1) == 6\n\n```\n\nRunning that code snippet will result in the exception `ExpectationNotMet` to be raised:\n\n``` text\nmockitup.composer.ExpectationNotMet: Expectations were fulfilled out of order\n```\n\nBut if we were to run it in the configured order - everything would be fine:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import expectation_suite\n\nmock = Mock()\nwith expectation_suite(ordered=True) as es:\n    es.expect(mock).add_five(1).returns(6)\n    es.expect(mock).add_five(2).returns(7)\n\n    assert mock.add_five(1) == 6\n    assert mock.add_five(2) == 7\n\n```\n\n## Extra features\n\n`mockitup` contains more features that allow you to test your code more\nefficiently.\n\nClick the following heading for details.\n\n<details>\n<summary>Call raises an exception</summary>\n\nIn order to make a method raise an exception when called with some input, simply use the `.raises` directive:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import allow\n\nmock = Mock()\n\nallow(mock).divide(0).raises(ZeroDivisionError(\"You done goofed\"))\n\nmock.divide(0)  # ZeroDivisionError: You done goofed\n```\n</details>\n\n<details>\n<summary>Call yields from iterable</summary>\n\nIn most cases you'll want a mock to return a concrete value, but sometimes you'll want to make a call `yield_from` something.\n\nIn those cases you can use the `yields_from` directive:\n\n``` python\nfrom typing import Iterator\nfrom unittest.mock import Mock\n\nfrom mockitup import allow\n\nmock = Mock()\n\nallow(mock).iter_numbers().yields_from([1, 2, 3, 4])\n\nresult = mock.iter_numbers()\n\nassert isinstance(result, Iterator)\nassert not isinstance(result, list)\n\nfor actual, expected in zip(result, [1, 2, 3, 4]):\n    assert actual == expected\n```\n\n</details>\n\n<details>\n<summary>Multiple return values</summary>\nWhen testing an impure function or method, sometimes it'll be tough to test using regular\n`unittest.mock` objects.\n\nSay we want to test the following function:\n\n``` python\ndef count_comments_in_line_reader(line_reader):\n    commented_out_lines = 0\n    while (line := line_reader.read_line()):\n        if line.startswith(\"#\"):\n            commented_out_lines += 1\n    return commented_out_lines\n```\n\nHere we see that the function calls the method called `read_line` possible multiple times,\neach time possibly resulting in a different value.\n\nLet's test that function:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import allow\n\nmock = Mock()\nallow(mock).read_line().returns(\n    \"First line\",\n    \"# Comment\",\n    \"Second line\",\n    \"# Comment\",\n    \"# Comment\",\n    \"Last line\",\n    None,\n)\n\nassert count_comments_in_line_reader(mock) == 3\n```\n\nEach argument provided to the `returns` directive will be returned in turn.\nOn the first invocation of `read_line` the first argument will be returned, then the second, and so on...\nWhen all return values are exhausted, the last return value will be repeatedly returned on each future invocation:\n\n``` python\nfrom unittest.mock import Mock\n\nfrom mockitup import allow\n\nmock = Mock()\nallow(mock).pop_number().returns(1, 2, 3)\n\nassert mock.pop_number() == 1\nassert mock.pop_number() == 2\nassert mock.pop_number() == 3\nassert mock.pop_number() == 3\nassert mock.pop_number() == 3\nassert mock.pop_number() == 3\n```\n\n</details>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License\n        \n        Copyright (c) 2023 Shacham Ginat\n        \n        Permission is hereby granted, free of charge, to any person obtaining a copy\n        of this software and associated documentation files (the \"Software\"), to deal\n        in the Software without restriction, including without limitation the rights\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n        copies of the Software, and to permit persons to whom the Software is\n        furnished to do so, subject to the following conditions:\n        \n        The above copyright notice and this permission notice shall be included in all\n        copies or substantial portions of the Software.\n        \n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n        SOFTWARE.\n        ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mockitup",
    "package_url": "https://pypi.org/project/mockitup/",
    "platform": null,
    "project_url": "https://pypi.org/project/mockitup/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mockitup/1.0.1/",
    "requires_dist": [
      "PyHamcrest (>=2.0.2)",
      "typing-extensions (>=3.10.0)"
    ],
    "requires_python": "<4.0,>=3.8",
    "summary": "A `unittest.mock` wrapper for easier mocking",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16405101,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18fcc468e58bee59443279948d862aafdd304a943f6a0afe398ad80db4accd92",
        "md5": "31d447a891bf7bb5fa733af5c51d7524",
        "sha256": "73b1b9e44b4dca119dbecc08934067932baacaf1c881e1a512b2c6f6d49f23a1"
      },
      "downloads": -1,
      "filename": "mockitup-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31d447a891bf7bb5fa733af5c51d7524",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "<4.0,>=3.8",
      "size": 9114,
      "upload_time": "2023-01-12T14:44:05",
      "upload_time_iso_8601": "2023-01-12T14:44:05.788254Z",
      "url": "https://files.pythonhosted.org/packages/18/fc/c468e58bee59443279948d862aafdd304a943f6a0afe398ad80db4accd92/mockitup-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c916a6e5531042b1012bfd5627bf6d9c9d65186d6a33518738f51d23f5468025",
        "md5": "0b607e0e2e2aee1fd93345d03d2eb858",
        "sha256": "1730a6e71ee089a564c6cb0bdc783862af9028104b05fe59f572c258ca388470"
      },
      "downloads": -1,
      "filename": "mockitup-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0b607e0e2e2aee1fd93345d03d2eb858",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<4.0,>=3.8",
      "size": 10229,
      "upload_time": "2023-01-12T14:44:07",
      "upload_time_iso_8601": "2023-01-12T14:44:07.435707Z",
      "url": "https://files.pythonhosted.org/packages/c9/16/a6e5531042b1012bfd5627bf6d9c9d65186d6a33518738f51d23f5468025/mockitup-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}