{
  "info": {
    "author": "Jarry Shaw",
    "author_email": "jarryshaw@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Unix Shell",
      "Topic :: Utilities"
    ],
    "description": "---\nPlatform: OS X Yosemite ~ macOS Mojave\n\nLanguage: Python | Bourne-Again Shell\n\nEnvironment: Console | Terminal\n---\n\n&nbsp;\n\n# MacDaily\n\n[![Downloads](http://pepy.tech/badge/macdaily)](http://pepy.tech/count/macdaily)\n[![version](https://img.shields.io/pypi/v/macdaily.svg)](https://pypi.org/project/macdaily)\n[![format](https://img.shields.io/pypi/format/macdaily.svg)](https://pypi.org/project/macdaily)\n[![status](https://img.shields.io/pypi/status/macdaily.svg)](https://pypi.org/project/macdaily)\n\n[![language](https://img.shields.io/github/languages/top/JarryShaw/macdaily.svg)](https://github.com/JarryShaw/macdaily)\n[![made-with-bash](https://img.shields.io/badge/Made%20with-Bash-1f425f.svg)](https://www.gnu.org/software/bash)\n[![python](https://img.shields.io/pypi/pyversions/macdaily.svg)](https://python.org)\n[![implementation](https://img.shields.io/pypi/implementation/macdaily.svg)](http://pypy.org)\n\n&nbsp;\n\n - [About](#about)\n - [Installation](#install)\n - [Configuration](#configuration)\n - [Usage Manual](#usage)\n    * [Start-Up](#startup)\n    * [Commands](#command)\n    * [Generals](#general)\n - [Troubleshooting](#issue)\n - [TODO](#todo)\n\n---\n\n&nbsp;\n\n<a name=\"about\"> </a>\n\n## About\n\n > Package day-care manager on macOS.\n\n&emsp; `macdaily` is a mediate collection of console scripts written in __Python__ and __Bourne-Again Shell__. Originally works as an automatic housekeeper for Mac to update all packages outdated, `macdaily` is now fully functioned and end-user oriented. Without being aware of everything about your Mac, one can easily work around and manage packages out of no pain using `macdaily`.\n\n&nbsp;\n\n<a name=\"install\"> </a>\n\n## Installation\n\n&emsp; Just as many Python packages, `macdaily` can be installed through `pip` using the following command, which will get you the latest version from [PyPI](https://pypi.org).\n\n```sh\npip install macdaily\n```\n\n&emsp; Or if you prefer the real-latest version and fetch from this Git repository, then the script below should be used.\n\n```sh\ngit clone https://github.com/JarryShaw/macdaily.git\ncd macdaily\npip install -e .\n# and to update at any time\ngit pull\n```\n\n&emsp; And for tree format support in dependency command, you may need `pipdeptree`, then implicily you can use the following script to do so.\n\n```sh\npip install macdaily[pipdeptree]\n# or explicitly...\npip install macdaily pipdeptree\n```\n\n&emsp; Do please __NOTE__ that, `macdaily` runs only with support of Python from version ***3.5*** and on. And it shall only work ideally on ***macOS***.\n\n&nbsp;\n\n<a name=\"configuration\"> </a>\n\n## Configuration\n\n > This part might be kind of garrulous, for some may not know what's going on here. :wink:\n\n&emsp; Since robust enough, `macdaily` now supports configuration upon user's own wish. One may set up log path, hard disk path, archive path and many other things, other than the default settings.\n\n > __NOTA BENE__ -- `macdaily` now supports configuration commands, see [Config Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#config) section for more information.\n\n&emsp; The configuration file should lie under `~/.dailyrc`, which is hidden from Finder by macOS. To review or edit it, you may use text editors like `vim` and/or `nano`, or other graphic editors, such as `Sublime Text` and/or `Atom`, or whatever you find favourable.\n\n```\n[Path]\n# In this section, paths for log files are specified.\n# Please, under any circumstances, make sure they are valid.\nlogdir = ~/Library/Logs/MacDaily    ; path where logs will be stored\ntmpdir = /tmp/dailylog              ; path where temporary runtime logs go\ndskdir = /Volumes/Your Disk         ; path where your hard disk lies\narcdir = ${dskdir}/Developers       ; path where ancient logs archive\n\n[Mode]\n# In this section, flags for modes are configured.\n# If you would like to disable the mode, set it to \"false\".\napm      = true     ; Atom packages\ngem      = true     ; Ruby gems\nmas      = true     ; Mac App Store applications\nnpm      = true     ; Node.js modules\npip      = true     ; Python packages\nbrew     = true     ; Homebrew Cellars\ncask     = true     ; Caskroom Casks\ndotapp   = true     ; Applications (*.app)\nmacapp   = true     ; all applications in /Application folder\nsystem   = true     ; macOS system packages\ncleanup  = true     ; cleanup caches\nappstore = true     ; Mac App Store applications in /Application folder\n\n[Daemon]\n# In this section, scheduled tasks are set up.\n# You may append and/or remove the time intervals.\nupdate      = true      ; run update on schedule\nuninstall   = false     ; don't run uninstall\nreinstall   = false     ; don't run reinstall\npostinstall = false     ; don't run postinstall\ndependency  = false     ; don't run dependency\nlogging     = true      ; run logging on schedule\nschedule    =           ; scheduled timing (in 24 hours)\n    8:00                ; update & logging at 8:00\n    22:30-update        ; update at 22:30\n    23:00-logging       ; logging at 23:00\n\n[Option]\n# In this section, command options are picked.\n# Do make sure these options are available for commands.\nupdate  = --all --yes --pre --quiet --show-log --no-cask\nlogging = --all --quiet --show-log\n\n[Account]\n# In this section, account information are stored.\n# You must not modify this part under any circumstances.\nusername = ...\npassword = ********\n\n[Environment]\n# In this section, environment specifications are set up.\n# Please, under any circumstances, make sure all fields are valid.\nbash-timeout = 1_000    ; timeout limit for each shell script in seconds\nsudo-timeout = 5m       ; sudo command timeout as specified in /etc/sudoers\n```\n\n&emsp; Above is the default content of `.dailyrc`, following the grammar of `INI` files. Lines and words after number sign (`'#'`) and semicolon (`';'`) are comments, whose main purpose is to help understanding the contents of this file.\n\n&emsp; In section `[Path]`, there are path names where logs and some other things to be stored. In section `[Mode]`, there are ten different modes to indicate if they are *enabled* or *disabled* when calling from `--all` option.\n\n&emsp; You may wish to set the `dskdir` -- *path where your hard disk lies*, which allows `macdaily` to archive your ancient logs and caches into somewhere never bothers.\n\n&emsp; Please __NOTE__ that, under all circumstances, of section `[Path]`, all values would better be a ***valid path name without blank characters*** (` \\t\\n\\r\\f\\v`), except your hard disk `dskdir`.\n\n&emsp; Besides, in section `[Daemon]`, you can decide which command is scheduled and when to run such command, with the format of `HH:MM[-CMD]`. The `CMD` is optional, which will be `any` if omits. And you may setup which command(s) will be registered as daemons and run with schedule through six booleans above. These boolean values help `macdaily` indicate which is to be launched when commands in `schedule` omit. That is to say, when `command` omits in `schedule`, `macdaily` will register all commands that set `true` in the above boolean values.\n\n&emsp; Also, in section `[Option]`, you may set up optional arguments for the daemons above. Do please make sure these commands are **valid**. And if omit, an empty arguments will be given.\n\n&emsp; Last but no least, in section `[Account]`, you should **NEVER** modify any contents under this section in order to keep `macdaily` working. However, you may setup this part with [`config`](https://github.com/JarryShaw/MacDaily/tree/master/src#config) command.\n\n&nbsp;\n\n<a name=\"usage\"> </a>\n\n## Usage Manual\n\n<a name=\"startup\"> </a>\n\n### Start-Up\n\n&emsp; Before we dive into the detailed usage of `macdaily`, let's firstly get our hands dirty with some simple commands.\n\n > __NOTE__ -- all acronyms and aliases are left out for a quick and clear view of `macdaily`\n\n1. How to use `macdaily`?\n\n    ```shell\n    # call from $PATH\n    $ macdaily [command ...] [flag ...]\n    # or call from Python module\n    $ python -m macdaily [command ...] [flag ...]\n    ```\n\n2. How to setup my disks and daemons?\n\n    ```\n    $ macdaily config\n    ```\n\n3. How to relaunch daemons after I manually modified `~/.dailyrc`?\n\n    ```\n    $ macdaily launch\n    ```\n\n4. How to archive ancient logs without running any commands?\n\n    ```\n    $ macdaily archive\n    ```\n\n5. How to update all outdated packages?\n\n    ```\n    $ macdaily update --all\n    ```\n\n6. How to update a certain package (eg: `hello` from Homebrew) ?\n\n    ```\n    $ macdaily update brew --package hello\n    ```\n\n7. How to uninstall a certain package along with its dependencies (eg: `pytest` from brewed CPython version 3.6) ?\n\n    ```\n    $ macdaily uninstall pip --brew --cpython --python_version=3 --package pytest\n    ```\n\n8. How to reinstall all packages but do not cleanup caches?\n\n    ```\n    $ macdaily reinstall --all --no-cleanup\n    ```\n\n9. How to postinstall packages whose name ranges between \"start\" and \"stop\" alphabetically?\n\n    ```\n    $ macdaily postinstall --all --startwith=start --endwith=stop\n    ```\n\n10. How to show dependency of a certain package as a tree (eg: `gnupg` from Homebrew) ?\n\n    ```\n    $ macdaily dependency brew --package gnupg --tree\n    ```\n\n11. How to log all applications on my Mac, a.k.a. `*.app` files?\n\n    ```\n    $ macdaily logging dotapp\n    ```\n\n12. How to run `macdaily` in quiet mode, i.e. with no output information (eg: `logging` in quiet mode) ?\n\n    ```\n    $ macdaily logging --all --quiet\n    ```\n\n13. How to dump a `Macfile` to keep track of all packages?\n\n    ```\n    $ macdaily bundle dump\n    ```\n\n<a name=\"command\"> </a>\n\n### Commands\n\n&emsp; `macdaily` supports several different commands, from `archive`, `bundle`, `config`, `launch`, `update`, `unisntall`, `reinstall` and `postinstall` to `dependency` and `logging`. Of all commands, there are corresponding **aliases** for which to be reckoned as valid.\n\n| Command                       | Aliases                         |\n| :---------------------------- | :------------------------------ |\n| [`archive`](#archive)         |                                 |\n| [`bundle`](#bundle)           |                                 |\n| [`config`](#config)           | `cfg`                           |\n| [`launch`](#launch)           | `init`                          |\n| [`update`](#update)           | `up`, `upgrade`                 |\n| [`uninstall`](#uninstall)     | `un`, `remove`, `rm`, `r`, `un` |\n| [`reinstall`](#reinstall)     | `re`                            |\n| [`postinstall`](#postinstall) | `post`, `ps`,                   |\n| [`dependency`](#dependency)   | `deps`, `dp`                    |\n| [`logging`](#logging)         | `log`                           |\n\n<a name=\"general\"> </a>\n\n### Generals\n\n&emsp; The man page of `macdaily` shows as below.\n\n```\n$ macdaily --help\nusage: macdaily [-h] command\n\nPackage Day Care Manager\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -V, --version  show program's version number and exit\n\nCommands:\n  macdaily provides a friendly CLI workflow for the administrator of macOS to\n  manipulate packages\n```\n\n&emsp; Commands for `macdaily` is shown as above and they are mandatory. For more detailed usage information, please refer to the [MacDaily General Manual](https://github.com/JarryShaw/MacDaily/tree/master/src#macdaily-general-manual). And here is a brief catalogue for the manual.\n\n * [Archive Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#archive)\n * [Config Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#config)\n * [Launch Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#launch)\n * [Update Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#update)\n     - [Atom Plug-In](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_apm)\n     - [Ruby Gem](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_gem)\n     - [Mac App Store](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_mas)\n     - [Node.js Module](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_npm)\n     - [Python Package](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_pip)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_brew)\n     - [Caskroom Binary](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_cask)\n     - [System Software](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_system)\n     - [Cleanup Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src/libupdate#update_cleanup)\n * [Uninstall Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#uninstall)\n     - [Python Package](https://github.com/JarryShaw/MacDaily/tree/master/src/libuninstall#uninstall_pip)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/libuninstall#uninstall_brew)\n     - [Caskroom Binary](https://github.com/JarryShaw/MacDaily/tree/master/src/libuninstall#uninstall_cask)\n * [Reinstall Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#reinstall)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/libprinstall#reinstall_brew)\n     - [Caskroom Binary](https://github.com/JarryShaw/MacDaily/tree/master/src/libprinstall#reinstall_cask)\n     - [Cleanup Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src/libprinstall#reinstall_cleanup)\n * [Postinstall Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#postinstall)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/libprinstall#postinstall_brew)\n     - [Cleanup Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src/libprinstall#postinstall_cleanup)\n * [Dependency Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#dependency)\n     - [Python Package](https://github.com/JarryShaw/MacDaily/tree/master/src/libdependency#dependency_pip)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/libdependency#dependency_brew)\n * [Logging Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#logging)\n     - [Atom Plug-In](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_apm)\n     - [Ruby Gem](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_gem)\n     - [Node.js Module](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_npm)\n     - [Python Package](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_pip)\n     - [Homebrew Formula](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_brew)\n     - [Caskroom Binary](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_cask)\n     - [macOS Application](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_dotapp)\n     - [Installed Application](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_macapp)\n     - [Mac App Store](https://github.com/JarryShaw/MacDaily/tree/master/src/liblogging#logging_appstore)\n * [Bundle Procedure](https://github.com/JarryShaw/MacDaily/tree/master/src#bundle)\n     - [Dump Macfile](https://github.com/JarryShaw/MacDaily/tree/master/src/libbundle#bundle_dump)\n     - [Load Macfile](https://github.com/JarryShaw/MacDaily/tree/master/src/libbundle#bundle_load)\n\n&nbsp;\n\n<a name=\"issue\"> </a>\n\n## Troubleshooting\n\n1. Where can I find the log files?\n\n    &emsp; It depends. Since the path where logs go can be modified through `~/.dailyrc`, it may vary as your settings. In default, you may find them under `~/Library/Logs/Scripts`. And with every command, logs can be found in its corresponding folder. Logs are named after its running time, in the fold with corresponding date as its name.\n\n    &emsp; Note that, normally, you can only find today's logs in the folder, since `macdaily` automatically archive ancient logs into `${logdir}/archive` folder. And every week, `${logdir}/archive` folder will be tape-archived into `${logdir}/tarfile`. Then after a month, and your hard disk available, they will be moved into `/Volumes/Your Diks/Developers/archive.zip`.\n\n2. What if my hard disk ain't plugged-in when running the scripts?\n\n    &emsp; Then the archiving and removing procedure will __NOT__ perform. In case there might be some useful resources of yours.\n\n3. Which directory should I set in the configuration file?\n\n    &emsp; First and foremost, I highly recommend you __NOT__ to modify the paths in `~/.dailyrc` manually, __EXCEPT__ your disk path `dskdir`.\n\n    &emsp; But if you insist to do so, then make sure they are __VALID__ and ***available*** with permission granted, and most importantly, have __NO__ blank characters (` \\t\\n\\r\\f\\v`) in the path, except `dskdir`.\n\n&nbsp;\n\n<a name=\"todo\"> </a>\n\n## TODO\n\n - [x] support configuration\n - [x] support command aliases\n - [x] reconstruct archiving procedure\n - [ ] support `gem` and `npm` in all commands\n - [x] optimise `KeyboardInterrupt` handling procedure\n - [ ] review `pip` implementation and version indication\n - [x] considering support more versions of Python\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JarryShaw/macdaily#macdaily",
    "keywords": "daily utility script",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macdaily",
    "package_url": "https://pypi.org/project/macdaily/",
    "platform": "",
    "project_url": "https://pypi.org/project/macdaily/",
    "project_urls": {
      "Homepage": "https://github.com/JarryShaw/macdaily#macdaily"
    },
    "release_url": "https://pypi.org/project/macdaily/2018.9.20/",
    "requires_dist": [
      "setuptools",
      "pipdeptree; extra == 'pipdeptree'"
    ],
    "requires_python": ">=3.5",
    "summary": "Package day-care manager on macOS.",
    "version": "2018.9.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5631951,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fa634e85a724218d3dc0a4308ddd281641ce3bd3510a52e94f5f1e793986bb7",
        "md5": "5d07388c3c8940d5e52267797604aa13",
        "sha256": "fb3bbb1e4a4f0c53e51e5867f30a6765e3b52854b176483018d13ec9635f736c"
      },
      "downloads": -1,
      "filename": "macdaily-2018.9.20-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d07388c3c8940d5e52267797604aa13",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 148808,
      "upload_time": "2018-09-20T03:57:14",
      "upload_time_iso_8601": "2018-09-20T03:57:14.943487Z",
      "url": "https://files.pythonhosted.org/packages/6f/a6/34e85a724218d3dc0a4308ddd281641ce3bd3510a52e94f5f1e793986bb7/macdaily-2018.9.20-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65aaea352a83cb660829ccf9650a39e509c7e42988c28af5e82497c4bfe76fa2",
        "md5": "42df18c303511b89b3befd9e99f5134a",
        "sha256": "d937b1b757fe50065ad61194358c7b17b5ff861d4bf1fdc57c7061f7013be47f"
      },
      "downloads": -1,
      "filename": "macdaily-2018.9.20.tar.gz",
      "has_sig": false,
      "md5_digest": "42df18c303511b89b3befd9e99f5134a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 76707,
      "upload_time": "2018-09-20T03:57:16",
      "upload_time_iso_8601": "2018-09-20T03:57:16.573739Z",
      "url": "https://files.pythonhosted.org/packages/65/aa/ea352a83cb660829ccf9650a39e509c7e42988c28af5e82497c4bfe76fa2/macdaily-2018.9.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}