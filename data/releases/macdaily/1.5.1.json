{
  "info": {
    "author": "Jarry Shaw",
    "author_email": "jarryshaw@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Unix Shell",
      "Topic :: Utilities"
    ],
    "description": "---\nPlatform: macOS High Sierra | Mojave\n\nLanguage: Python | Bourne-Again Shell\n\nEnvironment: Console | Terminal\n---\n\n&nbsp;\n\n# MacDaily\n\n[![Downloads](http://pepy.tech/badge/macdaily)](http://pepy.tech/count/macdaily)\n[![version](https://img.shields.io/pypi/v/macdaily.svg)](https://pypi.org/project/macdaily)\n[![format](https://img.shields.io/pypi/format/macdaily.svg)](https://pypi.org/project/macdaily)\n[![status](https://img.shields.io/pypi/status/macdaily.svg)](https://pypi.org/project/macdaily)\n\n[![language](https://img.shields.io/github/languages/top/JarryShaw/macdaily.svg)](https://github.com/JarryShaw/macdaily)\n[![made-with-bash](https://img.shields.io/badge/Made%20with-Bash-1f425f.svg)](https://www.gnu.org/software/bash)\n[![python](https://img.shields.io/pypi/pyversions/macdaily.svg)](https://python.org)\n[![implementation](https://img.shields.io/pypi/implementation/macdaily.svg)](http://pypy.org)\n\n&nbsp;\n\n - [About](#about)\n - [Installation](#install)\n - [Configuration](#configuration)\n - [Usage Manual](#usage)\n    * [Start-Up](#startup)\n    * [Commands](#command)\n    * [Archive Procedure](#archive)\n    * [Config Procedure](#config)\n    * [Launch Procedure](#launch)\n    * [Update Procedure](#update)\n        - [Atom Plug-In](#update_apm)\n        - [Ruby Gem](#update_gem)\n        - [Mac App Store](#update_mas)\n        - [Node.js Module](#update_npm)\n        - [Python Package](#update_pip)\n        - [Homebrew Formula](#update_brew)\n        - [Caskroom Binary](#update_cask)\n        - [System Software](#update_system)\n        - [Cleanup Procedure](#update_cleanup)\n    * [Uninstall Procedure](#uninstall)\n        - [Python Package](#uninstall_pip)\n        - [Homebrew Formula](#uninstall_brew)\n        - [Caskroom Binary](#uninstall_cask)\n    * [Reinstall Procedure](#reinstall)\n        - [Homebrew Formula](#reinstall_brew)\n        - [Caskroom Binary](#reinstall_cask)\n        - [Cleanup Procedure](#reinstall_cleanup)\n    * [Postinstall Procedure](#postinstall)\n        - [Homebrew Formula](#postinstall_brew)\n        - [Cleanup Procedure](#postinstall_cleanup)\n    * [Dependency Procedure](#dependency)\n        - [Python Package](#dependency_pip)\n        - [Homebrew Formula](#dependency_brew)\n    * [Logging Procedure](#logging)\n        - [Atom Plug-In](#logging_apm)\n        - [Ruby Gem](#logging_gem)\n        - [Node.js Module](#logging_npm)\n        - [Python Package](#logging_pip)\n        - [Homebrew Formula](#logging_brew)\n        - [Caskroom Binary](#logging_cask)\n        - [macOS Application](#logging_dotapp)\n        - [Installed Application](#logging_macapp)\n        - [Mac App Store](#logging_appstore)\n    * [Bundle Procedure](#bundle)\n        - [Dump Macfile](#bundle_dump)\n        - [Load Macfile](#bundle_load)\n - [Troubleshooting](#issue)\n - [TODO](#todo)\n\n---\n\n&nbsp;\n\n<a name=\"about\"> </a>\n\n## About\n\n > Just some useful daily utility scripts.\n\n&emsp; `macdaily` is a mediate collection of console scripts written in __Python__ and __Bourne-Again Shell__. Originally works as an automatic housekeeper for Mac to update all packages outdated, `macdaily` is now fully functioned and end-user oriented. Without being aware of everything about your Mac, one can easily work around and manage packages out of no pain using `macdaily`.\n\n&nbsp;\n\n<a name=\"install\"> </a>\n\n## Installation\n\n&emsp; Just as many Python packages, `macdaily` can be installed through `pip` using the following command, which will get you the latest version from [PyPI](https://pypi.org).\n\n```sh\npip install macdaily\n```\n\n&emsp; Or if you prefer the real-latest version and fetch from this Git repository, then the script below should be used.\n\n```sh\ngit clone https://github.com/JarryShaw/macdaily.git\ncd macdaily\npip install -e .\n# and to update at any time\ngit pull\n```\n\n&emsp; And for tree format support in dependency command, you may need `pipdeptree`, then implicily you can use the following script to do so.\n\n```sh\npip install macdaily[pipdeptree]\n# or explicitly...\npip install macdaily pipdeptree\n```\n\n&emsp; Do please __NOTE__ that, `macdaily` runs only with support of Python from version ***3.6*** and on. And it shall only work ideally on ***macOS***.\n\n&nbsp;\n\n<a name=\"configuration\"> </a>\n\n## Configuration\n\n > This part might be kind of garrulous, for some may not know what's going on here. :wink:\n\n&emsp; Since robust enough, `macdaily` now supports configuration upon user's own wish. One may set up log path, hard disk path, archive path and many other things, other than the default settings.\n\n > __NOTA BENE__ -- `macdaily` now supports configuration commands, see [Config Procedure](#config) section for more information.\n\n&emsp; The configuration file should lie under `~/.dailyrc`, which is hidden from Finder by macOS. To review or edit it, you may use text editors like `vim` and `nano`, or other graphic editors, such as `Sublime Text` and `Atom`, or whatever you find favourable.\n\n```\n[Path]\n# In this section, paths for log files are specified.\n# Please, under any circumstances, make sure they are valid.\nlogdir = ~/Library/Logs/MacDaily    ; path where logs will be stored\ntmpdir = /tmp/dailylog              ; path where temporary runtime logs go\ndskdir = /Volumes/Your Disk         ; path where your hard disk lies\narcdir = ${dskdir}/Developers       ; path where ancient logs archive\n\n[Mode]\n# In this section, flags for modes are configured.\n# If you would like to disable the mode, set it to \"false\".\napm      = true     ; Atom packages\ngem      = true     ; Ruby gems\nmas      = true     ; Mac App Store applications\nnpm      = true     ; Node.js modules\npip      = true     ; Python packages\nbrew     = true     ; Homebrew Cellars\ncask     = true     ; Caskroom Casks\ndotapp   = true     ; Applications (*.app)\nmacapp   = true     ; all applications in /Application folder\nsystem   = true     ; macOS system packages\ncleanup  = true     ; cleanup caches\nappstore = true     ; Mac App Store applications in /Application folder\n\n[Daemon]\n# In this section, scheduled tasks are set up.\n# You may append and/or remove the time intervals.\nupdate      = true      ; run update on schedule\nuninstall   = false     ; don't run uninstall\nreinstall   = false     ; don't run reinstall\npostinstall = false     ; don't run postinstall\ndependency  = false     ; don't run dependency\nlogging     = true      ; run logging on schedule\nschedule    =           ; scheduled timing (in 24 hours)\n    8:00                ; update & logging at 8:00\n    22:30-update        ; update at 22:30\n    23:00-logging       ; logging at 23:00\n\n[Option]\n# In this section, command options are picked.\n# Do make sure these options are available for commands.\nupdate  = --all --yes --pre --restart --show-log\nlogging = --all --show-log\n```\n\n&emsp; Above is the default content of `.dailyrc`, following the grammar of `INI` files. Lines and words after number sign (`'#'`) and semicolon (`';'`) are comments, whose main purpose is to help understanding the contents of this file.\n\n&emsp; In section `[Path]`, there are path names where logs and some other things to be stored. In section `[Mode]`, there are ten different modes to indicate if they are *enabled* or *disabled* when calling from `--all` option.\n\n&emsp; You may wish to set the `dskdir` -- *path where your hard disk lies*, which allows `macdaily` to archive your ancient logs and caches into somewhere never bothers. \n\n&emsp; Please __NOTE__ that, under all circumstances, of section `[Path]`, all values would better be a ***valid path name without blank characters*** (`' \\t\\n\\r\\f\\v'`), except your hard disk `dskdir`.\n\n&emsp; Besides, in section `[Daemon]`, you can decide which command is scheduled and when to run such command, with the format of `HH:MM[-CMD]`. \n\n&emsp; The `CMD` is optional, which will be `any` if omits. And you may setup which command(s) will be registered as daemons and run with schedule through six booleans above. These boolean values help `macdaily` indicate which is to be launched when commands in `schedule` omit. That is to say, when `command` omits in `schedule`, `macdaily` will register all commands that set `true` in the above boolean values.\n\n&emsp; Also, in section `[Option]`, you may set up optional arguments for the daemons above. Do please make sure these commands are **valid**. And if omit, an empty arguments will be given.\n\n&nbsp;\n\n<a name=\"usage\"> </a>\n\n## Usage Manual\n\n<a name=\"startup\"> </a>\n\n### Start-Up\n\n&emsp; Before we dive into the detailed usage of `macdaily`, let's firstly get our hands dirty with some simple commands.\n\n > __NOTE__ -- all acronyms and aliases are left out for a quick and clear view of `macdaily`\n\n1. How to use `macdaily`?\n\n    ```shell\n    # call from $PATH\n    macdaily [command ...] [flag ...]\n    # or call from Python module\n    python -m macdaily [command ...] [flag ...]\n    ```\n\n2. How to setup my disks and daemons?\n\n    ```\n    $ macdaily config\n    ```\n\n3. How to relaunch daemons after I manually modified `~/.dailyrc`?\n\n    ```\n    $ macdaily launch\n    ```\n\n4. How to archive ancient logs without running any commands?\n\n    ```\n    $ macdaily archive\n    ```\n\n5. How to update all outdated packages?\n\n    ```\n    $ macdaily update --all\n    ```\n\n6. How to update a certain package (eg: `hello` from Homebrew) ?\n\n    ```\n    $ macdaily update brew --package hello\n    ```\n\n7. How to uninstall a certain package along with its dependencies (eg: `pytest` from brewed CPython version 3.6) ?\n\n    ```\n    $ macdaily uninstall pip --brew --cpython --python_version=3 --package pytest\n    ```\n\n8. How to reinstall all packages but do not cleanup caches?\n\n    ```\n    $ macdaily reinstall --all --no-cleanup\n    ```\n\n9. How to postinstall packages whose name ranges between \"start\" and \"stop\" alphabetically?\n\n    ```\n    $ macdaily postinstall --all --startwith=start --endwith=stop\n    ```\n\n10. How to show dependency of a certain package as a tree (eg: `gnupg` from Homebrew) ?\n\n    ```\n    $ macdaily dependency brew --package gnupg --tree\n    ```\n\n11. How to log all applications on my Mac, a.k.a. `*.app` files?\n\n    ```\n    $ macdaily logging dotapp\n    ```\n\n12. How to run `macdaily` in quiet mode, i.e. with no output information (eg: `logging` in quiet mode) ?\n\n    ```\n    $ macdaily logging --all --quiet\n    ```\n\n13. How to dump a `Macfile` to keep track of all packages?\n\n    ```\n    $ macdaily bundle dump\n    ```\n\n<a name=\"command\"> </a>\n\n### Commands\n\n&emsp; `macdaily` supports several different commands, from `archive`, `config`, `launch`, `update`, `unisntall`, `reinstall` and `postinstall` to `dependency` and `logging`. Of all commands, there are corresponding **aliases** for which to be reckoned as valid.\n\n| Command                       | Aliases                         |\n| :---------------------------- | :------------------------------ |\n| [`archive`](#archive)         |                                 |\n| [`bundle`](#bundle)           |                                 |\n| [`config`](#config)           | `cfg`                           |\n| [`launch`](#launch)           | `init`                          |\n| [`update`](#update)           | `up`, `upgrade`                 |\n| [`uninstall`](#uninstall)     | `un`, `remove`, `rm`, `r`, `un` |\n| [`reinstall`](#reinstall)     | `re`                            |\n| [`postinstall`](#postinstall) | `post`, `ps`,                   |\n| [`dependency`](#dependency)   | `deps`, `dp`                    |\n| [`logging`](#logging)         | `log`                           |\n\n&emsp; And the man page of `macdaily` shows as below.\n\n```\n$ macdaily --help\nusage: macdaily [-h] command\n\nPackage Day Care Manager\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -V, --version  show program's version number and exit\n\nCommands:\n  macdaily provides a friendly CLI workflow for the administrator of macOS to\n  manipulate packages\n```\n\n<a name=\"archive\"> </a>\n\n### Archive Procedure\n\n```\n$ macdaily archive\n```\n\n&emsp; The `archive` command will move all ancient logs to where it belongs --\n\n - daily logs from last week (7 days) -- `${logdir}/archive` with corresponding modes named as `YYMMDD.tar.gz`\n - weekly archives from last month (approximately 4 weeks) -- `${logdir}/tarfile` with corresponding modes named as `YYMMDD-YYMMDD.tar.bz`\n - even older logs -- inside `${arcdir}/archive.zip` with corresponding modes and named as `YYMMDD-YYMMDD.tar.xz`\n\nActual paths of `${logdir}` and `${arcdir}` are defined in `~/.dailyrc`, may vary from your own settings.\n\n<a name=\"config\"> </a>\n\n### Config Procedure\n\n```\n$ macdaily config\nEntering interactive command line setup procedure...\nDefault settings are shown as in the square brackets.\nPlease directly ENTER if you prefer the default settings.\n\nFor logging utilities, we recommend you to set up your hard disk path.\nYou may change other path preferences in configuration `~/.dailyrc` later.\nPlease note that all paths must be valid under all circumstances.\nName of your hard disk []:\n\nIn default, we will run update and logging commands twice a day.\nYou may change daily commands preferences in configuration `~/.dailyrc` later.\nPlease enter schedule as HH:MM[-CMD] format, and each separates with comma.\nTime for daily scripts [8:00,22:30-update,23:00-logging]:\n```\n\n&emsp; As shown above, the `config` command will help modify `~/.dailyrc`. For more information on `~/.dailyrc`, please refer to the [Configuration](#configuration) section.\n\n### Launch Procedure\n\n```\n$ macdaily launch\n```\n\n&emsp; The `launch` command will reload `~/.dailyrc` and register daemons to `Launch Agents` on macOS. After manually modified  `[Daemon]` section on `~/.dailyrc`, it is manditory to run the `launch` command to activate these settings.\n\n<a name=\"update\"> </a>\n\n### Update Procedure\n\n&emsp; The `update` command will automatically update all outdated packages installed through --\n\n - `apm` -- [Atom](https://atom.io) plug-ins\n - `gem` -- [Ruby](https://www.ruby-lang.org) gems\n - `mas` -- [Mac App Store](https://github.com/mas-cli/mas#mas-cli) applications\n - `npm` -- [Node.js](https://nodejs.org) modules\n - `pip` -- Python packages, in both version of 2.\\* and 3.\\*, running under [CPython](https://www.python.org) or [PyPy](https://pypy.org) compiler, and installed through `brew` or official disk images (`*.dmg`)\n - `brew` -- [Homebrew](https://brew.sh) formulae\n - `cask` -- [Caskroom](https://caskroom.github.io) binaries\n - `system` -- [`softwareupdate(8)`](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man8/softwareupdate.8.html) system software\n\nand an additional `cleanup` procedure, which prunes and deduplicates files, archives and removes caches. The man page of `update` shows as below.\n\n```\n$ macdaily update --help\nusage: macdaily update [-hV] [-qv] [-fgm] [-a] [--[no-]MODE] MODE ...\n\nAutomatic Package Update Manager\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -V, --version  show program's version number and exit\n  -a, --all      update all packages installed through Atom, pip, RubyGem,\n                 Node.js, Homebrew, Caskroom, App Store, and etc\n  -f, --force    run in force mode, only for Homebrew or Caskroom\n  -m, --merge    run in merge mode, only for Homebrew\n  -g, --greedy   run in greedy mode, only for Caskroom\n  -r, --restart  automatically restart if necessary, only for App Store\n  -Y, --yes      yes for all selections, only for pip\n  -q, --quiet    run in quiet mode, with no output information\n  -v, --verbose  run in verbose mode, with detailed output information\n  --show-log     open log in Console upon completion of command\n\nmode selection:\n  MODE           update outdated packages installed through a specified\n                 method, e.g.: apm, gem, mas, npm, pip, brew, cask, system, or\n                 alternatively and simply, cleanup\n\naliases: update, up, U, upgrade\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not update under any circumstances. To update all packages, use one of the commands below.\n\n```\n$ macdaily update -a\n$ macdaily update --all\n```\n\n<a name=\"update_apm\"> </a>\n\n1. `apm` -- Atom Plug-In\n\n&emsp; [Atom](https://atom.io) provides a package manager called `apm`, i.e. \"Atom Package Manager\". The man page for `macdaily update apm` shows as below.\n\n```\n$ macdaily update apm --help\nusage: macdaily update apm [-h] [-qv] [-a] [-p PKG]\n\nUpdate Installed Atom Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through apm\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Atom. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_gem\"> </a>\n\n2. `gem` -- Ruby Gem\n\n&emsp; [Ruby](https://www.ruby-lang.org) provides a package manager called `gem`, which may refer to\n\n - `/usr/bin/gem` -- system built-in RubyGem (which is left out for security reasons)\n - `/usr/local/bin/gem` -- brewed or installed through other methods by user\n\nThe man page for `macdaily update gem` shows as below.\n\n```\n$ macdaily update gem --help\nusage: macdaily update gem [-h] [-qv] [-a] [-p PKG]\n\nUpdate Installed Ruby Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through gem\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Ruby. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_mas\"> </a>\n\n3. `mas` -- Mac App Store Application\n\n&emsp; [MAS](https://github.com/mas-cli/mas#mas-cli) is a simple command line interface for the Mac App Store. The man page for [`macdaily update mas`] shows as below.\n\n```\n$ macdaily update mas --help\nusage: macdaily update mas [-h] [-qv] [-a] [-p PKG]\n\nUpdate Installed Mac App Store Packagess\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through Mac App Store\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Ruby. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_npm\"> </a>\n\n4. `npm` -- Node.js Module\n\n&emsp; [Node.js](https://nodejs.org) provides a package manager called `npm`, i.e. \"Node.js Package Manger\". The man page for `macdaily update npm` shows as below.\n\n```\n$ macdaily update npm --help\nusage: macdaily update npm [-h] [-qv] [-a] [-p PKG]\n\nUpdate Installed Node.js Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through gem\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Ruby. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_pip\"> </a>\n\n5. `pip` -- Python Package\n\n&emsp; As there\\'re all kinds and versions of Python complier, along with its `pip` package manager. Here, we support update of the following --\n\n - Python 2.\\*/3.\\* installed through Python official disk images (`*.dmg`)\n - Python 2/3 installed through `brew install python@2/python`\n - PyPy 2/3 installed through `brew install pypy/pypy3`\n\nAnd the man page for `macdaily update pip` shows as below.\n\n```\n$ macdaily update pip --help\nusage: macdaily update pip [-h] [-qv] [-bcsy] [-V VER] [-a] [-p PKG]\n\nUpdate Installed Python Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through pip\n  -V VER, --python_version VER\n                        indicate which version of pip will be updated\n  -s, --system          update pip packages on system level, i.e. python\n                        installed through official installer\n  -b, --brew            update pip packages on Cellar level, i.e. python\n                        installed through Homebrew\n  -c, --cpython         update pip packages on CPython environment\n  -y, --pypy            update pip packages on PyPy environment\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages in all copies of Python. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_brew\"> </a>\n\n6. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS. The man page for `macdaily update brew` shows as below.\n\n```\n$ macdaily update brew --help\nusage: macdaily update brew [-h] [-qv] [-fm] [-a] [-p PKG] [--no-cleanup]\n\nUpdate Installed Homebrew Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through Homebrew\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -f, --force           use \"--force\" when running `brew update`\n  -m, --merge           use \"--merge\" when running `brew update`\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n  --no-cleanup          do not remove caches & downloads\n```\n\n > __NOTE__ -- arguments `-f` and `--force`, `-m` and `--merge` are using only for `brew update` command\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Homebrew. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_cask\"> </a>\n\n7. `cask` -- Caskrooom Binary\n\n&emsp; [Caskroom](https://caskroom.github.io) is a friendly binary installer for macOS. The man page for `macdaily update cask` shows as below.\n\n```\n$ macdaily update cask --help\nusage: macdaily update cask [-h] [-qv] [-fg] [-a] [-p PKG] [--no-cleanup]\n\nUpdate Installed Caskroom Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through Caskroom\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -f, --force           use \"--force\" when running `brew cask upgrade`\n  -g, --greedy          use \"--greedy\" when running `brew cask outdated`, and\n                        directly run `brew cask upgrade --greedy`\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n  --no-cleanup          do not remove caches & downloads\n```\n\n > __NOTE__ -- arguments `-f` and `--force`, `-g` and `--greedy` are using only for `brew cask upgrade` command; and when the latter given, `macdaily` will directly run `brew cask upgrade --greedy`\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages of Caskroom. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_appstore\"> </a>\n\n8. `system` -- Mac App Store\n\n&emsp; `softwareupdate` is the system software update tool. The man page for `macdaily update system` shows as below.\n\n```\n$ macdaily update system --help\nusage: macdaily update system [-h] [-q] [-a] [-p PKG]\n\nUpdate installed App Store packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             update all packages installed through App Store\n  -p PKG, --package PKG\n                        name of packages to be updated, default is all\n  -q, --quiet           run in quiet mode, with no output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ update outdated packages in Mac App Store or `softwareupdate`. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial \"did-you-mean\" correction.\n\n<a name=\"update_cleanup\"> </a>\n\n9. `cleanup` -- Cleanup Procedure\n\n&emsp; `cleanup` prunes and deduplicates files, archives and removes caches. The man page for `macdaily update cleanup` shows as below.\n\n```\n$ macdaily update cleanup --help\nusage: macdaily update cleanup [-h] [-q] [--no-brew] [--no-cask]\n\nCleanup Caches & Downloads\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --no-gem     do not remove Ruby caches & downloads\n  --no-npm     do not remove Node.js caches & downloads\n  --no-pip     do not remove Python caches & downloads\n  --no-brew    do not remove Homebrew caches & downloads\n  --no-cask    do not remove Caskroom caches & downloads\n  -q, --quiet  run in quiet mode, with no output information\n```\n\n&emsp; If arguments omit, `macdaily` will cleanup all caches as its default setup.\n\n<a name=\"uninstall\"> </a>\n\n### Uninstall Procedure\n\n&emsp; The `uninstall` command will recursively uninstall all dependency packages installed through --\n\n - `pip` -- Python packages, in both version of 2.\\* and 3.\\*, running under [CPython](https://www.python.org) or [PyPy](https://pypy.org) compiler, and installed through `brew` or official disk images (`*.dmg`)\n - `brew` -- [Homebrew](https://brew.sh) formulae\n - `cask` -- [Caskroom](https://caskroom.github.io) binaries\n\nThe man page of `uninstall` shows as below.\n\n```\n$ macdaily uninstall --help\nusage: macdaily uninstall [-hV] [-qv] [-fiY] [-a] [--[no-]MODE] MODE ...\n\nPackage Recursive Uninstall Manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -a, --all             uninstall all packages installed through pip,\n                        Homebrew, and App Store\n  -f, --force           run in force mode, only for Homebrew and Caskroom\n  -i, --ignore-dependencies\n                        run in non-recursive mode, only for Python and Homebrew\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with more information\n  -Y, --yes             yes for all selections\n\nmode selection:\n  MODE                  uninstall given packages installed through a specified\n                        method, e.g.: pip, brew or cask\n\naliases: uninstall, remove, rm, r, un\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not uninstall under any circumstances. To uninstall all packages, use one of the commands below.\n\n```\n$ macdaily uninstall -a\n$ macdaily uninstall --all\n```\n\n<a name=\"uninstall_pip\"> </a>\n\n1. `pip` -- Python Package\n\n&emsp; As there're several kinds and versions of Python complier, along wiht its `pip` package manager. Here, we support uninstall procedure in following --\n\n - Python 2.\\*/3.\\* installed through Python official disk images (`*.dmg`)\n - Python 2/3 installed through `brew install python@2/python`\n - PyPy 2/3 installed through `brew install pypy/pypy3`\n\n&emsp; And the man page for `macdaily uninstall pip` shows as below.\n\n```\n$ macdaily uninstall pip --help\nusage: macdaily uninstall pip [-h] [-qv] [-iY] [-bcsy] [-V VER] [-a] [-p PKG]\n\nUninstall Installed Python Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             uninstall all packages installed through pip\n  -V VER, --python_version VER\n                        indicate packages in which version of pip will be\n                        uninstalled\n  -s, --system          uninstall pip packages on system level, i.e. python\n                        installed through official installer\n  -b, --brew            uninstall pip packages on Cellar level, i.e. python\n                        installed through Homebrew\n  -c, --cpython         uninstall pip packages on CPython environment\n  -y, --pypy            uninstall pip packages on Pypy environment\n  -p PKG, --package PKG\n                        name of packages to be uninstalled, default is null\n  -i, --ignore-dependencies\n                        run in non-recursive mode, i.e. ignore dependencies\n                        of uninstalling packages\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with more information\n  -Y, --yes             yes for all selections\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ uninstall packages in all copies of Python. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"uninstall_brew\"> </a>\n\n2. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS. The man page for `macdaily uninstall brew` shows as below.\n\n```\n$ macdaily uninstall brew --help\nusage: macdaily uninstall brew [-h] [-qv] [-iY] [-f] [-a] [-p PKG]\n\nUninstall Installed Homebrew Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             uninstall all packages installed through Homebrew\n  -p PKG, --package PKG\n                        name of packages to be uninstalled, default is null\n  -f, --force           use \"--force\" when running `brew uninstall`\n  -i, --ignore-dependencies\n                        run in non-recursive mode, i.e. ignore dependencies of\n                        uninstalling packages\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with more information\n  -Y, --yes             yes for all selections\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ uninstall packages of Homebrew. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"uninstall_cask\"> </a>\n\n3. `cask` -- Caskrooom Binary\n\n&emsp; [Caskroom](https://caskroom.github.io) is a friendly binary installer for macOS. The man page for `macdaily uninstall cask` shows as below.\n\n```\n$ macdaily uninstall cask --help\nusage: macdaily uninstall cask [-h] [-qv] [-Y] [-f] [-a] [-p PKG]\n\nUninstall Installed Caskroom Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             uninstall all packages installed through Caskroom\n  -p PKG, --package PKG\n                        name of packages to be uninstalled, default is null\n  -f, --force           use \"--force\" when running `brew cask uninstall`\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with more information\n  -Y, --yes             yes for all selections\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ uninstall packages of Caskroom. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"reinstall\"> </a>\n\n### Reinstall Procedure\n\n&emsp; The `reinstall` command will automatically reinstall all given packages installed through --\n\n - `brew` -- [Homebrew](https://brew.sh) formulae\n - `cask` -- [Caskroom](https://caskroom.github.io) binaries\n\nand an additional `cleanup` procedure, which prunes and deduplicates files, archives and removes caches. The man page of `reinstall` shows as below.\n\n```\n$ macdaily reinstall --help\nusage: macdaily reinstall [-hV] [-qv] [-f] [-es PKG] [-a] [--[no-]MODE] MODE ...\n\nHomebrew Package Reinstall Manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -a, --all             reinstall all packages installed through Homebrew and\n                        Caskroom\n  -s START, --startwith START\n                        reinstall procedure starts from which package, sort in\n                        initial alphabets\n  -e START, --endwith START\n                        reinstall procedure ends until which package, sort in\n                        initial alphabets\n  -f, --force           run in force mode, using for `brew reinstall`\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n\nmode selection:\n  MODE                  reinstall packages installed through a specified\n                        method, e.g.: brew or cask, or alternatively and\n                        simply, cleanup\n\naliases: reinstall, re, R\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not reinstall under any circumstances. To reinstall all packages, use one of the commands below.\n\n```\n$ macdaily reinstall -a\n$ macdaily reinstall --all\n```\n\n<a name=\"reinstall_brew\"> </a>\n\n1. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS. The man page for `macdaily reinstall brew` shows as below.\n\n```\n$ macdaily reinstall brew --help\nusage: macdaily reinstall brew [-hV] [-qv] [-f] [-se PKG] [-a] [--[no-]MODE] MODE ...\n\nReinstall Homebrew Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             reinstall all packages installed through Homebrew\n  -p PKG, --package PKG\n                        name of packages to be reinstalled, default is null\n  -s START, --startwith START\n                        reinstall procedure starts from which package, sort in\n                        initial alphabets\n  -e START, --endwith START\n                        reinstall procedure ends until which package, sort in\n                        initial alphabets\n  -f, --force           run in force mode, using for `brew reinstall`\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ reinstall packages of Homebrew. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"reinstall_cask\"> </a>\n\n2. `cask` -- Caskrooom Binary\n\n&emsp; [Caskroom](https://caskroom.github.io) is a friendly binary installer for macOS. The man page for `macdaily reinstall cask` shows as below.\n\n```\n$ macdaily reinstall cask --help\nusage: macdaily reinstall cask [-hV] [-qv] [-se PKG] [-a] [--[no-]MODE] MODE ...\n\nReinstall Caskroom Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             reinstall all packages installed through Caskroom\n  -p PKG, --package PKG\n                        name of packages to be reinstalled, default is null\n  -s START, --startwith START\n                        reinstall procedure starts from which package, sort in\n                        initial alphabets\n  -e START, --endwith START\n                        reinstall procedure ends until which package, sort in\n                        initial alphabets\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ reinstall packages of Caskroom. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"reinstall_cleanup\"> </a>\n\n3. `cleanup` -- Cleanup Procedure\n\n&emsp; `cleanup` prunes and deduplicates files, archives and removes caches. The man page for `macdaily reinstall cleanup` shows as below.\n\n```\n$ macdaily update reinstall --help\nusage: macdaily reinstall cleanup [-h] [-q] [--no-brew] [--no-cask]\n\nCleanup Caches & Downloads\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --no-brew    do not remove Homebrew caches & downloads\n  --no-cask    do not remove Caskroom caches & downloads\n  -q, --quiet  run in quiet mode, with no output information\n```\n\n&emsp; If arguments omit, `macdaily` will cleanup all caches as its default setup.\n\n<a name=\"postinstall\"> </a>\n\n### Postinstall Procedure\n\n&emsp; The `postinstall` command will automatically postinstall all given packages installed through --\n\n - `brew` -- [Homebrew](https://brew.sh) formulae\n\nand an additional `cleanup` procedure, which prunes and deduplicates files, archives and removes caches. The man page of `postinstall` shows as below.\n\n```\n$ macdaily postinstall --help\nusage: macdaily postinstall [-hV] [-qv] [-eps PKG] [-a] [--no-cleanup]\n\nHomebrew Package Postinstall Manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -a, --all             postinstall all packages installed through Homebrew\n  -p PKG, --package PKG\n                        name of packages to be postinstalled, default is all\n  -s START, --startwith START\n                        postinstall procedure starts from which package, sort\n                        in initial alphabets\n  -e START, --endwith START\n                        postinstall procedure ends until which package, sort\n                        in initial alphabets\n  -q, --quiet           run in quiet mode, with no output information\n  -v, --verbose         run in verbose mode, with detailed output information\n  --no-cleanup          do not remove postinstall caches & downloads\n\naliases: postinstall, post, ps, p\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not postinstall under any circumstances. To postinstall all packages, use one of the commands below.\n\n```\n$ macdaily postinstall -a\n$ macdaily postinstall --all\n```\n\n<a name=\"postinstall_brew\"> </a>\n\n1. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS. If arguments omit, `macdaily` will __NOT__ postinstall packages of Homebrew. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"postinstall_cleanup\"> </a>\n\n2. `cleanup` -- Cleanup Procedure\n\n&emsp; `cleanup` prunes and deduplicates files, archives and removes caches. If `--no-cleanup` option not set, `macdaily` will cleanup all caches as its default setup.\n\n<a name=\"dependency\"> </a>\n\n### Dependency Procedure\n\n&emsp; The `dependency` command will automatically show dependencies of all packages installed through --\n\n - `pip` -- Python packages, in both version of 2.\\* and 3.\\*, running under [CPython](https://www.python.org) or [PyPy](https://pypy.org) compiler, and installed through `brew` or official disk images (`*.dmg`)\n - `brew` -- [Homebrew](https://brew.sh) formulae\n\nThe man page of `dependency` shows as below.\n\n```\n$ macdaily dependency --help\nusage: macdaily dependency [-hV] [-t] [-a] [--[no-]MODE] MODE ...\n\nTrivial Package Dependency Manager\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -V, --version  show program's version number and exit\n  -a, --all      show dependencies of all packages installed through pip and\n                 Homebrew\n  -t, --tree     show dependencies as a tree. This feature may request\n                 `pipdeptree`\n\nmode selection:\n  MODE           show dependencies of packages installed through a specified\n                 method, e.g.: pip or brew\n\naliases: dependency, deps, dep, dp, de, d\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not show dependencies under any circumstances. To show dependencies of all packages, use one of the commands below.\n\n```\n$ macdaily dependency -a\n$ macdaily dependency --all\n```\n\n<a name=\"dependency_pip\"> </a>\n\n1. `pip` -- Python Package\n\n&emsp; As there're several kinds and versions of Python complier, along with its `pip` package manager. Here, we support dependency procedure in following --\n\n - Python 2.\\*/3.\\* installed through Python official disk images (`*.dmg`)\n - Python 2/3 installed through `brew install python@2/python`\n - PyPy 2/3 installed through `brew install pypy/pypy3`\n\n&emsp; And the man page for `macdaily dependency pip` shows as below.\n\n```\n$ macdaily dependency pip --help\nusage: macdaily dependency pip [-h] [-qv] [-bcsy] [-V VER] [-a] [-p PKG]\n\nShow Dependencies of Python Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             show dependencies of all packages installed through\n                        pip\n  -v VER, --python_version VER\n                        indicate which version of pip will be updated\n  -s, --system          show dependencies of pip packages on system level,\n                        i.e. python installed through official installer\n  -b, --brew            show dependencies of pip packages on Cellar level,\n                        i.e. python installed through Homebrew\n  -c, --cpython         show dependencies of pip packages on CPython\n                        environment\n  -y, --pypy            show dependencies of pip packages on PyPy environment\n  -p PKG, --package PKG\n                        name of packages to be shown, default is all\n  -t, --tree            show dependencies as a tree. This feature requests\n                        `pipdeptree`\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ show package dependencies in all copies of Python. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"dependency_brew\"> </a>\n\n2. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS. The man page for `macdaily dependency brew` shows as below.\n\n```\n$ macdaily dependency brew --help\nusage: macdaily dependency brew [-h] [-t] [-a] [-p PKG]\n\nShow Dependencies of Homebrew Packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --all             show dependencies of all packages installed through\n                        Homebrew\n  -p PKG, --package PKG\n                        name of packages to be shown, default is all\n  -t, --tree            show dependencies as a tree\n```\n\n&emsp; If arguments omit, `macdaily` will __NOT__ show package dependencies of Homebrew. And when using `-p` or `--package`, if given wrong package name, `macdaily` might give a trivial “did-you-mean” correction.\n\n<a name=\"logging\"> </a>\n\n### Logging Procedure\n\n&emsp; The `logging` command will automatically log all applications and/or packages installed through --\n\n - `apm` -- [Atom](https://atom.io) plug-ins\n - `gem` -- [Ruby](https://www.ruby-lang.org) gems\n - `npm` -- [Node.js](https://nodejs.org) modules\n - `pip` -- Python packages, in both version of 2.\\* and 3.\\*, running under [CPython](https://www.python.org) or [PyPy](https://pypy.org) compiler, and installed through `brew` or official disk images (`*.dmg`)\n - `brew` -- [Homebrew](https://brew.sh) formulae\n - `cask` -- [Caskroom](https://caskroom.github.io) binaries\n - `dotapp` -- all `*.app` files on this Mac, a.k.a. `/` root directory\n - `macapp` -- applications in `/Application` folder\n - `appstore` -- Mac App Store applications\n\nThe man page of `logging` shows as below.\n\n```\n$ macdaily logging --help\nusage: macdaily logging [-hV] [-q] [-a] [-bcsy] [-v VER] [--[no-]MODE] [MODE [MODE ...]]\n\nApplication & Package Logging Manager\n\npositional arguments:\n  MODE                  name of logging mode, could be any from followings,\n                        apm, gem, pip, npm, brew, cask, dotapp, macapp, or\n                        appstore\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -a, --all             log applications and packages of all entries\n  -v VER, --python_version VER\n                        indicate which version of pip will be logged\n  -s, --system          log pip packages on system level, i.e. python\n                        installed through official installer\n  -b, --brewed          log pip packages on Cellar level, i.e. python\n                        installed through Homebrew\n  -c, --cpython         log pip packages on CPython environment\n  -y, --pypy            log pip packages on PyPy environment\n  -q, --quiet           run in quiet mode, with no output information\n  --show-log            open log in Console upon completion of command\n\naliases: logging, log, lg, l\n```\n\n&emsp; Note that disabled modes in configuration file `.dailyrc` will not be logged under any circumstances. To log all packages, use one of the commands below.\n\n```\n$ macdaily logging -a\n$ macdaily logging --all\n$ macdaily logging apm gem npm pip brew cask dotapp macapp appstore\n```\n\n<a name=\"logging_apm\"> </a>\n\n1. `apm` -- Atom Plug-In\n\n&emsp; [Atom](https://atom.io) provides a package manager called `apm`, i.e. \"Atom Package Manager\".\n\n<a name=\"logging_gem\"> </a>\n\n2. `gem` -- Ruby Gem\n\n&emsp; [Ruby](https://www.ruby-lang.org) provides a package manager called `gem`, which may refer to\n\n - `/usr/bin/gem` -- system built-in RubyGem (which is left out for security reasons)\n - `/usr/local/bin/gem` -- brewed or installed through other methods by user\n\n<a name=\"logging_npm\"> </a>\n\n3. `npm` -- Node.js Module\n\n&emsp; [Node.js](https://nodejs.org) provides a package manager called `npm`, i.e. \"Node.js Package Manger\".\n\n<a name=\"logging_pip\"> </a>\n\n4. `pip` -- Python Package\n\n&emsp; As there\\'re all kinds and versions of Python complier, along with its `pip` package manager. Here, we support update of the following --\n\n - Python 2.\\*/3.\\* installed through Python official disk images (`*.dmg`)\n - Python 2/3 installed through `brew install python@2/python`\n - PyPy 2/3 installed through `brew install pypy/pypy3`\n\n<a name=\"logging_brew\"> </a>\n\n5. `brew` -- Homebrew Formula\n\n&emsp; [Homebrew](https://brew.sh) is the missing package manager for macOS.\n\n<a name=\"logging_cask\"> </a>\n\n6. `cask` -- Caskrooom Binary\n\n&emsp; [Caskroom](https://caskroom.github.io) is a friendly binary installer for macOS.\n\n<a name=\"logging_dotapp\"> </a>\n\n7. `dotapp` -- macOS Application (`*.app`)\n\n > __NOTE__ -- symbolic links and files or folders under `/Volumes` are ignored\n\n&emsp; On macOS, applications are folders named as `*.app` files. The `logging dotapp` command will walk through all directories from `/` root directory and seek `*.app` files.\n\n<a name=\"logging_macapp\"> </a>\n\n8. `macapp` -- Installed Application\n\n&emsp; On macOS, system-wide applications are placed in `/Application` folder.\n\n<a name=\"logging_appstore\"> </a>\n\n9. `appstore` -- Mac App Store\n\n&emsp; On macOS, applications may be installed through Mac App Store, whose `*.app` folder will contain some identical information.\n\n&nbsp;\n\n<a name=\"issue\"> </a>\n\n## Troubleshooting\n\n1. Where can I find the log files?\n\n    &emsp; It depends. Since the path where logs go can be modified through `~/.dailyrc`, it may vary as your settings. In default, you may find them under `~/Library/Logs/Scripts`. And with every command, logs can be found in its corresponding folder. Logs are named after its running time, in the fold with corresponding date as its name.\n\n    &emsp; Note that, normally, you can only find today's logs in the folder, since `macdaily` automatically archive ancient logs into `${logdir}/archive` folder. And every week, `${logdir}/archive` folder will be tape-archived into `${logdir}/tarfile`. Then after a month, and your hard disk available, they will be moved into `/Volumes/Your Diks/Developers/archive.zip`.\n\n2. What if my hard disk ain't plugged-in when running the scripts?\n\n    &emsp; Then the archiving and removing procedure will __NOT__ perform. In case there might be some useful resources of yours.\n\n3. Which directory should I set in the configuration file?\n\n    &emsp; First and foremost, I highly recommend you __NOT__ to modify the paths in `~/.dailyrc` manually, __EXCEPT__ your disk path `dskdir`.\n\n    &emsp; But if you insist to do so, then make sure they are __VALID__ and ***available*** with permission granted, and most importantly, have __NO__ blank characters (`' \\t\\n\\r\\f\\v'`) in the path, except `dskdir`.\n\n&nbsp;\n\n<a name=\"todo\"> </a>\n\n## TODO\n\n - [x] support configuration\n - [x] support command aliases\n - [x] reconstruct archiving procedure\n - [ ] support `gem` and `npm` in all commands\n - [x] optimise `KeyboardInterrupt` handling procedure\n - [ ] review `pip` implementation and version indication\n - [ ] considering support more versions of Python\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JarryShaw/macdaily#macdaily",
    "keywords": "daily utility script",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macdaily",
    "package_url": "https://pypi.org/project/macdaily/",
    "platform": "",
    "project_url": "https://pypi.org/project/macdaily/",
    "project_urls": {
      "Homepage": "https://github.com/JarryShaw/macdaily#macdaily"
    },
    "release_url": "https://pypi.org/project/macdaily/1.5.1/",
    "requires_dist": [
      "setuptools",
      "pipdeptree; extra == 'pipdeptree'"
    ],
    "requires_python": ">=3.6",
    "summary": "Package day-care manager on macOS.",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5631951,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fc5c588621cef0721301faa981254c18a5e4e960d2c00f0d7f10a9194f15fd3",
        "md5": "52f665763b4db80512a725ce33e66cee",
        "sha256": "162040c27850eb8f71fe62f33ac7535106d08a979bfcb275c89a474a22af339c"
      },
      "downloads": -1,
      "filename": "macdaily-1.5.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "52f665763b4db80512a725ce33e66cee",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 130930,
      "upload_time": "2018-08-13T01:26:30",
      "upload_time_iso_8601": "2018-08-13T01:26:30.400016Z",
      "url": "https://files.pythonhosted.org/packages/5f/c5/c588621cef0721301faa981254c18a5e4e960d2c00f0d7f10a9194f15fd3/macdaily-1.5.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "617d2ded8e5afa0ef935e3ec47ff70872c6d9c7ae9e4504692c2d451922c4b8e",
        "md5": "a2e608c0ee740d4b9355eb23e3fb1f7f",
        "sha256": "b6831c3b17aeeeb691318f5fc35bd288029d5be6acff5433a74899b8b2589c17"
      },
      "downloads": -1,
      "filename": "macdaily-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a2e608c0ee740d4b9355eb23e3fb1f7f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 78161,
      "upload_time": "2018-08-13T01:26:31",
      "upload_time_iso_8601": "2018-08-13T01:26:31.794374Z",
      "url": "https://files.pythonhosted.org/packages/61/7d/2ded8e5afa0ef935e3ec47ff70872c6d9c7ae9e4504692c2d451922c4b8e/macdaily-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}