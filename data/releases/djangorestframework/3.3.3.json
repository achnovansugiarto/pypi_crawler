{
  "info": {
    "author": "Tom Christie",
    "author_email": "tom@tomchristie.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "`Django REST framework <http://www.django-rest-framework.org/>`__\n=================================================================\n\n|build-status-image| |coverage-status-image| |pypi-version|\n\n**Awesome web-browsable Web APIs.**\n\nFull documentation for the project is available at\n`http://www.django-rest-framework.org <http://www.django-rest-framework.org/>`__.\n\n--------------\n\n**Note**: We have now released Django REST framework 3.3. For older\ncodebases you may want to refer to the version 2.4.4 `source\ncode <https://github.com/tomchristie/django-rest-framework/tree/version-2.4.x>`__,\nand\n`documentation <http://tomchristie.github.io/rest-framework-2-docs/>`__.\n\nFor more details see the 3.3\n`announcement <http://www.django-rest-framework.org/topics/3.3-announcement/>`__\nand `release\nnotes <http://www.django-rest-framework.org/topics/release-notes/#33x-series>`__.\n\n--------------\n\nOverview\n========\n\nDjango REST framework is a powerful and flexible toolkit for building\nWeb APIs.\n\nSome reasons you might want to use REST framework:\n\n-  The `Web browsable API <http://restframework.herokuapp.com/>`__ is a\n   huge usability win for your developers.\n-  `Authentication\n   policies <http://www.django-rest-framework.org/api-guide/authentication/>`__\n   including optional packages for\n   `OAuth1a <http://www.django-rest-framework.org/api-guide/authentication/#django-rest-framework-oauth>`__\n   and\n   `OAuth2 <http://www.django-rest-framework.org/api-guide/authentication/#django-oauth-toolkit>`__.\n-  `Serialization <http://www.django-rest-framework.org/api-guide/serializers/>`__\n   that supports both\n   `ORM <http://www.django-rest-framework.org/api-guide/serializers/#modelserializer>`__\n   and\n   `non-ORM <http://www.django-rest-framework.org/api-guide/serializers/#serializers>`__\n   data sources.\n-  Customizable all the way down - just use `regular function-based\n   views <http://www.django-rest-framework.org/api-guide/views/#function-based-views>`__\n   if you don't need the\n   `more <http://www.django-rest-framework.org/api-guide/generic-views/>`__\n   `powerful <http://www.django-rest-framework.org/api-guide/viewsets/>`__\n   `features <http://www.django-rest-framework.org/api-guide/routers/>`__.\n-  `Extensive documentation <http://www.django-rest-framework.org/>`__,\n   and `great community\n   support <https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework>`__.\n\nThere is a live example API for testing purposes, `available\nhere <http://restframework.herokuapp.com/>`__.\n\n**Below**: *Screenshot from the browsable API*\n\n.. figure:: http://www.django-rest-framework.org/img/quickstart.png\n   :alt: Screenshot\n\n   Screenshot\nRequirements\n============\n\n-  Python (2.7, 3.2, 3.3, 3.4, 3.5)\n-  Django (1.7, 1.8, 1.9)\n\nInstallation\n============\n\nInstall using ``pip``...\n\n::\n\n    pip install djangorestframework\n\nAdd ``'rest_framework'`` to your ``INSTALLED_APPS`` setting.\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'rest_framework',\n    )\n\nExample\n=======\n\nLet's take a look at a quick example of using REST framework to build a\nsimple model-backed API for accessing users and groups.\n\nStartup up a new project like so...\n\n::\n\n    pip install django\n    pip install djangorestframework\n    django-admin.py startproject example .\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nNow edit the ``example/urls.py`` module in your project:\n\n.. code:: python\n\n    from django.conf.urls import url, include\n    from django.contrib.auth.models import User\n    from rest_framework import serializers, viewsets, routers\n\n    # Serializers define the API representation.\n    class UserSerializer(serializers.HyperlinkedModelSerializer):\n        class Meta:\n            model = User\n            fields = ('url', 'username', 'email', 'is_staff')\n\n\n    # ViewSets define the view behavior.\n    class UserViewSet(viewsets.ModelViewSet):\n        queryset = User.objects.all()\n        serializer_class = UserSerializer\n\n\n    # Routers provide a way of automatically determining the URL conf.\n    router = routers.DefaultRouter()\n    router.register(r'users', UserViewSet)\n\n\n    # Wire up our API using automatic URL routing.\n    # Additionally, we include login URLs for the browsable API.\n    urlpatterns = [\n        url(r'^', include(router.urls)),\n        url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n    ]\n\nWe'd also like to configure a couple of settings for our API.\n\nAdd the following to your ``settings.py`` module:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        ...  # Make sure to include the default installed apps here.\n        'rest_framework',\n    )\n\n    REST_FRAMEWORK = {\n        # Use Django's standard `django.contrib.auth` permissions,\n        # or allow read-only access for unauthenticated users.\n        'DEFAULT_PERMISSION_CLASSES': [\n            'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n        ]\n    }\n\nThat's it, we're done!\n\n::\n\n    ./manage.py runserver\n\nYou can now open the API in your browser at ``http://127.0.0.1:8000/``,\nand view your new 'users' API. If you use the ``Login`` control in the\ntop right corner you'll also be able to add, create and delete users\nfrom the system.\n\nYou can also interact with the API using command line tools such as\n```curl`` <http://curl.haxx.se/>`__. For example, to list the users\nendpoint:\n\n::\n\n    $ curl -H 'Accept: application/json; indent=4' -u admin:password http://127.0.0.1:8000/users/\n    [\n        {\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\",\n            \"email\": \"admin@example.com\",\n            \"is_staff\": true,\n        }\n    ]\n\nOr to create a new user:\n\n::\n\n    $ curl -X POST -d username=new -d email=new@example.com -d is_staff=false -H 'Accept: application/json; indent=4' -u admin:password http://127.0.0.1:8000/users/\n    {\n        \"url\": \"http://127.0.0.1:8000/users/2/\",\n        \"username\": \"new\",\n        \"email\": \"new@example.com\",\n        \"is_staff\": false,\n    }\n\nDocumentation & Support\n=======================\n\nFull documentation for the project is available at\n`http://www.django-rest-framework.org <http://www.django-rest-framework.org/>`__.\n\nFor questions and support, use the `REST framework discussion\ngroup <https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework>`__,\nor ``#restframework`` on freenode IRC.\n\nYou may also want to `follow the author on\nTwitter <https://twitter.com/_tomchristie>`__.\n\nSecurity\n========\n\nIf you believe youâ€™ve found something in Django REST framework which has\nsecurity implications, please **do not raise the issue in a public\nforum**.\n\nSend a description of the issue via email to\nrest-framework-security@googlegroups.com. The project maintainers will\nthen work with you to resolve any issues where required, prior to any\npublic disclosure.\n\n.. |build-status-image| image:: https://secure.travis-ci.org/tomchristie/django-rest-framework.svg?branch=master\n   :target: http://travis-ci.org/tomchristie/django-rest-framework?branch=master\n.. |coverage-status-image| image:: https://img.shields.io/codecov/c/github/tomchristie/django-rest-framework/master.svg\n   :target: http://codecov.io/github/tomchristie/django-rest-framework?branch=master\n.. |pypi-version| image:: https://img.shields.io/pypi/v/djangorestframework.svg\n   :target: https://pypi.python.org/pypi/djangorestframework",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.django-rest-framework.org",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djangorestframework",
    "package_url": "https://pypi.org/project/djangorestframework/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework/",
    "project_urls": {
      "Homepage": "http://www.django-rest-framework.org"
    },
    "release_url": "https://pypi.org/project/djangorestframework/3.3.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Web APIs for Django, made easy.",
    "version": "3.3.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15178046,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45cea626c4e178c7334fbd825612a8e72489ffca8e851a83a5941ab7923f35dd",
        "md5": "e2fd143f901ba78062933cc2c5b1e4e7",
        "sha256": "4f47056ad798103fc9fb049dff8a67a91963bd215d31bad12ad72b891559ab16"
      },
      "downloads": -1,
      "filename": "djangorestframework-3.3.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2fd143f901ba78062933cc2c5b1e4e7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 662211,
      "upload_time": "2016-03-14T07:51:22",
      "upload_time_iso_8601": "2016-03-14T07:51:22.982203Z",
      "url": "https://files.pythonhosted.org/packages/45/ce/a626c4e178c7334fbd825612a8e72489ffca8e851a83a5941ab7923f35dd/djangorestframework-3.3.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "239c94812ea7a7bd95af5439ab95795c03b6757a0cad30e751320f80799c8038",
        "md5": "6f5ee9646e7fa87dad4385d3c7e7678d",
        "sha256": "f606f2bb4e9bb320937cb6ccce299991b2d302f5cc705a671dffca491e55935c"
      },
      "downloads": -1,
      "filename": "djangorestframework-3.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6f5ee9646e7fa87dad4385d3c7e7678d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 420033,
      "upload_time": "2016-03-14T07:51:29",
      "upload_time_iso_8601": "2016-03-14T07:51:29.857535Z",
      "url": "https://files.pythonhosted.org/packages/23/9c/94812ea7a7bd95af5439ab95795c03b6757a0cad30e751320f80799c8038/djangorestframework-3.3.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2020-25626",
        "GHSA-fx83-3ph3-9j2q"
      ],
      "details": "A flaw was found in Django REST Framework versions before 3.12.0 and before 3.11.2. When using the browseable API viewer, Django REST Framework fails to properly escape certain strings that can come from user input. This allows a user who can control those strings to inject malicious <script> tags, leading to a cross-site-scripting (XSS) vulnerability.",
      "fixed_in": [
        "3.11.2"
      ],
      "id": "PYSEC-2020-263",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-263",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2020-25626"
      ],
      "details": "A flaw was found in Django REST Framework versions before 3.12.0 and before 3.11.2. When using the browseable API viewer, Django REST Framework fails to properly escape certain strings that can come from user input. This allows a user who can control those strings to inject malicious <script> tags, leading to a cross-site-scripting (XSS) vulnerability.",
      "fixed_in": [
        "3.11.2"
      ],
      "id": "GHSA-fx83-3ph3-9j2q",
      "link": "https://osv.dev/vulnerability/GHSA-fx83-3ph3-9j2q",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}