{
  "info": {
    "author": "Tom Christie",
    "author_email": "tom@tomchristie.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# [Django REST framework][docs]\n\n[![build-status-image]][travis]\n[![coverage-status-image]][codecov]\n[![pypi-version]][pypi]\n[![Gitter](https://badges.gitter.im/tomchristie/django-rest-framework.svg)](https://gitter.im/tomchristie/django-rest-framework?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n**Awesome web-browsable Web APIs.**\n\nFull documentation for the project is available at [http://www.django-rest-framework.org][docs].\n\n---\n\n# Funding\n\nREST framework is a *collaboratively funded project*. If you use\nREST framework commercially we strongly encourage you to invest in its\ncontinued development by **[signing up for a paid plan][funding]**.\n\nThe initial aim is to provide a single full-time position on REST framework.\nRight now we're over 58% of the way towards achieving that.\n*Every single sign-up makes a significant impact.*\n\n<p align=\"center\">\n  <a href=\"http://jobs.rover.com/\"><img src=\"https://raw.githubusercontent.com/tomchristie/django-rest-framework/master/docs/img/premium/rover-readme.png\"/></a>\n  <a href=\"https://getsentry.com/welcome/\"><img src=\"https://raw.githubusercontent.com/tomchristie/django-rest-framework/master/docs/img/premium/sentry-readme.png\"/></a>\n  <a href=\"https://getstream.io/?utm_source=drf&utm_medium=banner&utm_campaign=drf\"><img src=\"https://raw.githubusercontent.com/tomchristie/django-rest-framework/master/docs/img/premium/stream-readme.png\"/></a>\n</p>\n\n*Many thanks to all our [wonderful sponsors][sponsors], and in particular to our premium backers, [Rover](http://jobs.rover.com/), [Sentry](https://getsentry.com/welcome/), and [Stream](https://getstream.io/?utm_source=drf&utm_medium=banner&utm_campaign=drf).*\n\n---\n\n# Overview\n\nDjango REST framework is a powerful and flexible toolkit for building Web APIs.\n\nSome reasons you might want to use REST framework:\n\n* The [Web browsable API][sandbox] is a huge usability win for your developers.\n* [Authentication policies][authentication] including optional packages for [OAuth1a][oauth1-section] and [OAuth2][oauth2-section].\n* [Serialization][serializers] that supports both [ORM][modelserializer-section] and [non-ORM][serializer-section] data sources.\n* Customizable all the way down - just use [regular function-based views][functionview-section] if you don't need the [more][generic-views] [powerful][viewsets] [features][routers].\n* [Extensive documentation][docs], and [great community support][group].\n\nThere is a live example API for testing purposes, [available here][sandbox].\n\n**Below**: *Screenshot from the browsable API*\n\n![Screenshot][image]\n\n# Requirements\n\n* Python (2.7, 3.2, 3.3, 3.4, 3.5)\n* Django (1.8, 1.9, 1.10)\n\n# Installation\n\nInstall using `pip`...\n\n    pip install djangorestframework\n\nAdd `'rest_framework'` to your `INSTALLED_APPS` setting.\n\n    INSTALLED_APPS = (\n        ...\n        'rest_framework',\n    )\n\n# Example\n\nLet's take a look at a quick example of using REST framework to build a simple model-backed API for accessing users and groups.\n\nStartup up a new project like so...\n\n    pip install django\n    pip install djangorestframework\n    django-admin.py startproject example .\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\n\nNow edit the `example/urls.py` module in your project:\n\n```python\nfrom django.conf.urls import url, include\nfrom django.contrib.auth.models import User\nfrom rest_framework import serializers, viewsets, routers\n\n# Serializers define the API representation.\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'is_staff')\n\n\n# ViewSets define the view behavior.\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\n# Routers provide a way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n```\n\nWe'd also like to configure a couple of settings for our API.\n\nAdd the following to your `settings.py` module:\n\n```python\nINSTALLED_APPS = (\n    ...  # Make sure to include the default installed apps here.\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n    ]\n}\n```\n\nThat's it, we're done!\n\n    ./manage.py runserver\n\nYou can now open the API in your browser at `http://127.0.0.1:8000/`, and view your new 'users' API. If you use the `Login` control in the top right corner you'll also be able to add, create and delete users from the system.\n\nYou can also interact with the API using command line tools such as [`curl`](http://curl.haxx.se/). For example, to list the users endpoint:\n\n    $ curl -H 'Accept: application/json; indent=4' -u admin:password http://127.0.0.1:8000/users/\n\t[\n\t    {\n\t        \"url\": \"http://127.0.0.1:8000/users/1/\",\n\t        \"username\": \"admin\",\n\t        \"email\": \"admin@example.com\",\n\t        \"is_staff\": true,\n\t    }\n\t]\n\nOr to create a new user:\n\n    $ curl -X POST -d username=new -d email=new@example.com -d is_staff=false -H 'Accept: application/json; indent=4' -u admin:password http://127.0.0.1:8000/users/\n    {\n        \"url\": \"http://127.0.0.1:8000/users/2/\",\n        \"username\": \"new\",\n        \"email\": \"new@example.com\",\n        \"is_staff\": false,\n    }\n\n# Documentation & Support\n\nFull documentation for the project is available at [http://www.django-rest-framework.org][docs].\n\nFor questions and support, use the [REST framework discussion group][group], or `#restframework` on freenode IRC.\n\nYou may also want to [follow the author on Twitter][twitter].\n\n# Security\n\nIf you believe youâ€™ve found something in Django REST framework which has security implications, please **do not raise the issue in a public forum**.\n\nSend a description of the issue via email to [rest-framework-security@googlegroups.com][security-mail].  The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.\n\n[build-status-image]: https://secure.travis-ci.org/tomchristie/django-rest-framework.svg?branch=master\n[travis]: http://travis-ci.org/tomchristie/django-rest-framework?branch=master\n[coverage-status-image]: https://img.shields.io/codecov/c/github/tomchristie/django-rest-framework/master.svg\n[codecov]: http://codecov.io/github/tomchristie/django-rest-framework?branch=master\n[pypi-version]: https://img.shields.io/pypi/v/djangorestframework.svg\n[pypi]: https://pypi.python.org/pypi/djangorestframework\n[twitter]: https://twitter.com/_tomchristie\n[group]: https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework\n[sandbox]: http://restframework.herokuapp.com/\n\n[funding]: https://fund.django-rest-framework.org/topics/funding/\n[sponsors]: https://fund.django-rest-framework.org/topics/funding/#our-sponsors\n\n[oauth1-section]: http://www.django-rest-framework.org/api-guide/authentication/#django-rest-framework-oauth\n[oauth2-section]: http://www.django-rest-framework.org/api-guide/authentication/#django-oauth-toolkit\n[serializer-section]: http://www.django-rest-framework.org/api-guide/serializers/#serializers\n[modelserializer-section]: http://www.django-rest-framework.org/api-guide/serializers/#modelserializer\n[functionview-section]: http://www.django-rest-framework.org/api-guide/views/#function-based-views\n[generic-views]: http://www.django-rest-framework.org/api-guide/generic-views/\n[viewsets]: http://www.django-rest-framework.org/api-guide/viewsets/\n[routers]: http://www.django-rest-framework.org/api-guide/routers/\n[serializers]: http://www.django-rest-framework.org/api-guide/serializers/\n[authentication]: http://www.django-rest-framework.org/api-guide/authentication/\n[image]: http://www.django-rest-framework.org/img/quickstart.png\n\n[docs]: http://www.django-rest-framework.org/\n[security-mail]: mailto:rest-framework-security@googlegroups.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.django-rest-framework.org",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework",
    "package_url": "https://pypi.org/project/djangorestframework/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework/",
    "project_urls": {
      "Homepage": "http://www.django-rest-framework.org"
    },
    "release_url": "https://pypi.org/project/djangorestframework/3.4.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Web APIs for Django, made easy.",
    "version": "3.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15178046,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cccea4200c9bdcbbba855825789e509b69803a8f04e32d9c9d97e52d4da6e25",
        "md5": "1472a1c270be31c5ac12c3fa63ac0e2c",
        "sha256": "0f2297ed3e30879f3d8c4ca2d8388755689a60bb033860fe5185c5e595be8e83"
      },
      "downloads": -1,
      "filename": "djangorestframework-3.4.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1472a1c270be31c5ac12c3fa63ac0e2c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 705174,
      "upload_time": "2016-07-28T12:35:41",
      "upload_time_iso_8601": "2016-07-28T12:35:41.758290Z",
      "url": "https://files.pythonhosted.org/packages/4c/cc/ea4200c9bdcbbba855825789e509b69803a8f04e32d9c9d97e52d4da6e25/djangorestframework-3.4.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3892113de171015ad680a6f33a8547d3844f3445a8b6dc4461f46f5a1ca1615",
        "md5": "0c6438fab71b739bc40c3a3cad1adeec",
        "sha256": "dd27afd60c9c50bb5c71ca72e14e40375dabbd8b98647a8d9349b9ba90e764b2"
      },
      "downloads": -1,
      "filename": "djangorestframework-3.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0c6438fab71b739bc40c3a3cad1adeec",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 433251,
      "upload_time": "2016-07-28T12:35:45",
      "upload_time_iso_8601": "2016-07-28T12:35:45.865200Z",
      "url": "https://files.pythonhosted.org/packages/e3/89/2113de171015ad680a6f33a8547d3844f3445a8b6dc4461f46f5a1ca1615/djangorestframework-3.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2020-25626",
        "GHSA-fx83-3ph3-9j2q"
      ],
      "details": "A flaw was found in Django REST Framework versions before 3.12.0 and before 3.11.2. When using the browseable API viewer, Django REST Framework fails to properly escape certain strings that can come from user input. This allows a user who can control those strings to inject malicious <script> tags, leading to a cross-site-scripting (XSS) vulnerability.",
      "fixed_in": [
        "3.11.2"
      ],
      "id": "PYSEC-2020-263",
      "link": "https://osv.dev/vulnerability/PYSEC-2020-263",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2020-25626"
      ],
      "details": "A flaw was found in Django REST Framework versions before 3.12.0 and before 3.11.2. When using the browseable API viewer, Django REST Framework fails to properly escape certain strings that can come from user input. This allows a user who can control those strings to inject malicious <script> tags, leading to a cross-site-scripting (XSS) vulnerability.",
      "fixed_in": [
        "3.11.2"
      ],
      "id": "GHSA-fx83-3ph3-9j2q",
      "link": "https://osv.dev/vulnerability/GHSA-fx83-3ph3-9j2q",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}