{
  "info": {
    "author": "Paul McGuire",
    "author_email": "ptmcg@austin.rr.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database"
    ],
    "description": "# littletable - a Python module to give ORM-like access to a collection of objects\n[![Build Status](https://travis-ci.org/ptmcg/littletable.svg?branch=master)](https://travis-ci.org/ptmcg/littletable) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ptmcg/littletable/master)\n\n- [Introduction](#introduction)\n- [Importing data from CSV files](#importing-data-from-csv-files)\n- [Tabular output](#tabular-output)\n- [For More Info](#for-more-info)\n- [Sample Demo](#sample-demo)\n\nIntroduction\n------------\nThe `littletable` module provides a low-overhead, schema-less, in-memory database access to a collection \nof user objects. `littletable` Tables will accept Python `dict`s or any user-defined object type, including:\n\n- `namedtuples` and `typing.NamedTuples`\n- `dataclasses`\n- `types.SimpleNamespaces`\n- `attrs` classes\n- `PyDantic` data models\n- `traitlets`\n\n`littletable` infers the Table's \"columns\" from those objects' `__dict__`, `__slots__`, or `_fields` mappings to access\nobject attributes. \n\nIf populated with Python `dict`s, they get stored as `SimpleNamespace`s or `littletable.DictObject`s.\n\nIn addition to basic ORM-style insert/remove/query/delete access to the contents of a `Table`, `littletable` offers:\n* simple indexing for improved retrieval performance, and optional enforcing key uniqueness \n* access to objects using indexed attributes\n* direct import/export to CSV and Excel .xlsx files\n* clean tabular output for data presentation\n* simplified joins using `\"+\"` operator syntax between annotated `Table`s \n* the result of any query or join is a new first-class `littletable` `Table` \n* simple full-text search against multi-word text attributes\n* access like a standard Python list to the records in a Table, including indexing/slicing, `iter`, `zip`, `len`, `groupby`, etc.\n* access like a standard Python `dict` to attributes with a unique index, or like a standard Python `defaultdict(list)` to attributes with a non-unique index\n\n`littletable` `Table`s do not require an upfront schema definition, but simply work off of the attributes in \nthe stored values, and those referenced in any query parameters.\n\n\nImporting data from CSV files\n-----------------------------\nYou can easily import a CSV file into a Table using Table.csv_import():\n\n```python\nt = Table().csv_import(\"my_data.csv\")\n```\n\nIn place of a local file name, you can also specify  an HTTP url:\n\n```python\nurl = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\"\nnames = [\"sepal-length\", \"sepal-width\", \"petal-length\", \"petal-width\", \"class\"]\niris_table = Table('iris').csv_import(url, fieldnames=names)\n```\n\nYou can also directly import CSV data as a string:\n\n```python\ncatalog = Table(\"catalog\")\n\ncatalog_data = \"\"\"\\\nsku,description,unitofmeas,unitprice\nBRDSD-001,Bird seed,LB,3\nBBS-001,Steel BB's,LB,5\nMGNT-001,Magnet,EA,8\"\"\"\n\ncatalog.csv_import(catalog_data, transforms={'unitprice': int})\n```\n\nData can also be directly imported from compressed .zip, .gz, and .xz files.\n\nFiles containing JSON-formatted records can be similarly imported using `Table.json_import()`.\n\n\nTabular output\n--------------\nTo produce a nice tabular output for a table, you can use the embedded support for\nthe [rich](https://github.com/willmcgugan/rich) module, `as_html()` in [Jupyter Notebook](https://jupyter.org/),\nor the [tabulate](https://github.com/astanin/python-tabulate) module:\n\nUsing `table.present()` (implemented using `rich`; `present()` accepts `rich` `Table` keyword args):\n\n```python\ntable(title_str).present(fields=[\"col1\", \"col2\", \"col3\"])\n    or\ntable.select(\"col1 col2 col3\")(title_str).present(caption=\"caption text\", \n                                                  caption_justify=\"right\")\n```\n\nUsing `Jupyter Notebook`:\n\n```python\nfrom IPython.display import HTML, display\ndisplay(HTML(table.as_html()))\n```\n\nUsing `tabulate`:\n\n```python\nfrom tabulate import tabulate\nprint(tabulate((vars(rec) for rec in table), headers=\"keys\"))\n```\n\nFor More Info\n-------------\nExtended \"getting started\" notes at [how_to_use_littletable.md](https://github.com/ptmcg/littletable/blob/master/how_to_use_littletable.md).\n\nSample Demo\n-----------\nHere is a simple littletable data storage/retrieval example:\n\n```python\nfrom littletable import Table, DataObject\n\ncustomers = Table('customers')\ncustomers.create_index(\"id\", unique=True)\ncustomers.insert(DataObject(id=\"0010\", name=\"George Jetson\"))\ncustomers.insert(DataObject(id=\"0020\", name=\"Wile E. Coyote\"))\ncustomers.insert(DataObject(id=\"0030\", name=\"Jonny Quest\"))\n\ncatalog = Table('catalog')\ncatalog.create_index(\"sku\", unique=True)\ncatalog.insert(DataObject(sku=\"ANVIL-001\", descr=\"1000lb anvil\", unitofmeas=\"EA\",unitprice=100))\ncatalog.insert(DataObject(sku=\"BRDSD-001\", descr=\"Bird seed\", unitofmeas=\"LB\",unitprice=3))\ncatalog.insert(DataObject(sku=\"MAGNT-001\", descr=\"Magnet\", unitofmeas=\"EA\",unitprice=8))\ncatalog.insert(DataObject(sku=\"MAGLS-001\", descr=\"Magnifying glass\", unitofmeas=\"EA\",unitprice=12))\n\nwishitems = Table('wishitems')\nwishitems.create_index(\"custid\")\nwishitems.create_index(\"sku\")\n\n# easy to import CSV data from a string or file\nwishitems.csv_import(\"\"\"\\\ncustid,sku\n0020,ANVIL-001\n0020,BRDSD-001\n0020,MAGNT-001\n0030,MAGNT-001\n0030,MAGLS-001\n\"\"\")\n\n# print a particular customer name \n# (unique indexes will return a single item; non-unique\n# indexes will return a list of all matching items)\nprint(customers.by.id[\"0030\"].name)\n\n# see all customer names\nfor name in customers.all.name:\n    print(name)\n\n# print all items sold by the pound\nfor item in catalog.where(unitofmeas=\"LB\"):\n    print(item.sku, item.descr)\n\n# print all items that cost more than 10\nfor item in catalog.where(lambda o: o.unitprice > 10):\n    print(item.sku, item.descr, item.unitprice)\n\n# join tables to create queryable wishlists collection\nwishlists = customers.join_on(\"id\") + wishitems.join_on(\"custid\") + catalog.join_on(\"sku\")\n\n# print all wishlist items with price > 10 (can use Table.gt comparator instead of lambda)\nbigticketitems = wishlists().where(unitprice=Table.gt(10))\nfor item in bigticketitems:\n    print(item)\n\n# list all wishlist items in descending order by price\nfor item in wishlists().sort(\"unitprice desc\"):\n    print(item)\n\n# print output as a nicely-formatted table\nwishlists().sort(\"unitprice desc\")(\"Wishlists\").present()\n\n# print output as an HTML table\nprint(wishlists().sort(\"unitprice desc\")(\"Wishlists\").as_html())\n\n# print output as a Markdown table\nprint(wishlists().sort(\"unitprice desc\")(\"Wishlists\").as_markdown())\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": "https://pythonhosted.org/littletable/",
    "download_url": "https://pypi.org/project/littletable/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ptmcg/littletable/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "littletable",
    "package_url": "https://pypi.org/project/littletable/",
    "platform": null,
    "project_url": "https://pypi.org/project/littletable/",
    "project_urls": {
      "Download": "https://pypi.org/project/littletable/",
      "Homepage": "https://github.com/ptmcg/littletable/"
    },
    "release_url": "https://pypi.org/project/littletable/2.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.6.8",
    "summary": "Python in-memory ORM database",
    "version": "2.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16539762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea8a7a9634190d18e81dbaafae7d9d657e046fc19ca63eef9482016b77024ff8",
        "md5": "2b70e061c8bf579e991cc9b88edd685c",
        "sha256": "b3640cb1d4d027c6189bfaef7b90270e662de17b4d3da50a9a63b7782eaaac0c"
      },
      "downloads": -1,
      "filename": "littletable-2.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b70e061c8bf579e991cc9b88edd685c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.8",
      "size": 36778,
      "upload_time": "2022-05-07T22:15:23",
      "upload_time_iso_8601": "2022-05-07T22:15:23.534451Z",
      "url": "https://files.pythonhosted.org/packages/ea/8a/7a9634190d18e81dbaafae7d9d657e046fc19ca63eef9482016b77024ff8/littletable-2.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6635f748219a15dd742676f7fa51e1d73f3751fba907689c2c13286b2be31dc7",
        "md5": "59cf59fa56c976b158fcc9f2bd9b091f",
        "sha256": "96aecbe5f121f9e5f14b4f90401a354afba358b280d8e86af700eba1803113ac"
      },
      "downloads": -1,
      "filename": "littletable-2.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "59cf59fa56c976b158fcc9f2bd9b091f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.8",
      "size": 67627,
      "upload_time": "2022-05-07T22:15:25",
      "upload_time_iso_8601": "2022-05-07T22:15:25.153260Z",
      "url": "https://files.pythonhosted.org/packages/66/35/f748219a15dd742676f7fa51e1d73f3751fba907689c2c13286b2be31dc7/littletable-2.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}