{
  "info": {
    "author": "Paul McGuire",
    "author_email": "ptmcg@austin.rr.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# littletable - a Python module to give ORM-like access to a collection of objects\n[![Build Status](https://travis-ci.org/ptmcg/littletable.svg?branch=master)](https://travis-ci.org/ptmcg/littletable) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ptmcg/littletable/master)\n\n- [Introduction](#introduction)\n- [Importing data from CSV files](#importing-data-from-csv-files)\n- [Tabular output](#tabular-output)\n- [For More Info](#for-more-info)\n- [Sample Demo](#sample-demo)\n\nIntroduction\n------------\nThe `littletable` module provides a low-overhead, schema-less, in-memory database access to a collection \nof user objects. `littletable` Tables will accept any user-defined object type, including `namedtuples`, `dataclasses`,\nand `types.SimpleNamespaces`, using those objects' `__dict__`, `__slots__`, or `_fields` mappings to access object\nattributes and determine the Table's \"columns\". `littletable` also provides a `DataObject` class for easy creation of\nnamespace objects from Python `dict` instances.\n\nIn addition to basic ORM-style insert/remove/query/delete access to the contents of a `Table`, `littletable` offers:\n* simple indexing for improved retrieval performance, and optional enforcing key uniqueness \n* access to objects using indexed attributes\n* direct CSV import/export\n* clean tabular output for data presentation\n* simplified joins using `\"+\"` operator syntax between annotated `Table`s \n* the result of any query or join is a new first-class `littletable` `Table` \n* access like a standard Python list to the records in a Table, including indexing/slicing, `iter`, `zip`, `len`, `groupby`, etc.\n* access like a standard Python `dict` to attributes with a unique index, or like a standard Python `defaultdict(list)` to attributes with a non-unique index\n\n`littletable` `Table`s do not require an upfront schema definition, but simply work off of the attributes in \nthe stored values, and those referenced in any query parameters.\n\n\nImporting data from CSV files\n-----------------------------\nYou can easily import a CSV file into a Table using Table.csv_import():\n\n    t = Table().csv_import(\"my_data.csv\")\n\nIn place of a local file name, you can also specify  an HTTP url:\n\n    url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv\"\n    iris_table = Table('iris').csv_import(url)\n\nYou can also directly import CSV data as a string:\n\n    catalog = Table(\"catalog\")\n\n    catalog_data = \"\"\"\\\n    sku,description,unitofmeas,unitprice\n    BRDSD-001,Bird seed,LB,3\n    BBS-001,Steel BB's,LB,5\n    MGNT-001,Magnet,EA,8\"\"\"\n\n    catalog.csv_import(catalog_data, transforms={'unitprice': int})\n\nData can also be directly imported from compressed .zip, .gz, and .xz files.\n\nFiles containing JSON-formatted records can be similarly imported using `Table.json_import()`.\n\n\nTabular output\n--------------\nTo produce a nice tabular output for a table, you can use the embedded support for\nthe [rich](https://github.com/willmcgugan/rich) module, `as_html()` in [Jupyter Notebook](https://jupyter.org/),\nor the [tabulate](https://github.com/astanin/python-tabulate) module:\n\nUsing `table.present()` (implemented using `rich`; `present()` accepts `rich` `Table` keyword args):\n\n    table(title_str).present(fields=[\"col1\", \"col2\", \"col3\"])\n      or\n    table.select(\"col1 col2 col3\")(title_str).present(caption=\"caption text\", \n                                                      caption_justify=\"right\")\n\nUsing `Jupyter Notebook`:\n\n    from IPython.display import HTML, display\n    display(HTML(table.as_html()))\n\nUsing `tabulate`:\n\n    from tabulate import tabulate\n    print(tabulate(map(vars, table), headers=\"keys\"))\n\nFor More Info\n-------------\nExtended \"getting started\" notes at [how_to_use_littletable.md](https://github.com/ptmcg/littletable/blob/master/how_to_use_littletable.md).\n\nSample Demo\n-----------\nHere is a simple littletable data storage/retrieval example:\n\n    from littletable import Table, DataObject\n\n    customers = Table('customers')\n    customers.create_index(\"id\", unique=True)\n    customers.insert(DataObject(id=\"0010\", name=\"George Jetson\"))\n    customers.insert(DataObject(id=\"0020\", name=\"Wile E. Coyote\"))\n    customers.insert(DataObject(id=\"0030\", name=\"Jonny Quest\"))\n\n    catalog = Table('catalog')\n    catalog.create_index(\"sku\", unique=True)\n    catalog.insert(DataObject(sku=\"ANVIL-001\", descr=\"1000lb anvil\", unitofmeas=\"EA\",unitprice=100))\n    catalog.insert(DataObject(sku=\"BRDSD-001\", descr=\"Bird seed\", unitofmeas=\"LB\",unitprice=3))\n    catalog.insert(DataObject(sku=\"MAGNT-001\", descr=\"Magnet\", unitofmeas=\"EA\",unitprice=8))\n    catalog.insert(DataObject(sku=\"MAGLS-001\", descr=\"Magnifying glass\", unitofmeas=\"EA\",unitprice=12))\n\n    wishitems = Table('wishitems')\n    wishitems.create_index(\"custid\")\n    wishitems.create_index(\"sku\")\n    # easy to import CSV data from a string or file\n    wishitems.csv_import(\"\"\"\\\n    custid,sku\n    0020,ANVIL-001\n    0020,BRDSD-001\n    0020,MAGNT-001\n    0030,MAGNT-001\n    0030,MAGLS-001\n    \"\"\")\n\n    # print a particular customer name \n    # (unique indexes will return a single item; non-unique\n    # indexes will return a list of all matching items)\n    print(customers.by.id[\"0030\"].name)\n\n    # see all customer names\n    for name in customers.all.name:\n        print(name)\n\n    # print all items sold by the pound\n    for item in catalog.where(unitofmeas=\"LB\"):\n        print(item.sku, item.descr)\n\n    # print all items that cost more than 10\n    for item in catalog.where(lambda o: o.unitprice > 10):\n        print(item.sku, item.descr, item.unitprice)\n\n    # join tables to create queryable wishlists collection\n    wishlists = customers.join_on(\"id\") + wishitems.join_on(\"custid\") + catalog.join_on(\"sku\")\n\n    # print all wishlist items with price > 10 (can use Table.gt comparator instead of lambda)\n    bigticketitems = wishlists().where(unitprice=Table.gt(10))\n    for item in bigticketitems:\n        print(item)\n\n    # list all wishlist items in descending order by price\n    for item in wishlists().sort(\"unitprice desc\"):\n        print(item)\n\n    # print output as a nicely-formatted table\n    wishlists().sort(\"unitprice desc\")(\"Wishlists\").present()\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": "https://pythonhosted.org/littletable/",
    "download_url": "https://pypi.org/project/littletable/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ptmcg/littletable/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "littletable",
    "package_url": "https://pypi.org/project/littletable/",
    "platform": "",
    "project_url": "https://pypi.org/project/littletable/",
    "project_urls": {
      "Download": "https://pypi.org/project/littletable/",
      "Homepage": "https://github.com/ptmcg/littletable/"
    },
    "release_url": "https://pypi.org/project/littletable/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python in-memory ORM database",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16539762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "978214e16cf9f5c310c569190e31429d930e0040b6580552fe6e30c5823ac7b3",
        "md5": "501f1f1161c647c3927cf92e3639dd02",
        "sha256": "498e43c352500fbe36554e8ae7fab1c13407266bb0a241cd96067e5f3dfc052c"
      },
      "downloads": -1,
      "filename": "littletable-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "501f1f1161c647c3927cf92e3639dd02",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 28728,
      "upload_time": "2020-10-05T22:41:02",
      "upload_time_iso_8601": "2020-10-05T22:41:02.002014Z",
      "url": "https://files.pythonhosted.org/packages/97/82/14e16cf9f5c310c569190e31429d930e0040b6580552fe6e30c5823ac7b3/littletable-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c3e7367026fbe0ebe56e9e8e9bf5a7a06e21d1bb5d9ba94960b65522236622e",
        "md5": "1f03e3c9cf4a6fe4ebc75cdb95a8c357",
        "sha256": "823f6ebb0f9f2f10fcc933d954f688f3c799c8581678b4fcfdb1f82a463d8e19"
      },
      "downloads": -1,
      "filename": "littletable-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1f03e3c9cf4a6fe4ebc75cdb95a8c357",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45466,
      "upload_time": "2020-10-05T22:41:03",
      "upload_time_iso_8601": "2020-10-05T22:41:03.874985Z",
      "url": "https://files.pythonhosted.org/packages/6c/3e/7367026fbe0ebe56e9e8e9bf5a7a06e21d1bb5d9ba94960b65522236622e/littletable-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}