{
  "info": {
    "author": "Paul McGuire",
    "author_email": "ptmcg@austin.rr.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# littletable - a Python module to give ORM-like access to a collection of objects\n[![Build Status](https://travis-ci.org/ptmcg/littletable.svg?branch=master)](https://travis-ci.org/ptmcg/littletable) [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ptmcg/littletable/master)\n\nThe littletable module provides a low-overhead, schema-less, in-memory database access to a collection \nof user objects. littletable provides a DataObject class for ad hoc creation of semi-immutable objects \nthat can be stored in a littletable Table. Tables can also contain user-defined objects, using those \nobjects' `__dict__`, `__slots__`, or `_fields` mappings to access object attributes.\n\nIn addition to basic ORM-style insert/remove/query/delete access to the contents of a Table, littletable offers:\n* simple indexing for improved retrieval performance, and optional enforcing key uniqueness \n* access to objects using indexed attributes \n* simplified joins using '+' operator syntax between annotated Tables \n* the result of any query or join is a new first-class littletable Table \n\nlittletable Tables do not require an upfront schema definition, but simply work off of the attributes in \nthe stored values, and those referenced in any query parameters.\n\nHere is a simple littletable data storage/retrieval example:\n\n    from littletable import Table, DataObject\n\n    customers = Table('customers')\n    customers.create_index(\"id\", unique=True)\n    customers.insert(DataObject(id=\"0010\", name=\"George Jetson\"))\n    customers.insert(DataObject(id=\"0020\", name=\"Wile E. Coyote\"))\n    customers.insert(DataObject(id=\"0030\", name=\"Jonny Quest\"))\n\n    catalog = Table('catalog')\n    catalog.create_index(\"sku\", unique=True)\n    catalog.insert(DataObject(sku=\"ANVIL-001\", descr=\"1000lb anvil\", unitofmeas=\"EA\",unitprice=100))\n    catalog.insert(DataObject(sku=\"BRDSD-001\", descr=\"Bird seed\", unitofmeas=\"LB\",unitprice=3))\n    catalog.insert(DataObject(sku=\"MAGNT-001\", descr=\"Magnet\", unitofmeas=\"EA\",unitprice=8))\n    catalog.insert(DataObject(sku=\"MAGLS-001\", descr=\"Magnifying glass\", unitofmeas=\"EA\",unitprice=12))\n\n    wishitems = Table('wishitems')\n    wishitems.create_index(\"custid\")\n    wishitems.create_index(\"sku\")\n    # easy to import CSV data from a string or file\n    wishitems.csv_import(\"\"\"\\\n    custid,sku\n    0020,ANVIL-001\n    0020,BRDSD-001\n    0020,MAGNT-001\n    0030,MAGNT-001\n    0030,MAGLS-001\n    \"\"\")\n\n    # print a particular customer name \n    # (unique indexes will return a single item; non-unique\n    # indexes will return a list of all matching items)\n    print(customers.by.id[\"0030\"].name)\n\n    # print all items sold by the pound\n    for item in catalog.where(unitofmeas=\"LB\"):\n        print(item.sku, item.descr)\n\n    # print all items that cost more than 10\n    for item in catalog.where(lambda o: o.unitprice>10):\n        print(item.sku, item.descr, item.unitprice)\n\n    # join tables to create queryable wishlists collection\n    wishlists = customers.join_on(\"id\") + wishitems.join_on(\"custid\") + catalog.join_on(\"sku\")\n\n    # print all wishlist items with price > 10\n    bigticketitems = wishlists().where(lambda ob: ob.unitprice > 10)\n    for item in bigticketitems:\n        print(item)\n\n    # list all wishlist items in descending order by price\n    for item in wishlists().sort(\"unitprice desc\"):\n        print(item)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": "https://pythonhosted.org/littletable/",
    "download_url": "https://pypi.org/project/littletable/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ptmcg/littletable/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "littletable",
    "package_url": "https://pypi.org/project/littletable/",
    "platform": "",
    "project_url": "https://pypi.org/project/littletable/",
    "project_urls": {
      "Download": "https://pypi.org/project/littletable/",
      "Homepage": "https://github.com/ptmcg/littletable/"
    },
    "release_url": "https://pypi.org/project/littletable/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python in-memory ORM database",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16539762,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2fd48ece03a00733ae7286566782f2cc1048c3253fc3cff1919884e0026865b",
        "md5": "d1ffb1145919a7039b004cb1de7bec9a",
        "sha256": "02cd3dbc337bab2a335f4c281893878b9f03490570efd318cf4f61f32f91c983"
      },
      "downloads": -1,
      "filename": "littletable-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1ffb1145919a7039b004cb1de7bec9a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23497,
      "upload_time": "2020-08-01T18:47:36",
      "upload_time_iso_8601": "2020-08-01T18:47:36.899679Z",
      "url": "https://files.pythonhosted.org/packages/b2/fd/48ece03a00733ae7286566782f2cc1048c3253fc3cff1919884e0026865b/littletable-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0c05c33c5082701159946a7ac547f87303742c5263633b60b3b44f2d5d4b574",
        "md5": "b1318bec8b74a0f2aadebe04bdcc523f",
        "sha256": "689a46c68fd17dcc8eac4eafee345e4a9d1b29bfa73cc8858f5136ac9cb5dae2"
      },
      "downloads": -1,
      "filename": "littletable-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b1318bec8b74a0f2aadebe04bdcc523f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38248,
      "upload_time": "2020-08-01T18:47:38",
      "upload_time_iso_8601": "2020-08-01T18:47:38.141538Z",
      "url": "https://files.pythonhosted.org/packages/a0/c0/5c33c5082701159946a7ac547f87303742c5263633b60b3b44f2d5d4b574/littletable-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}