{
  "info": {
    "author": "Genialis d.o.o.",
    "author_email": "dev-team@genialis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============================\nDjango REST Framework Reactive\n==============================\n\n|build|\n\n.. |build| image:: https://travis-ci.org/genialis/django-rest-framework-reactive.svg?branch=master\n    :target: https://travis-ci.org/genialis/django-rest-framework-reactive\n    :alt: Build Status\n\nThis package enables regular Django REST Framework views to become reactive,\nthat is so that client-side applications may get notified of changes to the\nunderlying data as soon as they happen, without the need to poll the API\nagain. While the initial request is done as a regular HTTP request, all the\nupdate notifications come through WebSockets.\n\nInstall\n=======\n\nPrerequisites\n-------------\n\nThe reactive extensions for Django REST Framework require the use of `Django Channels`_\nfor push notifications via WebSockets.\n\n.. _`Django Channels`: https://channels.readthedocs.io\n\nFrom PyPI\n---------\n\n.. code::\n\n    pip install djangorestframework-reactive\n\nFrom source\n-----------\n\n.. code::\n\n   pip install https://github.com/genialis/django-rest-framework-reactive/archive/<git-tree-ish>.tar.gz\n\nwhere ``<git-tree-ish>`` can represent any commit SHA, branch name, tag name,\netc. in `DRF Reactive's GitHub repository`_. For example, to install the latest\nversion from the ``master`` branch, use:\n\n.. code::\n\n   pip install https://github.com/genialis/django-rest-framework-reactive/archive/master.tar.gz\n\n.. _`DRF Reactive's GitHub repository`: https://github.com/genialis/django-rest-framework-reactive/\n\n\nConfigure\n=========\n\nThere are several things that need to be configured in the Django settings file:\n\n* ``rest_framework_reactive`` needs to be added to ``INSTALLED_APPS``.\n* ``DEFAULT_PAGINATION_CLASS`` needs to be set to ``rest_framework_reactive.pagination.LimitOffsetPagination`` (optionally, this pagination class can instead be set for all viewsets configured for reactivity).\n* ``WS4REDIS_SUBSCRIBER`` needs to be set to ``rest_framework_reactive.websockets.QueryObserverSubscriber``.\n* ``DJANGO_REST_FRAMEWORK_REACTIVE`` needs to be configured with hostname and port where the internal RPC will live. It should be set to something like::\n\n     DJANGO_REST_FRAMEWORK_REACTIVE = {\n        'host': 'localhost',\n        'port': 9432,\n     }\n\n  The hostname and port must be such that they are reachable from the Django application server.\n\n\nEach ``ViewSet`` that should support reactivity, must be registered by using:\n\n.. code::\n\n   from rest_framework_reactive.pool import pool\n   pool.register_viewset(MyViewSet)\n\nThe best place to do this is inside ``models.py`` or better, inside the ``ready`` handler\nof an ``AppConfig``.\n\nAt the moment, you are required to change your project's ``manage.py`` to monkey patch\nthe ``runobservers`` command with support for gevent coroutines. Note that regular Django\napplication server still runs as normal, only the observer process runs using coroutines.\n\nThe modified ``manage.py`` should look as follows:\n\n.. code::\n\n   #!/usr/bin/env python\n   import os\n   import sys\n\n   if __name__ == \"__main__\":\n       os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"genesis.settings.development\")\n\n       # This is needed here so the monkey patching is done before Django ORM is loaded. If we\n       # do it inside the 'runobservers' management command, it is already too late as a database\n       # connection has already been created using thread identifiers, which become invalid\n       # after monkey patching.\n       if 'runobservers' in sys.argv:\n           import gevent.monkey\n           import psycogreen.gevent\n\n           # Patch the I/O primitives and psycopg2 database driver to be greenlet-enabled.\n           gevent.monkey.patch_all()\n           psycogreen.gevent.patch_psycopg()\n\n       from django.core.management import execute_from_command_line\n\n       execute_from_command_line(sys.argv)\n\nAnd finally, ``urls.py`` need to be updated to include some additional paths:\n\n.. code::\n\n   urlpatterns = [\n     # ...\n     url(r'^api/queryobserver/', include('rest_framework_reactive.api_urls')),\n     # ...\n   ]\n\nRun\n===\n\nIn addition to running a Django application server instance, you need to also run a\nseparate observer process. You may start it by running:\n\n.. code::\n\n   python manage.py runobservers",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/genialis/django-rest-framework-reactive",
    "keywords": "django-rest-framework reactive django",
    "license": "Apache License (2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-reactive",
    "package_url": "https://pypi.org/project/djangorestframework-reactive/",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorestframework-reactive/",
    "project_urls": {
      "Homepage": "https://github.com/genialis/django-rest-framework-reactive"
    },
    "release_url": "https://pypi.org/project/djangorestframework-reactive/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Making Django REST Framework reactive",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13445722,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f284aaa235009aeb0a5bcbdf19d058a609cdf23bdb32271f1daaffb6b5b0f45",
        "md5": "6a47757465ab37b0af77c704425c7eef",
        "sha256": "f77f9187fd8d09282c6d08025fb580b9cbb542ed96a603350a64bd402e0547af"
      },
      "downloads": -1,
      "filename": "djangorestframework-reactive-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a47757465ab37b0af77c704425c7eef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22208,
      "upload_time": "2018-02-05T09:50:00",
      "upload_time_iso_8601": "2018-02-05T09:50:00.561313Z",
      "url": "https://files.pythonhosted.org/packages/5f/28/4aaa235009aeb0a5bcbdf19d058a609cdf23bdb32271f1daaffb6b5b0f45/djangorestframework-reactive-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}