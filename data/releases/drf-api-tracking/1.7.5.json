{
  "info": {
    "author": "Anna Schneider",
    "author_email": "anna@WattTime.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# drf-api-tracking\n\n[![build-status-image]][travis]\n[![pypi-version]][pypi]\n[![Requirements Status](https://requires.io/github/lingster/drf-api-tracking/requirements.svg?branch=master)](https://requires.io/github/lingster/drf-api-tracking/requirements/?branch=master)\n[![Coverage Status](https://coveralls.io/repos/github/lingster/drf-api-tracking/badge.svg?branch=master)](https://coveralls.io/github/lingster/drf-api-tracking?branch=master)\n\n## Overview\n\ndrf-api-tracking provides a Django model and DRF view mixin that work together to log Django Rest Framework requests to the database. You'll get these attributes for every request/response cycle to a view that uses the mixin:\n\n\n Model field name | Description | Model field type\n------------------|-------------|-----------------\n`user` | User if authenticated, None if not | Foreign Key\n`username_persistent` | Static field that persists the username even if the User model object is deleted | CharField\n`requested_at` | Date-time that the request was made | DateTimeField\n`response_ms` | Number of milliseconds spent in view code | PositiveIntegerField\n`path` | Target URI of the request, e.g., `\"/api/\"` | CharField\n`view` | Target VIEW of the request, e.g., `\"views.api.ApiView\"` | CharField\n`view_method` | Target METHOD of the VIEW of the request, e.g., `\"get\"` | CharField\n`remote_addr` | IP address where the request originated (X_FORWARDED_FOR if available, REMOTE_ADDR if not), e.g., `\"127.0.0.1\"` | GenericIPAddressField\n`host` | Originating host of the request, e.g., `\"example.com\"` | URLField\n`method` | HTTP method, e.g., `\"GET\"` | CharField\n`query_params` | Dictionary of request query parameters, as text | TextField\n`data` | Dictionary of POST data (JSON or form), as text | TextField\n`response` | JSON response data | TextField\n`status_code` | HTTP status code, e.g., `200` or `404` | PositiveIntegerField\n\n\n## Requirements\n\n* Django 1.11, 2.0, 2.1, 2.2, 3.0\n* Django REST Framework and Python release supporting the version of Django you are using\n\nDjango | Python | DRF\n-------|--------|----\n1.11 | 2.7, 3.5, 3.6 | 3.5, 3.6, 3.7, 3.8, 3.9\n2.0 | 3.5, 3.6, 3.7 | 3.7, 3.8, 3.9\n2.1 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n2.2 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n3.0 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n\n## Installation\n\nInstall using `pip`...\n\n``` bash\n$ pip install drf-api-tracking\n```\n\nRegister with your Django project by adding `rest_framework_tracking`\nto the `INSTALLED_APPS` list in your project's `settings.py` file.\nThen run the migrations for the `APIRequestLog` model:\n\n``` bash\n$ python manage.py migrate\n```\n\n## Usage\n\nAdd the `rest_framework_tracking.mixins.LoggingMixin` to any DRF view\nto create an instance of `APIRequestLog` every time the view is called.\n\nFor instance:\n``` python\n# views.py\nfrom rest_framework import generics\nfrom rest_framework.response import Response\nfrom rest_framework_tracking.mixins import LoggingMixin\n\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def get(self, request):\n        return Response('with logging')\n```\n\nFor performance enhancement, explicitly choose methods to be logged using `logging_methods` attribute:\n\n``` python\nclass LoggingView(LoggingMixin, generics.CreateModelMixin, generics.GenericAPIView):\n    logging_methods = ['POST', 'PUT']\n    model = ...\n```\n\nMoreover, you could define your own rules by overriding `should_log` method.\nIf `should_log` evaluates to True a log is created.\n\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def should_log(self, request, response):\n        \"\"\"Log only errors\"\"\"\n        return response.status_code >= 400\n```\n\nAt the example above, `logging_methods` attribute will be ignored. If you want to provide some extra rules\non top of the http method filtering you should rewrite the `should_log` method.\n\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def should_log(self, request, response):\n        \"\"\"Log only errors with respect on `logging_methods` attributes\"\"\"\n        should_log_method = super(LoggingView, self).should_log(request, response)\n        if not should_log_method:\n            return False\n        return response.status_code >= 400\n```\n\n A bit simpler.\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def should_log(self, request, response):\n        \"\"\"Log only errors with respect on `logging_methods` attributes\"\"\"\n        if not request.method in self.logging_methods:\n            return False\n        return response.status_code >= 400\n```\n\nFinally, you can also apply your customizations by overriding `handle_log` method.\nBy default, all requests that satisfy `should_log` method are saved on the database.\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def handle_log(self):\n        # Do some stuff before saving.\n        super(MockCustomLogHandlerView, self).handle_log()\n        # Do some stuff after saving.\n```\n\n\nThough, you could define your own handling. For example save on an in-memory data structure store, remote logging system etc.\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n\n    def handle_log(self):\n        cache.set('my_key', self.log, 86400)\n```\n\nOr you could omit save a request to the database. For example,\n``` python\nclass LoggingView(LoggingMixin, generics.GenericAPIView):\n    def handle_log(self):\n        \"\"\"\n        Save only very slow requests. Requests that took more than a second.\n        \"\"\"\n        if self.log['response_ms'] > 1000:\n            super(MockCustomLogHandlerView, self).handle_log()\n```\n\n\n## Security\n\nBy default drf-api-tracking is hiding the values of those fields `{'api', 'token', 'key', 'secret', 'password', 'signature'}`.\nThe default list hast been taken from Django itself ([https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#L50](https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#L50)).\n\nYou can complete this list with your own list by putting the fields you want to be hidden in the `sensitive_fields` parameter of your view.\n\n``` python\nclass LoggingView(LoggingMixin, generics.CreateModelMixin, generics.GenericAPIView):\n    sensitive_fields = {'my_secret_key', 'my_secret_recipe'}\n```\n\nBy default drf-tracking allows API request log entries to be modified from Django admin. This can present a data integrity issue in production environments. In order to change this behavior, you can set `DRF_TRACKING_ADMIN_LOG_READONLY` to `True` in your `settings.py` file.\n\n## Development\nIn the folder there is a sample drf project: `drf_api_sample` if changes are made to this packages models, use this project\nto help generate new migrations, which should be checked in. \n\n## Testing\n\nInstall testing requirements.\n\n``` bash\n$ pip install -r requirements.txt\n```\n\nRun with runtests.\n\n``` bash\n$ ./runtests.py\n```\n\nYou can also use the excellent [tox](http://tox.readthedocs.org/en/latest/) testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run:\n\n``` bash\n$ tox\n```\n\n## Documentation\n\nTo build the documentation, you'll need to install `mkdocs`.\n\n``` bash\n$ pip install mkdocs\n```\n\nTo preview the documentation:\n\n``` bash\n$ mkdocs serve\nRunning at: http://127.0.0.1:8000/\n```\n\nTo build the documentation:\n\n``` bash\n$ mkdocs build\n```\n\n\n[build-status-image]: https://secure.travis-ci.org/lingster/drf-api-tracking.png?branch=master\n[travis]: http://travis-ci.org/lingster/drf-api-tracking?branch=master\n[pypi-version]: https://img.shields.io/pypi/v/drf-api-tracking.svg\n[pypi]: https://pypi.python.org/pypi/drf-api-tracking\n\n\n# travis\nInstall RVM to have a local user version of ruby/gem:\n`https://rvm.io/rvm/install`\nThen install travis like this:\n`gem install travis`\nadd your secret key as per the link below:\n`https://docs.travis-ci.com/user/encryption-keys/`\n\npyenv\n---\nusing pyenv you can install multiple versions of python so that tox can run tests against all installed versions of python\n``` bash\npyenv global 3.6.8 3.7.7 3.8.2\n```\nensure that before running tox you don't have a virtualenv created and tox has been installed globally or via pipx",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lingster/drf-api-tracking",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-api-tracking",
    "package_url": "https://pypi.org/project/drf-api-tracking/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-api-tracking/",
    "project_urls": {
      "Homepage": "https://github.com/lingster/drf-api-tracking"
    },
    "release_url": "https://pypi.org/project/drf-api-tracking/1.7.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Utils to log Django Rest Framework requests to the database",
    "version": "1.7.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10232118,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b063f0f2e1edca80273b25297504ae5107cf5f5e68064b41e0ca2ca7fda484ce",
        "md5": "d53d79763f5ebbeb3315fae74c68f755",
        "sha256": "0ff5d5c388bee8fd606d088c2631eb28831943b0e691590e0821d6e350539523"
      },
      "downloads": -1,
      "filename": "drf-api-tracking-1.7.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d53d79763f5ebbeb3315fae74c68f755",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11514,
      "upload_time": "2020-06-20T20:48:20",
      "upload_time_iso_8601": "2020-06-20T20:48:20.737843Z",
      "url": "https://files.pythonhosted.org/packages/b0/63/f0f2e1edca80273b25297504ae5107cf5f5e68064b41e0ca2ca7fda484ce/drf-api-tracking-1.7.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}