{
  "info": {
    "author": "Alexey Kuleshevich",
    "author_email": "lehins@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-smartfields\n##################\n\n.. image:: https://readthedocs.org/projects/django-smartfields/badge/?version=latest\n   :target: https://readthedocs.org/projects/django-smartfields/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/django-smartfields.svg\n   :target: https://pypi.python.org/pypi/django-smartfields/\n   :alt: Latest Version\n\n.. image:: https://landscape.io/github/lehins/django-smartfields/master/landscape.png\n   :target: https://landscape.io/github/lehins/django-smartfields/master\n   :alt: Code Health\n\n.. image:: https://img.shields.io/coveralls/lehins/django-smartfields.svg\n   :target: https://coveralls.io/r/lehins/django-smartfields\n   :alt: Tests Coverage\n\n.. image:: https://travis-ci.org/lehins/django-smartfields.svg?branch=master\n   :target: https://travis-ci.org/lehins/django-smartfields\n   :alt: Travis-CI\n\n\nDjango Model Fields that are smart.\n-----------------------------------\n\nThis app introduces a declarative way of handling fields' values. It can be\nespecially useful when one field depends on a value from another field, even if\na field depends on itself. At first it might sound useless, but, as it turns\nout, it is an amazing concept that helps in writing clear, concise and DRY code.\n\nBest way to describe is on a simple example. Let's say there is a field where\nyou store a custom html page and you would like to have another field attached\nto the same model store the same page but with html tags stripped out, moreover\nyou would like it to update whenever the first field changes it's value. A\ncommon way to handle that issue is to overwrite model's ``save`` method and put\nall the logic there, right? What if you could just give a field a function that\ndoes the stripping and everything else is taking care of? Wouldn't that be nice,\nhuh?  Well, that's one of many things this app let's you do.\n\nAnother great example is django's ``ImageField`` that can update ``width_field``\nand ``height_field`` whenever image is changed. This app uses similar concepts\nto achive that functionality. But here is a more powerful example that\ndemonstrates the value of this app. Let's say you would like to have a user be\nable to upload an image in any format and automatically add another version of\nthis image converted to JPEG and shrunk to fit in a box size of 1024x768. Here\nis how it could look with utilization of `django-smartfields`:\n\n.. code-block:: python\n\n    from django.db import models\n\n    from smartfields import fields\n    from smartfields.dependencies import FileDependency\n    from smartfields.processors import ImageProcessor\n\n    class User(models.Model):\n        # ... more fields ....\n        avatar = fields.ImageField(upload_to='avatar', dependencies=[\n            FileDependency(attname='avatar_jpeg', processor=ImageProcessor(\n                format='JPEG', scale={'max_width': 1024, 'max_height': 768})),\n        ])\n        avatar_jpeg = fields.ImageField(upload_to='avatar')\n        # ... more fields ...\n\nThat's it. Did I mention that it will also clean up old files, when new ones are\nuploaded?\n\nSo, hopefully I got you convinced to give this app a try. There is full\ndocumentation also on the way, but for now you can check out 'tests' folder for\nsome examples.\n\nDjango settings\n---------------\n\nRequired django apps for most of the functionality:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        'django.contrib.auth',\n        'django.contrib.sessions',\n        'django.contrib.contenttypes',\n        'django.contrib.sites',\n\n        'smartfields',\n\n        # optional, needed for forms\n        'crispy_forms'\n    ]\n\nOther required settings\n\n.. code-block:: python\n\n    MIDDLEWARE = [\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'django.contrib.messages.middleware.MessageMiddleware'\n    ]\n\n    SITE_ID = 1\n\nDependencies\n------------\n* `Django <https://djangoproject.com/>`_ versions >= 1.7 (also works for 2.x and 3.x)\n* `Python Pillow <https://pillow.readthedocs.org>`_ - (optional) used for\n  image conversion/resizing. AND/OR\n* `Wand <http://docs.wand-py.org>`_ - (optional) also for image processing.\n* `ffmpeg <https://www.ffmpeg.org/>`_ - (optional) for video conversion. (can\n  be easily adopted for `avconv <https://libav.org/avconv.html>`_).\n* `BeautifulSoup4 <https://pypi.python.org/pypi/beautifulsoup4/>`_ - (optional)\n  for HTML stripping\n* `lxml <https://pypi.python.org/pypi/lxml>`_ - (optional) for BeautifulSoup.\n* `django-crispy-forms\n  <https://readthedocs.org/projects/django-crispy-forms/>`_ - (optional) for\n  ajax uploading.\n* `Plupload <http://www.plupload.com/>`_ - (optional) for ajax uploading.\n* `Bootstrap3 <http://getbootstrap.com/>`_ - (optional) for ajax uploading.\n\n\nChangelog\n=========\n\n1.1.1\n-----\n\n* Support for Django=3.x\n\n1.1.0\n-----\n\n* renamed ``Dependency.async`` to ``Dependency.async_``.\n  Fix for `#16 <https://github.com/lehins/django-smartfields/issues/16>`_.\n  Thanks `@zglennie <https://github.com/zglennie>`_\n* Fix compatibility with ``Django=2.x``:\n\n  * Added ``app_name='smartifelds'`` to ``urls.py`` file\n  * Stop using ``_size`` and ``_set_size()`` attributes in ``NamedTemporaryFile``,\n    since those where only available in ``Django=1.x``\n\n1.0.7\n-----\n\n* added ``gis`` fields.\n* made ``lxml`` a default parser for HTMLProcessor.\n\n1.0.6\n-----\n\n* added ``RenameFileProcessor``\n\n1.0.5\n-----\n\n* minor bug fixes.\n\n1.0.4\n-----\n\n* Switched to MIT License\n* Added ``stashed_value`` to processors.\n\n1.0.3\n-----\n\n* Added support for ``Wand`` with ``WandImageProcessor``.\n* Made it compatible with Django 1.8\n* Updated compiled JavaScript file.\n\n1.0.2\n-----\n\n* Introduced ``pre_processor``.\n* Made ``UploadTo`` serializible.\n* Got rid of custom handlers.\n* Minor bugfixes.\n\n1.0.0\n-----\n\n* Initial release\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lehins/django-smartfields",
    "keywords": "django,model fields,declarative,FileField cleanup,FileField conversion,ImageField conversion,ajax uploading",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-smartfields",
    "package_url": "https://pypi.org/project/django-smartfields/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-smartfields/",
    "project_urls": {
      "Homepage": "https://github.com/lehins/django-smartfields"
    },
    "release_url": "https://pypi.org/project/django-smartfields/1.1.1/",
    "requires_dist": [
      "Django (>=1.5.0)",
      "six"
    ],
    "requires_python": "",
    "summary": "Django Model Fields that are smart.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8769790,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0b64933e06378f9f9104560f4cbbf3ba2e0019dab3e9c5c701b70eb46849e8c",
        "md5": "db44ee6c974543d7dfd0b127912112bd",
        "sha256": "be5cd09936f2340e27dc92147e26b1ce3bd79aba1f0aae252c987b1e42bfdede"
      },
      "downloads": -1,
      "filename": "django_smartfields-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db44ee6c974543d7dfd0b127912112bd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 44393,
      "upload_time": "2020-01-28T09:09:39",
      "upload_time_iso_8601": "2020-01-28T09:09:39.940651Z",
      "url": "https://files.pythonhosted.org/packages/a0/b6/4933e06378f9f9104560f4cbbf3ba2e0019dab3e9c5c701b70eb46849e8c/django_smartfields-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19e5423c3c8e913cb8a2be6971abb6bbd70559b5b4a621b6e21a7b543bbe8161",
        "md5": "ba362728192581ef705a5c9e6c5863b4",
        "sha256": "8baf7f318dde8795ba944fd6d3b7f050fd7ae84b05194aaaad3d013c4532752a"
      },
      "downloads": -1,
      "filename": "django-smartfields-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ba362728192581ef705a5c9e6c5863b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34640,
      "upload_time": "2020-01-28T09:09:42",
      "upload_time_iso_8601": "2020-01-28T09:09:42.178791Z",
      "url": "https://files.pythonhosted.org/packages/19/e5/423c3c8e913cb8a2be6971abb6bbd70559b5b4a621b6e21a7b543bbe8161/django-smartfields-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}