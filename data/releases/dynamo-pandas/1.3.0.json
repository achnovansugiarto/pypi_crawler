{
  "info": {
    "author": "Julien de la Bruère-Terreault",
    "author_email": "drgfreeman@tuta.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![unit-tests-linux](https://github.com/drgfreeman/dynamo-pandas/actions/workflows/linux-checks.yml/badge.svg)](https://github.com/DrGFreeman/dynamo-pandas/actions/workflows/linux-checks.yml)\n[![unit-tests-windows](https://github.com/drgfreeman/dynamo-pandas/actions/workflows/windows-checks.yml/badge.svg)](https://github.com/DrGFreeman/dynamo-pandas/actions/workflows/windows-checks.yml)\n[![Documentation Status](https://readthedocs.org/projects/dynamo-pandas/badge/?version=latest)](https://dynamo-pandas.readthedocs.io/en/latest/?badge=latest)\n\n# dynamo-pandas\nMake working with pandas data and AWS DynamoDB easy.\n\n## Motivation\nThis package aims a making the transfer of data between pandas dataframes and DynamoDB as simple as possible. To meet this goal, the package offers two key features:\n1. Automatic conversion of pandas data types to DynamoDB supported data types.\n1. A simple, high level interface to *put* data from a dataframe into a DynamoDB table and *get* all or selected items from a table into a dataframe.\n\n\n## Documentation\n\nThe project's documentation is available at https://dynamo-pandas.readthedocs.io/.\n\n\n## Requirements\n* `python>=3.7`\n* `pandas>=1`\n* `boto3`\n\n## Installation\n\n```\npython -m pip install dynamo-pandas\n```\n\nThis will install the package and its dependencies except for `boto3` which is not installed by default to avoid unnecessary installation when building Lambda layers.\n\nTo include `boto3` as part of the installation, add the `boto3` \"extra\" this way:\n\n```\npython -m pip install dynamo-pandas[boto3]\n```\n\n## Example Usage\n\nConsider the pandas DataFrame below.\n\n\n```python\n>>> print(players_df)\n\n      player_id           last_play       play_time  rating  bonus_points\n0    player_one 2021-01-18 22:47:23 2 days 17:41:55     4.3             3\n1    player_two 2021-01-19 19:07:54 0 days 22:07:34     3.8             1\n2  player_three 2021-01-21 10:22:43 1 days 14:01:19     2.5             4\n3   player_four 2021-01-22 13:51:12 0 days 03:45:49     4.8          <NA>\n```\n\nThe columns of the dataframe use different data types, some of which are not natively supported by DynamoDB, like numpy.datetime64, timedelta64 and pandas' nullable integers.\n\n\n```python\n>>> players_df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4 entries, 0 to 3\nData columns (total 5 columns):\n    #   Column        Non-Null Count  Dtype          \n---  ------        --------------  -----          \n    0   player_id     4 non-null      object         \n    1   last_play     4 non-null      datetime64[ns] \n    2   play_time     4 non-null      timedelta64[ns]\n    3   rating        4 non-null      float64        \n    4   bonus_points  3 non-null      Int8           \ndtypes: Int8(1), datetime64[ns](1), float64(1), object(1), timedelta64[ns](1)\nmemory usage: 264.0+ bytes\n```\n\nStoring the rows of this dataframe to DynamoDB requires multiple data type conversions.\n\n```python\n>>> from dynamo_pandas import put_df, get_df, keys\n```\n\nThe `put_df` function adds or updates the rows of a dataframe into the specified table, taking care of the required type conversions (the table must be already created and the primary key column(s) be present in the dataframe).\n\n```python\n>>> put_df(players_df, table=\"players\")\n```\n\nThe `get_df` function retrieves the items matching the speficied key(s) from the table into a dataframe.\n\n\n```python\n>>> df = get_df(table=\"players\", keys=[{\"player_id\": \"player_three\"}, {\"player_id\": \"player_one\"}])\n>>> print(df)\n\n   bonus_points     player_id            last_play  rating        play_time\n0             4  player_three  2021-01-21 10:22:43     2.5  1 days 14:01:19\n1             3    player_one  2021-01-18 22:47:23     4.3  2 days 17:41:55\n```\n\nIn the case where only a partition key is used, the `keys` function simplifies the generation of the keys list.\n\n\n```python\n>>> df = get_df(table=\"players\", keys=keys(player_id=[\"player_two\", \"player_four\"]))\n>>> print(df)\n\n   bonus_points    player_id            last_play  rating        play_time\n0           1.0   player_two  2021-01-19 19:07:54     3.8  0 days 22:07:34\n1           NaN  player_four  2021-01-22 13:51:12     4.8  0 days 03:45:49\n```\n\nThe data types returned by the `get_df` function are basic types and no automatic type conversion is attempted.\n\n\n```python\n>>> df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2 entries, 0 to 1\nData columns (total 5 columns):\n    #   Column        Non-Null Count  Dtype  \n   ---  ------        --------------  -----  \n    0   bonus_points  1 non-null      float64\n    1   player_id     2 non-null      object \n    2   last_play     2 non-null      object \n    3   rating        2 non-null      float64\n    4   play_time     2 non-null      object \ndtypes: float64(2), object(3)\nmemory usage: 208.0+ bytes\n```\n\nThe `dtype` parameter of the `get_df` function allows specifying the desired data types.\n\n```python\n>>> df = get_df(\n...     table=\"players\",\n...     keys=keys(player_id=[\"player_two\", \"player_four\"]),\n...     dtype={\n...         \"bonus_points\": \"Int8\",\n...         \"last_play\": \"datetime64[ns, UTC]\",\n...         # \"play_time\": \"timedelta64[ns]\"  # See note below.\n...     }\n... )\n```\n\n**Note**: Due to a known bug in pandas, timedelta strings cannot currently be converted back to Timedelta type via this parameter (ref. https://github.com/pandas-dev/pandas/issues/38509). Use the pandas.to_timedelta function instead:\n\n\n```python\n>>> df.play_time = pd.to_timedelta(df.play_time)\n>>> df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2 entries, 0 to 1\nData columns (total 5 columns):\n    #   Column        Non-Null Count  Dtype              \n---  ------        --------------  -----              \n    0   bonus_points  1 non-null      Int8               \n    1   player_id     2 non-null      object             \n    2   last_play     2 non-null      datetime64[ns, UTC]\n    3   rating        2 non-null      float64            \n    4   play_time     2 non-null      timedelta64[ns]    \ndtypes: Int8(1), datetime64[ns, UTC](1), float64(1), object(1), timedelta64[ns](1)\nmemory usage: 196.0+ bytes\n```\n\nOmitting the `keys` parameter performs a scan of the table and returns all the items.\n\n\n```python\n>>> df = get_df(table=\"players\")\n>>> print(df)\n\n       bonus_points     player_id            last_play  rating        play_time\n    0           4.0  player_three  2021-01-21 10:22:43     2.5  1 days 14:01:19\n    1           NaN   player_four  2021-01-22 13:51:12     4.8  0 days 03:45:49\n    2           3.0    player_one  2021-01-18 22:47:23     4.3  2 days 17:41:55\n    3           1.0    player_two  2021-01-19 19:07:54     3.8  0 days 22:07:34\n```\n\n## License\n\nReleased under the terms of the [MIT License](LICENSE).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DrGFreeman/dynamo-pandas",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Julien de la Bruère-Terreault",
    "maintainer_email": "drgfreeman@tuta.io",
    "name": "dynamo-pandas",
    "package_url": "https://pypi.org/project/dynamo-pandas/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynamo-pandas/",
    "project_urls": {
      "Homepage": "https://github.com/DrGFreeman/dynamo-pandas"
    },
    "release_url": "https://pypi.org/project/dynamo-pandas/1.3.0/",
    "requires_dist": [
      "pandas (>=1)",
      "boto3 ; extra == 'boto3'"
    ],
    "requires_python": ">=3.7",
    "summary": "Make working with pandas dataframe and AWS DynamoDB easy.",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14841573,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13c414d554d13a45ebead87910f4deb221ecaa2cde922d737093e5acfb844744",
        "md5": "1315c1b7feb152fa1c8dd674b49e0370",
        "sha256": "0bec8a80845c4ff1b2f0baccf99f3fe487eca834e933af6f2d30fb38b6036c5b"
      },
      "downloads": -1,
      "filename": "dynamo_pandas-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1315c1b7feb152fa1c8dd674b49e0370",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11602,
      "upload_time": "2022-08-22T21:52:48",
      "upload_time_iso_8601": "2022-08-22T21:52:48.280886Z",
      "url": "https://files.pythonhosted.org/packages/13/c4/14d554d13a45ebead87910f4deb221ecaa2cde922d737093e5acfb844744/dynamo_pandas-1.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebca15cf7f8dd4ce86b5d1166cf45d9654d3f664231810672a117666651bf190",
        "md5": "bb2cbc2d99093093ed5aaf9fab7d84ae",
        "sha256": "d24d30712d2ba853885cbe40dfea45dbba93231dc08eb309cff4a2b919ec7ac8"
      },
      "downloads": -1,
      "filename": "dynamo-pandas-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bb2cbc2d99093093ed5aaf9fab7d84ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11637,
      "upload_time": "2022-08-22T21:52:50",
      "upload_time_iso_8601": "2022-08-22T21:52:50.397910Z",
      "url": "https://files.pythonhosted.org/packages/eb/ca/15cf7f8dd4ce86b5d1166cf45d9654d3f664231810672a117666651bf190/dynamo-pandas-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}