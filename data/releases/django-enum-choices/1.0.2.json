{
  "info": {
    "author": "Vasil Slavov",
    "author_email": "vasil.slavov@hacksoft.io",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\n# django-enum-choices\n\nA custom Django choice field to use with [Python enums.](https://docs.python.org/3/library/enum.html)\n\n[![PyPI version](https://badge.fury.io/py/django-enum-choices.svg)](https://badge.fury.io/py/django-enum-choices)\n\n## Table of Contents\n- [Installation](#installation)\n- [Basic Usage](#basic-usage)\n- [Postgres ArrayField Usage](#postgres-arrayfield-usage)\n- [Usage with Django Rest Framework](#usage-with-django-rest-framework)\n  - [Caveat](#caveat)\n- [Serializing PostgreSQL ArrayField](#serializing-postgresql-arrayfield)\n- [Customizing readable values](#customizing-readable-values)\n- [Implementation details](#implementation-details)\n- [Using Python's `enum.auto`](#using-pythons-enumauto)\n- [Development](#development)\n\n## Installation\n\n```bash\npip install django-enum-choices\n```\n\n## Basic Usage\n\n```python\nfrom django.db import models\n\nfrom django_enum_choices.fields import EnumChoiceField\n\n\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\n\nclass MyModel(models.Model):\n    enumerated_field = EnumChoiceField(MyEnum)\n```\n\n**Model creation**\n\n```python\ninstance = MyModel.objects.create(enumerated_field=MyEnum.A)\n```\n\n**Changing enum values**\n\n```python\ninstance.enumerated_field = MyEnum.B\ninstance.save()\n```\n\n**Filtering**\n\n```python\nMyModel.objects.filter(enumerated_field=MyEnum.A)\n```\n\n## Postgres ArrayField Usage\n\n```python\nfrom django.db import models\nfrom django.contrib.postgres.fields import ArrayField\n\nfrom django_enum_choices.fields import EnumChoiceField\n\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\nclass MyModelMultiple(models.Model):\n    enumerated_field = ArrayField(\n        base_field=EnumChoiceField(MyEnum)\n    )\n```\n\n**Model Creation**\n\n```python\ninstance = MyModelMultiple.objects.create(enumerated_field=[MyEnum.A, MyEnum.B])\n```\n\n**Changing enum values**\n\n```python\ninstance.enumerated_field = [MyEnum.B]\ninstance.save()\n```\n\n## Usage with Django Rest Framework\n\n**Using a subclass of `serializers.Serializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceField\n\nclass MySerializer(serializers.Serializer):\n    enumerated_field = EnumChoiceField(MyEnum)\n\n# Serialization:\nserializer = MySerializer({\n    'enumerated_field': MyEnum.A\n})\ndata = serializer.data  # {'enumerated_field': 'a'}\n\n# Deserialization:\nserializer = MySerializer(data={\n    'enumerated_field': 'a'\n})\nserializer.is_valid()\ndata = serializer.validated_data  # OrderedDict([('enumerated_field', <MyEnum.A: 'a'>)])\n```\n\n**Using a subclass of `serializers.ModelSerializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceField\n\nclass MyModelSerializer(serializers.ModelSerializer):\n    enumerated_field = EnumChoiceField(MyEnum)\n\n    class Meta:\n        model = MyModel\n        fields = ('enumerated_field', )\n\n# Serialization:\ninstance = MyModel.objects.create(enumerated_field=MyEnum.A)\nserializer = MyModelSerializer(instance)\ndata = serializer.data  # {'enumerated_field': 'a'}\n\n# Saving:\nserializer = MyModelSerializer(data={\n    'enumerated_field': 'a'\n})\nserializer.is_valid()\nserializer.save()\n```\n\n### Caveat\n\nIf you don't explicitly specify the `enumerated_field = EnumChoiceField(MyEnum)`, then you need to include the `EnumChoiceModelSerializerMixin`:\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceModelSerializerMixin\n\nclass ImplicitMyModelSerializer(\n    EnumChoiceModelSerializerMixin,\n    serializers.ModelSerializer\n):\n    class Meta:\n        model = MyModel\n        fields = ('enumerated_field', )\n```\n\nBy default `ModelSerializer.build_standard_field` coerces any field that has a model field with choices to `ChoiceField` which returns the value directly.\n\nSince enum values resemble `EnumClass.ENUM_INSTANCE` they won't be able to be encoded by the `JSONEncoder` when being passed to a `Response`.\n\nThat's why we need the mixin.\n\n## Serializing PostgreSQL ArrayField\n`django-enum-choices` exposes a `MultipleEnumChoiceField` that can be used for serializing arrays of enumerations.\n\n**Using a subclass of `serializers.Serializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import MultipleEnumChoiceField\n\nclass MultipleMySerializer(serializers.Serializer):\n    enumerated_field = MultipleEnumChoiceField(MyEnum)\n\n# Serialization:\nserializer = MultipleMySerializer({\n    'enumerated_field': [MyEnum.A, MyEnum.B]\n})\ndata = serializer.data  # {'enumerated_field': ['a', 'b']}\n\n# Deserialization:\nserializer = MultipleMySerializer(data={\n    'enumerated_field': ['a', 'b']\n})\nserializer.is_valid()\ndata = serializer.validated_data  # OrderedDict([('enumerated_field', [<MyEnum.A: 'a'>, <MyEnum.B: 'b'>])])\n```\n\n**Using a subclass of `serializers.ModelSerializer`**\n\n```python\nclass ImplicitMultipleMyModelSerializer(\n    EnumChoiceModelSerializerMixin,\n    serializers.ModelSerializer\n):\n    class Meta:\n        model = MyModelMultiple\n        fields = ('enumerated_field', )\n\n# Serialization:\ninstance = MyModelMultiple.objects.create(enumerated_field=[MyEnum.A, MyEnum.B])\nserializer = ImplicitMultipleMyModelSerializer(instance)\ndata = serializer.data  # {'enumerated_field': ['a', 'b']}\n\n# Saving:\nserializer = ImplicitMultipleMyModelSerializer(data={\n    'enumerated_field': ['a', 'b']\n})\nserializer.is_valid()\nserializer.save()\n```\n\nThe `EnumChoiceModelSerializerMixin` does not need to be used if `enumerated_field` is defined on the serializer class explicitly.\n\n\n## Customizing readable values\n\nIf a `get_readable_value` method is provided, `django_enum_choices` will use it to produce the readable values that are written in the database:\n\n```python\nclass CustomReadableValueEnum(Enum):\n    A = 'a'\n    B = 'b'\n\n    @classmethod\n    def get_readable_value(cls, choice):\n        return cls(choice).value.upper()\n```\n\nUsing the above class as an `enum_class` argument to `django_enum_choices.fields.EnumChoiceField` will produce the choices for the database as `(('a', 'A'), ('b', 'B'))`\n\n\n## Implementation details\n\n* `EnumChoiceField` is a subclass of `CharField`.\n* Only subclasses of `Enum` are valid arguments for `EnumChoiceField`.\n* `choices` are generated from the values of the enumeration, like `(str(value), str(value))`, meaning you can put any valid Python object there.\n* `max_length`, if passed, is ignored. `max_length` is automatically calculated from the longest choice.\n\n\nFor example, lets have the following case:\n\n```python\nclass Value:\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return self.value\n\n\nclass CustomObjectEnum(Enum):\n    A = Value(1)\n    B = Value('B')\n\n\nclass SomeModel(models.Model):\n    enumerated_field = EnumChoiceField(CustomObjectEnum)\n```\n\nWe'll have the following:\n\n* `SomeModel.enumerated_field.choices == (('1', '1'), ('B', 'B'))`\n* `SomeModel.enumerated_field.max_length == 3`\n\n## Using Python's `enum.auto`\n`enum.auto` can be used for shorthand enumeration definitions:\n\n```python\nfrom enum import Enum, auto\n\nclass AutoEnum(Enum):\n    A = auto()  # 1\n    B = auto()  # 2\n\nclass SomeModel(models.Model):\n    enumerated_field = EnumChoiceField(Enum)\n```\n\nThis will result in the following:\n* `SomeModel.enumerated_field.choices == (('1', '1'), ('2', '2'))`\n\n**Overridinng `auto` behaviour**\nCustom values for enumerations, created by `auto`, can be defined by\nsubclassing an `Enum` that defines `_generate_next_value_`:\n\n```python\nclass CustomAutoEnumValueGenerator(Enum):\n    def _generate_next_value_(name, start, count, last_values):\n        return {\n            'A': 'foo',\n            'B': 'bar'\n        }[name]\n\n\nclass CustomAutoEnum(CustomAutoEnumValueGenerator):\n    A = auto()\n    B = auto()\n```\n\nThe above will assign the values mapped in the dictionary as values to attributes in `CustomAutoEnum`.\n\n## Development\n**Prerequisites**\n* SQLite3\n* PostgreSQL server\n* Python >= 3.5 virtual environment\n\n```bash\ngit clone https://github.com/HackSoftware/django-enum-choices.git\ncd django_enum_choices\npip install -e .[dev]\n```\n\nLinting and running the tests:\n```bash\ntox\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HackSoftware/django-enum-choices",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-enum-choices",
    "package_url": "https://pypi.org/project/django-enum-choices/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-enum-choices/",
    "project_urls": {
      "Homepage": "https://github.com/HackSoftware/django-enum-choices"
    },
    "release_url": "https://pypi.org/project/django-enum-choices/1.0.2/",
    "requires_dist": [
      "Django (>=1.11)",
      "Django (==2.2.3) ; extra == 'dev'",
      "djangorestframework (==3.9.4) ; extra == 'dev'",
      "psycopg2 (==2.8.3) ; extra == 'dev'",
      "flake8 (==3.7.7) ; extra == 'dev'",
      "pytest (==4.6.3) ; extra == 'dev'",
      "pytest-django (==3.5.0) ; extra == 'dev'",
      "pytest-pythonpath (==0.7.3) ; extra == 'dev'",
      "django-environ (==0.4.5) ; extra == 'dev'",
      "tox (==3.13.2) ; extra == 'dev'",
      "bumpversion (==0.5.3) ; extra == 'dev'"
    ],
    "requires_python": ">=3.5.0",
    "summary": "A custom Django field able to use subclasses of Python's internal `Enum` class as choices",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13709273,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c061a50d3557c94a88d9a6f85e92976d8f01ac3d019bc581a7c296dae5c00d4",
        "md5": "a24ad7aa4aff72dc8f4241afd5620803",
        "sha256": "5634f51971a0f7640f87e725acc3bd8ada18ded47a4ca449acdb0e2c15bedb27"
      },
      "downloads": -1,
      "filename": "django_enum_choices-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a24ad7aa4aff72dc8f4241afd5620803",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5.0",
      "size": 20242,
      "upload_time": "2019-07-11T12:36:04",
      "upload_time_iso_8601": "2019-07-11T12:36:04.793097Z",
      "url": "https://files.pythonhosted.org/packages/2c/06/1a50d3557c94a88d9a6f85e92976d8f01ac3d019bc581a7c296dae5c00d4/django_enum_choices-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82dc622efed0e0f9d75afcc2fc13c9b353357fffd6af385190f1016b2621d75d",
        "md5": "23506dc0f2b403f6ecc9b2e99a0ea239",
        "sha256": "8496e4c4fc589d53ae82ad2fea15599a7b97c60bdd2304f8136a814d58743087"
      },
      "downloads": -1,
      "filename": "django_enum_choices-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "23506dc0f2b403f6ecc9b2e99a0ea239",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 17057,
      "upload_time": "2019-07-11T12:36:06",
      "upload_time_iso_8601": "2019-07-11T12:36:06.819268Z",
      "url": "https://files.pythonhosted.org/packages/82/dc/622efed0e0f9d75afcc2fc13c9b353357fffd6af385190f1016b2621d75d/django_enum_choices-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}