{
  "info": {
    "author": "Vasil Slavov",
    "author_email": "vasil.slavov@hacksoft.io",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\n# django-enum-choices\n\nA custom Django choice field to use with [Python enums.](https://docs.python.org/3/library/enum.html)\n\n[![PyPI version](https://badge.fury.io/py/django-enum-choices.svg)](https://badge.fury.io/py/django-enum-choices)\n\n## Table of Contents\n- [Installation](#installation)\n- [Basic Usage](#basic-usage)\n- [Customizing readable values](#customizing-readable-values)\n- [Usage with forms](#usage-with-forms)\n- [Postgres ArrayField Usage](#postgres-arrayfield-usage)\n- [Usage with Django Rest Framework](#usage-with-django-rest-framework)\n  - [Caveat](#caveat)\n- [Usage with `django-filter`](#usage-with-django-filter)\n- [Serializing PostgreSQL ArrayField](#serializing-postgresql-arrayfield)\n- [Implementation details](#implementation-details)\n- [Using Python's `enum.auto`](#using-pythons-enumauto)\n- [Development](#development)\n\n## Installation\n\n```bash\npip install django-enum-choices\n```\n\n## Basic Usage\n\n```python\nfrom django.db import models\n\nfrom django_enum_choices.fields import EnumChoiceField\n\n\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\n\nclass MyModel(models.Model):\n    enumerated_field = EnumChoiceField(MyEnum)\n```\n\n**Model creation**\n\n```python\ninstance = MyModel.objects.create(enumerated_field=MyEnum.A)\n```\n\n**Changing enum values**\n\n```python\ninstance.enumerated_field = MyEnum.B\ninstance.save()\n```\n\n**Filtering**\n\n```python\nMyModel.objects.filter(enumerated_field=MyEnum.A)\n```\n\n## Customizing readable values\nIf a `choice_builder` argument is passed to a model's `EnumChoiceField`, `django_enum_choices` will use it to generate the choices.\nThe `choice_builder` must be a callable that accepts an enumeration choice and returns a tuple,\ncontaining the value to be saved and the readable value.\nBy default `django_enum_choices` uses one of the four choice builders defined in `django_enum_choices.choice_builders`, named `value_value`.\nIt returns a tuple containing the enumeration's value twice:\n```python\nfrom django_enum_choices.choice_builders import value_value\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\nprint(value_value(MyEnum.A))  # ('a', 'a')\n```\n\nYou can use one of the existing ones that fits your needs:\n\n```python\nfrom django_enum_choices.choice_builders import attribute_value\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\nclass CustomReadableValueEnumModel(models.Model):\n    enumerated_field = EnumChoiceField(\n        MyEnum,\n        choice_builder=attribute_value\n    )\n```\n\nThe resulting choices for `enumerated_field` will be `(('A', 'a'), ('B', 'b'))`\n\n\nYou can also define your own choice builder:\n\n```python\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\ndef choice_builder(choice):\n    return choice.value, choice.value.upper() + choice.value\n\nclass CustomReadableValueEnumModel(models.Model):\n    enumerated_field = EnumChoiceField(\n        MyEnum,\n        choice_builder=choice_builder\n    )\n```\n\nWhich will result in the following choices `(('a', 'Aa'), ('b', 'Bb'))`\n\nThe values in the returned from `choice_builder` tuple will be cast to strings before being used.\n\n\n## Usage with forms\n\n**Usage with `django.forms.Form`**\n\n```python\nfrom django_enum_choices.forms import EnumChoiceField\n\nfrom .enumerations import MyEnum\n\nclass StandardEnumForm(forms.Form):\n    enumerated_field = EnumChoiceField(MyEnum)\n\nform = StandardEnumForm({\n    'enumerated_field': 'a'\n})\nform.is_valid()\n\nprint(form.cleaned_data)  # {'enumerated_field': <MyEnum.A: 'a'>}\n```\n\n**Usage with `django.forms.ModelForm`**\n\n```python\nfrom .models import MyModel\n\nclass ModelEnumForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        fields = ['enumerated_field']\n\nform = ModelEnumForm({\n    'enumerated_field': 'a'\n})\n\nform.is_valid()\n\nprint(form.save(commit=True))  # <MyModel: MyModel object (12)>\n```\n\nA `choice_builder` argument can be passed to `django_model_choices.forms.EnumChoiceField`\nfor usage with model fields with custom choice builders:\n\n```python\nfrom .enumerations import MyEnum\n\ndef custom_choice_builder(choice):\n    return 'Custom_' + choice.value, choice.value\n\nclass CustomChoiceBuilderEnumForm(forms.Form):\n    enumerated_field = EnumChoiceField(\n        MyEnum,\n        choice_builder=custom_choice_builder\n    )\n\nform = CustomChoiceBuilderEnumForm({\n    'enumerated_field': 'Custom_a'\n})\n\nform.is_valid()\n\nprint(form.cleaned_data)  # {'enumerated_field': <MyEnum.A: 'a'>}\n```\n\n## Postgres ArrayField Usage\n\n```python\nfrom django.db import models\nfrom django.contrib.postgres.fields import ArrayField\n\nfrom django_enum_choices.fields import EnumChoiceField\n\nfrom enum import Enum\n\nclass MyEnum(Enum):\n    A = 'a'\n    B = 'b'\n\nclass MyModelMultiple(models.Model):\n    enumerated_field = ArrayField(\n        base_field=EnumChoiceField(MyEnum)\n    )\n```\n\n**Model Creation**\n\n```python\ninstance = MyModelMultiple.objects.create(enumerated_field=[MyEnum.A, MyEnum.B])\n```\n\n**Changing enum values**\n\n```python\ninstance.enumerated_field = [MyEnum.B]\ninstance.save()\n```\n\n## Usage with Django Rest Framework\n\n**Using a subclass of `serializers.Serializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceField\n\nclass MySerializer(serializers.Serializer):\n    enumerated_field = EnumChoiceField(MyEnum)\n\n# Serialization:\nserializer = MySerializer({\n    'enumerated_field': MyEnum.A\n})\ndata = serializer.data  # {'enumerated_field': 'a'}\n\n# Deserialization:\nserializer = MySerializer(data={\n    'enumerated_field': 'a'\n})\nserializer.is_valid()\ndata = serializer.validated_data  # OrderedDict([('enumerated_field', <MyEnum.A: 'a'>)])\n```\n\n**Using a subclass of `serializers.ModelSerializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceField\n\nclass MyModelSerializer(serializers.ModelSerializer):\n    enumerated_field = EnumChoiceField(MyEnum)\n\n    class Meta:\n        model = MyModel\n        fields = ('enumerated_field', )\n\n# Serialization:\ninstance = MyModel.objects.create(enumerated_field=MyEnum.A)\nserializer = MyModelSerializer(instance)\ndata = serializer.data  # {'enumerated_field': 'a'}\n\n# Saving:\nserializer = MyModelSerializer(data={\n    'enumerated_field': 'a'\n})\nserializer.is_valid()\nserializer.save()\n```\n\n**Additionally, a `choice_builder` argument can be passed to the serializer field** for custom choice generation:\n```python\ndef custom_choice_builder(choice):\n    return 'Custom_' + choice.value, choice.value\n\nclass CustomChoiceBuilderSerializer(serializers.Serializer):\n    enumerted_field = EnumChoiceField(\n        MyEnum,\n        choice_builder=custom_choice_builder\n    )\n\nserializer = CustomChoiceBuilderSerializer({\n    'enumerated_field': MyEnum.A\n})\n\ndata = serializer.data # {'enumerated_field': 'Custom_a'}\n```\n\nWhen using the `EnumChoiceModelSerializerMixin` with DRF's `serializers.ModelSerializer`, the `choice_builder` is automatically passed from the model field to the serializer field.\n\n### Caveat\n\nIf you don't explicitly specify the `enumerated_field = EnumChoiceField(MyEnum)`, then you need to include the `EnumChoiceModelSerializerMixin`:\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import EnumChoiceModelSerializerMixin\n\nclass ImplicitMyModelSerializer(\n    EnumChoiceModelSerializerMixin,\n    serializers.ModelSerializer\n):\n    class Meta:\n        model = MyModel\n        fields = ('enumerated_field', )\n```\n\nBy default `ModelSerializer.build_standard_field` coerces any field that has a model field with choices to `ChoiceField` which returns the value directly.\n\nSince enum values resemble `EnumClass.ENUM_INSTANCE` they won't be able to be encoded by the `JSONEncoder` when being passed to a `Response`.\n\nThat's why we need the mixin.\n\n## Serializing PostgreSQL ArrayField\n`django-enum-choices` exposes a `MultipleEnumChoiceField` that can be used for serializing arrays of enumerations.\n\n**Using a subclass of `serializers.Serializer`**\n\n```python\nfrom rest_framework import serializers\n\nfrom django_enum_choices.serializers import MultipleEnumChoiceField\n\nclass MultipleMySerializer(serializers.Serializer):\n    enumerated_field = MultipleEnumChoiceField(MyEnum)\n\n# Serialization:\nserializer = MultipleMySerializer({\n    'enumerated_field': [MyEnum.A, MyEnum.B]\n})\ndata = serializer.data  # {'enumerated_field': ['a', 'b']}\n\n# Deserialization:\nserializer = MultipleMySerializer(data={\n    'enumerated_field': ['a', 'b']\n})\nserializer.is_valid()\ndata = serializer.validated_data  # OrderedDict([('enumerated_field', [<MyEnum.A: 'a'>, <MyEnum.B: 'b'>])])\n```\n\n**Using a subclass of `serializers.ModelSerializer`**\n\n```python\nclass ImplicitMultipleMyModelSerializer(\n    EnumChoiceModelSerializerMixin,\n    serializers.ModelSerializer\n):\n    class Meta:\n        model = MyModelMultiple\n        fields = ('enumerated_field', )\n\n# Serialization:\ninstance = MyModelMultiple.objects.create(enumerated_field=[MyEnum.A, MyEnum.B])\nserializer = ImplicitMultipleMyModelSerializer(instance)\ndata = serializer.data  # {'enumerated_field': ['a', 'b']}\n\n# Saving:\nserializer = ImplicitMultipleMyModelSerializer(data={\n    'enumerated_field': ['a', 'b']\n})\nserializer.is_valid()\nserializer.save()\n```\n\nThe `EnumChoiceModelSerializerMixin` does not need to be used if `enumerated_field` is defined on the serializer class explicitly.\n\n## Usage with `django-filter`\n**By declaring the field explicitly on the `FilterSet`**\n```python\nimport django_filters as filters\n\nfrom django_enum_choices.filters import EnumChoiceFilter\n\nclass ExplicitFilterSet(filters.FilterSet):\n    enumerated_field = EnumChoiceFilter(MyEnum)\n\n\nfilters = {\n    'enumerated_field': 'a'\n}\nfilterset = ExplicitFilterSet(filters, MyModel.objects.all())\n\nprint(filterset.qs.values_list('enumerated_field', flat=True))  # <QuerySet [<MyEnum.A: 'a'>, <MyEnum.A: 'a'>, <MyEnum.A: 'a'>]>\n```\n\n**By using a `Meta` inner class and inheriting from `EnumChoiceFilterMixin`**\n```python\nimport django_filters as filters\n\nfrom django_enum_choices.filters import EnumChoiceFilterMixin\n\nclass ImplicitFilterSet(EnumChoiceFilterSetMixin, filters.FilterSet):\n    class Meta:\n        model = MyModel\n        fields = ['enumerated_field']\n\nfilters = {\n    'enumerated_field': 'a'\n}\nfilterset = ImplicitFilterSet(filters)\n\nprint(filterset.qs.values_list('enumerated_field', flat=True))  # <QuerySet [<MyEnum.A: 'a'>, <MyEnum.A: 'a'>, <MyEnum.A: 'a'>]>\n```\n\nThe `choice_builder` argument can be passed to `django_enum_choices.filters.EnumChoiceFilter` as well when using the field explicitly. When using `EnumChoiceFilterSetMixin`, the `choice_builder` is determined from the model field, for the fields defined inside the `Meta` inner class.\n\n```python\nimport django_filters as filters\n\nfrom django_enum_choices.filters import EnumChoiceFilter\n\ndef custom_choice_builder(choice):\n    return 'Custom_' + choice.value, choice.value\n\nclass ExplicitCustomChoiceBuilderFilterSet(filters.FilterSet):\n    enumerated_field = EnumChoiceFilter(\n        MyEnum,\n        choice_builder=custom_choice_builder\n    )\n\nfilters = {\n    'enumerated_field': 'Custom_a'\n}\nfilterset = ExplicitCustomChoiceBuilderFilterSet(filters, MyModel.objects.all())\n\nprint(filterset.qs.values_list('enumerated_field', flat=True))  # <QuerySet [<MyEnum.A: 'a'>, <MyEnum.A: 'a'>, <MyEnum.A: 'a'>]>\n```\n\n## Implementation details\n\n* `EnumChoiceField` is a subclass of `CharField`.\n* Only subclasses of `Enum` are valid arguments for `EnumChoiceField`.\n* `max_length`, if passed, is ignored. `max_length` is automatically calculated from the longest choice.\n* `choices` are generated using a special `choice_builder` function, which accepts an enumeration and returns a tuple of 2 items.\n  * Four choice builder functions are defined inside `django_enum_choices.choice_builders`\n  * By default the `value_value` choice builder is used. It produces the choices from the values in the enumeration class, like `(enumeration.value, enumeration.value)`\n  * `choice_builder` can be overriden by passing a callable to the `choice_builder` keyword argument of `EnumChoiceField`.\n  * All values returned from the choice builder **will be cast to strings** when generating choices.\n\nFor example, lets have the following case:\n\n```python\nclass Value:\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return self.value\n\n\nclass CustomObjectEnum(Enum):\n    A = Value(1)\n    B = Value('B')\n\n\t# The default choice builder `value_value` is being used\n\nclass SomeModel(models.Model):\n    enumerated_field = EnumChoiceField(CustomObjectEnum)\n```\n\nWe'll have the following:\n\n* `SomeModel.enumerated_field.choices == (('1', '1'), ('B', 'B'))`\n* `SomeModel.enumerated_field.max_length == 3`\n\n## Using Python's `enum.auto`\n`enum.auto` can be used for shorthand enumeration definitions:\n\n```python\nfrom enum import Enum, auto\n\nclass AutoEnum(Enum):\n    A = auto()  # 1\n    B = auto()  # 2\n\nclass SomeModel(models.Model):\n    enumerated_field = EnumChoiceField(Enum)\n```\n\nThis will result in the following:\n* `SomeModel.enumerated_field.choices == (('1', '1'), ('2', '2'))`\n\n**Overridinng `auto` behaviour**\nCustom values for enumerations, created by `auto`, can be defined by\nsubclassing an `Enum` that defines `_generate_next_value_`:\n\n```python\nclass CustomAutoEnumValueGenerator(Enum):\n    def _generate_next_value_(name, start, count, last_values):\n        return {\n            'A': 'foo',\n            'B': 'bar'\n        }[name]\n\n\nclass CustomAutoEnum(CustomAutoEnumValueGenerator):\n    A = auto()\n    B = auto()\n```\n\nThe above will assign the values mapped in the dictionary as values to attributes in `CustomAutoEnum`.\n\n## Development\n**Prerequisites**\n* SQLite3\n* PostgreSQL server\n* Python >= 3.5 virtual environment\n\n```bash\ngit clone https://github.com/HackSoftware/django-enum-choices.git\ncd django_enum_choices\npip install -e .[dev]\n```\n\nLinting and running the tests:\n```bash\ntox\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HackSoftware/django-enum-choices",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-enum-choices",
    "package_url": "https://pypi.org/project/django-enum-choices/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-enum-choices/",
    "project_urls": {
      "Homepage": "https://github.com/HackSoftware/django-enum-choices"
    },
    "release_url": "https://pypi.org/project/django-enum-choices/2.0.0/",
    "requires_dist": [
      "Django (>=1.11)",
      "Django (==2.2.3) ; extra == 'dev'",
      "djangorestframework (==3.9.4) ; extra == 'dev'",
      "psycopg2 (==2.8.3) ; extra == 'dev'",
      "flake8 (==3.7.7) ; extra == 'dev'",
      "pytest (==4.6.3) ; extra == 'dev'",
      "pytest-django (==3.5.0) ; extra == 'dev'",
      "pytest-pythonpath (==0.7.3) ; extra == 'dev'",
      "django-environ (==0.4.5) ; extra == 'dev'",
      "tox (==3.13.2) ; extra == 'dev'",
      "bumpversion (==0.5.3) ; extra == 'dev'",
      "tox-pyenv (==1.1.0) ; extra == 'dev'",
      "django-filter (==2.2.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.5.0",
    "summary": "A custom Django field able to use subclasses of Python's internal `Enum` class as choices",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13709273,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f7b63e7b3d6ce336138b27b039bd4c9e1f01441947f37422c5bb91f67b4bb94",
        "md5": "0b116127d0b2353d4b0d230720518156",
        "sha256": "79ce1290cd4866699313b1e6cd6457cdc8cebc2907f18ec56048a60320b7ba80"
      },
      "downloads": -1,
      "filename": "django_enum_choices-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0b116127d0b2353d4b0d230720518156",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5.0",
      "size": 27066,
      "upload_time": "2019-07-24T12:59:30",
      "upload_time_iso_8601": "2019-07-24T12:59:30.124702Z",
      "url": "https://files.pythonhosted.org/packages/3f/7b/63e7b3d6ce336138b27b039bd4c9e1f01441947f37422c5bb91f67b4bb94/django_enum_choices-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48d7b65ce4221d52c41ad770cbf5bdf08fcdfa6d64454646af4ac4a10d6a4ff5",
        "md5": "1d38f0ec54b6cafcd5b40c9393c0787f",
        "sha256": "9bdd2abf4d9ba09372155e5f5c039e426921d749b1be3c73062749a8d5d5cee2"
      },
      "downloads": -1,
      "filename": "django_enum_choices-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1d38f0ec54b6cafcd5b40c9393c0787f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5.0",
      "size": 22069,
      "upload_time": "2019-07-24T12:59:32",
      "upload_time_iso_8601": "2019-07-24T12:59:32.269668Z",
      "url": "https://files.pythonhosted.org/packages/48/d7/b65ce4221d52c41ad770cbf5bdf08fcdfa6d64454646af4ac4a10d6a4ff5/django_enum_choices-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}