{
  "info": {
    "author": "Milad Rastian",
    "author_email": "eslashmili@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "Django Jalali\n=============\n\nThis module gives you a DateField same as Djangoâ€™s DateField but you can\nget and query data based on Jalali Date\n\nStatus\n------\n\n.. image:: https://github.com/slashmili/django-jalali/workflows/Tests/badge.svg?branch=main\n   :target: https://github.com/slashmili/django-jalali/actions\n\n.. image:: https://img.shields.io/pypi/v/django_jalali.svg\n   :target: https://pypi.python.org/pypi/django_jalali\n\n.. image:: https://img.shields.io/pypi/pyversions/django-jalali.svg\n   :target: https://pypi.org/project/django_jalali\n\n.. image:: https://img.shields.io/pypi/djversions/django-jalali.svg\n   :target: https://pypi.org/project/django-jalali/\n\nDependencies\n------------\n\n-  jdatetime_\n-  Django_ > 3.2\n\n    Looking for Django 1.X support? Checkout *2.4.6* version in pypi.org\n- `Django REST Framework`_ > 3.12 (If install with ``drf`` dependency)\n\nInstall\n-------\n.. code:: bash\n\n   pip install django_jalali\n\nTo use DRF serializer field:\n\n.. code:: bash\n\n   pip install django_jalali[drf]\n\nUsage\n-----\n\n1. Run :\n\n.. code:: bash\n\n  $ django-admin startproject jalali_test\n\n2. Start your app :\n\n.. code:: bash\n\n  $ python manage.py startapp foo\n\n3. Edit settings.py_ and add django_jalali and your foo to your INSTALLED_APPS (also config DATABASES setting)\n\n    django_jalali should be added **before** your apps in order to work properly\n\n4. Edit foo/models.py_\n\n.. code:: python\n\n    from django.db import models\n    from django_jalali.db import models as jmodels\n\n\n    class Bar(models.Model):\n        objects = jmodels.jManager()\n        name = models.CharField(max_length=200)\n        date = jmodels.jDateField()\n\n        def __str__(self):\n            return \"%s, %s\" % (self.name, self.date)\n\n\n    class BarTime(models.Model):\n        objects = jmodels.jManager()\n        name = models.CharField(max_length=200)\n        datetime = jmodels.jDateTimeField()\n\n        def __str__(self):\n            return \"%s, %s\" % (self.name, self.datetime)\n\n5. Run\n\n.. code:: bash\n\n    $ python manage.py makemigrations\n    Migrations for 'foo':\n      foo/migrations/0001_initial.py:\n         - Create model Bar\n         - Create model BarTime\n    $ python manage.py migrate\n    Running migrations:\n        Applying foo.0001_initial... OK\n\n6. Test it\n\n.. code:: shell\n\n    $ python manage.py shell\n    Python 3.7.0 (default, Nov 26 2018, 15:26:54)\n    [GCC 6.3.0 20170516] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    (InteractiveConsole)\n    >>> from foo.models import Bar\n    >>> import jdatetime\n    >>> today = jdatetime.date(1390, 5, 12)\n    >>> mybar = Bar(name=\"foo\", date=today)\n    >>> mybar.save()\n    >>> mybar.date\n    jdatetime.date(1390, 5, 12)\n    >>> Bar.objects.filter(date=today)\n    [<Bar: foo, 1390-05-12>]\n    >>> Bar.objects.filter(date__gte=\"1390-5-12\")\n    [<Bar: foo, 1390-05-12>]\n    >>> Bar.objects.filter(date='1363-8-01')\n    []\n    >>> from foo.models import BarTime\n    >>> BarTime(name=\"Bar Time now\", datetime=jdatetime.datetime(1380,8,2,12,12,12)).save()\n    >>> BarTime.objects.filter(datetime__date=jdatetime.datetime(1380,8,2,12,12,12))\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n    >>> BarTime.objects.filter(datetime__date=jdatetime.date(1380,8,2))\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n    >>> BarTime.objects.filter(datetime__date=\"1380-08-02\")\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n    >>> BarTime.objects.filter(datetime__lt=jdatetime.datetime(1380,8,2,12,12,12))\n    []\n    >>> BarTime.objects.filter(datetime__lte=jdatetime.datetime(1380,8,2,12,12,12))\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n    >>> BarTime.objects.filter(datetime__gt='1380-08-02')\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n    >>> BarTime.objects.filter(datetime__gt=d)\n    []\n    >>> BarTime.objects.filter(datetime__year=1380)\n    [<BarTime: Bar Time now, 1380-08-0212:12:12>]\n\nUsing Templatetags\n------------------\n\n1. You can use ``jformat`` filter to format your dates in templates:\n\n.. code:: python\n\n    {% load jformat %}\n    {{ my_date|jformat }} {# default formatting #}\n    {{ my_date|jformat:\"%A %d %B %Y %H:%M\" }} {# specific formatting #}\n\nAdmin Interface\n---------------\n\n\n1. Create foo/admin.py_\n\n.. code:: python\n\n    from foo.models import Bar, BarTime\n    from django.contrib import admin\n\n    from django_jalali.admin.filters import JDateFieldListFilter\n\n    # you need import this for adding jalali calander widget\n    import django_jalali.admin as jadmin\n\n\n    class BarAdmin(admin.ModelAdmin):\n        list_filter = (\n            ('date', JDateFieldListFilter),\n        )\n\n\n    admin.site.register(Bar, BarAdmin)\n\n\n    class BarTimeAdmin(admin.ModelAdmin):\n        list_filter = (\n            ('datetime', JDateFieldListFilter),\n        )\n\n\n    admin.site.register(BarTime, BarTimeAdmin)\n\n2. Config admin interface and fire up your django and enjoy using jalali date !\n\n\nDjango rest framework\n---------------------\n\nThere are serializer fields corresponding to ``jmodels.JDateField`` and ``jmodels.JDateTimeField`` for DRF:\n\n\n.. code:: python\n\n    from django_jalali.serializers.serializerfield import JDateField, JDateTimeField\n    from rest_framework.serializers import ModelSerializer\n\n    from foo.models import Bar, BarTime\n\n\n    class JDateFieldSerialializer(ModelSerializer):\n        date = JDateField()\n\n        class Meta:\n            model = Bar\n            exclude = []\n\n    class JDateTimeFieldSerializer(ModelSerializer):\n        datetime = JDateTimeField()\n\n        class Meta:\n            model = BarTime\n            exclude = []\n\n\nLocale\n------\nIn order to get the date string in farsi you need to set the locale to fa_IR\n\nThere are two ways to do achieve that, you can use of the approaches based on your needs \n\n* Run server with LC_ALL env:\n\n.. code:: shell\n\n    $ LC_ALL=fa_IR python manage.py runserver\n \n* Set the locale in settings.py\n\n.. code:: python\n\n    LANGUAGE_CODE = 'fa-ir'\n    import locale\n    locale.setlocale(locale.LC_ALL, \"fa_IR.UTF-8\")\n   \n\nTimezone Settings\n-----------------\nFrom *django_jalali* version 3 and *Django* 2 you can use ``TIME_ZONE`` and ``USE_TZ`` settings_ to save datetime with project timezone\n\nDevelopment\n-----------\n\nYou can contribute to this project forking it from GitHub and sending pull requests.\n\nFirst fork_ the repository_ and then clone it:\n\n.. code:: shell\n\n    $ git clone git@github.com:<you>/django-jalali.git\n\nInitialize a virtual environment for development purposes:\n\n.. code:: shell\n\n    $ python -m venv django_jalali_env\n    $ source ~/django_jalali_env/bin/activate\n\nThen install the necessary requirements:\n\n.. code:: shell\n\n    $ cd django-jalali\n    $ pip install -r requirements-test.txt\n\nUnit tests are located in the ``tests`` folder and can be easily run with the pytest tool:\n\n.. code:: shell\n\n    $ pytest\n\nBefore committing, you can run all the above tests against all supported Python and Django versions with tox.\nYou need to install tox first:\n\n.. code:: shell\n\n    $ pip install tox\n\nAnd then you can run all tests:\n\n.. code:: shell\n\n    $ tox\n\nIf you wish to limit the testing to specific environment(s), you can parametrize the tox run:\n\n.. code:: shell\n\n    $ tox -e py39-django32\n\n.. _jdatetime: https://github.com/slashmili/python-jalali\n.. _Django: https://www.djangoproject.com/\n.. _settings.py: https://github.com/slashmili/django-jalali/blob/master/jalali_test/jalali_test/settings.py#L40\n.. _models.py: https://github.com/slashmili/django-jalali/blob/master/jalali_test/foo/models.py\n.. _admin.py: https://github.com/slashmili/django-jalali/blob/master/jalali_test/foo/admin.py\n.. _settings: https://github.com/slashmili/django-jalali/blob/master/jalali_test/jalali_test/settings.py#L116\n.. _Django REST Framework: https://www.django-rest-framework.org/\n.. _fork: https://help.github.com/en/articles/fork-a-repo\n.. _repository: https://github.com/slashmili/django-jalali\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "http://github.com/slashmili/django-jalali/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/slashmili/django-jalali",
    "keywords": "django jalali",
    "license": "Python Software Foundation License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-jalali",
    "package_url": "https://pypi.org/project/django-jalali/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-jalali/",
    "project_urls": {
      "Download": "http://github.com/slashmili/django-jalali/tarball/master",
      "Homepage": "http://github.com/slashmili/django-jalali"
    },
    "release_url": "https://pypi.org/project/django-jalali/6.0.0/",
    "requires_dist": [
      "jdatetime (>=4.0.0)",
      "django (>=3.2)",
      "djangorestframework (>=3.12) ; extra == 'drf'"
    ],
    "requires_python": "",
    "summary": "Jalali Date support for Django model and admin interface",
    "version": "6.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15926385,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "faa5313720c3fe0695e03addc07ab553057b627621e447fda52df3595b1722b0",
        "md5": "04341ecbdcfa79023c80da169d288523",
        "sha256": "793d61c013f31f4b81e513e73c3cc13b018ecdc44ea10dfb9789bd55d406750a"
      },
      "downloads": -1,
      "filename": "django_jalali-6.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04341ecbdcfa79023c80da169d288523",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 213429,
      "upload_time": "2022-02-21T11:44:01",
      "upload_time_iso_8601": "2022-02-21T11:44:01.664448Z",
      "url": "https://files.pythonhosted.org/packages/fa/a5/313720c3fe0695e03addc07ab553057b627621e447fda52df3595b1722b0/django_jalali-6.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d264e9fb080dbb0e77af020adf14368b3bfc62bef0bb0ecaf9464ddb93b7d1c",
        "md5": "f029677c0e2ce914c67500dca15d0aad",
        "sha256": "795fabc2d9a3db93de843d00b1cf931b3bd40e5fa4532c386d1772abb69f6d9e"
      },
      "downloads": -1,
      "filename": "django-jalali-6.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f029677c0e2ce914c67500dca15d0aad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 197660,
      "upload_time": "2022-02-21T11:44:03",
      "upload_time_iso_8601": "2022-02-21T11:44:03.422176Z",
      "url": "https://files.pythonhosted.org/packages/5d/26/4e9fb080dbb0e77af020adf14368b3bfc62bef0bb0ecaf9464ddb93b7d1c/django-jalali-6.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}