{
  "info": {
    "author": "8go",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications :: Chat"
    ],
    "description": "# PRE-INSTALLATION\n\nBefore you install `matrix-commander` with `pip install matrix-commander`\nyou *must* have `libolm` installed. `pip` installation will fail otherwise!\n\nFor e2ee support, python-olm is needed which requires the\n[libolm](https://gitlab.matrix.org/matrix-org/olm) C library (version 3.x).\n\n- On Debian, Ubuntu and Debian or Ubuntu derivate distributions do `sudo apt install libolm-dev` to install the `libolm` package.\n- On Fedora or Fedora derivate distributions do `sudo dnf install libolm-devel` to install the `libolm` package.\n- On MacOS one can use [brew](https://brew.sh/) to install package `libolm`.\n\nMake sure that version 3 is installed. Version 2 will not work.\n\nFor macOS Monterey 12.4 (21F79) (Apple M1 Pro) and similar please follow\nthe these steps:\n- Install `libolm`, `dbus` and `libmagic` using Homebrew\n- Install `matrix-commander` using this command:\n  - `pip3 install --global-option=build_ext --global-option=\"-I/opt/homebrew/include/\" --global-option=\"-L/opt/homebrew/lib/\" matrix-commander`\n- For more details see Issue #79. Thanks to @KizzyCode for the contribution.\n\nOn macOS x86_64, do these steps for installation:\n- `brew install libolm dbus libmagic`\n- `pip3 install poetry`\n- `pip3 install --global-option=build_ext --global-option=\"-I/usr/local/include/\" --global-option=\"-L/usr/local/lib/\" matrix-commander`\n- Notice that the Link and Include directories between ARM (M1, etc.) and x86-64 are different.\n  So, check for example where file `olm.h` is located on your hard disk. That gives you a hind which Include directory to use.\n- For more details see Issue #103. Thanks to @johannes87 for the contribution.\n\n[![PyPI - Python Version](\nhttps://img.shields.io/pypi/pyversions/matrix-commander?color=red)](\nhttps://www.python.org/)\n[![Built with matrix-nio](\nhttps://img.shields.io/badge/built%20with-matrix--nio-darkgreen)](\nhttps://github.com/poljar/matrix-nio)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](\nhttps://github.com/psf/black)\n[![Docker Pulls](https://img.shields.io/docker/pulls/matrixcommander/matrix-commander)](\nhttps://hub.docker.com/r/matrixcommander/matrix-commander/)\n[![PyPI - Version](https://img.shields.io/pypi/v/matrix-commander?color=darkblue)](\nhttps://pypi.org/project/matrix-commander)\n[![PyPI - Downloads](\nhttps://img.shields.io/pypi/dm/matrix-commander?color=darkblue&label=PyPi%20Downloads\n)](https://pypi.org/project/matrix-commander)\n[![Nix: package](https://img.shields.io/badge/Nix-package-6fa8dc.svg)](\nhttps://search.nixos.org/packages?query=matrix-commander)\n\n<p>\n<img\nsrc=\"https://raw.githubusercontent.com/8go/matrix-commander/master/logos/mc.svg\"\nalt=\"MC> logo\" height=\"150\">\n\n<p>\n<a href=\"https://matrix.org/docs/projects/client/matrix-commander\">\n<img src=\"https://matrix.org/docs/projects/images/made-for-matrix.png\"\nalt=\"made for Matrix\" height=\"100\"></a>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://pypi.org/project/matrix-commander/\">\n<img src=\"https://pypi.org/static/images/logo-large.6bdbb439.svg\"\nalt=\"get it on PyPi\" height=\"100\"></a>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n<a href=\"https://hub.docker.com/r/matrixcommander/matrix-commander\">\n<img src=\"https://www.unixtutorial.org/images/software/docker-hub.png\"\nalt=\"get it on Docker Hub\" height=\"100\"></a>\n</p>\n\n# :loudspeaker: :new: :boom: Latest News! :fire: :mega: :tada:\n\n- `matrix-commander` now available on\n  [Docker Hub](https://hub.docker.com/r/matrixcommander/matrix-commander)\n  and hence easy to install as docker image (:clap: to @pataquets for his PR).\n  Install via `docker pull matrixcommander/matrix-commander`.\n- `matrix-commander` now available on\n  [PyPi](https://pypi.org/project/matrix-commander/)\n  and hence easy to install via `pip install matrix-commander`\n- available as reproducible\n  [Nix package](https://search.nixos.org/packages?query=matrix-commander)\n  for NixOS, Debian, Fedora, etc.\n- `matrix-commander` is now callable from a Python program as well.\n  See [tests/test-send.py](\n  https://github.com/8go/matrix-commander/blob/master/tests/test-send.py)\n  for an example on how to do that.\n- incompatibility: login (authentication) must now be done explicitly\n  with `--login` on the first run of `matrix-commander`\n- new option: `--login`, supports login methods `password` and `sso`\n- new option: `--logout` to remove device and access-token validity\n- new option: `--sync` to allow skipping sync when only sending\n- new option: `--output` to produce output in different formats (text, JSON)\n- new option: `--get-room-info` to get room info such as the\n  room display name, room alias, etc. for a given room id\n- new option: `--get-client-info` to get client info\n- new option: `--verbose` to specify debugging verbosity\n- announcing `matrix-commander-rs` :crab:, `matrix-commander` but in Rust.\n  See [matrix-commander-rs](https://github.com/8go/matrix-commander-rs).\n  Please :star: it if you like the idea. Please contribute if you can,\n  please :pray: write some code to make this vision happen. Thank you!\n  :heart:\n\n# Summary, TLDR\n\nThis simple Matrix client written in Python allows you to send and\nreceive messages and files, verify other devices, and interact with\nyour Matrix account or other Matrix users in many ways.\nYou use it from the terminal (CLI) or integrate it into other simple\nPython programs. Enjoy and please :star: star on Github.\n\n# matrix-commander\n\nSimple but convenient CLI-based Matrix client app for sending, receiving,\ncreating rooms, inviting, verifying, and so much more.\n\n- `matrix-commander` is a simple command-line [Matrix](https://matrix.org/)\n  client.\n- It is a simple but convenient app to\n    - send Matrix text messages as well as text, image, audio, video or\n      other arbitrary files\n    - listen to and receive Matrix messages, images, audio, video, etc.\n    - download media files like images or audio\n    - perform Matrix emoji verification\n    - performs actions of rooms (create rooms, invite to rooms, etc.)\n    - list rooms and room members\n    - and much more\n- It exclusively offers a command-line interface (CLI).\n- Hence the word-play: matrix-command(lin)er\n- There is no GUI and there are no windows (except for pop-up windows in\n  OS notification)\n- It uses the [matrix-nio](https://github.com/poljar/matrix-nio/) SDK\n- Both `matrix-nio` and `matrix-commander` are written in Python 3\n- Convenient to install via `pip`.\n\n# What for? Why? For whom? Use cases?\n\nUse cases for this program could be\n- a bot or part of a bot,\n- to automate sending via programs and scripts\n- `matrix-nio show case`: as educational material that showcases the use\n  of the `matrix-nio` SDK\n- `alerter`: to send all sorts of alerts,\n- `Gitlab CI automation tool`: some user uses it as Gitlab CI automation tool\n   to report build success/failure to their internal Matrix room.\n   See [Issue #81](https://github.com/8go/matrix-commander/issues/81).\n- `admin tool` or `automation tool`: you needs to create 175 room for the\n   roll-out within a company? You want to query some 9000 rooms for\n   visibility data? You want to collect profile data of 7000 enterprise or\n   public users? `matrix-commander` has many admin capabilities and can\n   automate many tasks completely. Many admin jobs can be reduced to running\n   a simple bash script or a simple Python program using `matrix-commander`.\n- `reminder`: send yourself or others daily/weekly reminders via a cron job.\n- `surf report`: an addict surfer uses `matrix-commander` combined with a\n   `cron` job to publish daily early morning surf reports for his 3 favorite\n   surfing spots to his Element app.\n- `juke box`: a user told me he has a large collection of mp3 files on his\n  server. He uses `matrix-commander` to send himself a random song from\n  his music collection to brighten his day.\n- `ticker`: many people send themselves stock prices from one of the many\n  public ticker APIs. This is usually a single `curl` command piped into\n  `matrix-commander`.\n- `poor-man's Matrix client`: if you love the terminal and are too lazy to\n   start up an Element desktop app or an Element webpage,\n   `matrix-commander` is a a trivial way to fire off some instant\n   messages to your friends from the terminal.\n- `poor-man's importer or exporter`: you want to get things in and out of\n   Matrix?\n   Send those 39 holiday picture you have laying around in a holiday folder?\n   Or, your best friend just sent you 57 wedding pictures on Element and\n   you want to store them? `matrix-commander` can help with importing and\n   exporting data.\n- `poor man's blogger`: a \"blogger\" who frequently sends messages and\n  images to the same public room(s) could use `matrix-commander` to keep\n  his audience informed.\n- `poor man's diary`: a person could write a diary or run a gratitude\n  journal by sending messages to her/his own diary room or gratitude room.\n- `ghost`: `matrix-commander` can be used in an ephemeral fashion, in a\n  fire-and-forget style. A single batch command can log in, create a\n  new device, send a message, and then log out and delete the device.\n\n# Give it a Star\n\nIf you like it, use it, fork it, make a Pull Request or contribute.\nPlease give it a :star: on Github right now so others find it more easily.\n:heart:\n\n\n# Features\n\n- CLI, Command Line Interface\n- Python 3\n- Simplicity\n- Small footprint, small application (only around 250K)\n- Uses `nio-template`\n- End-to-end encryption\n- Storage for End-to-end encryption\n- Storage of credentials\n- Supports access token instead of password\n- Supports SSO (Single Sign-On)\n- Sending messages\n- Sending notices\n- Sending formatted messages\n- Sending MarkDown messages\n- Message splitting before sending\n- Sending Code-formatted messages\n- Sending to one room\n- Sending to multiple rooms\n- Sending image files (photos, etc.)\n- Sending of media files (music, videos, etc.)\n- Sending of arbitrary files (PDF, xls, doc, txt, etc.)\n- Sending events such as emoji reactions, or replies as threads\n- Using events to edit sent messages\n- Supports creating private DM rooms (thanks to PR from @murlock1000)\n- Supports DM (direct messaging), sending DMs, listening for DMs\n- Listing of joined rooms\n- Listing of members of given room(s)\n- Receiving messages forever\n- Receiving messages once\n- Receiving last messages\n- Receiving or skipping its own messages\n- Receiving and downloading media files\n  - including automatic decryption\n- Creating new rooms\n- Joining rooms\n- Leaving rooms\n- Forgetting rooms\n- Inviting other users to rooms\n- Banning from rooms\n- Unbanning from rooms\n- Kicking from rooms\n- Supports renaming of device\n- Supports getting and setting display name\n- Supports getting and setting presence\n- Uploading, downloading, and deleting to/from resource depository\n- Listing your devices\n- Listing discovery info\n- Listing available login methods supported by server\n- Supports skipping SSL verification to use HTTP instead of HTTPS\n- Supports providing local SSL certificate files\n- Supports notification via OS of received messages\n- Supports periodic execution via crontab\n- Supports room aliases\n- Supports multiple output formats like `text` (for human consumption)\n  and `json` (for machine consumption and further processing)\n- Provides PID files\n- Logging (at various levels)\n- In-source documentation\n- Can be run as a service\n- Smart tab completion for shells like bash (thanks to PR from @mizlan :clap:)\n- More than 200 stars :stars: on Github\n- Easy installation, available through `pip`, i.e. available in\n  [PyPi](https://pypi.org/project/matrix-commander/) store\n- Easy installation, available as docker image on\n  [Docker Hub](https://hub.docker.com/r/matrixcommander/matrix-commander)\n  (thanks to PR from @pataquets :clap:)\n- Easy installation, available in Nix repository as reproducible\n  [Nix package](https://search.nixos.org/packages?query=matrix-commander)\n- Callable from the terminal, from shells like `bash`, etc.\n- Callable from Python programs via the entry point (function) `main`.\n- Open source\n- Free, GPL3+ license\n\n# First Run, Set Up, Credentials File, End-to-end Encryption\n\nOn the first run `matrix-commander` must be executed with the\n`--login` argument and the corresponding secondary arguments.\nThis creates a credentials.json file.\nThe credentials.json file stores: homeserver, user id,\naccess token, device id, and default room id. On the first run,\nthe --login run, it asks some questions if not everything is\nprovided by arguments, creates the token and device id\nand stores everything in the credentials.json file. If desired,\nall arguments can be provided via arguments to that log in can\nbe performed fully in batch.\n\nSince the credentials file holds an access token it\nshould be protected and secured. One can use different\ncredential files for different users or different rooms.\n\nOn creation the credentials file will always be created in the local\ndirectory, so the users sees it right away. This is fine if you have\nonly one or a few credential files, but for better maintainability\nit is suggested to place your credentials files into directory\n$HOME/.config/matrix-commander/. When the program looks for\na credentials file it will first look in local directory and then\nas secondary choice it will look in directory\n$HOME/.config/matrix-commander/.\n\nIf you want to re-use an existing device id and an existing\naccess token, you can do so as well, just manually edit the\ncredentials file. However, for end-to-end encryption this will\nNOT work.\n\nEnd-to-end encryption (e2ee) is enabled by default. It cannot be turned off.\nWherever possible end-to-end encryption will be used. For e2ee to work\nefficiently a `store` directory is needed to store e2ee data persistently.\nThe default location for the store directory is a local directory named\n`store`. Alternatively, as a secondary choice the program looks for a store\ndirectory in $HOME/.local/shared/matrix-commander/store/. The user can always\nspecify a different location via the --store argument. If needed the `store`\ndirectory will be created on the first run.\n\nFrom the second time the program is run, and on all\nfuture runs it will use the homeserver, user id\nand access token found in the credentials file to log\ninto the Matrix account. Now this program can be used\nto easily send simple text messages, images, and so forth\nto the just configured room.\n\n# Verification\n\nAs second step after the `--login`, it is recommended to perform an\nemoji verification by running `--verify`. Verification is always\ninteractive, bacause the emojis need to be confirmed via the keyboard.\nIf desired `--login` and `--verify` can be done in the same first run.\nThe program can accept verification request and verify other devices\nvia emojis. See `--verify` in help for more details.\n\n# Room Operations, Actions on Rooms\n\nThe program can create rooms, join, leave and forget rooms.\nIt can also send invitations to join rooms to\nothers (given that user has the appropriate permissions) as\nwell as ban, unban and kick other users from rooms.\n\n# Sending\n\nMessages to send can be provided\n1) in the command line (-m or --message)\n2) as input from the keyboard (if there is no other input or command)\n3) through a pipe from stdin (|), i.e. piped in from another program.\n\nFor sending messages the program supports various text formats:\n1) text: default\n2) html:  HTML formatted text\n3) markdown: MarkDown formatted text\n4) code: used a block of fixed-sized font, ideal for ASCII art or\n   tables, bash outputs, etc.\n5) notification\n6) split: splits messages into multiple units at given pattern\n\nPhotos and images that can be sent. That includes files like\n.jpg, .gif, .png or .svg.\n\nArbitrary files like .txt, .pdf, .doc, audio files like .mp3\nor video files like .mp4 can also be sent.\n\nMatrix events like sending an emoji reaction, replying as a thread,\nmessage edits can be sent.\n\n# Listening, Receiving\n\nOne can listen to one or multiple rooms. Received messages will be displayed\non the screen. If desired, optionally, you can be notified of incoming\nmessages through the operating system standard notification system, usually a\nsmall pop-up window.\n\nMessages can be received or listened to various ways:\n1) Forever: the program runs forever, listens forever, and prints all\n   messages as they arrive in real-time.\n2) Once: the program prints all the messages that are waiting in the queue,\n   i.e. all messages that have been sent in, and after printing them the\n   program terminates.\n3) Tail: prints the last N read or unread messages of one or multiple\n   specified rooms and after printing them the program terminates.\n\nWhen listening to messages you can also choose to download and decrypt\nmedia. Say, someone is sending a song. The mp3 file can be downloaded\nand automatically decrypted for you.\n\n# Dependencies and Installation\n\n- If you install via `pip`, then `pip` will take care of most of the\n  dependencies.\n  - See https://pypi.org/project/matrix-commander\n  - Usually `pip install matrix-commander` will do the trick.\n  - Note that even if you install via `pip` you must have a) Python 3.8+\n    and b) `libolm` installed. See `PyPi-Instructions.md`.\n\n- For macOS Monterey 12.4 (21F79) (Apple M1 Pro) and similar please follow\n  the these steps for installation:\n\n    - Install `libolm`, `dbus` and `libmagic` using Homebrew\n    - Install `matrix-commander` using this command:\n        - `pip3 install --global-option=build_ext --global-option=\"-I/opt/homebrew/include/\" --global-option=\"-L/opt/homebrew/lib/\" matrix-commander`\n    - For more details see Issue #79. Thanks to @KizzyCode for the contribution.\n\n- On macOS x86_64, follow these steps for installation:\n\n    - `brew install libolm dbus libmagic`\n    - `pip3 install poetry`\n    - `pip3 install --global-option=build_ext --global-option=\"-I/usr/local/include/\" --global-option=\"-L/usr/local/lib/\" matrix-commander`\n    - Notice that the Link and Include directories between ARM (M1, etc.) and x86-64 are different.\n      So, check for example where file `olm.h` is located on your hard disk. That gives you a hind which Include directory to use.\n    - For more details see Issue #103. Thanks to @@johannes87 for the contribution.\n\n- If you install a docker image: `matrix-commander` is available on\n  [Docker Hub](https://hub.docker.com/r/matrixcommander/matrix-commander)\n  and hence easy to install as docker image (:clap: to @pataquets for his PR).\n  Install via `docker pull matrixcommander/matrix-commander`.\n\n- If you install it via `git` or via file download then these are the\n  dependencies that you must take care of:\n\n    - Python 3.8 or higher installed (3.7 will NOT work)\n    - libolm-dev must be installed as it is required by matrix-nio\n      - libolm-dev on Debian/Ubuntu, libolm-devel on Fedora, libolm on MacOS\n    - matrix-nio must be installed, see https://github.com/poljar/matrix-nio\n      - pip3 install --user --upgrade matrix-nio[e2e]\n    - python3 package markdown must be installed to support MarkDown format\n      - pip3 install --user --upgrade markdown\n    - python3 package python_magic must be installed to support image sending\n      - pip3 install --user --upgrade python_magic\n    - if (and only if) you want OS notification support, then the python3\n      package notify2 and dbus-python should be installed\n      - pip3 install --user --upgrade dbus-python # optional\n      - pip3 install --user --upgrade notify2 # optional\n    - python3 package urllib must be installed to support media download\n      - pip3 install --user --upgrade urllib\n    - python3 package pyxdg must be installed to support `XDG_*` env vars.\n      Be careful. Multiple packages install in the same directory `xdg` and\n      overwrite each other. These packages can be conflicting. Specifically,\n      packages `pyxdg` and `xdg` collide. If you already have `xdg` installed\n      you cannot just simply install `pyxdg`; in this case you should opt\n      for a separate Python environment.\n      - pip3 install --user --upgrade pyxdg\n    - `matrix_commander/matrix_commander.py` file must be installed, and should\n      have execution permissions\n      - chmod 755 matrix_commander.py\n    - `matrix_commander/matrix-commander` file is recommended for the install,\n      and should have execution permissions\n      - chmod 755 matrix-commander\n    - for a full list or requirements look at the `requirements.txt` file\n      - run `pip install -r requirements.txt` to automatically install\n        all required Python packages\n      - if you e.g. run on a headless server and don't want dbus-python and\n        notify2, please remove the corresponding 2 lines from\n        the `requirements.txt` file\n\n# Examples of calling `matrix-commander`\n\n- Alternative 1: Usually `matrix-commander` is called from a terminal\n  inside a shell like `bash`, `sh`, `zsh`, your Windows CMD terminal\n  or similar. You will find plenty of examples how to use it within\n  a terminal just a few lines down.\n- Alternative 2: Sometimes, however, it might be more convenient to call\n  `matrix-commander` from within a Python program. This is also possible.\n  Import the Python module `matrix_commander` and use the provided\n  entry point `main`. An example of how this can be done can be found\n  in [tests/test-send.py](\n  https://github.com/8go/matrix-commander/blob/master/tests/test-send.py).\n\n```\n$ matrix-commander --login password # first run; will configure everything\n$ matrix-commander --login sso # alternative first run with Single Sign-On;\n$   # this will configure everything on a headless server w/o a browser\n$ # this created a credentials.json file, and a store directory.\n$ # optionally, if you want you can move credentials to app config directory\n$ mkdir $HOME/.config/matrix-commander # optional\n$ mv -i credentials.json $HOME/.config/matrix-commander/\n$ # optionally, if you want you can move store to the app share directory\n$ mkdir $HOME/.local/share/matrix-commander # optional\n$ mv -i store $HOME/.local/share/matrix-commander/\n$ # Now you are ready to run program for a second time\n$ # Let us verify the device/room to where we want to send messages\n$ # The other device will issue a \"verify by emoji\" request\n$ matrix-commander --verify\n$ # Now program is both configured and verified, let us send the first message\n$ matrix-commander -m \"First message!\"\n$ matrix-commander --debug -m \"First message!\" # turn debugging on\n$ # turn debugging on also for submodules\n$ matrix-commander --debug --debug -m \"First message!\"\n$ # turn debugging on, high verbosity\n$ matrix-commander --debug --verbose -m \"First message!\"\n$ # turn debugging on, very high verbosity\n$ matrix-commander --debug --verbose --verbose -m \"First message!\"\n$ # maximum debugging info\n$ matrix-commander --debug --debug --verbose --verbose -m \"First message!\"\n$ matrix-commander --help # print help\n$ matrix-commander # this will ask user for message to send\n$ matrix-commander --message \"Hello World!\" # sends provided message\n$ echo \"Hello World\" | matrix-commander # pipe input msg into program\n$ matrix-commander -m msg1 -m msg2 # sends 2 messages\n$ matrix-commander -m msg1 msg2 msg3 # sends 3 messages\n$ df -h | matrix-commander --code # formatting for code/tables\n$ matrix-commander -m \"<b>BOLD</b> and <i>ITALIC</i>\" --html\n$ matrix-commander -m \"- bullet1\" --markdown\n$ # take input from an RSS feed and split large RSS entries into multiple\n$ # Matrix messages wherever the pattern \"\\n\\n\\n\" is found\n$ rssfeed | matrix-commander --split \"\\n\\n\\n\"\n$ matrix-commander --credentials usr1room2.json # select credentials file\n$ matrix-commander --store /var/storage/ # select store directory\n$ # Send to a specific room\n$ matrix-commander -m \"hi\" --room '!YourRoomId:example.org'\n$ # some shells require the ! of the room id to be escaped with \\\n$ matrix-commander -m \"hi\" --room \"\\!YourRoomId:example.org\"\n$ # Send to multiple rooms\n$ matrix-commander -m \"hi\" -r '!r1:example.org' '!r2:example.org'\n$ # Send to multiple rooms, another way\n$ matrix-commander -m \"hi\" -r '!r1:example.org' -r '!r2:example.org'\n$ # Send to a specific user, DM, direct messaging, using full user id\n$ matrix-commander -m \"hi\" --user '@MyFriend:example.org'\n$ # Send to a specific user, DM, direct messaging, using partial user id\n$ # It will be assumed that user @MyFriend is on same homeserver\n$ matrix-commander -m \"hi\" --user '@MyFriend'\n$ # Send to a specific user, DM, direct messaging, using display name\n$ # Careful! Display names might not be unique. Don't DM the wrong person!\n$ # To double-check the display names do a --joined-members \"*\"\n$ matrix-commander -m \"hi\" -u 'Joe'\n$ # Send to multiple users\n$ matrix-commander -m \"hi\" -u '@Joe:example.org' '@Jane:example.org'\n$ # Send to multiple users, another way\n$ matrix-commander -m \"hi\" -u '@Joe:example.org' -u '@Jane:example.org'\n$ # send 2 images and 1 text, text will be sent last\n$ matrix-commander -i photo1.jpg photo2.img -m \"Do you like my 2 photos?\"\n$ # send 1 image and no text\n$ matrix-commander -i photo1.jpg\n$ # pipe 1 image and no text\n$ cat image1.jpg | matrix-commander -i -\n$ # send 1 audio and 1 text to 2 rooms\n$ matrix-commander -a song.mp3 -m \"Do you like this song?\" \\\n    -r '!someroom1:example.com' '!someroom2:example.com'\n$ # send 2 audios, 1 via stdin pipe\n$ audio-generator | matrix-commander -a intro.mp3 -\n$ # send a .pdf file and a video with a text\n$ matrix-commander -f example.pdf video.mp4 -m \"Here are the promised files\"\n$ # send a .pdf file via stdin pipe\n$ pdf-generator | matrix-commander -f -\n$ # listen forever, get msgs in real-time and notify me via OS\n$ matrix-commander --listen forever --os-notify\n$ # listen forever, and show me also my own messages\n$ matrix-commander --listen forever --listen-self\n$ # listen once, get any new messages and quit\n$ matrix-commander --listen once --listen-self\n$ matrix-commander --listen once --listen-self | process-in-other-app\n$ # listen to tail, get the last N messages and quit\n$ matrix-commander --listen tail --tail 10 --listen-self\n$ # listen to tail, another way of specifying it\n$ matrix-commander --tail 10 --listen-self | process-in-other-app\n$ # get the very last message\n$ matrix-commander --tail 1 --listen-self\n$ # listen to (get) all messages, old and new, and process them in another app\n$ matrix-commander --listen all | process-in-other-app\n$ # listen to (get) all messages, including own\n$ matrix-commander --listen all --listen-self\n$ # set, rename device-name, sometimes also called device display-name\n$ matrix-commander --set-device-name \"my new device name\"\n$ # set, rename display name for authenticated user\n$ matrix-commander --set-display-name \"Alex\"\n$ # get display name for authenticated user, for itself\n$ matrix-commander --get-display-name\n$ # get display name for other users\n$ matrix-commander --get-display-name  \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # list all the rooms that I am a member of, all joined rooms\n$ matrix-commander --joined-rooms\n$ # list all the members of 2 specific rooms\n$ matrix-commander --joined-members '!someroomId1:example.com' \\\n    '!someroomId2:example.com'\n$ # list all the members of all rooms  that I am member of\n$ matrix-commander --joined-members '*'\n$ # set presence\n$ matrix-commander --set-presence \"unavailable\"\n$ # get presence of matrix-commander itself\n$ matrix-commander --get-presence\n$ # get presence of other users\n$ matrix-commander --get-presence \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # upload file to resource repository\n$ matrix-commander --upload \"avatar.png\"\n$ # download file from resource repository via URI (MXC)\n$ matrix-commander --download \"mxc://example.com/SomeStrangeUriKey\"\n$ matrix-commander --delete-mxc mxc://... # delete image from database\n$ matrix-commander --delete-mxc-before '20.01.2022 19:38:42' 1024000\n$ # for more examples of --upload, --download, --delete-mxc,\n$ # --delete-mxc-before, --mxc-to-http, see file tests/test-upload.sh\n$ matrix-commander  --rest GET \"\" '__homeserver__/_matrix/client/versions'\n$ # for more examples of --rest see file tests/test-rest.sh\n$ matrix-commander --get-avatar # get its own avatar MXC URI\n$ # get avatar MXC URIs of other users\n$ matrix-commander --get-avatar '@user1:example.com' '@user2:example.com'\n$ matrix-commander --set-avatar mxc://... # set its own avatar MXC URI\n$ # for more examples of --set_avatar see tests/test-setget.sh\n$ matrix-commander --get-profile # get its own user profile\n$ matrix-commander --get-profile '@user1:example.com' '@user2:example.com'\n$ matrix-commander --get-room-info # get its default room info\n$ matrix-commander --get-room-info '\\!room1:example.com' \\\n    '\\!room2:example.com' # get room info for multiple rooms\n$ # map from room id to room alias\n$ matrix-commander --get-room-info '\\!roomId1:example.com'\n$ # map from room alias to room id\n$ matrix-commander --get-room-info '#roomAlias1:example.com'\n$ matrix-commander --get-client-info # get client info\n$ matrix-commander --has-permission '!someroomId1:example.com' 'ban'\n$ matrix-commander --export-keys mykeys \"my passphrase\" # export keys\n$ matrix-commander --import-keys mykeys \"my passphrase\" # import keys\n$ matrix-commander --get-openid-token # get its own OpenId token\n$ # get OpenID tokens for other users\n$ matrix-commander --get-openid-token '@user1:example.com' '@user2:example.com'\n$ matrix-commander --room-get-visibility # get default room visibility\n$ matrix-commander --room-get-visibility \\\n    '\\!someroomId1:example.com' '\\!someroomId2:example.com'\n$ matrix-commander --room-set-alias '#someRoomAlias:matrix.example.org'\n$ matrix-commander --room-set-alias 'someRoomAlias' \\\n    '\\!someroomId1:example.com'\n$ matrix-commander --room-resolve-alias '#someRoomAlias:matrix.example.org'\n$ matrix-commander --room-resolve-alias '#someRoomAlias1:matrix.example.org' \\\n    'someRoomAlias2'\n$ matrix-commander --room-delete-alias '#someRoomAlias:matrix.example.org'\n$ matrix-commander --room-delete-alias '#someRoomAlias1:matrix.example.org' \\\n    'someRoomAlias2'\n$ matrix-commander --room-get-state # get state of default room\n$ matrix-commander --room-get-state \\\n    '\\!someroomId1:example.com' '\\!someroomId2:example.com'\n$ matrix-commander --delete-device \"QBUAZIFURK\" --password 'mc-password'\n$ matrix-commander --delete-device \"QBUAZIFURK\" \"AUIECTSRND\" \\\n    --user '@user1:example.com' --password 'user1-password'\n$ # delete a message with event id 'someEventId'\n# matrix-commander --room-redact '!someroomId1:example.com' 'someEventId'\n$ # delete 2 images from 2 rooms\n$ matrix-commander --room-redact \\\n    '\\!someroomId1:example.com' '\\$someEventId1' 'Image deleted, obsolete info'\n    '\\!someroomId2:example.com' '\\$someEventId2' 'Image deleted, outdated'\n$ # print its own user id\n$ matrix-commander --whoami\n$ # skip SSL certificate verification for a homeserver without SSL\n$ matrix-commander --no-ssl -m \"also working without Let's Encrypt SSL\"\n$ # use your own SSL certificate for a homeserver with SSL and local certs\n$ matrix-commander --ssl-certificate mycert.crt -m \"using my own cert\"\n$ # download and decrypt media files like images, audio, PDF, etc.\n$ # and store downloaded files in directory \"mymedia\"\n$ matrix-commander --listen forever --listen-self --download-media mymedia\n$ # create rooms without name and topic, just with alias, use a simple alias\n$ matrix-commander --room-create roomAlias1\n$ # don't use a well formed alias like '#roomAlias1:example.com' as it will\n$ # confuse the server!\n$ # BAD: matrix-commander --room-create roomAlias1 '#roomAlias1:example.com'\n$ matrix-commander --room-create roomAlias2\n$ # create rooms with name and topic\n$ matrix-commander --room-create roomAlias3 --name 'Fancy Room' \\\n    --topic 'All about Matrix'\n$ matrix-commander --room-create roomAlias4 roomAlias5 \\\n    --name 'Fancy Room 4' -name 'Cute Room 5' \\\n    --topic 'All about Matrix 4' 'All about Nio 5'\n$ # create DM rooms with user.\n$ matrix-commander --room-dm-create '@user1:example.com'\n$ # create DM rooms with name, topic, alias\n$ matrix-commander --room-dm-create '@user1:example.com' '@user2:example.com' \\\n    --name 'Fancy DM room 4' -name 'Cute DM room 4' \\\n    --topic 'All about Matrix 4' 'All about Nio 5' \\\n    --alias roomAlias1 '#roomAlias2:example.com'\n$ # join rooms\n$ matrix-commander --room-join '!someroomId1:example.com' \\\n    '!someroomId2:example.com' '#roomAlias1:example.com'\n$ # leave rooms\n$ matrix-commander --room-leave '#roomAlias1:example.com' \\\n    '!someroomId2:example.com'\n$ # forget rooms, you have to first leave a room before you forget it\n$ matrix-commander --room-forget '#roomAlias1:example.com'\n$ # invite users to rooms\n$ matrix-commander --room-invite '#roomAlias1:example.com' \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # ban users from rooms\n$ matrix-commander --room-ban '!someroom1:example.com' \\\n    '!someroom2:example.com' \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # unban users from rooms, remember after unbanning you have to invite again\n$ matrix-commander --room-unban '!someroom1:example.com' \\\n    '!someroom2:example.com' \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # kick users from rooms\n$ matrix-commander --room-kick '!someroom1:example.com' \\\n    '#roomAlias2:example.com' \\\n    --user '@user1:example.com' '@user2:example.com'\n$ # set log levels, INFO for matrix-commander and ERROR for modules below\n$ matrix-commander -m \"test\" --log-level INFO ERROR\n$ # example of how to quote text correctly, e.g. JSON text\n$ matrix-commander -m '{title: \"hello\", message: \"here it is\"}'\n$ matrix-commander -m \"{title: \\\"hello\\\", message: \\\"here it is\\\"}\"\n$ matrix-commander -m \"{title: \\\"${TITLE}\\\", message: \\\"${MSG}\\\"}\"\n$ matrix-commander -m \"Don't do this\"\n$ matrix-commander -m 'He said \"No\" to me.'\n$ matrix-commander --separator \" || \" # customize column separator in outputs\n$ matrix-commander --mxc-to-http mxc://example.com/abc... # get HTTP\n$ matrix-commander --devices # to list devices of matrix-commander\n$ matrix-commander --discovery-info # print discovery info of homeserver\n$ matrix-commander --login-info # list login methods\n$ matrix-commander --content-repository-config # list config of content repo\n$ matrix-commander --sync off -m Test -i image.svg # a faster send\n$ matrix-commander --joined-rooms --output json | jq # get json output in JSON\n$ matrix-commander --joined-rooms --output json-max | jq # full details\n$ matrix-commander --tail 10 --output json-spec | jq # as specification\n$ matrix-commander --joined-rooms --output text # get human-readable output\n$ # example of how to use stdin, how to pipe data into the program\n$ echo \"Some text\" | matrix-commander # send a text msg via pipe\n$ echo \"Some text\" | matrix-commander -m - # long form to send text via pipe\n$ matrix-commander -m \"\\-\" # send the literal minus sign as a text msg\n$ cat image1.png | matrix-commander -i - # send an image via pipe\n$ matrix-commander -i - < image1.png # send an image via pipe\n$ cat image1.png | matrix-commander -i - -m \"text\" # send image and text\n$ # send 3 images out of which the second will be read from stdin via pipe\n$ cat im2.png | matrix-commander -i im1.jpg - im3.jpg # send 3 images\n$ echo \"text\" | matrix-commander -i im1.png # first image, then piped text\n$ echo \"text\" | matrix-commander -i im1.png -m - # same, long version\n$ pdf-generator | matrix-commander -f - -m \"Here is my PDF file.\"\n$ audio-generator | matrix-commander -a - -m \"Like this song?\"\n$ echo \"junk\" | matrix-commander -i - -m - # this will fail, not allowed\n$ # remember, pipe or stdin, i.e. the \"-\" can be used at most once\n$ cat im.png | matrix-commander -i im1.png - im3.png - im5.png # will fail\n$ # sending an event: e.g. reacting with an emoji\n$ JSON_REACT_MSC2677='{ \"type\": \"m.reaction\",\n    \"content\": { \"m.relates_to\": { \"rel_type\": \"m.annotation\",\n    \"event_id\": \"%s\", \"key\": \"%s\" } } }'\n$ TARGET_EVENT=\"\\$...a.valid.event.id\" # event to which to react\n$ REACT_EMOJI=\"😀\" # how to react\n$ printf \"$JSON_REACT_MSC2677\" \"$TARGET_EVENT\" \"$REACT_EMOJI\" |\n    matrix-commander --event -\n$ # for more examples of \"matrix-commander --event\" see tests/test-event.sh\n```\n\n# Usage\n```\nusage: matrix_commander.py [-h] [-d] [--log-level LOG_LEVEL [LOG_LEVEL ...]]\n                           [--verbose] [--login LOGIN] [-v [VERIFY]]\n                           [--logout LOGOUT] [-c CREDENTIALS] [-s STORE]\n                           [-r ROOM [ROOM ...]] [--room-default ROOM_DEFAULT]\n                           [--room-create ROOM_CREATE [ROOM_CREATE ...]]\n                           [--room-dm-create ROOM_DM_CREATE [ROOM_DM_CREATE ...]]\n                           [--room-join ROOM_JOIN [ROOM_JOIN ...]]\n                           [--room-leave ROOM_LEAVE [ROOM_LEAVE ...]]\n                           [--room-forget ROOM_FORGET [ROOM_FORGET ...]]\n                           [--room-invite ROOM_INVITE [ROOM_INVITE ...]]\n                           [--room-ban ROOM_BAN [ROOM_BAN ...]]\n                           [--room-unban ROOM_UNBAN [ROOM_UNBAN ...]]\n                           [--room-kick ROOM_KICK [ROOM_KICK ...]]\n                           [-u USER [USER ...]] [--user-login USER_LOGIN]\n                           [--name NAME [NAME ...]]\n                           [--topic TOPIC [TOPIC ...]]\n                           [--alias ALIAS [ALIAS ...]]\n                           [-m MESSAGE [MESSAGE ...]] [-i IMAGE [IMAGE ...]]\n                           [-a AUDIO [AUDIO ...]] [-f FILE [FILE ...]]\n                           [-e EVENT [EVENT ...]] [-w] [-z] [-k] [-p SPLIT]\n                           [--config CONFIG] [--proxy PROXY] [-n]\n                           [--encrypted] [-l [LISTEN]] [-t [TAIL]] [-y]\n                           [--print-event-id]\n                           [--download-media [DOWNLOAD_MEDIA]] [-o]\n                           [--set-device-name SET_DEVICE_NAME]\n                           [--set-display-name SET_DISPLAY_NAME]\n                           [--get-display-name] [--set-presence SET_PRESENCE]\n                           [--get-presence] [--upload UPLOAD [UPLOAD ...]]\n                           [--download DOWNLOAD [DOWNLOAD ...]]\n                           [--delete-mxc DELETE_MXC [DELETE_MXC ...]]\n                           [--delete-mxc-before DELETE_MXC_BEFORE [DELETE_MXC_BEFORE ...]]\n                           [--joined-rooms]\n                           [--joined-members JOINED_MEMBERS [JOINED_MEMBERS ...]]\n                           [--mxc-to-http MXC_TO_HTTP [MXC_TO_HTTP ...]]\n                           [--devices] [--discovery-info] [--login-info]\n                           [--content-repository-config]\n                           [--rest REST [REST ...]] [--set-avatar SET_AVATAR]\n                           [--get-avatar [GET_AVATAR ...]]\n                           [--get-profile [GET_PROFILE ...]]\n                           [--get-room-info [GET_ROOM_INFO ...]]\n                           [--get-client-info]\n                           [--has-permission HAS_PERMISSION [HAS_PERMISSION ...]]\n                           [--import-keys IMPORT_KEYS IMPORT_KEYS]\n                           [--export-keys EXPORT_KEYS EXPORT_KEYS]\n                           [--room-set-alias ROOM_SET_ALIAS [ROOM_SET_ALIAS ...]]\n                           [--room-resolve-alias ROOM_RESOLVE_ALIAS [ROOM_RESOLVE_ALIAS ...]]\n                           [--room-delete-alias ROOM_DELETE_ALIAS [ROOM_DELETE_ALIAS ...]]\n                           [--get-openid-token [GET_OPENID_TOKEN ...]]\n                           [--room-get-visibility [ROOM_GET_VISIBILITY ...]]\n                           [--room-get-state [ROOM_GET_STATE ...]]\n                           [--delete-device DELETE_DEVICE [DELETE_DEVICE ...]]\n                           [--room-redact ROOM_REDACT [ROOM_REDACT ...]]\n                           [--whoami] [--no-ssl]\n                           [--ssl-certificate SSL_CERTIFICATE]\n                           [--file-name FILE_NAME [FILE_NAME ...]]\n                           [--key-dict KEY_DICT [KEY_DICT ...]] [--plain]\n                           [--separator SEPARATOR]\n                           [--access-token ACCESS_TOKEN] [--password PASSWORD]\n                           [--homeserver HOMESERVER] [--device DEVICE]\n                           [--sync SYNC] [--output OUTPUT] [--version]\n\nWelcome to matrix-commander, a Matrix CLI client. ─── On first run use --login\nto log in, to authenticate. On second run we suggest to use --verify to get\nverified. Emoji verification is built-in which can be used to verify devices.\nOn further runs this program implements a simple Matrix CLI client that can\nsend messages, listen to messages, verify devices, etc. It can send one or\nmultiple message to one or multiple Matrix rooms and/or users. The text\nmessages can be of various formats such as \"text\", \"html\", \"markdown\" or\n\"code\". Images, audio, arbitrary files, or events can be sent as well. For\nreceiving there are three main options: listen forever, listen once and quit,\nand get the last N messages and quit. End-to-end encryption is enabled by\ndefault and cannot be turned off. ─── Bundling several actions together into a\nsingle call to matrix-commander is faster than calling matrix-commander\nmultiple times with only one action. If there are both 'set' and 'get' actions\npresent in the arguments, then the 'set' actions will be performed before the\n'get' actions. Then send actions and at the very end listen actions will be\nperformed. ─── For even more explications and examples also read the\ndocumentation provided in the on-line Github README.md file or the README.md\nin your local installation.\n\noptions:\n  -h, --help            show this help message and exit\n  -d, --debug           Print debug information. If used once, only the log\n                        level of matrix-commander is set to DEBUG. If used\n                        twice (\"-d -d\" or \"-dd\") then log levels of both\n                        matrix-commander and underlying modules are set to\n                        DEBUG. \"-d\" is a shortcut for \"--log-level DEBUG\". See\n                        also --log-level. \"-d\" takes precedence over \"--log-\n                        level\". Additionally, have a look also at the option \"\n                        --verbose\".\n  --log-level LOG_LEVEL [LOG_LEVEL ...]\n                        Set the log level(s). Possible values are \"DEBUG\",\n                        \"INFO\", \"WARNING\", \"ERROR\", and \"CRITICAL\". If\n                        --log_level is used with one level argument, only the\n                        log level of matrix-commander is set to the specified\n                        value. If --log_level is used with two level argument\n                        (e.g. \"--log-level WARNING ERROR\") then log levels of\n                        both matrix-commander and underlying modules are set\n                        to the specified values. See also --debug.\n  --verbose             Set the verbosity level. If not used, then verbosity\n                        will be set to low. If used once, verbosity will be\n                        high. If used more than once, verbosity will be very\n                        high. Verbosity only affects the debug information.\n                        So, if '--debug' is not used then '--verbose' will be\n                        ignored.\n  --login LOGIN         Login to and authenticate with the Matrix homeserver.\n                        This requires exactly one argument, the login method.\n                        Currently two choices are offered: 'password' and\n                        'sso'. Provide one of these methods. If you have\n                        chosen 'password', you will authenticate through your\n                        account password. You can optionally provide these\n                        additional arguments: --homeserver to specify the\n                        Matrix homeserver, --user-login to specify the log in\n                        user id, --password to specify the password, --device\n                        to specify a device name, --room-default to specify a\n                        default room for sending/listening. If you have chosen\n                        'sso', you will authenticate through Single Sign-On. A\n                        web-browser will be started and you authenticate on\n                        the webpage. You can optionally provide these\n                        additional arguments: --homeserver to specify the\n                        Matrix homeserver, --user-login to specify the log in\n                        user id, --device to specify a device name, --room-\n                        default to specify a default room for\n                        sending/listening. See all the extra arguments for\n                        further explanations. ----- SSO (Single Sign-On)\n                        starts a web browser and connects the user to a web\n                        page on the server for login. SSO will only work if\n                        the server supports it and if there is access to a\n                        browser. So, don't use SSO on headless homeservers\n                        where there is no browser installed or accessible.\n  -v [VERIFY], --verify [VERIFY]\n                        Perform verification. By default, no verification is\n                        performed. Possible values are: \"emoji\". If\n                        verification is desired, run this program in the\n                        foreground (not as a service) and without a pipe.\n                        While verification is optional it is highly\n                        recommended, and it is recommended to be done right\n                        after (or together with) the --login action.\n                        Verification is always interactive, i.e. it required\n                        keyboard input. Verification questions will be printed\n                        on stdout and the user has to respond via the keyboard\n                        to accept or reject verification. Once verification is\n                        complete, the program may be run as a service.\n                        Verification is best done as follows: Perform a cross-\n                        device verification, that means, perform a\n                        verification between two devices of the *same* user.\n                        For that, open (e.g.) Element in a browser, make sure\n                        Element is using the same user account as the matrix-\n                        commander user (specified with --user-login at\n                        --login). Now in the Element webpage go to the room\n                        that is the matrix-commander default room (specified\n                        with --room-default at --login). OK, in the web-\n                        browser you are now the same user and in the same room\n                        as matrix-commander. Now click the round 'i' 'Room\n                        Info' icon, then click 'People', click the appropriate\n                        user (the matrix-commander user), click red 'Not\n                        Trusted' text which indicated an untrusted device,\n                        then click the square 'Interactively verify by Emoji'\n                        button (one of 3 button choices). At this point both\n                        web-page and matrix-commander in terminal show a set\n                        of emoji icons and names. Compare them visually.\n                        Confirm on both sides (Yes, They Match, Got it),\n                        finally click OK. You should see a green shield and\n                        also see that the matrix-commander device is now green\n                        and verified in the webpage. In the terminal you\n                        should see a text message indicating success. You\n                        should now be verified across all devices and across\n                        all users.\n  --logout LOGOUT       Logout this or all devices from the Matrix homeserver.\n                        This requires exactly one argument. Two choices are\n                        offered: 'me' and 'all'. Provide one of these choices.\n                        If you choose 'me', only the one device matrix-\n                        commander is currently using will be logged out. If\n                        you choose 'all', all devices of the user used by\n                        matrix-commander will be logged out. While --logout\n                        neither removes the credentials nor the store, the\n                        logout action removes the device and makes the access-\n                        token stored in the credentials invalid. Hence, after\n                        a --logout, one must manually remove creditials and\n                        store, and then perform a new --login to use matrix-\n                        commander again. You can perfectly use matrix-\n                        commander without ever logging out. --logout is a\n                        cleanup if you have decided not to use this (or all)\n                        device(s) ever again.\n  -c CREDENTIALS, --credentials CREDENTIALS\n                        On first run, information about homeserver, user, room\n                        id, etc. will be written to a credentials file. By\n                        default, this file is \"credentials.json\". On further\n                        runs the credentials file is read to permit logging\n                        into the correct Matrix account and sending messages\n                        to the preconfigured room. If this option is provided,\n                        the provided file name will be used as credentials\n                        file instead of the default one.\n  -s STORE, --store STORE\n                        Path to directory to be used as \"store\" for encrypted\n                        messaging. By default, this directory is \"./store/\".\n                        Since encryption is always enabled, a store is always\n                        needed. If this option is provided, the provided\n                        directory name will be used as persistent storage\n                        directory instead of the default one. Preferably, for\n                        multiple executions of this program use the same store\n                        for the same device. The store directory can be shared\n                        between multiple different devices and users.\n  -r ROOM [ROOM ...], --room ROOM [ROOM ...]\n                        Optionally specify one or multiple rooms via room ids\n                        or room aliases. --room is used by various send\n                        actions and various listen actions. The default room\n                        is provided in the credentials file (specified at\n                        --login with --room-default). If a room (or multiple\n                        ones) is (or are) provided in the --room arguments,\n                        then it (or they) will be used instead of the one from\n                        the credentials file. The user must have access to the\n                        specified room in order to send messages there or\n                        listen on the room. Messages cannot be sent to\n                        arbitrary rooms. When specifying the room id some\n                        shells require the exclamation mark to be escaped with\n                        a backslash. As an alternative to specifying a room as\n                        destination, one can specify a user as a destination\n                        with the '--user' argument. See '--user' and the term\n                        'DM (direct messaging)' for details. Specifying a room\n                        is always faster and more efficient than specifying a\n                        user. Not all listen operations allow setting a room.\n                        Read more under the --listen options and similar. Most\n                        actions also support room aliases instead of room ids.\n                        Some even short room aliases.\n  --room-default ROOM_DEFAULT\n                        Optionally specify a room as the default room for\n                        future actions. If not specified for --login, it will\n                        be queried via the keyboard. --login stores the\n                        specified room as default room in your credentials\n                        file. This option is only used in combination with\n                        --login. A default room is needed. Specify a valid\n                        room either with --room-default or provide it via\n                        keyboard.\n  --room-create ROOM_CREATE [ROOM_CREATE ...]\n                        Create one or multiple rooms. One or multiple room\n                        aliases can be specified. For each alias specified a\n                        room will be created. For each created room one line\n                        with room id and alias will be printed to stdout. If\n                        you are not interested in an alias, provide an empty\n                        string like \"\".The alias provided must be in canocial\n                        local form, i.e. if you want a final full alias like\n                        \"#SomeRoomAlias:matrix.example.com\" you must provide\n                        the string 'SomeRoomAlias'. The user must be permitted\n                        to create rooms. Combine --room-create with --name and\n                        --topic to add names and topics to the room(s) to be\n                        created.\n  --room-dm-create ROOM_DM_CREATE [ROOM_DM_CREATE ...]\n                        Create one or multiple DM rooms with the specified\n                        users. For each user specified a DM room will be\n                        created and the user invited to it. For each created\n                        room one line with room id and alias will be printed\n                        to stdout. The user must be permitted to create rooms.\n                        Combine --room-dm-create with --name, --topic and\n                        --alias to add names, topics and aliases to the\n                        room(s) to be created.\n  --room-join ROOM_JOIN [ROOM_JOIN ...]\n                        Join this room or these rooms. One or multiple room\n                        aliases can be specified. The room (or multiple ones)\n                        provided in the arguments will be joined. The user\n                        must have permissions to join these rooms.\n  --room-leave ROOM_LEAVE [ROOM_LEAVE ...]\n                        Leave this room or these rooms. One or multiple room\n                        aliases can be specified. The room (or multiple ones)\n                        provided in the arguments will be left.\n  --room-forget ROOM_FORGET [ROOM_FORGET ...]\n                        After leaving a room you should (most likely) forget\n                        the room. Forgetting a room removes the users' room\n                        history. One or multiple room aliases can be\n                        specified. The room (or multiple ones) provided in the\n                        arguments will be forgotten. If all users forget a\n                        room, the room can eventually be deleted on the\n                        server.\n  --room-invite ROOM_INVITE [ROOM_INVITE ...]\n                        Invite one ore more users to join one or more rooms.\n                        Specify the user(s) as arguments to --user. Specify\n                        the rooms as arguments to this option, i.e. as\n                        arguments to --room-invite. The user must have\n                        permissions to invite users.\n  --room-ban ROOM_BAN [ROOM_BAN ...]\n                        Ban one ore more users from one or more rooms. Specify\n                        the user(s) as arguments to --user. Specify the rooms\n                        as arguments to this option, i.e. as arguments to\n                        --room-ban. The user must have permissions to ban\n                        users.\n  --room-unban ROOM_UNBAN [ROOM_UNBAN ...]\n                        Unban one ore more users from one or more rooms.\n                        Specify the user(s) as arguments to --user. Specify\n                        the rooms as arguments to this option, i.e. as\n                        arguments to --room-unban. The user must have\n                        permissions to unban users.\n  --room-kick ROOM_KICK [ROOM_KICK ...]\n                        Kick one ore more users from one or more rooms.\n                        Specify the user(s) as arguments to --user. Specify\n                        the rooms as arguments to this option, i.e. as\n                        arguments to --room-kick. The user must have\n                        permissions to kick users.\n  -u USER [USER ...], --user USER [USER ...]\n                        Specify one or multiple users. This option is\n                        meaningful in combination with a) room actions like\n                        --room-invite, --room-ban, --room-unban, etc. and b)\n                        send actions like -m, -i, -f, etc. c) some listen\n                        actions --listen, as well as d) actions like --delete-\n                        device. In case of a) this option --user specifies the\n                        users to be used with room commands (like invite, ban,\n                        etc.). In case of b) the option --user can be used as\n                        an alternative to specifying a room as destination for\n                        text (-m), images (-i), etc. For send actions '--user'\n                        is providing the functionality of 'DM (direct\n                        messaging)'. For c) this option allows an alternative\n                        to specifying a room as destination for some --listen\n                        actions. For d) this gives the otion to delete the\n                        device of a different user. ----- What is a DM?\n                        matrix-commander tries to find a room that contains\n                        only the sender and the receiver, hence DM. These\n                        rooms have nothing special other the fact that they\n                        only have 2 members and them being the sender and\n                        recipient respectively. If such a room is found, the\n                        first one found will be used as destination. If no\n                        such room is found, the send fails and the user should\n                        do a --room-create and --room-invite first. If\n                        multiple such rooms exist, one of them will be used\n                        (arbitrarily). For sending and listening, specifying a\n                        room directly is always faster and more efficient than\n                        specifying a user. So, if you know the room, it is\n                        preferred to use --room instead of --user. For b) and\n                        c) --user can be specified in 3 ways: 1) full user id\n                        as in '@john:example.org', 2) partial user id as in\n                        '@john' when the user is on the same homeserver\n                        (example.org will be automatically appended), or 3) a\n                        display name as in 'john'. Be careful, when using\n                        display names as they might not be unique, and you\n                        could be sending to the wrong person. To see possible\n                        display names use the --joined-members '*' option\n                        which will show you the display names in the middle\n                        column.\n  --user-login USER_LOGIN\n                        Optional argument to specify the user for --login.\n                        This gives the otion to specify the user id for login.\n                        For '--login sso' the --user-login is not needed as\n                        user id can be obtained from server via SSO. For '--\n                        login password', if not provided it will be queried\n                        via keyboard. A full user id like '@john:example.com',\n                        a partial user name like '@john', and a short user\n                        name like 'john' can be given. --user-login is only\n                        used by --login and ignored by all other actions.\n  --name NAME [NAME ...]\n                        Specify one or multiple names. This option is only\n                        meaningful in combination with option --room-create.\n                        This option --name specifies the names to be used with\n                        the command --room-create.\n  --topic TOPIC [TOPIC ...]\n                        Specify one or multiple topics. This option is only\n                        meaningful in combination with option --room-create.\n                        This option --topic specifies the topics to be used\n                        with the command --room-create.\n  --alias ALIAS [ALIAS ...]\n                        Specify one or multiple aliases. This option is only\n                        meaningful in combination with option --room-dm-\n                        create. This option --alias specifies the aliases to\n                        be used with the command --room-dm-create.\n  -m MESSAGE [MESSAGE ...], --message MESSAGE [MESSAGE ...]\n                        Send this message. Message data must not be binary\n                        data, it must be text. If no '-m' is used and no other\n                        conflicting arguments are provided, and information is\n                        piped into the program, then the piped data will be\n                        used as message. Finally, if there are no operations\n                        at all in the arguments, then a message will be read\n                        from stdin, i.e. from the keyboard. This option can be\n                        used multiple times to send multiple messages. If\n                        there is data piped into this program, then first data\n                        from the pipe is published, then messages from this\n                        option are published. Messages will be sent last, i.e.\n                        after objects like images, audio, files, events, etc.\n                        Input piped via stdin can additionally be specified\n                        with the special character '-'. If you want to feed a\n                        text message into matrix-commander via a pipe, via\n                        stdin, then specify the special character '-'. If '-'\n                        is specified as message, then the program will read\n                        the message from stdin. If your message is literally\n                        '-' then use '\\-' as message in the argument. '-' may\n                        appear in any position, i.e. '-m \"start\" - \"end\"' will\n                        send 3 messages out of which the second one is read\n                        from stdin. '-' may appear only once overall in all\n                        arguments.\n  -i IMAGE [IMAGE ...], --image IMAGE [IMAGE ...]\n                        Send this image. This option can be used multiple\n                        times to send multiple images. First images are sent,\n                        then text messages are sent. If you want to feed an\n                        image into matrix-commander via a pipe, via stdin,\n                        then specify the special character '-'. If '-' is\n                        specified as image file name, then the program will\n                        read the image data from stdin. If your image file is\n                        literally named '-' then use '\\-' as file name in the\n                        argument. '-' may appear in any position, i.e. '-i\n                        image1.jpg - image3.png' will send 3 images out of\n                        which the second one is read from stdin. '-' may\n                        appear only once overall in all arguments. If the file\n                        exists already, it is more efficient to specify the\n                        file name than to pipe the file through stdin.\n  -a AUDIO [AUDIO ...], --audio AUDIO [AUDIO ...]\n                        Send this audio file. This option can be used multiple\n                        times to send multiple audio files. First audios are\n                        sent, then text messages are sent. If you want to feed\n                        an audio into matrix-commander via a pipe, via stdin,\n                        then specify the special character '-'. See\n                        description of '-i' to see how '-' is handled.\n  -f FILE [FILE ...], --file FILE [FILE ...]\n                        Send this file (e.g. PDF, DOC, MP4). This option can\n                        be used multiple times to send multiple files. First\n                        files are sent, then text messages are sent. If you\n                        want to feed a file into matrix-commander via a pipe,\n                        via stdin, then specify the special character '-'. See\n                        description of '-i' to see how '-' is handled.\n  -e EVENT [EVENT ...], --event EVENT [EVENT ...]\n                        Send an event that is formatted as a JSON object as\n                        specified by the Matrix protocol. This allows the\n                        advanced user to send additional types of events such\n                        as reactions, send replies to previous events, or edit\n                        previous messages. Specifications for events can be\n                        found at https://spec.matrix.org/unstable/proposals/.\n                        This option can be used multiple times to send\n                        multiple events. First events are sent, then text\n                        messages are sent. If you want to feed an event into\n                        matrix-commander via a pipe, via stdin, then specify\n                        the special character '-'. See description of '-i' to\n                        see how '-' is handled. See tests/test-event.sh for\n                        examples.\n  -w, --html            Send message as format \"HTML\". If not specified,\n                        message will be sent as format \"TEXT\". E.g. that\n                        allows some text to be bold, etc. Only a subset of\n                        HTML tags are accepted by Matrix.\n  -z, --markdown        Send message as format \"MARKDOWN\". If not specified,\n                        message will be sent as format \"TEXT\". E.g. that\n                        allows sending of text formatted in MarkDown language.\n  -k, --code            Send message as format \"CODE\". If not specified,\n                        message will be sent as format \"TEXT\". If both --html\n                        and --code are specified then --code takes priority.\n                        This is useful for sending ASCII-art or tabbed output\n                        like tables as a fixed-sized font will be used for\n                        display.\n  -p SPLIT, --split SPLIT\n                        If set, split the message(s) into multiple messages\n                        wherever the string specified with --split occurs.\n                        E.g. One pipes a stream of RSS articles into the\n                        program and the articles are separated by three\n                        newlines. Then with --split set to \"\\n\\n\\n\" each\n                        article will be printed in a separate message. By\n                        default, i.e. if not set, no messages will be split.\n  --config CONFIG       Location of a config file. By default, no config file\n                        is used. If this option is provided, the provided file\n                        name will be used to read configuration from. Not\n                        implemented.\n  --proxy PROXY         Optionally specify a proxy for connectivity. By\n                        default, i.e. if this option is not set, no proxy is\n                        used. If this option is used a proxy URL must be\n                        provided. The provided proxy URL will be used for the\n                        HTTP connection to the server. The proxy supports\n                        SOCKS4(a), SOCKS5, and HTTP (tunneling). Examples of\n                        valid URLs are \"http://10.10.10.10:8118\" or\n                        \"socks5://user:password@127.0.0.1:1080\". URLs with\n                        \"https\" or \"socks4a\" are not valid. Only \"http\",\n                        \"socks4\" and \"socks5\" are valid.\n  -n, --notice          Send message as notice. If not specified, message will\n                        be sent as text.\n  --encrypted           Send message end-to-end encrypted. Encryption is\n                        always turned on and will always be used where\n                        possible. It cannot be turned off. This flag does\n                        nothing as encryption is turned on with or without\n                        this argument.\n  -l [LISTEN], --listen [LISTEN]\n                        The --listen option takes one argument. There are\n                        several choices: \"never\", \"once\", \"forever\", \"tail\",\n                        and \"all\". By default, --listen is set to \"never\". So,\n                        by default no listening will be done. Set it to\n                        \"forever\" to listen for and print incoming messages to\n                        stdout. \"--listen forever\" will listen to all messages\n                        on all rooms forever. To stop listening \"forever\", use\n                        Control-C on the keyboard or send a signal to the\n                        process or service. The PID for signaling can be found\n                        in a PID file in directory \"/home/user/.run\". \"--\n                        listen once\" will get all the messages from all rooms\n                        that are currently queued up. So, with \"once\" the\n                        program will start, print waiting messages (if any)\n                        and then stop. The timeout for \"once\" is set to 10\n                        seconds. So, be patient, it might take up to that\n                        amount of time. \"tail\" reads and prints the last N\n                        messages from the specified rooms, then quits. The\n                        number N can be set with the --tail option. With\n                        \"tail\" some messages read might be old, i.e. already\n                        read before, some might be new, i.e. never read\n                        before. It prints the messages and then the program\n                        stops. Messages are sorted, last-first. Look at --tail\n                        as that option is related to --listen tail. The option\n                        \"all\" gets all messages available, old and new. Unlike\n                        \"once\" and \"forever\" that listen in ALL rooms, \"tail\"\n                        and \"all\" listen only to the room specified in the\n                        credentials file or the --room options.\n  -t [TAIL], --tail [TAIL]\n                        The --tail option reads and prints up to the last N\n                        messages from the specified rooms, then quits. It\n                        takes one argument, an integer, which we call N here.\n                        If there are fewer than N messages in a room, it reads\n                        and prints up to N messages. It gets the last N\n                        messages in reverse order. It print the newest message\n                        first, and the oldest message last. If --listen-self\n                        is not set it will print less than N messages in many\n                        cases because N messages are obtained, but some of\n                        them are discarded by default if they are from the\n                        user itself. Look at --listen as this option is\n                        related to --tail.\n  -y, --listen-self     If set and listening, then program will listen to and\n                        print also the messages sent by its own user. By\n                        default messages from oneself are not printed.\n  --print-event-id      If set and listening, then 'matrix-commander' will\n                        print also the event id for each received message or\n                        other received event. If set and sending, then\n                        'matrix-commander' will print the event id of the sent\n                        message or the sent object (audio, file, event) to\n                        stdout. Other information like room id and reference\n                        to what was sent will be printed too. For sending this\n                        is useful, if after sending the user wishes to perform\n                        further operations on the sent object, e.g.\n                        redacting/deleting it after an expiration time, etc.\n  --download-media [DOWNLOAD_MEDIA]\n                        If set and listening, then program will download\n                        received media files (e.g. image, audio, video, text,\n                        PDF files). media will be downloaded to local\n                        directory. By default, media will be downloaded to is\n                        \"./media/\". You can overwrite default with your\n                        preferred directory. If media is encrypted it will be\n                        decrypted and stored decrypted. By default media files\n                        will not be downloaded.\n  -o, --os-notify       If set and listening, then program will attempt to\n                        visually notify of arriving messages through the\n                        operating system. By default there is no notification\n                        via OS.\n  --set-device-name SET_DEVICE_NAME\n                        Set or rename the current device to the device name\n                        provided. Send, listen and verify operations are\n                        allowed when renaming the device.\n  --set-display-name SET_DISPLAY_NAME\n                        Set or rename the display name for the current user to\n                        the display name provided. Send, listen and verify\n                        operations are allowed when setting the display name.\n                        Do not confuse this option with the option '--get-\n                        room-info' which gets the room display name, not the\n                        user display name.\n  --get-display-name    Get the display name of matrix-commander (itself), or\n                        of one or multiple users. Specify user(s) with the\n                        --user option. If no user is specified get the display\n                        name of itself. Send, listen and verify operations are\n                        allowed when getting display name(s). Do not confuse\n                        this option with the option '--get-room-info' which\n                        gets the room display name, not the user display name.\n  --set-presence SET_PRESENCE\n                        Set presence of matrix-commander to the given value.\n                        Must be one of these values: “online”, “offline”,\n                        “unavailable”. Otherwise an error will be produced.\n  --get-presence        Get presence of matrix-commander (itself), or of one\n                        or multiple users. Specify user(s) with the --user\n                        option. If no user is specified get the presence of\n                        itself. Send, listen and verify operations are allowed\n                        when getting presence(s).\n  --upload UPLOAD [UPLOAD ...]\n                        Upload one or multiple files to the content\n                        repository. The files will be given a Matrix URI and\n                        stored on the server. --upload allows the optional\n                        argument --plain to skip encryption for upload. See\n                        tests/test-upload.sh for an example.\n  --download DOWNLOAD [DOWNLOAD ...]\n                        Download one or multiple files from the content\n                        repository. You must provide one or multiple Matrix\n                        URIs (MXCs) which are strings like this\n                        'mxc://example.com/SomeStrangeUriKey'. If found they\n                        will be downloaded, decrypted, and stored in local\n                        files. If file names are specified with --file-name\n                        the downloads will be saved with these file names. If\n                        --file-name is not specified the original file name\n                        from the upload will be used. If neither specified nor\n                        available on server, then the file name of last resort\n                        'mxc-<mxc-id>' will be used. If a file name in --file-\n                        name contains the placeholder __mxc_id__, it will be\n                        replaced with the mxc-id. If a file name is specified\n                        as empty string in --file-name, then also the name\n                        'mxc-<mxc-id>' will be used. By default, the upload\n                        was encrypted so a decryption dictionary must be\n                        provided to decrypt the data. Specify one or multiple\n                        decryption keys with --key-dict. If --key-dict is not\n                        set, not decryption is attempted; and the data might\n                        be stored in encrypted fashion, or might be plain-text\n                        if the --upload skipped encryption with --plain. See\n                        tests/test-upload.sh for an example.\n  --delete-mxc DELETE_MXC [DELETE_MXC ...]\n                        Delete one or multiple objects (e.g. files) from the\n                        content repository. You must provide one or multiple\n                        Matrix URIs (MXC) which are strings like this\n                        'mxc://example.com/SomeStrangeUriKey'. Alternatively,\n                        you can just provide the MXC id, i.e. the part after\n                        the last slash. If found they will be deleted from the\n                        server database. In order to delete objects one must\n                        have server admin permissions. Having only room admin\n                        permissions is not sufficient and it will fail. Read\n                        https://matrix-org.github.io/synapse/latest/usage/admi\n                        nistration/admin_api/ for learning how to set server\n                        admin permissions on the server. Alternatively, and\n                        optionally, one can specify an access token which has\n                        server admin permissions with the --access-token\n                        argument. See tests/test-upload.sh for an example.\n  --delete-mxc-before DELETE_MXC_BEFORE [DELETE_MXC_BEFORE ...]\n                        Delete objects (e.g. files) from the content\n                        repository that are older than a given timestamp. It\n                        is the timestamp of last access, not the timestamp\n                        when the file was created. Additionally you can\n                        specify a size in bytes to indicate that only files\n                        older than timestamp and larger than size will be\n                        deleted. You must provide a timestamp of the following\n                        format: 'DD.MM.YYYY HH:MM:SS' like '20.01.2022\n                        19:38:42' for January 20, 2022, 7pm 38min 42sec. Files\n                        that are still used in image data (e.g user profile,\n                        room avatar) will not be deleted from the server\n                        database. In order to delete objects one must have\n                        server admin permissions. Having only room admin\n                        permissions is not sufficient and it will fail. Read\n                        https://matrix-org.github.io/synapse/latest/usage/admi\n                        nistration/admin_api/ for learning how to set server\n                        admin permissions on the server. Alternatively, and\n                        optionally, one can specify an access token which has\n                        server admin permissions with the --access-token\n                        argument. See tests/test-upload.sh for an example.\n  --joined-rooms        Print the list of joined rooms. All rooms that you are\n                        a member of will be printed, one room per line.\n  --joined-members JOINED_MEMBERS [JOINED_MEMBERS ...]\n                        Print the list of joined members for one or multiple\n                        rooms. If you want to print the joined members of all\n                        rooms that you are member of, then use the special\n                        character '*'.\n  --mxc-to-http MXC_TO_HTTP [MXC_TO_HTTP ...]\n                        Convert one or more matrix content URIs to the\n                        corresponding HTTP URLs. The MXC URIs to provide look\n                        something like this\n                        'mxc://example.com/SomeStrangeUriKey'. See tests/test-\n                        upload.sh for an example.\n  --devices, --get-devices\n                        Print the list of devices. All device of this account\n                        will be printed, one device per line.\n  --discovery-info      Print discovery information about current homeserver.\n                        Note that not all homeservers support discovery and an\n                        error might be reported.\n  --login-info          Print login methods supported by the homeserver. It\n                        prints one login method per line.\n  --content-repository-config\n                        Print the content repository configuration, currently\n                        just the upload size limit in bytes.\n  --rest REST [REST ...]\n                        Use the Matrix Client REST API. Matrix has several\n                        extensive REST APIs. With the --rest argument you can\n                        invoke a Matrix REST API call. This allows the user to\n                        do pretty much anything, at the price of not being\n                        very convenient. The APIs are described in\n                        https://matrix.org/docs/api/,\n                        https://spec.matrix.org/latest/client-server-api/,\n                        https://matrix-org.github.io/synapse/latest/usage/admi\n                        nistration/admin_api/, etc. Each REST call requires\n                        exactly 3 arguments. So, the total number of arguments\n                        used with --rest must be a multiple of 3. The argument\n                        triples are: (a) the method, a string of GET, POST,\n                        PUT, DELETE, or OPTIONS. (b) a string containing the\n                        data (if any) in JSON format. (c) a string containing\n                        the URL. All strings must be UTF-8. There are a few\n                        placeholders. They are: __homeserver__ (like\n                        https://matrix.example.org), __hostname__ (like\n                        matrix.example.org), __access_token__, __user_id__\n                        (like @mc:matrix.example.com), __device_id__, and\n                        __room_id__. If a placeholder is found it is replaced\n                        with the value from the local credentials file. An\n                        example would be: --rest 'GET' ''\n                        '__homeserver__/_matrix/client/versions'. If there is\n                        no data, i.e. data (b) is empty, then use '' for it.\n                        Optionally, --access-token can be used to overwrite\n                        the access token from credentials (if needed). See\n                        tests/test-rest.sh for an example.\n  --set-avatar SET_AVATAR\n                        Set the avatar MXC resource used by matrix-commander.\n                        Provide one MXC URI that looks like this\n                        'mxc://example.com/SomeStrangeUriKey'.\n  --get-avatar [GET_AVATAR ...]\n                        Get the avatar MXC resource used by matrix-commander,\n                        or one or multiple other users. Specify zero or more\n                        user ids. If no user id is specified, the avatar of\n                        matrix-commander will be fetched. If one or more user\n                        ids are given, the avatars of these users will be\n                        fetched. As response both MXC URI as well as URL will\n                        be printed.\n  --get-profile [GET_PROFILE ...]\n                        Get the user profile used by matrix-commander, or one\n                        or multiple other users. Specify zero or more user\n                        ids. If no user id is specified, the user profile of\n                        matrix-commander will be fetched. If one or more user\n                        ids are given, the user profiles of these users will\n                        be fetched. As response display name and avatar MXC\n                        URI as well as possible additional profile information\n                        (if present) will be printed. One line per user will\n                        be printed.\n  --get-room-info [GET_ROOM_INFO ...]\n                        Get the room information such as room display name,\n                        room alias, room creator, etc. for one or multiple\n                        specified rooms. The included room 'display name' is\n                        also referred to as 'room name' or incorrectly even as\n                        room title. If one or more room are given, the room\n                        informations of these rooms will be fetched. If no\n                        room is specified, the room information for the\n                        default room configured for matrix-commander is\n                        fetched. Rooms can be given via room id (e.g.\n                        '\\!SomeRoomId:matrix.example.com'), canonical (full)\n                        room alias (e.g. '#SomeRoomAlias:matrix.example.com'),\n                        or short alias (e.g. 'SomeRoomAlias' or\n                        '#SomeRoomAlias'). As response room id, room display\n                        name, room canonical alias, room topic, room creator,\n                        and room encryption are printed. One line per room\n                        will be printed. Since either room id or room alias\n                        are accepted as input and both room id and room alias\n                        are given as output, one can hence use this option to\n                        map from room id to room alias as well as vice versa\n                        from room alias to room id. Do not confuse this option\n                        with the options '--get-display-name' and '--set-\n                        display-name', which get/set the user display name,\n                        not the room display name.\n  --get-client-info     Print information kept in the client, i.e. matrix-\n                        commander. Output is printed in JSON format.\n  --has-permission HAS_PERMISSION [HAS_PERMISSION ...]\n                        Inquire if user used by matrix-commander has\n                        permission for one or multiple actions in one or\n                        multiple rooms. Each inquiry requires 2 parameters:\n                        the room id and the permission type. One or multiple\n                        of these parameter pairs may be specified. For each\n                        parameter pair there will be one line printed to\n                        stdout. Values for the permission type are 'ban',\n                        'invite', 'kick', 'notifications', 'redact', etc. See\n                        https://spec.matrix.org/v1.2/client-server-\n                        api/#mroompower_levels.\n  --import-keys IMPORT_KEYS IMPORT_KEYS\n                        Import Megolm decryption keys from a file. This is an\n                        optional argument. If used it must be followed by two\n                        values. (a) a file name from which the keys will be\n                        read. (b) a passphrase with which the file can be\n                        decrypted with. The keys will be added to the current\n                        instance as well as written to the database. See also\n                        --export-keys.\n  --export-keys EXPORT_KEYS EXPORT_KEYS\n                        Export all the Megolm decryption keys of this device.\n                        This is an optional argument. If used it must be\n                        followed by two values. (a) a file name to which the\n                        keys will be written to. (b) a passphrase with which\n                        the file will be encrypted with. Note that this does\n                        not save other information such as the private\n                        identity keys of the device.\n  --room-set-alias ROOM_SET_ALIAS [ROOM_SET_ALIAS ...], --room-put-alias ROOM_SET_ALIAS [ROOM_SET_ALIAS ...]\n                        Add an alias to a room, or aliases to multiple rooms.\n                        Provide pairs of arguments. In each pair, the first\n                        argument must be the alias you want to assign to the\n                        room given via room id in the second argument of the\n                        pair. E.g. the 4 arguments 'a1 r1 a2 r2' would assign\n                        the alias 'a1' to room 'r1' and the alias 'a2' to room\n                        'r2'. If you just have one single pair then the second\n                        argument is optional. If just a single value is given\n                        (an alias) then this alias is assigned to the default\n                        room of matrix-commander (as found in credentials\n                        file). In short, you can have just a single argument\n                        or an even number of arguments forming pairs. You can\n                        have multiple room aliases per room. So, you may add\n                        multiple aliases to the same room. A room alias looks\n                        like this: '#someRoomAlias:matrix.example.org'. Short\n                        aliases like 'someRoomAlias' or '#someRoomAlias' are\n                        also accepted. In case of a short alias, it will be\n                        automatically prefixed with '#' and the homeserver\n                        will be automatically appended. Adding the same alias\n                        multiple times to the same room results in an error.\n                        --room-put-alias is eqivalent to --room-set-alias.\n  --room-resolve-alias ROOM_RESOLVE_ALIAS [ROOM_RESOLVE_ALIAS ...]\n                        Resolves a room alias to the corresponding room id, or\n                        multiple room aliases to their corresponding room ids.\n                        Provide one or multiple room aliases. A room alias\n                        looks like this: '#someRoomAlias:matrix.example.org'.\n                        Short aliases like 'someRoomAlias' or '#someRoomAlias'\n                        are also accepted. In case of a short alias, it will\n                        be automatically prefixed with '#' and the homeserver\n                        from the default room of matrix-commander (as found in\n                        credentials file) will be automatically appended.\n                        Resolving an alias that does not exist results in an\n                        error. For each room alias one line will be printed to\n                        stdout with the result.\n  --room-delete-alias ROOM_DELETE_ALIAS [ROOM_DELETE_ALIAS ...]\n                        Delete one or multiple rooms aliases. Provide one or\n                        multiple room aliases. You can have multiple room\n                        aliases per room. So, you may delete multiple aliases\n                        from the same room or from different rooms. A room\n                        alias looks like this:\n                        '#someRoomAlias:matrix.example.org'. Short aliases\n                        like 'someRoomAlias' or '#someRoomAlias' are also\n                        accepted. In case of a short alias, it will be\n                        automatically prefixed with '#' and the homeserver\n                        from the default room of matrix-commander (as found in\n                        credentials file) will be automatically appended.\n                        Deleting an alias that does not exist results in an\n                        error.\n  --get-openid-token [GET_OPENID_TOKEN ...]\n                        Get an OpenID token for matrix-commander, or for one\n                        or multiple other users. It prints an OpenID token\n                        object that the requester may supply to another\n                        service to verify their identity in Matrix. See\n                        http://www.openid.net/. Specify zero or more user ids.\n                        If no user id is specified, an OpenID for matrix-\n                        commander will be fetched. If one or more user ids are\n                        given, the OpenID of these users will be fetched. As\n                        response the user id(s) and OpenID(s) will be printed.\n  --room-get-visibility [ROOM_GET_VISIBILITY ...]\n                        Get the visibility of one or more rooms. Provide zero\n                        or more room ids as arguments. If no argument is\n                        given, then the default room of matrix-commander (as\n                        found in credentials file) will be used. For each room\n                        the visibility will be printed. Currently, this is\n                        either the string 'private' or 'public'. As response\n                        one line per room will be printed to stdout.\n  --room-get-state [ROOM_GET_STATE ...]\n                        Get the state of one or more rooms. Provide zero or\n                        more room ids as arguments. If no argument is given,\n                        then the default room of matrix-commander (as found in\n                        credentials file) will be used. For each room the\n                        state will be printed. The state is a long list of\n                        events including events like 'm.room.create',\n                        'm.room.encryption', 'm.room.guest_access',\n                        'm.room.history_visibility', 'm.room.join_rules',\n                        'm.room.member', 'm.room.power_levels', etc. As\n                        response one line per room will be printed to stdout.\n                        The line can be very long as the list of events can be\n                        very large. To get output into a human readable form\n                        pipe output through sed and jq as shown in an example\n                        in tests/test-setget.sh.\n  --delete-device DELETE_DEVICE [DELETE_DEVICE ...]\n                        Delete one or multiple devices. By default devices\n                        belonging to matrix-commander will be deleted. If the\n                        devices belong to a different user, use the --user\n                        argument to specify the user, i.e. owner. Only exactly\n                        one user can be specified with the optional --user\n                        argument. Device deletion requires the user password.\n                        It must be specified with the --password argument. If\n                        the server uses only HTTP (and not HTTPS), then the\n                        password can be visible to attackers. Hence, if the\n                        server does not support HTTPS this operation is\n                        discouraged.\n  --room-redact ROOM_REDACT [ROOM_REDACT ...], --room-delete-content ROOM_REDACT [ROOM_REDACT ...]\n                        Strip information out of one or several events, e.g.\n                        messages. Redact is used in the meaning of 'strip,\n                        wipe, black-out', not in the meaning of 'edit'. This\n                        action removes, deletes the content of an event while\n                        not removing the event. You can wipe text from a\n                        previous message, etc. Typical Matrix clients like\n                        Element will delete messages, images and other objects\n                        from the GUI once they have been redacted. So, --room-\n                        redact is a way to delete a message, images, etc. The\n                        content is wiped, the GUI deletes the message, but the\n                        server keeps the event history. Note, while this\n                        deletes from the client (GUI, e.g. Element), it does\n                        not delete from the database on the server. So, this\n                        call is not a way to clean up the server database.\n                        Each redact (wipe, strip, delete) operation requires\n                        exactly 3 arguments. The argument triples are: (a) the\n                        room id. (b) the id of the event to be redacted. (c) a\n                        string containing the reason for the redaction. Use ''\n                        if you do not want to give a reason. So, the total\n                        number of arguments used with --room-redact must be a\n                        multiple of 3, but we also accept 2 in which case only\n                        one redaction will be done without specifying a\n                        reason. Room ids start with the dollar sign ($).\n                        Depending on your shell, you might have to escape the\n                        '$' to '\\$'. --room-delete-content is an alias for\n                        --room-redact. They can be used interchangeably.\n  --whoami              Print the user id used by matrix-commander (itself).\n                        One can get this information also by looking at the\n                        credentials file.\n  --no-ssl              Skip SSL verification. By default (if this option is\n                        not used) the SSL certificate is validated for the\n                        connection. But, if this option is used, then the SSL\n                        certificate validation will be skipped. This is useful\n                        for home-servers that have no SSL certificate. If used\n                        together with the \"--ssl-certificate\" parameter, this\n                        option is meaningless and an error will be raised.\n  --ssl-certificate SSL_CERTIFICATE\n                        Use this option to use your own local SSL certificate\n                        file. This is an optional parameter. This is useful\n                        for home servers that have their own SSL certificate.\n                        This allows you to use HTTPS/TLS for the connection\n                        while using your own local SSL certificate. Specify\n                        the path and file to your SSL certificate. If used\n                        together with the \"--no-ssl\" parameter, this option is\n                        meaningless and an error will be raised.\n  --file-name FILE_NAME [FILE_NAME ...]\n                        Specify one or multiple file names for some actions.\n                        This is an optional argument. Use this option in\n                        combination with options like --download to specify\n                        one or multiple file names. Ignored if used by itself\n                        without an appropriate corresponding action.\n  --key-dict KEY_DICT [KEY_DICT ...]\n                        Specify one or multiple key dictionaries for\n                        decryption. One or multiple decryption dictionaries\n                        are provided by the --upload action as a result. A\n                        decryption dictionary is a string like this: \"{'v':\n                        'v2', 'key': {'kty': 'oct', 'alg': 'A256CTR', 'ext':\n                        True, 'k': 'somekey', 'key_ops': ['encrypt',\n                        'decrypt']}, 'iv': 'someiv', 'hashes': {'sha256':\n                        'someSHA'}}\". If you have a list of key dictionaries\n                        and want to skip one, use the empty string.\n  --plain               Disable encryption for a specific action. By default,\n                        everything is always encrypted. Actions that support\n                        this option are: --upload.\n  --separator SEPARATOR\n                        Set a custom separator used for certain print outs. By\n                        default, i.e. if --separator is not used, 4 spaces are\n                        used as separator between columns in print statements.\n                        You could set it to '\\t' if you prefer a tab, but tabs\n                        are usually replaced with spaces by the terminal. So,\n                        that might not give you what you want. Maybe ' || ' is\n                        an alternative choice.\n  --access-token ACCESS_TOKEN\n                        Set a custom access token for use by certain actions.\n                        It is an optional argument. By default --access-token\n                        is ignored and not used. It is used by the --delete-\n                        mxc, --delete-mxc-before, and --rest actions.\n  --password PASSWORD   Specify a password for use by certain actions. It is\n                        an optional argument. By default --password is ignored\n                        and not used. It is used by '--login password' and '--\n                        delete-device' actions. If not provided for --login\n                        the user will be queried via keyboard.\n  --homeserver HOMESERVER\n                        Specify a homeserver for use by certain actions. It is\n                        an optional argument. By default --homeserver is\n                        ignored and not used. It is used by '--login' action.\n                        If not provided for --login the user will be queried\n                        via keyboard.\n  --device DEVICE       Specify a device name, for use by certain actions. It\n                        is an optional argument. By default --device is\n                        ignored and not used. It is used by '--login' action.\n                        If not provided for --login the user will be queried\n                        via keyboard. If you want the default value specify\n                        ''. Multiple devices (with different device id) may\n                        have the same device name. In short, the same device\n                        name can be assigned to multiple different devices if\n                        desired.\n  --sync SYNC           This option decides on whether the program\n                        synchronizes the state with the server before a 'send'\n                        action. Currently two choices are offered: 'full' and\n                        'off'. Provide one of these choices. The default is\n                        'full'. If you want to use the default, then there is\n                        no need to use this option. If you have chosen 'full',\n                        the full state, all state events will be synchronized\n                        between this program and the server before a 'send'.\n                        If you have chosen 'off', synchronization will be\n                        skipped entirely before the 'send' which will improve\n                        performance.\n  --output OUTPUT       This option decides on how the output is presented.\n                        Currently offered choices are: 'text', 'json', 'json-\n                        max', and 'json-spec'. Provide one of these choices.\n                        The default is 'text'. If you want to use the default,\n                        then there is no need to use this option. If you have\n                        chosen 'text', the output will be formatted with the\n                        intention to be consumed by humans, i.e. readable\n                        text. If you have chosen 'json', the output will be\n                        formatted as JSON. The content of the JSON object\n                        matches the data provided by the matrix-nio SDK. In\n                        some occassions the output is enhanced by having a few\n                        extra data items added for convenience. In most cases\n                        the output will be processed by other programs rather\n                        than read by humans. Option 'json-max' is practically\n                        the same as 'json', but yet another additional field\n                        is added. The data item 'transport_response' which\n                        gives information on how the data was obtained and\n                        transported is also being added. For '--listen' a few\n                        more fields are added. In most cases the output will\n                        be processed by other programs rather than read by\n                        humans. Option 'json-spec' only prints information\n                        that adheres 1-to-1 to the Matrix Specification.\n                        Currently only the events on '--listen' and '--tail'\n                        provide data exactly as in the Matrix Specification.\n                        If no data is available that corresponds exactly with\n                        the Matrix Specification, no data will be printed. In\n                        short, currently '--json-spec' only provides outputs\n                        for '--listen' and '--tail'. All other arguments like\n                        '--get-room-info' will print no output.\n  --version             Print version information. After printing version\n                        information program will continue to run. This is\n                        useful for having version number in the log files.\n\nYou are running version 3.5.26 2022-11-21. Enjoy, star on Github and\ncontribute by submitting a Pull Request.\n```\n\n# Autocompletion\n\nTab completion is provided for shells (e.g. bash), courtesy of @mizlan).\n\nHere is a sample snapshot of tab completion in action:\n\n![tab completion screenshot](screenshots/tab_complete.png)\n\n# Performance and Speed\n\n- `matrix-commander` is written in Python and hence rather on the slow side\n- It is not thread-safe. One cannot just simply run multiple instances\n  at the same time. However, with very careful set-up one can run\n  multiple instances, but that is not the target use case. See\n  [Issue #31](https://github.com/8go/matrix-commander/issues/31).\n- Where possible bundle several actions together into a single call.\n  For example if one wants to send 8 images, then it is significantly faster\n  to call `matrix-commander` once with `-i` specifying 8 images, than\n  to call `matrix-commander` 8 times with one image each call. One needs\n  to send 5 messages, 10 images, 5 audios, 3 PDF files and 7 events to\n  the same user? Call `matrix-commander` once, not 30 times.\n- If you are sending something, then try the `--sync off` option and see\n  to what degree skipping the server sync for sending helps.\n- Avoid using room aliases. Instead use room ids. For each room alias\n  the corresponding id must be retrieved from the server creating overhead.\n\n# For Developers\n\n- Don't change tabbing, spacing, or formatting as file is automatically\n  sorted, linted and formatted.\n- `pylama:format=pep8:linters=pep8`\n- first `isort` import sorter\n- then `flake8` linter/formater\n- then `black` linter/formater\n- line length: 79\n  - isort matrix_commander.py\n  - flake8 matrix_commander.py\n  - python3 -m black --line-length 79 matrix_commander.py\n- There is a script called `lintmc.sh` in `scripts` directory for that.\n\n# License\n\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nWhen preparing to package `matrix-commander` for NIX the question\ncame up if `matrix-commander` is GPL3Only or GPL3Plus. GPL3PLus was\ndeemed to be better. As such the license was changed from GPL3Only\nto GPL3Plus on May 25, 2021. Versions before this date are licensed\nunder GPL3. Versions on or after this date are GPL3Plus, i.e.\nGPL3 or later.\n\nSee [GPL3 at FSF](https://www.fsf.org/licensing/).\n\n# Things to do, Things missing\n\n- see [Issues](https://github.com/8go/matrix-commander/issues) on Github\n\n# Final Remarks\n\n- Thanks to all of you who already have contributed! So appreciated!\n  - :heart: and :thumbsup: to @fyfe, @berlincount, @ezwen, @Scriptkiddi,\n    @pelzvieh, @mizlan, @edwinsage, @jschwartzentruber, @nirgal, @benneti,\n    @opk12, @pataquets, @KizzyCode, @murlock1000, etc.\n- Enjoy!\n- Give it a :star: star on GitHub! Pull requests are welcome  :heart:\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/8go/matrix-commander",
    "keywords": "Matrix,chat,messaging",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrix-commander",
    "package_url": "https://pypi.org/project/matrix-commander/",
    "platform": null,
    "project_url": "https://pypi.org/project/matrix-commander/",
    "project_urls": {
      "Bug Tracker": "https://github.com/8go/matrix-commander/issues",
      "Homepage": "https://github.com/8go/matrix-commander",
      "repository": "https://github.com/8go/matrix-commander"
    },
    "release_url": "https://pypi.org/project/matrix-commander/3.5.26/",
    "requires_dist": [
      "aiohttp",
      "aiofiles (>=0.6.0)",
      "argparse",
      "asyncio",
      "datetime",
      "markdown",
      "matrix-nio[e2e] (>=0.14.1)",
      "notify2",
      "Pillow",
      "python-magic",
      "pyxdg",
      "uuid"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple command-line Matrix client",
    "version": "3.5.26",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16121233,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17b06a1eae63b6d13ac31882a907fbceae6354a45499f2eefba3cdc60729861f",
        "md5": "2cea61c5c0c14048336523a654f0a672",
        "sha256": "6c38d3edaefd350e44786bcb6bb659d731007d539badce61ed27387e1f3d8ede"
      },
      "downloads": -1,
      "filename": "matrix_commander-3.5.26-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2cea61c5c0c14048336523a654f0a672",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 136289,
      "upload_time": "2022-11-21T19:50:55",
      "upload_time_iso_8601": "2022-11-21T19:50:55.110778Z",
      "url": "https://files.pythonhosted.org/packages/17/b0/6a1eae63b6d13ac31882a907fbceae6354a45499f2eefba3cdc60729861f/matrix_commander-3.5.26-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efa1ed2f2a0aaeb81b7aaf178eb520bdc031d5c5fc72d38e71346adda45bf007",
        "md5": "3bd40189468bba0aadfe6c7031debfad",
        "sha256": "0eff8cf494a64d3b614c36f4694d8a2a84ff23eedf9ef65742ee1a9b34f011ce"
      },
      "downloads": -1,
      "filename": "matrix-commander-3.5.26.tar.gz",
      "has_sig": false,
      "md5_digest": "3bd40189468bba0aadfe6c7031debfad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 191236,
      "upload_time": "2022-11-21T19:50:58",
      "upload_time_iso_8601": "2022-11-21T19:50:58.563047Z",
      "url": "https://files.pythonhosted.org/packages/ef/a1/ed2f2a0aaeb81b7aaf178eb520bdc031d5c5fc72d38e71346adda45bf007/matrix-commander-3.5.26.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}