{
  "info": {
    "author": "Andrew Kukwa",
    "author_email": "kukwaa@imsweb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# ChromePDF\n\n## Overview\n\nChromePDF is a small Python 3 library that uses [Selenium](https://pypi.org/project/selenium/) and Google Chrome to convert HTML into a PDF. This is accomplished by using Chrome's `Page.printToPDF` DevTools command.\n\nChromePDF provides a function that accepts an html string, plus a dict of page parameters, and other settings, and returns the bytes containing a PDF:\n\n```\npdf_bytes = generate_pdf(html_string, pdf_kwargs, **kwargs)\n```\n\nAs of version 1.4, ChromePDF can also be run from the command line.\n\n```\npython -m chromepdf generate-pdf --chrome-path=/usr/bin/google-chrome path/to/input.html path/to/output.pdf\n```\n\nBecause it renders via Chrome, it supports a wide range of CSS and HTML tags that should display the same as if you used Chrome to view the HTML itself.\n\nChromePDF can take advantage of [Django](https://pypi.org/project/Django/) settings for configuration, but Django is not a required dependency.\n\nOfficial ChromePDF releases [are available on PyPI](https://pypi.org/project/django-chromepdf/).\n\n## Installation\n\n**1. Install ChromePDF via pip.**\n\nThe latest version can be installed via PyPI. This will also install Selenium, the only direct dependency (Selenium versions 3 and 4 are supported; 3 will be used if already present, otherwise will install 4). \n\nYou may view the [Changelog](https://github.com/imsweb/django-chromepdf/blob/master/CHANGELOG.md) for a list of all ChromePDF version changes. ChromePDF uses [semantic versioning](https://semver.org/) for its release numbering. You are encouraged to pin your requirements to a Major.Minor version in a manner that will also receive Bugfix updates like so:\n```\npip install django-chromepdf~=1.4.0\n```\n\n**2. Set the location of your Chrome executable.** This can be done in one of two ways:\n\n* In your Django settings, set `CHROMEPDF['CHROME_PATH']` to the full path of the executable (E.G., `r'C:\\Program Files (x86)\\Google\\...\\chrome.exe'`)\n* OR, pass `chrome_path` as a keyword argument to the `generate_pdf()` function.\n\n## About Chromedrivers\n\nA chromedriver executable is necessary to interface between Selenium and Chrome. ChromePDF will automatically check the version of your Chrome binary and download the required chromedriver [from the Chrome website](https://chromedriver.chromium.org/downloads) if it doesn't exist, into your `site-packages/chromepdf/chromedrivers/` folder. If the Chrome binary ever gets upgraded, ChromePDF will realize this and download the required driver for it.\n\nYou may disable these automatic downloads in the following way:\n* In your Django settings, set `CHROMEPDF['CHROMEDRIVER_DOWNLOADS']` to False\n* OR, pass a `chromedriver_downloads=False` argument to `generate_pdf()`\n\nYou may also specify a chromedriver path manually. This is recommended if you disable downloads:\n* In your Django settings, set `CHROMEPDF['CHROMEDRIVER_PATH']` to the full path of the executable (E.G., `r'C:\\Users\\myuser\\...\\chromedriver_win32\\chromedriver.exe'`)\n* OR, pass a `chromedriver_path` argument to `generate_pdf()` containing the path.\n* OR, if both of the above are not set, and you've disabled downloads, and if your chromedriver is in your `PATH` environment variable, then Selenium should be able to find it automatically.\n\n## Example: `generate_pdf()`\nNote: `generate_pdf()` cannot include external files including CSS. You must include all your CSS within `<style>` tags or as inline styles.\n\n```python\n# NOTE: This example assumes that you've set Django's settings.CHROMEPDF['CHROME_PATH'] = '(path to your Chrome instance)'\nfrom chromepdf import generate_pdf \n\nwith open('myfile.html','r') as f:\n    html_string = f.read()\n\npdf_kwargs = {\n    'paperFormat': 'A4',\n    'marginTop': '2.5cm',\n    'marginLeft': '2cm',\n    'marginRight': '2cm',\n    'marginBottom': '3.5cm',\n    'displayHeaderFooter': True,\n    'headerTemplate': '',\n    'footerTemplate': '''\n        <div style='font-size: 12px; width: 100%; padding: 0; padding-left: 2cm; padding-bottom: 1cm; margin: 0; '>\n            Page <span class='pageNumber'></span> of <span class='totalPages'></span>\n        </div>\n    ''',\n}\npdf_bytes = generate_pdf(html_string, pdf_kwargs)\n\nwith open('myfile.pdf', 'wb') as file:\n    file.write(pdf_bytes)\n```\n\n## Example: Command-Line Usage\nChromePDF can generate PDFs from the command-line. This method will not rely on Django settings. Example syntax:\n```\n# Convert file.html into file.pdf and place in the same directory\npython -m chromepdf generate-pdf path/to/file.html [kwargs]\n\n# Convert file.html and place the output PDF file at a specific path.\npython -m chromepdf generate-pdf path/to/file.html path/to/output.pdf [kwargs]\n```\nKeyword arguments for command-line usage are almost identical to `generate_pdf()` keyword arguments:\n```\n--chrome-path=path/to/google-chrome\n--chromedriver-path=path/to/chromedriver\n--chromedriver-downloads=0 # 0 or 1\n--chrome-args=\"--arg1 --arg2\" # Always use quotes to avoid misinterpreting as commands. \n--pdf-kwargs-json=path/to/file.json # JSON file containing a dict of values to pass to pdf_kwargs\n```\nThe recommended usage is to pass a `--chrome-path`, and let ChromePDF handle the chromedriver downloads automatically.\n```\npython -m chromepdf generate-pdf --chrome-path=/usr/bin/google-chrome path/to/file.html path/to/output.pdf\n```\nThe command will have a return code of zero on success, and nonzero on failure.\n\n## Django Settings\n\nYou can specify default settings in your Django settings file, if desired, via a `CHROMEPDF` settings. Anything passed via the `pdf_kwargs` argument will override the `PDF_KWARGS` settings.\n```python\n# settings.__init__.py\n\nCHROMEPDF = {\n    'CHROME_PATH': r'C:\\Program Files (x86)\\Google\\...\\chrome.exe',\n    'CHROME_ARGS': [], # Optional list of command-line argument strings to pass to Chrome when rendering a PDF.\n    'CHROMEDRIVER_PATH': None, # will rely on downloads instead\n    'CHROMEDRIVER_DOWNLOADS': True, # automatically download the correct chromedriver for the chrome path\n    'PDF_KWARGS': {\n        'paperFormat': 'A4',\n        'marginTop': '2.5cm',\n        'marginLeft': '2cm',\n        'marginRight': '2cm',\n        'marginBottom': '3.5cm',\n    }\n}\n```\n\n\n## PDF_KWARGS Options\n\nThe `pdf_kwargs` argument to `generate_pdf()` lets you specify all the arguments for Chrome's `Page.printToPDF` API. Its API can be viewed here:\n\n[Page.printToPDF API](https://chromedevtools.github.io/devtools-protocol/1-3/Page/#method-printToPDF) (url is funky. If you get a 404, try reloading/refreshing)\n\nSome shortcut parameters are provided by `generate_pdf()` for convenience. Here is a list of all the options:\n\nLayout:\n*  **scale**: Scale of the PDF. Default `1`.\n*  **landscape**: `True` to use landscape mode. Default `False`.\n\nPage Dimensions:\n*  **paperWidth**: Width of the paper, in inches. Can also use some CSS string values, like `'30cm'`. Default: `8.5`\n*  **paperHeight**: Height of the paper, in inches. Can also use some CSS string values, like `'30cm'`. Default: `11`\n*  **paperFormat**: A string indicating a paper size format, such as `'letter'` or `'A4'`. Case-insensitive. This will override `paperWidth` and `paperHeight`. Not part of `Page.printToPDF` API.  Provided for convenience.\n\nContent:\n*  **displayHeaderFooter**: `True` to display header and footer. Default `False`.\n*  **headerTemplate**: HTML containing the header for all pages. Default is an empty string. You may pass html tags with specific classes in order to insert values. For example, `<span class='title'></span>` would insert the the title.\n   * date: formatted print date \n   * title: document title \n   * url: document location \n   * pageNumber: current page number \n   * totalPages: total pages in the document \n* **footerTemplate**: HTML containing the footer for all pages. Default is an empty string. You may pass html tags with specific classes in order to insert values (same as above)\n* **printBackground**: `True` to print background graphics. Default `False`.\n\nMargins:\n*  **margin**: Shortcut used to set all four margin values at once. Not part of `Page.printToPDF` API.  Provided for convenience.\n*  **marginTop**: Top margin. Default: `'1cm'`\n*  **marginBottom**: Bottom margin. Default: `'1cm'`\n*  **marginLeft**: Left margin. Default: `'1cm'`\n*  **marginRight**: Right margin. Default: `'1cm'`\n\nPage Ranges:\n*  **pageRanges**: String indicating page ranges to use. Example: `'1-5, 8, 11-13'`\n*  **ignoreInvalidPageRanges**: If `True`, will silently ignore invalid 'pageRanges' values. Default `False`.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imsweb/django-chromepdf",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-chromepdf",
    "package_url": "https://pypi.org/project/django-chromepdf/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-chromepdf/",
    "project_urls": {
      "Changelog": "https://github.com/imsweb/django-chromepdf/blob/master/CHANGELOG.md/",
      "Homepage": "https://github.com/imsweb/django-chromepdf",
      "Source": "https://github.com/imsweb/django-chromepdf/"
    },
    "release_url": "https://pypi.org/project/django-chromepdf/1.4.0/",
    "requires_dist": [
      "selenium (<5,>=3)"
    ],
    "requires_python": "~=3.6",
    "summary": "A small Python 3 library that uses Selenium and Google Chrome to convert HTML into a PDF.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16978572,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50d130a33b84cf9c41e08c24047812019702d76a7c880a0e1eccb62f93ad96dd",
        "md5": "f2f2d576b9cc914c74e2198c34b5fb72",
        "sha256": "2252c9f76ae68e0ddf57d47d8592291b921607136daa88cd144c2466033f1461"
      },
      "downloads": -1,
      "filename": "django_chromepdf-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2f2d576b9cc914c74e2198c34b5fb72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 21167,
      "upload_time": "2022-09-19T17:57:48",
      "upload_time_iso_8601": "2022-09-19T17:57:48.466854Z",
      "url": "https://files.pythonhosted.org/packages/50/d1/30a33b84cf9c41e08c24047812019702d76a7c880a0e1eccb62f93ad96dd/django_chromepdf-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0539ef7ab745f9d73e61ac4088e3680a9673de3efab84e5c452f3320e963c790",
        "md5": "e73ba049c8f0777af011816fa88c2ef6",
        "sha256": "e4da23de37d201ec15b30c6ed4c0688e39eff2d34fcc0a46d1df5f736635745a"
      },
      "downloads": -1,
      "filename": "django-chromepdf-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e73ba049c8f0777af011816fa88c2ef6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 20989,
      "upload_time": "2022-09-19T17:57:50",
      "upload_time_iso_8601": "2022-09-19T17:57:50.507341Z",
      "url": "https://files.pythonhosted.org/packages/05/39/ef7ab745f9d73e61ac4088e3680a9673de3efab84e5c452f3320e963c790/django-chromepdf-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}