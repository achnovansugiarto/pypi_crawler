{
  "info": {
    "author": "Dieter Maurer",
    "author_email": "dieter@handshake.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Zope2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "This package contains extensions for ``zope.schema``.\n\n=======\nModules\n=======\n\nverify\n======\n\nA companion to ``zope.interface.verify`` for the schema part of\ninterfaces.\n\nIt contains the function\n``verify_schema(``\\ *iface*, *obj*, *context*\\ ``=None``, *check_declaration*\\ ``=True)``\nwhich verifies that *obj* satisfies the schema part of interface *iface*.\nSchema fields need to get bound to a context before they can be validated.\n*context* specifies this context and defaults to *obj*.\n*check_declaration* checks that *obj* declares to privide *iface*.\n\nschema\n======\n\nThe main content is the mixin class ``SchemaConfigured``. It supports\nconfiguration according the schema part of the interfaces implemented\nby the ``SchemaConfigured`` derived class. If you want to\ncontrol from which interfaces the schema is derived,\nyou can use the class attribute ``SC_SCHEMAS``: its value should be\n``None`` (derive schema automatically from the implemented interfaces),\na single interface or a tuple of interfaces. Taking explicit control\nover the interfaces used to determine the schema is especially important\nfor Zope 2 schema configured content classes (as their base\nclass `OFS.SimpleItem.SimpleItem` implements a huge number of\ninterfaces whose fields you likely do not want in your schema).\n\nThe mixin class ``SchemaConfiguredEvolution`` provides support\nfor schema evolution for (ZODB) persistent objects. Its ``__setstate__``\nadds missing attributes to the object such that you can add new fields\nto your schema and still find all corresponding attributes on the\nrespective objects even when those have been created before the extension.\nNote: in order for ``SchemaConfiguredEvolution`` to be effective, it must\ncome early in the method resolution order (``mro``)\n(before ``persistent.Persistent``).\nThat's why is is a separate class and its feature not included\nin ``SchemaConfigured`` itself (there may be good reasons\nto have ``SchemaConfigured`` late in the ``mro``).\nAs an alternative to the use of ``SchemaConfiguredEvolution``,\nyou can use default values defined on class level for new fields.\n\nOccasionally, functions ``schemaitems`` and ``schemadict`` might be usefull.\nThey extract\nthe schema part of an interface or interface specification as\na list of id, field pairs or a dictionary, respectively.\n\nThe field ``Object`` is a replacement for ``zope.schema.Object``. The\nlatter lacks field information in validation errors\n(https://bugs.launchpad.net/zope.schema/+bug/620324) which makes identification\nof the affected fields unnecessarily difficult. Occasionally, one wants\nto suppress the check that a validated object explicitly declares\nto provide the interface. ``Object`` has the additional\nproperty ``check_declaration`` to control this (defaults to ``True``).\n\n\npropertymanager\n===============\n\nThis module implements a schema based ``OFS.PropertyManager.PropertyManager``\nsubclass. The ``_properties`` attribute describing the properties is\nnot maintained on the class or its instances but derived from\nthe provided (respectively implemented) schemas. For the moment,\nproperties cannot be extended on an instance based level (other than by\nproviding another schema).\n\n``zope.schema`` uses unicode to represent text. ``PropertyManager``\ncan in principle support unicode properties. However, due to a\nbug/weakness, the property management page handles them correctly\nonly, when ``management_page_charset`` is not defined or has\nvalue ``UTF-8`` (note the upper case spelling!). We use unicode\nproperties by default unless ``management_page_charset.upper()`` yields\na value different from ``UTF-8``. We also provide a mixin class\n``WorkaroundSpelling_management_page_charset`` to work around Zope's\nstupid insistence on upper case spelling for ``management_page_charset``.\n\nFor the moment, the following field types are supported:\n``Text``, ``TextLine``, ``Bytes``, `BytesLine``, ``Bool``, ``Int``,\n``Float`` and ``List`` with a value type of ``TextLine`` or ``BytesLine``.\nOther types will raise ``NotImplementedError``.\n\nThe module has been implemented to leverage ``dm.zope.generate``.\nAn alternative would have been the implementation of the generation facilities\nbased on \"zope.formlib\" and the use of so called add forms. Depending\non experience, I may switch to this alternative.\n\n\nform\n====\n\nThe module defines default edit (``SchemaConfiguredEditForm``)\nand display (``SchemaConfiguredDisplayForm``) forms for\n``dm.zope.schema.schema.SchemaConfigured``.\n\nIt depends on ``zope.formlib``.\n\n\nwidget\n======\n\nProvides display and edit widgets for ``Timedelta`` fields,\na decent display widget for ``Password`` fields (the default\ndisplays passwords in cleartext) and an input widget for ``Password``\nthat does not force you to provide the password value whenever you edit the form.\n\nIt depends on ``zope.app.form`` in older Zope versions and on\n``zope.formlib`` in newer ones.\n\n\nz2\n==\n\nThis subpackage combines schema related and\nZope 2 functionality. In newer Zope versions, it depends on\n``five.formlib``.\n\n\nform\n----\n\nThe module defines default edit (``SchemaConfiguredEditForm``)\nand display (``SchemaConfiguredDisplayForm``) forms for\n``dm.zope.schema.schema.SchemaConfigured`` for use in Zope 2.\n\nIt depends on ``zope.formlib``.\n\n\n\nconstructor\n-----------\n\nThis module contains an add form class ``SchemaConfiguredAddForm``\nand a factory ``add_form_factory``\nfor the generation of an add form (called \"constructor\" by Zope 2)\nfor ``dm.zope.schema.schema.SchemaConfigured`` based classes.\nThe generated add form is usually used as part of the ``constructors``\nparameter to ``registerClass``.\n\n``add_form_factory`` has the parameters:\n\n  =============  ===========================             ======================================\n  name           default                                 description\n  =============  ===========================             ======================================\n  *class_*                                               the class to generate the form for\n  *title*        Create instance of *class_*             the title shown in the form\n  *description*  *class_*\\ ``.__doc__``                  the documentation shown in the form\n  *form_class*   ``SchemaConfiguredAddForm``             form class to be used\n  =============  ===========================             ======================================\n\n``add_form_factory`` generates a ``zope.formlib`` form with fields\ndefined by the implemented schemas of\n``dm.zope.schema.schema.SchemaConfigured`` class *class_*.\n\n\nThis module is similar to ``dm.zope.generate.constructor``. However,\nit works for ``SchemaConfigured`` based classes while the latter\nsupports ``PropertyManager`` based classes.\n\n\ntemplate\n--------\n\nProvides the view page template ``form_template`` able to view and edit Zope 2\nschema configured content objects within the standard ZMI interface.\n\n\n\n========\nExamples\n========\n\nSetup: It defines two schemas ``S1`` and ``S2``, an\ninterface ``I`` and a class ``C`` deriving from ``SchemaConfigured``\nimplementing the schemas and the interface.\n\n>>> from zope.interface import Interface, implements, providedBy\n>>> from zope.schema import Int\n>>> \n>>> from dm.zope.schema.schema import SchemaConfigured\n>>> from dm.zope.schema.verify import verify_schema\n>>> \n>>> class S1(Interface): i1 = Int(default=0)\n... \n>>> class S2(Interface): i2 = Int(default=1)\n... \n>>> class I(Interface):\n...   def method(): pass\n... \n>>> class C(SchemaConfigured):\n...   implements(S1, S2, I)\n...   def method(self): pass\n... \n\n\n``C`` instances have attributes corresponding to the schema fields.\nIf no arguments are given for the constructor, they get the field default\nas value. Provided (keyword!) arguments override the defaults.\n\n>>> c = C()\n>>> c.i1\n0\n>>> c.i2\n1\n>>> c = C(i1=5)\n>>> c.i1\n5\n\nThe constructor rejects keyword arguments not defined in the schema\nin order to quickly detect spelling errors. However, this hampers\nthe use of ``super`` in the class hierarchy for the ``__init__`` method.\nMaybe, future versions will provide a means to control this check.\n\n>>> c = C(x=5)\nTraceback (most recent call last):\n  ...\nTypeError: non schema keyword argument: x\n\nIf the field values are appropriate, ``C`` instances provide the\nschemas (as verified by ``verify_schema``). Otherwise, ``verify_schema``\nwill raise an exception. This example demonstrates also the elementary use\nof ``verify_schema``.\n\n>>> verify_schema(S1, c)\n>>> c.i1=None\n>>> verify_schema(S1, c)\nTraceback (most recent call last):\n  ...\nzope.schema.interfaces.WrongContainedType: [('i1', RequiredMissing())]\n\nWe can create an edit (or display) form for our objects. Form fields\nare automatically created for our schema fields.\nThe form classes have an ``customize_fields`` method you can override\nto provide custom fields and/or widgets.\n\nSimilar functionality is available for Zope 2 in the ``z2`` subpackage.\n\n>>> from zope.publisher.browser import TestRequest\n>>> from dm.zope.schema.form import SchemaConfiguredEditForm\n>>>\n>>> form = SchemaConfiguredEditForm(c, TestRequest())\n>>> list([f.__name__ for f in form.form_fields])\n['i1', 'i2']\n\n\n=======\nHistory\n=======\n\n2.0\n\n  form support\n\n  Zope 2 constructor support",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/dm.zope.schema",
    "keywords": "application development zope schema",
    "license": "ZPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dm.zope.schema",
    "package_url": "https://pypi.org/project/dm.zope.schema/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dm.zope.schema/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/dm.zope.schema"
    },
    "release_url": "https://pypi.org/project/dm.zope.schema/2.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "'zope.schema' extensions",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11610576,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3cdb3a2b7dbacaa19aa968e6154f7a3fbfa0767169672e01ae9e80c08d6426c7",
        "md5": "a121f2cc0d8f64082d89244d01f4f697",
        "sha256": "04915b0a1477b34c3eaa2aed3abb6532f28b337600045b54b569887093ae7551"
      },
      "downloads": -1,
      "filename": "dm.zope.schema-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a121f2cc0d8f64082d89244d01f4f697",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17372,
      "upload_time": "2012-08-06T20:38:20",
      "upload_time_iso_8601": "2012-08-06T20:38:20.128335Z",
      "url": "https://files.pythonhosted.org/packages/3c/db/3a2b7dbacaa19aa968e6154f7a3fbfa0767169672e01ae9e80c08d6426c7/dm.zope.schema-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}