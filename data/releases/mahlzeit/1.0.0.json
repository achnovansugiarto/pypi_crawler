{
  "info": {
    "author": "Maximilian Eschenbacher",
    "author_email": "qbzioxli@m.t.kajt.de",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Mahlzeit food accounting\n\nYou're buying groceries and cooking food for and share them with friends or colleagues.\nNext time, a different colleague buys and cooks food. In between, a bank note changes hands.\nWho owes how much money after a week's (or more) worth of buying, cooking and eating?\n\nIn order to track the balances of all participants, all transactions (purchases as well as cash\nexchanging hands or bank accounts) need to be accounted using the `Mahlzeit` class and\n`Mahlzeit.einkauf()` and `Mahlzeit.bezahlung()` methods.\n\nFor viewing the balances (and transaction), the following methods exist:\n\n- As python dict via `Mahlzeit.calc()` with a simple mapping of the overall account balance:\n  `[account]balance`\n- Sorted and formatted directly on the console via `Mahlzeit.pretty(file=sys.stdout)`\n- In a  [`ledger`-compatible format](https://hledger.org/hledger.html#journal-format) (which\n  requires dates and descriptions to be set for each transaction) via\n  `Mahlzeit.ledger(file=sys.stdout, prec=3)`\n\n# API and usage\n\nTransactions are grouped within a `Mahlzeit` object:\n\n    from Mahlzeit import Mahlzeit\n    m = Mahlzeit()\n\nEach purchase is recorded as call to `Mahlzeit.einkauf(amount, eaters, payer, datum=None, description=None, comment=None)`:\n\n    m.einkauf(10, ('Alice', 'Bob'), 'Alice')\n\n`eaters` and `payer` may be a single string, tuple or list or strings or `Esser` objects.\n\nChange in cash can be recorded with a call to `Mahlzeit.bezahlung(payer, payee, amount, datum=None, description=None, comment=None)`:\n\n    m.bezahlung('Bob', 'Alice', 5)\n\nIf `ledger`-compatible output is desired, each transaction (`einkauf` and `bezahlung`) must be\nannotated with a date and description:\n\n    m.einkauf(10, ('Alice', 'Bob'), 'Alice', datum='2022/03/16', description='Kebap')\n    m.bezahlung('Bob', 'Alice', 5, datum='2022/03/17', description='Payback')\n\nWhich can be used in a context to group several transactions within the same annotation:\n\n    with m(datum='2022/03/16', description='Kebap'):\n        m.einkauf(10, ('Alice', 'Bob'), 'Alice')\n        m.bezahlung('Bob', 'Alice', 5)\n\nQuick console output:\n\n    m.pretty()\n\nOr `ledger` output:\n\n    m.journal()\n\nto be interactively used as\n\n    hledger -f <(python3 main.py) balance\n\nWe feature a convenience wrapper for \"weighing\" eaters. In some cases you need to weigh eaters\nin case the is a couple at the weight of `2` or `0.5`. Instantiate a object of class\n`Esser(name: str, weight: float)`:\n\n    from mahlzeit import Mahlzeit, Esser as E\n    m = Mahlzeit()\n    m.einkauf(15, ('Laura', 'Nils', E('Katja_Martin', 2), 'Max'), 'Katja_Martin')\n    m.pprint()\n\n# Example integration into a personal ledger (ref. plaintextaccounting)\n\nThis example explains how to integrate the `--ledger` output of the Mahlzeit module into your\npersonal journal. It assumes that you're translating the Mahlzeit account for eating\n`$you:einkauf:esser` to your personal expense account e.g. `expenses:food:work`. Account money\nyou spend for you and your colleagues as `liabilities:kollegen`.\n\n```Makefile\n.PHONY: auto-mahlzeit.journal\n\nauto-mahlzeit.journal:\n\thledger -f <(echo -e \"= expenses:food:work\\n    unused    *1\\n    liabilities:kollegen  *-1\\n\"; MAHLZEIT_PLACES=2 venv/bin/python main.py --ledger) \\\n\t--alias=meschenbacher:einkauf:esser=expenses:food:work \\\n\t--alias=/meschenbacher:bezahlung:bezahlt*er/=unused \\\n\t--alias=/meschenbacher:einkauf:bezahler/=unused \\\n\t--alias=/.*:\\(einkauf\\|bezahlung\\):.*/=unused \\\n\t--begin 2022-04-09 \\\n\tprint --auto > $@\n```\n\nand include it into your journal via `include`.\n\n\n# Installation\n\nVia pip\n\n    pip install mahlzeit\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/meschenbacher/mahlzeit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mahlzeit",
    "package_url": "https://pypi.org/project/mahlzeit/",
    "platform": null,
    "project_url": "https://pypi.org/project/mahlzeit/",
    "project_urls": {
      "Homepage": "https://gitlab.com/meschenbacher/mahlzeit"
    },
    "release_url": "https://pypi.org/project/mahlzeit/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Mahlzeit Plaintextaccounting fÃ¼r Essen und Anderes",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16198573,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "159b0e53e4aa9279df1e9af618a28c2d6088249857f60314f46f8848fa0d87e8",
        "md5": "19c2b6bafd0682f216328148453ed6a3",
        "sha256": "55bbcc05a729b432b91b9eb98da5d02a5d381dd0c6ea2586a337bf5b550e1259"
      },
      "downloads": -1,
      "filename": "mahlzeit-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "19c2b6bafd0682f216328148453ed6a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 17314,
      "upload_time": "2022-12-23T16:14:40",
      "upload_time_iso_8601": "2022-12-23T16:14:40.426234Z",
      "url": "https://files.pythonhosted.org/packages/15/9b/0e53e4aa9279df1e9af618a28c2d6088249857f60314f46f8848fa0d87e8/mahlzeit-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}