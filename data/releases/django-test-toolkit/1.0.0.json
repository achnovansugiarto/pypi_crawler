{
  "info": {
    "author": "normal-wls",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django Test Toolkit\n\n基于Django提供的一款测试工具箱。\n\n## Features\n- 支持模型测试数据生成\n  - 支持根据对应数据模型快速生成测试数据\n  - 支持自定义模型字段生成方式\n  - 支持配置数据生成时默认值的采用比例\n  - 支持配置唯一字段数据生成重复值时的重试次数\n- 支持快速组合多种生命周期钩子\n  - 内置account、blueking和drf等多种钩子\n  - 支持快速自定义钩子并组合使用\n\n## Quick Start\n\n#### 数据生成示例\n\n**定义模型数据生成工厂类**\n\n最简单的情况，直接基于字段进行生成：\n\n``` python\nfrom django_test_toolkit.data_generation.faker_generator import DjangoModelFakerFactory\n\nclass ClockedTaskFactory(DjangoModelFakerFactory):\n    class Meta:\n        model = ClockedTask\n```\n\n如果需要对Model中的特定字段进行自定义，可以对Factory类进行修改：\n\n``` python\nimport factory\n\nclass ClockedTaskFactory(DjangoModelFakerFactory):\n    # 开发者自定义特定字段值\n    notify_receivers = \"fixed value\"\n    # 外键字段需要进行指定\n    foreign_field = factory.SubFactory(ForeignModelFactory)\n    \n    class Meta:\n        model = ClockedTask\n```\n\n**通过工厂类快速生成数据并插入测试数据库**\n\n``` python\nclocked_tasks = ClockedTaskFactory.create_batch(10)\n```\n\n此时会返回10个clocked_tasks对象，可供后续进行操作。\n\n该步骤可以在测试准备阶段进行，如在setUpTestData等。\n\n#### 接口测试示例（内置生命周期Mixin使用）\n\n``` python\nfrom django_test_toolkit.testcases import ToolkitApiTestCase\nfrom django_test_toolkit.mixins.account import SuperUserMixin\nfrom django_test_toolkit.mixins.blueking import LoginExemptMixin, StandardResponseAssertionMixin\nfrom django_test_toolkit.mixins.drf import DrfPermissionExemptMixin\n\nclass ClockedTaskTestCase(\n    ToolkitApiTestCase,\n    SuperUserMixin,\n    LoginExemptMixin,\n    DrfPermissionExemptMixin,\n    StandardResponseAssertionMixin,\n):\n    # DrfPermissionExemptMixin需要指定，用于豁免对应权限认证\n    VIEWSET_PATH = \"gcloud.clocked_task.viewset.ClockedTaskViewSet\"\n    \n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n        # 生成数据并插入数据库\n        cls.clocked_tasks = ClockedTaskFactory.create_batch(10)\n        # 开发者自定义数据准备逻辑...\n    \n    def test_list_action_fetch_all_objects(self):\n        url = reverse(\"clocked_task-list\")\n        response = self.client.get(url)\n        # 由StandardResponseAssertionMixin提供，用于快速判断是否符合蓝鲸标准下请求成功的返回格式\n        self.assertStandardSuccessResponse(response)\n        # 判断list接口返回条数是否等于数据生成的条数\n        self.assertEqual(len(response.data[\"data\"]), len(self.clocked_tasks))\n\n    def test_retrieve_action_fetch_specific_object(self):\n        # 获取生成的第一条数据的id\n        test_clocked_task = self.clocked_tasks[0]\n        url = reverse(\"clocked_task-detail\", args=[test_clocked_task.id])\n        response = self.client.get(url)\n        self.assertStandardSuccessResponse(response)\n        # 判断retrieve接口请求的数据是否符合预期\n        self.assertEqual(test_clocked_task.task_name, response.data[\"data\"][\"task_name\"])\n    \n```\n\n**注意：django_test_toolkit.testcases中的ToolkitApiTestCase或ToolkitTestCase需要放在继承顺序的第一位，将各个生命周期相关Mixin放在后面继承。**\n\n#### 内置Mixin介绍\n\n| Mixin名称                      | 相关领域    | 作用                                    | 涉及钩子                       | 配置项                                                       |\n| ------------------------------ | ----------- | --------------------------------------- | ------------------------------ | ------------------------------------------------------------ |\n| SuperUserMixin                 | 登陆        | 以admin身份登陆系统并进行后续client请求 | setUpTestData、setUp、tearDown | 无                                                           |\n| DrfPermissionExemptMixin       | DRF ViewSet | 用于快速豁免ViewSet权限控制             | setUp                          | VIEWSET_PATH：测试类变量， 以字符串形式描述对应要豁免的ViewSet的路径 |\n| LoginExemptMixin               | 蓝鲸        | 豁免蓝鲸登陆校验                        | setUp                          | 无                                                           |\n| StandardResponseAssertionMixin | 蓝鲸        | 提供蓝鲸标准返回格式快速判断            | 无                             | 无                                                           |\n\n\n\n## Extensions\n\n#### 自定义生命周期Mixin\n\n如果内置的Mixin无法满足需求，开发者可以基于LifeCycleHooksMixin进行开发，这样就可以让特定的逻辑与内置Mixin一样在对应的生命周期中被自动执行，可以大量复用于各个TestCase测试类中，也可实现多个Mixin的组合使用。\n\n下面以内置生命周期Mixin：SuperUserMixin为例介绍如何进行自定义：\n\n``` python\nfrom django_test_toolkit.mixins.base import LifeCycleHooksMixin\n\n\nclass SuperUserMixin(LifeCycleHooksMixin):\n    MOCK_SUPERUSER_NAME = \"admin\"\n    MOCK_SUPERUSER_PASSWORD = \"admin\"\n\n    @classmethod\n    def setUpTestData(cls):\n        user_model = get_user_model()\n        try:\n            cls.superuser = user_model.objects.get(username=cls.MOCK_SUPERUSER_NAME)\n        except user_model.DoesNotExist:\n            cls.superuser = user_model.objects.create(\n                username=cls.MOCK_SUPERUSER_NAME,\n                password=cls.MOCK_SUPERUSER_PASSWORD,\n                is_superuser=True,\n                is_staff=True,\n                is_active=True,\n            )\n\n    def setUp(self):\n        self.client.force_login(user=self.superuser)\n\n    def tearDown(self):\n        self.client.logout()\n```\n\n1. 需要继承LifeCycleHooksMixin\n2. 支持Django Test默认提供的生命周期钩子：setUpTestData、setUpClass、tearDownClass、setUp、tearDown\n3. 在特定钩子中进行开发\n\n\n\n#### 数据生成配置项\n\n对于模型字段数据生成，django_test_toolkit中提供的默认配置：\n\n``` python\nDEFAULT_FIELD_TO_FAKER_CONFIG = {\n    \"fields\": {\n        \"CharField\": {\"provider\": \"text\", \"processing_func\": text_provider_char_field_processing},\n        \"TextField\": {\"provider\": \"text\"},\n        \"IntegerField\": {\"provider\": \"random_int\", \"processing_func\": random_int_provider_integer_field_processing},\n        \"DateTimeField\": {\n            \"provider\": \"date_time_this_month\",\n            \"extra_kwargs\": {\"tzinfo\": pytz.utc, \"before_now\": True},\n        },\n    },\n    \"default_value_factor\": DEFAULT_DEFAULT_VALUE_FACTOR,\n    \"unique_field_duplicate_retry_tolerance\": DEFAULT_RETRY_TOLERANCE,\n}\n```\n\n开发者可以在settings中设置变量**TEST_TOOLKIT_FAKER_CONFIG**来进行自定义配置，各配置项的含义如下表：\n\n| 配置项                                    | 默认配置                                                     | 配置类型               | 含义                                                         |\n| ----------------------------------------- | :----------------------------------------------------------- | ---------------------- | ------------------------------------------------------------ |\n| fields                                    | 默认包含:<br />CharField<br />TextField<br />IntegerField<br />DateTimeField | dict                   | 各种模型字段的数据生成方式配置                               |\n| fields.xxxField                           | 可包含:<br />provider(必填)<br />user_provider_class(选填)<br />processing_func(选填)<br />extra_kwargs(选填)<br />三个字段 | dict                   | 对应模型字段的数据生成方式具体配置                           |\n| fields.xxxField.provider                  | 对应关系:<br />CharFiled: text<br />TextField: text<br />IntegerField:random_int<br />DateTimeField:date_time_this_month | str                    | 对应Faker的provider类型，可参考https://faker.readthedocs.io/en/master/providers/baseprovider.html，也可自定义 |\n| fields.xxxField.user_provider_class(选填) | 无默认配置                                                   | faker.Provider类及子类 | 用户自定义provider类                                         |\n| fields.xxxField.processing_func(选填)     | 对应配置:<br />CharField: 控制字段数据生成长度<br />IntegerField: 控制字段数据生成值区间 | 函数对象               | 对执行过程中才能确定的模型字段数据生成规则进行一些定制化开发，返回一个字典，将在Faker(provider).generate()中作为extra_kwargs参数 |\n| fields.xxxField.extra_kwargs(选填)        | 对应配置:<br />DateTimeField: 默认时区为utc, 时间早于当前时间 | dict                   | 对执行前即可确认的数据生成规则进行配置，将在Faker(provider).generate()中作为extra_kwargs参数 |\n| faker_data_locale(选填)                   | faker默认值，en_US                                           | str                    | faker数据生成默认使用的locale，需要对应的provider支持        |\n| default_value_factor                      | 0.8                                                          | float                  | 当模型字段配置默认值时生成数据采用默认值的比例               |\n| unique_field_duplicate_retry_tolerance    | 50                                                           | int                    | 当模型字段配置唯一属性时生成数据重复时的重试次数             |\n\n#### 数据生成自定义Provider\n\n基于faker.Provider，开发者可以定义适合业务特性的Provider来生成字段值。\n\n为了方便演示，这里以faker官方文档中的DynamicProvider为例:\n\n``` python\nfrom faker.providers import DynamicProvider\n\nmedical_professions_provider = DynamicProvider(\n    provider_name=\"medical_profession\",\n    elements=[\"dr.\", \"doctor\", \"nurse\", \"surgeon\", \"clerk\"],\n)\n```\n\n创建了自定义Provider之后，只需在配置项中指定对应的user_provider_class即可：\n\n``` python\nDEFAULT_FIELD_TO_FAKER_CONFIG = {\n    \"fields\": {\n        \"CharField\": {\"provider\": \"medical_profession\", \"user_provider_class\": medical_professions_provider},\n        ...\n    }\n    ...\n}\n```\n\n#### 数据生成自定义processing_func\n\n因为Model各个字段会有一些自身的约束，为了能让自动生成的数据满足这些约束，有时候需要在faker数据生成过程中添加一些字段的约束逻辑，比如int的取值区间等，下面以random_int_provider_integer_field_processing为例说明应该如何实现自定义processing_func:\n\n``` python\ndef random_int_provider_integer_field_processing(field):\n    \"\"\"传入model field对象作为参数, 返回约束参数字典，作为数据生成过程中的extra_kwargs\"\"\"\n    extra_kwargs = {}\n    # 从field的校验器中获取最大值和最小值，规定随机取值的区间\n    for validator in field.validators:\n        if validator.code in [\"min_value\", \"max_value\"]:\n            extra_kwargs[validator.code.replace(\"_value\", \"\")] = validator.limit_value\n    return extra_kwargs\n```\n\n\n## Roadmap\n\n- [版本日志](release.md)\n\n## Support\n\n- [蓝鲸论坛](https://bk.tencent.com/s-mart/community)\n- [蓝鲸 DevOps 在线视频教程](https://cloud.tencent.com/developer/edu/major-100008)\n- 联系我们，技术交流QQ群：\n\n<img src=\"https://github.com/Tencent/bk-PaaS/raw/master/docs/resource/img/bk_qq_group.png\" width=\"250\" hegiht=\"250\" align=center />\n\n\n## BlueKing Community\n\n- [BK-CI](https://github.com/Tencent/bk-ci)：蓝鲸持续集成平台是一个开源的持续集成和持续交付系统，可以轻松将你的研发流程呈现到你面前。\n- [BK-BCS](https://github.com/Tencent/bk-bcs)：蓝鲸容器管理平台是以容器技术为基础，为微服务业务提供编排管理的基础服务平台。\n- [BK-BCS-SaaS](https://github.com/Tencent/bk-bcs-saas)：蓝鲸容器管理平台SaaS基于原生Kubernetes和Mesos自研的两种模式，提供给用户高度可扩展、灵活易用的容器产品服务。\n- [BK-PaaS](https://github.com/Tencent/bk-PaaS)：蓝鲸PaaS平台是一个开放式的开发平台，让开发者可以方便快捷地创建、开发、部署和管理SaaS应用。\n- [BK-SOPS](https://github.com/Tencent/bk-sops)：标准运维（SOPS）是通过可视化的图形界面进行任务流程编排和执行的系统，是蓝鲸体系中一款轻量级的调度编排类SaaS产品。\n- [BK-CMDB](https://github.com/Tencent/bk-cmdb)：蓝鲸配置平台是一个面向资产及应用的企业级配置管理平台。\n\n## Contributing\n\n如果你有好的意见或建议，欢迎给我们提 Issues 或 Pull Requests，为蓝鲸开源社区贡献力量。\n\n[腾讯开源激励计划](https://opensource.tencent.com/contribution) 鼓励开发者的参与和贡献，期待你的加入。\n\n## License\n\n基于 MIT 协议， 详细请参考[LICENSE](LICENSE)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TencentBlueKing/django-test-toolkit",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-test-toolkit",
    "package_url": "https://pypi.org/project/django-test-toolkit/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-test-toolkit/",
    "project_urls": {
      "Homepage": "https://github.com/TencentBlueKing/django-test-toolkit"
    },
    "release_url": "https://pypi.org/project/django-test-toolkit/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Toolkit for test based on Django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13671103,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6baa06a973ddbcbfd17c10d829057d488adcb2b69691a54929a700aadd2c1bd9",
        "md5": "1a98a07bfd8f1470ddcc81447a8e9bfd",
        "sha256": "9bc65d1d41aaf26542231a961a5550bc3184161fbe3f0ebe18187ee3dd32e6e1"
      },
      "downloads": -1,
      "filename": "django-test-toolkit-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1a98a07bfd8f1470ddcc81447a8e9bfd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14699,
      "upload_time": "2022-03-30T07:29:38",
      "upload_time_iso_8601": "2022-03-30T07:29:38.264454Z",
      "url": "https://files.pythonhosted.org/packages/6b/aa/06a973ddbcbfd17c10d829057d488adcb2b69691a54929a700aadd2c1bd9/django-test-toolkit-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}