{
  "info": {
    "author": "DNEK",
    "author_email": "dnek.app@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Games/Entertainment :: Puzzle Games",
      "Topic :: Software Development :: Interpreters"
    ],
    "description": "# Mines\n\nAn esoteric language inspired by Minesweeper.\n\n- 日本語はこちら（[README_ja.md](README_ja.md)）。\n\n## Overview\n\nMines is a programming language in which programs are executed by operations that mimic the gameplay of Minesweeper.\n\n## Program description\n\nA Mines program consists of a field and an operation list in this order with a line break.\n\n**Field** is represented by a rectangular grid consisting of `.` and `*`.\nWhere `.` is a safe cell, and `*` is a mine cell.\n\n**Operation list** consists of one or more operations separated by `\\n`.\n\n**An operation** is represented by two integers separated by `,` or `;`, or `!`, or a blank line.\nBlank lines immediately after the field and at the end of the file are also counted as operations.\n\n**Two integers** indicate the column and row numbers from the top left of the field, and the delimiter indicates the mouse button to click.\nWhere `,` is a left click and `;` is a right click.\n\n**Column and row numbers** may be negative or point outside the range of the field.\nThese are converted into non-negative remainders divided by the width or height of the field, respectively.\n\n**`!`** indicates the flagging mode switch (see below).\n\nHalf-width whitespaces and characters in `\\t\\r\\f\\v` appearing in the program are ignored.\nAlso, strings from # to the end of the line are ignored.\nThis means that the program can contain **comments**.\n\nThe following is an example of a program with a 4x3 field and 5 operations, and the meaning of each operation.\n\n```\n.*.* #This is a comment.\n...*\n.**.\n0,0\n-1, -1 #Spaces are ignored.\n\n10;-10\n!\n```\n\n| Operation | Meaning |\n----|----\n| `0,0` | Left click on the top left cell. |\n| `-1,-1` | Right click on the bottom right cell (equal to `3,2` ). |\n|  | do nothing. |\n| `9;-10` | Right-click on the (9 % 4)th cell from the left and the (-10 % 3)th cell from the top (equal to `1;2` ). |\n| `!` | Switch the flagging mode. |\n\n## Program processing\n\nThe Mines interpreter has a **operation pointer** (OP), which by default points to the top of the operation list.\nThe interpreter performs an operation pointed by OP on the field and then advances the OP by one.\nAfter the bottom operation is performed, the OP returns to the top operation and continues operations.\n\nFor each operation, **an command** is selected and executed according to the result and the state of the cell in which the operation was performed.\n\nIf **game over** is occurred by an operation, the program does not terminate and the field returns to its initial state (no revealed cells and no flags) and the game resumes (the OP is not initialized).\n\nThe interpreter has **a stack** of signed integers for storage, which is manipulated by the commands.\nThe initial state of the stack is empty, and it can have an infinite number of values as long as the processing system allows.\n\nIn addition, the interpreter manages **the flagging mode**, which is initially off.\nIt is toggled between on and off by an operation of the flagging mode switch.\nGame over does not initialize the flag mode.\n\nAfter each command is executed, if \"each safe cell\" or \"each mine cell\" is opened one or more times throughout the entire gameplay, the program **terminates** (this behavior is different from game clear on a regular minesweeper).\n\n## Performance of operations\n\n**Left click** behaves just like it does in most minesweeper apps.\n\nLeft click on an unopened cell will open it.\nIf you open a mine, it's game over.\n\nLeft click on a revealed cell has no effect on the field, but some command may be executed.\n\n**Right click** also behaves like it does in many minesweeper apps.\n\nRight click on an unopened cell will put up a flag or remove it.\n\nRight click on a revealed cell will open all adjacent unopened cells if the number on the cell is equal to the number of flags standing around it.\nIf trying to open some mines, it's game over.\nThis operation is called \"Chord\" and in some apps, Chord is bound to a long press or other mouse button.\n\nIf a cell opened by either click is empty, the surrounding cells are also opened recursively (the flags standing in the cell being opened are removed and opened).\n\n**Flagging mode switch** is a feature that most mobile minesweeper apps have, and it behaves just as well.\nWhen the flagging mode is on, the left-click and right-click are treated swapped.\nFor example, left click on an unopened cell will put up a flag or remove it, and the command corresponding to it will be executed.\n\nNothing happens with an operation of **blank line** (the OP proceeds as usual).\n\n## Commands\n\nThe cell number \"0\" represents a blank cell and the number \"9\" represents a mine cell.\n\n\"Push\", \"pop\", etc. all refer to operations on the stack.\n\nThe first popped value in a command is \"p0\" and the next popped value is \"p1\".\n\n### Command errors\n\nWhen a command cannot be executed correctly because there are not enough values for pops in the stack or 0 division is attempted or so on, this is called **a command error**.\nIf a command error is likely to occur during the execution, it is treated as if there was no command and the OP proceeds to the next.\nNote that game over is not a command error.\n\nThe conditions for the occurrence of a command error except for insufficient number of pops are shown in the following tables.\n\n### Flagging mode switch\n\n| Command name | Pop count | Description | error condition |\n----|----|----|----\n| reverse | 0 | Reverse order of the elements in the entire stack. | - |\n\n### Left click on an unopened cell\n\n#### Flag is standing on the cell\n\n| Command name | Pop count | Cell number | Description | error condition |\n----|----|----|----|----\n| noop | 0 | Any (because not revealed) | Do nothing | - |\n\n#### Flag is not standing on the cell\n\n| Command name | Pop count | Cell number | Description | error condition |\n----|----|----|----|----\n| push(count) | 0 | 0 | Push the number of cells opened by this click (≧1) | - |\n| push(n) | 0 | 1〜8 | Push the number written in the cell | - |\n| reset(l) | 0 | 9 | Reset the field to its initial state and resume the game (stack and OP are not reset, this cell is regarded as opened) | - |\n\n### Right click on an unopened cell\n\n| Command name | Pop count | Cell number | Description | error condition |\n----|----|----|----|----\n| swap | 2 | Any (because not revealed) | Push p0, then push p1 | - |\n\n### Left click on an revealed cell\n\n| Command name | Pop count | Cell number | Description | error condition |\n----|----|----|----|----\n| pop | 1 | 0 | Pop | - |\n| positive | 1 | 1 | Push 1 if p0 is positive, else push 0 | - |\n| dup | 1 | 2 | Push p0 twice | - |\n| add | 2 | 3 | Push (p1 + p0) | - |\n| sub | 2 | 4 | Push (p1 - p0) | - |\n| mul | 2 | 5 | Push (p1 * p0) | - |\n| div | 2 | 6 | Push (p1 / p0) | 0 division |\n| mod | 2 | 7 | Push (p1 % p0) | 0 division |\n| perform(l) | 2 | 8 | Perform an operation of \"`p1,p0`\" | - |\n\n### Right click on an revealed cell\n\n#### Try to open one or more new cells (Chord)\n\n| Command name | Pop count | Result | Description | error condition |\n----|----|----|----|----\n| push(sum) | 0 | Success | Push the sum of the numbers written in the cells opened by this click | - |\n| reset(r) | Length of stack | Game over | Reset the field and the stack to their initial states and resume the game (OP is not reset, the cells are not regarded as opened) | - |\n\n#### Otherwise\n| Command name | Pop count | Cell number | Description | error condition |\n----|----|----|----|----\n| push(0) | 0 | 0 | Push 0 | - |\n| not | 1 | 1 | Push 1 if p0 is 0, else push 0 | - |\n| roll | 2 | 2 | Roll the values up to stack depth p1 p0 times (see \"Roll Details\" for details) | The absolute value of p1 exceeds the length of the stack |\n| in(n) | 0 | 3 | Take one integer-parsed value from the beginning of the standard input and push it | Can not parse |\n| in(c) | 0 | 4 | Take a single character from the standard input and push its Unicode value | Empty input |\n| out(n) | 1 | 5 | Output p0 to the standard output | - |\n| out(c) | 1 | 6 | Output a single character whose Unicode value is p0 to the standard output | Invalid Unicode value |\n| skip | 1 | 7 | Add p0 to the OP (loop if overflow occurs) | - |\n| perform(r) | 2 | 8 | Perform an operation of \"`p1;p0`\" | - |\n\n##### Roll details\n\nIf the stack is `1, 2, 3, 4` with p0 and p1 popped, a single rotation of a value up to a depth of 3 embeds the top value underneath and the stack becomes `1, 4, 2, 3`.\n\nIf the number of rotations is negative, for example, if the number of rotations is -1, the opposite manipulatation will be performed and it becomes `1, 3, 4, 2`.\n\nIf the depth is negative, e.g. one rotation, the stack is manipulated from the bottom and becomes `2, 3, 1, 4`.\n\n## Examples of implementation\n\nSee [examples/](examples) 。\n\n## Install\n\n```\npip3 install mines-esolang\n```\n\nMake sure it displays the version.\n\n```\nmines -V\n```\n\n## How to run the interpreter\n\nUsually do like this.\n\n```\n$ mines examples/hello.mines\n```\n\nYou can also run it directly from the source file.\n\n```\n$ python3 mines/mines.py examples/hello.mines\n```\n\nActivate the debug mode with `d`.\nThis outputs a table of numbers in each cell, the time taken to parse the code, and the time taken to run it.\n\n```\n$ mines examples/hello.mines -d\n```\n\nWhen the debug mode is active, the command, the stack and the field are output by `c`, `s` and `f` respectively after each operation.\nAlso, you can perform step executions at the number of operations specified by `l`.\n\n```\n$ mines examples/hello.mines -dcsfl 42\n```\n\nTo get input from a file, specify the file path with `i`.\n\n```\n$ mines examples/cat.mines -i README.md\n```\n\nTo specify a direct input, use `e`.\n\n```\n$ mines examples/add.mines -e \"1 2\"\n```\n\nYou can use `echo` or `cat` if you want.\n\n```\n$ echo -n \"meow\" | mines examples/cat.mines\n```\n\n## Author\n\n- **[DNEK](https://github.com/dnek)**\n\n### Related works\n\n- [Pietron](https://github.com/dnek/pietron) - Cross-platform IDE for Piet (Piet is an esoteric language). The specification of Mines is affected by Piet.\n\n- [UnambiSweeper](https://dnek.app/unambi) - logically solvable Minesweeper app. It supports Android and iOS.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n# Mines\n\nマインスイーパーから着想を得た難解プログラミング言語。\n\n- English is here（[README.md](README.md)）。\n\n## 概要\n\nMinesはプログラムがマインスイーパーのゲームプレイを模した操作によって実行されるプログラミング言語である。\n\n## プログラム記述仕様\n\nMinesのプログラムは1つの盤面と1つの操作リストがこの順に改行区切りで記述されたものである。\n\n**盤面**は `.` と `*` からなる長方形のグリッドで表される。\n`.` は安全なマス、 `*` は地雷のあるマスを表す。\n\n**操作リスト**は `\\n` で区切られた1つ以上の操作からなる。\n\n1つの**操作**は `,` または`;` で区切られた2つの整数、あるいは `!` 、あるいは空行で表される。\n盤面の直後及びファイル末尾に書かれた**空行**も操作として数えられる。\n\n**2つの整数**は盤面の左上からの列及び行番号を表し、区切り文字はクリックするマウスボタンを指定する。\n`,` は左クリック、 `;` は右クリックを指す。\n\n**列及び行番号**は負数でも盤面の範囲外を指していても良い。\nこれらはそれぞれ盤面の幅ないし高さで割った非負剰余に変換される。\n\n**`!`** は旗立てモードの切り替えを表す（後述）。\n\nプログラム中に現れる半角空白及び `\\t\\r\\f\\v` の各文字は無視される。\nまた、`#` から行末までの文字列は無視される。\nつまりプログラムは**コメント**を含むことができる。\n\n以下に、幅4高さ3の盤面と5つの操作を持つプログラムの例とそれぞれの操作の意味を示す。\n\n```\n.*.* #This is a comment.\n...*\n.**.\n0,0\n-1, -1 #Spaces are ignored.\n\n10;-10\n!\n```\n\n| 操作 | 意味 |\n----|----\n| `0,0` | 左上のマスを左クリック |\n| `-1,-1` | 右下のマスを左クリック（ `3,2` と同等） |\n|  | 何もしない |\n| `9;-10` | 左から(9 % 4)番目、上から(-10 % 3)番目のマスを右クリック（ `1;2` と同等） |\n| `!` | 旗立てモードの切り替え |\n\n## プログラムの処理\n\nMinesのインタプリタは1つの**操作ポインタ**(OP)を持ち、初期状態では操作リストの一番上を指している。\nインタプリタは盤面に対してOPの指す操作を行い、その後OPを1つ進める。\n一番下の操作が行われると、OPは一番上の操作に戻り、操作を続行する。\n\n各操作が行われるごとに、その結果及びその操作が行われたマスの状態に応じて**命令**が選ばれ、実行される。\n\n**ゲームオーバー**となる操作をした場合、プログラムは終了せず、盤面が初期状態（マスが空いておらず旗もない状態）に戻りゲームが再開される（OPは初期化されない）。\n\nインタプリタは記憶領域として符号付き整数の**スタック**を1つ持ち、これは命令によって操作される。\nスタックの初期状態は空であり、処理系の許す限り無限に値を持ち得る。\n\nまた、インタプリタは**旗立てモード**を管理しており、初期値はオフである。\n旗立てモードの切り替えにより、オンまたはオフに切り替わる。\nまた、ゲームオーバーによって旗立てモードが初期化されることはない。\n\n各命令の実行後、もしも「それぞれの安全なマス」または「それぞれの地雷マス」が全ゲームプレイを通じて1回以上開かれたことがあれば、プログラムは**終了**する（この挙動は通常のマインスイーパーにおけるゲームクリアと異なる）。\n\n## 操作の振る舞い\n\n**左クリック**はほとんどのマインスイーパーアプリにおけるそれと同じように振る舞う。\n\n開かれていないマスに対する左クリックはそのマスを開ける。\nもし地雷を開けばゲームオーバーとなる。\n\n開かれたマスに対する左クリックは盤面に影響を及ぼさないが、何らかの命令が実行され得る。\n\n**右クリック**も多くのマインスイーパーアプリにおけるそれと同じように振る舞う。\n\n開かれていないマスに対する右クリックは旗を立てるか取り除く。\n\n開かれたマスに対する右クリックは、もしマスに書かれた数字がその周囲に立っている旗の数と一致すれば、すべての開かれていない隣接するマスを開こうとする。\nもし地雷を開こうとしていればゲームオーバーとなる。\nこの操作は「Chord」と呼ばれており、アプリによってはChordを長押しや他のマウスボタンに紐付けている場合がある。\n\nいずれのクリックにおいても開かれたマスが空白の場合、その周囲のマスも再帰的に開かれる（旗が立っていた場合旗が取り除かれ開けられる）。\n\n**旗立てモードの切り替え**はほとんどのモバイル向けマインスイーパーアプリに備わっている機能であり、それと同様に振る舞う。\n旗立てモードがオンであるとき、左クリックと右クリックの扱いが入れ替わる。\n例えば開かれていないマスに対する左クリックは旗を立てるか取り除き、それに応じた命令が実行される。\n\n**空行**の操作では何も起こらない（OPは通常通り進む）。\n\n## 命令\n\nマスの数字「0」は空白マス、「9」は地雷マスを表す。\n\n「プッシュ」「ポップ」などはすべてスタックに対する操作を指す。\n\n命令中で最初にポップした値を「p0」、次にポップした値を「p1」とする。\n\n### コマンドエラー\n\nポップ回数分の値がスタックになかったり0除算をしようとするなどして命令を正しく実行できないことを**コマンドエラー**と呼ぶ。\n命令の実行中にコマンドエラーが発生しそうな場合、命令はなかったことにされ、OPが次に進む。\nなお、ゲームオーバーはコマンドエラーではない。\n\nポップ回数が足りない場合以外のコマンドエラーの発生条件は以下の表に示す。\n\n### 旗立てモードの切り替え\n\n| 命令名 | ポップ回数 | 内容 | エラー条件 |\n----|----|----|----\n| reverse | 0 | スタック全体の要素を逆順に並び替える | - |\n\n### 開いていないマスを左クリック\n\n#### マスに旗が立っている場合\n\n| 命令名 | ポップ回数 | マスの数字 | 内容 | エラー条件 |\n----|----|----|----|----\n| noop | 0 | どれでも（判明しないので） | 何もしない | - |\n\n#### マスに旗が立っていない場合\n\n| 命令名 | ポップ回数 | マスの数字 | 内容 | エラー条件 |\n----|----|----|----|----\n| push(count) | 0 | 0 | このクリックによって開かれたマスの個数（≧1）をプッシュ | - |\n| push(n) | 0 | 1〜8 | マスに書かれた数字をプッシュ | - |\n| reset(l) | 0 | 9 | 盤面を初期状態に戻してゲームを再開（スタック及びOPはリセットされない、このマスは開かれたことになる） | - |\n\n### 開いていないマスを右クリック\n\n| 命令名 | ポップ回数 | マスの数字 | 内容 | エラー条件 |\n----|----|----|----|----\n| swap | 2 | どれでも（判明しないので） | p0をプッシュしてp1をプッシュ | - |\n\n### 開いているマスを左クリック\n\n| 命令名 | ポップ回数 | マスの数字 | 内容 | エラー条件 |\n----|----|----|----|----\n| pop | 1 | 0 | ポップ | - |\n| positive | 1 | 1 | p0が正であれば1、正でなければ0をプッシュ | - |\n| dup | 1 | 2 | p0を2回プッシュ | - |\n| add | 2 | 3 | (p1 + p0)をプッシュ | - |\n| sub | 2 | 4 | (p1 - p0)をプッシュ | - |\n| mul | 2 | 5 | (p1 * p0)をプッシュ | - |\n| div | 2 | 6 | (p1 / p0)をプッシュ | 0除算 |\n| mod | 2 | 7 | (p1 % p0)をプッシュ | 0除算 |\n| perform(l) | 2 | 8 | 操作「`p1,p0`」を行う | - |\n\n### 開いているマスを右クリック\n\n#### 新たに1個以上のマスを開こうとした場合 (Chord)\n\n| 命令名 | ポップ回数 | 結果 | 内容 | エラー条件 |\n----|----|----|----|----\n| push(sum) | 0 | 成功 | このクリックによって開かれたマスに書かれた数字の合計をプッシュ | - |\n| reset(r) | スタックの長さ | ゲームオーバー | 盤面及びスタックを初期状態に戻してゲームを再開（OPはリセットされない、どのマスも開かれたことにはならない） | - |\n\n#### それ以外の場合\n| 命令名 | ポップ回数 | マスの数字 | 内容 | エラー条件 |\n----|----|----|----|----\n| push(0) | 0 | 0 | 0をプッシュ | - |\n| not | 1 | 1 | p0が0であれば1、0でなければ1をプッシュ | - |\n| roll | 2 | 2 | スタックの深さp1までの値をp0回回転させる（詳しくは「rollの詳細」を参照） | p1の絶対値がスタックの長さを超える |\n| in(n) | 0 | 3 | 標準入力の先頭から整数としてパースした値を1つ取りプッシュ | パースできない |\n| in(c) | 0 | 4 | 標準入力から文字を1つ取りそのUnicode値をプッシュ | 入力が空 |\n| out(n) | 1 | 5 | p0を標準出力に出力 | - |\n| out(c) | 1 | 6 | Unicode値がp0である文字を標準出力に出力 | p0が有効なUnicode値でない |\n| skip | 1 | 7 | OPにp0を加算する（オーバーフローした場合ループする） | - |\n| perform(r) | 2 | 8 | 操作「`p1;p0`」を行う | - |\n\n##### rollの詳細\n\np0, p1をポップした状態でスタックが `1, 2, 3, 4` の場合、深さ3までの値を1回回転させると `1, 4, 2, 3` のようにトップの値が下に埋め込まれる。\n\n回転数が負の場合、例えば-1回転させると `1, 3, 4, 2` のように逆の操作が行われる。\n\n深さが負の場合、例えば1回転させると `2, 3, 1, 4` のようにスタックのボトムから操作される。\n\n## 実装例\n\nこちら ([examples/](examples)) 。\n\n## インストール\n\n```\npip3 install mines-esolang\n```\n\nバージョンが表示されるか確認する。\n\n```\nmines -V\n```\n\n## インタプリタの実行方法\n\n通常はこのようにする。\n\n```\n$ mines examples/hello.mines\n```\n\n直接ソースファイルから実行することもできる。\n\n```\n$ python3 mines/mines.py examples/hello.mines\n```\n\n`d` でデバッグモードを有効にする。\n各マスの数字表やコードのパース及び実行にかかった時間が出力される。\n\n```\n$ mines examples/hello.mines -d\n```\n\nデバッグモードが有効なとき、`c`, `s`, `f`でそれぞれ各操作実行後のコマンド、スタック、盤面を出力する。\nまた、`l`で指定した操作回数でステップ実行することができる。\n\n```\n$ mines examples/hello.mines -dcsfl 42\n```\n\nファイルから入力を取る場合は `i` でファイルパスを指定する。\n\n```\n$ mines examples/cat.mines -i README.md\n```\n\n直接入力を指定する場合は `e` を使う。\n\n```\n$ mines examples/add.mines -e \"1 2\"\n```\n\n適宜 `echo` や `cat` を利用しても良い。\n\n```\n$ echo -n \"meow\" | mines examples/cat.mines\n```\n\n## 作者\n\n- **[DNEK](https://github.com/dnek)**\n\n### 関連する制作物\n\n- [Pietron](https://github.com/dnek/pietron) - 難解プログラミング言語PietのIDE。Minesの仕様はPietの影響を受けています。\n\n- [UnambiSweeper](https://dnek.app/unambi) - 最後まで論理的に解けるマインスイーパーアプリ。AndroidとiOSに対応しています。\n\n## ライセンス\n\nこのプロジェクトにはMITライセンスが供与されています。\n詳細は[LICENSE](LICENSE) ファイルを参照してください。\n# Change Log\n\n## 1.0.3\n\n- Add English README and this CHANGELOG.\n\n- Fix version processing to enable run programs directly from the source file.\n\n## 1.0.2\n\n- Use Wheel as the package system to fix `console_script` registration problem.\n\n## 1.0.0\n\n- Initial release\nMIT License\n\nCopyright (c) 2020 DNEK\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dnek/mines-esolang",
    "keywords": "mines interpreter esolang esoteric minesweeper",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mines-esolang",
    "package_url": "https://pypi.org/project/mines-esolang/",
    "platform": "",
    "project_url": "https://pypi.org/project/mines-esolang/",
    "project_urls": {
      "Homepage": "https://github.com/dnek/mines-esolang"
    },
    "release_url": "https://pypi.org/project/mines-esolang/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An esoteric language inspired by Minesweeper.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7089291,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ec9e60a5f3b4e603cfc4bdd636f1cf6e4a2274d26c64ad235522c2c7281d7e6",
        "md5": "4a1670413a246bed27a2f0f6ee20d478",
        "sha256": "3e71cc0241625e39df3a78ff4779e34e7dd787594df48e2a964e19c4a45121d8"
      },
      "downloads": -1,
      "filename": "mines_esolang-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4a1670413a246bed27a2f0f6ee20d478",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15514,
      "upload_time": "2020-04-23T23:37:00",
      "upload_time_iso_8601": "2020-04-23T23:37:00.552757Z",
      "url": "https://files.pythonhosted.org/packages/4e/c9/e60a5f3b4e603cfc4bdd636f1cf6e4a2274d26c64ad235522c2c7281d7e6/mines_esolang-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}