{
  "info": {
    "author": null,
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [],
    "description": "######################################################################\nDjango Facebook by Thierry Schellenbach (`mellowmorning.com <http://www.mellowmorning.com/>`_)\n######################################################################\n\nFirst\n-----\n\nDjango Facebook assumes you want users to register through Facebook.\nAfter registration it gives you access to the graph, allowing for such applications as:\n\n* Inviting friends\n* Finding friends\n* Posting to a users profile\n* Open graph beta functionality\n\nFor a demo of the signup flow have a look at Fashiolista's landing page (`fashiolista.com <http://www.fashiolista.com/intro_wide_minimal/>`_)\n\n\nContributions are welcome!!\nContact me here or `@tschellenbach <http://www.twitter.com/tschellenbach>`_\nUpdates and tutorials can be found on my blog `mellowmorning <http://www.mellowmorning.com/>`_\n\n\n\nAbout Django Facebook\n---------------------\n\n**Features**\n\n* Access the Facebook API, from:\n   * Your website (Using javascript OAuth)\n   * Facebook canvas pages (For building facebook applications)\n   * Mobile (Or any other flow giving you a valid access token)\n* Django User Registration (Convert Facebook user data into a user model)\n* Use Facebook data to register a user with your Django app. Facebook connect using the open graph API.\n* Facebook FQL access\n* OAuth 2.0 compliant\n* Includes Open Facebook (stable and tested python client to the graph API)\n\n\nRequirements\n------------------------------\n* Django registration or Django Userena (contact me if you use something else for registration.) \n\n\nInstallation\n------------\n\nDownload the source code or use ``pip install django_facebook``.\n\n\n**Create a Facebook App**\n\nIn case you don't yet have a facebook app. You need an app to use the open graph api and make the login process work.\nYou can create a facebook app at this url: http://www.facebook.com/developers/createapp.php\n\n**Settings**\n\nDefine the following settings in your settings.py file:\n\n::\n\n    FACEBOOK_APP_ID\n    FACEBOOK_APP_SECRET\n\n**Url config, context processor, auth backend**\n\nadd django facebook to your installed apps::\n\n    'django_facebook',\n\nadd this line to your context processors (``TEMPLATE_CONTEXT_PROCESSORS``\nsetting)::\n\n    'django_facebook.context_processors.facebook',\n\nadd this to your ``AUTHENTICATION_BACKENDS`` setting::\n\n    'django_facebook.auth_backends.FacebookBackend',\n    \nadd this line to your url config::\n\n    (r'^facebook/', include('django_facebook.urls')),\n\n**Update your models**\n\nAn abstract model is specified here django_facebook/models.py\nAdd these fields to your profile model or subclass the abstract class.\nSee the django docs for settings up a Profile model or understanding abstract classes.\n\n**Check the example**\n\nRight now you should have a working registration/connect/login in flow available at /facebook/connect/\nTest if everything is working and ensure you didn't miss a step somewhere.\nIf you encounter any difficulties please open an issue.\n\n**Django Userena**\n\nA few settings changes are needed to play nicely with Django Userena.\nIn your settings point Django Facebook to the right registration form and template:\n\n::\n\n    FACEBOOK_REGISTRATION_FORM = 'userena.forms.SignupForm'\n    FACEBOOK_REGISTRATION_TEMPLATE = 'userena/signup_form.html'\n\nSupporting any other registration system is quite easy.\nAdjust the above settings to point to your own code.\nNote that the form's save method needs to return the new user object.\n\n\n**Common bugs**\n\nDjango Facebook expects that you are using static files in order to load the required javascript.\nIf you are not using staticfiles you should load facebook.js provided in the static directory manually.\n\nAnother common issue are the url matching settings from Facebook. Facebook requires you to fill in a domain for your application.\nIn order for things to work with local development you need to use the same domain. So if you production site is www.mellowmorning.com you\nshould run your development server on something like local.mellowmorning.com in order for facebook to allow authentication.\n\nIf you encounter any difficulties please open an issue.\n\n**Customize and integrate into your site**\n\nNot it's time to customize things a little.\nFor an example you can look at connect.html in the templates directory.\n\nFirst load the css:\n\n::\n\n    <link href=\"{{ STATIC_URL }}css/facebook.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />\n\nSecondly load the javascript:\n\n::\n\n    {% include 'django_facebook/_facebook_js.html' %}\n    \nIf you encounter issues here you probably don't have django static files setup correctly. \nAlternatively you might be missing the context processor.\n\n\nSubsequently implement a form which calls Facebook via javascript.\nNote that you can control which page to go to after connect using the next input field.\n\n::\n\n<form action=\"{% url facebook_connect %}?facebook_login=1\" method=\"post\">\n<a href=\"javascript:void(0);\" style=\"font-size: 20px;\" onclick=\"F.connect(this.parentNode);\">Register, login or connect with facebook</a>\n<input type=\"hidden\" value=\"{{ request.path }}\" name=\"next\" />\n</form>\n\n\n\nSignals\n-------\n\nDjango-facebook ships with a few signals that you can use to easily accommodate Facebook related activities with your project.\n\n``facebook_user_registered`` signal is sent whenever a new user is registered by Django-facebook, for example:\n\n::\n\n    from django.contrib.auth.models import User\n    from django_facebook import signals\n\n    def fb_user_registered_handler(sender, user, facebook_data, \\*\\*kwargs):\n        # Do something involving user here\n\n    signals.facebook_user_registered.connect(user_registered, sender=User)\n\n\n``facebook_pre_update`` signal is sent just before Django-facebook updates the profile model with Facebook data. If you want to manipulate Facebook or profile information before it gets saved, this is where you should do it. For example:\n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def pre_facebook_update(sender, profile, facebook_data, \\*\\*kwargs):\n        profile.facebook_information_updated = datetime.datetime.now()\n        # Manipulate facebook_data here\n    \n    profile_class = get_profile_class()\n    signals.facebook_pre_update.connect(pre_facebook_update, sender=profile_class)\n\n\n``facebook_post_update`` signal is sent after Django-facebook finishes updating the profile model with Facebook data. You can perform other Facebook connect or registration related processing here. \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_facebook_update(sender, profile, facebook_data, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    signals.facebook_post_update.connect(post_facebook_update, sender=profile_class)\n\n``facebook_post_store_friends`` signal is sent after Django-facebook finishes storing the user's friends.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_friends(sender, user, friends, current_friends, inserted_friends, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    facebook_post_store_friends.connect(post_friends, sender=profile_class)\n\n``facebook_post_store_likes`` signal is sent after Django-facebook finishes storing the user's likes. This is usefull if you want to customize what topics etc to follow.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_likes(sender, user, likes, current_likes, inserted_likes, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    facebook_post_store_likes.connect(post_likes, sender=profile_class)\n\n\n\n\n\nContributing and Running tests\n------------------------------\nTests are run from within the example project. You\ncan run them yourself as follows:\n\ninstall from git\n\nfacebook_example/manage.py test django_facebook\n\nTodo:\n\n* Canvas utility functions (abstracting javascript redirects) (in progress)\n* Token expiration detection (check out https://github.com/aidaeology/Django-facebook/commit/8585ce223e18cf19f410b4e6aa56b1478913162e for an older version of this concept)\n* Improve testing\n\n\nDjango Jobs\n-----------\nDo you also see the beauty in clean code? Are you experienced with high scalability web apps?\nCurrently we're looking for additional talent over at our Amsterdam office.\nFeel free to drop me a line at my personal email for more information: thierryschellenbach[at]gmail.com\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-facebook",
    "package_url": "https://pypi.org/project/django-facebook/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-facebook/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-facebook/3.6.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": null,
    "version": "3.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1563509,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "466383c1a173e1baae27e537b3a2c60a36ea8337727d47ad39a5b1135dfe711a",
        "md5": "6af0132a8ddcff2c7aab181ede29d6f5",
        "sha256": "c90024e5c65eb1dc51aa0f7b9ce9ceabab35771abe891feb101d7ba749ab3f51"
      },
      "downloads": -1,
      "filename": "django-facebook-3.6.3.zip",
      "has_sig": false,
      "md5_digest": "6af0132a8ddcff2c7aab181ede29d6f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 216795,
      "upload_time": "2012-04-06T15:23:08",
      "upload_time_iso_8601": "2012-04-06T15:23:08.407450Z",
      "url": "https://files.pythonhosted.org/packages/46/63/83c1a173e1baae27e537b3a2c60a36ea8337727d47ad39a5b1135dfe711a/django-facebook-3.6.3.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}