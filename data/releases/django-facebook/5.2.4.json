{
  "info": {
    "author": "Thierry Schellenbach",
    "author_email": "thierryschellenbach@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "######################################################################\nDjango Facebook by Thierry Schellenbach (`mellowmorning.com <http://www.mellowmorning.com/>`_)\n######################################################################\n\n.. image:: https://secure.travis-ci.org/tschellenbach/Django-facebook.png?branch=master\n\nContributions are strongly appreciated. Seriously, give github a try, fork and get started :)\n\nNews\n----\nNow with support for django custom user models\n\nDemo & About\n------------\n\nDjango Facebook enables your users to easily register using the Facebook API. \nIt converts the Facebook user data and creates regular User and Profile objects.\nThis makes it easy to integrate with your existing Django application. \n\nI've built it for my startup Fashiolista.com and it's currently used in production with thousands of signups per day.\nFor a demo of the signup flow have a look at Fashiolista's landing page (`fashiolista.com <http://www.fashiolista.com/intro_wide_minimal/>`_)\n\nAfter registration Django Facebook gives you access to user's graph. Allowing for applications such as:\n\n* Open graph/ Timeline functionality\n* Seamless personalization\n* Inviting friends\n* Finding friends\n* Posting to a users profile\n\nUpdates and tutorials can be found on my blog `mellowmorning <http://www.mellowmorning.com/>`_\n\nFurther demos and tutorials will soon be available on `django-facebook.com <http://www.django-facebook.com/>`_\n\n\n\nFeatures\n--------\n\n* Access the Facebook API, from:\n   * Your website (Using javascript OAuth)\n   * Facebook canvas pages (For building facebook applications)\n   * Mobile (Or any other flow giving you a valid access token)\n* Django User Registration (Convert Facebook user data into a user model)\n* Store likes, friends and user data locally.\n* Facebook FQL access\n* OAuth 2.0 compliant\n* Automated reauthentication (For expired tokens)\n* Includes Open Facebook (stable and tested Python client to the graph API)\n\n\nInstallation\n------------\n\nClone the source code or use ``pip install django_facebook``.\n\n\n**Create a Facebook App**\n\nYou need a facebook app to use the open graph API and make the login process work.\nIf you don't have a facebook app, now is the time to create one.\nYou can create a facebook app at `this url <http://www.facebook.com/developers/createapp.php>`_. \n\nFacebook authentication only works if the domain you are working on matches your app domain.\nBe sure to configure the right app domain in your facebook application settings.\n\nAn example:\n\nYour site is www.fashiolista.com, your app domain is set to fashiolista.com and you do your development at ``local.fashiolista.com``.\nIf you try to authenticate with Facebook from a different domain you will get an authentication error.\n\n**Settings**\n\nDefine the following settings in your settings.py file:\n\n::\n\n    FACEBOOK_APP_ID\n    FACEBOOK_APP_SECRET\n\n**Url config, context processor, auth backend**\n\nadd django facebook to your installed apps::\n\n    'django_facebook',\n\nAdd this line to your context processors (``TEMPLATE_CONTEXT_PROCESSORS`` setting)::\n\n    'django_facebook.context_processors.facebook',\n    # and add request if you didn't do so already\n    'django.core.context_processors.request',\n\nThe full setting on a new django 1.5 app looks like this::\n\n  TEMPLATE_CONTEXT_PROCESSORS = (\n      'django.contrib.auth.context_processors.auth',\n      'django.core.context_processors.debug',\n      'django.core.context_processors.i18n',\n      'django.core.context_processors.media',\n      'django.core.context_processors.static',\n      'django.core.context_processors.tz',\n      'django.core.context_processors.request',\n      'django.contrib.messages.context_processors.messages',\n      'django_facebook.context_processors.facebook',\n  )\n\n\nAdd this to your ``AUTHENTICATION_BACKENDS`` setting::\n\n    'django_facebook.auth_backends.FacebookBackend',\n\nThe full setting on a new django 1.5 app looks like this::\n\n  AUTHENTICATION_BACKENDS = (\n      'django_facebook.auth_backends.FacebookBackend',\n      'django.contrib.auth.backends.ModelBackend',\n  )\n\n\nNow, add this line to your url config::\n\n    (r'^facebook/', include('django_facebook.urls')),\n    (r'^accounts/', include('django_facebook.auth_urls')), #Don't add this line if you use django registration or userena for registration and auth.\n\n\n**Update your models**\n\nThe following step depends on your version of Django. Django versions before 1.5 need to use a custom profile model.\nWhereas Django 1.5 and up can use a custom user model.\n\n**Django 1.5**\n\nIf you don't already have a custom user model, simply uses the provided model by setting your AUTH_USER_MODEL to FacebookCustomUser::\n\nAUTH_USER_MODEL = 'django_facebook.FacebookCustomUser'\n\nAlternatively use the abstract model provided in django_facebook.models.FacebookProfileModel\n\n**Django < 1.5**\n\nIf you don't already have a custom Profile model, simply uses the provided model by setting your AUTH_PROFILE_MODULE to FacebookProfile::\n\n    AUTH_PROFILE_MODULE = 'django_facebook.FacebookProfile'\n    \nBe sure to run manage.py syncdb after setting this up.\n\nOtherwise Django Facebook provides an abstract model which you can inherit like this::\n\n    from django_facebook.models import FacebookProfileModel\n\n\n    class MyCustomProfile(FacebookProfileModel):\n        user = models.OneToOneField('auth.User')\n        ....\n    \n    from django.contrib.auth.models import User\n    from django.db.models.signals import post_save\n    \n    #Make sure we create a MyCustomProfile when creating a User\n    def create_facebook_profile(sender, instance, created, **kwargs):\n        if created:\n            MyCustomProfile.objects.create(user=instance)\n    \n    post_save.connect(create_facebook_profile, sender=User)\n    \nDon't forget to update your database using syncdb or south after this step.\n\nNote: You need a profile model attached to every user model. For new accounts this will get created automatically, but you will need to migrate older accounts.\n\n**Congratulations**\nRight now you should have a working registration/connect/login in flow available at /facebook/example/!\nTest if everything is working and ensure you didn't miss a step somewhere.\nIf you encounter any difficulties please open an issue.\n\n\n**Customize and integrate into your site**\n\nNow it's time to customize things a little.\nFor an example you can look at connect.html in the templates directory.\n\nFirst load the css:\n\n::\n\n    <link href=\"{{ STATIC_URL }}css/facebook.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />\n\nSecondly load the javascript:\n\n::\n\n    {% include 'django_facebook/_facebook_js.html' %}\n    \nIf you encounter issues here you probably don't have django static files setup correctly. \nAlternatively you might be missing the context processor.\n\n\nSubsequently implement a form which calls Facebook via javascript.\nNote that you can control which page to go to after connect using the next input field.\n\n::\n\n<form action=\"{% url facebook_connect %}?facebook_login=1\" method=\"post\">\n<a href=\"javascript:void(0);\" style=\"font-size: 20px;\" onclick=\"F.connect(this.parentNode);\">Register, login or connect with facebook</a>\n<input type=\"hidden\" value=\"{{ request.path }}\" name=\"next\" />\n<input type=\"hidden\" value=\"{{ request.path }}\" name=\"register_next\" />\n<input type=\"hidden\" value=\"{{ request.path }}\" name=\"error_next\" />\n{% csrf_token %}\n</form>\n\n\nRedirects\n---------\n\nFor most applications you can simply use the next, register next and error next parameters to control the post registration flow.\nThe \"next\" parameter provides the default next page for login, connect, error or register actions. \"register_next\" and \"error_next\" allow you to customize the next page for those specific scenarios. This is usefull when you for instance want to show an introduction page to new users.\n\nFlows\n\n   * Login (login_next, next, default)\n   * Connect (connect_next, next, default)\n   * Register (register_next, next, default)\n   * Error (error_next, next, default)\n\nThe default redirect is specified by the FACEBOOK_LOGIN_DEFAULT_REDIRECT setting.\n\nIf the default customizability isn't adequate for your needs you can also subclass the default registration backend. \n\n::\n\nclass CustomBackend(FacebookRegistrationBackend):\n    def post_connect(action):\n        # go as crazy as you want, just be sure to return a response\n        response = HttpRedirect('/something/')\n        if action is CONNECT_ACTIONS.LOGIN:\n            response = HttpRedirect('/')\n        return response\n\nCanvas Application\n------------------\n\nIn order to use build a facebook canvas application, you should add this to your ``MIDDLEWARE_CLASSES`` setting::\n\n    'django_facebook.middleware.FacebookCanvasMiddleWare'\n\nThis middleware will check for the signed_request parameter in the url and take the appropriate action:\n\t* redirect to app authorization dialog if user has not authorized the app, some permission is missing or any other error.\n\t* login the current facebook user in django's system and store the access token.\n\nCommon bugs\n-----------\n\nDjango Facebook expects that you are using static files in order to load the required javascript.\nIf you are not using staticfiles you should load facebook.js provided in the static directory manually.\n\nAnother common issue are the url matching settings from Facebook. Facebook requires you to fill in a domain for your application.\nIn order for things to work with local development you need to use the same domain. So if you production site is www.mellowmorning.com you\nshould run your development server on something like local.mellowmorning.com in order for facebook to allow authentication.\n\nIf you encounter any difficulties please open an issue.\n\n\nRegistration Backends\n---------------------\n\n**Registration Backends**\n\nBy default Django Facebook ships with its own registration system.\nIt provides a basic manual registration flow and the option to connect with Facebook.\n\nIf you are looking for something more complicated it's possible to integrate with Userena or Django Registration.\nTo add support for these systems we use the FACEBOOK_REGISTRATION_BACKEND setting.\n\n\n**Django Registration support**\nCreate a registration backend which subclasses both Django Facebook and Django Registration's\nregistration backend. An example is included in facebook_example/registration_backends.py\n\n::\n    # in registration_backends.py\n    class DjangoRegistrationDefaultBackend(DefaultBackend, NooptRegistrationBackend):\n        '''\n        The redirect behaviour will still be controlled by the\n            post_error\n            post_connect\n        functions\n        the form and other settings will be taken from the default backend\n        '''\n        pass\n\n    # in your settings file\n    FACEBOOK_REGISTRATION_BACKEND = 'registration.backends.default.DefaultBackend'\n\n**Django Userena support**\n\nDjango Userena is easier to work with than Django Registration.\nIt is however hard to setup unittesting with Userena, so the integration between Django Facebook and Userena might not work.\nPlease report any bugs you run into.\n\n::\n\n    FACEBOOK_REGISTRATION_BACKEND = 'django_facebook.registration_backends.UserenaBackend'\n\n\nAlso have a look at the userena settings file in the facebook example project.\nIt provides a clear example of how to configure Userena and Django Facebook to work together.\n\n**Other registration systems**\n\nSupporting any other registration system is quite easy.\nAdjust the above settings to point to your own code.\nNote that the form's save method needs to return the new user object.\n\n\nSignals\n-------\n\nDjango-facebook ships with a few signals that you can use to easily accommodate Facebook related activities with your project.\n\n``facebook_user_registered`` signal is sent whenever a new user is registered by Django-facebook, for example:\n\n::\n\n    from django_facebook.utils import get_user_model\n    from django_facebook import signals\n\n    def fb_user_registered_handler(sender, user, facebook_data, \\*\\*kwargs):\n        # Do something involving user here\n\n    signals.facebook_user_registered.connect(user_registered, sender=get_user_model())\n\n\n``facebook_pre_update`` signal is sent just before Django-facebook updates the profile model with Facebook data. If you want to manipulate Facebook or profile information before it gets saved, this is where you should do it. For example:\n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_user_model\n\n    def pre_facebook_update(sender, user, profile, facebook_data, \\*\\*kwargs):\n        profile.facebook_information_updated = datetime.datetime.now()\n        # Manipulate facebook_data here\n    \n    signals.facebook_pre_update.connect(pre_facebook_update, sender=get_user_model())\n\n\n``facebook_post_update`` signal is sent after Django-facebook finishes updating the profile model with Facebook data. You can perform other Facebook connect or registration related processing here. \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_user_model\n\n    def post_facebook_update(sender, user, profile, facebook_data, \\*\\*kwargs):\n        # Do other stuff\n    \n    signals.facebook_post_update.connect(post_facebook_update, sender=get_user_model())\n\n``facebook_post_store_friends`` signal is sent after Django-facebook finishes storing the user's friends.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_user_model\n\n    def post_friends(sender, user, friends, current_friends, inserted_friends, \\*\\*kwargs):\n        # Do other stuff\n    \n    facebook_post_store_friends.connect(post_friends, sender=get_user_model())\n\n``facebook_post_store_likes`` signal is sent after Django-facebook finishes storing the user's likes. This is usefull if you want to customize what topics etc to follow.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_user_model\n\n    def post_likes(sender, user, likes, current_likes, inserted_likes, \\*\\*kwargs):\n        # Do other stuff\n    \n    facebook_post_store_likes.connect(post_likes, sender=get_user_model())\n\n\nCelery, Performance and Optimization\n------------------------------------\n\nFacebook APIs can take quite some time to respond. It's very common that you will wait\nbetween 1-3 seconds for a single API call. If you need multiple calls, pages can quickly become very sluggish.\n\nThe recommended solution is to use Celery. Celery is a task queueing system which allows you to \nrun the API requests outside of the request, response cycle. \n\nStep 1 - Install Celery\n\nStep 2 - Enable Tasks\n\n::\n\n  # use celery for storing friends and likes\n  FACEBOOK_CELERY_STORE = True\n  # use celery for extending tokens\n  FACEBOOK_CELERY_TOKEN_EXTEND = True\n\nWhen writing your own Facebook functionality you will see a big speedup by using\n@facebook_required_lazy\ninstead of\n@facebook_required\n\n\nContributing and Running tests\n------------------------------\nTests are run from within the example project. You\ncan run them yourself as follows:\n\ninstall from git\n\nfacebook_example/manage.py test django_facebook\n\n\n**Vagrant**\n\nA vagrant development setup is included in the GIT repo.\nAssuming you have vagrant installed, simply type the following in your shell:\n\n::\n\n    # First get a fresh Django-Facebook checkout\n    git clone git@github.com:tschellenbach/Django-facebook.git django-facebook\n    \n    # Go to the directory:\n    cd django-facebook\n\n    # Currently Vagrant is only support on branch `five`, so until this has been merged you need to switch branches:\n    git checkout five\n\n    # Time to start Vagrant (grab a cup of coffee after this command, it'll take a while) :)\n    vagrant up\n\n    # Finally done?\n    vagrant ssh\n    python manage.py runserver 0:8080\n\nTo have a working Django Facebook example up and running at 192.168.50.42:8000/facebook/example/.\nFor the facebook login to work simply map that ip to vagrant.mellowmorning.com\n(Since Facebook checks the domain)\n\nYou can run the test suite by typing:\n\n:: \n\n  python manage.py test django_facebook\n\n\n\nDjango Jobs\n-----------\nDo you also see the beauty in clean code? Are you experienced with high scalability web apps?\nCurrently we're looking for additional talent over at our Amsterdam office.\nFeel free to drop me a line at my personal email for more information: thierryschellenbach[at]gmail.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tschellenbach/Django-facebook",
    "keywords": null,
    "license": "Copyright (c) Thierry Schellenbach\n\n (http://www.mellowmorning.com)\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n- Neither the name of Thierry Schellenbach. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission of Thierry Schellenbach.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-facebook",
    "package_url": "https://pypi.org/project/django-facebook/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-facebook/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tschellenbach/Django-facebook"
    },
    "release_url": "https://pypi.org/project/django-facebook/5.2.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Facebook open graph API client in python. Enables django applications to register users using facebook.\nFixes issues with the official but unsupported Facebook python-sdk. Enables mobile facebook authentication.\nCanvas page authentication for facebook applications. FQL access via the server side api.",
    "version": "5.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1563509,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a20d491c7949c5b7df60fa422cdb53bda8535326ff7a43daf140b8e96b77260d",
        "md5": "df17bc2622a68ee5665cadc1f67dee2e",
        "sha256": "524df1a23fce191b24adf59366af313c085a9434195a97019ef69b6bd7780704"
      },
      "downloads": -1,
      "filename": "django-facebook-5.2.4.zip",
      "has_sig": false,
      "md5_digest": "df17bc2622a68ee5665cadc1f67dee2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 323866,
      "upload_time": "2013-06-07T09:46:35",
      "upload_time_iso_8601": "2013-06-07T09:46:35.628568Z",
      "url": "https://files.pythonhosted.org/packages/a2/0d/491c7949c5b7df60fa422cdb53bda8535326ff7a43daf140b8e96b77260d/django-facebook-5.2.4.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}