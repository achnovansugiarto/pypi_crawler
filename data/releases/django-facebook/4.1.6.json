{
  "info": {
    "author": "Thierry Schellenbach",
    "author_email": "thierryschellenbach@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "######################################################################\nDjango Facebook by Thierry Schellenbach (`mellowmorning.com <http://www.mellowmorning.com/>`_)\n######################################################################\n\n.. image:: https://secure.travis-ci.org/tschellenbach/Django-facebook.png?branch=master\n\n**New in 4.0**\n\n4.0 introduces improved compatiblity for the offline access migration.\nI highly recommend upgrading. These are some of the awesome new features:\n\n* Standalone registration support (we no longer require django userena and django registration)\n* Local image storage is now easy to setup and enabled by default\n* Automatic reauthentication for expired tokens (Great for the offline access migration)\n* Travis - `CI tested <http://travis-ci.org/#!/tschellenbach/Django-facebook/>`  \n\nBackwards incompatible changes:\n\n* You need to explicitly send connect_facebook=1 to connect an existing account to your Facebook account\n* You need to specify a custom backend when using Django registration or Userena. See the section on django userena and django registration support.\n* You should make sure your media settings are ok to support image upload\n\n**The docs can also be found at: http://django-facebook.rtfd.org/**\n\n\nDemo & About\n------------\n\nDjango Facebook enables your users to easily register using the Facebook API. \nIt converts the Facebook user data and creates regular User and Profile objects.\nThis makes it easy to integrate with your existing Django application. \nAfter registration it gives you access to user's graph. Allowing for applications such as:\n\n* Open graph/ Timeline functionality\n* Seamless personalization\n* Inviting friends\n* Finding friends\n* Posting to a users profile\n\nI've built it for my startup Fashiolista.com and it's currently used in production there with thousands of signups per day.\nFor a demo of the signup flow have a look at Fashiolista's landing page (`fashiolista.com <http://www.fashiolista.com/intro_wide_minimal/>`_)\n\nBefore you get started building your application, know that contributions are very welcome.\nSeriously, if you see a bug or think of an improvement just open a pull request or issue.\nFeel free to contact me if you have questions.\n\nUpdates and tutorials can be found on my blog `mellowmorning <http://www.mellowmorning.com/>`_\n\nFurther demos and tutorials will soon be available on `django-facebook.com <http://www.django-facebook.com/>`_\n\n\n\nFeatures\n--------\n\n**Features**\n\n* Access the Facebook API, from:\n   * Your website (Using javascript OAuth)\n   * Facebook canvas pages (For building facebook applications)\n   * Mobile (Or any other flow giving you a valid access token)\n* Django User Registration (Convert Facebook user data into a user model)\n* Store likes, friends and user data locally.\n* Facebook FQL access\n* OAuth 2.0 compliant\n* Automated reauthentication (For expired tokens)\n* Includes Open Facebook (stable and tested python client to the graph API)\n\n\nInstallation\n------------\n\nDownload the source code or use ``pip install django_facebook``.\n\n\n**Create a Facebook App**\n\nYou need a facebook app to use the open graph API and make the login process work.\nIf you don't have a facebook app, now is the time to create one.\nYou can create a facebook app at `this url <http://www.facebook.com/developers/createapp.php>`_. \n\nFacebook authentication only works if the domain you are working on matches your app domain.\nBe sure to configure the right app domain in your facebook application settings.\n\nAn example:\n\nYour site is www.fashiolista.com, your app domain is set to fashiolista.com and you do your development at ``local.fashiolista.com``.\nIf you try to authenticate with Facebook from a different domain you will get an authentication error.\n\n**Settings**\n\nDefine the following settings in your settings.py file:\n\n::\n\n    FACEBOOK_APP_ID\n    FACEBOOK_APP_SECRET\n\n**Url config, context processor, auth backend**\n\nadd django facebook to your installed apps::\n\n    'django_facebook',\n\nAdd this line to your context processors (``TEMPLATE_CONTEXT_PROCESSORS`` setting)::\n\n    'django_facebook.context_processors.facebook',\n\nThe full setting on a new django 1.4 app looks like this::\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        'django_facebook.context_processors.facebook',\n        'django.contrib.auth.context_processors.auth',\n        'django.core.context_processors.debug',\n        'django.core.context_processors.i18n',\n        'django.core.context_processors.media',\n        'django.core.context_processors.static',\n        'django.core.context_processors.tz',\n        'django.contrib.messages.context_processors.messages',\n    )\n\nAdd this to your ``AUTHENTICATION_BACKENDS`` setting::\n\n    'django_facebook.auth_backends.FacebookBackend',\n\nThe full setting on a new django 1.4 app looks like this::\n\n    AUTHENTICATION_BACKENDS = (\n        'django_facebook.auth_backends.FacebookBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\nNow, add this line to your url config::\n\n    (r'^facebook/', include('django_facebook.urls')),\n    (r'^accounts/', include('django_facebook.auth_urls')), #Don't add this line if you use django registration or userena for registration and auth.\n\n\n**Update your models**\n\nDjango uses a custom Profile model to store additional user information. \nRead more about this topic in the `Django Docs <https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users>`_.\n\nIf you don't already have a custom Profile model, simply uses the provided model by setting your AUTH_PROFILE_MODULE to FacebookProfile::\n\n    AUTH_PROFILE_MODULE = 'django_facebook.FacebookProfile'\n    \nBe sure to run manage.py syncdb after setting this up.\n\nOtherwise Django Facebook provides an abstract model which you can inherit like this::\n\n    from django_facebook.models import FacebookProfileModel\n\n\n    class MyCustomProfile(FacebookProfileModel):\n        user = models.OneToOneField('auth.User')\n        ....\n    \n    from django.contrib.auth.models import User\n    from django.db.models.signals import post_save\n    \n    #Make sure we create a MyCustomProfile when creating a User\n    def create_facebook_profile(sender, instance, created, **kwargs):\n        if created:\n            MyCustomProfile.objects.create(user=instance)\n    \n    post_save.connect(create_facebook_profile, sender=User)\n    \nDon't forget to update your database using syncdb or south after this step.\n\n\nCheck the example & Customize!\n------------------------------\n\nRight now you should have a working registration/connect/login in flow available at /facebook/connect/\nTest if everything is working and ensure you didn't miss a step somewhere.\nIf you encounter any difficulties please open an issue.\n\n\n**Registration Backends**\n\nDjango Facebook uses registration backends to integrate with various registration frameworks.\nNo registration backend is required. However if you want to integrate with django registration,\ndjango userena or a custom backend you need to point us in the right direction.\n\n**Django Registration support**\nSimply set your facebook registration backend to your preferred backend.\n\n::\n\n    FACEBOOK_REGISTRATION_BACKEND = 'registration.backends.default.DefaultBackend'\n\n**Django Userena support**\n\nWe recommend using Django Userena. It seems easier to work with than Django Registration.\nBoth are supported and good packages though.\nTo use django userena simply point to the userena compatability layer.\n\n::\n\n    FACEBOOK_REGISTRATION_BACKEND = 'django_facebook.registration_backends.UserenaBackend'\n\n\nAlso have a look at the userena settings file in the facebook example project.\nIt provides a clear example of how to configure Userena and Django Facebook to work together.\n\n**Old Django Registration Support**\n\nEven older version of Django Registration are supported. Simply point to the old django registration\ncompatability backend.\n\n::\n\n    FACEBOOK_REGISTRATION_BACKEND = 'django_facebook.registration_backends.OldDjangoRegistrationBackend'\n\nSupporting any other registration system is quite easy.\nAdjust the above settings to point to your own code.\nNote that the form's save method needs to return the new user object.\n\n\n**Common bugs**\n\nDjango Facebook expects that you are using static files in order to load the required javascript.\nIf you are not using staticfiles you should load facebook.js provided in the static directory manually.\n\nAnother common issue are the url matching settings from Facebook. Facebook requires you to fill in a domain for your application.\nIn order for things to work with local development you need to use the same domain. So if you production site is www.mellowmorning.com you\nshould run your development server on something like local.mellowmorning.com in order for facebook to allow authentication.\n\nIf you encounter any difficulties please open an issue.\n\n**Customize and integrate into your site**\n\nNot it's time to customize things a little.\nFor an example you can look at connect.html in the templates directory.\n\nFirst load the css:\n\n::\n\n    <link href=\"{{ STATIC_URL }}css/facebook.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />\n\nSecondly load the javascript:\n\n::\n\n    {% include 'django_facebook/_facebook_js.html' %}\n    \nIf you encounter issues here you probably don't have django static files setup correctly. \nAlternatively you might be missing the context processor.\n\n\nSubsequently implement a form which calls Facebook via javascript.\nNote that you can control which page to go to after connect using the next input field.\n\n::\n\n<form action=\"{% url facebook_connect %}?facebook_login=1\" method=\"post\">\n<a href=\"javascript:void(0);\" style=\"font-size: 20px;\" onclick=\"F.connect(this.parentNode);\">Register, login or connect with facebook</a>\n<input type=\"hidden\" value=\"{{ request.path }}\" name=\"next\" />\n</form>\n\n\n\nSignals\n-------\n\nDjango-facebook ships with a few signals that you can use to easily accommodate Facebook related activities with your project.\n\n``facebook_user_registered`` signal is sent whenever a new user is registered by Django-facebook, for example:\n\n::\n\n    from django.contrib.auth.models import User\n    from django_facebook import signals\n\n    def fb_user_registered_handler(sender, user, facebook_data, \\*\\*kwargs):\n        # Do something involving user here\n\n    signals.facebook_user_registered.connect(user_registered, sender=User)\n\n\n``facebook_pre_update`` signal is sent just before Django-facebook updates the profile model with Facebook data. If you want to manipulate Facebook or profile information before it gets saved, this is where you should do it. For example:\n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def pre_facebook_update(sender, profile, facebook_data, \\*\\*kwargs):\n        profile.facebook_information_updated = datetime.datetime.now()\n        # Manipulate facebook_data here\n    \n    profile_class = get_profile_class()\n    signals.facebook_pre_update.connect(pre_facebook_update, sender=profile_class)\n\n\n``facebook_post_update`` signal is sent after Django-facebook finishes updating the profile model with Facebook data. You can perform other Facebook connect or registration related processing here. \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_facebook_update(sender, profile, facebook_data, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    signals.facebook_post_update.connect(post_facebook_update, sender=profile_class)\n\n``facebook_post_store_friends`` signal is sent after Django-facebook finishes storing the user's friends.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_friends(sender, user, friends, current_friends, inserted_friends, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    facebook_post_store_friends.connect(post_friends, sender=profile_class)\n\n``facebook_post_store_likes`` signal is sent after Django-facebook finishes storing the user's likes. This is usefull if you want to customize what topics etc to follow.   \n\n::\n    \n    from django_facebook import signals\n    from django_facebook.utils import get_profile_class\n\n    def post_likes(sender, user, likes, current_likes, inserted_likes, \\*\\*kwargs):\n        # Do other stuff\n    \n    profile_class = get_profile_class()\n    facebook_post_store_likes.connect(post_likes, sender=profile_class)\n\n\n\nFacebook App Center\n-------------------\n\nThe Facebook App center requires your app to authenticate the user when landing on your site.\nIt already provides you with the required token. (Honestly I think it's a really weird user experience.)\nBut to get it working you must use the following url for site url (App -> Settings -> Basic -> Website with Facebook Login)\n\nhttp://www.mydomain.com/facebook/connect/?facebook_login=1&attempt=1\n\nNote that the given tokens can't be used for local testing. (Facebook checks the url for which the authorization was given.)\n\n\nContributing and Running tests\n------------------------------\nTests are run from within the example project. You\ncan run them yourself as follows:\n\ninstall from git\n\nfacebook_example/manage.py test django_facebook\n\nTodo:\n\n* Canvas utility functions (abstracting javascript redirects) (in progress)\n* Token expiration detection (check out https://github.com/aidaeology/Django-facebook/commit/8585ce223e18cf19f410b4e6aa56b1478913162e for an older version of this concept)\n* Improve testing\n\n\nDjango Jobs\n-----------\nDo you also see the beauty in clean code? Are you experienced with high scalability web apps?\nCurrently we're looking for additional talent over at our Amsterdam office.\nFeel free to drop me a line at my personal email for more information: thierryschellenbach[at]gmail.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/tschellenbach/Django-facebook",
    "keywords": null,
    "license": "Copyright (c) Thierry Schellenbach\n\n (http://www.mellowmorning.com)\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n- Neither the name of Thierry Schellenbach. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission of Thierry Schellenbach.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-facebook",
    "package_url": "https://pypi.org/project/django-facebook/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-facebook/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/tschellenbach/Django-facebook"
    },
    "release_url": "https://pypi.org/project/django-facebook/4.1.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Facebook open graph API client in python. Enables django applications to register users using facebook.\nFixes issues with the official but unsupported Facebook python-sdk. Enables mobile facebook authentication.\nCanvas page authentication for facebook applications. FQL access via the server side api.",
    "version": "4.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1563509,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d18b227b15e6547ea57493f167cebe78e8907529515e2edf2ad7612e23202e02",
        "md5": "db7625da5926b0effece33589bc88a27",
        "sha256": "07c4764342d80653410622f13fc405e7a36f03520d0ce5451b073e13cef6d512"
      },
      "downloads": -1,
      "filename": "django-facebook-4.1.6.zip",
      "has_sig": false,
      "md5_digest": "db7625da5926b0effece33589bc88a27",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 292071,
      "upload_time": "2012-09-24T18:01:58",
      "upload_time_iso_8601": "2012-09-24T18:01:58.285327Z",
      "url": "https://files.pythonhosted.org/packages/d1/8b/227b15e6547ea57493f167cebe78e8907529515e2edf2ad7612e23202e02/django-facebook-4.1.6.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}