{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "More JSON Configuration!\n========================\n\nA JSON template format intended for configuration files.\n\nMotivation\n----------\n\nThis module has superficial similarity to the `JSON Reference\nDraft <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__,\nwhich seems inspired by the committee-driven XPath specification, and as\na result, made some poor design choices. Here are the improvements this\nmodule makes:\n\n1. This module uses the dot (``.``) as a path separator in the URL\n   fragment. For example, an absolute reference looks like\n   ``{\"$ref\": \"#message.type.name\"}``, and a relative reference looks\n   like ``{\"$ref\": \"#..type.name\"}``. This syntax better matches that\n   used by Javascript.\n2. The properties found in a ``$ref`` object are not ignored. Rather,\n   they are to *override* the referenced object properties. This allows\n   you to reference a default document, and replace the particular\n   properties as needed. *more below*\n3. References can accept URL parameters: JSON is treated like a string\n   template for more sophisticated value replacement. *see below*\n4. You can reference files and environment variables in addition to\n   general URLs.\n\nUsage\n-----\n\nLoad your settings easily:\n\n::\n\n    settings = mo_json_config.get(url):\n\nComments\n--------\n\nEnd-of-line Comments are allowed, using either ``#`` or ``//`` prefix:\n\n.. code:: javascript\n\n        {\n            \"key1\": \"value1\",  //Comment 1\n        }\n\n.. code:: python\n\n            \"key1\": \"value1\",  #Comment 1\n\nMultiline comments are also allowed, using either Python's triple-quotes\n(``\"\"\" ... \"\"\"``) or Javascript's block quotes ``/*...*/``\n\n.. code:: javascript\n\n        {\n            \"key1\": /* Comment 1 */ \"value1\",\n        }\n\n.. code:: python\n\n            \"key1\": \"\"\"Comment 1\"\"\" \"value1\",\n\nExample References\n------------------\n\nThe ``$ref`` property is special. Its value is interpreted as a URL\npointing to more JSON\n\nAbsolute Internal Reference\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe simplest form of URL is an absolute reference to a node in the same\ndocument:\n\n.. code:: python\n\n        {\n            \"message\": \"Hello world\",\n            \"repeat\": {\"$ref\": \"#message\"}\n        }\n\nThe reference must start with ``#``, and the object with the ``$ref`` is\nreplaced with the value it points to:\n\n.. code:: python\n\n        {\n            \"message\": \"Hello world\",\n            \"repeat\": \"Hello world\"\n        }\n\nRelative Internal References\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReferences that start with dot (``.``) are relative, with each\nadditional dot referring to successive parents. In this case the ``..``\nrefers to the ref-object's parent, and expands just like the previous\nexample:\n\n.. code:: python\n\n        {\n            \"message\": \"Hello world\",\n            \"repeat\": {\"$ref\": \"#..message\"}\n        }\n\nFile References\n~~~~~~~~~~~~~~~\n\nConfiguration is often stored on the local file system. You can in-line\nthe JSON found in a file by using the ``file://`` scheme:\n\nIt is good practice to store sensitive data in a secure place...\n\n.. code:: python\n\n        {# LOCATED IN C:\\users\\kyle\\password.json\n            \"host\": \"database.example.com\",\n            \"username\": \"kyle\",\n            \"password\": \"pass123\"\n        }\n\n...and then refer to it in your configuration file:\n\n.. code:: python\n\n        {\n            \"host\": \"example.com\",\n            \"port\": \"8080\",\n            \"$ref\": \"file:///C:/users/kyle/password.json\"\n        }\n\nwhich will be expanded at run-time to:\n\n.. code:: python\n\n        {\n            \"host\": \"example.com\",\n            \"port\": \"8080\",\n            \"username\": \"kyle\",\n            \"password\": \"pass123\"\n        }\n\nPlease notice the triple slash (``///``) is referring to an absolute\nfile reference.\n\nReferences To Objects\n~~~~~~~~~~~~~~~~~~~~~\n\nRef-objects that point to other objects (dicts) are not replaced\ncompletely, but rather are merged with the target; with the ref-object\nproperties taking precedence. This is seen in the example above: The\n\"host\" property is not overwritten by the target's.\n\nRelative File Reference\n~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is the same, using a relative file reference; which is relative to\nthe file that contains this JSON\n\n.. code:: python\n\n        {#LOCATED IN C:\\users\\kyle\\dev-debug.json\n            \"host\": \"example.com\",\n            \"port\": \"8080\",\n            \"$ref\": \"file://password.json\"\n        }\n\nHome Directory Reference\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou may also use the tilde (``~``) to refer to the current user's home\ndirectory. Here is the same again, but this example can be anywhere in\nthe file system.\n\n.. code:: python\n\n        {\n            \"host\": \"example.com\",\n            \"port\": \"8080\",\n            \"$ref\": \"file://~/password.json\"\n        }\n\nHTTP Reference\n~~~~~~~~~~~~~~\n\nConfiguration can be stored remotely, especially in the case of larger\nconfigurations which are too unwieldy to inline:\n\n.. code:: python\n\n        {\n            \"schema\":{\"$ref\": \"http://example.com/sources/my_db.json\"}\n        }\n\nScheme-Relative Reference\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou are also able to leave the scheme off, so that whole constellations\nof configuration files can refer to each other no matter if they are on\nthe local file system, or remote:\n\n.. code:: python\n\n        {# LOCATED AT SOMEWHERE AT http://example.com\n            \"schema\":{\"$ref\": \"///sources/my_db.json\"}\n        }\n\nAnd, of course, relative references are also allowed:\n\n.. code:: python\n\n        {# LOCATED AT http://example.com/sources/dev-debug.json\n            \"schema\":{\"$ref\": \"//sources/my_db.json\"}\n        }\n\nFragment Reference\n~~~~~~~~~~~~~~~~~~\n\nSome remote configuration files are quite large...\n\n.. code:: python\n\n        {# LOCATED IN C:\\users\\kyle\\password.json\n            \"database\":{\n                \"username\": \"kyle\",\n                \"password\": \"pass123\"\n            },\n            \"email\":{\n                \"username\": \"ekyle\",\n                \"password\": \"pass123\"\n            }\n        }\n\n... and you only need one fragment. For this use the hash (``#``)\nfollowed by the dot-delimited path into the document:\n\n.. code:: python\n\n        {\n            \"host\": \"mail.example.com\",\n            \"username\": \"ekyle\"\n            \"password\": {\"$ref\": \"//~/password.json#email.password\"}\n        }\n\nEnvironment Variables Reference\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\njson.ref uses the unconventional ``env`` scheme for accessing\nenvironment variables:\n\n.. code:: python\n\n        {\n            \"host\": \"mail.example.com\",\n            \"username\": \"ekyle\"\n            \"password\": {\"$ref\": \"env://MAIL_PASSWORD\"}\n        }\n\nParameterized References\n------------------------\n\nJSON documents are allowed named parameters, which are surrounded by\nmoustaches ``{{.}}``.\n\n.. code:: javascript\n\n        {//above_example.json\n            {{var_name}}: \"value\"\n        }\n\nParameter replacement is performed on the unicode text before being\ninterpreted by the JSON parser. It is your responsibility to ensure the\nparameter replacement will result in valid JSON.\n\nYou pass the parameters by including them as URL parameters:\n\n::\n\n    {\"$ref\": \"//~/above_example.json?var_name=%22hello%22\"}\n\nWhich will expand to\n\n.. code:: javascript\n\n        {\n            \"hello\": \"value\"\n        }\n\nThe pipe (``|``) symbol can be used to perform some common conversions\n\n.. code:: javascript\n\n        {\n            {{var_name|quote}}: \"value\"\n        }\n\nThe ``quote`` transformation will deal with quoting, so ...\n\n::\n\n    {\"$ref\": \"//~/above_example.json?var_name=hello\"}\n\n... expands to the same:\n\n.. code:: javascript\n\n        {\n            \"hello\": \"value\"\n        }\n\nPlease see\n```expand_template`` <../README.md#function-expand_template>`__ for more\non the parameter replacement, and transformations available\n\n--------------\n\nalso see http://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-json-config",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-json-config",
    "package_url": "https://pypi.org/project/mo-json-config/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-json-config/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-json-config"
    },
    "release_url": "https://pypi.org/project/mo-json-config/1.0.17049/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More JSON Configuration! JSON configuration files with `$ref` and template overlays",
    "version": "1.0.17049",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547987,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f36baff3a0ee0196842e2aa8f6676af922e393cd83f9e8e48da4e900c7f4c75a",
        "md5": "e628ad6d51863f0a93a2ae075c9b7369",
        "sha256": "bb336bf197c4face3632c0c5c4c9949ace21b4fb529ef6a45e1f468d9d79bdd1"
      },
      "downloads": -1,
      "filename": "mo_json_config-1.0.17049-py2.7.egg",
      "has_sig": false,
      "md5_digest": "e628ad6d51863f0a93a2ae075c9b7369",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 8380,
      "upload_time": "2017-02-18T02:10:29",
      "upload_time_iso_8601": "2017-02-18T02:10:29.889176Z",
      "url": "https://files.pythonhosted.org/packages/f3/6b/aff3a0ee0196842e2aa8f6676af922e393cd83f9e8e48da4e900c7f4c75a/mo_json_config-1.0.17049-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a5f6eeb8f5f096034f8e6cd56743851039d231c5a18dfad29409a52407d1064",
        "md5": "7db02f56d31351f53fe113938c607ff7",
        "sha256": "ae1c2d416ee4a2da34a7de10234f3d8b26c1d63dd7b12c02ff50c4c847f81f42"
      },
      "downloads": -1,
      "filename": "mo-json-config-1.0.17049.zip",
      "has_sig": false,
      "md5_digest": "7db02f56d31351f53fe113938c607ff7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16300,
      "upload_time": "2017-02-18T02:10:34",
      "upload_time_iso_8601": "2017-02-18T02:10:34.922769Z",
      "url": "https://files.pythonhosted.org/packages/6a/5f/6eeb8f5f096034f8e6cd56743851039d231c5a18dfad29409a52407d1064/mo-json-config-1.0.17049.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}