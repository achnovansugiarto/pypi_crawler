{
  "info": {
    "author": "Sebastian Angst, Stanislav Khrapov",
    "author_email": "sebastian.angst@dbschenker.com, khrapovs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "[![Documentation Status](https://readthedocs.org/projects/model-quality-report/badge/?version=latest&style=flat-square)](https://model-quality-report.readthedocs.io/en/latest/?badge=latest)\n\n# Model Quality Report\n\nThis packages enables a quick creation of a model quality report, which is returned \nas a `dict`. \n\nMain ingredients are a data splitter creating test and training data according various rules and the quality report itself. The quality report takes care of the splitting, fitting, predicting and finally deriving quality metrics.  \n\n## Documentation\n\nThe official documentation is hosted on ReadTheDocs: [https://model-quality-report.readthedocs.io](https://model-quality-report.readthedocs.io)\n\n## Installing the package\n\nLatest available code:\n```shell\npip install model_quality_report\n```\nSpecific version:\n```shell\npip install model_quality_report==X.Y.Z\n```\n\n## Quickstart\n\n* The `RandomDataSplitter` splits data randomly using `sklearn.model_selection.train_test_split`:\n```python\nX = pd.DataFrame({'a': [1, 2, 3, 4, 5], 'b': ['a', 'b', 'c', 'd', 'e']})\ny = pd.Series(data=range(5))\n\nsplitter = RandomDataSplitter(test_size=0.33, random_state=2)\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* The `TimeDeltaDataSplitter` divides such that data from last period of length `time_delta` is used as test data. Here a `pd.Timedelta` and the date column name is provided:\n```python\nsplitter = TimeDeltaDataSplitter(date_column_name='shipping_date', time_delta=pd.Timedelta(3, unit='h')) \nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* The `SplitDateDataSplitter` splits such that data after a provided date are used as test data. Additionally, the name of the date column has to be provided:\n```python\nsplitter = SplitDateDataSplitter(date_column_name='shipping_date', split_date=pd.Timstamp('2016-01-01'))\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* The `SortedDataSplitter` requires a column with sortable values. Data are divided such that the test data set encompasses last fraction `test_size`. Sorting can be in ascending and descending order. \n```python\nsplitter = SortedDataSplitter(sortable_column_name='shipping_date', test_size=0.2, ascending=True)\nX_train, X_test, y_train, y_test = splitter.split(X, y)\n```\n\n* Using `RegressionQualityReport` class a quality report for a regression model can be created as following:\n\n```python\nsplitter = SplitDateDataSplitter(date_column_name='shipping_date', split_date=pd.Timstamp('2016-01-01'))\nmodel = sklearn.linear_model.LinearRegression()\nquality_reporter = RegressionQualityReport(model, splitter)\nreport = quality_reporter.create_reports()\n```\nAn exemplary report looks as follows:\n```python\n{'metrics': \n    {'explained_variance_score': -6.018595041322246, \n     'mape': 0.3863636363636345, \n     'mean_absolute_error': 4.242424242424224, \n     'mean_squared_error': 29.426997245178825, \n     'median_absolute_error': 2.272727272727268, \n     'r2_score': -10.03512396694206}, \n 'data': \n    {'true': {3: 10, 4: 12, 2: 8}, \n     'predicted': {3: 12.272727272727268, 4: 20.999999999999964, 2: 6.545454545454561}}}  \n```\nNote that the `model` must have a `model.fit` and a `model.predict` function.\n\n## Available Features\n\n**Data Splitter**\n\n`RandomDataSplitter`: splits randomly\n`TimeDeltaDataSplitter`: uses data in last period of length as test data\n`SplitDateDataSplitter`: uses data with timestamp newer than split date as test data\n`SortedDataSplitter`: sorts data along given column and takes last fraction of size x_test as test data\n`ByHorizon`: produces a list of splits of temporal data such that each consecutive train set has one more observation and test set one less\n`ByFrequency`: produces a list of splits of temporal data such that the data is split by a series of dates on a specified frequency\n`FixedDates`: produces a list of splits of temporal data given a list of fixed dates.\n\n**Quality Report**\n\n`RegressionQualityReport`: creates a quality report for a regression model\n`CrossValidationTimeSeriesQualityReport`: creates a quality report for a time series model\n\n**Report Aggregation**\n\n- `ModelComparisonReport` aggregates reports using the list of derivatives of `QualityReportBase`, data, and experiment keys.\n- `ReportAggregator` is designed to aggregate model quality reports from different models that potentially use different input/output data and can not fit into the framework of `ModelComparisonReport`. `ReportAggregator` operates with the list of classes that derive from `ExperimentBase`.  \n\n## Developers should know\n\nCreate a virtual environment and activate it\n```shell\npython -m venv venv\nsource venv/bin/activate\n```\nInstall the development packages\n```shell\npip install -e .[dev]\n```\nand use pre-commit to make sure that your code is blackified automatically (used the `black` package):\n```shell\npre-commit install\n```\nRun tests:\n```shell\npip install -e .[test]\ncoverage run -m unittest discover tests\ncoverage report\n```\nBuild documentation (see more details [here](https://www.mkdocs.org/#getting-started)):\n```shell\npip install -e .[doc]\nmkdocs build\n```\nor use\n```shell\nmkdocs serve\n```\nif you prefer a live, self-refreshing, documentation.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/francesco-calcavecchia/model_quality_report",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "model-quality-report",
    "package_url": "https://pypi.org/project/model-quality-report/",
    "platform": "any",
    "project_url": "https://pypi.org/project/model-quality-report/",
    "project_urls": {
      "Homepage": "https://gitlab.com/francesco-calcavecchia/model_quality_report"
    },
    "release_url": "https://pypi.org/project/model-quality-report/1.2.1/",
    "requires_dist": [
      "pandas",
      "sklearn",
      "pandera",
      "wheel ; extra == 'deploy'",
      "build ; extra == 'deploy'",
      "twine ; extra == 'deploy'",
      "black ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "mkdocs ; extra == 'doc'",
      "pymdown-extensions ; extra == 'doc'",
      "coverage ; extra == 'test'",
      "parameterized ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "This packages enables a quick creation of a report comparing quality of several ML models",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12810034,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc517264aa0159ffeb5be3f149922bc6570ce9193d75d67a7431ec13ebb1559c",
        "md5": "d045b82e42df44bed972abae915e9ffd",
        "sha256": "34eea23e48878acd708224c8ec0d09a81c5934fb6baaa1977561cbc8096947cc"
      },
      "downloads": -1,
      "filename": "model_quality_report-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d045b82e42df44bed972abae915e9ffd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24010,
      "upload_time": "2021-11-15T12:38:43",
      "upload_time_iso_8601": "2021-11-15T12:38:43.898956Z",
      "url": "https://files.pythonhosted.org/packages/fc/51/7264aa0159ffeb5be3f149922bc6570ce9193d75d67a7431ec13ebb1559c/model_quality_report-1.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48462c1d8c8d8442ebd9f68687052990b14492e9f9cc4323f47a5caabe2f8b13",
        "md5": "275c1ccc6e2ea053e3d456c76beea7be",
        "sha256": "c83463cea71d057b147f04e69d8103ca99088f96701a9c8f18ef509db004ef57"
      },
      "downloads": -1,
      "filename": "model_quality_report-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "275c1ccc6e2ea053e3d456c76beea7be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33545,
      "upload_time": "2021-11-15T12:38:45",
      "upload_time_iso_8601": "2021-11-15T12:38:45.610453Z",
      "url": "https://files.pythonhosted.org/packages/48/46/2c1d8c8d8442ebd9f68687052990b14492e9f9cc4323f47a5caabe2f8b13/model_quality_report-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}