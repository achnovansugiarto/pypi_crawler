{
  "info": {
    "author": "CoinK0in",
    "author_email": "12155947+CoinK0in@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# mkdocs-encryptcontent-plugin\n\n*This plugin allows you to have password protected articles and pages in MKdocs.* \n\n*The content is encrypted with AES-256 in Python using PyCryptodome, and decrypted in the browser with Crypto-JS.*\n\n*It has been tested in Python Python 3.5+*\n\n**Usecase**\n\n> I want to be able to protect my articles with password. And I would like this protection to be as granular as possible.\n>\n> It is possible to define a password to protect each article independently or a global password to encrypt all of them.\n>\n> If a global password exists, all articles and pages are encrypted with this password.\n>\n> If a password is defined in an article or a page, it is always used even if a global password exists.\n>\n> If a password is defined as an empty character string, the page is not encrypted.\n\n\n## Installation\n\nInstall the package with pip:\n\n```bash\npip install mkdocs-encryptcontent-plugin\n```\n\nInstall the package from source with pip:\n\n```bash\ncd mkdocs-encryptcontent-plugin/\npython3 setup.py sdist bdist_wheel\npip3 install dist/mkdocs_encryptcontent_plugin-1.0.0-py3-none-any.whl\n```\n\nEnable the plugin in your `mkdocs.yml`:\n\n```yaml\nplugins:\n    - encryptcontent: {}\n```\n\nYou are then able to use the meta tag `password: secret_password` in your markdown files to protect them.\n\n> **Note:** If you have no `plugins` entry in your config file yet, you'll likely also want to add the `search` plugin. MkDocs enables it by default if there is no `plugins` entry set, but now you have to enable it explicitly.\n\n\n### Using global password protection\n\nAdd `global_password: your_password` in plugin config variable, to protect by default your articles with this password\n\n```yaml\nplugins:\n    - encryptcontent:\n        global_password: 'your_password'\n```\n\nIf a password is defined in an article, it will ALWAYS overwrite the global password. \n\n> **NOTE** Keep in mind that if the `password:` tag exists without value in an article, it will not be protected !\n\n### Extra vars customization\n\nOptionally you can use some extra variables in plugin config to customize default messages.\n\n```yaml\nplugins:\n    - encryptcontent:\n        title_prefix: '[LOCK]'\n        summary: 'another informational message to encrypted content'\n        placeholder: 'another password placeholder'\n        decryption_failure_message: 'another informational message when decryption fail'\n        encryption_info_message: 'another information message when you dont have acess !'\n```\n\nDefault prefix title is `[Protected]`\n\nDefault summary message is `This content is protected with AES encryption.`\n\nDefault password palceholder is `Provide password and press ENTER`\n\nDefault decryption failure message is `Invalid password.`\n\nDefaut encryption information message is `Contact your administrator for access to this page.`\n\n> **NOTE** Adding a prefix to the title does not change the default navigation path !\n\n\n## Features\n\n### HighlightJS support\n\nIf your theme use HighlightJS module to improve color, set `highlightjs: true` in your `mkdocs.yml`, to enable color reloading after decryption process.\n\nWhen enable the following part of the template is add to force reloading decrypted content.\n\n```jinja\n{% if hljs %}\ndocument.getElementById(\"mkdocs-decrypted-content\").querySelectorAll('pre code').forEach((block) => {\n    hljs.highlightBlock(block);\n});\n{% endif %}\n```\n\n### Arithmatex support\n\nRelated to [issue #12](https://github.com/CoinK0in/mkdocs-encryptcontent-plugin/issues/12)\n\nIf Arithmatex markdown extension is set in your markdown extensions to improve math equations rendering, reload rendering after decryption process.\n\nWhen enable the following part of the template is add to force math equations rendering on decrypted content.\n\n```jinja\n{% if arithmatex %}MathJax.typesetPromise(){% endif %}\n```\n\n> **NOTE** It has been tested in Arithmatex `generic` mode only. \n\n### Tag encrypted page\n\nRelated to [issue #7](https://github.com/CoinK0in/mkdocs-encryptcontent-plugin/issues/7)\n\nYou can add `tag_encrypted_page: True` in plugin config variable, to enable tagging of encrypted pages.\n\nWhen this feature is enabled, an additional attribute `encrypted` with value `True,` is added to the mkdocs type `mkdocs.nav.page` object.\n\n```yaml\nplugins:\n    - encryptcontent:\n        tag_encrypted_page: True\n```\n\nIt becomes possible to use this attribute in the jinja template of your theme, as a condition to perform custom modification.\n\n```jinja\n{%- for nav_item in nav %}\n    {% if nav_item.encrypted %}\n        <!-- Do something --> \n    {% endif %}\n{%- endfor %}\n```\n\nFor example, in your template, you can use conditional check to add custom class :\n\n```jinja\n<a {% if nav_item.encrypted %}class=\"mkdocs-encrypted-class\"{% endif %}href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a>\n```\n\n### Rebember password\n\nRelated to [issue #6](https://github.com/CoinK0in/mkdocs-encryptcontent-plugin/issues/6)\n\n> :warning: **This feature is not really secure !** Password are store in clear text inside local cookie without httpOnly flag.\n>\n> Instead of using this feature, I recommend to use a password manager with its web plugins.\n> For example **KeepassXC** allows you, with a simple keyboard shortcut, to detect the password field `mkdocs-content-password` and to fill it automatically in a much more secure way.\n\nIf you do not have password manager, you can set `remember_password: True` in your `mkdocs.yml` to enable password remember feature.\n\nWhen enabled, each time you fill password form and press `Enter` a cookie is create with your password as value. \nWhen you reload the page, if you already have an 'encryptcontent' cookie in your browser,\nthe page will be automatically decrypted using the value of the cookie.\n\nBy default, the cookie is created with a `path=` relative to the page on which it was generated.\nThis 'specific' cookie will always be used as first attempt to decrypt the current page when loading.\n\nIf your password is a global password, you can fill in the `mkdocs-content-password` field,\nthen use the keyboard shortcut `CTRL + ENTER` instead of the classic `ENTER`. \nThe cookie that will be created with a `path=/` making it accessible, by default, on all the pages of your site.\n\nThe form of decryption remains visible as long as the content has not been successfully decrypted,\n which allows in case of error to modify the created cookie.\n\nAll cookies created with this feature have the default security options `Secure` and` SameSite=Strict`, just cause ...\n\nHowever *(optionally)*, its possible to remove these two security options by adding `disable_cookie_protection: True` in your` mkdocs.yml`.\n\nYour configuration should look like this when you enabled this feature :\n```yaml\nplugins:\n    - encryptcontent:\n        remember_password: True\n        disable_cookie_protection: True   # <-- Really a bad idea\n```\n\n### Add button\n\nAdd `password_button: True` in plugin config variable, to add button to the right of the password field.\n\nWhen enable, it allows to decrypt the content without creating a cookie *(if remember password feature is activated)*\n\nOptionnally, you can add `password_button_text: 'custome_text_button'` to customize the button text.\n\n```yaml\nplugins:\n    - encryptcontent:\n        password_button: True\n        password_button_text: 'custome_text_button'\n```\n\n\n### Encrypt Something\n\nRelated to [issue #9](https://github.com/CoinK0in/mkdocs-encryptcontent-plugin/issues/9)\n\nYou **have to** enable [feature tag encrypt page](https://github.com/CoinK0in/mkdocs-encryptcontent-plugin#tag-encrypted-page) for this feature to work properly.\n\nAdd `encrypted_something: {}` in the plugin configuration variable, to encrypt something else.\n\nThe syntax of this new variable **MUST** follow the yaml format of a dictionary. \nChild elements of `encrypted_something` are build with a key `<unique name>` in string format and a list as value. \nThe list have to be contructed with the name of an HTML element `<html tag>` as first item and `id` or `class` as the second item.\n\n```yaml\nencrypted_something:\n    <uniq name>: [<html tag>, <'class' or 'id'>]\n```\n\nThe `<unique name>` key identifies the name of a specific element of the page that will be searched by beautifulSoup.\nThe first value of the `<html tag>` list identifies the type of HTML tag in which the name is present.\nThe second value of the list, as string `'id'` or `'class'`, specifies the type of the attribute which contains the unique name in the html tag.\n\nPrefer to use an `'id'`, however depending on the template of your theme, it is not always possible to use the id.\nSo we can use the class attribute to define your unique name inside html tag. \nBeautifulSoup will encrypt all HTML elements discovered with the class.\n\nWhen the feature is enabled, you can use any methods *(password, button, cookie)* to decrypt every elements encrypted on the page.\n\nBy default **every child items** are encrypted and the encrypted elements have `style=display:none` to hide their content.\n\n#### How to use it :exploding_head:  ?! Examples\n\nUse the `page.encrypted` conditions to add attributes of type id or class in the HTML templates of your theme. \nEach attribute is identified with a unique name and is contained in an html element. \nThen add these elements in the format of a yaml dictionary under the variable `encrypted_something`.\n\n1. For example, encrypt ToC in a theme where ToC is under 'div' element like this :\n\n```jinja\n<div class=\"..\" {% if page.encrypted %}id=\"mkdocs-encrypted-toc\"{% endif %}>\n    <ul class=\"..\">\n        <li class=\"..\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n         <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    </ul>\n</div>\n```\n\nSet your configuration like this : \n\n```yaml\n      encrypted_something:\n          mkdocs-encrypted-toc: [div, id]\n```\n\n2. Other example, with multiples target. In you Material Theme, you want to encrypt ToC content and Footer.\n\nMateriel generate 2 `<nav>` structure with the same template `toc.html`, so you need to use a `class` instead of an id for this part.\nThe footer part, is generated by the `footer.html` template in a classic div so an `id` is sufficient\n\nAfter modification, your template looks like this :\n```jinja (toc.html)\n<nav class=\"md-nav md-nav--secondary {% if page.encrypted %}mkdocs-encrypted-toc{% endif %}\" aria-label=\"{{ lang.t('toc.title') }}\">\n    <label class=\"md-nav__title\" for=\"__toc\"> ... </label>\n    <ul class=\"md-nav__list\" data-md-scrollfix> ... </ul>\n</nav>\n```\n```jinja (footer.html)\n<footer class=\"md-footer\">\n    <div class=\"md-footer-nav\" {% if page.encrypted %}id=\"mkdocs-encrypted-footer\"{% endif %}> ... </div>\n    <div class=\"md-footer-meta md-typeset\" {% if page.encrypted %}id=\"mkdocs-encrypted-footer-meta\"{% endif %}>\n</footer>\n```\n\nYour configuration like this :\n```yaml\n      encrypted_something:\n          mkdocs-encrypted-toc: [nav, class]\n          mkdocs-encrypted-footer: [div, id]\n          mkdocs-encrypted-footer-meta: [div, id]\n```\n\n\n## Contributing\n\nFrom reporting a bug to submitting a pull request: every contribution is appreciated and welcome.\nReport bugs, ask questions and request features using [Github issues][github-issues].\nIf you want to contribute to the code of this project, please read the [Contribution Guidelines][contributing].\n\n[mkdocs-plugins]: http://www.mkdocs.org/user-guide/plugins/\n[github-issues]: https://github.com/CoinK0in/mkdocs-encryptcontent-plugin/issues\n[contributing]: CONTRIBUTING.md\n\n### Contributors\n\n- [anthonyeden](https://github.com/anthonyeden)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coink0in/mkdocs-encryptcontent-plugin/",
    "keywords": "mkdocs python markdown encrypt decrypt content",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mkdocs-encryptcontent-plugin",
    "package_url": "https://pypi.org/project/mkdocs-encryptcontent-plugin/",
    "platform": "",
    "project_url": "https://pypi.org/project/mkdocs-encryptcontent-plugin/",
    "project_urls": {
      "Homepage": "https://github.com/coink0in/mkdocs-encryptcontent-plugin/"
    },
    "release_url": "https://pypi.org/project/mkdocs-encryptcontent-plugin/1.0.0/",
    "requires_dist": [
      "mkdocs",
      "pyyaml",
      "pycryptodome",
      "beautifulsoup4"
    ],
    "requires_python": ">=3.5",
    "summary": "A MkDocs plugin that encrypt/decrypt markdown content with AES",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16577901,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cab9aadce4a8c43b0bcd4f920b45de9bde91a98d12ebbb3e6411dd817758c9d",
        "md5": "13f96518fa9adb1900d58d88819f0426",
        "sha256": "032693ca567dc73c50d05eb09c65e68cbcf54298bce340c21f96c960946eae27"
      },
      "downloads": -1,
      "filename": "mkdocs_encryptcontent_plugin-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "13f96518fa9adb1900d58d88819f0426",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 13459,
      "upload_time": "2021-01-01T09:35:47",
      "upload_time_iso_8601": "2021-01-01T09:35:47.496696Z",
      "url": "https://files.pythonhosted.org/packages/4c/ab/9aadce4a8c43b0bcd4f920b45de9bde91a98d12ebbb3e6411dd817758c9d/mkdocs_encryptcontent_plugin-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b8e4932280e375c607a5286f3f595cf6e81f34bd7a5d2b644dbc1f13f76beaa",
        "md5": "47a432e7b9704a819569e2e908b5a878",
        "sha256": "857aa92a7bd4747f210ff8067edf528152e24043c09a9edae55f6dc99cb039d4"
      },
      "downloads": -1,
      "filename": "mkdocs-encryptcontent-plugin-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47a432e7b9704a819569e2e908b5a878",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 14151,
      "upload_time": "2021-01-01T09:35:50",
      "upload_time_iso_8601": "2021-01-01T09:35:50.248624Z",
      "url": "https://files.pythonhosted.org/packages/0b/8e/4932280e375c607a5286f3f595cf6e81f34bd7a5d2b644dbc1f13f76beaa/mkdocs-encryptcontent-plugin-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}