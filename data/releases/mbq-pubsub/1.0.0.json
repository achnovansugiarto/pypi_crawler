{
  "info": {
    "author": "Managed by Q, Inc.",
    "author_email": "open-source@managedbyq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# mbq.pubsub\n\n[![PyPI Version](https://img.shields.io/pypi/v/mbq.pubsub.svg)](repo)\n[![PyPI License](https://img.shields.io/pypi/l/mbq.pubsub.svg)](repo)\n[![Python Versions](https://img.shields.io/pypi/pyversions/mbq.pubsub.svg)](repo)\n[![Travis CI Status](https://img.shields.io/travis/managedbyq/mbq.pubsub/master.svg)](repo)\n\n[repo]: https://pypi.python.org/pypi/mbq.pubsub\n\n\n## Installation\n\n```bash\n$ pip install mbq.pubsub\nðŸš€âœ¨\n```\n\nGuaranteed fresh.\n\n## Configuration\n\n```python\n# settings.py\n\nSERVICE_NAME = \"my-service\"\n\nPUBSUB = {\n    \"ENV\": mbq.get_environment(\"ENV_NAME\"),\n    \"SERVICE\": SERVICE_NAME,\n    \"QUEUES\": [\n        \"foo-updates\",\n        \"bar-updates\",\n    ],\n    \"MESSAGE_HANDLERS\": {\n        \"foo.updated\": \"path.to.handlers.handle_foo_updated\",\n        \"bar.updated\": \"path.to.handlers.handle_bar_updated\",\n    },\n}\n\nINSTALLED_APPS = {\n  ...\n  'mbq.pubsub',\n  ...\n}\n```\n\n```yaml\n# convox.yml\n\nservices:\n  foo-consumer:\n    image: {{DOCKER_IMAGE_NAME}}\n    command: newrelic-admin run-python -m manage pubsub consume --queue foo-updates\n    init: true\n    environment:\n      - \"*\"\n\n  bar-consumer:\n    image: {{DOCKER_IMAGE_NAME}}\n    command: newrelic-admin run-python -m manage pubsub consume --queue bar-updates\n    init: true\n    environment:\n      - \"*\"\n```\n\n### Using PubSub Without a Database\n\nIf your service does not have a database - fear not. The Infra team hath taken pity on you and your brethren. \nSimply add the setting `\"USE_DATABASE\": False` to your `PUBSUB` config. \n\nThings to keep in mind:\n- There will be no Django admin for viewing/deleting/replaying DLQ messages. \n- To replay the DLQ use the management command `./manage.py pubsub replay --queue <queue_name> <number_of_messages>`.\n\n\n### Local Development\n\nAdd `127.0.0.1 pubsub.lcl.mbq.io` to your `/etc/hosts`.\n\nFind the `env/pubsub/lcl.env` Secure Note in 1Password and copy it to `env/lcl.env`.\n\n```sh\n$ pbpaste > env/lcl.env\n```\n\nRun migrations and bring up admin the server:\n\n```sh\n$ docker-compose run tests-admin python -m manage migrate\n$ docker-compose up tests-admin\n```\n\nTo use the Django admin, you'll need a superuser:\n\n```sh\n$ docker-compose run tests-admin python -m manage createsuperuser\n```\n\nTo end-to-end test mbq.pubsub, you can publish a test message from SNS with:\n```sh\n$ docker-compose run tests-admin python -m manage publish_exception\n```\n\nThen bring up the consumer:\n```sh\n$ docker-compose up pubsub-pubsub-consume-updates\n```\n\nThe test message will eventually land on the DLQ, which you can inspect & replay from http://pubsub.lcl.mbq.io:8080/admin/pubsub/undeliverablemessage",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/managedbyq/mbq.pubsub",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "Managed by Q, Inc.",
    "maintainer_email": "open-source@managedbyq.com",
    "name": "mbq.pubsub",
    "package_url": "https://pypi.org/project/mbq.pubsub/",
    "platform": "",
    "project_url": "https://pypi.org/project/mbq.pubsub/",
    "project_urls": {
      "Homepage": "https://github.com/managedbyq/mbq.pubsub"
    },
    "release_url": "https://pypi.org/project/mbq.pubsub/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MBQ PubSub",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5514201,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00c3d56485e5a088f6efd1a5d94ac47dd62eec9589a9ac29bba4bbc9751039ab",
        "md5": "617a28172a4309e256d85fd0b27e9738",
        "sha256": "5e7a43962b9f39d3b8b051152760dc3173ef5bef9141f3aaf9d074969d677bcb"
      },
      "downloads": -1,
      "filename": "mbq.pubsub-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "617a28172a4309e256d85fd0b27e9738",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12870,
      "upload_time": "2019-01-18T18:50:15",
      "upload_time_iso_8601": "2019-01-18T18:50:15.124870Z",
      "url": "https://files.pythonhosted.org/packages/00/c3/d56485e5a088f6efd1a5d94ac47dd62eec9589a9ac29bba4bbc9751039ab/mbq.pubsub-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}