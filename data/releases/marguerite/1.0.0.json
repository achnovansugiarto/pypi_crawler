{
  "info": {
    "author": "teitei-tk",
    "author_email": "teitei.tk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Marguerite\n==========\n\nMarguerite provides a declarative, consistent accessor to data layer.\n\n--------------\n\nDependencies\n============\n\n-  Python 2.7 or later\n-  Werkzeug 0.12.7 or later\n\nUsage Flow.\n===========\n\n1. define formater. \\`\\`\\`python from marguerite import\n   AbstractFormater, Order\n\nclass User(AbstractFormater): struct = { \"id\" : int(), \"name\" : str(),\n\"email\" : str(), }\n\norders = Order( user = \"\"\" SELECT \\* FROM **table** WHERE id = :id \"\"\",\n\n::\n\n    users = \"\"\"\n        SELECT\n            *\n        FROM\n            __table__\n        WHERE\n            id in (:ids)\n    \"\"\"\n\n) \\`\\`\\`\n\n2. get data layer accessor object \\`\\`\\`python from marguerite import\n   Marguerite, AbstractAccessor from marguerite.accessors import bind\n\nclass Accessor(AbstractAccessor): def get(self, name, value={}): order =\nself.formater.get\\_order(name) return bind(order, value)\n\nmarguerite = Marguerite(None, Accessor) accessor =\nmarguerite.get\\_accessor(\"path.to.User\") \\`\\`\\`\n\n3. fetch data \\`\\`\\`python # as dict result = accessor.get(\"user\", {\n   \"id\": 1 }) print(result) # result \"\"\" SELECT\n\n   -  FROM **table** WHERE id = 1 \"\"\"\n\nas array\n========\n\nresult = accessor.find(\"users\", { \"ids\": [1, 2] }) print(result) #\nresult \"\"\" SELECT \\* FROM **table** WHERE id in (1, 2) \"\"\" \\`\\`\\`",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/teitei-tk/Marguerite/archive/master.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teitei-tk/Marguerite",
    "keywords": "Marguerite,dispatcher,architecture",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Marguerite",
    "package_url": "https://pypi.org/project/Marguerite/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Marguerite/",
    "project_urls": {
      "Download": "https://github.com/teitei-tk/Marguerite/archive/master.tar.gz",
      "Homepage": "https://github.com/teitei-tk/Marguerite"
    },
    "release_url": "https://pypi.org/project/Marguerite/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Marguerite provides a declarative, consistent accessor to data layer.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2811305,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38a84844ea5805e3ba90e7ae22593372b43c0a3ad0a3f8eaa8eb7887a35a2f16",
        "md5": "72a80cc97481608b98257fffdffbe4cd",
        "sha256": "7dd81caa2570a82c9eaa0d580a65a645c0d7a1f64bf4a16cf8ef82b0bffc38ff"
      },
      "downloads": -1,
      "filename": "Marguerite-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "72a80cc97481608b98257fffdffbe4cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3677,
      "upload_time": "2017-04-10T14:11:54",
      "upload_time_iso_8601": "2017-04-10T14:11:54.066150Z",
      "url": "https://files.pythonhosted.org/packages/38/a8/4844ea5805e3ba90e7ae22593372b43c0a3ad0a3f8eaa8eb7887a35a2f16/Marguerite-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}