{
  "info": {
    "author": "Roger Hunwicks",
    "author_email": "roger@tonic-solutions.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django Binary Database Files\n============================\n\n[![](https://img.shields.io/pypi/v/django-binary-database-files.svg)](https://pypi.python.org/pypi/django-binary-database-files) [![Build Status](https://img.shields.io/travis/kimetrica/django-binary-database-files.svg?branch=master)](https://travis-ci.org/kimetrica/django-binary-database-files/) [![](https://pyup.io/repos/github/kimetrica/django-binary-database-files/shield.svg)](https://pyup.io/repos/github/kimetrica/django-binary-database-files)\n\nThis is a storage system for Django that stores uploaded\nfiles in binary fields in the database. Files can be served from the database\n(usually a bad idea), the file system, or a CDN.\n\nWARNING: It is generally a bad idea to serve static files from Django,\nbut there are some valid use cases. If your Django app is behind a caching\nreverse proxy and you need to scale your application servers, it may be\nsimpler to store files in the database.\n\nBased upon django-database-files by [Kimetrica](https://github.com/kimetrica/django-database-files), [rhunwicks](https://github.com/rhunwicks/django-database-files), [chrisspen](https://github.com/chrisspen/django-database-files-3000), [bfirsh](https://github.com/bfirsh/django-database-files) but updated to work with Django 1.11-3.0, Python 3.5+ and to use a binary field for storage.\n\nRequires:\n\n  * Django 1.11 - 3.0\n\nInstallation\n------------\n\nSimply install via pip with:\n\n    pip install django-binary-database-files\n\nUsage\n-----\n\nIn `settings.py`, add `binary_database_files` to your `INSTALLED_APPS` and add\nthis line:\n\n    DEFAULT_FILE_STORAGE = 'binary_database_files.storage.DatabaseStorage'\n\nNote, the `upload_to` parameter is still used to synchronize the files stored\nin the database with those on the file system, so new and existing fields\nshould still have a value that makes sense from your base media directory.\n\nIf you are adding the package to an existing Django installation with pre-existing\nfiles, run:\n\n    python manage.py binary_database_files_load\n\nAdditionally, if you want to export all files in the database back to the file\nsystem, run:\n\n    python manage.py binary_database_files_dump\n\nNote, that when a field referencing a file is cleared, the corresponding file\nin the database and on the file system will not be automatically deleted.\nTo delete all files in the database and file system not referenced by any model\nfields, run:\n\n    python manage.py binary_database_files_cleanup\n\nSettings\n-------\n\n* `DB_FILES_AUTO_EXPORT_DB_TO_FS` = `True`|`False` (default `True`)\n\n    If true, when a file is uploaded or read from the database, a copy will be\n    exported to your media directory corresponding to the FileField's upload_to\n    path, just as it would with the default Django file storage.\n\n    If false, the file will only exist in the database.\n\n* `DATABASE_FILES_URL_METHOD` = `URL_METHOD_1`|`URL_METHOD_2` (default `URL_METHOD_1`)\n\n    Defines the method to use when rendering the web-accessible URL for a file.\n\n    If `URL_METHOD_1`, assumes all files have been exported to the filesystem and\n    uses the path corresponding to your `settings.MEDIA_URL`.\n\n    If `URL_METHOD_2`, uses the URL bound to the `database_file` view\n    to dynamically lookup and serve files from the filesystem or database.\n\n    In this case, you will also need to updates your `urls.py` to include the view\n    that serves the files:\n\n        urlpatterns = patterns('',\n            # ... the rest of your URLconf goes here ...\n\n            # Serve Database Files directly\n            url(r'', include('binary_database_files.urls')),\n        )\n\n* `DATABASE_FILES_BASE_URL`\n\n    Allows the `url` method of the storage backend to return an absolute URL if provided.\n\n\nDevelopment\n-----------\n\nCode should be linted with:\n\n    ./pep8.sh\n\nTests require the Python development headers to be installed, which you can install on Ubuntu with:\n\n    sudo apt-get install python3-dev python3.6-dev\n\nTo run unittests across multiple Python versions, install:\n\n    sudo apt-get install python3.6-minimal python3.6-dev python3.7-minimal python3.7-dev\n\nTo run all [tests](http://tox.readthedocs.org/en/latest/):\n\n    export TESTNAME=; tox\n\nTo run tests for a specific environment (e.g. Python 3.5 with Django 1.11):\n\n    export TESTNAME=; tox -e py35-django111\n\nTo run a specific test:\n\n    export TESTNAME=.test_adding_file; tox -e py35-django111\n\nTo build and deploy a versioned package to PyPI, verify [all unittests are passing](https://travis-ci.com/kimetrica/django-binary-database-files/), then increase (and commit) the version number in `binary_database_files/__init__.py` and then run:\n\n    python setup.py sdist\n    python setup.py sdist upload",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kimetrica/django-binary-database-files/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-binary-database-files",
    "package_url": "https://pypi.org/project/django-binary-database-files/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-binary-database-files/",
    "project_urls": {
      "Homepage": "https://github.com/kimetrica/django-binary-database-files/"
    },
    "release_url": "https://pypi.org/project/django-binary-database-files/1.0.12/",
    "requires_dist": null,
    "requires_python": ">=3.4,<3.9",
    "summary": "A storage system for Django that stores uploaded files in both the database and file system.",
    "version": "1.0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14467862,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01d0097c132a2ab76b4e7ebd5624a6ccbbe789ca02d281b58f1cb7c144a79468",
        "md5": "c43b2739b234c87008e9288d5f57cec7",
        "sha256": "c5dffbc10888c15b423b4122b49a20ecd7b95200492406118a620b9f0c8addac"
      },
      "downloads": -1,
      "filename": "django-binary-database-files-1.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "c43b2739b234c87008e9288d5f57cec7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4,<3.9",
      "size": 34522,
      "upload_time": "2020-05-20T16:29:23",
      "upload_time_iso_8601": "2020-05-20T16:29:23.317657Z",
      "url": "https://files.pythonhosted.org/packages/01/d0/097c132a2ab76b4e7ebd5624a6ccbbe789ca02d281b58f1cb7c144a79468/django-binary-database-files-1.0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}