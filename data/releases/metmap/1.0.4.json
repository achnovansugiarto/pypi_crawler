{
  "info": {
    "author": "Lasse Ebdrup Pedersen",
    "author_email": "laeb@biosustain.dtu.dk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: Free for non-commercial use",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# metmap\nDNA methyltransferase binding motif plasmid assembler\n\n## Overall purpose:\n* To identify the motifs of multiple DNA methyltransferases (DNA MTase) simultaneously.\n\n### Quick start\n* This script requires python 3.6 or newer.\n* Install using \"pip install metmap\"\n* This will put a script named \"run_metmap.py\" in your pythons bin folder.\n  * Linux: You should just be able to type \"run_metmap.py\" from terminal\n  * Windows: The script will be placed in your python folders \"Scripts\" subfolder and you can run it with \"python path\\to\\python\\Scripts\\run_metmap.py\" from command line\n  * Mac: Who knows..probably works like linux?\n\n### Test\nYou can download the tests/test_data.txt and run  \n```run_metmap.py test_data.txt```  \nThis should generate a cas1.fa and cas1.gb file.\n\n## Overview:\n* You have an organism with multiple identified DNA MTases and you wish to know their individual motifs.\n* You use NGS to obtain motifs of all methylated DNA sites.\n  * Some of those motifs will contain ambiguous bases and some will not\n* You submit those motifs to this program\n* This program then stitches these motifs together in random order\n* Motifs may contain ambiguous bases per the IUPAC nucleotide code\n  * We can't synthesize lots of ambiguous bases, so we \"de-ambigulate\" them before putting them into the final construct.\n  * De-ambigulation happens according to 1 of 2 rules:\n    * Rule 1:\n      * Pick L random variants of the motif. E.g. Motif ATGNNTTA have a total of 16 possible actual sequences. If L<16 then the program will random pick L variants (without duplicates). If L>16 then each possible variant will be picked at least L/16 times and some will be picked 1 more than that.\n    * Rule 2:\n      * Make K copies of each completely \"de-ambigulated\" variant: E.g. the sequence \"SATC\" will then be treated as 2 sequences: \"GATC\" and \"CTAC\" that will each appear in K copies.\n* We put M N's between each motif\n* And the program will output P versions of these cassettes\n* You then clone this cassette into a plasmid with 1 DNA MTase in each plasmid.\n* You then transform this library into an organism that doesnt natively methylate DNA.\n* Grow, Harvest, Sequence plasmids.\n* ?\n* Profit!  \n\n\n## Motif file format\n* The motifs should be stored in a standard text file\n* One motif per line, then a comma then a 1 or a 2 to indicate whether either rule 1 or 2 should be used for this motif\n  Example:  \n  ATGCATGCATGC, 1  \n  STGCAGTCATCGTTK, 1  \n  ATCNNNNAAA, 2  \n  CGTAGCANNNATCGATGC, 2  \n\n\n### IUPAC nucleotide code:\n|code | nucs|\n|:---:|:---:|\n|R|A or G|\n|Y|\tC or T  \n|S|\tG or C  \n|W|\tA or T  \n|K|\tG or T  \n|M|\tA or C  \n|B|\tC or G or T  \n|D|\tA or G or T  \n|H|\tA or C or T  \n|V|\tA or C or G  \n|N|\tany base  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cfblaeb/metmap",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metmap",
    "package_url": "https://pypi.org/project/metmap/",
    "platform": "",
    "project_url": "https://pypi.org/project/metmap/",
    "project_urls": {
      "Homepage": "https://github.com/cfblaeb/metmap"
    },
    "release_url": "https://pypi.org/project/metmap/1.0.4/",
    "requires_dist": [
      "biopython"
    ],
    "requires_python": ">=3.6",
    "summary": "A tool for generating DNA MTase motif testing sequences",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4608013,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09aae1ae4ce003d298b1fed40e36485693088ebd19daa4c804c10318a6c3e86f",
        "md5": "f42bd62f8e04b411e074acd3e178d14e",
        "sha256": "1d4f10b59da1b77025b0f671c09a8bc996c3ba8180257bcdcaa6ba39f60c6050"
      },
      "downloads": -1,
      "filename": "metmap-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f42bd62f8e04b411e074acd3e178d14e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6199,
      "upload_time": "2018-12-17T13:23:20",
      "upload_time_iso_8601": "2018-12-17T13:23:20.966961Z",
      "url": "https://files.pythonhosted.org/packages/09/aa/e1ae4ce003d298b1fed40e36485693088ebd19daa4c804c10318a6c3e86f/metmap-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f80fd2b8e51a13659f46c7cbc3a447ea1e0e22ecf47ba49cd1903021be5d7515",
        "md5": "a3fbab8efe5acc30080e724cfc27a999",
        "sha256": "0acae02a22a52e96941f59b754666e0d8b985bcb6aa12384047e8b28073e99fe"
      },
      "downloads": -1,
      "filename": "metmap-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a3fbab8efe5acc30080e724cfc27a999",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5754,
      "upload_time": "2018-12-17T13:23:22",
      "upload_time_iso_8601": "2018-12-17T13:23:22.159965Z",
      "url": "https://files.pythonhosted.org/packages/f8/0f/d2b8e51a13659f46c7cbc3a447ea1e0e22ecf47ba49cd1903021be5d7515/metmap-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}