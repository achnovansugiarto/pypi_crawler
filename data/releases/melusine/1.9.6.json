{
  "info": {
    "author": "Sacha Samama, Tom Stringer, Antoine Simoulin, Benoit Lebreton",
    "author_email": "ssamama@quantmetry.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Melusine\n\n<!-- <img src=`docs/_static/melusine.png` width=`200`/> -->\n![](docs/_static/melusine.png)\n\n[![pypi badge](https://img.shields.io/pypi/v/melusine.svg)](https://pypi.python.org/pypi/melusine)\n[![Build Status](https://travis-ci.org/MAIF/melusine.svg?branch=master)](https://travis-ci.org/MAIF/melusine)\n[![documentation badge](https://readthedocs.org/projects/melusine/badge/?version=latest)](https://readthedocs.org/projects/melusine/)\n\n- Free software: Apache Software License 2.0\n- Documentation: [https://melusine.readthedocs.io](https://melusine.readthedocs.io).\n\n# Overview\n\n**Melusine** is a high-level Python library for email classification and feature extraction,\nwritten in Python and capable of running on top of Scikit-Learn, Keras or Tensorflow.\nIt is developed with a focus on emails written in french.\n\nUse **Melusine** if you need a library which :\n  * Supports both convolutional networks and recurrent networks, as well as combinations of the two.\n  * Runs seamlessly on CPU and GPU.\n\n**Melusine** is compatible with `Python >= 3.5`.\n\n\n## The Melusine package\n\nThis package is designed for the preprocessing, classification and automatic summarization of emails written in french.\n\n<!-- <img src=`docs/_static/schema_1.png` width=`600`/> -->\n![](docs/_static/schema_1.png)\n\n**3 main subpackages are offered :**\n\n* ``prepare_email`` : to preprocess and clean emails.\n* ``summarizer`` : to extract keywords from an email.\n* ``models`` : to classify e-mails according to categories pre-defined by the user or compute sentiment score based on sentiment described by the user with seed words.\n\n**2 other subpackages are offered as building blocks :**\n\n* ``nlp_tools`` : to provide classic NLP tools such as tokenizer, phraser and embeddings.\n* ``utils`` : to provide a *TransformerScheduler* class to build your own transformer and integrate into a scikit-learn Pipeline.\n\n**An other subpackage is also provided** to manage, modify or add parameters such as : regular expressions, keywords, stopwords, etc.\n\n* ``config`` : contains *`ConfigJsonReader`* class to setup and handle a *conf.json* file. This JSON file is the core of this package since it's used by different submodules to preprocess the data.\n\n**2 other subpackages are offered to provide a dashboard app and ethics guidelines for AI project :**\n\n* ``data`` : contains a classic data loader and provide a *StreamLit application* with exploratory dashboards on input data and models.\n\n* ``ethics_guidelines`` : to provide an Ethics Guide to evaluate AI project, with guidelines and questionnaire. The questionnaire is based on criteria derived in particular from the work of the European Commission and grouped by categories.\n\n## Getting started: 30 seconds to Melusine\n\n### Installation\n\n```\npip install melusine\n```\n\nTo use Melusine in a project\n\n```python\nimport melusine\n```\n\n### Input data : Email DataFrame\n\nThe basic requirement to use Melusine is to have an input e-mail DataFrame with the following columns:\n\n- *body*   : Body of an email (single message or conversation history)\n- *header* : Header/Subject of an email\n- *date*   : Reception date of an email\n- *from*   : Email address of the sender\n- *to*     : Email address of the recipient\n- *label* (optional): Label of the email for a classification task (examples: Business, Spam, Finance or Family)\n\n| body                       | header         | date                           | from                         | to                             | label   |\n|:---------------------------|:--------------:|:------------------------------:|:----------------------------:|:-------------------------------------:|:-------:|\n| Thank you.\\\\nBye,\\\\nJohn   | Re: Your order | jeudi 24 mai 2018 11 h 49 CEST | anonymous.sender@unknown.com | anonymous.recipient@unknown.fr | label_1Â |\n\nTo import the test dataset:\n\n```python\nfrom melusine.data.data_loader import load_email_data\n\ndf_email = load_email_data()\n```\n\n\n### Pre-processing pipeline\n\nA working pre-processing pipeline is given below:\n\n```python\nfrom sklearn.pipeline import Pipeline\nfrom melusine.utils.transformer_scheduler import TransformerScheduler\nfrom melusine.prepare_email.manage_transfer_reply import check_mail_begin_by_transfer, update_info_for_transfer_mail, add_boolean_transfer, add_boolean_answer\nfrom melusine.prepare_email.build_historic import build_historic\nfrom melusine.prepare_email.mail_segmenting import structure_email\nfrom melusine.prepare_email.body_header_extraction import extract_last_body\nfrom melusine.prepare_email.cleaning import clean_body\n\nManageTransferReply = TransformerScheduler(\nfunctions_scheduler=[\n    (check_mail_begin_by_transfer, None, ['is_begin_by_transfer']),\n    (update_info_for_transfer_mail, None, None),\n    (add_boolean_answer, None, ['is_answer']),\n    (add_boolean_transfer, None, ['is_transfer'])\n])\n\nEmailSegmenting = TransformerScheduler(\nfunctions_scheduler=[\n    (build_historic, None, ['structured_historic']),\n    (structure_email, None, ['structured_body'])\n])\n\nCleaning = TransformerScheduler(\nfunctions_scheduler=[\n    (extract_last_body, None, ['last_body']),\n    (clean_body, None, ['clean_body'])\n])\n\nprepare_data_pipeline = Pipeline([\n  ('ManageTransferReply', ManageTransferReply),\n  ('EmailSegmenting', EmailSegmenting),\n  ('Cleaning', Cleaning),\n])\n\ndf_email = prepare_data_pipeline.fit_transform(df_email)\n```\n\nIn this example, the pre-processing functions applied are:\n\n- ``check_mail_begin_by_transfer`` : Email is a direct transfer (True/False)\n- ``update_info_for_transfer_mail`` : Update body, header, from, to, date if direct transfer\n- ``add_boolean_answer`` : Email is an answer (True/False)\n- ``add_boolean_transfer`` : Email is transferred (True/False)\n- ``build_historic`` : When email is a conversation, reconstructs the individual message history\n- ``structure_email`` : Splits each messages into parts and tags them (tags: Hello, Body, Greetings, etc)\n\n### Phraser and Tokenizer pipeline\n\nA pipeline to train and apply the phraser end tokenizer is given below:\n\n```python\nfrom melusine.nlp_tools.phraser import Phraser, phraser_on_body\nfrom melusine.nlp_tools.tokenizer import Tokenizer\n\nphraser = Phraser(input_column='clean_body')\nphraser.train(df_email)\n\nPhraserTransformer = TransformerScheduler(\nfunctions_scheduler=[\n    (phraser_on_body, (phraser,), ['clean_body'])\n])\n\nphraser_tokenizer_pipeline = Pipeline([\n  ('PhraserTransformer', PhraserTransformer),\n  ('Tokenizer', Tokenizer(input_column='clean_body'))\n])\n\ndf_email = phraser_tokenizer_pipeline.fit_transform(df_email)\n```\n\n### Embeddings training\n\nAn example of embedding training is given below:\n\n```python\nfrom melusine.nlp_tools.embedding import Embedding\n\nembedding = Embedding(input_column='clean_body', min_count=10)\nembedding.train(df_email)\n```\n\n### Metadata pipeline\n\nA pipeline to prepare the metadata is given below:\n\n```python\nfrom melusine.prepare_email.metadata_engineering import MetaExtension, MetaDate, Dummifier\n\nmetadata_pipeline = Pipeline([\n  ('MetaExtension', MetaExtension()),\n  ('MetaDate', MetaDate()),\n  ('Dummifier', Dummifier())\n])\n\ndf_meta = metadata_pipeline.fit_transform(df_email)\n```\n\n### Keywords extraction\n\nAn example of keywords extraction is given below:\n\n```python\nfrom melusine.summarizer.keywords_generator import KeywordsGenerator\n\nkeywords_generator = KeywordsGenerator()\ndf_email = keywords_generator.fit_transform(df_email)\n```\n\n### Classification\n\nAn example of classification is given below:\n```python\nfrom sklearn.preprocessing import LabelEncoder\nfrom melusine.nlp_tools.embedding import Embedding\nfrom melusine.models.neural_architectures import cnn_model\nfrom melusine.models.train import NeuralModel\n\nX = df_email.drop(['label'], axis=1)\ny = df_email.label\n\nle = LabelEncoder()\ny = le.fit_transform(y)\n\npretrained_embedding = embedding\n\nnn_model = NeuralModel(architecture_function=cnn_model,\n                       pretrained_embedding=pretrained_embedding,\n                       text_input_column='clean_body')\nnn_model.fit(X, y)\ny_res = nn_model.predict(X)\n```\n\n## Glossary\n\n### Pandas dataframes columns\n\nBecause Melusine manipulates pandas dataframes, the naming of the columns is imposed.\nHere is a basic glossary to provide an understanding of each columns manipulated.\nInitial columns of the dataframe:\n\n* **body :** the body of the email. It can be composed of a unique message, a history of messages, a transfer of messages or a combination of history and transfers.\n* **header :** the subject of the email.\n* **date :** the date the email has been sent. It corresponds to the date of the last email message.\n* **from :** the email address of the author of the last email message.\n* **to :** the email address of the recipient of the last email message.\n\nColumns added by Melusine:\n\n* **is_begin_by_transfer :** boolean, indicates if the email is a direct transfer. In that case it is recommended to update the value of the initial columns with the information of the message transferred.\n* **is_answer :** boolean, indicates if the email contains a history of messages\n* **is_transfer :** boolean, indicates if the email is a transfer (in that case it does not have to be a direct transfer).\n* **structured_historic :** list of dictionaries, each dictionary corresponds to a message of the email. The first dictionary corresponds to the last message (the one that has been written) while the last dictionary corresponds to the first message of the history. Each dictionary has two keys :\n\n  - *meta :* to access the metadata of the message as a string.\n  - *text :* to access the message itself as a string.\n\n* **structured_body :** list of dictionaries, each dictionary corresponds to a message of the email. The first dictionary corresponds to the last message (the one that has been written) while the last dictionary corresponds to the first message of the history. Each dictionary has two keys :\n\n  - *meta :* to access the metadata of the message as a dictionary. The dictionary has three keys:\n    + *date :* the date of the message.\n    + *from :* the email address of the author of the message.\n    + *to :* the email address of the recipient of the message.\n\n  - *text :* to access the message itself as a dictionary. The dictionary has two keys:\n    + *header :* the subject of the message.\n    + *structured_text :* the different parts of the message segmented and tagged as a list of dictionaries. Each dictionary has two keys:\n      - *part :* to access the part of the message as a string.\n      - *tags :* to access the tag of the part of the message.\n\n\n* **last_body :** string, corresponds to the part of the last email message that has been tagged as `BODY`.\n* **clean_body :** string, corresponds a cleaned last_body.\n* **clean_header :** string, corresponds to a cleaned header.\n* **clean_text :** string, concatenation of clean_header and clean_body.\n* **tokens :** list of strings, corresponds to a tokenized column, by default clean_text.\n* **keywords :** list of strings, corresponds to the keywords of extracted from the tokens column.\n\n### Tags\n\nEach messages of an email are segmented in the **structured_body** columns and each part is assigned a tag:\n\n* `RE/TR` : any metadata such as date, from, to, etc.\n* `DISCLAIMER` : any disclaimer such as `L'Ã©metteur dÃ©cline toute responsabilitÃ©...`.\n* `GREETINGS` : any greetings such as `Salutations`.\n* `PJ` : any indication of an attached document such as `See attached file...`.\n* `FOOTER` : any footer such as `Provenance : Courrier pour Windows`.\n* `HELLO` : any salutations such as `Bonjour,`.\n* `THANKS` : any thanks such as `Avec mes remerciements`\n* `BODY` : the core of the the message which contains the valuable information.\n\n### Dashboard App\n\nMelusine also offered an easy and nice dashboard app with StreamLit.\nThe App contains exploratory dasboard on the email dataset and more specific study on discrimination between the dataset \nand a neural model classification.\n\nTo run the app, run the following command in your terminal in the melusine/data directory :\n\n```python\nstreamlit run dashboard_app.py\n```\n\n![](docs/_static/demo_dashboard.gif)\n\n### Ethics Guidelines\n\nMelusine also contains Ethics Guidelines to evaluate AI project.\nThe document and criteria are derived in particular from the work of the European Commission.\n\n\nThe pdf file is located in the melusine/ethics_guidelines directory :\n\n![](docs/_static/demo_ethics_guide.gif)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MAIF/melusine",
    "keywords": "melusine",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "melusine",
    "package_url": "https://pypi.org/project/melusine/",
    "platform": "",
    "project_url": "https://pypi.org/project/melusine/",
    "project_urls": {
      "Homepage": "https://github.com/MAIF/melusine"
    },
    "release_url": "https://pypi.org/project/melusine/1.9.6/",
    "requires_dist": [
      "pandas (>=0.25.0)",
      "scikit-learn (>=0.19.0)",
      "gensim (>=3.3.0)",
      "keras (>=2.2.0)",
      "tqdm (>=4.34)",
      "streamlit (>=0.57.3)",
      "tensorflow (<=1.13.1,>=1.10.0)",
      "unidecode",
      "joblib",
      "flashtext (>=2.7)",
      "plotly"
    ],
    "requires_python": "",
    "summary": "Melusine is a high-level package for french emails preprocessing, classification and feature extraction, written in Python.",
    "version": "1.9.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16074935,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9fde33f5e8099139ad4975be37040a4cd9477fe50577efc051e2611a6ed8e56",
        "md5": "b94f87cdedcb9749f721a38016c4f21e",
        "sha256": "2feae6cef904f704ba66f5b110bc9506936d14576ffd2698d80678cc0b12f5e4"
      },
      "downloads": -1,
      "filename": "melusine-1.9.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b94f87cdedcb9749f721a38016c4f21e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 113080,
      "upload_time": "2020-05-25T15:32:39",
      "upload_time_iso_8601": "2020-05-25T15:32:39.826650Z",
      "url": "https://files.pythonhosted.org/packages/b9/fd/e33f5e8099139ad4975be37040a4cd9477fe50577efc051e2611a6ed8e56/melusine-1.9.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1be727a00e0b2c59c26cdf7300ceb956a7509d846daf6d0de3e8a4d6c8b0477d",
        "md5": "2055053575ae89ef3b6c3dca94823f04",
        "sha256": "b2e7f5fe5ec125035653ba8d9b9529d990e685b9d07fc9995f6c586c2ba8090b"
      },
      "downloads": -1,
      "filename": "melusine-1.9.6.tar.gz",
      "has_sig": false,
      "md5_digest": "2055053575ae89ef3b6c3dca94823f04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19559089,
      "upload_time": "2020-05-25T15:32:42",
      "upload_time_iso_8601": "2020-05-25T15:32:42.334130Z",
      "url": "https://files.pythonhosted.org/packages/1b/e7/27a00e0b2c59c26cdf7300ceb956a7509d846daf6d0de3e8a4d6c8b0477d/melusine-1.9.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}