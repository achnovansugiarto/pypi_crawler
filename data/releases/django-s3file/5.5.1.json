{
  "info": {
    "author": "",
    "author_email": "Johannes Maron <johannes@maron.family>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "# django-s3file\n\nA lightweight file upload input for Django and Amazon S3.\n\nDjango-S3File allows you to upload files directly AWS S3 effectively\nbypassing your application server. This allows you to avoid long running\nrequests from large file uploads. This is particularly helpful for if\nyou run your service on AWS Lambda or Heroku where you have a hard\nrequest limit.\n\n[![PyPi\nVersion](https://img.shields.io/pypi/v/django-s3file.svg)](https://pypi.python.org/pypi/django-s3file/)\n[![Test\nCoverage](https://codecov.io/gh/codingjoe/django-s3file/branch/master/graph/badge.svg)](https://codecov.io/gh/codingjoe/django-s3file)\n[![GitHub\nlicense](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/codingjoe/django-s3file/master/LICENSE)\n\n## Features\n\n-   lightweight: less 200 lines\n-   no JavaScript or Python dependencies (no jQuery)\n-   easy integration\n-   works just like the built-in\n-   extendable JavaScript API\n\n## For the Nerds\n\n```mermaid\nsequenceDiagram\n    autonumber\n    actor Browser\n    participant S3\n    participant Middleware\n    Browser->>Django: GET form view\n    activate Django\n    Django->>Browser: RESPONSE w/ presigned POST URL & signed middleware key\n    deactivate Django\n    Browser->>S3: POST large file\n    activate S3\n    S3->>Browser: RESPONSE AWS S3 key\n    Browser->>Middleware: POST AWS S3 key (signed)\n    activate Middleware\n    Middleware->>S3: GET AWS S3 key\n    S3->>Middleware: RESPONSE large file promise\n    deactivate S3\n    Middleware->>Django: request incl. large file promise\n    deactivate Middleware\n    activate Django\n    opt only if files is procssed by Django\n        Django-->>S3: GET large file\n        activate S3\n        S3-->>Django: RESPONSE large file\n        deactivate S3\n    end\n    Django->>Browser: RESPONSE success\n    deactivate Django\n```\n\nIn a nutshell, we can bypass Django completely and have AWS handle\nthe upload or any processing. Of course, if you want to do something\nwith your file in Django, you can do so, just like before, with the\nadded advantage, that your file is served from within your datacenter.\n\n## Installation\n\nMake sure you have [Amazon S3\nstorage](http://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html)\nsetup correctly.\n\nJust install S3file using `pip`.\n\n```bash\npip install django-s3file\n# or\npipenv install django-s3file\n```\n\nAdd the S3File app and middleware in your settings:\n\n```python\n# settings.py\n\nINSTALLED_APPS = (\n    '...',\n    's3file',\n    '...',\n)\n\nMIDDLEWARE = (\n    '...',\n    's3file.middleware.S3FileMiddleware',\n    '...',\n)\n```\n\n## Usage\n\nS3File automatically replaces Django's `ClearableFileInput` widget, you\ndo not need to alter your code at all.\n\nThe `ClearableFileInput` widget is only than automatically replaced when\nthe `DEFAULT_FILE_STORAGE` setting is set to `django-storages`'\n`S3Boto3Storage` or the dummy `FileSystemStorage` is enabled.\n\n### Setting up the AWS S3 bucket\n\n#### Upload folder\n\nS3File uploads to a single folder. Files are later moved by Django when\nthey are saved to the `upload_to` location.\n\nIt is recommended to [setup\nexpiration](http://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html)\nfor that folder, to ensure that old and unused file uploads don't add up\nand produce costs.\n\nThe default folder name is: `tmp/s3file` You can change it by changing\nthe `S3FILE_UPLOAD_PATH` setting.\n\n#### CORS policy\n\nYou will need to allow `POST` from all origins. Just add the following\nto your CORS policy.\n\n```json\n[\n  {\n    \"AllowedHeaders\": [\n        \"*\"\n    ],\n    \"AllowedMethods\": [\n        \"POST\"\n    ],\n    \"AllowedOrigins\": [\n        \"*\"\n    ],\n    \"ExposeHeaders\": [],\n    \"MaxAgeSeconds\": 3000\n  }\n]\n```\n\n### Progress Bar\n\nS3File does emit progress signals that can be used to display some kind\nof progress bar. Signals named `progress` are emitted for both each\nindividual file input as well as for the form as a whole.\n\nThe progress signal carries the following details:\n\n```javascript\nconsole.log(event.detail)\n\n{\n    progress: 0.4725307607171312  // total upload progress of either a form or single input\n    loaded: 1048576  // total upload progress of either a form or single input\n    total: 2219064  // total bytes to upload\n    currentFile: File {…}  // file object\n    currentFileName: \"text.txt\"  // file name of the file currently uploaded\n    currentFileProgress: 0.47227834703299176  // upload progress of that file\n    originalEvent: ProgressEvent {…} // the original XHR onprogress event\n}\n```\n\nThe following example implements a Boostrap progress bar for upload\nprogress of an entire form.\n\n```html\n<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%;\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">0%</div>\n</div>\n```\n\n```javascript\n(function () {\n    var form = document.getElementsByTagName('form')[0]\n    var progressBar = document.getElementsByClassName('progress-bar')[0]\n\n    form.addEventListener('progress', function (event) {\n        // event.detail.progress is a value between 0 and 1\n        var percent = Math.round(event.detail.progress * 100)\n\n        progressBar.setAttribute('style', 'width:' + percent + '%')\n        progressBar.setAttribute('aria-valuenow', percent)\n        progressBar.innerText = percent + '%'\n    })\n})()\n```\n\n### Using S3File in development\n\nUsing S3File in development can be helpful especially if you want to use\nthe progress signals described above. Therefore, S3File comes with a AWS\nS3 dummy backend. It behaves similar to the real S3 storage backend. It\nis automatically enabled, if the `DEFAULT_FILE_STORAGE` setting is set\nto `FileSystemStorage`.\n\nTo prevent users from accidentally using the `FileSystemStorage` and the\ninsecure S3 dummy backend in production, there is also an additional\ndeployment check that will error if you run Django\\'s deployment check\nsuite:\n\n```shell\npython manage.py check --deploy\n```\n\nWe recommend always running the deployment check suite as part of your\ndeployment pipeline.\n\n### Uploading multiple files\n\nDjango does have limited support for [uploading multiple\nfiles](https://docs.djangoproject.com/en/stable/topics/http/file-uploads/#uploading-multiple-files).\nS3File fully supports this feature. The custom middleware makes ensure\nthat files are accessible via `request.FILES`, even though they have\nbeen uploaded to AWS S3 directly and not to your Django application\nserver.\n\n### Using optimized S3Boto3Storage\n\nSince `S3Boto3Storage` supports storing data from any other fileobj, it\nuses a generalized `_save` function. This leads to the frontend\nuploading the file to S3 and then copying it byte-by-byte to perform a\nmove operation just to rename the uploaded object. For large files this\nleads to additional loading times for the user.\n\nThat\\'s why S3File provides an optimized version of this method at\n`storages_optimized.S3OptimizedUploadStorage`. It uses the more\nefficient `copy` method from S3, given that we know that we only copy\nfrom one S3 location to another.\n\n```python\nfrom s3file.storages_optimized import S3OptimizedUploadStorage\n\nclass MyStorage(S3OptimizedUploadStorage):  # Subclass and use like any other storage\n    default_acl = 'private'\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-s3file",
    "package_url": "https://pypi.org/project/django-s3file/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-s3file/",
    "project_urls": {
      "Project-URL": "https://github.com/codingjoe/django-s3file"
    },
    "release_url": "https://pypi.org/project/django-s3file/5.5.1/",
    "requires_dist": [
      "django>=2.0",
      "django-storages",
      "boto3",
      "pytest >=2.7.3 ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "pytest-django ; extra == \"test\"",
      "selenium ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "A lightweight file uploader input for Django and Amazon S3.",
    "version": "5.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17529757,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1e49ec9200374f1465527cee846c43b1ef1ac99a5530b386920b9fd0a0a53fb",
        "md5": "9ff2a3966e1f8ab9cf72edcf2081efa1",
        "sha256": "d22970f2f4ae7869de1fa42259d164e2a96d5fac1e1b87adeedc1b1963b4f9df"
      },
      "downloads": -1,
      "filename": "django_s3file-5.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ff2a3966e1f8ab9cf72edcf2081efa1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 14700,
      "upload_time": "2022-06-06T10:42:01",
      "upload_time_iso_8601": "2022-06-06T10:42:01.075281Z",
      "url": "https://files.pythonhosted.org/packages/f1/e4/9ec9200374f1465527cee846c43b1ef1ac99a5530b386920b9fd0a0a53fb/django_s3file-5.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d158e0033d55939475ce9e77e2bdaa480fe3777d7b10d0984ebd9bab02c8430f",
        "md5": "42482983aed34009a1b58daa03320654",
        "sha256": "b3953548a14f8f83c4b8a7651f5c1a222f0dc2d5e6508bf138fdab8fbdbe5bc2"
      },
      "downloads": -1,
      "filename": "django-s3file-5.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "42482983aed34009a1b58daa03320654",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14435,
      "upload_time": "2022-06-06T10:42:04",
      "upload_time_iso_8601": "2022-06-06T10:42:04.052013Z",
      "url": "https://files.pythonhosted.org/packages/d1/58/e0033d55939475ce9e77e2bdaa480fe3777d7b10d0984ebd9bab02c8430f/django-s3file-5.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}