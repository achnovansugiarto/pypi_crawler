{
  "info": {
    "author": "codingjoe",
    "author_email": "info@johanneshoppe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development"
    ],
    "description": "# django-s3file\n\n\nA lightweight file upload input for Django and Amazon S3.\n\n[![PyPi Version](https://img.shields.io/pypi/v/django-s3file.svg)](https://pypi.python.org/pypi/django-s3file/)\n[![Build Status](https://travis-ci.org/codingjoe/django-s3file.svg?branch=master)](https://travis-ci.org/codingjoe/django-s3file)\n[![Code Health](https://landscape.io/github/codingjoe/django-s3file/master/landscape.svg?style=flat)](https://landscape.io/github/codingjoe/django-s3file/master)\n[![Test Coverage](https://coveralls.io/repos/codingjoe/django-s3file/badge.png?branch=master)](https://coveralls.io/r/codingjoe/django-s3file)\n[![Code health](https://scrutinizer-ci.com/g/codingjoe/django-s3file/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/codingjoe/django-s3file/?branch=master)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/codingjoe/django-s3file/master/LICENSE)\n[![Join the chat at https://gitter.im/codingjoe/django-s3file](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/codingjoe/django-s3file?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n## Features\n\n - Pure JavaScript (no jQuery)\n - Python 2 and 3 support\n - Auto swapping based on your environment\n - Pluggable as it returns a simple django file, just like native input\n - Easily extensible (authentication, styles)\n\n\n## Installation\n\nJust install S3file using `pip` or `easy_install`.\n```bash\npip install django-s3file\n```\nDon't forget to add `s3file` to the `INSTALLED_APPS`.\n\n\n## Usage\n\n### Simple integrations\n\nInclude s3file's URLs in your URL root.\n\n**urls.py**\n```python\nurlpatterns = patterns(\n    ...\n    url(r'^s3file/', include('s3file.urls')),\n)\n```\n\n**forms.py**\n```python\nfrom s3file.forms import AutoFileInput\n\nclass MyModelForm(forms.ModelForm):\n\n    class Meta:\n        model = MyModel\n        fields = ('my_file_field')\n        widgets = {\n            'my_file_field': AutoFileInput\n        }\n```\n**Done!** No really, that's all that needs to be done.\n\n\n### Setting up the CORS policy on your AWS S3 Bucket\n\n```xml\n<CORSConfiguration>\n    <CORSRule>\n        <AllowedOrigin>*</AllowedOrigin>\n        <AllowedMethod>PUT</AllowedMethod>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>GET</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n        <AllowedHeader>*</AllowedHeader>\n    </CORSRule>\n</CORSConfiguration>\n```\n\n\n### Advanced usage examples\n\n#### Authentication\nThe signing endpoint supports CSRF by default but does not require a authenticated user.\nThis and other behavior can be easily added by inheriting from the view.\n\n**views.py**\n```python\nfrom s3file.views import S3FileView\nfrom braces.views import LoginRequiredMixin\n\nclass MyS3FileView(LoginRequiredMixin, S3FileView):\n    pass\n```\n\nNow don't forget to change the URLs.\n\n**urls.py**\n```python\nurlpatterns = patterns(\n    ...\n    url('^s3file/sign',\n        MyS3FileView.as_view(), name='s3file-sign'),\n)\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Johannes Hoppe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codingjoe/django-s3file",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-s3file",
    "package_url": "https://pypi.org/project/django-s3file/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-s3file/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/codingjoe/django-s3file"
    },
    "release_url": "https://pypi.org/project/django-s3file/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A lightweight Fine Uploader input for Django and Amazon S3",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17529757,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a2721202c6a30f8864a80a60be55fc661dc0ccc0a2e4c9dc1bc0454dc4b5c3b",
        "md5": "fe783d715d04bd731c7adcb47c8a3aa9",
        "sha256": "12c72e0867dfc0cf58ce7c5134308165d18d142225090a8b3afda0473b17bca4"
      },
      "downloads": -1,
      "filename": "django-s3file-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fe783d715d04bd731c7adcb47c8a3aa9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11740,
      "upload_time": "2015-09-08T12:06:39",
      "upload_time_iso_8601": "2015-09-08T12:06:39.546805Z",
      "url": "https://files.pythonhosted.org/packages/7a/27/21202c6a30f8864a80a60be55fc661dc0ccc0a2e4c9dc1bc0454dc4b5c3b/django-s3file-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-24840"
      ],
      "details": "### Impact\n\nIt was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files.\nThe issue was discovered by the maintainer. There were no reports of the vulnerability\nbeing known to or exploited by a third party, before the release of the patch.\n\nIf the `AWS_LOCATION` setting was set, traversal was limited to that location only.\nIf all your files handling views (like form views) require authentication or special permission, the thread is limited to privileged users.\n\n### Patches\n\nThe vulnerability has been fixed in version 5.5.1 and above.\n\n### Workarounds\n\nThere is no feasible workaround. We must urge all users to immediately updated to a patched version.\n\n### Detailed attack vector description\n\nAn attacker may use a request with malicious form data to traverse the entire AWS S3 bucket and perform destructive operations.\n\nAn attack could look as follows:\n```bash\ncurl -X POST -F \"s3file=file\" -F \"file=/priviliged/location/secrets.txt\" https://www.example.com/any/path/will/work/\n```\n\nThis will result in a request with files set and opened:\n\n```python\n>>> request.FILES.getlist(\"file\")\n[File(\"/priviliged/location/secrets.txt\")]\n```\n\nSince this behavior is injected via a middleware, any view can be called this way and will carry any files defined by the attacker.\n\nVia the `s3file` form field, any input name can be specified, including multiple inputs. For each input, multiple files can be freely\npicked of the S3 bucket.\n\n#### Scenarios and their practicality\n\nThere are four scenarios that would be considered practical in most setups:\n\n1. Illegal file injection,\n2. file deletion,\n3. file retrieval & tree traversal.\n4. code injection & remote code execution.\n\n##### File deletion\n\nAn attacker knows the location of a privileged file, like a static asset. Next, the file is injected into a form view. The upload to function will move the file to a new location. This is effectively deleting the file, since the previous references to it are invalid, and will cause S3 to return a 404. Furthermore, the new location is unknown to the site operator.\n\n##### File retrieval & tree traversal\n\nAn attacker knows the URL of a secret file and injects it into a form view. The view will move the file to a public location, making it accessible to the attacker. Since most form views will not be rate limited, this could also be used to guess files and traverse the file tree.\n\n##### Illegal file injection\n\nAn attacker uses any form to upload a file to the temporary upload location. Next, the attacker injects that file into a request, does not validate the contents or is not equipped to handle the mime type. The latter could be used as a potential DOS vector.\n\nIn practice, this is not a practical risk in most hardened setup. Files should always be sanitized before processing, since files can be included in a request even without this security issues.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue on [GitHub](https://github.com/codingjoe/django-s3file/issues)\n* Email us at [johannes@maron.family](mailto:johannes@maron.family)\n",
      "fixed_in": [
        "5.5.1"
      ],
      "id": "GHSA-4w8f-hjm9-xwgf",
      "link": "https://osv.dev/vulnerability/GHSA-4w8f-hjm9-xwgf",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-24840",
        "GHSA-4w8f-hjm9-xwgf"
      ],
      "details": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version.",
      "fixed_in": [
        "5.5.1"
      ],
      "id": "PYSEC-2022-208",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-208",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}