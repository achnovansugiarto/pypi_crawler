{
  "info": {
    "author": "Delhivery",
    "author_email": "noreply@delhivery.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "============================\ndjango-cdc\n============================\n\nTracking changes in django models and push it to logger/aws endpoints.\n\n\nQuickstart Guide\n===============================\n\nInstall it with pip from PyPi::\n\n    pip install django-cdc\n\nbefore installing djangoCDC, make sure that you have already run the following command or\nyour environment the following packages:\n\n   pip install psycopg2\n   pip install django-bitfield\n   pip install boto3\n   pip install pyyaml\n   pip install django-extensions\n   pip install confluent-kafka\n\nAdd ``django_cdc`` to your ``INSTALLED_APPS``::\n   INSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_extensions',\n    'django_cdc',\n)\n\nIf you want to track full model changes, then you need to attach an ``DjangoCDC`` manager to the model.\nFor foreign key attributes, we need to pass kwargs foreign of dict type and partition_key is only used with kafka::\n\n    from django.db import models\n    from django_cdc.models.managers import DjangoCDC\n    from django_cdc.models.constants import ServiceType\n\n\n    class ProductCategory(models.Model):\n        name = models.CharField(max_length=150, primary_key = True)\n        description = models.TextField()\n        django_cdc = DjangoCDC(services=[ServiceType.SNS], partition_key=name,\n                        service_custom_name= {ServiceType.ASYNC_KAFKA_PRODUCER : ''})\n\n    class Product(models.Model):\n        name = models.CharField(max_length = 150)\n        description = models.TextField()\n        price = models.DecimalField(max_digits = 10, decimal_places = 2)\n        productcategory = models.ForeignKey(ProductCategory)\n        django_cdc = DjangoCDC(foreign_keys={'productcategory':['name','description']},services=[ServiceType.SNS,ServiceType.KINESIS],\n                        service_custom_name= {ServiceType.SNS: '' , ServiceType.KINESIS: ''})\n\nServiceType is used for specifying on which you want to publish and service_custom_name is used\nto specify own custom name for resource- KAFKA, SNS, KINESIS. Let us say,if you want to publish\ndata to kafka topic like ProductCategory in that case you need to pass service_custom_name as an\nargument with the custom name as shown above. Also if \"None\" value is set for the\nservice_custom_name then it will publish to the topic derived e.g. <SERVICE_FUNCTION_PREFIX>-<tableName>.\n\nRun the following commmand to deploy lambda function that pushes data to kinesis:\n        python manage.py setservice\n\nBy default warn, error, critical logging level are enabled.\n\nTo enable info logging:\n        python manage.py setservice --logging_level=info\n\nTo enable debugging:\n        python manage.py setservice --logging_level=debug\n\nFollowing fields handled for json serialization:\n        BitHandler\n        datetime\n        time\n        ImageFieldFile\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://bitbucket.org/DelhiveryTech/djangocdc/get/v2.0.10.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/DelhiveryTech/djangocdc/overview",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cdc",
    "package_url": "https://pypi.org/project/django-cdc/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cdc/",
    "project_urls": {
      "Download": "https://bitbucket.org/DelhiveryTech/djangocdc/get/v2.0.10.zip",
      "Homepage": "https://bitbucket.org/DelhiveryTech/djangocdc/overview"
    },
    "release_url": "https://pypi.org/project/django-cdc/2.0.10/",
    "requires_dist": [
      "confluent-kafka",
      "dill",
      "pyyaml",
      "enum34",
      "django-extensions",
      "django-bitfield",
      "boto3"
    ],
    "requires_python": "",
    "summary": "CDC for django models",
    "version": "2.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3820303,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bc82531f7c9928fb6834d40acbe13f3e0086a1679df6c6584af2a173e3033bac",
        "md5": "eab7faef4b24f9ca0c9c6ce9e610079f",
        "sha256": "9dd287e31f9e314797e7e7b462bedda34c93c6c2bcaf420c9161c725aa07293f"
      },
      "downloads": -1,
      "filename": "django_cdc-2.0.10-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eab7faef4b24f9ca0c9c6ce9e610079f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21879,
      "upload_time": "2018-04-27T07:17:30",
      "upload_time_iso_8601": "2018-04-27T07:17:30.137599Z",
      "url": "https://files.pythonhosted.org/packages/bc/82/531f7c9928fb6834d40acbe13f3e0086a1679df6c6584af2a173e3033bac/django_cdc-2.0.10-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}