{
  "info": {
    "author": "Max Linke, Michael Gecht",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: System :: Benchmark"
    ],
    "description": "\n============================================\n  Benchmark molecular dynamics simulations\n============================================\n\n.. image:: https://img.shields.io/pypi/v/mdbenchmark.svg\n    :target: https://pypi.python.org/pypi/mdbenchmark\n\n.. image:: https://anaconda.org/conda-forge/mdbenchmark/badges/version.svg\n    :target: https://anaconda.org/conda-forge/mdbenchmark\n\n.. image:: https://img.shields.io/pypi/l/mdbenchmark.svg\n    :target: https://pypi.python.org/pypi/mdbenchmark\n\n.. image:: https://travis-ci.org/bio-phys/MDBenchmark.svg?branch=master\n    :target: https://travis-ci.org/bio-phys/MDBenchmark\n\n.. image:: https://codecov.io/gh/bio-phys/MDBenchmark/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/bio-phys/MDBenchmark\n\n.. image:: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n    :target: http://makeapullrequest.com\n\n.. image:: https://zenodo.org/badge/112506401.svg\n    :target: https://zenodo.org/badge/latestdoi/112506401\n\n---------------\n\n**MDBenchmark** â€” quickly generate, start and analyze benchmarks for your molecular dynamics simulations.\n\nMDBenchmark is a tool to squeeze the maximum out of your limited computing\nresources. It tries to make it as easy as possible to set up systems on varying\nnumbers of nodes and compare their performances to each other.\n\nYou can also create a plot to get a quick overview of the possible performance\n(and also show of to your friends)! The plot below shows the performance of an\nmolecular dynamics system on up to five nodes with and without GPUs.\n\n.. image:: https://raw.githubusercontent.com/bio-phys/MDBenchmark/master/runtimes.png\n\n\nInstallation\n============\n\nYou can install ``mdbenchmark`` via ``pip`` or ``conda``:\n\n.. code::\n\n    $ pip install mdbenchmark\n\n.. code::\n\n    $ conda install -c conda-forge mdbenchmark\n\nUsage with a virtual environments\n---------------------------------\n\nWe recommend to install the package inside a `conda environment`_. This can\neasily be done with ``conda``. The following commands create an environment\ncalled ``benchmark`` and then installs ``mdbenchmark`` and its dependencies.\n\n.. code::\n\n    $ conda create -n benchmark\n    $ conda install -n benchmark -c conda-forge mdsynthesis click mdbenchmark\n\nBefore every usage of ``mdbenchmark``, you need to first activate the conda\nenvironment. After doing this once, you can use the tool for the whole duration\nof your shell session.\n\n.. code::\n\n   $ source activate benchmark\n   # mdbenchmark should now be usable!\n   $ mdbenchmark\n   Usage: mdbenchmark [OPTIONS] COMMAND [ARGS]...\n\n     Generate and run benchmark jobs for GROMACS simulations.\n\n   Options:\n     --version  Show the version and exit.\n     --help     Show this message and exit.\n\n   Commands:\n     analyze   analyze finished benchmark.\n     generate  Generate benchmark queuing jobs.\n     submit    Start benchmark simulations.\n\nFeatures\n========\n\n- Generates benchmarks for GROMACS and NAMD simulations (contributions for other MD engines are welcome!).\n- Automatically detects the queuing system on your high-performance cluster and submits jobs accordingly.\n- Grabs performance from the output logs and creates a fancy plot.\n- Can benchmark systems either with or without GPUs.\n\nUsage\n=====\n\nAfter installation, the ``mdbenchmark`` command should be available to you\nglobally. If you have installed the package in a virtual environment, make sure\nto activate that first!\n\nBenchmark generation for GROMACS\n--------------------------------\n\nAssuming your TPR file is called ``protein.tpr`` and you want to run benchmarks\nwith the module ``gromacs/5.1.4-plumed2.3`` on up to ten nodes, run the\nfollowing command:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module gromacs/5.1.4-plumed2.3 --max-nodes 10\n\nTo run benchmarks on GPUs simply add the ``--gpu`` flag:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module gromacs/5.1.4-plumed2.3 --max-nodes 10 --gpu\n\nYou can also create benchmarks for different versions of GROMACS:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module gromacs/5.1.4-plumed2.3 --module gromacs/2016.4-plumed2.3 --max-nodes 10 --gpu\n\n\nBenchmark generation for NAMD\n-----------------------------\n\n**NAMD support is experimental.** If you encounter any problems or bugs, we\nwould appreciate to `hear from you`_.\n\nGenerating benchmarks for NAMD follows a similar process to GROMACS. Assuming\nthe NAMD configuration file is called ``protein.namd``, you will also need the\ncorresponding ``protein.pdb`` and ``protein.psf`` inside the same folder.\n**Warning:** Please be aware that all paths given in the ``protein.namd`` file\nmust be absolute paths. This ensures that MDBenchmark does not destroy paths\nwhen copying files around during benchmark generation.\n\nIn analogy to the GROMACS setup, you can execute the following command to\ngenerate benchmarks for a module named ``namd/2.12``:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module namd/2.12 --max-nodes 10\n\nTo run benchmarks on GPUs add the ``--gpu`` flag:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module namd/2.12-gpu --max-nodes 10 --gpu\n\nBe aware that you will need to specify NAMD modules when running GPU and non-GPU\nbenchmarks! To work with GPUs, NAMD needs to be compiled separately and will be\nprobably named differently on the host of your choice. Using the ``--gpu``\noption on non-GPU builds of NAMD may lead to poorer performance and erroneous\nresults.\n\nUsage with multiple modules\n---------------------------\n\nIt is possible to generate benchmarks for different MD engines with a single\ncommand:\n\n.. code::\n\n    $ mdbenchmark generate --name protein --module namd/2.12 --module gromacs/2016.3 --max-nodes 10\n\nBenchmark submission\n--------------------\n\nAfter you generated all benchmarks, you can submit them at once:\n\n.. code::\n\n    $ mdbenchmark submit\n\nTo start specific benchmarks separately, use the ``--directory`` option and\nspecify the corresponding folder:\n\n.. code::\n\n    $ mdbenchmark submit --directory draco_gromacs/5.1.4-plumed2.3\n\nBenchmark analysis\n------------------\n\nAs soon as the benchmarks have been submitted you can run the analysis script\nvia ``mdbenchmark analysis``. When at least one system has finished, the script\nwill produce a ``.csv`` output file or a plot for direct usage (via the\n``--plot`` option).\n\n**Note:** The plotting function currently only allows to plot a CPU and GPU\nbenchmark from the same module. We are working on fixing this. If you want to\ncompare different modules with each other, either use the ``--directory`` option\nto generate separate plots or create your own plot from the provided CSV file.\n\n.. code::\n\n    $ mdbenchmark analyze\n                       gromacs  nodes  ns/day  run time [min]    gpu        host  ncores\n    0  gromacs/5.1.4-plumed2.3      1  10.878              15  False       draco      32\n    1  gromacs/5.1.4-plumed2.3      2   21.38              15  False       draco      64\n    2  gromacs/5.1.4-plumed2.3      3  34.033              15  False       draco      96\n    3  gromacs/5.1.4-plumed2.3      4  40.274              15  False       draco     128\n    4  gromacs/5.1.4-plumed2.3      5   51.71              15  False       draco     160\n\n\nDefining Host Templates\n=======================\n\nIt is possible to define your own host templates in addition to the ones shipped\nwith the package. A template file should have the same filename as the UNIX\ncommand ``hostname`` returns to be detected automatically. Otherwise you can\npoint MDBenchmark to a specific template by providing its name via the\n``--host`` option.\n\nAssuming you created a new host template in your home directory ``~/.config/MDBenchmark/my_custom_hostfile``::\n\n    $ mdbenchmark generate protein --host my_custom_hostfile --module gromacs/5.1.4-plumed2.3\n\nHere is an example job template for the MPG cluster ``hydra``.\n\n.. code::\n\n    # @ shell=/bin/bash\n    #\n    # @ error = {{ name }}.err.$(jobid)\n    # @ output = {{ name }}.out.$(jobid)\n    # @ job_type = parallel\n    # @ node_usage = not_shared\n    # @ node = {{ n_nodes }}\n    # @ tasks_per_node = 20\n    {%- if gpu %}\n    # @ requirements = (Feature==\"gpu\")\n    {%- endif %}\n    # @ resources = ConsumableCpus(1)\n    # @ network.MPI = sn_all,not_shared,us\n    # @ wall_clock_limit = {{ formatted_time }}\n    # @ queue\n\n    module purge\n    module load {{ module }}\n\n    # run {{ module }} for {{ time }} minutes\n    poe gmx_mpi mdrun -deffnm {{ name }} -maxh {{ time / 60 }}\n\nMDBenchmark passes the following variables to each template:\n\n+----------------+---------------------------------------------------------------------+\n| Value          | Description                                                         |\n+================+=====================================================================+\n| name           | Name of the TPR file                                                |\n+----------------+---------------------------------------------------------------------+\n| gpu            | Boolean that is true, if GPUs are requested                         |\n+----------------+---------------------------------------------------------------------+\n| module         | Name of the module to load                                          |\n+----------------+---------------------------------------------------------------------+\n| n_nodes        | Maximal number of nodes to run on                                   |\n+----------------+---------------------------------------------------------------------+\n| time           | Benchmark run time in minutes                                       |\n+----------------+---------------------------------------------------------------------+\n| formatted_time | Run time for the queuing system in human readable format (HH:MM:SS) |\n+----------------+---------------------------------------------------------------------+\n\nTo ensure correct termination of jobs ``formatted_time`` is 5 minutes longer\nthan ``time``.\n\nMDBenchmark will look for user templates in the `xdg`_ config folders defined by\nthe environment variables ``XDG_CONFIG_HOME`` and ``XDG_CONFIG_DIRS`` which by\ndefault are set to ``$HOME/.config/MDBenchmark`` and ``/etc/xdg/MDBenchmark``,\nrespectively. If the variable ``MDBENCHMARK_TEMPLATES`` is set, the script will\nalso search in that directory.\n\nMDBenchmark will first search in ``XDG_CONFIG_HOME`` and ``XDG_CONFIG_DIRS`` for\na suitable template file. This means it is possible to overwrite system-wide\ninstalled templates or templates shipped with the package.\n\nContributing\n============\n\nContributions to the project are welcome! Information on how to contribute to\nthe project can be found in `CONTRIBUTING.md`_ and `DEVELOPER.rst`_.\n\n.. _conda environment: https://conda.io/docs/user-guide/tasks/manage-environments.html\n.. _hear from you: https://github.com/bio-phys/MDBenchmark/issues/new\n.. _xdg: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n.. _CONTRIBUTING.md: https://github.com/bio-phys/MDBenchmark/blob/master/.github/CONTRIBUTING.md\n.. _DEVELOPER.rst: https://github.com/bio-phys/MDBenchmark/blob/master/DEVELOPER.rst\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bio-phys/MDBenchmark",
    "keywords": "benchmark molecular dynamics simulations gromacs namd",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdbenchmark",
    "package_url": "https://pypi.org/project/mdbenchmark/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdbenchmark/",
    "project_urls": {
      "Homepage": "https://github.com/bio-phys/MDBenchmark"
    },
    "release_url": "https://pypi.org/project/mdbenchmark/1.3.1/",
    "requires_dist": [
      "numpy (>=1.8)",
      "mdsynthesis",
      "click",
      "jinja2",
      "pandas",
      "matplotlib",
      "python-Levenshtein",
      "xdg (<2)"
    ],
    "requires_python": "",
    "summary": "Benchmark molecular dynamics simulations",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16884513,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "339f334bedcdf5cd55b55b4dd91d3ff0fcfdb03aee782578bb21136e21749919",
        "md5": "eec440b70602db5dc4a7f0c15dda68fc",
        "sha256": "5eaabf2ce1ba28a097617f17710f41c4d4e3a8c68dbb97004927b50e80940b49"
      },
      "downloads": -1,
      "filename": "mdbenchmark-1.3.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eec440b70602db5dc4a7f0c15dda68fc",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 41519,
      "upload_time": "2018-05-17T07:51:52",
      "upload_time_iso_8601": "2018-05-17T07:51:52.104887Z",
      "url": "https://files.pythonhosted.org/packages/33/9f/334bedcdf5cd55b55b4dd91d3ff0fcfdb03aee782578bb21136e21749919/mdbenchmark-1.3.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ce0645aa7bb40130ddaddcc1f23c58840c05d2c4de1598787090de6bdd95056",
        "md5": "1381f2cec2ec3cf8e414c8e4f5853f6b",
        "sha256": "d485432a4800f5effd2f92d6b3208ea2338ab6ec0399ec69344261df00003202"
      },
      "downloads": -1,
      "filename": "mdbenchmark-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1381f2cec2ec3cf8e414c8e4f5853f6b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 53768,
      "upload_time": "2018-05-17T07:51:53",
      "upload_time_iso_8601": "2018-05-17T07:51:53.874415Z",
      "url": "https://files.pythonhosted.org/packages/7c/e0/645aa7bb40130ddaddcc1f23c58840c05d2c4de1598787090de6bdd95056/mdbenchmark-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}