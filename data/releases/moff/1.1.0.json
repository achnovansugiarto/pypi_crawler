{
  "info": {
    "author": "Wei He",
    "author_email": "whe3@mdanderson.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## Introduction of MOFF \n\n                                # # # # #   # # # #   # # # #  # # # # \n                                #   #   #   #     #   #        #       \n                                #   #   #   #     #   # # # #  # # # #    \n                                #   #   #   #     #   #        #          \n                                #   #   #   # # # #   #        #          \n\n\n    Hi,My name is MOFF, I was designed to predict off-target effects for CRISPR/Cas9! \n\n    I have three major functions: 1). Predict off-target effects for any given gRNA-target pair.\n                                  2). Predict genome-wide off-target effects for any sgRNA.\n                                  3). Select best sgRNAs for allele-specific knockout.\n\n\n    Hope you enjoy playing with me ^o^!\n\n    Any questions or bugs, please concat through hwkobe.1027@gmail.com or whe3@mdanderson.org\n\n\n\n## How to install MOFF\n\n **Note: MOFF is written in Python,Python>=2.7 is needed**\n\n Step1: Install Anaconda (highly recomended)\n\n ```console\n wget https://repo.continuum.io/archive/Anaconda2-2018.12-Linux-x86_64.sh \n bash Anaconda2-2018.12-Linux-x86_64.sh \n ```\n\n Step2: Install required python packages\n ```console   \n pip install matplotlib==2.2.3 pandas sklearn numpy seaborn\n ```  \n\n Step3: Install MOFF through pip\n ```console     \n pip install MOFF\n ```\n\n Step4: **OR** you can install MOFF through git clone\n ```console   \n git clone https://github.com/MDhewei/MOFF.git\n cd MOFF\n python setup.py install\n ```\n\n\n## How to use MOFF\n\n### 1. MOFF score: Predict off-target effects for given gRNA-target pairs\n\n#### Inputs for MOFF score\n\nMOFFscore require user to provide .csv or .txt file containing sgRNA sequences and corresponding \nDNA target sequences.One gRNA(20bp+PAM) and one target(20bp+PAM) per line. Note that MOFF is designed\nfor mismatch-only off-target prediction, not for indel mutations. See example file [here.](https://github.com/MDhewei/MOFF/blob/master/MOFF/MOFFscore_test.txt)\n\n\n     Arguments of the program:\n\n     -i/--inputfile (required): \n     Input files containing sgRNA sequences and corresponding DNA target sequences.\n\n     -p/--prefix (Optional): \n     Prefix of the file to save the outputs,default: ScoreTest.\n\n     -o/--outputdir (Optional): \n     Directory to save output files,if no directory is given a folder named MOFF_scores\n     will be generated in current working directory.\n\n\n#### Example to run MOFFscore\n\n```console\nMOFF score -i MOFFscore_test.txt\n```\n\n#### Columns of Output table\n\n    - crRNA: the sgRNAs designed to target specific DNA sequence\n    - DNA: the DNA sequence of the off-target site \n    - MDE: predicted mismatch-dependent off-target effect \n    - CE:  predicted combinatorial effect\n    - MMs: the number of mismatches between sgRNA and off-target\n    - GMT: predicted guide-intrinsic mismatch tolerence \n    - MOFF: the final MOFF score predicted for given gRNA-target pair\n\n\n\n### 2. MOFF aggregate: Predict the genome-wide off-target effects for given sgRNAs\n\n  MOFF aggregation can directly take the outputs of [CRISPRitz](https://github.com/pinellolab/CRISPRitz) as inputs. Besides, output table \n  files generated by any genome-wide off-target searching methods such as [Cas-OFFinder](https://github.com/snugel/cas-offinder) and [RIsearch2\n  (v2.1)](https://rth.dk/resources/risearch/) are supported in theory, but the columns of outputs for different methods are different, thus \n  it is required to modify the column name of sgRNA(20bp+PAM) and target(20bp+PAM) to 'crRNA' and 'DNA' respectively. Note that MOFF only\n  support mismatch-only off-target predictions, indel mutations are not applicable.File formats including .csv and .txt are accepted. See example\n  File [here.](https://github.com/MDhewei/MOFF/blob/master/MOFF/MOFFaggregation_test.txt)\n\n     Arguments of the program:\n\n     -i/--inputfile (required): \n     Input files containing all the potneital off-target sites in the genome for given sgRNA(s)\n\n     -p/--prefix (Optional): \n     Prefix of the file to save the outputs,default: AggregationTest.\n\n     -o/--outputdir (Optional): \n     Directory to save output files,if no directory is given a folder named MOFF_aggregation\n     will be generated in current working directory.\n\n\n#### Example to run MOFF aggregate\n\n```console\nMOFF aggregate -i MOFFaggregation_test.txt\n```\n\n#### Columns of Output table\n\n    - sgRNA: the sgRNAs selected to predict genome-wide off-target\n    - MDE.sum: aggregated mismatch-dependent off-target effect \n    - GMT.sum: aggregated guide-intrinsic mismatch tolerence \n    - MOFF.sum: aggregated MOFF score for specific sgRNA\n\n\n### 3. MOFF allele: Predict the genome-wide off-target effects for given sgRNAs\n\nMOFF allele require the users to input local DNA sequences of wild-type allele and mutant allele. \nTwo DNA sequence should be of same length. There should be at least one hit of 20bp+PAM(NGG) in \nthe DNA sequence to be knockout and the mutation point should be included within the hit. If you \nwant to design sgRNA specifically target WT allele, you just input DNA sequence of WT as mutant \nand mutant sequence as wildtype. \n\n     Arguments of the program:\n\n     -m MUTANT, --mutant MUTANT\n                Local DNA sequence of mutant allele, at least one hit of 20bp(mutation sites included)\n                followed by PAM (NGG) should be included, if more than one hits found, MOFF will\n                design sgRNAs based on all possible PAMs.\n\n     -w WILDTYPE, --wildtype WILDTYPE\n                  Local DNA sequence of wild type allele paired with the mutant allele,which should be\n                  the same length of the mutant allele DNA sequence.\n\n     -p PREFIX, --prefix PREFIX\n                Prefix of the file to save the outputs, default: AlleleTest.\n\n     -o OUTPUTDIR, --outputdir OUTPUTDIR\n                    Directory to save output files,if no directory is given, a output folder named\n                    MOFF_aggregation will be generated in current working directory.\n\n\n#### Example to run MOFF allele\n\n    For example two mutant for DNMT3a:\n    ACTGACGTCTCCAACATGAGC|CGC|TTGGCGAGGCAGAGACTGCT (WT)\n    ACTGACGTCTCCAACATGAGC|tGC|TTGGCGAGGCAGAGACTGCT (R882C)\n    ACTGACGTCTCCAACATGAGC|CaC|TTGGCGAGGCAGAGACTGCT (R882H)\n\n    1). To knockout R882C allele\n    MOFF allele -m ACTGACGTCTCCAACATGAGCTGCTTGGCGAGGCAGAGACTGCT -w ACTGACGTCTCCAACATGAGCCGCTTGGCGAGGCAGAGACTGCT -p R882C\n\n    2) To knockout R882H allele\n    MOFF allele -m ACTGACGTCTCCAACATGAGCCCACTTGGCGAGGCAGAGACTGCT -w ACTGACGTCTCCAACATGAGCCGCTTGGCGAGGCAGAGACTGCT -p R882H\n\n    3) To knockout WT in R882C cell\n    MOFF allele -m ACTGACGTCTCCAACATGAGCCGCTTGGCGAGGCAGAGACTGCT -w ACTGACGTCTCCAACATGAGCTGCTTGGCGAGGCAGAGACTGCT -p WT\n\n    4) To knockout WT in R882H cell\n    MOFF allele -m ACTGACGTCTCCAACATGAGCCGCTTGGCGAGGCAGAGACTGCT -w ACTGACGTCTCCAACATGAGCCCACTTGGCGAGGCAGAGACTGCT -p WT\n\n\n#### Columns of Output table\n\n    - sgRNA: all the possible sgRNAs selected for allele-specific knockouts\n    - DNA_KO: DNA target of allele you want to knockout, usually it is the mutant allele\n    - DNA_NA: DNA target of allele you want to keep, usually it is the wild-type allele\n    - MOFF_KO: the predicted MOFF score to target the DNA-KO.\n    - MOFF_NA: the predicted MOFF score to target the DNA-NA.\n\n**It is practical to select sgRNA with high MOFF score to knockout allele but low MOFF score of non-knockout allele,\nso that sgRNA can specifically knockout the desried allele.**\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MDhewei/MOFF",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MOFF",
    "package_url": "https://pypi.org/project/MOFF/",
    "platform": "",
    "project_url": "https://pypi.org/project/MOFF/",
    "project_urls": {
      "Homepage": "https://github.com/MDhewei/MOFF"
    },
    "release_url": "https://pypi.org/project/MOFF/1.1.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib",
      "sklearn",
      "argparse",
      "seaborn"
    ],
    "requires_python": "",
    "summary": "Modular prediction of off-target effects for CRISPR/Cas9 system",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14296978,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17e30bee8758ce43d49a4074ba4fee259b494990678af623e7cba16607235441",
        "md5": "6750f17d50e6677603d577c60c564663",
        "sha256": "ed5659c6e1bc036fb561ada0fc54a4022766861263ffc670c7b29785ed8c6abd"
      },
      "downloads": -1,
      "filename": "MOFF-1.1.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "6750f17d50e6677603d577c60c564663",
      "packagetype": "bdist_egg",
      "python_version": "1.1.0",
      "requires_python": null,
      "size": 31252,
      "upload_time": "2021-06-14T20:06:32",
      "upload_time_iso_8601": "2021-06-14T20:06:32.111012Z",
      "url": "https://files.pythonhosted.org/packages/17/e3/0bee8758ce43d49a4074ba4fee259b494990678af623e7cba16607235441/MOFF-1.1.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e473fb69db6bdaed36d758cbb6398071412ae39260cf8d07b205cb5ab710d11",
        "md5": "b21f5e6d939b526bf00d1e0a21affde0",
        "sha256": "a86974d8956a099ba7ad7c477a1d0a62af3d6e284b2e446893531c4f4cd12888"
      },
      "downloads": -1,
      "filename": "MOFF-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b21f5e6d939b526bf00d1e0a21affde0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 35960,
      "upload_time": "2021-06-05T03:27:22",
      "upload_time_iso_8601": "2021-06-05T03:27:22.417059Z",
      "url": "https://files.pythonhosted.org/packages/4e/47/3fb69db6bdaed36d758cbb6398071412ae39260cf8d07b205cb5ab710d11/MOFF-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4e6f824a9f68d5ff7a53f8010c7243e2a153ce4e98fabae6b0600d69763f012",
        "md5": "736c31a477d4bcaef5a4a42095f059a7",
        "sha256": "b5a237147bf7ceb7025757bc61f6722e30f333f171835cb50f89c7b6dfd8be6e"
      },
      "downloads": -1,
      "filename": "MOFF-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "736c31a477d4bcaef5a4a42095f059a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22996,
      "upload_time": "2021-06-05T04:00:10",
      "upload_time_iso_8601": "2021-06-05T04:00:10.690755Z",
      "url": "https://files.pythonhosted.org/packages/c4/e6/f824a9f68d5ff7a53f8010c7243e2a153ce4e98fabae6b0600d69763f012/MOFF-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}