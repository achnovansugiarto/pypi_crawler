{
  "info": {
    "author": "Ciprian Tarta",
    "author_email": "me@cipriantarta.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. role:: python(code)\n    :language: python\n\nDjango Logging\n==============\n\nA Django library that logs request, response and exception details in a JSON document.\nIt uses the python rotation mechanism to rotate the file logs, but the rotation files will be gziped and it has support for sending the log messages to Elasticsearch.\n\n.. image:: https://badge.fury.io/py/django-logging-json.svg\n    :target: https://badge.fury.io/py/django-logging-json\n\nInstallation\n============\n\n.. code-block:: python\n\n    pip install git+https://github.com/cipriantarta/django-logging\n\nor\n\n.. code-block:: python\n\n    pip install django-logging-json\n\nQuick start\n===========\n1. Add \"django_logging\" to your INSTALLED_APPS settings like this:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_logging',\n    )\n\n\n2. Include the DjangoLoggingMiddleware middleware in your MIDDLEWARE_CLASSES like this:\n\n.. code-block:: python\n\n    MIDDLEWARE_CLASSES = (\n        'django_logging.middleware.DjangoLoggingMiddleware',\n        ...\n    )\n\nHandlers\n========\n\nAppFileHandler\n--------------\n\nThis handle will log request/response info to ``LOG_PATH/app.log``. It will also log request/exception, for unhandled exceptions, in the same file.\nLog format:\n\nRequest and Response\n\n.. code-block:: javascript\n\n    {\n        \"INFO\":\n        {\n            \"timestamp\":\n            {\n                \"request\": {\n                ... request info ...\n                },\n                \"response\": {\n                ... response info ...\n                }\n            }\n        }\n    }\n\nRequest and Exception\n\n.. code-block:: javascript\n\n    {\n        \"ERROR\":\n        {\n            \"timestamp\":\n            {\n                \"request\": {\n                ... request info ...\n                },\n                \"exception\": {\n                    \"message\": \"Exception message\",\n                    \"traceback\": [\n                        ...\n                    ]\n                }\n            }\n        }\n    }\n\nSQLFileHandler\n--------------\n\nThis handler will log all queries to ``LOG_PATH/sql.log``.\nIn a production environment you should set ``LOG_LEVEL = Error`` or ``SQL_LOG = False`` to avoid performance issues.\nThe queries will also be logged to the console if ``CONSOLE_LOG`` is set to ``True``\n\nDebugFileHandler\n----------------\n\nThis handler will log debug messages to ``LOG_PATH/debug.log``. This handler is only used when ``settings.DEBUG`` is set to ``True``.\n\nLog format:\n\n.. code-block:: python\n\n    [%(levelname)s - %(created)s], file:%(module)s.py, func:%(funcName)s, ln:%(lineno)s: %(message)s\n\n\nCustom Use\n==========\n\n\nTo log debug messages:\n\n.. code-block:: python\n\n    from django_logging import log\n\n    log.debug('debug message')\n\nTo log handled exceptions:\n\n.. code-block:: python\n\n    from django_logging import log, ErrorLogObject\n\n    log.error(ErrorLogObject(request, exception))\n\n\nSettings\n========\nInspired by Django Rest Framework, Django Logging settings are grouped in a single dictionary.\n\nTo override Django Logging settings, add a dictionary in your project's settings file\n\n.. code-block:: python\n\n    DJANGO_LOGGING = {\n        \"CONSOLE_LOG\": False\n    }\n\nDefault Settings\n----------------\n\n:python:`CONSOLE_LOG = True` - Log to console.\n\n:python:`SQL_LOG = True` - Log SQL queries.\n\n:python:`LOG_LEVEL = 'debug'` - If settings.DEBUG is set to True, otherwise LOG_LEVEL is set to 'info'\n\n:python:`DISABLE_EXISTING_LOGGERS = True` - Set this to False if you want to combine with multiple loggers.\n\n:python:`LOG_PATH = '{}/logs'.format(settings.BASE_DIR)` - If the logs folder does not exist, it will be created.\n\n:python:`IGNORED_PATHS = ['/admin', '/static', '/favicon.ico']` - List of URL endpoints to ignore.\n\n:python:`RESPONSE_FIELDS = ('status', 'reason', 'charset', 'headers', 'content')` - List of response fields to log.\n\n:python:`CONTENT_JSON_ONLY = True` - Log response content only if its a JSON document.\n\n:python:`ROTATE_MB = 100` - Maximum size in MB that the log file can have before it gets rotated.\n\n:python:`ROTATE_COUNT = 10` - Maximum number of rotated log files.\n\n:python:`INDENT_CONSOLE_LOG = 2` - Indent console log by \"n\" spaces.\n\n:python:`ELASTICSEARCH_ENABLED = False` - Set to yes to enable elasticsearch support.\n\n:python:`ELASTICSEARCH_HOSTS = [\"localhost\"]` - Elasticsearch hosts\n\n\nChange Log\n==========\n1.5.5 [2017-06-21]\n------------------\n- fixes compatibility for django MIDDLEWARE `django >= 1.10` \n\n1.5.4 [2017-02-08]\n------------------\n- fixes compatibility with python < 3.5 when logging exceptions\n\n1.5.3 [2016-06-26]\n------------------\n- bug fixing\n\n1.5 [2016-06-04]\n----------------\n - do not return a response in process_exception. Give other middlewares a chance to process the exception.\n - console log indentation\n - elastic search support. below a sample chart using kibana with elasticsearch and django-logging\n\n.. image:: kibana_sample.png\n\n\n1.4 [2016-02-19]\n----------------\n\n - bug fixing\n - added support for query logging when using multiple database\n - added database alias for sql logs if multiple databases are used\n - added plain dict logging support\n\n1.3 [2015-12-13]\n----------------\n\n - added support for Python 2.7\n - added support for Django >= 1.4\n\n1.2 [2015-11-22]\n----------------\n - added sql logging support\n - log entries are now sorted by keys\n - console handler now indents the log entries by 4 spaces\n - log response content if it's JSON (bug)\n\n1.1 [2015-11-17]\n----------------\n - added exception \"type\" for exception log entries",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-logging-json/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cipriantarta/django-logging",
    "keywords": "django logging json",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-logging-json",
    "package_url": "https://pypi.org/project/django-logging-json/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-logging-json/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/cipriantarta/django-logging"
    },
    "release_url": "https://pypi.org/project/django-logging-json/1.5.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple Django app to log requests/responses in various formats, such as JSON.",
    "version": "1.5.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3358594,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a595241820f98136e5c9c3a15294dff5586c13fe4b10338f8221f3dc13bd8d1",
        "md5": "1d20048113bb394f257c3aa6b6793e9e",
        "sha256": "0aaa35cf76f580dfacf9e1735c61723c7ef82b920890d27a3417cfce632af8d9"
      },
      "downloads": -1,
      "filename": "django-logging-json-1.5.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1d20048113bb394f257c3aa6b6793e9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8615,
      "upload_time": "2017-06-21T18:53:50",
      "upload_time_iso_8601": "2017-06-21T18:53:50.918666Z",
      "url": "https://files.pythonhosted.org/packages/1a/59/5241820f98136e5c9c3a15294dff5586c13fe4b10338f8221f3dc13bd8d1/django-logging-json-1.5.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}