{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=====================\ndjango-browser-reload\n=====================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-browser-reload/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-browser-reload/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-browser-reload/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-browser-reload.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-browser-reload/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nAutomatically reload your browser in development.\n\nRequirements\n------------\n\nPython 3.6 to 3.10 supported.\n\nDjango 2.2 to 4.0 supported.\n\n----\n\n**Want to work smarter and faster?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers django-browser-reload and many other tools.\nI wrote django-browser-reload whilst working on the book!\n\n----\n\nInstallation\n------------\n\n1. Install with **pip**:\n\n   .. code-block:: sh\n\n       python -m pip install django-browser-reload\n\n2. Ensure you have ``\"django.contrib.staticfiles\"`` in your ``INSTALLED_APPS``.\n\n3. Add django-browser-reload to your ``INSTALLED_APPS``:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...,\n           \"django_browser_reload\",\n           ...,\n       ]\n\n4. Include the app URLâ€™s in your root URLconf(s):\n\n   .. code-block:: python\n\n       from django.urls import include, path\n\n       urlpatterns = [\n           ...,\n           path(\"__reload__/\", include(\"django_browser_reload.urls\")),\n       ]\n\n   You can use another prefix if required.\n\n5. Add the middleware:\n\n   .. code-block:: python\n\n      MIDDLEWARE = [\n          # ...\n          \"django_browser_reload.middleware.BrowserReloadMiddleware\",\n          # ...\n      ]\n\n   The middleware should be listed after any that encode the response, such as Djangoâ€™s ``GZipMiddleware``.\n\n   The middleware automatically inserts the required script tag on HTML responses before ``</body>`` when ``DEBUG`` is ``True``.\n   It does so to every HTML response, meaning it will be included on Djangoâ€™s debug pages, admin pages, etc.\n   If you want more control, you can instead insert the script tag in your templatesâ€”see below.\n\nAll done! ðŸ“¯\n\nFor faster and more efficient reloading, also set up `Djangoâ€™s built-in Watchman support <https://adamj.eu/tech/2021/01/20/efficient-reloading-in-djangos-runserver-with-watchman/>`__.\n\nWhat It Does\n------------\n\nWhen ``DEBUG`` is ``True``, the template tag includes a small script.\nThis script connects back to the development server and will automatically reload when static assets or templates are modified, or after ``runserver`` restarts.\n(Detecting modification of Django templates requires Django 3.2+.)\nThe reload only happens in the most recently opened tab.\n\nExample Project\n---------------\n\nSee the `example project <https://github.com/adamchainz/django-browser-reload/tree/main/example>`__ in the ``example/`` directory of the GitHub repository.\nStart it up and modify its files to see the reloading in action.\n\nTemplate Tag\n------------\n\nIf the middleware doesnâ€™t work for you, you can also use a template tag to insert the script on relevant pages.\nThe template tag has both Django templates and Jinja versions, and only outputs the script tag when ``DEBUG`` is ``True``.\n\nFor **Django Templates**, load the tag and use it in your base template.\nThe tag can go anywhere, but itâ€™s best just before ``</body>``:\n\n.. code-block:: html\n\n   {% load django_browser_reload %}\n\n   ...\n\n       {% django_browser_reload_script %}\n     </body>\n   </html>\n\nTo add django-browser-reload to Djangoâ€™s admin, do so in a template called ``admin/base_site.html``:\n\n.. code-block:: html\n\n    {% extends \"admin/base_site.html\" %}\n\n    {% load django_browser_reload %}\n\n    {% block extrahead %}\n        {{ block.super }}\n        {% django_browser_reload_script %}\n    {% endblock %}\n\nThis follows Djangoâ€™s documentation on `extending an overriden template <https://docs.djangoproject.com/en/4.0/howto/overriding-templates/#extending-an-overridden-template>`__.\n\nFor **Jinja Templates**, you need to perform two steps.\nFirst, load the tag function into the globals of your `custom environment <https://docs.djangoproject.com/en/stable/topics/templates/#django.template.backends.jinja2.Jinja2>`__:\n\n.. code-block:: python\n\n    # myproject/jinja2.py\n    from jinja2 import Environment\n    from django_browser_reload.jinja import django_browser_reload_script\n\n\n    def environment(**options):\n        env = Environment(**options)\n        env.globals.update(\n            {\n                # ...\n                \"django_browser_reload_script\": django_browser_reload_script,\n            }\n        )\n        return env\n\nSecond, render the tag in your base template.\nIt can go anywhere, but itâ€™s best just before ``</body>``:\n\n.. code-block:: html\n\n    ...\n        {{ django_browser_reload_script() }}\n      </body>\n    </html>\n\nTa-da!\n\nHow It Works\n------------\n\nHereâ€™s a diagram:\n\n.. code-block:: text\n\n                                         Browser\n\n                                 Tab 1    Tab 2     Tab N\n                               listener  listener  listener\n                                    \\       |       /\n      Django                         \\      |      /\n                                      \\     |     /\n    Events View --------------------> Shared worker\n\nThe template tag includes a listener script on each page.\nThis listener script starts or connects to a |SharedWorker|__, running a worker script.\nThe worker script then connects to the events view in Django, using an |EventSource|__ to receive server-sent events.\n\n.. |SharedWorker| replace:: ``SharedWorker``\n__ https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\n\n.. |EventSource| replace:: ``EventSource``\n__ https://developer.mozilla.org/en-US/docs/Web/API/EventSource\n\nThis event source uses |StreamingHttpResponse|__ to send events to the worker.\nThe view continues streaming events indefinitely, until disconnected.\n(This requires a thread and will not work if you use ``runserver``\\â€™s |--nothreading option|__.)\n\n.. |--nothreading option| replace:: ``--nothreading`` option\n__ https://docs.djangoproject.com/en/stable/ref/django-admin/#cmdoption-runserver-nothreading\n\nOn a relevant event, the worker will reload the most recently connected tab.\n(It avoids reloading *all* tabs since that could be expensive.)\n\n.. |StreamingHttpResponse| replace:: ``StreamingHttpResponse``\n__ https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.StreamingHttpResponse\n\nTo reload when a template changes, django-browser-reload piggybacks on Djangoâ€™s autoreloading infrastructure.\nAn internal Django signal indicates when a template file has changed.\nThe events view receives this signal and sends an event to the worker, which triggers a reload.\nThere is no smart filtering - if *any* template file changes, the view is reloaded.\n\nTo reload when the server restarts, django-browser-reload uses a version ID.\nThis ID is randomly generated when the view module is imported, so it will be different every time the server starts.\nWhen the server restarts, the workerâ€™s ``EventSource`` reconnects with minimal delay.\nOn connection, the events view sends the version ID, which the worker sees as different, so it triggers a reload.\n\nThe events view also sends the version ID every second to keep the connection alive.\n\nCompatibility\n-------------\n\n``EventSource`` is `highly compatible <https://developer.mozilla.org/en-US/docs/Web/API/EventSource#browser_compatibility>`__.\n``SharedWorker`` is `a bit less so <https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker#browser_compatibility>`__, but should work with Chrome, Edge, Firefox, and Opera.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-browser-reload",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-browser-reload",
    "package_url": "https://pypi.org/project/django-browser-reload/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-browser-reload/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-browser-reload/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-browser-reload",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-browser-reload/1.1.1/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Automatically reload your browser in development.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024208,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9db05394733186540cb98f9bb08451b42972c8bed2f1dad89a1a511a19417758",
        "md5": "68ce7fa13286678e829bb67ff422c85e",
        "sha256": "633827e4dc1bdb69cc82e74c3da63cbe7a7ffe6a33957708727e5f6081297d19"
      },
      "downloads": -1,
      "filename": "django_browser_reload-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68ce7fa13286678e829bb67ff422c85e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11560,
      "upload_time": "2022-01-10T11:12:43",
      "upload_time_iso_8601": "2022-01-10T11:12:43.343712Z",
      "url": "https://files.pythonhosted.org/packages/9d/b0/5394733186540cb98f9bb08451b42972c8bed2f1dad89a1a511a19417758/django_browser_reload-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c7248c6b4a139c9627548910707564a03f91dcfc913a5f48a10543f4d36e71e",
        "md5": "beffc6caccc87c1ae9448a62c87af712",
        "sha256": "a56f36a8caf535709a4b22254bbbac5e4ce31a81d99f0df659ba39deedea8031"
      },
      "downloads": -1,
      "filename": "django-browser-reload-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "beffc6caccc87c1ae9448a62c87af712",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13402,
      "upload_time": "2022-01-10T11:12:45",
      "upload_time_iso_8601": "2022-01-10T11:12:45.019031Z",
      "url": "https://files.pythonhosted.org/packages/7c/72/48c6b4a139c9627548910707564a03f91dcfc913a5f48a10543f4d36e71e/django-browser-reload-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}