{
  "info": {
    "author": "Rickard Sjogren",
    "author_email": "rickard.sjogren@umu.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "doepipeline\n===========\n\nThis is yet another pipeline package. What distinguishes `doepipeline` is\nthat it enables pipeline optimization using methodologies from statistical\n`Design of Experiments (DOE) <https://en.wikipedia.org/wiki/Design_of_experiments>`_\n\nPipeline-config\n---------------\n\nThe pipeline is specified in a YAML config file. Example:\n\n\n    design:\n        # Design type is case insensitive\n        type: BoxBehnken\n\n        factors:\n            # Factors are quantitiative unless specified otherwise. The factor\n            # names probably works with spaces as well (Todo: test that).\n            FactorA:\n                # Minimum value.\n                min: 0\n                # Maximum value.\n                max: 40\n                # Low initial value.\n                low_init: 0\n                # High initial value.\n                high_init: 20\n            FactorB:\n                min: 0\n                max: 4\n                low_init: 1\n                high_init: 2\n            FactorC:\n                low_init: 140\n                high_init: 160\n\n        responses:  # One or more.\n            ResponseA: \n                criterion: maximize\n\n    # File where final results are dumped. One file per \"experiment\" will be\n    # produced.\n    results_file: my_results.txt\n\n    working_directory: ~/my_work_directory\n\n    pipeline:\n        # Specifies order of jobs. These names must match the job-names below.\n        - MyFirstJob\n        - MySecondJob\n        - MyThirdJob\n\n    MyFirstJob:\n        # The script can be multi-line.\n        script: >\n            bash first_script_command.sh {% FactorB %} -o $MY_DIR\n        factors:\n            # The factors must match factors in the design.\n            FactorA:\n                # If script_option is given, the current factor value will be\n                # added as a option to the job-script.\n                script_option: --factor_a\n            FactorB:\n                # If substitute is given (and true), the script's {% FactorC %}\n                # will be replaced with the current factor value.\n                substitute: true\n\n    MySecondJob:\n        script: >\n            bash my_second_script.sh --expressionWithFactors {% FactorC %}\n        factors:\n            FactorC:\n                substitute: true\n\n    MyThirdJob:\n        script: python make_output.py -o {% results_file %}\n        \n    before_run:  # Optional setup.\n        environment_variables:\n            # Variables which will be set in the execution environment of\n            # the pipeline run.\n            MY_DIR: ~/my/dir/\n        scripts:\n            - ./a_script_to_run_before_starting.sh\n            - python a_second_one.py\n\n\nThe key-value pairs are specified below.\n### `design` \n\nSpecifies factors and responses to investigate as well as what design to use in key-value mapping. Valid keys specifying design are:\n\n* `type`: Required. Design to use. Available choices (case-insensitive) are:\n    * `ccc`/ `ccf`/ `cci`: Central composite designs.\n    * `fullfactorial2levels`/`fullfactorial3levels`\n    * `placketburman`\n    * `boxbehnken`\n* `factors`: Required. Mapping of one or more factors.\n    * `<factor-name>`: Keys are name used for factor and will be used for substitutions. Values are specified below.\n* `responses`: Required. Mapping of one or more response.\n    * `<response-name>`: Keys are name used for response, values are specified below.\n* `screening_reduction`: Optional. `auto` (default) or positive integer. Specifies reduction factors used for GSD during screening. \n\n### `<factor-name>`\nSpecification of each factor. Valid keys specifying factors are:\n* `type` Optional. Type will be quantitative if not specified. Valid values are:\n    * `quantitative`: Default. Numeric factor which can take real values.\n    * `ordinal`: Numeric factor constrained to integer values.\n    * `categorical`: Categorical values.\n* `low_init`: Required for numeric factors. Low starting value.\n* `high_init`: Required for numeric factors. High starting value.\n* `max`: Optional for numeric factors. Maximum allowed value, default is positive infinity.\n* `min`: Optional for numeric factors. Minimum allowed value, default is negative infinity.\n* `values`: Required for categorical factors. Possible values.\n* `screening_levels`: Optional for numeric factors. Number of levels investigated during screening phase. Default is 5.\n### `<response-name>`\nSpecification of a response. Valid keys specifying responses are:\n\n* `criterion`: Required for all responses. Valid values are:\n    * `maximize` / `minimize`: Response will be maximized or minimized respectively.\n    * `target`: Reach target value (optimum is neither above nor below value)\n* `target`: Required when there are multiple responses for responses for any criterion.\n* `low_limit`: Required when there are multiple responses for responses with criterion `target`or `maximize`, optional otherwise. Indicates lowest acceptable value.\n* `high_limit`: Required when there are multiple responses for responses with criterion `target` or `minimize`, optional otherwise. Indicates highest acceptable value.\n* `transform`: Optional. Indicates what transform used prior to optimization: Valid values are:\n    * `log`: Log transformation\n    * `box-cox`: [Box-Cox transformation](https://en.wikipedia.org/wiki/Power_transform#Box%E2%80%93Cox_transformation).\n\n### `pipeline`\nRequired. Ordered list specifying order of jobs. Values are `<job-name>` specified below.\n\n### `<job-name>`\n\nSpecification of each job that will be run in the order specified in `pipeline`. Optionally, factors will be substituted.\n\n* `script`: Required. String containing command that will be executed. May use substitution (see below) to parameterize commands. Substitution or appending of script option is required to input factors currently optimized.\n* `factors`: Optional. Contains mapping of what factors that should be used in the current experiment. Valid keys are:\n    * `<factor-name>`: One of the factors specified in `design`. Each factor must carry one of the two following key-value pairs to indicate how it should be input in the job:\n        * `substitute: true`: Factor will be substituted using templating.\n        * `script_option: --<option-name>`: A option flag will be appended to the script string. E.g., if `script_option: -a` is provided for factor `FactorA`, then `-a <value-of-FactorA>` will be appended to the script string.\n\n### `results_file`\nRequired. Indicates the name of the file containing the results from each pipeline run, may be used for substitution. A results-file for each factor setup will be produced in the working-directory for the current experiment.\n\n### `working_directory`\nRequired. Root directory which will contain the results from all iterations and experiments.\n\n### `before_run`\nOptional. Specify setup. Valid keys are:\n* `environment_variables`: Key-value pairs of environment variables to be set prior to running pipeline.\n* `scripts`: Ordered list of scripts to run prior to running pipeline.\n\n### `constants`\nOptional. Key-value pairs of constants accessible for substitution. Keys written in upper-case are interpreted as directories and\ncan be used for path-substitution.\n\n### Substitution\n`doepipeline` uses a simple templating system for substituting factors and other values into scripts. Factors \nthat should be substituted is wrapped in `{% ... %}`.\n\nFactors are substituted using their names specified in the design. \nAn example, if the value of `FactorA` should be passed as argument to `my_script.sh` the script\nspecified in the job is written as `my_script.sh {% FactorA %}`. Special tags available for substitions\nare:\n* {% results_file %}: Will substitute the tag with the results-file for the current experiment.\n* Other constants specified under `constants` not written in capital letters. \n\nPath-substitutions can be used to use files available during the current iteration\nor other special directories. Values for path-substitution are indicated by capital letters\nand are used as following `{% DIRNAME filename %}`. This will substitute the tag with `DIRNAME/filename`. \nSpecial paths available are:\n* `BASEDIR`: Path to the root working-directory, i.e. `working_directory`.\n* `WORKDIR`: Path to the current iterations working-directory.\n* Other constants specified under `constants` written in capital letters.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/clicumu/doepipeline",
    "keywords": "pipeline doe optimization",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doepipeline",
    "package_url": "https://pypi.org/project/doepipeline/",
    "platform": "",
    "project_url": "https://pypi.org/project/doepipeline/",
    "project_urls": {
      "Homepage": "https://github.com/clicumu/doepipeline"
    },
    "release_url": "https://pypi.org/project/doepipeline/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Package for optimizing pipelines using DoE.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5397854,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddac96d97b7d402f2f09a0a9dd64b5634878997aeab467df19a684291f8ce38a",
        "md5": "d63489c80a63bedf72a9285a516d55ed",
        "sha256": "fece4fff6eb7a1378e139117374b04e711bdcebaeab1759e66e30f09d6d6aaf8"
      },
      "downloads": -1,
      "filename": "doepipeline-1.0.1.zip",
      "has_sig": false,
      "md5_digest": "d63489c80a63bedf72a9285a516d55ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42668,
      "upload_time": "2018-12-19T16:25:09",
      "upload_time_iso_8601": "2018-12-19T16:25:09.993110Z",
      "url": "https://files.pythonhosted.org/packages/dd/ac/96d97b7d402f2f09a0a9dd64b5634878997aeab467df19a684291f8ce38a/doepipeline-1.0.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}