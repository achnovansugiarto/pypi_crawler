{
  "info": {
    "author": "Anton Tagunov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=========\nMeta Yaml\n=========\n\nMata Yaml is several enhancements for yaml format that allow the following:\n\n* include one yaml file from another\n* use python expression and other fields in the file as value\n\nInclude files syntax\n--------------------\n\nTo include one file or files the '**extend**' key is used. For example:\n\n**base.yaml**::\n\n extend:\n   - file1.yaml\n   - file2.yaml\n name: base.yaml\n b: overridden_by_base\n new: new\n\n**file1.yaml**::\n\n  a: a\n  b: b\n  c: c\n  name: file1.yaml\n\n**file2.yaml**::\n\n  a: aa\n  b: bb\n  d: d\n  name: file2.yaml\n\nThe order and sequence of file processing is shown in the following table:\n\n\n=====  =============================================  ======================================================\n Step   Action                                         Intermediate dict\n=====  =============================================  ======================================================\n1      Read base.yaml and extract extend key          ::\n\n                                                       {\"extend\":\n                                                           [\"file1.yaml\", \"file2.yaml\"] }\n\n2      Read file1.yaml                                ::\n\n                                                       {\n                                                          \"a\": \"a\",\n                                                          \"b\": \"b\",\n                                                          \"c\": \"c\",\n                                                          \"name\": \"file1.yaml\"\n                                                       }\n3      Read file2.yaml and merge/override values      ::\n\n                                                       {\n                                                          \"a\": \"aa\", # overridden\n                                                          \"b\": \"b\",  # overridden\n                                                          \"c\": \"c\",\n                                                          \"d\": \"d\",  # added\n                                                          \"name\": \"file2.yaml\" # overridden\n                                                       }\n\n4      Read rest values from base.yaml and            ::\n       merge/override\n                                                       {\n                                                          \"a\": \"aa\",\n                                                          \"b\": \"overridden_by_base\",  # overridden\n                                                          \"c\": \"c\",\n                                                          \"d\": \"d\",\n                                                          \"name\": \"base.yaml\" # overridden\n                                                          \"new\": \"new\" # added\n                                                       }\n=====  =============================================  ======================================================\n\nExpression syntax\n-----------------\n\nMetayaml supports any python valid expression. For this expression should be enclosed in brackets ${} or $().\nThe first brackets is used for eager substitute and $() for laze. I.e. expressions in $() are applied after\nfull read file and its include files but ${} during file read.\n\nThe access to other values from expression can be done by using dictionary syntax or 'dash dictionary syntax'.\n\n**Examples**:\n\n**base.yaml** ::\n\n extend:\n   - f1.yaml\n\n hour: ${60*60}  # just simple python expression\n ${2+2}: four  # expression can be in the key\n delay: ${hour*2}  # delay is two hour or 7200 seconds\n loggers:\n   metayaml:\n     name: metayaml\n     level: debug\n     console: false\n   backend:\n     name: backend\n     level: ${loggers.metayaml.level}\n     console: ${loggers.metayaml.console}\n   ext: ${loggers.metayaml}  # copy whole dict from loggers.metayaml this key\n\n   incorrect: ${delay} ${loggers.ext}  # In this case string representation of objects will be concatenated\n\n**f1.yaml** ::\n\n  run_interval: $(hour*5)  # 5 hours. But 'hour' is not defined when this file is processed.\n                           # Therefore only $() brackets can be used here.\n\nInstallation\n============\nMeta Yaml is in PyPI, so it can be installed directly using::\n\n    $ pip install metayaml\n\nOr from BitBucket::\n\n    $ git clone https://bitbucket.org/atagunov/metayaml\n    $ cd metayaml\n    $ python setup.py install\n\nDocumentation\n=============\n\nDocumentation (such that it is) is available at\nhttps://bitbucket.org/atagunov/metayaml\n\nUsage\n=====\n::\n\n from metayaml import read\n read([\"config.yaml\",\n       \"test.yaml\"],\n      {'join': os.path.join, # allows get right os specific path in yaml file\n       'env': os.environ}  # allows use system environments from yaml file\n     )\n\n**config.yaml** ::\n\n extend:\n   - ${join(env[\"HOME\"], \".metayaml\", \"localconfig.yaml\")} # added reading local config from $HOME\n user_name: ${env[\"USER\"]}\n email: ${user_name + \"@example.com\"}\n debug: false\n\n\n**test.yaml** ::\n\n debug: true\n\n\nOrder of substitution\n=====================\n\nThe substitutions are done in order of the values in the file. I.e. the following example will be failed::\n\n  B: ${A+1}     <--- A is not defined here\n  AA: ${B}\n  A: 1\n\nBut the following The result is ok::\n\n  A: 1\n  B: ${A+1}\n  AA: ${B}\n\n\nChange merge behavior\n=====================\n\nBy default it is possible to add new keys in the dict and replace the list. In some cases it is necessary to remove\nkeys from base file or add some values to list. For example\n\n**base.yaml**::\n\n  main:\n      iso_3166:\n        China: CN\n        Honduras: HN\n        Madagascar: MG\n\n      country_codes:\n        - CN\n        - HN\n        - MG\n\n      country_codes_3:\n        - CHN\n        - HND\n        - MDG\n\n**last.yaml**::\n\n    extend:\n      - base.yaml\n    main:\n      iso_3166:\n         China: ${__del__}  #  key 'China' will be removed from the result\n         Liberia: LR  # add new key\n\n      country_codes:\n         - LR         # after merge country_codes contains only one element.\n\n      country_codes_3:\n        ${__extend__}:\n          - LBR       # the result list is [\"CHN\", \"HND\", \"MDG\", \"LBR\"]\n\n\nThe result of the code::\n\n    d = read(\"last.yaml\")\n    print d\n\n    {\n        \"main\": {\n            \"iso_3166\": {\n                \"Honduras\": \"HN\",\n                \"Madagascar\": \"MG\",\n                \"Liberia\": \"LR\"\n            },\n            \"country_codes\": [\n                \"LR\"\n            ],\n            \"country_codes_3\": [\n                \"CHN\",\n                \"HND\",\n                \"MDG\",\n                \"LBR\"\n            ]\n        }\n    }\n\n\nCopy method\n===========\n\nThere is method 'cp' which copy dict/list with extending::\n\n    cron:\n      daily:\n        min: 0\n        hour: 0\n\n      monthly:\n        min: 0\n        hour: 0\n        day: 1\n\n    schedule:\n      nighttask: ${cp(cron.daily, min=5)}  # min will be replaced to 5\n      #  min: 5\n      #  hour: 0\n      daytask: ${cp(cron.daily, min=7, hour=13)} # min and hour are replaced\n      #  min: 7\n      #  hour: 13\n      monthtask: ${cp(cron.monthly, day=2)}\n      #  min: 0\n      #  hour: 0\n      #  day: 2\n\n    deploy:\n      subnets:\n        - 1.1.1.1\n        - 2.2.2.2\n\n      base_elb:\n        - 4.4.4.4\n        - 5.5.5.5\n\n      elb: ${cp(deploy.subnets, \"3.3.3.3\", *deploy.base_elb)}\n      # - 1.1.1.1\n      # - 2.2.2.2\n      # - 3.3.3.3\n      # - 4.4.4.4\n      # - 5.5.5.5\n\n\nInherit method\n==============\n\nThere are another way to copy existed dict and update some fields::\n\n    foo:\n      bar:\n        baz: 1\n        buz: 2\n        foobar: 3\n      foobar: [4, 5]\n\n    bar:\n      ${__inherit__}: foo.bar  # bar will be replaces by content of for.bar\n      buz: 33\n\n    # the result value of 'bar' will be\n    #    baz: 1\n    #    buz: 33\n    #    foobar: 3\n\n\nLicense\n=======\nMetaYaml is released under a MIT license.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/atagunov/metayaml/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metayaml",
    "package_url": "https://pypi.org/project/metayaml/",
    "platform": null,
    "project_url": "https://pypi.org/project/metayaml/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/atagunov/metayaml/"
    },
    "release_url": "https://pypi.org/project/metayaml/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Enhancements of yaml format to support include and python expression",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15753486,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "009c7cb8ac55dda741cc5487f5d145c76dd9ec47c9b484228535dffce93150a7",
        "md5": "b2ccbdd9aa4feb40f7c766b3b5e95b17",
        "sha256": "07b6659e4963a6797861680e1d7707beea3f4c0d27248de801e4ccae9a4d1701"
      },
      "downloads": -1,
      "filename": "metayaml-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b2ccbdd9aa4feb40f7c766b3b5e95b17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10964,
      "upload_time": "2022-11-13T22:02:48",
      "upload_time_iso_8601": "2022-11-13T22:02:48.824685Z",
      "url": "https://files.pythonhosted.org/packages/00/9c/7cb8ac55dda741cc5487f5d145c76dd9ec47c9b484228535dffce93150a7/metayaml-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}