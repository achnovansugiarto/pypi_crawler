{
  "info": {
    "author": "Chris Beaven",
    "author_email": "smileychris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=============\nDjango Notify\n=============\n\nA Django application which provides temporary notifications.\n\nNotification messages persist until a request retrieves them.\n\n\nInstallation\n============\n\nAdd the middleware to your ``MIDDLEWARE_CLASSES`` setting (the default\ntemporary storage relies on Django's ``contrib.sessions`` application, so place\nthis after ``SessionMiddleware``)::\n\n    'django_notify.middleware.NotificationsMiddleware',\n\nTo make it easy to access notifications in templates, add the context processor\ninto your ``TEMPLATE_CONTEXT_PROCESSORS`` setting::\n\n    'django_notify.context_processors.notifications',\n\n\nUsage\n=====\n\nAdding a temporary notification message\n---------------------------------------\n\nThe middleware adds an instance of a temporary storage class called\n``notifications`` to your ``request``. To add a notification, call::\n\n    request.notifications.add('Hello world.')\n\nYou can optionally provide a string containing tags (which is usually\nrepresented as HTML classes for the message)::\n\n    request.notifications.add('Your rating is over 9000!', 'error')\n\nDisplaying temporary notifications\n----------------------------------\n\nIn your template (rendered with RequestContext or with\n``request.notifications`` passed as ``notifications`` in its context) using\nsomething like::\n\n\t{% if notifications %}\n\t<ul class=\"notifications\">\n\t\t{% for message in notifications %}\n\t\t<li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n\t\t{% endfor %}\n\t</ul>\n\t{% endif %}\n\nThe notifications are marked to be cleared when the storage instance is\niterated (cleared when the response is processed). To avoid the notifications\nbeing cleared, you can set ``request.notifications.used = False`` after\niterating.\n\n\nTemporary Storage Backends\n==========================\n\nDjango notify can use different backends to store temporary messages. To change\nwhich backend is being used, add a ``NOTIFICATIONS_STORAGE`` to your settings,\nreferencing to the module and class of the storage class. For example::\n\n    NOTIFICATIONS_STORAGE = 'cookie.CookieStorage'\n\nDjango Notify first looks for the module inside of ``django_notify.storage``,\nand if not found, tries to import the full given module directly.\n\nThree temporary storage classes are included in Django Notify:\n\n``'session.SessionStorage'``\n    This class stores all messages inside of the request's session. It\n    requires Django's ``contrib.session`` application.\n\n``'cookie.CookieStorage'``\n    This class stores the notification data in a cookie (signed with a secret\n    hash to prevent manipulation) to persist notifications across requests.\n    Old messages are dropped if the cookie data size would exceed 4096 bytes.\n\n``'fallback.FallbackStorage'``\n    This is the default temporary storage class.\n\n    This class uses CookieStorage for all notification messages, falling back\n    to using SessionStorage for the messages which could not fit in a single\n    cookie.\n\n    Since it is uses SessionStorage, it also requires Django's\n    ``contrib.session`` application. \n\nTo write your own, subclass the ``BaseStorage`` class in\n``django_notify.storage.base`` and write ``_get`` and ``_store`` methods.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://code.google.com/p/django-notify/source/checkout",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://code.google.com/p/django-notify/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-notify",
    "package_url": "https://pypi.org/project/django-notify/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-notify/",
    "project_urls": {
      "Download": "http://code.google.com/p/django-notify/source/checkout",
      "Homepage": "http://code.google.com/p/django-notify/"
    },
    "release_url": "https://pypi.org/project/django-notify/1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django application which provides temporary notifications.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 790177,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3577105c7942b26b0b4d3fc7d61ca7834888949a1b481d7bb7444d1ec60f276e",
        "md5": "6d5501a7e4e804a0e81aa8d4b0747f2b",
        "sha256": "3b14dbb96c2c0f71ffa851ab1594cb930468a96282ab379352f3827256ca592e"
      },
      "downloads": -1,
      "filename": "django-notify-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6d5501a7e4e804a0e81aa8d4b0747f2b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9313,
      "upload_time": "2009-10-12T03:26:29",
      "upload_time_iso_8601": "2009-10-12T03:26:29.845877Z",
      "url": "https://files.pythonhosted.org/packages/35/77/105c7942b26b0b4d3fc7d61ca7834888949a1b481d7bb7444d1ec60f276e/django-notify-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}