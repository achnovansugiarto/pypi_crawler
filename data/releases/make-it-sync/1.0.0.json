{
  "info": {
    "author": "G. Watts (IRIS-HEP/UW Seattle)",
    "author_email": "gwatts@uw.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "# make-it-sync\n\nThis very simple library helps provide a synchronous interface for your python `async` functions and class methods.\n\n## Introduction\n\n```python\nfrom asyncio import sleep\nfrom make_it_sync import make_sync\n\nasync def simple_func(a: int) -> int:\n    'Simple sleeper function to test calling mechanics'\n    await sleep(0.01)\n    return a + 1\n\n\nt_wrap = make_sync(simple_func)\nprint (t_wrap(4))\n\n# Prints out 5\n```\n\nIt works by running an `async` event loop and executing the function. It will use the current thread if no loop is running, otherwise it will create a new thread and run the function there.\n\nFeatures:\n\n1. Will wrap a stand-alone function\n1. All arguments (keyword and positional) are passed\n1. Instance methods on classes may be wrapped\n1. Abstract methods are correctly handled.\n\n## Usage\n\nTo install `pip install make-it-async`.\n\nThe `make_sync` function creates a new function that will call the function you pass to it:\n\n```python\nasync def simple_func(a: int) -> int:\n    'Simple sleeper function to test calling mechanics'\n    await sleep(0.01)\n    return a + 1\n\n\nt_wrap = make_sync(simple_func)\n```\n\nYou may treat `t_wrap` as a python function. You could use `make_sync` as a function decorator, though that isn't the normal usage as that would hid the `async` version of the function. Normally, `make_sync` is used to provide a non-async, alternate, version of the function.\n\nIt is also possible to use `make_sync` with abstract functions:\n\n```python\nclass abc_base(ABC):\n    @abstractmethod\n    async def doit_async(self):\n        raise NotImplementedError()\n\n    doit = make_sync(doit_async)\n\nclass abc_derived(abc_base):\n    async def doit_async(self):\n        return 42\n\na = abs_derived()\nprint(a.doit())\n# Will print out 42\n```\n\nThe abstract dispatch will occur at runtime and the call to `doit_async` will be pulled from the the sub-class. This allows you to define the asynchronous API in an `ABC`, and build a common set of synchronous methods.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gordonwatts/make-it-sync",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Gordon Watts (IRIS-HEP/UW Seattle)",
    "maintainer_email": "gwatts@uw.edu",
    "name": "make-it-sync",
    "package_url": "https://pypi.org/project/make-it-sync/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/make-it-sync/",
    "project_urls": {
      "Homepage": "https://github.com/gordonwatts/make-it-sync"
    },
    "release_url": "https://pypi.org/project/make-it-sync/1.0.0/",
    "requires_dist": [
      "pytest (>=3.9) ; extra == 'test'",
      "pytest-asyncio ; extra == 'test'",
      "pytest-mock ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "coverage ; extra == 'test'",
      "flake8 ; extra == 'test'",
      "codecov ; extra == 'test'",
      "autopep8 ; extra == 'test'",
      "twine ; extra == 'test'",
      "wheel ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Create a sync version of an async function",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7470482,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87787fa133c36425d4815af4093951577852e6f7cdfe821a87eb092fd053cbff",
        "md5": "58a3987a2e818225ba6dbcac6c9d1ee6",
        "sha256": "e06808ce449f765b0f86a2badc2bbe72a3f6a3d4793472b2b8c221bbdba66511"
      },
      "downloads": -1,
      "filename": "make_it_sync-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58a3987a2e818225ba6dbcac6c9d1ee6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4401,
      "upload_time": "2020-06-13T23:44:29",
      "upload_time_iso_8601": "2020-06-13T23:44:29.620122Z",
      "url": "https://files.pythonhosted.org/packages/87/78/7fa133c36425d4815af4093951577852e6f7cdfe821a87eb092fd053cbff/make_it_sync-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "139b330ffbde03591de072744ebaedf839cd5674078fc89df32304a51a1618e0",
        "md5": "13452836dc45830e89469756218c3d71",
        "sha256": "26f5dd7d066295d14eee934326228f9d05cc42267c795e0f35a8966ba54b8b4c"
      },
      "downloads": -1,
      "filename": "make-it-sync-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "13452836dc45830e89469756218c3d71",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3457,
      "upload_time": "2020-06-13T23:44:30",
      "upload_time_iso_8601": "2020-06-13T23:44:30.870118Z",
      "url": "https://files.pythonhosted.org/packages/13/9b/330ffbde03591de072744ebaedf839cd5674078fc89df32304a51a1618e0/make-it-sync-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}