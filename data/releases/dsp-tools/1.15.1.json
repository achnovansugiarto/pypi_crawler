{
  "info": {
    "author": "DaSCH - Swiss National Data and Service Center for the Humanities",
    "author_email": "support@dasch.swiss",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/dsp-tools.svg)](https://badge.fury.io/py/dsp-tools)\n\n# DSP-TOOLS - DaSCH Service Platform Tools\ndsp-tools is a command line tool that helps you interacting with the DaSCH Service Platform API.  \nGo to [Full Documentation](https://dasch-swiss.github.io/dsp-tools/)\n\n## Information for developers\nThere is a `Makefile` for all the following tasks (and more). Type `make` to print the available targets. \n\nFor a quick start, use: \n```\npip install pipenv\npipenv install --dev\npipenv run make run\n```\n\nThis creates a pipenv-environment, installs all dependencies, and installs `dsp-tools` from source.\n\nIf you prefer getting around pipenv, use instead:\n```bash\nmake upgrade-dist-tools\nmake install-requirements\nmake run\n```\n\n## Pipenv\nWe use pipenv for our dependency management. There are two ways to get started:\n - `pipenv install --dev` installs all dependencies, while giving them the opportunity to update themselves\n - `pipenv install --ignore-pipfile` is used to get a deterministic build in production\n\nThis works because there are two files defining the dependencies:\n - `Pipfile` replaces `requirements.txt`, but lists only the core dependencies, ordered in two sections:\n   - `[packages]` lists the dependencies used to run the software.\n   - `[dev-packages]` lists additional dependencies used for tests and deployment.\n - `Pipfile.lock` enables deterministic builds, by exactly pinning the version of all (sub-) dependencies. \n   This is done automatically, you must not edit `Pipfile.lock`.\n\nThe diverse `requirements.txt` files in this repo are only present for backwards compatibility\nand for GitHub CI.\n\nIf you want to install a new package, install it with `pipenv install package`. This \n - installs the package (incl. sub-dependencies) in your virtual environment\n - adds the package to the section `[packages]` of `Pipfile`. By default, no versions are pinned\n - adds the pinned versions of package and all sub-dependencies to `Pipfile.lock`\n\nIf a package is only needed for development, please install it with `pipenv install package --dev`,\nso it gets added to the `[dev-packages]` section of `Pipfile`.\n\nFor security reasons, the maintainer regularly executes\n - `pipenv check` to get informed about vulnerabilities\n - `pipenv update` to update `Pipfile.lock` with the latest version of every package\n - `make freeze-requirements` to update the requirement files and `setup.py`\n\n`make freeze-requirements` must also be executed after adding a new dependency. If you prefer working \nwithout pipenv, you can freeze your requirements with `pip3 freeze > requirements.txt` and update `setup.py`\nmanually.\n\n### Pipenv setup in PyCharm\n - Go to Add Interpreter > Pipenv Environment\n - Base Interpreter: PyCarm auto-detects one of your system-wide installed Pythons as base interpreter. \n - Pipenv executable: auto-detected\n - After hitting OK, PyCharm creates a new pipenv environment and installs the dependencies from `Pipfile`\n\nIf you already initialized a pipenv-environment via command line, you can add its interpreter in PyCharm,\nbut this will create the pipenv-environment again.\n\n## Testing\nPlease note that testing requires launching the complete DSP API stack which is based on docker images. \nTherefore, we recommend installing the [docker desktop client](https://www.docker.com/products).  \nTo run the complete test suite:\n```bash\nmake test\n```\n\n## Code style\nWhen contributing to the project please make sure you use the same code style rules as we do. We use\n[autopep8](https://pypi.org/project/autopep8/) and [mypy](https://pypi.org/project/mypy/). The \nconfiguration is defined in `pyproject.toml` in the root directory of the project.\n\nYou can use the configuration with `autopep8 --global-config pyproject.toml [file path]` and \n`mypy --config-file pyproject.toml [file path]`.\n\nIf you are using PyCharm we recommend installing autopep8 as external tool. You can then use it with \nright-click on the file > `External Tools` > `autopep8` to reformat files in-place. Due to compatibility \nissues with VSCode, the argument  `--in-place=true` can not be declared in the `pyproject.toml` and \nneeds to be passed to the external tool in the PyCharm settings.  \nmypy is available as [plugin](https://plugins.jetbrains.com/plugin/11086-mypy).\n\nIn VSCode, both mypy and autopep8 can be set up as default linter and formatter through the python extension.\n\nFor formatting Markdown files (*.md) we use the default styling configuration provided by PyCharm.\n\n## Publishing\nPublishing is automated with GitHub Actions and should _not_ be done manually. Please follow the\n[Pull Request Guidelines](https://docs.dasch.swiss/developers/dsp/contribution/#pull-request-guidelines). If done\ncorrectly, when merging a pull request into `main`, the `release-please` action will create or update a pull request for\na release. This pull request will follow semantic versioning and update the change log. Once all desired features are\nmerged, the release can be executed by merging this release pull request into `main`. This will trigger actions that\ncreate a release on GitHub, on PyPI and the docs.\n\nPlease ensure you have only one pull request per feature.\n\n## Publishing manually\nPublishing is automated with GitHub Actions and should _not_ be done manually. If you still need to do it, follow the\nsteps below.\n\nGenerate the distribution package. Make sure you have the latest versions of `setuptools` and `wheel` installed:\n\n```bash\npython3 -m pip install --upgrade pip setuptools wheel\npython3 setup.py sdist bdist_wheel\n```\n\nYou can install the package locally from the dist:\n\n```bash\npython3 -m pip ./dist/some_name.whl\n```\n\nUpload package works also with `make`:\n\n```bash\nmake dist\nmake upload\n```\n\nFor local development:\n\n```bash\npython3 setup.py develop\n```\n\n## Contributing to the documentation\nThe documentation is a collection of [markdown](https://en.wikipedia.org/wiki/Markdown) files in the `docs` folder.  \nAfter updates of the files, build and check the result with the following commands:\n\n```bash\nmake docs-build\nmake docs-serve \n```\n\nTo update the changes to the official documentation pages run:\n\n```bash\nmake docs-publish\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dasch-swiss/dsp-tools",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsp-tools",
    "package_url": "https://pypi.org/project/dsp-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/dsp-tools/",
    "project_urls": {
      "Homepage": "https://github.com/dasch-swiss/dsp-tools"
    },
    "release_url": "https://pypi.org/project/dsp-tools/1.15.1/",
    "requires_dist": [
      "argparse (~=1.4.0)",
      "click (~=8.1.3)",
      "isodate (~=0.6.1)",
      "jsonpath-ng (~=1.5.3)",
      "jsonschema (~=4.6.0)",
      "lxml (~=4.9.0)",
      "networkx (~=2.8.4)",
      "openpyxl (~=3.0.10)",
      "pandas (~=1.4.2)",
      "ply (~=3.11)",
      "pyparsing (~=2.4.7)",
      "pystrict (~=1.2)",
      "pytz (~=2022.1)",
      "rdflib (~=6.1.1)",
      "requests (~=2.28.0)",
      "rfc3987 (~=1.3.8)",
      "validators (~=0.20.0)",
      "numpy (~=1.22.4) ; python_version < \"3.10\" and platform_machine != \"aarch64\" and platform_machine != \"arm64\"",
      "python-dateutil (~=2.8.2) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "six (~=1.16.0) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "attrs (~=21.4.0) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3, 3.4\"",
      "urllib3 (~=1.26.9) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3, 3.4\" and python_version < \"4\"",
      "charset-normalizer (~=2.0.12) ; python_version >= \"3.5\"",
      "decorator (~=5.1.1) ; python_version >= \"3.5\"",
      "idna (~=3.3) ; python_version >= \"3.5\"",
      "certifi (~=2022.6.15) ; python_version >= \"3.6\"",
      "et-xmlfile (~=1.1.0) ; python_version >= \"3.6\"",
      "pyrsistent (~=0.18.1) ; python_version >= \"3.7\"",
      "setuptools (~=62.6.0) ; python_version >= \"3.7\""
    ],
    "requires_python": ">=3.9.0",
    "summary": "A Python library and tools for the DaSCH Service Platform",
    "version": "1.15.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17394892,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50500fc220145674d0dc7fd8591ab4bf3fbd7592535203163a61569368524a6a",
        "md5": "af804e4c10abea0d3c18ddaa89866182",
        "sha256": "1569364357f9ff0cc27e0d8f949584250f810c54a76ea3070880719dc7212769"
      },
      "downloads": -1,
      "filename": "dsp_tools-1.15.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af804e4c10abea0d3c18ddaa89866182",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.0",
      "size": 121816,
      "upload_time": "2022-06-23T16:32:47",
      "upload_time_iso_8601": "2022-06-23T16:32:47.822924Z",
      "url": "https://files.pythonhosted.org/packages/50/50/0fc220145674d0dc7fd8591ab4bf3fbd7592535203163a61569368524a6a/dsp_tools-1.15.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12a17563776b80cbb269c723c14002321ca601a51ba7e78411e874426380bbe4",
        "md5": "ac4854f71610b259718d7a95d55082a8",
        "sha256": "5a0a97ee53afe3ad02d97831ae1301877e90a8e7b5912dedbd79c84efc4024b5"
      },
      "downloads": -1,
      "filename": "dsp-tools-1.15.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ac4854f71610b259718d7a95d55082a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 101651,
      "upload_time": "2022-06-23T16:32:49",
      "upload_time_iso_8601": "2022-06-23T16:32:49.928197Z",
      "url": "https://files.pythonhosted.org/packages/12/a1/7563776b80cbb269c723c14002321ca601a51ba7e78411e874426380bbe4/dsp-tools-1.15.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}