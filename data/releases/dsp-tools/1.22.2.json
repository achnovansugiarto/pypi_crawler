{
  "info": {
    "author": "DaSCH - Swiss National Data and Service Center for the Humanities",
    "author_email": "support@dasch.swiss",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/dsp-tools.svg)](https://badge.fury.io/py/dsp-tools)\n\n# DSP-TOOLS - DaSCH Service Platform Tools\n\ndsp-tools is a command line tool that helps you to interact with the DaSCH Service Platform API. Consult the full \ndocumentation [here](https://docs.dasch.swiss/latest/DSP-TOOLS).\n\n\n## Information for developers\n\nThere is a `Makefile` for all the following tasks (and more). Type `make` to print the available targets. \n\nFor a quick start, use: \n```bash\npip install pipenv\npipenv install --dev\npipenv run make install\n```\n\nThis creates a pipenv-environment, installs all dependencies, and installs `dsp-tools` from source.\n\nIf you prefer getting around pipenv, use instead:\n```bash\nmake install-requirements\nmake install\n```\n\n\n\n## User data in the folder `.dsp-tools`\n\nDSP-TOOLS saves user data in the user's home directory, in the folder `.dsp-tools`. Here is an overview of its \nstructure:\n\n| folder     | command using it | description                                  |\n|:-----------|:-----------------|:---------------------------------------------|\n| xmluploads | `xmlupload`      | saves id2iri mappings and error reports      |\n| docker     | `stack-up`       | files necessary to startup Docker containers |\n\n\n\n## The `start-stack` command\n\nThis command starts Docker containers of DSP-API and DSP-APP, in the version that is running on [https://admin.dasch.\nswiss](https://admin.dasch.swiss/help). In addition to the containers, a number of files from the DSP-API GitHub \nrepository is necessary. The version of the docker images and these files must be the same. The version is hardcoded at the \nfollowing places in the code:\n\n- `knora/dsplib/docker/docker-compose.yml`: The 4 variables `services/{app,db,sipi,api}/image` must point to the \n  DockerHub image of the last deployed version\n- `knora/dsplib/utils/stack_handling.py`: The variable `commit_of_used_api_version` must be the commit hash of DSP-API \n  of the version that is running on [https://admin.dasch.swiss](https://admin.dasch.swiss/help).\n\n\n\n## Git submodules\n\nThis repository embeds [https://github.com/dasch-swiss/0123-import-scripts](https://github.com/dasch-swiss/0123-import-scripts) \nas a Git submodule in `knora/dsplib/import_scripts`. That means that `knora/dsplib/import_scripts` has no contents, but\nonly a reference to a certain commit in the main branch of `0123-import-scripts`. When you clone `dsp-tools` from GitHub \nas usual, `knora/dsplib/import_scripts` will be empty.\n\n\n### Passively using the contents of the submodule\n\nIf you don't have a clone of dsp-tools yet, clone it with \n\n```bash\ngit clone --recurse-submodules https://github.com/dasch-swiss/dsp-tools.git\n```\n\nAfter cloning it that way, and after some time has passed, you might want to get the latest changes from GitHub:\n\n```bash\ncd dsp-tools\ngit pull --recurse-submodules\n```\n\nThese two commands take care of the submodule, so that its contents are cloned/pulled as well. \n\nIn case you have an old clone of dsp-tools, without the submodule, and you want to update it, you have to proceed \ndifferently: \n\n```bash\ncd dsp-tools\ngit pull\ngit submodule update --init --recursive\n```\n\nSome notes:\n - `git clone --recurse-submodules <repo>` is shorthand for `git clone <repo>; cd <repo>; git submodule update --init --recursive`\n - `git pull --recurse-submodules` is shorthand for `git pull; git submodule update --init --recursive`\n - `--init` is necessary if you don't have the submodule `knora/dsplib/import_scripts` yet. In all successive calls, \n   when the submodule is already on your machine, the flag `--init` can be omitted.\n - `--recursive` is optional, in case there would be more than one (nested) submodules inside dsp-tools. \n - Since Git 2.15, you can tell Git to use `--recurse-submodules` for all commands that support it (except `clone`), \n   with `git config submodule.recurse true`.\n - These explanations rely on [the official Git Submodules documentation](https://git-scm.com/book/en/v2/Git-Tools-Submodules)\n\n\n### Actively working with the contents of the submodule\n\nAfter retrieving the contents of a submodule as described in the paragraph above, it is in \"detached HEAD\" state. Before \ncommitting to it, the `main` branch needs to be checked out. The order how to proceed is the following:\n\n```bash\ncd knora/dsplib/import_scripts\ngit checkout main                     # check out main branch of 0123-import-scripts\n# (modify contents of submodule)\ngit add .\ngit commit -m \"modify submodule\"\ngit push origin main                  # push to origin of 0123-import-scripts\ncd ../../..\ngit add knora/dsplib/import_scripts\ngit commit -m \"modify submodule\"\ngit push origin feature-branch        # push to origin of dsp-tools\n```\n\nWhen switching between branches, there are two options:\n\n1. By default (`submodule.recurse` is false AND branches are switched with `git checkout <branch>`), the contents of \n  submodules will not be updated.\n2. If `submodule.recurse` has been set to true, OR if branches are switched with `git checkout <branch> \n    --recurse-submodules`, the contents of submodules will be updated according to the commit recorded in the \n   superproject. If local modifications in a submodule would be overwritten, the checkout will fail.\n\nTo quickly switch between branches when you have \nuncommitted work in the submodule, the first option might be preferable. After merging a Pull Request and switching \nback to the main branch, the second option might be more suitable.  \nRead more about the checkout options in [the official documentation](https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt---recurse-submodules)\n\n\n\n## Pipenv\n\nWe use pipenv for our dependency management. There are two ways to get started:\n - `pipenv install --dev` installs all dependencies, while giving them the opportunity to update themselves\n - `pipenv install --ignore-pipfile` is used to get a deterministic build in production\n\nThis works because there are two files defining the dependencies:\n - `Pipfile` replaces `requirements.txt`, but lists only the core dependencies, ordered in two sections:\n   - `[packages]` lists the dependencies used to run the software.\n   - `[dev-packages]` lists additional dependencies used for tests and deployment.\n - `Pipfile.lock` enables deterministic builds, by exactly pinning the version of all (sub-) dependencies. \n   This is done automatically, you must not edit `Pipfile.lock`.\n\nThe diverse `requirements.txt` files in this repo are only present for backwards compatibility\nand for GitHub CI.\n\nIf you want to install a new package, install it with `pipenv install package`. This \n - installs the package (incl. sub-dependencies) in your virtual environment\n - adds the package to the section `[packages]` of `Pipfile`. By default, no versions are pinned\n - adds the pinned versions of package and all sub-dependencies to `Pipfile.lock`\n\nIf a package is only needed for development, please install it with `pipenv install package --dev`,\nso it gets added to the `[dev-packages]` section of `Pipfile`.\n\nFor security reasons, the maintainer regularly executes\n - `pipenv check` to get informed about vulnerabilities\n - `pipenv update` to update `Pipfile.lock` with the latest version of every package\n - `make freeze-requirements` to update the requirement files and `setup.py`\n\n`make freeze-requirements` must also be executed after adding a new dependency. If you prefer working \nwithout pipenv, you can freeze your requirements with `pip3 freeze > requirements.txt` and update `setup.py`\nmanually.\n\n\n### Pipenv setup in PyCharm\n\n - Go to Add Interpreter > Pipenv Environment\n - Base Interpreter: PyCarm auto-detects one of your system-wide installed Pythons as base interpreter. \n - Pipenv executable: auto-detected\n - After hitting OK, PyCharm creates a new pipenv environment and installs the dependencies from `Pipfile`\n\nIf you already initialized a pipenv-environment via command line, you can add its interpreter in PyCharm,\nbut this will create the pipenv-environment again.\n\n\n## Testing\n\nPlease note that testing requires launching the complete DSP API stack which is based on docker images. \nTherefore, we recommend installing the [docker desktop client](https://www.docker.com/products).  \nTo run the complete test suite:\n```bash\nmake test\n```\n\n\n## Code style\n\nWhen contributing to the project please make sure you use the same code style rules as we do. We use\n[autopep8](https://pypi.org/project/autopep8/) and [mypy](https://pypi.org/project/mypy/). The \nconfiguration is defined in `pyproject.toml` in the root directory of the project.\n\nYou can use the configuration with `autopep8 --global-config pyproject.toml [file path]` and \n`mypy --config-file pyproject.toml [file path]`.\n\nIf you are using PyCharm we recommend installing autopep8 as external tool. You can then use it with \nright-click on the file > `External Tools` > `autopep8` to reformat files in-place. Due to compatibility \nissues with VSCode, the argument  `--in-place=true` can not be declared in the `pyproject.toml` and \nneeds to be passed to the external tool in the PyCharm settings.  \nmypy is available as [plugin](https://plugins.jetbrains.com/plugin/11086-mypy).\n\nIn VSCode, both mypy and autopep8 can be set up as default linter and formatter through the python extension.\n\nFor formatting Markdown files (*.md) we use the default styling configuration provided by PyCharm.\n\n\n## Publishing\n\nPublishing is automated with GitHub Actions and should _not_ be done manually. Please follow the\n[Pull Request Guidelines](https://docs.dasch.swiss/latest/developers/dsp/contribution/#pull-request-guidelines). If done\ncorrectly, when merging a pull request into `main`, the `release-please` action will create or update a pull request for\na release. This pull request will follow semantic versioning and update the change log. Once all desired features are\nmerged, the release can be executed by merging this release pull request into `main`. This will trigger actions that\ncreate a release on GitHub, on PyPI and the docs.\n\nPlease ensure you have only one pull request per feature.\n\n\n## Publishing manually\n\nPublishing is automated with GitHub Actions and should _not_ be done manually. If you still need to do it, follow the\nsteps below.\n\nGenerate the distribution package. Make sure you have the latest versions of `setuptools` and `wheel` installed:\n\n```bash\npython3 -m pip install --upgrade pip setuptools wheel\npython3 setup.py sdist bdist_wheel\n```\n\nYou can install the package locally from the dist:\n\n```bash\npython3 -m pip ./dist/some_name.whl\n```\n\nUpload package works also with `make`:\n\n```bash\nmake dist\nmake upload\n```\n\nFor local development:\n\n```bash\npython3 setup.py develop\n```\n\n\n## Contributing to the documentation\n\nThe documentation is a collection of [markdown](https://en.wikipedia.org/wiki/Markdown) files in the `docs` folder.  \nAfter updates of the files, build and check the result with the following command:\n\n```bash\nmake docs-serve \n```\n\nThe documentation is published on https://docs.dasch.swiss/latest/DSP-TOOLS. During the centralized release process of all\ncomponents of the DSP software stack, the docs of dsp-tools get built from the main branch to https://docs.dasch.swiss.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dasch-swiss/dsp-tools",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dsp-tools",
    "package_url": "https://pypi.org/project/dsp-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/dsp-tools/",
    "project_urls": {
      "Homepage": "https://github.com/dasch-swiss/dsp-tools"
    },
    "release_url": "https://pypi.org/project/dsp-tools/1.22.2/",
    "requires_dist": [
      "argparse (~=1.4.0)",
      "jsonpath-ng (~=1.5.3)",
      "jsonschema (~=4.17.0)",
      "lxml (~=4.9.1)",
      "networkx (~=2.8.8)",
      "openpyxl (~=3.0.10)",
      "pandas (~=1.5.1)",
      "ply (~=3.11)",
      "pystrict (~=1.3)",
      "pytz (~=2022.6)",
      "pyyaml (~=6.0)",
      "regex (~=2022.10.31)",
      "requests (~=2.28.1)",
      "types-pyyaml (~=6.0.12.1)",
      "xlrd (~=2.0.1)",
      "numpy (~=1.23.4) ; python_version < \"3.10\"",
      "python-dateutil (~=2.8.2) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "six (~=1.16.0) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "urllib3 (~=1.26.12) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3, 3.4, 3.5\" and python_version < \"4\"",
      "attrs (~=22.1.0) ; python_version >= \"3.5\"",
      "decorator (~=5.1.1) ; python_version >= \"3.5\"",
      "idna (~=3.4) ; python_version >= \"3.5\"",
      "certifi (~=2022.9.24) ; python_version >= \"3.6\"",
      "charset-normalizer (~=2.1.1) ; python_version >= \"3.6\"",
      "et-xmlfile (~=1.1.0) ; python_version >= \"3.6\"",
      "pyrsistent (~=0.19.2) ; python_version >= \"3.7\""
    ],
    "requires_python": ">=3.9.0",
    "summary": "A Python library and tools for the DaSCH Service Platform",
    "version": "1.22.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17394892,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fbc51ef7e5ec1daf39437b9ab3080ca66aafce11726f674533e6e206c3ac4f5",
        "md5": "48a7035bd55265ba36a1a4718d563ef1",
        "sha256": "104ddcf2ae8258a852f231c3ddda920990c3a43312c5a57761ccc5c9e952118e"
      },
      "downloads": -1,
      "filename": "dsp_tools-1.22.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48a7035bd55265ba36a1a4718d563ef1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.0",
      "size": 148901,
      "upload_time": "2022-12-21T14:56:45",
      "upload_time_iso_8601": "2022-12-21T14:56:45.016073Z",
      "url": "https://files.pythonhosted.org/packages/4f/bc/51ef7e5ec1daf39437b9ab3080ca66aafce11726f674533e6e206c3ac4f5/dsp_tools-1.22.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54127199dfba54d6fc6656158d4530e1982e21d47ae71fdb77be9bad8cb059b2",
        "md5": "2b9faaf7434f82b96ab182019921a529",
        "sha256": "64622e7c1b9be3b6dcf40556949e6d1686c713b3d3b1f419326d0c61cc16e7c0"
      },
      "downloads": -1,
      "filename": "dsp-tools-1.22.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2b9faaf7434f82b96ab182019921a529",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 126214,
      "upload_time": "2022-12-21T14:56:46",
      "upload_time_iso_8601": "2022-12-21T14:56:46.989147Z",
      "url": "https://files.pythonhosted.org/packages/54/12/7199dfba54d6fc6656158d4530e1982e21d47ae71fdb77be9bad8cb059b2/dsp-tools-1.22.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}