{
  "info": {
    "author": "Namespace OÃœ",
    "author_email": "info@namespace.ee",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![Package Index](https://badge.fury.io/py/drf-sideloading.svg)](https://badge.fury.io/py/drf-sideloading)\n[![Build Status](https://travis-ci.org/namespace-ee/django-rest-framework-sideloading.svg?branch=master)](https://travis-ci.org/namespace-ee/django-rest-framework-sideloading)\n[![Code Coverage](https://codecov.io/gh/namespace-ee/django-rest-framework-sideloading/branch/master/graph/badge.svg)](https://codecov.io/gh/namespace-ee/django-rest-framework-sideloading)\n[![License is MIT](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/namespace-ee/drf-sideloading/blob/master/LICENSE)\n[![Code style Black](https://img.shields.io/badge/code%20style-black-000000.svg?maxAge=2592000)](https://github.com/ambv/black)\n\n:warning: Note that there are major API changes since version 0.1.1 that have to be taken into account when upgrading!\n\n:warning: Python 2 and Django 1.11 are no longer supported from version 1.4.0!\n\n# Django rest framework sideloading\n\nDRF-sideloading is an extension to provide side-loading functionality of related resources. Side-loading allows related resources to be optionally included in a single API response minimizing requests to the API.\n\n## Quickstart\n\n1. Install drf-sideloading:\n\n    ```shell\n    pip install drf-sideloading\n    ```\n\n2. Import `SideloadableRelationsMixin`:\n\n    ```python\n    from drf_sideloading.mixins import SideloadableRelationsMixin\n    ```\n\n3. Write your SideLoadableSerializer:\n   \n   You need to define the **primary** serializer in the Meta data and can define prefetching rules. \n   Also notice the **many=True** on the sideloadable relationships.\n\n    ```python\n    from drf_sideloading.serializers import SideLoadableSerializer\n    \n    class ProductSideloadableSerializer(SideLoadableSerializer):\n        products = ProductSerializer(many=True)\n        categories = CategorySerializer(source=\"category\", many=True)\n        primary_suppliers = SupplierSerializer(source=\"primary_supplier\", many=True)\n        secondary_suppliers = SupplierSerializer(many=True)\n        suppliers = SupplierSerializer(many=True)\n        partners = PartnerSerializer(many=True)\n    \n        class Meta:\n            primary = \"products\"\n            prefetches = {\n                \"categories\": \"category\",\n                \"primary_suppliers\": \"primary_supplier\",\n                \"secondary_suppliers\": \"secondary_suppliers\",\n                \"suppliers\": {\n                    \"primary_suppliers\": \"primary_supplier\",\n                    \"secondary_suppliers\": \"secondary_suppliers\",\n                },\n                \"partners\": \"partners\",\n            }\n    ```\n   \n4. Prefetches\n\n   For fields where the source is provided or where the source matches the field name, prefetches are not strictly required\n\n   Multiple prefetches can be added to a single sideloadable field, but when using Prefetch object check that they don't clash with prefetches made in the get_queryset() method\n   ```python\n   from django.db.models import Prefetch\n\n   prefetches = {\n       \"categories\": \"category\",\n       \"primary_suppliers\": [\"primary_supplier\", \"primary_supplier__some_related_object\"],\n       \"secondary_suppliers\": Prefetch(\n           lookup=\"secondary_suppliers\", \n           queryset=Supplier.objects.prefetch_related(\"some_related_object\")\n       ),\n       \"partners\": Prefetch(\n           lookup=\"partners\", \n           queryset=Partner.objects.select_related(\"some_related_object\")\n       )\n   }\n   ```\n\n   Multiple sources can be added to a field using a dict. \n   Each key is a source_key that can be used to filter what sources should be sideloaded.\n   The values set the source and prefetches for this source.\n   \n   Note that this prefetch reuses `primary_supplier` and `secondary_suppliers` if suppliers and primary_supplier or secondary_suppliers are sideloaded\n   ```python\n   prefetches = {\n       \"primary_suppliers\": \"primary_supplier\",\n       \"secondary_suppliers\": \"secondary_suppliers\",\n       \"suppliers\": {\n           \"primary_suppliers\": \"primary_supplier\",\n           \"secondary_suppliers\": \"secondary_suppliers\"\n       }\n   }\n   ```\n\n   Usage of Prefetch() objects is supported.\n   Prefetch() objects can be used to filter a subset of some relations or just to prefetch or select complicated related objects\n   In case there are prefetch conflicts, `to_attr` can be set but be aware that this prefetch will now be a duplicate of similar prefetches.\n   prefetch conflicts can also come from prefetched made in the ViewSet.get_queryset() method.\n   \n   Note that this prefetch noes not reuse `primary_supplier` and `secondary_suppliers` if **suppliers** and **primary_supplier** or **secondary_suppliers** are sideloaded at the same time.\n   ```python\n   from django.db.models import Prefetch\n   \n   prefetches = {\n       \"categories\": \"category\",\n       \"primary_suppliers\": \"primary_supplier\",\n       \"secondary_suppliers\": \"secondary_suppliers\",\n       \"suppliers\": {\n           \"primary_suppliers\": Prefetch(\n               lookup=\"secondary_suppliers\", \n               queryset=Supplier.objects.select_related(\"some_related_object\"), \n               to_attr=\"secondary_suppliers_with_preselected_relation\"\n           ),\n           \"secondary_suppliers\": Prefetch(\n               lookup=\"secondary_suppliers\", \n               queryset=Supplier.objects.filter(created_at__gt=pendulum.now().subtract(days=10)).order_by(\"created_at\"), \n               to_attr=\"latest_secondary_suppliers\"\n           )\n       },\n   }\n   ```\n\n5. Configure sideloading in ViewSet:\n   \n   Include **SideloadableRelationsMixin** mixin in ViewSet and define **sideloading_serializer_class** as shown in example below. \n   Everything else stays just like a regular ViewSet.\n   Since version 2.0.0 there are 3 new methods that allow to overwrite the serializer used based on the request version for example\n\n    ```python\n    from drf_sideloading.mixins import SideloadableRelationsMixin\n    \n    class ProductViewSet(SideloadableRelationsMixin, viewsets.ModelViewSet):\n        \"\"\"\n        A simple ViewSet for viewing and editing products.\n        \"\"\"\n    \n        queryset = Product.objects.all()\n        serializer_class = ProductSerializer\n        sideloading_serializer_class = ProductSideloadableSerializer\n   \n        def get_queryset(self):\n            # Add prefetches for the viewset as normal \n            return super().get_queryset().prefetch_related(\"created_by\")\n   \n        def get_sideloading_serializer_class(self):\n            # use a different sideloadable serializer for older version \n            if self.request.version < \"1.0.0\":\n                return OldProductSideloadableSerializer\n            return super().get_sideloading_serializer_class()\n   \n        def get_sideloading_serializer(self, *args, **kwargs):\n            # if modifications are required to the serializer initialization this method can be used.\n            return super().get_sideloading_serializer(*args, **kwargs)\n   \n        def get_sideloading_serializer_context(self):\n            # Extra context provided to the serializer class.\n            return {\"request\": self.request, \"format\": self.format_kwarg, \"view\": self}\n    ```\n\n6. Enjoy your API with sideloading support\n\n   Example request and response when fetching all possible values\n    ```http\n    GET /api/products/?sideload=categories,partners,primary_suppliers,secondary_suppliers,suppliers,products\n    ```\n\n    ```json\n    {\n      \"products\": [\n        {\n          \"id\": 1,\n          \"name\": \"Product 1\",\n          \"category\": 1,\n          \"primary_supplier\": 1,\n          \"secondary_suppliers\": [2, 3],\n          \"partners\": [1, 2, 3]\n        }\n      ],\n      \"categories\": [\n        {\n          \"id\": 1,\n          \"name\": \"Category1\"\n        }\n      ],\n      \"primary_suppliers\": [\n        {\n          \"id\": 1,\n          \"name\": \"Supplier1\"\n        }\n      ],\n      \"secondary_suppliers\": [\n        {\n          \"id\": 2,\n          \"name\": \"Supplier2\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Supplier3\"\n        }\n      ],\n      \"suppliers\": [\n        {\n          \"id\": 1,\n          \"name\": \"Supplier1\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Supplier2\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Supplier3\"\n        }\n      ],\n      \"partners\": [\n        {\n          \"id\": 1,\n          \"name\": \"Partner1\"\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Partner1\"\n        },\n        {\n          \"id\": 3,\n          \"name\": \"Partner3\"\n        }\n      ]\n    }\n    ```\n   \n   The user can also select what sources to load to Multi source fields. \n   Leaving the selections empty or omitting the brackets will load all the prefetched sources.\n   \n   Example:\n\n    ```http\n    GET /api/products/?sideload=suppliers[primary_suppliers]\n    ```\n   ```json\n    {\n      \"products\": [\n        {\n          \"id\": 1,\n          \"name\": \"Product 1\",\n          \"category\": 1,\n          \"primary_supplier\": 1,\n          \"secondary_suppliers\": [2, 3],\n          \"partners\": [1, 2, 3]\n        }\n      ],\n      \"suppliers\": [\n        {\n          \"id\": 1,\n          \"name\": \"Supplier1\"\n        }\n      ]\n    }\n    ```\n## Example Project\n\nDirectory `example` contains an example project using django rest framework sideloading library. You can set it up and run it locally using following commands:\n\n```shell\ncd example\nsh scripts/devsetup.sh\nsh scripts/dev.sh\n```\n\n## Contributing\n\nContributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.\n\n#### Setup for contribution\n\n```shell\nsource <YOURVIRTUALENV>/bin/activate\n(myenv) $ pip install -r requirements_dev.txt\n```\n\n### Test\n\n```shell\n$ make test\n```\n\n#### Run tests with environment matrix\n\n```shell\n$ make tox\n```\n\n#### Run tests with specific environment\n\n```shell\n$ tox --listenvs\npy37-django22-drf39\npy38-django31-drf311\npy39-django32-drf312\n# ...\n$ tox -e py39-django32-drf312\n```\n\n#### Test coverage\n\n```shell\n$ make coverage\n```\n\nUse [pyenv](https://github.com/pyenv/pyenv) for testing using different python versions locally.\n\n## License\n\n[MIT](https://github.com/namespace-ee/drf-sideloading/blob/master/LICENSE)\n\n## Credits\n\n- [Demur Nodia](https://github.com/demonno)\n- [TÃµnis VÃ¤in](https://github.com/tonisvain)\n- [Madis VÃ¤in](https://github.com/madisvain)\n- [Lenno Nagel](https://github.com/lnagel)\n\n\n# Changelog\n\n## 2.0.0 (2021-12-10)\n\nMajor refactoring to allow for multi source fields.\n\n- Add support for multi source fields\n- Add support for detail view sideloading\n- Dropped formless BrowsableAPIRenderer enforcement\n- Raises error in case invalid fields are requested for sideloading\n\n## 1.4.2 (2021-04-12)\n\n- Add support for lists in filter_related_objects\n\n## 1.4.1 (2021-04-09)\n\n- Fix sideloadable prefetches\n\n## 1.4.0 (2021-04-07)\n\n- Python supported versions `3.6 -> 3.9`\n- Django supported versions `2.2`, `3.1`, `3.2`\n- Django-rest-framework supported versions. `3.9 -> 3.12`\n\n## 1.3.1 (2021-04-07)\n\nAdded support for `django.db.models.Prefetch`\n\n## 1.3.0 (2019-04-23)\n\nFix empty related fields sideloading bug\n\n- Support for Django 2.2\n\n## 1.2.0 (2018-10-29)\n\nCompletely refactored sideloading configuration via a custom serializer.\n\n- Support for Django 2.1\n- Support for Django-rest-framework 3.9\n\n## 0.1.10 (2017-07-20)\n\n- Support for Django 2.0\n\n## 0.1.8 (2017-07-20)\n\n- change sideloadable_relations dict\n- always required to define 'serializer'\n- key is referenced to url and serialized in as rendered json\n- add `source` which specifies original model field name\n\n## 0.1.0 (2017-07-20)\n\n- First release on PyPI.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/namespace-ee/drf-sideloading",
    "keywords": "drf-sideloading",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-sideloading",
    "package_url": "https://pypi.org/project/drf-sideloading/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-sideloading/",
    "project_urls": {
      "Homepage": "https://github.com/namespace-ee/drf-sideloading"
    },
    "release_url": "https://pypi.org/project/drf-sideloading/2.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extension for Django Rest Framework to enable simple sideloading",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12322546,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b5eff4908681f32ed1def09e0b94fd058e6b593714e54335ae466035f6c5242",
        "md5": "ad7e3447e262f6112a427e479acf5df2",
        "sha256": "6fadbb808c5090892c9c0141b243715874d53948ad9bbd00abdecad60474addd"
      },
      "downloads": -1,
      "filename": "drf-sideloading-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ad7e3447e262f6112a427e479acf5df2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17279,
      "upload_time": "2021-12-10T10:35:02",
      "upload_time_iso_8601": "2021-12-10T10:35:02.716265Z",
      "url": "https://files.pythonhosted.org/packages/1b/5e/ff4908681f32ed1def09e0b94fd058e6b593714e54335ae466035f6c5242/drf-sideloading-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}