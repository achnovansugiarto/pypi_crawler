{
  "info": {
    "author": "Anupam Sharma",
    "author_email": "anupammrg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-to-rest\n--------------\n\n.. image:: https://raw.githubusercontent.com/anp-scp/django-to-rest/master/docs/img/large_logo_black.png\n   :width: 300px\n   :alt: Django-to-rest\n   :align: left\n\n\n--------------\n\n|PyPI version| |CI Passing|\n\n--------------\n\nDjango To Rest is small tool that helps to expose REST api(s) for\ndjango models with minimum effort. This utility is for one who uses \n`Django REST Framework` for writing REST APIs. The tool enables you \nto focus only on the code needed explicitly. The tool handles all \nboilerplate for writing CRUD APIs. Some of the features are:\n\n-  Just add a decorator atop of a model and REST api(s) are created.\n   That's the work!!!\n-  Options like filtering and ordering are avilable by default for model\n   fields\n-  Easy customisations via the decorator itself\n-  *Summary:* Less time??? Just install the tool and the decorator.\n   Done!!!\n\n--------------\n\n-  *Documentation:*\n   `https://anp-scp.github.io/django-to-rest <https://anp-scp.github.io/django-to-rest>`__\n-  *Source Code:*\n   `https://github.com/anp-scp/django-to-rest <https://github.com/anp-scp/django-to-rest>`__\n\n--------------\n\n**Requirements**\n----------------\n\nDjango to Rest need following requirements :\n\n-  Python 3.8+\n-  Django 4.0.5+\n-  djangorestframework 3.13.1+\n-  django-filter 22.1\n\n--------------\n\n**Installation**\n----------------\n\ndjango-to-rest is published as a package and can be installed using pip.\nInstall with (consider creating a virtual environment):\n\n::\n\n   python3 -m pip install django-to-rest\n\n**Example**\n-----------\n\nLet us have a look on an example of how the tool can be used to expose\nREST API.\n\nLet us assume that the following are the requirements:\n\n#. A polls app having certain questions and each question have some choices.\n#. All CRUD URLs for question and choice objects.\n#. We need an URL which simply increments a counter\n\nMake sure that ``djangorestframework`` is installed and included in\n``INSTALLED_APPS`` in settings.py as shown below:\n\n.. code:: py\n\n   ...\n   INSTALLED_APPS = [\n       'rest_framework',\n       ...\n   ]\n   ...\n\nNow create two models as shown below:\n\n.. code:: py\n\n   from django.db import models\n   from django.utils import timezone\n   from django.contrib import admin\n   from to_rest.decorators import restifyModel # Import the decorator from the library\n\n   # Create your models here.\n   @restifyModel # Note the way decorator is used\n   class Question(models.Model):\n       question_text = models.CharField(max_length=200)\n       pub_date = models.DateTimeField('date published')\n\n       def __str__(self):\n           return self.question_text\n\n\n   @restifyModel # Note the way decorator is used\n   class Choice(models.Model):\n       question = models.ForeignKey(Question, on_delete=models.CASCADE,related_name='choices')\n       choice_text = models.CharField(max_length=200)\n       votes = models.IntegerField(default=0)\n\n       def __str__(self):\n           return self.choice_text\n\nNote the use of the decorators. We just need to use the decorator and\nall the views and serializers would be created during startup. But apart\nfrom that, we need one more line to add in ``urls.py`` of the project\n(not any app) as shown below:\n\n.. code:: py\n\n   from django.urls import path\n   from to_rest import utils\n   from django.http import JsonResponse\n\n   urlpatterns = [\n           ...\n           ]\n   urlpatterns.extend(utils.restifyApp('rest/v1')) # call this method to add the urls in url patterns. Here the parameter 'rest/v1' is the prefix to be used in the url.\n\nThat's all. All the above configurations will create the CRUD APIs for the classes that we \nmarked using the decorator. For the 3rd requirement we can simply write a method the way \nwe write in `Django` or `Django REST Framework`. We add the following lines in `urls.py`:\n\n.. code:: py\n\n   count = 0 \n\n   def counter(request) :\n      global count\n      if request.method == 'GET':\n         count += 1\n         return JsonResponse({'count': count})\n   urlpatterns.append(path('count/', counter))\n\nNow start the server. We add some data and check the dev url `http://127.0.0.1:8000/`.\nBelow is an example with httpie:\n\n::\n   \n   $ http -b --unsorted http://127.0.0.1:8000/\n   {\n      \"rest/v1/polls/question\": \"http://127.0.0.1:8000/rest/v1/polls/question\",\n      \"rest/v1/polls/choice\": \"http://127.0.0.1:8000/rest/v1/polls/choice\"\n   }\n\n   $ http -b --unsorted http://127.0.0.1:8000/rest/v1/polls/question\n   [\n      {\n         \"id\": 1,\n         \"question_text\": \"How is the traffic?\",\n         \"pub_date\": \"2022-07-08T10:02:16.290713Z\",\n         \"choices\": \"/rest/v1/polls/question/1/choices\"\n      },\n      {\n         \"id\": 2,\n         \"question_text\": \"What's up?\",\n         \"pub_date\": \"2022-07-08T10:03:15.816192Z\",\n         \"choices\": \"/rest/v1/polls/question/2/choices\"\n      }\n   ]\n\n   $ http -b --unsorted http://127.0.0.1:8000/rest/v1/polls/question/1/choices\n   [\n      {\n         \"id\": 1,\n         \"choice_text\": \"Highly Conjested\",\n         \"votes\": 0,\n         \"question\": 1\n      },\n      {\n         \"id\": 2,\n         \"choice_text\": \"Clear for miles\",\n         \"votes\": 0,\n         \"question\": 1\n      }\n   ]\n\n   $ http -b --unsorted http://127.0.0.1:8000/count/\n   {\n      \"count\": 1\n   }\n\n   $ http -b --unsorted http://127.0.0.1:8000/count/\n   {\n      \"count\": 2\n   }\n\n   $ http -b --unsorted http://127.0.0.1:8000/count/\n   {\n      \"count\": 3\n   }\n\nHere, we wrote extra code only for the `/count/` URL \nand other CRUD URLs where created by the utility.\n\n**Quickstart**\n--------------\n\nThe `quick start\nguide <https://anp-scp.github.io/django-to-rest/quickstart/>`__ is a\nshort tutorial which is the fastest way to get everything setup and get\nan overview of the tool.\n\n.. |PyPI version| image:: https://badge.fury.io/py/django-to-rest.svg\n   :target: https://badge.fury.io/py/django-to-rest\n.. |CI Passing| image:: https://github.com/anp-scp/django-to-rest/actions/workflows/ci.yml/badge.svg\n\n**Contributing**\n----------------\n\nCheck the `contribution guidelines <https://anp-scp.github.io/django-to-rest/community/contributing_to_django_to_rest/>`__ to know about how to contribute to the project.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-to-rest",
    "package_url": "https://pypi.org/project/django-to-rest/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-to-rest/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-to-rest/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A library to expose rest api(s) for a django app (quiet quickly) with minimum efforts",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15995884,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8baedfc0f8cf51c715ea0c4d1d7968eca0407f0a9decba31e021088e1e1b4418",
        "md5": "8004f90ebfcfef35b78e17b68b0b9c15",
        "sha256": "6d9779ca180fa58a04a7b240f4cd27da264261afef4b2cafca5bd9d365895538"
      },
      "downloads": -1,
      "filename": "django-to-rest-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8004f90ebfcfef35b78e17b68b0b9c15",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 12379,
      "upload_time": "2022-12-05T13:55:59",
      "upload_time_iso_8601": "2022-12-05T13:55:59.677694Z",
      "url": "https://files.pythonhosted.org/packages/8b/ae/dfc0f8cf51c715ea0c4d1d7968eca0407f0a9decba31e021088e1e1b4418/django-to-rest-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}