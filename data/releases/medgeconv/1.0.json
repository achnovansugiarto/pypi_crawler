{
  "info": {
    "author": "Stefan Reck",
    "author_email": "stefan.reck@fau.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "MEdgeConv\n=========\n\n.. image:: https://travis-ci.org/StefReck/MEdgeConv.svg?branch=master\n    :target: https://travis-ci.org/StefReck/MEdgeConv\n\n.. image:: https://codecov.io/gh/StefReck/MEdgeConv/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/StefReck/MEdgeConv\n\n.. image:: https://badge.fury.io/py/medgeconv.svg\n    :target: https://badge.fury.io/py/medgeconv\n\nAn efficient tensorflow 2 implementation of the edge-convolution layer\nEdgeConv used in e.g. ParticleNet.\n\nThe structure of the layer is as described in 'ParticleNet: Jet Tagging\nvia Particle Clouds'\nhttps://arxiv.org/abs/1902.08570. Graphs often have a varying number\nof nodes. By making use of the disjoint union of graphs in a batch,\nmemory intensive operations in this implementation\nare done only on the actual nodes (and not the padded ones).\n\nInstructions\n------------\n\nInstall via::\n\n    pip install medgeconv\n\n\nUse e.g. like this:\n\n.. code-block:: python\n\n    import medgeconv\n\n    nodes = medgeconv.DisjointEdgeConvBlock(\n        units=[64, 64, 64],\n        next_neighbors=16,\n        to_disjoint=True,\n        pooling=True,\n    )((nodes, is_valid, coordinates))\n\n\nInputs to EdgeConv are 3 dense tensors: nodes, is_valid and coordinates\n\n- nodes, shape (batchsize, n_nodes_max, n_features)\n    Node features of the graph, padded to fixed size.\n    Valid nodes have to come first, then the padded nodes.\n\n- is_valid, shape (batchsize, n_nodes_max)\n    1 for actual node, 0 for padded node.\n\n- coordinates, shape (batchsize, n_nodes_max, n_coords)\n    Features of each node used for calculating nearest\n    neighbors.\n\nExamples\n--------\n\nExample for batchsize = 2, n_nodes_max = 4, n_features = 2:\n\n.. code-block:: python\n\n    nodes = np.array([\n       [[2., 4.],\n        [2., 6.],\n        [0., 0.],  # <-- these nodes are padded, their\n        [0., 0.]],  #           value doesn't matter\n\n       [[0., 2.],\n        [3., 7.],\n        [4., 0.],\n        [1., 2.]],\n    ])\n\n    is_valid = np.array([\n        [1, 1, 0, 0],  # <-- 0 defines these nodes as padded\n        [1, 1, 1, 1],\n    ])\n\n    coordinates = nodes\n\n\nBy using ``to_disjoint = True``, the dense tensors get transformed to\nthe disjoint union. The output is also disjoint, so this only needs to be\ndone once.\n``pooling = True`` will attach a node-wise global\naverage pooling layer in the end, producing dense tensors again.\n\n\nA full model could look like this:\n\n.. code-block:: python\n\n    import tensorflow as tf\n    import medgeconv\n\n    inp = (nodes, is_valid, coordinates)\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[64, 64, 64],\n        to_disjoint=True,\n        batchnorm_for_nodes=True,\n    )(inp)\n\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[128, 128, 128],\n    )(x)\n\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[256, 256, 256],\n        pooling=True,\n    )(x)\n\n    output = tf.keras.layers.Dense(2)(x)\n    model = tf.keras.Model(inp, output)\n\n\nTo load models, use the custom_objects:\n\n.. code-block:: python\n\n    import medgeconv\n\n    model = load_model(path, custom_objects=medgeconv.custom_objects)\n\n\nknn_graph kernel\n----------------\n\nThis package includes a cuda kernel for calculating the k nearest neighbors\non a batch of graphs. It comes with a precompiled kernel for the version of\ntensorflow specified in requirements.txt.\n\nTo compile it locally, e.g. for a different version of\ntensorflow, go to ``medgeconv/tf_ops`` and run ``make clean`` and then ``make``.\nThis will produce the file ``medgeconv/tf_ops/python/ops/_knn_graph_ops.so``.\nFor details on how to setup the docker environment for compiling,\nsee https://github.com/tensorflow/custom-op .",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medgeconv",
    "package_url": "https://pypi.org/project/medgeconv/",
    "platform": "",
    "project_url": "https://pypi.org/project/medgeconv/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/medgeconv/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11936067,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0960e03b78a5c26128feb62d6b6b30e4a5b22ac1a9d30944c594035446bd9fb8",
        "md5": "1e55ddc2208688f4f6c97b7e56d774fc",
        "sha256": "d78e536c6bdabc664739083741741f1ee91d3e1c2a3072144d1ed634d7455f06"
      },
      "downloads": -1,
      "filename": "medgeconv-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e55ddc2208688f4f6c97b7e56d774fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 49508,
      "upload_time": "2021-03-22T14:16:26",
      "upload_time_iso_8601": "2021-03-22T14:16:26.316821Z",
      "url": "https://files.pythonhosted.org/packages/09/60/e03b78a5c26128feb62d6b6b30e4a5b22ac1a9d30944c594035446bd9fb8/medgeconv-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}