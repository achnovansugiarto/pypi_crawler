{
  "info": {
    "author": "Stefan Reck",
    "author_email": "stefan.reck@fau.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "MEdgeConv\n=========\n\n.. image:: https://travis-ci.org/StefReck/MEdgeConv.svg?branch=master\n    :target: https://github.com/StefReck/MEdgeConv/actions/workflows/cicd/badge.svg\n\n.. image:: https://codecov.io/gh/StefReck/MEdgeConv/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/StefReck/MEdgeConv\n\n.. image:: https://badge.fury.io/py/medgeconv.svg\n    :target: https://badge.fury.io/py/medgeconv\n\nAn efficient tensorflow 2 implementation of the edge-convolution layer\nEdgeConv used in e.g. ParticleNet.\n\nThe structure of the layer is as described in 'ParticleNet: Jet Tagging\nvia Particle Clouds' https://arxiv.org/abs/1902.08570.\n\nInstructions\n------------\n\nInstall via::\n\n    pip install medgeconv\n\n\nUse e.g. like this:\n\n.. code-block:: python\n\n    import medgeconv\n\n    nodes = medgeconv.DisjointEdgeConvBlock(\n        units=[64, 64, 64],\n        next_neighbors=16,\n    )((nodes, coordinates))\n\n\nInputs to EdgeConv are 2 ragged tensors: nodes and coordinates\n\n- nodes, shape (batchsize, None, n_features)\n    Node features of the graph. Secound dimension is the number of nodes,\n    which can vary from graph to graph.\n\n- coordinates, shape (batchsize, None, n_coords)\n    Features of each node used for calculating nearest neighbors.\n\n\nExample: Input for a graph with 2 features per node, and all node features\nused as coordinates.\n\n.. code-block:: python\n\n    import tensorflow as tf\n\n    nodes = tf.ragged.constant([\n       # graph 1: 2 nodes\n       [[2., 4.],\n        [2., 6.]],\n       # graph 2: 4 nodes\n       [[0., 2.],\n        [3., 7.],\n        [4., 0.],\n        [1., 2.]],\n    ], ragged_rank=1)\n\n    print(nodes.shape)  # output: (2, None, 2)\n\n    # using all node features as coordinates\n    coordinates = nodes\n\nExample\n-------\n\nThe full ParticleNet for n_features = n_coords = 2, and a dense layer\nwith 2 neurons as the output can be built like this:\n\n.. code-block:: python\n\n    import tensorflow as tf\n    import medgeconv\n\n    inp = (\n        tf.keras.Input((None, 2), ragged=True),\n        tf.keras.Input((None, 2), ragged=True),\n    )\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[64, 64, 64],\n        batchnorm_for_nodes=True,\n        next_neighbors=16,\n    )(inp)\n\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[128, 128, 128],\n        next_neighbors=16,\n    )(x)\n\n    x = medgeconv.DisjointEdgeConvBlock(\n        units=[256, 256, 256],\n        next_neighbors=16,\n        pooling=True,\n    )(x)\n\n    output = tf.keras.layers.Dense(2)(x)\n    model = tf.keras.Model(inp, output)\n\n\nThe last EdgeConv layer has ``pooling = True``.\nThis will attach a node-wise global\naverage pooling layer in the end, producing normal not-ragged tensors again.\n\nThe model can then be used on ragged Tensors:\n\n.. code-block:: python\n\n    nodes = tf.RaggedTensor.from_tensor(tf.ones((3, 17, 2)))\n    model.predict((nodes, nodes))\n\n\nLoading models\n--------------\n\nTo load models, use the custom_objects:\n\n.. code-block:: python\n\n    import medgeconv\n\n    model = load_model(path, custom_objects=medgeconv.custom_objects)\n\n\nknn_graph kernel\n----------------\n\nThis package includes a cuda kernel for calculating the k nearest neighbors\non a batch of graphs. It comes with a precompiled kernel for the version of\ntensorflow specified in requirements.txt.\n\nTo compile it locally, e.g. for a different version of\ntensorflow, go to ``medgeconv/tf_ops`` and adjust the ``compile.sh`` bash script.\nRunning it will download the specified tf dev docker image and produce the\nfile ``medgeconv/tf_ops/python/ops/_knn_graph_ops.so``.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medgeconv",
    "package_url": "https://pypi.org/project/medgeconv/",
    "platform": "",
    "project_url": "https://pypi.org/project/medgeconv/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/medgeconv/2.0/",
    "requires_dist": [
      "numpy",
      "tensorflow (==2.5.*)"
    ],
    "requires_python": "",
    "summary": "",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11936067,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a461d7cb8e07f5bde163057761ed37be3897ea23e5c91a030b72fc29c3ce0d1b",
        "md5": "97fc264062174803776e79ce887974d0",
        "sha256": "904903b5cefad3c3ae212aa9d090ee7431b5e550236f4d26fa37d1f272188360"
      },
      "downloads": -1,
      "filename": "medgeconv-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "97fc264062174803776e79ce887974d0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 63945,
      "upload_time": "2021-07-13T09:12:31",
      "upload_time_iso_8601": "2021-07-13T09:12:31.991397Z",
      "url": "https://files.pythonhosted.org/packages/a4/61/d7cb8e07f5bde163057761ed37be3897ea23e5c91a030b72fc29c3ce0d1b/medgeconv-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb5f663232eff9bb006633bc2ac44a9cc5ccddeb1c43a69ba2cb4f3863dc6861",
        "md5": "659c4bed268401a1222485436b368ba9",
        "sha256": "e76588e16187025dcf7a6e1cf0a29c03c2d909a2ae2d3ded9fd614516dd5b032"
      },
      "downloads": -1,
      "filename": "medgeconv-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "659c4bed268401a1222485436b368ba9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60776,
      "upload_time": "2021-07-13T09:12:33",
      "upload_time_iso_8601": "2021-07-13T09:12:33.554262Z",
      "url": "https://files.pythonhosted.org/packages/fb/5f/663232eff9bb006633bc2ac44a9cc5ccddeb1c43a69ba2cb4f3863dc6861/medgeconv-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}