{
  "info": {
    "author": "Tinchy",
    "author_email": "tinchy@yeah.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "![django_miniprogram_api](./LOGO/django_miniprogram_api.png)\n\nDjango MiniProgram API - Django 微信小程序 API\n============================================\n\nDjango 微信小程序 API 是依赖于 django-rest-framework 制作的restful api，封装了微信小程序的登陆，用户资料更新，微信小程序支付等一系列操作。为开发者提供微信小程序后台的简便操作。\n\n（完善中，登陆以及用户信息更新已经可以使用）\n\n## 安装\n\n```bash\npip install django_miniprogram_api\n```\n\n## 安装依赖\n\n```python\npycrypto==2.6.1\ndjangorestframework==3.10.3\nxmltodict==0.12.0\ndjangorestframework-xml==1.4.0\nDjango==2.x.x\nrequests==2.22.0\n\n```\n\n快速入门\n-------\n\n1. 添加 \"miniprogram_api\" 和 django-rest-framework 相关的 modules 以及 配置 到 INSTALLED_APPS，并且添加 WECHAT_MINIPROGRAM_CONFIG 配置文件::\n  \n    ```python\n    INSTALLED_APPS = [\n        'miniprogram_api',\n        'rest_framework.authtoken',\n        'rest_framework'\n    ]\n    WECHAT_MINIPROGRAM_CONFIG = {\n        \"APPID\": \"\",\n        \"SECRET\": \"\",\n        \"WECHAT_PAY\": {\n            \"MCH_ID\": \"\",  # 微信支付商户号\n            \"KEY\": \"\", # API密钥\n            \"NOTIFICATION_URL\": '', # 微信支付回调地址\n        }\n    }\n    REST_FRAMEWORK = {\n      \t'DEFAULT_PERMISSION_CLASSES': [\n            ...\n            'rest_framework.authentication.BasicAuthentication', # add this\n            'rest_framework.authentication.TokenAuthentication', # add this\n        ],\n      \t'DEFAULT_PARSER_CLASSES': (\n            'rest_framework_xml.parsers.XMLParser', \n        ),\n    }\n    ```\n    \n    \n    \n2. 配置小程序登陆 url /miniprogram_auth/ 到你项目的 urls.py::\n\n    ```python\n    url(r'^miniprogram_auth/', include('miniprogram_api.urls')),\n    ```\n\n    \n\n3. 运行 `python manage.py migrate` 来创建 WeChatAccount 模型.\n\n4. 运行测试服务器 `python manage.py runserver 127.0.0.1:8000` 就可以开始使用了\n\n使用\n---\n\n### 小程序登陆\n\n**请求**\n\n`http://127.0.0.1/miniprogram_auth/login` \n\nmethod: post, \n\nbody: \n\n```json\n{\n\t\"code\": \"061YsgK50ru0wC1uCHH50D2mK50YsgKa\"\n}\n```\n\n登陆模块包括了微信 [auth.code2Session](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html) 接口，开发者通过调用 [wx.login()](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html) 获取临时登录凭证code，发送给 我们的 Login api，获取 django 的用户登录状态 Token。\n\n**返回**\n\n```json\n{\n\t\"token\": \"fa7cd4cdb5554a9b69b876d6c6bf775ac6be250d\", // 返回的token 需要包含在 request header\n\t\"user_id\": 1\n}\n```\n\n#### 使用 Token 保持会话\n\n在你的请求头包含token信息，要注意的是如果你没有自定义的登录状态，例如：用户手机号邮箱注册登录，那么请在之后的api中都使用同样的token请求头。\n\n```json\nAuthorization: Token fa7cd4cdb5554a9b69b876d6c6bf775ac6be250d\n```\n\n### 用户信息更新\n\n**请求**\n\n`http://127.0.0.1/miniprogram_auth/updateUserInfo` \n\nmethod: post, \n\nbody: \n\n```json\n{\n\t\"iv\":\"QRWwdpUUx9zaN4fXGM4Asw==\",\n\t\"encryptedData\": \"F7VcR8vKZqzaEqS18f7qJ3VuYLl5AjExEHldqC3og3XOKlZPg+U9ki/onlrjrG9OLZDyJrno/nEegXH9V/1sMzGFpCCqhR9MHVTaq9fyANOVazniVmkzwysD0dwwk9bj4Uulz3KuqtTwoI2VFXEAmuj0kzCG1atqCo5RXZnZ30M8O3mbnSPAvDb6pEBBgT6YoQGuIskYQ82kIO3Z/ZtX8XCcmYAjagUkie1CGZUcYd5VxtSL6iGd+HVwxC1rspvda1OcgIdRlU/tIA3Euhbd4qKuqlmR6LJVdZNs9gg/CMY1ZGcRQnz8cbQWUqFOEaZQHU/oiXeDmo5V/HeQXzv9c+lgZ+SMk81VNLC8/T4SF5ivaoULHV/Th+jqYKDjJGwDAbM4tK+4Gkb45QFny3ZDh/09Fk9TwtfR2nkH/Wxpyyhkp0DPbhvd8oq8wH13I0XbsO0WuM0D8YpZF+H74CiiPDiKRzPEpLKU2nCWdlpHDZ0=\"\n}\n```\n\n开发者通过调用接口（如 [wx.getUserInfo](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)）获取数据时，接口会同时返回 encryptedData， iv 数据，将此数据发送给updateUserInfo api，API 将会解密数据，以获取用户信息并返回。（此操作一般在小程序授权用户信息时使用，微信小程序的新登录规则，登陆实际上是限制的 [wx.getUserInfo](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html) 接口）\n\n**返回**\n\n```json\n{\n   \"token\": \"fa7cd4cdb5554a9b69b876d6c6bf775ac6be250d\",\n   \"wechat\": {\n       \"id\": 1,\n       \"nickName\": \"TINCHY\",\n       \"avatarUrl\": \"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLp9mKpmqTUic0TmCMo6Cbibmsvmo6Vt3NGdP0cZOYRwoGPe13LsvHEicoZGvjq6syaeG0GGWJOrqCbA/132\",\n       \"gender\": \"1\",\n       \"city\": \"Shanghai\",\n       \"province\": null,\n       \"country\": null,\n       \"user\": 1\n   }\n\n}\n```\n\n### 微信支付 class wechat_pay.WeChatPay()\n\n微信支付的api因为每一个操作都要求不同，不同用户不同场景都有需求，因此没有封装HTTP API，但是提供了一个简单封装的object，以及提供了一个订单状态 Model：PayOrder\n\n想要获取订单状态，请将自己的商品 OneToOne 到 PayOrder, 例如：\n\n```python\nclass PickUpOrder(models.Model):\n\t\twechat_order = models.OneToOneField(PayOrder)\n\t\t...\n\n@receiver(post_save, sender=PickUpOrder)\ndef create_order(sender, instance, created, **kwargs):\n    if created:\n        PayOrder.objects.create(pickuporder=instance, outTradeNo='')\t\t\n```\n\n**<u>接口返回等数据请查询微信支付官方文档</u>** https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1\n\n#### 统一下单\n\n```python\nWeChatPay().unified_order(\n  spbill_create_ip='''小程序用户的IP地址''',\n  open_id='''小程序用户的open id''', \n  body='''商品描述''',  \n  order_id='''订单id，必须唯一，建议使用日期时间戳''',\n  total_fee='''订单金额，单位为分！！！！'''\n)\n```\n\n**简单例子：**\n\n微信统一下单接口：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1\n\n```python\n\nfrom .model import PickupOrder # 这个model是我的测试model，用于订单查询\nfrom django.conf import settings # 导入 settings\nfrom .wechat_pay import WeChatPay, WeChatSignHelper # 导入 微信支付 api 以及 签名验证\nfrom miniprogram_api.model import WeChatAccount\nfrom rest_framework import views, status\n\nclass WeChatPayAPIView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        from django.utils.datetime_safe import datetime\n        data = request.data\n        _id = data['id']\n        if not PickupOrder.objects.filter(id=data['id']).exists():\n            raise ValidationError('This order does not exists')\n        item = PickupOrder.objects.get(id=data['id'])\n        if not item.payorder.paid: # 如果未付款\n          \toutTradeNo = datetime.utcnow().strftime('%Y%m%d%H%M%S%f')[:-3] # 生成 order_id 用时间精确到分秒以保证订单号的唯一性\n            item.order_id = outTradeNo\n            item.payorder.outTradeNo = outTradeNo # 将订单号保存到 数据库\n            item.save()\n        wechat_user = WeChatAccount.objects.get(user=self.request.user)\n        wp = WeChatPay()\n        address = self.request.META.get('HTTP_X_FORWARDED_FOR') # 获取小程序访问用户的 ip 地址\n        if address:\n            ip = address.split(',')[0]\n        else:\n            ip = address.META.get('REMOTE_ADDR') \n        res = wp.unified_order(spbill_create_ip=ip,open_id=wechat_user.union_id, body=item.car_type.desc, total_fee=item.fee, order_id=item.order_id)\n        if res['return_code'] == 'SUCCESS' and res['result_code'] == 'SUCCESS':\n            pay_sign = {\n                'appId': settings.WECHAT_MINIPROGRAM_CONFIG['APPID'],\n                'nonceStr': wp.ranstr(16),\n                'package': 'prepay_id='+res['prepay_id'],\n                'signType': 'MD5',\n                'timeStamp': str(time.time())\n            }\n            sign = WeChatSignHelper(pay_sign, settings.WECHAT_MINIPROGRAM_CONFIG['WECHAT_PAY']['KEY']).getSign()\n            pay_sign['paySign'] = sign # 签名验证支付订单的正确性\n            return Response({'pay_sign': pay_sign}) # 返回给小程序发起小程序的支付接口 \n        else:\n            return Response(\"Make order failed\", status=status.HTTP_406_NOT_ACCEPTABLE)\n```\n\n下单之后，系统会根据您在settings.py中设置的 NOTIFICATION_URL 进行回调，来更新用户的订单状态。务必设置正确。（本地环境运行的服务器，微信无法进行回调，务必在生产或者测试服务器上运行）\n\n```python\nWECHAT_MINIPROGRAM_CONFIG = {\n    \"WECHAT_PAY\": {\n        \"NOTIFICATION_URL\": 'http://www.example.com/miniprogram_auth/wechatPayCallback', # 填写你的服务器地址加回调域名\n    }\n}\n```\n\n#### 查询订单\n\n微信查询订单接口：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_2\n\n```python\nWeChatPay().order_query(\n  transaction_id='''微信的订单号，建议优先使用''',\n  out_trade_no='''商户系统内部订单号，要求32个字符内, 这里指的是 order_id, 即订单号'''\n)\n# transaction_id 和 out_trade_no 只需要选一个，不要全部填写\n```\n\n#### 关闭订单\n\n微信关闭订单接口：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_3\n\n```python\nWeChatPay().close_order(\n  out_trade_no='''商户系统内部订单号，要求32个字符内, 这里指的是 order_id, 即订单号'''\n)\n```\n\n## 以下接口正在开发...\n\n#### [申请退款](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_4)\n\n#### [查询退款](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_5)\n\n#### [下载对账单](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_6)\n\n#### [下载资金账单](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_18&index=7)\n\n#### [支付结果通知](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7&index=8)\n\n#### [交易保障](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_8&index=9)\n\n#### [退款结果通知](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_16&index=10)\n\n#### [拉取订单评价数据](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_17&index=11)\n\n## LICENSE\n\nBSD 3-Clause License\n\n## 开发者\n\nTinchy：tinchy@yeah.net\n\n## 赞助\n\n![zanshang](./LOGO/zanshang.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TinchyChing/django_miniprogram_api",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-miniprogram-api",
    "package_url": "https://pypi.org/project/django-miniprogram-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-miniprogram-api/",
    "project_urls": {
      "Homepage": "https://github.com/TinchyChing/django_miniprogram_api"
    },
    "release_url": "https://pypi.org/project/django-miniprogram-api/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Django app implemented the WeChat miniprogram's login, payment and other APIs",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6373285,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33640cc5995dceca2579a3074c5dbacc1e9e3ce078b22fc1ca2165435459d9be",
        "md5": "348b44e028fc8fc6a5090f46e365671b",
        "sha256": "8b04ab5f22d07625cb864cf50572096c4521a82f94b31dcd1df1463bd8ec8724"
      },
      "downloads": -1,
      "filename": "django_miniprogram_api-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "348b44e028fc8fc6a5090f46e365671b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 374060,
      "upload_time": "2019-09-24T13:36:22",
      "upload_time_iso_8601": "2019-09-24T13:36:22.970865Z",
      "url": "https://files.pythonhosted.org/packages/33/64/0cc5995dceca2579a3074c5dbacc1e9e3ce078b22fc1ca2165435459d9be/django_miniprogram_api-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}