{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Python Wrapper for Lolo\n=======================\n\n``lolopy`` implements a Python interface to the `Lolo machine learning\nlibrary <https://github.com/CitrineInformatics/lolo>`__.\n\nLolo is a Scala library that contains a variety of machine learning\nalgorithms, with a particular focus on algorithms that provide robust\nuncertainty estimates. ``lolopy`` gives access to these algorithms as\nscikit-learn compatible interfaces and automatically manages the\ninterface between Python and the JVM (i.e., you can use ``lolopy``\nwithout knowing that it is running on the JVM)\n\nInstallation\n------------\n\n``lolopy`` is available on PyPi. Install it by calling:\n\n``pip install lolopy``\n\nTo use ``lolopy``, you will also need to install Java JRE >= 1.8 on your\nsystem. The ``lolopy`` PyPi package contains the compiled ``lolo``\nlibrary, so it is ready to use after installation.\n\nDevelopment\n~~~~~~~~~~~\n\nLolopy requires Python >= 3.7, Java JDK >= 1.8, and sbt to be installed\non your system when developing lolopy.\n\nBefore developing ``lolopy``, compile ``lolo`` on your system using sbt.\nWe have provided a ``Makefile`` that contains the needed operations. To\nbuild and install ``lolopy`` call ``make`` in this directory.\n\nUse\n---\n\nThe ``RandomForestRegressor`` class most clearly demonstrates the use of\n``lolopy``. This class is based on the `Random Forest with\nJackknife-based uncertainty estimates of Wagner et\nal <http://jmlr.org/papers/volume15/wager14a/wager14a.pdf>`__, which -\nin effect - uses the variance between different trees in the forest to\nproduce estimates of the uncertainty of each prediction. Using this\nalgorithm is as simple as using the `RandomForestRegressor from\nscikit-learn <https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html>`__:\n\n.. code:: python\n\n    from lolopy.learners import RandomForestRegressor\n\n    rf = RandomForestRegressor()\n    rf.fit(X, y)\n    y_pred, y_std = rf.predict(X, return_std=True)\n\nThe results of this code is to produce the predicted values (``y_pred``)\nand their uncertainties (``y_std``).\n\nSee the ```examples`` <./examples>`__ folder for more examples and\ndetails.\n\nYou may need to increase the amount of memory available to ``lolopy``\nwhen using it on larger dataset sizes. Setting the maximum memory\nfootprint for the JVM running the machine learning calculations can be\nachieved by setting the ``LOLOPY_JVM_MEMORY`` environment variable. The\nvalue for ``LOLOPY_JVM_MEMORY`` is used to set the maximum heap size for\nthe JVM (see `Oracle's documentation for\ndetails <https://docs.oracle.com/cd/E21764_01/web.1111/e13814/jvm_tuning.htm#PERFM164>`__).\nFor example, \"4g\" allows ``lolo`` to use 4GB of memory.\n\nImplementation and Performance\n------------------------------\n\n``lolopy`` is built using the `Py4J <https://www.py4j.org/>`__ library\nto interface with the Lolo scala library. Py4J provides the ability to\neasily managing a JVM server, create Java objects in that JVM, and call\nJava methods from Python. However, Py4J `has slow performance in\ntransfering large\narrays <https://github.com/bartdag/py4j/issues/159>`__. To transfer\narrays of features (e.g., training data) to the JVM before model\ntraining or evaluation, we transform the data to/from Byte arrays on the\nJava and Python sides. Transfering data as byte arrays does allow for\nquickly moving data between the JVM and Python but requires holding 3\ncopies of the data in memory at once (Python, Java Byte array, and Java\nnumerical array). We could reduce memory usage by passing the byte array\nin chunks, but this is currently not implemented.\n\nOur performance for model training is comparable to scikit-learn, as\nshown in the figure below. The blue-shaded region in the figure\nrepresents the time required to pass training data to the JVM. We note\nthat training times are equivalent between using the Scala interface to\nLolo and ``lolopy`` for training set sizes above 100.\n\n.. figure:: ./examples/profile/training-performance.png\n   :alt: training performance\n\n   training performance\n\nLolopy and lolo are currently slower than scikit-learn for model\nevaluation, as shown in the figure below. The model timings are\nevaluated on a dataset size of 1000 with 145 features. The decrease in\nmodel performance with training set size is an effect of the number of\ntrees in the forest being equal to the training set size. Lolopy and\nlolo have similar performance for models with training set sizes of\nabove 100. Below a training set size of 100, the cost of sending data\nlimits the performance of ``lolopy``.\n\n.. figure:: ./examples/profile/evaluation-performance.png\n   :alt: evaluation performance\n\n   evaluation performance\n\nFor more details, see the `benchmarking\nnotebook <./examples/profile/scaling-test.ipynb>`__.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CitrineInformatics/lolo",
    "keywords": "",
    "license": "",
    "maintainer": "Max Hutchinson",
    "maintainer_email": "maxhutch@citrine.io",
    "name": "lolopy",
    "package_url": "https://pypi.org/project/lolopy/",
    "platform": "",
    "project_url": "https://pypi.org/project/lolopy/",
    "project_urls": {
      "Homepage": "https://github.com/CitrineInformatics/lolo"
    },
    "release_url": "https://pypi.org/project/lolopy/1.3.0/",
    "requires_dist": [
      "scikit-learn",
      "py4j"
    ],
    "requires_python": "",
    "summary": "Python wrapper for the Lolo machine learning library",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15701834,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecfa268c93e9747eb6196a3e55d26e36b69997b4be9758a7c03b2aa1c7e83416",
        "md5": "67b8c37132cf8bdcbc238f9cb247a749",
        "sha256": "371105b597b2c46072f0cc8716c39091bf39802e25544b4e7b89243faaf4352d"
      },
      "downloads": -1,
      "filename": "lolopy-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67b8c37132cf8bdcbc238f9cb247a749",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 55973037,
      "upload_time": "2021-12-15T19:51:21",
      "upload_time_iso_8601": "2021-12-15T19:51:21.026671Z",
      "url": "https://files.pythonhosted.org/packages/ec/fa/268c93e9747eb6196a3e55d26e36b69997b4be9758a7c03b2aa1c7e83416/lolopy-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d82b9a85c56a3ba6b5317247a8014bf2e47f065eb2849586ddd839dd447c28d3",
        "md5": "dd806cc17299c9343483a4f1b69b94e2",
        "sha256": "1becb33f1653e4f1e42624edba8c0d7bce6d6fc25b69720e7ab45f7d37980fe9"
      },
      "downloads": -1,
      "filename": "lolopy-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dd806cc17299c9343483a4f1b69b94e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 55966364,
      "upload_time": "2021-12-15T19:51:26",
      "upload_time_iso_8601": "2021-12-15T19:51:26.229103Z",
      "url": "https://files.pythonhosted.org/packages/d8/2b/9a85c56a3ba6b5317247a8014bf2e47f065eb2849586ddd839dd447c28d3/lolopy-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}