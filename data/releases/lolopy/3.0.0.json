{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python Wrapper for Lolo\n\n`lolopy` implements a Python interface to the [Lolo machine learning library](https://github.com/CitrineInformatics/lolo).\n\nLolo is a Scala library that contains a variety of machine learning algorithms, with a particular focus on algorithms that provide robust uncertainty estimates.\n`lolopy` gives access to these algorithms as scikit-learn compatible interfaces and automatically manages the interface between Python and the JVM (i.e., you can use `lolopy` without knowing that it is running on the JVM)\n\n## Installation\n\n`lolopy` is available on PyPi. Install it by calling:\n \n ```\n pip install lolopy\n ```\n \n To use `lolopy`, you will also need to install Java JRE >= 1.8 on your system.\n The `lolopy` PyPi package contains the compiled `lolo` library, so it is ready to use after installation.\n\n\n### Development \n\nLolopy requires Python >= 3.8, Java JDK >= 1.8, and sbt to be installed on your system when developing lolopy.\n\nBefore developing `lolopy`, compile `lolo` on your system using sbt.\nWe have provided a `Makefile` that contains the needed operations.\nTo build and install `lolopy` call `make` in this directory.\n\n## Use\n\nThe `RandomForestRegressor` class most clearly demonstrates the use of `lolopy`.\nThis class is based on the [Random Forest with Jackknife-based uncertainty estimates of Wagner et al](http://jmlr.org/papers/volume15/wager14a/wager14a.pdf),\nwhich - in effect - uses the variance between different trees in the forest to produce estimates of the uncertainty of each prediction.\nUsing this algorithm is as simple as using the [RandomForestRegressor from scikit-learn](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html):\n\n```python\nfrom lolopy.learners import RandomForestRegressor\n\nrf = RandomForestRegressor()\nrf.fit(X, y)\ny_pred, y_std = rf.predict(X, return_std=True)\n```\n\nThe results of this code is to produce the predicted values (`y_pred`) and their uncertainties (`y_std`).\n\nSee the [`examples`](./examples) folder for more examples and details.\n\nYou may need to increase the amount of memory available to `lolopy` when using it on larger dataset sizes.\nSetting the maximum memory footprint for the JVM running the machine learning calculations can be\n achieved by setting the `LOLOPY_JVM_MEMORY` environment variable.\nThe value for `LOLOPY_JVM_MEMORY` is used to set the maximum heap size for the JVM \n(see [Oracle's documentation for details](https://docs.oracle.com/cd/E21764_01/web.1111/e13814/jvm_tuning.htm#PERFM164)).\nFor example, \"4g\" allows `lolo` to use 4GB of memory.\n\n## Implementation and Performance\n\n`lolopy` is built using the [Py4J](https://www.py4j.org/) library to interface with the Lolo scala library.\nPy4J provides the ability to easily managing a JVM server, create Java objects in that JVM, and call Java methods from Python. \nHowever, Py4J  [has slow performance in transfering large arrays](https://github.com/bartdag/py4j/issues/159).\nTo transfer arrays of features (e.g., training data) to the JVM before model training or evaluation, we transform the data to/from Byte arrays on the Java and Python sides. \nTransfering data as byte arrays does allow for quickly moving data between the JVM and Python but requires holding 3 copies of the data in memory at once (Python, Java Byte array, and Java numerical array).\nWe could reduce memory usage by passing the byte array in chunks, but this is currently not implemented.\n\nOur performance for model training is comparable to scikit-learn, as shown in the figure below. \nThe blue-shaded region in the figure represents the time required to pass training data to the JVM.\nWe note that training times are equivalent between using the Scala interface to Lolo and `lolopy` for training set sizes above 100.\n\n![training performance](https://raw.githubusercontent.com/CitrineInformatics/lolo/main/python/examples/profile/training-performance.png)\n \nLolopy and lolo are currently slower than scikit-learn for model evaluation, as shown in the figure below.\nThe model timings are evaluated on a dataset size of 1000 with 145 features.\nThe decrease in model performance with training set size is an effect of the number of trees in the forest being equal to the training set size. \nLolopy and lolo have similar performance for models with training set sizes of above 100.\nBelow a training set size of 100, the cost of sending data limits the performance of `lolopy`. \n\n![evaluation performance](https://raw.githubusercontent.com/CitrineInformatics/lolo/main/python/examples/profile/evaluation-performance.png)\n\nFor more details, see the [benchmarking notebook](./examples/profile/scaling-test.ipynb).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CitrineInformatics/lolo",
    "keywords": "",
    "license": "",
    "maintainer": "Max Hutchinson",
    "maintainer_email": "maxhutch@citrine.io",
    "name": "lolopy",
    "package_url": "https://pypi.org/project/lolopy/",
    "platform": null,
    "project_url": "https://pypi.org/project/lolopy/",
    "project_urls": {
      "Homepage": "https://github.com/CitrineInformatics/lolo"
    },
    "release_url": "https://pypi.org/project/lolopy/3.0.0/",
    "requires_dist": [
      "scikit-learn",
      "py4j"
    ],
    "requires_python": "",
    "summary": "Python wrapper for the Lolo machine learning library",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15701834,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c26fb136706d63ec3773ca9f5db9d2d51a6680c7009bc9a311b1897a4138fee9",
        "md5": "6019f04abc79daf238f0d323d2708a9e",
        "sha256": "ee6e5e66e0b9bb0fde9db4cd4fc26a4f04b3e09b210adde465ac8b229c79eb49"
      },
      "downloads": -1,
      "filename": "lolopy-3.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6019f04abc79daf238f0d323d2708a9e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 43799186,
      "upload_time": "2022-11-08T17:57:39",
      "upload_time_iso_8601": "2022-11-08T17:57:39.623358Z",
      "url": "https://files.pythonhosted.org/packages/c2/6f/b136706d63ec3773ca9f5db9d2d51a6680c7009bc9a311b1897a4138fee9/lolopy-3.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "009fce6dbf5d143e15f8e0b04d489dab96e7ad2bc79ab2d4498341b732d5ce97",
        "md5": "87b6f05866c52b4c599ef593428bea5c",
        "sha256": "9a035f7454f8a03a74fd502a402d90ff69a1e99a804e2a10f56202dca6e85ca8"
      },
      "downloads": -1,
      "filename": "lolopy-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "87b6f05866c52b4c599ef593428bea5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43794451,
      "upload_time": "2022-11-08T17:57:45",
      "upload_time_iso_8601": "2022-11-08T17:57:45.379598Z",
      "url": "https://files.pythonhosted.org/packages/00/9f/ce6dbf5d143e15f8e0b04d489dab96e7ad2bc79ab2d4498341b732d5ce97/lolopy-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}