{
  "info": {
    "author": "Stan Misiurev",
    "author_email": "smisiurev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# django-grpc\n\n[![CircleCI](https://circleci.com/gh/gluk-w/django-grpc.svg?style=svg)](https://circleci.com/gh/gluk-w/django-grpc)\n\n\nEasy way to launch gRPC server with access to Django ORM and other handy staff.\ngRPC calls are much faster that traditional HTTP requests because communicate over\npersistent connection and are compressed. Underlying gRPC library is written in C which\nmakes it work faster than any RESTful framework where a lot of time is spent on serialization/deserialization.\n\nNote that you need this project only if you want to use Django functionality in gRPC service. \nFor pure python implementation [read this](https://grpc.io/docs/quickstart/python.html)\n\n* Supported Python: 3.4+\n* Supported Django: 2.X (let me know if you need Django 3 support)\n\n## Installation\n\n```bash\npip install django-grpc\n``` \n\nUpdate settings.py\n```python\nINSTALLED_APPS = [\n    # ...\n    'django_grpc',\n]\n\nGRPCSERVER = {\n    'servicers': ['dotted.path.to.callback.eg.grpc_hook'],  # see `grpc_hook()` below\n    'interceptors': ['dotted.path.to.interceptor_class',],  # optional, interceprots are similar to middleware in Django\n    'maximum_concurrent_rpcs': None,\n}\n```\n\nThe callback that initializes \"servicer\" must look like following:\n```python\nimport my_pb2\nimport my_pb2_grpc\n\ndef grpc_hook(server):\n    my_pb2_grpc.add_MYServicer_to_server(MYServicer(), server)\n\n...\nclass MYServicer(my_pb2_grpc.MYServicer):\n\n    def GetPage(self, request, context):\n        response = my_pb2.PageResponse(title=\"Demo object\")\n        return response\n```\n\n## Usage\n```bash\npython manage.py grpcserver\n```\n\nFor developer's convenience add `--autoreload` flag during development.\n\n\n## Serializers\nThere is an easy way to serialize django model to gRPC message using `django_grpc.serializers.serialize_model`.\n\n\n## Testing\nYou can call methods of your servicer and decode them using `django_grpc.serializers.deserialize_message` that\nwill convert gRPC messages to python dictionary\n\n\n\n\nHistory\n-------\n1.0.1 (2019-12-09)\n\n* First stable release on PyPI.\n\n\n0.1.0 (2019-01-18)\n++++++++++++++++++\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gluk-w/django-grpc",
    "keywords": "django-grpc",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-grpc",
    "package_url": "https://pypi.org/project/django-grpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-grpc/",
    "project_urls": {
      "Homepage": "https://github.com/gluk-w/django-grpc"
    },
    "release_url": "https://pypi.org/project/django-grpc/1.0.1/",
    "requires_dist": [
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Easy Django based gRPC service",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16730314,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e390735fc803c663203ca9d3c97eee74957a9d07f43bf72042d71a13cd4e87a0",
        "md5": "f4fbe1e78f401232848f3f5ca34bb3ea",
        "sha256": "e2a5a55fc6754eab3ca40c99489d6c2bb645ad21fc87ce8492624398c2719e0b"
      },
      "downloads": -1,
      "filename": "django_grpc-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4fbe1e78f401232848f3f5ca34bb3ea",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8752,
      "upload_time": "2019-12-09T18:44:48",
      "upload_time_iso_8601": "2019-12-09T18:44:48.435687Z",
      "url": "https://files.pythonhosted.org/packages/e3/90/735fc803c663203ca9d3c97eee74957a9d07f43bf72042d71a13cd4e87a0/django_grpc-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f03c2202a0dd560399ebda764a62fd88752fc8bb5f578e10ec5d53e1eb8ad2f0",
        "md5": "426297ee10f74ea82fd567de9216324e",
        "sha256": "a4694eea0b00bf0a149ab06b0df6b2f716fe449fa61d67bec61c4c264e89d651"
      },
      "downloads": -1,
      "filename": "django-grpc-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "426297ee10f74ea82fd567de9216324e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8606,
      "upload_time": "2019-12-09T18:44:50",
      "upload_time_iso_8601": "2019-12-09T18:44:50.659370Z",
      "url": "https://files.pythonhosted.org/packages/f0/3c/2202a0dd560399ebda764a62fd88752fc8bb5f578e10ec5d53e1eb8ad2f0/django-grpc-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}