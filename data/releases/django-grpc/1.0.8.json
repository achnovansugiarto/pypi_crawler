{
  "info": {
    "author": "Stan Misiurev",
    "author_email": "smisiurev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# django-grpc\n\n[![CircleCI](https://circleci.com/gh/gluk-w/django-grpc.svg?style=svg)](https://circleci.com/gh/gluk-w/django-grpc)\n\n\nEasy way to launch gRPC server with access to Django ORM and other handy stuff.\ngRPC calls are much faster that traditional HTTP requests because communicate over\npersistent connection and are compressed. Underlying gRPC library is written in C which\nmakes it work faster than any RESTful framework where a lot of time is spent on serialization/deserialization.\n\nNote that you need this project only if you want to use Django functionality in gRPC service. \nFor pure python implementation [read this](https://grpc.io/docs/languages/python/quickstart/)\n\n* Supported Python: 3.4+\n* Supported Django: 2.X and 3.X\n\n## Installation\n\n```bash\npip install django-grpc\n``` \n\nUpdate settings.py\n```python\nINSTALLED_APPS = [\n    # ...\n    'django_grpc',\n]\n\nGRPCSERVER = {\n    'servicers': ['dotted.path.to.callback.eg.grpc_hook'],  # see `grpc_hook()` below\n    'interceptors': ['dotted.path.to.interceptor_class',],  # optional, interceprots are similar to middleware in Django\n    'maximum_concurrent_rpcs': None,\n}\n```\n\nThe callback that initializes \"servicer\" must look like following:\n```python\nimport my_pb2\nimport my_pb2_grpc\n\ndef grpc_hook(server):\n    my_pb2_grpc.add_MYServicer_to_server(MYServicer(), server)\n\n...\nclass MYServicer(my_pb2_grpc.MYServicer):\n\n    def GetPage(self, request, context):\n        response = my_pb2.PageResponse(title=\"Demo object\")\n        return response\n```\n\n## Usage\n```bash\npython manage.py grpcserver\n```\n\nFor developer's convenience add `--autoreload` flag during development.\n\n\n## Signals\nThe package uses Django signals to allow decoupled applications get notified when some actions occur:\n* `django_grpc.signals.grpc_request_started` - sent before gRPC server begins processing a request\n* `django_grpc.signals.grpc_request_finished` - sent when gRPC server finishes delivering response to the client\n* `django_grpc.signals.grpc_got_request_exception` - this signal is sent whenever RPC encounters an exception while\nprocessing an incoming request.\n\nNote that signal names are similar to Django's built-in signals, but have \"grpc_\" prefix.\n\n\n## Serializers\nThere is an easy way to serialize django model to gRPC message using `django_grpc.serializers.serialize_model`.\n\n\n## Testing\nTest your RPCs just like regular python methods which return some \nstructure or generator. You need to provide them with only 2 parameters:\nrequest (protobuf structure or generator) and context (use `FakeServicerContext` from the example below).\n\n### Fake Context\nYou can pass instance of `django_grpc_testtools.context.FakeServicerContext` to your gRPC method\nto verify how it works with context (aborts, metadata and etc.).\n```python\nimport grpc\nfrom django_grpc_testtools.context import FakeServicerContext\nfrom tests.sampleapp.servicer import Greeter\nfrom tests.sampleapp.helloworld_pb2 import HelloRequest\n\nservicer = Greeter()\ncontext = FakeServicerContext()\nrequest = HelloRequest(name='Tester')\n\n# To check metadata set by RPC \nresponse = servicer.SayHello(request, context)\nassert context.get_trailing_metadata(\"Header1\") == '...'\n\n# To check status code\ntry:\n    servicer.SayHello(request, context) \nexcept Exception:\n    pass\n\nassert context.abort_status == grpc.StatusCode.INVALID_ARGUMENT\nassert context.abort_message == 'Cannot say hello to John'\n```\n\nIn addition to standard gRPC context methods, FakeServicerContext provides:\n * `.set_invocation_metadata()` allows to simulate metadata from client to server.\n * `.get_trailing_metadata()` to get metadata set by your server\n * `.abort_status` and `.abort_message` to check if `.abort()` was called \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gluk-w/django-grpc",
    "keywords": "django-grpc",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-grpc",
    "package_url": "https://pypi.org/project/django-grpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-grpc/",
    "project_urls": {
      "Homepage": "https://github.com/gluk-w/django-grpc"
    },
    "release_url": "https://pypi.org/project/django-grpc/1.0.8/",
    "requires_dist": [
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Easy Django based gRPC service",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16730314,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1da85b71f8d6afc5fcf794c55bae26cd50a40986a1b8290801bfb1a3be37c66d",
        "md5": "26d50707d3c909402bd45e96f8f628e2",
        "sha256": "c582065868ba623f87fd5cc637d86c6f16b8167a559a77050f564f0f93cf561b"
      },
      "downloads": -1,
      "filename": "django_grpc-1.0.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "26d50707d3c909402bd45e96f8f628e2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11963,
      "upload_time": "2020-06-10T18:50:49",
      "upload_time_iso_8601": "2020-06-10T18:50:49.364815Z",
      "url": "https://files.pythonhosted.org/packages/1d/a8/5b71f8d6afc5fcf794c55bae26cd50a40986a1b8290801bfb1a3be37c66d/django_grpc-1.0.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f005c8043f0d685379bc56472707b223a69f989806b1fa5abc00afc5e22e40f",
        "md5": "38ccf63efbc3a6f25fbaf6b1a9b81be2",
        "sha256": "abd5b729af5bc25d3e778f77cdec65d8ec3e36583dae45f6a75ec262e068dcd4"
      },
      "downloads": -1,
      "filename": "django-grpc-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "38ccf63efbc3a6f25fbaf6b1a9b81be2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10484,
      "upload_time": "2020-06-10T18:50:50",
      "upload_time_iso_8601": "2020-06-10T18:50:50.587569Z",
      "url": "https://files.pythonhosted.org/packages/3f/00/5c8043f0d685379bc56472707b223a69f989806b1fa5abc00afc5e22e40f/django-grpc-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}