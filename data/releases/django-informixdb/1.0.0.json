{
  "info": {
    "author": "Reecetech",
    "author_email": "richard.jones@reece.com.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "Django InformixDB\n==================\n\nA database driver for Django to connect to an Informix database via\ninformixdb python module.\n\n**Some limitations**:\n- Do not support default values\n\n\nConfigure local environment\n---------------------------\n\nThe following environment variables should exist:\n\nINFORMIXDIR\n    The path to the Informix client install directory\n\nINFORMIXSERVER\n    The name of the Informix service to which we need to connect\n\nINFORMIXSQLHOSTS\n    The path to the ``sqlhosts`` file that the Informix driver should use\n\nLD_LIBRARY_PATH\n    The path(s) to the various Informix library files: Usually $INFORIMIXDIR/lib:$INFORMIXDIR/lib/cli:$IMFORMIXDIR/lib/esql\n\n\nYou will also need to add an entry within your ``sqlhosts`` file for each remote/local Informix server connection in the following format:\n\n.. code-block:: bash\n\n    <INFORMIX_SERVER_NAME>    onsoctcp     <INFORMIX_HOST_NAME>    <INFORMIX_SERVICE_NAME>\n    # e.g.\n    dev    onsoctcp    localhost    sqlexec\n\n\nFinally, you need to ensure that the service name is in the ``/etc/services`` file:\n\n.. code-block:: bash\n\n    sqlexec    9088/tcp\n\n\nConfigure settings.py\n---------------------\n\nDjangoâ€™s settings.py require the following format to connect to an Informix database:\n\n.. code-block:: python\n\n    'default': {\n        'ENGINE': 'django_informixdb',\n        'NAME': 'myproject',\n        'SERVER': 'ifxserver',\n        'USER' : 'testuser',\n        'PASSWORD': 'passw0rd',\n        'OPTIONS': {\n            'DRIVER': '/path/to/iclit09b.so'. # Or iclit09b.dylib on macOS\n        },\n\t'TEST': {\n\t    'NAME': 'myproject',\n\t    'CREATE_DB': False\n\t}\n    }\n\n.. note:\n    The ``DRIVER`` option is optional, default locations will be used per platform if it is not provided.\n\n.. note:\n    The ``TEST`` option sets test parametes.  Use ``NAME`` to override the name of the test database\n    and set ``CREATE_DB`` to ``False`` to prevent Django from attempting to create a new test\n    database.\n\nUsing with the Docker Informix Dev Database\n-------------------------------------------\n\nThe docker image from IBM for the Informix developer database image behaves a little differently compared to other images. As such it needs a little extra handling, and doesn't seem to work with docker-compose\n\nFirstly we need to download and getting it running:\n\n.. code-block:: bash\n\n    $ docker run -itd --name iif_developer_edition --privileged -p 9088:9088 -p 9089:9089 -p 27017:27017 \\\n    -p 27018:27018 -p 27883:27883 -e LICENSE=accept ibmcom/informix-developer-database:latest\n\nThis will download the image if it doesn't exist, and then run it with the name ``iif_developer_edition``. The first time this run, the image will do a bunch of initial setup stuff. As we used the ``-d`` option, it will run in the background as a detached process. So don't be concerned that you do not see anything in the output.\n\nYou can stop and restart the container with:\n\n.. code-block:: bash\n\n    docker stop iif_developer_edition\n    docker start iif_developer_edition\n\nIt seems that the Informix ODBC driver does not currently support creating databases. So we will need to do that manually, by attaching to the running container\n\n.. code-block:: bash\n\n    docker attach iif_developer_edition\n\n\nThis will give you a shell on the running container, and you can therefore use dbaccess to create your database. You can exit this shell using ``Ctrl-p`` ``Ctrl-q`` without shutting down the whole container.\n\nThis Django database adaptor for Informix requires transaction support to be enabled in our database. This is not the default within the Informix Developer image.  So you need to enable it on a per database basis:\n\n.. code-block:: bash\n\n    $ docker attach iif_developer_edition\n    $ ontape -s -B <DB_NAME>\n\nAgain, you can detach using ``Ctrl-p`` ``Ctrl-q``.\n\nFinally you need to ensure that our local dev database is included in the ``sqlhosts`` file. e.g.:\n\n.. code-block:: bash\n\n    dev    onsoctcp    localhost    sqlexec\n\nand also in ``/etc/services``:\n\n.. code-block:: bash\n\n    sqlexec    9088/tcp\n\nYou should now be able to point Django to our local test database using the syntax detailed above.\n\n\nUsing Django InformixDB with docker-compose\n-------------------------------------------\n\nIt is possible to use the Informix developer docker image with docker-compose with a little effort.\n\nExample docker-compose.yml\n\n.. code-block:: yaml\n\n    version: '3'\n\n    services:\n        db:\n            image: ibmcom/informix-developer-database\n            tty: true # Needed to ensure container doesn't self terminate\n            environment:\n                LICENSE: accept\n            privileged: true\n            ports:\n                - \"9088:9088\"\n                - \"9089:9089\"\n                - \"27017:27017\"\n                - \"27018:27018\"\n                - \"27883:27883\"\n\n\nThe key entry in the compose file which is out of the ordinary is `tty: true`. This allocates a (virtual) TTY to the container. The Informix developer database container expects a `tty` and terminates without one when run inside docker-compose.\n\nOnce it is up and running with `docker-compose up` you can run a `bash` shell on the running container with:\n\n.. code-block:: bash\n\n    docker exec -it informix_db_1 bash\n\n\nWhere `informix_db_1` is the name of the running container. From this shell you can create your DB with `dbaccess` etc.\n\n.. warning::\n\n    This approach still requires the SDK to installed locally and the appropriate environmental variables to be set up. Along with entries in `sqlhosts` and `/etc/services`\n\n\nTesting against an Informix Database\n------------------------------------\n\nDue to a bug in the Informix ODBC driver, it is not currently possible to run Django tests normally. Specifically, it is not possible for Django to create a test database. As such, you will need to do it manually. By default Django will attempt to create a database with a name equal to the default database name with a ``test_`` prefix. e.g. if you database name is ``my_database``, the test database name would be ``test_my_database``.  This can be overridden with the ``NAME`` option under ``TEST``.\n\nTo prevent Django from attempting to create a test database, set the ``CREATE_DB`` option\nunder ``TEST`` to ``False``: see 'Configure settings.py' above.\n\nYou can follow the steps above, in the section on using Informix locally with Docker to create a test database. Then when running the test you can tell Django to re-use an existing database, rather than trying to create a new one with the ``-k`` parameter:\n\n.. code-block:: bash\n\n    ./manage.py test -k",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reecetech/django_informixdb",
    "keywords": "django informix",
    "license": "APLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-informixdb",
    "package_url": "https://pypi.org/project/django-informixdb/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-informixdb/",
    "project_urls": {
      "Homepage": "https://github.com/reecetech/django_informixdb"
    },
    "release_url": "https://pypi.org/project/django-informixdb/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A database driver for Django to connect to an Informix db via ODBC",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13826421,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b003506f38c3bbf49f8ae97ecb1e3306b719379fe1c31a65535cc65d4052e4e9",
        "md5": "637814e4666a395e09f84480335b8cb2",
        "sha256": "304f3b590ea1ae414fc504c586aef8c42a33b82c56baeacb68675716a339f2e5"
      },
      "downloads": -1,
      "filename": "django_informixdb-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "637814e4666a395e09f84480335b8cb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18694,
      "upload_time": "2018-05-27T23:26:01",
      "upload_time_iso_8601": "2018-05-27T23:26:01.119365Z",
      "url": "https://files.pythonhosted.org/packages/b0/03/506f38c3bbf49f8ae97ecb1e3306b719379fe1c31a65535cc65d4052e4e9/django_informixdb-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}