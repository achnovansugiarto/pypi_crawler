{
  "info": {
    "author": "Philip Perold",
    "author_email": "philip@spatialedge.co.za",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Metric Builder\n\nUtility for building templated metric extraction queries that can be traversed through time.\n\n## Prerequisites\n\nYou will need the following to run this code:\n  * Python 3\n  \n## Installation\n\nTo be determined...\n\n## Usage\n\nIn order to extract a given metric, a `Metric` object needs to be instantiated:\n\n```python\nmetric = Metric(\n    query=\"\"\"\n        SELECT count(*) AS total\n        FROM `project.dataset.table`\n        WHERE DATETIME_TRUNC(created_datetime, DAY) = '{{ reference_time | format_date('%Y-%m-%d') }}'\n    \"\"\",\n    reader = BigQueryReader(json_credentials_path='/path/to/creds.json')\n)\n```\n\nThe `query` parameter is a templated query where you can format the `reference_time` `datetime` object to the required format using template filters.\n\nThe `reader` parameter is the object that is actually going to connect to the desired database and perform the queries.\n\nThe `metric` object can now be used to fetch metrics for a given point in time as follows:\n\n```python\nresult = metric.fetch(reference_time=datetime.date(2019, 10, 21))\n```\n\nThe result is returned as a list of dictionaries.\n\n### Template filters\n\n[Jinja2](https://jinja.palletsprojects.com/en/2.10.x/) is used as the templating engine. All built in Jinja filters are thus available. Relevant custom template filters have been added though for convenience:\n\n#### format_date\n\nSpecify format of datetime:\n\n```\n'{{ reference_time | format_date('%Y-%m-%d') }}'\n```\n\n#### day_delta\n\nChange a given datetime object by a specified number of days:\n\n```\n'{{ reference_time | day_delta(-7) | format_date('%Y-%m-%d') }}'\n```\n\n### Readers\n\nAny reader will implement the following method that is used to execute queries:\n\n```python\ndef execute(self, query) -> List[Dict[str, Any]]:\n    ...\n```\n\n#### BigQueryReader\n\nThe underlying client is required to be authenticated with the necessary priviledges to read from the requested BigQuery tables.\n\nIf you authenticate with:\n\n```bash\ngcloud auth login\n```\n\nor\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/keyfile.json\"\n```\n\nthen you can just instantiate your `Reader` like this:\n\n```python\nreader = BigQueryReader()\n```\n\nThe other option is to explicitly authenticate with a service account key file:\n\n```python\nreader = BigQueryReader(json_credentials_path='/path/to/creds.json')\n```\n\n#### HiveReader\n\nComing soon...\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metric-builder",
    "package_url": "https://pypi.org/project/metric-builder/",
    "platform": "",
    "project_url": "https://pypi.org/project/metric-builder/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/metric-builder/2.1.2.0/",
    "requires_dist": [
      "cachetools (==4.2.2)",
      "certifi (==2020.12.5)",
      "chardet (==3.0.4)",
      "google-auth (==1.32.1)",
      "google-cloud-bigquery (==2.23.2)",
      "google-cloud-core (==1.7.2)",
      "google-resumable-media (==1.3.3)",
      "googleapis-common-protos (==1.53.0)",
      "idna (==2.10)",
      "Jinja2 (==2.11.3)",
      "MarkupSafe (==1.1.1)",
      "protobuf (==3.17.3)",
      "pyasn1-modules (==0.2.8)",
      "pyasn1 (==0.4.8)",
      "pytz (==2021.1)",
      "requests (==2.25.1)",
      "rsa (==4.7.2)",
      "six (==1.16.0)",
      "urllib3 (==1.25.11)"
    ],
    "requires_python": "",
    "summary": "Utility for building templated metric extraction queries that can be traversed through time.",
    "version": "2.1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15854312,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4449ba6594dd6c1dde8e5f266b2a79b8525b72ffce1014aaf699d9cf4933629",
        "md5": "0a9c2dd30cdaafc6b2afc713f3283a8f",
        "sha256": "8bc5cae381c2aab190f7705adee16b548937f923fd4f5cad7de9074729de798e"
      },
      "downloads": -1,
      "filename": "metric_builder-2.1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a9c2dd30cdaafc6b2afc713f3283a8f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8480,
      "upload_time": "2021-09-06T09:20:53",
      "upload_time_iso_8601": "2021-09-06T09:20:53.704192Z",
      "url": "https://files.pythonhosted.org/packages/e4/44/9ba6594dd6c1dde8e5f266b2a79b8525b72ffce1014aaf699d9cf4933629/metric_builder-2.1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b7f3364751ecb6a64bafbd2a3b096dbae204b9509f19a3c21d45ac05978b1f4",
        "md5": "68fac89061a589f43cfe19b7ff31625d",
        "sha256": "42622b5ac130ba1a7ddd49e7b7d8c346136c2e02afa037c1493f2190f17725d7"
      },
      "downloads": -1,
      "filename": "metric_builder-2.1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "68fac89061a589f43cfe19b7ff31625d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7644,
      "upload_time": "2021-09-06T09:20:55",
      "upload_time_iso_8601": "2021-09-06T09:20:55.015207Z",
      "url": "https://files.pythonhosted.org/packages/5b/7f/3364751ecb6a64bafbd2a3b096dbae204b9509f19a3c21d45ac05978b1f4/metric_builder-2.1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}