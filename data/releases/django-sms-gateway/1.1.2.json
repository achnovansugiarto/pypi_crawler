{
  "info": {
    "author": "Matthew Schinckel",
    "author_email": "matt@schinckel.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-sms-gateway\n====================\n\nEasily send SMS messages through a web gateway from django.\n\nThis code is quite stable, and has been in use for about 2 years, with thousands of messages sent per week, to a variety of gateways, and a number of different countries.\n\nInstallation\n-------------\n\n  * Install the package into your project's virtual environment:\n  \n    ``pip install django-sms-gateway``\n\n  * Add ``sms`` to your project's ``settings.INSTALLED_APPS``.\n\n  * Run ``./manage.py migrate`` or ``./manage.py syncdb``\n  \nConfiguration\n--------------\n\nThere are three django models: ``sms.Message``, ``sms.Gateway``, and ``sms.Reply``.\n\nBefore you are able to send any messages, you will need to configure at least one gateway. There is some sample data for some gateway providers. You can adapt one of these for your own purposes.\n\nUsage\n------\n\nCreate a message, ready to be sent::\n\n    msg = Message.objects.create(\n      recipient_number=\"123456789\", \n      content=\"Test message\",\n      sender=user,\n      billee=user\n    )\n\nNote that you must provide at least these fields. ``recipient_number`` must include the international prefix (or your gateway must be configured to add it). ``content`` should be ASCII, some gateways reject unicode. ``sender`` must be an ``auth.User``, but ``billee`` may be any object.\n\nThis does not send the message::\n\n    >>> msg\n    <Message: [Unsent] Sent to 123456789 by matt at None [1]>\n\nTo send it, you need to provide a gateway::\n\n    msg.send(gateway)\n\n\nStatus/Reply Callback\n----------------------\n\nIf your gateway supports it, you can have it hit your server whenever there are status updates on any message. You can use the included views, in your urlpatterns::\n\n    urlpatterns = patterns('',\n      (r'^sms/', include('sms.urls')),\n    )\n\nThis would mean that you would need to enter something like::\n\n    http://example.com/sms/status_postback/\n\nIn your gateway's settings.\n\nThe status can be updated, and a status message can be provided. This is all parsed using the content of the status update request to your server, and the status_mapping data.\n\nThe same applies for replies, if you have a 2-way gateway, but using ``/sms/reply_postback/`` instead.\n\nReply callback functions\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you send a message, you can store a ``reply_callback`` function in the object. This function will be called, with the reply object passed in as the parameter. The reply object has access to it's original message (as well as it could be matched).\n\n\nBilling\n--------\n\nSince SMSs are generally billable through web gateways, there is the requirement that a billee is provided, and there is a billed flag on each message. This allows you to bill after-the-fact. If you wanted to only allow sending of messages to people with credits remaining, then you would need to validate this before attempting to send.\n\nSince a message may be longer than one segment, there is a helper property on ``sms.Message``, ``.length``, which calculates how many segments would be required.\n\nFuture\n--------\nCurrently, all sending happens in-process. There is a preliminary celery task, but it has not been extensively tested as yet.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/schinckel/django-sms-gateway",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-sms-gateway",
    "package_url": "https://pypi.org/project/django-sms-gateway/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-sms-gateway/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/schinckel/django-sms-gateway"
    },
    "release_url": "https://pypi.org/project/django-sms-gateway/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django generic sms through http gateway",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 790684,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50d09b5d4ca3e1ffcdaa5e8f7ee612be4ca06cc52e8bc07e850755711f4b4f9d",
        "md5": "36c4f2da68a3713a4b5d86b566ef6ac6",
        "sha256": "f4621d00adc34571d419ef19bc39588b50faa18922178138ce33474f830cb07f"
      },
      "downloads": -1,
      "filename": "django-sms-gateway-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "36c4f2da68a3713a4b5d86b566ef6ac6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24569,
      "upload_time": "2012-11-23T06:49:05",
      "upload_time_iso_8601": "2012-11-23T06:49:05.211307Z",
      "url": "https://files.pythonhosted.org/packages/50/d0/9b5d4ca3e1ffcdaa5e8f7ee612be4ca06cc52e8bc07e850755711f4b4f9d/django-sms-gateway-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}