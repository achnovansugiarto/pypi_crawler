{
  "info": {
    "author": "DXC",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# DXC Industrialized AI Starter\n\nDXC Indusrialized AI Starter makes it easier to build and deploy Indusrialized AI. This Library does the following:\n\n- Access, clean, and explore raw data\n- Build data pipelines\n- Run AI experiments\n- Publish microservices\n\n## Installation\n\nIn order to install and use above library please use the below code snippet:\n```\n1. pip install DXC-Industrialized-AI-Starter\n2. from dxc import ai\n```\n\n## Getting Started\n\n### Access, Clean, and Explore Raw Data\n\nHere's a quick example of using the library to access, clean, and explore raw data.\n\n```\n#Access raw data\ndf = ai.read_data_frame_from_remote_json(json_url)\ndf = ai.read_data_frame_from_remote_csv(csv_url)\ndf = ai.read_data_frame_from_local_json()\ndf = ai.read_data_frame_from_local_csv()\ndf = ai.read_data_frame_from_local_excel_file()\n\n#Clean data\nraw_data = ai.clean_dataframe(df)\n\n#Explore raw data\nai.visualize_missing_data(raw_data)\nai.explore_features(raw_data)\nai.plot_distributions(raw_data)\n```\n\n### Build Data Pipelines\n\nBelow example showcases how to build a data pipeline\n\n```\n# Insert data into MongoDB\ndata_layer = {\n    \"connection_string\": \"<your connection_string>\",\n    \"collection_name\": \"<your collection_name>\",\n    \"database_name\": \"<your database_name>\"\n}\nwrt_raw_data = ai.write_raw_data(data_layer, raw_data, date_fields = [])\n\n#Example for creating pipeline\npipeline = [\n        {\n            '$group':{\n                '_id': {\n                    \"funding_source\":\"$funding_source\",\n                    \"request_type\":\"$request_type\",\n                    \"department_name\":\"$department_name\",\n                    \"replacement_body_style\":\"$replacement_body_style\",\n                    \"equipment_class\":\"$equipment_class\",\n                    \"replacement_make\":\"$replacement_make\",\n                    \"replacement_model\":\"$replacement_model\",\n                    \"procurement_plan\":\"$procurement_plan\"\n                    },\n                \"avg_est_unit_cost\":{\"$avg\":\"$est_unit_cost\"},\n                \"avg_est_unit_cost_error\":{\"$avg\":{ \"$subtract\": [ \"$est_unit_cost\", \"$actual_unit_cost\" ] }}\n            }\n        }\n]\n\ndf = ai.access_data_from_pipeline(wrt_raw_data, pipeline)\n```\n\n### Run AI Experiments\n\nSample code snippet to run an AI Experiment\n\n```\nexperiment_design = {\n    #model options include ['regression()', 'classification()']\n    \"model\": ai.regression(),\n    \"labels\": df.avg_est_unit_cost_error,\n    \"data\": df,\n    #Tell the model which column is 'output'\n    #Also note columns that aren't purely numerical\n    #Examples include ['nlp', 'date', 'categorical', 'ignore']\n    \"meta_data\": {\n      \"avg_est_unit_cost_error\": \"output\",\n      \"_id.funding_source\": \"categorical\",\n      \"_id.department_name\": \"categorical\",\n      \"_id.replacement_body_style\": \"categorical\",\n      \"_id.replacement_make\": \"categorical\",\n      \"_id.replacement_model\": \"categorical\",\n      \"_id.procurement_plan\": \"categorical\"\n  }\n}\n\ntrained_model = ai.run_experiment(experiment_design)\n```\n\n### Publish Microservice\n\nBelow is the example for publishing a Microservice\n```\ntrained_model is the output of run_experiment() function\nmicroservice_design = {\n    \"microservice_name\": \"<Name of your microservice>\",\n    \"microservice_description\": \"<Brief description about your microservice>\",\n    \"execution_environment_username\": \"<Algorithmia username>\",\n    \"api_key\": \"<your api_key>\",\n    \"api_namespace\": \"<your api namespace>\",   \n    \"model_path\":\"<your model_path>\"\n}\n\n# publish the micro service and display the url of the api\napi_url = ai.publish_microservice(microservice_design, trained_model)\nprint(\"api url: \" + api_url)\n```\n\n## Docs\n\nFor detailed and complete documentation, please <a href=\"https://dxc-technology.github.io/DXC-Industrialized-AI-Starter/\" target=\"_blank\">click here</a>\n\n\n### Example of colab notebook\n\n\n<a href=\"https://colab.research.google.com/drive/1EV_Q09B-bppGbEehBgCvsv_JIM87T_n1#scrollTo=T5ASIaeU8Ymx\" target=\"_blank\">Here</a> is an quick example of the google colab notebook \n\n### Contributing Guide\n\nTo know more about the contribution and guidelines please <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/blob/master/CONTRIBUTING.md\" target=\"_blank\">click here</a>\n\n\n### Reporting Issues\nIf you find any issues, feel free to report them <a href=\"https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/issues\" target=\"_blank\">here</a> with clear description of your issue.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dxc-technology/DXC-Industrialized-AI-Starter",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DXC-Industrialized-AI-Starter",
    "package_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/",
    "platform": "any",
    "project_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/",
    "project_urls": {
      "Homepage": "https://github.com/dxc-technology/DXC-Industrialized-AI-Starter"
    },
    "release_url": "https://pypi.org/project/DXC-Industrialized-AI-Starter/1.0/",
    "requires_dist": [
      "JIRA",
      "auto-ml",
      "Algorithmia",
      "gitpython",
      "flatten-json",
      "pyjanitor",
      "ftfy",
      "arrow",
      "scrubadub",
      "yellowbrick",
      "datacleaner",
      "missingno",
      "pymongo",
      "IPython"
    ],
    "requires_python": "",
    "summary": "Python library which is extensively used for all AI projects",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13622176,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11b8c8e49d6dcff732faeb40dccfd0f4418f51249e25ca8cdeea8ba537ffc469",
        "md5": "28dbd03635d9c580d3846a40fb815bcb",
        "sha256": "3258850a0a072b5baacedc7c219e668e6be1dad7202594b6697131a3fa8bf7cb"
      },
      "downloads": -1,
      "filename": "DXC_Industrialized_AI_Starter-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28dbd03635d9c580d3846a40fb815bcb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13715,
      "upload_time": "2020-04-22T01:48:43",
      "upload_time_iso_8601": "2020-04-22T01:48:43.137550Z",
      "url": "https://files.pythonhosted.org/packages/11/b8/c8e49d6dcff732faeb40dccfd0f4418f51249e25ca8cdeea8ba537ffc469/DXC_Industrialized_AI_Starter-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efb1d174548ef805997a42cce8ecadf68dfacd8ce01c3a3038dcb0dd8c63a4a3",
        "md5": "f489eba7038f63e71661d7a874dd450a",
        "sha256": "42c933207149b672ad58bad070cdb5073e18d4b6539098ce885f96058a814dcc"
      },
      "downloads": -1,
      "filename": "DXC-Industrialized-AI-Starter-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f489eba7038f63e71661d7a874dd450a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13248,
      "upload_time": "2020-04-22T01:48:44",
      "upload_time_iso_8601": "2020-04-22T01:48:44.359522Z",
      "url": "https://files.pythonhosted.org/packages/ef/b1/d174548ef805997a42cce8ecadf68dfacd8ce01c3a3038dcb0dd8c63a4a3/DXC-Industrialized-AI-Starter-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}