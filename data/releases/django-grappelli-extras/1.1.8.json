{
  "info": {
    "author": "Cesar Abel Ramirez",
    "author_email": "xangcastle@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# grappelli_extras\n\n[![Latest PyPI version](https://img.shields.io/pypi/v/django-grappelli-extras.svg)](https://crate.io/packages/django-grappelli-extras/)\n\n[![Number of PyPI downloads](https://img.shields.io/pypi/l/django-grappelli-extras.svg)](https://crate.io/packages/django-grappelli-extras/)\n\n# Requirements\n* Python = 3\n* Django >= 2.1\n* django-grappelli >= 2.11.1\n\n# Installation\n\n* ```pip install django-grappelli-extras```\n\n## settings.py\n\n * Put 'grappelli_extras' **before** 'grappelli' on INSTALLED_APPS\n\n```python\n# Your setting will look like:\nINSTALLED_APPS = [\n    'grappelli_extras',\n    'grappelli',\n    'import_export',\n    'adminactions',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # continue with your apps\n]\n```\n\n* Put 'applist' in your active context_processors.\n```python\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'grappelli_extras.context_processors.applist',\n            ],\n        },\n    },\n]\n```\n\n## urls.py\n\n * Put grappelli extras urls in 'urlpatterns':\n\n```python\n# Your urls will look like:\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('grappelli/', include('grappelli.urls')),\n    path('admin/ajax/', include('grappelli_extras.ajax_urls')),\n    path('admin/extras/', include('grappelli_extras.extras_urls')),\n]\n```\n\n\nAvailable features:\n\n* [Header navbar](#navbar)\nAdd a dynamic navbar that change according to user permissions\n\n* [Add Links](#add-links)\nAdd addlink for each model in the nabvar according to user permissions.\n\n* [Traslation](#translation)\nTraslation Suport by Locales.\n\n* [Ajax](#ajax)\nAn Ajax api to make queries to django OMR using generics views.\n\nThis is the way than you must to define your models\nthe class base from grappelli_extras contain important functions for the models\n\n```python\nfrom django.db import models\nfrom grappelli_extras.models import base, base_entidad\nfrom django.template.loader import render_to_string\n\n\nclass Foo(base_entidad):\n    \"\"\"\n    A usual model than requiere to have a code, name and active condition.\n    This the code left in blank under the creation of the object the code will be autogerenate.\n\n    \"\"\"\n    date = models.DateTimeField()\n    title = models.CharField(max_length=250)\n    description = models.TextField(max_length=600, null=True, blank=True)\n\n    def render_as_table(self):\n        return render_to_string(\"app/foo.html\", {'obj': self})\n\n\nclass Bar(base):\n    \"\"\"\n    A usual related model for Foo\n    \"\"\"\n    foo = models.ForeignKey(Foo, on_delete=models.CASCADE)\n    value = models.FloatField(default=0.0)\n    \n\n```\n\n\n# Using Autocomplete generic view\n```javascript\n\n\n<script src=\"{% static 'ajax/grp-token.js' %}\"></script>\n\n<input type=\"text\" id=\"complete-input\">\n\n<script>\n    (function ($) {\n        var completeEvent = function () {\n            $(this).autocomplete({\n                minLength: 2,\n                source: \"{% url 'ajax_autocomplete' %}?app_label=app&model=foo&column_name=name&column_value=code\",\n                select: function (i, o) {\n                    // you can user obj to populate another inputs\n                    console.log(o.item.obj);\n                }\n            });\n        };\n        $('#complete-input').on('keyup', completeEvent);\n    })(grp.jQuery)\n</script>\n\n\n```\n\n# Using GetCollection generic view\n```javascript\n\n\n<script src=\"{% static 'ajax/grp-token.js' %}\"></script>\n\n<script>\n    (function ($) {\n        $.ajax(\"{% url 'ajax_getCollection' %}\", {\n                method: \"POST\",\n                data: {app_label: \"app\", model: \"foo\"},\n                success: function (collection) {\n                    console.log(collection);\n                }\n            })\n    })(grp.jQuery)\n</script>\n\n```\n\n# Using GetObject generic view\n```javascript\n\n\n<script src=\"{% static 'ajax/grp-token.js' %}\"></script>\n\n<script>\n    (function ($) {\n        $.ajax(\"{% url 'ajax_getObject' %}\", {\n                method: \"POST\",\n                data: {app_label: \"app\", model: \"foo\", id: '1'},\n                success: function (obj) {\n                    console.log(obj);\n                }\n            })\n    })(grp.jQuery)\n</script>\n\n```\n\n# Using ObjectView generic view\nFirts define the method returning a html string\n```python\nfrom grappelli_extras.models import base, base_entidad\nfrom django.template.loader import render_to_string\n\nclass Foo(base_entidad):\n    ...\n    def render_as_table(self):\n        return render_to_string(\"app/foo.html\", {'obj': self})\n\n```\n\nIn the html template render using django tags and filters as usual\n```djangotemplate\n<table class=\"grp-table\">\n    <thead>\n    <tr>\n        <th colspan=\"2\">Foo Object</th>\n    </tr>\n    <tr>\n        <th>Key</th>\n        <th>Value</th>\n    </tr>\n    </thead>\n\n    <tbody>\n    <tr>\n        <td>ID</td>\n        <td>{{obj.id}}</td>\n    </tr>\n    <tr>\n        <td>CODE</td>\n        <td>{{obj.code}}</td>\n    </tr>\n    <tr>\n        <td>NAME</td>\n        <td>{{obj.name}}</td>\n    </tr>\n    </tbody>\n</table>\n\n```\nAfter when you need to render this conten by Ajax\n```javascript\n\n\n<script src=\"{% static 'ajax/grp-token.js' %}\"></script>\n\n<div id=\"result\"></div>\n\n<script>\n    (function ($) {\n        $.ajax(\"{% url 'ajax_ObjectView' %}\", {\n                method: \"POST\",\n                data: {app_label: \"app\", model: \"foo\", id: '1', view: 'render_as_table'},\n                success: function (response) {\n                    $('#result').html(response);\n                }\n            })\n    })(grp.jQuery)\n</script>\n\n```\n\n# Working with jQuery pluggins.\nLet start with datatables.\n\nIn your template include the js script ajax token.js after jQuery to keep secure the request.\nAnd include all css and js as you need.\n\n```djangotemplate\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n{% load static %}\n\n<table></table>\n\n\n<script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n<script src=\"{% static 'ajax/token.js' %}\"></script>\n<script src=\"https://cdn.datatables.net/1.10.18/js/jquery.dataTables.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css\">\n\n<script>\n\n    $(document).ready(function () {\n        $(\"table\").DataTable({\n            ajax: '{% url \"ajax_getDataTables\" %}?app_label=app&model=foo&filters={\"activo\": 1}',\n            columns: [{'data': 'id'}, {'data': 'code'}, {'data': 'name'}]\n        });\n    });\n\n</script>\n</body>\n</html>\n\n```\n\n\nNow lets try with fullcalendar\n```djangotemplate\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n{% load static %}\n<div id=\"calendar\"></div>\n\n\n<script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.js\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.css\">\n\n<script>\n\n    $(document).ready(function () {\n        $('#calendar').fullCalendar({\n            events: \"{% url 'ajax_getCollection' %}?app_label=app&model=foo&filters={'activo': 1}\"\n        });\n    });\n\n</script>\n</body>\n</html>\n\n```\n\nNow we can try by POST with more advanced filters. But don't forget to include ajax/token.js, is\ndiferent form grp-token.js, grp-token must to by used inside grappelli pages.\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n{% load static %}\n<div id=\"calendar\"></div>\n<script src=\"https://code.jquery.com/jquery-3.3.1.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.js\"></script>\n<script src=\"{% static 'ajax/token.js' %}\"></script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.css\">\n\n<script>\n    $(document).ready(function () {\n        $('#calendar').fullCalendar({\n            events: function (start, end, timezone, callback) {\n                    $.ajax(\"{% url 'ajax_getCollection' %}\", {\n                        type: \"POST\",\n                        data: {app_label: 'app', model: 'foo',\n                            filters: \"{'date__gte': '\" + start.format('Y-MM-DD') + \"', 'date__lte': '\" + end.format('Y-MM-DD') + \"'}\"\n                        },\n                        success: function (response) {\n                            callback(response);\n                        },\n                        error: function (error) {\n                            console.log(error);\n                        }\n                    })\n                }\n        });\n    });\n</script>\n</body>\n</html>\n```\n\n\nYou can add filters like a json see doc.\nFull documentation is pending, in need time. Working so hard for now...:(\n\n* [Integration](#integration)*\nIntegration of adminactions, filebrowser, import_export modules.\n\n* [Integration](#jquery)\nInclude a Jquery Plugin to creade modals with objects json getting data from django OMR.\n\n## To run test project\n\n```\ncd ~/grappelli_extras/testapp\npip install -r requirements.txt\npython manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py runserver\n```\n\n## Contributing\n\n1. Fork it.\n2. Create your feature branch. (`git checkout -b my-new-feature`)\n3. Commit your changes. (`git commit -am 'Add some feature'`)\n4. Push to the branch. (`git push origin my-new-feature`)\n5. Create new Pull Request.\n\nThank You",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xangcastle/grappelli_extras/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-grappelli-extras",
    "package_url": "https://pypi.org/project/django-grappelli-extras/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-grappelli-extras/",
    "project_urls": {
      "Homepage": "https://github.com/xangcastle/grappelli_extras/"
    },
    "release_url": "https://pypi.org/project/django-grappelli-extras/1.1.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Ajax, Extensions and Extras for Grappelli Admin interface",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13585847,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "352810ec428e16820a5c3865c2f705e6e56b31f0d9b6eac42562d892befc7f0d",
        "md5": "41d59f8bc16303ac0beab3f6f7c0c91b",
        "sha256": "a1bdca03555fa79aa00047f68e3f67cd51646b9bfc0677d3b55bd114877ac29a"
      },
      "downloads": -1,
      "filename": "django-grappelli-extras-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "41d59f8bc16303ac0beab3f6f7c0c91b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13485,
      "upload_time": "2019-07-22T22:38:41",
      "upload_time_iso_8601": "2019-07-22T22:38:41.429158Z",
      "url": "https://files.pythonhosted.org/packages/35/28/10ec428e16820a5c3865c2f705e6e56b31f0d9b6eac42562d892befc7f0d/django-grappelli-extras-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}