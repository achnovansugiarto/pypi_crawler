{
  "info": {
    "author": "Prajwal Vandana",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# maestro\n`maestro` is a command-line tool to play songs (or any audio, really) in the terminal.\n\n## Features\n\n- cross-platform!\n- add songs directly from YouTube, YouTube Music, or Spotify!\n- audio visualization directly in the terminal!\n- Discord integration!\n- [clips!](#maestro-clip)\n- shuffle! (along with precise control over the behavior of shuffling when looping)\n- filter by [tags](#usage)!\n\n## Installation\n\nMake sure you have Python 3 and `pip` installed.\n\nFirst, run\n```\npip install maestro-music\n```\n\n**NOTE**: `pip install maestro` will NOT work, this downloads a totally unrelated package from PyPI.\n\nNow, if you want to be able to directly download songs from YouTube or Spotify, you'll need to install [FFmpeg](https://github.com/FFmpeg/FFmpeg). You can also download the songs yourself and pass the path to the downloaded file to `maestro add`.\n\n### Installing FFmpeg\n\n**EASIEST**: `conda install -c conda-forge ffmpeg`\n\nBut if you don't want to get `conda`, here are the instructions for each platform:\n\n#### macOS\nRequires [Homebrew](https://brew.sh/):\n```\nbrew install ffmpeg\n```\n\n#### Windows\n\nJust check out the [FFmpeg website](https://ffmpeg.org/download.html) and download the latest version of the Windows build. Make sure to add the `bin` folder to your PATH.\n\nHere are some instructions:\n[https://www.geeksforgeeks.org/how-to-install-ffmpeg-on-windows/](https://www.geeksforgeeks.org/how-to-install-ffmpeg-on-windows/)\n\n#### Linux\n\n[https://www.tecmint.com/install-ffmpeg-in-linux/](https://www.tecmint.com/install-ffmpeg-in-linux/)\n\n### Known Installation Issues\n\nIf you have any issues, before trying the below fixes, make sure you have the latest version of `pip` installed:\n```\npip install --upgrade pip\n```\n\nAlso, if you have `conda`, see if running the following fixes your issue before trying anything below:\n```\nconda install libsndfile ffmpeg cffi\n```\n\n`maestro` uses [just_playback](https://github.com/cheofusi/just_playback) to play sound, which uses a C library called [miniaudio](https://github.com/mackron/miniaudio). Unfortunately, the creators did not provide wheels, so installation of `just_playback` and therefore `maestro` usually fails if there's any (compatibility or otherwise) problems with your C/C++ compiler. Here are platforms where there are known issues:\n\n#### Apple Silicon\n\nThere's a problem with the flag `-march=native` for older versions of the `clang` compiler. I manually removed this from the `just_playback` code and built an Apple Silicon-compatible version. Just check out the `dependency_builds/` folder in this repo, and look for the wheel that says `arm64`. Download it, then run\n```\npip install PATH_TO_DOWNLOADED_ARM64_WHEEL\n```\nand *now* installing `maestro` should work.\n\n#### Windows\n\nIf you get this error on a 64-bit Windows\n```\nerror: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\n```\nfind and download the `win_amd64` wheel of `just_playback` in `dependency_builds`, then run\n```\npip install PATH_TO_DOWNLOADED_WIN64_WHEEL\n```\nand *now* installing `maestro` should work. Another option (especially if you're on a 32-bit Windows) is to just get Visual C++ Build Tools.\n\n#### Linux\n\nIf you have issues, try:\n * upgrading pip: `pip install --upgrade pip`\n * uninstalling `just_playback`: `pip uninstall just_playback`\n * reinstalling `just_playback` with the `--no-binary` flag: `pip install just_playback --no-binary just_playback --force-reinstall --upgrade`\n\nCheck this out: [https://github.com/cheofusi/just_playback/issues/21](https://github.com/cheofusi/just_playback/issues/21) ... and good luck ðŸ’€.\n\n## Platforms\n\nTested heavily on macOS Monterey, barely at all on Windows and Linux. `maestro` was coded to be cross-platform, but if there are any problems, please open an issue (or PR if you know how to fix it!).\n\nSupports `.mp3`, `.wav`, `.flac`, and `.ogg` (Ogg Vorbis).\n\n## Usage\n\nRun `maestro -h` to get a list of commands. Run `maestro <some command> -h` to get comprehensive help for that commandâ€”the below is just an overview.\n\n`maestro` uses the concept of a positive integer **song ID** to uniquely refer to each song.\n\nAlso, playlists don't existâ€”`maestro` uses **tags**. For example, let's say you want to be able to listen to all your Jon Bellion songs together. Instead of adding them all to a playlist, run `maestro -t jon-bellion <song IDs for each Jon Bellion song>`. Then `maestro play jon-bellion`. If song `s` has tag `t`, then you can think of song `s` as belonging to the playlist defined by tag `t`.\n\n`maestro` also tracks your listen timeâ€”total and by year. You can see this with `maestro list` and/or `maestro entry`. For example, to see your top 10 listened songs (by number of times listened; note that this is NOT the number of times the song was played but rather the total listen time for that song divided by the duration), run `maestro list -s times_listened -T 10 -y cur`â€”replace 'cur' with e.g. '2020' to get the listen times for 2020 instead.\n\n### `maestro add`\n\nAdd a song (can be a folder of songs too!) given a file path.\n\nPass the `-Y` or `--youtube` flag to download from a YouTube or YouTube Music URL instead of a file path. This requires installing [FFmpeg](https://github.com/FFmpeg/FFmpeg). Passing a YouTube Music **song** URL (not \"Video\") is recommended, as passing \"Video\"s (i.e. just normal YouTube videos) can sometimes mess up the artist/album data.\n\nPass the `-S` or `--spotify` flag to download from a Spotify URL instead of a file path. This also requires installing FFmpeg.\n\nPass the `-P` or `--playlist` flag to download an entire YT playlist from a song URL with a playlist component, e.g. https://www.youtube.com/watch?v=V1Z586zoeeE&list=PLfSdF_HSSu55q-5p-maISZyr19erpZsTo. The `-p` flag is unnecessary if the URL points directly to a playlist, e.g. https://www.youtube.com/playlist?list=PLfSdF_HSSu55q-5p-maISZyr19erpZsTo.\n\nBy default, `maestro add` copies the file to its internal database (`~/.maestro-files`), but you can pass the `-M` or `--move` flag to move the file instead.\n\n### `maestro cache`\nCalculate (or recalculate with the `-F/--force` flag) visualization frequency data (see [`maestro play`](#maestro-play)) for songs passed by ID (or all songs with the `-A/--all` flag.\n\nIf you ever go into the song database (located at `~/.maestro-files`) and manually edit a song, e.g. trimming (not recommended but should be fine as long as you don't mess with the name of the file), you should run `maestro cache --recache <SONG_ID>` to readjust the visualization.\n\n### `maestro clip`\n\nEver been listening to music, and you're skipping every song because you keep getting bored of them? You like the songs, you're just not in the mood to listen to all of them entirely.\n\nIntroducing clips, something I've always wished the big companies like Spotify, YT Music would do. Use `maestro clip ID START END` to define a clip for any song with a start and end timestamp (or use the clip editor for fine-grained control with `maestro clip ID`), then `maestro play -c` to play in \"clip mode\" (can also be toggled while playing a normal mode session with the `c` key)â€”this will play the clips for each song (or the entire song if there's no clip). Now you can listen to only the best parts of your music!\n\n### `maestro entry`\n\nList details for a specific song.\n\n### `maestro list`\n\nList songs (or tags) and details. Use `maestro list -h` to see full options (e.g. sort, list only songs with a certain tag, etc.).\n\n### `maestro play`\n\nPlay songs. Use `maestro play -h` to see full options. Has lots of features:\n- pass tag(s) as arguments to play songs with any of those tag(s) (or songs with all of those tag(s) if you pass the `-M` or `--match-all` flag)\n- shuffle playlist with the `-s` or `--shuffle option (shuffle once, shuffle every loop, or shuffle every loop except the first)\n- play songs in reverse order with the `-R` or `--reverse` flag\n- loop playlist with the `-L` or `--loop` flag\n- show an audio visualization with the `-V` or `--visualize` flag\n  - you may notice some wait time for the visualization to properly load the first time a song is visualized (~7 seconds), but after that the visualization is cached and should load quickly\n- works with headphone buttons (and the Touch Bar and Siri!) on Mac using the Now Playing Center!\n- works with Discord status! (pass the `-D` or `--discord` flag)\n\nWhile playing:\n- like a song and want to play *that specific song* on loop? click `l` while playing to toggle loop mode (not the same as passing `-L` to `maestro play`!)\n- seek with left/right arrow keys\n- volume up/down with `[` and `]`\n- remove selected song (not necessarily the currently playing song) from current playlist with `backspace/delete`\n- scroll with mouse or up/down arrow keys to scroll the selected song\n- `c` to toggle clip mode\n- `v` to toggle visualization mode\n- `d` to toggle Discord status\n- `m` to mute\n- `r` to replay a song\n- `a` to add a song by ID to the end of the playlist\n- `i` to insert a song by ID after the currently playing song\n- `b` or `p` to go back to the previous song\n- `s` or `n` to go to the next song\n- space to pause/play\n- `e` to end after the current song\n- `q` to end immediately (don't just close the window or `CTRL-c`, this messes up the accuracy of the listen time statistics)\n\n### `maestro push`\n\nPush a song to the top (or bottom) of your song list. Useful, for example, if you usually play the most recently added songs first (`maestro play -R`)â€”you can use `maestro push` to push a song to the top of your list so it's the first song to play.\n\n### `maestro recommend` (experimental)\n\nRecommend songs similar to a song title (specified directly or by ID) using YouTube Music. Equivalent to searching for the title of the song on YouTube Music, clicking on the first \"Song\" result, and then looking at the \"Up Next\" section.\n\n### `maestro remove`\n\nRemove a song (or tag).\n\n### `maestro rename`\n\nRename a song (or tag).\n\n### `maestro search`\n\nSearch for songs (or tags) by name.\n\n### `maestro tag`\n\nAdd tags to a song, e.g. `maestro tag -t harry-styles 87` (adds the tag 'harry-styles' to the song with ID 87).\n\n### `maestro unclip`\n\nRemove a clip from a song, e.g. `maestro unclip 87` (removes the clip from the song with ID 87).\n\n### `maestro untag`\n\nRemove tags from a song, e.g. `maestro untag -t harry-styles 87` (removes the tag 'harry-styles' from the song with ID 87).\n\n## Thanks\n\nBig thanks to the creators of [just_playback](https://github.com/cheofusi/just_playback), no doubt the best Python module for playing sound!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PrajwalVandana/maestro-cli",
    "keywords": "music,sound,audio,music-player,cli,ogg,flac,mp3,wav,spotify,youtube,audio-visualization,audio-visualizer",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maestro-music",
    "package_url": "https://pypi.org/project/maestro-music/",
    "platform": null,
    "project_url": "https://pypi.org/project/maestro-music/",
    "project_urls": {
      "Homepage": "https://github.com/PrajwalVandana/maestro-cli"
    },
    "release_url": "https://pypi.org/project/maestro-music/1.0.1/",
    "requires_dist": [
      "click",
      "just-playback",
      "music-tag",
      "pypresence",
      "yt-dlp",
      "spotdl",
      "ytmusicapi",
      "librosa",
      "numba",
      "numpy",
      "pyobjc-core ; sys_platform == \"darwin\"",
      "pyobjc-framework-ApplicationServices ; sys_platform == \"darwin\"",
      "pyobjc-framework-AVFoundation ; sys_platform == \"darwin\"",
      "pyobjc-framework-Cocoa ; sys_platform == \"darwin\"",
      "pyobjc-framework-CoreAudio ; sys_platform == \"darwin\"",
      "pyobjc-framework-CoreMedia ; sys_platform == \"darwin\"",
      "pyobjc-framework-MediaPlayer ; sys_platform == \"darwin\"",
      "pyobjc-framework-Quartz ; sys_platform == \"darwin\"",
      "windows-curses ; sys_platform == \"win32\""
    ],
    "requires_python": "",
    "summary": "A simple command line tool to play songs (or any audio files, really).",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17472843,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fb2b7209e8450ad171d5e1f7a3e1b8defc5a71362b9f5433746a4d333946bf7",
        "md5": "730b9a757449af2e34748a42f26d85ed",
        "sha256": "def7dfc1dc777d2d220b0238189d46cb29cd52df25dc02881731cd775a2ee3ec"
      },
      "downloads": -1,
      "filename": "maestro_music-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "730b9a757449af2e34748a42f26d85ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 76209,
      "upload_time": "2023-03-28T03:44:15",
      "upload_time_iso_8601": "2023-03-28T03:44:15.454053Z",
      "url": "https://files.pythonhosted.org/packages/4f/b2/b7209e8450ad171d5e1f7a3e1b8defc5a71362b9f5433746a4d333946bf7/maestro_music-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f69b73a1604074d88bbafc71597b0eba252c273880bf14445d68a89f790a8648",
        "md5": "729a260c1402918b998c2fe0c1b58436",
        "sha256": "8f10e49870bd386df315e9d8ed92d03fee766852c3d7f27fa2f6cd34dd1ebeeb"
      },
      "downloads": -1,
      "filename": "maestro-music-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "729a260c1402918b998c2fe0c1b58436",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78858,
      "upload_time": "2023-03-28T03:44:17",
      "upload_time_iso_8601": "2023-03-28T03:44:17.981948Z",
      "url": "https://files.pythonhosted.org/packages/f6/9b/73a1604074d88bbafc71597b0eba252c273880bf14445d68a89f790a8648/maestro-music-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}