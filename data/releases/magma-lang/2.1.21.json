{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Magma\n[![Documentation Status](https://readthedocs.org/projects/magma/badge/?version=latest)](https://magma.readthedocs.io/en/latest/?badge=latest)\n[![Build Status](https://travis-ci.org/phanrahan/magma.svg?branch=master)](https://travis-ci.org/phanrahan/magma)\n[![codecov](https://codecov.io/gh/phanrahan/magma/branch/master/graph/badge.svg)](https://codecov.io/gh/phanrahan/magma)\n[![Join the chat at https://gitter.im/Magma-HDL/community](https://badges.gitter.im/Magma-HDL/community.svg)](https://gitter.im/Magma-HDL/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[CHANGELOG](https://github.com/phanrahan/magma/blob/master/CHANGELOG.md)\n\n[CHEAT SHEET](https://github.com/phanrahan/magma/blob/master/docs/cheat_sheet.md)\n\nMagma is a hardware design language embedded in python.\n\nThe central abstraction in Magma is a circuit.\nA circuit is a set of functional units that are wired together.\nMagma circuits are analagous to verilog modules.\nThus, all Magma programs are guaranteed to be synthesizable.\nAlthough wiring modules together may seem low-level,\nit encourages hardware designers to build reusable components,\nsimilar to how programmers build libraries.\n\nPython is used to to create Magma circuits.\nThis approach to hardware design using scripting languages\nis referred to as *generators* in the hardware community.\nExample hardware generators include \narithmetic units,\nlinear feedback shift registers,\nwallace trees,\nand sorting networks.\nSoftware engineers refer to this technique as *metaprogramming*.\nThe scripting language is a metaprogram \nin the sense that it is a program that creates a hardware program.\n\nIn contrast to verilog,\nPython has powerful metaprogramming capabilities,\nsuch as decorators and metaclasses.\nThis makes it possible to create \nhigher-level domain-specific languages (DSLs).\nExamples include languages for\nfinite state machines,\nmemory controllers,\nimage and signal processing,\nand even processors.\n\nThe best way to learn Magma is through examples.\nThe [magma_register_file_tutorial](https://github.com/leonardt/magma_register_file_tutorial)\nprovides an example of defining and verifying a register file generator.\nThe\n[magmathon](https://github.com/phanrahan/magmathon) repository contains\na set of [Jupyter\nNotebooks](https://github.com/phanrahan/magmathon/tree/master/notebooks/tutorial)\nthat introduce the system. There's also\n[magma_examples](https://github.com/leonardt/magma_examples) and\n[magma_tutorial](https://github.com/leonardt/magma_tutorial) which contain a\nset of basic circuits and tests, providing an example templates for a magma\nprojects.  Please also refer to the\n[documentation](http://magma.readthedocs.io/).\n\nThe design of Magma was heavily influenced by \n[Chisel](https://chisel.eecs.berkeley.edu/),\nso Magma should be easy to learn if you know Chisel.\nSome examples from the Chisel tutorial have been ported to\nMagma and can be found in [here](https://github.com/leonardt/magma_examples).\nMagma also has a \n[FIRRTL](https://github.com/freechipsproject/firrtl) backend,\nand we hope to demonstrate interoperability with Chisel via FIRRTL soon.\n\nMagma is designed to work with\n[Mantle](https://github.com/phanrahan/mantle) \nwhich contains an a collection of useful circuits;\nand with [Loam](https://github.com/phanrahan/loam)\nwhich is used to represent parts and boards,\nand to build applications for standalone FPGA boards.\n\n## Setting up Python\nmagma requires using Python 3.7+.  This section walks through a few common methods\nfor getting set up with Python. The first (recommended) method is to use\nminiconda which supports MacOS and Linux (and Windows, but magma's support for\nwindows has not been tested).  We also provide methods using the standard\npackage managers for MacOS and Ubuntu Linux.\n\n### Universal\n[miniconda](https://conda.io/miniconda.html) - A free minimal installer for\nconda. Miniconda is a small, bootstrap version of Anaconda that includes only\nconda, Python, the packages they depend on and a small number of other useful\npackages, including pip, zlib and a few others. Use the conda install command\nto install 720+ additional conda packages from the Continuum repository.\n\nDownload the installer for your operating system from\n[https://conda.io/miniconda.html](https://conda.io/miniconda.html).\n\nThe following instructions uses the latest MacOSX release, replace the link in\nthe wget command for you operating system.\n```\n$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\n$ bash Miniconda3-latest-MacOSX-x86_64.sh\n# Installing dependencies like matplotlib is typically more reliable with conda than pip\n$ conda install matplotlib\n```\n\n### MacOS/Homebrew\n```\n$ brew install python3\n```\n\n### Ubuntu\n```\n$ sudo apt-get install python3 python3-pip\n```\n\n## Installing Dependencies\nMagma depends on some third-party libraries that should be installed using your\noperating system's package manager.\n\n### MacOS/Homebrew\n```\n$ brew install verilator gmp mpfr libmpc\n```\n\n### Ubuntu\n```\n$ sudo apt-get install make gcc g++ verilator libgmp-dev libmpfr-dev libmpc-dev\n```\n\n## User Setup\nMagma is available as a pip package, install the lastest release with:\n```\npip install magma-lang\n```\n\n## Development Setup\nClone the magma repository\n```\n$ git clone https://github.com/phanrahan/magma\n$ cd magma\n```\n\nInstall magma as a symbolic package\n```\n$ pip install -e .\n```\n\nInstall testing infrastructure and run tests to validate the setup\n```\n$ pip install pytest  # note that magma requires pytest version 3.3 or later\n$ pip install fault\n$ pytest tests\n```\n\nYou should see something like\n```\n============================= test session starts ==============================\nplatform darwin -- Python 3.6.1, pytest-3.0.7, py-1.4.33, pluggy-0.4.0\nrootdir: ..../repos/magmacore, inifile:\ncollected 70 items\n\ntests/test_circuit/test_anon.py .\ntests/test_circuit/test_declare.py .\ntests/test_circuit/test_define.py .\ntests/test_higher/test_braid.py .\ntests/test_higher/test_curry.py .\ntests/test_higher/test_currylut.py .\ntests/test_higher/test_curryrom.py .\ntests/test_higher/test_flat.py .\ntests/test_higher/test_fork.py .\ntests/test_higher/test_higher_compose.py .\ntests/test_higher/test_join.py .\ntests/test_interface/test_interface.py ....\ntests/test_io/test_inout1.py .\ntests/test_io/test_inout2.py .\ntests/test_io/test_out1.py .\ntests/test_io/test_out2.py .\ntests/test_ir/test_declaretest.py .\ntests/test_ir/test_ir.py .\ntests/test_meta/test_class.py .\ntests/test_meta/test_creg.py .\ntests/test_simulator/test_counter.py .\ntests/test_simulator/test_ff.py .\ntests/test_simulator/test_logic.py .\ntests/test_type/test_anon_type.py .\ntests/test_type/test_array.py .\ntests/test_type/test_array2d.py .\ntests/test_type/test_arrayconstruct.py .\ntests/test_type/test_arrayflip.py .\ntests/test_type/test_arrayval.py .\ntests/test_type/test_awire1.py .\ntests/test_type/test_bit.py .\ntests/test_type/test_bitflip.py .\ntests/test_type/test_bitval.py .\ntests/test_type/test_tuple.py .\ntests/test_type/test_tupleconstruct.py .\ntests/test_type/test_tupleflip.py .\ntests/test_type/test_tupleval.py .\ntests/test_type/test_twire1.py .\ntests/test_type/test_type_errors.py ...\ntests/test_type/test_vcc.py .\ntests/test_type/test_whole.py .\ntests/test_type/test_wire1.py .\ntests/test_type/test_wire2.py .\ntests/test_type/test_wire3.py .\ntests/test_type/test_wire4.py .\ntests/test_type/test_wire5.py .\ntests/test_verilog/test_verilog.py .\ntests/test_wire/test_arg1.py .\ntests/test_wire/test_arg2.py .\ntests/test_wire/test_array1.py .\ntests/test_wire/test_array2.py .\ntests/test_wire/test_array3.py .\ntests/test_wire/test_call1.py .\ntests/test_wire/test_call2.py .\ntests/test_wire/test_compose.py .\ntests/test_wire/test_const0.py .\ntests/test_wire/test_const1.py .\ntests/test_wire/test_errors.py ..\ntests/test_wire/test_flip.py .\ntests/test_wire/test_named1.py .\ntests/test_wire/test_named2a.py .\ntests/test_wire/test_named2b.py .\ntests/test_wire/test_named2c.py .\ntests/test_wire/test_pos.py .\n\n========================== 70 passed in 1.45 seconds ===========================\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phanrahan/magma",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Lenny Truong",
    "maintainer_email": "lenny@cs.stanford.edu",
    "name": "magma-lang",
    "package_url": "https://pypi.org/project/magma-lang/",
    "platform": "",
    "project_url": "https://pypi.org/project/magma-lang/",
    "project_urls": {
      "Homepage": "https://github.com/phanrahan/magma"
    },
    "release_url": "https://pypi.org/project/magma-lang/2.1.21/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An embedded DSL for constructing hardware circuits",
    "version": "2.1.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17531117,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0c95130a36d60c6cd0a534a9ae99d15ad65a4157c693c14494eb677a23e4d5a",
        "md5": "01e7aab701c9254ff096da65ffdab5f6",
        "sha256": "25e5b35bf080bce4f18929672f5273c43f3e95bc8f678ff31ac4cc1a5eb0a179"
      },
      "downloads": -1,
      "filename": "magma-lang-2.1.21.tar.gz",
      "has_sig": false,
      "md5_digest": "01e7aab701c9254ff096da65ffdab5f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 139626,
      "upload_time": "2020-12-04T01:13:39",
      "upload_time_iso_8601": "2020-12-04T01:13:39.116600Z",
      "url": "https://files.pythonhosted.org/packages/a0/c9/5130a36d60c6cd0a534a9ae99d15ad65a4157c693c14494eb677a23e4d5a/magma-lang-2.1.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}