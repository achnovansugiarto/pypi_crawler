{
  "info": {
    "author": "codingjoe",
    "author_email": "info@johanneshoppe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development"
    ],
    "description": ".. image:: https://travis-ci.org/codingjoe/django-stdimage.png?branch=master\n    :target: https://travis-ci.org/codingjoe/django-stdimage\n\n.. image:: https://coveralls.io/repos/codingjoe/django-stdimage/badge.png?branch=master\n    :target: https://coveralls.io/r/codingjoe/django-stdimage\n\n.. image:: https://pypip.in/v/django-stdimage/badge.png\n    :target: https://crate.io/packages/django-stdimage\n\n.. image:: https://pypip.in/status/django-stdimage/badge.svg\n    :target: https://pypi.python.org/pypi/django-stdimage/\n    :alt: Development Status\n\n.. image:: https://pypip.in/py_versions/django-stdimage/badge.svg\n    :target: https://pypi.python.org/pypi/django-stdimage/\n    :alt: Supported Python versions\n\n.. image:: https://pypip.in/d/django-stdimage/badge.png\n    :target: https://crate.io/packages/django-stdimage/\n    :alt: Downloads\n\n.. image:: https://pypip.in/license/django-stdimage/badge.png\n    :target: https://pypi.python.org/pypi/django-stdimage/\n    :alt: License\n\nDjango Standarized Image Field\n==============================\n\nDjango Field that implement the following features:\n\n* Django-Storages compatible (S3)\n* Python 2, 3 and PyPy support\n* Django 1.5 and later support\n* Resize images to different sizes\n* Access thumbnails on model level, no template tags required\n* Preserves original image\n* Restrict accepted image dimensions\n* Rename files to a standardized name (using a callable upload_to)\n\nInstallation\n------------\n\nSimply install the latest stable package using the command\n\n``easy_install django-stdimage`` or ``pip django-stdimage``\n\nand add ``'stdimage'`` to ``INSTALLED_APPs`` in your settings.py, that's it!\n\nUsage\n-----\n\n``StdImageField`` works just like Django's own `ImageField <https://docs.djangoproject.com/en/dev/ref/models/fields/#imagefield>`_ except that you can specify different sized variations.\n\nVariations\n Variations are specified withing a dictionary. The key will will be the attribute referencing the resized image.\n A variation can be defined both as a tuple or a dictionary.\n\n Example::\n\n     from stdimage.models import StdImageField\n\n     class MyModel(models.Model):\n         # works just like django's ImageField\n         image = StdImageField(upload_to='path/to/img')\n\n         # creates a thumbnail resized to maximum size to fit a 100x75 area\n         image = StdImageField(upload_to='path/to/img', variations={'thumbnail': {'with': 100, 'height': 75}})\n\n         # is the same as dictionary-style call\n         image = StdImageField(upload_to='path/to/img', variations={'thumbnail': (100, 75)})\n\n         # creates a thumbnail resized to 100x100 croping if necessary\n         image = StdImageField(upload_to='path/to/img', variations={\n            'thumbnail': {\"width\": 100, \"height\": 100, \"crop\":True}\n         })\n\n         ## Full ammo here. Please note all the definitions below are equal\n         image = StdImageField(upload_to=upload_to, blank=True, variations={\n             'large': (600, 400),\n             'thumbnail': (100, 100, True),\n             'medium': (300, 200),\n         })\n\n For using generated variations in templates use \"myimagefield.variation_name\".\n \n Example::\n\n     <a href=\"{{ object.myimage.url }}\"><img alt=\"\" src=\"{{ object.myimage.thumbnail.url }}\"/></a>\n\n\nUtils\n By default StdImageField stores images without modifying the file name.\n If you want to use more consistent file names you can use the build in upload callables.\n \n Example::\n\n     from stdimage.utils import UploadToUUID, UploadToClassNameDir, UploadToAutoSlug, UploadToAutoSlugClassNameDir\n\n     class MyClass(models.Model)\n         # Gets saved to MEDIA_ROOT/myclass/#FILENAME#.#EXT#\n         image1 = StdImageField(upload_to=UploadToClassNameDir())\n \n         # Gets saved to MEDIA_ROOT/myclass/pic.#EXT#\n         image2 = StdImageField(upload_to=UploadToClassNameDir(name='pic'))\n\n         # Gets saved to MEDIA_ROOT/images/#UUID#.#EXT#\n         image3 = StdImageField(upload_to=UploadToUUID(path='images'))\n\n         # Gets saved to MEDIA_ROOT/myclass/#UUID#.#EXT#\n         image4 = StdImageField(upload_to=UploadToClassNameDirUUID())\n\n         # Gets save to MEDIA_ROOT/images/#SLUG#.#EXT#\n         image5 = StdImageField(upload_to=UploadToAutoSlug(path='images))\n\n         # Gets save to MEDIA_ROOT/myclass/#SLUG#.#EXT#\n         image6 = StdImageField(upload_to=UploadToAutoSlugClassNameDir())\n\nValidators\n The `StdImageField` doesn't implement any size validation. Validation can be specified using the validator attribute\n and using a set of validators shipped with this package.\n Validators can be used for both Forms and Models.\n\n Example::\n\n    from stdimage.validators import UploadToUUID, UploadToClassNameDir, UploadToAutoSlug, UploadToAutoSlugClassNameDir\n\n    class MyClass(models.Model)\n        image1 = StdImageField(validators=MinSizeValidator(800, 600))\n        image2 = StdImageField(validators=MaxSizeValidator(1028, 768))\n\n CAUTION: The MaxSizeValidator should be used with caution.\n As storage isn't expensive, you shouldn't restrict upload dimensions.\n If you seek prevent users form overflowing your memory you should restrict the HTTP upload body size.\n\nDeleting images\n Django `dropped support\n <https://docs.djangoproject.com/en/dev/releases/1.3/#deleting-a-model-doesn-t-delete-associated-files>`_. for automated deletions in version 1.3.\n Implementing file deletion `should be done\n <http://stackoverflow.com/questions/5372934/how-do-i-get-django-admin-to-delete-files-when-i-remove-an-object-from-the-datab>`_. inside your own applications using the `post_delete` or `pre_delete` signal.\n Clearing the field if blank is true, does not delete the file. This can also be achieved using `pre_save` and `post_save` signals.\n This packages contains two signal callback methods that handle file deletion for all SdtImageFields of a model.::\n\n    from stdimage import pre_delete_delete_callback, pre_save_delete_callback\n\n    post_delete.connect(pre_delete_delete_callback, sender=MyModel)\n    pre_save.connect(pre_save_delete_callback, sender=MyModel)\n\n\n Warning: You should not use the singal callbacks in production. They may result in data loss.\n\n\nRe-rendering variations\n You might want to add new variations to a field. That means you need to render new variations for missing fields.\n This can be accomplished using a management command.::\n\n    python manage.py rendervariations 'app_name.model_name.field_name' [--replace]\n\n The `replace` option will replace all existing files.\n There is currently a memory leak, that's why you should avoid using the `replace` option in cron jobs.\n\n\nTesting\n-------\nTo run the tests simply run ``python setup.py test``\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codingjoe/django-stdimage",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-stdimage",
    "package_url": "https://pypi.org/project/django-stdimage/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-stdimage/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/codingjoe/django-stdimage"
    },
    "release_url": "https://pypi.org/project/django-stdimage/1.2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django Standarized Image Field",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13886802,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1f1afedd7e23969e4512a62448420cd019819081f39cdcd19f779d211787741",
        "md5": "f11127802450fe8099799c5d164cc899",
        "sha256": "7fab71ab8682e48aa2dcca0ab93597d24a05606f352ec07232d027e093e8fc94"
      },
      "downloads": -1,
      "filename": "django-stdimage-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f11127802450fe8099799c5d164cc899",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7827,
      "upload_time": "2015-01-09T10:08:39",
      "upload_time_iso_8601": "2015-01-09T10:08:39.684061Z",
      "url": "https://files.pythonhosted.org/packages/e1/f1/afedd7e23969e4512a62448420cd019819081f39cdcd19f779d211787741/django-stdimage-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}