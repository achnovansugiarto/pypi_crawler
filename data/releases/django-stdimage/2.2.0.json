{
  "info": {
    "author": "codingjoe",
    "author_email": "info@johanneshoppe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/django-stdimage.svg\r\n    :target: https://pypi.python.org/pypi/django-stdimage/\r\n\r\n.. image:: https://travis-ci.org/codingjoe/django-stdimage.png?branch=master\r\n    :target: https://travis-ci.org/codingjoe/django-stdimage\r\n    :alt: Iontinuous Integration\r\n\r\n.. image:: https://landscape.io/github/codingjoe/django-stdimage/master/landscape.svg?style=flat\r\n    :target: https://landscape.io/github/codingjoe/django-stdimage/master\r\n    :alt: Code Health\r\n\r\n.. image:: https://coveralls.io/repos/codingjoe/django-stdimage/badge.png?branch=master\r\n    :target: https://coveralls.io/r/codingjoe/django-stdimage\r\n    :alt: Test Coverage\r\n\r\n.. image:: https://scrutinizer-ci.com/g/codingjoe/django-stdimage/badges/quality-score.png?b=master\r\n    :target: https://scrutinizer-ci.com/g/codingjoe/django-stdimage/?branch=master\r\n\r\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg\r\n    :alt: MIT License\r\n\r\n.. image:: https://badges.gitter.im/Join%20Chat.svg\r\n   :alt: Join the chat at https://gitter.im/codingjoe/django-stdimage\r\n   :target: https://gitter.im/codingjoe/django-stdimage?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n\r\nDjango Standarized Image Field\r\n==============================\r\n\r\nDjango Field that implement the following features:\r\n\r\n* Django-Storages compatible (S3)\r\n* Resize images to different sizes\r\n* Access thumbnails on model level, no template tags required\r\n* Preserves original image\r\n* Asynchronous rendering (Celery & Co)\r\n* Multi threading and processing for optimum performance\r\n* Restrict accepted image dimensions\r\n* Rename files to a standardized name (using a callable upload_to)\r\n\r\nInstallation\r\n------------\r\n\r\nSimply install the latest stable package using the command\r\n\r\n``easy_install django-stdimage`` or ``pip django-stdimage``\r\n\r\nand add ``'stdimage'`` to ``INSTALLED_APPs`` in your settings.py, that's it!\r\n\r\nUsage\r\n-----\r\n\r\n``StdImageField`` works just like Django's own `ImageField <https://docs.djangoproject.com/en/dev/ref/models/fields/#imagefield>`_ except that you can specify different sized variations.\r\n\r\nVariations\r\n Variations are specified withing a dictionary. The key will will be the attribute referencing the resized image.\r\n A variation can be defined both as a tuple or a dictionary.\r\n\r\n Example\r\n    .. code :: python\r\n\r\n        from stdimage.models import StdImageField\r\n\r\n\r\n        class MyModel(models.Model):\r\n            # works just like django's ImageField\r\n            image = StdImageField(upload_to='path/to/img')\r\n\r\n            # creates a thumbnail resized to maximum size to fit a 100x75 area\r\n            image = StdImageField(upload_to='path/to/img',\r\n                                  variations={'thumbnail': {'width': 100, 'height': 75}})\r\n\r\n            # is the same as dictionary-style call\r\n            image = StdImageField(upload_to='path/to/img', variations={'thumbnail': (100, 75)})\r\n\r\n            # creates a thumbnail resized to 100x100 croping if necessary\r\n            image = StdImageField(upload_to='path/to/img', variations={\r\n                'thumbnail': {\"width\": 100, \"height\": 100, \"crop\": True}\r\n            })\r\n\r\n            ## Full ammo here. Please note all the definitions below are equal\r\n            image = StdImageField(upload_to=upload_to, blank=True, variations={\r\n                'large': (600, 400),\r\n                'thumbnail': (100, 100, True),\r\n                'medium': (300, 200),\r\n            })\r\n\r\n For using generated variations in templates use \"myimagefield.variation_name\".\r\n\r\n Example\r\n    .. code :: python\r\n\r\n        <a href=\"{{ object.myimage.url }}\"><img alt=\"\" src=\"{{ object.myimage.thumbnail.url }}\"/></a>\r\n\r\n\r\nUtils\r\n By default StdImageField stores images without modifying the file name.\r\n If you want to use more consistent file names you can use the build in upload callables.\r\n\r\n Example\r\n    .. code :: python\r\n\r\n        from stdimage.utils import UploadToUUID, UploadToClassNameDir, UploadToAutoSlug, \\\r\n            UploadToAutoSlugClassNameDir\r\n\r\n\r\n        class MyClass(models.Model):\r\n            title = models.CharField(max_length=50)\r\n\r\n            # Gets saved to MEDIA_ROOT/myclass/#FILENAME#.#EXT#\r\n            image1 = StdImageField(upload_to=UploadToClassNameDir())\r\n\r\n            # Gets saved to MEDIA_ROOT/myclass/pic.#EXT#\r\n            image2 = StdImageField(upload_to=UploadToClassNameDir(name='pic'))\r\n\r\n            # Gets saved to MEDIA_ROOT/images/#UUID#.#EXT#\r\n            image3 = StdImageField(upload_to=UploadToUUID(path='images'))\r\n\r\n            # Gets saved to MEDIA_ROOT/myclass/#UUID#.#EXT#\r\n            image4 = StdImageField(upload_to=UploadToClassNameDirUUID())\r\n\r\n            # Gets save to MEDIA_ROOT/images/#SLUG#.#EXT#\r\n            image5 = StdImageField(upload_to=UploadToAutoSlug(populate_from='title'))\r\n\r\n            # Gets save to MEDIA_ROOT/myclass/#SLUG#.#EXT#\r\n            image6 = StdImageField(upload_to=UploadToAutoSlugClassNameDir(populate_from='title'))\r\n\r\nValidators\r\n The `StdImageField` doesn't implement any size validation. Validation can be specified using the validator attribute\r\n and using a set of validators shipped with this package.\r\n Validators can be used for both Forms and Models.\r\n\r\n Example\r\n    .. code :: python\r\n\r\n        from stdimage.validators import UploadToUUID, UploadToClassNameDir, UploadToAutoSlug, UploadToAutoSlugClassNameDir\r\n\r\n\r\n        class MyClass(models.Model)\r\n            image1 = StdImageField(validators=[MinSizeValidator(800, 600)])\r\n            image2 = StdImageField(validators=[MaxSizeValidator(1028, 768)])\r\n\r\n\r\n CAUTION: The MaxSizeValidator should be used with caution.\r\n As storage isn't expensive, you shouldn't restrict upload dimensions.\r\n If you seek prevent users form overflowing your memory you should restrict the HTTP upload body size.\r\n\r\nDeleting images\r\n Django `dropped support\r\n <https://docs.djangoproject.com/en/dev/releases/1.3/#deleting-a-model-doesn-t-delete-associated-files>`_. for automated deletions in version 1.3.\r\n Implementing file deletion `should be done\r\n <http://stackoverflow.com/questions/5372934/how-do-i-get-django-admin-to-delete-files-when-i-remove-an-object-from-the-datab>`_. inside your own applications using the `post_delete` or `pre_delete` signal.\r\n Clearing the field if blank is true, does not delete the file. This can also be achieved using `pre_save` and `post_save` signals.\r\n This packages contains two signal callback methods that handle file deletion for all SdtImageFields of a model.\r\n    .. code :: python\r\n\r\n        from stdimage import pre_delete_delete_callback, pre_save_delete_callback\r\n\r\n\r\n        post_delete.connect(pre_delete_delete_callback, sender=MyModel)\r\n        pre_save.connect(pre_save_delete_callback, sender=MyModel)\r\n\r\n\r\n Warning: You should not use the signal callbacks in production. They may result in data loss.\r\n\r\n\r\nAsync image processing\r\n Tools like celery allow to execute time-consuming tasks outside of the request. If you don't want\r\n to wait for your variations to be rendered in request, StdImage provides your the option to pass a\r\n async keyword and a util.\r\n Note that the callback is not transaction save, but the file will be there.\r\n This example is based on celery.\r\n\r\n tasks.py\r\n\r\n\r\n    .. code :: python\r\n\r\n        try:\r\n            from django.apps import apps\r\n            get_model = apps.get_model\r\n        except ImportError:\r\n            from django.db.models.loading import get_model\r\n\r\n        from celery import shared_task\r\n\r\n        from stdimage.utils import render_variations\r\n\r\n\r\n        @shared_task\r\n        def process_photo_image(file_name, variations, storage):\r\n            render_variations(file_name, variations, replace=True, storage=storage)\r\n            obj = get_model('myapp', 'Photo').objects.get(image=file_name)\r\n            obj.processed = True\r\n            obj.save()\r\n\r\n\r\n models.py\r\n\r\n    .. code :: python\r\n\r\n        from django.db import models\r\n        from stdimage.models import StdImageField\r\n        from stdimage.utils import UploadToClassNameDir\r\n\r\n        from tasks import process_photo_image\r\n\r\n        def image_processor(file_name, variations, storage):\r\n            process_photo_image.delay(file_name, variations, storage)\r\n            return False  # prevent default rendering\r\n\r\n        class AsyncImageModel(models.Model)\r\n            image = StdImageField(\r\n                # above task definition can only handle one model object per image filename\r\n                upload_to=UploadToClassNameDir(),\r\n                render_variations=image_processor  # pass boolean or callable\r\n            )\r\n            processed = models.BooleanField(default=False)  # flag that could be used for view querysets\r\n\r\n\r\nRe-rendering variations\r\n You might want to add new variations to a field. That means you need to render new variations for missing fields.\r\n This can be accomplished using a management command.\r\n    .. code ::\r\n\r\n        python manage.py rendervariations 'app_name.model_name.field_name' [--replace]\r\n\r\n The `replace` option will replace all existing files.\r\n\r\nMulti processing\r\n  Since version 2 stdImage supports multiprocessing.\r\n  Every image is rendered in separate process.\r\n  It not only increased performance but the garbage collection\r\n  and therefore the huge memory footprint from previous versions.\r\n\r\n  **Note:** PyPy seems to have some problems regarding multiprocessing,\r\n  for that matter all multiprocessing is disabled in PyPy.\r\n\r\n\r\nContributing\r\n============\r\n\r\nGetting started is easy. After setting up your env, just install:\r\n\r\n.. code::\r\n\r\n    pip install -r requirements-dev.txt; pre-commit install\r\n\r\nTo make contributing even easier, make sure your editor's or IDE's [EditorConfig] support is enabled.\r\n\r\nTesting\r\n-------\r\nTo run the tests simply run ``python setup.py test``",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/codingjoe/django-stdimage",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codingjoe/django-stdimage",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stdimage",
    "package_url": "https://pypi.org/project/django-stdimage/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-stdimage/",
    "project_urls": {
      "Download": "https://github.com/codingjoe/django-stdimage",
      "Homepage": "https://github.com/codingjoe/django-stdimage"
    },
    "release_url": "https://pypi.org/project/django-stdimage/2.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django Standarized Image Field",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13886802,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dda9afeb14739c7a46462776081e1c07ef81a21ba45ecc1fd6b5eaf55c674cb9",
        "md5": "4ec5f8d96c6954c5f0c1983fdbde05a4",
        "sha256": "62f8add6b1d4507dd527b38b2a993acbd51ead7ce0a2d7169e8496cc1cb90e1f"
      },
      "downloads": -1,
      "filename": "django-stdimage-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4ec5f8d96c6954c5f0c1983fdbde05a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9409,
      "upload_time": "2015-12-04T13:50:14",
      "upload_time_iso_8601": "2015-12-04T13:50:14.105374Z",
      "url": "https://files.pythonhosted.org/packages/dd/a9/afeb14739c7a46462776081e1c07ef81a21ba45ecc1fd6b5eaf55c674cb9/django-stdimage-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}