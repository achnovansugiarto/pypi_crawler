{
  "info": {
    "author": "Johannes Hoppe",
    "author_email": "info@johanneshoppe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion",
      "Topic :: Software Development"
    ],
    "description": "[![version](https://img.shields.io/pypi/v/django-stdimage.svg)](https://pypi.python.org/pypi/django-stdimage/)\n[![codecov](https://codecov.io/gh/codingjoe/django-stdimage/branch/master/graph/badge.svg)](https://codecov.io/gh/codingjoe/django-stdimage)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n# Django Standardized Image Field\n\nDjango Field that implement the following features:\n\n* Django-Storages compatible (S3)\n* Resize images to different sizes\n* Access thumbnails on model level, no template tags required\n* Preserves original image\n* Asynchronous rendering (Celery & Co)\n* Restrict accepted image dimensions\n* Rename files to a standardized name (using a callable upload_to)\n\n## Installation\n\nSimply install the latest stable package using the command\n\n```bash\npip install django-stdimage\n# or\npipenv install django-stdimage\n```\n\nand add `'stdimage'` to `INSTALLED_APP`s in your settings.py, that's it!\n\n## Usage\n\n`StdImageField` works just like Django's own\n[ImageField](https://docs.djangoproject.com/en/dev/ref/models/fields/#imagefield)\nexcept that you can specify different sized variations.\n\nThe `JPEGField` works similar to the `StdImageField` but all size variations are\nconverted to JPEGs, no matter what type the original file is.\n\n### Variations\n\nVariations are specified within a dictionary. The key will be the attribute referencing the resized image.\nA variation can be defined both as a tuple or a dictionary.\n\nExample:\n\n```python\nfrom django.db import models\nfrom stdimage import StdImageField, JPEGField\n\n\nclass MyModel(models.Model):\n    # works just like django's ImageField\n    image = StdImageField(upload_to='path/to/img')\n\n    # creates a thumbnail resized to maximum size to fit a 100x75 area\n    image = StdImageField(upload_to='path/to/img',\n                          variations={'thumbnail': {'width': 100, 'height': 75}})\n\n    # is the same as dictionary-style call\n    image = StdImageField(upload_to='path/to/img', variations={'thumbnail': (100, 75)})\n\n    # variations are converted to JPEGs\n    jpeg = JPEGField(\n        upload_to='path/to/img',\n        variations={'full': (None, None), 'thumbnail': (100, 75)},\n    )\n\n    # creates a thumbnail resized to 100x100 croping if necessary\n    image = StdImageField(upload_to='path/to/img', variations={\n        'thumbnail': {\"width\": 100, \"height\": 100, \"crop\": True}\n    })\n\n    ## Full ammo here. Please note all the definitions below are equal\n    image = StdImageField(upload_to='path/to/img', blank=True, variations={\n        'large': (600, 400),\n        'thumbnail': (100, 100, True),\n        'medium': (300, 200),\n    }, delete_orphans=True)\n```\n\nFor using generated variations in templates use `myimagefield.variation_name`.\n\nExample:\n\n```html\n<a href=\"{{ object.myimage.url }}\"><img alt=\"\" src=\"{{ object.myimage.thumbnail.url }}\"/></a>\n```\n\n### Utils\n\nSince version 4 the custom `upload_to` utils have been dropped in favor of\n[Django Dynamic Filenames][dynamic_filenames].\n\n[dynamic_filenames]: https://github.com/codingjoe/django-dynamic-filenames\n\n### Validators\nThe `StdImageField` doesn't implement any size validation. Validation can be specified using the validator attribute\nand using a set of validators shipped with this package.\nValidators can be used for both Forms and Models.\n\nExample\n\n```python\nfrom django.db import models\nfrom stdimage.validators import MinSizeValidator, MaxSizeValidator\nfrom stdimage.models import StdImageField\n\n\nclass MyClass(models.Model):\n    image1 = StdImageField(validators=[MinSizeValidator(800, 600)])\n    image2 = StdImageField(validators=[MaxSizeValidator(1028, 768)])\n```\n\n**CAUTION:** The MaxSizeValidator should be used with caution.\nAs storage isn't expensive, you shouldn't restrict upload dimensions.\nIf you seek prevent users form overflowing your memory you should restrict the HTTP upload body size.\n\n### Deleting images\n\nDjango [dropped support](https://docs.djangoproject.com/en/dev/releases/1.3/#deleting-a-model-doesn-t-delete-associated-files)\nfor automated deletions in version 1.3.\n\nSince version 5, this package supports a `delete_orphans` argument. It will delete\norphaned files, should a file be delete or replaced via Django form or and object with\na `StdImageField` be deleted. It will not be deleted if the field value is changed or\nreassigned programatically. In those rare cases, you will need to handle proper deletion\nyourself.\n\n```python\nfrom django.db import models\nfrom stdimage.models import StdImageField\n\n\nclass MyModel(models.Model):\n    image = StdImageField(\n        upload_to='path/to/files',\n        variations={'thumbnail': (100, 75)},\n        delete_orphans=True,\n        blank=True,\n    )\n```\n\n### Async image processing\nTools like celery allow to execute time-consuming tasks outside of the request. If you don't want\nto wait for your variations to be rendered in request, StdImage provides your the option to pass a\nasync keyword and a util.\nNote that the callback is not transaction save, but the file will be there.\nThis example is based on celery.\n\n`tasks.py`:\n```python\nfrom django.apps import apps\n\nfrom celery import shared_task\n\nfrom stdimage.utils import render_variations\n\n\n@shared_task\ndef process_photo_image(file_name, variations, storage):\n    render_variations(file_name, variations, replace=True, storage=storage)\n    obj = apps.get_model('myapp', 'Photo').objects.get(image=file_name)\n    obj.processed = True\n    obj.save()\n```\n\n`models.py`:\n```python\nfrom django.db import models\nfrom stdimage.models import StdImageField\n\nfrom .tasks import process_photo_image\n\ndef image_processor(file_name, variations, storage):\n    process_photo_image.delay(file_name, variations, storage)\n    return False  # prevent default rendering\n\nclass AsyncImageModel(models.Model):\n    image = StdImageField(\n        # above task definition can only handle one model object per image filename\n        upload_to='path/to/file/',\n        render_variations=image_processor  # pass boolean or callable\n    )\n    processed = models.BooleanField(default=False)  # flag that could be used for view querysets\n```\n\n### Re-rendering variations\nYou might want to add new variations to a field. That means you need to render new variations for missing fields.\nThis can be accomplished using a management command.\n```bash\npython manage.py rendervariations 'app_name.model_name.field_name' [--replace] [-i/--ignore-missing]\n```\nThe `replace` option will replace all existing files.\nThe `ignore-missing` option will suspend missing source file errors and keep\nrendering variations for other files. Othervise command will stop on first\nmissing file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codingjoe/django-stdimage",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stdimage",
    "package_url": "https://pypi.org/project/django-stdimage/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stdimage/",
    "project_urls": {
      "Homepage": "https://github.com/codingjoe/django-stdimage"
    },
    "release_url": "https://pypi.org/project/django-stdimage/5.2.1/",
    "requires_dist": [
      "Django (>=2.2)",
      "pillow (>=2.5)",
      "progressbar2 (>=3.0.0)"
    ],
    "requires_python": "",
    "summary": "Django Standarized Image Field",
    "version": "5.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13886802,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "609dedf98f4a92c76859ca3169923c5d8995e8fba6b8321d8b593db0b181e0a3",
        "md5": "74848f1bfa8eb6ff2d064f470ca21e83",
        "sha256": "b2f4f6f2f7ae81aec4448fd3acd02eea9e41562dcad65804e32ffc7bd2827331"
      },
      "downloads": -1,
      "filename": "django_stdimage-5.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74848f1bfa8eb6ff2d064f470ca21e83",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14576,
      "upload_time": "2021-03-26T08:18:13",
      "upload_time_iso_8601": "2021-03-26T08:18:13.174849Z",
      "url": "https://files.pythonhosted.org/packages/60/9d/edf98f4a92c76859ca3169923c5d8995e8fba6b8321d8b593db0b181e0a3/django_stdimage-5.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acad4a46ba09558174a0fe220d6f3db9e81ea6a4a3fc0602144ff884876da1f1",
        "md5": "6b0ad3e8397996d27d54cce4d0b811c5",
        "sha256": "aa98dfe8c64f24186997c95a5253399effd22152b29b112255b2f4df19d4c3a7"
      },
      "downloads": -1,
      "filename": "django-stdimage-5.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6b0ad3e8397996d27d54cce4d0b811c5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13130,
      "upload_time": "2021-03-26T08:18:14",
      "upload_time_iso_8601": "2021-03-26T08:18:14.638778Z",
      "url": "https://files.pythonhosted.org/packages/ac/ad/4a46ba09558174a0fe220d6f3db9e81ea6a4a3fc0602144ff884876da1f1/django-stdimage-5.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}