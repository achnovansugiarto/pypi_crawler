{
  "info": {
    "author": "Open edX project",
    "author_email": "oscm@edx.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "###################\nLTI Consumer XBlock\n###################\n\n| |Build Status| |Coveralls|\n\nThis XBlock implements the consumer side of the LTI specification enabling\nintegration of third-party LTI provider tools.\n\nInstallation\n============\n\nInstall the requirements into the Python virtual environment of your\n``edx-platform`` installation by running the following command from the\nroot folder:\n\n.. code:: bash\n\n    $ pip install -r requirements/base.txt\n\nInstalling in Docker Devstack\n-----------------------------\n\nAssuming that your ``devstack`` repo lives at ``~/code/devstack``\nand that ``edx-platform`` lives right alongside that directory, you'll want\nto checkout ``xblock-lti-consumer`` and have it live in ``~/code/src/xblock-lti-consumer``.\nThis will make it so that you can access it inside an LMS container shell\nand easily make modifications for local testing.\n\nRun ``make lms-shell`` from your ``devstack`` directory to enter a running LMS container.\nOnce in there, you can do the following to have your devstack pointing at a local development\nversion of ``xblock-lti-consumer``:\n\n.. code:: bash\n\n    $ pushd /edx/src/xblock-lti-consumer\n    $ virtualenv venv/\n    $ source venv/bin/activate\n    $ make install\n    $ make test  # optional, if you want to see that everything works\n    $ deactivate\n    $ pushd  # should take you back to /edx/app/edxapp/edx-platform\n    $ pip uninstall -y lti_consumer_xblock\n    $ pip install -e /edx/src/xblock-lti-consumer\n\nEnabling in Studio\n------------------\n\nYou can enable the LTI Consumer XBlock in Studio through the\nadvanced settings.\n\n1. From the main page of a specific course, navigate to\n   ``Settings ->    Advanced Settings`` from the top menu.\n2. Check for the ``advanced_modules`` policy key, and add\n   ``\"lti_consumer\"`` to the policy value list.\n3. Click the \"Save changes\" button.\n\nTesting Against an LTI Provider\n===============================\n\nLTI 1.1\n-------\n\nhttp://lti.tools/saltire/ provides a \"Test Tool Provider\" service that allows\nyou to see messages sent by an LTI consumer.\n\nWe have some useful documentation on how to set this up here:\nhttp://edx.readthedocs.io/projects/open-edx-building-and-running-a-course/en/latest/exercises_tools/lti_component.html#lti-authentication-information\n\n1. In Studio Advanced settings, set the value of the \"LTI Passports\" field to \"test:test:secret\" -\n   this will set the OAuth client key and secret used to send a message to the test LTI provider.\n2. Create an LTI Consumer problem in a course in Studio (after enabling it in \"advanced_modules\"\n   as seen above).  Make a unit, select \"Advanced\", then \"LTI Consumer\".\n3. Click edit and fill in the following fields:\n   ``LTI ID``: \"test\"\n   ``LTI URL``: \"https://lti.tools/saltire/tp\"\n4. Click save.  The unit should refresh and you should see \"Passed\" in the \"Verification\" field of\n   the message tab in the LTI Tool Provider emulator.\n5. Click the \"Publish\" button.\n6. View the unit in your local LMS.  If you get an ``ImportError: No module named lti_consumer``, you\n   should ``docker-compose restart lms`` (since we previously uninstalled the lti_consumer to get the\n   tests for this repo running inside an LMS container).  From here, you can see the contents of the\n   messages that we are sending as an LTI Consumer in the \"Message Parameters\" part of the \"Message\" tab.\n\n\nLTI 1.3\n-------\n\nIMS Global provides a reference implementation of LTI 1.3 that can be used to test the XBlock.\n\nOn LTI 1.3 the authentication mechanism used is OAuth2 using the Client Credentials grant, this means\nthat to configure the tool, the LMS needs to know the keyset URL or public key of the tool, and the tool\nneeds to know the LMS's one.\n\nInstructions:\n\n1. Set up a local tunnel tunneling the LMS (using `ngrok` or a similar tool) to get a URL accessible from the internet.\n2. Create a new course, and add the `lti_consumer` block to the advanced modules list.\n3. In the course, create a new unit and add the LTI block.\n\n   * Set ``LTI Version`` to ``LTI 1.3``.\n   * Set the ``Tool Launch URL`` to ``https://lti-ri.imsglobal.org/lti/tools/``\n\n4. In Studio, you'll see a few parameters being displayed in the preview:\n\n.. code::\n\n    Client ID: f0532860-cb34-47a9-b16c-53deb077d4de\n    Deployment ID: 1\n    # Note that these are LMS URLS\n    Keyset URL: http://localhost:18000/api/lti_consumer/v1/public_keysets/block-v1:OpenCraft+LTI101+2020_T2+type@lti_consumer+block@efc55c7abb87430883433bfafb83f054\n    Access Token URL: http://localhost:18000/api/lti_consumer/v1/token/block-v1:OpenCraft+LTI101+2020_T2+type@lti_consumer+block@efc55c7abb87430883433bfafb83f054\n    OIDC Callback URL: http://localhost:18000/api/lti_consumer/v1/launch/\n\n\n5. Add the tunnel URL to the each of these URLs as it'll need to be accessed by the tool (hosted externally).\n\n.. code::\n\n    # This is <LMS_URL>/api/lti_consumer/v1/public_keysets/<BLOCK_LOCATION>\n    https://647dd2e1.ngrok.io/api/lti_consumer/v1/public_keysets/block-v1:OpenCraft+LTI101+2020_T2+type@lti_consumer+block@996c72b16070434098bc598bd7d6dbde\n\n\n6. Set up a tool in the IMS Global reference implementation (https://lti-ri.imsglobal.org/lti/tools/).\n\n   * Click on ``Add tool`` at the top of the page (https://lti-ri.imsglobal.org/lti/tools).\n   * Add the parameters and URLs provided by the block, and generate a private key on https://lti-ri.imsglobal.org/keygen/index and paste it there (don't close the tab, you'll need the public key later).\n\n7. Go back to Studio, and edit the block adding its settings (you'll find them by scrolling down https://lti-ri.imsglobal.org/lti/tools/ until you find the tool you just created):\n\n.. code::\n\n    Tool Launch URL: https://lti-ri.imsglobal.org/lti/tools/[tool_id]/launches\n    Tool Initiate Login URL: https://lti-ri.imsglobal.org/lti/tools/[tool_id]/login_initiations\n    Tool Public key: Public key from key page.\n\n8. Publish block, log into LMS and navigate to the LTI block page.\n9. Click ``Send Request`` and verify that the LTI launch was successful.\n\n.. admonition:: Testing using ``ngrok``\n\n    When launching LTI 1.3 requests through ``ngrok``, make sure your LMS is serving session cookies marked as\n    ``Secure`` and with the ``SameSite`` attribute set to ``None``. You can do this by changing ``SESSION_COOKIE_SECURE: true``\n    and ``DCS_SESSION_COOKIE_SAMESITE: None`` in your ``lms.yml`` configuration files. Note that this will break logins\n    for locally accessed URLs in the devstack.\n\n\nCustom LTI Parameters\n=====================\n\nThis XBlock sends a number of parameters to the provider including some optional parameters. To keep the XBlock\nsomewhat minimal, some parameters were omitted like ``lis_person_name_full`` among others.\nAt the same time the XBlock allows passing extra parameters to the LTI provider via parameter processor functions.\n\nDefining an LTI Parameter Processor\n-----------------------------------\n\nThe parameter processor is a function that expects an XBlock instance, and returns a ``dict`` of\nadditional parameters for the LTI.\nIf a processor throws an exception, the exception is logged and suppressed.\nIf a processor returns ``None`` or any falsy value, no parameters will be added.\n\n.. code:: python\n\n    def team_info(xblock):\n        course = get_team(xblock.user, lti_params.course.id)\n        if not course:\n            return\n\n        return {\n            'custom_course_id': unicode(course.id),\n            'custom_course_name': course.name,\n        }\n\nA processor can define a list of default parameters ``lti_xblock_default_params``,\nwhich is useful in case the processor had an exception.\n\nIt is recommended to define default parameters anyway, because it can simplify the implementation of the processor\nfunction. Below is an example:\n\n.. code:: python\n\n    def dummy_processor(xblock):\n        course = get_team(xblock.user, lti_params.course.id)  # If something went wrong default params will be used\n        if not course:\n            return  # Will use the default params\n\n        return {\n            'custom_course_id': unicode(course.id),\n            'custom_course_name': course.name,\n        }\n\n    dummy_processor.lti_xblock_default_params = {\n        'custom_course_id': '',\n        'custom_course_name': '',\n    }\n\nIf you're looking for a more realistic example, you can check the\n`Tahoe LTI <https://github.com/appsembler/tahoe-lti>`_ repository at the\n`Appsembler GitHub organization <https://github.com/appsembler/>`_.\n\nConfiguring the Parameter Processors Settings\n---------------------------------------------\n\nUsing the standard XBlock settings interface the developer can provide a list of processor functions:\nThose parameters are not sent by default. The course author can enable that on per XBlock instance\n(aka module) by setting the **Send extra parameters** to ``true`` in Studio.\n\nTo configure parameter processors add the following snippet to your Ansible variable files:\n\n.. code:: yaml\n\n    EDXAPP_XBLOCK_SETTINGS:\n      lti_consumer:\n        parameter_processors:\n          - 'customer_package.lti_processors:team_and_cohort'\n          - 'example_package.lti_processors:extra_lti_params'\n\nDynamic LTI Custom Parameters\n=============================\n\nThis XBlock gives us the capability to attach static and dynamic custom parameters in the custom parameters field,\nin the case we need to declare a dynamic custom parameter we must set the value of the parameter as a templated parameter\nwrapped with the tags '${' and '}' just like the following example:\n\n.. code:: python\n\n    [\"static_param=static_value\", \"dynamic_custom_param=${templated_param_value}\"]\n\nDefining a dynamic LTI Custom Parameter Processor\n-------------------------------------------------\n\nThe custom parameter processor is a function that expects an XBlock instance, and returns a ``string`` which should be the resolved value.\nExceptions must be handled by the processor itself.\n\n.. code:: python\n\n    def get_course_name(xblock):\n        try:\n            course = CourseOverview.objects.get(id=xblock.course.id)\n        except CourseOverview.DoesNotExist:\n            log.error('Course does not exist.')\n            return ''\n\n        return course.display_name\n\nNote. The processor function must return a ``string`` object.\n\nConfiguring the LTI Dynamic Custom Parameters Settings\n------------------------------------------------------\n\nThe setting LTI_CUSTOM_PARAM_TEMPLATES must be set in order to map the template value for the dynamic custom parameter\nas the following example:\n\n.. code:: python\n\n    LTI_CUSTOM_PARAM_TEMPLATES = {\n        'templated_param_value': 'customer_package.module:func',\n    }\n\n* 'templated_param_value': custom parameter template name.\n* 'customer_package.module:func': custom parameter processor path and function name.\n\n\n\nLTI Advantage Features\n======================\n\nThis XBlock supports LTI 1.3 and the following LTI Avantage services:\n\n* Deep Linking (LTI-DL)\n* Assignments and Grades services (LTI-AGS)\n* Names and Roles Provisioning services (LTI-NRP)\n\nTo enable LTI-AGS, you need to set **LTI Assignment and Grades Service** in Studio to\nallow tools to send back grades. There's two grade interaction models implemented:\n\n* **Allow tools to submit grades only (declarative)(Default)**: enables LTI-AGS and\n  creates a single fixed LineItem that the tools can send grades too.\n* **Allow tools to manage and submit grades (programmatic)**: enables LTI-AGS and\n  enables full access to LTI-AGS endpoints. Tools will be able to create, manage and\n  delete multiple LineItems, and set multiple grades per student per problem.\n  *In this implementation, the tool is responsible for managing grades and linking them in the LMS.*\n\nTo enable LTI-DL and its capabilities, you need to set these settings in the block:\n\n1. Locate the **Deep linking** setting and set it to **True (enabled)**.\n2. Set **Deep Linking Launch URL** setting. You can retrieve it from the tool you’re integrating with.\n   If it’s not provided, try using the same value as in the LTI 1.3 Tool Launch URL.\n\nTo enable LTI-NRPS, you set **Enable LTI NRPS** to **True** in the block settings on Studio.\n\n\nDevelopment\n===========\n\nWorkbench installation and settings\n-----------------------------------\n\nInstall to the workbench's virtualenv by running the following command\nfrom the xblock-lti-consumer repo root with the workbench's virtualenv activated:\n\n.. code:: bash\n\n    $ make install\n\nRunning tests\n-------------\n\nFrom the xblock-lti-consumer repo root, run the tests with the following command:\n\n.. code:: bash\n\n    $ make test\n\nRunning code quality check\n--------------------------\n\nFrom the xblock-lti-consumer repo root, run the quality checks with the following command:\n\n.. code:: bash\n\n    $ make quality\n\nCompiling Sass\n--------------\n\nThis XBlock uses Sass for writing style rules. The Sass is compiled\nand committed to the git repo using:\n\n.. code:: bash\n\n    $ make compile-sass\n\nChanges to style rules should be made to the Sass files, compiled to CSS,\nand committed to the git repository.\n\nPackage Requirements\n--------------------\n\nsetup.py contains a list of package dependencies which are required for this XBlock package.\nThis list is what is used to resolve dependencies when an upstream project is consuming\nthis XBlock package. requirements.txt is used to install the same dependencies when running\nthe tests for this package.\n\nDownloading translations from Transifex\n---------------------------------------\n\nIf you want to download translations from Transifex install\n`transifex client <https://docs.transifex.com/client/installing-the-client/>`_ and run this command while\ninside project root directory:\n\n.. code:: bash\n\n    $ tx pull -f --mode=reviewed -l en,ar,es_419,fr,he,hi,ko_KR,pt_BR,ru,zh_CN\n\nLicense\n=======\n\nThe LTI Consumer XBlock is available under the AGPL v3 License.\n\nSecurity\n========\n\nPlease do not report security issues in public. Send security concerns via email to security@edx.org.\n\nChangelog\n=========\n\nPlease See the [releases tab](https://github.com/edx/xblock-lti-consumer/releases) for the complete changelog.\n\n4.0.1 - 2022-05-09\n------------------\n* Add `Learner` to LTI launch roles in addition to the `Student` value\n\n4.0.0 - 2022-05-09\n------------------\n\n* Adds support for loading external LTI configurations from Open edX plugins implementing filters for the event\n  `org.openedx.xblock.lti_consumer.configuration.listed.v1`. This can be enabled by setting a Course Waffle Flag\n  `lti_consumer.enable_external_config_filter` for specific courses.\n\n3.4.6 - 2022-03-31\n------------------\n\n* Fix rendering of `lti_1p3_launch_error.html` and `lti_1p3_permission_error.html` templates\n\n3.4.5 - 2022-03-16\n------------------\n\n* Fix LTI Deep Linking return endpoint permission checking method by replacing the old one with the proper\n  Studio API call.\n\n3.4.4 - 2022-03-03\n------------------\n\n* Fix LTI 1.3 Deep Linking launch url - always perform launch on launch URL, but update `target_link_uri` when\n  loading deep linking content.\n  See LTI 1.3 spec at: https://www.imsglobal.org/spec/lti/v1p3#target-link-uri\n\n3.4.3 - 2022-02-01\n------------------\n\n* Fix LTI 1.1 template rendering when using embeds in the platform\n\n3.4.2 - 2022-02-01\n------------------\n\n* Fix LTI 1.1 form rendering so it properly renders quotes present in titles.\n* Migrate LTI 1.1 launch template from Mako to Django template.\n* Internationalize LTI 1.1 launch template.\n\n3.4.1 - 2022-02-01\n------------------\n\n* Fix the target_link_uri parameter on OIDC login preflight url parameter so it matches \n  claim message definition of the field.\n  See docs at https://www.imsglobal.org/spec/lti/v1p3#target-link-uri\n\n3.4.0 - 2022-01-31\n------------------\n\n* Fix the version number by bumping it up to 3.4.0\n\n3.3.0 - 2022-01-20\n-------------------\n\n* Added support for specifying LTI 1.3 JWK URLs.\n\n3.2.0 - 2022-01-18\n-------------------\n\n* Dynamic custom parameters support with the help of template parameter processors.\n\n3.1.2 - 2021-11-12\n-------------------\n\n* The modal to confirm information transfer on open of lti in new tab/window has been updated\n  because of a change in how browsers handle iframe permissions.\n\n3.1.0 - 2021-10-?\n-------------------\n\n* The changes which led to this version change were not adequetly documented.\n\n3.0.1 - 2021-07-09\n-------------------\n\n* Added multi device support on student_view for mobile.\n\n\n3.0.0 - 2021-06-16\n-------------------\n\n* Rename `CourseEditLTIFieldsEnabledFlag` to `CourseAllowPIISharingInLTIFlag`\n  to highlight its increased scope.\n* Use `CourseAllowPIISharingInLTIFlag` for LTI1.3 in lieu of the current\n  `CourseWaffleFlag`.\n\n\n2.11.0 - 2021-06-10\n-------------------\n\n* NOTE: This release requires a corresponding change in edx-platform that was\n  implemented in https://github.com/edx/edx-platform/pull/27529\n  As such, this release cannot be installed in releases before Maple.\n* Move ``CourseEditLTIFieldsEnabledFlag`` from ``edx-platform`` to this repo\n  while retaining data from existing model.\n\n\n2.10.1 - 2021-06-09\n-------------------\n\n* LTI 1.3 and LTI Advantage features are now enabled by default.\n* LTI 1.3 settings were simplified to reduce confusion when setting up a LTI tool.\n* Code quality issues fixed\n\n\n2.9.1 - 2021-06-03\n------------------\n\n* LTI Advantage - NRP Service: this completes Advantage compliance.\n\n\n2.8.0 - 2021-04-13\n------------------\n\n* LTI Advantage - AGS Service: Added support for programmatic grade management by LTI tools.\n* Improved grade publishing to LMS when using LTI-AGS.\n* Increase LTI 1.3 token validity to 1h.\n\n\n2.7.0 - 2021-02-16\n------------------\n\n* Add support for presenting `ltiResourceLink` content from deep linking.\n\n\n2.6.0 - 2021-02-16\n------------------\n\n* Deep Linking content presentation implementation, for resource links, HTML,\n  HTML links, and images.\n\n* Fix bug with `config_id` migration where an entry was created _during_\n  the migration and did _not_ receive a valid UUID value.\n\n\n2.5.3 - 2021-01-26\n------------------\n\n* LTI Deep Linking Launch implementation, implementing DeepLinking Classes and request\n  request preparation.\n* LTI Deep Linking response endpoint implementation, along with model to store selected configuration and\n  content items.\n\n2.5.2 - 2021-01-20\n------------------\n\n* Fix issue with migration that causes migration failure due to duplicate `config_id` values.\n\n2.5.1 - 2021-01-19\n------------------\n\n* Simplify LTI 1.3 launches by removing OIDC launch start view.\n\n2.5.0 - 2021-01-15\n------------------\n\n* Add LTI 1.1 config on model.\n\n2.4.0 - 2020-12-02\n------------------\n\n* Partially implemented the Assignment and Grades Service to enable tools\n  reporting grades back.  Tools cannot create new LineItems.\n\n2.3 – 2020-08-27\n----------------\n\n* Move LTI configuration access to plugin model.\n\n2.2 – 2020-08-19\n----------------\n\n* Modals are sent to the parent window to work well with the courseware\n  micro-frontend.  A new message is sent to the parent window to request a\n  modal containing the contents ot the LTI launch iframe.\n\n2.1 – 2020-08-03\n----------------\n\n* The LTI consumer XBlock is now indexable.\n\n* Implement the LTI 1.3 context claim.\n\n2.0.0 – 2020-06-26\n------------------\n\n* LTI 1.3 support.\n\n\n.. |Build Status| image:: https://github.com/edx/xblock-lti-consumer/workflows/Python%20CI/badge.svg?branch=master\n  :target: https://github.com/edx/xblock-lti-consumer/actions?query=workflow%3A%22Python+CI%22\n\n.. |Coveralls| image:: https://coveralls.io/repos/edx/xblock-lti-consumer/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/edx/xblock-lti-consumer?branch=master\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edx/xblock-lti-consumer",
    "keywords": "lti consumer xblock",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lti-consumer-xblock",
    "package_url": "https://pypi.org/project/lti-consumer-xblock/",
    "platform": null,
    "project_url": "https://pypi.org/project/lti-consumer-xblock/",
    "project_urls": {
      "Homepage": "https://github.com/edx/xblock-lti-consumer"
    },
    "release_url": "https://pypi.org/project/lti-consumer-xblock/4.0.1/",
    "requires_dist": [
      "XBlock",
      "bleach",
      "django",
      "django-config-models",
      "django-filter",
      "edx-opaque-keys",
      "jsonfield",
      "lazy",
      "lxml",
      "mako",
      "oauthlib",
      "openedx-filters",
      "pycryptodomex",
      "pyjwkest",
      "xblock-utils"
    ],
    "requires_python": "",
    "summary": "This XBlock implements the consumer side of the LTI specification.",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178247,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb86ff46ba427bfa3015ffb0aa5709c9a475f254d209f26d8c5d80cf6d0289ea",
        "md5": "435ff8faf74732d08a36359f9433bd12",
        "sha256": "28b29c3ffd1f1a0fca36cfbc5b59ccb5a63fd18b04c55a4bb93a0c4c63b9f89d"
      },
      "downloads": -1,
      "filename": "lti_consumer_xblock-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "435ff8faf74732d08a36359f9433bd12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 244968,
      "upload_time": "2022-05-09T18:31:46",
      "upload_time_iso_8601": "2022-05-09T18:31:46.620416Z",
      "url": "https://files.pythonhosted.org/packages/bb/86/ff46ba427bfa3015ffb0aa5709c9a475f254d209f26d8c5d80cf6d0289ea/lti_consumer_xblock-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9de05ce5b9880e285a4cc828fb12e20bc60be4cf45883647979cf2ef1de7562",
        "md5": "dacfa662276108df2f4c32f56d19a246",
        "sha256": "0d3dc1454459b098a708df22c7fabf2bcb9cb52a270c3027cea2bd3ef0297f10"
      },
      "downloads": -1,
      "filename": "lti-consumer-xblock-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "dacfa662276108df2f4c32f56d19a246",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 174514,
      "upload_time": "2022-05-09T18:31:48",
      "upload_time_iso_8601": "2022-05-09T18:31:48.592996Z",
      "url": "https://files.pythonhosted.org/packages/a9/de/05ce5b9880e285a4cc828fb12e20bc60be4cf45883647979cf2ef1de7562/lti-consumer-xblock-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}