{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "LTI Consumer XBlock |Build Status| |Coveralls|\n----------------------------------------------\n\nThis XBlock implements the consumer side of the LTI specification enabling\nintegration of third-party LTI provider tools.\n\nInstallation\n------------\n\nInstall the requirements into the python virtual environment of your\n``edx-platform`` installation by running the following command from the\nroot folder:\n\n.. code:: bash\n\n    $ pip install -r requirements/base.txt\n\nInstalling in Docker Devstack\n-----------------------------\n\nAssuming that your ``devstack`` repo lives at ``~/code/devstack``\nand that ``edx-platform`` lives right alongside that directory, you'll want\nto checkout ``xblock-lti-consumer`` and have it live in ``~/code/src/xblock-lti-consumer``.\nThis will make it so that you can access it inside an LMS container shell\nand easily make modifications for local testing.\n\nRun ``make lms-shell`` from your ``devstack`` directory to enter a running LMS container.\nOnce in there, you can do the following to have your devstack pointing at a local development\nversion of ``xblock-lti-consumer``:\n\n.. code:: bash\n\n    $ pushd /edx/src/xblock-lti-consumer\n    $ virtualenv venv/\n    $ source venv/bin/activate\n    $ make install\n    $ make test  # optional, if you want to see that everything works\n    $ deactivate\n    $ pushd  # should take you back to /edx/app/edxapp/edx-platform\n    $ pip uninstall -y lti_consumer_xblock\n    $ pip install -e /edx/src/xblock-lti-consumer\n\nEnabling in Studio\n------------------\n\nYou can enable the LTI Consumer XBlock in Studio through the\nadvanced settings.\n\n1. From the main page of a specific course, navigate to\n   ``Settings ->    Advanced Settings`` from the top menu.\n2. Check for the ``advanced_modules`` policy key, and add\n   ``\"lti_consumer\"`` to the policy value list.\n3. Click the \"Save changes\" button.\n\nTesting Against an LTI Provider\n-------------------------------\n\nhttp://lti.tools/saltire/ provides a \"Test Tool Provider\" service that allows\nyou to see messages sent by an LTI consumer.\n\nWe have some useful documentation on how to set this up here:\nhttp://edx.readthedocs.io/projects/open-edx-building-and-running-a-course/en/latest/exercises_tools/lti_component.html#lti-authentication-information\n\n1. In Studio Advanced settings, set the value of the \"LTI Passports\" field to \"test:test:secret\" -\n   this will set the oauth client key and secret used to send a message to the test LTI provider.\n2. Create an LTI Consumer problem in a course in studio (after enabling it in \"advanced_modules\"\n   as seen above).  Make a unit, select \"Advanced\", then \"LTI Consumer\".\n3. Click edit and fill in the following fields:\n   ``LTI ID``: \"test\"\n   ``LTI URL``: \"https://lti.tools/saltire/tp\"\n4. Click save.  The unit should refresh and you should see \"Passed\" in the \"Verification\" field of\n   the message tab in the LTI Tool Provider emulator.\n5. Click the \"Publish\" button.\n6. View the unit in your local LMS.  If you get an ``ImportError: No module named lti_consumer``, you\n   should ``docker-compose restart lms`` (since we previously uninstalled the lti_consumer to get the\n   tests for this repo running inside an LMS container).  From here, you can see the contents of the\n   messages that we are sending as an LTI Consumer in the \"Message Parameters\" part of the \"Message\" tab.\n\nCustom LTI Parameters\n---------------------\nThis XBlock sends a number of parameters to the provider including some optional parameters. To keep the XBlock\nsomewhat minimal, some parameters were omitted like ``lis_person_name_full`` among others.\nAt the same time the XBlock allows passing extra parameters to the LTI provider via parameter processor functions.\n\nDefining an LTI Parameter Processors\n====================================\nThe parameter processor is a function that expects an XBlock instance, and returns a ``dict`` of\nadditional parameters for the LTI.\nIf a processor throws an exception, the exception is logged and suppressed.\nIf a processor returns ``None`` or any falsy value, no parameters will be added.\n\n.. code:: python\n\n    def team_info(xblock):\n        course = get_team(xblock.user, lti_params.course.id)\n        if not course:\n            return\n\n        return {\n            'custom_course_id': unicode(course.id),\n            'custom_course_name': course.name,\n        }\n\nA processor can define a list of default parameters ``lti_xblock_default_params``,\nwhich is useful in case the processor had an exception.\n\nIt is recommended to define default parameters anyway, because it can simplify the implementation of the processor\nfunction. Below is an example:\n\n.. code:: python\n\n    def dummy_processor(xblock):\n        course = get_team(xblock.user, lti_params.course.id)  # If something went wrong default params will be used\n        if not course:\n            return  # Will use the default params\n\n        return {\n            'custom_course_id': unicode(course.id),\n            'custom_course_name': course.name,\n        }\n\n    dummy_processor.lti_xblock_default_params = {\n        'custom_course_id': '',\n        'custom_course_name': '',\n    }\n\nIf you're looking for a more realistic example, you can check the\n`Tahoe LTI <https://github.com/appsembler/tahoe-lti>`_ repository at the\n`Appsembler GitHub organization <https://github.com/appsembler/>`_.\n\nConfiguring the Parameter Processors Settings\n=============================================\n\nUsing the standard XBlock settings interface the developer can provide a list of processor functions:\nThose parameters are not sent by default. The course author can enable that on per XBlock instance\n(aka module) by setting the **Send extra parameters** to ``true`` in Studio.\n\nTo configure parameter processors add the following snippet to your Ansible variable files:\n\n.. code:: yaml\n\n    EDXAPP_XBLOCK_SETTINGS:\n      lti_consumer:\n        parameter_processors:\n          - 'customer_package.lti_processors:team_and_cohort'\n          - 'example_package.lti_processors:extra_lti_params'\n\nWorkbench installation and settings\n-----------------------------------\n\nInstall to the workbench's virtualenv by running the following command\nfrom the xblock-lti-consumer repo root with the workbench's virtualenv activated:\n\n.. code:: bash\n\n    $ make install\n\nRunning tests\n-------------\n\nFrom the xblock-lti-consumer repo root, run the tests with the following command:\n\n.. code:: bash\n\n    $ make test\n\nRunning code quality check\n--------------------------\n\nFrom the xblock-lti-consumer repo root, run the quality checks with the following command:\n\n.. code:: bash\n\n    $ make quality\n\nCompiling Sass\n--------------\n\nThis XBlock uses Sass for writing style rules. The Sass is compiled\nand committed to the git repo using:\n\n.. code:: bash\n\n    $ make compile-sass\n\nChanges to style rules should be made to the Sass files, compiled to CSS,\nand committed to the git repository.\n\nPackage Requirements\n--------------------\n\nsetup.py contains a list of package dependencies which are required for this XBlock package.\nThis list is what is used to resolve dependencies when an upstream project is consuming\nthis XBlock package. requirements.txt is used to install the same dependencies when running\nthe tests for this package.\n\nDownloading translations from Transifex\n-------------------------------------\n\nIf you want to download translations from Transifex install\n`transifex client <https://docs.transifex.com/client/installing-the-client/>`_ and run this command while\ninside project root directory\n\n.. code:: bash\n\n    $ tx pull -f --mode=reviewed -l en,ar,es_419,fr,he,hi,ko_KR,pt_BR,ru,zh_CN\n\nLicense\n-------\n\nThe LTI Consumer XBlock is available under the Apache Version 2.0 License.\n\n\n.. |Build Status| image:: https://travis-ci.org/edx/xblock-lti-consumer.svg\n  :target: https://travis-ci.org/edx/xblock-lti-consumer\n\n.. |Coveralls| image:: https://coveralls.io/repos/edx/xblock-lti-consumer/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/edx/xblock-lti-consumer?branch=master\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edx/xblock-lti-consumer",
    "keywords": "lti consumer xblock",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lti-consumer-xblock",
    "package_url": "https://pypi.org/project/lti-consumer-xblock/",
    "platform": "",
    "project_url": "https://pypi.org/project/lti-consumer-xblock/",
    "project_urls": {
      "Homepage": "https://github.com/edx/xblock-lti-consumer"
    },
    "release_url": "https://pypi.org/project/lti-consumer-xblock/1.4.0/",
    "requires_dist": [
      "mako",
      "bleach",
      "oauthlib",
      "lxml",
      "django",
      "lazy",
      "XBlock",
      "xblock-utils"
    ],
    "requires_python": "",
    "summary": "This XBlock implements the consumer side of the LTI specification.",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17178247,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f7e71f15a74c0f91ddf781547df48c42b3ff6cbb933c998d5225a8c91cc830c",
        "md5": "a2c68bb959f7a484b7033492d1232bfe",
        "sha256": "0c74f43290eb9a738c01aa5ccc6276f86981e3a7d5ff2260600526542932aa1e"
      },
      "downloads": -1,
      "filename": "lti_consumer_xblock-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2c68bb959f7a484b7033492d1232bfe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 99224,
      "upload_time": "2020-06-08T11:06:05",
      "upload_time_iso_8601": "2020-06-08T11:06:05.873068Z",
      "url": "https://files.pythonhosted.org/packages/2f/7e/71f15a74c0f91ddf781547df48c42b3ff6cbb933c998d5225a8c91cc830c/lti_consumer_xblock-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de2ee47f7ef216c5b9044aeeafdd771c80d2377c7d5dc5a694e06d589bb70d1e",
        "md5": "acdc9d89066a6ce0436537a0fb3b4e54",
        "sha256": "e7f2f610800eea5af0fdb0be7d6bbaab63778afb3b11cca1e983672223ceb469"
      },
      "downloads": -1,
      "filename": "lti-consumer-xblock-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "acdc9d89066a6ce0436537a0fb3b4e54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45174,
      "upload_time": "2020-06-08T11:06:08",
      "upload_time_iso_8601": "2020-06-08T11:06:08.948948Z",
      "url": "https://files.pythonhosted.org/packages/de/2e/e47f7ef216c5b9044aeeafdd771c80d2377c7d5dc5a694e06d589bb70d1e/lti-consumer-xblock-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}