{
  "info": {
    "author": "Praekelt Consulting",
    "author_email": "dev@praekelt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Ultracache\n=================\n**Drop-in replacement for Django's template fragment caching. Provides automatic Django cache invalidation and reverse caching proxy purging.**\n\n.. figure:: https://travis-ci.org/praekelt/django-ultracache.svg?branch=develop\n   :align: center\n   :alt: Travis\n\n.. contents:: Contents\n    :depth: 5\n\nInstallation\n------------\n\n#. Install or add ``django-ultracache`` to your Python path.\n\n#. Add ``ultracache`` to your ``INSTALLED_APPS`` setting.\n\n#. Ensure ``django.core.context_processors.request`` is in ``TEMPLATE_CONTEXT_PROCESSORS`` setting.\n\nUsage\n-----\n\n``django-ultracache`` provides a template tag ``{% ultracache %}`` that functions like Django's\nstandard cache template tag, with these exceptions.\n\n#. It takes the sites framework into consideration, allowing different caching per site.\n\n#. It allows undefined variables to be passed as arguments, thus simplifying the template.\n\n#. Crucially, it is aware of model objects that are subjected to its caching. When an object is modified\n   all affected cache key are automatically expired. This allows the user to set longer expiry times without having\n   to worry about stale content.\n\n#. The cache invalidation can be extended to issue purge commands to Varnish, Nginx or other reverse caching proxies.\n\nSimplest use case::\n\n    {% load ultracache_tags %}\n    {% ultracache 3600 'my_identifier' object 123 undefined 'string' %}\n        {{ object.title }}\n    {% endultracache %}\n\nThe tag can be nested. ``ultracache`` is aware of all model objects that are subjected to its caching.\nIn this example cache keys ``outer`` and ``inner_one`` are expired when object one is changed but\ncache key ``inner_two`` remains unaffected::\n\n    {% load ultracache_tags %}\n    {% ultracache 1200 'outer' %}\n        {% ultracache 1200 'inner_one' %}\n            title = {{ one.title }}\n        {% endultracache %}\n        {% ultracache 1200 'inner_two' %}\n            title = {{ two.title }}\n        {% endultracache %}\n    {% endultracache %}\n\n``django-ultracache`` also provides a decorator ``cached_get`` to cache your views. The parameters\nfollow the same rules as the ``ultracache`` template tag except they must all resolve. ``request.get_full_path()`` is\nalways implicitly added to the cache key::\n\n    from ultracache.decorators import cached_get\n\n\n    class CachedView(TemplateView):\n        template_name = \"ultracache/cached_view.html\"\n\n        @cached_get(300, \"request.is_secure()\", 456)\n        def get(self, *args, **kwargs):\n            return super(CachedView, self).get(*args, **kwargs)\n\nThe ``cached_get`` decorator can be used in an URL pattern::\n\n    from ultracache.decorators import cached_get\n\n    url(\n        r\"^cached-view/$\",\n        cached_get(3600)(TemplateView.as_view(\n            template_name=\"myproduct/template.html\"\n        )),\n        name=\"cached-view\"\n    )\n\nDo not indiscriminately use the ``cached_get`` decorator. It only ever operates on GET requests\nbut cannot know if the code being wrapped retrieves data from eg. the session. In such a case\nit will cache things it is not supposed to cache.\n\nIf your view is used by more than one URL pattern then it is highly recommended to\napply the ``cached_get`` decorator in the URL pattern. Applying it at class level\nmay lead to cache collisions, especially if ``get_template_names`` is overridden.\n\nYou can create custom reverse caching proxy purgers. See ``purgers.py`` for examples::\n\n    ULTRACACHE = {\n        'purge': {'method': 'myproduct.purgers.squid'}\n    }\n\nAutomatic invalidation defaults to true. To disable automatic invalidation set::\n\n    ULTRACACHE = {\n        'invalidate': False\n    }\n\n``django-ultracache`` maintains a registry in Django's caching backend (see `How does it work`). This registry\ncan't be allowed to grow unchecked, thus a limit is imposed on the registry size. It would be inefficient to\nimpose a size limit on the entire registry so a maximum size is set per cached value. It defaults to 25000 bytes::\n\n    ULTRACACHE = {\n        'max-registry-value-size': 10000\n    }\n\nIt is highly recommended to use a backend that supports compression because a larger size improves cache coherency.\n\n\nHow does it work?\n-----------------\n\n``django-ultracache`` monkey patches ``django.template.base.Variable._resolve_lookup`` to make a record of\nmodel objects as they are resolved. The ``ultracache`` template tag inspects the list of objects contained\nwithin it and keeps a registry in Django's caching backend. A ``post_save`` signal handler monitors objects\nfor changes and expires the appropriate cache keys.\n\nTips\n----\n\n#. If you arre running a cluster of Django nodes then ensure that they use a shared caching backend.\n\n#. Expose objects in your templates. Instead of passing ``object_title`` to a template rather have the\n   template dereference ``object.title``.\n\nAuthors\n=======\n\nPraekelt Consulting\n-------------------\n* Hedley Roos\n\nChangelog\n=========\n\n1.9.1\n-----\n#. Add missing import only surfacing in certain code paths.\n#. `Invalidate` setting was not being loaded properly. Fixed.\n#. Handle content types RuntimeError when content types have not been migrated yet.\n\n1.9.0\n-----\n#. Move to tox for tests.\n#. Django 1.9 compatibility.\n\n0.3.8\n-----\n#. Honor the `raw` parameter send along by loaddata. It prevents redundant post_save handling.\n\n0.3.7\n-----\n#. Revert the adding of the template name. It introduces a performance penalty in a WSGI environment.\n#. Further reduce the number of writes to the cache.\n\n0.3.6\n-----\n#. Add template name (if possible) to the caching key.\n#. Reduce number of calls to set_many.\n\n0.3.5\n-----\n#. Keep the metadata cache size in check to prevent possibly infinite growth.\n\n0.3.4\n-----\n#. Prevent redundant sets.\n#. Work around an apparent Python bug related to `di[k].append(v)` vs `di[k] = di[k] + [v]`. The latter is safe.\n\n0.3.3\n-----\n#. Handle case where one cached view renders another cached view inside it, thus potentially sharing the same cache key.\n\n0.3.2\n-----\n#. The `ultracache` template tag now only caches HEAD and GET requests.\n\n0.3.1\n-----\n#. Trivial release to work around Pypi errors of the day.\n\n0.3\n---\n#. Replace `cache.get` in for loop with `cache.get_many`.\n\n0.2\n---\n#. Do not automatically add `request.get_full_path()` if any of `request.get_full_path()`, `request.path` or `request.path_info` is an argument for `cached_get`.\n\n0.1.6\n-----\n#. Also cache response headers.\n\n0.1.5\n-----\n#. Explicitly check for GET and HEAD request method and cache only those requests.\n\n0.1.4\n-----\n#. Rewrite decorator to be function based instead of class based so it is easier to use in urls.py.\n\n0.1.3\n-----\n#. `cached_get` decorator now does not cache if request contains messages.\n\n0.1.2\n-----\n#. Fix HTTPResponse caching bug.\n\n0.1.1\n-----\n#. Handle case where a view returns an HTTPResponse object.\n\n0.1\n---\n#. Initial release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/praekelt/django-ultracache",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-ultracache",
    "package_url": "https://pypi.org/project/django-ultracache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-ultracache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/praekelt/django-ultracache"
    },
    "release_url": "https://pypi.org/project/django-ultracache/1.9.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Drop-in replacement for Django's template fragment caching. Provides automatic cache invalidation.",
    "version": "1.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12551282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d3fb885ca38623461a5cb5008b6946e4c6c4f1f6b654aa18c6d37803f6d1dad",
        "md5": "ef8ac67e4a5ae212d8d407d9ca19f3bc",
        "sha256": "169ef2d251374139049c646b22067d76b3a700e19bab5f4181c3b7ba3771bc12"
      },
      "downloads": -1,
      "filename": "django_ultracache-1.9.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "ef8ac67e4a5ae212d8d407d9ca19f3bc",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "requires_python": null,
      "size": 38557,
      "upload_time": "2016-08-23T16:04:32",
      "upload_time_iso_8601": "2016-08-23T16:04:32.759884Z",
      "url": "https://files.pythonhosted.org/packages/7d/3f/b885ca38623461a5cb5008b6946e4c6c4f1f6b654aa18c6d37803f6d1dad/django_ultracache-1.9.1-py2.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ee88965e80aa0835bdc48786cdd2c35a9929f462315de7e08c5d09aea5b806d",
        "md5": "18cc0b7b92a9783c40107295e72130d3",
        "sha256": "852696c775e4527cfabe29e850ca202d00ff00703a2ab5c8e2cfa15ffc5df4c2"
      },
      "downloads": -1,
      "filename": "django-ultracache-1.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "18cc0b7b92a9783c40107295e72130d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20708,
      "upload_time": "2016-08-23T16:04:28",
      "upload_time_iso_8601": "2016-08-23T16:04:28.511173Z",
      "url": "https://files.pythonhosted.org/packages/2e/e8/8965e80aa0835bdc48786cdd2c35a9929f462315de7e08c5d09aea5b806d/django-ultracache-1.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}