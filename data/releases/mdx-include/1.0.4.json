{
  "info": {
    "author": "Md. Jahidul Hamid",
    "author_email": "jahidulhamid@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "\nInclude extension for Python Markdown. It lets you include local or remote (downloadable) files into your markdown at your desired places. \n\nThis project is motivated by [markdown-include](https://github.com/cmacmackin/markdown-include) and provides the same functionalities with some extras.\n\nInclusion for local file is by default recursive and for remote file non-recursive. You can change this behavior through configuration. \n\n**You should not use markdown-include along with this extension, choose either one, not both.**\n\n# Syntax\n\nGeneral syntax: `{!recurs_state file_path_or_url | encoding !}`\n\n**The spaces are not necessary. They are just to make it look nice :) . No spaces allowd between `{!` and recurs_state**\n\n**Examples:**\n\n1. **Simple:** `{! file_path_or_url !}`\n2. **With explicit encoding:** `{! file_path_or_url | encoding !}`\n3. **With recurs_state on:** `{!+ file_path_or_url !}` or `{!+ file_path_or_url | encoding !}`. This makes the included file to be able to include other files. This is meaningful only when recursion is set to `None`. If it is set to `False`, this explicit recurs_state defintion can not force recursion. This is a depth 1 recursion, so you can choose which one to recurs and which one to not.\n4. **With recurs_state off:** `{!- file_path_or_url !}` or `{!- file_path_or_url | encoding !}`. This will force not to recurs even when recursion is set to `True`.\n\n**You can escape it to get the literal. For example, `\\{! file_path_or_url !}` will give you literal `{! file_path_or_url !}` and `\\\\\\{! file_path_or_url !}` will give you `\\{! file_path_or_url !}`**\n\n## You can change the syntax!!!\n\nIf you don't like the syntax you can change it through configuration.\n\nThere might be some complications with the syntax `{!file!}`, for example, conflict with `markdown.extensions.attr_list` which uses `{:?something}`. As the `:` is optional, a typical problem that occurs is this one:\n\n```md\nA paragraph\n{!our syntax!}\n```\nwould produce:\n\n```html\n<p syntax_=\"syntax!\" _our=\"!our\">A paragraph</p>\n```\n\nIf you really want to avoid this type of collision, find some character sequence that is not being used by any extension that you are using and use those character sequences to make up the syntax.\n\n[See the configuration section for details](#configuration)\n\n\n# Install\n\nInstall from Pypi:\n\n```bash\npip install mdx_include\n```\n\n# Usage\n\n```python\ntext = r\"\"\"\nsome text {! some_file !} some more text {! some_more_file | utf-8 !}\n\nEscaping will give you the exact literal \\{! some_file !}\n\nIf you escape, then the backslash will be removed.\n\nIf you want the backslash too, then provide two more: \\\\\\{! some_file !}\n\"\"\"\nmd = markdown.Markdown(extensions=['mdx_include'])\nhtml = md.convert(text)\nprint(html)\n```\n\n# Configuration\n\nConfig param | Default | Details\n------------ | ------- | -------\n`base_path` | `.` | The base path from which relative paths are normalized.\n`encoding` | `utf-8` | The file encoding.\n`allow_local` | `True` | Whether to allow including local files.\n`allow_remote` | `True` | Whether to allow including remote files.\n`truncate_on_failure` | `True` | Whether to truncate the matched include syntax on failure. False value for both allow_local and allow_remote is treated as a failure.\n`recurs_local` | `True` | Whether the inclusions are recursive on local files. Options are: `True`, `False` and `None`. `None` is a neutral value with negative default and overridable with recurs_state (e.g `{!+file!}`). `False` will permanently prevent recursion i.e you won't be able to override it with the recurs_state. `True` value is overridable with recurs_state (e.g `{!-file!}`).\n`recurs_remote` | `False` | Whether the inclusions are recursive on remote files. Options are: `True`, `False` and `None`. `None` is a neutral value with negative default and overridable with recurs_state (e.g `{!+file!}`). `False` will permanently prevent recursion i.e you won't be able to override it with the recurs_state. `True` value is overridable with recurs_state (e.g `{!-file!}`).\n`syntax_left` | `\\{!` | The left boundary of the syntax. (Used in regex, thus escaped `{`)\n`syntax_right` | `!\\}` | The right boundary of the syntax. (Used in regex, thus escaped `}`)\n`syntax_delim` | `\\\\|` | The delimiter that separates encoding from path_or_url. (Used in regex, thus escaped `\\|`)\n`syntax_recurs_on` | `+` | The character to specify recurs_state on. (Used in regex)\n`syntax_recurs_off` | `-` | The character to specify recurs_state off. (Used in regex)\n\n## Example with configuration\n\n```python\nconfigs = {\n            'mdx_include': {\n                'base_path': 'mdx_include/test/',\n                'encoding': 'utf-8',\n                'allow_local': True,\n                'allow_remote': True,\n                'truncate_on_failure': False,\n                'recurs_local': None,\n                'recurs_remote': False,\n                'syntax_left': r'\\{!',\n                'syntax_right': r'!\\}',\n                'syntax_delim': r'\\|',\n                'syntax_recurs_on': '+',\n                'syntax_recurs_off': '-',\n            },\n        }\n\ntext = r\"\"\"\nsome text {! some_file !} some more text {! some_more_file | utf-8 !}\n\nEscaping will give you the exact literal \\{! some_file !}\n\nIf you escape, then the backslash will be removed.\n\nIf you want the backslash too, then provide two more: \\\\\\{! some_file !}\n\"\"\"\nmd = markdown.Markdown(extensions=['mdx_include'], extension_configs=configs)\nhtml = md.convert(text)\nprint(html)\n```\n\n# Examples\n\nThe following markdown:\n\n\n    Including a gist:\n\n    ```python\n    {! https://gist.github.com/drgarcia1986/3cce1d134c3c3eeb01bd/raw/73951574d6b62a18b4c342235006ff89d299f879/django_hello.py !}\n    ```\n\n    Writing the syntax literally: \\{! file_path !}\n\n    You just escape it with a backslash.\n\n    \\\\\\{! file_path !} -> this one will show the backslash before the syntax in HTML\n\n\nwill produce (with fenced code block enabled):\n\n```html\n<p>Including a gist:</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Settings\nfrom django.conf import settings\n\n\nsettings.configure(\n    DEBUG=True,\n    SECRET_KEY='secretfoobar',\n    ROOT_URLCONF=__name__,\n    MIDDLEWARE_CLASSES=(\n        'django.middleware.common.CommonMiddleware',\n        'django.middleware.csrf.CsrfViewMiddleware',\n        'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    )\n)\n\n\n# Views\nfrom django.http import HttpResponse\nfrom django.conf.urls import url\n\n\ndef index(request):\n    return HttpResponse('&lt;h1&gt;Hello Word&lt;/h1&gt;')\n\n# Routes\nurlpatterns = (\n    url(r'^$', index),\n)\n\n\n# RunServer\nif __name__ == '__main__':\n    from django.core.management import execute_from_command_line\n    import sys\n\n    execute_from_command_line(sys.argv)\n\n</code></pre>\n\n<p>Writing the syntax literally: {! file_path !}</p>\n<p>You just escape it with a backslash.</p>\n<p>\\{! file_path !} -&gt; this one will show the backslash before the syntax in HTML</p>\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/neurobin/mdx_include",
    "keywords": "markdown include local remote file",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdx-include",
    "package_url": "https://pypi.org/project/mdx-include/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdx-include/",
    "project_urls": {
      "Homepage": "https://github.com/neurobin/mdx_include"
    },
    "release_url": "https://pypi.org/project/mdx-include/1.0.4/",
    "requires_dist": [
      "Markdown (>=2.6)"
    ],
    "requires_python": "",
    "summary": "Python Markdown extension to include local or remote files",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14549302,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "241f43fc85e76637156a0525f90b902f1a7459e2820dfe9b30d04906d0395848",
        "md5": "bf2591e1e560e2e5c9919c1ffe6cc979",
        "sha256": "6c1818ca2b8a483d619f1891b5db475259691f02db7706a62d87584f31f079fb"
      },
      "downloads": -1,
      "filename": "mdx_include-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bf2591e1e560e2e5c9919c1ffe6cc979",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7061,
      "upload_time": "2018-09-20T20:52:26",
      "upload_time_iso_8601": "2018-09-20T20:52:26.688832Z",
      "url": "https://files.pythonhosted.org/packages/24/1f/43fc85e76637156a0525f90b902f1a7459e2820dfe9b30d04906d0395848/mdx_include-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c49a216bf9e7ed7e70d2e25d440be9c29a13adaa72132d3b622491a22e57f274",
        "md5": "2e046b71af22162d3a32d8c1ee5b403f",
        "sha256": "1736595bbf0223b4695e53d28883f2b4004456fcf7b952c360811bcf5aaf7454"
      },
      "downloads": -1,
      "filename": "mdx_include-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2e046b71af22162d3a32d8c1ee5b403f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7588,
      "upload_time": "2018-09-20T20:52:28",
      "upload_time_iso_8601": "2018-09-20T20:52:28.676067Z",
      "url": "https://files.pythonhosted.org/packages/c4/9a/216bf9e7ed7e70d2e25d440be9c29a13adaa72132d3b622491a22e57f274/mdx_include-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}