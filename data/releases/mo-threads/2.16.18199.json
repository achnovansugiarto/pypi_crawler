{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "More Threads!\n=============\n\nModule ``threads``\n------------------\n\nThe main benefits over Python's threading library is:\n\n1. **Multi-threaded queues do not use serialization** - Serialization is\n   great in the general case, where you may also be communicating\n   between processes, but it is a needless overhead for single-process\n   multi-threading. It is left to the programmer to ensure the messages\n   put on the queue are not changed, which is not ominous demand.\n2. **Shutdown order is deterministic and explicit** - Python's threading\n   library is missing strict conventions for controlled and orderly\n   shutdown. These conventions eliminate the need for ``interrupt()``\n   and ``abort()``, both of which are unstable idioms when using\n   resources. Each thread can shutdown on its own terms, but is expected\n   to do so expediently.\n\n-  All threads are required to accept a ``please_stop`` signal; are\n   expected to test it in a timely manner; and expected to exit when\n   signalled.\n-  All threads have a parent - The parent is responsible for ensuring\n   their children get the ``please_stop`` signal, and are dead, before\n   stopping themselves. This responsibility is baked into the thread\n   spawning process, so you need not deal with it unless you want.\n\n3. Uses `**Signals** <#the-signal-and-till-classes>`__ to simplify\n   logical dependencies among multiple threads, events, and timeouts.\n4. **Logging and Profiling is Integrated** - Logging and exception\n   handling is seamlessly integrated: This means logs are centrally\n   handled, and thread safe. Parent threads have access to uncaught\n   child thread exceptions, and the cProfiler properly aggregates\n   results from the multiple threads.\n\nWhat's it used for\n~~~~~~~~~~~~~~~~~~\n\nA good amount of time is spent waiting for underlying C libraries and OS\nservices to respond to network and file access requests. Multiple\nthreads can make your code faster, despite the GIL, when dealing with\nthose requests. For example, by moving logging off the main thread, we\ncan get up to 15% increase in overall speed because we no longer have\nthe main thread waiting for disk writes or remote logging posts. Please\nnote, this level of speed improvement can only be realized if there is\nno serialization happening at the multi-threaded queue.\n\nAsynch vs. Actors\n~~~~~~~~~~~~~~~~~\n\nMy personal belief is that\n`actors <http://en.wikipedia.org/wiki/Actor_model>`__ are easier to\nreason about than `asynch\ntasks <https://docs.python.org/3/library/asyncio-task.html>`__. Mixing\nregular methods and co-routines (with their ``yield from`` pollution) is\ndangerous because:\n\n1. calling styles between methods and co-routines can be easily confused\n2. actors can use blocking methods, co-routines can not\n3. there is no way to manage resource priority with co-routines.\n4. stack traces are lost with co-routines\n5. asynch scope easily escapes lexical scope, which promotes bugs\n\nPython's asynch efforts are a still-immature re-invention of threading\nfunctionality by another name. Expect to experience a decade of problems\nthat are already solved by threading; `here is an\nexample <https://www.python.org/dev/peps/pep-0550/>`__\n\nSynchronization Primitives\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are three major aspects of a synchronization primitive:\n\n-  **Resource** - Monitors and locks can only be owned by one thread at\n   a time\n-  **Binary** - The primitive has only two states\n-  **Irreversible** - The state of the primitive can only be set, or\n   advanced, never reversed\n\nThe last, *irreversibility* is very useful, but ignored in many\nthreading libraries. The irreversibility allows us to model progression;\nand we can allow threads to poll for progress, or be notified of\nprogress.\n\nThese three aspects can be combined to give us 8 synchronization\nprimitives:\n\n-  ``- - -`` - Semaphore\n-  ``- B -`` - Binary Semaphore\n-  ``R - -`` - Monitor\n-  ``R B -`` - **Lock**\n-  ``- - I`` - Iterator/generator\n-  ``- B I`` - **Signal**\n-  ``R - I`` - Private Iterator\n-  ``R B I`` - Private Signal (best implemented as ``is_done`` Boolean\n   flag)\n\n``Lock`` Class\n--------------\n\nLocks are identical to `threading\nmonitors <https://en.wikipedia.org/wiki/Monitor_(synchronization)>`__,\nexcept for two differences:\n\n1. The ``wait()`` method will **always acquire the lock before\n   returning**. This is an important feature, it ensures every line\n   inside a ``with`` block has lock acquisition is easier to reason\n   about.\n2. Exiting a lock via ``__exit__()`` will **always** signal a waiting\n   thread resume. This ensures no signals are missed, and every thread\n   gets an opportunity to react to possible change.\n\n.. code:: python\n\n        lock = Lo\n        while not please_stop:\n            with lock:\n                while not todo:\n                    lock.wait(seconds=1)\n                # DO SOME WORK\n\nIn this example, we look for stuff ``todo``, and if there is none, we\nwait for a second. During that time others can acquire the ``lock`` and\nadd ``todo`` items. Upon releasing the the ``lock``, our example code\nwill immediately resume to see what's available, waiting again if\nnothing is found.\n\n``Signal`` and ``Till`` Classes\n-------------------------------\n\n`The ``Signal`` class <mo_threads/signal.py>`__ is like a binary\nsemaphore that can be signalled only once; it can be signalled by any\nthread; subsequent signals have no effect. Any thread can wait on a\n``Signal``; and once signalled, all waiting threads are unblocked,\nincluding all subsequent waiting threads. A Signal's current state can\nbe accessed by any thread without blocking. ``Signal`` is used to model\nthread-safe state advancement. It initializes to ``False``, and when\nsignalled (with ``go()``) becomes ``True``. It can not be reversed.\n\n.. code:: python\n\n    is_done = Signal()\n    yield is_done  # give signal to another that wants to know when done\n    # DO WORK\n    is_done.go()\n\nYou can attach methods to a ``Signal``, which will be run, just once,\nupon ``go()``. If already signalled, then the method is run immediately.\n\n.. code:: python\n\n    is_done = Signal()\n    is_done.on_go(lambda: print(\"done\"))\n    return is_done\n\nYou may also wait on a ``Signal``, which will block the current thread\nuntil the ``Signal`` is a go\n\n.. code:: python\n\n    is_done = worker_thread.stopped\n    is_done.wait()\n    is_done = print(\"worker thread is done\")\n\n``Signals`` are first class, they can be passed around and combined with\nother Signals. For example, using the ``__or__`` operator (``|``):\n``either = lhs | rhs``; ``either`` will be triggered when ``lhs`` or\n``rhs`` is triggered.\n\n.. code:: python\n\n    def worker(please_stop):\n        while not please_stop:\n            #DO WORK \n\n    user_cancel = get_user_cancel_signal()\n    worker(user_cancel | Till(seconds=360))\n\n``Signal``\\ s can also be combined using logical and (``&``):\n``both = lhs & rhs``; ``both`` is triggered only when both ``lhs`` and\n``rhs`` are triggered:\n\n.. code:: python\n\n    (workerA.stopped & workerB.stopped).wait()\n    print(\"both threads are done\")\n\n``Till`` Class\n--------------\n\n`The ``Till``\nclass <https://github.com/klahnakoski/pyLibrary/blob/dev/pyLibrary/thread/till.py>`__\nis used to represent timeouts. They can serve as a ``sleep()``\nreplacement:\n\n.. code:: python\n\n    Till(seconds=20).wait()\n    Till(till=Date(\"21 Jan 2016\").unix).wait()\n\nActually, ``Till`` is better than ``sleep()`` because you can combine\nthem with other ``Signals``.\n\nBeware that all ``Till`` objects will be triggered before expiry when\nthe main thread is asked to shutdown",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-threads",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-threads",
    "package_url": "https://pypi.org/project/mo-threads/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-threads/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-threads"
    },
    "release_url": "https://pypi.org/project/mo-threads/2.16.18199/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More Threads! Simpler and faster threading.",
    "version": "2.16.18199",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547968,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61b50f57c418c5fe241beddb149b8a9d724b518b1a5cb474e6d85dac4c9e9850",
        "md5": "3eca3d73639cfefbe9e064bc13776c9f",
        "sha256": "aa1bf982a49fcfe1afb308d6a277c287bf951b47ea3e418638c6076079143347"
      },
      "downloads": -1,
      "filename": "mo-threads-2.16.18199.tar.gz",
      "has_sig": false,
      "md5_digest": "3eca3d73639cfefbe9e064bc13776c9f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23013,
      "upload_time": "2018-07-18T12:17:15",
      "upload_time_iso_8601": "2018-07-18T12:17:15.854554Z",
      "url": "https://files.pythonhosted.org/packages/61/b5/0f57c418c5fe241beddb149b8a9d724b518b1a5cb474e6d85dac4c9e9850/mo-threads-2.16.18199.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}