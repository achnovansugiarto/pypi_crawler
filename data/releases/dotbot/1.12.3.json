{
  "info": {
    "author": "Anish Athalye",
    "author_email": "me@anishathalye.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "Dotbot\n======\n\nDotbot makes installing your dotfiles as easy as `git clone $url && cd dotfiles\n&& ./install`, even on a freshly installed system!\n\n---\n\n[![Build Status](https://travis-ci.org/anishathalye/dotbot.svg?branch=master)](https://travis-ci.org/anishathalye/dotbot)\n\nDotbot is a tool that bootstraps your dotfiles (it's a [Dot]files\n[bo]o[t]strapper, get it?). It does *less* than you think, because version\ncontrol systems do more than you think.\n\nDotbot is designed to be lightweight and self-contained, with no external\ndependencies and no installation required. Dotbot can also be a drop-in\nreplacement for any other tool you were using to manage your dotfiles, and\nDotbot is VCS-agnostic -- it doesn't make any attempt to manage your dotfiles.\n\nIf you want an in-depth tutorial about organizing your dotfiles, see this [blog\npost][managing-dotfiles-post].\n\nGet Running in 5 Minutes\n------------------------\n\n### Starting Fresh?\n\nGreat! You can automate the creation of your dotfiles by using the\nuser-contributed [init-dotfiles][init-dotfiles] script. If you'd rather use a\ntemplate repository, check out [dotfiles_template][dotfiles-template]. Or, if\nyou're just looking for [some inspiration][inspiration], we've got you covered.\n\n### Integrate with Existing Dotfiles\n\nThe following will help you get set up using Dotbot in just a few steps.\n\nIf you're using Git, you can add Dotbot as a submodule:\n\n```bash\ncd ~/.dotfiles # replace with the path to your dotfiles\ngit init # initialize repository if needed\ngit submodule add https://github.com/anishathalye/dotbot\ncp dotbot/tools/git-submodule/install .\ntouch install.conf.yaml\n```\n\nIf you're using Mercurial, you can add Dotbot as a subrepo:\n\n```bash\ncd ~/.dotfiles # replace with the path to your dotfiles\nhg init # initialize repository if needed\necho \"dotbot = [git]https://github.com/anishathalye/dotbot\" > .hgsub\nhg add .hgsub\ngit clone https://github.com/anishathalye/dotbot\ncp dotbot/tools/hg-subrepo/install .\ntouch install.conf.yaml\n```\n\nTo get started, you just need to fill in the `install.conf.yaml` and Dotbot\nwill take care of the rest. To help you get started we have [an\nexample](#full-example) config file as well as [configuration\ndocumentation](#configuration) for the accepted parameters.\n\nNote: The `install` script is merely a shim that checks out the appropriate\nversion of Dotbot and calls the full Dotbot installer. By default, the script\nassumes that the configuration is located in `install.conf.yaml` the Dotbot\nsubmodule is located in `dotbot`. You can change either of these parameters by\nediting the variables in the `install` script appropriately.\n\nSetting up Dotbot as a submodule or subrepo locks it on the current version.\nYou can upgrade Dotbot at any point. If using a submodule, run `git submodule\nupdate --remote dotbot`, substituting `dotbot` with the path to the Dotbot\nsubmodule; be sure to commit your changes before running `./install`, otherwise\nthe old version of Dotbot will be checked out by the install script. If using a\nsubrepo, run `git fetch && git checkout origin/master` in the Dotbot directory.\n\nIf you prefer, you can install Dotbot from [PyPI] and call it as a command-line\nprogram:\n\n```bash\npip install dotbot\ntouch install.conf.yaml\n```\n\nIn this case, rather than running `./install`, you can invoke Dotbot with\n`dotbot -c <path to configuration file>`.\n\n### Full Example\n\nHere's an example of a complete configuration.\n\nThe conventional name for the configuration file is `install.conf.yaml`.\n\n```yaml\n- defaults:\n    link:\n      relink: true\n\n- clean: ['~']\n\n- link:\n    ~/.dotfiles: ''\n    ~/.tmux.conf: tmux.conf\n    ~/.vim: vim\n    ~/.vimrc: vimrc\n\n- shell:\n  - [git submodule update --init --recursive, Installing submodules]\n```\n\nThe configuration file can also be written in JSON. Here is the JSON equivalent\nof the YAML configuration given above.\n\nThe conventional name for this file is `install.conf.json`.\n\n```json\n[\n    {\n        \"defaults\": {\n            \"link\": {\n                \"relink\": true\n            }\n        }\n    },\n    {\n        \"clean\": [\"~\"]\n    },\n    {\n        \"link\": {\n            \"~/.dotfiles\": \"\",\n            \"~/.tmux.conf\": \"tmux.conf\",\n            \"~/.vim\": \"vim\",\n            \"~/.vimrc\": \"vimrc\"\n        }\n    },\n    {\n        \"shell\": [\n            [\"git submodule update --init --recursive\", \"Installing submodules\"]\n        ]\n    }\n]\n```\n\nConfiguration\n-------------\n\nDotbot uses YAML or JSON formatted configuration files to let you specify how\nto set up your dotfiles. Currently, Dotbot knows how to [link](#link) files and\nfolders, execute [shell](#shell) commands, and [clean](#clean) directories of\nbroken symbolic links. Dotbot also supports user [plugins](#plugins) for custom\ncommands.\n\n**Ideally, bootstrap configurations should be idempotent. That is, the\ninstaller should be able to be run multiple times without causing any\nproblems.** This makes a lot of things easier to do (in particular, syncing\nupdates between machines becomes really easy).\n\nDotbot configuration files are arrays of tasks, where each task\nis a dictionary that contains a command name mapping to data for that command.\nTasks are run in the order in which they are specified. Commands within a task\ndo not have a defined ordering.\n\nWhen writing nested constructs, keep in mind that YAML is whitespace-sensitive.\nFollowing the formatting used in the examples is a good idea.\n\nAlso, note that `~` in YAML is the same as `null` in JSON. If you want a single\ncharacter string containing a tilde, make sure to enclose it in quotes: `'~'`\n\n### Link\n\nLink commands specify how files and directories should be symbolically linked.\nIf desired, items can be specified to be forcibly linked, overwriting existing\nfiles if necessary. Environment variables in paths are automatically expanded.\n\n#### Format\n\nLink commands are specified as a dictionary mapping targets to source\nlocations. Source locations are specified relative to the base directory (that\nis specified when running the installer). If linking directories, *do not* include a trailing slash.\n\nLink commands support an (optional) extended configuration. In this type of\nconfiguration, instead of specifying source locations directly, targets are\nmapped to extended configuration dictionaries.\n\nAvailable extended configuration parameters:\n\n| Link Option | Explanation |\n| -- | -- |\n| `path` | The target for the symlink, the same as in the shortcut syntax (default:null, automatic (see below)) |\n| `create` | When true, create parent directories to the link as needed. (default:false) |\n| `relink` | Removes the old target if it's a symlink (default:false) |\n| `force` | Force removes the old target, file or folder, and forces a new link (default:false) |\n| `relative` | Use a relative path when creating the symlink (default:false, absolute links) |\n| `glob` | Treat a `*` character as a wildcard, and perform link operations on all of those matches (default:false) |\n\n#### Example\n\n```yaml\n- link:\n    ~/.config/terminator:\n      create: true\n      path: config/terminator\n    ~/.vim: vim\n    ~/.vimrc:\n      relink: true\n      path: vimrc\n    ~/.zshrc:\n      force: true\n      path: zshrc\n```\n\nIf the source location is omitted or set to `null`, Dotbot will use the\nbasename of the destination, with a leading `.` stripped if present. This makes\nthe following three config files equivalent:\n\n```yaml\n- link:\n    ~/bin/ack: ack\n    ~/.vim: vim\n    ~/.vimrc:\n      relink: true\n      path: vimrc\n    ~/.zshrc:\n      force: true\n      path: zshrc\n    ~/.config/:\n      glob: true\n      path: config/*\n      relink: true\n```\n\n```yaml\n- link:\n    ~/bin/ack:\n    ~/.vim:\n    ~/.vimrc:\n      relink: true\n    ~/.zshrc:\n      force: true\n    ~/.config/:\n      glob: true\n      path: config/*\n      relink: true\n```\n\n```json\n[\n  {\n    \"link\": {\n      \"~/bin/ack\": null,\n      \"~/.vim\": null,\n      \"~/.vimrc\": {\n        \"relink\": true\n      },\n      \"~/.zshrc\": {\n        \"force\": true\n      },\n      \"~/.config/\": {\n        \"glob\": true,\n        \"path\": \"config/*\",\n        \"relink\": true\n      }\n    }\n  }\n]\n```\n\n### Shell\n\nShell commands specify shell commands to be run. Shell commands are run in the\nbase directory (that is specified when running the installer).\n\n#### Format\n\nShell commands can be specified in several different ways. The simplest way is\njust to specify a command as a string containing the command to be run.\n\nAnother way is to specify a two element array where the first element is the\nshell command and the second is an optional human-readable description.\n\nShell commands support an extended syntax as well, which provides more\nfine-grained control. A command can be specified as a dictionary that contains\nthe command to be run, a description, and whether `stdin`, `stdout`, and\n`stderr` are enabled. In this syntax, all keys are optional except for the\ncommand itself.\n\n#### Example\n\n```yaml\n- shell:\n  - mkdir -p ~/src\n  - [mkdir -p ~/downloads, Creating downloads directory]\n  -\n    command: read var && echo Your variable is $var\n    stdin: true\n    stdout: true\n    description: Reading and printing variable\n  -\n    command: read fail\n    stderr: true\n```\n\n### Clean\n\nClean commands specify directories that should be checked for dead symbolic\nlinks. These dead links are removed automatically. Only dead links that point\nto the dotfiles directory are removed unless the `force` option is set to\n`true`.\n\n#### Format\n\nClean commands are specified as an array of directories to be cleaned.\n\nClean commands support an extended configuration syntax. In this type of\nconfiguration, commands are specified as directory paths mapping to options. If\nthe `force` option is set to `true`, dead links are removed even if they don't\npoint to a file inside the dotfiles directory.\n\n#### Example\n\n```yaml\n- clean: ['~']\n\n- clean:\n    ~/.config:\n      force: true\n```\n\n### Defaults\n\nDefault options for plugins can be specified so that options don't have to be\nrepeated many times. This can be very useful to use with the link command, for\nexample.\n\nDefaults apply to all commands that follow setting the defaults. Defaults can\nbe set multiple times; each change replaces the defaults with a new set of\noptions.\n\n#### Format\n\nDefaults are specified as a dictionary mapping action names to settings, which\nare dictionaries from option names to values.\n\n#### Example\n\n```yaml\n- defaults:\n    link:\n      create: true\n      relink: true\n```\n\n### Plugins\n\nDotbot also supports custom directives implemented by plugins. Plugins are\nimplemented as subclasses of `dotbot.Plugin`, so they must implement\n`can_handle()` and `handle()`. The `can_handle()` method should return `True`\nif the plugin can handle an action with the given name. The `handle()` method\nshould do something and return whether or not it completed successfully.\n\nAll built-in Dotbot directives are written as plugins that are loaded by\ndefault, so those can be used as a reference when writing custom plugins.\n\nPlugins are loaded using the `--plugin` and `--plugin-dir` options, using\neither absolute paths or paths relative to the base directory. It is\nrecommended that these options are added directly to the `install` script.\n\nWiki\n----\n\nCheck out the [Dotbot wiki][wiki] for more information, tips and tricks,\nuser-contributed plugins, and more.\n\nContributing\n------------\n\nDo you have a feature request, bug report, or patch? Great! See\n[CONTRIBUTING.md][contributing] for information on what you can do about that.\n\nPackaging\n---------\n\n1. Update version information.\n\n2. Build the package using ``python setup.py sdist bdist_wheel``.\n\n3. Sign and upload the package using ``twine upload -s dist/*``.\n\nLicense\n-------\n\nCopyright (c) 2014-2018 Anish Athalye. Released under the MIT License. See\n[LICENSE.md][license] for details.\n\n[PyPI]: https://pypi.org/project/dotbot/\n[init-dotfiles]: https://github.com/Vaelatern/init-dotfiles\n[dotfiles-template]: https://github.com/anishathalye/dotfiles_template\n[inspiration]: https://github.com/anishathalye/dotbot/wiki/Users\n[managing-dotfiles-post]: http://www.anishathalye.com/2014/08/03/managing-your-dotfiles/\n[wiki]: https://github.com/anishathalye/dotbot/wiki\n[contributing]: CONTRIBUTING.md\n[license]: LICENSE.md\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anishathalye/dotbot",
    "keywords": "dotfiles",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dotbot",
    "package_url": "https://pypi.org/project/dotbot/",
    "platform": "",
    "project_url": "https://pypi.org/project/dotbot/",
    "project_urls": {
      "Homepage": "https://github.com/anishathalye/dotbot"
    },
    "release_url": "https://pypi.org/project/dotbot/1.12.3/",
    "requires_dist": [
      "PyYAML (<4,>=3.12)"
    ],
    "requires_python": "",
    "summary": "A tool that bootstraps your dotfiles",
    "version": "1.12.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16136286,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "653308412f23fc9164bc2db31baca407067053911a824e1e9cc64b53ec0c2006",
        "md5": "d5941558fa241cdd71c69177da40c1d2",
        "sha256": "b055ab60534f779670787ca567c4f504de6f2c067cfd6516cfc98959aceb1d35"
      },
      "downloads": -1,
      "filename": "dotbot-1.12.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "d5941558fa241cdd71c69177da40c1d2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12356,
      "upload_time": "2018-06-03T19:55:24",
      "upload_time_iso_8601": "2018-06-03T19:55:24.987290Z",
      "url": "https://files.pythonhosted.org/packages/65/33/08412f23fc9164bc2db31baca407067053911a824e1e9cc64b53ec0c2006/dotbot-1.12.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bcc2653a28c9e973aa417691a02d4fa2190f5cc3ba88ffa4468f5f3161df628",
        "md5": "af435a24894592c1144822ff554d696f",
        "sha256": "92f2b80a35376ce71635bde865e591175c83367426bc59407d41f7e8ab27b973"
      },
      "downloads": -1,
      "filename": "dotbot-1.12.3.tar.gz",
      "has_sig": true,
      "md5_digest": "af435a24894592c1144822ff554d696f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15508,
      "upload_time": "2018-06-03T19:55:27",
      "upload_time_iso_8601": "2018-06-03T19:55:27.367032Z",
      "url": "https://files.pythonhosted.org/packages/4b/cc/2653a28c9e973aa417691a02d4fa2190f5cc3ba88ffa4468f5f3161df628/dotbot-1.12.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}