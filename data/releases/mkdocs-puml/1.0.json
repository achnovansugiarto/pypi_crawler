{
  "info": {
    "author": null,
    "author_email": "Mikhail Kravets <michkravets@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "![logo](.docs/logo.png)\n\n[![PyPI version](https://badge.fury.io/py/mkdocs_puml.svg)](https://badge.fury.io/py/mkdocs_puml)\n\n`mkdocs_puml` is a fast and simple package that brings plantuml diagrams into mkdocs\ndocumentation.\n\n## Install\n\nRun the following command to install this package\n\n```shell\npip install mkdocs_puml\n```\n\n## How to use\n\nTo use puml with mkdocs, just add `plantuml` plugin into\n`plugins` block of your `mkdocs.yml` file.\n\n`plantuml` plugin uses `PlantUML` only as http service. So, you should necessarily\nspecify `puml_url` config.\n\n```yaml\nplugins:\n    - plantuml:\n        puml_url: https://www.plantuml.com/plantuml/\n        num_workers: 8\n```\n\nWhere\n* `puml_url` is URL to the plantuml service.\n* `num_workers` is max amount of concurrent workers that requests plantuml service.\n\nNow, you can put your puml diagrams into your `.md` documentation. For example,\n\n<pre>\n## PUML Diagram\n\n```puml\n@startuml\nBob -> Alice : hello\n@enduml\n```\n</pre>\n\nAt the build phase `mkdocs` will send request to `puml_url` and substitute your\ndiagram with the `svg` images from the responses.\n\n### Run PlantUML service with Docker\n\nIt is possible to run [plantuml/plantuml-server](https://hub.docker.com/r/plantuml/plantuml-server)\nas a Docker container.\n\nAdd a new service to the `docker-compose.yml` file\n\n```yaml\nversion: \"3\"\nservices:\n  puml:\n    image: plantuml/plantuml-server\n    ports:\n      - '8080:8080'\n```\n\nThen substitute `puml_url` setting with the local's one in the `mkdocs.yml` file\n\n```yaml\nplugins:\n    - plantuml:\n        puml_url: http://127.0.0.1:8080\n        num_workers: 8\n```\n\nObviously, this approach works faster than\nusing [plantuml.com](https://www.plantuml.com/plantuml/).\n\n### Standalone usage\n\nYou can use `PlantUML` converter on your own without `mkdocs`.\nThe example below shows it.\n\n```python\nfrom mkdocs_puml.puml import PlantUML\n\npuml_url = \"https://www.plantuml.com/plantuml\"\n\ndiagram1 = \"\"\"\n@startuml\nBob -> Alice : hello\n@enduml\n\"\"\"\n\ndiagram2 = \"\"\"\n@startuml\nJon -> Sansa : hello\n@enduml\n\"\"\"\n\npuml = PlantUML(puml_url, num_worker=2)\nsvg_for_diag1, svg_for_diag2 = puml.translate([diagram1, diagram2])\n```\n\n## How it works\n\nThe package uses PlantUML as an HTTP service. It sends GET requests to\nthe PlantUML service and receives `svg` images representing the diagrams.\n\nThe `plantuml` plugin parses `.md` documentation files and looks for\n\n<pre>\n```puml\n\n```\n</pre>\n\ncode blocks. When `puml` code block is found it is saved to the buffer for\na later request of PlantUML service. In this step, we replace `puml` block\nwith the uuid in markdown file.\n\n**NOTE** you must set `puml` keyword as an indicator that the plant uml\nis located in the block.\n\nAfter all pages are parsed, `plantuml` plugin requests PlantUML service\nwith the buffer of diagrams. After responses are received, the package\nsubstitutes uuid codes in markdown files with the `svg` images.\n\n## License\n\nThe project is licensed under [MIT license](LICENSE).\n\nDiagram icon created by [Freepik](https://www.flaticon.com/free-icon/flow-chart_4411911?related_id=4411911&origin=search).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "mkdocs_puml",
    "package_url": "https://pypi.org/project/mkdocs_puml/",
    "platform": null,
    "project_url": "https://pypi.org/project/mkdocs_puml/",
    "project_urls": {
      "Home": "https://github.com/MikhailKravets/mkdocs_puml"
    },
    "release_url": "https://pypi.org/project/mkdocs_puml/1.0/",
    "requires_dist": [
      "requests >= 2.27, < 3.0",
      "markdown >= 3.4, < 4.0",
      "mkdocs >= 1.3, < 2.0"
    ],
    "requires_python": ">=3.7",
    "summary": "Package that brings PlantUML into MkDocs",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17395972,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "9a8ce6f20eff3489f5aecacdad5b4aca0d4a6723e6ecd643e7a09e3c10512842",
        "md5": "01ac0df68bd35e5d0382243909c37b07",
        "sha256": "01cf0d00d6c9a45bab661b9ae6eca237e2ea144be22db96d3163ed10e2f47ff8"
      },
      "downloads": -1,
      "filename": "mkdocs_puml-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01ac0df68bd35e5d0382243909c37b07",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7399,
      "upload_time": "2022-11-13T12:19:40",
      "upload_time_iso_8601": "2022-11-13T12:19:40.065321Z",
      "url": "https://files.pythonhosted.org/packages/9a/8c/e6f20eff3489f5aecacdad5b4aca0d4a6723e6ecd643e7a09e3c10512842/mkdocs_puml-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "c8842b136a8317b65da2795f38cdfcb61dc840c0c2bc470c1f21cb6ba60c97b7",
        "md5": "cdb7cf68df1840837b50a24cfdb94ddd",
        "sha256": "1ce60d11b8a64abec51580a2363f0e7902090f1b37ce4541affed48dd52b4858"
      },
      "downloads": -1,
      "filename": "mkdocs_puml-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cdb7cf68df1840837b50a24cfdb94ddd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 52846,
      "upload_time": "2022-11-13T12:19:50",
      "upload_time_iso_8601": "2022-11-13T12:19:50.939594Z",
      "url": "https://files.pythonhosted.org/packages/c8/84/2b136a8317b65da2795f38cdfcb61dc840c0c2bc470c1f21cb6ba60c97b7/mkdocs_puml-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}