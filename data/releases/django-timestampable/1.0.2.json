{
  "info": {
    "author": "Daniel Pinto",
    "author_email": "dmp593@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# Django Timestamps\n\nTimestamps and Soft Delete Patterns in Django Models.\n\n\n## How to install\n\n````bash\n$ pip install django-timestampable\n````\n\n&nbsp;\n\n#### And add \"timestamps\" to your INSTALLED_APPS settings\n\n```python\nINSTALLED_APPS = [\n    # ...\n    'timestamps',\n]\n```\n\n## Usage\n\na) For models you want timestamps, just inherit Timestampable:\n\n```python\nfrom timestamps.models import models, Timestampable\n\n\nclass YourModel(Timestampable):\n    # your fields here ...\n\n```\n\nb) For models you want soft-delete, just inherit SoftDeletes:\n\n```python\nfrom timestamps.models import models, SoftDeletes\n\n\nclass YourModel(SoftDeletes):\n    # your fields here ...\n\n```\n\nc) If you want both, you can also inherit from Model for shorter convenience:\n\n```python\n# to this:\nfrom timestamps.models import models, Model  # explicit import Model (which contains timestamps)\n\n# instead of:\n# from django.db import models\n\n# Explicitly import of \"Model\" is required\n# because models.Model is the original from Django models module\n\n\nclass YourModel(Model):\n    # your fields here ...\n\n```\n\n\n### Soft Deleting\n\n- To get all objects without the deleted ones:\n\n```queryset = YourModel.objects```\n\n- To get only deleted objects:\n\n```queryset = YourModel.objects_deleted```\n\n- To get all the objects, including deleted ones:\n\n```queryset = YourModel.objects_with_deleted```\n\n\n#### To soft delete an instance\n\n```python\nsome_model = MyModel.objects.first()\nsome_model.delete()  # or some_model.delete(hard=False)\n```\n\n#### To restore an instance\n\n```python\nsome_model = MyModel.objects_deleted.first()\nsome_model.restore()\n```\n\n#### To hard delete an instance\n\n```python\nsome_model = MyModel.objects.first()\nsome_model.delete(hard=True)\n```\n\n#### To bulk soft delete a queryset\n\n```python\nqs = MyModel.objects  # you can also apply filters to bulk delete a subset: qs = MyModel.objects.filter(...)\nqs.delete()  # or qs.delete(hard=False)\n```\n\n#### To bulk hard delete a queryset\n\n```python\nqs = MyModel.objects  # ... bulk hard delete a subset: qs = MyModel.objects.filter(...)\nqs.delete(hard=True)\n```\n\n#### To bulk restore a queryset\n\n```python\nqs = MyModel.objects_deleted  # ... bulk restore a subset: qs = MyModel.objects_deleted.filter(...)\nqs.restore()  # or qs.delete(hard=False)\n```\n\n\n---\n\n\n### If you're using DRF\nyou can use the SoftDeleteModelViewSet along with DefaultRouter present in this package\nand you will have access to a complete CRUD on soft deleted objects as well.\nThis 2 classes allows you to expose:\n\nConsider a Dummy Model that inherits from SoftDelete.\n\nYou can have all routes for CRUD operations on this model:\n\n\n| VERB | URL PATH | DESCRIPTION |\n| ---- | -------- | ----------- |\n| GET | /dummy/ | gets all the objects, without the deleted ones |\n| POST | /dummy/ | creates a new object |\n| DELETE | /dummy/[?permanent=\\<true,false>] | deletes all objects (or a filtered subject). allows hard-delete. Default: soft-delete |\n| GET | /dummy/\\<pk\\>/ | gets a non-deleted object (by primary key) |\n| POST | /dummy/\\<pk\\>/ | updates an object (by primary key) |\n| PATCH | /dummy/\\<pk\\>/ | partial updates an object (by primary key) |\n| DELETE | /dummy/\\<pk\\>/[?permanent=\\<true,false>] | deletes a non-deleted object (by primary key) |\n| PATCH | /dummy/restore/ | restore all objects (or a filtered subject) |\n| PATCH | /dummy/\\<pk\\>/restore/ | restores a soft-deleted object (by primary key) |\n| GET | /dummy/deleted/ | gets all deleted objects |\n| GET | /dummy/deleted/\\<pk\\>/ | gets a deleted object (by primary key) |\n| GET | /dummy/with-deleted/ | get all objects, deleted included |\n| GET | /dummy/with-deleted/\\<pk\\>/ | get an object (by primary key) |\n-----------------------------------\n\nThe query parameter \"permanent\" it's case-sensitive and can also be one of the values:\n\n```python\ntruthful_options = [\n    't', 'T',\n    'y', 'Y', 'yes', 'Yes', 'YES',\n    'true', 'True', 'TRUE',\n    'on', 'On', 'ON',\n    '1', 1,\n    True\n]\n```\n\n```python\nfalsely_options = [\n    'f', 'F',\n    'n', 'N', 'no', 'No', 'NO',\n    'false', 'False', 'FALSE',\n    'off', 'Off', 'OFF',\n    '0', 0,\n    'null',\n    False\n]\n```\n\n#### How to expose all CRUD operations\n\n```python\n# dummy/views.py\nfrom timestamps.drf import viewsets  # instead of: from rest_framework import viewsets\nfrom .models import Dummy\nfrom .serializers import DummySerializer\n\n\nclass DummyModelViewSet(viewsets.ModelViewSet):\n    queryset = Dummy.objects.all()\n    serializer_class = DummySerializer\n\n```\n\n````python\n# dummy/urls.py\nfrom timestamps.drf import routers  # instead of: from rest_framework import routers\nfrom .views import DummyModelViewSet\n\n\nrouter = routers.DefaultRouter()\nrouter.register(r'dummy', DummyModelViewSet)\n\n\nurlpatterns = router.urls\n\n````\n\n#### Note A\nFor security reasons, by default, if you pass to the query parameter \"?permanent=true\" on a bulk destroy, \nthe view will not let you hard-delete, raising a PermissionDenied.\nIf you want to enable it on your project, just add to the project settings:\n\n```python\nTIMESTAMPS__BULK_HARD_DELETE = True\n```\n\nIt's here to prevent users of \"forgetting\" that the routes also expose bulk hard-delete by default.\nIn production, you can set this flag to True and manage hard-deleting using DRF permissions.\n\n*Hard-deleting one object at time is allowed by default.*\n\n\n&nbsp;\n\n\n#### NOTE B\nBulk actions of restoring and deleting returns no content (status code 204) by default.\nIf you want to return a response with the number of deleted/restored objects, just add this setting:\n\n```python\nTIMESTAMPS__BULK_RESPONSE_CONTENT = True\n```\n\nExample of returned response: ```{\"count\": 3 }```\n\n\n&nbsp;\n\n\n#### Note C\nIf you don't want to expose all the crud operations, be free to register as:\n\n```python\nrouter.register(r'dummy', DummyModelViewSet.as_view({'get': 'list_with_deleted'}))  # e.g.\n```\n\nAnd you can always use the mixins instead and create your APIViews:\n\n````python\nfrom rest_framework import generic\nfrom timestamps.drf.mixins import ListDeletedModelMixin\nfrom .models import Dummy\nfrom .serializers import DummySerializer\n\nclass MyView(ListDeletedModelMixin, generic.GenericAPIView):\n    queryset = Dummy.objects.all()\n    serializer_class = DummySerializer\n    \n    def list_deleted(self, request, *args, **kwargs):\n        # optional. your code goes here...\n\n````\n\n\nInternally, the ListDeletedModelMixin just calls the method ListModelMixin.list(self, request, *args, **kwargs).\nThe method of determining if the queryset must get all objects, only the deleted or all with deleted is done using AOP,\nwhich means that the method GenericAPIView.get_queryset() is advised at runtime to map the current action\nto the correct queryset the view needs.\n\nIf you don't inherit from generic.GenericAPIView, you must be aware that, for this type of scenarios,\nyou need to override the method get_queryset() to return the objects that matches your needs.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xgeekshq/django-timestampable/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-timestampable",
    "package_url": "https://pypi.org/project/django-timestampable/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-timestampable/",
    "project_urls": {
      "Homepage": "https://github.com/xgeekshq/django-timestampable/"
    },
    "release_url": "https://pypi.org/project/django-timestampable/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Timestamps and Soft Delete Patterns in Django Models",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17156335,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8527a9dea66c927dadb1095133c6b68ddfd1e466d19e5464e0fe188b9392c080",
        "md5": "84fbf74d20cfd42c44f942a9c314cac9",
        "sha256": "13ba26c10918c158d68163c3913bb0541690256fd39a13224d105f72e4858149"
      },
      "downloads": -1,
      "filename": "django-timestampable-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "84fbf74d20cfd42c44f942a9c314cac9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7454,
      "upload_time": "2021-09-14T10:33:48",
      "upload_time_iso_8601": "2021-09-14T10:33:48.606073Z",
      "url": "https://files.pythonhosted.org/packages/85/27/a9dea66c927dadb1095133c6b68ddfd1e466d19e5464e0fe188b9392c080/django-timestampable-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}