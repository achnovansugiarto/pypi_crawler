{
  "info": {
    "author": "MOIA GmbH",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fmoia-oss%2Fbastion-host-forward%2Fbadge&style=flat)](https://actions-badge.atrox.dev/moia-oss/bastion-host-forward/goto)\n[![npm version](https://badge.fury.io/js/%40moia-oss%2Fbastion-host-forward.svg)](https://badge.fury.io/js/%40moia-oss%2Fbastion-host-forward)\n[![PyPI version](https://badge.fury.io/py/moia-dev.bastion-host-forward.svg)](https://badge.fury.io/py/moia-dev.bastion-host-forward)\n\n# Bastion Host Forward\n\nThis is a CDK Library providing custom bastion host constructs for connecting to\nseveral AWS data services. When building secure infrastructure, we face the\nproblem that the data layer is only accessible from inside the VPC. These\nBastion Hosts close the gap and let you interact with the data layer as they\nwould be hosted on your machine.\n\nCurrently the following AWS Services are supported:\n\n| AWS Service       | CDK Construct                        |\n| ----------------- | ------------------------------------ |\n| Aurora Serverless | `BastionHostAuroraServerlessForward` |\n| Redis             | `BastionHostRedisForward`            |\n| Redshift          | `BastionHostRedshiftForward`         |\n| RDS               | `BastionHostRDSForward`              |\n\n# V1 DISCLAIMER\n\nWe introduced v1.0.0 recently, which now relies on v2 of CDK. This introced an\nincompability, because they don't offer a L2 Construct for\n[Redshift](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_redshift-readme.html)\nanymore. This is why we cant offer the `BastionHostRedshiftForward` Construct\nanymore. We would need to accept a CFN L1 Construct instead, but we didn't allow\nthis for the `BastionHostRedisForward` as well. Instead we decided to rename the\n`BastionHostRedisForward` to `GenericBastionHostForward`, which needs only the\nendpoint address and the port of the data store to be able to forward connections.\n\nWith the new `GenericBastionHostForward` you are still able to forward\nconnections to Redis and Redshift and also every other data store in AWS, which\nwe don't support specifically so far.\n\n# Technical details\n\nThe bastion hosts are extensions of the official `BastionHostLinux` CDK\nconstruct, which allows connecting to the bastion host and from there connect to\nthe data layer.\n\nThese constructs additionally install and configure\n[HAProxy](https://www.haproxy.org/) to forward the endpoint of the chosen data\nstore. They also have the SSM Agent to the bastion host, so you can connect via\nthe AWS Session Manager. Connecting to a bastion host via the AWS Session\nManager brings a couple of benefits:\n\n* No management of SSH Keys anymore\n* AWS IAM defines who is able to connect to the bastion host\n* Bastion Hosts don't need to be hosted in public subnets anymore\n* Easy port forwarding with a single command\n\nThe combination of having a local port forward via SSM Session Manager and the\nHAProxy on the bastion host itself let you interact with the data layer as they\nwould be on your machine. This means you can connect to them via localhost:<port\nof the data service> and also use visual tools like DataGrip or MySQL Workbench\nto interact with the data store in AWS. The following graphic illustrates the\ndescribed procedure on the example of RDS:\n\n![bastion-host-forward](doc/bastion-host-forward.png)\n\n# Setup\n\nFirst of all you need to include this library into your project for the language\nyou want to deploy the bastion host with\n\n## Javascript/Typescript\n\nFor Javascript/Typescript the library can be installed via npm:\n\n```\nnpm install @moia-oss/bastion-host-forward\n```\n\n## Python\n\nFor python the library can be installed via pip:\n\n```\npip install moia-dev.bastion-host-forward\n```\n\n# Examples\n\nThe following section includes some examples in supported languages how the\nBastion Host can be created for different databases.\n\n## Bastion Host for RDS in Typescript\n\nA minimal example for creating the RDS Forward Construct, which will be used via\nusername/password could look like this snippet:\n\n```typescript\nimport * as cdk from '@aws-cdk/core';\nimport { SecurityGroup, Vpc } from '@aws-cdk/aws-ec2';\nimport { DatabaseInstance } from '@aws-cdk/aws-rds';\nimport { BastionHostRDSForward } from '@moia-oss/bastion-host-forward';\n\nexport class BastionHostPocStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = Vpc.fromLookup(this, 'MyVpc', {\n      vpcId: 'vpc-0123456789abcd'\n    });\n\n    const securityGroup = SecurityGroup.fromSecurityGroupId(\n      this,\n      'RDSSecurityGroup',\n      'odsufa5addasdj',\n      { mutable: false }\n    );\n\n    const rdsInstance = DatabaseInstance.fromDatabaseInstanceAttributes(\n      this,\n      'MyDb',\n      {\n        instanceIdentifier: 'abcd1234geh',\n        instanceEndpointAddress: 'abcd1234geh.ughia8asd.eu-central-1.rds.amazonaws.com',\n        port: 5432,\n        securityGroups: [securityGroup]\n      }\n    );\n\n    new BastionHostRDSForward(this, 'BastionHost', {\n      vpc: vpc,\n      rdsInstance: rdsInstance,\n      name: 'MyBastionHost',\n    });\n```\n\nIf the RDS is IAM Authenticated you also need to add an `iam_user` and\n`rdsResourceIdentifier` to the BastionHostRDSForward:\n\n```typescript\n...\nnew BastionHostRDSForward(this, 'BastionHost', {\n  vpc: vpc,\n  rdsInstance: rdsInstance,\n  name: 'MyBastionHost',\n  iamUser: 'iamusername',\n  rdsResourceIdentifier: 'db-ABCDEFGHIJKL123'\n});\n```\n\nThis will spawn a Bastion Host in the defined VPC. You also need to make sure\nthat IPs from within the VPC are able to connect to the RDS Database. This\nneeds to be set in the RDS's Security Group. Otherwise the Bastion Host can't\nconnect to the RDS.\n\n## Bastion Host for a generic data store on AWS (Redis, Redshift etc.)\n\n### Typescript\n\nA minimal example for creating the Generic Forward Construct, which will be used\nvia username/password could look like this snippet. In this case we forward a\nconnection to a RedShift instance, but this can also be a Redis Node or any\nother data store on AWS. Instead of passing the complete L2 construct and\nletting the library extract the necessary properties, the client is passing them\ndirectly to the construct:\n\n```typescript\nimport * as cdk from '@aws-cdk/core';\nimport { GenericBastionHostForward } from '@moia-oss/bastion-host-forward';\nimport { SecurityGroup, Vpc } from '@aws-cdk/aws-ec2';\nimport { Cluster } from '@aws-cdk/aws-redshift';\n\nexport class PocRedshiftStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = Vpc.fromLookup(this, 'MyVpc', {\n      vpcId: 'vpc-12345678',\n    });\n\n    const securityGroup = SecurityGroup.fromSecurityGroupId(this, 'BastionHostSecurityGroup', 'sg-1245678', {\n      mutable: false,\n    });\n\n    const redshiftCluster = Cluster.fromClusterAttributes(this, 'RedshiftCluster', {\n      clusterName: 'myRedshiftClusterName',\n      clusterEndpointAddress: 'myRedshiftClusterName.abcdefg.eu-central-1.redshift.amazonaws.com',\n      clusterEndpointPort: 5439,\n    });\n\n    new GenericBastionHostForward(this, 'BastionHostRedshiftForward', {\n      vpc,\n      securityGroup,\n      name: 'MyRedshiftBastionHost',\n      address: redshiftCluster.clusterEndpointAddress,\n      port: redshiftCluster.clusterEndpointPort,\n    });\n  }\n}\n```\n\n### Python\n\n```python\nfrom aws_cdk import core as cdk\nfrom aws_cdk import aws_redshift\nfrom aws_cdk import aws_ec2\nfrom moia_dev import bastion_host_forward\n\n\nclass PocRedshiftStack(cdk.Stack):\n\n    def __init__(self, scope: cdk.Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n        vpc = aws_ec2.Vpc.from_lookup(\n            self,\n            \"vpc\",\n            vpc_id=\"vpc-12345678\"\n        )\n        security_group = aws_ec2.SecurityGroup.from_security_group_id(\n            self,\n            \"sec_group\", \"sg-12345678\"\n        )\n        redshift_cluster = aws_redshift.Cluster.from_cluster_attributes(\n            self,\n            \"cluster\",\n            cluster_name=\"myRedshiftClusterName\",\n            cluster_endpoint_address=\"myRedshiftClusterName.abcdefg.eu-central-1.redshift.amazonaws.com\",\n            cluster_endpoint_port=5439\n        )\n\n        bastion_host_forward.GenericBastionHostForward(\n            self,\n            \"bastion-host\",\n            name=\"my-bastion-host\",\n            security_group=security_group,\n            address: redshift_cluster.cluster_endpoint_address,\n            port: redshift_cluster.cluster_endpoint_port,\n            vpc=vpc\n        )\n```\n\n## Bastion Host for Aurora Serverless\n\n```typescript\nimport * as cdk from '@aws-cdk/core';\nimport { SecurityGroup, Vpc } from '@aws-cdk/aws-ec2';\nimport { ServerlessCluster } from '@aws-cdk/aws-rds';\nimport { BastionHostAuroraServerlessForward } from '@moia-oss/bastion-host-rds-forward';\n\nexport class BastionHostPocStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = Vpc.fromLookup(this, 'MyVpc', {\n      vpcId: 'vpc-0123456789abcd'\n    });\n\n    const securityGroup = SecurityGroup.fromSecurityGroupId(\n      this,\n      'AuroraSecurityGroup',\n      'odsufa5addasdj',\n      { mutable: false }\n    );\n\n    const serverlessCluster = ServerlessCluster.fromServerlessClusterAttributes(\n      this,\n      'Aurora',\n      {\n        clusterIdentifier: 'my-cluster',\n        port: 3306,\n        clusterEndpointAddress: 'my-aurora.cluster-abcdef.eu-central-1.rds.amazonaws.com',\n        securityGroups: [securityGroup]\n      }\n    );\n\n    new BastionHostAuroraServerlessForward(this, 'BastionHost', {\n      vpc,\n      serverlessCluster,\n    });\n```\n\n## Deploying the Bastion Host\n\nWhen you setup the Bastion Host for the Database you want to connect to, you can\nnow go forward to actually deploy the Bastion Host:\n\n```\ncdk deploy\n```\n\nWhen the EC2 Instance for you Bastion Host is visible you can continue with the\nsetup of the Session-Manager Plugin on your Machine\n\n# Install the Session-Manager Plugin for AWS-CLI\n\nYou are also able to connect to the Bastion Host via the AWS Web\nConsole. For this go to `AWS Systems Manager` -> `Session Manager` -> choose\nthe newly created instance -> click on start session.\n\nBut overall it's a much more comfortable experience to connect to the Bastion\nSession Manager Plugin. On Mac OSX you can get it via homebrew for example:\n\n```\nbrew install --cask session-manager-plugin\n```\n\nFor Linux it should also be available in the respective package manager. Also\nhave a look at [the official installation instructions from\nAWS](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)\n\n## Forward the connection to your machine\n\nThe Session Manager offers a command to forward a specific port. On the Bastion\nHost a HAProxy was installed which forwards the connection on the same\nport as the specified service. Those are by default:\n\n* RDS MySQL: 3306\n* RDS PostgreSQL: 5432\n* Redis: 6739\n* Redshift: 5439\n\nIn the following example, we show how to forward the connection of a PostgreSQL\ndatabase. To forward the connection to our machine we execute the following\ncommand in the shell:\n\n```\naws ssm start-session \\\n    --target <bastion-host-id> \\\n    --document-name AWS-StartPortForwardingSession \\\n    --parameters '{\"portNumber\": [\"5432\"], \"localPortNumber\":[\"5432\"]}'\n```\n\nThis creates a port forward session on the defined `localPortNumber`. The\ntarget is the id of the bastion host instance. This will be output\nautomatically after deploying the bastion host. The `portNumber` must be the\nsame as the RDS Port.\n\nNow you would be able to connect to the RDS as it would run on localhost:5432.\n\n*Note*\n\nIn the example of a MySQL running in Serverless Aurora, we couldn't connect to\nthe database using localhost. If you face the same issue, make sure to also try to connect via\nthe local IP 127.0.0.1.\n\nExample with the MySQL CLI:\n\n```sh\nmysql -u <username> -h 127.0.0.1 -p\n```\n\n## Additional step if you are using IAM Authentication on RDS\n\nIf you have an IAM authenticated RDS, the inline policy of the bastion\nhost will be equipped with access rights accordingly. Namely it will get `rds:*`\npermissions on the RDS you provided and it also allows `rds-db:connect` with\nthe provided `iamUser`.\n\nMost of the steps you would perform to connect to the RDS are the same, since it wouldn't\nbe in a VPC.\n\nFirst you generate the PGPASSWORD on your local machine:\n\n```\nexport\nPGPASSWORD=\"$(aws rds generate-db-auth-token\n--hostname=<rds endpoint> --port=5432\n--username=<iam user> --region <the region of the rds>)\"\n```\n\nYou also need to have the RDS certificate from AWS, which you can download:\n\n```\nwget https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem\n```\n\nThere is now an additional step needed, because the certificate checks against\nthe real endpoint name during the connect procedure. Therefore we need to add\nan entry to the `/etc/hosts` file on our machine:\n\n```\necho \"127.0.0.1  <rds endpoint>\" >> /etc/hosts\n```\n\nNow you can connect to the IAM authenticated RDS like this:\n\n```\npsql \"host=<rds endpoint> port=5432 dbname=<database name> user=<iamUser> sslrootcert=<full path to downloaded cert> sslmode=verify-ca\"\n```\n\nFor a full guide on how to connect to an IAM authenticated RDS check out [this\nguide by AWS](https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moia-oss/bastion-host-forward",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moia-dev.bastion-host-forward",
    "package_url": "https://pypi.org/project/moia-dev.bastion-host-forward/",
    "platform": null,
    "project_url": "https://pypi.org/project/moia-dev.bastion-host-forward/",
    "project_urls": {
      "Homepage": "https://github.com/moia-oss/bastion-host-forward",
      "Source": "https://github.com/moia-oss/bastion-host-forward"
    },
    "release_url": "https://pypi.org/project/moia-dev.bastion-host-forward/1.1.3/",
    "requires_dist": [
      "aws-cdk-lib (<3.0.0,>=2.18.0)",
      "constructs (<11.0.0,>=10.0.102)",
      "jsii (<2.0.0,>=1.69.0)",
      "publication (>=0.0.3)"
    ],
    "requires_python": "~=3.7",
    "summary": "CDK Construct for creating a bastion host to forward a connection to several AWS data services inside a private subnet from your local machine",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15474598,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f7883d1a1c4edca9cc01dd82e651358d1e552cc59b464c2b1d74d773351ec5c",
        "md5": "f131e07fd99d41dc55a53504b55c0edb",
        "sha256": "72b564dc43de92c2dd6325e3b5feab6ee3a6e43f3272310b6da0336ff6249fa5"
      },
      "downloads": -1,
      "filename": "moia_dev.bastion_host_forward-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f131e07fd99d41dc55a53504b55c0edb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 90048,
      "upload_time": "2022-10-20T14:35:18",
      "upload_time_iso_8601": "2022-10-20T14:35:18.764742Z",
      "url": "https://files.pythonhosted.org/packages/0f/78/83d1a1c4edca9cc01dd82e651358d1e552cc59b464c2b1d74d773351ec5c/moia_dev.bastion_host_forward-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dd0b5e323b1625024bb8a0bbdd2101c0ae6200413d9d44267eeec3f1cf3217a",
        "md5": "736b01e1ae0609b8a5bcc15390563610",
        "sha256": "9b887dfea2e2b947f6a0cd7b2f6e78890ec3296fb1711b7274cf2ff3402c5017"
      },
      "downloads": -1,
      "filename": "moia-dev.bastion-host-forward-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "736b01e1ae0609b8a5bcc15390563610",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 92377,
      "upload_time": "2022-10-20T14:35:20",
      "upload_time_iso_8601": "2022-10-20T14:35:20.046080Z",
      "url": "https://files.pythonhosted.org/packages/8d/d0/b5e323b1625024bb8a0bbdd2101c0ae6200413d9d44267eeec3f1cf3217a/moia-dev.bastion-host-forward-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}