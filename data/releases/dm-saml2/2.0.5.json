{
  "info": {
    "author": "Dieter Maurer",
    "author_email": "dieter@handshake.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.6",
      "Topic :: Utilities"
    ],
    "description": "This package provides support for SAML2 based on ``pyxb``.\n\n``pyxb`` (http://pypi.python.org/pypi/PyXB) generates a Python class\ncollection for an XML schema and provides means to convert between\nassociated Python instances and xml documents. It is used to generate\nand parse SAML2 messages.\n\nThe package adds support for digital signatures and SAML2 bindings and\nmetadata management.\n\n\nDependencies\n============\n\nPyXB\n----\n\nThis package's version has been tested with version 1.1.4 of ``pyxb``.\nIt may not work with other versions.\n\nClass collections generated by ``pyxb`` tend to be very version dependent.\nThus, they must usually be regenerated when the ``pyxb`` version has changed.\n\nThe current package's version mostly uses class collections from\nthe ``wssplat`` and ``saml20`` bundles of ``pyxb``. Thus, they\nhave a good chance to be updated together with ``pyxb``.\nHowever, the ``pyxb`` ``saml2`` bundle lacks support for\nthe so called SAML2 context classes. This package contains\nclass collections generated with ``pyxb==1.1.4``. They need to\nbe regenerated if the ``pyxb`` version changes (and you use those classes --\nwhich is not very likely).\nThe ``gen.sh`` script in subpackage ``pyxb``\ncan provide clues how to regenerate them.\n\nA bug in ``pyxb 1.1.4``\n(http://sourceforge.net/apps/trac/pyxb/ticket/130#comment:4)\nprevents its installation via package managers (such as\n``easy_install``, ``pip``, ``zc.buildout``) for Python versions\nwithout ``os.path.relpath`` (this applies e.g. to Python 2.4).\nI work around this problem by downloading the ``pyxb`` source,\napply patch http://sourceforge.net/apps/trac/pyxb/attachment/ticket/130/pyxb_setup.patch\nto it and then egg install the result.\nAfter this, ``dm.saml2`` can be installed normally.\n\n\ndm.xmlsec.binding\n-----------------\n\nCheck its installation notes should you face related installation problems.\n\n\nExample\n=======\n\nThis section provides a simple example on how to create, sign and\nverify an assertion with this package.\n\n\nAlways ensure, the ``xmlsec`` library is initialized. Otherwise, it signing/\nsignature verification can fail with dubious messages.\n\n>>> import dm.xmlsec.binding as xmlsec\n>>> xmlsec.initialize()\n\nWe now build an assertion as Python object.\n\n>>> import pyxb.binding.datatypes as xs\n>>> from dm.saml2.pyxb.assertion import (NameID, Assertion, Subject, \\\n...      AuthnStatement, AttributeStatement, AuthnContext, AuthnContextClassRef, \\\n...      Attribute, AttributeValue, \\\n...      CreateFromDocument\n...                                      )\n>>> from datetime import datetime\n>>> \n>>> issuer = NameID('http://bfd.de')\n>>> ass = Assertion(issuer)\n>>> \n>>> subject = Subject(NameID('Dieter Maurer'))\n>>> \n>>> ass.Subject = subject\n>>> \n>>> authn = AuthnStatement(\n...   None,\n...   AuthnContext(AuthnContextClassRef('urn:oasis:names:tc:SAML2:2.0:ac:classes:Password')),\n...   AuthnInstant=datetime.utcnow(),\n...   )\n>>> \n>>> ass.AuthnStatement.append(authn)\n>>> \n>>> att = AttributeStatement(\n...   # does not yet work perfectly -- needs further analysis\n...   Attribute(xs.string('Dieter', _element=AttributeValue), Name='Firstname'),\n...   Attribute(xs.string('Maurer', _element=AttributeValue), Name='Lastname'),\n...   )\n>>> \n>>> ass.AttributeStatement.append(att)\n\nNow it looks like this (not yet signed).\n\n>>> unsigned_ass = ass.toxml()\n>>> print unsigned_ass\n<?xml version=\"1.0\" ?><ns1:Assertion ID=\"_fb6dc6ac-9ee6-4a1f-8010-6dba6e0d9746\" IssueInstant=\"2012-07-06T07:24:53.262859\" Version=\"2.0\" xmlns:ns1=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ns2=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><ns1:Issuer>http://bfd.de</ns1:Issuer><ns1:Subject><ns1:NameID>Dieter Maurer</ns1:NameID></ns1:Subject><ns1:AuthnStatement AuthnInstant=\"2012-07-06T07:24:53.282142\"><ns1:AuthnContext><ns1:AuthnContextClassRef>urn:oasis:names:tc:SAML2:2.0:ac:classes:Password</ns1:AuthnContextClassRef></ns1:AuthnContext></ns1:AuthnStatement><ns1:AttributeStatement><ns1:Attribute Name=\"Firstname\"><ns1:AttributeValue xsi:type=\"ns2:string\">Dieter</ns1:AttributeValue></ns1:Attribute><ns1:Attribute Name=\"Lastname\"><ns1:AttributeValue xsi:type=\"ns2:string\">Maurer</ns1:AttributeValue></ns1:Attribute></ns1:AttributeStatement></ns1:Assertion>\n\n\nWe define the signature context to support signing.\n\n>>> from dm.saml2.signature import default_sign_context\n>>> default_sign_context.add_key(xmlsec.Key.load('key.pem',  xmlsec.KeyDataFormatPem, None), issuer.value())\n\nWe request that ``ass`` gets signed on serialization, serialize and\nlook at the result.\n\n>>> ass.request_signature()\n>>> signed = ass.toxml()\n>>> print signed\n<?xml version=\"1.0\" ?><ns1:Assertion ID=\"_fb6dc6ac-9ee6-4a1f-8010-6dba6e0d9746\" IssueInstant=\"2012-07-06T07:24:53.262859\" Version=\"2.0\" xmlns:ns1=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ns2=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:ns3=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><ns1:Issuer>http://bfd.de</ns1:Issuer><ns2:Signature><ns2:SignedInfo><ns2:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ns2:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><ns2:Reference URI=\"#_fb6dc6ac-9ee6-4a1f-8010-6dba6e0d9746\"><ns2:Transforms><ns2:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ns2:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/></ns2:Transforms><ns2:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><ns2:DigestValue>6P0dLnMLJCe22YuRD1Mngiprz6k=</ns2:DigestValue></ns2:Reference></ns2:SignedInfo><ns2:SignatureValue>liaBBIVjk73x5spJrvfYg1Sa3VGnOqz0zqDKQr7qoLNg5/pzZ8llQEXQsbvw6zLh\n26UnQ6D3KWvvabw9vpRqzLA21ykNUPqEGtZPMiQynvpdRSeTbg5ZyVBGYCL7ww19\nMiEKryDwPI56I/3z4Le7KFZ4qpPPUptodQ4mm1PVsyA=</ns2:SignatureValue></ns2:Signature><ns1:Subject><ns1:NameID>Dieter Maurer</ns1:NameID></ns1:Subject><ns1:AuthnStatement AuthnInstant=\"2012-07-06T07:24:53.282142\"><ns1:AuthnContext><ns1:AuthnContextClassRef>urn:oasis:names:tc:SAML2:2.0:ac:classes:Password</ns1:AuthnContextClassRef></ns1:AuthnContext></ns1:AuthnStatement><ns1:AttributeStatement><ns1:Attribute Name=\"Firstname\"><ns1:AttributeValue xsi:type=\"ns3:string\">Dieter</ns1:AttributeValue></ns1:Attribute><ns1:Attribute Name=\"Lastname\"><ns1:AttributeValue xsi:type=\"ns3:string\">Maurer</ns1:AttributeValue></ns1:Attribute></ns1:AttributeStatement></ns1:Assertion>\n\nNow, we look how the verification can be done. We first set up\na verification context.\n\n>>> from dm.saml2.signature import default_verify_context\n>>> default_verify_context.add_key(xmlsec.Key.load('pubkey.pem',  xmlsec.KeyDataFormatPem, None), issuer.value())\n\nCalling ``CreateFromDocument`` will verify any (available) signatures and raise\nan exception when a verification fails. Verification always uses\nthe ``Issuer`` to select the key from the verification context.\nTo check whether a signature\nwas verified at the instance, ``verified_signature`` can be called.\n\n>>> verified_ass = CreateFromDocument(signed)\n>>> verified_ass.verified_signature()\nTrue\n\n\nYou can use ``pydoc``, the Python builtin ``help`` or look at the source\nto find out more about this package.\n\n\nNotes\n=====\n\nNote that signature creation and verification will fail with an obscure\nerror message from ``xmlsec`` when ``xmlsec`` is not properly\ninitialized. Do not forget to call ``dm.xmlsec.binding.initialize()``.\n\n\nHistory\n=======\n\n2.0\n\n  Version 2.0 uses ``dm.xmlsec.binding`` as Python binding to the XML\n  security library, rather then the no longer maintained ``pyxmlsec``.\n  This drastically facilitates installation.\n\n1.0\n\n  Initial release based on ``pyxmlsec``.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/dm.xmlsec.pyxb",
    "keywords": "saml2 pyxb",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dm.saml2",
    "package_url": "https://pypi.org/project/dm.saml2/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dm.saml2/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://pypi.python.org/pypi/dm.xmlsec.pyxb"
    },
    "release_url": "https://pypi.org/project/dm.saml2/2.0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "SAML2 support based on PyXB",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4866272,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26f3992f56791ef98c552ecbfa660e2e2592cdd3f7734bc75908b4403560e164",
        "md5": "d11b4f476ffb1791aef697f8f2d36fe6",
        "sha256": "4542cdaf775faeb6f5fbc6b694390bc8e6686d649cae1bb41b80e43762f96a67"
      },
      "downloads": -1,
      "filename": "dm.saml2-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d11b4f476ffb1791aef697f8f2d36fe6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 339213,
      "upload_time": "2013-06-09T13:34:01",
      "upload_time_iso_8601": "2013-06-09T13:34:01.736043Z",
      "url": "https://files.pythonhosted.org/packages/26/f3/992f56791ef98c552ecbfa660e2e2592cdd3f7734bc75908b4403560e164/dm.saml2-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}