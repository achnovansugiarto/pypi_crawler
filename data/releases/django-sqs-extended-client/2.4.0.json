{
  "info": {
    "author": "Tommaso Castellani",
    "author_email": "castellani.tom@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Other Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "django-sqs-extended-client/README.rst\n=====================================\nAWS SQS Extended Client Library for Django\n==========================================\n\nTo manage large Amazon Simple Queue Service (Amazon SQS) messages,\nyou can use Amazon Simple Storage Service (Amazon S3) and the Amazon SQS Extended Client Library for Django.\nThis is especially useful for storing and consuming messages up to 2 GB.\nUnless your application requires repeatedly creating queues and leaving them inactive or storing large amounts of data in your queues, consider using Amazon S3 for storing your data.\n\n\nQuick start\n-----------\n\n1. Add \"django_sqs_extended_client\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_sqs_extended_client',\n    ]\n\n2. On AWS SQS create your Queue and subscribe it to a SNS Topic. After that edit the subscription in \"Subscription filter policy\" like this::\n\n    {\n      \"event_type\": [\n        \"YOUR_SNS_SUBSCRIPTION_FILTER_EVENT_TYPE_1\"\n      ]\n    }\n\n3. Include some additional django settings like this::\n\n    # AWS SNS KEYS\n    AWS_ACCESS_KEY_ID = 'YOUR_AWS_ACCESS_KEY_ID'\n    AWS_SECRET_ACCESS_KEY = 'YOUR_AWS_SECRET_ACCESS_KEY'\n    AWS_DEFAULT_REGION = 'YOUR_AWS_DEFAULT_REGION'\n    AWS_S3_QUEUE_STORAGE_NAME = 'YOUR_AWS_S3_QUEUE_STORAGE_NAME'\n    AWS_SNS_TOPIC = 'YOUR_AWS_SNS_TOPIC'\n\n    # AWS EVENTS:\n    SNS_EVENTS = {\n        'EVENT_TYPE_1': 'YOUR_SNS_SUBSCRIPTION_FILTER_EVENT_TYPE_1',\n        'EVENT_TYPE_2': 'YOUR_SNS_SUBSCRIPTION_FILTER_EVENT_TYPE_2',\n        ...\n    }\n\n    SQS_EVENTS = {\n        'EVENT_TYPE_3': {\n            'sns_event_filter': 'YOUR_SNS_SUBSCRIPTION_FILTER_EVENT_TYPE_3',\n            'sqs_queue_url': 'YOUR_QUEUE_URL_FOR_EVENT_3',\n            'event_processor': 'PATH_OF_THE_CLASS_PROCESSOR_FOR_EVENT_3'\n        },\n        'EVENT_TYPE_4': {\n            'sns_event_filter': 'YOUR_SNS_SUBSCRIPTION_FILTER_EVENT_TYPE_4',\n            'sqs_queue_url': 'YOUR_QUEUE_URL_FOR_EVENT_4',\n            'event_processor': 'PATH_OF_THE_CLASS_PROCESSOR_FOR_EVENT_4'\n        },\n        ...\n    }\n\n\n4. Add one cron for each SQS event to process. Run it every minute with a lock::\n\n    * * * * * python manage.py process_queue EVENT_TYPE_3\n    * * * * * python manage.py process_queue EVENT_TYPE_4\n\nYou can use a library as https://pypi.org/project/django-chroniker/ for an easier way to manage crons and lockers\n\nE.g:\n....\n        In ``django_project/django_project/settings.py``::\n\n            # AWS SNS KEYS\n            AWS_ACCESS_KEY_ID = 'ABCDEFGHIJKLMNOPQRSTUWXYZ'\n            AWS_SECRET_ACCESS_KEY = '74gfq83hg83qh5erg/G&Cwd23^VFBfvV^vvkf7g77'\n            AWS_DEFAULT_REGION = 'us-east-1'\n            AWS_S3_QUEUE_STORAGE_NAME = 'sns-queues'\n            AWS_SNS_TOPIC = 'arn:aws:sns:us-east-1:123456789:domainEvents'\n\n\n            # AWS EVENTS:\n\n            SNS_EVENTS = {\n                'PAYMENT_REGISTERED': 'this-service.event.payment.registered'\n            }\n\n            SQS_EVENTS = {\n                'BOOKING_SERVICE__ROOM_BOOKED': {\n                    'sns_event_filter': 'booking-service.event.room.booked',\n                    'sqs_queue_url': 'https://sqs.us-east-1.amazonaws.com/123456789/booking-service--room-booked',\n                    'event_processor': 'your_project.event_processors.room_booked.RoomBooked'\n                },\n            }\n\n        Cron::\n\n        * * * * * python manage.py process_queue BOOKING_SERVICE__ROOM_BOOKED\n\n\nUsage\n------\nIn the sender service:\n\nDispatch your data using ``EventDispatcher`` like this::\n\n    from django_sqs_extended_client.event.event_dispatcher import EventDispatcher\n\n    event_dispatcher = EventDispatcher()\n        event_dispatcher.dispatch(\n            event_name=settings.SNS_EVENTS['PAYMENT_REGISTERED'],\n            event_data=your_data,\n        )\n\nevent_data accept list, dict and row content data as xml, csv, json.\n\nIn the receiver service:\n\nFor each settings.SQS_EVENTS, add a class which extends ``django_sqs_extended_client.event_processor.EventProcessor``.\nThis Class accepts the data in the constructor and must have the method ``execute()`` where you can add the code to manage your data.\nUse the same paths of the 'event_processor' in settings.SQS_EVENTS like this::\n\n    from django_sqs_extended_client.event_processor.event_processor import EventProcessor\n\n    class ImageCreated(EventProcessor):\n\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n\n        def execute(self):\n            # your code here\n            pass\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tommaso-castellani/django-sqs-extended-client",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sqs-extended-client",
    "package_url": "https://pypi.org/project/django-sqs-extended-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-sqs-extended-client/",
    "project_urls": {
      "Homepage": "https://github.com/tommaso-castellani/django-sqs-extended-client"
    },
    "release_url": "https://pypi.org/project/django-sqs-extended-client/2.4.0/",
    "requires_dist": [
      "django (>=3.1.5)",
      "boto3 (>=1.16.56)",
      "pytz (>=2021.1)"
    ],
    "requires_python": "",
    "summary": "A Django app to easily use AWS Simple Queue Service (SQS) with S3 for messages up to 2 GB.",
    "version": "2.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16650870,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fbf5e548c3e3a0078ba2d501afb8daf2cd9a0068a36045f41eed6c9d58918ba",
        "md5": "2c50b60e8c68c06849d3524dfdec24df",
        "sha256": "b126c0cacf93da994c82e48ecb8c1088543faad0c2091fa3b2c6e03d716ce5d8"
      },
      "downloads": -1,
      "filename": "django_sqs_extended_client-2.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c50b60e8c68c06849d3524dfdec24df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13607,
      "upload_time": "2023-01-23T11:40:41",
      "upload_time_iso_8601": "2023-01-23T11:40:41.365642Z",
      "url": "https://files.pythonhosted.org/packages/6f/bf/5e548c3e3a0078ba2d501afb8daf2cd9a0068a36045f41eed6c9d58918ba/django_sqs_extended_client-2.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90431b1cc4712ce50a43d0765a9d9cad438613e0a3243ef7a9fc11eee11f7e6a",
        "md5": "fc29cc829661757e1ccc58384062ee85",
        "sha256": "b25e8410dc1b164c4254b53f377d55deda91b2e8e0a65a942ca25b668c8a8383"
      },
      "downloads": -1,
      "filename": "django-sqs-extended-client-2.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fc29cc829661757e1ccc58384062ee85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11962,
      "upload_time": "2023-01-23T11:40:43",
      "upload_time_iso_8601": "2023-01-23T11:40:43.005948Z",
      "url": "https://files.pythonhosted.org/packages/90/43/1b1cc4712ce50a43d0765a9d9cad438613e0a3243ef7a9fc11eee11f7e6a/django-sqs-extended-client-2.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}