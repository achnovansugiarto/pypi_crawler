{
  "info": {
    "author": "EdgeCortix Inc.",
    "author_email": "mera-compiler@edgecortix.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Compilers"
    ],
    "description": "# EdgeCortix&reg; MERA&trade; - An heterogeneous deep learning compiler framework\n\nThis repository contains the source code for the frontend stack of EdgeCortix&reg; MERA™ compiler framework, developed by [EdgeCortix Inc.](https://www.edgecortix.com/). If you are interested in the latest (bleeding edge) capabilities of MERA™ framework and the different Dynamic Neural Accelerator&reg; architecture configurations, contact [EdgeCortix AI Accelerator Team](mailto:dna-ip@edgecortix.com).\n\n![MERA software stack description](https://github.com/Edgecortix-Inc/mera/raw/main/docs/images/MERA_framework.png \"MERA™ software stack\")\n\nThe current release of EdgeCortix&reg; MERA™ supports the following Dynamic Neural Accelerator architectures for FPGAs and ASICs:\n\n| Platform Identifiers | Platform | TOPS |\n|:---------------------:|:------:|:----:|\n|      DNAA800L0001     |  ASIC  |  78 <sub>1</sub>   |\n|      DNAA600L0002     |  ASIC  |  40  |\n|      DNAA400L0001     |  ASIC  | 26.2 |\n|      DNAF132S0001     |  FPGA  |  0.6 |\n|      DNAF232S0002     |  FPGA  |  1.2 |\n|      DNAF100L0003     |  FPGA  |  2.4 |\n|      DNAF632L0003     |  FPGA  |  3.6 |\n|      DNAF200L0003     |  FPGA  |  4.9 |\n\n*Note<sub>1</sub> Recommended frequency for this platform is 1.2GHz*\n\nWhen using a platform identifier corresponding to the ASIC platforms, the recommended minimum frequency setting is 800 MHz. In the case of FPGA platforms, the minimum recommended frequency is 300 MHz. In the above table, the TOPS corresponds to these minimum frequency specifications. \n\n## Installation Guide\n\nThis document describes the steps needed to install MERA in your system.\n\n### Quick installation of MERA on Ubuntu 18.04 LTS\n\nTo install MERA and all its dependencies source the provided script:\n\n```bash\nsource install-mera.sh \n```\n\n### Manual Installation\n\nIf the `install-mera.sh` script is not enough for your environment, the following section describes how to install\nall the dependencies manually in your system.\n\n#### System Requirements\n\nFor an *x86* architecture, you will need `Ubuntu 18.04` as your OS, whereas for *aarch64* you will need `Ubuntu 20.04`. \nThe following software packages will also need to be installed:\n\n```bash\nsudo apt update && sudo apt install python3.6 llvm-10 libgomp1 ocl-icd-libopencl1 software-properties-common \\\n    libgoogle-glog0v5 libboost-graph-dev virtualenv wget build-essential\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test\nsudo apt update\nsudo apt install libstdc++6\n```\n\n#### MERA Installation\n\nThe MERA environment provides 3 different modes depending on the target usage:\n\n* `host-only`: Meant for performing deployments only targetting simulation running on the host.\n* `runtime`: Meant for running inference in HW accelerators using the DNA IP, requires extra system dependencies depending on the HW device.\n* `full`: Meant for users who want the functionality of both `host-only` and `runtime` models\n\nAfter choosing the desired mode, you can install MERA with the following command:\n\n```bash\n# Create virtual envinronment with Python 3.6\nMERA_VENV=mera-env\nvirtualenv -p python3.6 $MERA_VENV\nsource $MERA_VENV/bin/activate\n\n# Install MERA full version\npip install --upgrade pip\npip install mera[full]\n\n# Install extra dependencies. These are needed to run our tutorials and demos\npip install torch==1.7.1 torchvision==0.8.2\npip install tensorflow==2.6.2 tflite\npip install tqdm easydict wget notebook pandas matplotlib opencv-python gdown seaborn tensorflow_datasets\n\n\n# Test the installation\n$ python -c \"import mera;print(mera.get_versions())\"\n>>> Mera Environment Versions:\n      * mera version x.y released on dd/mm/yyyy\n      * mera-tvm version x.y\n      * mera-dna version vx.y+git=<hash>\n```\n\n`mera` provides packages for installing in both *x86* and *aarch64* architectures.\nThe pip command will also install all the necessary dependencies to perform deployments with MERA. Note that some of the tutorials require some extra\ndependencies to be installed. Please check the tutorial's `README.md` file to check which other packages might be needed.\n\n## MERA Documentation\n\nPlease follow the instructions in [docs](docs/) on how to generate the HTML documentation for the MERA framework.\n\n## MERA Tutorials\nThe [tutorials](tutorials/) folder contains a list of tutorials on how to use the MERA compiler to deploy and run inference on typical deep neural network models using both PyTorch and TFLite frameworks. Check the corresponding docs for information about the tutorial contents.\n\n### Tutorial List\n\n- **PyTorch Resnet50 on Simulator** (`pytorch/resnet50_simulator.py`):\n\nContains an example on how to deploy and run a traced `resnet50` model in x86 host simulation.\nCan be executed with the following command:\n\n```\ncd tutorials/pytorch\npython3 resnet50_simulator.py\n```\n\n- **PyTorch Resnet50 on IP** (`pytorch/resnet50_ip.py`):\n\nContains an example on how to deploy and run a traced `resnet50` model in FPGA environment.\nNeeds to have FPGA runtime setup before running.\nCan be executed with the following command:\n\n```\ncd tutorials/pytorch\n# Needs to enable RUN_IP env in order to actually run the tutorial in HW\nRUN_IP=1 python3 resnet50_ip.py\n```\n\n- **TFLite EfficientNet on Simulator** (`tflite/efficientnet_simulator.py`):\n\nContains an example on how to deploy and run a quantized `efficientnet-lite1` and `efficientnet-lite4` model in x86 host simulation and run an example object classification.\nCan be executed with the following command:\n\n```\ncd tutorials/tflite\npython3 efficientnet_simulator.py\n```\n\n- **TFLite EfficientNet on IP** (`tflite/efficientnet_ip.py`):\n\nContains an example on how to deploy and run a quantized `efficientnet-lite1` and `efficientnet-lite4` model in\nFPGA environment and run an example object classification. Needs to have FPGA runtime setup before running.\nCan be executed with the following command:\n\n```\ncd tutorials/tflite\n# Needs to enable RUN_IP env in order to actually run the tutorial in HW\nRUN_IP=1 python3 efficientnet_ip.py\n```\n\n## License\n\nThis library is licensed under the Apache License Version 2.0. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Edgecortix-Inc/mera",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mera",
    "package_url": "https://pypi.org/project/mera/",
    "platform": null,
    "project_url": "https://pypi.org/project/mera/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Edgecortix-Inc/mera/issues",
      "Homepage": "https://github.com/Edgecortix-Inc/mera",
      "Web Page": "https://www.edgecortix.com"
    },
    "release_url": "https://pypi.org/project/mera/1.1/",
    "requires_dist": [
      "onednn-cpu-gomp (==2022.0.2)",
      "PyYAML",
      "pytest",
      "mera-tvm-full ; extra == 'full'",
      "tensorflow-aarch64 (<=2.7.1) ; extra == 'full'",
      "tflite (==2.4.0) ; extra == 'full'",
      "mera-tvm-host-only ; extra == 'host-only'",
      "tensorflow-aarch64 (<=2.7.1) ; extra == 'host-only'",
      "tflite (==2.4.0) ; extra == 'host-only'",
      "mera-tvm-runtime ; extra == 'runtime'"
    ],
    "requires_python": ">=3.6",
    "summary": "An heterogeneous deep learning compiler framework.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17079561,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fdd9137363cb8b8216d0ae4eab9ece2fbbe6a5b0f0c39e3e81cc0ad8ba7b68c0",
        "md5": "bdc421afabb7f91d02f4f839271f9690",
        "sha256": "2142088c50210d7ff896219b591c7e32ea34a3c093005dde155bbd1e876c0eb9"
      },
      "downloads": -1,
      "filename": "mera-1.1-py3-none-manylinux_2_27_aarch64.whl",
      "has_sig": false,
      "md5_digest": "bdc421afabb7f91d02f4f839271f9690",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20589,
      "upload_time": "2022-06-02T07:03:11",
      "upload_time_iso_8601": "2022-06-02T07:03:11.747603Z",
      "url": "https://files.pythonhosted.org/packages/fd/d9/137363cb8b8216d0ae4eab9ece2fbbe6a5b0f0c39e3e81cc0ad8ba7b68c0/mera-1.1-py3-none-manylinux_2_27_aarch64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "690a4ab6fd11a87dd0fd1dcd140cf84025a7d8fe471e9e357e5965dd26c938bf",
        "md5": "22926089458ae6ce860058c7ffdb8551",
        "sha256": "6fe2751ca6db364dde7519e96f1440c4c3a1db0afad91e1ee17b111d1536e151"
      },
      "downloads": -1,
      "filename": "mera-1.1-py3-none-manylinux_2_27_x86_64.whl",
      "has_sig": false,
      "md5_digest": "22926089458ae6ce860058c7ffdb8551",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20597,
      "upload_time": "2022-06-02T07:03:13",
      "upload_time_iso_8601": "2022-06-02T07:03:13.309556Z",
      "url": "https://files.pythonhosted.org/packages/69/0a/4ab6fd11a87dd0fd1dcd140cf84025a7d8fe471e9e357e5965dd26c938bf/mera-1.1-py3-none-manylinux_2_27_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}