{
  "info": {
    "author": "Robert Nies",
    "author_email": "robertjnies@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# MLDashboard\n\n![Tests Badge](https://github.com/RobertJN64/MLDashboard/actions/workflows/tests.yml/badge.svg)\n![Python Version Badge](https://img.shields.io/pypi/pyversions/MLDashboard)\n![License Badge](https://img.shields.io/github/license/RobertJN64/MLDashboard)\n\n![Image](image.png)\n\nMonitoring solution for tensorflow training. Particulary useful for\nimage classification models. Not compatible with google colab or other \nnotebook based runtimes.\n\n## Getting Started\n\nThis guide assumes you already understand python and tensorflow.\n\n## Installation\n```\npip install MLDashboard\n```\n\n## Examples\n\nSee [Examples](MLDashboard/Examples) for usage.\n\n## Quick Start\nTo start, you need a dashboard.json config file. This should be in the same directory as your script.\nHere is an example:\n```python\n{\n    \"modules\":[\n        [\n            [\"LossMetricsGraph\", {}],\n            [\"LossMetricsNumerical\", {}]\n        ],\n        [\n            [\"StatusModule\",{}],\n            [\"EmptyModule\", {}]\n        ]\n    ]\n}\n```\n\n\nNOTE: All code in this demo should be protected by\n```python\nif __name__ == '__main__':\n```\nto prevent multiprocessing conflicts.\n\nThe dashboard can easily by added to an existing machine learning project.\nImport the dashboard as shown.\n\n```python\nfrom MLDashboard.MLDashboardBackend import createDashboard\nfrom MLDashboard.MLCallbacksBackend import DashboardCallbacks, CallbackConfig\nfrom MLDashboard.MLCommunicationBackend import Message, MessageMode\n```\n\nBefore training starts, create the dashboard.\n```python\n#MAKE SURE YOU HAVE A DASHBOARD.JSON FILE IN THE SAME DIRECTORY AS YOUR SCRIPT\ndashboardProcess, updatelist, returnlist = createDashboard(config='dashboard.json')\n```\n\nConnect the callbacks to your training.\n```python\nconfig = CallbackConfig()\nlabels = list(range(0,10)) #labels should be customized for the data. This is for mnist number recognition\ncallback = DashboardCallbacks(updatelist, returnlist, model, x_train, y_train, x_test, y_test, labels, config)\n\nmodel.fit(x_train, y_train, epochs=10, callbacks=[callback])\n```\n\nAfter training ends, you can send evaluation stats to the dashboard.\n```python\nmodel.evaluate(x_test, y_test, batch_size=128, callbacks=[callback])\n```\n\nTo exit the dashboard cleanly, use the following code:\n```python\nupdatelist.append(Message(MessageMode.End, {}))\nprint(\"Exiting cleanly...\")\ndashboardProcess.join()\nprint(\"Dashboard exited.\")\n#This handles any extra data that the dashboard sent, such as save commands\ncallback.HandleRemaingCommands()\n```\n\nHere is a full example with python code:\n```python\nimport os\nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = '2' #stops agressive error message printing\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom MLDashboard.MLDashboardBackend import createDashboard\nfrom MLDashboard.MLCallbacksBackend import DashboardCallbacks, CallbackConfig\nfrom MLDashboard.MLCommunicationBackend import Message, MessageMode\n\ndef run():\n    print(\"Starting interactive dashboard demo...\")\n    print(\"Setting up dashboard...\")\n\n    #Create dashboard and return communication tools (this starts the process)\n    #MAKE SURE YOU HAVE A DASHBOARD.JSON FILE IN THE SAME DIRECTORY AS YOUR SCRIPT\n    dashboardProcess, updatelist, returnlist = createDashboard(config='dashboard.json')\n\n    print(\"Loading data...\")\n    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n    print(\"Formatting data...\")\n    x_train = x_train.reshape(-1, 784).astype(\"float32\") / 255.0\n    x_test = x_test.reshape(-1, 784).astype(\"float32\") / 255.0\n\n    print(\"Sampling data...\")\n    # Limit the train data to 10000 samples\n    x_train = x_train[:10000]\n    y_train = y_train[:10000]\n    # Limit test data to 1000 samples\n    x_test = x_test[:1000]\n    y_test = y_test[:1000]\n\n    print(\"Creating model...\")\n    model = keras.Sequential([keras.layers.Dense(128, activation='relu'), keras.layers.Dense(10)])\n\n    model.compile(optimizer='adam', metrics=[\"accuracy\"], \n                  loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True))\n\n\n    print(\"Creating callbacks...\")\n    #Callbacks require update and return list for communicating with dashboard\n    #Model and datasets are useful for sending that data to certain modules\n    config = CallbackConfig()\n    labels = list(range(0,10))\n    callback = DashboardCallbacks(updatelist, returnlist, model, x_train, y_train, x_test, y_test, labels, config)\n\n    model.fit(x_train, y_train, epochs=50, callbacks=[callback])\n\n    print(\"Evaluating model...\")\n    #This is connected to the callback so the data is sent to the dashboard\n    model.evaluate(x_test, y_test, batch_size=128, callbacks=[callback])\n\n    updatelist.append(Message(MessageMode.End, {}))\n    print(\"Exiting cleanly...\")\n    dashboardProcess.join()\n    print(\"Dashboard exited.\")\n    #This handles any extra data that the dashboard sent, such as save commands\n    callback.HandleRemaingCommands()\n\nif __name__ == '__main__':\n    run()\n```\n\n## Other guides:\n - [Customizing the Dashboard](MLDashboard/Guides/Customization.md)\n - [Creating a Custom Module](MLDashboard/Guides/CustomModules.md)\n - [Creating Custom Callbacks (advanced)](MLDashboard/Guides/CustomCallbacks.md)\n - [Module Documentation](MLDashboard/Guides/Modules.md) Coming soon!\n - [Data Structure Documentation](MLDashboard/Guides/DataStructures.md)\n - [Primary Functions Documentation](MLDashboard/Guides/Functions.md)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RobertJN64/MLDashboard",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MLDashboard",
    "package_url": "https://pypi.org/project/MLDashboard/",
    "platform": null,
    "project_url": "https://pypi.org/project/MLDashboard/",
    "project_urls": {
      "Homepage": "https://github.com/RobertJN64/MLDashboard"
    },
    "release_url": "https://pypi.org/project/MLDashboard/1.4.2/",
    "requires_dist": [
      "matplotlib",
      "tensorflow",
      "numpy",
      "pillow"
    ],
    "requires_python": ">=3.8",
    "summary": "Machine learning dashboard that integrates with tensorflow. Great for monitoring training. Has tools for classification and images",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17407934,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "add57491540cf00ae9871ba363424188d05c6547d9c84274450a039d708bec8a",
        "md5": "404c750e8ac4788753aacb4e1cc11ca8",
        "sha256": "65828159a4de5f25cde6a6d84b7145aacb827eef1b5f4c04c70abe7227c61ec8"
      },
      "downloads": -1,
      "filename": "MLDashboard-1.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "404c750e8ac4788753aacb4e1cc11ca8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 77648,
      "upload_time": "2023-03-23T01:31:32",
      "upload_time_iso_8601": "2023-03-23T01:31:32.022500Z",
      "url": "https://files.pythonhosted.org/packages/ad/d5/7491540cf00ae9871ba363424188d05c6547d9c84274450a039d708bec8a/MLDashboard-1.4.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ce45bb15b771db13aa3e9cccc527250b5c5c4b6fb1ba6026df833c6356b4a6c",
        "md5": "4d8a7c7350385af6ff10bc6482141cc4",
        "sha256": "3b6e9b1bf75d6279b6b91db827233350bb78c4b616fa76e66ee821c83ed32797"
      },
      "downloads": -1,
      "filename": "MLDashboard-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4d8a7c7350385af6ff10bc6482141cc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 71086,
      "upload_time": "2023-03-23T01:31:33",
      "upload_time_iso_8601": "2023-03-23T01:31:33.223629Z",
      "url": "https://files.pythonhosted.org/packages/8c/e4/5bb15b771db13aa3e9cccc527250b5c5c4b6fb1ba6026df833c6356b4a6c/MLDashboard-1.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}