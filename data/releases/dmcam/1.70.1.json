{
  "info": {
    "author": "Zou yao",
    "author_email": "zouyao@smarttof.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Introduction\r\n\r\nThe **dmcam** Python extension is part of [SmartToF SDK](https://github.com/smarttofsdk/SDK), it's developed for python programmers to interacting with SmartToF Module. \r\n\r\n\r\n\r\n# Quick example\r\n~~~Python\r\nimport sys, os\r\nimport numpy as np\r\nimport time\r\n\r\nimport dmcam\r\n\r\n# --  init the lib with default log file\r\ndmcam.init(None)\r\n# --  init with specified log file\r\n# dmcam.init(\"test.log\")\r\n\r\n# -- set debug level\r\ndmcam.log_cfg(dmcam.LOG_LEVEL_INFO, dmcam.LOG_LEVEL_DEBUG, dmcam.LOG_LEVEL_NONE)\r\n\r\n# -- list device\r\nprint(\" Scanning dmcam device ..\")\r\ndevs = dmcam.dev_list()\r\nif devs is None:\r\n    print(\" No device found\")\r\n    sys.exit(1)\r\n\r\nprint(\"found %d device\" % len(devs))\r\n\r\nfor i in range(len(devs)):\r\n    print(\"#%d: %s\" % (i, dmcam.dev_get_uri(devs[i], 256)[0]))\r\n\r\nprint(\" Open dmcam device ..\")\r\n# open the first device\r\ndev = dmcam.dev_open(devs[0])\r\n# Or open by URI\r\n# dev = dmcam.dev_open_by_uri(\"xxxx\")\r\nassert dev is not None\r\n\r\n# - set capture config  -\r\ncap_cfg = dmcam.cap_cfg_t()\r\ncap_cfg.cache_frames_cnt = 10  # framebuffer = 10\r\ncap_cfg.on_error = None        # use cap_set_callback_on_error to set cb\r\ncap_cfg.on_frame_rdy = None    # use cap_set_callback_on_frame_ready to set cb\r\ncap_cfg.en_save_replay = True  # True = save replay, False = not save\r\ncap_cfg.en_save_dist_u16 = False # True to save dist stream for openni replay\r\ncap_cfg.en_save_gray_u16 = False # True to save gray stream for openni replay\r\ncap_cfg.fname_replay = os.fsencode(\"dm_replay.oni\")  # set replay filename\r\n\r\ndmcam.cap_config_set(dev, cap_cfg)\r\n# dmcam.cap_set_callback_on_frame_ready(dev, on_frame_rdy)\r\n# dmcam.cap_set_callback_on_error(dev, on_cap_err)\r\n\r\nprint(\" Set paramters ...\")\r\nwparams = {\r\n    dmcam.PARAM_INTG_TIME: dmcam.param_val_u(),\r\n    dmcam.PARAM_FRAME_RATE: dmcam.param_val_u(),\r\n}\r\nwparams[dmcam.PARAM_INTG_TIME].intg.intg_us = 1000\r\nwparams[dmcam.PARAM_FRAME_RATE].frame_rate.fps = 20\r\n\r\nif not dmcam.param_batch_set(dev, wparams):\r\n    print(\" set parameter failed\")\r\n\r\nprint(\" Start capture ...\")\r\ndmcam.cap_start(dev)\r\n\r\nf = bytearray(320 * 240 * 4 * 2)\r\nprint(\" sampling 100 frames ...\")\r\ncount = 0\r\nrun = True\r\nwhile run:\r\n    # get one frame\r\n    finfo = dmcam.frame_t()\r\n    ret = dmcam.cap_get_frames(dev, 1, f, finfo)\r\n    # print(\"get %d frames\" % ret)\r\n    if ret > 0:\r\n        w = finfo.frame_info.width\r\n        h = finfo.frame_info.height\r\n\r\n        print(\" frame @ %d, %d, %dx%d\" %\r\n              (finfo.frame_info.frame_idx, finfo.frame_info.frame_size, w, h))\r\n\r\n        dist_cnt, dist = dmcam.frame_get_distance(dev, w * h, f, finfo.frame_info)\r\n        gray_cnt, gray = dmcam.frame_get_gray(dev, w * h, f, finfo.frame_info)\r\n        # dist = dmcam.raw2dist(int(len(f) / 4), f)\r\n        # gray = dmcam.raw2gray(int(len(f) / 4), f)\r\n\r\n        count += 1\r\n        if count >= 100:\r\n            break\r\n\r\n    else:\r\n        break\r\n    time.sleep(0.01)\r\n    # break\r\n\r\nprint(\" Stop capture ...\")\r\ndmcam.cap_stop(dev)\r\n\r\nprint(\" Close dmcam device ..\")\r\ndmcam.dev_close(dev)\r\n\r\ndmcam.uninit()\r\n~~~\r\n\r\n# Changelog\r\n\r\n* 1.70.0:\r\n  * **Recommend to upgrade device firmware to 1.70 to this SDK**\r\n  * **API change**\r\n    * Remove deprecated *dmcam_cmap_float*\r\n    * change *dmcam_param_roi_t* structure\r\n    * remove filter id DMCAM_FILTER_ID_BINNING \r\n  * **New**:  support dual-freq of SONY IMX556\r\n  * **New**:  support binning mode\r\n    - EPC driver: 2x2, 4x4 and 2x4\r\n    - IMX driver: 2x2, 4x4, and 8x8\r\n  * **New**:  ethernet based Tof camera support \r\n  * **Enhance**: Use parameter set/get API with parameter id PARAM_ROI to set ROI and Binning instead of using filter interface. \r\n  * **Enhance**: better support replay in HDR /Dual-freq/Binning mode\r\n  * **FIX**:\r\n    * C sample compiling issue\r\n    * wrong frame info when seeking frames of oni file\r\n    * First frame checksum error sometimes\r\n* 1.68.2:\r\n  - **Fix:**  Correct to set gray/ir value to be zero when overexposure.\r\n  - **New**:  add DMCAM_FILTER_ID_BINNING to support pix binning\r\n  - **Enhance**: better support ROI.\r\n* 1.68.1:\r\n  * **Enhance:**  Optimize TC-E2 accuracy and error correction of calibration data.\r\n  * **New**: add parameter id *PARAM_INFO_LENS* for user to get lens parameter through *dmcam_param_batch_get*\r\n* 1.68.0:\r\n  - **Enhance:**  \r\n    - replay supports gray frames related with ambient compensation from FW 164\r\n    - replay support switching between HDR to normal mode.\r\n    - *dmcam_dev_get_uri* returns URI with token for eth devices\r\n    - Enhance performance of *dmcam_frame_get_pcl_xyzd* and *dmcam_frame_get_pcl_xyzi*\r\n  - **New**: \r\n    - add  *dmcam_frame_get_pcl_xyzi* api to get point clouds with gray as texture\r\n    - add *dmcam_cap_seek_frame* api to seek frames when device is replay-file\r\n    - add *dmcam_frame_get_dist_raw* for user to get raw distance without calibration\r\n    - For sony sensors:\r\n      - add compression support for SONY sensor\r\n      - Filter chain optimized\r\n      - Calibration method refined.\r\n  - **Fix**:\r\n    - lens paramter file not closed after open\r\n    - recorded replay file without timestamp\r\n    - device cannot close properly sometimes (FW ver= 164/165)\r\n* 1.62.2:\r\n  - **FIX:**  the problem that replay file size > 2GB may not work properly under windows \r\n  - **Enhance**: some kind of error tolerance on playing corrupted replay file.\r\n  - **Enhance**:  add *en_fdev_rewind* in *dmcam_cap_cfg_t* to allow rewind replay when use dmcam replay file as device.\r\n* 1.62.1:\r\n  - **Enhance:** during file replay mode, **if fps is set to 0**,  frame capture is only ongoing after invoking *dmcam_get_frames/dmcam_get_frame*  . This is usefully to pause & resume  the replay at application level\r\n* 1.62.0:\r\n  * **Fix:** replay problem when switch from QVGA to VGA\r\n  * **Fix:** replay file cannot played in Niviewer of OpenNI\r\n  * **Enhance:** optimize env-light compensation\r\n* 1.61.6:\r\n  * **Enhance:** optimize DIST&GRAY calc performance further (boost about 50%). TC-E3 can reach up-to 115fps @ Cortex-A7 1Ghz\r\n  * **FIX:** TC-E3 replay problem\r\n  * **FIX:**  wrong return value of *dmcam_cap_get_frames* when the host process is slow.\r\n  * **New**: support SONY sensors\r\n  * **New**: support env-light compensation\r\n* 1.61.2: \r\n  * **Enhance** : optimize DIST&GRAY calc performance (boost about 40%)\r\n  * **FIX**: *dmcam_frame_get_pcl_xyzd* and *dmcam_frame_get_pcl_xyz*  now return number of points (x,y,z) / (x,y,z,d) equal to the number of pixels of the depth image. Invalid point in the cloud is denoted as (0,0,0) and (0,0,0,0) respectively.\r\n* 1.61.1: **Fix** a possible problem cause memory exhaustion.\r\n* 1.61.0: **Fix**: unicode problem, all python API should use 'bytes' instead of 'str' to invoke  C API in type of 'char*' \r\n* 1.60.0: Major release\r\n  * Support save replay and play replay.\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smarttofsdk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dmcam",
    "package_url": "https://pypi.org/project/dmcam/",
    "platform": "",
    "project_url": "https://pypi.org/project/dmcam/",
    "project_urls": {
      "Homepage": "https://github.com/smarttofsdk"
    },
    "release_url": "https://pypi.org/project/dmcam/1.70.1/",
    "requires_dist": [
      "numpy (>=1.12.0)"
    ],
    "requires_python": "",
    "summary": "DM camera python extension",
    "version": "1.70.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8760479,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b949d9e5817c58f7a48f8e5d4bae89979355ce93c7dfa1724b741ea176b7ca9f",
        "md5": "2c89148bcd528a19b37647d999eb8fdb",
        "sha256": "da6f2f0d915193f1256506ba3c383766105d7a353fd5ad4848d2f7d04a00db97"
      },
      "downloads": -1,
      "filename": "dmcam-1.70.1-cp27-cp27m-win32.whl",
      "has_sig": false,
      "md5_digest": "2c89148bcd528a19b37647d999eb8fdb",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 1013932,
      "upload_time": "2019-08-06T17:54:32",
      "upload_time_iso_8601": "2019-08-06T17:54:32.038601Z",
      "url": "https://files.pythonhosted.org/packages/b9/49/d9e5817c58f7a48f8e5d4bae89979355ce93c7dfa1724b741ea176b7ca9f/dmcam-1.70.1-cp27-cp27m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fce9314071f37d0c694e5e627462361d92c919203a707ca0f96b2ce99db7bd9e",
        "md5": "1c6de0d5006dd866b45db65d3939a7df",
        "sha256": "c06d8432c04ab72f921b2ffe24e36fba0988549e27a1231da4b464b659631ee8"
      },
      "downloads": -1,
      "filename": "dmcam-1.70.1-cp34-cp34m-win32.whl",
      "has_sig": false,
      "md5_digest": "1c6de0d5006dd866b45db65d3939a7df",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": null,
      "size": 1014037,
      "upload_time": "2019-08-06T17:54:35",
      "upload_time_iso_8601": "2019-08-06T17:54:35.411657Z",
      "url": "https://files.pythonhosted.org/packages/fc/e9/314071f37d0c694e5e627462361d92c919203a707ca0f96b2ce99db7bd9e/dmcam-1.70.1-cp34-cp34m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c626025116fd58c9fbea28af2e5f2c37152c4c93e65332cc2e676cc48c2f62c9",
        "md5": "e06c26e669c4de5c44234c5798f64d71",
        "sha256": "9499402a425cbd9fad5b7d18c1b6a4113f3b71fa0150444c7e40a300898af7e2"
      },
      "downloads": -1,
      "filename": "dmcam-1.70.1-cp35-cp35m-win32.whl",
      "has_sig": false,
      "md5_digest": "e06c26e669c4de5c44234c5798f64d71",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 1015400,
      "upload_time": "2019-08-06T17:54:38",
      "upload_time_iso_8601": "2019-08-06T17:54:38.452710Z",
      "url": "https://files.pythonhosted.org/packages/c6/26/025116fd58c9fbea28af2e5f2c37152c4c93e65332cc2e676cc48c2f62c9/dmcam-1.70.1-cp35-cp35m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10cd41b5c09a29fa5d0a30b609cd4528e6ea977542bac5f2d8d178319d219c8e",
        "md5": "40d67851cb29e62b5fa76b52a0cd936d",
        "sha256": "f90cdafd36987ca0936b7d70f2e1feb9d7ad9daf2924f8421dc60487ae144f33"
      },
      "downloads": -1,
      "filename": "dmcam-1.70.1-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "40d67851cb29e62b5fa76b52a0cd936d",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 1015401,
      "upload_time": "2019-08-06T17:54:41",
      "upload_time_iso_8601": "2019-08-06T17:54:41.116350Z",
      "url": "https://files.pythonhosted.org/packages/10/cd/41b5c09a29fa5d0a30b609cd4528e6ea977542bac5f2d8d178319d219c8e/dmcam-1.70.1-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7646e0b1b6959e5d226596ac9b00e6e484a5e82f0a5cad4619c0a93e65a2e89",
        "md5": "9d7607bcb3f30e8f48bfad19a47e7c2a",
        "sha256": "cb3d02a78d8534caa1aa9922031dd7b767f89f41809015dd2a8025d200ae666a"
      },
      "downloads": -1,
      "filename": "dmcam-1.70.1-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "9d7607bcb3f30e8f48bfad19a47e7c2a",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 1016276,
      "upload_time": "2019-08-06T17:54:44",
      "upload_time_iso_8601": "2019-08-06T17:54:44.004118Z",
      "url": "https://files.pythonhosted.org/packages/c7/64/6e0b1b6959e5d226596ac9b00e6e484a5e82f0a5cad4619c0a93e65a2e89/dmcam-1.70.1-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}