{
  "info": {
    "author": "Lumigo LTD (https://lumigo.io)",
    "author_email": "support@lumigo.io",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![CircleCI](https://circleci.com/gh/lumigo-io/python_tracer/tree/master.svg?style=svg&circle-token=421fefe82bcad1c17c4116f154e25e32ebc90f2c)\n![Version](https://badge.fury.io/py/lumigo-tracer.svg)\n![codecov](https://codecov.io/gh/lumigo-io/python_tracer/branch/master/graph/badge.svg?token=6EgXIlefwG)\n\nThis is lumigo/python_tracer, Lumigo's Python agent for distributed tracing and performance monitoring.\n\nSupported Python Runtimes: 3.6, 3.7, 3.8\n\n# Usage\nThe package allows you to pursue automated metric gathering through Lambda Layers, automated metric gathering and instrumentation through the Serverless framework, or manual metric creation and implementation.\n\n## With Lambda layers\n* When configuring your Lambda functions, include the appropriate Lambda Layer ARN [from these tables](https://github.com/lumigo-io/python_tracer/tree/master/layers)\n\n*Note* - Lambda Layers are an optional feature. If you decide to use this capability, the list of Lambda layers available is available [here.](https://github.com/lumigo-io/lumigo-node/blob/master/layers).\n\nLearn more in our [documentation on auto-instrumentation](https://docs.lumigo.io/docs/auto-instrumentation).\n\n## With Serverless framework \n* To configure the Serverless Framework to work with Lumigo, simply install our plugin: [**serverless-lumigo-plugin**](https://github.com/lumigo-io/serverless-lumigo-plugin/blob/master/README.md)\n\n\n## Manually\n\nTo manually configure Lumigo in your Lambda functions:\n\n* Install the package: \n\n```bash\npip install lumigo_tracer\n```\n\n* Import the package in your Lambda code: \n\n```python\n`from lumigo_tracer import lumigo_tracer`\n```\n\n* Next, wrap your `handler` in Lumigo's `trace` function (note: replace `YOUR-TOKEN-HERE` with your Lumigo API token):\n\n```python\n@lumigo_tracer(token='YOUR-TOKEN-HERE')\ndef my_lambda(event, context):\n    print('I can finally troubleshoot!')\n```\n\n* Your function is now fully instrumented\n\n## Configuration\n`@lumigo/python_tracer` offers several different configuration options. Pass these to the Lambda function as environment variables:\n\n* `LUMIGO_DEBUG=TRUE` - Enables debug logging\n* `LUMIGO_SECRET_MASKING_REGEX=[\"regex1\", \"regex2\"]` - Prevents Lumigo from sending keys that match the supplied regular expressions. All regular expressions are case-insensitive. By default, Lumigo applies the following regular expressions: `[\".*pass.*\", \".*key.*\", \".*secret.*\", \".*credential.*\", \".*passphrase.*\"]`. \n* `LUMIGO_DOMAINS_SCRUBBER=[\".*secret.*\"]` - Prevents Lumigo from collecting both request and response details from a list of domains. This accepts a comma-separated list of regular expressions that is JSON-formatted. By default, the tracer uses `[\"secretsmanager\\..*\\.amazonaws\\.com\", \"ssm\\..*\\.amazonaws\\.com\", \"kms\\..*\\.amazonaws\\.com\"]`. **Note** - These defaults are overridden when you define a different list of regular expressions.\n* `LUMIGO_SWITCH_OFF=TRUE` - In the event a critical issue arises, this turns off all actions that Lumigo takes in response to your code. This happens without a deployment, and is picked up on the next function run once the environment variable is present.\n\n### Step Functions\nIf your function is part of a set of step functions, you can add the flag `step_function: true` to the Lumigo tracer import. Alternatively, you can configure the step function using an environment variable `LUMIGO_STEP_FUNCTION=True`. When this is active, Lumigo tracks all states in the step function in a single transaction, easing debugging and observability.\n\n```\n@lumigo_tracer(token='XXX', step_function=True)\ndef my_lambda(event, context):\n    print('Step function visibility!')\n```\n\nNote: the tracer adds the key `\"_lumigo\"` to the return value of the function. \n\nIf you override the `\"Parameters\"` configuration, add `\"_lumigo.$\": \"$._lumigo\"` to ensure this value is still present.\n\nBelow is an example configuration for a Lambda function that is part of a step function that has overridden its parameters:\n\n```\n\"States\": {\n    \"state1\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-west-2:ACCOUNT:function:FUNCTION_NAME\",\n      \"Parameters\": {\n          \"Changed\": \"parameters\",\n          \"_lumigo.$\": \"$._lumigo\"\n        },\n      \"Next\": \"state2\"\n    },\n    \"state2\": {\n      \"Type\": \"pass\",\n      \"End\": true\n    }\n}\n```\n\n### Logging Programmatic Errors\nLumigo provides the `report_error` function, which you can use to publish error logs that are visible to the entire platform. To log programmatic errors:\n\n* Import the `report_error` function with the following code: `from lumigo_tracer import report_error`\n* Use the `report_error` function with the message you wish to send: `report_error(\"your-message-here\")`\n\n### Adding Execution Tags\nYou can add execution tags to a function with dynamic values using the parameter `add_execution_tag`.\n\nThese tags will be searchable from within the Lumigo platform.\n\n**Limitations**\n* Up to 50 execution tags\n* Each tag key length can have 50 characters at most.\n* Each tag value length can have 70 characters at most.\n\n# Frameworks\n\nIn addition to native code integration, Lumigo also provides tools for integrating with popular Python frameworks.\n\n## Chalice\n\nTo work with the `lumigo_tracer` in a Chalice-driven function, perform the following:\n* Import the `LumigoChalice` tracer: `from lumigo_tracer import LumigoChalice`\n* Encapsulate your Chalice app within the LumigoChalice wrapper:\n\n```python\napp = Chalice(app_name='chalice')\napp = LumigoChalice(app, token=\"XXX\")\n```\n\n## Sentry/Raven Lambda Integration\nTo integrate the `lumigo_tracer` with Raven, perform the following:\n\n* Include the ` lumigo_tracer` attribute in your code: `from lumigo_tracer import lumigo_tracer`\n* Include the `@lumigo_tracer` decorator **beneath** the Raven decorator:\n\n```python\n@RavenLambdaWrapper()\n@lumigo_tracer(token='XXX')\ndef lambda_handler (event, context):  return  {\n 'statusCode' :  200,\n 'body' : json.dumps( 'Hi!' ) }\n```\n\n# Contributing\n\nContributions to this project are welcome from all! Below are a couple pointers on how to prepare your machine, as well as some information on testing.\n\n## Preparing your machine\nGetting your machine ready to develop against the package is a straightforward process:\n\n1. Clone this repository, and open a CLI in the cloned directory\n1. Create a virtual environment for the project `virtualenv venv -p python3`\n1. Activate the virtualenv: `. venv/bin/activate`\n1. Install dependencies: `pip install -r requirements.txt`\n1. Navigate to the source directory: `cd src` and \n1. Run the setup script: `python setup.py develop`.\n1. Run `pre-commit install` in your repository to install pre-commit hooks\n\n**Note**: If you are using pycharm, ensure that you set it to use the virtualenv virtual environment manager. This is available in the menu under PyCharm -> Preferences -> Project -> Interpreter\n\n\n## Running the test suite\nWe've provided an easy way to run the unit test suite:\n\n* To run all unit tests, simply run `py.test` in the root folder.\n* To deploy services for component tests, run `sls deploy` from the root test directory. This only needs to take place when the resources change.\n* To run component tests, add the `--all` flag: `py.test --all`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lumigo-io/python_tracer.git",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lumigo-tracer",
    "package_url": "https://pypi.org/project/lumigo-tracer/",
    "platform": "",
    "project_url": "https://pypi.org/project/lumigo-tracer/",
    "project_urls": {
      "Homepage": "https://github.com/lumigo-io/python_tracer.git"
    },
    "release_url": "https://pypi.org/project/lumigo-tracer/1.1.186/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lumigo Tracer for Python v3.6 / v3.7 runtimes",
    "version": "1.1.186",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17261988,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01ace6b38ac23825e290396fee48e513c4cd5194926528268785f2f0d846f151",
        "md5": "82cb94a259c0146fb09f05b434f5d320",
        "sha256": "7a26654cf5adbe67a09ea61f0d636c51b0dbd49d2a77674cc9d67191455715a6"
      },
      "downloads": -1,
      "filename": "lumigo_tracer-1.1.186-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "82cb94a259c0146fb09f05b434f5d320",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 68695,
      "upload_time": "2021-12-27T10:36:41",
      "upload_time_iso_8601": "2021-12-27T10:36:41.722968Z",
      "url": "https://files.pythonhosted.org/packages/01/ac/e6b38ac23825e290396fee48e513c4cd5194926528268785f2f0d846f151/lumigo_tracer-1.1.186-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}