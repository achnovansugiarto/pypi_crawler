{
  "info": {
    "author": "Lovely Systems",
    "author_email": "office@lovelysystems.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Lovely Recipes\n**************\n\n==========================\nFilesystem Buildout Recipe\n==========================\n\nCreating Directories\n====================\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... path = ${buildout:directory}/mystuff\n    ... \"\"\")\n    >>> print system(buildout),\n    Installing data-dir.\n    data-dir: Creating directory /sample-buildout/mystuff\n\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  mystuff\n    d  parts\n\nIf we change the directory name the old directory ('mystuff') is not deleted.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... path = ${buildout:directory}/otherdir\n    ... \"\"\")\n    >>> print system(buildout),\n    Uninstalling data-dir.\n    Installing data-dir.\n    data-dir: Creating directory /sample-buildout/otherdir\n\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  mystuff\n    d  otherdir\n    d  parts\n\nWe can also create a full path.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... path = ${buildout:directory}/with/subdir\n    ... \"\"\")\n    >>> print system(buildout),\n    Uninstalling data-dir.\n    Installing data-dir.\n    data-dir: Cannot create /sample-buildout/with/subdir. /sample-buildout/with is not a directory.\n    While:\n      Installing data-dir.\n    Error: Invalid Path\n\nBut we need to activate this function explicitely.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... createpath = True\n    ... path = ${buildout:directory}/with/subdir\n    ... \"\"\")\n    >>> print system(buildout),\n    Installing data-dir.\n    data-dir: Creating parent directory /sample-buildout/with\n    data-dir: Creating directory /sample-buildout/with/subdir\n\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  mystuff\n    d  otherdir\n    d  parts\n    d  with\n    >>> ls(sample_buildout + '/with')\n    d  subdir\n\nThere is no update method so the install method is used upon update\nand the directories get recreated.\n\n    >>> rmdir(sample_buildout + '/with')\n    >>> print system(buildout),\n    Updating data-dir.\n    The recipe for data-dir doesn't define an update method. Using its install method.\n    data-dir: Creating parent directory /sample-buildout/with\n    data-dir: Creating directory /sample-buildout/with/subdir\n\nWe can change the owner of the created directory if run as root. This is tested\nin mkdir-root.txt.\n\nIf not run as root, setting the owner is an error:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... createpath = True\n    ... path = ${buildout:directory}/another/with/subdir\n    ... owner = nobody\n    ... \"\"\")\n    >>> print system(buildout),\n    While:\n      Installing.\n      Getting section data-dir.\n      Initializing part data-dir.\n    Error: Only root can change the owner to nobody.\n\n\nIt is an error when the user does not exist:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = data-dir\n    ... find-links = http://download.zope.org/distribution\n    ...\n    ... [data-dir]\n    ... recipe = lovely.recipe:mkdir\n    ... createpath = True\n    ... path = ${buildout:directory}/another/with/subdir\n    ... owner = someuser\n    ... \"\"\")\n    >>> print system(buildout),\n    While:\n      Installing.\n      Getting section data-dir.\n      Initializing part data-dir.\n    Error: The user someuser does not exist.\n\n\nCreating Files\n==============\n\nThe mkfile recipe creates one or more files with a given path, content and\npermissions.\n\nNote that the parent directory needs to exist, otherwise a user error\nis raised.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = script\n    ...\n    ... [script]\n    ... recipe = lovely.recipe:mkfile\n    ... path = /x/y/file.sh\n    ... content = hoschi\n    ... mode = 0755\n    ... \"\"\")\n    >>> print system(buildout)\n    Uninstalling data-dir.\n    Installing script.\n    script: Cannot create file /x/y/file.sh. /x/y is not a directory.\n    While:\n      Installing script.\n    Error: Invalid path\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = script\n    ...\n    ... [script]\n    ... recipe = lovely.recipe:mkfile\n    ... path = file.sh\n    ... content = hoschi\n    ... mode = 0755\n    ... \"\"\")\n    >>> print system(buildout)\n    Installing script.\n    script: Writing file /sample-buildout/file.sh\n    <BLANKLINE>\n\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    -  file.sh\n    d  mystuff\n    d  otherdir\n    d  parts\n    d  with\n\nThe content is written to the file.\n\n    >>> cat(sample_buildout, 'file.sh')\n    hoschi\n\nAnd the mode is set.\n\n    >>> import os, stat\n    >>> path = os.path.join(sample_buildout, 'file.sh')\n    >>> oct(stat.S_IMODE(os.stat(path)[stat.ST_MODE]))\n    '0755'\n\nIf we change the filename the old file is deleted.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = script\n    ...\n    ... [script]\n    ... recipe = lovely.recipe:mkfile\n    ... path = newfile.sh\n    ... content = hoschi\n    ... mode = 0755\n    ... \"\"\")\n    >>> print system(buildout)\n    Uninstalling script.\n    Installing script.\n    script: Writing file /sample-buildout/newfile.sh\n    <BLANKLINE>\n\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  mystuff\n    -  newfile.sh\n    d  otherdir\n    d  parts\n    d  with\n\nWe can also specify to create the path for the file.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = script\n    ...\n    ... [script]\n    ... recipe = lovely.recipe:mkfile\n    ... createpath = On\n    ... path = subdir/for/file/file.sh\n    ... content = hoschi\n    ... mode = 0755\n    ... \"\"\")\n    >>> print system(buildout)\n    Uninstalling script.\n    Installing script.\n    script: Creating directory /sample-buildout/subdir/for/file\n    script: Writing file /sample-buildout/subdir/for/file/file.sh\n\n    >>> ls(sample_buildout + '/subdir/for/file')\n    -  file.sh\n\n\nFile Variations\n---------------\n\nA common use-case is to have variations of a file, for example if init\nscripts have to be created. As an example we create two files with\nvariations \"1\" and \"2\". These variations can be used in the file path\nand in the content of the file via normal string formatting notation.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = script\n    ...\n    ... [script]\n    ... recipe = lovely.recipe:mkfile\n    ... variations = 1 2\n    ... path = prod_%(variation)s.ini\n    ... content = hoschi variation %(variation)s\n    ... mode = 0755\n    ... \"\"\")\n    >>> print system(buildout)\n    Uninstalling script.\n    Installing script.\n    script: Writing file ...sample-buildout/prod_1.ini\n    script: Writing file ...sample-buildout/prod_2.ini\n\n    >>> cat(sample_buildout, 'prod_1.ini')\n    hoschi variation 1\n    >>> cat(sample_buildout, 'prod_2.ini')\n    hoschi variation 2\n\n=======================\nEgg Box Buildout Recipe\n=======================\n\nThis recipe is derivd from zc.recipe.egg, but instead of just creating\npaths, it generates a directory structure for each top-level\nnamespace. It is also possible to automatically zip the generated\ndirectories which is espacially usefull if used in Google Appengine\nenvironments. The recipies path option is filled with the created path\nso it can be referenced by other buildout sections which may want to\nuse the recipe.\n\n    >>> import os\n    >>> lovely_recipy_loc = os.path.dirname(os.path.dirname(os.path.dirname(\n    ...     os.path.dirname(os.path.dirname(__file__)))))\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = %(loc)s\n    ... parts = packages\n    ... find-links = %(server)s\n    ... index = %(server)s/index\n    ...\n    ... [packages]\n    ... recipe = lovely.recipe:eggbox\n    ... eggs = demo\n    ...        lovely.recipe\n    ... interpreter = py\n    ... \"\"\" % dict(loc=lovely_recipy_loc, server=link_server))\n\n\n    >>> print system(buildout)\n    Develop: '...lovely.recipe'\n    Getting distribution for 'demo'.\n    Got demo 0.4c1.\n    Getting distribution for 'demoneeded'.\n    Got demoneeded 1.2c1.\n    Installing packages.\n    Generated script '...sample-buildout/bin/demo'.\n    Generated interpreter '...sample-buildout/bin/py'.\n\nWe now have a zip file for each top-level directory. Note that the\nzip-files are ending with .egg for pkg_resources compatibility.\n\n    >>> ls(sample_buildout + '/parts/packages')\n    -  easy_install.py.egg\n    -  eggrecipedemo.py.egg\n    -  eggrecipedemoneeded.py.egg\n    -  lovely.egg\n    -  pkg_resources.py.egg\n    -  setuptools.egg\n    -  zc.egg\n\nThe generated interpreter now has the demo zip file in the path.\n\n    >>> cat(sample_buildout + '/bin/py')\n    #!...\n    sys.path[0:0] = [\n      '/sample-buildout/parts/packages/easy_install.py.egg',\n      '/sample-buildout/parts/packages/eggrecipedemo.py.egg',\n      '/sample-buildout/parts/packages/eggrecipedemoneeded.py.egg',\n      '/sample-buildout/parts/packages/lovely.egg',\n      '/sample-buildout/parts/packages/pkg_resources.py.egg',\n      '/sample-buildout/parts/packages/setuptools.egg',\n      '/sample-buildout/parts/packages/zc.egg',\n      ]...\n\nIt is possible to disable zipping. And also to exclude or include\npatterns of files. So for example we can strip down the uneeded\nsetuptools egg. We can also create a script.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = %(loc)s\n    ... parts = packages test\n    ... find-links = %(server)s\n    ... index = %(server)s/index\n    ...\n    ... [packages]\n    ... zip = False\n    ... recipe = lovely.recipe:eggbox\n    ... eggs = demo\n    ...        lovely.recipe\n    ... excludes = ^setuptools/.*\n    ...            ^easy_install.*\n    ...            ^pkg_resources.*\n    ...\n    ... [test]\n    ... recipe = zc.recipe.egg:scripts\n    ... eggs = lovely.recipe\n    ... extra-paths = ${packages:path}\n    ... interpreter = py\n    ... \"\"\" % dict(loc=lovely_recipy_loc, server=link_server))\n    >>> print system(buildout),\n    Develop: '/Users/bd/sandbox/lovely.recipe'\n    Uninstalling packages.\n    Installing packages.\n    Generated script '/sample-buildout/bin/demo'.\n    Installing test.\n    Generated interpreter '/sample-buildout/bin/py'.\n\nNote that we still have the same directory structure as the zipped\nversion with a directory for each top-level namespace.  The 'lovely'\ndirectory is not in he packages directory because it is a develop egg\nand we have set zipped to false, therefore it is only added to the\npython path.\n\n    >>> ls(sample_buildout + '/parts/packages')\n    d  eggrecipedemo.py\n    d  eggrecipedemoneeded.py\n    d  zc\n\n    >>> print system(join(sample_buildout, 'bin', 'py') + \\\n    ...        ' -c \"import lovely.recipe; print lovely.recipe.__file__\"')\n    /.../src/lovely/recipe/__init__.py...\n\n\n\nThe test section uses the path of our packages section. Note that due,\nto the development path of lovely.recipe this path is actually\nincluded twice because the script recipe does not check duplicates.\n\n    >>> cat(sample_buildout + '/bin/py')\n    #!...\n    sys.path[0:0] = [\n      '/...lovely.recipe/src',\n      ...\n      '/.../lovely.recipe/src',\n      '/sample-buildout/parts/packages/eggrecipedemo.py',\n      '/sample-buildout/parts/packages/eggrecipedemoneeded.py',\n      '/sample-buildout/parts/packages/zc',\n      ]...\n\n\n=================\ni18n Tools Recipe\n=================\n\nThis recipe allows to create i18n tools to extract and merge po files.\n\n\nCreating The Tools\n==================\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = i18n\n    ... index = http://download.zope.org/zope3.4\n    ... offline = true\n    ...\n    ... [i18n]\n    ... recipe = lovely.recipe:i18n\n    ... package = lovely.recipe\n    ... domain = recipe\n    ... location = src/somewhere\n    ... output = locales\n    ... maker = z3c.csvvocabulary.csvStrings\n    ... \"\"\")\n    >>> print system(buildout),\n    Installing i18n.\n    i18n: setting up i18n tools\n    Generated script 'bin/i18nextract'.\n    Generated script 'bin/i18nmergeall'.\n    Generated script 'bin/i18nstats'.\n\n    >>> import os\n    >>> ls(os.path.join(sample_buildout, 'bin'))\n    -  buildout\n    -  i18nextract\n    -  i18nmergeall\n    -  i18nstats\n\n\nThe i18n Extractor\n------------------\n\n    >>> cat('bin', 'i18nextract')\n    #!...\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n    ...\n      ]\n    <BLANKLINE>\n    import lovely.recipe.i18n.i18nextract\n    <BLANKLINE>\n    if __name__ == '__main__':\n        lovely.recipe.i18n.i18nextract.main(['i18nextract', '-d', 'recipe', '-s', '/sample-buildout/parts/i18n/configure.zcml', '-p', 'src/somewhere', '-o', 'locales', '-m', 'z3c.csvvocabulary.csvStrings'])\n\nWe have a configure.zcml created.\n\n    >>> cat('parts', 'i18n', 'configure.zcml')\n    <configure xmlns='http://namespaces.zope.org/zope'>\n      <include package=\"lovely.recipe\" />\n    </configure>\n\n\ni18n Merge\n----------\n\n    >>> cat('bin', 'i18nmergeall')\n    #!...\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n    ...\n      ]\n    <BLANKLINE>\n    import lovely.recipe.i18n.i18nmergeall\n    <BLANKLINE>\n    if __name__ == '__main__':\n        lovely.recipe.i18n.i18nmergeall.main(['i18nmergeall', '-l', 'src/somewhere/locales'])\n\ni18n Stats\n----------\n\n    >>> cat('bin', 'i18nstats')\n    #!...\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n    ...\n      ]\n    <BLANKLINE>\n    import lovely.recipe.i18n.i18nstats\n    <BLANKLINE>\n    if __name__ == '__main__':\n        lovely.recipe.i18n.i18nstats.main(['i18nstats', '-l', 'src/somewhere/locales'])\n\n\nTool Names\n----------\n\nThe created tools are named after the section name. If the section for the\nrecipe is named 'translation' then the tools are named 'translationextract'\nand 'translationmergeall'.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... index = http://download.zope.org/zope3.4\n    ... parts = translation\n    ...\n    ... offline = true\n    ...\n    ... [translation]\n    ... recipe = lovely.recipe:i18n\n    ... package = lovely.recipe\n    ... domain = recipe\n    ... location = src/somewhere\n    ... output = locales\n    ... maker = z3c.csvvocabulary.csvStrings\n    ... \"\"\")\n    >>> print system(buildout),\n    Uninstalling i18n.\n    Installing translation.\n    translation: setting up i18n tools\n    Generated script 'bin/translationextract'.\n    Generated script 'bin/translationmergeall'.\n    Generated script 'bin/translationstats'.\n\n\nAdding a custom configure.zcml\n------------------------------\n\nThe created configure.zcml includes the package an assumes that the package\ncontains a configure.zcml. If this is not the case or if additional package\nincludes are needed then the zcml parameter can be used to define the content\nof the generated configure.zcml.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = i18n\n    ...\n    ... offline = true\n    ...\n    ... [i18n]\n    ... recipe = lovely.recipe:i18n\n    ... package = lovely.recipe\n    ... domain = recipe\n    ... location = src/somewhere\n    ... output = locales\n    ... maker = z3c.csvvocabulary.csvStrings\n    ... zcml =\n    ...    <include package='zope.component' file='meta.zcml' />\n    ...    <include package='lovely.recipe' />\n    ...\n    ... \"\"\")\n\n    >>> print system(buildout),\n    Uninstalling translation.\n    Installing i18n.\n    i18n: setting up i18n tools\n    Generated script 'bin/i18nextract'.\n    Generated script 'bin/i18nmergeall'.\n    Generated script 'bin/i18nstats'.\n\n    >>> cat('bin', 'i18nextract')\n    #!...\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n    ...\n      ]\n    <BLANKLINE>\n    import lovely.recipe.i18n.i18nextract\n    <BLANKLINE>\n    if __name__ == '__main__':\n        lovely.recipe.i18n.i18nextract.main(['i18nextract', '-d', 'recipe', '-s', '/sample-buildout/parts/i18n/configure.zcml', '-p', 'src/somewhere', '-o', 'locales', '-m', 'z3c.csvvocabulary.csvStrings'])\n\nAnd the generated configure-zcml contains our extra code.\n\n    >>> cat('parts', 'i18n', 'configure.zcml')\n    <configure xmlns='http://namespaces.zope.org/zope'\n               xmlns:meta=\"http://namespaces.zope.org/meta\"\n               >\n    <BLANKLINE>\n    <BLANKLINE>\n    <include package='zope.component' file='meta.zcml' />\n    <include package='lovely.recipe' />\n    <BLANKLINE>\n    </configure>\n\n\n====================\nImportchecker Recipe\n====================\n\nThis recipe creates an importchecker instance in the bin directory.\n\n\nCreating The Script\n===================\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = checker\n    ...\n    ... offline = true\n    ...\n    ... [checker]\n    ... recipe = lovely.recipe:importchecker\n    ... path = src/lovely\n    ... \"\"\")\n    >>> print system(buildout),\n    Installing checker.\n    checker: setting up importchecker\n    Generated script 'bin/importchecker'.\n\n    >>> import os\n    >>> ls(os.path.join(sample_buildout, 'bin'))\n    -  buildout\n    -  importchecker\n\n    >>> cat('bin', 'importchecker')\n    #!...\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n      ...\n      ]\n    <BLANKLINE>\n    import lovely.recipe.importchecker.importchecker\n    <BLANKLINE>\n    if __name__ == '__main__':\n        lovely.recipe.importchecker.importchecker.main(['importchecker', 'src/lovely'])",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://launchpad.net/lovely.recipe",
    "keywords": "buildout recipe filesystem i18n importchecker",
    "license": "ZPL 2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lovely.recipe",
    "package_url": "https://pypi.org/project/lovely.recipe/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lovely.recipe/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://launchpad.net/lovely.recipe"
    },
    "release_url": "https://pypi.org/project/lovely.recipe/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Set of helper recipies for zc.buildout",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794369,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08fcefeb096d4e430d0c6c28ddc01bc47c93e5d0ef5bf8501921d60819e260cb",
        "md5": "b80237fce6613f4bd92210e3cf8cd1ad",
        "sha256": "4ddda5d649f1eafdbf6eb13747ce5a0c6d38548422337bb78fdddaab1bb85e57"
      },
      "downloads": -1,
      "filename": "lovely.recipe-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b80237fce6613f4bd92210e3cf8cd1ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25141,
      "upload_time": "2010-01-28T10:12:02",
      "upload_time_iso_8601": "2010-01-28T10:12:02.683123Z",
      "url": "https://files.pythonhosted.org/packages/08/fc/efeb096d4e430d0c6c28ddc01bc47c93e5d0ef5bf8501921d60819e260cb/lovely.recipe-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}