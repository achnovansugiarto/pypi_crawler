{
  "info": {
    "author": "Thomas Weholt",
    "author_email": "thomas@weholt.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Database"
    ],
    "description": "DSE - Simplified \"bulk\" insert/update for Django\r\n================================================\r\n\r\nVersion : 1.0.2\r\nAuthor : Thomas Weholt <thomas@weholt.org>\r\nLicense : GPL v3.0\r\nStatus : Stable\r\nUrl : https://bitbucket.org/weholt/dse\r\nDocs at http://readthedocs.org/docs/dse/en/latest/index.html\r\n\r\n==Background==\r\n\r\n* DSE is available for one reason - to insert/update lots of data as fast as possible.\r\n\r\n* DSE vs Django ORM: typical speed gain is around 10X. \r\n\r\n* DSE is aware of default values specified in your Django models and will use \r\nthose if no value is given for a field in an insert statement.\r\n\r\n* DSE caches SQL-statements, both inserts and updates, and executes them when \r\na specified number of statements has been prepared or when it`s told manually to flush\r\ncached statements to the database. The actual sql execution is done using \r\nDB API cursor.executemany and this is much faster than executing SQL-statements \r\nin sequence and way faster than using the Django ORM.\r\n\r\n* DSE uses a dictionary to specify what fields to update. It differs between\r\nupdate and insert statements by looking for a key similar to the primary key for\r\na given model.\r\n\r\n* DSE will try to execute as many statements as possible, but will detect update\r\nstatements where only a few sql fields/columns are updated and execute those \r\nstatements individually.\r\n\r\n* It has been designed to be used outside Django as well, but the main focus \r\nis good Django integration.\r\n\r\n* My hope is to see something like this in the django core.\r\n\r\n==Plans for the future==\r\n\r\n* Refactoring of the SQL-builder code.\r\n* Profiling and performance tuning.\r\n* More focus on thread-safety and if needed locking.\r\n\r\n==Installation==\r\n\r\npip install dse\r\n\r\nor\r\n\r\nhg clone https://bitbucket.org/weholt/dse\r\n\r\n==Example usage==\r\n\r\nYou got a model like:\r\n\r\n    gender =  (('M', 'Male'), ('F', 'Female'))\r\n    \r\n    class Person(models.Model):\r\n        name = models.CharField(max_length = 30)\r\n        age = models.IntegerField(default = 30)\r\n        sex = models.CharField(max_length = 1, choices = gender, default = 'M')\r\n\r\nUsing dse:\r\n\r\n    import dse\r\n    dse.patch_models() # Monkey patch all your models and expose dse for all models:\r\n\r\n    with Person.dse as d:\r\n        for name, age, sex in (('Thomas', 36, 'M'), ('Joe', 40, 'M'), ('Jane', 28, 'F')):\r\n             d.add_item(dict(name = name, age = age, sex = sex))\r\n\r\nNothing will be inserted into the database before the loop is done ( or you \r\ninsert 1000 items ). Then the items will be inserted using cursor.executemany, \r\nusing plain SQL - no ORM in sight.\r\n\r\nDSE features singletons (NB! very experimental, no locking/thread support yet!):\r\n\r\n    import dse.singleton\r\n    \r\n    p1 = dse.singleton.Models.Person()\r\n    p2 = dse.singleton.Models.Person()\r\n    print p1 is p2 # should print True\r\n    p1.add_item(dict(name = 'Joe'))\r\n    p2.flush()\r\n    print Person.objects.all().count() # should print 1\r\n    \r\nSingletons makes it possible to cache entries across sections of code and cache \r\neven more data, hitting the db less.\r\n\r\nDSE using default values defined in your model:\r\n    \r\n    with Person.dse as d:    \r\n        # Adding an item, just defining a name and using the default values from the model:\r\n        d.add_item({'name': 'John'})\r\n\r\n        # Overriding the default values? Just specify a valid value\r\n        d.add_item({'name': 'Thomas', 'age': 36, 'sex': 'M'})\r\n\r\n        # Update record with id = 1 and set its name to John. This will trigger \r\n        # a SQL-statement for this update alone, since not all columns are specified:\r\n        d.add_item({'id': 1, 'name': 'John'})\r\n  \r\nTo use delayed execution of SQL statements:\r\n\r\n    Person.dse.add_item({'id': 2, 'name': 'Al Capone'}) # will NOT trigger anything\r\n    Person.dse.add_item({'id': 3, 'name': 'John Dillinger'}) # will NOT trigger anything\r\n    Person.dse.add_item({'name': 'Scarface'}) # will NOT trigger anything\r\n    Person.dse.flush() # will execute both update statements and insert a record for \"Scarface\"\r\n\r\nSay you want to update all records with some calculated value, something you \r\ncouldn`t find a way to do in SQL. Using dse this is easy and fast:\r\n\r\n    with Person.dse as d:    \r\n        # Use Djangos ORM to generate dictionaries to use in DSE; objects.all().values().\r\n        for item in Person.objects.all().values():\r\n            item['somevar'] = calculated_value\r\n            d.add_item(item)\r\n\r\nI`ve recieved some questions about transaction handling. Below is an simple example, \r\nbut I`m looking into other ways of handling transactions as well:\r\n \r\n    from django.db import transaction\r\n    import dse\r\n\r\n    @transaction.commit_manually\r\n    def some_method():\r\n        with SomeModel.dse as d:\r\n            for item in somelist:\r\n                SomeModel.dse.add_item(\r\n                  {'some_column': item.some_value,\r\n                   'another_column': item.another_value})    \r\n        transaction.commit()\r\n\r\n==Release notes==\r\n\r\n1.0.2 : reconnect if cursor is dead.\r\n\r\n1.0.1 : fixed issue #9 \"Factory can eat up memory\" reported by vangheem. When finding fields related to a table only the top row is fetched.\r\n\r\n1.0.0 : Version bump. Added unittest for issue #8.\r\n\r\n1.0.0-RC1 : updated README.txt. \r\n\r\n0.9.4 : - PEP8 and pyflake.\r\n\r\n0.9.3 : - Fixed issue #7: dse causes django-debug-toolbar to crash. Thanks to ringemup for pointing that out. Added some docstrings.\r\n\r\n0.9.2 : - Corrected type in usage.rst and README.txt.\r\n\r\n0.9.1 : - Refactored code even more, added usage.rst, singleton support in the singleton-package and some performance tests. Models not monkey patched be default anymore, must call dse.patch_models().\r\n\r\n0.9.0 : - Refactored code and cleaned up tests folder. Focus on getting singleton support in before 1.0.0. And more tests.\r\n\r\n0.8.2 : - added 'pysqlite2' to _DBMAP. Thanks to David Marble for 0.8.1 and 0.8.2.\r\n\r\n0.8.1 : - attempt to fix quoting problems with fields on postgresql.\r\n\r\n0.8.0 : - fixed crash when more than one database connection has been configured. No ModelFactory will be triggered.\r\n\r\n0.7.0 : - don`t remember.\r\n\r\n0.6.0 : - added support for the with-statement.\r\n        - added an ModelDelayedExecutor-instance to each model, so you can do Model.dse.add_item\r\n          instead of dse.ModelFactory.Model.add_item.\r\n        - renamed dse.modelfactory to dse.ModelFactory to be more style-compliant.\r\n\r\n0.5.1 : just some notes on transaction handling.\r\n\r\n0.5.0 :\r\n    - added modelfactory. Upon first import a modelfactory will be created in the DSE module. It`s basically just a\r\n    helper-class containing ModelDelayedExecutor-instances for all models in all apps found in INSTALLED_APPS in\r\n    settings.py.\r\n    - to change the default item limit before automatic execution of cached SQL statements to 10000 instead of the default 1000::\r\n\r\n    import dse\r\n    dse.ITEM_LIMIT = 10000\r\n\r\n0.4.0 :\r\n    - fixed serious bug when using mass updates. Using cursor.executemany is only possible when values\r\n    for all columns are specified. If only values for a subset of the columns is specified that will be\r\n    executed as a seperate SQL-call. NOTE! Using dex.get_items() or Djangos Model.objects.values() will give you\r\n    all the fields.\r\n    - code clean-up.\r\n    - added custom exceptions; UpdateManyException, UpdateOneException and InsertManyException.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/weholt/dse",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dse",
    "package_url": "https://pypi.org/project/dse/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dse/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/weholt/dse"
    },
    "release_url": "https://pypi.org/project/dse/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "DSE - Simplified \"bulk\" insert/update for Django.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1085243,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46b6cff43d7085eda4f48a701236b0700bafc5613b9268284bbe116a36645aa4",
        "md5": "31c4113564d6a9d10809657eea8d4df9",
        "sha256": "3f600b524c339938e1f064a4a4cf78a2ed23c44b7fb5ff248134816289fa9fa0"
      },
      "downloads": -1,
      "filename": "dse-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "31c4113564d6a9d10809657eea8d4df9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10170,
      "upload_time": "2011-04-30T20:20:35",
      "upload_time_iso_8601": "2011-04-30T20:20:35.836896Z",
      "url": "https://files.pythonhosted.org/packages/46/b6/cff43d7085eda4f48a701236b0700bafc5613b9268284bbe116a36645aa4/dse-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}