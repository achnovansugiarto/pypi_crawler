{
  "info": {
    "author": "Thomas Weholt",
    "author_email": "thomas@weholt.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Database"
    ],
    "description": "DSE - Simplified \"bulk\" insert/update for Django\n================================================\n\nVersion : 1.0.1\nAuthor : Thomas Weholt <thomas@weholt.org>\nLicense : GPL v3.0\nStatus : Stable\nUrl : https://bitbucket.org/weholt/dse\nDocs at http://readthedocs.org/docs/dse/en/latest/index.html\n\n==Background==\n\n* DSE is available for one reason - to insert/update lots of data as fast as possible.\n\n* DSE vs Django ORM: typical speed gain is around 10X. \n\n* DSE is aware of default values specified in your Django models and will use \nthose if no value is given for a field in an insert statement.\n\n* DSE caches SQL-statements, both inserts and updates, and executes them when \na specified number of statements has been prepared or when it`s told manually to flush\ncached statements to the database. The actual sql execution is done using \nDB API cursor.executemany and this is much faster than executing SQL-statements \nin sequence and way faster than using the Django ORM.\n\n* DSE uses a dictionary to specify what fields to update. It differs between\nupdate and insert statements by looking for a key similar to the primary key for\na given model.\n\n* DSE will try to execute as many statements as possible, but will detect update\nstatements where only a few sql fields/columns are updated and execute those \nstatements individually.\n\n* It has been designed to be used outside Django as well, but the main focus \nis good Django integration.\n\n* My hope is to see something like this in the django core.\n\n==Plans for the future==\n\n* Refactoring of the SQL-builder code.\n* Profiling and performance tuning.\n* More focus on thread-safety and if needed locking.\n\n==Installation==\n\npip install dse\n\nor\n\nhg clone https://bitbucket.org/weholt/dse\n\n==Example usage==\n\nYou got a model like:\n\n    gender =  (('M', 'Male'), ('F', 'Female'))\n    \n    class Person(models.Model):\n        name = models.CharField(max_length = 30)\n        age = models.IntegerField(default = 30)\n        sex = models.CharField(max_length = 1, choices = gender, default = 'M')\n\nUsing dse:\n\n    import dse\n    dse.patch_models() # Monkey patch all your models and expose dse for all models:\n\n    with Person.dse as d:\n        for name, age, sex in (('Thomas', 36, 'M'), ('Joe', 40, 'M'), ('Jane', 28, 'F')):\n             d.add_item(dict(name = name, age = age, sex = sex))\n\nNothing will be inserted into the database before the loop is done ( or you \ninsert 1000 items ). Then the items will be inserted using cursor.executemany, \nusing plain SQL - no ORM in sight.\n\nDSE features singletons (NB! very experimental, no locking/thread support yet!):\n\n    import dse.singleton\n    \n    p1 = dse.singleton.Models.Person()\n    p2 = dse.singleton.Models.Person()\n    print p1 is p2 # should print True\n    p1.add_item(dict(name = 'Joe'))\n    p2.flush()\n    print Person.objects.all().count() # should print 1\n    \nSingletons makes it possible to cache entries across sections of code and cache \neven more data, hitting the db less.\n\nDSE using default values defined in your model:\n    \n    with Person.dse as d:    \n        # Adding an item, just defining a name and using the default values from the model:\n        d.add_item({'name': 'John'})\n\n        # Overriding the default values? Just specify a valid value\n        d.add_item({'name': 'Thomas', 'age': 36, 'sex': 'M'})\n\n        # Update record with id = 1 and set its name to John. This will trigger \n        # a SQL-statement for this update alone, since not all columns are specified:\n        d.add_item({'id': 1, 'name': 'John'})\n  \nTo use delayed execution of SQL statements:\n\n    Person.dse.add_item({'id': 2, 'name': 'Al Capone'}) # will NOT trigger anything\n    Person.dse.add_item({'id': 3, 'name': 'John Dillinger'}) # will NOT trigger anything\n    Person.dse.add_item({'name': 'Scarface'}) # will NOT trigger anything\n    Person.dse.flush() # will execute both update statements and insert a record for \"Scarface\"\n\nSay you want to update all records with some calculated value, something you \ncouldn`t find a way to do in SQL. Using dse this is easy and fast:\n\n    with Person.dse as d:    \n        # Use Djangos ORM to generate dictionaries to use in DSE; objects.all().values().\n        for item in Person.objects.all().values():\n            item['somevar'] = calculated_value\n            d.add_item(item)\n\nI`ve recieved some questions about transaction handling. Below is an simple example, \nbut I`m looking into other ways of handling transactions as well:\n \n    from django.db import transaction\n    import dse\n\n    @transaction.commit_manually\n    def some_method():\n        with SomeModel.dse as d:\n            for item in somelist:\n                SomeModel.dse.add_item(\n                  {'some_column': item.some_value,\n                   'another_column': item.another_value})    \n        transaction.commit()\n\n==Release notes==\n\n1.0.1 : fixed issue #9 \"Factory can eat up memory\" reported by vangheem. When finding fields related to a table only the top row is fetched.\n\n1.0.0 : Version bump. Added unittest for issue #8.\n\n1.0.0-RC1 : updated README.txt. \n\n0.9.4 : - PEP8 and pyflake.\n\n0.9.3 : - Fixed issue #7: dse causes django-debug-toolbar to crash. Thanks to ringemup for pointing that out. Added some docstrings.\n\n0.9.2 : - Corrected type in usage.rst and README.txt.\n\n0.9.1 : - Refactored code even more, added usage.rst, singleton support in the singleton-package and some performance tests. Models not monkey patched be default anymore, must call dse.patch_models().\n\n0.9.0 : - Refactored code and cleaned up tests folder. Focus on getting singleton support in before 1.0.0. And more tests.\n\n0.8.2 : - added 'pysqlite2' to _DBMAP. Thanks to David Marble for 0.8.1 and 0.8.2.\n\n0.8.1 : - attempt to fix quoting problems with fields on postgresql.\n\n0.8.0 : - fixed crash when more than one database connection has been configured. No ModelFactory will be triggered.\n\n0.7.0 : - don`t remember.\n\n0.6.0 : - added support for the with-statement.\n        - added an ModelDelayedExecutor-instance to each model, so you can do Model.dse.add_item\n          instead of dse.ModelFactory.Model.add_item.\n        - renamed dse.modelfactory to dse.ModelFactory to be more style-compliant.\n\n0.5.1 : just some notes on transaction handling.\n\n0.5.0 :\n    - added modelfactory. Upon first import a modelfactory will be created in the DSE module. It`s basically just a\n    helper-class containing ModelDelayedExecutor-instances for all models in all apps found in INSTALLED_APPS in\n    settings.py.\n    - to change the default item limit before automatic execution of cached SQL statements to 10000 instead of the default 1000::\n\n    import dse\n    dse.ITEM_LIMIT = 10000\n\n0.4.0 :\n    - fixed serious bug when using mass updates. Using cursor.executemany is only possible when values\n    for all columns are specified. If only values for a subset of the columns is specified that will be\n    executed as a seperate SQL-call. NOTE! Using dex.get_items() or Djangos Model.objects.values() will give you\n    all the fields.\n    - code clean-up.\n    - added custom exceptions; UpdateManyException, UpdateOneException and InsertManyException.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/weholt/dse",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dse",
    "package_url": "https://pypi.org/project/dse/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dse/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/weholt/dse"
    },
    "release_url": "https://pypi.org/project/dse/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "DSE - Simplified \"bulk\" insert/update for Django.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1085243,
  "urls": [],
  "vulnerabilities": []
}