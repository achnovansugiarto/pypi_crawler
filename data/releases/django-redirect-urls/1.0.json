{
  "info": {
    "author": "Paul McLanahan",
    "author_email": "pmac@mozilla.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-redirect-urls\n\n[![Build Status](https://travis-ci.org/pmac/django-redirect-urls.svg?branch=master)](https://travis-ci.org/pmac/django-redirect-urls)\n\nManage URL redirects and rewrites in Django like you do other URLs: in code.\n\nThis was extracted from [bedrock](https://github.com/mozilla/bedrock/) (the code behind www.mozilla.org).\nWe had a lot of redirects and rewrites we wanted to move out of Apache configs and into versioned code.\nThis library is the result of all of that. Because it started life on a Mozilla site it does have some\nfeatures for how we make sites (e.g. locale prefixing in URLs and the `is_firefox` helper). Now that it\nis a separate thing however I'm very open to adding features and helpers for a more general audience.\n\n## Install\n\n```bash\n$ pip install django-redirect-urls\n```\n\n## Examples\n\nWith this library you can do things like:\n\n```python\n# urls.py\nfrom redirect_urls import redirect\n\nurlpatterns = [\n    redirect(r'projects/$', 'mozorg.product'),\n    redirect(r'^projects/seamonkey$', 'mozorg.product', locale_prefix=False),\n    redirect(r'apps/$', 'https://marketplace.firefox.com'),\n    redirect(r'firefox/$', 'firefox.new', name='firefox'),\n    redirect(r'the/dude$', 'abides', query={'aggression': 'not_stand'}),\n]\n```\n\nThere are a lot of options to the `redirect` helper. Here is the basic list:\n\n* **pattern**: the regex against which to match the requested URL.\n* **to**: either a url name that `reverse` will find, a url that will simply be returned,\n    or a function that will be given the request and url captures, and return the\n    destination.\n* **permanent**: boolean whether to send a 301 or 302 response.\n* **locale_prefix**: automatically prepend `pattern` with a regex for an optional locale\n    in the url. This locale (or None) will show up in captured kwargs as 'locale'.\n* **anchor**: if set it will be appended to the destination url after a '#'.\n* **name**: if used in a `urls.py` the redirect URL will be available as the name\n    for use in calls to `reverse()`. Does _NOT_ work if used in a `redirects.py` file.\n* **query**: a dict of query params to add to the destination url.\n* **vary**: if you used an HTTP header to decide where to send users you should include that\n    header's name in the `vary` arg.\n* **cache_timeout**: number of hours to cache this redirect. just sets the proper `cache-control`\n    and `expires` headers.\n* **decorators**: a callable (or list of callables) that will wrap the view used to redirect\n    the user. equivalent to adding a decorator to any other view.\n* **re_flags**: a string of any of the characters: \"iLmsux\". Will modify the `pattern` regex\n    based on the documented meaning of the flags (see python re module docs).\n* **to_args**: a tuple or list of args to pass to reverse if `to` is a url name.\n* **to_kwargs**: a dict of keyword args to pass to reverse if `to` is a url name.\n* **prepend_locale**: if true the redirect URL will be prepended with the locale from the\n    requested URL.\n* **merge_query**: merge the requested query params from the `query` arg with any query params\n    from the request.\n\nOr you can install the `redirect_urls.middleware.RedirectsMiddleware` middleware and create \n`redirects.py` files in your Django apps. This will allow you to define a lot of redirects\nin their own files (which will be auto-discovered) and guarantee that they'll be tested before \nthe rest of your URLs.\n\n```python\n# redirects.py\nfrom redirect_urls import redirect\n\nredirectpatterns = [\n    redirect(r'projects/$', 'mozorg.product'),\n    redirect(r'^projects/seamonkey$', 'mozorg.product', locale_prefix=False),\n    redirect(r'apps/$', 'https://marketplace.firefox.com'),\n    redirect(r'firefox/$', 'firefox.new', name='firefox'),\n    redirect(r'the/dude$', 'abides', query={'aggression': 'not_stand'}),\n]\n```\n\n## Run The Tests\n\n```bash\n$ pip install tox\n$ tox\n```\n\n## History\n\n### 1.0 - 2018-06-01\n\nAdd support for Django 1.11 and 2.0, and drop support for earlier versions.\n\n### 0.2 - 2017-05-09\n\nInitial release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pmac/django-redirect-urls/",
    "keywords": "django redirects",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-redirect-urls",
    "package_url": "https://pypi.org/project/django-redirect-urls/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-redirect-urls/",
    "project_urls": {
      "Homepage": "https://github.com/pmac/django-redirect-urls/"
    },
    "release_url": "https://pypi.org/project/django-redirect-urls/1.0/",
    "requires_dist": [
      "Django (>=1.11)"
    ],
    "requires_python": "",
    "summary": "URL redirecting and rewriting in code.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14436652,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2b54bb94608dd172bdc164837b7db0ab3942c4b2780894c3ea254ad84541028",
        "md5": "c4fa2eb537e02ca03edb45a9f21455bb",
        "sha256": "c4cd7818b06ccf0a5307656a33f3ecea47ee22f0cceb374ea559eb2d1402d5d8"
      },
      "downloads": -1,
      "filename": "django_redirect_urls-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4fa2eb537e02ca03edb45a9f21455bb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12412,
      "upload_time": "2018-06-01T20:50:02",
      "upload_time_iso_8601": "2018-06-01T20:50:02.835797Z",
      "url": "https://files.pythonhosted.org/packages/d2/b5/4bb94608dd172bdc164837b7db0ab3942c4b2780894c3ea254ad84541028/django_redirect_urls-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "458db74b732f846eff25a15c4986097ddec499e0ce4a3c34df2f686942b56986",
        "md5": "4291f2772afcaba0651b978bf182e604",
        "sha256": "e5b1dec666758c7d2621ce337458a09e4b3feeb06cb9ec5d43b17d66b87ea97d"
      },
      "downloads": -1,
      "filename": "django-redirect-urls-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4291f2772afcaba0651b978bf182e604",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11701,
      "upload_time": "2018-06-01T20:50:03",
      "upload_time_iso_8601": "2018-06-01T20:50:03.987648Z",
      "url": "https://files.pythonhosted.org/packages/45/8d/b74b732f846eff25a15c4986097ddec499e0ce4a3c34df2f686942b56986/django-redirect-urls-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}