{
  "info": {
    "author": "Carl Meyer",
    "author_email": "carl@oddbird.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "===============\r\ndjango-markitup\r\n===============\r\n\r\nA Django reusable application for end-to-end markup handling. Includes:\r\n\r\n* Easy integration of the `MarkItUp!`_ markup editor widget (by Jay\r\n  Salvat) in Django projects, with server-side support for MarkItUp!'s\r\n  AJAX preview. Plug in MarkItUp! via form widget or template tags.\r\n\r\n* ``MarkupField``, a ``TextField`` that automatically renders and\r\n  stores both its raw and rendered values in the database, on the\r\n  assumption that disk space is cheaper than CPU cycles in a web\r\n  application.\r\n\r\n.. _MarkItUp!: http://markitup.jaysalvat.com/\r\n\r\n\r\nInstallation\r\n============\r\n\r\nInstall from PyPI with ``easy_install`` or ``pip``::\r\n\r\n    pip install django-markitup\r\n\r\nor get the `in-development version`_::\r\n\r\n    pip install django-markitup==tip\r\n\r\n.. _in-development version: http://bitbucket.org/carljm/django-markitup/get/tip.gz#egg=django_markitup-tip\r\n\r\nTo use ``django-markitup`` in your Django project:\r\n\r\n    1. Add ``'markitup'`` to your ``INSTALLED_APPS`` setting.\r\n\r\n    2. Make the contents of the ``markitup/static/markitup`` directory\r\n       available at ``STATIC_URL/markitup``; the simplest way is via\r\n       `django.contrib.staticfiles`_.\r\n\r\n    3. Set `the MARKITUP_FILTER setting`_.\r\n\r\n    4. If you want to use AJAX-based preview, add\r\n          ``url(r'^markitup/', include('markitup.urls'))`` in your root URLconf.\r\n\r\n.. _django.contrib.staticfiles: https://docs.djangoproject.com/en/dev/howto/static-files/\r\n\r\n\r\nDependencies\r\n------------\r\n\r\n``django-markitup`` 2.0 requires `Django`_ 1.4 or later and Python 2.6 or\r\nlater.\r\n\r\n``django-markitup`` 1.0 requires `Django`_ 1.3 or later and Python 2.5 or\r\nlater.\r\n\r\n`MarkItUp!`_ is not an external dependency; it is bundled with\r\n``django-markitup``.\r\n\r\n.. _Django: http://www.djangoproject.com/\r\n\r\nUsing the MarkItUp! widget\r\n==========================\r\n\r\nThe MarkItUp! widget lives at ``markitup.widgets.MarkItUpWidget``, and\r\ncan be used like any other Django custom widget.\r\n\r\nTo assign it to a form field::\r\n\r\n    from markitup.widgets import MarkItUpWidget\r\n\r\n    class MyForm(forms.Form):\r\n        content = forms.CharField(widget=MarkItUpWidget())\r\n\r\nWhen this form is displayed on your site, you must include the form media\r\nsomewhere on the page using ``{{ form.media }}``, or the MarkItUpWidget will\r\nhave no effect. By default ``{{ form.media }}`` also includes the jQuery\r\nlibrary based on your `JQUERY_URL`_ setting. To prevent including jQuery, set\r\nthe `JQUERY_URL`_ setting to ``None``.\r\n\r\nMarkItUpWidget accepts three optional keyword arguments:\r\n``markitup_set`` and ``markitup_skin`` (see `Choosing a MarkItUp!\r\nbutton set and skin`_) and ``auto_preview`` (to override the value of\r\nthe `MARKITUP_AUTO_PREVIEW`_ setting).\r\n\r\nTo use the widget in the Django admin::\r\n\r\n    from markitup.widgets import AdminMarkItUpWidget\r\n\r\n    class MyModelAdmin(admin.ModelAdmin):\r\n    ...\r\n    def formfield_for_dbfield(self, db_field, **kwargs):\r\n        if db_field.name == 'content':\r\n            kwargs['widget'] = AdminMarkItUpWidget()\r\n        return super(MyModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)\r\n\r\nYou can also use the formfield_overrides attribute of the ModelAdmin, which\r\nis simpler but only allows setting the widget per field type (so it isn't\r\npossible to use the MarkItUpWidget on one TextField in a model and not\r\nanother)::\r\n\r\n    from markitup.widgets import AdminMarkItUpWidget\r\n\r\n    class MyModelAdmin(admin.ModelAdmin):\r\n        formfield_overrides = {models.TextField: {'widget': AdminMarkItUpWidget}}\r\n\r\nIf you use `MarkupField`_ in your model, it is rendered in the admin\r\n  with an ``AdminMarkItUpWidget`` by default.\r\n\r\nUsing MarkItUp! via templatetags\r\n================================\r\n\r\nIn some cases it may be inconvenient to use ``MarkItUpWidget`` (for\r\ninstance, if the form in question is defined in third-party code). For\r\nthese cases, django-markitup provides template tags to achieve the\r\nsame effect purely in templates.\r\n\r\nFirst, load the django-markitup template tag library::\r\n\r\n    {% load markitup_tags %}\r\n\r\nThen include the MarkItUp! CSS and Javascript in the <head> of your page::\r\n\r\n    {% markitup_media %}\r\n\r\nBy default the ``markitup_media`` tag also includes jQuery, based on the value\r\nof your `JQUERY_URL`_ setting, with a fallback to the version hosted at Google\r\nAjax APIs. To suppress the inclusion of jQuery (if you are already including it\r\nyourself), set the `JQUERY_URL`_ setting to ``None``.\r\n\r\nIf you prefer to link CSS and Javascript from different locations, the\r\n``markitup_media`` tag can be replaced with two separate tags,\r\n``markitup_css`` and ``markitup_js``. ``markitup_js`` accepts a\r\nparameter to suppress jQuery inclusion, just like\r\n``markitup_media``. (Note that jQuery must be included in your\r\ntemplate before the ``markitup_editor`` tag is used).\r\n\r\nLast, use the ``markitup_editor`` template tag to apply the MarkItUp!\r\neditor to a textarea in your page. It accepts one argument, the HTML\r\nid of the textarea. If you are rendering the textarea in the usual way\r\nvia a Django form object, that id value is available as\r\n``form.fieldname.auto_id``::\r\n\r\n    {{ form.fieldname }}\r\n\r\n    {% markitup_editor form.fieldname.auto_id %}\r\n\r\nYou can use ``markitup_editor`` on as many different textareas as you\r\nlike.\r\n\r\n``markitup_editor`` accepts an optional second parameter, which can be\r\neither ``\"auto_preview\"`` or ``\"no_auto_preview\"`` to override the\r\nvalue of the `MARKITUP_AUTO_PREVIEW`_ setting.\r\n\r\nThe actual HTML included by these templatetags is defined by the\r\ncontents of the templates ``markitup/include_css.html``,\r\n``markitup/include_js.html``, and ``markitup/editor.html``. You can\r\noverride these templates in your project and customize them however\r\nyou wish.\r\n\r\nMarkupField\r\n===========\r\n\r\nYou can apply the MarkItUp! editor control to any textarea using the\r\nabove techniques, and handle the markup on the server side however you\r\nprefer.\r\n\r\nFor a seamless markup-handling solution, django-markitup also provides\r\na ``MarkupField`` model field that automatically renders and stores\r\nboth its raw and rendered values in the database, using the value of\r\n`the MARKITUP_FILTER setting`_ to parse the markup into HTML.\r\n\r\nA ``MarkupField`` is easy to add to any model definition::\r\n\r\n    from django.db import models\r\n    from markitup.fields import MarkupField\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        body = MarkupField()\r\n\r\n``MarkupField`` automatically creates an extra non-editable field\r\n``_body_rendered`` to store the rendered markup. This field doesn't\r\nneed to be accessed directly; see below.\r\n\r\nAccessing a MarkupField on a model\r\n----------------------------------\r\n\r\nWhen accessing an attribute of a model that was declared as a\r\n``MarkupField``, a ``Markup`` object is returned.  The ``Markup``\r\nobject has two attributes:\r\n\r\n``raw``:\r\n    The unrendered markup.\r\n``rendered``:\r\n    The rendered HTML version of ``raw`` (read-only).\r\n\r\nThis object also has a ``__unicode__`` method that calls\r\n``django.utils.safestring.mark_safe`` on ``rendered``, allowing\r\n``MarkupField`` attributes to appear in templates as rendered HTML\r\nwithout any special template tag or having to access ``rendered``\r\ndirectly.\r\n\r\nAssuming the ``Article`` model above::\r\n\r\n    >>> a = Article.objects.all()[0]\r\n    >>> a.body.raw\r\n    u'*fancy*'\r\n    >>> a.body.rendered\r\n    u'<p><em>fancy</em></p>'\r\n    >>> print unicode(a.body)\r\n    <p><em>fancy</em></p>\r\n\r\nAssignment to ``a.body`` is equivalent to assignment to\r\n``a.body.raw``.\r\n\r\n.. note::\r\n    a.body.rendered is only updated when a.save() is called\r\n\r\nEditing a MarkupField in a form\r\n-------------------------------\r\n\r\nWhen editing a ``MarkupField`` model attribute in a ``ModelForm``\r\n(i.e. in the Django admin), you'll generally want to edit the original\r\nmarkup and not the rendered HTML.  Because the ``Markup`` object\r\nreturns rendered HTML from its __unicode__ method, it's necessary to\r\nuse the ``MarkupTextarea`` widget from the ``markupfield.widgets``\r\nmodule, which knows to return the raw markup instead.\r\n\r\nBy default, a ``MarkupField`` uses the MarkItUp! editor control in the\r\nadmin (via the provided ``AdminMarkItUpWidget``), but a plain\r\n``MarkupTextarea`` in other forms. If you wish to use the MarkItUp!\r\neditor with this ``MarkupField`` in your own form, you'll need to use\r\nthe provided ``MarkItUpWidget`` rather than ``MarkupTextarea``.\r\n\r\nIf you apply your own custom widget to the form field representing a\r\n``MarkupField``, your widget must either inherit from\r\n``MarkupTextarea`` or its ``render`` method must convert its ``value``\r\nargument to ``value.raw``.\r\n\r\n\r\nChoosing a MarkItUp! button set and skin\r\n========================================\r\n\r\nMarkItUp! allows the toolbar button-set to be customized in a\r\nJavascript settings file.  By default, django-markitup uses the\r\n\"default\" set (meant for HTML editing).  Django-markitup also includes\r\nbasic \"markdown\" and \"textile\" sets (these are available from `the\r\nMarkItUp site <http://markitup.jaysalvat.com>`_), as well as a\r\n\"restructuredtext\" set.\r\n\r\nTo use an alternate set, assign the ``MARKITUP_SET`` setting a URL path\r\n(absolute or relative to ``STATIC_URL``) to the set directory.  For\r\ninstance, to use the \"markdown\" set included with django-markitup::\r\n\r\n    MARKITUP_SET = 'markitup/sets/markdown'\r\n\r\nMarkItUp! skins can be specified in a similar manner.  Both \"simple\"\r\nand \"markitup\" skins are included, by default \"simple\" is used.  To\r\nuse the \"markitup\" skin instead::\r\n\r\n    MARKITUP_SKIN = 'markitup/skins/markitup'\r\n\r\nNeither of these settings has to refer to a location inside\r\ndjango-markitup's media.  You can define your own sets and skins and\r\nstore them anywhere, as long as you set the MARKITUP_SET and\r\nMARKITUP_SKIN settings to the appropriate URLs.\r\n\r\nSet and skin may also be chosen on a per-widget basis by passing the\r\n``markitup_set`` and ``markitup_skin`` keyword arguments to\r\nMarkItUpWidget.\r\n\r\n\r\nUsing AJAX preview\r\n==================\r\n\r\nIf you've included ``markitup.urls`` in your root URLconf (as\r\ndemonstrated above under `Installation`_), all you need to enable\r\nserver-side AJAX preview is `the MARKITUP_FILTER setting`_.\r\n\r\nThe rendered HTML content is displayed in the Ajax preview wrapped by\r\nan HTML page generated by the ``markitup/preview.html`` template; you\r\ncan override this template in your project and customize the preview\r\noutput.\r\n\r\n.. note::\r\n\r\n    Using the MarkItUpWidget or ``markitup_editor`` template tag will\r\n    automatically set the ``previewParserPath`` in your MarkItUp! set\r\n    to ``reverse('markitup_preview')``, if ``markitup.urls`` is\r\n    included in your URLconf.\r\n\r\nThe MARKITUP_FILTER setting\r\n===========================\r\n\r\nThe ``MARKITUP_FILTER`` setting defines how markup is transformed into\r\nHTML on your site. This setting is only required if you are using\r\n``MarkupField`` or MarkItUp! AJAX preview.\r\n\r\n``MARKITUP_FILTER`` must be a two-tuple. The first element must be a\r\nstring, the Python dotted path to a markup filter function.  This\r\nfunction should accept markup as its first argument and return HTML.\r\nIt may accept other keyword arguments as well.  You may parse your\r\nmarkup using any method you choose, as long as you can wrap it in a\r\nfunction that meets these criteria.\r\n\r\nThe second element must be a dictionary of keyword arguments to pass\r\nto the filter function.  The dictionary may be empty.\r\n\r\nFor example, if you have python-markdown installed, you could use it\r\nlike this::\r\n\r\n    MARKITUP_FILTER = ('markdown.markdown', {'safe_mode': True})\r\n\r\nAlternatively, you could use the \"textile\" filter provided by Django\r\nlike this::\r\n\r\n    MARKITUP_FILTER = ('django.contrib.markup.templatetags.markup.textile', {})\r\n\r\n(The textile filter function doesn't accept keyword arguments, so the\r\nkwargs dictionary must be empty in this case.)\r\n\r\n``django-markitup`` provides one sample rendering function,\r\n``render_rest`` in the ``markitup.renderers`` module.\r\n\r\nrender_markup template filter\r\n=============================\r\n\r\nIf you have set `the MARKITUP_FILTER setting`_ and use the MarkItUp!\r\nAJAX preview, but don't wish to store rendered markup in the database\r\nwith `MarkupField`_ (or are using third-party models that don't use\r\n`MarkupField`_), you may want a convenient way to render content in\r\nyour templates using your MARKITUP_FILTER function. For this you can\r\nuse the ``render_markup`` template filter::\r\n\r\n    {% load markitup_tags %}\r\n\r\n    {{ post.content|render_markup }}\r\n\r\nOther settings\r\n==============\r\n\r\nMARKITUP_PREVIEW_FILTER\r\n-----------------------\r\n\r\nThis optional setting can be used to override the markup filter used\r\nfor the Ajax preview view, if for some reason you need it to be\r\ndifferent from the filter used for rendering markup in a\r\n``MarkupField``. It has the same format as ``MARKITUP_FILTER``; by\r\ndefault it is set equal to ``MARKITUP_FILTER``.\r\n\r\nMARKITUP_AUTO_PREVIEW\r\n---------------------\r\n\r\nIf set to ``True``, the preview window will be activated by\r\ndefault. Defaults to ``False``.\r\n\r\nJQUERY_URL\r\n----------\r\n\r\nMarkItUp! requires the jQuery Javascript library.  By default, django-markitup\r\nlinks to jQuery 2.0.3 at ajax.googleapis.com (via the URL\r\n``http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js``).  If you\r\nwish to use a different version of jQuery, or host it yourself, set the\r\nJQUERY_URL setting.  For example::\r\n\r\n    JQUERY_URL = 'jquery.min.js'\r\n\r\nThis will use the jQuery available at STATIC_URL/jquery.min.js. A relative\r\n``JQUERY_URL`` is relative to ``STATIC_URL``.\r\n\r\nIf you include the jQuery library manually in your templates and don't want\r\n``django-markitup`` to include it, set ``JQUERY_URL`` to ``None``.\r\nCHANGES\r\n=======\r\n\r\n2.1 (2013.11.11)\r\n----------------\r\n\r\n* Updated default jQuery version from 1.6 to 2.0.3.\r\n\r\n* Fixed ``MARKITUP_AUTO_PREVIEW``; the \"fix\" in 2.0 was wrong and broke it.\r\n\r\n\r\n2.0 (2013.11.06)\r\n----------------\r\n\r\n* Fixed ``MARKITUP_AUTO_PREVIEW``; MarkItUp! now observes mousedown events, not\r\n  mouseup. Thanks Alexandr Shurigin.\r\n\r\n* Added support for Django 1.6.\r\n\r\n* BACKWARDS-INCOMPATIBLE: Dropped support for Python 2.5 and Django 1.3.\r\n\r\n1.1.0 (2013.04.26)\r\n------------------\r\n\r\n- Updated to MarkItUp! 1.1.14 and fixed compatibility with jQuery 1.9. Thanks\r\n  Roman Akinfold!\r\n\r\n- Fixed MarkItUpWidget with custom attrs. Thanks GeyseR.\r\n\r\n- Set previewParserPath dynamically rather than requiring it to be set in\r\n  ``set.js``.  Thanks Sebastian Brandt.\r\n\r\n- Fixed hidden-widget rendering of a ``MarkupField``. Thanks Aramgutang.\r\n\r\n- Prevented double application of MarkItUp! editor to an\r\n  element. Fixes #4. Thanks Rich Leland.\r\n\r\n- Added `__len__` to `Markup` object to facilitate length and truthiness checks\r\n  in templates. Fixes #16. Thanks Edmund von der Burg.\r\n\r\n1.0.0 (2011.07.11)\r\n------------------\r\n\r\n- Removed all compatibility shims for Django versions prior to 1.3, including\r\n  all support for static media at ``MEDIA_URL``, static assets under\r\n  ``media/``, and the ``MARKITUP_MEDIA_URL`` setting.\r\n\r\n- Updated to jquery 1.6.\r\n\r\n- Added check to avoid double _rendered fields when MarkupField is used on an\r\n  abstract base model class. Fixes #11. Thanks Denis Kolodin for report and\r\n  patch.\r\n\r\n- Added compatibility with new AJAX CSRF requirements in Django 1.2.5 and\r\n  1.3. Fixes #7. Thanks zw0rk for the report.\r\n\r\n- Added blank=True to MarkupField's auto-added rendered-field to avoid South\r\n  warnings.\r\n\r\n- Django 1.3 & staticfiles compatibility: MARKITUP_MEDIA_URL and jQuery URL\r\n  default to STATIC_URL rather than MEDIA_URL, if set.  Static assets now\r\n  available under static/ as well as media/.  Thanks Mikhail Korobov.\r\n\r\n- MarkupField.get_db_prep_value updated to take \"connection\" and \"prepared\"\r\n  arguments to avoid deprecation warnings under Django 1.3.  Thanks Mikhail\r\n  Korobov.\r\n\r\n- enforce minimum length of 3 characters for MarkItUp!-inserted h1 and h2\r\n  underline-style headers (works around bug in python-markdown).  Thanks\r\n  Daemian Mack for the report.\r\n\r\n0.6.1 (2010.07.01)\r\n------------------\r\n\r\n- Added markitup set for reST. Thanks Jannis Leidel.\r\n\r\n- fixed reST renderer to not strip initial headline. Thanks Jannis Leidel.\r\n\r\n- prevent mark_safe from mangling Markup objects.\r\n\r\n0.6.0 (2010.04.26)\r\n------------------\r\n\r\n- remove previously-deprecated markitup_head template tag\r\n\r\n- wrap jQuery usage in anonymous function, to be more robust against other\r\n  JS framework code on the page (including other jQuerys).  Thanks Mikhael\r\n  Korneev.\r\n\r\n- upgrade to MarkItUp! 1.1.7\r\n\r\n- add render_markup template filter\r\n\r\n- update to jQuery 1.4 and MarkItUp! 1.1.6\r\n\r\n- Add auto_preview option.\r\n\r\n- Ajax preview view now uses RequestContext, and additionally passes\r\n  ``MARKITUP_MEDIA_URL`` into the template context. (Previously,\r\n  ``MARKITUP_MEDIA_URL`` was passed as ``MEDIA_URL`` and\r\n  RequestContext was not used). Backwards-incompatible; may require\r\n  change to preview template.\r\n\r\n0.5.2 (2009.11.24)\r\n------------------\r\n\r\n- Fix setup.py so ``tests`` package is not installed.\r\n\r\n0.5.1 (2009.11.18)\r\n------------------\r\n\r\n- Added empty ``models.py`` file so ``markitup`` is properly registered in\r\n  ``INSTALLED_APPS``. Fixes issue with ``django-staticfiles`` tip not\r\n  finding media.\r\n\r\n0.5 (2009.11.12)\r\n----------------\r\n\r\n- Added ``MarkupField`` from http://github.com/carljm/django-markupfield\r\n  (thanks Mike Korobov)\r\n\r\n- Deprecated ``markitup_head`` template tag in favor of ``markitup_media``.\r\n\r\n- Added ``MARKITUP_MEDIA_URL`` setting to override base of relative media\r\n  URL paths.\r\n\r\n0.3 (2009.11.04)\r\n----------------\r\n\r\n- added template-tag method for applying MarkItUp! editor (inspired by\r\n  django-wysiwyg)\r\n\r\n0.2 (2009.03.18)\r\n----------------\r\n\r\n- initial release\r\n\r\nTODO\r\n====\r\n\r\n* cleaner South FakeORM compatibility (make automatic rendered field a\r\n  TextField subclass and have South ignore it)\r\n\r\n* add support for multiple markup choices (perhaps integration with\r\n  django-markup)\r\n\r\n* add support for .save_markup method (with selection of markup type)\r\n\r\n* link to live demo?",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/carljm/django-markitup/",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-markitup",
    "package_url": "https://pypi.org/project/django-markitup/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-markitup/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/carljm/django-markitup/"
    },
    "release_url": "https://pypi.org/project/django-markitup/2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Markup handling for Django using the MarkItUp! universal markup editor",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14881136,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbf073274c972371837b953ac51320c7250f4ce06546db864b673cdb3e06ce60",
        "md5": "b3e7ff68f79d2d9bb7067b1911081474",
        "sha256": "100c1e7d44d96ed6411a8787a06835450009ef9ab803859e074286bb7bbfc1a6"
      },
      "downloads": -1,
      "filename": "django-markitup-2.1.tar.gz",
      "has_sig": true,
      "md5_digest": "b3e7ff68f79d2d9bb7067b1911081474",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 78769,
      "upload_time": "2013-11-11T19:45:20",
      "upload_time_iso_8601": "2013-11-11T19:45:20.737734Z",
      "url": "https://files.pythonhosted.org/packages/fb/f0/73274c972371837b953ac51320c7250f4ce06546db864b673cdb3e06ce60/django-markitup-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}