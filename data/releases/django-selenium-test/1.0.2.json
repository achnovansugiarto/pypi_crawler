{
  "info": {
    "author": "Tom Wiesing",
    "author_email": "tkw01536@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# django-selenium-test\n\n[![Build button](https://travis-ci.com/tkw1536/django_selenium_test.svg?branch=master)](https://travis-ci.com/tkw1536/django_selenium_test/)\n![License](https://img.shields.io/pypi/l/django-selenium-test.svg)\n![Status](https://img.shields.io/pypi/status/django-selenium-test.svg)\n[![Latest version](https://img.shields.io/pypi/v/django-selenium-test.svg)](https://pypi.python.org/pypi/django-selenium-test)\n\nWrite Selenium tests on Django 2.x and Djano 3.0 and Python 3.8. \nBased on [django-selenium-clean](https://github.com/aptiko/django-selenium-clean). \n\nThis documentation is currently a work-in-progress. \n\n## Tutorial\n\n### Installation\n\nIn your virtualenv:\n\n```sh\npip install django-selenium-test\n```\n\n### Setting up\n\n* Create a new django project and app:\n\n```sh\ndjango-admin startproject foo\ncd foo\npython manage.py startapp bar\n```\n\n* In ``foo/settings.py``, add ``'bar'`` to ``INSTALLED_APPS``\n\n* In ``foo/urls.py``, add ``from bar.views import SimpleView`` to the\n  top, and add ``url(r'^$', SimpleView.as_view())`` to ``urlpatterns``.\n\n* Add the SimpleView to ``bar/views.py``:\n\n```python\nimport textwrap\n\nfrom django.http import HttpResponse\nfrom django.views.generic.base import View\n\n\nclass SimpleView(View):\n\n    def dispatch(request, *args, **kwargs):\n        response_text = textwrap.dedent('''\\\n            <html>\n            <head>\n            <title>Greetings to the world</title>\n            </head>\n            <body>\n            <h1 id=\"earth\">Greetings to earth</h1>\n            <h1 id=\"world\" style=\"display: none;\">Hello, world!</h1>\n\n            <p>We have some javascript here so that when you click the button\n                the heading above toggles between \"Greetings to earth\" and\n                \"Hello, world!\".</p>\n\n            <button onclick=\"toggle()\">Toggle</button>\n\n            <script type=\"text/javascript\">\n                toggle = function () {\n                    var heading_earth = document.getElementById(\"earth\");\n                    var heading_world = document.getElementById(\"world\");\n                    if (heading_earth.style.display == 'none') {\n                        heading_world.style.display = 'none';\n                        heading_earth.style.display = 'block';\n                    } else {\n                        heading_earth.style.display = 'none';\n                        heading_world.style.display = 'block';\n                    }\n                }\n            </script>\n            </body>\n            </html>\n        ''')\n        return HttpResponse(response_text)\n```\n\nWe're done setting up. If you now run ``python manage.py runserver``\nin your browser and visit http://localhost:8000/ in your browser, you\nshould see the simple page. Let's now proceed to write a test for it.\n\n### Writing the test\n\nModify ``bar/tests.py`` so that it has the following contents:\n\n```python\nfrom unittest import skipUnless\n\nfrom django.conf import settings\n\nfrom django_selenium_test import selenium, SeleniumTestCase, PageElement\nfrom selenium.webdriver.common.by import By\n\n\n@skipUnless(getattr(settings, 'SELENIUM_WEBDRIVERS', False),\n            \"Selenium is unconfigured\")\nclass HelloTestCase(SeleniumTestCase):\n\n    heading_earth = PageElement(By.ID, 'earth')\n    heading_world = PageElement(By.ID, 'world')\n    button = PageElement(By.CSS_SELECTOR, 'button')\n\n    def test_toggle(self):\n        # Visit the page\n        self.selenium.get(self.live_server_url)\n\n        # Check that the earth heading is visible\n        self.assertTrue(self.heading_earth.is_displayed())\n        self.assertFalse(self.heading_world.is_displayed())\n\n        # Toggle and check the new condition\n        self.button.click()\n        self.heading_world.wait_until_is_displayed()\n        self.assertFalse(self.heading_earth.is_displayed())\n        self.assertTrue(self.heading_world.is_displayed())\n\n        # Toggle again and re-check\n        self.button.click()\n        self.heading_earth.wait_until_is_displayed()\n        self.assertTrue(self.heading_earth.is_displayed())\n        self.assertFalse(self.heading_world.is_displayed())\n```\n\n### Executing the test\n\nTry ``python manage.py test`` and it will skip the test because\nselenium is unconfigured. You need to configure it by specifying\n``SELENIUM_WEBDRIVERS`` in ``foo/settings.py``:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver\n\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {}),\n}\n```\n\nNow try again, and it should execute the test. \n\n### Advanced test running tricks\n\n#### Executing a test in many widths\n\nAdd this to your ``foo/settings.py``:\n\n```python\nSELENIUM_WIDTHS = [1024, 800, 350]\n```\n\nThis will result in executing all ``SeleniumTestCase``'s three times,\none for each specified browser width. Useful for responsive designs.\nThe default is to run them on only one width, 1024.\n\n#### Using many selenium drivers\n\nYou can have many ``SELENIUM_WEBDRIVERS``:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver, make_firefox_driver\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {})\n    'firefox': make_firefox_driver([], {})\n}\n```\n\nBy default, the ``default`` one is used. You can specify another using\nthe ``SELENIUM_WEBDRIVER`` environment variable:\n\n```sh\nSELENIUM_WEBDRIVER=firefox python manage.py test\n```\n\n\n#### Running a headless browser\n\nIt can be very useful to run the selenium tests with a headless\nbrowser, that is, in an invisible browser window. For one thing, it\nis much faster. \n\nTo achieve this, pass headless=True to the make_BRAND_driver() function:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver, make_firefox_driver\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {}, headless=True)\n    'firefox': make_firefox_driver([], {}, headless=True)\n}\n```\n\n#### Using advanced integration tests\n\n(Currently undocumented)\n\n\n## Reference\n\n### SeleniumTestCase objects\n\n.. code:: python\n\n   from django_selenium_test import SeleniumTestCase\n\n``SeleniumTestCase`` is the same as Django's\n``StaticLiveServerTestCase`` but it adds a little bit of Selenium\nfunctionality. Derive your Selenium tests from this class instead of\n``StaticLiveServerTestCase``.\n\nThe most important feature of ``SeleniumTestCase`` is the ``selenium``\nattribute.  Technically it is a wrapper around the selenium driver. In\npractice, you can think about it as the browser, or as the equivalent\nof Django's test client. It has all `selenium driver attributes and\nmethods`_, but you will mostly use ``get()``. It also has the\nfollowing additional methods:\n\n* ``self.selenium.login(**credentials)``,\n``self.selenium.force_login(user, base_url)``,\n``self.selenium.logout()``\n\n  Similar to the Django test client ``login()``, ``force_login()`` and\n  ``logout()`` methods.  ``login()`` returns ``True`` if login is\n  possible; ``False`` if the provided credentials are incorrect, or the\n  user is inactive, or if the sessions framework is not available.\n\n  The `force_login()` code was adapted from [django-selenium-login](https://github.com/feffe/django-selenium-login/blob/master/seleniumlogin/__init__.py),\n  which is licensed under the MIT License. \n\n* ``self.selenium.wait_until_n_windows(n, timeout=2)``\n\n  Useful when a Javascript action has caused the browser to open\n  another window. The typical usage is this:\n\n```python\nbutton_that_will_open_a_second_window.click()\nself.selenium.wait_until_n_windows(n=2, timeout=10)\nwindows = self.selenium.window_handles\nself.selenium.switch_to_window(windows[1])\n# continue testing\n```\n\n  If the timeout (in seconds) elapses and the number of browser\n  windows never becomes ``n``, an ``AssertionError`` is raised.\n\n- [selenium driver attributes and methods](http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webdriver)\n\nPageElement objects\n-------------------\n\n```python\nfrom django_selenium_test import PageElement\n```\n\n``PageElement`` is a lazy wrapper around WebElement_; it has all its\nproperties and methods. It is initialized with a locator_, but the\nelement is not actually located until needed. In addition to\nWebElement_ properties and methods, it has these:\n\n* ``PageElement.exists()``: Returns True if the element can be located.\n\n* ``PageElement.wait_until_exists(timeout=10)``\n\n  ``PageElement.wait_until_not_exists(timeout=10)``\n\n  ``PageElement.wait_until_is_displayed(timeout=10)``\n\n  ``PageElement.wait_until_not_displayed(timeout=10)``\n\n  ``PageElement.wait_until_contains(text, timeout=10)``\n\n  ``PageElement.wait_until_not_contains(text, timeout=10)``\n\n  What these methods do should be self-explanatory from their name. The\n  ones ending in ``contains`` refer to whether the element contains the\n  specified text.  The methods raise an exception if there is a timeout.\n\n- [WebElement](http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webelement)\n- [locator](http://selenium-python.readthedocs.org/api.html#locate-elements-by)\n\n### IntegrationTest objects\n(Currently undocumented)\n\n### Running django-selenium-test's own unit tests\n\nBy default the unit tests will use Chrome::\n\n```sh\n./setup.py test\n```\n\nUse the ``SELENIUM_BROWSER`` environment variable to use another browser:\n\n```sh\nSELENIUM_BROWSER=firefox ./setup.py test\n```\n\n## License\n\nLicensed under the BSD 3-clause license; see `LICENSE.txt` for details.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tkw1536/django_selenium_test",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-selenium-test",
    "package_url": "https://pypi.org/project/django-selenium-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-selenium-test/",
    "project_urls": {
      "Homepage": "https://github.com/tkw1536/django_selenium_test"
    },
    "release_url": "https://pypi.org/project/django-selenium-test/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Write clean Selenium tests in Django",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8071023,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71e6caed845c5ae960db03201e1d336f26d12c97c24e351101d62020ae9d1d60",
        "md5": "8338dba855dbb05425b5ef76903c523d",
        "sha256": "d117e14483a6b10286c3a7c1ea2f5027d32e831155abdc5f2bfb0d6455f034df"
      },
      "downloads": -1,
      "filename": "django_selenium_test-1.0.2-py3.8.egg",
      "has_sig": false,
      "md5_digest": "8338dba855dbb05425b5ef76903c523d",
      "packagetype": "bdist_egg",
      "python_version": "3.8",
      "requires_python": null,
      "size": 41995,
      "upload_time": "2020-04-15T15:39:47",
      "upload_time_iso_8601": "2020-04-15T15:39:47.240683Z",
      "url": "https://files.pythonhosted.org/packages/71/e6/caed845c5ae960db03201e1d336f26d12c97c24e351101d62020ae9d1d60/django_selenium_test-1.0.2-py3.8.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8b57b44fd8bc380a3ee4d108540d3f64d09a6fb271c02ddf658fcd8f0f82c1d6",
        "md5": "0266171d767bb15e9263b60f8cac1197",
        "sha256": "bf72d3a62458e1d29635dd267fae8a6f298e03f504790b5d4f9d1b65f326065c"
      },
      "downloads": -1,
      "filename": "django-selenium-test-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0266171d767bb15e9263b60f8cac1197",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21962,
      "upload_time": "2020-04-15T15:39:45",
      "upload_time_iso_8601": "2020-04-15T15:39:45.852444Z",
      "url": "https://files.pythonhosted.org/packages/8b/57/b44fd8bc380a3ee4d108540d3f64d09a6fb271c02ddf658fcd8f0f82c1d6/django-selenium-test-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}