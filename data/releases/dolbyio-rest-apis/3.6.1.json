{
  "info": {
    "author": "Dolby.io",
    "author_email": "fabien.lavocat@dolby.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Dolby.io REST APIs Client for Python\n\nPython wrapper for the dolby.io REST [Communications](https://docs.dolby.io/communications-apis/reference/authentication-api), [Streaming](https://docs.dolby.io/streaming-apis/reference) and [Media](https://docs.dolby.io/media-processing/reference/media-enhance-overview) APIs.\n\n## Install this project\n\nCheck the [dolbyio-rest-apis](https://pypi.org/project/dolbyio-rest-apis/) package on PyPI. To install the latest stable python package run the following command: \n\n```bash\npython3 -m pip install dolbyio-rest-apis\n```\n\nUpgrade your package to the latest version:\n\n```bash\npython3 -m pip install --upgrade dolbyio-rest-apis\n```\n\n## Logging\n\nYou can change the log level by using the Python [logging](https://docs.python.org/3/library/logging.html) library.\n\n```python\nimport logging\n\nlogging.basicConfig(level='DEBUG')\n```\n\n## Authentication\n\nIn order to make API calls for most operations of the **Communications APIs** and **Media APIs**, you must get an access token using this API:\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis import authentication\n\nAPP_KEY = 'YOUR_APP_KEY'\nAPP_SECRET = 'YOUR_APP_SECRET'\n\nloop = asyncio.get_event_loop()\n\ntask = authentication.get_api_token(APP_KEY, APP_SECRET)\nat = loop.run_until_complete(task)\n\nprint(f'API Token: {at.access_token}')\n```\n\n## Communications Examples\n\n### Get a client access token\n\nTo get an access token that will be used by the client SDK for an end user to open a session against dolby.io, use the following code:\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis.communications import authentication\n\nAPP_KEY = 'YOUR_APP_KEY'\nAPP_SECRET = 'YOUR_APP_SECRET'\n\nloop = asyncio.get_event_loop()\n\ntask = authentication.get_api_token(APP_KEY, APP_SECRET)\nat = loop.run_until_complete(task)\n\nprint(f'Access Token: {at.access_token}')\n```\n\nBecause most of the APIs are asynchronous, you can write an async function like that:\n\n```python\nfrom dolbyio_rest_apis.communications import authentication\n\nAPP_KEY = 'YOUR_APP_KEY'\nAPP_SECRET = 'YOUR_APP_SECRET'\n\nasync def get_client_access_token():\n    at = await authentication.get_client_access_token(APP_KEY, APP_SECRET)\n    print(f'Access Token: {at.access_token}')\n\n```\n\n### Create a conference\n\nTo create a Dolby Voice conference, you first must retrieve an API Access Token, then use the following code to create the conference.\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis import authentication\nfrom dolbyio_rest_apis.communications import conference\nfrom dolbyio_rest_apis.communications.models import Participant, Permission, VideoCodec\n\nAPP_KEY = 'YOUR_APP_KEY'\nAPP_SECRET = 'YOUR_APP_SECRET'\n\nowner_id = '' # Identifier of the owner of the conference\nalias = '' # Conference alias\n\nparticipants = [\n    Participant('hostA', [Permission.JOIN, Permission.SEND_AUDIO, Permission.SEND_VIDEO], notify=True),\n    Participant('listener1', [Permission.JOIN], notify=False),\n]\n\nloop = asyncio.get_event_loop()\n\n# Request an API token\ntask = authentication.get_api_token(APP_KEY, APP_SECRET)\nat = loop.run_until_complete(task)\n\ntask = conference.create_conference(\n    at.access_token,\n    owner_id,\n    alias,\n    video_codec=VideoCodec.VP8,\n    participants=participants\n)\nconf = loop.run_until_complete(task)\n\nprint(f'Conference created: {conf.id}')\n```\n\n## Real-time Streaming Examples\n\n### Create a publish token\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis.streaming import publish_token\nfrom dolbyio_rest_apis.streaming.models.publish_token import CreatePublishToken, CreateUpdatePublishTokenStream\n\nAPI_SECRET = '' # Retrieve your API Secret from the dashboard\n\ncreate_token = CreatePublishToken('my_token')\ncreate_token.streams.append(CreateUpdatePublishTokenStream('feed1', False))\n\nloop = asyncio.get_event_loop()\n\ntask = publish_token.create(API_SECRET, create_token)\ntoken = loop.run_until_complete(task)\n\nprint(token)\n```\n\n### Create a subscribe token\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis.streaming import subscribe_token\nfrom dolbyio_rest_apis.streaming.models.subscribe_token import CreateSubscribeToken, CreateUpdateSubscribeTokenStream\n\nAPI_SECRET = '' # Retrieve your API Secret from the dashboard\n\ncreate_token = CreateSubscribeToken('my_token')\ncreate_token.streams.append(CreateUpdateSubscribeTokenStream('feed1', False))\n\nloop = asyncio.get_event_loop()\n\ntask = publish_token.create(API_SECRET, create_token)\ntoken = loop.run_until_complete(task)\n\nprint(token)\n```\n\n## Media Examples\n\nHere is an example on how to upload a file to the Dolby.io temporary cloud storage, enhance that file and download the result.\n\n### Get an API token\n\nGet the App Key and Secret from the Dolby.io dashboard and use the following code in your python script.\n\n```python\nimport asyncio\nfrom dolbyio_rest_apis import authentication\n\nAPP_KEY = 'YOUR_APP_KEY'\nAPP_SECRET = 'YOUR_APP_SECRET'\n\nloop = asyncio.get_event_loop()\n\ntask = authentication.get_api_token(APP_KEY, APP_SECRET, 2 * 60 * 60) # 2 hours\nat = loop.run_until_complete(task)\nprint(f'API token: {at.access_token}')\n```\n\n### Upload a file for processing\n\nAdd the following `import` to your script.\n\n```python\nfrom dolbyio_rest_apis.media import io\n```\n\nUsing the API token, start by requesting an upload URL.\n\n```python\n# Temporary storage URL that will be used as reference for the job processing\ninput_url = 'dlb://in/file.mp4'\n\n# Get an Upload URL\ntask = io.get_upload_url(\n    access_token=at.access_token,\n    dlb_url=input_url,\n)\nupload_url = loop.run_until_complete(task)\nprint(f'Upload URL: {upload_url}')\n```\n\nUpload a media file to the Dolby.io temporary cloud storage for processing:\n\n```python\n# Location of the original file on the local machine\nIN_FILE_PATH = '/path/to/original_file.mp4'\n\n# Upload the file\ntask = io.upload_file(\n    upload_url=upload_url,\n    file_path=IN_FILE_PATH,\n)\nloop.run_until_complete(task)\n```\n\n### Start an enhance job\n\nAdd the following `import` to your script.\n\n```python\nimport json\nfrom dolbyio_rest_apis.media import enhance\n```\n\nGenerate a job description and send it to Dolby.io.\n\n```python\n# Temporary storage URL where the service will write the result file to\noutput_url = 'dlb://out/file.mp4'\n\n# Job description\njob = {\n    'input': input_url,\n    'output': output_url,\n    'content': {\n        'type': 'podcast',\n    },\n}\njob_str = json.dumps(job, indent=4)\nprint(job_str)\n\n# Start the enhance job and get a job ID back\ntask = enhance.start(at.access_token, job_str)\njob_id = loop.run_until_complete(task)\nprint(f'Job ID: {job_id}')\n```\n\n### Wait for the job to complete\n\nAdd the following `import` to your script.\n\n```python\nimport sys\nimport time\n```\n\nGet the job status and wait until it is completed.\n\n```python\ntask = enhance.get_results(at.access_token, job_id)\nresult = loop.run_until_complete(task)\nwhile result.status in ( 'Pending', 'Running' ):\n    print(f'Job status is {result.status}, taking a 5 second break...')\n    time.sleep(5)\n\n    task = enhance.get_results(at.access_token, job_id)\n    result = loop.run_until_complete(task)\n\nif result.status != 'Success':\n    print('There was a problem with processing the file')\n    print(json.dumps(result, indent=4))\n    sys.exit(1)\n```\n\n### Download a processed file\n\nAt this stage, the file has been processed and written to the temporary storage so we can download it.\n\n```python\n# Where to download the file on the local machine\nOUT_FILE_PATH = '/path/to/processed_file.mp4'\n\ntask = io.download_file(\n    access_token=at.access_token,\n    dlb_url=output_url,\n    file_path=OUT_FILE_PATH,\n)\nloop.run_until_complete(task)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dolbyio/dolbyio-rest-apis-client-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dolbyio-rest-apis",
    "package_url": "https://pypi.org/project/dolbyio-rest-apis/",
    "platform": null,
    "project_url": "https://pypi.org/project/dolbyio-rest-apis/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dolbyio/dolbyio-rest-apis-client-python/issues",
      "Documentation": "https://docs.dolby.io/communications-apis/reference",
      "Homepage": "https://github.com/dolbyio/dolbyio-rest-apis-client-python",
      "Source": "https://github.com/dolbyio/dolbyio-rest-apis-client-python"
    },
    "release_url": "https://pypi.org/project/dolbyio-rest-apis/3.6.1/",
    "requires_dist": [
      "aiofiles (>=0.7.0)",
      "aiohttp-retry (>=2.4.6)",
      "aiohttp (>=3.7.4)",
      "certifi (>=2022.12.7)"
    ],
    "requires_python": ">=3.7",
    "summary": "A Python wrapper for the Dolby.io REST APIs.",
    "version": "3.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17213151,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f93ea5539447579ddda3d0d475b26f76198c21c21702a5d737690849588541ad",
        "md5": "acf1f7ba80c663725cd3fd1f6190b57a",
        "sha256": "3e1d1fd84fff2fed996a03f47cf84d910f0b3e12f88e28478c933d8e74c0523d"
      },
      "downloads": -1,
      "filename": "dolbyio_rest_apis-3.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "acf1f7ba80c663725cd3fd1f6190b57a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 59521,
      "upload_time": "2023-03-08T20:29:10",
      "upload_time_iso_8601": "2023-03-08T20:29:10.469363Z",
      "url": "https://files.pythonhosted.org/packages/f9/3e/a5539447579ddda3d0d475b26f76198c21c21702a5d737690849588541ad/dolbyio_rest_apis-3.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56ea6f214d1aa892a47c114f296d92569047cbca0d87ca5c7d3f064eb40b5d53",
        "md5": "14188dd6f0062d3e1830735678d07474",
        "sha256": "7fb37764ffdf5cee33789b83da144c05d7d520b3de6fd60723d7ec4a1a7878b9"
      },
      "downloads": -1,
      "filename": "dolbyio-rest-apis-3.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "14188dd6f0062d3e1830735678d07474",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 58023,
      "upload_time": "2023-03-08T20:29:14",
      "upload_time_iso_8601": "2023-03-08T20:29:14.307326Z",
      "url": "https://files.pythonhosted.org/packages/56/ea/6f214d1aa892a47c114f296d92569047cbca0d87ca5c7d3f064eb40b5d53/dolbyio-rest-apis-3.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}