{
  "info": {
    "author": "Z. Alem",
    "author_email": "alem@cidola.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===============================\nDjango Bootstrap CRUD Templates\n===============================\n\nDjango has freed the developer from the toil of writing boilerplate view logic\nvia its class-based view; Bootstrap, the toil of designing aesthetic CSS+HTML\ncomponents.\n\nDjango Bootstrap CRUD Templates seeks to formally unite the two, allowing\ndevelopers to simply write class-based views and then select, or extend a chosen\nBootstrap template.\n\nDemo_\n\n.. _Demo: http://bsct-demo.cidola.com/widget/list\n\n\nInstallation\n-------------\n1. ``pip install django-bootstrap-crud-templates``\n2. Add ``'bsct'`` in the ``INSTALLED_APPS`` list in your project's settings module.\n\nUsage\n-----\n\nDjango Bootstrap CRUD Templates provides a repository of Bootstrap-integrated Django\ntemplates. These templates are designed to work directly with the context\nvariables provided by the Django Class-Based View (CBV) and the attributes\nprovided by the Django model.\n\nModel Requirements\n~~~~~~~~~~~~~~~~~~\n\nIn order to make the most use of the features, the Model should have a few\nattributes defined:\n    \n- ``get_absolute_url`` *: Returns the url to view the instance.\n- ``get_create_url``: Returns the url to create an instance.\n- ``get_list_url``: Returns the url to list all instances.\n- ``get_delete_url``: Returns the url to delete the instance.\n- ``get_update_url``: Returns the url to update the instance.\n\n* Required for minimal navigational functionality.\n\nFor example, with a delete url named 'widget_delete', get_delete_url may be\ndefined as: ::\n    \n    def get_delete_url( self ):\n        return reverse( 'widget_delete', kwargs = {'pk' : self.pk } )\n\nOr, you can skip defining these by adding the ``BSCTModelMixin`` to your model and\nsimply naming your urls in the following way:\n\n- ``lowercasemodelname_detail``: For the DetailView.\n- ``lowercasemodelname_create``: For the CreateView.\n- ``lowercasemodelname_list``: For the ListView.\n- ``lowercasemodelname_update``: For the UpdateView.\n- ``lowercasemodelname_delete``: For the DeleteView.\n\n\nView Requirements\n~~~~~~~~~~~~~~~~~\nTo use a template directly, simply assign its name to the `template_name`\nattribute of the CBV. ::\n\n    #in views.py\n    class CreateWidget( generic.CreateView ):\n        model = models.Widget\n        template_name = 'bsct/plain/form.html'\n\nBy default, the template extends from 'base.html' and populates the \nblock BSCT_MAIN. Therefore, you will need to have the template 'base.html'\nand it must contain the block BSCT_MAIN ::\n    \n    # base.html\n    {% block BSCT_MAIN %}\n    {% endblock %}\n\nIf you wish to have the template extend from a template other than 'base.html',\nsimply provide its name as the value for the context variable 'bsct_base'. ::\n\n    #in views.py\n    class CreateWidget( generic.CreateView ):\n        model = models.Widget,\n        template_name = 'bsct/plain/form.html'\n        \n        def get_context_data(self, **kwargs):\n            context = super(CreateWidget, self).get_context_data(**kwargs)\n            context['bsct_base'] = 'my_special_widget_base.html'\n            return context\n\nCustomization\n-------------\nCustomizing these templates is as simple as creating your own template and\nincluding the desired Django Bootstrap CRUD Templates template. ::\n\n    # widget_list.html\n    {% extends 'bsct/plain/list.html' %}\n\n    {% block BSCT_LIST_ACTIONS %}\n        <a href='{% object.use_widget %}'> Use Widget </a>   \n    {% endblock %}\n\nThe default 'bsct/base.html' links to a CDN-hosted minified Bootstrap\nCSS file. If you prefer to use your own version, simply override the block\nBSCT_BOOTSTRAP_CDN. ::\n\n    {% block BSCT_BOOTSTRAP_CDN %}\n    {% endblock %}\n\nBuilt for developers, by developers\n-----------------------------------\nDjango Bootstrap CRUD Templates is an open source project that ultimately aims to\nhost a collection of user-submitted Bootstrap template-sets for Django. \n\nIf you have a set of Bootstrap templates you wish to include, simply \nfollow the five steps below (assuming you have a GitHub account):\n\n1. Fork and clone https://github.com/Alem/django-bootstrap-crud-templates.\n2. Ensure your set has at least two of the following templates:\n\n   - form.html\n   - list.html\n   - detail.html\n   - confirm_delete.html \n\n3. (optional) Create a README.rst with a brief description of the template set and any other pertinent information ( external dependencies, author, homepage ).\n\n4. Place all the files in \"bsct/templates/yourthemename/\".\n\n5. Pull.\n\nAll contributed templates inherit the license of the encompassing project.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://packages.python.org/django-bootstrap-crud-templates",
    "keywords": "django,templates. bootstrap,bootstrap templates,crud templates",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-bootstrap-crud-templates",
    "package_url": "https://pypi.org/project/django-bootstrap-crud-templates/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-bootstrap-crud-templates/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://packages.python.org/django-bootstrap-crud-templates"
    },
    "release_url": "https://pypi.org/project/django-bootstrap-crud-templates/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A repository of Bootstrap CRUD templates for Django.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6400283,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34783a588b4a088adc6c867921894584ddb66e82e06ca1aaefa64c8a9fa70d1b",
        "md5": "a9d8462ae679bbb0642697c2400f7314",
        "sha256": "a53b716cef265448e7c183a459fbd40aca031f7bcc472725bcacb411384ef0a6"
      },
      "downloads": -1,
      "filename": "django-bootstrap-crud-templates-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9d8462ae679bbb0642697c2400f7314",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11758,
      "upload_time": "2013-07-19T00:51:38",
      "upload_time_iso_8601": "2013-07-19T00:51:38.462399Z",
      "url": "https://files.pythonhosted.org/packages/34/78/3a588b4a088adc6c867921894584ddb66e82e06ca1aaefa64c8a9fa70d1b/django-bootstrap-crud-templates-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}