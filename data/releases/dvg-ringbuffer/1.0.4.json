{
  "info": {
    "author": "Dennis van Gils",
    "author_email": "vangils.dennis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": ".. image:: https://static.pepy.tech/personalized-badge/dvg-ringbuffer?period=month&units=international_system&left_color=gray&right_color=blue&left_text=%E2%86%93%20per%20month\n    :target: https://pepy.tech/project/dvg-ringbuffer\n.. image:: https://img.shields.io/pypi/v/dvg-ringbuffer\n    :target: https://pypi.org/project/dvg-ringbuffer\n.. image:: https://img.shields.io/pypi/pyversions/dvg-ringbuffer\n    :target: https://pypi.org/project/dvg-ringbuffer\n.. image:: https://github.com/Dennis-van-Gils/python-dvg-ringbuffer/actions/workflows/python-package.yml/badge.svg\n    :target: https://github.com/Dennis-van-Gils/python-dvg-ringbuffer/actions/workflows/python-package.yml\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/badge/License-MIT-purple.svg\n    :target: https://github.com/Dennis-van-Gils/python-dvg-ringbuffer/blob/master/LICENSE.txt\n\nDvG_RingBuffer\n==============\n*Provides a numpy ring buffer at a fixed memory address to allow for\nsignificantly sped up* ``numpy``, ``sigpy``, ``numba`` *&* ``pyFFTW``\n*calculations.*\n\n- Github: https://github.com/Dennis-van-Gils/python-dvg-ringbuffer\n- PyPI: https://pypi.org/project/dvg-ringbuffer\n\nInstallation::\n\n    pip install dvg-ringbuffer\n\nBased on:\n\n    https://pypi.org/project/numpy_ringbuffer/ by Eric Wieser.\n\n    ``DvG_RingBuffer`` can be used as a drop-in replacement for\n    ``numpy_ringbuffer`` and provides several optimizations and extra features,\n    but requires Python 3.\n\nIf and only if the ring buffer is completely full, will it return its array\ndata as a contiguous C-style numpy array at a single fixed memory address per\nring buffer instance. It does so by unwrapping the discontiguous ring buffer\narray into a second extra *unwrap* buffer that is a private member of the ring\nbuffer class. This is advantegeous for other accelerated computations by, e.g.,\n``numpy``, ``sigpy``, ``numba`` & ``pyFFTW``, that benefit from being fed with\ncontiguous arrays at the same memory address each time again, such that compiler\noptimizations and data planning are made possible.\n\nWhen the ring buffer is not completely full, it will return its data as a\ncontiguous C-style numpy array, but at different memory addresses. This is how\nthe original ``numpy-buffer`` always operates.\n\nCommonly, ``collections.deque()`` is used to act as a ring buffer. The\nbenefits of a deque is that it is thread safe and fast (enough) for most\nsituations. However, there is an overhead whenever the deque -- a list-like\ncontainer -- needs to be transformed into a numpy array. Because\n``DvG_RingBuffer`` already returns numpy arrays it will outperform a\n``collections.deque()`` easily, tested to be a factor of ~60.\n\n.. warning::\n\n    * This ring buffer is not thread safe. You'll have to implement your own\n      mutex locks when using this ring buffer in multithreaded operations.\n\n    * The data array that is returned by a full ring buffer is a pass by\n      reference of the *unwrap* buffer. It is not a copy! Hence, changing\n      values in the returned data array is identical to changing values in the\n      *unwrap* buffer.\n\nAPI\n===\n\n``class RingBuffer(capacity, dtype=np.float64, allow_overwrite=True)``\n----------------------------------------------------------------------\n    Create a new ring buffer with the given capacity and element type.\n\n        Args:\n            capacity (``int``):\n                The maximum capacity of the ring buffer\n\n            dtype (``data-type``, optional):\n                Desired type of buffer elements. Use a type like ``(float, 2)``\n                to produce a buffer with shape ``(capacity, 2)``.\n\n                Default: ``np.float64``\n\n            allow_overwrite (``bool``, optional):\n                If ``False``, throw an IndexError when trying to append to an\n                already full buffer.\n\n                Default: ``True``\n\nMethods\n-------\n* ``clear()``\n* ``append(value)``\n    Append a single value to the ring buffer.\n\n    .. code-block:: python\n\n        rb = RingBuffer(3, dtype=np.int)  #  []\n        rb.append(1)                      #  [1]\n        rb.append(2)                      #  [1, 2]\n        rb.append(3)                      #  [1, 2, 3]\n        rb.append(4)                      #  [2, 3, 4]\n\n* ``appendleft(value)``\n    Append a single value to the ring buffer from the left side.\n\n    .. code-block:: python\n\n        rb = RingBuffer(3, dtype=np.int)  #  []\n        rb.appendleft(1)                  #  [1]\n        rb.appendleft(2)                  #  [2, 1]\n        rb.appendleft(3)                  #  [3, 2, 1]\n        rb.appendleft(4)                  #  [4, 3, 2]\n\n* ``extend(values)``\n    Extend the ring buffer with a list of values.\n\n    .. code-block:: python\n\n        rb = RingBuffer(3, dtype=np.int)  #  []\n        rb.extend([1])                    #  [1]\n        rb.extend([2, 3])                 #  [1, 2, 3]\n        rb.extend([4, 5, 6, 7])           #  [5, 6, 7]\n\n* ``extendleft(values)``\n    Extend the ring buffer with a list of values from the left side.\n\n    .. code-block:: python\n\n        rb = RingBuffer(3, dtype=np.int)  #  []\n        rb.extendleft([1])                #  [1]\n        rb.extendleft([3, 2])             #  [3, 2, 1]\n        rb.extendleft([7, 6, 5, 4])       #  [7, 6, 5]\n\n* ``pop()``\n    Remove the right-most item from the ring buffer and return it.\n\n* ``popleft()``\n    Remove the left-most item from the ring buffer and return it.\n\nProperties\n----------\n* ``is_full``\n* ``unwrap_address``\n* ``current_address``\n* ``dtype``\n* ``shape``\n* ``maxlen``\n\nIndexing & slicing\n------------------\n* ``[]`` including negative indices and slicing\n\n    .. code-block:: python\n\n        from dvg_ringbuffer import RingBuffer\n\n        rb = RingBuffer(4, dtype=np.int)  # --> rb[:] = array([], dtype=int32)\n        rb.extend([1, 2, 3, 4, 5])        # --> rb[:] = array([2, 3, 4, 5])\n        x = rb[0]                         # --> x = 2\n        x = rb[-1]                        # --> x = 5\n        x = rb[:3]                        # --> x = array([2, 3, 4])\n        x = rb[np.array([0, 2, -1])]      # --> x = array([2, 4, 5])\n\n        rb = RingBuffer(5, dtype=(np.int, 2))  # --> rb[:] = array([], shape=(0, 2), dtype=int32)\n        rb.append([1, 2])                      # --> rb[:] = array([[1, 2]])\n        rb.append([3, 4])                      # --> rb[:] = array([[1, 2], [3, 4]])\n        rb.append([5, 6])                      # --> rb[:] = array([[1, 2], [3, 4], [5, 6]])\n        x = rb[0]                              # --> x = array([1, 2])\n        x = rb[0, :]                           # --> x = array([1, 2])\n        x = rb[:, 0]                           # --> x = array([1, 3, 5])\n\nChangelog\n=========\n\n1.0.4 (2023-02-27)\n------------------\n* Deprecated `requires.io` and `travis`\n\n1.0.3 (2021-05-28)\n------------------\n* Added dev note: Don't use numba's njit decorator on `np.concatenate()`\n\n1.0.2 (2021-05-26)\n------------------\n* Replaced Numpy types with standard types as requested by Numpy\n\n1.0.1 (2020-07-21)\n------------------\n* Updated documentation\n\n1.0.0 (2020-07-21)\n------------------\n* First release on PyPI\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Dennis-van-Gils/python-dvg-ringbuffer",
    "keywords": "ring buffer,circular buffer,numpy-ringbuffer,numpy,scipy,numba,pyFFTW,deque,speed,fast",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dvg-ringbuffer",
    "package_url": "https://pypi.org/project/dvg-ringbuffer/",
    "platform": null,
    "project_url": "https://pypi.org/project/dvg-ringbuffer/",
    "project_urls": {
      "Homepage": "https://github.com/Dennis-van-Gils/python-dvg-ringbuffer",
      "Issue Tracker": "https://github.com/Dennis-van-Gils/python-dvg-ringbuffer/issues"
    },
    "release_url": "https://pypi.org/project/dvg-ringbuffer/1.0.4/",
    "requires_dist": [
      "numpy (~=1.15)"
    ],
    "requires_python": "~=3.0",
    "summary": "Numpy ring buffer at a fixed memory address to allow for significantly sped up numpy, sigpy, numba & pyFFTW calculations.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17067471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b1fbc4e36ea1393f538082e7782eefab88c6dbc2fe807532a25a44d88891799",
        "md5": "deb778da7b81158e8ee4ff365cd10c1b",
        "sha256": "4b3982de8b6d57f55a8239700001ba41c11b476e67f6e028fc3d1f330d372590"
      },
      "downloads": -1,
      "filename": "dvg_ringbuffer-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "deb778da7b81158e8ee4ff365cd10c1b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.0",
      "size": 9436,
      "upload_time": "2023-02-27T13:47:45",
      "upload_time_iso_8601": "2023-02-27T13:47:45.771275Z",
      "url": "https://files.pythonhosted.org/packages/2b/1f/bc4e36ea1393f538082e7782eefab88c6dbc2fe807532a25a44d88891799/dvg_ringbuffer-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8450fea60448a4c77e9850e4fd9b324c4b715325ea0dee9280f8dce648a960e4",
        "md5": "d726ebf64afef92cf6013354202b9ed6",
        "sha256": "57b0bfea63837c87e2c9f29d7a5b108e1f41960a1374d76f863719c324c72e77"
      },
      "downloads": -1,
      "filename": "dvg-ringbuffer-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d726ebf64afef92cf6013354202b9ed6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.0",
      "size": 11083,
      "upload_time": "2023-02-27T13:47:47",
      "upload_time_iso_8601": "2023-02-27T13:47:47.460278Z",
      "url": "https://files.pythonhosted.org/packages/84/50/fea60448a4c77e9850e4fd9b324c4b715325ea0dee9280f8dce648a960e4/dvg-ringbuffer-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}