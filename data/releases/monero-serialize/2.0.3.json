{
  "info": {
    "author": "Dusan Klinec",
    "author_email": "dusan.klinec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security"
    ],
    "description": "# Monero Python serialization library\n\n[![Build Status](https://travis-ci.org/ph4r05/monero-serialize.svg?branch=master)](https://travis-ci.org/ph4r05/monero-serialize)\n\nThe library provides basic serialization logic for the Monero types,\nused in transaction processing and transaction signing.\n\n- Mainly supports binary serialization equivalent to Monero `BEGIN_SERIALIZE_OBJECT()`.\nThis serialization mechanism is used in the blockchain entity serialization.\n- Boost portable serialization added.\n- Support for `BEGIN_KV_SERIALIZE_MAP` is mainly supported. JSON and binary wire format.\n\nThe binary wire formats use streaming dumping / parsing for better memory efficiency.\n\nFor usage please take a look at [tests](https://github.com/ph4r05/monero-serialize/tree/master/monero_serialize/tests).\n\n```\npip install monero-serialize\n```\n\n## Example usage:\n\n```python\nimport binascii\nfrom monero_serialize import xmrserialize as x\nfrom monero_serialize import xmrtypes as xmr\n\nmsg = xmr.TxinToKey(amount=123, key_offsets=[1, 2, 3, 2**76], k_image=bytearray(range(32)))\n\n# Serialize\nwriter = x.MemoryReaderWriter()\nawait x.dump_message(writer, msg)\nprint(binascii.hexlify(writer.buffer))\n\n# Deserialize\ntest_deser = await x.load_message(x.MemoryReaderWriter(writer.buffer), xmr.TxinGen)\n```\n\n### Archive interface\n\n```python\nimport binascii\nfrom monero_serialize import xmrserialize as x\nfrom monero_serialize import xmrtypes as xmr\n\nmsg = xmr.TxinGen(height=42)\n\n# Serialize\nwriter = x.MemoryReaderWriter()\nar1 = x.Archive(writer, True)\nawait ar1.message(msg)\n\n# Deserialize\nmsg2 = xmr.TxinGen()\nar2 = x.Archive(x.MemoryReaderWriter(writer.buffer), False)\nawait ar2.message(msg2)\n```\n\n### Symmetric Boost archive\n\n```python\nimport binascii\nfrom monero_serialize import xmrserialize as x\nfrom monero_serialize import xmrtypes as xmr\nfrom monero_serialize import xmrboost as xmrb\n\ndata_hex = b'011673657269616c697a6174696f6e3a3a61726368697665000000000134'\ndata_bin = base64.b16decode(data_hex, True)\nreader = x.MemoryReaderWriter(bytearray(data_bin))\nar = xmrb.Archive(reader, False)\n\nmsg = xmr.TxinGen()\nawait ar.root_message(msg)\nself.assertEqual(msg.height, 0x34)\n```\n\n\n## XMR classes\n\n```python\nclass Hash(x.BlobType): pass;\nclass ECKey(x.BlobType): pass;\nclass ECPoint(x.BlobType): pass;\nclass SecretKey(ECKey): pass;\nclass ECPublicKey(ECPoint): pass;\nclass KeyImage(ECPoint): pass;\nclass KeyDerivation(ECPoint): pass;\nclass TxoutToScript(x.MessageType): pass;\nclass TxoutToKey(x.MessageType): pass;\nclass TxoutToScriptHash(x.MessageType): pass;\nclass TxoutTargetV(x.VariantType): pass;\nclass TxinGen(x.MessageType): pass;\nclass TxinToKey(x.MessageType): pass;\nclass TxinToScript(x.MessageType): pass;\nclass TxinToScriptHash(x.MessageType): pass;\nclass TxInV(x.VariantType): pass;\nclass TxOut(x.MessageType): pass;\nclass TransactionPrefix(x.MessageType): pass;\nclass TransactionPrefixExtraBlob(TransactionPrefix): pass;\n\n#\n# rctTypes.h\n#\n\nclass Key64(x.ContainerType): pass;\nclass KeyV(x.ContainerType): pass;\nclass KeyM(x.ContainerType): pass;\nclass KeyVFix(x.ContainerType): pass;\nclass KeyMFix(x.ContainerType): pass;\nclass CtKey(x.MessageType): pass;\nclass CtkeyV(x.ContainerType): pass;\nclass CtkeyM(x.ContainerType): pass;\nclass MultisigKLRki(x.MessageType): pass;\nclass MultisigOut(x.MessageType): pass;\nclass EcdhTuple(x.MessageType): pass;\nclass BoroSig(x.MessageType): pass;\nclass MgSig(x.MessageType): pass;\nclass RangeSig(x.MessageType): pass;\nclass Bulletproof(x.MessageType): pass;\nclass EcdhInfo(x.ContainerType): pass;\nclass RctSigBase(x.MessageType): pass;\nclass RctSigPrunable(x.MessageType): pass;\nclass RctSig(RctSigBase): pass;\nclass Signature(x.MessageType): pass;\nclass SignatureArray(x.ContainerType): pass;\nclass Transaction(TransactionPrefix): pass;\nclass BlockHeader(x.MessageType): pass;\nclass HashVector(x.ContainerType): pass;\nclass Block(BlockHeader): pass;\nclass AccountPublicAddress(x.MessageType): pass;\nclass SubaddressIndex(x.MessageType): pass;\nclass MultisigLR(x.MessageType): pass;\nclass MultisigInfo(x.MessageType): pass;\nclass MultisigStruct(x.MessageType): pass;\nclass TxExtraPadding(x.MessageType): pass;\nclass TxExtraPubKey(x.MessageType): pass;\nclass TxExtraNonce(x.MessageType): pass;\nclass TxExtraMergeMiningTag(x.MessageType): pass;\nclass TxExtraAdditionalPubKeys(x.MessageType): pass;\nclass TxExtraMysteriousMinergate(x.MessageType): pass;\nclass TxExtraField(x.VariantType): pass;\nclass TxExtraFields(x.ContainerType): pass;\nclass OutputEntry(x.TupleType): pass;\nclass TxSourceEntry(x.MessageType): pass;\nclass TxDestinationEntry(x.MessageType): pass;\nclass TransferDetails(x.MessageType): pass;\nclass TxConstructionData(x.MessageType): pass;\nclass PendingTransaction(x.MessageType): pass;\nclass PendingTransactionVector(x.ContainerType): pass;\nclass UnsignedTxSet(x.MessageType): pass;\nclass SignedTxSet(x.MessageType): pass;\nclass MultisigTxSet(x.MessageType): pass;\n```",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ph4r05/monero-serialize",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monero-serialize",
    "package_url": "https://pypi.org/project/monero-serialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-serialize/",
    "project_urls": {
      "Homepage": "https://github.com/ph4r05/monero-serialize"
    },
    "release_url": "https://pypi.org/project/monero-serialize/2.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Monero serialization",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14189057,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01e4d1210484b8d3df5af6ce142198c99ec07ede660e11fa95691a5fe69b03d6",
        "md5": "d6c0239a9191a9f97794475dedce0b15",
        "sha256": "4dae83b07fc5534ce263d341b8e5d990099c109cd1ba12693ae45d8bfdf5f3b3"
      },
      "downloads": -1,
      "filename": "monero-serialize-2.0.3.tar.gz",
      "has_sig": true,
      "md5_digest": "d6c0239a9191a9f97794475dedce0b15",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 108738,
      "upload_time": "2018-08-28T21:00:20",
      "upload_time_iso_8601": "2018-08-28T21:00:20.933808Z",
      "url": "https://files.pythonhosted.org/packages/01/e4/d1210484b8d3df5af6ce142198c99ec07ede660e11fa95691a5fe69b03d6/monero-serialize-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}