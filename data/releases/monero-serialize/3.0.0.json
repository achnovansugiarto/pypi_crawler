{
  "info": {
    "author": "Dusan Klinec",
    "author_email": "dusan.klinec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security"
    ],
    "description": "Monero Python serialization library\n===================================\n\n|Build Status|\n\nThe library provides basic serialization logic for the Monero types,\nused in transaction processing and transaction signing.\n\n-  Mainly supports binary serialization equivalent to Monero\n   ``BEGIN_SERIALIZE_OBJECT()``. This serialization mechanism is used in\n   the blockchain entity serialization.\n-  Boost portable serialization added.\n-  Support for ``BEGIN_KV_SERIALIZE_MAP`` is mainly supported. JSON and\n   binary wire format.\n\nThe binary wire formats use streaming dumping / parsing for better\nmemory efficiency.\n\nFor usage please take a look at\n`tests <https://github.com/ph4r05/monero-serialize/tree/master/monero_serialize/tests>`__.\n\n::\n\n    pip install monero-serialize\n\nExample usage:\n--------------\n\n.. code:: python\n\n    import binascii\n    from monero_serialize import xmrserialize as x\n    from monero_serialize import xmrtypes as xmr\n\n    msg = xmr.TxinToKey(amount=123, key_offsets=[1, 2, 3, 2**76], k_image=bytearray(range(32)))\n\n    # Serialize\n    writer = x.MemoryReaderWriter()\n    await x.dump_message(writer, msg)\n    print(binascii.hexlify(writer.buffer))\n\n    # Deserialize\n    test_deser = await x.load_message(x.MemoryReaderWriter(writer.buffer), xmr.TxinGen)\n\nDonations\n=========\n\nThanks for your support!\n\n47BEukN83whUdvuXbaWmDDQLYNUpLsvFR2jioQtpP5vD8b3o74b9oFgQ3KFa3ibjbwBsaJEehogjiUCfGtugUGAuJAfbh1Z\n\nAdvanced usage\n==============\n\nArchive interface\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import binascii\n    from monero_serialize import xmrserialize as x\n    from monero_serialize import xmrtypes as xmr\n\n    msg = xmr.TxinGen(height=42)\n\n    # Serialize\n    writer = x.MemoryReaderWriter()\n    ar1 = x.Archive(writer, True)\n    await ar1.message(msg)\n\n    # Deserialize\n    msg2 = xmr.TxinGen()\n    ar2 = x.Archive(x.MemoryReaderWriter(writer.buffer), False)\n    await ar2.message(msg2)\n\nSymmetric Boost archive\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import binascii\n    from monero_serialize import xmrserialize as x\n    from monero_serialize import xmrtypes as xmr\n    from monero_serialize import xmrboost as xmrb\n\n    data_hex = b'011673657269616c697a6174696f6e3a3a61726368697665000000000134'\n    data_bin = base64.b16decode(data_hex, True)\n    reader = x.MemoryReaderWriter(bytearray(data_bin))\n    ar = xmrb.Archive(reader, False)\n\n    msg = xmr.TxinGen()\n    await ar.root_message(msg)\n    self.assertEqual(msg.height, 0x34)\n\nXMR classes\n-----------\n\n.. code:: python\n\n    class Hash(x.BlobType): pass;\n    class ECKey(x.BlobType): pass;\n    class ECPoint(x.BlobType): pass;\n    class SecretKey(ECKey): pass;\n    class ECPublicKey(ECPoint): pass;\n    class KeyImage(ECPoint): pass;\n    class KeyDerivation(ECPoint): pass;\n    class TxoutToScript(x.MessageType): pass;\n    class TxoutToKey(x.MessageType): pass;\n    class TxoutToScriptHash(x.MessageType): pass;\n    class TxoutTargetV(x.VariantType): pass;\n    class TxinGen(x.MessageType): pass;\n    class TxinToKey(x.MessageType): pass;\n    class TxinToScript(x.MessageType): pass;\n    class TxinToScriptHash(x.MessageType): pass;\n    class TxInV(x.VariantType): pass;\n    class TxOut(x.MessageType): pass;\n    class TransactionPrefix(x.MessageType): pass;\n    class TransactionPrefixExtraBlob(TransactionPrefix): pass;\n\n    #\n    # rctTypes.h\n    #\n\n    class Key64(x.ContainerType): pass;\n    class KeyV(x.ContainerType): pass;\n    class KeyM(x.ContainerType): pass;\n    class KeyVFix(x.ContainerType): pass;\n    class KeyMFix(x.ContainerType): pass;\n    class CtKey(x.MessageType): pass;\n    class CtkeyV(x.ContainerType): pass;\n    class CtkeyM(x.ContainerType): pass;\n    class MultisigKLRki(x.MessageType): pass;\n    class MultisigOut(x.MessageType): pass;\n    class EcdhTuple(x.MessageType): pass;\n    class BoroSig(x.MessageType): pass;\n    class MgSig(x.MessageType): pass;\n    class RangeSig(x.MessageType): pass;\n    class Bulletproof(x.MessageType): pass;\n    class EcdhInfo(x.ContainerType): pass;\n    class RctSigBase(x.MessageType): pass;\n    class RctSigPrunable(x.MessageType): pass;\n    class RctSig(RctSigBase): pass;\n    class Signature(x.MessageType): pass;\n    class SignatureArray(x.ContainerType): pass;\n    class Transaction(TransactionPrefix): pass;\n    class BlockHeader(x.MessageType): pass;\n    class HashVector(x.ContainerType): pass;\n    class Block(BlockHeader): pass;\n    class AccountPublicAddress(x.MessageType): pass;\n    class SubaddressIndex(x.MessageType): pass;\n    class MultisigLR(x.MessageType): pass;\n    class MultisigInfo(x.MessageType): pass;\n    class MultisigStruct(x.MessageType): pass;\n    class TxExtraPadding(x.MessageType): pass;\n    class TxExtraPubKey(x.MessageType): pass;\n    class TxExtraNonce(x.MessageType): pass;\n    class TxExtraMergeMiningTag(x.MessageType): pass;\n    class TxExtraAdditionalPubKeys(x.MessageType): pass;\n    class TxExtraMysteriousMinergate(x.MessageType): pass;\n    class TxExtraField(x.VariantType): pass;\n    class TxExtraFields(x.ContainerType): pass;\n    class OutputEntry(x.TupleType): pass;\n    class TxSourceEntry(x.MessageType): pass;\n    class TxDestinationEntry(x.MessageType): pass;\n    class TransferDetails(x.MessageType): pass;\n    class TxConstructionData(x.MessageType): pass;\n    class PendingTransaction(x.MessageType): pass;\n    class PendingTransactionVector(x.ContainerType): pass;\n    class UnsignedTxSet(x.MessageType): pass;\n    class SignedTxSet(x.MessageType): pass;\n    class MultisigTxSet(x.MessageType): pass;\n\n.. |Build Status| image:: https://travis-ci.org/ph4r05/monero-serialize.svg?branch=master\n   :target: https://travis-ci.org/ph4r05/monero-serialize",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ph4r05/monero-serialize",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monero-serialize",
    "package_url": "https://pypi.org/project/monero-serialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-serialize/",
    "project_urls": {
      "Homepage": "https://github.com/ph4r05/monero-serialize"
    },
    "release_url": "https://pypi.org/project/monero-serialize/3.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Monero serialization",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14189057,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a6b40493e714cda68734092329e6450d5d7b28ba0d147f79976e7053a4be2bb",
        "md5": "3f3b2815724d86a33426f5fdf109f643",
        "sha256": "0bf42972a2b13b47c2b2bd42352006caf14117387c1fab09ab2ac0817c0dede5"
      },
      "downloads": -1,
      "filename": "monero-serialize-3.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "3f3b2815724d86a33426f5fdf109f643",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 115158,
      "upload_time": "2019-02-18T01:50:24",
      "upload_time_iso_8601": "2019-02-18T01:50:24.042518Z",
      "url": "https://files.pythonhosted.org/packages/1a/6b/40493e714cda68734092329e6450d5d7b28ba0d147f79976e7053a4be2bb/monero-serialize-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}