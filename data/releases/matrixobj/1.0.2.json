{
  "info": {
    "author": "Warith Adetayo",
    "author_email": "warithadetayo.awa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# matrixObj\n\n A small simple matrix module for basic mathematical matrix operations. Create and make use of _Matrix objects_ in your python codes, perform operations like\n Matrix Addition, Subtration, Multiplication and Scalar Division and other operations like (transpose, co-factor, inverse, minor, determinant, adjoint and elementary operation).\n\n> ## Installation\n```sh\npip install matrixObj\n```\n\n> ## Project Demo\n```\nfrom matrixObj import Matrix\n```\nYou can create a new Matrix instance with any of the *python number objects* (int, float, complex and Fraction) eg.\n```\nmatA = Matrix([5, 3, -1], [3, 5, 9], [0, 5, 2])\n\nmatB = Matrix([3.0, 4.5], [2.6, 5.2])\n\ncmplxMat = Matrix([1+2j, 2+1j], [4-4j, 1-2j])\n\nprint(matA)\nprint(matB)\nprint(cmplxMat)\n```\n```\nOutput:\n| 5      3      -1|\n| 3      5       9|\n| 0      5       2|\n\n|3.0    4.5|\n|2.6    5.2|\n\n|(1+2j) (2+1j)|\n|(4-4j) (1-2j)|\n```\nwith Fraction object, you will have to import it from the fractions module\n```\nfrom fractions import Fraction\n\nfracMat = Matrix([Fraction(1,3), Fraction(2,5)], [Fraction(1,2), Fraction(3,27)])\n\nprint(fracMat)\n```\n```\noutput:\n\n|1/3    2/5|\n|1/2    1/9|\n```\n### Matrix Arithmetic Operations\n```\nA = Matrix([1, -3, 3], [4, 0, 2])\nB = Matrix([4, 6, 0], [3, 0, 5])\nC = Matrix([3, -2], [0, 4], [-1, 5])\nD = Matrix([1, -3, 3], [4, 0, 2])\n\nsumAB = A + B\nproductAC = A * C\n\nprint(sumAB)\nprint(productAC)\nprint(A == D)           # Matrix Equality\n```\n```\nOutput:\n|5      3       3|\n|7      0       7|\n\n| 0      1|\n|10      2|\n\nTrue\n```\n### Square Matrix Operations\n```\nmatrixA = Matrix([1, 0, 4], [5, 2, 1], [1, 1, 1])\n\nprint(matrixA.determinant())    # The determinant of the matrix\n\nprint(matrixA.minor())          # The minor of the matrix\n\nprint(matrixA.cofactor())       # The Cofactor of the matrix\n\nprint(matrixA.inverse(infraction=True)) # Inverse of the matrix returned as a matrix of Fraction object\n```\n```\nOutput:\n13\n\n|  1      4       3|\n| -4     -3       1|\n| -8    -19       2|\n\n| 1     -4       3|\n| 4     -3      -1|\n|-8     19       2|\n\n| 1/13   4/13   -8/13|\n|-4/13  -3/13   19/13|\n| 3/13  -1/13    2/13|\n```\n### Elementary Operations\n```\nmat = Matrix([3, 0, 1], [0, 2, 3], [5, -3, -1])\n\n# Elementary Row operation\nprint(mat.elementary_operation(2, 3))           # Interchange row 2 and 3\n\nprint(mat.elementary_operation(1, scalar=2))    # Multiply row 1 by 2\n\nprint(mat.elementary_operation(1, 3, scalar=2)) # Multiply row 3 by 2, add the result to row 1\n```\n```\nOutput:\n| 3      0       1|\n| 5     -3      -1|\n| 0      2       3|\n\n| 6      0       2|\n| 0      2       3|\n| 5     -3      -1|\n\n|13     -6      -1|\n| 0      2       3|\n| 5     -3      -1|\n```\nFor Elementary column Operation set argument row=False eg.\n```\n# Elementary Column operation\n\nprint(mat.elementary_operation(2, 3, row=False))           # Interchanges column 2 and 3\n```\n```\n| 3      1       0|\n| 0      3       2|\n| 5     -1      -3|\n````\n\n### Modifying the Matrix\nAfter initialization of a Matrix object, you can change, insert new and expand the rows/columns in the matrix eg.\n```\nmat = Matrix([1, 0, 2], [3, 1, 0])\n\nmat.setrow(1, [5, -3, 2])       # Changes row 1 to [5, -3, 2]\nmat.insertrow(2, [3, -3, 1])    # Inserts [3, -3, 1] in the second row\nmat.expandrow([2, 5, 5])        # Appends row [2, 5, 5] to the matrix\nmat.expandcolumn([4, 5, -4, 0]) # Appends column [4, 5, -4, 0]\n\nprint(mat)      # With all the modifications we should now have a 4x4 matrix\n```\n```\nOutput:\n| 5     -3       2       4|\n| 3     -3       1       5|\n| 3      1       0      -4|\n| 2      5       5       0|\n\n```\n###  String Representation\nThe String Representation of the Matrix object (as can be seen from the examples above). All elements (four H_whitespaced from each other and rightly justified) in each row of the matrix are arranged in between two pipe charater \"|\" but guess what? You can change the this representation to any other desired representation with **_setrepr()_** method. eg. If your loyalty is to python (^_^) and you prefer to have your matrix represented as python list...\n```\n# Declear a function that takes exactly one argument and returns a str\n# This argument will be the tuple of the matrix rows\n# which will be supplied by the matrix class when invoking the function\n\ndef newrepr(matrix):\n    return str(list(matrix))\n\nMatrix.setrepr(newrepr)\n\nmat = Matrix([4, 5, -1], [0, 1, 3], [5, 2, 7])\nprint(mat)\n```\n```\nOutput:\n[[4, 5, -1], [0, 1, 3], [5, 2, 7]]\n```\nYou can do str manipulation on the matrix parameter in the body of your defined function and simply return the desired str representantion for your matrix objects. To change back to the defaul representation, use **_resetrepr()_**\n\n### Other Methods of the Matrix class\n- tranpose(): returns the transpose of matrix\n- zero_matrix(): generates a zero matrix\n- ones_matrix(): generates a ones matrix\n- random_matrix(): generates a matrix with random numbers\n- generate_identity_matrix(): generates identity matrix\n\nBoolean Methods\n- issquare()\n- symmetric()\n- skew()\n- invertible()  etc.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SpecialDude/matrixObj",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrixObj",
    "package_url": "https://pypi.org/project/matrixObj/",
    "platform": "",
    "project_url": "https://pypi.org/project/matrixObj/",
    "project_urls": {
      "Homepage": "https://github.com/SpecialDude/matrixObj"
    },
    "release_url": "https://pypi.org/project/matrixObj/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A simple matrix module for basic matrix mathematical operations",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13118417,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ff27c1b8e69bb5af95faeeaecf4a705d6afcc40d18d8c2bba651d557393b4df",
        "md5": "5ca3d9510be1f4bacf340ee3b28c1e6e",
        "sha256": "3a01965031b86eebcc38ed5ebb86fed462a76113c0ff34b3abfb1fe45a1ea82b"
      },
      "downloads": -1,
      "filename": "matrixObj-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ca3d9510be1f4bacf340ee3b28c1e6e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 10495,
      "upload_time": "2021-01-20T14:25:38",
      "upload_time_iso_8601": "2021-01-20T14:25:38.828838Z",
      "url": "https://files.pythonhosted.org/packages/5f/f2/7c1b8e69bb5af95faeeaecf4a705d6afcc40d18d8c2bba651d557393b4df/matrixObj-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "daacd7d76f6f53a6f04f7c810e7acf539b4c0f8a9e5bf93e54b89755bc894bf9",
        "md5": "838c061854a7fb255b3da84e024b662c",
        "sha256": "deaf1b0c3c7da499fb1700ce37c9d7c586e2256306dd27f8c5a4557c22a7a28a"
      },
      "downloads": -1,
      "filename": "matrixObj-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "838c061854a7fb255b3da84e024b662c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 11854,
      "upload_time": "2021-01-20T14:25:40",
      "upload_time_iso_8601": "2021-01-20T14:25:40.669243Z",
      "url": "https://files.pythonhosted.org/packages/da/ac/d7d76f6f53a6f04f7c810e7acf539b4c0f8a9e5bf93e54b89755bc894bf9/matrixObj-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}