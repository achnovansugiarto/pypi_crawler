{
  "info": {
    "author": "Warith Adetayo",
    "author_email": "warithadetayo.awa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# **matrixObj**\n\n A small simple matrix module for basic mathematical matrix operations. Create and make us of _Matrix objects_ in your python codes, perform operations like\n Matrix Addition, Subtration, Multiplication and Scalar Division and other operations like (transpose, co-factor, inverse, minor, determinant, adjoint and elementary operation).\n\n> ## Installation\n\n```sh\npip install matrixObj\n```\n\n> ## Project Demo\n\n```py\nfrom matrixObj import Matrix\n```\n\nYou can create a new Matrix instance with any of the *python number objects* (int, float, complex and Fraction) eg.\n\n```py\nmatA = Matrix([5, 3, -1], [3, 5, 9], [0, 5, 2])\n\nmatB = Matrix([3.0, 4.5], [2.6, 5.2])\n\ncmplxMat = Matrix([1+2j, 2+1j], [4-4j, 1-2j], [3+0j, 1j])\n\nprint(matA,  end=\"   \")\nprint(matA.dimension() + \" Matrix\")     # dimension() returns the string depicting the matrix's shape.\n\nprint(matB, end=\"   \")\nprint(matB.dimension() + \" Matrix\")\n\nprint(cmplxMat, end=\"   \")\nprint(cmplxMat.dimension() + \" Matrix\")\n```\n\n```bat\nOutput:\n\n| 5     3    -1|\n| 3     5     9|\n| 0     5     2|   3x3 Matrix\n\n|3.0    4.5|\n|2.6    5.2|   2x2 Matrix\n\n|(1+2j)    (2+1j)|\n|(4-4j)    (1-2j)|\n|(3+0j)        1j|   3x2 Matrix\n```\n\nwith Fraction object, you will have to import it from the fractions module\n\n```py\nfrom fractions import Fraction\n\nfracMat = Matrix([Fraction(1,3), Fraction(2,5)], [Fraction(1,2), Fraction(3,27)])\n\nprint(fracMat)\n```\n\n```bat\noutput:\n\n|1/3    2/5|\n|1/2    1/9|\n```\n\n### **Matrix Arithmetic Operations**\n\n```py\nA = Matrix([1, -3, 3], [4, 0, 2])\nB = Matrix([4, 6, 0], [3, 0, 5])\nC = Matrix([3, -2], [0, 4], [-1, 5])\nD = Matrix([1, -3, 3], [4, 0, 2])\nE = Matrix([3, 1, 0], [9, -1, 2], [0, 1, 3])\n\n\n# Addition and Subtraction\nsumAB = A + B           # Sum of matrices\ndifAB = A - B           # Difference of matrices\n\n\n# Product\nproductAC = A * C       # Product of matrices\n\n# Scalar Division\na = A / 2               # Same operation as (A * 0.5)\n\nprint(sumAB, \"A + B\")\nprint(difAB, \"A - B\")\nprint(productAC, \"A * C\")\nprint(a, \"A \\u00F7 2\")\nprint(\"\\nA == D:\", A == D)           # Matrix Equality\n\n```\n\n```bat\nOutput:\n\n|5    3    3|\n|7    0    7| --> A + B\n\n|-3    -9     3|\n| 1     0    -3| --> A - B\n\n| 0     1|\n|10     2| --> A * C\n\n| 0.5    -1.5     1.5|\n| 2.0     0.0     1.0| --> A ÷ 2\n\nA == D: True\n```\n\n### **Square Matrix Operations**\n\n```py\nmatrixA = Matrix([4, 8, 2], [0, 5, 2], [4, 8, 1])\n\nprint(matrixA.determinant())    # The determinant of the matrix\n\nprint(matrixA.minor())          # The minor of the matrix\n\nprint(matrixA.cofactor())       # The Cofactor of the matrix\n\nprint(matrixA.inverse())        # Inverse of the matrix\n```\n\n```bat\nOutput:\n\n-20\n\n|-11     -8    -20|\n| -8     -4      0|\n|  6      8     20|\n\n|-11      8    -20|\n|  8     -4      0|\n|  6     -8     20|\n\n|0.55    -0.4    -0.3|\n|-0.4     0.2     0.4|\n| 1.0    -0.0    -1.0|\n```\n\nTo return the inverse of the matrix in fraction, set the argument **_infraction=True_**\n\n```py\nprint(matrixA.inverse(infraction=True))\n```\n\n```bat\nOutput:\n\n|11/20     -2/5    -3/10|\n| -2/5      1/5      2/5|\n|    1        0       -1|\n```\n\n### More Square matrix arithmetic operations\n\n```py\nA = Matrix([4, 8, 2], [0, 5, 2], [4, 8, 1])\nB = Matrix([3, 7, 0], [2, 9, 7], [-1, -3, 0])\n\n# Power of a Square Matrix\nprint( A ** 3 )                 # A³  = A * A * A\nprint( A ** -1)                 # A⁻¹ = A.inverse(infraction=True)\nprint( A ** -2)                 # A⁻² = A.inverse(infraction=True) ** 2\n\n# Division of Square \nprint(2 / A)                    # 2 * A.inverse(infraction)\nprint( A / B)                   # A * B\nprint(A / A)                    # Identity Matrix\n```\n\n```bat\nOutput:\n\n|200    840    250|\n| 80    365    110|\n|180    760    225|\n\n|11/20     -2/5    -3/10|\n| -2/5      1/5      2/5|\n|    1        0       -1|\n\n|13/80    -3/10    -1/40|\n| 1/10      1/5     -1/5|\n|-9/20     -2/5     7/10|\n\n|11/10     -4/5     -3/5|\n| -4/5      2/5      4/5|\n|    2        0       -2|\n\n|  17/7       2/7      27/7|\n|-29/14       2/7    -79/14|\n| 31/14       1/7     41/14|\n\n|1    0    0|\n|0    1    0|\n|0    0    1|\n```\n\n### **Elementary Operations**\n\n```py\nmat = Matrix([3, 0, 1], [0, 2, 3], [5, -3, -1])\n\n# Elementary Row operation\nprint(mat.elementary_operation(2, 3))           # Interchange row 2 and 3\n\nprint(mat.elementary_operation(1, scalar=2))    # Multiply row 1 by 2\n\nprint(mat.elementary_operation(1, 3, scalar=2)) # Multiply row 3 by 2, add the result to row 1\n```\n\n```bat\nOutput:\n\n| 3      0       1|\n| 5     -3      -1|\n| 0      2       3|\n\n| 6      0       2|\n| 0      2       3|\n| 5     -3      -1|\n\n|13     -6      -1|\n| 0      2       3|\n| 5     -3      -1|\n```\n\nFor Elementary column Operation set argument row=False eg.\n\n```py\n# Elementary Column operation\n\nprint(mat.elementary_operation(2, 3, row=False))           # Interchanges column 2 and 3\n```\n\n```bat\nOutput:\n\n| 3      1       0|\n| 0      3       2|\n| 5     -1      -3|\n```\n\n### Row Reducing to Echelon Form\n\nTo row reduce matrix to echelon form by means of elementary operations, call the method **_rref()_** on the matrix eg.\n\n```py\n# Reducing Matrix to echelon form\n\na = Matrix([1, 0, -2], [2, -1, 3], [4, 1, 8])\nreduced_a = a.rref()\n\nprint(\"Matrix a\")\nprint(a)\nprint(\"\\nReduced matrix a\")\nprint(reduced_a)\n\nb = Matrix([0, 1, 3], [4, 2, -8], (2, 3, 2))\nreduced_b = b.rref()\n\nprint(\"\\n\\nMatrix b\")\nprint(b)\nprint(\"\\nReduced matrix b\")\nprint(reduced_b)\n\nprint(\"\\nThe Rank of matrix a is:\", a.rank())\nprint(\"The Rank of matrix b is:\", b.rank())\n```\n\n```bat\nOutput:\n\nMatrix a\n\n| 1     0    -2|\n| 2    -1     3|\n| 4     1     8|\n\nReduced matrix a\n\n|1.0    0.0    0.0|\n|0.0    1.0    0.0|\n|0.0    0.0    1.0|\n\n\nMatrix b\n\n| 0     1     3|\n| 4     2    -8|\n| 2     3     2|\n\nReduced matrix b\n\n| 1.0     0.0    -3.5|\n|   0       1       3|\n| 0.0     0.0     0.0|\n\nThe Rank of matrix a is: 3\nThe Rank of matrix b is: 2\n```\n\nBy default, the _**rref()**_ method returns the reduced matrix in floating numbers, to perform the reduction operation in fraction set the argument **infraction** to **True**\n\n```py\nprint(b.rref(infraction=True))\n```\n\n```bat\nOutput:\n\n|   1       0    -7/2|\n|   0       1       3|\n|   0       0       0|\n```\n\n### **Modifying the Matrix**\n\nAfter initialization of a Matrix object, you can change, insert new and expand the rows/columns in the matrix eg.\n\n```py\nmat = Matrix([1, 0, 2], [3, 1, 0])\n\nmat.setrow(1, [5, -3, 2])       # Changes row 1 to [5, -3, 2]\nmat.insertrow(2, [3, -3, 1])    # Inserts [3, -3, 1] in the second row\nmat.expandrow([2, 5, 5])        # Appends row [2, 5, 5] to the matrix\nmat.expandcolumn([4, 5, -4, 0]) # Appends column [4, 5, -4, 0]\n\nprint(mat)      # With all the modifications we should now have a 4x4 matrix\n```\n\n```bat\nOutput:\n| 5     -3       2       4|\n| 3     -3       1       5|\n| 3      1       0      -4|\n| 2      5       5       0|\n\n```\n\n#### **Modifying by Slicing**\n\nGet, set or delete part/slice of the matrix. eg.\n\n```py\n# Getting part/slice of the matrix\nmatA = Matrix([2, 5, -4], [4, 5, 9], [-1, -8, 0], [7, 0, 5])\n\nprint(matA[1, 0])           # Gets first element in the second row \n\nprint(matA[2])              # Gets the third row of the matrix\n\nprint(matA[:, -1])          # Gets the last column of the matrix \n\nprint(matA[0:3])            # Gets the first, the second and the third row\n\nprint(matA[::-1, ::-1]) # Gets the reverse of the matrix rows with each row also reversed\n\n```\n\n```bat\nOutput:\n4\n\n|-1    -8     0|\n\n|-4     9     0     5|\n\n| 2     5    -4|\n| 4     5     9|\n|-1    -8     0|\n\n| 5     0     7|\n| 0    -8    -1|\n| 9     5     4|\n|-4     5     2|\n```\n\n```py\n# Setting part/slice of the matrix\nmatA[1] = [-20, 40, 10]     # sets the second row\nprint(matA)\n\nmatA[:, 0] = [1, 2, 3, 4]   # sets the first column\nprint(matA)\n```\n\n```bat\nOutput:\n\n|  2      5     -4|\n|-20     40     10|\n| -1     -8      0|\n|  7      0      5|\n\n|  1      5     -4|\n|  2     40     10|\n|  3     -8      0|\n|  4      0      5|\n```\n\nAll elements in a slice can be set to the same scalar value eg.\n\n```py\nmatA[-1] = 4        # Sets all the elements in the last row to 4\nprint(matA)\n\nfrom fractions import Fraction\nmatA[:] = Fraction(1, 3)    # Sets all elements in the matrix to 1/3\nprint(matA)\n```\n\n```bat\nOutput:\n| 2     5    -4|\n| 4     5     9|\n|-1    -8     0|\n| 4     4     4|\n\n|1/3    1/3    1/3|\n|1/3    1/3    1/3|\n|1/3    1/3    1/3|\n|1/3    1/3    1/3|\n```\n\nUsing the __*del()*__ function to delete some part of the matrix, this can only delete complete row(s) or column...\n\n```py\nmatA = Matrix([2, 5, -4], [4, 5, 9], [-1, -8, 0], [7, 0, 5])\n```\n\n```py\ndel(matA[1])            # Deletes the second row\nprint(matA)\n```\n\n```bat\nOutput:\n\n| 2     5    -4|\n|-1    -8     0|\n| 7     0     5|\n```\n\n```py\ndel(matA[:, 0])         # Deletes the first column\nprint(matA)\n```\n\n```bat\nOutput:\n\n| 5    -4|\n| 5     9|\n|-8     0|\n| 0     5|\n```\n\n```py\ndel(matA[1:-1]) # Deletes the second row up to the last row\nprint(matA)\n```\n\n```bat\nOutput:\n\n| 2     5    -4|\n| 7     0     5|\n```\n\n**_NOTE_**: Using the methods (_**insertrow()**_, _**insertcolumn()**_, _**expandrow()**_, _**removerow()**_ etc.) to modify matrix take indexes from 1 instead of slicing which takes indexes from 0\n\n### **String Representation**\n\nThe String Representation of the Matrix object (as can be seen from the examples above). All elements (four H_whitespaced from each other and rightly justified) in each row of the matrix are arranged in between two pipe charater \"|\" but guess what? You can change the this representation to any other desired representation with **_setrepr()_** method. eg. If you prefer to have your matrix represented as python list...\n\n```py\n# Declear a function that takes exactly one argument and returns a str\n# This argument will be the tuple of the matrix rows\n# which will be supplied by the matrix class when invoking the function\n\ndef newrepr(matrix):\n    return str(list(matrix))\n\nMatrix.setrepr(newrepr)\n\nmat = Matrix([4, 5, -1], [0, 1, 3], [5, 2, 7])\nprint(mat)\n```\n\n```bat\nOutput:\n[[4, 5, -1], [0, 1, 3], [5, 2, 7]]\n```\n\nYou can do str manipulation on the matrix parameter in the body of your defined function and simply return the desired str representantion for your matrix objects. To change back to the defaul representation, use **_resetrepr()_**\n\n> ## **Augmented Matrix**\n\nA subclass of the Matrix class. Append the columns of two matrix to form an augmented matrix and perform the same elementary operations on both matrices augmented together.\nThe constructor takes two arguments (matrix A and matrix B) which can be matrix objects or a list of matrix rows of both matrices\n\n```py\n>>> matA = Matrix([3, 5, 9], [1, -2, 0], [2, 3, 1])\n>>> b = [4, -5, 7]\n>>> augmentAB = AugMatrix(matA, augcolumn=b)\n>>> augmentAB\nAMatrix(\n| 3     5     9 |  4 |\n| 1    -2     0 | -5 |\n| 2     3     1 |  7 |)\n>>> \n\n# Augmented Matrix from two matrices\n\n>>> matA = Matrix([5, 7, 0], [1, -1, 2], [3, 0, 1])\n>>> matB = Matrix([1, 0, 9], [4, 2, 1], [2, 1, 0])\n>>>\n>>> augAB = AugMatrix(matA, matB)\n>>> augAB\nAMatrix(\n| 5     7     0 |  1     0     9 |\n| 1    -1     2 |  4     2     1 |\n| 3     0     1 |  2     1     0 |)\n>>> \n\n# If a second matrix is not supplied, the first matrix is augmented with it's last column as the augmented part\n\n>>> c = Matrix([-2, 3, 1, 5], [3, 0, 9, 2], [1, 2, 9, 0])\n>>> augC = AugMatrix(c)\n>>> augC\nAMatrix(\n|-2     3     1 |  5 |\n| 3     0     9 |  2 |\n| 1     2     9 |  0 |)\n>>> \n\n#If a second integer argument is suppied, the first matrix is augmented by indexing from the integer argument\n\n>>> d = Matrix([4, 5, 0, 1, -1], [-2, 2, 1, 3, -1], [3, 7, 0, -5, 2])\n>>> augD = AugMatrix(d, 3)\nAMatrix(\n| 4     5     0 |  1    -1 |\n|-2     2     1 |  3    -1 |\n| 3     7     0 | -5     2 |)\n>>>\n```\n\n### **Solving System of linear Equation**\n\nSuppose there's a system of linear equations which may be consistent with unique solution or many solutions or inconsistent with no solution. e.g.\n\n```tex\nConsistent Equations with Unique Solution\n        1                       2\n2x + y  -  z = 1         a + 2b +  c = 2\n   + 2y +  z = 2        3a +  b - 2c = 1\n5x + 2y - 3z = 3        4a - 3b -  c = 3\n```\n\n```py\n#                       1\n\n# 2x + y  -  z = 1\n#    + 2y +  z = 2\n# 5x + 2y - 3z = 3 \n\n# to matrix\ncoeficients = Matrix(   [2, 1, -1],\n                        [0, 2, 1],\n                        [5, 2, -3]  )\n\nconstants = Matrix( [1],\n                    [2],\n                    [3] )\n\naugEquation = AugMatrix( coeficients, constants )\nreducedEquation = augEquation.rref(infraction=True)\nsolution = reducedEquation.augcolumn\nprint(augEquation)\nprint(reducedEquation)\nprint(solution)\n\nprint(f\"\\nx = {solution[0, 0]}\")\nprint(f\"y = {solution[1, 0]}\")\nprint(f\"z = {solution[2, 0]}\")\n\n```\n\n```bat\nOutput:\n\n| 2     1    -1 |  1 |\n| 0     2     1 |  2 |\n| 5     2    -3 |  3 |\n\n| 1     0     0 | -3 |\n| 0     1     0 |  3 |\n| 0     0     1 | -4 |\n\n|-3|\n| 3|\n|-4|\n\nx = -3\ny = 3\nz = -4\n```\n\n```py\n#                       2\n#  a + 2b +  c = 2\n# 3a +  b - 2c = 1\n# 4a - 3b -  c = 3\n\ncoeficients = Matrix(   [1, 2, 1],\n                        [3, 1, -2],\n                        [4, -3, -1] )\nconstants = Matrix( [2],\n                    [1],\n                    [3] )\n\nequations = AugMatrix( coeficients, constants )\nreducedEquation = equations.rref(infraction=True)\nsolution = reducedEquation.augcolumn\n\nprint(equations)\nprint(solution)\n\nprint(f\"\\na = {solution[0, 0]}, b = {solution[1, 0]}, c = {solution[2, 0]}\")\n```\n\n```bat\nOutput:\n\n| 1     2     1 |  2 |\n| 3     1    -2 |  1 |\n| 4    -3    -1 |  3 |\n\n|1|\n|0|\n|1|\n\na = 1, b = 0, c = 1\n\n```\n\nThis type of equation can also be solved algebraically or using Cramer's Rule\n\n```tex\n                       2\n  a + 2b +  c = 2\n 3a +  b - 2c = 1\n 4a - 3b -  c = 3\n\nIn Matrix\n\n[1    2    1]           [a]             [2]\n[3    1   -2]     x     [b]     =       [1]\n[4   -1   -1]           [c]             [3]\n\n      A           x      B      =        C\n\nAlgebraically:\n\nA x B = C   -->   B = C / A     -->    B = A⁻¹ x C\n\nUsing Cramer's Rule (Bᵢ = |Aᵢ| ÷ |A|)\n\na = |A₁| ÷ |A|\nb = |A₂| ÷ |A|\nc = |A₃| ÷ |A|\n```\n\n```py\n# Algebraically\n\nA = Matrix([1, 2, 1], [3, 1, -2], [4, -1, -1])\nC = Matrix([2], [1], [3])\n\nB = (A ** -1) * C\nprint(B)\n\nprint(f\"\\nB = {[int(i) for i in B.getcolumn(1)]}\")\n\n# By Cramer's Rule\nprint(\"\\nUsing Cramer's Rule\")\ndet = A.determinant()           # Determinant of Matrix A\n\n# Value of a\nAcopy = A.copy()                # Making a copy of Matrix A\nAcopy[:, 0] = C                 # Modifying Matrix, seting column 1 of A to C\na = Acopy.determinant() / det\nprint(f\"a = {a}\")\n\n# Value of b\nAcopy = A.copy()                # Making a copy of Matrix A\nAcopy[:, 1] = C                 # Modifying Matrix, seting column 1 of A to C\nb = Acopy.determinant() / det\nprint(f\"b = {b}\")\n\n# Value of c\nAcopy = A.copy()                # Making a copy of Matrix A\nAcopy[:, 2] = C                 # Modifying Matrix, seting column 1 of A to C\nc = Acopy.determinant() / det\nprint(f\"c = {c}\")\n```\n\n```bat\nOutput: \n\n|1|\n|0|\n|1|\n\nB = [1, 0, 1]\n\nUsing Cramer's Rule\na = 1.0\nb = -0.0\nc = 1.0\n```\n\n### **Other Methods of the Matrix class**\n\n- tranpose(): returns the transpose of matrix\n- nonzeros(): returns the number non-zero rows/columns in matrix\n- sum(): returns the sum of all elements in matrix\n- identity(): generates identity matrix\n- zero_matrix(): generates a zero matrix\n- ones_matrix(): generates a ones matrix\n- random_matrix(): generates a matrix with random numbers\n\nBoolean Methods\n\n- issquare()\n- symmetric()\n- skew()\n- invertible()\n- isorthogonal()\n- isnormal()\n- isrowmatrix()\n- iscolumnmatrix()\n- issingletonmatrix()\n- isnull()\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SpecialDude/matrixObj",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrixObj",
    "package_url": "https://pypi.org/project/matrixObj/",
    "platform": "",
    "project_url": "https://pypi.org/project/matrixObj/",
    "project_urls": {
      "Homepage": "https://github.com/SpecialDude/matrixObj"
    },
    "release_url": "https://pypi.org/project/matrixObj/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A simple matrix module for basic matrix mathematical operations",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13118417,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5bcc000a96db0312b3eb6ef06bbb55e29823f6693d0fc08b632b23f8f4b6a2d",
        "md5": "6331d46696ed9ec60991470a6984f6dd",
        "sha256": "5aebf4fc758d95e2890cab5c4f235620310bec2895846c738ab0c993dcd95b2a"
      },
      "downloads": -1,
      "filename": "matrixObj-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6331d46696ed9ec60991470a6984f6dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 18255,
      "upload_time": "2021-08-03T22:53:48",
      "upload_time_iso_8601": "2021-08-03T22:53:48.689285Z",
      "url": "https://files.pythonhosted.org/packages/d5/bc/c000a96db0312b3eb6ef06bbb55e29823f6693d0fc08b632b23f8f4b6a2d/matrixObj-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c3cb0a1d04114cd5d1c612595dfecbb10384cbcfc29b6fde0298ff1e5a61bfc",
        "md5": "8adbb3feb6a65bab660b280e666e1645",
        "sha256": "a16671628706b954ec337ead172b0f68c18d1251b021610667ecb022a7015c1f"
      },
      "downloads": -1,
      "filename": "matrixObj-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8adbb3feb6a65bab660b280e666e1645",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 25328,
      "upload_time": "2021-08-03T22:53:51",
      "upload_time_iso_8601": "2021-08-03T22:53:51.706144Z",
      "url": "https://files.pythonhosted.org/packages/0c/3c/b0a1d04114cd5d1c612595dfecbb10384cbcfc29b6fde0298ff1e5a61bfc/matrixObj-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}