{
  "info": {
    "author": "Nicolas Vanhoren",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: System :: Systems Administration"
    ],
    "description": "# docker-compose-wait\n\n[![Build Status](https://travis-ci.org/nicolas-van/docker-compose-wait.svg?branch=master)](https://travis-ci.org/nicolas-van/docker-compose-wait)\n[![PyPI](https://img.shields.io/pypi/v/docker-compose-wait.svg)](https://pypi.org/project/docker-compose-wait/)\n\n\nSome useful script to wait until all services declared in a docker-compose file are up and running.\n\nThis script uses the health check mechanism provided since Docker 1.12. If your services have a configured health check, after making a `docker-compose up -d` you can simply call this script to have it wait until all your services health statuses are fixed. If they are all `healthy` it will return `0` if any of them is `unhealthy` (or `Down`) it will return -1.\n\nThis script can be useful, as example, in Continuous Integration or other situations when you just want to wait until a stack is deployed before performing other actions.\n\n*Please note this script does not do anything about dependencies startup order. See the [official documentation](https://docs.docker.com/compose/startup-order/) for that problem.*\n\n## Installation\n\n```\npip install docker-compose-wait\n```\n\nThis utility requires Python 2.7 or Python >= 3.3. It also supports `docker-compose` from version 1.10.\n\n## Usage\n\n```\nusage: docker-compose-wait.py [options]\n\nWait until all services in a docker-compose file are healthy. Options are\nforwarded to docker-compose.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FILE, --file FILE  Specify an alternate compose file (default: docker-\n                        compose.yml)\n  -p PROJECT_NAME, --project-name PROJECT_NAME\n                        Specify an alternate project name (default: directory\n                        name)\n  -w, --wait            Wait for all the processes to stabilize before exit\n                        (default behavior is to exit as soon as any of the\n                        processes is unhealthy)\n  -t TIMEOUT, --timeout TIMEOUT\n                        Max amount of time during which this command will run\n                        (expressed using the same format than in docker-\n                        compose.yml files, example: 5s, 10m,... ). If there is\n                        a timeout this command will exit returning 1.\n                        (default: wait for an infinite amount of time)\n```\n\nBasically it can be as simple as:\n\n```\ndocker-compose-wait\n```\n\n`docker-compose-wait` behaves like a `docker-compose` sub-command. It will forward the usual `docker-compose` command-line arguments. The above command will work fine if you previously ran `docker-compose up -d` by referencing the standard `docker-compose.yml` file. If you are using other files for your `docker-compose` configuration just use:\n\n```\ndocker-compose-wait -f <path_to_yaml_file> -f <path_to_other_yaml_file> ...\n```\n\n## License\n\n[See the license file](https://github.com/nicolas-van/docker-compose-wait/blob/master/LICENSE.md).\n\n## Contribution\n\n[See the contribution guide](https://github.com/nicolas-van/docker-compose-wait/blob/master/CONTRIBUTING.md).",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicolas-van/docker-compose-wait",
    "keywords": "docker container util",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docker-compose-wait",
    "package_url": "https://pypi.org/project/docker-compose-wait/",
    "platform": "",
    "project_url": "https://pypi.org/project/docker-compose-wait/",
    "project_urls": {
      "Bug Reports": "https://github.com/nicolas-van/docker-compose-wait/issues",
      "Homepage": "https://github.com/nicolas-van/docker-compose-wait",
      "Source": "https://github.com/nicolas-van/docker-compose-wait"
    },
    "release_url": "https://pypi.org/project/docker-compose-wait/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*",
    "summary": "Some useful command line utility to wait until all services declared in a docker-compose file are up and running.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7958370,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1259d78c61e9ca46e1680f9c160aaaaba646cbeeb549394aad0664df562a6c5",
        "md5": "18df954f90ea58fc3c79e89012474923",
        "sha256": "77a0a4aa529e55dc66e72dc6c41581a8a29a8a4616c8de6455a3d8ea4d4c4552"
      },
      "downloads": -1,
      "filename": "docker-compose-wait-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "18df954f90ea58fc3c79e89012474923",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*",
      "size": 8054,
      "upload_time": "2019-12-02T08:29:23",
      "upload_time_iso_8601": "2019-12-02T08:29:23.518615Z",
      "url": "https://files.pythonhosted.org/packages/d1/25/9d78c61e9ca46e1680f9c160aaaaba646cbeeb549394aad0664df562a6c5/docker-compose-wait-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}