{
  "info": {
    "author": "Heng Li",
    "author_email": "lh3@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "==============================\nMappy: Minimap2 Python Binding\n==============================\n\nMappy provides a convenient interface to `minimap2\n<https://github.com/lh3/minimap2>`_, a fast and accurate C program to align\ngenomic and transcribe nucleotide sequences.\n\nInstallation\n------------\n\nMappy depends on `zlib <http://zlib.net>`_. It can be installed with `pip\n<https://en.wikipedia.org/wiki/Pip_(package_manager)>`_:\n\n.. code:: shell\n\n\tpip install --user mappy\n\nor from the minimap2 github repo (`Cython <http://cython.org>`_ required):\n\n.. code:: shell\n\n\tgit clone https://github.com/lh3/minimap2\n\tcd minimap2\n\tpython setup.py install\n\nUsage\n-----\n\nThe following Python script demonstrates the key functionality of mappy:\n\n.. code:: python\n\n\timport mappy as mp\n\ta = mp.Aligner(\"test/MT-human.fa\")  # load or build index\n\tif not a: raise Exception(\"ERROR: failed to load/build index\")\n\ts = a.seq(\"MT_human\", 100, 200)     # retrieve a subsequence from the index\n\tprint(mp.revcomp(s))                # reverse complement\n\tfor name, seq, qual in mp.fastx_read(\"test/MT-orang.fa\"): # read a fasta/q sequence\n\t\tfor hit in a.map(seq): # traverse alignments\n\t\t\tprint(\"{}\\t{}\\t{}\\t{}\".format(hit.ctg, hit.r_st, hit.r_en, hit.cigar_str))\n\nAPIs\n----\n\nMappy implements two classes and two global function.\n\nClass mappy.Aligner\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\tmappy.Aligner(fn_idx_in=None, preset=None, ...)\n\nThis constructor accepts the following arguments:\n\n* **fn_idx_in**: index or sequence file name. Minimap2 automatically tests the\n  file type. If a sequence file is provided, minimap2 builds an index. The\n  sequence file can be optionally gzip'd. This option has no effect if **seq**\n  is set.\n\n* **seq**: a single sequence to index. The sequence name will be set to\n  :code:`N/A`.\n\n* **preset**: minimap2 preset. Currently, minimap2 supports the following\n  presets: **sr** for single-end short reads; **map-pb** for PacBio\n  read-to-reference mapping; **map-ont** for Oxford Nanopore read mapping;\n  **splice** for long-read spliced alignment; **asm5** for assembly-to-assembly\n  alignment; **asm10** for full genome alignment of closely related species. Note\n  that the Python module does not support all-vs-all read overlapping.\n\n* **k**: k-mer length, no larger than 28\n\n* **w**: minimizer window size, no larger than 255\n\n* **min_cnt**: mininum number of minimizers on a chain\n\n* **min_chain_score**: minimum chaing score\n\n* **bw**: chaining and alignment band width\n\n* **best_n**: max number of alignments to return\n\n* **n_threads**: number of indexing threads; 3 by default\n\n* **extra_flags**: additional flags defined in minimap.h\n\n* **fn_idx_out**: name of file to which the index is written. This parameter\n  has no effect if **seq** is set.\n\n* **scoring**: scoring system. It is a tuple/list consisting of 4, 6 or 7\n  positive integers. The first 4 elements specify match scoring, mismatch\n  penalty, gap open and gap extension penalty. The 5th and 6th elements, if\n  present, set long-gap open and long-gap extension penalty. The 7th sets a\n  mismatch penalty involving ambiguous bases.\n\n.. code:: python\n\n\tmappy.Aligner.map(seq, seq2=None, cs=False, MD=False)\n\nThis method aligns :code:`seq` against the index. It is a generator, *yielding*\na series of :code:`mappy.Alignment` objects. If :code:`seq2` is present, mappy\nperforms paired-end alignment, assuming the two ends are in the FR orientation.\nAlignments of the two ends can be distinguished by the :code:`read_num` field\n(see Class mappy.Alignment below). Argument :code:`cs` asks mappy to generate\nthe :code:`cs` tag; :code:`MD` is similar. These two arguments might slightly\ndegrade performance and are not enabled by default.\n\n.. code:: python\n\n\tmappy.Aligner.seq(name, start=0, end=0x7fffffff)\n\nThis method retrieves a (sub)sequence from the index and returns it as a Python\nstring. :code:`None` is returned if :code:`name` is not present in the index or\nthe start/end coordinates are invalid.\n\n.. code:: python\n\n\tmappy.Aligner.seq_names\n\nThis property gives the array of sequence names in the index.\n\nClass mappy.Alignment\n~~~~~~~~~~~~~~~~~~~~~\n\nThis class describes an alignment. An object of this class has the following\nproperties:\n\n* **ctg**: name of the reference sequence the query is mapped to\n\n* **ctg_len**: total length of the reference sequence\n\n* **r_st** and **r_en**: start and end positions on the reference\n\n* **q_st** and **q_en**: start and end positions on the query\n\n* **strand**: +1 if on the forward strand; -1 if on the reverse strand\n\n* **mapq**: mapping quality\n\n* **blen**: length of the alignment, including both alignment matches and gaps\n  but excluding ambiguous bases.\n\n* **mlen**: length of the matching bases in the alignment, excluding ambiguous\n  base matches.\n\n* **NM**: number of mismatches, gaps and ambiguous positions in the alignment\n\n* **trans_strand**: transcript strand. +1 if on the forward strand; -1 if on the\n  reverse strand; 0 if unknown\n\n* **is_primary**: if the alignment is primary (typically the best and the first\n  to generate)\n\n* **read_num**: read number that the alignment corresponds to; 1 for the first\n  read and 2 for the second read\n\n* **cigar_str**: CIGAR string\n\n* **cigar**: CIGAR returned as an array of shape :code:`(n_cigar,2)`. The two\n  numbers give the length and the operator of each CIGAR operation.\n\n* **MD**: the :code:`MD` tag as in the SAM format. It is an empty string unless\n  the :code:`MD` argument is applied when calling :code:`mappy.Aligner.map()`.\n\n* **cs**: the :code:`cs` tag.\n\nAn :code:`Alignment` object can be converted to a string with :code:`str()` in\nthe following format:\n\n::\n\n\tq_st  q_en  strand  ctg  ctg_len  r_st  r_en  mlen  blen  mapq  cg:Z:cigar_str\n\nIt is effectively the PAF format without the QueryName and QueryLength columns\n(the first two columns in PAF).\n\nMiscellaneous Functions\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\tmappy.fastx_read(fn, read_comment=False)\n\nThis generator function opens a FASTA/FASTQ file and *yields* a\n:code:`(name,seq,qual)` tuple for each sequence entry. The input file may be\noptionally gzip'd. If :code:`read_comment` is True, this generator yields\na :code:`(name,seq,qual,comment)` tuple instead.\n\n.. code:: python\n\n\tmappy.revcomp(seq)\n\nReturn the reverse complement of DNA string :code:`seq`. This function\nrecognizes IUB code and preserves the letter cases. Uracil :code:`U` is\ncomplemented to :code:`A`.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lh3/minimap2",
    "keywords": "sequence-alignment",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mappy",
    "package_url": "https://pypi.org/project/mappy/",
    "platform": "",
    "project_url": "https://pypi.org/project/mappy/",
    "project_urls": {
      "Homepage": "https://github.com/lh3/minimap2"
    },
    "release_url": "https://pypi.org/project/mappy/2.22/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Minimap2 python binding",
    "version": "2.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12409915,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edeb078add0802c921b686b33ee7b3c5334c4b7ec1a92ead8230a1484cee4f0c",
        "md5": "38cdfff197108a6fa1d32d658a0caedb",
        "sha256": "219c93ab7f8d5d7c26face512a9e738a7306f3376ebfa3017eac70676ba97840"
      },
      "downloads": -1,
      "filename": "mappy-2.22.tar.gz",
      "has_sig": false,
      "md5_digest": "38cdfff197108a6fa1d32d658a0caedb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 139632,
      "upload_time": "2021-08-07T23:35:59",
      "upload_time_iso_8601": "2021-08-07T23:35:59.356095Z",
      "url": "https://files.pythonhosted.org/packages/ed/eb/078add0802c921b686b33ee7b3c5334c4b7ec1a92ead8230a1484cee4f0c/mappy-2.22.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}