{
  "info": {
    "author": "Thomas Marques",
    "author_email": "marquesthom@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "# django-settings-custom\nA Django interactive command for configuration file generation.\n\n## Getting It\n\n```\npip install django-settings-custom\n```\n\n## Installing It\n\nTo enable `django_settings_custom` in your project you need to add it to `INSTALLED_APPS` in your projects\n`settings.py` file:\n```\nINSTALLED_APPS = (\n    ...\n    'django_settings_custom',\n    ...\n)\n```\n\n## Using It\n\nCreate a template for your target conf.ini like\n```ini\n[DATABASE]\nNAME = { USER_VALUE }\nHOST = { USER_VALUE }\nPORT = { USER_VALUE }\n\n[DATABASE_CREDENTIALS]\nUSER = { USER_VALUE }\nPASSWORD = { ENCRYPTED_USER_VALUE }\n\n[DJANGO]\nKEY = { DJANGO_SECRET_KEY }\n\n# A constant field\n[LDAP]\nLDAPGRP = 'ldaps://myldap'\n```\n\nAdd `settings.py` file\n```python\nSETTINGS_TEMPLATE_FILE = 'PATH_TO_YOUR_TEMPLATE_CONFIGURATION_FILE'\nSETTINGS_FILE_PATH = 'TARGET_FOR_CONFIGURATION_FILE'\n```\n\nLaunch in command line\n```\npython manage.py generate_settings\n```\n\n## Results\n![](results.gif)\n\nThe command ask user to fill missing values from template:\n```\n[user@localhost a_project]$ ./manage.py generate_conf\n** Configuration file generation: **\n\n** Configuration file generation: **\nDo you want to generate the secret key for Django ? (Y/n) : y\nDjango secret key generated\n\n** Enter values for configuration file content **\n\nValue for [DATABASE] NAME: database_name\nValue for [DATABASE] HOST: database_host\nValue for [DATABASE] PORT: 900\nValue for [DATABASE_CREDENTIALS] USER: my_user\nValue for [DATABASE_CREDENTIALS] PASSWORD (will be encrypted): my_pass\n\nWriting file at /home/user/a_project/conf.ini:\nConfiguration file successfully generated.\n[user@localhost a_project]$ \n```\n\nIt generates the file /home/user/a_project/conf.ini:\n```ini\n[DATABASE]\nNAME = database_name\nHOST = database_host\nPORT = 900\n\n[DATABASE_CREDENTIALS]\nUSER = my_user\nPASSWORD = JbAwLj5Zwz8lMrvcUZq5sP/v6eaUFY5E7U8Fmg63vxI=\n\n# A constant field\n[LDAP]\nLDAPGRP = 'ldaps://monldap'\n\n[DJANGO]\nKEY = w)r13ne4=id9_8xdojir)3)%%5m3r$co#jwj_)4d*_%%!0+f#sro\n```\n\n## Customization\n\n### Don't use Django settings\nIf you want add variables to your Django settings file, you can inherit `generate_settings.Command` to specify command options :\n```python\nfrom django_settings_custom.management.commands import generate_settings\n\n\nclass Command(generate_settings.Command):\n    settings_template_file = 'The/settings/template/file_path.ini'\n    settings_file_path = 'The/target/settings/file_path.ini'\n```\n\n### Adding custom tag\nTo add a custom tag, you can inherit `generate_settings.Command` and override the method `get_value` :\n\n```python\nimport random\nfrom django_settings_custom.management.commands import generate_settings\n\n\nclass Command(generate_settings.Command):\n\n    @staticmethod\n    def get_value(section, key, value_type, secret_key):\n        if value_type == 'RANDOM_VALUE':\n            return random.uniform(0, 100)\n        return super(Command, Command).get_value(section, key, value_type, secret_key)\n```\n\nOr a little more complex example :\n\n```python\nfrom django.core.management.base import CommandError\nfrom django_settings_custom.management.commands import generate_settings\n\n\nclass Command(generate_settings.Command):\n\n    @staticmethod\n    def get_value(section, key, value_type, secret_key):\n        int_less_10 = value_type == 'INT_LESS_THAN_10'\n        if int_less_10:\n            value_type = 'USER_VALUE'\n        value = super(Command, Command).get_value(section, key, value_type, secret_key)\n        if int_less_10:\n            try:\n                value = int(value)\n                if value >= 10:\n                    raise CommandError('This field needs an int less than 10.')\n            except ValueError:\n                raise CommandError('This field needs an int.')\n        return value\n```\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThomasMarques/django-settings-custom",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-settings-custom",
    "package_url": "https://pypi.org/project/django-settings-custom/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-settings-custom/",
    "project_urls": {
      "Homepage": "https://github.com/ThomasMarques/django-settings-custom"
    },
    "release_url": "https://pypi.org/project/django-settings-custom/1.0.2/",
    "requires_dist": [
      "django (>=2)",
      "pip",
      "pycrypto",
      "setuptools",
      "wheel",
      "pytest; extra == 'test'",
      "pytest-cov; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A Django interactive command for configuration file generation.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5949617,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90c1d11cf9ffddc8b3a4273d08d46715a34177071651b20f924ee255e71f29ec",
        "md5": "76f1f6d7c1bb40dc48cb843f5e0b9a1c",
        "sha256": "6e80c587e8438a60a0c56aebd25bbdde24468f18f2117adca518dd8fe9115edc"
      },
      "downloads": -1,
      "filename": "django_settings_custom-1.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76f1f6d7c1bb40dc48cb843f5e0b9a1c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6393,
      "upload_time": "2018-10-31T15:50:08",
      "upload_time_iso_8601": "2018-10-31T15:50:08.193698Z",
      "url": "https://files.pythonhosted.org/packages/90/c1/d11cf9ffddc8b3a4273d08d46715a34177071651b20f924ee255e71f29ec/django_settings_custom-1.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ea9d0cd1c93ee08970600a6622a129b82cb08b09444193bd325ce17bfa7c8e5",
        "md5": "f17b293a77555cd8b1ddb8f96c22a4dd",
        "sha256": "7e8ac0c916fce096816970f8b4aa3732f50af26270109f4a3fe2f2571b532a92"
      },
      "downloads": -1,
      "filename": "django-settings-custom-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f17b293a77555cd8b1ddb8f96c22a4dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4770,
      "upload_time": "2018-10-31T15:50:09",
      "upload_time_iso_8601": "2018-10-31T15:50:09.338655Z",
      "url": "https://files.pythonhosted.org/packages/5e/a9/d0cd1c93ee08970600a6622a129b82cb08b09444193bd325ce17bfa7c8e5/django-settings-custom-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}