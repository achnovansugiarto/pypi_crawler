{
  "info": {
    "author": "shivanshs9",
    "author_email": "shivanshs9@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "DRF Problems [![PyPI version](https://badge.fury.io/py/drf-problems.svg)](https://badge.fury.io/py/drf-problems)\n================\n\n## TL;DR\nThis library implements [RFC 7807](https://tools.ietf.org/html/rfc7807) in our favorite Django REST Framework! Or, in layman terms, it introduces \"Problem Details\" in the HTTP APIs.\n\nTable of Contents\n-----------------\n* [Features](#features)\n* [Pre-Requisites](#pre-requisites)\n* [Installation](#installation)\n* [Usage](#usage)\n    * [With exceptions](#with-exceptions)\n    * [With permissions](#with-permissions)\n    * [With Views](#with-views)\n* [Resources](#resources)\n* [Roadmap](#roadmap)\n* [Contributing](#contributing)\n\n\n## Features\n- Handles exception to return response with Problem Details model.\n- Added permission mixins and base class to store exception to raise by the view on failure of permission.\n- Added view mixin which throws exception of failed permission.\n- These permissions are compatible with composable permissions introduced in DRF 3.9.0!\n- Has problem description endpoint to understand about the problem with the given code.\n- Has sample permissions which checks for minimum API version.\n\n## Pre-Requisites\n- Django >= 2.0 (Tested with 2.2)\n- djangorestframework >= 3.0.0 (Tested with 3.9.0)\n\n## Installation\nInstall the library as you would for any django library.\n\n- Install using pip.\n`pip install drf-problems`\n- Add 'drf_problems' to your **INSTALLED_APPS** setting.\n```python\nINSTALLED_APPS = (\n    ...\n    'drf_problems',\n)\n```\n- DRF's default exception handler needs to be replaced. In your `settings.py`, update:\n```python\nREST_FRAMEWORK = {\n    ...\n    'EXCEPTION_HANDLER': 'drf_problems.exceptions.exception_handler',\n```\n- To use the problem description url, you need to update your `urls.py`:\n```python\nurlpatterns = [\n    ...\n    path('', include('drf_problems.urls'))\n]\n```\n\n## Usage\n### With exceptions\nIn your exception class, define `default_code` with the error code string which is used in the type URI.\nTo set custom title, define `title` with the human-readable summary of the problem type.\nTo set description, define `description` with a long paragraph describing the problem.\n\nFinally, make sure to register your exception with `drf_problems.utils.register_exception` function or `drf_problems.utils.register` decorator.\nHere's a sample exception class:\n```python\nfrom drf_problems.utils import register_exception, register\n\n@register # Either use this decorator\nclass InvalidVersionRequestedException(exceptions.NotAcceptable):\n    default_code = 'invalid_version'\n    title = 'Invalid API version'\n    default_detail = 'Provided API version is invalid.')\n    description = 'Malformed or unsupported version string is provided with the request.'\n\nregister_exception(InvalidVersionRequestedException) # Or this method directly.\n```\n\n### With permissions\nUse either `drf_problems.permissions.ProblemPermissionMixin` mixin class with your existing permissions, or extend directly from `drf_problems.permissions.BaseProblemPermission`.\nDefine `exception_class` in the permissions to the desired exception class.\nFor flexibility, you can even set exception instance by setting `exception` attribute on the permission object.\n\nHere's a sample permissions class:\n```python\nfrom drf_problems.permissions import BaseProblemPermission\n\nclass MinimumVersionRequiredPermission(BaseProblemPermission):\n    exception_class = InvalidVersionRequestedException\n```\n\n### With Views\n**Note**: The permissions wouldn't throw the desired exception from the view, until the view is extended from the `drf_problems.mixins.AllowPermissionWithExceptionViewMixin` mixin. So, remember to update your views too, for which permissions are updated!\n\n## Resources\n- [Official Guide](https://medium.com/@shivanshs9/drf-problems-21f7bb4d4675)\n- [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)\n- [REST API Error Handling - Problem Details Response](https://blog.restcase.com/rest-api-error-handling-problem-details-response/)\n\n## Roadmap\n- Add tests with some sample views using exceptions and permissions.\n- Document the code better.\n\n## Contributing\nContributions are very welcome, of any kind - whether finding new issues or any ideas for enhancements or a pull request.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shivanshs9/drf-problems/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-problems",
    "package_url": "https://pypi.org/project/drf-problems/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-problems/",
    "project_urls": {
      "Homepage": "https://github.com/shivanshs9/drf-problems/"
    },
    "release_url": "https://pypi.org/project/drf-problems/1.0.2/",
    "requires_dist": [
      "Django (>=1.6)",
      "djangorestframework (>=3.0.0)"
    ],
    "requires_python": "",
    "summary": "Never liked DRF plain old errors? Forget that and accept RFC 7807 - Problem Details!",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15324935,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d01a4e185e76adfe4a50357ec29eb83d3db6a02ad8d53a99f1c0a450bb25ecc",
        "md5": "b46f1324719e71701762a5fde0757641",
        "sha256": "fee447694e0e0cccc8279d9434180977fc86c8dd20cd14b8212ec27f3e3ed1c3"
      },
      "downloads": -1,
      "filename": "drf_problems-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b46f1324719e71701762a5fde0757641",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9313,
      "upload_time": "2019-06-09T06:45:48",
      "upload_time_iso_8601": "2019-06-09T06:45:48.963882Z",
      "url": "https://files.pythonhosted.org/packages/5d/01/a4e185e76adfe4a50357ec29eb83d3db6a02ad8d53a99f1c0a450bb25ecc/drf_problems-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5259ee0be9cda3d34d2dd5fd66a7be1151076861ec24766413822e1b880f7d93",
        "md5": "d4a1ef102ebb2e346bffc8460eb9fd3b",
        "sha256": "3b3f72073fff4fd524374c6cb74686ca55a8f5b0a00a683a65c66ab5a18fdd3b"
      },
      "downloads": -1,
      "filename": "drf-problems-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d4a1ef102ebb2e346bffc8460eb9fd3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7451,
      "upload_time": "2019-06-09T06:45:51",
      "upload_time_iso_8601": "2019-06-09T06:45:51.086270Z",
      "url": "https://files.pythonhosted.org/packages/52/59/ee0be9cda3d34d2dd5fd66a7be1151076861ec24766413822e1b880f7d93/drf-problems-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}