{
  "info": {
    "author": "Amos Vryhof",
    "author_email": "amos@vryhofresearch.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "[![Build Status](https://travis-ci.org/avryhof/django-pwa-webpush.svg)](https://travis-ci.org/avryhof/django-pwa-webpush)\n[![CodeFactor](https://www.codefactor.io/repository/github/avryhof/django-pwa-webpush/badge)](https://www.codefactor.io/repository/github/avryhof/django-pwa-webpush)\n[![codecov](https://codecov.io/gh/avryhof/django-pwa-webpush/branch/master/graph/badge.svg)](https://codecov.io/gh/avryhof/django-pwa-webpush)\n[![PyPI - Downloads](https://img.shields.io/pypi/v/django-pwa-webpush.svg)](https://pypi.org/project/django-pwa-webpush)\n[![PyPI - Downloads](https://img.shields.io/pypi/djversions/django-pwa-webpush.svg)](https://pypi.org/project/django-pwa-webpush)\n\n\nDjango-PWA-Webpush\n===================\n\nThis package is a pretty simple merge of [django-pwa](https://github.com/silviolleite/django-pwa), and [django-webpush](https://github.com/safwanrahman/django-webpush).\n\ndjango-pwa\n=====\nThis Django app turns your project into a [progressive web app](https://developers.google.com/web/progressive-web-apps/).  Navigating to your site on an Android phone will prompt you to add the app to your home screen.\n\nLaunching the app from your home screen will display your app [without browser chrome](https://github.com/silviolleite/django-pwa/raw/master/images/screenshot2.png).  As such, it's critical that your application provides all navigation within the HTML (no reliance on the browser back or forward button).\n\ndjango-webpush\n=====\nDjango-PWA-Webpush is a Package made for integrating and sending [Web Push Notification](https://developer.mozilla.org/en/docs/Web/API/Push_API) in Django Application.\n\nCurrently, it Supports Sending Push Notification to **Firefox 46+ and Chrome 52+**.\n\nMore at [Can I use...](https://caniuse.com/#feat=push-api)\n\nThis README\n=====\nThis readme is a sloppy copy and paste job from the READMEs of the two packages I combined. So I have also included their own README files, since they are very informative.\n\n. [django-pwa](https://github.com/avryhof/django-pwa-webpush/DJANGO-PWA-README.md)\n. [django-webpush](https://github.com/avryhof/django-pwa-webpush/DJANGO-WEBPUSH-README.md)\n\n\nRequirements\n=====\nProgressive Web Apps require HTTPS unless being served from localhost.  If you're not already using HTTPS on your site, check out [Let's Encrypt](https://letsencrypt.org/) and [ZeroSSL](https://zerossl.com/).\n\n----------\nInstallation and Setup\n-------------\n\nYou can install it easily from pypi by running\n\n    pip install django-pwa-webpush\n\nAfter installing the package, add `pwa_webpush` in in your `INSTALLED_APPS` settings\n\n```python\nINSTALLED_APPS = (\n    ...\n    'pwa_webpush',\n)\n```\n\nYou also need these settings:\n\n```python\n\nPWA_APP_NAME = 'My App'\nPWA_APP_DESCRIPTION = \"My app description\"\nPWA_APP_THEME_COLOR = '#0A0302'\nPWA_APP_BACKGROUND_COLOR = '#ffffff'\nPWA_APP_DISPLAY = 'standalone'\nPWA_APP_SCOPE = '/',\nPWA_APP_ORIENTATION = 'any'\nPWA_APP_START_URL = '/'\nPWA_APP_ICONS = [\n    {\n        'src': '/static/images/my_app_icon.png',\n        'sizes': '160x160'\n    }\n]\nPWA_APP_SPLASH_SCREEN = [\n    {\n        'src': '/static/images/icons/splash-640x1136.png',\n        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'\n    }\n]\nPWA_APP_DIR = 'ltr'\nPWA_APP_LANG = 'en-US'\n\n```\n\nAll PWA_ settings are optional, and the app will work fine with its internal defaults.  Highly recommend setting at least `PWA_APP_NAME`, `PWA_APP_DESCRIPTION`, `PWA_APP_ICONS` and `PWA_APP_SPLASH_SCREEN`.\n\nFor Webpush, you also need\n\n```python\n\nWEBPUSH_SETTINGS = {\n    \"VAPID_PUBLIC_KEY\": \"Vapid Public Key\",\n    \"VAPID_PRIVATE_KEY\":\"Vapid Private Key\",\n    \"VAPID_ADMIN_EMAIL\": \"admin@example.com\"\n}\n```\n**Replace ``\"Vapid Public Key\"`` and ``\"Vapid Private Key\"`` with your Vapid Keys. Also replace ``admin@example.com`` with your email so that the push server of browser can reach to you if anything goes wrong.**\n\n> **To know how to obtain Vapid Keys please see this [`py_vapid`](https://github.com/web-push-libs/vapid/tree/master/python) and [Google Developer Documentation](https://developers.google.com/web/fundamentals/push-notifications/subscribing-a-user#how_to_create_application_server_keys). You can obtain one easily from [web-push-codelab.glitch.me](https://web-push-codelab.glitch.me/). ``Application Server Keys`` and ``Vapid Keys`` both are same.**\n\nThen include `pwa_webpush` in the `urls.py`\n\n```python\nurlpatterns =  [\n    url(r'', include('pwa_webpush.urls')) # You MUST use an empty string as the URL prefix\n]\n```\n\nAdd PWA Information to your template.\n-------------------\nInject the required meta tags in your base.html (or wherever your HTML &lt;head&gt; is defined):\n```html\n{% load pwa_webpush %}\n\n<head>\n    ...\n    {% progressive_web_app_meta %}\n    ...\n</head>\n```\n\nAdd Web Push Information to your template.\n-------------------\n\nSo in template, you need to load `webpush_notifications` custom template tag by following:\n- If you are using built in templating engine, add `{% load webpush_notifications %}` in the template\n- If you are using **jinja** templating engine, you do not need to load anything.\n\nNext, inside the `<head></head>` tag add `webpush_header` according to your templating engine:\n\n```html\n<head>\n  # For django templating engine\n  {% webpush_header %}\n  # For jinja templating engine\n  {{ webpush_header() }}\n</head>\n```\nNext, inside the `<body></body>` tag, insert `webush_button` where you would like to see the **Subscribe to Push Messaging** Button. Like following\n\n```html\n<body>\n  <p> Hello World! </p>\n  # For django templating engine\n  {% webpush_button %}\n  # For jinja templating engine\n  {{ webpush_button() }}\n</body>\n```\n\n >**Note:** The Push Notification Button will show only if the user is logged in or any `group` named is passed through `webpush` context\n\n ***If you would like to mark the subscription as a group, like all person subscribe for push notification from the template should be marked as group and would get same notification, you should pass a `webpush` context to the template through views. The `webpush` context should have a dictionary like `{\"group\": group_name}`*** . Like following\n\n```python\n webpush = {\"group\": group_name } # The group_name should be the name you would define.\n\nreturn render(request, 'template.html',  {\"webpush\":webpush})\n```\n> **Note:** If you dont pass `group` through the `webpush` context, only logged in users can see the button for subscription and able to get notification.\n\n----------\n\nTroubleshooting\n=====\nWhile running the Django test server:\n\n1. Verify that `/manifest.json` is being served\n1. Verify that `/serviceworker.js` is being served\n1. Verify that `/offline` is being served\n1. Use the Application tab in the Chrome Developer Tools to verify the progressive web app is configured correctly.\n1. Use the \"Add to homescreen\" link on the Application Tab to verify you can add the app successfully.\n\nAdding Your Own Service Worker\n=====\nTo add service worker functionality, you'll want to create a `serviceworker.js` or similarly named template in a template directory, and then point at it using the PWA_SERVICE_WORKER_PATH variable (PWA_APP_FETCH_URL is passed through).\n\n```python\nPWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, 'my_app', 'serviceworker.js')\n\n```\n\nThe offline view\n=====\nBy default, the offline view is implemented in `templates/offline.html`\nYou can overwrite it in a template directory if you continue using the default `serviceworker.js`.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/avryhof/django-pwa-webpush",
    "keywords": "",
    "license": "GNU Public License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pwa-webpush",
    "package_url": "https://pypi.org/project/django-pwa-webpush/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pwa-webpush/",
    "project_urls": {
      "Homepage": "https://www.github.com/avryhof/django-pwa-webpush"
    },
    "release_url": "https://pypi.org/project/django-pwa-webpush/1.1.2/",
    "requires_dist": [
      "pywebpush (==1.6.0)"
    ],
    "requires_python": "",
    "summary": "A conglomeration of django-pwa and django-webpush.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14557500,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eabfcb8efbd6f266408e7fcc8bf564c81c0e90ba4e5bbc61679a4965c0f8fc4",
        "md5": "fefdf4af1e9ed0c8f1c62a625abaa76b",
        "sha256": "758952debcb35cfeffcca631a5bcc39e92f96c80464d739c20bbedcb897dece1"
      },
      "downloads": -1,
      "filename": "django_pwa_webpush-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fefdf4af1e9ed0c8f1c62a625abaa76b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 483858,
      "upload_time": "2020-10-27T13:04:00",
      "upload_time_iso_8601": "2020-10-27T13:04:00.066799Z",
      "url": "https://files.pythonhosted.org/packages/1e/ab/fcb8efbd6f266408e7fcc8bf564c81c0e90ba4e5bbc61679a4965c0f8fc4/django_pwa_webpush-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c348f386b89df4ea50b45f393e731666c8edbe6fabf803c3e40b3b3f0a34407",
        "md5": "29df641e7fd5a51ee7c003e5a0c376b7",
        "sha256": "6da3a24b246b52cb81f4257b689cf074f6c862dbc5ddeb1fa11f409b0def53cf"
      },
      "downloads": -1,
      "filename": "django-pwa-webpush-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "29df641e7fd5a51ee7c003e5a0c376b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 477175,
      "upload_time": "2020-10-27T13:04:12",
      "upload_time_iso_8601": "2020-10-27T13:04:12.502786Z",
      "url": "https://files.pythonhosted.org/packages/6c/34/8f386b89df4ea50b45f393e731666c8edbe6fabf803c3e40b3b3f0a34407/django-pwa-webpush-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}