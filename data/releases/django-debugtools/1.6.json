{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Debuggers"
    ],
    "description": "Introduction\n============\n\nThe ``debugtools`` module offers some easy to use debugging utilities to assist Django development.\nIt features:\n\n* A template tag to print context.\n* A ``XViewMiddleware`` variation to see which *view* and *template* was used to render a page.\n* A panel for django-debug-toolbar_ to show which *view* and *template* was used to render a page.\n* A jQuery ``debug()`` function.\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment. It can be installed from PyPI::\n\n    pip install django-debugtools\n\nOr the current folder can be installed::\n\n    pip install .\n\nConfiguration\n-------------\n\nAdd the module to the installed apps::\n\n    INSTALLED_APPS += (\n        'debugtools',\n    )\n\nAs of Django 1.9, either use ``{% load debugtools_tags %}`` or add the following to the settings:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    # ...\n                ],\n               'builtins': [                                     # Add this section\n                    \"debugtools.templatetags.debugtools_tags\",   # Add this line\n                ],\n            },\n        },\n    ]\n\n\nFeatures\n--------\n\nPrint Template Tag\n~~~~~~~~~~~~~~~~~~\n\nIn Django templates, the following code can be used::\n\n    {% print variable1 variable2 %}\n\nThis will print out the specific variables, in case of ``{% print original %}``:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/print-original.png\n   :width: 959px\n   :height: 166px\n\nWhen no variables are given (e.g. ``{% print %}``), all context variables are displayed:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/template-context.png\n   :width: 744px\n   :height: 569px\n\n\nThe template context variables are printed in a customized ``pprint.pformat`` format, for easy reading.\nNote no ``{% load %}`` tag is needed; the ``{% print %}`` function is added to the template builtins for debugging convenience.\n\nPrint Queries template tag\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor convenience, there is also a ``{% print_queries %}`` tag,\nbased on http://djangosnippets.org/snippets/93/\n\nFor more sophisticated debugging, you may want to use the *django-debug-toolbar* for this job.\n\n\nDebug Toolbar Panel\n~~~~~~~~~~~~~~~~~~~\n\nAdd the following settings to your django-debug-toolbar_ configuration::\n\n    DEBUG_TOOLBAR_PANELS = (\n        'debug_toolbar.panels.versions.VersionsPanel',\n        'debug_toolbar.panels.timer.TimerPanel',\n        'debug_toolbar.panels.settings.SettingsPanel',\n        'debug_toolbar.panels.headers.HeadersPanel',\n        'debug_toolbar.panels.request.RequestPanel',\n        'debug_toolbar.panels.sql.SQLPanel',\n        'debug_toolbar.panels.staticfiles.StaticFilesPanel',\n        'debugtools.panels.ViewPanel',    # Add this one\n        'debug_toolbar.panels.templates.TemplatesPanel',\n        'debug_toolbar.panels.cache.CachePanel',\n        'debug_toolbar.panels.signals.SignalsPanel',\n        'debug_toolbar.panels.logging.LoggingPanel',\n        'debug_toolbar.panels.redirects.RedirectsPanel',\n    )\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/debug-toolbar.png\n   :width: 887px\n   :height: 504px\n\n|\n\njQuery debug print\n~~~~~~~~~~~~~~~~~~\n\nAdd the following to the page::\n\n    <script type=\"text/javascript\" src=\"{{ STATIC_URL }}debugtools/jquery.debug.js\"></script>\n\nNow you can print the jQuery selector context to the console::\n\n    $(\"#foo\").children('li').debug().addClass('bar');\n\nThis will print the matched ``<li>`` elements in the console, among with the current jQuery selector.\nOptionally, a prefix can be included in the ``debug()`` call::\n\n    $(\"#foo\").debug(\"at baz: \").addClass('bar');\n\n\nX-View Middleware\n~~~~~~~~~~~~~~~~~\n\nAs alternative to the django-debug-toolbar_ panel, you can also add the ``XViewMiddleware``.\nAdd the following setting::\n\n    INTERNAL_IPS = (\n        '127.0.0.1',\n    )\n\n    MIDDLEWARE_CLASSES += (\n        'debugtools.middleware.XViewMiddleware',\n    )\n\nAll requests from the internal IP, or made by the admin user will have a ``X-View`` header and ``X-View-Template`` header.\nIn the Firebug console, or Chrome web inspector, you can see which view and template handled the current request:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/firebug-xview.png\n   :width: 811px\n   :height: 41px\n\nThe alternative templates are also displayed, in case the view allows the template to be overwritten with a different name.\n\n\nPrint tag examples\n------------------\n\nFor example, when using the following code::\n\n    {% print original %}\n\n    {% print inline_admin_formset %}\n\n    {% for inline_admin_form in inline_admin_formset %}\n        {% print inline_admin_form %}\n        {% print inline_admin_form.form.name %}\n    {% endfor %}\n\nIt prints the context values, which helps to learn a lot about the template context:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/print-original.png\n   :width: 959px\n   :height: 166px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/inline_admin_formset.png\n   :width: 959px\n   :height: 208px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/inline_admin_form.png\n   :width: 959px\n   :height: 355px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/adminform.form.name.png\n   :width: 959px\n   :height: 352px\n\nThis makes it much easier to understand what the code provides to templates.\n\n.. _django-debug-toolbar: https://github.com/django-debug-toolbar/django-debug-toolbar",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-debugtools/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-debugtools",
    "keywords": null,
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-debugtools",
    "package_url": "https://pypi.org/project/django-debugtools/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-debugtools/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-debugtools/zipball/master",
      "Homepage": "https://github.com/edoburu/django-debugtools"
    },
    "release_url": "https://pypi.org/project/django-debugtools/1.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A toolbox of small utilities to assist Django development",
    "version": "1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12041843,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6a4b6fce1c680457568119f4d8327add7a80a6da62531bdf3a68363303a70ce",
        "md5": "66d89051b95be97871c44a20b080fe38",
        "sha256": "2060fc486b8a117198ec2df9210b69059f4fea7e8ab839994e97d9ca31dcdd0b"
      },
      "downloads": -1,
      "filename": "django_debugtools-1.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66d89051b95be97871c44a20b080fe38",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19818,
      "upload_time": "2016-03-17T12:19:35",
      "upload_time_iso_8601": "2016-03-17T12:19:35.459098Z",
      "url": "https://files.pythonhosted.org/packages/d6/a4/b6fce1c680457568119f4d8327add7a80a6da62531bdf3a68363303a70ce/django_debugtools-1.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d728d382bfdf112c442cccca30665f7aa5743275c40a5d50e8177a9136ef5d02",
        "md5": "33638643774f28ac0e770c3ac0552ac3",
        "sha256": "175878d785aa065ddb346b9f37f79b85712ab2966b322b8e5842dcb00e1c01a8"
      },
      "downloads": -1,
      "filename": "django-debugtools-1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "33638643774f28ac0e770c3ac0552ac3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18061,
      "upload_time": "2016-03-17T12:19:06",
      "upload_time_iso_8601": "2016-03-17T12:19:06.996892Z",
      "url": "https://files.pythonhosted.org/packages/d7/28/d382bfdf112c442cccca30665f7aa5743275c40a5d50e8177a9136ef5d02/django-debugtools-1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}