{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "Introduction\n============\n\nThe ``debugtools`` module offers some easy to use debugging utilities to assist Django development.\nIt features:\n\n* A template tag to print context.\n* A ``XViewMiddleware`` variation which works for all request types.\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment. It can be installed from PyPI::\n\n    pip install django-debugtools\n\nOr the current folder can be installed::\n\n    pip install .\n\nConfiguration\n-------------\n\nAdd the module to the installed apps::\n\n    INSTALLED_APPS += (\n        'debugtools',\n    )\n\nFeatures\n--------\n\nPrint Template Tag\n~~~~~~~~~~~~~~~~~~\n\nIn Django templates, the following code can be used::\n\n    {% load debug_tags %}\n    {% print variable1 variable2 %}\n\nFor example, when using the following code::\n\n    {% print original %}\n\n    {% print inline_admin_formset %}\n\n    {% for inline_admin_form in inline_admin_formset %}\n        {% print inline_admin_form %}\n        {% print inline_admin_form.form.name %}\n    {% endfor %}\n\nIt prints the context values, which helps to learn a lot about the template context:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/print-original.png\n   :width: 959px\n   :height: 166px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/inline_admin_formset.png\n   :width: 959px\n   :height: 208px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/inline_admin_form.png\n   :width: 959px\n   :height: 355px\n\n|\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/adminform.form.name.png\n   :width: 959px\n   :height: 352px\n\nThis makes it much easier to understand what the code provides to templates.\n\nWhen no variables are given (e.g. ``{% print %}``), all context variables are displayed:\n\n.. image:: https://github.com/edoburu/django-debugtools/raw/master/docs/images/template-context.png\n   :width: 744px\n   :height: 569px\n\nThe template context variables are printed in a customized ``pprint.pformat`` format, for easy reading.\n\nPrint Queries template tag\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor convenience, there is also a ``{% print_queries %}`` tag,\nbased on http://djangosnippets.org/snippets/93/\n\nFor more sophisticated debugging, you may want to use the *django-debug-toolbar* for this job.\n\n\nX-View Middleware\n~~~~~~~~~~~~~~~~~\n\nAdd the following setting::\n\n    INTERNAL_IPS = (\n        '127.0.0.1',\n    )\n\n    MIDDLEWARE_CLASSES += (\n        'debugtools.middleware.XViewMiddleware',\n    )\n\nAll requests from the internal IP, or made by the admin user will have a ``X-View`` header\nand ``X-View-Template`` header. This reveals which view code and template handled the current request.\n\n\njQuery debug print\n~~~~~~~~~~~~~~~~~~\n\nAdd the following to the page::\n\n    <script type=\"text/javscript\" src=\"{{ STATIC_URL }}debugtools/jquery.debug.js\"></script>\n\nNow you can print the jQuery selector context to the console::\n\n    $(\"#foo\").children('li').debug().addClass('bar');\n\nThis will print the matched ``<li>`` elements in the console, among with the current jQuery selector.\nOptionally, a prefix can be included in the ``debug()`` call::\n\n    $(\"#foo\").debug(\"at baz: \").addClass('bar');",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-debugtools/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-debugtools",
    "keywords": null,
    "license": "Apache License, Version 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-debugtools",
    "package_url": "https://pypi.org/project/django-debugtools/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-debugtools/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-debugtools/zipball/master",
      "Homepage": "https://github.com/edoburu/django-debugtools"
    },
    "release_url": "https://pypi.org/project/django-debugtools/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A toolbox of small utilities to assist Django development",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12041843,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7b87eaada7817bbdf08c818f611f49cd30a11491c1a32b31db0f680dbaa5aaa",
        "md5": "762ba6ecb66ecf62efacb28d05864708",
        "sha256": "453be99dbace5a3d659ebd6616848c5b4cde738cd77ccb80aa0164f94665aff2"
      },
      "downloads": -1,
      "filename": "django-debugtools-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "762ba6ecb66ecf62efacb28d05864708",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12019,
      "upload_time": "2012-08-17T12:07:45",
      "upload_time_iso_8601": "2012-08-17T12:07:45.591686Z",
      "url": "https://files.pythonhosted.org/packages/d7/b8/7eaada7817bbdf08c818f611f49cd30a11491c1a32b31db0f680dbaa5aaa/django-debugtools-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}