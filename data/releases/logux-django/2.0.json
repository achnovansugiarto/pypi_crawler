{
  "info": {
    "author": "Vadim Iskuchekov @egregors",
    "author_email": "egregors@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Logux Django\n\n<img align=\"right\" width=\"95\" height=\"148\" title=\"Logux logotype\"\n     src=\"https://logux.io/branding/logotype.svg\">\n\nDjango [Logux](https://logux.io/) integration engine.\n\n* **[Guide, recipes, and API](https://logux.io/)**\n* **[Chat](https://gitter.im/logux/logux)** for any questions\n* **[Issues](https://github.com/logux/logux/issues)**\n  and **[roadmap](https://github.com/logux/logux/projects/1)**\n* **[Projects](https://logux.io/guide/architecture/parts/)**\n  inside Logux ecosystem\n\n![Logux Proto](https://img.shields.io/badge/logux%20protocol-4-brightgreen)\n[![PyPI version](https://badge.fury.io/py/logux-django.svg)](https://badge.fury.io/py/logux-django)\n![Travis CI](https://travis-ci.org/logux/django.svg?branch=master)\n![Lint and Test](https://github.com/logux/django/workflows/Lint%20and%20Test/badge.svg)\n\n## Installation\n\nInstall from PyPI\n```shell script\npip install logux-django\n```\n\nInstall dev version from current master.\n```shell script\npip install -e git://github.com/logux/django.git#egg=logux_django\n```\n\nAdd `path(r'logux/', include('logux.urls')),` into your `urls.py`\n\nSets Logux settings in your `settings.py`:\n```python\n# Logux settings: https://logux.io/guide/starting/proxy-server/\nLOGUX_CONFIG = {\n    'URL': 'http://localhost:31337/',\n    'CONTROL_SECRET': 'parole',\n    'AUTH_FUNC': auth_func,  # auth_func(user_id: str, token: str, cookie: dict, headers: dict) -> bool\n    'SUBPROTOCOL': '1.0.0',\n    'SUPPORTS': '^1.0.0'\n}\n```\n\n_Storing passwords or secrets in `settings.py` is bad practice. Use ENV._\n\nFor urls and settings examples, please checkout `test_app` \n[settings](https://github.com/logux/django/blob/master/tests/test_project/settings.py)\n\nKeep in mind: the path in your `urls.py` (`logux/`) and the `LOGUX_CONTROL_SECRET` from the settings should be passed \ninto [Logux Server](https://logux.io/guide/starting/proxy-server/#creating-the-project) by ENV as \n`LOGUX_BACKEND` and `LOGUX_CONTROL_SECRET` respectively. \n\nFor example: \n```shell script\nLOGUX_BACKEND=http://localhost:8000/logux/\nLOGUX_CONTROL_SECRET=secret\n```\n\n## Usage\n\n### Actions\n\nFor `action` handling add `logux_actions.py` file in your app, add `ActionCommand` inheritors and implement all his\nabstract methods. \n\nActions classes requirements:\n\n* Set `action_type: str`\n* Implement all `ActionCommand` abstracts methods\n* Implement `resend` and `process` methods if you need (optional)\n* import `logux` dispatcher: `from logux.dispatchers import logux`\n* Register all your action handlers: `logux.actions.register(YourAction)`\n\nFor example – User rename action handler:\n```python\nimport json\nfrom typing import Optional, List\n\nfrom logux.core import ActionCommand, Meta, Action\nfrom logux.dispatchers import logux\nfrom logux.exceptions import LoguxProxyException\nfrom tests.test_app.models import User\n\nclass RenameUserAction(ActionCommand):\n    \"\"\" During the subscription to users/USER_ID channel sends { type: \"users/name\", payload: { userId, name } }\n    action with the latest user’s name. \"\"\"\n    action_type = 'users/name'\n\n    def resend(self, action: Action, meta: Optional[Meta]) -> List[str]:\n        return [f\"users/{action['payload']['userId']}\"]\n\n    def access(self, action: Action, meta: Meta) -> bool:\n        if 'error' in self.headers:\n            raise LoguxProxyException(self.headers['error'])\n        return action['payload']['userId'] == meta.user_id\n\n    def process(self, action: Action, meta: Meta) -> None:\n        user = User.objects.get(pk=action['payload']['userId'])\n        first_name_meta = json.loads(user.first_name_meta)\n\n        if not first_name_meta or Meta(first_name_meta).is_older(meta):\n            user.first_name = action['payload']['name']\n            user.first_name_meta = meta.get_json()\n            user.save()\n\n\nlogux.actions.register(RenameUserAction)\n\n```\n\n### Channels (Subscription)\n\nFor `subsription` handling add `logux_subsriptions.py` file in your app, and `ChannelCommand` inheritors \nand implement all his abstract methods. \n\nSubscription classes requirements:\n\n* Set `channel_pattern: str` – this is a regexp like Django's url's patters in `urls.py`\n* Implement all `ChannelCommand` abstracts methods\n* import `logux` dispatcher: `from logux.dispatchers import logux`\n* Register all your subscription handlers: `logux.channels.register(YourChannelCommand)`\n\nFor example:\n```python\nfrom typing import Optional\n\nfrom logux.core import ChannelCommand, Action, Meta\nfrom logux.dispatchers import logux\nfrom logux.exceptions import LoguxProxyException\nfrom tests.test_app.models import User\n\n\nclass UserChannel(ChannelCommand):\n\n    channel_pattern = r'^users/(?P<user_id>\\w+)$'\n\n    def access(self, action: Action, meta: Meta) -> bool:\n        return self.params['user_id'] == meta.user_id\n\n    def load(self, action: Action, meta: Meta) -> Action:\n        if 'error' in self.headers:\n            raise LoguxProxyException(self.headers['error'])\n\n        user, created = User.objects.get_or_create(id=self.params['user_id'])\n        if created:\n            user.first_name = 'Name'\n\n        return {\n            'type': 'users/name',\n            'payload': {'userId': str(user.id), 'name': user.first_name}\n        }\n\n\nlogux.channels.register(UserChannel)\n\n```\n\nFor more examples, please checkout `test app` (tests/test_app)\n\n### Utils\n\n#### logux.core.logux_add\n`logux_add(action: Action, raw_meta: Optional[Dict] = None) -> None` is low level API function to send any actions and meta into Logux server.\n\nIf `raw_meta` is `None` just empty Dict will be passed to Logux server.\n\nKeep in mind, in the current version `logux_add` is sync.\n\nFor more information: https://logux.io/node-api/#log-add\n\n## Development\n\nCreate dev environment\n```shell script\nmake venv\nmake install\nmake run\n```\n\nType checking and linting:\n```shell script\nmake lint\n```\n\nTest:\n```shell script\nmake test\n```\n\nIntegration tests (up server and run [backend-test](https://github.com/logux/backend-test)):\n```shell script\nmake integration_test\n```\n\n## License\n\nThe package is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/logux/django/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logux-django",
    "package_url": "https://pypi.org/project/logux-django/",
    "platform": "",
    "project_url": "https://pypi.org/project/logux-django/",
    "project_urls": {
      "Homepage": "https://github.com/logux/django/"
    },
    "release_url": "https://pypi.org/project/logux-django/2.0/",
    "requires_dist": [
      "django (<4,>=2.2)",
      "requests (<3,>=2.22.0)",
      "semantic-version (==2.8.5)"
    ],
    "requires_python": ">=3.7",
    "summary": "Django Logux integration engine https://logux.io/",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8134363,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d21ceb4cc35c90f0cf2d978b1700be03e9d830bf8686c19b1fff73b8fa87e51e",
        "md5": "ef0b5b9157234ccf26480ecd2bdf3fff",
        "sha256": "bcde2e2a05c78006b91d96af5c7ddf8e1b2bdbb79d54a69d1cc50425c7cc0e45"
      },
      "downloads": -1,
      "filename": "logux_django-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef0b5b9157234ccf26480ecd2bdf3fff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17964,
      "upload_time": "2020-09-08T08:03:22",
      "upload_time_iso_8601": "2020-09-08T08:03:22.979094Z",
      "url": "https://files.pythonhosted.org/packages/d2/1c/eb4cc35c90f0cf2d978b1700be03e9d830bf8686c19b1fff73b8fa87e51e/logux_django-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef994c408e00ce92c574d729332a746fd181ad5d93a126fbbafc30c0f6cce9e6",
        "md5": "6c1b3c86469ce683b7266cb53e726bed",
        "sha256": "74f237a8fca5f56adceeccce4ec86638370d9276891e8f1c1875e3d7aede6fbd"
      },
      "downloads": -1,
      "filename": "logux_django-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c1b3c86469ce683b7266cb53e726bed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17912,
      "upload_time": "2020-09-08T08:03:24",
      "upload_time_iso_8601": "2020-09-08T08:03:24.868446Z",
      "url": "https://files.pythonhosted.org/packages/ef/99/4c408e00ce92c574d729332a746fd181ad5d93a126fbbafc30c0f6cce9e6/logux_django-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}