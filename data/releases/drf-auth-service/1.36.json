{
  "info": {
    "author": "EBS Integrator",
    "author_email": "office@ebs-integrator.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# Django Rest Framework Authorization Service\n\n\n## Overview :lock:\n\n**An authentication service** orchestrates single sign-on (SSO) between multiple apps.\nIf the user has already signed on to one app, the login page will not be shown again and the user will be logged in via this service.\n\n**Single sign-on (SSO)** is an authentication scheme that allows a user to log in with\na single ID and password to any of several related, yet independent, software systems.\n\n### Features :zap:\n- [X] Register and login by different register_types: email, phone_number, phone_number_code and nickname\n- [X] Register with confirmation flow managed by a **RegisterBackend**\n- [X] Reset Password with multiple options **phone/email** managed by register_type of user\n- [X] Social authentication **~~Apple~~/Facebook/Google**\n- [X] **Service** model approach for login and register\n- [X] User **edit/block/unblock/set-password/resend-confirmation/delete** feature based on a Secret Token\n- [X] Customizable\n\n\n## Integration workflow\n\n### Registration with confirmation\n\n![Register](./docs/register.jpeg)\n\n### Login\n\n![Register](./docs/login.jpeg)\n\n### Restore password\n\n![Register](./docs/restore.jpeg)\n\n### Refresh expired access token\n\n![Register](./docs/refresh.jpeg)\n\n\n## Installation\n\nInstall using `pip`...\n\n    pip install drf-auth-service\n\nAdd `'drf_auth_service'` to your `INSTALLED_APPS` setting.\n\n    INSTALLED_APPS = [\n        ...\n        'drf_auth_service',\n    ]\n\nAdd package urls to your application `urls.py` file.\n\n    urlpatterns = [\n        path(\"\", include(\"drf_auth_service.urls\"))\n    ]\n\nBefore project start run migrate of database...\n\n\n    ./manage.py migrate\n\n\n## Configuration\n\nConfiguration for DRF Auth Service is all namespaced inside a single Django setting, named DRF_AUTH_SERVICE.\n\nFor example your project's settings.py file might include something like this:\n\n    DRF_AUTH_SERVICE = {\n        'WORK_MODE': 'standalone',\n        'REGISTER_TYPES': [],\n        'SEND_CONFIRMATION': True\n    }\n\n\n## Available Settings :mag_right:\n\n| Key | Description | Default\n| ---     | --- | --- |\n|`WORK_MODE` | Mode of service | `standalone`\n|`REGISTER_TYPES` | Available register types | `['email', 'phone_number', 'phone_number_code', 'nickname']`\n|`SEND_CONFIRMATION` | Boolean if you want to send confirmation on register | `True`\n|`DOMAIN_ADDRESS` | Common domain address used in Single Sign On authentication | `None` \n|`RESET_PASSWORD_EXPIRE` | Token expiration hours for reset password and confirmation token | `24`\n|`SEND_RESET_PASSWORD_URL` | Base url where is append token | `https://example.com/reset-password/`\n|`SEND_CONFIRMATION_URL` | Base url where is append token | `https://example.com/confirm-email`\n|`SMS_CONFIRMATION_MESSAGE` | Sms message on confirmation | `Confirmation code {{ code }}`\n|`SMS_RESET_PASSWORD_MESSAGE` | Sms message on reset password | `Reset password code {{ code }}`\n|`HTML_DEFAULT_FROM_EMAIL` | From address in sending emails | EMAIL_USERNAME value\n|`HTML_RESET_PASSWORD_SUBJECT` | Subject on reset password email | `Reset password`\n|`HTML_CONFIRMATION_SUBJECT` | Subject on confirmation email | `Confirm account`\n|`HTML_EMAIL_RESET_TEMPLATE` | Path to reset password template if no one is defined, default is used | internal template\n|`HTML_EMAIL_CONFIRM_TEMPLATE` | Path to confirmation template if no one is defined, default is used | internal template\n|`SENDINBLUE_RESET_PASS_TEMPLATE` | Template ID for reset password from sendinblue service | `None` \n|`SENDINBLUE_CONFIRMATION_TEMPLATE` | Template ID for confirmation from sendinblue service | `None` \n|`SENDINBLUE_API_KEY` | SendInBlue API_KEY | `None` \n|`MAILCHIMP_RESET_PASS_TEMPLATE` | Template ID for reset password from Mailchimp service | `None` \n|`MAILCHIMP_CONFIRMATION_TEMPLATE` | Template ID for confirmation from Mailchimp service | `None` \n|`MAILCHIMP_USERNAME` | Mailchimp Username | `None` \n|`MAILCHIMP_SECRET_KEY` | Mailchimp SECRET_KEY | `None` \n|`TWILIO_ACCOUNT_SID` | Twilio SID | `None` \n|`TWILIO_AUTH_TOKEN` | Twilio TOKEN | `None` \n|`TWILIO_FROM_NUMBER` | Twilio from phone number | `None`\n|`EMAIL_HOST` | Email SMTP host | Django EMAIL_HOST value\n|`EMAIL_PORT` | Email SMTP port | Django EMAIL_HOST value\n|`EMAIL_USERNAME` | Email SMTP username | Django EMAIL_HOST_USER value\n|`EMAIL_PASSWORD` | Email SMTP password | Django EMAIL_HOST_PASSWORD value\n|`EMAIL_USE_TLS` | Email SMTP TLS use | Django EMAIL_USE_TLS value\n|`SERIALIZERS` | Here is a Dict of serializers that you can override\n|`VIEWS` | Here is a Dict of views that you can override\n|`PERMISSIONS` | Here is a Dict of permissions that you can override\n|`BACKENDS` | Here is a Dict of backends that you can override\n|`ENUMS` | Here is a Dict of enums that you can override\n\n## Customization\n\n### Change User model :family:\n\nUser model is based on swappable settings from Django model and to config your own model\nof user you just have to give model to `AUTH_USER_MODEL = 'my_application.CustomUser'`\n\n```python\nfrom drf_auth_service.models import AbstractSSOUser\n\n# Add phone number to user table\nclass CustomUser(AbstractSSOUser):\n    phone_number = models.CharField(max_length=120)\n```\n\n### Create a new registration backend :package:\n\nIn case you want to use your own backends you will have to override \n\n```python\nfrom drf_auth_service.common.backends import BaseBackend\nfrom drf_auth_service.common.managers import PhoneManager\n\nclass CustomRegisterBackend(BaseBackend):\n    name = 'email'\n    manager = PhoneManager\n\n    # This method will be called on register\n    def register_user(self):\n        user = get_user_model().objects.create(\n            service=self.request.service,\n            register_type=self.name,\n            username=self.request.data['username'],\n            \n            # insert with new field value\n            phone_number=self.request.data['phone_number']\n        )\n    \n        # return created user\n        return user\n```\n\nIn order to work with **RegisterBacked** it's a must to inherit **BaseBackend** from sso package:\n- name: register_type name, based on this name received in register body will identify what register backend to use\n- manager: What manager **(PhoneManager/EmailManager)** to use for sending confirmation in case you have this functionality \n\n\nChange Register Backend in setting.py:\n\n```python\nDRF_AUTH_SERVICE = {\n    'BACKENDS': {\n        'REGISTER_BACKENDS': ['my_application.backends.CustomRegisterBackend']\n    }\n}\n```\n \n### Create a new SMS backend :envelope:\n\nAt the moment we have only **TwilioBackend** which can be easily change with\n\n```python\nfrom drf_auth_service.common.sms_backends import TwilioBackend\n\nclass CustomPhoneProvider(TwilioBackend):\n\n    def send(self, to_phone, message, from_phone=None):\n        response = requests.post('http://anothersmsprovider.com/send', data={\n            to_phone_number=f\"+{to_phone}\",\n            from_phone_number=from_phone,\n            body=message\n        })\n    \n        if not response.is_ok:\n            raise ValidationError(dict(details=response.json()))\n\n```\n\nChange SMS Backend in setting.py:\n\n```python\nDRF_AUTH_SERVICE = {\n    'BACKENDS': {\n        'SMS_BACKEND': ['my_application.backends.CustomPhoneProvider']\n    }\n}\n```\n\n### Change the Email Backend :mailbox_closed:\n\nWe have 3 options for email backends **(MailchimpBackend/SendInBlueBackend/HtmlTemplateBackend)** \nwith default **HtmlTemplateBackend**, in order to change or add new backend just add to sso settings\n\n```python\nDRF_AUTH_SERVICE = {\n    'BACKENDS': {\n        'EMAIL_BACKEND': ['drf_auth_service.common.email_backends.SendInBlueBackend']\n    }\n}\n```\n\n### Change Views/Serializers/Permissions\n\nEvery view/serializer/permission can be change from package settings and a good example how to do this:\n\n1. Create new serializer\n\n```python\nclass RegisterSerializer(serializers.Serializer):\n    phone_number = serializers.CharField(required=True)\n    username = serializers.EmailField(required=True)\n    register_type = serializers.HiddenField(default=RegisterType.EMAIL)\n\n    def validate(self, attrs):\n        user_exists = get_user_model().objects.filter(\n            username=attrs['username'], \n            service=self.context['request'].service\n        ).exists()\n\n        if user_exists:\n            raise ValidationError({'username': f\"User '{attrs['username']}' already exists\"})\n\n        return attrs\n``` \n\n2. Change Serializer in setting.py:\n\n```python\nDRF_AUTH_SERVICE = {\n    'SERIALIZERS': {\n        'REGISTER_SERIALIZER': \"apps.authentication.serializers.RegisterSerializer\"\n    }\n}\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ebs-integrator.com/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-auth-service",
    "package_url": "https://pypi.org/project/drf-auth-service/",
    "platform": "",
    "project_url": "https://pypi.org/project/drf-auth-service/",
    "project_urls": {
      "Homepage": "https://ebs-integrator.com/"
    },
    "release_url": "https://pypi.org/project/drf-auth-service/1.36/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extension of django rest framework, providing an authorization service",
    "version": "1.36",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12719373,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87df7c3c585e38582ade9d23235a8ad7122a90d243168f4cc96e52103f0256f9",
        "md5": "ba344f2c2bd3f0c56767406af0427414",
        "sha256": "3cce26d880df9217fd18517097dbd30ccd4775e814160ba2b0ba40aa33d23552"
      },
      "downloads": -1,
      "filename": "drf-auth-service-1.36.tar.gz",
      "has_sig": false,
      "md5_digest": "ba344f2c2bd3f0c56767406af0427414",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29335,
      "upload_time": "2021-02-12T12:54:16",
      "upload_time_iso_8601": "2021-02-12T12:54:16.767919Z",
      "url": "https://files.pythonhosted.org/packages/87/df/7c3c585e38582ade9d23235a8ad7122a90d243168f4cc96e52103f0256f9/drf-auth-service-1.36.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}