{
  "info": {
    "author": "Enkonix",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.11",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Communications",
      "Topic :: Database"
    ],
    "description": "Django CQRS\n===========\n![pyversions](https://img.shields.io/pypi/pyversions/django-cqrs.svg)  [![PyPi Status](https://img.shields.io/pypi/v/django-cqrs.svg)](https://pypi.org/project/django-cqrs/) [![codecov](https://codecov.io/gh/cloudblue/django-cqrs/branch/master/graph/badge.svg)](https://codecov.io/gh/cloudblue/django-cqrs) [![Build Status](https://travis-ci.org/cloudblue/django-cqrs.svg?branch=master)](https://travis-ci.org/cloudblue/django-cqrs) [![PyPI status](https://img.shields.io/pypi/status/django-cqrs.svg)](https://pypi.python.org/pypi/django-cqrs/) [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=django-cqrs&metric=alert_status)](https://sonarcloud.io/dashboard?id=django-cqrs)\n\n`django-cqrs` is an Django application, that implements CQRS data synchronisation between several Django microservices.\n\n\nCQRS\n----\nIn Connect we have a rather complex Domain Model. There are many microservices, that are [decomposed by subdomain](https://microservices.io/patterns/decomposition/decompose-by-subdomain.html) and which follow [database-per-service](https://microservices.io/patterns/data/database-per-service.html) pattern. These microservices have rich and consistent APIs. They are deployed in cloud k8s cluster and scale automatically under load. Many of these services aggregate data from other ones and usually [API Composition](https://microservices.io/patterns/data/api-composition.html) is totally enough. But, some services are working too slowly with API JOINS, so another pattern needs to be applied.\n\nThe pattern, that solves this issue is called [CQRS - Command Query Responsibility Segregation](https://microservices.io/patterns/data/cqrs.html). Core idea behind this pattern is that view databases (replicas) are defined for efficient querying and DB joins. Applications keep their replicas up to data by subscribing to [Domain events](https://microservices.io/patterns/data/domain-event.html) published by the service that owns the data. Data is [eventually consistent](https://en.wikipedia.org/wiki/Eventual_consistency) and that's okay for non-critical business transactions.\n\n\nExamples\n========\n\nIntegration\n-----------\n* Setup `RabbitMQ`\n* Install `django-cqrs`\n* Apply changes to master service, according to RabbitMQ settings\n```python\n# models.py\n\nfrom django.db import models\nfrom dj_cqrs.mixins import MasterMixin, RawMasterMixin\n\n\nclass Account(MasterMixin, models.Model):\n    CQRS_ID = 'account'\n    CQRS_PRODUCE = True  # set this to False to prevent sending instances to Transport\n\n\nclass Author(MasterMixin, models.Model):\n    CQRS_ID = 'author'\n    CQRS_SERIALIZER = 'app.api.AuthorSerializer'\n\n\n# For cases of Diamond Multiinheritance the following approach could be used:\nfrom mptt.models import MPTTModel\nfrom dj_cqrs.metas import MasterMeta\n\nclass ComplexInheritanceModel(MPTTModel, RawMasterMixin):\n    pass\n\nMasterMeta.register(ComplexInheritanceModel)\n```\n\n```python\n# settings.py\n\nCQRS = {\n    'transport': 'dj_cqrs.transport.rabbit_mq.RabbitMQTransport',\n    'host': RABBITMQ_HOST,\n    'port': RABBITMQ_PORT,\n    'user': RABBITMQ_USERNAME,\n    'password': RABBITMQ_PASSWORD,\n}\n\n```\n* Apply changes to replica service, according to RabbitMQ settings\n```python\nfrom django.db import models\nfrom dj_cqrs.mixins import ReplicaMixin\n\n\nclass AccountRef(ReplicaMixin, models.Model):\n    CQRS_ID = 'account'\n\n    id = models.IntegerField(primary_key=True)\n\n\nclass AuthorRef(ReplicaMixin, models.Model):\n    CQRS_ID = 'author'\n    CQRS_CUSTOM_SERIALIZATION = True\n\n    @classmethod\n    def cqrs_create(cls, sync, **mapped_data):\n        # Override here\n        pass\n\n    def cqrs_update(self, sync, **mapped_data):\n        # Override here\n        pass\n```\n\n```python\n# settings.py\n\nCQRS = {\n    'transport': 'dj_cqrs.transport.RabbitMQTransport',\n    'queue': 'account_replica',\n    'host': RABBITMQ_HOST,\n    'port': RABBITMQ_PORT,\n    'user': RABBITMQ_USERNAME,\n    'password': RABBITMQ_PASSWORD,\n}\n```\n* Apply migrations on both services\n* Run consumer worker on replica service. Management command: `python manage.py cqrs_consume -w 2`\n\nNotes\n-----\n\nWhen there are master models with related entities in CQRS_SERIALIZER, it's important to have operations within atomic transactions.\nCQRS sync will happen on transaction commit. Please, avoid saving master model within transaction more then once to reduce syncing and potential racing on replica side.\nUpdating of related model won't trigger CQRS automatic synchronization for master model. This needs to be done manually.\n\nExample:\n```python\nwith transaction.atomic():\n    publisher = models.Publisher.objects.create(id=1, name='publisher')\n    author = models.Author.objects.create(id=1, name='author', publisher=publisher)\n\nwith transaction.atomic():\n    publisher.name = 'new'\n    publisher.save()\n\n    author.save()\n```\n\nWhen only needed instances need to be synchronized, there is a method `is_sync_instance` to set filtering rule. \nIt's important to understand, that CQRS counting works even without syncing and rule is applied every time model is updated.\n\nExample:\n```python\n\nclass FilteredSimplestModel(MasterMixin, models.Model):\n    CQRS_ID = 'filter'\n\n    name = models.CharField(max_length=200)\n\n    def is_sync_instance(self):\n        return len(str(self.name)) > 2\n```\n\n\nUtilities\n---------\nBulk synchronizer without transport (usage example: it may be used for initial configuration). May be used at planned downtime.\n* On master service: `python manage.py cqrs_bulk_dump --cqrs-id=author` -> `author.dump`\n* On replica service: `python manage.py cqrs_bulk_load -i=author.dump`\n\nFilter synchronizer over transport (usage example: sync some specific records to a given replica). Can be used dynamically.\n* To sync all replicas: `python manage.py cqrs_sync --cqrs-id=author -f={\"id__in\": [1, 2]}`\n* To sync all instances only with one replica: `python manage.py cqrs_sync --cqrs-id=author -f={} -q=replica`\n\nSet of diff synchronization tools ()\n* To get diff and synchronize master service with replica service in K8S: \n```bash\nkubectl exec -i MASTER_CONTAINER -- python manage.py cqrs_diff_master --cqrs-id=author | \n    kubectl exec -i REPLICA_CONTAINER -- python manage.py cqrs_diff_replica |\n    kubectl exec -i MASTER_CONTAINER -- python manage.py cqrs_diff_sync\n```\n\nDevelopment\n===========\n\n1. Python 3.5+\n0. Install dependencies `requirements/dev.txt`\n\nTesting\n=======\n\nUnit testing\n------\n1. Python 3.5+\n0. Install dependencies `requirements/test.txt`\n0. `export PYTHONPATH=/your/path/to/django-cqrs/`\n\nCheck code style: `flake8`\nRun tests: `pytest`\n\nTests reports are generated in `tests/reports`. \n* `out.xml` - JUnit test results\n* `coverage.xml` - Coverage xml results\n\nTo generate HTML coverage reports use:\n`--cov-report html:tests/reports/cov_html`\n\n\nIntegrational testing\n------\n1. docker-compose\n0. `cd integration_tests`\n0. `docker-compose run master`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://enkonix.com",
    "keywords": "django cqrs sql mixin amqp",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cqrs-enkonix",
    "package_url": "https://pypi.org/project/django-cqrs-enkonix/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cqrs-enkonix/",
    "project_urls": {
      "Homepage": "https://enkonix.com"
    },
    "release_url": "https://pypi.org/project/django-cqrs-enkonix/1.3.1/",
    "requires_dist": [
      "Django (>=1.11.20)",
      "pika",
      "ujson",
      "setuptools",
      "wheel"
    ],
    "requires_python": ">=3.6",
    "summary": "Django CQRS data synchronisation",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7806675,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3e6060e8238e114ace664bde60bf50b4addd18e7eac83dc2d80d47890d0d052",
        "md5": "f399661ec5d5c5b0edcfe08067eb7be2",
        "sha256": "4a1e52e33b897eb298a10a2c90362df6166237514354a38b8003762733c627e9"
      },
      "downloads": -1,
      "filename": "django_cqrs_enkonix-1.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f399661ec5d5c5b0edcfe08067eb7be2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 64043,
      "upload_time": "2020-07-28T10:52:33",
      "upload_time_iso_8601": "2020-07-28T10:52:33.918895Z",
      "url": "https://files.pythonhosted.org/packages/d3/e6/060e8238e114ace664bde60bf50b4addd18e7eac83dc2d80d47890d0d052/django_cqrs_enkonix-1.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "496a89573cc3e64ecbb3be0b31bd6b80ce35a84a04d1ba0409d6a2204d182bf8",
        "md5": "4b4fdd1ca735fc917ff6b9fd5d7cb230",
        "sha256": "a77c13c0f2c237f8ba27f42a94094bd116b8e0b3862e0e543545a786562a7a6e"
      },
      "downloads": -1,
      "filename": "django-cqrs-enkonix-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4b4fdd1ca735fc917ff6b9fd5d7cb230",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 41860,
      "upload_time": "2020-07-28T10:52:41",
      "upload_time_iso_8601": "2020-07-28T10:52:41.953803Z",
      "url": "https://files.pythonhosted.org/packages/49/6a/89573cc3e64ecbb3be0b31bd6b80ce35a84a04d1ba0409d6a2204d182bf8/django-cqrs-enkonix-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}