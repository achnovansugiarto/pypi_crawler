{
  "info": {
    "author": "Muhammad N. Fawi",
    "author_email": "m.noor.fawi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# lshashing\n\n[![](https://img.shields.io/badge/docs-latest-blue.svg)](https://mnoorfawi.github.io/lshashing/) \n[![Build Status](https://travis-ci.com/MNoorFawi/lshashing.svg?branch=master)](https://travis-ci.com/MNoorFawi/lshashing)\n\npython library to perform Locality-Sensitive Hashing to search for nearest neighbors in high dimensional data.\n\nFor now it only supports **random projections** but future versions will support more methods and techniques.\n\n### Implementation\n\n```bash\npip install lshashing\n```\nMake sure the data and query points are numpy arrays!.\n\n```python\nfrom lshashing import LSHRandom\nimport numpy as np\n\nsample_data = np.random.randint(size = (20, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1,20), low = 0, high = 100)\n\nlshashing = LSHRandom(sample_data, hash_len = 4, num_tables = 2)\n\nprint(lshashing.tables[0].hash_table)\n#{225: [0, 12],\n# 121: [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 15, 16, 19],\n# 81: [6, 11],\n# 196: [14],\n# 100: [17, 18]}\n\nprint(lshashing.knn_search(sample_data, point[0], k = 4, buckets = 3, radius = 2))\n#[Neighbor(index=7, distance=159.8217757378512, value=[[78 35 94]...]),\n# Neighbor(index=13, distance=174.1551032843999, value=[[86 48 32]...]),\n# Neighbor(index=19, distance=174.5737666432159, value=[[53 52 22]...]),\n# Neighbor(index=16, distance=180.87564789103038, value=[[81 91 70]...])]\n```\n\nlshashing also supports **parallelism** using **joblib** library.\n\n```python\nsample_data = np.random.randint(size = (20, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1, 20), low = 0, high = 100)\n\nlsh_random_parallel = LSHRandom(sample_data, 4, parallel = True)\nlsh_random_parallel.knn_search(sample_data, point[0], 4, 3, parallel = True)\n# [Neighbor(index=7, distance=137.0729732660673, value=[[76 16 41]...]),\n#  Neighbor(index=1, distance=163.25133996387288, value=[[81 55 41]...]),\n#  Neighbor(index=4, distance=172.41519654601214, value=[[33 21  0]...]),\n#  Neighbor(index=8, distance=183.0327839486686, value=[[70 27 85]...])]\n```\n\n### Adding new entries\nSimply you can add new entries to the hash tables using the **add_new_entry** method.\n\n```python\nfrom lshashing import LSHRandom\nimport numpy as np\n\nsample_data = np.random.randint(size = (15, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1, 20), low = 0, high = 100)\n\nlshashing = LSHRandom(sample_data, hash_len = 3, num_tables = 2)\nprint(lshashing.tables[0].hash_table)\n# {4: [0, 1, 3, 6], 49: [2, 4, 8, 11, 14], 36: [5, 9, 12], 9: [7, 10, 13]}\n\nprint(lshashing.n_rows)\n# 15\n\nlshashing.add_new_entry(point)\n\nprint(lshashing.n_rows)\n# 16\n\nprint(lshashing.tables[0].hash_table)\n# {4: [0, 1, 3, 6, 15], 49: [2, 4, 8, 11, 14], 36: [5, 9, 12], 9: [7, 10, 13]}\n```\n\nLocality-sensitive hashing is an **approximate nearest neighbors search technique** which means that the resulted neighbors may not always be the exact nearest neighbor to the query point.\nTo enhance and ensure better extactness, hash length used, number of hash tables and the buckets to search need to be tweaked. \n\nI also made some comparison between **lshashing**, linear method to get KNNs and **scikit-learn's BallTree and KDTree** and here are the results.\n\n```bash\npython examples/lshashing_compare.py\n\n# lshashing module\n# Sample data shape:  (20000, 15000)\n\n# query point\n# (15000,)\n\n# Start comparison in searching for 4 NNs\n# ##### search knn traditionaly\n# time to perform:  143.73057675361633\n\n# ##### Search with lshashing package:\n# time to construct lsh:  1.6940016746520996\n# time to perform:  4.987746477127075\n\n# ##### Search with lshashing package in parallel:\n# time to construct lsh:  8.06048321723938\n# time to perform:  4.106183767318726\n\n# ##### Now with Scikit Learn\n# time to construct ball_tree:  55.20065641403198\n# time to perform:  0.43003249168395996\n\n# ##### With sklearn KDTree\n# time to construct the tree:  82.20907664299011\n# time to perform:  0.49397754669189453\n\n# ##### basic scikit-learn\n# time to fit dataset:  90.42933940887451\n# time to perform:  0.5779902935028076\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MNoorFawi/lshashing",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lshashing",
    "package_url": "https://pypi.org/project/lshashing/",
    "platform": "",
    "project_url": "https://pypi.org/project/lshashing/",
    "project_urls": {
      "Homepage": "https://github.com/MNoorFawi/lshashing"
    },
    "release_url": "https://pypi.org/project/lshashing/1.0.1/",
    "requires_dist": [
      "numpy",
      "joblib"
    ],
    "requires_python": "",
    "summary": "Nearest neighbors search using locality-sensitive hashing",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11744829,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8266887e1a353635f1d14d3254a62c5b28a9dd9ff1f3d59c253b68a375c25510",
        "md5": "552f288d4282049aaefae61b7328905e",
        "sha256": "b1b3171bbae442a0bc2a22198fb7e9667f95366457680088614d9b543fd0ad87"
      },
      "downloads": -1,
      "filename": "lshashing-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "552f288d4282049aaefae61b7328905e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7638,
      "upload_time": "2020-05-17T09:34:54",
      "upload_time_iso_8601": "2020-05-17T09:34:54.255629Z",
      "url": "https://files.pythonhosted.org/packages/82/66/887e1a353635f1d14d3254a62c5b28a9dd9ff1f3d59c253b68a375c25510/lshashing-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a75d332a386f2f229dd46cd0ededd1121497832293dbcf7eddb518bd4c03208e",
        "md5": "10cb8b413dabdb9552072b03195a1fbe",
        "sha256": "b9c646d19a72fc469f9e1673b782ffd7af2c1fd973769dd2c6ed1e624240cbdb"
      },
      "downloads": -1,
      "filename": "lshashing-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "10cb8b413dabdb9552072b03195a1fbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6878,
      "upload_time": "2020-05-17T09:34:55",
      "upload_time_iso_8601": "2020-05-17T09:34:55.460317Z",
      "url": "https://files.pythonhosted.org/packages/a7/5d/332a386f2f229dd46cd0ededd1121497832293dbcf7eddb518bd4c03208e/lshashing-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}