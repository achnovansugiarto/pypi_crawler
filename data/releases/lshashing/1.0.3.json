{
  "info": {
    "author": "Muhammad N. Fawi",
    "author_email": "m.noor.fawi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# lshashing\n\n[![](https://img.shields.io/badge/docs-latest-blue.svg)](https://mnoorfawi.github.io/lshashing/) \n[![Build Status](https://travis-ci.com/MNoorFawi/lshashing.svg?branch=master)](https://travis-ci.com/MNoorFawi/lshashing)\n[![Downloads](https://static.pepy.tech/personalized-badge/lshashing?period=total&units=international_system&left_color=grey&right_color=yellowgreen&left_text=Downloads)](https://pepy.tech/project/lshashing)\n\npython library to perform Locality-Sensitive Hashing to search for nearest neighbors in high dimensional data.\n\nFor now it only supports **random projections** but future versions will support more methods and techniques.\n\n### Implementation\n\n```bash\npip install lshashing\n```\nMake sure the data and query points are numpy arrays!.\n\n```python\nfrom lshashing import LSHRandom\nimport numpy as np\n\nsample_data = np.random.randint(size = (20, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1,20), low = 0, high = 100)\n\nlshashing = LSHRandom(sample_data, hash_len = 4, num_tables = 2)\n\nprint(lshashing.tables[0].hash_table)\n#{225: [0, 12],\n# 121: [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 15, 16, 19],\n# 81: [6, 11],\n# 196: [14],\n# 100: [17, 18]}\n\nprint(lshashing.knn_search(sample_data, point[0], k = 4, buckets = 3, radius = 2))\n#[Neighbor(index=7, distance=159.8217757378512, value=[[78 35 94]...]),\n# Neighbor(index=13, distance=174.1551032843999, value=[[86 48 32]...]),\n# Neighbor(index=19, distance=174.5737666432159, value=[[53 52 22]...]),\n# Neighbor(index=16, distance=180.87564789103038, value=[[81 91 70]...])]\n```\n\nlshashing also supports **parallelism** using **joblib** library.\n\n```python\nsample_data = np.random.randint(size = (20, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1, 20), low = 0, high = 100)\n\nlsh_random_parallel = LSHRandom(sample_data, 4, parallel = True)\nlsh_random_parallel.knn_search(sample_data, point[0], 4, 3, parallel = True)\n# [Neighbor(index=7, distance=137.0729732660673, value=[[76 16 41]...]),\n#  Neighbor(index=1, distance=163.25133996387288, value=[[81 55 41]...]),\n#  Neighbor(index=4, distance=172.41519654601214, value=[[33 21  0]...]),\n#  Neighbor(index=8, distance=183.0327839486686, value=[[70 27 85]...])]\n```\n\n### Adding new entries\nSimply you can add new entries to the hash tables using the **add_new_entry** method.\n\n```python\nfrom lshashing import LSHRandom\nimport numpy as np\n\nsample_data = np.random.randint(size = (15, 20), low = 0, high = 100)\npoint = np.random.randint(size = (1, 20), low = 0, high = 100)\n\nlshashing = LSHRandom(sample_data, hash_len = 3, num_tables = 2)\nprint(lshashing.tables[0].hash_table)\n# {4: [0, 1, 3, 6], 49: [2, 4, 8, 11, 14], 36: [5, 9, 12], 9: [7, 10, 13]}\n\nprint(lshashing.n_rows)\n# 15\n\nlshashing.add_new_entry(point)\n\nprint(lshashing.n_rows)\n# 16\n\nprint(lshashing.tables[0].hash_table)\n# {4: [0, 1, 3, 6, 15], 49: [2, 4, 8, 11, 14], 36: [5, 9, 12], 9: [7, 10, 13]}\n```\n\nLocality-sensitive hashing is an **approximate nearest neighbors search technique** which means that the resulted neighbors may not always be the exact nearest neighbor to the query point.\nTo enhance and ensure better extactness, hash length used, number of hash tables and the buckets to search need to be tweaked. \n\nI also made some comparison between **lshashing**, linear method to get KNNs and **scikit-learn's BallTree and KDTree** and here are the results.\n\n```bash\npython examples/lshashing_compare.py\n\n# lshashing module\n# Sample data shape:  (20000, 15000)\n\n# query point\n# (15000,)\n\n# Start comparison in searching for 4 NNs\n# ##### search knn traditionaly\n# time to perform:  143.73057675361633\n\n# ##### Search with lshashing package:\n# time to construct lsh:  1.6940016746520996\n# time to perform:  4.987746477127075\n\n# ##### Search with lshashing package in parallel:\n# time to construct lsh:  8.06048321723938\n# time to perform:  4.106183767318726\n\n# ##### Now with Scikit Learn\n# time to construct ball_tree:  55.20065641403198\n# time to perform:  0.43003249168395996\n\n# ##### With sklearn KDTree\n# time to construct the tree:  82.20907664299011\n# time to perform:  0.49397754669189453\n\n# ##### basic scikit-learn\n# time to fit dataset:  0.5779902935028076\n# time to perform:  90.42933940887451\n```\n\n##### LSHashing performs a little bit slower than sklearn tree implementations. However, the main advantage comes when we need to add new entry or remove from our data, i.e. updating the table. In sklearn trees this can be hard as we may need to reconstruct the trees all over again. It is clearly obvious that it takes much more time to construct the trees than creating the buckets with LSHashing. LSHashing also allows addition of new data easily and in no time.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MNoorFawi/lshashing",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lshashing",
    "package_url": "https://pypi.org/project/lshashing/",
    "platform": "",
    "project_url": "https://pypi.org/project/lshashing/",
    "project_urls": {
      "Homepage": "https://github.com/MNoorFawi/lshashing"
    },
    "release_url": "https://pypi.org/project/lshashing/1.0.3/",
    "requires_dist": [
      "joblib",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Nearest neighbors search using locality-sensitive hashing",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11744829,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0c0e52b58af81f7a239530161a1f23f86e36357d8929e318075d228f514ce64",
        "md5": "535d2b3bf6d947a6843d545e97d5db00",
        "sha256": "f3d506e1164b04d53b0bb919160b33871fb76ec8374b2bea65a4dfbd9b245965"
      },
      "downloads": -1,
      "filename": "lshashing-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "535d2b3bf6d947a6843d545e97d5db00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7957,
      "upload_time": "2021-09-12T18:08:01",
      "upload_time_iso_8601": "2021-09-12T18:08:01.967493Z",
      "url": "https://files.pythonhosted.org/packages/c0/c0/e52b58af81f7a239530161a1f23f86e36357d8929e318075d228f514ce64/lshashing-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1889900a0e46964a69ebefb0dd6337bb80447462d0ddaf59260e59fc71dbcfb",
        "md5": "23f81f94c1e019bca35ca482abe6d64a",
        "sha256": "1b1590dca506c2a5d659121895bc7e7daaca844728aedb1ab06178e0742f2e50"
      },
      "downloads": -1,
      "filename": "lshashing-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "23f81f94c1e019bca35ca482abe6d64a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9737,
      "upload_time": "2021-09-12T18:08:03",
      "upload_time_iso_8601": "2021-09-12T18:08:03.213079Z",
      "url": "https://files.pythonhosted.org/packages/a1/88/9900a0e46964a69ebefb0dd6337bb80447462d0ddaf59260e59fc71dbcfb/lshashing-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}