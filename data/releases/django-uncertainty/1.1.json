{
  "info": {
    "author": "Agustin Barto",
    "author_email": "abarto@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "django\\_uncertainty\n===================\n\nIntroduction\n------------\n\n``django_uncertainty`` is a `Django <https://www.djangoproject.com/>`_\nmiddleware that allows the developer to introduce controlled uncertainty\ninto his or her site. The main purpose is providing a tool to reproduce\nless-than-ideal conditions in a local development environment to\nevaluate external actors might react when a Django site starts\nmissbehaving.\n\nInstallation\n------------\n\nYou can get ``django_uncertainty`` using pip:\n\n$ pip install django\\_uncertainty\n\nIf you want to install it from source, grab the git repository from\nGitHub and run setup.py:\n\n::\n\n    $ git clone git://github.com/abarto/django_uncertainty.git\n    $ cd django_uncertainty\n    $ python setup.py install\n\nOnce the package has been installed, you need to add the middleware to\nyour Django settings file:\n\n.. code:: python\n\n    MIDDLEWARE = [\n        'django.middleware.security.SecurityMiddleware',\n        ...\n        'uncertainty.UncertaintyMiddleware'\n    ]\n\nUsage\n-----\n\nThe middleware behaviour is controlled by the ``DJANGO_UNCERTAINTY``\nDjango setting. For example:\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(\n        u.path_is('^/api'), u.random_choice([\n            (u.delay(u.default(), 5), 0.3), (u.server_error(), 0.2)]))\n\nThis tells the middleware that if the request path starts with \"/api\",\n30% of the time the request is going to be delayed by 5 seconds, 20% of\nthe time the site is going to respond with a status 500 (Server Error),\nand the rest of the time the site is going to function normally.\n\nThe next section describes all the available behaviours and conditions.\n\nBehaviours\n----------\n\nAll behaviours are implemented as sub-classes of the ``Behaviour``\nclass:\n\n.. code:: python\n\n    class Behaviour:\n        \"\"\"Base of all behaviours. It is also the default implementation which just just returns the\n        result of calling get_response.\"\"\"\n        def __call__(self, get_response, request):\n            \"\"\"Returns the result of calling get_response (as given by the UncertaintyMiddleware\n            middleware with request as argument. It returns the same response that would have been\n            created by the Django stack without the introduction of UncertaintyMiddleware.\n            :param get_response: The get_response method provided by the Django stack\n            :param request: The request that triggered the middleware\n            :return: The result of calling get_response with the request parameter\n            \"\"\"\n            response = get_response(request)\n            return response\n\nBehaviours work like functions that take the same parameters given the\nthe Django middleware.\n\ndefault\n~~~~~~~\n\nAs the name implies, this is the default behaviour. It just makes the\nrequests continue as usual through the Django stack. Using ``default``\nis the same as omitting the ``DJANGO_UNCERTAINTY`` setting altogether.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.default()\n\nhtml\n~~~~\n\nOverrides the site's response with an arbitrary HTTP response. Without\nany arguments it returns a response with status code 200 (Ok). ``html``\ntakes the same arguments as Django's\n`HttpResponse <https://docs.djangoproject.com/en/1.10/ref/request-response/#django.http.HttpResponse>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.html('<html><head></head><body><h1>Hello World!</h1></body></html>')\n\nok\n~~\n\nAn alias for ``html``.\n\nbad\\_request\n~~~~~~~~~~~~\n\nOverrides the site's response with an HTTP response with status code 400\n(Bad Request). ``bad_request`` takes the same arguments as Django's\n`HttpResponseBadRequest <https://docs.djangoproject.com/en/1.10/ref/request-response/#django.http.HttpResponseBadRequest>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.bad_request('<html><head></head><body>Oops!</body></html>')\n\nforbidden\n~~~~~~~~~\n\nOverrides the site's response with an HTTP response with status code 403\n(Forbidden). ``forbidden`` takes the same arguments as Django's\n`HttpResponseForbidden <https://docs.djangoproject.com/en/1.10/ref/request-response/#django.http.HttpResponseForbidden>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.forbidden('<html><head></head><body>NOPE</body></html>')\n\nnot\\_allowed\n~~~~~~~~~~~~\n\nOverrides the site's response with an HTTP response with status code 405\n(Not Allowed). ``not_allowed`` takes the same arguments as Django's\n`HttpResponseNotAllowed <https://docs.djangoproject.com/en/1.10/ref/request-response/#django.http.HttpResponseNotAllowed>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.not_allowed(permitted_methods=['PUT'], content='<html><head></head><body>NOPE</body></html>')\n\nserver\\_error\n~~~~~~~~~~~~~\n\nOverrides the site's response with an HTTP response with status code 500\n(Internal Server Error). ``server_error`` takes the same arguments as\nDjango's\n`HttpResponseServerError <https://docs.djangoproject.com/en/1.10/ref/request-response/#django.http.HttpResponseServerError>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.server_error('<html><head></head><body>BOOM</body></html>')\n\nstatus\n~~~~~~\n\nOverrides the site's response with an HTTP response with a given status\ncode.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.status(201, content='<html><head></head><body><h1>Created</h1></body></html>')\n\njson\n~~~~\n\nOverrides the site's response with an arbitrary HTTP response with\ncontent type ``application/json``. Without any arguments it returns a\nresponse with status code 200 (Ok). ``json`` takes the same arguments as\nDjango's\n`JsonResponse <https://docs.djangoproject.com/en/1.10/ref/request-response/#jsonresponse-objects>`_.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.json({'foo': 1, 'bar': True})\n\ndelay\n~~~~~\n\nIntroduces a delay after invoking another behaviour. For example, this\nspecifies a delay of half a second into the actual site responses:\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.delay(u.default(), 0.5)\n\nYou can replace the first argument with any other valid behaviour.\n\ndelay\\_request\n~~~~~~~~~~~~~~\n\nIt is similar to ``delay``, but the delay is introduced *before* the\nspecified behaviour is invoked.\n\nrandom\\_choice\n~~~~~~~~~~~~~~\n\nThis is the work horse of ``django_uncertainty``. ``random_choice``\nallows you to specify different behaviours that are going to be chosen\nat random (following the give proportions) when a request is received.\nIt takes a list of behaviours or tuples of behaviours and proportions,\n\nFor example, let's say we want 30% of the request to be responded with\nan Internal Server Error response, 20% with a Bad Request response, and\nthe rest with the actual response but with a 1 second delay. This can be\nspecified as follows>\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.random_choice([(u.server_error(), 0.3), (u.bad_request(), 0.2), u.delay(u.default(), 1)])\n\nIf proportions are specified, the total sum of them must be less than 1.\nIf no proportions are specified, the behaviours are chosen with an even\nchance between them:\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.random_choice([u.server_error(), u.default()])\n\nThis specifies that approximetly half the request are going to be\nresponded with an Internal Server Error, and half will work normally.\n\nconditional\n~~~~~~~~~~~\n\nIt allows you to specify that a certain behaviour should be invoked only\nif a certain condition is met. If the condition is not met, the\nalternative behvaiour (which is ``default`` by default) is executed.\n\n``python import uncertainty as u DJANGO_UNCERTAINTY = u.conditional(u.is_post, u.server_error())``\n\nThe specification above states that if the request uses the POST method,\nthe site should respond with an Internal Server Error. If you want to\nspecify an alternative behaviour other than the default, use the\n``alternative_behaviour`` argument:\n\n``python import uncertainty as u DJANGO_UNCERTAINTY = u.conditional(u.is_post, u.server_error(), alternative_behaviour=u.delay(u.default(), 0.3)``\n\nConditions can be combined using boolean operators. For instance,\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.conditional(u.is_authenticated or not u.is_get, u.bad_request())\n\nspecifies that if the request is authenticated or if it uses the GET\nmethod, a Bad Request response should be used.\n\nIn the next section, all the predefined conditions are presented.\n\ncond\n~~~~\n\nAn alias for ``conditional``.\n\nmulti\\_conditional\n~~~~~~~~~~~~~~~~~~\n\n``multi_conditional`` takes a list of condition/behaviour pairs, and\nwhen a request is received, it iterates over the conditions until one is\nmet, and the corresponding behaviour is invoked. If no condition is met,\nthe default behaviour is invoked.\n\n``python import uncertainty as u DJANGO_UNCERTAINTY = u.multi_conditional([(u.is_get, u.delay(u.default(), 0.5), (u.is_post, u.server_error())])``\n\nThe specification above states that if the request uses the GET method,\nit should be delayed by half a second, if it uses POST, it should\nrespond with an Internal Server Error, and if neither of those\nconditions are met, the request should go through as usual.\n\nThe default behaviour to be used when no conditions are met can be\nspecified with the ``default_behaviour`` argument:\n\n``python import uncertainty as u DJANGO_UNCERTAINTY = u.multi_conditional([(u.is_get, u.delay(u.default(), 0.5), (u.is_post, u.server_error())], default_behaviour=u.not_found())``\n\nmulti\\_cond\n~~~~~~~~~~~\n\nAn alias for ``cond``.\n\ncase\n~~~~\n\nAn alias for ``case``.\n\nCustom behaviours\n~~~~~~~~~~~~~~~~~\n\nWe've done our best to implement behaviours that make sense in the\ncontext of introducing uncertainty into a Django site, however, if you\nneed to implement your own behaviours, all you need to do is derive the\n``Behaviour`` class. Let's say you want a Behaviour that adds a header\nto the response generated by another behaviour. Here's one possible\nimplementation of such behaviour:\n\n.. code:: python\n\n    class AddHeaderBehaviour(Behaviour):\n        def __init__(self, behaviour, header_name, header_value):\n            self._behaviour = behaviour\n            self._header_name = header_name\n            self._header_value = header_value\n\n        def __call__(self, get_response, request):\n            response = self._behaviour(get_response, request)\n            response[self._header_name] = self._header_value\n\n            return response\n\nIf you think that there's a use case that we haven't covered that might\nbe useful for other users, feel free to create an issue on\n`GitHub <https://github.com/abarto/django_uncertainty>`__.\n\nConditions\n----------\n\nConditions are subclasses of the ``Predicate`` class:\n\n.. code:: python\n\n    class Predicate:\n        \"\"\"Represents a condition that a Django request must meet. It is used in conjunction with\n        ConditionalBehaviour to control if behaviours are invoked depending on the result of the\n        Predicate invocation. Multiple predicates can be combined with or and and.\n        \"\"\"\n        def __call__(self, get_response, request):\n            \"\"\"Returns True for all calls.\n            :param get_response: The get_response method provided by the Django stack\n            :param request: The request that triggered the middleware\n            :return: True for all calls.\n            \"\"\"\n            return True\n\nWhenever a conditional behaviour is used, the predicate is invoked with\nthe same parameters that would be given the the behaviour.\n\nis\\_method\n~~~~~~~~~~\n\nThe condition is met if the request uses the specified method.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_method('PATCH'), u.not_allowed())\n\nis\\_get\n~~~~~~~\n\nThe condition is met if the request uses the GET HTTP method.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_get, u.not_allowed())\n\nis\\_delete\n~~~~~~~~~~\n\nThe condition is met if the request uses the DELETE HTTP method.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_delete, u.not_allowed())\n\nis\\_post\n~~~~~~~~\n\nThe condition is met if the request uses the POST HTTP method.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_post, u.not_allowed())\n\nis\\_put\n~~~~~~~\n\nThe condition is met if the request uses the PUT HTTP method.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_put, u.not_allowed())\n\nhas\\_parameter\n~~~~~~~~~~~~~~\n\nThe condition is met if the request has the given parameter.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.has_parameter('q'), u.server_error())\n\nhas\\_param\n~~~~~~~~~~\n\nAn alias for ``has_parameter``\n\npath\\_is\n~~~~~~~~\n\nThe condition is met if the request path matches the given regular\nexpression.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.path_is('^/api'), u.delay(u.default(), 0.2))\n\nis\\_authenticated\n~~~~~~~~~~~~~~~~~\n\nThe condition is met if the user has authenticated itself.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.is_authenticated, u.not_found())\n\nuser\\_is\n~~~~~~~~\n\nThe condition is met if the authenticated user has the given username.\n\n.. code:: python\n\n    import uncertainty as u\n    DJANGO_UNCERTAINTY = u.cond(u.user_is('admin', u.forbidden())\n\nCustom conditions\n~~~~~~~~~~~~~~~~~\n\nAs with behaviours, custom conditions are creating deriving the\n``Predicate`` class. Let's say you want a condition that checks the\npresence of a header in the request. Here's one possible implementation\nof such condition:\n\n.. code:: python\n\n    class HasHeaderPredicate(Predicate):\n        def __index__(self, header_name):\n            self._header_name = header_name\n\n        def __call__(self, get_response, request):\n            return self._header_name in request\n\nFeedback\n--------\n\nAll feedback is appreciated, so if you found problems or have ides for\nnew features, just create an issue on\n`GitHub <https://github.com/abarto/django_uncertainty>`_.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/abarto/django_uncertainty",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django_uncertainty",
    "package_url": "https://pypi.org/project/django_uncertainty/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django_uncertainty/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/abarto/django_uncertainty"
    },
    "release_url": "https://pypi.org/project/django_uncertainty/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django middleware to generate predictable errors on sites",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2637563,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c8fb81e595fbda980624e87a8bbe4824cf10ed3c1f41b9432f75bd5388644e5",
        "md5": "a21fa7b39a14cfa4a6cd77031fd6f0ac",
        "sha256": "79b202559f6cbaae2eba9977521b4eaa0d9253994ad964c95a667121f11389b0"
      },
      "downloads": -1,
      "filename": "django_uncertainty-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a21fa7b39a14cfa4a6cd77031fd6f0ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13730,
      "upload_time": "2016-08-06T02:54:58",
      "upload_time_iso_8601": "2016-08-06T02:54:58.819244Z",
      "url": "https://files.pythonhosted.org/packages/0c/8f/b81e595fbda980624e87a8bbe4824cf10ed3c1f41b9432f75bd5388644e5/django_uncertainty-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}