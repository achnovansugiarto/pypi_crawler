{
  "info": {
    "author": "Samuel Burbulla",
    "author_email": "samuel.burbulla@ians.uni-stuttgart.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3"
    ],
    "description": "# The Dune-MMesh Module\n\nIn several physical and environmental processes that concern multiphase flows, biological systems, and geophysical phenomena, important physical processes occur along thin physical interfaces. These processes include effects that may alter the interface's position or topology over time creating a moving interface, which complicates traditional modeling techniques. Moving interface problems thus require advanced numerical tools with specific treatment of the interface and the simultaneous ability to implement complex physical effects.\n\nDune-MMesh is tailored for numerical applications with moving physical interfaces. It is an implementation of the well-developed [Dune](https://www.dune-project.org) grid interface and is well-suited for the numerical discretization of partial differential equations. The package wraps two and three dimensional [CGAL](https://www.cgal.org) triangulations in high-level objects like intersections of grid entities, index and id sets and geometry transformations and exports a predefined set of facets as a separate interface grid.\nIn two dimensions, the arbitrary movement of vertices is enhanced with a re-meshing algorithm that implements non-hierarchical adaptation procedures. Besides the adaptation of the triangulation, Dune-MMesh provides the necessary data structures to adapt discrete functions defined on the bulk grid or the interface. This adaptation approach complements existing grid implementations within the Dune framework that strictly rely on hierarchical adaptation.\nVarious examples in Python have been implemented based on the discretization module [dune-fem](https://www.dune-project.org/sphinx/dune-fem/) that demonstrate the versatile applicability of Dune-MMesh. Due to the ability to handle custom PDEs in their weak from written in Unified Form Language (UFL) and the mesh adaptation capabilities, we believe Dune-MMesh provides a useful tool for solving mixed-dimensional PDEs on moving interfaces that arise from various fields of modelling.\n\nYou find the full documentation of Dune-MMesh at [dune-mmesh.readthedocs.io](https://dune-mmesh.readthedocs.io).\n\n## Installation\n\nNote that Dune-MMesh has a list of dependencies: C++ compiler, CMake, Python3 + pip (+ venv), pkg-config, Boost, OpenMPI, SuiteSparse, Gmsh.\n\nThe easiest starting point is to use Docker with a preconfigured setup.\nUsing the pre-built Docker container you can simply run:\n\n````\ndocker run -it ghcr.io/samuelburbulla/dune-mmesh:release-1.3.2\n````\n\nThis will open an interactive shell in the Dune-MMesh's examples directory.\n\n__On your system__\n\nIn order to install and use Dune-MMesh on your system you have to install the requirements.\n\nOn Linux the requirements could be installed as follows:\n````\napt install g++ cmake python3 python3-pip python3-venv git\napt install pkg-config libboost-dev libopenmpi-dev openmpi-bin libsuitesparse-dev gmsh git-lfs\n````\n\nOn MacOS, you can install the required dependencies with Xcode Command Line Tools and Homebrew:\n````\nxcode-select --install\nbrew install pkg-config boost openmpi suite-sparse gmsh git-lfs\n````\n\nWe strongly recommend using a virtual environment:\n````\npython3 -m venv dune-env\nsource dune-env/bin/activate\n````\n\nInstall the Dune-MMesh package using pip:\n````\npip install dune-mmesh\n````\nNote that this takes some time in order to compile all dependent Dune modules.\n\nNow, you should be able to execute Dune-MMesh's python code. For instance:\n````\ngit clone https://github.com/samuelburbulla/dune-mmesh.git\ncd dune-mmesh/doc/examples\npython coupling.py\n````\n\nFurther details on the installation procedure can be found on [Installation](https://dune-mmesh.readthedocs.io/en/latest/installation.html).\n\n\n## Example\n\nYou can find a collection of examples of how to use Dune-MMesh on our [Examples](https://dune-mmesh.readthedocs.io/en/latest/examples.html) page.\n\n\nIn a short example below we show how to use Dune-MMesh in general.\nWe use `.msh` files generated by gmsh to define the geometry of our mesh.\n````\nimport gmsh\ngmsh.initialize()\ngmsh.option.setNumber(\"Mesh.MshFileVersion\", 2.2)\nname = \"grid.msh\"\nh = 0.01\ngmsh.model.add(name)\nkernel = gmsh.model.occ\nbox = kernel.addRectangle(0, 0, 0, 1, 1)\np0 = kernel.addPoint(0.5, 0.5, 0, h)\np1 = kernel.addPoint(0.25, 0.25, 0, h)\np2 = kernel.addPoint(0.75, 0.75, 0, h)\np3 = kernel.addPoint(0.75, 0.25, 0, h)\nlf1 = kernel.addLine(p0, p1)\nlf2 = kernel.addLine(p0, p2)\nlf3 = kernel.addLine(p0, p3)\nkernel.synchronize()\ngmsh.model.mesh.embed(1, [lf1, lf2, lf3], 2, box)\ngmsh.model.mesh.generate(dim=2)\ngmsh.write(name)\ngmsh.finalize()\n````\n\nRead the generated `.msh` file and construct bulk and interface triangulation.\n````\nfrom dune.grid import reader\nfrom dune.mmesh import mmesh\ngridView  = mmesh((reader.gmsh, name), 2)\nigridView = gridView.hierarchicalGrid.interfaceGrid\n````\n\nNow, we can solve a mixed-dimensional PDE.\n````\nfrom dune.mmesh import trace, skeleton, interfaceIndicator, monolithicSolve\n\nfrom dune.fem.space import dglagrange, lagrange\nspace = dglagrange(gridView, order=3)\nispace = lagrange(igridView, order=3)\n\nfrom ufl import *\nu = TrialFunction(space)\nv = TestFunction(space)\nn = FacetNormal(space)\nh = MinFacetEdgeLength(space)\nuh = space.interpolate(0, name=\"uh\")\n\niu = TrialFunction(ispace)\niv = TestFunction(ispace)\niuh = ispace.interpolate(0, name=\"iuh\")\n\nfrom dune.mmesh import interfaceIndicator\nI = interfaceIndicator(igridView)\n\nfrom dune.ufl import Constant\nq = Constant(1, name=\"q\")\nbeta = Constant(1e2, name=\"beta\")\nomega = Constant(1e-6, name=\"omega\")\n\na  = inner(grad(u), grad(v)) * dx\na += beta / h * inner(jump(u), jump(v)) * (1-I)*dS\na -= dot(dot(avg(grad(u)), n('+')), jump(v)) * (1-I)*dS\n\na += beta / h * inner(u - 0, v) * ds\na -= dot(dot(grad(u), n), v) * ds\n\nia  = inner(grad(iu), grad(iv)) * dx\nib  = q * iv * dx\n\nfrom dune.mmesh import skeleton, trace\na -= (skeleton(iuh)('+') - u('+')) / omega * v('+') * I*dS\na -= (skeleton(iuh)('-') - u('-')) / omega * v('-') * I*dS\n\nia += (iu - trace(uh)('+')) / omega * iv * dx\nia += (iu - trace(uh)('-')) / omega * iv * dx\n\nfrom dune.fem.scheme import galerkin\nscheme = galerkin([a == 0])\nischeme = galerkin([ia == ib])\n\nfrom dune.mmesh import monolithicSolve\nmonolithicSolve(schemes=(scheme, ischeme), targets=(uh, iuh), verbose=True)\n````\n\nWe can write the solution to `.vtk` or plot with matplotlib.\n````\ngridView.writeVTK(\"example\", pointdata=[uh], nonconforming=True)\nigridView.writeVTK(\"interface\", pointdata=[iuh])\n\nimport matplotlib.pyplot as plt\nfrom dune.fem.plotting import plotPointData as plot\nfig = plt.figure()\nplot(uh, linewidth=0, clim=[0, 0.17], figure=fig)\nplot(iuh, linewidth=0.01, colorbar=None, clim=[0, 0.17], figure=fig)\nplt.savefig(\"plot.png\")\n````\n\n![](scripts/plot.png)\n\n## Testing\nYou can test your installation of Dune-MMesh by running the python tests\n````\npython -m dune.mmesh test\n````\nFurther tests of the C++ backend can be performed with a [source build](https://dune-mmesh.readthedocs.io/en/latest/installation.html#from-source) executing `make build_test` and `make test` in the build directory.\n\n## Contribution\n\nContributions are highly welcome. If you want to contribute, please use our [GitLab](https://gitlab.dune-project.org/samuel.burbulla/dune-mmesh)\nor [GitHub](https://github.com/samuelburbulla/dune-mmesh/) to report an issue or open a merge/pull request.\n\n## License\nDune-MMesh is licensed under the terms and conditions of the GNU General Public License (GPL) version 3 or - at your option - any later version.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.dune-project.org/samuel.burbulla/dune-mmesh",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dune-mmesh",
    "package_url": "https://pypi.org/project/dune-mmesh/",
    "platform": null,
    "project_url": "https://pypi.org/project/dune-mmesh/",
    "project_urls": {
      "Homepage": "https://gitlab.dune-project.org/samuel.burbulla/dune-mmesh"
    },
    "release_url": "https://pypi.org/project/dune-mmesh/1.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "MMesh is a grid implementation based on CGAL triangulations",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15698779,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30410d29b876433a23a746d423931412b3e3b611d5542eb4ac5bfda818b50e37",
        "md5": "d00d2e2eeb30d531263247372f3dba26",
        "sha256": "c986a56158d5070e1f128840dc6d3050f930b5b47e0f53ce3d8d38ba09ea5690"
      },
      "downloads": -1,
      "filename": "dune-mmesh-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d00d2e2eeb30d531263247372f3dba26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 4106885,
      "upload_time": "2022-06-24T10:42:05",
      "upload_time_iso_8601": "2022-06-24T10:42:05.711456Z",
      "url": "https://files.pythonhosted.org/packages/30/41/0d29b876433a23a746d423931412b3e3b611d5542eb4ac5bfda818b50e37/dune-mmesh-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}