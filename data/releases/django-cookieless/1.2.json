{
  "info": {
    "author": "Ed Crewe",
    "author_email": "edmundcrewe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Django Cookieless\n=================\n\nEd Crewe - Oct 2019\n\nOverview\n--------\n\nThis package provides a sessions implementation and decorator class for views to\nallow for forms to maintain state without using cookies by posting the session\nid between forms, or via urls.\n\nDjango requires cookies to maintain session, and hence for authorisation.\n\nThis package is designed to cater for anonymous user session maintenance, without cookies.\n\nWARNING : There are security issues with this, since it is not possible to use\nCSRF protection without session Cookies to maintain a separate token from that passed via the URL or form posts.\n\nHowever there are cases when forms are used on a public site, where setting cookies is not desirable (`due to privacy legislation <http://www.ico.gov.uk/>`_), since technically they are not required for anonymous users to respond to forms.\nSo if used, may necessitate requesting permission to set cookies, from the user.\n\nHence this package was devised to allow django to deliver multipage forms, without using cookies.\n\nTo ameliorate the security implications, a whitelist of allowed domains, can be set in the configuration.\n\nUsage can also be restricted to a particular URL.\n\nAs another safety measure, handling of GET requests can be turned off, so that the encrypted session id is not present in any URLs.\n\nPlease NOTE: It is not advisable to use this package without some form of the above restrictions being in place.\n\nFor the purposes of using both cookie based and cookieless sessions together, there is a\ncustom cookieless_signal(sender=request, created) and a 'no_cookies' flag when cookieless sessions are saved.\n\nBoth cater for hooking up custom code for handling these less secure sessions.\n\nThe package provides a decorator utility to turn off cookie setting for particular views (which also sets the csrf_exempt flag).\n\nThe package also handles the case of session handling for anonymous users with cookies disabled in the browser.\n\nYou can decorate views to prevent them setting cookies, whilst still retaining the use of Sessions.\nUsually this is easiest done in the urls.py of your core application ...\n\nfrom cookieless.decorators import no_cookies\n\n>>> urlpatterns = [\n...    path('somewhere/index', no_cookies(views.home)),\n...    re_path(r'^somewhere/page/(\\d{1,6})$', no_cookies(views.page)),\n...]\n\nNote that if a number of browser tabs are open on to a site with cookieless, they will each maintain a completely separate session, since\nwithout cookies the session is tied to the session posted from the pages accessed, not the client as a whole.\n\nIn cases where this is not the desired behaviour, then it can be reduced by using URL rewriting to make any links to open other windows pass session across.\nHowever of course this also means that potentially a session can be shared across browsers, too.\n\nInstallation\n------------\n\nTo install add the package via pip or other build tool, e.g. bin/pip install django-cookieless\n\nThen replace the standard Session in the middleware settings:\n\n>>> MIDDLEWARE = (\n...    'django.middleware.gzip.GZipMiddleware',\n...    'django.middleware.common.CommonMiddleware',\n...    'django.middleware.transaction.TransactionMiddleware',\n...    # 'django.contrib.sessions.middleware.SessionMiddleware',\n...    'cookieless.middleware.CookielessSessionMiddleware',\n...)\n\nThe following settings control its behaviour:\n\n(see the example settings file)\n\n1. Rewriting the response automatically rather than use manual <% session_token %> <% session_url %>\n\nCOOKIELESS['REWRITE'] = True\n\n2. Rewrite URLs to add session id for no_cookies decorated views (if False then all page navigation must be via form posts)\n\nCOOKIELESS['USE_GET'] = True\n\n3. Use client ip and user agent to encrypt session key, to add some sort of CSRF protection given the standard CSRF has to be disabled without cookies.\n\nCOOKIELESS['CLIENT_ID'] = True\n\n4. If this list is populated then only hosts that are specifically whitelisted are allowed to post to the server. So any domains that the site is served over should be added to the list. However, if no referer is found, the session is reset, which will occur with a page reload. This helps protect against XSS attacks.\n\nCOOKIELESS['HOSTS'] = ['localhost', ]\n\n5. Further security option to not find and persist cookie based sessions as cookieless ones since these may be tied to a user or other data. Instead new sessions are created for tying to cookieless data. This reduces the risk of cookieless allowing capture of a user's session - and hence privilege escalation attacks.\n\nCOOKIELESS['NO_COOKIE_PERSIST'] = True\n\n6. Further security option to only keep a session for accessing a specific URL\n\nCOOKIELESS['URL_SPECIFIC'] = True\n\n7. Delete any cookies that are found for a no_cookies decorated URL (could be ones set by other URLs)\n\nCOOKIELESS['DELETE_COOKIES'] = False\n\nTests\n-----\n\nThe test suite sets up a simple application to test cookies manually, and to run the functional tests against.\n\nTo run the tests, you may want to install from src (or your branch):\n\nbin/pip install -e git+https://github.com/edcrewe/django-cookieless#egg=django-cookieless\n\nThen run via:\n\nbin/django-admin.py or manage.py test cookieless.tests --settings=cookieless.tests.settings\n\n(The package was changed from a namespace package due to the issue with pip\nnot installing the __init__ for running tests when it does a nspkg.pth file instead)\n\ncookieless/decorator.py\n-----------------------\n\nBecause the django test browser has some session implementation specific mocking,\nit fails to work if used directly against cookieless, so to stop it breaking other tests\ncookieless checks to see if the django admin command has been called with the 'test' argument and sets settings.TESTING = True, and doesnt decorate with no_cookies if so.\n\nTo override this automatic disabling setting, just add TESTING = False, to your test settings.\n\n\nChangelog\n=========\n\n1.2 - 26th Oct 2019\n-------------------\n- Fix breach mitigation test for Python 3 [Ed Crewe] \n- Fix test settings to correct path  [jonespm]\n- Fix content-length and decode  [C.Severance]\n\n1.1 - 1st May 2019\n------------------\n\n- Rewrite for Python 3 and Django 2.2\n- Remove xteacrypt and use cryptography\n\n[Ed Crewe]\n\n1.0 - 24th February 2014\n------------------------\n\n- Test with latest Django 1.6.2\n- Enforce session keys as strings if the session fails to save\n  Due to the move of the session serializer to JSON in Django 1.6\n\n[Ed Crewe]\n\n0.9 - 18th August 2013\n----------------------\n\n- Add protection against breach attack via nonce encryption\n  http://breachattack.com/\n- Added related test\n\n[Chris Bailey]\n\n- Remove line return at end of session id introduced by base64 encoding\n\n[Ed Crewe]\n\n0.8 - 4th January 2013\n----------------------\n\n- Clean up some pylint\n- Switch to base64 encoding to shorten encrypted session ids\n\n0.7 - 18th December 2012\n------------------------\n\n- Add a cookieless_signal to allow custom code to be hooked to cookieless sessions\n- Pass a created flag for cookieless sessions to the signal\n- Add a no_cookies marker key to cookieless sessions for the same reason\n- Check automatic form rewrites to ensure that sessions are not already set manually\n- Fix tests check of hidden session_id broken by extra space in hidden field\n- Add post method for test class view so test posts don't throw HttpResponseNotAllowed\n- Make the secret generated by settings options more unique\n\n0.6 - 21st November 2012\n------------------------\n\n- Never use the cookie for session for decorated views since it may break sessions passed by\n  cookieless means\n\n0.5 - 14th November 2012\n------------------------\n\n- Only rewrite redirect URLs if USE_GET is True and its the same domain\n\n0.4 - 9th November 2012\n-----------------------\n\n- Fix issue of not having no_cookies to test in process_request by getting it from urlresolvers\n  Now we only check for cookie session where we should, and cookies cannot mess with cookieless sessions\n- Make the deletion of any cookies that are passed on to the URL, an optional feature\n- Use settings.TESTING based on argv to disable, instead of check for servername\n\n0.3 - 7th November 2012\n-----------------------\n\n- Turn off cookieless for django test browser - since its hard coded to use\n  dummy sessions if an alternative session provider is in use -\n  otherwise cookieless could break other packages tests\n- Add server name switch to re-enable test browser for cookieless functional tests\n- Change anon user switch to be NO_COOKIE_PERSIST - ie. never use cookie originated sessions - move to process_response\n- Make session use cookieless post / get first over cookies, if present\n- Delete request cookies if found in response\n- Refactor settings to a dictionary\n- Add some tests\n- Move fix for non-unicode key to the decrypt method\n\n  [Ed Crewe]\n\n0.2 - 6th November 2012\n-----------------------\n\n- Add COOKIELESS_ANON_ONLY setting to not use cookieless if a user is authorised\n- Update example settings\n- Add test suite\n- Don't assume request META keys exist so OK with test client etc.\n- Fix session decrypt with wrong secret - generates non-unicode key bug\n  rather than new session\n- Add SPECIFIC_URL option for extra security for sessions\n\n  [Ed Crewe]\n\n0.1 - 4th November 2012\n-----------------------\n\n* Initial release\n\n- Django snippets -\n  http://djangosnippets.org/snippets/1540/\n  Basis of middleware\n- Add simple crypt of sessionid when used in HTML\n- Call standard contrib.sessions.Session if not decorated as no_cookies\n- Add CSRF exempt decorator too to ensure cookie not set by that\n- Add templatetags for users who prefer manual adding of session ids\n- Add settings options to configure level of security applied,\n  e.g. whitelist of referers, no URL rewriting etc.\n\n  [Ed Crewe, julio carlos and Ivscar (snippet), Paul Chakravarti (xteacrypt)]\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edcrewe/django-cookieless",
    "keywords": "Django,No cookies,cookieless",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cookieless",
    "package_url": "https://pypi.org/project/django-cookieless/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cookieless/",
    "project_urls": {
      "Homepage": "https://github.com/edcrewe/django-cookieless"
    },
    "release_url": "https://pypi.org/project/django-cookieless/1.2/",
    "requires_dist": [
      "setuptools",
      "cryptography"
    ],
    "requires_python": "",
    "summary": "Django cookie free sessions optional decorator",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6034037,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33df64d4e0c4ccbe110ae404ce2c1ca4a71c96dd6dbc0f69e51198128c2c0e6a",
        "md5": "4faa3ad5f4086f5a4e73b04623de2fbc",
        "sha256": "5028106e7298c6287f64aa16c8680ac39dd909ce21e27c232c9fd70f65484819"
      },
      "downloads": -1,
      "filename": "django_cookieless-1.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "4faa3ad5f4086f5a4e73b04623de2fbc",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 25247,
      "upload_time": "2019-10-26T15:11:54",
      "upload_time_iso_8601": "2019-10-26T15:11:54.530170Z",
      "url": "https://files.pythonhosted.org/packages/33/df/64d4e0c4ccbe110ae404ce2c1ca4a71c96dd6dbc0f69e51198128c2c0e6a/django_cookieless-1.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "954c6ecd82f4b690a5c866d4991c3ab7d48036c902363e1d079e3b8bcbcee610",
        "md5": "a8c3d91f6b353fd7bf7ac20407c6f014",
        "sha256": "170a9884da4a5a6f3b5d78f136bfef9b889e56608c9555fdbeb3c22eb40ded91"
      },
      "downloads": -1,
      "filename": "django-cookieless-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a8c3d91f6b353fd7bf7ac20407c6f014",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21812,
      "upload_time": "2019-10-26T15:11:56",
      "upload_time_iso_8601": "2019-10-26T15:11:56.381140Z",
      "url": "https://files.pythonhosted.org/packages/95/4c/6ecd82f4b690a5c866d4991c3ab7d48036c902363e1d079e3b8bcbcee610/django-cookieless-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}