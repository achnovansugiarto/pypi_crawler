{
  "info": {
    "author": "Piotr Mitros",
    "author_email": "pmitros@edx.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-pyfs\n===========\n\nA Django module which extends pyfilesystem with several methods to\nmake it convenient for web use. Specifically, it extends pyfilesystem\nwith two methods:\n\n    fs.get_url(filename, timeout=0)\n\nThis will return a externally-usable URL to the resource. If\ntimeout>0, the URL may stop working after that period (in\nseconds). Details are implementation-dependent. On Amazon S3, this is\na secure URL, which is only available for that period. For a static\nfilesystem, the URLs are unsecure and permanent. \n\n    fs.expire(filename, seconds, days, expires=True)\n\nThis allows us to create temporary objects. Our use-case was that we\nwanted to generate visualizations to users which were .png images. The\nlifetime of those images was a single web request, so we set them to\nexpire after a few minutes. Another use case was memoization.\n\nNote that expired files are not automatically removed. To remove them,\ncall `expire_objects()`. In our system, we had a cron job do\nthis for a while. Celery, manual removals, etc. are all options. \n\nTo configure a django-pyfs to use static files, set a parameter in\nDjango settings: \n\n    DJFS = {'type' : 'osfs',\n                     'directory_root' : 'djpyfs/static/djpyfs', \n                     'url_root' : '/static/djpyfs'}\n\nHere, `directory_root` is where the files go. `url_root` is the URL\nbase of where your web server is configured to serve them from.\n\nTo use files on S3, you need `boto` installed. Then, \n\n    DJFS = {'type' : 's3fs',\n            'bucket' : 'my-bucket', \n            'prefix' : '/pyfs/' } \n\n`bucket` is your S3 bucket. `prefix` is optional, and gives a base\nwithin that bucket.\n\nTo get your filesystem, call: \n\n    def get_filesystem(namespace)\n\nEach module should pass a unique namespace. These will typically\ncorrespond to subdirectories within the filesystem. \n\nThe django-pyfs interface is designed as a generic (non-Django\nspecific) extension to pyfilesystem. However, the specific\nimplementation is very Django-specific. \n\nGood next steps would be to:\n\n* Upgrade to use PyFilesystem2 when it supports S3\n* Allow Django storages to act as a back-end for pyfilesystem\n* Allow django-pyfs to act as a back-end for Django storages\n* Support more types of pyfilesystems (esp. in-memory would be nice)\n\nState: This code is tested and has worked well in a range of settings,\nand is currently deployed on edx.org. However, it doesn't have test\ncases and similar, so can't be considered truly production-ready. The\nexpiration functionality, in particular, we are not using right now.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edx/django-pyfs",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pyfs",
    "package_url": "https://pypi.org/project/django-pyfs/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pyfs/",
    "project_urls": {
      "Homepage": "https://github.com/edx/django-pyfs"
    },
    "release_url": "https://pypi.org/project/django-pyfs/1.0.6/",
    "requires_dist": [
      "fs",
      "boto",
      "six",
      "django"
    ],
    "requires_python": "",
    "summary": "Django pyfilesystem integration",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12631507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3422a958d60f7ce2028ac99cb5af254c3f9eb312327c2556cae6eb84dff2f686",
        "md5": "43dc8154958d133d18c3d99dce19ce29",
        "sha256": "2fd30d821a42d4bf7af60f2057fcda56c7f8d0d8612761c6cd73d666af5b710f"
      },
      "downloads": -1,
      "filename": "django_pyfs-1.0.6-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "43dc8154958d133d18c3d99dce19ce29",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 11414,
      "upload_time": "2017-06-23T17:24:43",
      "upload_time_iso_8601": "2017-06-23T17:24:43.818601Z",
      "url": "https://files.pythonhosted.org/packages/34/22/a958d60f7ce2028ac99cb5af254c3f9eb312327c2556cae6eb84dff2f686/django_pyfs-1.0.6-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "779aa11b586f11670704fe85f5e06f8e1b5bae949f7f5a55993fe2efe6805c9e",
        "md5": "9094a779ae67deedeb85ff869ba3abe0",
        "sha256": "b97621342356a28ff224c6d1fd6f20608781de3bed8ff08f1b85d095db8d4217"
      },
      "downloads": -1,
      "filename": "django_pyfs-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9094a779ae67deedeb85ff869ba3abe0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11417,
      "upload_time": "2017-06-23T17:25:52",
      "upload_time_iso_8601": "2017-06-23T17:25:52.625308Z",
      "url": "https://files.pythonhosted.org/packages/77/9a/a11b586f11670704fe85f5e06f8e1b5bae949f7f5a55993fe2efe6805c9e/django_pyfs-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fc22d973bac6037aca292c3adffebe400de8a8ba764966056c8526276922e12",
        "md5": "8895f8c8667db72d098cb11d500ce09d",
        "sha256": "712b78e1fa44b34f5b54893a6bff9165347fb27e2fe70af4771727bc44e43520"
      },
      "downloads": -1,
      "filename": "django-pyfs-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "8895f8c8667db72d098cb11d500ce09d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13139,
      "upload_time": "2017-06-23T17:24:45",
      "upload_time_iso_8601": "2017-06-23T17:24:45.382803Z",
      "url": "https://files.pythonhosted.org/packages/6f/c2/2d973bac6037aca292c3adffebe400de8a8ba764966056c8526276922e12/django-pyfs-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}