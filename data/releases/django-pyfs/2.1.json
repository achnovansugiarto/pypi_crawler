{
  "info": {
    "author": "Piotr Mitros",
    "author_email": "pmitros@edx.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-pyfs\n===========\n\nA Django module which extends pyfilesystem2 with several methods to\nmake it convenient for web use. Specifically, it extends pyfilesystem2\nwith two methods:\n\n    fs.get_url(filename, timeout=0)\n\nThis will return a externally-usable URL to the resource. If\ntimeout>0, the URL may stop working after that period (in\nseconds). Details are implementation-dependent. On Amazon S3, this is\na secure URL, which is only available for that period. For a static\nfilesystem, the URLs are unsecure and permanent. \n\n    fs.expire(filename, seconds, days, expires=True)\n\nThis allows us to create temporary objects. Our use-case was that we\nwanted to generate visualizations to users which were .png images. The\nlifetime of those images was a single web request, so we set them to\nexpire after a few minutes. Another use case was memoization.\n\nNote that expired files are not automatically removed. To remove them,\ncall `expire_objects()`. In our system, we had a cron job do\nthis for a while. Celery, manual removals, etc. are all options. \n\nTo configure a django-pyfs to use static files, set a parameter in\nDjango settings: \n\n    DJFS = {'type' : 'osfs',\n            'directory_root' : 'djpyfs/static/djpyfs',\n            'url_root' : '/static/djpyfs'}\n\nHere, `directory_root` is where the files go. `url_root` is the URL\nbase of where your web server is configured to serve them from.\n\nTo use files on S3, you need `boto` installed. Then, \n\n    DJFS = {'type' : 's3fs',\n            'bucket' : 'my-bucket', \n            'prefix' : '/pyfs/' } \n\n`bucket` is your S3 bucket. `prefix` is optional, and gives a base\nwithin that bucket.\n\nTo get your filesystem, call: \n\n    def get_filesystem(namespace)\n\nEach module should pass a unique namespace. These will typically\ncorrespond to subdirectories within the filesystem. \n\nThe django-pyfs interface is designed as a generic (non-Django\nspecific) extension to pyfilesystem2. However, the specific\nimplementation is very Django-specific. \n\nGood next steps would be to:\n\n* Allow Django storages to act as a back-end for pyfilesystem\n* Allow django-pyfs to act as a back-end for Django storages\n* Support more types of pyfilesystems (esp. in-memory would be nice)\n\nState: This code is tested and has worked well in a range of settings,\nand is currently deployed on edx.org.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edx/django-pyfs",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pyfs",
    "package_url": "https://pypi.org/project/django-pyfs/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pyfs/",
    "project_urls": {
      "Homepage": "https://github.com/edx/django-pyfs"
    },
    "release_url": "https://pypi.org/project/django-pyfs/2.1/",
    "requires_dist": [
      "six",
      "fs-s3fs",
      "fs (>=2.0.1)",
      "django (>=1.11)"
    ],
    "requires_python": "",
    "summary": "Django pyfilesystem integration",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12631507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b09e7cc7c67ed27ede81419e88a28078d6a52d824bb179211a17e2d5fb7e75ca",
        "md5": "831049c025eba9adb28f7c2543938e8e",
        "sha256": "dfec54a4f43a7037e3a10890544fb928343a2a697eb9b9a4cef6b2c6f0d16dfa"
      },
      "downloads": -1,
      "filename": "django_pyfs-2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "831049c025eba9adb28f7c2543938e8e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13165,
      "upload_time": "2019-11-27T19:18:24",
      "upload_time_iso_8601": "2019-11-27T19:18:24.494102Z",
      "url": "https://files.pythonhosted.org/packages/b0/9e/7cc7c67ed27ede81419e88a28078d6a52d824bb179211a17e2d5fb7e75ca/django_pyfs-2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa0f8911a8aa7aab3d6017a2ecbee5e2f10bd310643c353a39fc8cd2a025e32c",
        "md5": "f3e14c0e7f628f5736a975451af61db8",
        "sha256": "dc8cadd6b5a48eb7e74be2d8e133209906b9ed54db9af03dc89a38324a0c7a1d"
      },
      "downloads": -1,
      "filename": "django-pyfs-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f3e14c0e7f628f5736a975451af61db8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13861,
      "upload_time": "2019-11-27T19:18:25",
      "upload_time_iso_8601": "2019-11-27T19:18:25.965587Z",
      "url": "https://files.pythonhosted.org/packages/fa/0f/8911a8aa7aab3d6017a2ecbee5e2f10bd310643c353a39fc8cd2a025e32c/django-pyfs-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}