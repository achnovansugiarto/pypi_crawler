{
  "info": {
    "author": "Aymeric Augustin",
    "author_email": "aymeric.augustin@m4x.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": ".. image:: logo/horizontal.svg\n   :width: 400px\n   :alt: django-sesame\n\n`django-sesame`_ provides frictionless authentication with \"Magic Links\" for\nyour Django project.\n\n.. _django-sesame: https://github.com/aaugustin/django-sesame\n\nIt generates URLs containing an authentication token such as:\nhttps://example.com/?url_auth_token=AAAAARchl18CIQUlImmbV9q7PZk%3A89AEU34b0JLSrkT8Ty2RPISio5\n\nThen it authenticates users based on tokens found in URLs.\n\nUse cases\n=========\n\nKnown use cases for django-sesame include:\n\n1. Login by email, an increasingly attractive option on mobile where\n   typing passwords is uncomfortable. This technique is prominently\n   deployed by Slack.\n\n   If you're doing this, you should define a small ``SESAME_MAX_AGE``, perhaps\n   10 minutes, and consider enabling ``SESAME_ONE_TIME``.\n\n2. Authenticated links, typically if you're generating an export or a report\n   and emailing a link to access it. An authenticated link will work even if\n   the user isn't logged in on the device where they're opening it.\n\n   Likewise, you should configure an appropriate ``SESAME_MAX_AGE``, probably\n   no more than a few days.\n\n3. Non-critical private websites, for example for a family or club site,\n   where users don't expect to manage a personal account with a password.\n   Authorized users can bookmark personalized authenticated URLs.\n\n   Here you can rely on the default settings because that's the original use\n   case for which django-sesame was built.\n\n(In)security\n============\n\n**Before using django-sesame in your project, please review the following\nadvice carefully.** (Also, please don't use security-sensitive libraries\npublished by strangers on the Internet without checking what they do.)\n\nThe major security weakness in django-sesame is a direct consequence of the\nfeature it implements: **whoever obtains an authentication token will be able\nto authenticate to your website.**\n\nURLs end up in countless insecure places: emails, referer headers, proxy logs,\nbrowser history, etc. You can't avoid that. At best you can mitigate it by\ncreating short-lived or single-use tokens, as described below.\n\nOtherwise, a reasonable attempt has been made to provide a secure solution.\ndjango-sesame uses Django's signing framework to create signed tokens. It\noffers configurable options for token expiration or invalidation.\n\nRequirements\n============\n\ndjango-sesame is tested with:\n\n- Django 1.11 (LTS), 2.1 and 2.2;\n- all supported Python versions.\n\nIt builds upon ``django.contrib.auth``.\n\nIt supports custom user models, provided:\n\n- They have an integer or UUID primary key — other types could be added\n  if there's a use case;\n- They have ``password`` and ``last_login`` fields — most custom user models\n  inherit them from ``AbstractBaseUser``.\n\ndjango-sesame is released under the BSD license, like Django itself.\n\nGetting started\n===============\n\n1. Install django-sesame and ua-parser::\n\n    $ pip install django-sesame\n    $ pip install ua-parser  # optional, see \"Safari issues\" below\n\n2. Add ``sesame.backends.ModelBackend`` to ``AUTHENTICATION_BACKENDS``::\n\n    AUTHENTICATION_BACKENDS += ['sesame.backends.ModelBackend']\n\n3. Add ``sesame.middleware.AuthenticationMiddleware`` to ``MIDDLEWARE``::\n\n    MIDDLEWARE += ['sesame.middleware.AuthenticationMiddleware']\n\n   The best position for ``sesame.middleware.AuthenticationMiddleware`` is\n   just after ``django.contrib.auth.middleware.AuthenticationMiddleware``.\n\n4. Generate authentication tokens with ``sesame.utils.get_query_string(user)``.\n\nThat's all!\n\nGenerating URLs\n===============\n\ndjango-sesame provides two functions to generate authenticated URLs.\n\n1. ``sesame.utils.get_query_string(user)`` returns a complete query string\n   that you can append to any URL to enable one-click login.\n\n2. ``sesame.utils.get_parameters(user)`` returns a dictionary of GET\n   parameters to add to the query string, if you're already building one.\n\nShare resulting URLs with your users while ensuring adequate confidentiality.\n\nBy default, the URL parameter is called ``url_auth_token``. You can set the\n``SESAME_TOKEN_NAME`` setting to a shorter name that doesn't conflict with\nquery string parameters used by your application.\n\nTokens lifecycle\n================\n\nBy default, tokens don't expire but are tied to the password of the user.\nChanging the password invalidates the token. When the authentication backend\nuses salted passwords — that's been the default in Django for a long time —\nthe token is invalidated even if the new password is identical to the old one.\n\nIf you want tokens to expire after a given amount of time, set the\n``SESAME_MAX_AGE`` setting to a duration in seconds. Then each token will\ncontain the time it was generated at and django-sesame will check if it's\nstill valid at each login attempt.\n\nIf you want tokens to be usable only once, set the ``SESAME_ONE_TIME`` setting\nto ``True``. In that case tokens are only valid if the last login date hasn't\nchanged since they were generated. Since logging in changes the last login\ndate, such tokens are usable at most once.\n\nIf you don't want tokens to be invalidated by password changes, set the\n``SESAME_INVALIDATE_ON_PASSWORD_CHANGE`` setting to ``False``. **This is\nstrongly discouraged because it becomes impossible to invalidate tokens**\nshort of changing the ``SECRET_KEY`` setting. If you're doing it anyway, you\nshould set ``SESAME_MAX_AGE`` to a short value to minimize risks. This option\nmay be useful for generating tokens during a signup process, when you don't\nknow if the token will be used before or after initializing the password.\n\nFinally, if the ``is_active`` attribute of a user is set to ``False``,\ndjango-sesame rejects authentication tokens for this user.\n\nPer-view authentication\n=======================\n\nThe configuration described in the \"Getting started\" section enables a\nmiddleware that looks for a token in every request and, if there is a valid\ntoken, logs the user in. It's as if they had submitted their username and\npassword in a login form.\n\nSometimes this behavior is too blunt. For example, you may want to build a\nMagic Link that gives access to a specific view but doesn't log the user in\npermanently.\n\nTo achieve this, you can remove ``sesame.middleware.AuthenticationMiddleware``\nfrom the ``MIDDLEWARE`` setting and authenticate the user with django-sesame\nin a view as follows::\n\n    from django.core.exceptions import PermissionDenied\n    from django.http import HttpResponse\n\n    from sesame.utils import get_user\n\n    def hello(request):\n        user = get_user(request)\n        if user is None:\n            raise PermissionDenied\n        return HttpResponse(\"Hello {}!\".format(user))\n\nWhen ``SESAME_ONE_TIME`` is enabled, ``get_user()`` updates the user's last\nlogin date in order to invalidate the token. When ``SESAME_ONE_TIME`` isn't\nenabled, it doesn't, because making a database write for every call to\n``get_user()`` could degrade performance. You can override this behavior with\nthe ``update_last_login`` keyword argument::\n\n    get_user(request, update_last_login=True)   # update last_login\n    get_user(request, update_last_login=False)  # don't update last_login\n\n``get_user()`` is a thin wrapper around the low-level ``authenticate()``\nfunction from ``django.contrib.auth``. If you use ``authenticate()`` to verify\nan authentication token, the ``sesame.backends.ModelBackend`` authentication\nbackend expects an ``url_auth_token`` argument::\n\n    from django.contrib.auth import authenticate\n\n    user = authenticate(url_auth_token=...)\n\nIf you rely on ``authenticate()``, you must update ``user.last_login`` to\nensure one-time tokens are invalidated. Indeed, in ``django.contrib.auth``,\n``authenticate()`` is a low-level function and the higher-level ``login()``\nfunction is responsible for updating ``user.last_login``.\n\nSafari issues\n=============\n\ndjango-sesame removes the token from the URL with a HTTP 302 Redirect after\nauthenticating a user successfully. Unfortunately, in some scenarios, this\ntriggers Safari's \"Protection Against First Party Bounce Trackers\". In that\ncase, Safari clears cookies and the user is logged out.\n\nTo avoid this problem, django-sesame doesn't perform the redirect when it\ndetects that the browser is Safari. This relies on the ua-parser package,\nwhich is an optional dependency. If it isn't installed, django-sesame always\nredirects.\n\nStateless authentication\n========================\n\nTechnically, django-sesame can provide stateless authenticated navigation\nwithout ``django.contrib.sessions``, provided all internal links include the\nauthentication token, but that increases the security issues explained above.\n\nIf ``django.contrib.sessions.middleware.SessionMiddleware`` and\n``django.contrib.auth.middleware.AuthenticationMiddleware`` aren't enabled,\n``sesame.middleware.AuthenticationMiddleware`` sets ``request.user`` to the\ncurrently logged-in user or ``AnonymousUser()``.\n\nChangelog\n=========\n\n1.7\n---\n\n* Fixed invalidation of one-time tokens in ``get_user()``.\n\n1.6\n---\n\n* Fixed detection of Safari on iOS.\n\n1.5\n---\n\n* Added support for single use tokens with the ``SESAME_ONE_TIME`` setting.\n* Added support for not invalidating tokens on password change with the\n  ``SESAME_INVALIDATE_ON_PASSWORD_CHANGE`` setting.\n* Added compatibility with custom user models where the primary key is a UUID.\n* Added the ``get_user()`` function to obtain a user instance from a request.\n* Improved error message for pre-existing tokens when changing the\n  ``SESAME_MAX_AGE`` setting.\n* Fixed authentication on Safari by disabling the redirect which triggers ITP.\n\n1.4\n---\n\n* Added a redirect to the same URL with the query string parameter removed.\n\n1.3\n---\n\n* Added compatibility with Django ≥ 2.0.\n\n1.2\n---\n\n* Added the ability to rename the query string parameter with the\n  ``SESAME_TOKEN_NAME`` setting.\n* Added compatibility with Django ≥ 1.8.\n\n1.1\n---\n\n* Added support for expiring tokens with the ``SESAME_MAX_AGE`` setting.\n\n1.0\n---\n\n* Initial release.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aaugustin/django-sesame",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sesame",
    "package_url": "https://pypi.org/project/django-sesame/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sesame/",
    "project_urls": {
      "Homepage": "https://github.com/aaugustin/django-sesame"
    },
    "release_url": "https://pypi.org/project/django-sesame/1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "URL-based authentication, an application that provides one-click login via specially crafted URLs",
    "version": "1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14573471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abb01a2345e5d697e77a45ca191e6643a8ff8a53c954e59baa5aa3500812b9bc",
        "md5": "e83520a8b0575ed69612aefa0307a190",
        "sha256": "8d2852f441217fd8a3de5fa8199dd16e4148229ecf25717f69564223e47097f8"
      },
      "downloads": -1,
      "filename": "django_sesame-1.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e83520a8b0575ed69612aefa0307a190",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17029,
      "upload_time": "2019-06-08T18:52:12",
      "upload_time_iso_8601": "2019-06-08T18:52:12.761241Z",
      "url": "https://files.pythonhosted.org/packages/ab/b0/1a2345e5d697e77a45ca191e6643a8ff8a53c954e59baa5aa3500812b9bc/django_sesame-1.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43c42d48e351983da54b4fff5e4a5f9cbeee8c86f4e13a1c825869ed7b972fbe",
        "md5": "0e8d3174c63a79aa818c3ea79788882e",
        "sha256": "e68bad4a6ef44322380f1f01d009f9d3cb55d1ffef0b669574b511db5ab0c6c0"
      },
      "downloads": -1,
      "filename": "django-sesame-1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "0e8d3174c63a79aa818c3ea79788882e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13861,
      "upload_time": "2019-06-08T18:52:14",
      "upload_time_iso_8601": "2019-06-08T18:52:14.572503Z",
      "url": "https://files.pythonhosted.org/packages/43/c4/2d48e351983da54b4fff5e4a5f9cbeee8c86f4e13a1c825869ed7b972fbe/django-sesame-1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}