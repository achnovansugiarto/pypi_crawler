{
  "info": {
    "author": "Bradley Griffiths",
    "author_email": "bradley.griffiths@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "django-s3direct\n===============\n\nUpload files directly to S3 (or compatible service) from Django.\n-------------------------------------\n\n[![Build Status](https://travis-ci.org/bradleyg/django-s3direct.svg?branch=master)](https://travis-ci.org/bradleyg/django-s3direct)\n\nDirectly upload files to S3 and other compatible services (such as [Digital Ocean's Spaces](https://www.digitalocean.com/docs/spaces/)) with Django.  \n<img src=\"https://raw.githubusercontent.com/bradleyg/django-s3direct/master/screenshot.png\" width=\"381\"/>\n\n## Installation\n\nInstall with Pip:  \n```pip install django-s3direct```\n\n## Access setup\n\n### When setting up access credentials you have two options:\n\n### Option 1:\n__Generate access credentials and add them directly to your Django settings__.\nIf using Amazon S3 you'll also need to create an IAM policy which grants\npermission to upload to your bucket for your newly created credentials.\nRemember to swap out __YOUR_BUCKET_NAME__ for your actual bucket.\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:AbortMultipartUpload\"\n      ],\n      \"Resource\": \"arn:aws:s3:::YOUR_BUCKET_NAME/*\"\n    }\n  ]\n}\n```\n\n### Option 2:\n__Use the EC2 instance profile and its attached IAM role (AWS only)__  \nYou'll need to ensure the following trust policy is in place in addition to the\npolicy above. You'll also need the\n[boto3](https://github.com/boto/boto3) package installed.\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n### CORS setup\n\nYou'll need to add a CORS policy on your bucket. Note the ETag header is\nimportant as it is used for multipart uploads. For more information see\n[here](https://github.com/TTLabs/EvaporateJS/wiki/Configuring-The-AWS-S3-Bucket).\nRemember to swap out YOURDOMAIN.COM in the example below, including port if\ndeveloping locally.\n\nIf using Digital Ocean Spaces you must upload the CORS config via the API/s3cmd\nCLI (as you can't add the ```ExposeHeader``` rule). See\n[here](https://www.digitalocean.com/community/questions/why-can-i-use-http-localhost-port-with-cors-in-spaces)\nfor more details.\n\n```xml\n<CORSConfiguration>\n    <CORSRule>\n        <AllowedOrigin>http://YOURDOMAIN.COM:8080</AllowedOrigin>\n        <AllowedMethod>GET</AllowedMethod>\n        <AllowedMethod>HEAD</AllowedMethod>\n        <AllowedMethod>PUT</AllowedMethod>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>DELETE</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n        <ExposeHeader>ETag</ExposeHeader>\n        <AllowedHeader>*</AllowedHeader>\n    </CORSRule>\n</CORSConfiguration>\n```\n\n## Django Setup\n\n### settings.py\n\n```python\nINSTALLED_APPS = [\n    ...\n    's3direct',\n    ...\n]\n\nTEMPLATES = [{\n    ...\n    'APP_DIRS': True,\n    ...\n}]\n\n# AWS\n\n# If these are set to None, the EC2 instance profile and IAM role are used.\nAWS_ACCESS_KEY_ID = 'your-aws-access-key-id'\nAWS_SECRET_ACCESS_KEY = 'your-aws-secret-access-key'\n\n# Bucket name\nAWS_STORAGE_BUCKET_NAME = 'your-aws-s3-bucket-name'\n\n# The region of your bucket, more info:\n# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\nAWS_S3_REGION_NAME = 'eu-west-1'\n\n# The endpoint of your bucket, more info:\n# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\nAWS_S3_ENDPOINT_URL = 'https://s3-eu-west-1.amazonaws.com'\n\nS3DIRECT_DESTINATIONS = {\n    'example_destination': {\n        # \"key\" [required] The location to upload file\n        #       1. String: folder path to upload to\n        #       2. Function: generate folder path + filename using a function  \n        'key': 'uploads/images',\n\n        # \"auth\" [optional] Limit to specfic Django users\n        #        Function: ACL function\n        'auth': lambda u: u.is_staff,\n\n        # \"allowed\" [optional] Limit to specific mime types\n        #           List: list of mime types\n        'allowed': ['image/jpeg', 'image/png', 'video/mp4'],\n\n        # \"bucket\" [optional] Bucket if different from AWS_STORAGE_BUCKET_NAME\n        #          String: bucket name\n        'bucket': 'custom-bucket',\n\n        # \"endpoint\" [optional] Endpoint if different from AWS_S3_ENDPOINT_URL\n        #            String: endpoint URL\n        'endpoint': 'custom-endpoint',\n\n        # \"region\" [optional] Region if different from AWS_S3_REGION_NAME\n        #          String: region name\n        'region': 'custom-region', # Default is 'AWS_S3_REGION_NAME'\n\n        # \"acl\" [optional] Custom ACL for object, default is 'public-read'\n        #       String: ACL\n        'acl': 'private',\n\n        # \"cache_control\" [optional] Custom cache control header\n        #                 String: header\n        'cache_control': 'max-age=2592000',\n\n        # \"content_disposition\" [optional] Custom content disposition header\n        #                       String: header\n        'content_disposition': lambda x: 'attachment; filename=\"{}\"'.format(x),\n\n        # \"content_length_range\" [optional] Limit file size\n        #                        Tuple: (from, to) in bytes\n        'content_length_range': (5000, 20000000),\n\n        # \"server_side_encryption\" [optional] Use serverside encryption\n        #                          String: encrytion standard\n        'server_side_encryption': 'AES256',\n\n        # \"allow_existence_optimization\" [optional] Checks to see if file already exists,\n        #                                returns the URL to the object if so (no upload)\n        #                                Boolean: True, False\n        'allow_existence_optimization': False,\n    },\n    'example_destination_two': {\n        'key': lambda filename, args: args + '/' + filename,\n    \t'key_args': 'uploads/images',\n    }\n}\n```\n\n### urls.py\n\n```python\nurlpatterns = [\n    ...\n    url(r'^s3direct/', include('s3direct.urls')),\n    ...\n]\n```\n\nRun ```python manage.py collectstatic``` if required.\n\n## Use in Django admin\n\n### models.py\n\n```python\nfrom django.db import models\nfrom s3direct.fields import S3DirectField\n\nclass Example(models.Model):\n    video = S3DirectField(dest='example_destination')\n```\n\n## Use the widget in a custom form\n\n### forms.py\n\n```python\nfrom django import forms\nfrom s3direct.widgets import S3DirectWidget\n\nclass S3DirectUploadForm(forms.Form):\n    images = forms.URLField(widget=S3DirectWidget(dest='example_destination'))\n```\n\n__*Optional.__ You can modify the HTML of the widget by overiding template __s3direct/templates/s3direct-widget.tpl__\n\n### views.py\n\n```python\nfrom django.views.generic import FormView\nfrom .forms import S3DirectUploadForm\n\nclass MyView(FormView):\n    template_name = 'form.html'\n    form_class = S3DirectUploadForm\n```\n\n### templates/form.html\n\n```html\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>s3direct</title>\n    {{ form.media }}\n</head>\n<body>\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n    </form>\n</body>\n</html>\n```\n\n\n## Examples\n\nExamples of both approaches can be found in the examples folder. To run them:\n\n```shell\n$ git clone git@github.com:bradleyg/django-s3direct.git\n$ cd django-s3direct\n$ python setup.py install\n$ cd example\n\n# Add config to your environment\nexport AWS_ACCESS_KEY_ID='…'\nexport AWS_SECRET_ACCESS_KEY='…'\nexport AWS_STORAGE_BUCKET_NAME='…'\nexport AWS_S3_REGION_NAME='…'\nexport AWS_S3_ENDPOINT_URL='…'\n\n$ python manage.py migrate\n$ python manage.py createsuperuser\n$ python manage.py runserver\n```\n\nVisit ```http://localhost:8000/admin``` to view the admin widget and\n```http://localhost:8000/form``` to view the custom form widget.\n\n## Development\n```shell\n$ git clone git@github.com:bradleyg/django-s3direct.git\n$ cd django-s3direct\n\n# Add your AWS keys/details to .env file and export\n$ cp .env-dist .env\n\n# Build docker image\n$ docker build . --build-arg SKIP_TOX=true -t s3direct\n$ docker run -itv $(pwd):/code -p 8000-8001:8000-8001 --env-file .env s3direct bash\n$ npm i\n\n# Install locally\n$ python setup.py develop\n\n# Run examples\n$ python example/manage.py migrate\n$ python example/manage.py createsuperuser\n$ python example/manage.py runserver 0.0.0.0:8000\n\n# Run tox tests\n$ tox\n\n# Run tests\n$ npm run test\n\n# Run frontend bundler and Django server\n$ npm run dev\n\n# Watch and build frontend (dev)\n$ npm run watch\n\n# Build frontend (prod)\n$ npm run build\n\n# Format python // PEP8\n$ npm run yapf\n\n# Upload to PYPI\n$ npm run pypi\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bradleyg/django-s3direct#readme",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-s3direct",
    "package_url": "https://pypi.org/project/django-s3direct/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-s3direct/",
    "project_urls": {
      "Homepage": "https://github.com/bradleyg/django-s3direct#readme"
    },
    "release_url": "https://pypi.org/project/django-s3direct/1.1.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Add direct uploads to S3 functionality with a progress bar to file input fields.",
    "version": "1.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14161038,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a62d034b5074a8495b48be614021843d8cde265465e0e8f2b72b1c81b5bd0d44",
        "md5": "ef75f7e4156178d53d48e9c5a378963f",
        "sha256": "37ecd7df9b391518a84bfeb2e75be50a39658326aa2dde979a1846c064e59978"
      },
      "downloads": -1,
      "filename": "django-s3direct-1.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ef75f7e4156178d53d48e9c5a378963f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 135307,
      "upload_time": "2019-07-27T15:45:33",
      "upload_time_iso_8601": "2019-07-27T15:45:33.481172Z",
      "url": "https://files.pythonhosted.org/packages/a6/2d/034b5074a8495b48be614021843d8cde265465e0e8f2b72b1c81b5bd0d44/django-s3direct-1.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}