{
  "info": {
    "author": "Thierry Jossermoz",
    "author_email": "thierry.jossermoz@oohlalabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. note::\n\n   For the latest source, discussions, bug reports, etc., please visit the `GitHub repository <https://github.com/jthi3rry/django-pods>`_\n\n\n===========\nDjango Pods\n===========\n\n\n.. image:: https://travis-ci.org/jthi3rry/django-pods.svg?branch=master\n    :target: https://travis-ci.org/jthi3rry/django-pods\n\n.. image:: https://coveralls.io/repos/jthi3rry/django-pods/badge.png?branch=master\n    :target: https://coveralls.io/r/jthi3rry/django-pods\n\n.. image:: https://landscape.io/github/jthi3rry/django-pods/master/landscape.png\n    :target: https://landscape.io/github/jthi3rry/django-pods/master\n\n\nDjango Pods is a minimalist package that lets you configure default settings for your `reusable apps <https://docs.djangoproject.com/en/dev/intro/reusable-apps/>`_, and allows developers using your apps to override these defaults in their own project settings.\n\nThis package is largely inspired by `Django Rest Framework <http://www.django-rest-framework.org/>`_ and `Django AllAuth <http://www.intenct.nl/projects/django-allauth/>`_ and adapted to work with `Django Applications <https://docs.djangoproject.com/en/dev/ref/applications/>`_, but also with any classes extending ``pods.apps.AppSettings``.\n\n\nPreview\n-------\n\nDjango Pods allows developers to customise app settings in two ways:\n\n\n1. Dictionary style (as per `Django Rest Framework <http://www.django-rest-framework.org/>`_)::\n\n\n    YOUR_APP = {\n        \"SETTING\": \"VALUE\"\n    }\n\n\n2. Prefix style::\n\n\n    YOUR_APP_SETTING = \"VALUE\"\n\n\nInstallation\n------------\n::\n\n    pip install django-pods\n\n\nUsage in Reusable Apps\n----------------------\n\n1. If you are publishing a packaged application, add ``django-pods`` to the ``install_requires`` of your ``setup.py``::\n\n\n    setup(\n        name=\"rock_n_roll\",\n        install_requires=[\"django-pods\", ...],\n        ...\n    )\n\n\n2. Add the ``AppSettings`` mixin to your AppConfig implementation in ``rock_n_roll/apps.py``::\n\n\n    from django.apps import AppConfig\n    from pods.apps import AppSettings\n\n\n    class RockNRollConfig(AppSettings, AppConfig):\n        name = 'rock_n_roll'\n        verbose_name = \"Rock ’n’ roll\"\n\n        # Path to app settings module\n        settings_module = \"rock_n_roll.app_settings\"\n\n        # Optional\n        settings_imports = (\"CLASS_TO_IMPORT\",)\n\n        # Optional\n        # defaults to the capitalized class name, e.g. ROCK_N_ROLL_CONFIG\n        settings_key = \"ROCK_N_ROLL\"\n\n\n3. Declare your default app settings in ``rock_n_roll/app_settings.py``::\n\n\n    QUESTION = \"What is your favourite band?\"\n    ANSWER = \"The Rolling Stones\"\n    CLASS_TO_IMPORT = \"path.to.ClassToImport\"\n\n\n4. Access your settings anywhere in your package::\n\n\n    from django.apps import apps\n\n    app = apps.get_app_config('rock_n_roll')\n\n    app.QUESTION\n    # What is your favourite band?\n\n    app.ANSWER\n    # The Rolling Stomes\n\n    app.CLASS_TO_IMPORT\n    # <class 'path.to.ClassToImport'>\n\n\nSettings can also be accessed directly via the class::\n\n\n    from rock_n_roll.apps import RockNRollConfig\n\n\n    RockNRollConfig.QUESTION\n    RockNRollConfig.ANSWER\n    RockNRollConfig.CLASS_TO_IMPORT\n\n\n.. note:: **AppSettings ``settings`` Property**\n\n    ``AppSettings`` implements ``__getattr__`` to proxy to the ``settings`` attributes of the class::\n\n\n        app.QUESTION == app.settings.QUESTION\n\n        # or\n\n        RockNRollConfig.QUESTION == RockNRollConfig.settings.QUESTION\n\n\n.. note:: **Usage with Django < 1.7**\n\n    Prior to Django 1.7, there wasn't a logical place to create a class representing an app. However, any class can extend ``AppSettings``. For example, in ``models.py``::\n\n        from pods.apps import AppSettings\n\n\n        class AnyClass(AppSettings):\n            settings_module = \"rock_n_roll.app_settings\"\n\n\n    Import your app class directly::\n\n        from .models import AnyClass\n\n        AnyClass.QUESTION\n\n\n\nUsage in Projects\n-----------------\n\n\n1. Install the app that uses Django Pods::\n\n\n    pip install rock_n_roll\n\n\n2. Add the app to the ``INSTALLED_APPS`` of your ``project/settings.py``::\n\n\n    INSTALLED_APPS = (\n        ...\n        \"rock_n_roll\",\n        ...\n    )\n\n\n3. Override the app's settings as needed::\n\n\n    # Dictionary style\n    ROCK_N_ROLL = {\n        \"ANSWER\": \"The Beatles\",\n    }\n\n\n    # Prefix style\n    ROCK_N_ROLL_ANSWER = \"The Beatles\"\n\n\nRunning Tests\n-------------\n::\n\n    tox\n\n\nContributions\n-------------\n\nAll contributions and comments are welcome.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jthi3rry/django-pods",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pods",
    "package_url": "https://pypi.org/project/django-pods/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pods/",
    "project_urls": {
      "Homepage": "https://github.com/jthi3rry/django-pods"
    },
    "release_url": "https://pypi.org/project/django-pods/1.1.4/",
    "requires_dist": [
      "Django"
    ],
    "requires_python": "",
    "summary": "App Settings for Django",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3492569,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba642938a12aeea987d8727f49971de87490eccfe21fab2dcfbdbd5231fcefff",
        "md5": "03aa87628e812b64be3a0d059e3b027c",
        "sha256": "2360eaa2db04a06c181837afbc933cab5fb3e8a0971553ba70c17b5cb3873410"
      },
      "downloads": -1,
      "filename": "django_pods-1.1.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03aa87628e812b64be3a0d059e3b027c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6995,
      "upload_time": "2018-01-16T01:42:44",
      "upload_time_iso_8601": "2018-01-16T01:42:44.088773Z",
      "url": "https://files.pythonhosted.org/packages/ba/64/2938a12aeea987d8727f49971de87490eccfe21fab2dcfbdbd5231fcefff/django_pods-1.1.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}