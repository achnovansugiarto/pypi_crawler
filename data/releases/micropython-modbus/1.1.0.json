{
  "info": {
    "author": "brainelectronics",
    "author_email": "info@brainelectronics.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# MicroPython Modbus library\n\n[![Downloads](https://pepy.tech/badge/micropython-modbus)](https://pepy.tech/project/micropython-modbus)\n![Release](https://img.shields.io/github/v/release/brainelectronics/micropython-modbus?include_prereleases&color=success)\n![MicroPython](https://img.shields.io/badge/micropython-Ok-green.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://github.com/brainelectronics/micropython-modbus/actions/workflows/release.yml/badge.svg)](https://github.com/brainelectronics/micropython-modbus/actions/workflows/release.yml)\n\nMicroPython ModBus TCP and RTU library supporting client and host mode\n\n---------------\n\n## General\n\nForked from [Exo Sense Py][ref-sferalabs-exo-sense], based on\n[PyCom Modbus][ref-pycom-modbus] and extended with other functionalities to\nbecome a powerfull MicroPython library\n\n## Installation\n\n<!--\nThe current implementation does only run on a board with external SPI RAM. As\nof now up to 300kB of RAM are required. This is more than an ESP32-D4 Pico\nprovides by default.\n\n`esp32spiram-20220117-v1.18.bin` is used as MicroPython firmware\n-->\n\n### Install required tools\n\nPython3 must be installed on your system. Check the current Python version\nwith the following command\n\n```bash\npython --version\npython3 --version\n```\n\nDepending on which command `Python 3.x.y` (with x.y as some numbers) is\nreturned, use that command to proceed.\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\n\npip install -r requirements.txt\n```\n\n## Setup\n\n### Install package with pip\n\nConnect to a network\n\n```python\nimport network\nstation = network.WLAN(network.STA_IF)\nstation.connect('SSID', 'PASSWORD')\nstation.isconnected()\n```\n\nand install this lib on the MicroPython device like this\n\n```python\nimport upip\nupip.install('micropython-modbus')\n```\n\n### Manually\n\n#### Upload files to board\n\nCopy the module to the MicroPython board and import them as shown below\nusing [Remote MicroPython shell][ref-remote-upy-shell]\n\nOpen the remote shell with the following command. Additionally use `-b 115200`\nin case no CP210x is used but a CH34x.\n\n```bash\nrshell -p /dev/tty.SLAB_USBtoUART --editor nano\n```\n\nPerform the following command to copy all files and folders to the device\n\n```bash\nmkdir /pyboard/lib\nmkdir /pyboard/lib/umodbus\nmkdir /pyboard/registers\n\ncp registers/modbusRegisters-MyEVSE.json /pyboard/registers/\ncp umodbus/* /pyboard/lib/umodbus\n\ncp main.py /pyboard\ncp boot.py /pyboard\n```\n\n### Install additional MicroPython packages\n\nTo use this package with the provided [`boot.py`](boot.py) and\n[`main.py`](main.py) file, additional modules are required, which are not part\nof this repo/package. To install these modules on the device, connect to a\nnetwork and install them via `upip` as follows\n\n```python\nimport upip\nupip.install('micropython-brainelectronics-helper')\n```\n\nor check the README of the\n[brainelectronics MicroPython modules][ref-github-be-mircopython-modules]\n\n## Usage\n\nStart a REPL (may perform a soft reboot), wait for network connection and\nstart performing Modbus requests to the device.\n\nFor further details about a TCP-RTU bridge implementation check the header\ncomment of [`main.py`](main.py).\n\n### Master implementation\n\nAct as host, get Modbus data via RTU or TCP from a client device\n\n```python\n# RTU Master setup\n# act as host, get Modbus data via RTU from a client device\nrtu_pins = (25, 26)         # (TX, RX)\nslave_addr = 10             # bus address of client\nhost = ModbusRTUMaster(\n    baudrate=9600,          # optional, default 9600\n    data_bits=8,            # optional, default 7\n    stop_bits=1,            # optional, default 1\n    parity=None,            # optional, default None\n    pins=rtu_pins)\n\n# TCP Master setup\n# act as host, get Modbus data via TCP from a client device\nhost = ModbusTCPMaster(\n    slave_ip=192.168.178.34,\n    slave_port=180,\n    timeout=5)              # optional, default 5\n\n# READ COILS\ncoil_address = 123\ncoil_status = host.read_coils(\n    slave_addr=slave_addr,\n    starting_addr=123,\n    coil_qty=1)\nprint('Status of coil {}: {}'.format(coil_status, coil_address))\n\n# WRITE COILS\nnew_coil_val = 0\noperation_status = host.write_single_coil(\n    slave_addr=slave_addr,\n    output_address=coil_address,\n    output_value=new_coil_val)\nprint('Result of setting coil {} to {}'.format(coil_address, operation_status))\n\n# READ HREGS\nhreg_address = 93\nregister_value = host.read_holding_registers(\n    slave_addr=slave_addr,\n    starting_addr=hreg_address,\n    register_qty=1,\n    signed=False)\nprint('Status of hreg {}: {}'.format(hreg_address, register_value))\n\n# WRITE HREGS\nnew_hreg_val = 44\noperation_status = self.host.write_single_register(\n                    slave_addr=slave_addr,\n                    register_address=hreg_address,\n                    register_value=new_hreg_val,\n                    signed=False)\nprint('Result of setting hreg {} to {}'.format(hreg_address, operation_status))\n\n# READ ISTS\nist_address = 67\ninput_status = self.host.read_discrete_inputs(\n    slave_addr=slave_addr,\n    starting_addr=ist_address,\n    input_qty=1)\nprint('Status of ist {}: {}'.format(ist_address, input_status))\n\n# READ IREGS\nireg_address = 10\nregister_value = self.host.read_input_registers(\n                    slave_addr=slave_addr,\n                    starting_addr=ireg_address,\n                    register_qty=2,\n                    signed=False)\nprint('Status of ireg {}: {}'.format(ireg_address, register_value))\n```\n\n### Slave implementation\n\nAct as client, provide Modbus data via RTU or TCP to a host device\n\n```python\n# RTU Slave setup\n# act as client, provide Modbus data via RTU to a host device\nrtu_pins = (25, 26)         # (TX, RX)\nslave_addr = 10             # address on bus as client\nclient = ModbusRTU(\n    addr=slave_addr,        # address on bus\n    baudrate=9600,          # optional, default 9600\n    data_bits=8,            # optional, default 7\n    stop_bits=stop_bits,    # optional, default 1\n    parity=parity,          # optional, default None\n    pins=rtu_pins)\n\n# TCP Slave setup\n# act as client, provide Modbus data via TCP to a host device\nlocal_ip = '192.168.4.1'    # IP address\ntcp_port = 502              # port to listen to\n\n\"\"\"\n# to get from MicroPython core functions use this\nimport network\nstation = network.WLAN(network.STA_IF)\nif station.active():\n    if station.isconnected():\n        local_ip = station.ifconfig()[0]\n\"\"\"\n\nclient = ModbusTCP()\nis_bound = False\n\n# check whether client has been bound to an IP and port\nis_bound = client.get_bound_status()\n\nif not is_bound:\n    client.bind(local_ip=local_ip, local_port=tcp_port)\n\n# commond slave register setup, to be used with the Master example above\nregister_definitions = {\n    \"COILS\": {\n        \"EXAMPLE_COIL\": {\n            \"register\": 123,\n            \"len\": 1,\n        }\n    },\n    \"HREGS\": {\n        \"EXAMPLE_HREG\": {\n            \"register\": 93,\n            \"len\": 1,\n        }\n    },\n    \"ISTS\": {\n        \"EXAMPLE_ISTS\": {\n            \"register\": 67,\n            \"len\": 1,\n        }\n    },\n    \"IREGS\": {\n        \"EXAMPLE_IREG\": {\n            \"register\": 10,\n            \"len\": 2,\n        }\n    }\n}\n\n\"\"\"\n# alternatively the register definitions can also be loaded from a JSON file\nimport json\n\nwith open('registers/modbusRegisters-MyEVSE.json', 'r') as file:\n    register_definitions = json.load(file)\n\"\"\"\n\nclient.setup_registers(registers=register_definitions, use_default_vals=True)\n```\n\n### Register configuration\n\nThe available registers are defined by a JSON file, placed inside the\n`/pyboard/registers` folder on the board and selected in [`main.py`](main.py).\n\nAs an [example the registers](registers/modbusRegisters-MyEVSE.json) of a\n[brainelectronics MyEVSE][ref-myevse-be], [MyEVSE on Tindie][ref-myevse-tindie]\nboard is provided with this repo.\n\n## Supported Modbus functions\n\nRefer to the following table for the list of supported Modbus functions.\n\n| ID |Â Description |\n|----|-------------|\n| 1  | Read coils |\n| 2  | Read discrete inputs |\n| 3  | Read holding registers |\n| 4  | Read input registers |\n| 5  | Write single coil |\n| 6  | Write single register |\n| 15 | Write multiple coils |\n| 16 | Write multiple registers |\n\n## Credits\n\nBig thank you to [giampiero7][ref-giampiero7] for the initial implementation\nof this library.\n\n* **sfera-labs** - *Initial work* - [giampiero7][ref-sferalabs-exo-sense]\n* **pycom** - *Initial Modbus work* - [pycom-modbus][ref-pycom-modbus]\n\n<!-- Links -->\n[ref-sferalabs-exo-sense]: https://github.com/sfera-labs/exo-sense-py-modbus\n[ref-pycom-modbus]: https://github.com/pycom/pycom-modbus\n[ref-remote-upy-shell]: https://github.com/dhylands/rshell\n[ref-github-be-mircopython-modules]: https://github.com/brainelectronics/micropython-modules\n[ref-myevse-be]: https://brainelectronics.de/\n[ref-myevse-tindie]: https://www.tindie.com/stores/brainelectronics/\n[ref-giampiero7]: https://github.com/giampiero7\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brainelectronics/micropython-modbus",
    "keywords": "micropython,modbus,tcp,rtu,client,host,library",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-modbus",
    "package_url": "https://pypi.org/project/micropython-modbus/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-modbus/",
    "project_urls": {
      "Bug Reports": "https://github.com/brainelectronics/micropython-modbus/issues",
      "Homepage": "https://github.com/brainelectronics/micropython-modbus",
      "Source": "https://github.com/brainelectronics/micropython-modbus"
    },
    "release_url": "https://pypi.org/project/micropython-modbus/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MicroPython ModBus TCP and RTU library supporting client and host mode",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17366543,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1015070ad1d53f33d317447f6fc052a33c2d9d2609bba789e5e4b53e8c9ffc8",
        "md5": "9bf63886ac7e3332fc37170755119d9e",
        "sha256": "f1fc38cd1fc7431400090b2660d494aacab4bcb71ca0ca33cdbaa135193222be"
      },
      "downloads": -1,
      "filename": "micropython-modbus-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bf63886ac7e3332fc37170755119d9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18438,
      "upload_time": "2022-11-03T10:27:07",
      "upload_time_iso_8601": "2022-11-03T10:27:07.741398Z",
      "url": "https://files.pythonhosted.org/packages/f1/01/5070ad1d53f33d317447f6fc052a33c2d9d2609bba789e5e4b53e8c9ffc8/micropython-modbus-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}