{
  "info": {
    "author": "Corilo, Yuri",
    "author_email": "corilo@pnnl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Table of Contents  \n- Introduction\n  - [MetaMS](#MetaMS)  \n  - [Version](#current-version)  \n  - [Data Input](#data-input-formats)  \n  - [Data Output](#data-output-formats)  \n  - [Data Structure](#data-structure-types)  \n  - [Features](#available-features)  \n- Installation\n  - [PyPi](#metams-installation)  \n- Execution:  \n  - [CLI](#execution)  \n  - [MiniWDL](#MiniWDL)  \n  - [Docker Container](#metams-docker-container)  \n# MetaMS\n\n**MetaMS** is a workflow for metabolomics data processing and annotation\n\n## Current Version\n\n### `2.0.3`\n\n### Data input formats\n\n- ANDI NetCDF for GC-MS (.cdf)\n- CoreMS self-containing Hierarchical Data Format (.hdf5)\n- ChemStation Agilent (Ongoing)\n\n### Data output formats\n\n- Pandas data frame (can be saved using pickle, h5, etc)\n- Text Files (.csv, tab separated .txt, etc)\n- Microsoft Excel (xlsx)\n- JSON for workflow metadata\n- Self-containing Hierarchical Data Format (.hdf5) including raw data and ime-series data-point for processed data-sets with all associated metadata stored as json attributes\n\n### Data structure types\n\n- GC-MS\n\n## Available features\n\n### Signal Processing\n\n- Baseline detection, subtraction, smoothing \n- m/z based Chromatogram Peak Deconvolution,\n- Manual and automatic noise threshold calculation\n- First and second derivatives peak picking methods\n- Peak Area Calculation\n\n\n### Calibration\n\n- Retention Index Linear XXX method \n\n### Compound Identification\n\n- Automatic local (SQLite) or external (MongoDB or PostgreSQL) database check, generation, and search\n- Automatic molecular match algorithm with all spectral similarity methods \n\n## MetaMS Installation\n\n- PyPi:     \n```bash\npip3 install metams\n```\n\n- From source:\n ```bash\npip3 install --editable .\n```\n\nTo be able to open chemstation files a installation of pythonnet is needed:\n- Windows: \n    ```bash\n    pip3 install pythonnet\n    ```\n\n- Mac and Linux:\n    ```bash\n    brew install mono\n    pip3 install pythonnet   \n    ```\n\n## Execution\n\n```bash\nmetaMS dump_json_template MetamsFile.json\n```\n```bash\nmetaMS dump_corems_json_template CoremsFile.json\n```\n\n Modify the MetamsFile.json and CoremsFile.json accordingly to your dataset and workflow parameters\nmake sure to include CoremsFile.json path inside the MetamsFile.json: \"corems_json_path\": \"path_to_CoremsFile.json\" \n\n```bash\nmetaMS run-gcms-workflow path_to_MetamsFile.json\n```\n\n## MiniWDL \n- Change wdl/metams_input.json to specify the data location\n\n- Change data/CoremsFile.json to specify the workflow parameters\n\nInstall miniWDL:\n```bash\npip3 install miniwdl\n```\n\nCall:\n```bash\nminiwdl run wdl/metaMS.wdl -i wdl/metams_input.json --verbose --no-cache --copy-input-files\n```\n## MetaMS Docker Container\n\nA docker image containing the MetaMS command line as the entry point\n\nIf you don't have docker installed, the easiest way is to [install docker for desktop](https://hub.docker.com/?overlay=onboarding)\n\n- Pull from Docker Registry:\n\n    ```bash\n    docker pull corilo/metams:latest\n    \n    ```\n- or Build the image from source:\n\n    ```bash\n    docker build -t metams:latest .\n    ```\n- Run Workflow from Container:\n\n    $(data_dir) = full path of directory containing the gcms data, MetamsFile.json and CoremsFile.json\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest metaMS run-gcms-workflow /metaB/data/MetamsFile.json\n    ```\n\n- Getting the parameters templates:\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest metaMS dump_json_template /metaB/data/MetamsFile.json\n    ```\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest metaMS dump_corems_json_template /metaB/data/CoremsFile.json\n    ```\n\n## Disclaimer\n\nThis material was prepared as an account of work sponsored by an agency of the\nUnited States Government.  Neither the United States Government nor the United\nStates Department of Energy, nor Battelle, nor any of their employees, nor any\njurisdiction or organization that has cooperated in the development of these\nmaterials, makes any warranty, express or implied, or assumes any legal\nliability or responsibility for the accuracy, completeness, or usefulness or\nany information, apparatus, product, software, or process disclosed, or\nrepresents that its use would not infringe privately owned rights.\n\nReference herein to any specific commercial product, process, or service by\ntrade name, trademark, manufacturer, or otherwise does not necessarily\nconstitute or imply its endorsement, recommendation, or favoring by the United\nStates Government or any agency thereof, or Battelle Memorial Institute. The\nviews and opinions of authors expressed herein do not necessarily state or\nreflect those of the United States Government or any agency thereof.\n\n                 PACIFIC NORTHWEST NATIONAL LABORATORY\n                              operated by\n                                BATTELLE\n                                for the\n                   UNITED STATES DEPARTMENT OF ENERGY\n                    under Contract DE-AC05-76RL01830",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EMSL-Computing/MetaMS",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaMS",
    "package_url": "https://pypi.org/project/metaMS/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaMS/",
    "project_urls": {
      "Homepage": "https://github.com/EMSL-Computing/MetaMS"
    },
    "release_url": "https://pypi.org/project/metaMS/2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data processing, and annotation for metabolomics analysis by low-resolution GC-MS",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10737329,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d611e9ade195fb62637bc2ba8f25e32185a18694e937a8a3ee8903459e653cf",
        "md5": "39f76ff05d3e53aac30ea56ee27125e2",
        "sha256": "483206fc74a4880c87581570debad85185ace116a77380d0db23d9ff50fbcdd9"
      },
      "downloads": -1,
      "filename": "metaMS-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "39f76ff05d3e53aac30ea56ee27125e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3825,
      "upload_time": "2020-12-10T19:28:00",
      "upload_time_iso_8601": "2020-12-10T19:28:00.761428Z",
      "url": "https://files.pythonhosted.org/packages/4d/61/1e9ade195fb62637bc2ba8f25e32185a18694e937a8a3ee8903459e653cf/metaMS-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}