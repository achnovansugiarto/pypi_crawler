{
  "info": {
    "author": "Corilo, Yuri",
    "author_email": "corilo@pnnl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# MetaMS\n\n**MetaMS** is a workflow for metabolomics data processing and annotation\n\n## Current Version\n\n### `1.0.0`\n\n### Data input formats\n\n- ANDI NetCDF for GC-MS (.cdf)\n- CoreMS self-containing Hierarchical Data Format (.hdf5)\n- ChemStation Agilent (Ongoing)\n\n### Data output formats\n\n- Pandas data frame (can be saved using pickle, h5, etc)\n- Text Files (.csv, tab separated .txt, etc)\n- Microsoft Excel (xlsx)\n- JSON for workflow metadata\n- Self-containing Hierarchical Data Format (.hdf5) including raw data and ime-series data-point for processed data-sets with all associated metadata stored as json attributes\n\n### Data structure types\n\n- GC-MS\n\n## Available features\n\n### Signal Processing\n\n- Baseline detection, subtraction, smoothing \n- Manual and automatic noise threshold calculation\n- First and second derivatives peak picking methods\n- Peak Area Calculation\n- EIC Chromatogram deconvolution(TODO)\n\n### Calibration\n\n- Retention Index Linear XXX method \n\n### Compound Identification\n\n- Automatic local (SQLite) or external (MongoDB or PostgreSQL) database check, generation, and search\n- Automatic molecular match algorithm with all spectral similarity methods \n\n## MetaMS Installation\n\n- PyPi:     \n```bash\npip3 install metams\n```\n\n- From source:\n ```bash\npip3 install --editable .\n```\n\nTo be able to open chemstation files a installation of pythonnet is needed:\n- Windows: \n    ```bash\n    pip3 install pythonnet\n    ```\n\n- Mac and Linux:\n    ```bash\n    brew install mono\n    pip3 install pythonnet   \n    ```\n\n## Usage\n\n```bash\nmetaMS dump_json_template MetamsFile.json\n```\n```bash\nmetaMS dump_corems_json_template CoremsFile.json\n```\n\n Modify the MetamsFile.json and CoremsFile.json accordingly to your dataset and workflow parameters\nmake sure to include CoremsFile.json path inside the MetamsFile.json: \"corems_json_path\": \"path_to_CoremsFile.json\" \n\n```bash\nmetaMS run-gcms-workflow path_to_MetamsFile.json\n```\n\n## MetaMS Docker \n\nA docker image containing the MetaMS command line as the entry point\n\nIf you don't have docker installed, the easiest way is to [install docker for desktop](https://hub.docker.com/?overlay=onboarding)\n\n- Pull from Docker Registry:\n\n    ```bash\n    docker pull corilo/metams:latest\n    \n    ```\n\n- Build the image from source:\n\n    ```bash\n    docker build -t metams:latest .\n    ```\n- Run Workflow from Container:\n\n    $(data_dir) = dir_containing the gcms data, MetamsFile.json and CoremsFile.json\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest run-gcms-workflow /metaB/data/MetamsFile.json    \n    ```\n\n- Getting the parameters templates:\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest dump_json_template /metaB/data/MetamsFile.json    \n    ```\n    \n    ```bash\n    docker run -v $(data_dir):/metaB/data corilo/metams:latest dump_corems_json_template /metaB/data/CoremsFile.json\n    ```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.pnnl.gov/mass-spectrometry/metaMS",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaMS",
    "package_url": "https://pypi.org/project/metaMS/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaMS/",
    "project_urls": {
      "Homepage": "https://gitlab.pnnl.gov/mass-spectrometry/metaMS"
    },
    "release_url": "https://pypi.org/project/metaMS/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Data processing, and annotation for metabolomics analysis by low-resolution GC-MS",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10737329,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce4eca54902fd6209ca93643a306c351718b1015b115886092f9b2af5ffd6c77",
        "md5": "5e01c190341b3eb0abe9d79915f776c2",
        "sha256": "a4c199afcbb868e13720ce751b7b2aed7350c86bc541018f2a3ec32f096adea5"
      },
      "downloads": -1,
      "filename": "metaMS-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e01c190341b3eb0abe9d79915f776c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2736,
      "upload_time": "2020-04-21T20:16:01",
      "upload_time_iso_8601": "2020-04-21T20:16:01.099502Z",
      "url": "https://files.pythonhosted.org/packages/ce/4e/ca54902fd6209ca93643a306c351718b1015b115886092f9b2af5ffd6c77/metaMS-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}