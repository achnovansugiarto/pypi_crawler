{
  "info": {
    "author": "ParallelM",
    "author_email": "info@parallelm.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# README\n\nThe `mlcomp` module is designed to process and run complex PySpark pipelines, which contain\nmultiple PySpark components. These components can be uploaded by the user.\n\n## How to build and upload a component\n\n#### Steps\n\n- Create a folder, whose name corresponds to the component's name (.e.g pi_calc)\n\n- Create a `component.json` file (json format) inside this folder and make sure to fill in all the following\n  fields:\n\n        {\n            \"engineType\": \"PySpark\",\n            \"language\": \"Python\",\n            \"userStandalone\": false,\n            \"name\": \"<Component name (.e.g pi_calc)>\",\n            \"label\": \"<A lable that is displayed in the UI>\",\n            \"version\": \"<Component's version (e.g. 1.0.0)>\",\n            \"group\": \"<One of the valid groups (.e.g \"Algorithms\")>,\n            \"program\": \"<The Python component main script (.e.g pi_calc.py)>\",\n            \"componentClass\": \"<The component class name (.e.g PiCalc)>\",\n            \"useMLStats\": <true|false - whether the components uses mlstats>,\n            \"inputInfo\": [\n                {\n                 \"description\": \"<Description>\",\n                 \"label\": \"<Lable name>\",\n                 \"defaultComponent\": \"\",\n                 \"type\": \"<A type used to verify matching connected legs (e.g 'org.apache.spark.rdd.RDD[int]')>,\n                 \"group\": \"<data|model|prediction|statistics|other>\"\n                },\n                {...}\n            ],\n            \"outputInfo\": [\n                <Same as inputInfo above>\n            ],\n            \"arguments\": [\n                {\n                    \"key\": \"<Unique argument key name>\",\n                    \"type\": \"int|long|float|str|bool\",\n                    \"label\": \"<A lable that is displayed in the UI>\",\n                    \"description\": \"<Description>\",\n                    \"optional\": <true|false>\n                }\n            ]\n        }\n\n- Create the main component script, which contains the component's class name. This class\n  should inherit from a 'Component' base class, which is taken from `parallelm.components.component`.\n  The class must implement the `materialize` function, with this prototype:\n  `def materialize(self, sc, parents_rdds)`. Here is a complete self contained example:\n\n        import numpy as np\n        from parallelm.components.component import Component\n\n\n        class NumGen(Component):\n            num_samples = 0\n\n            def __init__(self):\n                super(self.__class__, self).__init__()\n\n            def materialize(self, sc, parents_rdds):\n                num_samples = self._params['num_samples']\n                self._logger.info(\"Num samples: {}\".format(num_samples))\n\n                rdd = sc.parallelize([0] * num_samples).map(NumGen._rand_num)\n                return [rdd]\n\n            @staticmethod\n            def _rand_num(x):\n                return (np.random.random(), np.random.random())\n\n  Notes:\n    - `num_samples` is an argument to the given component and thus can be read from `self._params`.\n    - A component can use `self._logger` object to print logs. It is defined in the base `Component` class.\n    - In this case the component uses the `numpy` module.\n    - A static function can be used in the `map` api of an `RDD` (.e.g `NumGen._rand_num`).\n\n- Place the components main program (*.py) inside that folder along with any other\n  desired files.\n\n- Pack the folder, using the `tar` tool. The extension should be `.tar`:\n\n        > tar cf pi_calc.tar ./pi_calc\n\n- Use the MLOps center UI to upload the component.\n\n\n**Note:** Complete example components can be found under `./test/comp-to-upload/parallelm/uploaded_components/`\n\n\n## Tools\n\nHandy tools are located under `./bin` folder. These tools are used by the build system\nas well as the testing tools.\n\n\n### create-egg.sh\n\nBuilds and generates new `egg` distribution. The result is placed under `./dist` folder.\n\n\n### cleanup.sh\n\nCleanups all generated products created by the `create-egg.sh`\n\n\n## Testing\n\nThe whole module can be tested by running the `./test/run-test.sh` tool. This tool\ncan be run in either local or external (default) modes.\n\n* Local mode (`--run-locally`) - Run Spark locally with as many worker threads as logical cores on your machine.\n  The local mode means that the Spark is embedded withing the driver itself and does not\n  require an external standalone Spark cluster.\n* External mode (**default**) - Submit the application to a standalone cluster that run on the same\n  machine. It is required to run the spark cluster on the `localhost` interface (It can be\n  achieved by setting an env variable as follows: `SPARK_MASTER_HOST=localhost`).\n  <b>Note: You may also run `<reflex-root>/tools/local-dev/start-externals.sh`, which runs\n  the Spark cluster as necessary.\n\n\n### Example Components\n\nExample components are located under: `./test/comp-to-upload/parallelm/uploaded_components`.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/src/main/python/mlcomp",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-comp",
    "package_url": "https://pypi.org/project/ml-comp/",
    "platform": "",
    "project_url": "https://pypi.org/project/ml-comp/",
    "project_urls": {
      "Homepage": "https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/src/main/python/mlcomp"
    },
    "release_url": "https://pypi.org/project/ml-comp/1.1.0/",
    "requires_dist": [
      "ml-ops",
      "termcolor",
      "flask",
      "psutil",
      "py4j",
      "enum"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "An engine for running component based ML pipelines",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6199504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2df67e38962d11cc99156b425bc77c227240d57c14049b2e20e4cfdf1f3c1be8",
        "md5": "e8613dcd8a48d250879de07e601d992d",
        "sha256": "9c76567fe5ee1cd1b1b98ca1d1df4619ee2ea791d735fe38561ff9229c3dac3b"
      },
      "downloads": -1,
      "filename": "ml_comp-1.1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8613dcd8a48d250879de07e601d992d",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 78811,
      "upload_time": "2019-02-14T14:23:47",
      "upload_time_iso_8601": "2019-02-14T14:23:47.435373Z",
      "url": "https://files.pythonhosted.org/packages/2d/f6/7e38962d11cc99156b425bc77c227240d57c14049b2e20e4cfdf1f3c1be8/ml_comp-1.1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8142191d0f3c55494d6a7bc487f78a224fa8e8f6632e1a1796ec9eebf632619",
        "md5": "3918f30b745ef3ba53dbd681d309da24",
        "sha256": "26739747db59fa4ddc771b9763860cd7eebeee6dcabd6509141815631a011f64"
      },
      "downloads": -1,
      "filename": "ml_comp-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3918f30b745ef3ba53dbd681d309da24",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 78803,
      "upload_time": "2019-02-14T14:23:48",
      "upload_time_iso_8601": "2019-02-14T14:23:48.913036Z",
      "url": "https://files.pythonhosted.org/packages/c8/14/2191d0f3c55494d6a7bc487f78a224fa8e8f6632e1a1796ec9eebf632619/ml_comp-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17ab16e967152006e856e61a4bb53225e0413f798cb7a2e9e7bcbcda3d674ebd",
        "md5": "873575c761dd9b27618ff98a2976227a",
        "sha256": "8acf3d7d495f7d8ee5c89f70e601e7eb1a99c4087b19f94a0fab1aafc7350ae8"
      },
      "downloads": -1,
      "filename": "ml-comp-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "873575c761dd9b27618ff98a2976227a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 46366,
      "upload_time": "2019-02-14T14:23:50",
      "upload_time_iso_8601": "2019-02-14T14:23:50.293778Z",
      "url": "https://files.pythonhosted.org/packages/17/ab/16e967152006e856e61a4bb53225e0413f798cb7a2e9e7bcbcda3d674ebd/ml-comp-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}