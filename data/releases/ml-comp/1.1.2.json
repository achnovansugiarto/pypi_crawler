{
  "info": {
    "author": "ParallelM",
    "author_email": "info@parallelm.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# README\n\nThe `mlcomp` module is designed to process and execute 'MCenter' complex pipelines,\nwhich consists of one or more component chained together such that output of a\nprevious component becomes the input to the next component. Each pipeline has a\nparticular purpose, such as to train a model or generate inferences.\n\nA single pipeline may include component from different languages, such as Python,\nR and Java.\n\n## How to construct a component\n\n#### Steps\n\n- Create a folder, whose name corresponds to the component's name (.e.g source_string)\n\n- Create a `component.json` file (json format) inside this folder and make sure to\n  fill in all the following fields:\n\n        {\n            \"engineType\": \"Python\",\n            \"language\": \"Python\",\n            \"userStandalone\": false,\n            \"name\": \"<Component name (.e.g string_source)>\",\n            \"label\": \"<A lable that is displayed in the UI>\",\n            \"version\": \"<Component's version (e.g. 1.0.0)>\",\n            \"group\": \"<One of the valid groups (.e.g \"Connectors\")>,\n            \"program\": \"<The Python component main script (.e.g string_source.py)>\",\n            \"componentClass\": \"<The component class name (.e.g StringSource)\n            \"useMLStats\": <true|false - whether the components uses mlstats>,\n            \"inputInfo\": [\n                {\n                 \"description\": \"<Description>\",\n                 \"label\": \"<Lable name>\",\n                 \"defaultComponent\": \"\",\n                 \"type\": \"<A type used to verify matching connected legs>,\n                 \"group\": \"<data|model|prediction|statistics|other>\"\n                },\n                {...}\n            ],\n            \"outputInfo\": [\n                <Same as inputInfo above>\n            ],\n            \"arguments\": [\n                {\n                    \"key\": \"<Unique argument key name>\",\n                    \"type\": \"int|long|float|str|bool\",\n                    \"label\": \"<A lable that is displayed in the UI>\",\n                    \"description\": \"<Description>\",\n                    \"optional\": <true|false>\n                }\n            ]\n        }\n\n- Create the main component script, which contains the component's class name.\n  This class should inherit from a 'Component' base class, which is taken from\n  `parallelm.components.component`. The class must implement the `materialize`\n  function, with this prototype: `def _materialize(self, parent_data_objs, user_data)`.\n  Here is a complete self contained example:\n\n        from parallelm.components import ConnectableComponent\n        from parallelm.mlops import mlops\n\n\n        class StringSource(ConnectableComponent):\n            def __init__(self, engine):\n                super(self.__class__, self).__init__(engine)\n\n            def _materialize(self, parent_data_objs, user_data):\n                self._logger.info(\"Inside string source component\")\n                str_value = self._params.get('value', \"default-string-value\")\n\n                mlops.set_stat(\"Specific stat title\", 1.0)\n                mlops.set_stat(\"Specific stat title\", 2.0)\n\n                return [str_value]\n\n\n  Notes:\n    - A component can use `self._logger` object to print logs.\n    - A component may access to pipeline parameters via `self._params` dictionary.\n    - The `_materialize` function should return a list of objects or None otherwise.\n      This returned value will be used as an input for the next component\n      in the pipeline chain.\n\n- Place the components main program (*.py) inside a folder along with its json\n  description file and any other desired files.\n\n\n## How to construct a pipeline\n\n#### Steps\n\n- Open any text editor and copy the following template:\n\n        {\n            \"name\": \"Simple MCenter runner test\",\n            \"engineType\": \"Python\",\n            \"pipe\": [\n                {\n                    \"name\": \"Source String\",\n                    \"id\": 1,\n                    \"type\": \"string-source\",\n                    \"parents\": [],\n                    \"arguments\": {\n                        \"value\": \"Hello World: testing string source and sink\"\n                    }\n                },\n                {\n                    \"name\": \"Sink String\",\n                    \"id\": 2,\n                    \"type\": \"string-sink\",\n                    \"parents\": [{\"parent\": 1, \"output\": 0}],\n                    \"arguments\": {\n                        \"expected-value\": \"Hello World: testing string source and sink\"\n                    }\n                }\n            ]\n        }\n\n  Notes:\n    - It is assumed that you've already constructed two components whose names\n      are: `string-source` and `string-sink`\n    - The output of `string-source` component (the value returned from\n      `_materialize` function) is supposed to become the input of `string-sink`\n      component (an input to the `_materialize` function)\n\n- Save it with any desired name\n\n\n## How to test\n\nOnce the `ml-comp` python package is installed, a command line `mlpiper` is installed\nand can be used to execute the pipeline above and the components described in it.\n\nThere three main commnads that can be used as follows:\n\n  - **deploy** - deploys a pipeline along with provided components into a given\n                 folder. Once deployed, it can also be executed directly from \n                 the given folder.\n\n  - **run** - deploys and executes the pipeline at once.\n\n  - **run-deployment** - executes an already deployed pipeline.\n\n\n#### Examples:\n\n  - Prepare a deployment. The resulted dirbe copied to a docker container and run\n    there\n\n        mlpiper deploy -p p1.json -r ~/dev/components -d /tmp/pp\n\n  - Deploy & Run. Usefull for development and debugging\n\n        mlpiper run -p p1.json -r ~/dev/components -d /tmp/pp\n\n  - Run a deployment. Usually non interactive called by another script\n\n        mlpiper run-deployment --deployment-dir /tmp/pp\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/src/main/python/mlcomp",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-comp",
    "package_url": "https://pypi.org/project/ml-comp/",
    "platform": "",
    "project_url": "https://pypi.org/project/ml-comp/",
    "project_urls": {
      "Homepage": "https://github.com/mlpiper/mlpiper/tree/master/reflex-algos/src/main/python/mlcomp"
    },
    "release_url": "https://pypi.org/project/ml-comp/1.1.2/",
    "requires_dist": [
      "ml-ops",
      "termcolor",
      "flask",
      "psutil",
      "py4j",
      "enum"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "An engine for running component based ML pipelines",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6199504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bce8a4b36f38e6c02e73d93c667aeb3e33706737a090f7aff66ca57409a32010",
        "md5": "b55352eaab6a66b7cad32fa734a3901c",
        "sha256": "0f1001e5c29320bf581bb0e75cbe379f28d525d92f81217a5f23289f325ec2ea"
      },
      "downloads": -1,
      "filename": "ml_comp-1.1.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "b55352eaab6a66b7cad32fa734a3901c",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 78904,
      "upload_time": "2019-02-14T15:56:31",
      "upload_time_iso_8601": "2019-02-14T15:56:31.767759Z",
      "url": "https://files.pythonhosted.org/packages/bc/e8/a4b36f38e6c02e73d93c667aeb3e33706737a090f7aff66ca57409a32010/ml_comp-1.1.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd02e2d9453418ebab2923d894467df9b651b91be5e800bdadb7d0e9f4a0f913",
        "md5": "b155d6d59d1469518680e70c9e2dc361",
        "sha256": "9b94f0583107419c2ac50be3ff50e5b8c082866643f37fd713f570332df7c810"
      },
      "downloads": -1,
      "filename": "ml_comp-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b155d6d59d1469518680e70c9e2dc361",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 78899,
      "upload_time": "2019-02-14T15:56:33",
      "upload_time_iso_8601": "2019-02-14T15:56:33.540665Z",
      "url": "https://files.pythonhosted.org/packages/dd/02/e2d9453418ebab2923d894467df9b651b91be5e800bdadb7d0e9f4a0f913/ml_comp-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ae75f28591677874e80967026995f017031e35798c94a770941d0a2699cb0a7",
        "md5": "7be42ba5d0e7f5d887008975f0dc311d",
        "sha256": "8dd120bad5a0e10c8edda044d5fe3dcb22dd26f8f5b1982d0479ebb865138a5a"
      },
      "downloads": -1,
      "filename": "ml-comp-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7be42ba5d0e7f5d887008975f0dc311d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 46702,
      "upload_time": "2019-02-14T15:56:35",
      "upload_time_iso_8601": "2019-02-14T15:56:35.400766Z",
      "url": "https://files.pythonhosted.org/packages/7a/e7/5f28591677874e80967026995f017031e35798c94a770941d0a2699cb0a7/ml-comp-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}