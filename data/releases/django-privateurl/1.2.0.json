{
  "info": {
    "author": "Igor Melnyk @liminspace",
    "author_email": "liminspace@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "#################\ndjango-privateurl\n#################\n.. image:: https://travis-ci.org/liminspace/django-privateurl.svg?branch=master\n :target: https://travis-ci.org/liminspace/django-privateurl\n :alt: build\n\n.. image:: https://img.shields.io/pypi/v/django-privateurl.svg\n :target: https://pypi.org/project/django-privateurl/\n :alt: pypi\n\nThis application helps You easy and flexibly implement different features that need use private url\nfor users like registration confirmation, password recovery, access to paid content and so on.\n\nLow level API provides You full control and allow:\n\n* limiting private url by time and hits\n* auto removing urls that won't be used\n* knowing number of hits, date of first and last hit for each url\n* controlling token generator\n* saving additional data in JSON format and using it at url hits\n* processing succeeded or failed hits using django signals and controlling server responses\n\n============\nInstallation\n============\n\n**Requirements:**\n\n* Django v1.8+\n\n**\\1\\. Install** ``django-privateurl``.\n\n* Via pip::\n\n  $ pip install django-privateurl\n\n* Via setuptools::\n\n  $ easy_install django-privateurl\n\n For install development version use ``git+https://github.com/liminspace/django-privateurl.git@develop``\n instead ``django-privateurl``.\n\n**\\2\\. Set up** ``settings.py`` **in your django project.** ::\n\n  INSTALLED_APPS = (\n    ...,\n    'privateurl',\n  )\n\n**\\3\\. Add url pattern in** ``urls.py``::\n\n  urlpatterns = [\n      ...\n      url(r'^private/', include('privateurl.urls', namespace='privateurl')),\n  ]\n\n**\\4\\. Run migrate**::\n\n  $ manage.py migrate\n\n=====\nUsage\n=====\n\nFirst you need create PrivateUrl using ``create`` class method::\n\n  PrivateUrl.create(action, user=None, expire=None, data=None, hits_limit=1, auto_delete=False,\n                    token_size=None, replace=False, dashed_piece_size=None)\n\n* ``action`` -- is a slug that using in url and allow distinguish one url of another\n* ``user`` -- is user instance that you can get in request process\n* ``expire`` -- is expiration date for private url. You can set ``datetime`` or ``timedelta``\n* ``data`` -- is additional data that will be saved as JSON. Setting a dict object is good idea\n* ``hits_limit`` -- is limit of requests. Set 0 for unlimit\n* ``auto_delete`` -- set ``True`` if you want remove private url object when it will be not available\n* ``token_size`` -- set length of token. You can set number of size or tuple with min and max size. Keep ``None`` for using value from ``settings.PRIVATEURL_DEFAULT_TOKEN_SIZE``\n* ``replace`` -- set ``True`` if you want remove old exists private url for user and action before creating one\n* ``dashed_piece_size`` -- split token with dash every N symbols. Keep ``None`` for using value from ``settings.PRIVATEURL_DEFAULT_TOKEN_DASHED_PIECE_SIZE``\n\nFor example::\n\n  from privateurl.models import PrivateUrl\n\n  purl = PrivateUrl.create('registration-confirmation', user=user)\n  user.send_email(\n      subject='Registration confirmation',\n      body='Follow the link for confirm your registration: {url}'.format(\n          url=purl.get_absolute_url(),\n      ),\n  )\n\nFor catch private url request you have to create receiver for ``privateurl_ok`` signal::\n\n  from django.dispatch import receiver\n  from dju_privateurl.signals import privateurl_ok, privateurl_fail\n\n  @receiver(privateurl_ok)\n  def registration_confirm(request, obj, action, **kwargs):\n      if action != 'registration-confirmation':\n          return\n      if obj.user:\n          obj.user.registration_confirm(request=request)\n\nif you want process invalid private url, you can create receiver for ``privateurl_fail`` signal::\n\n  from django.dispatch import receiver\n  from dju_privateurl.signals import privateurl_fail\n\n  @receiver(privateurl_fail)\n  def registration_confirm_fail(request, obj, action, **kwargs):\n      if action != 'registration-confirmation':\n          return\n      if obj:\n          # private url is expired or has exceeded ``hits_limit``\n          pass\n      else:\n          # private url doesn't exists or token in url is not correct\n          pass\n\nAfter processing ``privateurl_ok`` signal will be redirected to root page ``/``.\n\nAfter processing ``privateurl_fail`` signal will be raised ``Http404`` exception.\n\nIf you want change this logic you can return ``dict`` with key ``response`` in receiver::\n\n  from django.shortcuts import redirect, render\n  from django.dispatch import receiver\n  from dju_privateurl.signals import privateurl_ok, privateurl_fail\n\n  @receiver(privateurl_ok)\n  def registration_confirm(request, obj, action, **kwargs):\n      if action != 'registration-confirmation':\n          return\n      if obj.user:\n          obj.user.registration_confirm(request=request)\n          obj.user.login()\n          return {'response': redirect('user_profile')}\n\n  @receiver(privateurl_fail)\n  def registration_confirm_fail(request, obj, action, **kwargs):\n      if action != 'registration-confirmation':\n          return\n      return {'response': render(request, 'error_pages/registration_confirm_fail.html', status=404)}\n\nFor getting ``data`` you need use method ``get_data()``::\n\n  @receiver(privateurl_ok)\n  def registration_confirm(request, obj, action, **kwargs):\n      ...\n      data = obj.get_data()\n      ...\n\n========\nSettings\n========\n\n``PRIVATEURL_URL_NAMESPACE`` -- namespace that you setted in ``urls.py``. By default it is ``privateurl``.\n\n``PRIVATEURL_DEFAULT_TOKEN_SIZE`` -- default size of token that will be generated using ``create`` or ``generate_token`` methods. By default it is ``(8, 64)``.\n\n``PRIVATEURL_DEFAULT_TOKEN_DASHED_PIECE_SIZE`` -- default number of size of pieces that joined by dash that using in ``create`` or ``generate_token`` methods. By default it is ``12``.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/liminspace/django-privateurl",
    "keywords": "django,url,private,private url,django-privateurl",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-privateurl",
    "package_url": "https://pypi.org/project/django-privateurl/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-privateurl/",
    "project_urls": {
      "Homepage": "https://github.com/liminspace/django-privateurl"
    },
    "release_url": "https://pypi.org/project/django-privateurl/1.2.0/",
    "requires_dist": [
      "django (<2.3,>=1.8)"
    ],
    "requires_python": "",
    "summary": "Django Private URL",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8255361,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ad62e3152d3d25ccccb3d1123eddd4c586be8987efe10c1c7f88a17738eba11",
        "md5": "02eab7c81c52109cbd25df68045ac7e2",
        "sha256": "3a5824d0cf848451f85f5aab17326a4f3361785541b1c25da072174a9e9e85a4"
      },
      "downloads": -1,
      "filename": "django_privateurl-1.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02eab7c81c52109cbd25df68045ac7e2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16699,
      "upload_time": "2019-04-06T13:08:02",
      "upload_time_iso_8601": "2019-04-06T13:08:02.595649Z",
      "url": "https://files.pythonhosted.org/packages/7a/d6/2e3152d3d25ccccb3d1123eddd4c586be8987efe10c1c7f88a17738eba11/django_privateurl-1.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a5addedb2dc5a83348336222eb49fd9bda59bd8e3c1b788b7c299927fb10712",
        "md5": "5e251e5900f3e8a62cfa9ffd818469e9",
        "sha256": "3a0bc7f0cf6d9f2d0043de591a914ec58d9cc7d7853d99aa12adf76c6cba93dc"
      },
      "downloads": -1,
      "filename": "django-privateurl-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5e251e5900f3e8a62cfa9ffd818469e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12148,
      "upload_time": "2019-04-06T13:08:04",
      "upload_time_iso_8601": "2019-04-06T13:08:04.534994Z",
      "url": "https://files.pythonhosted.org/packages/1a/5a/ddedb2dc5a83348336222eb49fd9bda59bd8e3c1b788b7c299927fb10712/django-privateurl-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}