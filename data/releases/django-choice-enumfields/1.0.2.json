{
  "info": {
    "author": "HZDG, Lubos Matl",
    "author_email": "matllubos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "This package lets you use real Python (PEP435_-style) enums with Django.\n\n.. image:: https://travis-ci.org/druids/django-choice-enumfields.svg?branch=master\n    :target: https://travis-ci.org/druids/django-choice-enumfields\n\n\nInstallation\n------------\n\n1. ``pip install django-choice-enumfields``\n\n\nIncluded Tools\n--------------\n\n\nEnumField, NumEnumField\n```````````````````````\n\n.. code-block:: python\n\n    from enumfields import EnumField\n    from enumfields import ChoiceEnum  # Uses Ethan Furman's \"enum34\" backport\n\n    class Color(ChoiceEnum):\n        RED = 'r'\n        GREEN = 'g'\n        BLUE = 'b'\n\n    class MyModel(models.Model):\n\n        color = EnumField(Color, max_length=1)\n\nElsewhere:\n\n.. code-block:: python\n\n    m = MyModel.objects.filter(color=Color.RED)\n\n``NumEnumField`` works identically, but the underlying storage mechanism is\nan ``IntegerField`` instead of a ``CharField``.\n\n\nEnumSubField, NumEnumSubField\n`````````````````````````````\n\n.. code-block:: python\n\n    from enumfields import EnumField, EnumSubField\n    from enumfields import ChoiceEnum\n\n    class Color(ChoiceEnum):\n        RED = 'r'\n        GREEN = 'g'\n        BLUE = 'b'\n\n    class ColorType(ChoiceEnum):\n        LIGHT = Choice('l', 'light', parents=(Color.RED, Color.BLUE))\n        DARK = Choice('d', 'dark', parents=(Color.RED, Color.GREEN))\n        TRANSPARENT = Choice('t', 'transparent', parents=(Color.GREEN))\n\n    class MyModel(models.Model):\n\n        color = EnumField(Color, max_length=1)\n        color_type = EnumSubField('color', ColorType, max_length=1)\n\n    MyModel(color=Color.RED, color_type=ColorType.LIGHT).full_clean()  # OK\n    MyModel(color=Color.RED, color_type=ColorType.TRANSPARENT).full_clean()  # Raise ValidationError\n\n``EnumSubField`` automatically validates if parents requirement is satisfied.\n\nWith ``EnumSubField``, ``EnumField``, ``NumEnumSubField`` and ``NumEnumField``\ncomes validation of initial and allowed transitions between choices out of the box.\n\n.. code-block:: python\n\n    from enumfields import EnumField\n    from enumfields import Choice, ChoiceEnum\n\n    class StateFlow(ChoiceEnum):\n        START = Choice('s', 'start', next={'PROCESSING'})\n        PROCESSING = Choice('p', 'processing', next={'END'}, initial=False)\n        END = Choice('e', 'end', next=set(), initial=False)\n\n    class MyModel(models.Model):\n\n        state = EnumField(StateFlow, max_length=1)\n\n    MyModel(state=StateFlow.START).full_clean()  # OK\n\n    # Raise ValidationError because PROCESSING is not in initial states\n    MyModel(state=StateFlow.PROCESSING).full_clean()\n\n    model = MyModel.objects.create(StateFlow.START)\n    model.state = StateFlow.END\n    # Raise ValidationError because END is not next state after START\n    model.full_clean()\n\n    model.state = StateFlow.PROCESSING\n    model.full_clean()  # OK\n\n\nUsage in Forms\n~~~~~~~~~~~~~~\n\nCall the ``formfield`` method to use an ``EnumField`` directly in a ``Form``.\n\n.. code-block:: python\n\n    class MyForm(forms.Form):\n\n        color = EnumField(Color, max_length=1).formfield()\n\nChoiceEnum\n``````````\n\nNormally, you just use normal PEP435_-style enums, however, django-choice-enumfields\nalso encludes its own version of ChoiceEnum with a few extra bells and whistles.\nNamely, the smart definition of labels which are used, for example, in admin\ndropdowns. By default, it will create labels by title-casing your constant\nnames. You can provide custom labels with using Choice to define enum item.\n\n.. code-block:: python\n\n    from enumfields import EnumField, ChoiceEnum, Choice  # Our own Enum class\n\n    class Color(ChoiceEnum):\n        RED = Choice('r', 'A custom label')\n        GREEN = 'g'\n        BLUE = 'b'\n\n    class MyModel(models.Model):\n        color = EnumField(Color, max_length=1)\n\n    assert Color.GREEN.label == 'Green'\n    assert Color.RED.label == 'A custom label'\n\n\n.. _PEP435: http://www.python.org/dev/peps/pep-0435/\n\n\nEnumFieldListFilter\n```````````````````\n\n``enumfields.admin.EnumFieldListFilter`` is provided to allow using enums in\n``list_filter``.\n\n\n.. code-block:: python\n\n    from enumfields.admin import EnumFieldListFilter\n\n    class MyModelAdmin(admin.ModelAdmin):\n      list_filter = [('color', EnumFieldListFilter)]",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/druids/django-choice-enumfields",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-choice-enumfields",
    "package_url": "https://pypi.org/project/django-choice-enumfields/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-choice-enumfields/",
    "project_urls": {
      "Homepage": "https://github.com/druids/django-choice-enumfields"
    },
    "release_url": "https://pypi.org/project/django-choice-enumfields/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Real Python Enums for Django.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16301703,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7909c769343b1573013c0d0c992ca90ee7644c6e9ccc6bc51da0ec45159c6aca",
        "md5": "0c9fb079ddd159ea42d1bb1ac2b9df89",
        "sha256": "a6b0206654942fd0010bb469b2eafb9bfe732e205967f40459ea0e708dcd7de1"
      },
      "downloads": -1,
      "filename": "django-choice-enumfields-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0c9fb079ddd159ea42d1bb1ac2b9df89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8861,
      "upload_time": "2019-05-27T21:05:45",
      "upload_time_iso_8601": "2019-05-27T21:05:45.520720Z",
      "url": "https://files.pythonhosted.org/packages/79/09/c769343b1573013c0d0c992ca90ee7644c6e9ccc6bc51da0ec45159c6aca/django-choice-enumfields-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}