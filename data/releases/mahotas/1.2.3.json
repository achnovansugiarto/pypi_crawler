{
  "info": {
    "author": "Luis Pedro Coelho",
    "author_email": "luis@luispedro.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "=======\nMahotas\n=======\nPython Computer Vision Library\n------------------------------\n\n\n|Travis|_\n|Downloads|_\n|License|_\n\n.. |Travis| image:: https://api.travis-ci.org/luispedro/mahotas.png\n.. |Downloads| image:: https://pypip.in/d/mahotas/badge.png\n.. |License| image:: https://pypip.in/license/mahotas/badge.png\n.. _Travis: https://travis-ci.org/luispedro/mahotas\n.. _Downloads: https://pypi.python.org/pypi/mahotas\n.. _License: http://opensource.org/licenses/MIT\n\n\nMahotas is a library of fast computer vision algorithms (all implemented in\nC++) operates over numpy arrays for convenience.\n\nNotable algorithms:\n - watershed.\n - convex points calculations.\n - hit & miss. thinning.\n - Zernike & Haralick, LBP, and TAS features.\n - freeimage based numpy image loading (requires freeimage libraries to be\n   installed).\n - Speeded-Up Robust Features (SURF), a form of local features.\n - thresholding.\n - convolution.\n - Sobel edge detection.\n - spline interpolation\n\nMahotas currently has over 100 functions for image processing and computer\nvision and it keeps growing.\n\nThe release schedule is roughly one release a month and each release brings new\nfunctionality and improved performance. The interface is very stable, though,\nand code written using a version of mahotas from years back will work just fine\nin the current version, except it will be faster (some interfaces are\ndeprecated and will be removed after a few years, but in the meanwhile, you\nonly get a warning). In a few unfortunate cases, there was a bug in the old\ncode and your results will change for the better.\n\nPlease cite `the mahotas paper <http://dx.doi.org/10.5334/jors.ac>`__ (see\ndetails below under Citation_) if you use it in a publication.\n\nExamples\n--------\n\nThis is a simple example of loading a file (called `test.jpeg`) and calling\n`watershed` using above threshold regions as a seed (we use Otsu to define\nthreshold).\n\n::\n\n    # import using ``mh`` abbreviation which is common:\n    import mahotas as mh\n\n    # Load one of the demo images\n    im = mh.demos.load('nuclear')\n\n    # Automatically compute a threshold\n    T_otsu = mh.thresholding.otsu(im)\n\n    # Label the thresholded image (thresholding is done with numpy operations\n    seeds,nr_regions = mh.label(im > T_otsu)\n\n    # Call seeded watershed to expand the threshold\n    labeled = mh.cwatershed(im.max() - im, seeds)\n\nHere is a very simple example of using ``mahotas.distance`` (which computes a\ndistance map)::\n\n    import pylab as p\n    import numpy as np\n    import mahotas as mh\n\n    f = np.ones((256,256), bool)\n    f[200:,240:] = False\n    f[128:144,32:48] = False\n    # f is basically True with the exception of two islands: one in the lower-right\n    # corner, another, middle-left\n\n    dmap = mh.distance(f)\n    p.imshow(dmap)\n    p.show()\n\n(This is under ``mahotas/demos/distance.py``).\n\nHow to invoke thresholding functions::\n\n    import mahotas as mh\n    import numpy as np\n    from pylab import imshow, gray, show, subplot\n    from os import path\n\n    # Load photo of mahotas' author in greyscale\n    photo = mh.demos.load('luispedro', as_grey=True)\n\n    # Convert to integer values (using numpy operations)\n    photo = photo.astype(np.uint8)\n\n    # Compute Otsu threshold\n    T_otsu = mh.otsu(photo)\n    thresholded_otsu = (photo > T_otsu)\n\n    # Compute Riddler-Calvard threshold\n    T_rc = mh.rc(photo)\n    thresholded_rc = (photo > T_rc)\n\n    # Now call pylab functions to display the image\n    gray()\n    subplot(2,1,1)\n    imshow(thresholded_otsu)\n    subplot(2,1,2)\n    imshow(thresholded_rc)\n    show()\n\nAs you can see, we rely on numpy/matplotlib for many operations.\n\nInstall\n-------\n\nYou will need python (naturally), numpy, and a C++ compiler. Then you should be\nable to use::\n\n    pip install mahotas\n\nYou can test your instalation by running::\n\n    python -c \"import mahotas; mahotas.test()\"\n\n\nIf you run into issues, the manual has more `extensive documentation on mahotas\nintallation <http://mahotas.readthedocs.org/en/latest/install.html>`__\n\nCitation\n--------\n\n.. _Citation:\n\nIf you use mahotas on a published publication, please cite:\n\n    **Luis Pedro Coelho** Mahotas: Open source software for scriptable computer\n    vision in Journal of Open Research Software, vol 1, 2013. [`DOI\n    <http://dx.doi.org/10.5334/jors.ac>`__]\n\n\nIn Bibtex format::\n\n    @article{mahotas,\n        author = {Luis Pedro Coelho},\n        title = {Mahotas: Open source software for scriptable computer vision},\n        journal = {Journal of Open Research Software},\n        year = {2013},\n        doi = {http://dx.doi.org/10.5334/jors.ac},\n        month = {July},\n        volume = {1}\n    }\n\n\nYou can access this information using the ``mahotas.citation()`` function.\n\nDevelopment\n-----------\n\nDevelopment happens on github (`http://github.com/luispedro/mahotas <https://github.com/luispedro/mahotas>`__).\n\nYou can set the ``DEBUG`` environment variable before compilation to get a\ndebug version::\n\n    export DEBUG=1\n    python setup.py test\n\nYou can set it to the value ``2`` to get extra checks::\n\n    export DEBUG=2\n    python setup.py test\n\nBe careful not to use this in production unless you are chasing a bug. Debug\nlevel 2 is very slow as it adds many runtime checks.\n\nThe ``Makefile`` that is shipped with the source of mahotas can be useful too.\n``make debug`` will create a debug build. ``make fast`` will create a non-debug\nbuild (you need to ``make clean`` in between). ``make test`` will run the test\nsuite.\n\n\nLinks & Contacts\n----------------\n\n\n*Documentation*: `http://mahotas.readthedocs.org/ <http://mahotas.readthedocs.org/>`__\n\n*Issue Tracker*: `github mahotas issues <https://github.com/luispedro/mahotas/issues>`__\n\n*Mailing List*: Use the `pythonvision mailing list\n<http://groups.google.com/group/pythonvision?pli=1>`_ for questions, bug\nsubmissions, etc. Or ask on `stackoverflow (tag mahotas)\n<http://stackoverflow.com/questions/tagged/mahotas>`__\n\n*Main Author & Maintainer*: `Luis Pedro Coelho <http://luispedro.org>`__ (follow on `twitter\n<https://twitter.com/luispedrocoelho>`__ or `github\n<https://github.com/luispedro>`__).\n\nMahotas also includes code by Zachary Pincus [from scikits.image], Peter J.\nVerveer [from scipy.ndimage], and Davis King [from dlib], Christoph Gohlke, as\nwell as `others <https://github.com/luispedro/mahotas/graphs/contributors>`__.\n\n`Presentation about mahotas for bioimage informatics\n<http://luispedro.org/files/talks/2013/EuBIAS/mahotas.html>`__\n\nFor more general discussion of computer vision in Python, the `pythonvision\nmailing list <http://groups.google.com/group/pythonvision?pli=1>`__ is a much\nbetter venue and generates a public discussion log for others in the future.\nYou can use it for mahotas or general computer vision in Python questions.\n\nRecent Changes\n--------------\n\nVersion 1.2.3 (November 8 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Export mean_filter at top level\n- Fix to Zernike moments computation (reported by Sergey Demurin)\n- Fix compilation in platforms without npy_float128 (patch by Gabi Davar)\n\n\nVersion 1.2.2 (October 19 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Add minlength argument to labeled_sum\n- Generalize regmax/regmin to work with floating point images\n- Allow floating point inputs to ``cwatershed()``\n- Correctly check for float16 & float128 inputs\n- Make sobel into a pure function (i.e., do not normalize its input)\n- Fix sobel filtering\n\nVersion 1.2.1 (July 21 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Explicitly set numpy.include_dirs() in setup.py [patch by Andrew Stromnov]\n\nVersion 1.2 (July 17 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Export locmax|locmin at the mahotas namespace level\n- Break away ellipse_axes from eccentricity code as it can be useful on\n  its own\n- Add ``find()`` function\n- Add ``mean_filter()`` function\n- Fix ``cwatershed()`` overflow possibility\n- Make labeled functions more flexible in accepting more types\n- Fix crash in ``close_holes()`` with nD images (for n > 2)\n- Remove matplotlibwrap\n- Use standard setuptools for building (instead of numpy.distutils)\n- Add ``overlay()`` function\n\nVersion 1.1.1 (July 4 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n- Fix crash in close_holes() with nD images (for n > 2)\n\n1.1.0 (February 12 2014)\n~~~~~~~~~~~~~~~~~~~~~~~~\n- Better error checking\n- Fix interpolation of integer images using order 1\n- Add resize_to & resize_rgb_to\n- Add coveralls coverage\n- Fix SLIC superpixels connectivity\n- Add remove_regions_where function\n- Fix hard crash in convolution\n- Fix axis handling in convolve1d\n- Add normalization to moments calculation\n\nSee the `ChangeLog\n<https://github.com/luispedro/mahotas/blob/master/ChangeLog>`__ for older\nversion.",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mahotas/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://luispedro.org/software/mahotas",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mahotas",
    "package_url": "https://pypi.org/project/mahotas/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/mahotas/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://luispedro.org/software/mahotas"
    },
    "release_url": "https://pypi.org/project/mahotas/1.2.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mahotas: Computer Vision Library",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17077809,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ec41120da4f3b00f09124176a98c26f03432e3a2bbf82204bafda62bf8d5331",
        "md5": "0fe9415320d8c3e4c301a93e1d315239",
        "sha256": "f899f380687090e835616506664ba5f9d0844242f20002005dff6fd01754d4f8"
      },
      "downloads": -1,
      "filename": "mahotas-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0fe9415320d8c3e4c301a93e1d315239",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1520242,
      "upload_time": "2014-11-08T22:48:45",
      "upload_time_iso_8601": "2014-11-08T22:48:45.931911Z",
      "url": "https://files.pythonhosted.org/packages/1e/c4/1120da4f3b00f09124176a98c26f03432e3a2bbf82204bafda62bf8d5331/mahotas-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}