{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "MECO: Multi-objective Evolutionary Compression\n======================================================\n\n|Build|\n|Coverage|\n|Dependendencies|\n|PyPI license|\n|PyPI-version|\n\n\n\n.. |Build| image:: https://img.shields.io/travis/pietrobarbiero/meco?label=Master%20Build&style=for-the-badge\n    :alt: Travis (.org)\n    :target: https://travis-ci.com/pietrobarbiero/meco\n\n.. |Coverage| image:: https://img.shields.io/codecov/c/gh/pietrobarbiero/meco?label=Test%20Coverage&style=for-the-badge\n    :alt: Codecov\n    :target: https://codecov.io/gh/pietrobarbiero/meco\n\n.. |Dependendencies| image:: https://img.shields.io/requires/github/pietrobarbiero/meco?style=for-the-badge\n    :alt: Requires.io\n    :target: https://requires.io/github/pietrobarbiero/meco/requirements/?branch=master\n\n.. |PyPI license| image:: https://img.shields.io/pypi/l/meco.svg?style=for-the-badge\n   :target: https://pypi.python.org/pypi/meco/\n\n.. |PyPI-version| image:: https://img.shields.io/pypi/v/meco?style=for-the-badge\n    :alt: PyPI\n    :target: https://pypi.python.org/pypi/meco/\n\nThe MECO (Multi-objective Evolutionary\nCOmpression) algorithm is a tool to perform:\n\n* dataset compression,\n* feature selection, and\n* coreset discovery.\n\n\nThis python package provides a sklearn-like transformer\nimplementation of the MECO algorithm.\n\nQuick start\n-----------\n\nYou can install the ``meco`` package along with all its dependencies from\n`PyPI <https://pypi.org/project/meco/>`__:\n\n.. code:: bash\n\n    $ pip install meco\n\n\nExample\n------------\n\nFor this simple experiment, let's use the `digits <https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html>`__\ndataset from sklearn. We first need to import the dataset,\na simple sklearn classifier (e.g. Ridge) and the ``MECO`` transformer.\nWe can then load the dataset, create a ``MECO`` model, and\nfit the model on the ``digits`` dataset:\n\n.. code:: python\n\n    from sklearn.datasets import load_digits\n    from sklearn.linear_model import RidgeClassifier\n\n    from meco import MECO\n\n    X, y = load_digits(return_X_y=True)\n\n    model = MECO(RidgeClassifier(random_state=42))\n    model.fit(X, y)\n\nOnce training is over, we get a view of the `compressed`\ninput data ``X`` containing the most relevant samples\n(i.e. a subset of the rows in ``X``, a.k.a. the `coreset`),\nand the most relevant features (i.e. a subset of the columns in ``X``):\n\n.. code:: python\n\n    x_reduced = model.transform(X)\n\nOnce trained, the ``model.best_set_`` dictionary contains:\n\n* the indices of the most relevant samples,\n* the indices of the most relevant features, and\n* the validation accuracy of the compressed dataset ``x_reduced``, e.g.:\n\n.. code:: python\n\n    >>> model.best_set_\n    {\n        'samples': [0, 2, 4, ...],\n        'features': [3, 7, 8, ...],\n        'accuracy': 0.9219,\n    }\n\nThe compressed dataset ``(x_reduced, y_reduced)`` can be used\ninstead of the original dataset ``(X, y)`` to train machine\nlearning models more efficiently:\n\n.. code:: python\n\n    from sklearn.ensemble import RandomForestClassifier\n\n    y_reduced = y[model.best_set_['samples']]\n\n    classifier = RandomForestClassifier(random_state=42)\n    classifier.fit(x_reduced, y_reduced)\n\nTasks\n-----\n\nDataset compression\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nShould you need to compress the **whole** dataset ``X``\n(i.e. for dataset compression), you can set the parameter ``compression``\nto ``'both'`` (this is the **default** behaviour anyway):\n\n.. code:: python\n\n    model = MECO(RidgeClassifier(), compression='both')\n\n\nCoreset discovery\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nShould you need to compress the **rows** of ``X`` only\n(i.e. for coreset discovery), you can set the parameter ``compression``\nto ``'samples'``:\n\n.. code:: python\n\n    model = MECO(RidgeClassifier(), compression='samples')\n\n\nFeature selection\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nShould you need to compress the **columns** of ``X`` only\n(i.e. for feature selection), you can set the parameter ``compression``\nto ``'features'``:\n\n.. code:: python\n\n    model = MECO(RidgeClassifier(), compression='features')\n\n\n\nCiting\n----------\n\nIf you find MECO useful in your research, please consider citing the following papers::\n\n    @inproceedings{barbiero2019novel,\n      title={A Novel Outlook on Feature Selection as a Multi-objective Problem},\n      author={Barbiero, Pietro and Lutton, Evelyne and Squillero, Giovanni and Tonda, Alberto},\n      booktitle={International Conference on Artificial Evolution (Evolution Artificielle)},\n      pages={68--81},\n      year={2019},\n      organization={Springer}\n    }\n\n    @article{barbiero2020uncovering,\n      title={Uncovering Coresets for Classification With Multi-Objective Evolutionary Algorithms},\n      author={Barbiero, Pietro and Squillero, Giovanni and Tonda, Alberto},\n      journal={arXiv preprint arXiv:2002.08645},\n      year={2020}\n    }\n\n\nSource\n------\n\nThe source code and minimal working examples can be found on\n`GitHub <https://github.com/pietrobarbiero/meco>`__.\n\n\nAuthors\n-------\n\n`Pietro Barbiero <http://www.pietrobarbiero.eu/>`__,\n`Giovanni Squillero <https://staff.polito.it/giovanni.squillero/>`__,\nand\n`Alberto Tonda <https://www.researchgate.net/profile/Alberto_Tonda>`__.\n\nLicence\n-------\n\nCopyright 2020 Pietro Barbiero, Giovanni Squillero, and Alberto Tonda.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at: http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/pietrobarbiero/meco.git",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pietrobarbiero/meco",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "P. Barbiero",
    "maintainer_email": "barbiero@tutanota.com",
    "name": "meco",
    "package_url": "https://pypi.org/project/meco/",
    "platform": "",
    "project_url": "https://pypi.org/project/meco/",
    "project_urls": {
      "Download": "https://github.com/pietrobarbiero/meco.git",
      "Homepage": "https://github.com/pietrobarbiero/meco"
    },
    "release_url": "https://pypi.org/project/meco/1.0.0/",
    "requires_dist": [
      "numpy",
      "pandas",
      "inspyred",
      "scikit-learn",
      "sphinx ; extra == 'docs'",
      "sphinx-gallery ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "numpydoc ; extra == 'docs'",
      "matplotlib ; extra == 'docs'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "MECO: Multi-objective Evolutionary Compression.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14170891,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9731f64a7335d7af18e44a536aab16c4aade19f87214674d8d8c0e2a00582cbd",
        "md5": "a4ed0c8f3c61afee004cc40e86149a63",
        "sha256": "ccaaa45c898d72b0d512014003a3c201d21a40bb707d0fb0ef466865a3b37bbd"
      },
      "downloads": -1,
      "filename": "meco-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4ed0c8f3c61afee004cc40e86149a63",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13992,
      "upload_time": "2021-09-13T15:03:42",
      "upload_time_iso_8601": "2021-09-13T15:03:42.676148Z",
      "url": "https://files.pythonhosted.org/packages/97/31/f64a7335d7af18e44a536aab16c4aade19f87214674d8d8c0e2a00582cbd/meco-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dba9e3b0d6f172d0d6709460df6a41a5ead66d2776893e4c84fb1890725efded",
        "md5": "7b4bf8f5eaa96a6510faeea6158d8fcd",
        "sha256": "a43a32731e85235c37c6fa46cb635068840403f090b8eb96d74ff1ea81f63318"
      },
      "downloads": -1,
      "filename": "meco-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7b4bf8f5eaa96a6510faeea6158d8fcd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15212,
      "upload_time": "2021-09-13T15:03:44",
      "upload_time_iso_8601": "2021-09-13T15:03:44.561482Z",
      "url": "https://files.pythonhosted.org/packages/db/a9/e3b0d6f172d0d6709460df6a41a5ead66d2776893e4c84fb1890725efded/meco-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}