{
  "info": {
    "author": "Krzysztof J. Czarnecki",
    "author_email": "kjczarne@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# mkcommit\n\n<img src=\"static/logo.png\" width=\"150\">\n\n`mkcommit` is an extremely simple tool made for commit message generation.\n\nRun `mkcommit` instead of `git commit` and you will be asked questions that keep your commits tidy even when it's 3 AM.\n\n![mkcommit gif](static/mkcommit.gif)\n\n## Why?\n\n### Why would anybody need this? Aren't editors enough?\n\nWhen working in teams it's hard to enforce proper Git commit message style from everyone. This CLI tool asks you questions to build a commit message that you can configure for yourself and your team with a very simple Python script.\n\n### `commitlint` exists. Why `mkcommit`?\n\n`commitlint` is a great tool. But it has considerable learning curve if you want to leverage its full potential. This tool strives to be the exact opposite: provide bare minimum with almost no overhead for your teammates. All they will need to learn is this one command: `mkcommit`.\n\n`mkcommit` is:\n\n- Easy to install - all you need is Python (at least version 3.6).\n- Easy to configure - all you need is basic Python skills or advanced copy-pasting skills.\n- Easy to use - all you need is one command to trigger the commit prompt.\n- Scalable - it can be as complex as you want it, with full Git Hook integration and complex validation rules or just with a plain default Semantic Commit generation out-of-the-box.\n- Pythonic - might suit you better if you're familiar with Python and don't want to venture into the world of JavaScript.\n\n## Installation\n\nIf you have Python set up, you're good to go. Run `pip install mkcommit` and you're done.\n\n## Configuration\n\n1. At the root of your repository create a Python file named `my_repo.mkcommit.py`.\n2. Compose the script:\n\n    A built-in _semantic commit_ suite can be used:\n\n    ```python\n    from mkcommit import CommitMessage, to_stdout\n    from mkcommit.suites import semantic\n\n    def commit():\n        return CommitMessage(semantic.default_short())\n\n    if __name__ == \"__main__\":\n        to_stdout(commit())\n    ```\n\n    If you need to define your own keywords and commit message template, read [Configuration](https://github.com/kjczarne/mkcommit/wiki/Configuration) in our Wiki.\n\n    If you want to learn how to use the hook mode, read [Hooks](https://github.com/kjczarne/mkcommit/wiki/Hooks) in our Wiki.\n3. Run `mkcommit`. Select the discovered configuration file for the list and follow the interactive prompt.\n\n## Usage\n\n- Run `mkcommit` to generate a Git commit message and commit changes (calls `git commit -m` underneath).\n- Run `mkcommit -s` to generate a Git commit message and print it to standard output.\n- Run `mkcommit -c` to generate a Git commmit message and copy it to your clipboard.\n- Use `mkcommit -x \"some commit message\"` to validate an existing commit message from the command line or as a Git Hook command (requires `on_commit(msg)` function to be implemented in the configuration file).\n\nIf you wish to point `mkcommit` to a specific configuration file, use `mkcommit -f /path/to/.mkcommit.py`. You can combine the `-f` flag with all the other available flags.\n\n### Input validation\n\nThe most basic validation strategy we use is [validation at the time of message generation](https://github.com/kjczarne/mkcommit/wiki/Validators).\n\nFor validation of commit messages that aren't originally generated with `mkcommit` you can use [Hooks](https://github.com/kjczarne/mkcommit/wiki/Hooks).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kjczarne/mkcommit",
    "keywords": "git,commit,style,templates",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mkcommit",
    "package_url": "https://pypi.org/project/mkcommit/",
    "platform": "",
    "project_url": "https://pypi.org/project/mkcommit/",
    "project_urls": {
      "Homepage": "https://github.com/kjczarne/mkcommit"
    },
    "release_url": "https://pypi.org/project/mkcommit/1.0.2/",
    "requires_dist": [
      "InquirerPy",
      "pyperclip",
      "prettyprinter",
      "pdoc3 ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "setuptools ; extra == 'dev'",
      "autopep8 ; extra == 'dev'",
      "nox ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Dead-simple tool for enforcing clean commit messages.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12313087,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40040205b65595a6b9523cf9b6c080fe2fa7b671e6441dc2be861e26444bb9d4",
        "md5": "2301cd1cf75100c02223dd5caffb4266",
        "sha256": "04bc8fdfbf5fba26741ba774bd5e889b69d7ec45d3d3dfc4842a1991afd66eb5"
      },
      "downloads": -1,
      "filename": "mkcommit-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2301cd1cf75100c02223dd5caffb4266",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17377,
      "upload_time": "2021-09-29T12:39:14",
      "upload_time_iso_8601": "2021-09-29T12:39:14.980134Z",
      "url": "https://files.pythonhosted.org/packages/40/04/0205b65595a6b9523cf9b6c080fe2fa7b671e6441dc2be861e26444bb9d4/mkcommit-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}