{
  "info": {
    "author": "Andreas Madsen",
    "author_email": "amwebdk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# lrcurve\n\n**Creates a learning-curve plot for Jupyter/Colab notebooks that is\nupdated in real-time.**\n\nThere is a framework agnostic interface `lrcurve.PlotLearningCurve`\nthat works well with PyTorch and Tensorflow and a keras wrapper\n`lrcurve.KerasLearningCurve` that uses the keras callback interface.\n\n`lrcurve` works with python 3.6 or newer and is distributed under the\nMIT license.\n\n![Gif of learning-curve](gifs/readme_header.gif)\n\n## Install\n\n```bash\npip install -U lrcurve\n```\n\n## API\n\n* [`lrcurve.PlotLearningCurve`](lrcurve/plot_learning_curve.py)\n* [`lrcurve.KerasLearningCurve`](lrcurve/keras_learning_curve.py)\n\n## Examples\n\n* [Keras example](#keras-example)\n* [Framework agnostic example](#framework-agnostic-example)\n* [PyTorch example](#pytorch-example)\n\n### Keras example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/keras_example.ipynb)\n\n```python\nfrom lrcurve import KerasLearningCurve\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=[keras.metrics.SparseCategoricalAccuracy()])\n\nmodel.fit(train.x, train.y,\n          epochs=100,\n          verbose=0,\n          validation_data=(validation.x, validation.y),\n          callbacks=[KerasLearningCurve()])\n```\n\n![Gif of learning-curve for keras example](gifs/keras_example.gif)\n\n### Framework agnostic example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/emulated_training.ipynb)\n\n```python\nplot = PlotLearningCurve()\n\nfor i in range(100):\n    plot.append(i, {\n        'loss': {\n            'train': math.exp(-(i+1)/10),\n            'validation': math.exp(-i/10)\n        }\n    })\n    plot.draw()\n    time.sleep(0.1)\n\nplot.finalize()\n```\n\n![Gif of learning-curve for simple example](gifs/simple_example.gif)\n\n### PyTorch example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/pytorch_example.ipynb)\n\n```python\nfrom lrcurve import PlotLearningCurve\n\nplot = PlotLearningCurve(\n    facet_config = {\n        'loss': { 'name': 'Cross-Entropy', 'limit': [0, None] },\n        'accuracy': { 'name': 'Accuracy', 'limit': [0, 1] }\n    },\n    xaxis_config = { 'name': 'Epoch', 'limit': [0, 500] }\n)\n\n# optimize model\nfor epoch in range(500):\n    # compute loss\n    z_test = network(x_test)\n    loss_test = criterion(z_test, y_test)\n\n    optimizer.zero_grad()\n    z_train = network(x_train)\n    loss_train = criterion(z_train, y_train)\n    loss_train.backward()\n    optimizer.step()\n\n    # compute accuacy\n    accuacy_test = sklearn.metrics.accuracy_score(torch.argmax(z_test, 1).numpy(), y_test)\n    accuacy_train = sklearn.metrics.accuracy_score(torch.argmax(z_train, 1).numpy(), y_train)\n\n    # append and update\n    plot.append(epoch, {\n        'loss': {\n            'train': loss_train,\n            'validation': loss_test\n        },\n        'accuracy': {\n            'train': accuacy_train,\n            'validation': accuacy_test\n        }\n    })\n    plot.draw()\n\nplot.finalize()\n```\n\n![Gif of learning-curve for pytorch example](gifs/pytorch_example.gif)\n\n## Sponsor\n\nSponsored by <a href=\"https://www.nearform.com/research/\">NearForm Research</a>.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AndreasMadsen/lrcurve",
    "keywords": "learning curve pytorch keras tensorflow jupyter colab interactive live real-time",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lrcurve",
    "package_url": "https://pypi.org/project/lrcurve/",
    "platform": "",
    "project_url": "https://pypi.org/project/lrcurve/",
    "project_urls": {
      "Homepage": "https://github.com/AndreasMadsen/lrcurve"
    },
    "release_url": "https://pypi.org/project/lrcurve/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Real-time learning curve for Jupiter notebooks",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12720352,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0889696b6aba4c295ee1fa2a09faf08b2b00dcfd21a27fbf02c3cd31195d82af",
        "md5": "ed67efa5f5899609c09d4d295bfa59b6",
        "sha256": "523db10e5fd602921c2a13e5b5020e25206268c60f9f7871b8940068e8653a5d"
      },
      "downloads": -1,
      "filename": "lrcurve-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ed67efa5f5899609c09d4d295bfa59b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 66971,
      "upload_time": "2019-12-15T15:06:55",
      "upload_time_iso_8601": "2019-12-15T15:06:55.798255Z",
      "url": "https://files.pythonhosted.org/packages/08/89/696b6aba4c295ee1fa2a09faf08b2b00dcfd21a27fbf02c3cd31195d82af/lrcurve-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}