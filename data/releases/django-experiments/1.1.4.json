{
  "info": {
    "author": "Mixcloud",
    "author_email": "technical@mixcloud.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Django-Experiments\n==================\n\nDjango-Experiments is an AB Testing Framework for Django.\n\nIt is possible to set up an experiment through template tags only.\nThrough the Django admin you can monitor and control experiment progress.\n\nIf you don't know what AB testing is, check out `wikipedia <http://en.wikipedia.org/wiki/A/B_testing>`_.\n\nChangelog\n---------\n1.1.4\n~~~~~\n\n - Removing django-jsonfield from requirements.txt (thank you to bustavo) and adding jsonfield\n\n1.1.2\n~~~~~\n\n - Updating migrations\n - Documentation improvements\n - Updating example app\n\n1.1.1\n~~~~~\n\n - Fixing EXPERIMENTS_AUTO_CREATE flag (previously setting it to True did nothing)\n\n1.1.0\n~~~~~\n\n - Nexus is no longer required or used - the standard Django admin for the Experiment model takes over the functionality previously provided by Nexus - NOTE this may have some backwards incompatibilities depending on how you included the media files\n - Promote an experiment to a particular alternative (other than Control) through the admin\n - New experiment_enroll assignment tag (see below)\n\n1.0.0\n~~~~~\n\nBumping version to 1.0.0 because django-experiments is definitely production\nready but also due to backwards incompatible changes that have been merged in.\n - Django 1.7 and 1.8 support (including custom user models)\n - Fixed numerous bugs to do with retention goals - before this update they are not trustworthy. See retention section below for more information.\n - Fixed bug caused by the participant cache on request\n - Fixed bugs related to confirm human and made the functionality pluggable\n - Added \"force_alternative\" option to participant.enroll (important note: forcing the alternative in a non-random way will generate potentially invalid results)\n - Removal of gargoyle integration and extra \"request\" parameters to methods that no longer need them such as is_enrolled (BACKWARDS INCOMPATIBLE CHANGE)\n - ExperimentsMiddleware changed to ExperimentsRetentionMiddleware (BACKWARDS INCOMPATIBLE CHANGE)\n - More tests and logging added\n\n0.3.5\n~~~~~\n\n- Add migration scripts for south\n- Fix rendering when probabilities close to 100%\n- Reduce database load when a user performs an action multiple times\n\n0.3.4\n~~~~~\n\n- Updated JS goal to POST method. Requires csrf javascript.\n- Random number on template tag goal image to prevent caching\n\n\n0.3.3\n~~~~~\n\n- Static media handled by nexus again\n\n0.3.2\n~~~~~\n\n- Fixed missing edit/delete images\n\n0.3.1\n~~~~~\n\n- Replaced django static template tags. Supports django 1.3 again!\n\n0.3.0\n~~~~~\n\n- Added django permission support.\n- Started using django static instead of nexus:media. (django 1.4 only)\n\n\nInstallation\n------------\n\nDjango-Experiments is best installed via pip:\n\n::\n\n    pip install django-experiments\n\nThis should download django-experiments and any dependencies. If downloading from the repo, \npip is still the recommended way to install dependencies:\n\n::\n\n    pip install -r requirements.txt\n\nDependencies\n------------\n- `Django <https://github.com/django/django/>`_\n- `Redis <http://redis.io/>`_\n- `jsonfield <https://github.com/bradjasper/django-jsonfield/>`_\n- `django-modeldict <https://github.com/disqus/django-modeldict>`_\n\n(Detailed list in requirements.txt)\n\nIt also requires 'django.contrib.humanize' to be in INSTALLED_APPS.\n\nUsage\n-----\n\nThe example project is a good place to get started and have a play.\nResults are stored in redis and displayed in the Django admin. The key\ncomponents of this framework are: the experiments, alternatives and\ngoals.\n\n\nConfiguration\n~~~~~~~~~~~~~\n\nBefore you can start configuring django-experiments, you must ensure\nyou have a redis server up and running. See `redis.io <http://redis.io/>`_ for downloads and documentation.\n\nThis is a quick guide to configuring your settings file to the bare minimum.\nFirst, add the relevant settings for your redis server (we run it as localhost):\n\n::\n\n    #Example Redis Settings\n    EXPERIMENTS_REDIS_HOST = 'localhost'\n    EXPERIMENTS_REDIS_PORT = 6379\n    EXPERIMENTS_REDIS_DB = 0\n\nNext, activate the apps by adding them to your INSTALLED_APPS:\n\n::\n\n    #Installed Apps\n    INSTALLED_APPS = [\n        ...\n        'django.contrib.admin',\n        'django.contrib.humanize',\n        'experiments',\n    ]\n\nInclude 'django.contrib.humanize' as above if not already included. \n\nInclude the app URLconf in your urls.py file:\n\n    url(r'experiments/', include('experiments.urls')),\n\nWe haven't configured our goals yet, we'll do that in a bit. Please ensure\nyou have correctly configured your STATIC_URL setting.\n\nOPTIONAL:\nIf you want to use the built in retention goals you will need to include the retention middleware:\n\n::\n\n    MIDDLEWARE_CLASSES [\n        ...\n        'experiments.middleware.ExperimentsRetentionMiddleware',\n    ]\n\n*Note, more configuration options are detailed below.*\n\n\nExperiments and Alternatives\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe experiment can be manually created in your Django admin. Adding alternatives must currently be done in template tags or by calling the relevant code, as described below. \n\nAn experiment allows you to test the effect of various design\nalternatives on user interaction. Django-Experiments is designed to work\nfrom within django templates, to make it easier for designers. We begin\nby loading our module:\n\n::\n\n    {% load experiments %}\n\nand we then define our first experiment and alternative, using the\nfollowing syntax:\n\n::\n\n    {% experiment EXPERIMENT ALTERNATIVE %}\n\nWe are going to run an experiment called “register\\_text” to see what\nregistration link text causes more users to complete the registration\nprocess. Our first alternative must always be the “control” alternative.\nThis is our fallback if the experiment is disabled.\n\n::\n\n    {% experiment register_text control %}\n        <a href = \"register.html\">Register now.</a>\n    {% endexperiment %}\n\nSo while the experiment is disabled, users will see a register link\nsaying “Register now”. Let’s define another, more polite alternative:\n\n::\n\n    {% experiment register_text polite %}\n        <a href = \"register.html\">Please register!</a>\n    {% endexperiment %}\n\nWhile experiment is disabled, users will still see the “control”\nalternative, and their registration link will say “Register now”. When\nthe experiment is enabled, users will be randomly assigned to each\nalternative. This information is stored in the enrollment, a unique\ncombination of the user, the experiment and which alternative they are\nassigned to.\n\nMake sure the experiment tag has access to the request object (not an\nissue for regular templates but you might have to manually add it\ninside an inclusion tag) or it will silently fail to work.\n\nThe experiment_enroll assignment tag can also be used (note that it\ntakes strings or variables unlike the older experiment tag):\n\n::\n\n     {% experiment_enroll \"experiment_name\" \"alternative1\" \"alternative2\" as assigned_alternative %}\n     {% if assigned_alternative == \"alternative1\" or assigned_alternative == \"alternative2\" %}\n        <a href = \"register.html\">Please register!</a>\n     {% else %}\n        <a href = \"register.html\">Register now.</a>\n     {% endif %}\n\nYou can also enroll users in experiments and find out what alternative they\nare part of from python. To enroll a user in an experiment and show a\ndifferent result based on the alternative:\n\n::\n\n    from experiments.utils import participant\n    alternative = participant(request).enroll('register_text', ['polite'])\n    if alternative == 'polite':\n        text_to_show = get_polite_text()\n    elif alternative == 'control':\n        text_to_show = get_normal_text()\n\nIf you wish to find out what experiment alternative a user is part of, but not\nenroll them if they are not yet a member, you can use get_alternative. This\nwill return 'control' if the user is not enrolled. 'control' is also returned\nfor users who are enrolled in the experiment but have been assigned to the\ncontrol group - there is no way to differentiate between these cases.\n\n::\n\n    from experiments.utils import participant\n    alternative = participant(request).get_alternative('register_text')\n    if alternative == 'polite':\n        header_text = get_polite_text_summary()\n    elif alternative == 'control':\n        header_text = get_normal_text_summary()\n\nBy default the participant function expects a HttpRequest object, but you can\nalternatively pass a user or session as a keyword argument\n\n::\n\n    participant(user=current_user).get_alternative('register_text')\n    participant(session=session).get_alternative('register_text')\n\n\n\\*\\ *Experiments will be dynamically created by default if they are\ndefined in a template but not in the admin. This can be overridden in\nsettings.*\n\nAfter creating an experiment either using the Django admin, or through\ntemplate tags or code, you must enable the experiment in the Django\nadmin or manually for it to work. \n\n\nGoals\n~~~~~\n\nGoals allow us to acknowledge when a user hits a certain page. You\nspecify them in the EXPERIMENTS\\_GOALS tuple in your settings. Given the\nexample above, we would want a goal to be triggered once the user has\ncompleted the registration process.\n\nAdd the goal to our EXPERIMENT_GOALS tuple in setting.py:\n\n::\n\n    EXPERIMENTS_GOALS = (\"registration\")\n\nGoals are simple strings that uniquely identify a goal. \n\nOur registration successful page will contain the goal template tag:\n\n::\n\n    {% experiment_goal \"registration\" %}\n\nThis will be fired when the user loads the page. This is not the only way of firing a goal. In total, there are four ways of recording goals:\n\n1. **Django Template Tags** (as above).\n \n    ::\n    \n        {% experiment_goal \"registration\" %}\n\n2. **Server side**, using a python function somewhere in your django views:\n\n    ::\n    \n        from experiments.utils import participant\n    \n        participant(request).goal('registration')\n\n3. **JavaScript onclick**:\n\n    ::\n    \n        <button onclick=\"experiments.goal('registration')\">Complete Registration</button>\n\n    (Please note, this requires CSRF authentication. Please see the `Django Docs <https://docs.djangoproject.com/en/1.4/ref/contrib/csrf/#ajax>`_)\n\n4. **Cookies**:\n\n    ::\n    \n        <span data-experiments-goal=\"registration\">Complete Registration</span>\n\nMultiple goals can be recorded via the cookie using space as a separator.\n\nThe goal is independent from the experiment as many experiments can all\nhave the same goal. The goals are defined in the settings.py file for\nyour project.\n\nRetention Goals\n~~~~~~~~~~~~~~~\n\nThere are two retention goals (VISIT_PRESENT_COUNT_GOAL and VISIT_NOT_PRESENT_COUNT_GOAL that\ndefault to '_retention_present_visits' and '_retention_not_present_visits' respectively). To\nuse these install the retention middleware. A visit is defined by no page views within\nSESSION_LENGTH hours (defaults to 6).\n\nVISIT_PRESENT_COUNT_GOAL does not trigger until the next visit after the user is enrolled and\nshould be used in most cases. VISIT_NOT_PRESENT_COUNT_GOAL triggers on the first visit after\nenrollment and should be used in situations where the user isn't present when being enrolled\n(for example when sending an email). Both goals are tracked for all experiments so take care\nto only use one when interpreting the results.\n\nConfirming Human\n~~~~~~~~~~~~~~~~\n\nThe framework can distinguish between humans and bots. By including\n\n::\n    {% load experiments %}\n\n    {% experiments_confirm_human %}\n\nat some point in your code (we recommend you put it in your base.html\nfile), unregistered users will then be confirmed as human. This can be\nquickly overridden in settings, but be careful - bots can really mess up\nyour results!\n\nIf you want to customize the confirm human code you can change the\nCONFIRM_HUMAN_SESSION_KEY setting and manage setting the value yourself.\nNote that you need to call confirm_human on the participant when they\nbecome confirmed as well as setting session[CONFIRM_HUMAN_SESSION_KEY]\nequal to True.\n\nManaging Experiments\n--------------------\n\nExperiments can be managed in the Django admin (/admin/experiments/experiment/ by\ndefault).\n\nThe States\n~~~~~~~~~~\n\n**Control** - The experiment is essentially disabled. All users will see\nthe control alternative, and no data will be collected.\n\n**Enabled** - The experiment is enabled globally, for all users.\n\n\nSettings\n--------\n\n::\n\n    #Experiment Goals\n    EXPERIMENTS_GOALS = ()\n\n    #Auto-create experiment if doesn't exist\n    EXPERIMENTS_AUTO_CREATE = True\n\n    #Toggle whether the framework should verify user is human. Be careful.\n    EXPERIMENTS_VERIFY_HUMAN = False\n\n    #Example Redis Settings\n    EXPERIMENTS_REDIS_HOST = 'localhost'\n    EXPERIMENTS_REDIS_PORT = 6379\n    EXPERIMENTS_REDIS_DB = 0\n\nSee conf.py for other settings",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mixcloud/django-experiments",
    "keywords": null,
    "license": "MIT license, see LICENSE file",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-experiments",
    "package_url": "https://pypi.org/project/django-experiments/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-experiments/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/mixcloud/django-experiments"
    },
    "release_url": "https://pypi.org/project/django-experiments/1.1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python Django AB Testing Framework",
    "version": "1.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8315030,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2aba3127c2b5ee31f7d855306d7317c890c780d2419e6fc90f28c11e2414a0c4",
        "md5": "32439cc38fa46a27627a1f4845d09a42",
        "sha256": "edc0b6cf3e89b2b9ab3e8c50b34e93bff86322fa30e15b41a2bd9c5649f2b472"
      },
      "downloads": -1,
      "filename": "django-experiments-1.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "32439cc38fa46a27627a1f4845d09a42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42405,
      "upload_time": "2015-11-23T11:56:14",
      "upload_time_iso_8601": "2015-11-23T11:56:14.030705Z",
      "url": "https://files.pythonhosted.org/packages/2a/ba/3127c2b5ee31f7d855306d7317c890c780d2419e6fc90f28c11e2414a0c4/django-experiments-1.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}