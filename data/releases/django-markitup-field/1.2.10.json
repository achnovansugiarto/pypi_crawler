{
  "info": {
    "author": "Dmitry Voronin",
    "author_email": "dimka665@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "=========================\ndjango-markitup-field\n=========================\n\nAn implementation of a custom MarkupField for Django.  A MarkupField is in\nessence a TextField with an associated markup format and `MarkItUp!`_ markup\neditor widget with AJAX preview.  The field also caches its rendered value on\nthe assumption that disk space is cheaper than CPU cycles in a web application.\n\nBased on `django-markupfield <http://github.com/jamesturk/django-markupfield>`_\nand `django-markitup <http://github.com/carljm/django-markitup>`_.\n\n.. _MarkItUp!: http://markitup.jaysalvat.com/\n\nInstallation\n============\n\nThe recommended way to install django-markitup-field is with\n`pip <http://pypi.python.org/pypi/pip>`_\n\nInstall from PyPI with ``easy_install`` or ``pip``::\n\n    pip install django-markitup-field\n\nor get the `in-development version`_::\n\n    pip install django-markitup-field==tip\n\n.. _in-development version: http://github.com/dimka665/django-markitup-field\n\nIt is not necessary to add ``'markitup_field'`` to your ``INSTALLED_APPS``, it\nmerely needs to be on your ``PYTHONPATH``.\n\nIf you want to use AJAX-based preview, add\n``url(r'^markitup/', include('markitup.urls'))`` in your root URLconf.\n\nRequirements\n------------\n\ndjango-markitup-field depends on a relatively current version of Django\n(tested with 1.3-1.4, may work with 1.2 but not guaranteed) and libraries for\nwhichever markup options you wish to include.\n\n\nSettings\n========\n\nYou can define the ``MARKUP_FILTERS`` setting, a mapping of strings\nto callables that 'render' a markup type::\n\n    import markdown\n    from docutils.core import publish_parts\n\n    def render_rest(markup):\n        parts = publish_parts(source=markup, writer_name=\"html4css1\")\n        return parts[\"fragment\"]\n\n    MARKUP_FILTERS = (\n        ('markdown', markdown.markdown),\n        ('restructuredtext', render_rest),\n    )\n\nIf you do not define a ``MARKUP_FILTERS`` then one is provided with the\nfollowing markup types available:\n\nhtml:\n    allows HTML, potentially unsafe\ntext:\n    plain text markup, calls urlize and replaces text with linebreaks\nmarkdown:\n    default `markdown`_ renderer (only if `python-markdown`_ is installed)\nrestructuredtext:\n    default `ReST`_ renderer (only if `docutils`_ is installed)\ntextile:\n    default `textile`_ renderer (only if `textile`_ is installed)\n\n.. _`markdown`: http://daringfireball.net/projects/markdown/\n.. _`ReST`: http://docutils.sourceforge.net/rst.html\n.. _`textile`: http://hobix.com/textile/quick.html\n.. _`python-markdown`: http://www.freewisdom.org/projects/python-markdown/\n.. _`docutils`: http://docutils.sourceforge.net/\n.. _`python-textile`: http://pypi.python.org/pypi/textile\n\nUsage\n=====\n\nUsing MarkupField is relatively easy, it can be used in any model definition::\n\n    from django.db import models\n    from markitup_field.fields import MarkupField\n\n    class Article(models.Model):\n        title = models.CharField(max_length=100)\n        slug = models.SlugField(max_length=100)\n        body = MarkupField()\n\n``Article`` objects can then be created with any markup type defined in\n``MARKUP_FORMATS``::\n\n    Article.objects.create(title='some article', slug='some-article',\n                           body='*fancy*', body_markup_format='markdown')\n\nYou will notice that a field named ``body_markup_format`` exists that you did\nnot declare, MarkupField actually creates two extra fields. ``body_markup_format``\nThis field is always named according to the name of the declared ``MarkupField``.\n\nArguments\n---------\n\n``MarkupField`` also takes three optional arguments.  Either\n``default_markup_format`` and ``markup_format`` arguments may be specified but\nnot both.\n\n``default_markup_format``:\n    Set a markup_type that the field will default to if one is not specified.\n    It is still possible to edit the markup type attribute and it will appear\n    by default in ModelForms.\n\n``markup_format``:\n    Set markup type that the field will always use, ``editable=False`` is set\n    on the hidden field so it is not shown in ModelForms.\n\n``markup_choices``:\n    A replacement list of markup choices to be used in lieu of\n    ``MARKUP_FORMATS`` on a per-field basis.\n\n``escape_html``:\n    A flag (False by default) indicating that the input should be regarded\n    as untrusted and as such will be run through Django's ``escape`` filter.\n\n``rendered_field_name``:\n    Name for field with rendered content. If it is set to None,\n    then it named <field_name>_rendered\n\n\nExamples\n~~~~~~~~\n\n``MarkupField`` that will default to using markdown but allow the user a choice::\n\n    MarkupField(default_markup_type='markdown')\n\n``MarkupField`` that will use textile and not provide a choice on forms::\n\n    MarkupField(markup_type='textile')\n\n``MarkupField`` that will use a custom set of renderers::\n\n    CUSTOM_RENDERERS = (\n        ('markdown', markdown.markdown),\n        ('wiki', my_wiki_render_func)\n    )\n    MarkupField(markup_choices=CUSTOM_RENDERERS)\n\nAccessing a MarkupField on a model\n----------------------------------\n\nWhen accessing an attribute of a model that was declared as a ``MarkupField``\na special ``Markup`` object is returned.  The ``Markup`` object has three\nparameters:\n\n``raw``:\n    The unrendered markup.\n``markup_format``:\n    The markup type.\n``rendered``:\n    The rendered HTML version of ``raw``, this attribute is read-only.\n\nThis object has a ``__unicode__`` method that calls\n``django.utils.safestring.mark_safe`` on ``rendered`` allowing MarkupField\nobjects to appear in templates as their rendered selfs without any template\ntag or having to access ``rendered`` directly.\n\nAssuming the ``Article`` model above::\n\n    >>> a = Article.objects.all()[0]\n    >>> a.body.raw\n    u'*fancy*'\n    >>> a.body.markup_type\n    u'markdown'\n    >>> a.body.rendered\n    u'<p><em>fancy</em></p>'\n    >>> print unicode(a.body)\n    <p><em>fancy</em></p>\n\nAssignment to ``a.body`` is equivalent to assignment to ``a.body.raw`` and\nassignment to ``a.body_markup_format`` is equivalent to assignment to\n``a.body.markup_format``.\n\n.. note::\n    a.body.rendered is only updated when a.save() is called",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/dimka665/django-markitup-field/",
    "keywords": null,
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-markitup-field",
    "package_url": "https://pypi.org/project/django-markitup-field/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-markitup-field/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/dimka665/django-markitup-field/"
    },
    "release_url": "https://pypi.org/project/django-markitup-field/1.2.10/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Custom Django field for easy use of markup in text fields",
    "version": "1.2.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 790043,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b3fbd9b9a1e74fdab96fab42fca106676c72c0e66a674adcab41e0793375df1",
        "md5": "0a1e055ba712c1f7a7fd3dea1a38a794",
        "sha256": "6face93299180375a3c4512b0831638d7ed8caccb2c2363ee141f66d95b26772"
      },
      "downloads": -1,
      "filename": "django-markitup-field-1.2.10.zip",
      "has_sig": false,
      "md5_digest": "0a1e055ba712c1f7a7fd3dea1a38a794",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 173622,
      "upload_time": "2012-12-29T19:19:47",
      "upload_time_iso_8601": "2012-12-29T19:19:47.675535Z",
      "url": "https://files.pythonhosted.org/packages/2b/3f/bd9b9a1e74fdab96fab42fca106676c72c0e66a674adcab41e0793375df1/django-markitup-field-1.2.10.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}