{
  "info": {
    "author": "Alexander Lokhman",
    "author_email": "alex.lokhman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Django Better Choices\n\n[![PyPI](https://img.shields.io/pypi/v/django-better-choices)](https://pypi.org/project/django-better-choices)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-better-choices)\n[![Build Status](https://img.shields.io/github/workflow/status/lokhman/django-better-choices/CI/master)](https://github.com/lokhman/django-better-choices/actions?query=workflow%3ACI)\n[![codecov](https://codecov.io/gh/lokhman/django-better-choices/branch/master/graph/badge.svg)](https://codecov.io/gh/lokhman/django-better-choices)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nBetter [choices](https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices) library for Django web framework.\n\n## Requirements\nThis library was written for Python 3.7+ and will not work in any earlier versions.\n\n## Install\n\n    pip install django-better-choices\n\n## Usage\nTo start defining better choices, you need first to import the `Choices` class.\n```python\nfrom django_better_choices import Choices\n```\n\n### Class definition\nThe choices can be defined with overriding `Choices` class.\n```python\nclass PageStatus(Choices):\n    CREATED = 'Created'\n    PENDING = Choices.Value('Pending', help_text='This set status to pending')\n    ON_HOLD = Choices.Value('On Hold', value='custom_on_hold')\n\n    VALID = Choices.Subset('CREATED', 'ON_HOLD')\n    INVISIBLE = Choices.Subset('PENDING', 'ON_HOLD')\n\n    class InternalStatus(Choices):\n        REVIEW = _('On Review')\n\n    @classmethod\n    def get_help_text(cls):\n        return tuple(\n            value.help_text\n            for value in cls.values()\n            if hasattr(value, 'help_text')\n        )\n```\n> Choices class key can be any *public* identifier (i.e. not starting with underscore `_`).\n> Overridden choices classes cannot be initialised to obtain a new instance, calling the instance will return a tuple of choice entries.\n\n### Inline definition\nAlternatively, the choices can be defined dynamically by creating a new `Choices` instance.\n```python\nPageStatus = Choices('PageStatus', SUCCESS='Success', FAIL='Error', VALID=Choices.Subset('SUCCESS'))\n```\n> The first `name` parameter of `Choices` constructor is optional and required only for better representation of the returned instance.\n\n### Value accessors\nYou can access choices values using dot notation and with `getattr()`.\n```python\nvalue_created = PageStatus.CREATED\nvalue_review = PageStatus.InternalStatus.REVIEW\nvalue_on_hold = getattr(PageStatus, 'ON_HOLD')\n```\n\n### Values and value parameters\n`Choices.Value` can hold any `typing.Hashable` value and once compiled equals to this value. In addition to `display` parameter, other optional parameters can be specified in `Choices.Value` constructor (see class definition example).\n```python\nprint( PageStatus.CREATED )                # 'created'\nprint( PageStatus.ON_HOLD )                # 'custom_on_hold'\nprint( PageStatus.PENDING.display )        # 'Pending'\nprint( PageStatus.PENDING.help_text )      # 'This set status to pending'\n\nPageStatus.ON_HOLD == 'custom_on_hold'     # True\nPageStatus.CREATED == PageStatus.CREATED   # True\n\n\nclass Rating(Choices):\n    VERY_POOR = Choices.Value('Very poor', value=1)\n    POOR = Choices.Value('Poor', value=2)\n    OKAY = Choices.Value('Okay', value=3, alt='Not great, not terrible')\n    GOOD = Choices.Value('Good', value=4)\n    VERY_GOOD = Choices.Value('Very good', value=5)\n\nprint( Rating.VERY_GOOD )                  # 5\nprint( Rating.OKAY.alt )                   # 'Not great, not terrible'\nprint( {4: 'Alright'}[Rating.GOOD] )       # 'Alright'\n```\n> Instance of `Choices.Value` class cannot be modified after initialisation. All native non-magic methods can be overridden in `Choices.Value` custom parameters.\n\n### Search in choices\nSearch in choices is performed by value.\n```python\n'created' in PageStatus                    # True\n'custom_on_hold' in PageStatus             # True\n'on_hold' in PageStatus                    # False\nvalue = PageStatus['custom_on_hold']       # ValueType('custom_on_hold')\nvalue = PageStatus.get('on_hold', 123.45)  # 123.45\nkey = PageStatus.get_key('created')        # 'CREATED'\n```\n\n### Search in subsets\nSubsets are used to group several values together (see class definition example) and search by a specific value.\n```python\n'custom_on_hold' in PageStatus.VALID       # True\nPageStatus.CREATED in PageStatus.VALID     # True\n```\n> `Choices.Subset` is a subclass of `tuple`, which is compiled to inner choices class after its definition. All internal or custom choices class methods or properties will be available in a subset class (see \"Custom methods\" section).\n\n### Extract subset\nSubsets of choices can be dynamically extracted with `extract()` method.\n```python\nPageStatus.extract('CREATED', 'ON_HOLD')   # Choices('PageStatus.Subset', CREATED, ON_HOLD)\nPageStatus.VALID.extract('ON_HOLD')        # Choices('PageStatus.VALID.Subset', ON_HOLD)\n```\n\n### Exclude values\nThe opposite action to `extract()` is `exclude()`. It is used to exclude values from choices class or a subset and return remaining values as a new subset.\n```python\nPageStatus.exclude('CREATED', 'ON_HOLD')   # Choices('PageStatus.Subset', PENDING)\nPageStatus.VALID.exclude('ON_HOLD')        # Choices('PageStatus.VALID.Subset', CREATED)\n```\n\n### Choices iteration\nChoices class implements `__iter__` magic method, hence choices are iterable that yield choice entries (i.e. `(value, display)`). Methods `items()`, `keys()` and `values()` can be used to return tuples of keys and values combinations.\n```python\nfor value, display in PageStatus:  # can also be used as callable, i.e. PageStatus()\n    print( value, display )\n\nfor key, value in PageStatus.items():\n    print( key, value, value.display )\n\nfor key in PageStatus.keys():\n    print( key )\n\nfor value in PageStatus.values():\n    print( value, value.display, value.__choice_entry__ )\n```\nAdditional `displays()` method is provided for choices and subsets to extract values display strings.\n```python\nfor display in PageStatus.displays():\n    print( display )\n\nfor display in PageStatus.SUBSET.displays():\n    print( display )\n```\n> Iteration methods `items()`, `keys()`, `values()`, `displays()`, as well as class constructor can accept keyword arguments to filter collections based on custom parameters, e.g. `PageStatus.values(help_text='Some', special=123)`.\n\n### Set operations\nChoices class and subsets support standard set operations: *union* (`|`), *intersection* (`&`), *difference* (`-`), and *symmetric difference* (`^`).\n```python\nPageStatus.VALID | PageStatus.INVISIBLE     # Choices(CREATED, ON_HOLD, PENDING)\nPageStatus.VALID & PageStatus.INVISIBLE     # Choices(ON_HOLD)\nPageStatus.VALID - PageStatus.INVISIBLE     # Choices(CREATED)\nPageStatus.VALID ^ PageStatus.INVISIBLE     # Choices(CREATED, PENDING)\n```\n\n### Custom methods\nAll custom choices class methods or properties (non-values) will be available in all subsets.\n```python\nPageStatus.get_help_text()\nPageStatus.VALID.get_help_text()\nPageStatus.extract('PENDING', 'ON_HOLD').get_help_text()\nPageStatus.VALID.extract('ON_HOLD').get_help_text()\n```\n\n### Django model fields\nBetter choices are not different from the original Django choices in terms of usage in models.\n```python\nclass Page(models.Model):\n    status = models.CharField(choices=PageStatus, default=PageStatus.CREATED)\n```\n> Better choices are fully supported by Django migrations and debug toolbar.\n\n### Saving choices on models\nBetter choices are compatible with standard Django models manipulation.\n```python\npage = Page.objects.get(pk=1)\npage.status = PageStatus.PENDING\npage.save()\n```\n\n## Tests\nRun `python tests.py` for testing.\n\n## License\nLibrary is available under the MIT license. The included LICENSE file describes this in detail.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/lokhman/django-better-choices/tarball/1.16",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lokhman/django-better-choices",
    "keywords": "django,choices",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-better-choices",
    "package_url": "https://pypi.org/project/django-better-choices/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-better-choices/",
    "project_urls": {
      "Download": "https://github.com/lokhman/django-better-choices/tarball/1.16",
      "Homepage": "https://github.com/lokhman/django-better-choices"
    },
    "release_url": "https://pypi.org/project/django-better-choices/1.16/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Better choices library for Django web framework",
    "version": "1.16",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8933532,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13d028e79a17a9361dc34cff00893e6b9c5a162b9606e1b7013490def7375a47",
        "md5": "96eabaea4b7718683090d3e3c6106a9f",
        "sha256": "9aec8698ea8e27bd667258372e0eec94e50183904ee6c41d630a0447ee05e0a9"
      },
      "downloads": -1,
      "filename": "django_better_choices-1.16-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96eabaea4b7718683090d3e3c6106a9f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7868,
      "upload_time": "2020-12-04T02:17:33",
      "upload_time_iso_8601": "2020-12-04T02:17:33.809988Z",
      "url": "https://files.pythonhosted.org/packages/13/d0/28e79a17a9361dc34cff00893e6b9c5a162b9606e1b7013490def7375a47/django_better_choices-1.16-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f4a5b5151b7c5b0b491557fccbb2b623c3af51915cc637bd6203debade18ad5",
        "md5": "e185d8d0cf6c0899c89b49d120540267",
        "sha256": "d3856401bcf0a964e1d8ce04384b2eba1bdb8265b814f93da3b86626e17ed662"
      },
      "downloads": -1,
      "filename": "django-better-choices-1.16.tar.gz",
      "has_sig": false,
      "md5_digest": "e185d8d0cf6c0899c89b49d120540267",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7902,
      "upload_time": "2020-12-04T02:17:35",
      "upload_time_iso_8601": "2020-12-04T02:17:35.146940Z",
      "url": "https://files.pythonhosted.org/packages/6f/4a/5b5151b7c5b0b491557fccbb2b623c3af51915cc637bd6203debade18ad5/django-better-choices-1.16.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}