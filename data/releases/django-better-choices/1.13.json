{
  "info": {
    "author": "Alexander Lokhman",
    "author_email": "alex.lokhman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Django Better Choices\n\n[![PyPI](https://img.shields.io/pypi/v/django-better-choices)](https://pypi.org/project/django-better-choices)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-better-choices)\n[![Build Status](https://travis-ci.org/lokhman/django-better-choices.svg?branch=master)](https://travis-ci.org/lokhman/django-better-choices)\n[![codecov](https://codecov.io/gh/lokhman/django-better-choices/branch/master/graph/badge.svg)](https://codecov.io/gh/lokhman/django-better-choices)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nBetter [choices](https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices) library for Django web framework.\n\n## Requirements\nThis library was written for Python 3.7+ and will not work in any earlier versions.\n\n## Install\n\n    pip install django-better-choices\n\n## Usage\nTo start defining better choices, you need first to import the `Choices` class.\n```python\nfrom django_better_choices import Choices\n```\n\n### Class definition\nThe choices can be defined with overriding `Choices` class.\n```python\nclass PageStatus(Choices):\n    CREATED = 'Created'\n    PENDING = Choices.Value('Pending', help_text='This set status to pending')\n    ON_HOLD = Choices.Value('On Hold', value='custom_on_hold')\n\n    VALID = Choices.Subset('CREATED', 'ON_HOLD')\n    INVISIBLE = Choices.Subset('PENDING', 'ON_HOLD')\n\n    class InternalStatus(Choices):\n        REVIEW = 'On Review'\n\n    @classmethod\n    def get_help_text(cls):\n        return tuple(\n            value.help_text\n            for value in cls.values()\n            if hasattr(value, 'help_text')\n        )\n```\n> Overridden choices classes cannot be initialised to obtain a new instance. Initialisation will return a tuple of choice entries.\n\n### Inline definition\nAlternatively, the choices can be defined dynamically by creating new `Choices` object.\n```python\nPageStatus = Choices('PageStatus', SUCCESS='Success', FAIL='Error')\n```\n> The first `name` parameter of `Choices` constructor is optional and required only for better representation of the returned object.\n\n### Value accessors\nYou can access choices values using dot notation and with `getattr()`.\n```python\nvalue_created = PageStatus.CREATED\nvalue_review = PageStatus.InternalStatus.REVIEW\nvalue_on_hold = getattr(PageStatus, 'ON_HOLD')\n```\n\n### Values and value parameters\n`Choices.Value` is a subclass of `str` and equals to its value. In addition to `display` parameter, other optional parameters can be specified in `Choices.Value` constructor (see class definition example).\n```python\nprint( PageStatus.CREATED )                # 'created'\nprint( PageStatus.ON_HOLD )                # 'custom_on_hold'\nprint( PageStatus.PENDING.display )        # 'Pending'\nprint( PageStatus.PENDING.help_text )      # 'This set status to pending'\n\nPageStatus.ON_HOLD == 'custom_on_hold'     # True\nPageStatus.CREATED == PageStatus.CREATED   # True\n```\n> `Choices.Value` is an immutable string class, which object cannot be modified after initialisation. Native non-magic `str` methods can be overridden in `Choices.Value` custom parameters. `Choices.Value` behaves like a normal string, e.g. `{'val1': 'something'}[CHOICES.VAL1] == 'something'`.\n\n### Search in choices\nSearch in choices is performed by value.\n```python\n'created' in PageStatus                    # True\n'custom_on_hold' in PageStatus             # True\n'on_hold' in PageStatus                    # False\nvalue = PageStatus['custom_on_hold']       # Choices.Value\nkey, value = PageStatus.find('created')    # ('CREATED', Choices.Value)\n```\n\n### Search in subsets\nSubsets are used to group several values together (see class definition example) and search by a specific value.\n```python\n'custom_on_hold' in PageStatus.VALID       # True\nPageStatus.CREATED in PageStatus.VALID     # True\n```\n> `Choices.Subset` is a subclass of `tuple`, which is translated to inner choices class after definition. All internal or custom choices class methods or properties will be available in a subset class (see \"Custom methods\" section).\n\n### Extract subset\nSubsets of choices can be dynamically extracted using a special `extract()` method.\n```python\nPageStatus.extract('CREATED', 'ON_HOLD')   # ~= PageStatus.VALID\nPageStatus.VALID.extract('ON_HOLD')        # Choices('PageStatus.VALID.Subset', ON_HOLD)\n```\n\n### Choices iteration\nChoices class implements `__iter__` magic method, hence choices are iterable that yield choice entries (i.e. `(value, display)`). Methods `items()`, `keys()` and `values()` can be used to return tuples of keys and values combinations.\n```python\nfor value, display in PageStatus:\n    print( value, display )\n\nfor key, value in PageStatus.items():\n    print( key, value, value.display )\n\nfor key in PageStatus.keys():\n    print( key )\n\nfor value in PageStatus.values():\n    print( value, value.display, value.__choice_entry__ )\n```\nAdditional `displays()` method is provided for choices and subsets to extract values display strings.\n```python\nfor display in PageStatus.displays():\n    print( display )\n\nfor display in PageStatus.SUBSET.displays():\n    print( display )\n```\n\n### Set operations\nChoices class supports standard set operations: *union* (`|`), *intersection* (`&`), *difference* (`-`), and *symmetric difference* (`^`).\n```python\nPageStatus.VALID | PageStatus.INVISIBLE     # Choices(CREATED, ON_HOLD, PENDING)\nPageStatus.VALID & PageStatus.INVISIBLE     # Choices(ON_HOLD)\nPageStatus.VALID - PageStatus.INVISIBLE     # Choices(CREATED)\nPageStatus.VALID ^ PageStatus.INVISIBLE     # Choices(CREATED, PENDING)\n```\n\n### Custom methods\nAll custom choices class methods or properties (non-values) will be available in all subsets.\n```python\nPageStatus.get_help_text()\nPageStatus.VALID.get_help_text()\nPageStatus.extract('PENDING', 'ON_HOLD').get_help_text()\nPageStatus.VALID.extract('ON_HOLD').get_help_text()\n```\n\n### Django model fields\nBetter choices are not different to the original Django choices in terms of usage in models.\n```python\nclass Page(models.Model):\n    status = models.CharField(choices=PageStatus, default=PageStatus.CREATED)\n```\n> Better choices are fully supported by Django migrations.\n\n### Saving choices on models\nBetter choices are compatible with standard Django models manipulation.\n```python\npage = Page.objects.get(pk=1)\npage.status = PageStatus.PENDING\npage.save()\n```\n\n## Tests\nRun `python tests.py` for testing.\n\n## License\nLibrary is available under the MIT license. The included LICENSE file describes this in detail.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/lokhman/django-better-choices/tarball/1.13",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lokhman/django-better-choices",
    "keywords": "django,choices",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-better-choices",
    "package_url": "https://pypi.org/project/django-better-choices/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-better-choices/",
    "project_urls": {
      "Download": "https://github.com/lokhman/django-better-choices/tarball/1.13",
      "Homepage": "https://github.com/lokhman/django-better-choices"
    },
    "release_url": "https://pypi.org/project/django-better-choices/1.13/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Better choices library for Django web framework",
    "version": "1.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8933532,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e292f0a138b7438381db5d876f93fe481789d8e680e1c8eefdb0e8b5b27af84b",
        "md5": "22ecea3b4e8c20ff231dcf047cab04ee",
        "sha256": "2e481828a2a8b5b10e48ff852f1a7b96b2147e5534f4fbed500040e4fa4f60ef"
      },
      "downloads": -1,
      "filename": "django_better_choices-1.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22ecea3b4e8c20ff231dcf047cab04ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7196,
      "upload_time": "2020-10-05T13:22:50",
      "upload_time_iso_8601": "2020-10-05T13:22:50.139104Z",
      "url": "https://files.pythonhosted.org/packages/e2/92/f0a138b7438381db5d876f93fe481789d8e680e1c8eefdb0e8b5b27af84b/django_better_choices-1.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e712e3e61c3dc7540f81e4b2f0b4c0edc8879cd22b6f5017a0bd45fcb314821",
        "md5": "853691bc6b595ad946272ae54d7646ae",
        "sha256": "df11cbff5896d2a7280b1a08e726ed64d604cadb233b9d20dc791e6f383128ea"
      },
      "downloads": -1,
      "filename": "django-better-choices-1.13.tar.gz",
      "has_sig": false,
      "md5_digest": "853691bc6b595ad946272ae54d7646ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6281,
      "upload_time": "2020-10-05T13:22:51",
      "upload_time_iso_8601": "2020-10-05T13:22:51.634287Z",
      "url": "https://files.pythonhosted.org/packages/6e/71/2e3e61c3dc7540f81e4b2f0b4c0edc8879cd22b6f5017a0bd45fcb314821/django-better-choices-1.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}