{
  "info": {
    "author": "Alexander Lokhman",
    "author_email": "alex.lokhman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "# Django Better Choices\n\n[![PyPI](https://img.shields.io/pypi/v/django-better-choices)](https://pypi.org/project/django-better-choices)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-better-choices)\n[![Build Status](https://travis-ci.org/lokhman/django-better-choices.svg?branch=master)](https://travis-ci.org/lokhman/django-better-choices)\n[![codecov](https://codecov.io/gh/lokhman/django-better-choices/branch/master/graph/badge.svg)](https://codecov.io/gh/lokhman/django-better-choices)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nBetter [choices](https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices) library for Django web framework.\n\n## Requirements\nThis library was written for Python 3.7+ and will not work in any earlier versions.\n\n## Install\n\n    pip install django-better-choices\n\n## Usage\nTo start defining better choices, you need first to import the `Choices` class.\n```python\nfrom django_better_choices import Choices\n```\n\n### Class definition\nThe choices can be defined with overriding `Choices` class.\n```python\nclass PAGE_STATUS(Choices):\n    CREATED = 'Created'\n    PENDING = Choices.Value('Pending', help_text='This set status to pending')\n    ON_HOLD = Choices.Value('On Hold', value='custom_on_hold')\n\n    VALID = Choices.Subset('CREATED', 'ON_HOLD')\n    INVISIBLE = Choices.Subset('PENDING', 'ON_HOLD')\n\n    class INTERNAL_STATUS(Choices):\n        REVIEW = 'On Review'\n\n    @classmethod\n    def get_help_text(cls):\n        return tuple(\n            value.help_text\n            for value in cls.values()\n            if hasattr(value, 'help_text')\n        )\n```\n> Overridden choices classes cannot be initialised to obtain a new instance. Initialisation will return a tuple of choice entries.\n\n### Inline definition\nAlternatively, the choices can be defined dynamically by creating new `Choices` object.\n```python\nPAGE_STATUS = Choices('PAGE_STATUS', SUCCESS='Success', FAIL='Error')\n```\n> The first `name` parameter of `Choices` constructor is optional and required only for better representation of the returned object.\n\n### Value accessors\nYou can access choices values using dot notation and with `getattr()`.\n```python\nvalue_created = PAGE_STATUS.CREATED\nvalue_review = PAGE_STATUS.INTERNAL_STATUS.REVIEW\nvalue_on_hold = getattr(PAGE_STATUS, 'ON_HOLD')\n```\n\n### Values and value parameters\n`Choices.Value` is a subclass of `str` and equals to its value. In addition to `display` parameter, other optional parameters can be specified in `Choices.Value` constructor (see class definition example).\n```python\nprint( PAGE_STATUS.CREATED )                # 'created'\nprint( PAGE_STATUS.ON_HOLD )                # 'custom_on_hold'\nprint( PAGE_STATUS.PENDING.display )        # 'Pending'\nprint( PAGE_STATUS.PENDING.help_text )      # 'This set status to pending'\n\nPAGE_STATUS.ON_HOLD == 'custom_on_hold'     # True\nPAGE_STATUS.CREATED == PAGE_STATUS.CREATED  # True\n```\n> `Choices.Value` is an immutable string class, which object cannot be modified after initialisation. Native non-magic `str` methods can be overridden in `Choices.Value` custom parameters. `Choices.Value` behaves like a normal string, e.g. `{'val1': 'something'}[CHOICES.VAL1] == 'something'`.\n\n### Search in choices\nSearch in choices is performed by value.\n```python\n'created' in PAGE_STATUS                    # True\n'custom_on_hold' in PAGE_STATUS             # True\n'on_hold' in PAGE_STATUS                    # False\nvalue = PAGE_STATUS['custom_on_hold']       # Choices.Value\nkey, value = PAGE_STATUS.find('created')    # ('CREATED', Choices.Value)\n```\n\n### Search in subsets\nSubsets are used to group several values together (see class definition example) and search by a specific value.\n```python\n'custom_on_hold' in PAGE_STATUS.VALID       # True\nPAGE_STATUS.CREATED in PAGE_STATUS.VALID    # True\n```\n> `Choices.Subset` is a subclass of `tuple`, which is translated to inner choices class after definition. All internal or custom choices class methods or properties will be available in a subset class (see \"Custom methods\" section).\n\n### Extract subset\nSubsets of choices can be dynamically extracted using a special `extract()` method.\n```python\nPAGE_STATUS.extract('CREATED', 'ON_HOLD')   # ~= PAGE_STATUS.VALID\nPAGE_STATUS.VALID.extract('ON_HOLD')        # Choices('PAGE_STATUS.VALID.Subset', ON_HOLD)\n```\n\n### Choices iteration\nChoices class implements `__iter__` magic method, hence choices are iterable that yield choice entries (i.e. `(value, display)`). Methods `items()`, `keys()` and `values()` can be used to return tuples of keys and values combinations.\n```python\nfor value, display in PAGE_STATUS:\n    print( value, display )\n\nfor key, value in PAGE_STATUS.items():\n    print( key, value, value.display )\n\nfor key in PAGE_STATUS.keys():\n    print( key )\n\nfor value in PAGE_STATUS.values():\n    print( value, value.display, value.__choice_entry__ )\n```\nAdditional `displays()` method is provided for choices and subsets to extract values display strings.\n```python\nfor display in PAGE_STATUS.displays():\n    print( display )\n\nfor display in PAGE_STATUS.SUBSET.displays():\n    print( display )\n```\n\n### Set operations\nChoices class supports standard set operations: *union* (`|`), *intersection* (`&`), *difference* (`-`), and *symmetric_difference* (`^`).\n```python\nPAGE_STATUS.VALID | PAGE_STATUS.INVISIBLE     # Choices(CREATED, ON_HOLD, PENDING)\nPAGE_STATUS.VALID & PAGE_STATUS.INVISIBLE     # Choices(ON_HOLD)\nPAGE_STATUS.VALID - PAGE_STATUS.INVISIBLE     # Choices(CREATED)\nPAGE_STATUS.VALID ^ PAGE_STATUS.INVISIBLE     # Choices(CREATED, PENDING)\n```\n\n### Custom methods\nAll custom choices class methods or properties (non-values) will be available in all subsets.\n```python\nPAGE_STATUS.get_help_text()\nPAGE_STATUS.VALID.get_help_text()\nPAGE_STATUS.extract('PENDING', 'ON_HOLD').get_help_text()\nPAGE_STATUS.VALID.extract('ON_HOLD').get_help_text()\n```\n\n### Django model fields\nBetter choices are not different to the original Django choices in terms of usage in models.\n```python\nclass Page(models.Model):\n    status = models.CharField(choices=PAGE_STATUS, default=PAGE_STATUS.CREATED)\n```\n> Better choices are fully supported by Django migrations.\n\n### Saving choices on models\nBetter choices are compatible with standard Django models manipulation.\n```python\npage = Page.objects.get(pk=1)\npage.status = PAGE_STATUS.PENDING\npage.save()\n```\n\n## Tests\nRun `python tests.py` for testing.\n\n## License\nLibrary is available under the MIT license. The included LICENSE file describes this in detail.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/lokhman/django-better-choices/tarball/1.12",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lokhman/django-better-choices",
    "keywords": "django,choices",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-better-choices",
    "package_url": "https://pypi.org/project/django-better-choices/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-better-choices/",
    "project_urls": {
      "Download": "https://github.com/lokhman/django-better-choices/tarball/1.12",
      "Homepage": "https://github.com/lokhman/django-better-choices"
    },
    "release_url": "https://pypi.org/project/django-better-choices/1.12/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Better choices library for Django web framework",
    "version": "1.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8933532,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94d124178b426d8142254fa81c0bff26df0d76cb9d424b125241a21b4e8ed0ed",
        "md5": "a22e04bff2b1d545a2f18704dbbbaa89",
        "sha256": "44a11637e7db0666ada3222ef0b561eca1b39669a8b2443b0011b9fcd909bf69"
      },
      "downloads": -1,
      "filename": "django_better_choices-1.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a22e04bff2b1d545a2f18704dbbbaa89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7273,
      "upload_time": "2020-07-30T16:16:23",
      "upload_time_iso_8601": "2020-07-30T16:16:23.043637Z",
      "url": "https://files.pythonhosted.org/packages/94/d1/24178b426d8142254fa81c0bff26df0d76cb9d424b125241a21b4e8ed0ed/django_better_choices-1.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60ba42311f7baa11cea82188095a4bf25f06c5b3e0bfa38575246953efcec9fa",
        "md5": "e0b29818602bf5ff508f429a53450215",
        "sha256": "03b09219ace6095a1bc4efeb2c127af7177f7a1381747ad5362c97d50c2e088b"
      },
      "downloads": -1,
      "filename": "django-better-choices-1.12.tar.gz",
      "has_sig": false,
      "md5_digest": "e0b29818602bf5ff508f429a53450215",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6349,
      "upload_time": "2020-07-30T16:16:24",
      "upload_time_iso_8601": "2020-07-30T16:16:24.776332Z",
      "url": "https://files.pythonhosted.org/packages/60/ba/42311f7baa11cea82188095a4bf25f06c5b3e0bfa38575246953efcec9fa/django-better-choices-1.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}