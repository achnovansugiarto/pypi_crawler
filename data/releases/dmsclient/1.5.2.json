{
  "info": {
    "author": "David-Elias Künstle",
    "author_email": "dmsclient@kuenstle.me",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=================================================\nReadme Drink Management System Client (dmsclient)\n=================================================\n\nPython3 library with command line interface to interact with the Drink Management System (DMS) of the `student council TF Uni Freiburg <https://fachschaft.tf.uni-freiburg.de>`_.\n\nExample use case: Order product from the command line.\n\n.. code:: bash\n\n    $ dms order spezi -u johann\n    (1) Johannes Mustermann\n    (2) Johanna  Musterfrau\n    (3) Johann   Mustermensch\n    Please enter a number between 1 and 3: 1\n    Order 1 NetteMarke Spezi (0.70€) for Johannes Mustermann? [YES/no] y \n    Order successful.\n\nGetting Started\n===============\n\nPrerequisites\n-------------\n\nYou need ``python 3.5`` or newer and ``pip``.\nFor development you also need git installed on your machine.\n\nInstallation\n------------\n\nInstall the dmsclient library and command line interface simply from *PyPi*:\n\n.. code:: bash\n\n    pip3 install dmsclient\n\nFor developers it's recommended to install from source vie *develop*.\nThen all changes in code are automatically available in the library and command line without reinstallation.\n\n.. code:: bash\n\n    git clone git@<git url>:<user>/dmsclient.git\n    cd dmsclient\n\n    python3 setup.py develop\n\nCommand Line\n------------\n\nThe installation of ``dmsclient`` provides a command line interface ``dms``.\nFor authentication you have to generate a token key in your dms profile settings.\nAdd your token to a ``.dmsrc`` file in your home folder.\n\n.. code::\n\n   [DEFAULT]\n   Token = XxxxxXXXxxxxxXXXXxxxxxxxXXX\n\nThen you can start using ``dms``. You'll find all available commands via\n\n.. code:: bash\n\n   dms --help\n\nUser and product names don't have to be added exactly, but are estimated from what you type. E.g.:\n\n.. code:: bash\n\n   $ dms buy apfel -u must\n   Buy Apfelschorle (0.70€) for Max Mustermann? [Y/n]\n\nLibrary\n-------\n\nFor communication with the DMS via REST you can use the ``DmsClient`` class provided by this library.\nAuthentication is provided via a token key which you can generate in the DMS profile settings.\nUsually the token is stored in an RC file readable with ``DmsConfig``.\n\n.. code:: python\n\n    import os\n    from random import sample\n\n    from dmsclient import DmsClient, DmsConfig\n\n\n    rcfile = os.path.expanduser('~/.dmsrc')\n    cfg = DmsConfig()\n    cfg.read(rcfile)\n\n\nAPI functions of ``DmsClient`` usually return coroutines for asynchronous access.\n\n.. code:: python\n\n    import asyncio\n\n\n    async def async_order_random_stuff_for_last_customer(loop, cfg):\n        async with DmsClient(cfg.token, cfg.api) as dms:\n           # register tasks which can run in parallel\n           products_task = loop.create_task(dms.products)\n           sales_task = loop.create_task(dms.sale_history(num_days=1))\n\n           # execute tasks to fetch data in parallel\n           available_products = [p for p in await products_task\n                                 if p.quantity > 0]\n           random_product = sample(available_products, 1)[0]\n           last_sale = (await sales_task)[0]\n\n           # order random product\n           await dms.add_order(random_product.id, last_sale['profile'])\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(async_order_random_stuff_for_last_customer(loop, cfg))\n\n\nStill, you can use the library also in a synchronous fashion\n\n.. code:: python\n\n   from syncer import sync\n\n\n   @sync\n   async def order_random_stuff_for_last_customer(cfg):\n       async with DmsClient(cfg.token, cfg.api) as dms:\n           # synchronous fetch data\n           products = await dms.products\n           sales = await dms.sale_history(num_days=1)\n\n           available_products = [p for p in products\n                                 if p.quantity > 0]\n           random_product = sample(available_products, 1)[0]\n           last_sale = sales[0]\n\n           # order random product\n           await dms.add_order(random_product.id, last_sale['profile'])\n\n\n   order_random_stuff_for_last_customer(cfg)\n\nAlternative:\n\n.. code:: python\n\n    loop = asyncio.get_event_loop()\n\n    # Connect synchronously\n    client = dms.DmsClient(cfg.token, cfg.api)\n    client.connect()\n\n    # Read products\n    products = loop.run_until_complete(client.products)\n\n\nAuthors\n=======\n\nInitiated by *David-Elias Künstle* <kuenstld[at]tf.uni-freiburg> / `Github <https://github.com/dekuenstle>`_\nbut see `contributors <https://github.com/fachschaft/dmsclient/graphs/contributors>`_ for a full list of contributions.\n\nLicense\n=======\n\ndmsclient is available under the `MIT License <https://opensource.org/licenses/MIT>`_\n\nAcknowledgements\n================\n\nBig thanks to the DMS and DMS-API developers!\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dmsclient",
    "package_url": "https://pypi.org/project/dmsclient/",
    "platform": "",
    "project_url": "https://pypi.org/project/dmsclient/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dmsclient/1.5.2/",
    "requires_dist": [
      "aiohttp (>=3.1.1)",
      "docopt (>=0.6.0)",
      "requests (>=2.18.0)",
      "tabulate (>=0.7.0)",
      "infi.docopt-completion (>=0.2.8)"
    ],
    "requires_python": "",
    "summary": "Library and command line interface to interact with Drink Management System of Fachschaft TF Uni Freiburg.",
    "version": "1.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6659501,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f58e7e5c695699ca18a74ee99a4f4ae889331aea61829d5eec28c94e888852e0",
        "md5": "5f52e05681ec507660dc49d44b794fb2",
        "sha256": "7a24105e683aea52f400c8517ba53dc8806e305a673def06074b4fb4682a2719"
      },
      "downloads": -1,
      "filename": "dmsclient-1.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f52e05681ec507660dc49d44b794fb2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11403,
      "upload_time": "2020-02-19T09:29:21",
      "upload_time_iso_8601": "2020-02-19T09:29:21.579547Z",
      "url": "https://files.pythonhosted.org/packages/f5/8e/7e5c695699ca18a74ee99a4f4ae889331aea61829d5eec28c94e888852e0/dmsclient-1.5.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b22a65a62699a08498177f9ac223b1a4922bbd3dedede6527ea8a5bdf7e2d79",
        "md5": "d48828903a1ff6faabcf22facf49f885",
        "sha256": "c6589f792b797c345abb2695fc746ca3a6dcfb8405275fecd5501c0bc4f656e5"
      },
      "downloads": -1,
      "filename": "dmsclient-1.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d48828903a1ff6faabcf22facf49f885",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10759,
      "upload_time": "2020-02-19T09:29:22",
      "upload_time_iso_8601": "2020-02-19T09:29:22.582969Z",
      "url": "https://files.pythonhosted.org/packages/3b/22/a65a62699a08498177f9ac223b1a4922bbd3dedede6527ea8a5bdf7e2d79/dmsclient-1.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}