{
  "info": {
    "author": "Draftable",
    "author_email": "hello@draftable.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Draftable Compare API - Python Client Library\n=============================================\n\nThis is a thin Python 2/3 client for Draftable's `document comparison\nAPI <https://draftable.com/comparison-api>`__.\nIt wraps the available endpoints, and handles authentication and\nsigning for you. The source code is available on\n`Github <https://github.com/draftable/compare-api-python-client>`__.\n\nSee the `full API documentation <https://api.draftable.com>`__ for an\nintroduction to the API, usage notes, and other references.\n\nGetting started\n---------------\n\n-  Sign up for free at `api.draftable.com <https://api.draftable.com>`__\n   to get your credentials.\n\n-  ``pip install draftable-compare-api``\n\n-  Instantiate the client:\n\n   ::\n\n       import draftable\n       client = draftable.Client(<your account ID>, <your auth token>)\n       comparisons = client.comparisons\n\n-  Start creating comparisons:\n\n   ::\n\n       comparison = comparisons.create(\n           left = comparisons.side_from_url('https://api.draftable.com/static/test-documents/code-of-conduct/left.rtf', file_type='rtf'),\n           right = comparisons.side_from_url('https://api.draftable.com/static/test-documents/code-of-conduct/right.pdf', file_type='pdf'),\n       )\n\n       print(\"Comparison created:\", comparison)\n       print(\"Viewer URL (expires in 30 min):\", comparisons.signed_viewer_url(comparison.identifier))\n\n\nClient API\n==========\n\nDependencies\n------------\n\nThe only dependency is the pypi ``requests`` package.\n\nDesign notes\n------------\n\n-  This library should be compatible with Python 2 and Python 3. Submit\n   a Github issue if it doesn't work with your interpreter.\n-  This Python library always returns \"aware\" ``datetime`` objects, and\n   assumes that any naive ``datetime`` objects given to it are in *UTC* time.\n-  The API is designed such that *requests should always succeed*, and\n   *comparisons should always succeed* in production.\n\n   -  Errors in making requests will only occur upon network failure, or\n      when you provide invalid credentials or data.\n   -  Comparisons will only fail when the files are unreadable, or\n      exceed your account's size limits.\n\nInitializing the client\n-----------------------\n\nThe package ``draftable-compare-api`` installs a single module,\n``draftable``, which exports a single class, ``draftable.Client``.\n\n``Client(account_id: str, auth_token: str)`` will construct an API\nclient. At present, ``Client`` has a single property, ``comparisons``,\nthat yields a ``ComparisonsEndpoint`` that manages the comparisons for\nyour API account.\n\nSo, we'll assume you set things up as follows:\n\n::\n\n    import draftable\n    client = draftable.Client(<your account ID>, <your auth token>)\n    comparisons = client.comparisons\n\nGetting comparisons\n-------------------\n\n``ComparisonsEndpoint`` provides ``all()`` and\n``get(identifier: str)``.\n\n- ``all()`` returns a ``list`` of *all your\n  comparisons*, ordered from newest to oldest. This is a potentially\n  expensive operation.\n- ``get(identifier: str)`` returns a single\n  ``Comparison`` object, or raises ``comparisons.NotFound`` if there isn't\n  a comparison with that identifier.\n\nComparison objects\n~~~~~~~~~~~~~~~~~~\n\n``Comparison`` objects have the following properties:\n\n- ``identifier``: a ``string`` giving the identifier.\n- ``left``, ``right``: objects giving information about each side, with properties:\n\n  - ``file_type``: the file extension.\n  - ``source_url`` *(optional)*: if the file was specified as a URL, this will be a string with the URL. Otherwise, ``None``.\n  - ``display_name`` *(optional)*: the display name, if one was given. Otherwise, ``None``.\n\n- ``public``: a ``bool`` giving whether the comparison is public, or requires authentication to view.\n- ``creation_time``: a UTC ``datetime`` giving when the comparison was created.\n- ``expiry_time`` *(optional)*: if the comparison will expire, a UTC ``datetime`` giving the expiry time. Otherwise, ``None``.\n- ``ready``: ``bool`` indicating whether the comparison is ready for display.\n\nIf a ``Comparison`` is ``ready`` (i.e. it has been processed and is ready for display), it will have the following additional properties:\n\n- ``ready_time``: UTC ``datetime`` giving the time the comparison became ready.\n- ``failed``: ``bool`` indicating whether the comparison succeeded or failed.\n- ``error_message`` *(only present if ``failed``)*: a string providing the developer with the reason the comparison failed.\n\nExample usage\n~~~~~~~~~~~~~\n\n::\n\n    identifier = '.....'\n\n    try:\n        comparison = comparisons.get('<identifier>')\n\n        print(\"Comparison '{identifier}' ({publicOrPrivate}) is {readyOrNot}.\".format(\n            identifier = identifier,\n            publicOrPrivate = 'public' if comparison.public else 'private',\n            readyOrNot = 'ready' if comparison.ready else 'not ready',\n        ))\n\n        if comparison.ready:\n            elapsed = comparison.ready_time - comparison.creation_time\n            print(\"The comparison took {} seconds.\".format(elapsed.total_seconds()))\n\n            if comparison.failed:\n                print(\"The comparison failed. Error message:\", comparison.error_message)\n\n    except comparisons.NotFound:\n        print(\"Comparison '{}' doesn't exist.\")\n\nDeleting comparisons\n--------------------\n\n``ComparisonsEndpoint`` provides ``delete(identifier)``, which attempts to delete the comparison with that identifier.\n\nIt has no return value, and raises ``comparisons.NotFound`` if there isn't a comparison with that identifier.\n\nExample usage\n~~~~~~~~~~~~~\n\n::\n\n    oldest_comparisons = comparisons.all()[-10:]\n\n    print(\"Deleting oldest {} comparisons...\".format(len(oldest_comparisons)));\n\n    for comparison in oldest_comparisons:\n        comparisons.delete(comparison.identifier)\n        print(\"Deleted comparison '{}'.\".format(comparison.identifier)\n\nCreating comparisons\n--------------------\n\n``ComparisonsEndpoint`` provides ``create(...)``, which returns a ``Comparison`` object representing the newly created comparison.\n\nCreation options\n~~~~~~~~~~~~~~~~\n\n``create`` accepts the following arguments:\n\n-  ``left``, ``right``: objects describing the left and right files, created using either ``comparisons.side_from_file`` or ``comparisons.side_from_url`` (see below)\n-  ``identifier`` *(optional)*: the identifier to use for the comparison.\n\n   -  If specified, the identifier can't clash with an existing\n      comparison.\n   -  If left unspecified, the API will automatically generate one for\n      you.\n\n-  ``public`` *(optional)*: whether the comparison is publicly accessible.\n\n   -  Defaults to ``false``. If ``true``, then the comparison viewer can be accessed by anyone, without authentication.\n   -  See the full API documentation for details.\n\n-  ``expires`` *(optional)*: a ``timedelta`` or a UTC ``datetime``, specifying when the comparison will be automatically deleted.\n\n   -  If given, must be a positive ``timedelta``, or a UTC ``datetime`` in the future.\n   -  Defaults to ``None``, meaning the comparison will never expire.\n\nThe function ``comparisons.side_from_url`` accepts the following arguments:\n\n- ``url``: a fully qualified URL from which Draftable will download the file.\n- ``file_type``: the type of the file, specified by the file extension.\n\n  - If you provide the incorrect file type, the comparison will fail.\n\n- ``display_name`` *(optional)*: a name for the file, to be shown in the comparison.\n\nThe function ``comparisons.side_from_file`` accepts the following arguments:\n\n- ``file``: a file object to be read and uploaded. Ensure the file is opened for reading in *binary mode*.\n- ``file_type``: as before.\n- ``display_name`` *(optional)*: as before.\n\nSupported file types\n~~~~~~~~~~~~~~~~~~~~\n\nThe following file types are supported:\n\n- PDF: ``pdf``\n- Word: ``docx``, ``docm``, ``doc``, ``rtf``\n- PowerPoint: ``pptx``, ``pptm``, ``ppt``\n\nExceptions\n~~~~~~~~~~\n\nIf you provide ``comparisons.side_from_file`` with an invalid ``file_type``, or a ``file`` that isn't opened in *binary mode*, it will raise ``comparisons.InvalidArgument``.\n\nIf you provide ``comparisons.side_from_url`` with an invalid ``file_type`` or a badly formatted ``url``, it will raise ``comparisons.InvalidArgument``.\n\nExceptions are raised by ``create`` in the following cases:\n\n- If a parameter is invalid (e.g. ``expires`` is set to a time in the past), it will raise ``comparisons.InvalidArgument``.\n- If ``identifier`` is already in use by another comparison, ``comparisons.BadRequest`` is raised.\n- If the API endpoint finds your request invalid for another reason, raises ``comparisons.BadRequest``.\n\nExample usage\n~~~~~~~~~~~~~\n\n::\n\n    identifier = comparisons.generate_identifier(); # Generates a unique identifier.\n\n    with open('path/to/right/file.docx', 'rb) as right_file:\n\n        comparison = comparisons.create(\n\n            identifier = identifier,\n\n            left = comparisons.side_from_url('https://domain.com/left.pdf', file_type='pdf', display_name='document.pdf'),\n            right = comparisons.side_from_file(right_file, file_type='docx', display_name='document (revised).docx'),\n\n            # 'public' is omitted, because we only want to let authenticated users view the comparison.\n\n            # Comparison expires 30 minutes into the future.\n            expires: timedelta(minutes=30),\n\n        )\n\n    print(\"Created comparison:\", comparison);\n\n    # This generates a signed viewer URL that can be used to access the private comparison for the next 30 minutes.\n    print(\"Viewer URL (expires in 30 min):\", comparisons.signed_viewer_url(identifier));\n\nDisplaying comparisons\n----------------------\n\nComparisons are displayed using a *viewer URL*. See the section on displaying comparisons in the `API documentation <https://api.draftable.com>`__ for details.\n\nViewer URLs are generated with the following methods:\n\n-  ``comparisons.public_viewer_url(identifier: str, wait: bool = False)``\n\n   -  Viewer URL for a public comparison with the given ``identifier``.\n   -  ``wait`` is ``false`` by default, meaning the viewer will show an\n      error if no such comparison exists.\n   -  If ``wait`` is ``true``, the viewer will wait for a comparison\n      with the given ``identifier`` to exist (potentially displaying a\n      loading animation forever).\n\n-  ``comparisons.signed_vewer_url(identifier: str, valid_until: datetime | timedelta = None, wait: bool = False)``\n\n   -  Gets a signed viewer URL for a comparison with the given\n      ``identifier``. (The signature is an HMAC based on your\n      credentials.)\n   -  ``valid_until`` gives when the URL will expire. It's specified as\n      a UTC ``datetime``, or a ``timedelta``.\n\n      -  If ``valid_until`` is ``None``, the URL defaults to expiring 30\n         minutes in the future (more than enough time to load the page).\n\n   -  Again, if ``wait`` is ``true``, the viewer will wait for a\n      comparison with the given ``identifier`` to exist.\n\nExample usage\n~~~~~~~~~~~~~\n\nSomewhere in ``tasks.py``:\n\n::\n\n    # Celery task for creating a comparison.\n    # This will run on a background worker.\n\n    @app.task\n    def upload_comparison_in_background(identifier, left_file_path, right_url):\n        with open(left_file_path, 'rb') as left_file:\n            comparisons.create(\n                identifier = identifier,\n                left = comparisons.side_from_file(left_file, ...),\n                right = comparisons.side_from_url(right_url, ...),\n            )\n\nThen, in ``compare.py``:\n\n::\n\n    from .tasks import upload_comparison_in_background\n\n    identifier = comparisons.generate_identifier()\n\n    # Upload our request in the background with our Celery task.\n    upload_comparison_in_background.delay(identifier, ...)\n\n    # At some point, we'll have created the comparison. In the mean time, we'll immediately give the user a viewer URL.\n    viewer_url = comparisons.signed_viewer_url(identifier, wait=true);\n\n    # This URL is valid for 30 minutes, the default amount of time.\n    print(\"Comparison is being created. View at:\", viewer_url)\n\nThe comparison viewer will display a loading animation, waiting for the\ncomparison to be created and processed.\n\nUtility methods\n---------------\n\n-  ``comparisons.generate_identifier()`` generates a random unique\n   identifier for you to use.\n\n--------------\n\nOther information\n=================\n\nPython 2 and 3 compatibility\n----------------------------\n\nThis package officially supports the latest releases of Python 2 and 3.\n\nAt the time of writing, ``Python 2.7.13``, ``Python 3.5.3``, and\n``Python 3.6.0`` are known to be supported.\n\n-----\n\nThat's it! Please report issues you encounter, and we'll work quickly to resolve\nthem. Contact us at\n`support@draftable.com <mailto://support@draftable.com>`__ if you need\nassistance.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/draftable/compare-api-python-client",
    "keywords": "compare documents draftable api pdf word powerpoint",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "draftable-compare-api",
    "package_url": "https://pypi.org/project/draftable-compare-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/draftable-compare-api/",
    "project_urls": {
      "Homepage": "https://github.com/draftable/compare-api-python-client"
    },
    "release_url": "https://pypi.org/project/draftable-compare-api/1.0.9/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "Draftable Compare API - Python Client Library",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15805434,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c3c3a2eca20e60710b572f3081a8d8c062df43de51ecfea64952594fe63e954",
        "md5": "9c824f00b6668c729db1c25468d35336",
        "sha256": "c320ac8731a695b7abd696b3f15ba957988ac3a42326d4103111c866a5f9589f"
      },
      "downloads": -1,
      "filename": "draftable_compare_api-1.0.9-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9c824f00b6668c729db1c25468d35336",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22146,
      "upload_time": "2017-06-15T18:13:15",
      "upload_time_iso_8601": "2017-06-15T18:13:15.126980Z",
      "url": "https://files.pythonhosted.org/packages/0c/3c/3a2eca20e60710b572f3081a8d8c062df43de51ecfea64952594fe63e954/draftable_compare_api-1.0.9-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3abaadc5f507a2b02798244eb3b7da2905d7c755dac2ac4ce68d798087eb7b86",
        "md5": "9fc58334d4b837e232dff4c0e684f2fe",
        "sha256": "fb50ddb668cecd81891ea1df1278a4e0ab2c8847d221cc7ca7d1bf2a8b9af310"
      },
      "downloads": -1,
      "filename": "draftable_compare_api-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "9fc58334d4b837e232dff4c0e684f2fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12966,
      "upload_time": "2017-06-15T18:13:17",
      "upload_time_iso_8601": "2017-06-15T18:13:17.950070Z",
      "url": "https://files.pythonhosted.org/packages/3a/ba/adc5f507a2b02798244eb3b7da2905d7c755dac2ac4ce68d798087eb7b86/draftable_compare_api-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}