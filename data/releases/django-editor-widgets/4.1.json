{
  "info": {
    "author": "Giorgi Kakulashvili",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django-editor-widgets\n\n\nThis package provides some custom widgets to use monaco or tinymce editors in django admin.\n\n**remark**: From version 4.0 static files for tinymce and monaco editors are removed.\n\n\n## Installation\n\nTo install the package by `pip` run following command\n\n```sh\n# From Github (latest updates)\n$ pip install git+https://github.com/giorgi94/django-editor-widgets.git\n# Or\n$ pip install django-editor-widgets\n```\n\n## Usage\n\nTo start using the package in your project, you need to open `settings.py` file and add following lines\n\n```python\n# settings.py\nfrom pathlib import Path\n\n# import configurations for editor\nfrom djangoeditorwidgets.config import init_web_editor_config\n\n# set base dir by Path instead of os.path\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Application definition\n\nINSTALLED_APPS = [\n    ...\n    'djangoeditorwidgets',\n    ...\n]\n\n\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = BASE_DIR / \"media\"\n\nSTATIC_URL = \"/static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n\nWEB_EDITOR_DOWNLOAD, WEB_EDITOR_CONFIG = init_web_editor_config(\n    # set the directory where files are downloaded\n    BASE_DIR / \"static_cdn\",\n    # set static url prefix\n    STATIC_URL\n)\n\n\n```\n\nIn current version uses `Path` instead of `os.path` to manage files and directories. If needed configuration parameters can be written manually\n\n```python\nfrom os.path import join\n\nWEB_EDITOR_DOWNLOAD = {\n    \"to\": BASE_DIR / \"static_cdn\",\n    \"tinymce\": {\n        \"url\": \"https://download.tiny.cloud/tinymce/community/tinymce_5.10.3.zip\",\n        \"target\": \"tinymce/js/tinymce\",\n    },\n    \"monaco\": {\n        \"url\": \"https://registry.npmjs.org/monaco-editor/-/monaco-editor-0.32.1.tgz\",\n        \"target\": \"package/min\",\n    },\n}\n\nWEB_EDITOR_CONFIG = {\n    \"tinymce\": {\n        \"js\": [\n            join(STATIC_URL, \"tinymce/tinymce.min.js\"),\n            join(STATIC_URL, \"djangoeditorwidgets/tinymce/tinymce.config.js\"),\n            join(STATIC_URL, \"djangoeditorwidgets/tinymce/tinymce.init.js\"),\n        ],\n        \"css\": {\n            \"all\": [\n                join(STATIC_URL, \"djangoeditorwidgets/tinymce/tinymce.custom.css\"),\n            ]\n        },\n    },\n    \"monaco\": {\n        \"js\": [\n            join(STATIC_URL, \"monaco/vs/loader.js\"),\n            join(STATIC_URL, \"djangoeditorwidgets/monaco/monaco.config.js\"),\n        ],\n        \"css\": {\n            \"all\": [\n                join(STATIC_URL, \"djangoeditorwidgets/monaco/monaco.custom.css\"),\n            ]\n        },\n    },\n}\n```\n\n\n### Commands\n\nStatic files are removed from the package, instead it provides management command to download and extract files to given  location\n\n```bash\n$ python manage.py download_editpr_scripts\n```\n\n\n### TinyMCE\n\nTo use tinymce editor in admin, we need to change default widget in the form with `TinymceWidget`\n\n\n```python\n# forms.py\nfrom django import forms\nfrom djangoeditorwidgets.widgets import TinymceWidget\nfrom .models import TextModel\n\n\nclass TextModelForm(forms.ModelForm):\n\n    class Meta:\n        model = TextModel\n        fields = '__all__'\n        widgets = {\n            'text': TinymceWidget(name=\"default\")\n        }\n```\n\nBy `name` argument we can modify selector and can define multiple configs for tinymce editor.\n\n\n### Monaco Editor\n\nIn lastest verions of `sqlite3` and `mariadb` we now have `json field`, it is more limited compared to `postgresql` but can handle json validation and parsing\n\n```python\n# models.py\nimport json\nfrom django.db import models\n\nclass JSONModel(models.Model):\n    title = models.CharField(max_length=50)\n    text = models.JSONField(null=True)\n\n    def __str__(self):\n        return self.title\n\n\n# forms.py\nfrom django import forms\nfrom djangoeditorwidgets.widgets import MonacoEditorWidget\nfrom .models import JSONModel\n\n\nclass JsonModelForm(forms.ModelForm):\n    class Meta:\n        model = JSONModel\n        fields = \"__all__\"\n        widgets = {\n            \"text\": MonacoEditorWidget(name=\"default\", language=\"json\", wordwrap=True)\n        }\n\n```\n\n## Remark\n\nUnlike other django package which are for Rich web editors, this package allows developer to fully use capablities and custom plugins for the web editor, like tinymce or monaco, since configurations doesn't go through django settings.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/giorgi94/django-editor-widgets",
    "keywords": "django,monaco,tinymce",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-editor-widgets",
    "package_url": "https://pypi.org/project/django-editor-widgets/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-editor-widgets/",
    "project_urls": {
      "Homepage": "https://github.com/giorgi94/django-editor-widgets"
    },
    "release_url": "https://pypi.org/project/django-editor-widgets/4.1/",
    "requires_dist": [
      "Django (>=3.0)",
      "Pillow (>=8)",
      "requests (>=2)"
    ],
    "requires_python": "",
    "summary": "Rich web editor widgets in the Django Admin",
    "version": "4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15420608,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ece757b53bb9000c1d1196547ff6452bbbcd81ede5ce702479a736e1f8840072",
        "md5": "c7664fd4b12879c5c8f067f8f9d876a8",
        "sha256": "bc31907fc527967185126c1e8caf18073d2dc57f4d6516848516dee64ab7d5ef"
      },
      "downloads": -1,
      "filename": "django_editor_widgets-4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c7664fd4b12879c5c8f067f8f9d876a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13488,
      "upload_time": "2022-07-23T08:28:49",
      "upload_time_iso_8601": "2022-07-23T08:28:49.385181Z",
      "url": "https://files.pythonhosted.org/packages/ec/e7/57b53bb9000c1d1196547ff6452bbbcd81ede5ce702479a736e1f8840072/django_editor_widgets-4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1472c49fb622c7a1c94e0e11b81b9f7077407a0be386b5d2e31b5c1b30252b28",
        "md5": "f2ad6a513a061bd0b8fda58110603b1d",
        "sha256": "59a8899965099d8985469c4cb39a3be0cf78024a91cda1cc00c004ea5a009383"
      },
      "downloads": -1,
      "filename": "django-editor-widgets-4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f2ad6a513a061bd0b8fda58110603b1d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9494,
      "upload_time": "2022-07-23T08:28:51",
      "upload_time_iso_8601": "2022-07-23T08:28:51.558674Z",
      "url": "https://files.pythonhosted.org/packages/14/72/c49fb622c7a1c94e0e11b81b9f7077407a0be386b5d2e31b5c1b30252b28/django-editor-widgets-4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}