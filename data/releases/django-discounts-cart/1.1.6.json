{
  "info": {
    "author": "genkosta",
    "author_email": "genkosta43@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "django-discounts-cart\r\n=====================\r\n\r\nПриложение для Django - Управление скидками и корзиной в интернет\r\nмагазине.\r\n\r\nversion 1.1.6\r\n\r\nDjango >= 1.7 и Python 2.7\r\n\r\nСкидки добавляются через админ-панель.\r\n\r\nСкидки можно будет добавить на каждую категорию и продукт.\r\n\r\nТакже можно настроить поведение скидок.\r\n\r\n\r\nУстановка:\r\n~~~~~~~~~~\r\n\r\n::\r\n\r\n    1) pip install django-discounts-cart\r\n\r\n    2) Добавьте в INSTALLED_APPS\r\n        'discounts_cart',\r\n\r\n    3) Добавьте в context_processors\r\n        'discounts_cart.context_processors.vars_cart',\r\n\r\n    4) Добавьте discounts-cart в urls.py вашего проекта\r\n        url(r'^cart/', include('discounts_cart.urls', namespace='discounts_cart')),\r\n\r\n    5) Добавьте в проект\r\n        jquery.cookie.js --> http://plugins.jquery.com/cookie/\r\n        cart.js          --> https://github.com/genkosta/django-discounts-cart/blob/master/cart.js\r\n        templates/discounts_cart/in_cart_link.html --> https://github.com/genkosta/django-discounts-cart/tree/master/templates/discounts_cart\r\n\r\n    6) Обновить миграции\r\n        python manage.py migrate discounts_cart\r\n\r\n\r\nВ приложении для определенного типа товара, создаем модели\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    В приложениях не забываем настраивать __init__.py и apps.py\r\n    Пример:\r\n        __init__.py\r\n            default_app_config = 'products.apps.ProductsConfig'\r\n        \r\n        apps.py\r\n            from django.apps import AppConfig\r\n            \r\n            class ProductsConfig(AppConfig):\r\n                name = 'products'\r\n                verbose_name = 'Products'\r\n\r\n\r\n    Пример настройки моделей:\r\n    ( для примера, можно посмотреть здесь --> https://github.com/genkosta/django-discounts-cart/tree/master/examples )\r\n\r\n    from django.db import models\r\n    from discounts_cart.models import DiscountsInCategories, DiscountsInProducts\r\n\r\n    class Brand(DiscountsInCategories):\r\n        pass\r\n\r\n    class Category(DiscountsInCategories):\r\n        pass\r\n\r\n    class Parameter(DiscountsInCategories):\r\n        pass\r\n\r\n    # Product - Обязательное название модели, во всех приложениях товаров\r\n    class Product(DiscountsInProducts):\r\n        brand = models.ForeignKey(Brand)\r\n        categories = models.ManyToManyField(Category)\r\n        parameters = models.ManyToManyField(Parameter)\r\n        \r\n    # Обязательный метод\r\n    def view_price(self):\r\n        pattern = re.compile(r'\\.[0]+$')\r\n        return '{0} {1}'.format(pattern.sub('', str(self.price)), self.currency)\r\n    view_price.short_description = _('Price')\r\n\r\n    # Обязательный метод\r\n    @property\r\n    def get_correct_price(self):\r\n        return self.price  # Only Decimal type\r\n\r\n    # Add names of fields to calculate discounts\r\n    # Обязательный метод\r\n    @staticmethod\r\n    def get_field_names():\r\n        field_names_dect = {\r\n            'foreign_key': ('brand',),\r\n            'many_to_many': ('categories', 'parameters')\r\n        }\r\n        return field_names_dect\r\n\r\nДобавляем в шаблоны\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nbase.html\r\n^^^^^^^^^\r\n\r\n::\r\n\r\n    <!-- Cart -->\r\n    <div id=\"id_cart\">\r\n      <div><strong>Cart</strong></div>\r\n        <span>count:</span>&ensp;<span class=\"cart_count\">{{ cart_count }}</span><br>\r\n        <span>amount:</span>&ensp;<span class=\"cart_amount\">{{ cart_amount }}</span><br>\r\n        {% url 'discounts_cart:view_cart' as cart_url %}\r\n        <a href=\"{% if cart_count %}{{ cart_url }}{% else %}javascript:void(0);{% endif %}\"\r\n           class=\"cart_view_product_list\" data-cart_url=\"{{ cart_url }}\">\r\n            <img src=\"{% static 'img/cart.png' %}\"><br><span>Open</span></a>\r\n    </div>\r\n\r\n    <a href=\"{% url 'home' %}\">Home</a>&emsp;\r\n    <a href=\"{% url 'home' %}?sort_by_optimal_discount=1\">Sort by optimal discount</a>\r\n    \r\nhome.html\r\n^^^^^^^^^\r\n\r\n::\r\n\r\n    {% extends 'base.html' %}\r\n    {% load staticfiles discounts_cart %}\r\n    \r\n    \r\n    {% block content %}\r\n      <!-- View products -->\r\n      {% for product in products %}\r\n        <div>\r\n          <p>\r\n              Product: {{ product.name }}<br>\r\n              Discount {{ product.view_optimal_discount }}<br>\r\n              Price: {{ product.view_price }} < > {{ product.view_optimal_price }} {{ product.currency }}\r\n          </p>\r\n    \r\n          {% cart_add_select_product 'products' 'product' product.id 'In cart' 'From cart' flag_img=True %}\r\n        </div>\r\n        <br>\r\n      {% endfor %}\r\n    \r\n      <!-- Возможные варианты использования шаблонного тега cart_add_select_prod -->\r\n      {% comment %}\r\n          {% cart_add_select_product 'app' 'model' prod_id 'In cart' 'From cart' %}\r\n              or\r\n          {% cart_add_select_product 'app' 'model' prod_id 'In cart' 'From cart' flag_img=True %}\r\n              or\r\n          {% cart_add_select_product 'app' 'model' prod_id flag_img=True %}  <!-- only images -->\r\n      {% endcomment %}\r\n    \r\n      <!-- README\r\n        Аргументы для шаблонного тега - cart_add_select_prod_*:\r\n            1) app  - ( имя приложения )\r\n            2) model  - ( класс модели )\r\n            3) prod_id  - ( ID товара - Пример: product.id)\r\n            4) name_in_cart default=''  - ( Название ссылок или кнопок - Пример: 'In cart' )\r\n            5) name_from_cart default=''  - ( Название ссылок или кнопок - Пример: 'From cart' )\r\n            6) add_more_name default='Add more'  - ( Название ссылок для увеличения количества того же продукта )\r\n            7) flag_img - default=False - ( логический флаг, позволяет отображать иконки на ссылках или кнопках,\r\n                                            настройка изображений через классы - cart_img_in, cart_img_from )\r\n    \r\n        Classes ( для настройки внешнего вида, ссылок и кнопок - 'In cart' и 'From cart' ):\r\n            1) cart_controls  - ( обертка <div> для ссылок и кнопок )\r\n            2) cart_item_select_product  - ( для настройки ссылок и кнопок - 'In cart' и 'From cart' )\r\n            3) cart_img_in, cart_img_from  - ( для настройки иконок на ссылках и кнопках, если добавлен flag_img=True )\r\n    \r\n        CSS:\r\n        <style type=\"text/css\">\r\n            .cart_add_more_product {  // обязательно добавить в стили <<<\r\n              display: none;\r\n            }\r\n    \r\n            .cart_add_more_product_active {  // обязательно добавить в стили <<<\r\n              display: block;\r\n            }\r\n    \r\n            // Добавить если используется flag_img=True\r\n            .cart_img_in, .cart_img_from {\r\n              display: block;\r\n              width: 40px;\r\n              height: 40px;\r\n              background-size: cover;\r\n            }\r\n    \r\n            .cart_img_in {\r\n              background: url(\"../img/in_cart.png\") no-repeat center;  // добавьте свою иконку\r\n            }\r\n    \r\n            .cart_img_from  {\r\n              background: url(\"../img/from_cart.png\") no-repeat center;  // добавьте свою иконку\r\n            }\r\n        </style>\r\n      -->\r\n    {% endblock %}\r\n\r\ncart.html\r\n^^^^^^^^^\r\n\r\n::\r\n\r\n    {% extends 'base.html' %}\r\n    {% load staticfiles %}\r\n    \r\n    \r\n    {% block content %}\r\n      <!-- Products list -->\r\n      {% for product in products %}\r\n        <p>\r\n            Product: {{ product.name }}<br>\r\n            Count: {{ product.count }}<br>\r\n            Price: {{ product.view_optimal_price }} {{ product.currency }}\r\n        </p>\r\n      {% endfor %}\r\n    \r\n      <p>_ _ _ _ _ _ _ _ _ _</p>\r\n    \r\n      <!-- Total amount -->\r\n      <p>Итого</p>\r\n      <p>Total count:&ensp;<span class=\"cart_count\">{{ cart_count }}</span></p>\r\n      <p>Total amount:&ensp;<span class=\"cart_amount\">{{ cart_amount }}</span></p>\r\n      {% if cart_count %}\r\n    \r\n      <p>_ _ _ _ _ _ _ _ _ _</p>\r\n    \r\n      <!-- Recalculate with a promo-code -->\r\n      <P>Пересчитать с промо-кодом</P>\r\n      <p>Total count:&ensp;<span class=\"cart_count_recalculation\">0</span></p>\r\n      <p>Total amount:&ensp;<span class=\"cart_amount_recalculation\">0</span></p>\r\n      <form id=\"id_cart_check_promo_code_form\" action=\"{% url 'discounts_cart:recalculation_cart_with_promo_code' %}\" method=\"post\">\r\n        <input id=\"id_cart_promo_code_text\" type=\"text\" name=\"promo_code\" value=\"\" placeholder=\"Enter promo-code\">\r\n        <button>Recalculation</button>\r\n      </form>\r\n    \r\n      <p>_ _ _ _ _ _ _ _ _ _</p>\r\n    \r\n      <!-- Payment -->\r\n      <p>Платеж</p>\r\n      <form id=\"id_cart_payment_form\" action=\"{% url 'payments' %}\" method=\"post\">{% csrf_token %}\r\n        <input id=\"id_cart_promo_code_text\" type=\"text\" name=\"promo_code\" value=\"\" placeholder=\"Enter promo-code, if present\">\r\n        <button>Payment</button><br>\r\n        <label for=\"id_cart_promo_code_text\">( Если промо-код не подходит, он будет не учтен. )</label>\r\n      </form>\r\n      {% endif %}\r\n    {% endblock %}\r\n\r\nДля сортировки по оптимальным скидкам\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    Пример:\r\n    \r\n    home views.py\r\n        \r\n    from products.models import Product  # или Phone или Стиральные машины\r\n    \r\n    def home(request):\r\n    \r\n        if request.GET.get('sort_by_optimal_discount', False):\r\n            # Выборка всех активных, плюс сортировка по оптимальным скидкам\r\n            products = Product.products.sort_by_optimal_discount()\r\n        else:\r\n            # Выборка всех активных\r\n            products = Product.products.active()\r\n            # или\r\n            # products = Product.objects.filter(active=True)\r\n    \r\n        return render(request, 'home.html', {\r\n            'products': products\r\n        })\r\n\r\nДля контроля над скидками, после завершения оплаты, добавить\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n( Если промо-коды настроены как удаляемые, они будут удалятся. )\r\n\r\n::\r\n\r\n    Пример:\r\n    \r\n    payment views.py\r\n    \r\n    from discounts_cart.utils import control_promo_codes, recalculation_payment\r\n\r\n    def payment(request):\r\n\r\n        if request.method == 'POST':\r\n        \r\n            # Recalculation before payment ( for checking )\r\n            result = recalculation_payment(request)\r\n            count_products = result['count']\r\n            amount = result['amount']\r\n            \r\n            # Control promo-codes\r\n            promo_code = request.POST['promo_code'].strip()\r\n            control_promo_codes(request, promo_code)\r\n\r\nCron\r\n~~~~\r\n\r\n( По желанию, добавить комманды в Cron. )\r\n\r\n::\r\n\r\n    # Деактивировать использованные скидки\r\n    python manage.py discounts_cart deact\r\n    или\r\n    # Удалить использованные скидки\r\n    python manage.py discounts_cart del",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/genkosta/django-discounts-cart/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/genkosta/django-discounts-cart",
    "keywords": "django discounts cart commerce e-ecommerce",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-discounts-cart",
    "package_url": "https://pypi.org/project/django-discounts-cart/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-discounts-cart/",
    "project_urls": {
      "Download": "https://github.com/genkosta/django-discounts-cart/tarball/master",
      "Homepage": "https://github.com/genkosta/django-discounts-cart"
    },
    "release_url": "https://pypi.org/project/django-discounts-cart/1.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Discounts for online store and management cart",
    "version": "1.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2501765,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52551cce8c8649d3ac74dfa8eecdaab86385252222124a454c36ed1b71d5bb56",
        "md5": "056972131098675ef9679143751c2f25",
        "sha256": "eaaf27135cf02ce7f98b02109f03bc11d2522c09c1dc6068e6b4a48adef75967"
      },
      "downloads": -1,
      "filename": "django-discounts-cart-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "056972131098675ef9679143751c2f25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15263,
      "upload_time": "2016-09-28T17:09:34",
      "upload_time_iso_8601": "2016-09-28T17:09:34.736082Z",
      "url": "https://files.pythonhosted.org/packages/52/55/1cce8c8649d3ac74dfa8eecdaab86385252222124a454c36ed1b71d5bb56/django-discounts-cart-1.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}