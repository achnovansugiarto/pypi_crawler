{
  "info": {
    "author": "ElaboraInfo",
    "author_email": "ElaboraInfo@elabsis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: MIT License",
      "License :: OSI Approved :: Python License (CNRI Python License)",
      "Natural Language :: English",
      "Natural Language :: Portuguese (Brazilian)",
      "Programming Language :: Python :: 2.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Networking"
    ],
    "description": "# Cajax\r\n[![Build Status](https://travis-ci.com/FelipeLimaM/django-cajax.svg?token=ssxA8iUN5Ljo85PBsCrq&branch=master)](https://travis-ci.com/FelipeLimaM/django-cajax) [![Gitter](https://badges.gitter.im/FelipeLimaM/django-cajax.svg)](https://gitter.im/FelipeLimaM/django-cajax?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\nThis amazing library was developed to facilitate communication between your Django Server and your Website through AJAX requests. Check below the wiki to view the operation of the library.\r\n\r\n## Manual\r\nHere is a manual how it works.\r\n\r\n### Installation\r\n\r\nDownload and install package:\r\n```sh\r\n    $ pip install django-cajax\r\n```\r\n\r\nThrough Github:\r\n```sh\r\n    $ pip install -e git://github.com/FelipeLimaM/django-cajax#egg=djangocajax\r\n```\r\n\r\n### Configure Cajax on your Django Project\r\n\r\n**urls.py**\r\n```python\r\nurlpatterns += [\r\n    ...\r\n    url(r'^', include('cajax.urls')),\r\n]\r\n\r\n```\r\n\r\n**settings.py**\r\n```python\r\nINSTALLED_APPS = (\r\n    ...\r\n    'cajax',\r\n)\r\n\r\nMIDDLEWARE_CLASSES = (\r\n    ...\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n)\r\n```\r\n\r\n**base.html**\r\n```html\r\n{% load cajax %}\r\n<html>\r\n    <head>\r\n        <title>Hello!</title>\r\n    </head>\r\n    <body>\r\n        <p>My Page!</p>\r\n        <div id=\"val\"></div>\r\n        <p>End of my page.</p>\r\n        <script type=\"text/javascript\" src=\"/static/js/jquery.js\"></script> <!-- needs jQuery library -->\r\n        {% cajax csrf_token %} <!-- import the library core, with csrf_token -->\r\n    </body>\r\n</html>\r\n```\r\n\r\n### Using Cajax\r\nCreate a file called \"cajax.py\" for each app that you want to use Cajax.\r\nThe Cajax Core will import all the methods in these files.\r\n```\r\n-project\r\n--app1          <-- django app NOT using cajax\r\n---views.py\r\n---models.py\r\n--app2          <-- django app using cajax\r\n---cajax.py     <-- put your specific methods here\r\n---views.py\r\n---models.py\r\n--app3          <-- django app using cajax\r\n---cajax.py     <-- put your specific methods here\r\n---views.py\r\n---models.py\r\n```\r\n\r\nIn this file, you'll create a new type of views on Django, called \"Cajax Views\". These views are executed by Cajax Core.\r\nEach view will receive two arguments:\r\n* request: Django Request Instance, like a normal django view;\r\n* cajax: Cajax Core Instance (See attributes and methods avaliable below)\r\n\r\nDon't worry about return anything.\r\n\r\n**cajax.py**\r\n```python\r\nimport json # use json.dumps() to send dictionarys\r\n\r\ndef my_cajax_view(request, cajax):\r\n    info = \"important text\"\r\n    result = cajax.data['value1'] + cajax.data['value2']\r\n    my_dict = {\r\n        'name': cajax.data['name'],\r\n        'result': result\r\n    }\r\n\r\n    if cajax.data['name']:\r\n        cajax.script(\"alert('Welcome \"+ cajax.data['name'] +\"!');\")\r\n        cajax.script(\"on_client('Result: \"+ result +\"');\")\r\n        cajax.script(\"with_dictionary(\"+ json.dumps(my_dict) +\");\")\r\n        cajax.html(\"#val\", '<b>info</b>')\r\n    else:\r\n        cajax.redirect('www.mypage.com?result=error')\r\n\r\n    # More Methods\r\n    # cajax.render('#id', 'template.html', {'value': 12})\r\n    # cajax.html('.class', '<b>Hello World!</b>')\r\n    # cajax.add_css_class('a', 'css-class')\r\n    # cajax.redirect('www.google.com')\r\n    # cajax.get_response()\r\n```\r\n\r\nNow on your template, call cajax(view) or cajax(view, data).\r\n```javascript\r\nfunction on_client(string) {\r\n    $(\"#val\").val(string);\r\n}\r\n\r\nfunction with_dictionary(dict) {\r\n    alert(dict['name']);\r\n}\r\n\r\n// Cajax Calls\r\ncajax(\"my_cajax_view\");\r\n// or\r\ncajax(\"my_cajax_view\", {'name': 'Jo√£o', 'value1': 2, 'value2': 3});\r\n\r\n```\r\n\r\n## Cajax Core Attributes and Methods\r\n\r\nThe Cajax Core has the following attributes and methods avaliable to use:\r\n\r\nAttribute | Description\r\n--------- | -----------\r\ndata | Dicionary with data passed by cajax(url, data)\r\n\r\nMethod | Description\r\n------ | -----------\r\nget_response() | Return the HttpResponse that will be returned on the end. USE WITH CAUTION!\r\nclean() | Erase all data on response\r\nscript(code) | Put a raw javascript code on response\r\nredirect(url) | Redirect page to **url**\r\nshow(selector) | Force *display: block;* on node\r\nhide(selector) | Force *display: none;* on node\r\nprepend(selector, value) | Prepend value on node\r\nappend(selector, value) | Append value on node\r\nassign(selector, attribute, value) | Put a value on attribute of each node\r\nadd_css_class(selector, class) | Add class on node\r\nremove_css_class(selector, class) | Remove class on node\r\nhtml(selector, html) | Put html value on node\r\nrender(selector, template, context={}) | Render a template using context with Django Template on node\r\n\r\n\r\n## Contributors\r\n* Felipe Lima Morais\r\n* ElaboraInfo\r\n* Elabora Consultoria Ltda\r\n* Gabriel de Biasi",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/FelipeLimaM/django-cajax/tarball/1.0.17",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FelipeLimaM/django-cajax",
    "keywords": "Django,Ajax,jQuery,connection",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cajax",
    "package_url": "https://pypi.org/project/django-cajax/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cajax/",
    "project_urls": {
      "Download": "https://github.com/FelipeLimaM/django-cajax/tarball/1.0.17",
      "Homepage": "https://github.com/FelipeLimaM/django-cajax"
    },
    "release_url": "https://pypi.org/project/django-cajax/1.0.17/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django Asynchronous Communication with jQuery/Ajax",
    "version": "1.0.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1981359,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "419f02631a90532f03c4fa34ec089ed990cd7d9b83ec8b3a6da6e1161d8b0f19",
        "md5": "0394ccccd293fe76ce0be86ab50ac773",
        "sha256": "e42e4d14a3569d14cab744c34bb049f0f77dfbc0835da5295d0da2ec7c069e91"
      },
      "downloads": -1,
      "filename": "django-cajax-1.0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "0394ccccd293fe76ce0be86ab50ac773",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4754,
      "upload_time": "2016-02-19T16:46:54",
      "upload_time_iso_8601": "2016-02-19T16:46:54.098253Z",
      "url": "https://files.pythonhosted.org/packages/41/9f/02631a90532f03c4fa34ec089ed990cd7d9b83ec8b3a6da6e1161d8b0f19/django-cajax-1.0.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}