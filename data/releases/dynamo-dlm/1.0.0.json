{
  "info": {
    "author": "Barry Barrette",
    "author_email": "barrybarrette@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# dynamo-dlm\n[![Build Status](https://travis-ci.org/whitebarry/dynamo-dlm.svg?branch=master)](https://travis-ci.org/whitebarry/dynamo-dlm)\n[![Coverage Status](https://coveralls.io/repos/github/whitebarry/dynamo-dlm/badge.svg)](https://coveralls.io/github/whitebarry/dynamo-dlm)\n\n\nDistributed lock manager for Python using AWS DynamoDB for persistence\n\nCurrently this module exposes a single distributed locking primitive, `DynamoDbLock` that functions similarly to `threading.Lock` in the standard library \n\nLocks are scoped to a logical resource, represented by an arbitrary but uniquely identifying string, referred to below as the `resource_id`.\nAll instances of `DynamoDbLock` with the same table name and resource id will respect the lock rules. \nBy default, the lock looks for a DynamoDB table named `dynamo_dlm_locks`. \nYou may use a custom name for the table as outlined below.\nThe table must have a primary key of type `String` named `resource_id` and NO sort key:\n\n\n![](https://i.imgur.com/vOgVsAd.png)\n\nYour application will need the following permissions in order to function properly:\n![](https://i.imgur.com/nw5F1ab.png)\n\n##### A note on capacity and performance:\nThe lock class has been designed such that it should never fail under normal circumstances.\nGiven enough time, it should eventually acquire a lock even if there are thousands of simultaneous requests.\nWhen using on-demand capacity all locks should acquire in constant time, every time.   \nDynamoDB provisioned capacity is a topic too in depth to go into here but if you are using it and run into issues with locks taking too long to acquire then you likely need to increase your write capacity.\nThe lock should **never** consume read capacity. This is due to the way that DynamoDB handles conditional writes.\nLogging has been added at log level `WARNING` to notify you of any backoffs related to provisioned capacity.  \nWhen not constrained by write capacity or network speed, the average acquire/release cycle takes approximately 100ms when running outside of AWS. \nIf your execution environment is within AWS it will be markedly faster, as low as 10 ms when within the same region.\n\n## Installation and usage\n\nInstall via pip:\n\n`pip install dynamo-dlm`\n\n\nUsing the lock primitive is pretty straightforward. \nJust create an instance with a unique identifier and call `acquire()`. \nThis will block any other instances' calls to `acquire()` until `release()` is called or the lock expires, whichever comes first.\nWhen you're done with the resource you needed locked, call `release()` to give up control of the lock.\nRemember: all instances with the same identifier and table name will respect the same lock.\nIdeally you want to time the expiration to slightly longer than you expect the operation to take.\nThe lock only operates on whole second increments, so the shortest reasonable lock time is 1 second.\nAs you're developing, keep an eye on the `WARNING` logger for indications that your locks are expiring, meaning operations are taking longer than expected. \n\n```python\nimport dynamo_dlm as dlm\n\nresource_id = 'a unique resource identifier'\nlock = dlm.DynamoDbLock(resource_id)\nlock.acquire()\n# Code executed here is protected by the lock until it expires\nlock.release()\n```\n\nThe lock class is also implemented as a context manager:\n```python\nimport dynamo_dlm as dlm\n\nresource_id = 'a unique resource identifier'\nwith dlm.DynamoDbLock(resource_id):\n    # Code executed inside the \"with\" block is protected by the lock until it expires \n    pass\n```\n\nBy default, locks last for 10 seconds if not released.\nThe duration and/or table name can be set globally at the module level:\n```python\nimport dynamo_dlm as dlm\n\ndlm.DEFAULT_DURATION = 5\ndlm.DEFAULT_TABLE_NAME = 'my_dynamo_db_lock_table'\n\nresource_id = 'a unique resource identifier'\nlock = dlm.DynamoDbLock(resource_id)\n```\n\nThey can also be overridden per lock:\n```python\nimport dynamo_dlm as dlm\n\nresource_id = 'a unique resource identifier'\nlock = dlm.DynamoDbLock(resource_id, duration=5, table_name='my_dynamo_db_lock_table')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/whitebarry/dynamo-dlm",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynamo-dlm",
    "package_url": "https://pypi.org/project/dynamo-dlm/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynamo-dlm/",
    "project_urls": {
      "Homepage": "https://github.com/whitebarry/dynamo-dlm"
    },
    "release_url": "https://pypi.org/project/dynamo-dlm/1.0.0/",
    "requires_dist": [
      "boto3 (>=1.14.12)",
      "backoff (>=1.10.0)"
    ],
    "requires_python": "",
    "summary": "Distributed lock manager for Python using AWS DynamoDB for persistence",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7574485,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "111712fb026f0781f42723d25ef7fb4dd8061205c77e531ee31d350b32d20f43",
        "md5": "8e54c94b6a894552ef9867d0dedab0ae",
        "sha256": "0b25c149fbbf0108e796e328c6b2c46c781db44cab94907a448be3f06824238a"
      },
      "downloads": -1,
      "filename": "dynamo_dlm-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e54c94b6a894552ef9867d0dedab0ae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16637,
      "upload_time": "2020-06-27T05:19:51",
      "upload_time_iso_8601": "2020-06-27T05:19:51.371418Z",
      "url": "https://files.pythonhosted.org/packages/11/17/12fb026f0781f42723d25ef7fb4dd8061205c77e531ee31d350b32d20f43/dynamo_dlm-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d51bcedd2bef3293c8e5cced85ac151a4246061c7138c86cfcf38083646d550",
        "md5": "dd035ff1ebdac17a7ce2ced3b2cfcfbd",
        "sha256": "3e1be78b61e819a4951e0a9bbf5bd98fb056557e6c6c1c602f8844ca180c971a"
      },
      "downloads": -1,
      "filename": "dynamo-dlm-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dd035ff1ebdac17a7ce2ced3b2cfcfbd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4012,
      "upload_time": "2020-06-27T05:19:53",
      "upload_time_iso_8601": "2020-06-27T05:19:53.265329Z",
      "url": "https://files.pythonhosted.org/packages/4d/51/bcedd2bef3293c8e5cced85ac151a4246061c7138c86cfcf38083646d550/dynamo-dlm-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}