{
  "info": {
    "author": "mhamdan91 (Hamdan, Muhammad)",
    "author_email": "<mhamdan-91@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "Moecolor (Flexible terminal text coloring and styling)\n=======================================================\n## Table of Contents\n\n * [Overview](#overview)\n * [Library Installalion](#library-installalion)\n * [Library Usage](#library-usage)\n * [REMARKS](#remarks)\n\n\n## Overview\nThis lightweight tool allows you to color terminal text and style it based on predefined attributes. The tool works very much like the `print` function.\nExcept it is a fancier `print` that you can do a lot more with to control text color and style.\n\n## Library Installalion\nTo install the library simply run the following command in a cmd, shell or whatever...\n\n```bash\n# It's recommended to create a virtual environment\n\n# Windows\npip install moecolor\n\n# Linux\npip3 install moecolor\n```\n\n## Library usage?\n\n### Example usage\nThe following examples shows how to print text in `green` in so many different ways:\n```python\nfrom moecolor import print\nprint('My example text as green', color='green')\nprint('My example text as green', color='grreenn') # This is obviously not green, but we got you.\nprint('My example text as green', color='#00FF00')\nprint('My example text as green', color=(0, 255, 0))\nprint('My example text as green', color=(10,))\nprint('My example text as green', color=10)\n```\n\nThe following example shows how to underline, cross-out, bold, italize, a red text:\n```python\nfrom moecolor import print\nprint('My example text as green', color='red', attr=['bold', 'italic', 'strike', 'underline'])\n```\n\nDo you want more fine-grained control over your text? Sure, the following example prints per word coloring. It will print RED GREEN BLUE TEXT, using various colour configurations.\n```python\nfrom moecolor import print # This is an optional import, you can still use the original print function.\nfrom moecolor import FormatText as ft\nprint(\"{} {} {}\".format(ft('RED TEXT', color='#ff0000'), ft('GREEN TEXT', color='green'), ft('BLUE TEXT', color=12)))\n```\n\n### Usage Guidelines\nThe tool simply overloads the `print` function, so you can use it as a normal print and if you'd like to color and style text you can provide extra arguments.\nThe tool accepts the following arguments in addition to the kwargs accepted by the builtin `print` function.\n- color\n- attr\n- usage\n\nThere are many options to choose from to color your text. You can:\n- Choose a color string from a list of pre-defined colors ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'BRIGHT_GRAY', 'DEFAULT', 'DARK_GRAY',\n  'BRIGHT_RED', 'BRIGHT_GREEN', 'BRIGHT_YELLOW', 'BRIGHT_BLUE', 'BRIGHT_MAGENTA', 'BRIGHT_CYAN','WHITE', 'PURPLE', 'VOILET', 'LIME', 'ORANGE', 'RANDOM']\n- If you wish to generate a random color, you can supply the word: 'RANDOM'.\n- If you wish to pick a color from 256-color mode scale based on `https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit`, you can provide an integer between [0-255]\n- If you wish to provide an RGB value for a specific 24-bit color, you provide a tuple/list of RGB values: (R, G, B) and numbers must be integers between [0-255]\n- If you wish to provide a hex-code for an 24-bit RGB equivelent color, you can provide a string like `#FFFFFF`.\n\nTo style your text, you can use a set of pre-defined attributes:\n- **'BOLD'**: **bold text** (synonymous options: 'b', 'bold', 'thick')\n- **'DIM'**: dim text a little (synonymous options: 'dim', 'dark', 'd')\n- **'ITALIC'**: *italize text* (synonymous options: 'i', 'italic')\n- **'UNDERLINE'**: underline text, (synonymous options: 'u', 'underline')\n- **'BLINK'**: make text blink at less than 150 times per minute (synonymous options: 'blink', 'blinking', 'flash')\n- **'INVERT'**: invert text (synonymous options: 'reverse', 'invert', 'switch')\n- **'HIDE'**: hide text from terminal (synonymous options: 'conceal', 'hide', 'invisible')\n- **'STRIKE'**: ~~make text crossed-out~~, (synonymous options: 'crossed-out', 'cross-out', 'crossed-out', 'strike', 's')\n- **'DOUBLE-UNDERLINE'**: underline text with double lines, (synonymous options: 'double-underline', '2u', 'uu', 'du')\n- **'FOREGROUND'**: control foreground color [default behavior], (synonymous options: 'foreground', 'fg', 'fore-ground')\n- **'BACKGROUND'**: control background color [to apply color the background instead of the foreground], (synonymous options: 'background' ,'bg', 'back-ground')\n- **'OVERLINED'**: overline text (synonymous options: 'overlined', 'o', 'over-lined')\n- **'UNDERLINE-COLOR'**: apply color to underlined text, used along with underlining, otherwise no effect (synonymous options: underline-color', 'ucolor', 'u-color', 'uc')\n- **'CLEAR'**: clear screen, then print text. (synonymous options: 'reset', 'reset-position', 'clear', 'clear-screen')\n\nTo show tool usage, or this README, i.e., you supply the keyword `usage` or one of its synonymous ('h', 'usage', 'show_help', 'help_me', 'use') as follows:\n```python\nprint(usage=True)\n```\nYou can also display tool usage/docs using the following command:\n```python\nhelp(print)\n```\n\n### REMARKS\n\n```python\n# Note, all strings are case insensitive, so don't worry. Not just that, even if you misspell a color,\n# we will guess it for you ;), just do NOT type `regrlue` and expect it to be blue for example,\n# it might come up as green though.\n\n\"\"\"\nSome attributes may not be supported in all terminals. So, if a specific attribute does not work, that means the\nterminal you are using does not support it.\n\nWindows terminals (CMD, PS) support most of attributes, but the following ['blink', 'dim']\nLINUX terminals support all AFAIK\n\"\"\"\n```\n\n----------------------------------------\nAuthor: Hamdan, Muhammad (@mhamdan91 - آ©)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mhamdan91/moecolor",
    "keywords": "python,color,terminal,text,styling,ansi,coloring text,text styling,text formatting,formatting",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moecolor",
    "package_url": "https://pypi.org/project/moecolor/",
    "platform": null,
    "project_url": "https://pypi.org/project/moecolor/",
    "project_urls": {
      "Homepage": "https://github.com/mhamdan91/moecolor"
    },
    "release_url": "https://pypi.org/project/moecolor/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Libary to print colored and styled text in terminal. Offers color-specific configuration by providing 24bit hex or RGB values as well 256-color mode.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16264231,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57dd2f5314fd9c3220d190ca33fb856c2ee4e42971cce8a657f2948551e7d98a",
        "md5": "7091d9b97c5da03a0c2bd900d9e5fd8b",
        "sha256": "99a5e0fe05d8f168650cbfa87d025ff0c51650b46be950ed60385691d1b3ef48"
      },
      "downloads": -1,
      "filename": "moecolor-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7091d9b97c5da03a0c2bd900d9e5fd8b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10980,
      "upload_time": "2022-12-31T02:58:15",
      "upload_time_iso_8601": "2022-12-31T02:58:15.108363Z",
      "url": "https://files.pythonhosted.org/packages/57/dd/2f5314fd9c3220d190ca33fb856c2ee4e42971cce8a657f2948551e7d98a/moecolor-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13e81eae672862e7591e1dea4a2ca47ef8991f6631f82c482d19ac5a267672f5",
        "md5": "216e8fc45135540f5ca14e84d6943590",
        "sha256": "a2c082e8f13d9d2f7530bbe22c6519c545ad237e11501aeca4a5307061f5ccfa"
      },
      "downloads": -1,
      "filename": "moecolor-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "216e8fc45135540f5ca14e84d6943590",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8574,
      "upload_time": "2022-12-31T02:58:16",
      "upload_time_iso_8601": "2022-12-31T02:58:16.978516Z",
      "url": "https://files.pythonhosted.org/packages/13/e8/1eae672862e7591e1dea4a2ca47ef8991f6631f82c482d19ac5a267672f5/moecolor-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}