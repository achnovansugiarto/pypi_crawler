{
  "info": {
    "author": "GlacioHack / Andrew Tedstone (@atedstone)",
    "author_email": "andrew.tedstone@unifr.ch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# marutils - Utilities for working with MAR RCM outputs\n\nThis package contains utilities/tools that make it easier to open MAR RCM outputs.\n\n* Load outputs straight into an xarray Dataset with standard dimensions names `(time, y, x)`.\n* Provide a path with a wildcard expression (`*`) to automatically load several years of MAR files at once, concatenating them along the time axis.\n* Plays nicely with Dask - chunking options default to 365-366 days (but can be changed at will).\n* Loaded Datasets are automatically \"geo-aware\" using the rioxarray `.rio` accessor - no more trying to work out MAR's geo-referencing manually!\n* Helper functions for turning X-hourly variables into continuous time series.\n* Helper functions for masking.\n\n\n## QuickStart\n\n```python\nimport marutils\n# Open a time series for the 21st century.\nmar_outputs = marutils.open_dataset('MARv3.11.2/MAR*20*.nc')\n\n# Check out the coordinates.\nprint(mar_outputs.coords)\nCoordinates:\n  * x            (x) float32 -760000.0 -740000.0 -720000.0 ... 660000.0 680000.0\n  * y            (y) float32 -1180000.0 -1160000.0 ... 1480000.0 1500000.0\n  * SECTOR       (SECTOR) float32 1.0 2.0\n  * SECTOR1_1    (SECTOR1_1) float32 1.0\n  * time         (time) datetime64[ns] 2019-01-01T12:00:00 ... 2019-12-31T12:...\n  * ATMLAY3_3    (ATMLAY3_3) float32 0.99974793\n    spatial_ref  int64 0\n\n# What is proj.4 string for the geo-referencing of this dataset?\nprint(mar_outputs.rio.crs.to_proj4())\n+proj=stere +lat_0=70.5 +lon_0=-40 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs=True\n```\n\n## Installation\n\nAt the moment, manually:\n\n\tgit clone <repository>\n\tcd <repository>\n\tpip install -e .\n\nSoon to be available via pyPI.\n\n\n## Working with X-hourly outputs\n\nTo return an X-hourly variable with a single, continuous hourly time variable:\n\n```python\nhourly_air_temperatures = marutils.xhourly.Xhourly_to_time(mar_outputs.TTH)\n```\n\n## Useful notes\n\n### Pixel corners vs centres\n\nIt's useful to remember that netCDF file geo-referencing treats X,Y coordinates as pixel (cell) centres. In contrast, the rasterio/GDAL data model treats X,Y coordinates as pixel upper-left corners.\n\nIn the QuickStart section above we loaded a 20 km resolution dataset. The minimum and maximum X coordinates are -760000 and 680000 m respectively. These correspond to the centres of the min/max pixels.\n\nThrough the `.rio` accessor we can check on the bounds/complete spatial extent of the file:\n\n```python\n# What is the centre of the top-left cell? (xmin, ymin, xmax, ymax)\nmar_outputs.rio.bounds()\n(-770000.0, 1510000.0, 690000.0, -1190000.0)\n```\n\nWe can see that these bounds account for the 20 km pixel size of this dataset.\n\n\n## Caveats\n\nThe geo-referencing capabilities have so far been tested only for Greenland datasets. If you have problems trying to load other domains, please post an issue on this repository.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GlacioHack/marutils",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marutils",
    "package_url": "https://pypi.org/project/marutils/",
    "platform": "",
    "project_url": "https://pypi.org/project/marutils/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GlacioHack/marutils/issues",
      "Homepage": "https://github.com/GlacioHack/marutils"
    },
    "release_url": "https://pypi.org/project/marutils/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Utilities and tools for working with MAR regional climate model outputs through xarray",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9521764,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0878fb7671fc9076aa0910dc23916134aa94009797238d50e866b9f25996885a",
        "md5": "29797bdb36ae729a1b99729a9b5a211f",
        "sha256": "618d9290e53031b5742476a15527e9aae0d5fb51a5d2f1472b1b77b048724f44"
      },
      "downloads": -1,
      "filename": "marutils-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "29797bdb36ae729a1b99729a9b5a211f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8988,
      "upload_time": "2021-02-25T12:15:15",
      "upload_time_iso_8601": "2021-02-25T12:15:15.185775Z",
      "url": "https://files.pythonhosted.org/packages/08/78/fb7671fc9076aa0910dc23916134aa94009797238d50e866b9f25996885a/marutils-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0621322bfc434ceeb49deaae154fba4141c82a279d2850169277f1b522b70e58",
        "md5": "9f1821f438f9d3738d8a615b9fb02d1e",
        "sha256": "614b531112c7974aaec543bfbcbd05a06a35b83c7e380b769829fc19edda38b8"
      },
      "downloads": -1,
      "filename": "marutils-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9f1821f438f9d3738d8a615b9fb02d1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7691,
      "upload_time": "2021-02-25T12:15:16",
      "upload_time_iso_8601": "2021-02-25T12:15:16.314483Z",
      "url": "https://files.pythonhosted.org/packages/06/21/322bfc434ceeb49deaae154fba4141c82a279d2850169277f1b522b70e58/marutils-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}