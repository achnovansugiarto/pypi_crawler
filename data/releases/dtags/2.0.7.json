{
  "info": {
    "author": "Joohwan Oh",
    "author_email": "joohwan.oh@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "Features\n========\n\n**dtags** is a lightweight command line tool which lets you:\n\n-  Tag and un-tag directories\n-  Change directories quickly via tags\n-  Execute commands in tagged directories at the same time\n-  Easily manage multiple git repositories, vagrant machines etc.\n\nAll commands come with tab-completion.\n\n.. image:: example.gif\n\nInstallation\n============\n\n**Step 1**: Check requirements:\n\n-  Python 2.7+ or 3.4+\n-  Recent version of `pip <https://pip.pypa.io>`__\n-  Recent version of Bash, Zsh or Fish with tab-completion enabled\n\n**Step 2**: Install the package:\n\n.. code:: bash\n\n    # You may need to sudo depending on your setup\n    ~$ pip install --upgrade dtags\n\n**Step 3**: Add the following line to your shell runtime configuration:\n\n.. code:: bash\n\n    # For zsh, place in ~/.zshrc:\n    command -v dtags > /dev/null 2>&1 && eval \"`dtags shell zsh`\"\n\n    # For bash, place in ~/.bashrc (or ~/.bash_profile for OS X):\n    command -v dtags > /dev/null 2>&1 && eval \"`dtags shell bash`\"\n\n    # For fish, place in ~/.config/fish/config.fish:\n    command -v dtags > /dev/null 2>&1; and dtags shell fish | source\n\n**Step 4**. Restart your shell.\n\n::\n\n    Note for those who are upgrading from v1.x.x:\n    \n      dtags v2 has config changes that are not backwards-compatible.\n      If you want to keep your tags, you need to run a migration script:\n      \n       ~$ git clone https://github.com/joowani/dtags.git\n       ~$ python dtags/scripts/migrate.py\n       \n      If you don't mind losing them, simply run 'rm -rf ~/.dtags' instead.\n\nOnce installed, you will have **5** commands at your disposal: ``tag``,\n``untag``, ``d``, ``e`` and ``dtags``. Make sure you don't have any\nlinux aliases, functions or symlinks etc. with the same names.\n\nUsage Examples\n==============\n\nTag directories with ``tag``:\n\n.. code:: bash\n\n    ~$ tag ~/web dev work   # add tags 'dev' and 'work' to ~/web\n    ~$ tag ~/app            # tag ~/app with its basename, 'app'\n\nUn-tag directories with ``untag``:\n\n.. code:: bash\n\n    ~$ untag ~/web dev      # remove tag 'dev' from ~/web\n    ~$ untag ~/app          # remove all tags from ~/app \n\nChange directories with ``d`` (designed to fully replace ``cd``!):\n\n.. code:: bash\n\n    ~$ d                    # go to the user's home directory \n    ~$ d frontend           # go to the directory tagged 'frontend'\n    ~$ d tag_with_many_dirs # prompt the user to select a specific directory         \n    ~$ d ~/app              # go to directory ~/app\n\nExecute commands in one or more directories with ``e``:\n\n.. code:: bash\n\n    ~$ e repo git status    # execute 'git status' in directories tagged 'repo'\n    ~$ e ~/vm vagrant halt  # execute 'vagrant halt' in directory ~/vm\n    ~$ e -p vm git pull     # execute 'git pull' in directories tagged 'vm' in parallel\n    ~$ e vm,~/foo ls        # execute 'ls' in directories tagged 'vm' and ~/foo\n\nSearch and manage tags with ``dtags``:\n\n.. code:: bash\n\n    ~$ dtags                # display the directories-to-tags mapping\n    ~$ dtags list ~ ~/vm    # display the tags and directories associated with ~ and ~/app\n    ~$ dtags list foo bar   # display the tags and directories associated with 'foo' or 'bar'\n    ~$ dtags reverse        # display the tags-to-directories mapping\n    ~$ dtags edit           # edit tags and directories via editor like vim\n    ~$ dtags clean          # remove invalid or stale tags and directories\n\nYou can always use the ``--help`` option to find out more about each command!\n\nTechnical Notes\n===============\n\n-  Windows is currently not supported\n-  The directory-to-tags mapping is saved in ``~/.dtags/mapping``\n-  Tags are also saved on their own in ``~/.dtags/tags`` for\n   tab-completion\n-  ``e -p`` hangs on interactive commands that wait on input (no easy\n   way around this)\n-  ``e -p`` spawns child processes and redirects their output to\n   temporary files and then to stdout\n-  ``e -p`` sends *sigterm* to its child processes when killed\n-  ``e`` uses environment variable **$SHELL** to guess which shell is in\n   use\n-  ``e`` redirects all stderr to stdout and should always return an exit\n   status of 0\n-  ``e`` executes the commands using *interactive shell*, which has pros\n   and cons:\n\n   -  ``e`` can properly use linux functions and aliases\n   -  The shell runtime configuration must be \"sourced\" each time the\n      command is run\n   -  The performance of ``e`` is affected by the shell startup time\n      (beware oh-my-zsh users)\n   -  Any errors thrown during the \"sourcing\" will show up in the output\n      of ``e``\n\n-  ``dtags edit`` uses environment variable **$EDITOR**\n-  ``d`` prefers tags over subdirectories if there is a name conflict\n   -  To go to the subdirectory put a ``/`` after the directory name\n-  ``d`` requires ``grep``, ``cut``, ``seq`` and ``/dev/null``\n-  ``d`` expects ``~/.dtags/mapping`` to be correctly formatted:\n\n   -  Please refrain from editing ``~/.dtags/mapping`` directly\n   -  Instead, use ``dtags edit`` which does the validation and\n      formatting for you\n\n-  Tab-completion expects ``~/.dtags/tags`` to be correctly formatted:\n\n   -  Don't touch this file at all if possible\n   -  If this is deleted, it is auto-generated the next time a dtags\n      command is run.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joowani/dtags",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dtags",
    "package_url": "https://pypi.org/project/dtags/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dtags/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/joowani/dtags"
    },
    "release_url": "https://pypi.org/project/dtags/2.0.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Directory Tags for Lazy Programmers",
    "version": "2.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9998631,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd655dbcd5cbdbe753b53c56bef3be8b69167e6e78ead3ef0a34dea87aaeeff5",
        "md5": "2f9d100edb8806ca4fea842136df7c11",
        "sha256": "806639865366f9ed043dc77ac988f897e84e59cd74f4a390adf5fcaed8f5532b"
      },
      "downloads": -1,
      "filename": "dtags-2.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "2f9d100edb8806ca4fea842136df7c11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17086,
      "upload_time": "2016-04-02T00:37:01",
      "upload_time_iso_8601": "2016-04-02T00:37:01.964068Z",
      "url": "https://files.pythonhosted.org/packages/dd/65/5dbcd5cbdbe753b53c56bef3be8b69167e6e78ead3ef0a34dea87aaeeff5/dtags-2.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}