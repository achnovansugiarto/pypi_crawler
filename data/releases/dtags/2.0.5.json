{
  "info": {
    "author": "Joohwan Oh",
    "author_email": "joohwan.oh@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "## Introduction\n\nDo you have too many git repositories or vagrant machines to manage? Does your \nwork require you to switch between the same directories over and over? Are you \na lazy programmer who is always looking ways to type less? If you answered *yes* \nto any of these questions, then **dtags** may be for you!\n\n## Features\n\n**dtags** is a lightweight command line tool which lets you:\n\n* Tag and un-tag directories\n* Change directories quickly via tags\n* Execute commands in multiple directories at once\n\nAll commands come with tab-completion.\n\n## Installation\n\n**Step 1**: Check requirements\n\n* Python 2.7+ or 3.4+ \n* Recent version of [pip](https://pip.pypa.io) \n* Recent version of Bash, Zsh or Fish with tab-completion enabled\n\n**Step 2**: Install the package:\n```bash\n# You may need to sudo depending on your setup\n~$ pip install --upgrade dtags\n```\n\n**Step 3**: Add the following line to your shell runtime configuration:\n\n```bash\n# For zsh, place in ~/.zshrc:\ncommand -v dtags > /dev/null 2>&1 && eval \"`dtags shell zsh`\"\n\n# For bash, place in ~/.bashrc (or ~/.bash_profile for OS X):\ncommand -v dtags > /dev/null 2>&1 && eval \"`dtags shell bash`\"\n\n# For fish, place in ~/.config/fish/config.fish:\ncommand -v dtags > /dev/null 2>&1; and dtags shell fish | source\n```\n\n**Step 4**. Restart your shell.\n\n    Note for those who are upgrading from v1.x.x:\n      dtags v2 has config changes that are not backwards-compatible.\n      If you want to keep your tags, you need to run a migration script:\n      \n       ~$ git clone https://github.com/joowani/dtags.git\n       ~$ python dtags/scripts/migrate.py\n       \n      If you don't mind losing them, simply run 'rm -rf ~/.dtags' instead.\n\n\nOnce installed, you will have **5** commands at your disposal: `tag`, `untag`, \n`d`, `e` and `dtags`. Make sure you don't have any linux aliases, functions or \nsymlinks etc. with the same names.\n\n## Usage Examples\n\nTag directories with `tag`:\n```bash\n~$ tag ~/web dev work   # add tags 'dev' and 'work' to ~/web\n~$ tag ~/app            # tag ~/app with its basename, 'app'\n```\n\nUn-tag directories with `untag`:\n```bash\n~$ untag ~/web dev      # remove tag 'dev' from ~/web\n~$ untag ~/app          # remove all tags from ~/app \n```\n\nChange directories with `d` (designed to fully replace `cd`!):\n```bash\n~$ d                    # go to the user's home directory \n~$ d frontend           # go to the directory tagged 'frontend'\n~$ d tag_with_many_dirs # prompt the user to select a specific directory         \n~$ d ~/app              # go to directory ~/app\n```\n\nExecute commands in one or more directories with `e`:\n```bash\n~$ e repo git status    # execute 'git status' in directories tagged 'repo'\n~$ e ~/vm vagrant halt  # execute 'vagrant halt' in directory ~/vm\n~$ e -p vm git pull     # execute 'git pull' in directories tagged 'vm' in parallel\n~$ e vm,~/foo ls        # execute 'ls' in directories tagged 'vm' and ~/foo\n```\n\nSearch and manage tags with `dtags`:\n```bash\n~$ dtags list \t\t    # display the directories-to-tags mapping\n~$ dtags list ~/app     # display the tags and directories associated with ~/app\n~$ dtags list foo bar   # display the tags and directories associated with 'foo' or 'bar'\n~$ dtags reverse        # display the tags-to-directories mapping\n~$ dtags edit           # edit tags and directories via editor like vim\n~$ dtags clean          # remove invalid or stale tags and directories\n```\n\nYou can always use the `--help` option to find out more!\n\n## Technical Notes\n\n* Windows is currently not supported\n* The directory-to-tags mapping is saved in `~/.dtags/mapping`\n* Tags are also saved on their own in `~/.dtags/tags` for tab-completion\n* `e -p` hangs on interactive commands that wait on input (no easy way around this)\n* `e -p` spawns child processes and redirects their output to temporary files and then to stdout\n* `e -p` sends *sigterm* to its child processes when killed\n* `e` uses environment variable **$SHELL** to guess which shell is in use\n* `e` redirects all stderr to stdout and should always return an exit status of 0\n* `e` executes the commands using *interactive shell*, which has pros and cons:\n    * `e` can properly use linux functions and aliases\n    * The shell runtime configuration must be \"sourced\" each time the command is run\n    * The performance of `e` is affected by the shell startup time (beware oh-my-zsh users)\n    * Any errors thrown during the \"sourcing\" will show up in the output of `e`\n* `dtags edit` uses environment variable **$EDITOR**\n* `d` requires `grep`, `cut`, `seq` and `/dev/null`\n* `d` expects `~/.dtags/mapping` to be correctly formatted:\n    *  Please refrain from editing `~/.dtags/mapping` directly\n    *  Instead, use `dtags edit` which does the validation and formatting for you\n* Tab-completion expects `~/.dtags/tags` to be correctly formatted:\n    * Don't touch this file at all if possible\n    * If this is deleted, it is auto-generated the next time a dtags command is run.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joowani/dtags",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dtags",
    "package_url": "https://pypi.org/project/dtags/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dtags/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/joowani/dtags"
    },
    "release_url": "https://pypi.org/project/dtags/2.0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Directory Tags for Lazy Programmers",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9998631,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "001e257440353975a7363f1b4e5343516d6bc37a5f8ee0baf7c2158ecc3f907d",
        "md5": "49d112fb48fdf04d7a1667afdfc861db",
        "sha256": "f7a2555df3c1d2f5ee6a0a162e31ccc139baaa66249becf6cc43dafc2db8dbb1"
      },
      "downloads": -1,
      "filename": "dtags-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "49d112fb48fdf04d7a1667afdfc861db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17014,
      "upload_time": "2016-03-18T00:43:09",
      "upload_time_iso_8601": "2016-03-18T00:43:09.059737Z",
      "url": "https://files.pythonhosted.org/packages/00/1e/257440353975a7363f1b4e5343516d6bc37a5f8ee0baf7c2158ecc3f907d/dtags-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}