{
  "info": {
    "author": "Joohwan Oh",
    "author_email": "joohwan.oh@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Utilities"
    ],
    "description": "Features\n========\n\n**dtags** is a lightweight command line tool which lets you:\n\n-  Tag and un-tag directories\n-  Automatically create shell variables for easy access\n-  Change directories via tag names\n-  Execute commands in multiple directories at the same time\n-  Easily manage git repositories, vagrant machines etc.\n\nAll commands come with tab-completion.\n\n\nInstallation\n============\n\n**Step 1**: Check requirements:\n\n-  Python 2.7+ or 3.4+\n-  Recent version of `pip <https://pip.pypa.io>`__\n-  Recent version of Bash, Zsh or Fish with tab-completion enabled\n\n**Step 2**: Install the package:\n\n.. code:: bash\n\n    # You may need to sudo depending on your setup\n    ~$ pip install --upgrade dtags\n\n**Step 3**: Add the following line to your shell runtime configuration:\n\n.. code:: bash\n\n    # For zsh, place in ~/.zshrc:\n    command -v dtags-activate > /dev/null 2>&1 && eval \"`dtags-activate zsh`\"\n\n    # For bash, place in ~/.bashrc (or ~/.bash_profile for OS X):\n    command -v dtags-activate > /dev/null 2>&1 && eval \"`dtags-activate bash`\"\n\n    # For fish, place in ~/.config/fish/config.fish:\n    command -v dtags-activate > /dev/null 2>&1; and dtags-activate fish | source\n\n**Step 4**. Restart your shell.\n\nOnce installed, you will have **5** commands at your disposal: ``t``, ``u``,\n``d``, ``e`` and ``dtags``. Make sure you don't have name conflicts with any\nexisting linux aliases, functions or symlinks etc.\n\n\nUsage Examples\n==============\n\nTag directories with ``t``:\n\n.. code:: bash\n\n    ~$ t ~/web dev work     # add tags 'dev' and 'work' to ~/web\n    ~$ t ~/app              # tag ~/app with its basename, 'app'\n\nUn-tag directories with ``u``:\n\n.. code:: bash\n\n    ~$ u ~/web dev          # remove tag 'dev' from ~/web\n    ~$ u ~/app              # remove all tags from ~/app\n\nChange directories with ``d`` (designed to fully replace ``cd``!):\n\n.. code:: bash\n\n    ~$ d                    # go to the user's home directory \n    ~$ d frontend           # go to the directory tagged 'frontend'\n    ~$ d tag_with_many_dirs # prompt the user to select a specific directory         \n    ~$ d ~/app              # go to directory ~/app\n\nExecute commands in one or more directories with ``e``:\n\n.. code:: bash\n\n    ~$ e repo git status    # execute 'git status' in directories tagged 'repo'\n    ~$ e ~/vm vagrant halt  # execute 'vagrant halt' in directory ~/vm\n    ~$ e -p vm git pull     # execute 'git pull' in directories tagged 'vm' in parallel\n    ~$ e vm,~/foo ls        # execute 'ls' in directories tagged 'vm' and ~/foo\n\nDisplay, search and manage directory tags with ``dtags``:\n\n.. code:: bash\n\n    ~$ dtags                # display the directories-to-tags mapping\n    ~$ dtags list ~ ~/vm    # display the tags and directories associated with ~ and ~/app\n    ~$ dtags list foo bar   # display the tags and directories associated with 'foo' or 'bar'\n    ~$ dtags reverse        # display the tags-to-directories mapping\n    ~$ dtags edit           # edit tags and directories via editor like vim\n    ~$ dtags clean          # remove invalid or stale tags and directories\n    ~$ dtags commands       # display all available dtags commands\n\nYou can always use the ``--help`` option to find out more!\n\nIf a tag points to a single directory, shell variables are automatically created:\n\n.. code:: bash\n\n    ~$ t ~/some/dir test    # shell variable $test is automatically created\n    ~$ ls $test/foo/bar     # $test can be used to denote the tagged directory\n    ~$ rm $test/file.sh     # $test can be used to denote the tagged directory\n\n\nTechnical Notes\n===============\n\n-  The directory-to-tags mapping is stored in ``~/.dtags/mapping``\n-  Tags are also stored on their own in ``~/.dtags/tags`` for tab-completion\n-  ``e -p`` is currently not supported on Windows\n-  ``e -p`` hangs on interactive commands that wait on input\n-  ``e -p`` spawns child processes and redirects their output to\n   temporary files and then to stdout\n-  ``e -p`` sends *sigterm* to its child processes when killed\n-  ``e`` uses environment variable **$SHELL** to guess which shell is in use\n-  ``e`` redirects stderr to stdout and always return an exit status of 0\n-  ``e`` uses *interactive shell*, which has pros and cons:\n\n   -  The user has access to all linux functions and aliases\n   -  The shell runtime configuration must be \"sourced\" each execution\n   -  The performance of ``e`` is affected by the shell startup time\n      (beware oh-my-zsh users)\n   -  Any errors thrown during the \"sourcing\" will show up in the output\n\n-  ``dtags edit`` uses environment variable **$EDITOR**\n-  ``d`` prefers tags over subdirectories when there are name conflicts\n   -  To go to the subdirectory, put a ``/`` after the directory name\n-  ``d`` expects ``~/.dtags/mapping`` to be correctly formatted:\n\n   -  Please refrain from editing ``~/.dtags/mapping`` directly\n   -  Instead, use ``dtags edit`` which does the validation and\n      formatting for you\n\n-  Tab-completion expects ``~/.dtags/tags`` to be correctly formatted:\n\n   -  Don't touch this file at all if possible\n   -  If this is deleted, it is auto-generated the next time a dtags\n      command is run.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joowani/dtags",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dtags",
    "package_url": "https://pypi.org/project/dtags/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dtags/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/joowani/dtags"
    },
    "release_url": "https://pypi.org/project/dtags/3.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Directory Tags for Lazy Programmers",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9998631,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed9ae85ee3a81a6cec56384e124388b02510a5b583bcd8430f220737317c8d34",
        "md5": "b12d5b1fffaf83210767214900eeeada",
        "sha256": "ae5ab291f6f50c972d4a48154764f98d1355eadbf69dd26911ebfffe8d512166"
      },
      "downloads": -1,
      "filename": "dtags-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b12d5b1fffaf83210767214900eeeada",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17172,
      "upload_time": "2016-04-18T05:50:38",
      "upload_time_iso_8601": "2016-04-18T05:50:38.456638Z",
      "url": "https://files.pythonhosted.org/packages/ed/9a/e85ee3a81a6cec56384e124388b02510a5b583bcd8430f220737317c8d34/dtags-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}