{
  "info": {
    "author": "Fang Li",
    "author_email": "surivlee+djsaml2auth@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================================\nDjango SAML2 Authentication Made Easy\n=====================================\n\n:Author: Cl√°udio Givisiez\n:Version: 1.0.3\n\n.. image:: https://img.shields.io/pypi/pyversions/django-saml2-auth.svg\n    :target: https://pypi.python.org/pypi/django-saml2-auth\n\n.. image:: https://img.shields.io/pypi/v/django-saml2-auth.svg\n    :target: https://pypi.python.org/pypi/django-saml2-auth\n\n.. image:: https://img.shields.io/pypi/dm/django-saml2-auth.svg\n        :target: https://pypi.python.org/pypi/django-saml2-auth\n\nThis project aims to provide a different way to use the project made by Fang Li.\n\nLink to original project: https://github.com/fangli/django-saml2-auth\n\nAuthentication into your Django powered app. Try it now, and get rid of the\ncomplicated configuration of SAML.\n\nAny SAML2 based SSO(Single-Sign-On) identity provider with dynamic metadata\nconfiguration is supported by this Django plugin, for example Okta.\n\n\nDependencies\n============\n\nThis plugin is compatible with Django 1.6/1.7/1.8/1.9. The `pysaml2` Python\nmodule is required.\n\nInstall\n=======\n\nYou can install this plugin via `pip`:\n\n.. code-block:: bash\n\n    # pip install django_saml2_auth_custom\n\nor from source:\n\n.. code-block:: bash\n\n    # git clone \n    # cd django-saml2-auth\n    # python setup.py install\n\nxmlsec is also required by pysaml2:\n\n.. code-block:: bash\n\n    # yum install xmlsec1\n    // or\n    # apt-get install xmlsec1\n\n\nWhat does this plugin do?\n=========================\n\nThis plugin takes over Django's login page and redirect the user to a SAML2\nSSO authentication service. Once the user is logged in and redirected back,\nthe plugin will check if the user is already in the system. If not, the user\nwill be created using Django's default UserModel, otherwise the user will be\nredirected to their last visited page.\n\n\n\nHow to use?\n===========\n\n#. Override the default login page in the root urls.py file, by adding these\n   lines **BEFORE** any `urlpatterns`:\n\n    .. code-block:: python\n\n        # These are the SAML2 related URLs. You can change \"^saml2_auth/\" regex to\n        # any path you want, like \"^sso_auth/\", \"^sso_login/\", etc. (required)\n        url(r'^saml2_auth/', include('django_saml2_auth_custom.urls')),\n\n        # The following line will replace the default user login with SAML2 (optional)\n        url(r'^accounts/login/$', 'django_saml2_auth_custom.views.signin'),\n\n        # The following line will replace the admin login with SAML2 (optional)\n        url(r'^admin/login/$', 'django_saml2_auth_custom.views.signin'),\n\n#. Add 'django_saml2_auth_custom' to INSTALLED_APPS\n\n    .. code-block:: python\n\n        INSTALLED_APPS = [\n            '...',\n            'django_saml2_auth_custom',\n        ]\n\n#. In settings.py, add the SAML2 related configuration.\n\n    Please note, the only required setting is **METADATA_AUTO_CONF_URL**.\n    The following block shows all required and optional configuration settings\n    and their default values.\n\n    .. code-block:: python\n\n        SAML2_AUTH = {\n            # Required setting\n            'METADATA_AUTO_CONF_URL': '[The auto(dynamic) metadata configuration URL of SAML2]',\n\n            # Optional settings\n            'NEW_USER_PROFILE': {\n                'USER_GROUPS': [],  # The default group name when a new user logs in\n                'ACTIVE_STATUS': True,  # The default active status for new users\n                'STAFF_STATUS': True,  # The staff status for new users\n                'SUPERUSER_STATUS': False,  # The superuser status for new users\n            },\n            'ATTRIBUTES_MAP': {  # Change Email/UserName/FirstName/LastName to corresponding SAML2 userprofile attributes.\n                'email': 'Email',\n                'username': 'UserName',\n                'first_name': 'FirstName',\n                'last_name': 'LastName',\n            },\n            'TRIGGER': {\n                'CREATE_USER': 'path.to.your.new.user.hook.method',\n                'BEFORE_LOGIN': 'path.to.your.login.hook.method',\n            },\n        }\n\n#. In your SAML2 SSO identity provider, set the Single-sign-on URL and Audience\n   URI(SP Entity ID) to http://your-domain/saml2_auth/acs/\n\n\nExplanation\n-----------\n\n**METADATA_AUTO_CONF_URL** Auto SAML2 metadata configuration URL\n\n**NEW_USER_PROFILE** Default settings for newly created users\n\n**ATTRIBUTES_MAP** Mapping of Django user attributes to SAML2 user attributes\n\n**TRIGGER** Hooks to trigger additional actions during user login and creation\nflows. These TRIGGER hooks are strings containing a `dotted module name <https://docs.python.org/3/tutorial/modules.html#packages>`_\nwhich point to a method to be called. The referenced method should accept a\nsingle argument which is a dictionary of attributes and values sent by the\nidentity provider, representing the user's identity.\n\n**TRIGGER.CREATE_USER** A method to be called upon new user creation. This\nmethod will be called before the new user is logged in and after the user's\nrecord is created. This method should accept ONE parameter of user dict.\n\n**TRIGGER.BEFORE_LOGIN** A method to be called when an existing user logs in.\nThis method will be called before the user is logged in and after user\nattributes are returned by the SAML2 identity provider. This method should accept ONE parameter of user dict.\n\n\nCustomize\n=========\n\nThe default permission `denied` page and user `welcome` page can be\noverridden.\n\nTo override these pages put a template named 'django_saml2_auth_custom/welcome.html'\nor 'django_saml2_auth_custom/denied.html' in your project's template folder.\n\nIf a 'django_saml2_auth_custom/welcome.html' template exists, that page will be shown\nto the user upon login instead of the user being redirected to the previous\nvisited page. This welcome page can contain some first-visit notes and welcome\nwords. The `Django user object <https://docs.djangoproject.com/en/1.9/ref/contrib/auth/#django.contrib.auth.models.User>`_\nis available within the template as the `user` template variable.\n\nTo enable a logout page, add the following lines to urls.py, before any\n`urlpatterns`:\n\n.. code-block:: python\n\n    # The following line will replace the default user logout with the signout page (optional)\n    url(r'^accounts/logout/$', 'django_saml2_auth_custom.views.signout'),\n\n    # The following line will replace the default admin user logout with the signout page (optional)\n    url(r'^admin/logout/$', 'django_saml2_auth_custom.views.signout'),\n\nTo override the built in signout page put a template named\n'django_saml2_auth_custom/signout.html' in your project's template folder.\n\nIf your SAML2 identity provider uses user attribute names other than the\ndefaults listed in the `settings.py` `ATTRIBUTES_MAP`, update them in\n`settings.py`.\n\n\nFor Okta Users\n==============\n\nI created this plugin originally for Okta.\n\nThe METADATA_AUTO_CONF_URL needed in `settings.py` can be found in the Okta\nweb UI by navigating to the SAML2 app's `Sign On` tab, in the Settings box.\nYou should see :\n\n`Identity Provider metadata is available if this application supports dynamic configuration.`\n\nThe `Identity Provider metadata` link is the METADATA_AUTO_CONF_URL.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fangli/django-saml2-auth",
    "keywords": "CUSTOM Django SAML2 Authentication",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-saml2-auth-custom",
    "package_url": "https://pypi.org/project/django-saml2-auth-custom/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-saml2-auth-custom/",
    "project_urls": {
      "Homepage": "https://github.com/fangli/django-saml2-auth"
    },
    "release_url": "https://pypi.org/project/django-saml2-auth-custom/1.0.4/",
    "requires_dist": [
      "pysaml2 (==4.0.5)"
    ],
    "requires_python": "",
    "summary": "CUSTOM Django SAML2 Authentication",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11314359,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7a28a0824ce8f8fe5bd0ab5f3215c4debcf9e1abd6bc4acdb8099d3f2565344",
        "md5": "67778ed65e48c90decae91a2f680ca5b",
        "sha256": "15d458dee53b08e71d3be7d97e7cc880863ba7b56b673543d14aa2a133cfe5f5"
      },
      "downloads": -1,
      "filename": "django_saml2_auth_custom-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67778ed65e48c90decae91a2f680ca5b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 12256,
      "upload_time": "2021-08-30T14:42:53",
      "upload_time_iso_8601": "2021-08-30T14:42:53.019945Z",
      "url": "https://files.pythonhosted.org/packages/e7/a2/8a0824ce8f8fe5bd0ab5f3215c4debcf9e1abd6bc4acdb8099d3f2565344/django_saml2_auth_custom-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d65885648cf395ddfdc3353990836d665127920ffd1ac7b23f3e6ba13b19a335",
        "md5": "733bf49ac7259cb81977a57fb3b0aaab",
        "sha256": "158d8d0695d04d954b0cb3f2fbe59b1a962d1bb59dd9cf3ae2360571098547af"
      },
      "downloads": -1,
      "filename": "django_saml2_auth_custom-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "733bf49ac7259cb81977a57fb3b0aaab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10306,
      "upload_time": "2021-08-30T14:42:55",
      "upload_time_iso_8601": "2021-08-30T14:42:55.006807Z",
      "url": "https://files.pythonhosted.org/packages/d6/58/85648cf395ddfdc3353990836d665127920ffd1ac7b23f3e6ba13b19a335/django_saml2_auth_custom-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}