{
  "info": {
    "author": "DataMade, LLC",
    "author_email": "info@datamade.us",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-councilmatic\n===================\n\nThe django-councilmatic app provides the core functionality for the `Councilmatic family <http://www.councilmatic.org/>`_, a set of web apps for keeping tabs on local city council. It is built upon the Open Civic Data standard and ultimately makes Councilmatic easier to re-deploy in new cities.\n\n\nFeatures\n--------\n\n- Models for bills, people, organizations, events, and more\n- Base views for Bill, Person, Organization, and Event listing and detail pages\n- Search infrastructure powered by :code:`django-haystack` and Solr\n\nThe `Councilmatic family <http://www.councilmatic.org/>`_ includes:\n\n- Philly Councilmatic (the original and first Councilmatic, by Mjumbe Poe, an important predecessor to DataMade's django-councilmatic)\n- `Chicago Councilmatic <https://github.com/datamade/chi-councilmatic>`_\n- `New York City Councilmatic <https://github.com/datamade/nyc-councilmatic>`_\n- `Los Angeles Metro Board <https://github.com/datamade/la-metro-councilmatic>`_\n\n\nCouncilmatic in your city\n-------------------------\nIf you're interested in bringing Councilmatic to your city, `contact us <mailto:info@councilmatic.org>`_! We'd love to help.\n\nWant to build your own Councilmatic? Check out our `Starter Template <https://github.com/datamade/councilmatic-starter-template>`_. It contains everything you need to create your own Councilmatic from scratch.\n\n\nExtending Open Civic Data/Councilmatic models\n---------------------------------------------\n\ndjango-councilmatic leverages, and in some instaances, lightly extends the Open Civic Data Standard, implemented in Django as :code:`python-opencivicdata`. If you'd like to add additional attributes or Python properties to your models, there are two approaches to be aware of: subclassing and proxying.\n\nSubclassing\n===========\n\nLeverage `multi-table inheritance <https://docs.djangoproject.com/en/2.2/topics/db/models/#multi-table-inheritance>`_ to add additional fields to OCD models. The primary use case in django-councilmatic is adding slugs to first-class models – Person, Event, Bill, and Organization - and adding metadata outside of the OCD standard, e.g., a headshot to Person and division boundaries to Post.\n\nWe recommend using :code:`pupa` to scrape legislative data. Since :code:`pupa` creates OCD objects, `django-councilmatic includes Django signals <https://github.com/datamade/django-councilmatic/pull/240/files#diff-97cdca8c3c4b594b1991875f343b7db5>`_ to each of the subclassed models to create the related Councilmatic model on save. It also includes management commands to import metadata (see above).\n\nIf you subclass a model, be sure to include a signal to create instances of your subclass when the parent class is created, and, if applicable, some way to add any metadata, e.g., a management command or admin interface.\n\nProxying\n========\n\ndjango-councilmatic makes extensive use of proxy models to add custom managers and additional properties and methods to model classes. In order to take advantage of these elsewhere in the code, it is desirable for related objects to be returned as instances of other proxy classes or subclasses, rather than the upstream OCD model classes. In order to force related objects to be returned as Councilmatic models, django-councilmatic makes use of `django-proxy-overrides <https://github.com/datamade/django-proxy-overrides>`_.\n\nIf you wish to customize the class of related objects, first proxy an OCD model, then override one or more of its related object attributes with an instance of `ProxyForeignKey`. See `councilmatic_core.models.BillAction <https://github.com/datamade/django-councilmatic/blob/449ff74d3968b0f34016698d4ee89ff50a7b33ef/councilmatic_core/models.py#L612>`_ for an example.\n\n\nRunning tests\n-------------\n\nDid you make changes to django-councilmatic? Before you make a pull request, run some tests.\n\nFirst, install the test requirements:\n\n.. code-block:: bash\n\n    pip install -r tests/requirements.txt\n\nWe test for style with `flake8 <http://flake8.pycqa.org/en/latest/>`_:\n\n.. code-block:: bash\n\n    flake8 ./councilmatic_core/*.py\n\nWe test for functionality with `pytest`:\n\n.. code-block:: bash\n\n    pytest\n\nIf you made material changes to the Councilmatic models, refresh the test fixture from a local instance database. From your instance directory (assuming you've already installed :code:`django-councilmatic` with :code:`pip install -e /path/to/django-councilmatic`), install the test requirements:\n\n.. code-block:: bash\n\n    pip install -r /path/to/django-councilmatic/tests/test_requirements.txt\n\nAdd :code:`fixture_magic` to your instance's :code:`INSTALLED_APPS` in :code:`settings.py`.\n\nRun the management command to update the test fixture.\n\n.. code-block:: bash\n\n    python manage.py make_fixtures\n\nRun the tests and commit your updated fixture with your PR!\n\n\nPatches and Contributions\n-------------------------\nWe continue to improve django-councilmatic, and we welcome your ideas! You can make suggestions in the form of `github issues <https://github.com/datamade/django-councilmatic/issues>`_ (bug reports, feature requests, general questions), or you can submit a code contribution via a pull request.\n\nHow to contribute code:\n\n- Fork the project.\n- Make your feature addition or bug fix.\n- Bonus points for running tests to check python style (:code:`pip install flake8` and then :code:`flake8 .`).\n- Send us a pull request with a description of your work! Don't worry if it isn't perfect - think of a PR as a start of a conversation, rather than a finished product.\n\n\nCopyright\n---------\n\nCopyright (c) 2019 Participatory Politics Foundation and DataMade.\nReleased under the `MIT\nLicense <https://github.com/datamade/django-councilmatic/blob/master/LICENSE>`__.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://councilmatic.org/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-councilmatic",
    "package_url": "https://pypi.org/project/django-councilmatic/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-councilmatic/",
    "project_urls": {
      "Homepage": "http://councilmatic.org/"
    },
    "release_url": "https://pypi.org/project/django-councilmatic/2.5.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Core functions for councilmatic.org family",
    "version": "2.5.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16770849,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18f036941a9ee05f3a5104c3b202234f17dc124593a608f88ad665cef04358b6",
        "md5": "662c813fb9f0574a15a4b01a31e87c7a",
        "sha256": "d5b7659ff84428da44b94ae63ca97b29523d3644ab50fc6da5152a5f5eaf9034"
      },
      "downloads": -1,
      "filename": "django-councilmatic-2.5.9.tar.gz",
      "has_sig": false,
      "md5_digest": "662c813fb9f0574a15a4b01a31e87c7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 890928,
      "upload_time": "2020-08-20T18:31:50",
      "upload_time_iso_8601": "2020-08-20T18:31:50.797288Z",
      "url": "https://files.pythonhosted.org/packages/18/f0/36941a9ee05f3a5104c3b202234f17dc124593a608f88ad665cef04358b6/django-councilmatic-2.5.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}