{
  "info": {
    "author": "Felix Stein, Ivan Correa",
    "author_email": "mail@flxn.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# CSP Observer\n\n<center>\n\n![CSP Observer Logo](csp_observer/static/csp_observer/img/cspo-logo-256px.png)\n\nCSP Observer is a Django app that monitors incoming Content Security Policy (CSP) reports for your site. It tries to detect security/privacy issues and notifies your visitors.\n\n</center>\n\n## Installation\n\n1. In `settings.py` add \"csp_observer\" to your `INSTALLED_APPS`:\n    ```\n    INSTALLED_APPS = [\n        ...\n        'csp_observer',\n    ]\n    ```\n2. Also in `settings.py` add the following entry to `MIDDLEWARE`:\n    ```\n    MIDDLEWARE = [\n        ...\n        'csp_observer.middleware.CspReportMiddleware',\n    ]\n    ```\n    Please make sure that it is the last entry in the middlewares, otherwise another installed middleware could interfere with the operation of CSP Observer.\n3. Include the url configuration in your `urls.py`:\n    ```\n    from django.urls import path, include\n\n    urlpatterns = [\n        ...\n        path('csp/', include('csp_observer.urls')),\n    ]\n    ```\n    You can change this path but keep in mind, that this path determines the access URL to the admin dashboard. Example: If you change the path for CSP Observer to `path('cspobserver/', ...)`, the admin dashboard will now be accessible at `/cspobserver/admin`.\n4. Run ``python manage.py migrate`` to create the necessary database tables.\n5. The basic installation is finished! View the *Configuration* section for more information on how to configure the app.\n\n## Admin Interface\n\nA basic administration interface is available under */csp/admin*\n\n## Commands\n\nList of commands integrated into *manage.py*:\n\n| Command | Description |\n| ------- | ----------- |\n| `cleanunused` | Removes old sessions and reports from the database. Should be run regularly. |\n| `updaterules` | Updates the rules from the central rule repository. |\n\n## Configuration\n\nOverview of all available settings and their default values:\n\n| Setting | Default | Description |\n| ------- | ------- | ----------- |\n| REPORT_ONLY | ``True`` | Wether to enforce the CSP rules or only report them. |\n| ENABLED_PATHS | ``[\"/\"]`` | An array of paths for which the CSP header should be set. |\n| CSP_POLICIES | ``{'default-src': [\"'self'\"],'script-src': [\"'self'\", \"'unsafe-inline'\"],'connect-src': [\"'self'\"],}`` | A disctionary of CSP policies that should be applied. Key is the name of the directive and value is a list of expressions. |\n| USE_NEW_API | ``False`` | Whether to enable the new Reporting API or use the old report-uri directive |\n| USE_SCRIPT_NONCE | ``True`` | Add nonce to all script tags to catch inline script violations |\n| USE_STYLE_NONCE | ``True`` | Add nonce to all style tags to catch inline style violations |\n| SESSION_KEEP_DAYS | ``14`` | The number of days sessions should be kept in the database. |\n| IS_MASTER_COLLECTOR | ``False`` | Indicates if the instance should function as a central collector of CSP reports for multiple other instances. |\n| AUTHORIZED_REPORTERS | ``[]`` | A list of domains that are allowed send their CSP reports to the master. Example: ``['http://127.0.0.1:8000', 'https://example.com']`` |\n| REMOTE_SECRET | ``''`` | A shared secret that **must be the same** for the master collector and all reporters. |\n| REMOTE_REPORTING | ``False`` | Wether to use a central remote collector or not. |\n| REMOTE_CSP_OBSERVER_URL | ``''`` | The URL of the remote collector instance. Must be the path to the *csp_observer* app, as defined in *urls.py*. Example: ``http://example.com/csp`` |\n| CLIENTUI_VISIBILITY | ``always`` | Choose if the client popup should always be visible (``always``) or only if a problem has been detected (``minimized``) |\n| RULE_UPDATE_FILE | ``https://raw.githubusercontent.com/flxn/csp-observer-data/master/rules.json`` | The path to the file that contains the global rule database |\n| RULE_UPDATE_INTERVAL | ``21600`` | The minimum number of seconds before a new rule update is allowed |\n| VOLUNTARY_DATA_SHARING_URL | ``https://csp-observer-reports.flxn.de`` | The URL that the unknown report data of the data sharing is sent to. |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/flxn/django-csp-observer",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-csp-observer",
    "package_url": "https://pypi.org/project/django-csp-observer/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-csp-observer/",
    "project_urls": {
      "Homepage": "https://github.com/flxn/django-csp-observer"
    },
    "release_url": "https://pypi.org/project/django-csp-observer/1.0.2/",
    "requires_dist": [
      "markdown"
    ],
    "requires_python": ">=3.6",
    "summary": "A Django app that evaluates CSP reports to identify malicious activity.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8052654,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1861c58a82539b8ffe5a0d1cc71ae2a2261422c27c9214664d381de2ad7640bc",
        "md5": "a909a58cd7c3aae97a701583964a750b",
        "sha256": "c0e5d69f4a875a247c4a195c4824af554f8584e2571ba04e118c2fed3fde07ad"
      },
      "downloads": -1,
      "filename": "django_csp_observer-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a909a58cd7c3aae97a701583964a750b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 272181,
      "upload_time": "2020-08-27T14:56:14",
      "upload_time_iso_8601": "2020-08-27T14:56:14.932614Z",
      "url": "https://files.pythonhosted.org/packages/18/61/c58a82539b8ffe5a0d1cc71ae2a2261422c27c9214664d381de2ad7640bc/django_csp_observer-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c81992c6337b9251f72bd45eda579565fbd9cf502ffc8e81731ce88d3762317",
        "md5": "0f5ea2b4a9da59b0626d57ee58d298fe",
        "sha256": "e4575f8750425eda6900a98d5a334545d43fcb0515d8aead4cab2f55148ed0e2"
      },
      "downloads": -1,
      "filename": "django-csp-observer-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0f5ea2b4a9da59b0626d57ee58d298fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 260553,
      "upload_time": "2020-08-27T14:56:17",
      "upload_time_iso_8601": "2020-08-27T14:56:17.068303Z",
      "url": "https://files.pythonhosted.org/packages/9c/81/992c6337b9251f72bd45eda579565fbd9cf502ffc8e81731ce88d3762317/django-csp-observer-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}