{
  "info": {
    "author": "Observatory Control System Project",
    "author_email": "ocs@lco.global",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# Observation Portal\n\n![Build](https://github.com/observatorycontrolsystem/observation-portal/workflows/Build/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/observatorycontrolsystem/observation-portal/badge.svg?branch=master)](https://coveralls.io/github/observatorycontrolsystem/observation-portal?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/9846cee7c4904cae8864525101030169)](https://www.codacy.com/gh/observatorycontrolsystem/observation-portal?utm_source=github.com&utm_medium=referral&utm_content=observatorycontrolsystem/observation-portal&utm_campaign=Badge_Grade)\n\n## An API for Astronomical Observation Management\n\nWithin an observatory control system, the observation portal provides modules for:\n\n-   **Proposal management**: Calls for proposals, proposal creation, and time allocation\n-   **Request management**: Observation request validation, submission, and cancellation, as well as views providing ancillary information about them\n-   **Observation management**: Store and provide the telescope schedule, update observations, and update observation requests on observation update\n-   **User identity management**: Oauth2 authenticated user management that can be used in other applications\n\n## Prerequisites\n\nOptional prerequisites can be skipped for reduced functionality.\n\n-   Python >= 3.6\n-   PostgreSQL >= 9.6\n-   A running [Configuration Database](https://github.com/observatorycontrolsystem/configdb) \n-   (Optional) A running [Downtime Database](https://github.com/observatorycontrolsystem/downtime)\n-   (Optional) A running Elasticsearch\n\n\n\n## Environment Variables\n\n|                        | Variable                         | Description                                                                                                                                                                 | Default                                                 |\n| ---------------------- | -------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |\n| General                | `DEBUG`                          | Whether the application should run using Django's debug mode                                                                                                                | `False`                                                 |\n|                        | `SECRET_KEY`                     | The secret key used for sessions                                                                                                                                            | _`random characters`_                                   |\n|                        | `CSRF_TRUSTED_ORIGINS`           | Comma separated list of trusted origins allowed for CSRF                                                                                                                    | `None`\n|                        | `REQUESTGROUP_DATA_DOWNLOAD_URL` | The url where a user can download requestgroup data. Optionally include `{requestgroup_id}` in the string which will be filled in with the ID of the specific requestgroup. | _`Empty string`_ |\n|                        | `REQUEST_DETAIL_URL` | The url to frontend detail page for a Request. Optionally include `{request_id}` in the string which will be filled in with the ID of the specific request. | _`Empty string`_ |\n|                        | `MAX_FAILURES_PER_REQUEST` | Maximum number of times an Observation can fail per Request before the Request is marked as FAILURE_LIMIT_REACHED. 0 means there is no max. | `0` |\n| Database               | `DB_NAME`                        | The name of the database                                                                                                                                                    | `observation_portal`                                    |\n|                        | `DB_USER`                        | The database user                                                                                                                                                           | `postgres`                                              |\n|                        | `DB_PASSWORD`                    | The database password                                                                                                                                                       | _`Empty string`_                                        |\n|                        | `DB_HOST`                        | The database host                                                                                                                                                           | `127.0.0.1`                                             |\n|                        | `DB_PORT`                        | The database port                                                                                                                                                           | `5432`                                                  |\n| Cache                  | `CACHE_BACKEND`                  | The remote Django cache backend                                                                                                                                             | `django.core.cache.backends.locmem.LocMemCache`         |\n|                        | `CACHE_LOCATION`                 | The cache location or connection string                                                                                                                                     | `unique-snowflake`                                      |\n|                        | `LOCAL_CACHE_BACKEND`            | The local Django cache backend to use                                                                                                                                       | `django.core.cache.backends.locmem.LocMemCache`         |\n| Static and Media Files | `AWS_BUCKET_NAME`                | The name of the AWS bucket in which to store static and media files                                                                                                         | `observation-portal-test-bucket`                        |\n|                        | `AWS_REGION`                     | The AWS region                                                                                                                                                              | `us-west-2`                                             |\n|                        | `AWS_ACCESS_KEY_ID`              | The AWS user access key with read/write priveleges on the s3 bucket                                                                                                         | `None`                                                  |\n|                        | `AWS_SECRET_ACCESS_KEY`          | The AWS user secret key to use with the access key                                                                                                                          | `None`                                                  |\n|                        | `MEDIA_STORAGE`                  | The Django media files storage backend                                                                                                                                      | `django.core.files.storage.FileSystemStorage`           |\n|                        | `MEDIAFILES_DIR`                 | The directory in which to store media files                                                                                                                                 | `media`                                                 |\n|                        | `STATIC_STORAGE`                 | The Django static files storage backend                                                                                                                                     | `django.contrib.staticfiles.storage.StaticFilesStorage` |\n| Email                  | `EMAIL_BACKEND`                  | The Django SMTP backend to use                                                                                                                                              | `django.core.mail.backends.console.EmailBackend`        |\n|                        | `EMAIL_HOST`                     | The SMTP host                                                                                                                                                               | `localhost`                                             |\n|                        | `EMAIL_HOST_USER`                | The SMTP user                                                                                                                                                               | _`Empty string`_                                        |\n|                        | `EMAIL_HOST_PASSWORD`            | The SMTP password                                                                                                                                                           | _`Empty string`_                                        |\n|                        | `EMAIL_PORT`                     | The SMTP port                                                                                                                                                               | `587`                                                   |\n| External Services      | `CONFIGDB_URL`                   | The url to the configuration database                                                                                                                                       | `http://localhost`                                      |\n|                        | `DOWNTIMEDB_URL`                 | The url to the downtime database                                                                                                                                            | `http://localhost`                                      |\n|                        | `ELASTICSEARCH_URL`              | The url to the elasticsearch cluster                                                                                                                                        | `http://localhost`                                      |\n| Task Scheduling        | `DRAMATIQ_BROKER_HOST`           | The broker host for dramatiq                                                                                                                                                | `redis`                                                 |\n|                        | `DRAMATIQ_BROKER_PORT`           | The broker port for dramatiq                                                                                                                                                | `6379`                                                  |\n\n## Local Development\n\n### **Set up external services**\n\nPlease refer to the [Configuration Database](https://github.com/observatorycontrolsystem/configdb) and [Downtime Database](https://github.com/LCOGT/downtime) projects for instructions on how to get those running, as well as the [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/install-elasticsearch.html) for options on how to run Elasticsearch.\n\n### **Set up a [virtual environment](https://docs.python.org/3/tutorial/venv.html)**\n\nUsing a virtual environment is highly recommended. Run the following commands from the base of this project. `(env)`\nis used to denote commands that should be run using your virtual environment.\n\n    python3 -m venv env\n    source env/bin/activate\n    (env) pip install numpy && pip install -r requirements.txt\n\n### **Set up the database**\n\nThis example uses the [PostgreSQL Docker image](https://hub.docker.com/_/postgres) to create a database. Make sure that the options that you use to set up your database correspond with your configured database settings.\n\n    docker run --name observation-portal-postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=observation_portal -v/var/lib/postgresql/data -p5432:5432 -d postgres:11.1\n\nAfter creating the database, migrations must be applied to set up the tables in the database.\n\n    (env) python manage.py migrate\n\n### **Run the tests**\n\n    (env) python manage.py test --settings=test_settings\n\n### **Run the portal**\n\n    (env) python manage.py runserver\n\nThe observation portal should now be accessible from <http://127.0.0.1:8000>!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://observatorycontrolsystem.github.io",
    "keywords": "observations,astronomy,astrophysics,cosmology,science,ocs,observatory",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ocs-observation-portal",
    "package_url": "https://pypi.org/project/django-ocs-observation-portal/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ocs-observation-portal/",
    "project_urls": {
      "Homepage": "https://observatorycontrolsystem.github.io"
    },
    "release_url": "https://pypi.org/project/django-ocs-observation-portal/3.0.11/",
    "requires_dist": [
      "apscheduler (<3.7,>=3.6)",
      "boto3 (<2.0)",
      "cerberus (<2.0,>1.0)",
      "django (<2.3,>=2.2)",
      "djangorestframework (<3.10,>=3.9)",
      "django-bootstrap4 (<1.2)",
      "django-cors-headers (<3.6,>=3.0)",
      "django-dramatiq (<0.8,>=0.7)",
      "django-extensions (<2.2,>=2.1)",
      "django-filter (<2.4,>=2.1)",
      "django-oauth-toolkit (<1.3,>=1.2)",
      "django-redis-cache (<2.1)",
      "django-registration-redux (<2.7,>=2.6)",
      "django-storages (<1.8,>=1.7)",
      "dramatiq[redis,watch] (<1.6,>=1.5)",
      "drf-yasg (<1.16,>=1.15)",
      "elasticsearch (<6,>=5)",
      "gunicorn[gevent] (<20,>=19)",
      "lcogt-logging (==0.3.2)",
      "numpy (<1.17,>=1.16)",
      "ocs-rise-set (==0.5.1)",
      "psycopg2-binary (<2.9,>=2.8)",
      "PyPDF2 (<1.27,>=1.26)",
      "redis (==3.5.2)",
      "requests (<2.26,>=2.22)",
      "time-intervals (<2.0)",
      "responses (==0.10.6) ; extra == 'test'",
      "mixer (==6.1.3) ; extra == 'test'",
      "Faker (==0.9.1) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "The Observatory Control System (OCS) Observation Portal django apps",
    "version": "3.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17483923,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8293da3fd4ef8dea6bb605632ecad2e0a5a87c875d38f3e12635cf67375e3e9",
        "md5": "1272a3fb8f6a65c42b4a62219f4fafeb",
        "sha256": "3e694b6cceb6b2cafe3447ca77f24289cd7aa6e386c552ffc18c828acd9b6cb4"
      },
      "downloads": -1,
      "filename": "django_ocs_observation_portal-3.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1272a3fb8f6a65c42b4a62219f4fafeb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 793234,
      "upload_time": "2021-02-19T00:11:55",
      "upload_time_iso_8601": "2021-02-19T00:11:55.653823Z",
      "url": "https://files.pythonhosted.org/packages/a8/29/3da3fd4ef8dea6bb605632ecad2e0a5a87c875d38f3e12635cf67375e3e9/django_ocs_observation_portal-3.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68cd62d3d9c2e894282fc21fa303cb4cf0d2f1e2f766804f0c8ec7b4bdc8641b",
        "md5": "4b82a296c0660cf331a29651387491a8",
        "sha256": "2727d02afebd55660a2cfb0969f3c95436f9987fb0cb8c8966f3611c939be881"
      },
      "downloads": -1,
      "filename": "django-ocs-observation-portal-3.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "4b82a296c0660cf331a29651387491a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 706863,
      "upload_time": "2021-02-19T00:11:57",
      "upload_time_iso_8601": "2021-02-19T00:11:57.883355Z",
      "url": "https://files.pythonhosted.org/packages/68/cd/62d3d9c2e894282fc21fa303cb4cf0d2f1e2f766804f0c8ec7b4bdc8641b/django-ocs-observation-portal-3.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}