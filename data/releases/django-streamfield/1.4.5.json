{
  "info": {
    "author": "Yury Lapshinov",
    "author_email": "y.raagin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Django StreamField\n\nThis is a simple realisation of StreamField's idea of Wagtail CMS for plain Django admin or with Grappelli skin.\nStable version: 1.4.5\n\n## Highlights\nYou can build your page with different kind of blocks. \nSort them and sort the lists inside the blocks.\n\n**The blocks here are regular instances of Django models.** For editing content inside the blocks, it use native popup mechanism in Django admin interface.\nThis allow you to use other field's widgets inside the blocks as is.\nFor example, if you want to use in your blocks FileBrowseField\nfrom django-filebrowser, it will perfectly working \nwithout any additional settings.\n\nModule also working with [Grappelli Interface](https://github.com/sehmaschine/django-grappelli) (Optional)\n\n![django-streamfield demo screenshot](https://raagin.ru/media/uploads/django-streamfield.png)\n\n## Contents\n\n- [Installation](#installation)\n- [How to use](#how-to-use)\n- [Admin](#admin)\n  - [Custom admin class for block's models](#custom-admin-class-for-blocks-models)\n  - [Custom templates for render block models in admin](#custom-templates-for-render-block-models-in-admin)\n  - [Override how to render block's fields in admin](#override-how-to-render-blocks-fields-in-admin)\n  - [Override list of blocks for your StreamField in admin.py](#override-list-of-blocks-for-your-streamfield-in-adminpy)\n- [Block options](#block-options)\n- [Special cases](#special-cases)\n  - [Complex Blocks](#complex-blocks)    \n  - [Blocks without data in database. Only templates](#blocks-without-data-in-database-only-templates)\n  - [Add extra context to blocks](#add-extra-context-to-blocks)\n  - [Get field data as list](#get-field-data-as-list)\n  - [Cache for reduce the number of database requests](#cache-for-reduce-the-number-of-database-requests)\n  - [Create a copy](#create-a-copy)\n- [Settings](#settings)\n- [Migrations](#migrations)\n\n## Installation\n\nRequirements: `django>=2.*`\n\n`pip install django-streamfield`\n\n## How to use\n- Create streamblocks app with your models\n- Add streamfield and streamblocks to INSTALLED_APPS\n- Add streamfield.urls\n- Create templates for streamblocks\n- Add StreamField to your model\n- Use it in templates\n\n**1. Create new app called `streamblocks` and put there some models**\n\n...that you want to use as blocks in your StreamField.  \nAdd them to the list `STREAMBLOCKS_MODELS`.\nFor example:\n\n```python\n# streamblocks/models.py\n\n# one object\nclass RichText(models.Model):\n    text = models.TextField(blank=True, null=True)   \n\n    class Meta:\n        # This will use as name of block in admin\n        verbose_name=\"Text\"\n\n# list of objects\nclass ImageWithText(models.Model):\n    image = models.ImageField(upload_to=\"folder/\")\n    text = models.TextField(null=True, blank=True)\n    \n    # StreamField option for list of objects\n    as_list = True\n\n    class Meta:\n        verbose_name=\"Image with text\"\n        verbose_name_plural=\"Images with text\"\n\n# Register blocks for StreamField as list of models\nSTREAMBLOCKS_MODELS = [\n    RichText,\n    ImageWithText\n]\n```\n> Important!: Don't use 'as_list', 'options', 'extra_options' as models field names, because they are used by streamfield.\n\n**2. Add apps to settings.py and make migrations**\n\nAdd to INSTALLED_APPS\n\n```python\nINSTALLED_APPS = [\n    ...\n    'streamblocks',\n    'streamfield',\n    ...\n```\nRun `python manage.py makemigrations` and `python manage.py migrate`\n\n**3. Add streamfield.urls to main urls.py**\n```python\nurlpatterns += [\n    path('streamfield/', include('streamfield.urls'))\n]\n```\n\n**4. Create templates for each block model, named as lowercase names of the models:**\n\n1. streamblocks/templates/streamblocks/richtext.html\n2. streamblocks/templates/streamblocks/imagewithtext.html\n\nAnd use `block_content` as context.\n\n> Note: block_content will be single object \nif no 'as_list' property in your model, \nand will be a list of objects if there is.\n\n```html\n<!--richtext.html-->\n<div class=\"rich-text-block\">\n    {{ block_content.text|safe }}\n</div>\n```\n```html\n<!--imagewithtext.html-->\n<ul class=\"image-with-text-block\">\n    {% for block in block_content %}\n    <li>\n        <img src=\"{{ block.image.url }}\" alt=\"\">\n        <p>{{ block.text }}</p>\n    </li>\n    {% endfor %}\n</ul>\n```\n\n> Note: You may use also `block_template` option. For specify a block template file.\n\n```python\nclass RichText(models.Model):\n    ...\n    block_template = \"streamblocks/richtext.html\"\n    ...\n```\n> Note: If you need unique string in block template, use `block_model` and `block_unique_id`\n\n*Full list of variables in template context:*  \n- `block_model` (lowercase of modelname - \"richtext\")\n- `block_unique_id` (unique string)\n- `block_content` (block data from db)\n- `as_list` (boolean)\n- `options` ([block options](#block-options))\n\n> Note: For unique idetifier inside the lists you may use a combination of `block_unique_id` and `block.id` of subblock.\n\n**5. Add StreamField to your model in your application**\n\nAnd add the models that you want to use in this stream as model_list\n```python\n# models.py\nfrom streamfield.fields import StreamField\nfrom streamblocks.models import RichText, ImageWithText\n\nclass Page(models.Model):\n    stream = StreamField(\n        model_list=[ \n            RichText,\n            ImageWithText\n        ],\n        verbose_name=\"Page blocks\"\n        )\n```\n\n*You can set size of popup window*  \nAdd `popup_size` attribute to StreamField\n```python\n    ...\n    stream = StreamField(\n        model_list=[...],\n        popup_size=(1000, 500) # default value. Width: 1000px, Height: 500px\n        )\n    ...\n```\n\n**6. Use it in template**\nIf you have your `page` in context, \nyou can get content by field's cached property page.stream.render\n```html\n...\n<div class=\"content\">\n    {{ page.stream.render }}\n</div>\n...\n```\n\nOr, if you need extra context in blocks, you may use template tag:\n```html\n{% load streamfield_tags %}\n...\n<div class=\"content\">\n  {% stream_render page.stream request=request %}\n</div>\n...\n```\nThird way it's to use list. [See bellow](#get-field-data-as-list)\n\n\n## Admin\n### Custom admin class for block's models\nModels will automaticaly register in admin.\nIf you want provide custom admin class, \nfirst unregister models and register again, using `StreamBlocksAdmin` class.\n\n```python\n# streamblocks/admin.py\n\nfrom django.contrib import admin\nfrom streamfield.admin import StreamBlocksAdmin\n\nfrom streamblocks.models import RichText\n\nadmin.site.unregister(RichText)\n@admin.register(RichText)\nclass RichTextBlockAdmin(StreamBlocksAdmin, admin.ModelAdmin):\n    pass\n```\n\n### Custom templates for render block models in admin\nIf you need to customize admin templates for block models wich you are using, you need to put templates named as \ndescribed in section 3 (above). but put it inside \"admin\" folder.\n\nFor example for RichText block it will be:\n\n`streamblocks/templates/streamblocks/admin/richtext.html`\n\nAs context use \"form\" and/or \"object\" (Not working for abstract blocks):\n```html\n{{ form.text.value }}\n{{ object }}\n```\n\nThe default admin template is: `streamfield/admin/change_form_render_template.html`  \nYou can extend it\n```html\n{% extends \"streamfield/admin/change_form_render_template.html\" %}\n{% block streamblock_form %}\n{{ block.super }}\nOriginal object is: {{ object }}\n{% endblock streamblock_form %}\n```\n\n\nYou may also specify custom template as option:\n```python\nclass RichText(models.Model):\n    ...\n    custom_admin_template = \"streamblocks/admin/richtext.html\"\n    ...\n```\n\n### Override how to render block's fields in admin\nCreate custom template for field with name as generated by `django.utils.text.camel_case_to_spaces` from field widget name, and put it inside `.../streamblocks/admin/fields/` folder.\n\nFor example for TextField widget (Textarea) of RichText block, it will be:\n`streamblocks/templates/streamblocks/admin/fields/textarea.html`\n\nAnd `MyCustomWidget`:\n`streamblocks/templates/streamblocks/admin/fields/my_custom_widget.html`\n\nAs context use \"field\":\n```html\n{{ field.value|default:\"\"|safe }}\n```\n\n### Override list of blocks for your StreamField in admin.py\nTypicaly you set the blocks in your models as `model_list` attribute of StreamField field.\nBut if you want to change blocks, for example depending on object, you can do it in admin site\nof your model. Suppose you want to use only `RichText` on page with id=1.\n\n```python\n# admin.py\nfrom streamfield.fields import StreamFieldWidget\nfrom streamblocks.models import RichText\nfrom .models import Page\n\n@admin.register(Page)\nclass PageAdmin(models.Admin):\n\n    def get_form(self, request, obj=None, **kwargs):\n        form = super().get_form(request, obj, **kwargs)\n        if obj and obj.id == 1:\n            form.base_fields['stream'].widget = StreamFieldWidget(attrs={\n                'model_list': [ RichText ]\n                })\n        return form\n```\nBe careful with already existing blocks in db. If you remove them from admin, it produce error.\n\n## Block options\nYou may use `options` property in your streamblocks models to add some additional options to your block.\nThis is useful with `as_list` property when you need to add some options to whole block not separatly to each object of this list.\n\nFor example:\n```python\n# streamblocks/models.py\n\n# list of objects as slider\nclass Slide(models.Model):\n    image = models.ImageField(upload_to=\"folder/\")\n    text = models.TextField(null=True, blank=True)\n    \n    # StreamField option for list of objects\n    as_list = True\n    \n    options = {\n        'autoplay': {\n            'label': 'Autoplay slider',\n            'type': 'checkbox',\n            'default': False\n        },\n        'width': {\n            'label': 'Slider size',\n            'type': 'select',\n            'default': 'wide',\n            'options': [\n                {'value': 'wide', 'name': 'Wide slider'},\n                {'value': 'narrow', 'name': 'Narrow slider'},\n            ]\n        },\n        'class_name': {\n          'label': 'Class Name',\n          'type': 'text',\n          'default': ''\n        }\n    }\n\n    class Meta:\n        verbose_name=\"Slide\"\n        verbose_name_plural=\"Slider\"\n```\nIn block template you can use this options as `options.autoplay`\nIn page admin you will see it on the bottom of this block.\n> Note: Now only \"checkbox\", \"text\" and \"select\" type is working.\nYou may apply options for all blocks with `STREAMFIELD_BLOCK_OPTIONS` (See [Settings](#settings))\n\nIf you want to add block options to options, which was set in django settings, you may use `extra_options`.\n```python\nclass Slide(models.Model):\n    ...\n    extra_options = {\n        \"autoplay\": {\n            \"label\": \"Autoplay\",\n            \"type\": \"checkbox\",\n            \"default\": False\n        }\n    }\n    ...\n```\n\nIf you want to switch off options, which set in django settings, for current block. Set `options={}`\n\n## Special cases\n### Complex Blocks\nYou may use StreamField as part of blocks and create with that way complex structure\nand use `{{ block_content.<field_name>.render }}`\n\n### Blocks without data in database. Only templates.\nYou may use it for widgets or separators or for whatever you want...\nJust make the block model `abstract`.\n```python\nclass EmptyBlock(models.Model):\n    class Meta:\n        abstract = True\n        verbose_name='Empty space'\n```\nand use `streamblocks/templates/streamblocks/emptyblock.html` for your content.\n> Note: Don't forget to register a block in STREAMBLOCKS_MODELS\n\n### Add extra context to blocks\nSupose, you need to add some data to blocks from global context.\nInstead of using render property in template `{{ page.stream.render }}`,\nyou need to use template tag `stream_render` from `streamfield_tags` with keywords arguments.\n\nFor example, if you have in page template `request` and `page` objects and want to use it in blocks:\n```html\n{% load streamfield_tags %}\n...\n<div class=\"content\">\n  {% stream_render page.stream request=request page=page %}\n</div>\n...\n```\n\n### Get field data as list\nIf you have special case, you can get data as list.\n\n```python\n# views.py\nstream_list = page.stream.as_list()\n# You will get list of dictionaries \n# print(stream_list)\n[{\n    'data': {\n        'block_model': '.....', \n        'block_unique_id': '....', \n        'block_content': [...], \n        'as_list': True, \n        'options': {}\n    }, \n    'template': '....'\n    },\n    ...\n]\n```\n\n```html\n<!-- template.html -->\n{% for b in page.stream.as_list %}\n    {% include b.template with block_content=b.data.block_content %}\n{% endfor %}\n```\n\n\n\n### Cache for reduce the number of database requests\nThere is two ways of caching:\n- Simple cache view with django cache \n- Create additional field, for example: 'stream_rendered'\nand render to this field html in save method\n\n```python\ndef save(self, *args, **kwargs):\n    self.stream_rendered = self.stream.render\n    super().save(*args, **kwargs)\n```\n...and use this field in your html\n\n### Create a copy\nStreamObject have a method 'copy', which create a copies of all the instances that used in this field.   \nFor example, if you have object 'page' with the field 'stream', and you need a copy of this object. You can do this:\n\n```python\npage.pk = None\npage.stream = page.stream.copy()\npage.save()\n```\n> Note: If you will not use `page.stream.copy()` instances will be the same as in the original object\n\n\n## Settings\n```python\n# settings.py\n```\n\n### STREAMFIELD_SHOW_ADMIN_COLLAPSE\nIf you want to hide \"Collapse\" link in admin.  \nSet:\n```python\nSTREAMFIELD_SHOW_ADMIN_COLLAPSE = False\n```\n\n### STREAMFIELD_SHOW_ADMIN_HELP_TEXT\nIf you want to hide \"Help\" link in admin.  \nSet: \n```python\nSTREAMFIELD_SHOW_ADMIN_HELP_TEXT = False\n```\n\n### STREAMFIELD_DELETE_BLOCKS_FROM_DB\nIf you want to keep streamblock's instances in db, when you removing it from StreamField. Set: \n```python\nSTREAMFIELD_DELETE_BLOCKS_FROM_DB = False\n```\nIt was default behavior in previous releases. \n> Note: If you delete entire object which contain StreamField, streamblock's instances will not be deleted. You should care about it by yourself.\n\n### STREAMFIELD_BLOCK_OPTIONS\n\nYou may use `STREAMFIELD_BLOCK_OPTIONS` in settings.py to add some options to all blocks.\n\nFor example:\n```python\nSTREAMFIELD_BLOCK_OPTIONS = {\n    \"margins\": {\n        \"label\": \"Margins\",\n        \"type\": \"checkbox\",\n        \"default\": True\n    }\n}\n```\nIn block template use `{{ options.margins }}`\n\n> Note: Now only \"checkbox\", \"text\",  and \"select\" type is working.\n\n## Migrations\nIf you add new options to Block with already existed data, you need to migrate options for adding default values to stored json.  \nCreate empty migration and use `migrate_stream_options` function from `streamfield.base`.  \nAt the moment this only works with unique streamblocks class names.  \n\nExample:\n```python\n# migration\nfrom django.db import migrations\nfrom streamfield.base import migrate_stream_options\n\ndef migrate_options(apps, schema_editor):\n    Page = apps.get_model(\"main\", \"Page\")\n    for page in Page.objects.all():\n        page.stream = migrate_stream_options(page.stream)\n        page.save()\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        '...'\n    ]\n\n    operations = [\n        migrations.RunPython(migrate_options),\n    ]\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/raagin/django-streamfield",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-streamfield",
    "package_url": "https://pypi.org/project/django-streamfield/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-streamfield/",
    "project_urls": {
      "Homepage": "https://github.com/raagin/django-streamfield"
    },
    "release_url": "https://pypi.org/project/django-streamfield/1.4.5/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "StreamField for native Django Admin or with Grappelli",
    "version": "1.4.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547314,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaa20dac32b1f7492a501fabb76fccec60d53234400da84a0080d44fffb5aea4",
        "md5": "18f445fef3a3148dee5fba7acce990fc",
        "sha256": "909d536adc5e195b682efd0e6ebc3eed586cff2955ce6932e7671549d98f4ca0"
      },
      "downloads": -1,
      "filename": "django_streamfield-1.4.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18f445fef3a3148dee5fba7acce990fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 214831,
      "upload_time": "2023-01-10T09:57:51",
      "upload_time_iso_8601": "2023-01-10T09:57:51.453809Z",
      "url": "https://files.pythonhosted.org/packages/ea/a2/0dac32b1f7492a501fabb76fccec60d53234400da84a0080d44fffb5aea4/django_streamfield-1.4.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7191ae72bee2dfc5faa54aa36c6bab908d140713f127f2142c0a23cbeb561450",
        "md5": "03bac3f0228c6b910b1b864b5a746093",
        "sha256": "278ba77f50c941913c01f8d08e53e2dd251531d5ec7bd6da51d8de7ece9eff40"
      },
      "downloads": -1,
      "filename": "django-streamfield-1.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "03bac3f0228c6b910b1b864b5a746093",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 201486,
      "upload_time": "2023-01-10T09:57:53",
      "upload_time_iso_8601": "2023-01-10T09:57:53.755464Z",
      "url": "https://files.pythonhosted.org/packages/71/91/ae72bee2dfc5faa54aa36c6bab908d140713f127f2142c0a23cbeb561450/django-streamfield-1.4.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}