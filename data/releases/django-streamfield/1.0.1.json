{
  "info": {
    "author": "Yury Lapshinov",
    "author_email": "y.raagin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Django StreamField\n\nThis is a simple realisation of StreamField's idea \nfrom [Wagtail CMS](https://wagtail.io) for plain Django admin \nor with Grappelli skin.\n\nFor editing content we use native popup mechanism in Django admin interface.\nThis allow us to use other field's widgets inside the blocks as is.\n\nFor example, if you want to use in your blocks FileBrowseField \nfrom django-filebrowser, it will perfectly working \nwithout any additional settings.\n\n## How to use\n\n**Create new app called `streamblocks`**\n\n**Put to `streamblocks/models.py` some models**\n\nthat you want to use in your stream field.\nFor example:\n\n```python\n# streamblocks/models.py\n\n# one object\nclass RichText(models.Model):\n    text = models.TextField(blank=True, null=True)   \n\n# list of objects\nclass ImageWithText(models.Model):\n    image = models.ImageField(upload_to=\"folder/\")\n    text = models.TextField(null=True, blank=True)\n\n    # StreamField option for list of objects\n    as_list = True\n```\n\n**In `streamblocks/models.py` register blocks**\n\nfor StreamField as list of your block models\n```python\n# streamblocks/models.py\n\n...\n\nSTREAMBLOCKS = [\n    RichText,\n    ImageWithText\n]\n```\n\n**Create templates for each models above, named as lowercase names of the models:**\n\n1. streamblocks/templates/streamblocks/richtext.html\n2. streamblocks/templates/streamblocks/imagewithtext.html\n\nAnd use `block_content` as context.\n\n> Note: block_content will be single object \nif no 'as_list' property in your model, \nand will be a list of objects if there is.\n\n```html\n<!--richtext.html-->\n<div class=\"rich-text-block\">\n    {{ block_content|safe }}\n</div>\n\n<!--imagewithtext.html-->\n<ul class=\"image-with-text-block\">\n    {% for block in block_content %}\n    <li>\n        <img src=\"{{ block.image.url }}\" alt=\"\">\n        <p>{{ block.text }}</p>\n    </li>\n    {% endfor %}\n</ul>\n```\n\n**Add apps to settings.py**\n\nadd to INSTALLED_APPS\n\n```python\nINSTALLED_APPS = [\n    ...\n    'streamblocks',\n    'streamfield',\n    ...\n```\n\n**Add StreamField to your model in your application**\n\nAnd add the models that you want to use in this stream as model_list\n```python\n# models.py\nfrom streamfield.fields import StreamField\n\nclass Page(models.Model):\n    stream = StreamField(\n        model_list=[ \n            RichText,\n            ImageWithText\n        ],\n        verbose_name=\"Page blocks\"\n        )\n```\n\nThen if you have your 'page' in context, \nyou can get content by calling method page.stream.render()\n```html\n...\n<div class=\"content\">\n    {{ page.stream.render }}\n</div>\n...\n```\n\n\n## Admin\nModels will automaticaly register in admin\nIf you want provide custom admin class, \nfirst unregister models and register again, using `StreamBlocksAdmin` class.\n\n```python\nfrom django.contrib import admin\nfrom streamfield.admin import StreamBlocksAdmin\n\nfrom streamblocks.models import RichText\n\nadmin.site.unregister(RichText)\n@admin.register(RichText)\nclass RichTextBlockAdmin(StreamBlocksAdmin, admin.ModelAdmin):\n    pass\n```\n\n## Complex Blocks\nYou may use StreamField as part of blocks and create with that way complex structure\nand use `{{ block_content.<field_name>.render }}`\n\n## Cache for reduce the number of database requests\nThere is two ways of caching:\n- Simple cache view with django cache \n- Create additional field, for example: 'stream_rendered'\nand render to this field html in save method\n\n```python\ndef save(self, *args, **kwargs):\n    self.stream_rendered = self.stream.render()\n    super().save(*args, **kwargs)\n```\n...and use this field in your html\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/raagin/django-streamfield",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-streamfield",
    "package_url": "https://pypi.org/project/django-streamfield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-streamfield/",
    "project_urls": {
      "Homepage": "https://github.com/raagin/django-streamfield"
    },
    "release_url": "https://pypi.org/project/django-streamfield/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "StreamField for native Django Admin or with Grappelli",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547314,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b69d30736b4393c3b1fa5b9b1380271ad7c7f8071fa6cbb1d27c530bd234a19f",
        "md5": "66f01bc238a489cd2ea37a767c311d50",
        "sha256": "85e9b7644cba66e6551055cafa64a1165853b8f9a244ee2dd2b80c4aea1fda59"
      },
      "downloads": -1,
      "filename": "django_streamfield-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66f01bc238a489cd2ea37a767c311d50",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 181074,
      "upload_time": "2019-04-29T13:18:25",
      "upload_time_iso_8601": "2019-04-29T13:18:25.286540Z",
      "url": "https://files.pythonhosted.org/packages/b6/9d/30736b4393c3b1fa5b9b1380271ad7c7f8071fa6cbb1d27c530bd234a19f/django_streamfield-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a374138c84524d0e3755f7511d5e4174b9d243e60250186827ebd545722d0b6",
        "md5": "03f5879fcf495a77314eb1a647bca296",
        "sha256": "07be1305402ef46498969e7a9a52bec61588a70f20b396d874452ca6c3d20bff"
      },
      "downloads": -1,
      "filename": "django-streamfield-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "03f5879fcf495a77314eb1a647bca296",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 171133,
      "upload_time": "2019-04-29T13:18:45",
      "upload_time_iso_8601": "2019-04-29T13:18:45.790780Z",
      "url": "https://files.pythonhosted.org/packages/9a/37/4138c84524d0e3755f7511d5e4174b9d243e60250186827ebd545722d0b6/django-streamfield-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}