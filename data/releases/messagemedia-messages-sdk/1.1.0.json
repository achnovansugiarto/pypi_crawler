{
  "info": {
    "author": "MessageMedia Developers",
    "author_email": "developers@messagemedia.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MessageMedia.SDK.Messages Python SDK\n[![Travis Build Status](https://api.travis-ci.org/messagemedia/messages-python-sdk.svg?branch=master)](https://travis-ci.org/messagemedia/messages-python-sdk)\n\nThe MessageMedia Messages API provides a number of endpoints for building powerful two-way messaging applications.\n\n## Getting started\n\nYou must have Python ```2 >=2.7``` or Python ```3 >=3.2``` installed on your system to install and run this SDK. This SDK package depends on other Python packages like nose, jsonpickle etc. \n\n##### Using PIP Dependency manager\nInstall PIP Dependency Manager by following steps at [https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/).\n\nPython and PIP executables should be defined in your PATH. Open command prompt and type ```pip --version```.\nThis should display the version of the PIP Dependency Manager installed if your installation was successful and the paths are properly defined.\n\n* Using the command line, navigate to the directory you wish to install to.\n* Run the command ```pip install messages-python-sdk```. This will install the SDK and all it's required dependencies.\n\n## Example Usage\n\nThe following section explains how to use the MessageMediaMessages SDK package in a new project.\n\n### 1. Open Project in an IDE\n\nOpen up a Python IDE like PyCharm. The basic workflow presented here is also applicable if you prefer using a different editor or IDE.\n\n![Open project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=pyCharm)\n\nClick on ```Open``` in PyCharm to browse to your generated SDK directory and then click ```OK```.\n\n![Open project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=openProject0&workspaceFolder=MessageMediaMessages-Python)     \n\nThe project files will be displayed in the side bar as follows:\n\n![Open project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=openProject1&workspaceFolder=MessageMediaMessages-Python&projectName=message_media_messages)     \n\n### 2. Add a new Test Project\n\nCreate a new directory by right clicking on the solution name as shown below:\n\n![Add a new project in PyCharm - Step 1](https://apidocs.io/illustration/python?step=createDirectory&workspaceFolder=MessageMediaMessages-Python&projectName=message_media_messages)\n\nName the directory as \"test\"\n\n![Add a new project in PyCharm - Step 2](https://apidocs.io/illustration/python?step=nameDirectory)\n\nAdd a python file to this project with the name \"testsdk\"\n\n![Add a new project in PyCharm - Step 3](https://apidocs.io/illustration/python?step=createFile&workspaceFolder=MessageMediaMessages-Python&projectName=message_media_messages)\n\nName it \"testsdk\"\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=nameFile)\n\nIn your python file you will be required to import the generated python library using the following code lines\n\n```Python\nfrom message_media_messages.message_media_messages_client import MessageMediaMessagesClient\n```\n\n![Add a new project in PyCharm - Step 4](https://apidocs.io/illustration/python?step=projectFiles&workspaceFolder=MessageMediaMessages-Python&libraryName=message_media_messages.message_media_messages_client&projectName=message_media_messages&className=MessageMediaMessagesClient)\n\nAfter this you can write code to instantiate an API client object, get a controller object and  make API calls. Sample code is given in the subsequent sections.\n\n### 3. Run the Test Project\n\nTo run the file within your test project, right click on your Python file inside your Test project and click on ```Run```\n\n![Run Test Project - Step 1](https://apidocs.io/illustration/python?step=runProject&workspaceFolder=MessageMediaMessages-Python&libraryName=message_media_messages.message_media_messages_client&projectName=message_media_messages&className=MessageMediaMessagesClient)\n\n## Initialization\n\n### Authentication\nIn order to setup authentication and initialization of the API client, you need the following information.\n\n| Parameter | Description |\n|-----------|-------------|\n| basicAuthUserName | The username to use with basic authentication |\n| basicAuthPassword | The password to use with basic authentication |\n| hmacAuthUserName | The username to use with HMAC authentication |\n| hmacAuthPassword | The password to use with HMAC authentication |\n\n\n\nAPI client can be initialized as following.\n\n```python\n# Configuration parameters and credentials\nauth_user_name = 'basic_auth_user_name' # The username to use with basic authentication\nauth_password = 'basic_auth_password' # The password to use with basic authentication\n\nclient = MessageMediaMessagesClient(auth_user_name, auth_password)\n\n# If you wish to use HMAC authentication, you simply specify it as the last parameter\n\nclient = MessageMediaMessagesClient(auth_user_name, auth_password, true)\n```\n\n\n\n# Class Reference\n\n## <a name=\"list_of_controllers\"></a>List of Controllers\n\n* [MessagesController](#messages_controller)\n* [DeliveryReportsController](#delivery_reports_controller)\n* [RepliesController](#replies_controller)\n\n## <a name=\"messages_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".MessagesController\") MessagesController\n\n### Get controller instance\n\nAn instance of the ``` MessagesController ``` class can be accessed from the API Client.\n\n```python\n messages_client = client.messages\n```\n\n### <a name=\"update_cancel_scheduled_message\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagesController.update_cancel_scheduled_message\") update_cancel_scheduled_message\n\n> Cancel a scheduled message that has not yet been delivered.\n> A scheduled message can be cancelled by updating the status of a message from ```scheduled```\n> to ```cancelled```. This is done by submitting a PUT request to the messages endpoint using\n> the message ID as a parameter (the same endpoint used above to retrieve the status of a message).\n> The body of the request simply needs to contain a ```status``` property with the value set\n> to ```cancelled```.\n> ```json\n> {\n>     \"status\": \"cancelled\"\n> }\n> ```\n> *Note: Only messages with a status of scheduled can be cancelled. If an invalid or non existent\n> message ID parameter is specified in the request, then a HTTP 404 Not Found response will be \n> returned*\n\n```python\ndef update_cancel_scheduled_message(self,\n                                        message_id,\n                                        body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| messageId |  ``` Required ```  | TODO: Add a parameter description |\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nmessage_id = 'messageId'\nbody = CancelScheduledMessageRequest()\n\nresult = messages_client.update_cancel_scheduled_message(message_id, body)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | TODO: Add an error description |\n| 404 | TODO: Add an error description |\n\n\n\n\n### <a name=\"get_message_status\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagesController.get_message_status\") get_message_status\n\n> Retrieve the current status of a message using the message ID returned in the send messages end point.\n> A successful request to the get message status endpoint will return a response body as follows:\n> ```json\n> {\n>     \"format\": \"SMS\",\n>     \"content\": \"My first message!\",\n>     \"metadata\": {\n>         \"key1\": \"value1\",\n>         \"key2\": \"value2\"\n>     },\n>     \"message_id\": \"877c19ef-fa2e-4cec-827a-e1df9b5509f7\",\n>     \"callback_url\": \"https://my.callback.url.com\",\n>     \"delivery_report\": true,\n>     \"destination_number\": \"+61401760575\",\n>     \"scheduled\": \"2016-11-03T11:49:02.807Z\",\n>     \"source_number\": \"+61491570157\",\n>     \"source_number_type\": \"INTERNATIONAL\"\n>     \"message_expiry_timestamp\": \"2016-11-03T11:49:02.807Z\",\n>     \"status\": \"enroute\"\n> }\n> ```\n> The status property of the response indicates the current status of the message. See the Delivery\n> Reports section of this documentation for more information on message statues.\n> *Note: If an invalid or non existent message ID parameter is specified in the request, then\n> a HTTP 404 Not Found response will be returned*\n\n```python\ndef get_message_status(self,\n                           message_id)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| messageId |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nmessage_id = 'messageId'\n\nresult = messages_client.get_message_status(message_id)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 404 | TODO: Add an error description |\n\n\n\n\n### <a name=\"create_send_messages\"></a>![Method: ](https://apidocs.io/img/method.png \".MessagesController.create_send_messages\") create_send_messages\n\n> Submit one or more (up to 100 per request) SMS or text to voice messages for delivery.\n> The most basic message has the following structure:\n> ```json\n> {\n>     \"messages\": [\n>         {\n>             \"content\": \"My first message!\",\n>             \"destination_number\": \"+61491570156\"\n>         }\n>     ]\n> }\n> ```\n> More advanced delivery features can be specified by setting the following properties in a message:\n> - ```callback_url``` A URL can be included with each message to which Webhooks will be pushed to\n>   via a HTTP POST request. Webhooks will be sent if and when the status of the message changes as\n>   it is processed (if the delivery report property of the request is set to ```true```) and when replies\n>   are received. Specifying a callback URL is optional.\n> - ```content``` The content of the message. This can be a Unicode string, up to 5,000 characters long.\n>   Message content is required.\n> - ```delivery_report``` Delivery reports can be requested with each message. If delivery reports are requested, a webhook\n>   will be submitted to the ```callback_url``` property specified for the message (or to the webhooks)\n>   specified for the account every time the status of the message changes as it is processed. The\n>   current status of the message can also be retrieved via the Delivery Reports endpoint of the\n>   Messages API. Delivery reports are optional and by default will not be requested.\n> - ```destination_number``` The destination number the message should be delivered to. This should be specified in E.164\n>   international format. For information on E.164, please refer to http://en.wikipedia.org/wiki/E.164.\n>   A destination number is required.\n> - ```format``` The format specifies which format the message will be sent as, ```SMS``` (text message)\n>   or ```TTS``` (text to speech). With ```TTS``` format, we will call the destination number and read out the\n>   message using a computer generated voice. Specifying a format is optional, by default ```SMS``` will be used.\n> - ```source_number``` A source number may be specified for the message, this will be the number that\n>   the message appears from on the handset. By default this feature is _not_ available and will be ignored\n>   in the request. Please contact <support@messagemeda.com> for more information. Specifying a source\n>   number is optional and a by default a source number will be assigned to the message.\n> - ```source_number_type``` If a source number is specified, the type of source number may also be\n>   specified. This is recommended when using a source address type that is not an internationally\n>   formatted number, available options are ```INTERNATIONAL```, ```ALPHANUMERIC``` or ```SHORTCODE```. Specifying a\n>   source number type is only valid when the ```source_number``` parameter is specified and is optional.\n>   If a source number is specified and no source number type is specified, the source number type will be\n>   inferred from the source number, however this may be inaccurate.\n> - ```scheduled``` A message can be scheduled for delivery in the future by setting the scheduled property.\n>   The scheduled property expects a date time specified in ISO 8601 format. The scheduled time must be\n>   provided in UTC and is optional. If no scheduled property is set, the message will be delivered immediately.\n> - ```message_expiry_timestamp``` A message expiry timestamp can be provided to specify the latest time\n>   at which the message should be delivered. If the message cannot be delivered before the specified\n>   message expiry timestamp elapses, the message will be discarded. Specifying a message expiry \n>   timestamp is optional.\n> - ```metadata``` Metadata can be included with the message which will then be included with any delivery\n>   reports or replies matched to the message. This can be used to create powerful two-way messaging\n>   applications without having to store persistent data in the application. Up to 10 key / value metadata data\n>   pairs can be specified in a message. Each key can be up to 100 characters long, and each value up to \n>   256 characters long. Specifying metadata for a message is optional.\n> The response body of a successful POST request to the messages endpoint will include a ```messages```\n> property which contains a list of all messages submitted. The list of messages submitted will\n> reflect the list of messages included in the request, but each message will also contain two new\n> properties, ```message_id``` and ```status```. The returned message ID will be a 36 character UUID\n> which can be used to check the status of the message via the Get Message Status endpoint. The status\n> of the message which reflect the status of the message at submission time which will always be\n> ```queued```. See the Delivery Reports section of this documentation for more information on message\n> statues.\n> *Note: when sending multiple messages in a request, all messages must be valid for the request to be successful.\n> If any messages in the request are invalid, no messages will be sent.*\n\n```python\ndef create_send_messages(self,\n                             body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody_value = \"{    \\\"messages\\\": [        {            \\\"callback_url\\\": \\\"https://my.callback.url.com\\\",            \\\"content\\\": \\\"My first message\\\",            \\\"destination_number\\\": \\\"+61491570156\\\",            \\\"delivery_report\\\": true,            \\\"format\\\": \\\"SMS\\\",            \\\"message_expiry_timestamp\\\": \\\"2016-11-03T11:49:02.807Z\\\",            \\\"metadata\\\": {                \\\"key1\\\": \\\"value1\\\",                \\\"key2\\\": \\\"value2\\\"            },            \\\"scheduled\\\": \\\"2016-11-03T11:49:02.807Z\\\",            \\\"source_number\\\": \\\"+61491570157\\\",            \\\"source_number_type\\\": \\\"INTERNATIONAL\\\"        },        {            \\\"callback_url\\\": \\\"https://my.callback.url.com\\\",            \\\"content\\\": \\\"My second message\\\",            \\\"destination_number\\\": \\\"+61491570158\\\",            \\\"delivery_report\\\": true,            \\\"format\\\": \\\"SMS\\\",            \\\"message_expiry_timestamp\\\": \\\"2016-11-03T11:49:02.807Z\\\",            \\\"metadata\\\": {                \\\"key1\\\": \\\"value1\\\",                \\\"key2\\\": \\\"value2\\\"            },            \\\"scheduled\\\": \\\"2016-11-03T11:49:02.807Z\\\",            \\\"source_number\\\": \\\"+61491570159\\\",            \\\"source_number_type\\\": \\\"INTERNATIONAL\\\"        }    ]}\"\nbody = json.loads(body_value)\n\nresult = messages_client.create_send_messages(body)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | TODO: Add an error description |\n\n\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"delivery_reports_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".DeliveryReportsController\") DeliveryReportsController\n\n### Get controller instance\n\nAn instance of the ``` DeliveryReportsController ``` class can be accessed from the API Client.\n\n```python\n delivery_reports_client = client.delivery_reports\n```\n\n### <a name=\"get_check_delivery_reports\"></a>![Method: ](https://apidocs.io/img/method.png \".DeliveryReportsController.get_check_delivery_reports\") get_check_delivery_reports\n\n> Check for any delivery reports that have been received.\n> Delivery reports are a notification of the change in status of a message as it is being processed.\n> Each request to the check delivery reports endpoint will return any delivery reports received that\n> have not yet been confirmed using the confirm delivery reports endpoint. A response from the check\n> delivery reports endpoint will have the following structure:\n> ```json\n> {\n>     \"delivery_reports\": [\n>         {\n>             \"callback_url\": \"https://my.callback.url.com\",\n>             \"delivery_report_id\": \"01e1fa0a-6e27-4945-9cdb-18644b4de043\",\n>             \"source_number\": \"+61491570157\",\n>             \"date_received\": \"2017-05-20T06:30:37.642Z\",\n>             \"status\": \"enroute\",\n>             \"delay\": 0,\n>             \"submitted_date\": \"2017-05-20T06:30:37.639Z\",\n>             \"original_text\": \"My first message!\",\n>             \"message_id\": \"d781dcab-d9d8-4fb2-9e03-872f07ae94ba\",\n>             \"vendor_account_id\": {\n>                 \"vendor_id\": \"MessageMedia\",\n>                 \"account_id\": \"MyAccount\"\n>             },\n>             \"metadata\": {\n>                 \"key1\": \"value1\",\n>                 \"key2\": \"value2\"\n>             }\n>         },\n>         {\n>             \"callback_url\": \"https://my.callback.url.com\",\n>             \"delivery_report_id\": \"0edf9022-7ccc-43e6-acab-480e93e98c1b\",\n>             \"source_number\": \"+61491570158\",\n>             \"date_received\": \"2017-05-21T01:46:42.579Z\",\n>             \"status\": \"enroute\",\n>             \"delay\": 0,\n>             \"submitted_date\": \"2017-05-21T01:46:42.574Z\",\n>             \"original_text\": \"My second message!\",\n>             \"message_id\": \"fbb3b3f5-b702-4d8b-ab44-65b2ee39a281\",\n>             \"vendor_account_id\": {\n>                 \"vendor_id\": \"MessageMedia\",\n>                 \"account_id\": \"MyAccount\"\n>             },\n>             \"metadata\": {\n>                 \"key1\": \"value1\",\n>                 \"key2\": \"value2\"\n>             }\n>         }\n>     ]\n> }\n> ```\n> Each delivery report will contain details about the message, including any metadata specified\n> and the new status of the message (as each delivery report indicates a change in status of a\n> message) and the timestamp at which the status changed. Every delivery report will have a \n> unique delivery report ID for use with the confirm delivery reports endpoint.\n> *Note: The source number and destination number properties in a delivery report are the inverse of\n> those specified in the message that the delivery report relates to. The source number of the\n> delivery report is the destination number of the original message.*\n> Subsequent requests to the check delivery reports endpoint will return the same delivery reports\n> and a maximum of 100 delivery reports will be returned in each request. Applications should use the\n> confirm delivery reports endpoint in the following pattern so that delivery reports that have been\n> processed are no longer returned in subsequent check delivery reports requests.\n> 1. Call check delivery reports endpoint\n> 2. Process each delivery report\n> 3. Confirm all processed delivery reports using the confirm delivery reports endpoint\n> *Note: It is recommended to use the Webhooks feature to receive reply messages rather than\n> polling the check delivery reports endpoint.*\n\n```python\ndef get_check_delivery_reports(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = delivery_reports_client.get_check_delivery_reports()\n\n```\n\n\n### <a name=\"create_confirm_delivery_reports_as_received\"></a>![Method: ](https://apidocs.io/img/method.png \".DeliveryReportsController.create_confirm_delivery_reports_as_received\") create_confirm_delivery_reports_as_received\n\n> Mark a delivery report as confirmed so it is no longer return in check delivery reports requests.\n> The confirm delivery reports endpoint is intended to be used in conjunction with the check delivery\n> reports endpoint to allow for robust processing of delivery reports. Once one or more delivery\n> reports have been processed, they can then be confirmed using the confirm delivery reports endpoint so they\n> are no longer returned in subsequent check delivery reports requests.\n> The confirm delivery reports endpoint takes a list of delivery report IDs as follows:\n> ```json\n> {\n>     \"delivery_report_ids\": [\n>         \"011dcead-6988-4ad6-a1c7-6b6c68ea628d\",\n>         \"3487b3fa-6586-4979-a233-2d1b095c7718\",\n>         \"ba28e94b-c83d-4759-98e7-ff9c7edb87a1\"\n>     ]\n> }\n> ```\n> Up to 100 delivery reports can be confirmed in a single confirm delivery reports request.\n\n```python\ndef create_confirm_delivery_reports_as_received(self,\n                                                    body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody_value = \"{    \\\"delivery_report_ids\\\": [        \\\"011dcead-6988-4ad6-a1c7-6b6c68ea628d\\\",        \\\"3487b3fa-6586-4979-a233-2d1b095c7718\\\",        \\\"ba28e94b-c83d-4759-98e7-ff9c7edb87a1\\\"    ]}\"\nbody = json.loads(body_value)\n\nresult = delivery_reports_client.create_confirm_delivery_reports_as_received(body)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | TODO: Add an error description |\n\n\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n## <a name=\"replies_controller\"></a>![Class: ](https://apidocs.io/img/class.png \".RepliesController\") RepliesController\n\n### Get controller instance\n\nAn instance of the ``` RepliesController ``` class can be accessed from the API Client.\n\n```python\n replies_client = client.replies\n```\n\n### <a name=\"create_confirm_replies_as_received\"></a>![Method: ](https://apidocs.io/img/method.png \".RepliesController.create_confirm_replies_as_received\") create_confirm_replies_as_received\n\n> Mark a reply message as confirmed so it is no longer returned in check replies requests.\n> The confirm replies endpoint is intended to be used in conjunction with the check replies endpoint\n> to allow for robust processing of reply messages. Once one or more reply messages have been processed\n> they can then be confirmed using the confirm replies endpoint so they are no longer returned in\n> subsequent check replies requests.\n> The confirm replies endpoint takes a list of reply IDs as follows:\n> ```json\n> {\n>     \"reply_ids\": [\n>         \"011dcead-6988-4ad6-a1c7-6b6c68ea628d\",\n>         \"3487b3fa-6586-4979-a233-2d1b095c7718\",\n>         \"ba28e94b-c83d-4759-98e7-ff9c7edb87a1\"\n>     ]\n> }\n> ```\n> Up to 100 replies can be confirmed in a single confirm replies request.\n\n```python\ndef create_confirm_replies_as_received(self,\n                                           body)\n```\n\n#### Parameters\n\n| Parameter | Tags | Description |\n|-----------|------|-------------|\n| body |  ``` Required ```  | TODO: Add a parameter description |\n\n\n\n#### Example Usage\n\n```python\nbody_value = \"{    \\\"reply_ids\\\": [        \\\"011dcead-6988-4ad6-a1c7-6b6c68ea628d\\\",        \\\"3487b3fa-6586-4979-a233-2d1b095c7718\\\",        \\\"ba28e94b-c83d-4759-98e7-ff9c7edb87a1\\\"    ]}\"\nbody = json.loads(body_value)\n\nresult = replies_client.create_confirm_replies_as_received(body)\n\n```\n\n#### Errors\n\n| Error Code | Error Description |\n|------------|-------------------|\n| 400 | TODO: Add an error description |\n\n\n\n\n### <a name=\"get_check_replies\"></a>![Method: ](https://apidocs.io/img/method.png \".RepliesController.get_check_replies\") get_check_replies\n\n> Check for any replies that have been received.\n> Replies are messages that have been sent from a handset in response to a message sent by an\n> application or messages that have been sent from a handset to a inbound number associated with\n> an account, known as a dedicated inbound number (contact <support@messagemedia.com> for more\n> information on dedicated inbound numbers).\n> Each request to the check replies endpoint will return any replies received that have not yet\n> been confirmed using the confirm replies endpoint. A response from the check replies endpoint\n> will have the following structure:\n> ```json\n> {\n>     \"replies\": [\n>         {\n>             \"metadata\": {\n>                 \"key1\": \"value1\",\n>                 \"key2\": \"value2\"\n>             },\n>             \"message_id\": \"877c19ef-fa2e-4cec-827a-e1df9b5509f7\",\n>             \"reply_id\": \"a175e797-2b54-468b-9850-41a3eab32f74\",\n>             \"date_received\": \"2016-12-07T08:43:00.850Z\",\n>             \"callback_url\": \"https://my.callback.url.com\",\n>             \"destination_number\": \"+61491570156\",\n>             \"source_number\": \"+61491570157\",\n>             \"vendor_account_id\": {\n>                 \"vendor_id\": \"MessageMedia\",\n>                 \"account_id\": \"MyAccount\"\n>             },\n>             \"content\": \"My first reply!\"\n>         },\n>         {\n>             \"metadata\": {\n>                 \"key1\": \"value1\",\n>                 \"key2\": \"value2\"\n>             },\n>             \"message_id\": \"8f2f5927-2e16-4f1c-bd43-47dbe2a77ae4\",\n>             \"reply_id\": \"3d8d53d8-01d3-45dd-8cfa-4dfc81600f7f\",\n>             \"date_received\": \"2016-12-07T08:43:00.850Z\",\n>             \"callback_url\": \"https://my.callback.url.com\",\n>             \"destination_number\": \"+61491570157\",\n>             \"source_number\": \"+61491570158\",\n>             \"vendor_account_id\": {\n>                 \"vendor_id\": \"MessageMedia\",\n>                 \"account_id\": \"MyAccount\"\n>             },\n>             \"content\": \"My second reply!\"\n>         }\n>     ]\n> }\n> ```\n> Each reply will contain details about the reply message, as well as details of the message the reply was sent\n> in response to, including any metadata specified. Every reply will have a reply ID to be used with the\n> confirm replies endpoint.\n> *Note: The source number and destination number properties in a reply are the inverse of those\n> specified in the message the reply is in response to. The source number of the reply message is the\n> same as the destination number of the original message, and the destination number of the reply\n> message is the same as the source number of the original message. If a source number\n> wasn't specified in the original message, then the destination number property will not be present\n> in the reply message.*\n> Subsequent requests to the check replies endpoint will return the same reply messages and a maximum\n> of 100 replies will be returned in each request. Applications should use the confirm replies endpoint\n> in the following pattern so that replies that have been processed are no longer returned in\n> subsequent check replies requests.\n> 1. Call check replies endpoint\n> 2. Process each reply message\n> 3. Confirm all processed reply messages using the confirm replies endpoint\n> *Note: It is recommended to use the Webhooks feature to receive reply messages rather than polling\n> the check replies endpoint.*\n\n```python\ndef get_check_replies(self)\n```\n\n#### Example Usage\n\n```python\n\nresult = replies_client.get_check_replies()\n\n```\n\n\n[Back to List of Controllers](#list_of_controllers)\n\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/messagemedia/messages-python-sdk",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://developers.messagemedia.com/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "messagemedia-messages-sdk",
    "package_url": "https://pypi.org/project/messagemedia-messages-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/messagemedia-messages-sdk/",
    "project_urls": {
      "Download": "https://github.com/messagemedia/messages-python-sdk",
      "Homepage": "https://developers.messagemedia.com/"
    },
    "release_url": "https://pypi.org/project/messagemedia-messages-sdk/1.1.0/",
    "requires_dist": [
      "requests (<3.0,>=2.9.1)",
      "jsonpickle (<1.0,>=0.7.1)",
      "cachecontrol (<1.0,>=0.11.7)",
      "python-dateutil (<3.0,>=2.5.3)"
    ],
    "requires_python": "",
    "summary": "The MessageMedia Messages API provides a number of endpoints for building powerful two-way messaging applications.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16878524,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48c6e966d10b22c3ef19fcb5bde5b8b9a2c9ef65dd3895bc6c5757e9a0f7415e",
        "md5": "c4a6f5df7cd90fdcf3095e21a13fd41c",
        "sha256": "c6ea6a22cbee736be31dcda8040ac39b9a622c481ad3fe461badd1ed5387e1c2"
      },
      "downloads": -1,
      "filename": "messagemedia_messages_sdk-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4a6f5df7cd90fdcf3095e21a13fd41c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 58724,
      "upload_time": "2017-12-05T05:04:50",
      "upload_time_iso_8601": "2017-12-05T05:04:50.249638Z",
      "url": "https://files.pythonhosted.org/packages/48/c6/e966d10b22c3ef19fcb5bde5b8b9a2c9ef65dd3895bc6c5757e9a0f7415e/messagemedia_messages_sdk-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf39d41bc4f65b91360811190021ff0a46ab53692dab00acdbc44e730a319c89",
        "md5": "1e9c5d8472d9a38e08a8ba2b3f6b8b44",
        "sha256": "7d7c3dfe51f7e6f1eabf9e1a8a8635c10e0b56ea13900a1bf8c5cd14e4eec176"
      },
      "downloads": -1,
      "filename": "messagemedia_messages_sdk-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1e9c5d8472d9a38e08a8ba2b3f6b8b44",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42385,
      "upload_time": "2017-12-05T05:04:52",
      "upload_time_iso_8601": "2017-12-05T05:04:52.043070Z",
      "url": "https://files.pythonhosted.org/packages/cf/39/d41bc4f65b91360811190021ff0a46ab53692dab00acdbc44e730a319c89/messagemedia_messages_sdk-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}