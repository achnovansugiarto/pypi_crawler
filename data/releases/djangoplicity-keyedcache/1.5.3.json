{
  "info": {
    "author": "Bruce Kroeze",
    "author_email": "brucek@ecomsmith.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "About\n-----\n\nDjangoplicity-keyedcache provides a simplified, speedy way to manage caching in Django apps.\n\nExample\n-------\nThe most frequent usage::\n\n    from keyedcache import cache_set, cache_get, NotCachedError\n    import keyedcache\n\n    # ... create come object\n    # cache it\n    cache_set(\"product\", 123, value=product)\n    cache_set(\"product\", 123, value=product, length=3600)  # different timeout\n    # ... delete it\n    # get it\n    try:\n        value = cache_get(\"product\", 123)\n    except NotCachedError:\n        value = None\n\n    # the syntax \"parameter=var\" does exactly the same as the previous:\n    try:\n        value = cache_get(product=123)\n    ....\n\n    # optional deleting\n    keyedcache.cache_delete('some.temporary.secret')\n\nThe reference documentation for these functions is their docs strings.\n\nAdvanced examples\n-----------------\nMore rare usage::\n\n    # it is better sometimes to call the internal function `cache_key` to\n    # combine complicated parameters to one key used multiple times.\n    cachekey = keyedcache.cache_key('SHIP_company', \\\n            weight=str(weight), country=country.code, zipcode=zipcode)\n    try:\n        value = cache_get(cachekey)\n    except NotCachedError:\n        value = None\n    if value == None:\n        value = ...long running function...\n        cache_set(cachekey, value=value)\n        log.info('message %s', cachekey)\n\n    ...\n\n    # Mixin - for models.py - simplified caching for some model\n    class MyNewModel(models.Model, keyedcache.CachedObjectMixin):\n        # some Fields...\n\n        # we can easy cache saving of all objects without writing the keys\n        def save(self):\n            # ... do somehting\n            self.cache_delete()\n            super(MyNewModel, self).save()\n            self.cache_set()\n            return self\n\n\nCached function\n---------------\n\nAll values of any slow function evaluated in the future can be cached transparently::\n\n    import keyedcache\n    from time import sleep\n\n    def nearest_restaurant(gps_x, gps_y):\n       sleep(3)   # internet\n       return 'Havana Road' if (gps_x -3) ** 2 + (gps_y - 6) ** 2 <= 1 else 'unknown'\n\n    cached_restaurant = keyedcache.cache_function(60)(nearest_restaurant)\n    print cached_restaurant( 2, 6)  # slow\n    print cached_restaurant(-3, 4)  # slow\n    print cached_restaurant( 2, 6)  # fast\n    keyedcache.cache_delete_function(nearest_restaurant)\n    print cached_restaurant( 2, 6)  # slow\n\nOptimizing to prevent concurrent multiple calculation of the same function\nvalue by concurrent processes is the main reason, why keyedcache is more\ncomplicated than could be expected.\n\n\nAdditional first-level caching\n------------------------------\n\nIf you want first to cache the values temporary in the memory during one request\nbefore the normal django cache::\n\n    from keyedcache import threaded\n    threaded.start_listening()\n\nThis should be safe also with multithreading.\n\n\nCache backend alias\n-------------------\n\nThe backend used by cache can be selected by settings variable `KEYEDCACHE_ALIAS`\nif the project uses more backends. The default is 'default'.\n\nWeb interface\n-------------\n\nCache statistics, cached keys and deleting the cache can be accessed by running the dev\nserver in the test_app directory and going to settings http://127.0.0.1:8000/cache/.\n\n(Urls of in keyedcache are usually mapped to \"/cache\" by the main application.)\nThe web intergace is for debugging purposes and usage with debug server.\nIf the server is running in production with multiple worker processes,\nthe information provided by the web interface is incomplete. The access\nto the web interface requires \"is_staff\" permissions.\n\nRequirements\n------------\n\nPython 2.5, 2.6 or 2.7; Django 1.4 or 1.5\n\n(optional) If you want to use the threaded first-level cache, you need to install `threaded_multihost`_.\n\nIt is recommended to set a 'KEY_PREFIX' to any unique string in your settings.py file.\nFor production caches or for sites with different values SITE_ID it is even obligatory.\nThis allows you to avoid collisions when running more than one site with the same backend.\nAn easy solution is `CACHES = {'defalt': {... 'KEY_PREFIX': str(settings.SITE_ID)}}`.\n\n.. _`threaded_multihost`: http://bitbucket.org/bkroeze/django-threaded-multihost/\n\nRelease notes\n-------------\nver. 1.5.0\n\n* The cache configuration is made compatible with current versions of Django.\n\nIt is currently configured by the varible CACHES. The variable CACHE_PREFIX\nis currently obsoleted \nCACHES.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/djangoplicity/djangoplicity-keyedcache/archive/refs/tags/1.5.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djangoplicity/djangoplicity-keyedcache",
    "keywords": "",
    "license": "New BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangoplicity-keyedcache",
    "package_url": "https://pypi.org/project/djangoplicity-keyedcache/",
    "platform": "any",
    "project_url": "https://pypi.org/project/djangoplicity-keyedcache/",
    "project_urls": {
      "Download": "https://github.com/djangoplicity/djangoplicity-keyedcache/archive/refs/tags/1.5.3.tar.gz",
      "Homepage": "https://github.com/djangoplicity/djangoplicity-keyedcache"
    },
    "release_url": "https://pypi.org/project/djangoplicity-keyedcache/1.5.3/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "keyedcache",
    "version": "1.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12547341,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0290ef0def350ab62fde38de1c11ca6a87b4e9d1f413cab38d241d7555dfc2bc",
        "md5": "65404d1ef4168ca49fb40fb776958b45",
        "sha256": "ef106edb0eaea9b20e82896821b100f3b2d559fb84acff3446b17562e7b2f052"
      },
      "downloads": -1,
      "filename": "djangoplicity_keyedcache-1.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65404d1ef4168ca49fb40fb776958b45",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30904,
      "upload_time": "2022-01-12T04:29:56",
      "upload_time_iso_8601": "2022-01-12T04:29:56.353356Z",
      "url": "https://files.pythonhosted.org/packages/02/90/ef0def350ab62fde38de1c11ca6a87b4e9d1f413cab38d241d7555dfc2bc/djangoplicity_keyedcache-1.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcb8e24dc9340ea210b9c1c52398c1ea2806ffe1b5bfa3f25cf4222849f5e5a8",
        "md5": "717a1e3ff652ceb72eabd268831c4c02",
        "sha256": "9a27e7850f117ab77de93ba1471f245483509aab76d2a63788ad4a7018d87ab5"
      },
      "downloads": -1,
      "filename": "djangoplicity-keyedcache-1.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "717a1e3ff652ceb72eabd268831c4c02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17940,
      "upload_time": "2022-01-12T04:29:57",
      "upload_time_iso_8601": "2022-01-12T04:29:57.975762Z",
      "url": "https://files.pythonhosted.org/packages/fc/b8/e24dc9340ea210b9c1c52398c1ea2806ffe1b5bfa3f25cf4222849f5e5a8/djangoplicity-keyedcache-1.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}