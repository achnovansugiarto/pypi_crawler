{
  "info": {
    "author": "Lucas Weyne",
    "author_email": "weynelucas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# Django DB adapter\n\n[![Test](https://github.com/weynelucas/django-db-adapter/actions/workflows/test.yml/badge.svg)](https://github.com/weynelucas/django-db-adapter/actions/workflows/test.yml)\n[![Package](https://github.com/weynelucas/django-db-adapter/actions/workflows/deploy.yml/badge.svg)](https://github.com/weynelucas/django-db-adapter/actions/workflows/deploy.yml)\n[![codecov](https://codecov.io/gh/weynelucas/django-db-adapter/branch/master/graph/badge.svg?token=EZyTLmsPhm)](https://codecov.io/gh/weynelucas/django-db-adapter)\n[![PyPI - Release](https://img.shields.io/pypi/v/django-db-adapter.svg)](https://pypi.python.org/pypi/django-db-adapter)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-db-adapter)](https://pypi.python.org/pypi/django-db-adapter)\n[![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-db-adapters)](https://pypi.python.org/pypi/django-db-adapter)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA flexible toolkit for customize how Django creates the databse objects for the\napplication schema\n\n# Overview\nDjango DB adapter is a flexible schema editor backend built to solve the following problems:\n\n- Generate SQL statements for projects working on database-first approach\n- All objects created (including created from Django) must have a particular name pattern, like add prefixes and suffixes\n- All table columns should be commented\n- Inline constraints (primary/foreign keys, unique/check constraints and indexes) are not allowed\n- The database user of application is not the owner of the objects and has no privilege to create/alter/drop them (`python manage.py migrate` will not work for this user). All DDL statements generated should include a grant of manipulation privileges (select/insert/update/delete) on created objects for this user/role\n- The order of SQL statements matters\n\n\n# Requirements\n- Python (3.6, 3.7, 3.8, 3.9)\n- Django (1.11, 2.2)\n\n\nWe highly recommend and only officially support the latest patch release of each Python and Django series.\n\n# Installation\nInstall using `pip`...\n\n```bash\npip install django-db-adapter\n```\n\nAdd `'db_adapter'` to your `INSTALLED_APPS` setting.\n\n```python\nINSTALLED_APPS = [\n    ...\n    'db_adapter',\n]\n```\n\n\n# Quick Example\nLet's take a look at a quick example of using DB adapter to customize the DDL\nstatements generated by Django.\n\nThis example model defines a `Person`, which has a `first_name` and `last_name`:\n\n```python\nfrom django.db import models\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n\n    class Meta:\n        db_table = 'person'\n```\n\nAdd the following to your `settings.py` module:\n\n```python\nINSTALLED_APPS = [\n    ...  # Make sure to include the default installed apps here.\n    'db_adapter',\n]\n\nDATABASES = {\n    'default': {\n        # Make sure to include `db_adapter.db.backends.oracle` as database\n        # engine for schema customization\n        'ENGINE': 'db_adapter.db.backends.oracle',\n        'NAME': 'xe',\n        'USER': 'a_user',\n        'PASSWORD': 'a_password',\n        'HOST': 'dbprod01ned.mycompany.com',\n        'PORT': '1540',\n    }\n}\n\nDB_ADAPTER = {\n    'DEFAULT_ROLE_NAME': 'rl_example',\n    # Apply this pattern for all tables\n    'DEFAULT_DB_TABLE_PATTERN': '\"example\".\"tb_{table_name}\"',\n    # Ignore some patterns from normalization\n    'IGNORE_DB_TABLE_PATTERNS': [\n        '\"{}\".\"{}\"', # Tables with already declared namespace\n        'django_migrations', # Django migrations table\n    ],\n    'DEFAULT_OBJECT_NAME_PATTERNS': {\n        'SEQUENCE': 'sq_{table_name}',\n        'TRIGGER': 'tg_{table_name}_b',\n        'INDEX': 'ix_{name}',\n        'PRIMARY_KEY': 'cp_{name}',\n        'FOREIGN_KEY': 'ce_{name}',\n        'UNIQUE': 'ct_{name}_uq',\n        'CHECK': 'ct_{name}{qualifier}',\n    },\n    'SQL_FORMAT_OPTIONS': {\n        'unquote': True,\n        'identifier_case': 'lower',\n        'keyword_case': 'lower',\n    },\n    # Order of SQL statements\n    'SQL_STATEMENTS_ORDER': [\n        'PRIMARY_KEY',\n        'UNIQUE',\n        'FOREIGN_KEY',\n        'CHECK',\n        'INDEX',\n        'COMMENT',\n        'CONTROL', # Grant/revoke table privileges for specified role (if exists)\n        'AUTOINCREMENT', # Sequence and triggers for auto-incremented fields\n    ]\n}\n```\n\nThe above `Person` model would create a database table like this:\n\n```sql\ncreate table example.tb_person (\n    id number(11),\n    first_name nvarchar2(30),\n    last_name nvarchar2(30)\n);\n/\n\nalter table example.tb_person\n    add constraint cp_person_id\n    primary key (id);\n/\n\nalter table example.tb_person\n    add constraint ct_person_id_nn\n    check (id is not null);\n/\n\nalter table example.tb_person\n    add constraint ct_person_first_name_nn\n    check (first_name is not null);\n/\n\nalter table example.tb_person\n    add constraint ct_person_last_name_nn\n    check (last_name is not null);\n/\n\ngrant select, insert, update, delete\n    on example.tb_person\n    to rl_example;\n/\n\ncreate sequence example.sq_person\n    minvalue 1\n    maxvalue 99999999999\n    start with 1\n    increment by 1\n    cache 20;\n/\n\ngrant select\n    on example.sq_person\n    to rl_example;\n/\n\ncreate or replace trigger example.tg_person_b\nbefore insert on example.tb_person\nfor each row\nwhen (new.id is null)\n    begin\n        select example.sq_person.nextval\n        into :new.id from dual;\n    end;\n/\n```\n\n# Release notes\n\n- `v1.0.0` - 16/04/2018 - First release\n- `v1.0.1` - 16/04/2018 - Rename package and fix setup issues\n- `v1.0.2` - 17/04/2018 - Fix documentation preview\n- `v2.0.0` - 01/03/2021 - Recreate the entire schema editor backend with more flexible features\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/weynelucas/django-db-adapter/archive/2.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/weynelucas/django-db-adapter/",
    "keywords": "django database schema editor oracle django-db-adapter",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-db-adapter",
    "package_url": "https://pypi.org/project/django-db-adapter/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-db-adapter/",
    "project_urls": {
      "Download": "https://github.com/weynelucas/django-db-adapter/archive/2.0.0.tar.gz",
      "Homepage": "https://github.com/weynelucas/django-db-adapter/"
    },
    "release_url": "https://pypi.org/project/django-db-adapter/2.0.0/",
    "requires_dist": [
      "parse (>=1.19)",
      "sqlparse (>=0.2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A flexible toolkit for customize how Django creates the databse objects for the application schema",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9844026,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18f0563aa5c33d6f3a27f39300af4c05645530c098630335f991dfe97e39843c",
        "md5": "129b3caf78e1f2968b0f675a1f6d66c4",
        "sha256": "b366eabd7df7e18ba799a2e708ffed473a591f1a1e1e03e068da4346e4f7b69d"
      },
      "downloads": -1,
      "filename": "django_db_adapter-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "129b3caf78e1f2968b0f675a1f6d66c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15556,
      "upload_time": "2021-03-01T16:57:56",
      "upload_time_iso_8601": "2021-03-01T16:57:56.106876Z",
      "url": "https://files.pythonhosted.org/packages/18/f0/563aa5c33d6f3a27f39300af4c05645530c098630335f991dfe97e39843c/django_db_adapter-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21e9a9827d01c9bb651a16e47d7400b2b0e2edd89b9c91eabe48a3ea6a6b555d",
        "md5": "d2ee0eadbe8a0e330df329e9e3fb2727",
        "sha256": "7677d9f2ba557588a69389d3b3131da350b9253b5760565fe9ae79a481f757af"
      },
      "downloads": -1,
      "filename": "django-db-adapter-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d2ee0eadbe8a0e330df329e9e3fb2727",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14317,
      "upload_time": "2021-03-01T16:58:02",
      "upload_time_iso_8601": "2021-03-01T16:58:02.374916Z",
      "url": "https://files.pythonhosted.org/packages/21/e9/a9827d01c9bb651a16e47d7400b2b0e2edd89b9c91eabe48a3ea6a6b555d/django-db-adapter-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}