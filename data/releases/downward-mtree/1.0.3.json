{
  "info": {
    "author": "Max Feltes",
    "author_email": "contact@feltes.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# D-MTree (Downward-MTree)\n\nThis library implements a datastructure very similar to the MTree datastructure in pure python (for more information, see https://en.wikipedia.org/wiki/M-tree)\n\nThe main difference is that the split of a NonLeafNode (inner node) will not propagate to the parent node, but instead \ncreates a new subtree with the two closest routing objects as descendants. \n* This has the advantage that the covering-radii of the NonLeafNodes have the least overlap.\n* The disadvantage is that if the points are added in an unlucky order, the depth of the tree can grow very fast!\n\n\n## Usage\n\n```python\ndef distance(p1, p2):\n    return abs(p1 - p2)\n\ndmtree = DMTree(distance_measure=distance, leaf_node_capacity=10, inner_node_capacity=5)\n\n# inserting 1000 values with equal identifier:\nfor i in range(1000):\n    dmtree.insert(identifier=i, value=i)     \n\n# search in radius and order them by distance (ascending):\nelements = dmtree.find_in_radius(value=50.5, radius=1)\n\n# find the 10 nearest neighbours and order them by distance (ascending):\n# the parameter 'truncate' decides if the results is trimmed to exactly k if there are multiple elements with the same distance\nelements = dmtree.knn(value=50.5, k=10, truncate=True)\n\n# deleting entries\nfor identifier in range(1000):\n    dmtree.remove(identifier)\n```\n* identifier should be a datatype that can be compared with ==, <=, >=, <, >\n* mtree.knn(value, k, truncate=True) is equal to mtree.knn(value, k, truncate=False)[:k]\n\n## Parameters\n| Parameter                 | Description                                                                           | \n| -------------:            |:-------------                                                                         | \n| distance_measure          | Custom distance method that fulfills the  triangle inequality                         | \n| leaf_node_capacity        | The number of children a NonLeafNode can hold before it is split (>=2) Default=50     |  \n| inner_node_capacity       | The number of objects a LeafNode can hold before it is split  (>=2)  Default=20       |\n| split_method              | The algorithm that splits overflowing LeafNodes Default='max_distance'                |    \n\n## Split methods\n| Parameter                 | Description                                                                           | \n| -------------:            |:-------------                                                                         | \n| random        | Choose two random elements of the LeafNode as new routing objects                                 | \n| min_sum_radii | Choose the two elements of the LeafNode that minimizes the sum of the resulting radii             |  \n| max_distance  | Choose the two elements of the LeafNode that maximizes the distance between the routing values    |\n\n## Best practice\n* When inserting the values, do so in a randomized order, or the resulting tree can very quickly become heavily unbalanced\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Napolei/dmtree",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "downward-mtree",
    "package_url": "https://pypi.org/project/downward-mtree/",
    "platform": "",
    "project_url": "https://pypi.org/project/downward-mtree/",
    "project_urls": {
      "Homepage": "https://github.com/Napolei/dmtree"
    },
    "release_url": "https://pypi.org/project/downward-mtree/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A variant of MTrees, where NonLeafNodes do not propagate splits to the parent, but combine routing objects downwards",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8550270,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc89f680019dd9f7f68d7950a325115867a23ecf007afba995d35d96593e4e3c",
        "md5": "671122c61978501dc99144233ee3928a",
        "sha256": "a0b8080187497ed0d57a16ae994fa2ca6ae432a32e18bd4b235450303fff7fe6"
      },
      "downloads": -1,
      "filename": "downward_mtree-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "671122c61978501dc99144233ee3928a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8299,
      "upload_time": "2020-10-03T17:09:42",
      "upload_time_iso_8601": "2020-10-03T17:09:42.670777Z",
      "url": "https://files.pythonhosted.org/packages/fc/89/f680019dd9f7f68d7950a325115867a23ecf007afba995d35d96593e4e3c/downward_mtree-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}