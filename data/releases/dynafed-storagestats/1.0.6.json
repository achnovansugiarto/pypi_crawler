{
  "info": {
    "author": "Fernando Fernandez Galindo",
    "author_email": "ffernandezgalindo@triumf.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dynafed_storagestats\n\nModule to interact with UGR's configuration files in order to obtain\nstorage status information from various types of endpoints and upload the\ninformation to memcache. It leverage's UGR's connection check that it uploads\nto memcache to skip any endpoints it has detected as being \"Offline\". (If\nthis information is not found, it is ignored and all endpoints are contacted)\n\nSo far it supports has been tested with:\n- Azure Storage Blob\n- AWS S3\n- Ceph S3\n- Minio S3\n- DPM via WebDAV\n- dCache via WebDAV\n\n## Installation\n\nLinux:\n\n```sh\npip3 install .\n```\nThis will install all necessary dependencies and create the executable\n'/usr/bin/dynafed-storage'\n\n### CentOS / SL 6\n\nPython 3.4 is available from EPEL repository.\n\nIn order to install the above modules in python 3, pip3 needs to be setup. Since\nit is not in the repos, run the following command:\n\n```bash\nsudo  python3 /usr/lib/python3.4/site-packages/easy_install.py pip\n```\n\n## Usage\n\nThis module is intended to be run periodically as a cron job, make sure the\nuser that runs it is able to read UGR's configuration files.\n\nIt has two sub commands:\n-stats: Contacts each storage endpoint, obtains available stats and outputs\nthem according settings.\n-reports: In development, nothing at the moment but ideally will be used to\ncreate file lists and stats reports in formats according to experiment's needs.\n\nFirst run with the following flags:\n\n```bash\ndynafed-storage stats -c /etc/ugr/conf.d --stdout -m -v\n```\n\nThis will printout any warnings and errors as they are encountered as well as\nthe information obtained from each of the endpoints. If you need more information\nabout the errors consider adding the \"--debug\" flag which will print more\ninformation at the end of each endpoint's stats. If you still need more,\nchange the --loglevel to INFO or DEBUG, just be warned DEBUG might print a lot\nof information.\n\nIt is recommended to create a directory for the logfile, such as\n\"/var/log/dynafed_storagestats/dynafed_storagestats.log\", as the default is\n\"/tmp/dynafed_storagestats.log\".\n\nWhen everything looks to be setup as desired, setup cron to run the following\n(add any other options that make sense to your site).\n\n```bash\ndynafed-storage stats -c /etc/ugr/conf.d -m --loglevel=WARNING --logfile='/var/log/dynafed_storagestats/dynafed_storagestats.log'\n```\n\nTo get help:\n```bash\ndynafed-storage -h\nusage: dynafed-storage [-h] [-v] [--logfile LOGFILE]\n                            [--loglevel {DEBUG,INFO,WARNING,ERROR}]\n                            {stats,reports} ...\n\npositional arguments:\n  {stats,reports}       sub-command help\n    stats               Subcommand to contact StorageEndpoints and output\n                        stats.\n    reports             Subcommand to generate reports.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Show on stderr events according to loglevel.\n\n```\n\n```bash\ndynafed-storage stats -h\nusage: dynafed-storage stats [-h] [-c [CONFIG_PATH [CONFIG_PATH ...]]]\n                                  [-e ENDPOINT] [--memhost MEMCACHED_IP]\n                                  [--memport MEMCACHED_PORT] [--debug] [-m]\n                                  [-j [TO_JSON]] [-o OUTPUT_PATH]\n                                  [-p [TO_PLAINTEXT]] [--stdout]\n                                  [-x [OUTPUT_XML]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c [CONFIG_PATH [CONFIG_PATH ...]], --config [CONFIG_PATH [CONFIG_PATH ...]]\n                        Path to UGRs endpoint .conf files or directories.\n                        Accepts any number of arguments. Default:\n                        '/etc/ugr/conf.d'.\n  -e ENDPOINT, --endpoint ENDPOINT\n                        Choose endpoint to check. If not present, all\n                        endpoints will be checked.\nLogging options:\n  --logfile LOGFILE     Set logfile path. Default:\n                        /tmp/dynafed_storagestats.log\n  --loglevel {DEBUG,INFO,WARNING,ERROR}\n                        Set log output level. Default: WARNING.\n\nMemcached Options:\n  --memhost MEMCACHED_IP\n                        IP or hostname of memcached instance.Default:\n                        127.0.0.1\n  --memport MEMCACHED_PORT\n                        Port of memcached instance. Default: 11211\n\nOutput options:\n  --debug               Declare to enable debug output on stdout.\n  -m, --memcached       Declare to enable uploading storage stats to\n                        memcached.\n  -j [TO_JSON], --json [TO_JSON]\n                        Set to output json file with storage stats. !!In\n                        development!!\n  -o OUTPUT_PATH, --output OUTPUT_PATH\n                        Directory or file to output storage stat files.\n                        Default: /tmp/dynafed_storagestats.json\n  -p [TO_PLAINTEXT], --plain [TO_PLAINTEXT]\n                        Set to output stats to plain txt file.\n  --stdout              Set to output stats on stdout.\n  -x [OUTPUT_XML], --xml [OUTPUT_XML]\n                        Set to output xml file with StAR format. !!In\n                        development!!\n```\n**Important Note: DEBUG level might print an enormous amount of data as it will\nlog the contents obtained from requests. In the case of the generic methods this\nwill print all the stats for each file being parsed. It is recommended to use\nthis level with only the endpoint one wants to troubleshoot.**\n\n## Endpoints Configuration\n\nIn order to use the correct methods for each storage type some settings should\nbe added to the endpoints.conf configuration file.\n\n### Known issues\n\n:)\n\n### General\n\n```\nlocplugin.<ID>.storagestats.quota: [api, 1b|mb|gb|tb|pb|mib|gib|tib|pib]\n```\n\nIf this setting is missing, the script will try to get the quota from the endpoint\nusing the relevant API. Failing this, a default quota of 1TB will used.\n\n##### api\nWill try to obtain the quota from the storage endpoint. If that fails a default\nof 1TB will be used.\n\n##### bytes\nThe quota can be specify in bytes, megabytes, mebibytes, etc. Lower or uppercase.\n\n### Azure\n\n```\nlocplugin.<ID>.storagestats.api: [list-blobs]\n```\n\n##### list-blobs (deprecated: generic)\n\nThis setting will list all objects in a blob container and add the individual\nsizes.\nEach GET request obtains 5,000 objects. Therefore 10,005 objects cost 3 GET's.\n\n### DAV/HTTP\n\n```\nlocplugin.<ID>.storagestats.api: [list-files, rfc4331]\n```\n\n##### list-files (deprecated: generic)\n\nThis setting will list all objects behind the endpoint and add the individual\nsizes. For this method to recursively get all objects, the DAV server needs\nto header \"Depth\" with attribute \"infinity\". This is not recommended as\nit is an expensive method, can use a lot of memory and is susceptible to\ndenial of service. Therefore this setting should be avoided if possible in\nfavour of rfc4331\n\n##### rfc4331\n\nThis setting will query the DAV server according to [RFC4331](https://tools.ietf.org/html/rfc4331).\n\n### S3\n\n```\nlocplugin.<ID>.storagestats.api: [list-objects, ceph-admin, cloudwatch]\n```\n\n##### list-objects (deprecated: generic)\n\nThis setting will list all objects behind the bucket and add the individual\nsizes.\nEach GET request obtains 1,000 objects. Therefore 2,005 objects cost 3 GET's.\n\n##### ceph-admin\n\nUse this setting if Ceph's Admin API is to be used. The credentials of the\nconfigured user should have the \"bucket read\" caps enabled.\n\n##### cloudwatch\n\nFor AWS. Configure the cloudwatch metrics BucketSizeBytes and  NumberOfObjects.\nThis setting will poll these two. These metrics are updated daily at 00:00 UTC.\nRead AWS's documentation for more information about Cloudwatch.\n\n```\nlocplugin.<ID>.s3.signature_ver: [s3, s3v4]\n```\nMost S3 endpoints should use the s3v4 signature auth version, and is used as\ndefault, but use s3 in case is needed.\n\n## How it works\n\n[Simple Flowchart](doc/diagrams/dynafed_storagestats_flowchart.pdf)\n\nWhen run the main function will read every configuration file in the directory\ngiven by the user (which defaults to /etc/ugr/conf.d), and will identify all the\ndifferent endpoints with their respective settings and authorization credentials.\n\nA python object belonging to a subclass of StorageStats, depending on the protocol\nto be used, is created for each endpoint containing all the settings and\nmethods necessary to request and process storage stats and quota information.\n\nMemcache is contacted to look for UGR's endpoint connection stats. Any endpoints\nflagged as \"Offline\" here will be skipped and flagged this will be informed in\nthe output. For those that are \"Online\", or if they could not be found to have\ninformation will be contacted to obtain the storage stats. The information is\nthen stored a dictionary attribute \"stats\" in each object.\n\nThe stats can then be output either to a memcache instance or the STDOUT,\ndepending on the options chosen when invoking this script.\n\n## Warning/Error Codes\n\nKeyword/Setting | Status Code\n--------------- | -----------\nUnknown General Warning/Error | 000\nUnknown/Invalid setting error | 001\nNo Config Files / ID Mismatch | 002\n**General Settings/DAV Plugin** |\ncli_certificate | 003\ncli_private_key | 004\nconn_timeout | 005\nssl_check | 006\nInvalid URL Schema | 008\nUnsupported Plugin | 009\n**Azure Plugin** |\nazure.key | 010\n**S3 Plugin** |\ns3.alternate | 020\ns3.priv_key | 021\ns3.pub_key | 022\ns3.region | 023\ns3.signature_ver | 024\n**Storage Stats Scripts Settings** |\nstoragestats.api | 070\nstoragestats.quota | 071\n**Memcached Warning/Errors** |\nUnknown | 080\nMemcached Connection | 081\nMemcached Index | 082\n**StorageStats Connection Warning/Errors** |\nUnknown | 090\nClient Certificate Path | 091\nServer SSL Validation | 092\nBoto Param Validation Error | 095\nRFC4331 DAV Quota Method Not Supported | 096\nNo Quota Given by Endpoint | 098\nCeph S3 Bucket Quota Disabled | 099\nConnection Error | 400\nElement/Bucket/Blob not found | 404\nEndpoint Offline | 503\n\n## Development setup\n\nTo install in \"edit\" mode, add the \"-e\" flag to pip3. This installs the package\nas a symlink to the source code, so any changes made are reflected automatically\nwhen running the executable.\n\n```bash\npip3 install -e .\n```\n\n## Meta\n\nFernando Fernandez – ffernandezgalindo@triumf.ca\n\nDistributed under the Apache license. See [``LICENSE``](LICENSE) for more information.\n\n[https://github.com/hep-gc/dynafed_storagestats](https://github.com/hep-gc/dynafed_storagestats)\n\n## Contributing\n\n<!-- Markdown link & img dfn's -->\n[wiki]: https://github.com/hep-gc/dynafed_storagestats/wiki\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hep-gc/dynafed_storagestats",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynafed-storagestats",
    "package_url": "https://pypi.org/project/dynafed-storagestats/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynafed-storagestats/",
    "project_urls": {
      "Homepage": "https://github.com/hep-gc/dynafed_storagestats"
    },
    "release_url": "https://pypi.org/project/dynafed-storagestats/1.0.6/",
    "requires_dist": [
      "azure-storage",
      "boto3",
      "lxml",
      "python-memcached",
      "requests",
      "requests-aws4auth"
    ],
    "requires_python": "~=3.4",
    "summary": "Dynafed Storage Stats Module",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12032299,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df046783572e866987bc1ca2a52f6725e6bf757012b9d8fcbea4b17ad27ed958",
        "md5": "012382145c3e2543c70b95db52492bb4",
        "sha256": "4633ce0e2694d3b20a41acdb0a66f4eeaf33b895d2182685144fb10170d802cd"
      },
      "downloads": -1,
      "filename": "dynafed_storagestats-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "012382145c3e2543c70b95db52492bb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.4",
      "size": 42391,
      "upload_time": "2018-12-20T21:29:16",
      "upload_time_iso_8601": "2018-12-20T21:29:16.745823Z",
      "url": "https://files.pythonhosted.org/packages/df/04/6783572e866987bc1ca2a52f6725e6bf757012b9d8fcbea4b17ad27ed958/dynafed_storagestats-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "558a14bf51414dd665528f77604d8c720833bc7d9de82c6d15f52b7207ac2860",
        "md5": "a2bf4912bf6d6dd78bd4ccf9a3311ae0",
        "sha256": "2e48bed72c35bd88a42af719864d31d8ab3c8806b33a6628081bcbb9c1860702"
      },
      "downloads": -1,
      "filename": "dynafed_storagestats-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a2bf4912bf6d6dd78bd4ccf9a3311ae0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.4",
      "size": 34211,
      "upload_time": "2018-12-20T21:29:18",
      "upload_time_iso_8601": "2018-12-20T21:29:18.966954Z",
      "url": "https://files.pythonhosted.org/packages/55/8a/14bf51414dd665528f77604d8c720833bc7d9de82c6d15f52b7207ac2860/dynafed_storagestats-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}