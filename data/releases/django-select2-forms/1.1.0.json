{
  "info": {
    "author": "Frankie Dintino",
    "author_email": "fdintino@theatlantic.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "django-select2-forms\n====================\n\n**django-select2-forms** is a project that makes available Django form fields that\nuse the `Select2 javascript plugin <http://ivaynberg.github.io/select2/>`_. It was\ncreated by developers at `The Atlantic <http://www.theatlantic.com/>`_.\n\nInstallation\n------------\n\nThe recommended way to install with pip::\n\n    pip install django-select2-forms\n\nor, to install with pip `from source <https://github.com/theatlantic/django-select2-forms>`_::\n\n    pip install -e git+git://github.com/theatlantic/django-select2-forms.git#egg=django-select2-forms\n\nIf the source is already checked out, use setuptools::\n\n    python setup.py develop\n\nUsage\n-----\n\nThe simplest way to use ``django-select2-forms`` is to use ``select2.fields.ForeignKey`` and ``select2.fields.ManyToManyField`` in place of ``django.db.models.ForeignKey`` and ``django.db.models.ManyToManyField``, respectively. These fields extend their django equivalents and take the same arguments, along with extra optional keyword arguments.\n\nselect2.fields.ForeignKey examples\n..................................\n\nIn the following two examples, an \"entry\" is associated with only one author. The example below does not use ajax, but instead performs autocomplete filtering on the client-side using the ``<option>`` elements (the labels of which are drawn from ``Author.__unicode__()``) in an html ``<select>``.\n\n::\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n\n        def __unicode__(self):\n            return self.name\n\n    class Entry(models.Model):\n        author = select2.fields.ForeignKey(Author,\n            overlay=\"Choose an author...\")\n\n\nThis more advanced example autocompletes via ajax using the ``Author.name`` field and limits the autocomplete search to ``Author.objects.filter(active=True)``\n\n::\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n        active = models.BooleanField()\n\n    class Entry(models.Model):\n        author = select2.fields.ForeignKey(Author,\n            limit_choices_to=models.Q(active=True),\n            ajax=True,\n            search_field='name',\n            overlay=\"Choose an author...\",\n            js_options={\n                'quiet_millis': 200,\n            })\n\n\nselect2.fields.ManyToManyField examples\n.......................................\n\nIn the following basic example, entries can have more than one author. This\nexample does not do author name lookup via ajax, but populates ``<option>`` elements in a ``<select>`` with ``Author.__unicode__()`` for labels.\n\n::\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n\n        def __unicode__(self):\n            return self.name\n\n    class Entry(models.Model):\n        authors = select2.fields.ManyToManyField(Author)\n\n\nThe following \"kitchen sink\" example allows authors to be ordered, and uses ajax to autocomplete on two variants of an author's name.\n\n::\n\n    from django.db import models\n    from django.db.models import Q\n    import select2.fields\n    import select2.models\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n        alt_name = models.CharField(max_length=100, blank=True, null=True)\n\n    class EntryAuthors(select2.models.SortableThroughModel):\n        \"\"\"\n        A custom m2m through table, with a ``position`` field for sorting.\n\n        This allows us to store and retrieve an ordered list of authors for an entry.\n        \"\"\"\n        entry = models.ForeignKey('Entry')\n        author = models.ForeignKey(Author)\n        position = models.PositiveSmallIntegerField()\n\n    class Entry(models.Model):\n        categories = select2.fields.ManyToManyField(Author,\n            through='EntryAuthors',\n            ajax=True,\n            search_field=lambda q: Q(name__icontains=q) | Q(alt_name__icontains=q),\n            sort_field='position',\n            js_options={'quiet_millis': 200})\n\nAPI Documentation\n-----------------\n\n`Read API documentation on github <https://github.com/theatlantic/django-select2-forms#api-documentation>`_\n\nLicense\n-------\n\nThe django code is licensed under the\n`Simplified BSD License <http://opensource.org/licenses/BSD-2-Clause>`_ and\nis copyright The Atlantic Media Company. View the `LICENSE <https://github.com/theatlantic/django-select2-forms/blob/master/LICENSE>`_ file under the\nroot directory for complete license and copyright information.\n\nThe Select2 javascript library included is licensed under the\n`Apache Software Foundation License Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\nView the file `select2/static/select2/select2/LICENSE <https://github.com/theatlantic/django-select2-forms/blob/master/select2/static/select2/select2/LICENSE>`_ for complete license\nand copyright information about the Select2 javascript library.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/theatlantic/django-select2-forms",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-select2-forms",
    "package_url": "https://pypi.org/project/django-select2-forms/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-select2-forms/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/theatlantic/django-select2-forms"
    },
    "release_url": "https://pypi.org/project/django-select2-forms/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django form fields using the Select2 jQuery plugin",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10725299,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0aacf4cc663bf1b5cca54f676524b12851d8cdde5d28112702db18d827489f7a",
        "md5": "da1f2ac71a56d34a49a7fe47a050a7b3",
        "sha256": "5761cb999fe77b6dacd3759327fd98a3dd92e0c49274cbb523d8a3b4d9e7cbdc"
      },
      "downloads": -1,
      "filename": "django-select2-forms-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da1f2ac71a56d34a49a7fe47a050a7b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2191221,
      "upload_time": "2013-06-21T22:44:22",
      "upload_time_iso_8601": "2013-06-21T22:44:22.370965Z",
      "url": "https://files.pythonhosted.org/packages/0a/ac/f4cc663bf1b5cca54f676524b12851d8cdde5d28112702db18d827489f7a/django-select2-forms-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}