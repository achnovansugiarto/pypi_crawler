{
  "info": {
    "author": "Frankie Dintino",
    "author_email": "fdintino@theatlantic.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-select2-forms\n####################\n\n.. image:: https://travis-ci.org/theatlantic/django-select2-forms.svg?branch=master\n    :target: https://travis-ci.org/theatlantic/django-select2-forms\n\n**django-select2-forms** is a project that makes available Django form\nfields that use the `Select2 javascript\nplugin <http://ivaynberg.github.com/select2/>`_. It was created by\ndevelopers at `The Atlantic <http://www.theatlantic.com/>`_.\n\n.. contents:: Table of Contents:\n\nSupport\n=======\n\nBeing that Django added select2 support in 2.0, we will support up to that version\nfor compatibility purposes.\n\n* ~=v3.0: Python >=3.7,<3.9 | Django 2.2,3.1,3.2 (current release)\n\nLocal Development & Testing\n===========================\n\nThe following steps should only need to be done once when you first begin:\n\nInstall ``pyenv``\n-----------------\n\nThese instructions assume that you have `Homebrew <https://brew.sh/>`_ installed,\nbut not ``pyenv``.\n\n.. code:: bash\n\n    brew install pyenv\n    touch ~/.bash_profile\n\nAdd the following line to your ``~/bash_profile`` or ``.zshrc``::\n\n    eval \"$(pyenv init -)\"\n\nReload your shell:\n\n.. code:: bash\n\n    . ~/.bash_profile\n\nor\n\n.. code:: bash\n\n    . ~/.zshrc\n\nPython Repository Setup\n-----------------------\n\nFirst, clone the repository and prep your Python environment:\n\n.. code:: bash\n\n    git clone https://github.com/theatlantic/django-select2-forms.git\n    pyenv install 3.7.2\n    pyenv install 3.8.0\n    pyenv install 3.9.0\n    pyenv local 3.7.2 3.8.0 3.9.0\n    python -V\n\nThe output of the previous command should be ``Python 3.7.2``.\n\nFinally:\n\n.. code:: bash\n\n    python -m venv venv\n\nActivate Your Environment\n-------------------------\n\nFrom the base directory:\n\n.. code:: bash\n\n    deactivate  # ignore: -bash: deactivate: command not found\n    . venv/bin/activate\n    pip install -U tox\n\nRunning tests\n-------------\n\nIf you have not already done so, set up your environment by chromedriver:\n\n.. code:: bash\n\n    brew install --cask chromedriver\n\nRun all tests:\n\n.. code:: bash\n\n    tox -- --selenosis-driver=chrome-headless\n\nShow all available ``tox`` commands:\n\n.. code:: bash\n\n    tox -av\n\nRun only a specific environment:\n\n.. code:: bash\n\n    tox -e <environment-name> -- --selenosis-driver=chrome-headless  # example: tox -e py37-django22\n\nOnly run a specific test:\n\n.. code:: bash\n\n    tox -- pytest -k test_something --selenosis-driver=chrome-headless\n\nRun an arbitrary command in a specific environment:\n\n.. code:: bash\n\n    tox -e py37-django22 -- python  # runs the Python REPL in that environment\n\nSetup a development environment:\n\n.. code:: bash\n\n    tox -e <pyXX-DjangoYY> --develop -r\n    . .tox/<pyXX-DjangoYY>/bin/activate\n\nInstallation\n============\n\nThe recommended way to install is with pip::\n\n    pip install django-select2-forms\n\nor, to install with pip from source::\n\n        pip install -e git+git://github.com/theatlantic/django-select2-forms.git#egg=django-select2-forms\n\nIf the source is already checked out, use setuptools::\n\n        python setup.py develop\n\nConfiguration\n=============\n\n``django-select2-forms`` serves static assets using\n`django.contrib.staticfiles <https://docs.djangoproject.com/en/1.8/howto/static-files/>`_,\nand so requires that ``\"select2\"`` be added to your settings'\n``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'select2',\n    )\n\nTo use django-select2-forms' ajax support, ``'select2.urls'`` must be\nincluded in your urls.py ``urlpatterns``:\n\n.. code-block:: python\n\n    urlpatterns = patterns('',\n        # ...\n        url(r'^select2/', include('select2.urls')),\n    )\n\nUsage\n=====\n\nThe simplest way to use ``django-select2-forms`` is to use\n``select2.fields.ForeignKey`` and ``select2.fields.ManyToManyField`` in\nplace of ``django.db.models.ForeignKey`` and\n``django.db.models.ManyToManyField``, respectively. These fields extend\ntheir django equivalents and take the same arguments, along with extra\noptional keyword arguments.\n\nselect2.fields.ForeignKey examples\n----------------------------------\n\nIn the following two examples, an \"entry\" is associated with only one\nauthor. The example below does not use ajax, but instead performs\nautocomplete filtering on the client-side using the ``<option>``\nelements (the labels of which are drawn from ``Author.__str__()``)\nin an html ``<select>``.\n\n.. code-block:: python\n\n    @python_2_unicode_compatible\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n\n        def __str__(self):\n            return self.name\n\n    class Entry(models.Model):\n        author = select2.fields.ForeignKey(Author,\n            overlay=\"Choose an author...\",\n            on_delete=models.CASCADE)\n\nThis more advanced example autocompletes via ajax using the\n``Author.name`` field and limits the autocomplete search to\n``Author.objects.filter(active=True)``\n\n.. code-block:: python\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n        active = models.BooleanField()\n\n    class Entry(models.Model):\n        author = select2.fields.ForeignKey(Author,\n            limit_choices_to=models.Q(active=True),\n            ajax=True,\n            search_field='name',\n            overlay=\"Choose an author...\",\n            js_options={\n                'quiet_millis': 200,\n            },\n            on_delete=models.CASCADE)\n\nselect2.fields.ManyToManyField examples\n---------------------------------------\n\nIn the following basic example, entries can have more than one author.\nThis example does not do author name lookup via ajax, but populates\n``<option>`` elements in a ``<select>`` with ``Author.__unicode__()``\nfor labels.\n\n.. code-block:: python\n\n    @python_2_unicode_compatible\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n\n        def __str__(self):\n            return self.name\n\n    class Entry(models.Model):\n        authors = select2.fields.ManyToManyField(Author)\n\nThe following \"kitchen sink\" example allows authors to be ordered, and\nuses ajax to autocomplete on two variants of an author's name.\n\n.. code-block:: python\n\n    from django.db import models\n    from django.db.models import Q\n    import select2.fields\n    import select2.models\n\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n        alt_name = models.CharField(max_length=100, blank=True, null=True)\n\n    class Entry(models.Model):\n        categories = select2.fields.ManyToManyField(Author,\n            through='EntryAuthors',\n            ajax=True,\n            search_field=lambda q: Q(name__icontains=q) | Q(alt_name__icontains=q),\n            sort_field='position',\n            js_options={'quiet_millis': 200})\n\nform field example\n------------------\n\nIf you don't need to use the ajax features of ``django-select2-forms``\nit is possible to use select2 on django forms without modifying your\nmodels. The select2 formfields exist in the ``select2.fields`` module\nand have the same class names as their standard django counterparts\n(``ChoiceField``, ``MultipleChoiceField``, ``ModelChoiceField``,\n``ModelMultipleChoiceField``). Here is the first ``ForeignKey`` example\nabove, done with django formfields.\n\n.. code-block:: python\n\n    class AuthorManager(models.Manager):\n        def as_choices(self):\n            for author in self.all():\n                yield (author.pk, force_text(author))\n\n    @python_2_unicode_compatible\n    class Author(models.Model):\n        name = models.CharField(max_length=100)\n        objects = AuthorManager()\n\n        def __str__(self):\n            return self.name\n\n    class Entry(models.Model):\n        author = models.ForeignKey(Author, on_delete=models.CASCADE)\n\n    class EntryForm(forms.ModelForm):\n        author = select2.fields.ChoiceField(\n            choices=Author.objects.as_choices(),\n            overlay=\"Choose an author...\")\n\n        class Meta:\n            model = Entry\n\nLicense\n=======\n\nThe django code is licensed under the `Simplified BSD\nLicense <http://opensource.org/licenses/BSD-2-Clause>`_ and is\ncopyright The Atlantic Media Company. View the ``LICENSE`` file under\nthe root directory for complete license and copyright information.\n\nThe Select2 javascript library included is licensed under the `Apache\nSoftware Foundation License Version\n2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_. View the file\n``select2/static/select2/select2/LICENSE`` for complete license and\ncopyright information about the Select2 javascript library.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/theatlantic/django-select2-forms",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-select2-forms",
    "package_url": "https://pypi.org/project/django-select2-forms/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-select2-forms/",
    "project_urls": {
      "Homepage": "https://github.com/theatlantic/django-select2-forms"
    },
    "release_url": "https://pypi.org/project/django-select2-forms/3.0.0/",
    "requires_dist": [
      "django-sortedm2m"
    ],
    "requires_python": "",
    "summary": "Django form fields using the Select2 jQuery plugin",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10725299,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6946417c06665d6937ce66cdd74b5f7a5c2c2a622737105d9c2bf08335a988ae",
        "md5": "27dafec59c7089bb55d23bf70b9bc1a3",
        "sha256": "46eefef8dee6c2d96a788b818046f373e772d58d562b869d6839407f2eb88d32"
      },
      "downloads": -1,
      "filename": "django_select2_forms-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "27dafec59c7089bb55d23bf70b9bc1a3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 216702,
      "upload_time": "2021-06-23T20:46:30",
      "upload_time_iso_8601": "2021-06-23T20:46:30.764568Z",
      "url": "https://files.pythonhosted.org/packages/69/46/417c06665d6937ce66cdd74b5f7a5c2c2a622737105d9c2bf08335a988ae/django_select2_forms-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "027612f460e4cc71f2c272d3e57ce674a6f77aa46ed0bef3fcefff31cecbd703",
        "md5": "2e277c474d49389ce9fc72f660b5767b",
        "sha256": "1be1a9832e42d9d885154013bddd562c153675f466c08d7b8e70c67e46d50515"
      },
      "downloads": -1,
      "filename": "django-select2-forms-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2e277c474d49389ce9fc72f660b5767b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 208599,
      "upload_time": "2021-06-23T20:46:33",
      "upload_time_iso_8601": "2021-06-23T20:46:33.994770Z",
      "url": "https://files.pythonhosted.org/packages/02/76/12f460e4cc71f2c272d3e57ce674a6f77aa46ed0bef3fcefff31cecbd703/django-select2-forms-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}