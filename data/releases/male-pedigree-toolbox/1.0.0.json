{
  "info": {
    "author": "Bram van Wersch and Diego Montiel Gonzalez",
    "author_email": "b.vanwersch@erasmusmc.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "\nMale pedigree toolbox\n=====================\n\nThis is a collection of functionalities for the analysis of male pedigrees based on Y-chromosomal markers. Here follows\na short overview of functionalities:\n\n\n* Generational distance calculations between all individuals in a pedigree.\n* Number of mutations between all alleles for all markers in a pedigree.\n* Infer alleles and mutation events in pedigrees and draw these pedigrees.\n* Cluster alleles/individuals based on mutation distance between them\n* Simulate mutations based on marker mutation rates and use these simulations to train various machine learning models for the prediction of generational distance between individuals based on markers.\n\nContents\n--------\n\n\n* Installing\n\n  * `Executables <#download-executable>`_\n  * `Python package installation <#clone-and-pip-install>`_\n  * `Execute from main script <#execute-from-main>`_\n\n* Running\n\n  * Pedigree investigatioN\n\n    * `Meiotic distances <#meiotic-distances-in-pedigrees-distance>`_\n    * `Counting mutations between alleles <#counting-mutations-between-alleles-of-markers-mut_diff>`_\n    * `Inferring pedigree mutation events <#infering-pedigree-mutation-events-ped_mut_graph>`_\n    * `Clustering alleles <#clustering-alleles-based-on-mutation-distance-dendrograms>`_\n    * `Run it all <#run-all-the-above-commands-in-tandem-all>`_\n\n  * Generational distance prediction\n\n    * `Simulate data <#simulate-alleles-data-simulate-command-line-only>`_\n    * `Make models <#create-classification-models-from-simulated-data-make_models-command-line-only>`_\n    * `Predict generational distance <#predict-generational-distance-predict>`_\n\n* `Full example <#full-example>`_\n\nInstalling:\n===========\n\nDownload executable\n-------------------\n\nThe easiest way of using the Male pedigree toolbox is by using the precompiled executables that have been created for\nlinux and windows. Unfortunately there is no executable for mac available. The downside of these executables is that it\ntakes a long time for them to start up (around 20 seconds). There is a gui and command line executable available.\n\nIn order for inferring pedigree mutations to work properly https://graphviz.org/ is required. You will need to add Graphiz\nto your system path or add the Graphiz directory inside of the MalePedigreeToolbox folder. Graphiz is included in the executables.\n\nClone and pip install\n^^^^^^^^^^^^^^^^^^^^^\n\nThe repository can also be installed with pip for convenient command line acces. This also allows you to start the\ngraphical user interface from the command line. In order for the tool to be able to start python 3.6 or higher is\nrequired\n\nInstalling with pip is as simple as :\n\n.. code-block::\n\n   $ pip install male-pedigree-toolbox\n\nThis will install this toolbox as a python package and make it available on the command line. Now check that the\ncommand line interface of the toolbox is properly installed:\n\n.. code-block::\n\n   # print the current version, this is an example the number will differ\n   $ mpt --version\n   MalePedigreeToolbox 0.1.2\n\nYou can check the same for the GUI. This command should start up a GUI.\n\n.. code-block::\n\n   $ mpt_gui\n\nExecute from main\n^^^^^^^^^^^^^^^^^\n\nIn case the executable does not work, and you don't want to pip-install the package. You can always clone the GitHub\nrepository and execute the main.py script:\n\n.. code-block::\n\n   $ clone https://github.com/genid/MalePedigreeToolbox.git\n   $ python main.py --version\n   MalePedigreeToolbox v0.1.0-beta\n\nOr navigate into the `gui <./MalePedigreeToolbox/gui>`_ folder and execute the main_gui.py script:\n\n.. code-block::\n\n   $ python main_gui.py\n\nKeep in mind that the following python packages are required as well as python 3.6:\n\n\n* pandas\n* numpy\n* statsmodels\n* scipy\n* matplotlib\n* joblib\n* sklearn\n* scikit-learn\n* tqdm\n* openpyxl\n* graphviz\n\nThis package is required for the gui:\n\n\n* PySimpleGUI\n\nAll of these packages can be installed with pip:\n\n.. code-block::\n\n   # one at a time\n   $ pip install <package name>\n   # or all at once\n   $ pip install -r requirements.txt\n\nRunning\n=======\n\nThere are a number of different functionalities that can be used from this toolkit. Here follows an explanation for each\nof these functionalities with some example in and outputs. The examples are for the command line but the same applies\nfor the inputs of the GUI unless stated otherwise. Alternatively you can always make use of -h or --help to get an\noverview of all options available for a certain subcommand. The example data used and demonstrated can be downloaded from the `examples <./examples>`_ folder. The commands are in order since data from previous commands feed into later ones. If you follow the examples in order you should be able to run all commands using the example and generated data.\n\nPedigree investigation functions\n--------------------------------\n\nThese are commands that can be used to investigate pedigrees in a number of ways. \n\nMeiotic distances in pedigrees (distance)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCalculate distances between all individuals in the provided pedigrees. The pedigrees need to be in Trivial\nGraph Format (tgf). The command can calculate the distances between all individuals in a pedigree.\n\nExample command:\n\n.. code-block::\n\n   $ mpt distances -t ./examples/Mutation_rate_example/tgf -o output_folder\n\nThis will create a comma separated values (csv) file containing the generational distance between all individuals for\neach pedigree in the specified output folder.\n\nCounting mutations between alleles of markers (mut_diff)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet the number of mutations between all alleles for all markers in pedigrees. The input for this command is an alleles\nfile. This is a .csv file that contains the alleles for each marker of one or more pedigrees. An Example of an alleles\nfile can be found at Alleles_example.csv <./examples/Mutation_rate_example/Alleles_example.csv>`_. The number of alleles does not have\nto be 6. Optionally the distances between all individuals of the different pedigrees can be provided\n(this can be generated with the `distance <#meiotic-distances-in-pedigrees-distance>`_ command).\n\nExample command:\n\n.. code-block::\n\n   $ mpt pairwise_mutation -af ./examples/Mutation_rate_example/Alleles_example.csv -df output_folder/distances.csv -o output_folder -pf\n\nThis always results in at least 2 files. Firstly, a full output file containing the number of mutations that occured\nbetween all individuals of a pedigree for all markers for each allele. Secondly, a summary output file that takes the mutations for\nall markers together and shows the number of mutations between all individuals of a pedigree. If a distance file was\nspecified then a percentage of mutation is calculated for each number of meiosis present in the provided pedigrees. The -pf\nflag can be specified as well to generate a file that can be used to simulate data for creating machine learning models\nfor the prediction of generational distance.\n\nInfering pedigree mutation events (ped_mut_graph)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfer alleles and mutation events for pedigrees containing individuals with unknown alleles. The input for this command\nis an alleles file (for an example see the `mut_diff <#counting-mutations-between-alleles-of-markers-mut_diff>`_\ndescription) and a folder containing pedigrees in .tgf format.\n\nExample command:\n\n.. code-block::\n\n   $ mpt pedigree_mutation -af ./examples/Mutation_rate_example/Alleles_example.csv -t ./examples/Mutation_rate_example/tgf -o output_folder\n\nThis will generate a pedigree for each marker containing the number of mutations that occured between descendants in the\npedigree. It will also contain an overview graph for each pedigree where all unique sets of alleles get their own color.\nEach pedigree also gets a file with mutation rates for each marker based on that pedigree. Finally, a file that summarizes\nall these mutation rates for all pedigrees is also generated.\n\n\n.. image:: ./examples/marker_example.png\n   :target: ./examples/marker_example.png\n   :alt: plot\n\n*Example of a pedigree for a certain marker with inferred mutation locations. The number at the edge indicates the number\nof mutations the color indicates where this mutation could have occured, since these mutations are annotated at the\nfirst place that they could have occured.*\n\n\n.. image:: ./examples/all_marker_example.png\n   :target: ./examples/all_marker_example.png\n   :alt: plot\n\n*Example of the same pedigree for all markers. Here Each unique allele gets a unique color. A .csv file acompanies this\nfile giving information on what marker mutated on what edge. All edges where mutations occured have an id together with\nthe number of mutations that occured. Keep in mind that these mutations are placed at the first edge they\ncould have occured.*\n\nClustering alleles based on mutation distance (dendrograms)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIdentify likely related individuals based on the mutation distance of the alleles of measured markers. The input for\nthis functionality is full list of mutation distances between all markers for all alleles (this can be generated with\nthe `mut_diff <#counting-mutations-between-alleles-of-markers-mut_diff>`_ command). For examples of mutation rates files and mutation rates for a number of marker combinations see the `Mutation_rates_for_dendrograms <./examples/Mutation_rates_for_dendrograms>`_ folder. Additionally, for more\naccurate results you can also provide the mutation rates for all markers in a separate file. You can either define the\nnumber of clusters yourself or let the program calculate the optimal number using silhouette score to measure how\ngood the clustering is.\n\nExample command:\n\n.. code-block::\n\n   $ mpt dendrograms -fm output_folder/full_out.csv -mr ./examples/Dendrogram_pedigree_example/example_mutation_rate.csv -o output_folder\n\nThis will produce a dendrogram for each pedigree present in the full\nmutation distances file. Besides that text files are provided that contain the clusters, in order to easily get all the individuals of a certain cluster.\n\nRun all the above commands in tandem (all)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThere is a command to run all the above functionalities in order where files created from one command are used as inputs\nfor others. This requires at the minimum a folder with .tgf files and an alleles file to run.\n\nExample command:\n\n.. code-block::\n\n   $ mpt all -af ./examples/Mutation_rate_example/Alleles_example.csv -t ./examples/Mutation_rate_example/tgf -mr ./examples/Dendrogram_pedigree_example/example_mutation_rate.csv -o output_folder -pf\n\nPedigree prediction functions\n-----------------------------\n\nThese are a set of commands that can be used to generate models for the prediction of generational difference between\nbased on the number of mutations one individual has compared to another.\n\nSimulate alleles data (simulate) (command line only)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimulate data for creating classification models based on mutation rates of markers. These mutation rates can be\nobtained from `ped_mut_graph <#infering-pedigree-mutation-events-ped_mut_graph>`_ or calculated yourself. For examples of mutation rates files and mutation rates for a number of marker combinations see the `Mutation_rates_for_simulations <./examples/Mutation_rates_for_simulations>`_ folder. This command\ngenerates data for the `make_models <#create-classification-models-from-simulated-data-make_models-command-line-only>`_\ncommand in order to have a sufficiently large dataset to create the models from. You can specify the number of\ngenerations and the number of inidividuals per generation that you want to simulate. Each generation is simulated\nindependant from previous generations.\n\nExample command:\n\n.. code-block::\n\n   $ mpt simulate -i ./examples/Mutation_rates_for_simulations/rates_RMplex_2stepmodel.xlsx -o output_folder -n 10000 -g 50\n\nThis will generate one file containing the simulated mutations for each marker of each individual\nover all generations. We recommend generating for at least 10.000 individuals per generation.\n\nCreate classification models from simulated data (make_models) (command line only)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate classification models that predict a generational distance between 2 individuals of 1 till the number of\nsimulated generations. There are a number of different models that can be chosen from. From our experience the best\nperforming models are the multi-layer perceptron, support vector machines (SVM, scale very badly with large datasets) and\nlinear discriminant analysis (LDA). Depending on the model this can run for quite a while. It is also advised to use a\nlarge number of cores if available to speed up the calculations.\n\nExample command (this command runs for a long time):\n\n.. code-block::\n\n   $ mpt make_models -i output_folder/simulation.csv -o output_folder -mt LDA -c -1\n\nThis will create a pickled RandomizedSearchCV object containing the model. These can be used by the final component of\nthese commands to predict the generational distance between individuals. Keep in mind that this command migth run for quite a while.\n\nPredict generational distance (predict)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows to predict the generational distance between one or more individuals based on the number of mutations between a\nsets of markers. There are a number of pre-computed models that can be used for a few standard sets of markers. The\nfollowing marker sets have pre-computed models:\n\n\n* RMPLEX\n* PPY23\n* YFP\n* PPY23 + RMPLEX\n* YFP + RMPLEX\n\nIf you want to see what markers are included for each of these combinations take a look at the `Mutation_rates_for_simulations <./examples/Mutation_rates_for_simulations>`__ folder.\n\nThe input\nfile can be generated from an alleles file with the help of the\n`mut_diff <#counting-mutations-between-alleles-of-markers-mut_diff>`_ command.\n\nExample command with a pre-defined model:\n\n.. code-block::\n\n   $ mpt predict -pm YFP_RMPLEX -i ./examples/example_predict.csv -o output_folder\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/genid/MalePedigreeToolbox.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "male-pedigree-toolbox",
    "package_url": "https://pypi.org/project/male-pedigree-toolbox/",
    "platform": null,
    "project_url": "https://pypi.org/project/male-pedigree-toolbox/",
    "project_urls": {
      "Homepage": "https://github.com/genid/MalePedigreeToolbox.git"
    },
    "release_url": "https://pypi.org/project/male-pedigree-toolbox/1.0.0/",
    "requires_dist": [
      "setuptools (>=56.0.0)",
      "pandas (>=1.1.5)",
      "numpy (>=1.19.5)",
      "statsmodels (>=0.12.2)",
      "scipy (>=1.5.4)",
      "matplotlib (==3.3.4)",
      "joblib (>=1.0.1)",
      "sklearn (>=0.0)",
      "scikit-learn (>=0.24.2)",
      "tqdm (>=4.62.3)",
      "openpyxl (>=3.0.9)",
      "graphviz (>=0.18.2)",
      "PySimpleGUI (~=4.55.1)",
      "pytest (~=6.2.5)"
    ],
    "requires_python": ">=3.6",
    "summary": "tools for getting information from pedigress",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16618038,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f58f5b29544bc79553d14732d89e0f54f5955cba74d49bf3c5ce86cd6d46673",
        "md5": "d729ff78bbbee41c52565515414256ef",
        "sha256": "3cd3298c2cd42b0fcb5f3653cf3c1f3ae10c77cb8a4f64abccf5dec16d4ccfc7"
      },
      "downloads": -1,
      "filename": "male_pedigree_toolbox-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d729ff78bbbee41c52565515414256ef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 103020624,
      "upload_time": "2023-01-30T11:28:26",
      "upload_time_iso_8601": "2023-01-30T11:28:26.129404Z",
      "url": "https://files.pythonhosted.org/packages/7f/58/f5b29544bc79553d14732d89e0f54f5955cba74d49bf3c5ce86cd6d46673/male_pedigree_toolbox-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}