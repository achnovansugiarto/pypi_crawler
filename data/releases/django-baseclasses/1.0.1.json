{
  "info": {
    "author": "Greg Brown",
    "author_email": "greg@gregbrown.co.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "django-baseclasses is a small set of helpers and abstract base model classes\nfor django.\n\n## Installation\n\n    python ./setup.py install\n\nOr with pip:\n\n    pip install -e git+https://github.com/gregplaysguitar/\\\n    django-baseclasses.git@master#egg=django_baseclasses-master\n\n## Abstract classes provided in `baseclasses.models`\n\n#### `DateAuditModel`\n\nStores a record of when the model was created and last changed, in the `creation_date` and `last_updated` fields, orders on `creation_date`, and \nprovides `get_next` and `get_prev` methods respecting the ordering.\n\n#### `BaseContentModel`\n\nExtends `DateAuditModel`, adding `is_live` and `pub_date` fields, and provides\na `live` method on the default manager which returns only objects with \n`is_live` set and a non-future `pub_date`. Also orders by `pub_date`, and\nprovides `next_live` and `prev_live` methods which only cycle through \"live\"\nobjects.\n\n#### `BaseImageModel`\n\nProvides `caption`, `image` and `sort_order` fields. Orders on `sort_order`.\n\n#### `BaseModelWithImages`\n\nParent model for use with a `BaseImageModel` with a ForeignKey to this model. \nProvides `primary_image` property which returns the first related image object, \nor `None`. The ForeignKey's `related_name` must be \"image_set\"\n\n#### `BaseHierarchyModel`\n\nProvides `parent` field to create a simple hierarchy system, i.e. categories \nand subcategories. Provides get_hierarchy method, which returns a list of \nobjects in the tree, from the top level to the current.\n\n\n## Model fields\n\n#### `baseclasses.fields.ConstrainedImageField`\n\nResizes the image on upload and overwrites the original. Use `max_dimensions`\nargument to determine the resize behaviour.\n\n\n## Helpers\n\n#### `baseclasses.util.next_or_prev_in_order`\n\nArguments: `(instance, prev=False, qs=None, loop=False)`\n\nGet the next (or previous with prev=True) item for an instance, from the given\nqueryset (which is assumed to contain instance), respecting queryset ordering.\nIf loop is True, return the first/last item when the end/start is reached.\n\n\n## Example:\n   \n    # models.py\n    \n    from django.db import models\n    from baseclasses.models import BaseContentModel, BaseModelWithImages, \\\n                                   BaseImageModel\n    \n    \n    class Article(BaseContentModel, BaseModelWithImages):\n        title = models.CharField(max_length=190) \n        text = models.TextField()\n        \n     \n    class ArticleImage(BaseImageModel):\n        article = models.ForeignKey(Article, related_name='image_set')\n        \n    \nWith the above model definition, you can do the following:\n\n    articles = Article.objects.live() # get queryset of all live articles\n    article = articles[0]\n    article.primary_image # get primary image (model instance) for the article\n    article.next_live # get next live article",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gregplaysguitar/django-baseclasses",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-baseclasses",
    "package_url": "https://pypi.org/project/django-baseclasses/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-baseclasses/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/gregplaysguitar/django-baseclasses"
    },
    "release_url": "https://pypi.org/project/django-baseclasses/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A set of reusable base classes and helpers for django",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2833289,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe468a55ced94d02e4b0cd19eea32c010fa2fc140ad15f0c7d7b0fbd0b5ae0a6",
        "md5": "12b6ee158ceb0303b587e5f618198d0b",
        "sha256": "a83d69c37bb1ac01babd47c114a662cc069e6d9ed8834630ed1f020b0cf7b1d1"
      },
      "downloads": -1,
      "filename": "django-baseclasses-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "12b6ee158ceb0303b587e5f618198d0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5102,
      "upload_time": "2016-03-15T21:52:49",
      "upload_time_iso_8601": "2016-03-15T21:52:49.218359Z",
      "url": "https://files.pythonhosted.org/packages/fe/46/8a55ced94d02e4b0cd19eea32c010fa2fc140ad15f0c7d7b0fbd0b5ae0a6/django-baseclasses-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}