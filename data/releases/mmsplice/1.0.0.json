{
  "info": {
    "author": "Jun Cheng",
    "author_email": "chengju@in.tum.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# mmsplice\n[![CircleCI](https://circleci.com/gh/gagneurlab/MMSplice.svg?style=svg)](https://circleci.com/gh/gagneurlab/MMSplice)\n[![pypi](https://img.shields.io/pypi/v/mmsplice.svg)](https://pypi.python.org/pypi/mmsplice)\n\nPredict splicing variant effect from VCF\n\nPaper: Cheng et al. https://doi.org/10.1101/438986\n\n![MMSplice](https://raw.githubusercontent.com/kipoi/models/master/MMSplice/Model.png)\n\n\n## Installation\n-----------------\n\nExternal dependencies:\n```bash\npip install cyvcf2 cython\n```\n\nConda installation is recommended:\n```bash\nconda install cyvcf2 cython -y\n```\n\n```bash\npip install mmsplice\n```\n\n## Run MMSplice Online\n\nYou can run mmsplice with following google colab notebooks online:\n\n- [run on vcf file](https://colab.research.google.com/drive/1Kw5rHMXaxXXsmE3WecxbXyGQJma80Eq6)\n\n### Preparation\n-----------------\n\n#### 1. Prepare annotation (gtf) file\nStandard human gene annotation file in GTF format can be downloaded from ensembl or gencode.\n`MMSplice` can work directly with those files, however, some filtering is higly recommended.\n\n- Filter for protein coding genes.\n\n#### 2. Prepare variant (VCF) file\nA correctly formatted VCF file with work with `MMSplice`, however the following steps will make it less prone to false positives:\n\n- Quality filtering. Low quality variants leads to unreliable predictions.\n- Avoid presenting multiple variants in one line by splitting them into multiple lines. Example code to do it:\n  ```bash\n  bcftools norm -m-both -o out.vcf in.vcf.gz\n  ```\n- Left-normalization. For instance, GGCA-->GG is not left-normalized while GCA-->G is. Details for unified representation of genetic variants see [Tan et al.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4481842/)\n  ```bash\n  bcftools norm -f reference.fasta -o out.vcf in.vcf\n  ```\n\n#### 3. Prepare reference genome (fasta) file\nHuman reference fasta file can be downloaded from ensembl/gencode. Make sure the chromosome name matches with GTF annotation file you use.\n\n\n### Example code\n-------------------\n\nCheck [notebooks/example.ipynb](https://github.com/gagneurlab/MMSplice/blob/master/notebooks/example.ipynb)\n\nTo score variants (including indels), we suggest to use primarily the `deltaLogitPSI` predictions, which is the default output. The differential splicing efficiency (dse) model was trained from MMSplice modules and exonic variants from MaPSy, thus only the predictions for exonic variants are calibrated.\n\n```python\n# Import\nfrom mmsplice.vcf_dataloader import SplicingVCFDataloader\nfrom mmsplice import MMSplice, predict_all_table\nfrom mmsplice.utils import max_varEff\n\n# example files\ngtf = 'tests/data/test.gtf'\nvcf = 'tests/data/test.vcf.gz'\nfasta = 'tests/data/hg19.nochr.chr17.fa'\ncsv = 'pred.csv'\n\n# dataloader to load variants from vcf\ndl = SplicingVCFDataloader(gtf, fasta, vcf)\n\n# Specify model\nmodel = MMSplice()\n\n# predict and save to csv file\npredict_save(model, dl, csv, pathogenicity=True, splicing_efficiency=True)\n\n# Or predict and return as df\npredictions = predict_all_table(model, dl, pathogenicity=True, splicing_efficiency=True)\n\n# Summerize with maximum effect size\npredictionsMax = max_varEff(predictions)\n```\n\n## VEP Plugin\n\nThe VEP plugin wraps the prediction function from `mmsplice` python package. Please check documentation of vep plugin [under VEP_plugin/README.md](VEP_plugin/README.md).\n\n\n=======\nHistory\n=======\n\n1.0.0 (2019-07-23)\n------------------\n* Dependicies fixed #16\n* Valide gtf, fasta, vcf chrom annotation #15\n* Ship mmsplice with prebuild exon set. #12\n* Faster variant overlapping with pyranges #11\n* Batch prediction with masking update in exon module\n\n0.1.0 (2018-07-17)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gagneurlab/mmsplice",
    "keywords": "mmsplice",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mmsplice",
    "package_url": "https://pypi.org/project/mmsplice/",
    "platform": "",
    "project_url": "https://pypi.org/project/mmsplice/",
    "project_urls": {
      "Homepage": "https://github.com/gagneurlab/mmsplice"
    },
    "release_url": "https://pypi.org/project/mmsplice/1.0.0/",
    "requires_dist": [
      "setuptools",
      "scikit-learn (==0.19.2)",
      "tensorflow (<=1.13.1)",
      "keras",
      "kipoi (>=0.4.1)",
      "pandas",
      "concise",
      "pybedtools",
      "kipoiseq",
      "pyfaidx",
      "tqdm",
      "click",
      "pyranges"
    ],
    "requires_python": "",
    "summary": "Predict splicing variant effect from VCF",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12401868,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31b938a8a89183c8bab7d2201fe255cc85e3a8f613205676ee0ad3b300f4d097",
        "md5": "cce04a8a3feb2510eb782d8e9ee15794",
        "sha256": "0dea946113101c93b1caeb65cdbaf9482e8310c84cd79af90839676ffec5ab2b"
      },
      "downloads": -1,
      "filename": "mmsplice-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cce04a8a3feb2510eb782d8e9ee15794",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 442140,
      "upload_time": "2019-07-23T15:21:20",
      "upload_time_iso_8601": "2019-07-23T15:21:20.543525Z",
      "url": "https://files.pythonhosted.org/packages/31/b9/38a8a89183c8bab7d2201fe255cc85e3a8f613205676ee0ad3b300f4d097/mmsplice-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d74f2c70c2d39b1883a9036db3455dc29d58dd5d34148d0724afe81e29d0eee7",
        "md5": "f9b345334f68d4ad4832d0ae257b45b2",
        "sha256": "a596796523323d67dcad5a5b4058cf768d93aaea2e6740d8fb8437df2f82e966"
      },
      "downloads": -1,
      "filename": "mmsplice-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f9b345334f68d4ad4832d0ae257b45b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 446135,
      "upload_time": "2019-07-23T15:21:23",
      "upload_time_iso_8601": "2019-07-23T15:21:23.024609Z",
      "url": "https://files.pythonhosted.org/packages/d7/4f/2c70c2d39b1883a9036db3455dc29d58dd5d34148d0724afe81e29d0eee7/mmsplice-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}