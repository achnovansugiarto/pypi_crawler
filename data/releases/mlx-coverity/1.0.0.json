{
  "info": {
    "author": "Crt Mori",
    "author_email": "cmo@melexis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Framework :: Sphinx :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/badge/License-GPL%20v3-blue.svg\n    :target: https://www.gnu.org/licenses/gpl-3.0\n    :alt: GPL3 License\n\n.. image:: https://badge.fury.io/py/mlx.coverity.svg\n    :target: https://badge.fury.io/py/mlx.coverity\n    :alt: Pypi packaged release\n\n.. image:: https://github.com/melexis/sphinx-coverity-extension/actions/workflows/python-package.yml/badge.svg?branch=master\n    :target: https://github.com/melexis/sphinx-coverity-extension/actions/workflows/python-package.yml\n    :alt: Build status\n\n.. image:: https://img.shields.io/badge/Documentation-published-brightgreen.svg\n    :target: https://melexis.github.io/sphinx-coverity-extension/\n    :alt: Documentation\n\n.. image:: https://codecov.io/gh/melexis/sphinx-coverity-extension/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/melexis/sphinx-coverity-extension\n    :alt: Code Coverage\n\n.. image:: https://codeclimate.com/github/melexis/sphinx-coverity-extension/badges/gpa.svg\n    :target: https://codeclimate.com/github/melexis/sphinx-coverity-extension\n    :alt: Code Climate Status\n\n.. image:: https://codeclimate.com/github/melexis/sphinx-coverity-extension/badges/issue_count.svg\n    :target: https://codeclimate.com/github/melexis/sphinx-coverity-extension\n    :alt: Issue Count\n\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n    :target: https://github.com/melexis/sphinx-coverity-extension/issues\n    :alt: Contributions welcome\n\n======================\nSphinx Coverity plugin\n======================\n\nPublish Coverity report along your documentation - up-to-date at every build. Include comments and other special data\nin the same table and draw some nice graphs to showcase the quality.\n\n----\nGoal\n----\n\nCoverity's reporting capabilities enable you to export data into separate documentation. While this might be preferred,\nit is also detached from your software documentation. Another lack is that it does not include comments or any\nother special fields. That means you can end up with a huge amount of intentionally triaged defects, without any\nexplanation why they are intentional. Because of that, you cannot link your explanations for actions to that report and\nnumbers could mean just anything. This plugin should enable simple and seamless Coverity reporting integration into\nexisting Sphinx documentation. Generating a reStructuredText table of defects was one option, but that allows changing\nbefore it is rendered, so to provide a more trustworthy path, this plugin retrieves the data through Coverity API and\ngenerates/renders documentation via Sphinx without intermediate (editable) artifacts.\n\n.. _coverity_installing:\n\n----------\nInstalling\n----------\n\n.. code-block::\n\n    pip install mlx.coverity\n\n.. _coverity_config:\n\n-------------\nConfiguration\n-------------\n\nThe *conf.py* file contains the documentation configuration for your project. This file needs to be equipped in order\nto configure the Coverity plugin.\n\nFirst, the plugin needs to be enabled in the *extensions* variable:\n\n.. code-block::\n\n    extensions = [\n        'mlx.coverity',\n        ...\n    ]\n\n.. _coverity_credentials:\n\nCredentials\n===========\n\nPython variable *coverity_credentials* should be defined in order to override the default configuration of the Coverity\nplugin.\n\nExample of custom credentials for the plugin:\n\n.. code-block:: python\n\n    coverity_credentials = {\n        'hostname': 'scan.coverity.com',\n        'port': '8080',\n        'transport': 'http',\n        'username': 'reporter',\n        'password': 'coverity',\n        'stream': 'some_coverity_stream',\n    }\n\nLink to traceability items\n==========================\n\nThe plugin can be linked to `Traceability extension`_. This means that this plugin can link to traceability items in the\ndescription of Coverity defects by creating a reference in the docnode. Python variable *TRACEABILITY_ITEM_ID_REGEX*\nshould be defined in order to override the default regular expression below. An empty string as regex will disable this\nfeature.\n\n.. code-block:: python\n\n    TRACEABILITY_ITEM_ID_REGEX = r\"([A-Z_]+-[A-Z0-9_]+)\"\n\nAlter links to traceability items\n=================================\n\nIf the item ID matched by *TRACEABILITY_ITEM_ID_REGEX* is incorrect, e.g. it does not exist in the collection of\ntraceability items, you can configure the plugin to link to the desired item ID instead.\nAdd the item ID returned by Coverity as a key to the Python dictionary *TRACEABILITY_ITEM_ID_REGEX* and the desired\nitem ID as value.\n\n.. code-block:: python\n\n    TRACEABILITY_ITEM_RELINK = {\n        \"STATIC_DEVIATE-MISRA_RULE_1_0\": \"STATIC_DEVIATE-MISRA_1_0\",\n    }\n\nDefault config\n==============\n\nThe plugin itself holds a default config that can be used for any Coverity project:\n\n.. code-block:: python\n\n    coverity_credentials = {\n        'hostname': 'scan.coverity.com',\n        'port': '8080',\n        'transport': 'http',\n        'username': 'reporter',\n        'password': 'coverity',\n        'stream': 'some_coverity_stream',\n    }\n\n    TRACEABILITY_ITEM_ID_REGEX = r\"([A-Z_]+-[A-Z0-9_]+)\"\n    TRACEABILITY_ITEM_RELINK = {}\n\nThis default configuration, which is built into the plugin, can be overridden through the *conf.py* of your project.\n\n\n-----\nUsage\n-----\n\nInside your reStructuredText file you can call a block `.. coverity-list:`, which will generate the table\nwith title and defined columns. For example, to display CID, Classification, Action and Comment columns, while\nfiltering classification items with value `Bug`, you should use the following snippet:\n\n.. code-block:: python\n\n    .. coverity-list:: Custom table title\n        :col: CID,Classification,Action,Comment\n        :widths: 10 20 20 50\n        :classification: Bug\n\nThe plugin will then automatically replace this block with the table queried from the Coverity server.\n\nYou can also call this block `.. coverity-list:` to generate a pie chart. For example, to label the amount of items\nclassified as Intentional and the amount of items classified as Pending or Unclassified, while filtering classification\nitems, you should use the following snippet:\n\n.. code-block:: python\n\n    .. coverity-list:: Custom chart title\n        :chart: classification:Intentional,Pending+Unclassified\n        :classification: Bug,Intentional,Pending,Unclassified\n\nThe plugin allows the use of both display options, `col`and `chart`, at the same time as well. In that case, they share\nall filtering options.\n\nAttributes to coverity-list\n===========================\n\nBlock `coverity-list` takes below attributes to provide better granularity and filtering of the displayed information.\nKeep in mind that all the attributes are to be encapsulated by `:`. Almost all parameters are passed in CSV format\n(comma-separated without any spaces).\n\ncol\n---\n\nList column names of the table. They should match the columns inside Coverity. The list is comma-separated without\nany spaces. Possible Keywords are (but not limited, since Coverity has option to create custom names):\n\n    - `CID`: Coverity defect ID\n    - `Location`: Coverity defect location consisting of file path and line number\n    - `Classification`: Coverity defect Classification column\n    - `Action`: Coverity defect Action information\n    - `Checker`: Coverity defect Checker\n    - `Status`: Coverity defect Triage status\n    - `Comment`: Coverity defect last Comment\n    - `Reference`: Coverity defect external references\n    - ...\n\nThis `col` option is optional. If the `chart` option is used, the table won't be generated. If the `chart` option is not\nused, default columns are used to generate the table, i.e. `CID,Classification,Action,Comment`.\n\nwidths\n------\n\nOptional attribute that provides possibility to set each column width to a predefined percentage. This makes it nicer\nfor the pdf builders that are able to fit the table to the printable page width and, because of longtable, also provide\nnice table continuation through multiple pages. Its parameters must be a space-separated list of integers.\n\nclassification\n--------------\n\nFiltering by classification based on the text following the attribute. The text can be anything you desire, but the\ndefault list includes:\n\n    - `Unclassified`\n    - `Pending`\n    - `False Positive`\n    - `Intentional`\n    - `Bug`\n\nchecker\n-------\n\nFiltering by checker based on the text following the attribute. The text can be anything you desire. Regular expressions\nwork for this attribute, e.g. `MISRA`.\n\nchart\n-----\n\nThis optional, second display option will draw a pie chart that visualizes the amount of results for each allowed\n`<<attribute>>` option. Firstly, the attribute can be specified, followed by a colon `:`. The default attribute is\n`classification`. Secondly, you have two optoins. Either you specify a list of attribue values, comma-separated or even\nplus-sign-separated for a merge into the same slice, or else you define the minimum threshold of defects with the same\nattribute value that needs to be reached for them to be grouped together into a slice. All other defects get labeled as\nOther. For example, to visualize the most prevalent MISRA violations with a grouping threshold of 50 items, you should\nuse the following code snippet:\n\n.. code-block:: python\n\n    .. coverity-list:: Chart of the most prevalent MISRA violations\n        :chart: checker:50\n        :checker: MISRA\n\n-------------\nContributions\n-------------\n\nWe welcome any contributions to this plugin. Do not be shy and open a pull request. We will try to do our best to help\nyou include your contribution to our repository. Keep in mind that reporting a bug or requesting a feature is also a\nnice gesture and considered as contribution, even if you do not have development skills to implement it.\n\n-----------------\nDevelopment setup\n-----------------\n\nTo run tests and checks we use tox.\n\n.. code-block:: bash\n\n    # to install tox\n    pip3 install tox\n\n    # to run tests\n    tox\n\nTo build example locally you will need to install some dependencies and set your environment.\n\n.. code-block:: bash\n\n    # install current package locally and its dependencies\n    pip3 install -e .\n\n    # copy example .env to your .env\n    cp example/.env.example .env\n\n    # add env variables, adjust the values in .env\n    # build\n    make -C example/ html\n\n.. _`Traceability extension`: https://github.com/melexis/sphinx-traceability-extension/\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/melexis/sphinx-coverity-extension",
    "keywords": "coverity,reporting,reStructuredText coverity report,sphinx,ASPICE,ISO26262,ASIL",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlx.coverity",
    "package_url": "https://pypi.org/project/mlx.coverity/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mlx.coverity/",
    "project_urls": {
      "Homepage": "https://github.com/melexis/sphinx-coverity-extension"
    },
    "release_url": "https://pypi.org/project/mlx.coverity/1.0.0/",
    "requires_dist": [
      "Sphinx (>=2.1)",
      "docutils",
      "setuptools-scm",
      "matplotlib",
      "mlx.traceability",
      "suds-py3",
      "urlextract"
    ],
    "requires_python": "",
    "summary": "Sphinx coverity extension from Melexis",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17172494,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12c2a3b195072a72f45f8428ffb1247924cf233b36168cd3ec4d1a928ba1dd1f",
        "md5": "b5cc8aef8e0791c569ac7b86b9deca07",
        "sha256": "138e4c40433f3e82a2cc78882470134165250f9bc9a53eca137534a95289f7ca"
      },
      "downloads": -1,
      "filename": "mlx.coverity-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5cc8aef8e0791c569ac7b86b9deca07",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 33318,
      "upload_time": "2023-03-06T09:52:53",
      "upload_time_iso_8601": "2023-03-06T09:52:53.089813Z",
      "url": "https://files.pythonhosted.org/packages/12/c2/a3b195072a72f45f8428ffb1247924cf233b36168cd3ec4d1a928ba1dd1f/mlx.coverity-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f0718a3894368a8dc2b2a62c45abf05a61c604eb7bb8198aab3ca022a42859d",
        "md5": "6ab4ec570eba395d8ecb268d9d5bc673",
        "sha256": "9fb8b33cb402e0c71fe4f9a0bcf173fb502792a1f96024a75f9cc659c161f4ef"
      },
      "downloads": -1,
      "filename": "mlx.coverity-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6ab4ec570eba395d8ecb268d9d5bc673",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 68989,
      "upload_time": "2023-03-06T09:52:54",
      "upload_time_iso_8601": "2023-03-06T09:52:54.497571Z",
      "url": "https://files.pythonhosted.org/packages/8f/07/18a3894368a8dc2b2a62c45abf05a61c604eb7bb8198aab3ca022a42859d/mlx.coverity-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}