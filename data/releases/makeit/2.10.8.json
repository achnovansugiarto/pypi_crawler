{
  "info": {
    "author": "Dmitrii Ushanov",
    "author_email": "ushanov.dmitry@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: Public Domain",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Utilities"
    ],
    "description": "# MAKE IT!\r\nGNU Make for applications.\r\n\r\n- Extensible execution model language\r\n- Expressive and concise task description language\r\n- Task are not deferred to remote\r\n- Build-in async support\r\n\r\n## Rationale\r\nRethinking of Doit package.\r\n\r\n## Similar libraries -- what's different\r\nSee Luigi, Airflow, doit.\r\n\r\n## Main concepts\r\n\r\nTwo main concepts of the library are Task and Artifact.\r\nA task depends on artifacts and produces artifacts.\r\n\r\nThe use of artifacts is twofold. First, artifacts are used to build a graph (DAG) of the execution.\r\nOn the other side, artifacts' fingerprints (i.e., md5) are used to define weather task should be run or not.\r\n\r\n## Task definition\r\nThe simplest way to define a task is to derive a dataclass class from makeit.DataclassTask\r\nand implement method `execute`, as in the example below.\r\n\r\nThe class makeit.DataclassTask closely interweaves with the standard dataclasses library,\r\nallowing users to benefit from a rich dataclasses support from IDEs.\r\n\r\nOne implicit dependency is the source code if a task (obtained by inspect.getsource(task.__class__)),\r\nif variable DataclassTask.depends_on_source_code_of_self is set (it is set by default).\r\n\r\n```python\r\nimport dataclasses\r\nfrom makeit import File, Dependency, Target, DataclassTask\r\nfrom pathlib import Path\r\n\r\n@dataclasses.dataclass\r\nclass Process(DataclassTask):  # derive from DataclassTask -- this adds required and additional functions like dependencies, ...\r\n    input_1: Path | Dependency  # this is a file dependency\r\n    input_2: Path | Dependency  # many dependencies are possible\r\n    many_files: list[Path] | Dependency  # and even list of dependencies allowed\r\n\r\n    parameter: float  # this is a parameter -- not a dependency or a target\r\n                      # however, it is used in label() method (via dataclasses method __str__),\r\n                      # therefore it helps to parametrize tasks.\r\n                      # See also method DataclassTask.md5 -- it is helpful for creating unique target names.\r\n\r\n    target: File | Target  # many targets are possible as well\r\n    \r\n    target_2: File | Target = None  # this can be initialized in the dataclasses default method __post_init__\r\n\r\n    class_variable = 12  # this is a class variable -- makeit disregards it, as dataclasses does.\r\n    \r\n    def __post_init__(self):\r\n        # our task has parameters (parameter: float)\r\n        # -- so it is better to save results into a unique target (file in this example)\r\n        # DataclassTask.md5 is roughly equivalent to md5hash(str(self)).\r\n        self.target_2 = Path('datafolder') / self.md5(\".csv\")\r\n\r\n    def execute(self):\r\n        # Implement task's logic\r\n        text = self.input_1.read_text() + self.input_2.read_text()\r\n        self.target.path.write_text(text)\r\n```\r\n\r\n## Tasks execution\r\nThe simplest way to execute tasks is to use function `execute_on_change`:\r\n```python\r\nfrom makeit.core import execute_on_change\r\n\r\ntasks = [...]\r\nexecute_on_change(tasks, \"makeit.json\")\r\n```\r\n\r\nFile `\"makeit.json\"` serves as a backend. Fingerprints of artifacts are stored there and later runs depend on those.\r\n\r\n\r\n## Execution reporting\r\nThere is a build-in logging execution reporter.\r\n\r\nExample with `TqdmReporter`\r\n\r\n```python\r\nfrom makeit.core import ExecutionReporter, TaskEvent\r\nclass TqdmReporter(ExecutionReporter):\r\n    def report_task_event(self, event: TaskEvent, task_name: str, reason: str | None):\r\n        pass\r\n    \r\n    def on_dag_start(self, dag_name: str, total_number_of_tasks: int):\r\n        pass\r\n\r\n    def on_dag_end(self):\r\n        pass\r\n```\r\n\r\n## Using graphviz to plot DAG\r\n```python\r\nfrom makeit.contrib.graphviz import render_online, create_dot\r\n\r\ntasks = [...]\r\n\r\ndot = create_dot(tasks)  # graphviz.Digraph can be rendered to pdf, png, ...\r\nrender_online(dot, 'https://...')  # ... or simply drawn online\r\n```\r\nSome remarks:\r\n- dotted lines connect task with its parameters\r\n- file artifacts are marked by a folder-shaped box\r\n- green or red color denote weather file exists or not\r\n- labels are shortened as much as possible in order to get readable picture\r\n\r\n\r\n## Advanced tasks execution\r\nMultiprocessing and asyncio execution. Prefixes.\r\n\r\n## Advanced task definition\r\nRegistering a type conversion.\r\n\r\nSubclass directly from `makeit.core.Task` and implement all needed abstract methods.\r\n\r\nExtra dependencies/targets. Task dependencies.\r\n\r\n## Typical workflows\r\n\r\n| Workflow  | Description                                         | Backend role                                                    |\r\n|-----------|-----------------------------------------------------|-----------------------------------------------------------------|\r\n| Make      | Execute task if targets are older than dependencies | -                                                               |\r\n| \"Luigi\"   | Execute task if and only if target does not exist   | -                                                               |\r\n| Make 2.0  | Execute task if dependency has changed              | Fingerprint is stored in backend, i.e. MD5 or modification time |\r\n| Luigi 2.0 | Pickup new files from folder, parse and process     | Backend remembers which files have been already seen            |\r\n| Always    | Execute all tasks (in correct order)                | -                                                               |\r\n\r\n### Make\r\nCompare files' timestamps, if dependencies are newer than targets then recalculate the targets.\r\n\r\n### \"Luigi\"\r\nRun task if and only if targets are absent.\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Public Domain",
    "maintainer": "",
    "maintainer_email": "",
    "name": "makeit",
    "package_url": "https://pypi.org/project/makeit/",
    "platform": null,
    "project_url": "https://pypi.org/project/makeit/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/makeit/2.10.8/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Make util for applications",
    "version": "2.10.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15471873,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "919d7e980b6e225844889fefbeb13e3a89eec82165c4c7d5c2dfad0475c4f278",
        "md5": "defb698436df45e23ada961c0bd327bf",
        "sha256": "e84097e32fb9947bd17ddf3886b84c66938d622b0340e5d61a8fefc8920be27f"
      },
      "downloads": -1,
      "filename": "makeit-2.10.8.tar.gz",
      "has_sig": false,
      "md5_digest": "defb698436df45e23ada961c0bd327bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 18307,
      "upload_time": "2022-10-14T15:16:06",
      "upload_time_iso_8601": "2022-10-14T15:16:06.863057Z",
      "url": "https://files.pythonhosted.org/packages/91/9d/7e980b6e225844889fefbeb13e3a89eec82165c4c7d5c2dfad0475c4f278/makeit-2.10.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}