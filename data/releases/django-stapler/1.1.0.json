{
  "info": {
    "author": "Daan van den Akker",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-stapler\n[![Build Status](https://travis-ci.org/danjer/django-stapler.svg?branch=master)](https://travis-ci.org/danjer/django-stapler)\n\nProvides a simple way to combine multiple ModelForm classes\n\n## Description\n\n\nDjango's ModelForm class lets you create a Form class for a model. This lets you conveniently create and update model instances. In some specific cases it would be desiarble to combine multiple ModelForms so that you can create and update multiple model instances in one view with one form. django-stapler provides this functionality\n\n\n### Dependencies\n\n[![Python 3.6](https://img.shields.io/badge/python-3.6-green.svg)](https://www.python.org/downloads/release/python-360/)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-green.svg)](https://www.python.org/downloads/release/python-370/)\n[![Python 3.8](https://img.shields.io/badge/python-3.8-green.svg)](https://www.python.org/downloads/release/python-380/)\n\n* Django 2.2+\n\n### Installing\n\n```python\npip install django-stapler\n```\n\n### Basic usage\nAdd app to settings.py\n```python\n\nINSTALLED_APPS = [ ...\n                   'stapler',\n                 ]\n```\n Define Model classes as usual\n\nmodels.py\n```python\nfrom django.db import models\n\n# Create your models here.\nclass Bike(models.Model):\n\n    name = models.CharField(max_length=10)\n    frame_type = models.CharField(max_length=10, blank=True, null=True)\n\nclass Manufacturer(models.Model):\n\n    name = models.CharField(max_length=10)\n    chief = models.CharField(max_length=10)\n```\n\nAlso declare the ModelForm classes as usual, and in addition staple the ModelForms together by creating a new StapleForm class.\nIn the inner ```Meta``` class set the ```modelforms``` attribute to a tuple of to staple ```ModelForms```.\n\nforms.py\n```python\nfrom django.forms import ModelForm\nfrom stapler.forms import StaplerForm\nfrom .models import Bike, Manufacturer\n\n\nclass BikeModelForm(ModelForm):\n\n    class Meta:\n        model = Bike\n        fields = ['name', 'price']\n\n\nclass ManufacturerModelForm(ModelForm):\n\n    class Meta:\n        model = Manufacturer\n        fields = ['name', 'revenue']\n\nclass StapledForm(StaplerForm):\n\n    class Meta:\n        modelforms = (BikeModelForm, ManufacturerModelForm)\n        #auto_prefix = False, defaults is True\n```\n\nThe ```StapledForm``` yields a form with four fields: ```bike__name, bike__price, manufacturer__name, manufacturer__revenue```.\nIf you want to keep the original field names, you can set the ```auto_prefix``` attribute in the Meta class to ```False```.\nThis may lead to unexpected behaviour when fieldnames between models clash.\n\nYou can use the ```StapledForm``` in views.py to create a new ```Bike``` and ```Manufacturer``` instance in one go by calling\n```form.save()```. This wil return a dictionary with keys resembling the Model class names in lowercase with the ```_instance```\n suffix. The keys map to the newly created instances:\n\nviews.py\n```python\nfrom django.views.generic.edit import FormView\nfrom .forms import StapledForm\n\nclass SomeView(FormView):\n    template_name = 'example.html'\n    form_class = StapledForm\n    success_url = '/thanks/'\n\n    def form_valid(self, form):\n        # This method is called when valid form data has been POSTed.\n        # It should return an HttpResponse.\n        result = form.save()\n        nw_bike = result['bike_instance']   # the saved bike instance\n        nw_manufacturer = result['manufacturer_instance'] # the saved manufacturer instance\n        return super().form_valid(form)\n```\n\nYou can also use the form to update existing instances by providing a ```tuple``` of instances to the named ```instances``` argument:\n```python\nfrom .models import Bike, Manufacturer\nfrom .forms import StapledForm\n\n...\n\n# inside view function\nbike = Bike.objects.first()\nmanufacturer = Manufacturer.objects.first()\n\nform = StapledForm(data=request.POST, instances=(bike, manufacturer))\nif form.is_valid():\n    result = form.save()\n    result # this is a dictionary with the updated instances\n\n```\nStapledForm provides the ```pre_save``` and ```post_save``` hooks. These methods\nare called before and after the instances are saved when the ```save()``` method is called:\n\n```python\nclass StapledForm(StaplerForm):\n\n    ...\n\n    def pre_save(self):\n        print(\"did you get the memo?\")\n\n\n    def post_save(self):\n        print(\"have you seen my stapler?\")\n\n```\n\n## Extra options\nIn addition to modelforms attribute, you can set a few options in ```Meta``` class that alter the behaviour of the ```StaplerForm```\n-  ```auto_prefix```: defaults to ```True```. This will append a prefix of the model class name to the appropriate fields\n-  ```required```: A tuple of the ```ModelForm``` classes that are required. By default, all ```ModelForm``` classes defined in ```modelforms``` are required.\nIf a ```ModelForm``` is not in the ```required``` attribute,  it's errors are ignored and ```is_valid()``` can still return ```True```. \nCalling ```save()``` in this case will only save the instances of ```ModelForms``` that did validate. Instead of an instance, ```None``` is stored in the returned dictionary\n\n\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE.md file for details\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danjer/django-stapler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stapler",
    "package_url": "https://pypi.org/project/django-stapler/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stapler/",
    "project_urls": {
      "Homepage": "https://github.com/danjer/django-stapler"
    },
    "release_url": "https://pypi.org/project/django-stapler/1.1.0/",
    "requires_dist": [
      "Django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package providing a multi-ModelForm solution for django",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7816225,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b4813e50337500371e6f18d13e00cac8d2196848134aef1619763ca306df93f",
        "md5": "75255c722bd127415ec0ec57f8dc5328",
        "sha256": "4daa59d47f69267dee542218310cab77e78ed9d762a25c63308fe0750c699675"
      },
      "downloads": -1,
      "filename": "django_stapler-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75255c722bd127415ec0ec57f8dc5328",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8210,
      "upload_time": "2020-07-27T14:37:35",
      "upload_time_iso_8601": "2020-07-27T14:37:35.811252Z",
      "url": "https://files.pythonhosted.org/packages/3b/48/13e50337500371e6f18d13e00cac8d2196848134aef1619763ca306df93f/django_stapler-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bd3d00e8a6adf1f9c8552599a206ddf13652bfba3babc0f5f469bb805916d8a",
        "md5": "647918c3a301f4f6fe63fca23abedbb2",
        "sha256": "f7f3d4b91d07db38ecd85dc07a46c6272069e55275e43cdcfac47d10f73a9ffa"
      },
      "downloads": -1,
      "filename": "django-stapler-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "647918c3a301f4f6fe63fca23abedbb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7392,
      "upload_time": "2020-07-27T14:37:37",
      "upload_time_iso_8601": "2020-07-27T14:37:37.990986Z",
      "url": "https://files.pythonhosted.org/packages/9b/d3/d00e8a6adf1f9c8552599a206ddf13652bfba3babc0f5f469bb805916d8a/django-stapler-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}