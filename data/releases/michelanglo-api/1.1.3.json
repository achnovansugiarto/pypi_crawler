{
  "info": {
    "author": "Matteo Ferla. [Github](https://github.com/matteoferla)",
    "author_email": "matteo.ferla@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MichelaNGLo-api\nA python module to interact with the Michelaɴɢʟo server ([<https://michelanglo.sgc.ox.ac.uk>](<https://michelanglo.sgc.ox.ac.uk>))\nprogrammatically.\n\n## Installation\nPython 3.6 or higher.\n\n    pip3 install michelanglo-api\n\n## Notes\nThe details of the requests accepted by Michelaɴɢʟo are described in [its documentation](https://michelanglo.sgc.ox.ac.uk/docs/api).\\\nYou may interact with the server however you please. This code is just to make life easier.\n\nThere are three tiers of users. Basic, priviledged, admin. Basic users cannot add JS to the site as this is a security threat\n(cookie theft)... And it prevents users from making\n[pages that behave maliciously or similar](https://michelanglo.sgc.ox.ac.uk/data/fa3844a8-d7f5-4e84-9540-240f134ba6d1).\n\n## Documentation\n\n### Authenticate\nTo start, authenticate.\n\n    mike = MikeAPI('username','password')\n    \nThe argument `url` sets other address outside of the SGC one, such as `http://0.0.0.0:8088`.\nThe password and username can be ommitted, in which case they are either read from the environment variables\n `MICHELANGLO_PASSWORD` and `MICHELANGLO_USERNAME` or the user is prompted.\n \nTo check all worked `mike.verify_user()`. This will show your `rank` (see [user priviledges in the site](https://michelanglo.sgc.ox.ac.uk/docs/users)).\n\n#### Instance attributes:\n* `.url` is 'https://michelanglo.sgc.ox.ac.uk/' unless altered (_e.g._ local version of Michelanglo)\n* `.username` is the username\n* `.password` is the raw password, so do not share pickles!\n* `.visited_pages`, `.owned_pages` and `.public_pages` are lists filled by `.refresh_pages()`\n* `.request` is the requests session object.\n\n#### Instance methods:\n* `.post(route, data=None, headers=None)` does the requests for other methods...\n* `.post_json(route, data=None, headers=None)` as above but decodes the json reply...\n* `.login()`. called automatically during initialisation.\n* `.verify_user()`. check whether you are still logged in.\n* `.refresh_pages()`. gets the lists `.visited_pages`, `.owned_pages` and `.public_pages` (and `.all` if admin)\n* `.get_page(uuid)` returns the `MikePage` instance for a given page. See below.\n* `.set_page(uuid, data)` sets the `MikePage` instance for a given page.  See below.\n* `.delete_page(uuid)` delete.  See below.\n\n\n### Page editing\n\nTo see what pages you own, you can use:\n\n* `mike.owned_pages` Pages you created/edited\n* `mike.visited_pages` Pages you visited\n* `mike.public_pages` All pages in gallery\n* `mike.all_pages` (admin only)\n\nThese are lists of `MikePage` instances that are *not* retrieved. Retrieval would reset the expiration date and would be heavy.\n\n    page = mike.owned_pages[0].retrieve()\n    \nA specific page can be explicitly retrieved.\n    \n    page = mike.get_page('abcdedf-uuid-string-of-page')\n    \nPages can be edited:\n\n    page.title = 'Hello World'\n    page.commit()\n    \nBut not all attribute changes are allowed. To understand what does an attribute do (apart from using `help`) you can query it with:\n\n    page.what_is('location_viewport')\n    \nNote that two properties are Enums, `.public` handled by `Privacy` and `.location_viewport` handled by `Location`.\nThis is to avoid arbitrary values:\n\n    p.public = Privacy['public']\n    p.public = p.public.__class__['public'] # if you forgot/don't want to import `Privacy`.\n\nIn addition two methods alter the page with new keys (`commit` still required). `page.clear_revisions()`\nand `page.refresh_image()`.\n\nTo display in a Jupyter notebook a link and a thumbnail use `page.show_link()`, however will not work in terminal.\n\nSome methods are duplicated between `MikeAPI` and `MikePage`.\n  \n* `page.retrieve()` = `mike.set_page(uuid)`\n* `page.commit()` = `mike.set_page(uuid, page)`\n* `page.delete()` = `mike.del_page(uuid)`\n* `page.shorten(short)` = `mike.shorten_page(uuid, short)`\n\nThere is no difference.\n\nAltering 'loadfun' (the JS) and 'pdb' is restricted to admin and approved users.\n\nAs changing the variable name in 'proteins' for the PDB code requires it to be changed in 'pdb'.\n\n    page.proteins[2]['value'] = 'altered_variable_name'\n    page.pdb['altered_variable_name']\n    \nThe method `.rename_protein_variable()` does this for you.\n    \nProteins stored in GitHub can be added via `page.append_github_entry(self, username, repo, path)` where the name\nwill be a sluggified filename.\n    \n## Page creation\nNew pages can be added using either a pdb code or a filename with additional arguments as used by prolinks,\nbut with underscores instead of spaces.\n\n    new_page = mike.convert_pdb(code='1UBQ', data_focus='residue', data_selection='20:A')\n    new_page = mike.convert_pdb(filename='/home/my_protein.pdb')\n    \n## Admin commands\n\nSome commands are for admins only. Please do not try them out or you will get automatically blocked.\n\n## Table\n\nFor the Covid Moonshot, I made a few interactive tables with different poses,\n_eg._ [Fragmenstein hits](https://michelanglo.sgc.ox.ac.uk/data/13523b58-d0b1-4d05-9158-a8fd2be8465c).\n\nThis is not meant to be an official feature, but these can be made with the API by a **priviledged** users.\nThey require GitHub for storing the `mol` files.\nStarting with\n\n* `scores` a pandas table containing name, rdkit.Chem.Mol and some scores\n* `gitfolder` a str of the file path of the github repo\n* `folder` a str of the folder name within that repo\n\n```jupyterpython\ntargetfolder=f'{gitfolder}/{folder}'\n# make a smaller table and json store it\nscores['filename'] = page.pandas_to_mols(scores, targetfolder)\nheaders = ['filename', 'regarded', '∆∆G', 'comRMSD']\nmini = scores.loc[~scores.filename.isna()][headers]  # filename None has some issue.\nmini.to_json(f'{targetfolder}/data.json')\n# make a table\npage.make_fragment_table(metadata=dict(zip(headers, ['name', 'used hits', '∆∆G', 'RMSD'],\n               username='matteoferla',\n               repo_name='Data_for_own_Michelanglo_pages',\n               foldername=folder,\n               protein_sele='145:A', # show this on protein. NGL selection\n               sort_col=2, #sort by column index 2.\n               sort_dir='asc', #asc or desc\n               template_row=-1, # is the template a file called `template.pdb` (-1) or a filename in the row n?\n               fragment_row=1, # the inspiration fragments (-1 for none). The names must match with or without a .mol.\n               jsonfile='data.json')\npage.commit()\n```\nDon't forget to git add, commit and push\n\n## \"Merging\"\n\nThe object `MikePage` does not have a merge uuids like the website has. The reason for this is because this would be rather\nredundant and convoluted. To add structures to a page use the following methods:\n\n* append_github_entry\n* append_pdbfile\n* append_pdbblock\n* remove_protein\n\nOr operate upon the manually. PDBBlocks are stored in `.pdbs` (`Dict[str: str]`),\nwhile `.proteins` (`List[dict]`) stores the protein information.\n\n\n## More\n\nFor more, see [Sphinx generated documentation](sphinx-docs.md).\n\n## To Do\n\n* Get Uniprot chain definitions\n* read/write MD from/to cell\n* \n\n## Plotly\n\nWith JS priviledges it is possible to add a Plotly plot, by exporting via `fig.write_html(\"file.html\", include_plotlyjs='cdn')`\nand getting the content of `<body>` and adding to the description (with corrected indentation).\nUnfortunately, whereas the path-element of class `.point` contains the data values to determine what residue it is,\nI am not sure how to detect a specific click as this detects a click for the whole series...\n\n    document.getElementById('xxxx').on('plotly_hover', data =>\n        data.points.forEach(d => NGL.getStage().compList[0].addRepresentation(\"hyperball\", { sele: ''+d.data.x[0]}))\n    )",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matteoferla/MichelaNGLo-api",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "michelanglo-api",
    "package_url": "https://pypi.org/project/michelanglo-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/michelanglo-api/",
    "project_urls": {
      "Homepage": "https://github.com/matteoferla/MichelaNGLo-api"
    },
    "release_url": "https://pypi.org/project/michelanglo-api/1.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "API to interface with Michelanglo",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17442100,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b47322c05ca07b2a29e9a0c5423c9ccb21c51f88e044e3727d59fe34b1d20575",
        "md5": "7cc3c1b35f9763bc8794fc674a4e66ab",
        "sha256": "5d43474b9588a59ca0123a40dc79260b093245c99bc89e129be10dfa2615d530"
      },
      "downloads": -1,
      "filename": "michelanglo_api-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7cc3c1b35f9763bc8794fc674a4e66ab",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24424,
      "upload_time": "2021-04-21T15:30:07",
      "upload_time_iso_8601": "2021-04-21T15:30:07.465080Z",
      "url": "https://files.pythonhosted.org/packages/b4/73/22c05ca07b2a29e9a0c5423c9ccb21c51f88e044e3727d59fe34b1d20575/michelanglo_api-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}