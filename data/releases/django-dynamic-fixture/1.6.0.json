{
  "info": {
    "author": "paulocheque",
    "author_email": "paulocheque@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Operating System :: OS Independent",
      "Topic :: Software Development"
    ],
    "description": "=Description=\r\nA full library to create dynamic model instances for testing purposes.\r\n\r\n=Installation=\r\npip install django-dynamic-fixture\r\n\r\nor\r\n\r\n  # Download zip file\r\n  # Extract it\r\n  # Execute in the extracted directory: python setup.py install\r\n\r\n=Upgrade=\r\npip install django-dynamic-fixture --upgrade --no-deps\r\n\r\n=Motivation=\r\n  * It is a TERRIBLE practice to use STATIC data in tests. \r\n  * Create dynamic fixture for each model is boring and it produces a lot of replicated code.\r\n  * It is a bad idea to use uncontrolled data in tests, like bizarre random data.\r\n\r\n=Comparison with another fixture tools=\r\n\r\n  * We tried to use another fixture tools in a big Django project but the experience was not satisfactory. \r\n  * Either they are incomplete, or bugged or it produces erratic tests, because they use random and uncontrolled data.\r\n  * Also, the syntax of others tools is too verbose, which polutes the tests.\r\n  * Complete, lean and practice documentation.\r\n  * It is hard to debug tests with another tools.\r\n  * List of other tools: http://djangopackages.com/grids/g/fixtures\r\n\r\n=Features=\r\n  * Highly customizable: you can customize fields recursively\r\n  * Deal with unique=True\r\n  * Deal with cyclic dependencies (including self references)\r\n  * Deal with many to many relationship (common M2M or M2M with additional data, i.e. through='table')\r\n  * Deal with custom fields (specially if the custom field inherit of a django field)\r\n  * It is supported for parallel tests\r\n  * Deal with auto calculated attributes\r\n  * It is easy to debug errors\r\n\r\n=Example of Usage=\r\n\r\n{{{\r\nfrom django_dynamic_fixture import N, G, F, P\r\n#or use old default names:\r\n#from django_dynamic_fixture import new, get, DynamicFixture as F, print_field_values\r\n\r\n# Models:\r\n\r\nfrom django.db import models\r\n\r\nclass ModelA(models.Model): pass\r\n\r\nclass ModelY(models.Model):\r\n    other_text = models.CharField()\r\n    other_list = models.ManyToManyField('ModelA')\r\n\r\nclass ModelX(models.Model):\r\n    some_text = models.CharField(null=True)\r\n    parent_left = models.ForeingKey('self')\r\n    y_reference = models.ForeingKey('ModelY')\r\n    list_a = models.ManyToManyField('ModelA')\r\n\r\n# Summary:\r\n\r\n# DynamicFixture (F): receive arguments and create model instances.\r\n# new: it is just a wrapper: it creates a F to create a not saved model instance.\r\n# get: basically, call the new method and save the instance. You can set ManyToMany fields only after the instance is saved.\r\n\r\n# Examples:\r\n\r\ninstance_of_modelx = N(ModelX)\r\nassert instance_of_modelx.some_text != None\r\nassert instance_of_modelx.parent_left != None\r\nassert instance_of_modelx.parent_left.parent_left == None\r\nassert instance_of_modelx.id == None # new do not save the instance\r\nassert instance_of_modelx.y_reference.id != None # save dependencies by default\r\nassert len(instance_of_modelx.list_a.all()) == 0 # do not create many2many fields by default\r\n\r\ninstance_of_modelx = N(ModelX, fill_nullable_fields=False) # default = True\r\nassert instance_of_modelx.some_text == None\r\n\r\n# you can ignore fields, but do not ignore required fields (with null=False).\r\ninstance_of_modelx = G(ModelX, ignore_fields=['some_text'])\r\nassert instance_of_modelx.some_text == None\r\n\r\n# Very nice feature to work with trees\r\ninstance_of_modelx = N(ModelX, number_of_laps=2) # default = 1\r\nassert instance_of_modelx.parent_left != None\r\nassert instance_of_modelx.parent_left.parent_left != None\r\nassert instance_of_modelx.parent_left.parent_left.parent_left == None\r\n\r\n# This feature is specially useful to test search methods\r\ninstance_of_modelx = N(ModelX, some_text='some fixed data') # attribute accepts static data\r\nassert instance_of_modelx.some_text == 'some fixed data'\r\n\r\n# Use this with attention. First, check for design mistakes\r\ninstance_of_modelx = N(ModelX, id=99999) # you can define the id too\r\nassert instance_of_modelx.id == 99999\r\n\r\n# You can create your own function to create data..\r\ninstance_of_modelx = N(ModelX, some_text=lambda field: field.name) # attribute accepts callables\r\nassert instance_of_modelx.some_text == 'some_text'\r\n\r\n# Use this with attention, you can get an error if you try to save an instance with not saved dependencies\r\ninstance_of_modelx = N(ModelX, persist_dependencies=False)\r\nassert instance_of_modelx.y_reference.id == None\r\n\r\ninstance_of_modelx = G(ModelX) # get save the model instance\r\nassert instance_of_modelx.id != None\r\n\r\ninstance_of_modelx = G(ModelX, list_a=2) # Many2Many can receive a number of instances to be created\r\nassert len(instance_of_modelx.list_a.all()) == 2\r\n\r\ninstance_of_modelx = G(ModelX, list_a=[F(), F(), F()]) # Many2Many can receive a list of DynamicFixtures\r\nassert len(instance_of_modelx.list_a.all()) == 3\r\n\r\na = G(ModelA)\r\ninstance_of_modelx = G(ModelX, list_a=[F(), a, F()]) # Many2Many can receive a list of instances\r\nassert len(instance_of_modelx.list_a.all()) == 3\r\n\r\n# You can pass arguments to F (DynamicFixture) recursively. This works for ForeignKey and ManyToMany Fields! Easy and customizable!\r\ninstance_of_modelx = G(ModelX, parent_left=F(other_text='wow', other_list=2))\r\nassert len(instance_of_modelx.y_reference.other_list.all()) == 2\r\n\r\n# Highly recursivable example:\r\n# X has a ForeignKey to A\r\n# A has a ForeignKey to B\r\n# B has a ForeignKey to C\r\n# this will create instances of C, B, A and X (in this order). Attribute d of C will be 'some value'\r\nG(X, a=F(b=F(c=F(d='some value'))))\r\n\r\n\r\n# for debug:\r\nP(instance_of_modelx)\r\n\r\n# Custom FileField:\r\nclass ModelX(models.Model):\r\n    my_file = models.FileField(upload_to='/')\r\n\r\nfrom tempfile import mkstemp\r\npdf_a = File(open(mkstemp()[1], 'w'), name='a.pdf')\r\nG(ModelX, my_file=pdf_a)\r\n\r\n# Copier\r\nG(ModelX, my_field=C('my_field_y.x'))\r\n\r\n# Shelve/Library\r\nG(ModelX, my_field='x', shelve=True)\r\nG(ModelX, use_library=True)\r\n\r\n# Named Shelve\r\nG(ModelX, my_field='x', shelve='some name')\r\nG(ModelX, use_library=True, named_shelve='some name')\r\n\r\n\r\n# Shelving before all tests of a module:\r\ndef setUpModule():\r\n    N(ModelX, my_field='x', shelve=True)\r\n    \r\n# Shelving before all tests of all modules:\r\nAdd in ddf_setup.py:\r\nN(ModelX, my_field='x', shelve=True)\r\n\r\nRun with nose plugin:\r\npython manage.py test --with-ddf-setup\r\n\r\n}}}\r\n\r\n== Decorators ==\r\n\r\n{{{\r\nfrom django_dynamic_fixture.decorators import skip_for_database, only_for_database, SQLITE3 \r\n\r\n@only_for_database(SQLITE3)\r\ndef test_something1(self): pass\r\n\r\n@skip_for_database(SQLITE3)\r\ndef test_something2(self): pass\r\n\r\n@only_for_database(\"some value used in settings.DATABASES['default']['ENGINE']\")\r\ndef test_something3(self): pass\r\n\r\n@skip_for_database(\"some value used in settings.DATABASES['default']['ENGINE']\")\r\ndef test_something4(self): pass\r\n}}}\r\n\r\n== Queries Module ==\r\n{{{\r\npython manage.py test --with-queries\r\npython manage.py count_queries_on_save\r\n}}}\r\n\r\n=Information about the logic of the library=\r\n\r\n==List of exceptions==\r\n  * UnsupportedFieldError: DynamicFixture does not support this field.\r\n  * InvalidConfigurationError: The specified configuration for the field can not be applied or it is bugged.\r\n  * InvalidManyToManyConfigurationError: M2M attribute configuration must be a number or a list of DynamicFixture or model instances.\r\n  * BadDataError: The data passed to a field has some problem (not unique or invalid) or a required attribute is in ignore list.\r\n  * InvalidCopierExpressionError: The specified expression used in a Copier is invalid.\r\n  * InvalidModelError: Invalid Model: The class is not a model or it is abstract.\r\n\r\n\r\n==DynamicFixture assume==\r\n\r\n  * if a field has a default value, it does not have unique=True.\r\n  * if a field has choices, it does not have unique=True.\r\n  * if there is a cyclic dependency, in some part the relationship must be nullable.\r\n  * if any of these requirements is a problem, you have to use customized values or override the behavior.\r\n\r\n==DynamicFixture rules==\r\n\r\n===General===\r\n\r\n  * The id (AutoField) is auto filled, unless you set a value to it.\r\n  * if a field has default value, it will be used by default.\r\n  * if a field has choices, it select each the first option by default.\r\n  * it fill nullable fields with data unless fill_nullable_fields is False.\r\n  * boolean fields will always receive False, unless it has default value.\r\n  * null boolean fields will always receive None, unless it has default value.\r\n  * Strings (CharField, Text, Url, Email...) and numbers (IntegerField, Float, Decimal...) are filled with a sequential and unique number for each test (1, '1', 2, '2'...). Each attribute has its own counter.\r\n  * You can override the behavior of the string and number fillers, if you want to.\r\n\r\n===Custom Attributes===\r\n\r\n  * if it receive a customized data, it do not care about attributes null, unique, default or choices.\r\n  * if the specified fixture was bugged, it will raise an InvalidConfigurationError.\r\n\r\n===Custom Fields===\r\n\r\n  * if it does not recognize the Field class, it will raise an UnsupportedFieldError.\r\n  * if a field is not default in Django, but it inherits from a Django field, it will be filled using its config.\r\n  * if a field is not default in Django and not related with a Django field, it will raise an UnsupportedFieldError.\r\n  * Customized data is also valid for unsupported fields.\r\n\r\n===Related Objects===\r\n\r\n  * ForeignKey will be filled by default, considering unicity of data.\r\n  * It deal with cyclic dependencies, including self references (this avoid infinite recursion).\r\n  * By default, the fixture create just one cycle, but it is possible to specify more maps with number_of_laps parameter.\r\n\r\n\r\n===Many to Many relationship===\r\n\r\n  * To add models in a m2m relation, the model must be persisted, so use the 'get' method.\r\n  * it expect to receive a parameter with the amount of instances that need to be created (using default configuration).\r\n  * Also, it can receive a list with DynamicFixture (F) or model instances (for custom items). The size of the list is the number of items that will be created.\r\n  * It works for default Many2Many and Many2Many with through.\r\n\r\n\r\n===Ignoring fields===\r\n\r\n  * Useful when some fields need some calculation. For example, Django-MPTT models.\r\n  * Ignored fields are propagated ONLY to self references.\r\n  * Do not ignore required fields with 'get', only with 'new'. In other words, do not save an instance without a required field, unless you are expecting for an exception.\r\n\r\n\r\n===Patterns===\r\n\r\n  * Use 'new' method for unit tests (not integration tests) for the main model.\r\n  * Use 'ignore_fields' option to deal with fields filled by listeners.\r\n  * Use custom values for unsupported fields.\r\n  * Use 'number_of_laps' option to test trees.\r\n\r\n\r\n===Anti-Patterns===\r\n\r\n  * Use a auto generated data in an assertion method.\r\n\r\n\r\n=Links of Comments=\r\n  * http://www.reddit.com/r/django/comments/fv1re/django_dynamic_fixture\r\n  * http://djangopackages.com/grids/g/fixtures/\r\n  * http://news.ycombinator.com/item?id=2275406\r\n  * http://pythonsmalltalk.blogspot.com/2011/02/django-dynamic-fixture.html\r\n  * http://pythonsmalltalk.blogspot.com/2011/03/django-dynamic-fixture-121.html\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.2\r\n  * http://code.activestate.com/pypm/django-dynamic-fixture\r\n  * http://groups.google.com/group/django-mptt-dev/browse_thread/thread/d9eb9e22ad4aa656\r\n  * http://groups.google.com/group/django-users/browse_thread/thread/1346a60008c21a7b\r\n  * http://groups.google.com/group/django-brasil/browse_thread/thread/757df09d3c3be81d\r\n  * http://linux.softpedia.com/get/Internet/HTTP-WWW-/django-dynamic-fixture-68711.shtml\r\n\r\n\r\n=Change Log=\r\n\r\n==Version 1.6.0==\r\n  * 2012/03/31 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.6.0\r\n  * New features in DDF:\r\n  * Copier: option to copy a generated value for a field to another one. Useful for denormalizated fields.\r\n  * Shelve/Library: option to store a default configuration of a specific model. Useful to avoid replicated code of fixtures. Global option: DDF_USE_LIBRARY.\r\n  * Named Shelve: option to store multiple configurations for a model in the library.\r\n  * Nose plugin for global set up\r\n\r\n==Version 1.5.1==\r\n  * 2012/03/26 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.5.0\r\n  * New fatures in DDF:\r\n  * global option: DDF_VALIDATE_ARGS that enable or disable field names.\r\n  \r\n  * BugFixes of 1.5.0:\r\n  * F feature stop working.\r\n\r\n==Version 1.5.0==\r\n  * 2012/03/25 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.5.0\r\n  * New features in DDF:\r\n  * global settings: DDF_DEFAULT_DATA_FIXTURE, DDF_FILL_NULLABLE_FIELDS, DDF_IGNORE_FIELDS, DDF_NUMBER_OF_LAPS, DDF_VALIDATE_MODELS\r\n  * new data fixture that generates random data\r\n  * new data fixture that use sequential numbers only for fields that have unique=True\r\n  * P function now accept a list of model instances\r\n  * Option to call model_instance.full_clean() validation method before saving the object (DDF_VALIDATE_MODELS).\r\n  * Validate field names. If a invalid field name is passed as argument, it will raise an InvalidConfigurationError exception.\r\n  * DateField options 'auto_add_now' and 'auto_add' are disabled if a custom value is used.\r\n\r\n==Version 1.4.3==\r\n  * 2012/02/23 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.4.3\r\n  * Bugfix in ForeignKeys with default values\r\n\r\n==Version 1.4.2==\r\n  * 2011/11/07 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.4.2\r\n  * Bugfix in FileSystemDjangoTestCase\r\n\r\n==Version 1.4.1==\r\n  * 2011/11/07 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.4.1\r\n  * New features in DDF:\r\n  * Now you can set a custom File to a FileField and the file will be saved in the file storage system.\r\n  \r\n  * New features in FileSystemDjangoTestCase:\r\n  * create_django_file_using_file create a django.File using the content of your file\r\n  * create_django_file_with_temp_file now accepts a content attribute that will be saved in the generated file\r\n\r\n  * Bugfix in FileSystemDjangoTestCase:\r\n  * now create_django_file_with_temp_file close the generated file\r\n\r\n==Version 1.4.0==\r\n  * 2011/10/29 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.4.0\r\n  * New features:\r\n  * Nose plugin to count queries on each test\r\n  * Command line to count queries on the save (insert and update) of each model\r\n  \r\n  * Bugfixes in DDF: \r\n  * Field with choice and default must use the default value, not the first choice value\r\n  * Validation if the class is a models.Model instance\r\n  * Showing all stack trace, when an exception occurs\r\n  \r\n  * Bugfixes in decorators: default values of database engines were not used correctly\r\n  * Bugfixes in FileSystemDjangoTestCase tests\r\n\r\n==Version 1.3.1==\r\n  * 2011/10/03 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.3.1\r\n  * Bugfixes in FileSystemDjangoTestCase\r\n\r\n==Version 1.3.0==\r\n  * 2011/10/03 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.3.0\r\n  * New Feature: File System Django Test Case\r\n  * New Feature: Decorators skip_for_database and only_for_database\r\n  * Bugfix: Inheritance problems, before this version the DDF filled fields with the attribute parent_link \r\n\r\n==Version 1.2.3==\r\n\r\n  * 2011/06/27 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.2.3\r\n  * Bugfix in string truncation to max_length\r\n\r\n==Version 1.2.2==\r\n\r\n  * 2011/05/05 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.2.2\r\n  * Improvements in exception messages\r\n\r\n==Version 1.2.1==\r\n\r\n  * 2011/03/11 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.2.1\r\n  * Propagate ignored fields to self references\r\n  * Refactoring + Bug fixes\r\n\r\n==Version 1.2==\r\n  * 2011/03/04 (yyyy/mm/dd)\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.2\r\n  * New Feature: ignore_fields\r\n  * New Feature: now it is possible to set the ID\r\n\r\n==Version 1.1==\r\n  * Bug fixes\r\n  * http://pypi.python.org/pypi/django-dynamic-fixture/1.0 (1.0 has the 1.1 package)\r\n\r\n==Version 1.0==\r\n  * Initial version\r\n  * Ready to use in big projects\r\n\r\n\r\n= Testing = \r\n* python manage.py test\r\n* python manage.py test --with-coverage --cover-inclusive --cover-html --cover-package=django_dynamic_fixture.* --with-queries\r\n\r\n\r\n= TODO List =\r\n* auto config of denormalizated fields\r\n* with_queries documentation and bugfixes (always print 0 queries)\r\n* related_name documentation or workaround\r\n* today, yesterday, tomorrow on fdf\r\n* bugfix in fdf or ddf: some files/directories are not deleted\r\n* tests with files in ddf\r\n* tests with proxy models\r\n* doc factory: example to generate models with validators in fields or in clean methods\r\n* tests with GenericRelations, GenericForeignKey etc\r\n* more tests with OneToOneField(parent_link=True)\r\n* documentation: examples of usage\r\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/paulocheque/django-dynamic-fixture",
    "keywords": "python django testing fixture",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-dynamic-fixture",
    "package_url": "https://pypi.org/project/django-dynamic-fixture/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-dynamic-fixture/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://bitbucket.org/paulocheque/django-dynamic-fixture"
    },
    "release_url": "https://pypi.org/project/django-dynamic-fixture/1.6.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A full library to create dynamic model instances for testing purposes.",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11609268,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d4dab0da7c7962cb4be6674af26a7fd206bcc4b4d1fa1f44eeaa7a9aefdecf2f",
        "md5": "1850226f564ec07b5628f4023e408e70",
        "sha256": "95c5a5f37d7374829a14fa3a0b4538186d686b6dd04f8514210b4eb890f1e41a"
      },
      "downloads": -1,
      "filename": "django-dynamic-fixture-1.6.0.zip",
      "has_sig": false,
      "md5_digest": "1850226f564ec07b5628f4023e408e70",
      "packagetype": "bdist_egg",
      "python_version": "2.6",
      "requires_python": null,
      "size": 43539,
      "upload_time": "2012-04-03T18:29:57",
      "upload_time_iso_8601": "2012-04-03T18:29:57.611814Z",
      "url": "https://files.pythonhosted.org/packages/d4/da/b0da7c7962cb4be6674af26a7fd206bcc4b4d1fa1f44eeaa7a9aefdecf2f/django-dynamic-fixture-1.6.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}