{
  "info": {
    "author": "Jacob Rief",
    "author_email": "jacob.rief@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# django-SHOP\n\n**Django-SHOP** aims to be a the easy, fun and fast e-commerce counterpart to\n[django-CMS](https://www.django-cms.org/).\n\n[![Build Status](https://travis-ci.org/awesto/django-shop.svg?branch=master)](https://travis-ci.org/awesto/django-shop?branch=master)\n[![PyPI version](https://img.shields.io/pypi/v/django-shop.svg)](https://pypi.python.org/pypi/django-shop)\n[![Python versions](https://img.shields.io/pypi/pyversions/django-shop.svg)](https://pypi.python.org/pypi/django-shop)\n[![Join the chat at https://gitter.im/awesto/django-shop](https://badges.gitter.im/awesto/django-shop.svg)](https://gitter.im/awesto/django-shop?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Software license](https://img.shields.io/pypi/l/django-shop.svg)](https://pypi.python.org/pypi/django-shop)\n[![Twitter Follow](https://img.shields.io/twitter/follow/djangoSHOP.svg?style=social&label=djangoSHOP)](https://twitter.com/djangoSHOP)\n\nHere you can find the [full documentation for django-SHOP](https://django-shop.readthedocs.io/en/latest/).\n\n## Version 1.1 has been released!\n\nSee below on how to install it using the Cookiecutter template. It now supports up to django-CMS 3.7\nand Django-2.2.\n\n\n## Build the database model out of the product's properties – not vice versa\n\nMost e-commerce systems are shipped with a predefined database model for products. But products can\nvary a lot, and it simply is impossible to create a model which fits for all of them. This is\nesspecially true for products with a hierarchy of variants. In many popular e-commerce platforms,\nyou either have far too many attributes per product, and/or the really required attributes are\nmissing.\n\nIn **django-SHOP** implementations, the product models reflect their pysical properties making it\npossible to create complete and deep hierarchies of variations, but without having to fiddle with\nunneeded properties. It furthermore avoids the need for an\n[Entity Attribute Value Model](https://en.wikipedia.org/wiki/Entity–attribute–value_model), which\nis considered a database anti-pattern, because it produces far too many table joins, when filtering\nby property.\n\n\n## Don't build pages using hard-coded templates – compose them\n\nWith the advent of frameworks, such as Angular, React, Vue and Aurelia, building web-applications\nshifted from a page-centric to a component-based approach.\n\nIn **django-SHOP**, you are in full control over the page's layout, since all components are\nencapsulated and independent from each other. This means that instead of adopting the Catalog, Cart,\nCheckout and Order pages, use the **django-CMS** plugin system to compose everything required for\nthose pages.\n\n\n## All Views are either HTML or RESTful services\n\nBrowser based navigation is important, but nowadays it's only one of many channels, clients\ncommunicate with a web-server. Consider Single Page Applications or other native clients, where we\nuse RESTful APIs instead of pure HTTP.\n\nThis strongly reduces the payload having to be transferred. It furthermore gives the client a\nsmoother user experience, since only the content has to be updated, rather than having to do full\npage reloads.\n\n\n## Programmable cart modifiers\n\nDuring checkout, taxes have to be applied or attributed. Depending on the shipping destination, the\nproduct group and other factors, this computation can either be simple or quite demanding.\n**Django-SHOP** offers a pluggable interface, to create modifiers which calculate the cart's totals,\ntaxes and other costs.\n\nThis same interface can be extended to compute the weight and shipping costs. It also can be used\nfor subtracting discounts or to add additional charges. \n\n\n## Programmable workflow for fulfilment and delivery\n\nFulfilling and shipping orders, probably is that part in e-commerce, which requires the most\nindividual adaption. **Django-SHOP** offers a programmable interface for orders, by using a finite\nstate machine to adopt the workflow. Each order may have several states, but only those actions\nmay be performed, for which state transitions are explicitly possible.\n\n\n## It's modular\n\nWhenever possible, extra features shall be added to third party libraries. This implies that\n**django-SHOP** aims to provide an API, which allows merchants to add every feature they desire.\n\nCurrently there are third party libraries for several Payment Service Providers, such as\n[PayPal](https://developer.paypal.com/docs/api/overview/), [Stripe](https://stripe.com/docs/api),\n[BS-PayOne](https://www.bspayone.com/DE/en) and [Viveum](https://www.viveum.com/?lang=en).\nAn open interface allows you to add any other provider.\n\nShipping Service Providers may be added as third party library as well. With\n[SendCloud](https://docs.sendcloud.sc/), ship your orders using one or more parcel services\navailable for your region.\n\n\n## Start by building your own demo\n\nInstead of providing an accessible online demo, **django-SHOP** can be set up in less than three\nminutes, and preconfigured to your needs. Having access to the product models, you can immediate\nstart to play arround, rename them, and modify them to reflect the properties of your products.\nThis is the easiest way to get a shop up and running out of the box, with the flexibility of a\nweb-site which could have been built from scratch by yourself.\n\nIf you want to start with a fresh demo, please use the prepared\n[Cookiecutter template for django-SHOP](https://github.com/awesto/cookiecutter-django-shop)\nand follow the instructions. \n\nTo get a first impression of the upcoming release 1.1, please use this\n[Cookiecutter template for django-SHOP version 1.1](https://github.com/awesto/cookiecutter-django-shop/tree/releases/1.1)\n\n\n## Audience of django-SHOP users\n\nSpecifically, we aim at providing a clean, modular and Pythonic/Djangonic implementation of an\ne-commerce framework, that a moderately experienced Django developer should be able to pick up\nand run easily. Pure Django models are used to describe each product type, and so the Django admin\nshall be used to build a minimalistic editor for each of them.\n\n\n## Consultancy\n\nWe provide full consultancy support and are available for building complete e-commerce systems based\non **django-SHOP**. Please contact office@awesto.com for further questions.\n\n\n## Documentation\n\nRead the full documentation on Read-the-docs:\n\n[https://django-shop.readthedocs.io/en/latest/](https://django-shop.readthedocs.io/en/latest/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.django-shop.org/",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-shop",
    "package_url": "https://pypi.org/project/django-shop/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-shop/",
    "project_urls": {
      "Homepage": "http://www.django-shop.org/"
    },
    "release_url": "https://pypi.org/project/django-shop/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A RESTful e-commerce framework based on Django",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9299671,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3c136040d4b56ff263965e0bc0c83d8ec043bd6c4df923b112c0da2b2c9847f",
        "md5": "78711a8f853e3ff5fe2ef02465ee2b10",
        "sha256": "ae528db0285b57d655692f1b958bed477e5fdd20967728d17f57db9ff7f4df25"
      },
      "downloads": -1,
      "filename": "django-shop-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "78711a8f853e3ff5fe2ef02465ee2b10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 387349,
      "upload_time": "2020-05-23T19:39:19",
      "upload_time_iso_8601": "2020-05-23T19:39:19.685937Z",
      "url": "https://files.pythonhosted.org/packages/b3/c1/36040d4b56ff263965e0bc0c83d8ec043bd6c4df923b112c0da2b2c9847f/django-shop-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}