{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": "# Seamlessly manage Python virtual environment with a Makefile\n\n*Makefile.venv* takes care of creating, updating and invoking Python virtual\nenvironment that you can use in your Makefiles. It will allow you to reduce\nvenv related routines to almost zero!\n\n[![test status][badge]][tests]\n\n[badge]: https://github.com/sio/Makefile.venv/workflows/Run%20automated%20tests/badge.svg\n[tests]: https://github.com/sio/Makefile.venv/actions?query=branch%3Amaster+\n\n*Makefile.venv* aims to be an one-stop solution for Python virtual environment\nmanagement, regardless of the format used to define the venv: requirements.txt\nand setup․py are supported out of the box because they have become de-facto\nstandards, but if anything else will take their place - Makefile.venv will\nsupport that too. [Pip-compile], pipenv and poetry are compatible but require\nsome configuration.\n\n\n## Installation\n\n### Recommended method\n\nCopy [*Makefile.venv*](Makefile.venv) to your project directory and add\ninclude statement to the bottom of your `Makefile`:\n\n```make\ninclude Makefile.venv\n```\n\n### Alternative method\n\nAlternatively, you can add installation actions as the Makefile recipe:\n\n> **Note the checksum step!** Do not skip it, it would be as bad as [piping curl\n> to shell](https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/)!\n\n```make\ninclude Makefile.venv\nMakefile.venv:\n\tcurl \\\n\t\t-o Makefile.fetched \\\n\t\t-L \"https://github.com/sio/Makefile.venv/raw/v2022.07.20/Makefile.venv\"\n\techo \"147b164f0cbbbe4a2740dcca6c9adb6e9d8d15b895be3998697aa6a821a277d8 *Makefile.fetched\" \\\n\t\t| sha256sum --check - \\\n\t\t&& mv Makefile.fetched Makefile.venv\n```\n\n> Notes:\n>\n> * *curl* and/or *sha256sum* may not be available by default depending on what\n>   OS and configuration is used\n> * To install *sha256sum* on macOS use `brew install coreutils`\n> * You can use Perl's *shasum -a 256* instead of *sha256sum*, as described\n>   [here](https://github.com/sio/Makefile.venv/issues/11).\n\n### Another alternative method\n\nIf you want to use *Makefile.venv* in multiple projects and to be able to\nconveniently manage *Makefile.venv* version from one place you might find this\n[pip package] useful:\n\n- Install globally: `pip install Makefile.venv` or\n- Install for current user: `pip install --user Makefile.venv`\n\nThis package will install *Makefile.venv* into your `site-packages/` and will\nadd a command-line entrypoint which prints the full path to *Makefile.venv*.\nInclude it it in your makefiles like this:\n\n```make\ninclude $(shell Makefile.venv)\n```\n\n[pip package]: https://pypi.org/project/Makefile.venv/\n\n\n## Usage\n\nWhen writing your Makefile use `$(VENV)/python` to refer to the Python\ninterpreter within virtual environment and `$(VENV)/executablename` for any\nother executable in venv.\n\n*Makefile.venv* is not meant to be used as a standalone tool, think of it more\nlike a library that enables extra functionality.\n\n\n## Demo screencast\n\n<a href=\"https://asciinema.org/a/279646\" target=\"_blank\">\n<img src=\"https://asciinema.org/a/279646.svg\" title=\"Demo screencast\"/>\n</a>\n\n\n## Targets\n\n*Makefile.venv* provides the following targets. Some are meant to be executed\ndirectly via `make $target`, some are meant to be dependencies for other\ntargets written by you.\n\n##### venv\n\nUse this as a dependency for any target that requires virtual environment to\nbe created and configured.\n\n*venv* is a .PHONY target and rules that depend on it will be executed every\ntime make is run. This behavior is sensible as default because most Python\nprojects use Makefiles for running development chores, not for artifact\nbuilding. In cases where that is not desirable use [order-only prerequisite]\nsyntax:\n\n```make\nartifacts.tar.gz: | venv\n\t...\n```\n\n[order-only prerequisite]: https://www.gnu.org/software/make/manual/html_node/Prerequisite-Types.html\n\n##### python, ipython\n\nExecute these targets to launch interactive Python shell within virtual\nenvironment. Ipython is not installed by default when creating the virtual\nenvironment but will be installed automatically when called for the first\ntime.\n\n##### shell, bash, zsh\n\nExecute these targets to launch interactive command line shell. `shell` target\nlaunches the default shell Makefile executes its rules in (usually /bin/sh).\n`bash` and `zsh` can be used to refer to the specific desired shell (if it's\ninstalled).\n\n##### show-venv\n\nExecute this target to show versions of Python and pip, and the path to the\nvirtual environment. Use this for debugging purposes.\n\n##### clean-venv\n\nExecute this target to remove virtual environment. You can add this as a\ndependency to the `clean` target in your main Makefile.\n\n##### $(VENV)/executablename\n\nUse this target as a dependency for tasks that need `executablename` to be\ninstalled if `executablename` is not listed as project's dependency neither in\n`requirements.txt` nor in `setup.py`. Only packages with names matching the\nname of the corresponding executable are supported.\n\nThis can be a lightweight mechanism for development dependencies tracking.\nE.g. for one-off tools that are not required in every developer's\nenvironment, therefore are not included in formal dependency lists.\n\n**Note:** Rules using such dependency MUST be defined below\n`include` directive to make use of correct $(VENV) value.\n\nExample (see `ipython` target for another example):\n\n```Makefile\ncodestyle: $(VENV)/pyflakes  # `venv` dependency is assumed and may be omitted\n\t$(VENV)/pyflakes .\n```\n\n## Variables\n\n*Makefile.venv* can be configured via following variables:\n\n##### PY\n\nCommand name for system Python interpreter. It is used only initially to\ncreate the virtual environment. *Default: python3*\n\n##### REQUIREMENTS_TXT\n\nSpace separated list of paths to requirements.txt files.\nPaths are resolved relative to current working directory.\n*Default: requirements.txt*\n\nNon-existent files are treated as hard dependencies, recipes for creating such\nfiles must be provided by the main Makefile (sample usage: [pip-compile]).\nProviding empty value (`REQUIREMENTS_TXT=`) turns off processing of\nrequirements.txt even when the file exists.\n\n[pip-compile]: docs/howto-pip-compile.md\n\n##### SETUP_PY\n\nSpace separated list of paths to setup․py files. Corresponding packages will\nbe installed into venv in [editable mode] along with all their dependencies.\n*Default: setup․py*\n\nNon-existent and empty values are treated in the same way as for REQUIREMENTS_TXT.\n\n[editable mode]: https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs\n\n##### WORKDIR\n\nParent directory for the virtual environment. *Default: current working\ndirectory*\n\n##### VENVDIR\n\nPython virtual environment directory. *Default: $(WORKDIR)/.venv*\n\n##### PIP_*\n\nVariables named starting with `PIP_` are not processed by *Makefile.venv* in\nany way and are passed to underlying pip calls as is. See [pip\ndocumentation](https://pip.pypa.io/en/stable/user_guide/#environment-variables)\nfor more information.\n\nUse these variables to customize pip invocation, for example to provide custom\npackage index url:\n\n```\nPIP_EXTRA_INDEX_URL=\"https://your.index/url\"\n```\n\n\n## Samples\n\nMakefile:\n\n```make\n.PHONY: test\ntest: venv\n\t$(VENV)/python -m unittest\n\ninclude Makefile.venv\n```\n\nLarger sample from a real project can be seen\n[here](https://github.com/sio/issyours/blob/master/Makefile).\nAlso see [an introductory blog\npost](https://potyarkin.ml/posts/2019/manage-python-virtual-environment-from-your-makefile/)\nfrom project author.\n\nCommand line:\n\n```\n$ make test\n\n...Skipped: creating and updating virtual environment...\n\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\n\nOK\n```\n```\n$ make show-venv\nPython 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:07:06) [MSC v.1900 32 bit (Intel)]\npip 19.2.3 from c:\\users\\99e7~1\\appdata\\local\\temp\\.venv\\lib\\site-packages\\pip (python 3.5)\nvenv: C:\\Users\\99E7~1\\AppData\\Local\\Temp\\.venv\n```\n```\n$ make python\nC:/Users/99E7~1/AppData/Local/Temp/.venv/Scripts/python\nPython 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:07:06) [MSC v.1900 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> _\n```\n\n\n## Compatibility\n\n*Makefile.venv* was written for GNU Make and may not work with other make\nimplementations. Please be aware that GNU Make [can not correctly handle][spaces]\nwhitespace characters in file paths. Such filepaths therefore are\nconsidered unsupported by *Makefile.venv*\n\n[spaces]: https://stackoverflow.com/questions/9838384/can-gnu-make-handle-filenames-with-spaces\n\n*Makefile.venv* is being [continuously tested][tests] on Linux, Windows and macOS. Any\ninconsistency encountered when running on Windows should be considered a bug\nand should be reported via [issues].\n\n\n## Support and contributing\n\nIf you need help with using this Makefile or including it into your project,\nplease create **[an issue][issues]**.\nIssues are also the primary venue for reporting bugs and posting feature\nrequests. General discussion related to this project is also acceptable and\nvery welcome!\n\nIn case you wish to contribute code or documentation, feel free to open\n**[a pull request](https://github.com/sio/Makefile.venv/pulls)**. That would\ncertainly make my day!\n\nI'm open to dialog and I promise to behave responsibly and treat all\ncontributors with respect. Please try to do the same, and treat others the way\nyou want to be treated.\n\nIf for some reason you'd rather not use the issue tracker, contacting me via\nemail is OK too. Please use a descriptive subject line to enhance visibility\nof your message. Also please keep in mind that public discussion channels are\npreferable because that way many other people may benefit from reading past\nconversations. My email is visible under the GitHub profile and in the commit\nlog.\n\n[issues]: https://github.com/sio/Makefile.venv/issues\n\n\n## License and copyright\n\nCopyright 2019-2022 Vitaly Potyarkin\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sio/Makefile.venv",
    "keywords": "makefile,virtualenv,env",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Makefile.venv",
    "package_url": "https://pypi.org/project/Makefile.venv/",
    "platform": null,
    "project_url": "https://pypi.org/project/Makefile.venv/",
    "project_urls": {
      "Homepage": "https://github.com/sio/Makefile.venv"
    },
    "release_url": "https://pypi.org/project/Makefile.venv/2022.7.20/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Seamlessly manage Python virtual environment with a Makefile",
    "version": "2022.7.20",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14503386,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af920d99d07f57f04f40ff93888d8ac1c783de573cc64db7c0fdf8d468deb914",
        "md5": "07a9618c89e664866cb2ba5dbf4032b6",
        "sha256": "fdc0900da23e0e51038ee1a490e27ed1aa77afefc5bde5362d5b0633aa566d27"
      },
      "downloads": -1,
      "filename": "Makefile.venv-2022.7.20-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07a9618c89e664866cb2ba5dbf4032b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22093,
      "upload_time": "2022-07-21T09:28:48",
      "upload_time_iso_8601": "2022-07-21T09:28:48.394099Z",
      "url": "https://files.pythonhosted.org/packages/af/92/0d99d07f57f04f40ff93888d8ac1c783de573cc64db7c0fdf8d468deb914/Makefile.venv-2022.7.20-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfb5609af8fa5a72b3613d5a89ed8e70fc80817a0f7fd0fd3bbc2b32cc6ebadc",
        "md5": "84dce9186d31c0d8ee816dd18a7aa671",
        "sha256": "dd3e831cb206f589d3d376310d40b74be4c62e793c841743b9df4698b1e238aa"
      },
      "downloads": -1,
      "filename": "Makefile.venv-2022.7.20.tar.gz",
      "has_sig": false,
      "md5_digest": "84dce9186d31c0d8ee816dd18a7aa671",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15758,
      "upload_time": "2022-07-21T09:28:51",
      "upload_time_iso_8601": "2022-07-21T09:28:51.260847Z",
      "url": "https://files.pythonhosted.org/packages/cf/b5/609af8fa5a72b3613d5a89ed8e70fc80817a0f7fd0fd3bbc2b32cc6ebadc/Makefile.venv-2022.7.20.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}