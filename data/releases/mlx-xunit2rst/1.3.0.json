{
  "info": {
    "author": "JasperCraeghs",
    "author_email": "jce@melexis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Documentation",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://opensource.org/licenses/Apache-2.0\n    :alt: Apache 2.0 License\n\n.. image:: https://badge.fury.io/py/mlx.xunit2rst.svg\n    :target: https://badge.fury.io/py/mlx.xunit2rst\n    :alt: PyPI packaged release\n\n.. image:: https://github.com/melexis/xunit2rst/actions/workflows/python-package.yml/badge.svg?branch=master\n    :target: https://github.com/melexis/xunit2rst/actions/workflows/python-package.yml\n    :alt: Build status\n\n.. image:: https://img.shields.io/badge/Documentation-published-brightgreen.svg\n    :target: https://melexis.github.io/xunit2rst/\n    :alt: Documentation\n\n.. image:: https://codecov.io/gh/melexis/xunit2rst/coverage.svg\n    :target: https://codecov.io/gh/melexis/xunit2rst\n    :alt: Code Coverage\n\n.. image:: https://requires.io/github/melexis/xunit2rst/requirements.svg?branch=master\n    :target: https://requires.io/github/melexis/xunit2rst/requirements/?branch=master\n    :alt: Requirements Status\n\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg\n    :target: https://github.com/melexis/xunit2rst/issues\n    :alt: Contributions welcome\n\n=======================\nDocumentation xunit2rst\n=======================\n\nThis script can convert a JUnit/xUnit (.xml) file to a reStructuredText (.rst) file with traceable items.\n\n.. contents:: `Contents`\n    :depth: 2\n    :local:\n\n----\nGoal\n----\n\nThis script allows you to connect your test reports to your test cases via the `mlx.traceability`_ Sphinx extension.\n\n------------\nInstallation\n------------\n\n.. code-block:: console\n\n    pip3 install mlx.xunit2rst\n\n-----\nUsage\n-----\n\n.. code-block:: console\n\n    mlx.xunit2rst -i itest_report.xml -o my_lib_report.rst --prefix ITEST_MY_LIB-\n\n    mlx.xunit2rst --help\n\n    usage: xunit2rst [-h] -i INPUT_FILE -o RST_OUTPUT_FILE [--only EXPRESSION] [-s] [-p PREFIX]\n                     [--trim-suffix] [--unit-or-integration UNIT_OR_INTEGRATION] [-t TYPE] [-f]\n                     [-l LOG] [--links] [-v]\n\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i INPUT_FILE, --input INPUT_FILE\n                            The input XML file\n      -o RST_OUTPUT_FILE, --output RST_OUTPUT_FILE\n                            The output RST file\n      --only EXPRESSION     Expression of tags for Sphinx' `only` directive that surrounds all\n                            RST content. By default, no `only` directive is generated.\n      -s, --itemize-suites  Flag to itemize testsuite elements instead of testcase\n                            elements.\n      -p PREFIX, --prefix PREFIX\n                            Optional prefix to add to item IDs\n      --trim-suffix         If the suffix of the --prefix argument ends with '_-' it gets\n                            trimmed to '-'\n      --unit-or-integration UNIT_OR_INTEGRATION\n                            Deprecated alternative to --type; to be removed in version\n                            2.0.0.\n      -t TYPE, --type TYPE  Optional: give value starting with 'u', 'i' or 'q' to\n                            explicitly define the type of test:\n                            unit/integration/qualification test\n      -f, --failure-message\n                            Include the error message in case of test failure in the item's\n                            body.\n      -l LOG, --log LOG     Optional: path to the HTML log file, relative to where Sphinx\n                            will put the --output, to create a link to.\n      --links               Optional: inserts a link to the RobotFramework HTML log file\n                            for each test case as ext_robotframeworklog link id.\n      -v, --version         show program's version number and exit\n\nIf you use the ``--only`` input argument, you should also add |sphinx_selective_exclude.eager_only|_ to the\n``extensions`` list to prevent `mlx.traceability`_ from parsing the content and ignoring the effect of the\n``only`` directive.\n\n.. _`mlx.traceability`: https://pypi.org/project/mlx.traceability/\n.. |sphinx_selective_exclude.eager_only| replace:: ``'sphinx_selective_exclude.eager_only'``\n.. _sphinx_selective_exclude.eager_only: https://pypi.org/project/sphinx-selective-exclude/\n\n--------\nBehavior\n--------\n\nItemization\n===========\n\nBy default, all *testcase* elements from the input file are used to created treaceability items. This may not always be\ndesired. The ``-s, --itemize-suites`` flag lets the script itemize *testsuite* elements instead. In this case, the\n*testcase* elements will still be parsed to determine whether the testsuite passed or failed or skipped.\n\nTest Result of Itemized Suites\n------------------------------\n\nPass (passes)\n  No test cases have failed. Some might be skipped.\n\nFail (fails)\n  At least one test case has failed.\n\nSkip (skipped)\n  All test cases have been skipped.\n\nItem IDs\n========\n\nThe *name* attribute of the element to be itemized is used to build the item ID. Lower case letters get converted to\nupper case, whitespaces get converted to underscores, and *&* characters get converted to *AND*. A valid prefix must\nend with a hyphen to be recognized by the script. If there is an additional string prepended to this name by means of a\ndot, this string won't be taken into account. Example below:\n\n``MY_LIB.ITEST_MY_LIB-my function & keyword`` XML element name results in item ID\n``ITEST_MY_LIB-MY_FUNCTION_AND_KEYWORD``\n\nPrefix\n======\n\nTraceability item IDs have a prefix that is unique for the group they belong to, e.g. *ITEST_MY_LIB-*. The ``--prefix``\ninput argument lets you configure this prefix. It will be prepended to the item names found in the input file to build\nthe item ID. By default, the script adds *ITEST-* or *UTEST-* for integration or unit test reports, unless the prefixes\nalready exist in the input file.\n\nDistinction Between Unit and Integration Test Reports\n=====================================================\n\nTest reports that have a *testsuites* element as root in XML are treated as unit test reports. Otherwise the script\ntreats the input file as an integration test report. This discerning behavior gets overridden when prefixes are found in\nthe input file or the ``--prefix`` input argument is used. The script looks for a *U* or *I* as the first letter of the\nprefix. Lastly, you can explicitly define the type by using the ``--type`` input argument.\nIts value should start with *u* or *i* and gets parsed case-insensitively.\n\nInclude Message of Failure(s)\n=============================\n\nWhen the ``-f, --failure-message`` flag is set, the tool includes the messages of all failures and reasons for skipping\nof the item's test cases in its body.\n\nLinks to Log File\n=================\n\nUse input parameter ``-l, --log PATH_TO_FILE`` to add a link to the HTML log file. This path should be relative to the\nlocation where Sphinx outputs the HTML version of the RST file generated by this tool. Be sure to put this log file\nin Sphinx' source directory and add it to html_extra_path_ in your *conf.py*. This way, the log file will end up in\nthe root of Sphinx' output location.\n\nThe ``--links`` flag adds a link to each generated traceability item in the form of an `external relationship`_.\nThis requires you to configure the relationship `ext_robotframeworklog` in your *conf.py* like this:\n\n.. code-block:: python\n\n    traceability_relationships = {\n        'ext_robotframeworklog': '',\n    }\n    traceability_relationship_to_string = {\n        'ext_robotframeworklog': 'Details in log file',\n    }\n    traceability_external_relationship_to_url = {\n        'ext_robotframeworklog': 'field1#field2'\n    }\n\n.. _html_extra_path: https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-html_extra_path\n.. _external relationship: https://melexis.github.io/sphinx-traceability-extension/configuration.html#external-relationship-to-url-translation\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/melexis/xunit2rst",
    "keywords": "xUnit,JUnit,XML,reStructuredText,sphinx,rst,testing,traceability,documentation",
    "license": "Apache License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlx.xunit2rst",
    "package_url": "https://pypi.org/project/mlx.xunit2rst/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mlx.xunit2rst/",
    "project_urls": {
      "Homepage": "https://github.com/melexis/xunit2rst"
    },
    "release_url": "https://pypi.org/project/mlx.xunit2rst/1.3.0/",
    "requires_dist": [
      "mako"
    ],
    "requires_python": ">=3.6",
    "summary": "Python script for converting xUnit/JUnit XML format to reStructuredText (.rst) with traceable items",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17556798,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0f60f51c961290497042b6c5a214fac9ea76fb12b795fc486356538efb80e44",
        "md5": "0013825074524289e441b903262032e1",
        "sha256": "ae07f8432f8627e4182a958ea9188a72db8cd3536cd50e91e1262815459a419f"
      },
      "downloads": -1,
      "filename": "mlx.xunit2rst-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0013825074524289e441b903262032e1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 15087,
      "upload_time": "2022-09-16T08:00:51",
      "upload_time_iso_8601": "2022-09-16T08:00:51.926237Z",
      "url": "https://files.pythonhosted.org/packages/b0/f6/0f51c961290497042b6c5a214fac9ea76fb12b795fc486356538efb80e44/mlx.xunit2rst-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91ad6b754055c26f9177850f858fde64afb8cf4b1dfb28538d8319f2cb7d8c00",
        "md5": "d29fb6b9a0a532d33537e8ecce794a1e",
        "sha256": "d025662ccb570bb129c5ecbf8110a776a8068127ef285fd5bec43ad72d27f4e7"
      },
      "downloads": -1,
      "filename": "mlx.xunit2rst-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d29fb6b9a0a532d33537e8ecce794a1e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 28317,
      "upload_time": "2022-09-16T08:00:53",
      "upload_time_iso_8601": "2022-09-16T08:00:53.254422Z",
      "url": "https://files.pythonhosted.org/packages/91/ad/6b754055c26f9177850f858fde64afb8cf4b1dfb28538d8319f2cb7d8c00/mlx.xunit2rst-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}