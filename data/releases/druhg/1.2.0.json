{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/druhg.svg\n    :target: https://pypi.python.org/pypi/druhg/\n    :alt: PyPI Version\n.. image:: https://img.shields.io/pypi/l/druhg.svg\n    :target: https://github.com/artamono/druhg/blob/master/LICENSE\n    :alt: License\n\n=====\nDRUHG\n=====\n\n| DRUHG - Dialectical Ranking Universal Hierarchical Grouping (Ð´Ñ€ÑƒÐ³).\n| Performs clustering based on subjective rankings of each data point and builds a minimum spanning tree.\n| **Does not require parameters.** *(The real parameter is metric)*\n| To compensate for the inevitability of the result, the user can set the limits on the size of the cluster with ``limit1`` and ``limit2``.\n| To get the genuine result and genuine outliers set ``limit1`` to 1 and ``limit2`` to sample size.\n| Parameter ``fix_outliers`` allows to label outliers to their closest clusters via mstree edges.\n\n-------------\nBasic Concept\n-------------\n\n| There are some optional tuning parameters but the actual algorithm requires none and is universal.\n| It works by applying **the universal society rule: treat others how you want to be treated**.\n| The core of the algorithm is to rank the subject's closest subjective similarities and unite subjects into commonalities accordingly.\n| Parameter ``max_ranking`` controls precision vs productivity balance, after some value the precision and the result would not change.\n\n| Let's say you have a list of friends and your number one friend is John, but you are number 5 on his friend list, then you would treat him as your number 5 friend.\n| todo: insert picture\n| Clustering made by self-unrolling the relationships between the objects.\n| Process of merging subjects to commonalities goes until the whole tree is a commonality.\n| Commonalities that were merged against sizeable commonalities become clusters.\n| Subjects in order to be merged have to be mutually close to each other and have to have the closest relationship among everyone else.\n| They have to reflect from all others and each other, and then because of that become one.\n| The subject unveils it's potential energy only after he reflects of others.\n| Therefore *Cluster is a mutually-close reflections.*\n\n| To come up with this universal solution philosophy of dialectical materialism was used.\n| You can read more about it in this work. In Russian\n| (https://druhg.readthedocs.io/en/latest/dialectic_of_data.html)\n| where you can read on:\n| - triad Quality-Quantity-Measure (distance-rank-memberships)\n| - triad Singular-Particular-Universal (subject-cluster-dataset)\n| - and more\n\n----------------\nHow to use DRUHG\n----------------\n.. code:: python\n\n             import sklearn.datasets as datasets\n             import druhg\n\n             iris = datasets.load_iris()\n             XX = iris['data']\n\n             clusterer = druhg.DRUHG(max_ranking=50)\n             labels = clusterer.fit(XX).labels_\n\nIt will build the tree and label the points. Now you can manipulate clusters by relabeling.\n\n.. code:: python\n\n             labels = dr.relabel(limit1=1, limit2=len(XX)/2, fix_outliers=1)\n             ari = adjusted_rand_score(iris['target'], labels)\n             print ('iris ari', ari)\n\nIt will relabel the clusters, by restricting their size.\n\n.. code:: python\n\n            from druhg import DRUHG\n            import matplotlib.pyplot as plt\n            import pandas as pd, numpy as np\n\n            XX = pd.read_csv('chameleon.csv', sep='\\t', header=None)\n            XX = np.array(XX)\n            clusterer = DRUHG(max_ranking=200)\n            clusterer.fit(XX)\n\n            plt.figure(figsize=(30,16))\n            clusterer.minimum_spanning_tree_.plot(node_size=200)\n\nIt will draw mstree with druhg-edges.\n\n.. image:: ./docs/source/pics/chameleon.jpg\n    :width: 300px\n    :align: center\n    :height: 200px\n    :alt: chameleon\n\n-----------\nPerformance\n-----------\n| It can be slow on a highly structural data.\n| There is a parameters ``max_ranking`` that can be used decreased for a better performance.\n\n----------\nInstalling\n----------\n\nPyPI install, presuming you have an up to date pip:\n\n.. code:: bash\n\n    pip install druhg\n\n\n-----------------\nRunning the Tests\n-----------------\n\nThe package tests can be run after installation using the command:\n\n.. code:: bash\n\n    pytest -s druhg\n\nor\n\n.. code:: bash\n\n    python -m pytest -s druhg\n\nThe tests may fail :-D\n\n--------------\nPython Version\n--------------\n\nThe druhg library supports both Python 2 and Python 3. \n\n\n------------\nContributing\n------------\n\nWe welcome contributions in any form! Assistance with documentation, particularly expanding tutorials,\nis always welcome. To contribute please `fork the project <https://github.com/artamono/druhg/issues#fork-destination-box>`_ \nmake your changes and submit a pull request. We will do our best to work through any issues with\nyou and get your code merged into the main branch.\n\n---------\nLicensing\n---------\n\nThe druhg package is 3-clause BSD licensed.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artamono/druhg",
    "keywords": "cluster clustering density dialectics",
    "license": "BSD",
    "maintainer": "Pavel \"DRUHG\" Artamonov",
    "maintainer_email": "druhg.p@gmail.com",
    "name": "druhg",
    "package_url": "https://pypi.org/project/druhg/",
    "platform": "",
    "project_url": "https://pypi.org/project/druhg/",
    "project_urls": {
      "Homepage": "https://github.com/artamono/druhg"
    },
    "release_url": "https://pypi.org/project/druhg/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Universal clustering based on dialectical materialism",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13574543,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3b575accb3e7ffef57f42f99dd9dd64308e1f7fd2a2dcc055a0ec1213cc77ff",
        "md5": "784646ed4fe01f92459008fa0f6e9a3c",
        "sha256": "bd60f3170dda519e5e2abd659b12a45f97360fe60f9bc2a1272f239731e86e41"
      },
      "downloads": -1,
      "filename": "druhg-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "784646ed4fe01f92459008fa0f6e9a3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 257531,
      "upload_time": "2021-07-29T05:18:47",
      "upload_time_iso_8601": "2021-07-29T05:18:47.008604Z",
      "url": "https://files.pythonhosted.org/packages/a3/b5/75accb3e7ffef57f42f99dd9dd64308e1f7fd2a2dcc055a0ec1213cc77ff/druhg-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}