{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/druhg.svg\r\n    :target: https://pypi.python.org/pypi/druhg/\r\n    :alt: PyPI Version\r\n.. image:: https://img.shields.io/pypi/l/druhg.svg\r\n    :target: https://github.com/artamono/druhg/blob/master/LICENSE\r\n    :alt: License\r\n\r\n=====\r\nDRUHG\r\n=====\r\n\r\n| DRUHG - Dialectical Ranking Universal Hierarchical Grouping (друг).\r\n| Performs clustering based on subjective rankings of each data point and builds a minimum spanning tree.\r\n| **Does not require parameters.** *(The real parameter is metric)*\r\n| To compensate for the inevitability of the result, the user can set the limits on the size of the cluster with ``limit1`` and ``limit2``.\r\n| To get the genuine result and genuine outliers set ``limit1`` to 1 and ``limit2`` to sample size.\r\n| Parameter ``fix_outliers`` allows to label outliers to their closest clusters via mstree edges.\r\n\r\n-------------\r\nBasic Concept\r\n-------------\r\n\r\n| There are some optional tuning parameters but the actual algorithm requires none and is universal.\r\n| It works by applying **the universal society rule: treat others how you want to be treated**.\r\n| The core of the algorithm is to rank the subject's closest subjective similarities and unite subjects into commonalities accordingly.\r\n| Parameter ``max_ranking`` controls precision vs productivity balance, after some value the precision and the result would not change.\r\n|\r\n| Let's say you have a list of friends and your number one friend is John, but you are number 5 on his friend list, then you would treat him as your number 5 friend.\r\n| todo: insert picture\r\n| Clustering made by self-unrolling the relationships between the objects.\r\n| Process of merging subjects to commonalities goes until the whole tree is a commonality.\r\n| Commonalities that were merged against sizeable commonalities become clusters.\r\n| Subjects in order to be merged have to be mutually close to each other and have to have the closest relationship among everyone else.\r\n| They have to reflect from all others and each other, and then because of that become one.\r\n| The subject unveils it's potential energy only after he reflects of others.\r\n| Therefore *Cluster is a mutually-close reflections.*\r\n|\r\n| To come up with this universal solution philosophy of dialectical materialism was used.\r\n| You can read more about it in this work\r\n| (https://github.com/artamono/druhg/papers/su_bumaga.md)\r\n| where you can read on:\r\n| - triad Quality-Quantity-Measure (distance-rank-memberships)\r\n| - triad Singular-Particular-Universal (subject-cluster-dataset)\r\n| - Mass-Energy relation\r\n| - prospects of adding Time and Motion to break conventional Physics\r\n| - and more\r\n|\r\n\r\n----------------\r\nHow to use DRUHG\r\n----------------\r\n.. code:: python\r\n\r\n             import sklearn.datasets as datasets\r\n             import druhg\r\n\r\n             iris = datasets.load_iris()\r\n             XX = iris['data']\r\n\r\n             clusterer = druhg.DRUHG(max_ranking=50)\r\n             labels = clusterer.fit(XX).labels_\r\n\r\nIt will build the tree and label the points. Now you can manipulate clusters by relabeling.\r\n\r\n.. code:: python\r\n\r\n             labels = dr.relabel(limit1=1, limit2=len(XX)/2, fix_outliers=1)\r\n             ari = adjusted_rand_score(iris['target'], labels)\r\n             print ('iris ari', ari)\r\n\r\nIt will relabel the clusters, by restricting their size.\r\n\r\n.. code:: python\r\n\r\n            from druhg import DRUHG\r\n            import matplotlib.pyplot as plt\r\n            import pandas as pd, numpy as np\r\n\r\n            XX = pd.read_csv('chameleon.csv', sep='\\t', header=None)\r\n            XX = np.array(XX)\r\n            clusterer = DRUHG(max_ranking=200)\r\n            clusterer.fit(XX)\r\n\r\n            plt.figure(figsize=(30,16))\r\n            clusterer.minimum_spanning_tree_.plot(node_size=200)\r\n\r\nIt will draw mstree with druhg-edges.\r\n\r\n.. image:: ./papers/pics/chameleon.jpg\r\n    :width: 300px\r\n    :align: center\r\n    :height: 200px\r\n    :alt: chameleon\r\n\r\n-----------\r\nPerformance\r\n-----------\r\n| It can be slow on a highly structural data.\r\n| There is a parameters ``max_ranking`` that can be used decreased for a better performance.\r\n\r\n----------\r\nInstalling\r\n----------\r\n\r\nPyPI install, presuming you have an up to date pip:\r\n\r\n.. code:: bash\r\n\r\n    pip install druhg\r\n\r\n\r\n-----------------\r\nRunning the Tests\r\n-----------------\r\n\r\nThe package tests can be run after installation using the command:\r\n\r\n.. code:: bash\r\n\r\n    nosetests -s druhg\r\n\r\nor, if ``nose`` is installed but ``nosetests`` is not in your ``PATH`` variable:\r\n\r\n.. code:: bash\r\n\r\n    python -m nose -s druhg\r\n\r\nThe tests may fail :-D\r\n\r\n--------------\r\nPython Version\r\n--------------\r\n\r\nThe druhg library supports both Python 2 and Python 3. \r\n\r\n\r\n------------\r\nContributing\r\n------------\r\n\r\nWe welcome contributions in any form! Assistance with documentation, particularly expanding tutorials,\r\nis always welcome. To contribute please `fork the project <https://github.com/artamono/druhg/issues#fork-destination-box>`_ \r\nmake your changes and submit a pull request. We will do our best to work through any issues with\r\nyou and get your code merged into the main branch.\r\n\r\n---------\r\nLicensing\r\n---------\r\n\r\nThe druhg package is 3-clause BSD licensed.\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/artamono/druhg",
    "keywords": "cluster clustering density hierarchical",
    "license": "BSD",
    "maintainer": "Pavel \"DRUHG\" Artamonov",
    "maintainer_email": "druhg.p@gmail.com",
    "name": "druhg",
    "package_url": "https://pypi.org/project/druhg/",
    "platform": "",
    "project_url": "https://pypi.org/project/druhg/",
    "project_urls": {
      "Homepage": "https://github.com/artamono/druhg"
    },
    "release_url": "https://pypi.org/project/druhg/1.0.1/",
    "requires_dist": [
      "cython (>=0.27)",
      "numpy (>=1.9)",
      "scipy (>=0.9)",
      "scikit-learn (>=0.17)"
    ],
    "requires_python": "",
    "summary": "Universal clustering based on dialectical materialism",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13574543,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b82c5ba41e74716192abce91f05e77e8beb1d3f4825776d1cde561b760d3487",
        "md5": "d07db8aff892f1f71989aa96268a7f80",
        "sha256": "946e42c154007dd2b0257556eca8424b007b8d8d05bae6a9151fea38eec2d700"
      },
      "downloads": -1,
      "filename": "druhg-1.0.1-cp27-cp27m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "d07db8aff892f1f71989aa96268a7f80",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 113114,
      "upload_time": "2020-04-29T17:03:53",
      "upload_time_iso_8601": "2020-04-29T17:03:53.496445Z",
      "url": "https://files.pythonhosted.org/packages/9b/82/c5ba41e74716192abce91f05e77e8beb1d3f4825776d1cde561b760d3487/druhg-1.0.1-cp27-cp27m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}