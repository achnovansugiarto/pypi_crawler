{
  "info": {
    "author": "MapAction",
    "author_email": "github@mapaction.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "About\n=====\n\nMaster branch [![Build Status](https://travis-ci.com/mapaction/mapactionpy_controller.svg?branch=master)](https://travis-ci.com/mapaction/mapactionpy_controller) [![Coverage Status](https://coveralls.io/repos/github/mapaction/mapactionpy_controller/badge.svg?branch=master)](https://coveralls.io/github/mapaction/mapactionpy_controller?branch=master)\n[![Maintainability](https://api.codeclimate.com/v1/badges/2cd96643c21a0cedaa57/maintainability)](https://codeclimate.com/github/mapaction/mapactionpy_controller/maintainability)\n\nInstalling\n==========\nTo install the latest stable release via PyPi:\n```\npython -m pip install mapactionpy_controller\n```\n\nTo install a specific version for testing see the relevant commandline from here:\nhttps://pypi.org/project/mapactionpy-controller/#history\n\n\nCommand-line Usage\n==========\nCheck the compliance with the Data Naming Convention, MXD Naming Convention, MXD Template Naming Convention and Layer Naming Convention.\n```\n> python.exe -m mapactionpy_controller.check_naming_convention /path/to/current/cmf/2019gbr01/cmf_description.json\n```\n\n\nUsing the Data Search tool from the command-line\n----\n```\n> python.exe -m mapactionpy_controller.data_search\nusage: data_search [-h] -r FILE -c FILE [-o FILE]\ndata_search.py: error: the following arguments are required: -r/--recipe-file, -c/--cmf\n\n> python -m mapactionpy_controller.data_search -r example/product_bundle_example.json -c example/cmf_description.json\n```\nThis command will output an updated recipe file with the \nIf the ouput file parameter (-o) is specified than the updated recipe will be output to that file. Otherwise the updated recipe is sent to stdout.\n\n\nProgrammatic Usage\n=====\nUsing the MapRecipe, CrashMoveFolder and Event classes\n----\nThere are three classes which are designed for reuse in other modules. For each of these there is a corresponding json representation. There should not be any need for any other code to touch these json files:\n\n* **MapRecipe** : An object that represents a recipe (as read from a json file).  \nThis object may be manipulated by \n(e.g. the data_search tool, updates the datasources fields )\n* **CrashMoveFolder** : An object that describes the CrashMoveFolder and its contents. There should be no need to hardcode any path (absolute or relative) to anywhere in a crash move folder\n* **Event** : This describes the real-world humanitarian event to which the Crash Move Folder corresponds.\n\n(**Note1:**) The name `Event` matches the naming of the equivalent concept on the Map & Data Respository (see https://github.com/mapaction/ckanext-mapactionevent). However it is rather too generic in this context. A more descriptive name for this class would be helpful.\n\n(**Note2**: in the MapExportTool the information within the CrashMoveFolder and Event used to be encapsulated in the `operational_config.xml` file. This mixed _state_ about the event/emergency and _configuration_ about the local paths to and within the crash move folder.  )\n\n\nUsing the DataNameConvention and related classes\n----\nThe `naming_convention` sub-module provides a framework for specifying a naming convention (such as for file or table). A naming convention is specified in a json configuration file and consists of:\n1) A regular expression, with named groups\n2) For each named group in the regex, details of a class which can provide futher validation of that value in that named group.\n\nExamples of the naming convention config files are in the `examples` directory, including MapAction's DataNamingConvention, MXDNamingConvention and LayerfileNamingConvention.\n\n**DataNameConvention** represents the _convention_ itself. At its core is a regular expression. Each named group (clause) within the Regex as additionally validation, which is implemented by a DataNameClause. DataNameConvention has a dictionary of DataNameClause objects. A individual name is tested by using the `.validate(data_name_str)` method. If the data name does not match the regex the value None is returned. If the regex matches a DataNameInstance object will be returned, whether or not all of the clauses pass.\n\n**DataNameClause** is an abstract class. Callers are unlikely to need to directly access this class or any concrete examples. Concrete examples are DataNameFreeTextClause and DataNameLookupClause. When the `.validate(data_name_str)` method is called on a DataNameConvention object, it will call `.validate(clause_str)` in each individual DataNameClause obj. \n\n**DataNameResult** represents the _result_ of a specific data name test and is returned by `DataNameConvention.validate()`. The `.is_parsable` property indicates whether or not the name could be parsed by the DataNameConvention's regex. The `.is_valid` property indicates whether or not _all_ of the clauses validate. (`.is_valid` will always be `False` if `.is_parsable` is `False`). DataNameResult is a [namedtuple](https://docs.python.org/2.7/library/collections.html#collections.namedtuple).\nThe values for individual clauses can be directly accessed using dotted property notation (eg  via members such as  `dnr.datatheme.Description` or `dnr.source.Organisation`. Each individual clause will have its own `.is_valid` property (eg . `dnr.datatheme.is_valid`).\n\nExample code:\n```\ndnc = DataNameConvention(path_to_dnc_json_definition)\n\n# regex does not match\ndnr = dnc.validate('abcde')\nself.assertFalse(dnr.is_parsable)\n\n# regex does matches, but some clauses fail lookup in csv file\ndnr = dnc.validate(r'aaa_admn_ad3_py_s0_wfp_pp')\n\nif dnr.is_valid:\n\tprint('the dataname is valid')\nelse:\n\tprint('the dataname is not valid')\n\t\n# use the `_asdict()` method to loop through all clauses\nfor clause in dnr._asdict().values():\n\tclause_details = dni.clause(clause)\n\tif clause_details:\n\t\tprint('The extra information associated with clause name {} are {}'.format(clause, clause_details)\n\telse:\n\t\tprint('The erroneous value for clause {} was {} '.format(clause, clause_details)\n\n# Use the dnr object in template strings\nprint('The {dnr.datatheme.Description} data was generously supplied by {dnr.source.Organisation}, downloaded '\n\t'from {dnr.source.url}'.format(dnr=dnr))\n```\nOutput:\n```\nThe erroneous value for clause `geoext` was `aaa`\nExtra information associated with clause `scale`:\n    Description = Global mapping\n    Scale_range = ? 5 000 000\nExtra information associated with clause `freetext`:\n    text = None\nExtra information associated with clause `perm`:\n    Description = Data public - Products public\nExtra information associated with clause `source`:\n    url =\n    Organisation = World Food Program\n    admn1PCode =\n    admn2Name =\n    admn2PCode =\n    admn1Name =\nExtra information associated with clause `datacat`:\n    Description = Admin\nExtra information associated with clause `geom`:\n    Description = Polygon / area\nExtra information associated with clause `datatheme`:\n    Category = admn\n    Description = Administrative boundary (level 3)\n\n\nThe Administrative boundary (level 3) data was generously supplied by World Food Program, downloaded from https://www.wfp.org/\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/mapaction/mapactionpy_controller",
    "keywords": "",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapactionpy-controller",
    "package_url": "https://pypi.org/project/mapactionpy-controller/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapactionpy-controller/",
    "project_urls": {
      "Homepage": "http://github.com/mapaction/mapactionpy_controller"
    },
    "release_url": "https://pypi.org/project/mapactionpy-controller/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Controls the workflow of map and infographic production",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12521608,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6caa49c0bb6dfdf491198de64d1e2618b73db44fd9ef3bdbee86b2dc3a2a1c51",
        "md5": "5c58001acbaf5cfa36d6b16d2313f1dd",
        "sha256": "6a8899a03700cbd8f2fd18b9d60d49f7490a97a4002aeb4f93e9c1c2df98e222"
      },
      "downloads": -1,
      "filename": "mapactionpy_controller-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5c58001acbaf5cfa36d6b16d2313f1dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69000,
      "upload_time": "2020-07-15T22:59:39",
      "upload_time_iso_8601": "2020-07-15T22:59:39.133536Z",
      "url": "https://files.pythonhosted.org/packages/6c/aa/49c0bb6dfdf491198de64d1e2618b73db44fd9ef3bdbee86b2dc3a2a1c51/mapactionpy_controller-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}