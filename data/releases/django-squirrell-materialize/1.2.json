{
  "info": {
    "author": "ESCO",
    "author_email": "franjcesco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Store \n\n## DOCUMENTACIÓN\n\n### `admin`\n---\n\nAquí controlamos el formulario de registro de nuestro modelo, es decir, controlamos cómo va a funcionar antes de introducirlo y/o cambiarlo en nuestra base de datos. Cada modelo tiene su propio **`admin.py`**. \n\nPrimero creamos nuestro `ModelForm` y le añadimos sus propiedades. En nustro caso hemos creado el archivo `forms.py` para cada modelo. \n\nPara este ejemplo estamos usando nuestro modelo ***Producto***.\n\n```\nclass ProductoForm(forms.ModelForm):\n    \"\"\"Form definition for Producto.\"\"\"\n\n    class Meta:\n        \"\"\"Meta definition for Productoform.\"\"\"\n\n        model = Producto\n        #fields = ('',)\n        exclude = ['idproducto']\n\n    def __init__ (self, *args, **kwargs):\n\n        super(ProductoForm, self).__init__(*args, **kwargs)\n```\nA continuación, vamos a incorporar el formulario que tiene relación con nuestro modelo, en este caso su padre. Es algo operativo y tremendamente cómodo. Por lo que tras el código de abajo tendríamos dos formularios en la misma página para poder relacionar los diferentes modelos. \n>Previamente hemos tenido que relacionar dichos modelos en sus `models.py`.\n\n```\nclass CategoriaProductoInline(admin.TabularInline):\n\n    form = ProductoForm\n    model = Categoria.idproducto.through\n    extra = 3\n```\nEn este apartado creamos el centro de **administración** del formulario **únicamente de cara al BACKEND**. Aquí se decide cómo va a funcionar dicho formulario **en el backend**. Para ampliar información *[click aquí](https://docs.djangoproject.com/en/2.2/ref/contrib/admin/)*\n\n```\n@admin.register(Producto)\nclass ProductoAdmin(admin.ModelAdmin):\n\n    form = ProductoForm\n    inlines = [CategoriaProductoInline]\n    fields = ('nombre',('presentacion','descripcion'), ('talla','precio'),'imagen',)\n    readonly_fields = ('nombre',)\n    list_display = ['nombre','precio','descripcion',]\n    search_fields = ['nombre','precio','descripcion',]\n    list_filter = ['nombre',]\n    actions = ['set_precio_0',]\n\n    def set_precio_0(self, request, queryset):\n        for obj in queryset:\n            obj.precio = 0\n            obj.save()\n\n    set_precio_0.short_description = 'Convertir precio a 0'\n```\n- **fields:** se eligen los campos que van a aparecer, si van sin `()` van en una línea solos.\n- **readonly_fields:** hace que sólo sea de lectura el campo elegido.\n- **list_display:** son los campos que van a aparecer en la pestaña de dicho modelo, es decir, dónde aparecen todos los *Productos* en este caso.\n- **search_fields:** son los campos que van a ser buscables, si por ejemplo no incluyésemos *nombre* no podríamos buscar por sus nombres.\n- **list_filter:** crear una categorización navegable según lo que queramos (*nombre, precio, etc*).\n- **actions:** permite incorporar funciones para interactuar con todas las características, las funciones se definen debajo y en este campo únicamente se seleccionan por su nombre. Aparte, se le puede indicar una breve descripción para que aparezca en la página. Si no se define una descripción se llamará como la propia función.\n\n\n### Paginación\n---\n\n#### Instalación de la paginación\n\nPara poder empezar a paginar nuestros items simplemente tenemos que importar el siguiente módulo en nuestra vista.\n```\nfrom django.core.paginator import Paginator\n```\n\n#### Cómo utilizar la paginación\n\nTenemos que pasarle un *Queryset* con todos los objetos que queramos, después definimos el número límite de items por cada página. Para ampliar más información sobre la paginación [click aquí](https://docs.djangoproject.com/en/2.2/topics/pagination/)\n\n```\ndef index(request):\n    user_list = User.objects.all()\n    page = request.GET.get('page', 1)\n\n    paginator = Paginator(user_list, 10)\n```\n\n### Filtros en Django\n---\n\n#### Instalación de filtros\n\nVamos a usar el *django filter package (2.2.0)*, para más información consultar [aquí](https://django-filter.readthedocs.io/en/latest/guide/usage.html)\n\nSe instala usando `pip install django-filter` y se añade `django_filters` a nuestro `INSTALLED_APPS`. Ya lo tenemos todo listo para empezar. A continuación, contando con que ya tenemos creados nuestros modelos (de no tenerlos los creamos), vamos a crear un archivo `filters.py` dentro de nuestro modelo. En dicho archivo vamos a incluir lo siguiente:\n\n```\nimport django_filters\n\nclass ProductFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n\n    price = django_filters.NumberFilter()\n    price__gt = django_filters.NumberFilter(field_name='price', lookup_expr='gt')\n    price__lt = django_filters.NumberFilter(field_name='price', lookup_expr='lt')\n\n    class Meta:\n        model = Product\n        fields = ['price', 'release_date']\n```\n\n#### Cómo utilizar los filtros de Django\n\nA partir de aquí podemos añadir los filtros que queramos, respetando siempre lo siguiente:\n\n- `field_name`: se trata del campo del modelo que queremos filtrar, podemos realizar relaciones a través de ellos usando la sintáxis e Django `__`, por ejemplo: `manufacter__name`.\n- `lookup_expr`: es la expresión que vamos a utilizar para realizar el filtro, recordad que cuánto **más representativa** de la acción que realiza mejor. \n\n>Para ampliar información sobre las expresiones de búsqueda o `lookup_expr` *[click aquí](https://docs.djangoproject.com/en/2.2/ref/models/lookups/#module-django.db.models.lookups)*\n\nLa *Meta Class* nos permite añadir campos de filtro sin repetir excesivamente el código del modelo. \n\n```\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = ['price', 'release_date']\n```\nEn este caso hemos generado dos filtros \"exactos\" tanto para *price* como para *release_date*. Adicionalmente, podemos crear un diccionario para ser más precisos a la hora de definir los campos a filtrar.\n\n```\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = {\n            'price': ['lt', 'gt'],\n            'release_date': ['exact', 'year__gt'],\n        }\n```\nEste ejemplo de arriba creará *pricee__it, price__gt, release_date y release_date__year__gt*. Como se observa no se ha creado un *release_date__exact* ya que el 'exact' viene de forma predeterminada con los filtros de Django, se usa para determinar el requerimiento de ser exacto, en este caso, '*release_date*' sería el exacto.\n\n#### La vista\n\n```\ndef product_list(request):\n    filtro = ProductFilter(request.GET, queryset=Product.objects.all())\n    return render(request, 'my_app/template.html', {'filter': filtro})\n```\nTenemos que tener en cuenta que nos llega un Objeto filtro que contiene propiedades como `ObjectoFiltro.form` que nos permite acceder al formulario que se genera gracias a los campos que hemos puesto en su correspondiente archivo `filters.py`, también nos trae su *Queryset*, al cual podemos acceder simplemente con `.qs`. Por lo que lo más recomendable es capturar en la vista dichas propiedades y enviar las que necesitemos, en vez de enviar directamente el Objecto filtro como hacen en la documentación oficial.\n\n>Si tenemos una paginación simplemente tenemos que pasarle el *Queryset* al *paginator* dentro de nuestra vista. Si le pasamos directamente el Objeto filtro no será capaz de entenderlo..\n\n#### Las urls\n\n```\nurl(r'^list$', views.product_list)\n```\nLas urls no requieren de ninguna modificación para que los filtros funcionen, podemos dejarlas tal como las tengamos.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/esco/django_ardilla_materialize",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-squirrell-materialize",
    "package_url": "https://pypi.org/project/django-squirrell-materialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-squirrell-materialize/",
    "project_urls": {
      "Homepage": "https://github.com/esco/django_ardilla_materialize"
    },
    "release_url": "https://pypi.org/project/django-squirrell-materialize/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Docker and AWS utility package",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5715088,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f4a4785228fe1c2de3d6ebd0769eba015a66618e94530072e8e61e80dc97ffa1",
        "md5": "d5e2e95505a84c5d295d98de398b5999",
        "sha256": "27094d4e4ef953f7105eff541e73baf38dfa954e925d4c1eb3309bb8e24c125c"
      },
      "downloads": -1,
      "filename": "django_squirrell_materialize-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d5e2e95505a84c5d295d98de398b5999",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 287814,
      "upload_time": "2019-08-22T08:25:29",
      "upload_time_iso_8601": "2019-08-22T08:25:29.918898Z",
      "url": "https://files.pythonhosted.org/packages/f4/a4/785228fe1c2de3d6ebd0769eba015a66618e94530072e8e61e80dc97ffa1/django_squirrell_materialize-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}