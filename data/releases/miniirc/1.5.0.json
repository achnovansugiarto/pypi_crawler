{
  "info": {
    "author": "luk3yx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# miniirc\n\n[![Python 3.4+]](#python-version-support) [![Available on PyPI.]](https://pypi.org/project/miniirc/) [![License: MIT]](https://github.com/luk3yx/miniirc/blob/master/LICENSE.md)\n\nA simple IRC client framework.\n\nTo install miniirc, simply run `pip3 install miniirc` as root.\n\n[Python 3.4+]: https://img.shields.io/badge/python-3.4/3.5+-blue.svg\n[Available on PyPI.]: https://img.shields.io/pypi/v/miniirc.svg\n[License: MIT]: https://img.shields.io/pypi/l/miniirc.svg\n\n## Parameters\n\n~~~py\nirc = miniirc.IRC(ip, port, nick, channels=None, *, ssl=None, ident=None, realname=None, persist=True, debug=False, ns_identity=None, auto_connect=True, ircv3_caps=set(), quit_message='I grew sick and died.', ping_interval=60, verify_ssl=True)\n~~~\n\n*Note that everything before the \\* is a positional argument.*\n\n| Parameter     | Description                                                |\n| ------------- | -------------------------------------------------------- |\n| `ip`          | The IP/hostname of the IRC server to connect to.          |\n| `port`        | The port to connect to.                                   |\n| `nick`        | The nickname of the bot.                                  |\n| `channels`    | The channels to join on connect. This can be an iterable containing strings (list, set, etc), or (since v1.5.0) a comma-delimited string. |\n| `ssl`         | Enable TLS/SSL. If `None`, TLS/SSL is disabled unless the port is `6697`. |\n| `ident`       | The ident to use, defaults to `nick`.                     |\n| `realname`    | The realname to use, defaults to `nick` as well.          |\n| `persist`     | Whether to automatically reconnect.                       |\n| `debug`       | Enables debug mode, prints all IRC messages. This can also be a file-like object (with write mode enabled) if you want debug messages to be written into a file instead of being printed to stdout, or a function (for example `logging.debug`). |\n| `ns_identity` | The NickServ account to use (`<user> <password>`). This can be a tuple or list since miniirc v1.2.0. |\n| `auto_connect`| Runs `.connect()` straight away.                          |\n| `ircv3_caps`  | A set() of additional IRCv3 capabilities to request. SASL is auto-added if `ns_identity` is specified. |\n| `connect_modes` | A mode string (for example `'+B'`) of UMODEs to set when connected. |\n| `quit_message`| Sets the default quit message. This can be modified per-quit with `irc.disconnect()`. |\n| `ping_interval` | If no packets are sent or received for this amount of seconds, miniirc will send a `PING`, and if no reply is sent, after the same timeout, miniirc will attempt to reconnect. Set to `None` to disable. |\n| `verify_ssl`  | Verifies TLS/SSL certificates. Disabling this is not recommended. If you have trouble with certificate verification, try running `pip3 install certifi` first. |\n\n*The only mandatory parameters are `ip`, `port`, and `nick`.*\n\n## Functions\n\n| Function      | Description                                               |\n| ------------- | --------------------------------------------------------  |\n| `change_parser(parser=...)` | *See the message parser section for documentation.* |\n| `connect()`   | Connects to the IRC server if not already connected.      |\n| `ctcp(target, *msg, reply=False, tags=None)` | Sends a `CTCP` request or reply to `target`. |\n| `debug(...)`  | Debug, calls `print(...)` if debug mode is on.            |\n| `disconnect(msg=..., *, auto_reconnect=False)`| Disconnects from the IRC server. `auto_reconnect` will be overriden by `self.persist` if set to `True`. |\n| `Handler(...)` | An event handler, see [Handlers](#handlers) for more info.|\n| `me(target, *msg, tags=None)`        | Sends a `/me` (`CTCP ACTION`) to `target`.  |\n| `msg(target, *msg, tags=None)`       | Sends a `PRIVMSG` to `target`. `target` should not contain spaces or start with a colon. |\n| `notice(target, *msg, tags=None)`    | Sends a `NOTICE` to `target`. `target` should not contain spaces or start with a colon. |\n| `quote(*msg, force=False, tags=None)` | Sends a raw message to IRC, use `force=True` to send while disconnected. Do not send multiple commands in one `irc.quote()`, as the newlines will be stripped and it will be sent as one command. The `tags` parameter optionally allows you to add a `dict` with IRCv3 client tags (all starting in `+`), and will not be sent to IRC servers that do not support client tags. |\n| `send(*msg, force=False, tags=None)` | Similar to `irc.quote()`, however every positional argument is treated as a parameter, spaces are removed from every parameter except the last one, and a colon is automatically prepended to the last parameter. |\n\n*Note that if `force=False` on `irc.quote` (or `irc.msg` etc is called) while\nminiirc is not connected, messages will be temporarily stored and then sent\nonce miniirc is connected. Setting `force=True` will throw errors if miniirc is\ncompletely disconnected (`irc.connected` is `None`).*\n\n### irc.quote and irc.send\n\nThe two functions `irc.quote` and `irc.send` may sound similar, however are\nfundamentally different: `irc.quote()` joins all provided arguments with spaces\nand sends them as a raw message to IRC, while `irc.send()` treats each argument\nas a parameter. If arguments passed to `irc.send()` contain spaces, they are\nreplaced with U+00A0 (a non-breaking space, visually similar to a regular\nspace however not interpreted as one).\n\n#### Examples\n\n - `irc.quote('PRIVMSG', '#channel :Hello,', 'world!')` sends \"Hello, world!\"\n    to #channel.\n - `irc.quote('PRIVMSG', 'channel', 'Hello, world!')` is invalid (\"Hello,\" and\n    \"world!\" are sent as separate parameters).\n - `irc.send('PRIVMSG', '#channel', 'Hello, world!')` will send \"Hello, world!\"\n    to \"#channel\".\n - `irc.send('PRIVMSG', '#channel with spaces', 'Hello, world!')` will send\n    \"Hello, world!\" to `#channel\\xa0with\\xa0spaces`, where `\\xa0` is a\n    non-breaking space.\n\n*If you are unsure and do not need compatibility with miniirc <1.5.0, use\n`irc.send()`. `PRIVMSG` is just used as an example, if you need to send\n`PRIVMSG`s use `irc.msg()` instead.*\n\n## Variables\n\n*These variables should not be changed outside `miniirc.py`.*\n\n| Variable      | Description                                               |\n| ------------- | --------------------------------------------------------  |\n| `active_caps` | A `set` of IRCv3 capabilities that have been successfully negotiated with the IRC server. This is empty while disconnected. |\n| `connected`   | A boolean (or `None`), `True` when miniirc is connected, `False` when miniirc is connecting, and `None` when miniirc is not connected. |\n| `current_nick` | *New in v1.4.3.* The bot/client's current nickname, currently an alias for `irc.nick`. Do not modify this, and use this instead of `irc.nick` when getting the bot's current nickname for compatibility with miniirc v2.0.0. |\n| `isupport`    | *New in v1.1.0.* A `dict` with values (not necessarily strings) from `ISUPPORT` messages sent to the client. |\n| `msglen`      | *New in v1.1.0.* The maximum length (in bytes) of messages (including `\\r\\n`). This is automatically changed if the server supports the `oragono.io/maxline-2` capability. |\n| `nick`        | The nickname to use when connecting to IRC. Until miniirc v2.0.0, you should only modify this while disconnected, as it is currently automatically updated with nickname changes. |\n\nThe following arguments passed to `miniirc.IRC` are also available: `ip`,\n`port`, `channels`, `ssl`, `ident`, `realname`, `persist`, `connect_modes`,\n`quit_message`, `ping_interval`, `verify_ssl`.\n\n## Handlers\n\n`miniirc.Handler` and `miniirc.CmdHandler` are function decorators that add\nfunctions to an event handler list. Functions in this list are called in their\nown thread when their respective IRC event(s) is/are received. Handlers may\nwork on every IRC object in existence (`miniirc.Handler`) or only on\nspecific IRC objects (`irc.Handler`).\n\nThe basic syntax for a handler is as followed, where `*events` is a list of events (`PRIVMSG`, `NOTICE`, etc) are called.\n\n~~~py\nimport miniirc\n@miniirc.Handler(*events, colon=True)\ndef handler(irc, hostmask, args):\n    # irc:      An 'IRC' object.\n    # hostmask: A 'hostmask' object.\n    # args:     A list containing the arguments sent to the command. Everything\n    #             following the first `:` in the command is put into one item\n    #             (args[-1]). If \"colon\" is \"False\", the leading \":\" (if any)\n    #             is automatically removed. Setting this to False is probably\n    #             a good idea to prevent unexpected side effects.\n    pass\n~~~\n\n#### Recommendations when using handlers:\n\n - If you don't need support for miniirc <1.4.0 and are parsing the last\n    parameter, setting `colon` to `False` is strongly recommended. If the\n    `colon` parameter is omitted, it defaults to `True`, however this will\n    change when miniirc v2.0.0 is released.\n - Although `Handler` and `CmdHandler` currently accept any object that can be\n    converted to a string, every event is converted to a string internally.\n - Not specifying the [`ircv3`](#ircv3-tags) parameter when it is not required\n    prevents a redundant `dict` from being created.\n - To add handlers to a specific `IRC` object and not every one in existence,\n    use `irc.Handler` and `irc.CmdHandler` instead. If you want to create a\n    `Bot` or `Client` class and automatically add handlers to `IRC` objects\n    created inside it, see\n    [making existing functions handlers](#making-existing-functions-handlers).\n\n### Hostmask object\n\nHostmasks are tuples with the format `('user', 'ident', 'hostname')`. If `ident`\nand `hostname` aren't sent from the server, they will be filled in with the\nprevious value. If a command is received without a hostmask, all the `hostmask`\nelements will be set to the name of the command. This is deprecated, however,\nand when miniirc v2.0.0 is released the `hostmask` elements will be set to\nempty strings.\n\n### Making existing functions handlers\n\nYou can make existing functions handlers (for example class instance methods)\nwith `irc.Handler(*events)(handler_function)`. You probably don't want to use\n`miniirc.Handler` for class instance methods, as this will create a handler\nthat gets triggered for every `IRC` object.\n\nYou can also add multiple handlers of the same type easily:\n\n```py\nadd_handler = irc.Handler('PRIVMSG')\nadd_handler(handler_1)\nadd_handler(self.instance_handler)\n```\n\nThis is useful if you want to create a `Bot` (or `Client`) class and add\nclass-specific handlers without creating global process-wide handlers or\ncreating a wrapper function for every class instance.\n\n### IRCv3 support\n\n#### IRCv3 tags\n\nIf you want your handler to support IRCv3 message tags, you need to add\n`ircv3=True` to the `Handler` or `CmdHandler` decorator. You will need to add a\n`tags` parameter to your function after `hostmask`. IRCv3 tags are sent to the\nhandlers as `dict`s, with values of either strings or `True`.\n\n*miniirc will automatically un-escape IRCv3 tag values.*\n\n~~~py\nimport miniirc\n@miniirc.Handler(*events, colon=False, ircv3=True)\ndef handler(irc, hostmask, tags, args):\n    pass\n~~~\n\n#### IRCv3 capabilities\n\nYou can handle IRCv3 capabilities before connecting using a handler.\nYou must use `force=True` on any `irc.quote()` called here, as when this is\ncalled, miniirc may not yet be fully connected. Do not use the `colon` argument\nfor `Handler` when creating these handlers to avoid unexpected side-effects.\n\n~~~py\nimport miniirc\n@miniirc.Handler('IRCv3 my-cap-name')\ndef handler(irc, hostmask, args):\n    # Process the capability here\n\n    # IRCv3.2 capabilities:\n    #   args = ['my-cap-name', 'IRCv3.2-parameters']\n\n    # IRCv3.1 capabilities:\n    #   args = ['my-cap-name']\n\n    # Remove the capability from the processing list.\n    irc.finish_negotiation(args[0]) # This can also be 'my-cap-name'.\n~~~\n\n### Custom message parsers\n\nIf the IRC server you are connecting to supports a non-standard message syntax, you can\ncreate custom message parsers. These are called with the raw message (as a `str`) and\ncan either return `None` to ignore the message or a 4-tuple (`cmd, hostmask, tags, args`)\nthat will then be sent on to the handlers. The items in this 4-tuple should be the same\ntype as the items expected by handlers (and `cmd` should be a string).\n\n#### Message parser example\n\nThis message parser makes the normal parser allow `~` as an IRCv3 tag prefix character.\n\n~~~py\nimport miniirc\n\ndef my_message_parser(msg):\n    if msg.startswith('~'):\n        msg = '@' + msg[1:]\n    return miniirc.ircv3_message_parser(msg)\n~~~\n\n#### Changing message parsers\n\nTo change message parsers, you can use `irc.change_parser(func=...)`. If `func` is not\nspecified, it will default to the built-in parser. You can only change message parsers\non-the-fly (for example in an IRCv3 CAP handler). If you need to change message parsers\nbefore connecting, you can disable `auto_connect` and change it then.\n\n~~~py\nirc = miniirc.IRC(..., auto_connect=False)\nirc.change_parser(my_message_parser)\nirc.connect()\n~~~\n\n### Handling multiple events\n\n*New in version 1.3.0.*\n\nIf you want to handle multiple events and/or be able to get the name of the\nevent being triggered, you can use `irc.CmdHandler`. This will pass an extra\n`command` argument to the handler function (between `irc` and `hostmask`),\ncontaining a string with the command name (such as `PRIVMSG`).\n\n#### Catch-all handlers\n\n**Please do not use these unless there is no other alternative.**\n\nIf you want to handle *every* event, you can use catch-all handlers. To create\nthese, you can call `irc.CmdHandler()` *without* any parameters. Note that this\nhandler will be called many times while connecting (and once connected).\n\n*You cannot call `irc.Handler()` without parameters.*\n\n### Example\n\n~~~py\nimport miniirc\n\n# Not required, however this makes sure miniirc isn't insanely outdated.\nassert miniirc.ver >= (1,4,1)\n\n@miniirc.Handler('PRIVMSG', 'NOTICE', colon=True)\ndef handler(irc, hostmask, args):\n    print(hostmask[0], 'sent a message to', args[0], 'with content', args[1])\n    # nickname sent a message to #channel with content :Hello, world!\n\n@miniirc.CmdHandler('PRIVMSG', 'NOTICE', colon=False)\ndef cmdhandler(irc, command, hostmask, args):\n    print(hostmask[0], 'sent a', command, 'to', args[0], 'with content',\n        args[1])\n    # nickname sent a PRIVMSG to #channel with content Hello, world!\n~~~\n\nThis will print a line whenever the bot gets a `PRIVMSG` or `NOTICE`.\n\n## Misc functions\n\nminiirc provides the following helper functions:\n\n| Name                          | Description                               |\n| ----------------------------- | ----------------------------------------- |\n| `miniirc.get_ca_certs()`      | Runs `certifi.where()` if `certifi` is installed, otherwise returns `None`. |\n| `miniirc.ircv3_message_parser(msg)` | The default IRCv2/IRCv3 message parser, returns `cmd, hostmask, tags, args`. |\n| `miniirc.ver`                 | A tuple containing version information.   |\n| `miniirc.version`             | The `CTCP VERSION` reply, can be changed. |\n\nThe version numbering system should be similar to [SemVer](https://semver.org/),\nhowever backwards compatibility is preserved where possible when major releases\nchange. Patch version numbers can and will increase quickly, as miniirc is (at\nthe time of writing this) under active development.\n\n## Python version support\n\n - Python 2 does not work and will (probably) never work with miniirc. If you\n    MUST use Python 2, you could try manually porting miniirc.\n - Python 3.3 and below probably won't work, and fixes will not be added unless\n    they are very trivial.\n - Python 3.4 to 3.5, although not recommended, should work, however they are\n    not tested as thoroughly as more recent versions.\n - Python 3.6 and above should work with the latest stable version of miniirc.\n\nIf there is a bug/error in Python 3.4 or newer, please open an issue or pull\nrequest on [GitHub](https://github.com/luk3yx/miniirc/issues) or\n[GitLab](https://gitlab.com/luk3yx/miniirc/issues).\n\n*If you are using Python 3.5 or an older version of Python, I strongly\nrecommend updating. Later versions of Python include features such as f-strings\nthat make software development easier.*\n\n## miniirc_extras\n\nIf you want more advanced(-ish) features such as user tracking, you can use\n[miniirc_extras](https://pypi.org/project/miniirc-extras/)\n([GitHub](https://github.com/luk3yx/miniirc_extras),\n[GitLab](https://gitlab.com/luk3yx/miniirc_extras)). Note that miniirc_extras\nis still in beta and there will be breaking API changes in the future.\n\n## Deprecations\n\nWhen miniirc v2.0.0 is released, the following breaking changes will (probably)\nbe made:\n\n - Internal-only attributes `irc.handlers`, `irc.sock`, and `irc.sendq`\n    (please do not use these) will be renamed. Again, please do not use these.\n - `irc.nick` will be the nickname used when connecting to IRC rather than the\n    current nickname, use `irc.current_nick` for the current nickname (since\n    v1.4.3). This will stop lots of underscores being automatically appended to\n    nicknames.\n - `irc.ns_identity` will be stored as a tuple instead of a string, for example\n    `('username', 'password with spaces')` instead of\n    `'username password with spaces'`. Both formats are currently accepted and\n    will be accepted in the `ns_identity` keyword argument.\n - Python 3.4 support *may* be dropped. If you are using Python 3.4, I\n    recommend updating to a more recent version of Python.\n - The `colon` keyword argument to `Handler` and `CmdHandler` will default to\n    `False` instead of `True`.\n - Unspecified hostmasks will be an empty string instead of the command. Don't\n    rely on this \"feature\" if possible, simply ignore the hostmask if you do\n    not need it.\n\n## Working examples/implementations\n\nHere is a list of some (open-source) bots using miniirc, in alphabetical order:\n\n - [irc-rss-feed-bot] - Posts RSS entry titles and shortened URLs to IRC\n    channels. *Python 3.7+*\n - [irc-url-title-bot] - Gets webpage titles from URLs posted in IRC channels.\n    *Python 3.7+*\n - [lurklite] - A generic configurable IRC bot.\n    *[GitHub](https://github.com/luk3yx/lurklite) link.*\n - [stdinbot] - A very simple bot that dumps stdin to an IRC channel.\n    *[GitHub](https://github.com/luk3yx/stdinbot) link.*\n\n*Want to add your own bot/client to this list? Open an issue on\n[GitHub](https://github.com/luk3yx/miniirc/issues) or\n[GitLab](https://github.com/luk3yx/miniirc/issues).*\n\n[irc-rss-feed-bot]:  https://github.com/impredicative/irc-rss-feed-bot\n[irc-url-title-bot]: https://github.com/impredicative/irc-url-title-bot\n[lurklite]:          https://gitlab.com/luk3yx/lurklite\n[stdinbot]:          https://gitlab.com/luk3yx/stdinbot\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luk3yx/miniirc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniirc",
    "package_url": "https://pypi.org/project/miniirc/",
    "platform": "",
    "project_url": "https://pypi.org/project/miniirc/",
    "project_urls": {
      "Homepage": "https://github.com/luk3yx/miniirc"
    },
    "release_url": "https://pypi.org/project/miniirc/1.5.0/",
    "requires_dist": [
      "certifi"
    ],
    "requires_python": ">=3.0",
    "summary": "A lightweight IRC framework.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16094918,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3076b1e653b70f19d37417fd2643455cabec60ea474f58d076728b2f2a2f2fe",
        "md5": "44dc727324b00456ae52e19bbd19090c",
        "sha256": "52d5bfd3dd14824d72226ed71f7d0ff794ad83b025807be324e45520a48d6ae3"
      },
      "downloads": -1,
      "filename": "miniirc-1.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44dc727324b00456ae52e19bbd19090c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 14881,
      "upload_time": "2019-11-19T08:27:10",
      "upload_time_iso_8601": "2019-11-19T08:27:10.254783Z",
      "url": "https://files.pythonhosted.org/packages/b3/07/6b1e653b70f19d37417fd2643455cabec60ea474f58d076728b2f2a2f2fe/miniirc-1.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a87c7fa8111acd564f898559728b8a7fcd89f6ec966bf895f1086378a662a3fb",
        "md5": "7d5c2d0b27bbbc2741c3f6421b21a05e",
        "sha256": "12aaf825bfa0fffcfa98cefe42c50edeb3ce5eefe087a62f424176c6701818cd"
      },
      "downloads": -1,
      "filename": "miniirc-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7d5c2d0b27bbbc2741c3f6421b21a05e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 19932,
      "upload_time": "2019-11-19T08:27:12",
      "upload_time_iso_8601": "2019-11-19T08:27:12.764127Z",
      "url": "https://files.pythonhosted.org/packages/a8/7c/7fa8111acd564f898559728b8a7fcd89f6ec966bf895f1086378a662a3fb/miniirc-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}