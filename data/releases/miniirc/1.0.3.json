{
  "info": {
    "author": "luk3yx",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# miniirc\n\n[![Available on PyPI.](https://img.shields.io/pypi/v/miniirc.svg)](https://pypi.org/project/miniirc/) [![Code Climate](https://api.codeclimate.com/v1/badges/22b7784b82dea11bba1d/maintainability)](https://codeclimate.com/github/luk3yx/miniirc/maintainability)\n\nA simple IRC client framework.\n\nTo install miniirc, simply run `pip3 install miniirc` as root.\n\n## Parameters\n\n~~~py\nirc = miniirc.IRC(ip, port, nick, channels = None, *, ssl = None, ident = None, realname = None, persist = True, debug = False, ns_identity = None, auto_connect = True, ircv3_caps = set(), quit_message  = 'I grew sick and died.', verify_ssl = True)\n~~~\n\n| Parameter     | Description                                                |\n| ------------- | -------------------------------------------------------- |\n| `ip`          | The IP/hostname of the IRC server to connect to.          |\n| `port`        | The port to connect to.                                   |\n| `nick`        | The nickname of the bot.                                  |\n| `channels`    | The channels to join on connect.                          |\n| `ssl`         | Enable TLS/SSL. If `None`, TLS/SSL is disabled unless the port is `6697`. |\n| `ident`       | The ident to use, defaults to `nick`.                     |\n| `realname`    | The realname to use, defaults to `nick` as well.          |\n| `persist`     | Whether to automatically reconnect.                       |\n| `debug`       | Enables debug mode, prints all IRC messages. This can also be a file object (with write mode enabled) if you want debug messages to be written into a file instead of being printed to stdout. |\n| `ns_identity` | The NickServ account to use (`<user> <password>`).        |\n| `auto_connect`| Runs `.connect()` straight away.                          |\n| `ircv3_caps`  | A set() of IRCv3 capabilities to request. SASL is auto-added if `ns_identity` is specified. |\n| `connect_modes` | A mode string (for example `'+B'`) of UMODEs to set when connected. |\n| `quit_message`| Sets the default quit message. This can be modified per-quit with `irc.disconnect()`. |\n| `verify_ssl`  | Verifies TLS/SSL certificates. Disabling this is not recommended. If you have trouble with certificate verification, try running `pip3 install certifi` first. |\n\n## Functions\n\n| Function      | Description                                               |\n| ------------- | --------------------------------------------------------  |\n| `change_parser(parser = ...)` | *See the message parser section for documentation.* |\n| `connect()`   | Connects to the IRC server if not already connected.      |\n| `ctcp(target, *msg, reply=False, tags=None)` | Sends a `CTCP` request or reply to `target`. |\n| `debug(...)`  | Debug, calls `print(...)` if debug mode is on.            |\n| `disconnect(msg = ..., *, auto_reconnect = False)`| Disconnects from the IRC server. `auto_reconnect` will be overriden by `self.persist` if set to `True`. |\n| `Hander(...)` | An event handler, see [Handlers](#handlers) for more info.|\n| `main()`      | Starts the main loop in a thread if not already running.  |\n| `me(target, *msg, tags=None)`        | Sends a `/me` (`CTCP ACTION`) to `target`.  |\n| `msg(target, *msg, tags=None)`       | Sends a `PRIVMSG` to `target`.              |\n| `notice(target, *msg, tags=None)`    | Sends a `NOTICE` to `target`.               |\n| `quote(*msg, force=None, tags=None)` | Sends a raw message to IRC, use `force=True` to send while disconnected. Do not send multiple commands in one `irc.quote()`, as the newlines will be stripped and it will be sent as one command. The `tags` parameter optionally allows you to add a `dict` with IRCv3 client tags (all starting in `+`), and will not be sent to IRC servers that do not support client tags. |\n\n## Handlers\n\nHandlers are `@-rules` called in their own thread when their respective IRC event(s) is/are received. Handlers may be global (`@miniirc.handler`) or local (`@miniirc.IRC().handler`) to a certain IRC connection. New handlers are added to existing IRC connections automatically since miniirc 0.3.2.\n\nThe basic syntax for a handler is as followed, where `*events` is a list of events (`PRIVMSG`, `NOTICE`, etc) are called.\n\n~~~py\nimport miniirc\n@miniirc.Handler(*events)\ndef handler(irc, hostmask, args):\n    # irc:      An 'IRC' object.\n    # hostmask: A 'hostmask' object.\n    # args:     A list containing the arguments sent to the command.\n    #             Everything following the first `:` in the command\n    #             is put into one item (args[-1]).\n    pass\n~~~\n\n### Hostmask object\n\nHostmasks are tuples with the format `('user', 'ident', 'hostname')`. If `ident` and `hostname` aren't sent from the server, they will be filled in with the previous value. If a command is received without a hostmask, all the `hostmask` parameters will be set to the name of the command.\n\n### IRCv3 support\n\n#### IRCv3 tags\n\nIf you want your handler to support IRCv3 message tags, you need to add\n`ircv3 = True` to the `Handler` at-rule. You will need to add a `tags` parameter\nto your function after `hostmask`. IRCv3 tags are sent to the handlers as\n`dict`s, with values of either strings or `True`.\n\n*Since version 0.3.8, miniirc will automatically un-escape IRCv3 tag values.*\n\n~~~py\nimport miniirc\n@miniirc.Handler(*events, ircv3 = True)\ndef handler(irc, hostmask, tags, args):\n    pass\n~~~\n\n#### IRCv3 capabilities\n\nYou can handle IRCv3 capabilities before connecting using a handler.\nYou must use `force = True` on any `irc.quote()` called here, as when this is\ncalled, miniirc has not yet connected.\n\n~~~py\nimport miniirc\n@miniirc.Handler('IRCv3 my-cap-name')\ndef handler(irc, hostmask, args):\n    # Process the capability here\n\n    # IRCv3.2 capabilities:\n    #   args = ['my-cap-name', 'IRCv3.2-parameters']\n\n    # IRCv3.1 capabilities:\n    #   args = ['my-cap-name']\n\n    # Remove the capability from the processing list.\n    irc.finish_negotiation(args[0]) # This can also be 'my-cap-name'.\n~~~\n\n### Custom message parsers\n\nIf the IRC server you are connecting to supports a non-standard message syntax, you can\ncreate custom message parsers. These are called with the raw message (as a `str`) and\ncan either return `None` to ignore the message or a 4-tuple (`cmd, hostmask, tags, args`)\nthat will then be sent on to the handlers. The items in this 4-tuple should be the same\ntype as the items expected by handlers (and `cmd` should be a string).\n\n#### Message parser example\n\nThis message parser makes the normal parser allow `~` as an IRCv3 tag prefix character.\n\n~~~py\nimport miniirc\n\ndef my_message_parser(msg):\n    if msg.startswith('~'):\n        msg = '@' + msg[1:]\n    return miniirc.ircv3_message_parser(msg)\n~~~\n\n#### Changing message parsers\n\nTo change message parsers, you can use `irc.change_parser(func = ...)`. If `func` is not\nspecified, it will default to the built-in parser. You can only change message parsers\non-the-fly (for example in an IRCv3 CAP handler). If you need to change message parsers\nbefore connecting, you can disable `auto_connect` and change it then.\n\n~~~py\nirc = miniirc.IRC(..., auto_connect = False)\nirc.change_parser(my_message_parser)\nirc.connect()\n~~~\n\n### Example\n\n~~~py\nimport miniirc\n\n@miniirc.Handler('PRIVMSG', 'NOTICE')\ndef handler(irc, hostmask, args):\n    print(hostmask[0], 'sent a message to', args[0], 'with content', args[1])\n~~~\n\nThis will print a line whenever the bot gets a `PRIVMSG` or `NOTICE`.\n\n## Misc functions\n\nminiirc provides the following helper functions:\n\n| Name                          | Description                               |\n| ----------------------------- | ----------------------------------------- |\n| `miniirc.get_ca_certs()`      | Runs `certifi.where()` if `certifi` is installed, otherwise returns `None`. |\n| `miniirc.ircv3_message_parser(msg)` | The default IRCv2/IRCv3 message parser, returns `cmd, hostmask, tags, args`. |\n| `miniirc.ver`                 | A tuple containing version information.   |\n| `miniirc.version`             | The `CTCP VERSION` reply, can be changed. |\n\nThe version numbering system should be similar to [SemVer](https://semver.org/),\nhowever backwards compatibility is preserved where possible when major releases\nchange. Patch version numbers can and will increase quickly, as miniirc is (at\nthe time of writing this) under active development.\n\n## Working examples/implementations\n\nThere is a working example and stdinbot (dumps stdin to an IRC channel) on\n[luk3yx/stdinbot](https://gitlab.com/luk3yx/stdinbot).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniirc",
    "package_url": "https://pypi.org/project/miniirc/",
    "platform": "",
    "project_url": "https://pypi.org/project/miniirc/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/miniirc/1.0.3/",
    "requires_dist": [
      "certifi"
    ],
    "requires_python": "",
    "summary": "A lightweight IRC framework.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16094918,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e26c0891bd9919b69c57f78af6309a76c77c605212601b36e0469ba0b4f63ffd",
        "md5": "30d23c2d587a519b221985b55d6b10d4",
        "sha256": "d66226767c302c1831723d27eacbdcc68c68111bc5b0a069066308b110289bf1"
      },
      "downloads": -1,
      "filename": "miniirc-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30d23c2d587a519b221985b55d6b10d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10266,
      "upload_time": "2019-01-11T08:12:00",
      "upload_time_iso_8601": "2019-01-11T08:12:00.214964Z",
      "url": "https://files.pythonhosted.org/packages/e2/6c/0891bd9919b69c57f78af6309a76c77c605212601b36e0469ba0b4f63ffd/miniirc-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "947313d3d0b016fc07dd5ee15fd0a4e660d8c8a32c6a19cf3001693f2296d305",
        "md5": "a23f1cb458f72f1036f5f8011fb2a7da",
        "sha256": "9f6024ece84b8402101c0a3847ebab58ddae6cf3b15405ffb28e79fbb72b48f4"
      },
      "downloads": -1,
      "filename": "miniirc-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a23f1cb458f72f1036f5f8011fb2a7da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11752,
      "upload_time": "2019-01-11T08:12:02",
      "upload_time_iso_8601": "2019-01-11T08:12:02.003617Z",
      "url": "https://files.pythonhosted.org/packages/94/73/13d3d0b016fc07dd5ee15fd0a4e660d8c8a32c6a19cf3001693f2296d305/miniirc-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}