{
  "info": {
    "author": "James Socol, Gavin McQuillan",
    "author_email": "james@mozilla.com, gavin@urbanairship.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Environment :: Web Environment :: Mozilla",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "================\nDjango Brake\n================\n\n.. image:: https://secure.travis-ci.org/gmcquillan/django-brake.png?branch=master\n    :target: http://travis-ci.org/gmcquillan/django-brake\n\nDjango Brake provides a decorator to rate-limit views. Limiting can be\nbased on IP address or a field in the request--either a GET or POST variable.\n\nIf the rate limit is exceded, either a 403 Forbidden can be sent, or the\nrequest can be annotated with a ``limited`` attribute, allowing you to take\nanother action like adding a captcha to a form.\n\nThis is a fork of Django Ratelimit, to support:\n\n- Django 1.3 and above\n- Multiple buckets (e.g. separate endpoints)\n- Allow for multiple time thresholds (periods) per bucket\n- Analyze which functions were limited, and what their counts were.\n\nThe intention is to remain API compliant with Django Ratelimit.\n\nUsing Django Brake\n==================\n\n``from brake.decorators import ratelimit`` is the biggest thing you need to\ndo. The ``@ratelimit`` decorator provides several optional arguments with\nsensible defaults (in *italics*).\n\n:``ip``:\n    Whether to rate-limit based on the IP. *True*\n:``block``:\n    Whether to block the request instead of annotating. *False*\n:``method``:\n    Which HTTP method(s) to rate-limit. May be a string or a list. *all*\n:``field``:\n    Which HTTP field(s) to use to rate-limit. May be a string or a list. *none*\n:``rate``:\n    The number of requests per unit time allowed. *5/m*\n\n\nExamples\n--------\n\n::\n\n    @ratelimit()\n    def myview(request):\n        # Will be true if the same IP makes more than 5 requests/minute.\n        was_limited = getattr(request, 'limited', False)\n        return HttpResponse()\n\n    @ratelimit(block=True)\n    def myview(request):\n        # If the same IP makes >5 reqs/min, will return HttpResponseForbidden\n        return HttpResponse()\n\n    @ratelimit(field='username')\n    def login(request):\n        # If the same username OR IP is used >5 times/min, this will be True.\n        # The `username` value will come from GET or POST, determined by the\n        # request method.\n        was_limited = getattr(request, 'limited', False)\n        return HttpResponse()\n\n    @ratelimit(method='POST')\n    def login(request):\n        # Only apply rate-limiting to POSTs.\n        return HttpResponseRedirect()\n\n    @ratelimit(field=['username', 'other_field'])\n    def login(request):\n        # Use multiple field values.\n        return HttpResponse()\n\n    @ratelimit(rate='1/m')\n    @ratelimit(rate='10/h')\n    @ratelimit(rate='100/d')\n    def slow(request):\n        # Allow 1 reqs/min, 10 per hour, and 100 per day.\n        return HttpResponse()\n\n    #\n    ## Example Login Code to *only* block login failures\n    ##\n\n    @ratelimit(field='username', method='POST', rate='5/m')\n    @ratelimit(field='username', method='POST', rate='10/h')\n    @ratelimit(field='username', method='POST', rate='20/d')\n    def ratelimit_login(request):\n        \"\"\"Increment cache counters, 403 if over limit.\"\"\"\n\n        was_limited = getattr(request, 'limited', False)\n        if was_limited:\n            request.flash['error'] = 'You have been ratelimited'\n            # Log the error, etc.\n\n            return http.HttpResponseRedirect(urlresolvers.reverse(\n                'auth_login'\n            ))\n\n\n\n    def login(request):\n        \"\"\"Just a regular django login flow.\"\"\"\n        form = forms.AuthenticationForm()\n        if form.method == 'POST':\n            form = forms.AuthenticationForm(data=request.POST):\n                if form.is_valid()\n                    # Log in user and redirect to next page.\n\n                # Login information was not correct.\n                ratelimit_login(request)\n\n    # If you're interested in which endpoints failed, and what the\n    # counts were:\n\n    @ratelimit(field='username', method='POST', rate='1/m')\n    def login(request):\n        # Limits is a dict that looks like this:\n        # {'period': 60, 'field': 'username', 'count', 1}\n        # This can give you more insight into how to deal with\n        # the ratelimiting issue.\n        limits =  getattr(request, 'limits', {})\n\n        if limits:\n            return http.HttpResponseRedirect(urlresolvers.reverse(\n                'auth_login'\n            ))\n\n\nImplementation Details:\n=======================\n\nSome Required Customization\n---------------------------\n\nBy default we only track the IP that we get form\nrequest.META['HOST_ADDR']. Unless your webservers are sitting directly\non routable IPs and have no loadbalancers or upstream proxies,\nthis is probably not what you want!\n\nSince this is a deployment detail, we leave this up to those who choose\nto implement Django Brake. You do so with a simple bit of Inheritence\nand override.\n\n::\n\n    # In its own module, or in your view module; however you like:\n\n    from brake.backends import cachebe\n\n    class MyBrake(cachebe.CacheBackend):\n        def get_ip(self, request):\n            return request.META.get(\n                'HTTP_TRUE_CLIENT_IP',\n                request.META.get('REMOTE_ADDR')\n        )\n\n    # Now in your settings.py:\n\n    RATELIMIT_CACHE_BACKEND = 'path.to.module.MyBrake'\n\n\n.. note:: RATELIMIT_CACHE_BACKEND is now a string of the path to a\n    class. The class itself should be the last in the chain.\n\n\n\nInternals\n---------\n\nThese are variables which you do not need to modify directly, but are\nessential to the functioning of Brake\n\n:``function_name``:\n    This is the name of the function decorated with Brake; this allows\n    us to separate into different \"buckets\" for each view. This is\n    automatically added and doesn't need to be specified.\n:``period``:\n    This is derrived from the rate information passed in as a string.\n    It's the number of seconds for which the increment on a bucket +\n    period will be valid. It sets the TTL in memcache.\n\n\nThe cache key structure from *one* bad login attempt from our example\nabove would look something like this:\n\n::\n\n    # The form value derived counters:\n    rl:func:<function_name>:period:<60>:field:<username>:<sha1 of username>\n    rl:func:<function_name>:period:<3600>:field:<username>:<sha1 of username>\n    rl:func:<function_name>:period:<86400>:field:<username>:<sha1 of username>\n    # The IP derived counters:\n    rl:func:<function_name>:period:<60>:ip:<ip_address>\n    rl:func:<function_name>:period:<3600>:ip:<ip_address>\n    rl:func:<function_name>:period:<86500>:ip:<ip_address>\n\n*All period numbers are equivilent to the TTL for that key.*\n\nIf *any* of these thresholds are passed, then the view will 403. This is\na huge improvement in terms of usablity and security of many existing\nratelimiting applications.\n\n\nTesting\n=======\n\nTo run the test you need to simply run:\n\n::\n\n    virtualenv django-brake\n    cd django-brake\n    . bin/activate\n    python setup.py develop\n    ./test.sh\n\nThere's no slick test runner since we're trying not to fully integrate\nwith Django. See ``brake/tests/tests.py`` for more code examples.\n\nAcknowledgements\n================\n\nThanks to James Socol (`jsocol`_) on Github. A vast majority of the work on\nthis project is his (django-ratelimit_).\n\nAlso thanks to `Simon Willison`_'s ratelimitcache_, on which Jsocol's\nversion of this library is largly based.\n\n.. _jsocol: http://github.com/jsocol\n.. _django-ratelimit: https://github.com/jsocol/django-ratelimit\n.. _Simon Willison: http://simonwillison.net/\n.. _ratelimitcache: https://github.com/simonw/ratelimitcache",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/gmcquillan/django-brake",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-brake",
    "package_url": "https://pypi.org/project/django-brake/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-brake/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/gmcquillan/django-brake"
    },
    "release_url": "https://pypi.org/project/django-brake/1.2.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Cache-based rate-limiting for Django.",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5515195,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbd8f6d0e31ceaf2cd77c3768a063655f8ea51c8c679f39c1364655b83e79bf9",
        "md5": "1de7218c0497f216a880098b564f6acb",
        "sha256": "eba504f3a1ec71ccc7487bf491c81fa517253474e4b0225b2e281b617054b759"
      },
      "downloads": -1,
      "filename": "django-brake-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1de7218c0497f216a880098b564f6acb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9765,
      "upload_time": "2013-07-26T21:11:21",
      "upload_time_iso_8601": "2013-07-26T21:11:21.311600Z",
      "url": "https://files.pythonhosted.org/packages/fb/d8/f6d0e31ceaf2cd77c3768a063655f8ea51c8c679f39c1364655b83e79bf9/django-brake-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}