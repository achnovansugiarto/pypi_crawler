{
  "info": {
    "author": "3YOURMIND GmbH",
    "author_email": "david.wobrock@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "=======================\nDjango migration linter\n=======================\n\nDetect backward incompatible migrations for your django project. It will save you time by making sure migrations will not break anything.\n\n.. image:: https://travis-ci.org/3YOURMIND/django-migration-linter.svg?branch=master\n    :target: https://travis-ci.org/3YOURMIND/django-migration-linter\n\n.. image:: https://img.shields.io/pypi/v/django-migration-linter.svg\n    :target: https://pypi.python.org/pypi/django-migration-linter/\n\n.. image:: https://img.shields.io/github/license/3yourmind/django-migration-linter.svg\n    :target: ./LICENSE\n\n.. image:: https://img.shields.io/badge/PR-welcome-green.svg\n    :target: https://github.com/3YOURMIND/django-migration-linter/pulls\n\n.. image:: https://img.shields.io/badge/3YOURMIND-Hiring-brightgreen.svg\n    :target: https://www.3yourmind.com/career\n\n.. image:: https://img.shields.io/github/stars/3YOURMIND/django-migration-linter.svg?style=social&label=Stars\n    :target: https://github.com/3YOURMIND/django-migration-linter/stargazers\n\nInstallation\n------------\n\n``pip install django-migration-linter``\n\n\nUsage\n-----\n\n\nAdd the migration linter your ``INSTALLED_APPS``:\n\n.. code-block::\n\n    INSTALLED_APPS = [\n        ...,\n        \"django_migration_linter\",\n        ...,\n    ]\n\n\n``python manage.py lintmigrations [GIT_COMMIT_ID] [--ignore-name-contains IGNORE_NAME_CONTAINS] [--include-apps INCLUDE_APPS [INCLUDE_APPS ...] | --exclude-apps EXCLUDE_APPS [EXCLUDE_APPS ...]] [--exclude-migration-tests MIGRATION_TEST_CODE [MIGRATION_TEST_CODE ...]] [--project-root-path DJANGO_PROJECT_FOLDER]``\n\n================================================================ ===========================================================================================================================\n                   Parameter                                                                            Description\n================================================================ ===========================================================================================================================\n``GIT_COMMIT_ID``                                                If specified, only migrations since this commit will be taken into account. If not specified, all migrations will be linted.\n``--ignore-name-contains IGNORE_NAME_CONTAINS``                  Ignore migrations containing this name.\n``--ignore-name IGNORE_NAME [IGNORE_NAME ...]``                  Ignore migrations with exactly one of these names.\n``--include-apps INCLUDE_APPS [INCLUDE_APPS ...]``               Check only migrations that are in the specified django apps.\n``--exclude-apps EXCLUDE_APPS [EXCLUDE_APPS ...]``               Ignore migrations that are in the specified django apps.\n``--exclude-migration-tests MIGRATION_TEST_CODE [...]``          Specify backward incompatible migration tests to be ignored using the code (e.g. ALTER_COLUMN).\n``--verbose or -v``                                              Print more information during execution.\n``--database DATABASE``                                          Specify the database for which to generate the SQL. Defaults to *default*.\n``--cache-path PATH``                                            specify a directory that should be used to store cache-files in.\n``--no-cache``                                                   Don't use a cache.\n``--applied-migrations``                                         Only lint migrations that are applied to the selected database. Other migrations are ignored.\n``--unapplied-migrations``                                       Only lint migrations that are not yet applied to the selected database. Other migrations are ignored.\n``--project-root-path DJANGO_PROJECT_FOLDER``                    An absolute or relative path to the django project.\n================================================================ ===========================================================================================================================\n\nExamples\n--------\n\n3YOURMIND is running the linter on every build getting pushed through CI.\nThat enables to be sure that the migrations will allow A/B testing, Blue/Green deployment and they won't break your development environment.\nAs every reasonable tool, a non-zero error code means that at least one invalid migration has been found.\n\nBackward incompatible migrations\n--------------------------------\n\nThe linter analyses your migrations and checks the SQL for:\n\n- Added ``NOT NULL`` columns, which don't have a DEFAULT value\n- Dropping columns\n- Dropping tables\n- Renaming columns\n- Renaming tables\n- Altering columns (which can be backward compatible and potentially ignored)\n- Adding a unique constraint\n\nThose are the most important and frequent backward incompatible migrations.\nWe are happy to add more if you can specify them to us.\n\nIgnoring migrations\n-------------------\n\nYou can also ignore migrations by adding this to your migrations:\n\n.. code-block::\n\n    import django_migration_linter as linter\n    # ...\n\n        operations = [\n            linter.IgnoreMigration(),\n            # ...\n        ]\n    # ...\n\nIgnoring migration tests\n------------------------\n\nYou can also ignore backward incompatible migration tests by adding this option during execution:\n\n``python manage.py lintmigrations --exclude-migration-tests ALTER_COLUMN``\n\nThe migration test codes can be found in the file ``django_migration_linter/sql_analyser.py``.\n\nCache\n-----\nBy default, the linter uses a cache to prevent linting the same migration multiple times.\nThe default location of the cache on Linux is\n``/home/<username>/.cache/django-migration-linter/<version>/<ldjango-project>_<database_name>.pickle``.\n\nSince the linter uses hashes of the file's content, modifying a migration file will re-run the linter on that migration.\nIf you want to run the linter without cache, use the flag ``--no-cache``.\nIf you want to invalidate the cache, delete the cache folder.\nThe cache folder can also be defined manually through the ``--cache-path`` option.\n\nTests\n-----\n\nThe easiest way to run the tests is to invoke `tox`_.\n\nYou will need to install the test requirements, which can be found in the ``setup.py`` file.\nA good way to get started is to install the development version of the linter by doing ``pip install -e .[test]``.\n\nTo be able to fully test the linter, you will need both MySQL and PostgreSQL databases running.\nYou can either tweak the ``tests/test_project/settings.py`` file to get your DB settings right, or to have databases and users corresponding to the default Travis users.\n\nContributing\n------------\n\nFirst, thank you very much if you want to contribute to the project.\nPlease base your work on the ``master`` branch and also target this branch in your pull request.\n\nPublishing the package\n----------------------\n\nA small note on how the linter is usually published to PyPi:\n\n- ``python setup.py check --restructuredtext``\n- ``python3 setup.py sdist bdist_wheel --universal``\n- ``twine upload dist/django_migration_linter-X.Y.Z-py2.py3-none-any.whl dist/django-migration-linter-X.Y.Z.tar.gz``\n\nBlog post\n---------\n\n`Keeping Django database migrations backward compatible`_\n\nLicense\n-------\n\n*django-migration-linter* is released under the `Apache 2.0 License`_.\n\n\n.. _`tox`: https://pypi.python.org/pypi/tox\n.. _`Keeping Django database migrations backward compatible`: https://medium.com/3yourmind/keeping-django-database-migrations-backward-compatible-727820260dbb\n.. _`Apache 2.0 License`: https://github.com/3YOURMIND/django-migration-linter/blob/master/LICENSE\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/3YOURMIND/django-migration-linter",
    "keywords": "django migration lint linter database backward compatibility",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-migration-linter",
    "package_url": "https://pypi.org/project/django-migration-linter/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-migration-linter/",
    "project_urls": {
      "Homepage": "https://github.com/3YOURMIND/django-migration-linter"
    },
    "release_url": "https://pypi.org/project/django-migration-linter/1.3.0/",
    "requires_dist": [
      "django (>=1.11)",
      "appdirs (==1.4.3)",
      "tox (==3.9.0) ; extra == 'test'",
      "mysqlclient (==1.4.2) ; extra == 'test'",
      "psycopg2-binary (==2.8.2) ; extra == 'test'",
      "django-add-default-value (==0.3.1) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Detect backward incompatible migrations for your django project",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13606904,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69ee760a3a68906bcc8248cc8b99294d45fbb2c090abfab1930b674ae3143dcd",
        "md5": "5ac62003c6bf6a2a9017481099ba2656",
        "sha256": "597522d7580ee2dfbe1a25a13d9ecf29049ec46c8ca57497f7e2d17a7007ae91"
      },
      "downloads": -1,
      "filename": "django_migration_linter-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ac62003c6bf6a2a9017481099ba2656",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 73131,
      "upload_time": "2019-07-30T08:49:46",
      "upload_time_iso_8601": "2019-07-30T08:49:46.912366Z",
      "url": "https://files.pythonhosted.org/packages/69/ee/760a3a68906bcc8248cc8b99294d45fbb2c090abfab1930b674ae3143dcd/django_migration_linter-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53374729c5f4095233c94e19c9f28879fe155ca126de1eb04f4566bb6b7e5f3c",
        "md5": "20c167973be2c89b076e15eebf248eeb",
        "sha256": "0406f2b60ebc2f8a04c81b9499b75b5333d9eb7fb2df9bfb98cb847fb2486d17"
      },
      "downloads": -1,
      "filename": "django-migration-linter-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20c167973be2c89b076e15eebf248eeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28056,
      "upload_time": "2019-07-30T08:49:48",
      "upload_time_iso_8601": "2019-07-30T08:49:48.841004Z",
      "url": "https://files.pythonhosted.org/packages/53/37/4729c5f4095233c94e19c9f28879fe155ca126de1eb04f4566bb6b7e5f3c/django-migration-linter-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}