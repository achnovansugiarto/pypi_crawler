{
  "info": {
    "author": "Rick van Hattem",
    "author_email": "Rick.van.Hattem@Fawo.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Introduction\n============\n\nTravis status:\n\n.. image:: https://travis-ci.org/WoLpH/django-utils.svg?branch=master\n  :target: https://travis-ci.org/WoLpH/django-utils\n\nCoverage:\n\n.. image:: https://coveralls.io/repos/WoLpH/django-utils/badge.svg?branch=master\n  :target: https://coveralls.io/r/WoLpH/django-utils?branch=master\n\nDjango Utils is a collection of small Django helper functions, utilities and\nclasses which make common patterns shorter and easier. It is by no means a\ncomplete collection but it has served me quite a bit in the past and I will\nkeep extending it.\n\nExamples are:\n\n - Admin Select (Dropdown) filters\n - Admin Select2 (Autocomplete dropdown) filters\n - Admin JSON sub-field filters\n - Enum based choicefields\n - Models with automatic ``__str__``, ``__unicode__`` and ``__repr__`` functions\n   based on names and/or slugs using simple mixins.\n - Models with automatic ``updated_at`` and ``created_at`` fields\n - Models with automatic slugs based on the ``name`` property.\n - Iterating through querysets in predefined chunks to prevent out of memory\n   errors\n\nThe library depends on the Python Utils library.\n\nDocumentation is available at: http://django-utils-2.readthedocs.io/en/latest/\n\nInstall\n-------\n\nTo install:\n\n 1. Run ``pip install django-utils2`` or execute ``python setup.py install`` in the source directory\n 2. Add ``django_utils`` to your ``INSTALLED_APPS``\n \nIf you want to run the tests, run ``py.test`` (requirements in ``tests/requirements.txt``)\n\nAdmin Select / Dropdown / Autocomplete (JSON) Filters\n-----------------------------------------------------\n\nAll of the standard admin list filters are available through ``django_utils\n.admin.filters`` as:\n\n - The original filter (e.g. ``SimpleListFilter``)\n - A basic select/dropdown filter: ``SimpleListFilterDropdown``\n - A select2 based autocompleting dropdown filter: ``SimpleListFilterSelect2``\n\nOn PostgreSQL you can additionally filter on JSON fields as well given paths:\n\n.. code-block:: python\n\n    class SomeModelAdmin(admin.ModelAdmin):\n        list_filter = (\n            JSONFieldFilterSelect2.create('some_json_field__some__sub_path'),\n        )\n\nThat will filter a JSON field named ``some_json_field`` and look for values\nlike this:\n\n.. code-block:: json\n\n    {\"some\": {\"sub_path\": \"some value\"}}\n\nBy default the results for the JSON filters are cached for 10 minutes but can\nbe changed through the ``create`` parameters.\n\nChoices usage\n-------------\n\nTo enable easy to use choices which are more convenient than the Django 3.0 choices system you can use this:\n\n.. code-block:: python\n\n    from django_utils import choices\n\n\n    # For manually specifying the value (automatically detects ``str``, ``int`` and ``float``):\n    class Human(models.Model):\n        class Gender(choices.Choices):\n            MALE = 'm'\n            FEMALE = 'f'\n            OTHER = 'o'\n\n        gender = models.CharField(max_length=1, choices=Gender)\n\n\n    # To define the values as ``male`` implicitly:\n    class Human(models.Model):\n        class Gender(choices.Choices):\n            MALE = choices.Choice()\n            FEMALE = choices.Choice()\n            OTHER = choices.Choice()\n\n        gender = models.CharField(max_length=1, choices=Gender)\n\n\n    # Or explicitly define them\n    class Human(models.Model):\n        class Gender(choices.Choices):\n            MALE = choices.Choice('m', 'male')\n            FEMALE = choices.Choice('f', 'female')\n            OTHER = choices.Choice('o', 'other')\n\n        gender = models.CharField(max_length=1, choices=Gender)\n\nA PostgreSQL ENUM field will be coming soon to automatically facilitate the creation of the enum if needed.\n\nLinks\n-----\n\n* Documentation\n    - http://django-utils-2.readthedocs.org/en/latest/\n* Source\n    - https://github.com/WoLpH/django-utils\n* Bug reports \n    - https://github.com/WoLpH/django-utils/issues\n* Package homepage\n    - https://pypi.python.org/pypi/django-utils2\n* My blog\n    - http://w.wol.ph/\n\n",
    "description_content_type": "",
    "docs_url": "https://pythonhosted.org/django-utils2/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WoLpH/django-utils",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-utils2",
    "package_url": "https://pypi.org/project/django-utils2/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-utils2/",
    "project_urls": {
      "Homepage": "https://github.com/WoLpH/django-utils"
    },
    "release_url": "https://pypi.org/project/django-utils2/2.12.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Utils is a module with some convenient utilities not included with the standard Django install",
    "version": "2.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17098293,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c651efc055116c8c587af4db6729229c14bfbe8441a8d327ffd3a2073efc3ed",
        "md5": "ddf52b85eaab6b7ac1c9c920ae18bd7a",
        "sha256": "63f306f2610e9cee559ad8efa87e02c896f4fae1991e637a312af8d088d53b4f"
      },
      "downloads": -1,
      "filename": "django_utils2-2.12.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "ddf52b85eaab6b7ac1c9c920ae18bd7a",
      "packagetype": "bdist_wheel",
      "python_version": "3.8",
      "requires_python": null,
      "size": 23663,
      "upload_time": "2021-04-28T19:40:17",
      "upload_time_iso_8601": "2021-04-28T19:40:17.917973Z",
      "url": "https://files.pythonhosted.org/packages/1c/65/1efc055116c8c587af4db6729229c14bfbe8441a8d327ffd3a2073efc3ed/django_utils2-2.12.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b3c82c085b4d09d709ac8cc6d972f2e40a6d2effb92831d274ae8b53a5d2c30",
        "md5": "8bf07da4183f2724029f19abe47b8dcf",
        "sha256": "04d0142f3f138e0753efee670243d124f32138995c7b5aef08c9c1219d22de67"
      },
      "downloads": -1,
      "filename": "django-utils2-2.12.0.tar.gz",
      "has_sig": true,
      "md5_digest": "8bf07da4183f2724029f19abe47b8dcf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20919,
      "upload_time": "2021-04-28T19:40:15",
      "upload_time_iso_8601": "2021-04-28T19:40:15.250847Z",
      "url": "https://files.pythonhosted.org/packages/2b/3c/82c085b4d09d709ac8cc6d972f2e40a6d2effb92831d274ae8b53a5d2c30/django-utils2-2.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}