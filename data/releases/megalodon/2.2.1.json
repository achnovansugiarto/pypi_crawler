{
  "info": {
    "author": "Marcus Stoiber",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: GPU",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": ".. image:: /ONT_logo.png\n  :width: 800\n  :alt: [Oxford Nanopore Technologies]\n\n******************\n\nMegalodon\n\"\"\"\"\"\"\"\"\"\n\n|pypi_v| |pypi_dm|\n\n|conda_v| |conda_dn|\n\n.. |pypi_v| image:: https://img.shields.io/pypi/v/megalodon\n.. |pypi_dm| image:: https://img.shields.io/pypi/dm/megalodon\n.. |conda_v| image:: https://img.shields.io/conda/vn/bioconda/megalodon\n.. |conda_dn| image:: https://img.shields.io/conda/dn/bioconda/megalodon\n\nMegalodon is a research command line tool to extract high accuracy modified base and sequence variant calls from raw nanopore reads by anchoring the information rich basecalling neural network output to a reference genome/transcriptome.\n\nRaw nanopore reads are processed by a single command to produce basecalls (FASTA/Q), reference mappings (SAM/BAM/CRAM), modified base calls (per-read and bedgraph/bedmethyl/modVCF), sequence variant calls (per-read and VCF) and more.\n\nDetailed documentation for all ``megalodon`` commands and algorithms can be found on the `Megalodon documentation page <https://nanoporetech.github.io/megalodon/>`_.\n\nPrerequisites\n-------------\n\nAs of version 2.0, the primary Megalodon run mode requires the Guppy basecaller and as of version 2.2 Guppy version >= 4.0 is required.\nSee the `community page for download/installation instructions [login required] <https://community.nanoporetech.com/downloads>`_.\n\nMegalodon is a python-based command line software package.\nGiven a python (version >= 3.5) installation, all other requirements are handled by ``pip`` or ``conda``.\n\n..\n\n   `Taiyaki <https://github.com/nanoporetech/taiyaki>`_ is no longer required to run Megalodon, but installation is required for two specific run modes:\n\n   1) output mapped signal files (for basecall model training)\n\n   2) running the Taiyaki basecalling backend (for neural network designs including experimental layers)\n\nInstallation\n------------\n\n``pip`` and ``conda`` are the recommended installation interfaces for Megalodon.\n``ont_pyguppy_client_lib`` is not available on conda and thus must be installed with ``pip``.\n\n::\n\n   pip install megalodon\n   # or\n   conda install megalodon\n   pip install ont_pyguppy_client_lib\n\nTo install from github source for development, the following commands can be run.\n``numpy`` must be installed before running installation for cython optimizations.\n\n::\n\n   git clone https://github.com/nanoporetech/megalodon\n   pip install numpy cython\n   pip install -e megalodon/\n\nGetting Started\n---------------\n\nMegalodon is accessed via the command line interface ``megalodon`` command.\n\n::\n\n    # megalodon help (common args)\n    megalodon -h\n    # megalodon help (all args)\n    megalodon --help-long\n\n    # Example command to output basecalls, mappings, and CpG methylation in both per-read (``mod_mappings``) and aggregated (``mods``) formats\n    #   Compute settings: GPU devices 0 and 1 with 40 CPU cores\n    # For highest accuracy methylation calls see research models in Rerio: https://github.com/nanoporetech/rerio\n    megalodon raw_fast5s/ \\\n        --outputs basecalls mappings mod_mappings mods \\\n        --reference reference.fa --mod-motif Z CG 0 \\\n        --devices 0 1 --processes 40\n\nThis command produces the ``megalodon_results`` output directory containing all requested output files and logs.\nThe format for common outputs is described briefly below and in more detail in the `full documentation <https://nanoporetech.github.io/megalodon/>`_\n\n..\n\n    The path to the ``guppy_basecall_server`` executable is required to run Megalodon.\n    By default, Megalodon assumes Guppy (Linux GPU) is installed in the current working directory (i.e. ``./ont-guppy/bin/guppy_basecall_server``).\n    Use the ``--guppy-server-path`` argument to specify a different path.\n\nInputs\n------\n\n- Raw reads\n\n  - Directory containing raw read FAST5 files (sub-directories recursively searched)\n- Reference\n\n  - Genome or transcriptome sequence reference (FASTA or minimap2 index)\n- Variants File\n\n  - Megalodon requires a set of candidate variants for ``--outputs variants`` (provide via ``--variant-filename`` argument; VCF or BCF).\n\nOutputs\n-------\n\nAll Megalodon outputs are written into the directory specified with the ``--output-directory`` option with standard file names and extensions.\n\n- Basecalls\n\n  - Format: FASTQ (default) or FASTA\n  - Basecall-anchored modified base scores are also available in hts-spec BAM format tags (``--outputs mod_basecalls``).\n- Mappings\n\n  - Format: SAM, BAM (default), or CRAM\n  - A tab-separated mapping text summary is also produced including per-read alignment statistics.\n- Modified Base Calls\n\n  - The basecalling model specifies the modified bases capable of being output. See ``megalodon_extras modified_bases describe_alphabet``.\n  - Per-read modified base calls\n\n    - SQL DB containing per-read modified base scores at each covered reference location\n    - Reference-anchored per-read modified base calls is BAM format via the ``Mm`` and ``Ml`` tags (see `hts-spec specifications here <https://github.com/samtools/hts-specs/pull/418>`_).\n  - Aggregated calls\n\n    - Format: bedgraph, bedmethyl (default), and/or modVCF\n  - In order to restrict modified base calls to a specific motif(s) specify the ``--mod-motif`` argument. For example, to restrict calls to CpG sites specify ``--mod-motif Z CG 0``.\n- Sequence Variant Calls\n\n  - Per-read Variant Calls\n\n    - SQL DB containing per-read variant scores for each covered variant\n  - Aggregated calls\n\n    - Format: VCF\n    - Default run mode is diploid. To run in haploid mode, set ``--haploid`` flag.\n    - For best results on a diploid genome see the variant phasing workflow on the `full documentation page <https://nanoporetech.github.io/megalodon/variant_phasing.html>`_.\n\nLive Processing\n---------------\n\nAs of version 2.2, Megalodon now supports live run processing.\nActivate live processing mode by simply adding the ``--live-processing`` argument and specifying the MinKNOW output directory as the Megalodon FAST5 input directory.\nMegalodon will continue to search for FAST5s until the ``final_summary*`` file is created by MinKNOW, indicating data production has completed.\n\nGuppy Models and Parameters\n---------------------------\n\nAs of version 2.2, Megalodon requires Guppy version >= 4.0.\n\nThe Guppy model defines the modified bases capable of being output by Megalodon.\nBasecalling models must be trained to specifically detect a type or types of modified bases.\nSee the `Megalodon documentation here <https://nanoporetech.github.io/megalodon/modbase_training.html>`_ for instructions to construct modified base training data and train a new modified base model.\n\nBy default, Megalodon uses the ``dna_r9.4.1_450bps_modbases_dam-dcm-cpg_hac.cfg`` Guppy config.\nThis config is compatible with DNA, R9.4.1, MinION/GridION reads and allows output of 5mC and 6mA calls in biological contexts (CpG, dcm and dam sites).\nUse the ``--guppy-config`` option to specify a different guppy model config.\nThe appropriate `Rerio model <https://github.com/nanoporetech/rerio>`_ is recommended for the highest accuracy modified base calls.\n\nAll configs can be used to output ``basecalls`` and ``mappings`` (as well as ``signal_mappings`` and ``per_read_refs`` for `basecall training <https://nanoporetech.github.io/megalodon/model_training.html>`).\nModified base and sequence variant outputs require Megalodon calibration files.\nTo list configs with default calibration files, run ``megalodon --list-supported-guppy-configs``.\nSee `calibration documentation here <https://nanoporetech.github.io/megalodon/extras_calibrate.html>`_ for details on Megalodon model calibration.\n\nOnly flip-flop configs/models are currently supported by Megalodon (this excludes k-mer based and RLE model types).\n\nIn addition to the ``--guppy-config`` and ``--guppy-server-path`` options, a number of additional arguments control the behavior of the guppy backend.\nThe ``--guppy-params`` argument will pass arguments directly to the ``guppy_basecall_server`` initialization call.\nFor example to optimize GPU usage, the following option might be specified: ``--guppy-params \"--num_callers 5 --ipc_threads 6\"``\n\nFinally the ``--guppy-timeout`` arguments ensures that a run will not stall on a small number of reads taking a very long time (default 30 seconds per batch of 50 reads).\n\nHigh Quality Phased Variant Calls\n---------------------------------\n\nIn order to obtain the highest quality diploid sequence variant calls, the full variant phasing pipeline employing ``whatshap`` should be applied.\nThis pipeline is described in detail on the `full documentation page <https://nanoporetech.github.io/megalodon/variant_phasing.html>`_.\nThe default diploid variant settings are optimized for the full phasing pipeline and not the highest quality diploid calls directly from a single Megalodon call.\n\nHigh-Density Variants\n---------------------\n\nWhen running Megalodon with a high density of variants (more than 1 variant per 100 reference bases), certain steps can be taken to increase performance.\nSee `variant atomize documentation <https://nanoporetech.github.io/megalodon/extras_variants.html#megalodon-extras-variants-atomize>`_ for further details.\n\nDisk Performance Considerations\n-------------------------------\n\nPer-read modified base and variant statistics are stored in an on-disk sqlite database.\nAs of version 2.0 the status of output queues and as of version 2.2 the extract signal input queue are displayed by default.\n\nIf the ``extract_signal`` input queue is often empty, Megalodon is waiting on reading raw signal from FAST5 files.\nAs of version 2.2.1, the ``--num-read-enumeration-threads`` option was added.\nIf the input queue remains empty and the system is not disk I/O bound (e.g. observed by ``iotop``), increasing this parameter (default ``8``) may improve performance.\nAlternatively and if available, the input FAST5s disk location could be moved to faster I/O disk.\n\nIf any output status bars indicate a full queue, Megalodon will stall waiting on that process to write data to disk.\nMoving the ``--output-directory`` accordingly to a location with faster disk I/O performance should improve performance.\n\nRNA\n---\n\nMegalodon supports processing direct RNA nanopore data.\nIn order to process an RNA sample specify the ``--rna`` flag as well as an RNA model using the ``--guppy-config`` argument.\n\nMegalodon performs mapping using the standard minimap2 option, ``map-ont``, and not the ``splice`` option, so a transcriptome reference must be provided.\nThe Megalodon code supports RNA modified base detection, but currently no RNA modified base basecalling models are released.\n\n..\n\n   Megalodon does not currently perform checking that a set of reads agree with the provided model or options specified (e.g. ``--rna``).\n   Users should take care to ensure that the correct options are specified for each sample processed.\n\nLicense and Copyright\n---------------------\n\n|copy| 2019-20 Oxford Nanopore Technologies Ltd.\n\n.. |copy| unicode:: 0xA9 .. copyright sign\n\nMegalodon is distributed under the terms of the Oxford Nanopore\nTechnologies, Ltd.  Public License, v. 1.0.  If a copy of the License\nwas not distributed with this file, You can obtain one at\nhttp://nanoporetech.com\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nanoporetech/megalodon",
    "keywords": "nanopore sequencing basecalling mapping methylation variants",
    "license": "mpl-2.0",
    "maintainer": "Marcus Stoiber",
    "maintainer_email": "marcus.stoiber@nanoporetech.com",
    "name": "megalodon",
    "package_url": "https://pypi.org/project/megalodon/",
    "platform": "",
    "project_url": "https://pypi.org/project/megalodon/",
    "project_urls": {
      "Homepage": "https://github.com/nanoporetech/megalodon"
    },
    "release_url": "https://pypi.org/project/megalodon/2.2.1/",
    "requires_dist": [
      "h5py (>=2.2.1)",
      "numpy (>=1.9.0)",
      "scipy (>=1.1.0)",
      "Cython (>=0.25.2)",
      "mappy (>=2.16)",
      "pysam (>=0.15)",
      "ont-fast5-api (>=1.1)",
      "tqdm",
      "ont-pyguppy-client-lib",
      "sklearn",
      "seaborn"
    ],
    "requires_python": "",
    "summary": "Nanopore base calling augmentation",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13288510,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82272831a1d28162814e76b2e8a11fce724981e8859d1bc01f6466c242c4aca8",
        "md5": "022a0609977aab97029493d865385029",
        "sha256": "2cad064accda0a6aef3ac728fc3a1bdd4016145eb16cb322b542b0312cdb5cd5"
      },
      "downloads": -1,
      "filename": "megalodon-2.2.1-cp36-cp36m-macosx_10_9_x86_64.whl",
      "has_sig": false,
      "md5_digest": "022a0609977aab97029493d865385029",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 6551878,
      "upload_time": "2020-09-08T18:55:24",
      "upload_time_iso_8601": "2020-09-08T18:55:24.457445Z",
      "url": "https://files.pythonhosted.org/packages/82/27/2831a1d28162814e76b2e8a11fce724981e8859d1bc01f6466c242c4aca8/megalodon-2.2.1-cp36-cp36m-macosx_10_9_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af83f12260694514be27333adb79165bc3958b59909eb21495b918a98e0e6f07",
        "md5": "709427f41373fbf74e1b2b8a09444dac",
        "sha256": "33f3fdeae806a34fc9a0e2b3cb5b4d5bf7c1822c6eb00f9ed8a3cd2fb1327ef7"
      },
      "downloads": -1,
      "filename": "megalodon-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "709427f41373fbf74e1b2b8a09444dac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6487928,
      "upload_time": "2020-09-08T18:55:47",
      "upload_time_iso_8601": "2020-09-08T18:55:47.074783Z",
      "url": "https://files.pythonhosted.org/packages/af/83/f12260694514be27333adb79165bc3958b59909eb21495b918a98e0e6f07/megalodon-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}