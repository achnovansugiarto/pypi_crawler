{
  "info": {
    "author": "Ryan Senkbeil",
    "author_email": "ryan.senkbeil@gsdesign.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# django-leaf\n\n> Render django templates based on URL path.\n\n[![Build Status](https://img.shields.io/travis/gsmke/django-leaf/master.svg?style=flat)](https://travis-ci.org/gsmke/django-leaf)\n[![Latest Version](https://img.shields.io/pypi/v/django-leaf.svg?style=flat)](https://pypi.python.org/pypi/django-leaf/)\n\n## Quick start\n\n1. Install the package from pypi:\n\n    ```bash\n    pip install django-leaf\n    ```\n\n2. Add \"leaf\" and \"mptt\" to your INSTALLED_APPS:\n\n    ```python\n    INSTALLED_APPS = (\n        ...\n        'leaf',\n        'mptt',\n    )\n    ```\n\n3. Add leaf urls to *the end* of your urlpatterns:\n\n    ```python\n    url(r'^', include('leaf.urls')),\n    ```\n\n## Usage\n\ndjango-leaf can be used to render both \"static\" and database-backed templates.\n\n### Static Templates\n\nIf you want to render a template when a user goes to `/example/url/`, create one of the following files:\n\n1. example/url.html\n2. example/url/index.html\n3. pages/example/url.html\n4. pages/example/url/index.html\n\n### Database Backed Templates\n\nAfter installing django-leaf, the admin interface will have a new section called `Pages` where you'll be able to create your page hierarchy.\n\nTo define your own page model, you need to extend from `leaf.models.Page`.\nThere are a few fields available for customization:\n\n1. **identifier**: A unique identifier for your model. This will be used to associate page nodes with your page implementation. If you don't provide an `identifier`, one will be provided for you.\n2. **template**: The template to render.\n3. **admin_inline**: The admin class to use when rendering the template fields inline. This defaults to the default ``admin.StackedInline``.\n\nHere's an example for creating a page with translations provided by [django-parler](https://github.com/edoburu/django-parler):\n\n```python\n# admin.py\nfrom parler.admin import TranslatableStackedInline\n\n\nclass AboutPageInline(TranslatableStackedInline):\n    pass\n\n# models.py\nfrom django.db import models\nfrom leaf.models import Page\nfrom parler.models import TranslatableModel, TranslatedFields\n\nfrom .admin import AboutPageInline\n\n\nclass AboutPage(Page, TranslatableModel):\n    admin_inline = AboutPageInline\n    identifier = 'about-page'\n    template = \"about.html\"\n\n    translations = TranslatedFields(\n        headline=models.CharField(max_length=255),\n        copy=models.TextField(blank=True)\n    )\n\n    def __unicode__(self):\n        return self.headline\n```\n\nWhen rendering the template, all of the model fields will be available on the ``page`` context variable:\n\n```django\n{{ page.headline }}\n{{ page.copy }}\n```\n\n# TODO\n\n1. Better documentation.\n2. More configuration options.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-leaf",
    "package_url": "https://pypi.org/project/django-leaf/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-leaf/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-leaf/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Render and serve django templates based on URL.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2658142,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "571f734165019690f09dbd20159a5216081725f03e1ffa4aef7999c62b5c1bff",
        "md5": "508bfaa242e0c7fbf86be2501d8c80ea",
        "sha256": "22fdf65d9cbb8ff5249eaf0218eae89b00413ccfcf49f932e46c8adfefa76367"
      },
      "downloads": -1,
      "filename": "django-leaf-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "508bfaa242e0c7fbf86be2501d8c80ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11506,
      "upload_time": "2015-04-29T14:13:33",
      "upload_time_iso_8601": "2015-04-29T14:13:33.889299Z",
      "url": "https://files.pythonhosted.org/packages/57/1f/734165019690f09dbd20159a5216081725f03e1ffa4aef7999c62b5c1bff/django-leaf-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}