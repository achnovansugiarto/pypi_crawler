{
  "info": {
    "author": "Jack Y. Araz",
    "author_email": "jack.araz@durham.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# MadAnalysis 5 Interpreter For Expert Mode\n[![EPJC](https://img.shields.io/static/v1?style=plastic&label=DOI&message=10.1140/epjc/s10052-021-09052-5&color=blue)](https://doi.org/10.1140/epjc/s10052-021-09052-5)\n[![arxiv](https://img.shields.io/static/v1?style=plastic&label=arXiv&message=2006.09387&color=brightgreen)](https://arxiv.org/abs/2006.09387)\n\n MadAnalysis 5 output interpreter for expert mode. Parses the cutflow collection and \n constructs it with an interactable interface (histogram interpreter coming soon). \n\n## Installation\n`pip install ma5-expert`\n\n## Outline\n* [Cutflow Collection](#cutflow-collection)\n* [Histogram Collection](#histogram-collection)\n* [Citation](#citation)\n\n### Cutflow Collection\n\n * Parse all the signal regions and construct an object-base, interactable cutflow.\n * Write combined LaTeX tables for different samples.\n * Compare samples and construct validation tables which allow you to calculate the difference of the relative efficiencies for each given sample with respect to a reference sample.\n * Compare signal and background samples and calculate the figure of merit.\n * Possibility to include experimentally available cutflow data and compare it against MadAnalysis 5 cutflow output.\n * Calculate Monte Carlo uncertainty per cut on the fly\n \nExamples can be found in [examples folder](https://github.com/jackaraz/ma5_expert/tree/master/examples).\n\n* Simple cutflow:\n\n`CutFlowCollection` needs `CutFlows` path of your sample in MadAnalysis 5 Analysis folder.\nWe provide an ma5 directory in `examples` folder so we will go through and the code using that.\nParsing a cutflow simply requires the path of the `CutFlows` folder and optionally `xsection` [pb], `lumi` [1/fb]\nand/or `Nevents`. Note that `xsec` overwrites the number of events option, if provided number of events\nare always calculated using the cross section.\n```python\nimport ma5_expert as ma5\nsample = ma5.cutflow.Collection(\n    \"examples/mass1000005_300.0_mass1000022_60.0_mass1000023_250.0_xs_5.689/Output/SAF/defaultset/atlas_susy_2018_31/Cutflows\",\n    xsection=5.689, lumi=139.\n)\n```\nHere the first input is the path of the `CutFlows` folder and the rest are simply cross section and \nluminosity information. One can see the signal regions by simply printing the `keys` of the `CutFlowCollection` object;\n```python\nprint(sample.SRnames)\n# Output: \n# ['SRC_28', 'SRA_M', 'SRA_L', 'SRA_H', 'SRA', 'SRC', 'SRB', 'SRC_26', 'SRC_24', 'SRC_22']\n```\nEach signal region is accessible through `CutFlowCollection` object. For instance one can get the names of \nthe cuts applied in one of the signal regions.\n```python\nprint(sample.SRA.CutNames)\n# Output: \n# ['Initial', '$N_{lep} = 0$', '$N_{j} \\\\geq 6$', '$N_{b} \\\\geq 4$', \n# '$\\\\slashed{E}_T > 350$ [GeV]', '$min(\\\\Delta\\\\phi(j_{1-4},\\\\slashed{E}_T))>0.4$ [rad]', \n# '$\\\\tau^h$ veto', '$p^{b_1}_T > 200$ [GeV]', '$\\\\Delta R_{max}(b,b)>2.5$', \n# '$\\\\Delta R_{max-min}(b,b)<2.5$', '$m(h_{cand})>80$ [GeV]', '$m_{eff} > 1$ [TeV]']\n```\nOr simply print the entire cutflow;\n```python\nprint(sample.SRA)\n# Output: \n# * SRA :\n#  * Initial :\n#   - Number of Entries    : 200000\n#   - Number of Events     : 790771.000 ± 0.000(ΔMC)\n#   - Cut & Rel Efficiency : 1.000, 1.000\n#  * $N_{lep} = 0$ :\n#   - Number of Entries    : 156651\n#   - Number of Events     : 499908.962 ± 609.064(ΔMC)\n#   - Cut & Rel Efficiency : 0.632, 0.632\n#  * $N_{j} \\geq 6$ :\n#   - Number of Entries    : 65546\n#   - Number of Events     : 209971.179 ± 362.184(ΔMC)\n#   - Cut & Rel Efficiency : 0.266, 0.420\n#  * $N_{b} \\geq 4$ :\n#   - Number of Entries    : 19965\n#   - Number of Events     : 63883.202 ± 123.205(ΔMC)\n#   - Cut & Rel Efficiency : 0.081, 0.304\n#  * $\\slashed{E}_T > 350$ [GeV] :\n#   - Number of Entries    : 191\n#   - Number of Events     : 755.117 ± 1.688(ΔMC)\n#   - Cut & Rel Efficiency : 0.001, 0.012\n#  * $min(\\Delta\\phi(j_{1-4},\\slashed{E}_T))>0.4$ [rad] :\n#   - Number of Entries    : 72\n#   - Number of Events     : 284.658 ± 0.636(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 0.377\n#  * $\\tau^h$ veto :\n#   - Number of Entries    : 68\n#   - Number of Events     : 268.850 ± 0.601(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 0.944\n#  * $p^{b_1}_T > 200$ [GeV] :\n#   - Number of Entries    : 33\n#   - Number of Events     : 130.474 ± 0.292(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 0.485\n#  * $\\Delta R_{max}(b,b)>2.5$ :\n#   - Number of Entries    : 25\n#   - Number of Events     : 98.836 ± 0.221(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 0.758\n#  * $\\Delta R_{max-min}(b,b)<2.5$ :\n#   - Number of Entries    : 25\n#   - Number of Events     : 98.836 ± 0.221(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 1.000\n#  * $m(h_{cand})>80$ [GeV] :\n#   - Number of Entries    : 10\n#   - Number of Events     : 39.543 ± 0.088(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 0.400\n#  * $m_{eff} > 1$ [TeV] :\n#   - Number of Entries    : 10\n#   - Number of Events     : 39.543 ± 0.088(ΔMC)\n#   - Cut & Rel Efficiency : 0.000, 1.000\n```\nAs can be seen, it shows number of entries (MonteCarlo events), number of events (lumi weighted), \ncut efficiency and relative efficiency. The error in number of events is the MonteCarlo uncertainty.\n\nIt is also possible to access practical information \n```python\nprint(sample.SRA.isAlive)\n# Output: True\n```\nwhich simply checks the number of entries in the final cut. Hence one can remove the SRs which does\nnot have any statistics;\n```python\nalive = sample.get_alive()\nprint(f\"Number of cutflows survived : {len(alive)},\\nNames of the cutflows : { ', '.join([x.id for x in alive]) }\")\n# Output: \n# Number of cutflows survived : 8,\n# Names of the cutflows : SRA_M, SRA_L, SRA_H, SRA, SRC, SRB, SRC_24, SRC_22\n```\nEach cut is accessible through the interface;\n```python\nfifth = sample.SRA[5]\nprint(f\"Efficiency : {fifth.eff:.3f}, Relative MC efficiency {fifth.mc_rel_eff:.3f}, number of events {fifth.Nevents:.1f}, sum of weights {fifth.sumW:.3f}\")\n# Output: \n# Efficiency : 0.0004, Relative MC efficiency 0.377, number of events 284.7, sum of weights 0.008\n```\nOne can also construct independent signal regions for sake of comparisson with Ma5 results;\n```python\nSRA_presel = [319.7,230.5,192.3,87.9,45.1,20.9,19.3,18.2,17.6,15.0,13.7]\n\nATLAS = ma5.cutflow.Collection() \n\nATLAS.addSignalRegion('SRA',   ma5.SRA.CutNames,   SRA_presel+[13.7])\nATLAS.addSignalRegion('SRA_L', ma5.SRA_L.CutNames, SRA_presel+[0.4])\nATLAS.addSignalRegion('SRA_M', ma5.SRA_M.CutNames, SRA_presel+[6.4])\nATLAS.addSignalRegion('SRA_H', ma5.SRA_H.CutNames, SRA_presel+[7.0])\n```\nwhere all properties shown above applies to this new object as well.\n\n### Histogram Collection\n\n* Parse all the histograms available in the `Histos.saf` file into interactable histogram object.\n\n```python\nimport ma5_expert as ma5\ncollection = ma5.histogram.Collection(\n    \"examples/mass1000005_300.0_mass1000022_60.0_mass1000023_250.0_xs_5.689/Output/SAF/defaultset/atlas_susy_2018_31/Histograms/histos.saf\", \n    xsection=5.689, lumi=139.\n)\n\nprint(collection)\n# Collection of 6 histograms from examples/mass1000005_300.0_mass1000022_60.0_mass1000023_250.0_xs_5.689/Output/SAF/defaultset/atlas_susy_2018_31/Histograms\n#    * MadAnalysis 5 Histogram: SRA_Meff\n#    * MadAnalysis 5 Histogram: SRA_Mh\n#    * MadAnalysis 5 Histogram: SRB_PTj1\n#    * MadAnalysis 5 Histogram: SRB_MhAvg\n#    * MadAnalysis 5 Histogram: SRC_MET\n#    * MadAnalysis 5 Histogram: SRC_Sig\n```\n\nExtract the plotting information:\n```python\nxbins, bins, weights = collection.lumi_histogram(\"SRA_Mh\")\nplt.hist(xbins, bins=bins, weights=weights)\nplt.xlabel(\"$M_{h}\\ {\\\\rm [GeV]}$\")\nplt.ylabel(\"${\\\\rm Number\\ of\\ events}$\")\nplt.xlim([min(bins), max(bins)])\nplt.show()\n```\n<p align=\"center\">\n<img src=\"./examples/SRA_Mh.png\" alt=\"SRA_Mh\" style=\"width:400px;\"/>\n</p>\n\n### Citation \nDeveloped for [arXiv:2006.09387](http://arxiv.org/abs/2006.09387)\n\n```bibtex\n@article{Araz:2020lnp,\n    author = \"Araz, Jack Y. and Fuks, Benjamin and Polykratis, Georgios\",\n    title = \"{Simplified fast detector simulation in MADANALYSIS 5}\",\n    eprint = \"2006.09387\",\n    archivePrefix = \"arXiv\",\n    primaryClass = \"hep-ph\",\n    doi = \"10.1140/epjc/s10052-021-09052-5\",\n    journal = \"Eur. Phys. J. C\",\n    volume = \"81\",\n    number = \"4\",\n    pages = \"329\",\n    year = \"2021\"\n}\n```\n\n\n## TODO\n\n- [x] Clean cutflow reader needs optimization and clarity\n\n- [x] Generalize table writer and add latex writer\n\n- [x] Histogram reader\n\n- [ ] Overall Ma5 Analysis parser\n\n- [x] Some experimental analysis requires MC event comparison table. This needs to be added.\n\n- [x] Combine collections with + operator and normalize to a certain luminosity with * operator.\n\n- [x] Add MC uncertainties\n\n- [ ] Add theoretical uncertainties\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/MadAnalysis/ma5_expert/archive/refs/tags/v2.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MadAnalysis/ma5_expert",
    "keywords": "physics madanalysis5",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ma5-expert",
    "package_url": "https://pypi.org/project/ma5-expert/",
    "platform": null,
    "project_url": "https://pypi.org/project/ma5-expert/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MadAnalysis/ma5_expert/issues",
      "Download": "https://github.com/MadAnalysis/ma5_expert/archive/refs/tags/v2.0.1.tar.gz",
      "Homepage": "https://github.com/MadAnalysis/ma5_expert"
    },
    "release_url": "https://pypi.org/project/ma5-expert/2.0.1/",
    "requires_dist": [
      "numpy (>=1.19.5)"
    ],
    "requires_python": ">=3.8",
    "summary": "MadAnalysis 5 interpreter for Expert mode",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16575544,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1b4bd9e32ac2a52c750d266cfe108b3fc0933e85b91568bfee2fbd064b25a84",
        "md5": "3a6b5dbc8cb27d9f424289a9d9bdd902",
        "sha256": "2074b9809a1a84d33d8e8b7e6014ebba70d73d6ba58cfaa055844f5c7412649a"
      },
      "downloads": -1,
      "filename": "ma5_expert-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a6b5dbc8cb27d9f424289a9d9bdd902",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 24282,
      "upload_time": "2022-06-04T07:37:40",
      "upload_time_iso_8601": "2022-06-04T07:37:40.825268Z",
      "url": "https://files.pythonhosted.org/packages/e1/b4/bd9e32ac2a52c750d266cfe108b3fc0933e85b91568bfee2fbd064b25a84/ma5_expert-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82a3821e1d4647906db7c1d0bcd496fe7cdbba412714106b633a5229c69aff85",
        "md5": "c8e5a4c6339ae1457d1f7e29e35d900d",
        "sha256": "3c11b07b3d7e57e778b908f31177549755f10465eb9e42b77c329d068eaa6ebe"
      },
      "downloads": -1,
      "filename": "ma5_expert-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c8e5a4c6339ae1457d1f7e29e35d900d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 24092,
      "upload_time": "2022-06-04T07:37:42",
      "upload_time_iso_8601": "2022-06-04T07:37:42.905249Z",
      "url": "https://files.pythonhosted.org/packages/82/a3/821e1d4647906db7c1d0bcd496fe7cdbba412714106b633a5229c69aff85/ma5_expert-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}