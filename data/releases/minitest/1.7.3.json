{
  "info": {
    "author": "Colin Ji",
    "author_email": "jichen3000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Mini Test\n=========\n\nThis project is inspired by Ruby minispec, but now it just implement\nsome methods including:\n\n::\n\n    must_equal, must_true, must_false, must_raise, only_test.\n\nAnd some other useful functions:\n\n::\n\n    p, pp, pl, ppl, length, size, inject, flag_test,\n    p_format, pp_format, pl_format, ppl_format.\n\ngithub: https://github.com/jichen3000/minitest\n\npypi: https://pypi.python.org/pypi/minitest\n\n--------------\n\nAuthor\n~~~~~~\n\nColin Ji jichen3000@gmail.com\n\nHow to install\n~~~~~~~~~~~~~~\n\n::\n\n    pip install minitest\n\nHow to use\n~~~~~~~~~~\n\nFor a simple example, you just write a function called x, and I would\nlike to write the unittest in same file as: code:\n\n::\n\n    if __name__ == '__main__':\n        # import the minitest\n        from minitest import *\n\n        import operator\n\n        # declare a variable for test\n        tself = get_test_self()\n        # you could put all your test variables on tself\n        # just like declare your variables on setup.\n        tself.jc = \"jc\"\n\n        # declare a test\n        with test(object.must_equal):\n            tself.jc.must_equal('jc')\n            None.must_equal(None)\n\n\n        with test(object.must_true):\n            True.must_true()\n            False.must_true()\n\n        with test(object.must_false):\n            True.must_false()\n            False.must_false()\n\n        # using a funcation to test equal.\n        with test(\"object.must_equal_with_func\"):\n            (1).must_equal(1, key=operator.eq)\n            (1).must_equal(2, key=operator.eq)\n\n        def div_zero():\n            1/0\n            \n        # test exception\n        with test(\"test must_raise\"):\n            (lambda : div_zero()).must_raise(ZeroDivisionError)\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"integer division or modulo by zero\")\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"in\")\n\n        # when assertion fails, it will show the failure_msg\n        with test(\"with failure_msg\"):\n            the_number = 10\n            (the_number % 2).must_equal(1, \n                failure_msg=\"{0} is the number\".format(the_number))\n            # it wont show the failure_msg\n            (the_number % 2).must_equal(0, \n                failure_msg=\"{0} is the number\".format(the_number))\n\n            (True).must_false(\n                failure_msg=\"{0} is the number\".format(the_number))\n\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"in\",\n                failure_msg=\"{0} is the number\".format(the_number))\n\nresult:\n\n::\n\n    Running tests:\n\n    .FFFF.\n\n    Finished tests in 0.013165s.\n\n    1) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 29, in <module>:\n    EXPECTED: True\n      ACTUAL: False\n\n\n    2) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 32, in <module>:\n    EXPECTED: False\n      ACTUAL: True\n\n\n    3) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 38, in <module>:\n    EXPECTED: 2\n      ACTUAL: 1\n\n\n    4) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 47, in <module>:\n    EXPECTED: 'in'\n      ACTUAL: 'integer division or modulo by zero'\n\n\n    5) Failure:\n    File \"/Users/colin/work/minitest/test.py\", line 86, in <module>:\n     MESSAGE: '10 is the number'\n    EXPECTED: 1\n      ACTUAL: 0\n\n\n    6) Failure:\n    File \"/Users/colin/work/minitest/test.py\", line 92, in <module>:\n     MESSAGE: '10 is the number'\n    EXPECTED: False\n      ACTUAL: True\n\n\n    7) Failure:\n    File \"/Users/colin/work/minitest/test.py\", line 95, in <module>:\n     MESSAGE: '10 is the number'\n    EXPECTED: 'in'\n      ACTUAL: 'integer division or modulo by zero'\n\n\n    10 tests, 18 assertions, 7 failures, 0 errors.\n    [Finished in 0.1s]\n\nonly\\_test function\n~~~~~~~~~~~~~~~~~~~\n\nIf you just want to run some test functions, you can use only\\_test\nfuntion to specify them. Notice, you must put it on the top of test\nfunctions, just like the below example. code:\n\n::\n\n    def foo():\n        return \"foo\"\n\n    def bar():\n        return \"bar\"\n\n    if __name__ == '__main__':\n        from minitest import *\n\n\n        only_test(\"for only run\", foo)\n\n        with test(\"for only run\"):\n            (1).must_equal(1)\n            (2).must_equal(2)\n            pass\n\n        with test(\"other\"):\n            (1).must_equal(1)\n            (2).must_equal(2)\n            pass    \n\n        with test(foo):\n            foo().must_equal(\"foo\")\n\n        with test(bar):\n            bar().must_equal(\"bar\")\n\nIt will only run test(\"for only run\") and test(foo) for you.\n\nOther useful function\n~~~~~~~~~~~~~~~~~~~~~\n\np, pp, pl, ppl, length, size, p\\_format, pp\\_format, pl\\_format,\nppl\\_format these ten functions could been used by any object.\n\np, print with title. This function will print variable name as the\ntitle. code:\n\n::\n\n    value = \"Minitest\"\n    value.p()\n                                    \n    value.p(\"It is a value:\")   \n                                    \n    value.p(auto_get_title=False)    \n\nprint result:\n\n::\n\n    value : 'Minitest'\n\n    It is a value: 'Minitest'\n\n    'Minitest'\n\npp, pretty print with title. This function will print variable name as\nthe title in the first line, then pretty print the content of variable\nbelow the title. code:\n\n::\n\n    value = \"Minitest\"\n    value.pp()\n                                    \n    value.pp(\"It is a value:\")   \n                                    \n    value.pp(auto_get_title=False)    \n\nprint result:\n\n::\n\n    value :\n    'Minitest'\n\n     It is a value:\n    'Minitest'\n\n    'Minitest'\n\npl, print with title and code loction. This function just like pt, but\nwill print the code location at the first line. And some editors support\nto go to the line of that file, such as Sublime2. code:\n\n::\n\n    value = \"Minitest\"\n    value.pl()\n                                    \n    value.pl(\"It is a value:\")   \n                                    \n    value.pl(auto_get_title=False)    \n\nprint result:\n\n::\n\n        File \"/Users/Colin/work/minitest/test.py\", line 76\n    value : 'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 77\n     It is a value: 'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 78\n    'Minitest'\n\nppl, pretty print with title and code loction. This function just like\nppt, but will print the code location at the first line. Notice: it will\nprint a null line firstly. code:\n\n::\n\n    value = \"Minitest\"\n    value.ppl()\n                                    \n    value.ppl(\"It is a value:\")   \n                                    \n    value.ppl(auto_get_title=False)    \n\nprint result:\n\n::\n\n        File \"/Users/Colin/work/minitest/test.py\", line 76\n    value :\n    'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 77\n     It is a value:\n    'Minitest'\n\n\n        File \"/Users/Colin/work/minitest/test.py\", line 78\n    'Minitest'\n\np\\_format, get the string just like p function prints. I use it in\ndebugging with log, like: logging.debug(value.p\\_format()) code:\n\n::\n\n    value = \"Minitest\"\n    value.p_format()\n\nreturn result:\n\n::\n\n    value : 'Minitest'\n\npp\\_format, get the string just like pp function prints. I use it in\ndebugging with log, like: logging.debug(value.pp\\_format()) code:\n\n::\n\n    value = \"Minitest\"\n    value.pp_format()\n\nreturn result:\n\n::\n\n    value :\\n'Minitest'\n\npl\\_format, get the string just like pl function prints. I use it in\ndebugging with log, like: logging.debug(value.pl\\_format()) code:\n\n::\n\n    value = \"Minitest\"\n    value.pl_format()\n\nreturn result:\n\n::\n\n    line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in <module>\\nvalue : 'Minitest'\n\nppl\\_format, get the string just like ppl function prints. I use it in\ndebugging with log, like: logging.debug(value.ppl\\_format()) code:\n\n::\n\n    value = \"Minitest\"\n    value.ppl_format()\n\nreturn result:\n\n::\n\n    line info: File \"/Users/Colin/work/minitest/test.py\", line 76, in <module>\\nvalue :\\n'Minitest'\n\nlength and size will invoke len function for the caller's object. code:\n\n::\n\n    [1,2].length()                  # 2, just like len([1,2])\n    (1,2).size()                    # 2, just like len((1,2))\n\ninject\\_customized\\_must\\_method or inject function will inject the\nfunction which you customize. Why do I make this function? Since in many\ncase I will use numpy array. When it comes to comparing two numpy array,\nI have to use:\n\n::\n\n    import numpy\n    numpy.array([1]).must_equal(numpy.array([1.0]), numpy.allclose)\n\nFor being convient, I use inject\\_customized\\_must\\_method or inject\nfunction like:\n\n::\n\n    import numpy\n    inject(numpy.allclose, 'must_close')\n    numpy.array([1]).must_close(numpy.array([1.0]))\n\nflag\\_test will print a message 'There are codes for test in this\nplace!' with the code loction. code:\n\n::\n\n    flag_test()\n\n    # add a title\n    flag_test(\"for test\")\n\nprint result:\n\n::\n\n        File \"/Users/colin/work/minitest/test.py\", line 97, in <module>:\n    There are test codes in this place!    \n\n        File \"/Users/colin/work/minitest/test.py\", line 101, in <module>:\n    for test : There are test codes in this place!",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/minitest",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minitest",
    "package_url": "https://pypi.org/project/minitest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minitest/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://pypi.python.org/pypi/minitest"
    },
    "release_url": "https://pypi.org/project/minitest/1.7.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Minitest is inspired by Ruby minispec.",
    "version": "1.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2234403,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e983d64e3ab5905134598ff7b3771283509b377b61a8e5e618a4a8a12901c518",
        "md5": "d5ffc8a92939679a101dca02eafc1b80",
        "sha256": "9e517cd22fb0f7ea3c1603bfdde9b7f1adab59cc828e5dda13be787095f7f94c"
      },
      "downloads": -1,
      "filename": "minitest-1.7.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d5ffc8a92939679a101dca02eafc1b80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8620,
      "upload_time": "2015-04-15T16:01:54",
      "upload_time_iso_8601": "2015-04-15T16:01:54.374890Z",
      "url": "https://files.pythonhosted.org/packages/e9/83/d64e3ab5905134598ff7b3771283509b377b61a8e5e618a4a8a12901c518/minitest-1.7.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}