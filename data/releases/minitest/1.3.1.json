{
  "info": {
    "author": "Colin Ji",
    "author_email": "jichen3000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Mini Test\n=========\n\nThis project is inspired by Ruby minispec, but now it just implement\nsome methods including:\n\n::\n\n    must_equal, must_true, must_false, must_raise.\n\nAnd some other useful functions:\n\n::\n\n    p, pp, pl, ppl, length, size, inject.\n\ngithub: https://github.com/jichen3000/minitest\n\npypi: https://pypi.python.org/pypi/minitest\n\n--------------\n\nAuthor\n~~~~~~\n\nColin Ji jichen3000@gmail.com\n\nHow to use\n~~~~~~~~~~\n\ninstall:\n\n::\n\n    pip install minitest\n\ncode:\n\n::\n\n    if __name__ == '__main__':\n        # import the minitest\n        from minitest import *\n\n        import operator\n\n        # declare a variable for test\n        tself = get_test_self()\n        # you could put all your test variables on tself\n        # just like declare your variables on setup.\n        tself.jc = \"jc\"\n\n        # declare a test\n        with test(\"test must_equal\"):\n            tself.jc.must_equal('jc')\n            None.must_equal(None)\n\n        with test(\"test must_true\"):\n            True.must_true()\n            False.must_true()\n\n        with test(\"test must_false\"):\n            True.must_false()\n            False.must_false()\n\n        # using a funcation to test equal.\n        with test(\"test must_equal_with_func\"):\n            (1).must_equal(1, key=operator.eq)\n            (1).must_equal(2, key=operator.eq)\n\n        def div_zero():\n            1/0\n            \n        # test exception\n        with test(\"test must_raise\"):\n            (lambda : div_zero()).must_raise(ZeroDivisionError)\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"integer division or modulo by zero\")\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"in\")\n\nresult:\n\n::\n\n    Running tests:\n\n    .FFFF.\n\n    Finished tests in 0.013165s.\n\n    1) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 29, in <module>:\n    EXPECTED: True\n      ACTUAL: False\n\n\n    2) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 32, in <module>:\n    EXPECTED: False\n      ACTUAL: True\n\n\n    3) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 38, in <module>:\n    EXPECTED: 2\n      ACTUAL: 1\n\n\n    4) Failure:\n    File \"/Users/Colin/work/minitest/test.py\", line 47, in <module>:\n    EXPECTED: 'in'\n      ACTUAL: 'integer division or modulo by zero'\n\n\n    6 tests, 14 assertions, 4 failures, 0 errors.\n    [Finished in 0.1s]\n\nOther useful function\n~~~~~~~~~~~~~~~~~~~~~\n\np, pp, pl, ppl, length, size, these four functions could been used by\nany object.\n\np is a print function. This function will add variable name as the\ntitle. code:\n\n::\n\n    value = \"Minitest\"\n    # add a title 'value : ' automatically.\n    value.p()                       # value : Minitest\n\n    # or you can give a string as title.\n    value.p(\"It is a value:\")       # It is a value: Minitest\n\n    # if you don't want a title, use the parameter\n    value.p(auto_get_title=False)   # Minitest\n\npp is another print function which will invoke the pprint.pprint\nfunction. Its parameters are just like the p. code:\n\n::\n\n    value = \"Minitest\"\n    value.pp()                      # value :\n                                    # 'Minitest'\n                                    \n    value.pp(\"It is a value:\")      #  It is a value:\n                                    # 'Minitest'\n                                    \n    value.pp(auto_get_title=False)  # 'Minitest'\n\npl is another print function which will print the file path and line NO.\nAnd some editors support to go to the line of that file, such as\nSublime2. Its parameters are just like the p. Notice, it will print new\nline firstly, since in some case, there will be other string before file\npath, which cause some editor cannot jump to the location.\n\ncode:\n\n::\n\n    value = \"Minitest\"\n    value.pl()                      #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 72\n                                    # value : Minitest\n                                    \n    value.pl(\"It is a value:\")      #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 73\n                                    #  It is a value: Minitest\n                                    \n    value.pl(auto_get_title=False)  #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 74\n                                    # Minitest\n\nppl is another print function which will print the file path and line\nNO. It almost like pl except print value in another new line. Notice, it\nwill print new line firstly. code:\n\n::\n\n    value = \"Minitest\"\n    value.ppl()                     #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 76\n                                    # value :\n                                    # 'Minitest'\n                                    \n    value.ppl(\"It is a value:\")     #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 77\n                                    #  It is a value:\n                                    # 'Minitest'\n                                    \n    value.ppl(auto_get_title=False) #     \n                                    #     File \"/Users/Colin/work/minitest/test.py\", line 78\n                                    # 'Minitest'\n\nlength and size will invoke len function for the caller's object. code:\n\n::\n\n    [1,2].length()                  # 2, just like len([1,2])\n    (1,2).size()                    # 2, just like len((1,2))\n\ninject\\_customized\\_must\\_method or inject function will inject the\nfunction which you customize. Why do I make this function? Since in many\ncase I will use numpy array. When it comes to comparing two numpy array,\nI have to use:\n\n::\n\n    import numpy\n    numpy.array([1]).must_equal(numpy.array([1.0]), numpy.allclose)\n\nFor being convient, I use inject\\_customized\\_must\\_method or inject\nfunction like:\n\n::\n\n    import numpy\n    inject(numpy.allclose, 'must_close')\n    numpy.array([1]).must_close(numpy.array([1.0]))",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/minitest",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minitest",
    "package_url": "https://pypi.org/project/minitest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minitest/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://pypi.python.org/pypi/minitest"
    },
    "release_url": "https://pypi.org/project/minitest/1.3.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Minitest is inspired by Ruby minispec.",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2234403,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e98fd9c3f8f1e240341bc90baa585a3dea1c1541480b764b5e0fdec4ec5573a",
        "md5": "1da8e0b305f199c1ba397984c700cbf1",
        "sha256": "3092252ff816fd281e2878080d362542330d028d664e803ca952a7aa7570500f"
      },
      "downloads": -1,
      "filename": "minitest-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1da8e0b305f199c1ba397984c700cbf1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5923,
      "upload_time": "2014-04-12T09:34:55",
      "upload_time_iso_8601": "2014-04-12T09:34:55.358054Z",
      "url": "https://files.pythonhosted.org/packages/0e/98/fd9c3f8f1e240341bc90baa585a3dea1c1541480b764b5e0fdec4ec5573a/minitest-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}