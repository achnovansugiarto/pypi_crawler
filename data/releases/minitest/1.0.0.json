{
  "info": {
    "author": "Colin Ji",
    "author_email": "jichen3000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Mini Test\n=========\n\nThis project is inspired by Ruby minispec, but now it just implement\nsome methods including:\n\n::\n\n    must_equal, must_true, must_raise.\n\nAnd some other useful functions:\n\n::\n\n    p, pp, length, size.\n\ngithub: https://github.com/jichen3000/minitest\n\npypi: https://pypi.python.org/pypi/minitest\n\n--------------\n\nAuthor\n~~~~~~\n\nColin Ji jichen3000@gmail.com\n\nHow to use\n~~~~~~~~~~\n\ninstall:\n\n::\n\n    pip instsall minitest\n\ncode:\n\n::\n\n    if __name__ == '__main__':\n        # import the minitest\n        from minitest import *\n\n        import operator\n\n        # declare a variable for test\n        tself = get_test_self()\n        # you could put all your test variables on tself\n        # just like declare your variables on setup.\n        tself.jc = \"jc\"\n\n        # declare a test\n        with test(\"test must_equal\"):\n            tself.jc.must_equal('jc')\n            None.must_equal(None)\n\n        with test(\"test must_true\"):\n            True.must_true()\n            False.must_true()\n\n        # using a funcation to test equal.\n        with test(\"test must_equal_with_func\"):\n            (1).must_equal(1, key=operator.eq)\n            (1).must_equal(2, key=operator.eq)\n\n        def div_zero():\n            1/0\n            \n        # test exception\n        with test(\"test must_raise\"):\n            (lambda : div_zero()).must_raise(ZeroDivisionError)\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"integer division or modulo by zero\")\n            (lambda : div_zero()).must_raise(ZeroDivisionError, \"in\")\n\nresult:\n\n::\n\n    Running tests:\n\n    .FFF\n\n    Finished tests in 0.013165s.\n\n    1) Failure:\n    The line No is [/Users/Colin/work/minitest/minitest/with_test.py:174]:\n    --- expected\n    +++ actual\n    -[True]\n    #[False]\n\n    2) Failure:\n    The line No is [/Users/Colin/work/minitest/minitest/with_test.py:179]:\n    --- expected\n    +++ actual\n    -[2]\n    #[1]\n\n    3) Failure:\n    The line No is [/Users/Colin/work/minitest/minitest/with_test.py:188]:\n    --- expected\n    +++ actual\n    -['in']\n    #['integer division or modulo by zero']\n\n    4 tests, 9 assertions, 3 failures, 0 errors.\n    [Finished in 0.1s]\n\nOther useful function\n~~~~~~~~~~~~~~~~~~~~~\n\np, pp, length, size, these four functions could been used by any object.\n\np is a print function. This function will add variable name as the\ntitle. code:\n\n::\n\n    value = \"Minitest\"\n    # add a title 'value : ' automatically.\n    value.p()                       # value : Minitest\n\n    # or you can give a string as title.\n    value.p(\"It is a value:\")       # It is a value: Minitest\n\n    # if you don't want a title, use the parameter\n    value.p(auto_get_title=False)   # Minitest\n\npp is another print function which will invoke the pprint.pprint\nfunction. Its parameters are just like the p. code:\n\n::\n\n    value = \"Minitest\"\n    value.pp()                      # value :\n                                    # 'Minitest'\n                                    \n    value.pp(\"It is a value:\")      #  It is a value:\n                                    # 'Minitest'\n                                    \n    value.pp(auto_get_title=False)  # 'Minitest'\n\nlength and size will invoke len function for the caller's object. code:\n\n::\n\n    [1,2].length()                  # 2, just like len([1,2])\n    (1,2).size()                    # 2, just like len((1,2))",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/minitest",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minitest",
    "package_url": "https://pypi.org/project/minitest/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minitest/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://pypi.python.org/pypi/minitest"
    },
    "release_url": "https://pypi.org/project/minitest/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Minitest is inspired by Ruby minispec.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2234403,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60bd8e59ac878dae4fe2c07f0f57b333a2cb021505917b563fc51fe83df6bd38",
        "md5": "0e2c648a3542b02b609a4a76ea2fea28",
        "sha256": "8e58611e49929861d5f4f43eaeba5baf97f3fe8889754cc8c6988f05f47d17fd"
      },
      "downloads": -1,
      "filename": "minitest-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0e2c648a3542b02b609a4a76ea2fea28",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4661,
      "upload_time": "2014-03-11T06:26:58",
      "upload_time_iso_8601": "2014-03-11T06:26:58.766527Z",
      "url": "https://files.pythonhosted.org/packages/60/bd/8e59ac878dae4fe2c07f0f57b333a2cb021505917b563fc51fe83df6bd38/minitest-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}