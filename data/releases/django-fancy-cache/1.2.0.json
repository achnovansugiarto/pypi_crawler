{
  "info": {
    "author": "Peter Bengtsson",
    "author_email": "mail@peterbe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "django-fancy-cache\n==================\n\nCopyright Peter Bengtsson, mail@peterbe.com, 2013-2022\n\nLicense: BSD\n\nAbout django-fancy-cache\n------------------------\n\nA Django ``cache_page`` decorator on steroids.\n\nUnlike the stock ``django.views.decorators.cache.change_page`` this\ndecorator makes it possible to set a ``key_prefix`` that is a\ncallable. This callable is passed the request and if it returns ``None``\nthe page is not cached.\n\nAlso, you can set another callable called ``post_process_response``\n(which is passed the response and the request) which can do some\nadditional changes to the response before it's set in cache.\n\nLastly, you can set ``post_process_response_always=True`` so that the\n``post_process_response`` callable is always called, even when the\nresponse is coming from the cache.\n\n\nHow to use it\n-------------\n\nIn your Django views:\n\n.. code:: python\n\n    from fancy_cache import cache_page\n    from django.utils.decorators import method_decorator\n    from django.views.generic import TemplateView\n\n    @cache_page(60 * 60)\n    def myview(request):\n        return render(request, 'page1.html')\n\n    def prefixer(request):\n        if request.method != 'GET':\n            return None\n        if request.GET.get('no-cache'):\n            return None\n        return 'myprefix'\n\n    @cache_page(60 * 60, key_prefix=prefixer)\n    def myotherview(request):\n        return render(request, 'page2.html')\n\n    def post_processor(response, request):\n        response.content += '<!-- this was post processed -->'\n        return response\n\n    @cache_page(\n        60 * 60,\n        key_prefix=prefixer,\n        post_process_response=post_processor)\n    def yetanotherotherview(request):\n        return render(request, 'page3.html')\n\n\n    class MyClassBasedView(TemplateView):\n        template_name = 'page4.html'\n\n        @method_decorator(cache_page(60*60))\n        def get(self, request, *args, **kwargs):\n            return super().get(request, *args, **kwargs)\n\nOptional uses\n-------------\n\nIf you want to you can have ``django-fancy-cache`` record every URL it\ncaches. This can be useful for things like invalidation or curious\nstatistical inspection.\n\nYou can either switch this on on the decorator itself. Like this:\n\n.. code:: python\n\n    from fancy_cache import cache_page\n\n    @cache_page(60 * 60, remember_all_urls=True)\n    def myview(request):\n        return render(request, 'page1.html')\n\nOr, more conveniently to apply it to all uses of the ``cache_page``\ndecorator you can set the default in your settings with:\n\n.. code:: python\n\n    FANCY_REMEMBER_ALL_URLS = True\n\nNow, suppose you have the this option enabled. Now you can do things\nlike this:\n\n.. code:: python\n\n    >>> from fancy_cache.memory import find_urls\n    >>> list(find_urls(['/some/searchpath', '/or/like/*/this.*']))\n    >>> # or, to get all:\n    >>> list(find_urls([]))\n\nThere is also another option to this and that is to purge (aka.\ninvalidate) the remembered URLs. You simply all the ``purge=True``\noption like this:\n\n.. code:: python\n\n    >>> from fancy_cache.memory import find_urls\n    >>> list(find_urls([], purge=True))\n\nNote: Since ``find_urls()`` returns a generator, the purging won't\nhappen unless you exhaust the generator. E.g. looping over it or\nturning it into a list.\n\n**If you are using Memcached**, you must enable check-and-set to\nremember all urls by enabling the ``FANCY_USE_MEMCACHED_CHECK_AND_SET``\nflag and enabling ``cas`` in your ``CACHES`` settings:\n\n.. code:: python\n\n    # in settings.py\n\n    FANCY_USE_MEMCACHED_CHECK_AND_SET = True\n\n    CACHES = {\n        'default': {\n            'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n            'LOCATION': '127.0.0.1:11211',\n            # This OPTIONS setting enables Memcached check-and-set which is\n            # required for remember_all_urls or FANCY_REMEMBER_ALL_URLS.\n            'OPTIONS': {\n                'behaviors': {\n                    'cas': True\n                }\n            }\n        }\n     }\n\nThe second way to inspect all recorded URLs is to use the\n``fancy-cache`` management command. This is only available if you have\nadded ``fancy_cache`` to your ``INSTALLED_APPS`` setting. Now you can do\nthis::\n\n    $ ./manage.py fancy-cache --help\n    $ ./manage.py fancy-cache\n    $ ./manage.py fancy-cache /some/searchpath /or/like/*/this.*\n    $ ./manage.py fancy-cache /some/place/* --purge\n    $ # or to purge them all!\n    $ ./manage.py fancy-cache --purge\n\nNote, it will only print out URLs that if found (and purged, if\napplicable).\n\nThe third way to inspect the recorded URLs is to add this to your root\n``urls.py``:\n\n.. code:: python\n\n    url(r'fancy-cache', include('fancy_cache.urls')),\n\nNow, if you visit ``http://localhost:8000/fancy-cache`` you get a table\nlisting every URL that ``django-fancy-cache`` has recorded.\n\n\nOptional uses (for the exceptionally curious)\n---------------------------------------------\n\nIf you have enabled ``FANCY_REMEMBER_ALL_URLS`` you can also enable\n``FANCY_REMEMBER_STATS_ALL_URLS`` in your settings. What this does is\nthat it attempts to count the number of cache hits and cache misses\nyou have for each URL.\n\nThis counting of hits and misses is configured to last \"a long time\".\nPossibly longer than you cache your view. So, over time you can expect\nto have more than one miss because your view cache expires and it\nstarts over.\n\nYou can see the stats whenever you use any of the ways described in\nthe section above. For example like this:\n\n.. code:: python\n\n    >>> from fancy_cache.memory import find_urls\n    >>> found = list(find_urls([]))[0]\n    >>> found[0]\n    '/some/page.html'\n    >>> found[2]\n    {'hits': 1235, 'misses': 12}\n\nThere is obviously a small additional performance cost of using the\n``FANCY_REMEMBER_ALL_URLS`` and/or ``FANCY_REMEMBER_STATS_ALL_URLS`` in\nyour project so only use it if you don't have any smarter way to\ninvalidate, for debugging or if you really want make it possible to\npurge all cached responses when you run an upgrade of your site or\nsomething.\n\nRunning the test suite\n----------------------\n\nThe simplest way is to simply run::\n\n    $ pip install tox\n    $ tox\n\nOr to run it without ``tox`` you can simply run::\n\n    $ export PYTHONPATH=`pwd`\n    $ export DJANGO_SETTINGS_MODULE=fancy_tests.tests.settings\n    $ django-admin.py test\n\n\nChangelog\n---------\n\n1.2.0\n    * Restructure the remembered_urls cache dict to clean up stale entries\n    * Update FancyCacheMiddleware to match latest Django CacheMiddlware\n      (Also renames to FancyCacheMiddleware)\n    * Apply Memcached check-and-set to the delete_keys function\n      if ``settings.FANCY_USE_MEMCACHED_CHECK_AND_SET = True``\n    * Drop support for Python <3.6\n    * Add support for Python 3.10 and Django 4.0\n\n1.1.0\n    * If you use Memcached you can set\n      ``settings.FANCY_USE_MEMCACHED_CHECK_AND_SET = True`` so that you\n      can use ``cache._cache.cas`` which only workd with Memcached\n\n1.0.0\n    * Drop support for Python <3.5 and Django <2.2.0\n\n0.11.0\n    * Fix for ``parse_qs`` correctly between Python 2 and Python 3\n\n0.10.0\n    * Fix for keeping blank strings in query strings. #39\n\n0.9.0\n    * Django 1.10 support\n\n0.8.2\n    * Remove deprecated way to define URL patterns and tests in python 3.5\n\n0.8.1\n    * Ability to specify different cache backends to be used\n      https://github.com/peterbe/django-fancy-cache/pull/31\n\n0.8.0\n    * Started keeping a Changelog\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peterbe/django-fancy-cache",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fancy-cache",
    "package_url": "https://pypi.org/project/django-fancy-cache/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-fancy-cache/",
    "project_urls": {
      "Homepage": "https://github.com/peterbe/django-fancy-cache"
    },
    "release_url": "https://pypi.org/project/django-fancy-cache/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django 'cache_page' decorator on steroids",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13432802,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16823ca9a834116bf7be5b9ece6c0f656b32f83a0806ca1b08b93932d80ec7e8",
        "md5": "060dde78c139956c6bfed9722cb04fdd",
        "sha256": "8632ea9b14291adb0be4fcfc12f3cac31672b5c16d6e8376f7d0fc9ac104613a"
      },
      "downloads": -1,
      "filename": "django_fancy_cache-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "060dde78c139956c6bfed9722cb04fdd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21252,
      "upload_time": "2022-03-30T21:10:16",
      "upload_time_iso_8601": "2022-03-30T21:10:16.115429Z",
      "url": "https://files.pythonhosted.org/packages/16/82/3ca9a834116bf7be5b9ece6c0f656b32f83a0806ca1b08b93932d80ec7e8/django_fancy_cache-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d75d4a05994c6847e742a4042a1d3eb004dbecec00e0af31176a783ebdf82f6",
        "md5": "ca5a3af3ca3b2a9b27507712c80f0b04",
        "sha256": "c085bb397e731453893a9f77ad58de0a753876a4b4b6108e9fe1578960db8c03"
      },
      "downloads": -1,
      "filename": "django-fancy-cache-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ca5a3af3ca3b2a9b27507712c80f0b04",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17112,
      "upload_time": "2022-03-30T21:10:17",
      "upload_time_iso_8601": "2022-03-30T21:10:17.954440Z",
      "url": "https://files.pythonhosted.org/packages/1d/75/d4a05994c6847e742a4042a1d3eb004dbecec00e0af31176a783ebdf82f6/django-fancy-cache-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}