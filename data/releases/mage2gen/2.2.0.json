{
  "info": {
    "author": "Maikel Martens",
    "author_email": "maikel@martens.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Code Generators"
    ],
    "description": "\n.. image:: https://travis-ci.org/krukas/Mage2Gen.svg?branch=master\n    :target: https://travis-ci.org/krukas/Mage2Gen\n    \nMage2Gen\n========\nMage2Gen is a python library for generating Magento 2 modules. It is\nbuild to be extendable with snippets for creating more complex Magento 2\nmodules based on simple input.\n\nInstallation\n============\nTo install the Python library and the command line utility, run:\n\n    sudo pip3 install mage2gen\n\nInteractive command line\n========================\nWith the mage2gen command line tool you can interactively create and generate Magento 2 modules.\nIf you have installed mage2gen for your whole system you can start it by running *mage2gen*.\nYou will be asked to give the module a package name, name and description:\n\n.. code:: bash\n\n    bash> mage2gen\n    Package name [Mage2gen]: Mage2gen\n    Module name: Test\n    Description: A Mage2Gen test module\n    \n    Type help or ? to list commands.\n    (Mage2Gen) \n\nHelp\n~~~~\nYou can use *help* or *?* to show all available commands and *help <command>* to show command specific help descriptions: \n\n.. code:: bash\n\n    (Mage2Gen) help\n    \n    Documented commands (type help <topic>):\n    ========================================\n    add  exit  generate  help  info  list  remove\n    \n    Undocumented commands:\n    ======================\n    EOF\n    \n    (Mage2Gen) help add\n    Add a snippet to the module\n\nList snippets\n~~~~~~~~~~~~~\nWith the *list* command you get a list of all the available snippets you can add to your module:\n\n.. code:: bash\n\n    (Mage2Gen) list\n    console cronjob controller system plugin shipping install language observer payment\n\nAdd snippet\n~~~~~~~~~~~\nTo add a snippet you can use the *add <snippet name>* command, you can auto-complete a snippet name with TAB:\n\n.. code:: bash\n    \n    (Mage2Gen) add console\n    Action name*: test\n    Short description*: Test log command\n\nShow added snippets\n~~~~~~~~~~~~~~~~~~~\nWhen you have added multiple snippets and you want to see which snippets are added to the module you can use the *info* command to show an overview:\n\n.. code:: bash\n\n    (Mage2Gen) info\n    \n    Mage2gen/Test\n    \n    Consoles\n    \n    Index  Action name  Short description  \n    --------------------------------------------------------------------------------\n    0      test         Test log command   \n    --------------------------------------------------------------------------------\n\nRemove snippet\n~~~~~~~~~~~~~~\nWhen you want to remove an added snippet you can use the *remove <snippet name> <index>* command, to remove the snippet from the module:\n\n.. code:: bash\n\n    (Mage2Gen) remove console 0\n    Removed Console snippet\n\nGenerate module\n~~~~~~~~~~~~~~~\nWhen you are ready with your module and added the snippets you want to use, you can generate the module with the *generate* command. If you are inside a Magento 2 project directory, it will select the default path for the module:\n\n.. code:: bash\n\n    (Mage2Gen) generate\n    Generate path [/media/data/Downloads/magento2/app/code]*: \n    Path does not exist, do you want to create it? [y/N]: y\n    Module (Mage2gen/Test) generated to: /media/data/Downloads/magento2/app/code\n\nExample usage library\n=====================\n\n.. code:: python\n\n    from mage2gen import Module\n\n    # Create a module (Module1) for the package (Mage2gen)\n    module = Module('Mage2gen', 'Module1')\n\n    # Generate module files to folder (to_folder)\n    module.generate_module('to_folder')\n\nSnippets\n========\n\nMage2Gen has core classes for creating and merging PHP classes, XML\nfiles and static files. For generating a module you don't want to define\nyour PHP class or XML file for basic module concepts like observers,\nplugins or controllers. This is where snippets come in, which add these\nconcepts based on simple input. The currently supported snippets are\nlisted below. If you would like to add a snippet to Mage2Gen, simply fork this\nproject. Add your snippet or other improvements and create a pull request afterwards.\n\nController\n~~~~~~~~~~\n\nCreates a controller with block, layout.xml and template. Can create a\ncontroller for frontend and adminhtml.\n\nParams:\n-------\n- **(str) frontname:** frontame route for module \n- **(str) section:** subfolder in module/Controller \n- **(str) action:** action class \n- **(bool) adminhtml [False]:** if controller is used for adminhtml\n\nExample:\n--------\n.. code:: python\n\n    from mage2gen.snippets import ControllerSnippet\n\n    controller_snippet = ControllerSnippet(module)\n    controller_snippet.add(frontname='mage2gen', section='order', action='json')\n\nPlugin\n~~~~~~\n\nCreates a plugin for a public method, link to Magento 2 `docs`_\n\nParams:\n-------\n- **(str) classname:** full class namespace of class with method \n- **(str) methodname:** method name of class \n- **(str) plugintype:** type for plugin (before, after or around) \n- **(bool) sortorder [10]:** the order the plugin is executed in respect to other plugins. \n- **(bool) disabled [False]:** disable a plugin\n\nExample:\n--------\n.. code:: python\n\n    from mage2gen.snippets import PluginSnippet\n\n    plugin_snippet = PluginSnippet(module)\n    plugin_snippet.add('Magento\\Catalog\\Model\\Product', 'getName')\n\nObserver\n~~~~~~~~\n\nCreate an observer for an event\n\nParams:\n-------\n- **(str) event:** event name \n- **(int) scope [ObserverSnippet.SCOPE\\_ALL]:** handle observer for all (SCOPE\\_ALL), frontend (SCOPE\\_FRONTEND) or backend (SCOPE\\_ADMINHTML)\n\nExample:\n--------\n.. code:: python\n\n    from mage2gen.snippets import ObserverSnippet\n\n    observer_snippet = ObserverSnippet(module)\n    observer_snippet.add('catalog_product_save_after')\n\nCreate a Snippet\n================\n\nYou can create your own snippets. If you would like to add a snippet to\nMage2Gen, simply fork this project. Add you snippet or other improvements\nand create a pull request afterwards. You can read this `blog`_ post for an how to guide on creating a snippet.\n\nBase snippet\n~~~~~~~~~~~~\n\n.. code:: python\n\n    from mage2gen import Module, Phpclass, Phpmethod, Xmlnode, StaticFile, Snippet\n\n    class CustomSnippet(Snippet):\n        def add(self, **params):\n            # create and add PHP classes, XML and static files to the module\n            \n            # Get module name (<package>_<module>)\n            self.module_name\n            \n            # Add PHP class to module (You can add the same class with different \n            # methods and attributes multiple times, Mage2Gen will merge them to \n            # one class with all the methods and attributes).\n            self.add_class(PhpClassObject)\n            \n            # Add XML to module (Same as with the PHP class, you can add multiple\n            # XML nodes for the same file !important root node must be the same.\n            # An XML node will be merged when the node name and the XML attributes \n            # name or id  are the same. When creating a node you can define which\n            # attributes make the node unique, default is name and id).\n            self.add_xml('full/path/to/xml/with/file/name', XmlNodeObject)\n            \n            # Add static file\n            self.add_static_file('path/to/file/location', StaticFileObject)\n\nAdding a PHP class\n~~~~~~~~~~~~~~~~~~\n\nTODO\n\nAdding XML file\n~~~~~~~~~~~~~~~\n\nTODO\n\nAdding Static file\n~~~~~~~~~~~~~~~~~~\n\nTODO\n\nTODO\n====\n\n-  Increase test coverage.\n-  Adding more snippets:\n    -  Model attributes\n    -  Custom models with adminhtml grid\n    -  Adding fields to checkout process\n    \nExample implementation:\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Interactive command line\n- Mage2gen Online Magento 2 Module Creator `mage2gen`_    \n\n.. _docs: http://devdocs.magento.com/guides/v2.0/extension-dev-guide/plugins.html\n.. _mage2gen: http://mage2gen.com\n.. _blog: http://martens.me/programming/how-to-make-a-mage2gen-snippet.html\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/krukas/Mage2Gen/releases/tag/2.2.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/krukas/Mage2Gen",
    "keywords": "Magento",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Mage2Gen",
    "package_url": "https://pypi.org/project/Mage2Gen/",
    "platform": "",
    "project_url": "https://pypi.org/project/Mage2Gen/",
    "project_urls": {
      "Download": "https://github.com/krukas/Mage2Gen/releases/tag/2.2.0",
      "Homepage": "https://github.com/krukas/Mage2Gen"
    },
    "release_url": "https://pypi.org/project/Mage2Gen/2.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Magento 2 module generator",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5796811,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "207f41e1244659f78fafa3da2e50150c5ecde049a9fa02d5f57c2b3a606fa0c6",
        "md5": "93b378f7a25e64dac15fc770b1454f5b",
        "sha256": "37f80f7a61fcfbdee5847fc7b4fb1d18a6b43d8efd1c5ca78882ff312f7cbb0c"
      },
      "downloads": -1,
      "filename": "Mage2Gen-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93b378f7a25e64dac15fc770b1454f5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76713,
      "upload_time": "2019-09-07T17:22:30",
      "upload_time_iso_8601": "2019-09-07T17:22:30.087542Z",
      "url": "https://files.pythonhosted.org/packages/20/7f/41e1244659f78fafa3da2e50150c5ecde049a9fa02d5f57c2b3a606fa0c6/Mage2Gen-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}