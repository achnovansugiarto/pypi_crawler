{
  "info": {
    "author": "Rory Geoghegan",
    "author_email": "rory.geoghegan@ecometrica.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Internationalization"
    ],
    "description": "===============================\ndjango-wapiti generic api layer\n===============================\n\nabout\n=====\n\nDjango-wapiti is a generic API layer that can be added to any django project\nto allow other applications to get access to its models and methods very easily\nthrough JSON.\n\nIt is being developped by Ecometrica_ and made open source under a BSD license.\n\nstatus\n~~~~~~\n\nDjango-wapiti is still under development. What works currently:\n\n* enabling the api for a given model\n* accessing objects by id\n* searching for objects through any of its fields, using any of the django\n  queryset field matching operators (``exact``, ``iexact``, ``contains``, ...)\n* auto-complete call allows frontend code to easily auto-complete user-entered\n  data; it will search for objects through different fields\n* the ModelApi class, like ModelAdmin class for the django admin, is how you \n  define the behavior an object should have through the API\n* instance methods are supported: simply decorate the method to make it available\n* class methods are also supported in the same manner\n* API keys\n* limiting requests per-{ip,session,user,apikey} per-{hour,day,month,year,ever}\n  per-{http method, object, type, method}\n* slicing of results - add slice_left and slice_right parameters to your request to\n  slice the results\n  * the default max slice size is 100, override with settings.WAPITI_MAX_SLICE_SIZE\n\n\nshort-term plan\n~~~~~~~~~~~~~~~\n\nBecause we need the following functionality, it likely will be incorporated \nsoonish:\n\n* better method for defining the permissions for a given API key\n* user authentication (OAuth or otherwise) and row-level permissions\n* call logging (for quota and throttling enforcement)\n* api introspection: /api/VER/ should return a json (or XML) representation of\n  the currently registered models and calls\n\nknown bugs\n~~~~~~~~~~\n\n* the JSON decoder will interpret both 2010-12-31 and \"2010-12-31\" as a date; it\n  should interpret the latter as a string\n\nusage\n=====\n\n#. install django-wapiti. the easiest way might be to use::\n   \n    pip install git+http://git@github.com/ecometrica/django-wapiti.git#egg=django-wapiti\n\n#. wapiti requires the decorator module to function::\n   \n    pip install decorator\n\n#. add ``wapiti`` to your INSTALLED_APPS in the settings.py file of your django\n   project\n\n#. call wapiti.helpers.register_models from somewhere, usually your urls.py, to\n   register your api models and methods\n\n#. to make the model class Foo from the app fooapp available through the API, \n   create a file ``fooapp/api.py`` with this content::\n\n    from wapiti.helpers import register\n    from wapiti.modelapi import ModelApi\n\n    from fooapp.models import Foo\n\n    class FooApi(ModelApi):\n        auto_complete_fields = ('name', 'description')\n        auto_complete_order_by = 'name'\n        model = Foo\n\n    register('foo', FooApi)\n  \n   We've made the auto_complete method work by automatically searching for Foo\n   objects with a case-insensitive search on the fields name and description\n   (which therefore must exist in the Foo model definition).\n   \n   See the file ``wapiti/modelapi.py`` for a list of all options available in \n   the ModelApi class for a given model.\n\n#. At this point, all objects of type Foo are available through the API at \n   ``/api/1.0/foo/``. To make an instance method available for calling through \n   the API, apply the ``wapiti.helpers.api_method`` decorator to it. To call\n   foo_method on the Foo object with ID 3, you would \n   ``GET /api/1.0/foo/3/foo_method``\n\n#. Similarly, for a class method, just decorate it with that same ``api_method``, \n   but apply the python ``classmethod`` decorator *above* it as well. To call\n   the foo_cls_method on Foo through the API you would then\n   ``GET /api/1.0/foo/foo_cls_method``\n\n#. To make calls through the API, you'll need API keys. From the main django\n   admin interface, click on ``Add APIKey``, add a name, and add a permission \n   with resource_regex ``.*`` on method ``GET``. All API calls need to have a \n   ``k=THEAPIKEY`` parameter with a valid and active API key.\n\n#. All calls through JSON must have all their parameters be proper JSON! This \n   means that to pass a string argument to a method, it needs to be surrounded\n   by double-quotes! See the JSON_ spec for details.\n\n#. In order to use per-IP limiting, we need the REMOTE_ADDR variable. If you're\n   using nginx, this needs to be in the proper ``location`` section: ::\n\n    fastcgi_param REMOTE_ADDR $remote_addr;\n    \nRelease Notes\n=============\n\nv0.0.1\n~~~~~~\n\n* Initial version\n\nv0.0.2\n~~~~~~\n    \n* Slicing of results\n* Compatible with Django 1.4 to 1.6 \n\nv0.0.3\n~~~~~~\n\n* post-South migrations\n* Compatible with Django 1.7 to 1.9\n\nv1.0.0\n~~~~~~\n\n* Compatible with Django 1.8 and 1.9 (no longer compatible with Django =< 1.7)\n\nv1.0.1\n~~~~~~\n\n* File handler now only takes field to better support non-FileSystemStorage\n  files. Old way is still supported, but deprecated.\n\nv1.0.2\n~~~~~~\n\n* Previous version forgot to handle the case of no file handler being\n  supplied. This release fixes that.\n\n.. _Ecometrica: http://ecometrica.com\n.. _JSON: http://json.org",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ecometrica/django-wapiti/",
    "keywords": "django,api",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-wapiti",
    "package_url": "https://pypi.org/project/django-wapiti/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-wapiti/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/ecometrica/django-wapiti/"
    },
    "release_url": "https://pypi.org/project/django-wapiti/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django API layer",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2825535,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9861c7c315162f22ec0c9359d2997e5d20e613a4f5b2da98acd851a317575ca8",
        "md5": "9a88d59fde43422862fb884bd6857a8c",
        "sha256": "af37686e9902af809051d39f75d31796cb8b3fc54d2c0589e0c6730b2e185ff2"
      },
      "downloads": -1,
      "filename": "django-wapiti-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9a88d59fde43422862fb884bd6857a8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19612,
      "upload_time": "2016-03-22T19:39:28",
      "upload_time_iso_8601": "2016-03-22T19:39:28.795600Z",
      "url": "https://files.pythonhosted.org/packages/98/61/c7c315162f22ec0c9359d2997e5d20e613a4f5b2da98acd851a317575ca8/django-wapiti-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}