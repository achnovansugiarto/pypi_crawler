{
  "info": {
    "author": "Andreas Stocker",
    "author_email": "astocker@anexia-it.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django ChangeSet\n================\n\n[![Linter and tests](https://github.com/beachmachine/django-changeset/workflows/Linter%20and%20tests/badge.svg)](https://github.com/beachmachine/django-changeset/actions)\n[![Codecov](https://img.shields.io/codecov/c/gh/beachmachine/django-changeset)](https://codecov.io/gh/beachmachine/django-changeset)\n\nDjango ChangeSet is a simple Django app that will give your models the possibility to track all changes. It depends on\n`django_userforeignkey` to determine the current user doing the change(s).\n\nCurrently, Django 2.2 and 3.2 are supported and tested via GitHub Actions.\n\nDetailed documentation is in the docs subdirectory.\n\nQuick start\n-----------\n\n1.  Use `pip` to install and download django-changeset (and `django-userforeignkey`):\n\n```bash\npip install django-changeset\n```\n\n2.  Add `django_userforeignkey` and `django_changeset` to your `INSTALLED_APPS` like this:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'django_userforeignkey',\n    'django_changeset',\n]\n```\n\n3.  Add `django_userforeignkey.middleware.UserForeignKeyMiddleware` to your `MIDDLEWARE` like this:\n\n```python\nMIDDLEWARE = (\n    ...\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    ...\n    'django_userforeignkey.middleware.UserForeignKeyMiddleware',\n)\n```\n\n**Note**: Make sure to insert the `UserForeignKeyMiddleware` **after** Djangos `AuthenticationMiddleware`.\n\nExample usage\n-------------\n\n***Use `RevisionModelMixin` as a mixin class for your models and add the fields you want to track in the meta***\nconfiguration using `track_fields` and `track_related`. Also add a generic relation to `ChangeSet` using\n`changesets = ChangeSetRelation()`:\n\n```python\nfrom django.db import models\n\nfrom django_changeset.models import RevisionModelMixin\nfrom django_changeset.models.fields import ChangeSetRelation\n\n\nclass MyModel(models.Model, RevisionModelMixin):\n    class Meta:\n        track_fields = ('my_data', )  # track changes on my_data\n        track_related = ('my_ref', )  # track changes on a related model\n\n    my_data = models.CharField(max_length=64, verbose_name=\"Very important data you want to track\")\n    my_ref = models.ForeignKey('SomeOtherModel', verbose_name=\"Very important relation\", related_name='my_models')\n\n    # Generic Relation to ChangeSet\n    changesets = ChangeSetRelation()\n```\n\nNote: If you want to have access to the properties `created_by`, `created_at`, `last_modified_by`, `last_modified_at`,\nyou need to inherit from `CreatedModifiedByMixin` aswell as `RevisionModelMixin`. For the Python MRO to work, you also\nhave to create an abstract base model:\n\n```python\nfrom django.db import models\n\nfrom django_changeset.models import CreatedModifiedByMixin, RevisionModelMixin\nfrom django_changeset.models.fields import ChangeSetRelation\n\n\n\nclass BaseModel(models.Model):\n    \"\"\"\n    BaseModel is needed for proper MRO within Python/Django Models\n    \"\"\"\n    class Meta:\n        abstract = True\n    pass\n\n\nclass MyModel(BaseModel, RevisionModelMixin, CreatedModifiedByMixin):\n    class Meta:\n        track_fields = ('my_data', )  # track changes on my_data\n        track_related = ('my_ref', )  # track changes on a related model\n\n    my_data = models.CharField(max_length=64, verbose_name=\"Very important data you want to track\")\n    my_ref = models.ForeignKey('SomeOtherModel', verbose_name=\"Very important relation\", related_name='my_models')\n\n    # Generic Relation to ChangeSet\n    changesets = ChangeSetRelation()\n```\n\nQuerying ChangeSets via the changesets relation\n-----------------------------------------------\n\nBy inheriting from the `RevisionModelMixin` and `CreatedModifiedByMixin` mixins, and adding an attribute of type\n`ChangeSetRelation` (a `GenericRelation` for the changeset), the following features are added to your model:\n\n-   Properties `created_by`, `created_at`, `last_modified_by`, `last_modified_at` are made available for each object\n    (`CreatedModifiedByMixin`)\n-   Relation `changesets` is made available, allowing you to run queries like this one:\n    `MyModel.objects.filter(changesets__changeset_type='I', changesets__user__username='johndoe')`\n\nAccess ChangeSets and ChangeRecords\n-----------------------------------\n\nToDo\n\nYou can access the changeset by calling the `change_set` property of an instance of `MyModel` as shown in the following\nexample:\n\n```python\nprint(\"------- CHANGE SETS (\", len(somemodel.changesets), \")---------\")\nfor change_set in somemodel.changesets:\n    # print change_set\n    print(\"Change was carried out at \", change_set.date, \" by user \", change_set.user, \" on model \", change_set.object_type)\n\n    print(\"  + CHANGE RECORDS (\", len(change_set.change_records.all()), \"): \")\n    for change_record in change_set.change_records.all():\n        print(\"\\t\", change_record)\n        print(\"\\tIs change on a related field?\", change_record.is_related)\n        # related fields: we only know that something new has been added. we know the PK, but not the object itself\n        print(\"\\t\\tChanged field \", change_record.field_name, \"(\", change_record.field_verbose_name, \") from \",\n              change_record.old_value, \"(display:\", change_record.old_value_display, \") to\")\n        print(\"\\t\\t \", change_record.new_value, \"(display:\", change_record.new_value_display, \")\")\n        if change_record.is_related:\n            print(\"\\t\\tRelated Object Info: \", change_record.related_object)\n    # TODO:\n    # change_set.created_at, change_set.created_by, change_set.last_modified_by, change_set.last_modified_at\n\n    print(\"-----\")\n```\n\nMaintainers\n-----------\n\nThis repository is currently maintained by\n\n-   beachmachine\n-   anx-mpoelzl\n\nPull Requests are welcome.\n\nLicense\n-------\n\nDjango ChangeSet uses the BSD-3 Clause License, see LICENSE file.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/beachmachine/django-changeset",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-changeset",
    "package_url": "https://pypi.org/project/django-changeset/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-changeset/",
    "project_urls": {
      "Homepage": "https://github.com/beachmachine/django-changeset"
    },
    "release_url": "https://pypi.org/project/django-changeset/1.1.0/",
    "requires_dist": [
      "django-userforeignkey (>=0.3)"
    ],
    "requires_python": "",
    "summary": "A simple Django app that will give your models the possibility to track all changes.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12004998,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bdbf6708bdcfa76970840767b18b5f33f8d26f6a919094d7b53110fa386efce",
        "md5": "4164fa5a18100123936f2858fb80ed07",
        "sha256": "57fd88ed8c57442490b106ef8ac6475b55cc4e041f3fc9e8dd61a17d6d009317"
      },
      "downloads": -1,
      "filename": "django_changeset-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4164fa5a18100123936f2858fb80ed07",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18074,
      "upload_time": "2021-11-12T10:40:14",
      "upload_time_iso_8601": "2021-11-12T10:40:14.046085Z",
      "url": "https://files.pythonhosted.org/packages/3b/db/f6708bdcfa76970840767b18b5f33f8d26f6a919094d7b53110fa386efce/django_changeset-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "012f560fc6e30f4542120c70b00bb5df79a886ba29066b62bd8fb272ee9fc990",
        "md5": "6c6822d58d3a900677569334e2e52c28",
        "sha256": "f64f6f57ce3c7e81be758ac4ed5b1a6687a60000d5a25743d4161428f4cafeb5"
      },
      "downloads": -1,
      "filename": "django-changeset-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c6822d58d3a900677569334e2e52c28",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19821,
      "upload_time": "2021-11-12T10:40:15",
      "upload_time_iso_8601": "2021-11-12T10:40:15.208846Z",
      "url": "https://files.pythonhosted.org/packages/01/2f/560fc6e30f4542120c70b00bb5df79a886ba29066b62bd8fb272ee9fc990/django-changeset-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}