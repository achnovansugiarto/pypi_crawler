{
  "info": {
    "author": "Matthew Wilkes",
    "author_email": "matt@matthewwilkes.name",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python"
    ],
    "description": "A django add-on that allows models to be decorated with information about which fields contain sensitive information, and an associated management command that creates a script to remove that information.\n\n.. image:: https://travis-ci.org/MatthewWilkes/django-scrub-pii.svg?branch=master\n    :target: https://travis-ci.org/MatthewWilkes/django-scrub-pii\n\n.. image:: https://coveralls.io/repos/github/MatthewWilkes/django-scrub-pii/badge.svg?branch=master\n    :target: https://coveralls.io/github/MatthewWilkes/django-scrub-pii?branch=master\n\n\nINSTALL\n=======\n\n::\n\n    $ pip install django-scrub-pii\n\nUSAGE\n=====\n\nAdd scrubpii to your settings file:\n\n.. code :: python\n\n    INSTALLED_APPS = (\n        ...,\n        ...,\n        ...,\n        'scrubpii',\n    )\n\nSensitive fields are marked by adding a `sensitive_fields` list to the model's Meta class. As the fields in the Meta class are fixed, Django needs to be patched to allow the new field. To ensure isolation and warn if compatibility problems happen in future, this is achieved by defining the model within a context manager:\n\n.. code :: python\n\n    from scrubpii import allow_sensitive_fields\n    \n    with allow_sensitive_fields():\n        class Person(models.Model):\n            first_name = models.CharField(max_length=30)\n            last_name = models.CharField(max_length=30)\n            date_of_birth = models.DateField()\n            email = models.EmailField()\n\n            def __unicode__(self):\n                return \"{0} {1}\".format(self.first_name, self.last_name)\n\n            class Meta:\n                sensitive_fields = {'last_name', 'first_name', 'email', 'date_of_birth'}\n\nThis can be achieved easily by separating the sensitive models out into a new file, as so:\n\n.. code :: python\n\n    from django.db import models\n    from scrubpii import allow_sensitive_fields\n    \n    with allow_sensitive_fields():\n        from .sensitive_models import *\n\nwhere `sensitive_models.py` is:\n\n.. code :: python\n\n    from django.db import models\n    \n    __all__ = ['Person']\n    \n    class Person(models.Model):\n        first_name = models.CharField(max_length=30)\n        last_name = models.CharField(max_length=30)\n        date_of_birth = models.DateField()\n        email = models.EmailField()\n\n        def __unicode__(self):\n            return \"{0} {1}\".format(self.first_name, self.last_name)\n\n        class Meta:\n            sensitive_fields = {'last_name', 'first_name', 'email', 'date_of_birth'}\n\n\nIf you need to mark fields on third party models as sensitive you can do so using settings.py:\n\n.. code :: python\n\n    SCRUB_PII_ADDITIONAL_FIELDS = {'auth.User': {'email',\n                                                 'first_name',\n                                                 'last_name',\n                                                 'password',\n                                                 'username',\n                                                 },\n                                   'testapp.Book': {'title', },\n                                   'testapp.Example': {'foo', }\n                                  }\n\nOnce the sensitive fields are defined a management command will generate SQL statements to anonymize a database. This app will not anonymize the database directly to avoid the risk of damaging live data.\n\nThe script can be generated by running the management command:\n\n::\n\n    $ python manage.py get_sensitive_data_removal_script > scrub.sql\n\nThe suggested workflow is:\n\n1. Dump database\n2. Reload dump into a temporary database on a secure server (or copy sqlite.db if sqlite)\n3. Generate anonymisation script\n4. Run anonymisation script against temporary database\n5. Dump temporary database\n6. Delete temporary database\n7. Transmit temporary database to insecure server\n\nSUPPORTED DATABASES\n===================\n\nCurrently, postgresql and sqlite only are supported. Patches to add other databases or fields welcome.\n\nNote, the anonymisation under sqlite is more comprehensive than under postgresql. For example, under sqlite IP addresses will be anonymised to the same value, whereas under postgres different IPs will be anonymised to differing values.\n\nDEVELOP\n=======\n\n::\n\n    $ git clone django-scrub-pii\n    $ cd django-scrub-pii\n    $ make\n\nRUNNING TESTS\n=============\n\n::\n\n    $ tox\n\n\n\nChangelog\n=========\n\n\n1.1.3 (2016-01-29)\n----------------\n\n- Add support for later postgres versions.\n  [MatthewWilkes]\n\n\n1.1.2 (2016-01-29)\n----------------\n\n- Add TextField to the types that can be sanitised.\n  [MatthewWilkes]\n\n\n1.1.1 (2016-01-29)\n----------------\n\n- Fix a bug in 1.1 that meant the additional sensitive fields on model setting was an all-or-nothing affair.\n  [MatthewWilkes]\n\n\n1.1 (2016-01-29)\n----------------\n\n- Allow specification of additional model fields to treat as sensitive using django settings.\n  [MatthewWilkes]\n\n\n1.0 (2016-01-29)\n----------------\n\n- Initial release, basic support for built in field types, especially on postgres. Limited sqlite support.\n  [MatthewWilkes]\n\n::\n\n    django-scrub-pii Copyright (c) 2016, Matthew Wilkes\n    All rights reserved.\n    \n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n    3. The name of the author may not be used to endorse or promote products\n       derived from this software without specific prior written permission.\n    \n    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-scrub-pii",
    "package_url": "https://pypi.org/project/django-scrub-pii/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-scrub-pii/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-scrub-pii/1.1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A django add-on that allows models to be decorated with information about which fields contain sensitive information, and an associated management command that creates a script to remove that information.",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1929718,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a5edb3bde55077bf91f3a8bc0cad60bd26d9386c7af5ccdc78d6b0b41356baf",
        "md5": "c22b1c0f7d128cea6a684b0bd3034136",
        "sha256": "73f2f012e55107b90b1058e2d54271a4f19f4ed37afdb3206c3ab05bec130258"
      },
      "downloads": -1,
      "filename": "django_scrub_pii-1.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c22b1c0f7d128cea6a684b0bd3034136",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 23876,
      "upload_time": "2016-01-29T17:20:09",
      "upload_time_iso_8601": "2016-01-29T17:20:09.143142Z",
      "url": "https://files.pythonhosted.org/packages/5a/5e/db3bde55077bf91f3a8bc0cad60bd26d9386c7af5ccdc78d6b0b41356baf/django_scrub_pii-1.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03c6387df11319fc62d7b5d0ef6d0608392d6a0dd19ad867fa6d2a3bddab1acb",
        "md5": "69b2e6729fc2634bd9f7dc5cf37825c9",
        "sha256": "75bd638ebd48e5e9bc5f782dc35f145932ee60cb68980eea82032c21e8692844"
      },
      "downloads": -1,
      "filename": "django-scrub-pii-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "69b2e6729fc2634bd9f7dc5cf37825c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13377,
      "upload_time": "2016-01-29T17:19:46",
      "upload_time_iso_8601": "2016-01-29T17:19:46.708525Z",
      "url": "https://files.pythonhosted.org/packages/03/c6/387df11319fc62d7b5d0ef6d0608392d6a0dd19ad867fa6d2a3bddab1acb/django-scrub-pii-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}