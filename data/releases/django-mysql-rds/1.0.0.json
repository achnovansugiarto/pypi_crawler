{
  "info": {
    "author": "Chris Ramshaw",
    "author_email": "chris.ramshaw@nanoporetech.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# django-mysql-rds\n\n## A Django db backend for connecting to RDS MySQL instances using SSL db auth tokens.\n\n## Use\n\nI'd recommend understanding what you're doing and why before dropping this in, but chances are that you have a DATABASES dict that looks something like:\n\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': DBNAME,\n        'USER': USER,\n        'PASSWORD': aws_client.generate_db_auth_token(HOST, PORT, USER),\n        'HOST': HOST,\n        'PORT': PORT,\n        'OPTIONS': {\n            'ssl': {\n                'ca': 'certs/rds-cert.pem'\n            }\n        }\n    }\n}\n```\n\nAnd you've discovered that after ~15 minutes you make a request and receive `Access Denied for user@instance` because the password has expired.\n\nThis package allows you to generate the password at connection time by passing a callable instead:\n\n```\ndef generate_pw():\n    return aws_client.generate_db_auth_token(HOST, PORT, USER)\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'mysql_rds.backend',\n        'NAME': DBNAME,\n        'USER': USER,\n        'PASSWORD': generate_pw,\n        'HOST': HOST,\n        'PORT': PORT,\n        'CONN_MAX_AGE': 900,\n        'OPTIONS': {\n            'ssl': {\n                'ca': 'certs/rds-cert.pem'\n            }\n        }\n    }\n}\n```\n\nI recommend setting a `CONN_MAX_AGE` of 900 as the generated auth token expires after 900 seconds. This ensures that connections requiring a refresh recreated. You can pass any function as the password and it will be evaluated at connection time. For testing locally if you cannot connect to directly to RDS you can do something like:\n\n```\ndef generate_pw():\n    return 'password'\n```\n\n## Installation\n\n```\n$ pip install django-mysql-rds\n```\n\nor\n\n```\n$ git clone git@github.com:cramshaw/django-mysql-rds.git\n```\n\n## Why?\n\nWhen I searched for a way to connect to an AWS RDS MySQL instance using SSL inside Django, I was unable to find anything that could handle the fact that the db auth token generated by AWS would expire every 15 minutes.\n\nThe problem is that when anything in the settings module changes, Django needs to reload. This isn't practical in a long running web app. I needed a way for the password to be generated at the time of connection.\n\n## How?\n\nOn close inspection of the `django.db.backends.mysql` code, it became clear that the `DatabaseWrapper.get_connection_params` method takes the settings dict, and transforms it into the kwargs that are passed to `mysql.connect`. I have subclassed this and extended to recognise if the password passed in is a callable, and if so, to call it and pass on the returned value. This leads to\nDjango receiving a fresh password every time a connection is created.\n\nA very similar thing happens in the `DatabaseClient.settings_to_cmd_args` which is used for things like dumping and loading data. This has also been subclassed and changed to ensure the password generation method actually runs before attempting to create a run a shell.\n\n## Caveats\n\nWhilst this works for me running `django==2.2` and should work exactly the same as the built in MySQL backend, there are no guarantees.\n\nI only needed this to work for MySQL. I haven't explored whether RDS does the same for Postgres or other databases, but the same principle ought to apply.\n\n## Running Tests\n\nTests require [mysqlclient](https://pypi.org/project/mysqlclient/) installed.\n\n```\n$ brew install mysql-client\n$ export PATH=\"/usr/local/opt/mysql-client/bin:$PATH\"\n```\n\nThen to run:\n\n```\n$ python -m unittest tests/test*\n```\n\n## Packaging\n\nBump version in setup.py\nthen:\n\n```\n$ rm -rf dist/\n$ python3 setup.py sdist bdist_wheel\n$ python3 -m twine upload dist/*\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cramshaw/django-mysql-rds",
    "keywords": "",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mysql-rds",
    "package_url": "https://pypi.org/project/django-mysql-rds/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mysql-rds/",
    "project_urls": {
      "Homepage": "https://github.com/cramshaw/django-mysql-rds"
    },
    "release_url": "https://pypi.org/project/django-mysql-rds/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11028414,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89b4ee5bdf07ad08e2d7404cc13967fea2841456fffbd18e7d51ab9298d4a8a4",
        "md5": "8656652feb9a25562df04d6eb145cada",
        "sha256": "1294719a3db02310aeeca438eaf6f8a752783224694d4817e8c179a8fd30f75f"
      },
      "downloads": -1,
      "filename": "django_mysql_rds-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8656652feb9a25562df04d6eb145cada",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10195,
      "upload_time": "2021-07-28T14:32:29",
      "upload_time_iso_8601": "2021-07-28T14:32:29.177706Z",
      "url": "https://files.pythonhosted.org/packages/89/b4/ee5bdf07ad08e2d7404cc13967fea2841456fffbd18e7d51ab9298d4a8a4/django_mysql_rds-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fbf340becf3d13c6ede37852a6efd21367a5fd2dceaef9b9d419612c9f8828b",
        "md5": "93827db415c0ea2c4b0b57af719b94ea",
        "sha256": "252dfe53ae0dd3dc0c333153e0801ba895a124eda0263daf5b5c502bb030a6f3"
      },
      "downloads": -1,
      "filename": "django-mysql-rds-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93827db415c0ea2c4b0b57af719b94ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9229,
      "upload_time": "2021-07-28T14:32:30",
      "upload_time_iso_8601": "2021-07-28T14:32:30.869574Z",
      "url": "https://files.pythonhosted.org/packages/4f/bf/340becf3d13c6ede37852a6efd21367a5fd2dceaef9b9d419612c9f8828b/django-mysql-rds-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}