{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Modern bencode\n\nA simple library for decoding/encoding bencoded data.\n\nThere are other bencode related libraries out there, but most of them:\n- are created a long time ago and don't have active maintainers anymore\n- don't have any docs at all or have very limited docs\n- don't have any tests at all or have only partial test coverage\n- use C extensions to make them faster, which can:\n  - create problems when compiling on different platforms\n  - make debugging more complicated (if you get a \"Segmentation fault\" error)\n\nSo, here is one more bencode library. Pluses:\n- it has an active maintainer\n- it has docs (both here and for all code) and human readable error messages\n- it has type annotations (so you can see what each function takes/returns)\n- it has 100% test coverage (+uses black, isort, flake8, mypy, pylint)\n- it is written in pure Python and has no dependencies \n\nMinuses:\n- it requires Python >= 3.7\n- it is slower than libraries, which use C extensions (still, decoding \n  a regular torrent file takes up to a few milliseconds on a regular VPS)\n\n## Installation\n```\npip install modern-bencode\n```\nThe library requires Python >= 3.7\n\n## Usage\n```python\nfrom bencode import decode, encode\nfrom bencode import decode_torrent, encode_torrent\nfrom bencode import be_to_str, str_to_be\n\nassert decode(b\"li123e3:abce\") == [123, b\"abc\"]\nassert encode([123, b\"abc\"]) == b\"li123e3:abce\"\n\nassert be_to_str(b\"li123e3:ab\\t\\xfcce\") == \"li123e3:ab[09][fc]ce\"\nassert str_to_be(\"li123e3:ab[09][fc]ce\") == b\"li123e3:ab\\t\\xfcce\"\n\nwith open(\"my-torrent-file.torrent\", \"rb\") as source_file:\n    data = source_file.read()\n    print(decode(data))\n    print(decode_torrent(data, encoding=\"utf8\", errors=\"strict\"))\n    assert data == encode_torrent(decode_torrent(data))\n    assert data == str_to_be(be_to_str(data))\n```\n\n## Notes\n\n**bencode.decode** converts bencoded data to a Python object. It gets *bytes*  \nand:\n- either returns a Python object (*bytes*, *dict*, *int* or *list*)\n- or raises a ValueError when decoding is not possible. The error message will \n  contain a human readable explanation why exactly it is not possible, for \n  example:\n```\nCannot decode an integer, reached the end of the bencoded \nstring before the end marker was found. Most likely the \nbencoded string is incomplete or incorrect.\n```\n\n**bencode.encode** converts a Python object to bencoded data. It gets a Python \nobject (*bytes*, *dict*, *int* or *list*) and:\n- either returns a bencoded string (as *bytes*)\n- or raises a ValueError when encoding is not possible. The error message will \n  contain a human readable explanation why exactly it is not possible, for \n  example:\n```\nCannot encode data: objects of type <class 'set'> are not supported.\n```\n\n**bencode.decode_torrent** converts torrent data to a Python object. It gets \ntorrent data (as *bytes*), an optional \n[encoding](https://docs.python.org/3.7/library/codecs.html#standard-encodings),\nan optional [error handler](https://docs.python.org/3/library/codecs.html#error-handlers)\nand:\n- either returns a Python *dict*, where all keys and most values are strings.  \n  Values are decoded:\n  - using utf8 (if the key ends with \".utf-8\" suffix, like \"name.utf-8\")\n  - using the provided encoding (for other human readable fields)\n  - as hex (for binary fields)\n- or raises UnicodeDecodeError/ValueError when decoding is not possible.\n\n**bencode.encode_torrent** converts torrent (*dict*) to bencoded data. Just \na mirror function for the previous one, deals with encoding in the same way. \nRaises UnicodeEncodeError/ValueError when encoding is not possible.\n\n**bencode.be_to_str** converts bencoded data (*bytes*) to a string (*str*). It \nuses a custom encoding based on ASCII (check [encoding file](encoding.txt) \nfor details) and can be useful when you need to store bencoded data in a JSON \ndocument.\n\n**bencode.str_to_be** is just a mirror function for the previous one. Its \noutput will always be exactly the same, as the input to **bencode.be_to_str**.\n\n## Bugs\n\nFeel free to create an issue [here](https://github.com/retonato/modern-bencode/issues)\nif you find a bug or some error message is not clear enough.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/retonato/modern-bencode",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modern-bencode",
    "package_url": "https://pypi.org/project/modern-bencode/",
    "platform": "",
    "project_url": "https://pypi.org/project/modern-bencode/",
    "project_urls": {
      "Homepage": "https://github.com/retonato/modern-bencode"
    },
    "release_url": "https://pypi.org/project/modern-bencode/1.6.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A simple bencode library",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11231375,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e50f66ae642ed512a06de09149327833a35ff36ca1a65fc94e179ee1da5ff020",
        "md5": "34a78422ef1b35231c6d629422119f0f",
        "sha256": "8ac99e41cdce7474d53b213332c4423d6ffd2c5e2fa36fce5672921a101dbe45"
      },
      "downloads": -1,
      "filename": "modern_bencode-1.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34a78422ef1b35231c6d629422119f0f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7498,
      "upload_time": "2021-08-20T11:07:15",
      "upload_time_iso_8601": "2021-08-20T11:07:15.578298Z",
      "url": "https://files.pythonhosted.org/packages/e5/0f/66ae642ed512a06de09149327833a35ff36ca1a65fc94e179ee1da5ff020/modern_bencode-1.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c036285d0c50f63beaeb136938548147f6aaece69c619a65b44806988e93e34",
        "md5": "811b80dbb831ca83f9db21ba2508a280",
        "sha256": "609ddf15064640bb57d3e992b5723625eac119886ad1ddafc0fe3b0d931aaa6d"
      },
      "downloads": -1,
      "filename": "modern-bencode-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "811b80dbb831ca83f9db21ba2508a280",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33898,
      "upload_time": "2021-08-20T11:07:16",
      "upload_time_iso_8601": "2021-08-20T11:07:16.819530Z",
      "url": "https://files.pythonhosted.org/packages/6c/03/6285d0c50f63beaeb136938548147f6aaece69c619a65b44806988e93e34/modern-bencode-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}