{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Modern bencode\n\nA simple library for decoding/encoding bencoded data.\n\nThere are other bencode related libraries out there, but most of them:\n- are created a long time ago and don't have active maintainers anymore\n- don't have any docs at all or have very limited docs\n- don't have any tests at all or have only partial test coverage\n- use C extensions to make them faster, which can:\n  - create problems when compiling on different platforms\n  - make debugging more complicated (if you get a \"Segmentation fault\" error)\n\nSo, here is one more bencode library. Pluses:\n- it has an active maintainer\n- it has docs (both here and for all code) and human readable error messages\n- it has type annotations (so you can see what each function takes and what it \n  returns)\n- it has 100% test coverage (+uses black, isort, flake8, mypy, pylint)\n- it is written in pure Python and has no dependencies \n\nMinuses:\n- it requires Python >= 3.7\n- it is slower than libraries, which use C extensions (still, decoding  \n  a regular torrent file takes up to a few milliseconds on a regular VPS)\n\n## Installation\n```\npip install modern-bencode\n```\nThe library requires Python >= 3.7\n\n## Usage\n```python\nfrom bencode import decode, decode_torrent, encode\n\nassert decode(b\"li123e3:abce\") == [123, b\"abc\"]\nassert encode([123, b\"abc\"]) == b\"li123e3:abce\"\n\nwith open(\"my-torrent-file.torrent\", \"rb\") as source_file:\n    torrent_data = source_file.read()\n    print(decode(torrent_data))\n    print(decode_torrent(torrent_data, encoding=\"utf8\"))\n```\n\n## Notes\n\n**bencode.decode** gets *bytes* and:\n- either returns a Python object (*bytes*, *dict*, *int* or *list*)\n- or raises a ValueError when decoding is not possible. The error message will  \n  contain a human readable explanation why exactly it is not possible, for \n  example:\n```\nCannot decode an integer, reached the end of the bencoded \nstring before the end marker was found. Most likely the \nbencoded string is incomplete or incorrect.\n```\n\n**bencode.decode_torrent** gets torrent file (as *bytes*), an optional \n[encoding](https://docs.python.org/3.7/library/codecs.html#standard-encodings) \nand:\n- either returns a Python *dict*, where all keys and most values are strings.  \n  Fields, which are not supposed to be human readable (\"ed2k\", \"filehash\",  \n  \"pieces\"), are decoded as hex. Fields, which are supposed to be human  \n  readable, are decoded:\n  - using utf8 (if the key ends with \".utf-8\" suffix, like \"path.utf-8\")\n  - using the provided encoding (in all other cases)\n- or raises UnicodeDecodeError/ValueError when decoding is not possible.\n\n**bencode.encode** gets a Python object (*bytes*, *dict*, *int* or *list*) and:\n- either returns a bencoded string (as *bytes*)\n- or raises a ValueError when encoding is not possible. The error message will  \n  contain a human readable explanation why exactly it is not possible, for \n  example:\n```\nCannot encode data: objects of type <class 'set'> are not supported.\n```\n\n**bencode.encode_torrent** is not implemented yet. Let me know if you need it.\n\n## Bugs\n\nFeel free to create an issue [here](https://github.com/retonato/modern-bencode/issues)\nif you find a bug or some error message is not clear enough.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/retonato/modern-bencode",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modern-bencode",
    "package_url": "https://pypi.org/project/modern-bencode/",
    "platform": "",
    "project_url": "https://pypi.org/project/modern-bencode/",
    "project_urls": {
      "Homepage": "https://github.com/retonato/modern-bencode"
    },
    "release_url": "https://pypi.org/project/modern-bencode/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11231375,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f059da0bce6e0060b7afad8b9d602123b993b65497eab4ad16eba5a84b7fc3e0",
        "md5": "fe26da4fa882e9152cad8a0fa8191161",
        "sha256": "b4db63f65694ed136720752c52b295a0dbb3e0d1f06f72ecfc9a84bc546306e7"
      },
      "downloads": -1,
      "filename": "modern_bencode-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe26da4fa882e9152cad8a0fa8191161",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5065,
      "upload_time": "2021-02-15T17:02:18",
      "upload_time_iso_8601": "2021-02-15T17:02:18.203254Z",
      "url": "https://files.pythonhosted.org/packages/f0/59/da0bce6e0060b7afad8b9d602123b993b65497eab4ad16eba5a84b7fc3e0/modern_bencode-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea5d97a68a327d1c7efb703fafadfe236600d1011ae1dc3fc730431ba28f4efe",
        "md5": "9c90a922a0f857ba652dfab614d69a56",
        "sha256": "ff076c59a5dc7eb238db600f2e9e81a8df991d14c4aea05a8b429caa0e7c98f3"
      },
      "downloads": -1,
      "filename": "modern-bencode-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9c90a922a0f857ba652dfab614d69a56",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29351,
      "upload_time": "2021-02-15T17:02:19",
      "upload_time_iso_8601": "2021-02-15T17:02:19.494083Z",
      "url": "https://files.pythonhosted.org/packages/ea/5d/97a68a327d1c7efb703fafadfe236600d1011ae1dc3fc730431ba28f4efe/modern-bencode-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}