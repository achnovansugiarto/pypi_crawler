{
  "info": {
    "author": "Val Huber",
    "author_email": "valjhuber@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Logic Bank governs SQLAlchemy\nupdate transaction logic - multi-table derivations, constraints,\nand actions such as sending mail or messages. Logic consists of both:\n\n* **Rules - 40X** more concise\nusing a spreadsheet-like paradigm, and\n\n* **Python - control and extensibility,**\nusing standard tools and techniques\n\n> The example described below is a _typical_ example of multi-table logic.\n>\n> You may find it helpful to begin with [this Tutorial, using a basic example](../../wiki/Tutorial).\n>\n>\n> **Update - Jan 26, 2021:** You can use LogicBank for your own projects.  For new projects, the recommended approach is [**ApiLogicServer**](https://github.com/valhuber/ApiLogicServer#readme) - create a complete logic-enabled JSON:API for your database, and a admin app, with 1 command.\n\nThis readme contains:\n\n1. [Background](#background)\n    * [Why](#why---simple-cocktail-napkin-spec-explodes-into-massive-legacy-code) - problems addressed\n    * [What](#what---declare-spreadsheet-like-rules---40x-more-concise) - what are spreadsheet-like rules\n    * [How](#how---usage-and-operation-overview) - usage / operation overview\n    * [Logic Execution](#logic-execution-add-order---watch-react-chain) - sample transaction execution, reuse and scalability\n    * [Instant Web App](#an-agile-perspective) - built using [Flask App Builder Quickstart](https://github.com/valhuber/fab-quick-start/wiki)\n1. [Install Instructions](#installation) - of Python and Logic Bank, with verify and run instructions\n1. [Project Information](#project-information)\n\n\n# Background\n\n## Why - Simple Cocktail-Napkin Spec Explodes into Massive Legacy Code\n\nIf you've coded backend database logic - multi-table derivations and constraints -\nyou know how much work it is, and how tedious.  Whether you code it in\ntriggers and stored procedures, in ORM events, or UI controllers, it's a lot:\ntypically nearly half the effort for a database project.\n\nIt's also incredibly repetitive - you often get the feeling you're doing the same thing over and over.\n\nAnd you're right.  It's because backend logic follows patterns of \"what\" is supposed to happen.\nAnd your code is the \"how\".  Suddenly, a simple cocktail napkin specification explodes into a massive amount of legacy code:\n\n<figure><img src=\"https://github.com/valhuber/LogicBank/blob/main/images/overview/rules-vs-code.png?raw=true\"></figure>\n\nLogic Bank was designed to make the cocktail napkin spec _executable_.\n\n## What - Declare Spreadsheet-like Rules - 40X More Concise\nLogic Bank introduces rules that are 40X more concise than legacy code.\nThe 5 rules below (lines 40-49) express the same logic as 200 lines of code [**(see them here)**](examples/nw/logic/legacy).  That's because rules are all about \"what\"\n-- spreadsheet-like expressions that automate the tedious \"how\":\n\n<figure><img src=\"https://github.com/valhuber/LogicBank/blob/main/images/overview/cocktail-logic-bank.png?raw=true\"></figure>\n\n### Standard Python - Declare, Extend, Manage\nLogic Bank is fully integrated with Python:\n* **Declare** rules in Python as shown above (more details in How, below)\n* **Extend** rules with Python (rule on line 51 invokes the Python function on line 32)\n* **Manage** logic using your existing IDE (PyCharm, VSCode etc for code completion, debugging, etc),\nand source control tools and procedures\n\n### Technology Evaluation\n40X is... _large_ - do these results hold in practice?\nSee [here](../../wiki#technology-evaluation) for\nadditional background, and real world experience.\n\n\n## How - Usage and Operation Overview\n<figure><img src=\"https://github.com/valhuber/LogicBank/blob/main/images/architecture.png?raw=true\"></figure>\nLogic Bank operates as shown above:\n\n 1. **Declare and Activate** (see example above):\n\n    a. Create a ```declare_logic``` function (above, line 12),\n    and declare your rules using ```Rule.``` (e.g., with IDE code completion)\n\n    b. After opening your database, call ```activate```\n    to register your rules, and establish Logic Bank as\n    a listener for SQLAlchemy ```before_flush``` events\n\n\n 2. Your application operates as usual: makes calls on `SQLAlchemy` for inserts, updates and deletes\n    and issues `session.commit()`\n\n    - By bundling transaction logic into SQLAlchemy data access, your logic\n  is automatically shared, whether for hand-written code (Flask apps, APIs)\n\n\n 3. The **Logic Bank** engine handles SQLAlchemy `before_flush` events on\n`Mapped Tables`, so executes when you issue ```session.commit()```\n\n\n 4. The logic engine operates much like a spreadsheet:\n    - **watch** for changes at the attribute level\n    - **react** by running rules that referenced changed attributes, which can\n    - **chain** to still other attributes that refer to\n_those_ changes.  Note these might be in different tables,\nproviding automation for _multi-table logic_\n\nLogic does not apply to updates outside SQLAlchemy,\nnor to SQLAlchemy batch updates or unmapped sql updates.\n\nLet's see how logic operates on a typical, multi-table transaction.\n\n### Logic Execution: Add Order - Watch, React, Chain\n\n<figure><img src=\"https://github.com/valhuber/LogicBank/blob/main/images/check-credit.png?raw=true\"></figure>\n\n\nThe `add_order` example illustrates how\n__Watch / React / Chain__ operates to\ncheck the Credit Limit as each OrderDetail is inserted:\n\n1.  The `OrderDetail.UnitPrice` (copy, line 49) references Product, so inserts cause it to be copied\n\n2.  `Amount` (formula, line 48) watches `UnitPrice`, so its new value recomputes `Amount`\n\n3.  `AmountTotal` (sum, line 46) watches `Amount`, so `AmountTotal` is adjusted (more on adjustment, below)\n\n4.  `Balance` (sum, line 43) watches `AmountTotal`, so it is adjusted\n\n5.  And the Credit Limit constraint (line 40) is checked (exceptions are raised if constraints are violated, and the transaction is rolled back)\n\nAll of the dependency management to see which attributes have changed,\nlogic ordering, the SQL commands to read and adjust rows, and the chaining\nare fully automated by the engine, based solely on the rules above.\n\n### Spreadsheet-like Automatic Reuse\nJust as a spreadsheet reacts\nto inserts, updates and deletes to a summed column,\nrules automate _adding_, _deleting_ and _updating_ orders.\nThis is how 5 rules represent the same logic as 200 lines of code.\n\nCheck out more examples:\n* [**Ship Order**](../../wiki/Ship-Order) illustrates *cascade*, another form of multi-table logic\n* [**Banking**](../../wiki/Sample-Project---Banking) is a complex transaction using the command pattern\n\n### Scalability: Automatic Prune / Optimize logic\nScalability requires more than clustering - SQLs must be pruned\nand optimized.  For example, the balance rule:\n* is **pruned** if only a non-referenced column is altered (e.g., Shipping Address)\n* is **optimized** into a 1-row _adjustment_ update instead of an\nexpensive SQL aggregate\n\nFor more on how logic automates and optimizes multi-table transactions,\n[click here](../../wiki#scalability-automatic-pruning-and-optimization).\n\n\n## An Agile Perspective\nThe core tenant of agile is\n\n    Working software, driving collaboration, for rapid iterations\n\nHere's how rules can help.\n\n#### Working Software _Now_\nThe examples above illustrate how just a few rules can replace \n[pages of code](examples/nw/logic/legacy).\n\n\n#### Iteration - Automatic Ordering\nRules are _self-ordering_ - they recognize their interdependencies,\nand order their execution and database access (pruning, adjustments etc)\naccordingly.  This means:\n\n* order is independent - you can state the rules in any order\nand get the same result\n\n* maintenance is simple - just make changes, additions and deletions,\nthe engine will reorganize execution order and database access, automatically\n\n\n# Installation\nFirst, follow the instructions to verify / install Python, then install Logic Bank.\n\n### Python Installation\n\nThe first section below verifies whether your Python environment is current.\nThe following section explains how to install a current Python environment.\n\n#### Verify Pre-reqs: Python 3.8, virtualenv, pip3\nEnsure you have these pre-reqs:\n```\npython --version\n# requires 3.8 or higher (Relies on `from __future__ import annotations`, so requires Python 3.8)\n\npip --version\n# version 19.2.3 or higher... you might be using pip3\n\npyenv --version\n# 1.2.19 or higher\n```\n#### Install Python (if required)\nIf you are missing any, install them as described here.  Skip this step if your pre-reqs are fine.\n\nTo install Python:\n\n* Python3.8 \n\n   * Run the windows installer\n      * Be sure to specify \"add Python to Path\"\n   * On mac/Unix, consider [using homebrew](https://brew.sh/), as described\n[here](https://opensource.com/article/19/5/python-3-default-mac#what-to-do)\n\n* virtualenv - see [here](https://www.google.com/url?q=https%3A%2F%2Fpackaging.python.org%2Fguides%2Finstalling-using-pip-and-virtual-environments%2F%23creating-a-virtual-environment&sa=D&sntz=1&usg=AFQjCNEu-ZbYfqRMjNQ0D0DqU1mhFpDYmw)  (e.g.,  `pip install virtualenv`)\n   * on PC, see [these instructions](https://pypi.org/project/pyenv-win/)\n\n* An IDE - optional - any will do (I've used [PyCharm](https://www.jetbrains.com/pycharm/download) and [VSCode](https://code.visualstudio.com), install notes [here](https://github.com/valhuber/fab-quick-start/wiki/IDE-Setup)), though different install / generate / run instructions apply for running programs.\n\nIssues?  [Try here](https://github.com/valhuber/fab-quick-start/wiki/Mac-Python-Install-Issues).\n\n\n### Install LogicBank\nThis procedure installs the Logic Bank source code, including\nexamples you can explore.\n\n> To use Logic Bank in your own project: `pip install LogicBank`\n\nIn your IDE or Command Line:\n\n```\n# optionally fork, and then (WARNING - remove hyphens if you download the zip)\ngit clone https://github.com/valhuber/LogicBank.git\ncd LogicBank\n# windows: python -m venv venv\nvirtualenv venv\n# For windows: .\\venv\\Scripts\\activate\nsource venv/bin/activate\npip install -r requirements.txt\n```\n> **Warning -** if you just download the zip, *be sure* to remove the hyphen from the name.\n\n> **Warning -** if you use an IDE, be sure to activate the virtual environment, and verify you are running a proper version of Python.\n\n### Verify and Run\n\n#### Run the `nw/tests`\nRun the `nw/tests` programs under your IDE or the\ncommand line; start with `test_add_order` and `test_upd_order_shipped,`\nand see the [walk-throughs here](../../wiki/home#logic-execution-watch-react-chain).\nThe tests use ```unittest``` - you can run them as follows:\n\n```\ncd examples/nw/tests\npython -m unittest test_add_order.py\npython test_add_order.py  # or, run it like this\n\npython -m unittest discover -p \"test*.py\"  # run all tests\n```\n\n> Note: the console **log** depicts logic execution\n>\n> Log lines are long - consider copying them to a text\n> editor to view with / without word wrap\n> \n> Or, run in an IDE - they look [like this](../../wiki/home#debugging-standard-debugger-logic-logging).\n\n## Next Steps\n\n### Run the Tutorial\n\nFirst, run the [**10 minute Tutorial**](../../wiki/Tutorial).\nYou will see how to create, run and debug a rule in a simple, running example.\n\n### Explore Sample Transactions\n\nThen, check out the [**Examples**](../../wiki/Examples) - note the **navigation bar** on the right.  Key samples:\n* [**Ship Order**](../../wiki/Ship-Order) illustrates *cascade*, another form of multi-table logic\n* [**Allocation**](../../wiki/Sample-Project---Allocation) illustrates *extensibility*,\nproviding a reusable pattern for a *provider* to allocate\nto a set of *recipients*\n* [**Banking**](../../wiki/Sample-Project---Banking) is a complex transaction using the command pattern\n* [**Referential Integrity**](../../wiki/Referential-Integrity) illustrates referential integrity support\n\n\nA good way to proceed is to\n* Clear the log\n* Run the test\n* Review the log, and the rules that drove the processing\n\n\n### Articles\nThere a few articles that provide some orientation to Logic Bank:\n* [Extensible Rules](https://dzone.com/articles/logic-bank-now-extensible-drive-95-automation-even) - defining new rule types, using Python\n* [Declarative](https://dzone.com/articles/agile-design-automation-how-are-rules-different-fr) - exploring _multi-statement_ declarative technology\n* [Automate Business Logic With Logic Bank](https://dzone.com/articles/automate-business-logic-with-logic-bank) - general introduction, discussions of extensibility, manageability and scalability\n* [Agile Design Automation With Logic Bank](https://dzone.com/articles/logical-data-indendence) - focuses on automation, design flexibility and agile iterations\n\n### See also the [LogicBankExamples](https://github.com/valhuber/LogicBankExamples) project\n\nThe `Logic Bank Examples` [(setup instructions here)](../../wiki/Sample-Project---Setup)\ncontains the same examples, but _not_ the `logic_bank` engine source code.\nIt uses the logic engine via `pip install`, as you would for your own projects:\n\n```\npip install logicbank\n```\n> This is **not required here**, and requires the same\n> pre-reqs noted above\n\n\n\n# Project Information\n\n### Revisions\n\n[Revisions](https://github.com/valhuber/LogicBank/wiki/Summary,-Update-History) are described here.\n\n\n#### What's in the project\n<figure><img src=\"https://github.com/valhuber/LogicBank/blob/main/images/logic-bank-project.png?raw=true\"></figure>\n\nLogic Bank consists of:\n\n* Several test database systems - `nw,`  `banking`,\n  `referential_integrity` and `payment_allocation`;\nthese contain\n\n    * [Databases](examples/nw/db) sqlite (no install required) and models\n\n    * [Test folders](examples/nw/tests) that run key transactions - just run the scripts\n(note the logs)\n\n    * [Logic](examples/nw/logic) - rules (and for `nw`,\n    the manual `legacy` code for contrast to rules)\n\n* The `nw` sample illustrates comparisons of Business logic, both\n[by code](examples/nw/logic/legacy) and by rules (shown above).\n\n* The `logic_bank` engine source code\n\n\n#### Internals\n\nTo explore:\n\n* Click [here](../../wiki/Explore-Logic-Bank)\n    for install / operations procedures\n\n* Click [here](../../wiki/Logic-Walkthrough) for a\n    short overview of internal logic execution\n\n#### Acknowledgements\nThere are many to thank:\n* Tyler Band, for testing and the Banking example\n* Max Tardiveau, for testing\n* Nishanth Shyamsundar, for PC testing\n* Michael Holleran, for collaboration\n* Mike Bayer, for suggestions on leveraging Python typing and remarkable responsiveness\n* Achim Götz, for reporting an issue in FAB Quick Start use of Logic Base\n* Gloria, for many reviews... and golden patience\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/valhuber/logicbank",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logicbank",
    "package_url": "https://pypi.org/project/logicbank/",
    "platform": "any",
    "project_url": "https://pypi.org/project/logicbank/",
    "project_urls": {
      "Docs": "https://github.com/valhuber/logicbank/wiki",
      "Homepage": "https://github.com/valhuber/logicbank"
    },
    "release_url": "https://pypi.org/project/logicbank/1.5.3/",
    "requires_dist": [
      "python-dateutil (<3,>=2.3)",
      "sqlalchemy (>=1.4)"
    ],
    "requires_python": "~=3.8",
    "summary": "Declare multi-table rules for SQLAlchemy update logic -- 40X more concise, Python for extensibility.",
    "version": "1.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17158717,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18222e81740bb10c3499fad7dac40d7c49886435cac691e2fd27bde2d4f8be79",
        "md5": "8b7ea043270518bde47e111885d6c487",
        "sha256": "4358a9782230c698612155033f6166c64a1f35d9cc3ac2a240c164a2833382ed"
      },
      "downloads": -1,
      "filename": "logicbank-1.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8b7ea043270518bde47e111885d6c487",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.8",
      "size": 47194,
      "upload_time": "2022-03-16T16:22:09",
      "upload_time_iso_8601": "2022-03-16T16:22:09.982931Z",
      "url": "https://files.pythonhosted.org/packages/18/22/2e81740bb10c3499fad7dac40d7c49886435cac691e2fd27bde2d4f8be79/logicbank-1.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d593e956e6771562891a505989ed88162386b5a0b9ffe5e3f6d63dfcf8dd810",
        "md5": "bc8156c4a1e0f510bd19dd5aa76ac40a",
        "sha256": "ad616476b91fbb2e73c71cd63dbabf437df055aca9d4b2de8f2c428ae4b7a857"
      },
      "downloads": -1,
      "filename": "logicbank-1.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bc8156c4a1e0f510bd19dd5aa76ac40a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.8",
      "size": 43684,
      "upload_time": "2022-03-16T16:22:11",
      "upload_time_iso_8601": "2022-03-16T16:22:11.682153Z",
      "url": "https://files.pythonhosted.org/packages/5d/59/3e956e6771562891a505989ed88162386b5a0b9ffe5e3f6d63dfcf8dd810/logicbank-1.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}