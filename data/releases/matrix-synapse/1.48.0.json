{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications :: Chat"
    ],
    "description": "=========================================================================\nSynapse |support| |development| |documentation| |license| |pypi| |python|\n=========================================================================\n\n.. contents::\n\nIntroduction\n============\n\nMatrix is an ambitious new ecosystem for open federated Instant Messaging and\nVoIP.  The basics you need to know to get up and running are:\n\n- Everything in Matrix happens in a room.  Rooms are distributed and do not\n  exist on any single server.  Rooms can be located using convenience aliases\n  like ``#matrix:matrix.org`` or ``#test:localhost:8448``.\n\n- Matrix user IDs look like ``@matthew:matrix.org`` (although in the future\n  you will normally refer to yourself and others using a third party identifier\n  (3PID): email address, phone number, etc rather than manipulating Matrix user IDs)\n\nThe overall architecture is::\n\n      client <----> homeserver <=====================> homeserver <----> client\n             https://somewhere.org/_matrix      https://elsewhere.net/_matrix\n\n``#matrix:matrix.org`` is the official support room for Matrix, and can be\naccessed by any client from https://matrix.org/docs/projects/try-matrix-now.html or\nvia IRC bridge at irc://irc.libera.chat/matrix.\n\nSynapse is currently in rapid development, but as of version 0.5 we believe it\nis sufficiently stable to be run as an internet-facing service for real usage!\n\nAbout Matrix\n============\n\nMatrix specifies a set of pragmatic RESTful HTTP JSON APIs as an open standard,\nwhich handle:\n\n- Creating and managing fully distributed chat rooms with no\n  single points of control or failure\n- Eventually-consistent cryptographically secure synchronisation of room\n  state across a global open network of federated servers and services\n- Sending and receiving extensible messages in a room with (optional)\n  end-to-end encryption\n- Inviting, joining, leaving, kicking, banning room members\n- Managing user accounts (registration, login, logout)\n- Using 3rd Party IDs (3PIDs) such as email addresses, phone numbers,\n  Facebook accounts to authenticate, identify and discover users on Matrix.\n- Placing 1:1 VoIP and Video calls\n\nThese APIs are intended to be implemented on a wide range of servers, services\nand clients, letting developers build messaging and VoIP functionality on top\nof the entirely open Matrix ecosystem rather than using closed or proprietary\nsolutions. The hope is for Matrix to act as the building blocks for a new\ngeneration of fully open and interoperable messaging and VoIP apps for the\ninternet.\n\nSynapse is a Matrix \"homeserver\" implementation developed by the matrix.org core \nteam, written in Python 3/Twisted.\n\nIn Matrix, every user runs one or more Matrix clients, which connect through to\na Matrix homeserver. The homeserver stores all their personal chat history and\nuser account information - much as a mail client connects through to an\nIMAP/SMTP server. Just like email, you can either run your own Matrix\nhomeserver and control and own your own communications and history or use one\nhosted by someone else (e.g. matrix.org) - there is no single point of control\nor mandatory service provider in Matrix, unlike WhatsApp, Facebook, Hangouts,\netc.\n\nWe'd like to invite you to join #matrix:matrix.org (via\nhttps://matrix.org/docs/projects/try-matrix-now.html), run a homeserver, take a look\nat the `Matrix spec <https://matrix.org/docs/spec>`_, and experiment with the\n`APIs <https://matrix.org/docs/api>`_ and `Client SDKs\n<https://matrix.org/docs/projects/try-matrix-now.html#client-sdks>`_.\n\nThanks for using Matrix!\n\nSupport\n=======\n\nFor support installing or managing Synapse, please join |room|_ (from a matrix.org\naccount if necessary) and ask questions there. We do not use GitHub issues for\nsupport requests, only for bug reports and feature requests.\n\nSynapse's documentation is `nicely rendered on GitHub Pages <https://matrix-org.github.io/synapse>`_,\nwith its source available in |docs|_.\n\n.. |room| replace:: ``#synapse:matrix.org``\n.. _room: https://matrix.to/#/#synapse:matrix.org\n\n.. |docs| replace:: ``docs``\n.. _docs: docs\n\nSynapse Installation\n====================\n\n.. _federation:\n\n* For details on how to install synapse, see\n  `Installation Instructions <https://matrix-org.github.io/synapse/latest/setup/installation.html>`_.\n* For specific details on how to configure Synapse for federation see `docs/federate.md <docs/federate.md>`_\n\n\nConnecting to Synapse from a client\n===================================\n\nThe easiest way to try out your new Synapse installation is by connecting to it\nfrom a web client.\n\nUnless you are running a test instance of Synapse on your local machine, in\ngeneral, you will need to enable TLS support before you can successfully\nconnect from a client: see\n`TLS certificates <https://matrix-org.github.io/synapse/latest/setup/installation.html#tls-certificates>`_.\n\nAn easy way to get started is to login or register via Element at\nhttps://app.element.io/#/login or https://app.element.io/#/register respectively.\nYou will need to change the server you are logging into from ``matrix.org``\nand instead specify a Homeserver URL of ``https://<server_name>:8448``\n(or just ``https://<server_name>`` if you are using a reverse proxy).\nIf you prefer to use another client, refer to our\n`client breakdown <https://matrix.org/docs/projects/clients-matrix>`_.\n\nIf all goes well you should at least be able to log in, create a room, and\nstart sending messages.\n\n.. _`client-user-reg`:\n\nRegistering a new user from a client\n------------------------------------\n\nBy default, registration of new users via Matrix clients is disabled. To enable\nit, specify ``enable_registration: true`` in ``homeserver.yaml``. (It is then\nrecommended to also set up CAPTCHA - see `<docs/CAPTCHA_SETUP.md>`_.)\n\nOnce ``enable_registration`` is set to ``true``, it is possible to register a\nuser via a Matrix client.\n\nYour new user name will be formed partly from the ``server_name``, and partly\nfrom a localpart you specify when you create the account. Your name will take\nthe form of::\n\n    @localpart:my.domain.name\n\n(pronounced \"at localpart on my dot domain dot name\").\n\nAs when logging in, you will need to specify a \"Custom server\".  Specify your\ndesired ``localpart`` in the 'User name' box.\n\nSecurity note\n=============\n\nMatrix serves raw, user-supplied data in some APIs -- specifically the `content\nrepository endpoints`_.\n\n.. _content repository endpoints: https://matrix.org/docs/spec/client_server/latest.html#get-matrix-media-r0-download-servername-mediaid\n\nWhilst we make a reasonable effort to mitigate against XSS attacks (for\ninstance, by using `CSP`_), a Matrix homeserver should not be hosted on a\ndomain hosting other web applications. This especially applies to sharing\nthe domain with Matrix web clients and other sensitive applications like\nwebmail. See\nhttps://developer.github.com/changes/2014-04-25-user-content-security for more\ninformation.\n\n.. _CSP: https://github.com/matrix-org/synapse/pull/1021\n\nIdeally, the homeserver should not simply be on a different subdomain, but on\na completely different `registered domain`_ (also known as top-level site or\neTLD+1). This is because `some attacks`_ are still possible as long as the two\napplications share the same registered domain.\n\n.. _registered domain: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-2.3\n\n.. _some attacks: https://en.wikipedia.org/wiki/Session_fixation#Attacks_using_cross-subdomain_cookie\n\nTo illustrate this with an example, if your Element Web or other sensitive web\napplication is hosted on ``A.example1.com``, you should ideally host Synapse on\n``example2.com``. Some amount of protection is offered by hosting on\n``B.example1.com`` instead, so this is also acceptable in some scenarios.\nHowever, you should *not* host your Synapse on ``A.example1.com``.\n\nNote that all of the above refers exclusively to the domain used in Synapse's\n``public_baseurl`` setting. In particular, it has no bearing on the domain\nmentioned in MXIDs hosted on that server.\n\nFollowing this advice ensures that even if an XSS is found in Synapse, the\nimpact to other applications will be minimal.\n\n\nUpgrading an existing Synapse\n=============================\n\nThe instructions for upgrading synapse are in `the upgrade notes`_.\nPlease check these instructions as upgrading may require extra steps for some\nversions of synapse.\n\n.. _the upgrade notes: https://matrix-org.github.io/synapse/develop/upgrade.html\n\n.. _reverse-proxy:\n\nUsing a reverse proxy with Synapse\n==================================\n\nIt is recommended to put a reverse proxy such as\n`nginx <https://nginx.org/en/docs/http/ngx_http_proxy_module.html>`_,\n`Apache <https://httpd.apache.org/docs/current/mod/mod_proxy_http.html>`_,\n`Caddy <https://caddyserver.com/docs/quick-starts/reverse-proxy>`_,\n`HAProxy <https://www.haproxy.org/>`_ or\n`relayd <https://man.openbsd.org/relayd.8>`_ in front of Synapse. One advantage of\ndoing so is that it means that you can expose the default https port (443) to\nMatrix clients without needing to run Synapse with root privileges.\n\nFor information on configuring one, see `<docs/reverse_proxy.md>`_.\n\nIdentity Servers\n================\n\nIdentity servers have the job of mapping email addresses and other 3rd Party\nIDs (3PIDs) to Matrix user IDs, as well as verifying the ownership of 3PIDs\nbefore creating that mapping.\n\n**They are not where accounts or credentials are stored - these live on home\nservers. Identity Servers are just for mapping 3rd party IDs to matrix IDs.**\n\nThis process is very security-sensitive, as there is obvious risk of spam if it\nis too easy to sign up for Matrix accounts or harvest 3PID data. In the longer\nterm, we hope to create a decentralised system to manage it (`matrix-doc #712\n<https://github.com/matrix-org/matrix-doc/issues/712>`_), but in the meantime,\nthe role of managing trusted identity in the Matrix ecosystem is farmed out to\na cluster of known trusted ecosystem partners, who run 'Matrix Identity\nServers' such as `Sydent <https://github.com/matrix-org/sydent>`_, whose role\nis purely to authenticate and track 3PID logins and publish end-user public\nkeys.\n\nYou can host your own copy of Sydent, but this will prevent you reaching other\nusers in the Matrix ecosystem via their email address, and prevent them finding\nyou. We therefore recommend that you use one of the centralised identity servers\nat ``https://matrix.org`` or ``https://vector.im`` for now.\n\nTo reiterate: the Identity server will only be used if you choose to associate\nan email address with your account, or send an invite to another user via their\nemail address.\n\n\nPassword reset\n==============\n\nUsers can reset their password through their client. Alternatively, a server admin\ncan reset a users password using the `admin API <docs/admin_api/user_admin_api.rst#reset-password>`_\nor by directly editing the database as shown below.\n\nFirst calculate the hash of the new password::\n\n    $ ~/synapse/env/bin/hash_password\n    Password:\n    Confirm password:\n    $2a$12$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nThen update the ``users`` table in the database::\n\n    UPDATE users SET password_hash='$2a$12$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n        WHERE name='@test:test.com';\n\n\nSynapse Development\n===================\n\nThe best place to get started is our\n`guide for contributors <https://matrix-org.github.io/synapse/latest/development/contributing_guide.html>`_.\nThis is part of our larger `documentation <https://matrix-org.github.io/synapse/latest>`_, which includes\ninformation for synapse developers as well as synapse administrators.\n\nDevelopers might be particularly interested in:\n\n* `Synapse's database schema <https://matrix-org.github.io/synapse/latest/development/database_schema.html>`_,\n* `notes on Synapse's implementation details <https://matrix-org.github.io/synapse/latest/development/internal_documentation/index.html>`_, and\n* `how we use git <https://matrix-org.github.io/synapse/latest/development/git.html>`_.\n\nAlongside all that, join our developer community on Matrix:\n`#synapse-dev:matrix.org <https://matrix.to/#/#synapse-dev:matrix.org>`_, featuring real humans!\n\n\nQuick start\n-----------\n\nBefore setting up a development environment for synapse, make sure you have the\nsystem dependencies (such as the python header files) installed - see\n`Platform-specific prerequisites <https://matrix-org.github.io/synapse/latest/setup/installation.html#platform-specific-prerequisites>`_.\n\nTo check out a synapse for development, clone the git repo into a working\ndirectory of your choice::\n\n    git clone https://github.com/matrix-org/synapse.git\n    cd synapse\n\nSynapse has a number of external dependencies, that are easiest\nto install using pip and a virtualenv::\n\n    python3 -m venv ./env\n    source ./env/bin/activate\n    pip install -e \".[all,dev]\"\n\nThis will run a process of downloading and installing all the needed\ndependencies into a virtual env. If any dependencies fail to install,\ntry installing the failing modules individually::\n\n    pip install -e \"module-name\"\n\nWe recommend using the demo which starts 3 federated instances running on ports `8080` - `8082`\n\n    ./demo/start.sh\n\n(to stop, you can use `./demo/stop.sh`)\n\nIf you just want to start a single instance of the app and run it directly::\n\n    # Create the homeserver.yaml config once\n    python -m synapse.app.homeserver \\\n      --server-name my.domain.name \\\n      --config-path homeserver.yaml \\\n      --generate-config \\\n      --report-stats=[yes|no]\n\n    # Start the app\n    python -m synapse.app.homeserver --config-path homeserver.yaml\n\n\nRunning the unit tests\n----------------------\n\nAfter getting up and running, you may wish to run Synapse's unit tests to\ncheck that everything is installed correctly::\n\n    trial tests\n\nThis should end with a 'PASSED' result (note that exact numbers will\ndiffer)::\n\n    Ran 1337 tests in 716.064s\n\n    PASSED (skips=15, successes=1322)\n\nFor more tips on running the unit tests, like running a specific test or\nto see the logging output, see the `CONTRIBUTING doc <CONTRIBUTING.md#run-the-unit-tests>`_.\n\n\nRunning the Integration Tests\n-----------------------------\n\nSynapse is accompanied by `SyTest <https://github.com/matrix-org/sytest>`_,\na Matrix homeserver integration testing suite, which uses HTTP requests to\naccess the API as a Matrix client would. It is able to run Synapse directly from\nthe source tree, so installation of the server is not required.\n\nTesting with SyTest is recommended for verifying that changes related to the\nClient-Server API are functioning correctly. See the `SyTest installation\ninstructions <https://github.com/matrix-org/sytest#installing>`_ for details.\n\n\nPlatform dependencies\n=====================\n\nSynapse uses a number of platform dependencies such as Python and PostgreSQL,\nand aims to follow supported upstream versions. See the\n`<docs/deprecation_policy.md>`_ document for more details.\n\n\nTroubleshooting\n===============\n\nNeed help? Join our community support room on Matrix:\n`#synapse:matrix.org <https://matrix.to/#/#synapse:matrix.org>`_\n\nRunning out of File Handles\n---------------------------\n\nIf synapse runs out of file handles, it typically fails badly - live-locking\nat 100% CPU, and/or failing to accept new TCP connections (blocking the\nconnecting client).  Matrix currently can legitimately use a lot of file handles,\nthanks to busy rooms like #matrix:matrix.org containing hundreds of participating\nservers.  The first time a server talks in a room it will try to connect\nsimultaneously to all participating servers, which could exhaust the available\nfile descriptors between DNS queries & HTTPS sockets, especially if DNS is slow\nto respond. (We need to improve the routing algorithm used to be better than\nfull mesh, but as of March 2019 this hasn't happened yet).\n\nIf you hit this failure mode, we recommend increasing the maximum number of\nopen file handles to be at least 4096 (assuming a default of 1024 or 256).\nThis is typically done by editing ``/etc/security/limits.conf``\n\nSeparately, Synapse may leak file handles if inbound HTTP requests get stuck\nduring processing - e.g. blocked behind a lock or talking to a remote server etc.\nThis is best diagnosed by matching up the 'Received request' and 'Processed request'\nlog lines and looking for any 'Processed request' lines which take more than\na few seconds to execute. Please let us know at #synapse:matrix.org if\nyou see this failure mode so we can help debug it, however.\n\nHelp!! Synapse is slow and eats all my RAM/CPU!\n-----------------------------------------------\n\nFirst, ensure you are running the latest version of Synapse, using Python 3\nwith a PostgreSQL database.\n\nSynapse's architecture is quite RAM hungry currently - we deliberately\ncache a lot of recent room data and metadata in RAM in order to speed up\ncommon requests. We'll improve this in the future, but for now the easiest\nway to either reduce the RAM usage (at the risk of slowing things down)\nis to set the almost-undocumented ``SYNAPSE_CACHE_FACTOR`` environment\nvariable. The default is 0.5, which can be decreased to reduce RAM usage\nin memory constrained enviroments, or increased if performance starts to\ndegrade.\n\nHowever, degraded performance due to a low cache factor, common on\nmachines with slow disks, often leads to explosions in memory use due\nbacklogged requests. In this case, reducing the cache factor will make\nthings worse. Instead, try increasing it drastically. 2.0 is a good\nstarting value.\n\nUsing `libjemalloc <http://jemalloc.net/>`_ can also yield a significant\nimprovement in overall memory use, and especially in terms of giving back\nRAM to the OS. To use it, the library must simply be put in the\nLD_PRELOAD environment variable when launching Synapse. On Debian, this\ncan be done by installing the ``libjemalloc1`` package and adding this\nline to ``/etc/default/matrix-synapse``::\n\n    LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.1\n\nThis can make a significant difference on Python 2.7 - it's unclear how\nmuch of an improvement it provides on Python 3.x.\n\nIf you're encountering high CPU use by the Synapse process itself, you\nmay be affected by a bug with presence tracking that leads to a\nmassive excess of outgoing federation requests (see `discussion\n<https://github.com/matrix-org/synapse/issues/3971>`_). If metrics\nindicate that your server is also issuing far more outgoing federation\nrequests than can be accounted for by your users' activity, this is a\nlikely cause. The misbehavior can be worked around by setting\nthe following in the Synapse config file:\n\n.. code-block:: yaml\n\n   presence:\n       enabled: false\n\nPeople can't accept room invitations from me\n--------------------------------------------\n\nThe typical failure mode here is that you send an invitation to someone\nto join a room or direct chat, but when they go to accept it, they get an\nerror (typically along the lines of \"Invalid signature\"). They might see\nsomething like the following in their logs::\n\n    2019-09-11 19:32:04,271 - synapse.federation.transport.server - 288 - WARNING - GET-11752 - authenticate_request failed: 401: Invalid signature for server <server> with key ed25519:a_EqML: Unable to verify signature for <server>\n\nThis is normally caused by a misconfiguration in your reverse-proxy. See\n`<docs/reverse_proxy.md>`_ and double-check that your settings are correct.\n\n.. |support| image:: https://img.shields.io/matrix/synapse:matrix.org?label=support&logo=matrix\n  :alt: (get support on #synapse:matrix.org)\n  :target: https://matrix.to/#/#synapse:matrix.org\n\n.. |development| image:: https://img.shields.io/matrix/synapse-dev:matrix.org?label=development&logo=matrix\n  :alt: (discuss development on #synapse-dev:matrix.org)\n  :target: https://matrix.to/#/#synapse-dev:matrix.org\n\n.. |documentation| image:: https://img.shields.io/badge/documentation-%E2%9C%93-success\n  :alt: (Rendered documentation on GitHub Pages)\n  :target: https://matrix-org.github.io/synapse/latest/\n\n.. |license| image:: https://img.shields.io/github/license/matrix-org/synapse\n  :alt: (check license in LICENSE file)\n  :target: LICENSE\n\n.. |pypi| image:: https://img.shields.io/pypi/v/matrix-synapse\n  :alt: (latest version released on PyPi)\n  :target: https://pypi.org/project/matrix-synapse\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/matrix-synapse\n  :alt: (supported python versions)\n  :target: https://pypi.org/project/matrix-synapse\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matrix-synapse",
    "package_url": "https://pypi.org/project/matrix-synapse/",
    "platform": "",
    "project_url": "https://pypi.org/project/matrix-synapse/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/matrix-synapse/1.48.0/",
    "requires_dist": [
      "jsonschema (>=3.0.0)",
      "frozendict (>=1)",
      "unpaddedbase64 (>=1.1.0)",
      "canonicaljson (>=1.4.0)",
      "signedjson (>=1.1.0)",
      "pynacl (>=1.2.1)",
      "idna (>=2.5)",
      "service-identity (>=18.1.0)",
      "Twisted (>=18.9.0)",
      "treq (>=15.1)",
      "pyopenssl (>=16.0.0)",
      "pyyaml (>=3.11)",
      "pyasn1 (>=0.1.9)",
      "pyasn1-modules (>=0.0.7)",
      "bcrypt (>=3.1.0)",
      "pillow (>=4.3.0)",
      "sortedcontainers (>=1.4.4)",
      "pymacaroons (>=0.13.0)",
      "msgpack (>=0.5.2)",
      "phonenumbers (>=8.2.0)",
      "prometheus-client (>=0.4.0)",
      "attrs (!=21.1.0,>=19.2.0)",
      "netaddr (>=0.7.18)",
      "Jinja2 (>=2.9)",
      "bleach (>=1.4.3)",
      "typing-extensions (>=3.7.4)",
      "cryptography (>=3.4.7)",
      "ijson (>=3.0)",
      "authlib (>=0.14.0) ; extra == 'all'",
      "jaeger-client (>=4.0.0) ; extra == 'all'",
      "pympler ; extra == 'all'",
      "lxml (>=3.5.0) ; extra == 'all'",
      "matrix-synapse-ldap3 (>=0.1) ; extra == 'all'",
      "pysaml2 (>=4.5.0) ; extra == 'all'",
      "hiredis ; extra == 'all'",
      "sentry-sdk (>=0.7.2) ; extra == 'all'",
      "pyjwt (>=1.6.4) ; extra == 'all'",
      "txredisapi (>=1.4.7) ; extra == 'all'",
      "opentracing (>=2.2.0) ; extra == 'all'",
      "psycopg2 (>=2.8) ; (platform_python_implementation != \"PyPy\") and extra == 'all'",
      "psycopg2cffi-compat (==1.1) ; (platform_python_implementation == \"PyPy\") and extra == 'all'",
      "psycopg2cffi (>=2.8) ; (platform_python_implementation == \"PyPy\") and extra == 'all'",
      "pympler ; extra == 'cache_memory'",
      "isort (==5.7.0) ; extra == 'dev'",
      "black (==21.6b0) ; extra == 'dev'",
      "flake8-comprehensions ; extra == 'dev'",
      "flake8-bugbear (==21.3.2) ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy (==0.910) ; extra == 'dev'",
      "mypy-zope (==0.3.2) ; extra == 'dev'",
      "types-bleach (>=4.1.0) ; extra == 'dev'",
      "types-jsonschema (>=3.2.0) ; extra == 'dev'",
      "types-Pillow (>=8.3.4) ; extra == 'dev'",
      "types-pyOpenSSL (>=20.0.7) ; extra == 'dev'",
      "types-PyYAML (>=5.4.10) ; extra == 'dev'",
      "types-requests (>=2.26.0) ; extra == 'dev'",
      "types-setuptools (>=57.4.0) ; extra == 'dev'",
      "parameterized (>=0.7.0) ; extra == 'dev'",
      "click (==7.1.2) ; extra == 'dev'",
      "redbaron (==0.9.2) ; extra == 'dev'",
      "GitPython (==3.1.14) ; extra == 'dev'",
      "commonmark (==0.9.1) ; extra == 'dev'",
      "pygithub (==1.55) ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "towncrier ; extra == 'dev'",
      "pyjwt (>=1.6.4) ; extra == 'jwt'",
      "isort (==5.7.0) ; extra == 'lint'",
      "black (==21.6b0) ; extra == 'lint'",
      "flake8-comprehensions ; extra == 'lint'",
      "flake8-bugbear (==21.3.2) ; extra == 'lint'",
      "flake8 ; extra == 'lint'",
      "matrix-synapse-ldap3 (>=0.1) ; extra == 'matrix-synapse-ldap3'",
      "mypy (==0.910) ; extra == 'mypy'",
      "mypy-zope (==0.3.2) ; extra == 'mypy'",
      "types-bleach (>=4.1.0) ; extra == 'mypy'",
      "types-jsonschema (>=3.2.0) ; extra == 'mypy'",
      "types-Pillow (>=8.3.4) ; extra == 'mypy'",
      "types-pyOpenSSL (>=20.0.7) ; extra == 'mypy'",
      "types-PyYAML (>=5.4.10) ; extra == 'mypy'",
      "types-requests (>=2.26.0) ; extra == 'mypy'",
      "types-setuptools (>=57.4.0) ; extra == 'mypy'",
      "authlib (>=0.14.0) ; extra == 'oidc'",
      "jaeger-client (>=4.0.0) ; extra == 'opentracing'",
      "opentracing (>=2.2.0) ; extra == 'opentracing'",
      "psycopg2 (>=2.8) ; (platform_python_implementation != \"PyPy\") and extra == 'postgres'",
      "psycopg2cffi (>=2.8) ; (platform_python_implementation == \"PyPy\") and extra == 'postgres'",
      "psycopg2cffi-compat (==1.1) ; (platform_python_implementation == \"PyPy\") and extra == 'postgres'",
      "txredisapi (>=1.4.7) ; extra == 'redis'",
      "hiredis ; extra == 'redis'",
      "pysaml2 (>=4.5.0) ; extra == 'saml2'",
      "sentry-sdk (>=0.7.2) ; extra == 'sentry'",
      "systemd-python (>=231) ; extra == 'systemd'",
      "parameterized (>=0.7.0) ; extra == 'test'",
      "lxml (>=3.5.0) ; extra == 'url_preview'"
    ],
    "requires_python": "~=3.6",
    "summary": "Reference homeserver for the Matrix decentralised comms protocol",
    "version": "1.48.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17476749,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ce3638eb4065cc557299e59c648c7c244b973cd0dd41ae620454d87fe724981",
        "md5": "5da6420e1f14012c89be7184ec9a0d1b",
        "sha256": "88b9129642ead1b1b787a104827bf582e306d85d2ebf36e7335c9d9a6900bd18"
      },
      "downloads": -1,
      "filename": "matrix_synapse-1.48.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5da6420e1f14012c89be7184ec9a0d1b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.6",
      "size": 2086521,
      "upload_time": "2021-11-30T13:54:00",
      "upload_time_iso_8601": "2021-11-30T13:54:00.319059Z",
      "url": "https://files.pythonhosted.org/packages/5c/e3/638eb4065cc557299e59c648c7c244b973cd0dd41ae620454d87fe724981/matrix_synapse-1.48.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c435c965886923ed13229842a5be260729891728201d8948e9f2d5af6fe71faa",
        "md5": "475c0b4adb417f924ca472178c590c0d",
        "sha256": "1b4f556df0bd999d3eb212c744dbad47dd5445ec2f2d6e25e2541a56bb1961a4"
      },
      "downloads": -1,
      "filename": "matrix-synapse-1.48.0.tar.gz",
      "has_sig": false,
      "md5_digest": "475c0b4adb417f924ca472178c590c0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 2612759,
      "upload_time": "2021-11-30T13:54:03",
      "upload_time_iso_8601": "2021-11-30T13:54:03.152326Z",
      "url": "https://files.pythonhosted.org/packages/c4/35/c965886923ed13229842a5be260729891728201d8948e9f2d5af6fe71faa/matrix-synapse-1.48.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2022-41952"
      ],
      "details": "### Impact\n\nSynapse before 1.52.0 with URL preview functionality enabled will attempt to generate URL previews for media stream URLs without properly limiting connection time. Connections will only be terminated after `max_spider_size` (default: 10M) bytes have been downloaded, which can in some cases lead to long-lived connections towards the streaming media server (for instance, Icecast).\n\nThis can cause excessive traffic and connections toward such servers if their stream URL is, for example, posted to a large room with many Synapse instances with URL preview enabled.\n\n### Patches\n1.52.0 implements a timeout mechanism which will terminate URL preview connections after 30 seconds. Since generating URL previews for media streams is not supported and always fails, 1.53.0 additionally implements an allow list for content types for which Synapse will even attempt to generate a URL preview.\n\nWe recommend upgrading to 1.53.0 to fully resolve the issue.\n\n### Workarounds\nTurn off URL preview functionality by setting `url_preview_enabled: false` in the Synapse configuration file.\n\n### References\n- Patch (timeout): https://github.com/matrix-org/synapse/pull/11784\n- Patch (content type allow list): https://github.com/matrix-org/synapse/pull/11936\n\n### For more information\nIf you have any questions or comments about this advisory, e-mail us at security@matrix.org.\n",
      "fixed_in": [
        "1.53.0"
      ],
      "id": "GHSA-4822-jvwx-w47h",
      "link": "https://osv.dev/vulnerability/GHSA-4822-jvwx-w47h",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-31052"
      ],
      "details": "### Impact\n\nURL previews of some web pages can exhaust the available stack space for the Synapse process due to unbounded recursion.\nThis is sometimes recoverable and leads to an error for the request causing the problem, but in other cases the Synapse process may crash altogether.\n\nIt is possible to exploit this maliciously, either by malicious users on the homeserver, or by remote users sending URLs that a local user's client may automatically request a URL preview for.\nRemote users are not able to exploit this directly, because [the URL preview endpoint is authenticated](https://spec.matrix.org/v1.2/client-server-api/#get_matrixmediav3preview_url).\n\n### Am I affected?\n\n* deployments with `url_preview_enabled: false` set in configuration are not affected.\n* deployments with `url_preview_enabled: true` set in configuration **are** affected.\n* deployments with no configuration value set for `url_preview_enabled` are not affected, because the default is `false`.\n\n### Patches\n\nAdministrators of homeservers with URL previews enabled are advised to upgrade to v1.61.1 or higher.\n\n### Workarounds\n\n* URL previews can be disabled in the configuration file by setting `url_preview_enabled: false`.\n* Deployments using workers can choose to offload URL previews to one or more dedicated worker(s), ensuring that a process crash does not disrupt other functionality of Synapse.\n\n### For more information\n\nIf you have any questions or comments about this advisory, e-mail us at [security@matrix.org](mailto:security@matrix.org).\n",
      "fixed_in": [
        "1.61.1"
      ],
      "id": "GHSA-22p3-qrh9-cx32",
      "link": "https://osv.dev/vulnerability/GHSA-22p3-qrh9-cx32",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-31052",
        "GHSA-22p3-qrh9-cx32"
      ],
      "details": "Synapse is an open source home server implementation for the Matrix chat network. In versions prior to 1.61.1 URL previews of some web pages can exhaust the available stack space for the Synapse process due to unbounded recursion. This is sometimes recoverable and leads to an error for the request causing the problem, but in other cases the Synapse process may crash altogether. It is possible to exploit this maliciously, either by malicious users on the homeserver, or by remote users sending URLs that a local user's client may automatically request a URL preview for. Remote users are not able to exploit this directly, because the URL preview endpoint is authenticated. Deployments with `url_preview_enabled: false` set in configuration are not affected. Deployments with `url_preview_enabled: true` set in configuration **are** affected. Deployments with no configuration value set for `url_preview_enabled` are not affected, because the default is `false`. Administrators of homeservers with URL previews enabled are advised to upgrade to v1.61.1 or higher. Users unable to upgrade should set `url_preview_enabled` to false.",
      "fixed_in": [
        "1.61.1"
      ],
      "id": "PYSEC-2022-224",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-224",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-31152"
      ],
      "details": "### Impact\n\nThe Matrix specification specifies a list of [event authorization rules](https://spec.matrix.org/v1.3/rooms/v10/#authorization-rules) which must be checked when determining if an event should be accepted into a room.\n\nIn versions of Synapse up to and including v1.61, some of these rules are not correctly applied. An attacker could craft events which would be accepted by Synapse but not a spec-conformant server, potentially causing divergence in the room state between servers.\n\n### Patches\n\nAdministrators of homeservers with federation enabled are advised to upgrade to v1.62.0 or higher.\n\n### Workarounds\n\n * Federation can be disabled by setting [`federation_domain_whitelist`](https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#federation_domain_whitelist) to an empty list (`[]`).\n\n### References\n\n * https://github.com/matrix-org/synapse/pull/13087\n * https://github.com/matrix-org/synapse/pull/13088\n\n### For more information\n\nIf you have any questions or comments about this advisory, e-mail us at [security@matrix.org](mailto:security@matrix.org).",
      "fixed_in": [
        "1.62"
      ],
      "id": "GHSA-jhjh-776m-4765",
      "link": "https://osv.dev/vulnerability/GHSA-jhjh-776m-4765",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2022-31152",
        "GHSA-jhjh-776m-4765"
      ],
      "details": "Synapse is an open-source Matrix homeserver written and maintained by the Matrix.org Foundation. The Matrix specification specifies a list of [event authorization rules](https://spec.matrix.org/v1.2/rooms/v9/#authorization-rules) which must be checked when determining if an event should be accepted into a room. In versions of Synapse up to and including version 1.61.0, some of these rules are not correctly applied. An attacker could craft events which would be accepted by Synapse but not a spec-conformant server, potentially causing divergence in the room state between servers. Administrators of homeservers with federation enabled are advised to upgrade to version 1.62.0 or higher. Federation can be disabled by setting [`federation_domain_whitelist`](https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#federation_domain_whitelist) to an empty list (`[]`) as a workaround.",
      "fixed_in": [
        "1.62.0"
      ],
      "id": "PYSEC-2022-262",
      "link": "https://osv.dev/vulnerability/PYSEC-2022-262",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}