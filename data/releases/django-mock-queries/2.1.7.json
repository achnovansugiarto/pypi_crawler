{
  "info": {
    "author": "Phivos Stylianides",
    "author_email": "stphivos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Mocking",
      "Topic :: Software Development :: Testing :: Unit"
    ],
    "description": "[![Latest Version](https://img.shields.io/pypi/v/django_mock_queries.svg)](https://pypi.python.org/pypi/django_mock_queries)\n[![Build Status](https://travis-ci.org/stphivos/django-mock-queries.svg?branch=master)](https://travis-ci.org/stphivos/django-mock-queries)\n[![Code Coverage](https://codecov.io/github/stphivos/django-mock-queries/coverage.svg?branch=master)](https://codecov.io/github/stphivos/django-mock-queries?branch=master)\n[![Code Climate](https://codeclimate.com/github/stphivos/django-mock-queries/badges/gpa.svg)](https://codeclimate.com/github/stphivos/django-mock-queries)\n\n# Django Mock Queries\n\nA library for mocking Django queryset functions in memory for testing\n\n## Features\n\n* QuerySet style support for method chaining\n* Filtering with Q objects\n* Aggregates generation\n* CRUD functions\n* Field lookups\n* django-rest-framework serializer asserts\n\n## Examples\n\n```python\nfrom django.db.models import Avg, Q\nfrom django_mock_queries.query import MockSet, MockModel\n\nqs = MockSet(\n    MockModel(mock_name='john', email='john@gmail.com'),\n    MockModel(mock_name='jeff', email='jeff@hotmail.com'),\n    MockModel(mock_name='bill', email='bill@gmail.com'),\n)\n\nprint [x for x in qs.all().filter(email__icontains='gmail.com').select_related('address')]\n# Outputs: [john, bill]\n\nqs = MockSet(\n    MockModel(mock_name='model s', msrp=70000),\n    MockModel(mock_name='model x', msrp=80000),\n    MockModel(mock_name='model 3', msrp=35000),\n)\n\nprint qs.all().aggregate(Avg('msrp'))\n# Outputs: {'msrp__avg': 61666}\n\nqs = MockSet(\n    MockModel(mock_name='model x', make='tesla', country='usa'),\n    MockModel(mock_name='s-class', make='mercedes', country='germany'),\n    MockModel(mock_name='s90', make='volvo', country='sweden'),\n)\n\nprint [x for x in qs.all().filter(Q(make__iexact='tesla') | Q(country__iexact='germany'))]\n# Outputs: [model x, s-class]\n\nqs = MockSet(cls=MockModel)\nprint qs.create(mock_name='my_object', foo='1', bar='a')\n# Outputs: my_object\n\nprint [x for x in qs]\n# Outputs: [my_object]\n```\n\n### Test function that uses Django QuerySet:\n\n```python\n\"\"\"\nFunction that queries active users\n\"\"\"\ndef active_users(self):\n    return User.objects.filter(is_active=True).all()\n\n\"\"\"\nTest function applies expected filters by patching Django's user model Manager or Queryset with a MockSet\n\"\"\"\nfrom mock import patch\nfrom django_mock_queries.query import MockSet, MockModel\n\n\nclass TestApi(TestCase):\n    users = MockSet()\n    user_objects = patch('django.contrib.auth.models.User.objects', users)\n\n    @user_objects\n    def test_api_active_users_filters_by_is_active_true(self):\n        self.users.add(\n        \tMockModel(mock_name='active user', is_active=True),\n        \tMockModel(mock_name='inactive user', is_active=False)\n        )\n\n        for x in self.api.active_users():\n        \tassert x.is_active\n```\n\n### Test django-rest-framework model serializer:\n\n```python\n\"\"\"\nCar model serializer that includes a nested serializer and a method field\n\"\"\"\nclass CarSerializer(serializers.ModelSerializer):\n    make = ManufacturerSerializer()\n    speed = serializers.SerializerMethodField()\n\n    def get_speed(self, obj):\n        return obj.format_speed()\n\n    class Meta:\n        model = Car\n        fields = ('id', 'make', 'model', 'speed',)\n\n\"\"\"\nTest serializer returns fields with expected values and mock the result of nested serializer for field make\n\"\"\"\ndef test_car_serializer_fields(self):\n    car = Car(id=1, make=Manufacturer(id=1, name='vw'), model='golf', speed=300)\n\n    values = {\n        'id': car.id,\n        'model': car.model,\n        'speed': car.formatted_speed(),\n    }\n\n    assert_serializer(CarSerializer) \\\n        .instance(car) \\\n        .returns('id', 'make', 'model', 'speed') \\\n        .values(**values) \\\n        .mocks('make') \\\n        .run()\n```\n\n### Full Example\nThere is a full Django application in the `examples/users` folder. It shows how\nto configure `django_mock_queries` in your tests and run them with or without\nsetting up a Django database. Running the mock tests without a database can be\nmuch faster when your Django application has a lot of database migrations.\n\nTo run your Django tests without a database, add a new settings file, and call\n`monkey_patch_test_db()`. Use a wildcard import to get all the regular settings\nas well.\n\n```python\n# settings_mocked.py\nfrom django_mock_queries.mocks import monkey_patch_test_db\n\nfrom users.settings import *\n\nmonkey_patch_test_db()\n```\n\nThen run your Django tests with the new settings file:\n\n    ./manage.py test --settings=users.settings_mocked\n\nHere's the pytest equivalent:\n\n    pytest --ds=users.settings_mocked\n\nThat will run your tests without setting up a test database. All of your tests\nthat use Django mock queries should run fine, but what about the tests that\nreally need a database?\n\n    ERROR: test_create (examples.users.analytics.tests.TestApi)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"/.../examples/users/analytics/tests.py\", line 28, in test_create\n        start_count = User.objects.count()\n      [...]\n    NotSupportedError: Mock database tried to execute SQL for User model.\n\nIf you want to run your tests without a database, you need to tell Django\nto skip the tests that need a database. You can do that by putting a skip\ndecorator on the test classes or test methods that need a database.\n\n```python\n@skipIfDBFeature('is_mocked')\nclass TestApi(TestCase):\n    def test_create(self):\n        start_count = User.objects.count()\n\n        User.objects.create(username='bob')\n        final_count = User.objects.count()\n\n        self.assertEqual(start_count + 1, final_count)\n```\n\n## Installation\n\n```bash\npip install django_mock_queries\n```\n\n## Contributing\n\nAnything missing or not functioning correctly? PRs are always welcome! Otherwise, you can create an issue so someone else does it when time allows.\n\nYou can follow these guidelines:\n\n* Fork the repo from this page\n* Clone your fork:\n```bash\ngit clone https://github.com/{your-username}/django-mock-queries.git\ncd django-mock-queries\ngit checkout -b feature/your_cool_feature\n```\n* Implement feature/fix\n* Add/modify relevant tests\n* Run tox to verify all tests and flake8 quality checks pass\n```bash\ntox\n```\n* Commit and push local branch to your origin\n```bash\ngit commit . -m \"New cool feature does this\"\ngit push -u origin HEAD\n```\n* Create pull request\n\n## TODO\n\n* Add docs as a service like readthedocs with examples for every feature\n* Add support for missing QuerySet methods/Field lookups/Aggregation functions:\n    * Methods that return new QuerySets: annotate, reverse, none, extra, raw\n\n    * Methods that do not return QuerySets: bulk_create, in_bulk, as_manager\n\n    * Field lookups: search\n\n    * Aggregation functions: StdDev, Variance",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stphivos/django-mock-queries",
    "keywords": "django orm mocking unit-testing tdd",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mock-queries",
    "package_url": "https://pypi.org/project/django-mock-queries/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mock-queries/",
    "project_urls": {
      "Homepage": "https://github.com/stphivos/django-mock-queries"
    },
    "release_url": "https://pypi.org/project/django-mock-queries/2.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A django library for mocking queryset functions in memory for testing",
    "version": "2.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11432040,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0241b06dc41678a0b33d9cdfbf534f0ed4e903db4b851d7822a0b85bed43e651",
        "md5": "7341db60bf2f391474c8d5ba29b46a7c",
        "sha256": "7ee3f34752e8131479924ea6952fe37c4106cc18e6fc3e5e9b28b333eeda10b3"
      },
      "downloads": -1,
      "filename": "django_mock_queries-2.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "7341db60bf2f391474c8d5ba29b46a7c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19806,
      "upload_time": "2021-09-12T22:35:01",
      "upload_time_iso_8601": "2021-09-12T22:35:01.835238Z",
      "url": "https://files.pythonhosted.org/packages/02/41/b06dc41678a0b33d9cdfbf534f0ed4e903db4b851d7822a0b85bed43e651/django_mock_queries-2.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}