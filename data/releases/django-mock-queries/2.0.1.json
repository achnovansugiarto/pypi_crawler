{
  "info": {
    "author": "Phivos Stylianides",
    "author_email": "stphivos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|Latest Version| |Build Status| |Code Coverage| |Code Climate|\n\nDjango Mock Queries\n===================\n\nA library for mocking Django queryset functions in memory for testing\n\nFeatures\n--------\n\n-  QuerySet style support for method chaining\n-  Filtering with Q objects\n-  Aggregates generation\n-  CRUD functions\n-  Field lookups\n-  django-rest-framework serializer asserts\n\nExamples\n--------\n\n.. code:: python\n\n    from django.db.models import Avg, Q\n    from django_mock_queries.query import MockSet, MockModel\n\n    qs = MockSet(\n        MockModel(mock_name='john', email='john@gmail.com'),\n        MockModel(mock_name='jeff', email='jeff@hotmail.com'),\n        MockModel(mock_name='bill', email='bill@gmail.com'),\n    )\n\n    print [x for x in qs.all().filter(email__icontains='gmail.com').select_related('address')]\n    # Outputs: [john, bill]\n\n    qs = MockSet(\n        MockModel(mock_name='model s', msrp=70000),\n        MockModel(mock_name='model x', msrp=80000),\n        MockModel(mock_name='model 3', msrp=35000),\n    )\n\n    print qs.all().aggregate(Avg('msrp'))\n    # Outputs: {'msrp__avg': 61666}\n\n    qs = MockSet(\n        MockModel(mock_name='model x', make='tesla', country='usa'),\n        MockModel(mock_name='s-class', make='mercedes', country='germany'),\n        MockModel(mock_name='s90', make='volvo', country='sweden'),\n    )\n\n    print [x for x in qs.all().filter(Q(make__iexact='tesla') | Q(country__iexact='germany'))]\n    # Outputs: [model x, s-class]\n\n    qs = MockSet(cls=MockModel)\n    print qs.create(mock_name='my_object', foo='1', bar='a')\n    # Outputs: my_object\n\n    print [x for x in qs]\n    # Outputs: [my_object]\n\nTest function that uses Django QuerySet:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    \"\"\"\n    Function that queries active users\n    \"\"\"\n    def active_users(self):\n        return User.objects.filter(is_active=True).all()\n\n    \"\"\"\n    Test function applies expected filters by patching Django's user model Manager or Queryset with a MockSet\n    \"\"\"\n    from django_mock_queries.query import MockSet, MockModel\n\n\n    class TestApi(TestCase):\n        users = MockSet()\n        user_objects = patch('django.contrib.auth.models.User.objects', users)\n\n        @user_objects\n        def test_api_active_users_filters_by_is_active_true(self):\n            self.users.add(\n                MockModel(mock_name='active user', is_active=True),\n                MockModel(mock_name='inactive user', is_active=False)\n            )\n\n            for x in self.api.active_users():\n                assert x.is_active\n\nTest django-rest-framework model serializer:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    \"\"\"\n    Car model serializer that includes a nested serializer and a method field\n    \"\"\"\n    class CarSerializer(serializers.ModelSerializer):\n        make = ManufacturerSerializer()\n        speed = serializers.SerializerMethodField()\n\n        def get_speed(self, obj):\n            return obj.format_speed()\n\n        class Meta:\n            model = Car\n            fields = ('id', 'make', 'model', 'speed',)\n\n    \"\"\"\n    Test serializer returns fields with expected values and mock the result of nested serializer for field make\n    \"\"\"\n    def test_car_serializer_fields(self):\n        car = Car(id=1, make=Manufacturer(id=1, name='vw'), model='golf', speed=300)\n\n        values = {\n            'id': car.id,\n            'model': car.model,\n            'speed': car.formatted_speed(),\n        }\n\n        assert_serializer(CarSerializer) \\\n            .instance(car) \\\n            .returns('id', 'make', 'model', 'speed') \\\n            .values(**values) \\\n            .mocks('make') \\\n            .run()\n\nFull Example\n~~~~~~~~~~~~\n\nThere is a full Django application in the ``examples/users`` folder. It\nshows how to configure ``django_mock_queries`` in your tests and run\nthem with or without setting up a Django database. Running the mock\ntests without a database can be much faster when your Django application\nhas a lot of database migrations.\n\nTo run your Django tests without a database, add a new settings file,\nand call ``monkey_patch_test_db()``. Use a wildcard import to get all\nthe regular settings as well.\n\n.. code:: python\n\n    # settings_mocked.py\n    from django_mock_queries.mocks import monkey_patch_test_db\n\n    from users.settings import *\n\n    monkey_patch_test_db()\n\nThen run your Django tests with the new settings file:\n\n::\n\n    ./manage.py test --settings=users.settings_mocked\n\nHereâ€™s the pytest equivalent:\n\n::\n\n    pytest --ds=users.settings_mocked\n\nThat will run your tests without setting up a test database. All of your\ntests that use Django mock queries should run fine, but what about the\ntests that really need a database?\n\n::\n\n    ERROR: test_create (examples.users.analytics.tests.TestApi)\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n      File \"/.../examples/users/analytics/tests.py\", line 28, in test_create\n        start_count = User.objects.count()\n      [...]\n    NotSupportedError: Mock database tried to execute SQL for User model.\n\nIf you want to run your tests without a database, you need to tell\nDjango to skip the tests that need a database. You can do that by\nputting a skip decorator on the test classes or test methods that need a\ndatabase.\n\n.. code:: python\n\n    @skipIfDBFeature('is_mocked')\n    class TestApi(TestCase):\n        def test_create(self):\n            start_count = User.objects.count()\n\n            User.objects.create(username='bob')\n            final_count = User.objects.count()\n\n            self.assertEqual(start_count + 1, final_count)\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install django_mock_queries\n\nContributing\n------------\n\nAnything missing or not functioning correctly? PRs are always welcome!\nOtherwise, you can create an issue so someone else does it when time\nallows.\n\nYou can follow these guidelines:\n\n-  Fork the repo from this page\n-  Clone your fork:\n\n.. code:: bash\n\n    $ git clone https://github.com/{your-username}/django-mock-queries.git\n    $ cd django-mock-queries\n    $ git checkout -b feature/your_cool_feature\n\n-  Implement feature/fix\n-  Add/modify relevant tests\n-  Run tox to verify all tests and flake8 quality checks pass\n\n.. code:: bash\n\n    $ tox\n\n-  Commit and push local branch to your origin\n\n.. code:: bash\n\n    $ git commit . -m \"New cool feature does this\"\n    $ git push -u origin HEAD\n\n-  Create pull request\n\nTODO\n----\n\n-  Add docs as a service like readthedocs with examples for every\n   feature\n-  Add support for missing QuerySet methods/Field lookups/Aggregation\n   functions:\n\n   -  Methods that return new QuerySets: annotate, reverse, none, extra,\n      raw\n\n   -  Methods that do not return QuerySets: update_or_create,\n      bulk_create, in_bulk, as_manager\n\n   -  Field lookups: search\n\n   -  Aggregation functions: StdDev, Variance\n\n.. |Latest Version| image:: https://img.shields.io/pypi/v/django_mock_queries.svg\n   :target: https://pypi.python.org/pypi/django_mock_queries\n.. |Build Status| image:: https://travis-ci.org/stphivos/django-mock-queries.svg?branch=master\n   :target: https://travis-ci.org/stphivos/django-mock-queries\n.. |Code Coverage| image:: https://codecov.io/github/stphivos/django-mock-queries/coverage.svg?branch=master\n   :target: https://codecov.io/github/stphivos/django-mock-queries?branch=master\n.. |Code Climate| image:: https://codeclimate.com/github/stphivos/django-mock-queries/badges/gpa.svg\n   :target: https://codeclimate.com/github/stphivos/django-mock-queries\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stphivos/django-mock-queries",
    "keywords": "django orm mocking unit-testing tdd",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mock-queries",
    "package_url": "https://pypi.org/project/django-mock-queries/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mock-queries/",
    "project_urls": {
      "Homepage": "https://github.com/stphivos/django-mock-queries"
    },
    "release_url": "https://pypi.org/project/django-mock-queries/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A django library for mocking queryset functions in memory for testing",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11432040,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3298b1d168a72a0fb1d16b405f04a21a46307fc17373199b82cccdff14594c48",
        "md5": "3a8b332f743f7a91ad8b27f6d6521de1",
        "sha256": "aad1cebf5a024df9fa0b32f5cb75f5d7a2e4becb2143fba3d67f3d738164c4e9"
      },
      "downloads": -1,
      "filename": "django_mock_queries-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a8b332f743f7a91ad8b27f6d6521de1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21278,
      "upload_time": "2019-04-27T15:14:41",
      "upload_time_iso_8601": "2019-04-27T15:14:41.550850Z",
      "url": "https://files.pythonhosted.org/packages/32/98/b1d168a72a0fb1d16b405f04a21a46307fc17373199b82cccdff14594c48/django_mock_queries-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ed2aa8a2e6093be6e12ced48bb26840a67c557fb004d22e5e1d1aac054a2b93",
        "md5": "7c3cd5dc82e76a732ffe28d292455fbb",
        "sha256": "fffa7e8917d15f3731147b830e294b7f24a36c3460984508aedaa3903db785a4"
      },
      "downloads": -1,
      "filename": "django_mock_queries-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c3cd5dc82e76a732ffe28d292455fbb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17859,
      "upload_time": "2018-05-18T18:24:37",
      "upload_time_iso_8601": "2018-05-18T18:24:37.783257Z",
      "url": "https://files.pythonhosted.org/packages/1e/d2/aa8a2e6093be6e12ced48bb26840a67c557fb004d22e5e1d1aac054a2b93/django_mock_queries-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}