{
  "info": {
    "author": "Caleb Case, Andrew Kesterson",
    "author_email": "calebcase@gmail.com, andrew@aklabs.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "dpath-python\n============\n\n|PyPI|\n|Build Status|\n|Gitter|\n\nA python library for accessing and searching dictionaries via\n/slashed/paths ala xpath\n\nBasically it lets you glob over a dictionary as if it were a filesystem.\nIt allows you to specify globs (ala the bash eglob syntax, through some\nadvanced fnmatch.fnmatch magic) to access dictionary elements, and\nprovides some facility for filtering those results.\n\nsdists are available on pypi: http://pypi.python.org/pypi/dpath\n\nInstalling\n==========\n\nThe best way to install dpath is via easy\\_install or pip.\n\n::\n\n    easy_install dpath\n    pip install dpath\n\nUsing Dpath\n===========\n\n.. code-block:: python\n\n    import dpath.util\n\nSeparators\n==========\n\nAll of the functions in this library (except 'merge') accept a\n'separator' argument, which is the character that should separate path\ncomponents. The default is '/', but you can set it to whatever you want.\n\nSearching\n=========\n\nSuppose we have a dictionary like this:\n\n.. code-block:: python\n\n    x = {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": [],\n                \"d\": ['red', 'buggy', 'bumpers'],\n            }\n        }\n    }\n\n... And we want to ask a simple question, like \"Get me the value of the\nkey '43' in the 'b' hash which is in the 'a' hash\". That's easy.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.get)\n    Help on function get in module dpath.util:\n\n    get(obj, glob, separator='/')\n        Given an object which contains only one possible match for the given glob,\n        return the value for the leaf matching the given glob.\n\n        If more than one leaf matches the glob, ValueError is raised. If the glob is\n        not found, KeyError is raised.\n\n    >>> dpath.util.get(x, '/a/b/43')\n    30\n\nOr you could say \"Give me a new dictionary with the values of all\nelements in ``x['a']['b']`` where the key is equal to the glob ``'[cd]'``. Okay.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.search)\n    Help on function search in module dpath.util:\n\n    search(obj, glob, yielded=False)\n    Given a path glob, return a dictionary containing all keys\n    that matched the given glob.\n\n    If 'yielded' is true, then a dictionary will not be returned.\n    Instead tuples will be yielded in the form of (path, value) for\n    every element in the document that matched the glob.\n\n... Sounds easy!\n\n.. code-block:: pycon\n\n    >>> result = dpath.util.search(x, \"a/b/[cd]\")\n    >>> print(json.dumps(result, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"c\": [],\n                \"d\": [\n                    \"red\",\n                    \"buggy\",\n                    \"bumpers\"\n                ]\n            }\n        }\n    }\n\n... Wow that was easy. What if I want to iterate over the results, and\nnot get a merged view?\n\n.. code-block:: pycon\n\n    >>> for x in dpath.util.search(x, \"a/b/[cd]\", yielded=True): print(x)\n    ...\n    ('a/b/c', [])\n    ('a/b/d', ['red', 'buggy', 'bumpers'])\n\n... Or what if I want to just get all the values back for the glob? I\ndon't care about the paths they were found at:\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.values)\n    Help on function values in module dpath.util:\n\n    values(obj, glob, separator='/', afilter=None, dirs=True)\n    Given an object and a path glob, return an array of all values which match\n    the glob. The arguments to this function are identical to those of search(),\n    and it is primarily a shorthand for a list comprehension over a yielded\n    search call.\n\n    >>> dpath.util.values(x, '/a/b/d/*')\n    ['red', 'buggy', 'bumpers']\n\nExample: Setting existing keys\n==============================\n\nLet's use that same dictionary, and set keys like 'a/b/[cd]' to the\nvalue 'Waffles'.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.set)\n    Help on function set in module dpath.util:\n\n    set(obj, glob, value)\n    Given a path glob, set all existing elements in the document\n    to the given value. Returns the number of elements changed.\n\n    >>> dpath.util.set(x, 'a/b/[cd]', 'Waffles')\n    2\n    >>> print(json.dumps(x, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\"\n            }\n        }\n    }\n\nExample: Adding new keys\n========================\n\nLet's make a new key with the path 'a/b/e/f/g', set it to \"Roffle\". This\nbehaves like 'mkdir -p' in that it makes all the intermediate paths\nnecessary to get to the terminus.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.new)\n    Help on function new in module dpath.util:\n\n    new(obj, path, value)\n    Set the element at the terminus of path to value, and create\n    it if it does not exist (as opposed to 'set' that can only\n    change existing keys).\n\n    path will NOT be treated like a glob. If it has globbing\n    characters in it, they will become part of the resulting\n    keys\n\n    >>> dpath.util.new(x, 'a/b/e/f/g', \"Roffle\")\n    >>> print(json.dumps(x, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\",\n                \"e\": {\n                    \"f\": {\n                        \"g\": \"Roffle\"\n                    }\n                }\n            }\n        }\n    }\n\nThis works the way we expect with lists, as well. If you have a list\nobject and set index 10 of that list object, it will grow the list\nobject with None entries in order to make it big enough:\n\n.. code-block:: pycon\n\n    >>> dpath.util.new(x, 'a/b/e/f/h', [])\n    >>> dpath.util.new(x, 'a/b/e/f/h/13', 'Wow this is a big array, it sure is lonely in here by myself')\n    >>> print(json.dumps(x, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\",\n                \"e\": {\n                    \"f\": {\n                        \"g\": \"Roffle\",\n                        \"h\": [\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            \"Wow this is a big array, it sure is lonely in here by myself\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n\nHandy!\n\nExample: Deleting Existing Keys\n===============================\n\nTo delete keys in an object, use dpath.util.delete, which accepts the same globbing syntax as the other methods.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.delete)\n\n    delete(obj, glob, separator='/', afilter=None):\n        Given a path glob, delete all elements that match the glob.\n\n        Returns the number of deleted objects. Raises PathNotFound if\n        no paths are found to delete.\n\nExample: Merging\n================\n\nAlso, check out dpath.util.merge. The python dict update() method is\ngreat and all but doesn't handle merging dictionaries deeply. This one\ndoes.\n\n.. code-block:: pycon\n\n    >>> help(dpath.util.merge)\n    Help on function merge in module dpath.util:\n\n    merge(dst, src, afilter=None, flags=4, _path='')\n        Merge source into destination. Like dict.update() but performs\n        deep merging.\n\n        flags is an OR'ed combination of MERGE_ADDITIVE, MERGE_REPLACE\n        MERGE_TYPESAFE.\n            * MERGE_ADDITIVE : List objects are combined onto one long\n              list (NOT a set). This is the default flag.\n            * MERGE_REPLACE : Instead of combining list objects, when\n              2 list objects are at an equal depth of merge, replace\n              the destination with the source.\n            * MERGE_TYPESAFE : When 2 keys at equal levels are of different\n              types, raise a TypeError exception. By default, the source\n              replaces the destination in this situation.\n\n    >>> y = {'a': {'b': { 'e': {'f': {'h': [None, 0, 1, None, 13, 14]}}}, 'c': 'RoffleWaffles'}}\n    >>> print(json.dumps(y, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"e\": {\n                    \"f\": {\n                        \"h\": [\n                            null,\n                            0,\n                            1,\n                            null,\n                            13,\n                            14\n                        ]\n                    }\n                }\n            },\n            \"c\": \"RoffleWaffles\"\n        }\n    }\n    >>> dpath.util.merge(x, y)\n    >>> print(json.dumps(x, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\",\n                \"e\": {\n                    \"f\": {\n                        \"g\": \"Roffle\",\n                        \"h\": [\n                            null,\n                            0,\n                            1,\n                            null,\n                            13,\n                            14,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            null,\n                            \"Wow this is a big array, it sure is lonely in here by myself\"\n                        ]\n                    }\n                }\n            },\n            \"c\": \"RoffleWaffles\"\n        }\n    }\n\nNow that's handy. You shouldn't try to use this as a replacement for the\ndeepcopy method, however - while merge does create new dict and list\nobjects inside the target, the terminus objects (strings and ints) are\nnot copied, they are just re-referenced in the merged object.\n\nFiltering\n=========\n\nAll of the methods in this library (except new()) support a 'afilter'\nargument. This can be set to a function that will return True or False\nto say 'yes include that value in my result set' or 'no don't include\nit'.\n\nFiltering functions receive every terminus node in a search - e.g.,\nanything that is not a dict or a list, at the very end of the path. For\neach value, they return True to include that value in the result set, or\nFalse to exclude it.\n\nConsider this example. Given the source dictionary, we want to find ALL\nkeys inside it, but we only really want the ones that contain \"ffle\" in\nthem:\n\n.. code-block:: pycon\n\n    >>> print(json.dumps(x, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"3\": 2,\n                \"43\": 30,\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\",\n                \"e\": {\n                    \"f\": {\n                        \"g\": \"Roffle\"\n                    }\n                }\n            }\n        }\n    }\n    >>> def afilter(x):\n    ...     if \"ffle\" in str(x):\n    ...             return True\n    ...     return False\n    ...\n    >>> result = dpath.util.search(x, '**', afilter=afilter)\n    >>> print(json.dumps(result, indent=4, sort_keys=True))\n    {\n        \"a\": {\n            \"b\": {\n                \"c\": \"Waffles\",\n                \"d\": \"Waffles\",\n                \"e\": {\n                    \"f\": {\n                      \"g\": \"Roffle\"\n                    }\n                }\n            }\n        }\n    }\n\nObviously filtering functions can perform more advanced tests (regular\nexpressions, etc etc).\n\nKey Names\n=========\n\nBy default, dpath only understands dictionary keys that are integers or\nstrings. String keys must be non-empty. You can change this behavior by\nsetting a library-wide dpath option:\n\n.. code-block:: python\n\n    import dpath.options\n    dpath.options.ALLOW_EMPTY_STRING_KEYS = True\n\nAgain, by default, this behavior is OFF, and empty string keys will\nresult in ``dpath.exceptions.InvalidKeyName`` being thrown.\n\nSeparator got you down? Use lists as paths\n==========================================\n\nThe default behavior in dpath is to assume that the path given is a string, which must be tokenized by splitting at the separator to yield a distinct set of path components against which dictionary keys can be individually glob tested. However, this presents a problem when you want to use paths that have a separator in their name; the tokenizer cannot properly understand what you mean by '/a/b/c' if it is possible for '/' to exist as a valid character in a key name.\n\nTo get around this, you can sidestep the whole \"filesystem path\" style, and abandon the separator entirely, by using lists as paths. All of the methods in dpath.util.* support the use of a list instead of a string as a path. So for example:\n\n.. code-block:: python\n\n   >>> x = { 'a': {'b/c': 0}}\n   >>> dpath.util.get(['a', 'b/c'])\n   0\n\ndpath.segments : The Low-Level Backend\n======================================\n\ndpath.util is where you want to spend your time: this library has the friendly\nfunctions that will understand simple string globs, afilter functions, etc.\n\ndpath.segments is the backend pathing library. It passes around tuples of path\ncomponents instead of string globs.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/dpath.svg?style=flat\n    :target: https://pypi.python.org/pypi/dpath/\n    :alt: PyPI: Latest Version\n\n.. |Build Status| image:: https://github.com/dpath-maintainers/dpath-python/actions/workflows/tests.yml/badge.svg\n   :target: https://github.com/dpath-maintainers/dpath-python/actions/workflows/tests.yml\n\n.. |Gitter| image:: https://badges.gitter.im/dpath-python/chat.svg\n   :target: https://gitter.im/dpath-python/chat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\n   :alt: Gitter\n\nContributors\n============\n\nWe would like to thank the community for their interest and involvement. You\nhave all made this project significantly better than the sum of its parts, and\nyour continued feedback makes it better every day. Thank you so much!\n\nThe following authors have contributed to this project, in varying capacities:\n\n+ Caleb Case <calebcase@gmail.com>\n+ Andrew Kesterson <andrew@aklabs.net>\n+ Marc Abramowitz <marc@marc-abramowitz.com>\n+ Richard Han <xhh2a@berkeley.edu>\n+ Stanislav Ochotnicky <sochotnicky@redhat.com>\n+ Misja Hoebe <misja@conversify.com>\n+ Gagandeep Singh <gagandeep.2020@gmail.com>\n+ Alan Gibson <alan.gibson@gmail.com>\n\nAnd many others! If we've missed you please open an PR and add your name here.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/akesterson/dpath-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpath",
    "package_url": "https://pypi.org/project/dpath/",
    "platform": "",
    "project_url": "https://pypi.org/project/dpath/",
    "project_urls": {
      "Homepage": "https://www.github.com/akesterson/dpath-python"
    },
    "release_url": "https://pypi.org/project/dpath/2.0.5/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Filesystem-like pathing and searching for dictionaries",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17443730,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03978f2356672a02753a4e8f77c4d4b23afcf54c2220eb80ee0438a7ebea3280",
        "md5": "fee028eab50f12911012cb674848d642",
        "sha256": "e7813fd8a9dd0d4c7cd4014533ce955eff712bcb2e8189be79bb893890a9db01"
      },
      "downloads": -1,
      "filename": "dpath-2.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fee028eab50f12911012cb674848d642",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 15141,
      "upload_time": "2021-09-12T17:12:53",
      "upload_time_iso_8601": "2021-09-12T17:12:53.445239Z",
      "url": "https://files.pythonhosted.org/packages/03/97/8f2356672a02753a4e8f77c4d4b23afcf54c2220eb80ee0438a7ebea3280/dpath-2.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0d2219bd67dc31eeb14be02bea9a23d0b16a0236f45504c6963f675c80a8d8c",
        "md5": "80395bf1b38328082e28453d54afa24a",
        "sha256": "ef74321b01479653c812fee69c53922364614d266a8e804d22058c5c02e5674e"
      },
      "downloads": -1,
      "filename": "dpath-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "80395bf1b38328082e28453d54afa24a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 22052,
      "upload_time": "2021-09-12T17:12:55",
      "upload_time_iso_8601": "2021-09-12T17:12:55.024425Z",
      "url": "https://files.pythonhosted.org/packages/d0/d2/219bd67dc31eeb14be02bea9a23d0b16a0236f45504c6963f675c80a8d8c/dpath-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}