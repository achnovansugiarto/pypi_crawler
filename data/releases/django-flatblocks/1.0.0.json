{
  "info": {
    "author": "Horst Gutmann, Curtis Maloney",
    "author_email": "curtis@tinbrain.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-flatblocks\n=================\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\n.. image:: https://github.com/jazzband/django-flatblocks/workflows/Test/badge.svg\n   :target: https://github.com/jazzband/django-flatblocks/actions\n   :alt: GitHub Actions\n\n.. image:: https://codecov.io/gh/jazzband/django-flatblocks/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/jazzband/django-flatblocks\n\ndjango-flatblocks is a simple application for handling small text-blocks on\nwebsites. Think about it like ``django.contrib.flatpages`` just not for a\nwhole page but for only parts of it, like an information text describing what\nyou can do on a site.\n\nInstallation\n------------\n\nProbably the easiest way to install this application is to first run\n``pip install django-flatblocks``.  Once this step is complete add\n``\"flatblocks\"`` to your ``INSTALLED_APPS`` setting in your ``settings.py``\nfile and run ``python manage.py syncdb`` to update your database.\n\n\nUpgrading\n---------\n\ndjango-flatblocks uses `South`_ for handling data and schema migrations\nstarting with version 0.6.0, so the South-typical update path applies here.\n\nIf you're upgrading from a 0.5.x version or earlier you will have to migrate\nin 3 steps:\n\n1. Install south.\n\n2. Migrate your database to the first version of flatblocks using South:\n\n   .. code-block:: sh\n\n      ./manage.py migrate flatblocks 0001 --fake\n\n3. Then migrate your database to the latest version of flatblocks' database\n   and data structure:\n\n   .. code-block:: sh\n\n      ./manage.py migrate flatblocks\n\nUsage\n-----\n\nOnce you've created some instances of the ``flatblocks.models.FlatBlock``\nmodel, you can load it it using the ``flatblocks`` templatetag-library:\n\n.. code-block:: html+django\n\n    {% load flatblocks %}\n\n    <html>\n        <head>\n            <!-- ... -->\n        </head>\n        <body>\n            <div id=\"page\">\n                <div id=\"main\">\n                    <!-- ... -->\n                </div>\n                <div id=\"sidebar\">\n                    {% flatblock \"page.info\" %}\n                </div>\n            </div>\n        </body>\n    </html>\n\nThis way you can display a text block with the name 'page.info'. If you\nhave the name of a block in a template variable, leave out the quotes.\n\nAdditionally you can also specify which template should be used to render the\nflatblock:\n\n.. code-block:: django\n\n    {% flatblock \"page.info\" using=\"my_template.html\" %}\n    <!-- -->\n    {% flatblock \"page.about\" using=\"my_template.html\" %}\n\nIf you want to simply output the value of the ``content`` field of a flatblock\nwithout using any template, you can use either options:\n\n.. code-block:: django\n\n    {% flatblock \"page.info\" using=False %}\n\nor\n\n.. code-block:: django\n\n    {% plain_flatblock \"page.info\" %}\n\nAs with the slug of the flatblock also with the template name you have the\nchoice of using the literal name of the template or pass it to the templatetag\nas a variable.\n\nThe content of a flatblock (as well as its header) can also be evaluated as a\nfull-fledged Django template:\n\n.. code-block:: django\n\n    {% flatblock \"page.info\" evaluated=True %}\n\nThis also works with the other parameters like the custom template and with\nthe ``plain_flatblock`` templatetag:\n\n.. code-block:: django\n\n    {% flatblock \"page.info\" evaluated=True using=\"my_template.html\" %}\n    <!-- -->\n    {% plain_flatblock \"page.about\" evaluated=True %}\n\n\nedit-view\n---------\n\nWith ``flatblocks.views.edit`` django-flatblocks offers a simple view to edit\nyour flatblocks from your frontend. To use it simply include it in your\nURLconf and create a ``flatblocks/edit.html`` template.\n\nBy default the view doesn't do any permission checking, so you should decorate\nit accordingly in your URLconf:\n\n.. code-block:: python\n\n    from flatblocks.views import edit\n    from django.contrib.auth.decorators import login_required\n\n    # ...\n\n    urlpatterns = pattern('',\n        url(r'^flatblocks/(?P<pk>\\d+)/edit/$', login_required(edit),\n            name='flatblocks-edit'),\n        # ...\n        )\n\nThe template can operate on following variables:\n\n* ``form``\n* ``flatblock``\n* ``origin`` (the URL of the previous page)\n\nAdditionally the view offers some basic customization hooks via these keyword\narguments:\n\n``template_name``\n    Name of the template to be used for rendering this view. By default\n    ``flatblocks/edit.html`` is used.\n\n``success_url``\n    After successfully editing a flatblock the view will redirect the user to\n    the URL specified here. By default the view will try to determine the last\n    visited page before entering the edit-view (which is normally a page where\n    the flatblock is used) and redirect the user back there.\n\n``modelform_class``\n    If you want to use a customized ModelForm class for flatblocks you can\n    specify it here.\n\n``permission_check``\n    This argument lets you specify a callback function to do some\n    flatblock-specific permission checking. Such a function could look like\n    this:\n\n    .. code-block:: python\n\n        def my_permcheck(request, flatblock):\n            if request.user.is_staff or flatblock.slug == 'free_for_all':\n                return True\n            return HttpResponseRedirect('/')\n\n    With this permission callback set, a user that is not a staff-user is not\n    allowed to edit this view unless it's the \"free_for_all\" block. If these\n    criteria are not met, the user is redirected to the root URL of the page.\n\n    The contract here is pretty simple. The permission callback should return\n    ``False``, if the user should receive a 403 message when trying to edit\n    this link. If the function returns an instance of ``HttpResponse`` the\n    view will proceed from the assumption that your view already did\n    everything there is to do and return that response-object. Any other\n    return value tells the view that the permissions are OK for the current\n    user and that it should proceed.\n\n\nHistory\n-------\n\nSince this application targets use-cases that are basically applicable to\nmost web-projects out there, there are tons of solutions similar to this one.\nIn fact, this app is a fork originally from `django-chunks`_ developed by\nClint Ecker.\n\nIn November 2008 Kevin Fricovsky created the `original fork`_ in order to add\nan additional \"active\"-flag to each chunk. That project was later on `forked\nby Peter Baumgardner`_ who removed that flag again and added a \"header\"-field\nin order to directly associate and optional title with each text block.\n\nThis fork aims now to add more features like variable chunks and also\nintegrate some of the features developed by H. Waara and S. Cranford in\nthe `django-better-chunks`_ fork (``django.contrib.site``- and i18n-support).\n\nReleases\n--------\n\n1.0.0:\n    * Add support for Django 2.2, 3.0, and 3.1.\n    * Add support for Python 3.6, 3.7, 3.8 and 3.9.\n    * Remove support for Django 1.7, 1.8, 1.9, 1.10, and 1.11.\n    * Remove support for Python 3.4 and 3.5.\n    * Move CI to GitHub Actions: https://github.com/jazzband/django-flatblocks/actions\n\n0.9.4:\n    * Drop Python 3.3 support.\n    * Add support for Django 1.11.\n\n0.9.3:\n    * Fixed Django 1.10 compatibility\n\n0.9.2:\n    * Fixed reading of README in setup.py\n    * Dropped Django 1.4 testing\n    * Tidied code with flake8 and isort\n    * Fix support for Django 1.7+\n    * Fix packaging to exclude tests module\n\n0.9.1:\n    * Dropped testing of Django 1.5 and 1.6\n    * Added migrations [Thanks Sergey Fedoseev]\n\n0.9:\n    NOTE: Major tag syntax changes!\n\n    * Modernised to use simple_tag and standard kwarg syntax.\n    * Removed caching - use {% cache %} tag instead\n\n0.8:\n    * Python 3 & Django 1.6 support\n\n0.7:\n    * Support for evaluated blocks offering access to context variables\n\n0.6:\n    * South support\n    * Installation and upgrade instructions\n\n    Note: This is primarily a transitional release to get South in here and\n    open this project up for some database changes in the future.\n\n0.5.1\n    * Removed rendering of the content attribute from the admin list by Michael Fladischer\n    * PyBabel compatibility by Michael Fladischer\n    * Fixed caching issue with memcache backend\n\n0.5\n    * Hungarian translation by Török Gábor\n    * Method added to demo edit form (#5) by Bill Evans\n\n0.4\n    * FlatBlock autocreation by Mikhail Korobov (can be enabled/disabled\n      with FLATBLOCKS\\_AUTOCREATE\\_STATIC\\_BLOCKS setting)\n    * Various fixes by Mikhail Korobov\n    * Fix by Henrik Heimbuerger for the manifest\n\n0.3.5\n    * Russian translation by Mikhail Korobov\n\n0.3.4\n    * Norwegian translation by Eivind Uggedal\n\n0.3.3\n    * FlatBlock.save should also accept optional kwargs.\n\n0.3.2\n    * All settings are now in the flatblocks.settings module\n\n0.3.1\n    * Fixes a bug with FlatBlock.save() failing to reset the cache\n    * Buildout integration for easier testing\n    * Example urls.py and flatblocks/edit.html-template\n\n0.3\n    * createflatblock and deleteflatblock commands\n    * On saving a flatblock its cache will be cleared\n    * As last argument of the template tag you can now also specify a template\n      name.\n0.2\n    * Translatable\n    * ``flatblocks.views.edit`` view for editing flatblocks\n0.1\n    Initial release\n\n.. _`original fork`: http://github.com/howiworkdaily/django-flatblock/\n.. _`django-chunks`: http://code.google.com/p/django-chunks/\n.. _`django-better-chunks`: http://bitbucket.org/hakanw/django-better-chunks/\n.. _`forked by Peter Baumgardner`: http://github.com/lincolnloop/django-flatblock/\n.. _`south`: http://south.aeracode.org/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/funkybob/django-flatblocks/",
    "keywords": "django apps",
    "license": "New BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-flatblocks",
    "package_url": "https://pypi.org/project/django-flatblocks/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-flatblocks/",
    "project_urls": {
      "Homepage": "http://github.com/funkybob/django-flatblocks/"
    },
    "release_url": "https://pypi.org/project/django-flatblocks/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-flatblocks acts like django.contrib.flatpages but for parts of a page; like an editable help box you want show alongside the main content.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9716417,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88d958103eb81fb34df007fea28111e9622c94e6fc2ee5abbad55fe950a513bb",
        "md5": "e6b2cef9a5437c29d7fcb93b0439cd4d",
        "sha256": "cdffa6f033a4534737993ec069a1a7d8c664fccfe78c3466ed259d0e908b27fe"
      },
      "downloads": -1,
      "filename": "django_flatblocks-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e6b2cef9a5437c29d7fcb93b0439cd4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23603,
      "upload_time": "2021-03-09T12:33:59",
      "upload_time_iso_8601": "2021-03-09T12:33:59.972165Z",
      "url": "https://files.pythonhosted.org/packages/88/d9/58103eb81fb34df007fea28111e9622c94e6fc2ee5abbad55fe950a513bb/django_flatblocks-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e778a0002b31cd0d86392aaed5d7aa9f9010209bb89828ee0e19d02dbc211b1",
        "md5": "179b6ed9b46e77cce8140bfc808589f0",
        "sha256": "ae44d678f16dc61ab2907a8f534bad5fe1c2e22033fef969d9816ee8ad40072d"
      },
      "downloads": -1,
      "filename": "django-flatblocks-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "179b6ed9b46e77cce8140bfc808589f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15251,
      "upload_time": "2021-03-09T12:33:42",
      "upload_time_iso_8601": "2021-03-09T12:33:42.988603Z",
      "url": "https://files.pythonhosted.org/packages/1e/77/8a0002b31cd0d86392aaed5d7aa9f9010209bb89828ee0e19d02dbc211b1/django-flatblocks-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}