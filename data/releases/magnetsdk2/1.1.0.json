{
  "info": {
    "author": "Niddel Corp.",
    "author_email": "contact@niddel.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Niddel Magnet v2 API Python SDK\n===============================\n\nA simple client that allows idiomatic access to the `Niddel Magnet v2\nREST API <https://api.niddel.com/v2>`__. Uses the wonderful\n`requests <http://docs.python-requests.org/>`__ package to perform the\nrequests.\n\nConfiguring Credentials\n-----------------------\n\nThere are a couple of ways to let the ``Connection`` object know which\nAPI key to use. The simplest one is to pass one explicitly to its\nconstructor:\n\n.. code:: python\n\n    from magnetsdk2 import Connection\n\n    conn = Connection(api_key=\"my secret API key\")\n\nIf an explicit API key is not provided, the ``Connection`` constructor\nwill look for one first in the ``MAGNETSDK_API_KEY`` environment\nvariable and failing that in the ``default`` profile of the\nconfiguration file.\n\nYou can add different API keys to a configuration file with different\nprofiles by creating a file called ``.magnetsdk/config`` under the\ncurrent user’s home directory. It is a basic Python configuration file\nthat looks like the following:\n\n::\n\n    [default]\n    api_key=my secret api key\n\n    [profile2]\n    api_key=another secret api key\n\nSo in this case you could create a connection to use either API key as\nfollows:\n\n.. code:: python\n\n    from magnetsdk2 import Connection\n\n    conn_default = Connection()                     # uses default profile\n    conn_profile2 = Connection(profile='profile2')  # use profile2 explicitly\n\nUsing the SDK\n-------------\n\nIt’s as simple as creating a ``Connection`` object and using it to\nperform queries. This small example shows you how to print out all of\nthe organizations the configured API key has access to.\n\n.. code:: python\n\n    import json\n    from magnetsdk2 import Connection\n\n    conn = Connection()\n    for org in conn.iter_organizations():\n        print(json.dumps(org, indent=4))\n\nDownloading Only New Alerts\n---------------------------\n\nA common scenario for using the SDK is downloading only new alerts over\ntime, typically to feed an integration with a 3rd party SIEM or\nticketing system. In order to implement this, the concept of a\npersistent iterator that saves its state on a JSON file is provided in\nthe SDK:\n\n.. code:: python\n\n    from magnetsdk2 import Connection\n    from magnetsdk2.iterator import FilePersistentAlertIterator\n\n    conn = Connection()\n    # replace xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx with a valid organization ID \n    alert_iterator = FilePersistentAlertIterator('persistence.json', conn, 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx')\n    for alert in alert_iterator:\n        try:\n            # try to process alert in some way\n            print(alert)\n        except:\n            alert_iterator.load()   # on failure, reload iterator so last alert doesn't count as processed\n        else:\n            alert_iterator.save()   # on success, save iterator so last alert counts as processed\n\nIf you run this same code multiple times, it should ever only output\nalerts it hasn’t processed before, provided file ``persistence.json`` is\nnot tampered with and remains available for reading and writing.\n\nYou save the current state of the iterator with the ``save`` method. If\nyou tried to process an alert and failed, you can simply not save the\niterator and reload the previous consistent state from disk using the\n``load`` method.\n\nThough the provided implementation saves the data to a JSON file, it is\neasy to add other means of persistence by creating subclasses of\n``magnetsdk2.iterator.AbstractPersistentAlertIterator`` that implement\nthe abstract ``_save`` and ``_load`` methods.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/mlsecproject/magnet-api2-sdk-python/",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magnetsdk2",
    "package_url": "https://pypi.org/project/magnetsdk2/",
    "platform": "any",
    "project_url": "https://pypi.org/project/magnetsdk2/",
    "project_urls": {
      "Homepage": "http://github.com/mlsecproject/magnet-api2-sdk-python/"
    },
    "release_url": "https://pypi.org/project/magnetsdk2/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python SDK to access the Niddel Magnet API v2",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5788314,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0968a316c35516e180777e974d3742232a9879882c7bea2d3c95795ea644cb3",
        "md5": "21db14e521e519b2235525c77ac26c60",
        "sha256": "2465a78edbd131926837ab38cc983dae706535c7c1f6bc03f3091502076df3b3"
      },
      "downloads": -1,
      "filename": "magnetsdk2-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "21db14e521e519b2235525c77ac26c60",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9916,
      "upload_time": "2017-11-09T14:55:54",
      "upload_time_iso_8601": "2017-11-09T14:55:54.458427Z",
      "url": "https://files.pythonhosted.org/packages/c0/96/8a316c35516e180777e974d3742232a9879882c7bea2d3c95795ea644cb3/magnetsdk2-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}