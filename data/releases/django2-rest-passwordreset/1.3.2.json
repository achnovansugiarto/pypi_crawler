{
  "info": {
    "author": "Christian Kreuzberger",
    "author_email": "ckreuzberger@anexia-it.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Rest Password Reset\n\nThis python package provides a simple password reset strategy for django rest framework, where users can request password \nreset tokens via their registered e-mail address.\n\nThe main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...).\nInstead, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).\n\nThis package basically provides two REST endpoints:\n\n* Request a token\n* Verify (confirm) a token (and change the password)\n\n## Quickstart\n\n1. Install the package from pypi using pip:\n```bash\npip install django-rest-passwordreset\n```\n\n2. Add ``django_rest_passwordreset`` to your ``INSTALLED_APPS`` (after ``rest_framework``) within your Django settings file:\n```python\nINSTALLED_APPS = (\n    ...\n    'django.contrib.auth',\n    ...\n    'rest_framework',\n    ...\n    'django_rest_passwordreset',\n    ...\n)\n```\n\n3. This package provides two endpoints, which can be included by including ``django_rest_passwordreset.urls`` in your ``urls.py`` as follows:\n```python\nfrom django.conf.urls import url, include\n\n\nurlpatterns = [\n    ...\n    url(r'^api/password_reset/', include('django_rest_passwordreset.urls', namespace='password_reset')),\n    ...\n]    \n```\n**Note**: You can adapt the url to your needs.\n\n### Endpoints\n\nThe following endpoints are provided:\n\n * `reset_password` - request a reset password token by using the ``email`` parameter\n * `reset_password/confirm` - using a valid ``token``, the users password is set to the provided ``password``\n \n### Signals\n\n* ``reset_password_token_created(reset_password_token)`` Fired when a reset password token is generated\n* ``pre_password_reset(user)`` - fired just before a password is being reset\n* ``post_password_reset(user)`` - fired after a password has been reset\n\n### Example for sending an e-mail\n\n1. Create two new django templates: `email/user_reset_password.html` and `email/user_reset_password.txt`. Those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\nWithin the templates, you can access the following context variables: `current_user`, `username`, `email`, `reset_password_url`. Feel free to adapt this to your needs.\n\n2. Add the following code, which contains a Django Signal, to your application (see [this part of the django documentation](https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions) for more information on where to put signals).\n```python\nfrom django.dispatch import receiver\nfrom django_rest_passwordreset.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, reset_password_token, *args, **kwargs):\n    \"\"\"\n    Handles password reset tokens\n    When a token is created, an e-mail needs to be sent to the user\n    :param sender:\n    :param reset_password_token:\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    # send an e-mail to the user\n    context = {\n        'current_user': reset_password_token.user,\n        'username': reset_password_token.user.username,\n        'email': reset_password_token.user.email,\n        # ToDo: The URL can (and should) be constructed using pythons built-in `reverse` method.\n        'reset_password_url': \"http://some_url/reset/?token={token}\".format(token=reset_password_token.key)\n    }\n\n    # render email text\n    email_html_message = render_to_string('email/user_reset_password.html', context)\n    email_plaintext_message = render_to_string('email/user_reset_password.txt', context)\n\n    msg = EmailMultiAlternatives(\n        # title:\n        _(\"Password Reset for {title}\".format(title=\"Some website title\")),\n        # message:\n        email_plaintext_message,\n        # from:\n        \"noreply@somehost.local\",\n        # to:\n        [reset_password_token.user.email]\n    )\n    msg.attach_alternative(email_html_message, \"text/html\")\n    msg.send()\n\n```\n\n3. You should now be able to use the endpoints to request a password reset token via your e-mail address. \nIf you want to test this locally, I recommend using some kind of fake mailserver (such as maildump).\n\n## Tests\n\nSee folder [tests/](tests/). Basically, all endpoints are covered with multiple\nunit tests.\n\nUse this code snippet to run tests:\n```bash\npip install -r requirements_test.txt\npython setup.py install\ncd tests\npython manage.py test\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alonraiz/django-rest-passwordreset",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django2-rest-passwordreset",
    "package_url": "https://pypi.org/project/django2-rest-passwordreset/",
    "platform": "",
    "project_url": "https://pypi.org/project/django2-rest-passwordreset/",
    "project_urls": {
      "Homepage": "https://github.com/alonraiz/django-rest-passwordreset"
    },
    "release_url": "https://pypi.org/project/django2-rest-passwordreset/1.3.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An extension of django rest framework, providing a password reset strategy",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10364655,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d209fa946aecd85ca7be2fa9338d57625ccbff1e2d84d063e067f1c6bb4fe0db",
        "md5": "8674bdf59b0d99cc9e48a826cf72b62c",
        "sha256": "711cce2324fcc0a0ee60b43a33bd4d65ddc5387933610b0316b6d4dc9ca6f87d"
      },
      "downloads": -1,
      "filename": "django2-rest-passwordreset-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8674bdf59b0d99cc9e48a826cf72b62c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15307,
      "upload_time": "2020-03-23T11:25:54",
      "upload_time_iso_8601": "2020-03-23T11:25:54.210691Z",
      "url": "https://files.pythonhosted.org/packages/d2/09/fa946aecd85ca7be2fa9338d57625ccbff1e2d84d063e067f1c6bb4fe0db/django2-rest-passwordreset-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}