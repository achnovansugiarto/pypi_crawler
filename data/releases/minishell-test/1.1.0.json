{
  "info": {
    "author": "Charles Cabergs",
    "author_email": "me@cacharle.xyz",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# minishell test [![Build Status](https://api.travis-ci.com/cacharle/minishell_test.svg?branch=master)](https://travis-ci.com/cacharle/minishell_test) [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/minishell-test)](https://pypi.org/project/minishell-test/) [![Documentation](https://readthedocs.org/projects/minishell-test/badge/?version=latest)](https://minishell-test.readthedocs.io)\n\nTest for the minishell project of school 42.\n\n![preview](https://i.imgur.com/98xh2xY.gif)\n\n## Installation\n\n### pip\n\n```\n$ pip3 install minishell-test\n```\n\n### Manual\n\n```\n$ git clone https://github.com/cacharle/minishell_test\n$ cd minishell_test\n$ pip3 install -e .\n```\n\n## Usage\n\n```\n$ minishell_test             # In your project directory\n$ python3 -m minishell_test  # If you don't have ~/.brew/bin or ~/.local/bin in your PATH\n\n$ minishell_test --help\nusage: minishell_test [-h] [-p PATH] [-l] [-t COMMAND] [-k] [-r BEGIN END]\n                      [--show-range] [-x] [-v] [-b] [-n] [-m] [-g]\n                      [suite [suite ...]]\n\nTest for the minishell project of school 42.\n\npositional arguments:\n  suite                 Test suites/group to run.\n                        It tries to be smart and autocomplete the suite name\n                        (e.g ./run int -> ./run preprocess/interpolation)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Path to minishell directory\n  -l, --list            Print available test suites\n  -t COMMAND, --try-cmd COMMAND\n                        Run a custom command like this test would\n                        (the only environment variable passed to your executable are TERM and PATH)\n  -k, --check-leaks     Run valgrind on tests (disable usual comparison with bash)\n  -r BEGIN END, --range BEGIN END\n                        Range of test index to run (imply --show-index)\n  --show-range          Show test index (useful with --range)\n  -x, --exit-first      Exit on first fail\n  -v, --verbose         Increase verbosity level (e.g -vv == 2)\n  -b, --bonus           Enable bonus tests\n  -n, --no-bonus        Disable bonus tests\n  -m, --make            Make minishell and exit\n  -g, --pager           After running the test, display the result in a pager of your choice\n\nMade by cacharle - https://cacharle.xyz\n```\n\n## Test compatibility\n\nYour executable **must** support the `-c` option which allow to pass command as string.\n\n```command\n$ bash -c 'echo bonjour je suis'\nbonjour je suis\n$ ./minishell -c 'echo bonjour je suis'\nbonjour je suis\n\n$ bash -c 'ls'\nREADME.md test.sh\n$ ./minishell -c 'ls'\nREADME.md test.sh\n```\n\nWith this setup `argv[2]` is what you would usually get in `line` from `get_next_line`.\nThis allows you to set the prompt to whatever you want.\n\n### Environement variables\n\nMy test only gives the `PATH` and `TERM` environment variables to your minishell.\n**Please check that your project still work with those settings before messaging me on Slack or creating an issue**.\nYou can test this quickly with the `-t` option (e.g `minishell_test -t 'echo bonjour`).\n\n## Bonus\n\n* Force the bonus tests with `$ minishell_test -b`\n* Change the `BONUS` variable in [config.py](minishell_test/config.py) to True\n* Set the environment variable `MINISHELL_TEST_BONUS` to `yes`\n  (e.g `echo 'export MINISHELL_TEST_BONUS=yes' >> ~/.zshrc`)\n\n## Memory leaks\n\n`$ minishell_test -k`, checkout the `--show-range`, `--range` and `-x` options to help\nto select the tests to run since valgrind is really slow.\n\n## Don't check error messages\n\nIf you don't want to copy bash syntax error message,\nyou can set the environment variable `MINISHELL_TEST_DONT_CHECK_ERROR_MESSAGE` to `yes`.\nIt will still test your exit status code but will discard any output on error tests.\n\n## Linux\n\nThe tester will try to convert to output/status code of bash on Linux to the one on Mac.\n\n---\n\n## Add new tests\n\nYou can find the suites in the [minishell\\_test/suites](minishell_test/suites) directory.\n\n### Add individual test\n\nIn your suite function you can use the `test` function. With the following arguments:\n\n1. Command to be tested (output and status will be compared to bash)\n2. A command to setup the sandbox directory where the tested command will be run\n3. List of files to watch (the content of each file will be compared)\n\n```python\ntest(\"echo bonjour je suis\")                                  # simple command\ntest(\"cat < somefile\", setup=\"echo file content > somefile\")  # setup\ntest(\"ls > somefile\", setup=\"\", files=[\"somefile\"])           # watch a file\ntest(\"echo $A\", exports={\"A\": \"a\"})                           # export variables\n                                                              # in the environment\ntest(\"echo bonjour\", hook=lambda s: s.replace(\"o\", \"a\"))      # pass the shell output\n                                                              # through a hook function\n\ntest(\"cat < somefile > otherfile\",\n     setup=\"echo file content > somefile\",\n     files=[\"otherfile\"])\n```\n\n### Add Suite\n\nA test suite is a group of related tests.\n\n```python\n@suite()  # @suite(bonus=True) if it's a bonus suite\ndef suite_yoursuitename(test):\n    \"\"\" a description of the suite \"\"\"\n    test(...)\n    test(...)\n    test(...)\n```\n\n---\n\n## Wildcard (or glob)\n\nThere is a commented glob suite in [minishell\\_test/suites/preprocess.py](minishell_test/suites/preprocess.py).\nGood luck handling `*'.*'`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cacharle/minishell_test",
    "keywords": "",
    "license": "GPL2",
    "maintainer": "Charles Cabergs",
    "maintainer_email": "me@cacharle.xyz",
    "name": "minishell-test",
    "package_url": "https://pypi.org/project/minishell-test/",
    "platform": "",
    "project_url": "https://pypi.org/project/minishell-test/",
    "project_urls": {
      "Homepage": "https://github.com/cacharle/minishell_test",
      "Tracker": "https://github.com/cacharle/minishell_test/issues"
    },
    "release_url": "https://pypi.org/project/minishell-test/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "test for the minishell project of school 42",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9906828,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f11e3105f8c1650e2bf28806dd6dd5ec6bdc11103fde65a2c85ed9d3e455b9a",
        "md5": "76cf5f7b07495f4cd6fc7c71d9d4eebb",
        "sha256": "31345adcd8d78fa2d35a16878bf22f8c7efc2f6898dd6d7d69e9030811fdcd5f"
      },
      "downloads": -1,
      "filename": "minishell_test-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76cf5f7b07495f4cd6fc7c71d9d4eebb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39880,
      "upload_time": "2021-02-27T15:24:06",
      "upload_time_iso_8601": "2021-02-27T15:24:06.079149Z",
      "url": "https://files.pythonhosted.org/packages/1f/11/e3105f8c1650e2bf28806dd6dd5ec6bdc11103fde65a2c85ed9d3e455b9a/minishell_test-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f85602d265a834cf8e0810e764694203f5233d6ee98d8b4c766ae8e3c8d034f",
        "md5": "95bc1f6f39e8fd0cbbb17a6a7f448b8d",
        "sha256": "221f9d345f407cf68ae9569c544050dd79ac75ae45122099da7830fe0d267718"
      },
      "downloads": -1,
      "filename": "minishell_test-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "95bc1f6f39e8fd0cbbb17a6a7f448b8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 35513,
      "upload_time": "2021-02-27T15:24:07",
      "upload_time_iso_8601": "2021-02-27T15:24:07.692940Z",
      "url": "https://files.pythonhosted.org/packages/1f/85/602d265a834cf8e0810e764694203f5233d6ee98d8b4c766ae8e3c8d034f/minishell_test-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}