{
  "info": {
    "author": "Memphis.dev",
    "author_email": "team@memphis.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "<div align=\"center\">\n  \n  ![Memphis light logo](https://github.com/memphisdev/memphis-broker/blob/master/logo-white.png?raw=true#gh-dark-mode-only)\n  \n</div>\n\n<div align=\"center\">\n  \n  ![Memphis light logo](https://github.com/memphisdev/memphis-broker/blob/master/logo-black.png?raw=true#gh-light-mode-only)\n  \n</div>\n\n<div align=\"center\">\n<h4>Simple as RabbitMQ, Robust as Apache Kafka, and Perfect for microservices.</h4>\n\n<img width=\"750\" alt=\"Memphis UI\" src=\"https://user-images.githubusercontent.com/70286779/204081372-186aae7b-a387-4253-83d1-b07dff69b3d0.png\"><br>\n\n  \n  <a href=\"https://landscape.cncf.io/?selected=memphis\"><img width=\"200\" alt=\"CNCF Silver Member\" src=\"https://github.com/cncf/artwork/raw/master/other/cncf-member/silver/white/cncf-member-silver-white.svg#gh-dark-mode-only\"></a>\n  \n</div>\n\n<div align=\"center\">\n  \n  <img width=\"200\" alt=\"CNCF Silver Member\" src=\"https://github.com/cncf/artwork/raw/master/other/cncf-member/silver/color/cncf-member-silver-color.svg#gh-light-mode-only\">\n  \n</div>\n \n <p align=\"center\">\n  <a href=\"https://sandbox.memphis.dev/\" target=\"_blank\">Sandbox</a> - <a href=\"https://memphis.dev/docs/\">Docs</a> - <a href=\"https://twitter.com/Memphis_Dev\">Twitter</a> - <a href=\"https://www.youtube.com/channel/UCVdMDLCSxXOqtgrBaRUHKKg\">YouTube</a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://discord.gg/WZpysvAeTf\"><img src=\"https://img.shields.io/discord/963333392844328961?color=6557ff&label=discord\" alt=\"Discord\"></a>\n<a href=\"https://github.com/memphisdev/memphis-broker/issues?q=is%3Aissue+is%3Aclosed\"><img src=\"https://img.shields.io/github/issues-closed/memphisdev/memphis-broker?color=6557ff\"></a> \n<a href=\"https://github.com/memphisdev/memphis-broker/blob/master/CODE_OF_CONDUCT.md\"><img src=\"https://img.shields.io/badge/Code%20of%20Conduct-v1.0-ff69b4.svg?color=ffc633\" alt=\"Code Of Conduct\"></a> \n<a href=\"https://docs.memphis.dev/memphis/release-notes/releases/v0.4.2-beta\"><img alt=\"GitHub release (latest by date)\" src=\"https://img.shields.io/github/v/release/memphisdev/memphis-broker?color=61dfc6\"></a>\n<img src=\"https://img.shields.io/github/last-commit/memphisdev/memphis-broker?color=61dfc6&label=last%20commit\">\n</p>\n\n**[Memphis](https://memphis.dev)** is a next-generation alternative to traditional message brokers.<br><br>\nA simple, robust, and durable cloud-native message broker wrapped with<br>\nan entire ecosystem that enables cost-effective, fast, and reliable development of modern queue-based use cases.<br><br>\nMemphis enables the building of modern queue-based applications that require<br>\nlarge volumes of streamed and enriched data, modern protocols, zero ops, rapid development,<br>\nextreme cost reduction, and a significantly lower amount of dev time for data-oriented developers and data engineers.\n\n## Installation\n\n```sh\n$ pip3 install memphis-py\n```\n\n## Importing\n\n```python\nfrom memphis import Memphis, Headers\nfrom memphis.types import Retention, Storage\n```\n\n### Connecting to Memphis\n\nFirst, we need to create Memphis `object` and then connect with Memphis by using `memphis.connect`.\n\n```python\nasync def main():\n  try:\n    memphis = Memphis()\n    await memphis.connect(\n      host=\"<memphis-host>\",\n      username=\"<application-type username>\",\n      connection_token=\"<broker-token>\", # you will get it on application type user creation\n      password=\"<string>\", # depends on how Memphis deployed - default is connection token-based authentication\n      port=\"<port>\", # defaults to 6666\n      reconnect=True, # defaults to True\n      max_reconnect=3, # defaults to 3\n      reconnect_interval_ms=1500, # defaults to 1500\n      timeout_ms=1500, # defaults to 1500\n      # for TLS connection:\n      key_file='<key-client.pem>', \n      cert_file='<cert-client.pem>', \n      ca_file='<rootCA.pem>'\n      )\n    ...\n  except Exception as e:\n    print(e)\n  finally:\n    await memphis.close()\n\nif __name__ == '__main__':\n  asyncio.run(main())\n```\n\nOnce connected, the entire functionalities offered by Memphis are available.\n\n### Disconnecting from Memphis\n\nTo disconnect from Memphis, call `close()` on the memphis object.\n\n```python\nawait memphis.close()\n```\n\n### Creating a Station\n\n_If a station already exists nothing happens, the new configuration will not be applied_\n\n```python\nstation = memphis.station(\n  name=\"<station-name>\",\n  schema_name=\"<schema-name>\",\n  retention_type=Retention.MAX_MESSAGE_AGE_SECONDS, # MAX_MESSAGE_AGE_SECONDS/MESSAGES/BYTES. Defaults to MAX_MESSAGE_AGE_SECONDS\n  retention_value=604800, # defaults to 604800\n  storage_type=Storage.DISK, # Storage.DISK/Storage.MEMORY. Defaults to DISK\n  replicas=1, # defaults to 1\n  idempotency_window_ms=120000, # defaults to 2 minutes\n  send_poison_msg_to_dls=True, # defaults to true\n  send_schema_failed_msg_to_dls=True, # defaults to true\n  tiered_storage_enabled=False # defaults to false\n)\n```\n\n### Retention types\n\nMemphis currently supports the following types of retention:\n\n```python\nmemphis.types.Retention.MAX_MESSAGE_AGE_SECONDS\n```\n\nMeans that every message persists for the value set in retention value field (in seconds)\n\n```python\nmemphis.types.Retention.MESSAGES\n```\n\nMeans that after max amount of saved messages (set in retention value), the oldest messages will be deleted\n\n```python\nmemphis.types.Retention.BYTES\n```\n\nMeans that after max amount of saved bytes (set in retention value), the oldest messages will be deleted\n\n\n### Retention Values\n\nThe `retention values` are directly related to the `retention types` mentioned above, where the values vary according to the type of retention chosen.\n\nAll retention values are of type `int` but with different representations as follows:\n\n`memphis.types.Retention.MAX_MESSAGE_AGE_SECONDS` is represented **in seconds**, `memphis.types.Retention.MESSAGES` in a **number of messages** and finally `memphis.types.Retention.BYTES` in a **number of bytes**.\n\nAfter these limits are reached oldest messages will be deleted.\n\n### Storage types\n\nMemphis currently supports the following types of messages storage:\n\n```python\nmemphis.types.Storage.DISK\n```\n\nMeans that messages persist on disk\n\n```python\nmemphis.types.Storage.MEMORY\n```\n\nMeans that messages persist on the main memory\n\n### Destroying a Station\n\nDestroying a station will remove all its resources (producers/consumers)\n\n```python\nstation.destroy()\n```\n\n### Attaching a Schema to an Existing Station\n\n```python\nawait memphis.attach_schema(\"<schema-name>\", \"<station-name>\")\n```\n\n### Detaching a Schema from Station\n\n```python\nawait memphis.detach_schema(\"<station-name>\")\n```\n\n\n### Produce and Consume messages\n\nThe most common client operations are `produce` to send messages and `consume` to\nreceive messages.\n\nMessages are published to a station and consumed from it by creating a consumer.\nConsumers are pull based and consume all the messages in a station unless you are using a consumers group, in this case messages are spread across all members in this group.\n\nMemphis messages are payload agnostic. Payloads are `bytearray`.\n\nIn order to stop getting messages, you have to call `consumer.destroy()`. Destroy will terminate regardless\nof whether there are messages in flight for the client.\n\n### Creating a Producer\n\n```python\nproducer = await memphis.producer(station_name=\"<station-name>\", producer_name=\"<producer-name>\", generate_random_suffix=False)\n```\n\n### Producing a message\nWithout creating a producer.\nIn cases where extra performance is needed the recommended way is to create a producer first\nand produce messages by using the produce function of it\n```python\nawait memphis.produce(station_name='test_station_py', producer_name='prod_py',\n  message='bytearray/protobuf class/dict/string/graphql.language.ast.DocumentNode', # bytearray / protobuf class (schema validated station - protobuf) or bytearray/dict (schema validated station - json schema) or string/bytearray/graphql.language.ast.DocumentNode (schema validated station - graphql schema) \n  generate_random_suffix=False, #defaults to false\n  ack_wait_sec=15, # defaults to 15\n  headers=headers, # default to {}\n  async_produce=False, #defaults to false\n  msg_id=\"123\"\n)\n```\n\n\nWith creating a producer\n```python\nawait producer.produce(\n  message='bytearray/protobuf class/dict/string/graphql.language.ast.DocumentNode', # bytearray / protobuf class (schema validated station - protobuf) or bytearray/dict (schema validated station - json schema) or string/bytearray/graphql.language.ast.DocumentNode (schema validated station - graphql schema)\n  ack_wait_sec=15) # defaults to 15\n```\n\n### Add headers\n\n```python\nheaders= Headers()\nheaders.add(\"key\", \"value\")\nawait producer.produce(\n  message='bytearray/protobuf class/dict/string/graphql.language.ast.DocumentNode', # bytearray / protobuf class (schema validated station - protobuf) or bytearray/dict (schema validated station - json schema) or string/bytearray/graphql.language.ast.DocumentNode (schema validated station - graphql schema)\n  headers=headers) # default to {}\n```\n\n### Async produce\nMeaning your application won't wait for broker acknowledgement - use only in case you are tolerant for data loss\n\n```python\nawait producer.produce(\n  message='bytearray/protobuf class/dict/string/graphql.language.ast.DocumentNode', # bytearray / protobuf class (schema validated station - protobuf) or bytearray/dict (schema validated station - json schema) or string/bytearray/graphql.language.ast.DocumentNode (schema validated station - graphql schema)\n  headers={}, async_produce=True)\n```\n\n### Message ID\nStations are idempotent by default for 2 minutes (can be configured), Idempotency achieved by adding a message id\n\n```python\nawait producer.produce(\n  message='bytearray/protobuf class/dict', # bytes / protobuf class (schema validated station - protobuf) or bytes/dict (schema validated station - json schema)\n  headers={}, \n  async_produce=True,\n  msg_id=\"123\")\n```\n\n### Destroying a Producer\n\n```python\nproducer.destroy()\n```\n\n### Creating a Consumer\n\n```python\nconsumer = await memphis.consumer(\n  station_name=\"<station-name>\",\n  consumer_name=\"<consumer-name>\",\n  consumer_group=\"<group-name>\", # defaults to the consumer name\n  pull_interval_ms=1000, # defaults to 1000\n  batch_size=10, # defaults to 10\n  batch_max_time_to_wait_ms=5000, # defaults to 5000\n  max_ack_time_ms=30000, # defaults to 30000\n  max_msg_deliveries=10, # defaults to 10\n  generate_random_suffix=False,\n  start_consume_from_sequence=1, # start consuming from a specific sequence. defaults to 1\n  last_messages=-1 # consume the last N messages, defaults to -1 (all messages in the station)\n)\n```\n\n### Setting a context for message handler function\n\n```python\ncontext = {\"key\": \"value\"}\nconsumer.set_context(context)\n```\n\n### Processing messages\n\nOnce all the messages in the station were consumed the msg_handler will receive error: `Memphis: TimeoutError`.\n\n```python\nasync def msg_handler(msgs, error, context):\n  for msg in msgs:\n    print(\"message: \", msg.get_data())\n    await msg.ack()\n  if error:\n    print(error)\nconsumer.consume(msg_handler)\n```\n\n### Fetch a single batch of messages\n```python\nmsgs = await memphis.fetch_messages(\n  station_name=\"<station-name>\",\n  consumer_name=\"<consumer-name>\",\n  consumer_group=\"<group-name>\", # defaults to the consumer name\n  batch_size=10, # defaults to 10\n  batch_max_time_to_wait_ms=5000, # defaults to 5000\n  max_ack_time_ms=30000, # defaults to 30000\n  max_msg_deliveries=10, # defaults to 10\n  generate_random_suffix=False\n  start_consume_from_sequence=1 # start consuming from a specific sequence. defaults to 1\n  last_messages=-1 # consume the last N messages, defaults to -1 (all messages in the station))\n)\n```\n\n### Fetch a single batch of messages after creating a consumer\n```python\nmsgs = await consumer.fetch(batch_size=10) # defaults to 10\n```\n\n\n### Acknowledge a message\n\nAcknowledge a message indicates the Memphis server to not re-send the same message again to the same consumer / consumers group\n\n```python\nawait message.ack()\n```\n\n### Delay the message after a given duration\n\nDelay the message and tell Memphis server to re-send the same message again to the same consumer group. The message will be redelivered only in case `consumer.max_msg_deliveries` is not reached yet.\n\n```python\nawait message.delay(delay_in_seconds)\n```\n\n### Get headers \nGet headers per message\n\n```python\nheaders = message.get_headers()\n```\n\n### Get message sequence number\nGet message sequence number\n\n```python\nsequence_number = msg.get_sequence_number()\n```\n\n### Destroying a Consumer\n\n```python\nconsumer.destroy()\n```\n\n\n### Check connection status\n\n```python\nmemphis.is_connected()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/memphisdev/memphis.py/archive/refs/tags/1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/memphisdev/memphis.py",
    "keywords": "message broker,devtool,streaming,data",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memphis-py",
    "package_url": "https://pypi.org/project/memphis-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/memphis-py/",
    "project_urls": {
      "Download": "https://github.com/memphisdev/memphis.py/archive/refs/tags/1.0.0.tar.gz",
      "Homepage": "https://github.com/memphisdev/memphis.py"
    },
    "release_url": "https://pypi.org/project/memphis-py/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A powerful messaging platform for modern developers",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17549962,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83468ec4884e51a0b4227fa5684fe9b09159054962f66bf614d41f74c262dfd7",
        "md5": "7e0a32c784d61ef16ab7a6c9d6f5bea4",
        "sha256": "b52d703f8caa590cffa6c7e8ffb410b719759dfe55ad34fccde1becc17fd6107"
      },
      "downloads": -1,
      "filename": "memphis-py-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e0a32c784d61ef16ab7a6c9d6f5bea4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20529,
      "upload_time": "2023-04-02T19:14:52",
      "upload_time_iso_8601": "2023-04-02T19:14:52.771242Z",
      "url": "https://files.pythonhosted.org/packages/83/46/8ec4884e51a0b4227fa5684fe9b09159054962f66bf614d41f74c262dfd7/memphis-py-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}