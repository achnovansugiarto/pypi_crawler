{
  "info": {
    "author": "mentalblood",
    "author_email": "neceporenkostepan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# üì¶ LSC ‚Äî  Logic Scheme to C compiler\n\n[![forthebadge](https://forthebadge.com/images/badges/powered-by-black-magic.svg)](https://forthebadge.com)\n\n\n\n## Why use LSC?\n\n- You can use [this web-based editor](https://github.com/mentalblood/logic_schemes_editor) to create and export schemes ‚úèÔ∏è\n- Super-easy to integrate with any other logic schemes editor üîå\n- Results in logic expressions, so C compiler can easily optimize them üéØ\n- Supports nesting üìÅ\n\n\n\n## Features\n\n- Written in Python üêç\n- Takes JSON logic schemes representations üëÄ\n- Checks JSON representation for errors üßê\n- Requires only wires \"from, to\" description ‚û°Ô∏è\n- Works with nested schemes (i.e defined scheme can be used in other schemes in file as element) üìÅ\n- Scheme tests can be provided ‚úîÔ∏è\n- High full (JSON - C - executable) compilation speed üöÄ\n\n\n\n## Installation\n\n```bash\npip install lsc-mentalblood\n```\n\n\n\n## Usage\n\n```bash\npython -m lsc [-h] -i INPUT [-t TARGET] -l [LINK ...] -o OUTPUT\n```\n\narguments:\n\n* `-i INPUT`, `--input INPUT` ‚Äì path to file with target function\n* `-t TARGET`, `--target TARGET` ‚Äì name of function to compile\n* `-l LINK`, `--link LINK` ‚Äì paths to (input files) / (directories containing input files) with required functions descriptions\n* `-o OUTPUT`, `--output OUTPUT` ‚Äì path to output file\n\nAlso you can run\n\n```bash\npython -m lsc --help\n```\n\n\n\n## Examples\n\n### XOR\n\n```json\n{\n    \"xor\": {\n        \"wires\": [\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"NOT_2[1]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"NOT_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"OR_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"OR_1[2]\"\n            },\n            {\n                \"from\": \"NOT_1[1]\",\n                \"to\": \"OR_2[1]\"\n            },\n            {\n                \"from\": \"NOT_2[1]\",\n                \"to\": \"OR_2[2]\"\n            },\n            {\n                \"from\": \"OR_1[1]\",\n                \"to\": \"AND_1[2]\"\n            },\n            {\n                \"from\": \"AND_1[1]\",\n                \"to\": \"OUTPUT_1[1]\"\n            },\n            {\n                \"from\": \"OR_2[1]\",\n                \"to\": \"AND_1[1]\"\n            }\n        ],\n        \"tests\": [\n            {\n                \"inputs\": [\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    1\n                ],\n                \"outputs\": [\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    0\n                ],\n                \"outputs\": [\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    1\n                ],\n                \"outputs\": [\n                    1\n                ]\n            }\n        ]\n    }\n}\n```\n\ncommand for compile:\n\n```bash\npython -m lsc --input lib\\xor.json --target xor --link lib --output example.c\n```\n\noutput code: [godbolt üìú](https://godbolt.org/z/c4TT5Trvv) \n\n### Full bit adder\n\n```json\n{\n    \"sum\": {\n        \"wires\": [\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"AND_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"AND_2[1]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"OR_3_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"AND_3_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"AND_1[2]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"AND_3[1]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"OR_3_1[2]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"AND_3_1[2]\"\n            },\n            {\n                \"from\": \"INPUT_3[1]\",\n                \"to\": \"AND_2[2]\"\n            },\n            {\n                \"from\": \"INPUT_3[1]\",\n                \"to\": \"AND_3[2]\"\n            },\n            {\n                \"from\": \"INPUT_3[1]\",\n                \"to\": \"OR_3_1[3]\"\n            },\n            {\n                \"from\": \"INPUT_3[1]\",\n                \"to\": \"AND_3_1[3]\"\n            },\n            {\n                \"from\": \"AND_1[1]\",\n                \"to\": \"OR_3_2[1]\"\n            },\n            {\n                \"from\": \"AND_2[1]\",\n                \"to\": \"OR_3_2[2]\"\n            },\n            {\n                \"from\": \"AND_3[1]\",\n                \"to\": \"OR_3_2[3]\"\n            },\n            {\n                \"from\": \"OR_3_2[1]\",\n                \"to\": \"OUTPUT_1[1]\"\n            },\n            {\n                \"from\": \"OR_3_2[1]\",\n                \"to\": \"NOT_1[1]\"\n            },\n            {\n                \"from\": \"NOT_1[1]\",\n                \"to\": \"AND_4[1]\"\n            },\n            {\n                \"from\": \"OR_3_1[1]\",\n                \"to\": \"AND_4[2]\"\n            },\n            {\n                \"from\": \"AND_4[1]\",\n                \"to\": \"OR_1[1]\"\n            },\n            {\n                \"from\": \"AND_3_1[1]\",\n                \"to\": \"OR_1[2]\"\n            },\n            {\n                \"from\": \"OR_1[1]\",\n                \"to\": \"OUTPUT_2[1]\"\n            }\n        ],\n        \"tests\": [\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    1\n                ],\n                \"outputs\": [\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    1,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    1,\n                    1\n                ],\n                \"outputs\": [\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    1,\n                    0\n                ],\n                \"outputs\": [\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    0,\n                    1\n                ],\n                \"outputs\": [\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    1,\n                    1,\n                    1\n                ],\n                \"outputs\": [\n                    1,\n                    1\n                ]\n            }\n        ]\n    }\n}\n```\n\ncommand for compile:\n\n```bash\npython -m lsc --input lib\\sum.json --target sum --link lib --output example.c\n```\n\noutput code: [godbolt üìú](https://godbolt.org/z/b37a8ab47) \n\n### Full 8bit adder (cascade)\n\n```json\n{\n    \"sum_8\": {\n        \"wires\": [\n            {\n                \"from\": \"INPUT_16[1]\",\n                \"to\": \"sum_1[1]\"\n            },\n            {\n                \"from\": \"INPUT_8[1]\",\n                \"to\": \"sum_1[2]\"\n            },\n            {\n                \"from\": \"INPUT_7[1]\",\n                \"to\": \"sum_2[2]\"\n            },\n            {\n                \"from\": \"INPUT_15[1]\",\n                \"to\": \"sum_2[1]\"\n            },\n            {\n                \"from\": \"INPUT_17[1]\",\n                \"to\": \"sum_1[3]\"\n            },\n            {\n                \"from\": \"sum_1[1]\",\n                \"to\": \"sum_2[3]\"\n            },\n            {\n                \"from\": \"INPUT_6[1]\",\n                \"to\": \"sum_3[2]\"\n            },\n            {\n                \"from\": \"INPUT_14[1]\",\n                \"to\": \"sum_3[1]\"\n            },\n            {\n                \"from\": \"sum_2[1]\",\n                \"to\": \"sum_3[3]\"\n            },\n            {\n                \"from\": \"INPUT_5[1]\",\n                \"to\": \"sum_4[2]\"\n            },\n            {\n                \"from\": \"sum_3[1]\",\n                \"to\": \"sum_4[3]\"\n            },\n            {\n                \"from\": \"INPUT_1[1]\",\n                \"to\": \"sum_8[2]\"\n            },\n            {\n                \"from\": \"INPUT_9[1]\",\n                \"to\": \"sum_8[1]\"\n            },\n            {\n                \"from\": \"INPUT_2[1]\",\n                \"to\": \"sum_7[2]\"\n            },\n            {\n                \"from\": \"INPUT_10[1]\",\n                \"to\": \"sum_7[1]\"\n            },\n            {\n                \"from\": \"INPUT_11[1]\",\n                \"to\": \"sum_6[1]\"\n            },\n            {\n                \"from\": \"INPUT_3[1]\",\n                \"to\": \"sum_6[2]\"\n            },\n            {\n                \"from\": \"INPUT_12[1]\",\n                \"to\": \"sum_5[1]\"\n            },\n            {\n                \"from\": \"INPUT_4[1]\",\n                \"to\": \"sum_5[2]\"\n            },\n            {\n                \"from\": \"sum_4[1]\",\n                \"to\": \"sum_5[3]\"\n            },\n            {\n                \"from\": \"sum_5[1]\",\n                \"to\": \"sum_6[3]\"\n            },\n            {\n                \"from\": \"sum_6[1]\",\n                \"to\": \"sum_7[3]\"\n            },\n            {\n                \"from\": \"sum_7[1]\",\n                \"to\": \"sum_8[3]\"\n            },\n            {\n                \"from\": \"INPUT_13[1]\",\n                \"to\": \"sum_4[1]\"\n            },\n            {\n                \"from\": \"sum_8[1]\",\n                \"to\": \"OUTPUT_1[1]\"\n            },\n            {\n                \"from\": \"sum_8[2]\",\n                \"to\": \"OUTPUT_2[1]\"\n            },\n            {\n                \"from\": \"sum_1[2]\",\n                \"to\": \"OUTPUT_9[1]\"\n            },\n            {\n                \"from\": \"sum_2[2]\",\n                \"to\": \"OUTPUT_8[1]\"\n            },\n            {\n                \"from\": \"sum_3[2]\",\n                \"to\": \"OUTPUT_7[1]\"\n            },\n            {\n                \"from\": \"sum_4[2]\",\n                \"to\": \"OUTPUT_6[1]\"\n            },\n            {\n                \"from\": \"sum_5[2]\",\n                \"to\": \"OUTPUT_5[1]\"\n            },\n            {\n                \"from\": \"sum_6[2]\",\n                \"to\": \"OUTPUT_4[1]\"\n            },\n            {\n                \"from\": \"sum_7[2]\",\n                \"to\": \"OUTPUT_3[1]\"\n            }\n        ],\n        \"tests\": [\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0\n                ]\n            },\n            {\n                \"inputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ],\n                \"outputs\": [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ]\n            }\n        ]\n    }\n}\n```\n\ncommand for compile:\n\n```bash\npython -m lsc --input lib\\sum_8.json --target sum_8 --link lib --output example.c\n```\n\noutput code: [godbolt üìú](https://godbolt.org/z/q471hr8Ee) \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MentalBlood/logic_schemes_compiler",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lsc-mentalblood",
    "package_url": "https://pypi.org/project/lsc-mentalblood/",
    "platform": "",
    "project_url": "https://pypi.org/project/lsc-mentalblood/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MentalBlood/logic_schemes_compiler/issues",
      "Homepage": "https://github.com/MentalBlood/logic_schemes_compiler"
    },
    "release_url": "https://pypi.org/project/lsc-mentalblood/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Compile wires \"from, to\" list to working C code",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10895845,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67e1dfb645c38cc324d01c655b3529ffe9f46b4ad3923942bad8b0bd4a320724",
        "md5": "7f50e15ec912d088deb786396fa25769",
        "sha256": "bb8f5e993fe0bc3142065460f3f4317697fd6b7058f52e8d3c54d275f85ba03d"
      },
      "downloads": -1,
      "filename": "lsc_mentalblood-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f50e15ec912d088deb786396fa25769",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8118,
      "upload_time": "2021-07-13T10:40:38",
      "upload_time_iso_8601": "2021-07-13T10:40:38.752409Z",
      "url": "https://files.pythonhosted.org/packages/67/e1/dfb645c38cc324d01c655b3529ffe9f46b4ad3923942bad8b0bd4a320724/lsc_mentalblood-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f29b264f747d1744667b5e1b93ab46cea235d16656942ab86013d1eddcc0addb",
        "md5": "19dd273c02e062e1bd5b3feea599af80",
        "sha256": "c1580075ea011ab181f325b66843778319ce1c041b1b0c07f20ca4879a830ed9"
      },
      "downloads": -1,
      "filename": "lsc-mentalblood-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "19dd273c02e062e1bd5b3feea599af80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9300,
      "upload_time": "2021-07-13T10:40:41",
      "upload_time_iso_8601": "2021-07-13T10:40:41.691997Z",
      "url": "https://files.pythonhosted.org/packages/f2/9b/264f747d1744667b5e1b93ab46cea235d16656942ab86013d1eddcc0addb/lsc-mentalblood-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}