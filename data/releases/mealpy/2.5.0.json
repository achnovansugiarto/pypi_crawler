{
  "info": {
    "author": "Thieu",
    "author_email": "nguyenthieu2102@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Benchmark",
      "Topic :: Utilities"
    ],
    "description": "\n<p align=\"center\"><img src=\".github/img/mealpy-logo-3.png\" alt=\"MEALPY\" title=\"MEALPY\"/></p>\n\n---\n\n\n[![GitHub release](https://img.shields.io/badge/release-2.5.0-yellow.svg)](https://github.com/thieu1995/mealpy/releases)\n[![Wheel](https://img.shields.io/pypi/wheel/gensim.svg)](https://pypi.python.org/pypi/mealpy) \n[![PyPI version](https://badge.fury.io/py/mealpy.svg)](https://badge.fury.io/py/mealpy)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mealpy.svg)\n![PyPI - Status](https://img.shields.io/pypi/status/mealpy.svg)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/mealpy.svg)\n[![Downloads](https://pepy.tech/badge/mealpy)](https://pepy.tech/project/mealpy)\n![GitHub Release Date](https://img.shields.io/github/release-date/thieu1995/mealpy.svg)\n[![Documentation Status](https://readthedocs.org/projects/mealpy/badge/?version=latest)](https://mealpy.readthedocs.io/en/latest/?badge=latest)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/thieu1995/mealpy.svg)](http://isitmaintained.com/project/thieu1995/mealpy \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/thieu1995/mealpy.svg)](http://isitmaintained.com/project/thieu1995/mealpy \"Percentage of issues still open\")\n![GitHub contributors](https://img.shields.io/github/contributors/thieu1995/mealpy.svg)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3711948.svg)](https://doi.org/10.5281/zenodo.3711948)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n\nMEALPY is the largest python library for most of the cutting-edge nature-inspired meta-heuristic algorithms (population-based). Population meta-heuristic algorithms (PMA) are the most popular algorithms in the field of \napproximate optimization.\n\n* **Free software:** GNU General Public License (GPL) V3 license\n* **Total algorithms**: 148 (84 original, 42 official variants, 22 developed variants)\n* **Documentation:** https://mealpy.readthedocs.io/en/latest/\n* **Python versions:** 3.7.x, 3.8.x, 3.9.x, 3.10.x\n* **Dependencies:** numpy, scipy, pandas, matplotlib\n\n\n# Goals\n\nOur goals are to implement all of the classical as well as the state-of-the-art nature-inspired algorithms, create a simple interface that helps researchers access optimization algorithms as quickly as possible, and share knowledge of the optimization field with everyone without a fee. What you can do with mealpy:\n\n- Analyse parameters of meta-heuristic algorithms.\n- Perform Qualitative and Quantitative Analysis of algorithms.\n- Analyse rate of convergence of algorithms.\n- Test and Analyse the scalability and the robustness of algorithms.\n- Save results in various formats (csv, json, pickle, png, pdf, jpeg)\n- Export and import models\n\n\n\n# Installation\n\n### Install with pip\nInstall the [current PyPI release](https://pypi.python.org/pypi/mealpy):\n```sh \n$ pip install mealpy==2.5.0\n```\n\n### Install from source\nIn case you want to install directly from the source code, use:\n```sh \n$ git clone https://github.com/thieu1995/mealpy.git\n$ cd mealpy\n$ python setup.py install\n```\n\n\n# Usage\n\nAfter installation, you can import Mealpy as any other Python module:\n\n```sh\n$ python\n>>> import mealpy\n>>> mealpy.__version__\n```\n\nLet's go through a basic and advanced example.\n\n\n## Examples\n\n### Simple Benchmark Function\n\n```python \nfrom mealpy.bio_based import SMA\nimport numpy as np\n\ndef fitness_function(solution):\n    return np.sum(solution**2)\n\nproblem = {\n    \"fit_func\": fitness_function,\n    \"lb\": [-100, ] * 30,\n    \"ub\": [100, ] * 30,\n    \"minmax\": \"min\",\n    \"log_to\": None,\n    \"save_population\": False,\n}\n\n## Run the algorithm\nmodel = SMA.BaseSMA(epoch=100, pop_size=50, pr=0.03)\nbest_position, best_fitness = model.solve(problem)\nprint(f\"Best solution: {best_position}, Best fitness: {best_fitness}\")\n```\n\n### Constrained Benchmark Function\n* [The Constrained Benchmark Function](https://github.com/thieu1995/mealpy/tree/master/examples/applications/run_constraint_functions.py)\n\n\n### Multi-objective Benchmark Function\n* [Multi-objective benchmark functions](https://github.com/thieu1995/mealpy/tree/master/examples/applications/run_multi_objective_functions.py)\n\n\n### Custom Problem \n\nFor our custom problem, we can create a class and inherit from Problem class, named the child class as \"Squared\". \nIn the initialization method of *Squared* class we have to set the *lb*, *ub*, and *minmax* of the problem. (lb: is list of lowerbound, ub: is list of upperbound values, minmax is \"min\" or \"max\" problem). \n\nAfterwards we have to override the abstract method *fit_func()* which takes a parameter *solution*, the solution to be evaluated, and returns the function value. Now we should have something similar as is shown in code snippet bellow.\n(*name* is additional parameter we want to add to this class, you can add anything you want).\n\n```python \nimport numpy as np\nfrom mealpy.bio_based import BBO\nfrom mealpy.utils.problem import Problem\n\n# Our custom problem class\nclass Squared(Problem):\n    def __init__(self, lb=(-5, -5, -5, -5, -5, -5), ub=(5, 5, 5, 5, 5, 5), minmax=\"min\", name=\"Squared\", **kwargs):\n        super().__init__(lb, ub, minmax, **kwargs)\n        self.name = name\n\n    def fit_func(self, solution):\n        return np.sum(solution ** 2)\n```\n\nNow, we define an algorithm, and pass an instance of our *Squared* class as the problem argument. \n\n```python\nprob = Squared(lb=[-10] * 20, ub=[10] * 20, minmax=\"min\")\nmodel = BBO.BaseBBO(epoch=10, pop_size=50)\nbest_position, best_fitness = model.solve(prob)\n\nprint(best_position)\nprint(best_fitness)\nprint(model.get_parameters())\nprint(model.get_name())\nprint(model.get_attributes()[\"solution\"])\nprint(model.problem.get_name())\nprint(model.problem.n_dims)\n```\n\n### Get Visualize Figures\n\n\n* [Tutorials](/examples/utils/visualize/all_charts.py)\n\n* Global best fitness value and Local best fitness value after generations\n\n<p align=\"center\">\n  <img alt=\"Light\" src=\".github/img/gbfc.png\" width=\"45%\">\n&nbsp; &nbsp; &nbsp; &nbsp;\n  <img alt=\"Dark\" src=\".github/img/lbfc.png\" width=\"45%\">\n</p>\n\n* Global objectives chart and Local objectives chart\n\n<p align=\"center\">\n  <img alt=\"Light\" src=\".github/img/goc.png\" width=\"45%\">\n&nbsp; &nbsp; &nbsp; &nbsp;\n  <img alt=\"Dark\" src=\".github/img/loc.png\" width=\"45%\">\n</p>\n\n* Diversity of population chart and Exploration verse Exploitation chart\n\n<p align=\"center\">\n  <img alt=\"Light\" src=\".github/img/dc.png\" width=\"45%\">\n&nbsp; &nbsp; &nbsp; &nbsp;\n  <img alt=\"Dark\" src=\".github/img/eec.png\" width=\"45%\">\n</p>\n\n* Running time chart and Trajectory of some first agents chart\n\n<p align=\"center\">\n  <img alt=\"Light\" src=\".github/img/rtc.png\" width=\"45%\">\n&nbsp; &nbsp; &nbsp; &nbsp;\n  <img alt=\"Dark\" src=\".github/img/tc.png\" width=\"45%\">\n</p>\n\n\n\nFor more usage examples please look at [examples](/examples) folder.\n\nMore advanced examples can also be found in the [Mealpy-examples repository](https://github.com/thieu1995/mealpy_examples).\n\n\n\n## Mealpy Application\n\n### Mealpy + Neural Network (Replace the Gradient Descent Optimizer)\n\n* Time-series Problem:\n  * Traditional MLP\n    code: [Link](https://github.com/thieu1995/mealpy/tree/master/examples/applications/keras/traditional-mlp-time-series.py)\n  * Hybrid code (Mealpy +\n    MLP): [Link](https://github.com/thieu1995/mealpy/tree/master/examples/applications/keras/mha-hybrid-mlp-time-series.py)\n* Classification Problem:\n  * Traditional MLP\n    code: [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/keras/traditional-mlp-classification.py)\n  * Hybrid code (Mealpy +\n    MLP): [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/keras/mha-hybrid-mlp-classification.py)\n\n### Mealpy + Neural Network (Optimize Neural Network Hyper-parameter)\n\nCode: [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/keras/mha-hyper-parameter-mlp-time-series.py)\n\n### Other Applications\n\n* Solving Knapsack Problem (Discrete\n  problems): [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/discrete-problems/knapsack-problem.py)\n\n* Optimize SVM (SVC)\n  model: [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/sklearn/svm_classification.py)\n\n* Optimize Linear Regression\n  Model: [Link](https://github.com/thieu1995/mealpy/blob/master/examples/applications/pytorch/linear_regression.py)\n\n* Travelling Salesman Problem: https://github.com/thieu1995/MHA-TSP \n\n* Feature selection problem: https://github.com/thieu1995/MHA-FS\n\n\n\n## Tutorial Videos\n\nAll tutorial videos: [Link](https://mealpy.readthedocs.io/en/latest/pages/general/video_tutorials.html)\n\nAll code examples: [Link](https://github.com/thieu1995/mealpy/tree/master/examples)\n\nAll visualization examples: [Link](https://mealpy.readthedocs.io/en/latest/pages/visualization.html)\n\n\n\n### Important links\n\n* Official source code repo: https://github.com/thieu1995/mealpy\n* Official document: https://mealpy.readthedocs.io/\n* Download releases: https://pypi.org/project/mealpy/\n* Issue tracker: https://github.com/thieu1995/mealpy/issues\n* Notable changes log: https://github.com/thieu1995/mealpy/blob/master/ChangeLog.md\n* Examples with different meapy version: https://github.com/thieu1995/mealpy/blob/master/EXAMPLES.md\n\n* This project also related to our another projects which are \"meta-heuristics\" and \"neural-network\", check it here\n    * https://github.com/thieu1995/opfunu\n    * https://github.com/thieu1995/metaheuristics\n    * https://github.com/aiir-team\n\n\n### Cite Us\n\nIf you are using mealpy in your project, we would appreciate citations:\n\n```code \n@software{nguyen_van_thieu_2022_6684223,\n  author       = {Nguyen Van Thieu and Seyedali Mirjalili},\n  title        = {{MEALPY: a Framework of The State-of-The-Art Meta-Heuristic Algorithms in Python}},\n  month        = jun,\n  year         = 2022,\n  publisher    = {Zenodo},\n  version      = {v2.4.2},\n  doi          = {10.5281/zenodo.6684223},\n  url          = {https://doi.org/10.5281/zenodo.6684223}\n}\n```\n\n\n# Documents\n\n* Meta-heuristic Categories: (Based on this article: [link](https://doi.org/10.1016/j.procs.2020.09.075))\n    + Evolutionary-based: Idea from Darwin's law of natural selection, evolutionary computing \n    + Swarm-based: Idea from movement, interaction of birds, organization of social ...\n    + Physics-based: Idea from physics law such as Newton's law of universal gravitation, black hole, multiverse \n    + Human-based: Idea from human interaction such as queuing search, teaching learning, ... \n    + Biology-based: Idea from biology creature (or microorganism),...\n    + System-based: Idea from eco-system, immune-system, network-system, ...\n    + Math-based: Idea from mathematical form or mathematical law such as sin-cosin \n    + Music-based: Idea from music instrument\n\n* Difficulty - Difficulty Level (Personal Opinion): Objective observation from author. Depend on the number of \n  parameters, number of equations, the original ideas, time spend for coding, source lines of code (SLOC).\n    + Easy: A few paras, few equations, SLOC very short\n    + Medium: more equations than Easy level, SLOC longer than Easy level\n    + Hard: Lots of equations, SLOC longer than Medium level, the paper hard to read.\n    + Hard* - Very hard: Lots of equations, SLOC too long, the paper is very hard to read.\n\n** For newbie, we recommend to read the paper of algorithms which difficulty is \"easy\" or \"medium\" difficulty level.\n\n\n| **Group**    | **Name**                                  | **Module** | **Class**        | **Year** | **Paras** | **Difficulty** |\n|--------------|-------------------------------------------|------------|------------------|----------|-----------|----------------|\n| Evolutionary | Evolutionary Programming                  | EP         | OriginalEP       | 1964     | 3         | easy           |\n| Evolutionary | -                                         | -          | LevyEP           | -        | 3         | easy           |\n| Evolutionary | Evolution Strategies                      | ES         | OriginalES       | 1971     | 3         | easy           |\n| Evolutionary | -                                         | -          | LevyES           | -        | 3         | easy           |\n| Evolutionary | Memetic Algorithm                         | MA         | OriginalMA       | 1989     | 7         | easy           |\n| Evolutionary | Genetic Algorithm                         | GA         | BaseGA           | 1992     | 4         | easy           |\n| Evolutionary | -                                         | -          | SingleGA         | -        | 7         | easy           |\n| Evolutionary | -                                         | -          | MultiGA          | -        | 7         | easy           |\n| Evolutionary | Differential Evolution                    | DE         | BaseDE           | 1997     | 5         | easy           |\n| Evolutionary | -                                         | -          | JADE             | 2009     | 6         | medium         |\n| Evolutionary | -                                         | -          | SADE             | 2005     | 2         | medium         |\n| Evolutionary | -                                         | -          | SHADE            | 2013     | 4         | medium         |\n| Evolutionary | -                                         | -          | L_SHADE          | 2014     | 4         | medium         |\n| Evolutionary | -                                         | -          | SAP_DE           | 2006     | 3         | medium         |\n| Evolutionary | Flower Pollination Algorithm              | FPA        | OriginalFPA      | 2014     | 4         | medium         |\n| Evolutionary | Coral Reefs Optimization                  | CRO        | OriginalCRO      | 2014     | 11        | medium         |\n| Evolutionary | -                                         | -          | OCRO             | 2019     | 12        | medium         |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Swarm        | Particle Swarm Optimization               | PSO        | OriginalPSO      | 1995     | 6         | easy           |\n| Swarm        | -                                         | -          | PPSO             | 2019     | 2         | medium         |\n| Swarm        | -                                         | -          | HPSO_TVAC        | 2017     | 4         | medium         |\n| Swarm        | -                                         | -          | C_PSO            | 2015     | 6         | medium         |\n| Swarm        | -                                         | -          | CL_PSO           | 2006     | 6         | medium         |\n| Swarm        | Bacterial Foraging Optimization           | BFO        | OriginalBFO      | 2002     | 10        | hard           |\n| Swarm        | -                                         | -          | ABFO             | 2019     | 8         | medium         |\n| Swarm        | Bees Algorithm                            | BeesA      | OriginalBeesA    | 2005     | 8         | medium         |\n| Swarm        | -                                         | -          | ProbBeesA        | 2015     | 5         | medium         |\n| Swarm        | Cat Swarm Optimization                    | CSO        | OriginalCSO      | 2006     | 11        | hard           |\n| Swarm        | Artificial Bee Colony                     | ABC        | OriginalABC      | 2007     | 8         | medium         |\n| Swarm        | Ant Colony Optimization                   | ACO-R      | OriginalACOR     | 2008     | 5         | easy           |\n| Swarm        | Cuckoo Search Algorithm                   | CSA        | OriginalCSA      | 2009     | 3         | medium         |\n| Swarm        | Firefly Algorithm                         | FFA        | OriginalFFA      | 2009     | 8         | easy           |\n| Swarm        | Fireworks Algorithm                       | FA         | OriginalFA       | 2010     | 7         | medium         |\n| Swarm        | Bat Algorithm                             | BA         | OriginalBA       | 2010     | 6         | medium         |\n| Swarm        | -                                         | -          | AdaptiveBA       | -        | 8         | medium         |\n| Swarm        | -                                         | -          | ModifiedBA       | -        | 5         | medium         |\n| Swarm        | Fruit-fly Optimization Algorithm          | FOA        | OriginalFOA      | 2012     | 2         | easy           |\n| Swarm        | -                                         | -          | BaseFOA          | -        | 2         | easy           |\n| Swarm        | -                                         | -          | WhaleFOA         | 2020     | 2         | medium         |\n| Swarm        | Social Spider Optimization                | SSpiderO   | OriginalSSpiderO | 2018     | 4         | hard*          |\n| Swarm        | Grey Wolf Optimizer                       | GWO        | OriginalGWO      | 2014     | 2         | easy           |\n| Swarm        | -                                         | -          | RW_GWO           | 2019     | 2         | easy           |\n| Swarm        | Social Spider Algorithm                   | SSpiderA   | OriginalSSpiderA | 2015     | 5         | medium         |\n| Swarm        | Ant Lion Optimizer                        | ALO        | OriginalALO      | 2015     | 2         | easy           |\n| Swarm        | -                                         | -          | BaseALO          | -        | 2         | easy           |\n| Swarm        | Moth Flame Optimization                   | MFO        | OriginalMFO      | 2015     | 2         | easy           |\n| Swarm        | -                                         | -          | BaseMFO          | -        | 2         | easy           |\n| Swarm        | Elephant Herding Optimization             | EHO        | OriginalEHO      | 2015     | 5         | easy           |\n| Swarm        | Jaya Algorithm                            | JA         | OriginalJA       | 2016     | 2         | easy           |\n| Swarm        | -                                         | -          | BaseJA           | -        | 2         | easy           |\n| Swarm        | -                                         | -          | LevyJA           | 2021     | 2         | easy           |\n| Swarm        | Whale Optimization Algorithm              | WOA        | OriginalWOA      | 2016     | 2         | medium         |\n| Swarm        | -                                         | -          | HI_WOA           | 2019     | 3         | medium         |\n| Swarm        | Dragonfly Optimization                    | DO         | OriginalDO       | 2016     | 2         | medium         |\n| Swarm        | Bird Swarm Algorithm                      | BSA        | OriginalBSA      | 2016     | 9         | medium         |\n| Swarm        | Spotted Hyena Optimizer                   | SHO        | OriginalSHO      | 2017     | 4         | medium         |\n| Swarm        | Salp Swarm Optimization                   | SSO        | OriginalSSO      | 2017     | 2         | easy           |\n| Swarm        | Swarm Robotics Search And Rescue          | SRSR       | OriginalSRSR     | 2017     | 2         | hard*          |\n| Swarm        | Grasshopper Optimisation Algorithm        | GOA        | OriginalGOA      | 2017     | 4         | easy           |\n| Swarm        | Coyote Optimization Algorithm             | COA        | OriginalCOA      | 2018     | 3         | medium         |\n| Swarm        | Moth Search Algorithm                     | MSA        | OriginalMSA      | 2018     | 5         | easy           |\n| Swarm        | Sea Lion Optimization                     | SLO        | OriginalSLO      | 2019     | 2         | medium         |\n| Swarm        | -                                         | -          | ModifiedSLO      | -        | 2         | medium         |\n| Swarm        | -                                         | -          | ImprovedSLO      | -        | 4         | medium         |\n| Swarm        | Nake Mole-Rat Algorithm                   | NMRA       | OriginalNMRA     | 2019     | 3         | easy           |\n| Swarm        | -                                         | -          | ImprovedNMRA     | -        | 4         | medium         |\n| Swarm        | Pathfinder Algorithm                      | PFA        | OriginalPFA      | 2019     | 2         | medium         |\n| Swarm        | Sailfish Optimizer                        | SFO        | OriginalSFO      | 2019     | 5         | easy           |\n| Swarm        | -                                         | -          | ImprovedSFO      | -        | 3         | medium         |\n| Swarm        | Harris Hawks Optimization                 | HHO        | OriginalHHO      | 2019     | 2         | medium         |\n| Swarm        | Manta Ray Foraging Optimization           | MRFO       | OriginalMRFO     | 2020     | 3         | medium         |\n| Swarm        | Bald Eagle Search                         | BES        | OriginalBES      | 2020     | 7         | easy           |\n| Swarm        | Sparrow Search Algorithm                  | SSA        | OriginalSSA      | 2020     | 5         | medium         |\n| Swarm        | -                                         | -          | BaseSSA          | -        | 5         | medium         |\n| Swarm        | Hunger Games Search                       | HGS        | OriginalHGS      | 2021     | 4         | medium         |\n| Swarm        | Aquila Optimizer                          | AO         | OriginalAO       | 2021     | 2         | easy           |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Physics      | Simulated Annealling                      | SA         | OriginalSA       | 1987     | 9         | medium         |\n| Physics      | Wind Driven Optimization                  | WDO        | OriginalWDO      | 2013     | 7         | easy           |\n| Physics      | Multi-Verse Optimizer                     | MVO        | OriginalMVO      | 2016     | 4         | easy           |\n| Physics      | -                                         | -          | BaseMVO          | -        | 4         | easy           |\n| Physics      | Tug of War Optimization                   | TWO        | OriginalTWO      | 2016     | 2         | easy           |\n| Physics      | -                                         | -          | OppoTWO          | -        | 2         | medium         |\n| Physics      | -                                         | -          | LevyTWO          | -        | 2         | medium         |\n| Physics      | -                                         | -          | EnhancedTWO      | 2020     | 2         | medium         |\n| Physics      | Electromagnetic Field Optimization        | EFO        | OriginalEFO      | 2016     | 6         | easy           |\n| Physics      | -                                         | -          | BaseEFO          | -        | 6         | medium         |\n| Physics      | Nuclear Reaction Optimization             | NRO        | OriginalNRO      | 2019     | 2         | hard*          |\n| Physics      | Henry Gas Solubility Optimization         | HGSO       | OriginalHGSO     | 2019     | 3         | medium         |\n| Physics      | Atom Search Optimization                  | ASO        | OriginalASO      | 2019     | 4         | medium         |\n| Physics      | Equilibrium Optimizer                     | EO         | OriginalEO       | 2019     | 2         | easy           |\n| Physics      | -                                         | -          | ModifiedEO       | 2020     | 2         | medium         |\n| Physics      | -                                         | -          | AdaptiveEO       | 2020     | 2         | medium         |\n| Physics      | Archimedes Optimization Algorithm         | ArchOA     | OriginalArchOA   | 2021     | 8         | medium         |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Human        | Culture Algorithm                         | CA         | OriginalCA       | 1994     | 3         | easy           |\n| Human        | Imperialist Competitive Algorithm         | ICA        | OriginalICA      | 2007     | 8         | hard*          |\n| Human        | Teaching Learning-based Optimization      | TLO        | OriginalTLO      | 2011     | 2         | easy           |\n| Human        | -                                         | -          | BaseTLO          | 2012     | 2         | easy           |\n| Human        | -                                         | -          | ITLO             | 2013     | 3         | medium         |\n| Human        | Brain Storm Optimization                  | BSO        | OriginalBSO      | 2011     | 8         | medium         |\n| Human        | -                                         | -          | ImprovedBSO      | 2017     | 7         | medium         |\n| Human        | Queuing Search Algorithm                  | QSA        | OriginalQSA      | 2019     | 2         | hard           |\n| Human        | -                                         | -          | BaseQSA          | -        | 2         | hard           |\n| Human        | -                                         | -          | OppoQSA          | -        | 2         | hard           |\n| Human        | -                                         | -          | LevyQSA          | -        | 2         | hard           |\n| Human        | -                                         | -          | ImprovedQSA      | 2021     | 2         | hard           |\n| Human        | Search And Rescue Optimization            | SARO       | OriginalSARO     | 2019     | 4         | medium         |\n| Human        | -                                         | -          | BaseSARO         | -        | 4         | medium         |\n| Human        | Life Choice-Based Optimization            | LCO        | OriginalLCO      | 2019     | 3         | easy           |\n| Human        | -                                         | -          | BaseLCO          | -        | 3         | easy           |\n| Human        | -                                         | -          | ImprovedLCO      | -        | 2         | easy           |\n| Human        | Social Ski-Driver Optimization            | SSDO       | OriginalSSDO     | 2019     | 2         | easy           |\n| Human        | Gaining Sharing Knowledge-based Algorithm | GSKA       | OriginalGSKA     | 2019     | 6         | medium         |\n| Human        | -                                         | -          | BaseGSKA         | -        | 4         | medium         |\n| Human        | Coronavirus Herd Immunity Optimization    | CHIO       | OriginalCHIO     | 2020     | 4         | medium         |\n| Human        | -                                         | -          | BaseCHIO         | -        | 4         | medium         |\n| Human        | Forensic-Based Investigation Optimization | FBIO       | OriginalFBIO     | 2020     | 2         | medium         |\n| Human        | -                                         | -          | BaseFBIO         | -        | 2         | medium         |\n| Human        | Battle Royale Optimization                | BRO        | OriginalBRO      | 2020     | 3         | medium         |\n| Human        | -                                         | -          | BaseBRO          | -        | 3         | medium         |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Bio          | Invasive Weed Optimization                | IWO        | OriginalIWO      | 2006     | 7         | easy           |\n| Bio          | Biogeography-Based Optimization           | BBO        | OriginalBBO      | 2008     | 4         | easy           |\n| Bio          | -                                         | -          | BaseBBO          | -        | 4         | easy           |\n| Bio          | Virus Colony Search                       | VCS        | OriginalVCS      | 2016     | 4         | hard*          |\n| Bio          | -                                         | -          | BaseVCS          | -        | 4         | hard*          |\n| Bio          | Satin Bowerbird Optimizer                 | SBO        | OriginalSBO      | 2017     | 5         | easy           |\n| Bio          | -                                         | -          | BaseSBO          | -        | 5         | easy           |\n| Bio          | Earthworm Optimisation Algorithm          | EOA        | OriginalEOA      | 2018     | 8         | medium         |\n| Bio          | Wildebeest Herd Optimization              | WHO        | OriginalWHO      | 2019     | 12        | hard           |\n| Bio          | Slime Mould Algorithm                     | SMA        | OriginalSMA      | 2020     | 3         | easy           |\n| Bio          | -                                         | -          | BaseSMA          | -        | 3         | easy           |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| System       | Germinal Center Optimization              | GCO        | OriginalGCO      | 2018     | 4         | medium         |\n| System       | -                                         | -          | BaseGCO          | -        | 4         | medium         |\n| System       | Water Cycle Algorithm                     | WCA        | OriginalWCA      | 2012     | 5         | medium         |\n| System       | Artificial Ecosystem-based Optimization   | AEO        | OriginalAEO      | 2019     | 2         | easy           |\n| System       | -                                         | -          | EnhancedAEO      | 2020     | 2         | medium         |\n| System       | -                                         | -          | ModifiedAEO      | 2020     | 2         | medium         |\n| System       | -                                         | -          | ImprovedAEO      | 2021     | 2         | medium         |\n| System       | -                                         | -          | AdaptiveAEO      | -        | 2         | medium         |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Math         | Hill Climbing                             | HC         | OriginalHC       | 1993     | 3         | easy           |\n| Math         | -                                         | -          | SwarmHC          | -        | 3         | easy           |\n| Math         | Cross-Entropy Method                      | CEM        | OriginalCEM      | 1997     | 4         | easy           |\n| Math         | Sine Cosine Algorithm                     | SCA        | OriginalSCA      | 2016     | 2         | easy           |\n| Math         | -                                         | -          | BaseSCA          | -        | 2         | easy           |\n| Math         | Gradient-Based Optimizer                  | GBO        | OriginalGBO      | 2020     | 5         | medium         |\n| Math         | Arithmetic Optimization Algorithm         | AOA        | OrginalAOA       | 2021     | 6         | easy           |\n| Math         | Chaos Game Optimization                   | CGO        | OriginalCGO      | 2021     | 2         | easy           |\n| Math         | Pareto-like Sequential Sampling           | PSS        | OriginalPSS      | 2021     | 4         | medium         |\n| -            | -                                         | -          | -                | -        | -         | -              |\n| Music        | Harmony Search                            | HS         | OriginalHS       | 2001     | 4         | easy           |\n| Music        | -                                         | -          | BaseHS           | -        | 4         | easy           |\n\n\n\n\n### A\n\n* **ABC - Artificial Bee Colony**\n  * **OriginalABC**: Karaboga, D. (2005). An idea based on honey bee swarm for numerical optimization (Vol. 200, pp. 1-10). Technical report-tr06, Erciyes university, engineering faculty, computer engineering department.\n\n* **ACOR - Ant Colony Optimization**. \n  * **OriginalACOR**: Socha, K., & Dorigo, M. (2008). Ant colony optimization for continuous domains. European journal of operational research, 185(3), 1155-1173.\n\n* **ALO - Ant Lion Optimizer** \n  * **OriginalALO**: Mirjalili S (2015). “The Ant Lion Optimizer.” Advances in Engineering Software, 83, 80-98. doi: [10.1016/j.advengsoft.2015.01.010](https://doi.org/10.1016/j.advengsoft.2015.01.010)\n  * **BaseALO**: The developed version\n\n* **AEO - Artificial Ecosystem-based Optimization** \n  * **OriginalAEO**: Zhao, W., Wang, L., & Zhang, Z. (2019). Artificial ecosystem-based optimization: a novel nature-inspired meta-heuristic algorithm. Neural Computing and Applications, 1-43.\n  * **AdaptiveAEO**: The adaptive version\n  * **ImprovedAEO**: Rizk-Allah, R. M., & El-Fergany, A. A. (2020). Artificial ecosystem optimizer for parameters identification of proton exchange membrane fuel cells model. International Journal of Hydrogen Energy.\n  * **EnhancedAEO**: Eid, A., Kamel, S., Korashy, A., & Khurshaid, T. (2020). An Enhanced Artificial Ecosystem-Based Optimization for Optimal Allocation of Multiple Distributed Generations. IEEE Access, 8, 178493-178513.\n  * **ModifiedAEO**: Menesy, A. S., Sultan, H. M., Korashy, A., Banakhr, F. A., Ashmawy, M. G., & Kamel, S. (2020). Effective parameter extraction of different polymer electrolyte membrane fuel cell stack models using a modified artificial ecosystem optimization algorithm. IEEE Access, 8, 31892-31909.\n\n* **ASO - Atom Search Optimization**   \n  * **OriginalASO**: Zhao, W., Wang, L., & Zhang, Z. (2019). Atom search optimization and its application to solve a hydrogeologic parameter estimation problem. Knowledge-Based Systems, 163, 283-304.\n\n* **ArchOA - Archimedes Optimization Algorithm**\n  * **OriginalArchOA**: Hashim, F. A., Hussain, K., Houssein, E. H., Mabrouk, M. S., & Al-Atabany, W. (2021). Archimedes optimization algorithm: a new metaheuristic algorithm for solving optimization problems. Applied Intelligence, 51(3), 1531-1551.\n\n* **AOA - Arithmetic Optimization Algorithm**\n  * **OriginalAOA**: Abualigah, L., Diabat, A., Mirjalili, S., Abd Elaziz, M., & Gandomi, A. H. (2021). The arithmetic optimization algorithm. Computer methods in applied mechanics and engineering, 376, 113609.\n\n* **AO - Aquila Optimizer**\n  * **OriginalAO**: Abualigah, L., Yousri, D., Abd Elaziz, M., Ewees, A. A., Al-qaness, M. A., & Gandomi, A. H. (2021). Aquila Optimizer: A novel meta-heuristic optimization Algorithm. Computers & Industrial Engineering, 157, 107250.\n\n### B\n\n\n* **BFO - Bacterial Foraging Optimization** \n  * **OriginalBFO**: Passino, K. M. (2002). Biomimicry of bacterial foraging for distributed optimization and control. IEEE control systems magazine, 22(3), 52-67.\n  * **ABFO**: Nguyen, T., Nguyen, B. M., & Nguyen, G. (2019, April). Building resource auto-scaler with functional-link neural network and adaptive bacterial foraging optimization. In International Conference on Theory and Applications of Models of Computation (pp. 501-517). Springer, Cham.\n\n* **BeesA - Bees Algorithm** \n  * **OriginalBeesA**: Pham, D. T., Ghanbarzadeh, A., Koc, E., Otri, S., Rahim, S., & Zaidi, M. (2005). The bees algorithm. Technical Note, Manufacturing Engineering Centre, Cardiff University, UK.\n  * **ProbBeesA**: The probabilitic version of: Pham, D. T., Ghanbarzadeh, A., Koç, E., Otri, S., Rahim, S., & Zaidi, M. (2006). The bees algorithm—a novel tool for complex optimisation problems. In Intelligent production machines and systems (pp. 454-459). Elsevier Science Ltd.\n\n* **BBO - Biogeography-Based Optimization** \n  * **OriginalBBO**: Simon, D. (2008). Biogeography-based optimization. IEEE transactions on evolutionary computation, 12(6), 702-713.\n  * **BaseBBO**: The developed version\n\n* **BA - Bat Algorithm** \n  * **OriginalBA**: Yang, X. S. (2010). A new metaheuristic bat-inspired algorithm. In Nature inspired cooperative strategies for optimization (NICSO 2010) (pp. 65-74). Springer, Berlin, Heidelberg.\n  * **AdaptiveBA**: Wang, X., Wang, W. and Wang, Y., 2013, July. An adaptive bat algorithm. In International Conference on Intelligent Computing(pp. 216-223). Springer, Berlin, Heidelberg.\n  * **ModifiedBA**: Dong, H., Li, T., Ding, R. and Sun, J., 2018. A novel hybrid genetic algorithm with granular information for feature selection and optimization. Applied Soft Computing, 65, pp.33-46.\n\n* **BSO - Brain Storm Optimization** \n  * **OriginalBSO**: . Shi, Y. (2011, June). Brain storm optimization algorithm. In International conference in swarm intelligence (pp. 303-309). Springer, Berlin, Heidelberg.\n  * **ImprovedBSO**: El-Abd, M., 2017. Global-best brain storm optimization algorithm. Swarm and evolutionary computation, 37, pp.27-44.\n\n* **BSA - Bird Swarm Algorithm** \n  * **OriginalBSA**: Meng, X. B., Gao, X. Z., Lu, L., Liu, Y., & Zhang, H. (2016). A new bio-inspired optimisation algorithm:Bird Swarm Algorithm. Journal of Experimental & Theoretical Artificial Intelligence, 28(4), 673-687.\n\n* **BES - Bald Eagle Search** \n  * **OriginalBES**: Alsattar, H. A., Zaidan, A. A., & Zaidan, B. B. (2019). Novel meta-heuristic bald eagle search optimisation algorithm. Artificial Intelligence Review, 1-28.\n\n* **BRO - Battle Royale Optimization**\n  * **OriginalBRO**: Rahkar Farshi, T. (2020). Battle royale optimization algorithm. Neural Computing and Applications, 1-19.\n  * **BaseBRO**: The developed version\n\n### C\n\n* **CA - Culture Algorithm** \n  * **OriginalCA**: Reynolds, R.G., 1994, February. An introduction to cultural algorithms. In Proceedings of the third annual conference on evolutionary programming (Vol. 24, pp. 131-139). River Edge, NJ: World Scientific.\n\n* **CEM - Cross Entropy Method**\n  * **OriginalCEM**: Rubinstein, R. (1999). The cross-entropy method for combinatorial and continuous optimization. Methodology and computing in applied probability, 1(2), 127-190.\n\n* **CSO - Cat Swarm Optimization** \n  * **OriginalCSO**: Chu, S. C., Tsai, P. W., & Pan, J. S. (2006, August). Cat swarm optimization. In Pacific Rim international conference on artificial intelligence (pp. 854-858). Springer, Berlin, Heidelberg.\n\n* **CSA - Cuckoo Search Algorithm** \n  * **OriginalCSA**: Yang, X. S., & Deb, S. (2009, December). Cuckoo search via Lévy flights. In 2009 World congress on nature & biologically inspired computing (NaBIC) (pp. 210-214). Ieee.\n\n* **CRO - Coral Reefs Optimization** \n  * **OriginalCRO**: Salcedo-Sanz, S., Del Ser, J., Landa-Torres, I., Gil-López, S., & Portilla-Figueras, J. A. (2014). The coral reefs optimization algorithm: a novel metaheuristic for efficiently solving optimization problems. The Scientific World Journal, 2014.\n  * **OCRO**: Nguyen, T., Nguyen, T., Nguyen, B. M., & Nguyen, G. (2019). Efficient time-series forecasting using neural network and opposition-based coral reefs optimization. International Journal of Computational Intelligence Systems, 12(2), 1144-1161.\n\n* **COA - Coyote Optimization Algorithm**\n  * **OriginalCOA**: Pierezan, J., & Coelho, L. D. S. (2018, July). Coyote optimization algorithm: a new metaheuristic for global optimization problems. In 2018 IEEE congress on evolutionary computation (CEC) (pp. 1-8). IEEE.\n\n* **CHIO - Coronavirus Herd Immunity Optimization**\n  * **OriginalCHIO**: Al-Betar, M. A., Alyasseri, Z. A. A., Awadallah, M. A., & Abu Doush, I. (2021). Coronavirus herd immunity optimizer (CHIO). Neural Computing and Applications, 33(10), 5011-5042.\n  * **BaseCHIO**: The developed version\n\n* **CGO - Chaos Game Optimization** \n  * **OriginalCGO**: Talatahari, S., & Azizi, M. (2021). Chaos Game Optimization: a novel metaheuristic algorithm. Artificial Intelligence Review, 54(2), 917-1004.\n\n### D\n\n* **DE - Differential Evolution** \n  * **BaseDE**: Storn, R., & Price, K. (1997). Differential evolution–a simple and efficient heuristic for global optimization over continuous spaces. Journal of global optimization, 11(4), 341-359.\n  * **JADE**: Zhang, J., & Sanderson, A. C. (2009). JADE: adaptive differential evolution with optional external archive. IEEE Transactions on evolutionary computation, 13(5), 945-958.\n  * **SADE**: Qin, A. K., & Suganthan, P. N. (2005, September). Self-adaptive differential evolution algorithm for numerical optimization. In 2005 IEEE congress on evolutionary computation (Vol. 2, pp. 1785-1791). IEEE.\n  * **SHADE**: Tanabe, R., & Fukunaga, A. (2013, June). Success-history based parameter adaptation for differential evolution. In 2013 IEEE congress on evolutionary computation (pp. 71-78). IEEE.\n  * **L_SHADE**: Tanabe, R., & Fukunaga, A. S. (2014, July). Improving the search performance of SHADE using linear population size reduction. In 2014 IEEE congress on evolutionary computation (CEC) (pp. 1658-1665). IEEE.\n  * **SAP_DE**: Teo, J. (2006). Exploring dynamic self-adaptive populations in differential evolution. Soft Computing, 10(8), 673-686.\n\n* **DSA - Differential Search Algorithm (not done)** \n  * **BaseDSA**: Civicioglu, P. (2012). Transforming geocentric cartesian coordinates to geodetic coordinates by using differential search algorithm. Computers & Geosciences, 46, 229-247.\n\n* **DO - Dragonfly Optimization** \n  * **OriginalDO**: Mirjalili, S. (2016). Dragonfly algorithm: a new meta-heuristic optimization technique for solving single-objective, discrete, and multi-objective problems. Neural Computing and Applications, 27(4), 1053-1073.\n\n\n### E\n\n* **ES - Evolution Strategies** . \n  * **OriginalES**: Schwefel, H. P. (1984). Evolution strategies: A family of non-linear optimization techniques based on imitating some principles of organic evolution. Annals of Operations Research, 1(2), 165-167.\n  * **LevyES**: Zhang, S., & Salari, E. (2005). Competitive learning vector quantization with evolution strategies for image compression. Optical Engineering, 44(2), 027006.\n\n* **EP - Evolutionary programming** . \n  * **OriginalEP**: Fogel, L. J. (1994). Evolutionary programming in perspective: The top-down view. Computational intelligence: Imitating life.\n  * **LevyEP**: Lee, C.Y. and Yao, X., 2001, May. Evolutionary algorithms with adaptive lévy mutations. In Proceedings of the 2001 congress on evolutionary computation (IEEE Cat. No. 01TH8546) (Vol. 1, pp. 568-575). IEEE.\n\n* **EHO - Elephant Herding Optimization** . \n  * **OriginalEHO**: Wang, G. G., Deb, S., & Coelho, L. D. S. (2015, December). Elephant herding optimization. In 2015 3rd International Symposium on Computational and Business Intelligence (ISCBI) (pp. 1-5). IEEE.\n\n* **EFO - Electromagnetic Field Optimization** . \n  * **OriginalEFO**:Abedinpourshotorban, H., Shamsuddin, S. M., Beheshti, Z., & Jawawi, D. N. (2016). Electromagnetic field optimization: A physics-inspired metaheuristic optimization algorithm. Swarm and Evolutionary Computation, 26, 8-22.\n  * **BaseEFO**: The developed version\n\n* **EOA - Earthworm Optimisation Algorithm** . \n  * **OriginalEOA**: Wang, G. G., Deb, S., & dos Santos Coelho, L. (2018). Earthworm optimisation algorithm: a bio-inspired metaheuristic algorithm for global optimisation problems. IJBIC, 12(1), 1-22.\n\n* **EO - Equilibrium Optimizer** . \n  * **OriginalEO**: Faramarzi, A., Heidarinejad, M., Stephens, B., & Mirjalili, S. (2019). Equilibrium optimizer: A novel optimization algorithm. Knowledge-Based Systems.\n  * **ModifiedEO**: Gupta, S., Deep, K., & Mirjalili, S. (2020). An efficient equilibrium optimizer with mutation strategy for numerical optimization. Applied Soft Computing, 96, 106542.\n  * **AdaptiveEO**: Wunnava, A., Naik, M. K., Panda, R., Jena, B., & Abraham, A. (2020). A novel interdependence based multilevel thresholding technique using adaptive equilibrium optimizer. Engineering Applications of Artificial Intelligence, 94, 103836.\n\n### F\n\n* **FFA - Firefly Algorithm** \n  * **OriginalFFA**: Łukasik, S., & Żak, S. (2009, October). Firefly algorithm for continuous constrained optimization tasks. In International conference on computational collective intelligence (pp. 97-106). Springer, Berlin, Heidelberg.\n\n* **FA - Fireworks algorithm** \n  * **OriginalFA**: Tan, Y., & Zhu, Y. (2010, June). Fireworks algorithm for optimization. In International conference in swarm intelligence (pp. 355-364). Springer, Berlin, Heidelberg.\n\n* **FPA - Flower Pollination Algorithm** \n  * **OriginalFPA**: Yang, X. S. (2012, September). Flower pollination algorithm for global optimization. In International conference on unconventional computing and natural computation (pp. 240-249). Springer, Berlin, Heidelberg.\n\n* **FBIO - Forensic-Based Investigation Optimization** \n  * **OriginalFBIO**: Chou, J.S. and Nguyen, N.M., 2020. FBI inspired meta-optimization. Applied Soft Computing, p.106339.\n  * **BaseFBIO**: Fathy, A., Rezk, H. and Alanazi, T.M., 2021. Recent approach of forensic-based investigation algorithm for optimizing fractional order PID-based MPPT with proton exchange membrane fuel cell.IEEE Access,9, pp.18974-18992.\n\n* **FOA - Fruit-fly Optimization Algorithm**\n  * **OriginalFOA**: Pan, W. T. (2012). A new fruit fly optimization algorithm: taking the financial distress model as an example. Knowledge-Based Systems, 26, 69-74.\n  * **BaseFOA**: The developed version\n  * **WhaleFOA**: Fan, Y., Wang, P., Heidari, A. A., Wang, M., Zhao, X., Chen, H., & Li, C. (2020). Boosted hunting-based fruit fly optimization and advances in real-world problems. Expert Systems with Applications, 159, 113502.\n\n\n### G\n\n* **GA - Genetic Algorithm** \n  * **BaseGA**: Holland, J. H. (1992). Genetic algorithms. Scientific american, 267(1), 66-73.\n  * **SingleGA**: De Falco, I., Della Cioppa, A. and Tarantino, E., 2002. Mutation-based genetic algorithm: performance evaluation. Applied Soft Computing, 1(4), pp.285-299.\n  * **MultiGA**: De Jong, K.A. and Spears, W.M., 1992. A formal analysis of the role of multi-point crossover in genetic algorithms. Annals of mathematics and Artificial intelligence, 5(1), pp.1-26.\n\n* **GWO - Grey Wolf Optimizer** \n  * **OriginalGWO**: Mirjalili, S., Mirjalili, S. M., & Lewis, A. (2014). Grey wolf optimizer. Advances in engineering software, 69, 46-61.\n  * **RW_GWO**: Gupta, S., & Deep, K. (2019). A novel random walk grey wolf optimizer. Swarm and evolutionary computation, 44, 101-112.\n\n* **GOA - Grasshopper Optimisation Algorithm** \n  * **OriginalGOA**: Saremi, S., Mirjalili, S., & Lewis, A. (2017). Grasshopper optimisation algorithm: theory and application. Advances in Engineering Software, 105, 30-47.\n\n* **GCO - Germinal Center Optimization** \n  * **OriginalGCO**: Villaseñor, C., Arana-Daniel, N., Alanis, A. Y., López-Franco, C., & Hernandez-Vargas, E. A. (2018). Germinal center optimization algorithm. International Journal of Computational Intelligence Systems, 12(1), 13-27.\n  * **BaseGCO**: The developed version\n\n* **GSKA - Gaining Sharing Knowledge-based Algorithm** \n  * **OriginalGSKA**: Mohamed, A. W., Hadi, A. A., & Mohamed, A. K. (2019). Gaining-sharing knowledge based algorithm for solving optimization problems: a novel nature-inspired algorithm. International Journal of Machine Learning and Cybernetics, 1-29.\n  * **BaseGSKA**: Mohamed, A.W., Hadi, A.A., Mohamed, A.K. and Awad, N.H., 2020, July. Evaluating the performance of adaptive GainingSharing knowledge based algorithm on CEC 2020 benchmark problems. In 2020 IEEE Congress on Evolutionary Computation (CEC) (pp. 1-8). IEEE.\n\n* **GBO - Gradient-Based Optimizer**\n  * **OriginalGBO**: Ahmadianfar, I., Bozorg-Haddad, O., & Chu, X. (2020). Gradient-based optimizer: A new metaheuristic optimization algorithm. Information Sciences, 540, 131-159.\n\n### H\n\n* **HC - Hill Climbing** . \n  * **OriginalHC**: Talbi, E. G., & Muntean, T. (1993, January). Hill-climbing, simulated annealing and genetic algorithms: a comparative study and application to the mapping problem. In [1993] Proceedings of the Twenty-sixth Hawaii International Conference on System Sciences (Vol. 2, pp. 565-573). IEEE.\n  * **SwarmHC**: The developed version based on swarm-based idea (Original is single-solution based method)\n\n* **HS - Harmony Search** . \n  * **OriginalHS**: Geem, Z. W., Kim, J. H., & Loganathan, G. V. (2001). A new heuristic optimization algorithm:harmony search. simulation, 76(2), 60-68.\n  * **BaseHS**: The developed version\n\n* **HHO - Harris Hawks Optimization** . \n  * **OriginalHHO**: Heidari, A. A., Mirjalili, S., Faris, H., Aljarah, I., Mafarja, M., & Chen, H. (2019). Harris hawks optimization: Algorithm and applications. Future Generation Computer Systems, 97, 849-872.\n\n* **HGSO - Henry Gas Solubility Optimization** . \n  * **OriginalHGSO**: Hashim, F. A., Houssein, E. H., Mabrouk, M. S., Al-Atabany, W., & Mirjalili, S. (2019). Henry gas solubility optimization: A novel physics-based algorithm. Future Generation Computer Systems, 101, 646-667.\n\n* **HGS - Hunger Games Search** . \n  * **OriginalHGS**: Yang, Y., Chen, H., Heidari, A. A., & Gandomi, A. H. (2021). Hunger games search:Visions, conception, implementation, deep analysis, perspectives, and towards performance shifts. Expert Systems with Applications, 177, 114864.\n\n* **HHOA - Horse Herd Optimization Algorithm (not done)** . \n  * **BaseHHOA**: MiarNaeimi, F., Azizyan, G., & Rashki, M. (2021). Horse herd optimization algorithm: A nature-inspired algorithm for high-dimensional optimization problems. Knowledge-Based Systems, 213, 106711.\n\n\n### I\n\n* **IWO - Invasive Weed Optimization** . \n  * **OriginalIWO**: Mehrabian, A. R., & Lucas, C. (2006). A novel numerical optimization algorithm inspired from weed colonization. Ecological informatics, 1(4), 355-366.\n\n* **ICA - Imperialist Competitive Algorithm** \n  * **OriginalICA**: Atashpaz-Gargari, E., & Lucas, C. (2007, September). Imperialist competitive algorithm: an algorithm for optimization inspired by imperialistic competition. In 2007 IEEE congress on evolutionary computation (pp. 4661-4667). Ieee.\n\n### J\n\n* **JA - Jaya Algorithm** \n  * **OriginalJA**: Rao, R. (2016). Jaya: A simple and new optimization algorithm for solving constrained and unconstrained optimization problems. International Journal of Industrial Engineering Computations, 7(1), 19-34.\n  * **BaseJA**: The developed version\n  * **LevyJA**: Iacca, G., dos Santos Junior, V. C., & de Melo, V. V. (2021). An improved Jaya optimization algorithm with Levy flight. Expert Systems with Applications, 165, 113902.\n\n### K\n\n### L\n\n* **LCO - Life Choice-based Optimization** \n  * **OriginalLCO**: Khatri, A., Gaba, A., Rana, K. P. S., & Kumar, V. (2019). A novel life choice-based optimizer. Soft Computing, 1-21.\n  * **BaseLCO**: The developed version\n  * **ImprovedLCO**: The improved version using Gaussian distribution and Mutation Mechanism\n\n\n### M\n\n* **MA - Memetic Algorithm**\n  * **OriginalMA**: Moscato, P. (1989). On evolution, search, optimization, genetic algorithms and martial arts: Towards memetic algorithms. Caltech concurrent computation program, C3P Report, 826, 1989.\n\n* **MFO - Moth Flame Optimization** \n  * **OriginalMFO**: Mirjalili, S. (2015). Moth-flame optimization algorithm: A novel nature-inspired heuristic paradigm. Knowledge-based systems, 89, 228-249.\n  * **BaseMFO**: The developed version\n\n* **MVO - Multi-Verse Optimizer** \n  * **OriginalMVO**: Mirjalili, S., Mirjalili, S. M., & Hatamlou, A. (2016). Multi-verse optimizer: a nature-inspired algorithm for global optimization. Neural Computing and Applications, 27(2), 495-513.\n  * **BaseMVO**: The developed version\n\n* **MSA - Moth Search Algorithm** \n  * **OriginalMSA**: Wang, G. G. (2018). Moth search algorithm: a bio-inspired metaheuristic algorithm for global optimization problems. Memetic Computing, 10(2), 151-164.\n\n* **MRFO - Manta Ray Foraging Optimization** \n  * **OriginalMRFO**: Zhao, W., Zhang, Z., & Wang, L. (2020). Manta ray foraging optimization: An effective bio-inspired optimizer for engineering applications. Engineering Applications of Artificial Intelligence, 87, 103300.\n\n\n### N\n\n\n* **NRO - Nuclear Reaction Optimization** \n  * **OriginalNRO**: Wei, Z., Huang, C., Wang, X., Han, T., & Li, Y. (2019). Nuclear Reaction Optimization: A novel and powerful physics-based algorithm for global optimization. IEEE Access. \n\n* **NMRA - Nake Mole-Rat Algorithm**\n  * **OriginalNMRA**: Salgotra, R., & Singh, U. (2019). The naked mole-rat algorithm. Neural Computing and Applications, 31(12), 8837-8857.\n  * **ImprovedNMRA**: Singh, P., Mittal, N., Singh, U. and Salgotra, R., 2021. Naked mole-rat algorithm with improved exploration and exploitation capabilities to determine 2D and 3D coordinates of sensor nodes in WSNs. Arabian Journal for Science and Engineering, 46(2), pp.1155-1178.\n\n\n### O\n\n### P\n\n* **PSO - Particle Swarm Optimization** \n  * **OriginalPSO**: Eberhart, R., & Kennedy, J. (1995, October). A new optimizer using particle swarm theory. In MHS'95. Proceedings of the Sixth International Symposium on Micro Machine and Human Science (pp. 39-43). Ieee.\n  * **PPSO**: Ghasemi, M., Akbari, E., Rahimnejad, A., Razavi, S. E., Ghavidel, S., & Li, L. (2019). Phasor particle swarm optimization: a simple and efficient variant of PSO. Soft Computing, 23(19), 9701-9718.\n  * **HPSO_TVAC**: Ghasemi, M., Aghaei, J., & Hadipour, M. (2017). New self-organising hierarchical PSO with jumping time-varying acceleration coefficients. Electronics Letters, 53(20), 1360-1362.\n  * **C_PSO**: Liu, B., Wang, L., Jin, Y. H., Tang, F., & Huang, D. X. (2005). Improved particle swarm optimization combined with chaos. Chaos, Solitons & Fractals, 25(5), 1261-1271.\n  * **CL_PSO**: Liang, J. J., Qin, A. K., Suganthan, P. N., & Baskar, S. (2006). Comprehensive learning particle swarm optimizer for global optimization of multimodal functions. IEEE transactions on evolutionary computation, 10(3), 281-295.\n\n* **PFA - Pathfinder Algorithm** \n  * **OriginalPFA**: Yapici, H., & Cetinkaya, N. (2019). A new meta-heuristic optimizer: Pathfinder algorithm. Applied Soft Computing, 78, 545-568.\n\n* **PSS - Pareto-like Sequential Sampling**\n  * **OriginalPSS**: Shaqfa, M., & Beyer, K. (2021). Pareto-like sequential sampling heuristic for global optimisation. Soft Computing, 25(14), 9077-9096.\n\n\n### Q\n\n* **QSA - Queuing Search Algorithm** \n  * **OriginalQSA**: Zhang, J., Xiao, M., Gao, L., & Pan, Q. (2018). Queuing search algorithm: A novel metaheuristic algorithm for solving engineering optimization problems. Applied Mathematical Modelling, 63, 464-490.\n  * **BaseQSA**: The developed version\n  * **OppoQSA**: Zheng, X. and Nguyen, H., 2022. A novel artificial intelligent model for predicting water treatment efficiency of various biochar systems based on artificial neural network and queuing search algorithm. Chemosphere, 287, p.132251.\n  * **LevyQSA**: Abderazek, H., Hamza, F., Yildiz, A.R., Gao, L. and Sait, S.M., 2021. A comparative analysis of the queuing search algorithm, the sine-cosine algorithm, the ant lion algorithm to determine the optimal weight design problem of a spur gear drive system. Materials Testing, 63(5), pp.442-447.\n  * **ImprovedQSA**: Nguyen, B.M., Hoang, B., Nguyen, T. and Nguyen, G., 2021. nQSV-Net: a novel queuing search variant for global space search and workload modeling. Journal of Ambient Intelligence and Humanized Computing, 12(1), pp.27-46.\n\n### R\n\n\n### S\n\n* **SA - Simulated Annealling** \n  * **OriginalSA**: . Van Laarhoven, P. J., & Aarts, E. H. (1987). Simulated annealing. In Simulated annealing: Theory and applications (pp. 7-15). Springer, Dordrecht.\n\n* **SSpiderO - Social Spider Optimization** \n  * **OriginalSSpiderO**: Cuevas, E., Cienfuegos, M., ZaldíVar, D., & Pérez-Cisneros, M. (2013). A swarm optimization algorithm inspired in the behavior of the social-spider. Expert Systems with Applications, 40(16), 6374-6384.\n\n* **SSpiderA - Social Spider Algorithm** \n  * **OriginalSSpiderA**: James, J. Q., & Li, V. O. (2015). A social spider algorithm for global optimization. Applied Soft Computing, 30, 614-627.\n\n* **SCA - Sine Cosine Algorithm** \n  * **OriginalSCA**: Mirjalili, S. (2016). SCA: a sine cosine algorithm for solving optimization problems. Knowledge-Based Systems, 96, 120-133.\n  * **BaseSCA**: Attia, A.F., El Sehiemy, R.A. and Hasanien, H.M., 2018. Optimal power flow solution in power systems using a novel Sine-Cosine algorithm. International Journal of Electrical Power & Energy Systems, 99, pp.331-343.\n\n* **SRSR - Swarm Robotics Search And Rescue** \n  * **OriginalSRSR**: Bakhshipour, M., Ghadi, M. J., & Namdari, F. (2017). Swarm robotics search & rescue: A novel artificial intelligence-inspired optimization approach. Applied Soft Computing, 57, 708-726.\n\n* **SBO - Satin Bowerbird Optimizer** \n  * **OriginalSBO**: Moosavi, S. H. S., & Bardsiri, V. K. (2017). Satin bowerbird optimizer: a new optimization algorithm to optimize ANFIS for software development effort estimation. Engineering Applications of Artificial Intelligence, 60, 1-15.\n  * **BaseSBO**: The developed version\n\n* **SHO - Spotted Hyena Optimizer**\n  * **OriginalSHO**: Dhiman, G., & Kumar, V. (2017). Spotted hyena optimizer: a novel bio-inspired based metaheuristic technique for engineering applications. Advances in Engineering Software, 114, 48-70.\n\n* **SSO - Salp Swarm Optimization**\n  * **OriginalSSO**: Mirjalili, S., Gandomi, A. H., Mirjalili, S. Z., Saremi, S., Faris, H., & Mirjalili, S. M. (2017). Salp Swarm Algorithm: A bio-inspired optimizer for engineering design problems. Advances in Engineering Software, 114, 163-191.\n\n* **SFO - Sailfish Optimizer** \n  * **OriginalSFO**: Shadravan, S., Naji, H. R., & Bardsiri, V. K. (2019). The Sailfish Optimizer: A novel nature-inspired metaheuristic algorithm for solving constrained engineering optimization problems. Engineering Applications of Artificial Intelligence, 80, 20-34.\n  * **ImprovedSFO**: Li, L.L., Shen, Q., Tseng, M.L. and Luo, S., 2021. Power system hybrid dynamic economic emission dispatch with wind energy based on improved sailfish algorithm. Journal of Cleaner Production, 316, p.128318.\n\n* **SARO - Search And Rescue Optimization** \n  * **OriginalSARO**: Shabani, A., Asgarian, B., Gharebaghi, S. A., Salido, M. A., & Giret, A. (2019). A New Optimization Algorithm Based on Search and Rescue Operations. Mathematical Problems in Engineering, 2019.\n  * **BaseSARO**: The developed version using Levy-flight\n\n* **SSDO - Social Ski-Driver Optimization** \n  * **OriginalSSDO**: Tharwat, A., & Gabel, T. (2019). Parameters optimization of support vector machines for imbalanced data using social ski driver algorithm. Neural Computing and Applications, 1-14.\n\n* **SLO - Sea Lion Optimization**\n  * **OriginalSLO**: Masadeh, R., Mahafzah, B. A., & Sharieh, A. (2019). Sea Lion Optimization Algorithm. Sea, 10(5).\n  * **ImprovedSLO**: The developed version\n  * **ModifiedSLO**: Masadeh, R., Alsharman, N., Sharieh, A., Mahafzah, B.A. and Abdulrahman, A., 2021. Task scheduling on cloud computing based on sea lion optimization algorithm. International Journal of Web Information Systems.\n\n* **SMA - Slime Mould Algorithm**\n  * **OriginalSMA**: Li, S., Chen, H., Wang, M., Heidari, A. A., & Mirjalili, S. (2020). Slime mould algorithm: A new method for stochastic optimization. Future Generation Computer Systems.\n  * **BaseSMA**: The developed version\n\n* **SSA - Sparrow Search Algorithm** \n  * **OriginalSSA**: Jiankai Xue & Bo Shen (2020) A novel swarm intelligence optimization approach: sparrow search algorithm, Systems Science & Control Engineering, 8:1, 22-34, DOI: 10.1080/21642583.2019.1708830\n  * **BaseSSA**: The developed version\n\n### T\n\n* **TLO - Teaching Learning Optimization** \n  * **OriginalTLO**: Rao, R. V., Savsani, V. J., & Vakharia, D. P. (2011). Teaching–learning-based optimization: a novel method for constrained mechanical design optimization problems. Computer-Aided Design, 43(3), 303-315.\n  * **BaseTLO**: Rao, R., & Patel, V. (2012). An elitist teaching-learning-based optimization algorithm for solving complex constrained optimization problems. International Journal of Industrial Engineering Computations, 3(4), 535-560.\n  * **ImprovedTLO**: Rao, R. V., & Patel, V. (2013). An improved teaching-learning-based optimization algorithm for solving unconstrained optimization problems. Scientia Iranica, 20(3), 710-720.\n\n* **TWO - Tug of War Optimization** \n  * **OriginalTWO**: Kaveh, A., & Zolghadr, A. (2016). A novel meta-heuristic algorithm: tug of war optimization. Iran University of Science & Technology, 6(4), 469-492.\n  * **OppoTWO**: Kaveh, A., Almasi, P. and Khodagholi, A., 2022. Optimum Design of Castellated Beams Using Four Recently Developed Meta-heuristic Algorithms. Iranian Journal of Science and Technology, Transactions of Civil Engineering, pp.1-13.\n  * **LevyTWO**: The developed version using Levy-flight\n  * **ImprovedTWO**: Nguyen, T., Hoang, B., Nguyen, G., & Nguyen, B. M. (2020). A new workload prediction model using extreme learning machine and enhanced tug of war optimization. Procedia Computer Science, 170, 362-369.\n\n### U\n\n### V\n\n* **VCS - Virus Colony Search** \n  * **OriginalVCS**: Li, M. D., Zhao, H., Weng, X. W., & Han, T. (2016). A novel nature-inspired algorithm for optimization: Virus colony search. Advances in Engineering Software, 92, 65-88.\n  * **BaseVCS**: The developed version\n\n### W\n\n* **WCA - Water Cycle Algorithm** \n  * **OriginalWCA**: Eskandar, H., Sadollah, A., Bahreininejad, A., & Hamdi, M. (2012). Water cycle algorithm–A novel metaheuristic optimization method for solving constrained engineering optimization problems. Computers & Structures, 110, 151-166.\n\n* **WOA - Whale Optimization Algorithm** \n  * **OriginalWOA**: Mirjalili, S., & Lewis, A. (2016). The whale optimization algorithm. Advances in engineering software, 95, 51-67.\n  * **HI_WOA**: Tang, C., Sun, W., Wu, W., & Xue, M. (2019, July). A hybrid improved whale optimization algorithm. In 2019 IEEE 15th International Conference on Control and Automation (ICCA) (pp. 362-367). IEEE.\n\n* **WHO - Wildebeest Herd Optimization** \n  * **OriginalWHO**: Amali, D., & Dinakaran, M. (2019). Wildebeest herd optimization: A new global optimization algorithm inspired by wildebeest herding behaviour. Journal of Intelligent & Fuzzy Systems, (Preprint), 1-14.\n\n* **WDO - Wind Driven Optimization** \n  * **OriginalWDO**: Bayraktar, Z., Komurcu, M., & Werner, D. H. (2010, July). Wind Driven Optimization (WDO): A novel nature-inspired optimization algorithm and its application to electromagnetics. In 2010 IEEE antennas and propagation society international symposium (pp. 1-4). IEEE.\n\n\n### X\n\n### Y\n\n### Z\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/thieu1995/mealpy/archive/v2.5.0.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thieu1995/mealpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mealpy",
    "package_url": "https://pypi.org/project/mealpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/mealpy/",
    "project_urls": {
      "Download": "https://github.com/thieu1995/mealpy/archive/v2.5.0.zip",
      "Homepage": "https://github.com/thieu1995/mealpy"
    },
    "release_url": "https://pypi.org/project/mealpy/2.5.0/",
    "requires_dist": [
      "numpy (>=1.16.5)",
      "matplotlib (>=3.1.3)",
      "scipy (>=1.7.1)",
      "opfunu (>=1.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "MEALPY: a Framework of The State-of-The-Art Meta-Heuristic Algorithms in Python",
    "version": "2.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17381416,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c12fbdf1a0a368c52d6a30b56b4931b28f75d3681636041c0d074fc7e9859ef",
        "md5": "419761aaca2ba84b220dc7d76388d1e3",
        "sha256": "d1d0c1759af6a4a6cfa775e537a460081928fdaf26ff3a19dc13a6e239bdc367"
      },
      "downloads": -1,
      "filename": "mealpy-2.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "419761aaca2ba84b220dc7d76388d1e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 350614,
      "upload_time": "2022-09-11T16:01:03",
      "upload_time_iso_8601": "2022-09-11T16:01:03.907008Z",
      "url": "https://files.pythonhosted.org/packages/8c/12/fbdf1a0a368c52d6a30b56b4931b28f75d3681636041c0d074fc7e9859ef/mealpy-2.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f07f54c2b77f532c4f9ad8215f2d268c96b4508fdf0b504b58fb2e7438652607",
        "md5": "f9da96a97a9fc700f70e59cced53c8f2",
        "sha256": "56d11d481594583f8ead22aa239341b975513c28e21a0a5a01920963594dc8b9"
      },
      "downloads": -1,
      "filename": "mealpy-2.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f9da96a97a9fc700f70e59cced53c8f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 227840,
      "upload_time": "2022-09-11T16:01:06",
      "upload_time_iso_8601": "2022-09-11T16:01:06.683547Z",
      "url": "https://files.pythonhosted.org/packages/f0/7f/54c2b77f532c4f9ad8215f2d268c96b4508fdf0b504b58fb2e7438652607/mealpy-2.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}