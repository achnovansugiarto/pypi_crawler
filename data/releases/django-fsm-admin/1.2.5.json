{
  "info": {
    "author": "G Adventures",
    "author_email": "software@gadventures.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "django-fsm-admin\n================\n\nMixin and template tags to integrate django-fsm_ state transitions into the\nDjango Admin.\n\nInstallation\n------------\n\n.. code:: sh\n\n   $ pip install django-fsm-admin\n\nOr from GitHub:\n\n.. code:: sh\n\n   $ pip install -e git://github.com/gadventures/django-fsm-admin.git#egg=django-fsm-admin\n\nUsage\n-----\n\n1. Add ``fsm_admin`` to your ``INSTALLED_APPS``.\n\n2. Ensure that you have ``\"django.core.context_processors.request\"`` in your\n   ``TEMPLATE_CONTEXT_PROCESSORS`` in Django settings. If the setting variable\n   is not yet defined, add:\n\n.. code:: python\n\n   from django.conf import settings\n\n   TEMPLATE_CONTEXT_PROCESSORS = settings.TEMPLATE_CONTEXT_PROCESSORS + (\n       \"django.core.context_processors.request\",\n   )\n\n3. In your ``admin.py`` file, use ``FSMTransitionMixin`` to add behaviour to your\n   ModelAdmin. ``FSMTransitionMixin`` should be before ``ModelAdmin``, the order is\n   important.\n\nIt assumes that your workflow state field is named ``state``, however you can\noverride it or add additional workflow state fields with the attribute\n``fsm_field``.\n\n.. code:: python\n\n   from fsm_admin.mixins import FSMTransitionMixin\n\n   class YourModelAdmin(FSMTransitionMixin, admin.ModelAdmin):\n       # The name of one or more FSMFields on the model to transition\n       fsm_field = ['wf_state',]\n\n   admin.site.register(YourModel, YourModelAdmin)\n\n4. By adding ``custom=dict(admin=False)`` to the transition decorator, one can\n   disallow a transition to show up in the admin interface. This specially is\n   useful, if the transition method accepts parameters without default values,\n   since in **django-fsm-admin** no arguments can be passed into the transition\n   method.\n\n.. code:: python\n\n    @transition(\n       field='state',\n       source=['startstate'],\n       target='finalstate',\n       custom=dict(admin=False),\n    )\n    def do_something(self, param):\n       # will not add a button \"Do Something\" to your admin model interface\n\nBy adding ``FSM_ADMIN_FORCE_PERMIT = True`` to your configuration settings, the\nabove restriction becomes the default. Then one must explicitly allow that a\ntransition method shows up in the admin interface.\n\n.. code:: python\n\n   @transition(\n       field='state',\n       source=['startstate'],\n       target='finalstate',\n       custom=dict(admin=True),\n   )\n   def proceed(self):\n       # will add a button \"Proceed\" to your admin model interface\n\nThis is useful, if most of your state transitions are handled by other means,\nsuch as external events communicating with the API of your application.\n\nTry the example\n---------------\n\n.. code:: sh\n\n   $ git clone git@github.com:gadventures/django-fsm-admin.git\n   $ cd django-fsm-admin\n   $ mkvirtualenv fsm_admin\n   $ pip install -r requirements.txt\n   $ python setup.py develop\n   $ cd example\n   $ python manage.py syncdb\n   $ python manage.py runserver\n\n\n.. _django-fsm: https://github.com/kmmbvnr/django-fsm",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gadventures/django-fsm-admin",
    "keywords": "django fsm admin",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fsm-admin",
    "package_url": "https://pypi.org/project/django-fsm-admin/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-fsm-admin/",
    "project_urls": {
      "Homepage": "https://github.com/gadventures/django-fsm-admin"
    },
    "release_url": "https://pypi.org/project/django-fsm-admin/1.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Integrate django-fsm state transitions into the django admin",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13524776,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07f638128d4c6681e3b52789701dda71c992eba042c6bd21f11146e8ecfd4ac4",
        "md5": "1bf9a6619b80ba86a4c4b9f7684f74af",
        "sha256": "74fa2038fdab8072077e18234593fd809d3940216a3e90e3f1ea432ee2992938"
      },
      "downloads": -1,
      "filename": "django-fsm-admin-1.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1bf9a6619b80ba86a4c4b9f7684f74af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10811,
      "upload_time": "2022-04-15T13:08:35",
      "upload_time_iso_8601": "2022-04-15T13:08:35.824435Z",
      "url": "https://files.pythonhosted.org/packages/07/f6/38128d4c6681e3b52789701dda71c992eba042c6bd21f11146e8ecfd4ac4/django-fsm-admin-1.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}