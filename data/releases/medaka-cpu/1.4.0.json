{
  "info": {
    "author": "ont-research",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n![Oxford Nanopore Technologies logo](https://github.com/nanoporetech/medaka/raw/master/images/ONT_logo_590x106.png)\n\n\nMedaka\n======\n\n[![Build Status](https://travis-ci.org/nanoporetech/medaka.svg?branch=master)](https://travis-ci.org/nanoporetech/medaka)\n\n[![](https://img.shields.io/pypi/v/medaka.svg)](https://pypi.org/project/medaka/)\n[![](https://img.shields.io/pypi/wheel/medaka.svg)](https://pypi.org/project/medaka/)\n\n[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](https://anaconda.org/bioconda/medaka)\n[![](https://img.shields.io/conda/pn/bioconda/medaka.svg)](https://anaconda.org/bioconda/medaka)\n\n\n`medaka` is a tool to create consensus sequences and variant calls from\nnanopore sequencing data.  This task is performed using neural networks applied\na pileup of individual sequencing reads against a draft assembly. It\noutperforms graph-based methods operating on basecalled data, and can be\ncompetitive with state-of-the-art signal-based methods whilst being much\nfaster.\n\n© 2018- Oxford Nanopore Technologies Ltd.\n\nFeatures\n--------\n\n  * Requires only basecalled data. (`.fasta` or `.fastq`)\n  * Improved accurary over graph-based methods (e.g. Racon).\n  * 50X faster than Nanopolish (and can run on GPUs).\n  * Benchmarks are provided [here](https://nanoporetech.github.io/medaka/benchmarks.html).\n  * Includes extras for implementing and training bespoke correction\n    networks.\n  * Works on Linux and MacOS.\n  * Open source (Mozilla Public License 2.0).\n\nFor creating draft assemblies we recommend [Flye](https://github.com/fenderglass/Flye).\n\nDocumentation can be found at https://nanoporetech.github.io/medaka/.\n\n\nInstallation\n------------\n\nMedaka can be installed in one of several ways.\n\n**Installation with conda**\n\nPerhaps the simplest way to start using medaka is\nthrough conda; medaka is available via the\n[bioconda](https://anaconda.org/bioconda/medaka) channel:\n\n    conda create -n medaka -c conda-forge -c bioconda medaka\n\nOccasionally the conda releases lag behind the source code and\n[PyPI](https://pypi.org/project/medaka/) releases.\n\n**Installation with pip**\n\nFor those who prefer Python's native pacakage manager, medaka is also available\non pypi and can be installed using pip:\n\n    pip install medaka\n\nOn Linux platforms this will install a precompiled binary, on MacOS (and other)\nplatforms this will fetch and compile a source distribution.\n\nWe recommend using medaka within a virtual environment, viz.:\n\n    virtualenv medaka --python=python3 --prompt \"(medaka) \"\n    . medaka/bin/activate\n    pip install medaka\n\nUsing this method requires the user to provide several binaries:\n\n * [samtools](https://github.com/samtools/samtools),\n * [minimap2](https://github.com/lh3/minimap2),\n * [tabix](https://github.com/samtools/htslib), and\n * [bgzip](https://github.com/samtools/htslib)\n\nand place these within the `PATH`. `samtools/bgzip/tabix` version 1.11 and\n`minimap2` version 2.17 are recommended as these are those used in development\nof medaka.\n\n**Installation from source**\n\nMedaka can be installed from its source quite easily on most systems.\n\n Before installing medaka it may be required to install some\n prerequisite libraries, best installed by a package manager. On Ubuntu\n theses are:\n >     bzip2 g++ zlib1g-dev libbz2-dev liblzma-dev libffi-dev libncurses5-dev\n >     libcurl4-gnutls-dev libssl-dev curl make cmake wget python3-all-dev\n >     python-virtualenv\n In addition it is required to install and set up git LFS before cloning\n the repository.\n\nA Makefile is provided to fetch, compile and install all direct dependencies\ninto a python virtual environment. To set-up the environment run:\n\n    # Note: certain files are stored in git-lfs, https://git-lfs.github.com/,\n    #       which must therefore be installed first.\n    git clone https://github.com/nanoporetech/medaka.git\n    cd medaka\n    make install\n    . ./venv/bin/activate\n\nUsing this method both `samtools` and `minimap2` are built from source and need\nnot be provided by the user.\n\n\n**Using a GPU**\n\nSince version 1.1.0 `medaka` uses Tensorflow 2.2, prior versions used Tensorflow 1.4.\nFor `medaka` 1.1.0 and higher installation from source or using `pip` can make\nimmediate use of GPUs. However, note that the `tensorflow` package is compiled against\nspecific versions of the NVIDIA CUDA and cuDNN libraries; users are directed to the\n[tensorflow installation](https://www.tensorflow.org/install/source#gpu) pages\nfor further information. cuDNN can be obtained from the\n[cuDNN Archive](https://developer.nvidia.com/rdp/cudnn-archive), whilst CUDA\nfrom the [CUDA Toolkit Archive](https://developer.nvidia.com/cuda-toolkit-archive).\n\nFor `medaka` prior to version 1.1.0, to enable the use of GPU resource it is\nnecessary to install the `tensorflow-gpu` package. Using the source code from github\na working GPU-powered `medaka` can be configured with:\n\n    # Note: certain files are stored in git-lfs, https://git-lfs.github.com/,\n    #       which must therefore be installed first.\n    git clone https://github.com/nanoporetech/medaka.git\n    cd medaka\n    sed -i 's/tensorflow/tensorflow-gpu/' requirements.txt\n    make install\n    \n*GPU Usage notes*\n\nDepending on your GPU, `medaka` may show out of memory errors when running.\nTo avoid these the inference batch size can be reduced from the default\nvalue by setting the `-b` option when running `medaka_consensus`. A value\n`-b 100` is suitable for 11Gb GPUs.\n\nFor users with RTX series GPUs it may be required to additionally set an\nenvironment variable to have `medaka` run without failure:\n\n    export TF_FORCE_GPU_ALLOW_GROWTH=true\n\nIn this situation a further reduction in batch size may be required.\n\n\nUsage\n-----\n\n`medaka` can be run using its default settings through the `medaka_consensus`\nprogram. An assembly in `.fasta` format and basecalls in `.fasta` or `.fastq`\nformats are required. The program uses both `samtools` and `minimap2`. If\nmedaka has been installed using the from-source method these will be present\nwithin the medaka environment, otherwise they will need to be provided by\nthe user.\n\n    source ${MEDAKA}  # i.e. medaka/venv/bin/activate\n    NPROC=$(nproc)\n    BASECALLS=basecalls.fa\n    DRAFT=draft_assm/assm_final.fa\n    OUTDIR=medaka_consensus\n    medaka_consensus -i ${BASECALLS} -d ${DRAFT} -o ${OUTDIR} -t ${NPROC} -m r941_min_high_g303\n\nThe variables `BASECALLS`, `DRAFT`, and `OUTDIR` in the above should be set\nappropriately. For the selection of the model (`-m r941_min_high_g303` in the\nexample above) see the Model section following.\n\nWhen `medaka_consensus` has finished running, the consensus will be saved to\n`${OUTDIR}/consensus.fasta`.\n\n**Human variant calling**\n\nVariant calling on human samples can be performed with the `medaka_variant` workflow:\n\n    medaka_variant -f <REFERENCE.fasta> -i <reads.bam>\n\nwhich requires simply a path to the human reference sequence, and a `.bam` file\nof reads aligned to the reference.\n\n**Bacterial (ploidy-1) variant calling**\n\nVariant calling for monoploid samples is enabled through the `medaka_haploid_variant`\nworkflow:\n\n    medaka_haploid_variant <reads.fastq> <ref.fasta>\n    \nwhich requires the reads as a `.fasta` or `.fastq` and a reference sequence as a\n`.fasta` file.\n\n\nModels\n------\n\nFor best results it is important to specify the correct model, `-m` in the\nabove, according to the basecaller used. Allowed values can be found by\nrunning `medaka tools list\\_models`.\n\nMedaka models are named to indicate i) the pore type, ii) the sequencing\ndevice (MinION or PromethION), iii) the basecaller variant, and iv) the\nbasecaller version, with the format:\n\n    {pore}_{device}_{caller variant}_{caller version}\n\nFor example the model named `r941_min_fast_g303` should be used with data from\nMinION (or GridION) R9.4.1 flowcells using the fast Guppy basecaller version\n3.0.3. By contrast the model `r941_prom_hac_g303` should be used with PromethION\ndata and the high accuracy basecaller (termed \"hac\" in Guppy configuration\nfiles). Where a version of Guppy has been used without an exactly corresponding\nmedaka model, the medaka model with the highest version equal to or less than\nthe guppy version should be selected.\n\n### Origin of the draft sequence\n\nMedaka has been trained to correct draft sequences processed through\n[racon](https://github.com/isovic/racon) with:\n\n    racon -m 8 -x -6 -g -8 -w 500 ...\n\nProcessing a draft sequence from alternative sources (e.g. the output of\n[canu](https://github.com/marbl/canu) or\n[wtdbg2](https://github.com/ruanjue/wtdbg2)) may lead to different results.\n\nThe [documentation](https://nanoporetech.github.io/medaka/draft_origin.html)\nprovides a discussion and some guidance on how to obtain a draft sequence.\n\n\nAcknowledgements\n----------------\n\nWe thank [Joanna Pineda](https://github.com/jopineda) and\n[Jared Simpson](https://github.com/jts) for providing htslib code samples which aided\ngreatly development of the optimised feature generation code, and for testing the\nversion 0.4 release candidates.\n\nWe thank [Devin Drown](https://github.com/devindrown) for\n[working through](https://github.com/nanoporetech/medaka/issues/70)\nuse of `medaka` with his RTX 2080 GPU.\n\nHelp\n----\n\n**Licence and Copyright**\n\n© 2018- Oxford Nanopore Technologies Ltd.\n\n`medaka` is distributed under the terms of the Mozilla Public License 2.0.\n\n**Research Release**\n\nResearch releases are provided as technology demonstrators to provide early\naccess to features or stimulate Community development of tools. Support for\nthis software will be minimal and is only provided directly by the developers.\nFeature requests, improvements, and discussions are welcome and can be\nimplemented by forking and pull requests. However much as we would\nlike to rectify every issue and piece of feedback users may have, the\ndevelopers may have limited resource for support of this software. Research\nreleases may be unstable and subject to rapid iteration by Oxford Nanopore\nTechnologies.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nanoporetech/medaka",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medaka-cpu",
    "package_url": "https://pypi.org/project/medaka-cpu/",
    "platform": "",
    "project_url": "https://pypi.org/project/medaka-cpu/",
    "project_urls": {
      "Homepage": "https://github.com/nanoporetech/medaka"
    },
    "release_url": "https://pypi.org/project/medaka-cpu/1.4.0/",
    "requires_dist": [
      "biopython",
      "cffi",
      "edlib",
      "grpcio",
      "h5py (<3.0.0)",
      "intervaltree",
      "tensorflow-cpu (==2.2.2)",
      "numpy",
      "mappy",
      "ont-fast5-api",
      "parasail",
      "pysam (==0.16.0.1)",
      "pyspoa (>=0.0.3)",
      "requests",
      "whatshap (>=0.18)"
    ],
    "requires_python": ">3.5.*,<3.9",
    "summary": "Neural network sequence error correction.",
    "version": "1.4.0",
    "yanked": true,
    "yanked_reason": "Does not include model files"
  },
  "last_serial": 16841334,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19c3111b8bce98dde5b3320883cae69e1ee90c09c397946d4f7087720ec8a80f",
        "md5": "6a881cbc8948aadb19ebe111b54dd0d3",
        "sha256": "15eebcc06b18a987a31277d2543c95521ea2bd92dfbddfd3bb23bfd923374238"
      },
      "downloads": -1,
      "filename": "medaka_cpu-1.4.0-cp36-cp36m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "6a881cbc8948aadb19ebe111b54dd0d3",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": ">3.5.*,<3.9",
      "size": 3762241,
      "upload_time": "2021-06-02T21:49:32",
      "upload_time_iso_8601": "2021-06-02T21:49:32.946641Z",
      "url": "https://files.pythonhosted.org/packages/19/c3/111b8bce98dde5b3320883cae69e1ee90c09c397946d4f7087720ec8a80f/medaka_cpu-1.4.0-cp36-cp36m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": true,
      "yanked_reason": "Does not include model files"
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a43550cd084827d6c190191a3f77402254b0bc179c50b60f303362e7a6543a2e",
        "md5": "c4d88349711bea1247a6ad8bdb060da6",
        "sha256": "893454a6e8808deeedc1b75de8d5bf4963816f2881bfd051e712ce55b6625e91"
      },
      "downloads": -1,
      "filename": "medaka_cpu-1.4.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c4d88349711bea1247a6ad8bdb060da6",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">3.5.*,<3.9",
      "size": 3762227,
      "upload_time": "2021-06-02T21:49:35",
      "upload_time_iso_8601": "2021-06-02T21:49:35.526332Z",
      "url": "https://files.pythonhosted.org/packages/a4/35/50cd084827d6c190191a3f77402254b0bc179c50b60f303362e7a6543a2e/medaka_cpu-1.4.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": true,
      "yanked_reason": "Does not include model files"
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b27ba34e3d68d5f0fe2cce601db4b591be732f004e61bd56a43111ed999059f7",
        "md5": "25d28ce1fa30b78ced6ee6f39996b9b2",
        "sha256": "1c27da4585ec6b7d6cf6f6fe4f321808ac1e47f0034aed52b3f34845924423e0"
      },
      "downloads": -1,
      "filename": "medaka_cpu-1.4.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "has_sig": false,
      "md5_digest": "25d28ce1fa30b78ced6ee6f39996b9b2",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">3.5.*,<3.9",
      "size": 3762726,
      "upload_time": "2021-06-02T21:49:38",
      "upload_time_iso_8601": "2021-06-02T21:49:38.232154Z",
      "url": "https://files.pythonhosted.org/packages/b2/7b/a34e3d68d5f0fe2cce601db4b591be732f004e61bd56a43111ed999059f7/medaka_cpu-1.4.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl",
      "yanked": true,
      "yanked_reason": "Does not include model files"
    }
  ],
  "vulnerabilities": []
}