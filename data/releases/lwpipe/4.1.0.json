{
  "info": {
    "author": "estshorter",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/lwpipe.svg)](https://badge.fury.io/py/lwpipe)\n[![license](https://img.shields.io/pypi/l/lwpipe)](https://github.com/estshorter/lwpipe/blob/master/LICENSE)\n[![python](https://img.shields.io/pypi/pyversions/lwpipe)](https://badge.fury.io/py/lwpipe)\n\n# Overview\n**lwpipe** provides a lightweight pipeline for numerical experiments.\nFor example, this module can be used in preprocessing steps of machine learning. Preprocessing consists of several steps, some of which take time to execute. In this case, it is common in the trial-and-error stage, such as numerical experiments, to dump the calculation results of the computationally-intensive steps and load them in the later programs to reduce the time required when the later steps are changed. This module reduces boilerplate code for file IO in the use cases above.\n\nNote that \n - pipelines in this module do not have the concept of dependency between nodes (tasks), and nodes are executed sequentially.\n - lwpipe is highly inspired by [Kedro](https://github.com/quantumblacklabs/kedro).\n\n# Installation\nfrom pypi: \n``` sh\npip install lwpipe\n```\n\n# Usage\nMinimal example (of course, no need to use this library..):\n``` python\nfrom lwpipe import Node, Pipeline\n\nnodes = [\n    Node(func=lambda x,y: x+y, inputs=(1,2)),\n    Node(func=lambda x: x**2),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 9\n```\n\nExample with interim data output:\n``` python\nfrom lwpipe import Node, Pipeline\nfrom lwpipe.io import dump_pickle, load_pickle\n\ndef time_consuming_func(x):\n    return x\n\nnodes = [\n    Node(\n        func=time_consuming_func,\n        inputs=100,\n        outputs_dumper=dump_pickle,\n        outputs_path=\"interim_data.pickle\",\n        outputs_loader=load_pickle, # needed to bypass this node\n    ),\n    Node(func=lambda x: x**2, name=\"square\"),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 10000\n```\nOnce the first node is executed, you can bypass the node by `pipe.run(1)` or `pipe.run(\"square\")`.\n\nMultiple outputs with numpy:\n``` python\nimport numpy as np\nfrom lwpipe import Node, Pipeline\nfrom lwpipe.io import dump_npy, load_npy\n\ndef split(x):\n    return x[:5], x[5:]\n\nnodes = [\n    Node(\n        func=split,\n        inputs=np.arange(10),\n        outputs=(\"former\", \"latter\"),\n        outputs_dumper=dump_npy,\n        outputs_path=(\"df1.npy\", \"df2.npy\"),\n        outputs_loader=load_npy,\n    ),\n    Node(\n        func=np.mean,\n        name=\"former_mean\",\n        inputs=\"former\", # calculated at the first node\n        outputs=\"former_mean\",\n    ),\n    Node(\n        func=np.mean,\n        name=\"latter_mean\",\n        inputs=\"latter\", # calculated at the first node\n        outputs=\"latter_mean\",\n    ),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 7.0\n# You can access interim results by \"results\" dict\nassert pipe.results[\"former_mean\"] == 2.0\n```\n\nbatch dump example (return values are dumped to one file):\n``` python\nimport numpy as np\nfrom lwpipe import DumpType, Node, Pipeline\nfrom lwpipe.io import (\n    dump_dict_pickle,\n    dump_savez_compressed,\n    load_dict_pickle,\n    load_savez_compressed,\n)\n\ndef divide(x):\n    return x[:, 0], x[:, 1]\n\nnodes = [\n    Node(\n        func=divide,\n        inputs=np.arange(1, 7).reshape((3, 2)),\n        outputs=(\"mean_a\", \"mean_b\"),\n        outputs_dumper=dump_dict_pickle,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"1.pickle\",\n        outputs_loader=load_dict_pickle,\n    ),\n    Node(\n        func=lambda x, y: (x, y),\n        outputs=(\"a\", \"b\"),\n        outputs_dumper=dump_dict_pickle,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"2.pickle\",\n        outputs_loader=load_dict_pickle,\n    ),\n    Node(\n        func=lambda x, y: (x.max(), y.max()),\n        inputs=(\"a\", \"b\"),\n        outputs=(\"c\", \"d\"),\n        outputs_dumper=dump_savez_compressed,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"3.npz\",\n        outputs_loader=load_savez_compressed,\n    )\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs == (5, 6)\n```\n\nFunc with config example:\n```python\nfrom lwpipe import Node, Pipeline\ndef add(a, cfg):\n    return a + cfg[\"hyperparam\"]\n\nnodes = [Node(func=add, inputs=5, config={\"hyperparam\": 10})]\n# equivalent to\n# nodes = [Node(func=lambda a: add(a, {\"hyperparam\": 10}), inputs=5)]\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 15\n```\n\nThis module also provides `TrivialPipeline` which just sequentially calls functions:\n```python\nfrom lwpipe import TrivialPipeline\n\ndef func():\n    return\n\nfuncs = [func, func]\npipe = TrivialPipeline(funcs)\npipe.run()\n# equivalent to\n# for func in funcs:\n#   func()\n\n# you can specify names of functions\npipe = TrivialPipeline(funcs, names=[\"func1\", \"func2\"])\npipe.run()\n```\n\nMore examples are included in the [test cases](https://github.com/estshorter/lwpipe/blob/master/tests/test_pipeline.py).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/estshorter/lwpipe",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lwpipe",
    "package_url": "https://pypi.org/project/lwpipe/",
    "platform": "",
    "project_url": "https://pypi.org/project/lwpipe/",
    "project_urls": {
      "Homepage": "https://github.com/estshorter/lwpipe"
    },
    "release_url": "https://pypi.org/project/lwpipe/4.1.0/",
    "requires_dist": [
      "pytest ; extra == 'develop'",
      "numpy ; extra == 'develop'",
      "pandas ; extra == 'develop'"
    ],
    "requires_python": "",
    "summary": "lightweight pipeline for numerical experiments",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11221930,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28a0f0f2d076b63d2aac38cd6609c6adccc35c5433e68db763a1981f70afb95a",
        "md5": "1758d05cac5d40339d3d16495232e1df",
        "sha256": "67c942807c4279e4f33a4614ed57dcb89c9d516f45b56b557a983d4d2caf61c1"
      },
      "downloads": -1,
      "filename": "lwpipe-4.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1758d05cac5d40339d3d16495232e1df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15174,
      "upload_time": "2021-08-06T11:01:01",
      "upload_time_iso_8601": "2021-08-06T11:01:01.381933Z",
      "url": "https://files.pythonhosted.org/packages/28/a0/f0f2d076b63d2aac38cd6609c6adccc35c5433e68db763a1981f70afb95a/lwpipe-4.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fafb8c17d4265b7af58f5599125bff508a4785bd75af5096849a1f6d3f634640",
        "md5": "a9092424a14ba86257c8bfedeabe854c",
        "sha256": "5e83f58d95d9d898765088529d3cbb3edab9d162b50f66da0004285255c1bcbc"
      },
      "downloads": -1,
      "filename": "lwpipe-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a9092424a14ba86257c8bfedeabe854c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15824,
      "upload_time": "2021-08-06T11:01:02",
      "upload_time_iso_8601": "2021-08-06T11:01:02.916622Z",
      "url": "https://files.pythonhosted.org/packages/fa/fb/8c17d4265b7af58f5599125bff508a4785bd75af5096849a1f6d3f634640/lwpipe-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}