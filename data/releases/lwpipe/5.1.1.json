{
  "info": {
    "author": "estshorter",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/lwpipe.svg)](https://badge.fury.io/py/lwpipe)\n[![license](https://img.shields.io/pypi/l/lwpipe)](https://github.com/estshorter/lwpipe/blob/master/LICENSE)\n[![python](https://img.shields.io/pypi/pyversions/lwpipe)](https://badge.fury.io/py/lwpipe)\n\n# Overview\n**lwpipe** provides a lightweight pipeline. lwpipe has fewer features than [luigi](https://github.com/spotify/luigi) or [Kedro](https://github.com/quantumblacklabs/kedro), but you can quickly build and run pipelines.\n\nNote that lwpipe is highly inspired by [Kedro](https://github.com/quantumblacklabs/kedro).\n\n# Installation\nfrom pypi: \n``` sh\npip install lwpipe\n```\n\n# Usage\nMinimal example (of course, no need to use this library..):\n``` python\nfrom lwpipe import Node, Pipeline\n\nnodes = [\n    Node(func=lambda x,y: x+y, inputs=(1,2)),\n    Node(func=lambda x: x**2),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 9\n```\n\nExample with interim data output:\n``` python\nfrom lwpipe import Node, Pipeline\nfrom lwpipe.io import dump_pickle, load_pickle\n\ndef time_consuming_func(x):\n    return x\n\nnodes = [\n    Node(\n        func=time_consuming_func,\n        inputs=100,\n        outputs_dumper=dump_pickle,\n        outputs_path=\"interim_data.pickle\",\n        outputs_loader=load_pickle, # needed to bypass this node\n    ),\n    Node(func=lambda x: x**2, name=\"square\"),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 10000\n```\nOnce the first node is executed, you can bypass the node by `pipe.run(1)` or `pipe.run(\"square\")`.\n\nMultiple outputs with numpy:\n``` python\nimport numpy as np\nfrom lwpipe import Node, Pipeline\nfrom lwpipe.io import dump_npy, load_npy\n\ndef split(x):\n    return x[:5], x[5:]\n\nnodes = [\n    Node(\n        func=split,\n        inputs=np.arange(10),\n        outputs=(\"former\", \"latter\"),\n        outputs_dumper=dump_npy,\n        outputs_path=(\"df1.npy\", \"df2.npy\"),\n        outputs_loader=load_npy,\n    ),\n    Node(\n        func=np.mean,\n        name=\"former_mean\",\n        inputs=\"former\", # calculated at the first node\n        outputs=\"former_mean\",\n    ),\n    Node(\n        func=np.mean,\n        name=\"latter_mean\",\n        inputs=\"latter\", # calculated at the first node\n        outputs=\"latter_mean\",\n    ),\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 7.0\n# You can access interim results by \"results\" dict\nassert pipe.results[\"former_mean\"] == 2.0\n```\n\nbatch dump example (return values are dumped to one file):\n``` python\nimport numpy as np\nfrom lwpipe import DumpType, Node, Pipeline\nfrom lwpipe.io import (\n    dump_dict_pickle,\n    dump_savez_compressed,\n    load_dict_pickle,\n    load_savez_compressed,\n)\n\ndef divide(x):\n    return x[:, 0], x[:, 1]\n\nnodes = [\n    Node(\n        func=divide,\n        inputs=np.arange(1, 7).reshape((3, 2)),\n        outputs=(\"mean_a\", \"mean_b\"),\n        outputs_dumper=dump_dict_pickle,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"1.pickle\",\n        outputs_loader=load_dict_pickle,\n    ),\n    Node(\n        func=lambda x, y: (x, y),\n        outputs=(\"a\", \"b\"),\n        outputs_dumper=dump_dict_pickle,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"2.pickle\",\n        outputs_loader=load_dict_pickle,\n    ),\n    Node(\n        func=lambda x, y: (x.max(), y.max()),\n        inputs=(\"a\", \"b\"),\n        outputs=(\"c\", \"d\"),\n        outputs_dumper=dump_savez_compressed,\n        outputs_dumper_type=DumpType.BATCH,\n        outputs_path=\"3.npz\",\n        outputs_loader=load_savez_compressed,\n    )\n]\n\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs == (5, 6)\n```\n\nyou can pass a config object to a function:\n```python\nfrom lwpipe import Node, Pipeline\ndef add(a, cfg):\n    return a + cfg[\"hyperparam\"]\n\nnodes = [Node(func=add, inputs=5, config={\"hyperparam\": 10})]\n# equivalent to\n# nodes = [Node(func=lambda a: add(a, {\"hyperparam\": 10}), inputs=5)]\npipe = Pipeline(nodes)\noutputs = pipe.run()\nassert outputs[0] == 15\n\ndef dumper(data, filepath, cfg):\n    filepath = Path(filepath)\n    filepath = filepath.with_name(filepath.name+cfg[\"hyperparam\"])\n    return dump_pickle(data, filepath)\n\n# also, outputs_dumper can take config as its argument\nnodes = [Node(func=add, inputs=5, config={\"hyperparam\": 10},\n              outputs_dumper=dumper,\n              outputs_dumper_take_config=True\n)]\n```\n\n`Pipeline` also accepts a list of functions with no arguments and return-values:\n```python\nfrom lwpipe import Pipeline\n\ndef func():\n    return\n\nfuncs = [func, func]\npipe = Pipeline(funcs)\npipe.run()\n# equivalent to\n# for func in funcs:\n#   func()\n\n# you can specify names of functions\npipe = Pipeline(funcs, names=[\"func1\", \"func2\"])\npipe.run()\n```\n\nMore examples are included in the [test cases](https://github.com/estshorter/lwpipe/blob/master/tests/test_pipeline.py).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/estshorter/lwpipe",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lwpipe",
    "package_url": "https://pypi.org/project/lwpipe/",
    "platform": "",
    "project_url": "https://pypi.org/project/lwpipe/",
    "project_urls": {
      "Homepage": "https://github.com/estshorter/lwpipe"
    },
    "release_url": "https://pypi.org/project/lwpipe/5.1.1/",
    "requires_dist": [
      "pytest ; extra == 'develop'",
      "numpy ; extra == 'develop'",
      "pandas ; extra == 'develop'"
    ],
    "requires_python": "",
    "summary": "lightweight pipeline for numerical experiments",
    "version": "5.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11221930,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f7ebe1b94f7dcf769830e281e8f60b0061768aed7b3caf1cbb18a354aff56d2",
        "md5": "5a4c97b742dda933699fc78dce2ca31f",
        "sha256": "f4b28540839f1958e40d49a4c1f0fbe715e82883a9e6103e5ebde7ce44384b5a"
      },
      "downloads": -1,
      "filename": "lwpipe-5.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a4c97b742dda933699fc78dce2ca31f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15982,
      "upload_time": "2021-08-19T13:20:23",
      "upload_time_iso_8601": "2021-08-19T13:20:23.941410Z",
      "url": "https://files.pythonhosted.org/packages/1f/7e/be1b94f7dcf769830e281e8f60b0061768aed7b3caf1cbb18a354aff56d2/lwpipe-5.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9da307104b973cd205c5287e6ea54a2a7a9f3987b56a6f4182ee3b4923a92079",
        "md5": "5bfa93de13cc2163fa69eca5c5090e1f",
        "sha256": "638b620ed5e3e70fa09e2b9ad7d009ac88d55952509544f65e278d6ee0496687"
      },
      "downloads": -1,
      "filename": "lwpipe-5.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5bfa93de13cc2163fa69eca5c5090e1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16559,
      "upload_time": "2021-08-19T13:20:25",
      "upload_time_iso_8601": "2021-08-19T13:20:25.420285Z",
      "url": "https://files.pythonhosted.org/packages/9d/a3/07104b973cd205c5287e6ea54a2a7a9f3987b56a6f4182ee3b4923a92079/lwpipe-5.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}