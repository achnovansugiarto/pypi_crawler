{
  "info": {
    "author": "Danilo de Jesus da Silva Bellini",
    "author_email": "danilo.bellini@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2 :: Only",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Education",
      "Topic :: Education :: Testing",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Dose\n====\n\n\nWhat does it do?\n----------------\n\nRuns a test command when some file is created/modified/deleted,\nshowing the return value in a GUI.\n\nThere are 3 states:\n\n- *Red*: Last test job failed/errored (it didn't return zero)\n- *Yellow*: Running a test job\n- *Green*: Last test job passed (it returned zero)\n\nThe test command output is shown in the console standard output\nwhereby Dose was called. The same applies to the standard error, but\nit's red-colored. Dose uses ANSI escaping codes for coloring text in\na terminal.\n\n\nSyntax / Example\n----------------\n\nJust call ``dose TEST_COMMAND``, where ``TEST_COMMAND`` is what you\nwould call to run some test suite. Dose is written in Python 2 but the\ntest command can be anything.\n\n*Hint (color)*: The ANSI coloring from the test command is to the\nunderlying console. For example, a tox + py.test Python project whose\n``tox.ini`` has ``commands = py.test {posargs}``, you can force the\npy.test coloring with ``dose tox -- --color=yes``.\n\n*Hint (shell)*: You can use shell pipes in your test command by\nquoting the whole command, e.g. ``dose \"cat tests.txt | verify.sh\"``.\n\n\nWhat does it watch?\n-------------------\n\nUsing the watchdog_ package, Dose recursively watches a working\ndirectory for file creation/modification/deletion events.\n\nThe watched directory is the current working directory, the one\nwhereby Dose was called. You can change it with the GUI, but remember\nthat the test command is always called in that directory too.\n\nYou can also configure an ignore pattern to avoid undesired\ndetections on temporary/compiled files.\n\nValid events during a test would kill (SIGTERM) a test job to\nrestart it. There's a 10ms delay before starting a test job and a 50ms\ndelay before killing it. Multiple events are joined to avoid\nspawning/killing more than required.\n\nThere's a cycle/repeat detection in the watcher: repeating an event\nwon't kill the test job. Modifying the same file twice will have the\nsecond modification ignored, unless it happens after finishing a test\njob.\n\n*Hint (change directory)*: You can watch a directory and call a\ncommand in another directory by using ``cd PATH && TEST_COMMAND`` as\nyour test command, e.g. ``dose \"cd toxinidir && tox\"``.\n\n.. _watchdog:\n  https://pypi.python.org/pypi/watchdog\n\n\nRequirements\n------------\n\n- wxPython 2.8 or 3.0 (classic)\n- watchdog\n\nYou should install the ``wxpython`` or ``wxgtk`` packages from your\nLinux distribution, or get the Windows / Mac OS X binary packages\ndirectly from the `wxPython official site`_\\ . On Mac OS X 10.11\n(El Capitan), `this blog post might help`_\\ .\n\n.. _`wxPython official site`:\n  https://www.wxpython.org\n\n.. _`this blog post might help`:\n  http://davixx.fr/blog/2016/01/25/wxpython-on-os-x-el-capitan/\n\n\nInstallation\n------------\n\n``pip install dose``\n\n\nGUI Controls\n------------\n\n- *Dragging*\\ : Move\n- *Dragging holding Ctrl/âŒ˜*\\ : Resize\n- *Dragging holding Shift*\\ : Controls th transparency\n- *Double click*\\ : start or stop the watcher (can kill the test job)\n\nA right click (or Ctrl + click on OSX) show more options.\n\nPlease see the CHANGES.rst file for more information.\n\n\n----\n\n.. copyright\n\nCopyright (C) 2012-2016 Danilo de Jesus da Silva Bellini\n\n.. copyright end",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/danilobellini/dose",
    "keywords": null,
    "license": "GPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dose",
    "package_url": "https://pypi.org/project/dose/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dose/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/danilobellini/dose"
    },
    "release_url": "https://pypi.org/project/dose/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An automated traffic light/signal/semaphore GUI showing the state during test driven development (TDD), mainly written for coding dojos.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12727875,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39a68cc89a4a994c88787ae68084029727d4c804412ad70f914cec5c79fd1721",
        "md5": "326d7202d99c373a3d44cb60a4b43c1d",
        "sha256": "544c6f0c0474c16d9c64e316f0b6d96741328370b102a1a8c62fa2e4fb8494c5"
      },
      "downloads": -1,
      "filename": "dose-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "326d7202d99c373a3d44cb60a4b43c1d",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 39658,
      "upload_time": "2016-08-19T13:59:18",
      "upload_time_iso_8601": "2016-08-19T13:59:18.911950Z",
      "url": "https://files.pythonhosted.org/packages/39/a6/8cc89a4a994c88787ae68084029727d4c804412ad70f914cec5c79fd1721/dose-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae339eccc06906745f6a425189727819e2b1bd04fd1908bee23f181743f0bbb8",
        "md5": "a86300f00a3679d4a0f7e657cc6dad3f",
        "sha256": "852de030d7f8baf9542c4661c4d88692eeeb9687e694337e812e4d9bfee6d7f3"
      },
      "downloads": -1,
      "filename": "dose-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a86300f00a3679d4a0f7e657cc6dad3f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33680,
      "upload_time": "2016-08-19T13:59:13",
      "upload_time_iso_8601": "2016-08-19T13:59:13.162258Z",
      "url": "https://files.pythonhosted.org/packages/ae/33/9eccc06906745f6a425189727819e2b1bd04fd1908bee23f181743f0bbb8/dose-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34428ece541e6734bb30b6a5dc619d3722b8e78866b0b2f4f02b9a8808edf763",
        "md5": "6d94f3a291426e473a91fbf3ffff2b85",
        "sha256": "8967bd94ad464d5f055ce3732e3a802cd5d69246aac7d8d7375b42927b807113"
      },
      "downloads": -1,
      "filename": "dose-1.1.1.zip",
      "has_sig": false,
      "md5_digest": "6d94f3a291426e473a91fbf3ffff2b85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39917,
      "upload_time": "2016-08-19T13:59:16",
      "upload_time_iso_8601": "2016-08-19T13:59:16.101865Z",
      "url": "https://files.pythonhosted.org/packages/34/42/8ece541e6734bb30b6a5dc619d3722b8e78866b0b2f4f02b9a8808edf763/dose-1.1.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}