{
  "info": {
    "author": "Danilo de Jesus da Silva Bellini",
    "author_email": "danilo.bellini@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Education",
      "Topic :: Education :: Testing",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "====\r\nDose\r\n====\r\n\r\n\r\n.. list-table::\r\n\r\n  * + .. image:: https://github.com/danilobellini/dose/raw/v1.2.0/images/screenshot_linux.png\r\n    + - Language: Haskell\r\n      - Testing with Hspec\r\n      - Arch Linux\r\n      - Dose running on Python 2.7.12\r\n      - wxPython Phoenix 3.0.3.dev2472+78ae39a (gtk2)\r\n\r\n  * + .. image:: https://github.com/danilobellini/dose/raw/v1.2.0/images/screenshot_osx.png\r\n    + - Language: Shell script\r\n      - Testing with roundup\r\n      - Mac OS X 10.11.6 (El Capitan)\r\n      - Dose running on Python 3.5.2\r\n      - wxPython Phoenix 3.0.3.dev2487+3b85464 (osx-cocoa)\r\n\r\n  * + .. image:: https://github.com/danilobellini/dose/raw/v1.2.0/images/screenshot_windows.png\r\n    + - Language: Python\r\n      - Testing with py.test\r\n      - Windows 7 Home Premium SP1\r\n      - Dose running on Python 2.7.12\r\n      - wxPython Classic 2.8.12.1 (msw-unicode)\r\n\r\n  * + .. image:: https://github.com/danilobellini/dose/raw/v1.2.0/images/screenshot_cygwin.png\r\n    + - Language: C\r\n      - Testing with a custom tester\r\n      - Cygwin 2.876 (Windows)\r\n      - Dose running on Python 2.7.10\r\n      - wxPython Classic 3.0.2.0 (gtk2)\r\n\r\n\r\nWhat does it do?\r\n================\r\n\r\nRuns a test command when some file is created/modified/deleted,\r\nshowing the returned value in a GUI.\r\n\r\nThere are 3 states:\r\n\r\n- *Red*: Last test job failed/errored (it didn't return zero)\r\n- *Yellow*: Running a test job\r\n- *Green*: Last test job passed (it returned zero)\r\n\r\nThe test job output is written on the standard output, so it should\r\nappear in the console/terminal whereby Dose was called. The same\r\napplies to the standard error, whose text should appear in red.\r\n\r\n\r\nSyntax / Example\r\n----------------\r\n\r\nJust call ``dose TEST_COMMAND``, where ``TEST_COMMAND`` is what you\r\nwould call to run your test suite in a terminal/console/shell. Dose is\r\nwritten in Python but the test command can be any shell command.\r\n\r\n*Hint (color)*: Any ANSI escaping code from the test command (e.g.\r\ncolors) is also sent to the standard streams in the underlying\r\nconsole (Linux, Mac OS X and Cygwin) or converted by colorama_ to\r\nWindows Console Handles API calls (Windows). In other words, colors\r\nare enabled. For example, in a tox + py.test Python project whose\r\n``tox.ini`` has ``commands = py.test {posargs}``, you can force the\r\npy.test coloring with ``dose tox -- --color=yes``.\r\n\r\n*Hint (shell)*: You can use shell pipes in your test command by\r\nquoting the whole command, e.g. ``dose \"cat tests.txt | verify.sh\"``.\r\n\r\n\r\nWhat does it watch?\r\n-------------------\r\n\r\nUsing the watchdog_ package, Dose recursively watches a working\r\ndirectory for file creation/modification/deletion events.\r\n\r\nThe watched directory is the current working directory whence\r\nDose was called. You can change it from the GUI. The test\r\ncommand is called in the same directory.\r\n\r\nThere's a customizable ignore pattern to avoid undesired detections on\r\ntemporary/compiled files.\r\n\r\nValid events during a test would kill (SIGTERM) a test job to restart\r\nit. There's a 10ms delay before starting/spawning a test job\r\nsubprocess, which is kept alive for at least 50ms before being able to\r\nbe killed. Multiple events are handled as a single event to avoid\r\nspawning/killing more than required.\r\n\r\nThere's a cycle/repeat detection in the watcher: repeating an event\r\nwon't kill the test job. Modifying the same file twice will have the\r\nsecond modification ignored, unless it happens after finishing a test\r\njob.\r\n\r\n*Hint (change directory)*: You can watch a directory and call a\r\ncommand in another directory by using ``cd PATH && TEST_COMMAND`` as\r\nyour test command, e.g. ``dose \"cd toxinidir && tox\"``.\r\n\r\n\r\nGUI Controls\r\n------------\r\n\r\n**On Linux / Windows**\r\n\r\n- *Dragging*\\ : Move\r\n- *Dragging holding Ctrl*\\ : Resize\r\n- *Dragging holding Shift*\\ : Controls the transparency\r\n- *Double click*\\ : start or stop the watcher (can kill the test job)\r\n\r\nA right click shows more options.\r\n\r\n\r\n**On Mac OS X**\r\n\r\n- *Dragging*\\ : Move\r\n- *Dragging holding ⌘*\\ : Resize\r\n- *Dragging holding ⇧*\\ : Controls the transparency\r\n- *Double click*\\ : start or stop the watcher (can kill the test job)\r\n\r\nA right click (or Ctrl + mouse click) shows more options.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nDose has few requirements:\r\n\r\n- Linux, OS X, Windows or Cygwin (Windows)\r\n- Python (2 or 3) with pip/wheel/setuptools\r\n- wxPython 2.8 or 3.0 (either Classic or Phoenix)\r\n- PyPI packages (auto-installed):\r\n\r\n  - watchdog\r\n  - docutils\r\n  - colorama\r\n\r\nThe only dependency package you have to worry about is wxPython, the\r\nother ones should be installed together with Dose when they're not\r\navailable.\r\n\r\nOn Python 3, wxPython Phoenix is required (since wxPython Classic\r\nrequires Python 2, modus tollens). Even on Python 2, Phoenix is\r\nusually easier to install, as it can be installed directly via pip\r\nno matter the platform or Python version::\r\n\r\n  pip install --upgrade --trusted-host wxpython.org --pre \\\r\n              -f http://wxpython.org/Phoenix/snapshot-builds/ \\\r\n              wxPython_Phoenix\r\n\r\nThe wxPyWiki have a detailed page on `how to install wxPython`_\\ ,\r\nwhence that Phoenix install command came. The link includes some\r\ndetailed information on how to install wxPython Classic.\r\n\r\nIf that's not enough, below are some detailed information on how to\r\ninstall Dose and its requirements on each platform/environment/system\r\nit supports.\r\n\r\n\r\nInstalling Dose with pip/wheel/setuptools\r\n-----------------------------------------\r\n\r\nYou should install with pip, which gets the Dose wheel from PyPI_\r\n(recommended)::\r\n\r\n  pip install dose\r\n\r\nTo install from the source distribution (e.g. after cloning this\r\nrepository), you can either use pip (recommended)::\r\n\r\n  pip install .\r\n\r\nWheel::\r\n\r\n  python setup.py bdist_wheel\r\n  wheel install dist/*.whl\r\n\r\nOr setuptools directly (not recommended)::\r\n\r\n  python setup.py install\r\n\r\nTo uninstall Dose with pip while keeping its requirements installed::\r\n\r\n  pip uninstall dose\r\n\r\nOther useful and self-explanatory commands are::\r\n\r\n  pip install --upgrade dose\r\n  pip install --force-reinstall dose\r\n\r\nDose should be kept upgraded. To check which Dose version is\r\ninstalled, you can use ``pip list`` or ``pip freeze``\\ . Without pip,\r\nyou can check the version from the ``dose.__version__`` variable::\r\n\r\n  python -c \"import dose ; print(dose.__version__)\"\r\n\r\n\r\nPython virtualenv\r\n-----------------\r\n\r\nIf you wish to install Dose in a Python virtualenv instead of a system\r\ninstallation, you should either:\r\n\r\n- Install wxPython Phoenix via pip (recommended);\r\n- Create a Python 2 virtualenv with the ``--system-site-packages``\r\n  option in a system that already has some wxPython version\r\n  installed.\r\n\r\nOn Linux / Mac OS X / Cygwin, this creates a ``venv27`` directory with\r\na new virtualenv that can access the system ``site-packages`` library\r\ndirectory, i.e., the installed packages::\r\n\r\n  virtualenv --system-site-packages -p python2.7 venv27\r\n\r\nOn Windows, you should just replace ``python2.7`` by your\r\n``python.exe`` file. You should remove the ``--system-site-packages``\r\nfor a virtualenv with independent libraries.\r\n\r\nTo activate it (Linux / Mac OS X / Cygwin)::\r\n\r\n  source venv27/bin/activate\r\n\r\nTo activate it (Windows)::\r\n\r\n  venv27/Scripts/activate.bat\r\n\r\nAfterwards, you should install Dose with pip/wheel/setuptools in the\r\nactivated virtual environment.\r\n\r\nIf virtualenv isn't available in your Python distribution, it can be\r\ninstalled with::\r\n\r\n  pip install virtualenv\r\n\r\n\r\nRequirements on Arch Linux\r\n--------------------------\r\n\r\nThis distro doesn't include a ``/usr/bin/pip`` script, so you should\r\nuse ``python2 -m pip`` (Python 2) or ``python -m pip`` (Python 3)\r\ninstead of just ``pip``\\ . By the way, in this Linux distribution\r\n``python`` means Python 3, only ``python2`` means Python 2, unless\r\nyou're in a virtualenv. The commands below should be called with\r\n``sudo``.\r\n\r\nWhen installing pip, you don't need to worry if the Python interpreter\r\nitself is installed in your system, as the package manager would\r\ninstall python for you as a dependency if it's not installed. To\r\ninstall pip on Python 3::\r\n\r\n  pacman -Sy python-pip\r\n\r\nThe wxPython Phoenix snapshot can be installed via pip. On the other\r\nhand, to install pip and wxPython Classic 3.0 on Python 2::\r\n\r\n  pacman -Sy python2-pip wxpython\r\n\r\nYou can replace ``wxpython`` by ``wxpython2.8``\\ , that would install\r\nwxPython Classic 2.8 instead of 3.0.\r\n\r\nIf you wish to install Dose in a virtualenv, you should install the\r\n``python-virtualenv`` (Python 3) or the ``python2-virtualenv``\r\n(Python 2) package with pacman, following the virtualenv instructions\r\nafterwards.\r\n\r\n\r\nRequirements on Ubuntu/Debian/MINT Linux\r\n----------------------------------------\r\n\r\nYou should use ``pip3`` instead of ``pip`` on Python 3, unless you're\r\nin a virtualenv. The commands below should be called with ``sudo``\\ .\r\nYou can also install the described packages (names after\r\n\"\\ *install*\\ \") with an APT GUI like ``synaptic``\\ . These\r\ndistros usually come with Python, nevertheless Python itself is\r\ninstalled as a dependency when installing pip. Before calling the\r\ninstall commands, remember to::\r\n\r\n  apt-get update\r\n\r\nInstalling pip on Python 3::\r\n\r\n  apt-get install python3-pip\r\n\r\nThe wxPython Phoenix snapshot can be installed via pip. To install pip\r\nand wxPython Classic 2.8 on Python 2::\r\n\r\n  apt-get install python-pip python-wxgtk2.8\r\n\r\nIf you wish to install Dose in a virtualenv, you should install the\r\n``python-virtualenv`` (Python 2) or the ``python3-virtualenv``\r\n(Python 3) package from APT, following the virtualenv instructions\r\nafterwards. If these aren't available, you should install the\r\nvirtualenv package from PyPI with pip.\r\n\r\n\r\nRequirements on Mac OS X\r\n------------------------\r\n\r\nEverything discussed here happens in a console, you can open one with\r\nSpotlight by pressing Command (⌘) + Space and typing ``Terminal``\\ .\r\nThe recommended (and easier) way to install the requirements is via\r\nHomebrew_\\ , even in Mac OS X 10.11 (El Capitan). Another option\r\nwould be installing Python directly from the `Python official site`_\r\npackages, but that installation procedure isn't described here.\r\n\r\n**Python from Mac OS X 10.11 (El Capitan)**\r\n\r\nThis is an installation procedure without Homebrew_\\ , using the\r\nPython interpreter that comes with Mac OS X 10.11 (El Capitan).\r\nIt comes with Python 2.7, but not with pip. You can install pip\r\nusing the command::\r\n\r\n  curl https://bootstrap.pypa.io/get-pip.py | sudo python\r\n\r\nIf you wish to install wxPython Phoenix via pip without receiving an\r\n``OSError: [Errno 1] Operation not permitted: ...``\\ , you have to\r\ntemporarily disable the *System Integrity Protection*, but that's\r\nsomething you probably don't want to do. The same happens with Dose,\r\nbut to avoid that issue you can install Dose directly from its\r\n``setup.py`` instead of using pip/wheel.\r\n\r\nOn the other hand, if you wish to install wxPython Classic 3.0,\r\nyou should get the \"Cocoa\" Mac OS X binary packages directly from the\r\n`wxPython official site`_\\ . But that's not enough, as the package\r\nstructure isn't supported by this OS X version. Following the\r\ninstructions from `the DaviXX' Blog post about wxPython on OS X`_\\ ,\r\nyou should:\r\n\r\n- In Finder, open (double click) the downloaded dmg file;\r\n\r\n- Click with the right mouse button (or Ctrl + click) on the\r\n  ``wxPython3.0-osx-cocoa-py2.7.pkg`` file, and click on\r\n  *Show Package Contents*\\ ;\r\n\r\n- Drag the ``Contents`` directory to your Desktop and, on the same\r\n  Finder window, eject the \"wxPython\"-prefixed device;\r\n\r\n- Open ``Contents``\\ , then open ``Resources``\\ , there you should\r\n  rename:\r\n\r\n  - ``preflight`` to ``preinstall``\r\n  - ``postflight`` to ``postinstall``\r\n\r\n- Open (double click) ``wxPython3.0-osx-cocoa-py2.7.pax.gz``\\ , there\r\n  should appear an ``usr`` directory;\r\n\r\n- Create two directories in that very same ``Resources`` directory,\r\n  with the names:\r\n\r\n  - ``pkg_root``\r\n  - ``scripts``\r\n\r\n- Move (drag):\r\n\r\n  - ``usr`` to ``pkg_root``\r\n  - ``preinstall`` to ``scripts``\r\n  - ``postinstall`` to ``scripts``\r\n\r\n- In a Terminal, type these 2 commands (be careful, you should use the\r\n  ``~`` symbol, not the ``˜`` symbol)::\r\n\r\n    cd ~/Desktop/Contents/Resources\r\n    pkgbuild --root ./pkg_root --scripts ./scripts \\\r\n             --identifier com.wxwidgets.wxpython \\\r\n             ~/Desktop/wxPython3.0-osx-cocoa-py2.7-repackaged.pkg\r\n\r\nWait until the Terminal gives you the *Wrote package* message. You can\r\nnow delete the Contents directory and the downloaded dmg, just open\r\n(double click) the ``wxPython3.0-osx-cocoa-py2.7-repackaged.pkg`` file\r\nin your desktop and wxPython Classic 3.0 is installed. The\r\naforementioned blog post does the same procedure, but in a command\r\nline approach.\r\n\r\n**Homebrew**\r\n\r\nA single command in a Terminal is enough to install Homebrew_\\ ::\r\n\r\n  /usr/bin/ruby -e \"$(curl -fsSL \\\r\n    https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n\r\nIn a terminal, before calling the install commands, remember to::\r\n\r\n  brew update\r\n\r\nTo install Python 3 (already comes with pip, henceforth called\r\n``pip3`` for this Python version)::\r\n\r\n  brew install python3\r\n\r\nThere you can install wxPython Phoenix via pip (replacing ``pip``\r\nby ``pip3`` in the install command).\r\n\r\nTo install Python 2 (already comes with pip) and wxPython Classic 3.0::\r\n\r\n  brew install python wxpython\r\n\r\n\r\nRequirements on Windows\r\n-----------------------\r\n\r\nOn Windows, you can install Python from some distribution or directly\r\nfrom the `Python official site`_ binary packages, the procedure\r\ndescribed here uses the latter approach.\r\n\r\nThe installation asks for adding Python to the path, you should add it\r\nto use ``python``\\ , ``pip`` (and ``dose`` afterwards) on any path.\r\nIt's recommended that you keep the installation directory simple (e.g.\r\nthe paths where tox_ looks for Python interpreters: ``C:\\Python27``\r\nfor Python 2.7 and ``C:\\Python35`` for Python 3.5), as the\r\n``python.exe`` isn't renamed nor copied to version-specific filenames\r\nand that becomes an issue if you wish to keep more than one Python\r\nversion installed. The suggested path is the default for Python 2.7,\r\nbut for Python 3.5 you have to choose *Customize installation* to\r\nchange the path.\r\n\r\nThe Python binary packages for Windows already comes with pip as 3\r\nexecutable files in the ``Scripts`` subdirectory on the path where\r\nPython was installed: ``pip.exe``\\ , ``pipA.exe`` and\r\n``pipA.B.exe``\\ , where ``A.B`` is the Python version (e.g. ``2.7``\r\nor ``3.5``\\ ).\r\n\r\nA terminal is required for installing Dose and its requirements, as\r\nwell as for using Dose afterwards. You can use either the\r\n*Windows PowerShell* (\\ ``powershell.exe``\\ ) or the *Command Prompt*\r\n(\\ ``cmd.exe``\\ ), they can be called by pressing *Windows + R* and\r\ntyping the executable filename (without the ``.exe``\r\nsuffix/extension).\r\n\r\nIf you wish to install wxPython Phoenix, it can be easily installed\r\nvia pip using the formerly described command, you just have to care\r\nabout the path: you can see if pip is in the path by trying to call\r\nit or by seeing in the PowerShell if ``$env:path`` includes the\r\nPython scripts directory (e.g. ``C:\\Python27\\Scripts``\\ ). If not,\r\nyou should go to that directory before calling pip, e.g.::\r\n\r\n  cd \\Python27\\Scripts\r\n  pip install dose\r\n\r\nOn Python 2.7, you can install wxPython Classic from the package in\r\nthe `wxPython official site`_\\ . If you've installed Python in the\r\nrecommended path, the installer should detect the installation path.\r\nIf you installed Python on ``C:\\Python27`` (the Python installation\r\npath and also the directory where the ``python.exe`` lies), then\r\nyou should install wxPython on ``C:\\Python27\\Lib\\site-packages``.\r\nIf Python was installed otherwhere, the ``\\Lib\\site-packages``\r\nsuffix should be added accordingly. When asked, use the full\r\ninstallation (i.e., everything checked).\r\n\r\n\r\nRequirements on Cygwin (Windows)\r\n--------------------------------\r\n\r\nIf you just wish to run Dose on Windows, you should read the previous\r\nsection instead. Cygwin_ is another platform, one that runs on Windows\r\nand has many resources from Linux. On Cygwin, even the Python\r\nresources are the ones documented as available in POSIX systems.\r\n\r\nTo install Python 2 and wxPython Classic 3.0 on Cygwin, you\r\nhave to install these packages from the Cygwin installer (as well\r\nas their dependencies detected by the installer):\r\n\r\n- ``Net/curl``\r\n- ``Python/python``\r\n- ``Libs/python-wx3.0``\r\n- ``X11/xinit``\r\n- ``X11/xorg-server``\r\n\r\nOpen the *Start Menu -> Cygwin-X -> XWin Server*\\ , it will just flash\r\nand disappear, but its X and C icons should appear in the taskbar.\r\nClick on the *C icon -> System -> Cygwin Terminal* to open a terminal\r\nthat can display a X GUI in Windows.\r\n\r\nTo install pip, you should use this command in the Cygwin Terminal::\r\n\r\n  curl https://bootstrap.pypa.io/get-pip.py | python\r\n\r\nTo activate wxPython Classic 3.0 (i.e., to make it the default\r\nwxPython installation)::\r\n\r\n  cd /lib/python2.7/site-packages\r\n  echo wx-3.0* > wx.pth\r\n\r\n\r\n----\r\n\r\nPlease see the `CHANGES.rst`_ file for more information.\r\n\r\n.. _`CHANGES.rst`: http://github.com/danilobellini/dose/CHANGES.rst\r\n\r\n----\r\n\r\n.. _colorama: https://pypi.python.org/pypi/colorama\r\n.. _watchdog: https://pypi.python.org/pypi/watchdog\r\n\r\n.. _`how to install wxPython`:\r\n  https://wiki.wxpython.org/How%20to%20install%20wxPython\r\n\r\n.. _PyPI: http://pypi.python.org/pypi/dose\r\n.. _Homebrew: http://brew.sh\r\n.. _`Python official site`: https://www.python.org\r\n.. _`wxPython official site`: https://www.wxpython.org\r\n\r\n.. _`the DaviXX' Blog post about wxPython on OS X`:\r\n  http://davixx.fr/blog/2016/01/25/wxpython-on-os-x-el-capitan/\r\n\r\n.. _tox: https://tox.readthedocs.io\r\n.. _Cygwin: https://www.cygwin.com\r\n\r\n\r\nCopyright (C) 2012-2016 Danilo de Jesus da Silva Bellini",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/danilobellini/dose",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dose",
    "package_url": "https://pypi.org/project/dose/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dose/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/danilobellini/dose"
    },
    "release_url": "https://pypi.org/project/dose/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Automated traffic light/signal/semaphore GUI showing the state during test driven development (TDD), mainly written for coding dojos.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12727875,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9638d27a456eb7e5063aad5feabe4104df242a270bdd24cdb30ff00739910685",
        "md5": "de8b3f96ffdbdf573c54d1202e786ad7",
        "sha256": "2392c3b7be780df24e006c3539602af58a27d211312a0f0e30fd6437b712dc62"
      },
      "downloads": -1,
      "filename": "dose-1.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "de8b3f96ffdbdf573c54d1202e786ad7",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 370891,
      "upload_time": "2016-09-19T12:02:14",
      "upload_time_iso_8601": "2016-09-19T12:02:14.576480Z",
      "url": "https://files.pythonhosted.org/packages/96/38/d27a456eb7e5063aad5feabe4104df242a270bdd24cdb30ff00739910685/dose-1.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7cf1531bf6f13d360107a7223d240da690e6ff7c059eeac94fe9b4eb5469a8bc",
        "md5": "a45e00fb1be154af7d3f8091bb57b49d",
        "sha256": "e2a594a3af7919aa7e80f33e17773fba1c888dbf3b159201386c3b71f345a4e8"
      },
      "downloads": -1,
      "filename": "dose-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a45e00fb1be154af7d3f8091bb57b49d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 361078,
      "upload_time": "2016-09-19T12:02:06",
      "upload_time_iso_8601": "2016-09-19T12:02:06.254590Z",
      "url": "https://files.pythonhosted.org/packages/7c/f1/531bf6f13d360107a7223d240da690e6ff7c059eeac94fe9b4eb5469a8bc/dose-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a210567e861c4e392a77eaa8a2abaaed8cd32a15cb82fe5524bc6aeac656b1bd",
        "md5": "65f5615a92b6e3fc902fb2ab163593c6",
        "sha256": "240628d7349753cc1dfdf9092157a58c6004bc543c2dca3f10e9b3768b781b0a"
      },
      "downloads": -1,
      "filename": "dose-1.2.0.zip",
      "has_sig": false,
      "md5_digest": "65f5615a92b6e3fc902fb2ab163593c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 371333,
      "upload_time": "2016-09-19T12:02:10",
      "upload_time_iso_8601": "2016-09-19T12:02:10.570151Z",
      "url": "https://files.pythonhosted.org/packages/a2/10/567e861c4e392a77eaa8a2abaaed8cd32a15cb82fe5524bc6aeac656b1bd/dose-1.2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}