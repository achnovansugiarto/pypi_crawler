{
  "info": {
    "author": "Luiz Eduardo Nishino Gomes do Amaral",
    "author_email": "luizamaral306@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware"
    ],
    "description": "# RPi_mcp3008\nRPi_mcp3008 is a library to listen to the MCP3008 A/D converter chip with a RPi.\nThis library implements the example communication protocol described in the [datasheet](https://www.adafruit.com/datasheets/MCP3008.pdf).\n\n\nCommunication is made through RPi SPI port using [SpiDev](https://github.com/doceme/py-spidev)\n\n## Wiring\nConnect the SPI data cables in the tables below. Choose either CE0# or CE1# to connect to CS.\n\n### RPi SPI GPIOs\n\n| RPi GPIO  | Mode |\n|-----------|:-----|\n| GPIO 07   | CE1# |\n| GPIO 08   | CE0# |\n| GPIO 09   | MISO |\n| GPIO 10   | MOSI |\n| GPIO 11   | SCLK |\n\n\n### MCP3008 Pinout\n\n| Pin | Description | Pin | Description |\n|-----|:------------|:----|:------------|\n| 01  |     CH0     | 09  | Vdd - Supply voltage (2.7V - 5.5V) |\n| 02  |     CH1     | 10  | Vref - Reference voltage |\n| 03  |     CH2     | 11  | AGND - Analog ground |\n| 04  |     CH3     | 12  | CLK - SPI Clock (SCLK) |\n| 05  |     CH4     | 13  | Dout - Data out (MISO) |\n| 06  |     CH5     | 14  | Din - Data in (MOSI) |\n| 07  |     CH6     | 15  | CS - Chip select (CE0# or CE1#) |\n| 08  |     CH7     | 16  | DGND - Digital ground |\n\nPlease check the [Adafruit guide](https://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/connecting-the-cobbler-to-a-mcp3008) on the MCP3008 for more information about wiring\n\n\n## Usage\n\nRPi_mcp3008 uses the `with` statement to properly handle the SPI bus cleanup.\n```python\nimport mcp3008\nwith mcp3008.MCP3008() as adc:\n    print(adc.read([mcp3008.CH0])) # prints raw data [CH0]\n```\nIt's possible instantiate the object normally, but it's necessary to call the close method before terminating the program.\n```python\nimport mcp3008\nadc = mcp3008.MCP3008()\nprint(adc.read([mcp3008.CH0])) # prints raw data [CH0]\nadc.close()\n```\nThe initialization arguments are `MCP3008(bus=0, device=0, max_speed_hz=976000)` where:\n`MCP3008(X, Y)` will open `/dev/spidev-X.Y`, same as `spidev.SpiDev.open(X, Y)`\nBoth arguments are optional and have a default value of `0`.\nThe default max SPI driver speed is 976 kHz.\n\n### Methods\nCurrently there are two implemented methods:\n```python\ndef read(self, modes, norm=False):\n    '''\n    Returns the raw value (0 ... 1024) of the reading.\n    The modes argument is a list with the modes of operation to be read (e.g.\n    [mcp3008.CH0,mcp3008.Df0]).\n    norm is a normalization factor, usually Vref.\n    '''\n```\n\n```python\ndef read_all(self, norm=False):\n    '''\n    Returns a list with the readings of all the modes\n    Data Order:\n    [DF0, DF1, DF2, DF3, DF4, DF5, DF6, DF7,\n     CH0, CH1, CH2, CH3, CH4, CH5, CH6, CH7]\n    norm is a normalization factor, usually Vref.\n    '''\n```\n* The `modes` argument must be a list with at least one of 16 modes listed below\n* The `norm` argument is a normalization factor that rescales raw data, usually Vref\n\n### Fixed mode\nYou can also declare the class with a `fixed mode`, which will make the instance callable and always return the value of the listed modes.\nAgain you can normalize the data with the norm argument when calling the instance.\n\n```python\nimport mcp3008\nwith mcp3008.MCP3008.fixed([mcp3008.CH0, mcp3008.DF0]) as adc:\n    print(adc())     # prints raw data [CH0, DF0]\n    print(adc(5.2))  # prints normalized data [CH0, DF0]\n```\n\n## MCP3008 Operation Modes\nMCP3008 has 16 different operation modes:\nIt can listen to each of the channels individually **Single Ended** or in a pseudo-differential mode **Differential**\n\n| Single Ended | Differential |\n|--------------|:-------------|\n| CH0  | DF0  (CH0 = IN+; CH1 = IN-) |\n| CH1  | DF0  (CH0 = IN-; CH1 = IN+) |\n| CH2  | DF0  (CH2 = IN+; CH3 = IN-) |\n| CH3  | DF0  (CH2 = IN-; CH3 = IN+) |\n| CH4  | DF0  (CH4 = IN+; CH5 = IN-) |\n| CH5  | DF0  (CH4 = IN-; CH5 = IN+) |\n| CH6  | DF0  (CH6 = IN+; CH7 = IN-) |\n| CH7  | DF0  (CH6 = IN-; CH7 = IN+) |\n\nUse the table above as the operation mode when calling `MCP3008.read(modes)` or setting the `MCP3008.fixed(modes)` mode. (e.g. `MCP3008.read([mcp3008.CH0, mcp3008.DF1])`)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luxedo/RPi_mcp3008",
    "keywords": "RPi MCP3008 SPI interface",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcp3008",
    "package_url": "https://pypi.org/project/mcp3008/",
    "platform": "",
    "project_url": "https://pypi.org/project/mcp3008/",
    "project_urls": {
      "Homepage": "https://github.com/luxedo/RPi_mcp3008"
    },
    "release_url": "https://pypi.org/project/mcp3008/1.0.0/",
    "requires_dist": [
      "spidev"
    ],
    "requires_python": "",
    "summary": "RPi_mcp3008 is a library to listen to the MCP3008 A/D converter chip, as described in the datasheet.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11410972,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec25a8a8b3d891ab49e7888ccac41d332ce5bc3587cee5ebbd1fd6a7a4c54b5c",
        "md5": "64b7dadb0f428ff651a90f7eb7dca3f1",
        "sha256": "97ad33d325782369648e7a5fa69b89087cb853ad845bb3dfac5a87672589a954"
      },
      "downloads": -1,
      "filename": "mcp3008-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64b7dadb0f428ff651a90f7eb7dca3f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15381,
      "upload_time": "2021-09-09T22:51:41",
      "upload_time_iso_8601": "2021-09-09T22:51:41.224011Z",
      "url": "https://files.pythonhosted.org/packages/ec/25/a8a8b3d891ab49e7888ccac41d332ce5bc3587cee5ebbd1fd6a7a4c54b5c/mcp3008-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}