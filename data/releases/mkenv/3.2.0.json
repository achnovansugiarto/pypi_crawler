{
  "info": {
    "author": "Julian Berman",
    "author_email": "Julian@GrayVines.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "=====\nmkenv\n=====\n\n|PyPI| |Pythons| |Travis| |AppVeyor|\n\nmkenv is a tool for configuring, in a single file, a set of virtualenvs,\nwhich packages to install into each, and any binaries to make globally\navailable from within.\n\n\nInstallation\n------------\n\nThe usual::\n\n    $ pip install mkenv\n\n\nUsage\n-----\n\nThe best way to use ``mkenv`` is by creating a file named\n``~/.local/share/virtualenvs/virtualenvs.toml``. Here's an example of what goes\nin it:\n\n.. code-block:: toml\n\n    [virtualenv.development]\n    install = [\n        \"pudb\",\n        \"twisted\",\n    ]\n    link = [\"trial\"]\n\n    [virtualenv.app]\n    install = [\"$DEVELOPMENT/myapp\"]\n\nAfter creating the above, running ``convergeenvs`` will create 2 virtualenvs,\none called \"development\" with pudb and twisted installed into it and trial\nlinked from within it onto your ``PATH``, and a second called \"app\" installing\nthe corresponding directory.\n\nThat's about all you need to know. If you insist on reading further though,\nmkenv has an older, not-very-recommended mutable interface which allows you to\ncreate virtualenvs in a central location without tracking them in a config file\n(or converging them). For that, usage is similar to ``mkvirtualenv``,\nalthough ``mkenv`` passes arguments directly through to ``virtualenv``:\n\n.. code-block:: sh\n\n    $ mkenv nameofvenv -- -p pypy\n\nwill create a virtual environment in an appropriate platform-specific\ndata directory, or in the directory specified by ``WORKON_HOME`` for\ncompatibility with virtualenvwrapper.\n\n\nSingle-Purpose Virtualenvs\n--------------------------\n\nA common use case for virtualenvs is for single-purpose installations, e.g.:\n\n\"I want to install fabric and give it its own virtualenv so that its\ndependencies can be independently upgraded, all while still being able to use\nthe ``fab`` binary globally\".\n\n``mkenv`` supports a ``--link`` option for this use case:\n\n.. code-block:: sh\n\n    $ mkenv -i fabric --link fab\n\nwill create a virtualenv for fabric (in the same normal location), but will\nsymlink the ``fab`` binary from within the virtualenv into your\n``~/.local/bin`` directory.\n\n(You may have heard of `pipsi <https://github.com/mitsuhiko/pipsi>`_ which is a\nsimilar tool for this use case, but with less customization than I would have\nliked.)\n\n\nTemporary Virtualenvs\n---------------------\n\nI also find ``mktmpenv`` useful for quick testing. To support its use case,\n``mkenv`` currently supports a different but similar style of temporary\nvirtualenv.\n\nInvoking::\n\n    $ venv=$(mkenv -t)\n\nin your shell will create (or re-create) a global temporary virtualenv,\nand print its ``bin/`` subdirectory (which in this case will be then\nstored in the ``venv`` variable). It can subsequently be used by, e.g.::\n\n    $ $venv/python\n\nor::\n\n    $ $venv/pip ...\n\net cetera.\n\nYou may prefer using::\n\n    $ cd $(mkenv -t)\n\nas your temporary venv workflow if you're into that sort of thing instead.\n\nThe global virtualenv is cleared each time you invoke ``mkenv -t``.\nUnless you care, unlike virtualenvwrapper's ``mktmpenv``, there's no\nneed to care about cleaning it up, whenever it matters for the next\ntime, it will be cleared and overwritten.\n\n``mkenv`` may support the more similar \"traditional\" one-use virtualenv in the\nfuture, but given that it does not activate virtualenvs by default (see below),\nthe current recommendation for this use case would be to simply use the\n``virtualenv`` binary directly.\n\n\nThe 5 Minute Tutorial\n---------------------\n\nBesides the ``mkenv`` for named-virtualenv creation and ``mkenv -t`` for\ntemporary-virtualenv creation described above::\n\n    $ findenv name foo\n\nwill output (to standard output) the path to a virtualenv with the given name\n(see also ``--existing-only``), and::\n\n    $ rmenv foo\n\nwill remove it.\n\nThere are a number of other slight variants, see the ``--help`` information for\neach of the three binaries.\n\n*Real documentation to come (I hope)*\n\n\nWhy don't I use virtualenvwrapper?\n----------------------------------\n\n``virtualenvwrapper`` is great! I've used it for a few years. But I've\nslowly settled on a much smaller subset of its functionality that I like\nto use. Specifically:\n\n    * I don't like activating virtualenvs.\n      \n      virtualenvs are magical and hacky enough on their own, and piling\n      activation on top just makes things even more messy for me, especially\n      when moving around between different projects in a shell.  Some people\n      use ``cd`` tricks to solve this, but I just want simplicity.\n\n    * I don't need project support.\n\n      I've never attached a project to a virtualenv. I just use a naming\n      convention, naming the virtualenv with the name of the repo (with simple\n      coersion), and then using `dynamic directory expansion in my shell\n      <https://github.com/Julian/dotfiles/blob/4376b05de0f7af9e7ecb2e3596b8830c806c5d71/.config/zsh/.zshrc#L59-L92>`_\n      to handle association.\n\nBasically, I just want a thing that is managing a central repository of\nvirtualenvs for me. So that's what ``mkenv`` does.\n\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/mkenv.svg\n   :alt: PyPI version\n   :target: https://pypi.python.org/pypi/mkenv\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/mkenv.svg\n   :alt: Supported Python versions\n   :target: https://pypi.python.org/pypi/mkenv\n\n.. |Travis| image:: https://travis-ci.org/Julian/mkenv.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.org/Julian/mkenv\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/9ybhc3jvygurtl90/branch/master?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/mkenv\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Julian/mkenv",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mkenv",
    "package_url": "https://pypi.org/project/mkenv/",
    "platform": "",
    "project_url": "https://pypi.org/project/mkenv/",
    "project_urls": {
      "Homepage": "https://github.com/Julian/mkenv"
    },
    "release_url": "https://pypi.org/project/mkenv/3.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simpler tool for creating venvs in a central location",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4073461,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2217bb5625a56c741b60f85c70ddc6115203350173f3220cca02893702e5058",
        "md5": "4a844d7de143c430882e9689c002929f",
        "sha256": "364e7ed27775cf80e9175ee2dc7abe76234525cc5cf90b3e0fe62786e3739024"
      },
      "downloads": -1,
      "filename": "mkenv-3.2.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "4a844d7de143c430882e9689c002929f",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 56301,
      "upload_time": "2018-07-13T19:13:06",
      "upload_time_iso_8601": "2018-07-13T19:13:06.124344Z",
      "url": "https://files.pythonhosted.org/packages/c2/21/7bb5625a56c741b60f85c70ddc6115203350173f3220cca02893702e5058/mkenv-3.2.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "adcbb361cc0b39af6df3cd859d2cb52a77782ca63b486e7982af451b0a7d7f95",
        "md5": "fcea0525ac134752d76f31d6359a3862",
        "sha256": "efc23b373413f148516cc166e97b07194fe734d6cad3edb22ab8a28226334ce7"
      },
      "downloads": -1,
      "filename": "mkenv-3.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fcea0525ac134752d76f31d6359a3862",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17455,
      "upload_time": "2018-07-13T19:13:08",
      "upload_time_iso_8601": "2018-07-13T19:13:08.128554Z",
      "url": "https://files.pythonhosted.org/packages/ad/cb/b361cc0b39af6df3cd859d2cb52a77782ca63b486e7982af451b0a7d7f95/mkenv-3.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}