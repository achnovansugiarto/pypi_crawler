{
  "info": {
    "author": "Jean-Tiare Le Bigot",
    "author_email": "jtlebigot@socialludia.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet"
    ],
    "description": "Dynamodb-mapper -- a DynamoDB object mapper, based on boto.\n\nPresentation\n============\n\n`DynamoDB <http://aws.amazon.com/dynamodb/>`_ is a minimalistic NoSQL engine\nprovided by Amazon as a part of their AWS product.\n\n**DynamoDB** allows you to stores documents composed of unicode strings or numbers\nas well as sets of unicode strings and numbers. Each tables must define a hash\nkey and may define a range key. All other fields are optional.\n\n**Dynamodb-mapper** brings a tiny abstraction layer over DynamoDB to overcome some\nof the limitations with no performance compromise. It is highly inspired by the\nmature `MoongoKit project <http://namlook.github.com/mongokit>`_\n\n- **Full documentation**: http://dynamodb-mapper.readthedocs.org/en/latest/\n- **Report bugs**: https://bitbucket.org/Ludia/dynamodb-mapper/issues\n- **Download**: http://pypi.python.org/pypi/dynamodb-mapper\n\nRequirements\n============\n\nThe documentation currently assumes that you're running Boto 2.3.0 or later.\nIf you're not, then the API for query and scan changes. You will have to supply\nraw condition dicts, as is done in boto itself.\n\nAlso note that Boto 2.3.1 or later is required for autoincrement_int hash keys.\nEarlier versions will fail.\n\nWe assume you've correctly set your Boto credentials.\n\nExample usage\n=============\n\n\nQuick install\n-------------\n\n::\n\n    $ pip install dynamodb-mapper\n\nIf you have not yet configured Boto, you may simply\n\n::\n\n    $ export AWS_ACCESS_KEY_ID=<your id key here>\n    $ export AWS_SECRET_ACCESS_KEY=<your secret key here>\n\n\nFirst Model\n-----------\n\n::\n\n    from dynamodb_mapper.model import DynamoDBModel\n\n\n    class DoomMap(DynamoDBModel):\n        __table__ = u\"doom_map\"\n        __hash_key__ = u\"episode\"\n        __range_key__ = u\"map\"\n        __schema__ = {\n            u\"episode\": int,\n            u\"map\": int,\n            u\"name\": unicode,\n            u\"cheats\": set,\n        }\n        __defaults__ = {\n            \"cheats\": set([u\"Konami\"]),\n        }\n\n\nInitial Table creation\n----------------------\n\n::\n\n    conn = ConnectionBorg()\n    conn.create_table(DoomMap, 10, 10, wait_for_active=True)\n\n\nModel Usage\n-----------\n\n::\n\n    e1m1 = DoomMap()\n    e1m1.episode = 1\n    e1m1.map = 1\n    e1m1.name = u\"Hangar\"\n    e1m1.cheats = set([u\"idkfa\", u\"iddqd\", u\"idclip\"])\n    e1m1.save()\n\n\n    # Later on, retrieve that same object from the DB...\n    e1m1 = DoomMap.get(1, 1)\n\n    # query all maps of episode 1\n    e1_maps = DoomMap.query(hash_key=1)\n\n    # query all maps of episode 1 with 'map' hash_key > 5\n    from boto.dynamodb.condition import GT\n    e1_maps_after_5 = DoomMap.query(\n        hash_key=1,\n        range_key_condition=GT(5))\n\nContribute\n==========\n\nWant to contribute, report a but of request a feature ? The development goes on\nat Ludia's BitBucket account:\n\n- **Report bugs**: https://bitbucket.org/Ludia/dynamodb-mapper/issues\n- **Fork the code**: https://bitbucket.org/Ludia/dynamodb-mapper/overview",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dynamodb-mapper.readthedocs.org/en/latest/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dynamodb-mapper",
    "package_url": "https://pypi.org/project/dynamodb-mapper/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dynamodb-mapper/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://dynamodb-mapper.readthedocs.org/en/latest/"
    },
    "release_url": "https://pypi.org/project/dynamodb-mapper/1.6.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Object mapper for Amazon DynamoDB",
    "version": "1.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 791468,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be6c6554f2bb74600a972ebf2d2f0332ae8b5563748635dbaeca67078e538527",
        "md5": "47fb88e443c5104799cefda635c13ab6",
        "sha256": "97abfb488c2568f383ea2f5a9c810e2ffcbbecd42ba02dc9c69d79fa89bee540"
      },
      "downloads": -1,
      "filename": "dynamodb-mapper-1.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "47fb88e443c5104799cefda635c13ab6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21672,
      "upload_time": "2012-08-13T23:49:19",
      "upload_time_iso_8601": "2012-08-13T23:49:19.458993Z",
      "url": "https://files.pythonhosted.org/packages/be/6c/6554f2bb74600a972ebf2d2f0332ae8b5563748635dbaeca67078e538527/dynamodb-mapper-1.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}