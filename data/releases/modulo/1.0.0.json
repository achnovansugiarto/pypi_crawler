{
  "info": {
    "author": "Andrei Lapets",
    "author_email": "a@lapets.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "======\nmodulo\n======\n\nPure-Python library for working with modular arithmetic, congruence classes, and finite fields.\n\n|pypi| |readthedocs| |actions| |coveralls|\n\n.. |pypi| image:: https://badge.fury.io/py/modulo.svg\n   :target: https://badge.fury.io/py/modulo\n   :alt: PyPI version and link.\n\n.. |readthedocs| image:: https://readthedocs.org/projects/modulo-lib/badge/?version=latest\n   :target: https://modulo-lib.readthedocs.io/en/latest/?badge=latest\n   :alt: Read the Docs documentation status.\n\n.. |actions| image:: https://github.com/lapets/modulo/workflows/lint-test-cover-docs/badge.svg\n   :target: https://github.com/lapets/modulo/actions/workflows/lint-test-cover-docs.yml\n   :alt: GitHub Actions status.\n\n.. |coveralls| image:: https://coveralls.io/repos/github/lapets/modulo/badge.svg?branch=main\n   :target: https://coveralls.io/github/lapets/modulo?branch=main\n   :alt: Coveralls test coverage summary.\n\nPurpose\n-------\nThe library allows users to work with congruence classes (including finite field elements) as objects, with support for many common operations.\n\nPackage Installation and Usage\n------------------------------\nThis library is available as a `package on PyPI <https://pypi.org/project/modulo>`__::\n\n    python -m pip install modulo\n\nThe library can be imported in the usual way::\n\n    from modulo import modulo\n\nExamples\n^^^^^^^^\nThis library makes it possible to work with `congruence classes <https://en.wikipedia.org/wiki/Congruence_relation>`__ (and sets of congruence classes such as finite fields) as objects. A congruence class is defined using a representative integer and a modulus::\n\n    >>> from modulo import modulo\n    >>> modulo(3, 7)\n    modulo(3, 7)\n\nBuilt-in operators can be used to perform modular addition, modular subtraction, and modular negation of congruence classes::\n\n    >>> modulo(3, 7) + modulo(5, 7)\n    modulo(1, 7)\n    >>> modulo(1, 7) - modulo(4, 7)\n    modulo(4, 7)\n    >>> -modulo(5, 7)\n    modulo(2, 7)\n\nModular multiplication, division, inversion, and exponentiation are also supported (when they are defined)::\n\n    >>> modulo(3, 7) * modulo(5, 7)\n    modulo(1, 7)\n    >>> modulo(1, 7) // modulo(3, 7)\n    modulo(5, 7)\n    >>> modulo(5, 7) ** 2\n    modulo(4, 7)\n    >>> modulo(5, 7) ** (-1)\n    modulo(3, 7)\n\nIndividual congruence classes can be compared with one another according to their least nonnegative residues (and, thus, can also be sorted)::\n\n    >>> mod(2, 7) < mod(3, 7)\n    True\n    >>> list(sorted([mod(2, 3), mod(1, 3), mod(0, 3)]))\n    [modulo(0, 3), modulo(1, 3), modulo(2, 3)]\n\nThe membership operation is supported between integers and congruence classes::\n\n    >>> 3 in mod(3, 7)\n    True\n    >>> 10 in mod(3, 7)\n    True\n    >>> 4 in mod(3, 7)\n    False\n\n.. |len| replace:: ``len``\n.. _len: https://docs.python.org/3/library/functions.html#len\n\nA set of congruence classes such as a finite field can also be defined. The built-in length function |len|_ and the membership operator are supported::\n\n    >>> len(modulo(7))\n    7\n    >>> modulo(3, 7) in modulo(7)\n    True\n\n.. |int| replace:: ``int``\n.. _int: https://docs.python.org/3/library/functions.html#int\n\nThe built-in |int|_ function can be used to retrieve the least nonnegative residue of a congruence class and the built-in |len|_ function can be used to retrieve the modulus of a congruence class or set of congruence classes (this is the recommended approach)::\n\n    >>> c = modulo(3, 7)\n    >>> int(c)\n    3\n    >>> len(c)\n    7\n\nCongruence classes and sets of congruence classes are also hashable (making it possible to use them as dictionary keys and as set members) and iterable::\n\n    >>> len({mod(0, 3), mod(1, 3), mod(2, 3)})\n    3\n    >>> list(mod(4))\n    [modulo(0, 4), modulo(1, 4), modulo(2, 4), modulo(3, 4)]\n    >>> from itertools import islice\n    >>> list(islice(mod(3, 7), 5))\n    [3, 10, 17, 24, 31]\n\nThe `Chinese remainder theorem <https://en.wikipedia.org/wiki/Chinese_remainder_theorem>`__ can be applied to construct the intersection of two congruence classes as a congruence class (when it is possible to do so)::\n\n    >>> mod(23, 100) & mod(31, 49)\n    modulo(423, 4900)\n    >>> mod(2, 10) & mod(4, 20) is None\n    True\n\nSome familiar forms of notation for referring to congruence classes (and sets thereof) are also supported::\n\n    >>> Z/(23*Z)\n    modulo(23)\n    >>> 23*Z\n    modulo(0, 23)\n    >>> 17 + 23*Z\n    modulo(17, 23)\n\nDevelopment\n-----------\nAll installation and development dependencies are managed using `setuptools <https://pypi.org/project/setuptools>`__ and are fully specified in ``setup.py``. The ``extras_require`` parameter is used to `specify optional requirements <https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#optional-dependencies>`__ for various development tasks. This makes it possible to specify additional options (such as ``docs``, ``lint``, and so on) when performing installation using `pip <https://pypi.org/project/pip>`__::\n\n    python -m pip install .[docs,lint]\n\nDocumentation\n^^^^^^^^^^^^^\nThe documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org>`__::\n\n    python -m pip install .[docs]\n    cd docs\n    sphinx-apidoc -f -E --templatedir=_templates -o _source .. ../setup.py && make html\n\nTesting and Conventions\n^^^^^^^^^^^^^^^^^^^^^^^\nAll unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org>`__ (see ``setup.cfg`` for configuration details)::\n\n    python -m pip install .[test]\n    nosetests --cover-erase\n\nAlternatively, all unit tests are included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`__::\n\n    python modulo/modulo.py -v\n\nStyle conventions are enforced using `Pylint <https://www.pylint.org>`__::\n\n    python -m pip install .[lint]\n    pylint modulo\n\nContributions\n^^^^^^^^^^^^^\nIn order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <https://github.com/lapets/modulo>`__ for this library.\n\nVersioning\n^^^^^^^^^^\nBeginning with version 0.2.0, the version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`__.\n\nPublishing\n^^^^^^^^^^\nThis library can be published as a `package on PyPI <https://pypi.org/project/modulo>`__ by a package maintainer. First, install the dependencies required for packaging and publishing::\n\n    python -m pip install .[publish]\n\nRemove any old build/distribution files. Then, package the source into a distribution archive using the `wheel <https://pypi.org/project/wheel>`__ package::\n\n    rm -rf dist *.egg-info\n    python setup.py sdist bdist_wheel\n\nFinally, upload the package distribution archive to `PyPI <https://pypi.org>`__ using the `twine <https://pypi.org/project/twine>`__ package::\n\n    python -m twine upload dist/*\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lapets/modulo",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modulo",
    "package_url": "https://pypi.org/project/modulo/",
    "platform": null,
    "project_url": "https://pypi.org/project/modulo/",
    "project_urls": {
      "Homepage": "https://github.com/lapets/modulo"
    },
    "release_url": "https://pypi.org/project/modulo/1.0.0/",
    "requires_dist": [
      "egcd (~=0.3)",
      "coveralls (~=3.3.1) ; extra == 'coveralls'",
      "sphinx (~=4.2.0) ; extra == 'docs'",
      "sphinx-rtd-theme (~=1.0.0) ; extra == 'docs'",
      "pylint (~=2.14.0) ; extra == 'lint'",
      "setuptools (~=62.0) ; extra == 'publish'",
      "wheel (~=0.37) ; extra == 'publish'",
      "twine (~=4.0) ; extra == 'publish'",
      "pytest (~=7.0) ; extra == 'test'",
      "pytest-cov (~=3.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Pure-Python library for working with modular arithmetic, congruence classes, and finite fields.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14606473,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "507f457c137d57662fc1bd79c007ea796aa5b5e1c605c162fdc0eaf2ca0d5a08",
        "md5": "8bb4981ca82db6b49758c63a0abb23b0",
        "sha256": "a20dd4c7608bd7ee47dae3ef46ad945bd09e2fd98c48aee6068a136c87f5bd42"
      },
      "downloads": -1,
      "filename": "modulo-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bb4981ca82db6b49758c63a0abb23b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11000,
      "upload_time": "2022-06-17T03:18:25",
      "upload_time_iso_8601": "2022-06-17T03:18:25.599300Z",
      "url": "https://files.pythonhosted.org/packages/50/7f/457c137d57662fc1bd79c007ea796aa5b5e1c605c162fdc0eaf2ca0d5a08/modulo-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "474163a758776e4da8f011da96f7480b8bbf39f0f0228252d9ff6071b05cef51",
        "md5": "6172182a260ba35214dfa01ae230eab4",
        "sha256": "b22cfabd4127999b19f66cd0882ff681d8fd9a0413b49b0304ff0d1790a6ab4c"
      },
      "downloads": -1,
      "filename": "modulo-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6172182a260ba35214dfa01ae230eab4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12662,
      "upload_time": "2022-06-17T03:18:27",
      "upload_time_iso_8601": "2022-06-17T03:18:27.220436Z",
      "url": "https://files.pythonhosted.org/packages/47/41/63a758776e4da8f011da96f7480b8bbf39f0f0228252d9ff6071b05cef51/modulo-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}