{
  "info": {
    "author": "AberSheeran",
    "author_email": "AberSheeran@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\n# mecache\n\nAn easy-to-use cache module\n\n## How to use\n\nRun `pip install mecache` or `pipenv install mecache` to install.\n\nBuilt-in two cache modes, file cache mode, redis cache mode.\n\nYou can control the time of cache failure by using the cache parameters.\n\n### redis modes\n\n```python\nfrom mecache import Redis\n\n# Refer to https://redis-py.readthedocs.io/en/latest/ for all parameters\nredis = Redis(host=\"127.0.0.1\", port='6379', db=0, password=\"password\")\n\n# Cache failure after 60 seconds\n@redis.cache(60)\ndef do(x, y):\n    import time\n    time.sleep(2)\n    return x+y\n```\n\n### file modes\n\n```python\nfrom mecache import File\n\n# CACHE_PATH like '/var/tmp/test-cache'\nfile = File(\"CACHE_PATH\")\n\n# Cache failure after 60 seconds\n@file.cache(60)\ndef do(x, y):\n    import time\n    time.sleep(2)\n    return x+y\n```\n\n### asynchronous file modes\n\n```python\nfrom mecache import AioFile\n\n# CACHE_PATH like '/var/tmp/test-cache'\nfile = AioFile(\"CACHE_PATH\")\n\n# Cache failure after 60 seconds\n@file.cache(60)\nasync def do(x, y):\n    return await do.something\n```\n\n## Advanced usage\n\nIf the parameters of a function are difficult to serialize using pickle, you can specify the rules that generate key by customizing `keyf`. The return value of the function `keyf`  must be a string.\n\n```python\n# a example in django view function\n\ndef key_by_user(request):\n    return request.user.username\n\n@file.cache(60*60, keyf=key_by_user)\ndef home(request):\n    return render(request, 'home.html')\n```\n\nYou can also overwrite `keyf` for all cache. This is a example:\n\n```python\nfrom mecache import File\n\nclass CustomFile(File):\n    @staticmethod\n    def keyf(*args, **kwargs):\n        string = do.something\n        return string\n\nfile = CustomFile(\"CACHE_PATH\")\n```\n\n### Custom made\n\nIf you need a custom cache, you can use `BaseCache` or `AioBaseCache` to create your cache class. Like this\n\n```python\nfrom mecache import BaseCache\n\nclass CustomCache(BaseCache):\n\n    def get_cache(self, func, key, max_time):\n        qual = func.__qualname__\n        return get(qual+\":\"+key)\n\n    def set_cache(self, result, func, key, max_time):\n        qual = func.__qualname__\n        set(qual+\":\"+key, result, ex=time.time()+max_time)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AberSheeran/mecache",
    "keywords": "cache,memory,redis,file,python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mecache",
    "package_url": "https://pypi.org/project/mecache/",
    "platform": "",
    "project_url": "https://pypi.org/project/mecache/",
    "project_urls": {
      "Homepage": "https://github.com/AberSheeran/mecache"
    },
    "release_url": "https://pypi.org/project/mecache/1.3.0/",
    "requires_dist": [
      "redis",
      "aiofiles"
    ],
    "requires_python": ">=3.6.0",
    "summary": "An easy-to-use cache module",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6991245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea2547d5af073bd069a8c8a323317a6d935a713041f814803987f3bc48a6a216",
        "md5": "472d9e6c1e76eb478e1b40a5a181b72d",
        "sha256": "1162b4812f1585a64e5c39d44217130903468a88d6c8f50eba56bc97911b8db6"
      },
      "downloads": -1,
      "filename": "mecache-1.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "472d9e6c1e76eb478e1b40a5a181b72d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 6104,
      "upload_time": "2019-06-06T16:22:36",
      "upload_time_iso_8601": "2019-06-06T16:22:36.012555Z",
      "url": "https://files.pythonhosted.org/packages/ea/25/47d5af073bd069a8c8a323317a6d935a713041f814803987f3bc48a6a216/mecache-1.3.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b799cd46d7db66856d9aa3675fea6e8afb81b1154142059adc032f0d46189867",
        "md5": "ffc585a2cf71175a7c407cc5def109db",
        "sha256": "6b4954c929cb6cb9e84e3ec3e83e3f4d06f32e07951510e99405c874e68c6f20"
      },
      "downloads": -1,
      "filename": "mecache-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ffc585a2cf71175a7c407cc5def109db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 4699,
      "upload_time": "2019-06-06T16:22:37",
      "upload_time_iso_8601": "2019-06-06T16:22:37.574643Z",
      "url": "https://files.pythonhosted.org/packages/b7/99/cd46d7db66856d9aa3675fea6e8afb81b1154142059adc032f0d46189867/mecache-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}