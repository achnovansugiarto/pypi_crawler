{
  "info": {
    "author": "AberSheeran",
    "author_email": "AberSheeran@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\n# mecache\n\nAn easy-to-use cache module\n\n## How to use\n\nRun `pip install mecache` or `pipenv install mecache` to install.\n\nBuilt-in two cache modes, file cache mode, redis cache mode.\n\nYou can control the time of cache failure by using the cache parameters.\n\n### redis modes\n\n```python\nfrom mecache import Redis\n\n# Refer to https://redis-py.readthedocs.io/en/latest/ for all parameters\nredis = Redis(host=\"127.0.0.1\", port='6379', db=0, password=\"password\")\n\n# Cache failure after 60 seconds\n@redis.cache(60)\ndef do(x, y):\n    import time\n    time.sleep(2)\n    return x+y\n```\n\n### asynchronous redis modes\n\n```python\nfrom mecache import AioRedis\n\n# Refer to https://aioredis.readthedocs.io/en/latest/api_reference.html#aioredis.create_redis_pool for all parameters\nfile = await AioRedis('redis://localhost')\n\n# Cache failure after 60 seconds\n@file.cache(60)\nasync def do(x, y):\n    return await do.something\n```\n\n### file modes\n\n```python\nfrom mecache import File\n\n# CACHE_PATH like '/var/tmp/test-cache'\nfile = File(\"CACHE_PATH\")\n\n# Cache failure after 60 seconds\n@file.cache(60)\ndef do(x, y):\n    import time\n    time.sleep(2)\n    return x+y\n```\n\n### asynchronous file modes\n\n```python\nfrom mecache import AioFile\n\n# CACHE_PATH like '/var/tmp/test-cache'\nfile = AioFile(\"CACHE_PATH\")\n\n# Cache failure after 60 seconds\n@file.cache(60)\nasync def do(x, y):\n    return await do.something\n```\n\n## Advanced usage\n\nIf the parameters of a function are difficult to serialize using pickle, you can specify the rules that generate key by customizing `keyf`. The return value of the function `keyf`  must be a string.\n\n```python\n# a example in django view function\n\ndef key_by_user(request):\n    return request.user.username\n\n@file.cache(60*60, keyf=key_by_user)\ndef home(request):\n    return render(request, 'home.html')\n```\n\nYou can also overwrite `keyf` for all cache. This is a example:\n\n```python\nfrom mecache import File\n\nclass CustomFile(File):\n    @staticmethod\n    def keyf(*args, **kwargs):\n        string = do.something\n        return string\n\nfile = CustomFile(\"CACHE_PATH\")\n```\n\n### Custom made\n\nIf you need a custom cache, you can use `BaseCache` or `AioBaseCache` to create your cache class. Like this\n\n```python\nfrom mecache import BaseCache\n\nclass CustomCache(BaseCache):\n\n    def get_cache(self, func, key, max_time):\n        qual = func.__qualname__\n        return get(qual+\":\"+key)\n\n    def set_cache(self, result, func, key, max_time):\n        qual = func.__qualname__\n        set(qual+\":\"+key, result, ex=time.time()+max_time)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AberSheeran/mecache",
    "keywords": "cache,redis,file,python,asyncio,aiocache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mecache",
    "package_url": "https://pypi.org/project/mecache/",
    "platform": "",
    "project_url": "https://pypi.org/project/mecache/",
    "project_urls": {
      "Homepage": "https://github.com/AberSheeran/mecache"
    },
    "release_url": "https://pypi.org/project/mecache/1.4.2/",
    "requires_dist": [
      "aiofiles ; extra == 'aiofile'",
      "aioredis ; extra == 'aioredis'",
      "redis ; extra == 'redis'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "An easy-to-use cache module",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6991245,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5acf5bf64e4b502502531ff000368570781fd2fcc09b73c9280d92a82a49378",
        "md5": "266df0e4e38091289415eaac12fbfeb1",
        "sha256": "b110d07e9fcf40bc1b9a23fb298c7c4c92f04dff12100d63d2c23b05e24c3d34"
      },
      "downloads": -1,
      "filename": "mecache-1.4.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "266df0e4e38091289415eaac12fbfeb1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.0",
      "size": 6789,
      "upload_time": "2020-04-10T06:44:32",
      "upload_time_iso_8601": "2020-04-10T06:44:32.041048Z",
      "url": "https://files.pythonhosted.org/packages/f5/ac/f5bf64e4b502502531ff000368570781fd2fcc09b73c9280d92a82a49378/mecache-1.4.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d46ba8b17dbf1a2824d609c7e68188147075793c5a1b454cff6bab1dc93123e",
        "md5": "fc74313c87c00c0b26fb2c61abbdfb40",
        "sha256": "ddf5acb9139ef46fe89cd41bd7f418813ebb120af1348f600e0ae33e5135d243"
      },
      "downloads": -1,
      "filename": "mecache-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fc74313c87c00c0b26fb2c61abbdfb40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 5105,
      "upload_time": "2020-04-10T06:44:33",
      "upload_time_iso_8601": "2020-04-10T06:44:33.603174Z",
      "url": "https://files.pythonhosted.org/packages/8d/46/ba8b17dbf1a2824d609c7e68188147075793c5a1b454cff6bab1dc93123e/mecache-1.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}