{
  "info": {
    "author": "erkghlerngm44",
    "author_email": "erkghlerngm44@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "|forthebadge1| |forthebadge2| |forthebadge3| |forthebadge4|\n\nmalaffinity\n===========\n\nCalculate affinity between two MyAnimeList users\n\nWhat is this?\n-------------\n\nCalculate the affinity (Pearson's Correlation \\* 100) between a \"base\"\nuser and another user.\n\nThis script is meant to be used in bulk, where one user (the \"base\")'s\nscores are compared against multiple people, but there's nothing\nstopping you from using this as a one-off.\n\n**In all files here, the \"base\" user refers to the user whose scores\nother scores will be compared to (and affinities to said scores\ncalculated for). I don't have a better name to describe this, so please\nbear with me.**\n\n**In most cases, just assume that the \"base\" user is referring to you,\nor the person who will be running your script**\n\nInstall\n-------\n\n::\n\n    $ pip install malaffinity\n\nAlternatively, download this repo and run:\n\n::\n\n    $ python setup.py install\n\nOr copypasta the ``malaffinity`` directory to\nPython:raw-latex:`\\site`-packages and install the\n`dependencies <#dependencies>`__ yourself.\n\nDependencies\n------------\n\n-  BeautifulSoup4\n-  Requests\n-  Numpy (for Scipy) (`Windows\n   Wheel <http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy>`__)\n-  Scipy (`Windows\n   Wheel <http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy>`__)\n\nThese should be installed when you install this script, so no need to\nworry about them.\n\nNote that Scipy and Numpy don't play nice with some computers, depending\non your OS and other stuff. If it won't work with PIP, just open up\n`Cloud9 <https://c9.io/>`__,\n`Codeanywhere <https://codeanywhere.com/>`__ or\n`Codenvy <https://codenvy.com/>`__ and try installing this there. You\nmight need to run ``sudo pip install -U pip`` before doing anything,\nthough.\n\nUsage\n-----\n\n1. Create an instance of the ``MALAffinity`` class, providing the param\n   ``base_user``, and an optional ``round`` to it.\n\n   -  The ``base_user`` is the username whose scores other scores will\n      be compared to.\n   -  Rounding of the final affinity is determined by the ``round``\n      param. To round results, provide a number of decimal places to\n      round to. For no rounding, specify ``False``\n   -  *Note that the class can be initialised without the ``base_user``\n      param, but a ``base_user`` **MUST** be passed to the ``init``\n      function before any affinity calculations take place. (See\n      `example 2 <#example-2>`__)*\n\n2. Calculate affinity between the \"base user\" and another user by\n   calling the ``calculate_affinity`` method with the username of the\n   person you wish to calculate affinity with.\n\n   -  This will return a tuple, containing the affinity, and the number\n      of shared rated anime.\n\n3. Calculate more affinities by repeating Step 2.\n\nExamples\n--------\n\nUsing ``ma`` as the name of the initialised class, because I can't think\nof a better name that won't shadow anything that already/will exist(s).\n\nExample 1\n~~~~~~~~~\n\n**Basic usage**\n\n::\n\n    >>> ma = MALAffinity(\"YOUR_USERNAME\")\n\n    >>> affinity, shared = ma.calculate_affinity(\"OTHER_USERNAME\")\n\n    >>> print(affinity)\n    79.00545465639877\n    >>> print(shared)\n    82\n\nExample 2\n~~~~~~~~~\n\n**Basic usage, but specifying a \"base user\" AFTER initialising the\nclass**\n\n::\n\n    >>> ma = MALAffinity()\n\n    # This can be done anywhere as long as the place you're doing this from has access to `ma`.\n    >>> ma.init(\"YOUR_USERNAME\")\n\n    >>> affinity, shared = ma.calculate_affinity(\"OTHER_USERNAME\")\n\n    >>> print(affinity)\n    79.00545465639877\n    >>> print(shared)\n    82\n\nExample 3\n~~~~~~~~~\n\n**Round affinities to two decimal places**\n\n::\n\n    >>> ma = MALAffinity(\"YOUR_USERNAME\", round=2)\n\n    >>> affinity = ma.calculate_affinity(\"OTHER_USERNAME\")\n\n    >>> print(affinity)\n    79.01\n    >>> print(shared)\n    82\n\nExample 4\n~~~~~~~~~\n\n**One-off affinity calculations**\n\nNote that the ``calculate_affinity`` function is being used here - not\nthe method.\n\n::\n\n    >>> affinity = calculate_affinity(\"YOUR_USERNAME\", \"OTHER_USERNAME\")\n\n    >>> print(affinity)\n    79.00545465639877\n    >>> print(shared)\n    82\n\n*Don't use this if you're planning on calculating affinity again with\none of the users you've specified when doing this. It's better to create\nan instance of the ``MALAffinity`` class with said user, and calculating\naffinity with the other user(s) that way. That instance will hold said\nusers' scores, so they won't have to be retrieved again. See examples\n1-3*\n\nHandling exceptions\n-------------------\n\nThree types of exceptions can be raised while calculating affinities:\n\n-  ``NoAffinityError``: Raised when either the shared rated anime\n   between the base user and another user is less than 10, or the other\n   user does not have any rated anime.\n-  ``InvalidUsernameError``: Raised when username specified does not\n   exist.\n-  ``MALRateLimitExceededError``: Raised when MAL's blocking your\n   request, because you're going over their rate limit of one request\n   every two seconds. Slow down and try again.\n\nNot much you can do about the first two, so you're best off giving up if\nyou run into one of those. The third, however, rarely happens if you\nabide by the rate limit, but the following should happen in case it\ndoes:\n\n-  Halt the script for a few seconds. I recommend five.\n-  Try again.\n-  If you get roadblocked again, just give up. MAL obviously hates you.\n\nThis can be achieved via the following example.\n\n::\n\n    # Two attempts, then give up. Max tries can be adjusted here.\n    for _ in range(2):\n        try:\n            affinity, shared = ma.calculate_affinity(\"OTHER_USERNAME\")\n\n        except malaffinity.MALRateLimitExceededError:\n            time.sleep(5)\n\n        # Yes, this is too broad, but there's no point in typing out all the exceptions.\n        except:\n            # Hop over to the next person.\n            # You'll want to stop doing anything with this person and move onto the next,\n            # so use the statement that'll best accomplish this, given the layout of your script.\n            return\n\n        # Success!\n        else:\n            break\n\nOf course, there are better ways of doing this, but this looks the\nnicest.\n\nI'm thinking about hardcoding the rate limit handling in, but I'm\nworried about handling cases where MAL keeps blocking you - I don't want\nto run into infinite loops. I'll look into this one day.\n\nFeel free to use a loop though. Don't blame me if anything bad happens\nbecause of it.\n\nFAQ\n---\n\n**Q: Why didn't you use Numpy? You won't need to use Scipy, so there's\none less dependency to install...**\n\n.. figure:: https://i.imgur.com/r1o1lS6.jpg\n   :alt: \n\nSo the correlation between two *exactly* identical bits of data is\n99.999...8%?\n\nBullshit.\n\nConcerns, problems, fixes, feedback, yada yada\n----------------------------------------------\n\nContact me on\n`Reddit <https://www.reddit.com/message/compose/?to=erkghlerngm44>`__ or\nby `Email <mailto:erkghlerngm44@protonmail.com>`__, or create an\n`issue <https://github.com/erkghlerngm44/malaffinity/issues>`__ or `pull\nrequest <https://github.com/erkghlerngm44/malaffinity/pulls>`__.\n\nThe email I specified isn't my main one, and this isn't my main Github\naccount, so if you do use those services, send me a message on Reddit,\nnotifying me, otherwise you'll probably receive a reply weeks/months\nafter you contact me.\n\nLegal stuff\n-----------\n\nLicensed under MIT. See ```LICENSE`` <LICENSE>`__ for more info.\n\nAs promised, one cute cat gif coming up!\n----------------------------------------\n\n.. figure:: https://i.imgur.com/sq42SnU.gif\n   :alt: \n\n.. |forthebadge1| image:: http://forthebadge.com/images/badges/fuck-it-ship-it.svg\n   :target: http://forthebadge.com\n.. |forthebadge2| image:: http://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg\n   :target: http://forthebadge.com\n.. |forthebadge3| image:: http://forthebadge.com/images/badges/contains-cat-gifs.svg\n   :target: http://forthebadge.com\n.. |forthebadge4| image:: http://forthebadge.com/images/badges/built-with-love.svg\n   :target: http://forthebadge.com",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/erkghlerngm44/malaffinity",
    "keywords": "affinity mal myanimelist",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "malaffinity",
    "package_url": "https://pypi.org/project/malaffinity/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/malaffinity/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/erkghlerngm44/malaffinity"
    },
    "release_url": "https://pypi.org/project/malaffinity/1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Calculate affinity between two MyAnimeList users",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3230794,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aa31ad417114e5d4cead557ac7098eca7bb3648066c1f0fc224e60fa4ba30ac",
        "md5": "cbfc4ed214b646626bbdcbcaf66cf198",
        "sha256": "9e0f360a31acba5dbca454f7d80f2e667b97df8fb8448943d07a8201bc6736c8"
      },
      "downloads": -1,
      "filename": "malaffinity-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbfc4ed214b646626bbdcbcaf66cf198",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 11777,
      "upload_time": "2017-05-05T15:17:31",
      "upload_time_iso_8601": "2017-05-05T15:17:31.994130Z",
      "url": "https://files.pythonhosted.org/packages/5a/a3/1ad417114e5d4cead557ac7098eca7bb3648066c1f0fc224e60fa4ba30ac/malaffinity-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00523cfa23c84b32e1db9ad5ef586a3387ee3e7b2c86749a9d178d5f70c6211b",
        "md5": "9f98d991cac955ac32f3eb067e7cb6ef",
        "sha256": "411ac9994f830aed99098d8fe1feba2e61da76815a40ae5516536c23ee7bd13f"
      },
      "downloads": -1,
      "filename": "malaffinity-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9f98d991cac955ac32f3eb067e7cb6ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8744,
      "upload_time": "2017-05-05T15:17:34",
      "upload_time_iso_8601": "2017-05-05T15:17:34.093793Z",
      "url": "https://files.pythonhosted.org/packages/00/52/3cfa23c84b32e1db9ad5ef586a3387ee3e7b2c86749a9d178d5f70c6211b/malaffinity-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}