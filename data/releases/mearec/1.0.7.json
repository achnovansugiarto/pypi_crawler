{
  "info": {
    "author": "Alessio Buccino",
    "author_email": "alessiob@ifi.uio.no",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Build Status](https://travis-ci.org/alejoe91/MEArec.svg?branch=master)](https://travis-ci.org/alejoe91/MEArec)\n\n# MEArec: Fast and customizable simulation of extracellular recordings on Multi-Electrode-Arrays\n\nMEArec is a project for using generating biophysical extracellular neural recording on Multi-Electrode Arrays (MEA). The recording generations combines a Extracellular Action Potentials (EAP) templates generation and spike trains generation. The recordings are built by convoluting and modulating EAP templates with spike trains and adding noise.\n\nTo clone this repo open your terminal and run:\n\n`git clone https://github.com/alejoe91/MEArec.git`\n\n## Pre-requisites and Installation\n\nThe neural simulations rely on NEURON 7.5 (https://www.neuron.yale.edu/neuron/) (it can be downloaded from https://neuron.yale.edu/ftp/neuron/versions/) and the LFPy 2.0. NEURON should be installed manually (I you are running a Linux system add `export PYTHONPATH=\"/usr/local/nrn/lib/python/:$PYTHONPATH\"` to your `.bashrc`. On Linux systems you also install libncurses: `sudo apt install lib32ncurses5-dev`. MEArec also uses LFPy (https://github.com/LFPy/LFPy), which requires mpi installation. On linux distributions, run: `sudo apt install libopenmpi-dev`.\n\nAfter installing NEURON and openmpi, the MEArec package can be installed with:\n```\npip install MEArec\n```\nor, from the cloned folder:\n\n```\npython setup.py develop\n```\n\nYou could also create a conda environment (https://www.anaconda.com/download/) using the environment file. Open your terminal and run:\n\nFor Anaconda\n`conda env create -f environment.yml`\n\nThen activate the environment:\n\nOn Linux/MacOS:\n`source activate mearec`\n\nOn Windows:\n`activate mearec`\n\n`mearec` is a command line interface: to show available commands you can run: `mearec --help`\n\n```\nUsage: mearec [OPTIONS] COMMAND [ARGS]...\n\n  MEArec: Fast and customizable simulation of extracellular recordings on\n  Multi-Electrode-Arrays\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  default-config          Print default configurations\n  gen-recordings          Generates recordings from TEMPLATES and...\n  gen-templates           Generates EAP templates on multi-electrode arrays...\n  recfromhdf5             Convert recordings from hdf5\n  rectohdf5               Convert recordings to hdf5\n  set-cell-models-folder  Set default cell_models folder\n  set-recordings-folder   Set default recordings output folder\n  set-recordings-params   Set default templates output folder\n  set-templates-folder    Set default templates output folder\n  set-templates-params    Set default templates output folder\n  tempfromhdf5            Convert templates from hdf5\n  temptohdf5              Convert templates to hdf5\n```\n\n## Configure simulations\n\nthe first time a command is run, `mearec` will generate a configuration file in `$HOME/.config/mearec/mearec.conf` and copy some default parameters in the `$HOME/.config/mearec/default_params` folder.\n\nBefore running any simulation, tt is necessary to point to the package where the cell models folder are. Cell models can be downloaded from the Neocortical Micro Circuit Portal https://bbp.epfl.ch/nmc-portal/welcome\n(13 models from layer 5 for testing are already included in the repo - `cell_models/bbp/`).\nThe cell models folder can be set with:\n\n`mearec set-cell-models-folder folder` (e.g. `mearec set-cell-models-folder MEArec/cell_models/bbp`)\n\nMoreover, the user can set the default folders and params yaml files for templates, spike trains, and recording outputs with:\n\n`mearec set-templates-folder folder`\n\n`mearec set-spiketrains-folder folder`\n\n`mearec set-recordings-folder folder`\n\n`mearec set-templates-params folder`\n\n`mearec set-spiketrains-params folder`\n\n`mearec set-recordings-params folder`\n\n(by default in `$HOME/.config/mearec/templates`, `$HOME/.config/mearec/spiketrains`, and `$HOME/.config/mearec/recordings`)\n\n\n## EAP templates generation\n\nThe command to generate templates is:\n```\nmearec gen_templates\n```\nRun it with `--help` to show available arguments.\n\nIn order to check available MEA probes, just run `mearec gen_templates`, or do not provide the `--probe` option.\nDuring the first run of the scripts, the NEURON model in the `cell_models/bbp/` will be first compiled. Simulation parameters can be changed from the `params/template_params.yaml` file, provided with an external yaml file (with the `--params` option) or overwritten with command line argument. \n\nEAP templates will be generated and saved in `templates\\<rotation-type>\\templates_<n>_<meaname>_<date>` (where n is the number of EAPs per cell model) and they can be loaded with the `tools.load_eaps(path-to-recordings)` function.\n\n\n## Recordings generation\n\nThe command to generate recordings is:\n```\nmearec gen_recordings\n```\nRun it with `--help` to show available arguments.\n\nRun the command with `--template` or `-t` option to point to the templates path. In brief, first spike trains are generated with the `SpikeTrainGenerator` class based on the `spiketrain` parameters in the `recording_params`. Then, the templates are selected based on the number of simulated spike trains and other parameters (`templates` parameters in the `recording_params`). Then, templates are convoluted in time with the spikes to create clean recordings. During convolution, single eap can be modulated either at the template level, or at the single electrode level (eith the `--modulation` ot `-m` option - none | template | electrode). Finally, a gaussian noise is added to the clean recordings (`--noise-lev` or `-nl` allows to change the noise sd in uV) and the recordings are filtered (unless the `--no-filter` option is used). All parameters for convolution and noise can be set in the `recordings` parameters in the `recording_params`.\n\nRecordings are saved in `recordings\\recording_<neurons>cells_<meaname>_<duration>s_<noise-level>uV_<date>` and they can be loaded with the `tools.load_recordings(path-to-recordings)` function.\n\n## Save and load in hdf5 format\n\n`mearec temptohdf5 | tempfromhdf5 | rectohdf5 | recfromhdf5` allow the user to convert the output folders to and from hdf5.\n\n## Loading the simulated data\n\nThe `example_plotting.py` script shows how to load eap templates, spike trains, and recordings. It also shows how to use some plotting functions in `tools.py`.\n\n# Running the simulations in Python (without command line interface)\n\nIt is also possible to run the simulation in the python environment.\n\n```\nimport MEArec as mr\n\n# Generate templates\ntemp_gen = mr.gen_templates('path-to-cell-models-folder')\nrec_gen = mr.gen_recordings(tempgen = temp_gen)\n```\n`temp_gen` is a `TemplateGenerator` object that has `templates`, `locations`, `rotations`, `celltypes`, and `info` fields.\n`rec_gen` is a `RecordingGenerator` object that has `recordings`, `positions`, `spiketrains`, `locations`, `peaks`, `sources`, and `info` fields.\n\nThe user can pass a `params` argument (either a `dict` or a path to a yaml file) to both `gen_templates` and `gen_recordings` to overwrite default simulation parameters (see `MEArec/default_params/templates_params.yaml` and `MEArec/default_params/recordings_params.yaml` for default values and explanation).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alejoe91/MEArec",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MEArec",
    "package_url": "https://pypi.org/project/MEArec/",
    "platform": "",
    "project_url": "https://pypi.org/project/MEArec/",
    "project_urls": {
      "Homepage": "https://github.com/alejoe91/MEArec"
    },
    "release_url": "https://pypi.org/project/MEArec/1.0.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast and customizable simulation of extracellular recordings on Multi-Electrode-Arrays.",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14471591,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db8a0a3e7497a59dcab2ba9cb2e73042120f94f9628c8b555a81604cf6110a96",
        "md5": "bbf241b85e06cc12b556c0933d9d3828",
        "sha256": "0a930c34bb3715016593848f133337e72009e181faed001bf50c28c7bb09bf5a"
      },
      "downloads": -1,
      "filename": "MEArec-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "bbf241b85e06cc12b556c0933d9d3828",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50755,
      "upload_time": "2018-11-26T18:48:43",
      "upload_time_iso_8601": "2018-11-26T18:48:43.417438Z",
      "url": "https://files.pythonhosted.org/packages/db/8a/0a3e7497a59dcab2ba9cb2e73042120f94f9628c8b555a81604cf6110a96/MEArec-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}