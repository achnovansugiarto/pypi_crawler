{
  "info": {
    "author": "Justin Engel",
    "author_email": "jtengel08@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 2.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "======================\nDjango Materialize Nav\n======================\nThis library was created to make django work with materializecss. \n\n\nSetup\n=====\nInstall the library.\n\n.. code-block:: python\n\n    # project/settings.py\n\n    INSTALLED_APPS = [\n        \"materialize_nav\",\n        ...\n    ]\n\n\nSetup Context Processors\n------------------------\nMaterialize nav comes with a context processor to use some settings to change the default base styling.\n\n.. code-block:: python\n\n    # Context Processor to work with settings\n    TEMPLATES = [\n        {\n            ...\n            'OPTIONS': {\n                'context_processors': [\n                    ...\n                    'materialize_nav.context_processors.get_context',\n                ],\n            },\n        },\n    ]\n\n\nAlternative way to get the standard context for views\n\n.. code-block:: python\n\n    # views.py\n\n    from materialize_nav.context_processors import get_context\n\n\n    def show_page(request):\n        # Get the context with the style settings\n        context = get_context(site_name='demo', title='Basic Content', primary_color='teal')\n\n        context[\"object\"] = \"MyObject\"\n        return render(request, \"my_page.html\", context)\n\n\nStyle\n=====\nThe base template can be used by extending the materialize base nav.\n\n.. code-block:: html\n\n    {% extends \"materialize_nav/base.html\" %}\n\n\n    {% block nav_items %}\n        <li><a href=\"sass.html\">Sass</a></li>\n        <li><a href=\"badges.html\">Components</a></li>\n        <li><a href=\"collapsible.html\">JavaScript</a></li>\n    {% endblock %}\n\n\n    {% block sidenav_items %}\n        {# One option is to override \"materialize_nav/sidenav_items.html\" #}\n        {# OR use \"block sidenav_items\" and list your items or include another template. #}\n        {# This makes the sidenav items reusable in other templates #}\n        {% include \"my_app/sidenav_items.html\" %}\n    {% endblock %}\n\n\n    {% block contents %}\n    <div class=\"row\">\n        <div class=\"col s12 m9 l10\">\n            <p>My Content goes here</p>\n        </div>\n    </div>\n    {% endblock %}\n\n\nStyling controls\n----------------\n\nMaterialize nav comes with several style options used in the template context variables listed below.\n\n  * MATERIALIZE_SITE_NAME\n  * MATERIALIZE_TITLE\n  * HIDE_CONTAINER\n  * SHOW_SIDENAV\n  * FIXED_SIDENAV\n  * PRIMARY_COLOR\n  * SECONDARY_COLOR\n  * PRIMARY_COLOR_LIGHT\n  * PRIMARY_COLOR_DARK\n  * SUCCESS_COLOR\n  * ERROR_COLOR\n  * LINK_COLOR\n  \nIf you went through the ``Setup Context Processors`` step then you can modify several settings to change the default style.\nThis is an alternative to manually providing all of the template context variables.\n\n\n.. code-block:: python\n\n    # settings.py\n\n    MATERIALIZE_SITE_NAME = None  # Display this name in the navbar as the main name\n    MATERIALIZE_TITLE = None  # This is the page title displayed as the browser tab name\n\n    MATERIALIZE_HIDE_CONTAINER = False  # If True make the page take up the full width\n    MATERIALIZE_SHOW_SIDENAV = True  # If True have a menu button available to open up the side navigation menu\n    MATERIALIZE_FIXED_SIDENAV = False  # If True and SHOW_SIDENAV make the side navigation menu always showing\n\n    MATERIALIZE_PRIMARY_COLOR = 'materialize-red lighten-2'\n    MATERIALIZE_SECONDARY_COLOR = 'teal'\n    MATERIALIZE_PRIMARY_COLOR_LIGHT = '#e51c23'\n    MATERIALIZE_PRIMARY_COLOR_DARK = None\n    MATERIALIZE_SUCCESS_COLOR = None\n    MATERIALIZE_ERROR_COLOR = None\n    MATERIALIZE_LINK_COLOR = None\n\n    USER_THUMBNAIL_PROPERTY = 'profile.thumbnail'  # For user.profile.thumbnail\n    USER_BACKGROUND_PROPERTY = 'profile.background'  # For user.profile.background\n    # USER_THUMBNAIL = 'accounts/default_user.png'  # This is a default image\n    # USER_BACKGROUND_IMAGE = 'accounts/default_user.png'  # This is a default image\n\n\nStyling process\n---------------\n\nThere are two methods for changing the default coloring for Materialize CSS.\n\n  * The old method is to use the templatetag ``include_dynamic_css`` which would use the django template system to generate\n    a style tag with the proper css classes overridden.\n\n  * The new method only requires using the ``base.html``. It includes the ``materialize_nav/materialize_nav_colors.js``\n    file which uses javascript to create a style tag to edit the proper css classes. This method should require less \n    work from django to change the style.\n\n\nGoals\n=====\n\nMy original goal was to create an easier way to use materialize css with django. When I first started forms did not \nformat properly and I thought navigation was a pain. Unfortunately, my original approach made this library a strong \ncoupled to your django app which was a terrible design decision. I am trying to simplify this library to help style \ndjango apps quickly and without a lot of settings.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/justengel/django_materialize_nav/archive/v1.1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/justengel/django_materialize_nav",
    "keywords": "Django Materialize CSS",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-materialize-nav",
    "package_url": "https://pypi.org/project/django-materialize-nav/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-materialize-nav/",
    "project_urls": {
      "Download": "https://github.com/justengel/django_materialize_nav/archive/v1.1.1.tar.gz",
      "Homepage": "https://github.com/justengel/django_materialize_nav"
    },
    "release_url": "https://pypi.org/project/django-materialize-nav/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django materialize css support.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10173856,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a850ff431c912881a823c21eaf35d044e937418a48e41dd49522030866f7f2ee",
        "md5": "5e4acf0e5c92ddf4a8804ba964b41811",
        "sha256": "f65ea4f1aecba61ade8cbd38943e30737aed678e06d7ff2bb7847115a7077ee4"
      },
      "downloads": -1,
      "filename": "django_materialize_nav-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5e4acf0e5c92ddf4a8804ba964b41811",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23730471,
      "upload_time": "2019-09-20T19:45:04",
      "upload_time_iso_8601": "2019-09-20T19:45:04.338784Z",
      "url": "https://files.pythonhosted.org/packages/a8/50/ff431c912881a823c21eaf35d044e937418a48e41dd49522030866f7f2ee/django_materialize_nav-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}