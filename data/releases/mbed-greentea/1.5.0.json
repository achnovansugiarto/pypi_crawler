{
  "info": {
    "author": "Anna Bridge, Azim Khan",
    "author_email": "Anna.Bridge@arm.com, Azim.Khan@arm.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Version 2.0, January 2004\r\nhttp://www.apache.org/licenses/\r\n\r\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n1. Definitions.\r\n\r\n\"License\" shall mean the terms and conditions for use, reproduction, and\r\ndistribution as defined by Sections 1 through 9 of this document.\r\n\r\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\r\nowner that is granting the License.\r\n\r\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\r\nthat control, are controlled by, or are under common control with that entity.\r\nFor the purposes of this definition, \"control\" means (i) the power, direct or\r\nindirect, to cause the direction or management of such entity, whether by\r\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\noutstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\r\npermissions granted by this License.\r\n\r\n\"Source\" form shall mean the preferred form for making modifications, including\r\nbut not limited to software source code, documentation source, and configuration\r\nfiles.\r\n\r\n\"Object\" form shall mean any form resulting from mechanical transformation or\r\ntranslation of a Source form, including but not limited to compiled object code,\r\ngenerated documentation, and conversions to other media types.\r\n\r\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\r\navailable under the License, as indicated by a copyright notice that is included\r\nin or attached to the work (an example is provided in the Appendix below).\r\n\r\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\r\nis based on (or derived from) the Work and for which the editorial revisions,\r\nannotations, elaborations, or other modifications represent, as a whole, an\r\noriginal work of authorship. For the purposes of this License, Derivative Works\r\nshall not include works that remain separable from, or merely link (or bind by\r\nname) to the interfaces of, the Work and Derivative Works thereof.\r\n\r\n\"Contribution\" shall mean any work of authorship, including the original version\r\nof the Work and any modifications or additions to that Work or Derivative Works\r\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\r\nby the copyright owner or by an individual or Legal Entity authorized to submit\r\non behalf of the copyright owner. For the purposes of this definition,\r\n\"submitted\" means any form of electronic, verbal, or written communication sent\r\nto the Licensor or its representatives, including but not limited to\r\ncommunication on electronic mailing lists, source code control systems, and\r\nissue tracking systems that are managed by, or on behalf of, the Licensor for\r\nthe purpose of discussing and improving the Work, but excluding communication\r\nthat is conspicuously marked or otherwise designated in writing by the copyright\r\nowner as \"Not a Contribution.\"\r\n\r\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\r\nof whom a Contribution has been received by Licensor and subsequently\r\nincorporated within the Work.\r\n\r\n2. Grant of Copyright License.\r\n\r\nSubject to the terms and conditions of this License, each Contributor hereby\r\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\r\nirrevocable copyright license to reproduce, prepare Derivative Works of,\r\npublicly display, publicly perform, sublicense, and distribute the Work and such\r\nDerivative Works in Source or Object form.\r\n\r\n3. Grant of Patent License.\r\n\r\nSubject to the terms and conditions of this License, each Contributor hereby\r\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\r\nirrevocable (except as stated in this section) patent license to make, have\r\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\r\nsuch license applies only to those patent claims licensable by such Contributor\r\nthat are necessarily infringed by their Contribution(s) alone or by combination\r\nof their Contribution(s) with the Work to which such Contribution(s) was\r\nsubmitted. If You institute patent litigation against any entity (including a\r\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\r\nContribution incorporated within the Work constitutes direct or contributory\r\npatent infringement, then any patent licenses granted to You under this License\r\nfor that Work shall terminate as of the date such litigation is filed.\r\n\r\n4. Redistribution.\r\n\r\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\r\nin any medium, with or without modifications, and in Source or Object form,\r\nprovided that You meet the following conditions:\r\n\r\nYou must give any other recipients of the Work or Derivative Works a copy of\r\nthis License; and\r\nYou must cause any modified files to carry prominent notices stating that You\r\nchanged the files; and\r\nYou must retain, in the Source form of any Derivative Works that You distribute,\r\nall copyright, patent, trademark, and attribution notices from the Source form\r\nof the Work, excluding those notices that do not pertain to any part of the\r\nDerivative Works; and\r\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\r\nDerivative Works that You distribute must include a readable copy of the\r\nattribution notices contained within such NOTICE file, excluding those notices\r\nthat do not pertain to any part of the Derivative Works, in at least one of the\r\nfollowing places: within a NOTICE text file distributed as part of the\r\nDerivative Works; within the Source form or documentation, if provided along\r\nwith the Derivative Works; or, within a display generated by the Derivative\r\nWorks, if and wherever such third-party notices normally appear. The contents of\r\nthe NOTICE file are for informational purposes only and do not modify the\r\nLicense. You may add Your own attribution notices within Derivative Works that\r\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\r\nprovided that such additional attribution notices cannot be construed as\r\nmodifying the License.\r\nYou may add Your own copyright statement to Your modifications and may provide\r\nadditional or different license terms and conditions for use, reproduction, or\r\ndistribution of Your modifications, or for any such Derivative Works as a whole,\r\nprovided Your use, reproduction, and distribution of the Work otherwise complies\r\nwith the conditions stated in this License.\r\n\r\n5. Submission of Contributions.\r\n\r\nUnless You explicitly state otherwise, any Contribution intentionally submitted\r\nfor inclusion in the Work by You to the Licensor shall be under the terms and\r\nconditions of this License, without any additional terms or conditions.\r\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\r\nany separate license agreement you may have executed with Licensor regarding\r\nsuch Contributions.\r\n\r\n6. Trademarks.\r\n\r\nThis License does not grant permission to use the trade names, trademarks,\r\nservice marks, or product names of the Licensor, except as required for\r\nreasonable and customary use in describing the origin of the Work and\r\nreproducing the content of the NOTICE file.\r\n\r\n7. Disclaimer of Warranty.\r\n\r\nUnless required by applicable law or agreed to in writing, Licensor provides the\r\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\r\nincluding, without limitation, any warranties or conditions of TITLE,\r\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\r\nsolely responsible for determining the appropriateness of using or\r\nredistributing the Work and assume any risks associated with Your exercise of\r\npermissions under this License.\r\n\r\n8. Limitation of Liability.\r\n\r\nIn no event and under no legal theory, whether in tort (including negligence),\r\ncontract, or otherwise, unless required by applicable law (such as deliberate\r\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\r\nliable to You for damages, including any direct, indirect, special, incidental,\r\nor consequential damages of any character arising as a result of this License or\r\nout of the use or inability to use the Work (including but not limited to\r\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\r\nany and all other commercial damages or losses), even if such Contributor has\r\nbeen advised of the possibility of such damages.\r\n\r\n9. Accepting Warranty or Additional Liability.\r\n\r\nWhile redistributing the Work or Derivative Works thereof, You may choose to\r\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\r\nother liability obligations and/or rights consistent with this License. However,\r\nin accepting such obligations, You may act only on Your own behalf and on Your\r\nsole responsibility, not on behalf of any other Contributor, and only if You\r\nagree to indemnify, defend, and hold each Contributor harmless for any liability\r\nincurred by, or claims asserted against, such Contributor by reason of your\r\naccepting any such warranty or additional liability.\r\n\r\nDescription: [![Circle CI](https://circleci.com/gh/ARMmbed/greentea.svg?style=svg)](https://circleci.com/gh/ARMmbed/greentea)\r\n        [![Coverage Status](https://coveralls.io/repos/github/ARMmbed/greentea/badge.svg?branch=master)](https://coveralls.io/github/ARMmbed/greentea?branch=master)\r\n        [![PyPI version](https://badge.fury.io/py/mbed-greentea.svg)](https://badge.fury.io/py/mbed-greentea)\r\n        \r\n        # Greentea - test automation for mbed\r\n        _**G**eneric **re**gression **en**vironment for **te**st **a**utomation_\r\n        \r\n        ## Introduction\r\n        \r\n        Greentea is the automated testing tool for mbed OS development. It automates the process of flashing mbed boards, driving the test and accumulating test results into test reports. Developers use it for local development as well as for automation in a Continuous Integration environment.\r\n        \r\n        This document should help you start using Greentea. Please see the [htrun documentation](https://github.com/ARMmbed/htrun), the tool Greentea uses to drive tests, for the technical details of the interactions between the platform and the host machine.\r\n        \r\n        Because Greentea is an open source project, we accept contributions! Please see our [contributing document](CONTRIBUTING.md) for more information.\r\n        \r\n        ### Prerequistes\r\n        \r\n        Greentea requires [Python version 2.7](https://www.python.org/downloads/). It supports the following OSes:\r\n        \r\n        - Windows\r\n        - Linux (Ubuntu preferred)\r\n        - OS X (experimental)\r\n        \r\n        ### Installing\r\n        \r\n        Tools that depend on Greentea usually install it. Determine if Greentea is already installed by running:\r\n        ```\r\n        $ mbedgt --version\r\n        1.2.5\r\n        ```\r\n        \r\n        You can also install it manually via pip.\r\n        \r\n        ```\r\n        pip install mbed-greentea\r\n        ```\r\n        \r\n        ## Test specification JSON format\r\n        \r\n        The Greentea test specification format decouples the tool from your build system. It provides important data, such as test names, paths to test binaries and the platform on which the binaries should run.\r\n        \r\n        Greentea automatically looks for files called `test_spec.json` in your working directory. You can also use the `--test-spec` argument to direct Greentea to a specific test specification file.\r\n        \r\n        When you use the `-t` / `--target` argument with the `--test-spec` argument, you can select which \"build\" should be used. In the example below, you could provide the arguments `--test-spec test_spec.json -t K64F-ARM` to only run that build's tests.\r\n        \r\n        ### Example of test specification file\r\n        \r\n        In the below example, there are two defined builds:\r\n        * Build `K64F-ARM` for NXP `K64F` platform compiled with `ARMCC` compiler.\r\n        * Build `K64F-GCC` for NXP `K64F` platform compiled with `GCC ARM` compiler.\r\n        \r\n        ```json\r\n        {\r\n            \"builds\": {\r\n                \"K64F-ARM\": {\r\n                    \"platform\": \"K64F\",\r\n                    \"toolchain\": \"ARM\",\r\n                    \"base_path\": \"./BUILD/K64F/ARM\",\r\n                    \"baud_rate\": 9600,\r\n                    \"tests\": {\r\n                        \"tests-mbedmicro-rtos-mbed-mail\": {\r\n                            \"binaries\": [\r\n                                {\r\n                                    \"binary_type\": \"bootable\",\r\n                                    \"path\": \"./BUILD/K64F/ARM/tests-mbedmicro-rtos-mbed-mail.bin\"\r\n                                }\r\n                            ]\r\n                        },\r\n                        \"tests-mbed_drivers-c_strings\": {\r\n                            \"binaries\": [\r\n                                {\r\n                                    \"binary_type\": \"bootable\",\r\n                                    \"path\": \"./BUILD/K64F/ARM/tests-mbed_drivers-c_strings.bin\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                \"K64F-GCC\": {\r\n                    \"platform\": \"K64F\",\r\n                    \"toolchain\": \"GCC_ARM\",\r\n                    \"base_path\": \"./BUILD/K64F/GCC_ARM\",\r\n                    \"baud_rate\": 9600,\r\n                    \"tests\": {\r\n                        \"tests-mbedmicro-rtos-mbed-mail\": {\r\n                            \"binaries\": [\r\n                                {\r\n                                    \"binary_type\": \"bootable\",\r\n                                    \"path\": \"./BUILD/K64F/GCC_ARM/tests-mbedmicro-rtos-mbed-mail.bin\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ```\r\n        \r\n        The examples below use the above test specification file.\r\n        \r\n        ## Command-line usage\r\n        This section highlights a few of the capabilities of the Greentea command-line interface. For a full list of the available options, please run `mbedgt --help`.\r\n        \r\n        Assume for the examples below that the above `test_spec.json` file is in the current directory.\r\n        \r\n        ### Listing all tests\r\n        You can use the `-l` argument to list all available tests:\r\n        \r\n        ```\r\n        $ mbedgt -l\r\n        mbedgt: greentea test automation tool ver. 1.2.5\r\n        mbedgt: using multiple test specifications from current directory!\r\n                using 'BUILD\\tests\\K64F\\ARM\\test_spec.json'\r\n                using 'BUILD\\tests\\K64F\\GCC_ARM\\test_spec.json'\r\n        mbedgt: available tests for built 'K64F-GCC_ARM', location 'BUILD/tests/K64F/GCC_ARM'\r\n                test 'tests-mbedmicro-rtos-mbed-mail'\r\n        mbedgt: available tests for built 'K64F-ARM', location 'BUILD/tests/K64F/ARM'\r\n                test 'tests-mbed_drivers-c_strings'\r\n                test 'tests-mbedmicro-rtos-mbed-mail'\r\n        ```\r\n        \r\n        ### Executing all tests\r\n        The default action of Greentea using `mbedgt` is to execute all tests that are found in `test_spec.json` files. You can also add `-V` to make the output more verbose.\r\n        \r\n        \r\n        ### Limiting tests\r\n        You can select test cases by name using the `-n` argument. This command executes all tests named `tests-mbedmicro-rtos-mbed-mail` from all builds in the test specification:\r\n        ```\r\n        $ mbedgt -n tests-mbedmicro-rtos-mbed-mail\r\n        ```\r\n        \r\n        When using the `-n` argument, you can use the `*` character at the end of a test name to match all tests that share a prefix. This command executes all tests that start with `tests*`:\r\n        \r\n        ```\r\n        $ mbedgt -n tests*\r\n        ```\r\n        \r\n        You can use the `-t` argument to select which build to use when finding tests. This command executes the test `tests-mbedmicro-rtos-mbed-mail` for the `K64F-ARM` build in the test specification:\r\n        ```\r\n        $ mbedgt -n tests-mbedmicro-rtos-mbed-mail -t K64F-ARM\r\n        ```\r\n        \r\n        You can use a comma (`,`) to separate test names (argument `-n`) and build names (argument `-t`). This command executes the tests `tests-mbedmicro-rtos-mbed-mail` and `tests-mbed_drivers-c_strings` for the `K64F-ARM` and `K64F-GCC_ARM` builds in the test specification:\r\n        ```\r\n        $ mbedgt -n tests-mbedmicro-rtos-mbed-mail,tests-mbed_drivers-c_strings -t K64F-ARM,K64F-GCC_ARM\r\n        ```\r\n        \r\n        ### Selecting platforms\r\n        You can limit which boards Greentea uses for testing by using the `--use-tids` argument.\r\n        \r\n        ```\r\n        $ mbedgt --use-tids 02400203C3423E603EBEC3D8,024002031E031E6AE3FFE3D2\r\n        ```\r\n        \r\n        Where ```02400203C3423E603EBEC3D8``` and ```024002031E031E6AE3FFE3D2``` are the target IDs of platforms attached to your system.\r\n        \r\n        You can view target IDs using the [mbed-ls](https://github.com/ARMmbed/mbed-ls) tool (installed with Greentea).\r\n        \r\n        ```\r\n        $ mbedls\r\n        +--------------+---------------------+------------+------------+-------------------------+\r\n        |platform_name |platform_name_unique |mount_point |serial_port |target_id                |\r\n        +--------------+---------------------+------------+------------+-------------------------+\r\n        |K64F          |K64F[0]              |E:          |COM160      |024002031E031E6AE3FFE3D2 |\r\n        |K64F          |K64F[1]              |F:          |COM162      |02400203C3423E603EBEC3D8 |\r\n        |LPC1768       |LPC1768[0]           |G:          |COM5        |1010ac87cfc4f23c4c57438d |\r\n        +--------------+---------------------+------------+------------+-------------------------+\r\n        ```\r\n        In this case, you won't test one target, the LPC1768.\r\n        \r\n        ### Testing on Fast Model FVPs\r\n        \r\n        Fast Models FVPs are software models for Arm reference design platfrom\r\n        \r\n        Greentea supports running test on Fast Models. And [mbed-fastmodel-agent](https://github.com/ARMmbed/mbed-fastmodel-agent) module is required for this purpose.\r\n        \r\n        The \"--fm\" option only available when the `mbed-fastmodel-agent` module is installed :  \r\n        \r\n        You can run tests for FVP_MPS2_Cortex-M3 models, by '--fm' option:\r\n        ```\r\n        $ mbedgt --fm FVP_MPS2_M3:DEFAULT\r\n        ```\r\n        \r\n        Where ```FVP_MPS2_M3``` is the platfrom name for the ```FVP_MPS2_Cortex-M3``` models in mbed OS.\r\n        \r\n        And ```DEFAULT``` is the config to the Fast Model, you can find out using ```mbedfm``` command\r\n        \r\n        ### Creating reports\r\n        Greentea supports a number of report formats.\r\n        \r\n        #### HTML\r\n        This creates an interactive HTML page with test results and logs.\r\n        ```\r\n        mbedgt --report-html html_report.html\r\n        ```\r\n        \r\n        #### JUnit\r\n        This creates an XML JUnit report, which you can use with popular Continuous Integration software, such as [Jenkins](https://jenkins.io/index.html).\r\n        ```\r\n        mbedgt --report-junit junit_report.xml\r\n        ```\r\n        \r\n        #### JSON\r\n        This creates a general JSON report.\r\n        ```\r\n        mbedgt --report-json json_report.json\r\n        ```\r\n        \r\n        #### Plain text\r\n        This creates a human-friendly text summary of the test run.\r\n        ```\r\n        mbedgt --report-text text_report.text\r\n        ```\r\n        \r\n        ## Host test detection\r\n        When developing with mbed OS, Greentea detects host tests automatically if you place them in the correct location. All tests in mbed OS are placed under a `TESTS` directory. You may place custom host test scripts in a folder named `host_tests` in this folder. For more information about the mbed OS test directory structure, please see the [mbed CLI documentation](https://docs.mbed.com/docs/mbed-os-handbook/en/latest/dev_tools/cli/#test-directory-structure).\r\n        \r\n        ## Common issues\r\n        \r\n        ### `IOERR_SERIAL` errors\r\n        Possible causes:\r\n        - Another program is using the serial port. Be sure all terminals and other instances of Greentea are closed before trying again.\r\n        - The mbed interface firmware is out of date. Please see the platform's page on [developer.mbed.org](https://developer.mbed.org/) for details about how to update it.\r\n        \r\nPlatform: UNKNOWN\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ARMmbed/greentea",
    "keywords": "",
    "license": "Apache License",
    "maintainer": "Anna Bridge, Azim Khan",
    "maintainer_email": "Anna.Bridge@arm.com, Azim.Khan@arm.com",
    "name": "mbed-greentea",
    "package_url": "https://pypi.org/project/mbed-greentea/",
    "platform": "",
    "project_url": "https://pypi.org/project/mbed-greentea/",
    "project_urls": {
      "Homepage": "https://github.com/ARMmbed/greentea"
    },
    "release_url": "https://pypi.org/project/mbed-greentea/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "mbed 3.0 onwards test suite, codename Greentea. The test suite is a collection of tools that enable automated testing on mbed-enabled platforms",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16560435,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec5ba2938ed437acac3a3c7fdd5cb2b7028118a2f61f3803b94ab13c1fa7af2c",
        "md5": "f44298a91ec7d4cb00205da3798a5b70",
        "sha256": "0306892e967ea6dd567561a51371e837adf4885ba7bd72cf3f610af0cf833c94"
      },
      "downloads": -1,
      "filename": "mbed-greentea-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f44298a91ec7d4cb00205da3798a5b70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 77996,
      "upload_time": "2018-12-12T20:37:30",
      "upload_time_iso_8601": "2018-12-12T20:37:30.996019Z",
      "url": "https://files.pythonhosted.org/packages/ec/5b/a2938ed437acac3a3c7fdd5cb2b7028118a2f61f3803b94ab13c1fa7af2c/mbed-greentea-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}