{
  "info": {
    "author": "Anna Bridge, Azim Khan",
    "author_email": "Anna.Bridge@arm.com, Azim.Khan@arm.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Circle CI](https://circleci.com/gh/ARMmbed/greentea.svg?style=svg)](https://circleci.com/gh/ARMmbed/greentea)\n[![Coverage Status](https://coveralls.io/repos/github/ARMmbed/greentea/badge.svg?branch=master)](https://coveralls.io/github/ARMmbed/greentea?branch=master)\n[![PyPI version](https://badge.fury.io/py/mbed-greentea.svg)](https://badge.fury.io/py/mbed-greentea)\n\n# Table of contents\n\n* [Table of contents](#table-of-contents)\n* [Introduction](#introduction)\n* [Quickstart document](#quickstart-document)\n  * [mbed test tools collection](#mbed-test-tools-collection)\n  * [Additional documentation](#additional-documentation)\n  * [Supported operating systems](#supported-operating-systems)\n* [Getting started](#getting-started)\n  * [End to end example](#end-to-end-example)\n    * [Dependencies installation procedure](#dependencies-installation-procedure)\n    * [Example test procedure walk-through](#example-test-procedure-walk-through)\n  * [mbed test tools detailed list of dependencies](#mbed-test-tools-detailed-list-of-dependencies)\n  * [Installing Greentea](#installing-greentea)\n    * [Installation from PyPI (Python Package Index)](#installation-from-pypi-python-package-index)\n    * [Installation from Python sources](#installation-from-python-sources)\n    * [Virtual Environments (Python)](#virtual-environments-python)\n      * [How to get and install virtualenv](#how-to-get-and-install-virtualenv)\n      * [Basic Usage](#basic-usage)\n      * [virtualenv example usage - Windows environment](#virtualenv-example-usage---windows-environment)\n  * [Environment check](#environment-check)\n  * [Building the mbed-drivers for yotta target target](#building-the-mbed-drivers-for-yotta-target-target)\n* [Testing](#testing)\n* [Test specification JSON formatted input](#test-specification-json-formatted-input)\n  * [Test specification formatted](#test-specification-formatted)\n  * [Example of test specification file](#example-of-test-specification-file)\n    * [Command line usage](#command-line-usage)\n      * [Executing all tests](#executing-all-tests)\n      * [Cherry-pick tests](#cherry-pick-tests)\n      * [Cherry-pick group of tests](#cherry-pick-group-of-tests)\n* [Using Greentea with new targets](#using-greentea-with-new-targets)\n  * [Greentea and yotta targets](#greentea-and-yotta-targets)\n  * [Prototyping support](#prototyping-support)\n    * [How to add board-target bindings for Greentea](#how-to-add-board-target-bindings-for-greentea)\n    * [Prototyping or porting - sample workflow](#prototyping-or-porting---sample-workflow)\n* [Selecting boards for test running](#selecting-boards-for-test-running)\n  * [Option --use-tids example](#option---use-tids-example)\n* [Additional features](#additional-features)\n  * [Dynamic host test loader](#dynamic-host-test-loader)\n  * [yotta config parse](#yotta-config-parse)\n  * [Local yotta targets scan for mbed-target keywords](#local-yotta-targets-scan-for-mbed-target-keywords)\n* [Common Issues](#common-issues)\n  * [Uninstalling Greentea](#uninstalling-greentea)\n* [Commissioning mbed platforms](#commissioning-mbed-platforms)\n\n# Introduction\n\nHello and welcome to the mbed SDK test suite, codename *Greentea*. The test suite is a collection of tools that enable automated testing on mbed boards.\n\nIn its current configuration, the mbed test suite can automatically detect most of the popular mbed-enabled boards connected to the host over USB. The test suite uses the ```mbed-ls``` module to check for connected devices. A separate module called ```mbed-host-tests``` is used to flash and supervise each board's test. This decoupling allows us to make better software and maintain each of the functionalities as a separate domain.\n\n# Quickstart document\n\nPlease read [QUICKSTART.md](https://github.com/ARMmbed/greentea/blob/master/docs/QUICKSTART.md) document if you want to familiarize yourself with top level features of ```Greentea`` mbed test tools.\n\n## mbed test tools collection\n\n```mbed ```  test tools set:\n* [Greentea](https://github.com/ARMmbed/greentea) - mbed test automation framework, instrument test suite execution inside your yotta module.\n  * This application is also distributed as Python Package: [mbed-greentea in PyPI](https://pypi.python.org/pypi/mbed-greentea).\n* [greentea-client](https://github.com/ARMmbed/greentea-client) - ```Greentea``'s device side, C++ library.\n  * This application is also distributed as yotta module: [greentea-client](https://yotta.mbed.com/#/module/greentea-client/0.1.8).\n* [htrun](https://github.com/ARMmbed/htrun) - test runner for mbed test suite.\n  * This application is also distributed as Python Package: [mbed-host-tests in PyPI](https://pypi.python.org/pypi/mbed-host-tests).\n* [mbed-ls](https://github.com/ARMmbed/mbed-ls) - list all connected to host mbed compatible devices.\n  * This application is also distributed as Python Package: [mbed-ls in PyPI](https://pypi.python.org/pypi/mbed-ls).\n\n## Additional documentation\n\n* [Quickstart document](https://github.com/ARMmbed/greentea/blob/master/docs/QUICKSTART.md)\n* Things you need to know [when you contribute](https://github.com/ARMmbed/greentea/blob/master/docs/CONTRIBUTING.md) to open source mbed test tools repositories.\n\n## Supported operating systems\n\n* Windows 7\n* Ubuntu LTS\n* Linux (experimental)\n* OS X 10.10 (experimental)\n\n# Getting started\n\nTo use the mbed test suite you must:\n\n* Install the dependencies.\n* Download and install the mbed test suite.\n* Build the mbed project sources.\n* (Optional) you can take advantage of Python's [virtualenv](#virtual-environments-python) to install and run our test tools in virtual environment.\n\n## End to end example\nThis end to end example shows how to install and use Greentea with an example mbed repository.\nExample will assume that you:\n* Have one mbed board connected to your PC over USB. In our case it will be one [Freescale K64F](https://developer.mbed.org/platforms/FRDM-K64F/) board.\n* Installed toolchain for ARM Cortex-M: [GCC ARM Embedded v4.9.3](https://launchpad.net/gcc-arm-embedded).\n* Installed source control client: [Git](https://git-scm.com/downloads).\n* Installed Python: [Python 2.7.11](https://www.python.org/download/releases/2.7/).\n* Installed build tools: [yotta](https://github.com/ARMmbed/yotta):\n* You will need connection to Internet.\n\n### Dependencies installation procedure\n\n* Installing ```yotta``` build system:\n```\n$ pip install yotta --upgrade\n```\n* Installing ```Greentea``` test automation tools:\n```\n$ pip install mbed-greentea --upgrade\n```\n* Create a local clone of the GitHub [mbed-drivers](https://github.com/ARMmbed/mbed-drivers) repository.\n\n### Example test procedure walk-through\n\nTest tools installation should be completed already. Now we will show how we can test ```mbed-drivers``` repository using ```Greentea``` automates test tools:\n\n* Go to your working directory and clone ```mbed-drivers``` repository:\n```\n$ git clone https://github.com/ARMmbed/mbed-drivers.git\n$ cd mbed-drivers\n```\n* (Optional) Make sure your mbed device is compatible with available ```K64F``` yotta targets:\n```bash\n$ yotta --plain search -k mbed-target:k64f target --short\nfrdm-k64f-gcc 0.2.0: Official mbed build target for the mbed frdm-k64f development board.\nfrdm-k64f-armcc 0.1.4: Official mbed build target for the mbed frdm-k64f development board, using the armcc toolchain.\n```\n\n* Set the ```yotta``` build [target](http://yottadocs.mbed.com/tutorial/targets.html) to ```frdm-k64f-gcc```:\n```\n$ yotta target frdm-k64f-gcc\n```\n* Build the ```mbed-drivers``` module with yotta (note that ```Greentea``` can do this for you also automatically):\n```\n$ yotta build\n```\n* List the built test cases:\n```bash\n$ mbedgt --list\nmbedgt: available tests for built targets, location 'c:\\Work\\mbed-drivers\\build'\n        target 'frdm-k64f-gcc':\n        test 'mbed-drivers-test-c_strings'\n        test 'mbed-drivers-test-dev_null'\n        test 'mbed-drivers-test-echo'\n        test 'mbed-drivers-test-generic_tests'\n        test 'mbed-drivers-test-rtc'\n        test 'mbed-drivers-test-stl_features'\n        test 'mbed-drivers-test-ticker'\n        test 'mbed-drivers-test-ticker_2'\n        test 'mbed-drivers-test-ticker_3'\n        test 'mbed-drivers-test-timeout'\n        test 'mbed-drivers-test-wait_us'\n```\n* And finally - test (```-V``` is used to activate test case verbose mode):\n```\n$ mbedgt -VS\n...\n[1458047568.17][HTST][INF] No events in queue\n[1458047568.17][HTST][INF] stopped consuming events\n[1458047568.17][HTST][INF] host test result() call skipped, received: True\n[1458047568.17][HTST][WRN] missing __exit event from DUT\n[1458047568.17][HTST][INF] calling blocking teardown()\n[1458047568.17][HTST][INF] teardown() finished\n[1458047568.17][HTST][INF] {{result;success}}\nmbedgt: checking for GCOV data...\nmbedgt: mbed-host-test-runner: stopped\nmbedgt: mbed-host-test-runner: returned 'OK'\nmbedgt: test on hardware with target id: 0240000033514e450041500585d40043e981000097969900\nmbedgt: test suite 'mbed-drivers-test-ticker' ........................................................ OK in 21.20 sec\n        test case: 'Timers: 2 x tickers' ............................................................. OK in 11.03 sec\nmbedgt: test case summary: 1 pass, 0 failures\nmbedgt: all tests finished!\nmbedgt: shuffle seed: 0.3028454009\nmbedgt: test suite report:\n+---------------+---------------+---------------------------------+--------+--------------------+-------------+\n| target        | platform_name | test suite                      | result | elapsed_time (sec) | copy_method |\n+---------------+---------------+---------------------------------+--------+--------------------+-------------+\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | FAIL   | 12.77              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-dev_null      | OK     | 11.58              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-echo          | FAIL   | 19.96              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-generic_tests | OK     | 10.99              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-rtc           | OK     | 21.0               | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-stl_features  | OK     | 11.73              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker        | OK     | 21.2               | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker_2      | OK     | 21.18              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker_3      | OK     | 21.21              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-timeout       | OK     | 21.49              | shell       |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-wait_us       | OK     | 20.14              | shell       |\n+---------------+---------------+---------------------------------+--------+--------------------+-------------+\nmbedgt: test suite results: 2 FAIL / 9 OK\nmbedgt: test case report:\n+---------------+---------------+---------------------------------+-------------------------------------+--------+--------+--------+--------------------+\n| target        | platform_name | test suite                      | test case                           | passed | failed | result | elapsed_time (sec) |\n+---------------+---------------+---------------------------------+-------------------------------------+--------+--------+--------+--------------------+\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %e %E float formatting   | 1      | 0      | OK     | 0.07               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %f %f float formatting   | 0      | 1      | FAIL   | 0.3                |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %g %g float formatting   | 1      | 0      | OK     | 0.06               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %i %d integer formatting | 1      | 0      | OK     | 0.06               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %u %d integer formatting | 1      | 0      | OK     | 0.06               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: %x %E integer formatting | 1      | 0      | OK     | 0.07               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: strpbrk                  | 1      | 0      | OK     | 0.04               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-c_strings     | C strings: strtok                   | 1      | 0      | OK     | 0.05               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-dev_null      | dev_null                            | 1      | 0      | OK     | 11.58              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-echo          | Echo server: x16                    | 1      | 0      | OK     | 1.6                |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-echo          | Echo server: x32                    | 0      | 0      | ERROR  | 0.0                |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-generic_tests | Basic                               | 1      | 0      | OK     | 0.03               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-generic_tests | Blinky                              | 1      | 0      | OK     | 0.04               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-generic_tests | C++ heap                            | 1      | 0      | OK     | 0.1                |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-generic_tests | C++ stack                           | 1      | 0      | OK     | 0.15               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-rtc           | RTC strftime                        | 1      | 0      | OK     | 10.43              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-stl_features  | STL std::equal                      | 1      | 0      | OK     | 0.04               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-stl_features  | STL std::sort abs                   | 1      | 0      | OK     | 0.03               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-stl_features  | STL std::sort greater               | 1      | 0      | OK     | 0.05               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-stl_features  | STL std::transform                  | 1      | 0      | OK     | 0.05               |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker        | Timers: 2 x tickers                 | 1      | 0      | OK     | 11.03              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker_2      | Timers: 1x ticker                   | 1      | 0      | OK     | 11.04              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-ticker_3      | Timers: 2x callbacks                | 1      | 0      | OK     | 11.04              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-timeout       | Timers: toggle on/off               | 1      | 0      | OK     | 11.25              |\n| frdm-k64f-gcc | K64F          | mbed-drivers-test-wait_us       | Timers: wait_us                     | 1      | 0      | OK     | 10.05              |\n+---------------+---------------+---------------------------------+-------------------------------------+--------+--------+--------+--------------------+\nmbedgt: test case results: 1 FAIL / 23 OK / 1 ERROR\nmbedgt: completed in 194.37 sec\nmbedgt: exited with code 2\n```\n\n## mbed test tools detailed list of dependencies\n\n* [Python](https://www.python.org/downloads/). If you do not have Python installed already, we recommend [version 2.7.11](https://www.python.org/downloads/release/python-2711/). You'll need to add the following modules:\n  * [Pip](https://pypi.python.org/pypi/pip). Pip comes bundled with some Python versions; run ``$ pip --version`` to see if you already have it.\n  * [setuptools](https://pythonhosted.org/an_example_pypi_project/setuptools.html) to install dependencies.\n* [yotta](https://github.com/ARMmbed/yotta): used to build tests from the mbed SDK. Please note that **yotta has its own set of dependencies**, listed in the [installation instructions](http://armmbed.github.io/yotta/#installing-on-windows).\n* If your OS is Windows, please follow the installation instructions [for the serial port driver](https://developer.mbed.org/handbook/Windows-serial-configuration).\n* The mbed OS module ```mbed-drivers```. It is available [on GitHub](https://github.com/ARMmbed/mbed-drivers) but you can use yotta to grab it - we’ll see how later.\n* (Optional) The ``cp`` shell command must be available to flash certain boards. It is sometimes available by default, for example on Linux, or you can install the [Git command line tools](https://github.com/github/hub).\n\nTo check whether the mbed test tools dependencies exist on your machine:\n\n```\n$ pip freeze | grep mbed\nmbed-greentea==0.2.6\nmbed-host-tests==0.2.4\nmbed-ls==0.2.1\n```\n\n## Installing Greentea\n\n### Installation from PyPI (Python Package Index)\n\nThe ```mbed-greentea``` module is redistributed via PyPI. We recommend you use install it with [application pip](https://pip.pypa.io/en/latest/installing.html#install-pip).\n\n```\n$ pip install mbed-greentea --upgrade\n```\n\n**Note:** Python 2.7.9 and later (on the Python 2 series), and Python 3.4 and later include pip by default, so you may have pip already.\n\n### Installation from Python sources\n\nTo install the mbed test suite, first clone the `greentea` repository:\n\n```\n$ git clone https://github.com/ARMmbed/greentea.git\n```\n\nChange the directory to the `greentea` directory:\n\n```\n$ cd greentea\n```\n\nNow you are ready to install `greentea`:\n\n```\n$ python setup.py install\n```\n\nOn Linux, if you have a problem with permissions, use `sudo`:\n\n```\n$ sudo python setup.py install\n```\n\nTo check whether the installation was successful try running the ```mbedgt --help``` command and check that it returns information (you may need to restart your terminal first):\n\n```\n$ mbedgt --help\nUsage: mbedgt-script.py [options]\n\nThis automated test script is used to test mbed SDK 3.0 on mbed-enabled\ndevices with support from yotta build tool\n\nOptions:\n  -h, --help            show this help message and exit\n```\n\n### Virtual Environments (Python)\n\nYou may already recognize that out test tools are mainly written in Python (2.7). If your project / Continuous Integration job is using Python tools and Python packages extensively you may find that installing our test tools may cause Python dependencies collision. To avoid unnecessary hassle and separate packages used by tools and your system you can use virtual environment!\n\n*A Virtual Environment is a tool to keep Python package dependencies required by different projects in separate places, by creating virtual Python environments for them.*\n\nFor more details check [Virtual Environments](http://docs.python-guide.org/en/latest/dev/virtualenvs/).\n\n#### How to get and install virtualenv\n\nThe simplest way is to just install ```virtualenv``` via ```pip```:\n```\n$ pip install virtualenv\n```\n\n#### Basic Usage\n\n* Create a virtual environment for your project:\n```\n$ cd my_project\n$ virtualenv venv\n```\n\n* To begin using the virtual environment (On Windows), it needs to be activated:\n```bash\n$ venv\\Scripts\\activate.bat\n```\n\n* To begin using the virtual environment (On Linux), it needs to be activated:\n```bash\n$ source venv/bin/activate\n```\n\n* Install packages as usual, for example:\n```bash\n$ pip install yotta\n$ pip install mbed-greentea\n  pip ...\n```\n\n* If you are done working in the virtual environment (On Windows) for the moment, you can deactivate it:\n```\n$ venv/script/deactivate.bat\n```\n\n* If you are done working in the virtual environment (On Windows) for the moment, you can deactivate it:\n```\n$ source venv/bin/deactivate\n```\n\n#### virtualenv example usage - Windows environment\nSetup virtual environment and install all dependencies:\n```bash\n$ cd my_project\n$ virtualenv venv\n$ venv/script/activate.bat\n\n$ pip install yotta\n$ pip install mbed-greentea\n```\nCall your test procedures and tools using active environment, for example:\n```bash\n$ git clone  https://github.com/ARMmbed/mbed-drivers.git\n$ cd mbed-drivers\n$ yotta target frdm-k64f-gcc\n$ yotta build\n$ mbedgt -VS\n```\n\nFinally deactivate environment and go back to original Python module dependency settings:\n```\n$ venv/script/deactivate.bat\n```\n\n## Environment check\n\nAt this point you should have all the dependencies and be ready to build the ```mbed-drivers``` and perform automated testing. Make sure you have installed all of the tools. For example you can list all mbed devices connected to your host computer.\nRun command\n```\n$ mbedls\n```\nand you'll get:\n\n```\n+---------------+----------------------+-------------+-------------+-------------------------------+-----------------+\n| platform_name | platform_name_unique | mount_point | serial_port | target_id                     | daplink_version |\n+---------------+----------------------+-------------+-------------+-------------------------------+-----------------+\n| K64F          | K64F[0]              | E:          | COM201      | 024002265f1b1e5400000a2c2e3ec | 0226            |\n+---------------+----------------------+-------------+-------------+-------------------------------+-----------------+\n```\n\n## Building the mbed-drivers for yotta target target\n\nYou need to build the ```mbed-drivers``` for the target you're testing. We'll use the **Freescale FRDM-K64F** as an example.\n\nChange directories to the mbed sources included in your release files:\n\n```\n$ cd mbed-drivers\n```\n\nSet your target, for example:\n\n```\n$ yotta target frdm-k64f-gcc\n```\n\nThen build the ```mbed-drivers``` (you don’t need to specify what you’re building; yotta builds the code in the current directory):\n\n```\n$ yotta build\n```\n\n# Testing\n\nStart by examining the current configuration using ``mbedgt`` (which itself uses ``mbed-ls``). In this example, a ``` K64F``` board is connected to the host system:\n\n```\n$ mbedgt --config\nUsage: mbedls-script.py [options]\n\nmbedls-script.py: error: no such option: --config\n\n[master] C:\\Work\\mbed-drivers> mbedgt --config\nmbedgt: checking for yotta target in current directory\n        reason: no --target switch set\nmbedgt: checking yotta target in current directory\n        calling yotta: yotta --plain target\nmbedgt: assuming default target as 'frdm-k64f-gcc'\nmbedgt: detecting connected mbed-enabled devices...\nmbedgt: detected 1 device\n        detected 'K64F' -> 'K64F[0]', console at 'COM201', mounted at 'E:', target id '024002265f1b1e54000000000000000000000000a2c2e3ec'\nmbedgt: local yotta target search in './yotta_targets' for compatible mbed-target 'k64f'\n        inside './yotta_targets\\frdm-k64f-gcc' found compatible target 'frdm-k64f-gcc'\nmbedgt: processing 'frdm-k64f-gcc' yotta target compatible platforms...\nmbedgt: processing 'K64F' platform...\nmbedgt: using platform 'K64F' for test:\n        target_id_mbed_htm = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        daplink_url = 'http://mbed.org/device/?code=024002265f1b1e54000000000000000000000000a2c2e3ec'\n        mount_point = 'E:'\n        daplink_version = '0226'\n        target_id = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        serial_port = 'COM201'\n        target_id_usb_id = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        platform_name = 'K64F'\n        platform_name_unique = 'K64F[0]'\n        daplink_build = 'Aug 24 2015 17:06:30'\n        daplink_git_local_mods = 'Yes'\n        daplink_git_commit_sha = '27a236b9fe39c674a703c5c89655fbd26b8e27e1'\n        use 0 instances for testing\n\nExample: execute 'mbedgt --target=TARGET_NAME' to start testing for TARGET_NAME target\nmbedgt: completed in 1.05 sec\n```\n\nThere are at least two compatible with yotta Freescale K64F platform targets:\n* ```frdm-k64f-gcc``` - Target for Freescale K64F platform compiled with the GCC cross-compiler, see [here](http://yotta.mbed.com/#/target/frdm-k64f-gcc/2.0.0).\n* ```frdm-k64f-armcc``` - Target for Freescale K64F platform compiled with the Keil armcc cross-compiler, see [here](http://yotta.mbed.com/#/target/frdm-k64f-armcc/2.0.0).\n\nFor simplicity, only the [GCC ARM Embedded](https://launchpad.net/gcc-arm-embedded) compatible targets are described below.\n\nYou can invoke ```yotta``` from within ```mbedgt``` (Greentea) to build the targets. In this example:\n* ```--target``` option is used to specify the targets that the test suite will interact with.\n* The option ```-S``` is used to tell the test suite to *build* sources and tests, but not to *run* the tests.\n\n```\n$ mbedgt --target=frdm-k64f-gcc -O\n```\n\nYou'll get:\n\n```\nmbedgt: detecting connected mbed-enabled devices...\nmbedgt: detected 1 device\n        detected 'K64F' -> 'K64F[0]', console at 'COM201', mounted at 'E:', target id '024002265f1b1e54000000000000000000000000a2c2e3ec'\nmbedgt: local yotta target search in './yotta_targets' for compatible mbed-target 'k64f'\n        inside './yotta_targets\\frdm-k64f-gcc' found compatible target 'frdm-k64f-gcc'\nmbedgt: processing 'frdm-k64f-gcc' yotta target compatible platforms...\nmbedgt: processing 'K64F' platform...\nmbedgt: using platform 'K64F' for test:\n        target_id_mbed_htm = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        daplink_url = 'http://mbed.org/device/?code=024002265f1b1e54000000000000000000000000a2c2e3ec'\n        mount_point = 'E:'\n        daplink_version = '0226'\n        target_id = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        serial_port = 'COM201'\n        target_id_usb_id = '024002265f1b1e54000000000000000000000000a2c2e3ec'\n        platform_name = 'K64F'\n        platform_name_unique = 'K64F[0]'\n        daplink_build = 'Aug 24 2015 17:06:30'\n        daplink_git_local_mods = 'Yes'\n        daplink_git_commit_sha = '27a236b9fe39c674a703c5c89655fbd26b8e27e1'\nmbedgt: building your sources and tests with yotta...\n        calling yotta: yotta --target=frdm-k64f-gcc,* build\ninfo: generate for target: frdm-k64f-gcc 2.0.0 at c:\\Work\\mbed-drivers\\yotta_targets\\frdm-k64f-gcc\n\nGCC version is: 4.9.3\n-- Configuring done\n-- Generating done\n-- Build files have been written to: C:/Work/mbed-drivers/build/frdm-k64f-gcc\nninja: no work to do.\nmbedgt: yotta build for target 'frdm-k64f-gcc' was successful\n        use 0 instances for testing\nmbedgt: all tests finished!\nmbedgt: completed in 5.92 sec\n```\n\nNow that the tests are built, the test suite can be called again to run the tests. From the same directory, invoke ```mbedgt``` again as shown below (this is the same command, but without the -O option):\n\n```\n$ mbedgt --target=frdm-k64f-gcc\n```\nor if you want to be more verbose (use verbose option ```-V```):\n```\n$ mbedgt -V --target=frdm-k64f-gcc\n```\n\nAbove command will execute all tests for yotta module you are in, e.g. ```mbed-drivers```.\n\n# Test specification JSON formatted input\n\nGreentea originally only supports yotta artefacts. It assumes it is run inside a yotta module and gathers information from local file system. To make it generic for any other test artefacts we can support a test specification input. This specification can tell information like platform, toolchain, build artefacts path, test binaries, flash methods of test binaries to Greentea.\nTest specification is an interface which can be used by any build system or it can be created manually. Test specification interface was added to separate build system from test automation automation (Greentea).\n\nChanges:\n* New command line switch `--test-spec` is introduced. It is used to pass test specification file name to Greentea.\n* Existing command line switch `-t` together with `--test-spec` switch can be used to select build(s) by name which should be used for test runs. When no test specification is defined switch `-t` / `--target` behaves as usual: you can select yotta targets inside yotta module.\n\n## Test specification formatted\n\nMore detailed test specification format will be introduced in near future. In current form test specification is a dictionary with key-value pairs under \"builds\" entry where key is a build name and value is a dictionary with additional properties describing build itself. Build properties include platform name, toolchain used to compile, interface chip baudrate, and list of test binaries.\n\n## Example of test specification file\n\nIn the below example there are two builds defined:\n* Build `K64F-ARM` for Freescale `K64F` platform compiled with `ARMCC` compiler and\n* build `K64F-GCC` for Freescale `K64F` platform compiled with `GCC ARM` compiler.\n\n```json\n{\n    \"builds\": {\n        \"K64F-ARM\": {\n            \"platform\": \"K64F\",\n            \"toolchain\": \"ARM\",\n            \"base_path\": \"./.build/K64F/ARM\",\n            \"baud_rate\": 115200,\n            \"tests\": {\n                \"mbed-drivers-test-generic_tests\":{\n                    \"binaries\":[\n                        {\n                            \"binary_type\": \"bootable\",\n                            \"path\": \"./.build/K64F/ARM/mbed-drivers-test-generic_tests.bin\"\n                        }\n                    ]\n                },\n                \"mbed-drivers-test-c_strings\":{\n                    \"binaries\":[\n                        {\n                            \"binary_type\": \"bootable\",\n                            \"path\": \"./.build/K64F/ARM/mbed-drivers-test-c_strings.bin\"\n                        }\n                    ]\n                }\n            }\n        },\n        \"K64F-GCC\": {\n            \"platform\": \"K64F\",\n            \"toolchain\": \"GCC_ARM\",\n            \"base_path\": \"./.build/K64F/GCC_ARM\",\n            \"baud_rate\": 115200,\n            \"tests\": {\n                \"mbed-drivers-test-generic_tests\":{\n                    \"binaries\":[\n                        {\n                            \"binary_type\": \"bootable\",\n                            \"path\": \"./.build/K64F/GCC_ARM/mbed-drivers-test-generic_tests.bin\"\n                        }\n                    ]\n                }\n\n            }\n        }\n\n    }\n}\n```\n\nIn below examples we will use above test specification file.\n\n### Command line usage\n\nWhen building your mbed projects with *build system* capable of returning test specification in our format you can directly call Greentea to execute tests or list available tests (`-l` / `--list` switch).\n\n#### Executing all tests\n\nAssuming that `test_spec.json` is in current directory:\n```\n$ mbedgt -VS\n```\nwill pick up test specification and execute all tests in it.\n\n#### Cherry-pick tests\n\n* We will first list the tests we want to execute:\n\nAssuming that `test_spec.json` is in current directory:\n```\n$ mbedgt -l\n```\n```\nmbedgt: using 'test_spec.json' from current directory!\nmbedgt: available tests for built 'K64F-ARM', location './.build/K64F/ARM'\n        test 'mbed-drivers-test-generic_tests'\n        test 'mbed-drivers-test-c_strings'\nmbedgt: available tests for built 'K64F-GCC', location './.build/K64F/GCC_ARM'\n        test 'mbed-drivers-test-generic_tests'\n```\n\n* Now we can select test case(s) by name(s) using `-n` switch:\n\nBelow command will execute tests with name `mbed-drivers-test-generic_tests` from all builds in build specification:\n```\n$ mbedgt -V -n mbed-drivers-test-generic_tests\n```\n\nBelow command will execute tests with name `mbed-drivers-test-generic_tests` only from build `K64F-ARM` in build specification:\n```\n$ mbedgt -V -n mbed-drivers-test-generic_tests -t K64F-ARM\n```\n\nNote: you can use comman '`,`' to separate test names (switch `-n`) and build names (switch `-t`)\n\n#### Cherry-pick group of tests\n\nWhen using Greentea switch `-n` and putting `*` at the end of test suite name filter will run to filter in all test suite names starting with string before `*`.\n\n* Filter all tests with names starting with 'mbed-drivers-t', e.g.:\n```\n$ mbedgt -V -n mbed-drivers-t*\n```\n\n* Filter all tests with names starting with 'mbed-drivers-t' and test case `tests-mbed_drivers-rtc`\n```\n$ mbedgt -V -n mbed-drivers-t*,tests-mbed_drivers-rtc\n```\n\n# Using Greentea with new targets\nWhen prototyping or developing new port you will find yourself in a situation where your yotta modules are not published (especially targets) and you still want to use Greentea.\n\n## Greentea and yotta targets\n\nGreentea uses the ```yotta search``` command to check that it has proper support for your board before calling tests.\nFor example you can check compatible the yotta registry by calling:\n```\n$ yotta --plain search -k mbed-target:k64f target\nfrdm-k64f-gcc 0.2.0:\n    Official mbed build target for the mbed frdm-k64f development board.\n    mbed-target:k64f, mbed-official, k64f, frdm-k64f, gcc\nfrdm-k64f-armcc 0.1.4:\n    Official mbed build target for the mbed frdm-k64f development board, using the armcc toolchain.\n    mbed-target:k64f, mbed-official, k64f, frdm-k64f, armcc\n\nadditional results from https://yotta-private.herokuapp.com:\n```\nHere two targets are officially compatible with the ```K64F``` target: ``` frdm-k64f-gcc ```` and ``` frdm-k64f-armcc ```. They are both the same board, but each target uses a different toolchain: gcc and armcc.\n\nIf you’re working with a target that isn’t officially supported, you’ll have to follow the steps below.\n\n## Prototyping support\n\nGreentea by default will only allow tests for boards officially supported by a yotta target. This contradicts prototyping and porting workflow. Your workflow may include use of [```yotta link```](http://yottadocs.mbed.com/reference/commands.html#yotta-link) and [```yotta link-target```](http://yottadocs.mbed.com/reference/commands.html#yotta-link-target) commands.\n\nTo support these workflows, we’ve created a command line switch ```--map-target``` was added. It adds an extra mapping between mbed board names and supported yotta targets.\n\nFor example we can add a local yotta target ```frdm-k64f-iar```. This is a ```K64F``` using the compiler ``IAR```:\n```\n$ mbedgt --map-target K64F:frdm-k64f-iar\n```\nNote:\n* This command will only work locally. Use it while you are porting / protoyping.\n* When officially releasing your yotta targets please add correct yotta search bindings the ```keywords``` section of ```target.json```'.\n\nSee example of official yotta target's [target.json]( https://github.com/ARMmbed/target-frdm-k64f-gcc/blob/master/target.json):\n```json\n\"keywords\": [\n    \"mbed-target:k64f\",\n    \"mbed-official\",\n    \"k64f\",\n    \"frdm-k64f\",\n    \"gcc\"\n],\n```\nNote that the value ```\"mbed-target:k64f\"``` is added to mark that this yotta target supports the ```K64F``` board.\n\n### How to add board-target bindings for Greentea\n\nIn your yotta target ```target.json``` file, in the section ```keywords```, add the value: ```mbed-target:<PLATFORM>``` where ```<PLATFORM>``` is the platform’s name in lowercase.\n\n* Check the platform’s name using the ```mbedls``` command:\n```\n$ mbedls\n+--------------+ ...\n|platform_name | ...\n+--------------+ ...\n|K64F          | ...\n|LPC1768       | ...\n+--------------+ ...\n```\n\n* Search for ```mbed-target``` keyword values in yotta registry from command line:\n\n```bash\n$ $ yotta --plain search -k mbed-target:k64f target\nfrdm-k64f-gcc 2.0.0:\n    Official mbed build target for the mbed frdm-k64f development board.\n    mbed-target:k64f, mbed-official, mbed, k64f, frdm-k64f, gcc\nfrdm-k64f-armcc 2.0.0:\n    Official mbed build target for the mbed frdm-k64f development board, using the armcc toolchain.\n    mbed-target:k64f, mbed-official, mbed, k64f, frdm-k64f, armcc\nmy-target 0.1.4:\n    my target\ntarget-onsemi-ncs36510-gcc 0.1.0:\n    Official mbed build target for .\n    mbed-official, mbed, onsemi, ncs36510, gcc\ntest-target-dep 0.0.2:\n    Test Target Test Dependencies\n    autopulated\n\nadditional results from https://yotta-private.herokuapp.com:\n```\n\n### Prototyping or porting - sample workflow\n\n**Note:** This is an example workflow; you may need to add or remove steps for your own workflow.\n\nThis example creates a new mbed yotta target, then runs ```mbed-drivers``` tests on it to check that it was ported correctly.\n\n* Clone the [```mbed-drivers```](https://github.com/ARMmbed/mbed-drivers) repository\n* Create your new target locally (have a look at [```frdm-k64f-gcc```](https://github.com/ARMmbed/target-frdm-k64f-gcc) as an example, or read the [```target docs here```](http://yottadocs.mbed.com/tutorial/targets.html))\n* Use [yotta link-target](http://yottadocs.mbed.com/reference/commands.html#yotta-link-target) to link your target into mbed-drivers\n* Create your HAL and CMSIS port modules\n* Use [```yotta link```](http://yottadocs.mbed.com/reference/commands.html#yotta-link) to link these to ```mbed-drivers```\n* Download the git version of mbed HAL, add your new hal and CMSIS modules as target-dependencies\n* Use yotta link to link ```mbed-hal``` to ```mbed-drivers```\n* In ```mbed-drivers```: set your target, compile and test!\n* Edit your HAL modules until things work, committing and pushing to your source control as you go\n* When your modules and targets are ready for public consumption, open a Pull request on mbed-hal with your dependency addition, and `yotta publish` your target and module(s)\n\nNote that we're now using [config.html](http://yottadocs.mbed.com/reference/config.html) for pin definitions. mbed-hal has a script that processes config definitions into pin definitions, see frdm-k64f targets for an example of how to define these: [target.json](https://github.com/ARMmbed/target-frdm-k64f-gcc/blob/master/target.json#L38))\n\n# Selecting boards for test running\n\nYou and tell Greentea which board it can use for test. To do so prepare list of allowed Target IDs and specify this list using ```--use-tids``` command line switch.  The list should be comma separated.\n```\n$ mbedgt --use-tids 02400203C3423E603EBEC3D8,024002031E031E6AE3FFE3D2\n```\nWhere ```02400203C3423E603EBEC3D8``` and ```024002031E031E6AE3FFE3D2``` might be target IDs of devices available in your system.\nNote: You can check target IDs of the connected devices using ```mbedls``` command:\n```\n$ mbedls\n+--------------+---------------------+------------+------------+-------------------------+\n|platform_name |platform_name_unique |mount_point |serial_port |target_id                |\n+--------------+---------------------+------------+------------+-------------------------+\n|K64F          |K64F[0]              |E:          |COM160      |024002031E031E6AE3FFE3D2 |\n|K64F          |K64F[1]              |F:          |COM162      |02400203C3423E603EBEC3D8 |\n|LPC1768       |LPC1768[0]           |G:          |COM5        |1010ac87cfc4f23c4c57438d |\n+--------------+---------------------+------------+------------+-------------------------+\n```\nIn this case, one target - the LPC1768 - won’t be tested.\n\n## Option --use-tids example\nWe want to run two instances of Greentea and perform test sessions that won’t interfere with each other using two ```K64F``` boards:\nMy resources (2 x ```K64F``` boards):\n```\n$ mbedls\n+--------------+---------------------+------------+------------+-------------------------+\n|platform_name |platform_name_unique |mount_point |serial_port |target_id                |\n+--------------+---------------------+------------+------------+-------------------------+\n|K64F          |K64F[0]              |E:          |COM160      |024002031E031E6AE3FFE3D2 |\n|K64F          |K64F[1]              |F:          |COM162      |02400203C3423E603EBEC3D8 |\n+--------------+---------------------+------------+------------+-------------------------+\n```\n\nWe can use two consoles to call ```mbedgt```. Each one will specify one target ID, and will therefore run tests only on that target:\n\nConsole 1:\n```\n$ cd <yotta module X>\n$ mbedgt –use-tids 024002031E031E6AE3FFE3D2\n```\nConsole 2:\n```\n$ cd <yotta module Y>\n$ mbedgt –use-tids 02400203C3423E603EBEC3D8\n```\nThe two instances of Greentea are called at the same time, but since we provide two mutually exclusive subsets of allowed target IDs with switch ```--use-tids``` the two instances will not collide and will not try to access the same ```K64F``` board when testing.\n\n\n# Additional features\n\n## Dynamic host test loader\n\n* This feature allows users to point ```greentea``` and (indirectly ```mbedhtrun```) to arbitrary directory (switch ```-e <dir>``` containing new/proprietary host test scripts. Host tests script files are enumerated in ```<dir>``` and registered so they can be used with local module test cases.\n* Not all host tests can be stored with ```mbedhtrun``` package. Some of them may and will be only used locally, for prototyping. Some host tests may just be very module dependent and should not be stored with ``mbedhtrun```.\n* In many cases users will add host tests to their yotta modules preferably under ```/test/host_tests/```module directory.\n* **Note**: Directory ytmodule```/test/host_tests``` will be default local host test location used by test tools such as ```greentea```.\n* This feature allows ```mbedhtrun``` to load and register additional host test scripts from given directory.\n* Feature implementation is [here](https://github.com/ARMmbed/greentea/pull/33)\n\n## yotta config parse\n\n* Greentea reads ```yotta_config.json``` file to get information regarding current yotta module configuration.\n* Currently ```yotta_config::mbed-os::stdio::default-baud``` setting is read to determine default (interface chip) serial port baudrate. Note that this serial port is usually hooked to mbed's ```stdio```.\n* This feature changes dafault yotta connfiguration baudrate (default-baud) to 115200. All test tool follow this change.\n* Feature implementation is [here](https://github.com/ARMmbed/greentea/pull/41)\n\n## Local yotta targets scan for mbed-target keywords\n\n* ```yotta search``` command was used to check for compatibility between connected mbed devices and specified (available) yotta targets.\n* New functionality uses locally stored yotta targets (```mymodule/yotta_targets``` directory) to do so and allows user to add yotta registry results with new command line switch ```--yotta-registry```.\n* This method is much faster than yotta registry queries and allows users to work and test off-line.\n* Feature implementation is [here](https://github.com/ARMmbed/greentea/pull/42)\n\n# Common Issues\n\n* Issue: In this release there are known issues related to Virtual Machine support.\n  * Note: We are not planning to support VMs soon. If you are using our testing tools on VM and experiencing e.g. ``` IOERR_SERIAL``` errors you should probably switch to native OS.\n* Issue: In this release there are known issues related to Linux and MacOS serial port handling during test.\n  * Solution: Please use latest interface chip firmware for your mbed boards.\n* Issue: Some boards show up as 'unknown'.\n  * Solution: We will add them in coming releases.\n* Issue: Not all mbed boards have targets mapped to them.\n  * Solution: More mbed boards will be added in coming releases.\n\n## Uninstalling Greentea\n\nYou can uninstall the test suite package using ```pip```. List installed packages and filter for the test suite's package name:\n\n```bash\n$ pip freeze | grep mbed-greentea\nmbed-greentea==0.0.5\n```\n\nUninstall the test suite package:\n\n```bash\n$ pip uninstall mbed-greentea\nUninstalling mbed-greentea:\n  c:\\python27\\lib\\site-packages\\greentea-0.0.5-py2.7.egg\n  c:\\python27\\scripts\\mbedgt-script.py\n  c:\\python27\\scripts\\mbedgt.exe\n  c:\\python27\\scripts\\mbedgt.exe.manifest\nProceed (y/n)? Y\n  Successfully uninstalled mbed-greentea\n```\n\n# Commissioning mbed platforms\n\nPlease check [Configure mbed-enabled device to work with your host](https://github.com/ARMmbed/mbed-ls#configure-mbed-enabled-device-to-work-with-your-host) if you have problems with mbed device mounting / serial port installation.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ARMmbed/greentea",
    "keywords": null,
    "license": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mbed-greentea",
    "package_url": "https://pypi.org/project/mbed-greentea/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mbed-greentea/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ARMmbed/greentea"
    },
    "release_url": "https://pypi.org/project/mbed-greentea/1.2.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "mbed 3.0 onwards test suite, codename Greentea. The test suite is a collection of tools that enable automated testing on mbed-enabled platforms",
    "version": "1.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16560435,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b160fc169d7c1e0833d823a665a15007c91b9401de8a267e48640f31811966c0",
        "md5": "0da47352a2c2a9d0fafdd7708e1be5cd",
        "sha256": "ba452d34a0dceaf2fa56a2f49c9c0de7a279a840887d571b07bbaff34abd4194"
      },
      "downloads": -1,
      "filename": "mbed-greentea-1.2.5.zip",
      "has_sig": false,
      "md5_digest": "0da47352a2c2a9d0fafdd7708e1be5cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 119240,
      "upload_time": "2017-01-18T11:49:09",
      "upload_time_iso_8601": "2017-01-18T11:49:09.135310Z",
      "url": "https://files.pythonhosted.org/packages/b1/60/fc169d7c1e0833d823a665a15007c91b9401de8a267e48640f31811966c0/mbed-greentea-1.2.5.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}