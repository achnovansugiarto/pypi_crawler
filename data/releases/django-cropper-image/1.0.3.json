{
  "info": {
    "author": "aneesh usman",
    "author_email": "aneeshplusone@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================\ndjango-cropper-image\n=====================\n\n\ndjango-cropper-image is an app for client side cropping and compressing uploaded images via Django's app using with help cropper.js `cropperjs\n<https://github.com/fengyuanchen/cropperjs>`_.\ngithub link `django-cropper-image\n<https://github.com/aneesh2usman/django_cropper_image>`_.\n\nScreenshot:\n\n.. image:: https://github.com/aneesh2usman/django_cropper_image/blob/main/doc/Screenshot.png\n\n\ndjango-cropper-image is very usefull image upload with a specific size for your templates. it is more userfriendly no need add more field for cropping data storage in your db.\ndjango-cropper-image is keep both cropped image and orginal image and also setting custom configuration as you need like aspect ratio (3:4,16:9) vise versa. and you can set minimum and maximum crop width and height.\nit can also set compressing of image.\n\n\nInstallation\n============\n\n#. Install django-cropper-image using ``pip``::\n\n    pip install django-cropper-image\n\n\n    INSTALLED_APPS = [\n        ...\n        'django_cropper_image',\n    ]\n\n\nConfiguration\n=============\n\nAdd an ``ImageCropperField`` to the model that images you want to crop.you don't worried about if form error occure the image is remove \n\nmodels \n======\n\n#. ``Models.py``::\n\n    from django.db import models\n    from django-cropper-image.fields import ImageCropperField\n\n    class Images(models.Model):\n        image = ImageCropperField(upload_to='image',max_length=255)\n\nforms\n=====\n\n#. ``forms.py``::\n\n    from django import forms\n    from django.forms import ModelForm\n    from .models import Images\n\n    class ImageForm(ModelForm):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            # Form configuration is optional. You can change the default.\n            self.fields['image'].widget.attrs.update({\n                'data-aspectratio_w':16, #aspect ratio of width (Default : 1)\n                'data-aspectratio_h':9, #aspect ratio of height (Default : 1)\n                'data-minCropWidth' : 300, #minimum crop width \n                'data-minCropHeight' : 300, #minimum crop height \n                'data-maxCropWidth' : 600, #maximum crop width\n                'data-maxCropHeight' :600, #maximum crop height\n                'data-cropRestrict':\"true\", #minimum and maximum  work only when cropRestrict true\n                'data-mincontainerwidth' : 300, #minimum width of image container\n                'data-mincontainerheight' : 300,#minimum height of image container\n                'data-filesize' : 0.5, #. 1 mb 2mb if the file size reach config file size it will be compress\n                'data-fileresolution' : 0.7, #.0.7 medium resolution\n                'data-fillcolor' : '#fff', #color of the cropped image background\n                'data-maxmainimagewidth' : 2000, #uploaded image maximum width height take accordingily\n                'data-compress':\"true\", # compress yes:No (Default : true)\n                'data-orginal_extension':\"false\", # (Default : false)  if .png no chnage in png file otherwise convert jpg\n\n\n            })\n        \n        class Meta:\n            model \t= Images\n            fields \t= \"__all__\"\n        def clean(self, *args, **kwargs):\n            self.cleaned_data = super().clean(*args, **kwargs)\n\nviews\n=====\n\n#. ``views.py``::\n\n    from django.shortcuts import render\n    from django.http import HttpResponse,HttpResponseRedirect\n    from django.views import View\n    from django.urls import reverse\n    from .forms import ImageForm\n    from .models import Images\n    from django.conf import settings\n    class ImageView(View):\n        template_dir = \"example_project/\"\n        def get(self, request, *args, **kwargs):\n            if 'id' in kwargs and kwargs['id']:\n                context={}\n                instance =  Images.objects.filter(pk =kwargs['id'] ).first()\n                form = ImageForm(instance =instance)\n                context['form'] =form\n                context['form_media'] =form.media\n            elif 'delete_id' in kwargs and kwargs['delete_id']:\n                instance =  Images.objects.filter(pk =kwargs['delete_id'] ).delete()\n                return HttpResponseRedirect(reverse('image_add')) \n                \n            else :\n                context ={}\n                form = ImageForm()\n                context['form'] =form\n                context['form_media'] =form.media\n            #Send to the render view page\n            return render(request, self.template_dir+'home.html',context)\n        def post(self, request, *args, **kwargs):\n            \n            context ={}\n            if 'id' in kwargs and kwargs['id']:\n                instance =  Images.objects.filter(pk =kwargs['id'] ).first()\n                form = ImageForm(request.POST or None,request.FILES or None,instance =instance)\n                if request.POST and form.is_valid():\n                    form.save()\n                    \n                    return HttpResponseRedirect(reverse('image_edit',kwargs={'id':kwargs['id']})) \n            else :\n\n                form = ImageForm(request.POST or None,request.FILES or None)\n                if request.POST and form.is_valid():\n                    form.save()\n                    return HttpResponseRedirect(reverse('image_add')) \n            context['form'] =form\n            context['form_media'] =form.media\n            \n            #Send to the render view page\n            return render(request, self.template_dir+'home.html',context)\n\ntemplates\n========= \n\n#. templates.html::\n\n    {% load static %}\n    {% load i18n %}\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"description\" content=\"Django image cropper.\">\n    <meta name=\"author\" content=\"Aneesh Usman\">\n    {% block stylesheet %}\n    {% if form_media.css %}\n        {{ form_media.css }}\n    {% endif %}\n    {% endblock %}\n    <title>Django Image Cropper</title>\n    </head>\n    <body>\n    \n    <form method=\"{{form.method|default:'POST'}}\" enctype=\"multipart/form-data\" class=\"{{form.class}} m-form m-form--fit m-form--label-align-right\" action=\"{{form.action|default:request.path}}\" novalidate>\n        {% csrf_token %}\n        {{ form }}\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n\n\n    <!-- Scripts -->\n    \n    <script src=\"/static/example_project/js/jquery-3.4.1.slim.min.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"/static/example_project/js/bootstrap.bundle.min.js\" crossorigin=\"anonymous\"></script>\n    {% block javascript %}\n            {% if form_media.js %}\n            {{ form_media.js }}\n            {% endif %}\n        {% endblock %}\n\n    </body>\n    </html>\n\n\n\n\n\n\n    \n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aneesh2usman/django_cropper_image",
    "keywords": "cropper image",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cropper-image",
    "package_url": "https://pypi.org/project/django-cropper-image/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-cropper-image/",
    "project_urls": {
      "Homepage": "https://github.com/aneesh2usman/django_cropper_image"
    },
    "release_url": "https://pypi.org/project/django-cropper-image/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "django-cropper-image is an app for client side cropping and compressing uploaded images via Django 2.*",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10755173,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88e5271d1b2c33d4a299752d626d7baecd9bbf6f5c972c4c173c7329adc4db43",
        "md5": "9e9cb49856e9852f79347a4e1743e85d",
        "sha256": "9dffe76957c4e2d2f7b1eb558047442c8773f8a9e4f791457680dd91499d021c"
      },
      "downloads": -1,
      "filename": "django-cropper-image-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9e9cb49856e9852f79347a4e1743e85d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34181,
      "upload_time": "2021-06-19T15:54:35",
      "upload_time_iso_8601": "2021-06-19T15:54:35.183603Z",
      "url": "https://files.pythonhosted.org/packages/88/e5/271d1b2c33d4a299752d626d7baecd9bbf6f5c972c4c173c7329adc4db43/django-cropper-image-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}