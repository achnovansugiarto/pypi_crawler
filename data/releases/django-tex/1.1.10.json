{
  "info": {
    "author": "Martin Bierbaum",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-tex\n\ndjango-tex is a simple Django app to render LaTeX templates and compile\nthem into PDF files.\n\nDjango-tex requires a local LaTeX installation and uses the jinja2 \ntemplating engine for template rendering.\n\n## Installation\n\n`django-tex` is available on [pypi.org](https://pypi.org/project/django-tex/). It can be installed by:\n\n```pip install django_tex```\n\n## Quick start\n\n1. Add \"django_tex\" to your `INSTALLED_APPS` setting:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'django_tex',\n]\n```\n\n2. Configure a template engine named `tex` in settings.py:\n\n```python\nTEMPLATES = [\n    {\n        'NAME': 'tex',\n        'BACKEND': 'django_tex.engine.TeXEngine', \n        'APP_DIRS': True,\n    },\n]\n```\n\n3. Create a LaTeX template in your template directory:\n\n```tex\n# test.tex\n\\documentclass{article}\n\n\\begin{document}\n\n\\section{ {{- foo -}} }\n\n\\end{document}\n```\n\n4. Use \"compile_template_to_pdf\" in your code to get the PDF file as a bytes object:\n\n```python\nfrom django_tex.core import compile_template_to_pdf\n\ntemplate_name = 'test.tex'\ncontext = {'foo': 'Bar'}\nPDF = compile_template_to_pdf(template_name, context)\n```\n\nOr use `render_to_pdf` to generate a HTTPResponse containing the PDF file:\n\n```python\nfrom django_tex.shortcuts import render_to_pdf\n\ndef view(request):\n    template_name = 'test.tex'\n    context = {'foo': 'Bar'}\n    return render_to_pdf(request, template_name, context, filename='test.pdf')\n```\n\n## Some notes on usage\n\n### Latex binary\n\nThe default LaTeX interpreter is set to `lualatex`. This can be changed by the setting\n`LATEX_INTERPRETER`, for instance: `LATEX_INTERPRETER = 'pdflatex'`. Of course, the interpreter needs\nto be installed on your system for `django-tex` to work properly.\n\n### Interpreter arguments\n\nYou can pass additional arguments to the latex interpreter by using the `LATEX_INTERPRETER_OPTIONS` setting.\n\n### Whitespace control\n\nSince django-tex uses jinja, you can use jinja's whitespace control in \nLaTeX templates. For example, `\\section{ {{ foo }} }` would be rendered as \n`\\section{ Bar }` with the above context; `\\section{ {{- foo -}} }`, however, \ngets rendered nicely as `\\section{Bar}`.\n\n### Built-in filters\n\nDjango's built-in filters are available. So you can use `{{ foo|date('d. F Y') }}` \nto get `1. Januar 2018`, for instance.\n\nFurther, django-tex adds the custom filter `localize` to the jinja environment.\nThis runs its input through `django.utils.formats.localize_input` to\ncreate a localized representation. The output depends on the `USE_L10N` and `LANGUAGE_CODE`\nsettings. Use the filter like this: `{{ foo|localize }}`.\n\nIf you want to convert linebreaks into LaTeX linebreaks (`\\\\`), use the `linebreaks` filter (`{{ foo | linebreaks }}`).\n### Escaping LaTeX special characters\n\nTo escape LaTeX special characters, use the `latex_escape` filter, i.e. `{{ foo | latex_escape }}`s. \nThis escapes the following characters: `&$%#_{}\\^~` \n([see also this SO question](https://tex.stackexchange.com/questions/34580/escape-character-in-latex))\nUsing this filter all printable character should lead to a successful LaTeX build.\nSpacing for the characters `\\^~` is automatically adopted as an end user would expect it.\n\nPlease note Jinja's autoescaping is turned off in the default `django-tex` environment.\n\n### Custom filters\n\nCustom filters can be defined as explained in  the jinja documentation [here](http://jinja.pocoo.org/docs/2.10/api/#custom-filters). For example, the following filter formats a\n`datetime.timedelta` object as a hh:mm string:\n\n```python\ndef hhmm_format(value):\n    total_seconds = value.total_seconds()\n    hours, remainder = divmod(total_seconds, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return '{:n}:{:02n}'.format(hours, minutes)\n```\n\nThe filter has to be added to a custom environment and the `django-tex` templating engine has to be made aware\nof the environment. This can be achieved, for example, by defining a custom environment callable in an `environment.py` module in your app:\n\n```python\n# environment.py\nfrom django_tex.environment import environment\n\ndef hhmm_format(value):\n    pass # as above\n\ndef my_environment(**options):\n    env = environment(**options)\n    env.filters.update({\n        'hhmm_format': hhmm_format\n    })\n    return env\n```\n\n... and passing the dotted path to `my_environment` to the `TEMPLATES` settings:\n\n```python\n# settings.py\n\nTEMPLATES = [\n    {\n        'NAME': 'tex',\n        'BACKEND': 'django_tex.engine.TeXEngine', \n        'APP_DIRS': True,\n        'OPTIONS': {\n            'environment': 'myapp.environment.my_environment',\n        }\n    },\n]\n```\n\n### Including graphics files\n\nGraphics can be included in LaTeX documents using the `\\includegraphics{<filename>}` command provided\nby the `graphicx` package. Normally, LaTeX looks for graphics files in the current working directory, i.e. the \ndirectory including the source `.tex` file. The problem here is that `django-tex` creates a temporary directory to\nstore the source file so that the LaTeX compiler does not see any graphics files provided by the Django application.\nThis problem can be solved by specifying the absolute path to one or more directories including the graphics files \nusing the `\\graphicspath` command.\n\n`Django-tex` allows the user to specify the absolute paths to one or more directories in the `LATEX_GRAPHICSPATH` \nsetting. This setting should contain a list of one or more paths:\n\n```python\n# settings.py\n\nLATEX_GRAPHICSPATH = ['c:\\foo\\bar', 'c:\\bar\\foo']\n```\n\nOf course, a good way of constructing those paths is to use `os.path.join(BASE_DIR, <path>)`.\n\nUsing the template tag `{% graphicspath %}`, the correct `\\graphicspath` command can be inserted into the `.tex` \ntemplate. In the above case, `{% graphicspath %}` turns into `\\graphicspath{ {\"c:/foo/bar/\"} {\"c:/bar/foo/\"} }`. Use  \n`{% graphicspath %}` like this:\n\n```\n\\documentclass{article}\n\\usepackage{graphicx}\n\n{% graphicspath %}\n\n\\begin{document}\n\n\\includegraphics{foo}\n\n\\end{document}\n```\n\nIf `LATEX_GRAPHICSPATH` is not specified, `django-tex` takes the `BASE_DIR` instead.\n\nNote: There might be a problem if the path to the graphics directory contains whitespaces. To my knowledge, `lualatex` cannot handle whitespaces in the `\\graphicspath` command, but `pdflatex` can.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/weinbusch/django-tex",
    "keywords": "django latex jinja2",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tex",
    "package_url": "https://pypi.org/project/django-tex/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tex/",
    "project_urls": {
      "Homepage": "https://github.com/weinbusch/django-tex"
    },
    "release_url": "https://pypi.org/project/django-tex/1.1.10/",
    "requires_dist": [
      "django (>=2.2)",
      "jinja2 (>=2.9)"
    ],
    "requires_python": ">=3.6.2",
    "summary": "A simple Django app to render Latex templates and compile them into PDF files.",
    "version": "1.1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12329857,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd487b42e2f58fbe4e6a182ee4fa6046eb7310e372918203181432da98c94a51",
        "md5": "80ec3efe65f664ab18eca7dc538c3191",
        "sha256": "85d295f90e322eade61a87b8d1f07ad9864cc0918f1994b0bc9b1323dc579452"
      },
      "downloads": -1,
      "filename": "django_tex-1.1.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80ec3efe65f664ab18eca7dc538c3191",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.2",
      "size": 10345,
      "upload_time": "2021-12-16T17:54:14",
      "upload_time_iso_8601": "2021-12-16T17:54:14.576883Z",
      "url": "https://files.pythonhosted.org/packages/bd/48/7b42e2f58fbe4e6a182ee4fa6046eb7310e372918203181432da98c94a51/django_tex-1.1.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f66bfbe48567a732f5f53a4ea179ef67196487c1e41dd11bd6558a8c262e2bf8",
        "md5": "776cfdca6882c340bfd58ff187080a06",
        "sha256": "0b763a3782fee20c85e2b564561f130af269f25b0499fdafd49e55befd6803f8"
      },
      "downloads": -1,
      "filename": "django-tex-1.1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "776cfdca6882c340bfd58ff187080a06",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2",
      "size": 17190,
      "upload_time": "2021-12-16T17:54:15",
      "upload_time_iso_8601": "2021-12-16T17:54:15.554666Z",
      "url": "https://files.pythonhosted.org/packages/f6/6b/fbe48567a732f5f53a4ea179ef67196487c1e41dd11bd6558a8c262e2bf8/django-tex-1.1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}