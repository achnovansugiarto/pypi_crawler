{
  "info": {
    "author": "Julien Palard",
    "author_email": "julien@palard.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# HackInScience\n\n## Setup\n\nFirst `firejail` and `redis` (from your package manager), like:\n\n    apt install firejail redis\n\nInstall the dependencies:\n\n    python -m pip install requirements.txt\n\nThen run the classical Django things:\n\n    ./manage.py migrate\n    ./manage.py loaddata initial\n    ./manage.py compilemessages --ignore '.tox' --ignore '.venv'\n    ./manage.py createsuperuser\n\nThen in two distinct terminals, or by detaching one of them:\n\n    ./manage.py correction_bot\n\nand:\n\n    ./manage.py runserver\n\n\nNow you can login to `/admin`, from here you can change everything\nabout your installation: manage users, create pages, create exercises,\nteams, review answers, and so on.\n\nA `/exercises` page, and a `/help` page has been created automatically\nfor you, you may want to start by adding some exercises to the\n`exercises` page.\n\nAlternatively, one can use the `hkis` app alone, in order to\npersonalize registration, urls, and so on, for this you can install\nhkis as a django app in your own project:\n\n    pip install django-hkis\n\n\n## The pages\n\nA page is literaly a URL in your site, it can contain text (stored\nMarkdown) and/or exercises.\n\nFor example the automatically created page at `/help` is aimed to\nstore text but no exercises, and the page at `/exercises` is aimed to\npresent some exercises, maybe after an intro text, or without any\ntext.\n\nYou can live with only those two pages, or create a whole set of pages\nlike one exercise page per programming language, or per topic, per\nstudent class, ...\n\nOnce logged, the users are redirected to the first page (the one with\nthe smallsest `position`).\n\n\n## The categories\n\nInside a page, you can optionally group exercises in categories,\ninstead of displaying them as a whole single big list. It becomes\nhandy around 50~70 exercises.\n\n\n# How to contribute\n\n\n## Updating the intial fixture\n\nTo save the initial.json file, use:\n\n    ./manage.py dumpdata --indent 4 -e admin -e auth.Permission -e contenttypes -e sessions -o hkis/fixtures/initial.json\n\n\n## Translations\n\nTemplates are translated using django `makemessages` and `compilemessages` commands:\n\n```\n$ ./manage.py makemessages --locale fr\n$ ./manage.py makemessages --locale fr --domain djangojs\n# Edit the .po files\n$ ./manage.py compilemessages --ignore '.tox' --ignore '.venv'\n```\n\nExercises (title and wording) are translated via the admin (or the\nAPI), we use django-modeltranslation.\n\n\n## How does the checker bot work?\n\nThe answers are load-balanced to correction workers using Celery, so\nyou can have multiple machines dedicated to correct loads of answers.\n\nOnce received by a worker the worker runs two things:\n\n- An optional `pre_check.py` script, that sets-up anything specific\n  for this answers (required files and directories, translations,\n  whatever is needed).\n\n- A `check.py` script is then started in a sandbox (no internet\n  connectivity, restricted filesystem, CPU, memory usage, â€¦).\n  This is the script that check the student answer, the protocol is\n  simple: if the script exits with non-zero, then then answer is\n  wrong. And what's been printed (both stdout and stderr) is\n  displayed, as Markdown, to the student. If the answer is right and\n  nothing is printed, a default congratulation message is used.\n\nBoth `pre_check.py` and `check.py` are in Python, but they're not\nlimited to check for Python answers, if you want to check for shell\nscript or C, or whatever, the `check.py` can use `subprocess` to run\nthe answer script, or compile the answer code, or whatever needed.\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/hackinscience/hkis-website",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-hkis",
    "package_url": "https://pypi.org/project/django-hkis/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-hkis/",
    "project_urls": {
      "Homepage": "https://framagit.org/hackinscience/hkis-website"
    },
    "release_url": "https://pypi.org/project/django-hkis/1.0/",
    "requires_dist": [
      "bleach",
      "celery[redis]",
      "channels",
      "channels-redis",
      "django",
      "django-ace",
      "django-crispy-forms",
      "django-extensions",
      "django-filter",
      "django-modeltranslation",
      "django-rest-framework",
      "markdown",
      "pygments"
    ],
    "requires_python": ">=3.7",
    "summary": "Django HackInScience exercises app.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12159973,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18d8ab3aef8e82a3a5969c1fde8034d65455fbecc2bd3a1b940fc73dd6016be3",
        "md5": "429de694794ea8d171e694f960428f9c",
        "sha256": "510941ecd21588c6b8f4863b25e53cefa338e5771dd1d6eed623dd3be2a989f9"
      },
      "downloads": -1,
      "filename": "django_hkis-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "429de694794ea8d171e694f960428f9c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 604246,
      "upload_time": "2021-11-29T22:58:44",
      "upload_time_iso_8601": "2021-11-29T22:58:44.260552Z",
      "url": "https://files.pythonhosted.org/packages/18/d8/ab3aef8e82a3a5969c1fde8034d65455fbecc2bd3a1b940fc73dd6016be3/django_hkis-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}