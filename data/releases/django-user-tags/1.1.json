{
  "info": {
    "author": "Martin Brochhaus",
    "author_email": "mbrochh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Django User Tags\n================\n\n**WORK IN PROGRESS. DO NOT USE THIS!**\n\nA Django application for allowing users to add tags to any object. Each user's\ntags are nicely separated so that the auto-suggest functionality will never\nsuggest tags that have been entered by a different user (unless you want so).\n\nInstallation\n------------\n\nYou need to install the following prerequisites in order to use this app::\n\n    pip install Django\n    pip install South\n\nIf you want to install the latest stable release from PyPi::\n\n    $ pip install django-user-tags\n\nIf you feel adventurous and want to install the latest commit from GitHub::\n\n    $ pip install -e git://github.com/bitmazk/django-user-tags.git#egg=user_tags\n\nAdd ``user_tags`` to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...,\n        'user_tags',\n    )\n\nDon't forget to migrate your database::\n\n    ./manage.py migrate user_tags\n\nAdd jQuery and jQuery UI and tag-it to your base template or at least to the\ntemplate that should display forms with tag fields::\n\n    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script src=\"{{ STATIC_URL }}user_tags/js/tag-it.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\nAlso add a jQuery UI theme and the tag-it theme to your template::\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/flick/jquery-ui.css\">\n    <link href=\"{{ STATIC_URL }}user_tags/css/jquery.tagit.css\" rel=\"stylesheet\" type=\"text/css\">\n\nUsage\n-----\n\nFirst you need to modify the model that should be able to hold tags::\n\n    class YourModel(models.Model):\n        TAG_FIELDS = {\n            'tags': {\n                'verbose_name': _('Tags'),\n                'help_text': _('Help text'),\n                'with_user': True,\n            },\n            'global_tags': {\n                'verbose_name': _('Global Tags'),\n                'with_user': False,\n            }\n        }\n\n``TAG_FIELDS`` is a dictionary of dictionaries. The dictionaries can have the\nfollowing keys:\n\n1. **key in main dict**. This will be the name of the tag group in the\n   database and also the form field's name.\n2. **verbose_name**. This will be the label of the form field. If not provided\n   it will be the same as ``name``.\n3. **help_text**. This will be the help text of the form field.\n4. **with user**. If ``True``, the item that gets tagged must have a ForeignKey\n   to a ``User`` object or provide a ``get_user`` method. If ``False`` we\n   assume that the tags for this item are global.\n\nNext you would create a ``ModelForm`` for your taggable model::\n\n    from django import forms\n    from user_tags.forms import UserTagsFormMixin\n    from your_app.models import YourModel\n\n    class YourModelForm(UserTagsFormMixin, forms.ModelForm):\n        class Meta:\n            model = DummyModel\n\nThe ``UserTagsFormMixin`` will do the magic for you and add a form field for\nevery item in ``TAG_FIELDS`` on your model. These fields will have a class\n``tagItInput``. Additionally the mixin will add a method\n``fieldname_tags_values`` to the form (for each of your tag fields) which will\nreturn the available tags for that field::\n\n    <script type=\"text/javascript\">\n    $(document).ready(function() {\n        $(\"#id_fieldname\").tagit({\n            allowSpaces: true\n            ,availableTags: {{ form.fieldname_tags_values|safe }}\n            ,caseSensitive: false\n        });\n    });\n    </script>\n\nThis is just a sane set of settings that we like to use. You can of course\ntweak that to your liking. See the `tag-it documentation <https://github.com/aehlke/tag-it>`_\nfor further reference.\n\nSettings\n--------\n\nUSER_TAG_RELATED_NAME\n+++++++++++++++++++++\n\nIf for some reason one of your models already has a foreign key to\n``ContentType`` with a related name of ``user_tags_tagged_items`` you can\nchange the related name used  by ``django-user-tags`` using this setting.\n\nDefault: 'user_tags_tagged_items'\n\nContribute\n----------\n\nIf you want to contribute to this project, please perform the following steps::\n\n    # Fork this repository\n    # Clone your fork\n    $ mkvirtualenv -p python2.7 django-user-tags\n    $ pip install -r requirements.txt\n    $ ./user_tags/tests/runtests.sh\n    # You should get no failing tests\n\n    $ git co -b feature_branch master\n    # Implement your feature and tests\n    $ ./user_tags/tests/runtests.sh\n    # You should still get no failing tests\n    # Describe your change in the CHANGELOG.txt\n    $ git add . && git commit\n    $ git push origin feature_branch\n    # Send us a pull request for your feature branch\n\nWhenever you run the tests a coverage output will be generated in\n``tests/coverage/index.html``. When adding new features, please make sure that\nyou keep the coverage at 100%.\n\nIf you are making changes that need to be tested in a browser (i.e. to the\nCSS or JS files), you might want to setup a Django project, follow the\ninstallation insttructions above, then run ``python setup.py develop``. This\nwill just place an egg-link to your cloned fork in your project's virtualenv.\n\nRoadmap\n-------\n\nCheck the issue tracker on github for milestones and features to come.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitmazk/django-user-tags",
    "keywords": "django,tagging,ajax,user",
    "license": "The MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-user-tags",
    "package_url": "https://pypi.org/project/django-user-tags/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-user-tags/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/bitmazk/django-user-tags"
    },
    "release_url": "https://pypi.org/project/django-user-tags/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A reusable Django app that enables users of your site to tag items. Each user's\ntags are separated so that the auto-suggest functionality will never suggest\ntags another user has entered.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2574566,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fcfaf7c1ad41a6ccdc37ce9ec27d92af38df855e3d720a3d35771a94134b3f3",
        "md5": "6bbcde23c4a98dc7f8eecd831786e948",
        "sha256": "031a601500207387ef177194f2f4cadecafb164abe3bca4b60d53dfe4cc00d52"
      },
      "downloads": -1,
      "filename": "django-user-tags-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6bbcde23c4a98dc7f8eecd831786e948",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 105305,
      "upload_time": "2013-01-25T16:06:57",
      "upload_time_iso_8601": "2013-01-25T16:06:57.920271Z",
      "url": "https://files.pythonhosted.org/packages/8f/cf/af7c1ad41a6ccdc37ce9ec27d92af38df855e3d720a3d35771a94134b3f3/django-user-tags-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}