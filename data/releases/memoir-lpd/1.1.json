{
  "info": {
    "author": "Ana Karla Díaz Rodríguez",
    "author_email": "diaz.rodriguez.a.k@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# LPD\nLines in Protoplanetary Disks. ALMA Archive High Level Data Products.\n\n**URL**: [akdiaz.xyz/memoir](https://akdiaz.xyz/memoir)\n\n## Molecular EMissiOn IdentifieR (MEMOIR)\n\n`MEMOIR` detects the lines present in a spectrum and identifies them by comparing their frequencies against those of *known-lines*. **This is a preliminary identification; use at your own risk.**\n\nNeeds a spectrum file (formatted like the ones generated by [CASA](https://casa.nrao.edu/)) and a CSV file with the *known-lines* (formatted like those generated by [Splatalogue](https://splatalogue.online//)). `MEMOIR` uses by default [a built-in list](https://github.com/akdiaz/LPD/blob/main/src/memoir/data/allmols_combined_transitions.csv) generated using these [commands](https://github.com/aida-ahmadi/freqcomb/blob/master/examples/lines_in_PPDs.py) of [`FreqComb`](https://github.com/aida-ahmadi/freqcomb). Some transitions in this file are in fact a combination of transitions, please, check the [`grouping of lines`](https://github.com/aida-ahmadi/freqcomb/tree/master/tables).\n\n\n### Installation\n\n```bash\n❯ pip install memoir-lpd\n```\n\n### Usage\n\n`MEMOIR` has three subcommands: `extract`, to extract a spectrum from a cube; `estimate`, to estimate the velocity and width of the peaks in a spectrum; and `identify`, to detect and identify the lines in a spectrum.\n\nYou can access `MEMOIR` help with \n\n```\n❯ memoir -h\n```\n\nwhich produces\n\n```\nusage: memoir [-h] [-v] {extract,estimate,identify} ...\n\nMEMOIR: Molecular EMissiOn IdentifieR. Searches for lines in a spectrum and assignes IDs by comparing their frequencies\nwith those of known lines. Returns a file text with the ID and the peak values (frequency, velocity, intensity/flux) of\nthe detected lines.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n\nsubcommands:\n  valid subcommands\n\n  {extract,estimate,identify}\n                        type memoir <<subcommand>> -h to get additional help\n```\n\n## Extracting spectra\n\nIn the directory where your cube.FITS and mask.FITS files are stored, run:\n\n```\n❯ memoir extract\n```\n\nThis will produce a text file end-named \"spectrum.txt\" with the spectrum taken in cube.FITS, using the mask mask.FITS. If you pass several cubes and masks (see [examples](#examples)) to the command, you will get one spectrum file per cube&amp;mask pair. \n\nThere are a few options you can set to control the behavior of `MEMOIR` while extracting spectra. You can view them with\n\n```\n❯ memoir extract -h\n```\n\nwhich produces\n\n```\nusage: memoir extract [-h] [-i FITS_IMAGE [FITS_IMAGE ...]]\n                      [-m FITS_MASK [FITS_MASK ...]]\n\nextracts a spectrum from a fits image (provided by -i) using a mask image (provided by -m) and writes it to disk with\nend-name 'spectrum.txt'.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i FITS_IMAGE [FITS_IMAGE ...], --fits_image FITS_IMAGE [FITS_IMAGE ...]\n                        Fits image to take spectrum on mask <<fits_mask>>. (default: [''])\n  -m FITS_MASK [FITS_MASK ...], --fits_mask FITS_MASK [FITS_MASK ...]\n                        Mask used to take spectrum in image <<fits_image>>. (default: [''])\n\n```\n\n### How it works\n\n1. If the mask is all blank, skips to the next image and mask provided.\n2. The mask can have different masking in each channel, so `MEMOIR` constructs a new joint mask that is the union of the masks in all channels and uses it to take the spectrum.\n3. The spectrum extracted using the joint mask is written to disk in a text file end-named \"spectrum.txt\".\n\n## Estimating a velocity and width for the peaks\n\nIn the directory where your spectrum file is stored, run:\n\n```\n❯ memoir estimate\n```\n\nThis will produce a text file (called \"estimate.txt\") with the properties (index, velocity, flux/intensity and width at 10% of maximum) of the peaks detected in the spectrum. If you pass several spectra to the script, you will get only one file with the information of all the peaks detected. The *index* of the peak includes a reference to the spectrum on which it was found.\n\nFor example, if you analyse the spectra in the input files \"spw_0.txt\" (containing one peak) and \"spw_3.txt\" (containing two peaks), you will get an output text file (named \"estimate.txt\") like this:\n\n```\n# Spectrum_Peak_ID\tPeak_Velocity_(km/s)\tPeak_Sum_(Jy/beam)\tPeak_Width_10% (km/s)\nspw_0_0 4.621650 84.846497 6.848417\nspw_3_0 45.017431 7.240037 12.464653\nspw_3_1 -24.578994 7.425170 12.936669\n```\nThere are several options you can set to control the behaviour of `MEMOIR` while estimating these values. You can view them with\n\n```\n❯ memoir estimate -h\n```\n\nwhich produces\n\n```\nusage: memoir estimate [-h] [-s SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...]] [--snr SNR] [-w LINE_WIDTH]\n\nDetects peaks in a spectrum (provided by -s) and estimate their velocity and width (at 10% of maximum). Writes to \ndisk a file with the relevant info in the working directory.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...], --spectrum_file_name SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...]\n                        Name of the file (including extension) with the spectrum to analyse. If not set (default \n                        behaviour) will use all the files in the working directory end-named 'spectrum.txt'.\n                        (default: [''])\n  --snr SNR             Signal-to-noise ratio. Only peaks with flux higher than <<SNR>> will be returned (default: 5)\n  -w LINE_WIDTH, --line_width LINE_WIDTH\n                        Line width prior to estimation (in the velocity units of the input spectrum). Local peaks closer\n                        than <<line_width>> will be considered as belonging to the same line, and only the one with\n                        higher flux will be returned. (default: 20)\n\n```\n\n### How it works\n\n1. Finds the peaks in the spectrum whose values are above a certain threshold (provided by --snr) and that are separated in velocity more than certain value (provided by -w).\n2. Finds the peak-velocity and peak-width at 10% of the maximum value.\n4. Returns the output file (see above).\n\n## Detecting and identifying the lines\n\nIn the directory where your spectrum file is stored, run:\n\n```\n❯ memoir identify\n```\n\nThis will produce a text file (called \"detected_lines.txt\") with the identified lines and their peak properties (index, velocity, frequency and flux/intensity), and a plot (a .png file with the same name of the input spectrum file) with useful information, both inside a subfolder named \"output\" by default. If you pass several spectra to the script, you will get one plot per spectrum but only one file with the information of all the lines detected. The *index* of the lines includes a reference to the spectrum on which they were found.\n\nFor example, if you analyse the spectra in the input files \"spw_0.txt\" and \"spw_3.txt\" (containing one CO line each), you will get an output text file (named \"detected_lines.txt\") like this:\n\n```\n# Spectrum_Peak_ID\tSpecies\tTransition\tTeorical_Frequency\tRedshifted_Frequency\tPeak_frequency_(MHz)\tPeak_Velocity_(km/s)\tPeak_Flux_density_(Jy)\nspw0_0 13COv=0 J=3-2,F=5/2-5/2 330587.867100 330587.867100 330587.387762 0.528000 7.513535\nspw0_0 13COv=0 J=3-2,F=5/2-3/2 330587.949000 330587.949000 330587.387762 0.528000 7.513535\nspw0_0 13COv=0 3-2 330587.965300 330587.965300 330587.387762 0.528000 7.513535\nspw0_0 13COv=0 J=3-2,F=7/2-5/2 330587.981600 330587.981600 330587.387762 0.528000 7.513535\nspw3_0 COv=0 3-2 345795.989900 345795.989900 345795.840051 0.130000 53.377550\n```\nand two plots like these (named \"spw_0.png\" and \"spw_3.png\"):\n\n![spw_0](https://github.com/akdiaz/LPD/blob/main/Help/spw0.png?raw=True \"spw_0\")\n\n![spw_3](https://github.com/akdiaz/LPD/blob/main/Help/spw3.png?raw=True \"spw_3\")\n\nIn this case, `MEMOIR` found one line (spw0_0) that could be any of the 13COv=0 listed, and another one (spw3_0) identified as COv=0 3-2, whose peaks are marked in the plot as red dots, and the frequency of the posible lines are marked with blue lines.\n\nThere are several options you can set to control the behavior of `MEMOIR` while identifying the lines. You can view them with\n\n```\n❯ memoir identify -h\n```\nwhich produces\n\n```\nusage: memoir identify [-h] [-s SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...]] [-e ESTIMATE_FILE_NAME]\n                            [-l KNOWN_LINES_FILE_NAME] [-o OUTPUT] [--snr SNR] [-w LINE_WIDTH] \n                            [-t FREQUENCY_TOLERANCE] [--vlsr VLSR]\n\nDetects lines in a spectrum (provided by -s) and identifies them by comparing their frequencies with those in a\nknown-lines file (provided by -l). Writes to disk a file and plot(s) with the relevant info in the folder <<output>>.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...], --spectrum_file_name SPECTRUM_FILE_NAME [SPECTRUM_FILE_NAME ...]\n                        Name of the file (including extension) with the spectrum to analyse. If not set (default\n                        behaviour) will use all the files in the working directory end-named 'spectrum.txt'.\n                        (default: [''])\n  -e ESTIMATE_FILE_NAME, --estimate_file_name ESTIMATE_FILE_NAME\n                        Name of the file (including extension) with estimates of the velocity and width (at 10% of\n                        maximum) of the peaks in the spectrum. If not set (default behaviour) will use, if exists,\n                        a file in the working directory named 'estimate.txt', or the values set with the parameters\n                        --vlsr and --line_width, in that order of preference. (default: [''])\n  -l KNOWN_LINES_FILE_NAME, --known_lines_file_name KNOWN_LINES_FILE_NAME\n                        Name of the file (including extension) with the known lines. If not specified, use memoir's\n                        built-in one. (default: None)\n  -o OUTPUT, --output OUTPUT\n                        Name of the output folder. (default: output)\n  --snr SNR             Signal-to-noise ratio. Only peaks with flux higher than <<SNR>> will be returned (default: 5)\n  -w LINE_WIDTH, --line_width LINE_WIDTH\n                        Line width (in the velocity units of the input spectrum). Local peaks closer than <<line_width>>\n                        will be considered as belonging to the same line, and only the one with higher flux will be\n                        returned. (default: 20)\n  -t FREQUENCY_TOLERANCE, --frequency_tolerance FREQUENCY_TOLERANCE\n                        Frequency tolerance (in the frequency units of the input spectrum). If a detected line has a \n                        known line with a frequency separation less than <<frequency_tolerance>>, it will assume its \n                        ID, if not, will remain unidentified (U). (default: 0.01)\n  --vlsr VLSR           Source radial velocity (local standard of rest) in km/s. (default: 0)\n\n```\n\n### <a name=\"hiw_identify\"></a>How it works\n\n1. If a text file with estimates of peak velocities and widths **exists, or is provided** (by -e), assumes as the source radial velocity in the local standard of rest (vlsr) the velocity of the peak closer to 0 km/s (using as rest-frequency the central frequency of the spectrum, assumed to be in GHz), and as line-width (w) the mean of the widths of all the peaks. If this file **does not exist**, uses the vlsr and line-width provided by the user with the parameters --vlsr and -w, respectively (or their default values).\n2. Finds the lines in the spectrum whose peaks are above a certain threshold (provided by --snr) and that are separated in velocity more than certain value (provided by -w). These are the *detected-lines*.\n3. Looks up in the csv file containing the *known-lines* and\n   - redshifts the theoretical frequencies according the velocity of the source (provided by --vlsr).\n   - finds those lines that have redshifted frequencies inside the frequency range of the spectrum. These are the *expected-lines*.\n4. Matches each *detected-line*, with **all** the *expected-lines* that are closer in frequency than certain value (provided by -t).\n5. Returns the output files (see above).\n\n## Examples\n\n**Extracting spectra:**\n```\n❯ memoir extract\n```\nwill make `MEMOIR` extract spectra in all the FITS end-named \"pbcor.fits\" using the corresponding mask end-named \"mask.fits\" in your current working directory. The spectra will be written to disk in a file end-named \"spectrum.txt\".\n\n```\n❯ memoir extract -i cube.fits -m mask.fits\n```\nwill make `MEMOIR` take a spectrum in \"cube.fits\" using the mask \"mask.fits\" in your current working directory. The spectrum will be written to disk in a file named \"cube.spectrum.txt\".\n\n```\n❯ memoir extract -i cube1.fits cube2.fits  -m mask1.fits mask2.fits\n```\nwill make `MEMOIR` take a spectrum in \"cube1.fits\" using the mask \"mask1.fits\", and in \"cube2.fits\" using the mask \"mask2.fits\", in your current working directory. The spectra will be written to disk in two files named \"cube1.spectrum.txt\" and \"cube2.spectrum.txt\". You can use as many cubes and corresponding masks as desired.\n\n**Estimating a velocity and width for the peaks:**\n```\n❯ memoir estimate\n```\nwill make `MEMOIR` detect the peaks in all the files end-named \"spectrum.txt\" in your current working directory, and find their velocity and width at 10% of the maximum. This info will be written to disk in a file named \"estimate.txt\". Be mindful when processing more than one spectrum at the same time, since all the info in the output file will be later used as input parameters for the subcommand `identify` (see [how it works](#hiw_identify)).\n\n```\n❯ memoir estimate -s spw0.txt\n```\nwill make `MEMOIR` detect and estimate the properties of the peaks in the file \"spw0.txt\" in your current working directory.\n\n```\n❯ memoir estimate -s spw0.txt spw3.txt\n```\nwill make `MEMOIR` detect and estimate the properties of the peaks in the files \"spw0.txt\" and \"spw3.txt\" in your current working directory.\n\n```\n❯ memoir estimate -s *.txt\n```\nwill make `MEMOIR` detect and estimate the properties of the peaks in all the .txt files in your current working directory.\n\n\n**Detecting and identifying lines:**\n\n```\n❯ memoir identify\n```\nwill make `MEMOIR` detect and identify the lines in all the files end-named \"spectrum.txt\" in your current working directory. If an estimate.txt file exists in the working directory, it will use the info there to estimate the vlsr and line-width (see above).\n\n```\n❯ memoir identify -e \"my_estimate.txt\"\n```\nwill make `MEMOIR` detect and identify the lines in all the files end-named \"spectrum.txt\" in your current working directory. It will use the info in the file \"my_estimate.txt\" to estimate the vlsr and line-width (see above).\n\n```\n❯ memoir identify --vlsr 5 -w 10 \n```\nwill make `MEMOIR` detect and identify the lines in all the files end-named \"spectrum.txt\" in your current working directory. If an estimate.txt file **does not exist** in the working directory, it will use as vlsr and line width the values set by the user (or their default, if not set). If the estimate.txt file **does** exist, it will use it even if the user has set --vlsr and/or -w. \n\n```\n❯ memoir identify -s spw0.txt\n```\nwill make `MEMOIR` detect and identify the lines in the file \"spw0.txt\" in your current working directory. \n\n```\n❯ memoir identify -s spw0.txt spw3.txt\n```\nwill make `MEMOIR` detect and identify the lines in the files \"spw0.txt\" and \"spw3.txt\" in your current working directory.\n\n```\n❯ memoir identify -s *.txt\n```\nwill make `MEMOIR` detect and identify the lines in `MEMOIR` in all the .txt files in your current working directory.\n\n**Example of spectrum file**:\n```\n# spw0.image, region=\n# beam size: 17.262405172558292 arcsec2, 53.13144097434767 pixels\n# Total flux: 7.47938294096 Jy.MHz\n# Channel number_of_unmasked_pixels frequency_(MHz) Velocity_(km/s) Flux_density_(Jy)\n        0                       269   330598.997228       -9.999833     -9.647420e-01\n        1                       269   330598.961941       -9.967834     -1.071281e+00\n        2                       269   330598.926653       -9.935835     -3.810407e-01\n        3                       269   330598.891366       -9.903836     -4.499658e-01\n        4                       269   330598.856079       -9.871837      5.284649e-01\n        5                       269   330598.820792       -9.839839      4.755686e-01\n```\n\n**Example of known-lines file**:\n```\nSpecies,ChemicalName,QNs,Freq,log10_Aij,EU_K,CDMS/JPL Intensity\nCNv=0,Cyanide Radical,\"N=1-0,J=1/2-1/2,F=1/2-1/2\",113.1233687,-5.89067,5.43004,-4.7119\nCNv=0,Cyanide Radical,\"N=1-0,J=1/2-1/2,F=1/2-3/2\",113.14419,-4.9776,5.43003,-3.7989\nCNv=0,Cyanide Radical,\"N=1-0,J=1/2-1/2,F=3/2-1/2\",113.170535,-5.28862,5.43231,-3.809\nCNv=0,Cyanide Radical,\"N=1-0,J=1/2-1/2,F=3/2-3/2\",113.191325,-5.17514,5.4323,-3.6956\nCNv=0,Cyanide Radical,\"N=1-0,J=3/2-1/2,F=5/2-3/2\",113.490985,-4.92358,5.44668,-3.2691\nCNv=0,Cyanide Radical,\"N=1-0,J=3/2-1/2,F=1/2-1/2\",113.499643,-4.97352,5.4481,-3.7962\nCNv=0,Cyanide Radical,\"N=1-0,J=3/2-1/2,F=3/2-3/2\",113.508934,-5.28472,5.44754,-3.8064\nCNv=0,Cyanide Radical,\"N=1-0,J=3/2-1/2,F=1/2-3/2\",113.5204215,-5.88634,5.44809,-4.7091\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=1/2-1/2\",226.2874265,-4.98737,16.30806,-4.1215\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=3/2-1/2\",226.3030784,-5.37977,16.30881,-4.2129\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=3/2-3/2\",226.31454,-5.00405,16.30893,-3.8372\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=3/2-5/2\",226.3325364,-5.34151,16.30893,-4.1747\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=5/2-3/2\",226.3419306,-5.50078,16.31025,-4.1579\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-3/2,F=5/2-5/2\",226.359871,-4.79365,16.31024,-3.4508\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-1/2,F=1/2-3/2\",226.6165554,-4.96955,16.30818,-4.1043\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-1/2,F=3/2-3/2\",226.63219,-4.37065,16.30893,-3.2044\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-1/2,F=5/2-3/2\",226.659575,-4.02379,16.31024,-2.6815\nCNv=0,Cyanide Radical,\"N=2-1,J=3/2-1/2,F=3/2-1/2\",226.679382,-4.27836,16.30889,-3.1122\nCNv=0,Cyanide Radical,\"N=2-1,J=5/2-3/2,F=7/2-5/2\",226.874745,-3.94188,16.33495,-2.4751\nCNv=0,Cyanide Radical,\"N=2-1,J=5/2-3/2,F=5/2-5/2\",226.892119,-4.74221,16.33579,-3.4004\nCNv=0,Cyanide Radical,\"N=2-1,J=5/2-3/2,F=3/2-5/2\",226.9053771,-5.94809,16.33642,-4.7824\n```\n**Example of estimate file**:\n```\n# Spectrum_Peak_ID\tPeak_Velocity_(km/s)\tPeak_Sum_(Jy/beam)\tPeak_Width_10% (km/s)\nspw_0_0 4.621650 84.846497 6.848417\nspw_1_0 6.072116 526.122437 4.316900\nspw_2_0 45.017431 7.240037 12.464653\nspw_2_1 -24.578994 7.425170 12.936669\nspw_3_0 6.761816 15.532443 11.558561\nspw_4_0 6.801448 17.015665 12.467995\nspw_5_0 4.420516 24.261328 24.365458\nspw_6_0 4.537041 10.090816 9.376807\n```\nNote that there are two peaks detected in the spectrum called \"spw_2.txt\" (the ones with IDs \"spw_2_0\" and \"spw_2_1\").\n\n**Example of a detected_lines file**:\n```\n# Some transitions in the built-in file used for the identification of the lines are in fact a combination of transitions. Please check https://github.com/aida-ahmadi/freqcomb/tree/master/tables for the grouping done.\n# This is a preliminary identification. Use at your own risk.\n# Using vlsr = 4.420516 (km/s) and line_width = 11.791932500000001 (km/s).\n# Spectrum_Peak_ID\tSpecies\tTransition\tTeorical_Frequency\tRedshifted_Frequency\tPeak_Frequency_(GHz)\tPeak_Velocity_(km/s)\tPeak_Sum_(Jy/beam)\tPeak_Width_FWHM (km/s)\nspw_0_0 13COv=0 2-1 220.398676 220.395427 220.395286 4.621650 84.846497 6.848417\nspw_0_0 CH3OHvt=0-2 10(-5)-11(-4)E2vt=0 220.401317 220.398067 220.395286 4.621650 84.846497 6.848417\nspw_1_0 COv=0 2-1 230.538000 230.534601 230.533331 6.072116 526.122437 4.316900\nspw_2_0 CCHv=0 N=3-2,J=7/2-5/2,F=4-3 262.004227 262.000363 262.000652 45.017431 7.240037 12.464653\nspw_2_1 CCHv=0 N=3-2,J=5/2-3/2,F=3-2 262.064843 262.060979 262.061484 -24.578994 7.425170 12.936669\nspw_3_0 C18O 2-1 219.560357 219.557119 219.555406 6.761816 15.532443 11.558561\nspw_4_0 H2CO 3(0,3)-2(0,2) 218.222192 218.218974 218.217241 6.801448 17.015665 12.467995\nspw_5_0 HCNv=0 J=3-2 265.886180 265.882259 265.882510 4.420516 24.261328 24.365458\nspw_6_0 HCO+v=0 1-0 89.188523 89.187208 89.187176 4.537041 10.090816 9.376807\n```\nNote that the line with ID \"spw_0_0\" has two possible identifications (13COv=0 or CH3OHvt=0-2).\n\n### Citation\n\nIf you use any file/result from this repo in your work, please cite it as:\n\n```\n@software{diaz2022,\n  author = {{Diaz-Rodriguez}, Ana K. and {Ahmadi}, Aida and {Miotello}, Anna and {Terron}, Victor},\n  title = {MEMOIR: Molecular EMissiOn IdentifieR},\n  url = {https://github.com/akdiaz/LPD},\n  doi = {10.5281/zenodo.7088475}\n  version = {1.01},\n  date = {2022-09-17},\n}\n```\n\n\n[![Black badge](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI badge](https://img.shields.io/pypi/v/memoir-lpd?color=blue)](https://pypi.org/project/memoir-lpd/)\n[![DOI](https://zenodo.org/badge/364493633.svg)](https://zenodo.org/badge/latestdoi/364493633)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://akdiaz.xyz/memoir",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memoir-lpd",
    "package_url": "https://pypi.org/project/memoir-lpd/",
    "platform": null,
    "project_url": "https://pypi.org/project/memoir-lpd/",
    "project_urls": {
      "Bug Tracker": "https://github.com/akdiaz/LPD/issues",
      "Homepage": "https://akdiaz.xyz/memoir"
    },
    "release_url": "https://pypi.org/project/memoir-lpd/1.1/",
    "requires_dist": [
      "astropy",
      "importlib-resources",
      "matplotlib",
      "numpy",
      "pandas",
      "scipy"
    ],
    "requires_python": ">=3.0",
    "summary": "Spectral molecular line detection for ALMA Archive High Level Data Products.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15126612,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f3496f429cf9b1148c6bcbe379557766d649e918def899455035cfe584a25a5",
        "md5": "4ed933c56202681a181514d87681f3a5",
        "sha256": "5cbd97c4e6c4824ff12bd8d352f7632dc10fa1b798560625f7104d8ab2e18e5c"
      },
      "downloads": -1,
      "filename": "memoir_lpd-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ed933c56202681a181514d87681f3a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 109169,
      "upload_time": "2022-09-17T11:32:53",
      "upload_time_iso_8601": "2022-09-17T11:32:53.937822Z",
      "url": "https://files.pythonhosted.org/packages/6f/34/96f429cf9b1148c6bcbe379557766d649e918def899455035cfe584a25a5/memoir_lpd-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dce37703e922cd6a3c6211bd84934a83276570c59c37ef2898f0cc320bbbef65",
        "md5": "19390ca4145cb7920afe0eaa56564620",
        "sha256": "33cf62744dce2460f2d1a768923fcb30114e1c81ba321bfb1caf9987f83c12a5"
      },
      "downloads": -1,
      "filename": "memoir-lpd-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "19390ca4145cb7920afe0eaa56564620",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 114260,
      "upload_time": "2022-09-17T11:32:55",
      "upload_time_iso_8601": "2022-09-17T11:32:55.528376Z",
      "url": "https://files.pythonhosted.org/packages/dc/e3/7703e922cd6a3c6211bd84934a83276570c59c37ef2898f0cc320bbbef65/memoir-lpd-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}