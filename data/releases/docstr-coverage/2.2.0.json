{
  "info": {
    "author": "Hunter McGushion",
    "author_email": "hunter@mcgushion.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Documentation",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Software Development",
      "Topic :: Software Development :: Documentation",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Utilities"
    ],
    "description": "![docstr-coverage](https://github.com/HunterMcGushion/docstr_coverage/raw/master/docs/logo_wide.png)\n\n<p align=\"center\">\n    <a href=\"https://choosealicense.com/licenses/mit/\" alt=\"License: MIT\">\n        <img src=\"https://img.shields.io/badge/license-MIT-green.svg\" /></a>\n    <img src=\"https://github.com/HunterMcGushion/docstr_coverage/workflows/Python%20package/badge.svg\" />\n    <a href='https://docstr-coverage.readthedocs.io/en/latest/?badge=latest'>\n        <img src='https://readthedocs.org/projects/docstr-coverage/badge/?version=latest' alt='Documentation Status' />\n    </a>\n    <a href=\"https://pypi.org/project/docstr-coverage/\">\n        <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/docstr-coverage\">\n    </a>\n    <a href=\"https://img.shields.io/pypi/pyversions/docstr-coverage\">\n        <img alt=\"Python Version\" src=\"https://img.shields.io/pypi/pyversions/docstr-coverage\">\n    </a>\n    <a href=\"https://pepy.tech/project/docstr-coverage\">\n        <img alt=\"Download count\" src=\"https://static.pepy.tech/personalized-badge/docstr-coverage?period=total&units=international_system&left_color=gray&right_color=orange&left_text=downloads\">\n    </a>\n    <a href=\"https://black.readthedocs.io/en/stable/\" alt=\"Code Style: Black\">\n        <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" />\n    </a>\n</p>\n\n`docstr-coverage` is a simple tool that lets you measure your Python source code's\n[docstring](http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring) coverage. \nIt shows which of your functions, classes, methods, and modules don't have docstrings. \nIt also provide statistics about overall docstring coverage for individual files, and for your entire project.\n\n- [Source](https://github.com/HunterMcGushion/docstr_coverage)\n- [Documentation](https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html)\n\n## Example\n\n```bash\n>>> HunterMcGushion$ docstr-coverage /docstr_coverage/\n\nFile: \"docstr_coverage/setup.py\"\n - No module docstring\n - No docstring for `readme`\n Needed: 2; Found: 0; Missing: 2; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/__init__.py\"\n - No module docstring\n Needed: 1; Found: 0; Missing: 1; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/coverage.py\"\n - No docstring for `DocStringCoverageVisitor.__init__`\n Needed: 11; Found: 10; Missing: 1; Coverage: 90.9%\n\n\nOverall statistics for 3 files:\nDocstrings needed: 14; Docstrings found: 10; Docstrings missing: 4\nTotal docstring coverage: 71.4%;  Grade: Very good\n```\n\n## How Do I Use It\n\n### Command-line Tool\n\nGeneral usage is: `docstr-coverage <path to dir or module> [options]`\n\nTo test a single module, named `some_module.py`, run:\n\n```bash\ndocstr-coverage some_module.py\n```\n\nTo test a directory (recursively), just supply the directory `some_project/src` instead:\n\n```bash\ndocstr-coverage some_project/src\n```\n\n#### Options\n\n- _--skip-magic, -m_ - Ignore all magic methods (except `__init__`)\n- _--skip-init, -i_ - Ignore all `__init__` methods\n- _--skip-file-doc, -f_ - Ignore module docstrings (at the top of files)\n- _--skip-private, -P_ - Ignore private functions (starting with a single underscore)\n- _--skip-class-def, -c_ - Ignore docstrings of class definitions\n- _--skip-property, -sp_ - Ignore functions with `@property` decorator\n- _--include-setter, -is_ - Include functions with `@setter` decorator (skipped by default)\n- _--include-deleter, -idel_ - Include functions with `@deleter` decorator (skipped by default)\n- _--accept-empty, -a_ - Exit with code 0 if no Python files are found (default: exit code 1)\n- _--exclude=\\<regex\\>, -e \\<regex\\>_ - Filepath pattern to exclude from analysis\n  - To exclude the contents of a virtual environment `env` and your `tests` directory, run:\n  ```docstr-coverage some_project/ -e \".*/(env|tests)\"```\n- _--verbose=\\<level\\>, -v \\<level\\>_ - Set verbosity level (0-3, default: 3)\n  - 0 - Silence\n  - 1 - Print overall statistics\n  - 2 - Also print individual statistics for each file\n  - 3 - Also print missing docstrings (function names, class names, etc.)\n  - 4 - Also print information about present docstrings\n- _--fail-under=<int|float>, -F <int|float>_ - Fail if under a certain percentage of coverage (default: 100.0)\n- _--docstr-ignore-file=\\<filepath\\>, -d \\<filepath\\>_ - Filepath containing list of patterns to ignore. Patterns are (file-pattern, name-pattern) pairs\n  - File content example:\n\n  ```\n  SomeFile method_to_ignore1 method_to_ignore2 method_to_ignore3\n  FileWhereWeWantToIgnoreAllSpecialMethods __.+__\n  .* method_to_ignore_in_all_files\n  a_very_important_view_file ^get$ ^set$ ^post$\n  detect_.* get_val.*\n  ```\n- _--badge=\\<filepath\\>, -b \\<filepath\\>_ - Generate a docstring coverage percent badge as an SVG saved to a given filepath\n  - Include the badge in a repo's README using \n  ```[![docstr_coverage](<filepath/of/your/saved/badge.svg>)](https://github.com/HunterMcGushion/docstr_coverage)```,\n  where `<filepath/of/your/saved/badge.svg>` is the path provided to the `--badge` option\n- _--follow-links, -l_ - Follow symlinks\n- _--percentage-only, -p_ - Output only the overall coverage percentage as a float, silencing all other logging\n- _--help, -h_ - Display CLI options\n\n#### Config File\nAll options can be saved in a config file. A file named `.docstr.yaml` in the folder in which `docstr-coverage` is executed is picked up automatically. \nOther locations can be passed using `docstr-coverage -C path/to/config.json` or the long version `--config`.\n\nExample:\n```yaml\npaths: # list or string\n  - docstr_coverage\nbadge: docs # Path\nexclude: .*/test # regex\nverbose: 3 # int (0-4)\nskip_magic: True # Boolean\nskip_file_doc: True # Boolean\nskip_init: True # Boolean\nskip_class_def: True # Boolean\nskip_private: True # Boolean\nfollow_links: True # Boolean\naccept_empty: True # Boolean\nignore_names_file: .*/test # regex\nfail_under: 90 # int \npercentage_only: True # Boolean\nignore_patterns: # Dict with key/value pairs of file-pattern/node-pattern\n  .*: method_to_ignore_in_all_files\n  FileWhereWeWantToIgnoreAllSpecialMethods: \"__.+__\"\n  SomeFile:\n    - method_to_ignore1\n    - method_to_ignore2\n    - method_to_ignore3\n  a_very_important_view_file:\n    - \"^get$\"\n    - \"^set$\"\n    - \"^post$\"\n  detect_.*:\n    - \"get_val.*\"\n```\nequivalent to\n```\ndocstr-coverage docstr_coverage -e \".*/test\" --skip-magic --skip-init --badge=\"docs\" --skip-class-def etc...\n```\n\nNote that options passed as command line arguments have precedence over options \nconfigured in a config file.\nException: If a `--docstr-ignore-file` is present and the yml config contains `ignore_patterns`,\na `ValueError` is raised.\n\n#### Overriding by Comments\nNote that `docstr-coverage` can not parse \ndynamically added documentation (e.g. through class extension).\nThus, some of your code which deliberately has no docstring might be counted as uncovered.\n\nYou can override this by adding either ```# docstr-coverage:inherited``` \n(intended for use if a docstring is provided in the corresponding superclass method)\nor a generic excuse with a reason, like ```# docstr-coverage:excused `My probably bad excuse` ```.\nThese have to be stated right above any class or function definition \n(or above the functions annotations, if applicable).\nSuch class or function would then be counted as if they had a docstring.\n\n```python\n# docstr-coverage:excused `no one is reading this anyways`\nclass FooBarChild(FooBar):\n\n    # docstr-coverage:inherited\n    def function(self):\n        pass\n```\n\n#### Pre-commit hook\n\nYou can use `docstr-coverage` as a pre-commit hook by adding the following to your `.pre-commit-config.yaml` file \nand configuring the `paths` section of the [`.docstr.yaml` config](#config-file). \n This is preferrable over [pre-commit args](https://pre-commit.com/#config-args), \n as it facilitates the use of the same config in CI, pre-commit and manual runs.\n\n```yaml\nrepos:\n  - repo: https://github.com/HunterMcGushion/docstr_coverage\n    rev: v2.2.0 # most recent docstr-coverage release or commit sha\n    hooks:\n      - id: docstr-coverage\n        args: [\"--verbose\", \"2\"] # override the .docstr.yaml to see less output\n```\n\n#### Package in Your Project\n\nYou can also use `docstr-coverage` as a part of your project by importing it thusly.\nIt will supply you with overall and per-file coverages:\n\n```python\nfrom docstr_coverage import get_docstring_coverage\nmy_coverage = get_docstring_coverage(['some_dir/file_0.py', 'some_dir/file_1.py'])\n```\n\nIf you want more fine grained information, try the experimental `docstr_coverage.analyze()`\n```python\nfrom docstr_coverage import analyze\ncoverage_report = analyze(['some_dir/file_0.py', 'some_dir/file_1.py'])\ncoverage = coverage_report.count_aggregate().coverage()\n```\n\n## Why Should I Use It\n\n- Thorough documentation is important to help others (and even yourself) understand your code\n- As a developer, improve your code's maintainability for when you need to make updates and fix bugs\n- As a user, instantly know how easy it's going to be to understand a new library \\* If its documentation coverage is low, you may need to figure a lot out for yourself\n\n## Installation\n\n```bash\npip install docstr-coverage\n```\n\nIf you like being on the cutting-edge, and you want all the latest developments, run:\n\n```bash\npip install git+https://github.com/HunterMcGushion/docstr_coverage.git\n```\n\n## Special Thanks\n\nThank you to Alexey \"DataGreed\" Strelkov, and James Harlow for doing all the hard work.\n`docstr-coverage` simply revives and brings their efforts to Python 3. See 'THANKS.txt' for more information.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HunterMcGushion/docstr_coverage",
    "keywords": "docstring coverage documentation audit source code statistics report",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docstr-coverage",
    "package_url": "https://pypi.org/project/docstr-coverage/",
    "platform": null,
    "project_url": "https://pypi.org/project/docstr-coverage/",
    "project_urls": {
      "Homepage": "https://github.com/HunterMcGushion/docstr_coverage"
    },
    "release_url": "https://pypi.org/project/docstr-coverage/2.2.0/",
    "requires_dist": [
      "click",
      "PyYAML",
      "flake8 (==3.9.2) ; extra == 'lint'",
      "black (==21.5b2) ; extra == 'lint'",
      "isort (==5.9.0) ; extra == 'lint'",
      "pytest (==6.2.5) ; extra == 'test'",
      "pytest-mock (==3.4.0) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Utility for examining python source files to ensure proper documentation. Lists missing docstrings, and calculates overall docstring coverage percentage rating.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13209842,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70b9c2820b43368cb25e0f932c5357a87ff7f1b5e5efbc8e080c840783bbf3b1",
        "md5": "659dac31ca0b034ce804932e1365b4bd",
        "sha256": "13b21417fb6b743ac297495c4530687f78acecb9a61cfef7e3ec8f00938e574d"
      },
      "downloads": -1,
      "filename": "docstr_coverage-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "659dac31ca0b034ce804932e1365b4bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 25438,
      "upload_time": "2022-03-17T22:28:00",
      "upload_time_iso_8601": "2022-03-17T22:28:00.347111Z",
      "url": "https://files.pythonhosted.org/packages/70/b9/c2820b43368cb25e0f932c5357a87ff7f1b5e5efbc8e080c840783bbf3b1/docstr_coverage-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4274c7488507c249611859af99aa280ef531a30c44c19b427cff31d28af603d",
        "md5": "1d4bd208d195e5402b8682a5f1532bff",
        "sha256": "3487f3f09f7d2c45e2e67f0a3a6c1cc1960b6449e89f3e8eaca30c37e05eace2"
      },
      "downloads": -1,
      "filename": "docstr-coverage-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1d4bd208d195e5402b8682a5f1532bff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26259,
      "upload_time": "2022-03-17T22:28:02",
      "upload_time_iso_8601": "2022-03-17T22:28:02.552421Z",
      "url": "https://files.pythonhosted.org/packages/c4/27/4c7488507c249611859af99aa280ef531a30c44c19b427cff31d28af603d/docstr-coverage-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}