{
  "info": {
    "author": "Farama Foundation",
    "author_email": "jkterry@farama.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# MiniGrid (formerly gym-minigrid)\n\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://pre-commit.com/) \n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThere are other gridworld Gymnasium environments out there, but this one is\ndesigned to be particularly simple, lightweight and fast. The code has very few\ndependencies, making it less likely to break or fail to install. It loads no\nexternal sprites/textures, and it can run at up to 5000 FPS on a Core i7\nlaptop, which means you can run your experiments faster. A known-working RL\nimplementation can be found [in this repository](https://github.com/lcswillems/torch-rl).\n\nRequirements:\n- Python 3.7 to 3.10\n- Gymnasium v0.26\n- NumPy 1.18+\n- Matplotlib (optional, only needed for display) - 3.0+\n\nPlease use this bibtex if you want to cite this repository in your publications:\n\n```\n@misc{minigrid,\n  author = {Chevalier-Boisvert, Maxime and Willems, Lucas and Pal, Suman},\n  title = {Minimalistic Gridworld Environment for Gymnasium},\n  year = {2018},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/Farama-Foundation/MiniGrid}},\n}\n```\n\nList of publications & submissions using MiniGrid or BabyAI (please open a pull request to add missing entries):\n- [History Compression via Language Models in Reinforcement Learning.](https://proceedings.mlr.press/v162/paischer22a.html) (Johannes Kepler University Linz, PMLR 2022)\n- [Leveraging Approximate Symbolic Models for Reinforcement Learning via Skill Diversity](https://arxiv.org/abs/2202.02886) (Arizona State University, ICML 2022)\n- [How to Stay Curious while avoiding Noisy TVs using Aleatoric Uncertainty Estimation](https://proceedings.mlr.press/v162/mavor-parker22a.html) (University College London, Boston University, ICML 2022)\n- [In a Nutshell, the Human Asked for This: Latent Goals for Following Temporal Specifications](https://openreview.net/pdf?id=rUwm9wCjURV) (Imperial College London, ICLR 2022)\n- [Interesting Object, Curious Agent: Learning Task-Agnostic Exploration](https://arxiv.org/abs/2111.13119) (Meta AI Research, NeurIPS 2021)\n- [Safe Policy Optimization with Local Generalized Linear Function Approximations](https://arxiv.org/abs/2111.04894) (IBM Research, Tsinghua University, NeurIPS 2021)\n- [A Consciousness-Inspired Planning Agent for Model-Based Reinforcement Learning](https://arxiv.org/abs/2106.02097) (Mila, McGill University, NeurIPS 2021)\n- [SPOTTER: Extending Symbolic Planning Operators through Targeted Reinforcement Learning](http://www.ifaamas.org/Proceedings/aamas2021/pdfs/p1118.pdf) (Tufts University, SIFT, AAMAS 2021)\n- [Grid-to-Graph: Flexible Spatial Relational Inductive Biases for Reinforcement Learning](https://arxiv.org/abs/2102.04220) (UCL, AAMAS 2021)\n- [Rank the Episodes: A Simple Approach for Exploration in Procedurally-Generated Environments](https://openreview.net/forum?id=MtEE0CktZht) (Texas A&M University, Kuai Inc., ICLR 2021)\n- [Adversarially Guided Actor-Critic](https://openreview.net/forum?id=_mQp5cr_iNy) (INRIA, Google Brain, ICLR 2021)\n- [Information-theoretic Task Selection for Meta-Reinforcement Learning](https://papers.nips.cc/paper/2020/file/ec3183a7f107d1b8dbb90cb3c01ea7d5-Paper.pdf) (University of Leeds, NeurIPS 2020)\n- [BeBold: Exploration Beyond the Boundary of Explored Regions](https://arxiv.org/pdf/2012.08621.pdf) (UCB, December 2020)\n- [Approximate Information State for Approximate Planning and Reinforcement Learning in Partially Observed Systems](https://arxiv.org/abs/2010.08843) (McGill, October 2020)\n- [Prioritized Level Replay](https://arxiv.org/pdf/2010.03934.pdf) (FAIR, October 2020)\n- [AllenAct: A Framework for Embodied AI Research](https://arxiv.org/pdf/2008.12760.pdf) (Allen Institute for AI, August 2020)\n- [Learning with AMIGO: Adversarially Motivated Intrinsic Goals](https://arxiv.org/pdf/2006.12122.pdf) (MIT, FAIR, ICLR 2021)\n- [RIDE: Rewarding Impact-Driven Exploration for Procedurally-Generated Environments](https://openreview.net/forum?id=rkg-TJBFPB) (FAIR, ICLR 2020)\n- [Learning to Request Guidance in Emergent Communication](https://arxiv.org/pdf/1912.05525.pdf) (University of Amsterdam, Dec 2019)\n- [Working Memory Graphs](https://arxiv.org/abs/1911.07141) (MSR, Nov 2019)\n- [Fast Task-Adaptation for Tasks Labeled Using Natural Language in Reinforcement Learning](https://arxiv.org/pdf/1910.04040.pdf) (Oct 2019, University of Antwerp)\n- [Generalization in Reinforcement Learning with Selective Noise Injection and Information Bottleneck](https://arxiv.org/abs/1910.12911) (MSR, NeurIPS, Oct 2019)\n- [Recurrent Independent Mechanisms](https://arxiv.org/pdf/1909.10893.pdf) (Mila, Sept 2019) \n- [Learning Effective Subgoals with Multi-Task Hierarchical Reinforcement Learning](http://surl.tirl.info/proceedings/SURL-2019_paper_10.pdf) (Tsinghua University, August 2019)\n- [Mastering emergent language: learning to guide in simulated navigation](https://arxiv.org/abs/1908.05135) (University of Amsterdam, Aug 2019)\n- [Transfer Learning by Modeling a Distribution over Policies](https://arxiv.org/abs/1906.03574) (Mila, June 2019)\n- [Reinforcement Learning with Competitive Ensembles of Information-Constrained Primitives](https://arxiv.org/abs/1906.10667) (Mila, June 2019)\n- [Learning distant cause and effect using only local and immediate credit assignment](https://arxiv.org/abs/1905.11589) (Incubator 491, May 2019)\n- [Practical Open-Loop Optimistic Planning](https://arxiv.org/abs/1904.04700) (INRIA, April 2019)\n- [Learning World Graphs to Accelerate Hierarchical Reinforcement Learning](https://arxiv.org/abs/1907.00664) (Salesforce Research, 2019)\n- [Variational State Encoding as Intrinsic Motivation in Reinforcement Learning](https://mila.quebec/wp-content/uploads/2019/05/WebPage.pdf) (Mila, TARL 2019)\n- [Unsupervised Discovery of Decision States Through Intrinsic Control](https://tarl2019.github.io/assets/papers/modhe2019unsupervised.pdf) (Georgia Tech, TARL 2019)\n- [Modeling the Long Term Future in Model-Based Reinforcement Learning](https://openreview.net/forum?id=SkgQBn0cF7) (Mila, ICLR 2019)\n- [Unifying Ensemble Methods for Q-learning via Social Choice Theory](https://arxiv.org/pdf/1902.10646.pdf) (Max Planck Institute, Feb 2019)\n- [Planning Beyond The Sensing Horizon Using a Learned Context](https://personalrobotics.cs.washington.edu/workshops/mlmp2018/assets/docs/18_CameraReadySubmission.pdf) (MLMP@IROS, 2018)\n- [Guiding Policies with Language via Meta-Learning](https://arxiv.org/abs/1811.07882) (UC Berkeley, Nov 2018)\n- [On the Complexity of Exploration in Goal-Driven Navigation](https://arxiv.org/abs/1811.06889) (CMU, NeurIPS, Nov 2018)\n- [Transfer and Exploration via the Information Bottleneck](https://openreview.net/forum?id=rJg8yhAqKm) (Mila, Nov 2018)\n- [Creating safer reward functions for reinforcement learning agents in the gridworld](https://gupea.ub.gu.se/bitstream/2077/62445/1/gupea_2077_62445_1.pdf) (University of Gothenburg, 2018)\n- [BabyAI: First Steps Towards Grounded Language Learning With a Human In the Loop](https://arxiv.org/abs/1810.08272) (Mila, ICLR, Oct 2018)\n\nThis environment has been built as part of work done at [Mila](https://mila.quebec). The Dynamic obstacles environment has been added as part of work done at [IAS in TU Darmstadt](https://www.ias.informatik.tu-darmstadt.de/) and the University of Genoa for mobile robot navigation with dynamic obstacles.\n\n## Installation\n\nThere is now a [pip package](https://pypi.org/project/minigrid/) available, which is updated periodically:\n\n```\npip install minigrid\n```\n\nAlternatively, to get the latest version of MiniGrid, you can clone this repository and install the dependencies with `pip3`:\n\n```\ngit clone https://github.com/Farama-Foundation/MiniGrid\ncd MiniGrid\npip install -e .\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Farama-Foundation/MiniGrid",
    "keywords": "memory,environment,agent,rl,gymnasium",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minigrid",
    "package_url": "https://pypi.org/project/minigrid/",
    "platform": null,
    "project_url": "https://pypi.org/project/minigrid/",
    "project_urls": {
      "Homepage": "https://github.com/Farama-Foundation/MiniGrid"
    },
    "release_url": "https://pypi.org/project/minigrid/2.0.0/",
    "requires_dist": [
      "gymnasium (>=0.26)",
      "numpy (>=1.18.0)",
      "matplotlib (>=3.0)",
      "pytest (==7.0.1) ; extra == 'testing'"
    ],
    "requires_python": ">=3.7",
    "summary": "Minimalistic gridworld reinforcement learning environments",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17469512,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9876612842099d5a5e1afbc653b4f778520437ada9cbdce82f048dc1a3d9f8ec",
        "md5": "1168b31361b299ea18621dde86fbade7",
        "sha256": "c10e10ffe4bb771960dc3b6ce623b2aa7bdf574e363bf58280dfa27268861e22"
      },
      "downloads": -1,
      "filename": "MiniGrid-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1168b31361b299ea18621dde86fbade7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 78750,
      "upload_time": "2022-09-28T17:42:45",
      "upload_time_iso_8601": "2022-09-28T17:42:45.635571Z",
      "url": "https://files.pythonhosted.org/packages/98/76/612842099d5a5e1afbc653b4f778520437ada9cbdce82f048dc1a3d9f8ec/MiniGrid-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ed373e032da9b07bd81ef93f745f010c3165c855dc62fc2a763b3654590ed66",
        "md5": "809d92603d902652b8ff27f0f819f5a1",
        "sha256": "a42495648eb6904e5bb70d566c2414f859866edb224c0d7f20ab9c090a110785"
      },
      "downloads": -1,
      "filename": "MiniGrid-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "809d92603d902652b8ff27f0f819f5a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 59537,
      "upload_time": "2022-09-28T17:42:47",
      "upload_time_iso_8601": "2022-09-28T17:42:47.009863Z",
      "url": "https://files.pythonhosted.org/packages/9e/d3/73e032da9b07bd81ef93f745f010c3165c855dc62fc2a763b3654590ed66/MiniGrid-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}