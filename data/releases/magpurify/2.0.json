{
  "info": {
    "author": "Stephen Nayfach, Antonio Pedro Camargo",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# MAGpurify\n\nThis package uses a combination of different features and algorithms to identify contamination in metagenome-assembled genomes (MAGs). Contamination is defined as contigs that originated from a different species relative to the dominant organism present in the MAG.\n\nEach module in the software package was designed to be highly specific. This means that not all contamination (contigs from other species) will be removed, but very few contigs will be incorrectly removed. Feel free to modify the default parameters for more sensitive detection of contamination.\n\n## Installation\n\nThere is two ways of installing MAGpurify:\n\n- Using conda:\n```\nconda install -c bioconda magpurify\n```\n\n- Using pip:\n```\npip install magpurify\n```\n\nIf you install MAGpurify using conda, all dependencies will be installed automatically. However, if you choose to install it through pip, you will need to install some required third-party software:\n- [BLAST](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download)\n- [Prodigal](https://github.com/hyattpd/Prodigal)\n- [HMMER](http://hmmer.org/download.html)\n- [LAST](http://last.cbrc.jp)\n- [Mash](https://github.com/marbl/Mash/releases)\n- [CoverM](https://github.com/wwood/CoverM/releases)\n\n### MAGpurify database\n\nWhichever method you choose to install MAGpurify you will need to download a database in order to use some of its modules (see the [ Dependency on external data](#dependency-on-external-data) section):\n\n- Download the reference database: [MAGpurify-db-v1.0.tar.bz2](https://zenodo.org/record/3688811/files/MAGpurify-db-v1.0.tar.bz2?download=1)\n\n- Unpack the database:\n```\ntar -jxvf MAGpurify-db-v1.0.tar.bz2\n```\n\n- Update your environment:\n```\nexport MAGPURIFYDB=/path/to/MAGpurify-db-v1.0\n```\nIf you don't want to put the database into your PATH, you can still use it through the `--db` parameter of the `phylo-markers`, `clade-markers` and `known-contam` modules.\n\nThe MAGpurify database is hosted in Zenodo and can be referenced through a Digital Object Identifier:\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3688811.svg)](https://doi.org/10.5281/zenodo.3688811)\n\n## A quick overview\n\nThe program is broken down into several modules:\n\n```\n$ magpurify\n\nusage: magpurify [-h] [--version]\n                 {phylo-markers,clade-markers,conspecific,tetra-freq,gc-content,coverage,known-contam,clean-bin}\n                 ...\n\nIdentify and remove incorrectly binned contigs from metagenome-assembled\ngenomes.\n\npositional arguments:\n  {phylo-markers,clade-markers,conspecific,tetra-freq,gc-content,coverage,known-contam,clean-bin}\n    phylo-markers       find taxonomic discordant contigs using a database of\n                        phylogenetic marker genes.\n    clade-markers       find taxonomic discordant contigs using a database of\n                        clade-specific marker genes.\n    conspecific         find contigs that fail to align to closely related\n                        genomes.\n    tetra-freq          find contigs with outlier tetranucleotide frequency.\n    gc-content          find contigs with outlier GC content.\n    coverage            find contigs with outlier coverage profile.\n    known-contam        find contigs that match a database of known\n                        contaminants.\n    clean-bin           remove putative contaminant contigs from bin.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n\n```\n\nMAGpurify modules are executed sequentially, usually using the following command structure:\n\n```\n$ magpurify <module> <input mag> <output directory>\n```\n\nAfter the desired modules have been executed, the flagged contigs are removed:\n\n```\n$ magpurify clean-bin <input mag> <output directory> <output mag>\n```\n\nIt's as simple as that!\n\n## Dependency on external data\n\n`tetra-freq` and `gc-content` don't rely on external data. The `phylo-markers`, `clade-markers` and `known-contam` modules can be run using the standard MAGpurify database. The `conspecific` module requires that you build your own database. The `coverage` module requires input BAM files.\n\n## An example using the default database\n\nThe next few lines will show you how to run the software using a single MAG included with the software.\n\nFirst, run the individual modules to predict contamination in the example `example/test.fna` file and store the results in `example/output`:\n\n```\n$ magpurify phylo-markers example/test.fna example/output\n$ magpurify clade-markers example/test.fna example/output\n$ magpurify tetra-freq example/test.fna example/output\n$ magpurify gc-content example/test.fna example/output\n$ magpurify known-contam example/test.fna example/output\n```\n\nThe output of each module is stored in the output directory:\n```\n$ ls example/output\n\nclade-markers gc-content known-contam phylo-markers tetra-freq\n```\n\nNow remove the contamintion from the bin with `clean-bin`:\n\n```\n$ magpurify clean-bin example/test.fna example/output example/test_cleaned.fna\n\n• Reading genome bin\n  genome length: 704 contigs, 4144.3 Kbp\n\n• Reading flagged contigs\n  phylo-markers: 1 contigs, 17.18 Kbp\n  clade-markers: 3 contigs, 17.1 Kbp\n  conspecific: no output file found\n  tetra-freq: 0 contigs, 0.0 Kbp\n  gc-content: 0 contigs, 0.0 Kbp\n  coverage: no output file found\n  known-contam: 0 contigs, 0.0 Kbp\n\n• Removing flagged contigs\n  removed: 4 contigs, 34.28 Kbp\n  remains: 700 contigs, 4110.03 Kbp\n  cleaned bin: example/test_cleaned.fna\n```\n\nIn summary, 2 of the 7 modules predicted at least one contaminant and the cleaned bin was written to `example/output/cleaned_bin.fna`\n\n## An example using the `conspecific` module\n\nTo run the `conspecific` module, you need to build your own reference database using Mash. We've provided some dummy files to illustrate this (but you shouldn't use them with your data!):\n\n```\n$ mash sketch -l example/ref_genomes.list -o example/ref_genomes\n```\n\nThis command will create a Mash sketch of the genomes listed in `example/ref_genomes.list` that are located in `example/ref_genomes`. The sketch will be written to `example/ref_genomes.msh`\n\nNow you can run the conspecific module:\n\n```\n$ magpurify conspecific example/test.fna example/output example/ref_genomes.msh\n\n• Finding conspecific genomes in database\n  25 genomes within 0.05 mash-dist\n  list of genomes: example/output/conspecific/conspecific.list\n  mash output: example/output/conspecific/mash.dist\n\n• Performing pairwise alignment of contigs in bin to database genomes\n  total alignments: 12125\n\n• Summarizing alignments\n  contig features: example/output/conspecific/contig_hits.tsv\n\n• Identifying contigs with no conspecific alignments\n  238 flagged contigs, 450.02 Kbp\n  flagged contigs: example/output/conspecific/flagged_contigs\n```\n\nSo, the conspecific module alone identified 238 putative contaminants! This illustrates that this module can be very sensitive when your MAG is similar to closely related genomes in your reference database… or to other MAGs!\n\n## An example using the `coverage` module\n\nTo run the `coverage` module, you need to input a sorted BAM file containing reads mapped to the MAG (or the original metagenome, as long as the contig name is unchanged). You can also input multiple BAM files and MAGpurify will pick the one with the greatest average contig coverage.\n\n```\n$ magpurify coverage example/test.fna example/output BAM/sample_1.bam BAM/sample_2.bam BAM/sample_3.bam\n\n• Computing contig coverage\n\n• Identifying outlier contigs\n\n• Sample being used for outlier detection: sample_2\n  2 flagged contigs: example/output/coverage/flagged_contigs\n```\n\n## Details on the individual modules\n\n### phylo-markers\nThis module works by taxonomically annotating your contigs based on a database of phylogenetic marker genes from the PhyEco database and identifying taxonomically discordant contigs.\n\n### clade-markers\nThis module works in a very similar way to `phylo-markers`, but instead uses clade-specific markers from the MetaPhlAn 2 database for taxonomic annotation.\n\n### conspecific\nThe logic behind this module is that strains of the same species should have similarity along most of the genome. Therefore, this module works by first finding strains of the same species, and then performing pairwise alignment of contigs. Contaminants are identified which do not align at all between genomes.\n\n### tetra-freq\nThis module works by identifying contigs with outlier nucleotide composition based on tetranucleotide frequencies (TNF). In order to reduce TNF down to a single dimension, principal component analysis (PCA) is performed and the first principal component is used.\n\n### gc-content\nThis module works by identifying contigs with outlier nucleotide composition based on GC content.\n\n### coverage\nThis module works by identifying contigs with outlier coverage based on read mapping information.\n\n### known-contam\nThis module works by identifying contigs that match a database of known contaminants. So far, the human genome and phiX genome are the only ones in the database.\n\n## Citation\n\nIf this code is useful, please cite:\n\n> Nayfach, Stephen, et al. \"[New insights from uncultivated genomes of the global human gut microbiome.](http://dx.doi.org/10.1038/s41586-019-1058-x)\" *Nature* 568.7753 (2019): 505-510.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snayfach/MAGpurify",
    "keywords": "bioinformatics,metagenomics,metagenome-assembled genomes",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "magpurify",
    "package_url": "https://pypi.org/project/magpurify/",
    "platform": "",
    "project_url": "https://pypi.org/project/magpurify/",
    "project_urls": {
      "Homepage": "https://github.com/snayfach/MAGpurify"
    },
    "release_url": "https://pypi.org/project/magpurify/2.0/",
    "requires_dist": [
      "biopython",
      "numpy",
      "pandas",
      "sklearn"
    ],
    "requires_python": ">=3.6",
    "summary": "Identify and remove incorrectly binned contigs from metagenome-assembled genomes.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6832399,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2b89eab84c8b5476fd22db6fa435f3d914a76f1e40b8f2d7214f0f8452e17df",
        "md5": "bbbdcea60e3e863ccd461b31ce04e378",
        "sha256": "1942e57e365e164ccc962246db7ccb4f0512d637fd7e950b0303fffa41ded11d"
      },
      "downloads": -1,
      "filename": "magpurify-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbbdcea60e3e863ccd461b31ce04e378",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 41362,
      "upload_time": "2020-02-28T06:51:43",
      "upload_time_iso_8601": "2020-02-28T06:51:43.293047Z",
      "url": "https://files.pythonhosted.org/packages/b2/b8/9eab84c8b5476fd22db6fa435f3d914a76f1e40b8f2d7214f0f8452e17df/magpurify-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94d6c72965d4bc72abce1598e012f5164c5de238c5d6d2f0d149c47b9323d102",
        "md5": "fd201758488e488c76c43a8f96cf8555",
        "sha256": "788e10131ba8422de57a28b32b9bd0526c82c9ca42662f4ce815ac5e300b72da"
      },
      "downloads": -1,
      "filename": "magpurify-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fd201758488e488c76c43a8f96cf8555",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21735,
      "upload_time": "2020-02-28T06:51:45",
      "upload_time_iso_8601": "2020-02-28T06:51:45.741471Z",
      "url": "https://files.pythonhosted.org/packages/94/d6/c72965d4bc72abce1598e012f5164c5de238c5d6d2f0d149c47b9323d102/magpurify-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}