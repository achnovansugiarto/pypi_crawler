{
  "info": {
    "author": "Michael Rooney",
    "author_email": "mrooney.mintapi@rowk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mintapi\n\n[![Build Status](https://github.com/mintapi/mintapi/actions/workflows/ci.yml/badge.svg)](https://github.com/mintapi/mintapi/actions)\n[![PyPI Version](https://img.shields.io/pypi/v/mintapi)](https://pypi.org/project/mintapi/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\nAn unofficial screen-scraping API for Mint.com.\n\n## IMPORTANT: mintapi 2.0 vs 1.x and breaking changes\n\nWe recently released 2.0, which supports (and only supports) the new Mint UI:\n\n * If your account has the new UI with the nav on the *left*, you'll need to install at least 2.0: `pip install mintapi>=2.0`\n * If your account still has the original UI with the nav on *top*, to use 2.0, you will need to specify `--beta` in your command-line options or submit `beta=True` when initializing the class.  Otherwise, please install the latest 1.x release: `pip install mintapi<2.0`\n\n**Please note** that due to data changes on the Mint.com side as well as various new features and changes on the mintapi side, *there are several breaking changes in 2.0*. Please see [the CHANGELOG](https://github.com/mintapi/mintapi/blob/main/CHANGELOG.md#20) for details.\n\n## Community\n\nPlease [join us on Discord](https://discord.gg/YjJEuJRAu9) to get help or just chat with fellow mintapi users :)\n\n## Installation\n\nEnsure you have Python 3 and pip (`easy_install pip`) and then:\n\n```shell\npip install mintapi\n```\n\n`mintapi` scrapes Mint.com by navigating a Chrome browser (or Chromium) just as a human would. Once logged in, the API allows programatic access to various Mint REST APIs. Selenium/WebDriver is used to accomplish this, and specifically, ChromeDriver under the hood. `mintapi` will download the latest stable release of chromedriver, unless --use_chromedriver_on_path is given. **NOTE: You must have [Chrome](https://www.google.com/chrome/) or [Chromium](https://www.chromium.org/getting-involved/dev-channel/) installed, on the `stable` track, and be up-to-date!** If you run into a `SessionNotCreatedException` about \"ChromeDriver only supports Chrome version XX\", you need to [update Chrome](https://support.google.com/chrome/answer/95414).\n\n## Usage\n\n### From the Command Line\n\nFrom the command line, the most automated invocation will be:\n\n    mintapi --keyring --headless you@example.com\n\nThis will store your credentials securely in your system keyring, and use a\nheadless (invisible) browser to log in and grab the account data. If this triggers\nan MFA prompt, you'll be prompted on the command line for your code, which by default\ngoes to SMS unless you specify `--mfa-method=email`. This will also persist a browser\nsession in $HOME/.mintapi/session to avoid an MFA in the future, unless you specify `--session-path=None`.\n\nIf you wish to simplify the number of arguments passed in the command line, you can use a configuration file by specifying `--config-file`.  For arguments such as `--transactions`, you can add a line in your config file that says `transactions`.  For other arguments that have input, such as `--start-date`, you would add a line such as `start-date=10/01/21`.  There are two exceptions to what you can add to the config file: email and password.  Since these arguments do not include `--`, you cannot add them to the config file.\n\n### Linux Distributions (including Raspberry Pi OS)\n\nIf you're running mintapi in a server environment on an automatic schedule, consider running mintapi in headless mode if you don't need to see the login workflow. In addition, you'll want to use your distribution's package manager to install chromium and chromedriver. Make sure your distribution is up-to-date and then install/update Chromium (debian-family example): `apt install chromium-browser chromium-chromedriver`. Then use the option `use_chromedriver_on_path` either through the CLI or the python api so that mintapi doesn't try to find a matching chromedriver.\n\nIf you need to download the chromedriver manually, be sure to get the version that matches your chrome version and make the chromedriver available to your python interpreter either by putting the chromedriver in your python working directory or inside your `PATH` as described in the [python selenium documentation](https://www.selenium.dev/selenium/docs/api/py/index.html#drivers).\n\n### General Automation Scenarios\n\nWhen running this inside of a cron job or other long-term automation scripts, it might be helpful to specify chrome and chromedriver executables so as not to conflict with other chrome versions you may have. Selenium by default just gets these from your `PATH` environment variable, so customizing your environment can force a deterministic behavior from mintapi. To use a different browser besides Chrome or Chromium, see the [python api](#from-python). Below are two examples.\n\n#### Unix Environment\n\nIf you wanted to make sure that mintapi used the chromium executable in my /usr/bin directory when executing a cron job, you could write the following cron line:\n\n```cron\n0 7 * * FRI PATH=/usr/bin:$PATH mintapi --headless john@example.com my_password\n```\n\nwhere prepending the /usr/bin path to path will make those binaries found first. This will only affect the cron job and will not change the environment for any other process.\n\n#### Windows Environment\n\nYou can do a similar thing in windows by executing the following in Powershell.\n\n```powershell\n$ENV:PATH = \"C:\\Program Files\\Google\\Chrome;$ENV:PATH\"\nmintapi --headless john@example.com my_password\n```\n\n#### Docker Image\n\nYou can also use the docker image to help manage your environment so you don't have to worry about chrome or chromedriver versions. There are a few caveats:\n1. Headless mode is recommended. GUI works but introduces the need to configure an X11 server which varies with setup. Google is your friend.\n2. Almost always use the flag `--use-chromedriver-on-path` as the chrome and chromedriver built into the docker image already match and getting the latest will break the image.\n3. If you want to persist credentials or your chrome session, you'll need to do some volume mounting.\n\nTo use the image:\n```\ndocker run --rm --shm-size=2g ghcr.io/mintapi/mintapi mintapi john@example.com my_password --headless --use-chromedriver-on-path\n```\n\n#### AWS Lambda Environment\n\nAWS Lambda may need a [specific chrome driver with specific options](https://robertorocha.info/setting-up-a-selenium-web-scraper-on-aws-lambda-with-python/). You can initialize Mint with your own pre-configured headless serverless chrome through a constructor:\n\n\n```python\ndriver = initialize_serverless_chrome_driver(...)\nmint = mintapi.Mint(..., driver=driver)\n...\n```\n\n\n### MFA Authentication Methods\n\nAs of v2.0, `mfa_method` is only required if your login flow presents you with the option to select which Multifactor Authentication Method you wish to use, typically as a result of your account configured to accept different methods.  \n\nIf `mintapi` detects that your Mint account uses IMAP and your email host provides IMAP access, you can specify your IMAP login details.  This will automate the retrieval of the MFA code from your email and entering it into Mint.  If you use IMAP in conjunction with `keyring`, then you can store your IMAP password (`imap-password`) in keyring.  To do so, simply omit `imap-password` and you will initially be prompted for the password associated with your IMAP account.  Then, on subsequent uses of your IMAP account, you will not have to specify your password.\n\nIf `mfa-method` is soft-token then you must also pass your `mfa-token`. The `mfa-token` can be obtained by going to [your mint.com settings](https://mint.intuit.com/settings.event?filter=all) and clicking on 'Intuit Account'. From there go to *Sign In & Security* -> *Two-step verification*. From there, enable the top option however you wish (either text or email is fine). After that, start the process to enable the *Authenticator app* option and when you get the part where you see the QR code, **copy the manual setup code** that appears next to it. Careful where you store this as it allows anyone to generate TOTP codes. This is the token that you will pass to `mfa-token` in either the python api or from the command line.\n\nWhile Mint supports authentication via Voice, `mintapi` does not currently support this option.  Compatability with this method will be added in a later version.\n\n### Multi-Data Support\n\nAs of v2.0, mintapi supports returning multiple types of data in one call, such as: `mintapi --accounts --budgets --transactions`.  When exporting multiple data types, you can either send it directly to `stdout` or you can export to a file via `--filename`.  mintapi will create a file for each type of data, with a suffix based on the format.  For example, if you run `mintapi --accounts --transactions --filename=current --format=csv`, then you will receive two files: `current_account.csv` and `current_transaction.csv`.  The following table outlines the option selected and its corresponding suffix:\n\n| Option       | Suffix       |\n| -----------  | -----------  |\n| accounts     | account      |\n| bills        | bills        |\n| budgets      | budget       |\n| transactions | transaction  |\n| trends       | trends       |\n| categories   | category     |\n| investments  | investment   |\n| net-worth    | net_worth    |\n| credit-score | credit_score |\n| credit-report| credit_report|\n\n### Financial Data Trends\n\nMint supports providing some analysis of your financial data based on different types of \"trends\".  Mint's requirements for accessing this data using mintapi is a bit more complex than the other endpoints.\n\n| Parameter         | Data Type          | Description  |\n| ----------------  | ------------------ | -----------  |\n| report_type       | ReportView.Options | The type of report to generate. |\n| date_filter       | DateFilter.Options | The date window to analyze your trends. |\n| start_date        | Optional[str]      | An optional beginning date (mm-dd-yy) to your trend analysis. |\n| end_date          | Optional[str]      | An optional ending date (mm-dd-yy) to your trend analysis. |\n| category_ids      | List[str]          | An optional list of category IDs to include in your trend analysis. |\n| tag_ids           | List[str]          | An optional list of tag IDs to include in your trend analysis. |\n| descriptions      | List[str]          | An optional list of descriptions to include in your trend analysis. |\n| account_ids       | List[str]          | An optional list of account IDs to include in your trend analysis. |\n| match_all_filters | boolean            | Whether to match all supplied filters (True) or at least one (False) |\n| limit             | int                | The page size of results. |\n| offset            | int                | The starting record of your results. |\n\n#### Report Type\n\nAs mentioned above, the Report Type is the type of report for which to generate trend analysis.  The supplied value must be one of the following enum values:\n\n| Enum Value | Description |\n| ---------- | ----------- |\n| 1          | Spending Over Time |\n| 2          | Spending by Category |\n| 3          | Spending by Merchant |\n| 4          | Spending by Tag |\n| 5          | Income Over Time |\n| 6          | Income by Category |\n| 7          | Income by Merchant |\n| 8          | Income by Tag |\n| 9          | Assets by Type |\n| 10         | Assets Over Time |\n| 11         | Assets by Account |\n| 12         | Debts Over Time |\n| 13         | Debts by Type |\n| 14         | Debts by Account |\n| 15         | Net Worth Over Time |\n| 16         | Net Income Over Time |\n\n### Financial Data Transactions\n\nIf you want to provide a more granular filtering of your financial data transactions, you can select from a variety of search filters that are sent to Mint. \n\n| Parameter         | Data Type          | Description  |\n| ----------------  | ------------------ | -----------  |\n| date_filter       | DateFilter.Options | The date window for which to filter your transactions. |\n| start_date        | Optional[str]      | An optional beginning date (mm-dd-yy) to your transaction filtering. |\n| end_date          | Optional[str]      | An optional ending date (mm-dd-yy) to your transaction filtering. |\n| category_ids      | List[str]          | An optional list of category IDs of transactions to include. |\n| tag_ids           | List[str]          | An optional list of tag IDs of transactions to include. |\n| descriptions      | List[str]          | An optional list of descriptions of transactions to include. |\n| account_ids       | List[str]          | An optional list of account IDs of transactions to include. |\n| match_all_filters | boolean            | Whether to match all supplied filters (True) or at least one (False) |\n| include_investment | boolean           | Whether to include those transactions that are associated with an Investment Account. |\n| remove_pending    | boolean            | Whether to remove those transactions that are still Pending. | \n| limit             | int                | The page size of results. |\n| offset            | int                | The starting record of your results. |\n\n### Date Filters\n\nAs mentioned above, the Date Filter is the date window for which to generate your trend analysis or for which to search transactions.  The supplied value must be one of the following enum values:\n\n| Enum Value | Description |\n| ---------- | ----------- |\n| 1          | Last 7 Days |\n| 2          | Last 14 Days |\n| 3          | This Month   |\n| 4          | Last Month   |\n| 5          | Last 3 Months |\n| 6          | Last 6 Months |\n| 7          | Last 7 Months |\n| 8          | This Year     |\n| 9          | Last Year     |\n| 10         | All Time      |\n| 11         | Custom        |\n\nIf you select a Custom Date Filter, then `start_date` and `end_date` are required fields.  Similarly, if you wish to use `start_date` and `end_date`, Custom Date Filter must be used.\n\n### From Python\n\nFrom python, instantiate the Mint class (from the mintapi package) and you can\nmake calls to retrieve account/budget information.  We recommend using the\n`keyring` library for persisting credentials.\n\n```python\n  import mintapi\n  mint = mintapi.Mint(\n    'your_email@web.com',  # Email used to log in to Mint\n    'password',  # Your password used to log in to mint\n    # Optional parameters\n    mfa_method='sms',  # See MFA Methods section\n                       # Can be 'sms' (default), 'email', or 'soft-token'.\n                       # if mintapi detects an MFA request, it will trigger the requested method\n                       # and prompt on the command line.\n    mfa_input_callback=None,  # see MFA Methods section\n                              # can be used with any mfa_method\n                              # A callback accepting a single argument (the prompt)\n                              # which returns the user-inputted 2FA code. By default\n                              # the default Python `input` function is used.\n    mfa_token=None,   # see MFA Methods section\n                      # used with mfa_method='soft-token'\n                      # the token that is used to generate the totp\n    intuit_account=None, # account name when multiple accounts are registered with this email.\n    headless=False,  # Whether the chromedriver should work without opening a\n                     # visible window (useful for server-side deployments)\n                         # None will use the default account.\n    session_path=None, # Directory that the Chrome persistent session will be written/read from.\n                       # To avoid the 2FA code being asked for multiple times, you can either set\n                       # this parameter or log in by hand in Chrome under the same user this runs\n                       # as.\n    imap_account=None, # account name used to log in to your IMAP server\n    imap_password=None, # account password used to log in to your IMAP server\n    imap_server=None,  # IMAP server host name\n    imap_folder='INBOX',  # IMAP folder that receives MFA email\n    wait_for_sync=False,  # do not wait for accounts to sync\n    wait_for_sync_timeout=300,  # number of seconds to wait for sync\n    fail_if_stale=True, # True will raise an exception if Mint is unable to refresh your data.\n\tuse_chromedriver_on_path=False,  # True will use a system provided chromedriver binary that\n\t                                 # is on the PATH (instead of downloading the latest version)\n    driver=None        # pre-configured driver. If None, Mint will initialize the WebDriver.\n  )\n\n  # Get account information\n  mint.get_account_data()\n\n  # Get budget information\n  mint.get_budget_data()\n\n  # Get transactions\n  mint.get_transaction_data() # as pandas dataframe\n\n  # Get transactions for a specific account\n  accounts = mint.get_account_data()\n  for account in accounts:\n    mint.get_transaction_data(id=account[\"id\"])\n\n  # Get net worth\n  mint.get_net_worth_data()\n\n  # Get credit score\n  mint.get_credit_score_data()\n\n  # Get bills\n  mint.get_bills()\n\n  # Get investments (holdings and transactions)\n  mint.get_investment_data()\n\n  # Close session and exit cleanly from selenium/chromedriver\n  mint.close()\n\n  # Initiate an account refresh\n  mint.initiate_account_refresh()\n\n  # you can also use mintapi's login in workflow with your own selenium webdriver\n  # this will allow for more custom selenium driver setups\n  # one caveat is that it must be based on seleniumrequests currently\n  # seleniumrequests has most browsers already\n  # it also has mixins for any browsers it doesn't have so the sky is the limit!\n  from seleniumrequests import Firefox\n  mint = mintapi.Mint()\n  mint.driver = Firefox()\n  mint.status_message, mint.token = mintapi.sign_in(\n    email, password, mint.driver, mfa_method=None, mfa_token=None,\n    mfa_input_callback=None, intuit_account=None, wait_for_sync=True,\n    wait_for_sync_timeout=5 * 60,\n    imap_account=None, imap_password=None,\n    imap_server=None, imap_folder=\"INBOX\",\n  )\n  # now you can do all the normal api calls\n  # ex:\n  mint.get_transaction_data()\n```\n\n---\nRun it as a sub-process from your favorite language; `pip install mintapi` creates a binary in your $PATH. From the command-line, the output is JSON:\n\n```shell\n    usage: mintapi [-h] [--session-path [SESSION_PATH]] [--accounts] [--investments]\n                   [--beta] [--budgets | --budget_hist] [--net-worth]\n                   [--credit-score] [--credit-report]\n                   [--exclude-inquiries] [--exclude-accounts] [--exclude-utilization]\n                   [--start-date [START_DATE]] [--end-date [END_DATE]]\n                   [--limit] [--include-investment] [--show-pending]\n                   [--format] [--filename FILENAME] [--keyring] [--headless]\n                   [--mfa-method {sms,email,soft-token}]\n                   [--categories] [--attention]\n                   [--transactions] [--transaction-date-filter]\n                   [--trends] [--trend-report-type] [--trend-date-filter]\n                   email [password]\n\n    positional arguments:\n      email                 The e-mail address for your Mint.com account (required)\n      password              The password for your Mint.com account (if not supplied, --keyring must be provided)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --accounts            Retrieve account information (default if nothing else\n                            is specified)\n      --session-path [SESSION_PATH]\n                            Directory to save browser session, including cookies. Used to prevent repeated\n                            MFA prompts. Defaults to $HOME/.mintapi/session. Set to None to use a temporary\n                            profile.\n      --beta                Use the beta version of Mint\n      --budgets             Retrieve budget information for current month\n      --budget_hist         Retrieve historical budget information (past 12 months)\n      --categories          Retrieve your configured Mint categories\n      --config-file, -c     File used to store arguments\n      --credit-score        Retrieve credit score\n      --credit-report       Retrieve full credit report & history\n      --exclude-inquiries   Used in conjunction with --credit-report, ignores credit inquiry data.\n      --exclude-accounts    Used in conjunction with --credit-report, ignores credit account data.\n      --exclude-utilization Used in conjunction with --credit-report, ignores credit utilization data.\n      --net-worth           Retrieve net worth information\n      --transactions, -t    Retrieve transactions\n      --transaction-date-filter The date window for which to filter your transactions.  Default is All Time.\n      --trends              Retrieve trend data related to your financial information\n      --trend-report-type   The type of report for which to generate trend analysis.  Default is Spending Over Time.\n      --trend-date-filter   The date window for which to generate your trend analysis.  Default is This Month.\n      --start-date [START_DATE]\n                            Earliest date for which to retrieve transactions.\n                            Used with --transactions. Format: mm/dd/yy\n      --end-date [END_DATE]\n                            Latest date for which to retrieve transactions.\n                            Used with --transactions. Format: mm/dd/yy\n      --investments         Retrieve data related to your investments, whether they be retirement or         personal stock purchases\n      --include-investment  Used with --transactions\n      --limit               Number of records to include from the API.  Default is 5000.\n      --show-pending        Retrieve pending transactions.\n                            Used with --transactions\n      --fail-if-stale       At login, Mint attempts to refresh your data.  If you wish to exit when the sync fails, use this option.\n      --filename FILENAME, -f FILENAME\n                            write results to file. If no file is specified, then data is written to stdout.  Do not specify the file extension as it is determined based on the selection of `--format`.\n      --format              Determines the output format of the data, either `csv` or         `json`.  The default value is `json`.  If no `filename` is specified, then this determines the `stdout` format.  Otherwise, if a `filename` is specified, then this determines the file extension.\n      --keyring             Use OS keyring for storing password information\n      --headless            Whether to execute chromedriver with no visible\n                            window.\n\t  --use-chromedriver-on-path\n\t  \t\t\t\t\t\tWhether to use the chromedriver on PATH, instead of\n              \t\t\t  \tdownloading a local copy.\n      --mfa-method {sms,email,soft-token}\n                            The MFA method to automate.\n      --mfa-token      The base32 encoded MFA token.\n      --imap-account IMAP_ACCOUNT\n      --imap-password IMAP_PASSWORD\n      --imap-server IMAP_SERVER_HOSTNAME\n      --imap-folder IMAP_FOLDER\n                            Default is INBOX\n      --imap-test           Test access to IMAP server\n      --no_wait_for_sync    Do not wait for accounts to sync\n      --wait_for_sync_timeout\n                            Number of seconds to wait for sync (default is 300)\n      --attention.          Get notice if there are any accounts that need attention\n\n\n    >>> mintapi --keyring email@example.com\n    [\n      {\n        \"accountName\": \"Chase Checking\",\n        \"lastUpdatedInString\": \"25 minutes\",\n        \"accountType\": \"bank\",\n        \"currentBalance\": 100.12,\n        ...\n      },\n      ...\n    ]\n```\n\n### Special Considerations\n\n#### Email\\Account Access\n\nBecause of the inter-connected nature of Intuit's products, when signing in to Mint for one account, you may see accounts associated with Intuit products other than Mint.  If you do have multiple Intuit accounts, you should be aware that if one email is associated with two different usernames (and multiple Intuit products, such as TurboTax or Quickbooks), you may receive a prompt for Multifactor Authentication, even with a saved session.  One possible solution is separating the two accounts to use two different emails.  For many email clients, you can route different email addresses to the same account by using a suffix.  For example, you could have email addresses \"myaccount+mint@gmail.com\" and \"myaccount+quickbooks@gmail.com\" and receive emails for both in the \"myaccount@gmail.com\" inbox.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mintapi/mintapi",
    "keywords": "",
    "license": "The MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mintapi",
    "package_url": "https://pypi.org/project/mintapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/mintapi/",
    "project_urls": {
      "Homepage": "https://github.com/mintapi/mintapi"
    },
    "release_url": "https://pypi.org/project/mintapi/2.8/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a screen-scraping API for Mint.com",
    "version": "2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17497767,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3d1e969cefac9c289fd94f0aa886915a323122a55550f35567ed194b7797d9c",
        "md5": "353ed83a4f3b91adbdf1eb7ba5c18eb1",
        "sha256": "02cc52ca59017a9003a63faef3d667ec255130d1a3dd1ac969471b6d02f74011"
      },
      "downloads": -1,
      "filename": "mintapi-2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "353ed83a4f3b91adbdf1eb7ba5c18eb1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 35379,
      "upload_time": "2022-09-28T20:23:19",
      "upload_time_iso_8601": "2022-09-28T20:23:19.401583Z",
      "url": "https://files.pythonhosted.org/packages/e3/d1/e969cefac9c289fd94f0aa886915a323122a55550f35567ed194b7797d9c/mintapi-2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}