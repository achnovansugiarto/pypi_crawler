{
  "info": {
    "author": "Michael Rooney",
    "author_email": "mrooney.mintapi@rowk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mintapi\n\n[![Build Status](https://github.com/mintapi/mintapi/actions/workflows/ci.yml/badge.svg)](https://github.com/mintapi/mintapi/actions)\n[![PyPI Version](https://img.shields.io/pypi/v/mintapi)](https://pypi.org/project/mintapi/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\nAn unofficial screen-scraping API for Mint.com.\n\n`mintapi` scrapes Mint.com by using Selenium/WebDriver to navigate a browser.\nOnce logged in,\n`mintapi` allows programatic, automated access to Mint's UI.\n## IMPORTANT: mintapi 2.0 vs 1.x and breaking changes\n\nWe recently released 2.0, which supports (and only supports) the new Mint UI:\n\n * If your account has the new UI with the nav on the *left*, you'll need to install at least 2.0: `pip install mintapi>=2.0`\n * If your account still has the original UI with the nav on *top*, to use 2.0, you will need to specify `--beta` in your command-line options or submit `beta=True` when initializing the class.  Otherwise, please install the latest 1.x release: `pip install mintapi<2.0`\n\n**Please note** that due to data changes on the Mint.com side as well as various new features and changes on the mintapi side, *there are several breaking changes in 2.0*. Please see [the CHANGELOG](https://github.com/mintapi/mintapi/blob/main/CHANGELOG.md#20) for details.\n\n## Installation\nInstall with pip from PyPi\n```shell\npip install mintapi\n```\nOr for the latest release:\n```shell\npip install git+https://github.com/mintapi/mintapi\n```\nThen simply:\n```shell\nmintapi --keyring --headless you@example.com\n```\nYou will be prompted for your password, which will be stored securely in your system keyring,\nand use a headless (invisible) browser to log in and grab the account data.\nIf this triggers an MFA prompt,\nyou'll be prompted for the one-time code on the command line.\nMFA prompts default to SMS unless you specify `--mfa-method=email`.\n`mintapi` persists the browser session in $HOME/.mintapi/session to avoid an MFA in the future,\nunless you specify `--session-path=None`.\n\nTo simplify CLI invocation,\nyou can specify a configuration file with the `--config-file` argument.\nFor arguments such as `--transactions`,\nyou can add a line in your config file that says `transactions`.\nFor other arguments that have input,\nsuch as `--start-date`,\nyou would add a line such as `start-date=10/01/21`.\nReading email and password from config files is not supported.\nYou must pass them as arguments directly or through a keyring.\n<!-- Can we get an example of this? -->\n\nFor help, or just to chat with fellow mintapi users, please [join us on Discord](https://discord.gg/YjJEuJRAu9)! :)\n\n## Complete Setup\n### MFA Authentication Methods\nYou can handle MFA in one of two ways: email or TOTP\n(**T**ime-based **O**ne-**T**ime **P**assword). TOTP is strongly recommended.\nWhile Mint supports authentication via Voice, `mintapi` currently does not.\n\nWhile you may disable MFA altogether, doing so is not recommended.\nNot only will it decrease your account security,\nbut Mint will sometimes **still email you a second factor code**.\nSo, for the least fragility, enable MFA.\n\nAs of v2.0,\nthe mfa_method parameter is only required when using soft-token,\nor if your login flow presents you with the option\nto select which Multifactor Authentication Method you wish to use.\nPrior to v2.0, `mfa_method` is always required.\n\n#### Option 1: TOTP\nSet `mfa_method` to `soft-token`.\n\nSet `mfa_token` as follows:\ngo to [your Mint settings](https://mint.intuit.com/settings.event?filter=all),\nnavigate through *Intuit Account* -> *Sign In & Security* -> *Two-step verification*.\nFrom there, enable eithter text or email as desired.\nAfter that, start the process to enable the *Authenticator app* option and when you get to the part where you see the QR code,\n**copy the manual setup code** that appears next to it. \n**BE CAREFUL WHERE YOU STORE THIS**, as anyone with it will be able to take over your Mint account.\nThis is the token you pass to `mfa_token` in either the python api or from the command line.\n\nNote that if you already have TOTP enabled on your account,\nyou will first have to disable and delete the old TOTP before setting up a new one.\n\n#### Option 2: Email\nIn order for `mintapi` to automate the retrieval of the MFA code from your email,\nyour email provider must provide IMAP access. If you use IMAP in conjunction with `keyring`,\nthen you can store your IMAP password (`imap-password`) in keyring. To do so,\nsimply omit `imap-password` and you will initially be prompted for the password associated with your IMAP account.\nThen, on subsequent uses of your IMAP account, you will not have to specify your password.\n\n### Chrome\n`mintapi` automatically downloads the latest stable chromedriver.\nFor long term, automated deployments,\nverify that the particular chrome and chromedrive binaries you have downloaded work together,\nand use the `--use_chromedriver_on_path` flag to prevent `mintapi` from auto updating the chromedriver binary\nKeep these binaries separate from your regular installation to avoid accidental breakage via auto-update.\n\nUse your distribution's package manager to install chromium and chromedriver:\n```shell\n# Debian/Ubuntu\nsudo apt install chromium-browser chromium-chromedriver\n# RHL/Fedora\nsudo dnf install chromium-browser chromium-chromedriver\n# Arch/Manjaro\nsudo pacman -S chromium-browser chromium-chromedriver\n```\nYou can also [manually download a chromedriver](https://sites.google.com/chromium.org/driver/downloads)\nversion of your choice.\nTo use your custom chromedriver in `mintapi`,\nyou can either add it to your Python working directory\nor add it to your `PATH` as described in the\n[Seleninum driver documentation](https://www.selenium.dev/selenium/docs/api/py/index.html#drivers).\n\n(To use a browser other than Chrome/Chromium,\nsee the [python section](#from-python) below.)\n\n## Examples\n### Cron\nThe following cron job runs `mintapi`,\nlooking for the chromium executable in `/usr/bin`,\nevery day at 07:00:\n```cron\n0 7 * * * PATH=/usr/bin:$PATH mintapi --use_chromedriver_on_path --headless john@example.com my_password\n```\nNote that the `PATH` is only affected for this job,\nand will not change the environment for any other process.\n\n[This page](https://devblogs.microsoft.com/scripting/use-powershell-to-create-scheduled-tasks/)\nhas instructions for setting a scheduled task in Windows with Powershell.\nRunning just once is as easy as:\n```powershell\n$ENV:PATH = \"C:\\Program Files\\Google\\Chrome;$ENV:PATH\"\nmintapi --headless john@example.com my_password\n```\n### Docker Image\nYou can also use the docker image to help manage your environment so you don't have to worry about chrome or chromedriver versions. There are a few caveats:\n1. Headless mode is recommended. GUI works but introduces the need to configure an X11 server which varies with setup. Google is your friend.\n2. Almost always use the flag `--use-chromedriver-on-path` as the chrome and chromedriver built into the docker image already match and getting the latest will break the image.\n3. If you want to persist credentials or your chrome session, you'll need to do some volume mounting.\n\nTo use the image:\n```\ndocker run --rm --shm-size=2g ghcr.io/mintapi/mintapi mintapi john@example.com my_password --headless --use-chromedriver-on-path\n```\n\n### AWS Lambda Environment\nAWS Lambda may need a [specific chrome driver with specific options](https://robertorocha.info/setting-up-a-selenium-web-scraper-on-aws-lambda-with-python/). You can initialize Mint with your own pre-configured headless serverless chrome through a constructor:\n\n```python\ndriver = initialize_serverless_chrome_driver(...)\nmint = mintapi.Mint(..., driver=driver)\n...\n```\n## Multi-Data Support\nAs of v2.0, mintapi supports returning multiple types of data in one call, such as: `mintapi --accounts --budgets --transactions`.  When exporting multiple data types, you can either send it directly to `stdout` or you can export to a file via `--filename`.  mintapi will create a file for each type of data, with a suffix based on the format.  For example, if you run `mintapi --accounts --transactions --filename=current --format=csv`, then you will receive two files: `current_account.csv` and `current_transaction.csv`.  The following table outlines the option selected and its corresponding suffix:\n\n| Option       | Suffix       |\n| -----------  | -----------  |\n| accounts     | account      |\n| bills        | bills        |\n| budgets      | budget       |\n| transactions | transaction  |\n| trends       | trends       |\n| categories   | category     |\n| investments  | investment   |\n| net-worth    | net_worth    |\n| credit-score | credit_score |\n| credit-report| credit_report|\n\n## Financial Data Trends\n\nMint supports providing some analysis of your financial data based on different types of \"trends\".  Mint's requirements for accessing this data using mintapi is a bit more complex than the other endpoints.\n\n| Parameter         | Data Type          | Description  |\n| ----------------  | ------------------ | -----------  |\n| report_type       | ReportView.Options | The type of report to generate. |\n| date_filter       | DateFilter.Options | The date window to analyze your trends. |\n| start_date        | Optional[str]      | An optional beginning date (mm-dd-yy) to your trend analysis. |\n| end_date          | Optional[str]      | An optional ending date (mm-dd-yy) to your trend analysis. |\n| category_ids      | List[str]          | An optional list of category IDs to include in your trend analysis. |\n| tag_ids           | List[str]          | An optional list of tag IDs to include in your trend analysis. |\n| descriptions      | List[str]          | An optional list of descriptions to include in your trend analysis. |\n| account_ids       | List[str]          | An optional list of account IDs to include in your trend analysis. |\n| match_all_filters | boolean            | Whether to match all supplied filters (True) or at least one (False) |\n| limit             | int                | The page size of results. |\n| offset            | int                | The starting record of your results. |\n\n### Report Type\n\nThe Report Type is the type of report for which to generate trend analysis.  The supplied value must be one of the following enum values:\n\n| Enum Value | Description |\n| ---------- | ----------- |\n| 1          | Spending Over Time |\n| 2          | Spending by Category |\n| 3          | Spending by Merchant |\n| 4          | Spending by Tag |\n| 5          | Income Over Time |\n| 6          | Income by Category |\n| 7          | Income by Merchant |\n| 8          | Income by Tag |\n| 9          | Assets by Type |\n| 10         | Assets Over Time |\n| 11         | Assets by Account |\n| 12         | Debts Over Time |\n| 13         | Debts by Type |\n| 14         | Debts by Account |\n| 15         | Net Worth Over Time |\n| 16         | Net Income Over Time |\n\n## Financial Data Transactions\n\nIf you want to provide a more granular filtering of your financial data transactions, you can select from a variety of search filters that are sent to Mint. \n\n| Parameter         | Data Type          | Description  |\n| ----------------  | ------------------ | -----------  |\n| date_filter       | DateFilter.Options | The date window for which to filter your transactions. |\n| start_date        | Optional[str]      | An optional beginning date (mm-dd-yy) to your transaction filtering. |\n| end_date          | Optional[str]      | An optional ending date (mm-dd-yy) to your transaction filtering. |\n| category_ids      | List[str]          | An optional list of category IDs of transactions to include. |\n| tag_ids           | List[str]          | An optional list of tag IDs of transactions to include. |\n| descriptions      | List[str]          | An optional list of descriptions of transactions to include. |\n| account_ids       | List[str]          | An optional list of account IDs of transactions to include. |\n| match_all_filters | boolean            | Whether to match all supplied filters (True) or at least one (False) |\n| include_investment | boolean           | Whether to include those transactions that are associated with an Investment Account. |\n| remove_pending    | boolean            | Whether to remove those transactions that are still Pending. | \n| limit             | int                | The page size of results. |\n| offset            | int                | The starting record of your results. |\n\n## Date Filters\n\nThe Date Filter is the date window for which to generate your trend analysis or for which to search transactions.  The supplied value must be one of the following enum values:\n\n| Enum Value | Description |\n| ---------- | ----------- |\n| 1          | Last 7 Days |\n| 2          | Last 14 Days |\n| 3          | This Month   |\n| 4          | Last Month   |\n| 5          | Last 3 Months |\n| 6          | Last 6 Months |\n| 7          | Last 7 Months |\n| 8          | This Year     |\n| 9          | Last Year     |\n| 10         | All Time      |\n| 11         | Custom        |\n\nIf you select a Custom Date Filter, then `start_date` and `end_date` are required fields.  Similarly, if you wish to use `start_date` and `end_date`, Custom Date Filter must be used.\n\n## From Python\n\nFrom python, instantiate the Mint class (from the mintapi package) and you can\nmake calls to retrieve account/budget information.  We recommend using the\n`keyring` library for persisting credentials.\n\n```python\n  import mintapi\n  mint = mintapi.Mint(\n    'your_email@web.com',  # Email used to log in to Mint\n    'password',  # Your password used to log in to mint\n    # Optional parameters\n    mfa_method='sms',  # See MFA Methods section\n                       # Can be 'sms' (default), 'email', or 'soft-token'.\n                       # if mintapi detects an MFA request, it will trigger the requested method\n                       # and prompt on the command line.\n    mfa_input_callback=None,  # see MFA Methods section\n                              # can be used with any mfa_method\n                              # A callback accepting a single argument (the prompt)\n                              # which returns the user-inputted 2FA code. By default\n                              # the default Python `input` function is used.\n    mfa_token=None,   # see MFA Methods section\n                      # used with mfa_method='soft-token'\n                      # the token that is used to generate the totp\n    intuit_account=None, # account name when multiple accounts are registered with this email.\n    headless=False,  # Whether the chromedriver should work without opening a\n                     # visible window (useful for server-side deployments)\n                         # None will use the default account.\n    session_path=None, # Directory that the Chrome persistent session will be written/read from.\n                       # To avoid the 2FA code being asked for multiple times, you can either set\n                       # this parameter or log in by hand in Chrome under the same user this runs\n                       # as.\n    imap_account=None, # account name used to log in to your IMAP server\n    imap_password=None, # account password used to log in to your IMAP server\n    imap_server=None,  # IMAP server host name\n    imap_folder='INBOX',  # IMAP folder that receives MFA email\n    wait_for_sync=False,  # do not wait for accounts to sync\n    wait_for_sync_timeout=300,  # number of seconds to wait for sync\n    fail_if_stale=True, # True will raise an exception if Mint is unable to refresh your data.\n\t  use_chromedriver_on_path=False,  # True will use a system provided chromedriver binary that\n\t                                 # is on the PATH (instead of downloading the latest version)\n    driver=None,        # pre-configured driver. If None, Mint will initialize the WebDriver.\n    quit_driver_on_fail=True  # Quit from the browser and driver if an unexpected exception caught.\n                              # Could be useful to set it to False if the ownership of the driver should not be owned by Mint object.\n  )\n\n  # Get account information\n  mint.get_account_data()\n\n  # Get budget information\n  mint.get_budget_data()\n\n  # Get transactions\n  mint.get_transaction_data() # as pandas dataframe\n\n  # Get transactions for a specific account\n  accounts = mint.get_account_data()\n  for account in accounts:\n    mint.get_transaction_data(id=account[\"id\"])\n\n  # Get net worth\n  mint.get_net_worth_data()\n\n  # Get credit score\n  mint.get_credit_score_data()\n\n  # Get bills\n  mint.get_bills()\n\n  # Get investments (holdings and transactions)\n  mint.get_investment_data()\n\n  # Close session and exit cleanly from selenium/chromedriver\n  mint.close()\n\n  # Initiate an account refresh\n  mint.initiate_account_refresh()\n\n  # you can also use mintapi's login in workflow with your own selenium webdriver\n  # this will allow for more custom selenium driver setups\n  # one caveat is that it must be based on seleniumrequests currently\n  # seleniumrequests has most browsers already\n  # it also has mixins for any browsers it doesn't have so the sky is the limit!\n  from seleniumrequests import Firefox\n  mint = mintapi.Mint()\n  mint.driver = Firefox()\n  mint.status_message, mint.token = mintapi.sign_in(\n    email, password, mint.driver, mfa_method=None, mfa_token=None,\n    mfa_input_callback=None, intuit_account=None, wait_for_sync=True,\n    wait_for_sync_timeout=5 * 60,\n    imap_account=None, imap_password=None,\n    imap_server=None, imap_folder=\"INBOX\",\n  )\n  # now you can do all the normal api calls\n  # ex:\n  mint.get_transaction_data()\n```\n\n---\nRun it as a sub-process from your favorite language; `pip install mintapi` creates a binary in your $PATH. From the command-line, the output is JSON:\n\n```shell\n    usage: mintapi [-h] [--session-path [SESSION_PATH]] [--accounts] [--investments]\n                   [--beta] [--budgets | --budget_hist] [--net-worth]\n                   [--credit-score] [--credit-report]\n                   [--exclude-inquiries] [--exclude-accounts] [--exclude-utilization]\n                   [--start-date [START_DATE]] [--end-date [END_DATE]]\n                   [--limit] [--include-investment] [--show-pending]\n                   [--format] [--filename FILENAME] [--keyring] [--headless]\n                   [--mfa-method {sms,email,soft-token}]\n                   [--categories] [--attention]\n                   [--transactions] [--transaction-date-filter]\n                   [--trends] [--trend-report-type] [--trend-date-filter]\n                   email [password]\n\n    positional arguments:\n      email                 The e-mail address for your Mint.com account (required)\n      password              The password for your Mint.com account (if not supplied, --keyring must be provided)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --accounts            Retrieve account information (default if nothing else\n                            is specified)\n      --session-path [SESSION_PATH]\n                            Directory to save browser session, including cookies. Used to prevent repeated\n                            MFA prompts. Defaults to $HOME/.mintapi/session. Set to None to use a temporary\n                            profile.\n      --beta                Use the beta version of Mint\n      --budgets             Retrieve budget information for current month\n      --budget_hist         Retrieve historical budget information (past 12 months)\n      --categories          Retrieve your configured Mint categories\n      --config-file, -c     File used to store arguments\n      --credit-score        Retrieve credit score\n      --credit-report       Retrieve full credit report & history\n      --exclude-inquiries   Used in conjunction with --credit-report, ignores credit inquiry data.\n      --exclude-accounts    Used in conjunction with --credit-report, ignores credit account data.\n      --exclude-utilization Used in conjunction with --credit-report, ignores credit utilization data.\n      --net-worth           Retrieve net worth information\n      --transactions, -t    Retrieve transactions\n      --transaction-date-filter The date window for which to filter your transactions.  Default is All Time.\n      --trends              Retrieve trend data related to your financial information\n      --trend-report-type   The type of report for which to generate trend analysis.  Default is Spending Over Time.\n      --trend-date-filter   The date window for which to generate your trend analysis.  Default is This Month.\n      --start-date [START_DATE]\n                            Earliest date for which to retrieve transactions.\n                            Used with --transactions. Format: mm/dd/yy\n      --end-date [END_DATE]\n                            Latest date for which to retrieve transactions.\n                            Used with --transactions. Format: mm/dd/yy\n      --investments         Retrieve data related to your investments, whether they be retirement or         personal stock purchases\n      --include-investment  Used with --transactions\n      --limit               Number of records to include from the API.  Default is 5000.\n      --show-pending        Retrieve pending transactions.\n                            Used with --transactions\n      --fail-if-stale       At login, Mint attempts to refresh your data.  If you wish to exit when the sync fails, use this option.\n      --filename FILENAME, -f FILENAME\n                            write results to file. If no file is specified, then data is written to stdout.  Do not specify the file extension as it is determined based on the selection of `--format`.\n      --format              Determines the output format of the data, either `csv` or         `json`.  The default value is `json`.  If no `filename` is specified, then this determines the `stdout` format.  Otherwise, if a `filename` is specified, then this determines the file extension.\n      --keyring             Use OS keyring for storing password information\n      --headless            Whether to execute chromedriver with no visible\n                            window.\n\t  --use-chromedriver-on-path\n\t  \t\t\t\t\t\tWhether to use the chromedriver on PATH, instead of\n              \t\t\t  \tdownloading a local copy.\n      --mfa-method {sms,email,soft-token}\n                            The MFA method to automate.\n      --mfa-token      The base32 encoded MFA token.\n      --imap-account IMAP_ACCOUNT\n      --imap-password IMAP_PASSWORD\n      --imap-server IMAP_SERVER_HOSTNAME\n      --imap-folder IMAP_FOLDER\n                            Default is INBOX\n      --imap-test           Test access to IMAP server\n      --no_wait_for_sync    Do not wait for accounts to sync\n      --wait_for_sync_timeout\n                            Number of seconds to wait for sync (default is 300)\n      --attention.          Get notice if there are any accounts that need attention\n\n\n    >>> mintapi --keyring email@example.com\n    [\n      {\n        \"accountName\": \"Chase Checking\",\n        \"lastUpdatedInString\": \"25 minutes\",\n        \"accountType\": \"bank\",\n        \"currentBalance\": 100.12,\n        ...\n      },\n      ...\n    ]\n```\n\n## Special Considerations\n\n### Email / Account Access\n\nBecause of the inter-connected nature of Intuit's products, when signing in to Mint for one account, you may see accounts associated with Intuit products other than Mint.  If you do have multiple Intuit accounts, you should be aware that if one email is associated with two different usernames (and multiple Intuit products, such as TurboTax or Quickbooks), you may receive a prompt for Multifactor Authentication, even with a saved session.  One possible solution is separating the two accounts to use two different emails.  For many email clients, you can route different email addresses to the same account by using a suffix.  For example, you could have email addresses \"myaccount+mint@gmail.com\" and \"myaccount+quickbooks@gmail.com\" and receive emails for both in the \"myaccount@gmail.com\" inbox.\n\n### Chrome version\n**NOTE: You must have [Chrome](https://www.google.com/chrome/) or [Chromium](https://www.chromium.org/getting-involved/dev-channel/) installed, on the `stable` track, and be up-to-date!**\nIf you run into a `SessionNotCreatedException` about \"ChromeDriver only supports Chrome version XX\",\nyou need to [update Chrome](https://support.google.com/chrome/answer/95414).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mintapi/mintapi",
    "keywords": "",
    "license": "The MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mintapi",
    "package_url": "https://pypi.org/project/mintapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/mintapi/",
    "project_urls": {
      "Homepage": "https://github.com/mintapi/mintapi"
    },
    "release_url": "https://pypi.org/project/mintapi/2.14/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a screen-scraping API for Mint.com",
    "version": "2.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17497767,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42b0aa99c3325ef1e2d6d8e85a4bbbbfe7b18834a798d76cf4c360c8965d0ce9",
        "md5": "b08c4ae8362a981aa79810f64a911624",
        "sha256": "9bc8ac0618c9b88a0494166019b0e875646736a444eccfead8f7146ea7fd2248"
      },
      "downloads": -1,
      "filename": "mintapi-2.14.tar.gz",
      "has_sig": false,
      "md5_digest": "b08c4ae8362a981aa79810f64a911624",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 39020,
      "upload_time": "2023-03-29T18:29:44",
      "upload_time_iso_8601": "2023-03-29T18:29:44.124504Z",
      "url": "https://files.pythonhosted.org/packages/42/b0/aa99c3325ef1e2d6d8e85a4bbbbfe7b18834a798d76cf4c360c8965d0ce9/mintapi-2.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}