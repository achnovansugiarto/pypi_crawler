{
  "info": {
    "author": "Michael Rooney",
    "author_email": "mrooney.mintapi@rowk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "mintapi\n=======\n\na screen-scraping API for Mint.com. |Build Status|\n\nRequirements\n============\n\nEnsure you have Python 2 or 3 and pip (``easy_install pip``) and then:\n\n::\n\n    pip install mintapi\n\nUsage\n=====\n\nfrom Python\n-----------\n\nFrom python, instantiate the Mint class (from the mintapi package) and\nyou can make calls to retrieve account/budget information. We recommend\nusing the ``keyring`` library for persisting credentials.\n\n::\n\n    import mintapi\n    mint = mintapi.Mint(email, password)\n\n    # Get basic account information\n    mint.get_accounts()\n\n    # Get extended account detail at the expense of speed - requires an\n    # additional API call for each account\n    mint.get_accounts(True)\n\n    # Get budget information\n    mint.get_budgets()\n\n    # Get transactions\n    mint.get_transactions() # as pandas dataframe\n    mint.get_transactions_csv(self, include_investment=False) # as raw csv data\n    mint.get_transactions_json(self, include_investment=False, skip_duplicates=False):\n\n    # Get net worth\n    mint.get_net_worth()\n\n    # Initiate an account refresh\n    mint.initiate_account_refresh()\n\nThere are, additionally, deprecated wrappers for backward compatibility\nwith old versions of the API.\n\n::\n\n    import mintapi\n    mintapi.get_accounts(email, password)\n    mintapi.get_accounts(email, password, True)\n    mintapi.get_budgets(email, password)\n    mintapi.initiate_account_refresh(email, password)\n\nfrom anywhere\n-------------\n\nRun it as a sub-process from your favorite language;\n``pip install mintapi`` creates a binary in your $PATH. From the\ncommand-line, the output is JSON:\n\n::\n\n    usage: mintapi [-h] [--accounts] [--budgets] [--net-worth]\n              [--extended-accounts] [--transactions] [--extended-transactions]\n              [--start-date [START_DATE]] [--include-investment]\n              [--skip-duplicates] [--show-pending] [--filename FILENAME]\n              [--keyring]\n              [email] [password]\n\n    positional arguments:\n      email                 The e-mail address for your Mint.com account\n      password              The password for your Mint.com account\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --accounts            Retrieve account information (default if nothing else\n                            is specified)\n      --budgets             Retrieve budget information\n      --net-worth           Retrieve net worth information\n      --extended-accounts   Retrieve extended account information (slower, implies\n                            --accounts)\n      --transactions, -t    Retrieve transactions\n      --extended-transactions\n                            Retrieve transactions with extra information and\n                            arguments\n      --start-date [START_DATE]\n                            Earliest date for transactions to be retrieved from.\n                            Used with --extended-transactions. Format: mm/dd/yy\n      --include-investment  Used with --extended-transactions\n      --skip-duplicates     Used with --extended-transactions\n      --show-pending        Exclude pending transactions from being retrieved.\n                            Used with --extended-transactions\n      --filename FILENAME, -f FILENAME\n                            write results to file. can be {csv,json} format.\n                            default is to write to stdout.\n      --keyring             Use OS keyring for storing password information\n\n    >>> mintapi --keyring email@example.com\n    [\n      {\n        \"accountName\": \"Chase Checking\",\n        \"lastUpdatedInString\": \"25 minutes\",\n        \"accountType\": \"bank\",\n        \"currentBalance\": 100.12,\n        ...\n      },\n      ...\n    ]\n\nIf you need to avoid using pip or setup.py, you can also clone/download\nthis repository and run: ``python mintapi/api.py``\n\n.. |Build Status| image:: https://travis-ci.org/mrooney/mintapi.svg?branch=master\n   :target: https://travis-ci.org/mrooney/mintapi",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrooney/mintapi",
    "keywords": null,
    "license": "The MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mintapi",
    "package_url": "https://pypi.org/project/mintapi/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mintapi/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/mrooney/mintapi"
    },
    "release_url": "https://pypi.org/project/mintapi/1.18/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "a screen-scraping API for Mint.com",
    "version": "1.18",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17497767,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "123b70acfc41b91ad13f35ed115a2af68db1f7919b3edadd48076afc86739707",
        "md5": "e44da6248fd4be262ab342b77dcafad9",
        "sha256": "38bf5914252bba1a71a8f1fa97566137f8fcee43edf5c07082297272e9563d15"
      },
      "downloads": -1,
      "filename": "mintapi-1.18.tar.gz",
      "has_sig": false,
      "md5_digest": "e44da6248fd4be262ab342b77dcafad9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10085,
      "upload_time": "2016-05-12T18:35:27",
      "upload_time_iso_8601": "2016-05-12T18:35:27.721728Z",
      "url": "https://files.pythonhosted.org/packages/12/3b/70acfc41b91ad13f35ed115a2af68db1f7919b3edadd48076afc86739707/mintapi-1.18.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}