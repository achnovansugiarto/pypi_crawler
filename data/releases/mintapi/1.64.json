{
  "info": {
    "author": "Michael Rooney",
    "author_email": "mrooney.mintapi@rowk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# mintapi\n\n[![Build Status](https://github.com/mintapi/mintapi/actions/workflows/ci.yml/badge.svg)](https://github.com/mintapi/mintapi/actions)\n[![PyPI Version](https://img.shields.io/pypi/v/mintapi)](https://pypi.org/project/mintapi/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n\nAn unofficial screen-scraping API for Mint.com.\n\n## Community\n\nPlease [join us on Discord](https://discord.gg/YjJEuJRAu9) to get help or just chat with fellow mintapi users :)\n\n## Installation\nEnsure you have Python 3 and pip (`easy_install pip`) and then:\n\n```shell\npip install mintapi\n```\n\n`mintapi` scrapes Mint.com by navigating a Chrome browser (or Chromium) just as a human would. Once logged in, the API allows programatic access to various Mint REST APIs. Selenium/WebDriver is used to accomplish this, and specifically, ChromeDriver under the hood. `mintapi` will download the latest stable release of chromedriver, unless --use_chromedriver_on_path is given. **NOTE: You must have [Chrome](https://www.google.com/chrome/) or [Chromium](https://www.chromium.org/getting-involved/dev-channel/) installed, on the `stable` track, and be up-to-date!** If you run into a `SessionNotCreatedException` about \"ChromeDriver only supports Chrome version XX\", you need to [update Chrome](https://support.google.com/chrome/answer/95414).\n\n## Usage\n\n### from the command line\n\nFrom the command line, the most automated invocation will be:\n\n    mintapi --keyring --headless you@example.com\n\nThis will store your credentials securely in your system keyring, and use a\nheadless (invisible) browser to log in and grab the account data. If this triggers\nan MFA prompt, you'll be prompted on the command line for your code, which by default\ngoes to SMS unless you specify `--mfa-method=email`. This will also persist a browser\nsession in $HOME/.mintapi/session to avoid an MFA in the future, unless you specify `--session-path=None`.\n\nIf you wish to simplify the number of arguments passed in the command line, you can use a configuration file by specifying `--config-file`.  For arguments such as `--extended-transactions`, you can add a line in your config file that says `extended-transactions`.  For other arguments that have input, such as `--start-date`, you would add a line such as `start-date=10/01/21`.  There are two exceptions to what you can add to the config file: email and password.  Since these arguments do not include `--`, you cannot add them to the config file.\n\n### Linux Distributions (including Raspberry Pi OS)\n\nIf you're running mintapi in a server environment on an automatic schedule, consider running mintapi in headless mode if you don't need to see the login workflow. In addition, you'll want to use your distribution's package manager to install chromium and chromedriver. Make sure your distribution is up-to-date and then install/update Chromium (debian-family example): `apt install chromium-browser chromium-chromedriver`. Then use the option `use_chromedriver_on_path` either through the CLI or the python api so that mintapi doesn't try to find a matching chromedriver.\n\nIf you need to download the chromedriver manually, be sure to get the version that matches your chrome version and make the chromedriver available to your python interpreter either by putting the chromedriver in your python working directory or inside your `PATH` as described in the [python selenium documentation](https://www.selenium.dev/selenium/docs/api/py/index.html#drivers).\n\n### General Automation Scenarios\nWhen running this inside of a cron job or other long-term automation scripts, it might be helpful to specify chrome and chromedriver executables so as not to conflict with other chrome versions you may have. Selenium by default just gets these from your `PATH` environment variable, so customizing your environment can force a deterministic behavior from mintapi. To use a different browser besides Chrome or Chromium, see the [python api](#from-python). Below are two examples.\n\n#### Unix Environment\nIf I wanted to make sure that mintapi used the chromium executable in my /usr/bin directory when executing a cron job, I could write the following cron line:\n```cron\n0 7 * * FRI PATH=/usr/bin:$PATH mintapi --headless john@example.com my_password\n```\nwhere prepending the /usr/bin path to path will make those binaries found first. This will only affect the cron job and will not change the environment for any other process.\n\n#### Docker Image\nYou can also use the docker image to help manage your environment so you don't have to worry about chrome or chromedriver versions. There are a few caveats:\n1. Headless mode is recommended. GUI works but introduces the need to configure an X11 server which varies with setup. Google is your friend.\n2. Almost always use the flag `--use-chromedriver-on-path` as the chrome and chromedriver built into the docker image already match and getting the latest will break the image.\n3. If you want to persist credentials or your chrome session, you'll need to do some volume mounting.\n\nTo use the image:\n```\ndocker run --rm --shm-size=2g ghcr.io/mintapi/mintapi mintapi john@example.com my_password --headless --use-chromedriver-on-path\n```\n\n#### Windows Environment\nYou can do a similar thing in windows by executing the following in Powershell.\n```powershell\n$ENV:PATH = \"C:\\Program Files\\Google\\Chrome;$ENV:PATH\"\nmintapi --headless john@example.com my_password\n```\n\n### MFA Authentication Methods\n\nIf `mfa-method` is email and your email host provides IMAP access, you can specify your IMAP login details.\nThis will automate the retrieval of the MFA code from your email and entering it into Mint.  If you use IMAP in conjunction with `keyring`, then you can store your IMAP password (`imap-password`) in keyring.  To do so, simply omit `imap-password` and you will initially be prompted for the password associated with your IMAP account.  Then, on subsequent uses of your IMAP account, you will not have to specify your password.\n\nIf `mfa-method` is soft-token then you must also pass your `mfa-token`. The `mfa-token` can be obtained by going to [your mint.com settings](https://mint.intuit.com/settings.event?filter=all) and clicking on 'Intuit Account'. From there go to *Sign In & Security* -> *Two-step verification*. From there, enable the top option however you wish (either text or email is fine). After that, start the process to enable the *Authenticator app* option and when you get the part where you see the QR code, **copy the manual setup code** that appears next to it. Careful where you store this as it allows anyone to generate TOTP codes. This is the token that you will pass to `mfa-token` in either the python api or from the command line.\n\n### from Python\n\nFrom python, instantiate the Mint class (from the mintapi package) and you can\nmake calls to retrieve account/budget information.  We recommend using the\n`keyring` library for persisting credentials.\n\n```python\n  import mintapi\n  mint = mintapi.Mint(\n    'your_email@web.com',  # Email used to log in to Mint\n    'password',  # Your password used to log in to mint\n    # Optional parameters\n    mfa_method='sms',  # See MFA Methods section\n                       # Can be 'sms' (default), 'email', or 'soft-token'.\n                       # if mintapi detects an MFA request, it will trigger the requested method\n                       # and prompt on the command line.\n    mfa_input_callback=None,  # see MFA Methods section\n                              # can be used with any mfa_method\n                              # A callback accepting a single argument (the prompt)\n                              # which returns the user-inputted 2FA code. By default\n                              # the default Python `input` function is used.\n    mfa_token=None,   # see MFA Methods section\n                      # used with mfa_method='soft-token'\n                      # the token that is used to generate the totp\n    intuit_account=None, # account name when multiple accounts are registered with this email.\n    headless=False,  # Whether the chromedriver should work without opening a\n                     # visible window (useful for server-side deployments)\n                         # None will use the default account.\n    session_path=None, # Directory that the Chrome persistent session will be written/read from.\n                       # To avoid the 2FA code being asked for multiple times, you can either set\n                       # this parameter or log in by hand in Chrome under the same user this runs\n                       # as.\n    imap_account=None, # account name used to log in to your IMAP server\n    imap_password=None, # account password used to log in to your IMAP server\n    imap_server=None,  # IMAP server host name\n    imap_folder='INBOX',  # IMAP folder that receives MFA email\n    wait_for_sync=False,  # do not wait for accounts to sync\n    wait_for_sync_timeout=300,  # number of seconds to wait for sync\n\tuse_chromedriver_on_path=False,  # True will use a system provided chromedriver binary that\n\t                                 # is on the PATH (instead of downloading the latest version)\n  )\n\n  # Get basic account information\n  mint.get_accounts()\n\n  # Get extended account detail at the expense of speed - requires an\n  # additional API call for each account\n  mint.get_accounts(True)\n\n  # Get budget information\n  mint.get_budgets()\n\n  # Get transactions\n  mint.get_transactions() # as pandas dataframe\n  mint.get_transactions_csv(include_investment=False) # as raw csv data\n  mint.get_transactions_json(include_investment=False, skip_duplicates=False)\n\n  # Get transactions for a specific account\n  accounts = mint.get_accounts(True)\n  for account in accounts:\n    mint.get_transactions_csv(id=account[\"id\"])\n    mint.get_transactions_json(id=account[\"id\"])\n\n  # Get net worth\n  mint.get_net_worth()\n\n  # Get credit score\n  mint.get_credit_score()\n\n  # Get bills\n  mint.get_bills()\n\n  # Get investments (holdings and transactions)\n  mint.get_invests_json()\n\n  # Close session and exit cleanly from selenium/chromedriver\n  mint.close()\n\n  # Initiate an account refresh\n  mint.initiate_account_refresh()\n\n  # you can also use mintapi's login in workflow with your own selenium webdriver\n  # this will allow for more custom selenium driver setups\n  # one caveat is that it must be based on seleniumrequests currently\n  # seleniumrequests has most browsers already\n  # it also has mixins for any browsers it doesn't have so the sky is the limit!\n  from seleniumrequests import Firefox\n  mint = mintapi.Mint()\n  mint.driver = Firefox()\n  mint.status_message, mint.token = mintapi.sign_in(\n    email, password, mint.driver, mfa_method=None, mfa_token=None,\n    mfa_input_callback=None, intuit_account=None, wait_for_sync=True,\n    wait_for_sync_timeout=5 * 60,\n    imap_account=None, imap_password=None,\n    imap_server=None, imap_folder=\"INBOX\",\n  )\n  # now you can do all the normal api calls\n  # ex:\n  mint.get_transactions()\n```\n\n---\nRun it as a sub-process from your favorite language; `pip install mintapi` creates a binary in your $PATH. From the command-line, the output is JSON:\n\n```shell\n    usage: mintapi [-h] [--session-path [SESSION_PATH]] [--accounts] [--investment]\n                   [--budgets | --budget_hist] [--net-worth] [--extended-accounts] [--transactions]\n                   [--extended-transactions] [--credit-score] [--credit-report]\n                   [--exclude-inquiries] [--exclude-accounts] [--exclude-utilization]\n                   [--start-date [START_DATE]] [--end-date [END_DATE]]\n                   [--include-investment] [--skip-duplicates] [--show-pending]\n                   [--filename FILENAME] [--keyring] [--headless] [--attention]\n                   [--mfa-method {sms,email,soft-token}]\n                   [--categories]\n                   email [password]\n\n    positional arguments:\n      email                 The e-mail address for your Mint.com account (required)\n      password              The password for your Mint.com account (if not supplied, --keyring must be provided)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --accounts            Retrieve account information (default if nothing else\n                            is specified)\n      --session-path [SESSION_PATH]\n                            Directory to save browser session, including cookies. Used to prevent repeated\n                            MFA prompts. Defaults to $HOME/.mintapi/session. Set to None to use a temporary\n                            profile.\n      --budgets             Retrieve budget information for current month\n      --budget_hist         Retrieve historical budget information (past 12 months)\n      --categories          Retrieve your configured Mint categories\n      --config-file, -c     File used to store arguments\n      --credit-score        Retrieve credit score\n      --credit-report       Retrieve full credit report & history\n      --exclude-inquiries   Used in conjunction with --credit-report, ignores credit inquiry data.\n      --exclude-accounts    Used in conjunction with --credit-report, ignores credit account data.\n      --exclude-utilization Used in conjunction with --credit-report, ignores credit utilization data.\n      --net-worth           Retrieve net worth information\n      --extended-accounts   Retrieve extended account information (slower, implies --accounts)\n      --transactions, -t    Retrieve transactions\n      --extended-transactions\n                            Retrieve transactions with extra information and\n                            arguments\n      --start-date [START_DATE]\n                            Earliest date for which to retrieve transactions.\n                            Used with --transactions or --extended-transactions. Format: mm/dd/yy\n      --end-date [END_DATE]\n                            Latest date for which to retrieve transactions.\n                            Used with --transactions or --extended-transactions. Format: mm/dd/yy\n      --investments         Retrieve data related to your investments, whether they be retirement or         personal stock purchases\n      --include-investment  Used with --extended-transactions\n      --skip-duplicates     Used with --extended-transactions\n      --show-pending        Exclude pending transactions from being retrieved.\n                            Used with --extended-transactions\n      --filename FILENAME, -f FILENAME\n                            write results to file. can be {csv,json} format.\n                            default is to write to stdout.\n      --keyring             Use OS keyring for storing password information\n      --headless            Whether to execute chromedriver with no visible\n                            window.\n\t  --use-chromedriver-on-path\n\t  \t\t\t\t\t\tWhether to use the chromedriver on PATH, instead of\n              \t\t\t  \tdownloading a local copy.\n      --mfa-method {sms,email,soft-token}\n                            The MFA method to automate.\n      --mfa-token      The base32 encoded MFA token.\n      --imap-account IMAP_ACCOUNT\n      --imap-password IMAP_PASSWORD\n      --imap-server IMAP_SERVER_HOSTNAME\n      --imap-folder IMAP_FOLDER\n                            Default is INBOX\n      --imap-test           Test access to IMAP server\n      --no_wait_for_sync    Do not wait for accounts to sync\n      --wait_for_sync_timeout\n                            Number of seconds to wait for sync (default is 300)\n      --attention.          Get notice if there are any accounts that need attention\n\n\n    >>> mintapi --keyring email@example.com\n    [\n      {\n        \"accountName\": \"Chase Checking\",\n        \"lastUpdatedInString\": \"25 minutes\",\n        \"accountType\": \"bank\",\n        \"currentBalance\": 100.12,\n        ...\n      },\n      ...\n    ]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mintapi/mintapi",
    "keywords": "",
    "license": "The MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mintapi",
    "package_url": "https://pypi.org/project/mintapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/mintapi/",
    "project_urls": {
      "Homepage": "https://github.com/mintapi/mintapi"
    },
    "release_url": "https://pypi.org/project/mintapi/1.64/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a screen-scraping API for Mint.com",
    "version": "1.64",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17497767,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d7a71411b6a2099e6372b3298bdaf858d42840ee65408f560709f77aeb724a5",
        "md5": "0cbf7f57913732b248111dcb58e69f52",
        "sha256": "afd50a508d75c567483539b53bcd764780261d06863303b78598048922ef8a4c"
      },
      "downloads": -1,
      "filename": "mintapi-1.64.tar.gz",
      "has_sig": false,
      "md5_digest": "0cbf7f57913732b248111dcb58e69f52",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29956,
      "upload_time": "2022-03-05T19:07:24",
      "upload_time_iso_8601": "2022-03-05T19:07:24.855204Z",
      "url": "https://files.pythonhosted.org/packages/1d/7a/71411b6a2099e6372b3298bdaf858d42840ee65408f560709f77aeb724a5/mintapi-1.64.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}