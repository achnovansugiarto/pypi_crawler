{
  "info": {
    "author": "Steven Myint",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "============\ndocformatter\n============\n\nFormats docstrings to follow `PEP 257`_.\n\n.. _`PEP 257`: http://www.python.org/dev/peps/pep-0257/\n\n.. image:: https://travis-ci.org/myint/docformatter.svg?branch=master\n   :target: https://travis-ci.org/myint/docformatter\n   :alt: Build status\n\n\nFeatures\n========\n\n*docformatter* currently automatically formats docstrings to follow a\nsubset of the PEP 257 conventions. Below are the relevant items quoted\nfrom PEP 257.\n\n- For consistency, always use triple double quotes around docstrings.\n- Triple quotes are used even though the string fits on one line.\n- Multi-line docstrings consist of a summary line just like a one-line\n  docstring, followed by a blank line, followed by a more elaborate\n  description.\n- Unless the entire docstring fits on a line, place the closing quotes\n  on a line by themselves.\n\ndocformatter also handles some of the PEP 8 conventions.\n\n- Don't write string literals that rely on significant trailing\n  whitespace. Such trailing whitespace is visually indistinguishable\n  and some editors (or more recently, reindent.py) will trim them.\n\n\nInstallation\n============\n\nFrom pip::\n\n    $ pip install --upgrade docformatter\n\n\nExample\n=======\n\nAfter running::\n\n    $ docformatter --in-place example.py\n\nthis code\n\n.. code-block:: python\n\n    \"\"\"   Here are some examples.\n\n        This module docstring should be dedented.\"\"\"\n\n\n    def launch_rocket():\n        \"\"\"Launch\n    the\n    rocket. Go colonize space.\"\"\"\n\n\n    def factorial(x):\n        '''\n\n        Return x factorial.\n\n        This uses math.factorial.\n\n        '''\n        import math\n        return math.factorial(x)\n\n\n    def print_factorial(x):\n        \"\"\"Print x factorial\"\"\"\n        print(factorial(x))\n\n\n    def main():\n        \"\"\"Main\n        function\"\"\"\n        print_factorial(5)\n        if factorial(10):\n            launch_rocket()\n\n\ngets formatted into this\n\n.. code-block:: python\n\n    \"\"\"Here are some examples.\n\n    This module docstring should be dedented.\n    \"\"\"\n\n\n    def launch_rocket():\n        \"\"\"Launch the rocket.\n\n        Go colonize space.\n        \"\"\"\n\n\n    def factorial(x):\n        \"\"\"Return x factorial.\n\n        This uses math.factorial.\n        \"\"\"\n        import math\n        return math.factorial(x)\n\n\n    def print_factorial(x):\n        \"\"\"Print x factorial.\"\"\"\n        print(factorial(x))\n\n\n    def main():\n        \"\"\"Main function.\"\"\"\n        print_factorial(5)\n        if factorial(10):\n            launch_rocket()\n\n\nOptions\n=======\n\nBelow is the help output::\n\n    usage: docformatter [-h] [-i | -c] [-r] [--wrap-summaries length]\n                        [--wrap-descriptions length] [--blank]\n                        [--pre-summary-newline] [--make-summary-multi-line]\n                        [--force-wrap] [--range line line] [--version]\n                        files [files ...]\n\n    Formats docstrings to follow PEP 257.\n\n    positional arguments:\n      files                 files to format or '-' for standard in\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i, --in-place        make changes to files instead of printing diffs\n      -c, --check           only check and report incorrectly formatted files\n      -r, --recursive       drill down directories recursively\n      --wrap-summaries length\n                            wrap long summary lines at this length; set to 0 to\n                            disable wrapping (default: 79)\n      --wrap-descriptions length\n                            wrap descriptions at this length; set to 0 to disable\n                            wrapping (default: 72)\n      --blank               add blank line after description\n      --pre-summary-newline\n                            add a newline before the summary of a multi-line\n                            docstring\n      --make-summary-multi-line\n                            add a newline before and after the summary of a one-\n                            line docstring\n      --force-wrap          force descriptions to be wrapped even if it may result\n                            in a mess\n      --range line line     apply docformatter to docstrings between these lines;\n                            line numbers are indexed at 1\n      --version             show program's version number and exit\n\n\nPossible exit codes:\n\n- **1** - if any error encountered\n- **3** - if any file needs to be formatted (in ``--check`` mode)\n\nWrapping descriptions\n=====================\n\ndocformatter will wrap descriptions, but only in simple cases. If there is text\nthat seems like a bulleted/numbered list, docformatter will leave the\ndescription as is::\n\n    - Item one.\n    - Item two.\n    - Item three.\n\nThis prevents the risk of the wrapping turning things into a mess. To force\neven these instances to get wrapped use ``--force-wrap``.\n\n\nIssues\n======\n\nBugs and patches can be reported on the `GitHub page`_.\n\n.. _`GitHub page`: https://github.com/myint/docformatter/issues\n\n\nLinks\n=====\n\n* Coveralls_\n\n.. _`Coveralls`: https://coveralls.io/r/myint/docformatter",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/myint/docformatter",
    "keywords": "PEP 257,pep257,style,formatter,docstrings",
    "license": "Expat License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "docformatter",
    "package_url": "https://pypi.org/project/docformatter/",
    "platform": "",
    "project_url": "https://pypi.org/project/docformatter/",
    "project_urls": {
      "Homepage": "https://github.com/myint/docformatter"
    },
    "release_url": "https://pypi.org/project/docformatter/1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Formats docstrings to follow PEP 257.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16129466,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "355241c0152a44873c8f11f0f9fe21b680588ae0e2b20e4a0a9b4812f8decbdc",
        "md5": "f7818907d8fafdfddba171098d802ee4",
        "sha256": "c68c8db0952d7ec6423581915fde3f23d4be5eccc11eb28a3415b5cd0a1e4f73"
      },
      "downloads": -1,
      "filename": "docformatter-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f7818907d8fafdfddba171098d802ee4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16711,
      "upload_time": "2019-07-17T13:33:07",
      "upload_time_iso_8601": "2019-07-17T13:33:07.743123Z",
      "url": "https://files.pythonhosted.org/packages/35/52/41c0152a44873c8f11f0f9fe21b680588ae0e2b20e4a0a9b4812f8decbdc/docformatter-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}