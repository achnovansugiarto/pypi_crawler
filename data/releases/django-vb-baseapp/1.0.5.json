{
  "info": {
    "author": "vb YAZILIM",
    "author_email": "hello@vbyazilim.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "![Python](https://img.shields.io/badge/python-3.7.4-green.svg)\n![Django](https://img.shields.io/badge/django-2.2.6-green.svg)\n![Version](https://img.shields.io/badge/version-1.0.5-orange.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4c6aa76f09fd437eb3888855fccc9604)](https://www.codacy.com/manual/vigo/django-vb-baseapp?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vbyazilim/django-vb-baseapp&amp;utm_campaign=Badge_Grade)\n\n# django-vb-baseapp\n\nThis is a helper app for https://github.com/vbyazilim/django-vb-admin\nBefore you use this, you need to install `django-vb-admin`:\n\n```bash\n$ pip install django-vb-admin\n$ django-vb-admin -h\n```\n\nAlso, package is available on pip but dependent to `django-vb-admin`:\n\n```bash\n$ pip install django-vb-baseapp\n```\n\n## Features\n\n- Two abstract custom base models: `CustomBaseModel` and `CustomBaseModelWithSoftDelete`\n- Two custom base model admins for `CustomBaseModelAdmin` and `CustomBaseModelAdminWithSoftDelete`\n- Soft deletion feature and admin actions for `CustomBaseModelAdminWithSoftDelete`\n- `pre_undelete` and `post_undelete` signals for **soft delete** operation\n- Pre enabled models admin site: `ContentTypeAdmin`, `LogEntryAdmin`, `PermissionAdmin`, `UserAdmin`\n- Timezone and locale middlewares\n- HTML level onscreen debugging feature for views!\n- Handy utils: `numerify`, `save_file`, `SlackExceptionHandler`\n- Fancy file widget: `AdminImageFileWidget` for `ImageField` on admin by default\n- `OverwriteStorage` for overwriting file uploads\n- Custom file storage for missing files for development environment: `FileNotFoundFileSystemStorage`\n- Custom and configurable error page views for: `400`, `403`, `404`, `500`\n- Custom management command with basic output feature `CustomBaseCommand`\n- Builtin `console`, `console.dir()` via `vb-console` [package][vb-console]\n- Simpler server logging for `runserver_plus`\n- This project uses [bulma.io][bulma.io] as HTML/CSS framework, ships with **jQuery** and **Fontawesome**\n\n---\n\n## Screenshots\n\n<table>\n    <tr>\n        <td><img src=\"screenshots/vb_baseapp-admin-changelist-1.png\" alt=\"Change list 1\"></td>\n        <td><img src=\"screenshots/vb_baseapp-admin-changelist-2.png\" alt=\"Change list 2\"></td>\n    </tr>\n    <tr>\n        <td><img src=\"screenshots/vb_baseapp-admin-change-form-1.png\" alt=\"Change form 1\"></td>\n        <td><img src=\"screenshots/vb_baseapp-admin-change-form-2.png\" alt=\"Change form 2\"></td>\n    </tr>\n</table>\n\n---\n\n## Tutorial\n\nLet’s build a basic blog with categories! First, create your virtual environment:\n\n```bash\n# via builtin\n$ python -m venv my_env\n$ source my_env/bin/activate\n\n# or via virtualenvwrapper\n$ mkvirtualenv my_env\n```\n\nNow, create you database;\n\n```bash\n$ createdb my_project_dev\n```\n\nNow set your environment variables:\n\n```bash\n$ export DJANGO_SECRET=$(head -c 75 /dev/random | base64 | tr -dc 'a-zA-Z0-9' | head -c 50)\n$ export DATABASE_URL=\"postgres://localhost:5432/my_project_dev\"\n```\n\nEdit `my_env/bin/activate` or `~/.virtualenvs/my_env/bin/postactivate`\n(*according to your virtualenv creation procedure*) and put these export\nvariables in it. Will be handy next time you activate the environment. Now;\n\n```bash\n$ pip install django-vb-admin\n$ cd /path/to/my-django-project\n$ django-vb-admin startproject\n# or\n$ django-vb-admin startproject --target=\"/path/to/folder\"\n```\n\nYou’ll see:\n\n```bash\nSetup completed...\nNow, create your virtual environment and run\n\n\tpip install -r requirements/development.pip\n\n```\n\nmessage. Now;\n\n```bash\n$ pip install -r requirements/development.pip\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying sessions.0001_initial... OK\n```\n\nNow, we have a ready Django project. Let’s check;\n\n```bash\n$ python manage.py runserver_plus\n\n# or\n\n$ rake\n\nINFO |  * Running on http://127.0.0.1:8000/ (Press CTRL+C to quit)\nINFO |  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nDjango version 2.2.6, using settings 'config.settings.development'\nDevelopment server is running at http://[127.0.0.1]:8000/\nUsing the Werkzeug debugger (http://werkzeug.pocoo.org/)\nQuit the server with CONTROL-C.\nWARNING |  * Debugger is active!\nWARNING |  * Debugger PIN disabled. DEBUGGER UNSECURED!\n```\n\nLet’s create a new app!\n\n```bash\n$ python manage.py create_app blog\n\n# or\n\n$ rake new:application[blog]\n\n\"blog\" application created.\n\n\n    - Do not forget to add your `blog` to `INSTALLED_APPS` under `config/settings/base.py`:\n\n    INSTALLED_APPS += [\n        'django_extensions',\n        'blog.apps.BlogConfig', # <-- add this\n    ]\n\n    - Do not forget to fix your `config/urls.py`:\n\n    # ...\n    # add your newly created app's urls here!\n    urlpatterns += [\n        # ...\n        # this is just an example!\n        path('__blog__/', include('blog.urls', namespace='blog')),\n        # ..\n    ]\n    # ...\n```\n\nYou can follow the instructions, fix your `config/settings/base.py` and\n`config/urls.py` as seen on the command output. Now run development server\nand call the url:\n\n```bash\n$ python manage.py runserver_plus\n```\n\nOpen `http://127.0.0.1:8000/__blog__/`. Also, another builtin app is running;\n`http://127.0.0.1:8000/__vb_baseapp__/`. You can remove `__vb_baseapp__`\nconfig from `config/urls.py`.\n\nNow let’s add some models. We have 3 choices as parameter:\n\n1. `django`: Uses Django’s `models.Model`\n1. `basemodel`: Uses `CustomBaseModel`\n1. `softdelete`: Uses `CustomBaseModelWithSoftDelete`\n\nWe’ll use soft deletable model feature. Let’s create `Post` and `Category`\nmodels:\n\n```bash\n$ python manage.py create_model blog post softdelete\n\n# or\n\n$ rake new:model[blog,post,softdelete]\n\nmodels/post.py created.\nadmin/post.py created.\npost model added to models/__init__.py\npost model added to admin/__init__.py\n\n\n    `post` related files created successfully:\n\n    - `blog/models/post.py`\n    - `blog/admin/post.py`\n\n    Please check your models before running `makemigrations` ok?\n\n$ python manage.py create_model blog category softdelete\n\n# or\n\n$ rake new:model[blog,category,softdelete]\n\nmodels/category.py created.\nadmin/category.py created.\ncategory model added to models/__init__.py\ncategory model added to admin/__init__.py\n\n\n    `category` related files created successfully:\n\n    - `blog/models/category.py`\n    - `blog/admin/category.py`\n\n    Please check your models before running `makemigrations` ok?\n\n$ python manage.py create_model blog tag softdelete\n\n# or\n\n$ rake new:model[blog,tag,softdelete]\n\nmodels/tag.py created.\nadmin/tag.py created.\ntag model added to models/__init__.py\ntag model added to admin/__init__.py\n\n\n    `tag` related files created successfully:\n\n    - `blog/models/tag.py`\n    - `blog/admin/tag.py`\n\n    Please check your models before running `makemigrations` ok?\n```\n\nLet’s fix models before creating and executing migrations:\n\n```python\n# blog/models/post.py\n\nimport logging\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Post']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Post(CustomBaseModelWithSoftDelete):\n    author = models.ForeignKey(\n        to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='posts', verbose_name=_('author')\n    )\n    category = models.ForeignKey(\n        to='Category', on_delete=models.CASCADE, related_name='posts', verbose_name=_('category')\n    )\n    title = models.CharField(max_length=255, verbose_name=_('title'))\n    body = models.TextField(verbose_name=_('body'))\n    tags = models.ManyToManyField(to='Tag', related_name='posts', blank=True)\n\n    class Meta:\n        app_label = 'blog'\n        verbose_name = _('post')\n        verbose_name_plural = _('posts')  # check pluralization\n\n    def __str__(self):\n        return self.title\n```\n\nand `Category`:\n\n```python\n# blog/models/category.py\n\nimport logging\n\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Category']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Category(CustomBaseModelWithSoftDelete):\n    title = models.CharField(max_length=255, verbose_name=_('title'))\n\n    class Meta:\n        app_label = 'blog'\n        verbose_name = _('category')\n        verbose_name_plural = _('categories')  # check pluralization\n\n    def __str__(self):\n        return self.title\n```\n\nand `Tag`:\n\n```python\n# blog/models/tag.py\n\nimport logging\n\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Tag']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Tag(CustomBaseModelWithSoftDelete):\n    name = models.CharField(max_length=255, verbose_name=_('name'))\n\n    class Meta:\n        app_label = 'blog'\n\n    def __str__(self):\n        return self.name\n```\n\nLet’s create and run migration file:\n\n```bash\n$ python manage.py makemigrations --name create_post_category_and_tag\n\n# or\n\n$ rake db:update[blog,create_post_category_and_tag]\n\nMigrations for 'blog':\n  applications/blog/migrations/0001_create_post_category_and_tag.py\n    - Create model Category\n    - Create model Tag\n    - Create model Post\n\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0001_create_post_category_and_tag... OK\n```\n\nLet’s tweak `blog/admin/post.py`:\n\n```python\n# blog/admin/post.py\n\nimport logging\n\nfrom django.contrib import admin\n\nfrom console import console\n\nfrom vb_baseapp.admin import (\n    CustomBaseModelAdminWithSoftDelete,\n)\n\nfrom ..models import Post\n\n__all__ = ['PostAdmin']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\n@admin.register(Post)\nclass PostAdmin(CustomBaseModelAdminWithSoftDelete):\n    list_filter = ('category', 'tags', 'author')\n    list_display = ('__str__', 'author')\n    ordering = ('title',)\n    # hide_deleted_at = False\n```\n\nLet’s create super user and jump in to admin pages. `AUTH_PASSWORD_VALIDATORS`\nis removed from **development** settings, you can type any password :)\n\n```bash\n$ python manage.py createsuperuser --username=\"${USER}\" --email=\"your@email.com\"\n$ python manage.py runserver_plus\n\n# or\n\n$ rake\n\nINFO |  * Running on http://127.0.0.1:8000/ (Press CTRL+C to quit)\nINFO |  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nDjango version X.X.X, using settings 'config.settings.development'\nDevelopment server is running at http://[127.0.0.1]:8000/\nUsing the Werkzeug debugger (http://werkzeug.pocoo.org/)\nQuit the server with CONTROL-C.\nWARNING |  * Debugger is active!\nWARNING |  * Debugger PIN disabled. DEBUGGER UNSECURED!\nINFO | GET | 302 | /admin/\nINFO | GET | 200 | /admin/login/?next=/admin/\nINFO | GET | 404 | /favicon.ico\n:\n:\n```\n\nNow open `http://127.0.0.1:8000/admin/` and add new blog post! Add different\ncategories and few posts for those categories then open \n`http://127.0.0.1:8000/admin/blog/category/` page. \nIn the Action menu, you’ll have couple extra options:\n\n- Delete selected categories\n- Recover selected categories (*Appears if you are filtering inactive records*)\n- Hard delete selected categories\n\nNow, delete one or more category. Check **activity state** filter for both post and\ncategory models. You can recover deleted items from the action menu too.\n\n---\n\n## Models\n\n### `CustomBaseModel`\n\nThis is a common model. By default, `CustomBaseModel` contains these fields:\n\n- `created_at`\n- `updated_at`\n\nWe are overriding the default manager. `CustomBaseModel` uses `CustomBaseModelQuerySet` as\nmanager, `CustomBaseModelWithSoftDelete` uses `CustomBaseModelWithSoftDeleteManager`.\n`CustomBaseModelWithSoftDelete` has one extra field called `deleted_at`\n\nYou can make these queries:\n\n```python\n>>> Post.objects.actives()      # filters: non-soft-deleted items\n>>> Post.objects.inactives()    # filters: soft-deleted items\n>>> Post.objects.all()          # returns everything (both actives and inactives)\n```\n\n### `CustomBaseModelWithSoftDelete`\n\nThis model inherits from `CustomBaseModel` and provides fake deletion which is\nprobably called **SOFT DELETE**. This means, when you call model’s `delete()`\nmethod or QuerySet’s `delete()` method, it acts like delete action but never\ndeletes the data.\n\nJust sets the `deleted_at` field to **NOW**.\n\nThis works exactly like Django’s `delete()`. Broadcasts `pre_delete` and\n`post_delete` signals and returns the number of objects marked as deleted and\na dictionary with the number of deletion-marks per object type.\n\nYou can call `hard_delete()` method to delete an instance or a queryset\nactually.\n\n#### How soft-delete works?\n\nWhen you call `.delete()` method of a model instance or queryset, app\nsets `deleted_at` attribute to **NOW** all the way down through releated\nforeignkey and many-to-many fields. This means, you still keep everything.\n\nNothing is actually deleted, therefore your database constraints are still\nwork fine. When you access deleted (*inactive*) object from admin site,\nyou’ll see \"deleted\" text prefix in your foreignkey and many-to-many fields\nif your related objecst are `CustomBaseModelWithSoftDelete` instances.\n\nWhen you click **recover** button in the same page, all related and soft-deleted\nobjects’ `deleted_at` set to `NULL` and available again.\n\nPlease use `.actives()` queryset method instead of `.all()`. Why? `.all()`\nmethod is untouched and works as default. When `all()` called, returning\nqueryset set contains everything event if the `deleted_at` is NULL or not...\n\n#### Examples\n\n```python\n>>> Post.objects.all()\n\nSELECT \"blog_post\".\"id\",\n       \"blog_post\".\"created_at\",\n       \"blog_post\".\"updated_at\",\n       \"blog_post\".\"deleted_at\",\n       \"blog_post\".\"author_id\",\n       \"blog_post\".\"category_id\",\n       \"blog_post\".\"title\",\n       \"blog_post\".\"body\"\n  FROM \"blog_post\"\n LIMIT 21\n\n\nExecution time: 0.000950s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Post: Python post 1>, <Post: Python post 2>, <Post: Python post 3>, <Post: Python post 4>, <Post: Ruby post 1>, <Post: Ruby post 2>, <Post: Ruby post 3>, <Post: Ruby post 4>, <Post: Bash post 1>, <Post: Bash post 2>, <Post: Bash post 3>, <Post: Bash post 4>, <Post: Golang post 1>, <Post: Golang post 2>, <Post: Golang post 3>, <Post: Golang post 4>]>\n\n>>> Category.objects.all()\n\nSELECT \"blog_category\".\"id\",\n       \"blog_category\".\"created_at\",\n       \"blog_category\".\"updated_at\",\n       \"blog_category\".\"deleted_at\",\n       \"blog_category\".\"title\"\n  FROM \"blog_category\"\n LIMIT 21\n\n\nExecution time: 0.000643s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Category: Python>, <Category: Ruby>, <Category: Bash>, <Category: Golang>]>\n\n>>> Tag.objects.all()\n\nSELECT \"blog_tag\".\"id\",\n       \"blog_tag\".\"created_at\",\n       \"blog_tag\".\"updated_at\",\n       \"blog_tag\".\"deleted_at\",\n       \"blog_tag\".\"name\"\n  FROM \"blog_tag\"\n LIMIT 21\n\n\nExecution time: 0.000519s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Tag: textmate>, <Tag: pyc>, <Tag: irb>, <Tag: ipython>, <Tag: lock>, <Tag: environment>]>\n\n>>> Category.objects.get(title='Bash').delete()\n(9, {'blog.Post_tags': 4, 'blog.Category': 1, 'blog.Post': 4})\n\n>>> Category.objects.delete()\n(11, {'blog.Post_tags': 4, 'blog.Category': 3, 'blog.Post': 4})\n\n>>> Category.objects.inactives()\n\nSELECT \"blog_category\".\"id\",\n       \"blog_category\".\"created_at\",\n       \"blog_category\".\"updated_at\",\n       \"blog_category\".\"deleted_at\",\n       \"blog_category\".\"title\"\n  FROM \"blog_category\"\n WHERE \"blog_category\".\"deleted_at\" IS NOT NULL\n LIMIT 21\n\n\nExecution time: 0.000337s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Category: Bash>]>\n\n>>> Post.objects.inactives()\n\nSELECT \"blog_post\".\"id\",\n       \"blog_post\".\"created_at\",\n       \"blog_post\".\"updated_at\",\n       \"blog_post\".\"deleted_at\",\n       \"blog_post\".\"author_id\",\n       \"blog_post\".\"category_id\",\n       \"blog_post\".\"title\",\n       \"blog_post\".\"body\"\n  FROM \"blog_post\"\n WHERE \"blog_post\".\"deleted_at\" IS NOT NULL\n LIMIT 21\n\n\nExecution time: 0.000387s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Post: Bash post 1>, <Post: Bash post 2>, <Post: Bash post 3>, <Post: Bash post 4>]>\n\n>>> Category.objects.inactives().undelete()\n(9, {'blog.Post_tags': 4, 'blog.Category': 1, 'blog.Post': 4})\n\n>>> Category.objects.inactives()\n<CustomBaseModelWithSoftDeleteQuerySet []>\n\n>>> Post.objects.inactives()\n<CustomBaseModelWithSoftDeleteQuerySet []>\n```\n\n`CustomBaseModelWithSoftDeleteQuerySet` has these query options:\n\n- `.actives()` : filters if `CustomBaseModelWithSoftDelete.deleted_at` is set to `NULL`\n- `.inactives()` : filters if `CustomBaseModelWithSoftDelete.deleted_at` is set not `NULL`\n- `.delete()` : soft delete on given object/queryset.\n- `.undelete()` : recover soft deleted on given object/queryset.\n- `.hard_delete()` : this is real delete. this method erases given object/queryset and there is no turning back!.\n\n\nWhen soft-delete enabled (*during model creation*), Django admin will\nautomatically use `CustomBaseModelAdminWithSoftDelete` which is inherited from:\n `CustomBaseModelAdmin` <- `admin.ModelAdmin`.\n\n---\n\n## Model Admins\n\n### `CustomBaseModelAdmin`, `CustomBaseModelAdminWithSoftDelete`\n\nInherits from `admin.ModelAdmin`. When model is created via `rake\nnew:model...` or via management command, admin file is generated automatically.\nThis model admin overrides `models.ImageField` form field and displays fancy\nthumbnail for images. By default, uses cached paginator and sets `show_full_result_count`\nto `False` for performance improvements.\n\n#### Model Admin Properties\n\n`show_goback_button` is set to `True` by default. You can disable via;\n\n```python\nclass ExampleAdmin(CustomBaseModelAdminWithSoftDelete):\n    # ...\n    show_goback_button = False\n    # ...\n```\n\n- `show_full_result_count` is set to `False` by default.\n- `hide_deleted_at` is set to `True` by default. This means, you will not see\nthat field while editing the instance.\n\nExample for `Post` model admin (*auto generated*).\n\n```python\nimport logging\n\nfrom django.contrib import admin\n\nfrom console import console\nfrom vb_baseapp.admin import (\n    CustomBaseModelAdminWithSoftDelete,\n)\n\nfrom ..models import Post\n\n__all__ = ['PostAdmin']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\n@admin.register(Post)\nclass PostAdmin(CustomBaseModelAdminWithSoftDelete):\n    # hide_deleted_at = False\n```\n\nBy default, `deleted_at` excluded from admin form like `created_at` and\n`updated_at` fields. You can also override this via `hide_deleted_at`\nattribute. Comment/Uncomment lines according to your needs! This works only in\n`CustomBaseModelAdminWithSoftDelete`.\n\n`CustomBaseModelAdminWithSoftDelete` also comes with special admin action. You can\nrecover/make active (*undelete*) multiple objects like deleting feature of\nDjango’s default.\n\n### Extra Features\n\nWhen you’re dealing with soft-deleted objects, you’ll see **HARD DELETE** and \n**RECOVER** buttons in the change form. Hard delete really wipes the items\nfrom database. Recover, recovers/undeletes object and related elements.\n\nYou’ll also have **GO BACK** button too :)\n\n---\n\n## MiddleWare\n\n### `CustomLocaleMiddleware`\n\nThis is mostly used for our custom projects. Injects `LANGUAGE_CODE` variable to\n`request` object. `/en/path/to/page/` sets `request.LANGUAGE_CODE` to `en` otherwise `tr`.\n\n```python\n# add this to your settings/base.py\nMIDDLEWARE += ['baseapp.middlewares.CustomLocaleMiddleware']\n```\n\n### `TimezoneMiddleware`\n\nIf you have custom user model or you have `timezone` field in your `request.user`,\nthis middleware activates timezone for user.\n\n---\n\n## Custom Error Pages\n\nYou have browsable (only in development mode) and customizable error handler\nfunctions and html templates now!. Templates are under `templates/custom_errors/`\nfolder.\n\n---\n\n## Goodies\n\n### `HtmlDebugMixin`\n\n![Example view](screenshots/vb_baseapp-view.png \"Debug on view layer\")\n\n`self.hdbg(arg, arg, arg, ...)` method helps you to output/debug some data\nin view layer.\n\n```python\n# example view: index.py\n\nimport logging\n\nfrom django.views.generic.base import TemplateView\n\nfrom console import console\nfrom vb_baseapp.mixins import HtmlDebugMixin\n\n__all__ = ['BlogView']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass BlogView(HtmlDebugMixin, TemplateView):\n    template_name = 'blog/index.html'\n\n    def get_context_data(self, **kwargs):\n        self.hdbg('Hello from hdbg')\n        kwargs = super().get_context_data(**kwargs)\n        console.dir(self.request.user)\n        return kwargs\n```\n\n`{% hdbg %}` tag is added by default in to your `templates/base.html` and works\nonly if the settings `DEBUG` is set to `True`.\n\n```django\n{% load static i18n %}\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{% block title %}{% endblock %}</title>\n    {% if DJANGO_ENV == 'development' %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/bulma.min.0.8.0.css' %}\">\n    <script defer src=\"{% static 'js/fontawesome.5.3.1.all.js' %}\"></script>\n    {% else %}\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\">\n    <script defer src=\"https://use.fontawesome.com/releases/v5.3.1/js/all.js\"></script>\n    {% endif %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/vb-baseapp.css' %}\">\n    <link rel=\"stylesheet\" href=\"{% static 'css/application.css' %}\">\n    {% block extra_css %}{% endblock %}\n    <script defer src=\"{% static 'js/application.js' %}\"></script>\n</head>\n<body>\n    {% hdbg %}\n    {% block body %}{% endblock %}\n    {% block extra_js %}{% endblock %}\n</body>\n</html>\n```\n\nIf you don’t want to extend from `templates/base.html` you can use your\nown template. You just need to add `{% hdbg %}` tag in to your template if\nyou still want to enable this feature.\n\n---\n\n## Reminders\n\nDefault timezone is set to `UTC`, please change this or use according to your\nneeds.\n\n```python\n# config/settings/base.py\n# ...\nTIME_ZONE = 'UTC'\n# ...\n```\n\n---\n\n## Rake Tasks\n\nYou have some handy rake tasks if you like to use `ruby` :)\n\n```bash\n$ rake -T\n\nrake db:migrate[database]                                        # Run migration for given database (default: 'default')\nrake db:roll_back[name_of_application,name_of_migration]         # Roll-back (name of application, name of migration)\nrake db:shell                                                    # run database shell ..\nrake db:show[name_of_application]                                # Show migrations for an application (default: 'all')\nrake db:update[name_of_application,name_of_migration,is_empty]   # Update migration (name of application, name of migration?, is empty?)\nrake default                                                     # Default task: run_server+\nrake locale:compile                                              # Compile locale dictionary\nrake locale:update                                               # Update locale dictionary\nrake new:application[name_of_application]                        # Create new Django application\nrake new:model[name_of_application,name_of_model,type_of_model]  # Create new Model for given application: django,basemodel,softdelete\nrake runserver                                                   # Run server\nrake runserver_plus                                              # Run server+\nrake shell[repl]                                                 # Run shell+ avail: ptpython,ipython,bpython default: ptpython\nrake test:browse_coverage[port]                                  # Browse test coverage\nrake test:coverage[cli_args]                                     # Show test coverage (default: '--show-missing --ignore-errors --skip-covered')\nrake test:run[name_of_application,verbose]                       # Run tests for given application\n```\n\nDefault task is `run_server`. Just type `rake` that’s it! `runserver` uses\n`runserver_plus`. This means you have lots of debugging options!\n\n### `rake` or `rake runserver_plus` or `rake default`\n\nRuns `DJANGO_COLORS='dark' python manage.py runserver_plus --nothreading`\n\n### `rake runserver`\n\nThis is Django’s builtin server: `python manage.py runserver`\n\n### `rake db:migrate[database]`\n\nMigrates database with given database name. Default is `default`. If you like\nto work multiple databases:\n\n```python\n# example configuration\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db', 'development.sqlite3'),\n    },\n    'my_database': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db', 'my_database.sqlite3'),\n    }\n}\n```\n\nYou can just call `rake db:migrate` or specify different database like: \n`rake db:migrate[my_database]` :)\n\n### `rake db:show[name_of_application]`\n\nShow migration information:\n\n```bash\n$ rake db:show[blog]\nblog\n [X] 0001_create_post_category_and_tag\n [ ] 0002_add_spot_field_to_post\n\n$ rake db:migrate\nRunning migration for: default database...\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0002_add_spot_field_to_post... OK\n```\n\n### `rake db:roll_back[name_of_application,name_of_migration]`\n\nYour database must be rollable :) To see available migrations: \n`rake db:roll_back[NAME_OF_YOUR_APPLICATION]`. Look at the list and choose your\ntarget migration. You can use just the number as shortcut. In this example,\nwe’ll roll back to migration number 1, which has a name: `0001_create_post_category_and_tag`\n\n```bash\n$ rake db:roll_back[blog]\nPlease select your migration:\nblog\n [X] 0001_create_post_category_and_tag\n [X] 0002_add_spot_field_to_post\n\n$ rake db:roll_back[blog,1]\nOperations to perform:\n  Target specific migration: 0001_create_post_category_and_tag, from blog\nRunning migrations:\n  Rendering model states... DONE\n  Unapplying blog.0002_add_spot_field_to_post... OK\n\n$ rake db:show[blog]\nblog\n [X] 0001_create_post_category_and_tag\n [ ] 0002_add_spot_field_to_post\n```\n\n### `rake db:update[name_of_application,name_of_migration,is_empty]`\n\nWhen you add/change something in your model, you need to create migrations.\nLet’s say you have added new field to `Post` model in your `blog` app:\n\nIf you don’t provide `name_of_migration` param, you’ll endup with auto\ngenerated name such as `000X_auto_YYYMMDD_HHMM`. You can also create\nempty migration via 3^rd parameter: `yes`\n\n```bash\n$ rake db:update[blog,add_spot_field_to_post]\nMigrations for 'blog':\n  applications/blog/migrations/0002_add_spot_field_to_post.py\n    - Add field spot to post\n\n$ rake db:update[blog,add_new_field_to_post,yes]  # empty migration example\nMigrations for 'blog':\n  applications/blog/migrations/0003_add_new_field_to_post.py\n\n$ cat applications/blog/migrations/0003_add_new_field_to_post.py\n```\n\nempty migration output:\n\n```python\n# Generated by Django 2.2.6 on 2019-11-27 11:13\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('blog', '0002_add_spot_field_to_post'),\n    ]\n\n    operations = [\n    ]\n```\n\n### `rake db:shell`\n\nRuns default database client.\n\n### `rake new:application[name_of_application]`\n\nCreates new application with given application name!\n\n```bash\n$ rake new:application[blog]\n```\n\n### `rake new:model[name_of_application,name_of_model,type_of_model]`\n\nCreates new model! Available model types are:\n\n- `django` (default),\n- `basemodel`\n- `softdelete`\n\n```bash\n$ rake new:model[blog,Post]                # will create model using Django’s `models.Model`\n$ rake new:model[blog,Post,basemodel]      # will create model using our `CustomBaseModel`\n$ rake new:model[blog,Post,softdelete]     # will create model using our `CustomBaseModelWithSoftDelete`\n```\n\n### `rake locale:compile` and `rake locale:update`\n\nWhen you make changes in your application related to locales, run: `rake locale:update`.\nWhen you finish editing your `django.po` file, run `rake locale:compile`.\n\n### `rake shell[repl]`\n\nRuns Django repl/shell with use `shell_plus` of [django-extensions][01].\n `rake shell`. This loads everything to your shell! Also you can see the\nSQL statements while playing in shell. We have couple different repls:\n\n1. `ptpython`\n1. `bpython`\n1. `ipython`\n\nDefault repl is: `ptpython`\n\n```bash\n$ rake shell\n$ rake shell[bpython]\n$ rake shell[ipython]\n```\n\n### `rake test:run[name_of_application,verbose]`\n\nIf you don’t provide `name_of_application` default value will be `applications`. \n`verbose` is `1` by default.\n\nExamples:\n\n```bash\n$ rake test:run\n$ rake test:run[vb_baseapp,2]\n```\n\n### `rake test:coverage[cli_args]`\n\nGet the test report. Default is `--show-missing --ignore-errors --skip-covered` for\n`cli_args` parameter.\n\n```bash\n$ rake test:coverage\n```\n\n### `rake test:browse_coverage[port]`\n\nServes generated html coverages under `htmlcov` folder via `python`. Default port\nis `9001`\n\n---\n\n## Run Tests Manually\n\n```bash\n$ DJANGO_ENV=test python manage.py test vb_baseapp -v 2                                 # or\n$ DJANGO_ENV=test python manage.py test vb_baseapp.tests.test_user.CustomUserTestCase   # run single unit\n$ rake test:run[vb_baseapp]\n```\n\n---\n\n## Manual Usage\n\nLet’s assume you need a model called: `Page`. Create a file under `YOUR_APP/models/page.py`:\n\n```python\n# example for Django’s default model\n# YOUR_APP/models/page.py\n\nfrom django.db import models\n\n__all__ = ['Page',]\n\nclass Page(models.Model):\n    # define your fields here...\n    pass\n\n# YOUR_APP/models/__init__.py\n# append:\nfrom .page import *\n```\n\nor, you can use `CustomBaseModel` or `CustomBaseModelWithSoftDelete`:\n\n```bash\nfrom django.db import models\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Page']\n\nclass Page(CustomBaseModelWithSoftDelete):\n    # define your fields here...\n    pass\n```\n\nNow make migrations etc... Use it as `from YOUR_APP.models import Page` :)\n\n---\n\n## Goodies\n\nWe have some mini helpers and tools shipped with `vb_baseapp`.\n\n### `vb_baseapp.utils.numerify`\n\nLittle helper for catching **QUERY_STRING** parameters for numerical values:\n\n```python\nfrom baseapp.utils import numerify\n\n>>> numerify(\"1\")\n1\n>>> numerify(\"1a\")\n-1\n>>> numerify(\"ab\")\n-1\n>>> numerify(\"abc\", default=44)\n44\n```\n\n### `vb_baseapp.utils.save_file`\n\nWhile using `FileField`, sometimes you need to handle uploaded files. In this\ncase, you need to use `upload_to` attribute. Take a look at the example:\n\n```python\nfrom vb_baseapp.utils import save_file as custom_save_file\n:\n:\n:\nclass User(AbstractBaseUser, PermissionsMixin):\n    :\n    :\n    avatar = models.FileField(\n        upload_to=save_user_avatar,\n        verbose_name=_('Profile Image'),\n        null=True,\n        blank=True,\n    )\n    :\n    :\n```\n\n`save_user_avatar` returns `custom_save_file`’s return value. Default\nconfiguration of for `custom_save_file` is \n`save_file(instance, filename, upload_to='upload/%Y/%m/%d/')`. Uploads are go to\nsuch as `MEDIA_ROOT/upload/2017/09/21/`...\n\nMake your custom uploads like:\n\n```python\nfrom vb_baseapp.utils import save_file as custom_save_file\n\ndef my_custom_uploader(instance, filename):\n    # do your stuff\n    # at the end, call:\n    return custom_save_file(instance, filename, upload_to='images/%Y/')\n\n\nclass MyModel(models.Model):\n    image = models.FileField(\n        upload_to='my_custom_uploader',\n        verbose_name=_('Profile Image'),\n    )\n```\n\n### SlackExceptionHandler\n\n`vb_baseapp.utils.log.SlackExceptionHandler`\n\nYou can send errors/exceptions to [slack](https://api.slack.com) channel.\nJust create a slack app, get the webhook URL and set as `SLACK_HOOK`\nenvironment variable. Due to slack message size limitation, `traceback`\nis disabled.\n\nExample message contains:\n\n- http status\n- error message\n- exception message\n- user.id or None\n- full path\n\n```bash\nhttp status: 500\nERROR (internal IP): Internal Server Error: /__baseapp__/\nException: User matching query does not exist.\nuser_id: anonymous (None)\nfull path: /__baseapp__/?foo=!\n```\n\nYou can enable/disable in `config/settings/production.py` / `config/settings/heroku.py`:\n\n```python\n:\n:\n    'loggers': {\n        'django.request': {'handlers': ['mail_admins', 'slack'], 'level': 'ERROR', 'propagate': False},  # remove 'slack'\n    }\n:\n:\n```\n\n### `vb_baseapp.storage`\n\n#### `FileNotFoundFileSystemStorage`\n\nAfter shipping/deploying Django app, users start to upload files, right ?\nThen you need to implement new features etc. You can get the dump of the\ndatabase but what about uploaded files ? Sometimes files are too much or\ntoo big. If you call, let’s say, a model’s `ImageField`’s `url` property,\nlocal dev server logs lot’s of **file not found** errors to console.\n\nAlso breaks the look of application via broken image signs in browser.\n\nNow, you won’t see any errors... `FileNotFoundFileSystemStorage` is a\nfake storage that handles non existing files. Returns `file-not-found.jpg`\nfrom `static/images/` folder.\n\nThis is **development purposes** only! Do not use in the production!\n\nYou don’t need to change/add anything to your code... It’s embeded to\n`config/settings/development.py`:\n\n```python\n:\n:\nDEFAULT_FILE_STORAGE = 'vb_baseapp.storage.FileNotFoundFileSystemStorage'\n:\n```\n\nYou can disable if you like to...\n\n#### `OverwriteStorage`\n\n`OverwriteStorage` helps you to overwrite file when uploading from django\nadmin. Example usage:\n\n```python\n# in a model\nfrom vb_baseapp.utils.storage image OverwriteStorage\n\nclass MyModel(models.Model):\n    :\n    :\n    photo = models.ImageField(\n        upload_to=save_media_photo,\n        storage=OverwriteStorage(),\n    )\n    :\n    :\n```\n\nAdd `storage` option in your file related fields.\n\n#### `AdminImageFileWidget`\n\nUse this widget in your admin forms. By default, It’s already enabled in\n`CustomBaseModelAdmin`. You can also inject this to Django’s default `ModelAdmin`\nvia example:\n\n```python\nfrom vb_baseapp.widgets import AdminImageFileWidget\n\nclass MyAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.FileField: {'widget': AdminImageFileWidget},\n    }\n```\n\nThis widget uses `Pillow` (*Python Image Library*) which ships with your `base.pip`\nrequirements file. Show image preview, width x height if the file is image.\n\n#### `context_processors.py`\n\nBy default, `vb_baseapp` injects few variables to you context:\n\n- `DJANGO_ENV`\n- `IS_DEBUG`\n- `LANGUAGE_CODE`\n- `CURRENT_GIT_TAG`\n- `CURRENT_PYTHON_VERSION`\n- `CURRENT_DJANGO_VERSION`\n\n---\n\n## License\n\nThis project is licensed under MIT\n\n---\n\n## Contributer(s)\n\n* [Uğur \"vigo\" Özyılmazel](https://github.com/vigo) - Creator, maintainer\n\n---\n\n## Contribute\n\nAll PR’s are welcome!\n\n1. `fork` (https://github.com/vbyazilim/django-vb-baseapp/fork)\n1. Create your `branch` (`git checkout -b my-features`)\n1. `commit` yours (`git commit -am 'Add awesome features'`)\n1. `push` your `branch` (`git push origin my-features`)\n1. Than create a new **Pull Request**!\n\n---\n\n## Change Log\n\n**2019-11-27**\n\n- Version bump\n- Ready to use...\n\n**2019-08-07**\n\n- Initial Beta relase: 1.0.0\n\n---\n\n[vb-console]: https://github.com/vbyazilim/vb-console\n[bulma.io]: https://bulma.io\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vbyazilim/django-vb-baseapp",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-vb-baseapp",
    "package_url": "https://pypi.org/project/django-vb-baseapp/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-vb-baseapp/",
    "project_urls": {
      "Homepage": "https://github.com/vbyazilim/django-vb-baseapp"
    },
    "release_url": "https://pypi.org/project/django-vb-baseapp/1.0.5/",
    "requires_dist": [
      "vb-console"
    ],
    "requires_python": ">=3.6",
    "summary": "Magical app for django-vb-admin",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6729453,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a94feb57d86b125667956b9aee57f545153351e4cdc18b0e1c14b1d3fa93056e",
        "md5": "2eaf024ac5a967c9721130ed35f94c2d",
        "sha256": "b01a10c025645ea03483c3982aeae1a1984255b480375b075a56e69e6f2da3cc"
      },
      "downloads": -1,
      "filename": "django_vb_baseapp-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2eaf024ac5a967c9721130ed35f94c2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 116996,
      "upload_time": "2019-11-27T12:13:46",
      "upload_time_iso_8601": "2019-11-27T12:13:46.781323Z",
      "url": "https://files.pythonhosted.org/packages/a9/4f/eb57d86b125667956b9aee57f545153351e4cdc18b0e1c14b1d3fa93056e/django_vb_baseapp-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f18a523893c1763e47583fb89229061838d8baf3adccb8fb733cec507897b66",
        "md5": "ee741f0c33f68e6aff679cb1c73b8e8a",
        "sha256": "926c8586d80d9f6986da3f048ab8c3ab59a70fca77fc7338577b224c58e43276"
      },
      "downloads": -1,
      "filename": "django-vb-baseapp-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ee741f0c33f68e6aff679cb1c73b8e8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 119396,
      "upload_time": "2019-11-27T12:13:49",
      "upload_time_iso_8601": "2019-11-27T12:13:49.173662Z",
      "url": "https://files.pythonhosted.org/packages/8f/18/a523893c1763e47583fb89229061838d8baf3adccb8fb733cec507897b66/django-vb-baseapp-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}