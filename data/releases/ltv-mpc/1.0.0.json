{
  "info": {
    "author": null,
    "author_email": "St√©phane Caron <stephane.caron@normalesup.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# ltv-mpc\n\n[**Installation**](https://github.com/tasts-robots/ltv-mpc#installation)\n| [**Usage**](https://github.com/tasts-robots/ltv-mpc#usage)\n| [**Example**](https://github.com/tasts-robots/ltv-mpc#example)\n| [**Areas of improvement**](https://github.com/tasts-robots/ltv-mpc#areas-of-improvement)\n| [**Alternatives**](https://github.com/tasts-robots/ltv-mpc#alternatives)\n\n[![Build](https://img.shields.io/github/workflow/status/tasts-robots/ltv-mpc/CI)](https://github.com/tasts-robots/ltv-mpc/actions)\n[![Coverage](https://coveralls.io/repos/github/tasts-robots/ltv-mpc/badge.svg?branch=master)](https://coveralls.io/github/tasts-robots/ltv-mpc?branch=master)\n[![Documentation](https://img.shields.io/badge/docs-online-brightgreen?logo=read-the-docs&style=flat)](https://tasts-robots.org/doc/ltv-mpc/)\n[![PyPI version](https://img.shields.io/pypi/v/ltv-mpc)](https://pypi.org/project/ltv-mpc/0.6.0/)\n![Status](https://img.shields.io/pypi/status/ltv-mpc)\n\nLinear time-variant (LTV) model predictive control in Python. Solve a quadratic program of the form:\n\n> ![ltv-mpc](https://raw.githubusercontent.com/tasts-robots/ltv-mpc/master/doc/src/images/ltv-mpc.svg)\n\nThis module is designed for prototyping. If you need performance, check out the [alternatives](#alternatives) below.\n\nüì¢ **2022-08:** the brand new [mpc_interface](https://github.com/Gepetto/mpc-interface) handles more general cost functions.\n\n## Installation\n\n```sh\npip install ltv-mpc\n```\n\n## Usage\n\nThis module defines a one-stop shop function:\n\n```python\nsolve_mpc(problem: Problem, solver: str) -> Solution\n```\n\nThe [``Problem``](https://tasts-robots.org/doc/ltv-mpc/usage.html#ltv_mpc.problem.Problem) type defines the model predictive control problem (LTV system, LTV constraints, initial state and cost function to optimize) while the [``Solution``](https://tasts-robots.org/doc/ltv-mpc/usage.html#ltv_mpc.solution.Solution) holds the resulting state and input trajectories.\n\n## Example\n\nLet us define a triple integrator:\n\n```python\n    import numpy as np\n\n    horizon_duration = 1.0  # [s]\n    N = 16  # number of discretization steps\n    T = horizon_duration / N\n    A = np.array([[1.0, T, T ** 2 / 2.0], [0.0, 1.0, T], [0.0, 0.0, 1.0]])\n    B = np.array([T ** 3 / 6.0, T ** 2 / 2.0, T]).reshape((3, 1))\n```\n\nSuppose for the sake of example that acceleration is the main constraint acting on our system. We thus define an acceleration constraint ``|acceleration| <= max_accel``:\n\n```python\n    max_accel = 3.0  # [m] / [s] / [s]\n    accel_from_state = np.array([0.0, 0.0, 1.0])\n    C = np.vstack([+accel_from_state, -accel_from_state])\n    e = np.array([+max_accel, +max_accel])\n```\n\nThis leads us to the following linear MPC problem:\n\n```python\n    from ltv_mpc import Problem\n\n    x_init = np.array([0.0, 0.0, 0.0])\n    x_goal = np.array([1.0, 0.0, 0.0])\n    problem = Problem(\n        transition_state_matrix=A,\n        transition_input_matrix=B,\n        ineq_state_matrix=C,\n        ineq_input_matrix=None,\n        ineq_vector=e,\n        initial_state=x_init,\n        goal_state=x_goal,\n        nb_timesteps=N,\n        terminal_cost_weight=1.0,\n        stage_state_cost_weight=None,\n        stage_input_cost_weight=1e-6,\n    )\n```\n\nWe can solve it with:\n\n```python\n    from ltv_mpc import solve_mpc\n\n    solution = solve_mpc(problem, solver=\"quadprog\")\n```\n\nThe solution holds complete state and input trajectories as stacked vectors. For instance, we can plot positions, velocities and accelerations as follows:\n\n```python\n    import pylab\n\n    t = np.linspace(0.0, horizon_duration, N + 1)\n    X = solution.stacked_states\n    positions, velocities, accelerations = X[:, 0], X[:, 1], X[:, 2]\n    pylab.ion()\n    pylab.plot(t, positions)\n    pylab.plot(t, velocities)\n    pylab.plot(t, accelerations)\n    pylab.grid(True)\n    pylab.legend((\"position\", \"velocity\", \"acceleration\"))\n```\n\nThis example produces the following trajectory:\n\n![2022-03-30-172206_1920x1080_scrot](https://user-images.githubusercontent.com/1189580/160871543-3734ec65-fe74-4a6f-8452-a877aa4050b1.png)\n\nThe behavior is a weighted compromise between reaching the goal state (weight ``1.0``) and keeping reasonable finite jerk inputs (weight ``1e-6``). The latter mitigate bang-bang accelerations but prevent fully reaching the goal within the horizon. See the [examples](examples/) folder for more examples.\n\n## Areas of improvement\n\nThis module is incomplete with regards to the following points:\n\n- Cost functions: can be extended to general linear stage cost functions\n- Documentation: there are some undocumented functions\n- Test coverage: only one end-to-end test\n\nNew [contributions](CONTRIBUTING.md) are welcome :)\n\n## Alternatives\n\nThis module is designed for prototyping. If you need performance, check out one of the following libraries, and [open a PR](https://github.com/tasts-robots/ltv-mpc/pulls) if you know other relevant ones:\n\n| Library                                                    | System                | Language   | License      |\n|------------------------------------------------------------|-----------------------|------------|--------------|\n| [Copra (original)](https://github.com/jrl-umi3218/copra)   | Linear time-invariant | C++        | BSD-2-Clause |\n| [Copra (fork)](https://github.com/ANYbotics/copra)         | Linear time-variant   | C++        | BSD-2-Clause |\n| [mpc\\_interface](https://github.com/Gepetto/mpc-interface) | Linear time-variant   | C++/Python | BSD-2-Clause |\n| [Crocoddyl](https://github.com/loco-3d/crocoddyl)          | Nonlinear             | C++        | BSD-3-Clause |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "rate,loop,frequency,regulator",
    "license": null,
    "maintainer": null,
    "maintainer_email": "St√©phane Caron <stephane.caron@normalesup.org>",
    "name": "ltv-mpc",
    "package_url": "https://pypi.org/project/ltv-mpc/",
    "platform": null,
    "project_url": "https://pypi.org/project/ltv-mpc/",
    "project_urls": {
      "Changelog": "https://github.com/tasts-robots/ltv-mpc/blob/master/CHANGELOG.md",
      "Documentation": "https://tasts-robots.org/doc/ltv-mpc/",
      "Source": "https://github.com/tasts-robots/ltv-mpc",
      "Tracker": "https://github.com/tasts-robots/ltv-mpc/issues"
    },
    "release_url": "https://pypi.org/project/ltv-mpc/1.0.0/",
    "requires_dist": [
      "qpsolvers >=1.8.0",
      "sphinx ; extra == \"doc\""
    ],
    "requires_python": ">=3.8",
    "summary": "Linear time-variant model predictive control in Python.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14741068,
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "c9199963a792f151a996788e935e59b9273184a3d462ccd0a0b41766e45674ee",
        "md5": "67f2b7301ce38012c5d56c8d5c1a709d",
        "sha256": "8d3562a70706e378e011c417fbbbb55b7145aeb882311c88d81c526bbc308aea"
      },
      "downloads": -1,
      "filename": "ltv_mpc-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67f2b7301ce38012c5d56c8d5c1a709d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 13426,
      "upload_time": "2022-08-12T14:42:19",
      "upload_time_iso_8601": "2022-08-12T14:42:19.286438Z",
      "url": "https://files.pythonhosted.org/packages/c9/19/9963a792f151a996788e935e59b9273184a3d462ccd0a0b41766e45674ee/ltv_mpc-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b9fa28e3ece805630143f21170ee89f8de05635d967249fcbea26e85cd84b5b3",
        "md5": "9749036976c7a18b4fd6986e5650d51e",
        "sha256": "2c3eadf3c794e2d8c38a445a9109d026a2c121aa6e2a1f49774f967b88a458a1"
      },
      "downloads": -1,
      "filename": "ltv-mpc-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9749036976c7a18b4fd6986e5650d51e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 33296,
      "upload_time": "2022-08-12T14:42:22",
      "upload_time_iso_8601": "2022-08-12T14:42:22.996588Z",
      "url": "https://files.pythonhosted.org/packages/b9/fa/28e3ece805630143f21170ee89f8de05635d967249fcbea26e85cd84b5b3/ltv-mpc-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}