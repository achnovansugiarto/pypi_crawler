{
  "info": {
    "author": "Hugo Souza",
    "author_email": "mail@hugosouza.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SaintLonginus\n A experiment with web scrapping\n\nSaintLonginus is a web crawler that I developed while learning about web scrapping. It's functionality is to search for given words inside a set of pages.\nWhile it looks for references to the searched words within the page, it also looks for links that lead to other pages, increasing its queue of pages to search in.\n\nIt's built on top of [Selenium](https://www.selenium.dev/) and [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n\nIt's name comes from a popular tradition which says that the catholic saint [Longinus](https://en.wikipedia.org/wiki/Longinus) can help you to find anything you are looking for. \n\nThis project is open-source, so feel free to contribute, report issues or make suggestions.\n\nFor any other cases, feel free to email me at [mail@hugosouza.com](mailto:mail@hugosouza.com)\n\n## Doumentation\n\nHere is how you can this crawler\n\n### Longinus class\n\nThe program's main class.\n\n#### Class Constructor:\n\n##### Longinus(name: str, threads: int = 4, wait_for_page_load_ms: int = 500, when_find: callable = write_to_file)\n\nThis is the class constructor, it takes some arguments:\n* *name (string)*: The name of that crawler instance\n\n* *threads (int)*: How many threads it's going to use while searching\n\n* *wait_for_page_load_ms (int)*:  How many milisseconds the crawler is going to wait for the page to load and run all of its scripts until return the source of that page *(this is important to make sure that pages built with React, Angular, Vue or even vanilla JavaScript can render everything it should before the crawler starts scrapping it)*\n\n* *when_find (callable)*: A function that is going to be executed when there's a reference to a specific keyword on that page. The default function writes the url of that page in a text file called **results.txt**. It must take 3 arguments containing the **url of the page**, **keyword found at the page** and **the whole text of the page**:\n\n  ```python\n  def write_to_file(url, keyword, full_text):\n      if \"google.com\" in url:\n          return\n      with open(\"results.txt\", \"a+\") as file:\n          file.write(\"{}: {} \\n\".format(url, keyword))\n          file.write(full_text + \"\\n\\n\")\n          file.close()\n  ```\n\n#### Instance methods:\n\n##### setup(depth: int = 3, strategy=SHALLOW_LINKS, bonus_when_match: int = 1)\n\nThis method configures the process of searching that the bot is going to use. It takes the arguments:\n\n* *Depth (int):* The amount of links beyond the root that are going to be scrapped\n* *strategy (STRATEGY CONSTANT)*: The searching strategy that is going to be used (Read the strategy section) \n* *bonus_when_match (int)*: This bonus is a value that is added to the depth when the bot finds a reference to a keyword on a page. It's a way to \"reward\" the page for having a reference to a keyword because it's likely its links also lead to pages with references to a keyword.\n\nIf you try to start the search without calling **setup** first, it will raise a **AssertionError**.\n\n##### set_url(new_urls: list)\n\nChanges the urls that the crawler is going to take as root when it starts searching. The root urls are the first ones to be scrapped, and starting from them, the scrapper is going to find the next urls to be visited.\n\nWhen a Longinus object is instantiated, the urls' default value is *None*, in that case, the crawler is going to perform a Google search for each keyword and gather a list of urls from the results to be used as root.\n\n##### set_callback(new_callback: callable):\nSets what function is going to be executed when there's a reference to a specific keyword on that page. The default function writes the url of that page in a text file called **results.txt**. It must take 3 arguments containing the **url of the page**, **keyword found at the page** and **the whole text of the page**:\n\n  ```python\n  def write_to_file(url, keyword, full_text):\n      if \"google.com\" in url:\n          return\n      with open(\"results.txt\", \"a+\") as file:\n          file.write(\"{}: {} \\n\".format(url, keyword))\n          file.write(full_text + \"\\n\\n\")\n          file.close()\n  ```\n\n##### set_filter(new_filter: callable)\n\nSets a new filtering function. A filtering function is used to determinate which pages are going to be crawled and which ones aren't based on their url.\n\nThe default function filters pages that contains *\"webcache.googleusercontent.com\"* on their url.\n\nIf you want to create a custom filtering function, follow the structure:\n\n```python\ndef custom_filter(url: str):\n    if condition_to_be_filtered(url):\n        return True \t# This page is going to be filtered (not crawled)\n    return False\t\t# This page is going to be crawled (not filtered)\n```\n\n##### start(keywords: list)\n\nStarts the searching looking for the words described in the **keywords** list.\n\nThe search follow the processes configured in the **setup** method so it must be called after the **setup**.\n\n\n#### Strategies\n\nThere are several constants representing strategies that can be used to setup the crawler:\n\n* *ONLY_ORIGIN_DOMAIN*: Doesn't follow links that lead to a different domain or subdomain\n\n* *ONLY_SUBDOMAINS*: Follow only origin domain and subdomains\n* *FOLLOW_ALL_LINKS:* Follows everything that comes up on the page\n* *SHALLOW_LINKS:* Follows links that lead to other domains with depth 0\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fatorius/Longinus",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "longinus",
    "package_url": "https://pypi.org/project/longinus/",
    "platform": "",
    "project_url": "https://pypi.org/project/longinus/",
    "project_urls": {
      "Bug Tracker": "https://github.com/fatorius/Longinus/issues",
      "Homepage": "https://github.com/fatorius/Longinus"
    },
    "release_url": "https://pypi.org/project/longinus/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A experimental web crawler",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13763455,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3b28ef948bfe21f9b15f25b348f62a6d8905089f492a2672ae7f0e4415396f9",
        "md5": "fb7c632b968130c7171723a77a78e2bc",
        "sha256": "408bc05128bd2ebe3beff3f37352c362cc43767a2cd3dedd8bbedfa79c465da9"
      },
      "downloads": -1,
      "filename": "longinus-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb7c632b968130c7171723a77a78e2bc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8069,
      "upload_time": "2022-02-22T16:16:02",
      "upload_time_iso_8601": "2022-02-22T16:16:02.788879Z",
      "url": "https://files.pythonhosted.org/packages/c3/b2/8ef948bfe21f9b15f25b348f62a6d8905089f492a2672ae7f0e4415396f9/longinus-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe19f69cbe05590b9e3986e20f2b8b4d79480e8bee1309f0f868009e56749663",
        "md5": "5358ba0d30b3cf71abde2c00aa6d07ad",
        "sha256": "5eb77ea1bc96ccc305b71d3b6fe71b23e17fdb02a2386eb7cd5d51f4d3cc7912"
      },
      "downloads": -1,
      "filename": "longinus-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5358ba0d30b3cf71abde2c00aa6d07ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7758,
      "upload_time": "2022-02-22T16:16:04",
      "upload_time_iso_8601": "2022-02-22T16:16:04.874791Z",
      "url": "https://files.pythonhosted.org/packages/fe/19/f69cbe05590b9e3986e20f2b8b4d79480e8bee1309f0f868009e56749663/longinus-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}