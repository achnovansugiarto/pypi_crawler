{
  "info": {
    "author": "Peter Richards",
    "author_email": "prichards@cap-rx.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dos - Document and Validate Flask!\n\n## Introduction\n\ndos is a Python package to make it easy to document and validate a Flask API. Write a single chunk of code to create \nendpoints with both built in validation and automatically generated documentation. The documentation is Open API 3.0 \n(formerly known as Swagger) in JSON form. \n\n## Installation \n\nYou can install the latest version of dos with pip.\n\n```bash\npip install dos\n```\n\n## Hello World\n\n> All of this code is found in the [pet_shop](https://github.com/pr/dos/tree/master/examples/tutorial/pet_shop) example. \n> For a more substantive look at dos, please see [dos in depth](#dos-in-depth)\n\nLet's look at the structure of a typical dos endpoint. The following code defines the `/dog/get` endpoint.\n\n```python\nfrom http import HTTPStatus\nfrom dos.schema import ErrorFields\nfrom pet_shop.model import DogFields\n\ndef handler():\n\n    # ... database query looking for the dog ...\n\n    if dog_found:\n        dog = {\n            \"name\": \"Spot\",\n            \"breed\": \"Poodle\"\n        }\n        return HTTPStatus.OK, dog\n    else:\n        return HTTPStatus.NOT_FOUND, {\"message\": \"No dog by that name found!\"}\n\n\ndef input_schema():\n    return DogFields().specialize(only=[\"name\"])\n\n\ndef output_schema():\n    return {\n        HTTPStatus.OK: DogFields().all(),\n        HTTPStatus.NOT_FOUND: ErrorFields().all()\n    }\n```\n\nEach endpoint is made up of 3 critical components. \n\n1. `handler()`\n\nThe handler defines the endpoint functionality. Adding to the database, calling another endpoint, it all happens here.\n\n2. `input_schema()`\n\nThe input_schema defines what fields the endpoint expects. These are typically defined elsewhere and imported, but they\ndon't have to be.\n\n3.  `output_schema()`\n\nThe output_schema defines what fields the endpoint is allowed to expose. Critically, if the handler sets a field that is \nnot defined in the output_schema, that field will not be exposed by the API. Because endpoints can produce different HTTP \nstatuses, the output_schema is a dictionary where the keys are all the statuses produced by the endpoint.\n\n---\n\nThe endpoints import fields typically defined in another file. Here is the DogFields class from above.\n\n```python\nfrom dos import prop\nfrom dos.schema import Fields\n\nclass DogFields(Fields):\n    base_schema = {\n        \"name\": prop.String(\"The dog's name.\"),\n        \"breed\": prop.String(\"The dog's breed.\")\n    }\n\n    def __init__(self):\n        super().__init__(self.base_schema)\n```\n\nEvery Fields class needs to have a base_schema, a dictionary made up of dos props. Read more about props [here](#props).\n\nThe Field class gives additional functionality outlined [here](#the-field-class).\n\n---\n\nNow that we've defined an endpoint, we can create out flask app. It will look something like this: \n\n```python\nfrom dos.open_api import OpenAPI\nfrom dos.flask_wrappers import wrap_validation, wrap_handler, wrap_route\nfrom flask import Flask, jsonify, render_template\n\nfrom pet_shop.api.dog import get as dog_get\n\ndef create_app():\n    app = Flask(__name__)\n    open_api = OpenAPI(\"Pet Shop API\", \"1.0\")\n\n    handler_mapping = [\n        (dog_get, \"/dog/get\", \"get\"),\n    ]\n\n    for module, path, http_method in handler_mapping:\n        handler = wrap_handler(module.__name__, module.handler)\n        handler = wrap_validation(handler, module)\n        wrap_route(app, handler, path, http_method)\n        open_api.document(module, path, http_method)\n\n    @app.route(\"/\")\n    def index():\n        return render_template(\"index.html\")\n\n    @app.route(\"/docs\")\n    def docs(): \n        return render_template(\"docs.html\")\n\n    @app.route(\"/open_api.json\")\n    def open_api_endpoint():\n        return jsonify(open_api)\n\n    return app\n\n```\n\nThis will create a flask app with the endpoint we just defined, as well as documenting it with Open API 3.0 JSON. \n\nFor more about the Flask Wrappers, please look [here](#flask-wrappers)\n\nThat's all there is to it. Once the general structure is set up, each additional endpoint should be relatively simple \nto implement.\n\nTo run the full working example, please see [pet_shop](https://github.com/pr/dos/examples/tutorial/pet_shop). \n\n## dos in Depth\n\n### Props\n\nThe foundation of dos is props. There are nine different prop types, 6 which are represented by Open API:\n\nName | Python Type | OpenAPI Representation | Additional Notes\n--- | --- | --- | ---\nInteger | `int` | Yes\nNumber | `int`, `float`, `decimal.Decimal` | Yes\nNumeric | `int`, `float`, `decimal.Decimal`, `str` | No | The string must contain a valid number\nString | `str` | Yes\nDateTime | `str`, `arrow.Arrow` | No | The string must contain a valid arrow DateTime\nEnum | `enum.Enum` | No\nBoolean | `bool` | Yes\nObject | `dict` | Yes\nArray | `list` | Yes\n\nProps are used to capture the structure of the inputs and outputs of endpoints.\n\nInitializing a Prop is simple, and is always done in the context of a python dictionary \ncapturing the structure of the JSON.\n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"name\": prop.String(),\n}\n```\n\n#### Customizing Props\n\nProps take four optional arguments. \nDescription is a string explaining what the prop represents, and is displayed in the documentation.\n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"name\": prop.String(description=\"The dog's name.\"),\n}\n```\n\nRequired and nullable capture whether the prop is required and nullable. These are used for both validation and Open API.\n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"name\": prop.String(required=False, nullable=True),\n}\n```\n\nAll props have these three arguments, and a final one called validators.\n\n#### Prop Validation \n\ndos has a few validators built in as exemplars, but feel free to write your own Validators, specific to the domain your API is capturing.\n\nAll validators define `supported_prop_classes`, because not all validation is applicable to every prop. \n(You wouldn't validate if an array was a Social Security Number!) \n\nUsing a Validator looks like this:\n\n```python\nfrom dos import prop\nfrom dos.validators import ExactLength\n\nbase_schema = {\n    \"name\": prop.String(\"This string must be 8 characters long\", validators=ExactLength(8)),\n}\n```\n\nThe validator itself looks like this:\n\n```python\nfrom dos import prop\nfrom dos.validators import Validator\n\nclass ExactLength(Validator):\n    supported_prop_classes = [prop.String, prop.Number, prop.Numeric, prop.Integer]\n\n    def __init__(self, exact_length=None):\n        self.exact_length = exact_length\n\n    def validate_prop(self, prop_class, prop_value):\n        super().validate_prop(prop_class, prop_value)\n\n        if len(prop_value) != self.exact_length:\n            return (f\"{prop_class.__name__} is not the correct length! The string \\'{prop_value}\\' is \"\n                    f\"{len(prop_value)} characters long, not {self.exact_length}!\")\n\n        return None\n```\n\nEvery validator needs to define `supported_prop_classes` and a `validate_prop` function. \n\nIf you have a good one, feel free to submit a pull request.\n\n#### Objects and Arrays\n\nObjects and Arrays take additional arguments, due to their special nature.\n\nObjects take their structure, looking something like this: \n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"name\": prop.Object(structure={\n        \"name\": prop.String(\"The object has a string in it\"),\n        \"boolean_field\": prop.Boolean(\"And also a boolean\")\n    }),\n}\n```\n\nStructure is mandatory, and is a dictionary of props. Validation will look for dictionaries in the JSON that match the \noutlined structure.\n\nArray does a similar thing with the repeated_structure argument. \n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"names\": prop.Array(repeated_structure=prop.String(\"just a list of strings\")),\n}\n```\n\nYou can even put these together, and have an array of objects!\n\n```python\nfrom dos import prop\n\nbase_schema = {\n    \"names\": prop.Array(repeated_structure=prop.String(\"just a list of strings\")),\n    \"array_of_objects\": prop.Array(\n        repeated_structure=prop.Object(\n            structure={\n                \"sub_string\": prop.String(\"the string\", required=True, nullable=False),\n                \"required_one\": prop.String(required=True, nullable=False)\n            }\n        ),\n        description=\"A list of plans.\"\n    )\n}\n```\n\n#### Prop Wrappers\n\nProp Wrappers are another way to capture what a JSON field expects. Currently, they are used for fields with multiple valid inputs.\n\nSay a field can take either a string or a boolean. dos captures this idea with a prop wrapper.\n\n```python\nfrom dos import prop\nfrom dos import prop_wrapper\n\nbase_schema = {\n    \"boolean_or_string\": prop_wrapper.OneOf([\n        prop.String(),\n        prop.Boolean()\n    ]),\n}\n```\n\nCritically, the OneOf prop wrapper is a just an array of props, meaning all the customization outlined above is still possible.\nA convoluted example could be something like this:\n\n```python\nfrom dos import prop\nfrom dos import prop_wrapper\nfrom dos.validators import ExactLength\n\nbase_schema = {\n    \"boolean_or_string\": prop_wrapper.OneOf([\n        prop.String(validators=ExactLength(7)),\n        prop.Boolean(required=False, nullable=False)\n    ]),\n}\n```\n\nAll of this is enforced and valid. \n\n### The Field Class \n\nFields are a collection of Props and Prop Wrappers that make up an object. They are a way to give semantically meaningful names to \ncollections of Props and Prop Wrappers, and capture the object oriented nature of some APIs. \n\n```python\nfrom dos import prop\nfrom dos.schema import Fields\n\nclass DogFields(Fields):\n    base_schema = {\n        \"name\": prop.String(\"The dog's name.\"),\n        \"breed\": prop.String(\"The dog's breed.\")\n    }\n\n    def __init__(self):\n        super().__init__(self.base_schema)\n```\n\nAll fields need a base_schema, which is where the Props and Prop Wrappers that make up the collection are stored.\n\n#### Field Customization \n\nThe Fields class gives many opportunities for customization of input and output schema.\n\n```python\nfrom http import HTTPStatus\nfrom pet_shop.model import DogFields\n\ndef input_schema():\n    return DogFields().specialize(only=[\"name\"])\n\ndef output_schema():\n    return {\n        HTTPStatus.OK: DogFields().all(),\n    }\n```\n\n`specialize` allows picking and choosing props, while `all` will use every prop defined by the Field. \n\n`specialize` means any Field object can be customized to it's application, by overriding fields on specific props, \nonly using some fields, and/or excluding other fields.\n\n```python\nfrom pet_shop.model import DogFields\n\ndef input_schema():\n    return DogFields().specialize(overrides={\n        \"breed\": {\n            \"required\": False,\n        },\n    }, exclude=[\"name\"])\n```\n\nThus, it is possible to capture objects coming in and out of the API, while tailoring them to specific use cases.\n\n### Flask Wrappers\n\nFlask Wrappers are how the modules that define API endpoints are integrated with Flask. \n\n```python\nfrom dos.flask_wrappers import wrap_validation, wrap_handler, wrap_route\nfrom flask import Flask\n\nfrom pet_shop.api.dog import get as dog_get\n\napp = Flask(__name__)\n\nhandler_mapping = [\n    (dog_get, \"/dog/get\", \"get\"),\n]\n\nfor module, path, http_method in handler_mapping:\n    handler = wrap_handler(module.__name__, module.handler)\n    handler = wrap_validation(handler, module)\n    wrap_route(app, handler, path, http_method)\n```\n\nThe handler_mapping is a list of every endpoint that needs to be documented and implemented with dos. The module,\npaired with a string representation of its path and the HTTP method it supports, is then processed with flask wrappers.\n\n`wrap_handler` takes the module and extracts the handler. `wrap_validation` parses the input_schema and the output_schema\nand adds validation to the handler to enforce their constraints. Finally, `wrap_route` adds the endpoint to the flask app \nitself. \n\n\n### Open API \n\nIn same place you create your Flask app, it is easy to also create Open API documentation for that app. \n\n```python\nfrom dos.open_api import OpenAPI\nfrom flask import Flask\n\ndef create_app():\n    app = Flask(__name__)\n    open_api = OpenAPI(\"Your API Name\", \"1.0\")\n```\n\nYou can customize the Open API with contact information, a logo, and tags.\n\n```python\nfrom dos.open_api import OpenAPI\n\nopen_api = OpenAPI(\"Your API Name\", \"1.0\")\nopen_api.add_contact(\"Pet Shop Dev Team\", \"https://www.example.com\", \"pet_shop@example.com\")\nopen_api.add_logo(\"/static/pet_shop.png\", \"#7D9FC3\", \"Pet Shop\", \"/\")\nopen_api.add_tag(\n    \"introduction\",\n    \"Welcome! This is the documentation for the API.\",\n)\n```\n\nTags are important for organizing endpoints. If you have a `dog/create` and a `/dog/delete` endpoint, create a \ndog tag to group them together.\n\n```python\nfrom dos.open_api import OpenAPI\n\nopen_api = OpenAPI(\"Your API Name\", \"1.0\")\nopen_api.add_tag(\n    \"dog\",\n    \"Endpoints for interacting with dogs.\",\n)\n```\n\nIf you want to add text to the top of the Open API JSON, so others know how it was made, use the \ndisclaimer functionality.\n\n\n```python\nfrom dos.open_api import OpenAPI\n\nopen_api = OpenAPI(\"Your API Name\", \"1.0\")\nopen_api.add_disclaimer(\n    \"This file is generated automatically. Do not edit it directly! Edit \"\n    \"the input_schema and output_schema of the endpoint you are changing.\"\n)\n```\n\nFinally, to take the `input_schema` and `output_schema` defined in each endpoint module and make Open API out of it,\ncall document. \n\n```python\nfrom dos.open_api import OpenAPI\nfrom pet_shop.api.dog import get as dog_get\n\nopen_api = OpenAPI(\"Your API Name\", \"1.0\")\n\nhandler_mapping = [\n    (dog_get, \"/dog/get\", \"get\"),\n]\n\nfor module, path, http_method in handler_mapping:\n    open_api.document(module, path, http_method)\n```\n\nThe same code you used for validation will also be used for documentation!\n\n# Acknowledgements\n\nDeveloped at [Capital Rx](https://cap-rx.com/) with team input and assistance, open sourced with \npermission from [Ryan Kelley, CTO](https://github.com/f0rk). \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pr/dos",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dos",
    "package_url": "https://pypi.org/project/dos/",
    "platform": "",
    "project_url": "https://pypi.org/project/dos/",
    "project_urls": {
      "Homepage": "https://github.com/pr/dos"
    },
    "release_url": "https://pypi.org/project/dos/1.2.0/",
    "requires_dist": [
      "arrow",
      "flask"
    ],
    "requires_python": ">=3.6",
    "summary": "Document and Validate Flask",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7270268,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a54ed32f712c7a5db11cdff8cb0644ba08821682581322b2312077a289689659",
        "md5": "d6ce29430a9f51b796ad1bb786221961",
        "sha256": "fa79e847d479f68241789b3ef820d3b789d6d2ae03811cfd5024b33aacc25735"
      },
      "downloads": -1,
      "filename": "dos-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6ce29430a9f51b796ad1bb786221961",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15145,
      "upload_time": "2020-03-04T20:51:16",
      "upload_time_iso_8601": "2020-03-04T20:51:16.867121Z",
      "url": "https://files.pythonhosted.org/packages/a5/4e/d32f712c7a5db11cdff8cb0644ba08821682581322b2312077a289689659/dos-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f095323e73e963753ff28183eb431aa004abe13da3b6649ccaf5549f2ed026a",
        "md5": "165b620278aed7f435ff6e46ef79ab8a",
        "sha256": "9cbc3575756156fa311d63e9daf8726a050a05b51a06334b7cec220deb85747d"
      },
      "downloads": -1,
      "filename": "dos-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "165b620278aed7f435ff6e46ef79ab8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17534,
      "upload_time": "2020-03-04T20:51:19",
      "upload_time_iso_8601": "2020-03-04T20:51:19.585953Z",
      "url": "https://files.pythonhosted.org/packages/2f/09/5323e73e963753ff28183eb431aa004abe13da3b6649ccaf5549f2ed026a/dos-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}