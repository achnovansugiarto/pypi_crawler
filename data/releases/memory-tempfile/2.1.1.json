{
  "info": {
    "author": "mbello",
    "author_email": "mbello@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Overview\n\nOften there is a need to temporarily save a file to 'disk' for the consumption of external tools. Or maybe you can pipe some input info to an external tool\nbut has no way of forcing such external tool to pipe its output straight to your software: **it wants to write a file to disk**.\nDisk operations are slow and if repeated too often can shorten the lifespan of underlying media.\n\nOn Linux, most distributions offer a /tmp directory BUT it is on physical media. However, modern distributions often offer at east two\nplaces where one can safely create temporary files in RAM: /dev/run/<uid>, /run/shm and /dev/shm\n\n/dev/run/<uid> is ideal for your temporary files. It is writable and readable only by your user.\n/dev/shm is usually world-readable and world-writable (just like /tmp), it is often used for IPC (inter process communication) but can also serve well as a temporary RAM-based tempdir\n\nThis module is very simple and tries not to reinvent the wheel. It will check /tmp to see if it in a ramdisk or not. And it will also check\nif you have other options where to place your temporary files/dirs on a memory-based file system like tmpfs or ramfs.\n\nWith this info you are well served by pythons builtin modules and external packages like pathlib or pyfilesystem2 to move on to do your things.   \n\n**To know more, I recommend the following links:**\nhttps://unix.stackexchange.com/questions/162900/what-is-this-folder-run-user-1000\nhttps://superuser.com/questions/45342/when-should-i-use-dev-shm-and-when-should-i-use-tmp\n\n\n# API\nThis module searches for paths hosted on filesystems of type belonging to MEM_BASED_FS ('tmpfs' or 'ramfs').\nPaths in SUITABLE_PATHS are searched and the first path found that exists and is stored on a filesystem whose type \nbelongs to MEM_BASED_FS will be used as the tempdir.\nIf no suitable path is found, then if fallback = True, we will fallback to default tempdir (as determined by tempfile stdlib). If fallback is a path, then we will default to it.\nIf fallback is false, a RunTimeError exception is raised.\n\nThe MemoryTempfile constructor has arguments that let you change how the algorith works.\nYou can change the order of paths (with preferred_paths), add new paths to the seach (with preferred_paths and/or with additional_paths) \nand you can exclude certain paths (with removed_paths).\nYou can change the filesystem types you accept (with filesystem_types) and specify whether or not to fallback to a vanilla tempdir as a last resort.\n\nThen, all methods available from tempfile stdlib are available through MemoryTempfile.\n\n# Usage\n\n## Example 1:\n\n    from memory_tempfile import MemoryTempfile\n    \n    tempfile = MemoryTempfile()\n    \n    with tempfile.TemporaryFile() as \n        # as usual...\n        \n## Example 2:\n\n    # We now do not want to use /dev/shm or /run/shm and no ramfs paths\n    # If /run/user/{uid} is available, we prefer it to /tmp\n    # And we want to try /var/run as a last resort\n    # If all fails, fallback to platform's tmp dir\n    \n    from memory_tempfile import MemoryTempfile\n    import memory_tempfile\n\n    # By the way, all paths with string {uid} will have it replaced with the user id\n    tempfile = MemoryTempfile(preferred_paths=['/run/user/{uid}'], remove_paths=['/dev/shm', '/run/shm'],\n                              additional_paths=['/var/run'], filesystem_types=['tmpfs'], fallback=True)\n    \n    if tempfile.found_mem_tempdir():\n        print('We could use any of the followig paths: {}'.format(tempfile.get_usable_mem_tempdir_paths()))\n        print('And we are using now: {}'.format(tempfile.gettempdir()))\n    \n    with tempfile.NamedTemporaryFile() as ntf:\n        # use it as usual...\n        pass",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mbello/memory-tempfile",
    "keywords": "tempfile in RAM,tempfile in memory,file in memory,tempfs,ramdisk,/dev/shm,/run/user",
    "license": "CC0-1.0",
    "maintainer": "mbello",
    "maintainer_email": "mbello@users.noreply.github.com",
    "name": "memory-tempfile",
    "package_url": "https://pypi.org/project/memory-tempfile/",
    "platform": "",
    "project_url": "https://pypi.org/project/memory-tempfile/",
    "project_urls": {
      "Homepage": "https://github.com/mbello/memory-tempfile",
      "Repository": "https://github.com/mbello/memory-tempfile"
    },
    "release_url": "https://pypi.org/project/memory-tempfile/2.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6,<4.0",
    "summary": "Helper functions to identify and use paths on the OS (Linux-only for now) where RAM-based tempfiles can be created.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6788939,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb9c29c5fe31e0a36b28b316ca7b5f4c239ab11a15ac3e0ed0333bcbadf814fa",
        "md5": "c85179a35d9ebe7b884a54c90aa7fee1",
        "sha256": "627bc7045dff872eec2a01febca9e5da95524ab00bffb7d133f05aec7ee03c7d"
      },
      "downloads": -1,
      "filename": "memory_tempfile-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c85179a35d9ebe7b884a54c90aa7fee1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 8660,
      "upload_time": "2019-12-12T14:21:40",
      "upload_time_iso_8601": "2019-12-12T14:21:40.093490Z",
      "url": "https://files.pythonhosted.org/packages/fb/9c/29c5fe31e0a36b28b316ca7b5f4c239ab11a15ac3e0ed0333bcbadf814fa/memory_tempfile-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bae600761bffbf75dfac86c6a37bed0b3bcab65eed94bcb0701b0f9ebb1e8d84",
        "md5": "7797a08c4de74aacae8677fb86822a3e",
        "sha256": "43b45f47a7810353b0ed0367ba93a502329447ff54530fb077308f550edb6e90"
      },
      "downloads": -1,
      "filename": "memory-tempfile-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7797a08c4de74aacae8677fb86822a3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 4375,
      "upload_time": "2019-12-12T14:21:38",
      "upload_time_iso_8601": "2019-12-12T14:21:38.141025Z",
      "url": "https://files.pythonhosted.org/packages/ba/e6/00761bffbf75dfac86c6a37bed0b3bcab65eed94bcb0701b0f9ebb1e8d84/memory-tempfile-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}