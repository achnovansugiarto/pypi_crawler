{
  "info": {
    "author": "Wojciech Bana≈õ",
    "author_email": "fizista+mcron@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": ".. role:: bash(code)\n   :language: bash\n\n.. role:: python(code)\n   :language: python\n\n***************************\nMicroCRON for MicroPython\n***************************\n\nMicroCRON is a time-based task scheduling program.\n\nThe library was designed after the experience with its larger predecessor SimpleCRON_. The current library focuses\non minimalism of code while keeping maximum functionality. It takes 3 times less memory than SimpleCRON_.\nIt needs about 3kB of memory to work.\n\nThe software was tested under micropython 1.12 (esp32, esp8266).\n\nWhat you can do with this library:\n##################################\n\n* Run any task at precisely defined intervals\n* Delete and add tasks while the program is running.\n* Run the task a certain number of times and many more.\n\nLibrary working principle:\n##########################\n\nGenerally, the working principle is, in a pseudo-code:\n\n.. code-block::\n\n    insert(action_period, action_pointers, 'minute_5s', callback)\n\n    while (the hardware timer is running):\n        current_action_period_pointer = current_time % action_period\n        if current_action_period_pointer in action_pointers:\n            run callback\n\nWe have almost complete freedom to choose the action_period as long as it is greater than zero.\n\nThe action_pointers variable should contain data of \"set\" or \"range\" type.\n\nWhen we want to use irregular points in time we use \"set\". Otherwise, you can use \"range\". This gives us minimal\nmemory overhead and at the same time a lot of freedom in defining when actions are to start.\n\nRequirements:\n#############\n\n* The board on which the micropython is installed(v1.12)\n* The board must have support for hardware timers.\n\nInstall\n#######\nYou can install using the upip:\n\n.. code-block:: python\n\n    import upip\n    upip.install(\"micropython-mcron\")\n\nor\n\n.. code-block:: bash\n\n    micropython -m upip install -p modules micropython-mcron\n\nYou can clone this repository, and install it manually:\n\n.. code-block:: bash\n\n    git clone https://github.com/fizista/micropython-mcron.git\n    cd ./micropython-mcron\n\nSimple examples\n###############\n\nSimple code run every 5 seconds:\n\n.. code-block:: python\n\n    import utime\n    import mcron\n    import mcron.decorators\n\n    c = 0\n\n    def counter(callback_id, current_time, callback_memory):\n        global c\n        c += 1\n        print('call: %s %s' % (c, utime.localtime()))\n\n    mcron.init_timer()\n    mcron.insert(mcron.PERIOD_MINUTE, range(0, mcron.PERIOD_MINUTE, 5), 'minute_5s', counter)\n\nStart the task at exactly 6:30 a.m. and 10:30 p.m. every day.\n\n.. code-block:: python\n\n    mcron.insert(mcron.PERIOD_DAY, {6 * 60 * 60 + 30 * 60, 22 * 60 * 60 + 30 * 60}, 'day_6_30__22_30', callback)\n\nStart the task 4 times a day.\n\n.. code-block:: python\n\n    mcron.insert(mcron.PERIOD_DAY, range(0, mcron.PERIOD_DAY, mcron.PERIOD_DAY // 4), 'day_x4', callback)\n\nStart the task every 11 seconds from now.\n\n.. code-block:: python\n\n    mcron.insert(11, {0}, '11s_now', callback, from_now=True)\n\nStart the task every 11 seconds.\n\n.. code-block:: python\n\n    mcron.insert(11, {0}, '11s', callback)\n\nStart the task successfully three times. Start this task every 5 seconds.\n\n.. code-block:: python\n\n    mcron.insert(\n        mcron.PERIOD_MINUTE, range(0, mcron.PERIOD_MINUTE, 5), 'minute_5s_3x_suc',\n        mcron.decorators.successfully_run_times(3)(lambda *a, **k: utime.time() % 10 == 0)\n    )\n\nStart the task three times. Start this task every 5 seconds.\n\n.. code-block:: python\n\n    mcron.insert(\n        mcron.PERIOD_MINUTE, range(0, mcron.PERIOD_MINUTE, 5), 'minute_5s_3x',\n        mcron.decorators.run_times(3)(callback)\n    )\n\nRemove the action:\n\n.. code-block:: python\n\n    mcron.remove('action_id')\n\nRemove all actions:\n\n.. code-block:: python\n\n    mcron.remove_all()\n\nCapturing action errors is possible by replacing and/or adding your own function.\n\n.. code-block:: python\n\n    def my_exception_processor(e):\n        send_exception_to_server(e)\n        write_exception_to_disk(e)\n\n    mcron.callback_exception_processors.append(my_exception_processor)\n\nImportant notes:\n################\n\n* If the execution time of all tasks is longer than (1000ms - 1.5 * _timer_period), then the TLPTimeException exception\n  is thrown. This tells you that a task is blocking the device, and probably prevents the execution of the next action\n  in the next second. It will be up to the programmer what he will do after intercepting this error. He can do nothing,\n  and he can run the missed tasks.\n* If there are several functions to run at a given time, then they are started without a specific order.\n\nHow to test\n###########\n\nCopy the tests.py file from the https://github.com/fizista/micropython-mcron.git repository to your test board\nand run the command on this device:\n\n.. code-block:: python\n\n    import tests\n\n*******************\nSupport and license\n*******************\n\nIf you have found a mistake or other problem, write in the issues.\n\nIf you need a different license for this library (e.g. commercial),\nplease contact me: fizista+mcron@gmail.com.\n\n\n.. _SimpleCRON: https://github.com/fizista/micropython-scron",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fizista/micropython-mcron",
    "keywords": "cron scheduler micropython",
    "license": "AGPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-mcron",
    "package_url": "https://pypi.org/project/micropython-mcron/",
    "platform": "",
    "project_url": "https://pypi.org/project/micropython-mcron/",
    "project_urls": {
      "Homepage": "https://github.com/fizista/micropython-mcron"
    },
    "release_url": "https://pypi.org/project/micropython-mcron/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MicroCRON for MicroPython.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11945378,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0b3fa4001776e41541a5cab2eba457c6f81416c6381818adf8b6b71b91abc376",
        "md5": "f2d9ec30694c308e1bc04ff6e08bcbdd",
        "sha256": "bbcce28315cd8219f2860ae64f5264d527ad04efafe07ff5b5eeac0e08aa195f"
      },
      "downloads": -1,
      "filename": "micropython-mcron-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f2d9ec30694c308e1bc04ff6e08bcbdd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5216,
      "upload_time": "2020-05-28T13:18:30",
      "upload_time_iso_8601": "2020-05-28T13:18:30.375665Z",
      "url": "https://files.pythonhosted.org/packages/0b/3f/a4001776e41541a5cab2eba457c6f81416c6381818adf8b6b71b91abc376/micropython-mcron-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}