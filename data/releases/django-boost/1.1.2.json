{
  "info": {
    "author": "ChanTsune",
    "author_email": "yshegou@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Django-Boost  \n\nExtension library to boost development with django\n\n[![Build Status](https://travis-ci.org/ChanTsune/django-boost.svg?branch=master)](https://travis-ci.org/ChanTsune/django-boost)\n[![Downloads](https://pepy.tech/badge/django-boost)](https://pepy.tech/project/django-boost)\n\n## Installation  \n\n```bash\npip install django-boost\n```\n\nor\n\n```bash\ngit clone https://github.com/ChanTsune/Django-Boost.git\n\npython setup.py install\n```\n\n## Add an application  \n\n`settings.py`\n\n```py\nINSTALLED_APPS = [\n    ...\n    'django_boost',\n]\n```\n\n## use case  \n\n### Custom User  \n\n#### EmailUser  \n\n`settings.py`\n\n```py\n...\n\nAUTH_USER_MODEL = 'django_boost.EmailUser'\n\n...\n```\n\nReplace Django default user model  \nUse email address instead of username when logging in  \n\n#### AbstractEmailUser  \n\n```py\nfrom django.db import models\nfrom django_boost.models import AbstractEmailUser\n\nclass CustomUser(AbstractEmailUser):\n    is_flozen = models.BoolField(default=False)\n    homepage = models.URLField()\n\n```\n\nAvailable when you want to add a field to EmailUser  \n\n### ModelMixins  \n\n#### UUIDModelMixin  \n\n```py\nfrom django.db import models\nfrom django_boost.models import UUIDModelMixin\n\nclass Stock(UUIDModelMixin):\n    name = models.CharField(max_length=128)\n    count = models.IntegerField()\n```\n\nMixins that replace `id` from `AutoField` to `UUIDField`  \n\n#### TimeStampModelMixin  \n\n```py\nfrom django.db import models\nfrom django_boost.models.mixins import TimeStampModelMixin\n\nclass Stock(TimeStampModelMixin):\n    name = models.CharField(max_length=128)\n    count = models.IntegerField()\n```\n\nThe fields `posted_at` and `updated_at` are added.  \n\n```py\nposted_at = models.DateTimeField(auto_now_add=True)\nupdated_at = models.DateTimeField(auto_now=True)\n```\n\n#### Combine  \n\n```py\nfrom django.db import models\nfrom django_boost.models.mixins import UUIDModelMixin, TimeStampModelMixin\n\nclass Stock(UUIDModelMixin,TimeStampModelMixin):\n    name = models.CharField(max_length=128)\n    count = models.IntegerField()\n```\n\nModel mixins can also be combined in this way.  \n\n### Fields  \n\n#### ColorCodeField  \n\n```py\nfrom django.db import models\nfrom django_boost.models.filed import ColorCodeField\n\nclass Model(models.Model):\n    color = ColorCodeField()\n\n```\n\nSave hexadecimal color code string including #.  \nIf you specify `upper=True`, the saved text will be capitalized.  \nOn the other hand, specifying `lower=True` will make the saved string lower case.  \nYou can not specify both at the same time.  \nIf neither is set, the string is saved without any changes.  \nDefault is `upper=False`,`lower=Flase`.  \n\n### Middleware  \n\n#### RedirectCorrectHostnameMiddleware\n\n`settings.py`\n\n```py\n\nMIDDLEWARE = [\n    'django_boost.middleware.RedirectCorrectHostnameMiddleware',  # django_boost\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    ...\n]\n\n...\n\nCORRECT_HOST = 'sample.com'\n\n```\n\nRedirect all access to the domain specified in `CORRECT_HOST`\n\nIt is not redirected when `DEBUG = True`  \n\nThis is useful when migrating domains  \n\nOriginally it should be done with server software such as nginx and apache, but it is useful when the setting is troublesome or when using services such as heroku  \n\n#### HttpStatusCodeExceptionMiddleware  \n\n`settings.py`\n\n```py\nMIDDLEWARE = [\n    'django_boost.middleware.HttpStatusCodeExceptionMiddleware',  # django_boost\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    ...\n]\n```\n\nIt is necessary to use the `HttpStatusCode exceptions` described later.\n\n### HttpStatusCode Exceptions  \n\nProvides exceptions for other status codes as well as Django's standard `Http404` exception  \n\n```py\nfrom django.http import JsonResponse\nfrom django_boost.http import Http400, Http415\n\ndef view(request):\n    if request.content_type != 'application/json':\n        raise Http415\n    return JsonResponse({\"message\":\"ok\"})\n\n```\n\nIt is necessary to set `HttpStatusCodeExceptionMiddleware` to use\n\n### Template context  \n\n#### User Agent  \n\n```py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'django_boost.context_processors.user_agent', # django boost\n            ],\n        },\n    },\n]\n```\n\nWhen given a user agent like `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36`, provide the following context to the template  \n\n```py\n{'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36',\n'browser': 'Chrome',\n'device': 'Other',\n'is_bot': False,\n'is_email_client': False,\n'is_mobile': False,\n'is_pc': True,\n'is_tablet': False,\n'is_touch_capable': False,\n'os': 'Mac OS X'}\n```\n\nThese information is obtained using [user-agents](https://github.com/selwin/python-user-agents)  \n\n### Access Mixins  \n\n#### AllowContentTypeMixin  \n\nRestrict the content type of http request.  \n\n```py\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import AllowContentTypeMixin\n\nclass PostView(AllowContentTypeMixin, TemplateView):\n    allowed_content_types = [\"application/xml\"]\n    template_name = \"path/to/template\"\n\n```\n\nRestrict request based on `Content-Type` of http header.  \n\nIf the content type is not allowed, http415 response will be returned.  \nYou can disable restrictions by specifying `strictly = False`  \n\n#### ReAuthenticationRequiredMixin  \n\n```py\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import ReAuthenticationRequiredMixin\n\nclass RecentLogin(ReAuthenticationRequiredMixin, TemplateView):\n    template_name = \"mypage.html\"\n    auth_unnecessary = 3600\n```\n\n```py\nfrom datetime import timedelta\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import ReAuthenticationRequiredMixin\n\nclass RecentLogin(ReAuthenticationRequiredMixin,TemplateView):\n    template_name = \"mypage.html\"\n    auth_unnecessary = timedelta(hours=1)\n```\n\n`auth_unnecessary` is the grace period until recertification.  \nCan specify `int` and `timedelta` ,`None`.  \n`None` is same as `0`.  \n\n`logout=True`, Logout if the specified time limit has passed  \n`logout=False`, Do not logout Even if the specified time limit has passed  \n\n#### LimitedTermMixin  \n\n```py\nfrom datetime import datetime\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import LimitedTermMixin\n\nclass LimitedTermMixin(LimitedTermMixin, TemplateView):\n    template_name = ''\n    start_datetime = datetime(year=2019, month=1, day=1)\n    end_datetime = datetime(year=2019, month=12, day=31)\n\n```\n\nRestrict the period of access.  \n`start_datetime` specifies the date and time when access will be available, and `end_datetime` with the last date and time when access is available.  \n\nYou can change the date and time that can be accessed dynamically by overriding the `get_start_datetime` and `get_end_datetime` methods, respectively.  \n\nYou can specify the exception class to be thrown when the condition accessible to `exception_class` is not met.  \nThe default is the `Http404` exception.  \n\n### Redirect Control Mixins  \n\n#### DynamicRedirectMixin  \n\nYou can control the redirect destination with `next=~` in the URL query string like `LoginView`.  \n\n```py\nfrom django.views,generic import FormView\nfrom django_boost.views.mixins import DynamicRedirectMixin\n\nclass MyFormView(DynamicRedirectMixin, FormView):\n    redirect_field_name = 'next' # default is 'next'\n    ...\n```\n\nYou can change the query string parameter name by changing `redirect_field_name`.  \n\n### Adittional Attribute Mixins  \n\n#### UserAgentMixin  \n\n```py\nfrom django_boost.views.generic import TemplateView\nfrom django_boost.views.mixins import UserAgentMixin\n\nclass SameView(UserAgentMixin, TemplateView):\n    template_name = \"default_template\"\n    pc_template_name = \"pc_template.html\"\n    tablet_template_name = \"tablet_template.html\"\n    mobile_template_name = \"mobile_template.html\"\n```\n\nAssign `user_agent` attribute to `self.request` and switch the template file to be displayed by user agent.  \n\nIf the user agent can not be determined, the template specified in `template_name` will be used.  \n`pc_template_name`,`tablet_template_name`,`mobile_template_name` has no arms, but `template_name` is required.  \n\n#### JsonRequestMixin  \n\nA specialized mixin for `AllowContentTypeMixin` for json.  \n\n```py\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import JsonRequestMixin\n\nclass PostView(JsonRequestMixin, TemplateView):\n    template_name = \"path/to/template\"\n\n    def get_context_data(self,**kwargs):\n        posted_data = self.json\n        # {\"send\" : \"from cliant\"}\n        return posted_data\n```\n\nYou can access the dictionary object parsed from the Json string sent by the client in `self.json`  \n\nIf you use for the purpose of API `JsonView` below is recommended.  \n\n### ResponseMixin  \n\n#### JsonResponseMixin  \n\nReturns the response in Json format  \n\n```py\nfrom django.views.generic import TemplateView\nfrom django_boost.views.mixins import JsonResponseMixin\n\nclass JsonResponseView(JsonResponseMixin, TemplateView):\n    extra_context = {\"context\" : \"...\"}\n\n    def get_context_data(self,**kwargs):\n        context = {}\n        context.update(super().get_context_data(**kwargs))\n        return context\n\n```\n\nThe usage of `extra_context` and `get_context_data` is basically the same as `TemplateView`.\nThe difference is that `TemplateView` is passed directly to the template context, whereas `JsonResponseMixin` is a direct response.  \n\nSpecify `strictly = True` if you want to limit the Content-Type to Json only.  \n\nIf you use for the purpose of API `JsonView` below is recommended.  \n\n### Form Mixin  \n\n#### MuchedObjectGetMixin  \n\nObject of the condition that matches the form input content.\nOr mixin to add a method to get the queryset.\n\n```py\nfrom django import forms\nfrom django_boost.forms.mixins import MuchedObjectGetMixin\nfrom .models import Customer\n\nclass CustomerForm(MuchedObjectGetMixin, forms.ModelForm):\n    class Meta:\n        models = Customer\n        fields = ('name', )\n```\n\n```py\nfrom django.views.generic import FormView\nfrom .forms import CustomerForm\n\nclass CustomerSearchView(FormView):\n    template_name = \"form.html\"\n    form_class = CustomerForm\n\n    def form_valid(self,form):\n        object = form.get_object()  # get muched model object\n        object_list = form.get_list()  # get muched models objects queryset\n\n```\n\n`MuchedObjectMixin` provides `get_object` and `get_list` methods, each of which returns a `model object` or `queryset` that matches the form input content.  \n\n### GenericView  \n\n#### Extended Views  \n\n```py\nfrom django_boost.views.generic import View\n\nclass YourView(View):\n\n    def setup(self, request, *args, **kwargs):\n        super().setup(request, *args, **kwargs)\n        ## some process before view process\n\n        ## For example, add attribute to view class\n\n    def after_view_process(self, request, response, *args, **kwargs):\n        super().after_view_process(request, response, *args, **kwargs)\n        ## some process after view process\n\n        ## For example, add http headers to the response\n\n        return response\n\n```\n\ndjango_boost generic view (\n`CreateView`, `DeleteView`, `DetailView`, `FormView`, `ListView`, `TemplateView`, `UpdateView`, `View`) classes has `setup` and `after_view_process` method, These are called before and after processing of View respectively. `setup` method is same as the method added in Django 2.2 .\n\n#### JsonView  \n\nA generic view class that inherits `JsonResponseMixin` and `JsonRequestMixin`.  \n\n```py\nfrom django_boost.views.generic import JsonView\n\nclass SameAPIView(JsonView):\n\n    def get_context_data(self,**kwargs):\n        return self.json\n```\n\nIn the above example, we just return the sent Json string as it is.  \n\n#### ModelCRUDViews  \n\nProvides easy creation of CRUDViews linked to model.  \n\n`views.py`  \n\n```py\nfrom django_boost.views.generic import ModelCRUDViews\n\nclass CustomerViews(ModelCRUDViews):\n    model = Customer\n```\n\n`urls.py`  \n\n```py\nfrom django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('views/',include(views.CustomerViews().urls)),\n]\n```\n\nIn the template you can use as follows.  \n\n```html+django\n{% url 'customer:list' %}\n{% url 'customer:create' %}\n{% url 'customer:detail' %}\n{% url 'customer:update' %}\n{% url 'customer:delete' %}\n```\n\nThe name of the URL is defined under the namespace of the lower-cased model class name.  \n\n##### Case of Namespaced  \n\n`urls.py`  \n\n```py\nfrom django.urls import path, include\nfrom . import views\n\napp_name = \"myapp\"\nurlpatterns = [\n    path('views/',include(views.CustomerViews(app_name=\"myapp:customer\").urls)),\n]\n\n```\n\nIn the template you can use as follows.  \n\n```html+django\n{% url 'myapp:customer:list' %}\n{% url 'myapp:customer:create' %}\n{% url 'myapp:customer:detail' %}\n{% url 'myapp:customer:update' %}\n{% url 'myapp:customer:delete' %}\n```\n\n### Routing Utilitys  \n\n#### UrlSet  \n\nIf URLs corresponding to multiple models are described in one `urls.py`, it may be redundant.  \nAs below.  \n\n```python\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('modelA/', views.ModelAListView.as_view(), name='modelA_list'),\n    path('modelA/create/', views.ModelACreateView.as_view(), name='modelA_create'),\n    path('modelA/<int:pk>/', views.ModelADetailView.as_view(), name='modelA_detail'),\n    path('modelA/<int:pk>/update/', views.ModelAUpdateView.as_view(), name='modelA_update'),\n    path('modelA/<int:pk>/delete/', views.ModelADeleteView.as_view(), name='modelA_delete'),\n    path('modelB/', views.ModelBListView.as_view(), name='modelB_list'),\n    path('modelB/create/', views.ModelBCreateView.as_view(), name='modelB_create'),\n    path('modelB/<int:pk>/', views.ModelBDetailView.as_view(), name='modelB_detail'),\n    path('modelB/<int:pk>/update/', views.ModelBUpdateView.as_view(), name='modelB_update'),\n    path('modelB/<int:pk>/delete/', views.ModelBDeleteView.as_view(), name='modelB_delete'),\n]\n```\n\nOriginally it would be desirable to split the file, but doing so can lead to poor code outlook, due to the increase in files.  \n\nIn such cases, you can use `UrlSet`.\n\nWhen the above code is rewritten using `UrlSet`, it becomes as follows.  \n\n```python\nfrom django.urls import path, include\nfrom django_boost.urls import UrlSet\n\nfrom . import views\n\nclass ModelAUrlSet(UrlSet):\n    app_name = \"ModelA\"\n    urlpatterns = [\n        path('', views.ModelAListView.as_view(), name='list'),\n        path('create/', views.ModelACreateView.as_view(), name='create'),\n        path('<int:pk>/', views.ModelADetailView.as_view(), name='detail'),\n        path('<int:pk>/update/', views.ModelAUpdateView.as_view(), name='update'),\n        path('<int:pk>/delete/', views.ModelADeleteView.as_view(), name='delete'),\n    ]\n\nclass ModelBUrlSet(UrlSet):\n    app_name = \"ModelB\"\n    urlpatterns = [\n        path('', views.ModelBListView.as_view(), name='list'),\n        path('create/', views.ModelBCreateView.as_view(), name='create'),\n        path('<int:pk>/', views.ModelBDetailView.as_view(), name='detail'),\n        path('<int:pk>/update/', views.ModelBUpdateView.as_view(), name='update'),\n        path('<int:pk>/delete/', views.ModelBDeleteView.as_view(), name='delete'),\n    ]\n\nurlpatterns = [\n    path('modelA/', include(ModelAUrlSet)),\n    path('modelB/', include(ModelBUrlSet)),\n]\n```\n\nURLs are grouped for easy reading.  \n\n### Admin Site Utilitys  \n\nEasily register Models to Django admin site.  \n\n```py\nfrom yourapp import models\nfrom django_boost.admin.site import register_all\n\nregister_all(models)\n```\n\nRegister all models defined in `models.py` in Django admin site.  \n\nCustom admin classes are also available.  \n\n```py\nfrom your_app import models\nfrom your_app import admin\nfrom django_boost.admin.site import register_all\n\nregister_all(models, admin_class=admin.CustomAdmin)\n```\n\n### Template Tags  \n\nMake Python built-in functions available in DjangoTemplate.  \nSome non-built-in functions are also provided as filters. An example is `isiterable` filter.  \n\n#### Load filters  \n\n```html+django\n{% load boost %}\n```\n\n##### isiterable  \n\nisiterable filter returns True if it filters repeatable objects, and False otherwise.  \n\n```html+django\n{% load boost %}\n\n{% if object|isiterable %}\n  {% for i in object %}\n    <p>{{ i }}</p>\n  {% endfor %}\n{% else %}\n  <p>{{ object }}</p>\n{% endif %}\n\n```\n\n#### literal  \n\nPython literal from string.  \nUsing backend `ast.literal_eval`.  \n\n```html+django\n{% load boost %}\n\n{% literal \"[1, 2, 3]\" as list %}\n\n{% for i in list %}\n    <p>{{ i }}</p>\n{% endfor %}\n```\n\n#### URL Utility  \n\n```html+django\n{% load boost_url %}\n```\n\n##### urlencode  \n\nURL encode the filtered string.  \nYou can specify non-conversion characters in the argument.  \n\n```html+django\n{% load boost_url %}\n\n{{ url | urlencode }}\n\n{{ url | urlencode:'abc' }}\n\n```\n\n##### urldecode  \n\nThe reverse of `urlencode`.  \n\n```html+django\n{% load boost_url %}\n\n{{ url | urldecode }}\n```\n\n##### replace_parameters  \n\nReplace the query string of the current page URL with the argument.  \n\n```html+django\n{% load boost_url %}\n\n{# case of current page's query string is `?id=2`#}\n{% replace_parameters request 'id' 1 'age' 20 %}\n\n{# The result of replacing is `?id=1&age=20` #}\n\n```\n\nUseful for pagination.  \n\n#### Queryset Utility  \n\n```html+django\n{% load boost_query %}\n```\n\nMake the query set methods available in the template.\n\n`filter`, `exclude`, `order_by` are available.\n\nIf you use the LogicalDeletionMixin, you can also use `alive` and `dead`  \n\n```html+django\n{% qureyset|filter:\"field=value\"%}\n\n{% qureyset|exclude:\"field=value\"%}\n\n{% qureyset|order_by:\"field\"%}\n\n{# If it inherits LogicalDeletionMixin. #}\n\n{% qureyset|alive %}\n\n{% qureyset|dead %}\n\n```\n\n## utilty functions  \n\n### loop utils  \n\n#### Django Template like forloop  \n\n```py\nfrom django_boost.utils import loop\n\nfor forloop, item in loop([1, 2, 3, 4, 5]):\n    forloop.counter0\n    forloop.counter\n    forloop.revcounter0\n    forloop.revcounter\n    forloop.first\n    forloop.last\n```\n\nProvides Django Template loops to Python programs.  \n\n#### loopfirst  \n\nYield True when the first element of the given iterator object, False otherwise.  \n\n```py\nfrom django_boost.utils.functions import loopfirst\n\n\nfor is_first, v in loopfirst(range(5)):\n    print(is_first, v)\n\n# True 0\n# False 1\n# False 2\n# False 3\n# False 4\n```\n\n#### looplast  \n\nYield True when the last element of the given iterator object, False otherwise.  \n\n```py\nfrom django_boost.utils.functions import looplast\n\n\nfor is_last, v in looplast(range(5)):\n    print(is_last, v)\n\n# False 0\n# False 1\n# False 2\n# False 3\n# True 4\n```\n\n#### loopfirstlast  \n\nA function combining `firstloop` and `lastloop`.  \n\nYield True if the first and last element of the iterator object, False otherwise.  \n\n```py\nfrom django_boost.utils.functions import loopfirstlast\n\n\nfor first_or_last, v in loopfirstlast(range(5)):\n    print(first_or_last, v)\n\n# True 0\n# False 1\n# False 2\n# False 3\n# True 4\n```\n\n### Commands  \n\n#### adminsitelog  \n\n```bash\npython manage.py adminsitelog\n```\n\nView and delete Admin Site logs.  \n\n##### view all logs  \n\n```bash\npython manage.py adminsitelog\n```\n\n```bash\nid| action | detail | user | time\n6 | Deleted | Customer object (8) | admin | 2019-08-19 14:56:29.609940+00:00\n7 | Added | Customer object (11) | admin | 2019-08-20 16:12:38.902129+00:00\n8 | Changed | Customer object (4) - Changed color. | admin | 2019-08-20 16:12:45.653693+00:00\n```\n\n##### filter logs  \n\n```bash\npython manage.py adminsitelog --filter \"action_time>=2019-8-01\" --exclude \"id=6\"\n```\n\n```bash\nid | action | detail | user | time\n7 | Added | Customer object (11) | admin | 2019-08-20 16:12:38.902129+00:00\n8 | Changed | Customer object (4) - Changed color. | admin | 2019-08-20 16:12:45.653693+00:00\n```\n\n##### delete all logs  \n\n```bash\npython manage.py adminsitelog --delete\n```\n\nIt is also possible to delete only the logs narrowed down by `--filter` and `--exclude`.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ChanTsune/Django-Boost",
    "keywords": "django extension",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-boost",
    "package_url": "https://pypi.org/project/django-boost/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-boost/",
    "project_urls": {
      "Homepage": "https://github.com/ChanTsune/Django-Boost"
    },
    "release_url": "https://pypi.org/project/django-boost/1.1.2/",
    "requires_dist": [
      "Django (>=2.0)",
      "user-agents (>=2.0)"
    ],
    "requires_python": "",
    "summary": "Django Extension library",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15020503,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f1c4cb2c5c7ed0acfa748cd834d3d4a43132d855b6b710d92b5e01057db0a57",
        "md5": "90e42dd82fa68510c85eb4d44d29447b",
        "sha256": "ee71bf72a58f26a8b2a96d7c945ad9fe60e817e9a7e4e78e6b4153cc0940da53"
      },
      "downloads": -1,
      "filename": "django_boost-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90e42dd82fa68510c85eb4d44d29447b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 36858,
      "upload_time": "2019-10-02T04:28:24",
      "upload_time_iso_8601": "2019-10-02T04:28:24.169731Z",
      "url": "https://files.pythonhosted.org/packages/6f/1c/4cb2c5c7ed0acfa748cd834d3d4a43132d855b6b710d92b5e01057db0a57/django_boost-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a397d17245a311659bb3647055a9f9e8476316f405ed4c7683fc2146b07e5946",
        "md5": "78a54f50a6103df11dd50521968521fe",
        "sha256": "2ed4ffc962bd119248127c7353f2401e9b4ba67bc2d22f8465dc7d1beabc255c"
      },
      "downloads": -1,
      "filename": "django_boost-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "78a54f50a6103df11dd50521968521fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32826,
      "upload_time": "2019-10-02T04:28:26",
      "upload_time_iso_8601": "2019-10-02T04:28:26.566782Z",
      "url": "https://files.pythonhosted.org/packages/a3/97/d17245a311659bb3647055a9f9e8476316f405ed4c7683fc2146b07e5946/django_boost-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}