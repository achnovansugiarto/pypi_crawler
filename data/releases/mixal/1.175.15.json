{
  "info": {
    "author": "CyberZHG",
    "author_email": "CyberZHG@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "MIXAL\n=====\n\n![Unit Tests](https://github.com/CyberZHG/MIXAL/workflows/Unit%20Tests/badge.svg)\n[![Deploy](https://github.com/CyberZHG/MIXAL/workflows/Deploy/badge.svg)](https://cyberzhg.github.io/MIXAL/)\n[![Build Status](https://travis-ci.org/CyberZHG/MIXAL.svg?branch=master)](https://travis-ci.org/CyberZHG/MIXAL)\n[![Coverage Status](https://coveralls.io/repos/github/CyberZHG/MIXAL/badge.svg?branch=master)](https://coveralls.io/github/CyberZHG/MIXAL?branch=travis)\n[![Version](https://img.shields.io/pypi/v/mixal.svg)](https://pypi.org/project/mixal/)\n![Downloads](https://img.shields.io/pypi/dm/mixal.svg)\n![License](https://img.shields.io/pypi/l/keras-bert.svg)\n\n\\[[中文](https://github.com/CyberZHG/MIXAL/blob/master/README.zh-CN.md)|[English](https://github.com/CyberZHG/MIXAL/blob/master/README.md)\\]\n\nA [MIX](https://en.wikipedia.org/wiki/MIX) assembly language simulator.\n\n## Install\n\nMake sure you have a C++ 11 compiler and execute:\n\n```bash\npip install mixal\n```\n\nFor MacOS users, you may need to use:\n\n```bash\nMACOSX_DEPLOYMENT_TARGET=10.9 pip install mixal\n```\n\n## Sample\n\nFollowing is a piece of sample code that finds the maximum value. There are upper-case letters in the names of functions and attributes as the codes were written with C++.\n\n```python\nimport random\nimport mixal\n\n# Initialize an environment\ncomputer = mixal.Computer()\n\n# The location for register J\nend_point = 3500\n\n# Load the assembly codes.\n# Note that the location for register J is set to HLT\n# to make sure the codes halt eventually\ncomputer.loadCodes([\n    'X       EQU  1000',\n    '        ORIG 3000',\n    'MAXIMUM STJ  EXIT',\n    'INIT    ENT3 0,1',\n    '        JMP  CHANGEM',\n    'LOOP    CMPA X,3',\n    '        JGE  *+3',\n    'CHANGEM ENT2 0,3',\n    '        LDA  X,3',\n    '        DEC3 1',\n    '        J3P  LOOP',\n    'EXIT    JMP  *',\n    '        ORIG {}'.format(end_point),\n    '        HLT',\n])\n\nnum_numbers, max_val = 100, 0\n# Register I1 denotes the number of integers in the memory buffer\ncomputer.rI1.set(num_numbers)\n# Register J stores the returning location\ncomputer.rJ.set(end_point)\nfor i in range(1001, 1001 + num_numbers):\n    val = random.randint(0, 100000)\n    # Set random values to memory\n    computer.memoryAt(i).set(val)\n    max_val = max(max_val, val)\n# Execute until the HLT operation\ncomputer.executeUntilHalt()\nprint('Expected:', max_val)\n# Register A stores the final maximum value\nprint('Actual:', computer.rA.value())\n# The units of time for executing the codes, exclude the halt operation.\nprint('Compute Cost:', computer.elapsed())\n```\n\n# IO Devices\n\nThere are several pre-defined IO devices in the environment. You can set the initial values of the input devices before the execution. Following is the code that reads one word from the input device and writes the same one to the output device.\n\n```python\nimport mixal\n\n# Initialize an environment\ncomputer = mixal.Computer()\n\n# Pre-defined indices for IO devices\ncard_reader_index = 16\ncard_punch_index = 17\n\ncomputer.loadCodes(\"\"\"\n        ORIG 3000\n        IN   100(16)\nLIN     JBUS LIN(16)\n        OUT  100(17)\nLOUT    JBUS LOUT(17)\n        \"\"\")\n# Set the initial value of input device\ncomputer.getDeviceWordAt(card_reader_index, 0).set('PRIME')\ncomputer.executeUntilHalt()\n# Check the output text of the output device\nprint(computer.getDeviceWordAt(card_punch_index, 0).getCharacters())\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CyberZHG/MIXAL",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mixal",
    "package_url": "https://pypi.org/project/mixal/",
    "platform": "",
    "project_url": "https://pypi.org/project/mixal/",
    "project_urls": {
      "Homepage": "https://github.com/CyberZHG/MIXAL"
    },
    "release_url": "https://pypi.org/project/mixal/1.175.15/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MIX Assembly Language Simulator",
    "version": "1.175.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9047684,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37773c7cd038f7d2127d6bbfc1bb9cdc49a8b6141ce43e7bc36a18ce5a6fa236",
        "md5": "8caf8ac7ae2416dba6499a3ecf5824f1",
        "sha256": "874105eb7005ef8f4b519e32a81d9a790c2c99596b28fa55a7b15f3cb2a9fb53"
      },
      "downloads": -1,
      "filename": "mixal-1.175.15.tar.gz",
      "has_sig": false,
      "md5_digest": "8caf8ac7ae2416dba6499a3ecf5824f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 517837,
      "upload_time": "2021-01-04T10:48:28",
      "upload_time_iso_8601": "2021-01-04T10:48:28.917974Z",
      "url": "https://files.pythonhosted.org/packages/37/77/3c7cd038f7d2127d6bbfc1bb9cdc49a8b6141ce43e7bc36a18ce5a6fa236/mixal-1.175.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}