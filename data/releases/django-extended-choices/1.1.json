{
  "info": {
    "author": "Stephane \"Twidi\" Angel",
    "author_email": "s.angel@twidi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|PyPI Version| |Build Status| |Doc Status|\n\ndjango-extended-choices\n=======================\n\nA little application to improve Django choices\n----------------------------------------------\n\n``django-extended-choices`` aims to provide a better and more readable\nway of using choices_ in Django_.\n\nInstallation\n------------\n\nYou can install directly via pip (since version ``0.3``)::\n\n    $ pip install django-extended-choices\n\nOr from the Github_ repository (``master`` branch by default)::\n\n    $ git clone git://github.com/twidi/django-extended-choices.git\n    $ cd django-extended-choices\n    $ sudo python setup.py install\n\nUsage\n-----\n\nThe aim is to replace this:\n\n.. code-block:: python\n\n    STATE_ONLINE  = 1\n    STATE_DRAFT   = 2\n    STATE_OFFLINE = 3\n\n    STATE_CHOICES = (\n        (STATE_ONLINE,  'Online'),\n        (STATE_DRAFT,   'Draft'),\n        (STATE_OFFLINE, 'Offline'),\n    )\n\n    STATE_DICT = dict(STATE_CHOICES)\n\n    class Content(models.Model):\n        title      = models.CharField(max_length=255)\n        content    = models.TextField()\n        state      = models.PositiveSmallIntegerField(choices=STATE_CHOICES, default=STATE_DRAFT)\n\n        def __unicode__(self):\n            return u'Content \"%s\" (state=%s)' % (self.title, STATE_DICT[self.state])\n\n    print(Content.objects.filter(state=STATE_ONLINE))\n\nby this:\n\n.. code-block:: python\n\n    from extended_choices import Choices\n\n    STATES = Choices(\n        ('ONLINE',  1, 'Online'),\n        ('DRAFT',   2, 'Draft'),\n        ('OFFLINE', 3, 'Offline'),\n    )\n\n    class Content(models.Model):\n        title      = models.CharField(max_length=255)\n        content    = models.TextField()\n        state      = models.PositiveSmallIntegerField(choices=STATES, default=STATES.DRAFT)\n\n        def __unicode__(self):\n            return u'Content \"%s\" (state=%s)' % (self.title, STATES.for_value(self.state).display)\n\n    print(Content.objects.filter(state=STATES.ONLINE))\n\n\nAs you can see there is only one declaration for all states with, for each state, in order:\n\n* the pseudo-constant name which can be used (``STATES.ONLINE`` replaces the previous ``STATE_ONLINE``)\n* the value to use in the database - which could equally be a string\n* the name to be displayed - and you can wrap the text in ``ugettext_lazy()`` if you need i18n\n\nAnd then, you can use:\n\n* ``STATES``, or ``STATES.choices``, to use with ``choices=`` in fields declarations\n* ``STATES.for_constant(constant)``, to get the choice entry from the constant name\n* ``STATES.for_value(constant)``, to get the choice entry from the key used in database\n* ``STATES.for_display(constant)``, to get the choice entry from the displayable value (can be useful in some case)\n\nEach choice entry obtained by ``for_constant``, ``for_value`` and ``for_display`` return a tuple as\ngiven to the ``Choices`` constructor, but with additional attributes:\n\n.. code-block:: python\n\n    >>> entry = STATES.for_constant('ONLINE')\n    >>> entry == ('ONLINE', 1, 'Online')\n    True\n    >>> entry.constant\n    'ONLINE'\n    >>> entry.value\n    1\n    >>> entry.display\n    'Online'\n\nThese attributes are chainable (with a weird example to see chainability):\n\n.. code-block:: python\n\n    >>> entry.constant.value\n    1\n    >>> entry.constant.value.value.display.constant.display\n    'Online'\n\nTo allow this, we had to remove support for ``None`` values. Use empty strings instead.\n\nNote that constants can be accessed via a dict key (``STATES['ONLINE']`` for example) if\nyou want to fight your IDE that may warn you about undefined attributes.\n\n\nYou can check whether a value is in a ``Choices`` object directly:\n\n.. code-block:: python\n\n    >>> 1 in STATES\n    True\n    >>> 42 in STATES\n    False\n\n\nYou can even iterate on a ``Choices`` objects to get choices as seen by Django:\n\n.. code-block:: python\n\n    >>> for choice in STATES:\n    ...     print(choice)\n    (1, 'Online')\n    (2, 'Draf')\n    (3, 'Offline')\n\nTo get all choice entries as given to the ``Choices`` object, you can use the ``entries``\nattribute:\n\n.. code-block:: python\n\n    >>> for choice_entry in STATES.entries:\n    ...     print(choice_entry)\n    ('ONLINE',  1, 'Online'),\n    ('DRAFT',   2, 'Draft'),\n    ('OFFLINE', 3, 'Offline'),\n\nOr the following dicts, using constants, values or display names, as keys, and the matching\nchoice entry as values:\n\n* ``STATES.constants``\n* ``STATES.values``\n* ``STATES.displays``\n\n\n.. code-block:: python\n\n    >>> STATES.constants['ONLINE'] is STATES.for_constant('ONLINE')\n    True\n    >>> STATES.values[2] is STATES.for_value(2)\n    True\n    >>> STATES.displays['Offline'] is STATES.for_display('Offline')\n    True\n\nIf you want these dicts to be ordered, you can pass the dict class to use to the\n``Choices`` constructor:\n\n.. code-block:: python\n\n    from collections import OrderedDict\n    STATES = Choices(\n        ('ONLINE',  1, 'Online'),\n        ('DRAFT',   2, 'Draft'),\n        ('OFFLINE', 3, 'Offline'),\n        dict_class = OrderedDict\n    )\n\nSince version ``1.1``, the new ``OrderedChoices`` class is provided, that is exactly that:\na ``Choices`` using ``OrderedDict`` by default for ``dict_class``.\n\nYou can check if a constant, value, or display name exists:\n\n.. code-block:: python\n\n    >>> STATES.has_constant('ONLINE')\n    True\n    >>> STATES.has_value(1)\n    True\n    >>> STATES.has_display('Online')\n    True\n\nYou can create subsets of choices within the same ``Choices`` instance:\n\n.. code-block:: python\n\n    >>> STATES.add_subset('NOT_ONLINE', ('DRAFT', 'OFFLINE',))\n    >>> STATES.NOT_ONLINE\n    (2, 'Draft')\n    (3, 'Offline')\n\nNow, ``STATES.NOT_ONLINE`` is a real ``Choices`` instance, with a subset of the main ``STATES``\nconstants.\n\nYou can use it to generate choices for when you only want a subset of choices available:\n\n.. code-block:: python\n\n    offline_state = models.PositiveSmallIntegerField(\n        choices=STATES.NOT_ONLINE,\n        default=STATES.DRAFT\n    )\n\nAs the subset is a real ``Choices`` instance, you have the same attributes and methods:\n\n.. code-block:: python\n\n    >>> STATES.NOT_ONLINE.for_constant('OFFLINE').value\n    3\n    >>> STATES.NOT_ONLINE.for_value(1).constant\n    Traceback (most recent call last):\n    ...\n    KeyError: 3\n    >>> list(STATES.NOT_ONLINE.constants.keys())\n    ['DRAFT', 'OFFLINE]\n    >>> STATES.NOT_ONLINE.has_display('Online')\n    False\n\nYou can create as many subsets as you want, reusing the same constants if needed:\n\n.. code-block:: python\n\n    STATES.add_subset('NOT_OFFLINE', ('ONLINE', 'DRAFT'))\n\nIf you want to check membership in a subset you could do:\n\n.. code-block:: python\n\n    def is_online(self):\n        # it's an example, we could have just tested with STATES.ONLINE\n        return self.state not in STATES.NOT_ONLINE_DICT\n\nYou can add choice entries in many steps using ``add_choices``, possibly creating subsets at\nthe same time.\n\nTo construct the same ``Choices`` as before, we could have done:\n\n.. code-block:: python\n\n    STATES = Choices()\n    STATES.add_choices(\n        ('ONLINE', 1, 'Online)\n    )\n    STATES.add_choices(\n        ('DRAFT',   2, 'Draft'),\n        ('OFFLINE', 3, 'Offline'),\n        name='NOT_ONLINE'\n    )\n\nYou can also pass the ``argument`` to the ``Choices`` constructor to create a subset with all\nthe choices entries added at the same time (it will call ``add_choices`` with the name and the\nentries)\n\nThe list of existing subset names is in the ``subsets`` attributes of the parent ``Choices``\nobject.\n\nIf you want a subset of the choices but not save it in the original ``Choices`` object, you can\nuse ``extract_subset`` instead of ``add_subset``\n\n.. code-block:: python\n\n    >>> subset = STATES.extract_subset('DRAFT', 'OFFLINE')\n    >>> subset\n    (2, 'Draft')\n    (3, 'Offline')\n\n\nAs for a subset created by ``add_subset``, you have a real ``Choices`` object, but not accessible\nfrom the original ``Choices`` object.\n\nNote that in ``extract_subset``, you pass the strings directly, not in a list/tuple as for the\nsecond argument of ``add_subset``.\n\nNotes\n-----\n\n* You also have a very basic field (``NamedExtendedChoiceFormField```) in ``extended_choices.fields`` which accept constant names instead of values\n* Feel free to read the source to learn more about this little Django app.\n* You can declare your choices where you want. My usage is in the ``models.py`` file, just before the class declaration.\n\nCompatibility\n-------------\n\nThe version ``1.0`` provided a totally new API, and compatibility with the previous one\n(``0.4.1``) was removed in ``1.1``. The last version with the compatibility was ``1.0.7``.\n\nIf you need this compatibility, you can use a specific version by pinning it in your requirements.\n\nLicense\n-------\n\nAvailable under the BSD_ License. See the ``LICENSE`` file included\n\nPython 3?\n---------\n\nOf course! We support python ``2.6``, ``2.7``, ``3.3``, ``3.4`` and ``3.5``, for Django version\n``1.5.x`` to ``1.10.x``, respecting the `Django matrix`_ (except for python ``2.5`` and ``3.2``\nwhich are not supported by ``django-extended-choices``)\n\n\nTests\n-----\n\nTo run tests from the code source, create a virtualenv or activate one, install Django, then::\n\n    python -m extended_choices.tests\n\n\nWe also provides some quick doctests in the code documentation. To execute them::\n\n    python -m extended_choices.choices\n\n\nNote: the doctests will work only in python version not display `u` prefix for strings.\n\n\nSource code\n-----------\n\nThe source code is available on Github_.\n\n\nDeveloping\n----------\n\nIf you want to participate in the development of this library, you'll need ``Django``\ninstalled in your virtualenv. If you don't have it, simply run::\n\n    pip install -r requirements-dev.txt\n\nDon't forget to run the tests ;)\n\nFeel free to propose a pull request on Github_!\n\nA few minutes after your pull request, tests will be executed on TravisCi_ for all the versions\nof python and Django we support.\n\n\nDocumentation\n-------------\n\nYou can find the documentation on ReadTheDoc_\n\nTo update the documentation, you'll need some tools::\n\n    pip install -r requirements-makedoc.txt\n\nThen go to the ``docs`` directory, and run::\n\n    make html\n\nAuthor\n------\nWritten by Stephane \"Twidi\" Angel <s.angel@twidi.com> (http://twidi.com), originally for http://www.liberation.fr\n\n.. _choices: http://docs.djangoproject.com/en/1.5/ref/models/fields/#choices\n.. _Django: http://www.djangoproject.com/\n.. _Github: https://github.com/twidi/django-extended-choices\n.. _Django matrix: https://docs.djangoproject.com/en/1.8/faq/install/#what-python-version-can-i-use-with-django\n.. _TravisCi: https://travis-ci.org/twidi/django-extended-choices/pull_requests\n.. _ReadTheDoc: http://django-extended-choices.readthedocs.org\n.. _BSD: http://opensource.org/licenses/BSD-3-Clause\n\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/django-extended-choices.png\n   :target: https://pypi.python.org/pypi/django-extended-choices\n   :alt: PyPI Version\n.. |Build Status| image:: https://travis-ci.org/twidi/django-extended-choices.png\n   :target: https://travis-ci.org/twidi/django-extended-choices\n   :alt: Build Status on Travis CI\n.. |Doc Status| image:: https://readthedocs.org/projects/django-extended-choices/badge/?version=latest\n   :target: http://django-extended-choices.readthedocs.org\n   :alt: Documentation Status on ReadTheDoc\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/twidi/django-extended-choices/trend.png\n   :alt: Bitdeli badge\n   :target: https://bitdeli.com/free",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/twidi/django-extended-choices",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-extended-choices",
    "package_url": "https://pypi.org/project/django-extended-choices/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-extended-choices/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/twidi/django-extended-choices"
    },
    "release_url": "https://pypi.org/project/django-extended-choices/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Little helper application to improve django choices(for fields)",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5152080,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27deb9f5d4711d3de9e9544cc158728704824c192ccbd92a04526ab2ccbec36f",
        "md5": "06a0688ed4dbd8f5dfae49c4a2bbc46c",
        "sha256": "1543aee7cadc3c6d3aaf2f99bdd4f28b10f0b6fa41fe7059df72266e3d889eb5"
      },
      "downloads": -1,
      "filename": "django_extended_choices-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "06a0688ed4dbd8f5dfae49c4a2bbc46c",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 27148,
      "upload_time": "2016-11-03T17:20:04",
      "upload_time_iso_8601": "2016-11-03T17:20:04.253751Z",
      "url": "https://files.pythonhosted.org/packages/27/de/b9f5d4711d3de9e9544cc158728704824c192ccbd92a04526ab2ccbec36f/django_extended_choices-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5c360edd38fbaeeb4b4d4703fe2b713de32203dcdfa4a46f3603ab2e83b2e6a",
        "md5": "a00c332bfd0f263ba690bf5eed59299e",
        "sha256": "fc9ca46d4fa25331939c37aa381f9efd01b288cff88a3fea6cb2f7d1c4efbfe0"
      },
      "downloads": -1,
      "filename": "django-extended-choices-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a00c332bfd0f263ba690bf5eed59299e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24273,
      "upload_time": "2016-11-03T17:20:00",
      "upload_time_iso_8601": "2016-11-03T17:20:00.837944Z",
      "url": "https://files.pythonhosted.org/packages/b5/c3/60edd38fbaeeb4b4d4703fe2b713de32203dcdfa4a46f3603ab2e83b2e6a/django-extended-choices-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}