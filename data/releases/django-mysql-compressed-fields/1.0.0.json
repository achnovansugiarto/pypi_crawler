{
  "info": {
    "author": "David Foster",
    "author_email": "david.foster@techsmart.codes",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# django-mysql-compressed-fields\n\nThis package provides [CompressedTextField], a MySQL-specific\nDjango model field similar to [TextField] or [CharField] that stores its\nvalue in compressed form via [zlib].\n\nIn particular you can replace a TextField or CharField like:\n\n```python\nfrom django.db import models\n\nclass ProjectTextFile(models.Model):\n    content = models.TextField(blank=True)\n```\n\nwith:\n\n```python\nfrom django.db import models\nfrom mysql_compressed_fields import CompressedTextField\n\nclass ProjectTextFile(models.Model):\n    content = CompressedTextField(blank=True)\n```\n\nsuch that the text value of the field is actually compressed in the database.\n\nString-based lookups are supported:\n\n```python\nhtml_files = ProjectTextFile.objects.filter(content__contains='<html')\nhtml_files = ProjectTextFile.objects.filter(content__startswith='<!DOCTYPE')\nhtml_files = ProjectTextFile.objects.filter(content__endswith='</html>')\nempty_html_files = ProjectTextFile.objects.filter(content__in=['', '<html></html>'])\n```\n\nAdvanced manipulations with MySQL's [COMPRESS()], [UNCOMPRESS()], and \n[UNCOMPRESSED_LENGTH()] functions are also supported:\n\n```python\nfrom django.db.models import F\nfrom mysql_compressed_fields import UncompressedLength\n\nfiles = ProjectTextFile.objects.only('id').annotate(\n    content_length=UncompressedLength(F('content'))\n)\n```\n\n[TextField]: https://docs.djangoproject.com/en/3.2/ref/models/fields/#textfield\n[BinaryField]: https://docs.djangoproject.com/en/3.2/ref/models/fields/#binaryfield\n[CharField]: https://docs.djangoproject.com/en/3.2/ref/models/fields/#charfield\n[CompressedTextField]: #CompressedTextField\n[zlib]: https://docs.python.org/3/library/zlib.html\n\n### Dependencies\n\n* [Django] 3.2 or later required\n* [MySQL] 5.7 or later required\n* ...and nothing else ðŸŽ‰\n\n[Django]: https://www.djangoproject.com/\n[MySQL]: https://www.mysql.com/\n\n### License\n\n[MIT](LICENSE)\n\n### Migration Steps\n\nTo migrate an existing TextField or CharField to be a CompressedTextField:\n\n* Install this package:\n    * `pip3 install django-mysql-compressed-fields`\n* Find an existing Django model with an uncompressed [TextField] or [CharField]\n  that you want to compress. For example:\n\n```python\nfrom django.db import models\n\nclass ProjectTextFile(models.Model):\n    content = models.TextField(blank=True)\n```\n\n* Add a `*_compressed` sibling field that will be used to hold the compressed\n  version of the original field. Mark it as `default=''`. Include an explicit\n  `db_column=...` value:\n\n```python\nfrom django.db import models\nfrom mysql_compressed_fields import CompressedTextField\n\nclass ProjectTextFile(models.Model):\n    content = models.TextField(blank=True)\n    content_compressed = CompressedTextField(\n        blank=True,\n        default='',  # needed by Django when adding a field\n        db_column='content_compressed',  # pin column name\n    )\n```\n\n* Generate a migration to add the compressed field:\n    * `python3 manage.py makemigrations`\n* Generate a new empty migration in the same app where the field is defined,\n  which we will use to populate the compressed field:\n    * `python3 manage.py makemigrations --empty __APP_NAME__`\n* Open the empty migration file. It should look something like:\n\n```python\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ide', '0002_projecttextfile_content_compressed'),\n    ]\n\n    operations = [\n    ]\n```\n\n* Edit the `operations` field to use a RunPython step to populate\n  the compressed field from the uncompressed field:\n\n```python\nfrom django.db import migrations\nfrom django.db.models import F\nfrom mysql_compressed_fields import Compress\n\ndef _populate_content_compressed(apps, schema_editor):\n    ProjectTextFile = apps.get_model('ide', 'ProjectTextFile')\n    # NOTE: Assumes \"content\" field is already UTF-8 encoded,\n    #       because CompressedTextField assumes UTF-8 encoding.\n    ProjectTextFile.objects.update(content_compressed=Compress(F('content')))\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('ide', '0002_projecttextfile_content_compressed'),\n    ]\n\n    operations = [\n        migrations.RunPython(\n            code=_populate_content_compressed,\n            reverse_code=migrations.RunPython.noop,\n            atomic=False,\n        )\n    ]\n```\n\n* Remove the original uncompressed field from the model,\n  leaving only the compressed field remaining:\n  \n\n```python\nfrom django.db import models\nfrom mysql_compressed_fields import CompressedTextField\n\nclass ProjectTextFile(models.Model):\n    content_compressed = CompressedTextField(\n        blank=True,\n        default='',  # needed by Django when adding a field\n        db_column='content_compressed',  # pin column name\n    )\n```\n\n* Generate a migration to remove the uncompressed field:\n    * `python3 manage.py makemigrations`\n* Rename the compressed field without the `*_compressed` suffix\n  so that it now has the name of the original uncompressed field:\n\n```python\nfrom django.db import models\nfrom mysql_compressed_fields import CompressedTextField\n\nclass ProjectTextFile(models.Model):\n    content = CompressedTextField(\n        blank=True,\n        default='',  # needed by Django when adding a field\n        db_column='content_compressed',  # pin column name\n    )\n```\n\n* Generate a migration to rename the field:\n    * `python3 manage.py makemigrations`\n    * When prompted whether the field was renamed, answer `y` (for yes).\n* You now have a compressed version of the original field. All done! ðŸŽ‰\n\n### Sponsor\n\nThis project is brought to you by [TechSmart], which seeks to inspire the\nnext generation of K-12 teachers and students to learn coding and create\namazing things with computers. We use Django heavily.\n\n[TechSmart]: https://www.techsmart.codes/\n\n## API Reference\n\nAll classes and functions below should be imported directly from \n`mysql_compressed_fields`. For example:\n\n```python\nfrom mysql_compressed_fields import CompressedTextField\n```\n\n### Fields\n\n#### `CompressedTextField`\n\nA large text field, stored compressed in the database.\n\nGenerally behaves like [TextField]. Stores values in the database using the\nsame database column type as [BinaryField]. The value is compressed in the\nsame format that MySQL's COMPRESS() function uses. Compression and\ndecompression is performed by Django and not the database.\n\nIf you specify a max_length attribute, it will be reflected in the\nTextarea widget of the auto-generated form field. However it is not\nenforced at the model or database level. The max_length applies to the\nlength of the uncompressed text rather than the compressed text.\n\nString-based lookups can be used with this field type.\nSuch lookups will transparently decompress the field on the database server.\n\n```python\nhtml_files = ProjectTextFile.objects.filter(content__contains='<html')\nhtml_files = ProjectTextFile.objects.filter(content__startswith='<!DOCTYPE')\nhtml_files = ProjectTextFile.objects.filter(content__endswith='</html>')\nempty_html_files = ProjectTextFile.objects.filter(content__in=['', '<html></html>'])\n```\n\nNote that F-expressions that reference this field type will always refer to\nthe compressed value rather than the uncompressed value. So you may need to\nuse the Compress() and Uncompress() database functions manually when working\nwith F-expressions.\n\n```python\n# Copy a TextField value (in utf8 collation) to a CompressedTextField\nProjectTextFile.objects.filter(...).update(content=Compress(F('name')))\n\n# Copy a CompressedTextField value to a TextField (in utf8 collation)\nProjectTextFile.objects.filter(...).update(name=Uncompress(F('content')))\n\n# Copy a CompressedTextField value to a CompressedTextField\nProjectTextFile.objects.filter(...).update(content=F('content'))\n```\n\nThe default form widget for this field is a \n`django.contrib.admin.widgets.AdminTextareaWidget` (a kind of [TextInput]).\n\n[TextInput]: https://docs.djangoproject.com/en/3.2/ref/forms/widgets/#textinput\n\n\n### Database functions\n\n[F() expressions]: https://docs.djangoproject.com/en/4.0/ref/models/expressions/#f-expressions\n\n#### `Compress`\n\nThe MySQL [COMPRESS()] function, usable in [F() expressions].\n\n[COMPRESS()]: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html#function_compress\n\n#### `Uncompress`\n\nThe MySQL [UNCOMPRESS()] function, usable in [F() expressions].\n\n[UNCOMPRESS()]: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html#function_uncompress\n\n#### `UncompressedLength`\n\nThe MySQL [UNCOMPRESSED_LENGTH()] function, usable in [F() expressions].\n\n[UNCOMPRESSED_LENGTH()]: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html#function_uncompressed-length\n\n#### `compress`\n\n```python\ndef compress(uncompressed_bytes: bytes) -> bytes:\n```\n\nThe MySQL [COMPRESS()] function.\n\n#### `uncompress`\n\n```python\ndef uncompress(compressed_bytes: bytes) -> bytes:\n```\n\nThe MySQL [UNCOMPRESS()] function.\n\n#### `uncompressed_length`\n\n```python\ndef uncompressed_length(compressed_bytes: bytes) -> int:\n```\n\nThe MySQL [UNCOMPRESSED_LENGTH()] function.\n\n#### `compressed_length`\n\n```python\ndef compressed_length(\n    uncompressed_bytes: bytes,\n    *, chunk_size: int=64 * 1000,\n    stop_if_greater_than: Optional[int]=None) -> int:\n```\n\nReturns the length of COMPRESS(uncompressed_bytes).\n\nIf `stop_if_greater_than` is specified and a result greater than\n`stop_if_greater_than` is returned then the compressed length is\nno less than the returned result.\n\n## Running Tests\n\n* Install [Docker].\n* Install MySQL CLI tools:\n    * If macOS, install using brew: `brew install mysql-client@5.7`\n    * Otherwise install from source: https://downloads.mysql.com/archives/community/\n* Add MySQL CLI tools to path:\n    * `export PATH=\"/usr/local/opt/mysql-client@5.7/bin:$PATH\"`\n* Start MySQL server:\n    * `docker run --name ide_db_server -e MYSQL_DATABASE=ide_db -e MYSQL_ROOT_PASSWORD=root -p 127.0.0.1:8889:3306 -d mysql:5.7`\n* Run tests:\n    * `cd tests/test_data/mysite`\n    * `poetry install`\n    * `poetry run python3 manage.py test`\n\n[Docker]: https://www.docker.com/\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/techsmartkids/django-mysql-compressed-fields",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mysql-compressed-fields",
    "package_url": "https://pypi.org/project/django-mysql-compressed-fields/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-mysql-compressed-fields/",
    "project_urls": {
      "Homepage": "https://github.com/techsmartkids/django-mysql-compressed-fields",
      "Repository": "https://github.com/techsmartkids/django-mysql-compressed-fields"
    },
    "release_url": "https://pypi.org/project/django-mysql-compressed-fields/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9,<4.0",
    "summary": "A large text field, stored compressed in the database, for Django and MySQL.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17229854,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "881efae5eeba80e9d5f03ece73d4ab8815783126a720339ed4a9b73bead3cd54",
        "md5": "fd6fe7cb186b74709ebab47e2f7d27a8",
        "sha256": "cbf982226a0c6ec6aab827424a2b694ee3cf782e7482efc04d24de0fa5a5c982"
      },
      "downloads": -1,
      "filename": "django_mysql_compressed_fields-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd6fe7cb186b74709ebab47e2f7d27a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 8433,
      "upload_time": "2022-07-07T00:04:35",
      "upload_time_iso_8601": "2022-07-07T00:04:35.937775Z",
      "url": "https://files.pythonhosted.org/packages/88/1e/fae5eeba80e9d5f03ece73d4ab8815783126a720339ed4a9b73bead3cd54/django_mysql_compressed_fields-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c91ffda7cc132fe2eb68b545da144daf59c1708293a91345460b6993951b1644",
        "md5": "c60e00bbc831bc73faf7c653e54759be",
        "sha256": "612dbc17d2ac85e630e711a0bfad8524f1c7b15c689126ed1a2a3e063ee14b02"
      },
      "downloads": -1,
      "filename": "django_mysql_compressed_fields-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c60e00bbc831bc73faf7c653e54759be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 8715,
      "upload_time": "2022-07-07T00:04:39",
      "upload_time_iso_8601": "2022-07-07T00:04:39.328888Z",
      "url": "https://files.pythonhosted.org/packages/c9/1f/fda7cc132fe2eb68b545da144daf59c1708293a91345460b6993951b1644/django_mysql_compressed_fields-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}