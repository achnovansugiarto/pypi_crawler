{
  "info": {
    "author": "Volumental",
    "author_email": "maintainer@volumental.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# Django Leek\n![Logo](logo.svg)\n\n[![Build Status](https://travis-ci.com/Volumental/django-leek.svg?branch=master)](https://travis-ci.com/Volumental/django-leek)\n![Code Coverage](https://badges-io.now.sh/badge/Volumental/django-leek/coverage.svg)\n\nThe _simple_ and _slick_ way to run async tasks in Django.\n\n* Django-friendly API\n* Easy to start and stop\n\nBased on [django-queue](https://github.com/Aviah/django-queue).\n\n\n## Why?\nWith a healthy mix of vegetables, such as [Celery](celeryproject.org) and [Carrot](http://www.django-carrot.com/) aleady in the midst, what does `django-leek` bring?\n\nThe most \"lightweight\" library so far has \"install Redis\" as step one. Although, Redis is a fantastic software, sometimes you just want a simple way of offload the webserver and run a task async, such as sending an email.\n\nHere `django-leek` comes to the rescue. Usage and architecture cannot be simpler, and with so few moving parts, it should be very stable, although it's still not battle tested as e.g. Celery.\n\nWith `django-leek` you can get up and running quickly The more complex distributed queues can wait until the website has a lot of traffic, and the scalability is really required.\n\n## Getting started\n1. Install `django-leek` with pip\n\n\t```bash\n    $ pip install django-leek\n\t````\n\n2. Add `django_leek` to `INSTALLED_APPS` in your `settings.py` file.\n\n3. Create tables needed\n\n    ```bash\n\t$ manange.py migrate\n\t```\n\n4. Make sure the django-leek server is running.\n\n\t```bash\n\t$ python manage.py leek\n\t```\n\n5. Go nuts\n\n    ```python\n\tleek = Leek()\n\t@leek.task\n\tdef send_mail(to):\n\t    do_what_ever()\n\n\tsend_mail.offload(to='foobar@example.com')\n\t```\n\n\tYou can also use the \"old\" as found in `django-queue`\n    ```python\n\tpush_task_to_queue(send_mail, to='foobar@example.com')\t\n    ```\n\n6. It's easy to unit test code that in production offloads work to the Leek server.\n\n\t```python\n\tdef _invoke(a_callable, *args, **kwargs):\n+    a_callable(*args, **kwargs)\n\t@patch('django_leek.api.push_task_to_queue', _invoke)\n\tdef test_mytest():\n\t\tsend_mail.offload(to='sync@leek.com')  # now runs synchronously, like a normal function\n    ```\n\n## Development\nThere is a test application you can play around with when developing on `django-leek`. Example:\n\n1. `./manage.sh test_app runserver` - Starts the test app\n2. `./manage.sh test_app leek` - Starts a leek instance for the test app\n3. `./manage.sh django_leek test` - Run test suite.\n\n## Technical overview\nIn a nutshell, a python SocketServer runs in the background, listening on a tcp socket. SocketServer gets the request to run a task from it's socket, puts the task on a Queue. A Worker thread picks tasks from this Queue, and runs the tasks one by one.\n\n### Components\n\n1. Python SocketServer that listens to a tcp socket.\n2. A Worker thread.\n3. A python Queue\n\n### Workflow\nThe workflow that runs an async task:\n\n1. When `SocketServer` starts, it initializes the `Worker` thread.\n2. `SocketServer` listens to requests.\n3. When `SocketServer` receives a request - a callables with args and kwargs -   it puts the request on a python `Queue`.\n4. The `Worker` thread picks a task from the `Queue`.\n5. The `Worker` thread runs the task.\n\n### Can this queue scale to production?\nDepends on the traffic: SocketServer is simple, but solid, and as the site gets more traffic, it's possible to move the django-queue server to another machine, separate database etc. At some point, probably, it's better to pick Celery. Until then, django-leek is a simple, solid, and no-hustle solution. \n\n## Settings\nTo change the default django-queue settings, add a `LEEK` dictionary to your project main `settings.py` file.\n\nThis is the dictionary and the defaults:\n\n\tLEEK = {\n\t\t'bind': \"localhost:8002\",\n     \t'host': \"localhost\",\n     \t'port': 8002}\n\n**`bind`**\nThe leek server will bind here.\n\n**`host`**\nThe django server will connect to this host when notifying leek of jobs.\n\n**`port`**\nThe django server will connect to this port when notifying leek of jobs.\n\n## Persistence\nThe following models are used.\n\n**QueuedTasks**   \nThe model saves every tasks pushed to the queue.    \nThe task is pickled as a `tasks_queue.tasks.Task` object, which is a simple class with a `callable`,`args` and `kwargs` attributes, and one method: `run()`\n\n**SuccessTasks**    \nThe Worker thread saves to this model the `task_id` of every task that was carried out successfuly. **task_id** is the task's `QueuedTasks` id.\n\n**FailedTasks**    \nAfter the Worker tries to run a task and it fails by raising an exception, the Worker saves it to this model. The failed taks is saved by the `task_id`, with the exception message. Only the exception from the last run is saved.\n\n\n### Purge Tasks\n\nAccording to your project needs, you can purge tasks that the Worker completed successfuly.\n\nThe SQL to delete these tasks:\n\n\tDELETE queued,success\n\tFROM tasks_queue_queuedtasks queued\n\tINNER JOIN tasks_queue_successtasks success\n\tON success.task_id = queued.id;\n\nIn a similar way, delete the failed tasks.\nYou can run a cron script, or other script, to purge the tasks.\n\n## Release a new version\n1. Checkout master branch\n2. Make sure virtual environment is activated. `source venv/bin/activate`\n3. Make sure version in `setup.py` is correct. `grep version setup.py`\n4. Make sure setuptools, twine, and wheel are installed and up to date  \n\n       pip install \"setuptools>=38.6.0\" \"twine>=1.11.0\" \"wheel>=0.31.0\"\n\n5. Clean out any old dist packages. `rm -r dist/`\n6. Build source and wheel dists. `python setup.py sdist bdist_wheel`\n7. Upload to PyPI `twine upload dist/*`\n8. Profit!\n\n## Authors\nAviah, Silvia Scalisi and Samuel Carlsson\n\nSee [contributors]( https://github.com/Volumental/django-leek/graphs/contributors) for full list.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Volumental/django-leek",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-leek",
    "package_url": "https://pypi.org/project/django-leek/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-leek/",
    "project_urls": {
      "Homepage": "https://github.com/Volumental/django-leek"
    },
    "release_url": "https://pypi.org/project/django-leek/1.0.1/",
    "requires_dist": [
      "django (>=1.11)"
    ],
    "requires_python": "",
    "summary": "A simple Django app to offload tasks from main web server",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16075141,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3face8babb1e4b8a514c260f4d0b0db650f0d208671a2fe8070b6644d1e37885",
        "md5": "34e951a8e36ceb0b69fd370c81379b77",
        "sha256": "62f40d3b416cc558abb6230bf0dd0592114ab776a1f01e4b6029834bb2126b79"
      },
      "downloads": -1,
      "filename": "django_leek-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "34e951a8e36ceb0b69fd370c81379b77",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14498,
      "upload_time": "2020-03-11T10:46:16",
      "upload_time_iso_8601": "2020-03-11T10:46:16.854251Z",
      "url": "https://files.pythonhosted.org/packages/3f/ac/e8babb1e4b8a514c260f4d0b0db650f0d208671a2fe8070b6644d1e37885/django_leek-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}