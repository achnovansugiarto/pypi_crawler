{
  "info": {
    "author": "ihasdapie",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\nLive Popular Times\n==================\n\nA library that extends the populartimes module to include support for **Live** *Google Maps* popular times data, which is currently inaccessible via Google's API.\n\nGetting Started\n---------------\n\nRequirements\n^^^^^^^^^^^^\n\nGoogle Maps API key https://developers.google.com/places/web-service/get-api-key \n\nInstallation:\n^^^^^^^^^^^^^\n\nOptions:\n\"\"\"\"\"\"\"\"\n\n\n#. ``python3 -m pip install --upgrade git+https://github.com/GrocerCheck/LivePopularTimes``\n#. ``clone`` the repository, ``cd`` into the populartimes directory and run ``pip install .``\n#. ``python3 -m pip install LivePopularTimes``\n\nUsage\n-----\n\n\n* Please note that certain functions of this module use the Google Places Web API, which is billable to Google.\n* Functions that accept api keys in their arguments will make API calls, and vice versa (self-explanatory)\n\nlivepopulartimes.get_populartimes_by_address(formatted_address)\n---------------------------------------------------------------\n\nRetrieves information for a given address and adds populartimes, wait, time_spent and other data not accessible via Google Places by scraping and with API call, given a formatted address.\n\n\n* \n  ``livepopulartimes.get_populartimes_by_address(formatted_address)``\n\n\n  * **formatted_address** \n\n    * str; address of location you are looking for, preferably in the following format:\n\n      * \"(\\ *location name*\\ ) , *full address*\\ , *city*\\ , *province/state/etc*\\ , *country*\\ \"\n\n  * \n    **proxy**\n\n\n    * default = False\n    * proxies ip in format \n      .. code-block::\n\n               `{\n               \"http\" : \"http://10.10.1.10:2138\",\n               \"https\" : \"http://10.10.1.10:1080\",\n               `}\n\n  * \n    **Example call**\n\n\n    * ``livepopulartimes.get_populartimes_by_address(\"(H-Mart Dunbar) 5557 Dunbar Street, Vancouver BC, Canada\", proxy=proxy)``\n\n* \n  **Response**\n\n\n  * The information present for places can vary. Therefore *popularity*\\ , *current_popularity*\\ , *rating*\\ , *rating_n*\\ , *time_wait*\\ , *time_spent* and *phone* are optional return parameters and only present if available.\n  * *time_wait* and *time_spent* are in minutes\n  * **Note**\\ : The *time_wait* and *time_spent* parameters were only added recently to Google Maps and are only present as a language specific string. The extracted values may therefore be incorrect and you might have to parse the raw string yourself, depending on your language settings.\n  * Returns dictionary of the following parameters:\n\n    * ``name``\n    * ``place_id``\n    * ``populartimes`` *populartimes is \"cleaned up\" data, please refer to example output for details*\n    * ``current_popularity``\n    * ``popular_times`` *popular_times is \"raw\" data, please refer to example output for details*\n    * ``address``\n    * ``location``\n\n      * ``lat``\n      * ``lng``\n\n    * ``categories``\n    * ``place_types``\n\n  * **Refer to ``example_output(get_populartimes_by_address).json)`` for example output**\n\nlivepopulartimes.get_populartimes_by_PlaceID(api_key, place_id)\n---------------------------------------------------------------\n\nRetrieves information for a given address and adds populartimes, wait, time_spent and other data not accessible via Google Places via Places API call & scraping, given a place_id.\n\n\n* \n  ``livepopulartimes.get_populartimes_by_PlaceID(api_key, place_id)``\n\n\n  * **api_key**\n\n    * str; your Google Places API key\n\n  * \n    **place_id**\n\n\n    * str; Unique Google Places place identifier, can be obtained via ``get_places_by_search`` or Google Places javascript API\n    * more details here: [https://developers.google.com/places/place-id]\n\n  * \n    **Example call**\n\n\n    * ``livepopulartimes.get_populartimes_by_PlaceID(API_KEY, \"ChIJtW0qSJp0hlQRj22fXuPh7s4\")``\n\n* \n  **Response**\n\n\n  * The information present for places can vary. Therefore *popularity*\\ , *current_popularity*\\ , *rating*\\ , *rating_n*\\ , *time_wait*\\ , *time_spent* and *phone* are optional return parameters and only present if available.\n  * *time_wait* and *time_spent* are in minutes\n  * **Note**\\ : The *time_wait* and *time_spent* parameters were only added recently to Google Maps and are only present as a language specific string. The extracted values may therefore be incorrect and you might have to parse the raw string yourself, depending on your language settings.\n  * Returns dictionary of the following parameters:\n\n    * ``name``\n    * ``place_id``\n    * ``populartimes`` *populartimes is \"cleaned up\" data, please refer to example output for details*\n    * ``current_popularity``\n    * ``popular_times`` *popular_times is \"raw\" data, please refer to example output for details*\n    * ``address``\n    * ``location``\n\n      * ``lat``\n      * ``lng``\n\n    * ``hours``\n    * ``categories``\n    * ``place_types``\n\n  * **Refer to ``example_output(get_populartimes_by_PlaceID).json)`` for example output**\n\nlivepopulartimes.get_places_by_search(query)\n--------------------------------------------\n\nRetrives Google Maps location data from search query\n\n\n* \n  ``livepopulartimes.get_populartimes_by_PlaceID(api_key, place_id)``\n\n\n  * **query**\n\n    * str; Google search query\n\n  * **Example call**\n\n    * ``livepopulartimes.get_places_by_query(\"restaurants open in London\")``\n\n* \n  **Response**\n\n\n  * The information present for places can vary\n  * Returns dictionary with the following fields:\n\n    * ``name``\n    * ``place_id``\n    * ``address``\n    * ``location``\n\n      * ``lat``\n      * ``lng``\n\n    * ``categories``\n    * ``place_types``\n\n  * **Refer to ``example_output(get_places_by_search).txt)`` for example output**\n\nSpecial thanks to m-wrzr's populartimes module for the framework upon which this is built.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GrocerCheck/LivePopularTimes",
    "keywords": "populartimes googlemaps live,googlemaps,scraper,crawler,populartimes",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LivePopularTimes",
    "package_url": "https://pypi.org/project/LivePopularTimes/",
    "platform": "",
    "project_url": "https://pypi.org/project/LivePopularTimes/",
    "project_urls": {
      "Homepage": "https://github.com/GrocerCheck/LivePopularTimes"
    },
    "release_url": "https://pypi.org/project/LivePopularTimes/1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "LivePopularTimes: A Google Maps scraper",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9793271,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd3a8ded0db86aead5b621c8ed41dd2791a071b4488b627b06d7991022b63158",
        "md5": "a40297a3133c234000cc68529f266027",
        "sha256": "7c0bd24ab99783b65783a5211988c218a67282d9cd7701b47fbff804924e1d4f"
      },
      "downloads": -1,
      "filename": "LivePopularTimes-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a40297a3133c234000cc68529f266027",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10400,
      "upload_time": "2020-05-21T01:18:57",
      "upload_time_iso_8601": "2020-05-21T01:18:57.867828Z",
      "url": "https://files.pythonhosted.org/packages/fd/3a/8ded0db86aead5b621c8ed41dd2791a071b4488b627b06d7991022b63158/LivePopularTimes-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a589dd1d199de9615d11536c42a0080e3902a6d624193ae0729527416f51a84",
        "md5": "906e381005e6e047671e1f4d18371fa2",
        "sha256": "eab02348e8521919c7d9b5bf4067d2d2c6f50e3c77e810a81b574408f10278fa"
      },
      "downloads": -1,
      "filename": "LivePopularTimes-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "906e381005e6e047671e1f4d18371fa2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9143,
      "upload_time": "2020-05-21T01:19:00",
      "upload_time_iso_8601": "2020-05-21T01:19:00.020881Z",
      "url": "https://files.pythonhosted.org/packages/8a/58/9dd1d199de9615d11536c42a0080e3902a6d624193ae0729527416f51a84/LivePopularTimes-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}