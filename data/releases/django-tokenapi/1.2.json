{
  "info": {
    "author": "Julian Pulgarin",
    "author_email": "julian@pulgarin.co",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-tokenapi\n\nThis is a Django application which allows you to create simple APIs\nthat use token-based authentication. You can easily open up existing views\nto the API by adding a single decorator.\n\nThis is useful if you want to create applications on mobile devices which\nconnect to your Django website, but where only your clients are expected to\naccess the API.\n\nIf instead you are looking to open up an API to the public, you are better off\ngoing with a framework with OAuth support, of which there exist some really\ngood [implementations](https://bitbucket.org/jespern/django-piston/wiki/Home).\n\n## Requirements\n\n* Django 1.9+\n* Python 2.7+\n\n## Installation\n\nFirst obtain `tokenapi` package and place it somewhere on your `PYTHONPATH`, for example\nin your project directory (where settings.py is).\n\nAlternatively, if you are\nusing some sort of virtual environment, like [virtualenv][], you can perform a\nregular installation or use [pip][]:\n\n    python setup.py install\n\n    # or ...\n\n    pip install django-tokenapi\n\n[virtualenv]: http://pypi.python.org/pypi/virtualenv\n[pip]: http://pip.openplans.org/\n\nAdd `tokenapi` to your `INSTALLED_APPS`.\n\nEnsure that `django.contrib.auth.backends.ModelBackend` is in your `AUTHENTICATION_BACKENDS`.\n\nAdd `tokenapi.backends.TokenBackend` to your `AUTHENTICATION_BACKENDS`.\n\nInclude `tokenapi.urls` in your `urls.py`. It will look something like this:\n\n    urlpatterns = [\n        url(r'^token/', include('tokenapi.urls')),\n    ]\n\n## Configuration\n\nYou can change the number of days that a token is valid for by setting\n`TOKEN_TIMEOUT_DAYS` in `settings.py`. The default is `7`.\n\n## Usage\n\n### Obtaining a Token\n\nYou can obtain a token for a specific user by sending a POST request with a\nusername and password parameter to the `api_token_new` view.\nUsing [curl][], the request would look like:\n\n    curl -d \"username=jpulgarin&password=GGGGGG\" http://www.yourdomain.com/token/new.json\n\n[curl]: http://curl.haxx.se/\n\nIf the request is successful, you will receive a JSON response like so:\n\n    {\"success\": true, \"token\": \"2uy-420a8efff7f882afc20d\", \"user\": 1}\n\nAn invalid username and password pair will produce a response like so:\n\n    {\"success\": false, \"errors\": \"Unable to log you in, please try again\"}\n\nNote that if you User model has an `is_active` flag, the authentication logic will not allow inactive users to obtain or use tokens.\n\nYou should store the `user` and `token` that are returned on the client\naccessing the API, as all subsequent calls will require that the request have\na valid token and user pair.\n\n### Verifying a Token\n\nYou can verify that a token matches a given user by sending a GET request\nto the `api_token` view, and sending the token and user as part of the URL.\nUsing curl it would look like:\n\n    curl http://www.yourdomain.com/token/2uy-420a8efff7f882afc20d/1.json\n\nIf valid, you will receive the following JSON response:\n\n    {\"success\": true}\n\n### Writing API Compatible Views\n\nTo allow a view to be accessed through token-based auth, use the\n`tokenapi.decorators.token_required` decorator. There are also\nJSON helper functions to make it easier to deal with JSON.\nThis is an example of an API compatible view:\n\n    from tokenapi.decorators import token_required\n    from tokenapi.http import JsonResponse, JsonError, JsonResponseBadRequest, JsonResponseUnauthorized, JsonResponseForbidden, JsonResponseNotFound, JsonResponseNotAllowed, JsonResponseNotAcceptable\n\n\n    @token_required\n    def index(request):\n        if request.method == 'POST':\n            data = {\n                'test1': 49,\n                'test2': 'awesome',\n            }\n            return JsonResponse(data)\n        else:\n            return JsonError(\"Only POST is allowed\")\n\n### Using a Token\n\n#### Request Parameters\n\nThe client can access any API compatible view by sending a request to it,\nand including `user` and `token` as request parameters (either GET or POST).\nAccessing the example view above using curl might look like:\n\n    curl -d \"user=1&token=2uy-420a8efff7f882afc20d\" http://www.yourdomain.com/new.json\n\nYou would receive the following response:\n\n    {\"success\": true, \"test1\": 49, \"test2\": \"awesome\"}\n\n#### Basic authentication\n\nAlternately, you can access any API compatible view by including the user and token in\nthe Authorization header according to the\n[basic access authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)\nscheme. To construct the Authorization header:\n\n1. Combine user id and token into string \"user:token\"\n2. Encode resulting string using Base64\n3. Prepend \"Basic \" (including the trailing space) to the resulting Base64 encoded string\n\nIf, in the same request, you provide credentials via both request parameters and the\nAuthorization header, the request parameters will be used for authentication.\n\n## Acknowledgements\n\nThe token generating code is from `django.contrib.auth.tokens`, but modified so\nthat it does not hash on a user's last login.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpulgarin/django-tokenapi",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tokenapi",
    "package_url": "https://pypi.org/project/django-tokenapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tokenapi/",
    "project_urls": {
      "Homepage": "https://github.com/jpulgarin/django-tokenapi"
    },
    "release_url": "https://pypi.org/project/django-tokenapi/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Add an API to your Django app using token-based authentication.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6997836,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "439ec8039e2f6edccebe57556697f27ce1cfbde933627acdd94b103718984de0",
        "md5": "0531798ee03eba0a860a410e0d5a6c15",
        "sha256": "2371b50f760acaf0f0c2c732ae274584b5cc0c122de030b8dbd97e7179953270"
      },
      "downloads": -1,
      "filename": "django_tokenapi-1.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "0531798ee03eba0a860a410e0d5a6c15",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 8816,
      "upload_time": "2019-09-12T22:17:07",
      "upload_time_iso_8601": "2019-09-12T22:17:07.500651Z",
      "url": "https://files.pythonhosted.org/packages/43/9e/c8039e2f6edccebe57556697f27ce1cfbde933627acdd94b103718984de0/django_tokenapi-1.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9ff8bceb3cbacbdeb487ae0d6d9d064f66c5f7181316d0d74cc2259a4115e75",
        "md5": "4cc2ea43ac18e6efb80ec12794b9f59c",
        "sha256": "2d8d5837803a06aad84ae38856489f08339fb4ec2a822002e6a48d16176c7720"
      },
      "downloads": -1,
      "filename": "django-tokenapi-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4cc2ea43ac18e6efb80ec12794b9f59c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6489,
      "upload_time": "2019-09-12T22:17:08",
      "upload_time_iso_8601": "2019-09-12T22:17:08.655501Z",
      "url": "https://files.pythonhosted.org/packages/c9/ff/8bceb3cbacbdeb487ae0d6d9d064f66c5f7181316d0d74cc2259a4115e75/django-tokenapi-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}