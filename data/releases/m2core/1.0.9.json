{
  "info": {
    "author": "Maxim Dutkin",
    "author_email": "max@dutkin.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "# M2Core web framework\n\n### Status\n[![Build Status](https://travis-ci.org/mdutkin/m2core.svg?branch=master)](https://travis-ci.org/mdutkin/m2core.svg?branch=master)\n\nM2Core is a framework build over Tornado web server. It helps you to build an effective REST API in a few minutes.\nWe use a mix of Tornado, SQLAlchemy and Redis. M2Core has lots of helpers to do you ordinary tasks while building handlers\nfor your REST API. Real benefits are achieved when you are making REST services in connection with PostgreSQL. Redis is used\nin order to cache access tokens, roles and role permissions, so each authorization check is made without PostgreSQL participation.\n\n\n### The list of main features:\n\n* **rights management (completely cached in Redis)**\n\n* **handy BaseModel mixin**\n\n* **a bunch of decorators for permissions check, try-catch block and etc.**\n\n* **automatic documentation in JSON per each method of each handler retrieved from docstrings**\n\n* **DB schema in JSON with custom fields (we use it somehow in our React form generators)**\n\n* **helper class for unit testing of REST API**\n\n\n\n## Installation\n\ninstall package in normal way via pip:\n\n```bash\npip install m2core\n```\n\nrequired packages will install automatically\n\n\n\n## Usage\n\nM2Core uses `tornado.options` / `tornado.define` to set up configuration. Here is a list of settings with default values:\n\n**Server options**\n\n| Option name        | Description                                                                    | Type        | Default value                    |\n|--------------------|--------------------------------------------------------------------------------|:-----------:|----------------------------------|\n|debug               | Tornado debug mode                                                             | bool        | False                            |\n|config_name         | Config name                                                                    | str         | config.py                        |\n|admin_role_name     | Admin group name                                                               | str         | admins                           |\n|default_role_name   | Default user group with login permissions                                      | str         | users                            |\n|default_permission  | Default permission                                                             | str         | authorized                       |\n|xsrf_cookie         | Enable or disable XSRF-cookie protection                                       | str or bool | False                            |\n|cookie_secret       | Tornado cookie secret                                                          | str         | gfqeg4t023ty724ythweirhgiuwehrtp |\n|server_port         | Tornado TCP server bind port                                                   | int         | 8888                             |\n|locale              | Server locale for dates, times, currency and etc                               | str         | ru_RU.UTF-8                      |\n|json_indent         | Number of `space` characters, which are used in json responses after new lines | int         | 2                                |\n|thread_pool_size    | Pool size for background executor                                              | int         | 10                               |\n|gen_salt            | Argument for gen_salt func in bcrypt module                                    | int         | 12                               |\n\n\n**DB options**\n\n| Option name    | Description                            | Type | Default value |\n|----------------|----------------------------------------|:----:|---------------|\n|debug_orm       | SQLAlchemy debug mode                  | bool | False         |\n|pg_host         | Database host                          | str  | 127.0.0.1     |\n|pg_port         | Database port                          | int  | 5432          |\n|pg_port         | Database port                          | int  | 5432          |\n|pg_db           | Database name                          | str  | m2core        |\n|pg_user         | Database user                          | str  | postgres      |\n|pg_password     | Database password                      | str  | password      |\n|pg_pool_size    | Pool size for executor                 | int  | 40            |\n|pg_pool_recycle | Pool recycle time in sec, -1 - disable | int  | -1            |\n\n\n**Redis options**\n\n| Option name | Description                  | Type | Default value |\n|-------------|------------------------------|:----:|---------------|\n|redis_host   | Redis host                   | str  | 127.0.0.1     |\n|redis_port   | Redis port                   | int  | 6379          |\n|redis_db     | Redis database number (0-15) | int  | 0             |\n\n\nYou can place your settings in root folder and name it `config.py`, or place it wherever you want and pass relative path to this config file via\n`--config_name=my/cool/path/to/config.py` argument. You can read more about tornado.options [here](http://www.tornadoweb.org/en/stable/options.html).\nBy the way, **M2Core** also supports command-line parsing.\n\nHere is an [Example REST API sources](https://github.com/mdutkin/m2core/tree/master/example). In this example I tried to show most important **M2Core** features.\nAll modules are documented, you can read description of each function in sources.\n\nRights management in **M2Core** is quite simple. You implement your handlers with inheritance from `BaseHandler`, then do something like:\n\n```python\nfrom handlers import AdminUsersHandler\n\n\nm2core = M2Core()\nhuman_route = r'/users/:{id:int}'\nm2core.add_endpoint(human_route, AdminUsersHandler)\n# or like that\nm2core.add_endpoint_permissions(human_route, {\n    'get': [options.default_permission, 'get_user_info'],\n    'post': None,\n    'put': [options.default_permission, 'update_user_info'],\n    'delete': [options.default_permission, 'delete_user'],\n})\n```\n\nThis will set certain bunch of permissions per each method of each route you want. You may use the same handler again with different route with other permissions.\nFor further information read docs of `m2core.add_endpoint_permissions`.\n\nI should say a few words about url mask. It supports it's own rules and later generates url for Tornado. Url masks can be like:\n\n| Url mask                                          | Params | Rule description                                                                               |\n|---------------------------------------------------|:------:|------------------------------------------------------------------------------------------------|\n|/users/:{id}                                       | :id    | attribute, any type                                                                            |\n|/users/:{id:int}                                   | :id    | int attribute, any length                                                                      |\n|/users/:{id:int(2)}                                | :id    | int attribute, length is 2 numbers                                                             |\n|/users/:{id:float}                                 | :id    | float attribute                                                                                |\n|/users/:{id:float(3)}                              | :id    | float attribute, length is 3 numbers including `,`                                             |\n|/users/:{id:float(2,5)}                            | :id    | float attribute, length is between 2 and 5 numbers including `,`                               |\n|/users/:{id:string}                                | :id    | string, any length, without `/` symbol                                                         |\n|/users/:{id:string(2)}                             | :id    | string,  length is 2 symbols, without `/` symbol                                               |\n|/users/:{id:bool}                                  | :id    | bool flag, accepts only `0` or `1`                                                             |\n|/users/:{id:int(0,\\[0-100\\])}                      | :id    | int, any length (0), but value must be between `0` and `100`                                   |\n|/users/:{id:float(0,\\[0-100\\])}                    | :id    | float, any length (0), but value must be between `0` and `100`                                 |\n|/users/:{id:string(0,\\[string1;string2;string3\\])} | :id    | string, any length (0), but value must be in list of values: ('string1', 'string2', 'string3') |",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mdutkin/m2core",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "m2core",
    "package_url": "https://pypi.org/project/m2core/",
    "platform": "",
    "project_url": "https://pypi.org/project/m2core/",
    "project_urls": {
      "Homepage": "https://github.com/mdutkin/m2core"
    },
    "release_url": "https://pypi.org/project/m2core/1.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "M2Core REST API web framework",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3441761,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f99fa6c817cb8dca2038dbef7d6e25958f896656b69a8273ffa137d5781c3fe7",
        "md5": "43674062fa0b33e3bdf76706147a9643",
        "sha256": "cb38bf86a541ca202e7e7747ff9d467748de87e3562e4396ea7de92bd7c87c46"
      },
      "downloads": -1,
      "filename": "m2core-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "43674062fa0b33e3bdf76706147a9643",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30235,
      "upload_time": "2017-12-21T15:23:42",
      "upload_time_iso_8601": "2017-12-21T15:23:42.854830Z",
      "url": "https://files.pythonhosted.org/packages/f9/9f/a6c817cb8dca2038dbef7d6e25958f896656b69a8273ffa137d5781c3fe7/m2core-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}