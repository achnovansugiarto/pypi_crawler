{
  "info": {
    "author": "PeopleDoc",
    "author_email": "pdoc-team-ml@ultimatesoftware.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "Machine Learning Versioning Tools - mlvtools\n============================================\nPublic repository for versioning machine learning data.\n\nInstalling\n----------\n\nmlvtools can be installed from **PyPi**:\n\n    pip install mlvtools\n\nIt is also possible to install it directly from sources:\n\n    git clone https://github.com/peopledoc/mlvtools.git\n    cd mlvtools\n\n        make develop\n    OR\n        make package\n        pip install ./package/*.whl\n\nTutorial\n--------\n\nA tutorial is available to showcase how to use the tools.\nSee [mlvtools tutorial](https://github.com/peopledoc/mlv-tools-tutorial).\n\nKeywords\n--------\n\n**Step metadata**: in this document it refers to the first code cell when it\nis used to declare metadata such as parameters, dvc inputs/outputs, etc.\n\n**Working directory**: the project's working directory. Files specified in the\nuser configuration are relative to this directory. The `--working-directory`\n(or `-w`) flag is used to specify the working directory.\n\nTools\n-----\n\n**ipynb_to_python**: this command converts a given *Jupyter Notebook* to a\nparameterized and executable *Python3 script* (see specific syntax in section below)\n\n    ipynb_to_python -n [notebook_path] -o [python_script_path]\n\n**gen_dvc**: this command creates a *DVC command* which call the script generated by ipynb_to_python.\n\n    gen_dvc -i [python_script] --out-py-cmd [python_command] \\\n                  --out-bash-cmd [dvc_command]\n\n**export_pipeline**: this command exports the pipeline corresponding to the given DVC meta file into a bash script.\nPipeline steps are called sequentially in a dependency order. Only for local steps.\n\n    export_pipeline --dvc [DVC target meta file] -o [pipeline script]\n\n\n**ipynb_to_dvc**: this command converts a given *Jupyter Notebook* to a\nparameterized and executable *Python3 script* and a *DVC command*. It is the combination\nof **ipynb_to_python** and **gen_dvc**. It only works with a configuration file.\n\n    ipynb_to_dvc -n [notebook_path]\n\n**check_script_consistency** and **check_all_scripts_consistency**: those commands ensure consitency between a Jupyter\nnotebook and its generated python script. It is possible to use them as git hook or in the project continuous\n integration. The consistency check ignores blank lines and comments.\n\n    check_script_consistency -n [notebook_path] -s [script_path]\n\n    check_all_scripts_consistency -n [notebook_directory]\n    # Works only with a configuration file (provided or auto-detected)\n\nConfiguration\n-------------\n\nA configuration file can be provided, but it is not mandatory.  Its default location is\n`[working_dir]/.mlvtools`. Use the flag `--conf-path` (or `-c`) on the command line to\nspecify a specific configuration file path.\n\nThe configuration file format is JSON\n\n```json\n{\n  \"path\":\n  {\n    \"python_script_root_dir\": \"[path_to_the_script_directory]\",\n    \"dvc_cmd_root_dir\": \"[path_to_the_dvc_cmd_directory]\",\n    \"dvc_metadata_root_dir\": \"[path_to_the_dvc_metadata_directory]\" [optional]\n  },\n  \"ignore_keys: [\"keywords\", \"to\", \"ignore\"],\n  \"dvc_var_python_cmd_path\": \"MLV_PY_CMD_PATH_CUSTOM\",\n  \"dvc_var_python_cmd_name\": \"MLV_PY_CMD_NAME_CUSTOM\",\n  \"docstring_conf\": \"./docstring_conf.yml\"\n}\n```\n\nAll given paths must be relative to the **working directory**\n\n- *path_to_the_script_directory*: is the directory where **Python 3** script will be generated using\n**ipynb_to_script** command. The **Python 3** script name is based on the notebook name.\n\n        ipynb_to_script -n ./data/My\\ Notebook.ipynb\n\n        Generated script: `[path_to_the_script_directory]/my_notebook.py`\n\n- *path_to_the_dvc_cmd_directory*: is the directory where **DVC** commands will be generated using\n**gen_dvc** command. Generated command names are based on **Python 3** script names.\n\n        gen_dvc -i ./scripts/my_notebook.py\n\n        Generated commands: `[path_to_the_python_cmd_directory]/my_notebook_dvc`\n\n- *path_to_the_dvc_metadata_directory*: is the directory where **DVC** metadata files will be generated when executing\n**gen_dvc** commands. This value is optional, by default **DVC** metadata files will be saved in the **working directory**.\nGenerated **DVC** metadata file names are based on **Python 3** script names.\n\n        ./[path_to_the_python_cmd_directory]/my_notebook_dvc\n\n        Generated files: `[path_to_the_dvc_metadata_directory]/my_notebook.dvc`\n\n- *ignore_keys*: list of keywords use to discard a cell. Default value is *['# No effect ]*.\n    (See *Discard cell* section)\n\n- *dvc_var_python_cmd_path*, *dvc_var_python_cmd_name*, *dvc_var_meta_filename*: they allow to customize variable names which\ncan be used in **dvc-cmd** Docstring parameter. They respectively correspond to the variables holding the python command\nfile path, the file name and the variable holding the **DVC** default meta file name. Default values are 'MLV_PY_CMD_PATH',\n 'MLV_PY_CMD_NAME' and 'MLV_DVC_META_FILENAME'. (See DVC Command/Complex cases section for usage)\n\n- *docstring_conf*: the path to the docstring configuration used for Jinja templating (see DVC templating section).\nThis parameter is not mandatory.\n\n\nJupyter Notebook syntax\n-----------------------\n\nThe **Step metadata** cell is used to declare script parameters and **DVC** outputs and dependencies.\nThis can be done using basic Docstring syntax. This Docstring must be the first statement is this cell, only\ncomments can be writen above.\n\n\n### Good practices\n\nAvoid using relative paths in your Jupyter Notebook because they are relative to\nthe notebook location which is not the same when it will be converted to a script.\n\n\n### Python Script Parameters\n\nParameters can be declared in the **Jupyter Notebook** using basic Docstring syntax.\nThis parameters description is used to generate configurable and executable python scripts.\n\nParameters declaration in **Jupyter Notebook**:\n\n**Jupyter Notebook**: process_files.ipynb\n\n\n    #:param [type]? [param_name]: [description]?\n    \"\"\"\n    :param str input_file: the input file\n    :param output_file: the output_file\n    :param rate: the learning rate\n    :param int retry:\n    \"\"\"\n\nGenerated **Python3 script**:\n\n    [...]\n    def process_file(input_file: str, output_file, rate, retry:int):\n        \"\"\"\n         ...\n        \"\"\"\n    [...]\n\nScript command line parameters:\n\n    my_script.py -h\n\n    usage: my_cmd [-h] --input-file INPUT_FILE --output-file OUTPUT_FILE --rate\n                 RATE --retry RETRY\n\n    Command for script [script_name]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --input-file INPUT_FILE\n                            the input file\n      --output-file OUTPUT_FILE\n                            the output_file\n      --rate RATE           the rate\n      --retry RETRY\n\nAll declared arguments are required.\n\n### DVC command\n\nA **DVC** command is a wrapper over **dvc run** command called on a **Python 3** script generated\nwith **ipynb_to_python** command. It is a step of a pipeline.\n\nIt is based on data declared in **notebook metadata**,\n 2 modes are available:\n    - describe only input/output for simple cases (recommended)\n    - describe full command for complex cases\n\n#### Simple cases\n\nSyntax\n\n    :param str input_csv_file: Path to input file\n    :param str output_csv_file: Path to output file\n    [...]\n\n    [:dvc-[in|out][\\s{related_param}]?:[\\s{file_path}]?]*\n    [:dvc-extra: {python_other_param}]?\n\n    :dvc-in: ./data/filter.csv\n    :dvc-in input_csv_file: ./data/info.csv\n    :dvc-out: ./data/train_set.csv\n    :dvc-out output_csv_file: ./data/test_set.csv\n    :dvc-extra: --mode train --rate 12\n\nProvided **{file_path}** path can be absolute or relative to the working directory.\n\nThe **{related_param}** is a parameter of the corresponding **Python 3** script,\n it is filled in for the python script call\n\nThe **dvc-extra** allows to declare parameters which are not dvc outputs or dependencies.\nThose parameters are provided to the call of the **Python 3** command.\n\n    pushd /working-directory\n\n    INPUT_CSV_FILE=\"./data/info.csv\"\n    OUTPUT_CSV_FILE=\"./data/test_set.csv\"\n\n    dvc run \\\n    -d ./data/filter.csv\\\n    -d $INPUT_CSV_FILE\\\n    -o ./data/train_set.csv\\\n    -o $OUTPUT_CSV_FILE\\\n    gen_src/python_script.py --mode train --rate 12\n            --input-csv-file $INPUT_CSV_FILE\n            --output-csv-file $OUTPUT_CSV_FILE\n\n\n\n#### Complex cases\n\nSyntax\n\n    :dvc-cmd: {dvc_command}\n\n    :dvc-cmd: dvc run -o ./out_train.csv -o ./out_test.csv\n        \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv &&\n         $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\n\nThis syntax allows to provide the full dvc command to generate. All paths can be absolute or relative to the working directory.\nThe variables $MLV_PY_CMD_PATH and $MLV_PY_CMD_NAME are available. They respectively contains the path and the name\n of the corresponding python command.\nThe variable $MLV_DVC_META_FILENAME contains the default name of the **DVC** meta file.\n\n    pushd /working-directory\n    MLV_PY_CMD_PATH=\"gen_src/python_script.py\"\n    MLV_PY_CMD_NAME=\"python_script.py\"\n\n    dvc run -f $MLV_DVC_META_FILENAME -o ./out_train.csv \\\n        -o ./out_test.csv \\\n        \"$MLV_PY_CMD_PATH -m train --out ./out_train.csv && \\\n        $MLV_PY_CMD_PATH -m test --out ./out_test.csv\"\n    popd\n\n\n### DVC templating\n\nIt is possible to use Jinja2 template in DVC Docstring part. For example, it can be useful to declare all\nsteps dependencies, outputs and extra parameters.\n\nExample:\n\n    # Docstring in Jupyter notebook\n    \"\"\"\n    [...]\n    :dvc-in: {{ conf.train_data_file_path }}\n    :dvc-out: {{ conf.model_file_path }}\n    :dvc-extra: --rate {{ conf.rate }}\n    \"\"\"\n\n    # Docstring configuration file (Yaml format): ./dc_conf.yml\n\n    train_data_file_path: ./data/trainset.csv\n    model_file_path: ./data/model.pkl\n    rate: 45\n\n    # DVC command generation\n    gen_dvc -i ./python_script.py --docstring-conf ./dc_conf.yml\n\nThe *Docstring configuration file* can be provided through the main configuration or using **--docstring-conf**\nargument. This feature is only available for **gen_dvc** command.\n\n\n### Discard cell\n\nSome cells in **Jupyter Notebook** are executed only to watch intermediate results.\nIn a **Python 3** script those are statements with no effect.\nThe comment **# No effect** allows to discard a whole cell content to avoid waste of\ntime running those statements. It is possible to customize the list of discard keywords, see *Configuration* section.\n\n\nContributing\n------------\n\nWe happily welcome contributions to mlvtools. Please see our [contribution](./CONTRIBUTING.md) guide for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/peopledoc/ml-versionning-tools",
    "keywords": "peopledoc,machine learning,versioning,mlvtools",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlvtools",
    "package_url": "https://pypi.org/project/mlvtools/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlvtools/",
    "project_urls": {
      "Homepage": "http://github.com/peopledoc/ml-versionning-tools"
    },
    "release_url": "https://pypi.org/project/mlvtools/2.0.2/",
    "requires_dist": [
      "docstring-parser (>=0.3)",
      "Jinja2 (>=2.10.1)",
      "nbconvert",
      "pydantic (>=1.0)",
      "PyYAML",
      "networkx",
      "yapf",
      "pytest ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "dvc ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Set of Machine Learning versioning helpers",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12696315,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "076ef5a55330cc4a55dda3d4333c290a8bb9acdcdbb9cc5c83adaff351cbf5e3",
        "md5": "579b448610ec90999cb14cdb13aab1db",
        "sha256": "5a3a0f14c3a56c9fe1358b1c80a36e7baa084932530157bfde72341e5f7da607"
      },
      "downloads": -1,
      "filename": "mlvtools-2.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "579b448610ec90999cb14cdb13aab1db",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 27501,
      "upload_time": "2020-04-10T08:53:59",
      "upload_time_iso_8601": "2020-04-10T08:53:59.595108Z",
      "url": "https://files.pythonhosted.org/packages/07/6e/f5a55330cc4a55dda3d4333c290a8bb9acdcdbb9cc5c83adaff351cbf5e3/mlvtools-2.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ff9734c754775a05130effc207ac3c10b5fcfe17064f6ed117606939d24688a",
        "md5": "21464ce516c7a09c7a1b55494956fbd0",
        "sha256": "502f18ce2e1703972eb7b9f23e593097b522d085002fa69fcdb2a3a7cb69a312"
      },
      "downloads": -1,
      "filename": "mlvtools-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "21464ce516c7a09c7a1b55494956fbd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24699,
      "upload_time": "2020-04-10T08:54:01",
      "upload_time_iso_8601": "2020-04-10T08:54:01.123292Z",
      "url": "https://files.pythonhosted.org/packages/1f/f9/734c754775a05130effc207ac3c10b5fcfe17064f6ed117606939d24688a/mlvtools-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}