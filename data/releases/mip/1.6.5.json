{
  "info": {
    "author": "Santos, H.G. and Toffolo, T.A.M.",
    "author_email": "haroldo@ufop.edu.br",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Eclipse Public License 2.0 (EPL-2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python MIP (Mixed-Integer Linear Programming) Tools\n\nPython MIP is a collection of Python tools for the modeling and solution\nof Mixed-Integer Linear programs (MIPs). MIP syntax was inspired by\n[Pulp](https://github.com/coin-or/pulp). Just like\n[CyLP](https://github.com/coin-or/CyLP) it also provides access to\nadvanced solver features like cut generation, MIPstarts and solution\nPools. Porting Pulp and Gurobi models should be quite easy.\n\nSome of the main features of MIP are:\n\n* high level modeling: write your MIP models in Python as easily as in\n  high level languages such as\n  [MathProg](https://en.wikibooks.org/wiki/GLPK/GMPL_(MathProg)): \n  operator overloading makes it easy to write linear expressions in Python;\n\n* full featured:\n    - cut generators and lazy constraints: work with strong formulations with a\n    large number of constraints by generating only the required inequalities\n    during the branch and cut search;\n    - solution pool: query the elite set of solutions found during the search;\n    - MIPStart: use a problem dependent heuristic to generate initial feasible\n    solutions for the MIP search.\n\n* fast: the Python MIP package calls directly the native dynamic loadable\n  library of the installed solver using the modern python\n  [CFFI](https://cffi.readthedocs.io) module; models\n  are efficiently stored and optimized by the solver and MIP transparently\n  handles all communication with your Python code; it is also compatible\n  with the [Pypy](https://pypy.org/) just in time compiler, meaning that\n  you can have a much better performance, up to 25 times faster for the \n  creation of large MIPs, than the official Gurobi python interface \n  which only runs on CPython;\n\n* multi solver: Python MIP was written to be deeply integrated with the\n  C libraries of the open-source COIN-OR Branch-&-Cut\n  [CBC](https://projects.coin-or.org/Cbc) solver and the commercial solver\n  [Gurobi](http://www.gurobi.com/); all details of communicating with \n  different solvers are handled by Python-MIP and you write only one\n  solver independent code;\n\n* written in modern statically typed Python 3 (requires Python\n  3.5 or newer).\n\n## Examples\n\nMany Python-MIP examples are documented at https://python-mip.readthedocs.io/en/latest/examples.html \n\nThe code of these examples and additional ones (published in tutorials) can be downloaded at https://github.com/coin-or/python-mip/tree/master/examples\n\n## Documentation\n\nThe full Python-MIP documentation is available at\nhttps://python-mip.readthedocs.io/en/latest/\n\nA PDF version is also available:\nhttps://media.readthedocs.org/pdf/python-mip/latest/python-mip.pdf\n\n\n## Build status\n\n[![Build Status](https://api.travis-ci.org/coin-or/python-mip.svg?branch=master)](https://travis-ci.org/coin-or/python-mip)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coin-or/python-mip",
    "keywords": "Optimization,Linear Programming,Integer Programming,Operations Research",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mip",
    "package_url": "https://pypi.org/project/mip/",
    "platform": "",
    "project_url": "https://pypi.org/project/mip/",
    "project_urls": {
      "Homepage": "https://github.com/coin-or/python-mip"
    },
    "release_url": "https://pypi.org/project/mip/1.6.5/",
    "requires_dist": [
      "cffi"
    ],
    "requires_python": ">3.5.0",
    "summary": "Python tools for Modeling and Solving Mixed-Integer Linear     Programs (MIPs)",
    "version": "1.6.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16302482,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de69e3456d96654eee838bbdf4ab20e347f2ee0b28b92693e6d1ce40d7937a46",
        "md5": "ee0a96d3b6d2373b6e512fbda09b5888",
        "sha256": "9ab1866419b7fd86915f78cbc4487a89b514fefaa7d21b4386d9db610246d292"
      },
      "downloads": -1,
      "filename": "mip-1.6.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ee0a96d3b6d2373b6e512fbda09b5888",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.5.0",
      "size": 14081113,
      "upload_time": "2019-12-28T22:19:31",
      "upload_time_iso_8601": "2019-12-28T22:19:31.180335Z",
      "url": "https://files.pythonhosted.org/packages/de/69/e3456d96654eee838bbdf4ab20e347f2ee0b28b92693e6d1ce40d7937a46/mip-1.6.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca4123807b9891fa2715541fcbbd1d758333ca39e2225db5f1695beb57dab6da",
        "md5": "0714f0f7fdbbfde5eacb448297cd61d6",
        "sha256": "727b9819ebfa3ca27e5ca281cf2e85f51ed78381d35bae041640956ed1598edd"
      },
      "downloads": -1,
      "filename": "mip-1.6.5.tar.gz",
      "has_sig": false,
      "md5_digest": "0714f0f7fdbbfde5eacb448297cd61d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.5.0",
      "size": 14021155,
      "upload_time": "2019-12-28T22:27:04",
      "upload_time_iso_8601": "2019-12-28T22:27:04.468651Z",
      "url": "https://files.pythonhosted.org/packages/ca/41/23807b9891fa2715541fcbbd1d758333ca39e2225db5f1695beb57dab6da/mip-1.6.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}