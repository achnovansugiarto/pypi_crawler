{
  "info": {
    "author": "James Turk",
    "author_email": "james.p.turk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "==================\ndjango-markupfield\n==================\n\n.. image:: https://travis-ci.org/jamesturk/django-markupfield.svg?branch=master\n    :target: https://travis-ci.org/jamesturk/django-markupfield\n\n.. image:: https://pypip.in/version/django-markupfield/badge.svg\n    :target: https://pypi.python.org/pypi/django-markupfield\n\n.. image:: https://pypip.in/format/django-markupfield/badge.svg\n    :target: https://pypi.python.org/pypi/django-markupfield\n\nAn implementation of a custom MarkupField for Django.  A MarkupField is in \nessence a TextField with an associated markup type.  The field also caches\nits rendered value on the assumption that disk space is cheaper than CPU \ncycles in a web application.\n\nInstallation\n============\n\nThe recommended way to install django-markupfield is with\n`pip <http://pypi.python.org/pypi/pip>`_\n\nIt is not necessary to add ``'markupfield'`` to your ``INSTALLED_APPS``, it\nmerely needs to be on your ``PYTHONPATH``. However, to use titled markup you\neither add ``'markupfield'`` to your ``INSTALLED_APPS`` or add the\ncorresponding translations to your project translation.\n\nRequirements\n------------\n\ndjango-markupfield 1.3 is the last release to support Django 1.4 or Python 3.3, the development version is only tested on Django 1.7 and 1.8 with Python 2.7 and 3.4\n\nSettings\n========\n\nTo best make use of MarkupField you should define the\n``MARKUP_FIELD_TYPES`` setting, a mapping of strings to callables that\n'render' a markup type::\n\n    import markdown\n    from docutils.core import publish_parts\n\n    def render_rest(markup):\n        parts = publish_parts(source=markup, writer_name=\"html4css1\")\n        return parts[\"fragment\"]\n\n    MARKUP_FIELD_TYPES = (\n        ('markdown', markdown.markdown),\n        ('ReST', render_rest),\n    )\n\nIf you do not define a ``MARKUP_FIELD_TYPES`` then one is provided with the\nfollowing markup types available:\n\nhtml:\n    allows HTML, potentially unsafe\nplain:\n    plain text markup, calls urlize and replaces text with linebreaks\nmarkdown:\n    default `markdown`_ renderer (only if `python-markdown`_ is installed)\nrestructuredtext:\n    default `ReST`_ renderer (only if `docutils`_ is installed)\ntextile:\n    default `textile`_ renderer (only if `textile`_ is installed)\n\nIt is also possible to override ``MARKUP_FIELD_TYPES`` on a per-field basis\nby passing the ``markup_choices`` option to a ``MarkupField`` in your model\ndeclaration.\n\n.. _`markdown`: http://daringfireball.net/projects/markdown/\n.. _`ReST`: http://docutils.sourceforge.net/rst.html\n.. _`textile`: http://hobix.com/textile/quick.html\n.. _`python-markdown`: http://www.freewisdom.org/projects/python-markdown/\n.. _`docutils`: http://docutils.sourceforge.net/\n.. _`python-textile`: http://pypi.python.org/pypi/textile\n\nUsage\n=====\n\nUsing MarkupField is relatively easy, it can be used in any model definition::\n\n    from django.db import models\n    from markupfield.fields import MarkupField\n\n    class Article(models.Model):\n        title = models.CharField(max_length=100)\n        slug = models.SlugField(max_length=100)\n        body = MarkupField()\n\n``Article`` objects can then be created with any markup type defined in\n``MARKUP_FIELD_TYPES``::\n\n    Article.objects.create(title='some article', slug='some-article',\n                           body='*fancy*', body_markup_type='markdown')\n\nYou will notice that a field named ``body_markup_type`` exists that you did\nnot declare, MarkupField actually creates two extra fields here \n``body_markup_type`` and ``_body_rendered``.  These fields are always named\naccording to the name of the declared ``MarkupField``.\n\nArguments\n---------\n\n``MarkupField`` also takes three optional arguments.  Either\n``default_markup_type`` and ``markup_type`` arguments may be specified but\nnot both.\n\n``default_markup_type``:\n    Set a markup_type that the field will default to if one is not specified.\n    It is still possible to edit the markup type attribute and it will appear\n    by default in ModelForms.\n\n``markup_type``:\n    Set markup type that the field will always use, ``editable=False`` is set\n    on the hidden field so it is not shown in ModelForms.\n\n``markup_choices``:\n    A replacement list of markup choices to be used in lieu of\n    ``MARKUP_FIELD_TYPES`` on a per-field basis.\n\n``escape_html``:\n    A flag (False by default) indicating that the input should be regarded\n    as untrusted and as such will be run through Django's ``escape`` filter.\n\n\nExamples\n~~~~~~~~\n\n``MarkupField`` that will default to using markdown but allow the user a choice::\n\n    MarkupField(default_markup_type='markdown')\n\n``MarkupField`` that will use textile and not provide a choice on forms::\n\n    MarkupField(markup_type='textile')\n\n``MarkupField`` that will use a custom set of renderers::\n\n    CUSTOM_RENDERERS = (\n        ('markdown', markdown.markdown),\n        ('wiki', my_wiki_render_func)\n    )\n    MarkupField(markup_choices=CUSTOM_RENDERERS)\n\nAccessing a MarkupField on a model\n----------------------------------\n\nWhen accessing an attribute of a model that was declared as a ``MarkupField``\na special ``Markup`` object is returned.  The ``Markup`` object has three\nparameters:\n\n``raw``:\n    The unrendered markup.\n``markup_type``:\n    The markup type.\n``rendered``:\n    The rendered HTML version of ``raw``, this attribute is read-only.\n\nThis object has a ``__unicode__`` method that calls\n``django.utils.safestring.mark_safe`` on ``rendered`` allowing MarkupField\nobjects to appear in templates as their rendered selfs without any template\ntag or having to access ``rendered`` directly.\n\nAssuming the ``Article`` model above::\n\n    >>> a = Article.objects.all()[0]\n    >>> a.body.raw\n    u'*fancy*'\n    >>> a.body.markup_type\n    u'markdown'\n    >>> a.body.rendered\n    u'<p><em>fancy</em></p>'\n    >>> print unicode(a.body)\n    <p><em>fancy</em></p>\n\nAssignment to ``a.body`` is equivalent to assignment to ``a.body.raw`` and\nassignment to ``a.body_markup_type`` is equivalent to assignment to \n``a.body.markup_type``.\n\n.. note::\n    a.body.rendered is only updated when a.save() is called",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jamesturk/django-markupfield/",
    "keywords": null,
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-markupfield",
    "package_url": "https://pypi.org/project/django-markupfield/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-markupfield/",
    "project_urls": {
      "Homepage": "http://github.com/jamesturk/django-markupfield/"
    },
    "release_url": "https://pypi.org/project/django-markupfield/1.3.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Custom Django field for easy use of markup in text fields",
    "version": "1.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11829022,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "673f007aca79d0f19c7e682cc20f6efb3176df6e0d934936c14c80bb5fec40b9",
        "md5": "6f3e2aa3ef69ec69101e48910056de38",
        "sha256": "40587890cc87cabe8eb3bbdfab34da68943cb83dab63ae8ec4316439b768bd39"
      },
      "downloads": -1,
      "filename": "django_markupfield-1.3.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f3e2aa3ef69ec69101e48910056de38",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 17071,
      "upload_time": "2015-04-16T16:18:31",
      "upload_time_iso_8601": "2015-04-16T16:18:31.725417Z",
      "url": "https://files.pythonhosted.org/packages/67/3f/007aca79d0f19c7e682cc20f6efb3176df6e0d934936c14c80bb5fec40b9/django_markupfield-1.3.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9faf509fa1242e4948e0260a8149b238f065e6801efe082e522af09ff33e48b3",
        "md5": "57045147bb61394581a197dd0fdde56c",
        "sha256": "79ebb0b26b8971ba9f34f53e5b00e5bba3ec16c9ffb657519dd166bdb2cd6f7b"
      },
      "downloads": -1,
      "filename": "django-markupfield-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "57045147bb61394581a197dd0fdde56c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13121,
      "upload_time": "2015-04-16T16:18:34",
      "upload_time_iso_8601": "2015-04-16T16:18:34.664573Z",
      "url": "https://files.pythonhosted.org/packages/9f/af/509fa1242e4948e0260a8149b238f065e6801efe082e522af09ff33e48b3/django-markupfield-1.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}