{
  "info": {
    "author": "James Turk",
    "author_email": "dev@jamesturk.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "==================\ndjango-markupfield\n==================\n\n.. image:: https://github.com/jamesturk/django-markupfield/workflows/Test/badge.svg\n\n.. image:: https://img.shields.io/pypi/v/django-markupfield.svg\n    :target: https://pypi.python.org/pypi/django-markupfield\n\nAn implementation of a custom MarkupField for Django.  A MarkupField is in \nessence a TextField with an associated markup type.  The field also caches\nits rendered value on the assumption that disk space is cheaper than CPU \ncycles in a web application.\n\nInstallation\n============\n\nThe recommended way to install django-markupfield is with\n`pip <https://pypi.python.org/pypi/pip>`_\n\nIt is not necessary to add ``'markupfield'`` to your ``INSTALLED_APPS``, it\nmerely needs to be on your ``PYTHONPATH``. However, to use titled markup you\neither add ``'markupfield'`` to your ``INSTALLED_APPS`` or add the\ncorresponding translations to your project translation.\n\nRequirements\n------------\n\nRequires Django >= 2.2 and 3.6+\n\n* 1.5.x is the last release to officially support Django < 2.2 or Python 2.7\n* 1.4.x is the last release to officially support Django < 1.11\n* 1.3.x is the last release to officially support Django 1.4 or Python 3.3\n\nSettings\n========\n\nTo best make use of MarkupField you should define the\n``MARKUP_FIELD_TYPES`` setting, a mapping of strings to callables that\n'render' a markup type::\n\n    import markdown\n    from docutils.core import publish_parts\n\n    def render_rest(markup):\n        parts = publish_parts(source=markup, writer_name=\"html4css1\")\n        return parts[\"fragment\"]\n\n    MARKUP_FIELD_TYPES = (\n        ('markdown', markdown.markdown),\n        ('ReST', render_rest),\n    )\n\nIf you do not define a ``MARKUP_FIELD_TYPES`` then one is provided with the\nfollowing markup types available:\n\nhtml:\n    allows HTML, potentially unsafe\nplain:\n    plain text markup, calls urlize and replaces text with linebreaks\nmarkdown:\n    default `markdown`_ renderer (only if `markdown`_ is installed)\nrestructuredtext:\n    default `ReST`_ renderer (only if `docutils`_ is installed)\n\nIt is also possible to override ``MARKUP_FIELD_TYPES`` on a per-field basis\nby passing the ``markup_choices`` option to a ``MarkupField`` in your model\ndeclaration.\n\n.. _`ReST`: http://docutils.sourceforge.net/rst.html\n.. _`markdown`: https://pypi.python.org/pypi/Markdown\n.. _`docutils`: http://docutils.sourceforge.net/\n\nUsage\n=====\n\nUsing MarkupField is relatively easy, it can be used in any model definition::\n\n    from django.db import models\n    from markupfield.fields import MarkupField\n\n    class Article(models.Model):\n        title = models.CharField(max_length=100)\n        slug = models.SlugField(max_length=100)\n        body = MarkupField()\n\n``Article`` objects can then be created with any markup type defined in\n``MARKUP_FIELD_TYPES``::\n\n    Article.objects.create(title='some article', slug='some-article',\n                           body='*fancy*', body_markup_type='markdown')\n\nYou will notice that a field named ``body_markup_type`` exists that you did\nnot declare, MarkupField actually creates two extra fields here \n``body_markup_type`` and ``_body_rendered``.  These fields are always named\naccording to the name of the declared ``MarkupField``.\n\nArguments\n---------\n\n``MarkupField`` also takes three optional arguments.  Either\n``default_markup_type`` and ``markup_type`` arguments may be specified but\nnot both.\n\n``default_markup_type``:\n    Set a markup_type that the field will default to if one is not specified.\n    It is still possible to edit the markup type attribute and it will appear\n    by default in ModelForms.\n\n``markup_type``:\n    Set markup type that the field will always use, ``editable=False`` is set\n    on the hidden field so it is not shown in ModelForms.\n\n``markup_choices``:\n    A replacement list of markup choices to be used in lieu of\n    ``MARKUP_FIELD_TYPES`` on a per-field basis.\n\n``escape_html``:\n    A flag (False by default) indicating that the input should be regarded\n    as untrusted and as such will be run through Django's ``escape`` filter.\n\n\nExamples\n~~~~~~~~\n\n``MarkupField`` that will default to using markdown but allow the user a choice::\n\n    MarkupField(default_markup_type='markdown')\n\n``MarkupField`` that will use ReST and not provide a choice on forms::\n\n    MarkupField(markup_type='restructuredtext')\n\n``MarkupField`` that will use a custom set of renderers::\n\n    CUSTOM_RENDERERS = (\n        ('markdown', markdown.markdown),\n        ('wiki', my_wiki_render_func)\n    )\n    MarkupField(markup_choices=CUSTOM_RENDERERS)\n\n.. note::\n    When using ``markdown``, be sure to use ``markdown.markdown`` and not\n    the ``markdown.Markdown`` class, the class requires an explicit ``reset``\n    to function properly in some cases.  (See [issue #40](https://github.com/jamesturk/django-markupfield/issues/40)\n    for details.)\n\n\nAccessing a MarkupField on a model\n----------------------------------\n\nWhen accessing an attribute of a model that was declared as a ``MarkupField``\na special ``Markup`` object is returned.  The ``Markup`` object has three\nparameters:\n\n``raw``:\n    The unrendered markup.\n``markup_type``:\n    The markup type.\n``rendered``:\n    The rendered HTML version of ``raw``, this attribute is read-only.\n\nThis object has a ``__unicode__`` method that calls\n``django.utils.safestring.mark_safe`` on ``rendered`` allowing MarkupField\nobjects to appear in templates as their rendered selfs without any template\ntag or having to access ``rendered`` directly.\n\nAssuming the ``Article`` model above::\n\n    >>> a = Article.objects.all()[0]\n    >>> a.body.raw\n    u'*fancy*'\n    >>> a.body.markup_type\n    u'markdown'\n    >>> a.body.rendered\n    u'<p><em>fancy</em></p>'\n    >>> print unicode(a.body)\n    <p><em>fancy</em></p>\n\nAssignment to ``a.body`` is equivalent to assignment to ``a.body.raw`` and\nassignment to ``a.body_markup_type`` is equivalent to assignment to \n``a.body.markup_type``.\n\n.. important::\n    Keeping in mind that ``body`` is MarkupField instance is particullary important with ``default`` or ``default_if_none`` filter for model that could be blank. If ``body``'s ``rendered`` is ``None`` or empty string (``\"\"``) these filters will *not* evaluate ``body`` as falsy to display default text::\n\n        {{ a.body|default:\"<missing body>\" }}\n\n    That's because ``body`` is regular non-``None`` MarkupField instance. To let ``default`` or ``default_if_none`` filters to work evaluate ``rendered`` MarkupField attribute instead. To prevent escaping HTML for the case ``rendered`` is truethy, finish chain with ``safe`` filter::\n\n        {{ a.body.rendered|default:\"<missing body>\"|safe }} \n\n.. note::\n    a.body.rendered is only updated when a.save() is called\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jamesturk/django-markupfield/",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-markupfield",
    "package_url": "https://pypi.org/project/django-markupfield/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-markupfield/",
    "project_urls": {
      "Homepage": "https://github.com/jamesturk/django-markupfield/"
    },
    "release_url": "https://pypi.org/project/django-markupfield/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom Django field for easy use of markup in text fields",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11829022,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9320de1d6fef4907977b03e3f9750a70e7c9ce52a00f0133d1f6ce0c90383e86",
        "md5": "3a7ffdc4784c370db0d46f9edd802984",
        "sha256": "03fa9c4a919e07969bfbb6143b2889541201b6fd0fa10980367772ed542d438e"
      },
      "downloads": -1,
      "filename": "django_markupfield-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a7ffdc4784c370db0d46f9edd802984",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16221,
      "upload_time": "2021-10-25T21:52:53",
      "upload_time_iso_8601": "2021-10-25T21:52:53.540019Z",
      "url": "https://files.pythonhosted.org/packages/93/20/de1d6fef4907977b03e3f9750a70e7c9ce52a00f0133d1f6ce0c90383e86/django_markupfield-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11a67d7f2edf6a9d9b56b888c3d7aebc3aedf7e12b0e922ab7dbc9322977c620",
        "md5": "ee50cfc3fa308ea6cb6896be8a7b8979",
        "sha256": "1bcc15972066914ee46ae3fddf859f653903a3af7c91d468572e3a1fe0c74fda"
      },
      "downloads": -1,
      "filename": "django-markupfield-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ee50cfc3fa308ea6cb6896be8a7b8979",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16134,
      "upload_time": "2021-10-25T21:52:55",
      "upload_time_iso_8601": "2021-10-25T21:52:55.120347Z",
      "url": "https://files.pythonhosted.org/packages/11/a6/7d7f2edf6a9d9b56b888c3d7aebc3aedf7e12b0e922ab7dbc9322977c620/django-markupfield-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}