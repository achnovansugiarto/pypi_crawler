{
  "info": {
    "author": "Yipit Coders",
    "author_email": "coders@yipitdata.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Database"
    ],
    "description": "# DRedis: Disk-based Redis implementation\n\nRedis is a great key-value database and it's extremely fast because it's in-memory.\nSome people want Redis's rich data types without having to worry about the memory limitations. For those\nthat can afford slower performance and want unlimited storage, DRedis may be an alternative.\n\n**WARNING: This project is still experimental and it doesn't implement all Redis commands!**\n\n\n\n## Installing\n\nMake sure to install the [LevelDB](https://github.com/google/leveldb) C++ library (`apt-get install libleveldb-dev` or `brew install leveldb`) and then run:\n\n```shell\n$ pip install dredis\n```\n\n## Running\n\n\n```shell\n$ dredis --dir /tmp/dredis-data\n```\n\nTo know about all of the options, use `--help`:\n\n```shell\n$ dredis --help\nusage: dredis [-h] [-v] [--host HOST] [--port PORT] [--dir DIR] [--debug]\n              [--flushall]\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n  --host HOST    server host (defaults to 127.0.0.1)\n  --port PORT    server port (defaults to 6377)\n  --dir DIR      directory to save data (defaults to a temporary directory)\n  --debug        enable debug logs\n  --flushall     run FLUSHALL on startup\n```\n\n\nIf you want to try it with docker locally (port 6377 on the host):\n\n```shell\n$ docker-compose up\n```\n\n\n## Supported Commands\n\nCommand signature                            | Type\n---------------------------------------------|-----\nCOMMAND\\*                                    | Server\nFLUSHALL                                     | Server\nFLUSHDB                                      | Server\nDBSIZE                                       | Server\nDEL key [key ...]                            | Keys\nTYPE key                                     | Keys\nKEYS pattern                                 | Keys\nEXISTS key [key ...]                         | Keys\nPING [msg]                                   | Connection\nSELECT db                                    | Connection\nSET key value                                | Strings\nGET key                                      | Strings\nINCR key                                     | Strings\nINCRBY key increment                         | Strings\nGETRANGE key start end                       | Strings\nSADD key value [value ..]                    | Sets\nSMEMBERS key                                 | Sets\nSCARD key                                    | Sets\nSISMEMBER key value                          | Sets\nEVAL script numkeys [key ...] [arg ...]      | Scripting\nZADD key score member [score member ...]     | Sorted Sets\nZRANGE key start top [WITHSCORES]            | Sorted Sets\nZCARD key                                    | Sorted Sets\nZREM key member [member ...]                 | Sorted Sets\nZSCORE key member                            | Sorted Sets\nZRANK key member                             | Sorted Sets\nZCOUNT key min_score max_score               | Sorted Sets\nZRANGEBYSCORE key min_score max_score [WITHSCORES] [LIMIT offset count] | Sorted Sets\nZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] | Sorted Sets\nHSET key field value [field value ...]       | Hashes\nHDEL key field [field ...]                   | Hashes\nHSETNX key field value                       | Hashes\nHGET key value                               | Hashes\nHKEYS key                                    | Hashes\nHVALS value                                  | Hashes\nHLEN key                                     | Hashes\nHINCRBY key field increment                  | Hashes\nHGETALL key                                  | Hashes\n\n\\* `COMMAND`'s reply is incompatible at the moment, it returns a flat array with command names (their arity, flags, positions, or step count are not returned). \n\n\n## How is DRedis implemented\n\nInitially DRedis had its own filesystem structure, but then it was converted to use [LevelDB](https://github.com/google/leveldb), which is a lot more reliable and faster.\nOther projects implement similar features to what's available on DRedis, but they aren't what Yipit needed when the project started.\nSome similar projects follow:\n\n* https://github.com/Qihoo360/pika\n* https://github.com/KernelMaker/blackwidow\n* https://github.com/siddontang/ledisdb\n* https://github.com/reborndb/qdb\n* https://github.com/alash3al/redix\n* https://github.com/meitu/titan\n\n\n## Lua support\n\nLua is supported through the [lupa](https://github.com/scoder/lupa) library.\n\n\n## Challenges\n\n### Data Consistency\n\nWe are relying on LevelDB's consistency, no stress tests were performed.\n\n### Cluster mode & Replication\n\nReplication, key distribution, and cluster mode isn't supported.\nIf you want higher availability you can create multiple servers that share or replicate a disk (consistency may suffer when replicating).\nUse DNS routing or a network load balancer to route requests properly.\n\n### Backups\n\nThere are many solutions to back up files. DRedis will have no impact when backups are performed because it's done from the outside (different from Redis, which uses `fork()` to snapshot the data).\nA straightforward approach is to have period backups to an object storage such as Amazon S3.\n\nThe commands SAVE or BGSAVE will be supported in the future to guarantee consistency when generating backups.\n\nThis project includes a snapshot utility (`dredis-snapshot`) to make it easier to back up data locally or to AWS S3.\nBe aware that there may be consistency issues during the snapshot (`dredis` won't pause during the temporary copy of the data directory).\n\n\n## Why Python\n\nBecause it's a good language to get things off the ground quickly and @hltbra knows it very well.\nIf this becomes a valuable project, other languages will be evaluated â€” the language of choice won't affect much of the I/O bottleneck, though. \n\nPython 3 will be eventually supported, @hltbra didn't want to deal with bytes/str shenanigans when this project started as a proof-of-concept.\n\n\n## Didn't you have better names?\n\n[@andrewgross](https://github.com/andrewgross) suggested [REDISK](https://twitter.com/awgross/status/1031962830633934849). The name will only matter if this project survives, it's still an experiment.\nAlso, [other projects use the name redisk](https://github.com/search?q=redisk&type=Repositories).\n\n[@nadlerjessie](https://github.com/nadlerjessie) is okay with the name dredis but wants it to be pronunced \"Doctor Redis\". The YipitData engineering team has fun with this pronunciation.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yipit/dredis",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dredis",
    "package_url": "https://pypi.org/project/dredis/",
    "platform": "",
    "project_url": "https://pypi.org/project/dredis/",
    "project_urls": {
      "Homepage": "https://github.com/Yipit/dredis"
    },
    "release_url": "https://pypi.org/project/dredis/1.0.2/",
    "requires_dist": [
      "lupa",
      "six",
      "plyvel"
    ],
    "requires_python": "",
    "summary": "Disk-based Redis implementation",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16392350,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b853dd6de00f253b06de22561ee6fb4468f6701e7344e7b913d873392242236",
        "md5": "5a2bbaaafe00b89ddc22a292f44d25ea",
        "sha256": "0c6bc3e3c969d72fd5b82801209e91baba4fc6c6dcd579431b2dba94a9ede21f"
      },
      "downloads": -1,
      "filename": "dredis-1.0.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a2bbaaafe00b89ddc22a292f44d25ea",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 17867,
      "upload_time": "2019-02-15T21:32:14",
      "upload_time_iso_8601": "2019-02-15T21:32:14.443947Z",
      "url": "https://files.pythonhosted.org/packages/6b/85/3dd6de00f253b06de22561ee6fb4468f6701e7344e7b913d873392242236/dredis-1.0.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba52158af0408c1433e31384a32f248fbd223d2eb563d7b45722e0db1a6a31ed",
        "md5": "35a96fb76b240135802eab290c1ad4ae",
        "sha256": "bf65b26971dc49b1540822510b31ac73be327f6850d694c2e659f3bc38e3bcd9"
      },
      "downloads": -1,
      "filename": "dredis-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "35a96fb76b240135802eab290c1ad4ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17866,
      "upload_time": "2019-02-15T21:32:16",
      "upload_time_iso_8601": "2019-02-15T21:32:16.364184Z",
      "url": "https://files.pythonhosted.org/packages/ba/52/158af0408c1433e31384a32f248fbd223d2eb563d7b45722e0db1a6a31ed/dredis-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}