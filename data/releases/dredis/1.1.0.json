{
  "info": {
    "author": "Yipit Coders",
    "author_email": "coders@yipitdata.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Topic :: Database"
    ],
    "description": "# DRedis: Disk-based Redis implementation\n\nRedis is a great key-value database and it's extremely fast because it's in-memory.\nSome people want Redis's rich data types without having to worry about the memory limitations. For those\nthat can afford slower performance and want unlimited storage, DRedis may be an alternative.\n\n**WARNING: This project is still experimental and it doesn't implement all Redis commands!**\n\n\n\n## Installing\n\nMake sure to install the [LevelDB](https://github.com/google/leveldb) C++ library (`apt-get install libleveldb-dev` or `brew install leveldb`) and then run:\n\n```shell\n$ pip install dredis\n```\n\nNote: The LMDB backend doesn't require external dependencies.\n\n## Running\n\n\n```shell\n$ dredis --dir /tmp/dredis-data\n```\n\nTo know about all of the options, use `--help`:\n\n```shell\n$ dredis --help\nusage: dredis [-h] [-v] [--host HOST] [--port PORT] [--dir DIR]\n              [--backend {lmdb,leveldb,memory}]\n              [--backend-option BACKEND_OPTION] [--rdb RDB] [--debug]\n              [--flushall] [--readonly]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  --host HOST           server host (defaults to 127.0.0.1)\n  --port PORT           server port (defaults to 6377)\n  --dir DIR             directory to save data (defaults to a temporary\n                        directory)\n  --backend {lmdb,leveldb,memory}\n                        key/value database backend (defaults to leveldb)\n  --backend-option BACKEND_OPTION\n                        database backend options (e.g., --backend-option\n                        map_size=BYTES)\n  --rdb RDB             RDB file to seed dredis\n  --debug               enable debug logs\n  --flushall            run FLUSHALL on startup\n  --readonly            accept read-only commands\n```\n\n\nRunning dredis with Docker locally (port 6377 on the host):\n\n```shell\n$ docker-compose up\n```\n\n\n\n## Backends\n\nThere's support for LevelDB, LMDB, and an experimental memory backend.\nAll backend options should be passed in the command line as `--backend-option NAME1=value1 --backend-option NAME2=value2` (the values must be JSON-compatible).\n\n### LevelDB\nLevelDB is the easiest persistent backend because it doesn't require any option tweaking to get it to work reliably.\n\n#### Options\n\nWe use [plyvel](https://github.com/wbolster/plyvel) as the LevelDB backend. All available options are parameters of [plyvel.DB](https://plyvel.readthedocs.io/en/latest/api.html#DB).\n\nThe current default options for LevelDB are:\n* `name`: The same value as the `--dir` option\n* `create_if_missing`: `True`\n\n\n### LMDB\n\nThe performance of LMDB can be better than LevelDB and we're considering making it the default backend in the future.\n\n#### Options\n\nWe use [py-lmdb](https://github.com/dw/py-lmdb/) as the LMDB backend. All available options are parameters of [lmdb.Environment](https://lmdb.readthedocs.io/en/release/#environment-class).\nWe recommend that you think ahead and change the `map_size` parameter according to your needs — this is the maximum size of the LMDB database file on disk.\n\nThe current default options for LMDB are:\n* `path`: The same value as the `--dir` option\n* `map_size`: `1073741824` (1GB)\n* `map_async`: `True`\n* `writemap`: `True`\n* `readahead`: `False`\n* `metasync`: `False`\n\n### Memory\n\nThis is experimental and doesn't persist to disk. It was created to have a baseline to compare persistent backends.\n\n\n#### Options\nNone.\n\n\n## Supported Commands\n\nCommand signature                            | Type\n---------------------------------------------|-----\nCOMMAND\\*                                    | Server\nFLUSHALL                                     | Server\nFLUSHDB                                      | Server\nDBSIZE                                       | Server\nSAVE                                         | Server\nDEL key [key ...]                            | Keys\nTYPE key                                     | Keys\nKEYS pattern                                 | Keys\nEXISTS key [key ...]                         | Keys\nDUMP key                                     | Keys\nRESTORE key ttl serialized-value [REPLACE]\\**| Keys\nPING [msg]                                   | Connection\nSELECT db                                    | Connection\nSET key value                                | Strings\nGET key                                      | Strings\nINCR key                                     | Strings\nINCRBY key increment                         | Strings\nGETRANGE key start end                       | Strings\nSADD key value [value ..]                    | Sets\nSMEMBERS key                                 | Sets\nSCARD key                                    | Sets\nSISMEMBER key value                          | Sets\nEVAL script numkeys [key ...] [arg ...]      | Scripting\nZADD key score member [score member ...]     | Sorted Sets\nZRANGE key start top [WITHSCORES]            | Sorted Sets\nZCARD key                                    | Sorted Sets\nZREM key member [member ...]                 | Sorted Sets\nZSCORE key member                            | Sorted Sets\nZRANK key member                             | Sorted Sets\nZCOUNT key min_score max_score               | Sorted Sets\nZRANGEBYSCORE key min_score max_score [WITHSCORES] [LIMIT offset count] | Sorted Sets\nZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] | Sorted Sets\nHSET key field value [field value ...]       | Hashes\nHDEL key field [field ...]                   | Hashes\nHSETNX key field value                       | Hashes\nHGET key value                               | Hashes\nHKEYS key                                    | Hashes\nHVALS value                                  | Hashes\nHLEN key                                     | Hashes\nHINCRBY key field increment                  | Hashes\nHGETALL key                                  | Hashes\n\n\\* `COMMAND`'s reply is incompatible at the moment, it returns a flat array with command names (their arity, flags, positions, or step count are not returned).\n\\** `RESTORE` doesn't work with Redis strings compressed with LZF or encoded as `OBJ_ENCODING_INT`; also doesn't work with sets encoded as `OBJ_ENCODING_INTSET`, nor hashes and sorted sets encoded as `OBJ_ENCODING_ZIPLIST`.\n\n\n## How is DRedis implemented\n\nInitially DRedis had its own filesystem structure, but then it was converted to use [LevelDB](https://github.com/google/leveldb), which is a lot more reliable and faster (nowadays there's also the LMDB backend).\n\nOther projects implement similar features to what's available on DRedis, but they aren't what Yipit needed when the project started. Some of them\nrely on multiple threads and compromise on consistency, don't implement Lua scripts, or don't implement sorted sets correctly. We ran the DRedis tests against a few solutions and they failed (which means they're not fully compatible).\n\nSimilar projects:\n\n* https://github.com/yinqiwen/ardb\n  * `ardb` seems to be the most similar in scope and a good candidate for contributions or a fork. Their sorted sets implementation has a bug with negative scores. It's a large C++ project with lots of features.\n* https://github.com/Qihoo360/pika\n  * no Lua support. This is a large C++ project and its documentation is in Chinese. The project seems to be stable and is used by large Chinese companies.\n* https://github.com/KernelMaker/blackwidow\n  * a C++ library, not a Redis-like server\n* https://github.com/siddontang/ledisdb\n  * Similar to Redis but different commands\n* https://github.com/reborndb/qdb\n  * No Lua support and no longer maintained\n* https://github.com/alash3al/redix\n  * No Lua and no sorted set support\n* https://github.com/meitu/titan\n  * No Lua support and not enough sorted set support\n\n\n## Lua support\n\nLua is supported through the [lupa](https://github.com/scoder/lupa) library.\n\n\n## Challenges\n\n### Data Consistency\n\nWe rely on the backends' consistency properties and we use batches/transactions to stay consistent. Tweaking the backend options may impair consistency (e.g., `sync=false` for LMDB).\n\n### Cluster mode & Replication\n\nReplication, key distribution, and cluster mode are not supported.\nIf you want higher availability you can create multiple servers that share or replicate a disk (consistency may suffer when replicating).\nUse DNS routing or a network load balancer to route requests properly.\n\n### Backups\n\nThe command `SAVE` creates a snapshot in the same format as Redis's RDB version 7 (compatible with Redis 3.x).\nWe recommend you to run `SAVE` on a secondary `dredis` process, otherwise the server will hang during the snapshot (consistency guarantees are higher with LMDB as the backend).\nThe command `BGSAVE` may be supported in the future.\n\nOther backups solutions involve backing up the files created by the backend.\nA straightforward approach is to have periodic backups to an object storage such as Amazon S3 orr use a block storage solution and perform periodic backups (e.g., AWS EBS).\n\nIf you use `SAVE` from a secondary process or backup the data directory, there shouldn't be any significant impact on the main server.\n\n\n## Why Python\n\nBecause it's a good language to get things off the ground quickly and everybody at Yipit knows it well.\nIf this becomes a valuable project, other languages will be evaluated — the language of choice won't affect much of the I/O bottleneck, but it may bring good performance benefits.\nWe're experimenting with [Cython](https://cython.org/) to get better performance without having to rewrite large chunks in C.\n\nThe project will migrate to Python 3 soon.\n\n\n## Didn't you have better names?\n\n[@andrewgross](https://github.com/andrewgross) suggested [REDISK](https://twitter.com/awgross/status/1031962830633934849). The name will only matter if this project survives, it's still an experiment.\nAlso, [other projects use the name redisk](https://github.com/search?q=redisk&type=Repositories).\n\n[@nadlerjessie](https://github.com/nadlerjessie) suggested we pronounce dredis as \"Doctor Redis\".\n\n\n## Releasing dredis\n\n1. Make sure you have all important changes in the top section of `CHANGELOG.md`\n1. Make sure your PyPI credentials are correct in `~/.pypirc`\n1. Run `make release`\n1. Enter the new version (e.g., `1.0.0`)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Yipit/dredis",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dredis",
    "package_url": "https://pypi.org/project/dredis/",
    "platform": "",
    "project_url": "https://pypi.org/project/dredis/",
    "project_urls": {
      "Homepage": "https://github.com/Yipit/dredis"
    },
    "release_url": "https://pypi.org/project/dredis/1.1.0/",
    "requires_dist": [
      "lupa",
      "six",
      "plyvel",
      "lmdb",
      "python-lzf"
    ],
    "requires_python": "",
    "summary": "Disk-based Redis implementation",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16392350,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35450a86ee72ae157b4dd850fa481ee29bad24e9c0ebf72d382e71266ede66cc",
        "md5": "2c0d5d3a71211172fa044aa5d0216417",
        "sha256": "5b410a295410ec7f88966798d4275effe4353056f46514e090befe82c4b85e38"
      },
      "downloads": -1,
      "filename": "dredis-1.1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c0d5d3a71211172fa044aa5d0216417",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 30200,
      "upload_time": "2019-06-24T17:10:27",
      "upload_time_iso_8601": "2019-06-24T17:10:27.462653Z",
      "url": "https://files.pythonhosted.org/packages/35/45/0a86ee72ae157b4dd850fa481ee29bad24e9c0ebf72d382e71266ede66cc/dredis-1.1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77acf86fd3cc9c4f5616e8d8e485ef155d1039b864f71e36630ef32bb0d61c14",
        "md5": "3955976a7fb29c9050aeef909e10ef92",
        "sha256": "e97d76b5a64d17cf1c0fd9e929e78c19259f22bd6618b24520da5841885d0d80"
      },
      "downloads": -1,
      "filename": "dredis-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3955976a7fb29c9050aeef909e10ef92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31519,
      "upload_time": "2019-06-24T17:10:28",
      "upload_time_iso_8601": "2019-06-24T17:10:28.731889Z",
      "url": "https://files.pythonhosted.org/packages/77/ac/f86fd3cc9c4f5616e8d8e485ef155d1039b864f71e36630ef32bb0d61c14/dredis-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}