{
  "info": {
    "author": "Azat Ibrakov",
    "author_email": "azatibrakov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "lz\n==\n\n[![](https://github.com/lycantropos/lz/workflows/CI/badge.svg)](https://github.com/lycantropos/lz/actions/workflows/ci.yml \"Github Actions\")\n[![](https://codecov.io/gh/lycantropos/lz/branch/master/graph/badge.svg)](https://codecov.io/gh/lycantropos/lz \"Codecov\")\n[![](https://readthedocs.org/projects/lz/badge/?version=latest)](https://lz.readthedocs.io/en/latest \"Documentation\")\n[![](https://img.shields.io/github/license/lycantropos/lz.svg)](https://github.com/lycantropos/lz/blob/master/LICENSE \"License\")\n[![](https://badge.fury.io/py/lz.svg)](https://badge.fury.io/py/lz \"PyPI\")\n\nIn what follows `python` is an alias for `python3.7` or `pypy3.7`\nor any later version (`python3.8`, `pypy3.8` and so on).\n\nInstallation\n------------\n\nInstall the latest `pip` & `setuptools` packages versions\n```bash\npython -m pip install --upgrade pip setuptools\n```\n\n### User\n\nDownload and install the latest stable version from `PyPI` repository\n```bash\npython -m pip install --upgrade lz\n```\n\n### Developer\n\nDownload the latest version from `GitHub` repository\n```bash\ngit clone https://github.com/lycantropos/lz.git\ncd lz\n```\n\nInstall dependencies\n```bash\npython -m pip install -r requirements.txt\n```\n\nInstall\n```bash\npython setup.py install\n```\n\nUsage \n----- \n \n`lz` provides a bunch of utilities for working with functions, predicates & iterables such as\n\n1. [function composition](https://en.wikipedia.org/wiki/Function_composition)\n    ```python\n    >>> from lz.functional import compose\n    >>> sum_of_first_n_natural_numbers = compose(sum, range)\n    >>> sum_of_first_n_natural_numbers(10)\n    45\n\n    ```\n\n2. [currying](https://en.wikipedia.org/wiki/Currying)\n    ```python\n    >>> from lz.functional import curry \n    >>> curried_power = curry(pow) \n    >>> two_to_power = curried_power(2) \n    >>> two_to_power(10)\n    1024\n\n    ```\n\n3. flipping positional parameters order\n    ```python\n    >>> from lz.functional import flip\n    >>> flipped_power = flip(pow)\n    >>> flipped_power(2, 4)\n    16\n\n    ```\n\n4. packing function's arguments\n    ```python\n    >>> from lz.functional import pack\n    >>> packed_int = pack(int)\n    >>> packed_int(['10'])\n    10\n    >>> packed_int(['10'], {'base': 2})\n    2\n\n    ```\n\n5. left [partial application](https://en.wikipedia.org/wiki/Partial_application)\n    ```python\n    >>> from lz import left\n    >>> count_from_zero_to = left.applier(range, 0)\n    >>> list(count_from_zero_to(10))\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    ```\n\n6. right [partial application](https://en.wikipedia.org/wiki/Partial_application)\n    ```python\n    >>> from lz import right\n    >>> square = right.applier(pow, 2)\n    >>> square(10)\n    100\n\n    ```\n\n7. [negating](https://en.wikipedia.org/wiki/Negation) predicate\n    ```python\n    >>> from lz.logical import negate\n    >>> false_like = negate(bool)\n    >>> false_like([])\n    True\n    >>> false_like([0])\n    False\n\n    ```\n\n8. [conjoining](https://en.wikipedia.org/wiki/Logical_conjunction) predicates\n    ```python\n    >>> from lz.logical import conjoin\n    >>> is_valid_constant_identifier = conjoin(str.isupper, str.isidentifier)\n    >>> is_valid_constant_identifier('SECOND_SECTION')\n    True\n    >>> is_valid_constant_identifier('2ND_SECTION')\n    False\n\n    ```\n\n9. [disjoining](https://en.wikipedia.org/wiki/Logical_disjunction) predicates\n    ```python\n    >>> from lz.logical import disjoin\n    >>> alphabetic_or_numeric = disjoin(str.isalpha, str.isnumeric)\n    >>> alphabetic_or_numeric('Hello')\n    True\n    >>> alphabetic_or_numeric('42')\n    True\n    >>> alphabetic_or_numeric('Hello42')\n    False\n\n    ```\n\n10. [exclusive disjoining](https://en.wikipedia.org/wiki/Exclusive_or) predicates\n    ```python\n    >>> from lz.logical import exclusive_disjoin\n    >>> from keyword import iskeyword\n    >>> valid_object_name = exclusive_disjoin(str.isidentifier, iskeyword)\n    >>> valid_object_name('valid_object_name')\n    True\n    >>> valid_object_name('_')\n    True\n    >>> valid_object_name('1')\n    False\n    >>> valid_object_name('lambda')\n    False\n\n    ```\n\n11. reversing sequences and any string streams\n    ```python\n    >>> from lz.reversal import reverse\n    >>> list(reverse(range(10)))\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    >>> import io\n    >>> list(reverse(io.BytesIO(b'Hello\\nWorld!')))\n    [b'World!', b'Hello\\n']\n\n    ```\n\n12. chunking iterable\n    ```python\n    >>> from lz.iterating import chopper\n    >>> to_triplets = chopper(3)\n    >>> list(map(tuple, to_triplets(range(10))))\n    [(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\n\n    ```\n\n13. sliding over iterable\n    ```python\n    >>> from lz.iterating import slider\n    >>> slide_pairwise = slider(2)\n    >>> list(slide_pairwise(range(10)))\n    [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n \n    ```\n\n14. [interleaving](https://en.wikipedia.org/wiki/Interleave_sequence) iterables\n    ```python\n    >>> from lz.iterating import interleave\n    >>> list(interleave([range(10), range(10, 20)]))\n    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]\n  \n    ```\n\n15. iterable [transposition](https://en.wikipedia.org/wiki/Transpose)\n    ```python\n    >>> from lz.transposition import transpose\n    >>> list(map(tuple, transpose(zip(range(10), range(10, 20)))))\n    [(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19)]\n \n    ```\n\n16. iterable duplication\n    ```python\n    >>> from lz.replication import duplicate\n    >>> list(map(tuple, duplicate(range(10))))\n    [(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]\n  \n    ```\n\nand [many more](https://lz.readthedocs.io/en/latest).\n\nDevelopment\n-----------\n\n### Building docs\n\nInstall project in editable mode\n```bash\npython -m pip install -e .\n```\n\nInstall dependencies\n```bash\npython -m pip install -r docs/requirements.txt\n```\n\nBuild docs\n```bash\ncd docs\nmake html\n```\n\n### Bumping version\n\n#### Preparation\n\nInstall\n[bump2version](https://github.com/c4urself/bump2version#installation).\n\n#### Pre-release\n\nChoose which version number category to bump following [semver\nspecification](http://semver.org/).\n\nTest bumping version\n```bash\nbump2version --dry-run --verbose $CATEGORY\n```\n\nwhere `$CATEGORY` is the target version number category name, possible\nvalues are `patch`/`minor`/`major`.\n\nBump version\n```bash\nbump2version --verbose $CATEGORY\n```\n\nThis will set version to `major.minor.patch-alpha`. \n\n#### Release\n\nTest bumping version\n```bash\nbump2version --dry-run --verbose release\n```\n\nBump version\n```bash\nbump2version --verbose release\n```\n\nThis will set version to `major.minor.patch`.\n\n### Running tests\n\nInstall dependencies\n```bash\npython -m pip install -r requirements-tests.txt\n```\n\nPlain\n```bash\npytest\n```\n\nInside `Docker` container:\n- with `CPython`\n  ```bash\n  docker-compose --file docker-compose.cpython.yml up\n  ```\n- with `PyPy`\n  ```bash\n  docker-compose --file docker-compose.pypy.yml up\n  ```\n\n`Bash` script (e.g. can be used in `Git` hooks):\n- with `CPython`\n  ```bash\n  ./run-tests.sh\n  ```\n  or\n  ```bash\n  ./run-tests.sh cpython\n  ```\n\n- with `PyPy`\n  ```bash\n  ./run-tests.sh pypy\n  ```\n\n`PowerShell` script (e.g. can be used in `Git` hooks):\n- with `CPython`\n  ```powershell\n  .\\run-tests.ps1\n  ```\n  or\n  ```powershell\n  .\\run-tests.ps1 cpython\n  ```\n- with `PyPy`\n  ```powershell\n  .\\run-tests.ps1 pypy\n  ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/lycantropos/lz/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lycantropos/lz/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lz",
    "package_url": "https://pypi.org/project/lz/",
    "platform": null,
    "project_url": "https://pypi.org/project/lz/",
    "project_urls": {
      "Download": "https://github.com/lycantropos/lz/archive/master.zip",
      "Homepage": "https://github.com/lycantropos/lz/"
    },
    "release_url": "https://pypi.org/project/lz/1.0.0/",
    "requires_dist": [
      "paradigm (<3.0,>=2.1.0)",
      "reprit (<1.0,>=0.8.0)",
      "typing-extensions (<5.0,>=4.4.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "\"Lazy\" calculations support.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16738404,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "528bb58d9c909ff678c77d27f4b54f2cc233d04478056315ef4be8124650fa9b",
        "md5": "3de947634b5d2eb56115aeaddc66adc0",
        "sha256": "676b59fd11ef2c0591fb4132d8b17b5414f2ebe372f8a1e7e01c33b3218823d0"
      },
      "downloads": -1,
      "filename": "lz-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3de947634b5d2eb56115aeaddc66adc0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 24641,
      "upload_time": "2022-12-20T20:48:57",
      "upload_time_iso_8601": "2022-12-20T20:48:57.872925Z",
      "url": "https://files.pythonhosted.org/packages/52/8b/b58d9c909ff678c77d27f4b54f2cc233d04478056315ef4be8124650fa9b/lz-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f495243eaf0939bbc37942e963bc6cb8d918e616353b98454e50201cc6c319f8",
        "md5": "cea793bf72a5e280526897b93a74e6f4",
        "sha256": "8d8193aa2771dd27a1dfafcc1195b6691af0aeb2549f686992b37e50d447453a"
      },
      "downloads": -1,
      "filename": "lz-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cea793bf72a5e280526897b93a74e6f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21127,
      "upload_time": "2022-12-20T20:48:59",
      "upload_time_iso_8601": "2022-12-20T20:48:59.060564Z",
      "url": "https://files.pythonhosted.org/packages/f4/95/243eaf0939bbc37942e963bc6cb8d918e616353b98454e50201cc6c319f8/lz-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}