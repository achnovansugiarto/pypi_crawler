{
  "info": {
    "author": "Julian Hofer, Prisca van der Sluis",
    "author_email": "julian.hofer@deltares.nl, prisca.vandersluis@deltares.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# MeshKernelPy\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Deltares_MeshKernelPy&metric=alert_status)](https://sonarcloud.io/dashboard?id=Deltares_MeshKernelPy)\n[![PyPI version](https://badge.fury.io/py/meshkernel.svg)](https://badge.fury.io/py/meshkernel)\n\n`MeshKernelPy` is a library for creating and editing meshes.\nIt supports 1D and 2D unstructured meshes.\nSupport for curvilinear meshes is planned.\nThe underlying C++ library `MeshKernel` can be found [here](https://github.com/Deltares/MeshKernel).\n\n# Installation\n\n## Windows\n\nThe library can be installed from PyPI by executing\n\n```bash\npip install meshkernel\n```\n\nIf you encounter any issues importing the pip wheels on Windows, you may need to install the [Visual C++ Redistributable for Visual Studio 2019](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170).\n\n## Linux\n\nCurrently, we only offer wheels specific to Deltares' CentOS machines.\nWe plan to release a manylinux wheel at PyPI in the future. \n\n# Examples\n\n## Creating a triangular mesh inside a polygon\n\nIn this example a mesh is created by discretizing the polygon perimeter with the desired edge length.\n\n![](https://raw.githubusercontent.com/Deltares/MeshKernelPy/main/docs/images/TriangularMeshInPolygon.jpg)\n\n## Mesh orthogonalization\n\nFinite volume staggered flow solvers require the mesh to be as much orthogonal as possible. \nMeshKernel provides an algorithm to adapt the mesh and achieve a good balance between mesh orthogonality and smoothness.\n\n![](https://raw.githubusercontent.com/Deltares/MeshKernelPy/main/docs/images/MeshOrthogonalization.jpg)\n\n## Mesh refinement\n\nA mesh can be refined in areas based on samples or polygon selections. \n\n![](https://raw.githubusercontent.com/Deltares/MeshKernelPy/main/docs/images/GridRefinement.jpg)\n\n# License\n\n`MeshKernelPy` uses the MIT license.\nHowever, the wheels on PyPI bundle the LGPL licensed [MeshKernel](https://github.com/Deltares/MeshKernel).\nPlease make sure that this fits your needs before depending on it.\n\n\n# Contributing\n\nIn order to install `MeshKernelPy` locally, please execute the following line inside your virtual environment\n\n```bash\npip install -e \".[tests, lint, docs]\"\n```\n\nThen add a compiled `MeshKernelApi.dll` into your `src` folder.\n\nAlso make sure that your editor is configured to format the code with [`black`](https://black.readthedocs.io/en/stable/) and [`isort`](https://pycqa.github.io/isort/).\nWhen modifying `Jupyter` notebooks, the [`jupyterlab-code-formatter`](https://jupyterlab-code-formatter.readthedocs.io/en/latest/installation.html) can be used.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Deltares/MeshKernelPy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meshkernel",
    "package_url": "https://pypi.org/project/meshkernel/",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/meshkernel/",
    "project_urls": {
      "Homepage": "https://github.com/Deltares/MeshKernelPy"
    },
    "release_url": "https://pypi.org/project/meshkernel/2.0.1/",
    "requires_dist": [
      "numpy",
      "sphinx ; extra == 'docs'",
      "sphinx-book-theme ; extra == 'docs'",
      "myst-nb ; extra == 'docs'",
      "flake8 ; extra == 'lint'",
      "black ; extra == 'lint'",
      "isort ; extra == 'lint'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "nbval ; extra == 'tests'",
      "matplotlib ; extra == 'tests'"
    ],
    "requires_python": ">=3.8",
    "summary": "`meshkernel` is a library which can be used to manipulate meshes.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17287358,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf34e4ba2deb94bddcbdee313d602819f49554ddd20b434986f2b5f9d9512d2e",
        "md5": "92e2d8663c61dfdbd9dd11f3a7833c87",
        "sha256": "d17487a16a211e6775d6eeadc50bd3c8ea81e39b9a8c6d49fc59512a9a967992"
      },
      "downloads": -1,
      "filename": "meshkernel-2.0.1-py3-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "92e2d8663c61dfdbd9dd11f3a7833c87",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 363279,
      "upload_time": "2023-02-22T22:06:56",
      "upload_time_iso_8601": "2023-02-22T22:06:56.139856Z",
      "url": "https://files.pythonhosted.org/packages/cf/34/e4ba2deb94bddcbdee313d602819f49554ddd20b434986f2b5f9d9512d2e/meshkernel-2.0.1-py3-none-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65ebf3de408c378fa3fbfcf53a1ec9f844a21c56c90b9437096b41061abd9bec",
        "md5": "ee8df05b9ecc2417aef13c6471cb7090",
        "sha256": "7efa64ce2f6ec7e4783f38fbcfc49b456a0a8dc0049bf0476b5e1b95805126d0"
      },
      "downloads": -1,
      "filename": "meshkernel-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ee8df05b9ecc2417aef13c6471cb7090",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 363809,
      "upload_time": "2023-02-22T22:06:58",
      "upload_time_iso_8601": "2023-02-22T22:06:58.487597Z",
      "url": "https://files.pythonhosted.org/packages/65/eb/f3de408c378fa3fbfcf53a1ec9f844a21c56c90b9437096b41061abd9bec/meshkernel-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}