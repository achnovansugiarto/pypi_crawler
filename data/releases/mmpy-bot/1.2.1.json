{
  "info": {
    "author": "Alex Tzonkov",
    "author_email": "alex.tzonkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![PyPI](https://badge.fury.io/py/mmpy-bot.svg)](https://pypi.org/project/mmpy-bot/)\r\n[![Codacy](https://api.codacy.com/project/badge/grade/b06f3af1d8a04c6faa9a76a4ae3cb483)](https://www.codacy.com/app/attzonko/mmpy_bot)\r\n[![Maintainability](https://api.codeclimate.com/v1/badges/809c8d66aea982d9e3da/maintainability)](https://codeclimate.com/github/attzonko/mmpy_bot/maintainability)\r\n[![Python Support](https://img.shields.io/badge/python-3+-blue.svg)](https://pypi.org/project/mmpy-bot/)\r\n[![Mattermost](https://img.shields.io/badge/mattermost-4.0+-blue.svg)](http://www.mattermost.org)\r\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](https://pypi.org/project/mmpy-bot/)\r\n\r\nDocumentation available at [Read the Docs](http://mmpy_bot.readthedocs.org/).\r\n\r\n\r\n## What is This\r\n\r\nA python based chat bot for [Mattermost](http://www.mattermost.org).\r\n\r\n## Features\r\n\r\n* Based on Mattermost [WebSocket API(V4.0.0)](https://api.mattermost.com)\r\n* Simple plugins mechanism\r\n* Messages can be handled concurrently\r\n* Automatically reconnect to Mattermost when connection is lost\r\n* Python3 Support\r\n\r\n\r\n## Compatibility\r\n\r\n|    Mattermost    |  mmpy_bot   |\r\n|------------------|:-----------:|\r\n|     >= 4.0       |  > 1.2.0    |\r\n|     <  4.0       | unsupported |\r\n\r\n\r\n## Installation\r\n\r\n```\r\npip install mmpy_bot\r\n```\r\n\r\n## Usage\r\n\r\n### Registration\r\n\r\nFirst you need create the mattermost email/password for your bot.\r\n\r\nFor use all API(V4.0.0), you need add bot user to system admin group to avoid 403 error. \r\n\r\n### Configuration\r\n\r\nThen you need to configure the `BOT_URL`, `BOT_LOGIN`, `BOT_PASSWORD`, `BOT_TEAM` in a python module\r\n`mmpy_bot_settings.py`, which must be located in a python import path.\r\n\r\n\r\nmmpy_bot_settings.py:\r\n\r\n```python\r\nSSL_VERIFY = True  # Whether to perform SSL cert verification\r\nBOT_URL = 'http://<mm.example.com>/api/v4'  # with 'http://' and with '/api/v4' path. without trailing slash.\r\nBOT_LOGIN = '<bot-email-address>'\r\nBOT_PASSWORD = '<bot-password>'\r\nBOT_TEAM = '<your-team>'  # possible in lowercase\r\n```\r\n\r\nAlternatively, you can use the environment variable `MATTERMOST_BOT_URL`,\r\n`MATTERMOST_BOT_LOGIN`, `MATTERMOST_BOT_PASSWORD`, `MATTERMOST_BOT_TEAM`,\r\n`MATTERMOST_BOT_SSL_VERIFY`\r\n\r\nor `MATTERMOST_BOT_SETTINGS_MODULE` environment variable, which provide settings module\r\n\r\n```bash\r\nMATTERMOST_BOT_SETTINGS_MODULE=settings.bot_conf mmpy_bot\r\n```\r\n\r\n\r\n### Run the bot\r\n\r\nUse the built-in cli script and point to your custom settings file.\r\n\r\n```bash\r\nMATTERMOST_BOT_SETTINGS_MODULE=mmpy_bot_settings mmpy_bot\r\n```\r\n\r\nor you can create your own startup file. For example `run.py`:\r\n\r\n```python\r\nfrom mmpy_bot.bot import Bot\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    Bot().run()\r\n```\r\n\r\nNow you can talk to your bot in your mattermost client!\r\n\r\n\r\n\r\n## Attachment Support\r\n\r\n```python\r\nfrom mmpy_bot.bot import respond_to\r\n\r\n\r\n@respond_to('webapi')\r\ndef webapi_reply(message):\r\n    attachments = [{\r\n        'fallback': 'Fallback text',\r\n        'author_name': 'Author',\r\n        'author_link': 'http://www.github.com',\r\n        'text': 'Some text here ...',\r\n        'color': '#59afe1'\r\n    }]\r\n    message.reply_webapi(\r\n        'Attachments example', attachments,\r\n        username='Mattermost-Bot',\r\n        icon_url='https://goo.gl/OF4DBq',\r\n    )\r\n    # Optional: Send message to specified channel\r\n    # message.send_webapi('', attachments, channel_id=message.channel)\r\n```\r\n\r\n*Integrations must be allowed for non admins users.*\r\n\r\n## Plugins\r\n\r\nA chat bot is meaningless unless you can extend/customize it to fit your own use cases.\r\n\r\nTo write a new plugin, simply create a function decorated by `mmpy_bot.bot.respond_to` or `mmpy_bot.bot.listen_to`:\r\n\r\n- A function decorated with `respond_to` is called when a message matching the pattern is sent to the bot (direct message or @botname in a channel/group chat)\r\n- A function decorated with `listen_to` is called when a message matching the pattern is sent on a channel/group chat (not directly sent to the bot)\r\n\r\n```python\r\nimport re\r\n\r\nfrom mmpy_bot.bot import listen_to\r\nfrom mmpy_bot.bot import respond_to\r\n\r\n\r\n@respond_to('hi', re.IGNORECASE)\r\ndef hi(message):\r\n    message.reply('I can understand hi or HI!')\r\n\r\n\r\n@respond_to('I love you')\r\ndef love(message):\r\n    message.reply('I love you too!')\r\n\r\n\r\n@listen_to('Can someone help me?')\r\ndef help_me(message):\r\n    # Message is replied to the sender (prefixed with @user)\r\n    message.reply('Yes, I can!')\r\n\r\n    # Message is sent on the channel\r\n    # message.send('I can help everybody!')\r\n```\r\n\r\nTo extract params from the message, you can use regular expression:\r\n```python\r\nfrom mmpy_bot.bot import respond_to\r\n\r\n\r\n@respond_to('Give me (.*)')\r\ndef give_me(message, something):\r\n    message.reply('Here is %s' % something)\r\n```\r\n\r\nIf you would like to have a command like 'stats' and 'stats start_date end_date', you can create reg ex like so:\r\n\r\n```python\r\nfrom mmpy_bot.bot import respond_to\r\nimport re\r\n\r\n\r\n@respond_to('stat$', re.IGNORECASE)\r\n@respond_to('stat (.*) (.*)', re.IGNORECASE)\r\ndef stats(message, start_date=None, end_date=None):\r\n    pass\r\n```\r\n\r\nIf you don't want to expose some bot commands to public, you can add `@allowed_users()` like so:\r\n\r\n```python\r\n@respond_to('^admin$')\r\n@allow_only_direct_message() #only trigger by direct message, remove this line if you want call this in channel\r\n@allowed_users('YourNameHere')\r\ndef users_access(message):\r\n    pass\r\n```\r\n\r\nAnd add the plugins module to `PLUGINS` list of mmpy_bot settings, e.g. mmpy_bot_settings.py:\r\n\r\n```python\r\nPLUGINS = [\r\n    'mmpy_bot.plugins',\r\n    'devops.plugins',          # e.g. git submodule:  domain:devops-plugins.git\r\n    'programmers.plugins',     # e.g. python package: package_name.plugins\r\n    'frontend.plugins',        # e.g. project tree:   apps.bot.plugins\r\n]\r\n```\r\n*For example you can separate git repositories with plugins on your team.*\r\n\r\n\r\nIf you are migrating from `Slack` to the `Mattermost`, and previously you are used `SlackBot`,\r\nyou can use this battery without any problem. On most cases your plugins will be working properly\r\nif you are used standard API or with minimal modifications.\r\n\r\n## Run the tests\r\n\r\nYou will need a Mattermost server to run test cases. \r\n\r\n * Create two user accounts for bots to login, ex. `driverbot` and `testbot`\r\n * Create a team, ex. `test-team`, and add `driverbot` and `testbot` into the team\r\n * Make sure the default public channel `off-topic` exists\r\n * Create a private channel (ex. `test`) in team `test-team`, and add `driverbot` and `testbot` into the private channel\r\n * Give `drivebot` ADMIN previledge on your testing server, and set `pytest_config.DRIVER_ADMIN_PRIVILEGE = True` if you like to test webhooks and other behaviors which requires admin previledge.\r\n\r\nInstall `PyTest` in development environment.\r\n\r\n```\r\npip install -U pytest\r\n```\r\n\r\nThere are two test categories in `mmpy_bot\\tests`: __unit_tests__ and __behavior_tests__. The __behavior_tests__ is done by interactions between a __DriverBot__ and a __TestBot__.\r\n\r\nTo run the __behavior_tests__, you have to configure `behavior_tests\\bot_settings.py` and `behavior_tests\\driver_settings.py`. Example configuration:\r\n\r\n__driver_settings.py__:\r\n```python\r\nPLUGINS = [\r\n]\r\n\r\nBOT_URL = 'http://mymattermost.server/api/v4'\r\nBOT_LOGIN = 'driverbot@mymail'\r\nBOT_NAME = 'driverbot'\r\nBOT_PASSWORD = 'password'\r\nBOT_TEAM = 'test-team'  # this team name should be the same as in bot_settings\r\nBOT_CHANNEL = 'off-topic' # default public channel name\r\nBOT_PRIVATE_CHANNEL = 'test' # a private channel in BOT_TEAM\r\nSSL_VERIFY = True\r\n```\r\n\r\n__bot_settings.py__:\r\n```python\r\nPLUGINS = [\r\n]\r\n\r\nBOT_URL = 'http://mymattermost.server/api/v4'\r\nBOT_LOGIN = 'testbot@mymail'\r\nBOT_NAME = 'testbot'\r\nBOT_PASSWORD = 'password'\r\nBOT_TEAM = 'test-team'  # this team name should be the same as in driver_settings\r\nBOT_CHANNEL = 'off-topic'   # default public channel name\r\nBOT_PRIVATE_CHANNEL = 'test' # a private channel in BOT_TEAM\r\nSSL_VERIFY = True\r\n```\r\n\r\nPlease notice that `BOT_URL`, `BOT_TEAM`, `BOT_CHANNEL`, and `BOT_PRIVATE_CHANNEL` must be the same in both setting files.\r\n\r\nAfter the settings files are done, switch to root dir of mattermost, and run `pytest` to execute test cases.\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/attzonko/mmpy_bot",
    "keywords": "chat bot mattermost",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mmpy-bot",
    "package_url": "https://pypi.org/project/mmpy-bot/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/mmpy-bot/",
    "project_urls": {
      "Homepage": "https://github.com/attzonko/mmpy_bot"
    },
    "release_url": "https://pypi.org/project/mmpy-bot/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python based bot for Mattermost",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17491382,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a0e719190571ffa53e6a56a1a48d02140957b2582d03cfcc4c8385072a275047",
        "md5": "248c6173d85d6c8f149c87b6cec68aa2",
        "sha256": "a90e09d6847b7f152b695abd10a8ba7ae9cf59bf5b25c24add8a72b632dc5474"
      },
      "downloads": -1,
      "filename": "mmpy_bot-1.2.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "248c6173d85d6c8f149c87b6cec68aa2",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 23984,
      "upload_time": "2018-07-19T08:01:30",
      "upload_time_iso_8601": "2018-07-19T08:01:30.465914Z",
      "url": "https://files.pythonhosted.org/packages/a0/e7/19190571ffa53e6a56a1a48d02140957b2582d03cfcc4c8385072a275047/mmpy_bot-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e52d833e84f9b3c16a8f3a5849fb593942a2af25d63901e3ea52508c2ace2e97",
        "md5": "1ca0aee34fade1ee398afacb045d2f87",
        "sha256": "26ec54dffb18aae8ae887f56f3eadc5819c1da903fb147b910968298df62dde5"
      },
      "downloads": -1,
      "filename": "mmpy_bot-1.2.1.tar.gz",
      "has_sig": true,
      "md5_digest": "1ca0aee34fade1ee398afacb045d2f87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14890,
      "upload_time": "2018-07-19T08:01:15",
      "upload_time_iso_8601": "2018-07-19T08:01:15.782598Z",
      "url": "https://files.pythonhosted.org/packages/e5/2d/833e84f9b3c16a8f3a5849fb593942a2af25d63901e3ea52508c2ace2e97/mmpy_bot-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}