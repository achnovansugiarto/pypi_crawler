{
  "info": {
    "author": "Peter Bengtsson",
    "author_email": "mail@peterbe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "About django-static\n===================\n\n.. contents::\n\nWhat it does\n------------\n\n``django_static`` is a Django app that enables as various template tags\nfor better serving your static content. It basically rewrites\nreferences to static files and where applicable it does whitespace\noptmization of the content. By making references to static content\nunique (timestamp included in the name) you can be very aggressive\nwith your cache-control settings without ever having to worry about\nupgrading your code and worrying about visitors using an older version.\n\nThe five template tags it enables are the following:\n\n1. ``staticfile`` Takes the timestamp of the file, and makes a copy by\n   symlinking as you define. You use it like this::\n\n        <img src=\"{% staticfile \"/images/foo.png\" %}\"/>\n\n   and the following is rendered::\n\n        <img src=\"/images/foo.123456789.png\"/>\n\n   ...assuming the epoch timestamp of the file is 123456789.\n\n2. ``slimfile`` Works the same as ``staticfile`` but instead of copying\n   the file as a symlink it actually rewrites the file and compresses\n   it through `slimmer <https://pypi.python.org/pypi/slimmer/>`__. This of\n   course only works for ``.js`` and ``.css`` files but it works\n   wonderfully fast and is careful enough to not break things. The\n   cool thing about doing this for ``.css`` files it finds all relative\n   images inside and applies ``staticfile`` for all of them too. You use\n   it just like ``staticfile``::\n\n        <script type=\"text/javascript\"\n          src=\"{% slimfile \"/javascript/myscript.js\" %}\"></script>\n\n3. ``slimcontent`` is used to whitespace compress content right in the\n   template. It requires a format parameter which can be ``\"js\"``,\n   ``\"css\"`` or ``\"html\"``. So, for example for some inline CSS content\n   you do this::\n\n        <style type=\"text/css\">\n        {% slimcontent \"css\" %}\n        h1, h2, h3 {\n            font-face: 'Trebuchet MS', Verdana, Arial;\n        }\n        {% endslimcontent %}\n        </style>\n\n   ...and you get this::\n\n        <style type=\"text/css\">\n        h1,h2,h3{font-face:'Trebuchet MS',Verdana,Arial}\n        </style>\n\n4. ``staticall`` combines all files between the tags into one and\n   makes the same symlinking as ``staticfile``. Write this::\n\n        {% staticall %}\n        <script src=\"/javascript/foo.js\"></script>\n        <script src=\"/javascript/bar.js\"></script>\n        {% endstaticall %}\n\n   ...and you get this::\n\n        <script src=\"/javascript/foo_bar.123456789.js\"></script>\n\n5. ``slimall`` does the same compression ``slimfile`` does but also\n   combines the files as ``staticall``. Use it like ``staticall``::\n\n        {% slimall %}\n        <script src=\"/javascript/foo.js\"></script>\n        <script src=\"/javascript/bar.js\"></script>\n        {% endslimall %}\n\n``staticall`` and ``slimall`` fully support ``async`` or ``defer``\nJavaScript attributes. Meaning this::\n\n        {% slimall %}\n        <script defer src=\"/javascript/foo.js\"></script>\n        <script defer src=\"/javascript/bar.js\"></script>\n        {% endslimall %}\n\n...will give you this::\n\n        <script defer src=\"/javascript/foo_bar.123456789.js\"></script>\n\nBe careful not to mix the two attributes within the same blocks\nor you might get unexpected results.\n\nConfiguration\n-------------\n\n``django_static`` will be disabled by default. It's not until you set\n``DJANGO_STATIC = True`` in your settings module that it actually starts\nto work for you.\n\nBy default, when ``django_static`` slims files or makes symlinks with\ntimestamps in the filename, it does this into the same directory as\nwhere the original file is. If you don't like that you can override\nthe save location by setting\n``DJANGO_STATIC_SAVE_PREFIX = \"/tmp/django-static\"``\n\nIf you, for the sake of setting up your nginx/varnish/apache2, want\nchange the name the files get you can set\n``DJANGO_STATIC_NAME_PREFIX = \"/cache-forever\"`` as this will make it easier\nto write a rewrite rule/regular expression that in\nnginx/varnish/apache2 deliberately sets extra aggressive caching.\n\nAnother option is to let django_static take care of setting your\n``MEDIA_URL``. You could do this::\n\n        <img src=\"{{ MEDIA_URL }}{% staticfile \"/foo.png\" %}\"/>\n\nBut if you're feeling lazy and what django_static to automatically\ntake care of it set ``DJANGO_STATIC_MEDIA_URL``. In settings.py::\n\n        DJANGO_STATIC_MEDIA_URL = \"//static.example.com\"\n\nIn your template::\n\n        <img src=\"{% staticfile \"/foo.png\" %}\"/>\n\nAnd you get this result::\n\n        <img src=\"//static.example.com/foo.1247785534.png\"/>\n\nRight out of the box, ``DJANGO_STATIC_MEDIA_URL`` will not be active\nif ``DJANGO_STATIC = False``. If you want it to be, set\n``DJANGO_STATIC_MEDIA_URL_ALWAYS = True``.\n\nBy default django_static will look for source files in ``MEDIA_ROOT``,\nbut it is possible tell django_static to look in all directories listed\nin ``DJANGO_STATIC_MEDIA_ROOTS``. The first match will be used.\n\nThere is also a setting ``DJANGO_STATIC_USE_SYMLINK`` that can be set to\n``False`` to force django_static to copy files instead of symlinking them.\n\nAdvanced configuration with DJANGO_STATIC_USE_MANIFEST_FILE\n-----------------------------------------------------------\n\nIf you enable, in your settings, a variable called\n``DJANGO_STATIC_USE_MANIFEST_FILE`` you can save filenames to\nmanifest.json which is stored in the first match directory in\n``DJANGO_STATIC_MEDIA_ROOTS``. This is for the usecase where we want to\nmanually upload css and javascript files to CDN. On production, where DEBUG=False,\ndjango-static will pick the filenames from manifest.json file instead of\ndoing all the calculations.\n\n\nAdvanced configuration with DJANGO_STATIC_FILE_PROXY\n----------------------------------------------------\n\nIf you enable, in your settings, a variable called\n``DJANGO_STATIC_FILE_PROXY`` you can make all static URIs that\n``django_static`` generates go though one function. So that you, for\nexample, can do something with the information such as uploading to a\nCDN. To get started set the config::\n\n        DJANGO_STATIC_FILE_PROXY = 'mycdn.cdn_uploader_file_proxy'\n\nThis is expected to be the equivalent of this import statement::\n\n        from mycdn import cdn_uploader_file_proxy\n\nWhere ``mycdn`` is a python module (e.g. ``mycdn.py``) and\n``cdn_uploader_file_proxy`` is a regular python function. Here's the\nskeleton for that function::\n\n        def cdn_uploader_file_proxy(uri, **kwargs):\n            return uri\n\nNow, it's inside those keyword arguments that you get the juicy gossip\nabout what ``django_static`` has done with the file. These are the\npieces of information you will always get inside those keyword\nargments::\n\n        new = False\n        checked = False\n        changed = False\n        notfound = False\n\nThe names hopefully speak for themselves. They become ``True`` depending\non what ``django_static`` has done. For example, if you change your\n``foo.js`` and re-run the template it's not ``new`` but it will be ``checked``\nand ``changed``. The possibly most important keyword argument you might\nget is ``filepath``. This is set whenever ``django_static`` actually does\nits magic on a static file. So, for example you might write a function\nlike this::\n\n        on_my_cdn = {}\n\n        def cdn_uploader_file_proxy(uri, filepath=None, new=False,\n                                    changed=False, **kwargs):\n            if filepath and (new or changed):\n                on_my_cdn[uri] = upload_to_my_cdn(filepath)\n\n            return on_my_cdn.get(uri, uri)\n\nAdvanced configuration with DJANGO_STATIC_FILENAME_GENERATOR\n------------------------------------------------------------\n\nBy default, django-static generates filenames for your combined files\nusing timestamps. You can use your own filename generating function\nby setting it in settings, like so::\n\n        DJANGO_STATIC_FILENAME_GENERATOR = 'myapp.filename_generator'\n\nThis is expected to be the equivalent of this import statement::\n\n        from myapp import filename_generator\n\nWhere ``myapp`` is a python module, and ``filename_generator`` is a regular\npython function. Here's the skeleton for that function::\n\n  def filename_generator(file_parts, new_m_time):\n      return ''.join([file_parts[0], '.%s' % new_m_time, file_parts[1]])\n\n\nAdvanced configuration with DJANGO_STATIC_COMBINE_FILENAMES_GENERATOR\n---------------------------------------------------------------------\n\nBy default, django-static generates filenames for your combined files\nby concatenating the file names. You can also use your own filename\ngenerating function by setting it in settings, like so::\n\n        DJANGO_STATIC_COMBINE_FILENAMES_GENERATOR = 'myapp.combine_filenames'\n\nThis is expected to be the equivalent of this import statement::\n\n        from myapp import combine_filenames\n\nWhere ``myapp`` is a python module, and ``combine_filenames`` is a regular\npython function. Here's the skeleton for that function::\n\n  path = None\n  names = []\n  extension = None\n  timestamps = []\n  for filename in filenames:\n      name = os.path.basename(filename)\n      if not extension:\n          extension = os.path.splitext(name)[1]\n      elif os.path.splitext(name)[1] != extension:\n          raise ValueError(\"Can't combine multiple file extensions\")\n\n      for each in re.finditer('\\.\\d{10}\\.', name):\n          timestamps.append(int(each.group().replace('.','')))\n          name = name.replace(each.group(), '.')\n      name = os.path.splitext(name)[0]\n      names.append(name)\n\n      if path is None:\n          path = os.path.dirname(filename)\n      else:\n          if len(os.path.dirname(filename)) < len(path):\n              path = os.path.dirname(filename)\n\n\n  new_filename = '_'.join(names)\n  if timestamps:\n      new_filename += \".%s\" % max(timestamps)\n\n  new_filename = new_filename[:max_length]\n  new_filename += extension\n\n  return os.path.join(path, new_filename)\n\n\nCompression Filters\n-------------------\n\nDefault (cssmin)\n~~~~~~~~~~~~~~~~\n\ndjango-static uses cssmin by default if it is installed.\nGet the source here: https://github.com/zacharyvoase/cssmin\n\nUsing jsmin\n~~~~~~~~~~~\n\nIf you would like to use jsmin instead of default js_slimmer, you just need to set\nthe variable in your settings.py file::\n\n    DJANGO_STATIC_JSMIN = True\n\n\nUsing Google Closure Compiler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to use the `Google Closure\nCompiler <https://code.google.com/closure/compiler/>`__ to optimize your\nJavascript files you first have to download the compiler.jar file and\nmake sure your systam can run java. Suppose you download it in\n/usr/local/bin, the set this variable in your settings.py file::\n\n    DJANGO_STATIC_CLOSURE_COMPILER = '/usr/local/bin/compiler.jar'\n\nIf for some reason the compiler chokes on your Javascript it won't\nhalt the serving of the file but it won't be whitespace optimized and\nthe error will be inserted into the resulting Javascript file as a big\ncomment block.\n\nUsing the YUI Compressor\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `YUI Compressor <https://developer.yahoo.com/yui/compressor/>`__ is\nboth a Javascript and CSS compressor which requires a java runtime.\nJust like the Google Closure Compiler, you need to download the jar\nfile and then set something like this in your settings.py::\n\n    DJANGO_STATIC_YUI_COMPRESSOR = '/path/to/yuicompressor-2.4.2.jar'\n\nIf you configure the Google Closure Compiler **and** YUI Compressor,\nthe Google Closure Compiler will be first choice for Javascript\ncompression.\n\nUsing the slimmer\n~~~~~~~~~~~~~~~~~\n\n`slimmer <https://pypi.python.org/pypi/slimmer/>`__ is an all python\npackage that is capable of whitespace optimizing CSS, HTML, XHTML and\nJavascript. It's faster than the YUI Compressor and Google Closure but\nthat speed difference is due to the start-stop time of bridging the\nJava files.\n\nHow to hook this up with nginx\n------------------------------\n\nRead `this blog entry on\npeterbe.com <https://www.peterbe.com/plog/serve-your-static-stuff-in-django-with-nginx>`__",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/django-static/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peterbe/django-static",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-static",
    "package_url": "https://pypi.org/project/django-static/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-static/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/django-static/",
      "Homepage": "https://github.com/peterbe/django-static"
    },
    "release_url": "https://pypi.org/project/django-static/1.5.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Template tags for better serving static files from templates in Django",
    "version": "1.5.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2263973,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffed97eb92935dc269f15e4cc870c852b3e4117048d6d85530f69a3ea898076c",
        "md5": "659e1cc92ae2de4548106bfc9fef12c1",
        "sha256": "7f9a374d334ba4f20744fbacf10905aed5e7c5784d29905b4f2a891f4c575efe"
      },
      "downloads": -1,
      "filename": "django_static-1.5.6-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "659e1cc92ae2de4548106bfc9fef12c1",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 32673,
      "upload_time": "2016-08-05T12:20:05",
      "upload_time_iso_8601": "2016-08-05T12:20:05.990443Z",
      "url": "https://files.pythonhosted.org/packages/ff/ed/97eb92935dc269f15e4cc870c852b3e4117048d6d85530f69a3ea898076c/django_static-1.5.6-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd84bcd4bb240416d685c4bb48929adff393a969b72d283585fc7e5d748fb6ca",
        "md5": "44a80261873b802f95c661f95f1bf7b1",
        "sha256": "39c756e7c7fc9f63f6abf6f84282dcd5b1d2e868c74fd56044bb4d73c9a03565"
      },
      "downloads": -1,
      "filename": "django-static-1.5.6.tar.gz",
      "has_sig": false,
      "md5_digest": "44a80261873b802f95c661f95f1bf7b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26779,
      "upload_time": "2016-08-05T12:20:02",
      "upload_time_iso_8601": "2016-08-05T12:20:02.320325Z",
      "url": "https://files.pythonhosted.org/packages/dd/84/bcd4bb240416d685c4bb48929adff393a969b72d283585fc7e5d748fb6ca/django-static-1.5.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}