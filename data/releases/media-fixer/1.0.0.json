{
  "info": {
    "author": "Halit Şimşek",
    "author_email": "mail.simsekhalit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Multimedia :: Sound/Audio :: Conversion"
    ],
    "description": "# Media Fixer\nHave you ever had a film or TV show that your TV wasn't able to play its audio?\nWell this program is for you.\nMedia Fixer is a program which converts given media to a playable format.\nIt's a kind of wrapper for `ffmpeg` that works with multiple files in a concurrent & memory-buffered fashion.\n\n## Requirements\nPython >= 3.8 is required. (CPython and PyPy are both supported)<br>\n<br>\nAdditionally `ffmpeg` and `mediainfo` are required for this program to run. They can be installed on Ubuntu as the following way:\n```shell\nsudo apt install ffmpeg mediainfo\n```\n\n## Installation\nMedia fixer can be either installed directly via pip:\n```shell\npip install media-fixer\n```\nOr it can be installed from the source:\n```shell\ngit clone https://github.com/simsekhalit/media-fixer.git\npython3 -m pip install ./media-fixer\n```\n\n## Manual\n```\n$ python3 -m media_fixer --help\nusage: media-fixer [-h] [--audio AUDIO_STREAM] [--input-options INPUT_OPTIONS] [--max-memory MAX_MEMORY] [--output-options OUTPUT_OPTIONS] SOURCE [SOURCE ...] TARGET\n\nA wrapper around ffmpeg to make it work in a concurrent and memory-buffered fashion.\n\npositional arguments:\n  SOURCE                source files/directories (works recursively)\n  TARGET                target directory\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --audio AUDIO_STREAM  select index of audio stream to be used (zero-indexed). defaults to 0\n  --input-options INPUT_OPTIONS\n                        specify custom input file options for ffmpeg (overrides default ones)\n  --max-memory MAX_MEMORY\n                        specify allowed max memory usage as percent\n  --output-options OUTPUT_OPTIONS\n                        specify custom output file options for ffmpeg (overrides default ones)\n\nFor more information: https://github.com/simsekhalit/media-fixer\n```\nMedia Fixer can be used in one of the two modes, namely Auto and Custom.\n\n#### Auto Mode\nIf no output options are given, Media Fixer works in Auto mode. Initially, an audio stream is selected with `--audio`.\nFor each given file, existing audio codec is detected and if it's in DTS format, it's converted to EAC-3.\nOtherwise, it's just copied to the target file as it is.\nWhile doing that only the selected audio stream is processed. Rest of the audio streams are stripped out.\nThis is useful for saving space since generally there are many audio streams in a film (English, French, Spanish, etc.),\nbut only one of them is needed.\n\n#### Custom Mode\nIf output options are given with `--output-options`, Media Fixer works in custom mode.\nAll the given files are converted according to given output options.\n\n## Examples\n`SOURCE` and `TARGET` arguments are interpreted in the same way in both modes.<br>\nSingle or multiple source paths can be given. For any given source path:<br> \nIf it's a file, its corresponding target is written under the target path.<br>\nIf it's a directory, then it's traversed recursively and all the files under it are processed.\nSource directory tree is generated as the same way in the target path.\nCorresponding target files are written accordingly.\n\n<br>\n\n> :information_source: `MediaInfo` is a helpful tool for identifying audio streams and their formats.\nIt can be downloaded from https://mediaarea.net/en/MediaInfo\n\n<br>\n\n### 1. There is a film and its 3rd audio (which is the audio stream with index 2) is chosen to be used:\n\n```shell\npython3 -m media_fixer --audio 2 '/mnt/HDD/Matrix 4.mkv' '/mnt/MyUSB'\n```\n\n`Matrix 4.mkv` is processed and the resulting file is written to `/mnt/USB/Matrix 4.mkv`\n\n<br>\n\n### 2. There is a folder which contains a season of a TV show: \n\n```\n/mnt/HDD/Brooklyn Nine-Nine Season 1\n/mnt/HDD/Brooklyn Nine-Nine Season 1/S01E01.mkv\n/mnt/HDD/Brooklyn Nine-Nine Season 1/S01E02.mkv\n/mnt/HDD/Brooklyn Nine-Nine Season 1/S01E03.mkv\n...\n```\n\nFollowing command is executed:\n\n```shell\npython3 -m media_fixer '/mnt/HDD/Brooklyn Nine-Nine Season 1' '/mnt/USB'\n```\n\nAll the episodes are processed and written to `/mnt/USB/Brooklyn Nine-Nine Season 1`\n\n<br>\n\n### 3. Custom ffmpeg options wanted to be used:\n\n```shell\npython3 -m media_fixer --output-options '-c:v copy -c:a aac -c:s copy -f matroska -map 0:v -map 0:a:2 -map 0:s' '/mnt/HDD/Brooklyn Nine-Nine Season 1' '/mnt/USB'\n```\nFollowing ffmpeg command is run for each source file:\n```shell\nffmpeg -i $source -c:v copy -c:a aac -c:s copy -f matroska -map 0:v -map 0:a:2 -map 0:s -y -\n```\n`$source` is replaced with the source file's path and output is captured from stdout,\nbuffered there and then written to the corresponding target path.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simsekhalit/media-fixer",
    "keywords": "audio,buffer,concurrent,conversion,decode,dts,eac3,encode,ffmpeg,fix,media,multimedia",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "media-fixer",
    "package_url": "https://pypi.org/project/media-fixer/",
    "platform": "",
    "project_url": "https://pypi.org/project/media-fixer/",
    "project_urls": {
      "Homepage": "https://github.com/simsekhalit/media-fixer"
    },
    "release_url": "https://pypi.org/project/media-fixer/1.0.0/",
    "requires_dist": [
      "psutil"
    ],
    "requires_python": ">=3.8",
    "summary": "A wrapper around ffmpeg to make it work in a concurrent and memory-buffered fashion.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12532441,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca615904e1ca622e50ae3f6983906b127b07be0dc4b0479a4a160f83b904a5a1",
        "md5": "9f22b07f1638242630789bccbe0fb568",
        "sha256": "aa518b9fb1146d7e5dc6991f9af87d9864b33de3c7dffe9b660c31481d5114a5"
      },
      "downloads": -1,
      "filename": "media_fixer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f22b07f1638242630789bccbe0fb568",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9941,
      "upload_time": "2022-01-10T20:43:32",
      "upload_time_iso_8601": "2022-01-10T20:43:32.576174Z",
      "url": "https://files.pythonhosted.org/packages/ca/61/5904e1ca622e50ae3f6983906b127b07be0dc4b0479a4a160f83b904a5a1/media_fixer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a81e8c6a3c25de28ba73a79046c3f7041f367050326ca491c53fe25cd271fd83",
        "md5": "c387207c229423aa83c21640d8a3baee",
        "sha256": "dcb3b65511974482e3fa6acee0832ef60a57dce07854a76374e0463eb93cd39f"
      },
      "downloads": -1,
      "filename": "media-fixer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c387207c229423aa83c21640d8a3baee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11660,
      "upload_time": "2022-01-10T20:43:34",
      "upload_time_iso_8601": "2022-01-10T20:43:34.559228Z",
      "url": "https://files.pythonhosted.org/packages/a8/1e/8c6a3c25de28ba73a79046c3f7041f367050326ca491c53fe25cd271fd83/media-fixer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}