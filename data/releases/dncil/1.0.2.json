{
  "info": {
    "author": "Mike Hunhoff",
    "author_email": "michael.hunhoff@mandiant.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Security"
    ],
    "description": "![dncil](./.github/dncil.png)\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dncil)](https://pypi.org/project/dncil)\n[![Last release](https://img.shields.io/github/v/release/mandiant/dncil)](https://github.com/mandiant/dncil/releases)\n[![CI](https://github.com/mandiant/dncil/actions/workflows/tests.yml/badge.svg)](https://github.com/mandiant/dncil/actions/workflows/tests.yml)\n[![Downloads](https://pepy.tech/badge/dncil)](https://pepy.tech/project/dncil)\n[![License](https://img.shields.io/badge/license-Apache--2.0-green.svg)](LICENSE.txt)\n\n`dncil` is a Common Intermediate Language (`CIL`) disassembly library written in Python that supports parsing the header, instructions, and exception handlers of `.NET` managed methods. Parsed data is exposed through an object-oriented API to help you quickly develop `CIL` analysis tools using `dncil`.\n\nWhy `Python`? Existing libraries that support `CIL` disassembly, like [`dnLib`](https://github.com/0xd4d/dnlib), are written in `C#`. To leverage these tools, you must build `C#` applications which requires `C#` development experience. Using `dncil`, a pure `Python` alternative, you:\n\n1. Do not need `C#` experience to analyze `CIL` programmatically.\n2. Can quickly develop and test your `CIL` analysis tools.\n3. Can easily integrate your `CIL` analysis tools with existing `Python` projects.\n\n## Example\n\nThe example script [`print_cil_from_dn_file.py`](scripts/print_cil_from_dn_file.py) uses `dncil` together with `.NET` analysis library [`dnfile`](https://github.com/malwarefrank/dnfile) to disassemble the managed methods found in a `.NET` executable. Let's see what it can do.\n\nFirst, we compile the following `C#` source code:\n\n```C#\nusing System;\t\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine (\"Hello World!\");\n    }\n}\n```\n\nCompilation results in a `PE` executable containing `.NET` metadata which informs the `Common Language Runtime` (`CLR`) how to execute our code. We use `dnfile` to parse this metadata which gives us the offset of our managed method `Main`. We then use `dncil` to disassemble and display the `CIL` instructions stored at this location.\n\nLet's see the above in action:\n\n```\n$ python scripts/print_cil_from_dn_file.py hello-world.exe \n\nMethod: Main\n0000    00                  nop            \n0001    72 01 00 00 70      ldstr          \"Hello World!\"\n0006    28 04 00 00 0a      call           System.Console::WriteLine\n000B    00                  nop            \n000C    2a                  ret            \n```\n\nOur method `Main` is represented by the [`CilMethodBody`](dncil/cil/body/__init__.py) class. This class holds data that includes the header, `CIL` instructions, and exception handlers of a given managed method. It also exposes various helper functions:\n\n```Python\n>  main_method_body.flags\nSmallFormat  :  false\nTinyFormat   :  false\nFatFormat    :  false\nTinyFormat1  :  true\nMoreSects    :  false\nInitLocals   :  false\nCompressedIL :  false\n>  main_method_body.size\n14\n>  hexdump.hexdump(main_method_body.get_bytes())\n00000000: 36 00 72 01 00 00 70 28  04 00 00 0A 00 2A        6.r...p(.....*\n>  hexdump.hexdump(main_method_body.get_header_bytes())\n00000000: 36                                                6\n>  hexdump.hexdump(main_method_body.get_instruction_bytes())\n00000000: 00 72 01 00 00 70 28 04  00 00 0A 00 2A           .r...p(.....*\n```\n\nEach `CIL` instruction found in our managed method `Main` is represented by the [`Instruction`](dncil/cil/instruction.py) class. This class holds data that includes the offset, mnemonic, opcode, and operand of a given `CIL` instruction. It also exposes various helper functions:\n\n```Python\n>  len(main_method_body.instructions)\n5\n>  insn = main_method_body.instructions[1]\n>  insn.offset\n1\n>  insn.mnemonic\n'ldstr'\n>  insn.operand\ntoken(0x70000001)\n>  insn.is_ldstr()\nTrue\n>  insn.size\n5\n>  hexdump.hexdump(insn.get_bytes())\n00000000: 72 01 00 00 70                                    r...p\n>  hexdump.hexdump(insn.get_opcode_bytes())\n00000000: 72                                                r\n>  hexdump.hexdump(insn.get_operand_bytes())\n00000000: 01 00 00 70                                       ...p\n```\n\n## Installing\n\nTo install `dncil` use `pip` to fetch the `dncil` module:\n\n```\n$ pip install dncil\n```\n\nTo execute the example scripts be sure to install [`dnfile`](https://github.com/malwarefrank/dnfile). Alternatively, install `dncil` with the development dependencies as described in the `Development` section below.\n\nSee [print_cil_from_bytes.py](scripts/print_cil_from_bytes.py) for a quick example of using `dncil`to print the `CIL` instructions found in a byte stream containing a `.NET` managed method.\n\n## Development\n\nIf you'd like to review and modify `dncil` source code, you'll need to download it from GitHub and install it locally. \n\nUse the following command to install `dncil` locally with development dependencies:\n\n```\n$ pip install /local/path/to/src[dev]\n```\n\nYou'll need `dncil`'s development dependencies to run tests and linting as described below.\n\n### Testing\n\nUse the following command to run tests:\n\n```\n$ pytest /local/path/to/src/tests\n```\n\n### Linting\n\nUse the following commands to identify format errors:\n\n```\n$ black -l 120 -c /local/path/to/src\n$ isort --profile black --length-sort --line-width 120 -c /local/path/to/src\n$ mypy --config-file /local/path/to/src/.github/mypy/mypy.ini /local/path/to/src/dncil/ /local/path/to/src/scripts/ /local/path/to/src/tests/\n```\n\n## Credits\n\n`dncil` is based on the `CIL` parsing code found in [`dnLib`](https://github.com/0xd4d/dnlib).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.github.com/mandiant/dncil",
    "keywords": ".net dotnet cil il disassembly FLARE",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dncil",
    "package_url": "https://pypi.org/project/dncil/",
    "platform": null,
    "project_url": "https://pypi.org/project/dncil/",
    "project_urls": {
      "Homepage": "https://www.github.com/mandiant/dncil"
    },
    "release_url": "https://pypi.org/project/dncil/1.0.2/",
    "requires_dist": [
      "pytest (==7.2.0) ; extra == 'dev'",
      "pytest-sugar (==0.9.6) ; extra == 'dev'",
      "pytest-instafail (==0.4.2) ; extra == 'dev'",
      "pytest-cov (==4.0.0) ; extra == 'dev'",
      "pycodestyle (==2.10.0) ; extra == 'dev'",
      "black (==22.12.0) ; extra == 'dev'",
      "isort (==5.10.1) ; extra == 'dev'",
      "mypy (==0.991) ; extra == 'dev'",
      "dnfile (==0.12.0) ; extra == 'dev'",
      "hexdump (==3.3.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "The FLARE team's open-source library to disassemble Common Intermediate Language (CIL) instructions.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16077788,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b2df6e3fa0832ce1d934a851757058235c9ec5741cff0129cfcf205a9359489",
        "md5": "4d614f4cf521c9ad86f871ddbe9b4e6b",
        "sha256": "69d389e9b850fa9afa2e37ca252b01476379991eee88fd33ab76f924d36dd68d"
      },
      "downloads": -1,
      "filename": "dncil-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d614f4cf521c9ad86f871ddbe9b4e6b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 27010,
      "upload_time": "2022-12-12T19:09:27",
      "upload_time_iso_8601": "2022-12-12T19:09:27.582794Z",
      "url": "https://files.pythonhosted.org/packages/5b/2d/f6e3fa0832ce1d934a851757058235c9ec5741cff0129cfcf205a9359489/dncil-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5379498fc2e7e7e132bb7930a28cd075f3b3e77de3b4be5f38a9340a866f9802",
        "md5": "393f458a96ec17aee0b497ff9ab5ffbe",
        "sha256": "1557675c2d1351d3260509881cff0383309f81cda4944ed2c3f5cc352953aa15"
      },
      "downloads": -1,
      "filename": "dncil-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "393f458a96ec17aee0b497ff9ab5ffbe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19318,
      "upload_time": "2022-12-12T19:09:29",
      "upload_time_iso_8601": "2022-12-12T19:09:29.322462Z",
      "url": "https://files.pythonhosted.org/packages/53/79/498fc2e7e7e132bb7930a28cd075f3b3e77de3b4be5f38a9340a866f9802/dncil-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}