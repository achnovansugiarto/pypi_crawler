{
  "info": {
    "author": "Evgeniy Fetisov",
    "author_email": "me@efetisov.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# mediatr_py\n\n[![PyPI](https://img.shields.io/pypi/v/mediatr)](https://pypi.org/project/mediatr)\n[![Python](https://img.shields.io/pypi/pyversions/mediatr)](https://pypi.org/project/mediatr) \n[![Downloads](https://img.shields.io/pypi/dm/mediatr)](https://pypi.org/project/mediatr) \n\nThis is an async implementation of Mediator pattern with pipline behaviors.\n\nIt is a port of [Mediatr](https://github.com/jbogard/MediatR) from .Net C#\n\nRequirements:\n* Python >= 3.5\n\n## Usage:\n\ninstall [mediatr](https://pypi.org/project/mediatr/):\n\n`pip install mediatr`\n\n### Define your request class\n\n```py\n\nclass GetArrayQuery():\n    def __init__(self,items_count:int):\n        self.items_count = items_count\n\n```\n\n### Define your handler class or function\n\n```py\nimport Mediator from mediatr\n\n@Mediator.handler\nasync def get_array_handler(request:GetArrayQuery):\n    items = list()\n    for i in range(0, request.items_count):\n        items.append(i)\n    return items\n    \n# or just Mediator.register_handler(get_array_handler)\n    \n```\n\nor class:\n\n```py\n@Mediator.handler\nclass GetArrayQueryHandler():\n    def handle(self,request:GetArrayQuery):\n        items = list()\n        for i in range(0, request.items_count):\n            items.append(i)\n        return items\n        \n# or just Mediator.register_handler(GetArrayQueryHandler)\n```\n\n### Run mediator\n\n```py\nimport Mediator from mediatr\n\nmediator = Mediator()\n\nrequest = GetArrayQuery(5)\n\nresult = await mediator.send_async(request)\n\n# result = mediator.send(request) in synchronous mode\n\nprint(result) // [0,1,2,3,4]\n\n```\n\n> If you are using synchronous `mediator.send(request)` method, try to define synchronous handlers and behaviors\n>\n> In another case use `asyncio` module for manual manage of event loop in synchronous code\n\n\n### Run mediator statically, without instance\n\n```py\nimport Mediator from mediatr\n\nrequest = GetArrayQuery(5)\n\nresult = await Mediator.send_async(request)\n# or:\nresult = Mediator.send(request) #in synchronous mode. Async handlers and behaviors will not blocking!\n\nprint(result) // [0,1,2,3,4]\n\n```\n\nNote that instantiation of `Mediator(handler_class_manager = my_manager_func)` is useful if you have custom handlers creation. For example using an injector.\nBy default class handlers are instantiated with simple init:  `SomeRequestHandler()`. handlers or behaviors as functions are executed directly. \n\n\n## Using behaviors\nYou can define behavior class with method 'handle' or function:\n\n```py\n@Mediator.behavior\nasync def get_array_query_behavior(request:GetArrayQuery, next): #behavior only for GetArrayQuery or derived classes\n    array1 = await next()\n    array1.append(5)\n    return array1\n\n@Mediator.behavior\ndef common_behavior(request:object, next): #behavior for all requests because issubclass(GetArrayQuery,object)==True\n    request.timestamp = '123'\n    return next()\n\n# ...\n\nmediator = Mediator()\nrequest = GetArrayQuery(5)\nresult = await mediator.send_async(request)\nprint(result) // [0,1,2,3,4,5]\nprint(request.timestamp) // '123'\n\n```\n\n## Using custom handler (behavior) factory for handlers (behaviors) as classes\n\nIf your handlers or behaviors registered as functions, it just executes them.\n\nIn case with handlers or behaviors, declared as classes with method `handle` Mediator uses function, that instantiates handlers or behaviors:\n\n```py\ndef default_handler_class_manager(HandlerCls:type,is_behavior:bool=False):\n    return HandlerCls()\n\n```\n\n\nFor example, if you want to instantiate them with dependency injector or custom, pass your own factory function to Mediator:\n\n```py\ndef my_class_handler_manager(handler_class, is_behavior=False):\n    \n    if is_behavior:\n        # custom logic\n        pass\n\n    return injector.get(handler_class)\n\nmediator = Mediator(handler_class_manager=my_class_handler_manager)\n\n```\nPS:\n\n\nThe `next` function in behavior is `async`, so if you want to take results or if your behavior is async, use `middle_results = await next()`\n\n\nHandler may be async too, if you need.\n\n## Using with generic typing support (version >= 1.2):\n\n```py\n\nfrom mediatr import Mediator, GenericQuery\n\n\nclass UserModel(BaseModel): # For example sqlalchemy ORM entity\n    id = Column(String,primary_key=True)\n    name = Column(String)\n\n\nclass FetchUserQuery(GenericQuery[UserModel])\n    def __init__(self,user_id:str):\n        self.user_id = user_id\n\n\nmediator = Mediator()\n\nrequest = FetchUserQuery(user_id = \"123456\")\n\nuser = mediator.send(request) # type of response will be a UserModel\n\n\n# -------------------------------------------------------------\n\n\nclass FetchUserQueryHandler():\n\n    def handle(self, request:FetchUserQuery):\n        db_session = Session() #sqlalchemy session\n        return db_session.query(UserModel).filter(UserModel.id == request.user_id).one()\n\n# or handler as simple function:\n\ndef fetch_user_query_handler(request:FetchUserQuery):\n    db_session = Session() #sqlalchemy session\n    return db_session.query(UserModel).filter(UserModel.id == request.user_id).one()\n\n\n```\n\nPlease give a star if the library is useful for you :smiley:",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/megafetis/mediatr_py",
    "keywords": "mediator,mediatr,CQRS,cqrs,mediatr_py,mediator py,mediatr py,pipline,behaviors,command,query,responsability,segregation,command bus,bus",
    "license": "MIT -or- Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediatr",
    "package_url": "https://pypi.org/project/mediatr/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediatr/",
    "project_urls": {
      "Homepage": "https://github.com/megafetis/mediatr_py"
    },
    "release_url": "https://pypi.org/project/mediatr/1.2.6/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "mediator and CQRS pattern implementation with pipline behaviors for Python 3.5+. Mediatr py",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10118453,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "640e650726bffd939c45ee23f4457f49fda9f8f5b2f004811d4d1961b42ca651",
        "md5": "e19a3df5e2e54dd99a8797ddea0f11e9",
        "sha256": "7d509c55bbedf3722c0ff4bfe6b75c492146f9dd9e2a759ad10594510d27e5b5"
      },
      "downloads": -1,
      "filename": "mediatr-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e19a3df5e2e54dd99a8797ddea0f11e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 10159,
      "upload_time": "2021-04-20T12:47:57",
      "upload_time_iso_8601": "2021-04-20T12:47:57.566790Z",
      "url": "https://files.pythonhosted.org/packages/64/0e/650726bffd939c45ee23f4457f49fda9f8f5b2f004811d4d1961b42ca651/mediatr-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}