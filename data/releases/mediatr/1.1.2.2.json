{
  "info": {
    "author": "Evgeniy Fetisov",
    "author_email": "me@efetisov.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# mediatr_py\n\nThis is an async implementation of Mediator pattern with pipline behaviors.\n\nIt is a port of [Mediatr](https://github.com/jbogard/MediatR) from .Net C#\n\nRequirements:\n* Python >= 3.5\n\n## Usage:\n\ninstall [mediatr](https://pypi.org/project/mediatr/):\n\n`pip install mediatr`\n\n### Define your request class\n\n```py\n\nclass GetArrayQuery():\n    def __init__(self,items_count:int):\n        self.items_count = items_count\n\n```\n\n### Define your handler class or function\n\n```py\nimport Mediator from mediatr\n\n@Mediator.handler\nasync def get_array_handler(request:GetArrayQuery):\n    items = list()\n    for i in range(0, request.items_count):\n        items.append(i)\n    return items\n    \n# or just Mediator.register_handler(get_array_handler)\n    \n```\n\nor class:\n\n```py\n@Mediator.handler\nclass GetArrayQueryHandler():\n    def handle(self,request:GetArrayQuery):\n        items = list()\n        for i in range(0, request.items_count):\n            items.append(i)\n        return items\n        \n# or just Mediator.register_handler(GetArrayQueryHandler)\n```\n\n### Run mediator\n\n```py\nimport Mediator from mediatr\n\nmediator = Mediator()\n\nrequest = GetArrayQuery(5)\n\nresult = await mediator.send_async(request)\n\n# result = mediator.send(request) in synchronous mode\n\nprint(result) // [0,1,2,3,4]\n\n```\n\n### Run mediator statically, without instance\n\n```py\nimport Mediator from mediatr\n\nrequest = GetArrayQuery(5)\n\nresult = await Mediator.send_async(request)\n# or:\nresult = Mediator.send(request) #in synchronous mode. Async handlers and behaviors will executed with blocking\n\nprint(result) // [0,1,2,3,4]\n\n```\n\nNote that instantiation of `Mediator(handler_class_manager = my_manager_func)` is useful if you have custom handlers creation. For example using an injector.\nBy default class handlers are instantiated with simple init:  `SomeRequestHandler()`. handlers or behaviors as functions are executed directly. \n\n\n### Using behaviors\nYou can define behavior class with method 'handle' or function:\n\n```py\n@Mediator.behavior\nasync def get_array_query_behavior(request:GetArrayQuery, next): #behavior only for GetArrayQuery or derived classes\n    array1 = await next()\n    array1.append(5)\n    return array1\n\n@Mediator.behavior\ndef common_behavior(request:object, next): #behavior for all requests because issubclass(GetArrayQuery,object)==True\n    request.timestamp = '123'\n    return next()\n\n# ...\n\nmediator = Mediator()\nrequest = GetArrayQuery(5)\nresult = await mediator.send_async(request)\nprint(result) // [0,1,2,3,4,5]\nprint(request.timestamp) // '123'\n\n```\n\n#### Create yor own class handler manager function\n\nFor example, if you want to instantiate them with dependency injector or custom \n\n```py\ndef my_class_handler_manager(handler_class, is_behavior=False):\n    return handler_class()\n\nmediator = Mediator(handler_class_manager=my_class_handler_manager)\n\n```\nPS:\n\n\nThe 'next' function in behavior is `async`, so if you want to take results or if your behavior is async, use `middle_results = await next()`\n\n\nHandler may be async too, if you need.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/megafetis/mediatr_py",
    "keywords": "mediator,mediatr,CQRS,cqrs,mediatr_py,mediator py,mediatr py,pipline,behaviors,command,query,responsability,segregation,command bus,bus",
    "license": "MIT -or- Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediatr",
    "package_url": "https://pypi.org/project/mediatr/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediatr/",
    "project_urls": {
      "Homepage": "https://github.com/megafetis/mediatr_py"
    },
    "release_url": "https://pypi.org/project/mediatr/1.1.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "mediator and CQRS pattern implementation with pipline behaviors for Python 3.5+. Mediatr py",
    "version": "1.1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10118453,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86ef2c1be5d0e5c91357ead609c6d144523c49ebbb4f470991eef19d08fa0f19",
        "md5": "f13febb4145be391671b0c9e70091769",
        "sha256": "a09c11c48e0871d1f5deb492dd3c76dc5f590cf3baab83cefb15b0ba75863f4b"
      },
      "downloads": -1,
      "filename": "mediatr-1.1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f13febb4145be391671b0c9e70091769",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 4737,
      "upload_time": "2020-11-02T09:01:43",
      "upload_time_iso_8601": "2020-11-02T09:01:43.662896Z",
      "url": "https://files.pythonhosted.org/packages/86/ef/2c1be5d0e5c91357ead609c6d144523c49ebbb4f470991eef19d08fa0f19/mediatr-1.1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}