{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database"
    ],
    "description": "============\nDjango-MySQL\n============\n\n.. image:: https://img.shields.io/pypi/v/django-mysql.svg\n    :target: https://pypi.python.org/pypi/django-mysql\n\n.. image:: https://travis-ci.org/adamchainz/django-mysql.svg?branch=master\n        :target: https://travis-ci.org/adamchainz/django-mysql\n\n.. image:: https://coveralls.io/repos/adamchainz/django-mysql/badge.svg\n        :target: https://coveralls.io/r/adamchainz/django-mysql\n\n.. image:: https://readthedocs.org/projects/django-mysql/badge/?version=latest\n        :target: https://django-mysql.readthedocs.io/en/latest/\n\n\n.. figure:: https://raw.github.com/adamchainz/django-mysql/master/docs/images/dolphin-pony.png\n   :alt: The dolphin-pony - proof that cute + cute = double cute.\n\n..\n\n    | The dolphin-pony - proof that cute + cute = double cute.\n\n\nDjango-MySQL is a non-inventively named package that helps you use some\nMySQL/MariaDB-specific features in the world of Django.\n\n\nWhat kind of features?\n----------------------\n\nIncludes:\n\n* ``QuerySet`` extensions:\n\n  * 'Smart' iteration - chunked pagination across a large queryset\n  * ``approx_count`` for quick estimates of ``count()``\n  * Query hints\n  * Quick ``pt-visual-explain`` of the underlying query\n\n* Model fields:\n\n  * MySQL 5.7+ JSON Field\n  * MariaDB Dynamic Columns for storing dictionaries\n  * Comma-separated fields for storing lists and sets\n  * 'Missing' fields: differently sized ``BinaryField``/``TextField`` classes,\n    ``BooleanField``\\s represented by BIT(1)\n\n* ORM expressions for over 20 MySQL-specific functions\n* A new cache backend that makes use of MySQL's upsert statement and does\n  compression\n* Handler API for quicker-than-SQL reads using the 'NoSQL' HANDLER commands\n* Status variable inspection and utility methods\n* Named locks for easy locking of e.g. external resources\n* Table lock manager for hard to pull off data migrations\n\nTo see them all, check out the exposition at\nhttps://django-mysql.readthedocs.io/en/latest/exposition.html .\n\nRequirements and Installation\n-----------------------------\n\nPlease see\nhttps://django-mysql.readthedocs.io/en/latest/installation.html .\n\nDocumentation\n-------------\n\nEvery detail documented on\n`Read The Docs <https://django-mysql.readthedocs.io/en/latest/>`_.\n\n\n\n\nHistory\n=======\n\nPending\n-------\n\n* New release notes here\n\n1.1.1 (2017-03-28)\n------------------\n\n* Don't allow NaN in ``JSONField`` because MySQL doesn't support it\n\n1.1.0 (2016-07-22)\n------------------\n\n* Dropped Django 1.7 support\n* Made the query hint functions raise ``RuntimeError`` if you haven't activated\n  the query-rewriting layer in settings.\n\n1.0.9 (2016-05-12)\n------------------\n\n* Fixed some features to work when there are non-MySQL databases configured\n* Fixed ``JSONField`` to allow control characters, which MySQL does - but not\n  in a top-level string, only inside a JSON object/array.\n\n1.0.8 (2016-04-08)\n------------------\n\n* ``SmartChunkedIterator`` now fails properly for models whose primary key is a\n  non-integer foreign key.\n* ``pty`` is no longer imported at the top-level in ``django_mysql.utils``,\n  fixing Windows compatibility.\n\n\n1.0.7 (2016-03-04)\n------------------\n\n* Added new ``JSONField`` class backed by the JSON type added in MySQL 5.7.\n* Added database functions ``JSONExtract``, ``JSONKeys``, and ``JSONLength``\n  that wrap the JSON functions added in MySQL 5.7, which can be used with the\n  JSON type columns as well as JSON data held in text/varchar columns.\n* Added ``If`` database function for simple conditionals.\n\n\n1.0.6 (2016-02-26)\n------------------\n\n* Now MySQL 5.7 compatible\n* The final message from ``SmartChunkedIterator`` is now rounded to the nearest\n  second.\n* ``Lock`` and ``TableLock`` classes now have ``acquire`` and ``release()``\n  methods for using them as normal objects rather than context managers\n\n1.0.5 (2016-02-10)\n------------------\n\n* Added ``manage.py`` command ``fix_datetime_columns`` that outputs the SQL\n  necessary to fix any ``datetime`` columns into ``datetime(6)``, as required\n  when upgrading a database to MySQL 5.6+, or MariaDB 5.3+.\n* ``SmartChunkedIterator`` output now includes the total time taken and number\n  of objects iterated over in the final message.\n\n\n1.0.4 (2016-02-02)\n------------------\n\n* Fixed the new system checks to actually work\n\n\n1.0.3 (2016-02-02)\n------------------\n\n* Fixed ``EnumField`` so that it works properly with forms, and does not accept\n  the ``max_length`` argument.\n* ``SmartChunkedIterator`` output has been fixed for reversed iteration, and\n  now includes a time estimate.\n* Added three system checks that give warnings if the MySQL configuration can\n  (probably) be improved.\n\n\n1.0.2 (2016-01-24)\n------------------\n\n* New function ``add_QuerySetMixin`` allows addding the ``QuerySetMixin`` to\n  arbitrary ``QuerySet``\\s, for when you can't edit a model class.\n* Added field class ``EnumField`` that uses MySQL's ``ENUM`` data type.\n\n1.0.1 (2015-11-18)\n------------------\n\n* Added ``chunk_min`` argument to ``SmartChunkedIterator``\n\n1.0.0 (2015-10-29)\n------------------\n\n* Changed version number to 1.0.0 to indicate maturity.\n* Added ``DynamicField`` for using MariaDB's Named Dynamic Columns, and related\n  database functions ``ColumnAdd``, ``ColumnDelete``, and ``ColumnGet``.\n* ``SmartChunkedIterator`` with ``report_progress=True`` correctly reports\n  'lowest pk so far' when iterating in reverse.\n* Fix broken import paths during ``deconstruct()`` for subclasses of all\n  fields: ``ListCharField``, ``ListTextField``, ``SetCharField``,\n  ``SetTextField``, ``SizedBinaryField`` and ``SizedTextField``\n* Added XML database functions - ``UpdateXML`` and ``XMLExtractValue``.\n\n0.2.3 (2015-10-12)\n------------------\n\n* Allow ``approx_count`` on QuerySets for which only query hints have been used\n* Added index query hints to ``QuerySet`` methods, via query-rewriting layer\n* Added ``ordering`` parameter to ``GroupConcat`` to specify the ``ORDER BY``\n  clause\n* Added index query hints to ``QuerySet`` methods, via query-rewriting layer\n* Added ``sql_calc_found_rows()`` query hint that calculates the total rows\n  that match when you only take a slice, which becomes available on the\n  ``found_rows`` attribute\n* Made ``SmartChunkedIterator`` work with ``reverse()``'d ``QuerySet``\\s\n\n0.2.2 (2015-09-03)\n------------------\n\n* ``SmartChunkedIterator`` now takes an argument ``chunk_size`` as the initial\n  chunk size\n* ``SmartChunkedIterator`` now allows models whose primary key is a\n  ``ForeignKey``\n* Added ``iter_smart_pk_ranges`` which is similar to ``iter_smart_chunks`` but\n  yields only the start and end primary keys for each chunks, in a tuple.\n* Added prefix methods to ``MySQLCache`` - ``delete_with_prefix``,\n  ``get_with_prefix``, ``keys_with_prefix``\n* Added ``Bit1BooleanField`` and ``NullBit1BooleanField`` model fields that\n  work with boolean fields built by other databases that use the ``BIT(1)``\n  column type\n\n0.2.1 (2015-06-22)\n------------------\n\n* Added Regexp database functions for MariaDB - ``RegexpInstr``,\n  ``RegexpReplace``, and ``RegexpSubstr``\n* Added the option to not limit the size of a ``MySQLCache`` by setting\n  ``MAX_ENTRIES`` = -1.\n* ``MySQLCache`` performance improvements in `get`, `get_many`, and `has_key`\n* Added query-rewriting layer added which allows the use of MySQL query hints\n  such as ``STRAIGHT_JOIN`` via QuerySet methods, as well as adding label\n  comments to track where queries are generated.\n* Added ``TableLock`` context manager\n\n0.2.0 (2015-05-14)\n------------------\n\n* More database functions added - ``Field`` and its complement ``ELT``,\n  and ``LastInsertId``\n* Case sensitive string lookup added as to the ORM for ``CharField`` and\n  ``TextField``\n* Migration operations added - ``InstallPlugin``, ``InstallSOName``, and\n  ``AlterStorageEngine``\n* Extra ORM aggregates added - ``BitAnd``, ``BitOr``, and ``BitXor``\n* ``MySQLCache`` is now case-sensitive. If you are already using it, an upgrade\n  ``ALTER TABLE`` and migration is provided at `the end of the cache docs\n  <https://django-mysql.readthedocs.io/en/latest/cache.html>`_.\n* (MariaDB only) The ``Lock`` class gained a class method ``held_with_prefix``\n  to query held locks matching a given prefix\n* ``SmartIterator`` bugfix for chunks with 0 objects slowing iteration; they\n  such chunks most often occur on tables with primary key \"holes\"\n* Now tested against Django master for cutting edge users and forwards\n  compatibility\n\n0.1.10 (2015-04-30)\n-------------------\n\n* Added the ``MySQLCache`` backend for use with Django's caching framework, a\n  more efficient version of ``DatabaseCache``\n* Fix a ``ZeroDivision`` error in ``WeightedAverageRate``, which is used in\n  smart iteration\n\n0.1.9 (2015-04-20)\n------------------\n\n* ``pt_visual_explain`` no longer executes the given query before fetching its\n  ``EXPLAIN``\n* New ``pt_fingerprint`` function that wraps the ``pt-fingerprint`` tool\n  efficiently\n* For ``List`` fields, the new ``ListF`` class allows you to do atomic append\n  or pop operations from either end of the list in a single query\n* For ``Set`` fields, the new ``SetF`` class allows you to do atomic add or\n  remove operatiosn from the set in a single query\n* The ``@override_mysql_variables`` decorator has been introduced which makes\n  testing code with different MySQL configurations easy\n* The ``is_mariadb`` property gets added onto Django's MySQL ``connection``\n  class automatically\n* A race condition in determining the minimum and maximum primary key values\n  for smart iteration was fixed.\n\n\n0.1.8 (2015-03-31)\n------------------\n\n* Add ``Set`` and ``List`` fields which can store comma-separated sets and\n  lists of a base field with MySQL-specific lookups\n* Support MySQL's ``GROUP_CONCAT`` as an aggregate!\n* Add a ``functions`` module with many MySQL-specific functions for the new\n  Django 1.8 database functions feature\n* Allow access of the global and session status for the default connection from\n  a lazy singleton, similar to Django's ``connection`` object\n* Fix a different recursion error on ``count_tries_approx``\n\n\n0.1.7 (2015-03-25)\n------------------\n\n* Renamed ``connection_name`` argument to ``using`` on ``Lock``,\n  ``GlobalStatus``, and ``SessionStatus`` classes, for more consistency with\n  Django.\n* Fix recursion error on ``QuerySetMixin`` when using ``count_tries_approx``\n\n\n0.1.6 (2015-03-21)\n------------------\n\n* Added support for ``HANDLER`` statements as a ``QuerySet`` extension\n* Now tested on Django 1.8\n* Add ``pk_range`` argument for 'smart iteration' code\n\n\n0.1.5 (2015-03-11)\n------------------\n\n* Added ``manage.py`` command ``dbparams`` for outputting database paramters\n  in formats useful for shell scripts\n\n\n0.1.4 (2015-03-10)\n------------------\n\n* Fix release process\n\n\n0.1.3 (2015-03-08)\n------------------\n\n* Added ``pt_visual_explain`` integration on ``QuerySet``\n* Added soundex-based field lookups for the ORM\n\n\n0.1.2 (2015-03-01)\n------------------\n\n* Added ``get_many`` to ``GlobalStatus``\n* Added ``wait_until_load_low`` to ``GlobalStatus`` which allows you to wait\n  for any high load on your database server to dissipate.\n* Added smart iteration classes and methods for ``QuerySet``\\s that allow\n  efficient iteration over very large sets of objects slice-by-slice.\n\n0.1.1 (2015-02-23)\n------------------\n\n* Added ``Model`` and ``QuerySet`` subclasses which add the ``approx_count``\n  method\n\n0.1.0 (2015-02-12)\n---------------------\n\n* First release on PyPI\n* ``Lock``\\s\n* ``GlobalStatus`` and ``SessionStatus``\n",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/django-mysql/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-mysql",
    "keywords": "Django",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mysql",
    "package_url": "https://pypi.org/project/django-mysql/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mysql/",
    "project_urls": {
      "Homepage": "https://github.com/adamchainz/django-mysql"
    },
    "release_url": "https://pypi.org/project/django-mysql/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Extensions to Django for use with MySQL/MariaDB",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17024230,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b97d768134de561c707a21b2ea1226c68696f5d63e52a735e6f45075bb36cf20",
        "md5": "c6e46dcc3f6d3450db9a264d4543bd07",
        "sha256": "d24b6a0e70104e66fa077c94f2f082ccadfce783651ae18a72d3536434b06a1f"
      },
      "downloads": -1,
      "filename": "django_mysql-1.1.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "c6e46dcc3f6d3450db9a264d4543bd07",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 68995,
      "upload_time": "2017-03-28T21:49:35",
      "upload_time_iso_8601": "2017-03-28T21:49:35.011901Z",
      "url": "https://files.pythonhosted.org/packages/b9/7d/768134de561c707a21b2ea1226c68696f5d63e52a735e6f45075bb36cf20/django_mysql-1.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69d4b27670951bf14a09792345cc39b5d805bd934b0ed6e154f0b6f5607236a3",
        "md5": "c2901bd48eea8a5d153221d1d0ec0b7a",
        "sha256": "6d54ed3710fefc0968c4c53b65ed7dc095989327bebce74d896ef1e9a025b8bc"
      },
      "downloads": -1,
      "filename": "django-mysql-1.1.1.tar.gz",
      "has_sig": true,
      "md5_digest": "c2901bd48eea8a5d153221d1d0ec0b7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 162400,
      "upload_time": "2017-03-28T21:49:29",
      "upload_time_iso_8601": "2017-03-28T21:49:29.941894Z",
      "url": "https://files.pythonhosted.org/packages/69/d4/b27670951bf14a09792345cc39b5d805bd934b0ed6e154f0b6f5607236a3/django-mysql-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}