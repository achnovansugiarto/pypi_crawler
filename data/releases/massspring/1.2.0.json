{
  "info": {
    "author": "Pooya Shams kolahi",
    "author_email": "pooya.shams.k@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# massspring\n\n## Author : Pooya Shams kolahi\n\nInspired by Saeed Sarkarati\n\n## Brief\n\nusing this library you can create great simulations of most of physical environments which can be calculated precisely. you can create many types of objects from which \"mass\" and \"spring\" are main ones.  \nmore on [project homepage on github](https://github.com/pooya-shams/massspring) and [README](https://github.com/pooya-shams/massspring/blob/master/massspring/README.md)\n\n## license\n\nlicensed under MIT License.\nyou can freely use and modify this package, but please let me know if you are doing something interesting.\n\n## Installation\n\nyou can install the package via pip:\n\n```bash\npip install massspring\n```\n\nfor user-only installation use `--user` switch:\n\n```bash\npip install --user massspring\n```\n\nif you have massspring installed and you are wishing to upgrade, you can upgrade via `--upgrade` switch:\n\n```bash\npip install --upgrade massspring\n```\n\nall combined:\n\n```bash\npip install --user --upgrade massspring\n```\n\n## usage\n\nyou can import the library by using the following code (it is recommended to import as m or ms)\n\n```python\nimport massspring as m\n```\n\n### mass\n\nmass is the only type of **object** you can create right now.  \nyou can create a mass object by using the mass class. you can learn more about the arguments and their usage in the [mass class document](https://github.com/pooya-shams/massspring/blob/master/massspring/massspring.py#mass)\n\n```python\nm1 = m.mass(x=0, y=0, z=0, vx=0, vy=0, vz=0, m=10, r=10, q=0, moveable=False, solid=True, bound=True, gravitational=False, resistible=False, electrical=False, conductive=False, color=(0, 255, 0), visible=True)\n```\n\nparameters meanings are explained here.  \nparameters / attributes:\n\n- x, y, z are the object's position.  \n- vx, vy, vz are the object's velocity.\n- fx, fy, fz are the sum of forces applied to the object. they will be added by calling the set_force method in each force's object to the force's masses (m1, m2).\n- m is mass of object.\n- r is radius of object (each mass is consumed as a sphere).\n- q is electrical charge of the object.\n- moveable means if the object can move or not.\n- solid means if the object can hit other objects or not.\n- bound means if the object stays in the screen or not.\n- gravitational means if the object is affected by gravity force or not.\n- resistible means if the object is affected by air resistance force or not.\n- electrical means if the object is affected by other objects' electrical force and can affect them by electrical force or not.\n- conductive means if the object will share electrical charge with others or not.\n- color is the objects default color. visible means if the object is seen or not.\n\n### force\n\nthere are five types of forces (technically force subclass) you can create:  \n1.gravity  \n2.electricity  \n3.spring  \n4.collision  \n5.air resistance  \n\n#### gravity\n\nthe gravity class provides a gravity force between two masses according to the **\"Newton's law of universal gravitation\"** which you can see bellow:  \n![gravity formula](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/gravity.svg)  \nmore information is available at [Newton's law of universal gravitation](https://en.wikipedia.org/wiki/Newton%27s_law_of_universal_gravitation) wikipedia page.  \nyou can create a gravity force between two masses using the code bellow:\n\n```python\ng1 = m.gravity(m1=m1, m2=m2)\n```\n\n(m1 and m2 are the two mass objects between which you want to set gravity force.)\n\n#### electricity\n\nthe electricity class provides an electricity force between two masses according to the **\"Coulomb's law\"** (the vector version) which you can see bellow:  \n![Coulomb's law](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/Coulomb.svg)  \nmore information is available at [Coulomb's law](https://en.wikipedia.org/wiki/Coulomb%27s_law) wikipedia page.\nyou can create an electricity force between two masses using the code bellow:\n\n```python\ne1 = m.electricity(m1=m1, m2=m2)\n```\n\n(m1 and m2 are the two mass objects between which you want to set electricity force.)\n\n#### spring\n\nspring can also be known as an object. However, spring class is a subclass of force class. So technically spring is a force. the force will be calculated using the **\"Hooke's law\"**:  \n![Hooke's law](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/Hooke.svg)  \nmore information is available on [Hooke's law](https://en.wikipedia.org/wiki/Hooke%27s_law) wikipedia page.  \nyou can create a spring object by using the spring class. you can learn more about the arguments and their usage in the [spring class document](https://github.com/pooya-shams/massspring/blob/master/massspring/massspring.py#spring).\n\n```python\ns1 = m.spring(k=1500000, l=0, m1=m1, m2=m2, color=(255, 0, 0), visible=True)\n```\n\n#### collision\n\nuses the conservation of momentum and kinetic energy and the equations presented at the [Elastic Collision](https://en.wikipedia.org/wiki/Elastic_collision) wikipedia page.\n\n```python\nc1 = m.collision(m1=m1, m2=m2)\n```\n\n#### air resistance\n\nthe air_resistance class provides an air_resistance force for an object according to [drag equation](https://en.wikipedia.org/wiki/Drag_equation) shown bellow.  \n![drag equation](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/drag.svg)  \nwhere:\n\n- Fd is the drag force, which is by definition the force component in the direction of the flow velocity,\n- p is the [mass density](https://en.wikipedia.org/wiki/Mass_density) of the fluid,\n- u is the [flow velocity](https://en.wikipedia.org/wiki/Flow_velocity) relative to the object,\n- A is the reference area, and\n- Cd is the [drag coefficient](https://en.wikipedia.org/wiki/Drag_coefficient) â€“ a dimensionless coefficient related to the object's geometry and taking into account both [skin friction](https://en.wikipedia.org/wiki/Skin_friction) and [form drag](https://en.wikipedia.org/wiki/Form_drag). In general, Cd depends on the [Reynolds number](https://en.wikipedia.org/wiki/Reynolds_number).  \n\nmore information is available at [Drag equation](https://en.wikipedia.org/wiki/Drag_equation) and [Drag](https://en.wikipedia.org/wiki/Drag_(physics)) wikipedia page.  \nyou can manually create an air resistance force for an object using the code bellow:\n\n```python\nar = m.air_resistance(m1=m1)\n```\n\n### mainloop\n\nafter creating all of the objects and forces you want, you should call the mainloop function which is an infinite while loop and ends when the user closes the window or presses the ESCape button.  \narguments are:  \n1.speed: the more this number is the faster your program runs. it will decrease the number of frames in which the screen will be updated(increases the space between them).  \n2.FPS: sets the fps parameter for the pygame.time.Clock().tick(FPS) function. the less this number is the less your cpu will be under pressure.  \n3.frame: it's a function which will be called every frame of the program.  \n4.\\*args: the arguments you want to give to the frame function.\n\n```python\nm.mainloop(speed=2, FPS=0, frame=None, *args)\n```\n\n### network\n\nin version 1.2.0 there is a new functionality available instead of mainloop. in the new `networklib.py` file you can find a bunch of functions that can help in running your massspring-based module through network. some of them are explained bellow.\n\n#### start_server_mainloop\n\nthis function is the main function that you run instead of massspring.mainloop and runs the mainloop just like massspring.mainloop does but with a little difference that now it is available through the network. you can pass it a couple of arguments that control how it works.  \nthe first three are related to massspring: the massspring module that you imported and used yourself, the args to the mainloop under that massspring module which is called inside this function, and also kwargs to the mainloop.  \nthe fourth argument is a function called client_handler it lets you define your own function that will be used to communicate over the net. However you can use the predefined functions in networklib too.  \nthe last two arguments are the host and port which are going to be used for the server socket to bind to. if set to None, the default host name and port are gonna be used which are \"localhost:7783\".\n\n#### handle_client\n\nthis function is the default client handler suggested by networklib.  \nhandle_client takes two arguments itself: the client socket which is going to be used to communicate to the clients connecting to the server, and a request analyser function that takes the requests sent from clients and returns the desired answer.  \nHowever, you might have noticed that according to the type hints in the start_server_mainloop taking two arguments is not allowed, so there is also a wrapper function called *handle_client_wrapper* that returns a function that works just like handle_client but takes just one argument which is the client socket and uses the request analyser passed into the wrapper as the second argument for handle_client.  \n\n#### analyse_request\n\nanalyse_request is the default request analyser suggested by networklib.  \nit takes three arguments (which are not allowed in the handle_client function but there is also a wrapper for that too): the request that came from client socket, the mass_lis and the spring_lis from massspring.  \nthe handle client just accepts functions that take one argument and can not use this analyse_request function so there is a wrapper function called *analyse_request_wrapper* that takes two arguments, mass_lis and spring_lis, and returns a function that takes just one argument, the request, and uses analyse_request with the mass_lis and spring_lis passed to the wrapper function.\n\n#### encode/decode mass/spring positions\n\nthese functions are the default functions used by analyse_request to encode/decode all the mass/spring positions into a *bytes object/ list of positions* which will be sent to clients and decoded by them.\n\n## examples\n\nYou can see a simple example of using massspring library to create a pendulum.\nIt has an acceleration of -g in the Y ordinate.\n![\"pendulum\"](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/massspring%20(pendulum).gif)\n\navailable at [example 1](https://github.com/pooya-shams/massspring-examples/blob/master/example%201%20(pendulum).py)\n\nHere is another example of using this library.  \nAs you can see there is a double pendulum shown in the image. However, it is show in both x-y and z-y coordinates (x-y at left and z-y at right). you might feel they are completely different objects but they are just showing one object from two different points of view.\n\n![double pendulum](https://raw.githubusercontent.com/pooya-shams/massspring/master/massspring/images/massspring%20(double%20pendulum).gif)\n\navailable at [example 2](https://github.com/pooya-shams/massspring-examples/blob/master/example%202%20(double%20pendulum%203d).py).\n\n3.[example 3](https://github.com/pooya-shams/massspring-examples/blob/master/example%203%20(3d%20pyramid).py)  \n4.[example 4](https://github.com/pooya-shams/massspring-examples/blob/master/example%204%20(rope).py)  \n5.[example 5](https://github.com/pooya-shams/massspring-examples/blob/master/example%205%20(collision).py)  \n\n## Requirements\n\npython >= 3.6  \npygame >= 1.9.2  \nNote: if you want to hide the pygame support message, place this code before importing massspring.\n\n```python\nimport os\nos.environ[\"PYGAME_HIDE_SUPPORT_PROMPT\"] = '1'\n```\n\n## TODO\n\n(feel free to complete these tasks)\n\n- [x] Add position checker to avoid integer too big error of pygame and python itself.\n- [x] Update the Elastic collision.\n- [ ] ~~divide massspring.py to separate modules.~~ (won't be possible because inheritance levels forces each class to import all previous classes and it results in extreme usage of memory because for example mass class and force class will be imported in each file for each force class (spring, gravity, electricity, collision) and it's inefficient)\n- [ ] Divide the program to a server and a client, the server will do physical calculations and the client will recieve them and show them on screen (will be usefull when migrating to c/c++).\n- [ ] Divide the collision to Elastic collision and Inelastic collision.\n- [ ] Create non-sphere/non-mass objects.\n- [ ] Collision between mass and spring (mass: sphere with mass, spring: line without mass).\n- [ ] Collision between non-sphere objects, sphere objects and line objects(spring).\n- [ ] Add statistic screen.\n- [ ] Create the c/c++ project.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/pooya-shams/massspring/archive/v1.2.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pooya-shams/massspring",
    "keywords": "physics,physics-3d,physics-simulation,mass-spring,mass-spring-simulation,python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "massspring",
    "package_url": "https://pypi.org/project/massspring/",
    "platform": "",
    "project_url": "https://pypi.org/project/massspring/",
    "project_urls": {
      "Download": "https://github.com/pooya-shams/massspring/archive/v1.2.0.tar.gz",
      "Homepage": "https://github.com/pooya-shams/massspring"
    },
    "release_url": "https://pypi.org/project/massspring/1.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A 3D mass-spring real world simulator with more types of forces(gravity, electricity, spring, collision, ...)",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7540518,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9c7d2e460fd42bab04edd5517d39d9c7e8f753f71bce6615cfeaee888779afc",
        "md5": "d6d8bd751e69668b04d85e9fa4a727eb",
        "sha256": "18793e53d9ea0cb1c2cf7f9faba85dfd0365caea95aab3e8f611cc58d362f537"
      },
      "downloads": -1,
      "filename": "massspring-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d6d8bd751e69668b04d85e9fa4a727eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20443,
      "upload_time": "2020-06-23T07:26:51",
      "upload_time_iso_8601": "2020-06-23T07:26:51.517011Z",
      "url": "https://files.pythonhosted.org/packages/a9/c7/d2e460fd42bab04edd5517d39d9c7e8f753f71bce6615cfeaee888779afc/massspring-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}