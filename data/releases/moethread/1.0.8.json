{
  "info": {
    "author": "mhamdan91 (Hamdan, Muhammad)",
    "author_email": "<mhamdan-91@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "Moethread\n=======================================\n## Table of Contents\n\n * [Overview](#overview)\n * [Library Installalion](#library-installalion)\n * [Library Usage](#library-usage)\n\n\n## Overview\nMoethread is a python wrapper for the **ThreadPoolExecutor** library to easily multithread resource bound tasks. The library offers a decorator style of parallelizing\nfunction calls.\n**NOTE**, this only works for resource bound (API calls, network requests, disk read/write operations, etc) operations. If your task is **CPU** intensive, then this library may not offer much benefit and you're better off exploring other options such as **multiporcessing**.\n\n\n## Library Installalion\nTo install the library simply run the following command in a cmd, shell or whatever...\n\n```bash\n# Windows\npip install moethread\n\n# Linux\npip3 install moethread\n```\n\n## Library usage?\nTo start, you need to import the library\n\n```python\nfrom moethread import parallel_call\n\n```\n\nIf you need to read results back from the parallelized function, then you have to define the internal variables/objects globally where you can\naccess them outside of that function. The function to parallelize will accept arguments and keyword arguments.\nArguments are primitives/constants/variables that you'd like to pass through to your function. If you'd like to have **counters** inside the parallelized function, then define those globally as shown in the following code snippet.\n```python\nglobal counter\ncounter = 0\n```\n\n\nAs for the data which needs to be parallelized, this needs to be specified in the keywords argument. The keyword **data** is reserved for the input data.\nThe input data is a dictionary collection of whatever needs to run in parallel.\n\nFor example if you have a dataset of images and you would like to read those images in parallel and those images have labels, then you have to create a dictionary of image paths and their corrosponding labels. You have to make sure that the two lists are aligned.\n\n```python\nimage_paths  = [\"image_0.jpg\", \"image_1.jpg\", ...] \t# some dummy paths\nimage_labels = [0, 1, ...] \t\t                # some dummy labels\nassert len(image_paths) == len(image_labels)\n\n# It's your responsiblity to ensure that elements align, e.g. image_labels[0] is the label for image_paths[0]\ndata = {\"image_path\": image_paths, \"image_label\": image_labels}\n```\n\nThe next step is write the building block of your function. You will add the decorator **@parallel_call** on top of the function and assign **\\*args and \\*\\*kwargs**\nas your function parameters. Inside the function, you will read the data dictionary which contains the path to image and its corrosponding label.\n\n```python\n\n@parallel_call # decorator\ndef function_to_parallelize(*args, **kwargs):\n\t# Define globals...\n\tglobal counter\n\t# Read data in...\n\timage_path  = kwargs.get('data').get('image_path')\n\timage_label = kwargs.get('data').get('image_label')\n\t# Read image\n\timage = cv2.imread(image_path)\n\tif image_label == 1:\n\t\tcounter += 1 # assume images with label == 1 are valid images\n\t## Do whatever you like to do below...\n\n```\n\nLastly, you will just call the function and specify the number of threads. If you set threads = -1, then the libary will figure out the suitable number of threads for the task.\n\n```python\nfunction_to_parallelize(data=data, threads=-1) # automatically assigns the needed number of threads...\n```\n\nPutting it all together.\n\n```python\nfrom moethread import parallel_call\n\nimage_paths  = [\"image_0.jpg\", \"image_1.jpg\", ...] \t# some paths\nimage_labels = [0, 1, ...] \t\t                # some dummy labels\nassert len(image_paths) == len(image_labels)\n\n# It's your responsiblity to ensure that elements align, e.g. image_labels[0] is the label for image_paths[0]\ndata = {\"image_path\": image_paths, \"image_label\": image_labels}\nglobal counter\ncounter = 0\n\n@parallel_call # decorator\ndef function_to_parallelize(*args, **kwargs):\n\t# Define globals...\n\tglobal counter\n\t# Read data in...\n\timage_path  = kwargs.get('data').get('image_path')\n\timage_label = kwargs.get('data').get('image_label')\n\t# Read image\n\timage = cv2.imread(image_path)\n\tif image_label == 1:\n\t\tcounter += 1 # assume images with label == 1 are valid images\n\t## Do whatever you like to do below...\n\nfunction_to_parallelize(data=data, threads=-1) # Automatically assigns the needed number of threads...\n```\n\n### Another example, Pull-request processing.\nThis examples shows how to read github pull requests and parse body content and return a list of github users who produced failed pull-requests.\n\n```python\nfrom moethread import parallel_call\n\nglobal invalid_pulls\ngithub_users  = []\ninvalid_pulls = 0\ngithub_token = ghx_test124\netag   = None\nparams = {'state': 'open'}\npulls  = list(self._iter(int(-1), url, repo.pulls.ShortPullRequest, params, etag))\n@parallel_call\ndef process_pulls(*args, **kwargs):\n    global invalid_pulls\n    pull = kwargs.get('data').get('pulls')\n    response = self._get(f'{url}/{pull.number}/reviews', auth=('', github_token))\n    if response.ok:\n        reviews = json.loads(response.text)\n        for review in reviews:\n            body = review.get('body', '').lower()\n            err = \"failure\"\n            if err in body:\n                res = self._get(pull.user.url, auth=('', github_token))\n                if res.ok:\n                    github_user = json.loads(res.text)\n                    github_users.append(github_user.get('login', ''))\n                invalid_pulls += 1\n                break\n    elif response.status_code != 404:\n        pass\nprocess_pulls(data={\"pulls\": pulls}, threads=-1)\n\n```\n----------------------------------------\nAuthor: Hamdan, Muhammad (@mhamdan91 - Â©)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,multithreading,wrappers,decorator,pool,multitasking,easy multithreading,thread,parallel,concurrent",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moethread",
    "package_url": "https://pypi.org/project/moethread/",
    "platform": null,
    "project_url": "https://pypi.org/project/moethread/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/moethread/1.0.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper for ThreadPoolExecutor to easily multithread resource bound tasks",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16122855,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e86ae2f9ded4c8501328b94728475be1a22d39e94794e4ab05276a97c926588",
        "md5": "efe218c726bfb214fc7b0f48d201023b",
        "sha256": "19627b98a7ce8b06b53b149605462df086857dff6eb4120d227a89c855f0287e"
      },
      "downloads": -1,
      "filename": "moethread-1.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efe218c726bfb214fc7b0f48d201023b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5321,
      "upload_time": "2022-11-26T05:34:26",
      "upload_time_iso_8601": "2022-11-26T05:34:26.061911Z",
      "url": "https://files.pythonhosted.org/packages/9e/86/ae2f9ded4c8501328b94728475be1a22d39e94794e4ab05276a97c926588/moethread-1.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "828dfdc8d17d8c6d56079049f1fecd28fdffeb1c03df6871dbf102adb59ed5f4",
        "md5": "c8bd7e29e8095eaaec934fc385094fa2",
        "sha256": "48534ab4768af2af58564be0e251b058019790b739c53d3d2fadc548f5939fbe"
      },
      "downloads": -1,
      "filename": "moethread-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c8bd7e29e8095eaaec934fc385094fa2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4539,
      "upload_time": "2022-11-26T05:34:28",
      "upload_time_iso_8601": "2022-11-26T05:34:28.063458Z",
      "url": "https://files.pythonhosted.org/packages/82/8d/fdc8d17d8c6d56079049f1fecd28fdffeb1c03df6871dbf102adb59ed5f4/moethread-1.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}