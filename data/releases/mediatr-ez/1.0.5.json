{
  "info": {
    "author": "",
    "author_email": "Anh Khoa <khoava.dev@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# mediatr_py\n\n[![PyPI](https://img.shields.io/pypi/v/mediatr-ez)](https://pypi.org/project/mediatr-ez)\n[![Python](https://img.shields.io/pypi/pyversions/mediatr-ez)](https://pypi.org/project/mediatr-ez) \n[![Downloads](https://img.shields.io/pypi/dm/mediatr-ez)](https://pypi.org/project/mediatr-ez) \n\n<img src=\"https://ca.slack-edge.com/TEDLBFWD9-U01QFV0159R-2593823811d3-512\" alt=\"Alt text\" title=\"Optional title\">\n\n<a href=\"https://www.buymeacoffee.com/khoavadevs\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n\nThis is an async implementation of Mediator pattern with pipline behaviors.\n\nIt is a port of [Mediatr](https://github.com/jbogard/MediatR) from .Net C#\n\nRequirements:\n* Python >= 3.8\n\n## Usage:\n\ninstall [mediatr](https://pypi.org/project/mediatr-ez/):\n\n`pip install mediatr-ez`\n\n### Define your request class\n\n```py\n\nclass GetArrayQuery():\n    def __init__(self,items_count:int):\n        self.items_count = items_count\n\n```\n\n### Define your handler class or function\n\n```py\nimport Mediator from mediatr\n\n@Mediator.handler\nasync def get_array_handler(request:GetArrayQuery):\n    items = list()\n    for i in range(0, request.items_count):\n        items.append(i)\n    return items\n    \n# or just Mediator.register_handler(get_array_handler)\n    \n```\n\nor class:\n\n```py\n@Mediator.handler\nclass GetArrayQueryHandler():\n    def handle(self,request:GetArrayQuery):\n        items = list()\n        for i in range(0, request.items_count):\n            items.append(i)\n        return items\n        \n# or just Mediator.register_handler(GetArrayQueryHandler)\n```\n\n### Define your validator class or function\n\n```py\nimport Mediator from mediatr\n\n@Mediator.validator\nasync def get_array_validator(request:GetArrayQuery):\n    if request.items_count > 0:\n        ...etc\n    else: \n        raise Exception(\"Sorry, items_count number below zero\")\n    \n# or just Mediator.register_validator(get_array_handler)\n    \n```\n\nor class:\n\n```py\n@Mediator.validator\nclass GetArrayQueryValidator():\n    def validate(self,request:GetArrayQuery):\n        if request.items_count > 0:\n        ...etc\n    else: \n        raise Exception(\"Sorry, items_count number below zero\")\n        \n# or just Mediator.register_validator(GetArrayQueryHandler)\n```\n\n### Run mediator\n\n```py\nimport Mediator from mediatr\n\nmediator = Mediator()\n\nrequest = GetArrayQuery(5)\n\nresult = await mediator.send_async(request)\n\n# result = mediator.send(request) in synchronous mode\n\nprint(result) // [0,1,2,3,4]\n\n```\n\n> If you are using synchronous `mediator.send(request)` method, try to define synchronous handlers and behaviors\n>\n> In another case use `asyncio` module for manual manage of event loop in synchronous code\n\n\n### Run mediator statically, without instance\n\n```py\nimport Mediator from mediatr\n\nrequest = GetArrayQuery(5)\n\nresult = await Mediator.send_async(request)\n# or:\nresult = Mediator.send(request) #in synchronous mode. Async handlers and behaviors will not blocking!\n\nprint(result) // [0,1,2,3,4]\n\n```\n\nNote that instantiation of `Mediator(handler_class_manager = my_manager_func)` is useful if you have custom handlers creation. For example using an injector.\nBy default class handlers are instantiated with simple init:  `SomeRequestHandler()`. handlers or behaviors as functions are executed directly. \n\n\n## Using custom handler factory for handlers as classes\n\nIf your handlers registered as functions, it just executes them.\n\nIn case with handlers, declared as classes with method `handle` Mediator uses function, that instantiates handlers.\n\n```py\ndef default_handler_class_manager(HandlerCls:type,is_behavior:bool=False):\n    return HandlerCls()\n\n```\n\n\nFor example, if you want to instantiate them with dependency injector or custom, pass your own factory function to Mediator:\n\n```py\ndef my_class_handler_manager(handler_class, is_behavior=False):\n    \n    if is_behavior:\n        # custom logic\n        pass\n\n    return injector.get(handler_class)\n\nmediator = Mediator(handler_class_manager=my_class_handler_manager)\n\n```\nPS:\n\n\nThe `next` function in behavior is `async`, so if you want to take results or if your behavior is async, use `middle_results = await next()`\n\n\nHandler may be async too, if you need.\n\n## Using with generic typing support (version >= 1.2):\n\n```py\n\nfrom mediatr import Mediator, GenericQuery\n\n\nclass UserModel(BaseModel): # For example sqlalchemy ORM entity\n    id = Column(String,primary_key=True)\n    name = Column(String)\n\n\nclass FetchUserQuery(GenericQuery[UserModel])\n    def __init__(self,user_id:str):\n        self.user_id = user_id\n\n\nmediator = Mediator()\n\nrequest = FetchUserQuery(user_id = \"123456\")\n\nuser = mediator.send(request) # type of response will be a UserModel\n\n\n# -------------------------------------------------------------\n\n@Mediator.handler\nclass FetchUserQueryHandler():\n\n    def handle(self, request:FetchUserQuery):\n        db_session = Session() #sqlalchemy session\n        return db_session.query(UserModel).filter(UserModel.id == request.user_id).one()\n\n# or handler as simple function:\n@Mediator.handler\ndef fetch_user_query_handler(request:FetchUserQuery):\n    db_session = Session() #sqlalchemy session\n    return db_session.query(UserModel).filter(UserModel.id == request.user_id).one()\n\n\n```\n\nPlease give a star if the library is useful for you :smiley:\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "mediatr,mediator,flask-mediator,mediator-ez",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediatr-ez",
    "package_url": "https://pypi.org/project/mediatr-ez/",
    "platform": null,
    "project_url": "https://pypi.org/project/mediatr-ez/",
    "project_urls": {
      "Homepage": "https://github.com/vuanhkhoadev/mediatr_py_custom"
    },
    "release_url": "https://pypi.org/project/mediatr-ez/1.0.5/",
    "requires_dist": [
      "feedparser (>=5.2.0)",
      "html2text",
      "tomli ; python_version < \"3.11\"",
      "black ; extra == 'dev'",
      "bumpver ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pip-tools ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Mediator project",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14847930,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "377244d2031eceff33b7d75f5485f4c366a06a26c8937bb188f798ff2c871de4",
        "md5": "c609669fd050a84201e8536600579b96",
        "sha256": "626f33cdba4946fff44afc8199d944f42f1147aedc59f961c894e6302f43906e"
      },
      "downloads": -1,
      "filename": "mediatr_ez-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c609669fd050a84201e8536600579b96",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11024,
      "upload_time": "2022-08-18T09:48:01",
      "upload_time_iso_8601": "2022-08-18T09:48:01.945542Z",
      "url": "https://files.pythonhosted.org/packages/37/72/44d2031eceff33b7d75f5485f4c366a06a26c8937bb188f798ff2c871de4/mediatr_ez-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bfd4da39d4f8450e7f1792c52396a92c02b04b22a32cb995a4ae4c94252f14b",
        "md5": "41e6b44b395643a8379c20d39e276929",
        "sha256": "c25d563962a52342f794ebb66a6f252ba5db3015d4838b4b0166c7d061aee8b3"
      },
      "downloads": -1,
      "filename": "mediatr-ez-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "41e6b44b395643a8379c20d39e276929",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10028,
      "upload_time": "2022-08-18T09:48:04",
      "upload_time_iso_8601": "2022-08-18T09:48:04.231751Z",
      "url": "https://files.pythonhosted.org/packages/0b/fd/4da39d4f8450e7f1792c52396a92c02b04b22a32cb995a4ae4c94252f14b/mediatr-ez-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}