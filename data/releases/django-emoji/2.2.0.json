{
  "info": {
    "author": "Björn Andersson",
    "author_email": "ba@sanitarium.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "============\ndjango-emoji\n============\n\n.. image:: https://travis-ci.org/gaqzi/django-emoji.png?branch=master\n   :target: https://travis-ci.org/gaqzi/django-emoji\n\n.. image:: https://coveralls.io/repos/gaqzi/django-emoji/badge.png\n   :target: https://coveralls.io/r/gaqzi/django-emoji\n\n.. image:: https://img.shields.io/pypi/v/django-emoji.svg\n   :target: https://pypi.python.org/pypi/django-emoji/\n   :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/dm/django-emoji.svg\n   :target: https://pypi.python.org/pypi/django-emoji/\n   :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/pyversions/django-emoji.svg\n   :target: https://pypi.python.org/pypi/django-emoji/\n   :alt: Python versions\n\n.. image:: https://img.shields.io/pypi/status/django-emoji.svg\n   :target: https://pypi.python.org/pypi/django-emoji/\n   :alt: Package status\n\nEmoji is a port of the GitHub gem `gemoji`_ to Django.\n\nThis app got two main use cases:\n\n1. It'll try to replace items between :: with emojis, for instance ``: dog :`` (without the spaces) will become an emoji of a dog (:dog:).\n2. It'll try to replace unicode characters with emojis, for instance '✌️' with a victory symbol (:v:).\n\n.. _gemoji: https://github.com/github/gemoji\n\nVersion 2 release\n-----------------\n\nThanks to `Tim Schilling`_ we now have `autoescaping`_ enabled with the\nsame logic as core Django. Because this might be a breaking change for\nusers of this app the major version has been bumped. Apart from the\nfilters adds the standard XSS protection of Django there are no other\nchanges.\n\n.. _Tim Schilling: https://github.com/tim-schilling\n.. _autoescaping: https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-escape\n\nTo get the old behavior of the app wrap the filter like this::\n\n      {% autoescape off %}\n      {{ emoji|emoji_replace }}\n      {% endautoescape %}\n\nQuick start\n-----------\n\n1. Install `django-emoji <https://pypi.python.org/pypi/django-emoji>` from PyPi::\n\n      pip install django-emoji\n\n2. Add \"emoji\" to your INSTALLED_APPS setting like this::\n\n      INSTALLED_APPS = (\n          ...\n          'emoji',\n      )\n\n3. Include the emoji URLconf in your project urls.py like this if you want to be able to get a JSON list of emojis::\n\n      url(r'^emoji/', include('emoji.urls')),\n\n4. Visit http://127.0.0.1:8000/emoji/all.json to get a json object with all emojis avilable\n\nPython versions\n===============\n\nSupport for Django 1.5, 1.6, 1.7, 1.8 and 1.9 with their respective versions of Python 2/3 support.\n\nSettings\n========\n\nThese are settings that can be configured in your ``settings.py``:\n\n=============================== ========================================================\n        Settings name                 Description\n=============================== ========================================================\n``EMOJI_IMG_TAG``                The template string that is used for creating the <img>\n                                 tag when converting an emoji to an image. Default:\n                                 ``<img src=\"{0}\" alt=\"{1}\" title=\"{2}\" class=\"emoji\">``\n``EMOJI_ALT_AS_UNICODE``         Whether to put the unicode character that corresponds to\n                                 an emoji as the alt text in ``replace_unicode``.\n                                 Default: ``True``\n``EMOJI_REPLACE_HTML_ENTITIES``  Whether to automatically convert HTML encoded unicode\n                                 characters into emojis. Default: ``True``\n=============================== ========================================================\n\nUsage\n=====\n\nAPI\n----\n\nPython\n------\n\nThe Python class ``Emoji`` is a singleton and will return the same\ninstance between instantiations. On load Emoji will load the name of\nall the emojis and their unicode equivalents into memory.\n\n=================================================== ============================================\n               Call                                  Description\n=================================================== ============================================\n``Emoji.names()``                                   A list of all known emojis\n``Emoji.replace(replacement_string)``               Replaces all emojis between ``::``\n``Emoji.name_for(character)``                       The name for a given unicode character\n``Emoji.replace_unicode(replacement_string)``       Replaces all known unicode emojis\n``Emoji.replace_html_entities(replacement_string)`` Replaces all HTML encoded unicode characters\n=================================================== ============================================\n\nJavascript\n----------\n\nThe browser version caches all the emojis in ``localStorage`` so\nthere won't be that many roundtrips to the server just to get a list\nof the emojis.\n\n**NOTE**: Depends on jQuery or some other library that exports ``$.get``.\n\n==================================== ========================================\n               Call                                  Description\n==================================== ========================================\n``Emoji.setDataUrl(url)``            Where to fetch the list of all available emojis\n``Emoji.load()``                     Load all emojis from the server\n``Emoji.get(/*emoji*/)``             Get the URL to an emoji of a name or return the names of all known emojis\n``Emoji.replace(replacementString)`` Replace all ``::`` style emojis with images\n``Emoji.clear()``                    Empty the browser cache\n==================================== ========================================\n\nExamples\n--------\n\nReplace an emoji using Python templates by loading the tags in your template::\n\n      {% load emoji_tags %}\n      {{ blog_post.body|emoji_replace }}\n      {{ blog_post.body|emoji_replace_unicode }}\n      {{ blog_post.body|emoji_replace_html_entities }}\n\nReplace emojis using Javascript (to for instance show a preview before the user saves what it is they are writing)::\n\n      {% load emoji_tags %}\n\n      <script src=\"{% static 'emoji/js/emoji.js' %}\"></script>\n      {% emoji_load %}\n\n      Emoji.get('dog') // => url stub to dog emoji or falsy\n      Emoji.get() // => all emojis available\n\n      Emoji.replace(\"It's raining :cats: and :dogs:.\") // => It's raining <img src=\"...\" alt=\"cats\" class=\"emoji\"> and <img src=\"...\" alt=\"dogs\" class=\"emoji\">\n\nWhat ``emoji_load`` does is that it sets the endpoint to retrieve the listing of all the available emojis and thus only works if the emoji urls has been included.\n\nIt is the equivalent of doing::\n\n      Emoji.setDataUrl('{% url 'emoji:list.json' %}').load();\n\nWhich is also available as template stub::\n\n      {% include 'emoji/script.html' %}\n\nUsage from inside Python where the Emoji class mimics some of the behavior of a dict::\n\n      from emoji import Emoji\n      Emoji['dog'] # => url stub to dog emoji or None\n      'dog' in Emoji # => True\n      Emoji.keys() # => a list of all emojis by name\n      Emoji.replace(\"It's raining :cats: and :dogs:\") # => It's raining <img src=\"...\" alt=\"cats\" class=\"emoji\"> and <img src=\"...\" alt=\"dogs\" class=\"emoji\">\n\n\nReplacing unicode Emojis\n------------------------\n\nEmoji has the ability to give you the name of an emoji from a unicode\ncharacter. It can also replace every instance of emoji characters in a\nstring with their image replacements.\n\nUsage::\n\n      >>> from emoji import Emoji\n      >>> Emoji.name_for(u'\\U000148b')\n      kiss\n      >>> Emoji.replace_unicode(u'I send a \\U0001f48b!')\n      I send a <img src=\"/static/emoji/img/kiss.png\" alt=\"kiss\" class=\"emoji\">\n\n**Note**:\n\nFor best use of the unicode replacements use a build of Python that\nwas built with wide unicode character support. From version 1.2 there\nis code added for dealing with unicode surrogate pairs and it should\nwork well on narrow builds. But this has not been production tested so\ntry it out properly. Please report any bugs found.\n\nTo test whether you got a narrow or wide build of Python run the\nfollowing, if you get an exception it means you're running a narrow build.::\n\n      >>> print(unichr(0x0001f48b))\n      ValueError: unichr() arg not in range(0x10000) (narrow Python build)\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gaqzi/django-emoji/",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-emoji",
    "package_url": "https://pypi.org/project/django-emoji/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-emoji/",
    "project_urls": {
      "Homepage": "https://github.com/gaqzi/django-emoji/"
    },
    "release_url": "https://pypi.org/project/django-emoji/2.2.0/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "A simple django app to use emojis on your website",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4761878,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a597437f90adb8f4ac4f971fc1ad60398513e67535a5de4d3ff54a581f32aa6",
        "md5": "d9aebc25e7e52caba2418db6a02b8f0e",
        "sha256": "d8ac422ed2c53b0ce4be2a586632e5568fbcc154839272209478ec9c4394c024"
      },
      "downloads": -1,
      "filename": "django_emoji-2.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d9aebc25e7e52caba2418db6a02b8f0e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 4264035,
      "upload_time": "2016-07-06T11:33:31",
      "upload_time_iso_8601": "2016-07-06T11:33:31.518925Z",
      "url": "https://files.pythonhosted.org/packages/9a/59/7437f90adb8f4ac4f971fc1ad60398513e67535a5de4d3ff54a581f32aa6/django_emoji-2.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "17c8e10a4be23fbc45c27db57a6f2322bb4bea05a5e5c71e2037326edcd3198a",
        "md5": "300dbc929906b77af93be7f1735ab24f",
        "sha256": "a8620d9a6be6b57253366f8b1f919e2e72c2f1be5b85baa6e7b4f85843f1d413"
      },
      "downloads": -1,
      "filename": "django-emoji-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "300dbc929906b77af93be7f1735ab24f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3962228,
      "upload_time": "2016-07-06T11:33:49",
      "upload_time_iso_8601": "2016-07-06T11:33:49.399224Z",
      "url": "https://files.pythonhosted.org/packages/17/c8/e10a4be23fbc45c27db57a6f2322bb4bea05a5e5c71e2037326edcd3198a/django-emoji-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}