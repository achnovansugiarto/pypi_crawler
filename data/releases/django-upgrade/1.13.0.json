{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Typing :: Typed"
    ],
    "description": "==============\ndjango-upgrade\n==============\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/django-upgrade/main.yml?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-upgrade.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-upgrade/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nAutomatically upgrade your Django project code.\n\nInstallation\n============\n\nUse **pip**:\n\n.. code-block:: sh\n\n    python -m pip install django-upgrade\n\nPython 3.8 to 3.11 supported.\n\npre-commit hook\n---------------\n\nYou can also install django-upgrade as a `pre-commit <https://pre-commit.com/>`__ hook.\nAdd the following to the ``repos`` section of your ``.pre-commit-config.yaml`` file (`docs <https://pre-commit.com/#plugins>`__), above any code formatters (such as Black):\n\n.. code-block:: yaml\n\n    -   repo: https://github.com/adamchainz/django-upgrade\n        rev: \"\"  # replace with latest tag on GitHub\n        hooks:\n        -   id: django-upgrade\n            args: [--target-version, \"4.1\"]   # Replace with Django version\n\nThen, upgrade your entire project:\n\n.. code-block:: sh\n\n    pre-commit run django-upgrade --all-files\n\nCommit any changes.\nIn the process, your other hooks will run, potentially reformatting django-upgrade’s changes to match your project’s code style.\n\nKeep the hook installed in order to upgrade all code added to your project.\npre-commit’s ``autoupdate`` command will also let you take advantage of future django-upgrade features.\n\n----\n\n**Want to improve your code quality?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers using  pre-commit, django-upgrade, and many other tools.\nI wrote django-upgrade whilst working on the book!\n\n----\n\nUsage\n=====\n\n``django-upgrade`` is a commandline tool that rewrites files in place.\nPass your Django version as ``<major>.<minor>`` to the ``--target-version`` flag.\ndjango-upgrade will run all its fixers for versions up to and including the target version.\nThese fixers rewrite your code to avoid ``DeprecationWarning``\\s and use some new features.\n\nFor example:\n\n.. code-block:: sh\n\n    django-upgrade --target-version 4.1 example/core/models.py example/settings.py\n\nThe ``--target-version`` flag defaults to 2.2, the oldest supported version when this project was created.\nFor more on usage run ``django-upgrade --help``.\n\n``django-upgrade`` focuses on upgrading your code and not on making it look nice.\nRun django-upgrade before formatters like `Black <https://black.readthedocs.io/en/stable/>`__.\n\n``django-upgrade`` does not have any ability to recurse through directories.\nUse the pre-commit integration, globbing, or another technique for applying to many files.\nSome fixers depend on the names of containing directories to activate, so ensure you run djagno-upgrade with paths relative to the root of your project.\nFor example, |with git ls-files pipe xargs|_:\n\n.. |with git ls-files pipe xargs| replace:: with ``git ls-files | xargs``\n.. _with git ls-files pipe xargs: https://adamj.eu/tech/2022/03/09/how-to-run-a-command-on-many-files-in-your-git-repository/\n\n.. code-block:: sh\n\n    git ls-files -- '*.py' | xargs django-upgrade --target-version 4.1\n\n…or PowerShell’s |ForEach-Object|__:\n\n.. |ForEach-Object| replace:: ``ForEach-Object``\n__ https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/foreach-object\n\n.. code-block:: powershell\n\n    git ls-files -- '*.py' | %{django-upgrade --target-version 4.1 $_}\n\nThe full list of fixers is documented below.\n\nHistory\n=======\n\n`django-codemod <https://django-codemod.readthedocs.io/en/latest/>`__ is a pre-existing, more complete Django auto-upgrade tool, written by Bruno Alla.\nUnfortunately its underlying library `LibCST <https://pypi.org/project/libcst/>`__ is particularly slow, making it annoying to run django-codemod on every commit and in CI.\n\ndjango-upgrade is an experiment in reimplementing such a tool using the same techniques as the fantastic `pyupgrade <https://github.com/asottile/pyupgrade>`__.\nThe tool leans on the standard library’s `ast <https://docs.python.org/3/library/ast.html>`__ and `tokenize <https://docs.python.org/3/library/tokenize.html>`__ modules, the latter via the `tokenize-rt wrapper <https://github.com/asottile/tokenize-rt>`__.\nThis means it will always be fast and support the latest versions of Python.\n\nFor a quick benchmark: running django-codemod against a medium Django repository with 153k lines of Python takes 133 seconds.\npyupgrade and django-upgrade both take less than 0.5 seconds.\n\nFixers\n======\n\nAll Versions\n------------\n\nThe below fixers run regardless of the target version.\n\nVersioned blocks\n~~~~~~~~~~~~~~~~\n\nRemoves outdated comparisons and blocks from ``if`` statements comparing to ``django.VERSION``.\nSupports comparisons of the form:\n\n.. code-block:: text\n\n    if django.VERSION <comparator> (<X>, <Y>):\n        ...\n\nWhere ``<comparator>`` is one of ``<``, ``<=`` , ``>``, or ``>=``, and ``<X>`` and ``<Y>`` are integer literals.\nA single ``else`` block may be present, but ``elif`` is not supported.\n\n.. code-block:: diff\n\n    -if django.VERSION < (4, 1):\n    -    class RenameIndex:\n    -        ...\n\n    -if django.VERSION >= (4, 1):\n    -    constraint.validate()\n    -else:\n    -    custom_validation(constraint)\n    +constraint.validate()\n\nSee also `pyupgrade’s similar feature <https://github.com/asottile/pyupgrade/#python2-and-old-python3x-blocks>`__ that removes outdated code from checks on the Python version.\n\nDjango 1.7\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/stable/releases/1.7/>`__\n\nAdmin model registration\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites ``admin.site.register()`` calls to the new |@admin.register|_ decorator syntax when eligible.\nThis only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``.\n\n.. |@admin.register| replace:: ``@admin.register()``\n.. _@admin.register: https://docs.djangoproject.com/en/stable/ref/contrib/admin/#the-register-decorator\n\n.. code-block:: diff\n\n     from django.contrib import admin\n\n    +@admin.register(MyModel1, MyModel2)\n     class MyCustomAdmin(admin.ModelAdmin):\n         ...\n\n    -admin.site.register(MyModel1, MyCustomAdmin)\n    -admin.site.register(MyModel2, MyCustomAdmin)\n\nThis also works with custom admin sites.\nSuch calls are detected heuristically based on three criteria:\n\n1. The object whose ``register()`` method is called has a name ending with ``site``.\n2. The registered class has a name ending with ``Admin``.\n3. The filename has the word ``admin`` somewhere in its path.\n\n.. code-block:: diff\n\n    from myapp.admin import custom_site\n    from django.contrib import admin\n\n    +@admin.register(MyModel)\n    +@admin.register(MyModel, site=custom_site)\n    class MyModelAdmin(admin.ModelAdmin):\n        pass\n\n    -custom_site.register(MyModel, MyModelAdmin)\n    -admin.site.register(MyModel, MyModelAdmin)\n\nIf a ``register()`` call is preceded by an ``unregister()`` call that includes the same model, it is ignored.\n\n.. code-block:: python\n\n    from django.contrib import admin\n\n\n    class MyCustomAdmin(admin.ModelAdmin):\n        ...\n\n\n    admin.site.unregister(MyModel1)\n    admin.site.register(MyModel1, MyCustomAdmin)\n\nDjango 1.9\n-----------\n\n`Release Notes <https://docs.djangoproject.com/en/stable/releases/1.9/>`__\n\n``on_delete`` argument\n~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``on_delete=models.CASCADE`` to ``ForeignKey`` and ``OneToOneField``:\n\n.. code-block:: diff\n\n     from django.db import models\n\n    -models.ForeignKey(\"auth.User\")\n    +models.ForeignKey(\"auth.User\", on_delete=models.CASCADE)\n\n    -models.OneToOneField(\"auth.User\")\n    +models.OneToOneField(\"auth.User\", on_delete=models.CASCADE)\n\nThis fixer also support from-imports:\n\n.. code-block:: diff\n\n    -from django.db.models import ForeignKey\n    +from django.db.models import CASCADE, ForeignKey\n\n    -ForeignKey(\"auth.User\")\n    +ForeignKey(\"auth.User\", on_delete=CASCADE)\n\n``DATABASES``\n~~~~~~~~~~~~~\n\nUpdate the ``DATABASES`` setting backend path ``django.db.backends.postgresql_psycopg2`` to use the renamed version ``django.db.backends.postgresql``.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    DATABASES = {\n        \"default\": {\n   -        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n   +        \"ENGINE\": \"django.db.backends.postgresql\",\n            \"NAME\": \"mydatabase\",\n            \"USER\": \"mydatabaseuser\",\n            \"PASSWORD\": \"mypassword\",\n            \"HOST\": \"127.0.0.1\",\n            \"PORT\": \"5432\",\n        }\n    }\n\nCompatibility imports\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites some compatibility imports:\n\n* ``django.forms.utils.pretty_name`` in ``django.forms.forms``\n* ``django.forms.boundfield.BoundField`` in ``django.forms.forms``\n\nWhilst mentioned in the `Django 3.1 release notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#id1>`_, these have been possible since Django 1.9.\n\n.. code-block:: diff\n\n    -from django.forms.forms import pretty_name\n    +from django.forms.utils import pretty_name\n\nDjango 1.11\n-----------\n\n`Release Notes <https://docs.djangoproject.com/en/1.11/releases/1.11/>`__\n\nCompatibility imports\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites some compatibility imports:\n\n* ``django.core.exceptions.EmptyResultSet`` in ``django.db.models.query``, ``django.db.models.sql``, and ``django.db.models.sql.datastructures``\n* ``django.core.exceptions.FieldDoesNotExist`` in ``django.db.models.fields``\n\nWhilst mentioned in the `Django 3.1 release notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#id1>`_, these have been possible since Django 1.11.\n\n.. code-block:: diff\n\n    -from django.db.models.query import EmptyResultSet\n    +from django.core.exceptions import EmptyResultSet\n\n    -from django.db.models.fields import FieldDoesNotExist\n    +from django.core.exceptions import FieldDoesNotExist\n\nDjango 2.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/2.0/releases/2.0/>`__\n\nURL’s\n~~~~~\n\nRewrites imports of ``include()`` and ``url()`` from ``django.conf.urls`` to ``django.urls``.\n``url()`` calls using compatible regexes are rewritten to the |new path() syntax|_, otherwise they are converted to call ``re_path()``.\n\n.. |new path() syntax| replace:: new ``path()`` syntax\n.. _new path() syntax: https://docs.djangoproject.com/en/2.0/releases/2.0/#simplified-url-routing-syntax\n\n.. code-block:: diff\n\n    -from django.conf.urls import include, url\n    +from django.urls import include, path, re_path\n\n     urlpatterns = [\n    -    url(r'^$', views.index, name='index'),\n    +    path('', views.index, name='index'),\n    -    url(r'^about/$', views.about, name='about'),\n    +    path('about/', views.about, name='about'),\n    -    url(r'^post/(?P<slug>[-a-zA-Z0-9_]+)/$', views.post, name='post'),\n    +    path('post/<slug:slug>/', views.post, name='post'),\n    -    url(r'^weblog', include('blog.urls')),\n    +    re_path(r'^weblog', include('blog.urls')),\n     ]\n\nExisting ``re_path()`` calls are also rewritten to the ``path()`` syntax when eligible.\n\n.. code-block:: diff\n\n    -from django.urls import include, re_path\n    +from django.urls import include, path, re_path\n\n     urlpatterns = [\n    -    re_path(r'^about/$', views.about, name='about'),\n    +    path('about/', views.about, name='about'),\n         re_path(r'^post/(?P<slug>[\\w-]+)/$', views.post, name='post'),\n     ]\n\nThe compatible regexes that will be converted to use `path converters <https://docs.djangoproject.com/en/stable/topics/http/urls/#path-converters>`__ are the following:\n\n* ``[^/]+`` → ``str``\n* ``[0-9]+`` → ``int``\n* ``[-a-zA-Z0-9_]+`` → ``slug``\n* ``[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}`` → ``uuid``\n* ``.+`` → ``path``\n\nThese are taken from the path converter classes.\n\nFor some cases, this change alters the type of the arguments passed to the view, from ``str`` to the converted type (e.g. ``int``).\nThis is not guaranteed backwards compatible: there is a chance that the view expects a string, rather than the converted type.\nBut, pragmatically, it seems 99.9% of views do not require strings, and instead work with either strings or the converted type.\nThus, you should test affected paths after this fixer makes any changes.\n\nNote that ``[\\w-]`` is sometimes used for slugs, but is not converted because it might be incompatible.\nThat pattern matches all Unicode word characters, such as “α”, unlike Django's ``slug`` converter, which only matches Latin characters.\n\n``lru_cache``\n~~~~~~~~~~~~~\n\nRewrites imports of ``lru_cache`` from ``django.utils.functional`` to use ``functools``.\n\n.. code-block:: diff\n\n    -from django.utils.functional import lru_cache\n    +from functools import lru_cache\n\n``<func>.allow_tags = True``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRemoves assignments of ``allow_tags`` attributes to ``True``.\nThis was an admin feature to allow display functions to return HTML without marking it as unsafe,  deprecated in Django 1.9.\nIn practice, most display functions that return HTML already use |format_html()|_ or similar, so the attribute wasn’t necessary.\nThis only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``.\n\n.. |format_html()| replace:: ``format_html()``\n.. _format_html(): https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.html.format_html\n\n.. code-block:: diff\n\n    from django.contrib import admin\n\n    def upper_case_name(obj):\n        ...\n\n   -upper_case_name.allow_tags = True\n\nDjango 2.2\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/2.2/releases/2.2/>`__\n\n``HttpRequest.headers``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites use of ``request.META`` to read HTTP headers to instead use |request.headers|_.\nHeader lookups are done in lowercase per `the HTTP/2 specification <https://httpwg.org/specs/rfc9113.html#HttpHeaders>`__.\n\n.. |request.headers| replace:: ``request.headers``\n.. _request.headers: https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.headers\n\n.. code-block:: diff\n\n    -request.META['HTTP_ACCEPT_ENCODING']\n    +request.headers['accept-encoding']\n\n    -self.request.META.get('HTTP_SERVER', '')\n    +self.request.headers.get('server', '')\n\n    -request.META.get('CONTENT_LENGTH')\n    +request.headers.get('content-length')\n\n    -\"HTTP_SERVER\" in request.META\n    +\"server\" in request.headers\n\n``QuerySetPaginator``\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites deprecated alias ``django.core.paginator.QuerySetPaginator`` to ``Paginator``.\n\n.. code-block:: diff\n\n    -from django.core.paginator import QuerySetPaginator\n    +from django.core.paginator import Paginator\n\n    -QuerySetPaginator(...)\n    +Paginator(...)\n\n\n``FixedOffset``\n~~~~~~~~~~~~~~~\n\nRewrites deprecated class ``FixedOffset(x, y))`` to ``timezone(timedelta(minutes=x), y)``\n\nKnown limitation: this fixer will leave code broken with an ``ImportError`` if ``FixedOffset`` is called with only ``*args`` or ``**kwargs``.\n\n.. code-block:: diff\n\n    -from django.utils.timezone import FixedOffset\n    -FixedOffset(120, \"Super time\")\n    +from datetime import timedelta, timezone\n    +timezone(timedelta(minutes=120), \"Super time\")\n\n``FloatRangeField``\n~~~~~~~~~~~~~~~~~~~\n\nRewrites model and form fields using ``FloatRangeField`` to ``DecimalRangeField``, from the relevant ``django.contrib.postgres`` modules.\n\n.. code-block:: diff\n\n     from django.db.models import Model\n    -from django.contrib.postgres.fields import FloatRangeField\n    +from django.contrib.postgres.fields import DecimalRangeField\n\n     class MyModel(Model):\n    -    my_field = FloatRangeField(\"My range of numbers\")\n    +    my_field = DecimalRangeField(\"My range of numbers\")\n\n``TestCase`` class database declarations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``allow_database_queries`` and ``multi_db`` attributes of Django’s ``TestCase`` classes to the new ``databases`` attribute.\nThis only applies in test files, which are heuristically detected as files with either “test” or “tests” somewhere in their path.\n\nNote that this will only rewrite to ``databases = []`` or ``databases = \"__all__\"``.\nWith multiple databases you can save some test time by limiting test cases to the databases they require (which is why Django made the change).\n\n.. code-block:: diff\n\n     from django.test import SimpleTestCase\n\n     class MyTests(SimpleTestCase):\n    -    allow_database_queries = True\n    +    databases = \"__all__\"\n\n         def test_something(self):\n             self.assertEqual(2 * 2, 4)\n\nDjango 3.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.0/releases/3.0/>`__\n\n``django.utils.encoding`` aliases\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites ``smart_text()`` to ``smart_str()``, and ``force_text()`` to ``force_str()``.\n\n.. code-block:: diff\n\n    -from django.utils.encoding import force_text, smart_text\n    +from django.utils.encoding import force_str, smart_str\n\n\n    -force_text(\"yada\")\n    -smart_text(\"yada\")\n    +force_str(\"yada\")\n    +smart_str(\"yada\")\n\n``django.utils.http`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``urlquote()``, ``urlquote_plus()``, ``urlunquote()``, and ``urlunquote_plus()`` functions to the ``urllib.parse`` versions.\nAlso rewrites the internal function ``is_safe_url()`` to ``url_has_allowed_host_and_scheme()``.\n\n.. code-block:: diff\n\n    -from django.utils.http import urlquote\n    +from urllib.parse import quote\n\n    -escaped_query_string = urlquote(query_string)\n    +escaped_query_string = quote(query_string)\n\n``django.utils.text`` deprecation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites ``unescape_entities()`` with the standard library ``html.escape()``.\n\n.. code-block:: diff\n\n    -from django.utils.text import unescape_entities\n    +import html\n\n    -unescape_entities(\"some input string\")\n    +html.escape(\"some input string\")\n\n``django.utils.translation`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``ugettext()``, ``ugettext_lazy()``, ``ugettext_noop()``, ``ungettext()``, and ``ungettext_lazy()`` functions to their non-u-prefixed versions.\n\n.. code-block:: diff\n\n    -from django.utils.translation import ugettext as _, ungettext\n    +from django.utils.translation import gettext as _, ngettext\n\n    -ungettext(\"octopus\", \"octopodes\", n)\n    +ngettext(\"octopus\", \"octopodes\", n)\n\nDjango 3.1\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.1/releases/3.1/>`__\n\n``JSONField``\n~~~~~~~~~~~~~\n\nRewrites imports of ``JSONField`` and related transform classes from those in ``django.contrib.postgres`` to the new all-database versions.\nIgnores usage in migration files, since Django kept the old class around to support old migrations.\nYou will need to make migrations after this fix makes changes to models.\n\n.. code-block:: diff\n\n    -from django.contrib.postgres.fields import JSONField\n    +from django.db.models import JSONField\n\n``PASSWORD_RESET_TIMEOUT_DAYS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the setting ``PASSWORD_RESET_TIMEOUT_DAYS`` to ``PASSWORD_RESET_TIMEOUT``, adding the multiplication by the number of seconds in a day.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    -PASSWORD_RESET_TIMEOUT_DAYS = 4\n    +PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 4\n\n``Signal``\n~~~~~~~~~~\n\nRemoves the deprecated documentation-only ``providing_args`` argument.\n\n.. code-block:: diff\n\n     from django.dispatch import Signal\n    -my_cool_signal = Signal(providing_args=[\"documented\", \"arg\"])\n    +my_cool_signal = Signal()\n\n``get_random_string``\n~~~~~~~~~~~~~~~~~~~~~\n\nInjects the now-required ``length`` argument, with its previous default ``12``.\n\n.. code-block:: diff\n\n     from django.utils.crypto import get_random_string\n    -key = get_random_string(allowed_chars=\"01234567899abcdef\")\n    +key = get_random_string(length=12, allowed_chars=\"01234567899abcdef\")\n\n``NullBooleanField``\n~~~~~~~~~~~~~~~~~~~~\n\nTransforms the ``NullBooleanField()`` model field to ``BooleanField(null=True)``.\nIgnores usage in migration files, since Django kept the old class around to support old migrations.\nYou will need to make migrations after this fix makes changes to models.\n\n.. code-block:: diff\n\n    -from django.db.models import Model, NullBooleanField\n    +from django.db.models import Model, BooleanField\n\n     class Book(Model):\n    -    valuable = NullBooleanField(\"Valuable\")\n    +    valuable = BooleanField(\"Valuable\", null=True)\n\n``ModelMultipleChoiceField``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReplace ``list`` error message key with ``list_invalid`` on forms ``ModelMultipleChoiceField``.\n\n.. code-block:: diff\n\n    -forms.ModelMultipleChoiceField(error_messages={\"list\": \"Enter multiple values.\"})\n    +forms.ModelMultipleChoiceField(error_messages={\"invalid_list\": \"Enter multiple values.\"})\n\nDjango 3.2\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.2/releases/3.2/>`__\n\n``@admin.action()``\n~~~~~~~~~~~~~~~~~~~\n\nRewrites functions that have admin action attributes assigned to them to use the new |@admin.action decorator|_.\nThis only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``.\n\n.. |@admin.action decorator| replace:: ``@admin.action()`` decorator\n.. _@admin.action decorator: https://docs.djangoproject.com/en/stable/ref/contrib/admin/actions/#django.contrib.admin.action\n\n.. code-block:: diff\n\n     from django.contrib import admin\n\n     # Module-level actions:\n\n    +@admin.action(\n    +    description=\"Publish articles\",\n    +)\n     def make_published(modeladmin, request, queryset):\n         ...\n\n    -make_published.short_description = \"Publish articles\"\n\n     # …and within classes:\n\n     @admin.register(Book)\n     class BookAdmin(admin.ModelAdmin):\n    +    @admin.action(\n    +        description=\"Unpublish articles\",\n    +        permissions=(\"unpublish\",),\n    +    )\n         def make_unpublished(self, request, queryset):\n             ...\n\n    -    make_unpublished.allowed_permissions = (\"unpublish\",)\n    -    make_unpublished.short_description = \"Unpublish articles\"\n\n``@admin.display()``\n~~~~~~~~~~~~~~~~~~~~\n\nRewrites functions that have admin display attributes assigned to them to use the new |@admin.display decorator|_.\nThis only applies in files that use ``from django.contrib import admin`` or ``from django.contrib.gis import admin``.\n\n.. |@admin.display decorator| replace:: ``@admin.display()`` decorator\n.. _@admin.display decorator: https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.display\n\n.. code-block:: diff\n\n     from django.contrib import admin\n\n     # Module-level display functions:\n\n    +@admin.display(\n    +    description=\"NAME\",\n    +)\n     def upper_case_name(obj):\n         ...\n\n    -upper_case_name.short_description = \"NAME\"\n\n     # …and within classes:\n\n     @admin.register(Book)\n     class BookAdmin(admin.ModelAdmin):\n    +    @admin.display(\n    +        description='Is Published?',\n    +        boolean=True,\n    +        ordering='-publish_date',\n    +    )\n         def is_published(self, obj):\n             ...\n\n    -    is_published.boolean = True\n    -    is_published.admin_order_field = '-publish_date'\n    -    is_published.short_description = 'Is Published?'\n\n``BaseCommand.requires_system_checks``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``requires_system_checks`` attributes of management command classes from bools to ``\"__all__\"`` or ``[]`` as appropriate.\nThis only applies in command files, which are heuristically detected as files with ``management/commands`` somewhere in their path.\n\n.. code-block:: diff\n\n     from django.core.management.base import BaseCommand\n\n     class Command(BaseCommand):\n    -    requires_system_checks = True\n    +    requires_system_checks = \"__all__\"\n\n     class SecondCommand(BaseCommand):\n    -    requires_system_checks = False\n    +    requires_system_checks = []\n\n``EmailValidator``\n~~~~~~~~~~~~~~~~~~\n\nRewrites the ``whitelist`` keyword argument to its new name ``allowlist``.\n\n.. code-block:: diff\n\n     from django.core.validators import EmailValidator\n\n    -EmailValidator(whitelist=[\"example.com\"])\n    +EmailValidator(allowlist=[\"example.com\"])\n\n``default_app_config``\n~~~~~~~~~~~~~~~~~~~~~~\n\nRemoves module-level ``default_app_config`` assignments from ``__init__.py`` files:\n\n.. code-block:: diff\n\n    -default_app_config = 'my_app.apps.AppConfig'\n\nDjango 4.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/4.0/releases/4.0/>`__\n\n``USE_L10N``\n~~~~~~~~~~~~\n\nRemoves the deprecated ``USE_L10N`` setting if set to its default value of ``True``.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    -USE_L10N = True\n\n``lookup_needs_distinct``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRenames the undocumented ``django.contrib.admin.utils.lookup_needs_distinct`` to ``lookup_spawns_duplicates``:\n\n.. code-block:: diff\n\n    -from django.contrib.admin.utils import lookup_needs_distinct\n    +from django.contrib.admin.utils import lookup_spawns_duplicates\n\n    -if lookup_needs_distinct(self.opts, search_spec):\n    +if lookup_spawns_duplicates(self.opts, search_spec):\n        ...\n\nDjango 4.1\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/4.1/releases/4.1/>`__\n\n``django.utils.timezone.utc`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites imports of ``django.utils.timezone.utc`` to use ``datetime.timezone.utc``.\nRequires an existing import of the ``datetime`` module.\n\n.. code-block:: diff\n\n     import datetime\n    -from django.utils.timezone import utc\n\n    -calculate_some_datetime(utc)\n    +calculate_some_datetime(datetime.timezone.utc)\n\n.. code-block:: diff\n\n     import datetime as dt\n     from django.utils import timezone\n\n\n    -do_a_thing(timezone.utc)\n    +do_a_thing(dt.timezone.utc)\n\n``assertFormError()`` and ``assertFormsetError()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites calls to these test case methods from the old signatures to the new ones.\n\n.. code-block:: diff\n\n    -self.assertFormError(response, \"form\", \"username\", [\"Too long\"])\n    +self.assertFormError(response.context[\"form\"], \"username\", [\"Too long\"])\n\n    -self.assertFormError(response, \"form\", \"username\", None)\n    +self.assertFormError(response.context[\"form\"], \"username\", [])\n\n    -self.assertFormsetError(response, \"formset\", 0, \"username\", [\"Too long\"])\n    +self.assertFormsetError(response.context[\"formset\"], 0, \"username\", [\"Too long\"])\n\n    -self.assertFormsetError(response, \"formset\", 0, \"username\", None)\n    +self.assertFormsetError(response.context[\"formset\"], 0, \"username\", [])\n\nDjango 4.2\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/4.2/releases/4.2/>`__\n\n``STORAGES`` setting\n~~~~~~~~~~~~~~~~~~~~\n\nCombines deprecated settings ``DEFAULT_FILE_STORAGE`` and ``STATICFILES_STORAGE`` into the new ``STORAGES`` setting, within settings files.\nOnly applies if all old settings are defined as strings, at module level, and a ``STORAGES`` setting hasn’t been defined.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    -DEFAULT_FILE_STORAGE = \"example.storages.ExtendedFileSystemStorage\"\n    -STATICFILES_STORAGE = \"example.storages.ExtendedS3Storage\"\n    +STORAGES = {\n    +    \"default\": {\n    +        \"BACKEND\": \"example.storages.ExtendedFileSystemStorage\",\n    +    },\n    +    \"staticfiles\": {\n    +        \"BACKEND\": \"example.storages.ExtendedS3Storage\",\n    +    },\n    +}\n\nIf the module has a ``from ... import *`` with a module path mentioning “settings”, django-upgrade makes an educated guess that a base ``STORAGES`` setting is imported from there.\nIt then uses ``**`` to extend that with any values in the current module:\n\n.. code-block:: diff\n\n     from example.settings.base import *\n    -DEFAULT_FILE_STORAGE = \"example.storages.S3Storage\"\n    +STORAGES = {\n    +    **STORAGES,\n    +    \"default\": {\n    +        \"BACKEND\": \"example.storages.S3Storage\",\n    +    },\n    +}\n\nTest client HTTP headers\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTransforms HTTP headers from the old WSGI kwarg format to use the new ``headers`` dictionary, for:\n\n* ``Client`` method like ``self.client.get()``\n* ``Client`` instantiation\n* ``RequestFactory`` instantiation\n\nRequires Python 3.9+ due to changes in ``ast.keyword``.\n\n.. code-block:: diff\n\n    -response = self.client.get(\"/\", HTTP_ACCEPT=\"text/plain\")\n    +response = self.client.get(\"/\", headers={\"accept\": \"text/plain\"})\n\n     from django.test import Client\n    -Client(HTTP_ACCEPT_LANGUAGE=\"fr-fr\")\n    +Client(headers={\"accept-language\": \"fr-fr\"})\n\n     from django.test import RequestFactory\n    -RequestFactory(HTTP_USER_AGENT=\"curl\")\n    +RequestFactory(headers={\"user-agent\": \"curl\"})\n\n``assertFormsetError`` and ``assertQuerysetEqual``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites calls to these test case methods from the old names to the new ones with capitalized “Set”.\n\n.. code-block:: diff\n\n    -self.assertFormsetError(response.context[\"form\"], \"username\", [\"Too long\"])\n    +self.assertFormSetError(response.context[\"form\"], \"username\", [\"Too long\"])\n\n    -self.assertQuerysetEqual(authors, [\"Brad Dayley\"], lambda a: a.name)\n    +self.assertQuerySetEqual(authors, [\"Brad Dayley\"], lambda a: a.name)\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-upgrade",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-upgrade",
    "package_url": "https://pypi.org/project/django-upgrade/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-upgrade/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-upgrade/blob/main/CHANGELOG.rst",
      "Homepage": "https://github.com/adamchainz/django-upgrade",
      "Mastodon": "https://fosstodon.org/@adamchainz",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-upgrade/1.13.0/",
    "requires_dist": [
      "tokenize-rt (>=4.1.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Automatically upgrade your Django project code.",
    "version": "1.13.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16904361,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0ea91400b7ec06a6043f37e7b6efe60c6236d4a2dbb3f5ae03461577a013038",
        "md5": "0496e87e6c842e0df32a4245ac3f14b3",
        "sha256": "a313563ca690cee81f13a3f8ea7718dad0a4dc09012af25de0fd1056296ed369"
      },
      "downloads": -1,
      "filename": "django_upgrade-1.13.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0496e87e6c842e0df32a4245ac3f14b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 59311,
      "upload_time": "2023-02-17T15:36:06",
      "upload_time_iso_8601": "2023-02-17T15:36:06.920950Z",
      "url": "https://files.pythonhosted.org/packages/e0/ea/91400b7ec06a6043f37e7b6efe60c6236d4a2dbb3f5ae03461577a013038/django_upgrade-1.13.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d9f1671a1b8d578dc8aa5dea2a8d93fb9954360cdd3c5305a519324f6b7a013",
        "md5": "cac441b051340efbe563b94d42f21f32",
        "sha256": "4054a225e12a768347790cfbeb9ea141c71fe5c74b29a8ccd5ea3fd97c8fa705"
      },
      "downloads": -1,
      "filename": "django_upgrade-1.13.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cac441b051340efbe563b94d42f21f32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 51905,
      "upload_time": "2023-02-17T15:36:09",
      "upload_time_iso_8601": "2023-02-17T15:36:09.884974Z",
      "url": "https://files.pythonhosted.org/packages/1d/9f/1671a1b8d578dc8aa5dea2a8d93fb9954360cdd3c5305a519324f6b7a013/django_upgrade-1.13.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}