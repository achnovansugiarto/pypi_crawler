{
  "info": {
    "author": "Adam Johnson",
    "author_email": "me@adamj.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "==============\ndjango-upgrade\n==============\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/django-upgrade/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI\n\n.. image:: https://img.shields.io/badge/Coverage-100%25-success?style=for-the-badge\n  :target: https://github.com/adamchainz/django-upgrade/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/django-upgrade.svg?style=for-the-badge\n   :target: https://pypi.org/project/django-upgrade/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nAutomatically upgrade your Django projects.\n\nInstallation\n============\n\nUse **pip**:\n\n.. code-block:: sh\n\n    python -m pip install django-upgrade\n\nPython 3.8 to 3.11 supported.\n\nOr with `pre-commit <https://pre-commit.com/>`__ in the ``repos`` section of your ``.pre-commit-config.yaml`` file (`docs <https://pre-commit.com/#plugins>`__):\n\n.. code-block:: yaml\n\n    -   repo: https://github.com/adamchainz/django-upgrade\n        rev: ''  # replace with latest tag on GitHub\n        hooks:\n        -   id: django-upgrade\n            args: [--target-version, \"4.1\"]   # Replace with Django version\n\n----\n\n**Want to improve your code quality?**\nCheck out my book `Boost Your Django DX <https://adamchainz.gumroad.com/l/byddx>`__ which covers using  pre-commit, django-upgrade, and many other tools.\nI wrote django-upgrade whilst working on the book!\n\n----\n\nUsage\n=====\n\n``django-upgrade`` is a commandline tool that rewrites files in place.\nPass your Django version as ``<major>.<minor>`` to the ``--target-version`` flag.\nThe built-in fixers will rewrite your code to avoid some ``DeprecationWarning``\\s and use some new features on your Django version.\nFor example:\n\n.. code-block:: sh\n\n    django-upgrade --target-version 4.1 example/core/models.py example/settings.py\n\nThe ``--target-version`` flag defaults to 2.2, the oldest supported version when this project was created.\nFor more on usage run ``django-upgrade --help``.\n\n``django-upgrade`` focuses on upgrading your code and not on making it look nice.\nRun django-upgrade before formatters like `Black <https://black.readthedocs.io/en/stable/>`__.\n\n``django-upgrade`` does not have any ability to recurse through directories.\nUse the pre-commit integration, globbing, or another technique for applying to many files such as |with git ls-files pipe xargs|__.\n\n.. |with git ls-files pipe xargs| replace:: with ``git ls-files | xargs``\n__ https://adamj.eu/tech/2022/03/09/how-to-run-a-command-on-many-files-in-your-git-repository/\n\nThe full list of fixers is documented below.\n\nHistory\n=======\n\n`django-codemod <https://django-codemod.readthedocs.io/en/latest/>`__ is a pre-existing, more complete Django auto-upgrade tool, written by Bruno Alla.\nUnfortunately its underlying library `LibCST <https://pypi.org/project/libcst/>`__ is particularly slow, making it annoying to run django-codemod on every commit and in CI.\n\ndjango-upgrade is an experiment in reimplementing such a tool using the same techniques as the fantastic `pyupgrade <https://github.com/asottile/pyupgrade>`__.\nThe tool leans on the standard library’s `ast <https://docs.python.org/3/library/ast.html>`__ and `tokenize <https://docs.python.org/3/library/tokenize.html>`__ modules, the latter via the `tokenize-rt wrapper <https://github.com/asottile/tokenize-rt>`__.\nThis means it will always be fast and support the latest versions of Python.\n\nFor a quick benchmark: running django-codemod against a medium Django repository with 153k lines of Python takes 133 seconds.\npyupgrade and django-upgrade both take less than 0.5 seconds.\n\nFixers\n======\n\nAll Versions\n------------\n\nThe below fixers run regardless of the target version.\n\nVersioned blocks\n~~~~~~~~~~~~~~~~\n\nRemoves outdated comparisons and blocks from ``if`` statements comparing to ``django.VERSION``.\nSupports comparisons of the form:\n\n.. code-block:: text\n\n    if django.VERSION <comparator> (<X>, <Y>):\n        ...\n\nWhere ``<comparator>`` is one of ``<``, ``<=`` , ``>``, or ``>=``, and ``<X>`` and ``<Y>`` are integer literals.\nA single ``else`` block may be present, but ``elif`` is not supported.\n\n.. code-block:: diff\n\n    -if django.VERSION < (4, 1):\n    -    class RenameIndex:\n    -        ...\n\n    -if django.VERSION >= (4, 1):\n    -    constraint.validate()\n    -else:\n    -    custom_validation(constraint)\n    +constraint.validate()\n\nSee also `pyupgrade’s similar feature <https://github.com/asottile/pyupgrade/#python2-and-old-python3x-blocks>`__ that removes outdated code from checks on the Python version.\n\nDjango 1.9\n-----------\n\n`Release Notes <https://github.com/django/django/blob/main/docs/releases/1.9.txt>`__\n\n``on_delete`` argument\n~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``on_delete=models.CASCADE`` to ``ForeignKey`` and ``OneToOneField``:\n\n.. code-block:: diff\n\n    -models.ForeignKey(\"auth.User\")\n    +models.ForeignKey(\"auth.User\", on_delete=models.CASCADE)\n\n    -models.OneToOneField(\"auth.User\")\n    +models.OneToOneField(\"auth.User\", on_delete=models.CASCADE)\n\nCompatibility imports\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites some compatibility imports:\n\n* ``django.forms.utils.pretty_name`` in ``django.forms.forms``\n* ``django.forms.boundfield.BoundField`` in ``django.forms.forms``\n\nWhilst mentioned in the `Django 3.1 release notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#id1>`_, these have been possible since Django 1.9.\n\n.. code-block:: diff\n\n    -from django.forms.forms import pretty_name\n    +from django.forms.utils import pretty_name\n\nDjango 1.11\n-----------\n\n`Release Notes <https://docs.djangoproject.com/en/1.11/releases/1.11/#features-deprecated-in-1-11>`__\n\nCompatibility imports\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites some compatibility imports:\n\n* ``django.core.exceptions.EmptyResultSet`` in ``django.db.models.query``, ``django.db.models.sql``, and ``django.db.models.sql.datastructures``\n* ``django.core.exceptions.FieldDoesNotExist`` in ``django.db.models.fields``\n\nWhilst mentioned in the `Django 3.1 release notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#id1>`_, these have been possible since Django 1.11.\n\n.. code-block:: diff\n\n    -from django.db.models.query import EmptyResultSet\n    +from django.core.exceptions import EmptyResultSet\n\n    -from django.db.models.fields import FieldDoesNotExist\n    +from django.core.exceptions import FieldDoesNotExist\n\nDjango 2.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/2.0/releases/2.0/#features-deprecated-in-2-0>`__\n\nURL’s\n~~~~~\n\nRewrites imports of ``include()`` and ``url()`` from ``django.conf.urls`` to ``django.urls``.\n``url()`` calls using compatible regexes are rewritten to the |new path() syntax|__, otherwise they are converted to call ``re_path()``.\n\n.. |new path() syntax| replace:: new ``path()`` syntax\n__ https://docs.djangoproject.com/en/2.0/releases/2.0/#simplified-url-routing-syntax\n\nFor some cases, this change alters the type of the arguments passed to the view, from ``str`` to the converted type (e.g. ``int``).\nThis is not guaranteed backwards compatible: there is a chance that the view expects a string, rather than the converted type.\nBut, pragmatically, it seems 99.9% of views do not require strings, and instead work with either strings or the converted type.\nThus, you should test affected paths after this fixer makes any changes.\n\n.. code-block:: diff\n\n    -from django.conf.urls import include, url\n    +from django.urls import include, path, re_path\n\n     urlpatterns = [\n    -    url(r'^$', views.index, name='index'),\n    +    path('', views.index, name='index'),\n    -    url(r'^about/$', views.about, name='about'),\n    +    path('about/', views.about, name='about'),\n    -    url(r'^post/(?P<slug>[-a-zA-Z0-9_]+)/$', views.post, name='post'),\n    +    path('post/<slug:slug>/', views.post, name='post'),\n    -    url(r'^weblog', include('blog.urls')),\n    +    re_path(r'^weblog', include('blog.urls')),\n     ]\n\nExisting ``re_path()`` calls are also rewritten to the ``path()`` syntax when eligible.\n\n.. code-block:: diff\n\n    -from django.urls import include, re_path\n    +from django.urls import include, path, re_path\n\n     urlpatterns = [\n    -    re_path(r'^about/$', views.about, name='about'),\n    +    path('about/', views.about, name='about'),\n         re_path(r'^post/(?P<slug>[w-]+)/$', views.post, name='post'),\n     ]\n\n``lru_cache``\n~~~~~~~~~~~~~\n\nRewrites imports of ``lru_cache`` from ``django.utils.functional`` to use ``functools``.\n\n.. code-block:: diff\n\n    -from django.utils.functional import lru_cache\n    +from functools import lru_cache\n\nDjango 2.2\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/2.2/releases/2.2/#features-deprecated-in-2-2>`__\n\n``HttpRequest.headers``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites use of ``request.META`` to read HTTP headers to instead use |request.headers|__.\n\n.. |request.headers| replace:: ``request.headers``\n__ https://docs.djangoproject.com/en/2.2/ref/request-response/#django.http.HttpRequest.headers\n\n.. code-block:: diff\n\n    -request.META['HTTP_ACCEPT_ENCODING']\n    +request.headers['Accept-Encoding']\n\n    -self.request.META.get('HTTP_SERVER', '')\n    +self.request.headers.get('Server', '')\n\n``QuerySetPaginator``\n~~~~~~~~~~~~~~~~~~~~~\n\nRewrites deprecated alias ``django.core.paginator.QuerySetPaginator`` to ``Paginator``.\n\n.. code-block:: diff\n\n    -from django.core.paginator import QuerySetPaginator\n    +from django.core.paginator import Paginator\n\n    -QuerySetPaginator(...)\n    +Paginator(...)\n\n\n``FixedOffset``\n~~~~~~~~~~~~~~~\n\nRewrites deprecated class ``FixedOffset(x, y))`` to ``timezone(timedelta(minutes=x), y)``\n\nKnown limitation: this fixer will leave code broken with an ``ImportError`` if ``FixedOffset`` is called with only ``*args`` or ``**kwargs``.\n\n.. code-block:: diff\n\n    -from django.utils.timezone import FixedOffset\n    -FixedOffset(120, \"Super time\")\n    +from datetime import timedelta, timezone\n    +timezone(timedelta(minutes=120), \"Super time\")\n\n``FloatRangeField``\n~~~~~~~~~~~~~~~~~~~\n\nRewrites model and form fields using ``FloatRangeField`` to ``DecimalRangeField``, from the relevant ``django.contrib.postgres`` modules.\n\n.. code-block:: diff\n\n     from django.db.models import Model\n    -from django.contrib.postgres.fields import FloatRangeField\n    +from django.contrib.postgres.fields import DecimalRangeField\n\n     class MyModel(Model):\n    -    my_field = FloatRangeField(\"My range of numbers\")\n    +    my_field = DecimalRangeField(\"My range of numbers\")\n\n``TestCase`` class database declarations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``allow_database_queries`` and ``multi_db`` attributes of Django’s ``TestCase`` classes to the new ``databases`` attribute.\nThis only applies in test files, which are heuristically detected as files with either “test” or “tests” somewhere in their path.\n\nNote that this will only rewrite to ``databases = []`` or ``databases = \"__all__\"``.\nWith multiple databases you can save some test time by limiting test cases to the databases they require (which is why Django made the change).\n\n.. code-block:: diff\n\n     from django.test import SimpleTestCase\n\n     class MyTests(SimpleTestCase):\n    -    allow_database_queries = True\n    +    databases = \"__all__\"\n\n         def test_something(self):\n             self.assertEqual(2 * 2, 4)\n\nDjango 3.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.0/releases/3.0/#features-deprecated-in-3-0>`__\n\n``django.utils.encoding`` aliases\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites ``smart_text()`` to ``smart_str()``, and ``force_text()`` to ``force_str()``.\n\n.. code-block:: diff\n\n    -from django.utils.encoding import force_text, smart_text\n    +from django.utils.encoding import force_str, smart_str\n\n\n    -force_text(\"yada\")\n    -smart_text(\"yada\")\n    +force_str(\"yada\")\n    +smart_str(\"yada\")\n\n``django.utils.http`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``urlquote()``, ``urlquote_plus()``, ``urlunquote()``, and ``urlunquote_plus()`` functions to the ``urllib.parse`` versions.\nAlso rewrites the internal function ``is_safe_url()`` to ``url_has_allowed_host_and_scheme()``.\n\n.. code-block:: diff\n\n    -from django.utils.http import urlquote\n    +from urllib.parse import quote\n\n    -escaped_query_string = urlquote(query_string)\n    +escaped_query_string = quote(query_string)\n\n``django.utils.text`` deprecation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites ``unescape_entities()`` with the standard library ``html.escape()``.\n\n.. code-block:: diff\n\n    -from django.utils.text import unescape_entities\n    +import html\n\n    -unescape_entities(\"some input string\")\n    +html.escape(\"some input string\")\n\n``django.utils.translation`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the ``ugettext()``, ``ugettext_lazy()``, ``ugettext_noop()``, ``ungettext()``, and ``ungettext_lazy()`` functions to their non-u-prefixed versions.\n\n.. code-block:: diff\n\n    -from django.utils.translation import ugettext as _, ungettext\n    +from django.utils.translation import gettext as _, ngettext\n\n    -ungettext(\"octopus\", \"octopodes\", n)\n    +ngettext(\"octopus\", \"octopodes\", n)\n\nDjango 3.1\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.1/releases/3.1/#features-deprecated-in-3-1>`__\n\n``JSONField``\n~~~~~~~~~~~~~\n\nRewrites imports of ``JSONField`` and related transform classes from those in ``django.contrib.postgres`` to the new all-database versions.\nIgnores usage in migration files, since Django kept the old class around to support old migrations.\nYou will need to make migrations after this fix makes changes to models.\n\n.. code-block:: diff\n\n    -from django.contrib.postgres.fields import JSONField\n    +from django.db.models import JSONField\n\n``PASSWORD_RESET_TIMEOUT_DAYS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites the setting ``PASSWORD_RESET_TIMEOUT_DAYS`` to ``PASSWORD_RESET_TIMEOUT``, adding the multiplication by the number of seconds in a day.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    -PASSWORD_RESET_TIMEOUT_DAYS = 4\n    +PASSWORD_RESET_TIMEOUT = 60 * 60 * 24 * 4\n\n``Signal``\n~~~~~~~~~~\n\nRemoves the deprecated documentation-only ``providing_args`` argument.\n\n.. code-block:: diff\n\n     from django.dispatch import Signal\n    -my_cool_signal = Signal(providing_args=[\"documented\", \"arg\"])\n    +my_cool_signal = Signal()\n\n``get_random_string``\n~~~~~~~~~~~~~~~~~~~~~\n\nInjects the now-required ``length`` argument, with its previous default ``12``.\n\n.. code-block:: diff\n\n     from django.utils.crypto import get_random_string\n    -key = get_random_string(allowed_chars=\"01234567899abcdef\")\n    +key = get_random_string(length=12, allowed_chars=\"01234567899abcdef\")\n\n``NullBooleanField``\n~~~~~~~~~~~~~~~~~~~~\n\nTransforms the ``NullBooleanField()`` model field to ``BooleanField(null=True)``.\nIgnores usage in migration files, since Django kept the old class around to support old migrations.\nYou will need to make migrations after this fix makes changes to models.\n\n.. code-block:: diff\n\n    -from django.db.models import Model, NullBooleanField\n    +from django.db.models import Model, BooleanField\n\n     class Book(Model):\n    -    valuable = NullBooleanField(\"Valuable\")\n    +    valuable = BooleanField(\"Valuable\", null=True)\n\nDjango 3.2\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/3.2/releases/3.2/#features-deprecated-in-3-2>`__\n\n``EmailValidator``\n~~~~~~~~~~~~~~~~~~\n\nRewrites keyword arguments to their new names: ``whitelist`` to ``allowlist``, and ``domain_whitelist`` to ``domain_allowlist``.\n\n.. code-block:: diff\n\n     from django.core.validators import EmailValidator\n\n    -EmailValidator(whitelist=[\"example.com\"])\n    +EmailValidator(allowlist=[\"example.com\"])\n    -EmailValidator(domain_whitelist=[\"example.org\"])\n    +EmailValidator(domain_allowlist=[\"example.org\"])\n\n``default_app_config``\n~~~~~~~~~~~~~~~~~~~~~~\n\nRemoves module-level ``default_app_config`` assignments from ``__init__.py`` files:\n\n.. code-block:: diff\n\n    -default_app_config = 'my_app.apps.AppConfig'\n\nDjango 4.0\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/4.0/releases/4.0/#features-deprecated-in-4-0>`__\n\n``USE_L10N``\n~~~~~~~~~~~~\n\nRemoves the deprecated ``USE_L10N`` setting if set to its default value of ``True``.\n\nSettings files are heuristically detected as modules with the whole word “settings” somewhere in their path.\nFor example ``myproject/settings.py`` or ``myproject/settings/production.py``.\n\n.. code-block:: diff\n\n    -USE_L10N = True\n\nDjango 4.1\n----------\n\n`Release Notes <https://docs.djangoproject.com/en/4.1/releases/4.1/#features-deprecated-in-4-1>`__\n\n``django.utils.timezone.utc`` deprecations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRewrites imports of ``utc`` from ``django.utils.timezone`` to use ``datetime.timezone``.\n\n.. code-block:: diff\n\n    -from django.utils.timezone import utc\n    +from datetime.timezone import utc\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adamchainz/django-upgrade",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-upgrade",
    "package_url": "https://pypi.org/project/django-upgrade/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-upgrade/",
    "project_urls": {
      "Changelog": "https://github.com/adamchainz/django-upgrade/blob/main/HISTORY.rst",
      "Homepage": "https://github.com/adamchainz/django-upgrade",
      "Twitter": "https://twitter.com/adamchainz"
    },
    "release_url": "https://pypi.org/project/django-upgrade/1.9.0/",
    "requires_dist": [
      "tokenize-rt (>=4.1.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Automatically upgrade your Django projects.",
    "version": "1.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16904361,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43134a8de2cd7826d5de75c13f70db8e08df21eaac3aff455e87fe24f4ce231f",
        "md5": "8a5dead4eeef3a5d8cbb3fe2714f251c",
        "sha256": "90a05be5a1e95f33e87b7de7a979b39facff154558510818e8b3ac963a7b9af5"
      },
      "downloads": -1,
      "filename": "django_upgrade-1.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a5dead4eeef3a5d8cbb3fe2714f251c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 39838,
      "upload_time": "2022-08-25T13:50:28",
      "upload_time_iso_8601": "2022-08-25T13:50:28.912744Z",
      "url": "https://files.pythonhosted.org/packages/43/13/4a8de2cd7826d5de75c13f70db8e08df21eaac3aff455e87fe24f4ce231f/django_upgrade-1.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f66d0e279df697808ef4a079ca6cebfa36a2792e2877f361f9350becc218668",
        "md5": "9bd5601a55bea01823eb297d105a7c97",
        "sha256": "e5a0ae44890fbe4551e5bc8085d67de4347527553d8f1a49ca9ae2f032f5f25e"
      },
      "downloads": -1,
      "filename": "django-upgrade-1.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bd5601a55bea01823eb297d105a7c97",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 30809,
      "upload_time": "2022-08-25T13:50:30",
      "upload_time_iso_8601": "2022-08-25T13:50:30.930384Z",
      "url": "https://files.pythonhosted.org/packages/9f/66/d0e279df697808ef4a079ca6cebfa36a2792e2877f361f9350becc218668/django-upgrade-1.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}