{
  "info": {
    "author": "Jose Padilla",
    "author_email": "jpadilla@getblimp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "# Django REST framework JWT Auth\n\n[![Build Status](https://travis-ci.org/GetBlimp/django-rest-framework-jwt.png?branch=master)](https://travis-ci.org/GetBlimp/django-rest-framework-jwt) [![PyPI version](https://badge.fury.io/py/djangorestframework-jwt.png)](http://badge.fury.io/py/djangorestframework-jwt)\n\n## Overview\nThis package provides [JSON Web Token Authentication](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token) support for [Django REST framework](http://django-rest-framework.org/).\n\nIf you want to read more about JWT, here's a great blog post by the guys at Auth0 that talks about [Cookie vs Token based authentication](http://blog.auth0.com/2014/01/07/angularjs-authentication-with-cookies-vs-token/).\n\n## Installation\n\nInstall using `pip`...\n\n```\n$ pip install djangorestframework-jwt\n```\n\n## Usage\n\nIn your `settings.py`, add `JSONWebTokenAuthentication` to Django REST framework's `DEFAULT_AUTHENTICATION_CLASSES`.\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n    \t'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n    \t'rest_framework.authentication.SessionAuthentication',\n\t    'rest_framework.authentication.BasicAuthentication',\n        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',\n    ),\n}\n```\n\nIn your `urls.py` add the following URL route to enable obtaining a token via a POST included the user's username and password.\n\n```python\nurlpatterns = patterns(\n    '',\n    # ...\n\n    url(r'^api-token-auth/', 'rest_framework_jwt.views.obtain_jwt_token'),\n)\n```\n\nYou can easily test if the endpoint is working by doing the following in your terminal, if you had a user created with the username **admin** and password **abc123**.\n\n```bash\n$ curl -X POST -d \"username=admin&password=abc123\" http://localhost:8000/api-token-auth/\n```\n\nAlternatively, you can use all the content types supported by the Django REST framework to obtain the auth token. For example:\n\n```bash\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"username\":\"admin\",\"password\":\"abc123\"}' http://localhost:8000/api-token-auth/\n```\n\nNow in order to access protected api urls you must include the `Authorization: JWT <your_token>` header.\n\n```bash\n$ curl -H \"Authorization: JWT <your_token>\" http://localhost:8000/protected-url/\n```\n\n## Refresh Token\nIf `JWT_ALLOW_REFRESH` is True, issued tokens can be \"refreshed\" to obtain a new brand token with renewed expiration time. Add a URL pattern like this:\n```python\n    url(r'^api-token-refresh/', 'rest_framework_jwt.views.refresh_jwt_token'),\n```\n\nPass in an existing token to the refresh endpoint as follows: `{\"token\": EXISTING_TOKEN}`. Note that only non-expired tokens will work. The JSON response looks the same as the normal obtain token endpoint `{\"token\": NEW_TOKEN}`.\n\n```bash\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"token\":\"<EXISTING_TOKEN>}' http://localhost:8000/api-token-refresh/\n```\n\nRefresh with tokens can be repeated (token1 -> token2 -> token3), but this chain of token stores the time that the original token (obtained with username/password credentials), as `orig_iat`. You can only keep refreshing tokens up to `JWT_REFRESH_EXPIRATION_DELTA`.\n\nA typical use case might be a web app where you'd like to keep the user \"logged in\" the site without having to re-enter their password, or get kicked out by surprise before their token expired. Imagine they had a 1-hour token and are just at the last minute while they're still doing something. With mobile you could perhaps store the username/password to get a new token, but this is not a great idea in a browser. Each time the user loads the page, you can check if there is an existing non-expired token and if it's close to being expired, refresh it to extend their session. In other words, if a user is actively using your site, they can keep their \"session\" alive.\n\n## Additional Settings\nThere are some additional settings that you can override similar to how you'd do it with Django REST framework itself. Here are all the available defaults.\n\n```python\nJWT_AUTH = {\n    'JWT_ENCODE_HANDLER':\n    'rest_framework_jwt.utils.jwt_encode_handler',\n\n    'JWT_DECODE_HANDLER':\n    'rest_framework_jwt.utils.jwt_decode_handler',\n\n    'JWT_PAYLOAD_HANDLER':\n    'rest_framework_jwt.utils.jwt_payload_handler',\n\n    'JWT_PAYLOAD_GET_USER_ID_HANDLER':\n    'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',\n\n    'JWT_SECRET_KEY': settings.SECRET_KEY,\n    'JWT_ALGORITHM': 'HS256',\n    'JWT_VERIFY': True,\n    'JWT_VERIFY_EXPIRATION': True,\n    'JWT_LEEWAY': 0,\n    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),\n\n    'JWT_ALLOW_REFRESH': False,\n    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),\n\n    'JWT_AUTH_HEADER_PREFIX': 'JWT',\n}\n```\nThis packages uses the JSON Web Token Python implementation, [PyJWT](https://github.com/progrium/pyjwt) and allows to modify some of it's available options.\n\n### JWT_SECRET_KEY\nThis is the secret key used to encrypt the JWT. Make sure this is safe and not shared or public.\n\nDefault is your project's `settings.SECRET_KEY`.\n\n### JWT_ALGORITHM\n\nPossible values:\n\n> * HS256 - HMAC using SHA-256 hash algorithm (default)\n> * HS384 - HMAC using SHA-384 hash algorithm\n> * HS512 - HMAC using SHA-512 hash algorithm\n> * RS256 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-256 hash algorithm\n> * RS384 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-384 hash algorithm\n> * RS512 - RSASSA-PKCS1-v1_5 signature algorithm using SHA-512 hash algorithm\n\nNote:\n> For the RSASSA-PKCS1-v1_5 algorithms, the \"secret\" argument in jwt.encode is supposed to be a private RSA key as\n> imported with Crypto.PublicKey.RSA.importKey. Likewise, the \"secret\" argument in jwt.decode is supposed to be the\n> public RSA key imported with the same method.\n\nDefault is `\"HS256\"`.\n\n### JWT_VERIFY\n\nIf the secret is wrong, it will raise a jwt.DecodeError telling you as such. You can still get at the payload by setting the `JWT_VERIFY` to `False`.\n\nDefault is `True`.\n\n### JWT_VERIFY_EXPIRATION\n\nYou can turn off expiration time verification with by setting `JWT_VERIFY_EXPIRATION` to `False`.\n\nDefault is `True`.\n\n### JWT_LEEWAY\n\n> This allows you to validate an expiration time which is in the past but no very far. For example, if you have a JWT payload with an expiration time set to 30 seconds after creation but you know that sometimes you will process it after 30 seconds, you can set a leeway of 10 seconds in order to have some margin.\n\nDefault is `0` seconds.\n\n### JWT_EXPIRATION_DELTA\nThis is an instance of Python's `datetime.timedelta`. This will be added to `datetime.utcnow()` to set the expiration time.\n\nDefault is `datetime.timedelta(seconds=300)`(5 minutes).\n\n### JWT_ALLOW_REFRESH\nEnable token refresh functionality. Token issued from `rest_framework_jwt.views.obtain_jwt_token` will have an `orig_iat` field. Default is `False`\n\n### JWT_REFRESH_EXPIRATION_DELTA\nLimit on token refresh, is a `datetime.timedelta` instance. This is how much time after the original token that future tokens can be refreshed from.\n\nDefault is `datetime.timedelta(days=7)` (7 days).\n\n### JWT_PAYLOAD_HANDLER\nSpecify a custom function to generate the token payload\n\n### JWT_PAYLOAD_GET_USER_ID_HANDLER\nIf you store `user_id` differently than the default payload handler does, implement this function to fetch `user_id` from the payload.\n\n### JWT_AUTH_HEADER_PREFIX\nYou can modify the Authorization header value prefix that is required to be sent together with the token. The default value is `JWT`. This decision was introduced in PR [#4](https://github.com/GetBlimp/django-rest-framework-jwt/pull/4) to allow using both this package and OAuth2 in DRF.\n\nAnother common value used for tokens and Authorization headers is `Bearer`.\n\nDefault is `JWT`.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GetBlimp/django-rest-framework-jwt",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djangorestframework-jwt",
    "package_url": "https://pypi.org/project/djangorestframework-jwt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework-jwt/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/GetBlimp/django-rest-framework-jwt"
    },
    "release_url": "https://pypi.org/project/djangorestframework-jwt/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "JSON Web Token based authentication for Django REST framework",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2974816,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67fe55d7b0990fec1e17d7a60f7d347698fb0bdb69cad53481bc89419725638f",
        "md5": "6d12b0771cefbab75924a72ce8706648",
        "sha256": "5ff5cf9c3039a46a98adae3a137fb9da6508c17211ef1a88f5220592364c2a28"
      },
      "downloads": -1,
      "filename": "djangorestframework_jwt-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6d12b0771cefbab75924a72ce8706648",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 16175,
      "upload_time": "2014-09-03T18:07:53",
      "upload_time_iso_8601": "2014-09-03T18:07:53.827658Z",
      "url": "https://files.pythonhosted.org/packages/67/fe/55d7b0990fec1e17d7a60f7d347698fb0bdb69cad53481bc89419725638f/djangorestframework_jwt-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e40c99889f61b816a563cfe5014d11d72ec76497612bfbcc777752293175b068",
        "md5": "50a5001ad5bb891ce1c59a6f408a3527",
        "sha256": "06d64ef1c9bcb42d8885bd754f9ab2e25acb73d6350550edce025d03793932a9"
      },
      "downloads": -1,
      "filename": "djangorestframework-jwt-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "50a5001ad5bb891ce1c59a6f408a3527",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12821,
      "upload_time": "2014-09-03T18:07:45",
      "upload_time_iso_8601": "2014-09-03T18:07:45.433437Z",
      "url": "https://files.pythonhosted.org/packages/e4/0c/99889f61b816a563cfe5014d11d72ec76497612bfbcc777752293175b068/djangorestframework-jwt-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}