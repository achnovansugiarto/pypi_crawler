{
  "info": {
    "author": "Jose Padilla",
    "author_email": "jpadilla@getblimp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django REST framework JWT Auth\r\n==============================\r\n\r\n|Build Status| |PyPI version|\r\n\r\nOverview\r\n--------\r\n\r\nThis package provides `JSON Web Token\r\nAuthentication <http://tools.ietf.org/html/draft-ietf-oauth-json-web-token>`__\r\nsupport for `Django REST\r\nframework <http://django-rest-framework.org/>`__.\r\n\r\nIf you want to read more about JWT, here's a great blog post by the guys\r\nat Auth0 that talks about `Cookie vs Token based\r\nauthentication <http://blog.auth0.com/2014/01/07/angularjs-authentication-with-cookies-vs-token/>`__.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall using ``pip``...\r\n\r\n::\r\n\r\n    $ pip install djangorestframework-jwt\r\n\r\nUsage\r\n-----\r\n\r\nIn your ``settings.py``, add ``JSONWebTokenAuthentication`` to Django\r\nREST framework's ``DEFAULT_AUTHENTICATION_CLASSES``.\r\n\r\n.. code:: python\r\n\r\n    REST_FRAMEWORK = {\r\n        'DEFAULT_PERMISSION_CLASSES': (\r\n            'rest_framework.permissions.IsAuthenticated',\r\n        ),\r\n        'DEFAULT_AUTHENTICATION_CLASSES': (\r\n            'rest_framework.authentication.SessionAuthentication',\r\n            'rest_framework.authentication.BasicAuthentication',\r\n            'rest_framework_jwt.authentication.JSONWebTokenAuthentication',\r\n        ),\r\n    }\r\n\r\nIn your ``urls.py`` add the following URL route to enable obtaining a\r\ntoken via a POST included the user's username and password.\r\n\r\n.. code:: python\r\n\r\n    urlpatterns = patterns(\r\n        '',\r\n        # ...\r\n\r\n        url(r'^api-token-auth/', 'rest_framework_jwt.views.obtain_jwt_token'),\r\n    )\r\n\r\nYou can easily test if the endpoint is working by doing the following in\r\nyour terminal, if you had a user created with the username **admin** and\r\npassword **abc123**.\r\n\r\n.. code:: bash\r\n\r\n    $ curl -X POST -d \"username=admin&password=abc123\" http://localhost:8000/api-token-auth/\r\n\r\nAlternatively, you can use all the content types supported by the Django\r\nREST framework to obtain the auth token. For example:\r\n\r\n.. code:: bash\r\n\r\n    $ curl -X POST -H \"Content-Type: application/json\" -d '{\"username\":\"admin\",\"password\":\"abc123\"}' http://localhost:8000/api-token-auth/\r\n\r\nNow in order to access protected api urls you must include the\r\n``Authorization: JWT <your_token>`` header.\r\n\r\n.. code:: bash\r\n\r\n    $ curl -H \"Authorization: JWT <your_token>\" http://localhost:8000/protected-url/\r\n\r\nRefresh Token\r\n-------------\r\n\r\nIf ``JWT_ALLOW_REFRESH`` is True, issued tokens can be \"refreshed\" to\r\nobtain a new brand token with renewed expiration time. Add a URL pattern\r\nlike this:\r\n\r\n.. code:: python\r\n\r\n        url(r'^api-token-refresh/', 'rest_framework_jwt.views.refresh_jwt_token'),\r\n\r\nPass in an existing token to the refresh endpoint as follows:\r\n``{\"token\": EXISTING_TOKEN}``. Note that only non-expired tokens will\r\nwork. The JSON response looks the same as the normal obtain token\r\nendpoint ``{\"token\": NEW_TOKEN}``.\r\n\r\n.. code:: bash\r\n\r\n    $ curl -X POST -H \"Content-Type: application/json\" -d '{\"token\":\"<EXISTING_TOKEN>}' http://localhost:8000/api-token-refresh/\r\n\r\nRefresh with tokens can be repeated (token1 -> token2 -> token3), but\r\nthis chain of token stores the time that the original token (obtained\r\nwith username/password credentials), as ``orig_iat``. You can only keep\r\nrefreshing tokens up to ``JWT_REFRESH_EXPIRATION_DELTA``.\r\n\r\nA typical use case might be a web app where you'd like to keep the user\r\n\"logged in\" the site without having to re-enter their password, or get\r\nkicked out by surprise before their token expired. Imagine they had a\r\n1-hour token and are just at the last minute while they're still doing\r\nsomething. With mobile you could perhaps store the username/password to\r\nget a new token, but this is not a great idea in a browser. Each time\r\nthe user loads the page, you can check if there is an existing\r\nnon-expired token and if it's close to being expired, refresh it to\r\nextend their session. In other words, if a user is actively using your\r\nsite, they can keep their \"session\" alive.\r\n\r\nAdditional Settings\r\n-------------------\r\n\r\nThere are some additional settings that you can override similar to how\r\nyou'd do it with Django REST framework itself. Here are all the\r\navailable defaults.\r\n\r\n.. code:: python\r\n\r\n    JWT_AUTH = {\r\n        'JWT_ENCODE_HANDLER':\r\n        'rest_framework_jwt.utils.jwt_encode_handler',\r\n\r\n        'JWT_DECODE_HANDLER':\r\n        'rest_framework_jwt.utils.jwt_decode_handler',\r\n\r\n        'JWT_PAYLOAD_HANDLER':\r\n        'rest_framework_jwt.utils.jwt_payload_handler',\r\n\r\n        'JWT_PAYLOAD_GET_USER_ID_HANDLER':\r\n        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',\r\n\r\n        'JWT_SECRET_KEY': settings.SECRET_KEY,\r\n        'JWT_ALGORITHM': 'HS256',\r\n        'JWT_VERIFY': True,\r\n        'JWT_VERIFY_EXPIRATION': True,\r\n        'JWT_LEEWAY': 0,\r\n        'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),\r\n\r\n        'JWT_ALLOW_REFRESH': False,\r\n        'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),\r\n\r\n        'JWT_AUTH_HEADER_PREFIX': 'JWT',\r\n    }\r\n\r\nThis packages uses the JSON Web Token Python implementation,\r\n`PyJWT <https://github.com/progrium/pyjwt>`__ and allows to modify some\r\nof it's available options.\r\n\r\nJWT\\_SECRET\\_KEY\r\n~~~~~~~~~~~~~~~~\r\n\r\nThis is the secret key used to encrypt the JWT. Make sure this is safe\r\nand not shared or public.\r\n\r\nDefault is your project's ``settings.SECRET_KEY``.\r\n\r\nJWT\\_ALGORITHM\r\n~~~~~~~~~~~~~~\r\n\r\nPossible values:\r\n\r\n    -  HS256 - HMAC using SHA-256 hash algorithm (default)\r\n    -  HS384 - HMAC using SHA-384 hash algorithm\r\n    -  HS512 - HMAC using SHA-512 hash algorithm\r\n    -  RS256 - RSASSA-PKCS1-v1\\_5 signature algorithm using SHA-256 hash\r\n       algorithm\r\n    -  RS384 - RSASSA-PKCS1-v1\\_5 signature algorithm using SHA-384 hash\r\n       algorithm\r\n    -  RS512 - RSASSA-PKCS1-v1\\_5 signature algorithm using SHA-512 hash\r\n       algorithm\r\n\r\nNote: > For the RSASSA-PKCS1-v1\\_5 algorithms, the \"secret\" argument in\r\njwt.encode is supposed to be a private RSA key as > imported with\r\nCrypto.PublicKey.RSA.importKey. Likewise, the \"secret\" argument in\r\njwt.decode is supposed to be the > public RSA key imported with the same\r\nmethod.\r\n\r\nDefault is ``\"HS256\"``.\r\n\r\nJWT\\_VERIFY\r\n~~~~~~~~~~~\r\n\r\nIf the secret is wrong, it will raise a jwt.DecodeError telling you as\r\nsuch. You can still get at the payload by setting the ``JWT_VERIFY`` to\r\n``False``.\r\n\r\nDefault is ``True``.\r\n\r\nJWT\\_VERIFY\\_EXPIRATION\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can turn off expiration time verification with by setting\r\n``JWT_VERIFY_EXPIRATION`` to ``False``.\r\n\r\nDefault is ``True``.\r\n\r\nJWT\\_LEEWAY\r\n~~~~~~~~~~~\r\n\r\n    This allows you to validate an expiration time which is in the past\r\n    but no very far. For example, if you have a JWT payload with an\r\n    expiration time set to 30 seconds after creation but you know that\r\n    sometimes you will process it after 30 seconds, you can set a leeway\r\n    of 10 seconds in order to have some margin.\r\n\r\nDefault is ``0`` seconds.\r\n\r\nJWT\\_EXPIRATION\\_DELTA\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThis is an instance of Python's ``datetime.timedelta``. This will be\r\nadded to ``datetime.utcnow()`` to set the expiration time.\r\n\r\nDefault is ``datetime.timedelta(seconds=300)``\\ (5 minutes).\r\n\r\nJWT\\_ALLOW\\_REFRESH\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nEnable token refresh functionality. Token issued from\r\n``rest_framework_jwt.views.obtain_jwt_token`` will have an ``orig_iat``\r\nfield. Default is ``False``\r\n\r\nJWT\\_REFRESH\\_EXPIRATION\\_DELTA\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nLimit on token refresh, is a ``datetime.timedelta`` instance. This is\r\nhow much time after the original token that future tokens can be\r\nrefreshed from.\r\n\r\nDefault is ``datetime.timedelta(days=7)`` (7 days).\r\n\r\nJWT\\_PAYLOAD\\_HANDLER\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify a custom function to generate the token payload\r\n\r\nJWT\\_PAYLOAD\\_GET\\_USER\\_ID\\_HANDLER\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you store ``user_id`` differently than the default payload handler\r\ndoes, implement this function to fetch ``user_id`` from the payload.\r\n\r\nJWT\\_AUTH\\_HEADER\\_PREFIX\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can modify the Authorization header value prefix that is required to\r\nbe sent together with the token. The default value is ``JWT``. This\r\ndecision was introduced in PR\r\n`#4 <https://github.com/GetBlimp/django-rest-framework-jwt/pull/4>`__ to\r\nallow using both this package and OAuth2 in DRF.\r\n\r\nAnother common value used for tokens and Authorization headers is\r\n``Bearer``.\r\n\r\nDefault is ``JWT``.\r\n\r\n.. |Build Status| image:: https://travis-ci.org/GetBlimp/django-rest-framework-jwt.png?branch=master\r\n   :target: https://travis-ci.org/GetBlimp/django-rest-framework-jwt\r\n.. |PyPI version| image:: https://badge.fury.io/py/djangorestframework-jwt.png\r\n   :target: http://badge.fury.io/py/djangorestframework-jwt",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GetBlimp/django-rest-framework-jwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-jwt",
    "package_url": "https://pypi.org/project/djangorestframework-jwt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangorestframework-jwt/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/GetBlimp/django-rest-framework-jwt"
    },
    "release_url": "https://pypi.org/project/djangorestframework-jwt/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "JSON Web Token based authentication for Django REST framework",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2974816,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "180ec6100ec3a8175b9b8ae9c76a1aba0dca93f8210f4560488431bb3b136466",
        "md5": "a660eff24682dbbca650ef21b32140b5",
        "sha256": "389b4c14f5bfe143c483f657787e34667df33e7e413d6e4f5028e83249891905"
      },
      "downloads": -1,
      "filename": "djangorestframework_jwt-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a660eff24682dbbca650ef21b32140b5",
      "packagetype": "bdist_wheel",
      "python_version": "3.3",
      "requires_python": null,
      "size": 16177,
      "upload_time": "2014-08-30T11:41:27",
      "upload_time_iso_8601": "2014-08-30T11:41:27.447742Z",
      "url": "https://files.pythonhosted.org/packages/18/0e/c6100ec3a8175b9b8ae9c76a1aba0dca93f8210f4560488431bb3b136466/djangorestframework_jwt-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbdfb06d6d7ddbcf10f8cdab580dcb1fb2f10e46ee0047ddf806ebdcb74a00a6",
        "md5": "643aa79cd3eb0366c3ec88cbab6e59c9",
        "sha256": "a89d26c360bf09e55cdd52d4703b9a7dbfd008911c51e90c15597ab151ee9f11"
      },
      "downloads": -1,
      "filename": "djangorestframework-jwt-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "643aa79cd3eb0366c3ec88cbab6e59c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12828,
      "upload_time": "2014-08-30T11:41:23",
      "upload_time_iso_8601": "2014-08-30T11:41:23.627899Z",
      "url": "https://files.pythonhosted.org/packages/cb/df/b06d6d7ddbcf10f8cdab580dcb1fb2f10e46ee0047ddf806ebdcb74a00a6/djangorestframework-jwt-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}