{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Games/Entertainment",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Mastering Atari with Discrete World Models\n\nImplementation of the [DreamerV2][website] agent in TensorFlow 2. Training\ncurves for all 55 games are included.\n\n<p align=\"center\">\n<img width=\"90%\" src=\"https://imgur.com/gO1rvEn.gif\">\n</p>\n\nIf you find this code useful, please reference in your paper:\n\n```\n@article{hafner2020dreamerv2,\n  title={Mastering Atari with Discrete World Models},\n  author={Hafner, Danijar and Lillicrap, Timothy and Norouzi, Mohammad and Ba, Jimmy},\n  journal={arXiv preprint arXiv:2010.02193},\n  year={2020}\n}\n```\n\n[website]: https://danijar.com/dreamerv2\n\n## Method\n\nDreamerV2 is the first world model agent that achieves human-level performance\non the Atari benchmark. DreamerV2 also outperforms the final performance of the\ntop model-free agents Rainbow and IQN using the same amount of experience and\ncomputation. The implementation in this repository alternates between training\nthe world model, training the policy, and collecting experience and runs on a\nsingle GPU.\n\n![World Model Learning](https://imgur.com/GRC9QAw.png)\n\nDreamerV2 learns a model of the environment directly from high-dimensional\ninput images. For this, it predicts ahead using compact learned states. The\nstates consist of a deterministic part and several categorical variables that\nare sampled. The prior for these categoricals is learned through a KL loss. The\nworld model is learned end-to-end via straight-through gradients, meaning that\nthe gradient of the density is set to the gradient of the sample.\n\n![Actor Critic Learning](https://imgur.com/wH9kJ2O.png)\n\nDreamerV2 learns actor and critic networks from imagined trajectories of latent\nstates. The trajectories start at encoded states of previously encountered\nsequences. The world model then predicts ahead using the selected actions and\nits learned state prior. The critic is trained using temporal difference\nlearning and the actor is trained to maximize the value function via reinforce\nand straight-through gradients.\n\nFor more information:\n\n- [Google AI Blog post](https://ai.googleblog.com/2021/02/mastering-atari-with-discrete-world.html)\n- [Project website](https://danijar.com/dreamerv2/)\n- [Research paper](https://arxiv.org/pdf/2010.02193.pdf)\n\n## Manual Instructions\n\nThe instructions are for running the DreamerV2 repository on your local\ncomputer, which allows you to modify the agent. See the following sections for\nalternative ways to run the agent.\n\nGet dependencies:\n\n```sh\npip3 install tensorflow==2.4.2 tensorflow_probability==0.12.2 matplotlib ruamel.yaml 'gym[atari]'\n```\n\nTrain on Atari:\n\n```sh\npython3 dreamerv2/train.py --logdir ~/logdir/atari_pong/dreamerv2/1 --configs defaults atari --task atari_pong\n```\n\nTrain on Control Suite:\n\n```sh\npython3 dreamerv2/train.py --logdir ~/logdir/dmc_walker_walk/dreamerv2/1 --configs defaults dmc --task dmc_walker_walk\n```\n\nMonitor results:\n\n```sh\ntensorboard --logdir ~/logdir\n```\n\nGenerate plots:\n\n```sh\npython3 common/plot.py --indir ~/logdir --outdir ~/plots --xaxis step --yaxis eval_return --bins 1e6\n```\n\n## Docker Instructions\n\nThe [Dockerfile](https://github.com/danijar/dreamerv2/blob/main/Dockerfile)\nlets you run DreamerV2 without installing its dependencies in your system. This\nrequires you to have Docker with GPU access set up.\n\nCheck your setup:\n\n```sh\ndocker run -it --rm --gpus all tensorflow/tensorflow:2.4.2-gpu nvidia-smi\n```\n\nTrain on Atari:\n\n```sh\ndocker build -t dreamerv2 .\ndocker run -it --rm --gpus all -v ~/logdir:/logdir dreamerv2 \\\n  python3 dreamerv2/train.py --logdir /logdir/atari_pong/dreamerv2/1 --configs defaults atari --task atari_pong\n```\n\nTrain on Control Suite:\n\n```sh\ndocker build -t dreamerv2 . --build-arg MUJOCO_KEY=\"$(cat ~/.mujoco/mjkey.txt)\"\ndocker run -it --rm --gpus all -v ~/logdir:/logdir dreamerv2 \\\n  python3 dreamerv2/train.py --logdir /logdir/dmc_walker_walk/dreamerv2/1 --configs defaults dmc --task dmc_walker_walk\n```\n\n## External Instructions\n\nYou can also use DreamerV2 as a package if you just want to run it on a custom\nenv without modifying the agent.\n\nInstall package:\n\n```sh\npip3 install dreamerv2\n```\n\nExample script:\n\n```python\nimport gym\nimport gym_minigrid\nimport dreamerv2.api as dv2\n\nconfig = dv2.configs.crafter.update({\n    'logdir': '~/logdir/minigrid',\n    'log_every': 1e3,\n    'dataset.batch': 16,\n    'actor_ent': 1e-3,\n    'loss_scales.kl': 1.0,\n    'discount': 0.99,\n}).parse_flags()\n\nenv = gym.make('MiniGrid-DoorKey-6x6-v0')\nenv = gym_minigrid.wrappers.RGBImgPartialObsWrapper(env)\nenv = dv2.GymWrapper(env)\nenv = dv2.ResizeImage(env, (64, 64))\nenv = dv2.OneHotAction(env)\n\ndv2.train(env, config)\n```\n\n## Tips\n\n- **Efficient debugging.** You can use the `debug` config as in `--configs\ndefaults atari debug`. This reduces the batch size, increases the evaluation\nfrequency, and disables `tf.function` graph compilation for easy line-by-line\ndebugging.\n\n- **Infinite gradient norms.** This is normal and described under loss scaling in\nthe [mixed precision][mixed] guide. You can disable mixed precision by passing\n`--precision 32` to the training script. Mixed precision is faster but can in\nprinciple cause numerical instabilities.\n\n- **Accessing logged metrics.** The metrics are stored in both TensorBoard and\nJSON lines format. You can directly load them using `pandas.read_json()`. The\nplotting script also stores the binned and aggregated metrics of multiple runs\ninto a single JSON file for easy manual plotting.\n\n[mixed]: https://www.tensorflow.org/guide/mixed_precision",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/danijar/dreamerv2",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dreamerv2",
    "package_url": "https://pypi.org/project/dreamerv2/",
    "platform": "",
    "project_url": "https://pypi.org/project/dreamerv2/",
    "project_urls": {
      "Homepage": "http://github.com/danijar/dreamerv2"
    },
    "release_url": "https://pypi.org/project/dreamerv2/2.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mastering Atari with Discrete World Models",
    "version": "2.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12303995,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1676a12884517e5413512eb672a5bc55bea7cbc963ac65c3bcc0140ab594ec6",
        "md5": "4f8f2ee1593f419d63915f974d1dff73",
        "sha256": "4c73487752995bb828c94a51fc4f8728ff0893872961348abfd9d6eb80bf9895"
      },
      "downloads": -1,
      "filename": "dreamerv2-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4f8f2ee1593f419d63915f974d1dff73",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41730,
      "upload_time": "2021-09-16T20:28:39",
      "upload_time_iso_8601": "2021-09-16T20:28:39.565029Z",
      "url": "https://files.pythonhosted.org/packages/a1/67/6a12884517e5413512eb672a5bc55bea7cbc963ac65c3bcc0140ab594ec6/dreamerv2-2.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}