{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# `Date` class\n\nA simplified date and time class for time manipulation. This library is intended for personal and business applications where assuming every solar day has 24 * 60 * 60 seconds is considered accurate. [See *GMT vs UTC* below](//#GMT%20vs%20UTC).\n\n\n## Assumptions\n\n* **All time is in GMT** - Timezone math is left to be resolved at the human endpoints: Machines should only be dealing with one type of time; without holes, without overlap, and with minimal context.\n* **Single time type** - There is no distinction between dates, datetime and times; all measurements in the time dimension are handled by one type called `Date`. This is important for treating time as a vector space.\n* **Standard range comparision** - All time range comparisons have been standardized to `min <= value < max`. The minimum is inclusive (`<=`), and the maximum is exclusive (`<`). \n\n\n# `Date` properties\n\n### `Date()` constructor\n\nThe `Date()` method will convert unix timestamps, millisecond timestamps, various string formats and simple time formulas to create a GMT time\n\n\n### `now()` staticmethod ###\n\nReturn `Date` instance with millisecond resolution (in GMT).\n\n### `eod()` staticmethod ###\n\nReturn end-of-day: Smallest `Date` which is greater than all time points in today. Think of it as tomorrow. Same as `now().ceiling(DAY)`\n\n### `today()` staticmethod ###\n\nThe beginning of today. Same as `now().floor(DAY)`\n\n\n### range(min, max, interval) staticmethod ###\n\nReturn an explicit list of `Dates` starting with `min`, each `interval` more than the last, but now including `max`.   Used in defining partitions in time domains.\n\n\n### `floor(duration=None)` method\n\nThis method is usually used to perform date comparisons at the given resolution (aka `duration`). Round down to the nearest whole duration. `duration` as assumed to be `DAY` if not provided.\n\n### `format(format=\"%Y-%m-%d %H:%M:%S\")` method\n\nJust like `strftime`\n\n### `milli` property\n\nNumber of milliseconds since epoch\n\n### `unix` property\n\nNumber of seconds since epoch\n\n\n### `add(duration)` method\n\nAdd a `duration` to the time to get a new `Date` instance. The `self` is not modified.\n\n### `addDay()` method\n\nConvenience method for `self.add(DAY)`\n\n\n# `Duration` class\n\nRepresents the difference between two `Dates`. There are two scales:\n\n*  **`DAY` scale** - includes seconds, minutes, hours, days and weeks.\n*  **`YEAR` scale** - includes months, quarters, years, and centuries.\n\n### `Duration()` constructor\n\nCreate a new `Duration` by name, by formula, by `timespan`, or (more rarely) number of milliseconds.\n\n### `floor(interval=None)` method\n\nRound down to nearest `interval` size.\n\n### `seconds` property\n\nreturn total number of seconds (including partial) in this duration (estimate given for `YEAR` scale)\n\n### `total_seconds()` method ###\n\nSame as the `seconds` property\n\n### `round(interval, decimal=0)` method ###\n\nReturn number of given `interval` rounded to given `decimal` places\n\n### `format(interval, decimal=0)` method ###\n\nReturn a string representing `self` using given `interval` and `decimal` rounding\n\n\n# Time Vector Space\n\nThe `Date` and `Duration` objects are the point and vectors in a one dimensional vector space. As such, the `+` and `-` operators are allowed. Comparisons with (`>`, `>=`, `<=`, `<`) are also supported.\n\n\n## GMT vs UTC\n\nThe solar day is he most popular timekeeping unit. This library chose GMT (UT1) for its base clock because of its consistent seconds in a solar day. UTC suffers from inconsistent leap seconds and makes time-math difficult, even while forcing us to make pedantic conclusions like some minutes do not have 60 seconds. Lucky for us Python's implementation of UTC (`datetime.utcnow()`) is wrong, and implements GMT: Which is what we use.\n\n## Error Analysis\n\nAssuming we need a generous leap second each 6 months (the past decade saw only 4 leap seconds), then GMT deviates from UTC by up to 1 seconds over 181 days (December to June, 15,638,400 seconds) which is an error rate `error = 1/15,638,400 = 0.000006395%`. If we want to call the error \"noise\", we have a 70dB signal/noise ratio. All applications that can tolerate this level of error should use GMT as their time basis.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-times",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-times",
    "package_url": "https://pypi.org/project/mo-times/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-times/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-times"
    },
    "release_url": "https://pypi.org/project/mo-times/5.24.21182/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More Time! Time as a vector space, the way it was meant to be.",
    "version": "5.24.21182",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547940,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45cc75a964c6ddeac647fb624560dcd60e39622ffcd2ca2091a2cd25209d0180",
        "md5": "cc1f00a0e2c17bb0851a311f63ea03a6",
        "sha256": "d4fc3fdd5d61375b1f66585889ae8c28972405293a842733d86f8c01217b730c"
      },
      "downloads": -1,
      "filename": "mo-times-5.24.21182.tar.gz",
      "has_sig": false,
      "md5_digest": "cc1f00a0e2c17bb0851a311f63ea03a6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 47349,
      "upload_time": "2021-07-01T13:36:46",
      "upload_time_iso_8601": "2021-07-01T13:36:46.447121Z",
      "url": "https://files.pythonhosted.org/packages/45/cc/75a964c6ddeac647fb624560dcd60e39622ffcd2ca2091a2cd25209d0180/mo-times-5.24.21182.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}