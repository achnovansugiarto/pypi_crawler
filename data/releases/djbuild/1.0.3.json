{
  "info": {
    "author": "Luis C. Cruz",
    "author_email": "carlitos.kyo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Buildout",
      "Framework :: Django",
      "License :: OSI Approved :: BSD License",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Description\n===========\n\n*Please send me feedback and comments to carlitos.kyo@gmail.com*\n\nBased on djangorecipe and code from setuptools used.\n\nThis buildout recipe can be used to create a setup for Django. It will\nautomatically download Django and install it in the buildout's\nsandbox. You can use either a release version of Django or a\nsubversion checkout (by using `trunk` instead of a version number).\n\nThe directory structure is based on: http://django.es/blog/convenciones-proyecto-django/\nand now for django-1.3 use previous versions for older django versions.\n\nlogs directory to handle separete logs from webserver\nurls into project packages used to handle differents urls for each project\n\nYou can see an example of how to use the recipe below::\n\n  [buildout]\n  parts = satchmo django\n  eggs = ipython\n\n  [satchmo]\n  recipe = gocept.download\n  url = http://www.satchmoproject.com/snapshots/satchmo-0.6.tar.gz\n  md5sum = 659a4845c1c731be5cfe29bfcc5d14b1\n\n  [django]\n  recipe = djbuild\n  version = trunk\n  settings = development\n  eggs = ${buildout:eggs}\n  extra-paths =\n    ${satchmo:location}\n  project = dummyshop\n\n\nSupported options\n=================\n\nThe recipe supports the following options.\n\napps \n  projects that can be installed using pypi or compressed files. No handle\n  dependencies do it by hand using buildout, the decision was taken for these reasons:\n  \n  * if dependency is a django app this should be declared into this option to install\n    it into the extarnal-apps directory or it should be omited if the dependency\n    was customized and it is on local-apps directory\n    \n  * if dependency is not a django app this should be declared into eggs option.\n  \n  To delete an application should be by hand.\n\nproject\n  This option sets the name for your project. The recipe will create a\n  basic structure if the project is not already there.\n  \nexternal-apps\n  This option sets the directory where external reusable apps goes. Which do not\n  be installed as an egg or if you don't want install it as an egg.\n  \nlocal-apps\n  This option sets the directory where local reusable apps goes, usually\n  put the company name for this directory, and customized apps.\n\nprojectegg\n  Use this instead of the project option when you want to use an egg\n  as the project. This disables the generation of the project\n  structure.\n\npython\n  This option can be used to specify a specific Python version which can be a\n  different version from the one used to run the buildout.\n\nversion\n  The version argument can accept a few different types of\n  arguments. You can specify `trunk`. In this case it will do a\n  checkout of the Django trunk. Another option is to specify a release\n  number like `0.96.2`. This will download the release\n  tarball. Finally you can specify a full svn url (including the\n  revision number). An example of this would be\n  `http://code.djangoproject.com/svn/django/branches/newforms-admin@7833`.\n\nsettings\n  You can set the name of the settings file which is to be used with\n  this option. This is useful if you want to have a different\n  production setup from your development setup. It defaults to\n  `development`.\n\ndownload-cache\n  Set this to a folder somewhere on you system to speed up\n  installation. The recipe will use this folder as a cache for a\n  downloaded version of Django.\n\nextra-paths\n  All paths specified here will be used to extend the default Python\n  path for the `bin/*` scripts.\n\npth-files\n  Adds paths found from a site `.pth` file to the extra-paths.\n  Useful for things like Pinax which maintains its own external_libs dir.\n\ncontrol-script\n  The name of the script created in the bin folder. This script is the\n  equivalent of the `manage.py` Django normally creates. By default it\n  uses the name of the section (the part between the `[ ]`).\n\ntest\n  If you want a script in the bin folder to run all the tests for a\n  specific set of apps this is the option you would use. Set this to\n  the list of app labels which you want to be tested.\n\ntestrunner\n  This is the name of the testrunner which will be created. It\n  defaults to `test`.\n  \nfind-links\n  used to install apps\n\nAll following options only have effect when the project specified by\nthe project option has not been created already, on the setting file \nespecified.\n\n\nFCGI specific settings\n======================\n\nOptions for FCGI can be set within a settings file (`settings.py`). The options\nis `FCGI_OPTIONS`. It should be set to a dictionary. The part below is an\nexample::\n\n  FCGI_OPTIONS = {\n      'method': 'threaded',\n      'daemonize': 'false',\n  }\n\n\nAnother example\n===============\n\nThe next example shows you how to use some more of the options::\n\n  [buildout]\n  parts = django extras\n  eggs =\n    hashlib\n\n  [extras]\n  recipe = iw.recipe.subversion\n  urls =\n    http://django-command-extensions.googlecode.com/svn/trunk/ django-command-extensions\n    http://django-mptt.googlecode.com/svn/trunk/ django-mptt\n\n  [django]\n  recipe = djbuild\n  version = trunk\n  settings = development\n  project = exampleproject\n  wsgi = true\n  eggs =\n    ${buildout:eggs}\n  test =\n    someapp\n    anotherapp\n\nExample using .pth files\n========================\n\nPinax uses a .pth file to add a bunch of libraries to its path; we can\nspecify it's directory to get the libraries it specified added to our\npath::\n\n  [buildout]\n  parts\t= PIL\n\t  svncode\n\t  myproject\n\n  [PIL]\n  recipe\t= zc.recipe.egg:custom\n  egg\t\t= PIL\n  find-links\t= http://dist.repoze.org/\n\n  [svncode]\n  recipe\t= iw.recipe.subversion\n  urls\t\t= http://svn.pinaxproject.com/pinax/tags/0.5.1rc1\tpinax\n\n  [myproject]\n  recipe\t= djbuild\n  version\t= 1.0.2\n  eggs\t\t= PIL\n  project\t= myproject\n  settings\t= settings\n  extra-paths\t= ${buildout:directory}/myproject/apps\n\t\t  ${svncode:location}/pinax/apps/external_apps\n\t\t  ${svncode:location}/pinax/apps/local_apps\n  pth-files\t= ${svncode:location}/pinax/libs/external_libs\n  wsgi\t\t= true\n\nAbove, we use stock Pinax for pth-files and extra-paths paths for\napps, and our own project for the path that will be found first in the\nlist.  Note that we expect our project to be checked out (e.g., by\nsvn:external) directly under this directory in to 'myproject'.\n\nExample with a different Python version\n=======================================\n\nTo use a different Python version from the one that ran buildout in the\ngenerated script use something like::\n\n  [buildout]\n  parts\t= myproject\n\n  [special-python]\n  executable = /some/special/python\n\n  [myproject]\n  recipe\t= djbuild\n  version\t= 1.0.2\n  project\t= myproject\n  python\t= special-python\n\n\nExample configuration for mod_wsgi\n==================================\n\nIf you want to deploy a project using mod_wsgi you could use this\nexample as a starting point::\n\n  <Directory /path/to/buildout>\n         Order deny,allow\n         Allow from all\n  </Directory>\n  <VirtualHost 1.2.3.4:80>\n         ServerName      my.rocking.server\n         CustomLog       /var/log/apache2/my.rocking.server/access.log combined\n         ErrorLog        /var/log/apache2/my.rocking.server/error.log\n         WSGIScriptAlias / /path/to/buildout/bin/django.wsgi\n  </VirtualHost>",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carlitux/djbuild",
    "keywords": "",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djbuild",
    "package_url": "https://pypi.org/project/djbuild/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djbuild/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/carlitux/djbuild"
    },
    "release_url": "https://pypi.org/project/djbuild/1.0.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Buildout recipe for Django",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 791189,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8d2e67993497599d08525e03717e52ad4c3a5a8aaec316921f2538eccdfafd4d",
        "md5": "f93cc50da324cca99a010df1dbffd2cc",
        "sha256": "06bf8359da7108ac7a411587c20d63281a4d664688e9f57f5026fec69299b750"
      },
      "downloads": -1,
      "filename": "djbuild-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f93cc50da324cca99a010df1dbffd2cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22647,
      "upload_time": "2011-04-08T09:34:00",
      "upload_time_iso_8601": "2011-04-08T09:34:00.480431Z",
      "url": "https://files.pythonhosted.org/packages/8d/2e/67993497599d08525e03717e52ad4c3a5a8aaec316921f2538eccdfafd4d/djbuild-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}