{
  "info": {
    "author": "ali96ebrahimi@gmail.com",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Pipeline-Normalizer\n\n### Installation:\n- pip install -U spacy\n- python -m spacy download en_core_web_sm\n- pip install mofid-normalizer==1.0.82\n### Requirement:\n\n- hazm == 0.7.0\n- nltk == 3.3 \n- num2fawords == 1.1\n- spacy >= 3.0.6\n- googledrivedownloader\n### Version:\n```\nimport mofid_normalizer\nprint(mofid_normalizer.__version__)\n```\n### Pipelines\n- char_normalizer\n- spell_checker\n- date2str\n- time2str\n- num2str\n- abbreviation2word\n- affix2norm\n- word_mapper  \n- punctuation_remover\n- word_level_tokenizer\n\n### Usage\n\n```\n>>> from mofid_normalizer.spacy_loader import nlp``\n>>> with nlp.select_pipes(enable=[\"char_normalizer\"]):\n    print(nlp(\"اﯙ ایراني ٲست\"))\n>>>او ایرانی است\n\n>>> with nlp.select_pipes(enable=[\"num2str\"]):\n        print(nlp(\"من مقدار 35.75 تومان پول دارم.\"))\n>>> من مقدار سی و پنج ممیز هفتاد و چهار تومان پول دارم.\n\n>>> with nlp.select_pipes(enable=[\"time2str\"]):\n        print(nlp(\"ساعت 20:27 است.\"))\n>>> ساعت بیست و  بیست و هفت دقیقه است.\n\n>>> with nlp.select_pipes(enable=[\"date2str\"]):\n        print(nlp(\"من در تاریخ 30-2-1375 به دنیا آمدم.\"))\n        \n(***Select one of the following randomly.***)\n>>> ['من در تاریخ سیم اردیبهشت ماه  یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت ماه  یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی دو یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سی دو یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'ن در تاریخ سی اردیبهشت سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم دو سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سیم دو یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت ماه  سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت ماه  یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت ماه  یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت ماه  سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم اردیبهشت ماه  سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سی دو سال یک هزار و سیصد و هفتاد و پنج به دنیا آمدم.',\n     'من در تاریخ سیم دو سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی اردیبهشت ماه  سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سیم دو یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.',\n     'من در تاریخ سی دو سال یک هزار و سیصد و هفتاد و پنج شمسی به دنیا آمدم.']\n\n>>> with nlp.select_pipes(enable=[\"abbreviation2word\"]):\n        print(nlp(\"امام علی ع در 1 ه.ق به دنیا آمدند.\"))\n>>> امام علی علیه السلام در 1 هجری قمری به دنیا آمدند.\n\n>>> with nlp.select_pipes(enable=[\"affix2norm\"]):\n        print(nlp(\"شما رفته بودهباشید))\n>>> شما رفته بوده باشید\n\n>>> with nlp.select_pipes(enable=[\"punctuation_remover\"]):\n        print(nlp(\"شما! به علایم نگارشی، تماشا+- نمیکنید. شما هیچ علایم نگارشی ( نخواهید دید./\")\n\n>>> شما به علایم نگارشی تماشا نمیکنید شما هیچ علایم نگارشی  نخواهید دید\n  \n>>> with nlp.select_pipes(enable=[\"word_level_tokenizer\"]):\n        print(nlp(\"من در تاریخ 30-2-1375 در راس ساعت 20:30 به منزل رفتم. آنها در این تاریخ بیست سال از ه.ق عقبلتر هستند.\"))\n>>> ['من', 'در', 'تاریخ', '30-2-1375', 'در', 'راس', 'ساعت', '20:30', 'به', 'منزل', 'رفتم.', 'آنها', 'در', 'این', 'تاریخ', 'بیست', 'سال', 'از', 'ه.ق', 'عقبلتر', 'هستند.']\n\n>>> print(nlp(\"این یک نمونه کامل از مثالهای نرمالایزر موجود خواهدبود. این نرمالایزر در ساعت 20:47 ساخته شدهاست. شما هیچ گونه علایم نگارشی ﺆ کاراکتر غیر عادی نخواهیدخواند. هدف ما نرمالسازی تمامی کتابها است.\"))\n\n>>> ['این', 'یک', 'نمونه', 'کامل', 'از', 'مثال', 'های', 'نرمالایزر', 'موجود', 'خواهد', 'بود', 'این', 'نرمالایزر', 'در', 'ساعت', 'بیست', 'و', 'چهل', 'و', 'هفت', 'دقیقه', 'ساخته', 'شده', 'است', 'شما', 'هیچ', 'گونه', 'علا', 'یم', 'نگارشی', 'و', 'کاراکتر', 'غیر', 'عادی', 'نخواهید', 'خواند', 'هدف', 'ما', 'نرمالسازی', 'تمامی', 'کتاب', 'ها', 'است']\n\n>>> with nlp.select_pipes(enable=[\"word_mapper\"]):\n        print(nlp(اینگونه))\n>>> \"این\\u200cگونه\"\n\n```\n\n\n### Multiprocessing\n#### Multiprocessing with 4 processes\n`>>> docs = nlp.pipe(texts, n_process=4)`\n\n#### With as many processes as CPUs (use with caution!)\n`>>> docs = nlp.pipe(texts, n_process=-1)`\n\n#### Default batch size is `nlp.batch_size` (typically 1000)\n`>>> docs = nlp.pipe(texts, n_process=2, batch_size=2000)`\n\n### Disabling\n```\n>>> with nlp.select_pipes(disable=[\"affix2norm\", \"date2str\"]):\n        print(nlp(texts))\n```\n\n\n### Enabling multiple pipe\n\n```\n>>> with nlp.select_pipes(enable=[\"char_normalizer\",\"spell_checker\"]):\n        print(nlp(texts))\n\n```\n\n### Remove pipe\n\n```\n>>> nlp.remove_pipe(\"spell_checker\")\n```\n\n### Customize pipe\n\n```\n>>> nlp.remove_pipe(\"word_mapper\")\n>>> nlp.add_pipe(\"word_mapper\", after=\"affix2norm\", config={\"config_file\": os.path.dirname(os.path.realpath(__file__)) + \"/\" +\n                 'mappings.json',\"half_space_char\":'\\u200c'})\n```\n### Default modules format in library\n\n```\nnlp.add_pipe(\"char_normalizer\", first=True,\n             config={\"config_file\": conf_path + 'character_mappings.json'})\nnlp.add_pipe(\"spell_checker\", after=\"char_normalizer\", config={})\nnlp.add_pipe(\"date2str\", after=\"spell_checker\", config={})\nnlp.add_pipe(\"time2str\", after=\"date2str\", config={})\nnlp.add_pipe(\"num2str\", after=\"time2str\", config={})\nnlp.add_pipe(\"abbreviation2word\", after=\"num2str\", config={})\nnlp.add_pipe(\"affix2norm\", after=\"abbreviation2word\",\n             config={\"config_file\": conf_path + 'affix.json', \"double_postfix_joint\": True})\nnlp.add_pipe(\"word_mapper\", after=\"affix2norm\",\n             config={\"config_file\": conf_path + 'word_mappings.json', \"half_space_char\": \"  \"})\n\nnlp.add_pipe(\"punctuation_remover\", after=\"abbreviation2word\", config={})\nnlp.add_pipe(\"word_level_tokenizer\")\n```\n### Blank pipes\nthis class is completely blank, you can customize it.\n```\nfrom spacy_loader import nlp_blank\nnlp.add_pipe()\n\n```\n### Config files templates\nyou can modify some modules, new config files should be in the following format.\n#### affix.json\n    \n    {\n    e.g: می‌کند <--  می کند\n    \"space_jointer_to_next\": [\n    \"بی\",\n    \"می\",\n    \"نمی\"],\n    e.g: کتاب‌ها <--  کتاب ها\n    \"space_jointer_to_previous\": [\n    \"هایی\",\n    \"ها\",\n    \"های\",\n    ....\n      ],\n    e.g: رفته‌شده‌است <--  رفته شده است\n    \"space_jointer_to_next_previous\": [\n        \"شده\",\n        \"نشده\"\n      ],\n    e.g: اطلاح‌طلبان <--  اصلاح طلبان\n    \"space_jointer_to_previous_plus\": [\n        \"طلبان\",\n        \"طلب\",\n        ....\n      ],\n    e.g: کتاب‌تان <--  کتابتان\n    \"prop_postfix_all\": [\n        \"یم\",\n        \"یت\",\n        \"یش\",\n        ....\n      ],\n    e.g: کتاب‌ها <--  کتابها\n    \"plural_postfix_all\": [\n        \"ها\",\n        \"ات\",\n        \"های\",\n        ....\n      ],\n    Words in this list will not be splitted\n    \"postfix_joint\": [\n        \"یم\",\n        \"یت\",\n        \"یش\",\n        \"ش\",\n        ....\n      ],\n    e.g: علاقه‌مند <--  علاقهمند\n    \"irregular_postfix_all\": [\n        \"نده\",\n        \"گانه\",\n        \"دان\",\n        \"ستان\",\n        \"چی\",\n        ....\n      ],\n    irregular Words in this list will not be splitted.\n    \"irregular_postfix_joint\": [\n        \"نده\",\n        \"دان\",\n        \"ستان\",\n        \"چی\",\n        ....\n      ],\n    e.g: پاد‌زهر <--  پادزهر\n    \"prefix_all\": [\n        \"نا\",\n        \"پاد\",\n        \"باز\",\n        ....\n      ],\n    prefix Words in this list will not be splitted.\n    \"prefix_joint\": [],\n    e.g: فرو‌رفت <--  فرورفت\n    \"verb_prefix\": [\n        \"در\",\n        \"بر\",\n        \"پر\",\n        ....\n      ],\n    prefix verbs in this list will not be splitted.\n    \"verb_prefix_joint\": [],\n      \"slang_verbs_prefix\": [\n        \"می\",\n        \"نمی\"\n      ]\n    }\n\n#### character_mapping.json\nNote that only the modules in the Mapper will be applied, and the modules in the  Mapper_ignore  will not be applied.\n\n    {\n      \"Mapper\": {\n        \"NUMBERS_MAP_EN\": {\n          \"0\": \"0\",\n     \n      \"\\u0660\": \"0\",\n      \"۰\": \"0\",\n      ....\n    },\n    \"FA_ALPHABET_MAP\": {\n      \"\\u0627\": \"\\u0627\",\n      \"ٿ\": \"ت\",\n      ....\n    \n    },\n    \"DIACRITICS_MAP\": {\n      \"\\u064b\": \"\",\n      \"\\u064c\": \"\",\n      \"\\u064d\": \"\",\n        .....\n    },\n    \"EN_ALPHABET_MAP\": {\n      \"a\": \"a\",\n      \"\\uff41\": \"a\",\n      \"\\uff42\": \"b\",\n        ....\n \n    },\n    \"VALID_SYMBOL_MAP\": {\n      \",\": \",\",\n      \"，\": \",\",\n        ....\n    },\n    \"INVALID_SYMBOL_MAP\": {\n      \"\\u00a8\": \"\",\n      \"\\u06c1\": \" \",\n      \"\\u2063\": \" \",\n      ....\n    },\n    \"HALF_SPACE\": {\n      \"\\u200e\": \"\\u200c\",\n      \"\\u200c\": \"\\u200c\",\n        ....\n    }\n      },\n      \"Mapper_ignore\": {\n        \"FA_Numbers\": {\n          \"0\": \"\\u06F0\",\n          \"1\": \"\\u06F1\",\n            ....\n        },\n        \"SPACE\": {\n          \"\\u2005\": \" \",\n          \"\\u2009\": \" \",\n            ....\n        },\n        \"english_upper\": {\n          \"A\": \"a\",\n          \"B\": \"b\",\n          .....\n        },\n        \"NUMBERS_MAP_FA\": {\n          \"\\u0660\": \"\\u06F0\",\n          \"\\u0661\": \"\\u06F1\",\n           ....\n        }\n      }\n    }\n\n#### word_mapping.json\n    {\n      \"\\ufeffبیخبر\": \"بی\\u200cخبر\",\n      \"بیتوجهی\": \"بی توجهی\",\n      \"بیطرفانه\": \"بی\\u200cطرفانه\",\n      \"آنها\": \"آن\\u200cها\",\n        ....\n    }\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mofid-normalizer",
    "package_url": "https://pypi.org/project/mofid-normalizer/",
    "platform": "",
    "project_url": "https://pypi.org/project/mofid-normalizer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mofid-normalizer/1.0.82/",
    "requires_dist": [
      "nltk",
      "num2fawords",
      "spacy",
      "googledrivedownloader"
    ],
    "requires_python": "",
    "summary": "first version of Mofid Normalizer",
    "version": "1.0.82",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12744422,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "042d86c53fb4fb5c90659abfec516e4e1a8fb7b98ca25fad3cc62a279692ff80",
        "md5": "7dd621b24aa03fc820df07200b587278",
        "sha256": "c02b53fa919bde0777a0cb47fb835801890ab58cd79316cdf1c54bef32c2d04a"
      },
      "downloads": -1,
      "filename": "mofid_normalizer-1.0.82-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7dd621b24aa03fc820df07200b587278",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 876302,
      "upload_time": "2022-01-31T13:10:18",
      "upload_time_iso_8601": "2022-01-31T13:10:18.947511Z",
      "url": "https://files.pythonhosted.org/packages/04/2d/86c53fb4fb5c90659abfec516e4e1a8fb7b98ca25fad3cc62a279692ff80/mofid_normalizer-1.0.82-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}