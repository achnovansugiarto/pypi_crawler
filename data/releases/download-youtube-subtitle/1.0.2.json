{
  "info": {
    "author": "xsthunder",
    "author_email": "xsthunder@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Download Youtube Subtitle [![Build Status](https://travis-ci.com/xsthunder/download-youtube-subtitle.svg?branch=master)](https://travis-ci.com/xsthunder/download-youtube-subtitle)\n\nDownload youtube subtitles(closed caption, cc) or srt as txt or json. \n\n### Features\n\n1. Support exportting translation at the same time which is useful for language study.\n3. Support proxy for youtube, follow the step at [Using Anaconda behind a company proxy by setting environment-variables](https://docs.anaconda.com/anaconda/user-guide/tasks/proxy/#environment-variables).\n4. Full test with traivis [![Build Status](https://travis-ci.com/xsthunder/download-youtube-subtitle.svg?branch=master)](https://travis-ci.com/xsthunder/download-youtube-subtitle) to make sure things are on rail.\n\npython version of [algolia/youtube-captions-scraper: Fetch youtube user submitted or fallback to auto-generated captions](https://github.com/algolia/youtube-captions-scraper)\n \n \n### Example\n\n`dl-youtube-cc 5tKOV0KqPlg --translation zh-Hans`\n\nor\n\n`dl-youtube-cc https://www.youtube.com/watch?v=5tKOV0KqPlg --translation zh-Hans`\n\n will saved as `HowSouthAfricaCouldPreparetheU.S.forPresidentTrumpTheDailyShow.txt`\n\n```text\nhttps://youtube.com/get_video_info?video_id=5tKOV0KqPlg\n---------00:01----------\nAll right, well, uh,\nlet's get back to real life\n好吧，恩，让我们回到现实生活中\n\n---------00:04----------\nor whatever we're calling\nthis thing now.\n或我们现在所说的这个东西。 \n// continue\n```\n\n`dl-youtube-cc 5tKOV0KqPlg --translation zh-Hans --to_json=True` will saved as `HowSouthAfricaCouldPreparetheU.S.forPresidentTrumpTheDailyShow.json`\n\n\n```json\n\n{\n    \"original\": [\n        {\n            \"start\": \"1.367\",\n            \"dur\": \"3.137\",\n            \"text\": \"All right, well, uh,\\nlet's get back to real life\"\n        },\n\t// continue\n\t]\n\t\"translation\": [\n\t{\n\t\t\"start\": \"1.367\",\n\t\t\"dur\": \"3.137\",\n\t\t\"text\": \"好吧，恩，让我们回到现实生活中\"\n\t},\n\t\t// continue\n\t]\n\t\"merged\": [\n\t{\n\t\t\"start\": \"1.367\",\n\t\t\"dur\": \"3.137\",\n\t\t\"text\": \"All right, well, uh,\\nlet's get back to real life\",\n\t\t\"translate_text\": \"好吧，恩，让我们回到现实生活中\"\n\t},\n\t\t// continue\n\t]\n```\n\n \n## Install and Run\n\n### Install via [download-youtube-subtitle · PyPI](https://pypi.org/project/download-youtube-subtitle/)\n\n1. `pip install download-youtube-subtitle` or `pip install download-youtube-subtitle --user`\n2. `dl-youtube-cc -h`\n\nor uninstall to reinstall new version\n\n`pip uninstall download-youtube-subtitle -y`\n\n### run in cli\n\n`dl-youtube-cc -h` will show the following.\n\n```\n\nNAME\n    dl-youtube-cc - download youtube closed caption(subtitles) by videoID\n\nSYNOPSIS\n    dl-youtube-cc VIDEOID <flags>\n\nDESCRIPTION\n    Examples:\n    dl-youtube-cc -h # to see this helpful infomation\n    dl-youtube-cc 5tKOV0KqPlg --save_to_file=False # print stuff in console\n    dl-youtube-cc 5tKOV0KqPlg --output_file='test.txt' # print stuff in named file\n    dl-youtube-cc 5tKOV0KqPlg --to_json=True # print stuff in json\n    dl-youtube-cc 5tKOV0KqPlg --translation 'ja' # use japanese translation, see ./lang_code for full list\n    dl-youtube-cc 5tKOV0KqPlg --translation False # without translation\n    dl-youtube-cc 5tKOV0KqPlg --caption_num=1 # choose the caption num\n\nPOSITIONAL ARGUMENTS\n    VIDEOID\n        string, the video link or the id of youtube video, the string after 'v=' in a youtube video link\n\nFLAGS\n    --output_file=OUTPUT_FILE\n        string, default to video title\n    --save_to_file=SAVE_TO_FILE\n        bool, default to True, True or False\n    --translation=TRANSLATION\n        bool or string, which will be displayed as original transcript, default to 'zh-Hans' for simplified Chinese, False or lang code, see ./lang_code.json for full list\n    --to_json=TO_JSON\n        bool, default to False, export caption to json\n    --caption_num=CAPTION_NUM\n        number, default to 0, choose the caption which will be displayed as original transcript\n    --remove_font_tag=REMOVE_FONT_TAG\n        bool, default to True, remove font tag in txt transcript, but not in json's merged\n\nNOTES\n    You can also use flags syntax for POSITIONAL ARGUMENTS\n\t\n```\n\n### Use in Code\n\n```python\nimport download_youtube_subtitle.common as common\nimport download_youtube_subtitle.main as download_youtube_subtitle\n# ...\n```\n\n## Development\n\n### Environment Setup\n\n[for conda](./config/create-env.sh)\n\n```bash\npip install 'fire' 'requests' 'IPython'\n```\n\n### Usage\n\n```bash\npython main.py -h\npython main.py VIDEOID\n```\n\n### Tests\n\n```bash\ncd tests\n./run.sh\n./test_cli.sh\n```\n\n#### Ref \n\n[deployment - How can I use setuptools to generate a console_scripts entry point which calls `python -m mypackage`? - Stack Overflow](https://stackoverflow.com/questions/27784271/how-can-i-use-setuptools-to-generate-a-console-scripts-entry-point-which-calls)\n\n[Packaging Python Projects — Python Packaging User Guide](http://packaging.python.org/tutorials/packaging-projects/)\n\n`./nb/notebook2script.py` from [course-v3/nbs/dl2 at master · fastai/course-v3](https://github.com/fastai/course-v3/tree/master/nbs/dl2)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xsthunder/download-youtube-subtitle",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "download-youtube-subtitle",
    "package_url": "https://pypi.org/project/download-youtube-subtitle/",
    "platform": "",
    "project_url": "https://pypi.org/project/download-youtube-subtitle/",
    "project_urls": {
      "Homepage": "https://github.com/xsthunder/download-youtube-subtitle"
    },
    "release_url": "https://pypi.org/project/download-youtube-subtitle/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "download youtube subtitles(closed caption, cc) as txt or json",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14861185,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d0488d5e53d1aa9b887efb41c0aa8767de536bcbf6470413c93184098b52c63",
        "md5": "0aefc259665c8f7dc56f730e04abb8bb",
        "sha256": "439ee274eaf9d6747626dba4875d223c45fea771bf0eead21c90fd5593ecd30c"
      },
      "downloads": -1,
      "filename": "download-youtube-subtitle-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0aefc259665c8f7dc56f730e04abb8bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 8477,
      "upload_time": "2020-11-30T07:07:56",
      "upload_time_iso_8601": "2020-11-30T07:07:56.106035Z",
      "url": "https://files.pythonhosted.org/packages/0d/04/88d5e53d1aa9b887efb41c0aa8767de536bcbf6470413c93184098b52c63/download-youtube-subtitle-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}