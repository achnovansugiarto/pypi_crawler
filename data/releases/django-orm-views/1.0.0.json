{
  "info": {
    "author": "iwoca",
    "author_email": "Josh Dutton <j.dutton@iwoca.co.uk>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django_orm_views\n\nThe package for managing database views using django, without the migrations.\n\n## What does this support?\nThis package adds support to Django for **writing** Postgres views using:\n* Raw SQL\n* Django Querysets\n\nThey look something like this:\n\n```python\nclass MySQLView(PostgresViewFromSQL):\n    sql = \"\"\"\n       SELECT col_a, col_b FROM table_1;\n    \"\"\"\n```\n\n```python\nclass MyQuerysetView(PostgresViewFromQueryset):\n    \n    def get_queryset(self):\n        return (\n            Table1\n            .objects\n            .values('col_a', 'col_b')\n        )\n```\n\nSee some more examples in the tests (here)[https://github.com/iwoca/django-orm-views/blob/main/tests/test_project/test_app/postgres_views.py]\n\n\nThis also supports the construction of materialised views via `PostgresMaterialisedViewMixin`. Note that the function `refresh_materialized_view` will\nneed to be managed by the user in order to keep these up to date where required.\n   \n\n## What does this not support?\n\n* Reading from the views in an ORM-friendly way.\n* Any database engines aside from Postgres (unless syntax happens to be the same!)\n\n## When should I use this?\n\nOur use-case is for a database which is managed by Django\nin which we would like to provide an analytics-friendly\nrepresentation of some of our data.  This involves giving\nanalytics direct access to our database (whilst using a\npermissions framework), but using views to expose the data\nin a more simple way, as well as obscuring data which\nwe consider personally identifiable/sensitive.\n\nThere are other frameworks existing which do similar things,\nusually including reads via the ORM.  We found that these\npackages all generate migrations (despite being unmanaged)\nand we wanted to remove this from the django migrations process\naltogether - there seemed to be no value add by including\nmigrations and they would just muddy our migration states.\n\n## Cool! But how do I use this?\n\n* `pip install django-orm-views`\n* Add `'django_orm_views'` to your `INSTALLED_APPS`\n* Create a `postgres_views.py` (file or package) inside any app\n* Add a `PostgresViewFromQueryset` or `PostgresViewFromSQL` \nto your `postgres_views.py` (as above)\n* run `./manage.py sync_views`\n\nA `postgres_views.py` file might look something like the following:\n\n```python\nclass ComplexViewFromQueryset(PostgresViewFromQueryset):\n\n    prefix = 'test'  # This is optional, but allows you to prefix the table names for views\n\n    def get_queryset(self):  # Return a `.values` with the query you desire\n        return (\n            TestModelWithForeignKey\n            .objects\n            .all()\n            .annotate(\n                double_integer_col=F('foreign_key__integer_col') * 2\n            )\n            .values(\n                'id',\n                'foreign_key__id',\n                'foreign_key__integer_col',\n                'foreign_key__character_col',\n                'foreign_key__date_col',\n                'foreign_key__datetime_col',\n                'double_integer_col',\n            )\n        )\n```\n\nWhen we run the `./manage.py sync_views`, we'll create a view called `test_complexviewfromqueryset` under\nthe `views` schema.\n\nNote, you can put `./manage.py sync_views` into your CI/CD.  It works by:\n* Opening a transaction\n* Dropping the views schema\n* Recreating the views schema\n* Recreating all views under that schema\n* Committing the transaction\n\n## What's still to come?\n\n* Support for more database engines.  This currently only supports Postgres, \nbut should be a reasonably light shift to support other database engines.\n* Support for ORM-friendly readable views (optionally!)\n* Making the package more configurable using settings.\n* Consideration of implementing reads using the ORM\n* Consideration of 0 downtime deployments with views.\n  * Note, this can still be achieved with the current implementation,\n  but a bad migration (with a view depending) could\n  cascade a view and create downtime.  Ideally migrations + \n  view creation should happen in a single transaction.\n\n## Contributing\n\nFeel free to fork the package and propose changes.  The repo comes with a test django project which\ncan be used to effectively test changes.  It also demonstrates the functionality pretty well.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright 2022 iwoca Ltd Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-orm-views",
    "package_url": "https://pypi.org/project/django-orm-views/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-orm-views/",
    "project_urls": {
      "Bug Tracker": "https://github.com/iwoca/django-orm-views/issues",
      "Homepage": "https://github.com/iwoca/django-orm-views"
    },
    "release_url": "https://pypi.org/project/django-orm-views/1.0.0/",
    "requires_dist": [
      "django (<4.0,>=2.1)",
      "dataclasses (>=0.7) ; python_version < \"3.7.0\"",
      "psycopg2-binary (==2.8.6) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "A framework for managing database views based on Django, without the migrations",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15487761,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30333cca9374a7b611567f5a2f2c7bbd7d5db912685ae0f5f5a3ded8837f5596",
        "md5": "5a1dfd397f78db3b210d3c90fe6ea7bf",
        "sha256": "c1a52e8a39bb0f9ac1100c8d1ed2f8e1eb9f652765654ccebd7746be7f4a88d0"
      },
      "downloads": -1,
      "filename": "django_orm_views-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a1dfd397f78db3b210d3c90fe6ea7bf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11849,
      "upload_time": "2022-08-02T16:05:43",
      "upload_time_iso_8601": "2022-08-02T16:05:43.165098Z",
      "url": "https://files.pythonhosted.org/packages/30/33/3cca9374a7b611567f5a2f2c7bbd7d5db912685ae0f5f5a3ded8837f5596/django_orm_views-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f32a22c1186d2d1c2ba1c3ad6228055e3222aaa633b570f0cb82853255a68f3",
        "md5": "b782e45aacb1760334545917f442a529",
        "sha256": "76d23075254baf3b578ea5060eeca43171ceed4d2210c0b7e9fe1b5c00e1006a"
      },
      "downloads": -1,
      "filename": "django-orm-views-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b782e45aacb1760334545917f442a529",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11445,
      "upload_time": "2022-08-02T16:05:44",
      "upload_time_iso_8601": "2022-08-02T16:05:44.435355Z",
      "url": "https://files.pythonhosted.org/packages/3f/32/a22c1186d2d1c2ba1c3ad6228055e3222aaa633b570f0cb82853255a68f3/django-orm-views-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}