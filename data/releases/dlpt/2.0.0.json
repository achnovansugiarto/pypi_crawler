{
  "info": {
    "author": "Damogran Labs",
    "author_email": "info@damogranlabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![PyPI - License](https://img.shields.io/pypi/l/dlpt)\n![PyPI](https://img.shields.io/pypi/v/dlpt)\n![Read the Docs](https://img.shields.io/readthedocs/dlpt)\n[![codecov](https://codecov.io/gh/damogranlabs/dlpt/branch/main/graph/badge.svg?token=9RXXPWZHRF)](https://codecov.io/gh/damogranlabs/dlpt)\n\n# dlpt\nDamogran Labs Python Tools, a collection of modules with utility functions to ease everyday Python \nusage. It runs smoothly on windows, linux and mac-os.  \nHomepage: [https://damogranlabs.com/2021/01/dlpt/](https://damogranlabs.com/2021/01/dlpt/)  \nPyPi: [https://pypi.org/project/dlpt/](https://pypi.org/project/dlpt/)  \nDocs: [https://dlpt.readthedocs.io/en/latest/](https://dlpt.readthedocs.io/en/latest/)  \nInstall: `pip install -U dlpt`  \n\n## Why?\nThis package main purpose is to stop reinventing the wheel on top of the built-in Python functions \nin every single project. Everyday struggle with:\n* how do I initialize logger and add file handler?\n* how do I temporary change current working directory?\n* how do I spawn a subprocess and add stdout on any exception?\n* how do I get only folders inside some location?\n* how do I parse JSON file with comments?\n* how do I format time to string in one line?\n* how do I dynamically import some module that is not on a `sys.path`?\n* ...\n\nThese and many more everyday Python code questions should be covered with this library. Nothing extra,\njust simplified.  \nMostly built upon standard built-in code, but with a lot more straight-forward and less cluttered API.\n\n## Modules\n`dlpt.pth`: everything about paths and filed/folder operations: list files/folders, copy/remove, get extensions, ...  \n`dlpt.utils`: everyhting we always need and never remember: list/dict comparison, values<->string transformation, module inspections, ...  \n`dlpt.log`: create new logger(s) and/or add common handlers (console/stream, file, ...) to any logger. Supports cross-process logging.  \n`dlpt.proc`: everything about common process use cases, but with more info on exceptions and easier straight-forward API.  \n`dlpt.time`: everything about time<->string transformation and code timing (timing decorator or special function wrapper)...  \n`dlpt.json`: read/write JSON files or python objects, with comments and smart pickling using `jsonpickle` library...  \n`dlpt.importer`: dynamically import python modules and inspect its object or call its functions/classes...\n\n\n## Examples:  \n> How do I initialize logger and add file handler?\n```python\n# init default logger with console and file handler (file in <cwd>/log subfolder)\nimport dlpt\n\nlogger = dlpt.log.createLogger(\"myLogger\")\ndlpt.log.addConsoleHandler(logger)\nhdlr, fPath = dlpt.log.addFileHandler(logger,\n                                     \"dlpt_example.log\")\nlog.debug(f\"Logger initialised, file: {fPath}\")\n```\n\n> How do I temporary change current working directory?\n```python\nimport os\nimport dlpt\n\nprint(f\"Current working directory: {os.getcwd()}\")\n\ndirPath = os.path.join(os.getcwd(), \"..\", \"..\")\nwith dlpt.pth.ChangeDir(dirPath):\n    print(f\"Current temporary working directory: {os.getcwd()}\")\n\nprint(f\"Current working directory: {os.getcwd()}\")\n```\n\n> How do I spawn a subprocess and add stdout on any exception?\n```python\nimport sys\n\nimport dlpt\n\n# a valid subprocess\nargs = [sys.executable, \"-c\", \"import dlpt; print(dlpt.utils.floatToStr(12324.5678))\"]\nproc = dlpt.proc.spawnSubproc(args)\nprint(proc.stdout) # will print '12324.57'\n\n# invalid subprocess, will throw exception\nargs = [sys.executable, \"-c\", \"throw exception\"]\ndlpt.proc.spawnSubproc(args)\n```\n\n> How do I get only folders inside some location?\n```python\nimport dlpt\n\nfiles = dlpt.pth.getFilesInFolderTree(os.getcwd(), excludeExt=[\".pyc\"])\nfor fPath in files:\n    print(f\"File {dlpt.pth.getName(fPath)}: {fPath}\")\n```\n> How do I parse JSON file with comments?\n```python\nimport dlpt\n\nfPath = input(\"Enter a path to a JSON file with comments: \")\ndata = dlpt.json.read(fPath)\n# alternatively, if file was created with `dlpt.json.writeJsonpickle()`, user can:\ndata = dlpt.json.readJsonpickle(fPath)\n```\n\n> How do I format time to string in one line?\n```python\nimport dlpt\n\n# 2 days, 4 hours, 6 mins, 12 sec, 0.33 milliseconds\nsec = dlpt.time.timeToSeconds(h=52, m=6, s=12.033)\nhmsStr = dlpt.time.secToStr(durationSec, dlpt.time.TIME_FORMAT_HMS_STRING)\nprint(hmsStr) # will print: '52 h 6 min 12.33 sec'\n```\n\n> How do I dynamically import some module that is not on a `sys.path`?\n```python\nimport dlpt\n\nfPath = input(\"Enter a path to a python module that you wish to dynamically import: \")\nimporter = dlpt.importer.ModuleImporter(fPath)\nprint(\"Does module have an object with name 'myObject'? {importer.hasObject('myObject')}\")\nmodule = importer.getModule()\n# call a function of this module:\nmodule.someFunction()\n```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/damogranlabs/dlpt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dlpt",
    "package_url": "https://pypi.org/project/dlpt/",
    "platform": "",
    "project_url": "https://pypi.org/project/dlpt/",
    "project_urls": {
      "Documentation": "https://dlpt.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/damogranlabs/dlpt"
    },
    "release_url": "https://pypi.org/project/dlpt/2.0.0/",
    "requires_dist": [
      "jsonpickle",
      "psutil"
    ],
    "requires_python": ">=3.6",
    "summary": "Damogran Labs Python Tools",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12878157,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d070bb5e0db31d107f6a11dfeb41b9e020d38cb0ea5fedc544f2bd4f3f8e2304",
        "md5": "71181a3ead2804d60bfefd07f9574a2f",
        "sha256": "079473dcc366c6e64fd4d6f46f0fe39898662fafd7ac1625789d05196ca81ae1"
      },
      "downloads": -1,
      "filename": "dlpt-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "71181a3ead2804d60bfefd07f9574a2f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 29838,
      "upload_time": "2021-10-10T16:21:08",
      "upload_time_iso_8601": "2021-10-10T16:21:08.368146Z",
      "url": "https://files.pythonhosted.org/packages/d0/70/bb5e0db31d107f6a11dfeb41b9e020d38cb0ea5fedc544f2bd4f3f8e2304/dlpt-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30e85911e371bbb2b6321e4b99f786cbb0e3012dc4a6e1690b42f096b64eb084",
        "md5": "b90e682116bc9ac62969e991f2502205",
        "sha256": "2a28e0fe8d6b81e2f9645183e8fb198cdb9d956d6f86a39848cc737bb6989125"
      },
      "downloads": -1,
      "filename": "dlpt-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b90e682116bc9ac62969e991f2502205",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27937,
      "upload_time": "2021-10-10T16:21:09",
      "upload_time_iso_8601": "2021-10-10T16:21:09.686686Z",
      "url": "https://files.pythonhosted.org/packages/30/e8/5911e371bbb2b6321e4b99f786cbb0e3012dc4a6e1690b42f096b64eb084/dlpt-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}