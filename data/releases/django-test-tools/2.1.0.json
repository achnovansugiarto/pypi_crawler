{
  "info": {
    "author": "Luis Carlos Berrocal",
    "author_email": "luis.berrocal.1942@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=============================\nDjango Test Tools\n=============================\n\n.. image:: https://badge.fury.io/py/django-test-tools.svg\n    :target: https://badge.fury.io/py/django-test-tools\n\n.. image:: https://travis-ci.org/luiscberrocal/django-test-tools.svg?branch=master\n    :target: https://travis-ci.org/luiscberrocal/django-test-tools\n\n.. image:: https://codecov.io/gh/luiscberrocal/django-test-tools/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/luiscberrocal/django-test-tools\n\n.. image:: https://pyup.io/repos/github/luiscberrocal/django-test-tools/shield.svg\n     :target: https://pyup.io/repos/github/luiscberrocal/django-test-tools/\n     :alt: Updates\n\n.. image:: https://readthedocs.org/projects/django-test-tools/badge/?version=latest\n    :target: https://django-test-tools.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nSimple tests tools to make testing faster and easier. Most of the tools are to do a quick scaffolding for tests.\n\nThe tools presume a naming convention:\n\n- **Tests:** Are named with the convention **TestCaseModelName**. For a model named *Poll* the test would be generated\n  as the testing class would be *TestCasePoll*\n- **Factories:** Are named with the convention **ModelName**. For a model named *Poll* the test would be generated\n  as the testing class would be *PollFactory*\n- **Serializers:** Are named with the convention **TestCaseSerializer**. For a model named *Poll* the test would be generated\n  as the testing class would be *PollSerializer*\n\n\nCompatibility matrix:\n\n+----------------+---------------+--------------+--------------+\n| Python version | Django 1.11.x | Django 2.2.x | Django 3.0.x |\n+----------------+---------------+--------------+--------------+\n|       3.7      |       x       |       x      |       x      |\n+----------------+---------------+--------------+--------------+\n|       3.6      |       x       |       x      |       x      |\n+----------------+---------------+--------------+--------------+\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-test-tools.readthedocs.io.\n\nQuickstart\n----------\n\nInstall Django Test Tools:\n\n.. code-block:: bash\n\n    pip install django-test-tools\n\n\nIn your settings.py file add it to your `INSTALLED_APPS`\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_test_tools.apps.DjangoTestToolsConfig',\n        ...\n    )\n\n\nCreate an output folder in the root folder of you project, name it what ever you want, and add the settings\nvariable **TEST_OUTPUT_PATH** pointing to it. Make sure to add this folder to your **.gitignore** file.\n\n.. code-block:: python\n\n    import environ\n\n    ROOT_DIR = (\n        environ.Path(__file__) - 3\n    )  # (my_project/config/settings/base.py - 3 = alpha_clinic/)\n    APPS_DIR = ROOT_DIR.path(\"my_project\")\n    TEST_OUTPUT_PATH = ROOT_DIR.path(\"output\").root\n\nFeatures\n--------\n\nFactory Generator\n++++++++++++++++++\n\nTo create `Factory Boy`_ style factories.\n\nFor a django project named polling_app with an app name poll the following command will generate the scaffolding for\nthe tests for all the models in th app polls.\n\n.. code-block:: bash\n\n    $  python manage.py generate_factories polling_app.polls\n\n\nFor the following models\n\n\n.. code-block:: python\n\n    class OperatingSystem(models.Model):\n        name = models.CharField(max_length=20)\n        version = models.CharField(max_length=5)\n        licenses_available = models.IntegerField()\n        cost = models.DecimalField(decimal_places=2, max_digits=7)\n\n        class Meta:\n            unique_together = ('name', 'version')\n\n\n    class Server(models.Model):\n        PRODUCTION = 'PROD'\n        DEVELOPMENT = 'DEV'\n        USE_CHOICES = ((PRODUCTION, 'Prod'),\n                       (DEVELOPMENT, 'Dev'))\n        name = models.CharField(max_length=20, unique=True)\n        notes = models.TextField()\n        virtual = models.BooleanField()\n        ip_address = models.GenericIPAddressField()\n        created = models.DateTimeField()\n        online_date = models.DateField()\n        operating_system = models.ForeignKey(OperatingSystem, related_name='servers', on_delete=models.CASCADE)\n        server_id = models.CharField(max_length=6)\n        use = models.CharField(max_length=4, choices=USE_CHOICES, default=DEVELOPMENT)\n        comments = models.TextField(null=True, blank=True)\n\n\n\nrunning `python manage.py generate_factories example.servers > ./output/factories.py` will create the following factories\n\n.. code-block:: python\n\n    import string\n\n    from random import randint\n    from pytz import timezone\n\n    from django.conf import settings\n\n    from factory import Iterator\n    from factory import LazyAttribute\n    from factory import SubFactory\n    from factory import lazy_attribute\n    from factory.django import DjangoModelFactory, FileField\n    from factory.fuzzy import FuzzyText, FuzzyInteger\n    from faker import Factory as FakerFactory\n\n    from example.servers.models import OperatingSystem, Server\n\n    faker = FakerFactory.create()\n\n\n    class OperatingSystemFactory(DjangoModelFactory):\n        class Meta:\n            model = OperatingSystem\n\n        name = LazyAttribute(lambda x: faker.text(max_nb_chars=20))\n        version = LazyAttribute(lambda x: faker.text(max_nb_chars=5))\n        licenses_available = LazyAttribute(lambda o: randint(1, 100))\n        cost = LazyAttribute(lambda x: faker.pydecimal(left_digits=5, right_digits=2, positive=True))\n\n    class ServerFactory(DjangoModelFactory):\n        class Meta:\n            model = Server\n\n        name = LazyAttribute(lambda x: faker.text(max_nb_chars=20))\n        notes = LazyAttribute(lambda x: faker.paragraph(nb_sentences=3, variable_nb_sentences=True))\n        virtual = Iterator([True, False])\n        ip_address = LazyAttribute(lambda o: faker.ipv4(network=False))\n        created = LazyAttribute(lambda x: faker.date_time_between(start_date=\"-1y\", end_date=\"now\",\n                                                               tzinfo=timezone(settings.TIME_ZONE)))\n        online_date = LazyAttribute(lambda x: faker.date_time_between(start_date=\"-1y\", end_date=\"now\",\n                                                               tzinfo=timezone(settings.TIME_ZONE)))\n        operating_system = SubFactory(OperatingSystemFactory)\n        server_id = LazyAttribute(lambda x: FuzzyText(length=6, chars=string.digits).fuzz())\n        use = Iterator(Server.CHOICES, getter=lambda x: x[0])\n        comments = LazyAttribute(lambda x: faker.paragraph(nb_sentences=3, variable_nb_sentences=True))\n\nImportant the use attribute is created incorrectly. **When you use choices you need to manually change it** to USE_CHOICES.\n\n.. code-block:: python\n\n        use = Iterator(Server.USE_CHOICES, getter=lambda x: x[0])\n\n\nModel Test Case Generator\n+++++++++++++++++++++++++\n\n.. code-block:: bash\n\n    $  python manage.py generate_model_test_cases project.app\n\nSerializer Generator\n++++++++++++++++++++\n\n.. code-block:: bash\n\n    $ python manage.py generate_serializers project.app -s ModelSerializer\n\nWriting assertions\n+++++++++++++++++++\n\nOne of the most boring steps of writing tests is checking the content of static dictionaries.\nYou now the content of the dictionary and you need to compare it with a result.\n\nIn the following code the assertions for the **data** dictionary will be generated in the\n**fn** file. IMPORTANT the name of the dictionary in this case **data** must be the same as\nthe second argument of the method in order to generate the correct assertions.\n\n.. code-block:: python\n\n    fn = './output/_my_assertions.py'\n    data = [\n            {'name': 'kilo', 'password': 9999,\n             'groups': ['admin', 'users'],\n             'config': {'server': 'all', 'bulding': 116}},\n            {'name': 'pasto', 'password': 'nogo',\n             'groups': ['users'],\n             'config': {'server': 'database', 'bulding': None},\n             'created_date': date(2016, 1, 3),\n             'modified': '2016-10-01'}\n        ]\n        filename = write_assertions(data, 'data', filename=fn, type_only=True,excluded_keys=['config']))\n\nThe result of this script:\n\n.. code-block:: python\n\n    self.assertEqual(len(data), 2)\n    self.assertEqual(len(data[0]['groups']), 2)\n    self.assertEqual(data[0]['groups'][0], 'admin')\n    self.assertEqual(data[0]['groups'][1], 'users')\n    self.assertEqual(data[0]['name'], 'kilo')\n    self.assertEqual(data[0]['password'], 9999)\n    self.assertEqual(len(data[1]['groups']), 1)\n    self.assertEqual(data[1]['groups'][0], 'users')\n    self.assertEqual(data[1]['name'], 'pasto')\n    self.assertEqual(data[1]['password'], 'nogo')\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ python runtests.py tests\n\n\nPushing code to Pypi\n--------------------\n1. Setup environment\n\n  .. code-block:: bash\n\n    source ./venv/bin/activate\n\n\n2. Updated version. Instead of patch you could also use **major** o **minor** depending on the level of the release.\n\n  .. code-block:: bash\n\n    $ make patch\n\n\n3. Check the .travis.yml to make sure the versions of Django are the latests. Check in https://www.djangoproject.com/download/\n   for the latest versions.\n\n4. Check setup.py for Django and Python versions.\n\n5. Close the git-flow release manually.\n\n6. Push to repo, Travis CI should deploy to pypi\n\n  .. code-block:: bash\n\n    make travis-push\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n.. _`Factory Boy`: https://factoryboy.readthedocs.io/en/latest/\n\n\n\n\nHistory\n-------\n\n0.1.0 (2017-04-26)\n++++++++++++++++++\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/luiscberrocal/django-test-tools",
    "keywords": "django-test-tools",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-test-tools",
    "package_url": "https://pypi.org/project/django-test-tools/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-test-tools/",
    "project_urls": {
      "Homepage": "https://github.com/luiscberrocal/django-test-tools"
    },
    "release_url": "https://pypi.org/project/django-test-tools/2.1.0/",
    "requires_dist": [
      "Django",
      "Jinja2 (>=3.0.1)",
      "openpyxl (>=3.0.7)",
      "requests (>=2.26.0)"
    ],
    "requires_python": "",
    "summary": "Simple tests tools to make testing faster and easier.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15268507,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23d932edc0f1ee21b79261799727ed22b404c8a1905344710dd1fdb79c74868d",
        "md5": "53514a00c1312473e7625e09bec16468",
        "sha256": "693927df3a23016389349ab4ce48dc38c90b897cfe7f848b5a0132726f63e40c"
      },
      "downloads": -1,
      "filename": "django_test_tools-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53514a00c1312473e7625e09bec16468",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 44864,
      "upload_time": "2022-09-30T14:29:46",
      "upload_time_iso_8601": "2022-09-30T14:29:46.949853Z",
      "url": "https://files.pythonhosted.org/packages/23/d9/32edc0f1ee21b79261799727ed22b404c8a1905344710dd1fdb79c74868d/django_test_tools-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f33ae4c8360b5e3ada056def3d4e357d0797e5821edce37b4c84c07cc64eb7a6",
        "md5": "8a494b061121049ad4592964cd40332f",
        "sha256": "55823dfe231ba8cc32ec0471dd5d523f47ec63b23ef430dd9394d1af3744e5ea"
      },
      "downloads": -1,
      "filename": "django-test-tools-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a494b061121049ad4592964cd40332f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36936,
      "upload_time": "2022-09-30T14:29:49",
      "upload_time_iso_8601": "2022-09-30T14:29:49.365491Z",
      "url": "https://files.pythonhosted.org/packages/f3/3a/e4c8360b5e3ada056def3d4e357d0797e5821edce37b4c84c07cc64eb7a6/django-test-tools-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}