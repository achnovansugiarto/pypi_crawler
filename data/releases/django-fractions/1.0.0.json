{
  "info": {
    "author": "Justin Michalicek",
    "author_email": "jmichalicek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "=============================\ndjango-fractions\n=============================\n\n.. image:: https://badge.fury.io/py/django-fractions.png\n    :target: https://badge.fury.io/py/django-fractions\n\n.. image:: https://travis-ci.org/jmichalicek/django-fractions.png?branch=master\n    :target: https://travis-ci.org/jmichalicek/django-fractions\n\nFraction display and form fields for Django\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-fractions.readthedocs.org.\n\nQuickstart\n----------\n\nInstall django-fractions::\n\n    pip install django-fractions\n\nAdd ``djfractions`` to ``settings.INSTALLED_APPS``\n\n\nThen use it in a project::\n\n    import djfractions\n\nIn templates::\n\n    {% load fractions %}\n    {% display_fraction 1.25 %}\n\nIn Forms::\n\n    from djfractions.forms import DecimalFractionField\n    from django import forms\n\n    class MyForm(forms.Form):\n        a_fraction = DecimalFractionField()\n\n\nFeatures\n--------\n\n* Template tag for displaying float and Decimal values as fractions including mixed numbers\n* DecimalFractionField form field which handles input such as \"1/4\", \"1 1/2\", \"1 and 1/2\", and converts to a\n  decimal.Decimal instance\n\n\nTODO\n-----\n\n* Add unicode_fraction template tag to display the unicode fraction entity if available\n* forms.FloatDecimalField to return a float rather than Decimal\n* forms.SplitFractionWidget for having separate numerator and denominator form fields\n* forms.SplitMixedFractionWidget for handling mixed number fractions with separate fields\n* models.DecimalBackedFractionField() to store a Decimal value but return/accept it as a fraction\n* models.FloatBackedFractionField() to store a Decimal value but return/accept it as a fraction\n\n\nCookiecutter Tools Used in Making This Package\n----------------------------------------------\n\n*  cookiecutter\n*  cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\nCurrent\n+++++++++\n\n\n1.0.0 (2016.12-31)\n++++++++++++++++++\n* Stop subclassing Django's DecimalField and duplicate small amounts of code\n  as necessary for db backend compatibility.  Too many things need to be\n  handled differently.  Main cause of major version bump.\n* Update forms.FractionField to skip over max_digits and decimal_places kwargs which\n  will get passed in by models.fields.DecimalFractionField\n* Add models.fields.DecimalFractionField.formfield() so that a\n  forms.FractionField will be used by default\n* Fix quantity_to_decimal and quantity_to_fraction to strip leading and trailing\n  spaces before pattern matching and converting to a decimal or fraction\n* Allow for leading negative sign with forms.FractionField input values\n* Fix is_fraction() to allow leading negative sign\n* Add `max_digits` and `decimal_places` params to DecimalFractionField in test model\n* Additional test cases for models.fields.DecimalFractionField\n\n\n0.4.0 (2016-08-29)\n++++++++++++++++++\n\n* Added djfractions.models.DecimalFractionField which stores fractions.Fraction values as decimals in the dataase.\n* Better usage of tox to test against different Python and Django versions\n* Added testing against Django 1.10\n\n0.3.2 (2015-08-28)\n++++++++++++++++++\n\n* Fixed boolean logic for when to coerce values to thirds in\n  in forms.DecimalFractionField and get_fraction_parts()\n\n0.3.1 (2015-08-12)\n++++++++++++++++++\n\n* HISTORY.rst typo fixes\n* pypi release version fix\n\n0.3.0 (2015-08-12)\n++++++++++++++++++\n\n* Added forms.FractionField which returns fractions.Fraction instances\n* Refactoring of common code with new forms.FractionField\n* Smarter checking for numeric types throughout the code\n* forms.DecimalFractionField.to_python() handles fractions.Fraction values now\n* Fixed bug handling negative numbers in quantity_to_decimal()\n* Added min_value and max_value to forms.DecimalFractionField\n* Made coerce_thirds, limit_denominator, and use_mixed_numbers params to DecimalFractionField\n  proper named parameters and not just kwargs.\n\n0.2.1 (2015-08-06)\n++++++++++++++++++\n\n* Fixed typo in usage docs\n\n0.2.0 (2015-08-06)\n++++++++++++++++++\n\n* display_fraction template tag output is templated so that its formatting can be changed by users\n* Added new display_improper_fraction template tag to simplify the common case of wanting to only use\n  improper fractions with no whole numbers\n* Added unicode_entity to template context for display_fraction and display_improper_fraction so that\n  the html entity for common fractions may be used rather than <sup> and <sub> tags\n* Refactored lots of code out into smaller, reusable functions\n* Added a bunch of test cases\n\n0.1.0 (2015-08-01)\n++++++++++++++++++\n\n* First release on PyPI.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmichalicek/django-fractions",
    "keywords": "django-fractions",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-fractions",
    "package_url": "https://pypi.org/project/django-fractions/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-fractions/",
    "project_urls": {
      "Homepage": "https://github.com/jmichalicek/django-fractions"
    },
    "release_url": "https://pypi.org/project/django-fractions/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fraction display and form fields for Django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16353872,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cef4836aa9ee04f378696d23d0eed463d0000610b6b217381e7934c890709c7",
        "md5": "355af2a7d3ffe3ed435ec3625669a468",
        "sha256": "9480f2a5375ae0366e2958ffcbc489921e25be645b5a948b96fd4416fd7ff453"
      },
      "downloads": -1,
      "filename": "django_fractions-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "355af2a7d3ffe3ed435ec3625669a468",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14933,
      "upload_time": "2017-01-01T03:00:41",
      "upload_time_iso_8601": "2017-01-01T03:00:41.808927Z",
      "url": "https://files.pythonhosted.org/packages/6c/ef/4836aa9ee04f378696d23d0eed463d0000610b6b217381e7934c890709c7/django_fractions-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d404f9babf64b52e928702803ef67b39b572d889ea10cc75519347851a78a20e",
        "md5": "491ef82982cffbc4aeb72434443aeb37",
        "sha256": "be8f2b86d0b24ed6042407f4714cf8fb82805cd6414dc3d1537163394911d797"
      },
      "downloads": -1,
      "filename": "django-fractions-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "491ef82982cffbc4aeb72434443aeb37",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14375,
      "upload_time": "2017-01-01T03:00:43",
      "upload_time_iso_8601": "2017-01-01T03:00:43.998375Z",
      "url": "https://files.pythonhosted.org/packages/d4/04/f9babf64b52e928702803ef67b39b572d889ea10cc75519347851a78a20e/django-fractions-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}