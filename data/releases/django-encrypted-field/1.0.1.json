{
  "info": {
    "author": "Román Ramírez",
    "author_email": "rramirez@rootedcon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# django-encrypted-field\nDjango custom field supporting different encryption options.\n\nBy default, this field will fall back to ChaCha20 Poly 1305 algorithm, as we consider the stronger one to have.\n\nBut the user has some other options to configure.\n\n## Installation\n\nThere exist a pip package in the registry. Just issue the typical \"install\" command:\n\n```\n$ pip install django-encrypted-field (VERIFY)\n```\n\n## Configuration\n\nBefore using the EncryptedField in your projects, it is necessary to add some configuration variables to your settings. Please, remember to do so, as this is CRITICAL to have the maximum guarantees in terms of encryption.\n\n* DJANGO_ENCRYPTED_FIELD_KEY: [MANDATORY] [BYTES] here you must define the encryption key. It must be 16, 24 or 32 bytes long and in bytes format. Like in `b'12345...'`.\n* DJANGO_ENCRYPTED_FIELD_ALGORITHM: [OPTIONAL] [STRING] the default algorithm to be used, as defined in the code list for supported algoritms (see below). If not set, will default to ChaCha20 Poly 1305.\n\nSee an example:\n```\nDJANGO_ENCRYPTED_FIELD_KEY = b'12345678901234567890123456789012'\n# Recommended: using the environment.\nDJANGO_ENCRYPTED_FIELD_KEY = os.environ.get('ENV_DJANGO_ENCRYPTED_FIELD_KEY')\nDJANGO_ENCRYPTED_FIELD_ALGORITHM = 'CC20P'\nDJANGO_ENCRYPTED_FIELD_ALGORITHM = 'SS20'\n...\nDJANGO_ENCRYPTED_FIELD_ALGORITHM = 'AGCM'\n```\n\n## Usage in a django project\n\nThe use of the custom field is easy. You don't need to add the packaged to the INSTALLED_APPS, so just include an import in your models and use the field directly.\n\nFor example, if you want to start the easy way, with the default encryption (ChaCha20 Poly 1305), follow these steps:\n\n### First step: settings.py\n\nJust configure the key:\n\n```\nDJANGO_ENCRYPTED_FIELD_KEY = os.environ.get('ENV_DJANGO_ENCRYPTED_FIELD_KEY')\n```\n\n### Second step: app/models.py\n\nTake on mind the following restrictions:\n\n* This field cannot be primary_key\n* This field cannot be unique\n* This field cannot be db_index\n\nNow, import the field and add it to your very secret model:\n\n```\nfrom django.db import models\nfrom encrypted_field import EncryptedField\n\n\nclass MySecretModel(models.Model):\n    secret = EncryptedField()\n```\n\n### Third step: standard usage\n\nJust use as any other field, but with these restrictions:\n\n* You cannot perform useful searches in the field contents.\n* The content is TEXT, formatted as JSON/dict with the required elements for encryption/decryption.\n\nSee the usage in a helper script (not a Django view). Encryption (just save):\n\n```\n# -*- coding: utf-8 -*-\n#!/usr/bin/python\nimport os\nimport sys \nimport django\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"your_project.settings\")\nfrom django.conf import settings\ndjango.setup()\n\nfrom app.models import MySecretModel\n\nsecret_instance = MySecretModel()\nsecret_instance.secret = 'A very secret message we want to store in database.'\nsecret_instance.save()\n\n```\n\nDecryption (just query the model):\n\n```\n# -*- coding: utf-8 -*-\n#!/usr/bin/python\nimport os\nimport sys \nimport django\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"your_project.settings\")\nfrom django.conf import settings\ndjango.setup()\n\nfrom app.models import MySecretModel\n\nsecret_instance = MySecretModel.objects.get(id=1)\nprint(\"The SECRET=[{secret}]\".format(secret=secret_instance.secret)\n```\n\n## Advanced usages\n\nThe previous example is the quick&easy way of using this custom field. But you may want to customize the way it will work.\n\n### Encryption algorithms\n\nAs for the present release, the following algorithms are supported:\n\n* ALGORITHM_CHACHA20_POLY1305 = 'CC20P'\n* ALGORITHM_CHACHA20 = 'CC20'\n* ALGORITHM_SALSA20 = 'SS20'\n* ALGORITHM_AES_GCM = 'AGCM'\n* ALGORITHM_AES_SIV = 'ASIV'\n* ALGORITHM_AES_EAX = 'AEAX'\n* ALGORITHM_AES_CCM = 'ACCM'\n* ALGORITHM_AES_OCB = 'AOCB'\n\nThe assigned text is a short name in text for the algorithm, to pass it in dictionaries and JSON objects, and is the value you should use if going to set the settings variable (remember, `DJANGO_ENCRYPTED_FIELD_ALGORITHM = 'AGCM''`).\n\nIt is **VERY IMPORTANT** to define the variable if you are changing the algorithm in the field definition, as we will see below. Please, do remember this.\n\n### Set a different algorithm for a field\n\nWhen adding the field to the model, you can change the default algorithm if necessary. Just passing \"algorithm\" in the field definition:\n\n```\nfrom django.db import models\nfrom encrypted_field import EncryptedField\n\n\nclass MySecretModel(models.Model):\n    secret = EncryptedField(algorithm='SS20')  # Will use Salsa20 algorithm.\n```\n\nYou may want to make more difficult to attack the encryption just removing algorithm information from the database:\n\n```\nfrom django.db import models\nfrom encrypted_field import EncryptedField\n\n\nclass MySecretModel(models.Model):\n    secret = EncryptedField(algorithm='SS20', hide_algorithm=True)  # Will use Salsa20 algorithm. HIDDEN.\n```\n\nSo the encrypted results will be stored in the database without any reference to the algorithm that was used. If this is a use case you need, **PLEASE REMEMBER TO SET THE SETTINGS VARIABLE FOR THE ALGORITHM**.\n\nIn your_project/settings.py:\n\n```\nDJANGO_ENCRYPTED_FIELD_KEY = os.environ.get('ENV_DJANGO_ENCRYPTED_FIELD_KEY')\nDJANGO_ENCRYPTED_FIELD_ALGORITHM = 'AGCM'\n```\n\nIn app/models.py:\n\n```\nfrom django.db import models\nfrom encrypted_field import EncryptedField\n\n\nclass MySecretModel(models.Model):\n    secret = EncryptedField(algorithm='AGCM', hide_algorithm=True)  # Will use AGCM algorithm. HIDDEN.\n```\n\n### Change the prepended header\n\nIf you want to change the default prepend header for some algorithms, you can pass a new header onto the field definition. See:\n\n```\nfrom django.db import models\nfrom encrypted_field import EncryptedField\n\n\nclass MySecretModel(models.Model):\n    secret = EncryptedField(header='My custom header')\n```\n\n### How the encryption/decryption key is used\n\nThere is no way to set the key in the field, so the key is never used in a persistent way. Instead, everytime time an encryption/decryption operation is made, the settings variable will be checked immediately.\n\nA quick sketch of the process may be:\n\n1. Create the model with an EncryptedField.\n2. Create an instance like in `my_instance = MySecretModel()`\n3. Save the instance: `my_instance.save()`\n4. **ENCRYPTION STARTS**: the field will invoke the encryption scheme reading the key from `settings.DJANGO_ENCRYPTED_FIELD_KEY`.\n5. Retrive from the database: `my_instance = MySecretModel.objects.get(id=1)`\n6. **DECRYPTION STARTS**: the field will invoke the decryption scheme reading the key from `settings.DJANGO_ENCRYPTED_FIELD_KEY`. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/patowc/django-encrypted-field",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-encrypted-field",
    "package_url": "https://pypi.org/project/django-encrypted-field/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-encrypted-field/",
    "project_urls": {
      "Homepage": "https://github.com/patowc/django-encrypted-field"
    },
    "release_url": "https://pypi.org/project/django-encrypted-field/1.0.1/",
    "requires_dist": [
      "Django (>=4.0)",
      "pycryptodomex (>=3.12.0)"
    ],
    "requires_python": "",
    "summary": "This is a Django Model Field class that can be encrypted using ChaCha20 poly 1305, and other algorithms.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16259254,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb7194ae82c98a92a950faa993d331abdf705fe03f9ad48475b40ea6a65aa27a",
        "md5": "0e2fb1f321bbecbc6bc748a669c6d18c",
        "sha256": "c6043ad92c215c185d0b34bd53d54963f1dc7cb6b6832dd7c16c96536daec137"
      },
      "downloads": -1,
      "filename": "django_encrypted_field-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e2fb1f321bbecbc6bc748a669c6d18c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11728,
      "upload_time": "2021-12-28T20:20:43",
      "upload_time_iso_8601": "2021-12-28T20:20:43.975075Z",
      "url": "https://files.pythonhosted.org/packages/cb/71/94ae82c98a92a950faa993d331abdf705fe03f9ad48475b40ea6a65aa27a/django_encrypted_field-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aaae98201c3a781e6b181d44d4cd010a642aa81bad2c4855cfd3a920e7f1f343",
        "md5": "11177160e095dfb4ab895819183e2fc9",
        "sha256": "08f86c24102eada80c837e94dd58dad4ea93d491cbc185f6be4ab0bf1231e360"
      },
      "downloads": -1,
      "filename": "django-encrypted-field-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "11177160e095dfb4ab895819183e2fc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10855,
      "upload_time": "2021-12-28T20:20:45",
      "upload_time_iso_8601": "2021-12-28T20:20:45.437803Z",
      "url": "https://files.pythonhosted.org/packages/aa/ae/98201c3a781e6b181d44d4cd010a642aa81bad2c4855cfd3a920e7f1f343/django-encrypted-field-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}