{
  "info": {
    "author": "Hiroaki Yamamoto",
    "author_email": "hiroaki@hysoftware.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 2.0",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# Additional code for Django\n\n[![CI Image]][CI Link] [![Test Coverage]][Test Coverage Link]\n[![Maintainability]][Maintainability Link]\n\n[CI Image]: https://circleci.com/gh/hiroaki-yamamoto/djextra.svg?style=svg\n[CI Link]: https://circleci.com/gh/hiroaki-yamamoto/djextra\n[Test Coverage]: https://api.codeclimate.com/v1/badges/1ed2f1c354e6357d711c/test_coverage\n[Test Coverage Link]: https://codeclimate.com/github/hiroaki-yamamoto/djextra/test_coverage\n[Maintainability]: https://api.codeclimate.com/v1/badges/1ed2f1c354e6357d711c/maintainability\n[Maintainability Link]: https://codeclimate.com/github/hiroaki-yamamoto/djextra/maintainability\n\n## What this?\nThis repository contains additional code for Django.\n\n## Why I create this?\nBecause I love Django, and usually using it. However, I found some essential\ncode was lacked for modern web development. For example, you might want to send\nAjax Payload like this:\n\n```JSON\n{\n  \"name\": \"John Doe\",\n  \"age\": 49,\n  \"email\": \"john@example.com\",\n  \"email_aliases\": [\n    \"john.due@example.com\",\n    \"due_49@example.com\",\n    \"john.1968@example.com\"\n  ]\n}\n```\n\nIn this case, you can validate name, age, and email field by using `Form`\nlayer on Django. However, email_aliases cannot be validated because it's a\nlist and it should validate each value whether it is email-formatted or not.\n\nTo support this case (and some other cases that Django can't handle), I wrote\nsome code to support List validation.\n\n## How To Use It\n\n### Forms\n\n#### Angular form\nAs you can see above sections, you'll need to implement redundant code:\n\n```Python\nfrom django import forms\nfrom .models import UserInfo\n\nclass UserInfoForm(forms.ModelForm):\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # They are already implemented because UserInfoForm inherit ModelForm\n    # and the target model has the fields.\n    widgets = {\n      \"age\": forms.NumberInput(attrs={\"data-ng-model\": \"model.age\"}),\n      \"phone\": forms.TextInput(attrs={\"data-ng-model\": \"model.phone\"}),\n      \"street\": forms.TextInput(attrs={\"data-ng-model\": \"model.street\"}),\n      \"city\": forms.TextInput(attrs={\"data-ng-model\": \"model.city\"}),\n      \"state\": forms.TextInput(attrs={\"data-ng-model\": \"model.state\"})\n    }\n```\n\nHowever, you can implement simpler code by using `AngularForm`:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import AngularForm\n\nclass UserInfoForm(AngularForm, forms.ModelForm):\n  ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # Automatically generates AngularJS forms.\n```\n\n##### Data binding between AngularJS and Django\nIf you want put the value to scope model on initialization, you might have 2 ways:\n\n1. Serialize your model into json by using `json.dumps` and\n  `django.forms.model_to_dict`\n2. Set `handle_ng_init` meta attribute\n\nThe first one is very clear, convert your model into dict with\n`django.forms.model_to_dict`, and serialize the dict into JSON, and finally\nput the text as `data-ng-init` to the form like this:\n\n```HTML\n<form data-ng-init=\"model = {{ view.model_dict | tojson }}\">\n  <!-- bla bla bla bla... -->\n</form>\n```\n\nThe second one is simple; just set `handle_ng_init` Meta attribute of the form to\n`True` like this:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import AngularForm\n\nclass UserInfoForm(AngularForm, forms.ModelForm):\n  ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n  handle_ng_init = True\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # Automatically generates AngularJS forms.\n```\n\nIf you want to specify what value to be set, you can use `ng_init_format_func`\nmeta attribute like this:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import AngularForm\n\nclass UserInfoForm(AngularForm, forms.ModelForm):\n  ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n  handle_ng_init = True\n  ng_init_format_func = {\n    \"age\": lambda value: f\"{value} years old\"\n  }\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # Automatically generates AngularJS forms.\n```\n\nHowever, as you know, server-side is quite different from client side, so **to\nkeep that `age` is formatted, you might also need to write client-side code.**\n\n#### All required forms\nIf you'd like to make all fields required on ModelForm, you will re-implement\nentire fields like this:\n\n```Python\nfrom django import forms\nfrom .models import UserInfo\n\nclass UserInfoForm(forms.ModelForm):\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n\n  # Assume that all fields are optional.\n  age = forms.IntegerField(\n    required=True,\n    widget=forms.NumberInput(attrs={\"data-ng-model\": \"model.age\"})\n  )\n  phone = forms.CharField(\n    required=True,\n    widget=forms.TextInput(attrs={\"data-ng-model\": \"model.phone\"})\n  )\n  street = forms.CharField(\n    required=True,\n    widget=forms.TextInput(attrs={\"data-ng-model\": \"model.street\"})\n  )\n  city = forms.CharField(\n    required=True,\n    widget=forms.TextInput(attrs={\"data-ng-model\": \"model.city\"})\n  )\n  state = forms.CharField(\n    required=True,\n    widget=forms.TextInput(attrs={\"data-ng-model\": \"model.state\"})\n  )\n```\n\nMoreover, you will not be able to check if the field is proper unless you\nrefer Django's code. To reduce this time consumption, I implemented\n`AllReqiuredForm`:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import AllRequiredForm\nfrom .models import UserInfo\n\nclass UserInfoForm(AllRequiredForm, forms.ModelForm):\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # Assume that all fields are optional.\n```\n\nBy using `AllRequiredForm`, you can reduce your LOC like above. Of course,\nyou can put optional field as exceptions like this:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import AllRequiredForm\nfrom .models import UserInfo\n\nclass UserInfoForm(AllRequiredForm, forms.ModelForm):\n  class Meta(object):\n    model = UserInfo\n    exclude = (\"2fa_secret\", )\n    # Assume that all fields are optional.\n    # By specifying optional, the specified fields won't\n    # become a required field.\n    optional = (\"phone\", )\n```\n\n#### FieldAttributeForm\n\nWhen you set attribute, especially with `ModelForm`, you might need to re-set\nwidget with `widget` Meta attribute like this:\n\n```Python\nfrom django.db import models as db\nfrom django import forms\n\n\nclass NamePrice(db.Model):\n  name = db.CharField()\n  price = db.IntegerField()\n\n\nclass NameDescForm(forms.ModelForm):\n  class Meta(object):\n    model = NamePrice\n    exclude = (\"id\", )\n    widgets = {\n      \"price\": forms.NumberInput(attrs={\"max\": \"100\"})\n    }\n```\n\nThis is okay when you know what widget is used and attribute `max` is the\nfixed value. However, if you don't know what widget is used, or `max` is\nthe dynamic value by the server, Django might not have suitable solution.\nTo solve this problem, djextra has a form named `FieldAttributeForm` and\nyou can use it like this:\n\n```Python\nfrom django.db import models as db\nfrom django import forms\n\nfrom django.conf import settings\n\n\nclass NamePrice(db.Model):\n  name = db.CharField()\n  price = db.IntegerField()\n\n\nclass NameDescForm(FieldAttributeForm, forms.ModelForm):\n  class Meta(object):\n    model = NamePrice\n    exclude = (\"id\", )\n    fld_attrs = {\n        \"price\": {\n            # The point is the attribute can be callable.\n            \"max\": lambda form, fld, name, value: 100 if value else \"\",\n            \"min\": \"0\"\n        },\n    }\n```\n\nIn addition to this, `FieldAttributeForm` can set attributes that can be applied\nto all the fields by using `common_attrs` meta attribute:\n\n```Python\nfrom django.db import models as db\nfrom django import forms\n\nfrom django.conf import settings\n\n\nclass NamePrice(db.Model):\n  name = db.CharField()\n  price = db.IntegerField()\n\n\nclass NameDescForm(FieldAttributeForm, forms.ModelForm):\n  class Meta(object):\n    model = NamePrice\n    exclude = (\"id\", )\n    common_attrs = {\n      # Also it can be callable.\n      \"data-on-delay\": lambda form, fld, name, value: (\n        f\"delay('{name}',{value})\"\n      ),\n      \"data-on-load\": \"test()\",\n    }\n    fld_attrs = {\n        \"price\": {\n            \"max\": lambda form, fld, name, value: 100 if value else \"\",\n            \"min\": 0\n        },\n    }\n```\n\n### Form Fields\n\n#### ListField\n\nListField is used to handle a list of values like above example.\nTo use ListField, you can write a form like this:\n\n`forms.py`\n```python\nfrom django import forms\nfrom djextra import forms as exforms\n\n\nclass ExampleForm(forms.Form):\n  name = forms.CharField()\n  age = forms.IntegerField()\n  email = forms.EmailField()\n  email_aliases = exforms.ListField(field=forms.EmailField())\n```\n\nThen, Inputting the data as usual, the validation will start.\nIf you don't specify `field` keyword argument, `django.forms.CharField` object\nis specified.\n\n### Widgets\n\n#### Widgets for Angular Materials\n\nIf you like [Material Design], you'd also like to use [Angular Material], but\nas you can see the doc. the components are using special tags. For example,\n`select` and `option` input controllers should be replaced with `mdSelect` and\n`mdOption` and they are not provided by built-in widgets.\n\nThis widget provides the widgets:\n\n```Python\nfrom django import forms\nfrom djextra.forms.angular1 import (\n  AngularForm, MDSelect, MDMultiSelect, MDDatePicker, MDDateSelect, MDCheckBox\n)\n\nfrom .models import ExampleModel\n\nclass ExampleForm(AngularForm, forms.ModelForm):\n  class Meta(object):\n    model = ExampleModel\n    exclude = (\"secret_field\", )\n    widgets = {\n      \"start_since\": MDDateSelect(),\n      \"available_date\": MDDatePicker(),\n      \"shape\": MDSelect(choices=(\n        (\"F\", \"Fat\"), (\"N\": \"Normal\"), (\"T\", \"Thin\")\n      )),\n      \"needs_fill\": MDCheckBox(\"Fill with border color?\")\n    }\n```\n\n[Material Design]: https://material.google.com/\n[Angular Material]: https://material.angularjs.org\n\n\n## Contribution\nContribution of code is welcome, and the code is tested with tox. Before\nsending your pull request, please check you tested your code very well.\n\n## License\nThis repository is licensed under the terms of MIT License. Please check\n[LICENSE.md](LICENSE.md) for the detail.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hiroaki-yamamoto/djextra",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djextra",
    "package_url": "https://pypi.org/project/djextra/",
    "platform": "",
    "project_url": "https://pypi.org/project/djextra/",
    "project_urls": {
      "Homepage": "https://github.com/hiroaki-yamamoto/djextra"
    },
    "release_url": "https://pypi.org/project/djextra/1.1.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Additional Functions for Django",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4692551,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fc265104ea9a0baabba7d448965b87b2224642d0994943c4bbc0a6b9bcc8ae8",
        "md5": "cb376ddfc6530206d01a29342488b37a",
        "sha256": "4251d690109bed3e712e2f66e4e89320a265b6ac9d653e6eb5b73c6e88854752"
      },
      "downloads": -1,
      "filename": "djextra-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "cb376ddfc6530206d01a29342488b37a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11904,
      "upload_time": "2019-01-14T03:20:51",
      "upload_time_iso_8601": "2019-01-14T03:20:51.388634Z",
      "url": "https://files.pythonhosted.org/packages/5f/c2/65104ea9a0baabba7d448965b87b2224642d0994943c4bbc0a6b9bcc8ae8/djextra-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}