{
  "info": {
    "author": "Selwin Ong",
    "author_email": "selwin.ong@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==================\nDjango Post Office\n==================\n\nDjango Post Office is a simple app to send and manage your emails in Django.\nSome awesome features are:\n\n* Allows you to send email asynchronously\n* Supports HTML email\n* Supports database based email templates\n* Built in scheduling support\n* Works well with task queues like `RQ <http://python-rq.org>`_ or `Celery <http://www.celeryproject.org>`_\n* Uses multiprocessing to send a large number of emails in parallel\n\n\nDependencies\n============\n\n* `django >= 1.4 <http://djangoproject.com/>`_\n* `django-jsonfield <https://github.com/bradjasper/django-jsonfield>`_\n\n\nInstallation\n============\n\n|Build Status|\n\n\n* Install from PyPI (or you `manually download from PyPI <http://pypi.python.org/pypi/django-post_office>`_)::\n\n    pip install django-post_office\n\n* Add ``post_office`` to your INSTALLED_APPS in django's ``settings.py``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        # other apps\n        \"post_office\",\n    )\n\n* Run ``syncdb``::\n\n    python manage.py syncdb\n\n* Set ``post_office.EmailBackend`` as your ``EMAIL_BACKEND`` in django's ``settings.py``::\n\n    EMAIL_BACKEND = 'post_office.EmailBackend'\n\nIf you're still on Django <= 1.6 and use South to manage your migrations,\nyou'll need to put the following in ``settings.py``:\n\n.. code-block:: python\n\n    SOUTH_MIGRATION_MODULES = {\n        \"post_office\": \"post_office.south_migrations\",\n    }\n\n\nQuickstart\n==========\n\nSend a simple email is really easy:\n\n.. code-block:: python\n\n    from post_office import mail\n\n    mail.send(\n        'recipient@example.com', # List of email addresses also accepted\n        'from@example.com',\n        subject='My email',\n        message='Hi there!',\n        html_message='Hi <strong>there</strong>!',\n    )    \n\n\nIf you want to use templates, ensure that Django's admin interface is enabled. Create an\n``EmailTemplate`` instance via ``admin`` and do the following:\n\n.. code-block:: python\n\n    from post_office import mail\n\n    mail.send(\n        'recipient@example.com', # List of email addresses also accepted\n        'from@example.com',\n        template='welcome_email', # Could be an EmailTemplate instance or name\n        context={'foo': 'bar'},\n    )\n\nThe above command will put your email on the queue so you can use the\ncommand in your webapp without slowing down the request/response cycle too much.\nTo actually send them out, run ``python manage.py send_queued_mail``.\nYou can schedule this management command to run regularly via cron::\n\n    * * * * * (/usr/bin/python manage.py send_queued_mail >> send_mail.log 2>&1)\n\n\nUsage\n=====\n\nmail.send()\n-----------\n\n``mail.send`` is the most important function in this library, it takes these\narguments:\n\n+-------------------+----------+-------------------------------------------------+\n| Argument          | Required | Description                                     |\n+-------------------+----------+-------------------------------------------------+\n| recipients        | Yes      | list of recipient email addresses               |\n+-------------------+----------+-------------------------------------------------+\n| sender            | No       | Defaults to ``settings.DEFAULT_FROM_EMAIL``,    |\n|                   |          | display name is allowed (``John <john@a.com>``) |\n+-------------------+----------+-------------------------------------------------+\n| subject           | No       | Email subject (if ``template`` is not specified)|\n+-------------------+----------+-------------------------------------------------+\n| message           | No       | Email content (if ``template`` is not specified)|\n+-------------------+----------+-------------------------------------------------+\n| html_message      | No       | HTML content (if ``template`` is not specified) |\n+-------------------+----------+-------------------------------------------------+\n| template          | No       | ``EmailTemplate`` instance or name              |\n+-------------------+----------+-------------------------------------------------+\n| cc                | No       | list emails, will appear in ``cc`` field        |\n+-------------------+----------+-------------------------------------------------+\n| bcc               | No       | list of emails, will appear in `bcc` field      |\n+-------------------+----------+-------------------------------------------------+\n| attachments       | No       | Email attachments - A dictionary where the keys |\n|                   |          | are the filenames and the values are either:    |\n|                   |          |                                                 |\n|                   |          | * files                                         |\n|                   |          | * file-like objects                             |\n|                   |          | * full path of the file                         |\n+-------------------+----------+-------------------------------------------------+\n| context           | No       | A dictionary, used to render templated email    |\n+-------------------+----------+-------------------------------------------------+\n| headers           | No       | A dictionary of extra headers on the message    |\n+-------------------+----------+-------------------------------------------------+\n| scheduled_time    | No       | A date/datetime object indicating when the email|\n|                   |          | should be sent                                  |\n+-------------------+----------+-------------------------------------------------+\n| priority          | No       | ``high``, ``medium``, ``low`` or ``now``        |\n|                   |          | (send_immediately)                              |\n+-------------------+----------+-------------------------------------------------+\n| render_on_delivery| No       | Setting this to ``True`` causes email to be     |\n|                   |          | lazily rendered during delivery. ``template``   |\n|                   |          | is required when ``render_on_delivery`` is True.|\n|                   |          | This way content is never stored in the DB.     |\n|                   |          | May result in significat space savings.         |\n+-------------------+----------+-------------------------------------------------+\n\n\nHere are a few examples.\n\nIf you just want to send out emails without using database templates. You can\ncall the ``send`` command without the ``template`` argument.\n\n.. code-block:: python\n\n    from post_office import mail\n\n    mail.send(\n        ['recipient1@example.com'],\n        'from@example.com',\n        subject='Welcome!',\n        message='Welcome home, {{ name }}!',\n        html_message='Welcome home, <b>{{ name }}</b>!',\n        headers={'Reply-to': 'reply@example.com'},\n        scheduled_time=date(2014, 1, 1),\n        context={'name': 'Alice'},\n    )\n\n``post_office`` is also task queue friendly. Passing ``now`` as priority into\n``send_mail`` will deliver the email right away (instead of queuing it),\nregardless of how many emails you have in your queue:\n\n.. code-block:: python\n\n    from post_office import mail\n\n    mail.send(\n        ['recipient1@example.com'],\n        'from@example.com',\n        template='welcome_email',\n        context={'foo': 'bar'},\n        priority='now',\n    )\n\nThis is useful if you already use something like `django-rq <https://github.com/ui/django-rq>`_\nto send emails asynchronously and only need to store email related activities and logs.\n\nIf you want to send an email with attachments:\n\n.. code-block:: python\n\n    from django.core.files.base import ContentFile\n    from post_office import mail\n\n    mail.send(\n        ['recipient1@example.com'],\n        'from@example.com',\n        template='welcome_email',\n        context={'foo': 'bar'},\n        priority='now',\n        attachments={\n            'attachment1.doc', '/path/to/file/file1.doc',\n            'attachment2.txt', ContentFile('file content'),\n        }\n    )\n\nTemplate Tags and Variables\n---------------------------\n\n``post-office`` supports Django's template tags and variables.\nFor example, if you put \"Hello, {{ name }}\" in the subject line and pass in\n``{'name': 'Alice'}`` as context, you will get \"Hello, Alice\" as subject:\n\n.. code-block:: python\n\n    from post_office.models import EmailTemplate\n    from post_office import mail\n\n    EmailTemplate.objects.create(\n        name='morning_greeting',\n        subject='Morning, {{ name|capfirst }}',\n        content='Hi {{ name }}, how are you feeling today?',\n        html_content='Hi <strong>{{ name }}</strong>, how are you feeling today?',\n    )\n\n    mail.send(\n        ['recipient@example.com'],\n        'from@example.com',\n        template='morning_greeting',\n        context={'name': 'alice'},\n    )\n\n    # This will create an email with the following content:\n    subject = 'Morning, Alice',\n    content = 'Hi alice, how are you feeling today?'\n    content = 'Hi <strong>alice</strong>, how are you feeling today?'\n\n\nCustom Email Backends\n---------------------\n\nBy default, ``post_office`` uses django's SMTP ``EmailBackend``. If you want to\nuse a different backend, you can do so by changing ``EMAIL_BACKEND``.\n\nFor example if you want to use `django-ses <https://github.com/hmarr/django-ses>`_::\n\n    POST_OFFICE = {\n        'EMAIL_BACKEND': 'django_ses.SESBackend'\n    }\n\n\nManagement Commands\n-------------------\n\n* ``send_queued_mail`` - send queued emails, those aren't successfully sent\n  will be marked as ``failed``. Accepts the following arguments:\n\n+---------------------------+-------------------------------------------------+\n| Argument                  | Description                                     |\n+---------------------------+-------------------------------------------------+\n| ``--processes`` or ``-p`` | Number of parallel processes to send email.     |\n|                           | Defaults to 1                                   |\n+---------------------------+---------+---------------------------------------+\n| ``--lockfile`` or ``-L``  | Full path to file used as lock file. Defaults to|\n|                           | ``/tmp/post_office.lock``                       |\n+---------------------------+-------------------------------------------------+\n\n\n* ``cleanup_mail`` - delete all emails created before an X number of days\n  (defaults to 90).\n\nYou may want to set these up via cron to run regularly::\n\n    * * * * * (cd $PROJECT; python manage.py send_queued_mail --processes=1 >> $PROJECT/cron_mail.log 2>&1)\n    0 1 * * * (cd $PROJECT; python manage.py cleanup_mail --days=30 >> $PROJECT/cron_mail_cleanup.log 2>&1)\n\nSettings\n========\nThis section outlines all the settings and configurations that you can put\nin Django's ``settings.py`` to fine tune ``post-office``'s behavior.\n\nBatch Size\n----------\n\nIf you may want to limit the number of emails sent in a batch (sometimes useful\nin a low memory environment), use the ``BATCH_SIZE`` argument to limit the\nnumber of queued emails fetched in one batch.\n\n.. code-block:: python\n\n    # Put this in settings.py\n    POST_OFFICE = {\n        'BATCH_SIZE': 5000\n    }\n\nDefault Priority\n----------------\n\nThe default priority for emails is ``medium``, but this can be altered by\nsetting ``DEFAULT_PRIORITY``. Integration with asynchronous email backends\n(e.g. based on Celery) becomes trivial when set to ``now``.\n\n.. code-block:: python\n\n    # Put this in settings.py\n    POST_OFFICE = {\n        'DEFAULT_PRIORITY': 'now'\n    }\n\nLog Level\n---------\n\nThe default log level is 2 (logs both successful and failed deliveries)\nThis behavior can be changed by setting ``LOG_LEVEL``.\n\n.. code-block:: python\n\n    # Put this in settings.py\n    POST_OFFICE = {\n        'LOG_LEVEL': 1 # Log only failed deliveries\n    }\n\nThe different options are:\n* ``0`` logs nothing\n* ``1`` logs only failed deliveries\n* ``2`` logs everything (both successful and failed delivery attempts)\n\n\nSending Order\n----------------\n\nThe default sending order for emails is ``-priority``, but this can be altered by\nsetting ``SENDING_ORDER``. For example, if you want to send queued emails in FIFO order :\n\n.. code-block:: python\n\n    # Put this in settings.py\n    POST_OFFICE = {\n        'SENDING_ORDER': ['created']\n    }\n    \nContext Field Serializer\n------------------------\n\nIf you need to store complex Python objects for deferred rendering\n(i.e. setting ``render_on_delivery=True``), you can specify your own context\nfield class to store context variables. For example if you want to use\n`django-picklefield <https://github.com/gintas/django-picklefield/tree/master/src/picklefield>`_:\n\n.. code-block:: python\n\n    # Put this in settings.py\n    POST_OFFICE = {\n        'CONTEXT_FIELD_CLASS': 'picklefield.fields.PickledObjectField'\n    }\n\n``CONTEXT_FIELD_CLASS`` defaults to ``jsonfield.JSONField``.\n\nLogging\n-------\n\nYou can configure ``post-office``'s logging from Django's ``settings.py``. For\nexample:\n\n.. code-block:: python\n\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"formatters\": {\n            \"post_office\": {\n                \"format\": \"[%(levelname)s]%(asctime)s PID %(process)d: %(message)s\",\n                \"datefmt\": \"%d-%m-%Y %H:%M:%S\",\n            },\n        },\n        \"handlers\": {\n            \"post_office\": {\n                \"level\": \"DEBUG\",\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"post_office\"\n            },\n            # If you use sentry for logging\n            'sentry': {\n                'level': 'ERROR',\n                'class': 'raven.contrib.django.handlers.SentryHandler',\n            },\n        },\n        'loggers': {\n            \"post_office\": {\n                \"handlers\": [\"post_office\", \"sentry\"],\n                \"level\": \"INFO\"\n            },\n        },\n    }\n\nPerformance\n===========\n\nCaching\n-------\n\nif Django's caching mechanism is configured, ``post_office`` will cache\n``EmailTemplate`` instances . If for some reason you want to disable caching,\nset ``POST_OFFICE_CACHE`` to ``False`` in ``settings.py``:\n\n.. code-block:: python\n\n    ## All cache key will be prefixed by post_office:template:\n    ## To turn OFF caching, you need to explicitly set POST_OFFICE_CACHE to False in settings\n    POST_OFFICE_CACHE = False\n\n    ## Optional: to use a non default cache backend, add a \"post_office\" entry in CACHES\n    CACHES = {\n        'post_office': {\n            'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n            'LOCATION': '127.0.0.1:11211',\n        }\n    }\n\n\nsend_many()\n-----------\n\n``send_many()`` is much more performant (generates less database queries) when\nsending a large number of emails. ``send_many()`` is almost identical to ``mail.send()``,\nwith the exception that it accepts a list of keyword arguments that you'd\nusually pass into ``mail.send()``:\n\n.. code-block:: python\n\n    from post_office import mail\n\n    first_email = {\n        'sender': 'from@example.com',\n        'recipients': ['alice@example.com'],\n        'subject': 'Hi!',\n        'message': 'Hi Alice!'\n    }\n    second_email = {\n        'sender': 'from@example.com',\n        'recipients': ['bob@example.com'],\n        'subject': 'Hi!',\n        'message': 'Hi Bob!'\n    }\n    kwargs_list = [first_email, second_email]\n\n    mail.send_many(kwargs_list)\n\nAttachments are not supported with ``mail.send_many()``.\n\n\nRunning Tests\n=============\n\nTo run the test suite::\n\n    `which django-admin.py` test post_office --settings=post_office.test_settings --pythonpath=.\n\n\nChangelog\n=========\n\nVersion 1.1.2\n-------------\n* Adds Django 1.8 compatibility.\n\nVersion 1.1.1\n-------------\n* Fixes a migration error. Thanks @garry-cairns!\n\nVersion 1.1.0\n-------------\n* Support for Django 1.7 migrations. If you're still on Django < 1.7,\n  South migration files are stored in ``south_migrations`` directory.\n\nVersion 1.0.0\n-------------\n* **IMPORTANT**: in older versions, passing multiple ``recipients`` into\n  ``mail.send()`` will create multiple emails, each addressed to one recipient.\n  Starting from ``1.0.0``, only one email with multiple recipients will be created.\n* Added ``LOG_LEVEL`` setting.\n* ``mail.send()`` now supports ``cc`` and ``bcc``.\n  Thanks Ștefan Daniel Mihăilă (@stefan-mihaila)!\n* Improvements to ``admin`` interface; you can now easily requeue multiple emails.\n* ``Log`` model now stores the type of exception caught during sending.\n* ``send_templated_mail`` command is now deprecated.\n* Added ``EMAIL_BACKEND`` setting to the new dictionary-styled settings.\n\nVersion 0.8.4\n-------------\n* ``send_queued_mail`` now accepts an extra ``--log-level`` argument.\n* ``mail.send()`` now accepts an extra ``log_level`` argument.\n* Drop unused/low cardinality indexes to free up RAM on large tables.\n\nVersion 0.8.3\n-------------\n* ``send_queued_mail`` now accepts ``--lockfile`` argument.\n* Lockfile implementation has been modified to use symlink, which is an atomic operation\n  across platforms.\n\nVersion 0.8.2\n-------------\n* Added ``CONTEXT_FIELD_CLASS`` setting to allow other kinds of context field serializers.\n\nVersion 0.8.1\n-------------\n* Fixed a bug that causes context to be saved when ``render_on_delivery`` is False\n\nVersion 0.8.0\n-------------\n* Added a new setting ``DEFAULT_PRIORITY`` to set the default priority for emails.\n  Thanks Maik Hoepfel (@maikhoepfel)!\n* ``mail.send()`` gains a ``render_on_delivery`` argument that may potentially\n  result in significant storage space savings.\n* Uses a new locking mechanism that can detect zombie PID files.\n\nVersion 0.7.2\n-------------\n* Made a few tweaks that makes ``post_office`` much more efficient on systems with\n  large number of rows (millions).\n\nVersion 0.7.1\n-------------\n* Python 3 compatibility fix.\n\nVersion 0.7.0\n-------------\n* Added support for sending attachments. Thanks @yprez!\n* Added ``description`` field to ``EmailTemplate`` model to store human readable\n  description of templates. Thanks Michael P. Jung (@bikeshedder)!\n* Changed ``django-jsonfield`` dependency to ``jsonfield`` for Python 3 support reasons.\n* Minor bug fixes.\n\nVersion 0.6.0\n-------------\n* Support for Python 3!\n* Added mail.send_many() that's much more performant when sending\n  a large number emails\n\nVersion 0.5.2\n-------------\n* Added logging\n* Added BATCH_SIZE configuration option\n\nVersion 0.5.1\n-------------\n* Fixes various multiprocessing bugs\n\nVersion 0.5.0\n-------------\n* Email sending can now be parallelized using multiple processes (multiprocessing)\n* Email templates are now validated before save\n* Fixed a bug where custom headers aren't properly sent\n\nVersion 0.4.0\n-------------\n* Added support for sending emails with custom headers (you'll need to run \n  South when upgrading from earlier versions)\n* Added support for scheduled email sending\n* Backend now properly persist emails with HTML alternatives\n\nVersion 0.3.1\n-------------\n* **IMPORTANT**: ``mail.send`` now expects recipient email addresses as the first\n argument. This change is to allow optional ``sender`` parameter which defaults\n to ``settings.DEFAULT_FROM_EMAIL``\n* Fixed a bug where all emails sent from ``mail.send`` have medium priority\n\nVersion 0.3.0\n-------------\n* **IMPORTANT**: added South migration. If you use South and had post-office\n  installed before 0.3.0, you may need to manually resolve migration conflicts\n* Allow unicode messages to be displayed in ``/admin``\n* Introduced a new ``mail.send`` function that provides a nicer API to send emails\n* ``created`` fields now use ``auto_now_add``\n* ``last_updated`` fields now use ``auto_now``\n\nVersion 0.2.1\n-------------\n* Fixed typo in ``admin.py``\n\nVersion 0.2\n-----------\n* Allows sending emails via database backed templates\n\nVersion 0.1.5\n-------------\n* Errors when opening connection in ``Email.dispatch`` method are now logged\n\n\n.. |Build Status| image:: https://travis-ci.org/ui/django-post_office.png?branch=master\n   :target: https://travis-ci.org/ui/django-post_office",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ui/django-post_office",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-post-office",
    "package_url": "https://pypi.org/project/django-post-office/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-post-office/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ui/django-post_office"
    },
    "release_url": "https://pypi.org/project/django-post-office/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Django app to monitor and send mail asynchronously, complete with template support.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15548824,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04b35cb1bc7f7d4187c1bf54ce3f54614fd5626f363fa19518221e2850f58025",
        "md5": "46de6fca48e8ed002888955f93e8747a",
        "sha256": "7ff85eb858c4c7fd41be6dfc8d45ceb66e5c0c47dc417e3fe05ec58507ff8120"
      },
      "downloads": -1,
      "filename": "django_post_office-1.1.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "46de6fca48e8ed002888955f93e8747a",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 57647,
      "upload_time": "2015-06-08T09:40:37",
      "upload_time_iso_8601": "2015-06-08T09:40:37.111961Z",
      "url": "https://files.pythonhosted.org/packages/04/b3/5cb1bc7f7d4187c1bf54ce3f54614fd5626f363fa19518221e2850f58025/django_post_office-1.1.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83190768c441604bfba985d693d0a90d49edd6dfcdcbef778af9531a11fd0fa8",
        "md5": "f40319d2c5361a83bfca4c7a390839ad",
        "sha256": "f0bb8bfe70c4f5bcd91396a1b012c0c793cd553069907e6aa65092f07ee36059"
      },
      "downloads": -1,
      "filename": "django-post_office-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f40319d2c5361a83bfca4c7a390839ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34095,
      "upload_time": "2015-06-08T09:40:32",
      "upload_time_iso_8601": "2015-06-08T09:40:32.545569Z",
      "url": "https://files.pythonhosted.org/packages/83/19/0768c441604bfba985d693d0a90d49edd6dfcdcbef778af9531a11fd0fa8/django-post_office-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}