{
  "info": {
    "author": "Jules Kreuer / not_a_feature",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![miniFASTA](https://github.com/not-a-feature/miniFASTA/raw/main/miniFASTA.png)\n\nA simple FASTA toolbox for small to medium size projects without dependencies.\n\n![Test Badge](https://github.com/not-a-feature/miniFASTA/actions/workflows/tests.yml/badge.svg)\n![Python Version Badge](https://img.shields.io/pypi/pyversions/miniFASTA)\n![Download Badge](https://img.shields.io/pypi/dm/miniFASTA.svg)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nFASTA files are text-based files for storing nucleotide or amino acid sequences.\nReading such files is not particularly difficult, yet most off the shelf packages are overloaded with strange dependencies.\n\nminiFASTA offers an alternative to this and brings many useful functions without relying on third party packages.\n\n## Installation\nUsing pip  / pip3:\n```bash\npip install miniFasta\n```\nOr by source:\n```bash\ngit clone git@github.com:not-a-feature/miniFASTA.git\ncd miniFASTA\npip install .\n```\n\n## How to use\nminiFASTA offers easy to use functions for fasta handling.\nThe five main parts are:\n- fasta_object()\n    - toAmino()\n    - roRevComp()\n    - valid()\n    - len() / str() / eq() / iter()\n- read()\n- write()\n- translate_seq()\n- reverse_comp()\n\n\n### fasta_object()\nThe core component of miniFASTA is the ```fasta_object()```. This object represents an FASTA entry and consists of a head and body.\n\n```python \nimport miniFasta as mf\nfo = mf.fasta_object(\">Atlantic dolphin\", \"CGGCCTTCTATCTTCTTC\", stype=\"DNA\")\nfo.getHead() or fo.head\n# >Atlantic dolphin\n\nfo.getSeq() or fo.body\n# CGGCCTTCTATCTTCTTC\n\n### Following functions are defined on a fasta_object():\n\nstr(fo) # will return:\n# >Atlantic dolphin\n# CGGCCTTCTATCTTCTTC\n\n# Body length\nlen(fo) # will return 18, the length of the body\n\n# Equality \nfo == fo # True\n\nfo_b = mf.fasta_object(\">Same Body\", \"CGGCCTTCTATCTTCTTC\")\nfo == fo_b # True\n\nfo_c = mf.fasta_object(\">Different Body\", \"ZZZZAGCTAG\")\nfo == fo_c # False\n\nfor s in fo:\n    # Iterates through the sequence of fo.\n```\n\n**fasta_object(...).valid()**\n\nChecks if the body contains invalid characters.\n_stype_ of fasta_object needs to be set in order to check for illegal characters in its body.\n\nstype is one of:\n- ANY : [default] Allows all characters.\n- NA  : Allows all Nucleic Acid Codes (DNA & RNA).\n- DNA : Allows all IUPAC DNA Codes.\n- RNA : Allows all IUPAC RNA Codes.\n- PROT: Allows all IUPAC Aminoacid Codes.\n\nOptional: allowedChars can be set to overwrite default settings.\n\n```python\n# The default object allows all characters.\n# True\nfasta_object(\">valid\", \"Ä'_**?.asdLLA\").valid()\n\n# Only if stype is specified, valid can check for illegal characters.\n# True\nfasta_object(\">valid\", \"ACGTUAGTGU\", stype=\"NA\").valid()\n\n# False, as W is not allowed for DNA/RNA\nfasta_object(\">invalid\", \"ACWYUOTGU\", stype=\"NA\").valid() \n\n# True\nfasta_object(\">valid\", \"AGGATTA\", stype=\"ANY\").valid(allowedChars = \"AGTC\")\n\n# True, as stype is ignored if allowedChars is set.\nfasta_object(\">valid\", \"WYU\", stype=\"DNA\").valid(allowedChars = \"WYU\") \n```\n\n**fasta_object(...).toAmino(translation_dict)**\n\nTranslates the body to an amino-acid sequence. See `tranlate_seq()` for more details.\n```python \nfo.toAmino() \nfo.getBody() # Will return RPSIFF\nd = {\"CCG\": \"Z\", \"CTT\": \"A\" ...}\nfo.toAmino(d) \nfo.getBody # Will return ZA...\n```\n**fasta_object(...).toRevComp(complement_dict)**\n\nConverts the body to its reverse comlement. See `reverse_comp()` for more details.\n```python \nfo.toRevComp() \nfo.getBody # Will return GAAGAAGATAGAAGGCCG\n```\n## Reading FASTA files\n`read()` is a fasta reader which is able to handle compressed and non-compressed files.\nFollowing compressions are supported: zip, tar, tar.gz, gz. If multiple files are stored inside an archive, all files are read. \nThis function returns a list of fasta_objects. \nThe entries are usually casted to upper case letters. Set `read(\"path.fasta\", upper=False)` to disable casting.\n\n```python\nfos = mf.read(\"dolphin.fasta\") # List of fasta entries.\nfos = mf.read(\"mouse.fasta\", upper=False) # The entries won't be casted to upper case.\nfos = mf.read(\"reads.tar.gz\") # Is able to handle compressed files.\n```\n\n## Writing FASTA files\n`write()` is a basic fasta writer.\nIt takes a single or a list of fasta_objects and writes it to the given path. \n\nThe file is usually overwritten. Set `write(fo, \"path.fasta\", mode=\"a\")` to append file.\n\n```python\nfos = mf.read(\"dolphin.fasta\") # List of fasta entries\nmf.write(fos, \"new.fasta\")\n```\n## Sequence translation\n`translate_seq()` translates a sequence starting at position 0.\nUnless translation_dict is provided, the standart bacterial code is used. If the codon was not found, it will be replaced by an `~`. Tailing bases that do not fit into a codon will be ignored.\n\n```python \nmf.translate_seq(\"CGGCCTTCTATCTTCTTC\") # Will return RPSIFF\n\nd = {\"CGG\": \"Z\", \"CTT\": \"A\"}\nmf.translate_seq(\"CGGCTT\", d) # Will return ZA.\n```\n\n## Reverse Complement\n`reverse_comp()` converts a sequence to its reverse comlement.\nUnless complement_dict is provided, the standart complement is used. If no complement was found, the nucleotide remains unchanged.\n```python \nmf.reverse_comp(\"CGGCCTTCTATCTTCTTC\") # Will return GAAGAAGATAGAAGGCCG\n\nd = {\"C\": \"Z\", \"T\": \"Y\"}\nmf.reverse_comp(\"TC\", d) # Will return ZY\n```\n\n## License\n```\nCopyright (C) 2022 by Jules Kreuer - @not_a_feature\nThis piece of software is published unter the GNU General Public License v3.0\nTLDR:\n\n| Permissions      | Conditions                   | Limitations |\n| ---------------- | ---------------------------- | ----------- |\n| ✓ Commercial use | Disclose source              | ✕ Liability |\n| ✓ Distribution   | License and copyright notice | ✕ Warranty  |\n| ✓ Modification   | Same license                 |             |\n| ✓ Patent use     | State changes                |             |\n| ✓ Private use    |                              |             |\n```\nGo to [LICENSE.md](https://github.com/not-a-feature/miniFASTA/blob/main/LICENSE) to see the full version.\n\n## Dependencies\nIn addition to packages included in Python 3, this piece of software uses 3rd-party software packages for development purposes that are not required in the published version.\nGo to [DEPENDENCIES.md](https://github.com/not-a-feature/miniFASTA/blob/main/DEPENDENCIES.md) to see all dependencies and licenses.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/not-a-feature/miniFASTA",
    "keywords": "FASTA,reader,bio,bioinformatics",
    "license": "gpl-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniFasta",
    "package_url": "https://pypi.org/project/miniFasta/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/miniFasta/",
    "project_urls": {
      "Homepage": "https://github.com/not-a-feature/miniFASTA"
    },
    "release_url": "https://pypi.org/project/miniFasta/2.3.2/",
    "requires_dist": [
      "pytest (>=6.0) ; extra == 'testing'",
      "pytest-cov (>=2.0) ; extra == 'testing'",
      "tox (>=3.20) ; extra == 'testing'",
      "black (>=22.1) ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple FASTA toolbox for small to medium size projects without dependencies.",
    "version": "2.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15696553,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e40ae485d435d095c78076cf5108023ced17d344d4aeb1212de1fc3fee56646",
        "md5": "47f246a56af4bca64a8f40220b0bbb27",
        "sha256": "4606f62cde6aef6bb284a9a44aa9b441ee08da433a0bfe6a0c7397e1aff8fd48"
      },
      "downloads": -1,
      "filename": "miniFasta-2.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47f246a56af4bca64a8f40220b0bbb27",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 20506,
      "upload_time": "2022-03-11T08:43:08",
      "upload_time_iso_8601": "2022-03-11T08:43:08.876907Z",
      "url": "https://files.pythonhosted.org/packages/6e/40/ae485d435d095c78076cf5108023ced17d344d4aeb1212de1fc3fee56646/miniFasta-2.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ced46231ab7871ffb760d45ea387c9fe870493dc6c88f2ed984d2ca874b43f1",
        "md5": "deafee54dd8c85f2460f1c0edee75820",
        "sha256": "d5011443e3d7d37aba349b289d6faa7ea8b1497febdb36e9c6877d54900c9451"
      },
      "downloads": -1,
      "filename": "miniFasta-2.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "deafee54dd8c85f2460f1c0edee75820",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21760,
      "upload_time": "2022-03-11T08:43:10",
      "upload_time_iso_8601": "2022-03-11T08:43:10.271598Z",
      "url": "https://files.pythonhosted.org/packages/3c/ed/46231ab7871ffb760d45ea387c9fe870493dc6c88f2ed984d2ca874b43f1/miniFasta-2.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}