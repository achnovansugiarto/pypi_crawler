{
  "info": {
    "author": "Jules Kreuer / not_a_feature",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![miniFASTA](https://github.com/not-a-feature/miniFASTA/raw/main/miniFASTA.png)\n\nAn easy FASTA object handler, reader, writer and translator for small to medium size projects without dependencies.\n\n![Test Badge](https://github.com/not-a-feature/miniFASTA/actions/workflows/tests.yml/badge.svg)\n![Download Badge](https://img.shields.io/pypi/dm/miniFASTA.svg)\n## Installation\nUsing pip  / pip3:\n```bash\npip install miniFasta\n```\nOr by source:\n```bash\ngit clone git@github.com:not-a-feature/miniFASTA.git\ncd miniFASTA\npip install .\n```\n\n## How to use\nminiFASTA offers easy to use functions for fasta handling.\nThe five main parts are:\n- fasta_object()\n    - toAmino()\n    - roRevComp()\n    - len() / str() / eq()\n- read()\n- write()\n- translate_seq()\n- reverse_comp()\n\n\n### fasta_object()\nThe core component of miniFASTA is the ```fasta_object()```. This object represents an entry in a FASTA file and consists of a head and body.\n\n```python \nimport miniFasta as mf\nfo = mf.fasta_object(\">Atlantic dolphin\", \"CGGCCTTCTATCTTCTTC\")\nprint(fo.head) # >Atlantic dolphin\nprint(fo.body) # CGGCCTTCTATCTTCTTC\n\n### Following functions are defined on a fasta_object():\n\nstr(fo) # will return:\n# >Atlantic dolphin\n# CGGCCTTCTATCTTCTTC\n\n# Body length\nlen(fo) # will return 18, the length of the body\n\n# Equality \nprint(fo == fo) # True\n\nfo_b = mf.fasta_object(\">Same Body\", \"CGGCCTTCTATCTTCTTC\")\nprint(fo == fo_b) # True\n\nfo_c = mf.fasta_object(\">Different Body\", \"ZZZZAGCTAG\")\nprint(fo == fo_c) # False\n```\n\n**fasta_object(...).toAmino(translation_dict)**\n\nTranslates the body to an amino-acid sequence. See `tranlate_seq()` for more details.\n```python \nfo.toAmino() \nprint(fo.body) # Will return RPSIFF\nd = {\"CCG\": \"Z\", \"CTT\": \"A\" ...}\nfo.toAmino(d) \nprint(fo.body) # Will return ZA...\n```\n**fasta_object(...).toRevComp(complement_dict)**\n\nConverts the body to its reverse comlement. See `reverse_comp()` for more details.\n```python \nfo.toRevComp() \nprint(fo.body) # Will return GAAGAAGATAGAAGGCCG\n```\n## Reading FASTA files\n`read()` is a fasta reader which is able to handle compressed and non-compressed files.\nFollowing compressions are supported: zip, tar, tar.gz, gz. If multiple files are stored inside an archive, all files are read. \nThis function returns a list of fasta_objects. \nThe entries are usually casted to upper case letters. Set `read(\"path.fasta\", upper=False)` to disable casting.\n\n```python\nfos = mf.read(\"dolphin.fasta\") # List of fasta entries.\nfos = mf.read(\"mouse.fasta\", upper=False) # The entries won't be casted to upper case.\nfos = mf.read(\"reads.tar.gz\") # Is able to handle compressed files.\n```\n\n## Writing FASTA files\n`write()` is a basic fasta reader.\nIt takes a single or a list of fasta_objects and writes it to the given path. \n\nThe file is usually overwritten. Set `write(fo, \"path.fasta\", mode=\"a\")` to append file.\n\n```python\nfos = mf.read(\"dolphin.fasta\") # List of fasta entries\nmf.write(fos, \"new.fasta\")\n```\n## Sequence translation\n`translate_seq()` translates a sequence starting at position 0.\nUnless translation_dict is provided, the standart bacterial code is used. If the codon was not found, it will be replaced by an `~`. Tailing bases that do not fit into a codon will be ignored.\n\n```python \nmf.translate_seq(\"CGGCCTTCTATCTTCTTC\") # Will return RPSIFF\n\nd = {\"CGG\": \"Z\", \"CTT\": \"A\"}\nmf.translate_seq(\"CGGCTT\", d) # Will return ZA.\n```\n\n## Reverse Complement\n`reverse_comp()` converts a sequence to its reverse comlement.\nUnless complement_dict is provided, the standart complement is used. If no complement was found, the nucleotide remains unchanged.\n```python \nmf.reverse_comp(\"CGGCCTTCTATCTTCTTC\") # Will return GAAGAAGATAGAAGGCCG\n\nd = {\"C\": \"Z\", \"T\": \"Y\"}\nmf.reverse_comp(\"TC\", d) # Will return ZY\n```\n\n## License\n```\nCopyright (C) 2021 by Jules Kreuer - @not_a_feature\nThis piece of software is published unter the GNU General Public License v3.0\nTLDR:\n\n| Permissions      | Conditions                   | Limitations |\n| ---------------- | ---------------------------- | ----------- |\n| ✓ Commercial use | Disclose source              | ✕ Liability |\n| ✓ Distribution   | License and copyright notice | ✕ Warranty  |\n| ✓ Modification   | Same license                 |             |\n| ✓ Patent use     | State changes                |             |\n| ✓ Private use    |                              |             |\n```\nGo to [LICENSE.md](https://github.com/not-a-feature/miniFASTA/blob/main/LICENSE) to see the full version.\n\n## Dependencies\nIn addition to packages included in Python 3, this piece of software uses 3rd-party software packages for development purposes that are not required in the published version.\nGo to [DEPENDENCIES.md](https://github.com/not-a-feature/miniFASTA/blob/main/DEPENDENCIES.md) to see all dependencies and licenses.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/not-a-feature/miniFASTA",
    "keywords": "FASTA,reader,bio,bioinformatics",
    "license": "gpl-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniFasta",
    "package_url": "https://pypi.org/project/miniFasta/",
    "platform": "unix",
    "project_url": "https://pypi.org/project/miniFasta/",
    "project_urls": {
      "Homepage": "https://github.com/not-a-feature/miniFASTA"
    },
    "release_url": "https://pypi.org/project/miniFasta/2.1.1/",
    "requires_dist": [
      "flake8 (>=3.9) ; extra == 'testing'",
      "pytest-cov (>=2.0) ; extra == 'testing'",
      "pytest (>=6.0) ; extra == 'testing'",
      "tox (>=3.20) ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "An easy FASTA object handler, reader, writer and translator for small to medium size projects without dependencies.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15696553,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7aca0a69478c25d0051a953c25d85a725a7fb1cf18976e6f63f4c6548f244072",
        "md5": "33ecedf1f4d57af32791e7ba8bb2fb36",
        "sha256": "ab2749f9fa9f4da879fe18bd0ec88a671e39746f9bc584222c4c706d5c092cf8"
      },
      "downloads": -1,
      "filename": "miniFasta-2.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33ecedf1f4d57af32791e7ba8bb2fb36",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 18467,
      "upload_time": "2021-12-28T20:59:39",
      "upload_time_iso_8601": "2021-12-28T20:59:39.079918Z",
      "url": "https://files.pythonhosted.org/packages/7a/ca/0a69478c25d0051a953c25d85a725a7fb1cf18976e6f63f4c6548f244072/miniFasta-2.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "199d21fccad8b3f3871eeb532752a841cb9779ca9a30438d053eff8520b8cc35",
        "md5": "6f49bab32c183f0f9c7e6614d2fbbaa8",
        "sha256": "7f5a5c8e965e6e040856859424e7abe5957bb30de155a5ebc8a63efabd9cf3f3"
      },
      "downloads": -1,
      "filename": "miniFasta-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6f49bab32c183f0f9c7e6614d2fbbaa8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 19663,
      "upload_time": "2021-12-28T20:59:40",
      "upload_time_iso_8601": "2021-12-28T20:59:40.235823Z",
      "url": "https://files.pythonhosted.org/packages/19/9d/21fccad8b3f3871eeb532752a841cb9779ca9a30438d053eff8520b8cc35/miniFasta-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}