{
  "info": {
    "author": "Nathan Fradet",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Multimedia :: Sound/Audio :: MIDI",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# MidiTok\n\nMidiTok is a package for MIDI encoding / tokenization for deep neural networks. It \"tokenize\" MIDI files as for text in the NLP field, to use them with Transformers or RNNs.\n\nMidiTok features most known MIDI encoding strategies, and is built around the idea that they all share common parameters and methods.\n\n## Install\n\n```shell\npip install miditok\n```\nMidiTok uses MIDIToolkit, which itself uses Mido to read and write MIDI files.\n\n## Examples\n\n### Tokenize a MIDI\n\n```python\nfrom miditok import REMIEncoding, get_midi_programs\nfrom miditoolkit import MidiFile\n\n# Our parameters\npitch_range = range(21, 109)\nbeat_res = {(0, 4): 8, (4, 12): 4}\nnb_velocities = 32\nadditional_tokens = {'Chord': True, 'Rest': True, 'Tempo': True,\n                     'rest_range': (2, 8),  # (half, 8 beats)\n                     'nb_tempos': 32,  # nb of tempo bins\n                     'tempo_range': (40, 250)}  # (min, max)\n\n# Creates the tokenizer and loads a MIDI\ntokenizer = REMIEncoding(pitch_range, beat_res, nb_velocities, additional_tokens)\nmidi = MidiFile('path/to/your_midi.mid')\n\n# Converts MIDI to tokens, and back to a MIDI\ntokens = tokenizer.midi_to_tokens(midi)\nconverted_back_midi = tokenizer.tokens_to_midi(tokens, get_midi_programs(midi))\n\n# Converts just a selected track\ntokenizer.current_midi_metadata = {'time_division': midi.ticks_per_beat, 'tempo_changes': midi.tempo_changes}\npiano_tokens = tokenizer.track_to_tokens(midi.instruments[0])\n\n# And convert it back (the last arg stands for (program number, is drum))\nconverted_back_track, tempo_changes = tokenizer.tokens_to_track(piano_tokens, midi.ticks_per_beat, (0, False))\n```\n\n### Tokenize a dataset\n\nMidiTok will save your encoding parameters in a ```config.txt``` file to keep track of how they were converted.\n\n```python\nfrom miditok import REMIEncoding\nfrom pathlib import Path\n\n# Creates the tokenizer and list the file paths\ntokenizer = REMIEncoding()  # uses defaults parameters\npaths = list(Path('path', 'to', 'dataset').glob('**/*.mid'))\n\n# A validation method to discard MIDIs we do not want\ndef midi_valid(midi) -> bool:\n    if any(ts.numerator != 4 or ts.denominator != 4 for ts in midi.time_signature_changes):\n        return False  # time signature different from 4/4\n    if midi.max_tick < 10 * midi.ticks_per_beat:\n        return False  # this MIDI is too short\n    return True\n\n# Converts MIDI files to tokens saved as JSON files\ntokenizer.tokenize_midi_dataset(paths, 'path/to/save', midi_valid)\n```\n\n### Write a MIDI file from tokens\n\n```python\nfrom miditok import REMIEncoding\nimport torch\n\n# Creates the tokenizer and list the file paths\nremi_enc = REMIEncoding()  # uses defaults parameters in constants.py\n\n# The tokens, let's say produced by your Transformer, 4 tracks of 500 tokens\ntokens = torch.randint(low=0, high=len(remi_enc.event2token), size=(4, 500)).tolist()\n\n# The instruments, here piano, violin, french horn and drums\nprograms = [(0, False), (41, False), (61, False), (0, True)]\n\n# Convert to MIDI and save it\ngenerated_midi = remi_enc.tokens_to_midi(tokens, programs)\ngenerated_midi.dump('path/to/save/file.mid')  # could have been done above by giving the path argument\n```\n\n## Encodings\n\nThe figures represent the following music sheet as its corresponding token sequences.\n\n![Music sheet example](https://github.com/Natooz/MidiTok/blob/assets/assets/music_sheet.png?raw=true \"Music sheet example\")\n\n_Tokens are vertically stacked at index 0 from the bottom up to the top._\n\n### MIDI-Like\n\nStrategy used in the first symbolic music generative transformers and RNN / LSTM models. It consists of encoding the MIDI messages (Note On, Note Off, Velocity and Time Shift) into tokens as represented in a pure \"MIDI way\".\n\nNOTES:\n* Rests act exactly like Time-shifts. It is then recommended choosing a minimum rest range of the same first beat resolution so the time is shifted with the same accuracy. For instance if your first beat resolution is ```(0, 4): 8```, you should choose a minimum rest of ```8```.\n\n![MIDI-Like figure](https://github.com/Natooz/MidiTok/blob/assets/assets/midi_like.png?raw=true \"MIDI-Like token sequence, with Time-Shifts and Note-Off tokens\")\n\n### REMI\n\nProposed with the [Pop Music Transformer](https://arxiv.org/abs/2002.00212), it is a \"position-based\" representation. The time is represented with \"_Bar_\" and \"_Position_\" tokens that indicate respectively when a new bar is beginning, and the current position within a bar. A note is represented as a succession of a _Pitch_, _Velocity_ and _Duration_ tokens.\n\nNOTES:\n* In the original REMI paper, the tempo information are in fact the succession of two token types: a \"_Token Class_\" which indicate if the tempo is fast or slow, and a \"_Token Value_\" which represents its value with respect to the tempo class. In MidiTok we only encode one _Tempo_ token which encode its value, quantized in a number of bins set in parameters (as done for velocities).\n* Including tempo tokens in a multitrack task with REMI is not recommended. Generating several tracks would lead to multiple and ambiguous tempo changes. So in MidiTok only the tempo changes of the first track will be kept in the final created MIDI.\n* Position tokens are always following Rest tokens to make sure the position of the following notes are explicitly stated. Bar tokens can follow Rest tokens depending on their respective value and your parameters.\n\n![REMI figure](https://github.com/Natooz/MidiTok/blob/assets/assets/remi.png?raw=true \"REMI sequence, time is tracked with Bar and position tokens\")\n\n### Compound Word\n\nIntroduced with the [Compound Word Transformer](https://arxiv.org/abs/2101.02402) this representation is similar to the REMI encoding. The key difference is that tokens of different types of a same \"event\" are combined and processed at the same time by the model.\n_Pitch_, _Velocity_ and _Durations_ tokens of a same note will be combined for instance. The greatest benefit of this encoding strategy is the **reduced sequence lengths** that it creates, which means less time and memory consumption as transformers (with softmax attention) have a quadratic complexity.\n\nYou can combine them in your model the way you want. CP Word authors concatenated each embeddings and projected the sequence with a projection matrix, resulting in a _d_-dimensional vector (_d_ being the model size).\n\nAt decoding, the easiest way to predict multiple tokens (employed by the original authors) is to project the output vector of your model with several projection matrices, one for each token type.\n\n![Compound Word figure](https://github.com/Natooz/MidiTok/blob/assets/assets/cp_word.png?raw=true \"CP Word sequence, tokens of the same family are grouped together\")\n\n### Structured\n\nPresented with the [Piano Inpainting Application](https://arxiv.org/abs/2107.05944), it is similar to the MIDI-Like encoding but with _Duration_ tokens instead Note-Off.\nThe main advantage of this encoding is the consistent token type transitions it imposes, which can greatly speed up training. The structure is as: _Pitch_ -> _Velocity_ -> _Duration_ -> _Time Shift_ -> ... (pitch again)\nTo keep this property, no additional token can be inserted in MidiTok's implementation.\n\n![Structured figure](https://github.com/Natooz/MidiTok/blob/assets/assets/structured.png?raw=true \"Structured MIDI encoding, the token types always follow the same transition pattern\")\n\n### Octuple\n\nIntroduced with [Symbolic Music Understanding with Large-Scale Pre-Training](https://arxiv.org/abs/2106.05630). Each note of each track is the combination of multiple embeddings: _Pitch_, _Velocity_, _Duration_, _Track_, current _Bar_, current _Position_ and additional tokens.\nThe main benefit is the reduction of the sequence lengths, its multitrack capabilities, and its simple structure easy to decode.\nThe Bar and Position embeddings can act as a positional encoding, but the authors of the original paper still applied a token-wise positional encoding afterward.\n\nNOTES:\n* In MidiTok, the tokens are first sorted by time, then track, then pitch values.\n* This implementation uses _Program_ tokens to distinguish tracks, on their MIDI program. Hence, two tracks with the same program will be treated as being the same.\n* Time signature tokens are not implemented in MidiTok.\n* [Octuple Mono](miditok/octuple_mono.py) is a modified version with no program embedding at each time step.\n\n![Octuple figure](https://github.com/Natooz/MidiTok/blob/assets/assets/octuple.png?raw=true \"Octuple sequence, with a bar and position embeddings\")\n\n### MuMIDI\n\nPresented with the [PopMAG](https://arxiv.org/abs/2008.07703) model, this representation is mostly suited for multitrack tasks. The time is based on _Position_ and _Bar_ tokens as REMI and Compound Word.\nThe key idea of MuMIDI is to represent every track in a single sequence. At each time step, \"_Track_\" tokens preceding note tokens indicate from which track they are.\nMuMIDI also include a \"built-in\" positional encoding mechanism. At each time step, embeddings of the current bar and current position are merged with the token. For a note, the _Pitch_, _Velocity_ and _Duration_ embeddings are also merged together.\n\nNOTES:\n* In MidiTok, the tokens are first sorted by time, then track, then pitch values.\n* In the original MuMIDI, _Chord_ tokens are placed before Track tokens. We decided in MidiTok to put them after as chords are produced by one instrument, and several instruments can produce more than one chord at a time step.\n* This implementation uses _Program_ tokens to distinguish tracks, on their MIDI program. Hence, two tracks with the same program will be treated as being the same.\n* As in the original MuMIDI implementation, MidiTok distinguishes pitch tokens of drums from pitch tokens of other instruments. More details in the [code](miditok/mumidi.py).\n\n![MuMIDI figure](https://github.com/Natooz/MidiTok/blob/assets/assets/mumidi.png?raw=true \"MuMIDI sequence, with a bar and position embeddings\")\n\n### Create your own\n\nYou can easily create your own encoding strategy and benefit from the MidiTok framework. Just create a class inheriting from the [MIDITokenizer](miditok/midi_tokenizer_base.py) base class, and override the ```track_to_tokens```, ```tokens_to_track```,  ```_create_vocabulary``` and ```_create_token_types_graph``` methods with your tokenization strategy.\n\nWe encourage you to read the docstring of the [Vocabulary class](miditok/vocabulary.py) to learn how to use it for your strategy.\n\n## Features\n\n### Common parameters\n\nEvery encoding strategy share some common parameters around which the tokenizers are built:\n\n* **Pitch range:** the MIDI norm can represent pitch values from 0 to 127, but the [GM2 specification](https://www.midi.org/specifications-old/item/general-midi-2) recommend from 21 to 108 for piano, which covers the recommended pitch values for all MIDI program. Notes with pitches under or above this range can be discarded or clipped to the limits.\n* **Beat resolution:** is the number of samples within a beat. MidiTok handles this with a flexible way: a dictionary of the form ```{(0, 4): 8, (3, 8): 4, ...}```. The keys are tuples indicating a range of beats, ex 0 to 4 for the first bar. The values are the resolutions, in samples per beat, of the given range, here 8 for the first. This way you can create a tokenizer with durations / time shifts of different lengths and resolutions.\n* **Number of velocities:** the number of velocity values you want represents. For instance if you set this parameter to 32, the velocities of the notes will be quantized into 32 velocity values from 0 to 127.\n* **Additional tokens:** specify which additional tokens bringing information like chords should be included. Note that each encoding is compatible with different additional tokens.\n\nCheck [constants.py](miditok/constants.py) to see how these parameters are constructed.\n\n### Additional tokens\n\nMidiTok offers the possibility to insert additional tokens in the encodings.\nThese tokens bring additional information about the structure and content of MIDI tracks to explicitly use them to train a neural network.\n\n* **Chords:** indicate the presence of a chord at a certain time step. MidiTok uses a chord detection method based on onset times and duration. This allows MidiTok to detect precisely chords without ambiguity, whereas most chord detection methods in symbolic music based on chroma features can't.\n* **Rests:** include \"Rest\" events whenever a segment of time is silent, i.e. no note is played within. This token type is decoded as a \"Time-Shift\" event, meaning the time will be shifted according to its value. You can choose the minimum and maximum rests values to represent (default is 1/2 beat to 8 beats). Note that rests shorter than one beat are only divisible by the first beat resolution, e.g. a rest of 5/8th of a beat will be a succession of ```Rest_0.4``` and ```Rest_0.1```, where the first number indicate the rest duration in beats and the second in samples / positions.\n* **Tempos:** specify the current tempo. This allows to train a model to predict tempo changes alongside with the notes, unless specified in the chart below. Tempo values are quantized on your specified range and number (default is 32 tempos from 40 to 250).\n* **Programs:** used to specify an instrument / MIDI program. MidiTok only offers the possibility to include these tokens in the vocabulary for you, but won't use them. If you need model multitrack symbolic music with other methods than Octuple / MuMIDI, MidiTok leaves you the choice / task to represent the track information the way you want. You can do it as in [LakhNES](https://github.com/chrisdonahue/LakhNES) or [MMM](https://metacreation.net/mmm-multi-track-music-machine/).\n\nAdditionally, MidiTok offers to include *Program* tokens in the vocabulary of MIDI-Like, REMI and CP Word.\nWe do not consider them additional tokens though as they are not used anywhere in MidiTok, but intended for you to insert them at the beginning of each sequence as *Start Of Sequence* tokens.\n\n|       | MIDI-Like     | REMI          | Compound Word | Structured | Octuple | MuMIDI |\n|-------|:-------------:|:--------------:|:--------------:|:--------:|:-------:|:------:|\n| Chord | ✅             | ✅             | ✅             | ❌        | ❌      | ✅     |\n| Rest  | ✅             | ✅             | ✅             | ❌        | ❌      | ❌     |\n| Tempo | ✅<sup>1</sup> | ✅<sup>1</sup> | ✅<sup>1</sup> | ❌        | ✅      | ✅     |\n| Program | ✅           | ✅             | ✅             | ✅        | ✅<sup>3</sup>| ✅<sup>3</sup>|\n\n<sup>1</sup> Should not be used with multiple tracks. Otherwise, at decoding, only the events of the first track will be considered.\\\n<sup>2</sup> Only used in the input as additional information. At decoding no tempo tokens should be predicted, i.e will be considered.\\\n<sup>3</sup> Integrated by default.\n\n## Limitations\n\nFor the concerned tokenization methods, MidiTok only consider a 4/4 time signature for now. This means that each bar is considered covering 4 beats, and each beat is the duration of a quarter note.\n\nFuture updates will support other time signatures, and time signature changes for compatible tokenizations.\n\n## Contributions\n\nContributions are gratefully welcomed, feel free to send a PR if you want to add an encoding strategy or speed up the code. Just make sure to pass the [tests](tests).\n\n## Citations\n\n```bibtex\n@article{midilike2018,\n    title={This time with feeling: Learning expressive musical performance},\n    author={Oore, Sageev and Simon, Ian and Dieleman, Sander and Eck, Douglas and Simonyan, Karen},\n    journal={Neural Computing and Applications},\n    year={2018},\n    publisher={Springer}\n}\n```\n\n```bibtex\n@inproceedings{remi2020,\n    title={Pop Music Transformer: Beat-based modeling and generation of expressive Pop piano compositions},\n    author={Huang, Yu-Siang and Yang, Yi-Hsuan},\n    booktitle={Proceedings of the 28th ACM International Conference on Multimedia},\n    year={2020}\n}\n```\n\n```bibtex\n@inproceedings{cpword2021,\n    title={Compound Word Transformer: Learning to Compose Full-Song Music over Dynamic Directed Hypergraphs},\n    author={Hsiao, Wen-Yi and Liu, Jen-Yu and Yeh, Yin-Cheng and Yang, Yi-Hsuan},\n    booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},\n    year={2021}\n}\n```\n\n```bibtex\n@misc{structured2021,\n    title={The Piano Inpainting Application},\n    author={Gaëtan Hadjeres and Léopold Crestel},\n    year={2021},\n    eprint={2107.05944},\n    archivePrefix={arXiv},\n    primaryClass={cs.SD}\n}\n```\n\n```bibtex\n@inproceedings{mumidi2020,\n    author = {Ren, Yi and He, Jinzheng and Tan, Xu and Qin, Tao and Zhao, Zhou and Liu, Tie-Yan},\n    title = {PopMAG: Pop Music Accompaniment Generation},\n    year = {2020},\n    publisher = {Association for Computing Machinery},\n    booktitle = {Proceedings of the 28th ACM International Conference on Multimedia}\n}\n```\n\n```bibtex\n@misc{octuple2021,\n    title={MusicBERT: Symbolic Music Understanding with Large-Scale Pre-Training}, \n    author={Mingliang Zeng and Xu Tan and Rui Wang and Zeqian Ju and Tao Qin and Tie-Yan Liu},\n    year={2021},\n    eprint={2106.05630},\n    archivePrefix={arXiv},\n    primaryClass={cs.SD}\n}\n```\n\n\n\n## Acknowledgments\n\nWe acknowledge [Aubay](https://www.aubay.com/index.php/language/en/home/?lang=en), the [LIP6](https://www.lip6.fr/?LANG=en), [LERIA](http://blog.univ-angers.fr/leria/n) and [ESEO](https://eseo.fr/en) for the financing and support of this project.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Natooz/MidiTok",
    "keywords": "artificial intelligence,deep learning,transformer,midi,tokenization,music,mir",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miditok",
    "package_url": "https://pypi.org/project/miditok/",
    "platform": "",
    "project_url": "https://pypi.org/project/miditok/",
    "project_urls": {
      "Homepage": "https://github.com/Natooz/MidiTok"
    },
    "release_url": "https://pypi.org/project/miditok/1.1.3/",
    "requires_dist": [
      "numpy (>=1.21)",
      "miditoolkit (>=0.1.14)"
    ],
    "requires_python": "",
    "summary": "A convenient MIDI tokenizer for Deep Learning networks, with multiple encoding strategies",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17376317,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08bd50a72bc52283a55623a5f2bcdfb15c8c4de7880c8cb2fd9625ce81a9a0f7",
        "md5": "8dc94a352dd18af20e1cfd217274ab61",
        "sha256": "d76e8ef89dbd2623c760a3fedbcafe46ff6add9a8d954179c732ffb3e57ca3dd"
      },
      "downloads": -1,
      "filename": "miditok-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8dc94a352dd18af20e1cfd217274ab61",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 56886,
      "upload_time": "2021-11-04T14:18:07",
      "upload_time_iso_8601": "2021-11-04T14:18:07.900812Z",
      "url": "https://files.pythonhosted.org/packages/08/bd/50a72bc52283a55623a5f2bcdfb15c8c4de7880c8cb2fd9625ce81a9a0f7/miditok-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ccdf274add4ca48e8c4a89c372da7781e3cd69d78fe71acc039f40455f0c48b",
        "md5": "3c5303615faff5460a4f55f5a439d595",
        "sha256": "f07d7b54c01f007000e7a6587c875335092daed78be4279c384d456abe0f0d2f"
      },
      "downloads": -1,
      "filename": "miditok-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3c5303615faff5460a4f55f5a439d595",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 44142,
      "upload_time": "2021-11-04T14:18:09",
      "upload_time_iso_8601": "2021-11-04T14:18:09.669380Z",
      "url": "https://files.pythonhosted.org/packages/4c/cd/f274add4ca48e8c4a89c372da7781e3cd69d78fe71acc039f40455f0c48b/miditok-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}