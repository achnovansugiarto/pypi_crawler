{
  "info": {
    "author": "Enrico Pittini",
    "author_email": "pittinienrico@hotmail.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# model-selection\nLibrary for the selection of machine learning models.\n\nThis library is part of my bachelor thesis, check out the other works.\n- [timeSeries-processing](https://github.com/EnricoPittini/timeSeries-processing)\n- [EEA-datasets-handler](https://github.com/EnricoPittini/EEA-datasets-handler)\n- [ILMETEO-datasets-handler](https://github.com/EnricoPittini/ILMETEO-datasets-handler)\n- [Air-quality-prediction](https://github.com/EnricoPittini/Air-quality-prediction)\n\n## Description\n\n### Purpose\nThe main purpose of this library is to perform the selection of the best machine learning model among several ones.\nIn other words, the purpose is to perform the validation of different machine learning models.\n\nThis library is meant to be simple and intuitive, but also rich. In this way, the user is able to personalize the model selection in a powerful and flexible way.  \n\nIn addition, the library allows the user to plot the results of the validation, in order to graphically visualize the model selection.\n\nThere are several different model selection functions. Each of them is specifically designed for a particular scenario. Certain contexts are more specific, and others are more general: on the whole, the vast majority of the possible scenarios are covered.\nThis separation of the single model selection task into multiple functions has been made to keep the interface of the library both easy and flexible.\n\n### Functionalities\nOn the whole, there are six different model selection functions, divided into two groups.\n1. In the first group there are the functions which perform the model selection with respect to a single dataset.\n2. In the second group there are the functions which perform the model selection with respect to multiple datasets.\n\nIn particular, the functions in the first group are the following, sorted from the most specific to the most general.\n- hyperparameter_validation. It performs the tuning of the hyperparameter of a certain model.\n- hyperparameters_validation. It performs the tuning of some several hyperparameters of a certain model.\n- models_validation. It performs the model selection among different models.\n\nThe functions in the second group are like the ones in the first group, but they perform the model selection among different datasets. This means that not only the best model is selected, but also the best dataset is selected.\nThe functions in the second group are the following, sorted from the most specific to the most general.\n- datasets_hyperparameter_validation\n- datasets_hyperparameters_validation\n- datasets_models_validation\n\nThis library, besides the model selection functions, contains also some other secondary functionalities.\nIt contains the PolynomialRegression class, which is a machine learning model implementing the polynomial regression.\nIt also contains some functions which compute the training-validation-test scores and the bias^2-variance-error for a certain model on the given dataset.\nFinally, it contains a function which is able to plot the predictions made by a certain model on the given dataset against the actual values. This is useful for graphically visualizing the goodness of a certain model.\n\n### Implementation details\nThe selection of the best model is performed computing the validation scores, which means that the best model is the one associated with the best validation score.\nIn particular, each dataset is split into training and test sets, and then the cross validation strategy is applied on the training set. In this way, the validation score is computed.\nAdditionally, the training and test scores are also computed. These are simply additional indicators: the selection is performed considering only the validation scores.\nWhile the validation and training scores are computed for each model, the test score is computed only for the best one. The test score can be considered as a final measure of goodness for the best model.\n\nAs described above, this library has a rich interface, in order to allow the user to personalize the model selection in a powerful and flexible way.  \nSome examples are now presented.\n- The user can specify whether the machine learning problem is a regression or a classification task. This choice influences the technique used for the selection.\n- The user can specify whether the given datasets are time-series datasets or not. This choice influences the technique used for the selection.\n- The user can specify whether the explanatory features have to be scaled or not.\n\nThis library is built on top of the scikit-learn library.\nThe machine learning models are indeed represented as scikit-learn models, i.e. they are compliant with the [scikit-learn estimators interface](https://scikit-learn.org/stable/developers/develop.html).\nIn addition, under the hood, the selection is performed using the grid search cross validation provided by scikit-learn (i.e.  GridSearchCV);\nMoreover, several other scikit-learn utilities are used.\n\nThe datasets are instead represented as NumPy arrays, i.e. they have type np.ndarray.\n\nFinally, the plots are made using the Matplotlib library.\n\n## Installation\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install model-selection.\n\n```bash\npip install ml-model-selection\n```\n\n## Usage\n\n```python\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nimport model_selection as ms\n\n\n###### Single dataset X,y (numpy array)\n\n# hyperparameter_validation\nmodel = DecisionTreeRegressor()\nhyperparameter = \"max_leaf_nodes\"\nhyperparameter_values = [2,3,4]\ntrain_val_scores, best_index, test_score, ax = ms.hyperparameter_validation(X, y, model, hyperparameter,\n                                                                     hyperparameter_values, plot=True,\n                                                                     plot_train=True)\n\n# hyperparameters_validation                                                        \nmodel = DecisionTreeRegressor()\nparam_grid = {\"max_leaf_nodes\":[2,3,4], \"max_features\":[None,\"sqrt\"]}\nparams, train_val_scores, best_index, test_score = ms.hyperparameters_validation(X, y, model, param_grid,\n                                                                                time_series=True)\n\n# models_validation\nmodel_paramGrid_list = [\n                         (\"DT\", DecisionTreeRegressor(), {\"max_leaf_nodes\":[2,3,4],\n                                                          \"max_features\":[None,\"sqrt\"]} ),\n                         (\"kNN\", KNeighborsRegressor(), {\"n_neighbors\":[1,2,3],\n                                                         \"weights\":[\"uniform\",\"distance\"]})\n                       ]\nmodels_train_val_score, models_best_params, best_index, test_score, ax = ms.models_validation(X, y,\n                                                                                     model_paramGrid_list,\n                                                                                     plot=True)\n\n\n###### Multiple datasets, in dataset_list\ndataset_list = [(X1,y1),(X2,y2),(X3,y3)]\n\n# datasets_hyperparameter_validation\nmodel = DecisionTreeRegressor()\nhyperparameter = \"max_leaf_nodes\"\nhyperparameter_values = [2,3,4]\n(datasets_train_val_score, datasets_best_hyperparameter_value,\n best_index, test_score, axes) = ms.datasets_hyperparameter_validation(dataset_list, model, hyperparameter,\n                                                                    hyperparameter_values, plot=True,\n                                                                    xvalues=[\"D1\",\"D2\",\"D3\"])\n\n# datasets_hyperparameters_validation\nmodel = DecisionTreeRegressor()\nparam_grid = {\"max_leaf_nodes\":[2,3,4], \"max_features\":[None,\"sqrt\"]}\n(datasets_train_val_score, datasets_best_params,\n best_index, test_score, ax) = ms.datasets_hyperparameters_validation(dataset_list, model, param_grid,\n                                                                     plot=True, xvalues=[\"D1\",\"D2\",\"D3\"])\n\n# datasets_models_validation\nmodel_paramGrid_list = [\n                         (\"DT\", DecisionTreeRegressor(), {\"max_leaf_nodes\":[2,3,4],\n                                                          \"max_features\":[None,\"sqrt\"]}),\n                         (\"kNN\", KNeighborsRegressor(), {\"n_neighbors\":[1,2,3],\n                                                         \"weights\":[\"uniform\",\"distance\"]})\n                       ]                       \n(datasets_train_val_score, datasets_best_model,\n best_index, test_score, axes) = ms.datasets_models_validation(dataset_list, model_paramGrid_list,\n                                                               time_series=True, plot=True,\n                                                               xvalues=[\"D1\",\"D2\",\"D3\"])\n```\n\n## References\n- [numpy](https://numpy.org/), the fundamental package for scientific computing with Python.\n- [matplotlib](https://matplotlib.org/stable/index.html) is a comprehensive library for creating static, animated, and interactive visualizations in Python.\n- [sklearn](https://scikit-learn.org/stable/index.html), machine Learning in Python.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EnricoPittini/model-selection",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ml-model-selection",
    "package_url": "https://pypi.org/project/ml-model-selection/",
    "platform": "",
    "project_url": "https://pypi.org/project/ml-model-selection/",
    "project_urls": {
      "Homepage": "https://github.com/EnricoPittini/model-selection"
    },
    "release_url": "https://pypi.org/project/ml-model-selection/1.0.0/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "sklearn"
    ],
    "requires_python": "",
    "summary": "Library for the selection of machine learning models",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11825390,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1eb10a96e882c86b81dfbd17677f30876df41eb8da0dabe5b61745a049244d7e",
        "md5": "f5cec456e6ab277946e8929cafdf967d",
        "sha256": "2b3708f4ca25c0bb2de12bf1da3044121d455ce71c424f026364303a327f67c2"
      },
      "downloads": -1,
      "filename": "ml_model_selection-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5cec456e6ab277946e8929cafdf967d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14019,
      "upload_time": "2021-10-25T17:07:25",
      "upload_time_iso_8601": "2021-10-25T17:07:25.136230Z",
      "url": "https://files.pythonhosted.org/packages/1e/b1/0a96e882c86b81dfbd17677f30876df41eb8da0dabe5b61745a049244d7e/ml_model_selection-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}