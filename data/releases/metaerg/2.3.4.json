{
  "info": {
    "author": "Marc Strous",
    "author_email": "mstrous@ucalgary.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "## metaerg.py, version 2.3.X\n\nMetaerg.py annotates genomes or sets of mags/bins from microbial ecosystems (bacteria, archaea, viruses). Input data \nconsists of nucleotide fasta files, one per genome or mag, each with one or more contigs. Output files with annotations \nare in common formats such as .gff, .gbk, .fasta and .html with predicted genes, their functions and taxonomic \nclassifications.\n\nYou can interact with a sample visualization [here](https://htmlpreview.github.io/?https://github.com/kinestetika/MetaErg/blob/master/visualization/index.html) and [here](https://htmlpreview.github.io/?https://raw.githubusercontent.com/kinestetika/MetaErg/master/visualization/index_of_features.html). These visualizations show the annotation of a cyanobacterial genome, Candidatus Phormidium alkaliphilum.\nUnfortunately the interacive search box does not work with the github html visualization, so you need to download the html \\\nfiles to your computer (i.e. using \"git clone ...\"), to try out the interactive part.\n\nMetaerg was originally developed in perl. It was relatively challenging to install and comes with complex database \ndependencies. This new python version 2.2 overcomes some of those issues. Also, the annotation pipeline has further \nevolved and has become more refined.\n\nBy using gtdbtk for taxonomic classification of genes and transferring functional annotations from the NCBI, metaerg.py\nuses a controlled vocabulary for taxonomy and a relatively clean vocabulary for functions. This makes annotations much\nmore concise than the original version of metaerg and many other annotation tools. In addition, metaerg uses NCBI's\nconserved domain database and RPSBlast to assign genes to subsystems for effective data exploration. Subsystems are a \nwork in progress, and can be expanded and customized as needed.\n\nThe Metaerg 2.3 pipeline ...\n* predicts CRISPR regions using [Minced](https://github.com/ctSkennerton/minced).\n* predicts tRNAs using [Aragorn](https://www.ansikte.se/ARAGORN/Downloads/).\n* predicts RNA genes and other non-coding features using [Infernal](http://eddylab.org/infernal/) - cmscan and RFAM.\n* predicts retrotransposons with [LTR Harvest](http://genometools.org/tools/gt_ltrharvest.html) - LTRHarvest.\n* predicts tandem repeats with [Tandem Repeats Finder](https://tandem.bu.edu/trf/trf.html).\n* predicts other repeat regions with [Repeatscout](http://bix.ucsd.edu/repeatscout/) and [Repeatmasker](http://www.repeatmasker.org/RepeatMasker/).\n* predicts coding genes with [Prodigal](https://github.com/hyattpd/Prodigal).\n* annotates taxonomy and functions of RNA and protein genes using [Diamond](https://github.com/bbuchfink/diamond), [NCBI blastn](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/) and a database of 62,296 bacterial, 3,406 archaeal 11,569 viral and 139 eukaryotic genomes.\n* annotates gene functions using [RPSBlast](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/) and NCBI's Conserved Domain Database (CDD).\n* annotates genes involved in production of secondary metabolites using [Antismash](https://dl.secondarymetabolites.org/releases).\n* annotates membrane amd translocated proteins using [TMHMM and SignalP](https://services.healthtech.dtu.dk/software.php).\n* assigns genes to a built-in set of functions using [HMMER](http://hmmer.org) and HMM profiles from [MetaScan](https://github.com/gcremers/metascan), [HydDB](https://services.birc.au.dk/hyddb/) and [CANT-HYD](https://github.com/dgittins/CANT-HYD-HydrocarbonBiodegradation).\n* presents annotations in [datatables/jQuery](https://www.datatables.net/)-based intuititve, searchable, colorful HTML that can be explored in a web browser and copy/pasted into excel.\n* saves annotations as a fasta-amino-acid file, a genbank file and in [Apache Feather format](https://arrow.apache.org/docs/python/feather.html) for effective exploration, statistics and visualization with python or R.\n* enables the user to add custom HMMs and expand the set of functional genes as needed. \n\n## Usage:\n```\nmetaerg --contig_file contig-file.fna --database_dir /path/to/metaerg-databases/\n```\nTo annotate a set of genomes in a given dir (each file should contain the contigs of a single genome):\n```\nmetaerg --contig_file dir-with-contig-files --database_dir /path/to/metaerg-databases/ --file_extension .fa\n```\nMetaerg needs ~40 min to annotate a 4 Mb genome on a desktop computer. There's a few more optional arguments, for a\ncomplete list, run:\n```\nmetaerg -h\n```\n## Using the Docker Image\nMetaerg depends on many helper programs and may require some time and troubleshooting to install. To avoid these issues,\nuse the [docker image](https://hub.docker.com/r/kinestetika/metaerg).\n\n## Installation\n\nTo install metaerg, its 19 helper programs (diamond, prodigal, etc.) and databases run the commands below. FIRST, you \nneed to manually download signalp and tmhmm programs from [here](https://services.healthtech.dtu.dk/software.php). Then:\n```\npython -m virtualenv metaerg-env\nsource metaerg-env/bin/activate\npip install --upgrade metaerg\nmetaerg --install_deps /path/to/bin_dir --database_dir /path/to/database_dir --path_to_signalp path/to/signalp.tar.gz \\\n  --path_to_tmhmm path/to/tmhmm.tar.gz\nsource /path/to/bin_dir/profile\nmetaerg --download_database --database_dir /path/to/metaerg-databases/\n```\n\nIMPORTANT: Before running metaerg you need to run the following, to prepend the helper programs to your path:\n\n```commandline\nsource /path/to/bin_dir/profile\n```\n\nThe database was created from the following sources:\n* [gtdbtk](https://ecogenomics.github.io/GTDBTk/index.html) is used for its taxonomy\n* NCBI annotations of >40K representative archael and bacterial genomes present in gtdb are sourced directly from the ncbi ftp server. \n* NCBI (refseq) annotations of viral genes are obtained from [viral refseq](https://support.nlm.nih.gov/knowledgebase/article/KA-03474/en-us).\n* For Eukaryotes, for each taxon within Amoebozoa, Ancyromonadida, Apusozoa, Breviatea, CRuMs, Cryptophyceae, Discoba, Glaucocystophyceae, Haptista, Hemimastigophora, Malawimonadida, Metamonada, Rhodelphea, Rhodophyta, Sar, Aphelida, Choanoflagellata, Filasterea, Fungi, Ichthyosporea, Rotosphaeridagenomes, one genome is added to the database using [ncbi-datasets](https://www.ncbi.nlm.nih.gov/datasets/). \n* [RFAM](https://rfam.xfam.org/) and [CDD](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtml) databases are also used.\n* Specialized function databases - [Cant-Hyd](https://github.com/dgittins/CANT-HYD-HydrocarbonBiodegradation/blob/main/HMMs/concatenated%20HMMs/CANT-HYD.hmm) and [MetaScan](https://zenodo.org/record/6365663).\n\nIf you for some reason need to build this database yourself (this is usually not needed as the metaerg database can be \ndownloaded as shown above):\n\n```\nmetaerg --create_database --database_dir /path/to/metaerg-databases/ --gtdbtk_dir /path/to/gtdbtk-database/ [--tasks [PVEBRC]]\n```\n\nwith tasks:\n* P - build prokaryotes\n* V - build viruses\n* E - build eukaryotes\n* B - build PVE blast databases\n* R - build RFAM\n* C - build CDD\n* S - build specialized functional databases\n* A - build antismash database\n\n## Using the .feather output\n[Apache Feather format](https://arrow.apache.org/docs/python/feather.html) is a binary file format for tables. You can for example load these data as a pandas dataframe. In **R**, use the [arrow](https://arrow.apache.org/docs/r/) package. \nEach table row contains a single gene or feature, defines by the following columns:\n\n```\nid                  the feature's unique identifier\ngenome              the identifier of the genome the feature belongs to\ncontig              the identifier of the contig the feature belongs to\nstart               the start position of the feature (inclusive)\nend                 the start position of the feature (exclusive)\nstrand              the strand (0 or 1 for + or - respectively)\ntype                the type of feature (for example CDS, rRNA, tRNA, ncRNA, retrotransposon)\ninference           the program used to infer the feature (for example prodigal for CDS)\nsubsystems          the subsystems (functional genes) the feauture is part of (for example \"[ATP synthase|ATP synthase, subunit F0 B]\")  \ndescr               a succint description of the annotated function\ntaxon               the taxon of the top blast hit\nnotes               any other info (rarely used)\nseq                 the sequence of the feature (AA for CDS, otherwise NT)\nantismash           the function assigned by antismash, if any\nsignal_peptide      the type of signal peptide found, if any.\ntmh                 the number of transmembrane helixes found\ntmh_topology        how the protein is oriented in the membrane, if tmh were found \nblast               the top ten blast hits\ncdd                 the top ten cdd hits\nhmm                 the top ten hits to the functional gene hmm database \n```\n\nYou can for example use python and pandas to inspect the distribution of subsystems, such as denitrification, hydrogen oxidation or the Calvin Cycle across a large set of MAGs, as follows:\n\n```commandline\nfrom pathlib import Path\nimport pandas as pd\n\nfrom metaerg import functional_gene_configuration\nfrom metaerg.main import load_contigs, compute_genome_properties\n\nfunctional_gene_configuration.init_functional_gene_config()\n\ndata_dir = Path('/path/to/my/data')\nfeather_dir = data_dir / 'all_genes.feather'\ncontig_dir =  data_dir / 'contig_fna_files_one_per_genome'\n\ngenome_properties = {}\nfor f in sorted(feather_dir.glob('*')):\n    genome_name = f.name\n    contig_dict = load_contigs(genome_name, contig_dir / genome_name, delimiter='xxxx')\n    feature_data = pd.read_feather(f)\n    genome_properties[genome_name] = compute_genome_properties(contig_dict, feature_data)\n    \nall_genome_feature_data = None\nfor k, v in genome_properties.items():\n    subsystems_df = v['subsystems'].rename(columns={'genes': k})\n    try:\n        subsystems_df.drop('', level=0, axis=0, inplace=True)\n        subsystems_df.drop('secondary-metabolites', level=0, axis=0, inplace=True)\n    except Exception:\n        pass\n    if all_genome_feature_data is None:\n        all_genome_feature_data = subsystems_df\n    else:\n        all_genome_feature_data[k] = subsystems_df[k]\n    all_genome_feature_data = all_genome_feature_data.copy()\ndel all_genome_feature_data['profiles']\n#print(all_genome_feature_data.columns)\n    \nall_genome_feature_data.to_excel(data_dir / 'functional_gene_heatmap.xls')\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kinestetika/MetaErg",
    "keywords": "repeat-regions genes functions taxonomy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaerg",
    "package_url": "https://pypi.org/project/metaerg/",
    "platform": null,
    "project_url": "https://pypi.org/project/metaerg/",
    "project_urls": {
      "Homepage": "https://github.com/kinestetika/MetaErg",
      "Source": "https://github.com/kinestetika/MetaErg"
    },
    "release_url": "https://pypi.org/project/metaerg/2.3.4/",
    "requires_dist": [
      "biopython",
      "ncbi-datasets-pylib",
      "pandas",
      "httpx",
      "virtualenv",
      "h5py",
      "pyarrow",
      "openpyxl",
      "tqdm",
      "setuptools ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "Annotation of genomes and contigs",
    "version": "2.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17432267,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "080de85485ff4a36eb74a7b9349b5c824265dc6428bcfe0e014330ce88fdd6d2",
        "md5": "efdef43d1f5b98ef9409d9a590a0cc04",
        "sha256": "1254df195139407dff97428c03c150ec38815db7d7b9cc98d973a0f6a5e7ada1"
      },
      "downloads": -1,
      "filename": "metaerg-2.3.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efdef43d1f5b98ef9409d9a590a0cc04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 81804,
      "upload_time": "2022-12-19T16:10:44",
      "upload_time_iso_8601": "2022-12-19T16:10:44.442138Z",
      "url": "https://files.pythonhosted.org/packages/08/0d/e85485ff4a36eb74a7b9349b5c824265dc6428bcfe0e014330ce88fdd6d2/metaerg-2.3.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1ed146222aafe12283fec1a53e2f2e8770cfd22b99ac9dc55f39c0963aa4bad",
        "md5": "a69b3b76921b75a9ad1394f79501353d",
        "sha256": "e65bb685e4c520eb2b4c69971dcaf2d134e1b5f32e50fa38050aae1f6c76be8d"
      },
      "downloads": -1,
      "filename": "metaerg-2.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a69b3b76921b75a9ad1394f79501353d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 71525,
      "upload_time": "2022-12-19T16:10:45",
      "upload_time_iso_8601": "2022-12-19T16:10:45.729338Z",
      "url": "https://files.pythonhosted.org/packages/b1/ed/146222aafe12283fec1a53e2f2e8770cfd22b99ac9dc55f39c0963aa4bad/metaerg-2.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}