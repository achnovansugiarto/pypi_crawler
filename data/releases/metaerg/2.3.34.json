{
  "info": {
    "author": "Marc Strous",
    "author_email": "mstrous@ucalgary.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "## metaerg.py, version 2.3.34\n\nMetaerg.py annotates genomes or sets of mags/bins from microbial ecosystems (bacteria, archaea, viruses). Input data \nconsists of nucleotide fasta files, one per genome or mag, each with one or more contigs. Output files with annotations \nare in common formats such as .gff, .gbk, .fasta and .html with predicted genes, their functions and taxonomic \nclassifications.\n\nYou can interact with a sample visualization [here](https://htmlpreview.github.io/?https://github.com/kinestetika/MetaErg/blob/master/visualization/index.html) and [here](https://htmlpreview.github.io/?https://raw.githubusercontent.com/kinestetika/MetaErg/master/visualization/index_of_features.html). These visualizations show the annotation of a cyanobacterial genome, Candidatus Phormidium alkaliphilum.\nUnfortunately the interacive search box does not work with the github html visualization, so you need to download the html \\\nfiles to your computer (i.e. using \"git clone ...\"), to try out the interactive part.\n\nMetaerg was originally developed in perl. It was relatively challenging to install and comes with complex database \ndependencies. This new python version 2.3 overcomes some of those issues. Also, the annotation pipeline has further \nevolved and has become more refined.\n\nBy building its blast database off gtdbtk and transferring functional annotations from the NCBI, metaerg.py\nuses a controlled vocabulary for taxonomy and a relatively clean vocabulary for functions. This makes annotations much\nmore concise than the original version of metaerg and many other annotation tools. In addition, metaerg uses NCBI's\nconserved domain database and RPSBlast to assign genes to subsystems for effective data exploration. Subsystems are a \nwork in progress, and can be expanded and customized as needed.\n\nThe Metaerg 2.3 pipeline ...\n* predicts CRISPR regions using [Minced](https://github.com/ctSkennerton/minced).\n* predicts tRNAs using [Aragorn](https://www.ansikte.se/ARAGORN/Downloads/).\n* predicts RNA genes and other non-coding features using [Infernal](http://eddylab.org/infernal/) - cmscan and RFAM.\n* predicts retrotransposons with [LTR Harvest](http://genometools.org/tools/gt_ltrharvest.html) - LTRHarvest.\n* predicts tandem repeats with [Tandem Repeats Finder](https://tandem.bu.edu/trf/trf.html).\n* predicts other repeat regions with [Repeatscout](http://bix.ucsd.edu/repeatscout/) and [Repeatmasker](http://www.repeatmasker.org/RepeatMasker/).\n* predicts coding genes with [Prodigal](https://github.com/hyattpd/Prodigal).\n* annotates taxonomy and functions of RNA and protein genes using [Diamond](https://github.com/bbuchfink/diamond), [NCBI blastn](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/) and a database of 62,296 bacterial, 3,406 archaeal 11,569 viral and 139 eukaryotic genomes.\n* annotates gene functions using [RPSBlast](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/) and NCBI's Conserved Domain Database (CDD).\n* annotates genes involved in production of secondary metabolites using [Antismash](https://dl.secondarymetabolites.org/releases).\n* annotates membrane amd translocated proteins using [TMHMM and SignalP](https://services.healthtech.dtu.dk/software.php).\n* assigns genes to a [built-in set of functions](https://github.com/kinestetika/MetaErg/blob/master/src/metaerg/run_and_read/data/functional_gene_data) using [HMMER](http://hmmer.org) and commmunity contributed HMM profiles (see below).\n* estimates doubling times of a genome's host based on [codon usage bias](https://www.pnas.org/doi/epdf/10.1073/pnas.2016810118)\n* presents annotations in [datatables/jQuery](https://www.datatables.net/)-based intuititve, searchable, colorful HTML that can be explored in a web browser and copy/pasted into excel.\n* saves annotations as a fasta-amino-acid file, a genbank file, as a sqlite database and in [Apache Feather format](https://arrow.apache.org/docs/python/feather.html) for effective exploration, statistics and visualization with python or R.\n* saves an overview of all annotated genomes' properties and functions as an excel file. \n* enables the user to add custom HMMs and expand the set of functional genes as needed.\n\nWhen using metaerg, please cite [Xiaoli Dong and Marc Strous (2019) Frontiers in Genetics](https://www.frontiersin.org/articles/10.3389/fgene.2019.00999/full)\n\n## Usage:\n```\n>metaerg --contig_file contig-file.fna --database_dir /path/to/metaerg-databases/\n```\nTo annotate a set of genomes in a given dir (each file should contain the contigs of a single genome):\n```\n>metaerg --contig_file dir-with-contig-files --database_dir /path/to/metaerg-databases/ \\\n--file_extension .fa\n```\nMetaerg needs ~40 min to annotate a 4 Mb genome on a desktop computer.\n\nYOu can use the following arguments when running metaerg:\n```text\n--contig_file           A nucleotide fasta files with contigs to be annotated OR a dir containing\n                        nucleotide fasta files.\n--output_dir            The path where the results will be saved. Default: the dir that contains the\n                        contig file(s)                      \n--database_dir          The path to the metaerg database.\n--file_extension        If a dir was provided to --contig_file, the file extension of the \n                        nucleotide fasta files. Default: .fna\n--rename_contigs        Assemblers may create very long names for contigs, which is suboptimal for\n                        presentation of results. This argument will make metaerg rename the \n                        contigs more concisely.\n--rename_genomes        Binners may create very long names for bins/MAGs, which is suboptimal for\n                        presentation of results. This argument will make metaerg rename the \n                        bins/MAGs more concisely. When using this option, contigs will also be\n                        renamed.\n--delimiter             Metaerg will create \"locus tags\" (unique IDs) for genes with according to\n                        the following scheme: \"[MAG file name].[CONTIG name].[Gene number]\". \n                        By default, '.' is used as the delimiter separating the three parts of the\n                        ID, as shown in the example. If you want to use a different character to\n                        separate the parts, use this argument. If your custom character is \n                        detected in filenames or contig names, and you are not renaming contigs \n                        or MAGs, metaerg will terminate with an error message.\n--prefix                When renaming genomes, by default genomes will be named \"gXXXX\", where 'g'\n                        is the prefix and XXXX is a number. If you would like a different prefix, \n                        use this argument.\n--min_contig_length     Only annotate contigs that are longer than the specified length. \n                        Default: 0.\n--cpus                  Number of threads used for annotation. Default: threads available \n                        on the system / 2.\n--contig_mode           Annotate contigs individually instead of assuming they are part of a \n                        genome, MAG or bin. When using this option, metaerg will not run \n                        repeatscout and will run prodigal in metagenome mode. Use the option \n                        --translation_table below to override using metagenome mode.\n--force                 Overwrite previous results. By default, results of previous steps will be\n                        kept. You need to specify which steps will be forced (see --skip for a list\n                        of steps Use --force all to overwrite all previous results.\n--update_annotations    Do not rerun any helper programs (keep previous results) but redo all the\n                        data processing. Use this option for example after you updated metaerg.\n--skip                  Use this argument to skip one or more annotation steps. Use the following\n                        names for the steps, with names to be skipped separated by a comma (,):\n                        \n                        antismash           Annotate genes involved in production of secondary \n                                            metabolites and other aspects of the \"interactome\".\n                        aragorn             Call transfer RNAs.\n                        cdd                 Annotate gene functions according to NCBI's conserved\n                                            domain database.\n                        cmscan              Call RNA genes (such as rRNA genes).\n                        diamond_and_blastn  Annotate gene functions and classify genes \n                                            taxonomically based on homology to genes of other\n                                            organisms. \n                        hmm                 Annotate gene functions according to metaergs built-in \n                                            scheme.\n                        ltr_harvest         Call retrotransposons.\n                        minced              Call CRSIPR repeats.\n                        prodigal            Call open reading frames (genes encoding proteins). If\n                                            you skip this step, no proteins will be annotated.\n                        signalp             Annotate cellular location of proteins via signal\n                                            peptides.\n                        repeat_masker       Call any repeat sequences.\n                        tmhmm               Annotate transmembrane helixes (membrane proteins and\n                                            anchors).\n                        trf                 Call tandem repeats.\n                          \n--translation_table     Translation table(s) to be used when calling open reading frames with \n                        prodigal. Default: 11,25. If the mean ORF length is less than 200 amino-\n                        acids, metaerg will rerun prodigal with the next translation table in the\n                        list.\n--download_database     Use this argument to download and install the prebuilt metaerg database.\n                        CAUTION: The metaerg databases are big, requiring approximately 165 Gb of \n                        disk space.\n--create_database       Use this argument to build the metaerg database from scratch. The metaerg\n                        database consists of several components. By default, this argument will\n                        build all. If you wish to build specific database components, use one or\n                        more of the following letters:\n                        \n                        P - build prokaryotes\n                        V - build viruses\n                        E - build eukaryotes\n                        B - format all (PVE) blast databases\n                        R - build RFAM\n                        C - build CDD\n                        S - build/update community contributed HMM databases\n                        A - build antismash database\n\n--gtdbtk_dir            Use this argument with --create_database to point metaerg to the gtdbtk\n                        database. It needs this to build its prokaryote blast database.\n--install_deps          Use this argument to install all helper programs on your system. You need\n                        to follow this argument with an installation dir, where you want to have\n                        the programs installed.\n--path_to_signalp       Use with --install_deps to point metaerg to the location of the signalp\n                        installation tarball (currently signalp-6.0g.fast.tar.gz)\n--path_to_tmhmm         Use with --install_deps to point metaerg to the location of the tmhmm\n                        installation tarball (currently tmhmm-2.0c.Linux.tar.gz)\n                       \n```\n\n## Using the Docker Image\nMetaerg depends on many helper programs and may require some time and troubleshooting to install. To avoid these issues,\nuse the [docker image](https://hub.docker.com/r/kinestetika/metaerg). Alternatively, use singularity or apptainer to run \nthe docker image on a HPC, as explained by [jkzorz](https://github.com/jkzorz/Metagenomes_Illumina/blob/main/annotation.md):\n\n```commandline\n>singularity pull docker://kinestetika/metaerg\n>singularity run ~/metaerg_latest.sif\n```\n\nOr:\n```commandline\n>apptainer build metaerg.sif docker://kinestetika/metaerg:latest\n```\n\n## Installation\n\nTo install metaerg, its 19 helper programs (diamond, prodigal, etc.) and databases run the commands below. FIRST, you \nneed to manually download signalp and tmhmm programs from [here](https://services.healthtech.dtu.dk/software.php). Then:\n```commandline\n>python -m virtualenv metaerg-env\n>source metaerg-env/bin/activate\n>pip install --upgrade metaerg\n>metaerg --install_deps /path/to/bin_dir --database_dir /path/to/database_dir --path_to_signalp \\\n    path/to/signalp.tar.gz --path_to_tmhmm path/to/tmhmm.tar.gz\n>source /path/to/bin_dir/profile\n>metaerg --download_database --database_dir /path/to/metaerg-databases/\n```\n\nIf you install metaerg's helper programs this way, before running metaerg you need to run the following, to prepend the helper programs to your path:\n\n```commandline\n>source /path/to/bin_dir/profile\n```\n\n## Database\nThe database was created from the following sources:\n* [gtdbtk](https://ecogenomics.github.io/GTDBTk/index.html) is used for its taxonomy\n* NCBI annotations of >40K representative archael and bacterial genomes present in gtdb are sourced directly from the ncbi ftp server. \n* NCBI (refseq) annotations of viral genes are obtained from [viral refseq](https://support.nlm.nih.gov/knowledgebase/article/KA-03474/en-us).\n* For Eukaryotes, for each taxon within Amoebozoa, Ancyromonadida, Apusozoa, Breviatea, CRuMs, Cryptophyceae, Discoba, Glaucocystophyceae, Haptista, Hemimastigophora, Malawimonadida, Metamonada, Rhodelphea, Rhodophyta, Sar, Aphelida, Choanoflagellata, Filasterea, Fungi, Ichthyosporea, Rotosphaeridagenomes, one genome is added to the database using [ncbi-datasets](https://www.ncbi.nlm.nih.gov/datasets/). \n* [RFAM](https://rfam.xfam.org/) and [CDD](https://www.ncbi.nlm.nih.gov/Structure/cdd/cdd.shtml) databases are also used.\n* Specialized function databases - [Cant-Hyd](https://github.com/dgittins/CANT-HYD-HydrocarbonBiodegradation/blob/main/HMMs/concatenated%20HMMs/CANT-HYD.hmm) and [MetaScan](https://zenodo.org/record/6365663).\n\nCommunity contributed HMM profiles are sourced from:\n* [HydDB](https://services.birc.au.dk/hyddb/) (Hydrogenase Families): Pleas cite [this](https://www.nature.com/articles/srep34212) paper.\n* [CANT-HYD](https://github.com/dgittins/CANT-HYD-HydrocarbonBiodegradation) (Genes involved in hydrocarbon degradation): Pleas cite [this](https://www.frontiersin.org/articles/10.3389/fmicb.2021.764058/full) paper.\n* [MetaScan](https://github.com/gcremers/metascan) (Various catabolisms): Pleas cite [this](https://www.frontiersin.org/articles/10.3389/fbinf.2022.861505/full?field=&journalName=Frontiers_in_Bioinformatics&id=861505) paper.\n* [CRISPR-CAS genes](https://www.nature.com/articles/nature21059): Pleas cite [this](https://www.nature.com/articles/nature21059) paper.\n* [Heme Copper Oxidase Families](https://github.com/ranjani-m/HCO): Pleas cite [this](https://www.biorxiv.org/content/10.1101/2021.10.15.464467v2.abstract) preprint.\n* [Cytochrome bd oxygen reductases](https://github.com/ranjani-m/cytbd-superfamily): Pleas cite [this](https://www.nature.com/articles/s41396-021-01019-4) paper.\n\nIf you for some reason need to build the database yourself (this is usually not needed as the metaerg database can be \ndownloaded as shown above):\n\n```commandline\n>metaerg --create_database --database_dir /path/to/metaerg/db --gtdbtk_dir /path/to/gtdbtkdir\n```\n\n## Accessing the .feather and .sqlite files\n[Apache Feather format](https://arrow.apache.org/docs/python/feather.html) is a binary file format for tables. Sqlite is a database format. You can for example load these data as a pandas dataframe. In **R**, use the [arrow](https://arrow.apache.org/docs/r/) package. \nEach table/database row contains a single gene or feature, defined by the following columns:\n\n```\nid                  the feature's unique identifier\ngenome              the identifier of the genome the feature belongs to\ncontig              the identifier of the contig the feature belongs to\nstart               the start position of the feature (inclusive)\nend                 the start position of the feature (exclusive)\nstrand              the strand (0 or 1 for + or - respectively)\ntype                the type of feature (for example CDS, rRNA, tRNA, ncRNA, retrotransposon)\ninference           the program used to infer the feature (for example prodigal for CDS)\nsubsystems          the subsystems (functional genes) the feauture is part of \n                    (for example \"[ATP synthase|ATP synthase, subunit F0 B]\")  \ndescr               a succint description of the annotated function\ntaxon               the taxon of the top blast hit\nnotes               any other info (rarely used)\nseq                 the sequence of the feature (AA for CDS, otherwise NT)\nantismash           the function assigned by antismash, if any\nsignal_peptide      the type of signal peptide found, if any.\ntmh                 the number of transmembrane helixes found\ntmh_topology        how the protein is oriented in the membrane, if tmh were found \nblast               the top ten blast hits\ncdd                 the top ten cdd hits\nhmm                 the top ten hits to the functional gene hmm database \n```\n\nYou can for example use python and pandas to inspect annotations:\n\n``` python\nfrom pathlib import Path\nimport pandas as pd\n\ndata_dir = Path('/path/to/my/data')\nfeather_file = data_dir / 'my-genome.annotations.feather'\ncontig_file =  data_dir / 'my-genome.fna'\n\ncontig_dict = load_contigs('my-genome', contig_file, delimiter='xxxx')\nfeature_data = pd.read_feather(feather_file)\nfeature_data.set_index('id', inplace=True)\n\nfor f in feature_data.itertuples():\n    for k, v in f._asdict().items():\n        print(f'{k:20}:{v}')\n    break  # comment out to iterate through all the genes...\n```\n\nUsing the .sqlite database is even easier:\n\n``` python\nfrom pathlib import Path\nfrom metaerg.datatypes import sqlite\n\ndata_dir = Path('/path/to/my/data')\nsqlite_file = data_dir / 'my-genome.annotations.sqlite'\n\ndb_connection = sqlite.connect_to_db(sqlite_file)\nfor feature in sqlite.read_all_features(db_connection): \n    print(feature)\n    break  # comment out to iterate through all the genes...\n```\n\n## How Metaerg's functional gene calling works\nMetaerg contains a [data file](https://github.com/kinestetika/MetaErg/blob/master/src/metaerg/run_and_read/data/functional_gene_data) that defines metabolic modules, each consisting of multiple genes. These\ngenes are identified using NCBI's Conserved Domain Database (cdd) and a custom set of Hidden Markov Models contributed \nby the community/science literature. Here's what an example module looks like in the data file:\n\n```text\n>Respiration, Hydrogenases Ni-Fe\nCOG3259|TIGR03295|NF033181|COG4042 NiFe hydrogenase catch-all\nWP_015407385 NiFe hydrogenase group Ia\nWP_012675774 NiFe hydrogenase group Ib\nWP_011688559 NiFe hydrogenase group Ic\nWP_023457248 NiFe hydrogenase group Id\nWP_008030254 NiFe hydrogenase group Ie\nWP_015898101 NiFe hydrogenase group If\nWP_011822511 NiFe hydrogenase group Ig\nWP_014267363 NiFe hydrogenase group Ih\nWP_022740096 NiFe hydrogenase group Ii\nWP_010878877 NiFe hydrogenase group Ij\nWP_012036281 NiFe hydrogenase group Ik\nWP_011603008 NiFe hydrogenase group IIa\nWP_011714112 NiFe hydrogenase group IIb\nWP_011383527.1 NiFe hydrogenase group IIc\nWP_010880487 NiFe hydrogenase group IId\nWP_012020882.1 NiFe hydrogenase group IIe\nWP_022846160 NiFe hydrogenase group IIIa\nWP_011719855 NiFe hydrogenase group IIIb\nWP_013637988 NiFe hydrogenase group IIIc\nWP_011686721 NiFe hydrogenase group IIId\nWP_022739022 NiFe hydrogenase group IVa\nWP_011388069 NiFe hydrogenase group IVb\nWP_026783288 NiFe hydrogenase group IVc\nWP_014122750 NiFe hydrogenase group IVd\nWP_022739883 NiFe hydrogenase group IVe\nWP_018133527 NiFe hydrogenase group IVf\nWP_013129492 NiFe hydrogenase group IVg\nWP_011018833 NiFe hydrogenase group IVh\nWP_004029221 NiFe hydrogenase group IVi\n```\n\nA metabolic module starts with a greater-than (>) sign followed by the name of the module. Each line after lists one \ngene. The gene is defined by a one or more cdd or custom-hmm identifiers separated by or (|). After the identifiers \nfollows a space and finally the name of the gene (which can contain spaces). The example shows the Ni-Fe hydrogenase\nmodule. This module contains \"catch-all\" hydrogenase domains from the cdd database (as the first gene on the first line)\nas well as custom hmm's targeting specific subtypes of Ni-Fe hydrogenase. These hmm's were created by the [Greening Lab](https://www.nature.com/articles/srep34212).\n\nFor cdd domains, metaerg will identify a protein as the gene when one of the cdd domains is among the top 5 cdd hits.\nFor custom hmm's, metaerg will identify a protein as the gene if the hmm profile is the top hit and al least 70% of the \nprofile hmm aligns to the gene. If an hmm profile defines a trusted cutoff score, metaerg will use that score as the\ncutoff.\n\nThe advantage of using cdd compared to custom hmm databases is that cdd contains profiles for most known genes. So if,\nfor example, a protein resembles a hydrogenase, such as subunit nuoD of the respiratory complex I, cdd has\nno difficulty identifying nuoD as nuoD. However, the custom hmm database does not contain a nuoD profile, so nuoD genes,\npresent in many bacterial genomes, will be erroneously identified as a NiFe hydrogenases if you only use custom profiles.\nThis problem cannot be overcome by using a fixed e-value or score cutoff, as each hmm profile produces a unique \nrange of evalues and scores. In theory, this problem could be overcome by determining a trusted cutoff score for each\nprofile. However, that is a lot of work and not commonly done when scientists create hmm databases.\n\nThat being said, cdd is not good enough by itself, because it misses out on many important microbiome functions and \\\ngenes. Some genes are completely absent, and some are poorly defined. Expert input is needed for correct identification\nof these genes. That is why we need custom hmms.\n\nMetaerg's solution to this problem is to combine cdd with custom hmms. In the example, if a gene is not captured by the\ncatch-all cdd hydrogenase modules, it is likely not a NiFe hydrogenase. If it is, the custom hmm's will show the \nsubtype of the NiFe hydrogenase.\n\n## How to add your own custom functional gene database and HMMs\n\n1. Locate your metaerg database dir. Inside the metaerg database dir, is a dir \"hmm\". \n2. Within \"hmm\", create a new dir named \"user_config\", if it does not already exist.\n3. Inside \"user_config\", you can create one or more files with the extension \".config.txt\".\n4. These files should be formatted like in the example above.\n5. Each module should start with >.\n6. Each gene starts with one or more cdd or custom hmm names, followed by a space and the gene name/description. \n7. To query the cdd database for relevant cdd names, you use grep with the file \"/path/to/metaerg/database/cdd/cddid.tbl.\"\n8. Within \"hmm\", create a new dir named \"user_hmm\", if it does not already exist.\n9. Add your custom hmm files to this dir.\n10. Update the metaerg database using the following command:\n\n```commandline\n>metaerg --create_database S --database_dir /path/to/metaerg/db \n```\n\n11. Only those hmm profiles listed in your config file will actually be built into to the metaerg database\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kinestetika/MetaErg",
    "keywords": "repeat-regions genes functions taxonomy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaerg",
    "package_url": "https://pypi.org/project/metaerg/",
    "platform": null,
    "project_url": "https://pypi.org/project/metaerg/",
    "project_urls": {
      "Homepage": "https://github.com/kinestetika/MetaErg",
      "Source": "https://github.com/kinestetika/MetaErg"
    },
    "release_url": "https://pypi.org/project/metaerg/2.3.34/",
    "requires_dist": [
      "biopython",
      "ncbi-datasets-pylib",
      "pandas",
      "httpx",
      "virtualenv",
      "h5py",
      "pyarrow",
      "openpyxl",
      "tqdm",
      "setuptools ; extra == 'dev'",
      "build ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "Annotation of genomes and contigs",
    "version": "2.3.34",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17432267,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "966d8d5c79c46cc3ffefa3d94bf263f4c1caaae6462bcb7812de1d59fa17f224",
        "md5": "1bc7c4d87a6b5a2cb5ad83e203f9ceec",
        "sha256": "520b1f8d6796d0557e90f3f1fbcd5c0d58eef78748c5b8327305c63597207c6b"
      },
      "downloads": -1,
      "filename": "metaerg-2.3.34-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1bc7c4d87a6b5a2cb5ad83e203f9ceec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 97129,
      "upload_time": "2023-03-13T16:46:10",
      "upload_time_iso_8601": "2023-03-13T16:46:10.039638Z",
      "url": "https://files.pythonhosted.org/packages/96/6d/8d5c79c46cc3ffefa3d94bf263f4c1caaae6462bcb7812de1d59fa17f224/metaerg-2.3.34-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "877cac31a297f4fa4e9c78afe2f7732b1d84a829b9b85f7e7a42e367a2b64857",
        "md5": "816bc0ff5c10918c59e19b5742f9e441",
        "sha256": "8dff372ccf87627c7d445226bc72434186d5f6d1b3d6c651bf27b3555e6dd073"
      },
      "downloads": -1,
      "filename": "metaerg-2.3.34.tar.gz",
      "has_sig": false,
      "md5_digest": "816bc0ff5c10918c59e19b5742f9e441",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 90737,
      "upload_time": "2023-03-13T16:46:12",
      "upload_time_iso_8601": "2023-03-13T16:46:12.118981Z",
      "url": "https://files.pythonhosted.org/packages/87/7c/ac31a297f4fa4e9c78afe2f7732b1d84a829b9b85f7e7a42e367a2b64857/metaerg-2.3.34.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}