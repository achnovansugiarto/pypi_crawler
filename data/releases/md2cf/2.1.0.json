{
  "info": {
    "author": "Jack Gaino",
    "author_email": "md2cf@jackgaino.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# md2cf\n\n`md2cf` is a tool and library that allows you to convert Markdown documents to Confluence Storage format and upload them to a Confluence instance.\n\n## Features\n\n- **Convert Markdown documents:** `md2cf` includes a library that implements a [Mistune](https://github.com/lepture/mistune) renderer, which outputs Confluence Storage Format.\n- **Talk to the Confluence API:** `md2cf` also features an embedded micro-implementation of the [Confluence Server REST API](https://developer.atlassian.com/server/confluence/confluence-server-rest-api/) with basic support for creating and updating pages and attachments.\n- **Automate the upload process:** You can use `md2cf`'s full-featured command line utility to automate the upload process for you.\n\n\n## Installation\n\n```bash\n# Install md2cf via pip\npip install md2cf\n\n# If you only need to use md2cf for uploading documents to Confluence,\n# it's recommended to use pipx:\npipx install md2cf\n```\n\n## Getting started\n\nTo see all available options and parameters, run `md2cf --help`.\n\nTo upload a document, you need to provide at least the following five parameters:\n\n- The **URL** of your Confluence instance, including the path to the REST API (e.g., `http://confluence.example.com/rest/api`)\n- Either:\n    - The **username** and **password** to log in to the instance\n    - A **personal access token**\n- The **space** in which to publish the page\n- The **files or directories** to be uploaded. If none are specified, the contents will be read from standard input.\n\nExample basic usage:\n\n```bash\nmd2cf --host 'https://confluence.example.com/rest/api' --username foo --password bar --space TEST document.md\n```\n\nOr, if using a token:\n\n```bash\nmd2cf --host 'https://confluence.example.com/rest/api' --token '2104v3ryl0ngt0k3n720' --space TEST document.md\n```\n\n> :warning: Avoid entering your password (or token) as a command line parameter, as this is [generally a bad practice](https://unix.stackexchange.com/q/78734). Instead, when running the script interactively, omit the `--password` parameter and securely enter the password when prompted.\n\n> :warning: Note that tokens function differently between [Confluence Cloud](https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/) and [self-hosted instances](https://confluence.atlassian.com/enterprise/using-personal-access-tokens-1026032365.html). When using Confluence Cloud, you should use your token **as your password** with the `--username` and `--password` parameters. With self-hosted instances, use the `--token` parameter instead.\n\nYou can also supply the hostname, username, password, token, and space as **environment variables**:\n\n- `CONFLUENCE_HOST`\n- `CONFLUENCE_USERNAME`\n- `CONFLUENCE_PASSWORD`\n- `CONFLUENCE_TOKEN`\n- `CONFLUENCE_SPACE`\n\nIf you are using self-signed certificates or want to **ignore SSL errors**, use the `--insecure` option.\n\nYou can **upload multiple files** or entire folders. If you specify a folder, `md2cf` will traverse it recursively and upload all files that end in `.md`. For more information, see [Uploading Folders](#uploading-folders).\n\nIf you would like to preview `md2cf`'s actions without modifying Confluence, use the `--dry-run` option. This will print a list of page data without making any changes.\n\n## Page information arguments\n\n### Page title\n\nThe title of the page can be sourced from multiple places, in the following order of priority:\n* The `--title` command-line parameter\n* A `title` entry in the document's front matter, which is a YAML block delimited by `---` lines at the top of the file:\n\n  ```yaml\n  ---\n  title: This is a title\n  ---\n  ```\n* The first top-level header found in the document (i.e., the first `#` header)\n* The filename, if there are no top-level headers.\n\nNote that if you are reading from standard input, you must either specify the title through the command line or include a title as a header or in the front matter within the content.\n\nTo avoid repeating the top level header in the body of the page, pass the `--strip-top-header` parameter to strip it from the document.\n\nWhen uploading entire folders, consider adding a prefix to each page title to prevent collisions. You can do this by using the `--prefix` parameter.\n\n### Removing extra newlines\n\nIf your document uses single newlines to break lines (for example, if it was typeset with a fixed column width), Confluence Cloud might preserve those newlines, resulting in a document that's difficult to read. To fix this, use the `--remove-text-newlines` parameter, which replaces every newline within a paragraph with a space.\n\n\n<details>\n<summary>Example</summary>\nFor example, this will turn\n\n```text\nThis is a document\nwith hardcoded newlines\nin its paragraphs.\n\nIt's not that nice\nto read.\n```\n\ninto\n\n```text\nThis is a document with hardcoded newlines in its paragraphs.\n\nIt's not that nice to read.\n```\n</details>\n\n### Adding a preface and/or postface\n\nThe `--preface-markdown`, `--preface-file`, `--postface-markdown`, and `--postface-file` commands enable you to add text at the beginning or end of each page. This is especially helpful if you're mirroring documentation to Confluence and want to notify users that it will be automatically updated.\n\nThe `--preface-markdown` and `--postface-markdown` options allow you to specify Markdown text directly in the command line. If no text is specified, a default paragraph will be used stating:\n\n> **Contents are auto-generated, do not edit.**\n\nAlternatively, the `--preface-file` and `--postface-file` options allow you to specify a path to a markdown file which will be prepended or appended to every page.\n\n> :warning: Note that preface and postface Markdown is parsed separately and added to the body after the main page has been parsed. Therefore, it will not affect behavior tied to the page contents, such as title or front matter detection.\n\n### Page labels\n\nTo add labels to your page, include a `labels` entry in your document's front matter. The front matter is a YAML block delimited by `---` lines at the top of the file. Here's an example:\n\n```yaml\n---\nlabels:\n- first label\n- second label\n---\n# Rest of the Markdown document\n```\n\nNote that by default, the labels you specify will be added to any existing labels. If you want to replace all existing labels with only the ones you specified, use the `--replace-all-labels` option.\n\n### Parent page\n\nTo upload the page under **a specific parent**, you can provide the parent's page ID using the `--parent-id` parameter, or its title using the `--parent-title` parameter.\n\nTo move a page to a **top-level page** (i.e. directly under the space's Home Page), use the `--top-level` flag.\n\n### Update message\n\nOptionally, you can provide an **update message** using the `--message` parameter to describe the change you made. If you're using the `--only-changed` option at the same time, the version update message will also include a hash of the page or attachment contents at the end.\n\n### Updating an existing page\n\nIf you upload a page with the same title twice, it will update the existing page.\n\nTo update a page using its ID, use the `--page-id` option. This allows you to modify the page's title or update a page with a title that is difficult to use as a parameter.\n\nTo avoid sending notifications to page watchers, use the `--minor-edit` option. This corresponds to the \"Notify watchers\" checkbox when editing pages manually.\n\n### Avoiding uploading content that hasn't changed\n\nTo avoid re-uploading unchanged content and receiving update emails when there are no changes, consider using the `--only-changed` option. Keep in mind that this option will include a hash of the page or attachment contents in the version update message.\n\n## Linking to other documents (relative links)\n\nBy default, support for relative links is disabled. To enable it, pass the `--enable-relative-links` flag. The behavior of relative links is similar to [GitHub relative links](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes#relative-links-and-image-paths-in-readme-files), with the exception that links starting with `/` are **not supported** and will be left unchanged.\n\n> :warning: Enabling this function requires two uploads for every page containing relative links. First, a page must be uploaded to Confluence with all internal links replaced by placeholders. Then, once the final Confluence link is known, the placeholders will be replaced with the appropriate links.\n\nBy default, relative links that point to non-existent files (or files that are not being uploaded in the current batch) will result in an error. To ignore these errors and keep the links as they are, use the `--ignore-relative-link-errors` flag.\n\n## Directory arguments\n\n### Uploading Folders Recursively\n\nTo help you mirror large documentation to Confluence, `md2cf` allows you to upload entire folders. When using this feature, `md2cf` will recursively traverse all subdirectories and upload any `.md` files it encounters.\n\nBy default, `md2cf` will respect your `.gitignore` file and skip any files or folders it defines. If you prefer to upload everything in the folder, use the `--no-gitignore` option.\n\nPlease note that Confluence can only nest pages under other pages. As a result, folders will be represented by empty pages with the same title as the folder in the final upload. You can customize this behavior using one of the three command line parameters defined in the next sections.\n\n#### Customizing folder names\n\nFolder names like `interesting-subsection` or `dir1` are not particularly nice. If you pass the `--beautify-folders` option, all spaces and hyphens in folder names will be replaced with spaces and the first letter will be capitalized, producing `Interesting subsection` and `Dir1`.\n\nAlternatively, you can create a YAML file called `.pages` with the following format in every folder you wish to rename.\nIf you pass the `--use-pages-file`, the folder will be given that title.\n\nFolder names like `interesting-subsection` or `dir1` may not be aesthetically pleasing. If you use the `--beautify-folders` option, spaces and hyphens in folder names will be replaced with spaces, and the first letter of each word will be capitalized, resulting in `Interesting Subsection` and `Dir1`.\n\nAlternatively, you can create a YAML file called `.pages` in every folder you want to rename, using the following format, and if you use the `--use-pages-file` option, the folder will be renamed using the title specified in the `.pages` file.\n\n```yaml\ntitle: \"This is a fantastic title!\"\n```\n\n#### Collapse single pages\n\nYou can collapse directories that only contain one document by passing the `--collapse-single-pages` parameter.\n\n<details>\n<summary>Example</summary>\nThis means that a folder layout like this:\n\n```text\ndocument.md\nfolder1/\n  documentA.md\n  documentB.md\nfolder2/\n  other-document.md\n```\n\nwill be uploaded to Confluence like this:\n\n```text\ndocument\nfolder1/\n  documentA\n  documentB\nother-document\n```\n</details>\n\n#### Dealing with empty folders\n\nPassing `--skip-empty` will not create pages for empty folders.\n\n<details>\n<summary>Example</summary>\n```text\ndocument.md\nfolder1/\n  folder2/\n    folder3/\n      other-document.md\nfolderA/\n  interesting-document.md\n    folderB/\n      folderC/\n        lonely-document.md\n```\n\nwill be uploaded as:\n\n```text\ndocument\nfolder3/\n  other-document\nfolderA/\n  interesting-document\n  folderC/\n    lonely-document\n```\n</details>\n\nAlternatively, you can specify `--collapse-empty` to merge empty folders together.\n\n<details>\n<summary>Example</summary>\n```text\ndocument.md\nfolder1/\n  folder2/\n    folder3/\n      other-document.md\nfolderA/\n  interesting-document.md\n    folderB/\n      folderC/\n        lonely-document.md\n```\n\nwill be uploaded as:\n\n```text\ndocument\nfolder1/folder2/folder3/\n  other-document\nfolderA/\n  interesting-document\n  folderB/folderC/\n    lonely-document\n```\n</details>\n\n## Terminal output format\n\nBy default, `md2cf` produces rich output with animated progress bars that are meant for human consumption. If the output is redirected to a file, the progress bars will not be displayed and only the final result will be written to the file. Error messages are always printed to standard error.\n\nIn addition to the default format, `md2cf` also supports two other output formats.\n\n### JSON output\n\nWhen `--output json` is passed to `md2cf`, the JSON output for each page as returned by Confluence will be printed. Note that normal progress output will not be displayed.\n\n> :warning: Please note that JSON entries will only be printed for page creation/updates. They will not be printed for attachment creation/updates and will not be printed for second-pass updates for [relative links](#linking-to-other-documents-relative-links).\n\n\n### Minimal output\n\nWhen passing the `--output minimal` option to `md2cf`, the tool will only print the final Confluence URL for each page, as in versions prior to `2.0.0`. The normal progress output will be omitted.\n\n> :warning: Note that URLs will only be printed for page creation/updates. They will not be printed for attachment creation/updates and will not be printed for second-pass updates for [relative links](#linking-to-other-documents-relative-links).\n\n\n## Library usage\n\n`md2cf` can of course be used as a Python library. It exposes two useful modules: the renderer and the API wrapper.\n\n### Renderer\n\nUse the `ConfluenceRenderer` class to generate Confluence Storage Format\noutput from a Markdown document.\n\n```python\nimport mistune\nfrom md2cf.confluence_renderer import ConfluenceRenderer\n\nmarkdown_text = \"# Page title\\n\\nInteresting *content* here!\"\n\nrenderer = ConfluenceRenderer(use_xhtml=True)\nconfluence_mistune = mistune.Markdown(renderer=renderer)\nconfluence_body = confluence_mistune(markdown_text)\n```\n\n### API\n\nmd2cf embeds a teeny-tiny implementation of the Confluence Server REST\nAPI that allows you to create, read, and update pages.\n\n```python\nfrom md2cf.api import MinimalConfluence\n\nconfluence = MinimalConfluence(host='https://example.com/rest/api', username='foo', password='bar')\n\nconfluence.create_page(space='TEST', title='Test page', body='<p>Nothing</p>', update_message='Created page')\n\npage = confluence.get_page(title='Test page', space_key='TEST')\nconfluence.update_page(page=page, body='New content', update_message='Changed page contents')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iamjackg/md2cf",
    "keywords": "markdown confluence",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "md2cf",
    "package_url": "https://pypi.org/project/md2cf/",
    "platform": null,
    "project_url": "https://pypi.org/project/md2cf/",
    "project_urls": {
      "Homepage": "https://github.com/iamjackg/md2cf"
    },
    "release_url": "https://pypi.org/project/md2cf/2.1.0/",
    "requires_dist": [
      "rich-argparse (==1.0.0)",
      "rich (==13.0.1)",
      "mistune (==0.8.4)",
      "chardet (==5.1.0)",
      "requests (==2.28.2)",
      "PyYAML (==6.0)",
      "gitignorefile (==1.1.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Convert Markdown documents to Confluence",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17272280,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12cea1b7ddc80b17d3b3237d8eafb7b38f27ce329e5205518fa963828b8521fb",
        "md5": "b0e44bf417e3e78ff71dcd7d5b936a8e",
        "sha256": "d10e845c33e1ee0506f782023247616ac04919adb9a5a263d70c4001d68ab799"
      },
      "downloads": -1,
      "filename": "md2cf-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0e44bf417e3e78ff71dcd7d5b936a8e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25116,
      "upload_time": "2023-03-13T14:34:03",
      "upload_time_iso_8601": "2023-03-13T14:34:03.507231Z",
      "url": "https://files.pythonhosted.org/packages/12/ce/a1b7ddc80b17d3b3237d8eafb7b38f27ce329e5205518fa963828b8521fb/md2cf-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38f5b2b39917025d15cb770b1246a54995215e254bcd98e0bf4963dd5691b3ab",
        "md5": "5058d928c5517b7be66a53e24a562e0f",
        "sha256": "91092ad84ba6dfbe2e43b013cd3ec39da4f13a3baed763cdb07acc28a697f469"
      },
      "downloads": -1,
      "filename": "md2cf-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5058d928c5517b7be66a53e24a562e0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26777,
      "upload_time": "2023-03-13T14:34:04",
      "upload_time_iso_8601": "2023-03-13T14:34:04.840583Z",
      "url": "https://files.pythonhosted.org/packages/38/f5/b2b39917025d15cb770b1246a54995215e254bcd98e0bf4963dd5691b3ab/md2cf-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}