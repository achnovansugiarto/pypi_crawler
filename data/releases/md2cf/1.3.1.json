{
  "info": {
    "author": "Jack Gaino",
    "author_email": "md2cf@jackgaino.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# md2cf\n\nA tool and library to convert documents written in Markdown to Confluence Storage\nformat, and optionally upload them to a Confluence Server instance.\n\n## Features\n\n  - **Convert Markdown documents.** The library implements a\n    [Mistune](https://github.com/lepture/mistune) renderer that outputs\n    Confluence Storage Format.\n  - **Basic Confluence API support.** Embedded micro-implementation of\n    the [Confluence Server REST\n    API](https://developer.atlassian.com/server/confluence/confluence-server-rest-api/)\n    with basic support for creating and updating pages.\n  - **Upload automation.** Includes a small script that can automate the\n    upload process for you.\n\n## Installation\n\n```bash\npip install md2cf\n```\n\n## Upload script\n\n```text\nusage: md2cf [-h] [-o HOST] [-u USERNAME] [-p PASSWORD] [--token TOKEN]\n             [--insecure] -s SPACE [-a PARENT_TITLE | -A PARENT_ID] [-t TITLE]\n             [-m MESSAGE] [-i PAGE_ID] [--prefix PREFIX]\n             [--preface-markdown [PREFACE_MARKDOWN] | --preface-file\n             PREFACE_FILE] [--collapse-single-pages]\n             [--beautify-folders | --use-pages-file]\n             [--collapse-empty | --skip-empty] [--dry-run] [--only-changed]\n             [file_list [file_list ...]]\n```\n\nIn order to upload a document, you'll need to supply at least the\nfollowing five parameters:\n\n  - The **hostname** of your Confluence instance, including the path to\n    the REST API (e.g. `http://confluence.example.com/rest/api`)\n  - Either\n    - The **username** and **password** to use for logging into the instance, or\n    - a **personal access token**\n  - The **space** in which to publish the page\n  - The **files or directories** to be uploaded -- or standard input if the list is\n    missing\n\nExample basic usage:\n\n```bash\nmd2cf --host 'https://confluence.example.com/rest/api' --username foo --password bar --space TEST document.md\n```\n\nOr, if using a token:\n\n```bash\nmd2cf --host 'https://confluence.example.com/rest/api' --bearer-token '2104v3ryl0ngt0k3n720' --space TEST document.md\n```\n\nNote that entering the password as a parameter on the command line is\ngenerally a bad idea. If you're running the script interactively, you\ncan omit the `--password` parameter and the script will prompt for it.\n\nFor the security conscious out there or those who plan on\nusing this as part of a pipeline, you can also supply the hostname,\nusername, password, and token as **environment variables**: `CONFLUENCE_HOST`,\n`CONFLUENCE_USERNAME`, `CONFLUENCE_PASSWORD`, and `CONFLUENCE_TOKEN`.\n\nIf you're using self-signed certificates and/or want to ignore SSL errors, add the `--insecure` option.\n\nYou can specify multiple files and/or entire folders. If you specify a folder, it will be traversed recursively and all files ending in `.md` will be uploaded. See [Uploading folders](#uploading-folders) for more information.\n\nIf you just want to get a preview of what `md2cf` would do, the `--dry-run` option will print a list of page data but leave Confluence untouched.\n\n### Page title\n\nThe **title** of the page can come from a few sources, in order of priority from highest to lowest:\n* the `--title` command line parameter\n* a `title` entry in your document's front matter, i.e. a YAML block delimited by `---` lines at the top of the file\n  ```yaml\n  ---\n  title: This is a title\n  ---\n  # Rest of the document here\n  ```\n* the first top-level header found in the document (i.e. the first `#` header)\n* the filename if there are no top-level headers.\n\nNote that if you're reading from standard input, you must either specify the title through the command line or have a title in the content as a header or in the front matter.\n\nIf you're uploading entire folders, you might want to add a prefix to each page title in order to avoid collisions. You can do this using the `--prefix` parameter.\n\n### Adding a preface\n\nThe `--preface-markdown` and `--preface-file` commands allow you to add some text at the top of each page. This is useful\nif you're mirroring documentation to Confluence and want people to know that it's going to be overwritten in an automated\nfashion.\n\nThe first option allows you to specify markdown text right on the command line, and defaults to a paragraph saying\n\n**Contents are auto-generated, do not edit.**\n\nThe second option takes a path to a markdown file and will prepend its contents to every page. Note that this is parsed separately and added to the body after the main page has been parsed, so it won't influence behaviour tied to the page contents such as title or front matter detection.\n\n### Parent page\n\nIf you want to upload the page under **a specific parent**, you can supply the parent's page ID as the `--parent-id` parameter, or its title through the `--parent-title` parameter.\n\n### Update message\n\nYou can also optionally specify an **update message** to describe the\nchange you just made by using the `--message` parameter. Note that if you're using the `--only-changed` option there will also be a hash of the page/attachment contents at the end of the version update message.\n\n### Updating an existing page\n\nUploading a page with the same title twice will update the existing one.\n\nIf you want to update a page by page ID, use the `--page-id` option. This allows you to change the page's title, or to update a page with a title that is annoying to use as a parameter.\n\n### Avoiding uploading content that hasn't changed\n\nIf you want to avoid redundant uploads (and the corresponding update emails) when your content hasn't changed, you can add the `--only-changed` option. Note that this will store a hash of the page/attachment contents at the end of the version update message.\n\n### Uploading folders\n\n`md2cf` can upload entire folders for you. This can be useful if you want to mirror some in-repo documentation to Confluence.\n\nWhen uploading entire folders, `md2cf` will recursively traverse all subdirectories and upload any `.md` file it encounters. Folders will be represented by empty pages in the final upload, since Confluence can only nest pages under other pages. You can modify this behaviour through three command line parameters.\n\n#### Customizing folder names\n\nFolder names like `interesting-subsection` or `dir1` are not particularly nice. If you pass the `--beautify-folders` option,\nall spaces and hyphens in folder names will be replaced with spaces and the first letter will be capitalized, producing\n`Interesting subsection` and `Dir1`.\n\nAlternatively, you can create a YAML file called `.pages` with the following format in every folder you wish to rename.\nIf you pass the `--use-pages-file`, the folder will be given that title.\n\n```yaml\ntitle: \"This is a fantastic title!\"\n```\n\n#### Collapse single pages\n\nYou can collapse directories that only contain one document by passing the `--collapse-single-pages` parameter. This means that a folder layout like this:\n\n```text\ndocument.md\nfolder1/\n  documentA.md\n  documentB.md\nfolder2/\n  other-document.md\n```\n\nwill be uploaded to Confluence like this:\n\n```text\ndocument\nfolder1/\n  documentA\n  documentB\nother-document\n```\n\n#### Dealing with empty folders\n\nYou can also modify the behaviour for empty folders. If you specify `--skip-empty`, this tree layout:\n\n```text\ndocument.md\nfolder1/\n  folder2/\n    folder3/\n      other-document.md\nfolderA/\n  interesting-document.md\n    folderB/\n      folderC/\n        lonely-document.md\n```\n\nwill be uploaded as:\n\n```text\ndocument\nfolder3/\n  other-document\nfolderA/\n  interesting-document\n  folderC/\n    lonely-document\n```\n\nAlternatively, you can specify `--collapse-empty` to merge empty folders together with the following result:\n\n```text\ndocument\nfolder1/folder2/folder3/\n  other-document\nfolderA/\n  interesting-document\n  folderB/folderC/\n    lonely-document\n```\n\n## Library usage\n\n`md2cf` can of course be used as a Python library. It exposes two useful modules: the renderer and the API wrapper.\n\n### Renderer\n\nUse the `ConfluenceRenderer` class to generate Confluence Storage Format\noutput from a markdown document.\n\n```python\nimport mistune\nfrom md2cf.confluence_renderer import ConfluenceRenderer\n\nmarkdown_text = \"# Page title\\n\\nInteresting *content* here!\"\n\nrenderer = ConfluenceRenderer(use_xhtml=True)\nconfluence_mistune = mistune.Markdown(renderer=renderer)\nconfluence_body = confluence_mistune(markdown_text)\n```\n\n### API\n\nmd2cf embeds a teeny-tiny implementation of the Confluence Server REST\nAPI that allows you to create, read, and update pages.\n\n```python\nfrom md2cf.api import MinimalConfluence\n\nconfluence = MinimalConfluence(host='http://example.com/rest/api', username='foo', password='bar')\n\nconfluence.create_page(space='TEST', title='Test page', body='<p>Nothing</p>', update_message='Created page')\n\npage = confluence.get_page(title='Test page', space_key='TEST')\nconfluence.update_page(page=page, body='New content', update_message='Changed page contents')\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iamjackg/md2cf",
    "keywords": "markdown confluence",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "md2cf",
    "package_url": "https://pypi.org/project/md2cf/",
    "platform": null,
    "project_url": "https://pypi.org/project/md2cf/",
    "project_urls": {
      "Homepage": "https://github.com/iamjackg/md2cf"
    },
    "release_url": "https://pypi.org/project/md2cf/1.3.1/",
    "requires_dist": [
      "mistune (==0.8.4)",
      "tortilla (==0.5.0)",
      "PyYAML (==6.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Convert Markdown documents to Confluence",
    "version": "1.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17272280,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bef58f3582f84b804ff199f2345658d31c686baa7248c4e3c2feb562fa86469",
        "md5": "8d043118a2b428f11d260a3c270289df",
        "sha256": "776c6abea5c4e4c957c44ba883844d0c1ed30a0fbfd671d8bc1e74bc64fb6a88"
      },
      "downloads": -1,
      "filename": "md2cf-1.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d043118a2b428f11d260a3c270289df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14435,
      "upload_time": "2022-05-01T01:46:55",
      "upload_time_iso_8601": "2022-05-01T01:46:55.802406Z",
      "url": "https://files.pythonhosted.org/packages/0b/ef/58f3582f84b804ff199f2345658d31c686baa7248c4e3c2feb562fa86469/md2cf-1.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12be961c77a582a117089aca1b2524f5f93ae6a0e748762d9480a5839881889d",
        "md5": "7c85f12f93b250a685fdc1675ed17c8a",
        "sha256": "6d3937e831292d2d29b8ae432ffdda04ede8d2e217a5f48d7a959eb936561edf"
      },
      "downloads": -1,
      "filename": "md2cf-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c85f12f93b250a685fdc1675ed17c8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15031,
      "upload_time": "2022-05-01T01:46:57",
      "upload_time_iso_8601": "2022-05-01T01:46:57.211371Z",
      "url": "https://files.pythonhosted.org/packages/12/be/961c77a582a117089aca1b2524f5f93ae6a0e748762d9480a5839881889d/md2cf-1.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}