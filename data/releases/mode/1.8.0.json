{
  "info": {
    "author": "Robinhood Markets",
    "author_email": "opensource@robinhood.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: No Input/Output (Daemon)",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "=====================================================================\n Mode: AsyncIO Services\n=====================================================================\n\n|build-status| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 1.8.0\n:Web: http://mode.readthedocs.org/\n:Download: http://pypi.python.org/pypi/mode\n:Source: http://github.com/fauststream/mode\n:Keywords: async, service, framework, actors, bootsteps, graph\n\nWhat is Mode?\n=============\n\nMode is a library for Python AsyncIO, using the new ``async/await`` syntax\nin Python 3.6 to define your program as a set of services.\n\nWhen starting a larger project using ``asyncio``, it immediately became\napparent that we needed a way to manage the different services running in the\nprogram.  Questions such as \"how do we shutdown the event loop\" is frequently\nanswered by telling users to \"wait for all coroutines in\nasyncio.Task.all_tasks\", but we needed more control over what services\nwhere stopped, in what order and what services can we safely shutdown without\nwaiting for current operations to complete.\n\nSo for us the answer was to create a generic ``Service`` class that handles\nthis for us, including creating pretty graphs of active services in the\nsystem, and what they are currently doing.\n\nHeavily inspired by Celery/RabbitMQ bootsteps, you could say it's a less\nformal version of that, where the graph is built at runtime.\n\nCreating a Service\n==================\n\nTo define a service, simply subclass and fill in the methods\nto do stuff as the service is started/stopped etc.::\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            print('Im starting now')\n\n        async def on_started(self) -> None:\n            print('Im ready')\n\n        async def on_stop(self) -> None:\n            print('Im stopping now')\n\nTo start the service, call ``await service.start()``::\n\n    await service.start()\n\nOr you can use ``mode.Worker`` (or a subclass of this) to start your\nservices-based asyncio program from the console::\n\n    if __name__ == '__main__':\n        imoport mode\n        worker = mode.Worker(MyService(), loglevel='INFO', logfile=None)\n        worker.execute_from_commandline()\n\nIt's a Graph!\n=============\n\nServices can start other services, coroutines, and background tasks.\n\n1) Starting other services using ``add_depenency``::\n\n    class MyService(Service):\n\n        def on_init(self) -> None:\n           self.add_dependency(OtherService(loop=self.loop))\n\n2) Start a list of services using ``on_init_dependencies``::\n\n    class MyService(Service):\n\n        def on_init_dependencies(self) -> None:\n            return [\n                ServiceA(loop=self.loop),\n                ServiceB(loop=self.loop),\n                ServiceC(loop=self.loop),\n            ]\n\n3) Start a future/coroutine (that will be waited on to complete on stop)::\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            self.add_future(self.my_coro())\n\n        async def my_coro(self) -> None:\n            print('Executing coroutine')\n\n4) Start a background task::\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            print('Executing coroutine')\n\n\n5) Start a background task that keeps running::\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            while not self.should_stop:\n                # NOTE: self.sleep will wait for one second, or\n                #       until service stopped/crashed.\n                await self.sleep(1.0)\n                print('Background thread waking up')\n\n.. _installation:\n\nInstallation\n============\n\nYou can install Mode either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`::\n\n    $ pip install -U mode\n\n.. _installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Mode from\nhttp://pypi.python.org/pypi/mode\n\nYou can install it by doing the following::\n\n    $ tar xvfz mode-0.0.0.tar.gz\n    $ cd mode-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\n.. _installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of Mode using the following\npip command::\n\n    $ pip install https://github.com/fauststream/Mode/zipball/master#egg=mode\n\nFAQ\n===\n\nCan I use Mode with Django/Flask/etc.?\n--------------------------------------\n\nYes! Use gevent/eventlet as a bridge to integrate with asyncio.\n\nUsing ``gevent``\n~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with gevent.\n\nUsing gevent requires you to install the ``aiogevent`` module,\nand you can install this as a bundle with Mode:\n\n.. sourcecode:: console\n\n    $ pip install -U mode[gevent]\n\nThen to actually use gevent as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported::\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('gevent')\n    # execute program\n\nREMEMBER: This must be located at the very top of the module,\nin such a way that it executes before you import other libraries.\n\n\nUsing ``eventlet``\n~~~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with eventlet.\n\nUsing eventlet requires you to install the ``aioeventlet`` module,\nand you can install this as a bundle with Mode:\n\n.. sourcecode:: console\n\n    $ pip install -U mode[eventlet]\n\nThen to actually use eventlet as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported::\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('eventlet')\n    # execute program\n\nREMEMBER: It's very important this is at the very top of the module,\nand that it executes before you import libraries.\n\nCan I use Mode with Tornado?\n----------------------------\n\nYes! Use the ``tornado.platform.asyncio`` bridge:\nhttp://www.tornadoweb.org/en/stable/asyncio.html\n\nCan I use Mode with Twisted?\n-----------------------------\n\nYes! Use the asyncio reactor implementation:\nhttps://twistedmatrix.com/documents/17.1.0/api/twisted.internet.asyncioreactor.html\n\nWill you support Python 3.5 or earlier?\n---------------------------------------\n\nThere are no immediate plans to support Python 3.5, but you are welcome to\ncontribute to the project.\n\nHere are some of the steps required to accomplish this:\n\n- Source code transformation to rewrite variable annotations to comments\n\n  for example, the code::\n\n        class Point:\n            x: int = 0\n            y: int = 0\n\n   must be rewritten into::\n\n        class Point:\n            x = 0  # type: int\n            y = 0  # type: int\n\n- Source code transformation to rewrite async functions\n\n    for example, the code::\n\n        async def foo():\n            await asyncio.sleep(1.0)\n\n    must be rewritten into::\n\n        @coroutine\n        def foo():\n            yield from asyncio.sleep(1.0)\n\nWill you support Python 2?\n--------------------------\n\nThere are no plans to support Python 2, but you are welcome to contribute to\nthe project (details in question above is relevant also for Python 2).\n\nCode of Conduct\n===============\n\nEveryone interacting in the project's codebases, issue trackers, chat rooms,\nand mailing lists is expected to follow the Mode Code of Conduct.\n\nAs contributors and maintainers of these projects, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in these projects a harassment-free\nexperience for everyone, regardless of level of experience, gender,\ngender identity and expression, sexual orientation, disability,\npersonal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical\n  or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct. By adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently applying\nthese principles to every aspect of managing this project. Project maintainers\nwho do not follow or enforce the Code of Conduct may be permanently removed from\nthe project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 1.2.0 available at http://contributor-covenant.org/version/1/2/0/.\n\n.. |build-status| image:: https://secure.travis-ci.org/fauststream/mode.png?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/fauststream/mode\n\n.. |license| image:: https://img.shields.io/pypi/l/mode.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/mode.svg\n    :alt: Mode can be installed via wheel\n    :target: http://pypi.python.org/pypi/mode/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/mode.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/mode/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/mode.svg\n    :alt: Supported Python implementations.\n    :target: http://pypi.python.org/pypi/mode/\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fauststream/mode",
    "keywords": "asyncio service bootsteps graph coroutine",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mode",
    "package_url": "https://pypi.org/project/mode/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mode/",
    "project_urls": {
      "Homepage": "https://github.com/fauststream/mode"
    },
    "release_url": "https://pypi.org/project/mode/1.8.0/",
    "requires_dist": [
      "colorlog",
      "terminaltables (~=3.1.0)",
      "aioeventlet (~=0.5.1); extra == 'eventlet'",
      "dnspython; extra == 'eventlet'",
      "aiogevent (~=0.2); extra == 'gevent'",
      "uvloop (>=0.8.1); extra == 'uvloop'"
    ],
    "requires_python": "~=3.6",
    "summary": "AsyncIO Service-based programming.",
    "version": "1.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8288430,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f7f697dd47f0ea954ebfa7245bf56d7427db46193b9ba2652aaf56fe95dccb4",
        "md5": "bb0e61dfbb9338e5f3fadf8ae0919737",
        "sha256": "3cc9c536de2d29be0ab67417034abb4c49071c31c3d80642c41617d23684d242"
      },
      "downloads": -1,
      "filename": "mode-1.8.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb0e61dfbb9338e5f3fadf8ae0919737",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.6",
      "size": 69700,
      "upload_time": "2018-02-21T00:23:37",
      "upload_time_iso_8601": "2018-02-21T00:23:37.781653Z",
      "url": "https://files.pythonhosted.org/packages/9f/7f/697dd47f0ea954ebfa7245bf56d7427db46193b9ba2652aaf56fe95dccb4/mode-1.8.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf492cea99d5f9c04945eae90a35bde16f93a4dc758783cebe3e4684a1e2b2ab",
        "md5": "c175515343301f8952ed86760557899e",
        "sha256": "2cc55d4fee08ca7bb6ef258e6226337823410d549042fb220ff9e59345e37773"
      },
      "downloads": -1,
      "filename": "mode-1.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c175515343301f8952ed86760557899e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 176955,
      "upload_time": "2018-02-21T00:23:39",
      "upload_time_iso_8601": "2018-02-21T00:23:39.868491Z",
      "url": "https://files.pythonhosted.org/packages/cf/49/2cea99d5f9c04945eae90a35bde16f93a4dc758783cebe3e4684a1e2b2ab/mode-1.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}