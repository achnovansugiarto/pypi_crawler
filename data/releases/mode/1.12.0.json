{
  "info": {
    "author": "Robinhood Markets",
    "author_email": "opensource@robinhood.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: No Input/Output (Daemon)",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "=====================================================================\n Mode: AsyncIO Services\n=====================================================================\n\n|build-status| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 1.12.0\n:Web: http://mode.readthedocs.org/\n:Download: http://pypi.python.org/pypi/mode\n:Source: http://github.com/fauststream/mode\n:Keywords: async, service, framework, actors, bootsteps, graph\n\nWhat is Mode?\n=============\n\nMode is a library for Python AsyncIO, using the new ``async/await`` syntax\nin Python 3.6 to define your program as a set of services.\n\nWhen writing projects using ``asyncio``, a pattern emerged where we'd base\nour program on one or more services. These behave much like actors in Erlang,\nbut implemented as classes:\n\nA service is just a class::\n\n    class PageViewCache(Service):\n        redis: Redis = None\n\n        async def on_start(self) -> None:\n            self.redis = connect_to_redis()\n\n        async def update(self, url: str, n: int = 1) -> int:\n            return await self.redis.incr(url, n)\n\n        async def get(self, url: str) -> int:\n            return await self.redis.get(url)\n\n\nServices are started, stopped and restarted; and they can\nstart other services, define background tasks, timers, and more::\n\n    class App(Service):\n        page_view_cache: PageViewCache = None\n\n        async def on_start(self) -> None:\n            await self.add_runtime_dependency(self.page_view_cache)\n\n        @cached_property\n        def page_view_cache(self) -> PageViewCache:\n            return PageViewCache()\n\n\nServices\n    can depend on other services::\n\n        class App(Service):\n\n            def on_init_dependencies(self) -> None:\n                return [\n                    self.websockets,\n                    self.webserver,\n                    self.user_cache,\n                ]\n\n            async def on_start(self) -> None:\n                print('App is starting')\n\nGraph\n    If we fill out the rest of this code to implement the additional\n    services.\n\n    A service managing our websocket server::\n\n        class Websockets(Service):\n\n            def __init__(self, port: int = 8081, **kwargs: Any) -> None:\n                self.port = 8081\n                self._server = None\n                super().__init__(**kwargs)\n\n            async def on_start(self) -> None:\n                self._server = websockets.run()\n\n            async def on_stop(self) -> None:\n                if self._server is not None:\n                    self._server.close()\n\n    Then a web server, run in a separate thread using ``ServiceThread``::\n\n        from aiohttp.web import Application\n        from mode.threads import ServiceThread\n\n        class Webserver(ServiceThread):\n\n            def __init__(self,\n                         port: int = 8000,\n                         bind: str = None,\n                         **kwargs: Any) -> None:\n                self._app = Application()\n                self.port = port\n                self.bind = bind\n                self._handler = None\n                self._srv = None\n                super().__init__(**kwargs)\n\n            async def on_start(self) -> None:\n                handler = self._handler = self._app.make_handler()\n                # self.loop is the event loop in this thread\n                #   self.parent_loop is the loop that created this thread.\n                self._srv = await self.loop.create_server(\n                    handler, self.bind, self.port)\n                self.log.info('Serving on port %s', self.port)\n\n            async def on_thread_stop(self) -> None:\n                # see examples/tutorial.py for an actual example\n                self._srv.stop()\n\n    Third, our user cache, which has a background coroutine used to\n    remove old expired items from the cache::\n\n        class UserCache(Service):\n            _cache: MutableMapping[str, User]\n\n            def __post_init__(self):\n                self._cache = {}\n\n            async def lookup(self, user_id: str) -> User:\n                try:\n                    return self._cache[user_id]\n                except KeyError:\n                    user = self._cache[user_id] = await User.objects.get(user_id)\n                    return user\n\n            @Service.timer(10)  # execute every 10 seconds.\n            def _remove_expired(self):\n                remove_expired_users(self._cache)\n\nProxy\n    Now we just need to create these services in our \"App\" class.\n\n    In our little tutorial example the \"app\" is the entrypoint for\n    our program.  Mode does not have a concept of apps, so we don't\n    subclass anything, but we want the app to be reusable in projects\n    and keep it possible to start multiple apps at the same time.\n\n    If we create apps at module scope, for example::\n\n        # example/app.py\n        from our_library import App\n        app = App(web_port=6066)\n\n    It is very important to instantiate services lazily, otherwise\n    the ``asyncio`` event loop is created too early.\n\n    For services that are defined at module level we can create a\n    ``ServiceProxy``::\n\n        from typing import Any\n\n        from mode import Service, ServiceProxy, ServiceT\n        from mode.utils.objects import cached_property\n\n        class AppService(Service):\n            # the \"real\" service that App.start() will run\n\n            def __init__(self, app: 'App', **kwargs: Any) -> None:\n                self.app = app\n                super().__init__(**kwargs)\n\n            def on_init_dependencies(self) -> None:\n                return [\n                    self.app.websockets,\n                    self.app.webserver,\n                    self.app.user_cache,\n                ]\n\n            async def on_start(self) -> None:\n                print('App is starting')\n\n        class App(ServiceProxy):\n\n            def __init__(self,\n                         web_port: int = 8000,\n                         web_bind: str = None,\n                         websocket_port: int = 8001,\n                         **kwargs: Any) -> None:\n                self.web_port = web_port\n                self.web_bind = web_bind\n                self.websocket_port = websocket_port\n\n            @cached_property\n            def _service(self) -> ServiceT:\n                return AppService(self)\n\n            @cached_property\n            def websockets(self) -> Websockets:\n                return Websockets(\n                    port=self.websocket_port,\n                    loop=self.loop,\n                    beacon=self.beacon,\n                )\n\n            @cached_property\n            def webserver(self) -> Webserver:\n                return Webserver(\n                    port=self.web_port,\n                    bind=self.web_bind,\n                    loop=self.loop,\n                    beacon=self.beacon,\n                )\n\n            @cached_property\n            def user_cache(self) -> UserCache:\n                return UserCache(loop=self.loop, beacon=self.beacon)\n\nWorker\n    To start your service on the command-line, add an\n    entrypoint for a ``Worker`` to start it::\n\n        app = App()\n\n        if __name__ == '__main__':\n            from mode import Worker\n            Worker(app, loglevel=\"info\").execute_from_commandline()\n\n    Then execute your program to start the worker::\n\n        $ python examples/tutorial.py\n        [2018-03-27 15:47:12,159: INFO]: [^Worker]: Starting...\n        [2018-03-27 15:47:12,160: INFO]: [^-AppService]: Starting...\n        [2018-03-27 15:47:12,160: INFO]: [^--Websockets]: Starting...\n        STARTING WEBSOCKET SERVER\n        [2018-03-27 15:47:12,161: INFO]: [^--UserCache]: Starting...\n        [2018-03-27 15:47:12,161: INFO]: [^--Webserver]: Starting...\n        [2018-03-27 15:47:12,164: INFO]: [^--Webserver]: Serving on port 8000\n        REMOVING EXPIRED USERS\n        REMOVING EXPIRED USERS\n\n    To stop it hit ``Control-c``::\n\n        [2018-03-27 15:55:08,084: INFO]: [^Worker]: Stopping on signal received...\n        [2018-03-27 15:55:08,084: INFO]: [^Worker]: Stopping...\n        [2018-03-27 15:55:08,084: INFO]: [^-AppService]: Stopping...\n        [2018-03-27 15:55:08,084: INFO]: [^--UserCache]: Stopping...\n        REMOVING EXPIRED USERS\n        [2018-03-27 15:55:08,085: INFO]: [^Worker]: Gathering service tasks...\n        [2018-03-27 15:55:08,085: INFO]: [^--UserCache]: -Stopped!\n        [2018-03-27 15:55:08,085: INFO]: [^--Webserver]: Stopping...\n        [2018-03-27 15:55:08,085: INFO]: [^Worker]: Gathering all futures...\n        [2018-03-27 15:55:08,085: INFO]: [^--Webserver]: Closing server\n        [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Waiting for server to close handle\n        [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Shutting down web application\n        [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Waiting for handler to shut down\n        [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: Cleanup\n        [2018-03-27 15:55:08,086: INFO]: [^--Webserver]: -Stopped!\n        [2018-03-27 15:55:08,086: INFO]: [^--Websockets]: Stopping...\n        [2018-03-27 15:55:08,086: INFO]: [^--Websockets]: -Stopped!\n        [2018-03-27 15:55:08,087: INFO]: [^-AppService]: -Stopped!\n        [2018-03-27 15:55:08,087: INFO]: [^Worker]: -Stopped!\n\nBeacons\n    The ``beacon`` object that we pass to services keeps track of the services\n    in a graph.\n\n    They are not stricly required, but can be used to visualize a running\n    system, for example we can render it as a pretty graph.\n\n    This requires you to have the ``pydot`` library and GraphViz\n    installed::\n\n        $ pip install pydot\n\n    Let's change the app service class to dump the graph to an image\n    at startup.\n\n        class AppService(Service):\n\n            async def on_start(self) -> None:\n                print('APP STARTING')\n                import pydot\n                import io\n                o = io.StringIO()\n                beacon = self.app.beacon.root or self.app.beacon\n                beacon.as_graph().to_dot(o)\n                graph, = pydot.graph_from_dot_data(o.getvalue())\n                print('WRITING GRAPH TO image.png')\n                with open('image.png', 'wb') as fh:\n                    fh.write(graph.create_png())\n\n\nCreating a Service\n==================\n\nTo define a service, simply subclass and fill in the methods\nto do stuff as the service is started/stopped etc.::\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            print('Im starting now')\n\n        async def on_started(self) -> None:\n            print('Im ready')\n\n        async def on_stop(self) -> None:\n            print('Im stopping now')\n\nTo start the service, call ``await service.start()``::\n\n    await service.start()\n\nOr you can use ``mode.Worker`` (or a subclass of this) to start your\nservices-based asyncio program from the console::\n\n    if __name__ == '__main__':\n        import mode\n        worker = mode.Worker(MyService(), loglevel='INFO', logfile=None)\n        worker.execute_from_commandline()\n\nIt's a Graph!\n=============\n\nServices can start other services, coroutines, and background tasks.\n\n1) Starting other services using ``add_depenency``::\n\n    class MyService(Service):\n\n        def __post_init__(self) -> None:\n           self.add_dependency(OtherService(loop=self.loop))\n\n2) Start a list of services using ``on_init_dependencies``::\n\n    class MyService(Service):\n\n        def on_init_dependencies(self) -> None:\n            return [\n                ServiceA(loop=self.loop),\n                ServiceB(loop=self.loop),\n                ServiceC(loop=self.loop),\n            ]\n\n3) Start a future/coroutine (that will be waited on to complete on stop)::\n\n    class MyService(Service):\n\n        async def on_start(self) -> None:\n            self.add_future(self.my_coro())\n\n        async def my_coro(self) -> None:\n            print('Executing coroutine')\n\n4) Start a background task::\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            print('Executing coroutine')\n\n\n5) Start a background task that keeps running::\n\n    class MyService(Service):\n\n        @Service.task\n        async def _my_coro(self) -> None:\n            while not self.should_stop:\n                # NOTE: self.sleep will wait for one second, or\n                #       until service stopped/crashed.\n                await self.sleep(1.0)\n                print('Background thread waking up')\n\n.. _installation:\n\nInstallation\n============\n\nYou can install Mode either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`::\n\n    $ pip install -U mode\n\n.. _installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Mode from\nhttp://pypi.python.org/pypi/mode\n\nYou can install it by doing the following::\n\n    $ tar xvfz mode-0.0.0.tar.gz\n    $ cd mode-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\n.. _installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nYou can install the latest snapshot of Mode using the following\npip command::\n\n    $ pip install https://github.com/fauststream/Mode/zipball/master#egg=mode\n\nFAQ\n===\n\nCan I use Mode with Django/Flask/etc.?\n--------------------------------------\n\nYes! Use gevent/eventlet as a bridge to integrate with asyncio.\n\nUsing ``gevent``\n~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with gevent.\n\nUsing gevent requires you to install the ``aiogevent`` module,\nand you can install this as a bundle with Mode:\n\n.. sourcecode:: console\n\n    $ pip install -U mode[gevent]\n\nThen to actually use gevent as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported::\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('gevent')\n    # execute program\n\nREMEMBER: This must be located at the very top of the module,\nin such a way that it executes before you import other libraries.\n\n\nUsing ``eventlet``\n~~~~~~~~~~~~~~~~~~\n\nThis works with any blocking Python library that can work with eventlet.\n\nUsing eventlet requires you to install the ``aioeventlet`` module,\nand you can install this as a bundle with Mode:\n\n.. sourcecode:: console\n\n    $ pip install -U mode[eventlet]\n\nThen to actually use eventlet as the event loop you have to\nexecute the following in your entrypoint module (usually where you\nstart the worker), before any other third party libraries are imported::\n\n    #!/usr/bin/env python3\n    import mode.loop\n    mode.loop.use('eventlet')\n    # execute program\n\nREMEMBER: It's very important this is at the very top of the module,\nand that it executes before you import libraries.\n\nCan I use Mode with Tornado?\n----------------------------\n\nYes! Use the ``tornado.platform.asyncio`` bridge:\nhttp://www.tornadoweb.org/en/stable/asyncio.html\n\nCan I use Mode with Twisted?\n-----------------------------\n\nYes! Use the asyncio reactor implementation:\nhttps://twistedmatrix.com/documents/17.1.0/api/twisted.internet.asyncioreactor.html\n\nWill you support Python 3.5 or earlier?\n---------------------------------------\n\nThere are no immediate plans to support Python 3.5, but you are welcome to\ncontribute to the project.\n\nHere are some of the steps required to accomplish this:\n\n- Source code transformation to rewrite variable annotations to comments\n\n  for example, the code::\n\n        class Point:\n            x: int = 0\n            y: int = 0\n\n   must be rewritten into::\n\n        class Point:\n            x = 0  # type: int\n            y = 0  # type: int\n\n- Source code transformation to rewrite async functions\n\n    for example, the code::\n\n        async def foo():\n            await asyncio.sleep(1.0)\n\n    must be rewritten into::\n\n        @coroutine\n        def foo():\n            yield from asyncio.sleep(1.0)\n\nWill you support Python 2?\n--------------------------\n\nThere are no plans to support Python 2, but you are welcome to contribute to\nthe project (details in question above is relevant also for Python 2).\n\nCode of Conduct\n===============\n\nEveryone interacting in the project's codebases, issue trackers, chat rooms,\nand mailing lists is expected to follow the Mode Code of Conduct.\n\nAs contributors and maintainers of these projects, and in the interest of fostering\nan open and welcoming community, we pledge to respect all people who contribute\nthrough reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in these projects a harassment-free\nexperience for everyone, regardless of level of experience, gender,\ngender identity and expression, sexual orientation, disability,\npersonal appearance, body size, race, ethnicity, age,\nreligion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical\n  or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct. By adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently applying\nthese principles to every aspect of managing this project. Project maintainers\nwho do not follow or enforce the Code of Conduct may be permanently removed from\nthe project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 1.2.0 available at http://contributor-covenant.org/version/1/2/0/.\n\n.. |build-status| image:: https://secure.travis-ci.org/fauststream/mode.png?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/fauststream/mode\n\n.. |license| image:: https://img.shields.io/pypi/l/mode.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/mode.svg\n    :alt: Mode can be installed via wheel\n    :target: http://pypi.python.org/pypi/mode/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/mode.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/mode/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/mode.svg\n    :alt: Supported Python implementations.\n    :target: http://pypi.python.org/pypi/mode/\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fauststream/mode",
    "keywords": "asyncio service bootsteps graph coroutine",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mode",
    "package_url": "https://pypi.org/project/mode/",
    "platform": "any",
    "project_url": "https://pypi.org/project/mode/",
    "project_urls": {
      "Homepage": "https://github.com/fauststream/mode"
    },
    "release_url": "https://pypi.org/project/mode/1.12.0/",
    "requires_dist": [
      "colorlog",
      "aioeventlet (~=0.5.1); extra == 'eventlet'",
      "dnspython; extra == 'eventlet'",
      "aiogevent (~=0.2); extra == 'gevent'",
      "uvloop (>=0.8.1); extra == 'uvloop'"
    ],
    "requires_python": "~=3.6",
    "summary": "AsyncIO Service-based programming.",
    "version": "1.12.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8288430,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e202a7e375062ef7056c43b6b539a230057e4c50ec8f95e756123c9ac1d2c491",
        "md5": "b0d49c91a06561315c0a4382e3ea7a00",
        "sha256": "a90dbb6a7126746404cab34ba6e01f95e7f808c2d38a4e5764b3c04b597b7ea9"
      },
      "downloads": -1,
      "filename": "mode-1.12.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0d49c91a06561315c0a4382e3ea7a00",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.6",
      "size": 81082,
      "upload_time": "2018-04-23T21:26:09",
      "upload_time_iso_8601": "2018-04-23T21:26:09.046666Z",
      "url": "https://files.pythonhosted.org/packages/e2/02/a7e375062ef7056c43b6b539a230057e4c50ec8f95e756123c9ac1d2c491/mode-1.12.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a20a1f083513456add6b59d35ebc62664b77bb2e022851c516c0a39c5107489",
        "md5": "4bfa1828cdcc7c8df13bfadea84ac067",
        "sha256": "7e959c01532c39debf2e65dffecf46dff9cce77fa7cd79174c38188ef587d7dc"
      },
      "downloads": -1,
      "filename": "mode-1.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4bfa1828cdcc7c8df13bfadea84ac067",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.6",
      "size": 220755,
      "upload_time": "2018-04-23T21:26:10",
      "upload_time_iso_8601": "2018-04-23T21:26:10.308043Z",
      "url": "https://files.pythonhosted.org/packages/6a/20/a1f083513456add6b59d35ebc62664b77bb2e022851c516c0a39c5107489/mode-1.12.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}