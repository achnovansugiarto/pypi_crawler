{
  "info": {
    "author": "Alexander Tikhonov",
    "author_email": "random.gauss@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mashumaro (マシュマロ)\n\n> **mashumaro** is a fast and well tested serialization framework on top of dataclasses.\n\n[![Build Status](https://github.com/Fatal1ty/mashumaro/workflows/tests/badge.svg)](https://github.com/Fatal1ty/mashumaro/actions)\n[![Coverage Status](https://coveralls.io/repos/github/Fatal1ty/mashumaro/badge.svg?branch=master)](https://coveralls.io/github/Fatal1ty/mashumaro?branch=master)\n[![Latest Version](https://img.shields.io/pypi/v/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![Python Version](https://img.shields.io/pypi/pyversions/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\nWhen using dataclasses, you often need to dump and load objects according to\nthe described scheme.\nThis framework not only adds this ability to serialize in different formats,\nbut also makes **serialization rapidly**.\n\nTable of contents\n--------------------------------------------------------------------------------\n* [Installation](#installation)\n* [Supported serialization formats](#supported-serialization-formats)\n* [Supported field types](#supported-field-types)\n* [Usage example](#usage-example)\n* [How does it work?](#how-does-it-work)\n* [Benchmark](#benchmark)\n* [API](#api)\n* [Customization](#customization)\n    * [Serializable Interface](#serializable-interface)\n    * [Field options](#field-options)\n        * [`serialize` option](#serialize-option)\n        * [`deserialize` option](#deserialize-option)\n        * [`serialization_strategy` option](#serialization_strategy-option)\n    * [Config options](#config-options)\n        * [`debug` config option](#debug-config-option)\n        * [`omit_none` config option](#omit_none-config-option)\n        * [`serialization_strategy` config option](#serialization_strategy-config-option)\n    * [Serialization hooks](#serialization-hooks)\n        * [Before deserialization](#before-deserialization)\n        * [After deserialization](#after-deserialization)\n        * [Before serialization](#before-serialization)\n        * [After serialization](#after-serialization)\n\nInstallation\n--------------------------------------------------------------------------------\n\nUse pip to install:\n```shell\n$ pip install mashumaro\n```\n\nSupported serialization formats\n--------------------------------------------------------------------------------\n\nThis framework adds methods for dumping to and loading from the\nfollowing formats:\n\n* [plain dict](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)\n* [JSON](https://www.json.org)\n* [YAML](https://yaml.org)\n* [MessagePack](https://msgpack.org)\n\nPlain dict can be useful when you need to pass a dict object to a\nthird-party library, such as a client for MongoDB.\n\nSupported field types\n--------------------------------------------------------------------------------\n\nThere is support for generic types from the standard *typing* module:\n* `List`\n* `Tuple`\n* `Set`\n* `FrozenSet`\n* `Deque`\n* `Dict`\n* `OrderedDict`\n* `Mapping`\n* `MutableMapping`\n* `Counter`\n* `ChainMap`\n* `Sequence`\n\nfor special primitives from the *typing* module:\n* `Optional`\n* `Union`\n* `Any`\n\nfor enumerations based on classes from the standard *enum* module:\n* `Enum`\n* `IntEnum`\n* `Flag`\n* `IntFlag`\n\nfor common built-in types:\n* `int`\n* `float`\n* `bool`\n* `str`\n* `bytes`\n* `bytearray`\n\nfor built-in datetime oriented types (see [more](#deserialize-option) details):\n* `datetime`\n* `date`\n* `time`\n* `timedelta`\n* `timezone`\n\nfor pathlike types:\n* `PurePath`\n* `Path`\n* `PurePosixPath`\n* `PosixPath`\n* `PureWindowsPath`\n* `WindowsPath`\n* `os.PathLike`\n\n\nfor other less popular built-in types:\n* `uuid.UUID`\n* `decimal.Decimal`\n* `fractions.Fraction`\n* `ipaddress.IPv4Address`\n* `ipaddress.IPv6Address`\n* `ipaddress.IPv4Network`\n* `ipaddress.IPv6Network`\n* `ipaddress.IPv4Interface`\n* `ipaddress.IPv6Interface`\n\nfor specific types like *NoneType*, nested dataclasses itself and\neven [user defined classes](#user-defined-classes).\n\nUsage example\n--------------------------------------------------------------------------------\n\n```python\nfrom enum import Enum\nfrom typing import Set\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassJSONMixin\n\nclass PetType(Enum):\n    CAT = 'CAT'\n    MOUSE = 'MOUSE'\n\n@dataclass(unsafe_hash=True)\nclass Pet(DataClassJSONMixin):\n    name: str\n    age: int\n    pet_type: PetType\n\n@dataclass\nclass Person(DataClassJSONMixin):\n    first_name: str\n    second_name: str\n    age: int\n    pets: Set[Pet]\n\n\ntom = Pet(name='Tom', age=5, pet_type=PetType.CAT)\njerry = Pet(name='Jerry', age=3, pet_type=PetType.MOUSE)\njohn = Person(first_name='John', second_name='Smith', age=18, pets={tom, jerry})\n\ndump = john.to_json()\nperson = Person.from_json(dump)\n# person == john\n\nPet.from_json('{\"name\": \"Tom\", \"age\": 5, \"pet_type\": \"CAT\"}')\n# Pet(name='Tom', age=5, pet_type=<PetType.CAT: 'CAT'>)\n```\n\nHow does it work?\n--------------------------------------------------------------------------------\n\nThis framework works by taking the schema of the data and generating a\nspecific parser and builder for exactly that schema.\nThis is much faster than inspection of field types on every call of parsing or\nbuilding at runtime.\n\nBenchmark\n--------------------------------------------------------------------------------\n\n* macOS 11.1 Big Sur\n* Apple M1\n* 16GB RAM\n\nLoad and dump [sample data](https://github.com/Fatal1ty/mashumaro/blob/master/benchmark/sample.py) 1.000 times in 5 runs.\nThe following figures show the best overall time in each case.\n\n<img src=\"https://raw.githubusercontent.com/Fatal1ty/mashumaro/master/benchmark/charts/load.png\" width=\"400\"><img src=\"https://raw.githubusercontent.com/Fatal1ty/mashumaro/master/benchmark/charts/dump.png\" width=\"400\">\n\n<table>\n  <col>\n  <colgroup span=\"2\"></colgroup>\n  <colgroup span=\"2\"></colgroup>\n  <tr>\n    <th rowspan=\"2\">Framework</th>\n    <th colspan=\"2\" scope=\"colgroup\">From dict</th>\n    <th colspan=\"2\" scope=\"colgroup\">To dict</th>\n</tr>\n<tr>\n    <th scope=\"col\">Time</th>\n    <th scope=\"col\">Slowdown factor</th>\n    <th scope=\"col\">Time</th>\n    <th scope=\"col\">Slowdown factor</th>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://github.com/Fatal1ty/mashumaro\">mashumaro</a></th>\n    <td>0.04316</td>\n    <td>1x</td>\n    <td>0.02751</td>\n    <td>1x</td>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://github.com/Tinche/cattrs\">cattrs</a></th>\n    <td>0.06518</td>\n    <td>1.51x</td>\n    <td>0.04856</td>\n    <td>1.77x</td>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://github.com/samuelcolvin/pydantic/\">pydantic</a></th>\n    <td>0.23339</td>\n    <td>5.41x</td>\n    <td>0.11464</td>\n    <td>4.17x</td>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://github.com/marshmallow-code/marshmallow\">marshmallow</a></th>\n    <td>0.24699</td>\n    <td>5.72x</td>\n    <td>0.09425</td>\n    <td>3.43x</td>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict\">dataclasses</a></th>\n    <td>—</td>\n    <td>—</td>\n    <td>0.22689</td>\n    <td>5.26x</td>\n</tr>\n<tr>\n    <th scope=\"row\"><a href=\"https://github.com/konradhalas/dacite\">dacite</a></th>\n    <td>0.91482</td>\n    <td>21.2x</td>\n    <td>—</td>\n    <td>—</td>\n</tr>\n</table>\n\nTo run benchmark in your environment:\n```bash\ngit clone git@github.com:Fatal1ty/mashumaro.git\ncd mashumaro\npython3 -m venv env && source env/bin/activate\npip install -e .\npip install -r requirements-dev.txt\npython benchmark/run.py\n```\n\nAPI\n--------------------------------------------------------------------------------\n\nMashumaro provides a couple of mixins for each format.\n\n#### `DataClassDictMixin.to_dict(use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a dictionary from dataclass object based on the dataclass schema provided.\nOptions include:\n```python\nuse_bytes: False     # False - convert bytes/bytearray objects to base64 encoded string, True - keep untouched\nuse_enum: False      # False - convert enum objects to enum values, True - keep untouched\nuse_datetime: False  # False - convert datetime oriented objects to ISO 8601 formatted string, True - keep untouched\n```\n\n#### `DataClassDictMixin.from_dict(data: Mapping, use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a new object from dict object based on the dataclass schema provided.\nOptions include:\n```python\nuse_bytes: False     # False - load bytes/bytearray objects from base64 encoded string, True - keep untouched\nuse_enum: False      # False - load enum objects from enum values, True - keep untouched\nuse_datetime: False  # False - load datetime oriented objects from ISO 8601 formatted string, True - keep untouched\n```\n\n#### `DataClassJSONMixin.to_json(encoder: Optional[Encoder], dict_params: Optional[Mapping], **encoder_kwargs)`\n\nMake a JSON formatted string from dataclass object based on the dataclass\nschema provided. Options include:\n```\nencoder        # function called for json encoding, defaults to json.dumps\ndict_params    # dictionary of parameter values passed underhood to `to_dict` function\nencoder_kwargs # keyword arguments for encoder function\n```\n\n#### `DataClassJSONMixin.from_json(data: Union[str, bytes, bytearray], decoder: Optional[Decoder], dict_params: Optional[Mapping], **decoder_kwargs)`\n\nMake a new object from JSON formatted string based on the dataclass schema\nprovided. Options include:\n```\ndecoder        # function called for json decoding, defaults to json.loads\ndict_params    # dictionary of parameter values passed underhood to `from_dict` function\ndecoder_kwargs # keyword arguments for decoder function\n```\n\n#### `DataClassMessagePackMixin.to_msgpack(encoder: Optional[Encoder], dict_params: Optional[Mapping], **encoder_kwargs)`\n\nMake a MessagePack formatted bytes object from dataclass object based on the\ndataclass schema provided. Options include:\n```\nencoder        # function called for MessagePack encoding, defaults to msgpack.packb\ndict_params    # dictionary of parameter values passed underhood to `to_dict` function\nencoder_kwargs # keyword arguments for encoder function\n```\n\n#### `DataClassMessagePackMixin.from_msgpack(data: Union[str, bytes, bytearray], decoder: Optional[Decoder], dict_params: Optional[Mapping], **decoder_kwargs)`\n\nMake a new object from MessagePack formatted data based on the\ndataclass schema provided. Options include:\n```\ndecoder        # function called for MessagePack decoding, defaults to msgpack.unpackb\ndict_params    # dictionary of parameter values passed underhood to `from_dict` function\ndecoder_kwargs # keyword arguments for decoder function\n```\n\n#### `DataClassYAMLMixin.to_yaml(encoder: Optional[Encoder], dict_params: Optional[Mapping], **encoder_kwargs)`\n\nMake an YAML formatted bytes object from dataclass object based on the\ndataclass schema provided. Options include:\n```\nencoder        # function called for YAML encoding, defaults to yaml.dump\ndict_params    # dictionary of parameter values passed underhood to `to_dict` function\nencoder_kwargs # keyword arguments for encoder function\n```\n\n#### `DataClassYAMLMixin.from_yaml(data: Union[str, bytes], decoder: Optional[Decoder], dict_params: Optional[Mapping], **decoder_kwargs)`\n\nMake a new object from YAML formatted data based on the\ndataclass schema provided. Options include:\n```\ndecoder        # function called for YAML decoding, defaults to yaml.safe_load\ndict_params    # dictionary of parameter values passed underhood to `from_dict` function\ndecoder_kwargs # keyword arguments for decoder function\n```\n\nCustomization\n--------------------------------------------------------------------------------\n\n### Serializable Interface\n\nIf you already have a separate custom class, and you want to serialize\ninstances of it with *mashumaro*, you can achieve this by implementing\n*SerializableType* interface:\n\n```python\nfrom typing import Dict\nfrom datetime import datetime\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.types import SerializableType\n\nclass DateTime(datetime, SerializableType):\n    def _serialize(self) -> Dict[str, int]:\n        return {\n            \"year\": self.year,\n            \"month\": self.month,\n            \"day\": self.day,\n            \"hour\": self.hour,\n            \"minute\": self.minute,\n            \"second\": self.second,\n        }\n\n    @classmethod\n    def _deserialize(cls, value: Dict[str, int]) -> 'DateTime':\n        return DateTime(\n            year=value['year'],\n            month=value['month'],\n            day=value['day'],\n            hour=value['hour'],\n            minute=value['minute'],\n            second=value['second'],\n        )\n\n\n@dataclass\nclass Holiday(DataClassDictMixin):\n    when: DateTime = DateTime.now()\n\n\nnew_year = Holiday(when=DateTime(2019, 1, 1, 12))\ndictionary = new_year.to_dict()\n# {'x': {'year': 2019, 'month': 1, 'day': 1, 'hour': 0, 'minute': 0, 'second': 0}}\nassert Holiday.from_dict(dictionary) == new_year\n```\n\n### Field options\n\nIn some cases creating a new class just for one little thing could be\nexcessive. Moreover, you may need to deal with third party classes that you are\nnot allowed to change. You can use[`dataclasses.field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field)\nfunction as a default field value to configure some serialization aspects\nthrough its `metadata` parameter. Next section describes all supported options\nto use in `metadata` mapping.\n\n#### `serialize` option\n\nThis option allows you to change the serialization method through\na value of type `Callable[[Any], Any]` that could be any callable object like\na function, a class method, a class instance method, an instance of a callable\nclass or even a lambda function.\n\nExample:\n\n```python\n@dataclass\nclass A(DataClassDictMixin):\n    dt: datetime = field(\n        metadata={\n            \"serialize\": lambda v: v.strftime('%Y-%m-%d %H:%M:%S')\n        }\n    )\n```\n\n#### `deserialize` option\n\nThis option allows you to change the deserialization method. When using\nthis option, the deserialization behaviour depends on what type of value the\noption has. It could be either `Callable[[Any], Any]` or `str`.\n\nA value of type `Callable[[Any], Any]` is a generic way to specify any callable\nobject like a function, a class method, a class instance method, an instance\nof a callable class or even a lambda function to be called for deserialization.\n\nA value of type `str` sets a specific engine for deserialization. Keep in mind\nthat all possible engines depend on the field type that this option is used\nwith. At this moment there are next deserialization engines to choose from:\n\n| Applicable field types     | Supported engines        | Description\n|:-------------------------- |:-------------------------|:------------------------------|\n| `datetime`, `date`, `time` | [`ciso8601`](https://github.com/closeio/ciso8601#supported-subset-of-iso-8601), [`pendulum`](https://github.com/sdispater/pendulum) | How to parse datetime string. By default native [`fromisoformat`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat) of corresponding class will be used for `datetime`, `date` and `time` fields. It's the fastest way in most cases, but you can choose an alternative. |\n\nExample:\n\n```python\nfrom datetime import datetime\nfrom dataclasses import dataclass, field\nfrom typing import List\nfrom mashumaro import DataClassDictMixin\nimport ciso8601\nimport dateutil\n\n@dataclass\nclass A(DataClassDictMixin):\n    x: datetime = field(\n        metadata={\"deserialize\": \"pendulum\"}\n    )\n\nclass B(DataClassDictMixin):\n    x: datetime = field(\n        metadata={\"deserialize\": ciso8601.parse_datetime_as_naive}\n    )\n\n@dataclass\nclass C(DataClassDictMixin):\n    dt: List[datetime] = field(\n        metadata={\n            \"deserialize\": lambda l: list(map(dateutil.parser.isoparse, l))\n        }\n    )\n```\n\n#### `serialization_strategy` option\n\nThis option is useful when you want to change the serialization behaviour\nfor a class depending on some defined parameters. For this case you can create\nthe special class implementing *SerializationStrategy* interface:\n\n```python\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.types import SerializationStrategy\n\nclass FormattedDateTime(SerializationStrategy):\n    def __init__(self, fmt):\n        self.fmt = fmt\n\n    def serialize(self, value: datetime) -> str:\n        return value.strftime(self.fmt)\n\n    def deserialize(self, value: str) -> datetime:\n        return datetime.strptime(value, self.fmt)\n\n@dataclass\nclass DateTimeFormats(DataClassDictMixin):\n    short: datetime = field(\n        metadata={\n            \"serialization_strategy\": FormattedDateTime(\n                fmt=\"%d%m%Y%H%M%S\",\n            )\n        }\n    )\n    verbose: datetime = field(\n        metadata={\n            \"serialization_strategy\": FormattedDateTime(\n                fmt=\"%A %B %d, %Y, %H:%M:%S\",\n            )\n        }\n    )\n\nformats = DateTimeFormats(\n    short=datetime(2019, 1, 1, 12),\n    verbose=datetime(2019, 1, 1, 12),\n)\ndictionary = formats.to_dict()\n# {'short': '01012019120000', 'verbose': 'Tuesday January 01, 2019, 12:00:00'}\nassert DateTimeFormats.from_dict(dictionary) == formats\n```\n\nIf you don't want to remember the names of the options you can use\n`field_options` helper function:\n\n```python\nfrom dataclasses import dataclass, field\nfrom mashumaro import DataClassDictMixin, field_options\n\n@dataclass\nclass A(DataClassDictMixin):\n    x: int = field(\n        metadata=field_options(\n            serialize=str,\n            deserialize=int,\n            ...\n        )\n    )\n```\n\nMore options are on the way. If you know which option would be useful for many,\nplease don't hesitate to create an issue or pull request.\n\n### Config options\n\nIf inheritance is not an empty word for you, you'll fall in love with the\n`Config` class. You can register `serialize` and `deserialize` methods, define\ncode generation options and other things just in one place. Or in some\nclasses in different ways if you need flexibility. Inheritance is always on the\nfirst place.\n\nThere is a base class `BaseConfig` that you can inherit for the sake of\nconvenience, but it's not mandatory.\n\nIn the following example you can see how\nthe `debug` flag is changed from class to class: `ModelA` will have debug mode enabled but\n`ModelB` will not.\n\n```python\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.config import BaseConfig\n\nclass BaseModel(DataClassDictMixin):\n    class Config(BaseConfig):\n        debug = True\n\nclass ModelA(BaseModel):\n    a: int\n\nclass ModelB(BaseModel):\n    b: int\n\n    class Config(BaseConfig):\n        debug = False\n```\n\nNext section describes all supported options to use in the config.\n\n#### `debug` config option\n\nIf you enable the `debug` option the generated code for your data class\nwill be printed.\n\n#### `omit_none` config option\n\nIf you want to skip `None` values on serialization you can add `omit_none`\nparameter to `to_dict` method using the `code_generation_options` list:\n\n```python\nfrom dataclasses import dataclass\nfrom typing import Optional\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.config import BaseConfig, TO_DICT_ADD_OMIT_NONE_FLAG\n\n@dataclass\nclass Inner(DataClassDictMixin):\n    x: int = None\n    # \"x\" won't be omitted since there is no TO_DICT_ADD_OMIT_NONE_FLAG here\n\n@dataclass\nclass Model(DataClassDictMixin):\n    x: Inner\n    a: int = None\n    b: str = None  # will be omitted\n\n    class Config(BaseConfig):\n        code_generation_options = [TO_DICT_ADD_OMIT_NONE_FLAG]\n\nModel(x=Inner(), a=1).to_dict(omit_none=True)  # {'x': {'x': None}, 'a': 1}\n```\n\n#### `serialization_strategy` config option\n\nYou can register custom `SerializationStrategy`, `serialize` and `deserialize`\nmethods for specific types just in one place. It could be configured using\na dictionary with types as keys. The value could be either a\n`SerializationStrategy` instance or a dictionary with `serialize` and\n`deserialize` values with the same meaning as in the\n[field options](#field-options).\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime, date\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.config import BaseConfig\nfrom mashumaro.types import SerializationStrategy\n\nclass FormattedDateTime(SerializationStrategy):\n    def __init__(self, fmt):\n        self.fmt = fmt\n\n    def serialize(self, value: datetime) -> str:\n        return value.strftime(self.fmt)\n\n    def deserialize(self, value: str) -> datetime:\n        return datetime.strptime(value, self.fmt)\n\n@dataclass\nclass DataClass(DataClassDictMixin):\n\n    datetime: datetime\n    date: date\n\n    class Config(BaseConfig):\n        serialization_strategy = {\n            datetime: FormattedDateTime(\"%Y\"),\n            date: {\n                # you can use specific str values for datetime here as well\n                \"deserialize\": \"pendulum\",\n                \"serialize\": date.isoformat,\n            },\n        }\n\ninstance = DataClass.from_dict({\"datetime\": \"2021\", \"date\": \"2021\"})\n# DataClass(datetime=datetime.datetime(2021, 1, 1, 0, 0), date=Date(2021, 1, 1))\ndictionary = instance.to_dict()\n# {'datetime': '2021', 'date': '2021-01-01'}\n```\n\n### Serialization hooks\n\nIn some cases you need to prepare input / output data or do some extraordinary\nactions at different stages of the deserialization / serialization lifecycle.\nYou can do this with different types of hooks.\n\n#### Before deserialization\n\nFor doing something with a dictionary that will be passed to deserialization\nyou can use `__pre_deserialize__` class method:\n\n```python\n@dataclass\nclass A(DataClassJSONMixin):\n    abc: int\n\n    @classmethod\n    def __pre_deserialize__(cls, d: Dict[Any, Any]) -> Dict[Any, Any]:\n        return {k.lower(): v for k, v in d.items()}\n\nprint(DataClass.from_dict({\"ABC\": 123}))    # DataClass(abc=123)\nprint(DataClass.from_json('{\"ABC\": 123}'))  # DataClass(abc=123)\n```\n\n#### After deserialization\n\nFor doing something with a dataclass instance that was created as a result\nof deserialization you can use `__post_deserialize__` class method:\n\n```python\n@dataclass\nclass A(DataClassJSONMixin):\n    abc: int\n\n    @classmethod\n    def __post_deserialize__(cls, obj: 'A') -> 'A':\n        obj.abc = 456\n        return obj\n\nprint(DataClass.from_dict({\"abc\": 123}))    # DataClass(abc=456)\nprint(DataClass.from_json('{\"abc\": 123}'))  # DataClass(abc=456)\n```\n\n#### Before serialization\n\nFor doing something before serialization you can use `__pre_serialize__`\nmethod:\n\n```python\n@dataclass\nclass A(DataClassJSONMixin):\n    abc: int\n    counter: ClassVar[int] = 0\n\n    def __pre_serialize__(self) -> 'A':\n        self.counter += 1\n        return self\n\nobj = DataClass(abc=123)\nobj.to_dict()\nobj.to_json()\nprint(obj.counter)  # 2\n```\n\n#### After serialization\n\nFor doing something with a dictionary that was created as a result of\nserialization you can use `__post_serialize__` method:\n\n```python\n@dataclass\nclass A(DataClassJSONMixin):\n    user: str\n    password: str\n\n    def __post_serialize__(self, d: Dict[Any, Any]) -> Dict[Any, Any]:\n        d.pop('password')\n        return d\n\nobj = DataClass(user=\"name\", password=\"secret\")\nprint(obj.to_dict())  # {\"user\": \"name\"}\nprint(obj.to_json())  # '{\"user\": \"name\"}'\n```\n\nTODO\n--------------------------------------------------------------------------------\n\n* add optional validation\n* write custom useful types such as URL, Email etc",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fatal1ty/mashumaro",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mashumaro",
    "package_url": "https://pypi.org/project/mashumaro/",
    "platform": "all",
    "project_url": "https://pypi.org/project/mashumaro/",
    "project_urls": {
      "Homepage": "https://github.com/Fatal1ty/mashumaro"
    },
    "release_url": "https://pypi.org/project/mashumaro/2.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Fast serialization framework on top of dataclasses",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16835627,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35bbc97642c9ecf6eea4a45abe3190036a1afdbcb8e095a036489e13055d23a8",
        "md5": "c58be972047834b41488fcc04ae5b702",
        "sha256": "ade42256bdf8dc9fe3c65a89645151c263719efd0d9463660329415caa79fcd2"
      },
      "downloads": -1,
      "filename": "mashumaro-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c58be972047834b41488fcc04ae5b702",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 26191,
      "upload_time": "2021-03-11T20:13:29",
      "upload_time_iso_8601": "2021-03-11T20:13:29.587492Z",
      "url": "https://files.pythonhosted.org/packages/35/bb/c97642c9ecf6eea4a45abe3190036a1afdbcb8e095a036489e13055d23a8/mashumaro-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}