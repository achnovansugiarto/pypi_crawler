{
  "info": {
    "author": "Alexander Tikhonov",
    "author_email": "random.gauss@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# mashumaro (マシュマロ)\n\n> **mashumaro** is a fast and well tested serialization framework on top of dataclasses.\n\n[![Build Status](https://travis-ci.org/Fatal1ty/mashumaro.svg?branch=master)](https://travis-ci.org/Fatal1ty/mashumaro)\n[![Coverage Status](https://coveralls.io/repos/github/Fatal1ty/mashumaro/badge.svg?branch=master)](https://coveralls.io/github/Fatal1ty/mashumaro?branch=master)\n[![Latest Version](https://img.shields.io/pypi/v/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![Python Version](https://img.shields.io/pypi/pyversions/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\nWhen using dataclasses, you often need to dump and load objects according to\nthe described scheme.\nThis framework not only adds this ability to serialize in different formats,\nbut also makes **serialization rapidly**.\n\nTable of contens\n--------------------------------------------------------------------------------\n* [Installation](#installation)\n* [Supported serialization formats](#supported-serialization-formats)\n* [Supported field types](#supported-field-types)\n* [Usage example](#usage-example)\n* [How does it work?](#how-does-it-work)\n* [API](#api)\n* [User defined classes](#user-defined-classes)\n\nInstallation\n--------------------------------------------------------------------------------\n\nUse pip to install:\n```shell\n$ pip install mashumaro\n```\n\nSupported serialization formats\n--------------------------------------------------------------------------------\n\nThis framework adds methods for dumping to and loading from the\nfollowing formats:\n\n* plain dict\n* json\n* yaml\n* msgpack\n\nPlain dict can be useful when you need to pass a dict object to a\nthird-party library, such as a client for MongoDB.\n\nSupported field types\n--------------------------------------------------------------------------------\n\nThere is support for generic types from the standard *typing* module:\n* List\n* Tuple\n* Set\n* FrozenSet\n* Deque\n* Dict\n* Mapping\n* MutableMapping\n* ChainMap\n* Sequence\n\nfor special primitives from the *typing* module:\n* Optional\n* Any\n\nfor enumerations based on classes from the standard *enum* module:\n* Enum\n* IntEnum\n* Flag\n* IntFlag\n\nfor common built-in types:\n* int\n* float\n* bool\n* str\n* bytes\n* bytearray\n\nfor built-in datetime oriented types:\n* datetime\n* date\n* time\n* timedelta\n\nfor other less popular built-in types:\n* uuid.UUID\n* decimal.Decimal\n* fractions.Fraction\n\nfor specific types like *NoneType*, nested dataclasses itself and\neven [user defined classes](#user-defined-classes).\n\n\nUsage example\n--------------------------------------------------------------------------------\n\n```python\nfrom enum import Enum\nfrom typing import Set\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassJSONMixin\n\nclass PetType(Enum):\n    CAT = 'CAT'\n    MOUSE = 'MOUSE'\n\n@dataclass\nclass Pet(DataClassJSONMixin):\n    name: str\n    age: int\n    pet_type: PetType\n\n@dataclass\nclass Person(DataClassJSONMixin):\n    first_name: str\n    second_name: str\n    age: int\n    pets: Set[Pet]\n\n\ntom = Pet(name='Tom', age=5, pet_type=PetType.CAT)\njerry = Pet(name='Jerry', age=3, pet_type=PetType.MOUSE)\njohn = Person(first_name='John', second_name='Smith', age=18, pets={tom, jerry})\n\ndump = john.to_json()\nperson = Person.from_json(dump)\n# person == john\n\nPet.from_json('{\"name\": \"Tom\", \"age\": 5, \"pet_type\": \"CAT\"}')\n# Pet(name='Tom', age=5, pet_type=<PetType.CAT: 'CAT'>)\n```\n\nHow does it work?\n--------------------------------------------------------------------------------\n\nThis framework works by taking the schema of the data and generating a\nspecific parser and builder for exactly that schema.\nThis is much faster than inspection of field types on every call of parsing or\nbuilding at runtime.\n\nAPI\n--------------------------------------------------------------------------------\n\nMashumaro provides a couple of mixins for each format.\n\n#### `DataClassDictMixin.to_dict(use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a dictionary from dataclass object based on the dataclass schema provided.\nOptions include:\n```python\nuse_bytes: False     # False - convert bytes/bytearray objects to base64 encoded string, True - keep untouched\nuse_enum: False      # False - convert enum objects to enum values, True - keep untouched\nuse_datetime: False  # False - convert datetime oriented objects to ISO 8601 formatted string, True - keep untouched\n```\n\n#### `DataClassDictMixin.from_dict(data: Mapping, use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a new object from dict object based on the dataclass schema provided.\nOptions include:\n```python\nuse_bytes: False     # False - load bytes/bytearray objects from base64 encoded string, True - keep untouched\nuse_enum: False      # False - load enum objects from enum values, True - keep untouched\nuse_datetime: False  # False - load datetime oriented objects from ISO 8601 formatted string, True - keep untouched\n```\n\n#### `DataClassJsonMixin.to_json(encoder: Optional[Encoder], dict_params: Optional[Mapping], **encoder_kwargs)`\n\nMake a JSON formatted string from dataclass object based on the dataclass\nschema provided. Options include:\n```\nencoder        # function called for json encoding, defaults to json.dumps\ndict_params    # dictionary of parameter values passed underhood to `to_dict` function\nencoder_kwargs # keyword arguments for encoder function\n```\n\n#### `DataClassJsonMixin.from_json(data: str, decoder: Optional[Decoder], dict_params: Optional[Mapping], **decoder_kwargs)`\n\nMake a new object from JSON formatted string based on the dataclass schema\nprovided. Options include:\n```\ndecoder        # function called for json decoding, defaults to json.loads\ndict_params    # dictionary of parameter values passed underhood to `from_dict` function\ndecoder_kwargs # keyword arguments for decoder function\n```\n\n#### `DataClassMessagePackMixin.to_msgpack()`\n\nMake a MessagePack formatted bytes object from dataclass object based on the\ndataclass schema provided.\n\n#### `DataClassMessagePackMixin.from_msgpack(data: bytes)`\n\nMake a new object from MessagePack formatted data based on the\ndataclass schema provided.\n\n#### `DataClassYAMLMixin.to_yaml()`\n\nMake an YAML formatted bytes object from dataclass object based on the\ndataclass schema provided.\n\n#### `DataClassYAMLMixin.from_yaml(data: bytes)`\n\nMake a new object from YAML formatted data based on the\ndataclass schema provided.\n\nUser defined classes\n--------------------------------------------------------------------------------\n\nYou can define and use custom classes with *mashumaro*. There are two options\nfor customization. The first one is useful when you already have the separate\ncustom class and you want to serialize instances of it with *mashumaro*.\nAll what you need is to implement *SerializableType* interface:\n\n```python\nfrom typing import Dict\nfrom datetime import datetime\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.types import SerializableType\n\nclass DateTime(datetime, SerializableType):\n    def _serialize(self) -> Dict[str, int]:\n        return {\n            \"year\": self.year,\n            \"month\": self.month,\n            \"day\": self.day,\n            \"hour\": self.hour,\n            \"minute\": self.minute,\n            \"second\": self.second,\n        }\n\n    @classmethod\n    def _deserialize(cls, value: Dict[str, int]) -> 'DateTime':\n        return DateTime(\n            year=value['year'],\n            month=value['month'],\n            day=value['day'],\n            hour=value['hour'],\n            minute=value['minute'],\n            second=value['second'],\n        )\n\n\n@dataclass\nclass Holiday(DataClassDictMixin):\n    when: DateTime = DateTime.now()\n\n\nnew_year = Holiday(when=DateTime(2019, 1, 1, 12))\ndictionary = new_year.to_dict()\n# {'x': {'year': 2019, 'month': 1, 'day': 1, 'hour': 0, 'minute': 0, 'second': 0}}\nassert Holiday.from_dict(dictionary) == new_year\n```\n\nThe second option is useful when you want to change the serialization behaviour\nfor a class depending on some defined parameters. For this case you can create\nthe special class implementing *SerializationStrategy* interface:\n\n```python\nfrom datetime import datetime\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassDictMixin\nfrom mashumaro.types import SerializationStrategy\n\nclass FormattedDateTime(SerializationStrategy):\n    def __init__(self, fmt):\n        self.fmt = fmt\n\n    def _serialize(self, value: datetime) -> str:\n        return value.strftime(self.fmt)\n\n    def _deserialize(self, value: str) -> datetime:\n        return datetime.strptime(value, self.fmt)\n\n\n@dataclass\nclass DateTimeFormats(DataClassDictMixin):\n    short: FormattedDateTime(fmt='%d%m%Y%H%M%S') = datetime.now()\n    verbose: FormattedDateTime(fmt='%A %B %d, %Y, %H:%M:%S') = datetime.now()\n\n\nformats = DateTimeFormats(\n    short=datetime(2019, 1, 1, 12),\n    verbose=datetime(2019, 1, 1, 12),\n)\ndictionary = formats.to_dict()\n# {'short': '01012019120000', 'verbose': 'Tuesday January 01, 2019, 12:00:00'}\nassert DateTimeFormats.from_dict(dictionary) == formats\n```\n\nTODO\n--------------------------------------------------------------------------------\n\n* write benchmarks\n* add optional validation\n* add Union support (try to match types on each call)\n* write custom useful types such as URL, Email etc\n* write documentation",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Fatal1ty/mashumaro",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mashumaro",
    "package_url": "https://pypi.org/project/mashumaro/",
    "platform": "all",
    "project_url": "https://pypi.org/project/mashumaro/",
    "project_urls": {
      "Homepage": "https://github.com/Fatal1ty/mashumaro"
    },
    "release_url": "https://pypi.org/project/mashumaro/1.6.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Fast serialization framework on top of dataclasses",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16835627,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fad313dd3b046a44f200320c8fa55bef874072ee79bdd0b37cf47956afdd7c87",
        "md5": "961c75a5ebbb0998c5a3d68be9aafa1a",
        "sha256": "f93a014c111bd44ef8c5a3fbc7f5eac4641191f9c9a3a5507257045ad48f0b36"
      },
      "downloads": -1,
      "filename": "mashumaro-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "961c75a5ebbb0998c5a3d68be9aafa1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12769,
      "upload_time": "2019-02-28T15:19:38",
      "upload_time_iso_8601": "2019-02-28T15:19:38.488820Z",
      "url": "https://files.pythonhosted.org/packages/fa/d3/13dd3b046a44f200320c8fa55bef874072ee79bdd0b37cf47956afdd7c87/mashumaro-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}