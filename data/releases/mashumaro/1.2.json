{
  "info": {
    "author": "Alexander Tikhonov",
    "author_email": "random.gauss@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# mashumaro (マシュマロ)\n\n> **mashumaro** is a fast and well tested serialization framework on top of dataclasses.\n\n[![Build Status](https://travis-ci.org/Fatal1ty/mashumaro.svg?branch=master)](https://travis-ci.org/Fatal1ty/mashumaro)\n[![Coverage Status](https://coveralls.io/repos/github/Fatal1ty/mashumaro/badge.svg?branch=master)](https://coveralls.io/github/Fatal1ty/mashumaro?branch=master)\n[![Requirements Status](https://requires.io/github/Fatal1ty/mashumaro/requirements.svg?branch=master)](https://requires.io/github/Fatal1ty/mashumaro/requirements/?branch=master)\n[![Latest Version](https://img.shields.io/pypi/v/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![Python Version](https://img.shields.io/pypi/pyversions/mashumaro.svg)](https://pypi.python.org/pypi/mashumaro)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\nWhen using dataclasses, you often need to dump and load objects according to the described scheme.\nThis framework not only adds this ability to serialize in different formats, but also makes **serialization rapidly**.\n\nTable of contens\n--------------------------------------------------------------------------------\n* [Installation](#installation)\n* [Supported serialization formats](#supported-serialization-formats)\n* [Supported field types](#supported-field-types)\n* [Usage example](#usage-example)\n* [How does it work?](#how-does-it-work)\n* [API](#api)\n\nInstallation\n--------------------------------------------------------------------------------\n\nUse pip to install:\n```shell\n$ pip install mashumaro\n```\n\nSupported serialization formats\n--------------------------------------------------------------------------------\n\nThis framework adds methods for dumping to and loading from the following formats:\n\n* plain dict\n* json\n* yaml\n* msgpack\n\nPlain dict can be useful when you need to pass a dict object to a third-party library, such as a client for MongoDB.\n\nSupported field types\n--------------------------------------------------------------------------------\n\nThere is support for generic types from the standard *typing* module:\n* List\n* Tuple\n* Set\n* FrozenSet\n* Deque\n* Dict\n* Mapping\n* MutableMapping\n* ChainMap\n* Sequence\n\nfor special primitives from the *typing* module:\n* Optional\n* Any\n\nfor enumerations based on classes from the standard *enum* module:\n* Enum\n* IntEnum\n* Flag\n* IntFlag\n\nfor common built-in types:\n* int\n* float\n* bool\n* str\n* bytes\n* bytearray\n\nfor built-in datetime oriented types:\n* datetime\n* date\n* time\n* timedelta\n\nfor other less popular built-in types:\n* uuid.UUID\n\nfor other specific types like *NoneType* and for nested dataclasses itself.\n\nUsage example\n--------------------------------------------------------------------------------\n\n```python\nfrom enum import Enum\nfrom typing import Set\nfrom dataclasses import dataclass\nfrom mashumaro import DataClassJSONMixin\n\nclass PetType(Enum):\n    CAT = 'CAT'\n    MOUSE = 'MOUSE'\n\n@dataclass\nclass Pet(DataClassJSONMixin):\n    name: str\n    age: int\n    pet_type: PetType\n\n@dataclass\nclass Person(DataClassJSONMixin):\n    first_name: str\n    second_name: str\n    age: int\n    pets: Set[Pet]\n\n\ntom = Pet(name='Tom', age=5, pet_type=PetType.CAT)\njerry = Pet(name='Jerry', age=3, pet_type=PetType.MOUSE)\njohn = Person(first_name='John', second_name='Smith', age=18, pets={tom, jerry})\n\ndump = john.to_json()\nperson = Person.from_json(dump)\n# person == john\n\nPet.from_json('{\"name\": \"Tom\", \"age\": 5, \"pet_type\": \"CAT\"}')\n# Pet(name='Tom', age=5, pet_type=<PetType.CAT: 'CAT'>)\n```\n\nHow does it work?\n--------------------------------------------------------------------------------\n\nThis framework works by taking the schema of the data and generating a specific parser and builder for exactly that schema.\nThis is much faster than inspection of field types on every call of parsing or building at runtime.\n\nAPI\n--------------------------------------------------------------------------------\n\nMashumaro provides a couple of mixins for each format.\n\n#### `DataClassJsonMixin.to_json()`\n\nMake a JSON formatted string from dataclass object based on the dataclass schema provided.\n\n#### `DataClassJsonMixin.from_json(data: str)`\n\nMake a new object from JSON formatted string based on the dataclass schema provided.\n\n#### `DataClassMessagePackMixin.to_msgpack()`\n\nMake a MessagePack formatted bytes object from dataclass object based on the dataclass schema provided.\n\n#### `DataClassMessagePackMixin.from_msgpack(data: bytes)`\n\nMake a new object from MessagePack formatted data based on the dataclass schema provided.\n\n#### `DataClassYAMLMixin.to_yaml()`\n\nMake an YAML formatted bytes object from dataclass object based on the dataclass schema provided.\n\n#### `DataClassYAMLMixin.from_yaml(data: bytes)`\n\nMake a new object from YAML formatted data based on the dataclass schema provided.\n\n#### `DataClassDictMixin.to_dict(use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a dictionary from dataclass object based on the dataclass schema provided. Options include:\n```python\nuse_bytes: False     # False - convert bytes/bytearray objects to base64 encoded string, True - keep untouched\nuse_enum: False      # False - convert enum objects to enum values, True - keep untouched\nuse_datetime: False  # False - convert datetime oriented objects to ISO 8601 formatted string, True - keep untouched\n```\n\n#### `DataClassDictMixin.from_dict(data: Mapping, use_bytes: bool, use_enum: bool, use_datetime: bool)`\n\nMake a new object from dict object based on the dataclass schema provided. Options include:\n```python\nuse_bytes: False     # False - load bytes/bytearray objects from base64 encoded string, True - keep untouched\nuse_enum: False      # False - load enum objects from enum values, True - keep untouched\nuse_datetime: False  # False - load datetime oriented objects from ISO 8601 formatted string, True - keep untouched\n```\n\n\nTODO\n--------------------------------------------------------------------------------\n\n* write benchmarks\n* add parameters to json serialization methods\n* add optional validation\n* add Union support (try to match types on each call)\n* write custom useful types such as URL, Email etc\n* write documentation",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mashumaro",
    "package_url": "https://pypi.org/project/mashumaro/",
    "platform": "all",
    "project_url": "https://pypi.org/project/mashumaro/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mashumaro/1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Fast serialization framework on top of dataclasses",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16835627,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5138d6a8245e0de315b73812d27d4e07dae9a474ddf1f7f2d93b4da76666eb14",
        "md5": "5e15afa86771eac769560fbc516d7108",
        "sha256": "751369b07745dc91e2ddd70c8a8c37bfe256aa3ca14073fcecda1eaf0569d903"
      },
      "downloads": -1,
      "filename": "mashumaro-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5e15afa86771eac769560fbc516d7108",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10078,
      "upload_time": "2018-12-12T15:16:23",
      "upload_time_iso_8601": "2018-12-12T15:16:23.907462Z",
      "url": "https://files.pythonhosted.org/packages/51/38/d6a8245e0de315b73812d27d4e07dae9a474ddf1f7f2d93b4da76666eb14/mashumaro-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}