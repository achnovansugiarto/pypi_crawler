{
  "info": {
    "author": "Pinax Team",
    "author_email": "developers@pinaxproject.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "=====\nUsage\n=====\n\nFirst, add \"mailer\" to your ``INSTALLED_APPS`` in your settings.py.\nRun ``./manage.py migrate`` to install models.\n\nUsing EMAIL_BACKEND\n===================\n\nThis is the preferred and easiest way to use django-mailer.\n\nTo automatically switch all your mail to use django-mailer, first set\nEMAIL_BACKEND::\n\n    EMAIL_BACKEND = \"mailer.backend.DbBackend\"\n\nIf you were previously using a non-default EMAIL_BACKEND, you need to configure\nthe MAILER_EMAIL_BACKEND setting, so that django-mailer knows how to actually send\nthe mail::\n\n    MAILER_EMAIL_BACKEND = \"your.actual.EmailBackend\"\n\nNow, just use the normal `Django mail functions\n<https://docs.djangoproject.com/en/stable/topics/email/>`_ for sending email. These\nfunctions will store mail on a queue in the database, which must be sent as\nbelow.\n\nExplicitly putting mail on the queue\n====================================\n\nIf you don't want to send all email through django-mailer, you can send mail\nusing ``mailer.send_mail``, which has the same signature as Django's\n``send_mail`` function.\n\nYou can also do the following::\n\n    # favour django-mailer but fall back to django.core.mail\n    from django.conf import settings\n\n    if \"mailer\" in settings.INSTALLED_APPS:\n        from mailer import send_mail\n    else:\n        from django.core.mail import send_mail\n\nand then just call send_mail like you normally would in Django::\n\n    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)\n\nThere is also a convenience function ``mailer.send_html_mail`` for creating HTML\n(this function is **not** in Django)::\n\n    send_html_mail(subject, message_plaintext, message_html, settings.DEFAULT_FROM_EMAIL, recipients)\n\nAdditionally you can send all the admins as specified in the ``ADMIN``\nsetting by calling::\n\n    mail_admins(subject, message_body)\n\nor all managers as defined in the ``MANAGERS`` setting by calling::\n\n    mail_managers(subject, message_body)\n\nClear queue with command extensions\n===================================\n\nWith mailer in your INSTALLED_APPS, there will be three new manage.py commands\nyou can run:\n\n* ``send_mail`` will clear the current message queue. If there are any\n  failures, they will be marked deferred and will not be attempted again by\n  ``send_mail``.\n\n* ``retry_deferred`` will move any deferred mail back into the normal queue\n  (so it will be attempted again on the next ``send_mail``).\n\n* ``purge_mail_log`` will remove old successful message logs from the database, to prevent it from filling up your database.\n  Use the ``-r failure`` option to remove only failed message logs instead, or ``-r all`` to remove them all.\n\n\nYou may want to set these up via cron to run regularly::\n\n\n    *       * * * * (/path/to/your/python /path/to/your/manage.py send_mail >> ~/cron_mail.log 2>&1)\n    0,20,40 * * * * (/path/to/your/python /path/to/your/manage.py retry_deferred >> ~/cron_mail_deferred.log 2>&1)\n    0 0 * * * (/path/to/your/python /path/to/your/manage.py purge_mail_log 7 >> ~/cron_mail_purge.log 2>&1)\n\nFor use in Pinax, for example, that might look like::\n\n    * * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py send_mail >> $PINAX/cron_mail.log 2>&1)\n    0,20,40 * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py retry_deferred >> $PINAX/cron_mail_deferred.log 2>&1)\n    0 0 * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py purge_mail_log 7 >> $PINAX/cron_mail_purge.log 2>&1)\n\nThis attempts to send mail every minute with a retry on failure every 20\nminutes, and purges the mail log for entries older than 7 days.\n\n``manage.py send_mail`` uses a lock file in case clearing the queue takes\nlonger than the interval between calling ``manage.py send_mail``.\n\nNote that if your project lives inside a virtualenv, you also have to execute\nthis command from the virtualenv. The same, naturally, applies also if you're\nexecuting it with cron. The `Pinax documentation`_ explains that in more\ndetails.\n\n.. _pinax documentation: http://pinaxproject.com/docs/dev/deployment.html#sending-mail-and-notices\n\nControlling the delivery process\n================================\n\nIf you wish to have a finer control over the delivery process, which defaults\nto deliver everything in the queue, you can use the following 3 variables\n(default values shown)::\n\n    MAILER_EMAIL_MAX_BATCH = None  # integer or None\n    MAILER_EMAIL_MAX_DEFERRED = None  # integer or None\n    MAILER_EMAIL_THROTTLE = 0  # passed to time.sleep()\n\nThese control how many emails are sent successfully before stopping the\ncurrent run `MAILER_EMAIL_MAX_BATCH`, after how many failed/deferred emails\nshould it stop `MAILER_EMAIL_MAX_DEFERRED` and how much time to wait between\neach email `MAILER_EMAIL_THROTTLE`.\n\nUnprocessed emails will be evaluated in the following delivery iterations.\n\nError handling\n==============\n\ndjango-mailer comes with a default error handler\n``mailer.engine.handle_delivery_exception``.\n\nIt marks the related message as deferred for any of these exceptions:\n\n- ``smtplib.SMTPAuthenticationError``\n- ``smtplib.SMTPDataError``\n- ``smtplib.SMTPRecipientsRefused``\n- ``smtplib.SMTPSenderRefused``\n- ``socket.error``\n\nAny other exceptions is re-raised.\nThat is done for backwords-compatiblity as well as for flexibility:\nwe would otherwise have to maintain an extensive and changing\nlist of exception types, which does not scale, and you get\nthe chance to do error handling that fits your environment like a glove.\n\nWhen the default behavior does not fit your environment, you can specify your\nown custom delivery error handler through setting ``MAILER_ERROR_HANDLER``.\nThe value should be a string for use with Django's ``import_string``,\nthe default is ``\"mailer.engine.handle_delivery_exception\"``.\n\nYour handler is passed three arguments, in order:\n\n- ``connection`` — the backend connection instance that failed delivery\n- ``message`` — the ``Message`` instance that failed delivery\n- ``exc`` — the exception instance raised by the mailer backend\n\nYour handler should return a 2-tuple of:\n\n1. a connection instance (or ``None`` to cause a new connection to be created)\n2. a string denoting the action taken by the handler,\n   either ``\"sent\"`` or ``\"deferred\"`` precisely\n\nFor an example of a custom error handler::\n\n    def my_handler(connection, message, exc):\n        if isinstance(exc, SomeDeliveryException):\n            # trying to re-send this very message desparately\n            # (if you have good reason to)\n            [..]\n            status = 'sent'\n        elif isinstance(exc, SomeOtherException):\n            message.defer()\n            connection = None  # i.e. ask for a new connection\n            status = 'deferred'\n        else:\n            six.reraise(*sys.exc_info())\n\n        return connection, status\n\nOther settings\n==============\n\nIf you need to be able to control where django-mailer puts its lock file (used\nto ensure mail is not sent twice), you can set ``MAILER_LOCK_PATH`` to a full\nabsolute path to the file to be used as a lock. The extension \".lock\" will be\nadded. The process running ``send_mail`` needs to have permissions to create and\ndelete this file, and others in the same directory. With the default value of\n``None`` django-mailer will use a path in current working directory.\n\nIf you need to disable the file-based locking, you can set the\n``MAILER_USE_FILE_LOCK`` setting to ``False``.\n\nIf you need to change the batch size used by django-mailer to save messages in\n``mailer.backend.DbBackend``, you can set ``MAILER_MESSAGES_BATCH_SIZE`` to a\nvalue more suitable for you. This value, which defaults to `None`, will be passed to\n`Django's bulk_create method <https://docs.djangoproject.com/en/stable/ref/models/querysets/#bulk-create>`_\nas the `batch_size` parameter.\n\nUsing the DontSendEntry table\n=============================\n\ndjango-mailer creates a ``DontSendEntry`` model, which is used to filter out\nrecipients from messages being created.\n\nBut beware, it's actually only used when directly sending messages through\nmailer, not when mailer is used as an alternate ``EMAIL_BACKEND`` for Django.\nAlso, even if recipients become empty due to this filtering, the email will be\nqueued for sending anyway. (A patch to fix these issues would be accepted)\nChange log\n==========\n\n2.1 - 2020-12-05\n----------------\n\n* The ``retry_deferred`` and ``send_mail`` commands rely on the log level set\n  in your django project now. The ``-c/--cron`` option in those commands has\n  been deprecated and the logic to configure log levels and the message\n  format has been removed.\n* Changed logging to use module specific loggers to avoid interfering\n  with other loggers.\n* Added ``MAILER_USE_FILE_LOCK`` setting to allow disabling file based locking.\n* Added ``-r`` option to ``purge_mail_log`` management command. Thanks julienc91\n* Fixed deprecation warnings on Django 3.1\n* Use cached DNS_NAME for performance\n* Added ability to override the default error handler via the ``MAILER_ERROR_HANDLER``\n  settings key\n\n2.0.1 - 2020-03-01\n------------------\n\n* Fixed issue with migration that some people experienced (see `PR 118\n  <https://github.com/pinax/django-mailer/pull/118>`_)\n\n2.0 - 2019-09-23\n----------------\n\n* Django 3.0 support\n* Dropped support for old Django versions (before 1.11)\n* Changed DB ``priority`` field to an integer, instead of text field container an integer\n* Multi-process safety for sending emails via database row-level locking.\n\n  Previously, there was a file-system based lock to ensure that multiple\n  processes were not attempting to send the mail queue, to stop multiple sending\n  of the same email. However, this mechanism only works if all processes that\n  might be attempting to do this are on the same machine with access to the same\n  file-system.\n\n  Now, in addition to this file lock, we use transactions and row-level locking\n  in the database when attempting to send a message, which guarantees that only\n  one process can send the message. In addition, for databases that support\n  ``NOWAIT`` with ``SELECT FOR UPDATE``, such as PostgreSQL, if multiple\n  processes attempt to send the mail queue at the same time, the work should be\n  distributed between them (rather than being done by only one process).\n\n  A negative consequence is that **SQLite support is degraded**: due to the way\n  it implements locking and our use of transactions when sending the email\n  queue, you can get exceptions in other processes that are trying to add items\n  to the queue. Use of SQLite with django-mailer is **not recommended**.\n\n* ``retry_deferred`` command has also been updated to be simpler and work\n  correctly for multiple processes.\n\n* Dropped some backwards compat support for Django < 1.8. If you are upgrading\n  from a version of Django before 1.8, you should install a version of\n  django-mailer < 2.0, do ``send_all`` to flush the queue, then upgrade\n  django-mailer to 2.0 or later.\n\n1.2.6 - 2019-04-03\n------------------\n\n* Official Django 2.1 and 2.2 support.\n* Don't close DB connection in management commands.\n  This is unnecessary with modern Django.\n\n1.2.5\n-----\n\n* Fixed packaging file permission problems.\n* Added Japanese locale (thanks msk7777)\n\n1.2.4\n-----\n\n* Django 2.0 support.\n\n1.2.3\n-----\n\n* Fixed crasher with models ``__str__``\n\n1.2.2\n-----\n\n* Django 1.10 support.\n* Fixed reprs for Message and MessageLog.\n\n1.2.1\n-----\n\n* More helpful admin for Message and MessageLog\n* Handle exceptions from really old Django versions\n\n1.2.0\n-----\n\n* Save the ``Message-ID`` header on ``Message`` explicitly to enable finding\n  emails using this identifier.\n\n  This includes a database schema migration.\n\n\n1.1.0\n-----\n\n* Deprecated calling ``send_mail`` and ``send_html_mail`` using ``priority``\n  kwargs ``\"high\"``, ``\"medium\"``, and ``\"low\"``. Instead you should use\n  ``PRIORITY_HIGH``, ``PRIORITY_MEDIUM`` and ``PRIORITY_LOW`` from\n  ``mailer.models``.\n\n* Fixed bug with migrations for Django 1.7, which wanted to create a migration\n  to 'fix' the EmailField length back down to 75 instead of 254.\n\n\n1.0.1\n-----\n\n* Included migrations - for both South and Django 1.7 native migrations.\n\n  Note:\n\n  * If you use South, you will need at least South 1.0\n  * You will need to use '--fake' or '--fake-initial' on existing installations.\n\n  These migrations were supposed to be in 1.0.0 but were omitted due to a\n  packaging error.\n\n1.0.0\n-----\n\n* Throttling of email sending\n* Django 1.8 support\n* Admin tweaks and improvements\n* Various other fixes, especially from Renato Alves <alves.rjc@gmail.com> - thank you!\n\n0.1.0\n-----\n\n* First PyPI version\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/pinax/django-mailer/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mailer",
    "package_url": "https://pypi.org/project/django-mailer/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-mailer/",
    "project_urls": {
      "Homepage": "http://github.com/pinax/django-mailer/"
    },
    "release_url": "https://pypi.org/project/django-mailer/2.1/",
    "requires_dist": [
      "Django (>=1.11)",
      "lockfile (>=0.8)",
      "six"
    ],
    "requires_python": "",
    "summary": "A reusable Django app for queuing the sending of email",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13151601,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32ee038202cbc145fc77922e5b89d2be93a1861816f2c87b207b4ef84d5a6dab",
        "md5": "21edb37586b1d00c66947fa04a5cc8aa",
        "sha256": "a79914dbf87c431aca6888f4d453136e3ec2162aea56cd05972996f4fc36e5bc"
      },
      "downloads": -1,
      "filename": "django_mailer-2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21edb37586b1d00c66947fa04a5cc8aa",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23252,
      "upload_time": "2020-12-05T10:56:54",
      "upload_time_iso_8601": "2020-12-05T10:56:54.030208Z",
      "url": "https://files.pythonhosted.org/packages/32/ee/038202cbc145fc77922e5b89d2be93a1861816f2c87b207b4ef84d5a6dab/django_mailer-2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a60a77aaa31580d8e6964e1391638bf3de8a0db6f619bd6b1d7f2090fe193096",
        "md5": "8e30ba4922016862e465da15b9d9b560",
        "sha256": "2013e723bcc7c34143c8ecceaaa1b58918856c3ad1d9a79e27b5dd2530ef4d86"
      },
      "downloads": -1,
      "filename": "django-mailer-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8e30ba4922016862e465da15b9d9b560",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31357,
      "upload_time": "2020-12-05T10:56:55",
      "upload_time_iso_8601": "2020-12-05T10:56:55.579336Z",
      "url": "https://files.pythonhosted.org/packages/a6/0a/77aaa31580d8e6964e1391638bf3de8a0db6f619bd6b1d7f2090fe193096/django-mailer-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}