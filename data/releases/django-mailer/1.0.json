{
  "info": {
    "author": "Pinax Team",
    "author_email": "developers@pinaxproject.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3"
    ],
    "description": "=====\r\nUsage\r\n=====\r\n\r\nUsing EMAIL_BACKEND\r\n===================\r\n\r\nThis is the preferred and easiest way to use django-mailer.\r\n\r\nTo automatically switch all your mail to use django-mailer, first set\r\nEMAIL_BACKEND::\r\n\r\n    EMAIL_BACKEND = \"mailer.backend.DbBackend\"\r\n\r\nIf you were previously using a non-default EMAIL_BACKEND, you need to configure\r\nthe MAILER_EMAIL_BACKEND setting, so that django-mailer knows how to actually send\r\nthe mail::\r\n\r\n    MAILER_EMAIL_BACKEND = \"your.actual.EmailBackend\"\r\n\r\nNow, just use the normal `Django mail functions\r\n<https://docs.djangoproject.com/en/dev/topics/email/>`_ for sending email. These\r\nfunctions will store mail on a queue in the database, which must be sent as\r\nbelow.\r\n\r\nExplicitly putting mail on the queue\r\n====================================\r\n\r\nIf you don't want to send all email through django-mailer, you can send mail\r\nusing ``mailer.send_mail``, which has the same signature as Django's\r\n``send_mail`` function.\r\n\r\nYou can also do the following::\r\n\r\n    # favour django-mailer but fall back to django.core.mail\r\n    from django.conf import settings\r\n\r\n    if \"mailer\" in settings.INSTALLED_APPS:\r\n        from mailer import send_mail\r\n    else:\r\n        from django.core.mail import send_mail\r\n\r\nand then just call send_mail like you normally would in Django::\r\n\r\n    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)\r\n\r\nThere is also a convenience function ``mailer.send_html_mail`` for creating HTML\r\n(this function is **not** in Django)::\r\n\r\n    send_html_mail(subject, message_plaintext, message_html, settings.DEFAULT_FROM_EMAIL, recipients)\r\n\r\nAdditionally you can send all the admins as specified in the ``ADMIN``\r\nsetting by calling::\r\n\r\n    mail_admins(subject, message_body)\r\n\r\nor all managers as defined in the ``MANAGERS`` setting by calling::\r\n\r\n    mail_managers(subject, message_body)\r\n\r\nClear queue with command extensions\r\n===================================\r\n\r\nWith mailer in your INSTALLED_APPS, there will be two new manage.py commands\r\nyou can run:\r\n\r\n * ``send_mail`` will clear the current message queue. If there are any\r\n   failures, they will be marked deferred and will not be attempted again by\r\n   ``send_mail``.\r\n\r\n * ``retry_deferred`` will move any deferred mail back into the normal queue\r\n   (so it will be attempted again on the next ``send_mail``).\r\n\r\nYou may want to set these up via cron to run regularly::\r\n\r\n\r\n    *       * * * * (/path/to/your/python /path/to/your/manage.py send_mail >> ~/cron_mail.log 2>&1)\r\n    0,20,40 * * * * (/path/to/your/python /path/to/your/manage.py retry_deferred >> ~/cron_mail_deferred.log 2>&1)\r\n\r\nFor use in Pinax, for example, that might look like::\r\n\r\n    * * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py send_mail >> $PINAX/cron_mail.log 2>&1)\r\n    0,20,40 * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py retry_deferred >> $PINAX/cron_mail_deferred.log 2>&1)\r\n\r\nThis attempts to send mail every minute with a retry on failure every 20 minutes.\r\n\r\n``manage.py send_mail`` uses a lock file in case clearing the queue takes\r\nlonger than the interval between calling ``manage.py send_mail``.\r\n\r\nNote that if your project lives inside a virtualenv, you also have to execute\r\nthis command from the virtualenv. The same, naturally, applies also if you're\r\nexecuting it with cron. The `Pinax documentation`_ explains that in more\r\ndetails.\r\n\r\n.. _pinax documentation: http://pinaxproject.com/docs/dev/deployment.html#sending-mail-and-notices\r\n\r\n===================\r\nUsing EMAIL_BACKEND\r\n===================\r\n\r\nTo automatically switch all your mail to use django-mailer, instead of changing imports\r\nyou can also use the EMAIL_BACKEND feature that was introduced in Django 1.2. In\r\nyour settings file, you first have to set EMAIL_BACKEND::\r\n\r\n    EMAIL_BACKEND = \"mailer.backend.DbBackend\"\r\n\r\nIf you were previously using a non-default EMAIL_BACKEND, you need to configure\r\nthe MAILER_EMAIL_BACKEND setting, so that django-mailer knows how to actually send\r\nthe mail::\r\n\r\n    MAILER_EMAIL_BACKEND = \"your.actual.EmailBackend\"\r\n\r\nControlling the delivery process\r\n================================\r\n\r\nIf you wish to have a finer control over the delivery process, which defaults\r\nto deliver everything in the queue, you can use the following 3 variables\r\n(default values shown)::\r\n\r\n    MAILER_EMAIL_MAX_BATCH = None  # integer or None\r\n    MAILER_EMAIL_MAX_DEFERRED = None  # integer or None\r\n    MAILER_EMAIL_THROTTLE = 0  # passed to time.sleep()\r\n\r\nThese control how many emails are sent successfully before stopping the\r\ncurrent run `MAILER_EMAIL_MAX_BATCH`, after how many failed/deferred emails\r\nshould it stop `MAILER_EMAIL_MAX_DEFERRED` and how much time to wait between\r\neach email `MAILER_EMAIL_THROTTLE`.\r\n\r\nUnprocessed emails will be evaluated in the following delivery iterations.\r\n\r\nChange log\r\n\r\n1.0.0\r\n-----\r\n\r\n* Throttling of email sending\r\n* Django 1.8 support\r\n* Admin tweaks and improvements\r\n* Included migrations - for both South and Django 1.7 native migrations.\r\n\r\n  Note:\r\n\r\n  * If you use South, you will need at least South 1.0\r\n  * You will need to use '--fake' or '--fake-initial' on existing installations.\r\n\r\n* Various other fixes, especially from Renato Alves <alves.rjc@gmail.com> - thank you!\r\n\r\n0.1.0\r\n-----\r\n\r\n* First PyPI version",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/pinax/django-mailer/",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-mailer",
    "package_url": "https://pypi.org/project/django-mailer/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-mailer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/pinax/django-mailer/"
    },
    "release_url": "https://pypi.org/project/django-mailer/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A reusable Django app for queuing the sending of email",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13151601,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "459a63879839c0519c09d79215b99e39d3f56f0690a05b7ee7ff8825c4389285",
        "md5": "b3181d3811d280ff3a84505ef6c4ae46",
        "sha256": "1cdcf83f2f367e81d3dde622e4d6780672f4cbf7174c624db3d657b957c05870"
      },
      "downloads": -1,
      "filename": "django_mailer-1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3181d3811d280ff3a84505ef6c4ae46",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 19112,
      "upload_time": "2015-07-03T12:06:10",
      "upload_time_iso_8601": "2015-07-03T12:06:10.138199Z",
      "url": "https://files.pythonhosted.org/packages/45/9a/63879839c0519c09d79215b99e39d3f56f0690a05b7ee7ff8825c4389285/django_mailer-1.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "facf33dc0261935659e3d1f4538412343501c0e85b705936b06fd3d159e7626f",
        "md5": "9bc4a29434800ca6d7883d392d9d8fcc",
        "sha256": "efc9a7acc16993c67a93ad38c57b2ed898c5d5c5b682a9865e903a0b1b2db96a"
      },
      "downloads": -1,
      "filename": "django-mailer-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bc4a29434800ca6d7883d392d9d8fcc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16671,
      "upload_time": "2015-07-03T12:06:06",
      "upload_time_iso_8601": "2015-07-03T12:06:06.643963Z",
      "url": "https://files.pythonhosted.org/packages/fa/cf/33dc0261935659e3d1f4538412343501c0e85b705936b06fd3d159e7626f/django-mailer-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}