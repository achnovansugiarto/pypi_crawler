{
  "info": {
    "author": "Christoph G. Hoffmann",
    "author_email": "christoph.hoffmann@uni-greifswald.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "mjoindices - A python package for calculating the Madden-Julian-Oscillation OMI index\n=====================================================================================\n\n[![DOI (paper)](https://img.shields.io/badge/DOI%20%28paper%29-10.5334%2Fjors.331-blue.svg)](https://doi.org/10.5334/jors.331)\n[![DOI](https://zenodo.org/badge/197774253.svg)](https://zenodo.org/badge/latestdoi/197774253)\n\nOverview\n--------\n\nmjoindices is a Python package relevant for atmospheric scientists. It provides functionality to compute an \nindex of the Madden-Julian-Oscillation (MJO), particularly the OLR-based MJO index (OMI).\n\nWhereas the package name has been chosen to indicate that further MJO indices should be included in the future, the \nimplementation is currently limited to the OMI algorithm.\n\nA scientific description of the package is found in [Hoffmann et al. (2021)](https://doi.org/10.5334/jors.331).\n\nCitation\n--------\nIf you use mjoindices in published research, please cite the corresponding paper: Hoffmann, C.G., Kiladis, G.N., Gehne, M. and von Savigny, C., 2021.\nA Python Package to Calculate the OLR-Based Index of the Madden- Julian-Oscillation (OMI) in Climate Science and Weather Forecasting. \nJournal of Open Research Software, 9(1), p.9. DOI: http://doi.org/10.5334/jors.331\n\nPlease check our [list of further scientific publications](https://cghoffmann.github.io/mjoindices/references.html), on which the\nimplementation of the package is based. It is likely that some of these publications should also be cited.\n\nContributors\n------------\nThanks for the contributions from the community!\n\n[![Contributors](https://contrib.rocks/image?repo=cghoffmann/mjoindices)](https://github.com/cghoffmann/mjoindices/graphs/contributors)\n\n\nRequirements\n------------\nmjoindices is written for Python 3 (version >= 3.7) and depends on the packages NumPy, Pandas, SciPy, and Matplotlib. It runs on Linux\nand Windows. Other operating systems have not been tested. \n\nThere are optional requirements, which can be installed along with mjoindices (see below)\n\nInstallation\n------------\nmjoindices is available in the [Python Package Index (PyPI)](https://pypi.org/project/mjoindices/). It can be installed using, \ne.g., pip.\n    \n    pip3 install mjoindices\n    \nIt can also be installed from the source, which is available on [Zenodo](http://dx.doi.org/10.5281/zenodo.3613752) and [GitHub](https://github.com/cghoffmann/mjoindices). \nDownload the source, move into the directory containing the file setup.py and run\n\n    pip3 install .\n\nThe following optional dependency sets can additionaly be installed by adding [\"set_name\"] behind the above commands:\n  * *full_func*: Install these packages to be sure that all options are really available. This might \n    require a higher Python version than for the core functionality alone. OMI may still be computed without these\n    additional packages, but the number of alternative approaches is limited.\n  * *dev*: packages that are needed for the further development, documentation and testing of mjoindices.\n\nExamples: \n\n    pip3 install mjoindices[full_func]\n\nor\n\n    pip3 install -e .[dev]\n \nGetting started / examples\n--------------------------\n*Note for experienced users: We have slightly changed the API for the EOF calculation with version 1.4. to be more flexible \nfor changes in the future. Please read the API docs or compare your code with the current example. The old API is still\nworking but will deprecate with one of the next releases. Adapting to the new interface will only take a few minutes.*\n\nThere are three basic entry points, of which you should read the documentation:\n\n* Calculation of the EOFs: [calc_eofs_from_olr](https://cghoffmann.github.io/mjoindices/api/omi_calculator.html#mjoindices.omi.omi_calculator.calc_eofs_from_olr).\n* Calculation of the PCs: [calculate_pcs_from_olr](https://cghoffmann.github.io/mjoindices/api/omi_calculator.html#mjoindices.omi.omi_calculator.calculate_pcs_from_olr).\n* An OLR data container class, which has to be provided for the calculations: [OLRData](https://cghoffmann.github.io/mjoindices/api/olr_handling.html#mjoindices.olr_handling.OLRData)\n\nAfter you have installed mjoindices, you can download an\n[example](https://github.com/cghoffmann/mjoindices/tree/master/examples/) from the source, which consists of two files: \n\n* recalculate_original_omi.py: After downloading some data files, which are mentioned and linked in the source\n  documentation of the example, you can run this example to recalculate the original OMI values. The script will save\n  the computed Empirical Orthogonal Functions (EOFs) and the Principal Components (PCs) in two individual files, which\n  can also be configured in the source code. In addition, it will save a few plots into a directory, which can\n  also be configured in the source. These plots show the agreement with the original OMI values (slight deviations are \n  expected due to numerical differences. This is explained in detail in the corresponding software meta paper).\n\n  Note that you can use this example also as a template to calculate OMI values with your own OLR data. \n  In order to do that, you only have to adapt two parts of the code, which are also marked in the code documentation.\n\n  Note also that this script may run for one or two hours on common personal computer systems.\n\n* evaluate_omi_reproduction.py: This script produces more detailed comparison plots and saves them into a directory.\n  The script recalculate_original_omi.py has to be run first, since the evaluation script is based on the saved results.\n  As for recalculate_original_omi.py, some file and directory names have to be adapted in the beginning of the code.\n\nBoth files are also available as Jupyter notebook files.\n\nDocumentation\n-----------------\nThe documentation is found on [GitHub Pages](https://cghoffmann.github.io/mjoindices/index.html) and also in the docs\nfolder of the [source](https://github.com/cghoffmann/mjoindices/tree/master/docs/).\n\nAutomated testing\n-----------------\nAfter you have installed mjoindices, you can also download\n[unit and integration tests](https://github.com/cghoffmann/mjoindices/tree/master/tests/) from the source to check\nyour installation using pytest:\n\n* Download the complete test directory to you local file system.\n\n* Download the external input and reference data files from [Zenodo](https://doi.org/10.5281/zenodo.3746562). Details are given in a separate [Readme file](https://github.com/cghoffmann/mjoindices/blob/master/tests/testdata/README). \n  * Note that some necessary data files are already included in the test directory in the repository. Make sure to download\n    those files together with the tests. The data files on Zenodo are complementary and not \n    included in the repository for reasons of file size and ownership.\n\n* Install the pytest package or simply install the mjoindices development dependencies with \n\n      pip3 install mjoindices[dev]\n\n* Move into your local test directory and run\n\n      pytest\n\n* In the case that some tests are failing with FileNotFoundErrors, it is likely that the package code is actually working, but that the test \n  environment is not set up properly. You should check the following before contacting us:\n   * Did you download the data files from the repository?\n   * Did you download the data files from Zenodo?\n   * Did you preserve the directory structure?\n   * Did you execute pytest in the tests/ subdirectory (where pytest.ini is located)? \n\n* Note that the tests may run for a few hours on a common personal computer.\n  * To get a quicker impression, you can omit slow tests by executing the following command. However, this will\n    not check the core OMI computation, which is most important, of course.\n\n        pytest -m 'not slow' \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cghoffmann/mjoindices",
    "keywords": "",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mjoindices",
    "package_url": "https://pypi.org/project/mjoindices/",
    "platform": null,
    "project_url": "https://pypi.org/project/mjoindices/",
    "project_urls": {
      "Homepage": "https://github.com/cghoffmann/mjoindices"
    },
    "release_url": "https://pypi.org/project/mjoindices/1.4.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "matplotlib",
      "netCDF4",
      "build ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-pep8 ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "sphinx ; extra == 'dev'",
      "m2r2 ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "eofs ; extra == 'full_func'",
      "xarray ; extra == 'full_func'"
    ],
    "requires_python": "",
    "summary": "Calculation of indices that describe the Madden-Julian-Oscillation (only OMI by now)",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15567055,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a950746deae257a32c7073381793aaf4ddf4aa3445ba3b7a509807852d370340",
        "md5": "3d25ea357934c71a5026eef02314ed72",
        "sha256": "c41e3e5d994ed93b17146b4a2702b07d08a432c09172da12d62a7ed538b9d29c"
      },
      "downloads": -1,
      "filename": "mjoindices-1.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d25ea357934c71a5026eef02314ed72",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 88957,
      "upload_time": "2022-10-28T16:13:12",
      "upload_time_iso_8601": "2022-10-28T16:13:12.085631Z",
      "url": "https://files.pythonhosted.org/packages/a9/50/746deae257a32c7073381793aaf4ddf4aa3445ba3b7a509807852d370340/mjoindices-1.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aef2121b3f962571ddec84e09443d2abcab1999663943e8eda0540c33ad748ae",
        "md5": "924925fa0910151b7e38b2b05fdc88e8",
        "sha256": "273e9d1c1a9250430dba3ee316e8e8c497569f83ee767f0b02c664e180900f43"
      },
      "downloads": -1,
      "filename": "mjoindices-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "924925fa0910151b7e38b2b05fdc88e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 99355,
      "upload_time": "2022-10-28T16:13:14",
      "upload_time_iso_8601": "2022-10-28T16:13:14.065791Z",
      "url": "https://files.pythonhosted.org/packages/ae/f2/121b3f962571ddec84e09443d2abcab1999663943e8eda0540c33ad748ae/mjoindices-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}