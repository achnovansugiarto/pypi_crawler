{
  "info": {
    "author": "",
    "author_email": "CSS Electronics <contact@csselectronics.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MDF4 Iterator - Load Raw CAN Bus Data\nThis package lets you extract raw CAN bus data from the [CANedge](https://www.csselectronics.com/) MDF4 log files. The package can e.g. be used together with the `canedge_browser` and `can_decoder` modules.\n\n---\n### Key features\n```\n1. Easily extract raw CAN bus data from MDF4 files\n2. Data can be loaded from a local path or e.g. from an S3 server path\n3. The output can be an iterable or a pandas dataframe\n4. Files can e.g. be loaded from lists generated by the canedge_browser package\n5. Loaded CAN data can be decoded using the can_decoder package\n6. No external dependencies\n7. Faster bulk extraction using optional dependencies\n```\n\n---\n### Installation\nUse pip to install the `mdf_iter` module:\n```\npip install mdf_iter\n```\nOptionally install `pandas` for fast bulk loading:\n```\npip install pandas\n```\n---\n### Dependencies\n* `pandas` (optional)\n\n---\n### Platforms\nPre-built wheels are available for the following platforms:\n* Linux: x86-64 (Python 3.7+)\n* Windows: x86-64 (Python 3.7+)\n\nOther platforms require manual compilation from source.\n\n---\n### Module usage examples\nBelow we open and iterate over the CAN records in a log file from local disk:\n```\nimport mdf_iter\n\nmdf_path = \"00000001.MF4\"\n\nwith open(mdf_path, \"rb\") as handle:\n    mdf_file = mdf_iter.MdfFile(handle)\n    record_iterator = mdf_file.get_can_iterator()\n    \n    for record in record_iterator:\n        print(record)\n```\nBelow we open a log file from an S3 server into a pandas dataframe:\n```\nimport mdf_iter\nimport s3fs\n\nfs = s3fs.S3FileSystem(\n    key=\"<key>\", secret=\"<secret>\", client_kwargs={\"endpoint_url\": \"<url>\"}\n)\nmdf_path = \"bucket_name/12345678/00000001/00000001-12345678.MF4\"\n\nwith fs.open(mdf_path, \"rb\") as handle:\n    mdf_file = mdf_iter.MdfFile(handle)\n    df_raw = mdf_file.get_data_frame()\n\nprint(df_raw)\n```\n---\n### Regarding data sources (local, S3 servers, ...)\nThe package can by default handle inputs in the form of:\n* Python strings\n* Python `Path` objects from `pathlib`\n* File-like objects, obtained using `open(file_name, \"rb\")` or `fsspec` and similar projects.\n\nAny other data source can be adapted to work with the library, if it behaves like a file.\n```\nfs = some_fsspec_filesystem_implementation\nfile_path = a_valid_fsspec_file_path\n\nwith fs.open(file_path, \"rb\") as handle:\n    mdf_file = mdf_iter.MdfFile(handle)\n    ...\n```\n\nFor examples using fsspec to e.g. load data from an S3 server (for use with the [CANedge2](https://www.csselectronics.com/screen/product/can-lin-logger-wifi-canedge2/language/en), see the examples folder.\n\n---\n### Extraction methods\n\nData can be extracted either through an iterator, or in bulk using `pandas` if it is installed.\n```\nwith mdf_iter.MdfFile(\"path\") as mdf_file:\n    # Using iterator.\n    record_iterator = mdf_file.get_can_iterator()\n    \n    for record in record_iterator:\n        ...\n    \n    # Using pandas.\n    df_raw = mdf_file.get_data_frame()\n\nprint(df_raw)\n```\n\n---\n### Extracting log file metadata\nMetadata for a log file is accessible through `get_metadata()`. This returns a dictionary with string keys and dictionary values in the form of `MdfMetadataEntry`. These are also dictionaries, which expose the possible metadata from the blocks in the MDF file. The possible fields are:\n* `description` - description of the field\n* `name` - name of the field, also part of the key\n* `read_only` - whether the field is marked as read only (has no effect)\n* `unit` - associated unit for the field\n* `value_raw` - the value as a string\n* `value_type` - the value type\n\nFor further usage examples, see the `examples` folders.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdf-iter",
    "package_url": "https://pypi.org/project/mdf-iter/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdf-iter/",
    "project_urls": {
      "Homepage": "https://www.csselectronics.com/pages/python-can-bus-api#void"
    },
    "release_url": "https://pypi.org/project/mdf-iter/2.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Extract bus logging data from MDF4 files generated by CANedge from CSS Electronics",
    "version": "2.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17235595,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7622dcf8831e2bbe5f0637b695a1b08b4d364ce22af5e36c310da3270aa594d1",
        "md5": "ea1e6949fd869706eb06445e680f115f",
        "sha256": "53839d151365a27378d8e20c7a97c3af6a7e5cd8effff73062012df9afb447e5"
      },
      "downloads": -1,
      "filename": "mdf_iter-2.0.4-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "ea1e6949fd869706eb06445e680f115f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 405993,
      "upload_time": "2023-01-26T07:36:52",
      "upload_time_iso_8601": "2023-01-26T07:36:52.241859Z",
      "url": "https://files.pythonhosted.org/packages/76/22/dcf8831e2bbe5f0637b695a1b08b4d364ce22af5e36c310da3270aa594d1/mdf_iter-2.0.4-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11e8262764da0bf97a82182c370ec09c0a45a1b76a748e28fb675425a76dc10d",
        "md5": "cff927f7e0d291eedb07e6e53052e214",
        "sha256": "9061f526150822954fb13439850e2ab131a6b0f52e8ad967adca5186e5842c42"
      },
      "downloads": -1,
      "filename": "mdf_iter-2.0.4-cp37-abi3-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "cff927f7e0d291eedb07e6e53052e214",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": ">=3.7",
      "size": 519949,
      "upload_time": "2023-01-26T07:36:53",
      "upload_time_iso_8601": "2023-01-26T07:36:53.526099Z",
      "url": "https://files.pythonhosted.org/packages/11/e8/262764da0bf97a82182c370ec09c0a45a1b76a748e28fb675425a76dc10d/mdf_iter-2.0.4-cp37-abi3-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}