{
  "info": {
    "author": "R",
    "author_email": "devel+metaindex@kakaomilchkuh.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Topic :: Text Processing :: Indexing"
    ],
    "description": "# metaindex\n\nmetaindex allows you to find files based on metadata information.\n\nFor example, if you want to find all pictures that are have a certain width,\nyou could do this:\n\n    metaindex find mimetype:image resolution:1200x\n\nThe following file formats are supported out of the box (although they might\nneed additional python packages, see <#Installation>):\n\n - images (png, jpg, etc.; whatever is supported by [Pillow](https://python-pillow.org/))\n - audio (mp3, m4a, ogg, etc.; whatever is supported by [mutagen](https://mutagen.readthedocs.io/))\n - OpenDocument (odt, ods, etc.)\n - Office Open XML (docx, pptx, xlsx)\n - pdf\n - html\n - epub\n - [abc](https://abcnotation.com/) music notation\n - cbz (through [ComicInfo.xml](https://github.com/anansi-project/comicinfo))\n - gpx\n\n\n## Installation\n\nTo install metaindex either install it directly through pypi:\n\n    pip install metaindex\n\nOr clone the repository and install that then through pip:\n\n    git clone https://github.com/vonshednob/metaindex\n    cd metaindex\n    pip install .\n\nMost modules are optional. If you, for example, want to use metaindex for audio\nfiles and PDFs, you will have to install it like this:\n\n    pip install metaindex[pdf,audio]\n\nor, for the cloned repository:\n\n    pip install .[pdf,audio]\n\nThese modules exist for indexing:\n\n - `pdf`, for PDF files,\n - `audio`, any type of audio/music file,\n - `image`, any type of image file,\n - `video`, any type of video file (overlaps somewhat with `audio`),\n - `ebook`, ebooks and comic book formats,\n - `xdg`, support for XDG (if you use Linux, just add it),\n - `yaml`, extra metadata in YAML format,\n - `ocr`, find and extract text from images with tesseract (you must have\n   tesseract installed for this to work).\n\nIn case you just want everything, this is your install command:\n\n    pip install .[all]\n\nThere is also an experimental FuseFS filesystem. To be able to use it, you\nwill have to specify ``fuse`` as an additional module:\n\n    pip install .[all,fuse]\n\n\n## Usage\n\nBefore you can use metaindex to search for files, you have to initialize the\ncache by telling it where your files to index are, for example:\n\n    metaindex index --recursive --index ~/Pictures\n\nAfterwards you can start searching for files by metadata, like this:\n\n    metaindex find \n\n\n## Searching\n\nSearch queries for use with `metaindex find` allow you to search\n\n - for files that have a metadata tag: `metaindex find resolution?`\n - for files that have a metadata tag with a certain value: `metaindex find title:\"dude, where is my car\"`\n - for files that have any metadata tag with a certain value: `metaindex find \"just anything\"`\n\nEach value that you provide is actually a case insensitive regular expression.\n\n\n## Usage from Python\n\nTo use the metaindex infrastructure from Python, you should instantiate a\n`Cache` (you should use `MemoryCache` though to get the best performance; all\nthree classes, `Cache`, `ThreadedCache`, and `MemoryCache` provide the same\ninterface) and run queries against it (with `find`).\n\n`Cache.find` will return an iterable of `Cache.Entry` instances, consisting of\n\n - `path`, the location in the file system where that file was last seen\n - `metadata`, a multidict of all metadata\n - `last_modified`, the timestamp when the file was last modified on disk (to\n   the knowledge of the cache)\n\nTo use the user's preferences, it's a good idea to load their configuration.\nHere's an example snippet that'll do both things:\n\n    from metaindex.configuration import load\n    from metaindex.cache import MemoryCache\n\n    config = load()\n    cache = MemoryCache(config)\n\n    # memory cache can load in the background, so before the *first* query\n    # you could consider waiting for it to load all entries\n    cache.wait_for_reload()\n\n    searchquery = 'mimetype:image title?'\n\n    for entry in cache.find(searchquery):\n        print(entry.path)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vonshednob/metaindex",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaindex",
    "package_url": "https://pypi.org/project/metaindex/",
    "platform": null,
    "project_url": "https://pypi.org/project/metaindex/",
    "project_urls": {
      "Homepage": "https://github.com/vonshednob/metaindex"
    },
    "release_url": "https://pypi.org/project/metaindex/1.4.0/",
    "requires_dist": [
      "pyxdg ; extra == 'all'",
      "mutagen ; extra == 'all'",
      "pdfminer ; extra == 'all'",
      "defusedxml ; extra == 'all'",
      "pyyaml ; extra == 'all'",
      "pillow ; extra == 'all'",
      "pillow (>=6.2.0) ; extra == 'all'",
      "pyexiv2 ; extra == 'all'",
      "mutagen ; extra == 'audio'",
      "defusedxml ; extra == 'ebook'",
      "trio ; extra == 'fuse'",
      "pyfuse3 ; extra == 'fuse'",
      "pyexiv2 ; extra == 'image'",
      "pillow ; extra == 'image'",
      "pillow (>=6.2.0) ; extra == 'ocr'",
      "pdfminer ; extra == 'pdf'",
      "mutagen ; extra == 'video'",
      "pyxdg ; extra == 'xdg'",
      "pyyaml ; extra == 'yaml'"
    ],
    "requires_python": ">=3.6",
    "summary": "Utilities to tag files",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14296174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d54f52257225c20ddde581723a2e66e8fa17f31ba64292a1c64450455d190b4",
        "md5": "7299280c04cef7c48cdff4d37728697a",
        "sha256": "c34e112b5c43a3cde171f49b9d9937101d5326e052602dc23b09890016f33595"
      },
      "downloads": -1,
      "filename": "metaindex-1.4.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "7299280c04cef7c48cdff4d37728697a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 105286,
      "upload_time": "2022-06-30T13:10:24",
      "upload_time_iso_8601": "2022-06-30T13:10:24.660054Z",
      "url": "https://files.pythonhosted.org/packages/6d/54/f52257225c20ddde581723a2e66e8fa17f31ba64292a1c64450455d190b4/metaindex-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb2a98a67a1ad74e849ded6571c5f16dc0970ce19a23d67ac0ac34232850ec51",
        "md5": "c17ad0b6fb9999b8c9ab43aaecddb2ed",
        "sha256": "0152373cd44263a1a1f81b89fe89707cd6a12667010b2308832b5ff9996a3f4a"
      },
      "downloads": -1,
      "filename": "metaindex-1.4.0.tar.gz",
      "has_sig": true,
      "md5_digest": "c17ad0b6fb9999b8c9ab43aaecddb2ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 407318,
      "upload_time": "2022-06-30T13:10:27",
      "upload_time_iso_8601": "2022-06-30T13:10:27.500461Z",
      "url": "https://files.pythonhosted.org/packages/bb/2a/98a67a1ad74e849ded6571c5f16dc0970ce19a23d67ac0ac34232850ec51/metaindex-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}