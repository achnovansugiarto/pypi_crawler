{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-private-storage\n======================\n\nThis module offers a private media file storage,\nso user uploads can be protected behind a login.\n\nIt uses the Django storage API's internally,\nso all form rendering and admin integration work out of the box.\n\nInstallation\n============\n\n::\n\n    pip install django-private-storage\n\nConfiguration\n-------------\n\nAdd to the settings:\n\n.. code-block:: python\n\n    INSTALLED_APPS += (\n        'private_storage',\n    )\n\n    PRIVATE_STORAGE_ROOT = '/path/to/private-media/'\n    PRIVATE_STORAGE_AUTH_FUNCTION = 'apps.utils.private_storage.permissions.allow_staff'\n\nAdd to ``urls.py``:\n\n.. code-block:: python\n\n    import private_storage.urls\n\n    urlpatterns += [\n        url('^private-media/', include(private_storage.urls)),\n    ]\n\nUsage\n-----\n\nIn a Django model, add the ``PrivateFileField``:\n\n.. code-block:: python\n\n    from django.db import models\n    from private_storage.fields import PrivateFileField\n\n    class MyModel(models.Model):\n        title = models.CharField(\"Title\", max_length=200)\n        file = PrivateFileField(\"File\")\n\nThe ``PrivateFileField`` also accepts the following kwargs:\n\n* ``upload_to``: the optional subfolder in the ``PRIVATE_STORAGE_ROOT``.\n* ``upload_subfolder``: a function that defines the folder, it receives the current model ``instance``.\n* ``content_types``: allowed content types\n* ``max_file_size``: maximum file size.\n* ``storage``: the storage object to use, defaults to ``private_storage.storage.private_storage``\n\nOther topics\n============\n\nStoring files on Amazon S3\n--------------------------\n\nThe ``PRIVATE_STORAGE_CLASS`` setting can be redefined to point to a different storage class.\nThe default is ``private_storage.storage.files.PrivateFileSystemStorage``, which uses\na private media folder that ``PRIVATE_STORAGE_ROOT`` points to.\n\nDefine one of these settings instead:\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_CLASS = 'private_storage.storage.s3boto3.PrivateS3BotoStorage'\n\n    AWS_PRIVATE_STORAGE_BUCKET_NAME = 'private-files'  # bucket name\n\nThis uses django-storages_ settings. Replace the prefix ``AWS_`` with ``AWS_PRIVATE_``.\nThe following settings are reused when they don't have an corresponding ``AWS_PRIVATE_...`` setting:\n\n* ``AWS_ACCESS_KEY_ID``\n* ``AWS_SECRET_ACCESS_KEY``\n* ``AWS_S3_URL_PROTOCOL``\n* ``AWS_S3_REGION_NAME``\n* ``AWS_IS_GZIPPED``\n\nAll other settings should be explicitly defined with ``AWS_PRIVATE_...`` settings.\n\nTo have encryption either configure ``AWS_PRIVATE_S3_ENCRYPTION``\nand ``AWS_PRIVATE_S3_SIGNATURE_VERSION`` or use:\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_CLASS = 'private_storage.storage.s3boto3.PrivateEncryptedS3BotoStorage'\n\nMake sure an encryption key is generated on Amazon.\n\nDefining access rules\n---------------------\n\nThe ``PRIVATE_STORAGE_AUTH_FUNCTION`` defines which user may access the files.\nBy default, this only includes superusers.\n\nThe following options are available out of the box:\n\n* ``private_storage.permissions.allow_authenticated``\n* ``private_storage.permissions.allow_staff``\n* ``private_storage.permissions.allow_superuser``\n\nYou can create a custom function, and use that instead.\nThe function receives a ``private_storate.models.PrivateFile`` object,\nwhich has the following fields:\n\n* ``request``: the Django request.\n* ``storage``: the storage engine used to retrieve the file.\n* ``relative_name``: the file name in the storage.\n* ``full_path``: the full file system path.\n* ``exists()``: whether the file exists.\n* ``content_type``: the HTTP content type.\n\nOptimizing large file transfers\n-------------------------------\n\nBy default, the files are served by the Django instance.\nThis can be inefficient, since the whole file needs to be read in chunks\nand passed through the WSGI buffers, OS kernel and webserver.\nIn effect, the complete file is copied several times through memory buffers.\n\nHence, webservers offer a method to send the file on behalf of the backend application.\nThis happens with the ``sendfile()`` system call,\nwhich can be enabled with the following settings:\n\nFor apache\n~~~~~~~~~~\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_SERVER = 'apache'\n\nFor Nginx\n~~~~~~~~~\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_SERVER = 'nginx'\n    PRIVATE_STORAGE_INTERNAL_URL = '/private-x-accel-redirect/'\n\nAdd the following location block in the server config:\n\n.. code-block:: nginx\n\n    location /private-x-accel-redirect/ {\n      internal;\n      alias   /path/to/private-media/;\n    }\n\nOther webservers\n~~~~~~~~~~~~~~~~\n\nThe ``PRIVATE_STORAGE_SERVER`` may also point to a dotted Python class path.\nImplement a class with a static ``serve(private_file)`` method.\n\nUsing multiple storages\n-----------------------\n\nThe ``PrivateFileField`` accepts a ``storage`` kwarg,\nhence you can initialize multiple ``private_storage.storage.PrivateStorage`` objects,\neach providing files from a different ``location`` and ``base_url``.\n\nFor example:\n\n.. code-block:: python\n\n\n    from django.db import models\n    from private_storage.fields import PrivateFileField\n    from private_storage.storage.files import PrivateFileSystemStorage\n\n    my_storage = PrivateFileSystemStorage(\n        location='/path/to/storage2/',\n        base_url='/private-documents2/'\n    )\n\n    class MyModel(models.Model):\n        file = PrivateFileField(storage=my_storage)\n\n\nThen create a view to serve those files:\n\n.. code-block:: python\n\n    from private_storage.views import PrivateStorageView\n    from .models import my_storage\n\n    class MyStorageView(PrivateStorageView):\n        storage = my_storage\n\n        def can_access_file(self, private_file):\n            # This overrides PRIVATE_STORAGE_AUTH_FUNCTION\n            return self.request.is_superuser\n\nAnd expose that URL:\n\n.. code-block:: python\n\n    urlpatterns += [\n        url(^private-documents2/(?P<path>.*)$', views.MyStorageView.as_view()),\n    ]\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\n\n.. _django-storages: https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-private-storage/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-private-storage",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-private-storage",
    "package_url": "https://pypi.org/project/django-private-storage/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-private-storage/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-private-storage/zipball/master",
      "Homepage": "https://github.com/edoburu/django-private-storage"
    },
    "release_url": "https://pypi.org/project/django-private-storage/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Private media file storage for Django projects",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12042155,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8d1c8ab0ae14e4adf9eec3211c987edd2e734b4791837bdf655d7043dbf42a4",
        "md5": "ab840d0c0cb28571d5c8f82da8b2d795",
        "sha256": "3017e98b41d1ad25fb18176c01834988542bed74767de333c8dd638f11376023"
      },
      "downloads": -1,
      "filename": "django_private_storage-1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ab840d0c0cb28571d5c8f82da8b2d795",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18013,
      "upload_time": "2017-02-07T16:18:26",
      "upload_time_iso_8601": "2017-02-07T16:18:26.401856Z",
      "url": "https://files.pythonhosted.org/packages/c8/d1/c8ab0ae14e4adf9eec3211c987edd2e734b4791837bdf655d7043dbf42a4/django_private_storage-1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3bc01bfc5dce7b588325a171395681ae48d8cdd3eb87f9ddd5b5cf21aaee8d4",
        "md5": "fe6446c73ba5c6ae0c42185c74520f81",
        "sha256": "ebe8f0122af73a4428a595f166a27740343262d5f7dfef7d3ec629f6399dc940"
      },
      "downloads": -1,
      "filename": "django-private-storage-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "fe6446c73ba5c6ae0c42185c74520f81",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16346,
      "upload_time": "2017-02-07T16:18:28",
      "upload_time_iso_8601": "2017-02-07T16:18:28.830282Z",
      "url": "https://files.pythonhosted.org/packages/d3/bc/01bfc5dce7b588325a171395681ae48d8cdd3eb87f9ddd5b5cf21aaee8d4/django-private-storage-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}