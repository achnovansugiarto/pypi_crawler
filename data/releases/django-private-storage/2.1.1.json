{
  "info": {
    "author": "Diederik van der Boor",
    "author_email": "opensource@edoburu.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://img.shields.io/travis/edoburu/django-private-storage/master.svg?branch=master\n    :target: http://travis-ci.org/edoburu/django-private-storage\n.. image:: https://img.shields.io/pypi/v/django-private-storage.svg\n    :target: https://pypi.python.org/pypi/django-private-storage/\n.. image:: https://img.shields.io/pypi/l/django-private-storage.svg\n    :target: https://pypi.python.org/pypi/django-private-storage/\n.. image:: https://img.shields.io/codecov/c/github/edoburu/django-private-storage/master.svg\n    :target: https://codecov.io/github/edoburu/django-private-storage?branch=master\n\ndjango-private-storage\n======================\n\nThis module offers a private media file storage,\nso user uploads can be protected behind a login.\n\nIt uses the Django storage API's internally,\nso all form rendering and admin integration work out of the box.\n\nInstallation\n============\n\n::\n\n    pip install django-private-storage\n\nConfiguration\n-------------\n\nAdd to the settings:\n\n.. code-block:: python\n\n    INSTALLED_APPS += (\n        'private_storage',\n    )\n\n    PRIVATE_STORAGE_ROOT = '/path/to/private-media/'\n    PRIVATE_STORAGE_AUTH_FUNCTION = 'private_storage.permissions.allow_staff'\n\nAdd to ``urls.py``:\n\n.. code-block:: python\n\n    import private_storage.urls\n\n    urlpatterns += [\n        url('^private-media/', include(private_storage.urls)),\n    ]\n\nUsage\n-----\n\nIn a Django model, add the ``PrivateFileField``:\n\n.. code-block:: python\n\n    from django.db import models\n    from private_storage.fields import PrivateFileField\n\n    class MyModel(models.Model):\n        title = models.CharField(\"Title\", max_length=200)\n        file = PrivateFileField(\"File\")\n\nThe ``PrivateFileField`` also accepts the following kwargs:\n\n* ``upload_to``: the optional subfolder in the ``PRIVATE_STORAGE_ROOT``.\n* ``upload_subfolder``: a function that defines the folder, it receives the current model ``instance``.\n* ``content_types``: allowed content types\n* ``max_file_size``: maximum file size in bytes. (1MB is 1024 * 1024)\n* ``storage``: the storage object to use, defaults to ``private_storage.storage.private_storage``\n\nOther topics\n============\n\nStoring files on Amazon S3\n--------------------------\n\nThe ``PRIVATE_STORAGE_CLASS`` setting can be redefined to point to a different storage class.\nThe default is ``private_storage.storage.files.PrivateFileSystemStorage``, which uses\na private media folder that ``PRIVATE_STORAGE_ROOT`` points to.\n\nDefine one of these settings instead:\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_CLASS = 'private_storage.storage.s3boto3.PrivateS3BotoStorage'\n\n    AWS_PRIVATE_STORAGE_BUCKET_NAME = 'private-files'  # bucket name\n\nThis uses django-storages_ settings. Replace the prefix ``AWS_`` with ``AWS_PRIVATE_``.\nThe following settings are reused when they don't have an corresponding ``AWS_PRIVATE_...`` setting:\n\n* ``AWS_ACCESS_KEY_ID``\n* ``AWS_SECRET_ACCESS_KEY``\n* ``AWS_S3_URL_PROTOCOL``\n* ``AWS_S3_REGION_NAME``\n* ``AWS_IS_GZIPPED``\n\nAll other settings should be explicitly defined with ``AWS_PRIVATE_...`` settings.\n\nBy default, all URLs in the admin return the direct S3 bucket URls, with the `query parameter authentication`_ enabled.\nWhen ``AWS_PRIVATE_QUERYSTRING_AUTH = False``, all file downloads are proxied through our ``PrivateFileView`` URL.\nThis behavior can be enabled explicitly using ``PRIVATE_STORAGE_S3_REVERSE_PROXY = True``.\n\nTo have encryption either configure ``AWS_PRIVATE_S3_ENCRYPTION``\nand ``AWS_PRIVATE_S3_SIGNATURE_VERSION`` or use:\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_CLASS = 'private_storage.storage.s3boto3.PrivateEncryptedS3BotoStorage'\n\nMake sure an encryption key is generated on Amazon.\n\nDefining access rules\n---------------------\n\nThe ``PRIVATE_STORAGE_AUTH_FUNCTION`` defines which user may access the files.\nBy default, this only includes superusers.\n\nThe following options are available out of the box:\n\n* ``private_storage.permissions.allow_authenticated``\n* ``private_storage.permissions.allow_staff``\n* ``private_storage.permissions.allow_superuser``\n\nYou can create a custom function, and use that instead.\nThe function receives a ``private_storate.models.PrivateFile`` object,\nwhich has the following fields:\n\n* ``request``: the Django request.\n* ``storage``: the storage engine used to retrieve the file.\n* ``relative_name``: the file name in the storage.\n* ``full_path``: the full file system path.\n* ``exists()``: whether the file exists.\n* ``content_type``: the HTTP content type.\n* ``parent_object``: only set when ``PrivateStorageDetailView`` was used.\n\n\nRetrieving files by object ID\n-----------------------------\n\nTo implement more object-based access permissions,\ncreate a custom view that provides the download.\n\n.. code-block:: python\n\n    from private_storage.views import PrivateStorageDetailView\n\n    class MyDocumentDownloadView(PrivateStorageDetailView):\n        model = MyModel\n        model_file_field = 'file'\n\n        def get_queryset(self):\n            # Make sure only certain objects can be accessed.\n            return super().get_queryset().filter(...)\n\n        def can_access_file(self, private_file):\n            # When the object can be accessed, the file may be downloaded.\n            # This overrides PRIVATE_STORAGE_AUTH_FUNCTION\n            return True\n\nThe following class-level attributes can be overwritten:\n\n* ``model``: The model to fetch (including every other attribute of ``SingleObjectMixin``).\n* ``model_file_field``: This should point to the field used to store the file.\n* ``storage`` / ``get_storage()``: The storage class to read the file from.\n* ``server_class``: The Python class used to generate the ``HttpResponse`` / ``FileResponse``.\n* ``content_disposition``: Can be \"inline\" (show inside the browser) or \"attachment\" (saved as download).\n* ``content_disposition_filename`` / ``get_content_disposition_filename()``: Overrides the filename for downloading.\n\n\nOptimizing large file transfers\n-------------------------------\n\nSending large files can be inefficient in some configurations.\n\nIn the worst case scenario, the whole file needs to be read in chunks\nand passed as a whole through the WSGI buffers, OS kernel, webserver and proxy server.\nIn effect, the complete file is copied several times through memory buffers.\n\nThere are more efficient ways to transfer files, such as the ``sendfile()`` system call on UNIX.\nDjango uses such feature when the WSGI server provides ``wsgi.file_handler`` support.\n\nIn some situations, this effect is nullified,\nfor example by by a local HTTP server sitting in front of the WSGI container.\nA typical case would be  running Gunicorn behind an Nginx or Apache webserver.\n\nFor such situation, the native support of the\nwebserver can be enabled with the following settings:\n\nFor apache\n~~~~~~~~~~\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_SERVER = 'apache'\n\nFor Nginx\n~~~~~~~~~\n\n.. code-block:: python\n\n    PRIVATE_STORAGE_SERVER = 'nginx'\n    PRIVATE_STORAGE_INTERNAL_URL = '/private-x-accel-redirect/'\n\nAdd the following location block in the server config:\n\n.. code-block:: nginx\n\n    location /private-x-accel-redirect/ {\n      internal;\n      alias   /path/to/private-media/;\n    }\n\nFor very old Nginx versions, you'll have to configure ``PRIVATE_STORAGE_NGINX_VERSION``,\nbecause Nginx versions before 1.5.9 (released in 2014) handle non-ASCII filenames differently.\n\nOther webservers\n~~~~~~~~~~~~~~~~\n\nThe ``PRIVATE_STORAGE_SERVER`` may also point to a dotted Python class path.\nImplement a class with a static ``serve(private_file)`` method.\n\nUsing multiple storages\n-----------------------\n\nThe ``PrivateFileField`` accepts a ``storage`` kwarg,\nhence you can initialize multiple ``private_storage.storage.PrivateStorage`` objects,\neach providing files from a different ``location`` and ``base_url``.\n\nFor example:\n\n.. code-block:: python\n\n\n    from django.db import models\n    from private_storage.fields import PrivateFileField\n    from private_storage.storage.files import PrivateFileSystemStorage\n\n    my_storage = PrivateFileSystemStorage(\n        location='/path/to/storage2/',\n        base_url='/private-documents2/'\n    )\n\n    class MyModel(models.Model):\n        file = PrivateFileField(storage=my_storage)\n\n\nThen create a view to serve those files:\n\n.. code-block:: python\n\n    from private_storage.views import PrivateStorageView\n    from .models import my_storage\n\n    class MyStorageView(PrivateStorageView):\n        storage = my_storage\n\n        def can_access_file(self, private_file):\n            # This overrides PRIVATE_STORAGE_AUTH_FUNCTION\n            return self.request.is_superuser\n\nAnd expose that URL:\n\n.. code-block:: python\n\n    urlpatterns += [\n        url('^private-documents2/(?P<path>.*)$', views.MyStorageView.as_view()),\n    ]\n\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\n\n.. _django-storages: https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html\n.. _query parameter authentication: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/edoburu/django-private-storage/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edoburu/django-private-storage",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-private-storage",
    "package_url": "https://pypi.org/project/django-private-storage/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-private-storage/",
    "project_urls": {
      "Download": "https://github.com/edoburu/django-private-storage/zipball/master",
      "Homepage": "https://github.com/edoburu/django-private-storage"
    },
    "release_url": "https://pypi.org/project/django-private-storage/2.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Private media file storage for Django projects",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12042155,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "891748525dda32b61950635940c8363232dde4fa5ec56f2d5669e84a49de9efb",
        "md5": "9aa98c0550e27533964aa46ed45dac73",
        "sha256": "ee7b9a787936b75274b174906e9d0d0dda08abc7a55dd7e0788fd52968d65b83"
      },
      "downloads": -1,
      "filename": "django_private_storage-2.1.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "9aa98c0550e27533964aa46ed45dac73",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 22118,
      "upload_time": "2018-05-16T08:19:33",
      "upload_time_iso_8601": "2018-05-16T08:19:33.721882Z",
      "url": "https://files.pythonhosted.org/packages/89/17/48525dda32b61950635940c8363232dde4fa5ec56f2d5669e84a49de9efb/django_private_storage-2.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "16ae7b4b6a02222474bac6a24b9f661f65b439bd6d34ff308ab54204b7000745",
        "md5": "f33a7076586001f0b42d8b9576a768c8",
        "sha256": "659f797818cbeccd2b3c49b7e32230708e69e18052d62c63602e5c69140c942a"
      },
      "downloads": -1,
      "filename": "django-private-storage-2.1.1.tar.gz",
      "has_sig": true,
      "md5_digest": "f33a7076586001f0b42d8b9576a768c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23027,
      "upload_time": "2018-05-16T08:19:35",
      "upload_time_iso_8601": "2018-05-16T08:19:35.504760Z",
      "url": "https://files.pythonhosted.org/packages/16/ae/7b4b6a02222474bac6a24b9f661f65b439bd6d34ff308ab54204b7000745/django-private-storage-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}