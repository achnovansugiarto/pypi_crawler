{
  "info": {
    "author": "CloudBlue LLC",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Database"
    ],
    "description": "Django CQRS\n===========\n![pyversions](https://img.shields.io/pypi/pyversions/django-cqrs.svg)\n[![PyPi Status](https://img.shields.io/pypi/v/django-cqrs.svg)](https://pypi.org/project/django-cqrs/)\n[![Docs](https://readthedocs.org/projects/django-cqrs/badge/?version=latest)](https://readthedocs.org/projects/django-cqrs)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=django-cqrs&metric=coverage)](https://sonarcloud.io/dashboard?id=django-cqrs)\n[![Build Status](https://travis-ci.org/cloudblue/django-cqrs.svg?branch=master)](https://travis-ci.org/cloudblue/django-cqrs)\n[![PyPI status](https://img.shields.io/pypi/status/django-cqrs.svg)](https://pypi.python.org/pypi/django-cqrs/)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=django-cqrs&metric=alert_status)](https://sonarcloud.io/dashboard?id=django-cqrs)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/django-cqrs)](https://pypi.org/project/django-cqrs/)\n\n`django-cqrs` is an Django application, that implements CQRS data synchronisation between several Django microservices.\n\n\nCQRS\n----\nIn Connect we have a rather complex Domain Model. There are many microservices, that are [decomposed by subdomain](https://microservices.io/patterns/decomposition/decompose-by-subdomain.html) and which follow [database-per-service](https://microservices.io/patterns/data/database-per-service.html) pattern. These microservices have rich and consistent APIs. They are deployed in cloud k8s cluster and scale automatically under load. Many of these services aggregate data from other ones and usually [API Composition](https://microservices.io/patterns/data/api-composition.html) is totally enough. But, some services are working too slowly with API JOINS, so another pattern needs to be applied.\n\nThe pattern, that solves this issue is called [CQRS - Command Query Responsibility Segregation](https://microservices.io/patterns/data/cqrs.html). Core idea behind this pattern is that view databases (replicas) are defined for efficient querying and DB joins. Applications keep their replicas up to data by subscribing to [Domain events](https://microservices.io/patterns/data/domain-event.html) published by the service that owns the data. Data is [eventually consistent](https://en.wikipedia.org/wiki/Eventual_consistency) and that's okay for non-critical business transactions.\n\n\nDocumentation\n=============\n\nFull documentation is available at [https://django-cqrs.readthedocs.org](https://django-cqrs.readthedocs.org).\n\n\nExamples\n========\n\nYou can find an example project [here](examples/demo_project/README.md)\n\nIntegration\n-----------\n* Setup `RabbitMQ`\n* Install `django-cqrs`\n* Apply changes to master service, according to RabbitMQ settings\n```python\n# models.py\n\nfrom django.db import models\nfrom dj_cqrs.mixins import MasterMixin, RawMasterMixin\n\n\nclass Account(MasterMixin, models.Model):\n    CQRS_ID = 'account'\n    CQRS_PRODUCE = True  # set this to False to prevent sending instances to Transport\n    \n    \nclass Author(MasterMixin, models.Model):\n    CQRS_ID = 'author'\n    CQRS_SERIALIZER = 'app.api.AuthorSerializer'\n\n\n# For cases of Diamond Multi-inheritance or in case of Proxy Django-models the following approach could be used:\nfrom mptt.models import MPTTModel\nfrom dj_cqrs.metas import MasterMeta\n\nclass ComplexInheritanceModel(MPTTModel, RawMasterMixin):\n    CQRS_ID = 'diamond'\n\nclass BaseModel(RawMasterMixin):\n    CQRS_ID = 'base'\n\nclass ProxyModel(BaseModel):\n    class Meta:\n        proxy = True\n\nMasterMeta.register(ComplexInheritanceModel)\nMasterMeta.register(BaseModel)\n```\n\n```python\n# settings.py\n\nCQRS = {\n    'transport': 'dj_cqrs.transport.rabbit_mq.RabbitMQTransport',\n    'host': RABBITMQ_HOST,\n    'port': RABBITMQ_PORT,\n    'user': RABBITMQ_USERNAME,\n    'password': RABBITMQ_PASSWORD,\n}\n\n```\n* Apply changes to replica service, according to RabbitMQ settings\n```python\nfrom django.db import models\nfrom dj_cqrs.mixins import ReplicaMixin\n\n\nclass AccountRef(ReplicaMixin, models.Model):\n    CQRS_ID = 'account'\n    \n    id = models.IntegerField(primary_key=True)\n    \n\nclass AuthorRef(ReplicaMixin, models.Model):\n    CQRS_ID = 'author'\n    CQRS_CUSTOM_SERIALIZATION = True\n    \n    @classmethod\n    def cqrs_create(cls, sync, mapped_data, previous_data=None, meta=None):\n        # Override here\n        pass\n        \n    def cqrs_update(self, sync, mapped_data, previous_data=None, meta=None):\n        # Override here\n        pass\n```\n\n```python\n# settings.py\n\nCQRS = {\n    'transport': 'dj_cqrs.transport.RabbitMQTransport',\n    'queue': 'account_replica',\n    'host': RABBITMQ_HOST,\n    'port': RABBITMQ_PORT,\n    'user': RABBITMQ_USERNAME,\n    'password': RABBITMQ_PASSWORD,\n}\n```\n* Apply migrations on both services\n* Run consumer worker on replica service. Management command: `python manage.py cqrs_consume -w 2`\n\nNotes\n-----\n\n* When there are master models with related entities in CQRS_SERIALIZER, it's important to have operations within atomic transactions. CQRS sync will happen on transaction commit. \n* Please, avoid saving different instances of the same entity within transaction to reduce syncing and potential racing on replica side.\n* Updating of related model won't trigger CQRS automatic synchronization for master model. This needs to be done manually.\n* By default `update_fields` doesn't trigger CQRS logic, but it can be overridden for the whole application in settings:\n```python\nsettings.CQRS = {\n    ...\n    'master': {\n        'CQRS_AUTO_UPDATE_FIELDS': True,\n    },\n    ...\n}\n```\nor a special flag can be used in each place, where it's required to trigger CQRS flow:\n```python\ninstance.save(update_fields=['name'], update_cqrs_fields=True)\n```\n* When only needed instances need to be synchronized, there is a method `is_sync_instance` to set filtering rule. \nIt's important to understand, that CQRS counting works even without syncing and rule is applied every time model is updated.\n\nExample:\n```python\n\nclass FilteredSimplestModel(MasterMixin, models.Model):\n    CQRS_ID = 'filter'\n\n    name = models.CharField(max_length=200)\n\n    def is_sync_instance(self):\n        return len(str(self.name)) > 2\n```\n\nDjango Admin\n-----------\n\nAdd action to synchronize master items from Django Admin page.\n\n```python\nfrom django.db import models\nfrom django.contrib import admin\n\nfrom dj_cqrs.admin_mixins import CQRSAdminMasterSyncMixin\n\n\nclass AccountAdmin(CQRSAdminMasterSyncMixin, admin.ModelAdmin):\n    ...\n\n\nadmin.site.register(models.Account, AccountAdmin)\n\n```\n\n* If necessary, override ```_cqrs_sync_queryset``` from ```CQRSAdminMasterSyncMixin``` to adjust the QuerySet and use it for synchronization.\n\n\nUtilities\n---------\nBulk synchronizer without transport (usage example: it may be used for initial configuration). May be used at planned downtime.\n* On master service: `python manage.py cqrs_bulk_dump --cqrs-id=author` -> `author.dump`\n* On replica service: `python manage.py cqrs_bulk_load -i=author.dump`\n\nFilter synchronizer over transport (usage example: sync some specific records to a given replica). Can be used dynamically.\n* To sync all replicas: `python manage.py cqrs_sync --cqrs-id=author -f={\"id__in\": [1, 2]}`\n* To sync all instances only with one replica: `python manage.py cqrs_sync --cqrs-id=author -f={} -q=replica`\n\nSet of diff synchronization tools:\n* To get diff and synchronize master service with replica service in K8S: \n```bash\nkubectl exec -i MASTER_CONTAINER -- python manage.py cqrs_diff_master --cqrs-id=author | \n    kubectl exec -i REPLICA_CONTAINER -- python manage.py cqrs_diff_replica |\n    kubectl exec -i MASTER_CONTAINER -- python manage.py cqrs_diff_sync\n```\n\n* If it's important to check sync and clean up deleted objects within replica service in K8S:\n```bash\nkubectl exec -i REPLICA_CONTAINER -- python manage.py cqrs_deleted_diff_replica --cqrs-id=author | \n    kubectl exec -i MASTER_CONTAINER -- python manage.py cqrs_deleted_diff_master |\n    kubectl exec -i REPLICA_CONTAINER -- python manage.py cqrs_deleted_sync_replica\n```\n\nDevelopment\n===========\n\n1. Python >= 3.7\n2. Install dependencies `requirements/dev.txt`\n3. We use `isort` library to order and format our imports, and we check it using `flake8-isort` library (automatically on `flake8` run).  \nFor convenience you may run `isort .` to order imports.\n\n\nTesting\n=======\n\nUnit testing\n------\n1. Python >= 3.7\n2. Install dependencies `requirements/test.txt`\n3. `export PYTHONPATH=/your/path/to/django-cqrs/`\n\nRun tests with various RDBMS:\n- `cd integration_tests`\n- `DB=postgres docker-compose -f docker-compose.yml -f rdbms.yml run app_test`\n- `DB=mysql docker-compose -f docker-compose.yml -f rdbms.yml run app_test`\n\nCheck code style: `flake8`\nRun tests: `pytest`\n\nTests reports are generated in `tests/reports`. \n* `out.xml` - JUnit test results\n* `coverage.xml` - Coverage xml results\n\nTo generate HTML coverage reports use:\n`--cov-report html:tests/reports/cov_html`\n\n\nIntegrational testing\n------\n1. docker-compose\n2. `cd integration_tests`\n3. `docker-compose run master`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://django-cqrs.readthedocs.org",
    "keywords": "django,cqrs,sql,mixin,amqp",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-cqrs",
    "package_url": "https://pypi.org/project/django-cqrs/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-cqrs/",
    "project_urls": {
      "Homepage": "https://django-cqrs.readthedocs.org",
      "Repository": "https://github.com/cloudblue/django-cqrs"
    },
    "release_url": "https://pypi.org/project/django-cqrs/2.4.14/",
    "requires_dist": [
      "django (>=3.2)",
      "pika (>=1.0.0)",
      "kombu (>=4.6)",
      "ujson (>=5.4.0)",
      "django-model-utils (>=4.0.0)",
      "python-dateutil (>=2.4)",
      "watchfiles (>=0.18.1,<0.19.0)"
    ],
    "requires_python": ">=3.7,<4",
    "summary": "Django CQRS data synchronisation",
    "version": "2.4.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17412737,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "714d44d878e8eea35139b6335034b990cec75890bebb526a8893544f6adc72b5",
        "md5": "6e76033590d6e10d3ff03071bef4d274",
        "sha256": "7f82d16078b5b612bb69821155bb26e72dfdecc3ddeffd4f4234f9f56daefc04"
      },
      "downloads": -1,
      "filename": "django_cqrs-2.4.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e76033590d6e10d3ff03071bef4d274",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4",
      "size": 52712,
      "upload_time": "2023-03-23T09:18:51",
      "upload_time_iso_8601": "2023-03-23T09:18:51.827591Z",
      "url": "https://files.pythonhosted.org/packages/71/4d/44d878e8eea35139b6335034b990cec75890bebb526a8893544f6adc72b5/django_cqrs-2.4.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ead891581fa0a5f4c55257b50e8bf3e07c8bda79e51bd3866526d21dad95e80c",
        "md5": "5d2aa96f108d769865a24da81947d5a3",
        "sha256": "929bdd6bd3da96ce5018a42326d40a326c52d04c077d33804b7773165648d960"
      },
      "downloads": -1,
      "filename": "django_cqrs-2.4.14.tar.gz",
      "has_sig": false,
      "md5_digest": "5d2aa96f108d769865a24da81947d5a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4",
      "size": 38690,
      "upload_time": "2023-03-23T09:18:53",
      "upload_time_iso_8601": "2023-03-23T09:18:53.078689Z",
      "url": "https://files.pythonhosted.org/packages/ea/d8/91581fa0a5f4c55257b50e8bf3e07c8bda79e51bd3866526d21dad95e80c/django_cqrs-2.4.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}