{
  "info": {
    "author": "Incuna Ltd",
    "author_email": "admin@incuna.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "# Django Orderable\n\n\nAdd manual sort order to Django objects via an abstract base class and admin classes. Project includes:\n\n* Abstract base Model\n* Admin class\n* Inline admin class\n* Admin templates\n\n\n## Demo\n\n\n![django-orderable demo](https://cloud.githubusercontent.com/assets/30606/6326221/667992e0-bb47-11e4-923e-29334573ff5c.gif)\n\n## Installation\n\n\nGrab from the PyPI:\n\n    pip install django-orderable\n\n\nAdd to your INSTALLED_APPS:\n\n    ...\n    'orderable',\n    ...\n\nSubclass the Orderable class:\n\n    from orderable.models import Orderable\n\n\n    class Book(Orderable):\n        ...\n\nSubclass the appropriate Orderable admin classes:\n\n    from orderable.admin import OrderableAdmin, OrderableTabularInline\n\n\n    class SomeInlineClass(OrderableTabularInline):\n        ...\n\n    class SomeAdminClass(OrderableAdmin):\n        list_display = ('__unicode__', 'sort_order_display')\n        ...\n\n\njQuery and jQuery UI are used in the Admin for the draggable UI. You may override the versions with your own (rather than using Google's CDN):\n\n    class SomeAdminClass(OrderableAdmin):\n        class Media:\n            js = (\n                'path/to/jquery.js',\n                'path/to/jquery.ui.js',\n            )\n\n\n## Notes\n\n### Metaclasses\n\nIf your subclass of Orderable has a Metaclass then make sure it subclasses the Orderable one so the model is sorted by ``sort_order``.\n\n### Transactions\n\nSaving orderable models invokes a fair number of database queries, and in order\nto avoid race conditions should be run in a transaction.\n\n### Adding Orderable to Existing Models\n\nYou will need to populate the required `sort_order` field. Typically this is\ndone by adding the field in one migration with a default of `0`, then creating\na data migration to set the value to that of its primary key:\n\n\n    for obj in orm['appname.Model'].objects.all():\n        obj.sort_order = obj.pk\n        obj.save()\n\n\n### Multiple Models using Orderable\n\nWhen multiple models inherit from Orderable the `next()` and `previous()`\nmethods will look for the next/previous model with a sort order. However you'll\nlikely want to have the various sort orders determined by a foreign key or some\nother predicate. The easiest way (currently) is to override the method in\nquestion.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/incuna/django-orderable",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-orderable",
    "package_url": "https://pypi.org/project/django-orderable/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-orderable/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/incuna/django-orderable"
    },
    "release_url": "https://pypi.org/project/django-orderable/4.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Add manual sort order to Django objects via an abstract base class and admin classes.",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8484603,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f178a5459e3471b7215a136e6c3fd5738814f5bd1a11b1229461fbb9de378650",
        "md5": "b1fcdcd088cb2c0751d5b2345658cad3",
        "sha256": "d605982e320312ce60e5693114c1c48ee0e30780ce55a38749eec2af2f1e525b"
      },
      "downloads": -1,
      "filename": "django_orderable-4.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1fcdcd088cb2c0751d5b2345658cad3",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 13682,
      "upload_time": "2015-10-06T09:32:31",
      "upload_time_iso_8601": "2015-10-06T09:32:31.554848Z",
      "url": "https://files.pythonhosted.org/packages/f1/78/a5459e3471b7215a136e6c3fd5738814f5bd1a11b1229461fbb9de378650/django_orderable-4.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8597e65065636c32074ed5390a38ad52d755dd683f14a0b220dda60754de26c7",
        "md5": "94ce7e0d48b15ac681c71c2b46feee10",
        "sha256": "54ce45cc20269f5b49a9a524c7be5ef66e78d16fdf4119a5ce189c5b9e40c039"
      },
      "downloads": -1,
      "filename": "django-orderable-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "94ce7e0d48b15ac681c71c2b46feee10",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9928,
      "upload_time": "2015-10-06T09:32:23",
      "upload_time_iso_8601": "2015-10-06T09:32:23.034023Z",
      "url": "https://files.pythonhosted.org/packages/85/97/e65065636c32074ed5390a38ad52d755dd683f14a0b220dda60754de26c7/django-orderable-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}