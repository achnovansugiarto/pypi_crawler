{
  "info": {
    "author": "Incuna Ltd",
    "author_email": "dev@incuna.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "django-orderable\n================\n\nMake models orderable in the Admin.\n\nIncluded:\n\n* Abstract base Model\n* Admin class\n* Inline admin class\n* Admin templates\n\n\nInstallation\n------------\n\nGrab from the PyPI: ::\n\n    pip install django-orderable\n\n\nAdd to your INSTALLED_APPS: ::\n\n    ...\n    'orderable',\n    ...\n\nSubclass the Orderable class: ::\n\n    from orderable.models import Orderable\n\n\n    class Book(Orderable):\n        ...\n\n\n**Note:** If your subclass of Orderable has a Metaclass then make sure it subclasses the Orderable one so the model is sorted by ``sort_order``.\n\n** *Also* Note:** Saving orderable models invokes a fair number of queries and\nin order to avoid race conditions should be run in a transaction. If you're\nusing django >= 1.6 we recommend you set `DATABASES['default']['ATOMIC_REQUESTS'] = True` in your\nsettings, if you're not yet on django 1.6, we recommend use of\n`TransactionMiddleware`.\n\n\nSubclass the appropriate Orderable admin classes: ::\n\n    from orderable.admin import OrderableAdmin, OrderableTabularInline\n\n\n    class SomeInlineClass(OrderableTabularInline):\n        ...\n\n    class SomeAdminClass(OrderableAdmin):\n        list_display = ('__unicode__', 'sort_order_display')\n        ...\n\n\nYou need jQuery 1.2+ and jQuery UI 1.5+ available in the Admin for the actual moveable UI. You can either override the base admin template or add them in a Media class: ::\n\n    class SomeAdminClass(OrderableAdmin):\n        class Media:\n            js = (\n                'path/to/jquery.js',\n                'path/to/jquery.ui.js',\n            )\n\n\nCommon Gotchas\n--------------\n\nAdding Orderable to Existing Models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou will need to populate the required `sort_order` field. Typically this is done by adding the\nfield in one migration with a default of `0`, then creating a data migration to set the value to\nthat of its primary key::\n\n    for obj in orm['appname.Model'].objects.all():\n        obj.sort_order = obj.pk\n        obj.save()\n\n\nMultiple Models using Orderable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen multiple models inherit from Orderable the `next()` and `previous()` methods will look for the\nnext/previous model with a sort order. However you'll likely want to have the various sort orders\ndetermined by a foreign key or some other predicate. The easiest way (currently) is to override the\nmethod in question.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/incuna/django-orderable",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-orderable",
    "package_url": "https://pypi.org/project/django-orderable/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-orderable/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/incuna/django-orderable"
    },
    "release_url": "https://pypi.org/project/django-orderable/3.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Orderable model and admin",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8484603,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c5e4e8807b65fffb6d7f57ffa211192df6d103904c4adfa387ffc09e13d2669",
        "md5": "d0f2d2423ad5c10d26510ec26f14116a",
        "sha256": "510961a6f2fcd1107b25c7bc985cce1780bbbc5455bd1f9e7494432e06f3ede0"
      },
      "downloads": -1,
      "filename": "django_orderable-3.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0f2d2423ad5c10d26510ec26f14116a",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "requires_python": null,
      "size": 12868,
      "upload_time": "2014-12-04T16:05:16",
      "upload_time_iso_8601": "2014-12-04T16:05:16.074138Z",
      "url": "https://files.pythonhosted.org/packages/0c/5e/4e8807b65fffb6d7f57ffa211192df6d103904c4adfa387ffc09e13d2669/django_orderable-3.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c08015003e465bae1c302de2bb8e378bedf2c43181d6a29ebab25324664d423",
        "md5": "9c1214d84387d5186f376fd9f7e2c3bd",
        "sha256": "ac9fbd85871d9cfcb197ac607acaee392cae76fd1821525f35b823bc4ba04b99"
      },
      "downloads": -1,
      "filename": "django-orderable-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9c1214d84387d5186f376fd9f7e2c3bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9062,
      "upload_time": "2014-12-04T16:05:11",
      "upload_time_iso_8601": "2014-12-04T16:05:11.859545Z",
      "url": "https://files.pythonhosted.org/packages/4c/08/015003e465bae1c302de2bb8e378bedf2c43181d6a29ebab25324664d423/django-orderable-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}