{
  "info": {
    "author": "Dusan Klinec",
    "author_email": "dusan.klinec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security"
    ],
    "description": "# Monero Wallet Python implementation\n\n[![Build Status](https://travis-ci.org/ph4r05/monero-agent.svg?branch=master)](https://travis-ci.org/ph4r05/monero-agent)\n\nPure-python Monero Wallet implementation in Python3.\nSupports RingCT signature on the given Transaction Construction Data.\n\n## Work in progress\n\nThis work is still in progress. The project is initial implementation version.\nIt may contain bugs and the EC crypto operations are not constant-time as it serves mainly as PoC at the moment.\n\nMoreover, the code will probably be subject to a major refactoring and cleaning.\n\n## Supported features\n\n - Full RingCT (one UTXO)\n - Simple RingCT (more than 1 UTXOs)\n - Sub-addresses\n - Key image sync\n\n## Roadmap\n\n - Tests \n - Multisig\n - Spend proofs\n - Wallet implementation (funds receiving, UTXO mixing)\n\n## Protocol\n\nIn order to support RingCT on hardware wallet with limited resources a subdivided protocol had to be implemented.\nIt is not feasible to process the signed transaction in one run on the hardware wallet with tens of UTXOs and multiple outputs.\n\nThe introduction to the topic is described here:\n\nhttps://github.com/ph4r05/monero-trezor-doc\n\nThe documentation can be out of sync from the code. Take this source code as a primary reference.\n\nIn the current protocol it is assumed there may be multiple input UTXO (tens to hundreds). So it is optimized\nto work incrementally, one UTXO at a time. This is reasonable to assume as your funds may be scattered over\nmany small transactions. On the other hand we assume the number of outputs is relatively small (small units) as\nit usually is in the Monero transactions.\n\nIt is quite easy to extend protocol to work with large amounts of outputs but due to the message structure\nwhich is later signed it will be needed to add two more roundrips with sending output related data one by one\nto the Trezor for incremental hashing.\n\nOutputs are pinned in the beginning of the protocol - number of outputs is fixed at this point in the Trezor\nand HMAC with unique key (index dependent) is generated for each output. So in further roundtrips it is assured only\npreviously pinned outputs in the exact given order are processed. The same principle is used for each data produced by\nthe Trezor which are later used as inputs.\n\n## Project structure\n\nAgent <-> Trezor\n\nAgent is an object supposed to run on the host PC where Trezor is the HW wallet implementation.\n`agent.py` and `trezor.py` are mainly ports of the C++ code to the Python for PoC, experimentation and testing.\nThese versions are not optimized for usage in HW environment.\n\nOptimized versions are `agent_lite.py` and `trezor_lite.py`.\n\n## Serialize lib\n\nThe project depends on my `monero-serialize` library.\nData objects used in the Monero are defined there, it supports serialization / deserialization to binary format.\nThe serialized binary messages are hashed during the transaction signature.\n\nhttps://github.com/ph4r05/monero-serialize\n\n## Crypto\n\nMonero uses Ed25519 elliptic curve. The current implementation is not optimized to avoid side-channel leaks (e.g., timing)\nas it serves mainly as PoC.\n\nThe project has multiple Ed25519 implementations. One works with the normal coordinates `(x, y)` the other\nworks in extended Edwards coordinates `(x, y, z, t)`. The primary representation used is extended Edwards.\nIt is possible to switch between these two implementations. Please note a point is not represented\nin an unique way in extended coordinates and point comparisson has to be done via `crypto.point_eq()` method.\n\nThe only code directly handling point representation is `crypto.py`. All other objects are using `crypto.py`\nto do the EC computation. Point representation is opaque to the other modules.\n\nThe opaque point representation can be converted to bytearray representation suitable for transport\n(compressed, y-coordinate + sign flag) using `crypto.encodepoint()` and `crypto.decodepoint()`.\n\nScalars are represented as integers (no encoding / decoding is needed). However, we are working in modular ring so\nfor scalar operations such as addition, division, comparison use the `crypto.sc_*` methods.\n\n## Trezor-crypto\n\nA new crypto backend was added, `trezor-crypto`.\nI implemented missing cryptographic algorithms to the [trezor-crypto], branch `lib` (abbrev. TCRY).\nCompiled shared library `libtrezor-crypto.so` can be used instead of the Python crypto backend.\nTCRY implements constant-time curve operations, uses [libsodium] to generate random values.\n\nRange proof was reimplemented in C for CPU and memory efficiency.\n\nTravis tests with both crypto backends. In order to test with TCRY install all its dependencies. `libsodium` is the only one\ndependency for the shared lib. For more info take a look at `travis-install-libtrezor-crypto.sh`.\n\nCrypto dependency is selected based on the `EC_BACKEND` env var. `0` is for Python backend, `1` for TCRY.\nPath to the TCRY is specified via `LIBTREZOR_CRYPTO_PATH` env var. If the TCRY is not found or could not be loaded\nthe code fallbacks to python backend. This behaviour can be changed by setting `EC_BACKEND_FORCE` env var to `1`.\n\nTCRY is also 20 times faster (unit tests).\n\n```bash\n$> EC_BACKEND=0 ./venv/bin/python3 -m unittest discover\n.....................................................\n----------------------------------------------------------------------\nRan 53 tests in 142.363s\n\nOK\n```\n\nTCRY backend:\n\n```bash\n$> LIBTREZOR_CRYPTO_PATH=\"$HOME/libtrezor-crypto/libtrezor-crypto.so\" EC_BACKEND_FORCE=1 EC_BACKEND=1 \\\n    ./venv/bin/python3 -m unittest discover\n.....................................................\n----------------------------------------------------------------------\nRan 53 tests in 7.252s\n\nOK\n```\n\nUPDATE: I created a python binding [py-trezor-crypto] which can be installed from pip. The pip builds [trezor-crypto]\nlibrary. Please refer to the readme of the [py-trezor-crypto] for installation details (dependencies).\n\nTo install python bindings with agent run:\n\n```bash\npip install monero_agent[tcry]\n```\n\nLibsodium, pkg-config, gcc, python-dev are required for the installation.\n\n### Memory considerations\n\nPython uses arbitrary precision integers with a memory overhead.\nThe following command shows the amount of memory required for certain data types and sizes:\n\n```python\n>>> sys.getsizeof(0)\n24\n>>> sys.getsizeof(2**32-1)  # 4B num\n32\n>>> sys.getsizeof(2**64-1)  # 8B num\n36\n>>> sys.getsizeof(2**256-1)  # 32B num\n60\n>>> sys.getsizeof(b'\\x00'*32)  # 32B hex\n65\n>>> sys.getsizeof(b'\\x00'*64)  # 64B hex\n97\n```\n\nMonero works in EC with 32 B numbers.\nTo store a 32 B number it takes 60 B in integer representation and 65 B in the byte string encoded\nrepresentation (some ed25519 libraries and mininero use this representation).\nFor scalars it is apparently more effective to store integers naturally, saving both memory and CPU cycles with recoding.\n\nEC point arithmetics can use classic point coordinates `(x, y)` or extended Edwards point coordinates `(x,y,z,t)`.\nIt takes 64 and 80 B to store tuple of 2 and 4 elements respectively.\nIt thus take 184 B and 320 B to store an EC point in the natural form compared to the 65 B byte representation.\n\n\n# Related projects\n\n- [monero-trezor-doc]\n- [monero-serialize]\n- [trezor-crypto]\n- [py-trezor-crypto]\n- [py-cryptonight]\n- [trezor-core]\n- [trezor-crypto]\n- [trezor-common]\n\n\n[trezor-core]: https://github.com/ph4r05/trezor-core\n[trezor-crypto]: https://github.com/ph4r05/trezor-crypto\n[trezor-common]: https://github.com/ph4r05/trezor-common\n[libsodium]: https://github.com/jedisct1/libsodium\n[py-trezor-crypto]: https://github.com/ph4r05/py-trezor-crypto\n[py-cryptonight]: https://github.com/ph4r05/py-cryptonight\n[monero-serialize]: https://github.com/ph4r05/monero-serialize\n[monero-trezor-doc]: https://github.com/ph4r05/monero-trezor-doc",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ph4r05/monero-agent",
    "keywords": "",
    "license": "CLOSED",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monero-agent",
    "package_url": "https://pypi.org/project/monero-agent/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-agent/",
    "project_urls": {
      "Homepage": "https://github.com/ph4r05/monero-agent"
    },
    "release_url": "https://pypi.org/project/monero-agent/1.5.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Monero Agent",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10798569,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b492d3eb94a3b9b2a530a1e669c78a67dd01a3724dcbf2cc78ded6b3990177c",
        "md5": "46d70769ce956387f1b979aa7cca897f",
        "sha256": "e89ca88793d1b869781e6fe4933f0e190b0ea6ba8a4bad3d7ed1350a0b81d95f"
      },
      "downloads": -1,
      "filename": "monero_agent-1.5.1.tar.gz",
      "has_sig": true,
      "md5_digest": "46d70769ce956387f1b979aa7cca897f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 572643,
      "upload_time": "2018-07-26T17:04:46",
      "upload_time_iso_8601": "2018-07-26T17:04:46.071168Z",
      "url": "https://files.pythonhosted.org/packages/7b/49/2d3eb94a3b9b2a530a1e669c78a67dd01a3724dcbf2cc78ded6b3990177c/monero_agent-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}