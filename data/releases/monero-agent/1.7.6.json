{
  "info": {
    "author": "Dusan Klinec",
    "author_email": "dusan.klinec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security"
    ],
    "description": "Monero Wallet Python implementation\n===================================\n\n|Build Status|\n\nPure-python Monero Wallet implementation in Python3.\n\nImplements transaction signing protocol designed for Trezor hardware\nwallet as described in\n`monero-trezor-doc <https://github.com/ph4r05/monero-trezor-doc>`__.\n\nThe main purpose of this repo is to provide host side (agent) for the\ntransaction signing with the Trezor hardware wallet. The repo also\ncontains the initial implementation for the Trezor side. The Trezor\nprotocol side underwent heavy refactoring and is about to be merged to\nthe `trezor-core <https://github.com/ph4r05/trezor-core>`__ repository.\n\nThe repo provides integration tests for Trezor wallet transaction\nsigning.\n\n-  PR adding Monero support to the Trezor hardware wallet (client side\n   of the signing protocol):\n   https://github.com/trezor/trezor-core/pull/293\n-  PR adding Trezor hardware support to official Monero codebase:\n   https://github.com/monero-project/monero/pull/4241\n\nWork in progress\n----------------\n\nThis work is still in progress.\n\nThe pure python EC crypto operations are not constant-time as it serves\nmainly as PoC at the moment. The code supports also\n`trezor-crypto <https://github.com/ph4r05/trezor-crypto>`__ crypto\nbackend which is fast and constant-time.\n\nMoreover, the code will probably be subject to a major refactoring and\ncleaning.\n\nSupported features\n------------------\n\n-  Full RingCT (one UTXO)\n-  Simple RingCT (more than 1 UTXOs)\n-  Sub-addresses\n-  Key image sync\n-  Bulletproofs (batch verification, signing, ready for v9 fork)\n-  Ledger protocol implementation, HW wallet side\n\nRoadmap\n-------\n\n-  Spend proof\n-  Reserver proof\n-  Multisig\n-  Wallet implementation (funds receiving, UTXO mixing)\n-  Ledger protocol implementation, host side\n\nProtocol\n--------\n\nIn order to support RingCT on hardware wallet with limited resources a\nsubdivided protocol had to be implemented. It is not feasible to process\nthe signed transaction in one run on the hardware wallet with tens of\nUTXOs and multiple outputs.\n\nThe introduction to the topic is described here:\n\nhttps://github.com/ph4r05/monero-trezor-doc\n\nThe documentation can be out of sync from the code. Take this source\ncode as a primary reference.\n\nIn the current protocol it is assumed there may be multiple input UTXO\n(tens to hundreds). So it is optimized to work incrementally, one UTXO\nat a time. This is reasonable to assume as your funds may be scattered\nover many small transactions. On the other hand we assume the number of\noutputs is relatively small (small units) as it usually is in the Monero\ntransactions.\n\nIt is quite easy to extend protocol to work with large amounts of\noutputs but due to the message structure which is later signed it will\nbe needed to add two more roundrips with sending output related data one\nby one to the Trezor for incremental hashing.\n\nOutputs are pinned in the beginning of the protocol - number of outputs\nis fixed at this point in the Trezor and HMAC with unique key (index\ndependent) is generated for each output. So in further roundtrips it is\nassured only previously pinned outputs in the exact given order are\nprocessed. The same principle is used for each data produced by the\nTrezor which are later used as inputs.\n\nProject structure\n-----------------\n\nAgent <-> Trezor\n\nAgent is an object supposed to run on the host PC where Trezor is the HW\nwallet implementation. ``agent.py`` and ``trezor.py`` are mainly ports\nof the C++ code to the Python for PoC, experimentation and testing.\nThese versions are not optimized for usage in HW environment.\n\nOptimized versions are ``agent_lite.py`` and ``trezor_lite.py``.\n\nSerialize lib\n-------------\n\nThe project depends on my ``monero-serialize`` library. Data objects\nused in the Monero are defined there, it supports serialization /\ndeserialization to binary format. The serialized binary messages are\nhashed during the transaction signature.\n\nhttps://github.com/ph4r05/monero-serialize\n\nCrypto\n------\n\nMonero uses Ed25519 elliptic curve. The current implementation is not\noptimized to avoid side-channel leaks (e.g., timing) as it serves mainly\nas PoC.\n\nThe project uses Ed25519 implementation which works in extended Edwards\ncoordinates ``(x, y, z, t)``.\n\nThe only code directly handling point representation is ``crypto.py``.\nAll other objects are using ``crypto.py`` to do the EC computation.\nPoint representation is opaque to the other modules.\n\nThe opaque point representation can be converted to bytearray\nrepresentation suitable for transport (compressed, y-coordinate + sign\nflag) using ``crypto.encodepoint()`` and ``crypto.decodepoint()``.\n\nScalars are represented as integers (no encoding / decoding is needed).\nHowever, we are working in modular ring so for scalar operations such as\naddition, division, comparison use the ``crypto.sc_*`` methods.\n\nTrezor-crypto\n-------------\n\nA new crypto backend was added, ``trezor-crypto``. I implemented missing\ncryptographic algorithms to the\n`trezor-crypto <https://github.com/ph4r05/trezor-crypto>`__, branch\n``lib`` (abbrev. TCRY). Compiled shared library ``libtrezor-crypto.so``\ncan be used instead of the Python crypto backend. TCRY implements\nconstant-time curve operations, uses\n`libsodium <https://github.com/jedisct1/libsodium>`__ to generate random\nvalues.\n\nBorromean Range proof was reimplemented in C for CPU and memory\nefficiency.\n\nTravis tests with both crypto backends. In order to test with TCRY\ninstall all its dependencies. ``libsodium`` is the only one dependency\nfor the shared lib. For more info take a look at\n``travis-install-libtrezor-crypto.sh``.\n\nCrypto dependency is selected based on the ``EC_BACKEND`` env var. ``0``\nis for Python backend, ``1`` for TCRY. Path to the TCRY is specified via\n``LIBTREZOR_CRYPTO_PATH`` env var. If the TCRY is not found or could not\nbe loaded the code fallbacks to python backend. This behaviour can be\nchanged by setting ``EC_BACKEND_FORCE`` env var to ``1``.\n\nTCRY is also 20 times faster (unit tests).\n\n.. code:: bash\n\n    $> EC_BACKEND_FORCE=1 EC_BACKEND=0  ./venv/bin/python -m unittest monero_glue_test/test_*.py\n    ...s................................................................\n    ----------------------------------------------------------------------\n    Ran 68 tests in 416.823s\n\n    OK\n\nTCRY backend:\n\n.. code:: bash\n\n    $>  EC_BACKEND_FORCE=1 EC_BACKEND=1  ./venv/bin/python -m unittest monero_glue_test/test_*.py\n    ....................................................................\n    ----------------------------------------------------------------------\n    Ran 68 tests in 84.057s\n\n    OK\n\nUPDATE: I created a python binding\n`py-trezor-crypto <https://github.com/ph4r05/py-trezor-crypto>`__ which\ncan be installed from pip. The pip builds\n`trezor-crypto <https://github.com/ph4r05/trezor-crypto>`__ library.\nPlease refer to the readme of the\n`py-trezor-crypto <https://github.com/ph4r05/py-trezor-crypto>`__ for\ninstallation details (dependencies).\n\nTo install python bindings with agent run:\n\n.. code:: bash\n\n    pip install 'monero_agent[tcry]'\n\nLibsodium, pkg-config, gcc, python-dev are required for the\ninstallation.\n\nMore on using the repo\n----------------------\n\nPlease refer to the PoC.md for more usage examples.\n\nMemory considerations\n~~~~~~~~~~~~~~~~~~~~~\n\nPython uses arbitrary precision integers with a memory overhead. The\nfollowing command shows the amount of memory required for certain data\ntypes and sizes:\n\n.. code:: python\n\n    >>> sys.getsizeof(0)\n    24\n    >>> sys.getsizeof(2**32-1)  # 4B num\n    32\n    >>> sys.getsizeof(2**64-1)  # 8B num\n    36\n    >>> sys.getsizeof(2**256-1)  # 32B num\n    60\n    >>> sys.getsizeof(b'\\x00'*32)  # 32B hex\n    65\n    >>> sys.getsizeof(b'\\x00'*64)  # 64B hex\n    97\n\nMonero works in EC with 32 B numbers. To store a 32 B number it takes 60\nB in integer representation and 65 B in the byte string encoded\nrepresentation (some ed25519 libraries and mininero use this\nrepresentation). For scalars it is apparently more effective to store\nintegers naturally, saving both memory and CPU cycles with recoding.\n\nEC point arithmetics can use classic point coordinates ``(x, y)`` or\nextended Edwards point coordinates ``(x,y,z,t)``. It takes 64 and 80 B\nto store tuple of 2 and 4 elements respectively. It thus take 184 B and\n320 B to store an EC point in the natural form compared to the 65 B byte\nrepresentation.\n\nDonations\n=========\n\nThanks for your support!\n\n47BEukN83whUdvuXbaWmDDQLYNUpLsvFR2jioQtpP5vD8b3o74b9oFgQ3KFa3ibjbwBsaJEehogjiUCfGtugUGAuJAfbh1Z\n\nRelated projects\n================\n\n-  `monero-trezor-doc <https://github.com/ph4r05/monero-trezor-doc>`__\n-  `monero-serialize <https://github.com/ph4r05/monero-serialize>`__\n-  `trezor-crypto <https://github.com/ph4r05/trezor-crypto>`__\n-  `py-trezor-crypto <https://github.com/ph4r05/py-trezor-crypto>`__\n-  `py-cryptonight <https://github.com/ph4r05/py-cryptonight>`__\n-  `trezor-core <https://github.com/ph4r05/trezor-core>`__\n-  `trezor-crypto <https://github.com/ph4r05/trezor-crypto>`__\n-  `trezor-common <https://github.com/ph4r05/trezor-common>`__\n\n.. |Build Status| image:: https://travis-ci.org/ph4r05/monero-agent.svg?branch=master\n   :target: https://travis-ci.org/ph4r05/monero-agent\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ph4r05/monero-agent",
    "keywords": "",
    "license": "CLOSED",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monero-agent",
    "package_url": "https://pypi.org/project/monero-agent/",
    "platform": "",
    "project_url": "https://pypi.org/project/monero-agent/",
    "project_urls": {
      "Homepage": "https://github.com/ph4r05/monero-agent"
    },
    "release_url": "https://pypi.org/project/monero-agent/1.7.6/",
    "requires_dist": [
      "monero-serialize (>=2.0.7)",
      "pycryptodome",
      "py-cryptonight (>=0.1.2)",
      "chacha20poly1305",
      "nose; extra == 'dev'",
      "pep8; extra == 'dev'",
      "tox; extra == 'dev'",
      "aiounittest; extra == 'dev'",
      "requests; extra == 'dev'",
      "pympler; extra == 'dev'",
      "pypandoc; extra == 'dev'",
      "pandoc; extra == 'dev'",
      "pip; extra == 'dev'",
      "pycparser; extra == 'dev'",
      "ctypeslib2; extra == 'dev'",
      "cryptography; extra == 'dev'",
      "protobuf (==3.4.0); extra == 'dev'",
      "Sphinx (>=1.0); extra == 'docs'",
      "sphinx-rtd-theme; extra == 'docs'",
      "sphinxcontrib-programoutput; extra == 'docs'",
      "ecdsa; extra == 'poc'",
      "asyncio; extra == 'poc'",
      "requests; extra == 'poc'",
      "cmd2 (>=0.6.9); extra == 'poc'",
      "shellescape; extra == 'poc'",
      "coloredlogs; extra == 'poc'",
      "blessed (>=1.14.1); extra == 'poc'",
      "flask (>=0.12); extra == 'poc'",
      "flask-socketio; extra == 'poc'",
      "eventlet; extra == 'poc'",
      "gevent; extra == 'poc'",
      "sarge (>=0.1.5); extra == 'poc'",
      "py-trezor-crypto-ph4 (==0.1.1); extra == 'tcry'",
      "trezor; extra == 'trezor'"
    ],
    "requires_python": ">=3.5",
    "summary": "Monero Agent",
    "version": "1.7.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10798569,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfeaa2a88c0ab87310ebe0d947b9387e22de61be50202a5b73728d08b1cb5186",
        "md5": "0566dbb8371835f3524cffacdb1d0f30",
        "sha256": "229855aeffc2457c3cd20b30a41d8c31fc2898d9deb3667cfdb85ce5318aa218"
      },
      "downloads": -1,
      "filename": "monero_agent-1.7.6-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "0566dbb8371835f3524cffacdb1d0f30",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 7504422,
      "upload_time": "2018-11-27T21:55:43",
      "upload_time_iso_8601": "2018-11-27T21:55:43.104487Z",
      "url": "https://files.pythonhosted.org/packages/df/ea/a2a88c0ab87310ebe0d947b9387e22de61be50202a5b73728d08b1cb5186/monero_agent-1.7.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86e9d8b0dc1474005edb21cb594debe67af745295c860f5d699dae29355257b8",
        "md5": "2afc6054a9a6cf6a143cc404f1658351",
        "sha256": "898324657bf87c9f002dab5d2137565abda95950f52cbdbc6ccc659dd9d9910e"
      },
      "downloads": -1,
      "filename": "monero_agent-1.7.6.tar.gz",
      "has_sig": true,
      "md5_digest": "2afc6054a9a6cf6a143cc404f1658351",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8384072,
      "upload_time": "2018-11-27T21:55:53",
      "upload_time_iso_8601": "2018-11-27T21:55:53.819076Z",
      "url": "https://files.pythonhosted.org/packages/86/e9/d8b0dc1474005edb21cb594debe67af745295c860f5d699dae29355257b8/monero_agent-1.7.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}