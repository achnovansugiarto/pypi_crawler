{
  "info": {
    "author": "UPCnet Plone Team",
    "author_email": "plone.team@upcnet.es",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python"
    ],
    "description": "MAXClient\n=========\n\nClient library wrapper to access MAX API.\n\nAuthentication\n---------------\n\nMaxClient uses MAX api's, so a valid max OAuth2 username/token pair is needed to make\nany requests. To authenticate a maxlient and leave it ready to use, create a maxclient instance, specifying both Max server url and Oauth2 Server URL: ::\n\n    >>> from maxclient import MaxClient\n    >>> client = MaxClient('http://max.server.com', oauth_server='http://oauth.server.com')\n\nOnce you have the client instance, you can authenticate it using the username/token pair: ::\n\n    >>> client.setActor('user.name')\n    >>> client.setToken('NLfIgUgBgODd4sdAgDsFgdAffFigfBf0')\n\nIf you don't have the token for your username, maxclient can grab it for you, providing the password from which the token was generated originally: ::\n\n    >>> client.login(username='user.name', password='password')\n\n``client.login`` becomes interactive if username or password are not provided, so you can use it on cli scripts: ::\n\n    client.login()\n    >>> Username: user.name\n    >>> Password: *********\n\nUsage\n------\n\nThere are two versions of the client, one is rpc-like and the other one is rest-ish. The default one (rpc) one implements a method for every api endpoint available on max, for example: ::\n\n    >>> client.addUser('user.name')\n    >>> client.getUser('user.name')\n\nrpc-client returns responses with 3 value in a tuple, in the form: ::\n\n    (True, 201, {})\n\nWhere the first value is wether the request did finish succesfully, the second the response code of the request, and the third the response content. Response content may be a dict or list loaded from a json, or None if no valid json response found\n\nNote that not all endpoints may be implemented in the rpc-client, as a different method is needed for every endpoint. For parameters of every method, see code in client.py\n\n\nRESt-ish client\n---------------\n\nThe rest-ish client is an attempt to make a generic wrapper for max api, so you can easily access all available endpoints with a unique client, and without the need for updating it constantly. The authentication is like in the rpc client, you just have to import it from a different location: ::\n\n    >>> from maxclient.rest import MaxClient\n\nTo use this client, you have to know how max apis works and how they are structured, as the access to the api is implemented by mimicking url access, for example. To access the endpoint to add a user, as described on max documentation, you have to make a ``POST`` request to ``/people/{username}``. To make this with maxclient: ::\n\n    >>> maxclient.people['user.name'].post()\n\nWhere ``people`` is a resource collection (a fixed name on the endpoint url), and 'user.name' is a resource item (a variable name on the endpoint url). So, resource collections are accessed as attributes, and resource items as dict-like accessors. Both resource items and resource collections can contain each other: ::\n\n    >>> maxclient.people['user.name'].activities.get()\n\nThe last part of the command, indicates the method which will be used to access the endpoint. Resource items and collection objects are lazy, so any action will be executed until a method executed on top of a resource.\n\nNamed parameters passed to the client will be passed as json when doing ``.post()`` and ``.put()`` requests. So if we execute: ::\n\n    >>> maxclient.people['user.name'].post(displayName='User Name')\n\na json will be generated from kwargs and sent in the request body: ::\n\n    {\n        \"displayName\": \"User Name\"\n    }\n\nif you want you can prepare a dict with all params that need to be in that json, and pass it through the ``data`` argument, and the result will be the same. if data argument is present, all other kwargs are ignored: ::\n\n    >>> params = dict(displayName='User Name')\n    >>> maxclient.people['user.name'].post(data=params)\n\nSome endpoints methods have defined some sensible defaults. You can view the defaults defined in defaults.py, or inspect them by code: ::\n\n    >>> maxclient.people['user.name'].defaults('post')\n    {'object': {'objectType': 'note'}}\n\nThis defaults are used as a base which is updated using the kwargs provided. I this way, when we make this request: ::\n\n    >>> maxclient.people['user.name'].post(generator='Twitter')\n\nThe data that will be send in the request body will be a combination of the defaults and kwargs: ::\n\n    {\n        \"object\": {\n            \"objectType\": \"note\"\n        }\n        \"generator\": \"Twitter\"\n    }\n\nYou can pass kwargs in the form key_subkey, and will be interpreted as nested keys. So you can do things like: ::\n\n>>> maxclient.people['user.name'].post(generator='Twitter', object_content='Hello world')\n\nThat results in the following request body: ::\n\n    {\n        \"object\": {\n            \"objectType\": \"note\",\n            \"content\": \"Hellow World\"\n        }\n        \"generator\": \"Twitter\"\n    }\n\nIf your requests needs query string parameters, you must feed them trough the ``qs`` argument as a dict, and the key-value pairs will be urlencoded to a querystring, for example, to limit the results of the request with a  ``?limit01``: ::\n\n    >>> maxclient.people['carles.bruguera'].activities.get(qs={'limit': 1})\n\n\nAnd the last thing, if you need to upload a file, feed the file object or stream object trough the file_upload param as follows. Feed the raw open file, WITHOUT reading it, we need the object not the content of the file: ::\n\n    >>> avatar = open('/path/to/avatar.png', 'rb')\n    >>> maxclient.people['carles.bruguera'].avatar.post(upload_file=avatar)\n\nMaxclient will respond with the parsed json response of max when the request succedded, and will raise an RequestError exception in any other case, which message will indicate the reason of the error.\n\n\n\nFor more information on max see:\n\nhttps://github.com/UPCnet/max\nhttps://github.com/UPCnet/maxserver.devel\n\n\nCHANGELOG\n==========\n\n4.0.2 (2014-05-28)\n------------------\n\n* Merge branch 'develop' of github.com:UPCnet/maxclient into develop [Carles Bruguera]\n* Save last response status [Carles Bruguera]\n* Configure max instance to log tracebacks on exceptions [Carles Bruguera]\n\n4.0.1 (2014-05-07)\n------------------\n\n* Updated resources [Carles Bruguera]\n* Identify filesystem resources based on presence of files in request [Carles Bruguera]\n* Don't return on try [Carles Bruguera]\n* Allow multiple upload_files specifying id [Carles Bruguera]\n* include json data as json_data in multipart paylod [Carles Bruguera]\n* Allow ResourceItems in ResourceItems [Carles Bruguera]\n* Don't treat list content on data param as dicts (...) [Carles Bruguera]\n* Update defaults and resources list [Carles Bruguera]\n\n4.0.0 (2014-04-15)\n------------------\n\n* Fix wrong default [Carles Bruguera]\n* Add some defaults [Carles Bruguera]\n* Update resources from max [Carles Bruguera]\n* Include http response code on exception [Carles Bruguera]\n* Add defaults for posting a conversation message [Carles Bruguera]\n* Use a app wrapper for requests on wsgi client [Carles Bruguera]\n* Add wsgi version of maxclient [sunbit]\n* Fetch oauth server from max info endpoint if not provided [sunbit]\n* Add license [Victor Fernandez de Alba]\n\n3.6.3 (2014-03-25)\n------------------\n\n* Updated use case HEAD returning 404 and returning as it's not implemented when in fact, it is but simply the resource does not exist. [Victor Fernandez de Alba]\n\n3.6.2 (2014-03-24)\n------------------\n\n* Separate common features into BaseClient [Carles Bruguera]\n* Default for contexts [Victor Fernandez de Alba]\n* Update resources [Carles Bruguera]\n* Update resources [Carles Bruguera]\n* Updated resources from max [Carles Bruguera]\n* Wrapper for user [Carles Bruguera]\n* SYntax fix [Carles Bruguera]\n* upload file base on file object, not content [Carles Bruguera]\n* Add support to file uploads [Carles Bruguera]\n* Add support for dict-based query strings [Carles Bruguera]\n* Document variable pass syntax [Carles Bruguera]\n* Move helper methods to utils.py [Carles Bruguera]\n* expand key.subkey and key_subkey dict keys as nested dicts [Carles Bruguera]\n* Make dict updates recursive [Carles Bruguera]\n* Add defaults definition system [Carles Bruguera]\n* Add debug method for raw requests [Carles Bruguera]\n* Wrap non-hashes {hash} variables into hashes [Carles Bruguera]\n* Typo [Carles Bruguera]\n* Documentation [Carles Bruguera]\n* Catch bad gateway errors [Carles Bruguera]\n* Update resources definitions [Carles Bruguera]\n* First version of generic rest-like maxclient [Carles Bruguera]\n* Add getUser endpoint wrapper [Carles Bruguera]\n* Better bad password error [Carles Bruguera]\n\n3.6.1 (2014-02-24)\n------------------\n\n* Add both endpoints wrappers, grant and revoke [Victor Fernandez de Alba]\n* Add security grant role wrapper [Victor Fernandez de Alba]\n\n3.6 (2014-01-20)\n----------------\n\n* Added get_context, grant permission, revoke permission [Victor Fernandez de Alba]\n\n3.5.3 (2013-10-29)\n------------------\n\n* Methods to manage context tags [Carles Bruguera]\n\n3.5.2 (2013-10-08)\n------------------\n\n* Fix bug that returned None when max returned [] [Carles Bruguera]\n\n3.5.1 (2013-10-03)\n------------------\n\n * Added mod operation for context [Carles Bruguera]\n\n3.5 (2013-09-13)\n----------------\n\n * Update Manifest [Victor Fernandez de Alba]\n * New wraper for conversation tokens endpoint. [Victor Fernandez de Alba]\n * Added wrapper for post activity as a context endpoint [Victor Fernandez de Alba]\n * Added new method for identify current actor [Victor Fernandez de Alba]\n * Update sensible defaults for maxclient [Victor Fernandez de Alba]\n\n3.4.1 (2013-08-02)\n------------------\n\n * Added wrapper for upload users avatar [Victor Fernandez de Alba]\n\n3.4 (2013-07-25)\n----------------\n\n * Add more verbose errors [Victor Fernandez de Alba]\n * Updated minor version to match the MAX minor version [Victor Fernandez de Alba]\n\n3.3.3 (2013-07-10)\n------------------\n\n * Fix latter endpoint added and better handling for delete operations. [Victor Fernandez de Alba]\n * Merge branch 'master' of github.com:UPCnet/maxclient [Victor Fernandez de Alba]\n * Add new endpoint wrapper [Victor Fernandez de Alba]\n * Better propagation of the information about what happened [Victor Fernandez de Alba]\n\n3.3.2 (2013-07-01)\n------------------\n* Added endpoint wrapper for returning the subscirbers for a given context\n* Added endpoint wrapper for unsubscribing a user from a context\n\n3.3.1 (2013-06-04)\n------------------\n* Added fallback to work with osiris oauth servers and legacy ones\n\n3.3 (2013-06-04)\n----------------\n* Updated to 3.3 MAX\n\n3.0 (2013-04-15)\n----------------\n* Updated to latest implementations\n\n1.0 (Unreleased)\n----------------\n*  Initial version",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/upcnet/maxclient",
    "keywords": "web pyramid pylons client",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "maxclient",
    "package_url": "https://pypi.org/project/maxclient/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/maxclient/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/upcnet/maxclient"
    },
    "release_url": "https://pypi.org/project/maxclient/4.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Client library wrapper to access MAX API.",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1595942,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f17768fa6a4b4e4fae9efca98883ee5539be7d3a7ede2a97c94637754d2e540",
        "md5": "a298cd480e3d63502326d88eb18be3d1",
        "sha256": "8836287336bc31ae97e88ff8182e1c7d18e47f7a30bed1b5e58eb982873e58b9"
      },
      "downloads": -1,
      "filename": "maxclient-4.0.2.zip",
      "has_sig": false,
      "md5_digest": "a298cd480e3d63502326d88eb18be3d1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32314,
      "upload_time": "2014-05-28T15:55:29",
      "upload_time_iso_8601": "2014-05-28T15:55:29.009568Z",
      "url": "https://files.pythonhosted.org/packages/2f/17/768fa6a4b4e4fae9efca98883ee5539be7d3a7ede2a97c94637754d2e540/maxclient-4.0.2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}