{
  "info": {
    "author": "La Rosa Biagio",
    "author_email": "larosa@diag.uniroma1.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Description\nMemory Wrap is an extension to image classification models that improves both data-efficiency and model interpretability, adopting a sparse content-attention mechanism between the input and some memories of past training samples.\n\n# Installation\nThis is a PyTorch implementation of Memory Wrap. To install Memory Wrap run the following command:\n```\npip install memorywrap\n```\n\nThe library contains two main classes:\n- *MemoryWrapLayer*: it is the Memory Wrap variant described in the paper that uses both the input encoding and the memory encoding to compute the output;\n- *BaselineMemory*: it is the baseline that uses only the memory encoding to compute the output.\n\n# Usage\n## Instantiate the layer\n```python\nmemorywrap = MemoryWrapLayer(encoder_dim, output_dim, mlp_activation=torch.nn.ReLU())\n```\nor, for the baseline that uses only the memory to output the prediction:\n```python\nmemorywrap = BaselineMemory(encoder_dim, output_dim, mlp_activation=torch.nn.ReLU())\n```\nwhere\n- *encoder_dim* is the output dimension of the last layer of the encoder \n- *output_dim* is the desired output dimensione. In the case of the paper *output_dim* is equal to the **number of classes**;\n- *mlp_activation* s the activation function that must be used in the hidden layer of multi-layer perceptron.\n\n## Forward call\nAdd the forward call to your forward function.\n```python\noutput_memorywrap = memorywrap(input_encoding, memory_encoding, return_weights=False)\n```\nwhere *input_encoding* and *memory_encoding* are the outputs of the the encoder of rispectively the current input and the memory set. <br>\nThe last argument of the Memory Wrap's call function is a boolean flag controlling the number of outputs returned. If the flag is True, then the layer returns both the output and the sparse attention weight associated to each memory sample; if the flag is False, then the layer return only the output.\n\n# Additional information\nHere you can find link to additional source of information about Memory Wrap:\n- <a href=\"https://arxiv.org/abs/2106.01440\">Paper</a>\n- <a href=\"https://github.com/KRLGroup/memory-wrap\">GitHub repo</a>\n- <a href=\"https://colab.research.google.com/drive/1OPjcpTH7X8EV1ev361iuhVzd2Jfp9kFA\">Jupyter notebook</a>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memorywrap",
    "package_url": "https://pypi.org/project/memorywrap/",
    "platform": "",
    "project_url": "https://pypi.org/project/memorywrap/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/memorywrap/1.0.6/",
    "requires_dist": [
      "entmax",
      "torch (>1.5)"
    ],
    "requires_python": "",
    "summary": "Memory Wrap: an extension for image classification models",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14666407,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c8e7383dce973e483ad580d31ed155c35d86a8a25fd904edf2896860bd02432",
        "md5": "8ad3d1bc11ea6c5b007bad930f0a1703",
        "sha256": "19c4c75e658698e9fb4ad4acb8f8841a894ea37a75b7457bb5b4f08205683a7c"
      },
      "downloads": -1,
      "filename": "memorywrap-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ad3d1bc11ea6c5b007bad930f0a1703",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4594,
      "upload_time": "2021-06-09T21:49:10",
      "upload_time_iso_8601": "2021-06-09T21:49:10.299422Z",
      "url": "https://files.pythonhosted.org/packages/5c/8e/7383dce973e483ad580d31ed155c35d86a8a25fd904edf2896860bd02432/memorywrap-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "042a88bc47d6551777784edb1556a951c5bf4f0c450751af74c8b88fed372fda",
        "md5": "ed07f365a9b2f5ac1e593a1e9aaf961d",
        "sha256": "c803f9f59ca1ea87d0945b81c6397214788f7515f888a4072b8c3c8953299318"
      },
      "downloads": -1,
      "filename": "memorywrap-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "ed07f365a9b2f5ac1e593a1e9aaf961d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3567,
      "upload_time": "2021-06-09T21:49:11",
      "upload_time_iso_8601": "2021-06-09T21:49:11.482261Z",
      "url": "https://files.pythonhosted.org/packages/04/2a/88bc47d6551777784edb1556a951c5bf4f0c450751af74c8b88fed372fda/memorywrap-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}