{
  "info": {
    "author": "Cubicpath",
    "author_email": "Cubicpath@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "dyncommands\n===============\nDynamic command execution, parsing, and storage.\n\n------------------------------\n\n[![Tests](https://img.shields.io/github/workflow/status/Cubicpath/dyncommands/Tests?logo=github&style=for-the-badge)](https://github.com/Cubicpath/dyncommands/actions/workflows/tests.yaml)\n[![Codecov](https://img.shields.io/codecov/c/gh/Cubicpath/dyncommands?label=Coverage&logo=codecov&style=for-the-badge)](https://codecov.io/gh/Cubicpath/dyncommands)\n[![MIT License](https://img.shields.io/github/license/Cubicpath/dyncommands?style=for-the-badge)](https://choosealicense.com/licenses/mit)\n\n[![PyPI](https://img.shields.io/pypi/v/dyncommands?label=PyPI&logo=pypi&style=flat-square)](https://pypi.org/project/dyncommands/)\n[![Python](https://img.shields.io/pypi/pyversions/dyncommands?label=Python&logo=python&style=flat-square)](https://python.org)\n[![CPython](https://img.shields.io/pypi/implementation/dyncommands?label=Impl&logo=python&style=flat-square)](https://python.org)\n\n------------------------------\nAbout:\n---------------\nDyncommands allows you to dynamically import and run python functions. Useful for adding commands to IRC chatbots or CLI applications without a restart.\n\nWhen parsing a string, it separates the command name from arguments, and executes the stored function with those arguments.\nEach time the parser is called, you can pass in your own custom kwargs that the command will have access to.\n\nAll command modules are compiled through [RestrictedPython](https://github.com/zopefoundation/RestrictedPython) before being allowed to run.\nYou can turn off Restricted execution by setting CommandParser._unrestricted to _true_, though this is highly discouraged when running untrusted code.\n\nHow to use:\n---------------\n\n### Short example:\n\n```python\nfrom pathlib import Path\nfrom dyncommands import CommandParser, CommandContext, CommandSource\n\noutput: str = ''\n\ndef callback(text, *args):\n    global output\n    output = text\n\npath = Path('path/to/directory')  # Must be a directory with a commands.json file in it\nparser = CommandParser(path)  # Create the parser, which initializes using data located in the path directory\nsource = CommandSource(callback)  # Create a source, which is used to talk back to the caller\n\ninput_ = 'command-that-returns-wow arg1 arg2'  # this command would call zzz__command-that-returns-wow.py with arg1 and arg2\n\nparser.parse(CommandContext(input_, source))  # Parse the new context and run the command and callback (If no errors occur)\nassert output == 'wow'\n```\n\n### Command metadata:\n\nMetadata for commands are stored in the commands.json file inside the _commands_path_ of the parser.\nThis is where all the data for the parser is loaded or stored.\n\nAll commands.json files are validated with [JSON Schemas](https://json-schema.org/) through the [jsonschema](https://pypi.org/project/jsonschema/) python package\n\n#### commands.json [Draft-07](https://tools.ietf.org/html/draft-handrews-json-schema-01) JSON Schema\n\n| key                      | type           | description                                                                             | default |\n|--------------------------|----------------|-----------------------------------------------------------------------------------------|---------|\n| commandPrefix (Required) | string         | Strings must start with this prefix, otherwise it is ignored. Empty string accepts all. | N/A     |\n| commands (Required)      | array[Command] | Contains metadata for the stored command modules.                                       | N/A     |\n\n#### Command object [Draft-07](https://tools.ietf.org/html/draft-handrews-json-schema-01) JSON Schema\n\n| key             | type           | description                                                                                       | default |\n|-----------------|----------------|---------------------------------------------------------------------------------------------------|---------|\n| name (Required) | string         | Uniquely identifies the command to the CommandParser.                                             | N/A     |\n| usage           | string         | Usage information (How to use args).                                                              | \"\"      |\n| description     | string         | Description of command.                                                                           | \"\"      |\n| permission      | integer        | The permission level the CommandSource requires to run the command.                               | 0       |\n| function        | boolean, null  | Whether there is an associated python module to load.                                             | null    |\n| children        | array[Command] | Sub-commands; these are handled by the parent's function. (No associated modules for themselves). | []      |\n| overridable     | boolean        | Whether the CommandParser can override any data inside this object (must be manually enabled).    | true    |\n| disabled        | boolean        | If __true__ still load command, but raise a DisabledError when attempting to execute.             | false   |\n\n__NOTE:__ Commands modules are not loaded unless they are listed in commands.json with the \"function\" key set to true.\n\n#### Example commands.json contents:\n```json\n{\n  \"commandPrefix\": \"!\",\n  \"commands\": [\n    {\n      \"name\": \"test\",\n      \"usage\": \"test [*args:any]\",\n      \"description\": \"Test command.\",\n      \"permission\": 500,\n      \"function\": true\n    },\n    {\n      \"name\": \"test2\",\n      \"function\": false\n    }\n  ]\n}\n```\n\n### Command modules:\n\nDynamically-loaded commands are denoted by filename with a prefix of \"zzz__\". Inside a command module,\nthere is a function defined as \"command\". This function will be mapped to a Command's function attribute\nand stored in memory for execution. The function has access to any args that were parsed, as well as kwargs:\n\n1. 'self' (Command), which houses the metadata for the command that's being executed.\n\n2. 'parser' (CommandParser), which stores the list of registered commands and command data.\n\n3. 'context' (CommandContext), which supplies the CommandSource and the original text sent for parsing.\n\n- Any custom kwargs passed to CommandParser.parse.\n\nSince commands cannot import their own modules, some are included in globals (math, random, and string).\n\n#### Example command module:\n```python\ndef command(*args, **kwargs):\n    self, context = kwargs.pop('self'), kwargs.pop('context')\n    source = context.source\n    if len(args) == 2:\n        amount, sides = abs(int(getitem(args, 0))), abs(int(getitem(args, 1)))\n        if amount > 0 and sides > 0:\n            dice_rolls = [f\"{(str(i + 1) + ':') if amount > 1 else ''} {str(random.randint(1, sides))}/{sides}\" for i in range(amount)]\n            source.send_feedback(f\"/me \\U0001f3b2 {source.display_name} rolled {'a die' if amount == 1 else str(amount) + ' dice'} with {sides} side{'' if sides == 1 else 's'}: {', '.join(dice_rolls)} \\U0001f3b2\")\n        else:\n            raise ImproperUsageError(self, context)\n    else:\n        raise ImproperUsageError(self, context)\n```\n\nAt any time, you can call CommandParser.reload() to reload all command modules and metadata from disk storage.\n\n#### Example file structure:\n    ../\n    │\n    ├───[commands_path]/\n    │       ├─── commands.json\n    │       ├─── zzz__[command1].py\n    │       ├─── zzz__[command2].py\n    │       └─── zzz__[command3].py\n    │\n\n### Adding/Removing Commands:\n\nTo add commands, you can either manually enter data into a commands.json file, or use the\nCommandParser.add_command(__text__: _str_, __link__: _bool = False_, __**kwargs__) method.\nThe easiest way to use this method is to read the command module as text and pass that to the first argument.\nYou can also store command modules online to allow for remote installation, as setting the __link__ parameter to __True__\nwill read __text__ as a link, and will get the raw text data from that link. Ex: gist and pastebin.\n\n__NOTE:__ When adding a command, metadata for 'name' __must__ to be filled. This can be done in the form of comments.\n\n\n#### Example of metadata as comments:\n```python\n# Name: points\n# Usage: points [get (username:string)| set (username:string amount:integer)]\n# Description: Get your current points\n# Permission: 0\n# Children: [{'name': 'get', 'usage': 'get (username:string)', 'permission':0}, {'name': 'set', 'usage': 'set (username:string amount:integer)', 'permission':500}]\ndef command(*args, **kwargs):\n    ...\n```\n\nRemoving an already added command is relatively easy. Just call CommandParser.remove_command(__name__: _str_) with the name\nof the command that you want to remove, and it will delete both the metadata and the command module from the disk.\n\nIf you don't want to delete the command when removing, a better alternative is to disable it with\nCommandParser.set_disabled(__name__: _str_, __value__: _bool_).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Cubicpath/dyncommands",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dyncommands",
    "package_url": "https://pypi.org/project/dyncommands/",
    "platform": "",
    "project_url": "https://pypi.org/project/dyncommands/",
    "project_urls": {
      "Homepage": "https://github.com/Cubicpath/dyncommands"
    },
    "release_url": "https://pypi.org/project/dyncommands/1.3/",
    "requires_dist": [
      "jsonschema (>=4.3.2)",
      "requests (>=2.26.0)",
      "RestrictedPython (>=5.2)",
      "pylint (>=2.12.2) ; extra == 'testing'",
      "pytest (>=6.2.5) ; extra == 'testing'",
      "pytest-cov (>=3.0.0) ; extra == 'testing'",
      "tox (>=3.24.4) ; extra == 'testing'"
    ],
    "requires_python": ">=3.9",
    "summary": "Dynamic command execution, parsing, and storage.",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12462704,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "411f24f111b57fb276b01264ba6017d8a6b88bcc7dfac3c3f32005d18695546f",
        "md5": "9982576ee1c5e211118c1883ce95c490",
        "sha256": "b4080afcacafde270f77183a613a5906aa44a1ea5291209186a47df3754849c0"
      },
      "downloads": -1,
      "filename": "dyncommands-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9982576ee1c5e211118c1883ce95c490",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 22123,
      "upload_time": "2022-01-03T08:39:45",
      "upload_time_iso_8601": "2022-01-03T08:39:45.299515Z",
      "url": "https://files.pythonhosted.org/packages/41/1f/24f111b57fb276b01264ba6017d8a6b88bcc7dfac3c3f32005d18695546f/dyncommands-1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "026f2b41b35bc826cdca68cd8172007509d0eec0ac48fbdde88d67ce46a0cb9f",
        "md5": "f98500e7eabaee5edccf1461a3e096bb",
        "sha256": "51098202dc444e4defeb49beba7cca9ab25186a8d2bc7664c0a437dec5e29c07"
      },
      "downloads": -1,
      "filename": "dyncommands-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f98500e7eabaee5edccf1461a3e096bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 21911,
      "upload_time": "2022-01-03T08:39:46",
      "upload_time_iso_8601": "2022-01-03T08:39:46.896237Z",
      "url": "https://files.pythonhosted.org/packages/02/6f/2b41b35bc826cdca68cd8172007509d0eec0ac48fbdde88d67ce46a0cb9f/dyncommands-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}