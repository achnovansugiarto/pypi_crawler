{
  "info": {
    "author": "Awes Mubarak",
    "author_email": "contact@awesmubarak.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "# Markdown_strings package\n\nMarkdown is a markup language with plain text formatting syntax. This package\nallows the creation of markdown-compliant strings. The following is a summary\nof features with usage examples.\n\nNote: asterisk and underscores are escaped for all functions that do not format\nto code (`inline_code` and `code_block`).\n\n## Standard markdown features\n\n### Header\n\nReturn a header of specified level.\n\nKeyword arguments:\n\n-   style -- Specifies the header style (default atx). The \"atx\" style uses\n    hash signs, and has 6 levels. The \"setext\" style uses dashes or equals\n    signs for headers of levels 1 and 2 respectively, and is limited to\n    those two levels. The number of dashes or equals signs is either the length\n    of the text, or 3.\n\nSpecifying a level outside of the style's range results in a ValueError.\n\n```python\n>>> header(\"Main Title\", 1)\n'# Main Title'\n>>> header(\"Smaller subtitle\", 4)\n'#### Smaller subtitle'\n>>> header(\"Setext style\", 2, \"setext\")\n'Setext style\\n---'\n```\n\n### Italics\n\nReturn italics formatted text.\n\n```Python\n>>> italics(\"This text is italics\")\n'_This text is italics_'\n```\n\n### Bold\n\nReturn bold formatted text.\n\n```python\n>>> bold(\"This text is bold\")\n'**This text is bold**'\n```\n\n### Inline code\n\nReturn formatted inline code.\n\n```python\n>>> inline_code(\"This text is code\")\n'`This text is code`'\n```\n\n### Code block\n\nReturn a code block.\n\nIf a language is specified a fenced code block is produced, otherwise the\nblock is indented by four spaces.\n\nKeyword arguments:\n\n-   language -- Specifies the language to fence the code in (default blank).\n\n````python\n    >>> code_block(\"This is a simple codeblock.\")\n    '    This is a simple codeblock.'\n    >>> code_block(\"This is a simple codeblock.\\\\nBut it has a linebreak!\")\n    '    This is a simple codeblock.\\\\n    But it has a linebreak!'\n    >>> code_block(\"This block of code has a specified language.\", \"python\")\n    '```python\\\\nThis block of code has a specified language.\\\\n```'\n    >>> code_block(\"So\\\\nmany\\\\nlinebreaks.\", \"python\")\n    '```python\\\\nSo\\\\nmany\\\\nlinebreaks.\\\\n```'\n````\n\n### Link\n\nReturn an inline link.\n\n```python\n>>> link (\"This is a link\", \"https://github.com/awesmubarak/markdown_strings\")\n'[This is a link](https://github.com/awesmubarak/markdown_strings)'\n```\n\n### Image\n\nReturn an inline image.\n\nKeyword arguments:\n\n-   title -- Specify the title of the image, as seen when hovering over it.\n\n```python\n>>> image(\"This is an image\", \"https://avatars3.githubusercontent.com/u/24862378\")\n'![This is an image](https://avatars3.githubusercontent.com/u/24862378)'\n>>> image(\"This is an image\", \"https://avatars3.githubusercontent.com/u/24862378\", \"awes\")\n'![This is an image](https://avatars3.githubusercontent.com/u/24862378) \"awes\"'\n```\n\n### Unordered list\n\nReturn an unordered list from an list.\n\n```python\n>>> unordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n'-   first\\\\n-   second\\\\n-   third\\\\n-   fourth'\n>>> unordered_list([1, 2, 3, 4, 5])\n'-   1\\\\n-   2\\\\n-   3\\\\n-   4\\\\n-   5'\n```\n\n### Ordered list\n\nReturn an ordered list from an list.\n\n```python\n>>> ordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n'1.  first\\\\n2.  second\\\\n3.  third\\\\n4.  fourth'\n```\n\n### Blockquote\n\nReturn a blockquote.\n\n```python\n>>> blockquote(\"A simple blockquote\")\n'> A simple blockquote'\n```\n\n### Horizontal rule\n\nReturn a horizontal rule.\n\nKeyword arguments:\n\n-   length -- Specifies the length of the rule (default 79, minimum 3).\n-   style -- Character used for the rule (may be either \"\\_\" or \"\\*\").\n\nIf the length is too low, or the style is invalid, a ValueError is raised.\n\n```python\n>>> horizontal_rule()\n'_______________________________________________________________________________'\n>>> horizontal_rule(length=5, style=\"*\")\n'*****'\n```\n\n## Non-standard markdown\n\n### Strikethrough\n\nReturn text with strike-through formatting.\n\n```python\n>>> strikethrough(\"This is a lie\")\n'~This is a lie~'\n```\n\n### Task list\n\nReturn a task list.\n\nThe task_list should be a 2-dimensional iterable; the first item should be the\ntask text and the second the boolean completion state.\n\n```python\n>>> task_list([[\"Be born\", True], [\"Be dead\", False]])\n'- [X] Be born\\\\n- [ ] Be dead'\n```\n\n### Table row\n\nReturn a single table row.\n\nKeyword arguments:\n\n-   pad -- The pad should be an list of the same size as the input text list.\n    It will be used to format the row's padding.\n\n```python\n>>> table_row([\"First column\", \"Second\", \"Third\"])\n'| First column | Second | Third |'\n>>> table_row([\"First column\", \"Second\", \"Third\"], [10, 10, 10])\n'| First column | Second     | Third      |'\n```\n\n### Delimiter row\n\nReturn a delimiter row for use in a table.\n\n```python\n>>> table_delimiter_row(3)\n'| --- | --- | --- |'\n```\n\n### Table\n\nReturn a formatted table, generated from lists representing columns.\n\nThe function requires a 2-dimensional list, where each list is a column\nof the table. This will be used to generate a formatted table in string\nformat.\n\n```python\n>>> table([[\"1\",\"2\",\"3\"], [\"4\",\"5\",\"6\"], [\"7\",\"8\",\"9\"]])\n'| 1 | 4 | 7 |\\\\n| --- | --- | --- |\\\\n| 2 | 5 | 8 |\\\\n| 3 | 6 | 9 |'\n\n>>> table([[\"Name\", \"Awes\", \"Bob\"], [\"User\", \"mub123\", \"\"]])\n'| Name | User   |\\\\n| ---- | ------ |\\\\n| Awes | mub123 |\\\\n| Bob  |        |'\n```\n\nThis table, when parsed, will look like this:\n\n| Name | User   |\n| ---- | ------ |\n| Awes | mub123 |\n| Bob  |        |\n\n### Table from rows\n\nReturn a formatted table, using each list as the list. The specifics are the\nsame as those for the table function.\n\n```python\n>>> table_from_rows([[\"1\",\"2\",\"3\"],[\"4\",\"5\",\"6\"],[\"7\",\"8\",\"9\"]])\n'| 1 | 2 | 3 |\\\\n| --- | --- | --- |\\\\n| 4 | 5 | 6 |\\\\n| 7 | 8 | 9 |'\n```\n\n## Helper functions\n\nReturn text with formatting escaped\n\nMarkdown requires a backslash before literal underscores or asterisk, to avoid\nformatting to bold or italics.\n\n```python\n>>> esc_format(\"Normal text\")\n'Normal text'\n>>> esc_format(\"Text with **bold**\")\n'Text with \\*\\*bold\\*\\*'\n>>> esc_format(\"Text with _italics_\")\n'Text with \\_italics\\_'\n>>> esc_format(\"Text with _**complicated** formatting_\")\n'Text with \\_\\*\\*complicated\\*\\* formatting\\_'\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awesmubarak/markdown_strings",
    "keywords": "markdown md",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markdown-strings",
    "package_url": "https://pypi.org/project/markdown-strings/",
    "platform": "",
    "project_url": "https://pypi.org/project/markdown-strings/",
    "project_urls": {
      "Homepage": "https://github.com/awesmubarak/markdown_strings"
    },
    "release_url": "https://pypi.org/project/markdown-strings/3.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create markdown formatted text",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6362038,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7757915a1207eac422a397059de2368151288bd5113fc20cfa46dfbd062e793",
        "md5": "552f62fa8cd82bddc5fed60355305136",
        "sha256": "105c7914d0bb03ba878c6e336031d0fc050727f6e1e2fce6d3b399761170c25d"
      },
      "downloads": -1,
      "filename": "markdown_strings-3.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "552f62fa8cd82bddc5fed60355305136",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 7889,
      "upload_time": "2019-12-26T14:29:47",
      "upload_time_iso_8601": "2019-12-26T14:29:47.595242Z",
      "url": "https://files.pythonhosted.org/packages/a7/75/7915a1207eac422a397059de2368151288bd5113fc20cfa46dfbd062e793/markdown_strings-3.2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}