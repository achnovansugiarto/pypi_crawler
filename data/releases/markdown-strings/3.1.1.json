{
  "info": {
    "author": "Awes Mubarak",
    "author_email": "awes.mubarak@awesmubarak.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "========================\nMarkdown_strings package\n========================\n\nMarkdown is a markup language with plain text formatting syntax. This package\nallows the creation of markdown-compliant strings. The following is a summary\nof features with usage examples.\n\nNote: asterisk and underscores are escaped for all functions that do not format\nto code (inline_code and code_block).\n\nStandard markdown features\n==========================\n\nHeader\n------\n\nReturn a header of specified level.\n\nKeyword arguments:\n    style -- Specifies the header style (default atx). The \"atx\" style uses\n    hash signs, and has 6 levels. The \"setext\" style uses dashes or equals\n    signs for headers of levels 1 and 2 respectively, and is limited to\n    those two levels.\n\nSpecifying a level outside of the style's range results in a ValueError.\n::\n\n    >>> header(\"Main Title\", 1)\n    '# Main Title'\n    >>> header(\"Smaller subtitle\", 4)\n    '#### Smaller subtitle'\n    >>> header(\"Setext style\", 2, \"setext\")\n    'Setext style\\n---'\n\n\nItalics\n-------\n\nReturn italics formatted text.\n::\n\n    >>> italics(\"This text is italics\")\n    '_This text is italics_'\n\n\nBold\n----\n\nReturn bold formatted text.\n::\n\n    >>> bold(\"This text is bold\")\n    '**This text is bold**'\n\n\nInline code\n-----------\n\nReturn formatted inline code.\n::\n\n    >>> inline_code(\"This text is code\")\n    '`This text is code`'\n\n\nCode block\n----------\n\nReturn a code block.\n\nIf a language is specified a fenced code block is produced, otherwise the\nblock is indented by four spaces.\n\nKeyword arguments:\n    language -- Specifies the language to fence the code in (default blank).\n::\n\n    >>> code_block(\"This is a simple codeblock.\")\n    '    This is a simple codeblock.'\n    >>> code_block(\"This is a simple codeblock.\\\\nBut it has a linebreak!\")\n    '    This is a simple codeblock.\\\\n    But it has a linebreak!'\n    >>> code_block(\"This block of code has a specified language.\", \"python\")\n    '```python\\\\nThis block of code has a specified language.\\\\n```'\n    >>> code_block(\"So\\\\nmany\\\\nlinebreaks.\", \"python\")\n    '```python\\\\nSo\\\\nmany\\\\nlinebreaks.\\\\n```'\n\n\nLink\n----\n\nReturn an inline link.\n::\n\n    >>> link (\"This is a link\", \"https://github.com/abactel/markdown_strings\")\n    '[This is a link](https://github.com/abactel/markdown_strings)'\n\n\nImage\n-----\n\nReturn an inline image.\n\nKeyword arguments:\n   title -- Specify the title of the image, as seen when hovering over it.\n::\n\n    >>> image(\"This is an image\", \"https://tinyurl.com/bright-green-tree\")\n    '![This is an image](https://tinyurl.com/bright-green-tree)'\n    >>> image(\"This is an image\", \"https://tinyurl.com/bright-green-tree\", \"tree\")\n    '![This is an image](https://tinyurl.com/bright-green-tree) \"tree\"'\n\n\nUnordered list\n--------------\n\nReturn an unordered list from an array.\n::\n\n    >>> unordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n    '-   first\\\\n-   second\\\\n-   third\\\\n-   fourth'\n    >>> unordered_list([1, 2, 3, 4, 5])\n    '-   1\\\\n-   2\\\\n-   3\\\\n-   4\\\\n-   5'\n\n\nOrdered list\n------------\n\nReturn an ordered list from an array.\n::\n\n    >>> ordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n    '1.  first\\\\n2.  second\\\\n3.  third\\\\n4.  fourth'\n\n\nBlockquote\n----------\n\nReturn a blockquote.\n::\n\n    >>> blockquote(\"A simple blockquote\")\n    '> A simple blockquote'\n\n\nHorizontal rule\n---------------\n\nReturn a horizontal rule.\n\nKeyword arguments:\n    length -- Specifies the length of the rule (default 79, minimum 3).\n\n    style -- Character used for the rule (may be either \"_\" or \"*\").\n\nIf the length is too low, or the style is invalid, a ValueError is raised.\n::\n\n    >>> horizontal_rule()\n    '_______________________________________________________________________________'\n    >>> horizontal_rule(length=5, style=\"*\")\n    '***'\n    \"\"\"\n\n\nNon-standard markdown\n=====================\n\nStrikethrough\n-------------\n\nReturn text with strike-through formatting.\n::\n\n    >>> strikethrough(\"This is a lie\")\n    '~This is a lie~'\n\n\nTask list\n---------\n\nReturn a task list.\n\nThe task_array should be 2-dimensional; the first item should be the task\ntext, and the second the boolean completion state.\n::\n\n    >>> task_list([[\"Be born\", True], [\"Be dead\", False]])\n    '- [X] Be born\\\\n- [ ] Be dead'\n\nWhen displayed using `print`, this will appear as:\n::\n\n    - [X] Be born\n    - [ ] Be dead\n\n\nTable row\n---------\n\nReturn a single table row.\n\nKeyword arguments:\n\n    pad -- The pad should be an array of the same size as the input text array.\n    It will be used to format the row's padding.\n::\n\n       >>> table_row([\"First column\", \"Second\", \"Third\"])\n       '| First column | Second | Third |'\n       >>> table_row([\"First column\", \"Second\", \"Third\"], [10, 10, 10])\n       '| First column | Second     | Third      |'\n\n\nDelimiter row\n-------------\n\nReturn a delimiter row for use in a table.\n::\n\n    >>> table_delimiter_row(3)\n    '| --- | --- | --- |'\n\n\nTable from columns\n------------------\n\nReturn a formatted table, generated from arrays representing columns.\n\nThe function requires a 2-dimensional array, where each array is a column\nof the table. This will be used to generate a formatted table in string\nformat. The number of items in each columns does not need to be consitent.\n::\n\n    >>> table_from_columns([[\"Name\", \"abactel\", \"Bob\"], [\"User\", \"4b4c73l\", \"\"]])\n    '| Name    | User    |\\\\n| ------- | ------- |\\\\n| abactel | 4b4c73l |\\\\n| Bob     |         |'\n\nWhen displayed using `print`, this will appear as:\n::\n\n    | Name    | User    |\n    | ------- | ------- |\n    | abactel | 4b4c73l |\n    | Bob     |         |\n\n\nHelper functions\n================\n\nReturn text with formatting escaped\n\nMarkdown requires a backslash before literal inderscores or asterisk, to avoid\nformatting to bold or italics.\n::\n\n    >>> esc_format(\"Normal text\")\n    'Normal text'\n    >>> esc_format(\"Text with **bold**\")\n    'Text with \\\\\\*\\\\\\*bold\\\\\\*\\\\\\*'\n    >>> esc_format(\"Text with _italics_\")\n    'Text with \\\\\\_italics\\\\\\_'\n    >>> esc_format(\"Text with _**complicated** formatting_\")\n    'Text with \\\\\\_\\\\\\*\\\\\\*complicated\\\\\\*\\\\\\* formatting\\\\\\_'\n    \"\"\"\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/awesmubarak/markdown_strings",
    "keywords": "markdown md",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markdown-strings",
    "package_url": "https://pypi.org/project/markdown-strings/",
    "platform": "",
    "project_url": "https://pypi.org/project/markdown-strings/",
    "project_urls": {
      "Homepage": "https://github.com/awesmubarak/markdown_strings"
    },
    "release_url": "https://pypi.org/project/markdown-strings/3.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Create markdown formatted text",
    "version": "3.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6362038,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1387f95db4d36496af59b32cdf0bd078c914e1463b57f126ca9533edec5d1c2d",
        "md5": "9fc572196c3ce3d2dd67d29626862474",
        "sha256": "21bfc2ff1e6eec1209bb5835f090f9576cec46de38fb1991f57a422bb5efcf6f"
      },
      "downloads": -1,
      "filename": "markdown_strings-3.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fc572196c3ce3d2dd67d29626862474",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9442,
      "upload_time": "2018-09-15T19:52:00",
      "upload_time_iso_8601": "2018-09-15T19:52:00.831445Z",
      "url": "https://files.pythonhosted.org/packages/13/87/f95db4d36496af59b32cdf0bd078c914e1463b57f126ca9533edec5d1c2d/markdown_strings-3.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19519af07a554244fbc1975dd8aeea9388063fae93ab5dadd7c42cc2c4132944",
        "md5": "45d0e90129ef5ff9d52c778957f6e136",
        "sha256": "141e55d48742d6c19b09500bb71760f3aa04b6532c5d7725b9a030ce90663708"
      },
      "downloads": -1,
      "filename": "markdown_strings-3.1.1.tar.gz",
      "has_sig": true,
      "md5_digest": "45d0e90129ef5ff9d52c778957f6e136",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6411,
      "upload_time": "2018-09-15T19:52:02",
      "upload_time_iso_8601": "2018-09-15T19:52:02.354907Z",
      "url": "https://files.pythonhosted.org/packages/19/51/9af07a554244fbc1975dd8aeea9388063fae93ab5dadd7c42cc2c4132944/markdown_strings-3.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}