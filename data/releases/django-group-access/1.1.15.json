{
  "info": {
    "author": "Mike Heald",
    "author_email": "mike.heald@canonical.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "What it does\r\n------------\r\n\r\ndjango-group-access restricts access to records based on group membership.\r\nIt does not manage finer grained permissions such as editing or deleting.\r\nIf a user has access to a record, they have all permissions as defined\r\nby the django auth permissions.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nAdd 'django_group_access' to your INSTALLED_APPS in settings.py\r\n\r\n\r\nIntegration and use\r\n-------------------\r\n\r\nExample: Installing to a single model and restricting access in a view\r\n\r\nmodels.py\r\n\r\n  from django.db import models\r\n  from django_group_access import registration\r\n\r\n\r\n  class MyModel(models.Model):\r\n      name = models.CharField(max_length=24)\r\n\r\n  registration.register(MyModel)\r\n\r\nMyModel will gain access_groups which is a ManyToManyField containing\r\nthe groups that have access to each record.\r\n\r\nMyModel will also gain 'owner' which is a ForeignKey to\r\ndjango.contrib.auth.models.User and is used to determine ownership\r\nof the record. To not use and 'owner' field, pass:\r\n\r\n    owner=False\r\n\r\nto the call to register().\r\n\r\n\r\nviews.py\r\n\r\n  def my_view(request):\r\n      records = MyModel.objects.accessible_by_user(request.user)\r\n\r\nAll related fields and reverse relationships for model instances in\r\n`records` will be filtered for the same user automatically.\r\n\r\n\r\nAccess to \"parent\" records can be determined by access the user has\r\nto \"child\" records. In the following example, if you have access to a Room\r\nyou have access to the House it appears in.\r\n\r\n\r\n  from django.db import models\r\n  from django_group_access import registration\r\n\r\n\r\n  class House(models.Model):\r\n      address = models.CharField(max_length=128)\r\n\r\n\r\n  class Room(models.Model):\r\n      house = models.ForeignKey(House)\r\n      name = models.CharField(max_length=32)\r\n\r\n\r\n  registration.register(Room)\r\n  registration.register(House, control_relation='room')\r\n\r\n  houses = House.objects.accessible_by_user(user_object)\r\n\r\n\r\nThe group model used for access control is AccessGroup. This is\r\nseparate from the django auth Group for flexbility.\r\n\r\n\r\nSharing records\r\n---------------\r\n\r\n  obj = MyModel.objects.accessible_by_user(user_object)[0]\r\n  \r\n  group_i_want_to_share_with = AccessGroup.objects.get(name='Friends')\r\n  \r\n  obj.access_groups.add(group_i_want_to_share_with)\r\n\r\n`obj` would then become visible to members of the 'Friends' AccessGroup.\r\n\r\nFor ease of sharing data between groups, AccessGroup has a property called\r\n`auto_share_groups`. This is a list of AccessGroups that records owned\r\nby the group will automatically be shared with.\r\n\r\n\r\nPublic record mode\r\n------------------\r\n\r\nIf you want to have all data public by default, and use the access groups\r\nto restrict access to individual records add the following to settings.py\r\n\r\n    DGA_UNSHARED_RECORDS_ARE_PUBLIC = True\r\n\r\n\r\nAutomatically restricting based on logged in user\r\n-------------------------------------------------\r\n\r\nAdd 'django_group_access.middleware.DjangoGroupAccessMiddleware' to the\r\nMIDDLEWARE_CLASSES in settings.py. All access controlled models will be filtered\r\nbased on the currently logged in user, meaning you do not have to call\r\n'accessible_by_user' in your code. Anonymous users will see no records.\r\n\r\nThe middleware must be come after the AuthenticationMiddleware in the list\r\nof MIDDLEWARE_CLASSES.\r\n\r\nRegistering a model with 'auto_filter=False' will stop the automatic\r\nfiltering for that model, meaning you will have to do it manually using\r\n'accessible_by_user' in your code.\r\n\r\n\r\nAccess to unrestricted records\r\n------------------------------\r\n\r\nRegistering a model with the option 'unrestricted_manager=\"manager_name\"' will\r\ncreate a manager on that model with unrestricted access to all records, even if\r\nyou are using the automatic restriction based on the logged in user.\r\n\r\nExample:\r\n\r\n  registration.register(MyModel, unrestricted_manager='all_objects')\r\n  \r\n  all_records = MyModel.all_objects.all()",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://launchpad.net/django-group-access",
    "keywords": "django,ownership,models",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-group-access",
    "package_url": "https://pypi.org/project/django-group-access/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-group-access/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://launchpad.net/django-group-access"
    },
    "release_url": "https://pypi.org/project/django-group-access/1.1.15/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Base Django model to add access control, via groups, to objects.",
    "version": "1.1.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 967673,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cf863a1cff062b3959cbe55e98c1b36292a04a4873af8e4a69190fe4b93ffd8",
        "md5": "dccf121a1f436d58fcc6eec68e628948",
        "sha256": "98c4885e20174071ee712f63f73841372851ae1073a520cfb4878ce9ff959f37"
      },
      "downloads": -1,
      "filename": "django-group-access-1.1.15.tar.gz",
      "has_sig": false,
      "md5_digest": "dccf121a1f436d58fcc6eec68e628948",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17766,
      "upload_time": "2013-06-26T15:47:07",
      "upload_time_iso_8601": "2013-06-26T15:47:07.539124Z",
      "url": "https://files.pythonhosted.org/packages/5c/f8/63a1cff062b3959cbe55e98c1b36292a04a4873af8e4a69190fe4b93ffd8/django-group-access-1.1.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}