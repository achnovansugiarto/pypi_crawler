{
  "info": {
    "author": "Ionel Cristian Mărieș",
    "author_email": "contact@ionelmc.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Debuggers",
      "Topic :: System :: Monitoring",
      "Topic :: System :: Networking",
      "Topic :: Utilities"
    ],
    "description": "===============================\n        python-manhole\n===============================\n\n| |docs| |travis| |coveralls| |landscape| |scrutinizer|\n| |version| |downloads| |wheel| |supported-versions| |supported-implementations|\n\n.. |docs| image:: https://readthedocs.org/projects/python-manhole/badge/?style=flat\n    :target: https://readthedocs.org/projects/python-manhole\n    :alt: Documentation Status\n\n.. |travis| image:: http://img.shields.io/travis/ionelmc/python-manhole/master.png?style=flat\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/ionelmc/python-manhole\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/ionelmc/python-manhole?branch=master\n    :alt: AppVeyor Build Status\n    :target: https://ci.appveyor.com/project/ionelmc/python-manhole\n\n.. |coveralls| image:: http://img.shields.io/coveralls/ionelmc/python-manhole/master.png?style=flat\n    :alt: Coverage Status\n    :target: https://coveralls.io/r/ionelmc/python-manhole\n\n.. |landscape| image:: https://landscape.io/github/ionelmc/python-manhole/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/ionelmc/python-manhole/master\n    :alt: Code Quality Status\n\n.. |version| image:: http://img.shields.io/pypi/v/manhole.png?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/manhole\n\n.. |downloads| image:: http://img.shields.io/pypi/dm/manhole.png?style=flat\n    :alt: PyPI Package monthly downloads\n    :target: https://pypi.python.org/pypi/manhole\n\n.. |wheel| image:: https://pypip.in/wheel/manhole/badge.png?style=flat\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/manhole\n\n.. |supported-versions| image:: https://pypip.in/py_versions/manhole/badge.png?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/manhole\n\n.. |supported-implementations| image:: https://pypip.in/implementation/manhole/badge.png?style=flat\n    :alt: Supported imlementations\n    :target: https://pypi.python.org/pypi/manhole\n\n.. |scrutinizer| image:: https://img.shields.io/scrutinizer/g/ionelmc/python-manhole/master.png?style=flat\n    :alt: Scrtinizer Status\n    :target: https://scrutinizer-ci.com/g/ionelmc/python-manhole/\n\nManhole is in-process service that will accept unix domain socket connections and present the\nstacktraces for all threads and an interactive prompt. It can either work as a python daemon\nthread waiting for connections at all times *or* a signal handler (stopping your application and\nwaiting for a connection).\n\nAccess to the socket is restricted to the application's effective user id or root.\n\nThis is just like Twisted's `manhole <http://twistedmatrix.com/documents/current/api/twisted.manhole.html>`__.\nIt's simpler (no dependencies), it only runs on Unix domain sockets (in contrast to Twisted's manhole which\ncan run on telnet or ssh) and it integrates well with various types of applications.\n\n:Documentation: http://python-manhole.readthedocs.org/en/latest/\n\nUsage\n=====\n\nInstall it::\n\n    pip install manhole\n\nYou can put this in your django settings, wsgi app file, some module that's always imported early etc:\n\n.. code-block:: python\n\n    import manhole\n    manhole.install() # this will start the daemon thread\n\n    # and now you start your app, eg: server.serve_forever()\n\nNow in a shell you can do either of these::\n\n    netcat -U /tmp/manhole-1234\n    socat - unix-connect:/tmp/manhole-1234\n    socat readline unix-connect:/tmp/manhole-1234\n\nSocat with readline is best (history, editing etc).\n\nSample output::\n\n    $ nc -U /tmp/manhole-1234\n\n    Python 2.7.3 (default, Apr 10 2013, 06:20:15)\n    [GCC 4.6.3] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    (InteractiveConsole)\n    >>> dir()\n    ['__builtins__', 'dump_stacktraces', 'os', 'socket', 'sys', 'traceback']\n    >>> print 'foobar'\n    foobar\n\nAlternative client\n------------------\n\nThere's a new experimental ``manhole`` bin since 1.1.0, that emulates ``socat``::\n\n    usage: manhole [-h] [-t TIMEOUT] [-1 | -2] PID\n\n    Connect to a manhole.\n\n    positional arguments:\n      PID                   A numerical process id, or a path in the form:\n                            /tmp/manhole-1234\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -t TIMEOUT, --timeout TIMEOUT\n                            Timeout to use. Default: 1 seconds.\n      -1, -USR1             Send USR1 (10) to the process before connecting.\n      -2, -USR2             Send USR2 (12) to the process before connecting.\n\n\n\nFeatures\n========\n\n* Uses unix domain sockets, only root or same effective user can connect.\n* Can run the connection in a thread or in a signal handler (see ``oneshot_on`` option).\n* Can start the thread listening for connections from a signal handler (see ``activate_on`` option)\n* Compatible with apps that fork, reinstalls the Manhole thread after fork - had to monkeypatch os.fork/os.forkpty for\n  this.\n* Compatible with gevent and eventlet with some limitations - you need to either:\n\n  * Use ``oneshot_on``, *or*\n  * Disable thread monkeypatching (eg: ``gevent.monkey.patch_all(thread=False)``, ``eventlet.monkey_patch(thread=False)``\n\n* The thread is compatible with apps that use signalfd (will mask all signals for the Manhole threads).\n\nOptions\n-------\n\n.. code-block:: python\n\n    manhole.install(\n        verbose=True,\n        verbose_destination=2,\n        patch_fork=True,\n        activate_on=None,\n        oneshot_on=None,\n        sigmask=manhole.ALL_SIGNALS,\n        socket_path=None,\n        reinstall_delay=0.5,\n        locals=None,\n        strict=True,\n    )\n\n* ``verbose`` - Set it to ``False`` to squelch the logging.\n* ``verbose_destination`` - Destination for verbose messages. Set it to a file descriptor or handle. Default is\n  unbuffered stderr (stderr ``2`` file descriptor).\n* ``patch_fork`` - Set it to ``False`` if you don't want your ``os.fork`` and ``os.forkpy`` monkeypatched\n* ``activate_on`` - Set to ``\"USR1\"``, ``\"USR2\"`` or some other signal name, or a number if you want the Manhole thread\n  to start when this signal is sent. This is desireable in case you don't want the thread active all the time.\n* ``oneshot_on`` - Set to ``\"USR1\"``, ``\"USR2\"`` or some other signal name, or a number if you want the Manhole to\n  listen for connection in the signal handler. This is desireable in case you don't want threads at all.\n* ``sigmask`` - Will set the signal mask to the given list (using ``signalfd.sigprocmask``). No action is done if\n  ``signalfd`` is not importable. **NOTE**: This is done so that the Manhole thread doesn't *steal* any signals;\n  Normally that is fine cause Python will force all the signal handling to be run in the main thread but signalfd\n  doesn't.\n* ``socket_path`` - Use a specifc path for the unix domain socket (instead of ``/tmp/manhole-<pid>``). This disables\n  ``patch_fork`` as children cannot resuse the same path.\n* ``reinstall_delay`` - Delay the unix domain socket creation *reinstall_delay* seconds. This alleviates\n  cleanup failures when using fork+exec patterns.\n* ``locals`` - Names to add to manhole interactive shell locals.\n* ``daemon_connection`` - The connection thread is daemonic (dies on app exit). Default: ``False``.\n* ``redirect_stderr`` - Redirect output from stderr to manhole console. Default: ``True``.\n* ``strict`` - If ``True`` then ``AlreadyInstalled`` will be raised when attempting to install manhole twice. Default: ``True``.\n\nEnvironment variable installation\n---------------------------------\n\nManhole can be installed via the ``PYTHONMANHOLE`` environment varialbe.\n\nThis::\n\n    PYTHONMANHOLE='' python yourapp.py\n\nIs equivalent to having this in ``yourapp.py``:\n\n    import manhole\n    manhole.install()\n\nAny extra text in the environment variable is passed to ``manhole.install()``. Example::\n\n    PYTHONMANHOLE='onshot_on=\"USR2\"' python yourapp.py\n\nWhat happens when you actually connect to the socket\n----------------------------------------------------\n\n1. Credentials are checked (if it's same user or root)\n2. ``sys.__std*__``/``sys.std*`` are be redirected to the UDS\n3. Stacktraces for each thread are written to the UDS\n4. REPL is started so you can fiddle with the process\n\nKnown issues\n============\n\n* Using threads and file handle (not raw file descriptor) ``verbose_destination`` can cause deadlocks. See bug reports:\n  `PyPy <https://bitbucket.org/pypy/pypy/issue/1895/writing-to-stderr-from-multiple-processes>`_ and `Python 3.4\n  <http://bugs.python.org/issue22697>`_.\n\nSIGTERM and socket cleanup\n--------------------------\n\nBy default Python doesn't call the ``atexit`` callbacks with the default SIGTERM handling. This makes manhole leave stray\nsocket files around. If this is undesirable you should install a custom SIGTERM handler so ``atexit`` is properly invoked.\n\nExample:\n\n.. code-block:: python\n\n    import signal\n    import sys\n\n    def handle_sigterm(signo, frame):\n        sys.exit(128 + signo)  # this will raise SystemExit and cause atexit to be called\n\n    signal.signal(signal.SIGTERM, handle_sigterm)\n\nRequirements\n============\n\n:OS: Linux, OS X\n:Runtime: Python 2.6, 2.7, 3.2, 3.3, 3.4 or PyPy\n\nSimilar projects\n================\n\n* Twisted's `old manhole <http://twistedmatrix.com/documents/current/api/twisted.manhole.html>`__ and the `newer\n  implementation <http://twistedmatrix.com/documents/current/api/twisted.conch.manhole.html>`__ (colors, serverside\n  history).\n* `wsgi-shell <https://github.com/GrahamDumpleton/wsgi-shell>`_ - spawns a thread.\n* `pyrasite <https://github.com/lmacken/pyrasite>`_ - uses gdb to inject code.\n* `pydbattach <https://github.com/albertz/pydbattach>`_ - uses gdb to inject code.\n* `pystuck <https://github.com/alonho/pystuck>`_ - very similar, uses `rpyc <https://github.com/tomerfiliba/rpyc>`_ for\n  communication.\n* `pyringe <https://github.com/google/pyringe>`_ - uses gdb to inject code, more reliable, but relies on `dbg` python\n  builds unfortunatelly.\n* `pdb-clone <https://pypi.python.org/pypi/pdb-clone>`_ - uses gdb to inject code, with a `different strategy\n  <https://code.google.com/p/pdb-clone/wiki/RemoteDebugging>`_.\n\n\nChangelog\n=========\n\n1.1.0 (2015-06-06)\n------------------\n\n* Added support for installing the manhole via the ``PYTHONMANHOLE`` environment variable.\n* Added a ``strict`` install option. Set it to false to avoid getting the ``AlreadyInstalled`` exception.\n* Added a ``manhole-cli`` script that emulates ``socat readline unix-connect:/tmp/manhole-1234``.\n\n1.0.0 (2014-10-13)\n------------------\n\n* Added ``socket_path`` install option (contributed by `Nir Soffer`_).\n* Added ``reinstall_delay`` install option.\n* Added ``locals`` install option (contributed by `Nir Soffer`_).\n* Added ``redirect_stderr`` install option (contributed by `Nir Soffer`_).\n* Lots of internals cleanup (contributed by `Nir Soffer`_).\n\n0.6.2 (2014-04-28)\n------------------\n\n* Fix OS X regression.\n\n0.6.1 (2014-04-28)\n------------------\n\n* Support for OS X (contributed by `Saulius Menkevičius`_).\n\n.. _Saulius Menkevičius: https://github.com/razzmatazz\n.. _Nir Soffer: https://github.com/nirs",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ionelmc/python-manhole",
    "keywords": "debugging,manhole,thread,socket,unix domain socket",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "manhole",
    "package_url": "https://pypi.org/project/manhole/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/manhole/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ionelmc/python-manhole"
    },
    "release_url": "https://pypi.org/project/manhole/1.1.0/",
    "requires_dist": [
      "argparse; python_version==\"2.6\""
    ],
    "requires_python": null,
    "summary": "Inpection manhole for python applications. Connection is done via unix domain sockets.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10011804,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cacb6de9c11382a3fe5b8fa5c2db2901e2e1359af9e4614695369ca6cc3aac4",
        "md5": "5e914735d4171e7e46439fd3b0545dcc",
        "sha256": "600bc02b965ab77a3f112bb489dcfeb4ac4c46ee05f684cb3133fbb16bc27723"
      },
      "downloads": -1,
      "filename": "manhole-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e914735d4171e7e46439fd3b0545dcc",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18138,
      "upload_time": "2015-06-06T16:54:48",
      "upload_time_iso_8601": "2015-06-06T16:54:48.806994Z",
      "url": "https://files.pythonhosted.org/packages/0c/ac/b6de9c11382a3fe5b8fa5c2db2901e2e1359af9e4614695369ca6cc3aac4/manhole-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a633dd277c26a26c9c91326756bc8b9038a5a5baee18aa707665e3adc795afe",
        "md5": "ba4781b9e3c9318a36671df62a56e765",
        "sha256": "026a516632fdbaa69af9c85960b5bdf3dc04724a3e564b8ff7656d9d426534d7"
      },
      "downloads": -1,
      "filename": "manhole-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ba4781b9e3c9318a36671df62a56e765",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32555,
      "upload_time": "2015-06-06T16:54:52",
      "upload_time_iso_8601": "2015-06-06T16:54:52.627441Z",
      "url": "https://files.pythonhosted.org/packages/8a/63/3dd277c26a26c9c91326756bc8b9038a5a5baee18aa707665e3adc795afe/manhole-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}