{
  "info": {
    "author": "Lin Zhiwen",
    "author_email": "zhiwenlin1116@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Django ClickHouse Database Backend\n===\n\nDjango clickhouse backend is a [django database backend](https://docs.djangoproject.com/en/4.1/ref/databases/) for \n[clickhouse](https://clickhouse.com/docs/en/home/) database. This project allows using django ORM to interact with \nclickhouse, the goal of the project is to operate clickhouse like operating mysql, postgresql in django.\n\nThanks to [clickhouse driver](https://github.com/mymarilyn/clickhouse-driver), django clickhouse backend use it as [DBAPI](https://peps.python.org/pep-0249/).\nThanks to [clickhouse pool](https://github.com/ericmccarthy7/clickhouse-pool), it makes clickhouse connection pool.\n\nRead [Documentation](https://github.com/jayvynl/django-clickhouse-backend/blob/main/docs/README.md) for more.\n\n**Features:**\n\n- Reuse most of the existed django ORM facilities, minimize your learning costs.\n- Connect to clickhouse efficiently via [clickhouse native interface](https://clickhouse.com/docs/en/interfaces/tcp/) and connection pool.\n- No other intermediate storage, no need to synchronize data, just interact directly with clickhouse.\n- Support clickhouse specific schema features such as [Engine](https://clickhouse.com/docs/en/engines/table-engines/) and [Index](https://clickhouse.com/docs/en/guides/improving-query-performance/skipping-indexes).\n- Support most types of table migrations.\n- Support creating test database and table, working with django TestCase and pytest-django.\n- Support most clickhouse data types.\n- Support [SETTINGS in SELECT Query](https://clickhouse.com/docs/en/sql-reference/statements/select/#settings-in-select-query).\n\n**Notes:**\n\n- Not tested upon all versions of clickhouse-server, clickhouse-server 22.x.y.z or over is suggested.\n- Aggregation functions result in 0 or nan (Not NULL) when data set is empty. max/min/sum/count is 0, avg/STDDEV_POP/VAR_POP is nan.\n- In outer join, clickhouse will set missing columns to empty values (0 for number, empty string for text, unix epoch for date/datatime) instead of NULL. \n  So Count(\"book\") resolve to 1 in a missing LEFT OUTER JOIN match, not 0.\n  In aggregation expression Avg(\"book__rating\", default=2.5), default=2.5 have no effect in a missing match.\n\n**Requirements:**\n\n- [Python](https://www.python.org/) >= 3.6\n- [Django](https://docs.djangoproject.com/) >= 3.2\n- [clickhouse driver](https://github.com/mymarilyn/clickhouse-driver)\n- [clickhouse pool](https://github.com/ericmccarthy7/clickhouse-pool)\n\n\nGet started\n---\n\n### Installation\n\n```shell\n$ pip install django-clickhouse-backend\n```\n\nor\n\n```shell\n$ git clone https://github.com/jayvynl/django-clickhouse-backend\n$ cd django-clickhouse-backend\n$ python setup.py install\n```\n\n### Configuration\n\nwe can use the docker compose file under the project for test and try\n\nOnly `ENGINE` is required, other options have default values.\n\n- ENGINE: required, set to `clickhouse_backend.backend`.\n- NAME: database name, default `default`.\n- HOST: database host, default `localhost`.\n- PORT: database port, default `9000`.\n- USER: database user, default `default`.\n- PASSWORD: database password, default empty.\n\n  ```python\n  DATABASES = {\n      'default': {\n          'ENGINE': 'clickhouse_backend.backend',\n          'NAME': 'default',\n          'HOST': 'localhost',\n          'USER': 'DB_USER',\n          'PASSWORD': 'DB_PASSWORD',\n          'TEST': {\n              'fake_transaction': True\n          }\n      }\n  }\n  DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n  ```\n\n`DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'` is required to working with django migration.\nMore details will be covered in [DEFAULT_AUTO_FIELD](https://github.com/jayvynl/django-clickhouse-backend/blob/main/docs/Configurations.md#default_auto_field).\n\n### Model Definition\n\nClickhouse backend support django builtin fields and clickhouse specific fields.\n\nRead [fields documentation](https://github.com/jayvynl/django-clickhouse-backend/blob/main/docs/Fields.md) for more.\n\nNotices about model definition:\n\n- import models from clickhouse_backend, not from django.db\n- add low_cardinality for StringFiled, when the data field cardinality is relatively low, this configuration can significantly improve query performance\n\n- cannot use db_index=True in Field, but we can add in the Meta indexes\n- need to specify the ordering in Meta just for default query ordering\n- need to specify the engine for clickhouse, specify the order_by for clickhouse order and the partition_by argument\n\n```python\nfrom django.db.models import CheckConstraint, Func, Q, IntegerChoices\nfrom django.utils import timezone\n\nfrom clickhouse_backend import models\n\n\nclass Event(models.ClickhouseModel):\n    class Action(IntegerChoices):\n        PASS = 1\n        DROP = 2\n        ALERT = 3\n    ip = models.GenericIPAddressField(default='::')\n    ipv4 = models.GenericIPAddressField(default='127.0.0.1')\n    ip_nullable = models.GenericIPAddressField(null=True)\n    port = models.UInt16Field(default=0)\n    protocol = models.StringField(default='', low_cardinality=True)\n    content = models.StringField(default='')\n    timestamp = models.DateTime64Field(default=timezone.now)\n    created_at = models.DateTime64Field(auto_now_add=True)\n    action = models.EnumField(choices=Action.choices, default=Action.PASS)\n\n    class Meta:\n        verbose_name = 'Network event'\n        ordering = ['-id']\n        db_table = 'event'\n        engine = models.ReplacingMergeTree(\n            order_by=['id'],\n            partition_by=Func('timestamp', function='toYYYYMMDD')\n        )\n        indexes = [\n            models.Index(\n                fields=[\"ip\"],\n                name='ip_set_idx',\n                type=models.Set(1000),\n                granularity=4\n            ),\n            models.Index(\n                fields=[\"ipv4\"],\n                name=\"ipv4_bloom_idx\",\n                type=models.BloomFilter(0.001),\n                granularity=1\n            )\n        ]\n        constraints = (\n            CheckConstraint(\n                name='port_range',\n                check=Q(port__gte=0, port__lte=65535),\n            ),\n        )\n```\n\n### Migration\n\n```shell\n$ python manage.py makemigrations\n```\n\nthis operation will generate migration file under apps/migrations/\n\nthen we mirgrate\n\n```shell\n$ python manage.py migrate\n```\n\nfor the first time run, this operation will generate django_migrations table with create table sql like this\n\n```sql\n> show create table django_migrations;\n\nCREATE TABLE other.django_migrations\n(\n    `id` Int64,\n    `app` FixedString(255),\n    `name` FixedString(255),\n    `applied` DateTime64(6, 'UTC')\n)\nENGINE = MergeTree\nORDER BY id\nSETTINGS index_granularity = 8192 \n```\n\nwe can query it with results like this\n\n```sql\n> select * from django_migrations;\n\n┌──────────────────id─┬─app─────┬─name─────────┬────────────────────applied─┐\n│ 1626937818115211264 │ testapp │ 0001_initial │ 2023-02-18 13:32:57.538472 │\n└─────────────────────┴─────────┴──────────────┴────────────────────────────┘\n\n```\n\nmigrate will create a table with name event as we define in the models\n\n```sql\n> show create table event;\n\nCREATE TABLE other.event\n(\n    `id` Int64,\n    `ip` IPv6,\n    `ipv4` IPv6,\n    `ip_nullable` Nullable(IPv6),\n    `port` UInt16,\n    `protocol` LowCardinality(String),\n    `content` String,\n    `timestamp` DateTime64(6, 'UTC'),\n    `created_at` DateTime64(6, 'UTC'),\n    `action` Enum8('Pass' = 1, 'Drop' = 2, 'Alert' = 3),\n    INDEX ip_set_idx ip TYPE set(1000) GRANULARITY 4,\n    INDEX port_bloom_idx port TYPE bloom_filter(0.001) GRANULARITY 1,\n    CONSTRAINT port_range CHECK (port >= 0) AND (port <= 65535)\n)\nENGINE = ReplacingMergeTree\nPARTITION BY toYYYYMMDD(timestamp)\nORDER BY id\nSETTINGS index_granularity = 8192\n```\n\n### Operate Data\n\ncreate\n\n```python\nfor i in range(10):\n    Event.objects.create(ip_nullable=None, port=i,\n                         protocol=\"HTTP\", content=\"test\", \n                         action=Event.Action.PASS.value)\nassert Event.objects.count() == 10\n```\n\nquery\n\n```python\nqueryset = Event.objects.filter(content=\"test\")\nfor i in queryset:\n    print(i)\n```\n\nupdate\n\n```python\nEvent.objects.filter(port__in=[1, 2, 3]).update(protocol=\"TCP\")\ntime.sleep(1)\nassert Event.objects.filter(protocol=\"TCP\").count() == 3\n```\n\ndelete\n\n```python\nEvent.objects.filter(protocol=\"TCP\").delete()\ntime.sleep(1)\nassert not Event.objects.filter(protocol=\"TCP\").exists()\n```\n\nExcept for the model definition, all other operations are like operating relational databases such as mysql and postgresql\n\n### Testing\n\nWriting testcase is all the same as normal django project. You can use django TestCase or pytest-django.\n**Notice:** clickhouse use mutations for [deleting or updating](https://clickhouse.com/docs/en/guides/developer/mutations).\nBy default, data mutations is processed asynchronously.\nThat is, when you update or delete a row, clickhouse will perform the action after a period of time.\nSo you should change this default behavior in testing for deleting or updating.\nThere are 2 ways to do that:\n\n- Config database engine as follows, this sets [`mutations_sync=1`](https://clickhouse.com/docs/en/operations/settings/settings#mutations_sync) at session scope.\n  ```python\n  DATABASES = {\n      'default': {\n          'ENGINE': 'clickhouse_backend.backend',\n          'OPTIONS': {\n              'settings': {\n                  'mutations_sync': 1,\n              }\n          }\n      }\n  }\n  ```\n- Use [SETTINGS in SELECT Query](https://clickhouse.com/docs/en/sql-reference/statements/select/#settings-in-select-query).\n  ```python\n  Event.objects.filter(protocol='UDP').settings(mutations_sync=1).delete()\n  ```\n\nSample test case.\n\n```python\nfrom django.test import TestCase\n\nclass TestEvent(TestCase):\n    def test_spam(self):\n        assert Event.objects.count() == 0\n```\n\n\nTest\n---\n\nTo run test for this project:\n\n```shell\n$ git clone https://github.com/jayvynl/django-clickhouse-backend\n$ cd django-clickhouse-backend\n# docker and docker-compose are required.\n$ docker-compose up -d\n$ python tests/runtests.py\n# run test for every python version and django version\n$ pip install tox\n$ tox\n```\n\nChangelog\n---\n\n### 1.0.1 (2023-02-23)\n\n- Add `return_int` parameter to `Enum[8|16]Field` to control whether to get an int or str value when querying from the database.\n- Fix TupleField container_class.\n- Add fields documentation.\n\n\n### 1.0.0 (2023-02-21)\n\n- Add tests for migrations.\n- Fix bytes escaping.\n- Fix date and datetime lookup.\n- Add documentations.\n- Add lots of new field types:\n  - Float32/64\n  - [U]Int8/16/32/64/128/256\n  - Date/Date32/DateTime('timezone')/DateTime64('timezone')\n  - String/FixedString(N)\n  - Enum8/16\n  - Array(T)\n  - Bool\n  - UUID\n  - Decimal\n  - IPv4/IPv6\n  - LowCardinality(T)\n  - Tuple(T1, T2, ...)\n  - Map(key, value)\n\n\nLicense\n---\n\nDjango clickhouse backend is distributed under the [MIT license](http://www.opensource.org/licenses/mit-license.php).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jayvynl/django-clickhouse-backend",
    "keywords": "Django ClickHouse database backend engine driver",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-clickhouse-backend",
    "package_url": "https://pypi.org/project/django-clickhouse-backend/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-clickhouse-backend/",
    "project_urls": {
      "Homepage": "https://github.com/jayvynl/django-clickhouse-backend"
    },
    "release_url": "https://pypi.org/project/django-clickhouse-backend/1.0.1/",
    "requires_dist": [
      "django (>=3.2)",
      "clickhouse-driver (==0.2.5)",
      "clickhouse-pool (==0.5.3)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Django clickHouse database backend.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17097094,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4154e2f5718e0a7a9833a7af20f1484f27f526659846a48f24a43e3c9e02b4f",
        "md5": "78f8b08829717e4c0fe1ed8403a02b74",
        "sha256": "feaf0925c91f6a898c439ba4190a508c9a53113521a4c4c5df32153358f92892"
      },
      "downloads": -1,
      "filename": "django_clickhouse_backend-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "78f8b08829717e4c0fe1ed8403a02b74",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 56135,
      "upload_time": "2023-02-23T16:17:15",
      "upload_time_iso_8601": "2023-02-23T16:17:15.991813Z",
      "url": "https://files.pythonhosted.org/packages/e4/15/4e2f5718e0a7a9833a7af20f1484f27f526659846a48f24a43e3c9e02b4f/django_clickhouse_backend-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6a9eb0479b6a8b38bb756b05011463c4bfb327fac872f077fd5d8f83249562f",
        "md5": "2f32a468d4566ad7a51dc06280d9b63b",
        "sha256": "c470e176a1b82d7d795faada5bc14276ca175b183c6a9423f7e64a3e0bfbee91"
      },
      "downloads": -1,
      "filename": "django-clickhouse-backend-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2f32a468d4566ad7a51dc06280d9b63b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 46649,
      "upload_time": "2023-02-23T16:17:17",
      "upload_time_iso_8601": "2023-02-23T16:17:17.939458Z",
      "url": "https://files.pythonhosted.org/packages/d6/a9/eb0479b6a8b38bb756b05011463c4bfb327fac872f077fd5d8f83249562f/django-clickhouse-backend-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}