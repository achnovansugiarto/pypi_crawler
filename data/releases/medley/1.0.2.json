{
  "info": {
    "author": "Garret Bolthouse",
    "author_email": "garret@illumineinteractive.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Medley is a simple, lightweight Dependency Injection Container for\nPython, inspired by `Pimple <https://github.com/silexphp/Pimple>`__.\n\nRequirements\n------------\n\nMedley requires Python >=2.7 or Python >=3.2\n\n.. image:: https://travis-ci.org/illumine-interactive/medley.svg?branch=master\n    :target: https://travis-ci.org/illumine-interactive/medley\n\n\nInstallation\n------------\n\nInstall Medley using pip\n\n.. code:: bash\n\n       $ pip install medley\n\n\nUsage\n-----\n\nBuild your container by creating a ``MedleyContainer`` instance:\n\n.. code:: python\n\n       from medley import MedleyContainer\n\n       container = MedleyContainer()\n\n\nMedley manages two different kind of data: **services** and\n**parameters**.\n\n\nDefining Services\n-----------------\n\nA service is an object that does something as part of a larger system.\nExamples of services: a database connection, a templating engine, or a\nmailer. Almost any **global** object can be a service.\n\nServices are defined by **callables** (usually **lambdas**) that return an\ninstance of an object:\n\nExample using **lambdas**:\n\n.. code:: python\n\n       # define some services\n       container['session_storage'] = lambda c: SessionStorage('SESSION_ID')\n\n       container['session'] = lambda c: Session(c['session_storage'])\n\n\nNotice that service definition functions do require the container\nargument. Lambdas must have access to the current container instance,\nallowing references to other services or parameters.\n\nA **service decorator** is also available to wrap defined functions as a\nservice\n\n.. code:: python\n\n       @container.service('session_storage')\n       def session_storage(c):\n           return SessionStorage('SESSION_ID')\n\n       @container.service('session')\n       def session(c):\n           return Session(c['session_storage'])\n\nObjects are **lazy-loaded**, so the order in which you define services\ndoes not matter.\n\nGetting a defined service is easy:\n\n.. code:: python\n\n       session = container['session']\n\n       # the above call is roughly equivalent to the following code:\n       # storage = SessionStorage('SESSION_ID')\n       # session = Session(storage)\n\n\nDefining Factory Services\n-------------------------\n\nBy default, each time you get a service, Medley returns the **same\ninstance** of it. If you want a different instance to be returned for\nall calls, wrap your anonymous function with the ``factory()`` method\n\n.. code:: python\n\n       container['session'] = container.factory(lambda c: Session(c['session_storage']))\n\n       # you may also use a decorator\n\n       @container.create_factory('session')\n       def session(c):\n           return Session(c['session_storage'])\n\nNow, each call to ``container['session']`` returns a new instance of the\nsession.\n\nDefining Parameters\n-------------------\n\nDefining a parameter allows to ease the configuration of your container\nfrom the outside and to store global values:\n\n.. code:: python\n\n       # define some parameters\n       container['cookie_name'] = 'SESSION_ID';\n       container['session_storage_class'] = container.protect(SessionStorage);\n\nIf you change the ``session_storage`` service definition like below:\n\n\n.. code:: python\n\n       container['session_storage'] = lambda c: c['session_storage_class'](c['cookie_name'])\n\nYou can now easily change the cookie name by overriding the\n``cookie_name`` parameter instead of redefining the service definition.\n\n\nProtecting Parameters\n---------------------\n\nBecause Medley sees all callables as service definitions, you need to wrap\ncallables with the ``protect()`` method to store them as parameters.\n\n.. code:: python\n\n       from random import random\n\n       container['random_func'] = container.protect(lambda: random())\n\n       # class types also need to be protected\n       container['session_storage_class'] = container.protect(SessionStorage);\n\n\nModifying Services after Definition\n-----------------------------------\n\nIn some cases you may want to modify a service definition after it has\nbeen defined. You can use the ``extend()`` method to define additional\ncode to be run on your service just after it is created:\n\n.. code:: python\n\n       container['session_storage'] = lambda c: c['session_storage_class'](c['cookie_name'])\n\n       container.extend('session_storage', lambda storage, c: storage.some_call()\n\nThe first argument of the lambda is the name of the service to extend,\nthe second a function that gets access to the object instance and the\ncontainer.\n\nThe available **extends** decorator is usually more user-friendly when\nextending definitions, particularly when a service needs to be modified\nand returned\n\n.. code:: python\n\n       @container.service('session_storage')\n       def session_storage(c):\n           return c['session_storage_class'](c['cookie_name'])\n\n       @container.extends('session_storage')\n       def extended_session_storage(storage, c):\n           storage.some_call()\n           return storage\n\n\nExtending a Container\n---------------------\n\nYou can build a set of libraries with Medley using the Providers. You\nmight want to reuse some services from one project to the next one;\npackage your services into a **provider** by implementing\n``medley.ServiceProviderInterface``:\n\n.. code:: python\n\n       from medley import MedleyContainer, ServiceProviderInterface\n\n       class FooProvider(ServiceProviderInterface):\n\n           def register(container: MedleyContainer):\n               # register some services and parameters on container\n               container['foo'] = lambda c: return 'bar'\n\n\nThen, register the provider on a MedleyContainer:\n\n.. code:: python\n\n       container.register(FooProvider())\n\n\nFetching the Service Creation Function\n--------------------------------------\n\nWhen you access an object via ``container['some_id']``, Medley\nautomatically calls the function that you defined, which creates the\nservice object for you. If you want to get raw access to this function,\nyou can use the ``raw()`` method:\n\n.. code:: python\n\n       container['session'] = lambda c: Session(c['session_storage'])\n\n       session_function = container.raw('session')\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/illumine-interactive/medley",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medley",
    "package_url": "https://pypi.org/project/medley/",
    "platform": "",
    "project_url": "https://pypi.org/project/medley/",
    "project_urls": {
      "Homepage": "https://github.com/illumine-interactive/medley"
    },
    "release_url": "https://pypi.org/project/medley/1.0.2/",
    "requires_dist": [
      "six"
    ],
    "requires_python": ">=2.7",
    "summary": "A simple, lightweight Python Dependency Injection Container (IOC), inspired by Pimple",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5234953,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7f12003c078fda12d57c3f52effb774dd4c329212686035407e64c1a3e8f31f",
        "md5": "86e0b38092ae75559742e751add9ce5f",
        "sha256": "bdd4be9949df8647619faa0f3c9d1024fe5bcf3bb261c8de5627006792eb4b08"
      },
      "downloads": -1,
      "filename": "medley-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86e0b38092ae75559742e751add9ce5f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 5963,
      "upload_time": "2019-05-05T08:35:26",
      "upload_time_iso_8601": "2019-05-05T08:35:26.105678Z",
      "url": "https://files.pythonhosted.org/packages/b7/f1/2003c078fda12d57c3f52effb774dd4c329212686035407e64c1a3e8f31f/medley-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3510b53779830713f1d2b7537c1cc034ee18c22c5fc48908272bb466a68c1096",
        "md5": "0d5d206722c1e7771ebdc841c1de41e6",
        "sha256": "3db28263aea9e5495c5e26c170d2d22906e939fad9ebaeac1e8eeaa710062ff8"
      },
      "downloads": -1,
      "filename": "medley-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0d5d206722c1e7771ebdc841c1de41e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 4911,
      "upload_time": "2019-05-05T08:35:27",
      "upload_time_iso_8601": "2019-05-05T08:35:27.854073Z",
      "url": "https://files.pythonhosted.org/packages/35/10/b53779830713f1d2b7537c1cc034ee18c22c5fc48908272bb466a68c1096/medley-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}