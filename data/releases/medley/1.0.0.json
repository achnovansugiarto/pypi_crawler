{
  "info": {
    "author": "Garret Bolthouse",
    "author_email": "garret@illumineinteractive.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Medley is a simple, lightweight Dependency Injection Container for Python, inspired by [Pimple](https://github.com/silexphp/Pimple).\n\n\nRequirements\n------------\nMedley requires Python >=2.7 or Python >=3.2\n\n[![Build Status](https://travis-ci.org/illumine-interactive/medley.svg?branch=master)](https://travis-ci.org/illumine-interactive/medley)\n\n\nInstallation\n------------\nInstall Medley using pip\n\n```bash\n    $ pip install medley\n```\n\nUsage\n-----\n\nBuild your container by creating a ``MedleyContainer`` instance:\n\n```python\n\n    from medley import MedleyContainer\n\n    container = MedleyContainer()\n```\n\nMedley manages two different kind of data: **services** and **parameters**.\n\n\nDefining Services\n-----------------\n\nA service is an object that does something as part of a larger system. Examples\nof services: a database connection, a templating engine, or a mailer. Almost\nany **global** object can be a service.\n\nServices are defined by **functions and lambdas** that return an instance of an\nobject:\n\nExample using **lambdas**:\n\n```python\n\n    # define some services\n    container['session_storage'] = lambda c: SessionStorage('SESSION_ID')\n\n    container['session'] = lambda c: Session(c['session_storage'])\n```\n\nNotice that service definition functions do require the container argument.\nLambdas must have access to the current container instance, allowing references\nto other services or parameters.\n\nA **service decorator** is also available to wrap defined functions as a service\n\n```python\n\n    @container.service('session_storage')\n    def session_storage(c):\n        return SessionStorage('SESSION_ID')\n\n    @container.service('session')\n    def session(c):\n        return Session(c['session_storage'])\n```\n\n\nObjects are **lazy-loaded**, so the order in which you define services\ndoes not matter.\n\nGetting a defined service is easy:\n\n```python\n\n    session = container['session']\n\n    # the above call is roughly equivalent to the following code:\n    # storage = SessionStorage('SESSION_ID')\n    # session = Session(storage)\n```\n\nDefining Factory Services\n-------------------------\n\nBy default, each time you get a service, Medley returns the **same instance**\nof it. If you want a different instance to be returned for all calls, wrap your\nanonymous function with the ``factory()`` method\n\n```python\n\n    container['session'] = container.factory(lambda c: Session(c['session_storage']))\n\n    # you may also use a decorator\n\n    @container.create_factory('session')\n    def session(c):\n        return Session(c['session_storage'])\n```\n\nNow, each call to ``container['session']`` returns a new instance of the\nsession.\n\n\nDefining Parameters\n-------------------\n\nDefining a parameter allows to ease the configuration of your container from\nthe outside and to store global values:\n\n``` python\n\n    # define some parameters\n    container['cookie_name'] = 'SESSION_ID';\n    container['session_storage_class'] = 'SessionStorage';\n```\n\nIf you change the ``session_storage`` service definition like below:\n\n\n```python\n\n    container['session_storage'] = lambda c: c['session_storage_class'](c['cookie_name'])\n```\n\nYou can now easily change the cookie name by overriding the\n``cookie_name`` parameter instead of redefining the service\ndefinition.\n\n\nProtecting Parameters\n---------------------\n\nBecause Medley sees lambdas as service definitions, you need to\nwrap lambdas with the ``protect()`` method to store them as\nparameters:\n\n``` python\n\n    from random import random\n\n    container['random_func'] = container.protect(lambda: random())\n```\n\nModifying Services after Definition\n-----------------------------------\n\nIn some cases you may want to modify a service definition after it has been\ndefined. You can use the ``extend()`` method to define additional code to be\nrun on your service just after it is created:\n\n```python\n\n    container['session_storage'] = lambda c: c['session_storage_class'](c['cookie_name'])\n\n    container.extend('session_storage' lambda storage, c: storage.some_call()\n```\n\nThe first argument of the lambda is the name of the service to extend, the\nsecond a function that gets access to the object instance and the container.\n\nThe available **extends** decorator is usually more user-friendly when extending\ndefinitions, particularly when a service needs to be modified and returned\n\n```python\n\n    @container.service('session_storage')\n    def session_storage(c):\n        return c['session_storage_class'](c['cookie_name'])\n\n    @container.extends('session_storage')\n    def extended_session_storage(storage, c):\n        storage.some_call()\n        return storage\n```\n\nExtending a Container\n---------------------\n\nYou can build a set of libraries with Medley using the Providers. You might want\nto reuse some services from one project to the next one; package your services\ninto a **provider** by implementing ``medley.ServiceProviderInterface``:\n\n```python\n\n    from medley import MedleyContainer, ServiceProviderInterface\n\n    class FooProvider(ServiceProviderInterface):\n\n        def register(container: MedleyContainer):\n            # register some services and parameters on container\n            container['foo'] = lambda c: return 'bar'\n```\n\nThen, register the provider on a MedleyContainer:\n\n```python\n\n    container.register(FooProvider())\n```\n\n\nFetching the Service Creation Function\n--------------------------------------\n\nWhen you access an object via ```container['some_id']```, Medley automatically\ncalls the function that you defined, which creates the service object for you.\nIf you want to get raw access to this function, you can use the ``raw()``\nmethod:\n\n```python\n\n    container['session'] = lambda c: Session(c['session_storage'])\n\n    session_function = container.raw('session')\n```\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/illumine-interactive/medley",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medley",
    "package_url": "https://pypi.org/project/medley/",
    "platform": "",
    "project_url": "https://pypi.org/project/medley/",
    "project_urls": {
      "Homepage": "https://github.com/illumine-interactive/medley"
    },
    "release_url": "https://pypi.org/project/medley/1.0.0/",
    "requires_dist": [
      "six"
    ],
    "requires_python": "",
    "summary": "A simple, lightweight Python Dependency Injection Container (IOC), inspired by Pimple",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5234953,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60687b267dc42f4dbbc5fbe313398139b7424b527ca76ae3c68f5dd2630e4634",
        "md5": "16ead85f9f8ba36144bd269f6dccc6ac",
        "sha256": "a21c106bc0fc373c35f50d9034e0758da71b6cd29125a5a927d584e3f0aeea58"
      },
      "downloads": -1,
      "filename": "medley-1.0.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "16ead85f9f8ba36144bd269f6dccc6ac",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 5053,
      "upload_time": "2019-04-16T00:20:27",
      "upload_time_iso_8601": "2019-04-16T00:20:27.290531Z",
      "url": "https://files.pythonhosted.org/packages/60/68/7b267dc42f4dbbc5fbe313398139b7424b527ca76ae3c68f5dd2630e4634/medley-1.0.0-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cc68e96475a8ace39fabff2b94376ce13efc0b726b4398d16053c828763f9fa",
        "md5": "b3b986eda3b2df078ca70c8a506481af",
        "sha256": "68c2171f9db0bec0e99fb9a75725d726240f8ba865609addad12eda7cb51c59e"
      },
      "downloads": -1,
      "filename": "medley-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3b986eda3b2df078ca70c8a506481af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5897,
      "upload_time": "2019-04-16T00:20:28",
      "upload_time_iso_8601": "2019-04-16T00:20:28.957516Z",
      "url": "https://files.pythonhosted.org/packages/6c/c6/8e96475a8ace39fabff2b94376ce13efc0b726b4398d16053c828763f9fa/medley-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d77102dc8a0fa3bf4c8f0b6d5c2886d83c95fca8f38064d44961df46ceeb2a08",
        "md5": "367e016645c11d09372e74abedd53485",
        "sha256": "36777a321a72d43cfd5101246c2f4fdb703ca7ca775073dd50e221f5b71a6a91"
      },
      "downloads": -1,
      "filename": "medley-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "367e016645c11d09372e74abedd53485",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4840,
      "upload_time": "2019-04-16T00:20:30",
      "upload_time_iso_8601": "2019-04-16T00:20:30.450336Z",
      "url": "https://files.pythonhosted.org/packages/d7/71/02dc8a0fa3bf4c8f0b6d5c2886d83c95fca8f38064d44961df46ceeb2a08/medley-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}