{
  "info": {
    "author": "Roger Liang",
    "author_email": "pinguroger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "lmdo\n=========\nA simple CLI tool for developing microservices using AWS Lambda function (python2.7) and managing logistic of AWS resources\n\n\nPurpose\n-------\n\nThe existing open source tool sets such as [Apex](https://github.com/apex/apex) and [Serverless](https://github.com/serverless/serverless) have all sorts of limitations and too much abstractions. Understandably tools are often opinionated but flexibility should be allowed.\n\nIn our case, we want to use cloudformation and swagger tempalte to manage our AWS resource and also we want to be able to build standard Lambda function or use Django in Lambda. \n\nlmdo allows:\n- Use cloud formation templates\n- Use swagger for API Gateway\n- Individually managing AWS resources\n- Manage life cycles of AWS Lambda functions\n- Bridge Django framework\n- Tail Cloudwatch logs\n\nUsage\n-----\n\n    lmdo init <project_name>\n    lmdo bp fetch <url>\n    lmdo cf (create|update|delete)\n    lmdo lm (create|update|delete) [--function-name=<functionName>]\n    lmdo api (create|update|delete)\n    lmdo api create-stage <from_stage> <to_stage>\n    lmdo api delete-stage <from_stage>\n    lmdo api create-domain <domain_name> <cert_name> <cert_path> <cert_private_key_path> <cert_chain_path>\n    lmdo api delete-domain <domain_name>\n    lmdo api create-mapping <domain_name> <base_path> <api_name> <stage>\n    lmdo api delete-mapping <domain_name> <base_path>\n    lmdo s3 sync\n    lmdo logs tail function <function_name> [-f | --follow] [--day=<int>] [--start-date=<datetime>] [--end-date=<datetime>]\n    lmdo logs tail <log_group_name> [-f | --follow] [--day=<int>] [--start-date=<datetime>] [--end-date=<datetime>]\n    lmdo deploy\n    lmdo destroy\n    lmdo (-h | --help)\n    lmdo --version\n\n    Options:\n    -h --help                      Show this screen.\n    --version                      Show version.\n    --day=<int>                    Day to search e.g. 5, -10\n    --start-date=<datetime>        Start date in format 1970-01-01\n    --end-date=<datetime>          End date in format 1970-01-01\n    -f --follow                    Follow entry\n    --function-name=<functioName>  Lambda function name\n    --group-name=<groupName>       Cloudwatch log group name\n    \n    \nInstallation\n-----\n    $ sudo pip install lmdo\n\n\nProject initiation\n-----\nTo initiate your project, run\n\n    $ lmdo init <project_name>\n    \nThis will create a project folder and the sample lmdo configuration file `lmdo.yml` for you.\n\n**Note**: Apart from the init command, all other lmdo commands need to be run at the same directory of the lmdo.yml file\n\nAWS credentials\n-----\nYou can either use session (`Profile`) or configure AWS key and secret (`AWSKey, AWSSecret`) in lmdo.yml\n\nIf using session, you will need to create two files:\n\n    ~/.aws/config and ~/.aws/credentials\n\nDetails pleae ref to [AWS CLI](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)\n\nBoiler plating\n-----\nTo get a boiler plate repo from somewhere in github, run\n\n    $ lmdo bp fetch <url>\n    \nThe repo will then be copied from github to your current project folder without all the git folders or files\n\nAWS Cloudformation\n-----\nTo use cloudformation, you need to \n\n1. create a folder named `cloudformation` in your project folder, so it looks like:\n\n        <your-project>/cloudformation\n   The cloudformation template can be in any of `.yml`, `.json` or `.template` format as per AWS requirements. \n    \n2. there has to be one master template and named `main.*` regardless you are using single template or nested stacks. \n   \n   If using nested stacks, you must provide S3 bucket in your lmdo.yml file under `CloudformationBucket` as per AWS requirements.\n\n    For single template, if no S3 bucket provided, the template will be loaded from your local. \n\n3. If there are parameters, all parameters with their values must be provided in the file named `params.json`. This file however won't be uploaded to S3 under all scenarios for security reasons.\n\n4. If `StackName` is provided in lmdo.yml, it'll be used to create the stack. Otherwise lmdo will use `<user>-<stage>-<service-name>-service` to name your stack\n\nTo manage your cloudformation resource, run:\n\n    $ lmdo cf (create|update|delete)\n    \nAWS Lambda\n-----\nYou can create standard lambda function and or use a bridging lambda function provided by lmdo to connect to your django app. Lmdo allows you to create any number of lambda functions.\n\n1. Standard Python Lambda function\n\n   **Requirements**\n   \n   * The invokable lambda function files need to be placed on the top level of the project folder. \n   * The `requirements.txt` file and `vendored` folder are required under the project folder. \n   * All the pip installations will be installed in the `vendored` folder.\n   \n   **Writting your Lambda function**\n   \n   Add below lines at the beginning of your lambda function file so all your modules can be found by AWS Lambda runtime:\n\n        import os\n        import sys\n\n        module_path = os.path.dirname(os.path.realpath(__file__))\n        sys.path.append(os.path.join(module_path, \"./\"))\n        sys.path.append(os.path.join(module_path, \"./vendored\"))\n\n    **lmdo.yml configuration**\n    \n    To configure your lambda, enter an entry under `Lambda`:\n\n          S3Bucket: lambda.bucket.name        # mandatory, the bucket to load your package to\n          Type: default                       # Optional, other types is django\n          FunctionName: superman              # mandatory, the actual function name in AWS will have the format of <user>-<stage>-<service-name>-<FunctionName>\n          Handler: handler.fly                # mandatory, define the handler function\n          MemorySize: 128                     # optional, default to 128\n          RoleArn: rolearn                    # Either provide a role arn or assume role policy doc, the RolePolicyDocument takes preccedent\n          RolePolicyDocument: path/to/policy  # Assume role Policy\n          Runtime: python2.7                  # optional default to 'python2.7'\n          Timeout: 180                        # optional default to 180\n          VpcConfig:                          # optional, Lambda VPC configuration\n              SecurityGroupIds:\n                  - string\n                  - string\n              SubnetIds:\n                  - string\n                  - string\n          EnvironmentVariables:              # optional, runtime environment variable\n              MYSQL_HOST: localhost\n              MYSQL_PASSWORD: secret\n              MYSQL_USERNAME: admin\n              MYSQL_DATABASE: lmdo\n \n2. Django app\n\n   **Requirements**\n   \n   * The `requirements.txt` file and `vendored` folder are required under the project folder. \n   * All the pip installations will be installed in the `vendored` folder.\n   \n   **lmdo.yml configuration**\n   \n   To config, add below entry in `Lambda`:\n   \n         S3Bucket: lambda.bucket.name        # mandatory\n         Type: django                        # Other types\n         DisableApiGateway: False            # Optional, if set to True, the apigateway for Django app won't be created\n         ApiBasePath: /path                  # Mandatory if apigateway to be created. Base resource path for django app\n         FunctionName: superman              # mandatory\n         MemorySize: 128                     # optional, default to 128\n         RoleArn: rolearn                    # Either provide a role arn or assume role policy doc, the RolePolicyDocument takes preccedent\n         RolePolicyDocument: path/to/policy  # Assume role Policy\n         Runtime: python2.7                  # optional default to 'python2.7'\n         Timeout: 180                        # optional default to 180\n         VpcConfig:                          # optional\n             SecurityGroupIds:\n                 - string\n                 - string\n             SubnetIds:\n                 - string\n         EnvironmentVariables:                       # mandatory\n             DJANGO_SETTINGS_MODULE: mysite.settings # mandatory\n \n \nTo deploy all the functions, run\n\n    $ lmdo lm (create|update|delete)\n\nTo only deploy one function, run\n    \n    $ lmdo lm (create|update|delete) --function-name=blah\n\nAWS API Gateway\n-----\n1. Standard API Gateway\n   Swagger template is used to create API Gateway\n\n    **Requirements**\n    \n    * A folder named 'swagger' under your project folder\n    * Name your swagger template as `apigateway.json`\n\n    **lmdo.yml configuration**\n    \n        ApiGatewayName: Your unique Apigateway name\n    \n    **NOTE:** Please name your version as `$version` and your title as `$title` so that Lmdo can update it during creation using the value of `ApiGatewayName` in your lmdo.yml.\n\n2. WSGI(Django) API\n   Lmdo automatically create a API Gateway resource if you have Django Lambda function configured using proxy unless you have `DisableApiGateway` set to `True` in your Lambda function config in `lmdo.yml`. There will only be one API gateway created. Django api will be appended as part of the resource\n\nTo manage your APIGateway resource, run:\n\n    $ lmdo api (create|update|delete)\n    \nYou can create or delete a stage by running\n\n    $ lmdo api create-stage <from_stage> <to_stage>\n    or \n    $ lmdo api delete-stage <from_stage>\n\nAWS S3\n-----\nLmdo offers a simple command line to upload your local static asset into a S3 bucket. All you need to do is to configure `AssetS3Bucket` and `AssetDirectory` in your lmdo.yml, then run\n\n    $ lmdo s3 sync\n\n    \nAWS Cloudwatch Logs\n-----\n1. You can tail any AWS cloudwatch group logs by running:\n\n        $ lmdo logs tail <log_group_name> [-f | --follow] [--day=<int>] [--start-date=<datetime>] [--end-date=<datetime>]\n\n    `--day` value defines how many days ago the logs need to be retrieved or you specify a start date and/or end date for the log entries using format `YYYY-MM-DD`\n\n2. You can also tail logs of your lambda function in your project by running:\n\n        $ lmdo logs tail function <function_name> [-f | --follow] [--day=<int>] [--start-date=<datetime>] [--end-date=<datetime>]\n\n  The `<function_name>` is the name you configure in your lmdo.yml\n\nOne step deployment\n-----\nAlternatively, you can deploy and delete your entire service by running\n    \n    $ lmdo deloy \n        or\n    $ lmdo destroy",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/MerlinTechnology/lmdo/tarball/2.0.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MerlinTechnology/lmdo",
    "keywords": "cli",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lmdo",
    "package_url": "https://pypi.org/project/lmdo/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lmdo/",
    "project_urls": {
      "Download": "https://github.com/MerlinTechnology/lmdo/tarball/2.0.1",
      "Homepage": "https://github.com/MerlinTechnology/lmdo"
    },
    "release_url": "https://pypi.org/project/lmdo/2.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "CLI tools for microservices automation using AWS Lambda function",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4096566,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7731166bffe30eb559f485aec69ac7d2cf50f6ea654743a62388a55e0b4ae93",
        "md5": "a7a02af2d2249eea202cb6cf71d8c0b8",
        "sha256": "6522ead0b08c96b82c23cba0293b245d86df1224657541ab8322dcca31e2be8b"
      },
      "downloads": -1,
      "filename": "lmdo-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a7a02af2d2249eea202cb6cf71d8c0b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30810,
      "upload_time": "2017-01-25T03:59:52",
      "upload_time_iso_8601": "2017-01-25T03:59:52.707539Z",
      "url": "https://files.pythonhosted.org/packages/e7/73/1166bffe30eb559f485aec69ac7d2cf50f6ea654743a62388a55e0b4ae93/lmdo-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}