{
  "info": {
    "author": "imtapps",
    "author_email": "webadmin@imtapps.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "This app allows you to convert objects into fixed width records.\n\nIn version 0.1.0 we introduce an entirely new (albeit similar) interface\nthat breaks all dependency on Django and removes the necessity of\nmanually setting the order of fields. We call it 'fixedwidth'.\n\nUsage:\n\n  from djcopybook.fixedwidth import Record\n  from djcopybook.fixedwidth import fields  \n\n  class Person(Record):\n      first_name = fields.StringField(length=20)\n      last_name = fields.StringField(length=30)\n      siblings = fields.IntegerField(length=2)\n      birth_date = fields.DateField(length=10, format=\"%Y-%m-%d\")\n\n  >>> p = Person(first_name=\"Joe\", last_name=\"Smith\", siblings=3, birth_date=\"1982-09-11\")\n  >>> p.birth_date\n  datetime.date(1982, 9, 11)\n  >>> p.to_record()\n  'Joe                 Smith                         031982-09-11'\n\nYou can also set attributes after a record has been instantiated, give\nfields default values, and other fun stuff.\n\nWhen you have a record instance, the data values will always be their\npython value, and when you do a to_record on the Record as a whole or\nan individual field it will have the fixedwidth format.\n\n\nNew in version 0.1.1:\n  ListField: lets you have one field whose values are made of another\n  complete record. Similar to COBOL's OCCURS functionality. Declaring\n  length on the ListField tells how many times that record repeats.\n\n  USAGE:\n    class PhoneNumber(Record):\n        identifier = fields.StringField(length=10, default=\"Mobile\")\n        area_code = fields.IntegerField(length=3)\n        prefix = fields.IntegerField(length=3)\n        line_number = fields.IntegerField(length=4)\n\n    class Person(Record):\n        first_name = fields.StringField(length=20)\n        last_name = fields.StringField(length=30)\n        siblings = fields.IntegerField(length=2)\n        birth_date = fields.DateField(length=10, format=\"%Y-%m-%d\")\n        phone_numbers = fields.ListField(record=PhoneNumber, length=3)\n\n    >>> phone_one = PhoneNumber(area_code=515, prefix=555, line_number=2222)\n    >>> person = Person(first_name=\"Joe\", last_name=\"Smith\", siblings=3,\n                   birth_date=\"1982-09-11\", phone_numbers=[phone_one])\n\n    >>> person.to_record()\n    'Joe                 Smith                         031982-09-11Mobile    5155552222Mobile    0000000000Mobile    0000000000'\n\n\nNew in version 0.1.2:\n  Convert records from a fixed width format back into record objects\n\n  USAGE:\n    class Person(Record):\n        first_name = fields.StringField(length=20)\n        last_name = fields.StringField(length=30)\n        siblings = fields.IntegerField(length=2)\n        birth_date = fields.DateField(length=10, format=\"%Y-%m-%d\")\n\n    >>> fixedwidth_record = 'Joe                 Smith                         031982-09-11'\n    >>> person = Person.from_record(fixedwidth_record)\n    >>> person.first_name\n    'Joe'\n    >>> person.last_name\n    'Smith'\n    >>> person.siblings\n    3\n    >>> person.birth_date\n    datetime.date(1982, 9, 11)\n\n\nNew in version 0.1.6:\n  FragmentField: Similar to the ListField, but only occurring one time.\n  Useful if you have a common element included in multiple Records.\n\n  USAGE:\n    class Phone(Record):\n        area_code = fields.IntegerField(length=3)\n        prefix = fields.IntegerField(length=3)\n        line_number = fields.IntegerField(length=4)\n\n    class Contact(Record):\n        name = fields.StringField(length=30)\n        phone_number = fields.FragmentField(record=Phone)\n        email = fields.StringField(length=30)\n\n    >>> phone = PhoneNumber(area_code=515, prefix=555, line_number=2222)\n    >>> contact = Contact(name=\"Joe\", phone_number=phone, email=\"joe@example.com\")\n    >>> contact.to_record()\n    'Joe                 5155552222joe@example.com               '\n\n\n    or:\n\n    >>> contact = Contact(name=\"Joe\", email=\"joe@example.com\")\n    >>> contact.phone_number.area_code = 515\n    >>> contact.phone_number.prefix = 555\n    >>> contact.phone_number.line_number = 2222\n    >>> contact.to_record()\n    'Joe                 5155552222joe@example.com               '\n\n\nNew in version 0.1.7:\nYou can now populate a record object with a dictionary containing more items\nthan the record has fields. The record will use the values if it has the\nassociated fields, but will ignore extra data.\n\nThis is useful when populating records from a form's cleaned_data for instance\nif the form has more data than that specific record wants.\n\n\nNew in version 0.1.9:\n``Record`` now has an ``auto_truncate`` attribute you can set to\ntruncate each field down to the expected size instead of raising an error.\n    USAGE:\n    class Sample(Record):\n        field = fields.StringField(length=5)\n\n    >>> s = Sample(field='this is too long')\n    >>> str(s)\n    'this '\n\n\nNotes:\n  Because we are using OrderedDict, the new fixedwidth implementation\n  will only work on Python 2.7 and above. (you can copy the OrderdDict\n  class yourself if you need < 2.7)\n\n  The previous Django model implementation is pending deprecation.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imtapps/django-copybook",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-copybook",
    "package_url": "https://pypi.org/project/django-copybook/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-copybook/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/imtapps/django-copybook"
    },
    "release_url": "https://pypi.org/project/django-copybook/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Convert Objects and Django models to/from fixed format records.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1813619,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4244aa7c9439ff39d921961b557f24cdde364cca4fa7d3e4a3f4a97c54749a6",
        "md5": "0d32c22bfb37de4e1a7402a6ea046576",
        "sha256": "2f13e19ec7f1412e24f383934ac6884df074e92039b18b9ba49f55ad41c6aa10"
      },
      "downloads": -1,
      "filename": "django-copybook-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0d32c22bfb37de4e1a7402a6ea046576",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12574,
      "upload_time": "2013-10-25T17:28:02",
      "upload_time_iso_8601": "2013-10-25T17:28:02.230007Z",
      "url": "https://files.pythonhosted.org/packages/b4/24/4aa7c9439ff39d921961b557f24cdde364cca4fa7d3e4a3f4a97c54749a6/django-copybook-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}