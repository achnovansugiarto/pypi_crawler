{
  "info": {
    "author": "Timothy Hobbs",
    "author_email": "timothy.hobbs@auto-mat.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/django-import-export-celery.svg\n   :target: https://pypi.org/project/django-import-export-celery/#history\n\ndjango-import-export-celery: process slow django imports and exports in celery\n==============================================================================\n\ndjango-import-export-celery helps you process long running imports and exports in celery.\n\nBasic installation\n------------------\n\n1. `Set up celery <http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html>`__ to work with your project.\n\n2. Add ``'import_export_celery'`` to your ``INSTALLED_APPS`` settings variable\n\n3. Add ``'author.middlewares.AuthorDefaultBackendMiddleware'`` to your ``MIDDLEWARE_CLASSES``\n\n4. Configure the location of your celery module setup\n\n    ::\n\n        IMPORT_EXPORT_CELERY_INIT_MODULE = \"projectname.celery\"\n\n\nSetting up imports with celery\n------------------------------\n\nA fully configured example project can be found in the example directory of this repository.\n\n1. Perform the basic setup procedure described above.\n\n2.  Configure the IMPORT_EXPORT_CELERY_MODELS variable.\n\n    ::\n\n        def resource():  # Optional\n            from myapp.models import WinnerResource\n            return WinnerResource\n\n\n        IMPORT_EXPORT_CELERY_MODELS = {\n            \"Winner\": {\n                'app_label': 'winners',\n                'model_name': 'Winner',\n                'resource': resource,  # Optional\n            }\n        }\n\n    The available parameters are `app_label`, `model_name`, and `resource`. 'resource' should be a function which returns a django-import-export `Resource <https://django-import-export.readthedocs.io/en/latest/api_resources.html>`__.\n\n3. Done\n\n\nPreforming an import\n--------------------\n\nYou will find an example django application that uses django-import-export-celery for importing data. There are instructions for running the example application in the example directory's README file. Once you have it running, you can perform an import with the following steps.\n\n1. Navigate to the example applications admin page:\n\n   .. image:: screenshots/admin.png\n\n2. Navigate to the ImportJobs table:\n\n   .. image:: screenshots/import_jobs.png\n\n3. Create a new import job. There is an example import CSV file in the example/example-data directory. Select that file. Select csv as the file format. We'll be importing to the Winner's model table.\n\n   .. image:: screenshots/new_import_job.png\n\n4. Select \"Save and continue editing\" to save the import job and refresh until you see that a \"Summary of changes made by this import\" file has been created.\n\n   .. image:: screenshots/summary.png\n\n5. You can view the summary if you want. Your import has NOT BEEN PERFORMED YET!\n\n   .. image:: screenshots/view-summary.png\n\n6. Return to the import-jobs table, select the import job we just created, and select the \"Perform import\" action from the actions drop down.\n\n   .. image:: screenshots/perform-import.png\n\n7. In a short time, your imported Winner object should show up in your Winners table.\n\n   .. image:: screenshots/new-winner.png\n\n\nSetting up exports\n------------------\n\nAs with imports, a fully configured example project can be found in the `example` directory.\n\n1. Add a `export_resource_classes` classmethod to the model you want to export.\n    ::\n\n        @classmethod\n        def export_resource_classes(cls):\n            return {\n                'winners': ('Winners resource', WinnersResource),\n                'winners_all_caps': ('Winners with all caps column resource', WinnersWithAllCapsResource),\n            }\n\n    This should return a dictionary of tuples. The keys should be unique unchanging strings, the tuples should consist of a `resource <https://django-import-export.readthedocs.io/en/latest/getting_started.html#creating-import-export-resource>`__ and a human friendly description of that resource.\n\n2. Add the `create_export_job_action` to the model's `ModelAdmin`.\n    ::\n\n        from django.contrib import admin\n        from import_export_celery.admin_actions import create_export_job_action\n\n        from . import models\n\n\n        @admin.register(models.Winner)\n        class WinnerAdmin(admin.ModelAdmin):\n            list_display = (\n                'name',\n            )\n\n            actions = (\n                create_export_job_action,\n            )\n\n3. To customise export queryset you need to add `get_export_queryset` to the `ModelResource`.\n    ::\n\n        class WinnersResource(ModelResource):\n            class Meta:\n                model = Winner\n\n            def get_export_queryset(self):\n                \"\"\"To customise the queryset of the model resource with annotation override\"\"\"\n                return self.Meta.model.objects.annotate(device_type=Subquery(FCMDevice.objects.filter(\n                        user=OuterRef(\"pk\")).values(\"type\")[:1])\n4. Done!\n\nPerforming exports with celery\n------------------------------\n\n1. Perform the basic setup procedure described in the first section.\n\n2. Open up the object list for your model in django admin, select the objects you wish to export, and select the `Export with celery` admin action.\n\n3. Select the file format and resource you want to use to export the data.\n\n4. Save the model\n\n5. You will receive an email when the export is done, click on the link in the email\n\n6. Click on the link near the bottom of the page titled `Exported file`.\n\nFor developers of this library\n------------------------------\n\nYou can enter a preconfigured dev environment by first running `make` and then launching `./develop.sh` to get into a docker compose environment packed with **redis**, **celery**, **postgres** and everything you need to run and test django-import-export-celery.\n\nBefore submitting a PR please run `flake8` and (in the examples directory) `python3 manange.py test`.\n\nPlease note, that you need to restart celery for changes to propogate to the workers. Do this with `docker-compose down celery`, `docker-compose up celery`.\n\nCredits\n-------\n\n`django-import-export-celery` was developed by the Czech non-profit `auto*mat z.s. <https://auto-mat.cz>`_.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/django-import-export-celery/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/auto-mat/django-import-export-celery",
    "keywords": "",
    "license": "License :: OSI Approved :: GNU Lesser General Public License v3.0 or later (LGPLv3.0+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-import-export-celery",
    "package_url": "https://pypi.org/project/django-import-export-celery/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-import-export-celery/",
    "project_urls": {
      "Download": "http://pypi.python.org/pypi/django-import-export-celery/",
      "Homepage": "https://github.com/auto-mat/django-import-export-celery"
    },
    "release_url": "https://pypi.org/project/django-import-export-celery/1.3/",
    "requires_dist": [
      "Django",
      "django-import-export",
      "django-author"
    ],
    "requires_python": "",
    "summary": "Process long running django imports and exports in celery",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14106253,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39aa9ae1bd21ebdcb3e6dd6e61e7c890b380ab46984bb1907d5e5272b0f11911",
        "md5": "4b663f1e801e9ac63136e01192fa65ed",
        "sha256": "6bad37fe1b0c1dcda57e910085d4d6b03a9e0f03165b48e7d986e55000eeb399"
      },
      "downloads": -1,
      "filename": "django_import_export_celery-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b663f1e801e9ac63136e01192fa65ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20160,
      "upload_time": "2022-06-12T11:14:47",
      "upload_time_iso_8601": "2022-06-12T11:14:47.830655Z",
      "url": "https://files.pythonhosted.org/packages/39/aa/9ae1bd21ebdcb3e6dd6e61e7c890b380ab46984bb1907d5e5272b0f11911/django_import_export_celery-1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbfe2ad8b570d147a2ecd834e2d2b5239a18523b1fa7f8a2b954b0ec75b553f5",
        "md5": "0dc982892b866033aef63ed852ce2862",
        "sha256": "700e0825bad44312bdc63b07f63133d57300f3b6b668c55439e1158aca91092f"
      },
      "downloads": -1,
      "filename": "django-import-export-celery-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0dc982892b866033aef63ed852ce2862",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14090,
      "upload_time": "2022-06-12T11:14:49",
      "upload_time_iso_8601": "2022-06-12T11:14:49.317690Z",
      "url": "https://files.pythonhosted.org/packages/cb/fe/2ad8b570d147a2ecd834e2d2b5239a18523b1fa7f8a2b954b0ec75b553f5/django-import-export-celery-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}