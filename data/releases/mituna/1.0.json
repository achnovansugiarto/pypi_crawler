{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "TUNA \n====\n\nTuna is a distributed tuning infrastructure that provides tuning through automated \nJenkins pipelines and SLURM scalable architecture. For MIOpen customers we provide\npre-compiled kernels.\n\nPrerequisites\n-------------\n\nInstall python3.9\n```\napt-get update && apt-get install software-properties-common\nadd-apt-repository ppa:deadsnakes/ppa\napt install python3.9\n```\n\nInstall pip for python3.9\n```\nwget https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3.9 get-pip.py\nrm get-pip.py\n```\n\nInstall MySQL server\n```\napt-get install mysql-server\n```\n\nEnable the service\n```\nsystemctl start mysql\n```\n\nInstall ipmitool\n```\napt-get install ipmitool\n```\n\nSetup passwordless ssh between all machines, for example:\n```\nssh-keygen -t rsa\nssh-copy-id <user>@<ip-address>\nssh <user>@<ip-address>\n```\nFor the tuning cycle, every machine needs to be able to access every other machine through\npasswordless ssh.\n\n\nInstallation\n------------\nClone the repo using \n```\ngit clone <repo url>\n```\nEnter the Tuna directory\n```\ncd MITuna\n```\nCreate a virtual envornment, and activate it (by sourcing its `activate` script)\n```\nvirtualenv -p python3.9 myvenv\nsource myvenv/bin/activate\n```\nInstall the required dependencies:\n```\npython3.9 -m pip install -r requirements.txt\n```\nThe above assumes that Tuna lives in the home directory and the virtual environment was created using the command indicated above.\n\nAdd the following environment variables to a local file and then source the file:\n```\nexport TUNA_DB_USER_NAME=root\nexport TUNA_DB_PASSWORD=<password for root>\nexport TUNA_DB_HOSTNAME=localhost\nexport TUNA_DB_NAME=<database_name>\nexport gateway_ip=<gateway_ip>\nexport gateway_port=<gateway_port>\nexport gateway_user=<gateway_user>\n```\n\nAll machines used in the tuning process must have ssh-keys enabled. MITuna needs to\nhave all-to-all machine communication available and passwords must not be required at run-time.\n\nRun the setup scripts:\n```\npython3.9 setup.py develop\n```\n\nThe root tuna folder needs to be appended to the PYTHONAPTH:\n```\nexport PYTHONPATH=/<path_to_MITuna>/:$PYTHONPATH\n```\n\nTo create the database run the following script:\n```\n./tuna/miopen/db_tables.py\n```\n\nThe installation and setup are now complete. To start a tuning cycle, please follow the steps\ndocumented in [TuningCycle](https://github.com/ROCmSoftwarePlatform/MITuna/blob/develop/doc/src/TuningCycle.md)\n\nCode formatting\n---------------\n\nMITuna used yapf for code formatting:\n```\nyapf -i --style='{based_on_style: google, indent_width: 2}' --recursive tuna/\nyapf -i --style='{based_on_style: google, indent_width: 2}' --recursive tests/\n```\n\nStatic code analysis\n--------------------\n\nIn order for a PR to be accepted the following pylint command needs to result in 10/10 analysis:\n```\ncd MITuna/tuna\npylint -f parseable -d duplicate-code --max-args=8 --indent-string '  ' *.py\n```\n## Coverage \n\nTo extract coverage percentage from the underlying code base prior to opening Pull Request:\n\n```\ncd MITunaX\n./tests/covscripts/coverage_script.sh\n```\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ROCmSoftwarePlatform/MITuna.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MITuna",
    "package_url": "https://pypi.org/project/MITuna/",
    "platform": null,
    "project_url": "https://pypi.org/project/MITuna/",
    "project_urls": {
      "Homepage": "https://github.com/ROCmSoftwarePlatform/MITuna.git"
    },
    "release_url": "https://pypi.org/project/MITuna/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Tuna is a distributed tuning infrastructure that provides pre-compiled kernels for MIOpen customers through automated Jenkins pipelines and SLURM scalable architecture. MITuna also provides a scalable task management infrastructure ready to integrate with external libaries.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17070610,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ef5be6fb5f5a7b0c7ea59cd16b824a7b68cdeac45985fd9a17995e0b3547484",
        "md5": "8ad1775e8d8eaa70bd1c08ad07619554",
        "sha256": "b86d5800d2e185c0aa424734489c62d23aee229edab3b57e15bd33f76bf0a72a"
      },
      "downloads": -1,
      "filename": "MITuna-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8ad1775e8d8eaa70bd1c08ad07619554",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 39620,
      "upload_time": "2023-02-27T18:03:55",
      "upload_time_iso_8601": "2023-02-27T18:03:55.849980Z",
      "url": "https://files.pythonhosted.org/packages/1e/f5/be6fb5f5a7b0c7ea59cd16b824a7b68cdeac45985fd9a17995e0b3547484/MITuna-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}