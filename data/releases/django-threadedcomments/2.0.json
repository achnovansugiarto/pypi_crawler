{
  "info": {
    "author": "Eric Florenzano",
    "author_email": "floguy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-threadedcomments\n=======================\n\n*threadedcomments* is a Django application which allows for the simple creation of a threaded commenting system.\nCommenters can reply both to the original item, and reply to other comments as well.\n\nThe application is built on top of django_comments_,\nwhich allows it to be easily extended by other modules.\n\n\nInstallation\n============\n\nInstall the package via pip::\n\n    pip install django-threadedcomments\n\nIt's preferred to install the module in a virtual environment.\n\nConfiguration\n-------------\n\nAdd the following to ``settings.py``::\n\n    INSTALLED_APPS += (\n        'threadedcomments',\n        'django_comments',\n        'django.contrib.sites',\n    )\n\n    COMMENTS_APP = 'threadedcomments'\n\nBy placing the ``threadedcomments`` app above the ``django.contrib.comments`` application,\nthe placeholder ``comments/list.html`` template will already be replaced by a threaded view.\n\nMake sure django_comments_ is configured in ``urls.py``::\n\n    urlpatterns += patterns('',\n        url(r'^articles/comments/', include('django_comments.urls')),\n    )\n\nProvide a template that displays the comments for the ``object`` (e.g. article or blog entry)::\n\n    {% load threadedcomments_tags %}\n\n    ...\n\n    <h2>Comments for {{ object.title }}:</h2>\n\n    {% render_comment_list for object %}\n    {% render_comment_form for object %}\n\n\nTemplate design\n---------------\n\nNaturally, it's desirable to write your own version of ``comments/list.html`` in your project,\nor use one of the ``comments/app/list.html`` or ``comments/app/model/list.html`` overrides.\n\nMake sure to override ``comments/base.html`` as well, so the other views of django_comments_\nare displayed using your web site design. The other templates of django_comments_ are\nvery plain as well on purpose (for example ``comments/posted.html``),\nsince these pages depend on the custom design of the web site.\n\nSee the provided ``example`` app for a basic configuration,\nincluding a JavaScript-based reply form that moves to the comment the visitor replies to.\n\n\nTemplate tags\n=============\n\nThe ``threadedcomments_tags`` library is a drop-in replacement for the ``comments`` library\nthat is required for the plain comments. The tags are forwards compatible;\nthey support the same syntax as django_comments_ provides,\nand they add a few extra parameters.\n\nFetching comment counts::\n\n    {% get_comment_count for [object] as [varname] %}\n    {% get_comment_count for [object] as [varname] root_only %}\n\n    {% get_comment_count for [app].[model] [id] as [varname] %}\n    {% get_comment_count for [app].[model] [id] as [varname] root_only %}\n\nFetching the comments list::\n\n    {% get_comment_list for [object] as [varname] %}\n    {% get_comment_list for [object] as [varname] flat %}\n    {% get_comment_list for [object] as [varname] root_only %}\n\nRendering the comments list::\n\n    {% render_comment_list for [object] %}\n    {% render_comment_list for [object] root_only %}\n\n    {% render_comment_list for [app].[model] [id] %}\n    {% render_comment_list for [app].[model] [id] root_only %}\n\nFetching the comment form::\n\n    {% get_comment_form for [object] as [varname] %}\n    {% get_comment_form for [object] as [varname] with [parent_id] %}\n    {% get_comment_form for [app].[model] [id] as [varname] %}\n    {% get_comment_form for [app].[model] [id] as [varname] with [parent_id] %}\n\nRendering the comment form::\n\n    {% render_comment_form for [object] %}\n    {% render_comment_form for [object] with [parent_id] %}\n    {% render_comment_form for [app].[model] [id] %}\n    {% render_comment_form for [app].[model] [id] with [parent_id] %}\n\nRendering the whole tree::\n\n    {% for comment in comment_list|fill_tree|annotate_tree %}\n        {% ifchanged comment.parent_id %}{% else %}</li>{% endifchanged %}\n        {% if not comment.open and not comment.close %}</li>{% endif %}\n        {% if comment.open %}<ul>{% endif %}\n\n        <li id=\"c{{ comment.id }}\">\n            ...\n        {% for close in comment.close %}</li></ul>{% endfor %}\n    {% endfor %}\n\nThe ``fill_tree`` filter is required for pagination, it ensures that the parents of the first comment are included as well.\n\nThe ``annotate_tree`` filter adds the ``open`` and ``close`` properties to the comment.\n\n\nExtending the module\n====================\n\nThe application is built on top of the standard django_comments_ framework,\nwhich supports various signals, and template overrides to customize the comments.\n\nTo customize django-threadedcomments, override the proper templates, or include the apps that provide the missing features.\nFront-end editing support for example, is left out on purpose. It belongs to the domain of moderation, and policies\nto know \"who can do what\". That deserves to be in a separate application, it shouldn't be in this application as it focuses on threading.\nThe same applies to social media logins, comment subscriptions, spam protection and Ajax posting.\n\nNote that the standard framework also supports moderation, flagging, and RSS feeds too. More documentation can be found at:\n\n* `Django's comments framework <https://django-contrib-comments.readthedocs.io/>`_\n* `Customizing the comments framework <https://django-contrib-comments.readthedocs.io/en/latest/custom.html>`_\n* `Example of using the in-built comments app <https://django-contrib-comments.readthedocs.io/en/latest/example.html>`_\n\nSome of the modules worth looking at are:\n\n* django-comments-spamfighter_\n* django-myrecaptcha_\n* django-fluent-comments_\n\nThese modules can enhance the comments system even further.\n\n\n.. _django_comments: https://github.com/django/django-contrib-comments\n.. _django-fluent-comments: https://github.com/edoburu/django-fluent-comments/\n.. _django-myrecaptcha: https://bitbucket.org/pelletier/django-myrecaptcha/\n.. _django-comments-spamfighter: https://github.com/bartTC/django-comments-spamfighter/\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/HonzaKral/django-threadedcomments/zipball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HonzaKral/django-threadedcomments",
    "keywords": "django,comments,threading",
    "license": "BSD",
    "maintainer": "Diederik van der Boor",
    "maintainer_email": "vdboor@edoburu.nl",
    "name": "django-threadedcomments",
    "package_url": "https://pypi.org/project/django-threadedcomments/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-threadedcomments/",
    "project_urls": {
      "Download": "https://github.com/HonzaKral/django-threadedcomments/zipball/master",
      "Homepage": "https://github.com/HonzaKral/django-threadedcomments"
    },
    "release_url": "https://pypi.org/project/django-threadedcomments/2.0/",
    "requires_dist": [
      "django-contrib-comments (>=1.9.0)"
    ],
    "requires_python": "",
    "summary": "A simple yet flexible threaded commenting system.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12047472,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91b8f7d9c42caaeaa7594cf0776acb237e9e2d18a4e86f9d24fcb3ac797635ad",
        "md5": "0f7e8fe8b811a0141cc282a6aa569c6a",
        "sha256": "5cd81da5c74e6bbaad9f9b450b03b6231278b6da376a1cd8f41eb3f36a934f5c"
      },
      "downloads": -1,
      "filename": "django_threadedcomments-2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0f7e8fe8b811a0141cc282a6aa569c6a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 21312,
      "upload_time": "2021-11-17T11:44:51",
      "upload_time_iso_8601": "2021-11-17T11:44:51.399226Z",
      "url": "https://files.pythonhosted.org/packages/91/b8/f7d9c42caaeaa7594cf0776acb237e9e2d18a4e86f9d24fcb3ac797635ad/django_threadedcomments-2.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "400f5b713c0dcfff8688608682e94ad22b6aee2da176a47b11c12154b393dc56",
        "md5": "9d1be1a392d89d169f42393a6de91388",
        "sha256": "f8d5bd087a24bde867cf5e3e4a62ca55ac60432fd47ee2ac6f35f350317deec9"
      },
      "downloads": -1,
      "filename": "django-threadedcomments-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9d1be1a392d89d169f42393a6de91388",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17850,
      "upload_time": "2021-11-17T11:44:53",
      "upload_time_iso_8601": "2021-11-17T11:44:53.173150Z",
      "url": "https://files.pythonhosted.org/packages/40/0f/5b713c0dcfff8688608682e94ad22b6aee2da176a47b11c12154b393dc56/django-threadedcomments-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}