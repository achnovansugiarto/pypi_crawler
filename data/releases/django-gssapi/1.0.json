{
  "info": {
    "author": "Entr'ouvert",
    "author_email": "info@entrouvert.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "GSSAPI authentication for Django\n==================================\n\nProvide GSSAPI (SPNEGO) authentication to Django applications.\n\nIt's a rewrite of django-kerberos using python-gssapi.\n\nIt's only tested with MIT Kerberos 5 using package k5test.\n\nPython 2 and 3, Django >1.8 are supported.\n\nBasic usage\n===========\n\nAdd this to your project `urls.py`::\n\n    url('^auth/gssapi/', include('django_gssapi.urls')),\n\nAnd use the default authentication backend, by adding that to your `settings.py` file::\n\n    AUTHENTICATION_BACKENDS = (\n        'django_gssapi.backends.GSSAPIBackend',\n    )\n\nView\n====\n\ndjango-gssapi provide a base LoginView that you can subclass to get the\nbehaviour your need, the main extension points are:\n\n- `challenge()` returns the 401 response with the challenge, you should override it\n  to show a template explaining the failure,\n- `success(user)` it should log the given user and redirect to REDIRECT_FIELD_NAME,\n- `get_service_name()` it should return a gssapi.Name for your service, by\n  default it returns None, so GSSAPI will match any name available (for example\n  with Kerberos it will match any name in your keytab, like\n  @HTTP/my.domain.com@).\n\nSettings\n========\n\nTo make your application use GSSAPI as its main login method::\n\n    LOGIN_URL = 'gssapi-login'\n\nYour application need an environment where the GSSAPI mechanism like Kerberos\nwill work, for Kerberos it means having a default keytab of creating one and\nsetting its path in KRB5_KTNAME or you can use `GSSAPI_STORE` with MIT Kerberos\n5 and credential store extension to indicate a keytab::\n\n    GSSAPI_STORE = {'keytab': 'FILE:/var/lib/mykeytab'}\n\nYou can also force a GSSAPI name for you service with::\n\n    import gssapi\n\n    GSSAPI_NAME = gssapi.Name('HTTP/my.service.com', gssapi.MechType.hostbased_service)\n\nGSSAPI authentication backend\n=============================\n\nA dummy backend is provided in `django_gssapi.backends.GSSAPIBackend` it looks\nup user with the same username as the GSSAPI name. You should implement it for\nyour use case.\n\nA custom authentication backend must have the following signature::\n\n    class CustomGSSAPIBackend(object):\n        def authenticate(self, request, gssapi_name):\n            pass\n\nThe parameter `gssapi_name` is a `gssapi.Name` object, it can be casted to\nstring to get the raw name.\n\nKerberos username/password backend\n==================================\n\nIf your users does not have their browser configured for SPNEGO HTTP\nauthentication you can also provide a classic login/password form which check\npasswords using Kerberos. For this use\n`django_gssapi.backends.KerberosPasswordBackend`, the username is used as the\nraw principal name.\n\n\ndjango-rest-framework authentication backend\n============================================\n\nTo authenticate users with GSSAPI you can use\n`django_gssapi.drf.GSSAPIAuthentication`, it uses the configured GSSAPI\nauthentication backend to find an user and returns the GSSAPI name in\n`request.auth`.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://dev.entrouvert.org/projects/django-gssapi/",
    "keywords": "",
    "license": "AGPLv3 or later",
    "maintainer": "Benjamin Dauvergne",
    "maintainer_email": "bdauvergne@entrouvert.com",
    "name": "django-gssapi",
    "package_url": "https://pypi.org/project/django-gssapi/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-gssapi/",
    "project_urls": {
      "Homepage": "http://dev.entrouvert.org/projects/django-gssapi/"
    },
    "release_url": "https://pypi.org/project/django-gssapi/1.0/",
    "requires_dist": [
      "django (>1.8)",
      "gssapi",
      "six"
    ],
    "requires_python": "",
    "summary": "GSSAPI authentication for Django",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12556855,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "699747e43dea8fc7b79403dd4a840963235b45f1616cd601e35b4606a8326c11",
        "md5": "dcdde5222f7ff51dca49cf9874f85182",
        "sha256": "fc9eb8d02a37321f310d83d0c2d9ed575d4aedc59246d817dc819fd1da82d00c"
      },
      "downloads": -1,
      "filename": "django_gssapi-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dcdde5222f7ff51dca49cf9874f85182",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 9190,
      "upload_time": "2022-01-13T02:18:28",
      "upload_time_iso_8601": "2022-01-13T02:18:28.715983Z",
      "url": "https://files.pythonhosted.org/packages/69/97/47e43dea8fc7b79403dd4a840963235b45f1616cd601e35b4606a8326c11/django_gssapi-1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9673cd79a29fe1fcf1046f072232f91ccb40a4dca459928c9c96912e8733e914",
        "md5": "2877aaaaebbddd67f2a1a4ce44821113",
        "sha256": "e8e88cc5c1f9f7ad755439d32190f06854f77ad30806219c49b6f49f98303cff"
      },
      "downloads": -1,
      "filename": "django-gssapi-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2877aaaaebbddd67f2a1a4ce44821113",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11389,
      "upload_time": "2022-01-13T02:18:30",
      "upload_time_iso_8601": "2022-01-13T02:18:30.065157Z",
      "url": "https://files.pythonhosted.org/packages/96/73/cd79a29fe1fcf1046f072232f91ccb40a4dca459928c9c96912e8733e914/django-gssapi-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}