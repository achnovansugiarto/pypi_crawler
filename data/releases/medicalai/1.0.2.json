{
  "info": {
    "author": "Vinayaka Jyothi - For AiBharata",
    "author_email": "contact@aibharata.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# medicalAI\nMedical-AI is a AI framework specifically for Medical Applications\n\n# Installation\n```py \npip install medicalai\n```\n# Requirements\nPython Version : 3.5-3.7 (Doesn't Work on 3.8 Since Tensorflow does not support 3.8 yet.\n\nDependencies: Numpy, Tensorflow, Seaborn, Matplotlib, Pandas\n\n    NOTE: Dependency libraries are automatically installed. No need for user to install them manually.\n\n# Usage\n\n### Importing the Library\n```py \nimport medicalai as mai\n```\n\n## Using Templates\nYou can use the following templates to perform specific Tasks\n\n### Load Dataset From Folder\nSet the path of the dataset and set the target dimension of image that will be input to AI network.\n```py \ntrainSet,testSet,labelNames =mai.datasetFromFolder(datasetFolderPath, targetDim = (96,96)).load_dataset()\n```\n    - trainSet contains 'data' and 'labels' accessible by trainSet.data and trainSet.labels\n    - testSet contains 'data' and 'labels' accessible by testSet.data and testSet.labels\n    - labelNames contains class names/labels\n\n### Check Loaded Dataset Size\n```py \nprint(trainSet.data.shape)\nprint(trainSet.labels.shape)\n```\n\n### Run Training and Save Model\n```py\ntrainer = mai.TRAIN_ENGINE()\ntrainer.train_and_save_model(AI_NAME= 'tinyMedNet', MODEL_SAVE_NAME='PATH_WHERE_MODEL_IS_SAVED_TO', trainSet, testSet, OUTPUT_CLASSES, RETRAIN_MODEL= True, BATCH_SIZE= 32, EPOCHS= 10, LEARNING_RATE= 0.001)\n```\n\n\n### Plot Training Loss and Accuracy\n```py\ntrainer.plot_train_acc_loss()\n```\n\n### Plot Confusion matrix of test data\n```py\ntrainer.plot_confusion_matrix(labelNames,title='Confusion Matrix of Trained Model on Test Dataset')\n```\n\n### Loading Model for Prediction \n```py\nmodel = mai.load_model_and_weights(modelName = 'PATH_WHERE_MODEL_IS_SAVED_TO')\n```\n\n\n### Predict With Labels \n```py\nmai.predict_labels(model, testSet.data[0:2], expected_output =testSet.labels[0:2], labelNames=labels, top_preds=3)\n```\n### Get Just Values of Prediction without postprocessing\n```py\nmodel.predict(testSet.data[0:2])\n```\n\n## Advanced Usage\n\n### Code snippet for Training Using Medical-AI \n```py\n## Setup AI Model Manager with required AI. \nmodel = mai.modelManager(AI_NAME= AI_NAME, modelName = MODEL_SAVE_NAME, x_train = train_data, OUTPUT_CLASSES = OUTPUT_CLASSES, RETRAIN_MODEL= RETRAIN_MODEL)\n\n# Start Training\nresult = mai.train(model, train_data, train_labels, BATCH_SIZE, EPOCHS, LEARNING_RATE, validation_data=(test_data, test_labels), callbacks=['tensorboard'])\n\n# Evaluate Trained Model on Test Data\nmodel.evaluate(test_data, test_labels)\n\n# Plot Accuracy vs Loss for Training\nmai.plot_training_metrics(result)\n\n#Save the Trained Model\nmai.save_model_and_weights(model, outputName= MODEL_SAVE_NAME)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/aibharata/medicalAI/archive/v1_02.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aibharata/medicalAI",
    "keywords": "AI Framework,Medical AI,Tensorflow,radiology AI",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "medicalai",
    "package_url": "https://pypi.org/project/medicalai/",
    "platform": "",
    "project_url": "https://pypi.org/project/medicalai/",
    "project_urls": {
      "Download": "https://github.com/aibharata/medicalAI/archive/v1_02.tar.gz",
      "Homepage": "https://github.com/aibharata/medicalAI"
    },
    "release_url": "https://pypi.org/project/medicalai/1.0.2/",
    "requires_dist": [
      "pandas",
      "tensorflow",
      "numpy",
      "matplotlib",
      "plotly",
      "seaborn",
      "sklearn",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.5, <3.8",
    "summary": "Medical-AI is a AI framework specifically for Medical Applications",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16009272,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82db1912d2c037c412bedc24e4220f9a387a4e658bc34962fc885a78c5a76ffa",
        "md5": "426a854eb30ee069980dffa8a850f78a",
        "sha256": "e9e7975d731926002533cb4c8df3a6fc032f41a85e3f141ac882d48246df085d"
      },
      "downloads": -1,
      "filename": "medicalai-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "426a854eb30ee069980dffa8a850f78a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5, <3.8",
      "size": 8212,
      "upload_time": "2020-03-28T17:38:51",
      "upload_time_iso_8601": "2020-03-28T17:38:51.163195Z",
      "url": "https://files.pythonhosted.org/packages/82/db/1912d2c037c412bedc24e4220f9a387a4e658bc34962fc885a78c5a76ffa/medicalai-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}