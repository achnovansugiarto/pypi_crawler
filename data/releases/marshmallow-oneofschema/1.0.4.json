{
  "info": {
    "author": "Maxim Kulkin",
    "author_email": "maxim.kulkin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=======================\r\nMarshmallow-OneOfSchema\r\n=======================\r\n\r\n.. image:: https://travis-ci.org/maximkulkin/marshmallow-oneofschema.svg?branch=master\r\n    :target: https://travis-ci.org/maximkulkin/marshmallow-oneofschema\r\n    :alt: Build Status\r\n\r\nAn extenstion to Marshmallow to support schema (de)multiplexing.\r\n\r\nMarshmallow is a fantastic library for serialization and deserialization of data.\r\nFor more on that project see its `GitHub <https://github.com/marshmallow-code/marshmallow>`_\r\npage or its `Documentation <http://marshmallow.readthedocs.org/en/latest/>`_.\r\n\r\nThis library adds a special kind of schema that actually multiplexes other schemas\r\nbased on object type. When serializing values, it uses get_obj_type() method\r\nto get object type name. Then it uses `type_schemas` name-to-Schema mapping\r\nto get schema for that particular object type, serializes object using that\r\nschema and adds an extra field with name of object type. Deserialization is reverse.\r\n\r\nInstalling\r\n----------\r\n::\r\n\r\n    $ pip install marshmallow-oneofschema\r\n\r\nImporting\r\n---------\r\nHere is how to import the necessary field class\r\n::\r\n\r\n    from marshmallow_oneofschema import OneOfSchema\r\n\r\nExample\r\n-------\r\n\r\nThe code below demonstrates how to setup a schema with a PolyField. For the full context check out the tests.\r\nOnce setup the schema should act like any other schema. If it does not then please file an Issue.\r\n\r\n.. code:: python\r\n\r\n        import marshmallow\r\n        import marshmallow.fields\r\n        from marshmallow_oneofschema import OneOfSchema\r\n\r\n        class Foo(object):\r\n            def __init__(self, foo):\r\n                self.foo = foo\r\n\r\n        class Bar(object):\r\n            def __init__(self, bar):\r\n                self.bar = bar\r\n\r\n        class FooSchema(marshmallow.Schema):\r\n            foo = marshmallow.fields.String(required=True)\r\n\r\n            @marshmallow.post_load\r\n            def make_foo(self, data):\r\n                return Foo(**data)\r\n\r\n        class BarSchema(marshmallow.Schema):\r\n            bar = marshmallow.fields.Integer(required=True)\r\n\r\n            @marshmallow.post_load\r\n            def make_bar(self, data):\r\n                return Bar(**data)\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_schemas = {\r\n                'foo': FooSchema,\r\n                'bar': BarSchema,\r\n            }\r\n\r\n            def get_obj_type(self, obj):\r\n                if isinstance(obj, Foo):\r\n                    return 'foo'\r\n                elif isinstance(obj, Bar):\r\n                    return 'bar'\r\n                else:\r\n                    raise Exception('Unknown object type: %s' % obj.__class__.__name__)\r\n\r\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\r\n        # => [{'type': 'foo', 'foo': 'hello'}, {'type': 'bar', 'bar': 123}]\r\n\r\n        MyUberSchema().load([{'type': 'foo', 'foo': 'hello'},\r\n                             {'type': 'bar', 'bar': 123}],\r\n                            many=True).data\r\n        # => [Foo('hello'), Bar(123)]\r\n\r\nBy default get_obj_type() returns obj.__class__.__name__, so you can just reuse that\r\nto save some typing:\r\n\r\n.. code:: python\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_schemas = {\r\n                'Foo': FooSchema,\r\n                'Bar': BarSchema,\r\n            }\r\n\r\nYou can customize type field with `type_field` class property:\r\n\r\n.. code:: python\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_field = 'object_type'\r\n            type_schemas = {\r\n                'Foo': FooSchema,\r\n                'Bar': BarSchema,\r\n            }\r\n\r\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\r\n        # => [{'object_type': 'Foo', 'foo': 'hello'}, {'object_type': 'Bar', 'bar': 123}]\r\n\r\nYou can use resulting schema everywhere marshmallow.Schema can be used, e.g.\r\n\r\n.. code:: python\r\n\r\n        import marshmallow as m\r\n        import marshmallow.fields as f\r\n\r\n        class MyOtherSchema(m.Schema):\r\n            items = f.List(f.Nested(MyUberSchema))\r\n\r\nLicense\r\n-------\r\n\r\nMIT licensed. See the bundled `LICENSE <https://github.com/maximkulkin/marshmallow-oneofschema/blob/master/LICENSE>`_ file for more details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maximkulkin/marshmallow-oneofschema",
    "keywords": "",
    "license": "Copyright 2016 Maxim Kulkin",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshmallow-oneofschema",
    "package_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "platform": "",
    "project_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "project_urls": {
      "Homepage": "https://github.com/maximkulkin/marshmallow-oneofschema"
    },
    "release_url": "https://pypi.org/project/marshmallow-oneofschema/1.0.4/",
    "requires_dist": [
      "marshmallow (>=2.6.0)"
    ],
    "requires_python": "",
    "summary": "Marshmallow multiplexing schema",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10850557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f43d1a332ed8b9c74ac9df596d77dc75dfe87c37026613b1f72d04550ef524d",
        "md5": "b688853fe1e0ed4782c60c688b236dee",
        "sha256": "72b90c0fe36afd5215c0abfea6ba1c89c12dd375bbbe469fc83916dc9e2e005b"
      },
      "downloads": -1,
      "filename": "marshmallow_oneofschema-1.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b688853fe1e0ed4782c60c688b236dee",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8188,
      "upload_time": "2017-04-26T00:54:05",
      "upload_time_iso_8601": "2017-04-26T00:54:05.924502Z",
      "url": "https://files.pythonhosted.org/packages/1f/43/d1a332ed8b9c74ac9df596d77dc75dfe87c37026613b1f72d04550ef524d/marshmallow_oneofschema-1.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b313977a147d33cc71468ea3509a70c0db78c746bef1bcb3ee808c8670b14a3",
        "md5": "da5a1bd763ae55f133b152c96183694a",
        "sha256": "1411934066858a71805c3f98dcbdcd24db52e28003988b5515e1189c642524d3"
      },
      "downloads": -1,
      "filename": "marshmallow-oneofschema-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "da5a1bd763ae55f133b152c96183694a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4870,
      "upload_time": "2017-04-26T00:54:07",
      "upload_time_iso_8601": "2017-04-26T00:54:07.941965Z",
      "url": "https://files.pythonhosted.org/packages/1b/31/3977a147d33cc71468ea3509a70c0db78c746bef1bcb3ee808c8670b14a3/marshmallow-oneofschema-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}