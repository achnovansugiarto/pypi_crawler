{
  "info": {
    "author": "Maxim Kulkin",
    "author_email": "maxim.kulkin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "=======================\r\nMarshmallow-OneOfSchema\r\n=======================\r\n\r\n.. image:: https://travis-ci.org/maximkulkin/marshmallow-oneofschema.svg?branch=master\r\n    :target: https://travis-ci.org/maximkulkin/marshmallow-oneofschema\r\n    :alt: Build Status\r\n\r\nAn extenstion to Marshmallow to support schema (de)multiplexing.\r\n\r\nMarshmallow is a fantastic library for serialization and deserialization of data.\r\nFor more on that project see its `GitHub <https://github.com/marshmallow-code/marshmallow>`_\r\npage or its `Documentation <http://marshmallow.readthedocs.org/en/latest/>`_.\r\n\r\nThis library adds a special kind of schema that actually multiplexes other schemas\r\nbased on object type. When serializing values, it uses get_obj_type() method\r\nto get object type name. Then it uses `type_schemas` name-to-Schema mapping\r\nto get schema for that particular object type, serializes object using that\r\nschema and adds an extra field with name of object type. Deserialization is reverse.\r\n\r\nInstalling\r\n----------\r\n::\r\n\r\n    $ pip install marshmallow-oneofschema\r\n\r\nImporting\r\n---------\r\nHere is how to import the necessary field class\r\n::\r\n\r\n    from marshmallow_oneofschema import OneOfSchema\r\n\r\nExample\r\n-------\r\n\r\nThe code below demonstrates how to setup a schema with a PolyField. For the full context check out the tests.\r\nOnce setup the schema should act like any other schema. If it does not then please file an Issue.\r\n\r\n.. code:: python\r\n\r\n        import marshmallow\r\n        import marshmallow.fields\r\n        from marshmallow_oneofschema import OneOfSchema\r\n\r\n        class Foo(object):\r\n            def __init__(self, foo):\r\n                self.foo = foo\r\n\r\n        class Bar(object):\r\n            def __init__(self, bar):\r\n                self.bar = bar\r\n\r\n        class FooSchema(marshmallow.Schema):\r\n            foo = marshmallow.fields.String(required=True)\r\n\r\n            @marshmallow.post_load\r\n            def make_foo(self, data):\r\n                return Foo(**data)\r\n\r\n        class BarSchema(marshmallow.Schema):\r\n            bar = marshmallow.fields.Integer(required=True)\r\n\r\n            @marshmallow.post_load\r\n            def make_bar(self, data):\r\n                return Bar(**data)\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_schemas = {\r\n                'foo': FooSchema,\r\n                'bar': BarSchema,\r\n            }\r\n\r\n            def get_obj_type(self, obj):\r\n                if isinstance(obj, Foo):\r\n                    return 'foo'\r\n                elif isinstance(obj, Bar):\r\n                    return 'bar'\r\n                else:\r\n                    raise Exception('Unknown object type: %s' % obj.__class__.__name__)\r\n\r\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\r\n        # => [{'type': 'foo', 'foo': 'hello'}, {'type': 'bar', 'bar': 123}]\r\n\r\n        MyUberSchema().load([{'type': 'foo', 'foo': 'hello'},\r\n                             {'type': 'bar', 'bar': 123}],\r\n                            many=True).data\r\n        # => [Foo('hello'), Bar(123)]\r\n\r\nBy default get_obj_type() returns obj.__class__.__name__, so you can just reuse that\r\nto save some typing:\r\n\r\n.. code:: python\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_schemas = {\r\n                'Foo': FooSchema,\r\n                'Bar': BarSchema,\r\n            }\r\n\r\nYou can customize type field with `type_field` class property:\r\n\r\n.. code:: python\r\n\r\n        class MyUberSchema(OneOfSchema):\r\n            type_field = 'object_type'\r\n            type_schemas = {\r\n                'Foo': FooSchema,\r\n                'Bar': BarSchema,\r\n            }\r\n\r\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\r\n        # => [{'object_type': 'Foo', 'foo': 'hello'}, {'object_type': 'Bar', 'bar': 123}]\r\n\r\nYou can use resulting schema everywhere marshmallow.Schema can be used, e.g.\r\n\r\n.. code:: python\r\n\r\n        import marshmallow as m\r\n        import marshmallow.fields as f\r\n\r\n        class MyOtherSchema(m.Schema):\r\n            items = f.List(f.Nested(MyUberSchema))\r\n\r\nLicense\r\n-------\r\n\r\nMIT licensed. See the bundled `LICENSE <https://github.com/maximkulkin/marshmallow-oneofschema/blob/master/LICENSE>`_ file for more details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maximkulkin/marshmallow-oneofschema",
    "keywords": "",
    "license": "Copyright 2016 Maxim Kulkin\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshmallow-oneofschema",
    "package_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/maximkulkin/marshmallow-oneofschema"
    },
    "release_url": "https://pypi.org/project/marshmallow-oneofschema/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Marshmallow multiplexing schema",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10850557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c2572346c5654823572a725d06c14ffc96f328f5434b70c9f42054bd37a30d8",
        "md5": "11d684ddbf27f4e1cbdbc455bf6f4f25",
        "sha256": "1ffb961d160b7fcb09ef36940ae91ca693ed80595bb532ef32473dbfa99d85c5"
      },
      "downloads": -1,
      "filename": "marshmallow_oneofschema-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11d684ddbf27f4e1cbdbc455bf6f4f25",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 8033,
      "upload_time": "2016-08-12T00:27:28",
      "upload_time_iso_8601": "2016-08-12T00:27:28.124542Z",
      "url": "https://files.pythonhosted.org/packages/5c/25/72346c5654823572a725d06c14ffc96f328f5434b70c9f42054bd37a30d8/marshmallow_oneofschema-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}