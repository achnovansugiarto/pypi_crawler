{
  "info": {
    "author": "Maxim Kulkin",
    "author_email": "maxim.kulkin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "=======================\nMarshmallow-OneOfSchema\n=======================\n\n.. image:: https://travis-ci.org/maximkulkin/marshmallow-oneofschema.svg?branch=master\n    :target: https://travis-ci.org/maximkulkin/marshmallow-oneofschema\n    :alt: Build Status\n\nAn extenstion to Marshmallow to support schema (de)multiplexing.\n\nMarshmallow is a fantastic library for serialization and deserialization of data.\nFor more on that project see its `GitHub <https://github.com/marshmallow-code/marshmallow>`_\npage or its `Documentation <http://marshmallow.readthedocs.org/en/latest/>`_.\n\nThis library adds a special kind of schema that actually multiplexes other schemas\nbased on object type. When serializing values, it uses get_obj_type() method\nto get object type name. Then it uses `type_schemas` name-to-Schema mapping\nto get schema for that particular object type, serializes object using that\nschema and adds an extra field with name of object type. Deserialization is reverse.\n\nInstalling\n----------\n::\n\n    $ pip install marshmallow-oneofschema\n\nImporting\n---------\nHere is how to import the necessary field class\n::\n\n    from marshmallow_oneofschema import OneOfSchema\n\nExample\n-------\n\nThe code below demonstrates how to setup a schema with a PolyField. For the full context check out the tests.\nOnce setup the schema should act like any other schema. If it does not then please file an Issue.\n\n.. code:: python\n\n        import marshmallow\n        import marshmallow.fields\n        from marshmallow_oneofschema import OneOfSchema\n\n        class Foo(object):\n            def __init__(self, foo):\n                self.foo = foo\n\n        class Bar(object):\n            def __init__(self, bar):\n                self.bar = bar\n\n        class FooSchema(marshmallow.Schema):\n            foo = marshmallow.fields.String(required=True)\n\n            @marshmallow.post_load\n            def make_foo(self, data):\n                return Foo(**data)\n\n        class BarSchema(marshmallow.Schema):\n            bar = marshmallow.fields.Integer(required=True)\n\n            @marshmallow.post_load\n            def make_bar(self, data):\n                return Bar(**data)\n\n        class MyUberSchema(OneOfSchema):\n            type_schemas = {\n                'foo': FooSchema,\n                'bar': BarSchema,\n            }\n\n            def get_obj_type(self, obj):\n                if isinstance(obj, Foo):\n                    return 'foo'\n                elif isinstance(obj, Bar):\n                    return 'bar'\n                else:\n                    raise Exception('Unknown object type: %s' % obj.__class__.__name__)\n\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\n        # => [{'type': 'foo', 'foo': 'hello'}, {'type': 'bar', 'bar': 123}]\n\n        MyUberSchema().load([{'type': 'foo', 'foo': 'hello'},\n                             {'type': 'bar', 'bar': 123}],\n                            many=True).data\n        # => [Foo('hello'), Bar(123)]\n\nBy default get_obj_type() returns obj.__class__.__name__, so you can just reuse that\nto save some typing:\n\n.. code:: python\n\n        class MyUberSchema(OneOfSchema):\n            type_schemas = {\n                'Foo': FooSchema,\n                'Bar': BarSchema,\n            }\n\nYou can customize type field with `type_field` class property:\n\n.. code:: python\n\n        class MyUberSchema(OneOfSchema):\n            type_field = 'object_type'\n            type_schemas = {\n                'Foo': FooSchema,\n                'Bar': BarSchema,\n            }\n\n        MyUberSchema().dump([Foo(foo='hello'), Bar(bar=123)], many=True).data\n        # => [{'object_type': 'Foo', 'foo': 'hello'}, {'object_type': 'Bar', 'bar': 123}]\n\nYou can use resulting schema everywhere marshmallow.Schema can be used, e.g.\n\n.. code:: python\n\n        import marshmallow as m\n        import marshmallow.fields as f\n\n        class MyOtherSchema(m.Schema):\n            items = f.List(f.Nested(MyUberSchema))\n\nLicense\n-------\n\nMIT licensed. See the bundled `LICENSE <https://github.com/maximkulkin/marshmallow-oneofschema/blob/master/LICENSE>`_ file for more details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maximkulkin/marshmallow-oneofschema",
    "keywords": "serialization,deserialization,json,marshal,marshalling,schema,validation,multiplexing,demultiplexing,polymorphic",
    "license": "Copyright 2016 Maxim Kulkin",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marshmallow-oneofschema",
    "package_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "project_urls": {
      "Homepage": "https://github.com/maximkulkin/marshmallow-oneofschema"
    },
    "release_url": "https://pypi.org/project/marshmallow-oneofschema/1.0.3/",
    "requires_dist": [
      "marshmallow (>=2.6.0)"
    ],
    "requires_python": "",
    "summary": "Marshmallow multiplexing schema",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10850557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68957a1002f21810fd8c880a02668f6e2e12f2eed0be7e09dbbf59351e12435b",
        "md5": "3e30b7460afb072c7356aacc13186a39",
        "sha256": "d8dd37b5802610e4790409c10bcd8d6fb5de8733bed4144980078e4478afb5b9"
      },
      "downloads": -1,
      "filename": "marshmallow_oneofschema-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e30b7460afb072c7356aacc13186a39",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8151,
      "upload_time": "2016-11-04T18:43:45",
      "upload_time_iso_8601": "2016-11-04T18:43:45.969259Z",
      "url": "https://files.pythonhosted.org/packages/68/95/7a1002f21810fd8c880a02668f6e2e12f2eed0be7e09dbbf59351e12435b/marshmallow_oneofschema-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61b9e07b6006cea93b0f023f645fac9decfffea8b56becaed8c0dc2348966a5f",
        "md5": "3211aabaa0ad6ad99aefcc37a94475ed",
        "sha256": "62df51f0497edcf3954bcb630cda7cae6a294517ab575aa56cdd618058334c96"
      },
      "downloads": -1,
      "filename": "marshmallow-oneofschema-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3211aabaa0ad6ad99aefcc37a94475ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4822,
      "upload_time": "2016-11-04T18:43:48",
      "upload_time_iso_8601": "2016-11-04T18:43:48.771018Z",
      "url": "https://files.pythonhosted.org/packages/61/b9/e07b6006cea93b0f023f645fac9decfffea8b56becaed8c0dc2348966a5f/marshmallow-oneofschema-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}