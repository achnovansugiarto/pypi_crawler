{
  "info": {
    "author": "Maxim Kulkin",
    "author_email": "maxim.kulkin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "=======================\nmarshmallow-oneofschema\n=======================\n\n.. image:: https://dev.azure.com/sloria/sloria/_apis/build/status/marshmallow-code.marshmallow-oneofschema?branchName=master\n    :target: https://dev.azure.com/sloria/sloria/_build/latest?definitionId=13&branchName=master\n    :alt: Build Status\n\n.. image:: https://badgen.net/badge/marshmallow/3\n    :target: https://marshmallow.readthedocs.io/en/latest/upgrading.html\n    :alt: marshmallow 3 compatible\n\nAn extension to marshmallow to support schema (de)multiplexing.\n\nmarshmallow is a fantastic library for serialization and deserialization of data.\nFor more on that project see its `GitHub <https://github.com/marshmallow-code/marshmallow>`_\npage or its `Documentation <http://marshmallow.readthedocs.org/en/latest/>`_.\n\nThis library adds a special kind of schema that actually multiplexes other schemas\nbased on object type. When serializing values, it uses get_obj_type() method\nto get object type name. Then it uses ``type_schemas`` name-to-Schema mapping\nto get schema for that particular object type, serializes object using that\nschema and adds an extra field with name of object type. Deserialization is reverse.\n\nInstalling\n----------\n\n::\n\n    $ pip install marshmallow-oneofschema\n\nExample\n-------\n\nThe code below demonstrates how to set up a polymorphic schema. For the full context check out the tests.\nOnce setup the schema should act like any other schema. If it does not then please file an Issue.\n\n.. code:: python\n\n    import marshmallow\n    import marshmallow.fields\n    from marshmallow_oneofschema import OneOfSchema\n\n\n    class Foo:\n        def __init__(self, foo):\n            self.foo = foo\n\n\n    class Bar:\n        def __init__(self, bar):\n            self.bar = bar\n\n\n    class FooSchema(marshmallow.Schema):\n        foo = marshmallow.fields.String(required=True)\n\n        @marshmallow.post_load\n        def make_foo(self, data, **kwargs):\n            return Foo(**data)\n\n\n    class BarSchema(marshmallow.Schema):\n        bar = marshmallow.fields.Integer(required=True)\n\n        @marshmallow.post_load\n        def make_bar(self, data, **kwargs):\n            return Bar(**data)\n\n\n    class MyUberSchema(OneOfSchema):\n        type_schemas = {\"foo\": FooSchema, \"bar\": BarSchema}\n\n        def get_obj_type(self, obj):\n            if isinstance(obj, Foo):\n                return \"foo\"\n            elif isinstance(obj, Bar):\n                return \"bar\"\n            else:\n                raise Exception(\"Unknown object type: {}\".format(obj.__class__.__name__))\n\n\n    MyUberSchema().dump([Foo(foo=\"hello\"), Bar(bar=123)], many=True)\n    # => [{'type': 'foo', 'foo': 'hello'}, {'type': 'bar', 'bar': 123}]\n\n    MyUberSchema().load(\n        [{\"type\": \"foo\", \"foo\": \"hello\"}, {\"type\": \"bar\", \"bar\": 123}], many=True\n    )\n    # => [Foo('hello'), Bar(123)]\n\nBy default get_obj_type() returns obj.__class__.__name__, so you can just reuse that\nto save some typing:\n\n.. code:: python\n\n    class MyUberSchema(OneOfSchema):\n        type_schemas = {\"Foo\": FooSchema, \"Bar\": BarSchema}\n\nYou can customize type field with `type_field` class property:\n\n.. code:: python\n\n    class MyUberSchema(OneOfSchema):\n        type_field = \"object_type\"\n        type_schemas = {\"Foo\": FooSchema, \"Bar\": BarSchema}\n\n\n    MyUberSchema().dump([Foo(foo=\"hello\"), Bar(bar=123)], many=True)\n    # => [{'object_type': 'Foo', 'foo': 'hello'}, {'object_type': 'Bar', 'bar': 123}]\n\nYou can use resulting schema everywhere marshmallow.Schema can be used, e.g.\n\n.. code:: python\n\n    import marshmallow as m\n    import marshmallow.fields as f\n\n\n    class MyOtherSchema(m.Schema):\n        items = f.List(f.Nested(MyUberSchema))\n\nLicense\n-------\n\nMIT licensed. See the bundled `LICENSE <https://github.com/marshmallow-code/marshmallow-oneofschema/blob/master/LICENSE>`_ file for more details.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/marshmallow-code/marshmallow-oneofschema",
    "keywords": "serialization,deserialization,json,marshal,marshalling,schema,validation,multiplexing,demultiplexing,polymorphic",
    "license": "MIT",
    "maintainer": "Steven Loria",
    "maintainer_email": "sloria1@gmail.com",
    "name": "marshmallow-oneofschema",
    "package_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "platform": "",
    "project_url": "https://pypi.org/project/marshmallow-oneofschema/",
    "project_urls": {
      "Homepage": "https://github.com/marshmallow-code/marshmallow-oneofschema"
    },
    "release_url": "https://pypi.org/project/marshmallow-oneofschema/2.0.1/",
    "requires_dist": [
      "marshmallow (<4.0.0,>=3.0.0rc6)",
      "pytest ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "flake8 (==3.7.8) ; extra == 'dev'",
      "flake8-bugbear (==19.3.0) ; extra == 'dev'",
      "pre-commit (~=1.17.0) ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "flake8 (==3.7.8) ; extra == 'lint'",
      "flake8-bugbear (==19.3.0) ; extra == 'lint'",
      "pre-commit (~=1.17.0) ; extra == 'lint'",
      "pytest ; extra == 'tests'",
      "mock ; extra == 'tests'"
    ],
    "requires_python": ">=3.5",
    "summary": "marshmallow multiplexing schema",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10850557,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7af3da71ec4c539b6b5e16f1988fc46d8ea3374e258ef79fb5a7d88478fb922f",
        "md5": "a72c6271fd2a1bb5115206e9a27df0de",
        "sha256": "29673bcc415f4a2098e273bf3c8229bc1a33e91378885eac90b06943bd626110"
      },
      "downloads": -1,
      "filename": "marshmallow_oneofschema-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a72c6271fd2a1bb5115206e9a27df0de",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 5734,
      "upload_time": "2019-07-14T18:10:52",
      "upload_time_iso_8601": "2019-07-14T18:10:52.720346Z",
      "url": "https://files.pythonhosted.org/packages/7a/f3/da71ec4c539b6b5e16f1988fc46d8ea3374e258ef79fb5a7d88478fb922f/marshmallow_oneofschema-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a76f709688e46ae54eb87e618c5a3a56aae125da0eafdaa3adc661c8bf91ddc8",
        "md5": "17bcbffa460a168471d1e0c85d0cb7db",
        "sha256": "b88daa4f2de249e0a51a617aa09490f896acaddef6f6cf97dda78218c5abb86f"
      },
      "downloads": -1,
      "filename": "marshmallow-oneofschema-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "17bcbffa460a168471d1e0c85d0cb7db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 5770,
      "upload_time": "2019-07-14T18:10:54",
      "upload_time_iso_8601": "2019-07-14T18:10:54.421982Z",
      "url": "https://files.pythonhosted.org/packages/a7/6f/709688e46ae54eb87e618c5a3a56aae125da0eafdaa3adc661c8bf91ddc8/marshmallow-oneofschema-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}