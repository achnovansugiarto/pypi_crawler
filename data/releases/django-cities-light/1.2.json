{
  "info": {
    "author": "James Pic (original by Dan Carter (original by Ben Dowling))",
    "author_email": "jamespic@gmail.com@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-cities-light -- *Simple django-cities alternative*\n=========================================================\n\nThis add-on provides models and commands to import country/city data into your\ndatabase.\nThe data is pulled from `GeoNames\n<http://www.geonames.org/>`_ and contains:\n\n  - country names\n  - optionnal city names\n\nSpatial query support is not required by this application.\n\nThis application is very simple and is useful if you want to make a simple\naddress book for example. If you intend to build a fully featured spatial\ndatabase, you should use\n`django-cities\n<https://github.com/coderholic/django-cities>`_.\n\nInstallation\n------------\n\nInstall django-cities-light::\n\n    pip install django-cities-light\n\nOr the development version::\n\n    pip install -e git+git@github.com:yourlabs/django-cities-light.git#egg=cities_light\n\nAdd `cities_light` to your `INSTALLED_APPS`.\n\nYou may not need the city model and database table. A project like\nbetspire.com doesn't need it for instance. So the City model will be made\n'abstract' if this setting is set as such::\n\n    CITIES_LIGHT_ENABLE_CITY=False\n\nNow, run syncdb, it will only create tables for models that are not disabled::\n\n    ./manage.py syncdb\n\nData update\n-----------\n\nFinnaly, populate your database with command::\n\n    ./manage.py cities_light\n\nThis command is well documented, consult the help with::\n    \n    ./manage.py help cities_light\n\nFiltering data import\n---------------------\n\nAn example is worth 1000 words: if you want to import only cities from France,\nUSA and Belgium you could do as such::\n\n    import cities_light\n\n    def filter_city_import(sender, items, **kwargs):\n        if items[8] not in ('FR', 'US', 'BE'):\n            raise cities_light.InvalidItems()\n\n    cities_light.signals.city_items_pre_import.connect(filter_city_import)\n\nNote: this signal gets a list rather than a City instance for performance reasons.\n\nConfigure logging\n-----------------\n\nThis command is made to be compatible with background usage like from cron, to\nkeep the database fresh. So it doesn't do direct output. To get output from\nthis command, simply configure a handler and formatter for `cities_light`\nlogger. For example::\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'simple': {\n                'format': '%(levelname)s %(message)s'\n            },\n        },\n        'handlers': {\n            'console':{\n                'level':'DEBUG',\n                'class':'logging.StreamHandler',\n                'formatter': 'simple'\n            },\n        },\n        'loggers': {\n            'cities_light': {\n                'handlers':['console'],\n                'propagate': True,\n                'level':'DEBUG',\n            },\n            # also use this one to see SQL queries\n            'django': {\n                'handlers':['console'],\n                'propagate': True,\n                'level':'DEBUG',\n            },\n        }\n    }\n\nAjax autocomplete\n-----------------\n\ndjango-autocomplete-light\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf `autocomplete_light` from `django-autocomplete-light\n<https://github.com/yourlabs/django-autocomplete-light/>`_, you\nhave two channels and a widget for City ModelChoiceField that has two\nautocompletes: one for the country, and one for the city that is filtered by\nthe selected country.\n\nCheck out:\n\n- `example project README\n<https://github.com/yourlabs/django-autocomplete-light/blob/master/test_project/README>`_,\n- `example project source code\n<https://github.com/yourlabs/django-autocomplete-light/tree/master/test_project>`_,\n- `example widget usage\n<https://github.com/yourlabs/django-autocomplete-light/blob/master/test_project/project_specific/forms.py>`_.\n\ndjango-ajax-selects\n~~~~~~~~~~~~~~~~~~~\n\nIf `ajax_selects` from\n`django-ajax-selects\n<https://github.com/crucialfelix/django-ajax-selects>`_, you\nshould have two new channels usable right away:\n\n  - `cities_light_country`\n  - `cities_light_city`\n\nIdeas for contribution\n----------------------\n\n  - django-modeltranslation support and alternateNames.txt\n  - country flags support\n\nI might implement this in the next project or refactor of\nmy projects that use django-cities-light. In the mean time, \nthis app just works because it's so simple. I wonder if there's a bug ....",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpic/django-cities-light",
    "keywords": "django cities countries postal codes",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cities-light",
    "package_url": "https://pypi.org/project/django-cities-light/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-cities-light/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/jpic/django-cities-light"
    },
    "release_url": "https://pypi.org/project/django-cities-light/1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Simple alternative to django-cities",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14683973,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0158d0c2f219df88450badf1e9814420db78dc8d564767e886500ce9324326fe",
        "md5": "1d660aac18878890d12a9328f69f7dd1",
        "sha256": "0b78fbb0547abf5bedce2a7bef0739e47c39f2f0b4a2a262b7cc06e16ef9f3aa"
      },
      "downloads": -1,
      "filename": "django-cities-light-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1d660aac18878890d12a9328f69f7dd1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11366,
      "upload_time": "2012-05-11T11:48:34",
      "upload_time_iso_8601": "2012-05-11T11:48:34.580158Z",
      "url": "https://files.pythonhosted.org/packages/01/58/d0c2f219df88450badf1e9814420db78dc8d564767e886500ce9324326fe/django-cities-light-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}