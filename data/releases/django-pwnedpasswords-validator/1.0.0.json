{
  "info": {
    "author": "Dan Loewenherz",
    "author_email": "dan@lionheartsw.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: OS Independent",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "|image0| |image1|\n\n|Version| |Python Versions|\n\n``django-pwnedpasswords-validator`` is a Django password validator that\nchecks if a user-provided password exists in a data breach using the\n`Pwned Passwords v2\nAPI <https://haveibeenpwned.com/API/v2#PwnedPasswords>`_. All provided\npassword data is\n`k-anonymized <https://en.wikipedia.org/wiki/K-anonymity>`_ before\nbeing sent to the API, so plaintext passwords never leave your server.\n\nFrom https://haveibeenpwned.com/API/v2#PwnedPasswords:\n\n    Pwned Passwords are more than half a billion passwords which have\n    previously been exposed in data breaches. The service is detailed in\n    the `launch blog\n    post <https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/>`_\n    then `further expanded on with the release of version\n    2 <https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2>`_.\n    The entire data set is `both downloadable and searchable online via\n    the Pwned Passwords page <https://haveibeenpwned.com/Passwords>`_.\n\nInstallation\n------------\n\ndjango-pwnedpasswords-validator is available for download through\n`PyPi <https://pypi.python.org/pypi/django-pwnedpasswords-validator>`_.\nYou can install it right away using pip.\n\n.. code:: bash\n\n    pip install django-pwnedpasswords-validator\n\nThen, add django-pwnedpasswords-validator to your ``INSTALLED_APPS``:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_pwnedpasswords_validator'\n    )\n\nFinally, add django-pwnedpasswords-validator to\n``AUTH_PASSWORD_VALIDATORS``:\n\n.. code:: python\n\n    AUTH_PASSWORD_VALIDATORS = [\n        ...\n        {\n            'NAME': \"django_pwnedpasswords_validator.validation.PwnedPasswordValidator\"\n        }\n    ]\n\nIf you’d like to customize the error message (the default is *“This\npassword has previously appeared in a data breach and should not be\nused.”*), you can pass in an alternate in the ``OPTIONS`` parameter for\nthe validator.\n\n.. code:: python\n\n    AUTH_PASSWORD_VALIDATORS = [\n        ...\n        {\n            'NAME': \"django_pwnedpasswords_validator.validation.PwnedPasswordValidator\",\n            'OPTIONS': {\n                'error_text': \"Your password was found in a data breach.\",\n            }\n        }\n    ]\n\nSecurity Note\n^^^^^^^^^^^^^\n\nNo plaintext passwords ever leave your server using\ndjango-pwnedpasswords-validator.\n\nHow does that work? Well, the Pwned Passwords v2 API has a pretty cool\n`k-anonymity <https://en.wikipedia.org/wiki/K-anonymity>`_\nimplementation.\n\nFrom\nhttps://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/:\n\n    Formally, a data set can be said to hold the property of\n    k-anonymity, if for every record in a released table, there are k −\n    1 other records identical to it.\n\nThis allows us to only provide the first 5 characters of the SHA-1 hash\nof the password in question. The API then responds with a list of SHA-1\nhash suffixes with that prefix. On average, that list contains 478\nresults.\n\nPeople smarter than I am have used\n`math <https://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/>`_\nto prove that 5-character prefixes are sufficient to maintain\nk-anonymity for this database.\n\nIn short: your plaintext passwords are protected if you use this\nlibrary. You won’t leak any enough data to identity which passwords\nyou’re searching for.\n\nThanks\n------\n\nSpecial thanks to `Troy Hunt <https://www.troyhunt.com>`_ for\ncollecting this data and providing this service.\n\nAuthors\n-------\n\n`Dan Loewenherz <https://github.com/dlo>`_\n\nSee also\n--------\n\n`pwnedpasswords <https://github.com/lionheart/pwnedpasswords>`_, a\ncommand-line utility and Python library for the Pwned Passwords v2 API.\n\nLicense\n-------\n\nApache License, Version 2.0. See `LICENSE <https://github.com/lionheart/django-pwnedpasswords-validator/blob/master/LICENSE>`_ for details.\n\n.. |image0| image:: meta/repo-banner-2.png\n.. |image1| image:: meta/repo-banner-bottom.png\n   :target: https://github.com/lionheart/django-pwnedpasswords-validator/blob/master/https://lionheartsw.com/\n.. |Version| image:: https://img.shields.io/pypi/v/django-pwnedpasswords-validator.svg?style=flat\n   :target: https://github.com/lionheart/django-pwnedpasswords-validator/blob/master/https://pypi.python.org/pypi/django-pwnedpasswords-validator\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/django-pwnedpasswords-validator.svg?style=flat\n   :target: https://github.com/lionheart/django-pwnedpasswords-validator/blob/master/https://pypi.python.org/pypi/django-pwnedpasswords-validator\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/lionheart/django-pwnedpasswords-validator/tarball/1.0.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lionheart/django-pwnedpasswords-validator",
    "keywords": "passwords security",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pwnedpasswords-validator",
    "package_url": "https://pypi.org/project/django-pwnedpasswords-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pwnedpasswords-validator/",
    "project_urls": {
      "Download": "https://github.com/lionheart/django-pwnedpasswords-validator/tarball/1.0.0",
      "Homepage": "https://github.com/lionheart/django-pwnedpasswords-validator"
    },
    "release_url": "https://pypi.org/project/django-pwnedpasswords-validator/1.0.0/",
    "requires_dist": [
      "pwnedpasswords"
    ],
    "requires_python": "",
    "summary": "A Django app that validates user passwords against the Pwned Passwords v2 API.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4289783,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "691701f6d0c668ca3866918800016cef2bc5277e30717772db9ad2eba2590eb5",
        "md5": "6aa222a2f93b481f93bae4a4c5febb83",
        "sha256": "10b6d1dfb3513c6779c9e0e21ddbcaa42c133339bbbc5285c105831adc8341b4"
      },
      "downloads": -1,
      "filename": "django_pwnedpasswords_validator-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6aa222a2f93b481f93bae4a4c5febb83",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8420,
      "upload_time": "2018-03-07T02:26:33",
      "upload_time_iso_8601": "2018-03-07T02:26:33.738760Z",
      "url": "https://files.pythonhosted.org/packages/69/17/01f6d0c668ca3866918800016cef2bc5277e30717772db9ad2eba2590eb5/django_pwnedpasswords_validator-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}