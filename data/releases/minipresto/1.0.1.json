{
  "info": {
    "author": "Jeff Lester",
    "author_email": "jeff.lester.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Minipresto\nA command line tool that makes it easy to run modular Presto environments\nlocally.\n\n[![PyPI version](https://badge.fury.io/py/minipresto.svg)](https://badge.fury.io/py/minipresto)\n[![Build Status](https://travis-ci.org/jefflester/minipresto.svg?branch=master)](https://travis-ci.org/jefflester/minipresto)\n[![Presto Slack](https://img.shields.io/static/v1?logo=slack&logoColor=959DA5&label=Slack&labelColor=333a41&message=join%20conversation&color=3AC358)](https://prestosql.io/slack.html)\n[![Presto: The Definitive Guide book download](https://img.shields.io/badge/Presto%3A%20The%20Definitive%20Guide-download-brightgreen)](https://www.starburstdata.com/oreilly-presto-guide-download/)\n\n-----\n\n**Latest Stable Release**: 1.0.1\n\n-----\n\n## Overview\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [CLI](#cli)\n  - [Top-Level CLI Options](#top-level-cli-options)\n  - [Provisioning Environments](#provisioning-environments)\n  - [Removing Resources](#removing-resources)\n  - [Shutting Down Environments](#shutting-down-environments)\n  - [Taking Environment Snapshots](#taking-environment-snapshots)\n  - [Manage User Configuration](#manage-user-configuration)\n  - [Install the Library](#install-the-library)\n  - [Display Module Metadata](#display-module-metadata)\n  - [Display CLI Version](#display-cli-version)\n  - [Pointing the CLI to the Minipresto Library](#pointing-the-cli-to-the-minipresto-library)\n- [Minipresto Configuration File](#minipresto-configuration-file)\n- [Project Structure](#project-structure)\n- [Adding New Modules (Tutorial)](#adding-new-modules-tutorial)\n- [Troubleshooting](#troubleshooting)\n- [Reporting Bugs and Contributing](#reporting-bugs-and-contributing)\n\n-----\n\n## Requirements\n- Docker 19.03.12+\n- Docker Compose 1.26.2+\n- Python 3.6+\n- Pip\n- Linux or Mac OS\n\n-----\n\n## Installation\n\n### End Users\nMinipresto is available on PyPI and the library is available for public download\non GitHub. To install the Minipresto CLI, run `pip install minipresto`. To\ninstall the library, run `minipresto lib_install`.\n\n### Developers\nIn the project's root, run `./install.sh` to install the Minipresto CLI. If you\nencounter errors during installation, try running `sudo -H ./install.sh -v`.\n\n-----\n\n## CLI\nMinipresto is built with [Click](https://click.palletsprojects.com/en/7.x/), a\npopular, open-source toolkit used to build Python-based CLIs.\n\nAll Minipresto commands/options are documented below. Note that many command\noptions can be specified with a shorthand alternative, which is the first letter\nof each option, i.e. `--module` can be `-m`.\n\n### Top-Level CLI Options\nYou can get help, enable verbose output, and change the runtime library\ndirectory for any command. \n\n```\nUsage: minipresto [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -v, --verbose   Enable verbose output.\n  -e, --env TEXT  Add or override environment variables.\n\n                  Environment variables are sourced from the Minipresto\n                  library's root 'minipresto.env' file as well as the user \n                  config file in '~/.minipresto/minipresto.cfg'. Variables \n                  supplied by this option will override values from either \n                  of those sources. The variables will also be passed to the\n                  environment of the shell executing commands during the\n                  'provision' command.\n\n  --help          Show this message and exit.\n```\n\n### Provisioning Environments\nYou can provision an environment via the `provision` command.\n\n```\nUsage: minipresto provision [OPTIONS]\n\n  Provision an environment based on specified modules. All options are\n  optional and can be left empty.\n\nOptions:\n  -m, --module TEXT         A specific module to provision.\n  -n, --no-rollback         Do not rollback provisioned resources in the event\n                            of an error.\n\n  -d, --docker-native TEXT  Appends native docker-compose commands to the\n                            generated docker-compose shell command. Run\n                            `docker-compose up --help` to see all available\n                            options.\n\n                            Example: minipresto provision --docker-native\n                            --build\n\n                            Example: minipresto provision --docker-native '--\n                            remove-orphans --force-recreate'\n\n  --help                    Show this message and exit.\n```\n\nNotes:\n\n- If no options are passed in, the CLI will provision a standalone Presto\n  container.\n- The command cannot currently be used to append additional modules to an active\n  environment. To modify an environment, first shut it down, then re-provision\n  with the needed modules.\n\nSample `provision` commands:\n\n```bash\nminipresto provision \\\n  --module hive-s3 \\\n  --module elasticsearch \\\n  --module ldap \\\n  --docker-native '--build --force-recreate'\n\nminipresto provision -m hive-s3 -m elasticsearch -m ldap\n\nminipresto --env STARBURST_VER=332-e.6 provision\n```\n\nThe `provision` command constructs a Docker Compose command and executes it in\nthe host shell. The commands look similar to:\n\n```bash\nENV_VAR_1=SOMETHING ENV_VAR_2=SOMETHING ENV_VAR_3=${ENV_VAR_3} ... \\\ndocker-compose -f docker-compose.yml \\\n  -f modules/catalog/elasticsearch/elasticsearch.yml \\\n  -f modules/catalog/hive-s3/hive-s3.yml \\\n  -f modules/security/ldap/ldap.yml \\\n  up -d\n```\n\nUsing the structure of the Minipresto library, it is able to merge multiple\nDocker Compose files together.\n\n#### Environment Variables\nEnvironment variables passed to Docker containers are sourced through two\nlocations. The first is from the `minipresto.env` file in the library root. These\nvariables define the versions of the provisioned Docker services. The second is\nfrom from variables set in the `[MODULES]` section of the `minipresto.cfg` file.\nThese variables can contain sensitive information like access credentials, so\ntheir values are intentionally left out of library files.\n\nAny existing environment variable can be overridden with the top-level `--env`\noption, and any unset variable can be set with it.\n\n#### Using Licensed Starburst Features\nIf you are using licensed features, you will need to provide a path to a valid\nStarburst license. This can be set via `minipresto config` or provided via the\n`--env` option at command runtime. The variable for this is\n`STARBURST_LIC_PATH`. \n\nAdditionally, you need to uncomment the volume mount in the library's root\n`docker-compose.yml` file:\n\n```yaml\n  # Uncomment this to enable the volume mount. The variable should point to a\n  # valid SEP license. \n  volumes:\n    - \"${STARBURST_LIC_PATH}:/usr/lib/presto/etc/starburstdata.license:ro\"\n```\n\n### Removing Resources\nYou can remove resources with the `remove` command.\n\n```\nUsage: minipresto remove [OPTIONS]\n\n  Remove Minipresto resources.\n\nOptions:\n  -i, --images      Remove Minipresto images.\n  -v, --volumes     Remove Minipresto container volumes.\n  -l, --label TEXT  Target specific labels for removal (format: key-value\n                    pair(s)).\n\n  -f, --force       Force the removal of Minipresto resources. Normal Docker\n                    removal restrictions apply.\n\n  --help            Show this message and exit.\n```\n\nNotes:\n\n- Named volumes tied to any *existing* container cannot be forcibly removed,\n  neither by Minipresto nor by the Docker CLI/SDK.\n- Images tied to stopped containers can be forcibly removed, but any image tied\n  to a running container cannot be forcibly removed, neither by Minipresto nor\n  by the Docker CLI.\n\nSample `remove` command:\n\n```bash\nminipresto -v remove \\\n  --volumes \\\n  --label com.starburst.tests.module.postgres=catalog-postgres \\\n  --force\n```\n\nThis will only remove volumes associated to the Postgres catalog module.\n\n### Shutting Down Environments\nYou can shut down an active environment with the `down` command.\n\n```\nUsage: minipresto down [OPTIONS]\n\n  Bring down running Minipresto containers. This command follows the\n  behavior of `docker-compose down` where containers are both stopped and\n  removed.\n\nOptions:\n  -k, --keep  Does not remove containers; instead, containers will only be\n              stopped.\n\n  --sig-kill  Stop Minipresto containers without a grace period.\n  --help      Show this message and exit.\n```\n\nSample `down` command:\n\n```bash\nminipresto -v down\n```\n\n### Taking Environment Snapshots\nYou can capture snapshots for both active and inactive environments with the\n`snapshot` command. \n\n```\nUsage: minipresto snapshot [OPTIONS]\n\n  Create a snapshot of a Minipresto environment. A tarball is placed in the\n  Minipresto `lib/snapshots/` directory.\n\n  To take a snapshot of an active environment, leave the `--module` and\n  option out of the command.\n\n  To take a snapshot of modules whether they are active or not, specify the\n  modules via the `--module` option.\n\nOptions:\n  -m, --module TEXT     A specific module to snapshot.\n  -n, --name TEXT       Basename of the resulting snapshot tarball file.\n                        Allowed characters: alphanumerics, hyphens, and\n                        underscores.  [required]\n\n  -d, --directory PATH  Directory to save the resulting snapshot file in.\n                        Defaults to the snapshots directory in the Minipresto\n                        library.\n\n  -f, --force           Overwrite the file if it already exists.\n  --no-scrub            Do not scrub sensitive data from user config file.\n\n                        WARNING: all sensitive information (passwords and\n                        keys) will be kept in the user config file added to\n                        the snapshot. Only use this if you are prepared to\n                        share those secrets with another person.\n\n  --help                Show this message and exit.\n```\n\nNotes: \n\n- Minipresto records the original `provision` command and places it in the\n  snapshot file as `provision-snapshot.sh`; this can be directly executed. This\n  makes it easier for others to reuse the environment and provision it\n  identically.\n\nSample `snapshot` commands:\n\n```bash\n# Take a snapshot of an active environment (this will create a tarball \n# called `snapshot-t2533.tar.gz` in the library's `snapshots/` directory):\nminipresto snapshot --name t-2533\n\n# Take a snapshot of specific modules:\nminipresto snapshot -n super-cool-env -m hive-s3 -m elasticsearch -m ldap\n```\n\n### Manage User Configuration\nYou can manage Minipresto configuration with the `config` command. \n\n```\nUsage: minipresto config [OPTIONS]\n\n  Edit the Minipresto user configuration file.\n\nOptions:\n  -r, --reset  Reset the Minipresto user configuration file and create a new\n               config file from a template.\n\n               WARNING: This will remove your configuration file (if it\n               exists) and replace it with a template.\n\n  --help       Show this message and exit.\n```\n\n### Install the Library\nYou can install the Minipresto library with the `lib_install` command. \n\n```\nUsage: minipresto lib_install [OPTIONS]\n\n  Install the Minipresto library.\n\nOptions:\n  -v, --version TEXT  The version of the library to install.\n  --help              Show this message and exit.\n```\n\n### Display Module Metadata\nYou can see Minipresto module metadata with the `modules` command. \n\n```\nUsage: minipresto modules [OPTIONS]\n\n  Display module metadata.\n\nOptions:\n  -m, --module TEXT  A specific module to display metadata for.\n  -j, --json         Print the resulting metadata in JSON form (shows\n                     additional module metadata).\n\n  -r, --running      Print metadata for all running modules.\n  --help             Show this message and exit.\n```\n\n### Display CLI Version\nYou can display the Minipresto CLI version with the `version` command. \n\n```\nUsage: minipresto version [OPTIONS]\n\n  Display the Minipresto version.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n### Pointing the CLI to the Minipresto Library\nThe Minipresto CLI should always point to a compatible library with the expected\nstructure. The library directory can be set one of four ways, listed below in\nthe order of precedence:\n\n1. Passing the `LIB_PATH` variable to the CLI's `--env` option sets the library\n   directory for the current command.\n2. The `minipresto.cfg` file's `LIB_PATH` variable sets the library directory if\n   present.\n3. The path `~/.minipresto/lib/` is used as the default lib path if the\n   `LIB_PATH` var is not found.\n4. As a last resort, Minipresto will check to see if the library exists in\n   relation to the positioning of the `components.py` file and assumes the\n   project is being run out of a cloned repository.\n\nIf you not running out of a cloned repository, it is advisable to provide a\npointer to the library in Minipresto's configuration via the `LIB_PATH` config.\n\n-----\n\n## Minipresto Configuration File\nSticky configuration is set in `~/.minipresto/minipresto.cfg`. The sections in\nthis file each serve a separate purpose.\n\n### [CLI] Section\nThese configs allow the user to customize the behavior of Minipresto. \n\n- LIB_PATH: The filesystem path of the Minipresto library (specifically to the\n  `lib/` directory).\n- TEXT_EDITOR: The text editor to use with the `config` command, e.g. \"vi\",\n  \"nano\", etc. Defaults to the shell's default editor.\n\n### [DOCKER] Section\nThese configs allow the user to customize how Minipresto uses Docker.\n\n- DOCKER_HOST: A URL pointing to an accessible Docker host. This is\n  automatically detected by Docker otherwise.\n\n### [PRESTO] Section\nThese configs allow the user to propagate config to the Presto container. Since\nmany modules can append to Presto's core files, the supported way to make\npropagate changes to these Presto files is with these configs.\n\n- CONFIG: Configuration for Presto's `config.properties` file. \n- JVM_CONFIG: Configuration for Presto's `jvm.config` file.\n\nA multiline example of this section (note the indentation):\n\n```\n[PRESTO]\nCONFIG=\n    query.max-memory-per-node=500MB\n    query.max-total-memory-per-node=500MB\nJVM_CONFIG=\n    -Dsun.security.krb5.debug=true\n```\n\n### [MODULES] Section\nThis section sets environment variables passed to containers provisioned by\nMinipresto. Environment variables are only passed to a container if the variable\nis specified in the module's `docker-compose.yml` file.\n\nVariables propagated to the Presto container are supported by Presto secrets.\n\n- STARBURST_LIC_PATH: Required if using licensed Starburst Enterprise Presto\n  features. It can point to any valid license on your filesystem.\n- S3_ENDPOINT\n- S3_ACCESS_KEY\n- S3_SECRET_KEY\n- AWS_REGION\n- SNOWFLAKE_DIST_CONNECT_URL\n- SNOWFLAKE_DIST_CONNECT_USER\n- SNOWFLAKE_DIST_CONNECT_PASSWORD\n- SNOWFLAKE_DIST_WAREHOUSE\n- SNOWFLAKE_DIST_DB\n- SNOWFLAKE_DIST_STAGE_SCHEMA\n- SNOWFLAKE_JDBC_CONNECT_URL\n- SNOWFLAKE_JDBC_CONNECT_USER\n- SNOWFLAKE_JDBC_CONNECT_PASSWORD\n- SNOWFLAKE_JDBC_WAREHOUSE\n- SNOWFLAKE_JDBC_DB\n- SNOWFLAKE_JDBC_STAGE_SCHEMA\n\n-----\n\n## Project Structure \nThe library is built around Docker Compose files and utilizes Docker's ability\nto [extend Compose files](https://docs.docker.com/compose/extends/#multiple-compose-files).\n\nThe Starburst Presto service is defined in a Compose file at the library root,\nand all other services look up in the directory tree to reference the parent\nPresto service. In Compose files, the fully-qualified path––relative to the\nlibrary's root `docker-compose.yml` file––must be provided for Docker to locate\nresources.\n\nA simplified library structure:\n\n```\nlib\n├── Dockerfile\n├── docker-compose.yml\n├── minipresto.env\n├── modules\n│   ├── catalog\n│   │   └── postgres\n│   │       ├── metadata.json\n│   │       ├── postgres.yml\n│   │       ├── readme.md\n│   │       └── resources\n│   │           ├── postgres\n│   │           │   └── postgres.env\n│   │           └── presto\n│   │               └── postgres.properties\n│   ├── resources\n│   │   └── wait-for-it.sh\n│   └── security\n│       └── event-logger\n│           ├── event-logger.yml\n│           ├── metadata.json\n│           ├── readme.md\n│           └── resources\n│               ├── event-logger\n│               │   └── postgres.env\n│               └── presto\n│                   ├── event-listener.properties\n│                   └── postgres_event_logger.properties\n├── snapshots\n└── version\n```\n\nAnd the contents of a `docker-compose.yml` file (`postgres.yml`):\n\n```yaml\nversion: \"3.7\"\nservices:\n\n  presto:\n    volumes:\n      - \"./modules/catalog/postgres/resources/presto/postgres.properties:/usr/lib/presto/etc/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels:\n      - \"com.starburst.tests=minipresto\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n```\n\nNotice that the volume mount is not relative to the\n`lib/modules/catalog/postgres/` directory––it is relative to the parent\ndirectory which houses the top-level `docker-compose.yml` file. Also, notice the\nlabels––these labels will be used to identify Docker resources tied to\nMinipresto modules so that the CLI commands actually work.\n\n### Presto Dockerfile\nMinipresto modifies the Starburst Presto Docker image by adding the Presto CLI\nto the image as well as by providing `sudo` to the `presto` user. This is\nrequired for certain bootstrap scripts (i.e. using `yum` to install packages in\na Presto container for a module). This image is compatible with Starburst Presto\nimages back to Starburst Presto version `332-e.0`.\n\n-----\n\n## Adding New Modules (Tutorial)\nAdding new modules is relatively simple, but there are a few important\nguidelines to follow to ensure compatibility with the Minipresto CLI. The design\nrules are the same for both catalogs and security modules. The example below\ndemonstrates the process of creating a new catalog module for a Postgres\nservice.\n\n### Create the Module Directory\nCreate the module's directory in the `lib/modules/catalog/` directory:\n\n```sh\nmkdir lib/modules/catalog/postgres/\ncd lib/modules/catalog/postgres/\n```\n\n### Add Presto Resources \nAll resources for a module go inside of a `resources/` directory within the\nmodule. Inside this directory, place Presto-specific resources into a `presto/`\ndirectory, then mount the resources to the Presto service defined in the root\n`docker-compose.yml` file. \n\n```sh\nmkdir -p resources/presto/\n```\n\nIn the newly-created `resources/presto/` directory, add a properties file.\n\n```sh\nbash -c \"cat << EOF > postgres.properties\nconnector.name=postgresql\nconnection-url=jdbc:postgresql://postgres:5432/minipresto\nconnection-user=admin\nconnection-password=prestoRocks15\nEOF\"\n```\n\n-----\n\n**Note**: Passwords should always be `prestoRocks15` for consistency throughout\nmodules. \n\n-----\n\n### Add the Docker Compose YAML\nIn `lib/modules/catalog/postgres/`, add a Docker Compose file:\n\n```sh\ntouch postgres.yml\n```\n\nNotice the naming convention: `postgres.yml`. Giving the same root name of\n\"postgres\" to both the parent directory `postgres/` and to the Docker Compose\nfile `postgres.yml` will allow Minipresto to find our new catalog module.\n\nNext, add an environment file for the Postgres service. Non-Presto resources\nshould go into their own directory, so create one for postgres:\n\n```sh\nmkdir resources/postgres/\n```\n\nIn the newly-created directory, add an environment file which will register the\nvariables in the Postgres container when it is provisioned:\n\n```sh\nbash -c \"cat << EOF > postgres.env\nPOSTGRES_USER=admin\nPOSTGRES_PASSWORD=prestoRocks15\nPOSTGRES_DB=minipresto\nEOF\"\n```\n\nThis file will initialize Postgres with a database `minipresto`, a user\n`presto`, and a password `prestoRocks15`.\n\n### Add a Metadata File\nThis step is not required for personal development, but it is required to commit\na module to the Minipresto repository.\n\nIn `lib/modules/catalog/postgres/`, add the `metadata.json` file:\n\n```sh\nbash -c 'cat << EOF > metadata.json\n{\n  \"description\": \"Creates a Postgres catalog using the standard Postgres connector.\",\n  \"incompatible_modules\": []\n}\nEOF'\n```\n\nThe metadata file is presentable to the user via the `modules` command, and the\n`incompatible_modules` key restricts certain modules from being provisioned\nalongside the given module. The `*` wildcard is a supported convention if the\nmodule is incompatible with all other modules.\n\n### Add a Readme File\nThis step is not required for personal development, but it is required to commit\na module to the Minipresto repository.\n\nIn `lib/modules/catalog/postgres/`, add the `readme.md` file:\n\n```sh\ntouch readme.md\n```\n\nThis file should contain an overview of the module.\n\n### Review Progress \nThe resulting directory tree should look like this (from the `/modules/catalog/`\ndirectory):\n\n```\npostgres\n├── metadata.json\n├── postgres.yml\n├── readme.md\n└── resources\n    ├── postgres\n    │   └── postgres.env\n    └── presto\n        └── postgres.properties\n```\n\n### Configure the Docker Compose YAML File\nWe will now define the `postgres.yml` Docker Compose file. Set it up as follows,\nand **read the important notes after**:\n\n```yaml\nversion: \"3.7\"\nservices:\n\n  presto:\n    volumes:\n    # Always place Presto files in `/usr/lib/presto/etc/` as symbolic links can change between versions\n      - \"./modules/catalog/postgres/resources/presto/postgres.properties:/usr/lib/presto/etc/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels:\n      - \"com.starburst.tests=minipresto\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n\n```\n\n### Important Implementation Details: Paths and Labels\nWe can observe a few things about the Compose file we just defined.\n\n#### Path References for Volumes and Build Contexts\nFirst, the volumes we mount *are not relative to the Compose file itself*, they\nare relative to the base `docker-compose.yml` file in the library root. This is\nbecause the CLI extends Compose files, meaning that all path references in child\nCompose files need to be relative to the positioning of the parent Compose file.\n\nThe base Compose file is determined when you execute a Docker Compose\ncommand––the first Compose file referenced in the command becomes the base file,\nand that happens to be the `docker-compose.yml` file in the library root. This\nis how Minipresto constructs these commands. \n\nIf this is confusing, you can read more about extending Compose files on the\n[Docker docs](https://docs.docker.com/compose/extends/#multiple-compose-files). \n\n#### Minipresto Docker Labels\nSecondly, notice how we applied sets of labels to the Postgres service. These\nlabels tell the CLI which resources to target when executing commands.\n\nIn general, there is no need to apply labels to the Presto service since they\nare already applied in the parent Compose file **unless** the module is an\nextension of the Presto service itself (i.e. the Snowflake modules). Labels\nshould always be applied to:\n\n- Docker services (AKA the resulting container)\n- Named volumes\n- Images built from a Dockerfile\n\nLabels should be defined in pairs of two. The convention is:\n\n- The standard Minipresto resource label: `com.starburst.tests=minipresto`\n- A module-specific resource label:\n  `com.starburst.tests.module.<module-name>=<module-type>-<module-name>`\n  - For this label, the `module-type` should be either `catalog` or `security`\n  - This applies a unique label to the module, allowing it to be an isolated\n    component when necessary.\n\nIn Compose files where multiple services are defined, all services should be\nlabeled with the same label sets (see `hive-s3.yml` for an example).\n\n-----\n\n**Note**: A named volume is defined explicitly in the Compose file, and these\nshould always have label sets applied to them. Below is an example of the\nCompose file we just created with a named volume.\n\n-----\n\n```yaml\nversion: \"3.7\"\nservices:\n\n  presto:\n    volumes:\n      - \"./modules/catalog/postgres/resources/presto/postgres.properties:/usr/lib/presto/etc/catalog/postgres.properties\"\n\n  postgres:\n    image: \"postgres:${POSTGRES_VER}\"\n    container_name: \"postgres\"\n    labels: # These labels are applied to the service/container\n      - \"com.starburst.tests=minipresto\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n    env_file:\n      - \"./modules/catalog/postgres/resources/postgres/postgres.env\"\n\nvolumes:\n  postgres-data:\n    labels: # These labels are applied to the named volume\n      - \"com.starburst.tests=minipresto\"\n      - \"com.starburst.tests.module.postgres=catalog-postgres\"\n```\n\n-----\n\n**Note**: Certain modules will only extend the parent Presto service and do not\nactually define any new services/containers. See the Snowflake catalog modules\nfor an example of this. For these modules, the only label requirement is to add\nthe module-specific label to the Presto service in the relevant\n`docker-compose.yml` file \n\n-----\n\n### Test the New Catalog\nWe are all finished up. We can test our new catalog through the Minipresto CLI:\n\n```sh\nminipresto provision -m postgres\n```\n\nWe can now shell into the `presto` container and run some tests:\n\n```\ndocker exec -it presto bash \npresto-cli\npresto> show catalogs;\n```\n\n### Customizing Images\nIf you need to build an image from a local Dockerfile, you can do so and\nstructure the Compose file accordingly. See the library's root\n`docker-compose.yml` file for an example of this. Path references for volumes\nand the image build context will follow the same convention as volume mount\npaths described earlier.\n\n### Bootstrap Scripts\nMinipresto supports container bootstrap scripts. These scripts **do not\nreplace** the entrypoint (or default command) for a given container. The script\nis copied from the Minipresto library to the container, executed, and then\nremoved from the container. Containers are restarted after each bootstrap script\nexecution, **so the bootstrap scripts themselves should not restart the\ncontainer's service**.\n\nIf a bootstrap script has already executed in a container *and* the volume\nassociated with the container still exists, Minipresto will not re-execute the\nbootstrap script *unless the contents of the script have changed*. The is useful\nafter running `minipresto down --keep` (which does not remove unnamed container\nvolumes), so that the subsequent `provision` command will not re-execute the\nsame bootstrap script(s).\n\nIf a bootstrap script is updated, it is recommended to destroy the associated\ncontainer(s) via `minipresto down` and then to re-provision.\n\nTo add a bootstrap script, add a `resources/bootstrap/` directory in any given\nmodule, create a shell script, and then reference the script name in the Compose\nYAML file:\n\n```yaml\nversion: \"3.7\"\nservices:\n\n  presto:\n    environment:\n      MINIPRESTO_BOOTSTRAP: \"bootstrap.sh\"\n```\n\nThe `elasticsearch` module is a good example of this.\n\n### Managing Presto's `config.properties` File\nMany modules can change the Presto `config.properties` and `jvm.config` files.\nBecause of this, there are two supported ways to modify these files with\nMinipresto.\n\nThe first way is by setting the `CONFIG` variable in your `minipresto.cfg` file.\nThis will propagate the config to the Presto container when it is provisioned.\n\nGenerally speaking, this can be used for any type of configuration (i.e. memory\nconfiguration) that is unlikely to be modified by any module. This also applies\nto the `jvm.config` file, which has identical support via the `JVM_CONFIG`\nvariable. If there are duplicate configs in either file, Minipresto will warn\nthe user.\n\nTo set these configs, your configuration file should look like:\n\n```\n[PRESTO]\nCONFIG=\n    query.max-memory-per-node=500MB\n    query.max-total-memory-per-node=500MB\nJVM_CONFIG=\n    -Dsun.security.krb5.debug=true\n```\n\nThe second way to modify core Presto configuration is via module bootstrap\nscripts. This method is utilized by modules that need to make module-specific\nchanges to Presto files. An example bootstrap snippet can be found below:\n\n```bash\n#!/usr/bin/env bash\n\nset -euxo pipefail\n\necho \"Adding Presto configs...\"\ncat <<EOT >> /usr/lib/presto/etc/config.properties\nquery.max-stage-count=105\nquery.max-execution-time=1h\nEOT\n```\n\n-----\n\n## Troubleshooting\n\n- If you experience issues executing a Minipresto command, re-run it with the\n  `-v` option for verbose output. This will often reveal the issue\n- If you experience an issue with a particular Docker container, consider\n  running these commands:\n  - `docker logs <container>`: Print the logs for a given container to the\n    terminal\n  - `docker ps`: Show all running Docker containers and associated statistics\n- If you experience issues with a library module, check that that module is\n  structured correctly according to the [module\n  tutorial](#adding-new-modules-tutorial)\n\nIf none of these troubleshooting tips help to resolve your issue, [please file a\nGitHub issue](#reporting-bugs-and-contributing) and provide as much information\nas possible.\n\n-----\n\n## Reporting Bugs and Contributing\nTo report bugs, please file a GitHub issue on the [Minipresto\nrepository](https://github.com/jefflester/minipresto). Bug reports should:\n\n- Contain any relevant log messages (if the bug is tied to a command, running\n  with the `-v` flag will make debugging easier)\n- Describe what the expected outcome is \n- Describe the proposed code fix (optional)\n\nContributors have two options:\n\n1. Fork the repository, then make a PR to merge your changes\n2. If you have been added as a contributor, you can go with the method above or\n   you can create a feature branch, then submit a PR for that feature branch\n   when it is ready to be merged. \n\nIn either case, please provide a comprehensive description of your changes with\nthe PR.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jefflester/minipresto",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minipresto",
    "package_url": "https://pypi.org/project/minipresto/",
    "platform": "",
    "project_url": "https://pypi.org/project/minipresto/",
    "project_urls": {
      "Homepage": "https://github.com/jefflester/minipresto"
    },
    "release_url": "https://pypi.org/project/minipresto/1.0.1/",
    "requires_dist": [
      "click (==7.1.2)",
      "colorama",
      "docker (==4.2.1)",
      "PyYAML"
    ],
    "requires_python": ">=3.6",
    "summary": "A command line tool that makes it easy to run modular Presto environments locally.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10213911,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "923b462f30912673c9a2a62b05303f3c89cbaf53c92101039a78f3d858ac6f99",
        "md5": "0c318e7e93e87b5c1a9740da0056a7d1",
        "sha256": "13ae28c474ad64dd4eecec3bdbe9732cfdbfcd2b0b23640b98b2d8507515ca2b"
      },
      "downloads": -1,
      "filename": "minipresto-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c318e7e93e87b5c1a9740da0056a7d1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 41270,
      "upload_time": "2020-12-04T02:42:32",
      "upload_time_iso_8601": "2020-12-04T02:42:32.954350Z",
      "url": "https://files.pythonhosted.org/packages/92/3b/462f30912673c9a2a62b05303f3c89cbaf53c92101039a78f3d858ac6f99/minipresto-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dd0f7e15c1fb7971b97f11b2f9434961528a1dcb0036197000badcd34089e41",
        "md5": "daa0c1c0fdaf84e64adf4994ebb8d4c2",
        "sha256": "b8683d79b10a8235b0e8869d2dc0bd769a52a77433b8c6eac0373ae398e27e32"
      },
      "downloads": -1,
      "filename": "minipresto-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "daa0c1c0fdaf84e64adf4994ebb8d4c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44972,
      "upload_time": "2020-12-04T02:42:35",
      "upload_time_iso_8601": "2020-12-04T02:42:35.000220Z",
      "url": "https://files.pythonhosted.org/packages/1d/d0/f7e15c1fb7971b97f11b2f9434961528a1dcb0036197000badcd34089e41/minipresto-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}