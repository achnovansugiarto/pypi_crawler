{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# ✨️ 概述\r\n\r\nDrissionPage 是一个基于 python 的网页自动化工具。\r\n\r\n它既能控制浏览器，也能收发数据包，甚至能把两者合而为一，\r\n\r\n可兼顾浏览器自动化的便利性和 requests 的高效率。\r\n\r\n它功能强大，内置无数人性化设计和便捷功能。\r\n\r\n它的语法简洁而优雅，代码量少，对新手友好。\r\n\r\n***\r\n\r\n支持系统：Windows、Linux、Mac\r\n\r\npython 版本：3.6 及以上\r\n\r\n支持浏览器：Chromium 内核浏览器（如 Chrome 和 Edge）\r\n\r\n*** \r\n\r\n<a href='https://gitee.com/g1879/DrissionPage/stargazers'><img src='https://gitee.com/g1879/DrissionPage/badge/star.svg?theme=dark' alt='star'></img></a> <a href='https://gitee.com/g1879/DrissionPage/members'><img src='https://gitee.com/g1879/DrissionPage/badge/fork.svg?theme=dark' alt='fork'></img></a>\r\n\r\n项目地址：[gitee](https://gitee.com/g1879/DrissionPage)    |    [github](https://github.com/g1879/DrissionPage)\r\n\r\n**交流QQ群：**  897838127\r\n\r\n**联系邮箱：**  g1879@qq.com\r\n\r\n**📖 使用文档：**  [点击查看](http://g1879.gitee.io/drissionpage)\r\n\r\n# 📕 背景\r\n\r\n用 requests 做数据采集面对要登录的网站时，要分析数据包、JS 源码，构造复杂的请求，往往还要应付验证码、JS 混淆、签名参数等反爬手段，门槛较高。若数据是由 JS 计算生成的，还须重现计算过程，体验不好，开发效率不高。\r\n使用浏览器，可以很大程度上绕过这些坑，但浏览器运行效率不高。\r\n\r\n因此，这个库设计初衷，是将它们合而为一，能够在不同须要时切换相应模式，并提供一种人性化的使用方法，提高开发和运行效率。  \r\n除了合并两者，本库还以网页为单位封装了常用功能，提供非常简便的操作和语句，在用于网页自动化操作时，减少考虑细节，专注功能实现，使用更方便。  一切从简，尽量提供简单直接的使用方法，使代码更优雅。\r\n\r\n以前的版本是对 selenium 进行重新封装实现的。从 3.0 开始，作者另起炉灶，对底层进行了重新开发，摆脱对 selenium 的依赖，增强了功能，提升了运行效率。\r\n\r\n# 💡 理念\r\n\r\n简洁！易用 ！方便！\r\n\r\n# ☀️ 特性和亮点\r\n\r\n作者经过长期实践，踩过无数坑，总结出的经验全写到这个库里了。\r\n\r\n## 🎇 强大的自研内核\r\n\r\n本库采用全自研的内核，内置了 N 多实用功能，对常用功能作了整合和优化，对比 selenium，有以下优点：\r\n\r\n- 无 webdriver 特征，不会被网站识别\r\n\r\n- 无需为不同版本的浏览器下载不同的驱动\r\n\r\n- 运行速度更快\r\n\r\n- 可以跨 iframe 查找元素，无需切入切出\r\n\r\n- 把 iframe 看作普通元素，获取后可直接在其中查找元素，逻辑更清晰\r\n\r\n- 可以同时操作浏览器中的多个标签页，即使标签页为非激活状态，无需切换\r\n\r\n- 可以直接读取浏览器缓存来保存图片，无需用 GUI 点击另存\r\n\r\n- 可以对整个网页截图，包括视口外的部分（90以上版本浏览器支持）\r\n\r\n## 🎇 亮点功能\r\n\r\n除了以上优点，本库还内置了无数人性化设计。\r\n\r\n- 极简的语法规则。集成大量常用功能，代码更优雅\r\n\r\n- 定位元素更加容易，功能更强大稳定\r\n\r\n- 无处不在的等待和自动重试功能。使不稳定的网络变得易于控制，程序更稳定，编写更省心\r\n\r\n- 提供强大的下载工具。操作浏览器时也能享受快捷可靠的下载功能\r\n\r\n- 允许反复使用已经打开的浏览器。无须每次运行从头启动浏览器，调试超方便\r\n\r\n- 使用 ini 文件保存常用配置，自动调用，提供便捷的设置，远离繁杂的配置项\r\n\r\n- 内置 lxml 作为解析引擎，解析速度成几个数量级提升\r\n\r\n- 使用 POM 模式封装，可直接用于测试，便于扩展\r\n\r\n- 高度集成的便利功能，从每个细节中体现\r\n\r\n- 还有很多细节，这里不一一列举，欢迎实际使用中体验：）\r\n\r\n# 🌟 简单演示\r\n\r\n## ⭐ **与 selenium 代码对比**\r\n\r\n以下代码实现一模一样的功能，对比两者的代码量：\r\n\r\n🔸 用显性等待方式定位第一个文本包含`some text`的元素\r\n\r\n```python\r\n# 使用 selenium：\r\nelement = WebDriverWait(driver).until(ec.presence_of_element_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\r\n\r\n# 使用 DrissionPage：\r\nelement = page('some text')\r\n```\r\n\r\n🔸 跳转到第一个标签页\r\n\r\n```python\r\n# 使用 selenium：\r\ndriver.switch_to.window(driver.window_handles[0])\r\n\r\n# 使用 DrissionPage：\r\npage.to_tab(page.tabs[0])\r\n```\r\n\r\n🔸 按文本选择下拉列表\r\n\r\n```python\r\n# 使用 selenium：\r\nfrom selenium.webdriver.support.select import Select\r\n\r\nselect_element = Select(element)\r\nselect_element.select_by_visible_text('text')\r\n\r\n# 使用 DrissionPage：\r\nelement.select('text')\r\n```\r\n\r\n🔸 拖拽一个元素\r\n\r\n```python\r\n# 使用 selenium：\r\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\r\n\r\n# 使用 DrissionPage：\r\nele1.drag_to(ele2)\r\n```\r\n\r\n🔸 滚动窗口到底部（保持水平滚动条不变）\r\n\r\n```python\r\n# 使用 selenium：\r\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft, document.body.scrollHeight);\")\r\n\r\n# 使用 DrissionPage：\r\npage.scroll.to_bottom()\r\n```\r\n\r\n🔸 获取伪元素内容\r\n\r\n```python\r\n# 使用 selenium：\r\ntext = webdriver.execute_script('return window.getComputedStyle(arguments[0], \"::after\").getPropertyValue(\"content\");',\r\n                                element)\r\n\r\n# 使用 DrissionPage：\r\ntext = element.pseudo_after\r\n```\r\n\r\n🔸 shadow-root 操作\r\n\r\n```python\r\n# 使用 selenium：\r\nshadow_element = webdriver.execute_script('return arguments[0].shadowRoot', element)\r\n\r\n# 使用 DrissionPage：\r\nshadow_element = element.sr\r\n\r\n# 在 shadow_root 下可继续执行查找，获取普通元素\r\nele = shadow_element.ele('tag:div')\r\nele.click()\r\n```\r\n\r\n🔸 随时让浏览器窗口消失和显示（Windows系统）\r\n\r\n```python\r\n# selenium 无此功能\r\n\r\n# 使用 DrissionPage\r\npage.hide_browser()  # 让浏览器窗口消失\r\npage.show_browser()  # 重新显示浏览器窗口\r\n```\r\n\r\n## ⭐ **与 requests 代码对比**\r\n\r\n以下代码实现一模一样的功能，对比两者的代码量：\r\n\r\n🔸 获取元素内容\r\n\r\n```python\r\nurl = 'https://baike.baidu.com/item/python'\r\n\r\n# 使用 requests：\r\nfrom lxml import etree\r\n\r\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\r\nresponse = requests.get(url, headers=headers)\r\nhtml = etree.HTML(response.text)\r\nelement = html.xpath('//h1')[0]\r\ntitle = element.text\r\n\r\n# 使用 DrissionPage：\r\npage = WebPage('s')\r\npage.get(url)\r\ntitle = page('tag:h1').text\r\n```\r\n\r\nTips: DrissionPage 自带默认`headers`\r\n\r\n🔸 下载文件\r\n\r\n```python\r\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\r\nsave_path = r'C:\\download'\r\n\r\n# 使用 requests：\r\nr = requests.get(url)\r\nwith open(f'{save_path}\\\\img.png', 'wb') as fd:\r\n   for chunk in r.iter_content():\r\n       fd.write(chunk)\r\n\r\n# 使用 DrissionPage：\r\npage.download(url, save_path, 'img')  # 支持重命名，处理文件名冲突，自动创建目标文件夹\r\n```\r\n\r\n## ⭐ **模式切换**\r\n\r\n用浏览器登录网站，然后切换到 requests 读取网页。两者会共享登录信息。\r\n\r\n```python\r\npage = WebPage()  # 创建页面对象，默认 driver 模式\r\npage.get('https://gitee.com/profile')  # 访问个人中心页面（未登录，重定向到登录页面）\r\n\r\npage.ele('@id:user_login').input('your_user_name')  # 使用 selenium 输入账号密码登录\r\npage.ele('@id:user_password').input('your_password\\n')\r\nsleep(1)\r\n\r\npage.change_mode()  # 切换到 session 模式\r\nprint('登录后title：', page.title, '\\n')  # 登录后 session 模式的输出\r\n```\r\n\r\n输出：\r\n\r\n```\r\n登录后title： 个人资料 - 码云 Gitee.com\r\n```\r\n\r\n**获取并显示元素属性**\r\n\r\n```python\r\n# 接上段代码\r\nfoot = page.ele('@id:footer-left')  # 用 id 查找元素\r\nfirst_col = foot.ele('css:>div')  # 使用 css selector 在元素的下级中查找元素（第一个）\r\nlnk = first_col.ele('text:命令学')  # 使用文本内容查找元素\r\ntext = lnk.text  # 获取元素文本\r\nhref = lnk.attr('href')  # 获取元素属性值\r\n\r\nprint(text, href, '\\n')\r\n\r\n# 简洁模式串联查找\r\ntext = page('@id:footer-left')('css:>div')('text:命令学').text\r\nprint(text)\r\n```\r\n\r\n输出：\r\n\r\n```\r\nGit 命令学习 https://oschina.gitee.io/learn-git-branching/\r\n\r\nGit 命令学习\r\n```\r\n\r\n# 🛠 使用方法\r\n\r\n[点击跳转到使用文档](http://g1879.gitee.io/drissionpage)\r\n\r\n# 🔖 版本历史\r\n\r\n[点击查看版本历史](http://g1879.gitee.io/drissionpage/#/%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2)\r\n\r\n# 🖐🏻 免责声明\r\n\r\n请勿将 DrissionPage 应用到任何可能会违反法律规定和道德约束的工作中,请友善使用 DrissionPage，遵守蜘蛛协议，不要将 DrissionPage 用于任何非法用途。如您选择使用 DrissionPage\r\n即代表您遵守此协议，作者不承担任何由于您违反此协议带来任何的法律风险和损失，一切后果由您承担。\r\n\r\n# ☕ 请我喝咖啡\r\n\r\n如果本项目对您有所帮助，不妨请作者我喝杯咖啡 ：）\r\n\r\n![](https://gitee.com/g1879/DrissionPage/raw/master/docs/imgs/code.jpg)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": null,
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://gitee.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/3.1.3/",
    "requires_dist": [
      "selenium",
      "lxml",
      "tldextract",
      "requests",
      "DownloadKit (>=0.5.0)",
      "FlowViewer",
      "websocket-client"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "3.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a4c2aed3b775b742d0f5a9cc3caf7d34f8a3e671460858bd740b3700aa5b045",
        "md5": "406981e386bdde05d29b6d24dfa668eb",
        "sha256": "60891915d142a5975d3d81c429f89a33bf5f38f888d53e82a5db5c781887ab24"
      },
      "downloads": -1,
      "filename": "DrissionPage-3.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "406981e386bdde05d29b6d24dfa668eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 167384,
      "upload_time": "2023-02-02T15:36:23",
      "upload_time_iso_8601": "2023-02-02T15:36:23.321699Z",
      "url": "https://files.pythonhosted.org/packages/2a/4c/2aed3b775b742d0f5a9cc3caf7d34f8a3e671460858bd740b3700aa5b045/DrissionPage-3.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e39adc799d86d05b0e3ba93aef0c9b5cc6cb831c01fe3b672a16c472e32c0bd2",
        "md5": "2aad35bb66d485990762c1e5f6528f39",
        "sha256": "bc785615ca2bc17d958b66c4e90035a59c3b2d9ae0e510bba4bbbb14ee148f00"
      },
      "downloads": -1,
      "filename": "DrissionPage-3.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2aad35bb66d485990762c1e5f6528f39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 115418,
      "upload_time": "2023-02-02T15:36:28",
      "upload_time_iso_8601": "2023-02-02T15:36:28.704471Z",
      "url": "https://files.pythonhosted.org/packages/e3/9a/dc799d86d05b0e3ba93aef0c9b5cc6cb831c01fe3b672a16c472e32c0bd2/DrissionPage-3.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}