{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# ✨️简洁！易用 ！方便！✨️\r\n\r\nDrissionPage，即 driver 和 session 组合而成的 page。  \r\n是个基于 python 的 Web 自动化操作集成工具。  \r\n它用 POM 模式封装了页面和元素常用的方法，  \r\n自带一套简洁直观优雅的元素定位语法，  \r\n实现了浏览器和 requests 之间的无缝切换，  \r\n可兼顾浏览器自动化的便利性和 requests 的高效率，  \r\n更棒的是，它的使用方式非常简洁和人性化，代码量少，对新手友好。\r\n\r\n**使用文档：** 📒[点击打开](http://g1879.gitee.io/drissionpage)\r\n\r\n**QQ群：**  897838127\r\n\r\n**联系邮箱：**  g1879@qq.com\r\n\r\n## 📕 背景\r\n\r\n用 requests 做数据采集面对要登录的网站时，要分析数据包、JS 源码，构造复杂的请求，往往还要应付验证码、JS 混淆、签名参数等反爬手段，门槛较高。若数据是由 JS 计算生成的，还须重现计算过程，体验不好，开发效率不高。  \r\n使用浏览器，可以很大程度上绕过这些坑，但浏览器运行效率不高。因此，这个库将它们合而为一，不同须要时切换相应模式，并提供一种人性化的使用方法，提高开发和运行效率。  \r\n除了合并两者，本库还以网页为单位封装了常用功能，提供非常简便的操作和语句，在用于网页自动化操作时，减少考虑细节，专注功能实现，使用更方便。  \r\n一切从简，尽量提供简单直接的使用方法，对新手更友好。\r\n\r\n# 🔆 3.0 版隆重推出（测试中）\r\n\r\n以前的版本是对 selenium 进行重新封装实现的。从 3.0 开始，作者另起炉灶，对底层进行了重新开发，摆脱对 selenium 的依赖，增强了功能，提升了运行效率。  \r\n3.0 全新开发的页面对象是`WebPage`，支持 chromium 内核的浏览器（如 chrome 和 edge）。除了保持之前的功能，比依赖 selenium 的`MixPage`有以下优点：\r\n\r\n- 无 webdriver 特征，不会被网站识别\r\n\r\n- 无需为不同版本的浏览器下载不同的驱动\r\n\r\n- 运行速度更快\r\n\r\n- 可以跨 iframe 查找元素，无需切入切出\r\n\r\n- 把 iframe 看作普通元素，获取后可直接在其中查找元素，逻辑更清晰\r\n\r\n- 可以同时操作浏览器中的多个标签页，即使标签页为非激活状态\r\n\r\n- 可以直接读取浏览器缓存来保持图片，无需用 GUI 点击保存\r\n\r\n- 可以对整个网页截图，包括视口外的部分（90以上版本浏览器支持）\r\n\r\n- 对 Linux 提供良好支持\r\n\r\n新版是自己实现的功能，开发不会受太多限制，以后将主要对`WebPage`进行更新。\r\n\r\n3.0 版已经发布，目前正在测试，欢迎试用并提出意见，让我做得更好。\r\n\r\n# 💡 特性和亮点\r\n\r\n作者踩过无数坑，总结出的经验全写到这个库里了。内置了 N 多实用功能，对常用功能作了整合和优化。\r\n\r\n## 🎉 特性\r\n\r\n- 代码高度集成，以简洁的代码为第一追求。\r\n- 页面对象可在浏览器和 requests 间任意切换，保留登录状态。\r\n- 极简单但强大的元素定位语法，支持链式操作，代码极其简洁。\r\n- 两种模式提供一致的 API，使用体验一致。\r\n- 人性化设计，集成众多实用功能，大大降低开发工作量。\r\n\r\n## 🎇 亮点功能\r\n\r\n- 每次运行程序可以反复使用已经打开的浏览器。如手动设置网页到某个状态，再用程序接管，或手动处理登录，再用程序爬内容。无须每次运行从头启动浏览器，超级方便。\r\n- 使用 ini 文件保存常用配置，自动调用，也提供便捷的设置 API，远离繁杂的配置项。\r\n- 极致简明的定位语法，支持直接按文本定位元素，支持直接获取前后兄弟元素和父元素等。\r\n- 强大的下载工具，操作浏览器时也能享受快捷可靠的下载功能。\r\n- 下载工具支持多种方式处理文件名冲突、自动创建目标路径、断链重试等。\r\n- 访问网址带自动重试功能，可设置间隔和超时时间。\r\n- 访问网页能自动识别编码，无须手动设置。\r\n- 链接参数默认自动生成`Host`和`Referer`属性。\r\n- 可随时直接隐藏或显示浏览器进程窗口，非 headless 或最小化。\r\n- 可自动下载合适版本的 chromedriver，免去麻烦的配置。\r\n- d 模式查找元素内置等待，可任意设置全局等待时间或单次查找等待时间。\r\n- 点击元素集成 js 点击方式，一个参数即可切换点击方式。\r\n- 点击支持失败重试，可用于保证点击成功、判读网页遮罩层是否消失等。\r\n- 输入文本能自动判断是否成功并重试，避免某些情况下输入或清空失效的情况。\r\n- d 模式下支持全功能的 xpath，可直接获取元素的某个属性，selenium 原生无此功能。\r\n- 支持直接获取`shadow-root`，和普通元素一样操作其下的元素。\r\n- 支持直接获取`after`和`before`伪元素的内容。\r\n- 可以在元素下直接使用 > 以 css selector 方式获取当前元素直接子元素。原生不支持这种写法。\r\n- 可简单地使用 lxml 来解析 d 模式的页面或元素，爬取复杂页面数据时速度大幅提高。\r\n- 输出的数据均已转码及处理基本排版，减少重复劳动。\r\n- 可方便地与 selenium 或 requests 原生代码对接，便于项目迁移。\r\n- 使用 POM 模式封装，可直接用于测试，便于扩展。\r\n- d 模式配置可同时兼容`debugger_address`和其它参数，原生不能兼容。\r\n- 还有很多这里不一一列举…………\r\n\r\n# 🍀 简单演示\r\n\r\n☘️ **与 selenium 代码对比**\r\n\r\n以下代码实现一模一样的功能，对比两者的代码量：\r\n\r\n🌿 用显性等待方式定位第一个文本包含`some text`的元素\r\n\r\n```python\r\n# 使用 selenium：\r\nelement = WebDriverWait(driver).until(ec.presence_of_element_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\r\n\r\n# 使用 DrissionPage：\r\nelement = page('some text')\r\n```\r\n\r\n🌿 跳转到第一个标签页\r\n\r\n```python\r\n# 使用 selenium：\r\ndriver.switch_to.window(driver.window_handles[0])\r\n\r\n# 使用 DrissionPage：\r\npage.to_tab(0)\r\n```\r\n\r\n🌿 按文本选择下拉列表\r\n\r\n```python\r\n# 使用 selenium：\r\nfrom selenium.webdriver.support.select import Select\r\n\r\nselect_element = Select(element)\r\nselect_element.select_by_visible_text('text')\r\n\r\n# 使用 DrissionPage：\r\nelement.select('text')\r\n```\r\n\r\n🌿 拖拽一个元素\r\n\r\n```python\r\n# 使用 selenium：\r\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\r\n\r\n# 使用 DrissionPage：\r\nele1.drag_to(ele2)\r\n```\r\n\r\n🌿 滚动窗口到底部（保持水平滚动条不变）\r\n\r\n```python\r\n# 使用 selenium：\r\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft, document.body.scrollHeight);\")\r\n\r\n# 使用 DrissionPage：\r\npage.scroll.to_bottom()\r\n```\r\n\r\n🌿 设置 headless 模式\r\n\r\n```python\r\n# 使用 selenium：\r\noptions = webdriver.ChromeOptions()\r\noptions.add_argument(\"--headless\")\r\n\r\n# 使用 DrissionPage：\r\nset_headless()\r\n```\r\n\r\n🌿 获取伪元素内容\r\n\r\n```python\r\n# 使用 selenium：\r\ntext = webdriver.execute_script('return window.getComputedStyle(arguments[0], \"::after\").getPropertyValue(\"content\");',\r\n                                element)\r\n\r\n# 使用 DrissionPage：\r\ntext = element.pseudo_after\r\n```\r\n\r\n🌿 shadow-root 操作\r\n\r\nselenium 新增了`ShadowRoot`，但功能实在是太少。\r\n\r\n```python\r\n# 使用 selenium：\r\nshadow_element = webdriver.execute_script('return arguments[0].shadowRoot', element)\r\n\r\n# 使用 DrissionPage：\r\nshadow_element = element.sr\r\n\r\n# 在 shadow_root 下可继续执行查找，获取普通元素\r\nele = shadow_element.ele('tag:div')\r\nele.click()\r\n```\r\n\r\n🌿 用 xpath 直接获取属性或文本节点（返回文本）\r\n\r\n```python\r\n# 使用 selenium 无此功能\r\n\r\n# 使用 DrissionPage：\r\nclass_name = element('xpath://div[@id=\"div_id\"]/@class')\r\ntext = element('xpath://div[@id=\"div_id\"]/text()[2]')\r\n```\r\n\r\n🌿 随时让浏览器窗口消失和显示\r\n\r\n```python\r\n# selenium 无此功能\r\n\r\n# 使用 DrissionPage\r\npage.hide_browser()  # 让浏览器窗口消失\r\npage.show_browser()  # 重新显示浏览器窗口\r\n```\r\n\r\n注：本功能只支持 Windows。\r\n\r\n☘️ **与 requests 代码对比**\r\n\r\n以下代码实现一模一样的功能，对比两者的代码量：\r\n\r\n🌿 获取元素内容\r\n\r\n```python\r\nurl = 'https://baike.baidu.com/item/python'\r\n\r\n# 使用 requests：\r\nfrom lxml import etree\r\n\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\r\nresponse = requests.get(url, headers=headers)\r\nhtml = etree.HTML(response.text)\r\nelement = html.xpath('//h1')[0]\r\ntitle = element.text\r\n\r\n# 使用 DrissionPage：\r\npage = MixPage('s')\r\npage.get(url)\r\ntitle = page('tag:h1').text\r\n```\r\n\r\nTips: DrissionPage 自带默认`headers`\r\n\r\n🌿 下载文件\r\n\r\n```python\r\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\r\nsave_path = r'C:\\download'\r\n\r\n# 使用 requests：\r\nr = requests.get(url)\r\nwith open(f'{save_path}\\\\img.png', 'wb') as fd:\r\n   for chunk in r.iter_content():\r\n       fd.write(chunk)\r\n\r\n# 使用 DrissionPage：\r\npage.download(url, save_path, 'img')  # 支持重命名，处理文件名冲突，自动创建目标文件夹\r\n```\r\n\r\n☘️ **模式切换**\r\n\r\n用 selenium 登录网站，然后切换到 requests 读取网页。两者会共享登录信息。\r\n\r\n```python\r\npage = MixPage()  # 创建页面对象，默认 driver 模式\r\npage.get('https://gitee.com/profile')  # 访问个人中心页面（未登录，重定向到登录页面）\r\n\r\npage.ele('@id:user_login').input('your_user_name')  # 使用 selenium 输入账号密码登录\r\npage.ele('@id:user_password').input('your_password\\n')\r\nsleep(1)\r\n\r\npage.change_mode()  # 切换到 session 模式\r\nprint('登录后title：', page.title, '\\n')  # 登录后 session 模式的输出\r\n```\r\n\r\n输出：\r\n\r\n```\r\n登录后title： 个人资料 - 码云 Gitee.com\r\n```\r\n\r\n**获取并显示元素属性**\r\n\r\n```python\r\n# 接上段代码\r\nfoot = page.ele('@id:footer-left')  # 用 id 查找元素\r\nfirst_col = foot.ele('css:>div')  # 使用 css selector 在元素的下级中查找元素（第一个）\r\nlnk = first_col.ele('text:命令学')  # 使用文本内容查找元素\r\ntext = lnk.text  # 获取元素文本\r\nhref = lnk.attr('href')  # 获取元素属性值\r\n\r\nprint(text, href, '\\n')\r\n\r\n# 简洁模式串联查找\r\ntext = page('@id:footer-left')('css:>div')('text:命令学').text\r\nprint(text)\r\n```\r\n\r\n输出：\r\n\r\n```\r\nGit 命令学习 https://oschina.gitee.io/learn-git-branching/\r\n\r\nGit 命令学习\r\n```\r\n\r\n# 🛠 使用方法\r\n\r\n[点击跳转到使用文档](http://g1879.gitee.io/drissionpage)\r\n\r\n# 🎯️ 版本历史\r\n\r\n[点击查看版本历史](http://g1879.gitee.io/drissionpage/#/%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2)\r\n\r\n# 🖐🏻 免责声明\r\n\r\n请勿将 DrissionPage 应用到任何可能会违反法律规定和道德约束的工作中,请友善使用 DrissionPage，遵守蜘蛛协议，不要将 DrissionPage 用于任何非法用途。如您选择使用 DrissionPage\r\n即代表您遵守此协议，作者不承担任何由于您违反此协议带来任何的法律风险和损失，一切后果由您承担。\r\n\r\n# ☕ 请我喝咖啡\r\n\r\n如果本项目对您有所帮助，不妨请作者我喝杯咖啡 ：）\r\n\r\n![](https://gitee.com/g1879/DrissionPage-demos/raw/master/pics/code.jpg)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": null,
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://gitee.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/3.0.8/",
    "requires_dist": [
      "selenium",
      "lxml",
      "tldextract",
      "requests",
      "DownloadKit",
      "FlowViewer",
      "pychrome"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "3.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf5d9dc9a103673508af5dbef1fd7b330c9f7c6686136784e5d3c50ff4439674",
        "md5": "eaadbd2d7f29c822e1561eb2e3f8979f",
        "sha256": "05d78ec10fe5c24965f4cabe856f4b25516b3f848a05b84479e4b72578f166d7"
      },
      "downloads": -1,
      "filename": "DrissionPage-3.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaadbd2d7f29c822e1561eb2e3f8979f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 104978,
      "upload_time": "2022-11-22T14:32:07",
      "upload_time_iso_8601": "2022-11-22T14:32:07.716684Z",
      "url": "https://files.pythonhosted.org/packages/bf/5d/9dc9a103673508af5dbef1fd7b330c9f7c6686136784e5d3c50ff4439674/DrissionPage-3.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f38225aaf7d0c8d0f254b8c918d89dbbb9088bb37d8a1ca01ffe38f088fdda7c",
        "md5": "67775ec9cd84321eebe3dcb5f0207f49",
        "sha256": "b2777a6ef4fd06d3d42e5d7cc63ca846adac21b0484733e6e937c9542e5e2ee0"
      },
      "downloads": -1,
      "filename": "DrissionPage-3.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "67775ec9cd84321eebe3dcb5f0207f49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 92082,
      "upload_time": "2022-11-22T14:32:12",
      "upload_time_iso_8601": "2022-11-22T14:32:12.364799Z",
      "url": "https://files.pythonhosted.org/packages/f3/82/25aaf7d0c8d0f254b8c918d89dbbb9088bb37d8a1ca01ffe38f088fdda7c/DrissionPage-3.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}