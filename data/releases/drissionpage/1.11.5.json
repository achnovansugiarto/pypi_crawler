{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# 简介\n\n***\n\nDrissionPage，即 driver 和 session 组合而成的 page。  \n是个基于 python 的 Web 自动化操作集成工具。  \n它实现了 selenium 和 requests 之间的无缝切换。  \n可以兼顾 selenium 的便利性和 requests 的高效率。  \n它集成了页面常用功能，两种模式系统一致的 API，使用便捷。  \n它用 POM 模式封装了页面元素常用的方法，适合自动化操作功能扩展。  \n更棒的是，它的使用方式非常简洁和人性化，代码量少，对新手友好。\n\n**项目地址：**\n\n- https://github.com/g1879/DrissionPage\n- https://gitee.com/g1879/DrissionPage\n\n**示例地址：** [使用DrissionPage的网页自动化及爬虫示例](https://gitee.com/g1879/DrissionPage-demos)\n\n**联系邮箱：**  g1879@qq.com\n\n**交流QQ群：**  897838127\n\n**理念**\n\n**简洁、易用 、可扩展**\n\n**背景**\n\nrequests 爬虫面对要登录的网站时，要分析数据包、JS 源码，构造复杂的请求，往往还要应付验证码、JS 混淆、签名参数等反爬手段，门槛较高。若数据是由 JS 计算生成的，还须重现计算过程，体验不好，开发效率不高。  \n使用 selenium，可以很大程度上绕过这些坑，但 selenium 效率不高。因此，这个库将 selenium 和 requests 合而为一，不同须要时切换相应模式，并提供一种人性化的使用方法，提高开发和运行效率。  \n除了合并两者，本库还以网页为单位封装了常用功能，简化了 selenium 的操作和语句，在用于网页自动化操作时，减少考虑细节，专注功能实现，使用更方便。  \n一切从简，尽量提供简单直接的使用方法，对新手更友好。\n\n# 特性\n\n***\n\n- 以简洁的代码为第一追求。\n- 允许在 selenium 和 requests 间无缝切换，共享 session。\n- 两种模式提供一致的 API，使用体验一致。\n- 人性化的页面元素操作方式，减轻页面分析工作量和编码量。\n- 对常用功能作了整合和优化，更符合实际使用需要。\n- 兼容 selenium 代码，便于项目迁移。\n- 使用 POM 模式封装，便于扩展。\n- 统一的文件下载方法，弥补浏览器下载的不足。\n- 简易的配置方法，摆脱繁琐的浏览器配置。\n\n# 项目结构\n\n***\n\n**结构图**\n\n![](https://gitee.com/g1879/DrissionPage-demos/raw/master/pics/20201118170751.jpg)\n\n**Drission 类**\n\n管理负责与网页通讯的 WebDriver 对象和 Session 对象，相当于驱动器的角色。\n\n**MixPage 类**\n\nMixPage 封装了页面操作的常用功能，它调用 Drission 类中管理的驱动器，对页面进行访问、操作。可在 driver 和 session 模式间切换。切换的时候会自动同步登录状态。\n\n**DriverElement 类**\n\ndriver 模式下的页面元素类，可对元素进行点击、输入文本、修改属性、运行 js 等操作，也可在其下级搜索后代元素。\n\n**SessionElement 类**\n\nsession 模式下的页面元素类，可获取元素属性值，也可在其下级搜索后代元素。\n\n# 简单演示\n\n***\n\n**与 selenium 代码对比**\n\n以下代码实现一模一样的功能，对比两者的代码量：\n\n- 用显性等待方式查找第一个文本包含 some text 的元素\n\n```python\n# 使用 selenium：\nelement = WebDriverWait(driver).until(ec.presence_of_element_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\n\n# 使用 DrissionPage：\nelement = page('some text')\n```\n\n- 跳转到第一个标签页\n\n```python\n# 使用 selenium：\ndriver.switch_to.window(driver.window_handles[0])\n\n# 使用 DrissionPage：\npage.to_tab(0)\n```\n\n- 按文本选择下拉列表\n\n```python\n# 使用 selenium：\nfrom selenium.webdriver.support.select import Select\nselect_element = Select(element)\nselect_element.select_by_visible_text('text')\n\n# 使用 DrissionPage：\nelement.select('text')\n```\n\n- 拖拽一个元素\n\n```python\n# 使用 selenium：\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\n\n# 使用 DrissionPage：\nele1.drag_to(ele2)\n```\n\n- 滚动窗口到底部（保持水平滚动条不变）\n\n```python\n# 使用 selenium：\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft, document.body.scrollHeight);\")\n\n# 使用 DrissionPage：\npage.scroll_to('bottom')\n```\n\n- 设置 headless 模式\n\n```python\n# 使用 selenium：\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"--headless\")\n\n# 使用 DrissionPage：\nset_headless()\n```\n\n- 获取伪元素内容\n\n```python\n# 使用 selenium：\ntext = webdriver.execute_script('return window.getComputedStyle(arguments[0], \"::after\").getPropertyValue(\"content\");', element)\n\n# 使用 DrissionPage：\ntext = element.after\n```\n\n- 获取 shadow-root\n\n```python\n# 使用 selenium：\nshadow_element = webdriver.execute_script('return arguments[0].shadowRoot', element)\n\n# 使用 DrissionPage：\nshadow_element = element.shadow_root\n```\n\n- 用 xpath 直接获取属性或文本节点（返回文本）\n\n```python\n# 使用 selenium：\n相当复杂\n\n# 使用 DrissionPage：\nclass_name = element('xpath://div[@id=\"div_id\"]/@class')\ntext = element('xpath://div[@id=\"div_id\"]/text()[2]')\n```\n\n**与 requests 代码对比**\n\n以下代码实现一模一样的功能，对比两者的代码量：\n\n- 获取元素内容\n\n```python\nurl = 'https://baike.baidu.com/item/python'\n\n# 使用 requests：\nfrom lxml import etree\nheaders = {'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\nresponse = requests.get(url, headers = headers)\nhtml = etree.HTML(response.text)\nelement = html.xpath('//h1')[0]\ntitle = element.text\n\n# 使用 DrissionPage：\npage = MixPage('s')\npage.get(url)\ntitle = page('tag:h1').text\n```\n\nTips: DrissionPage 自带默认 headers\n\n- 下载文件\n\n```python\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\n# 使用 requests：\nr = requests.get(url)\nwith open(f'{save_path}\\\\img.png', 'wb') as fd:\n   for chunk in r.iter_content():\n       fd.write(chunk)\n\n# 使用 DrissionPage：\npage.download(url, save_path, 'img')  # 支持重命名，处理文件名冲突\n```\n\n**模式切换**\n\n用 selenium 登录网站，然后切换到 requests 读取网页。两者会共享登录信息。\n\n```python\npage = MixPage()  # 创建页面对象，默认 driver 模式\npage.get('https://gitee.com/profile')  # 访问个人中心页面（未登录，重定向到登录页面）\n\npage.ele('@id:user_login').input('your_user_name')  # 使用 selenium 输入账号密码登录\npage.ele('@id:user_password').input('your_password\\n')\nsleep(1)\n\npage.change_mode()  # 切换到 session 模式\nprint('登录后title：', page.title, '\\n')  # 登录后 session 模式的输出\n```\n\n输出：\n\n```\n登录后title： 个人资料 - 码云 Gitee.com\n```\n\n**获取并打印元素属性**\n\n```python\n# 接上段代码\nfoot = page.ele('@id:footer-left')  # 用 id 查找元素\nfirst_col = foot.ele('css:>div')  # 使用 css selector 在元素的下级中查找元素（第一个）\nlnk = first_col.ele('text:命令学')  # 使用文本内容查找元素\ntext = lnk.text  # 获取元素文本\nhref = lnk.attr('href')  # 获取元素属性值\n\nprint(text, href, '\\n')\n\n# 简洁模式串联查找\ntext = page('@id:footer-left')('css:>div')('text:命令学').text\nprint(text)\n```\n\n输出：\n\n```\nGit 命令学习 https://oschina.gitee.io/learn-git-branching/\n\nGit 命令学习\n```\n\n**下载文件**\n\n```python\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\npage.download(url, save_path)\n```\n\n# 使用方法\n\n***\n\n请在 Wiki中查看：[点击跳转到wiki](https://gitee.com/g1879/DrissionPage/wikis/%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5?sort_id=3201408)\n\n# 版本历史\n\n***\n\n请在 Wiki中查看：[点击查看版本历史](https://gitee.com/g1879/DrissionPage/wikis/%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2?sort_id=3201403)\n\n# APIs\n\n***\n\n请在 Wiki中查看：[点击查看APIs](https://gitee.com/g1879/DrissionPage/wikis/Drission%20%E7%B1%BB?sort_id=3159323)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": "",
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://gitee.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/1.11.5/",
    "requires_dist": [
      "selenium",
      "lxml",
      "tldextract",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "1.11.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf018aef63a04bf13e4fe624196ff3e8bd628216a4f1f2733bc2c2536da1ac7",
        "md5": "7272b7470cff9188d27cd291b76702e4",
        "sha256": "613ca54a5fd387d55908a2f1c86ebda85c3f2321ebac79b7e3ecea92add8cbfd"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.11.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7272b7470cff9188d27cd291b76702e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 56223,
      "upload_time": "2021-10-29T10:13:01",
      "upload_time_iso_8601": "2021-10-29T10:13:01.155018Z",
      "url": "https://files.pythonhosted.org/packages/ed/f0/18aef63a04bf13e4fe624196ff3e8bd628216a4f1f2733bc2c2536da1ac7/DrissionPage-1.11.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e8049350ddc9202b7d7f0d9057314f1a73a7260a1e61629100efc93975984ed",
        "md5": "6ab41294fc3583ed46f6a1a954252d82",
        "sha256": "6eba19a467fc484b11f9ae09b12e6e786bde18f20da69df7c2b2b0ec98b56ea2"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.11.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6ab41294fc3583ed46f6a1a954252d82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 47755,
      "upload_time": "2021-10-29T10:13:14",
      "upload_time_iso_8601": "2021-10-29T10:13:14.870986Z",
      "url": "https://files.pythonhosted.org/packages/2e/80/49350ddc9202b7d7f0d9057314f1a73a7260a1e61629100efc93975984ed/DrissionPage-1.11.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}