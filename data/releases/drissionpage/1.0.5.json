{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "- 中文README：[点击这里](https://github.com/g1879/DrissionPage/blob/master/README.zh-cn.md)\n- 示例：[点击这里](https://gitee.com/g1879/DrissionPage-demos)\n\n# Introduction\n***\n\nDrissionPage, the combination of driver and session, is a python-based Web automation operation integration tool.\nIt realizes the seamless switching between selenium and requests.\nTherefore, the convenience of selenium and the high efficiency of requests can be balanced.\nIt uses POM mode to encapsulate common methods of page elements, which is very suitable for automatic operation function expansion.\nWhat's even better is that its usage is very concise and user-friendly, with a small amount of code and friendly to novices.  \n\n**Project address：**\n\n- https://github.com/g1879/DrissionPage\n- https://gitee.com/g1879/DrissionPage\n\n**Demos:** [https://gitee.com/g1879/DrissionPage-demos](https://gitee.com/g1879/DrissionPage-demos)\n\n**email：** g1879@qq.com\n\n# Features\n\n***\n\n- Allows seamless switching between selenium and requests, sharing session.\n- Use POM mode to encapsulate common methods for easy expansion.\n- The two modes provide a unified operation method with consistent user experience.\n- Humanized operation method of page elements to reduce the workload of page analysis and coding.\n- Some common functions (such as click) have been optimized to better meet the actual needs.\n- Easy configuration method to get rid of the cumbersome browser configuration.\n\n# Idea\n\n***\n\n## Simple, Easy and Extensible\n\n- DrissionPage takes concise code as the first pursuit, streamlines long statements and completely retains its functions.\n- DrissionPage encapsulates many commonly used functions and is more convenient to use.\n- The core of DrissionPage is a page class, which can directly derive subclass pages to adapt to various scenarios.\n- Simple browser configuration method, get rid of tedious settings.\n\nThe following code implements exactly the same function, comparing the code amounts of the two:\n\n1. Use explicit wait to find all elements whose text contains 'some text'\n\n```python\n# selenium:\nelement = WebDriverWait(driver).until(ec.presence_of_all_elements_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\n# DrissionPage:\nelement = page.ele('some text')\n```\n\n2. Jump to the first tab\n\n```python\n# selenium\ndriver.switch_to.window(driver.window_handles[0])\n# DrissionPage\npage.to_tab(0)\n```\n\n3. Drag an element\n\n```python\n# selenium\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\n# DrissionPage\nele1.drag_to(ele2)\n```\n\n4. Scroll the window to the bottom (keep the horizontal scroll bar unchanged)\n\n```python\n# selenium\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft,document.body.scrollHeight);\")\n# DrissionPage\npage.scroll_to('bottom')\n```\n\n5. Set headless mode\n\n```python\n# selenium\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"--headless\")\n# DrissionPage\nset_headless()\n```\n\n\n\n# Background\n\n***\n\nWhen a novice learns a web crawler, in the face of a website that needs to log in, it is necessary to analyze data packets, JS source code, construct complex requests, and often have to deal with verification codes, JS confusion, signature parameters and other measures, which is difficult to learn. When acquiring data, some data is generated by JavaScript calculation. If you only get the source data, you must also reproduce the calculation process. The experience is not good and the development efficiency is not high.\n\nUsing selenium can avoid these problems to a great extent, but selenium is not efficient. Therefore, what this library has to do is to combine selenium and requests into one, and provide a humanized use method to improve development and operation efficiency.\n\nIn addition to merging the two, this library also encapsulates commonly used functions in units of web pages, which simplifies selenium operations and statements. When used in web page automation operations, it reduces the consideration of details, focuses on function implementation, and is more convenient to use.\n\nThe design concept of this library is to keep everything simple, try to provide a simple and direct method of use, and is more friendly to novices.\n\n# Simple Demo\n\n***\n\nExample: Log in to the website with selenium, then switch to requests to read the web page.\n\n```python\npage = MixPage()  # Create page object, default driver mode\npage.get('https://gitee.com/profile')  # Visit personal center page (redirect to the login page)\n\npage.ele('@id:user_login').input('your_user_name')  # Use selenium to log in\npage.ele('@id:user_password').input('your_password\\n')\n\npage.change_mode()  # Switch to session mode\nprint('Title after login:', page.title, '\\n')  # Output of session mode after login\n```\n\nOutput:\n\n```\nTitle after login: Dashboard - Gitee\n```\n\nExample: Find element and print attributes.\n\n```python\nfoot = page.ele('@id:footer-left')  # Find elements by id\nfirst_col = foot.ele('css:>div')  # Find first div element in the lower level by css selector.\nlnk = first_col.ele('text:Git Branching')  # Find elements by text content\ntext = lnk.text  # Get element text\nhref = lnk.attr('href')  # Get element attribute value\n\nprint(first_col)\nprint(text, href)\n```\n\nOutput:\n\n```\n<SessionElement div class='column'>\nLearn Git Branching https://oschina.gitee.io/learn-git-branching/\n```\n\n# Install\n\n***\n\n```\npip install DrissionPage\n```\nOnly python3.6 and above are supported. Driver mode currently only supports chrome.  \nTo use the driver mode, you must download chrome and ** corresponding version ** of chromedriver. [chromedriver download](https://chromedriver.chromium.org/downloads)  \nCurrently only tested in the Windows environment.\n\n# Instructions\n\n***\n\n## import\n\n```python\nfrom DrissionPage import *\n```\n\n\n\n## Initialization\n\nBefore using selenium, you must configure the path of chrome.exe and chromedriver.exe and ensure that their versions match.\n\nIf you only use session mode, you can skip this section.\n\nThere are three ways to configure the path:\n\n-Write two paths to system variables.\n-Pass in the path manually when using it.\n-Write the path to the ini file of this library (recommended).\n\nIf you choose the third method, please run these lines of code before using the library for the first time, and record these two paths in the ini file.\n\n```python\nfrom DrissionPage.easy_set import set_paths\ndriver_path = 'D:\\\\chrome\\\\chromedriver.exe'  # Your chromedriver.exe path, optional\nchrome_path = 'D:\\\\chrome\\\\chrome.exe'  # Your chrome.exe path, optional\nset_paths(driver_path, chrome_path)\n```\n\nThis method also checks if the chrome and chromedriver versions match, and displays:\n\n```\n版本匹配，可正常使用。\n\nor\n\n出现异常：\nMessage: session not created: Chrome version must be between 70 and 73\n  (Driver info: chromedriver=73.0.3683.68 (47787ec04b6e38e22703e856e101e840b65afe72),platform=Windows NT 10.0.19631 x86_64)\nchromedriver下载网址：https://chromedriver.chromium.org/downloads\n```\n\nAfter the inspection is passed, the driver mode can be used normally.\n\nIn addition to the above two paths, this method can also set the following paths:\n\n```python\ndebugger_address  # Opened browser address, eg. 127.0.0.1:9222\ndownload_path  # Download path\nglobal_tmp_path  # Temporary folder path\nuser_data_path # User data path\ncache_path # Cache path\n```\n\nTips：\n\n-Different projects may require different versions of chrome and chromedriver. You can also save multiple ini files to use as needed.\n-It is recommended to use the green version of chrome, and manually set the path to avoid browser upgrades that do not match the chromedriver version.\n-It is recommended to set debugger_address when debugging a project, and use a manually opened browser to debug, saving time and effort.\n\n\n\n## Create Drission Object \n\nDrission objects are used to manage driver and session objects.Drission objects are used to transmit drives when multiple pages work together, enabling multiple page classes to control the same browser or Session object.  \nIt can be created by directly reading the configuration information of the ini file, or it can be passed in during initialization.\n\n```python\n# Created by default ini file\ndrission = Drission()  \n\n# Created by other ini files\ndrission = Drission(ini_path = 'D:\\\\settings.ini') \n```\n\nTo manually pass in the configuration:\n\n```python\n# Create with incoming configuration information (ignore ini file)\nfrom DrissionPage.config import DriverOptions\n\ndriver_options = DriverOptions()  # Create driver configuration object\ndriver_options.binary_location = 'D:\\\\chrome\\\\chrome.exe'  # chrome.exe path\nsession_options = {'headers': {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)'}}\ndriver_path = 'D:\\\\chrome\\\\chromedriver.exe'  # driver_path path\n\ndrission = Drission(driver_options, session_options, driver_path)  # Create object through incoming configuration\n```\n\n\n\n## Use MixPage objects\n\nThe MixPage page object encapsulates commonly used web page operations and implements the switch between driver and session mode.  \nMixPage must receive a Drission object and use its driver or session. If no one is sent, MixPage will create a Drission itself (Use configurations from the default INI file).  \n\nTips: When multi-page objects work together, remember to manually create Drission objects and transfer them to page objects for use. Otherwise, page objects can create their own Drission objects, rendering the information impossible to transmit.\n\n```python\n# Ways to create MixPage objects\npage = MixPage()  # Automatic creation of Drission objects is recommended only for single page objects\npage = MixPage('s')  # Quickly create in session mode, automatically create a Drission object\n\npage = MixPage(drission)  # Created by passing in a Drission object\npage = MixPage(drission, mode='s', timeout=5)  # session mode, waiting time 5 seconds (default 10 seconds)\n\n# Visit URL\npage.get(url, **kwargs)\npage.post(url, data, **kwargs)  # Only session mode has post method.Call the post method will automatically switch to session mode.\n\n# Switch mode\npage.change_mode()\n\n# Page operation\nprint(page.html)  # Page source code\npage.run_script(js)  # Run js statement\npage.close_other_tabs(num)  # Close other tabs\npage.to_iframe(iframe)  # switch to iframe\npage.screenshot(path)  # Screenshot of the page\npage.scrool_to_see(element)  # Scroll until an element is visible\n# See APIs for details...\n```\n\nTips：Calling a method that belongs only to the driver mode will automatically switch to the driver mode.\n\n\n\n## Find elements\n\nele() returns the first eligible element, eles() returns a list of all eligible elements.  \nYou can use these two functions under the page object or element object to find the subordinate elements.  \n\nNote: The element search timeout is 10 seconds by default, you can also set it as required.\n\n```python\n# Find by attribute\npage.ele('@id:ele_id', timeout = 2)  # Find the element with id ele_id and set the waiting time to 2 seconds\npage.eles('@class')  # Find all elements with ele_class\npage.eles('@class:class_name')  # Find all elements with class equal to ele_class   \n\n# Search by tag name\npage.ele('tag:li')  # Find the first li element  \npage.eles('tag:li')  # Find all li elements  \n\n# Search by tag name and attributes\npage.ele('tag:div@class=div_class')  # Find the first div element whose class is div_class\npage.ele('tag:div@class:ele_class') # Find the div element with ele_class in class\npage.ele('tag:div@class=ele_class') # Find div elements with class equal to ele_class\npage.ele('tag:div@text():search_text') # Find the div element whose text contains search_text\npage.ele('tag:div@text()=search_text') # Find div elements with text equal to search_text\n\n# Find by text\npage.ele('search text')  # Find elements containing incoming text  \npage.eles('text:search text')  # If the text starts with @, tag :, css :, xpath :, text :, add text: in front to avoid conflicts  \npage.eles('text=search text')  # Elements with text equal to search_text \n\n# Find by xpath or css selector\npage.eles('xpath://div[@class=\"ele_class\"]')  \npage.eles('css:div.ele_class')  \n\n# Find by loc\nloc1 = By.ID, 'ele_id'\nloc2 = By.XPATH, '//div[@class=\"ele_class\"]'\npage.ele(loc1)\npage.ele(loc2)\n\n# Find subordinate elements\nelement = page.ele('@id:ele_id')\nelement.ele('@class:class_name')  # Find the first element whose class is ele_class at the lower level of element\nelement.eles('tag:li')  # Find all li elements below ele_id\n\n# Find by location\nelement.parent  # Parent element  \nelementnext  # Next sibling element  \nelement.prev  # Previous brother element  \n\n# Tandem search\npage.ele('@id:ele_id').ele('tag:div').next.ele('some text').eles('tag:a')\n```\n\n\n\n## Element operations\n\n```python\n# Get element information\nelement = page.ele('@id:ele_id')\nelement.html  # Return html inside element\nelement.text  # Returns the text value after removing the html tag in the element\nelement.tag  # Return element tag name\nelement.attrs  # Returns a dictionary of all attributes of the element\nelement.attr('class')  # Returns the element's class attribute\nelement.is_valid  # Driver mode only, used to determine whether the element is still available\n\n# Operating element\nelement.click()  # Click element\nelement.input(text)  # Enter text\nelement.run_script(js)  # Run js\nelement.submit()  # submit Form\nelement.clear()  # Clear element\nelement.is_selected()  # Is selected\nelement.is_enabled()  # it's usable or not\nelement.is_displayed()  # Is it visible\nelement.is_valid()  # Whether it is valid, used to judge the situation where the page jump causes the element to fail\nelement.select(text)  # Select the drop-down list option\nelement.set_attr(attr,value)  # Set element attributes\nelement.size  # Returns the element size\nelement.location  # Returns the element position\n```\n\n\n\n## Chrome shortcut settings\n\nThe configuration of chrome is very cumbersome. In order to simplify the use, this library provides setting methods for common configurations.\n\n### DriverOptions Object\n\nThe DriverOptions object inherits from the Options object of selenium.webdriver.chrome.options, and the following methods are added to it:\n\n```python\nremove_argument(value)  # Delete an argument value\nremove_experimental_option(key)  # Delete an experimental_option setting\nremove_all_extensions()  # Delete all plugins\nsave()  # Save the configuration to the default ini file\nsave('D:\\\\settings.ini')  # Save to other path\nset_argument(arg, value)  # Set argument attribute\nset_headless(on_off)  # Set whether to use interfaceless mode\nset_no_imgs(on_off)  # Set whether to load pictures\nset_no_js(on_off)  # Set whether to disable js\nset_mute(on_off)  # Set whether to mute\nset_user_agent(user_agent)  # Set user agent\nset_proxy(proxy)  # Set proxy address\nset_paths(driver_path, chrome_path, debugger_address, download_path, user_data_path, cache_path)  # Set browser-related paths\n```\n\n### Instructions\n\n```python\ndo = DriverOptions(read_file=False)  # Create chrome configuration object, not read from ini file\ndo.set_headless(False)  # Show browser interface\ndo.set_no_imgs(True)  # Don't load pictures\ndo.set_paths(driver_path='D:\\\\chromedriver.exe', chrome_path='D:\\\\chrome.exe')  # Set paths\ndo.set_headless(False).set_no_imgs(True)  # Support chain operation\n\ndrission = Drission(driver_options=do)  # Create Drission object with configuration object\npage = MixPage(drission)  # Create a MixPage object with a Drission object\n\ndo.save()  # Save the configuration to the default ini file\n```\n\n\n\n## Save configuration\n\nBecause chrome and headers have many configurations, an ini file is set up to save commonly used configurations. You can use the OptionsManager object to get and save the configuration, and use the DriverOptions object to modify the chrome configuration. You can also save multiple ini files and call them according to different projects.\n\nTips：It is recommended to save common configuration files to another path to prevent the configuration from being reset when the library is upgraded.\n\n### ini file\n\nThe ini file has three parts by default: paths, chrome_options, and session_options. The initial contents are as follows.\n\n```ini\n[paths]\n; chromedriver.exe path\nchromedriver_path =\n; Temporary folder path, used to save screenshots, download files, etc.\nglobal_tmp_path =\n\n[chrome_options]\n; The opened browser address and port, such as 127.0.0.1:9222\ndebugger_address =\n; chrome.exe path\nbinary_location =\n; Configuration information\narguments = [\n            ; Hide browser window\n            '--headless',\n            ; Mute\n            '--mute-audio',\n            ; No sandbox\n            '--no-sandbox',\n            ; Google documentation mentions the need to add this attribute to avoid bugs\n            '--disable-gpu',\n            ; ignore errors\n            'ignore-certificate-errors',\n            ; Hidden message bar\n            '--disable-infobars'\n            ]\n; Plugin\nextensions = []\n; Experimental configuration\nexperimental_options = {\n                       'prefs': {\n                       ; Download without pop-up\n                       'profile.default_content_settings.popups': 0,\n                       ; No pop-up window\n                       'profile.default_content_setting_values': {'notifications': 2},\n                       ; Disable PDF plugin\n                       'plugins.plugins_list': [{\"enabled\": False, \"name\": \"Chrome PDF Viewer\"}]\n                       },\n                       ; Set to developer mode, anti-anti-reptile (useless)\n                       'excludeSwitches': [\"enable-automation\"],\n                       'useAutomationExtension': False\n                       }\n\n[session_options]\nheaders = {\n          \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8\",\n          \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Connection\": \"keep-alive\",\n          \"Accept-Charset\": \"utf-8;q=0.7,*;q=0.7\"\n          }\n```\n\n### OptionsManager object\n\nThe OptionsManager object is used to read, set, and save configurations.\n\n```python\nget_value(section, item) -> str  # Get the value of a configuration\nget_option(section) -> dict  # Return all configuration properties in dictionary format\nset_item(section, item, value)  # Set configuration properties\nsave()  # Save configuration to default ini file\nsave('D:\\\\settings.ini')  # Save to other path\n```\n\n### Usage example\n\n```python\nfrom DrissionPage.configs import *\n\noptions_manager = OptionsManager()  # Create OptionsManager object from default ini file\noptions_manager = OptionsManager('D:\\\\settings.ini')  # Create OptionsManager object from other ini files\ndriver_path = options_manager.get_value('paths', 'chromedriver_path')  # Read path information\noptions_manager.save()  # Save to the default ini file\noptions_manager.save('D:\\\\settings.ini')  # Save to other path\n\ndrission = Drission(ini_path = 'D:\\\\settings.ini')  # Use other ini files to create objects\n```\n\n**Note** : If you do not pass in the path when saving, it will be saved to the ini file in the module directory, even if you are not reading the default ini file.\n\n\n\n## easy_set methods\n\n​\tCalling the easy_set method will modify the content of the default ini file.\n\n```python\nset_headless(True)  # Set headless mode\nset_no_imgs(True)  # Set no-PIC mode\nset_no_js(True)  # Disable JavaScript\nset_mute(True)  # Silent mode\nset_user_agent('Mozilla/5.0 (Macintosh; Int......')  # set user agent\nset_proxy('127.0.0.1:8888')  # set proxy\nset_paths(paths)  # See the Initialization section \nset_argument(arg, on_off)  # Set the property. If the property has no value (e.g. 'zh_CN.utf-8'), the value is bool representing the switch. If value is \"\" or False, delete the attribute entry\n```\n\n# POM mode\n\n***\n\nMixPage encapsulates common page operations and can be easily used for expansion.  \n\nExample: Expand a list page reading class.\n\n```python\nimport re\nfrom time import sleep\nfrom DrissionPage import *\n\nclass ListPage(MixPage):\n    \"\"\"This class encapsulates the method of reading the list page, according to the necessary 4 elements, can read the homogeneous list page\"\"\"\n    def __init__(self, drission: Drission, url: str = None, **xpaths):\n        super().__init__(drission)\n        self._url = url\n        self.xpath_cloumn_name = xpaths['cloumn_name']  # [xpath str, re str]\n        self.xpath_next_btn = xpaths['next_btn']\n        self.xpath_rows = xpaths['rows']\n        self.xpath_total_pages = xpaths['total_pages']  # [xpath str, re str]\n        self.total_pages = self.get_total_pages()\n        if url:\n            self.get(url)\n\n    def get_cloumn_name(self) -> str:\n        if self.xpath_cloumn_name[1]:\n            s = self.ele(f'xpath:{self.xpath_cloumn_name[0]}').text\n            r = re.search(self.xpath_cloumn_name[1], s)\n            return r.group(1)\n        else:\n            return self.ele(f'xpath:{self.xpath_cloumn_name[0]}').text\n\n    def get_total_pages(self) -> int:\n        if self.xpath_total_pages[1]:\n            s = self.ele(f'xpath:{self.xpath_total_pages[0]}').text\n            r = re.search(self.xpath_total_pages[1], s)\n            return int(r.group(1))\n        else:\n            return int(self.ele(f'xpath:{self.xpath_total_pages[0]}').text)\n\n    def click_next_btn(self, wait: float = None):\n        self.ele(f'xpath:{self.xpath_next_btn}').click()\n        if wait:\n            sleep(wait)\n\n    def get_current_page_list(self, content_to_fetch: list) -> list:\n        \"\"\"\n        content_to_fetch：[[xpath1,para1],[xpath2,para2]...]\n        output list：[[para1,para2...],[para1,para2...]...]\n        \"\"\"\n        result_list = []\n        rows = self.eles(f'xpath:{self.xpath_rows}')\n        for row in rows:\n            row_result = []\n            for j in content_to_fetch:\n                row_result.append(row.ele(f'xpath:{j[0]}').attr(j[1]))\n            result_list.append(row_result)\n            print(row_result)\n        return result_list\n\n    def get_list(self, content_to_fetch: list, wait: float = None) -> list:\n        current_list = self.get_current_page_list(content_to_fetch)\n        for _ in range(self.total_pages - 1):\n            self.click_next_btn(wait)\n            current_list.extend(self.get_current_page_list(content_to_fetch))\n        return current_list\n```\n\n# Others\n\n***\n\n## DriverPage and SessionPage\n\nIf there is no need to switch modes, only DriverPage or SessionPage can be used as required, the usage is consistent with MixPage.  \n\n```python\nfrom DrissionPage.session_page import SessionPage\nfrom DrissionPage.drission import Drission\n\nsession = Drission().session\npage = SessionPage(session)  # Pass in Session object\npage.get('http://www.baidu.com')\nprint(page.ele('@id:su').text)  # Output：百度一下\n\ndriver = Drission().driver\npage = DriverPage(driver)  # Pass in Driver object\npage.get('http://www.baidu.com')\nprint(page.ele('@id:su').text)  # Output:百度一下\n```\n\n# APIs\n\n***\n\n## Drission class\n\n​\tclass **Drission**(driver_options: Union[dict, Options] = None, session_options: dict = None, ini_path = None, proxy: dict = None)\n\n​\tUsed to manage driver and session objects.\n\n​\tParameter Description:\n\n- driver_options - Chrome configuration parameters, can receive Options object or dictionary\n- session_options - session configuration parameters, receive dictionary\n- ini_path - ini file path, the default is the ini file in the DrissionPage folder\n\n### session\n\n​\tReturns the HTMLSession object, which is created automatically when called.\n\n### driver\n\n​\tObtain the WebDriver object, which is automatically created when it is called and initialized according to the incoming configuration or ini file configuration.\n\n### driver_options\n\n​\tReturn driver configuration in dictionary format.\n\n### session_options\n\n​\tReturn session configuration in dictionary format.\n\n### proxy\n\n​\tReturn proxy configuration in dictionary format.\n\n### cookies_to_session\n\n​\tcookies_to_session(copy_user_agent: bool = False, driver: WebDriver = None, session: Session = None) -> None\n\n​\tCopy cookies from driver to session. By default, self.driver is copied to self.session, and driver and session can also be received for operation.\n\n​\tParameter Description:\n\n- copy_user_agent - Whether to copy user_agent to session\n- driver - WebDriver object, copy cookies\n- session - Session object, receiving cookies\n\n### cookies_to_driver\n\n​\tcookies_to_driver(url: str, driver: WebDriver = None, session: Session = None) -> None\n\n​\tCopy cookies from session to driver. By default, self.session is copied to self.driver, and driver and session can also be received for operation. Need to specify url or domain name.\n\n​\tParameter Description:\n\n- url - cookies domain\n- driver - WebDriver object, receiving cookies\n- session - Session object, copy cookies\n\n### user_agent_to_session\n\n​\tuser_agent_to_session(driver: WebDriver = None, session: Session = None) -> None\n\n​\tCopy the user agent from the driver to the session. By default, self.driver is copied to self.session, and driver and session can also be received for operation.\n\n​\tParameter Description:\n\n- driver - WebDriver object, copy user agent\n- session - Session object, receiving user agent\n\n### close_driver\n\n​\tclose_driver() -> None\n\n​\tClose the browser and set the driver to None.\n\n### close_session\n\n​\tclose_session() -> None\n\n​\tClose the session and set it to None.\n\n### close\n\n​\tclose() -> None\n\n​\tClose the driver and session.\n\n\n\n## MixPage class\n\nclass **MixPage**(drission: Union[Drission, str] = None, mode:str = 'd', timeout: float = 10)\n\nMixPage encapsulates common functions for page operations and can seamlessly switch between driver and session modes. Cookies are automatically synchronized when switching.  \nThe function of obtaining information is common to the two modes, and the function of operating page elements is only available in the d mode. Calling a function unique to a certain mode will automatically switch to that mode.  \nIt inherits from DriverPage and SessionPage classes. These functions are implemented by these two classes. MixPage exists as a scheduling role.\n\nParameter Description:\n\n- drission - Drission objects, if not transmitted will create one. Quickly configure the corresponding mode when passing in's' or'd'\n- mode - Mode, optional 'd' or 's', default is 'd'\n- timeout - Timeout time, driver mode search element time and session mode connection time\n\n### url  \n\n​\tReturns the currently visited URL.\n\n### mode\n\n​\tReturns the current mode ('s' or 'd').\n\n### drission\n\n​\tReturns the currently used Dirssion object.\n\n### driver\n\n​\tReturns the driver object, if not created, it will switch to driver mode when called.\n\n### session\n\n​\tReturns the session object, if not created.\n\n### response\n\n​\tReturn the Response object and switch to session mode when calling.\n\n### cookies\n\n​\tReturns cookies, obtained from the current mode.\n\n### html\n\n​\tReturn the page html text.\n\n### title\n\n​\tReturn to the page title text.\n\n### change_mode\n\n​\tchange_mode(mode: str = None, go: bool = True) -> None\n\n​\tSwitch mode, you can specify the target mode, if the target mode is consistent with the current mode, then directly return.\n\n​\tParameter Description:\n\n- mode - Specify the target mode, 'd' or 's'.\n- go - Whether to jump to the current url after switching modes\n\n### get\n\n​\tget(url: str, go_anyway=False, **kwargs) -> Union[bool, None]\n\n​\tJump to a url, sync cookies before jumping, and return whether the target url is available after jumping.\n\n​\tParameter Description:\n\n- url - Target url\n- go_anyway - Whether to force a jump. If the target url is the same as the current url, the default is not to jump.\n- kwargs - Used to access parameters when in session mode.\n\n### ele\n\n​\tele(loc_or_ele: Union[tuple, str, DriverElement, SessionElement], mode: str = None, timeout: float = None, show_errmsg: bool = False) -> Union[DriverElement, SessionElement]\n\n​\tGet elements according to query parameters and return elements or element lists.  \n​\tIf the query parameter is a string, you can select the '@property name:', 'tag:', 'text:', 'css:', 'xpath:' method. When there is no control mode, it is searched by text mode by default.  \n​\tIf it is loc, query directly according to the content.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters, if an element object is passed in, return directly\n- mode - Find one or more, pass in 'single' or 'all'\n- timeout - Search element timeout time, valid in driver mode\n- show_errmsg - Whether to throw and display when an exception occurs\n\n​\tExamples:\n\n- page.ele('@id:ele_id') - Find elements by attributes\n- page.ele('tag:div') - Find elements by tag name\n- page.ele('text:some text') - Find elements by text\n- page.ele('some text') - Find elements by text\n- page.ele('css:>div') - Find elements by css selector\n- page.ele('xpath://div') - Find elements by xpath\n- page.ele((By.ID, 'ele_id')) - Find elements by loc\n\n### eles\n\n​\teles(loc_or_str: Union[tuple, str], timeout: float = None, show_errmsg: bool = False) -> List[DriverElement]\n\n​\tObtain a list of elements that meet the criteria based on query parameters. The query parameter usage method is the same as the ele method.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters\n- timeout - Search element timeout time, valid in driver mode\n- show_errmsg - Whether to throw and display when an exception occurs\n\n### cookies_to_session\n\n​\tcookies_to_session(copy_user_agent: bool = False) -> None\n\n​\tManually copy cookies from driver to session.\n\n​\tParameter Description:\n\n- copy_user_agent - Whether to also copy user agent\n\n### cookies_to_driver\n\n​\tcookies_to_driver(url=None) -> None\n\n​\tManually copy cookies from session to driver.\n\n​\tParameter Description:\n\n- url - cookie domain or url\n\n### post\n\n​\tpost(url: str, params: dict = None, data: dict = None, go_anyway: bool = False, **kwargs) -> Union[bool, None]\n\n​\tJump by post, and switch to session mode automatically when calling.\n\n​\tParameter Description:\n\n- url - Target url\n- parame - url parameter\n- data - Submitted data\n- go_anyway - Whether to force a jump. If the target url is the same as the current url, the default is not to jump.\n- kwargs - Access parameters such as headers\n\n### download\n\n​\tdownload(file_url: str, goal_path: str = None, rename: str = None, file_exists: str = 'rename', show_msg: bool = False, **kwargs) -> tuple\n\n​\tDownload a file, return success and download information string. Changing the method will automatically avoid renaming the existing file in the target path.\n\n​\tParameter Description:\n\n- file_url - File URL\n- goal_path - Storage path, the default is the temporary folder specified in the ini file\n- rename - Rename the file without changing the extension\n- file_exists - If there is a file with the same name, you can choose 'rename', 'overwrite', 'skip' to process\n- show_msg - Show download massage or not.\n- kwargs - Connection parameters for requests\n\n\n\nThe following methods only take effect in driver mode, and will automatically switch to driver mode when called\n\n***\n\n### check_page\n\n​\tcheck_page() -> bool\n\n​\tAfter the subclass is derived, it is used to check whether the domain name meets expectations, and the function is implemented by the subclass.\n\n### run_script\n\n​\trun_script(script: str) -> Any\n\n​\tExecute JavaScript code.\n\n​\tParameter Description:\n\n- script - JavaScript code text\n\n### get_tabs_sum\n\n​\tget_tabs_sum() -> int\n\n​\tReturns the number of browser tabs.\n\n### get_tab_num\n\n​\tget_tab_num() -> int\n\n​\tReturns the serial number of the current tab.\n\n### close_current_tab\n\n​\tclose_current_tab() -> None\n\n​\tClose the current tab.\n\n### close_other_tabs\n\n​\tclose_other_tabs(tab_index: int = None) -> None\n\n​\tClose the tab page except the serial number.\n\n​\tParameter Description:\n\n- index - The serial number of the reserved tab, start from 0\n\n### to_tab\n\n​\tto_tab(index: int = 0) -> None\n\n​\tJump to a tab page with a serial number.\n\nParameter Description:\n\n- index - The serial number of the target tab, start from 0\n\n### to_iframe\n\n​\tto_iframe(self, loc_or_ele: Union[int, str, tuple, WebElement, DriverElement] = 'main') -> None\n\n​\tJump to iframe, compatible with selenium native parameters.\n\n​\tParameter Description:\n\n- loc_or_ele - To search for iframe element conditions, you can receive iframe serial number (starting at 0), id or name, control string, loc parameter, WebElement object, DriverElement object, pass 'main' to jump to the top level, pass 'parent' to jump to parent level.\n\n​\tExamples:\n- to_iframe('@id:iframe_id')\n- to_iframe(iframe_element)\n- to_iframe(0)\n- to_iframe('iframe_name')\n\n### scroll_to_see\n\n​\tscroll_to_see(loc_or_ele: Union[str, tuple, WebElement, DriverElement]) -> None\n\n​\tScroll until the element is visible.\n\n​\tParameter Description:\n\n- loc_or_ele - The search condition of the iframe element is the same as the search condition of the ele () method.\n\n### scroll_to\n\n​\tscroll_to(mode: str = 'bottom', pixel: int = 300) -> None\n\n​\tScroll the page and decide how to scroll according to the parameters.\n\n​\tParameter Description:\n\n- mode - Scrolling direction, top, bottom, rightmost, leftmost, up, down, left, right\n- pixel - Scrolling pixels\n\n### refresh\n\n​\trefresh() -> None\n\n​\tRefresh page.\n\n### back\n\n​\tback() -> None\n\n​\tThe page back.\n\n### set_window_size\n\n​\tset_window_size(x: int = None, y: int = None) -> None\n\n​\tSet the window size and maximize it by default.\n\n​\tParameter Description:\n\n- x - Target width\n- y - Target height\n\n### screenshot\n\n​\tscreenshot(path: str, filename: str = None) -> str\n\n​\tTake a screenshot of the web page and return the path of the screenshot file.\n\n​\tParameter Description:\n\n- path - Screenshot save path, default is the temporary folder specified in the ini file\n- filename - Screenshot file name, default is page title as file name\n\n### process_alert\n\n​\tprocess_alert(mode: str = 'ok', text: str = None) -> Union[str, None]\n\n​\tProcessing alert, confirm and prompt box.\n\n​\tParameter Description:\n\n- mode - 'ok' or 'cancel', if enter another value, the button will not be pressed but the text value will still be returned\n- text - Text can be entered when processing prompt box\n\n### chrome_downloading\n\n​\tchrome_downloading(download_path: str = None) -> list\n\n​\tCheck whether the browser is downloaded.\n\n​\tParameter Description:\n\n- download_path - Download path, the default is the download path in chrome options configuration\n\n### close_driver\n\n​\tclose_driver() -> None\n\n​\tClose the driver and browser, and switch to s mode.\n\n### close_session\n\n​\tclose_session() -> None\n\n​\tClose the session and switch to d mode.\n\n## DriverElement class\n\nclass DriverElement(ele: WebElement, timeout: float = 10)\n\nThe element object of the driver mode wraps a WebElement object and encapsulates common functions.\n\nParameter Description:\n\n- ele - WebElement object\n- timeout - Search element time-out time (can also be set separately each time element search)\n\n### inner_ele\n\n​\tThe wrapped WebElement object.\n\n### driver\n\n​\tWebDriver object of the element.\n\n### attrs\n\n​\tReturn all attributes and values of the elements in a dictionary.\n\n### text\n\n​\tReturns the text inside the element.\n\n### html\n\n​\tReturns the html text in the element.\n\n### tag\n\n​\tReturns the element label name text.\n\n### parent\n\n​\tReturns the parent element object.\n\n### next\n\n​\tReturns the next sibling element object.\n\n### prev\n\n​\tReturns the last sibling element object.\n\n### parents\n\n​\tparents(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturns the Nth-level parent element object.\n\n### nexts\n\n​\tnexts(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturns the next N sibling element objects.\n\n### prevs\n\n​\tprevs(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturn the first N sibling element objects.\n\n### size\n\n​\tReturns the element size as a dictionary.\n\n### location\n\n​\tPut the element coordinates back in a dictionary.\n\n### ele\n\n​\tele(loc_or_str: Union[tuple, str], mode: str = None, show_errmsg: bool = False, timeout: float = None) -> Union[DriverElement, List[DriverElement], None]\n\n​\tGet elements based on query parameters.  \n​\tIf the query parameter is a string, you can select the '@property name:', 'tag:', 'text:', 'css:', and 'xpath:' methods. When there is no control mode, it is searched by text mode by default.  \n​\tIf it is loc, query directly according to the content.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters\n- mode - Find one or more, pass in 'single' or 'all'\n- show_errmsg - Whether to throw and display when an exception occurs\n- timeout - Find Element Timeout\n\n​\tExamples:：\n\n- element.ele('@id:ele_id') - Find elements by attributes\n- element.ele('tag:div') - Find elements by tag name\n- element.ele('text:some text') - Find elements by text\n- element.ele('some text') - Find elements by text\n- element.ele('css:>div') - Find elements by css selector\n- element.ele('xpath://div') - Find elements by xpath\n- element.ele((By.ID, 'ele_id')) - Find elements by loc\n\n### eles\n\n​\teles(loc_or_str: Union[tuple, str], show_errmsg: bool = False, timeout: float = None) ->  List[DriverElement]\n\n​\tObtain a list of elements that meet the criteria based on query parameters. The query parameter usage method is the same as the ele method.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters\n- show_errmsg - Whether to throw and display when an exception occurs\n- timeout - Find Element Timeout\n\n### attr\n\n​\tattr(attr: str) -> str\n\n​\tGet the value of an attribute of an element.\n\n​\tParameter Description:\n\n- attr - Attribute name\n\n### click\n\n​\tclick(by_js=None) -> bool\n\n​\tClick on the element. If it is unsuccessful, click on js. You can specify click on js or not.\n\n​\tParameter Description:\n\n- by_js - Whether to click with js\n\n### input\n\n​\tinput(value, clear: bool = True) -> bool\n\n​\tEnter text.\n\n​\tParameter Description:\n\n- value - Text value\n- clear - Whether to clear the text box before entering\n\n### run_script\n\n​\trun_script(script: str) -> Any\n\n​\tRun JavaScript on the element.\n\n​\tParameter Description:\n\n- script - JavaScript text\n\n### submit\n\n​\tsubmit() -> None\n\n​\tSubmit form.\n\n### clear\n\n​\tclear() -> None\n\n​\tClear the text box.\n\n### is_selected\n\n​\tis_selected() -> bool\n\n​\tWhether the element is selected.\n\n### is_enabled\n\n​\tis_enabled() -> bool\n\n​\tWhether the element is available on the page.\n\n### is_displayed\n\n​\tis_displayed() -> bool\n\n​\tWhether the element is visible.\n\n### is_valid\n\n​\tis_valid() -> bool\n\n​\tWhether the element is valid. This method is used to determine the situation where the page jump element cannot be used\n\n### screenshot\n\n​\tscreenshot(path: str, filename: str = None) -> str\n\n​\tTake a screenshot of the web page and return the path of the screenshot file.\n\n​\tParameter Description:\n\n- path - Screenshot save path, default is the temporary folder specified in the ini file\n- filename - Screenshot file name, default is page title as file name\n\n### select\n\n​\tselect(text: str) -> bool\n\n​\tChoose from the drop-down list.\n\n​\tParameter Description:\n\n- text - Option text\n\n### set_attr\n\n​\tset_attr(attr: str, value: str) -> bool\n\n​\tSet element attributes.\n\n​\tParameter Description:\n\n- attr - parameter name\n- value - Parameter value\n\n### drag\n\n​\tdrag(x: int, y: int, speed: int = 40, shake: bool = True) -> bool\n\n​\tDrag the current element a certain distance, and return whether the drag is successful.\n\n​\tParameter Description:\n\n- x - Drag distance in x direction\n- y - Drag distance in y direction\n- speed - Drag speed\n- shake - Random jitter\n\n### drag_to\n\n​\tdrag_to(ele_or_loc: Union[tuple, WebElement, DrissionElement], speed: int = 40, shake: bool = True) -> bool:\n\n​\tDrag the current element, the target is another element or coordinate tuple, and return whether the drag is successful.\n\n​\tParameter Description:\n\n- ele_or_loc - Another element or relative current position. The coordinates are the coordinates of the midpoint of the element.\n- speed - Drag speed\n- shake - Random jitter\n\n### hover\n\n​\thover()\n\n​\tHover over the element.\n\n\n\n## SessionElement class\n\nclass SessionElement(ele: Element)\n\nThe element object of session mode wraps an Element object and encapsulates common functions.\n\nParameter Description:\n\n- ele - Element object of requests_html library\n\n### inner_ele\n\n​\tThe wrapped Element object.\n\n### attrs\n\n​\tReturns the names and values of all attributes of the element in dictionary format.\n\n### text\n\n​\tReturns the text inside the element.\n\n### html\n\n​\tReturns the html text in the element.\n\n### tag\n\n​\tReturns the element label name text.\n\n### parent\n\n​\tReturns the parent element object.\n\n### next\n\n​\tReturns the next sibling element object.\n\n### prev \n\n​\tReturns the last sibling element object.\n\n### parents\n\n​\tparents(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturns the Nth-level parent element object.\n\n### nexts\n\n​\tnexts(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturns the next N sibling element objects.\n\n### prevs\n\n​\tprevs(num: int = 1) -> Union[DriverElement, None]\n\n​\tReturn the first N sibling element objects.\n\n### ele\n\n​\tele(loc_or_str: Union[tuple, str], mode: str = None, show_errmsg: bool = False) -> Union[SessionElement, List[SessionElement], None]\n\n​\tGet elements based on query parameters.  \n​\tIf the query parameter is a string, you can select the '@property name:', 'tag:', 'text:', 'css:', and 'xpath:' methods. When there is no control mode, it is searched by text mode by default.  \n​\tIf it is loc, query directly according to the content.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters\n\n- mode - Find one or more, pass in 'single' or 'all'\n\n- show_errmsg - Whether to throw and display when an exception occurs\n\n​\tExamples:\n\n- element.ele('@id:ele_id') - Find elements by attributes\n- element.ele('tag:div') - Find elements by tag name\n- element.ele('text:some text') - Find elements by text\n- element.ele('some text') - Find elements by text\n- element.ele('css:>div') - Find elements by css selector\n- element.ele('xpath://div') - Find elements according to xpath\n- element.ele((By.ID, 'ele_id')) - Find elements according to loc\n\n### eles\n\n​\teles(loc_or_str: Union[tuple, str], show_errmsg: bool = False) ->  List[SessionElement]\n\n​\tObtain a list of elements that meet the criteria based on query parameters. The query parameter usage method is the same as the ele method.\n\n​\tParameter Description:\n\n- loc_or_str - Query condition parameters\n- show_errmsg - Whether to throw and display when an exception occurs\n\n### attr\n\n​\tattr(attr: str) -> str\n\n​\tGet the value of an attribute of an element.\n\n​\tParameter Description:\n\n- attr - Attribute name\n\n\n\n## OptionsManager class\n\n​\tclass OptionsManager(path: str = None)\n\n​\tThe class that manages the content of the configuration file.\n\n​\tParameter Description:\n\n- path - Ini file path, if not imported, the configs.ini file in the current folder is read by default\n\n### get_value\n\n​\tget_value(section: str, item: str) -> Any\n\n​\tGet the configured value.\n\n​\tParameter Description:\n\n- section - Paragraph name\n- item - Configuration item name\n\n### get_option\n\n​\tget_option(section: str) -> dict\n\n​\tReturn configuration information for the entire paragraph in dictionary format.\n\n​\tParameter Description:\n\n- section - Paragraph name\n\n### set_item\n\n​\tset_item(section: str, item: str, value: str) -> OptionsManager\n\n​\tSet configuration values.\n\n​\tParameter Description:\n\n- section - Paragraph name\n- item - Configuration item name\n- value - Content of value\n\n### save\n\n​\tsave(path: str = None) -> OptionsManager\n\n​\tSave the settings to a file.\n\n​\tParameter Description:\n\n- path - The path of the ini file, which is saved to the module folder by default\n\n\n\n## DriverOptions class\n\n​\tclass DriverOptions(read_file=True)\n\n​\tThe chrome browser configuration class, inherited from the Options class of selenium.webdriver.chrome.options, adds methods to delete configuration and save to file.\n\n​\tParameter Description:\n\n- read_file - Boolean, specifies whether to read configuration information from the ini file when creating\n\n### driver_path\n\n​\tPath of chromedriver.exe.\n\n### chrome_path\n\n​\tPath of chrome.exe.\n\n### remove_argument\n\n​\tremove_argument(value: str) -> DriverOptions\n\n​\tRemove a setting.\n\n​\tParameter Description:\n\n- value - The attribute value to be removed\n\n### remove_experimental_option\n\n​\tremove_experimental_option(key: str) -> DriverOptions\n\n​\tRemove an experiment setting and delete the incoming key value.\n\n​\tParameter Description:\n\n- key - The key value of the experiment to be removed\n\n### remove_argument\n\n​\tremove_argument() -> DriverOptions\n\n​\tRemove all plug-ins, because the plug-in is stored in the entire file, it is difficult to remove one of them, so if you need to set, remove all and reset.\n\n### save\n\n​\tsave(path: str = None) -> DriverOptions\n\n​\tSave the settings to a file.\n\n​\tParameter Description:\n\n- path - The path of the ini file, which is saved to the module folder by default\n\n### set_argument\n\n​\tset_argument(arg: str, value: Union[bool, str]) -> DriverOptions\n\n​\t Set the chrome attribute, the attribute with no value can be set to switch, the attribute with the value can set the value of the attribute.\n\n​\tParameter description:\n\n- arg - attribute name\n- value - the attribute value, the attribute with value is passed in the value, the attribute without value is passed in bool\n\n### set_headless\n\n​\tset_headless(on_off: bool = True) -> DriverOptions\n\n​\tTurn on or off the interfaceless mode.\n\n​\tParameter Description:\n\n​\ton_off - open or close, bool\n\n### set_no_imgs\n\n​\tset_no_imgs(on_off: bool = True) -> DriverOptions\n\n​\tWhether to load pictures.\n\n​\tParameter Description:\n\n​\ton_off - open or close, bool\n\n### set_no_js\n\n​\tset_no_js(on_off: bool = True) -> DriverOptions\n\n​\tWhether to disable js.\n\n​\tParameter Description:\n\n​\ton_off - open or close, bool\n\n### set_mute\n\n​\tset_mute(on_off: bool = True) -> DriverOptions\n\n​\tWhether to mute.\n\n​\tParameter Description:\n\n​\ton_off - open or close, bool\n\n### set_user_agent\n\n​\tset_user_agent(user_agent: str) -> DriverOptions\n\n​\tSet the browser user agent.\n\n​\tParameter Description:\n\n- user_agent - user agent string\n\n### set_proxy\n\n​\tset_proxy(proxy: str) -> DriverOptions\n\n​\tSet up a proxy.\n\n​\tParameter Description:\n\n- proxy - proxy address\n\n### set_paths\n\n​\tset_paths(driver_path: str = None, chrome_path: str = None, debugger_address: str = None, download_path: str = None, user_data_path: str = None, cache_path: str = None) -> DriverOptions\n\n​\tSet browser-related paths.\n\n​\tParameter Description:\n\n- driver_path - path of chromedriver.exe\n- chrome_path - path of chrome.exe\n- debugger_address - debug browser address, for example: 127.0.0.1:9222\n- download_path - download file path\n- user_data_path - user data path\n- cache_path - cache path\n\n\n\n## easy_set methods\n\n  The configuration of chrome is too difficult to remember, so the commonly used configuration is written as a simple method, and the call will modify the relevant content of the ini file.\n\n  ### set_paths\n\n  ​\tset_paths(driver_path: str = None, chrome_path: str = None, debugger_address: str = None, global_tmp_path: str = None, download_path: str = None, user_data_path: str = None, cache_path: str = None, check_version: bool = True) -> None\n\n  ​\tConvenient way to set the path, save the incoming path to the default ini file, and check whether the chrome and chromedriver versions match.\n\n  ​\tParameter Description:\n\n  - driver_path - the path of chromedriver.exe\n  - chrome_path - the path of chrome.exe\n  - debugger_address - Debug browser address, eg. 127.0.0.1:9222\n  - download_path - File download path\n  - global_tmp_path - Temporary folder path\n  - user_data_path - User data path\n  - cache_path - Cache path\n  - check_version - Whether to check whether chromedriver and chrome match\n\n  ### set_argument\n\n  \tset_argument(arg: str, value: Union[bool, str]) -> None\n\n  \tSet the properties. If the attribute has no value (such as' zh_CN.utf-8 '), the value is passed into the bool to indicate the switch; Otherwise, value passes in STR, and when value is \"\" or False, the attribute entry is deleted.\n\n  ​\tParameter Description:\n\n  - arg - Attribute name\n  - value - Attribute value, pass in a value if it has a value, pass in a bool if it doesn't\n\n  ### set_headless\n\n  ​\tset_headless(on_off: bool) -> None\n\n  ​\tTurn headless mode on or off.\n\n  ​\tParameter Description:\n\n  - on_off - Whether to enable headless mode\n\n  ### set_no_imgs\n\n  ​\tset_no_imgs(on_off: bool) -> None\n\n  ​\tTurn the picture display on or off.\n\n  ​\tParameter Description:\n\n  - on_off - Whether to enable no-picture mode\n\n  ### set_no_js\n\n  ​\tset_no_js(on_off: bool) -> None\n\n  ​\tTurn JS mode on or off.\n\n  ​\tParameter Description:\n\n  - on_off - Whether to enable or disable JS mode\n\n  ### set_mute\n\n  ​\tset_mute(on_off: bool) -> None\n\n  ​\tTurn silent mode on or off.\n\n  ​\tParameter Description:\n\n  - on_off - Whether to turn on silent mode\n\n  ### set_user_agent\n\n  ​\tset_user_agent(user_agent: str) -> None:\n\n  ​\tSet user_agent.\n\n  ​\tParameter Description:\n\n  - user_agent - user_agent value\n\n  ### set_proxy\n\n  ​\tset_proxy(proxy: str) -> None\n\n  ​\tSet up the proxy.\n\n  ​\tParameter Description:\n\n  - proxy - Proxy value\n\n  ### check_driver_version\n\n  ​\tcheck_driver_version(driver_path: str = None, chrome_path: str = None) -> bool\n\n  ​\tCheck if the chrome and chromedriver versions match.\n\n  ​\tParameter Description:\n\n  - driver_path - the path of chromedriver.exe\n  - chrome_path - the path of chrome.exe\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": "",
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://github.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/1.0.5/",
    "requires_dist": [
      "selenium",
      "requests-html",
      "tldextract",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fc0d0ccd62227d7827cf31c62c0c81f5cd5d949078e05899efee9df53fe9e96",
        "md5": "ea0c22b6d6d0b367e84d69baac1e815a",
        "sha256": "54d2ed541d6f4c2c0d7697e8468cbaa5bb9dce81c0340968880898858a05be0a"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea0c22b6d6d0b367e84d69baac1e815a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 43045,
      "upload_time": "2020-08-05T09:36:31",
      "upload_time_iso_8601": "2020-08-05T09:36:31.200914Z",
      "url": "https://files.pythonhosted.org/packages/5f/c0/d0ccd62227d7827cf31c62c0c81f5cd5d949078e05899efee9df53fe9e96/DrissionPage-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57247226be45fb166913f14a539f7026b9f57d1e4483e959c3584e00ca6b31b5",
        "md5": "9a3c375dffc01251da4e998f99323646",
        "sha256": "41da3a1429cd25bb6afa0f8a6dcc6159609a63ff185237c38f2eb0da802f3267"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "9a3c375dffc01251da4e998f99323646",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 62582,
      "upload_time": "2020-08-05T09:36:33",
      "upload_time_iso_8601": "2020-08-05T09:36:33.366275Z",
      "url": "https://files.pythonhosted.org/packages/57/24/7226be45fb166913f14a539f7026b9f57d1e4483e959c3584e00ca6b31b5/DrissionPage-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}