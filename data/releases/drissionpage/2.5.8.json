{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# ✨️简洁！易用 ！方便！✨️\n\nDrissionPage，即 driver 和 session 组合而成的 page。  \n是个基于 python 的 Web 自动化操作集成工具。  \n它用 POM 模式封装了页面和元素常用的方法，  \n自带一套简洁直观优雅的元素定位语法，  \n实现了 selenium 和 requests 之间的无缝切换，  \n可兼顾 selenium 的便利性和 requests 的高效率，  \n更棒的是，它的使用方式非常简洁和人性化，代码量少，对新手友好。\n\n点击打开：📒[使用文档](http://g1879.gitee.io/drissionpage)\n\n**交流QQ群：**  897838127\n\n**联系邮箱：**  g1879@qq.com\n\n## 📕 背景\n\n用 requests 做数据采集面对要登录的网站时，要分析数据包、JS 源码，构造复杂的请求，往往还要应付验证码、JS 混淆、签名参数等反爬手段，门槛较高。若数据是由 JS 计算生成的，还须重现计算过程，体验不好，开发效率不高。  \n使用 selenium，可以很大程度上绕过这些坑，但 selenium 效率不高。因此，这个库将 selenium 和 requests 合而为一，不同须要时切换相应模式，并提供一种人性化的使用方法，提高开发和运行效率。  \n除了合并两者，本库还以网页为单位封装了常用功能，简化了 selenium 的操作和语句，在用于网页自动化操作时，减少考虑细节，专注功能实现，使用更方便。  \n一切从简，尽量提供简单直接的使用方法，对新手更友好。\n\n# 💡 特性和亮点\n\n作者踩过无数坑，总结出的经验全写到这个库里了。内置了 N 多实用功能，对常用功能作了整合和优化。\n\n## 🎉 特性\n\n- 代码高度集成，以简洁的代码为第一追求。\n- 页面对象可在 selenium 和 requests 模式间任意切换，保留登录状态。\n- 极简单但强大的元素定位语法，支持链式操作，代码极其简洁。\n- 两种模式提供一致的 API，使用体验一致。\n- 人性化设计，集成众多实用功能，大大降低开发工作量。\n\n## 🎇 亮点功能\n\n- 每次运行程序可以反复使用已经打开的浏览器。如手动设置网页到某个状态，再用程序接管，或手动处理登录，再用程序爬内容。无须每次运行从头启动浏览器，超级方便。\n- 使用 ini 文件保存常用配置，自动调用，也提供便捷的设置 API，远离繁杂的配置项。\n- 极致简明的定位语法，支持直接按文本定位元素，支持直接获取前后兄弟元素和父元素等。\n- 强大的下载工具，操作浏览器时也能享受快捷可靠的下载功能。\n- 下载工具支持多种方式处理文件名冲突、自动创建目标路径、断链重试等。\n- 访问网址带自动重试功能，可设置间隔和超时时间。\n- 访问网页能自动识别编码，无须手动设置。\n- 链接参数默认自动生成`Host`和`Referer`属性。\n- 可随时直接隐藏或显示浏览器进程窗口，非 headless 或最小化。\n- 可自动下载合适版本的 chromedriver，免去麻烦的配置。\n- d 模式查找元素内置等待，可任意设置全局等待时间或单次查找等待时间。\n- 点击元素集成 js 点击方式，一个参数即可切换点击方式。\n- 点击支持失败重试，可用于保证点击成功、判读网页遮罩层是否消失等。\n- 输入文本能自动判断是否成功并重试，避免某些情况下输入或清空失效的情况。\n- d 模式下支持全功能的 xpath，可直接获取元素的某个属性，selenium 原生无此功能。\n- 支持直接获取`shadow-root`，和普通元素一样操作其下的元素。\n- 支持直接获取`after`和`before`伪元素的内容。\n- 可以在元素下直接使用 > 以 css selector 方式获取当前元素直接子元素。原生不支持这种写法。\n- 可简单地使用 lxml 来解析 d 模式的页面或元素，爬取复杂页面数据时速度大幅提高。\n- 输出的数据均已转码及处理基本排版，减少重复劳动。\n- 可方便地与 selenium 或 requests 原生代码对接，便于项目迁移。\n- 使用 POM 模式封装，可直接用于测试，便于扩展。\n- d 模式配置可同时兼容`debugger_address`和其它参数，原生不能兼容。\n- 还有很多这里不一一列举…………\n\n# 🍀 简单演示\n\n☘️ **与 selenium 代码对比**\n\n以下代码实现一模一样的功能，对比两者的代码量：\n\n🌿 用显性等待方式定位第一个文本包含`some text`的元素\n\n```python\n# 使用 selenium：\nelement = WebDriverWait(driver).until(ec.presence_of_element_located((By.XPATH, '//*[contains(text(), \"some text\")]')))\n\n# 使用 DrissionPage：\nelement = page('some text')\n```\n\n🌿 跳转到第一个标签页\n\n```python\n# 使用 selenium：\ndriver.switch_to.window(driver.window_handles[0])\n\n# 使用 DrissionPage：\npage.to_tab(0)\n```\n\n🌿 按文本选择下拉列表\n\n```python\n# 使用 selenium：\nfrom selenium.webdriver.support.select import Select\n\nselect_element = Select(element)\nselect_element.select_by_visible_text('text')\n\n# 使用 DrissionPage：\nelement.select('text')\n```\n\n🌿 拖拽一个元素\n\n```python\n# 使用 selenium：\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\n\n# 使用 DrissionPage：\nele1.drag_to(ele2)\n```\n\n🌿 滚动窗口到底部（保持水平滚动条不变）\n\n```python\n# 使用 selenium：\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft, document.body.scrollHeight);\")\n\n# 使用 DrissionPage：\npage.scroll.to_bottom()\n```\n\n🌿 设置 headless 模式\n\n```python\n# 使用 selenium：\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"--headless\")\n\n# 使用 DrissionPage：\nset_headless()\n```\n\n🌿 获取伪元素内容\n\n```python\n# 使用 selenium：\ntext = webdriver.execute_script('return window.getComputedStyle(arguments[0], \"::after\").getPropertyValue(\"content\");',\n                                element)\n\n# 使用 DrissionPage：\ntext = element.pseudo_after\n```\n\n🌿 shadow-root 操作\n\nselenium 新增了`ShadowRoot`，但功能实在是太少。\n\n```python\n# 使用 selenium：\nshadow_element = webdriver.execute_script('return arguments[0].shadowRoot', element)\n\n# 使用 DrissionPage：\nshadow_element = element.sr\n\n# 在 shadow_root 下可继续执行查找，获取普通元素\nele = shadow_element.ele('tag:div')\nele.click()\n```\n\n🌿 用 xpath 直接获取属性或文本节点（返回文本）\n\n```python\n# 使用 selenium：\n相当复杂\n\n# 使用 DrissionPage：\nclass_name = element('xpath://div[@id=\"div_id\"]/@class')\ntext = element('xpath://div[@id=\"div_id\"]/text()[2]')\n```\n\n🌿 随时让浏览器窗口消失和显示\n\n```python\n# selenium 无此功能\n\n# 使用 DrissionPage\npage.hide_browser()  # 让浏览器窗口消失\npage.show_browser()  # 重新显示浏览器窗口\n```\n\n注：本功能只支持 Windows，且须设置了`local_port`或`debugger_address`参数时才能生效。\n\n☘️ **与 requests 代码对比**\n\n以下代码实现一模一样的功能，对比两者的代码量：\n\n🌿 获取元素内容\n\n```python\nurl = 'https://baike.baidu.com/item/python'\n\n# 使用 requests：\nfrom lxml import etree\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\nresponse = requests.get(url, headers=headers)\nhtml = etree.HTML(response.text)\nelement = html.xpath('//h1')[0]\ntitle = element.text\n\n# 使用 DrissionPage：\npage = MixPage('s')\npage.get(url)\ntitle = page('tag:h1').text\n```\n\nTips: DrissionPage 自带默认`headers`\n\n🌿 下载文件\n\n```python\nurl = 'https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\n# 使用 requests：\nr = requests.get(url)\nwith open(f'{save_path}\\\\img.png', 'wb') as fd:\n   for chunk in r.iter_content():\n       fd.write(chunk)\n        \n# 使用 DrissionPage：\npage.download(url, save_path, 'img')  # 支持重命名，处理文件名冲突，自动创建目标文件夹\n```\n\n☘️ **模式切换**\n\n用 selenium 登录网站，然后切换到 requests 读取网页。两者会共享登录信息。\n\n```python\npage = MixPage()  # 创建页面对象，默认 driver 模式\npage.get('https://gitee.com/profile')  # 访问个人中心页面（未登录，重定向到登录页面）\n\npage.ele('@id:user_login').input('your_user_name')  # 使用 selenium 输入账号密码登录\npage.ele('@id:user_password').input('your_password\\n')\nsleep(1)\n\npage.change_mode()  # 切换到 session 模式\nprint('登录后title：', page.title, '\\n')  # 登录后 session 模式的输出\n```\n\n输出：\n\n```\n登录后title： 个人资料 - 码云 Gitee.com\n```\n\n**获取并显示元素属性**\n\n```python\n# 接上段代码\nfoot = page.ele('@id:footer-left')  # 用 id 查找元素\nfirst_col = foot.ele('css:>div')  # 使用 css selector 在元素的下级中查找元素（第一个）\nlnk = first_col.ele('text:命令学')  # 使用文本内容查找元素\ntext = lnk.text  # 获取元素文本\nhref = lnk.attr('href')  # 获取元素属性值\n\nprint(text, href, '\\n')\n\n# 简洁模式串联查找\ntext = page('@id:footer-left')('css:>div')('text:命令学').text\nprint(text)\n```\n\n输出：\n\n```\nGit 命令学习 https://oschina.gitee.io/learn-git-branching/\n\nGit 命令学习\n```\n\n# 🛠 使用方法\n\n[点击跳转到使用文档](http://g1879.gitee.io/drissionpage)\n\n# 🎯️ 版本历史\n\n[点击查看版本历史](http://g1879.gitee.io/drissionpage/#/%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2)\n\n# 🖐🏻 免责声明\n\n请勿将 DrissionPage 应用到任何可能会违反法律规定和道德约束的工作中,请友善使用 DrissionPage，遵守蜘蛛协议，不要将 DrissionPage 用于任何非法用途。如您选择使用 DrissionPage\n即代表您遵守此协议，作者不承担任何由于您违反此协议带来任何的法律风险和损失，一切后果由您承担。\n\n# ☕ 请我喝咖啡\n\n如果本项目对您有所帮助，不妨请作者我喝杯咖啡 ：）\n\n![](https://gitee.com/g1879/DrissionPage-demos/raw/master/pics/code.jpg)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": null,
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://gitee.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/2.5.8/",
    "requires_dist": [
      "selenium",
      "lxml",
      "tldextract",
      "requests",
      "DownloadKit"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "2.5.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c0792c67c52d00b21ae919501ed2fbd6619337100dbf897b4442f47b3170337",
        "md5": "f7923e834cf39338f09b6bdbb11b4c0b",
        "sha256": "188cc99583325f889114e216b0d1aa336aeb0070e10845e0b27b9afc962edc2e"
      },
      "downloads": -1,
      "filename": "DrissionPage-2.5.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7923e834cf39338f09b6bdbb11b4c0b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 63313,
      "upload_time": "2022-04-15T07:03:11",
      "upload_time_iso_8601": "2022-04-15T07:03:11.818320Z",
      "url": "https://files.pythonhosted.org/packages/6c/07/92c67c52d00b21ae919501ed2fbd6619337100dbf897b4442f47b3170337/DrissionPage-2.5.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "949842c9b8984d3a4fb6e93a0bdf4d58495c06085e9804cfcc4bda9abf195030",
        "md5": "3cd825510f4a88abd3a0c9a48cbf1afe",
        "sha256": "f79e1586216045f18b8f00cbe340bf55f518a926e14f18eb048904a9e3f93ae1"
      },
      "downloads": -1,
      "filename": "DrissionPage-2.5.8.tar.gz",
      "has_sig": false,
      "md5_digest": "3cd825510f4a88abd3a0c9a48cbf1afe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 54268,
      "upload_time": "2022-04-15T07:03:13",
      "upload_time_iso_8601": "2022-04-15T07:03:13.829394Z",
      "url": "https://files.pythonhosted.org/packages/94/98/42c9b8984d3a4fb6e93a0bdf4d58495c06085e9804cfcc4bda9abf195030/DrissionPage-2.5.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}