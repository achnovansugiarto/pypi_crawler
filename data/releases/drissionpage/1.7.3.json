{
  "info": {
    "author": "g1879",
    "author_email": "g1879@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# Introduction\n\n***\n\nDrissionPage, a combination of driver and session, is a python- based Web automation operation integration tool.  \nIt achieves seamless switching between selenium and requests.  \nTherefore, the convenience of selenium and the high efficiency of requests can be balanced.  \nIt integrates the common functions of the page, the API of the two modes is consistent, and it is easy to use.  \nIt uses the POM mode to encapsulate the commonly used methods of page elements, which is very suitable for automatic operation function expansion.  \nWhat's even better is that its usage is very concise and user- friendly, with a small amount of code and friendly to novices.\n\n**project address:**\n\n- https://github.com/g1879/DrissionPage\n- https://gitee.com/g1879/DrissionPage\n\n**Sample address:** [Use DrissionPage to crawl common websites and automation](https://gitee.com/g1879/DrissionPage-demos)\n\n**Contact Email: ** g1879@qq.com\n\n# Concept and background\n\n***\n\n## Idea\n\n**Concise, easy to use, extensible**\n\n\n\n## Background\n\nWhen the requests crawler faces the website to be logged in, it has to analyze data packets and JS source code, construct complex requests, and often has to deal with anti- climbing methods such as verification codes, JS confusion, and signature parameters, which has a high threshold. If the data is generated by JS calculation, the calculation process must be reproduced. The experience is not good and the development efficiency is not high.  \nUsing selenium, these pits can be bypassed to a large extent, but selenium is not efficient. Therefore, this library combines selenium and requests into one, switches the corresponding mode when different needs, and provides a user- friendly method to improve development and operation efficiency.  \nIn addition to merging the two, the library also encapsulates common functions in web pages, simplifies selenium's operations and statements. When used for web page automation, it reduces the consideration of details, focuses on function implementation, and makes it more convenient to use.  \nKeep everything simple, try to provide simple and direct usage, and be more friendly to novices.\n\n# Features\n\n***\n\n- The first pursuit is simple code.\n- Allow seamless switching between selenium and requests, sharing session.\n- The two modes provide consistent APIs, and the user experience is consistent.\n- Humanized page element operation mode, reducing the workload of page analysis and coding.\n- The common functions are integrated and optimized, which is more in line with actual needs.\n- Compatible with selenium code to facilitate project migration.\n- Use POM mode packaging for easy expansion.\n- A unified file download method makes up for the lack of browser downloads.\n- Simple configuration method, get rid of tedious browser configuration.\n\n# Project structure\n\n***\n## Structure diagram\n\n![](https://gitee.com/g1879/DrissionPage-demos/raw/master/pics/20201118164542.jpg)\n\n## Drission Class\n\nManage the WebDriver object and Session object responsible for communicating with the web page, which is equivalent to the role of the driver.\n\n## MixPage Class\n\nMixPage encapsulates the common functions of page operation. It calls the driver managed in the Drission class to access and operate the page. Can switch between driver and session mode. The login status will be automatically synchronized when switching.\n\n## DriverElement class\n\nThe page element class in driver mode can perform operations such as clicking on the element, inputting text, modifying attributes, running js, etc., and can also search for descendant elements at its lower level.\n\n## SessionElement Class\n\nThe page element class in session mode can obtain element attribute values and search for descendant elements at its lower levels.\n\n# Simple demo\n\n***\n\n## Comparison with selenium code\n\nThe following code implements exactly the same function, compare the amount of code between the two:\n\n- Find the first element whose text contains some text with explicit wait\n\n```python\n# Use selenium:\nelement = WebDriverWait(driver).until(ec.presence_of_element_located((By.XPATH,'//*[contains(text(), \"some text\")]')))\n\n# Use DrissionPage:\nelement = page('some text')\n```\n\n\n\n- Jump to the first tab\n\n```python\n# Use selenium:\ndriver.switch_to.window(driver.window_handles[0])\n\n# Use DrissionPage:\npage.to_tab(0)\n```\n\n\n\n- Select drop- down list by text\n\n```python\n# Use selenium:\nfrom selenium.webdriver.support.select import Select\nselect_element = Select(element)\nselect_element.select_by_visible_text('text')\n\n# Use DrissionPage:\nelement.select('text')\n```\n\n\n\n- Drag and drop an element\n\n```python\n# Use selenium:\nActionChains(driver).drag_and_drop(ele1, ele2).perform()\n\n# Use DrissionPage:\nele1.drag_to(ele2)\n```\n\n\n\n- Scroll the window to the bottom (keep the horizontal scroll bar unchanged)\n\n```python\n# Use selenium:\ndriver.execute_script(\"window.scrollTo(document.documentElement.scrollLeft, document.body.scrollHeight);\")\n\n# Use DrissionPage:\npage.scroll_to('bottom')\n```\n\n\n\n- Set headless mode\n\n```python\n# Use selenium:\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"- - headless\")\n\n# Use DrissionPage:\nset_headless()\n```\n\n\n\n- Get pseudo element content\n\n```python\n# Use selenium:\ntext = webdriver.execute_script('return window.getComputedStyle(arguments[0], \"::after\").getPropertyValue(\"content\");', element)\n\n# Use DrissionPage:\ntext = element.after\n```\n\n\n\n- Get shadow- root\n\n```python\n# Use selenium:\nshadow_element = webdriver.execute_script('return arguments[0].shadowRoot', element)\n\n# Use DrissionPage:\nshadow_element = element.shadow_root\n```\n\n\n\n- Use xpath to get attributes or text nodes directly\n\n```python\n# Use selenium:\nQuite complicated\n\n# Use DrissionPage:\nclass_name = element('xpath://div[@id=\"div_id\"]/@class')\ntext = element('xpath://div[@id=\"div_id\"]/text()[2]')\n```\n\n\n\n## Compare with requests code\n\nThe following code implements exactly the same function, compare the amount of code between the two:\n\n- Get element content\n\n```python\nurl ='https://baike.baidu.com/item/python'\n\n# Use requests:\nfrom lxml import etree\nheaders = {'User- Agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36'}\nresponse = requests.get(url, headers = headers)\nhtml = etree.HTML(response.text)\nelement = html.xpath('//h1')[0]\ntitle = element.text\n\n# Use DrissionPage:\npage = MixPage('s')\npage.get(url)\ntitle = page('tag:h1').text\n```\n\nTips: DrissionPage comes with default headers\n\n\n\n-  download file\n\n```python\nurl ='https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\n\n# Use requests:\nr = requests.get(url)\nwith open(f'{save_path}\\\\img.png','wb') as fd:\n   for chunk in r.iter_content():\n       fd.write(chunk)\n\n# Use DrissionPage:\npage.download(url, save_path,'img')  # Support renaming and handle file name conflicts\n```\n\n\n\n## Mode switch\n\nLog in to the website with selenium, and then switch to requests to read the web page. Both will share login information.\n\n```python\npage = MixPage()  # Create page object, default driver mode\npage.get('https://gitee.com/profile')  # Visit the personal center page (not logged in, redirect to the login page)\n\npage.ele('@id:user_login').input('your_user_name')  # Use selenium to enter the account password to log in\npage.ele('@id:user_password').input('your_password\\n')\n\npage.change_mode()  # Switch to session mode\nprint('Title after login:', page.title,'\\n')  # session mode output after login\n```\n\nOutput:\n\n```\nTitle after login: Personal Information- Code Cloud Gitee.com\n```\n\n\n\n## Get and print element attributes\n\n```python\n# Connect the previous code\nfoot = page.ele('@id:footer- left')  # find element by id\nfirst_col = foot.ele('css:>div')  # Use the css selector to find the element in the lower level of the element (the first one)\nlnk = first_col.ele('text: Command Learning')  # Use text content to find elements\ntext = lnk.text  # Get element text\nhref = lnk.attr('href')  # Get element attribute value\n\nprint(text, href,'\\n')\n\n# Concise mode series search\ntext = page('@id:footer- left')('css:>div')('text:command learning').text\nprint(text)\n```\n\nOutput:\n\n```\nGit command learning https://oschina.gitee.io/learn- git- branching/\n\nGit command learning\n```\n\n\n\n## download file\n\n```python\nurl ='https://www.baidu.com/img/flexible/logo/pc/result.png'\nsave_path = r'C:\\download'\npage.download(url, save_path)\n```\n\n\n\n# Installation\n\n***\n\n```\npip install DrissionPage\n```\nOnly supports python3.6 and above, and the driver mode currently only supports chrome.It has only been tested in the Windows environment.\nTo use the driver mode, you must download chrome and **corresponding version** of chromedriver. [[chromedriver download]](https://chromedriver.chromium.org/downloads)  \nThe get_match_driver() method in the easy_set tool can automatically identify the chrome version and download the matching driver.\n\n# Instructions\n\n***\n\n## Import module\n\n```python\nfrom DrissionPage import MixPage\n```\n\n\n\n## Initialization\n\nIf you only use session mode, you can skip this section.\n\nBefore using selenium, you must configure the path of chrome.exe and chromedriver.exe and ensure that their versions match.\n\nThere are four ways to configure the path:\n-Use the get_match_driver() method of the easy_set tool (recommended)\n-Write the path to the ini file of this library\n-Write two paths to system variables\n-Manually pass in the path when using\n\n### Use get_match_driver() method\n\nIf you choose the first method, please run the following code before using it for the first time. The program will automatically detect the Chrome version installed on your computer, download the corresponding driver, and record it in the ini file.\n\n```python\nfrom DrissionPage.easy_set import get_match_driver\nget_match_driver()\n```\n\nOutput:\n\n```\nini文件中chrome.exe路径 D:\\Google Chrome\\Chrome\\chrome.exe \n\nversion 75.0.3770.100 \n\nchromedriver_win32.zip\nDownloading to: D:\\python\\projects\\DrissionPage\\DrissionPage\n 100% Success.\n\n解压路径 D:\\python\\projects\\chromedriver.exe \n\n正在检测可用性...\n版本匹配，可正常使用。\n```\n\nThen you can start using it.\n\nIf you want to use the specified chrome.exe (green version), and specify the ini file and the save path of chromedriver.exe, you can write:\n\n```python\nget_match_driver(ini_path ='ini file path', save_path ='save path', chrome_path='chrome path')\n```\n\nTips: When you specify chrome_path, the program writes this path to the INI file after successful detection.\n\n\n\n### Use set_paths() method\n\nIf the previous method fails, you can download chromedriver.exe yourself, and then run the following code to record the path to the ini file.\n\n```python\nfrom DrissionPage.easy_set import set_paths\ndriver_path ='D:\\\\chrome\\\\chromedriver.exe' # Your chromedriver.exe path, if not filled in, it will be searched in system variables\nchrome_path ='D:\\\\chrome\\\\chrome.exe' # Your chrome.exe path, if not filled in, it will be searched in system variables\nset_paths(driver_path, chrome_path)\n```\n\nThis method also checks whether the chrome and chromedriver versions match, and displays:\n\n```\n正在检测可用性...\n版本匹配，可正常使用。\n```\n\nor\n\n```\n出现异常：\nMessage: session not created: Chrome version must be between 70 and 73\n  (Driver info: chromedriver=73.0.3683.68 (47787ec04b6e38e22703e856e101e840b65afe72),platform=Windows NT 10.0.19631 x86_64)\n可执行easy_set.get_match_driver()自动下载匹配的版本。\n或自行从以下网址下载：https://chromedriver.chromium.org/downloads\n```\n\nAfter passing the check, you can use the driver mode normally.\n\nIn addition to the above two paths, this method can also set the following paths:\n\n```python\ndebugger_address  # Debug browser address, such as: 127.0.0.1:9222\ndownload_path  # Download file path\ntmp_path  # Temporary folder path\nuser_data_path  # User data path\ncache_path  # cache path\n```\n\nTips:\n\n- Different projects may require different versions of chrome and chromedriver. You can also save multiple ini files and\n  use them as needed.\n- It is recommended to use the green version of chrome, and manually set the path, to avoid browser upgrades causing\n  mismatch with the chromedriver version.\n- It is recommended to set the debugger_address when debugging the project and use the manually opened browser to debug,\n  saving time and effort.\n\n### Other methods\n\nIf you don't want to use the ini file (for example, when you want to package the project), you can write the above two\npaths in the system path, or fill in the program. See the next section for the use of the latter.\n\n## Create drive object Drission\n\nThe creation step is not necessary. If you want to get started quickly, you can skip this section. The MixPage object\nwill automatically create the object.\n\nDrission objects are used to manage driver and session objects. When multiple pages work together, the Drission object\nis used to pass the driver, so that multiple page classes can control the same browser or Session object. The\nconfiguration information of the ini file can be directly read and created, or the configuration information can be\npassed in during initialization.\n\n```python\n# Create from the default ini file\ndrission = Drission()\n\n# Create by other ini files\ndrission = Drission(ini_path ='D:\\\\settings.ini')\n\n# Create without ini files\ndrission = Drission(read_file = False)\n```\n\nTo manually pass in the configuration (ignore the ini file):\n\n```python\nfrom DrissionPage.config import DriverOptions\n\n# Create a driver configuration object, read_file = False means not to read the ini file\ndo = DriverOptions(read_file = False)\n\n# Set the path, if it has been set in the system variable, it can be ignored\ndo.set_paths(chrome_path ='D:\\\\chrome\\\\chrome.exe',\n              driver_path ='D:\\\\chrome\\\\chromedriver.exe')\n\n# Settings for s mode\nsession_options = {'headers': {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)'}}\n\n# Proxy settings, optional\nproxy = {'http': '127.0.0.1:1080','https': '127.0.0.1:1080'}\n\n# Incoming configuration, driver_options and session_options are optional, you need to use the corresponding mode to pass in\ndrission = Drission(driver_options, session_options, proxy=proxy)\n```\n\nThe usage of DriverOptions and SessionOptions is detailed below.\n\n\n\n## Use page object MixPage\n\nThe MixPage page object encapsulates common web page operations and realizes the switch between driver and session\nmodes. MixPage must control a Drission object and use its driver or session. If it is not passed in, MixPage will create\none by itself (using the incoming configuration information or reading from the default ini file).\n\nTips: When multiple objects work together, you can pass the Drission object in one MixPage to another, so that multiple\nobjects can share login information or operate the same page.\n\n### Create Object\n\nThere are three ways to create objects: simple, passing in Drission objects, and passing in configuration. Can be selected according to actual needs.\n\n```python\n# Simple creation method, automatically create Drission objects with ini file default configuration\npage = MixPage()\npage = MixPage('s')\n\n# Create by passing in the Drission object\npage = MixPage(drission)\npage = MixPage(drission, mode='s', timeout=5)  # session mode, waiting time is 5 seconds (default 10 seconds)\n\n# Incoming configuration information, MixPage internally creates Drission according to the configuration\npage = MixPage(driver_options=DriverOption, session_options=SessionOption)  # default d mode\n```\n\n\n\n### visit website\n\n```python\n# Default mode\npage.get(url)\npage.post(url, data, **kwargs)  # Only session mode has post method\n\n# Specify the number of retries and interval\npage.get(url, retry=5, interval=0.5)\n```\n\nTips: If there is an error in the connection, the program will automatically retry twice. The number of retries and the\nwaiting interval can be specified.\n\n### Switch mode\n\nSwitch between s and d modes, the cookies and the URL you are visiting will be automatically synchronized when\nswitching.\n\n```python\npage.change_mode(go=False)  # If go is False, it means that the url is not redirected\n```\n\nTips: When using a method unique to a certain mode, it will automatically jump to that mode.\n\n\n\n### Page properties\n\n```python\npage.url  # currently visited url\npage.mode  # current mode\npage.drission  # Dirssion object currently in use\npage.driver  # WebDirver object currently in use\npage.session  # Session object currently in use\npage.cookies  # Get cookies information\npage.html  # Page source code\npage.title  # Current page title\n\n# d mode unique:\npage.tabs_count  # Return the number of tab pages\npage.tab_handles  # Return to the handle list of all tabs\npage.current_tab_num  # Return the serial number of the current tab page\npage.current_tab_handle  # Return to the current tab page handle\n```\n\n\n\n### Page operation\n\nWhen calling a method that only belongs to d mode, it will automatically switch to d mode. See APIs for detailed usage.\n\n```python\npage.set_cookies()  # set cookies\npage.get_cookies() # Get cookies, which can be returned by list or dict\npage.change_mode()  # Switch mode, it will automatically copy cookies\npage.cookies_to_session()  # Copy cookies from WebDriver object to Session object\npage.cookies_to_driver()  # Copy cookies from Session object to WebDriver object\npage.get(url, retry, interval, **kwargs)  # Use get to access the web page, you can specify the number of retries and the interval\npage.ele(loc_or_ele, timeout)  # Get the first element, node or attribute that meets the conditions\npage.eles(loc_or_ele, timeout)  # Get all eligible elements, nodes or attributes\npage.download(url, save_path, rename, file_exists, **kwargs)  # download file\npage.close_driver()  # Close the WebDriver object\npage.close_session()  # Close the Session object\n\n# s mode unique:\npage.post(url, data, retry, interval, **kwargs)  # To access the webpage in post mode, you can specify the number of retries and the interval\n\n# d mode unique:\npage.wait_ele(loc_or_ele, mode, timeout)  # Wait for the element to be deleted, displayed, and hidden from the dom\npage.run_script(js, *args)  # Run js statement\npage.create_tab(url)  # Create and locate a tab page, which is at the end\npage.to_tab(num_or_handle)  # Jump to tab page\npage.close_current_tab()  # Close the current tab page\npage.close_other_tabs(num_or_handles)  # Close other tabs\npage.to_iframe(iframe)  # cut into iframe\npage.screenshot(path)  # Page screenshot\npage.scrool_to_see(element)  # Scroll until an element is visible\npage.scroll_to(mode, pixel)  # Scroll the page as indicated by the parameter, and the scroll direction is optional:'top','bottom','rightmost','leftmost','up','down','left', ' right'\npage.refresh()  # refresh the current page\npage.back()  # Browser back\npage.et_window_size(x, y)  # Set the browser window size, maximize by default\npage.check_page()  # Check whether the page meets expectations\npage.chrome_downloading()  # Get the list of files that chrome is downloading\npage.process_alert(mode, text)  # Process the prompt box\n```\n\n### Use of cookies\n\nMixPage supports obtaining and setting cookies. The specific usage methods are as follows:\n\n```python\npage.cookies # Return cookies in dictionary form, only cookies available for the current domain name will be returned\npage.get_cookies(as_dict=False) # Return the cookies available for the current domain name in the form of a list, each cookie contains all the detailed information\npage.get_cookies(all_domains=True) # Return all cookies in list form, only s mode is valid\npage.set_cookies(cookies) # Set cookies, you can pass in RequestsCookieJar, list, tuple, str, dict\n```\n\nTips:\n\n- After setting cookies in d mode, you must refresh the page to see the effect.\n\n- The s mode can set cookies in the ini file, SessionOptions, and configuration dictionary, which can be passed in when\n  MixPage is initialized. The d mode can only be set with the set_cookies() function.\n\n## Find element\n\nele() returns the first eligible element, and eles() returns a list of all eligible elements. You can use these two\nfunctions under the page object or element object to find subordinate elements.\n\npage.eles() and element.eles() search and return a list of all elements that meet the conditions.\n\nDescription:\n\n- The element search timeout is 10 seconds by default, and it stops waiting when it times out or finds an element. You\n  can also set it as needed.\n- -You can find elements with query string or selenium native loc tuple (s mode can also be used)\n  -The query string has 7 methods such as @attribute name, tag, text, xpath, css, ., #, etc.\n\n```python\n# Find by attribute\npage.ele('@id:ele_id', timeout = 2)  # Find the element whose id is ele_id and set the waiting time for 2 seconds\npage.eles('@class')  # Find all elements with class attribute\npage.eles('@class:class_name')  # Find all elements that have ele_class in class\npage.eles('@class=class_name')  # Find all elements whose class is equal to ele_class\n\n# Find by class or id\npage.ele('#ele_id') # equivalent to page.ele('@id=ele_id')\npage.ele('#:ele_id') # equivalent to page.ele('@id:ele_id')\npage.ele('.ele_class') # equivalent to page.ele('@class=ele_class')\npage.ele('.:ele_class') # equivalent to page.ele('@class:ele_class')\n\n# Find by tag name\npage.ele('tag:li')  # Find the first li element\npage.eles('tag:li')  # Find all li elements\n\n# Find according to tag name and attributes\npage.ele('tag:div@class=div_class')  # Find the div element whose class is div_class\npage.ele('tag:div@class:ele_class')  # Find div elements whose class contains ele_class\npage.ele('tag:div@class=ele_class')  # Find div elements whose class is equal to ele_class\npage.ele('tag:div@text():search_text')  # Find div elements whose text contains search_text\npage.ele('tag:div@text()=search_text')  # Find the div element whose text is equal to search_text\n\n# Find according to text content\npage.ele('search text')  # find the element containing the incoming text\npage.eles('text:search text')  # If the text starts with @, tag:, css:, xpath:, text:, you should add text: in front to avoid conflicts\npage.eles('text=search text')  # The text is equal to the element of search_text\n\n# Find according to xpath or css selector\npage.eles('xpath://div[@class=\"ele_class\"]')\npage.eles('css:div.ele_class')\n\n# Find according to loc\nloc1 = By.ID,'ele_id'\nloc2 = By.XPATH,'//div[@class=\"ele_class\"]'\npage.ele(loc1)\npage.ele(loc2)\n\n# Find lower- level elements\nelement = page.ele('@id:ele_id')\nelement.ele('@class:class_name')  # Find the first element whose class is ele_class at the lower level of element\nelement.eles('tag:li')  # find all li elements under ele_id\n\n# Find by location\nelement.parent  # parent element\nelement.next  # next sibling element\nelement.prev  # previous sibling element\n\n# Get the shadow-root and treat it as an element. Only support open shadow-root\nele1 = element.shadow_root.ele('tag:div')\n\n# Chain search\npage.ele('@id:ele_id').ele('tag:div').next.ele('some text').eles('tag:a')\n\n# Simplified writing\neles = page('@id:ele_id')('tag:div').next('some text').eles('tag:a')\nele2 = ele1('tag:li').next('some text')\n```\n\n\n\n## Get element attributes\n\n```python\nelement.html  # Return element outerHTML\nelement.inner_html  # Return element innerHTML\nelement.tag  # Return element tag name\nelement.text  # Return element innerText value\nelement.link  # Returns absolute href or src value of the element.\nelement.texts()  # Returns the text of all direct child nodes in the element, including elements and text nodes, you can specify to return only text nodes\nelement.attrs  # Return a dictionary of all attributes of the element\nelement.attr(attr)  # Return the value of the specified attribute of the element\nelement.css_path  # Return the absolute css path of the element\nelement.xpath  # Return the absolute xpath path of the element\nelement.parent  # Return element parent element\nelement.next  # Return the next sibling element of the element\nelement.prev  # Return the previous sibling element of the element\nelement.parents(num)  # Return the numth parent element\nelement.nexts(num, mode)  # Return the following elements or nodes\nelement.prevs(num, mode)  # Return the first few elements or nodes\nelement.ele(loc_or_str, timeout)  # Return the first sub- element, attribute or node text of the current element that meets the conditions\nelement.eles(loc_or_str, timeout)  # Return all eligible sub- elements, attributes or node texts of the current element\n\n# d mode unique:\nelement.before  # Get pseudo element before content\nelement.after  # Get pseudo element after content\nelement.is_valid  # Used to determine whether the element is still in dom\nelement.size  # Get element size\nelement.location  # Get element location\nelement.shadow_root  # Get the ShadowRoot element under the element\nelement.get_style_property(style, pseudo_ele)  # Get element style attribute value, can get pseudo element\nelement.is_selected()  # Returns whether the element is selected\nelement.is_enabled()  # Returns whether the element is available\nelement.is_displayed()  # Returns whether the element is visible\n```\n\n\n\n## Element operation\n\nElement operation is unique to d mode. Calling the following method will automatically switch to d mode.\n\n```python\nelement.click(by_js)  # Click the element, you can choose whether to click with js\nelement.input(value)  # input text\nelement.run_script(js)  # Run JavaScript script on the element\nelement.submit()  # Submit\nelement.clear()  # Clear the element\nelement.screenshot(path, filename)  # Take a screenshot of the element\nelement.select(text)  # Select the drop- down list based on the text\nelement.set_attr(attr, value)  # Set element attribute value\nelement.remove_attr(attr)  # remove a element attribute\nelement.drag(x, y, speed, shake)  # Drag the relative distance of the element, you can set the speed and whether to shake randomly\nelement.drag_to(ele_or_loc, speed, shake)  # Drag the element to another element or a certain coordinate, you can set the speed and whether to shake randomly\nelement.hover()  # Hover the mouse over the element\n```\n\n\n\n## shadow-dom operation\n\nSupports obtaining shadow-root and internal elements. The obtained shadow-root element type is ShadowRootElement. The usage is similar to normal elements, but the function is simplified.\n\n**note:**\n\n- Only open shadow-root can be obtained\n\n- Find shadow-root internal elements cannot use xpath method\n\nGet the shadow-root element attached to the ordinary element\n\n```python\nshadow_root_element = element.shadow_root # element is an ordinary element containing shadow-root\n```\n\nProperties and methods\n\n```python\nshadow_root_element.tag # return'shadow-root'\nshadow_root_element.html # html content\nshadow_root_element.parent # parent element\nshadow_root_element.next # Next sibling element\n\nshadow_root_element.parents(num) # Get upward num parent elements\nshadow_root_element.nexts(num) # Get backward num sibling elements\nshadow_root_element.ele(loc_or_str) # Get the first eligible internal element\nshadow_root_element.eles(loc_or_str) # Get all eligible internal elements\nshadow_root_element.run_scrpit(js_text) # Run js script\nshadow_root_element.is_enabled() # Returns whether the element is available\nshadow_root_element.is_valid() # Returns whether the element is still in dom\n```\n\n**Tips:** The elements obtained by the above attributes or methods are ordinary DriverElement. For usage, please refer to the above.\n\n\n\n## Splicing with selenium or requests code\n\nDrissionPage code can be seamlessly spliced with selenium and requests code. You can use Selenium's WebDriver object\ndirectly, or you can export your own WebDriver to selenium code. The Session object of requests can also be passed\ndirectly. Make the migration of existing projects very convenient.\n\n### selenium to DrissionPage\n\n```python\ndriver = webdriver.Chrome()\ndriver.get('https://www.baidu.com')\n\npage = MixPage(Drission(driver))  # Pass the driver to Drission, create a MixPage object\nprint(page.title)  # Print result: 百度一下，你就知道\nelement = driver.find_element_by_xpath('//div') # Use selenium native functions\n```\n\n### DrissionPage to selenium\n\n```python\npage = MixPage()\npage.get('https://www.baidu.com')\n\ndriver = page.driver  # Get the WebDriver object from the MixPage object\nprint(driver.title)  # Print results: 百度一下，你就知道\n```\n\n### requests  to  DrissionPage\n\n``` python\nsession = requets.Session()\ndrission = Drission(session_or_options=session)\npage = MixPage(drission, mode='s')\n\npage.get('https://www.baidu.com')\n```\n\n### DrissionPage  to  requests\n\n```python\npage = MixPage('s')\nsession = page.session\n\nresponse = session.get('https://www.baidu.com')\n```\n\n\n\n## requests function usage\n\n### Connection parameters\n\nIn addition to passing in configuration information and connection parameters when creating, if necessary, you can also\nset connection parameters every time you visit the URL in the s mode.\n\n```python\nheaders = {'User-Agent':'...',}\ncookies = {'name':'value',}\nproxies = {'http': '127.0.0.1:1080','https': '127.0.0.1:1080'}\npage.get(url, headers=headers, cookies=cookies, proxies=proxies)\n```\n\nTips:\n\n-If the connection parameters are not specified, the s mode will automatically fill in the Host and Referer attributes\naccording to the current domain name -The Session configuration passed in when creating MixPage is globally effective\n\n### Response object\n\nThe Response object obtained by requests is stored in page.response and can be used directly. Such as:\n\n```python\nprint(page.response.status_code)\nprint(page.response.headers)\n```\n\n\n\n## download file\n\nSelenium lacks effective management of browser download files, and it is difficult to detect download status, rename,\nand fail management. Using requests to download files can better achieve the above functions, but the code is more\ncumbersome. Therefore, DrissionPage encapsulates the download method and integrates the advantages of the two. You can\nobtain login information from selenium and download it with requests. To make up for the shortcomings of selenium, make\nthe download simple and efficient.\n\n### Features\n\n- Specify download path\n- Rename the file without filling in the extension, the program will automatically add\n- When there is a file with the same name, you can choose to rename, overwrite, skip, etc.\n- Show download progress\n- Support post method\n- Support custom connection parameters\n\n### Demo\n\n```python\nurl ='https://www.baidu.com/img/flexible/logo/pc/result.png'  # file url\nsave_path = r'C:\\download'  # save path\n\n# Rename to img.png, and automatically add a serial number to the end of the file name when there is a duplicate name to display the download progress\npage.download(url, save_path,'img','rename', show_msg=True)\n```\n\n## Chrome Settings\n\nThe configuration of chrome is very cumbersome. In order to simplify the use, this library provides setting methods for\ncommon configurations.\n\n### DriverOptions Object\n\nThe DriverOptions object inherits from the Options object of selenium.webdriver.chrome.options, and the following\nmethods are added to it:\n\n```python\noptions.remove_argument(value) # Remove an argument value\noptions.remove_experimental_option(key) # delete an experimental_option setting\noptions.remove_all_extensions() # Remove all plugins\noptions.save() # Save the currently opened ini file\noptions.save('D:\\\\settings.ini') # Save to the specified path ini file\noptions.save('default') # Save the current settings to the default ini file\noptions.set_argument(arg, value) # set argument property\noptions.set_headless(on_off) # Set whether to use interfaceless mode\noptions.set_no_imgs(on_off) # Set whether to load images\noptions.set_no_js(on_off) # Set whether to disable js\noptions.set_mute(on_off) # Set whether to mute\noptions.set_user_agent(user_agent) # set user agent\noptions.set_proxy(proxy) # Set proxy address\noptions.set_paths(driver_path, chrome_path, debugger_address, download_path, user_data_path, cache_path) # Set browser-related paths\n```\n\n\n\n### Instructions\n\n```python\ndo = DriverOptions() # read the default ini file to create a DriverOptions object\ndo = DriverOptions('D:\\\\settings.ini') # read the specified ini file to create a DriverOptions object\ndo = DriverOptions(read_file=False) # Do not read the ini file, create an empty DriverOptions object\n\ndo.set_headless(False) # show the browser interface\ndo.set_no_imgs(True) # Do not load pictures\ndo.set_paths(driver_path='D:\\\\chromedriver.exe', chrome_path='D:\\\\chrome.exe') # set path\ndo.set_headless(False).set_no_imgs(True) # Support chain operation\n\ndrission = Drission(driver_options=do) # Create Drission object with configuration object\npage = MixPage(driver_options=do) # Create MixPage object with configuration object\n\ndo.save() # save the currently opened ini file\ndo.save('D:\\\\settings.ini') # save to the specified ini file\ndo.save('default') # Save the current settings to the default ini file\n```\n\n\n\n## Session Settings\n\n### SessionOPtions Object\n\nThe SessionOptions object is used to manage the configuration information of the Session. It reads the default ini file\nconfiguration information by default when it is created, or you can manually set the required information.\n\nConfigurable properties:\n\nheaders, cookies, auth, proxies, hooks, params, verify, cert, adapters, stream, trust_env, max_redirects.\n\n**Tips:** cookies can receive information in dict, list, tuple, str, RequestsCookieJar and other formats.\n\n\n\n### Instructions\n\n```python\nso = SessionOptions() # read the default ini file to create a SessionOptions object\nso = SessionOptions('D:\\\\settings.ini') # read the specified ini file to create a SessionOptions object\nso = SessionOptions(read_file=False) # Do not read the ini file, create an empty SessionOptions object\n\nso.cookies = ['key1=val1; domain=xxxx','key2=val2; domain=xxxx'] # set cookies\nso.headers = {'User-Agent':'xxxx','Accept-Charset':'xxxx'}\nso.set_a_header('Connection','keep-alive')\n\ndrission = Drission(session_options=so) # Create Drission object with configuration object\npage = MixPage(session_options=so) # Create MixPage object with configuration object\n\nso.save() # Save the currently opened ini file\nso.save('D:\\\\settings.ini') # save to the specified ini file\nso.save('default') # Save the current settings to the default ini file\n```\n\n\n\n## Save configuration\n\nBecause there are many configurations of chrome and headers, an ini file is set up specifically to save common\nconfigurations. You can use the OptionsManager object to get and save the configuration, and use the DriverOptions\nobject to modify the chrome configuration. You can also save multiple ini files and call them according to different\nprojects.\n\nTips: It is recommended to save the commonly used configuration files to another path to prevent the configuration from\nbeing reset when the library is upgraded.\n\n### ini file content\n\nThe ini file has three parts by default: paths, chrome_options, and session_options. The initial content is as follows.\n\n```ini\n[paths]\n; chromedriver.exe path\nchromedriver_path =\n; Temporary folder path, used to save screenshots, file downloads, etc.\ntmp_path =\n\n[chrome_options]\n; The address and port of the opened browser, such as 127.0.0.1:9222\ndebugger_address =\n; chrome.exe path\nbinary_location =\n; Configuration information\narguments = [\n            ; Hide browser window\n            '- - headless',\n            ; Mute\n            '- - mute- audio',\n            ; No sandbox\n            '- - no- sandbox',\n            ; Google documentation mentions that this attribute needs to be added to avoid bugs\n            '- - disable- gpu',\n            ; Ignore warning\n            'ignore- certificate- errors',\n            ; Do not display the information bar\n            '- - disable- infobars'\n            ]\n; Plugin\nextensions = []\n; Experimental configuration\nexperimental_options = {\n                       'prefs': {\n                       ; Download does not pop up\n                       'profile.default_content_settings.popups': 0,\n                       ; No popup\n                       'profile.default_content_setting_values': {'notifications': 2},\n                       ; Disable PDF plugin\n                       'plugins.plugins_list': [{\"enabled\": False, \"name\": \"Chrome PDF Viewer\"}]\n                       },\n                       ; Set to developer mode, anti- reptile\n                       'excludeSwitches': [\"enable- automation\"],\n                       'useAutomationExtension': False\n                       }\n\n[session_options]\nheaders = {\n          \"User- Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8\",\n          \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Connection\": \"keep- alive\",\n          \"Accept- Charset\": \"utf- 8;q=0.7,*;q=0.7\"\n          }\n```\n\n\n\n### OptionsManager Object\n\nThe OptionsManager object is used to read, set and save the configuration.\n\n```python\nmanager.paths # Return path settings in dictionary form\nmanager.chrome_options # Return chrome settings in dictionary form\nmanager.session_options # Return session settings in dictionary form\nmanager.get_value(section, item) # Get the value of a configuration\nmanager.get_option(section) # Return all attributes of configuration in dictionary format\nmanager.set_item(section, item, value) # Set configuration properties\nmanager.manager.save() # Save the currently opened ini file\nmanager.save('D:\\\\settings.ini') # Save to the specified path ini file\nmanager.save('default') # Save the current settings to the default ini file\n```\n\n\n\n### Usage example\n\n```python\nfrom DrissionPage.configs import *\n\noptions_manager = OptionsManager() # Create OptionsManager object from the default ini file\noptions_manager = OptionsManager('D:\\\\settings.ini') # Create OptionsManager object from other ini files\ndriver_path = options_manager.get_value('paths','chromedriver_path') # read path information\noptions_manager.save() # Save the currently opened ini file\noptions_manager.save('D:\\\\settings.ini') # Save to the specified path ini file\n\ndrission = Drission(ini_path='D:\\\\settings.ini') # Use the specified ini file to create the object\n```\n\n\n\n## easy_set method\n\nMethods to quickly modify common settings. All for driver mode settings. Calling the easy_set method will modify the\ncontent of the default ini file.\n\n```python\nget_match_driver() # Identify the chrome version and automatically download the matching chromedriver.exe\nshow_settings() # Print all settings\nset_headless(True) # Turn on headless mode\nset_no_imgs(True) # Turn on no image mode\nset_no_js(True) # Disable JS\nset_mute(True) # Turn on mute mode\nset_user_agent('Mozilla/5.0 (Macintosh; Int......') # set user agent\nset_proxy('127.0.0.1:8888') # set proxy\nset_paths(paths) # See [Initialization] section\nset_argument(arg, value) # Set the attribute. If the attribute has no value (such as'zh_CN.UTF-8'), the value is bool to indicate the switch; otherwise, the value is str. When the value is'' or False, delete the attribute item\ncheck_driver_version() # Check if chrome and chromedriver versions match\n```\n\n# POM mode\n\n***\n\nMixPage encapsulates common page operations and can be easily used for extension.\n\nExample: extend a list page reading class\n\n```python\nimport re\nfrom time import sleep\nfrom DrissionPage import *\n\nclass ListPage(MixPage):\n    \"\"\"This class encapsulates the method of reading the list page. According to the necessary 4 elements, the isomorphic list page can be read\n    (Chinese variable is really fragrant) \"\"\"\n    def __init__(self, drission: Drission, url: str = None, **xpaths):\n        super().__init__(drission)\n        self._url = url\n        self.xpath_column name = xpaths['column name']  # [xpath string, regular expression]\n        self.xpath_next page = xpaths['next page']\n        self.xpath_lines = xpaths['line']\n        self.xpath_page number = xpaths['page number']  # [xpath string, regular expression]\n        self.total pages = self.get_total pages()\n        if url:\n            self.get(url)\n\n    def get_column name (self) - > str:\n        if self.xpath_ column name[1]:\n            s = self.ele(f'xpath:{self.xpath_column name[0]}').text\n            r = re.search(self.xpath_column name[1], s)\n            return r.group(1)\n        else:\n            return self.ele(f'xpath:{self.xpath_column name[0]}').text\n\n    def get_total number of pages (self) - > int:\n        if self.xpath_page number[1]:\n            s = self.ele(f'xpath:{self.xpath_number of pages[0]}').text\n            r = re.search(self.xpath_number of pages[1], s)\n            return int(r.group(1))\n        else:\n            return int(self.ele(f'xpath:{self.xpath_number of pages[0]}').text)\n\n    def click_next page(self, wait: float = None):\n        self.ele(f'xpath:{self.xpath_next page}').click()\n        if wait:\n            sleep(wait)\n\n    def get_ current page list (self, content to be crawled: list) - > list:\n        \"\"\"\n        Format of content to be crawled: [[xpath1,parameter1],[xpath2,parameter2]...]\n        Return list format: [[Parameter1,Parameter2...],[Parameter1,Parameter2...]...]\n        \"\"\"\n        Result list = []\n        Line s = self.eles(f'xpath:{self.xpath_lines}')\n        for line in line s:\n            Row result = []\n            for j in content to be crawled:\n                Line result.append(line.ele(f'xpath:{j[0]}').attr(j[1]))\n            Result list.append (row result)\n            print(line result)\n        return result list\n\n    def get_list(self, content to be crawled: list, wait: float = None) - > list:\n        List = self.get_ current page list (content to be crawled)\n        for _ in range(self. total pages- 1):\n            self.click_next page(wait)\n            List.extend(self.get_current page list (content to be crawled))\n        return list\n```\n\n# Other\n\n***\n\n## DriverPage and SessionPage\n\nIf you don't need to switch modes, you can only use DriverPage or SessionPage as needed, and the usage is the same as MixPage.\n\n```python\nfrom DrissionPage.session_page import SessionPage\nfrom DrissionPage.drission import Drission\n\nsession = Drission().session\npage = SessionPage(session)  # Pass in Session object\npage.get('http://www.baidu.com')\nprint(page.ele('@id:su').text)  # Output: Baidu\n\ndriver = Drission().driver\npage = DriverPage(driver)  # Pass in Driver object\npage.get('http://www.baidu.com')\nprint(page.ele('@id:su').text)  # Output: Baidu\n```\n\n# APIs\n\n***\n\n## Drission Class\n\n### class Drission()\n\nThe Drission class is used to manage WebDriver objects and Session objects, and is the role of the driver.\n\nParameter Description:\n\n- driver_or_options: [WebDriver, dict, Options, DriverOptions]  - WebDriver object or chrome configuration parameters.\n- session_or_options: [Session, dict]  - Session object configuration parameters\n- ini_path: str  - ini file path, the default is the ini file under the DrissionPage folder\n- proxy: dict  - proxy settings\n\n\n\n### session\n\nReturn the Session object, which is automatically initialized according to the configuration information.\n\nReturns: Session- the managed Session object\n\n\n\n### driver\n\nReturn the WebDriver object, which is automatically initialized according to the configuration information.\n\nReturns: WebDriver- Managed WebDriver object\n\n\n\n### driver_options\n\nReturn or set the driver configuration.\n\nReturns: dict\n\n\n\n### session_options\n\nReturn to session configuration.\n\nReturns: dict\n\n\n\n### session_options()\n\nSet the session configuration.\n\nReturns: None\n\n\n\n### proxy\n\nReturn to proxy configuration.\n\nReturns: dict\n\n\n\n### cookies_to_session()\n\nCopy the cookies of the driver object to the session object.\n\nParameter Description:\n\n- copy_user_agent: bool - whether to copy user_agent to session\n\nReturns: None\n\n\n\n### set_cookies()\n\nSet cookies.\n\nParameter Description:\n\n- cookies: Union[RequestsCookieJar, list, tuple, str, dict]-cookies information, can be CookieJar, list, tuple, str,\n  dict\n\n- set_session: bool-whether to set session cookies\n\n- set_driver: bool-whether to set driver cookies\n\nReturns: None\n\n\n\n### cookies_to_driver()\n\nCopy cookies from session to driver.\n\nParameter Description:\n\n- url: str  - the domain of cookies\n\nReturns: None\n\n\n\n### user_agent_to_session()\n\nCopy the user agent from the driver to the session.\n\nParameter Description:\n\n- driver: WebDriver- WebDriver object, copy user agent\n- session: Session- Session object, receiving user agent\n\nReturns: None\n\n\n\n### close_driver()\n\nClose the browser and set the driver to None.\n\nReturns: None\n\n\n\n### close_session()\n\nClose the session and set it to None.\n\nReturns: None\n\n\n\n### close()\n\nClose the driver and session.\n\nReturns: None\n\n\n\n## MixPage Class\n\n### class MixPage()\n\nMixPage encapsulates the common functions of page operation and can seamlessly switch between driver and session modes. Cookies are automatically synchronized when switching.\nThe function of obtaining information is shared by the two modes, and the function of operating page elements is only available in mode d. Calling a function unique to a certain mode will automatically switch to that mode.\nIt inherits from DriverPage and SessionPage classes, these functions are implemented by these two classes, and MixPage exists as a scheduling role.\n\nParameter Description:\n\n- drission: Drission  - Drission object, if not passed in, create one. Quickly configure the corresponding mode when's' or'd' is passed in\n- mode: str  - mode, optional'd' or's', default is'd'\n- timeout: float  - timeout, driver mode is the time to find elements, session mode is the connection waiting time\n\n\n\n### url\n\nReturns the URL currently visited by the MixPage object.\n\nReturns: str\n\n\n\n### mode\n\nReturns the current mode ('s' or'd').\n\nReturns: str\n\n\n\n### drission\n\nReturns the Dirssion object currently in use.\n\nReturns: Drission\n\n\n\n### driver\n\nReturn the driver object, if not, create it, and switch to driver mode when calling.\n\nReturns: WebDriver\n\n\n\n### session\n\nReturn the session object, if not, create it.\n\nReturns: Session\n\n\n\n### response\n\nReturn the Response object obtained in s mode, and switch to s mode when called.\n\nReturns: Response\n\n\n\n### cookies\n\nReturn cookies, obtained from the current mode.\n\nReturns: [dict, list]\n\n\n\n### html\n\nReturn the html text of the page.\n\nReturns: str\n\n\n\n### title\n\nReturn to the page title.\n\nReturns: str\n\n\n\n### url_available\n\nReturns the validity of the current url.\n\nReturns: bool\n\n\n\n### set_cookies()\n\nSet cookies.\n\nParameter Description:\n\n- cookies: Union[RequestsCookieJar, list, tuple, str, dict]  - cookies information, can be CookieJar, list, tuple, str,\n  dict\n\nReturns: None\n\n### get_cookies()\n\nReturn cookies.\n\nParameter Description:\n\n- as_dict: bool - Whether to return as dict, the default is to return complete cookies as list\n\n- all_domains: bool - whether to return cookies of all domains, only valid in s mode\n\nReturns: a dictionary or list of cookies\n\n### change_mode()\n\nSwitch mode,'d' or's'. When switching, the cookies of the current mode will be copied to the target mode.\n\nParameter Description:\n\n- mode: str - Specify the target mode,'d' or's'.\n- go: bool - whether to jump to the current url after switching mode\n\nReturns: None\n\n\n\n### ele()\n\nReturn the eligible elements on the page, the first one is returned by default.\nIf the query parameter is a string, the options of '@attribute name:', 'tag:', 'text:', 'css:', 'xpath:', '.', '#' are available. When there is no control mode, the text mode is used to search by default.\nIf it is loc, query directly according to the content.\n\nParameter Description:\n\n- loc_or_str: [Tuple[str, str], str, DriverElement, SessionElement, WebElement]  - The positioning information of the element, which can be an element object, a loc tuple, or a query string\n- mode: str  - 'single' or'all', corresponding to find one or all\n- timeout: float  - Find the timeout of the element, valid in driver mode\n\nExample:\n\n- When the element object is received: return the element object object\n\n- Find with loc tuple:\n\n  - ele.ele((By.CLASS_NAME,'ele_class'))  - returns the first child element whose class is ele_class\n\n- Find with query string:\n\n  Attributes, tag name and attributes, text, xpath, css selector, id, class.\n\n  @ Means attribute,. Means class, # means id, = means exact match,: means fuzzy match, the string is searched by default when there is no control string.\n\n  - page.ele('.ele_class')  - returns the first element whose name is equal to ele_name\n  - page.ele('.:ele_class')  - returns the element with ele_class in the first class\n  - page.ele('#ele_id')  - Return the first element with id ele_id\n  - page.ele('#:ele_id')  - Returns the element with ele_id in the first id\n  - page.ele('@class:ele_class')  - returns the element with ele_class in the first class\n  - page.ele('@name=ele_name')  - returns the first element whose name is equal to ele_name\n  - page.ele('@placeholder')  - returns the first element with placeholder attribute\n  - page.ele('tag:p')  - return the first p element\n  - page.ele('tag:div@class:ele_class')  - returns the first class div element with ele_class\n  - page.ele('tag:div@class=ele_class')  - returns the first div element whose class is equal to ele_class\n  - page.ele('tag:div@text():some_text')  - returns the first div element whose text contains some_text\n  - page.ele('tag:div@text()=some_text')  - returns the first div element whose text is equal to some_text\n  - page.ele('text:some_text')  - returns the first element whose text contains some_text\n  - page.ele('some_text')  - returns the first text element containing some_text (equivalent to the previous line)\n  - page.ele('text=some_text')  - returns the first element whose text is equal to some_text\n  - page.ele('xpath://div[@class=\"ele_class\"]')  - return the first element that matches xpath\n  - page.ele('css:div.ele_class')  - returns the first element that matches the css selector\n\nReturns: [DriverElement, SessionElement, str]  - element object or attribute, text node text\n\n\n\n### eles()\n\nGet the list of elements that meet the conditions according to the query parameters. The query parameter usage method is the same as the ele method.\n\nParameter Description:\n\n- loc_or_str: [Tuple[str, str], str]  - query condition parameter\n- timeout: float  - Find the timeout of the element, valid in driver mode\n\nReturns: [List[DriverElement or str], List[SessionElement or str]]  - a list of element objects or attributes and text node text\n\n\n\n### cookies_to_session()\n\nCopy cookies from the WebDriver object to the Session object.\n\nParameter Description:\n\n- copy_user_agent: bool  - whether to copy user agent at the same time\n\nReturns: None\n\n\n\n### cookies_to_driver()\n\nCopy cookies from the Session object to the WebDriver object.\n\nParameter Description:\n\n- url: str  - the domain or url of cookies\n\nReturns: None\n\n\n\n### get()\n\nTo jump to a url, synchronize cookies before the jump, and return whether the target url is available after the jump.\n\nParameter Description:\n\n- url: str  - target url\n- go_anyway: bool  - Whether to force a jump. If the target url is the same as the current url, it will not redirect by default.\n- show_errmsg: bool  - whether to display and throw an exception\n- retry: int  - the number of retries when a connection error occurs\n- interval: float  - Retry interval (seconds)\n- **kwargs  - connection parameters for requests\n\nReturns: [bool, None]  - whether the url is available\n\n\n\n### post()\n\nJump in post mode, automatically switch to session mode when calling.\n\nParameter Description:\n\n- url: str  - target url\n- data: dict  - submitted data\n- go_anyway: bool  - Whether to force a jump. If the target url is the same as the current url, it will not redirect by default.\n- show_errmsg: bool  - whether to display and throw an exception\n- retry: int  - the number of retries when a connection error occurs\n- interval: float  - Retry interval (seconds)\n- **kwargs  - connection parameters for requests\n\nReturns: [bool, None]  - whether the url is available\n\n\n\n### download()\n\nDownload a file, return whether it is successful and the download information string. This method will automatically avoid the same name with the existing file in the target path.\n\nParameter Description:\n\n- file_url: str  - file url\n- goal_path: str  - storage path, the default is the temporary folder specified in the ini file\n- rename: str  - rename the file without changing the extension\n- file_exists: str  - If there is a file with the same name, you can choose'rename','overwrite','skip' to process\n- post_data: dict  - data submitted in post mode\n- show_msg: bool  - whether to show download information\n- show_errmsg: bool  - whether to display and throw an exception\n- **kwargs  - connection parameters for requests\n\nReturns: Tuple[bool, str]  - a tuple of whether the download was successful (bool) and status information (the information is the file path when successful)\n\n\n\nThe following methods and properties only take effect in driver mode, and will automatically switch to driver mode when called\n\n***\n\n### tabs_count\n\nReturns the number of tab pages.\n\nReturns: int\n\n\n\n### tab_handles\n\nReturns the handle list of all tabs.\n\nReturns: list\n\n\n\n### current_tab_num\n\nReturns the serial number of the current tab page.\n\nReturns: int\n\n\n\n### current_tab_handle\n\nReturns the handle of the current tab page.\n\nReturns: str\n\n\n\n### wait_ele()\n\nWait for the element to be deleted, displayed, and hidden from the dom.\n\nParameter Description:\n\n- loc_or_ele: [str, tuple, DriverElement, WebElement]  - Element search method, same as ele()\n- mode: str  - waiting mode, optional:'del','display','hidden'\n- timeout: float  - waiting timeout\n\nReturns: bool  - whether the wait is successful\n\n\n\n### check_page()\n\nIn d mode, check whether the web page meets expectations. The response status is checked by default, and can be overloaded to achieve targeted checks.\n\nParameter Description:\n\n- by_requests: bool  - Force the use of built- in response for checking\n\nReturn: [bool, None]  - bool is available, None is unknown\n\n\n\n### run_script()\n\nExecute JavaScript code.\n\nParameter Description:\n\n- script: str  - JavaScript code text\n- *args  - incoming parameters\n\nReturns: Any\n\n\n\n### create_tab()\n\nCreate and locate a tab page, which is at the end.\n\nParameter Description:\n\n- url: str  - the URL to jump to the new tab page\n\nReturns: None\n\n\n\n### close_current_tab()\n\nClose the current tab.\n\nReturns: None\n\n\n\n### close_other_tabs()\n\nClose tab pages other than the incoming tab page, and keep the current page by default. You can pass in a list or tuple.\n\nParameter Description:\n\n- num_or_handles:[int, str]-The serial number or handle of the tab to keep, you can pass in a list or tuple of handles\n\nReturns: None\n\n\n\n### to_tab()\n\nJump to the tab page.\n\nParameter Description:\n\n- num_or_handle:[int, str]  - tab page serial number or handle string, the first serial number is 0, the last is - 1\n\nReturns: None\n\n\n\n### to_iframe()\n\nJump to iframe, jump to the highest level by default, compatible with selenium native parameters.\n\nParameter Description:\n\n- loc_or_ele:[int, str, tuple, WebElement, DriverElement]  - Find the condition of iframe element, can receive iframe serial number (starting at 0), id or name, query string, loc parameter, WebElement object, DriverElement object, and pass in ' main' jump to the highest level, and pass in'parent' to jump to the upper level\n\nExample:\n- to_iframe('tag:iframe')- locate by the query string passed in iframe\n- to_iframe('iframe_id')- Positioning by the id attribute of the iframe\n- to_iframe('iframe_name')- locate by the name attribute of iframe\n- to_iframe(iframe_element)- locate by passing in the element object\n- to_iframe(0)- locate by the serial number of the iframe\n- to_iframe('main')- jump to the top level\n- to_iframe('parent')- jump to the previous level\n\nReturns: None\n\n\n\n### scroll_to_see()\n\nScroll until the element is visible.\n\nParameter Description:\n\n- loc_or_ele:[str, tuple, WebElement, DriverElement]  - The conditions for finding elements are the same as those of the ele() method.\n\nReturns: None\n\n\n\n### scroll_to()\n\nScroll the page and decide how to scroll according to the parameters.\n\nParameter Description:\n\n- mode: str  - scroll direction, top, bottom, rightmost, leftmost, up, down, left, right\n- pixel: int  - scrolling pixel\n\nReturns: None\n\n\n\n### refresh()\n\nrefresh page.\n\nReturns: None\n\n\n\n### back()\n\nThe page goes back.\n\nReturns: None\n\n\n\n### set_window_size()\n\nSet the window size, maximize by default.\n\nParameter Description:\n\n- x: int  - target width\n- y: int  - target height\n\nReturns: None\n\n\n\n### screenshot()\n\nTake a screenshot of the web page and return the path of the screenshot file\n\nParameter Description:\n\n- path: str  - The screenshot save path, the default is the temporary folder specified in the ini file\n- filename: str  - the name of the screenshot file, the default is the page title as the file name\n\nReturns: str\n\n\n\n### chrome_downloading()\n\nReturn to the list of files downloaded by the browser.\n\nParameter Description:\n\n- download_path: str  - download folder path\n\nReturns: list\n\n\n\n### process_alert()\n\nProcess the prompt box.\n\nParameter Description:\n\n- mode: str  - 'ok' or'cancel', if another value is entered, the button will not be pressed but the text value will still be returned\n- text: str  - You can enter text when processing the prompt box\n\nReturns: [str, None]  - the text of the prompt box content\n\n\n\n### close_driver()\n\nClose the driver and browser.\n\nReturns: None\n\n\n\n### close_session()\n\nClose the session.\n\nReturns: None\n\n\n\n## DriverElement class\n\n### class DriverElement()\n\nThe element object in driver mode encapsulates a WebElement object and encapsulates common functions.\n\nParameter Description:\n\n- ele: WebElement- WebElement object\n- page: DriverPage- the page object where the element is located\n- timeout: float  - Find the timeout of the element (it can be set separately each time the element is searched)\n\n\n\n### inner_ele\n\nThe wrapped WebElement object.\n\nReturns: WebElement\n\n\n\n### html\n\nReturns the outerHTML text of the element.\n\nReturns: str\n\n\n\n### inner_html\n\nReturns the innerHTML text of the element.\n\nReturns: str\n\n\n\n### tag\n\nReturns the element tag name.\n\nReturns: str\n\n\n\n### attrs\n\nReturn all attributes and values ​​of the element in a dictionary.\n\nReturns: dict\n\n\n\n### text\n\nReturns the text inside the element.\n\nReturns: str\n\n\n\n### link\n\nReturns absolute href or src value of the element.\n\nReturns: str\n\n\n\n### css_path\n\nReturns the absolute path of the element css selector.\n\nReturns: str\n\n\n\n### xpath\n\nReturns the absolute path of the element xpath.\n\nReturns: str\n\n\n\n### parent\n\nReturns the parent element object.\n\nReturns: DriverElement\n\n\n\n### next\n\nReturn the next sibling element object.\n\nReturns: DriverElement\n\n\n\n### prev\n\nReturns the previous sibling element object.\n\nReturns: DriverElement\n\n\n\n### size\n\nReturn the element size in a dictionary.\n\nReturns: dict\n\n\n\n### location\n\nReplace the element coordinates in a dictionary.\n\nReturns: dict\n\n\n\n### shadow_root\n\nReturns the shadow_root element object of the current element\n\nReturns: ShadowRoot\n\n\n\n### before\n\nReturns the content of the ::before pseudo- element of the current element\n\nReturns: str\n\n\n\n### after\n\nReturns the content of the ::after pseudo element of the current element\n\nReturns: str\n\n\n\n### texts()\n\nReturns the text of all direct child nodes within the element, including elements and text nodes\n\nParameter Description:\n\n- text_node_only: bool  - whether to return only text nodes\n\nReturns: List[str]\n\n\n\n### parents()\n\nReturns the Nth level parent element object.\n\nParameter Description:\n\n- num: int  - which level of parent element\n\nReturns: DriverElement\n\n\n\n### nexts()\n\nReturns the text of the numth sibling element or node.\n\nParameter Description:\n\n- num: int  - the next sibling element or node\n- mode: str  - 'ele','node' or'text', matching element, node, or text node\n\nReturns: [DriverElement, str]\n\n\n\n### prevs()\n\nReturns the text of the previous num sibling element or node.\n\nParameter Description:\n\n- num: int  - the previous sibling element or node\n- mode: str  - 'ele','node' or'text', matching element, node, or text node\n\nReturns: [DriverElement, str]\n\n\n\n### attr()\n\nGet the value of an attribute of an element.\n\nParameter Description:\n\n- attr: str  - attribute name\n\nReturns: str\n\n\n\n### ele()\n\nReturns the sub- elements, attributes or node texts of the current element that meet the conditions.\nIf the query parameter is a string, the options of '@attribute name:', 'tag:', 'text:', 'css:', 'xpath:', '.', '#' are available. When there is no control mode, the text mode is used to search by default.\nIf it is loc, query directly according to the content.\n\nParameter Description:\n\n- loc_or_str: [Tuple[str, str], str]  - the positioning information of the element, which can be a loc tuple or a query string\n- mode: str  - 'single' or'all', corresponding to find one or all\n- timeout: float  - Find the timeout of the element\n\nExample:\n\n- Find with loc tuple:\n\n  - ele.ele((By.CLASS_NAME,'ele_class'))  - returns the first child element whose class is ele_class\n\n- Find with query string:\n\n  Attributes, tag name and attributes, text, xpath, css selector, id, class.\n\n  @ Means attribute,. Means class, # means id, = means exact match,: means fuzzy match, the string is searched by default when there is no control string.\n\n  - ele.ele('.ele_class')-returns the first child element whose class is ele_class\n\n  - ele.ele('.:ele_class')-returns the child elements of the first class that contain ele_class\n\n  - ele.ele('#ele_id')-returns the first child element with id ele_id\n\n  - ele.ele('#:ele_id')-Returns the child element with ele_id in the first id\n\n  - ele.ele('@class:ele_class')-returns the first class that contains e le_class\n\n  - ele.ele('@name=ele_name')-returns the first child element whose name is equal to ele_name\n\n  - ele.ele('@placeholder')-returns the first child element with placeholder attribute\n\n  - ele.ele('tag:p')-returns the first p child element\n\n  - ele.ele('tag:div@class:ele_class')-returns the first div sub-element that contains ele_class\n\n  - ele.ele('tag:div@class=ele_class')-returns the first div child element whose class is equal to ele_class\n\n  - ele.ele('tag:div@text():some_text')-returns the first div child element whose text contains some_text\n\n  - ele.ele('tag:div@text()=some_text')-returns the first div child element whose text is equal to some_tex t\n\n  - ele.ele('text:some_text')-returns the first child element whose text contains some_text\n\n  - ele.ele('some_text')-returns the first text element with some_text (equivalent to the previous line)\n\n  - ele.ele('text=some_text')-returns the first child element whose text is equal to some_text\n\n  - ele.ele('xpath://div[@class=\"ele_class\"]')-Return the first child element that matches xpath\n\n  - ele.ele('css:div.ele_class')-returns the first child element that matches the css selector\n\nReturns: [DriverElement, str]\n\n\n\n### eles()\n\nGet the list of elements that meet the conditions according to the query parameters. The query parameter usage method is the same as the ele method.\n\nParameter Description:\n\n- loc_or_str: [Tuple[str, str], str]  - query condition parameter\n- timeout: float  - Find the timeout of the element\n\nReturns: List[DriverElement or str]\n\n\n\n### get_style_property()\n\nReturns the element style attribute value.\n\nParameter Description:\n\n- style: str  - style attribute name\n- pseudo_ele: str  - pseudo element name\n\nReturns: str\n\n\n\n### click()\n\nClick on the element. If it is unsuccessful, click in js mode. You can specify whether to click in js mode.\n\nParameter Description:\n\n- by_js: bool  - whether to click with js\n\nReturns: bool\n\n\n\n### input()\n\nEnter text and return whether it is successful.\n\nParameter Description:\n\n- value: str  - text value\n- clear: bool  - whether to clear the text box before typing\n\nReturns: bool\n\n\n\n### run_script()\n\nExecute the js code and pass in yourself as the first parameter.\n\nParameter Description:\n\n- script: str  - JavaScript text\n- *args  - incoming parameters\n\nReturns: Any\n\n\n\n### submit()\n\nsubmit Form.\n\nReturns: None\n\n\n\n### clear()\n\nClear the text box.\n\nReturns: None\n\n\n\n### is_selected()\n\nWhether the element is selected.\n\nReturns: bool\n\n\n\n### is_enabled()\n\nWhether the element is available on the page.\n\nReturns: bool\n\n\n\n### is_displayed()\n\nWhether the element is visible.\n\nReturns: bool\n\n\n\n### is_valid()\n\nWhether the element is still in the DOM. This method is used to determine when the page jump element cannot be used\n\nReturns: bool\n\n\n\n### screenshot()\n\nTake a screenshot of the web page and return the path of the screenshot file\n\nParameter Description:\n\n- path: str  - The screenshot save path, the default is the temporary folder specified in the ini file\n- filename: str  - the name of the screenshot file, the default is the page title as the file name\n\nReturns: str\n\n\n\n### select()\n\nSelect from the drop- down list.\n\nParameter Description:\n\n- text: str  - option text\n\nReturns: bool  - success\n\n\n\n### set_attr()\n\nSet element attributes.\n\nParameter Description:\n\n- attr: str - parameter name\n- value: str - parameter value\n\nReturns: bool - whether it was successful\n\n### remove_attr()\n\nRemove element attributes.\n\nParameter Description:\n\n- attr: str -parameter name\n\nReturns: bool - whether it was successful\n\n### drag()\n\nDrag the current element a certain distance, and return whether the drag is successful.\n\nParameter Description:\n\n- x: int - drag distance in x direction\n- y: int - drag distance in y direction\n- speed: int - drag speed\n- shake: bool - whether to shake randomly\n\nReturns: bool\n\n\n\n### drag_to()\n\nDrag the current element, the target is another element or coordinate tuple, and return whether the drag is successful.\n\nParameter Description:\n\n- ele_or_loc[tuple, WebElement, DrissionElement]  - Another element or relative current position, the coordinates are the coordinates of the element's midpoint.\n- speed: int  - drag speed\n- shake: bool  - whether to shake randomly\n\nReturns: bool\n\n\n\n### hover()\n\nHover the mouse over the element.\n\nReturns: None\n\n\n\n## SessionElement Class\n\n### class SessionElement()\n\nThe element object in session mode encapsulates an Element object and encapsulates common functions.\n\nParameter Description:\n\n- ele: HtmlElement  - HtmlElement object of lxml library\n- page: SessionPage  - the page object where the element is located\n\n\n\n### inner_ele\n\nThe wrapped HTMLElement object.\n\nReturns: HtmlElement\n\n\n\n### html\n\nReturns the outerHTML text of the element.\n\nReturns: str\n\n\n\n### inner_html\n\nReturns the innerHTML text of the element.\n\nReturns: str\n\n\n\n### tag\n\nReturns the element tag name.\n\nReturns: srt\n\n\n\n### attrs\n\nReturns the names and values of all attributes of the element in dictionary format.\n\nReturns: dict\n\n\n\n### text\n\nReturns the text within the element, namely innerText.\n\nReturns: str\n\n\n\n### link\n\nReturns absolute href or src value of the element.\n\nReturns: str\n\n\n\n### css_path\n\nReturns the absolute path of the element css selector.\n\nReturns: srt\n\n\n\n### xpath\n\nReturns the absolute path of the element xpath.\n\nReturns: srt\n\n\n\n### parent\n\nReturns the parent element object.\n\nReturns: SessionElement\n\n\n\n### next\n\nReturn the next sibling element object.\n\nReturns: SessionElement\n\n\n\n### prev\n\nReturns the previous sibling element object.\n\nReturns: SessionElement\n\n\n\n### parents()\n\nReturns the Nth level parent element object.\n\nParameter Description:\n\n- num: int  - which level of parent element\n\nReturns: SessionElement\n\n\n\n### nexts()\n\nReturns the text of the numth sibling element or node.\n\nParameter Description:\n\n- num- the next few sibling elements\n- mode: str  - 'ele','node' or'text', matching element, node, or text node\n\nReturns: [SessionElement, str]\n\n\n\n### prevs()\n\nReturn the first N sibling element objects.\n\nParameter Description:\n\n- num- the first few sibling elements\n- mode: str  - 'ele','node' or'text', matching element, node, or text node\n\nReturns: [SessionElement, str]\n\n\n\n### attr()\n\nGet the value of an attribute of an element.\n\nParameter Description:\n\n- attr: str  - attribute name\n\nReturns: str\n\n\n\n### ele()\n\nGet elements based on query parameters.\nIf the query parameter is a string, you can choose the methods of '@attribute name:', 'tag:', 'text:', 'css:', 'xpath:', '.', '#'. When there is no control mode, the text mode is used to search by default.\nIf it is loc, query directly according to the content.\n\nParameter Description:\n\n- loc_or_str:[Tuple[str, str], str]  - query condition parameter\n\n- mode: str  - Find one or more, pass in'single' or'all'\n\n\nExample:\n\n- Find with loc tuple:\n\n- ele.ele((By.CLASS_NAME,'ele_class'))  - returns the first child element whose class is ele_class\n\n- Find with query string:\n\nAttributes, tag name and attributes, text, xpath, css selector, id, class.\n\n@ Means attribute,. Means class, # means id, = means exact match,: means fuzzy match, the string is searched by default when there is no control string.\n\n- ele.ele('.ele_class')-returns the first child element whose class is ele_class\n\n- ele.ele('.:ele_class')-returns the child elements of the first class that contain ele_class\n\n- ele.ele('#ele_id')-returns the first child element with id ele_id\n\n- ele.ele('#:ele_id')-Returns the child element with ele_id in the first id\n\n- ele.ele('@class:ele_class')-returns the first class that contains e le_class\n\n- ele.ele('@name=ele_name')-returns the first child element whose name is equal to ele_name\n\n- ele.ele('@placeholder')-returns the first child element with placeholder attribute\n\n- ele.ele('tag:p')-returns the first p child element\n\n- ele.ele('tag:div@class:ele_class')-returns the first div sub-element that contains ele_class\n\n- ele.ele('tag:div@class=ele_class')-returns the first div child element whose class is equal to ele_class\n\n- ele.ele('tag:div@text():some_text')-returns the first div child element whose text contains some_text\n\n- ele.ele('tag:div@text()=some_text')-returns the first div child element whose text is equal to some_tex t\n\n- ele.ele('text:some_text')-returns the first child element whose text contains some_text\n\n- ele.ele('some_text')-returns the first text element with some_text (equivalent to the previous line)\n\n- ele.ele('text=some_text')-returns the first child element whose text is equal to some_text\n\n- ele.ele('xpath://div[@class=\"ele_class\"]')-Return the first child element that matches xpath\n\n- ele.ele('css:div.ele_class')-returns the first child element that matches the css selector\n\nReturns: [SessionElement, str]\n\n\n\n### eles()\n\nGet the list of elements that meet the conditions according to the query parameters. The query parameter usage method is the same as the ele method.\n\nParameter Description:\n\n- loc_or_str: [Tuple[str, str], str]  - query condition parameter\n\nReturns: List[SessionElement or str]\n\n\n\n## ShadowRootElement class\n\n### class ShadowRootElement()\n\nThe shadow-root element within the element.\n\nParameter Description:\n\n- inner_ele: WebElement-the shadow-root element obtained by selenium\n\n- parent_ele: DriverElement-the element to which the shadow-root is attached\n\n- timeout: float-timeout\n\n\n\n### tag\n\nElement tag name.\n\nReturns: the'shadow-root' string.\n\n\n\n### html\n\nInternal html text.\n\nReturns: str\n\n\n\n### parent\n\nThe parent element on which the shadow-root depends.\n\nReturns: DriverElement\n\n\n\n### next\n\nReturn the next sibling element.\n\nReturns: DriverElement\n\n\n\n### parents()\n\nReturn the parent element at level num above\n\nParameter Description:\n\n- num: int-which level of parent element\n\nReturns: DriverElement\n\n\n\n### nexts()\n\nReturn the next num sibling element\n\nParameter Description:\n\n- num: int-which sibling element\n\nReturns: DriverElement\n\n\n\n### ele()\n\nReturns the first child element that meets the criteria.\n\nParameter Description:\n\n- loc_or_str: Union[Tuple[str, str], str]-element positioning conditions\n\n- mode: str-'single' or'all', corresponding to get one and all\n\n- timeout: float-timeout\n\nReturns: DriverElement-the first element that meets the conditions\n\n\n\n### eles()\n\nReturn all sub-elements that meet the criteria.\n\nParameter Description:\n\n- loc_or_str: Union[Tuple[str, str], str]-element positioning conditions\n\n- timeout: float-timeout\n\nReturns: List[DriverElement]-a list of all eligible elements\n\n\n\n### run_script()\n\nExecute js code on the element.\n\nParameter Description:\n\n- scrpit: str-js code\n\n- *args-the object passed in\n\n\n\n### is_enabled()\n\nReturns whether the element is available.\n\nReturns: bool\n\n\n\n### is_valid()\n\nReturns whether the element is still in the dom.\n\nReturns: bool\n\n\n\n## OptionsManager class\n\n### class OptionsManager()\n\nThe class that manages the content of the configuration file.\n\nParameter Description:\n\n- path: str  - the path of the ini file, if not passed in, the configs.ini file in the current folder will be read by default\n\n\n\n### paths\n\nReturn paths setting information.\n\nReturns: dict\n\n\n\n### chrome_options\n\nReturn to chrome setting information.\n\nReturns: dict\n\n\n\n### session_options\n\nReturn session setting information.\n\nReturns: dict\n\n\n\n### get_value()\n\nGet the configured value.\n\nParameter Description:\n\n- section: str  - section name\n- item: str  - configuration item name\n\nReturns: Any\n\n\n\n### get_option()\n\nReturn the configuration information of the entire paragraph in dictionary format.\n\nParameter Description:\n\n- section: str  - section name\n\nReturns: dict\n\n\n\n### set_item()\n\nSet the configuration value and return to yourself for chain operation.\n\nParameter Description:\n\n- section: str  - section name\n- item: str  - configuration item name\n- value: Any  - value content\n\nReturn: OptionsManager  - return to yourself\n\n\n\n### save()\n\nSave the settings to a file and return to yourself for chain operation.\n\nParameter Description:\n\n- path: str - the path of the ini file, pass in 'default' would save to the default ini file\n\nReturn: OptionsManager - return to yourself\n\n## SessionOptions class\n\n### class SessionOptions()\n\nSession object configuration class.\n\nParameter Description:\n\n-read_file: bool-whether to read configuration information from ini file when creating -ini_path: str-the path of the\nini file, if it is None, the default ini file will be read\n\n### headers\n\nheaders configuration information.\n\nReturns: dict\n\n### cookies\n\nCookies configuration information.\n\nReturns: list\n\n### auth\n\nauth configuration information.\n\nReturns: tuple\n\n### proxies\n\nproxies configuration information.\n\nReturns: dict\n\n### hooks\n\nhooks configuration information.\n\nReturns: dict\n\n### params\n\nparams configuration information.\n\nReturns: dict\n\n### verify\n\nVerify configuration information.\n\nReturns: bool\n\n### cert\n\ncert configuration information.\n\nReturns: [str, tuple]\n\n### adapters\n\nAdapters configuration information.\n\nReturns: adapters\n\n### stream\n\nstream configuration information.\n\nReturns: bool\n\n### trust_env\n\nsrust_env configuration information.\n\nReturns: bool\n\n### max_redirects\n\nmax_redirect configuration information.\n\nReturns: int\n\n### set_a_header()\n\nSet an item in headers.\n\nParameter Description:\n\n- attr: str-configuration item name\n\n- value: str-configured value\n\nReturns: the current object\n\n### remove_a_header()\n\nRemove a setting from headers.\n\nParameter Description:\n\n- attr: str-the name of the configuration to be deleted\n\nReturns: current object\n\n### save()\n\nSave the settings to a file.\n\nParameter Description:\n\n- path: str-the path of the ini file, pass in'default' and save to the default ini file\n\nReturns: current object\n\n### as_dict()\n\nReturn the current object as a dictionary.\n\nReturns: dict\n\n## DriverOptions class\n\n### class DriverOptions()\n\nThe Chrome browser configuration class, inherited from the Options class of selenium.webdriver.chrome.options, adds the\nmethods of deleting configuration and saving to file.\n\nParameter Description:\n\n- read_file: bool - Whether to read configuration information from the ini file when creating\n- ini_path: str - ini file path, if it is None, the default ini file will be read\n\n\n\n### driver_path\n\nThe path of chromedriver.exe.\n\nReturns: str\n\n\n\n### chrome_path\n\nchrome.exe path\n\nReturns: str\n\n\n\n### save()\n\nSave the settings to a file and return to yourself for chain operation.\n\nParameter Description:\n\n- path: str  - the path of the ini file, pass in 'default' would save to the default ini file\n\nReturn: DriverOptions  - return self\n\n\n\n### remove_argument()\n\nRemove a setting.\n\nParameter Description:\n\n- value: str  - the attribute value to be removed\n\nReturn: DriverOptions  - return self\n\n\n\n### remove_experimental_option()\n\nRemove an experiment setting and delete the key value.\n\nParameter Description:\n\n- key: str  - the key value of the experiment setting to be removed\n\nReturn: DriverOptions  - return self\n\n\n\n### remove_all_extensions()\n\nRemove all plug- ins, because plug- ins are stored in the entire file, it is difficult to remove one of them, so if you need to set, remove all and reset.\n\nReturn: DriverOptions  - return self\n\n\n\n### set_argument()\n\nSet the chrome attribute, the attribute with no value can be set to switch, and the attribute with value can set the value of the attribute.\n\nParameter Description:\n\n- arg: str  - attribute name\n- value[bool, str]  - attribute value, the attribute with value is passed in the value, and the attribute without value is passed in bool\n\nReturn: DriverOptions    - return self\n\n\n\n### set_headless()\n\nTurn on or off the interfaceless mode.\n\nParameter Description:\n\non_off: bool  - turn on or off\n\nReturn: DriverOptions  - return self\n\n\n\n### set_no_imgs()\n\nWhether to load the picture.\n\nParameter Description:\n\non_off: bool  - turn on or off\n\nReturn: DriverOptions  - return self\n\n\n\n### set_no_js()\n\nWhether to disable js.\n\nParameter Description:\n\non_off: bool  - turn on or off\n\nReturn: DriverOptions  - return self\n\n\n\n### set_mute()\n\nWhether to mute.\n\nParameter Description:\n\non_off: bool  - turn on or off\n\nReturn: DriverOptions  - return self\n\n\n\n### set_user_agent()\n\nSet the browser user agent.\n\nParameter Description:\n\n- user_agent: str  - user agent string\n\nReturn: DriverOptions    - return self\n\n\n\n### set_proxy()\n\nSet up a proxy.\n\nParameter Description:\n\n- proxy: str  - proxy address\n\nReturn: DriverOptions    - return self\n\n\n\n### set_paths()\n\nSet the path related to the browser.\n\nParameter Description:\n\n- driver_path: str  - the path of chromedriver.exe\n- chrome_path: str  - the path of chrome.exe\n- debugger_address: str  - debug browser address, for example: 127.0.0.1:9222\n- download_path: str  - download file path\n- user_data_path: str  - user data path\n- cache_path: str  - cache path\n\nReturn: DriverOptions    - return self\n\n\n\n## easy_set method\n\nChrome configuration is too complicated, so the commonly used configuration is written as a simple method, and the related content of the ini file will be modified by calling.\n\n### get_match_driver()\n\nAutomatically identify the chrome version and download the matching driver. Get the chrome.exe path recorded in the ini file, if not, get the path in the system variable.\n\nParameter Description:\n\n- ini_path: str-the path of the ini file to be read and modified\n\n- save_path: str-chromedriver save path\n\nReturns: None\n\n\n\n### show_settings()\n\nPrint all configuration information in the ini file.\n\nParameter Description:\n\n- ini_path: str-ini file path, if it is None, read the default ini file\n\nReturns: None\n\n\n\n### set_paths()\n\nConvenient way to set the path, save the passed path to an ini file, and check whether the chrome and chromedriver versions match.\n\nParameter Description:\n\n- driver_path: str-chromedriver.exe path\n\n- chrome_path: str-chrome.exe path\n\n- debugger_address: str-debug browser address, for example: 127.0.0.1:9222\n\n- download_path: str-download file path\n\n- tmp_path: str-Temporary folder path\n\n- user_data_path: str-user data path\n\n- cache_path: str-cache path\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\n- check_version: bool-whether to check if chromedriver and chrome match\n\nReturns: None\n\n\n\n### set_argument()\n\nSet the properties. If the attribute has no value (such as'zh_CN.UTF-8' ), value is passed in bool to indicate a switch; otherwise, value is assigned to the attribute. When value is'' or False, delete the attribute item.\n\nParameter Description:\n\n- arg: str-attribute name\n\n- value: [bool, str]-attribute value, the value attribute is passed in the value, and the non-property is passed in bool\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_headless()\n\nTurn headless mode on or off.\n\nParameter Description:\n\n- on_off: bool-whether to turn on headless mode\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_no_imgs()\n\nTurn picture display on or off.\n\nParameter Description:\n\n- on_off: bool-whether to turn on the no image mode\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_no_js()\n\nTurn on or off disable JS mode.\n\nParameter Description:\n\n- on_off: bool-whether to enable or disable JS mode\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_mute()\n\nTurn on or off the silent mode.\n\nParameter Description:\n\n- on_off: bool-whether to turn on silent mode\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_user_agent()\n\nSet user_agent.\n\nParameter Description:\n\n- user_agent: str-user_agent value\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### set_proxy()\n\nSet up a proxy.\n\nParameter Description:\n\n- proxy: str-proxy value\n\n- ini_path: str-ini file path, if it is None, save to the default ini file\n\nReturns: None\n\n\n\n### check_driver_version()\n\nCheck if the chrome and chromedriver versions match.\n\nParameter Description:\n\n- driver_path: bool  -  chromedriver.exe path\n- chrome_path: boo  -  chrome.exe path\n\nReturns: bool\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/g1879/DrissionPage",
    "keywords": "DrissionPage",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DrissionPage",
    "package_url": "https://pypi.org/project/DrissionPage/",
    "platform": "",
    "project_url": "https://pypi.org/project/DrissionPage/",
    "project_urls": {
      "Homepage": "https://github.com/g1879/DrissionPage"
    },
    "release_url": "https://pypi.org/project/DrissionPage/1.7.3/",
    "requires_dist": [
      "selenium",
      "lxml",
      "tldextract",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A module that integrates selenium and requests session, encapsulates common page operations.",
    "version": "1.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17552282,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "428411aef32b4989f21e57b5b4c6073d7e31851dec7309591f74020adcc323a7",
        "md5": "e8e875618b257549f902781d8a1c7d79",
        "sha256": "a5619374c1f2f54a74172538681c1d425e108902373121906bf2820667653719"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.7.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e8e875618b257549f902781d8a1c7d79",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 70577,
      "upload_time": "2020-12-08T06:36:32",
      "upload_time_iso_8601": "2020-12-08T06:36:32.868320Z",
      "url": "https://files.pythonhosted.org/packages/42/84/11aef32b4989f21e57b5b4c6073d7e31851dec7309591f74020adcc323a7/DrissionPage-1.7.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a882f6c7f533aafafae3b474d5195c56feafe909023c8f83506607b39de5b542",
        "md5": "294eec6bb4733e96b4cc8c75d99b1805",
        "sha256": "afedfa725337c1a0ef5669c432db3e6dcb57fbb4d635f1bb7bc67729800e8723"
      },
      "downloads": -1,
      "filename": "DrissionPage-1.7.3.tar.gz",
      "has_sig": false,
      "md5_digest": "294eec6bb4733e96b4cc8c75d99b1805",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 103326,
      "upload_time": "2020-12-08T06:36:35",
      "upload_time_iso_8601": "2020-12-08T06:36:35.520086Z",
      "url": "https://files.pythonhosted.org/packages/a8/82/f6c7f533aafafae3b474d5195c56feafe909023c8f83506607b39de5b542/DrissionPage-1.7.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}