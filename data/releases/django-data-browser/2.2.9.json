{
  "info": {
    "author": "Gordon Wrigley",
    "author_email": "gordon.wrigley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "****************************************************************\nInteractive and user friendly querying of Django project DBs.\n****************************************************************\n\n.. image:: https://raw.githubusercontent.com/tolomea/django-data-browser/master/screenshot.png\n    :alt: screenshot\n    :align: center\n\n.. contents::\n    :depth: 1\n\n\nDemo\n*************************\n\nThere is a live demo site available here https://data-browser-demo.herokuapp.com/data-browser/.\n\nBecause it's hosted on Heroku free tier it might take a while to respond to the first page load.\n\nThe Django project is a small e-commerce site selling microservices.\n\nSource: https://github.com/tolomea/data-browser-demo.\n\nAdmin: https://data-browser-demo.herokuapp.com/admin/.\n\n\nFeatures\n*************************\n\n* Zero config, if it's in the admin it's in the browser.\n* Select fields (including calculated fields), aggregate, filter, sort and pivot.\n* Automatically follow OneToOneFields and ForeignKeys.\n* Respects per user admin permissions.\n* Share views simply by sharing URLs.\n* Save views and optionally make them available to services like Google sheets.\n* Download views as CSV or JSON.\n\n\nInstallation\n*************************\n\n1. Run ``pip install django-data-browser``.\n2. Add ``\"data_browser\"`` to installed_apps.\n3. Add ``path(\"data-browser/\", include(\"data_browser.urls\"))`` to your urls.\n4. Run ``python manage.py migrate``.\n5. If you have queryset annotations in your admin or are interested in exposing calculated values see the `Calculated and Annotated fields`_ section.\n\n\nSettings\n*************************\n\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n| Name                           | Default | Docs Section     | Function                                                                                           |\n+================================+=========+==================+====================================================================================================+\n| DATA_BROWSER_ALLOW_PUBLIC      | False   | `Security`_      | Allow selected saved views to be accessed without admin login in limited circumstances.            |\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n| DATA_BROWSER_AUTH_USER_COMPAT  | True    | `Performance`_   | When calling ``get_fieldsets`` on a ``UserAdmin`` always pass an instance of the associated model. |\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n| DATA_BROWSER_DEFAULT_ROW_LIMIT | 1000    |                  | The default value for the row limit selector in the UI.                                            |\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n| DATA_BROWSER_DEV               | False   | CONTRIBUTING.rst | Enable proxying frontend to JS dev server.                                                         |\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n| DATA_BROWSER_FE_DSN            | None    | `Sentry`_        | The DSN the frontend sentry should report to, disabled by default.                                 |\n+--------------------------------+---------+------------------+----------------------------------------------------------------------------------------------------+\n\n\nSecurity\n*************************\n\nMost of the Django views in the Data Browser can only be accessed by Django \"staff members\". These views support general querying of the database, checked against the admin permissions of the logged in user.\n\nThe only exception to this is \"Public Saved Views\" these are views which have been saved and marked as public. They can be accessed by anyone without needing a login but they can only be used to access a query that has been saved and made public and they have long random URL's.\n\nYou can use the admin permission ``data_browser | view | Can make a saved view publically available`` to restrict who can make views public. To be public the view must be marked as public and owned by someone who has the permission.\n\nAdditionally the entire public views system is gated by the Django settings value ``DATA_BROWSER_ALLOW_PUBLIC``.\n\n\nSentry\n*************************\n\nThe frontend code has builtin Sentry support, it is **disabled by default**. To enable it set the Django settings value ``DATA_BROWSER_FE_DSN``, for example to set it to the Data Browser project Sentry use:\n\n.. code-block:: python\n\n    DATA_BROWSER_FE_DSN = \"https://af64f22b81994a0e93b82a32add8cb2b@o390136.ingest.sentry.io/5231151\"\n\n\nLinking to the Data Browser\n****************************\n\nThe home page URL of the Data Browser is given by ``reverse(\"data_browser:home\")``.\n\nAdditionally if you are using ``data_browser.helpers.AdminMixin`` then in Admin list views the URL of the Data Browser page for the same model is available as the template context variable ``ddb_url``.\n\nOne convenient way of utilizing this is to create the file ``templates/admin/change_list_object_tools.html`` and populate it with:\n\n.. code-block:: html\n\n    {% extends \"admin/change_list_object_tools.html\" %}\n    {% block object-tools-items %}\n        {{ block.super }}\n        {% if ddb_url %}\n            <li><a href=\"{{ ddb_url }}\" class=\"viewlink\">Data Browser</a></li>\n        {% endif %}\n    {% endblock %}\n\nThis will place a \"Data Browser\" button on the list view of every admin that inherits from the mixin.\n\n\n\nSpecifying models and fields\n********************************\n\nBy default the Data Browser has access to all models and fields that the current user can see anywhere in the Admin site.\nHowever if necessary this can be tweaked using the following class level properties on ModelAdmins and Inlines.\n\n+------------------+---------------------+------------------------------------------------------------------------------------------------------------+\n| Name             | Format              | Purpose                                                                                                    |\n+==================+=====================+============================================================================================================+\n| ddb_ignore       | Boolean             | Ignore this Admin / Inline entirely, will still show fields from other Inlines / Admins on the same model. |\n+------------------+---------------------+------------------------------------------------------------------------------------------------------------+\n| ddb_hide_fields  | List of field names | Explicitly hide the specified fields.                                                                      |\n+------------------+---------------------+------------------------------------------------------------------------------------------------------------+\n| ddb_extra_fields | List of field names | Add additional fields that are not mentioned in fields, fieldsets or list_display.                         |\n+------------------+---------------------+------------------------------------------------------------------------------------------------------------+\n\nAdditionally, per the below sections, calculated fields can be hidden with the ``data_browser.helpers.ddb_hide`` decorator and annotated fields are always visible unless explicitly hidden.\n\n\nCalculated and Annotated fields\n********************************\n\nCalculated\n########################################\n\nCalculated fields are fields on the ModelAdmin whose value comes from a function on the ModelAdmin or a function or property on the Model itself, as described at the bottom of the `Django admin list display docs <https://docs.djangoproject.com/en/3.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display>`_.\n\nBeing arbitrary Python code calculated fields are opaque to the Data Browser. It can fetch their values but can't sort or filter etc on them. For pivoting they are treated as equivalent to the pk on the same model.\n\nAdditionally calculated fields can be hidden from the Data Browser by applying the ``data_browser.helpers.ddb_hide`` decorator.\n\n.. code-block:: python\n\n    @ddb_hide\n    def my_calculated_field(self, obj):\n        return ...\n\nAnnotated\n########################################\n\nThe Data Browser has additional support for annotated fields. Normally you would expose these as calculated fields. The module ``data_browser.helpers`` contains helpers which will make exposing annotated fields simpler, more performant and expose them to the Data Browser so it can do arbitrary manipulation with them.\n\nExposing an a annotated field in this way requires two changes.\n\n1. Mix ``data_browser.helpers.AdminMixin`` into your ModelAdmin.\n2. Add a function decorated with ``data_browser.helpers.annotation`` that takes and updates a queryset.\n\n.. code-block:: python\n\n    from data_browser.helpers import AdminMixin, annotation\n\n    @admin.register(MyModel)\n    class MyAdmin(AdminMixin, ModelAdmin):\n        fields = [\"my_field\"]\n\n        @annotation\n        def my_field(self, request, qs):\n            return qs.annotate(my_field=Cast(..., output_field=IntegerField()))\n\n\nIt is important that the decorated annotation function name and the annotated queryset field name match.\n\nSometimes it is necessary for the top level of the annotation to have ``output_field`` set so the Data Browser can tell what type of data it will produce. When this is necessary you will get an error to that effect.\n\nThe helpers will automatically deal with the ``admin_order_field`` and ``boolean`` properties and ``readonly_fields``, reducing the boiler plate involved in using annotations in the admin.\n\nAdditionally the annotation will only be applied to the list view when it's mentioned in ``list_display`` this allows you to use annotations extensively on your detail views without hurting the performance of your list views.\n\nAnd finally even if not mentioned in fields, fieldsets or list_display, the annotation will still be visible in the data browser unless it is explicitly mentioned in ``ddb_hide_fields``.\n\n\nPerformance\n******************************\n\nget_queryset\n########################################\n\nThe Data Browser does it's fetching in two stages.\n\nFirst it does a single DB query to get the majority of the data. To construct the queryset for this it will call get_queryset on the ModelAdmin of the current Model. It uses ``.values()`` to fetch only the data it needs from the database and it will inline all referenced models to ensure it doesn't do multiple queries.\n\nAt this stage annotated fields on related models are attached with subquery annotations, the data_browser will call get_queryset on the relevant ModelAdmins in order to generate these subquery annotations.\n\nSecondly for any calculated fields it will then fetch the complete objects that are needed for those calculated fields. To construct the querysets for these it will call get_queryset on their associated ModelAdmins. These calls are aggregated so it will only make one per model.\n\nAs a simple example. If you did a query against the Book model for the fields:\n\n* ``book.name``\n* ``book.author.name``\n* ``book.author.age``\n* ``book.author.number_of_books``\n* ``book.publisher.name``\n\nWhere the ``author.age`` is actually a property on the Author Model and ``author.number_of_books`` is an ``@annotation`` on the Author Admin then it would do something like the following two queries:\n\n.. code-block:: python\n\n    BookAdmin.get_queryset().annotate(\n        author__number_of_books=Subquery(\n            AuthorAdmin.get_queryset()\n            .filter(pk=OuterRef(\"author__id\"))\n            .values(\"number_of_books\")[:1]\n        )\n    ).values(\n        \"name\",\n        \"author__name\",\n        \"author__id\",\n        \"author__number_of_books\",\n        \"publisher__name\",\n    )\n    AuthorAdmin.get_queryset().in_bulk(pks=...)\n\nWhere the ``pks`` passed to in_bulk in the second query came from ``author__id`` in the first.\n\nWhen the Data Browser calls the admin ``get_queryset`` functions it will put some context in ``request.data_browser``. This means you can test to see if the Data Browser is making the call as follows:\n\n.. code-block:: python\n\n    if getattr(request, \"data_browser\"):\n        # Data Browser specific customization\n\nThis is particularly useful if you want to route the Data Browser to a DB replica.\n\nThe context also includes a ``fields`` member that lists all the fields the Data Browser plans to access. You can use this to do conditional prefetching or annotating to support those fields like this:\n\n.. code-block:: python\n\n    if (\n        not hasattr(request, \"databrowser\")\n        or \"my_field\" in request.data_browser[\"fields\"]\n    ):\n        # do prefetching and annotating associated with my_field\n\nThe AdminMixin described in the `Calculated and Annotated fields`_ section is doing this internally for ``@annotation`` fields.\n\nget_fieldsets\n########################################\n\nThe Data Browser also calls ``get_fieldsets`` to find out what fields the current user can access.\n\nAs with ``get_queryset`` the Data Browser will set ``request.data_browser`` when calling ``get_fieldsets`` and you can test this to detect it and make Data Browser specific customizations.\n\nThe Django User Admin has code to change the fieldsets when adding a new user. To compensate for this, when calling ``get_fieldsets`` on a subclass of ``django.contrib.auth.admin.UserAdmin`` the Data Browser will pass a newly constructed instance of the relevant model. This behavior can be disabled by setting ``settings.DATA_BROWSER_AUTH_USER_COMPAT`` to ``False``.\n\n\nVersion numbers\n*************************\n\nThe Data Browser uses the standard ``Major.Minor.Patch`` version numbering scheme.\n\nPatch versions may include bug fixes and minor features.\n\nMinor versions are for significant new features.\n\nMajor versions are for major features, significant changes to existing functionality and breaking changes.\n\nPatch and Minor versions should never contain breaking changes and should always be backward compatible. A breaking change is a change that makes backward incompatible changes to one or more of the following:\n\n* The query URL format.\n* The json, csv etc data formats.\n* ``request.data_browser``.\n* Existing saved views.\n* The URL's of public saved views.\n\n\nRelease History\n*************************\n\n+-----------+----------------+---------------------------------------------------------------------------------+\n| Version   | Date           | Summary                                                                         |\n+===========+================+=================================================================================+\n| 2.2.9     | 2020-08-25     | Small fixes.                                                                    |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.8     | 2020-08-23     | Small fixes.                                                                    |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.7     | 2020-08-22     | Small fixes.                                                                    |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.6     | 2020-08-16     | Basic JSONField support.                                                        |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.5     | 2020-08-01     | Bug fix.                                                                        |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.4     | 2020-08-01     | | Additional field support.                                                     |\n|           |                | | Minor features and bug fixes.                                                 |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.2.3** | **2020-07-31** | **File and Image field support**                                                |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.2.2** | **2020-07-26** | **Better support for choice fields.**                                           |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.2.1     | 2020-07-25     | Performance tweaks.                                                             |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.2.0** | **2020-07-21** | **Sort and filter annotated fields.**                                           |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.1.2     | 2020-07-11     | Minor bug fixes.                                                                |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.1.1     | 2020-07-06     | | Bug fixes.                                                                    |\n|           |                | | The representation of empty pivot cells has changed in the JSON.              |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.1.0** | **2020-07-06** | | **Bring views into the JS frontend.**                                         |\n|           |                | | **Implement row limits on results.**                                          |\n|           |                | | All existing saved views will be limited to 1000 rows.                        |\n|           |                | | Better loading and error status indication.                                   |\n|           |                | | Lock column headers.                                                          |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.0.5     | 2020-06-20     | Bug fixes.                                                                      |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.0.4** | **2020-06-18** | **Fix Py3.6 support.**                                                          |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.0.3     | 2020-06-14     | Improve filtering on aggregates when pivoted.                                   |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.0.2     | 2020-06-14     | Improve fonts and symbols.                                                      |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 2.0.1     | 2020-06-14     | Improve sorting when pivoted.                                                   |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **2.0.0** | **2020-06-14** | | **Pivot tables.**                                                             |\n|           |                | | All public view URL's have changed.                                           |\n|           |                | | The JSON data format has changed.                                             |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.2.6     | 2020-06-08     | Bug fixes.                                                                      |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.2.5     | 2020-06-08     | Bug fixes.                                                                      |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **1.2.4** | **2020-06-03** | **Calculated fields interact better with aggregation.**                         |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.2.3     | 2020-06-02     | JS error handling tweaks.                                                       |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.2.2     | 2020-06-01     | Minor fix.                                                                      |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.2.1     | 2020-05-31     | Improved date handling.                                                         |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **1.2.0** | **2020-05-31** | **Support for date functions \"year\", \"month\" etc and filtering based on \"now\".**|\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.6     | 2020-05-24     | Stronger sanitizing of URL strings.                                             |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.5     | 2020-05-23     | Fix bug aggregating time fields.                                                |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.4     | 2020-05-23     | Fix breaking bug with GenericInlineModelAdmin.                                  |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.3     | 2020-05-23     | Cosmetic fixes.                                                                 |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.2     | 2020-05-22     | Cosmetic fixes.                                                                 |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.1.1     | 2020-05-20     | Cosmetic fixes.                                                                 |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| **1.1.0** | **2020-05-20** | **Aggregate support.**                                                          |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.0.2     | 2020-05-17     | Py3.6 support.                                                                  |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.0.1     | 2020-05-17     | Small fixes.                                                                    |\n+-----------+----------------+---------------------------------------------------------------------------------+\n| 1.0.0     | 2020-05-17     | Initial version.                                                                |\n+-----------+----------------+---------------------------------------------------------------------------------+\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tolomea/django-data-browser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-data-browser",
    "package_url": "https://pypi.org/project/django-data-browser/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-data-browser/",
    "project_urls": {
      "Homepage": "https://github.com/tolomea/django-data-browser"
    },
    "release_url": "https://pypi.org/project/django-data-browser/2.2.9/",
    "requires_dist": [
      "Django (>=2.0)",
      "python-dateutil",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "A Django app for interactive user friendly browsing of a Django project DBs.",
    "version": "2.2.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17181385,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b97685f16756522fac8fe8f642fa73bf9bd1190753aed94238a768f5c2c631ed",
        "md5": "4d93950bcf6e8ee04644ff2c058024bd",
        "sha256": "c41b96553b57c293bb04d644c593e7ac12fe3d2e1fcd1c99a0f9186ec50b28d7"
      },
      "downloads": -1,
      "filename": "django_data_browser-2.2.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d93950bcf6e8ee04644ff2c058024bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 412851,
      "upload_time": "2020-08-25T21:52:17",
      "upload_time_iso_8601": "2020-08-25T21:52:17.591777Z",
      "url": "https://files.pythonhosted.org/packages/b9/76/85f16756522fac8fe8f642fa73bf9bd1190753aed94238a768f5c2c631ed/django_data_browser-2.2.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0863ec05eb69d31621798d2e6d30f848a8126cdbb07584df152d4debbfa58f4",
        "md5": "c9f1fa86f716a627c9db2cb26fff090d",
        "sha256": "5e0fbbcbcb5f53406b041b2b08bd8856ca47823147bba99667f403ce3fd3dd2d"
      },
      "downloads": -1,
      "filename": "django-data-browser-2.2.9.tar.gz",
      "has_sig": false,
      "md5_digest": "c9f1fa86f716a627c9db2cb26fff090d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 663460,
      "upload_time": "2020-08-25T21:52:19",
      "upload_time_iso_8601": "2020-08-25T21:52:19.138352Z",
      "url": "https://files.pythonhosted.org/packages/c0/86/3ec05eb69d31621798d2e6d30f848a8126cdbb07584df152d4debbfa58f4/django-data-browser-2.2.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}