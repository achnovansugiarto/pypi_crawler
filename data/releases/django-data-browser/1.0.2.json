{
  "info": {
    "author": "Gordon Wrigley",
    "author_email": "gordon.wrigley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-data-browser\n\nA Django app for interactive user friendly browsing of a Django projects DB.\n\n### Features\n\n-   Zero config, if it's in the admin it's in the browser\n-   Select fields (including calculated fields), sort and fitler\n-   Automatically follow OneToOneFields and ForeignKeys\n-   Respects per user admin permissions\n-   Share views by URL\n-   Save views and optionally make them available to services like Google sheets\n-   Download views as CSV or JSON\n\n### Roadmap (in no particular order)\n\n-   ToMany and aggregation support\n-   Advanced filtering\n-   PII controls\n-   Graphs\n-   Pivoting\n\n## Demo\n\nThere is a live demo site available. The Django project is a small e-commerce site selling microservices.\n\nSource: https://github.com/tolomea/data-browser-demo\n\nAdmin: https://data-browser-demo.herokuapp.com/admin/\n\nData Browser: https://data-browser-demo.herokuapp.com/data-browser/\n\nBecuase it's hosted on Heroku free tier it might take a while to respond to the first page load.\n\n## Installation\n\n1. Run `pip install django-data-browser`\n1. Add `\"data_browser\"` to installed_apps.\n1. Add `path(\"data-browser/\", include(\"data_browser.urls\"))` to your urls.\n1. Run `python manage.py migrate`.\n\n## Security\n\nThere are two types of views in the Data Browser.\n\nQuery views support general querying of the database (checked against the users admin permissions) but can only be accessed by Django \"staff members\".\n\nSaved Views can be accessed by anyone but they can only be used to access a view that has been saved and made public and have long random URL's.\n\nYou can use the admin permission `data_browser | view | Can make a saved view publically available` to restrict who can make views public. To be public the view must be marked as public and owned by someone who has the permission. Users without the permission can not mark views as public and can not edit any view that is marked public.\n\n## Sentry\n\nThe frontend code has builtin Sentry support, it is **disabled by default**. To enable it set the Django settings value `DATA_BROWSER_FE_DSN`, for example to set it to the Data Browser project Sentry use:\n\n```\nDATA_BROWSER_FE_DSN = \"https://af64f22b81994a0e93b82a32add8cb2b@o390136.ingest.sentry.io/5231151\"\n```\n\n## Customization and Performance\n\nFor concrete fields (as oppose to calculated ones) the Data Browser will do appropriate select and prefetch related calls to minimise it's database impact.\n\nThe Data Browser calls the normal admin `get_queryset` functions. You can use these to customize querysets as needed.\n\nIf necessary you can test to see if the databrowser is making the call as follows:\n\n```\nif request.databrowser:\n\t# Data Browser specific customization\n```\n\nThis is particularly useful if you want to route the Data Browser to a DB replica.\n\nThe Data Browser also calls `get_fieldsets` to find out what fields the current user can access. When it does this it always passes a newly constructed instance of the relevant model. This is necessary to work around Django's User admin messing with the fieldsets when `None` is passed.\n\n## Development\n\nThe easiest way to develop this is against your existing client project.\n\nThe compiled Javascript is checked into the repo, so if only want to mess with the Python then it's sufficient to:\n\n1. Install the Data Browser in editable mode `pip install -e <directory to your git clone>`.\n\nIf you want to modify the Javascript then you also need to:\n\n2. Enable proxying to the JS dev server by adding `DATA_BROWSER_DEV = True` to your settings.\n3. Run the Javascript dev server with `WDS_SOCKET_PORT=3000 PUBLIC_URL=data_browser npm start`.\n   The `WDS_SOCKET_PORT` is so the proxied JS can find it's dev server.\n   The `PUBLIC_URL` tells the JS dev server what path to serve from and should be the same as the URL you have mounted the Data Browser on in you urls file.\n\nTo run the Python tests, in the top level of you git clone run `pip install -r requirements.txt` then `pytest`.\n\nThere is also pre-commit config for lint etc to enable this run `pip install pre-commit && pre-commit install` then lint will run on `git commit`. The linting includes Black and isort autoformatting.\n\nTo build the JS, move the files around appropriately and recreate the wheels run `build.sh`.\n\nDuring development it can be useful to look at the `.ctx` and `.json` views. The `.ctx` view will show you the initial context being passed to the Javascript on page load. The `.json` view is the actual API request the Javascript uses to fetch query results.\n\n### Naming\n\n| Name        | Meaning                                                                                                   |\n| ----------- | --------------------------------------------------------------------------------------------------------- |\n| bound query | A query that has been validated against the config                                                        |\n| config      | Information that doesn't change based on the particular query, includes all the models and their fields.  |\n| field name  | Just the name of the field e.g. `created_time`.                                                           |\n| field path  | Includes information on how to reach the model the field is on e.g. `order__seller__created_time`.        |\n| model name  | Fullstop seperated app and model names e.g. `myapp.MyModel`.                                              |\n| model       | In Python the actual model class, in Javascript the model_name.                                           |\n| query       | The information that changes with the query being done, in the Javascript this also includes the results. |\n| view        | A saved query.                                                                                            |\n\n### Structure\n\n![structure](https://raw.githubusercontent.com/tolomea/django-data-browser/master/structure.svg)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tolomea/django-data-browser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-data-browser",
    "package_url": "https://pypi.org/project/django-data-browser/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-data-browser/",
    "project_urls": {
      "Homepage": "https://github.com/tolomea/django-data-browser"
    },
    "release_url": "https://pypi.org/project/django-data-browser/1.0.2/",
    "requires_dist": [
      "Django",
      "python-dateutil",
      "dataclasses ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "git@github.com:tolomea/django-data-browser.git",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17181385,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "756b5c78e4e10741b7ebf688454af26bb78faeddcd8e233cd2de50e069a60679",
        "md5": "61dda45b585d762d43b82dae63e04c6e",
        "sha256": "40f762ca4de90ab524bf810f52b77f8cd5738428ed61211936b24b16facbdac0"
      },
      "downloads": -1,
      "filename": "django_data_browser-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "61dda45b585d762d43b82dae63e04c6e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 2638246,
      "upload_time": "2020-05-17T10:02:39",
      "upload_time_iso_8601": "2020-05-17T10:02:39.117697Z",
      "url": "https://files.pythonhosted.org/packages/75/6b/5c78e4e10741b7ebf688454af26bb78faeddcd8e233cd2de50e069a60679/django_data_browser-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c359e9722d713fb2cf90dbaa3f06d154e21e4321374b68b85b45c77ded45e0b",
        "md5": "562b5b9e6ade36fc939913be9f133a36",
        "sha256": "377b0a596b6cfcfa75c3fd9e2d46d6dc1f8e9d47d78928e08c68ad9722d1288e"
      },
      "downloads": -1,
      "filename": "django-data-browser-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "562b5b9e6ade36fc939913be9f133a36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 282063,
      "upload_time": "2020-05-17T10:02:40",
      "upload_time_iso_8601": "2020-05-17T10:02:40.105276Z",
      "url": "https://files.pythonhosted.org/packages/1c/35/9e9722d713fb2cf90dbaa3f06d154e21e4321374b68b85b45c77ded45e0b/django-data-browser-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}