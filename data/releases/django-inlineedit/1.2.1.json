{
  "info": {
    "author": "Pedro Tavares",
    "author_email": "web@ptavares.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-inlineedit\n\nInline editing for Django models\n\n\n## Installation\n\nUse pip to install the latest stable release\n    \n    `pip install django-inlineedit`\n   \nOR\n   \nRun the following command inside the top-level cloned repository:\n   \n   'easy_install .'\n   \nFinally, make sure jquery is loaded on any templates that use inline editing. For example, add the following to the HEAD of your page:\n\n    <script src=\"https://code.jquery.com/jquery.js\"></script>\n\n\n## Quickstart\n\nAdd `inlineedit` to `INSTALLED_APPS` in the project settings (see dependencies below)\n\nAdd `path(<url for form submission>, include('inlineedit.urls'))` to the base URLs. Django-inlineedit will use any URL you specify, but make sure it does not conflict with existing URLs in your app!\n\nIn your templates load the template tags with:\n\n    {% load inlineedit %}\n\nThen add the django-inlineedit JS is a suitable location (for example at the bottom of the template `<body>`). jQuery must be loaded **before** this:\n\n    {% inlineedit_default_script %}\n\nTo add inline editing to a field, you use the `inlineedit` template tag. For example:\n\n    {% inlineedit \"my_object.my_field\" %}\n\nThis will add the HTML and JS necessary to edit `my_field` in object `my_object`. without any further configuration, the tag will display the field and show the editing link when the mouse hover over the field. A single click will open up an editing element and accept/reject buttons. Click the former to accept any changes and the latter to cancel those.\n\nForeignKeys can be transversed as expected:\n\n    {% inlineedit \"my_object.my_child_object.my_field\" %}\n\n\n## Access Control\n\nThe default behaviour is to allow users that have change permissions to edit a particular model field.\n\nTo change this behaviour you can set `INLINEEDIT_EDIT_ACCESS` in settings. It accepts a callable that takes the user, model instance and field class as arguments and returns True if editing is allowed.\n\nBesides the default behaviour, two additional options are available off-the-shelf. `access.is_staff` and `access.is_superuser` allow editing only by staff members or superusers respectively. The former still requires that a vuser has change permission to the model. the default behaviour is implemente3d in `access.has_perm`. Usage example:\n\n    INLINEEDIT_EDIT_ACCESS = inlineedit.access.is_staff\n\nAccess control can also be implemented at adaptor level as described below\n\n\n## Custom Adaptors\n\nThe adaptors mediate how django-inlineedit interprets various kinds of fields and template forms or widgets. Users can define their own adaptors to support new types of fields and widgets. A custom adaptor is created by inheriting from `adaptors.BasicAdaptor` and then re-implement the required methods. Most often you will want to rewrite `form_field` and/or `display_value`. These functions respectively return the form field and HTML representation of the editable field.\n\nOnce your custom adaptor has been created, register it in the project settings file by defining the `INLINEEDIT_ADAPTORS` dictionary. For example:\n\n    INLINEEDIT_ADAPTORS = {\n        \"custom-adaptor\": \"my_project.my_app.MyCustomAdaptor\",\n    }\n\nFinally, you enable a custom adaptor in the `inlineedit` template tag through its `INLINEEDIT_ADAPTORS` key. for example:\n\n    {% inlineedit \"my_object.my_custom_field\" \"custom-adaptor\" %}\n\nThree custom adaptors are provided with Django-inlineedit: `markdown`, `ckeditor` and `ckeditor-implicit`. These adaptors support markdown input and the CKEditor WYSIWYG editor. The `implicit` version of the CKEditor adaptor supports the case where the RichTextField model field is used. The `ckeditor` version can work with a CharField or TextField as it overwrites the field widget with the CKEditor version. this version also accepts custom toolbars to be selected in the `inlineedit` template tag (see the examples).\n\nThese off-the-shelf adaptors are a good starting point when designing your own adaptors. You can also find additional adaptors (for example a bootstrap styled adaptor) in the examples.\n\n\n### Access Control in Custom Adaptors\n\nYou can control edit access at adaptor level by overwriting the member function `has_edit_perm(user)`. For example, the following will allow anyone to edit a particular field that is using `ExampleCustomAdaptor`:\n\n    class ExampleCustomAdaptor(adaptors.BasicAdaptor):\n        def has_edit_perm(user):\n            return True\n\n\n## Extra Arguments\n\nthe `inlineedit` template tag full syntax is:\n\n    {% inlineedit <field> [adaptor] [positional arguments] [named arguments] %}\n\nAny positional and named arguments are passed to the adaptor constructor \n\nThe tag also handles extra named parameters (a very small list for the time being!)\n\n| Parameter     | Options | Description |\n|---------------|---------|-------------|\n| template | 'inlineedit/default.html' (the default), 'inlineedit/fixed.html' or any other template of your choice | Chose template used to render inlineedit links and forms |\n\n\n## Dependencies:\n\nRequired jquery 3.3.1 or higher installed.\n\n\n### Support for integration with other libraries (optional)\n\n1. django-reversions\n    \n    No configuration is needed, django-inlineedit will simply use django-reversion as long \n    as your models are decorated with @reversion.register()\n\n2. Django-CKEditor\n\n    Version 5.9.0 or higher is required for the CKEditor adaptor to work. for example:\n\n        {% inlineedit \"my_object.my_field\" \"ckeditor\" %}\n\n    Or\n\n        {% inlineedit \"my_object.my_field\" \"ckeditor\" \"toolbar\" %}\n\n\n2. Markdown\n\n    The Python library Markdown is required for the adaptor to work\n\n        {% inlineedit \"my_object.my_field\" \"markdown\" %}\n\n\n## Running examples\n\n1. cd into the root directory of the example you want to run (under the examples folder)\n2. run `python3 manage.py migrate` to setup a local sqlite3 database.\n3. run `python3 manage.py runserver` to start a local development server for the example.\n\n\n## Open source licenses\n\nThis product depends on the following software and media packages\n\nBootstrap version 4.0 is licensed under the [MIT License](http://opensource.org/licenses/mit-license.html)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ptav/django-inlineedit",
    "keywords": "django,forms,editing",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-inlineedit",
    "package_url": "https://pypi.org/project/django-inlineedit/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-inlineedit/",
    "project_urls": {
      "Homepage": "https://github.com/ptav/django-inlineedit"
    },
    "release_url": "https://pypi.org/project/django-inlineedit/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Add inline editble fields to your templates",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12528395,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f7259b77432a107af5a0f8f4e5e7b040bbd4fb26087ebb00fe29a6f9f0e7c09",
        "md5": "9100b6e9584942579e3075c919be2517",
        "sha256": "b89c79f3c3e1c9ed51c1d7dd3c7432b22eb2d233045759783c7061d63fc9eff6"
      },
      "downloads": -1,
      "filename": "django-inlineedit-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9100b6e9584942579e3075c919be2517",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14488,
      "upload_time": "2022-01-08T18:40:18",
      "upload_time_iso_8601": "2022-01-08T18:40:18.189667Z",
      "url": "https://files.pythonhosted.org/packages/2f/72/59b77432a107af5a0f8f4e5e7b040bbd4fb26087ebb00fe29a6f9f0e7c09/django-inlineedit-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}