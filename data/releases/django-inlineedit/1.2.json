{
  "info": {
    "author": "Pedro Tavares",
    "author_email": "web@ptavares.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-inlineedit\n\nInline editing for Django models\n\n\n## Installation\n\nUse pip to install the latest stable release\n\n    `pip install django-inlineedit`\n\nOR\n\nRun the following command inside the top-level cloned repository:\n\n   'easy_install .'\n\nFinally, make sure jquery is loaded on any templates that use inline editing. For example, add the following to the HEAD of your page:\n\n    <script src=\"https://code.jquery.com/jquery.js\"></script>\n\n\n## Quickstart\n\nAdd `inlineedit` to `INSTALLED_APPS` in the project settings (see dependencies below)\n\nAdd `path(<url for form submission>, include('inlineedit.urls'))` to the base URLs. Django-inlineedit will use any URL you specify, but make sure it does not conflict with existing URLs in your app!\n\nIn your templates load the template tags with:\n\n    {% load inlineedit %}\n\nThen add the django-inlineedit JS is a suitable location (for example at the bottom of the template `<body>`). jQuery must be loaded **before** this:\n\n    {% inlineedit_default_script %}\n\nTo add inline editing to a field, you use the `inlineedit` template tag. For example:\n\n    {% inlineedit \"my_object.my_field\" %}\n\nThis will add the HTML and JS necessary to edit `my_field` in object `my_object`. without any further configuration, the tag will display the field and show the editing link when the mouse hover over the field. A single click will open up an editing element and accept/reject buttons. Click the former to accept any changes and the latter to cancel those.\n\nForeignKeys can be transversed as expected:\n\n    {% inlineedit \"my_object.my_child_object.my_field\" %}\n\n\n## Access Control\n\nThe default behaviour is to users that have change permissions to edit a particular model field.\n\nTo change this behaviour set `INLINEEDIT_EDIT_ACCESS` in settings to a callable that takes the user, model instance and field class as arguments and returns True if editing is allowed.\n\nTwo additional options are in the app. `access.is_staff` and `access.is_superuser` allow editing only by staff members or superusers respectively. The former also requires that the user has change permission. Finally, `access.has_perm` implements the default behaviour. Example:\n\n    INLINEEDIT_EDIT_ACCESS = inlineedit.access.is_staff\n\nAccess control can also be implemented at adaptor level as described below\n\n\n## Custom Adaptors\n\nThe adaptors mediate how django-inlineedit interprets various kinds of fields and template forms or widgets. Users can define their own adaptors to support new types of fields and widgets.\n\nThree custom adaptors are provided with Django-inlineedit: `markdown`, `ckeditor` and `ckeditor-implicit`. These clearly support markdown inputs and the CKEditor WYSIWYG editor. The latter version of the CKEditor adaptor supports the case where the CKEditor RichTextField model field is used. The former overwrite the widget with the CKEditor version and allows custom toolbars to be selected in the template tag\n\nTo create a new adaptor create a class that derives from `inlineedit.adaptors.basic.BasicAdaptor` and re-implement its methods as required. most often you will want to rewrite `form_field` and/or `display_value`. These functions respectively return the form field and HTML reprentation of the editable field.\n\nOnce your custome adaptor has been created, register it in the project settings file by defining the `INLINEEDIT_ADAPTORS` dictionary. for example:\n\n    INLINEEDIT_ADAPTORS = {\n        \"custom-adaptor\": \"main.adaptors.ExampleCustomAdaptor\",\n    }\n\nFinally, you refer to the new adaptor by its `INLINEEDIT_ADAPTORS` key. for example:\n\n    {% inlineedit \"my_object.my_custom_field\" \"custom-adaptor\" %}\n\n\n## Extra Arguments\n\nthe inlineedit template tag can handle certain extra parameters\n\n| Parameter     | Options | Description |\n|---------------|---------|-------------|\n| template | 'inlineedit/default.html' (the default), 'inlineedit/fixed.html' or any other template of your choice | Chose template used to render inlineedit links and forms |\n\nAny other positional or named arguments are passed on to the adaptor constructor.\n\n\n### Access Control in Custom Adaptors\n\nYou can control access to editing at adaptor level as well by overwriting `has_edit_perm(user)`. For example, the following will allow anyone to edit a particular field that is using `ExampleCustomAdaptor`:\n\n    class ExampleCustomAdaptor:\n        def has_edit_perm(user):\n            return True\n\n\n## Dependencies:\n\nRequired jquery 3.3.1 or higher installed.\n\n\n### Support for integration with other libraries (optional)\n\n1. django-reversions\n\n    No configuration is needed, django-inlineedit will simply use django-reversion as long \n    as your models are decorated with @reversion.register()\n\n2. Django-CKEditor\n\n    Version 5.9.0 or higher is required for the CKEditor adaptor to work. for example:\n\n        {% inlineedit \"my_object.my_field\" \"ckeditor\" %}\n\n    Or\n\n        {% inlineedit \"my_object.my_field\" \"ckeditor\" \"toolbar\" %}\n\n\n2. Markdown\n\n    The Python library Markdown is required for the adaptor to work\n\n        {% inlineedit \"my_object.my_field\" \"markdown\" %}\n\n\n## Running examples\n\n1. cd into the root directory of the example you want to run (under the examples folder)\n2. run `python3 manage.py migrate` to setup a local sqlite3 database.\n3. run `python3 manage.py runserver` to start a local development server for the example.\n\n\n## Open source licenses\n\nThis product depends on the following software and media packages\n\nBootstrap version 4.0 is licensed under the [MIT License](http://opensource.org/licenses/mit-license.html)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ptav/django-inlineedit",
    "keywords": "django,forms,editing",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-inlineedit",
    "package_url": "https://pypi.org/project/django-inlineedit/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-inlineedit/",
    "project_urls": {
      "Homepage": "https://github.com/ptav/django-inlineedit"
    },
    "release_url": "https://pypi.org/project/django-inlineedit/1.2/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "Add inline editble fields to your templates",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12528395,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7069d490b75b41c8c76fc21a235f62efd48f94aa91f22860719f4fd3e0045e6",
        "md5": "88bbaa10a2bb61722473fe6df99aef2a",
        "sha256": "c98c057c77ec0156e8c4df63b7dfa4574bffe7e9748414f1bf6b3a1da9e41028"
      },
      "downloads": -1,
      "filename": "django_inlineedit-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "88bbaa10a2bb61722473fe6df99aef2a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21023,
      "upload_time": "2020-05-10T07:16:26",
      "upload_time_iso_8601": "2020-05-10T07:16:26.880398Z",
      "url": "https://files.pythonhosted.org/packages/b7/06/9d490b75b41c8c76fc21a235f62efd48f94aa91f22860719f4fd3e0045e6/django_inlineedit-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "656d6585f3f1ed6af6390230926c04e878922c3344e879cee3f936d36df4a3bc",
        "md5": "30fe55a1d5c96c19956ea77e575e9aef",
        "sha256": "cb32b9819777265c9d44685b3475959ca531b352e2f6d937e5686cb02e758bfd"
      },
      "downloads": -1,
      "filename": "django-inlineedit-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "30fe55a1d5c96c19956ea77e575e9aef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13320,
      "upload_time": "2020-05-10T07:16:30",
      "upload_time_iso_8601": "2020-05-10T07:16:30.628772Z",
      "url": "https://files.pythonhosted.org/packages/65/6d/6585f3f1ed6af6390230926c04e878922c3344e879cee3f936d36df4a3bc/django-inlineedit-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}