{
  "info": {
    "author": "MailSlurp",
    "author_email": "support@mailslurp.zendesk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# MailSlurp Python Client\n\n> Create real email addresses on demand. Send and receive emails and attachments from code and tests using Python.\n\nMailSlurp is an email API service that lets you create real email addresses in code. You can then send and receive emails and attachments in Python applications and tests.\n\n## Quick links\n\n- [Method Documentation](https://docs.mailslurp.com/python/docs/)\n- [PyPI Package](https://pypi.org/project/mailslurp-client/)\n- [Github Source](https://github.com/mailslurp/mailslurp-client-python)\n- [Send email using SMTP in Python](https://www.mailslurp.com/smtp/python-send-email-smtp/)\n- [SMTP access details](https://www.mailslurp.com/guides/smtp-imap/)\n\n## Get started\n\nThis section describes how to get up and running with the Python client.\n\nSee the [examples page](https://www.mailslurp.com/examples/) for more examples and use with common frameworks such as Django, Flask and Pytest.\n\nSee the method documentation for a [list of all functions](https://docs.mailslurp.com/ruby/docs/)\n\n### Create API Key\n\nFirst you'll need an API Key. [Create a free account](https://app.mailslurp.com) and copy the key from your dashboard.\n\n### Install package\n\nMailSlurp has an official PyPI package called `mailslurp-client`. It supports Python version 2 and 3.\n\n```bash\npip install mailslurp-client\n```\n\nOn some systems you may need to install `distutils`.\n\n### Configure\n\nOnce installed you can import `mailslurp_client` and create a configuration with your [API Key](https://app.mailslurp.com).\n\n```python\nimport mailslurp_client\n\nconfiguration = mailslurp_client.Configuration()\nconfiguration.api_key['x-api-key'] = \"your-api-key-here\"\n```\n\n## Common usage\n\nMailSlurp can be used to create email addresses than can send and receive real emails and attachments in Python.\n\n### Create an email address\n\nUse `with` statements to create controllers for each endpoint of the MailSlurp API.\n\n```python\ndef create_inbox_example():\n    with mailslurp_client.ApiClient(configuration) as api_client:\n\n        # create an inbox using the inbox controller\n        api_instance = mailslurp_client.InboxControllerApi(api_client)\n        inbox = api_instance.create_inbox()\n\n        # check the id and email_address of the inbox\n        assert len(inbox.id) > 0\n        assert \"mailslurp.com\" in inbox.email_address\n```\n\n#### Inbox types\n\nInboxes can be either `SMTP` or `HTTP` type. Set the inbox type using the `inboxType` property. SMTP inboxes are handled by a custom mailserver and support a wide range of clients while HTTP inboxes use Amazon SES and don't support some older clients like Outlook. SMTP inboxes are recommended for public facing email addresses while HTTP inboxes are best for application testing. Please see the guide on [types of inboxes](https://www.mailslurp.com/guides/smtp-vs-http-email-inboxes/) for more information.\n\n### List inboxes\n\n```python\ndef test_can_list_inboxes(self):\n    # use the with keyword to create an api client\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        # create an inbox using the inbox controller\n        inbox_controller = mailslurp_client.InboxControllerApi(api_client)\n        inboxes = inbox_controller.get_all_inboxes(page=0)\n\n        # pagination properties\n        assert inboxes.total_pages > 0\n        assert inboxes.total_elements > 0\n\n        # view contents\n        assert len(inboxes.content[0].id) > 0\n```\n\n### Send emails\n\n```python\ndef send_email_example():\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        # first create an inbox\n        api_instance = mailslurp_client.InboxControllerApi(api_client)\n        inbox = api_instance.create_inbox()\n\n        # send email from the inbox\n        send_email_options = mailslurp_client.SendEmailOptions()\n        send_email_options.to = [inbox.email_address]\n        send_email_options.subject = \"Hello\"\n        send_email_options.body = \"Your message\"\n        send_email_options.is_html = True\n        api_instance.send_email(inbox.id, send_email_options=send_email_options)\n```\n\n### Send email using SMTP\nTo use SMTP clients first create an SMTP type inbox and use the inbox controller `get_imap_smtp_access` method to obtain the username, password, port and host.\n\n```python\nimport os\nimport mailslurp_client\nfrom smtplib import SMTP\nfrom mailslurp_client import CreateInboxDto\n\napi_key = os.environ.get('API_KEY')\nassert api_key is not None\n\n# create a mailslurp configuration\nconfiguration = mailslurp_client.Configuration()\nconfiguration.api_key['x-api-key'] = api_key\n\n\nclass Test_MailSlurp_SDK:\n    # Can send email with SMTP\n    def test_can_send_with_smtp(self):\n        with mailslurp_client.ApiClient(configuration) as api_client:\n            # create an SMTP inbox\n            inbox_controller = mailslurp_client.InboxControllerApi(api_client)\n            inbox1 = inbox_controller.create_inbox_with_options(CreateInboxDto(inbox_type=\"SMTP_INBOX\"))\n            inbox2 = inbox_controller.create_inbox()\n            assert \"@mailslurp.mx\" in inbox1.email_address\n\n            # get smtp imap access\n            smtp_access = inbox_controller.get_imap_smtp_access(inbox_id=inbox1.id)\n            msg = \"Subject: Test subject\n\nThis is the body\"\n\n            # configure smtp client using access details\n            with SMTP(host=smtp_access.smtp_server_host, port=smtp_access.smtp_server_port) as smtp:\n                smtp.login(user=smtp_access.smtp_username, password=smtp_access.smtp_password)\n                smtp.sendmail(from_addr=inbox1.email_address, to_addrs=[inbox2.email_address], msg=msg)\n                smtp.quit()\n\n            # test that email is sent\n            wait_for_controller = mailslurp_client.WaitForControllerApi(api_client)\n            email = wait_for_controller.wait_for_latest_email(inbox_id=inbox2.id)\n            assert \"Test subject\" in email.subject\n```\n\n### Use attachments\n\nTo send attachments first use the `AttachmentControllerApi` to upload a file or byte stream. Then use the attachment ID returned with subsequent send calls.\n\n```python\n@staticmethod\ndef upload_attachment():\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        import base64\n\n        file_bytes = \"Your file's bytes\".encode(\"utf-8\")\n        encoded_contents = base64.b64encode(file_bytes)\n        attachment_controller = mailslurp_client.AttachmentControllerApi(api_client)\n\n        upload_options = mailslurp_client.UploadAttachmentOptions(\n            content_type=\"text/plain\",\n            filename=\"test.txt\",\n            base64_contents=str(encoded_contents, 'utf-8')\n        )\n        print(\"upload_options = {}\".format(upload_options))\n        return attachment_controller.upload_attachment(upload_options)\n```\n\n### Receive emails and extract content\n\n```python\ndef receive_email_and_extract_content_example():\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        # create two inboxes for testing\n        inbox_controller = mailslurp_client.InboxControllerApi(api_client)\n        inbox_1 = inbox_controller.create_inbox()\n        inbox_2 = inbox_controller.create_inbox()\n\n        # send email from inbox 1 to inbox 2\n        send_email_options = mailslurp_client.SendEmailOptions()\n        send_email_options.to = [inbox_2.email_address]\n        send_email_options.subject = \"Hello inbox 2\"\n        send_email_options.body = \"Your code is: 123\"\n        send_email_options.attachments = self.upload_attachment() # see previous section\n\n        inbox_controller.send_email(inbox_1.id, send_email_options=send_email_options)\n\n        # receive email for inbox 2\n        waitfor_controller = mailslurp_client.WaitForControllerApi(api_client)\n        email = waitfor_controller.wait_for_latest_email(inbox_id=inbox_2.id, timeout=30000, unread_only=True)\n\n        assert email.subject == \"Hello inbox 2\"\n\n        # extract content from body\n        import re\n        pattern = re.compile('Your code is: ([0-9]{3})')\n        matches = pattern.match(email.body)\n        code = matches.group(1)\n\n        assert code == \"123\"\n```\n\n### Download attachments\n\n```python\n\ndef receive_email_and_extract_content_example():\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        # wait for email to be received by inbox 2\n        email = wait_controller.wait_for_latest_email(inbox_id=inbox_2.id, timeout=30000, unread_only=True)\n\n        # assert that the message was received\n        assert email.inbox_id == inbox_2.id\n        assert email.subject == \"Hello\"\n\n        # attachment ids pressent\n        assert len(email.attachments) == 1\n\n        # download attachment content\n        email_controller = mailslurp_client.EmailControllerApi(api_client)\n        downloaded_bytes = email_controller.download_attachment(email.attachments[0], email.id)\n        assert len(downloaded_bytes) > 0\n\n        # alternatively download as base64 string with more meta data\n        email_controller = mailslurp_client.EmailControllerApi(api_client)\n        downloaded_attachment = email_controller.download_attachment_base64(email.attachments[0], email.id)\n        assert downloaded_attachment.content_type == \"text/plain\"\n        base64_contents = downloaded_attachment.base64_file_contents\n        import base64\n        attachment_bytes = base64.b64decode(base64_contents)\n        assert len(attachment_bytes) > 0\n```\n\n### Verify email address\n\nYou can verify email addresses with MailSlurp. This will perform SMTP queries for the email address on your behalf.\n\n```python\ndef test_validate_email(self):\n    with mailslurp_client.ApiClient(configuration) as api_client:\n        mailserver_controller = mailslurp_client.MailServerControllerApi(api_client)\n        verify_options = mailslurp_client.VerifyEmailAddressOptions(email_address=\"test@gmail.com\")\n        result = mailserver_controller.verify_email_address(verify_options=verify_options)\n        assert result.error is None\n        assert result.is_valid is True\n```\n\n## SDK Documentation\n\nSee the [guides page](https://www.mailslurp.com/guides/) or [the examples](https://www.github.com/mailslurp/examples) or the [Method Documentation](https://docs.mailslurp.com/ruby/docs/) for full usage.    \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.mailslurp.com/python",
    "keywords": "MailSlurp,Email,SMTP,Mailer,MailSlurp API,Test",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mailslurp-client",
    "package_url": "https://pypi.org/project/mailslurp-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/mailslurp-client/",
    "project_urls": {
      "Homepage": "https://www.mailslurp.com/python"
    },
    "release_url": "https://pypi.org/project/mailslurp-client/15.16.1/",
    "requires_dist": [
      "urllib3 (>=1.15)",
      "six (>=1.10)",
      "certifi",
      "python-dateutil"
    ],
    "requires_python": "",
    "summary": "Official MailSlurp Python SDK Email API",
    "version": "15.16.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17453708,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04912ebd6e50c4e83289ea8dd851459717cbb4bef89d5e8a354d81341ea3cfad",
        "md5": "30063558dec7a6d6ae0cb804cfaf73be",
        "sha256": "8f23f2b85464c7f1af747b4c6caef27f2871b8ad347262e810230564d3c013bb"
      },
      "downloads": -1,
      "filename": "mailslurp_client-15.16.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30063558dec7a6d6ae0cb804cfaf73be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 544279,
      "upload_time": "2023-01-17T11:04:30",
      "upload_time_iso_8601": "2023-01-17T11:04:30.018014Z",
      "url": "https://files.pythonhosted.org/packages/04/91/2ebd6e50c4e83289ea8dd851459717cbb4bef89d5e8a354d81341ea3cfad/mailslurp_client-15.16.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "686914c058e6f8b587e9304340cbb5c2600d5307f6926099fbfeda2c0fd68bdf",
        "md5": "c9ac12aafed601c136a697404d54e575",
        "sha256": "75a07365dc70c37524cf057b2b884ca29f1cbf6fa83a6080bb06fd5ec79f1e6b"
      },
      "downloads": -1,
      "filename": "mailslurp-client-15.16.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c9ac12aafed601c136a697404d54e575",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 247668,
      "upload_time": "2023-01-17T11:04:31",
      "upload_time_iso_8601": "2023-01-17T11:04:31.800156Z",
      "url": "https://files.pythonhosted.org/packages/68/69/14c058e6f8b587e9304340cbb5c2600d5307f6926099fbfeda2c0fd68bdf/mailslurp-client-15.16.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}