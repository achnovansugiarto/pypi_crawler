{
  "info": {
    "author": "Alexander Frenzel",
    "author_email": "alex@relatedworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====================\ndjango-inline-actions\n=====================\n\n\n\n.. image:: https://img.shields.io/pypi/v/django-inline-actions.svg\n    :target: https://pypi.python.org/pypi/django-inline-actions\n.. image:: https://travis-ci.org/escaped/django-inline-actions.png?branch=master\n    :target: http://travis-ci.org/escaped/django-inline-actions\n    :alt: Build Status\n.. image:: https://coveralls.io/repos/escaped/django-inline-actions/badge.png?branch=master\n    :target: https://coveralls.io/r/escaped/django-inline-actions\n    :alt: Coverage\n.. image:: https://img.shields.io/pypi/pyversions/django-inline-actions.svg\n.. image:: https://img.shields.io/pypi/status/django-inline-actions.svg\n.. image:: https://img.shields.io/pypi/l/django-inline-actions.svg\n\n\ndjango-inline-actions adds actions to the InlineModelAdmin and ModelAdmin changelist.\n\n\nScreenshot\n==========\n\n.. image:: https://raw.githubusercontent.com/escaped/django-inline-actions/master/example_changelist.png\n\n.. image:: https://raw.githubusercontent.com/escaped/django-inline-actions/master/example_inline.png\n\n\nInstallation\n============\n\n**Note**: For now only ``django<1.11`` is supported. Pull Requests are welcome!\n\n#. Install django-inline-actions ::\n\n    pip install django-inline-actions\n\n#. Add ``inline_actions`` to your ``INSTALLED_APPS``.\n\n\nIntegration\n===========\n\nAdd the ``InlineActionsModelAdminMixin`` to your ``ModelAdmin``.\nIf you want to have actions on your inlines, add the ``InlineActionMixin`` to your\n``InlineModelAdmin``.\nEach action is implemented as a method on the ``ModelAdmin``/``InlineModelAdmin`` and has\nthe following signature ::\n\n    def action_name(self, request, obj, parent_obj=None)\n\n#. ``request`` - current request\n#. ``obj`` - instance on which the action was triggered\n#. ``parent_obj`` - instance of the parent model, only set on inlines\n\nand should return ``None`` to return to the current changeform or a ``HttpResponse``.\nFinally, add your method name to the ``inline_actions`` property.\nIf you want to disable the ``Actions`` column, explicitly set `inline_actions = None`.\nTo add your actions dynamically, you can use the method\n``get_inline_actions(self, request, obj=None)`` instead.\n\n\nThis module is bundled with two actions for viewing\n(``inline_actions.actions.ViewAction``) and deleting\n(``inline_actions.actions.DeleteAction``).\nJust add these classes to your admin and you're done.\n\n\nAdditionally, you can add methods to generate a custom label and css classes per object.\nIf you have an inline action called ``action_name`` then you can define ::\n\n    def get_action_name_label(self, obj):\n        return 'some string'\n\n\n    def get_action_name_css(self, obj):\n        return 'some string'\n\n\n#. ``obj`` - instance on which the action was triggered\n\nEach defined method has to return a string.\n\n\n\nExample 1\n=========\nImagine a simple news application with the following ``admin.py``. ::\n\n    from django.contrib import admin\n    from inline_actions.admin import InlineActionsMixin\n    from inline_actions.admin import InlineActionsModelAdminMixin\n\n    from .models import Article, Author\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        model = Article\n        inline_actions = []\n\n        def has_add_permission(self):\n            return False\n\n\n    @admin.register(Author)\n    class AuthorAdmin(InlineActionsModelAdminMixin,\n                      admin.ModelAdmin):\n        inlines = [ArticleInline]\n        list_display = ('name',)\n\n\n    @admin.register(Article)\n    class AuthorAdmin(admin.ModelAdmin):\n        list_display = ('title', 'status', 'author')\n\n\nWe now want to add two simple actions (``view``, ``unpublish``) to\neach article within the ``AuthorAdmin``.\nThe ``view`` action redirects to the changeform of the selected instance ::\n\n    from django.core.urlresolvers import reverse\n    from django.shortcuts import redirect\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        # ...\n        inline_actions = ['view']\n        # ...\n\n        def view(self, request, obj, parent_obj=None):\n            url = reverse(\n                'admin:{}_{}_change'.format(\n                    obj._meta.app_label,\n                    obj._meta.model_name,\n                ),\n                args=(obj.pk,)\n            )\n            return redirect(url)\n        view.short_description = _(\"View\")\n\n\nSince ``unpublish`` depends on ``article.status`` we must use ``get_inline_actions`` to\nadd this action dynamically. ::\n\n    from django.contrib import admin, messages\n    from django.utils.translation import ugettext_lazy as _\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        # ...\n        def get_inline_actions(self, request, obj=None):\n            actions = super(ArticleInline, self).get_inline_actions(request, obj)\n            if obj:\n                if obj.status == Article.PUBLISHED:\n                    actions.append('unpublish')\n            return actions\n\n        def unpublish(self, request, obj, inline_obj):\n            inline_obj.status = Article.DRAFT\n            inline_obj.save()\n            messages.info(request, _(\"Article unpublished\"))\n        unpublish.short_description = _(\"Unpublish\")\n\n\nAdding ``inline_actions`` to the changelist works similar. See the sample project for\nfurther details (``test_proj/blog/admin.py``).\n\nExample 2\n=========\n\nIf we want only one button, we can alternatively create single an\naction ``toggle_publish`` that will be used to change the publish status. ::\n\n    def toggle_publish(self, request, obj, parent_obj=None):\n        if obj.status == Article.DRAFT:\n            obj.status = Article.PUBLISHED\n        else:\n            obj.status = Article.DRAFT\n\n        obj.save()\n        status = 'unpublished' if obj.status == Article.DRAFT else 'published'\n        messages.info(request, _(\"Article {}.\".format(status)))\n\nThis might leave the user with an ambiguous button label as it will be called\n``Toggle publish``. We can easily modify it by adding: ::\n\n    def get_toggle_publish_label(self, obj):\n        label = 'publish' if obj.status == Article.DRAFT else 'unpublish'\n        return 'Toggle {}'.format(label)\n\n\nSo assuming an object in row has ``DRAFT`` status, then the button label will be\n``Toggle publish`` and ``Toggle unpublish`` otherwise.\n\nWe can go even fancier when we create a method that will add css classes\nfor each object depending on a status like: ::\n\n\n    def get_toggle_publish_css(self, obj):\n        return (\n            'btn-green' if obj.status == Article.DRAFT else 'btn-red')\n\nYou can make it more eye-candy by using ``btn-green`` that makes your button green and\n``btn-red`` that makes your button red. Or zou can use those classes to add some\njavascript logic (i.e. confirmation box).\n\n\nExample Application\n===================\nYou can see ``django-inline-actions`` in action using the bundled test application\n``test_proj``. I recommend to use a ``virtualenv``. ::\n\n   git clone https://github.com/escaped/django-inline-actions.git\n   cd django-inline-actions/\n   pip install Django\n   pip install -e .\n   cd test_proj\n   ./manage.py migrate\n   ./manage.py createsuperuser\n   ./manage.py runserver\n\nOpen `<http://localhost:8000/admin/>`_ in your browser and create an\nauthor and some articles.\n\n\nMigration to 1.0.0\n==================\n\nVersion 1.0.0 adds support for the admin changelist. Since the django ``ModelAdmin``\nalready has its own ``action`` handling, this release introduces **breaking changes**.\nBasically ``action`` has been renamed to ``inline_action`` in all method and property\nnames.\n\n\n+----------+----------------+-----------------------+\n| type     | old_name       | new_name              |\n+==========+================+=======================+\n| property | actions        | inline_actions        |\n+----------+----------------+-----------------------+\n| method   | get_actions    | get_inline_actions    |\n+----------+----------------+-----------------------+\n| method   | render_actions | render_inline_actions |\n+----------+----------------+-----------------------+\n\n\nSince an action can now be called from a ``ModelAdmin`` or an ``InlineAdmin`` the signature\nof each action has changed to ``def action_name(self, request, obj, parent_obj=None)``.\nSee `Integration`_ for further details.\n\nIf you do not want to use ``inline_actions`` on a changelist, you must deactivate\nits rendering explicitly ::\n\n      class Foo(InlineActionsModelAdminMixin, admin.ModelADmin):\n         inline_actions = None\n         # ...\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/escaped/django-inline-actions/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-inline-actions",
    "package_url": "https://pypi.org/project/django-inline-actions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-inline-actions/",
    "project_urls": {
      "Homepage": "http://github.com/escaped/django-inline-actions/"
    },
    "release_url": "https://pypi.org/project/django-inline-actions/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-inline-actions adds actions to the InlineModelAdmin.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9355995,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff544ffd92e65582797a16e8e30343bc73f2f13778596b0a5527a1672b81ebff",
        "md5": "80afb37a4a8596007bbd5f677e55cf03",
        "sha256": "507c5be8fad5ca4b7b330f3ef3ff055cdad5e385fd0e58aaab838780617aa2d7"
      },
      "downloads": -1,
      "filename": "django_inline_actions-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80afb37a4a8596007bbd5f677e55cf03",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 12251,
      "upload_time": "2017-07-21T10:07:44",
      "upload_time_iso_8601": "2017-07-21T10:07:44.175831Z",
      "url": "https://files.pythonhosted.org/packages/ff/54/4ffd92e65582797a16e8e30343bc73f2f13778596b0a5527a1672b81ebff/django_inline_actions-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5008bdc1338066def98d014e8e0fd9ec2f9f0c9877ecdc22ef753c06f2f6ddc0",
        "md5": "e2232e4c394fe037e3ce075636282205",
        "sha256": "4527e1e6206b8d2368276ecd463e411fa6abf53871e185d86e237595cdb842f9"
      },
      "downloads": -1,
      "filename": "django-inline-actions-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e2232e4c394fe037e3ce075636282205",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11079,
      "upload_time": "2017-07-21T10:07:42",
      "upload_time_iso_8601": "2017-07-21T10:07:42.673990Z",
      "url": "https://files.pythonhosted.org/packages/50/08/bdc1338066def98d014e8e0fd9ec2f9f0c9877ecdc22ef753c06f2f6ddc0/django-inline-actions-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}