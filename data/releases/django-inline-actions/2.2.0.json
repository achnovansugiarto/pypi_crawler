{
  "info": {
    "author": "Alexander Frenzel",
    "author_email": "alex@relatedworks.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-inline-actions\n\n[![pypi](https://img.shields.io/pypi/v/django-inline-actions.svg)](https://pypi.python.org/pypi/django-inline-actions) [![Build Status](https://travis-ci.org/escaped/django-inline-actions.png?branch=master)](http://travis-ci.org/escaped/django-inline-actions) [![Coverage](https://coveralls.io/repos/escaped/django-inline-actions/badge.png?branch=master)](https://coveralls.io/r/escaped/django-inline-actions) ![python version](https://img.shields.io/pypi/pyversions/django-inline-actions.svg) ![Project status](https://img.shields.io/pypi/status/django-inline-actions.svg) ![license](https://img.shields.io/pypi/l/django-inline-actions.svg)\n\ndjango-inline-actions adds actions to the InlineModelAdmin and ModelAdmin changelist.\n\n\n## Screenshot\n\n![Changelist example](https://raw.githubusercontent.com/escaped/django-inline-actions/master/example_changelist.png)\n![Inline example](https://raw.githubusercontent.com/escaped/django-inline-actions/master/example_inline.png)\n\n## Installation\n\n**NOTE** If you are on `django<2.0`, you have to use `django-inline-actions<2.0`.\n\n1. Install django-inline-actions\n\n    pip install django-inline-actions\n\n2. Add `inline_actions` to your `INSTALLED_APPS`.\n\n\n## Integration\n\nAdd the `InlineActionsModelAdminMixin` to your `ModelAdmin`.\nIf you want to have actions on your inlines, add the `InlineActionMixin` to your `InlineModelAdmin`.\nEach action is implemented as a method on the `ModelAdmin`/`InlineModelAdmin` and **must have** the following signature.\n\n    def action_name(self, request, obj, parent_obj=None):\n\n| Argument     | Description                                       |\n|--------------|---------------------------------------------------|\n| `request`    | current request                                   |\n| `obj`        | instance on which the action was triggered        |\n| `parent_obj` | instance of the parent model, only set on inlines |\n\nand should return `None` to return to the current changeform or a `HttpResponse`.\nFinally, add your method name to list of actions `inline_actions` defined on the corresponding `ModelAdmin`.\nIf you want to disable the *actions* column, you have to explicitly set `inline_actions = None`.\nTo add your actions dynamically, you can use the method `get_inline_actions(self, request, obj=None)` instead.\n\nThis module is bundled with two actions for viewing (`inline_actions.actions.ViewAction`) and deleting (`inline_actions.actions.DeleteAction`).\nJust add these classes to your admin and you're done.\n\nAdditionally, you can add methods to generate a custom label and CSS classes per object.\nIf you have an inline action called `action_name` then you can define\n\n    def get_action_name_label(self, obj):\n        return 'some string'\n\n    def get_action_name_css(self, obj):\n        return 'some string'\n\n| Argument | Description                                |\n|----------|--------------------------------------------|\n| `obj`    | instance on which the action was triggered |\n\nEach defined method has to return a string.\n\n\n### Example 1\n\nImagine a simple news application with the following `admin.py`.\n\n    from django.contrib import admin\n    from inline_actions.admin import InlineActionsMixin\n    from inline_actions.admin import InlineActionsModelAdminMixin\n\n    from .models import Article, Author\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        model = Article\n        inline_actions = []\n\n        def has_add_permission(self):\n            return False\n\n\n    @admin.register(Author)\n    class AuthorAdmin(InlineActionsModelAdminMixin,\n                      admin.ModelAdmin):\n        inlines = [ArticleInline]\n        list_display = ('name',)\n\n\n    @admin.register(Article)\n    class AuthorAdmin(admin.ModelAdmin):\n        list_display = ('title', 'status', 'author')\n\n\nWe now want to add two simple actions (`view`, `unpublish`) to each article within the `AuthorAdmin`.\nThe `view` action redirects to the changeform of the selected instance.\n\n    from django.core.urlresolvers import reverse\n    from django.shortcuts import redirect\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        # ...\n        inline_actions = ['view']\n        # ...\n\n        def view(self, request, obj, parent_obj=None):\n            url = reverse(\n                'admin:{}_{}_change'.format(\n                    obj._meta.app_label,\n                    obj._meta.model_name,\n                ),\n                args=(obj.pk,)\n            )\n            return redirect(url)\n        view.short_description = _(\"View\")\n\nSince `unpublish` depends on `article.status` we must use `get_inline_actions` to add this action dynamically.\n\n    from django.contrib import admin, messages\n    from django.utils.translation import ugettext_lazy as _\n\n\n    class ArticleInline(InlineActionsMixin,\n                        admin.TabularInline):\n        # ...\n        def get_inline_actions(self, request, obj=None):\n            actions = super(ArticleInline, self).get_inline_actions(request, obj)\n            if obj:\n                if obj.status == Article.PUBLISHED:\n                    actions.append('unpublish')\n            return actions\n\n        def unpublish(self, request, obj, inline_obj):\n            inline_obj.status = Article.DRAFT\n            inline_obj.save()\n            messages.info(request, _(\"Article unpublished\"))\n        unpublish.short_description = _(\"Unpublish\")\n\n\nAdding `inline_actions` to the changelist works similar. See the sample project for further details (`test_proj/blog/admin.py`).\n\n### Example 2\n\nInstead of creating separate actions for publishing and unpublishing, we might prefer an action, which toggles between those two states.\n`toggle_publish` implements the behaviour described above.\n\n    def toggle_publish(self, request, obj, parent_obj=None):\n        if obj.status == Article.DRAFT:\n            obj.status = Article.PUBLISHED\n        else:\n            obj.status = Article.DRAFT\n\n        obj.save()\n\n        if obj.status == Article.DRAFT:\n            messages.info(request, _(\"Article unpublished.\"))\n        else:\n            messages.info(request, _(\"Article published.\"))\n\nThis might leave the user with an ambiguous button label as it will be called `Toggle publish` regardless of the internal state.\nWe can specify a dynamic label by adding a special method `get_ACTIONNAME_label`.\n\n    def get_toggle_publish_label(self, obj):\n        if obj.status == Article.DRAFT:\n            return 'Publish'\n        return 'Unpublish'\n\n\nSo assuming an object in a row has `DRAFT` status, then the button label will be `Toggle publish` and `Toggle unpublish` otherwise.\n\nWe can go even fancier when we create a method that will add css classes for each object depending on a status like:\n\n\n    def get_toggle_publish_css(self, obj):\n        if obj.status == Article.DRAFT:\n            return 'btn-red'\n        return 'btn-green'\n\nYou can make it more eye-candy by using `btn-green` that makes your button green and `btn-red` that makes your button red.\nOr you can use those classes to add some javascript logic (i.e. confirmation box).\n\n\n## Example Application\n\nYou can see `django-inline-actions` in action using the bundled test application `test_proj`.\nUse [`poetry`](https://poetry.eustace.io/) to run it.\n\n    git clone https://github.com/escaped/django-inline-actions.git\n    cd django-inline-actions/\n    poetry install\n    poetry run pip install Django\n    cd test_proj\n    poetry run ./manage.py migrate\n    poetry run ./manage.py createsuperuser\n    poetry run ./manage.py runserver\n\nOpen [`http://localhost:8000/admin/`](http://localhost:8000/admin/) in your browser and create an author and some articles.\n\n\n## How to test your actions?\n\nThere are two ways how you could write tests for your actions.\nWe will use [pytest](https://docs.pytest.org/en/latest/) for the following examples.\n\n\n### Test the action itself\n\nBefore we can call our action on the admin class itself, we have to instantiate the admin environment and pass it to the `ModelAdmin` together with an instance of our model.\nTherefore, we implement a fixture called `admin_site`, which is used on each test.\n\n    import pytest\n    from django.contrib.admin import AdminSite\n\n    from yourapp.module.admin import MyAdmin\n\n\n    @pytest.fixture\n    def admin_site():\n        return AdminSite()\n\n    @pytest.mark.django_db\n    def test_action_XXX(admin_site):\n        \"\"\"Test action XXX\"\"\"\n        fake_request = {}  # you might need to use a RequestFactory here\n        obj = ...  # create an instance\n\n        admin = MyAdmin(obj, admin_site)\n\n        admin.render_inline_actions(article)\n        response = admin.action_XXX(fake_request, obj)\n        # assert the state of the application\n\n\n### Test the admin integration\n\nAlternatively, you can test your actions on the real Django admin page.\nYou will have to log in, navigate to the corresponding admin and trigger a click on the action.\nTo simplify this process you can use [django-webtest](https://github.com/django-webtest/django-webtest).\nExample can be found [here](https://github.com/escaped/django-inline-actions/blob/76b6f6b83c6d1830c2ad71512cd1e85362936dbd/test_proj/blog/tests/test_inline_admin.py#L146).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/escaped/django-inline-actions",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "Alexander Frenzel",
    "maintainer_email": "alex@relatedworks.com",
    "name": "django-inline-actions",
    "package_url": "https://pypi.org/project/django-inline-actions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-inline-actions/",
    "project_urls": {
      "Documentation": "https://github.com/escaped/django-inline-actions/blob/master/README.md",
      "Homepage": "https://github.com/escaped/django-inline-actions",
      "Repository": "https://github.com/escaped/django-inline-actions"
    },
    "release_url": "https://pypi.org/project/django-inline-actions/2.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.5,<4.0",
    "summary": "django-inline-actions adds actions to each row of the ModelAdmin or InlineModelAdmin.",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9355995,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41b7137d23a0a47c5c2cf917e680d83cdc92ded82abb78ce5ad93184cb5b837e",
        "md5": "a7e312fadd7c870359b7126e7e06c41b",
        "sha256": "b4ae5a119de23a1d6820293fdda7a74b9cf22a3f34138cb9805c9f0ba08cbfb1"
      },
      "downloads": -1,
      "filename": "django_inline_actions-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7e312fadd7c870359b7126e7e06c41b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5,<4.0",
      "size": 18969,
      "upload_time": "2019-06-13T08:22:01",
      "upload_time_iso_8601": "2019-06-13T08:22:01.277272Z",
      "url": "https://files.pythonhosted.org/packages/41/b7/137d23a0a47c5c2cf917e680d83cdc92ded82abb78ce5ad93184cb5b837e/django_inline_actions-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9aa7b38c1488b02ae56522ac45f8eb8e0434dcafa1fc0f16de7c7fc7734cb732",
        "md5": "8878ad569970c5659d05345bd0719c22",
        "sha256": "ddd81026560b0f42cfa16ff54b59390308795dae0ccf4916abec0a575ac4d290"
      },
      "downloads": -1,
      "filename": "django-inline-actions-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8878ad569970c5659d05345bd0719c22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5,<4.0",
      "size": 10804,
      "upload_time": "2019-06-13T08:21:59",
      "upload_time_iso_8601": "2019-06-13T08:21:59.845206Z",
      "url": "https://files.pythonhosted.org/packages/9a/a7/b38c1488b02ae56522ac45f8eb8e0434dcafa1fc0f16de7c7fc7734cb732/django-inline-actions-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}