{
  "info": {
    "author": "Tae Min Ha, Daniel Nam, Won Seok Jung",
    "author_email": "contact@kc-ml2.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Marlenv\n\nMarlenv is a multi-agent environment for reinforcement learning, based on the OpenAI [gym](https://github.com/openai/gym) convention. \n\nThe function names such as reset(), step() are consistent but the return format is different. Unlike the single agent environments, the multi-agent environments included in this repo formats all returns in a list format, where each element corresponds to each agent in the environment. A similar rule applies to the input action where the action should be a list of actions with a length of number of agents. \n\nMarlenv is an ongoing project and modifications and new environments are expected in the future. \n\n\n## Installation\n\nclone marlenv repo and use pip to install\n\n```bash\ngit clone https://github.com/kc-ml2/marlenv.git\ncd marlenv\npip install -e .\n```\n\n## Rules\n\n\n### Snake Game\n\nMultiple snakes battle on a fixed size grid map.\n\nEach snake is spawned at a random location on the map, with a random pose and direction at reset().\n\nThe map may be initialized with a different walls upon instantiation of the environment.\n\nSnake dies when its head hits a wall or body of another snake. Here, the other snake receives a reward for kill and the dead snake receives a reward for death ('lose').\n\nWhen multiple snakes collide head to head, all dies without receiving the kill score. \n\nWhen there is only one snake remaining, it receives a win reward for every unit time of survival.\n\nThe snake grows by one pixel when it has eatten a fruit. \n\n**Observation Types**\n\nImage grid : The order is  **'NHWC'**\n\n## Examples Input Arguments\n\n### Snake Game\n\nCreating an environment\n\n```python\nimport gym\nimport marlenv\nenv = gym.make(\n    'Snake-v1',\n    height=20,       # Height of the grid map\n    width=20,        # Width of the grid map\n    num_snakes=4,    # Number of snakes to spawn on grid\n    snake_length=3,  # Initial length of the snake at spawn time\n    vision_range=5,  # Vision range (both width height), map returned if None\n    frame_stack=1,   # Number of observations to stack on return\n)\n```\n\nSingle-agent wrapper\n\n```python\nenv = gym.make('Snake-v1', num_snakes=1)\nenv = marlenv.wrappers.SingleAgent(env)\n```\n\nThis will unwrap the returned the observation, reward, etc from a list\n\nUsing the make_snake() function\n\n```python\n# Automatically chooses wrappers to handle single agent, multi-agent, vector_env, etc.\nenv, observation_space, action_space, properties = marlenv.wrappers.make_snake(\n    num_envs=1,  # Number of environments. Used to decided vector env or not\n    num_snakes=1,  # Number of players. Used to determine single/multi agent\n    **kwargs  # Other input parameters to the environment\n)\n```\n\nThe returned values are\n\n- env : The environment object\n- observation_space : The processed observation space (according to env type)\n- action_space : The processed action space\n- properties : The properties is a dict that includes\n    - high: highest value that observation can have\n    - low: lowest value that the observation can have\n    - num_envs: number of environments\n    - num_snakes: number of snakes to be spawned\n    - discrete: True if action space is discrete, categorical\n    - action_info\n        - {action_high, action_low} if continuous action or {action_n} if discrete\n\n**Custom reward function**\n\nThe user can change the reward function structure of the snake-game upon instantiation. \n\nThe reward function can be defined using python dictionary as the following\n\n```python\ncustom_reward_func = {\n    'fruit': 1.0,\n    'kill': 0.0,\n    'lose': 0.0,\n    'time': 0.0,\n    'win': 0.0\n}\nenv = gym.make('snake-v1', reward_func=custom_reward_func)\n```\n\nEach of the each of the keys represent\n\n- fruit : reward received when the snake eats a fruit\n- kill : reward received when the snake kills another snake\n- lose : reward (or penalty) received when the snake dies\n- time : reward received for each unit of time of survival\n- win : reward received during the snake's time of survival as the last one standing\n\nEach reward can be both + and - float number\n\n## Testing\n\n```python\npytest\n```\n\n## Citation\n\n```python\n@MISC{marlenv2021,\nauthor =   {ML2},\ntitle =    {Marlenv, Multi-agent Reinforcement Learning Environment},\nhowpublished = {\\url{http://github.com/kc-ml2/marlenv}},\nyear = {2021}\n}\n```\n\n## Updates\n\nCurrently, there is only one environment of multi-agent snake game.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kc-ml2/marlenv",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marlenv",
    "package_url": "https://pypi.org/project/marlenv/",
    "platform": null,
    "project_url": "https://pypi.org/project/marlenv/",
    "project_urls": {
      "Homepage": "https://github.com/kc-ml2/marlenv"
    },
    "release_url": "https://pypi.org/project/marlenv/1.0.1/",
    "requires_dist": [
      "gym (==0.24.1)"
    ],
    "requires_python": ">=3.8",
    "summary": "",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15756710,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a61239870de4cf565801204c905360bf1908004c7c6e3359ead7d3c4b76d4754",
        "md5": "cb80e2f02eb863ff882b1a8d1dadaa76",
        "sha256": "93f3534af8c6495989de4ab04882c8ee0585676143e5ded506abc1d5b6856cd4"
      },
      "downloads": -1,
      "filename": "marlenv-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cb80e2f02eb863ff882b1a8d1dadaa76",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16218,
      "upload_time": "2022-11-14T05:55:24",
      "upload_time_iso_8601": "2022-11-14T05:55:24.329058Z",
      "url": "https://files.pythonhosted.org/packages/a6/12/39870de4cf565801204c905360bf1908004c7c6e3359ead7d3c4b76d4754/marlenv-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c94460536f422e9bdd33afeae0c14f7ad18bf4f69968fc22353c641f799289ce",
        "md5": "8f1ceb5a289d043b1864b1d88df4fd4f",
        "sha256": "9dfc950954fdfdd1247eadd9d509aeb30d39d80aa52cdc88b6b5d919bfa9d2ca"
      },
      "downloads": -1,
      "filename": "marlenv-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8f1ceb5a289d043b1864b1d88df4fd4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 15693,
      "upload_time": "2022-11-14T05:55:25",
      "upload_time_iso_8601": "2022-11-14T05:55:25.768931Z",
      "url": "https://files.pythonhosted.org/packages/c9/44/60536f422e9bdd33afeae0c14f7ad18bf4f69968fc22353c641f799289ce/marlenv-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}