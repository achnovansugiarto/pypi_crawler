{
  "info": {
    "author": "Neeraj Kumar",
    "author_email": "sainineeraj1234@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "===============\nDjango FSM with Django Rest Framework.\n===============\n\nOverview\n========\ndrf_fsm library provides an endpoint for defined each transition in models using Django FSM with Django Rest Framework library.\n\n\nFeatures\n========\nThis library provides endpoint for each transition of FSM and customize like:\n\n1. Easy to define the number of FSM fields that's the endpoint you want to create automatically. default : No field.\n2. Easy to define how many transitions endpoint you want to create for particular field: default: all transition of fields.\n3. Easy to define serializer for each transition and field name wise: default: serializer_class of ViewSet.\n4. Easy to handle response for each endpoint of transition and field, default: serializer.data .\n\nInstallation\n============\n\n- Install drf_fsm using pip::\n\n    pip install drf_fsm\n\n- Import Mixin from drf_fsm and Use in ViewSet views of DRF::\n\n    from drf_fsm.mixins import FsmViewSetMixin\n\n\nUses with example\n================\n\nLets Suppose a Post model that uses Django FSM\n\nmodels.py::\n\n    from django.contrib.auth import get_user_model\n    from django.db import models\n    from django_fsm import transition, FSMField\n\n    User = get_user_model()\n\n\n    class PostStatusChoices(models.TextChoices):\n        Draft = 'draft', 'Draft'\n        Pending = 'pending', 'Pending'\n        Publish = 'publish', 'Publish'\n        Future = 'future', 'Future'\n        Trash = 'trash', 'Trash'\n\n\n    class Post(models.Model):\n        title = models.CharField(max_length=200, unique=True)\n        slug = models.SlugField(max_length=200, unique=True)\n        author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='posts')\n        updated_on = models.DateTimeField(auto_now=True)\n        content = models.TextField()\n        created_on = models.DateTimeField(auto_now_add=True)\n        status = FSMField('Status', max_length=20, default=PostStatusChoices.Draft,\n                          choices=PostStatusChoices.choices, protected=True)\n\n        @transition(field=status, source='*', target=PostStatusChoices.Draft)\n        def draft(self):\n            pass\n\n        @transition(field=status, source=PostStatusChoices.Draft, target=PostStatusChoices.Pending)\n        def pending(self):\n            pass\n\n        @transition(field=status, source=PostStatusChoices.Pending, target=PostStatusChoices.Publish)\n        def publish(self):\n            pass\n\n        @transition(field=status, source=PostStatusChoices.Pending, target=PostStatusChoices.Future)\n        def future(self):\n            pass\n\n        @transition(field=status, source='*', target=PostStatusChoices.Trash)\n        def trash(self):\n            pass\n\n\n\n\nWe define model with 5 choices above and added 5 transition for each status in model.\n\nNow create ViewSet for Post model\n\nviews.py::\n\n    from rest_framework.viewsets import ModelViewSet\n    from drf_fsm.mixins import FsmViewSetMixin\n    from .models import Post\n    from .serializers import PostSerializer\n\n\n    class PostViewSet(FsmViewSetMixin, ModelViewSet):\n        queryset = Post.objects.all()\n        serializer_class = PostSerializer\n        fsm_fields = ['status']\n\n\nHere we define \"status\" as a FSM field, we can define multiple in list if we have multiple in single model\n\nConnect this views to DRF router\nurls.py::\n\n    from rest_framework.routers import DefaultRouter\n    from .views import PostViewSet\n\n    router = DefaultRouter()\n\n    router.register('post', PostViewSet, basename=\"post_view_set\")\n\n    urlpatterns = router.urls\n\n\nFinished. Cheers ‚úåÔ∏è\n------------------\n\nNow checking Output in Swagger\n\n.. image:: output.png\n   :width: 100%\n\n\nüòé :),\n====\n\nLet's move to customizations:\n\nCustomizations\n============\n\n1. Define number of fields of FSM in view like::\n\n    fsm_fields = ['status', 'priority']\n\n2. Define particular transitions for include, left will ignore for endpoints.\n   suppose field name is \"status\" and have 5 transition according above example so we can\n   handle which transition should include and other ignore.\n\n   So write @classmethod in viewset for override this feature::\n\n    @classmethod\n    def status_transitions(cls):  # Here status in field name so it's dynamic based on FSM field name.\n        return ['trash', 'publish']\n\nHere \"trash\" and \"publish\" transition endpoint will available for API, other will ignore from endpoints\n\n3. Define serializer class for each transition or field name wise::\n\n    publish_status_serializer_class = PublishStatusPostSerializer # {transition}_{field_name}_serializer_class\n\n    or\n\n    status_serializer_class = StatusPostSerializer  # {field_name}_serializer_class\n\n    or, default\n\n    serializer_class = PostSerializer  # Default serializer class for each\n\nSerializer class uses dynamic name for each transition if define otherwise default will use.\n\n4. Define Response of each transition::\n\n        def publish_status_response(self, serializer): # {transition}_{field_name}_response\n            return {\"message\": \"Post status updated published\"}\n\n        or\n\n        def status_response(self, serializer): # {field_name}_response, but it'll show for all transition of status field\n            return {\"message\": \"Post status updated\"}\n\n        or, default\n\n        serializer.data\n\n\n\n\nIf you feel this library is useful for your work just buy some coffee for me so I'll try improved this and will work on new libraries.\n\n<a href=\"https://www.buymeacoffee.com/sainipray\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\nLicense\n=======\n\ndrf_fsm is an Open Source project licensed under the terms of the `MIT license <https://github.com/sainipray/drf-fsm/blob/main/LICENSE>`_\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sainipray/drf-fsm",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf-fsm",
    "package_url": "https://pypi.org/project/drf-fsm/",
    "platform": "any",
    "project_url": "https://pypi.org/project/drf-fsm/",
    "project_urls": {
      "Homepage": "https://github.com/sainipray/drf-fsm"
    },
    "release_url": "https://pypi.org/project/drf-fsm/1.0.0/",
    "requires_dist": [
      "django",
      "djangorestframework"
    ],
    "requires_python": ">=3.6",
    "summary": "Create Django FSM transitions as a endpoint with Django REST Framework",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14573148,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68e731495df927c91233e5dac9db621589f86257d8f42902862914efc0e6f74c",
        "md5": "3825a9a84363678139de8bbb98db40a5",
        "sha256": "35f7759842ba5d3b2670a9815690ae8ce5048f75ab1a396634291edd270a3a9c"
      },
      "downloads": -1,
      "filename": "drf_fsm-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3825a9a84363678139de8bbb98db40a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5645,
      "upload_time": "2021-10-04T06:46:47",
      "upload_time_iso_8601": "2021-10-04T06:46:47.582491Z",
      "url": "https://files.pythonhosted.org/packages/68/e7/31495df927c91233e5dac9db621589f86257d8f42902862914efc0e6f74c/drf_fsm-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "48aed367e98435fe0942e72f31df77029bd61cde40ee9a87bad32cb09384ecc8",
        "md5": "e86df3a224319f1e2d84f822867fc26a",
        "sha256": "043fb431edd7f4ab92819a98c7d0767fa043f4e9e39192be0579d005fb5256c8"
      },
      "downloads": -1,
      "filename": "drf_fsm-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e86df3a224319f1e2d84f822867fc26a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5475,
      "upload_time": "2021-10-04T06:46:49",
      "upload_time_iso_8601": "2021-10-04T06:46:49.433915Z",
      "url": "https://files.pythonhosted.org/packages/48/ae/d367e98435fe0942e72f31df77029bd61cde40ee9a87bad32cb09384ecc8/drf_fsm-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}