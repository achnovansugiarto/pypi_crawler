{
  "info": {
    "author": "Mahdi Fakhrabadi",
    "author_email": "mahdi.blackhat@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Security"
    ],
    "description": "Django SecureAdmin\n==================\n\ndjango-secureadmin is a package for secure your django administration.\nHow It Works ? it save real admin ip , after new logins it check new and last ip. if the last ip and new ip not equeals, it send email to user email and that email has verification code and date and ip of logged in user.\nin the admin page , user see Login code text field and user shoud enter the login code in that field. then the secureadmin verify that and if it equals login code, then user enters the administration page.\n\ncompatible with python3\n\nRequirements\n============\n\nDjango >= 1.7\npython 2.7 or 3.x\n\nInstallation\n============\n\nYou can install the latest stable package running this command::\n\n    $ pip install django-secureadmin\n    for python3 :\n    $ pip3 install django-secureadmin\nConfiguration\n=============\n\nFirst of all, you must add this project to your list of INSTALLED_APPS in\nsettings.py::\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'django-secureadmin',\n        ...\n    )\n\nNext, install the ipcheck middleware::\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'secureadmin.middleware.ipcheck'\n    )\n\nRun python manage.py syncdb.  This creates the appropriate tables in your database\nthat are necessary for operation.\n\nCustomizing SecureAdmin\n-----------------------\nYou can customize SecureAdmin Email options and templates ,\n\n* SECUREADMIN_MAILSUBJECT : the subject of emails sent from secureadmin , Default : Unusual sign in attempt prevented \n* SECUREADMIN_MAILFROM : define mail from option. Default : security@localhost\n* SECUREADMIN_LOGOUTURL : define logout url , user can access it when under login pass code.\n* SECUREADMIN_TEMPLATE : template for view when unusual login detected. its require for secureadmin work ! - in you template you should created a form , in the form you should have a input named code for login code input. you can check login code true or false. example : {% if errorcore %}<p style=\"color:red\">login code false</p>{% endif %}  -- it login code true , it redirect to admin page.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/irandjango/django-secureadmin/",
    "keywords": "secure django,django,secure django admin,django admin,secureadmin",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-secureadmin",
    "package_url": "https://pypi.org/project/django-secureadmin/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-secureadmin/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/irandjango/django-secureadmin/"
    },
    "release_url": "https://pypi.org/project/django-secureadmin/1.4/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django-SecureAdmin send verification mail when user last and new ip not equals.",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1522532,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a874393308efac3a2d5e5279d16249d1bea32aa95f8836d2fc6b1c3180593c00",
        "md5": "2f739b081653cfc24f77b495bd749a23",
        "sha256": "eafd705ba6a374e789acced776d275fd337abb8909f985bf392da6c09d9ffaad"
      },
      "downloads": -1,
      "filename": "django-secureadmin-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2f739b081653cfc24f77b495bd749a23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4120,
      "upload_time": "2015-04-27T10:19:31",
      "upload_time_iso_8601": "2015-04-27T10:19:31.485721Z",
      "url": "https://files.pythonhosted.org/packages/a8/74/393308efac3a2d5e5279d16249d1bea32aa95f8836d2fc6b1c3180593c00/django-secureadmin-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}