{
  "info": {
    "author": "Chris Adams",
    "author_email": "cadams@loc.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=====================\ndjango-tabular-export\n=====================\n\n.. image:: https://landscape.io/github/LibraryOfCongress/django-tabular-export/master/landscape.svg\n   :target: https://landscape.io/github/LibraryOfCongress/django-tabular-export/master\n   :alt: Landscape.io Code Quality\n\n.. image:: https://travis-ci.org/LibraryOfCongress/django-tabular-export.png?branch=master\n    :target: https://travis-ci.org/LibraryOfCongress/django-tabular-export\n\nSimple spreadsheet exports from Django\n\nDocumentation\n-------------\n\nThis module contains functions which take (headers, rows) pairs and return HttpResponses with either XLSX or\nCSV downloads and Django admin actions which can be added to any ModelAdmin for generic exports. It provides\ntwo functions (``export_to_csv_response`` and ``export_to_xlsx_response``) which take a filename,\na list of column headers, and a Django ``QuerySet``, list-like object, or generator and return a response.\n\nGoals\n~~~~~\n\n* This project is not intended to be a general-purpose spreadsheet manipulation library. The only goal is to\n  export data quickly and safely.\n* The API is intentionally simple, giving you full control over the display and formatting of headers or your\n  data. ``flatten_queryset`` has special handling for only two types of data: ``None`` will be converted to an\n  empty string and ``date`` or ``datetime`` instances will serialized using ``isoformat()``. All\n  other values will be specified as the text data type to avoid data corruption in Excel if the values happen\n  to resemble a date in the current locale.\n* **Unicode-safety**: input values, including lazy objects, are converted using Django's\n  `force_text <https://docs.djangoproject.com/en/1.9/ref/utils/#django.utils.encoding.force_text>`_\n  function and will always be emitted as UTF-8\n* **Performance**: the code is known to work with data sets up to hundreds of thousands of rows. CSV responses\n  use ``StreamingHttpResponse``, use minimal memory, and start very quickly. Excel (XLSX) responses cannot be\n  streamed but `xlsxwriter <https://pypi.python.org/pypi/XlsxWriter>`_ is one of the faster implementations\n  and its memory-size optimizations are enabled.\n\nQuickstart\n----------\n\nInstall django-tabular-export::\n\n    pip install django-tabular-export\n\nThen use it in a project::\n\n    from tabular_export import export_to_csv_response, export_to_xlsx_response, flatten_queryset\n\n    def my_view(request):\n        return export_to_csv_response('test.csv', ['Column 1'], [['Data 1'], ['Data 2'], …])\n\n\n    def my_other_view(request):\n        headers = ['Title', 'Date Created']\n        rows = MyModel.objects.values_list('title', 'date_created')\n        return export_to_excel_response('items.xlsx', headers, rows)\n\n\n    def export_using_a_generator(request):\n        headers = ['A Number']\n\n        def my_generator():\n            for i in range(0, 100000):\n                yield (i, )\n\n        return export_to_excel_response('numbers.xlsx', headers, my_generator())\n\n    def export_renaming_columns(request)\n        qs = MyModel.objects.filter(…).select_related(…)\n        headers, data = flatten_queryset(qs, field_names=['title', 'related_model__title_en'],\n                                         extra_verbose_names={'related_model__title_en': 'English Title'})\n        return export_to_csv_response('custom_export.csv', headers, data)\n\n\nAdmin Integration\n~~~~~~~~~~~~~~~~~\n\nThere are two convenience `admin actions <https://docs.djangoproject.com/en/1.9/ref/contrib/admin/actions/>`_\nwhich make it simple to add “Export to Excel” and “Export to CSV” actions::\n\n    from tabular_export.admin import export_to_csv_action, export_to_excel_action\n\n    class MyModelAdmin(admin.ModelAdmin):\n        actions = (export_to_excel_action, export_to_csv_action)\n        …\n\nThe default columns will be the same as you would get calling ``values_list`` on your ``ModelAdmin``'s default\nqueryset as returned by ``ModelAdmin.get_queryset()``. If you want to customize this, simply declare a new\naction on your ``ModelAdmin`` which does whatever data preparation is necessary::\n\n    from tabular_export.admin import export_to_excel_action\n\n    class MyModelAdmin(admin.ModelAdmin):\n        actions = ('export_batch_summary_action', )\n\n        def export_batch_summary_action(self, request, queryset):\n            headers = ['Batch Name', 'My Computed Field']\n            rows = queryset.annotate(…).values_list('title', 'computed_field_name')\n            return export_to_excel_response('batch-summary.xlsx', headers, rows)\n        export_batch_summary_action.short_description = 'Export Batch Summary'\n\n\nDebugging\n~~~~~~~~~\n\nThe ``TABULAR_RESPONSE_DEBUG = True`` setting will cause all views to return HTML tables",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LibraryOfCongress/django-tabular-export",
    "keywords": null,
    "license": "CC0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tabular-export",
    "package_url": "https://pypi.org/project/django-tabular-export/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-tabular-export/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/LibraryOfCongress/django-tabular-export"
    },
    "release_url": "https://pypi.org/project/django-tabular-export/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Simple spreadsheet exports from Django",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3295035,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d2d8297d61094b5d262204d307132e4a215e2fddcd401a2066d2ac03f75bfc",
        "md5": "93c8ec68229a8950a9bbfff2c7c9b09f",
        "sha256": "6d3f4a7bc095bdae42b93c802b62b5b27749f153cd4f6a873d856d657b33c11f"
      },
      "downloads": -1,
      "filename": "django_tabular_export-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93c8ec68229a8950a9bbfff2c7c9b09f",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 10810,
      "upload_time": "2016-03-04T19:07:02",
      "upload_time_iso_8601": "2016-03-04T19:07:02.216641Z",
      "url": "https://files.pythonhosted.org/packages/b0/d2/d8297d61094b5d262204d307132e4a215e2fddcd401a2066d2ac03f75bfc/django_tabular_export-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2933aca4bfa68f042e8ba0c1925db108dc0ee51b397104a7551cce6ea1d812f8",
        "md5": "ac6b810b07994ec6b6d111a376a470ee",
        "sha256": "6bec1cd1359cccd04adaa0a8e634c8d8eea379bed7697179cad9362729aa9824"
      },
      "downloads": -1,
      "filename": "django-tabular-export-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac6b810b07994ec6b6d111a376a470ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11408,
      "upload_time": "2016-03-04T19:06:54",
      "upload_time_iso_8601": "2016-03-04T19:06:54.936547Z",
      "url": "https://files.pythonhosted.org/packages/29/33/aca4bfa68f042e8ba0c1925db108dc0ee51b397104a7551cce6ea1d812f8/django-tabular-export-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}