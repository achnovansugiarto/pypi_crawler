{
  "info": {
    "author": "Manfred Moitzi",
    "author_email": "mozman@gmx.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "dxfwrite\r\n========\r\n\r\nAbstract\r\n--------\r\n\r\nA Python library to create DXF R12 drawings.\r\n\r\na simple example::\r\n\r\n    from dxfwrite import DXFEngine as dxf\r\n    drawing = dxf.drawing('test.dxf')\r\n    drawing.add(dxf.line((0, 0), (10, 0), color=7))\r\n    drawing.add_layer('TEXTLAYER', color=2)\r\n    drawing.add(dxf.text('Test', insert=(0, 0.2), layer='TEXTLAYER'))\r\n    drawing.save()\r\n\r\nsupported DXF R12 entities\r\n--------------------------\r\n\r\n * ARC\r\n * ATTDEF\r\n * ATTRIB\r\n * BLOCK\r\n * CIRCLE\r\n * 3DFACE\r\n * INSERT\r\n * LINE\r\n * POINT\r\n * POLYLINE (special Polyface and Polymesh objects are available)\r\n * SHAPE (not tested)\r\n * SOLID\r\n * TRACE\r\n * TEXT\r\n * VERTEX (only for internal use, see Polyline, Polyface and Polymesh objects)\r\n * VIEWPORT\r\n\r\nnot supported DXF R12 entities\r\n------------------------------\r\n\r\n * DIMENSION\r\n\r\nemulated entities from DXF R13 and later\r\n----------------------------------------\r\n\r\n * MTEXT (R13) ... emulated as composite entity MText\r\n * ELLIPSE (R13) ... approximated by Ellipse\r\n * SPLINE (R13) ... approximated by Spline\r\n * LWPOLYLINE (R13) ... use POLYLINE\r\n * TABLE (R2005) ... emulated as composite entity Table\r\n\r\ncomposite entities\r\n------------------\r\n\r\n * MText -- multi-line text\r\n * LinearDimension\r\n * AngularDimension\r\n * ArcDimension\r\n * RadialDimension\r\n * Table -- text and blockrefs containing table like a HTML-table\r\n * Ellipse -- approximated as POLYLINE\r\n * Spline -- cubic spline curve through breakpoints **without** additional control\r\n   points, approximated as POLYLINE\r\n * Bezier -- cubic bezier curve through breakpoints **with** additional control\r\n   points, approximated as POLYLINE\r\n * Clothoid -- Euler spiral, approximated as POLYLINE\r\n\r\nread/write AutoCAD ctb-files\r\n----------------------------\r\n\r\nThe module ``acadctb`` provides the ability to read and write AutoCAD ctb-files.\r\nWith ctb-files you can assign a new color or lineweight to a dxf-color-index for\r\nplotting or printing, but this has to be supported by the used application.\r\n\r\na simple example::\r\n\r\n    from dxfwrite import acadctb\r\n    ctb = acadctb.load('test.ctb')\r\n    style1 = ctb.get_style(1) # dxf color index (1 .. 255)\r\n    style1.set_color(23, 177, 68) # set rgb values (0..255)\r\n    style1.set_lineweight(0.7)\r\n    ctb.save('new.ctb')\r\n\r\nInstallation\r\n------------\r\n\r\nwith pip::\r\n\r\n    pip install dxfwrite\r\n\r\nor from source::\r\n\r\n    python setup.py install\r\n\r\nDocumentation\r\n-------------\r\n\r\nhttp://dxfwrite.readthedocs.org\r\nhttp://packages.python.org/dxfwrite/\r\n\r\nThe source code repository of dxfwrite can be found at bitbucket.org:\r\n\r\nhttp://bitbucket.org/mozman/dxfwrite\r\n\r\nFeedback is greatly appreciated.\r\n\r\nmozman <mozman@gmx.at>\r\n\r\nNews\r\n====\r\n\r\nVersion 1.2.0 - August 2012\r\n\r\n  * License changed to MIT License\r\n  * tested on Win7 with: CPython2.7, CPython3.2, CPython 3.3 beta, pypy-1.9\r\n\r\nVersion 1.1.0 - 29 December 2011\r\n\r\n  * rewrite of DXF-String building process\r\n  * refactored MText class\r\n  * changed Viewport table entry to VPort and DXFEngine.viewport to\r\n    DXFEngine.vport. This was necessary to implement the VIEWPORT (Entity)\r\n  * added VIEWPORT (Entity) to create viewports in paper space\r\n  * view docs also on http://dxfwrite.readthedocs.org\r\n  * added some docs\r\n  * changed clothoid mirror parameters\r\n  * added methods to class `Layer`: on(), off(), freeze(), thaw(), lock(), unlock()\r\n  * tested on Win7 32 Bit with CPython-2.7, CPython-3.2 and pypy-1.7,\r\n    IronPython 2.7 failed tests - unicode issues\r\n  * tested on Ubuntu 11.10 64 Bit with CPython-2.7, CPython-3.2 and pypy-1.7\r\n\r\nVersion 1.0.2 - 08 December 2011\r\n\r\n  * raw unicode encoding by Toni RuÅ¾a - use any unicode character for text and table-entries.\r\n\r\nVersion 1.0.1 - 26 March 2011\r\n\r\n  * added easy usage of modelspace/paperspace, see examples/paperspace.py\r\n  * BUGFIX: removed dict-comprehension in module htmlcolors.py for\r\n    backward-compatibility to Python 2.5 and 2.6, works with pypy 1.4.1\r\n\r\nVersion 1.0.0 - 11 March 2011\r\n\r\n  * changed: set DXF Header variables now looks like dwg.header['$VAR'] = value,\r\n    see http://packages.python.org/dxfwrite/headervars.html\r\n  * splitted makedxfexamples.py into several files and moved them into the\r\n    subdir 'examples'\r\n  * curves.Ellpise: radiusx -> rx; radiusy -> ry\r\n  * moved documentation to: http://packages.python.org/dxfwrite,\r\n    and using Sphinx (http://sphinx.pocoo.org)\r\n  * tested with Python 3.2 - OK\r\n  * further compatibility-tests only for CPython 2.7 & CPython 3.2+\r\n  * added Drawing.add_xref(filename), for usage see examples/xref.py\r\n  * adding relative attributes by Insert.add() consider the xy-scaling\r\n  * added `Howtos` section to documentation\r\n\r\nVersion 0.3.6 - 14 November 2010\r\n\r\n  * moved dxfwrite.drawing.ENCODING to class Drawing\r\n  * Python 3.1 support\r\n\r\nVersion 0.3.5 - 10 September 2010\r\n\r\n  * new: package and tests run with Python 2.7\r\n\r\nVersion 0.3.4 - 29 August 2010\r\n\r\n  * status: 5 - Production/Stable\r\n  * new: package and tests run with Python 2.5 (tests need unittest2)\r\n\r\nVersion 0.3.3 - 27 April 2010\r\n\r\n  * BUGFIX: makedxfexamples.py - attdef keyword error\r\n\r\nVersion 0.3.2 - 27 April 2010\r\n\r\n  * BUGFIX: Drawing.__dxf__() - StringIO() does not support 'with' statement\r\n\r\nVersion 0.3.1 - 24 April 2010\r\n\r\n  * new: insert2, insert block reference with automatic attrib filling\r\n  * changed interface for DXFEngine.attrib()\r\n\r\nVersion 0.3.0b1 - 28 March 2010\r\n\r\n  * new: subpackage algebra: circle, ray, clothoid, cspline, bezier (27.03.2010)\r\n  * new: Spline, Bezier, Clothoid and Ellipse - curves (27.03.2010)\r\n  * new: acadctb.py to read, write and create AutoCAD ctb-files (25.03.2010)\r\n  * splitted buildups.py into mtext.py and rect.py\r\n\r\nVersion 0.2.0 - 21 March 2010\r\n\r\n  * Alpha status - api may change\r\n\r\nVersion 0.1.0 - 14 March 2010\r\n\r\n  * Pre-Alpha status\r\n  * Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://bitbucket.org/mozman/dxfwrite/downloads",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/mozman/dxfwrite",
    "keywords": "DXF,CAD",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dxfwrite",
    "package_url": "https://pypi.org/project/dxfwrite/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/dxfwrite/",
    "project_urls": {
      "Download": "http://bitbucket.org/mozman/dxfwrite/downloads",
      "Homepage": "http://bitbucket.org/mozman/dxfwrite"
    },
    "release_url": "https://pypi.org/project/dxfwrite/1.2.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A Python library to create DXF R12 drawings.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6381495,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75722226dbddea6e556857efbc59f51a8b0882b71bc830bdfdd37b536a89cab6",
        "md5": "56bd40206e6dbf4a3be2f3b6936a2c4f",
        "sha256": "647788d3d384d8ebf665a646a0d2e0f32fb4b4d51fdc8f458c44681785d6cd6a"
      },
      "downloads": -1,
      "filename": "dxfwrite-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "56bd40206e6dbf4a3be2f3b6936a2c4f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 101460,
      "upload_time": "2012-08-11T09:31:41",
      "upload_time_iso_8601": "2012-08-11T09:31:41.688616Z",
      "url": "https://files.pythonhosted.org/packages/75/72/2226dbddea6e556857efbc59f51a8b0882b71bc830bdfdd37b536a89cab6/dxfwrite-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8aa087a76bcd4c1c4b2d413150accf2f35178a5e37ef89d57b5f8ab77e7c072",
        "md5": "3968d8ce155379d35b4d4666bb68c7e2",
        "sha256": "fb07c330673068cd784ba928b3b7e868dfa3ec2d72e2b6dd79693c94e52b6f84"
      },
      "downloads": -1,
      "filename": "dxfwrite-1.2.0.zip",
      "has_sig": false,
      "md5_digest": "3968d8ce155379d35b4d4666bb68c7e2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 151163,
      "upload_time": "2012-08-11T09:31:41",
      "upload_time_iso_8601": "2012-08-11T09:31:41.042928Z",
      "url": "https://files.pythonhosted.org/packages/e8/aa/087a76bcd4c1c4b2d413150accf2f35178a5e37ef89d57b5f8ab77e7c072/dxfwrite-1.2.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}