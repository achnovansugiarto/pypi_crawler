{
  "info": {
    "author": "Manfred Moitzi",
    "author_email": "mozman@gmx.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "dxfwrite\n========\n\nAbstract\n--------\n\nA Python library to create DXF R12 drawings.\n\na simple example::\n\n    from dxfwrite import DXFEngine as dxf\n    drawing = dxf.drawing('test.dxf')\n    drawing.add(dxf.line((0, 0), (10, 0), color=7))\n    drawing.add_layer('TEXTLAYER', color=2)\n    drawing.add(dxf.text('Test', insert=(0, 0.2), layer='TEXTLAYER'))\n    drawing.save()\n\nsupported DXF R12 entities\n--------------------------\n\n * ARC\n * ATTDEF\n * ATTRIB\n * BLOCK\n * CIRCLE\n * 3DFACE\n * INSERT\n * LINE\n * POINT\n * POLYLINE (special Polyface and Polymesh objects are available)\n * SHAPE (not tested)\n * SOLID\n * TRACE\n * TEXT\n * VERTEX (only for internal use, see Polyline, Polyface and Polymesh objects)\n * VIEWPORT\n\nnot supported DXF R12 entities\n------------------------------\n\n * DIMENSION\n\nemulated entities from DXF R13 and later\n----------------------------------------\n\n * MTEXT (R13) ... emulated as composite entity MText\n * ELLIPSE (R13) ... approximated by Ellipse\n * SPLINE (R13) ... approximated by Spline\n * LWPOLYLINE (R13) ... use POLYLINE\n * TABLE (R2005) ... emulated as composite entity Table\n\ncomposite entities\n------------------\n\n * MText -- multi-line text\n * LinearDimension\n * AngularDimension\n * ArcDimension\n * RadialDimension\n * Table -- text and blockrefs containing table like a HTML-table\n * Ellipse -- approximated as POLYLINE\n * Spline -- cubic spline curve through breakpoints **without** additional control\n   points, approximated as POLYLINE\n * Bezier -- cubic bezier curve through breakpoints **with** additional control\n   points, approximated as POLYLINE\n * Clothoid -- Euler spiral, approximated as POLYLINE\n\nread/write AutoCAD ctb-files\n----------------------------\n\nThe module ``acadctb`` provides the ability to read and write AutoCAD ctb-files.\nWith ctb-files you can assign a new color or lineweight to a dxf-color-index for\nplotting or printing, but this has to be supported by the used application.\n\na simple example::\n\n    from dxfwrite import acadctb\n    ctb = acadctb.load('test.ctb')\n    style1 = ctb.get_style(1) # dxf color index (1 .. 255)\n    style1.set_color(23, 177, 68) # set rgb values (0..255)\n    style1.set_lineweight(0.7)\n    ctb.save('new.ctb')\n\nInstallation\n------------\n\nwith pip::\n\n    pip install dxfwrite\n\nor from source::\n\n    python setup.py install\n\nDocumentation\n-------------\n\nhttp://dxfwrite.readthedocs.org\n\nhttp://packages.python.org/dxfwrite/\n\nThe source code repository of dxfwrite can be found at GitHub.com:\n\nhttps://github.com/mozman/dxfwrite.git\n\nFeedback is greatly appreciated.\n\nmozman <mozman@gmx.at>\n\nNews\n====\n\nVersion 1.2.1 - 2017-01-22\n\n  * BUGFIX: same layer for polyline and vertex entities (Ken Healy)\n  * PEP8  refactorings\n  * Moved to GitHub.com: https://github.com/mozman/dxfwrite.git\n\nVersion 1.2.0 - 2012-08-01\n\n  * License changed to MIT License\n  * tested on Win7 with: CPython2.7, CPython3.2, CPython3.3 beta, pypy-1.9\n\nVersion 1.1.0 - 2011-12-29\n\n  * rewrite of DXF-String building process\n  * refactored MText class\n  * changed Viewport table entry to VPort and DXFEngine.viewport to\n    DXFEngine.vport. This was necessary to implement the VIEWPORT (Entity)\n  * added VIEWPORT (Entity) to create viewports in paper space\n  * view docs also on http://dxfwrite.readthedocs.org\n  * added some docs\n  * changed clothoid mirror parameters\n  * added methods to class `Layer`: on(), off(), freeze(), thaw(), lock(), unlock()\n  * tested on Win7 32 Bit with CPython-2.7, CPython-3.2 and pypy-1.7,\n    IronPython 2.7 failed tests - unicode issues\n  * tested on Ubuntu 11.10 64 Bit with CPython-2.7, CPython-3.2 and pypy-1.7\n\nVersion 1.0.2 - 2011-12-08\n\n  * raw unicode encoding by Toni RuÅ¾a - use any unicode character for text and table-entries.\n\nVersion 1.0.1 - 2011-03-26\n\n  * added easy usage of modelspace/paperspace, see examples/paperspace.py\n  * BUGFIX: removed dict-comprehension in module htmlcolors.py for\n    backward-compatibility to Python 2.5 and 2.6, works with pypy 1.4.1\n\nVersion 1.0.0 - 2011-03-11\n\n  * changed: set DXF Header variables now looks like dwg.header['$VAR'] = value,\n    see http://packages.python.org/dxfwrite/headervars.html\n  * splitted makedxfexamples.py into several files and moved them into the\n    subdir 'examples'\n  * curves.Ellpise: radiusx -> rx; radiusy -> ry\n  * moved documentation to: http://packages.python.org/dxfwrite,\n    and using Sphinx (http://sphinx.pocoo.org)\n  * tested with Python 3.2 - OK\n  * further compatibility-tests only for CPython 2.7 & CPython 3.2+\n  * added Drawing.add_xref(filename), for usage see examples/xref.py\n  * adding relative attributes by Insert.add() consider the xy-scaling\n  * added `Howtos` section to documentation\n\nVersion 0.3.6 - 2010-11-14\n\n  * moved dxfwrite.drawing.ENCODING to class Drawing\n  * Python 3.1 support\n\nVersion 0.3.5 - 2010-09-10\n\n  * new: package and tests run with Python 2.7\n\nVersion 0.3.4 - 2010-08-29\n\n  * status: 5 - Production/Stable\n  * new: package and tests run with Python 2.5 (tests need unittest2)\n\nVersion 0.3.3 - 2010-04-27\n\n  * BUGFIX: makedxfexamples.py - attdef keyword error\n\nVersion 0.3.2 - 2010-04-27\n\n  * BUGFIX: Drawing.__dxf__() - StringIO() does not support 'with' statement\n\nVersion 0.3.1 - 2010-04-24\n\n  * new: insert2, insert block reference with automatic attrib filling\n  * changed interface for DXFEngine.attrib()\n\nVersion 0.3.0b1 - 2010-03-28\n\n  * new: subpackage algebra: circle, ray, clothoid, cspline, bezier (27.03.2010)\n  * new: Spline, Bezier, Clothoid and Ellipse - curves (27.03.2010)\n  * new: acadctb.py to read, write and create AutoCAD ctb-files (25.03.2010)\n  * splitted buildups.py into mtext.py and rect.py",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/mozman/dxfwrite/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mozman/dxfwrite.git",
    "keywords": "DXF,CAD",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dxfwrite",
    "package_url": "https://pypi.org/project/dxfwrite/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/dxfwrite/",
    "project_urls": {
      "Download": "https://github.com/mozman/dxfwrite/releases",
      "Homepage": "https://github.com/mozman/dxfwrite.git"
    },
    "release_url": "https://pypi.org/project/dxfwrite/1.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library to create DXF R12 drawings.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6381495,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2400020e692cf02c6d7ade0e0c45a22013476c9771aceccb8c2232ccde0ad42",
        "md5": "582a1a054432c6c255afbf84a7490991",
        "sha256": "5b90b3e7769baa0fd6326a7245469a1f0fc56a5f2e5b835c11ea664bbb993fe8"
      },
      "downloads": -1,
      "filename": "dxfwrite-1.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "582a1a054432c6c255afbf84a7490991",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "requires_python": null,
      "size": 84373,
      "upload_time": "2017-01-22T09:51:56",
      "upload_time_iso_8601": "2017-01-22T09:51:56.560745Z",
      "url": "https://files.pythonhosted.org/packages/f2/40/0020e692cf02c6d7ade0e0c45a22013476c9771aceccb8c2232ccde0ad42/dxfwrite-1.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b5236f09201d1bc506b3bf36e381ac6d5886714e6e7b84ad54bb961d25411c1b",
        "md5": "8a94c11415323b5369e0e75ac7cd7fd0",
        "sha256": "e6df9f203ca9b6623ca7c35e7294af768ab84d78cf48b574c113cbacd53671c4"
      },
      "downloads": -1,
      "filename": "dxfwrite-1.2.1.zip",
      "has_sig": false,
      "md5_digest": "8a94c11415323b5369e0e75ac7cd7fd0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 156820,
      "upload_time": "2017-01-22T09:51:53",
      "upload_time_iso_8601": "2017-01-22T09:51:53.173196Z",
      "url": "https://files.pythonhosted.org/packages/b5/23/6f09201d1bc506b3bf36e381ac6d5886714e6e7b84ad54bb961d25411c1b/dxfwrite-1.2.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}