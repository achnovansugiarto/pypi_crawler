{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\r\n# More Dots!\r\n\r\n[![PyPI Latest Release](https://img.shields.io/pypi/v/mo-dots.svg)](https://pypi.org/project/mo-dots/)\r\n[![Build Status](https://app.travis-ci.com/klahnakoski/mo-dots.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-dots)\r\n [![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-dots/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-dots?branch=dev)\r\n[![Downloads](https://pepy.tech/badge/mo-dots)](https://pepy.tech/project/mo-dots)\r\n\r\n#### Changes in version 9.x.x\r\n\r\nEscaping a literal dot (`.`) is no longer (`\\\\.`) rather double-dot (`..`). Escaping a literal dot can still be done with bell (`\\b`) \r\n\r\n#### Changes in version 5.x.x\r\n\r\nThe `Data()` constructor only accepts keyword parameters. It no longer accepts a dict, nor does it attempt to clean the input.  Replace `Data(my_var)` with `to_data(my_var)`\r\n  \r\n\r\n## Overview\r\n\r\nThis library defines a `Data` class that can serve as a replacement for `dict`, with additional features. \r\n\r\n    >>> from mo_dots import to_data, Data\r\n\r\n*See the [full documentation](https://github.com/klahnakoski/mo-dots/tree/dev/docs) for all the features of `mo-dots`*\r\n\r\n### Create instances\r\n\r\nDefine `Data` using named parameters, just like you would a `dict`\r\n\r\n    >>> Data(b=42, c=\"hello world\")\r\n    Data({'b': 42, 'c': 'hello world'})\r\n\r\nYou can also wrap existing `dict`s so they can be used like `Data`\r\n\r\n    >>> to_data({'b': 42, 'c': 'hello world'})\r\n    Data({'b': 42, 'c': 'hello world'})\r\n\r\n### Dot Access\r\n\r\nAccess properties with attribute dots: `a.b == a[\"b\"]`. You have probably seen this before.\r\n\r\n### Path Access\r\n\r\nAccess properties by dot-delimited path.\r\n\r\n\t>>> a = to_data({\"b\": {\"c\": 42}})\r\n\t>>> a[\"b.c\"] == 42\r\n\tTrue\r\n\r\n### Safe Access\r\n\r\nIf a property does not exist then return `Null` rather than raising an error.\r\n\r\n\t>>> a = Data()\r\n\ta == {}\r\n\t>>> a.b == None\r\n\tTrue\r\n\t>>> a.b.c == None\r\n\tTrue\r\n\t>>> a[None] == None\r\n\tTrue\r\n\r\n### Path assignment\r\n\r\nNo need to make intermediate `dicts`\r\n\r\n    >>> a = Data()\r\n    a == {}\r\n    >>> a[\"b.c\"] = 42   # same as a.b.c = 42\r\n    a == {\"b\": {\"c\": 42}}\r\n\r\n### Path accumulation\r\n\r\nUse `+=` to add to a property; default zero (`0`)\r\n\r\n    >>> a = Data()\r\n    a == {}\r\n    >>> a.b.c += 1\r\n    a == {\"b\": {\"c\": 1}}\r\n    >>> a.b.c += 42\r\n    a == {\"b\": {\"c\": 43}}\r\n\r\nUse `+=` with a list ([]) to append to a list; default empty list (`[]`)\r\n\r\n    >>> a = Data()\r\n    a == {}\r\n    >>> a.b.c += [1]\r\n    a == {\"b\": {\"c\": [1]}}\r\n    >>> a.b.c += [42]\r\n    a == {\"b\": {\"c\": [1, 42]}}\r\n\r\n## Serializing to JSON\r\n\r\nThe standard Python JSON library does not recognize `Data` as serializable.  You may overcome this by providing `default=from_data`; which converts the data structures in this module into Python primitives of the same. \r\n\r\n    from mo_dots import from_data, to_data\r\n    \r\n    s = to_data({\"a\": [\"b\", 1]})\r\n    result = json.dumps(s, default=from_data)  \r\n\r\nAlternatively, you may consider [mo-json](https://pypi.org/project/mo-json/) which has a function `value2json` that converts a larger number of data structures into JSON.\r\n\r\n\r\n## Summary\r\n\r\nThis library is the basis for a data transformation algebra: We want a succinct way of transforming data in Python. We want operations on data to result in yet more data. We do not want data operations to raise exceptions. This library is solves Python's lack of consistency (lack of closure) under the dot (`.`) and slice `[::]` operators when operating on data objects. \r\n\r\n[Full documentation](https://github.com/klahnakoski/mo-dots/tree/dev/docs)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-dots",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-dots",
    "package_url": "https://pypi.org/project/mo-dots/",
    "platform": null,
    "project_url": "https://pypi.org/project/mo-dots/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-dots"
    },
    "release_url": "https://pypi.org/project/mo-dots/9.249.22317/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More Dots! Dot-access to Python dicts like Javascript",
    "version": "9.249.22317",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547895,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3fbf04bcc528d04793724a1dd43fd88b8b4efd78b161fbe93a2f5268cba22bb",
        "md5": "4b12b890d65b98212ee319296408076b",
        "sha256": "118a347dcdfe98c878dde292cebbe38a3f171964156875e7af08d7eb600753b8"
      },
      "downloads": -1,
      "filename": "mo-dots-9.249.22317.tar.gz",
      "has_sig": false,
      "md5_digest": "4b12b890d65b98212ee319296408076b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23820,
      "upload_time": "2022-11-13T15:43:58",
      "upload_time_iso_8601": "2022-11-13T15:43:58.149875Z",
      "url": "https://files.pythonhosted.org/packages/f3/fb/f04bcc528d04793724a1dd43fd88b8b4efd78b161fbe93a2f5268cba22bb/mo-dots-9.249.22317.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}