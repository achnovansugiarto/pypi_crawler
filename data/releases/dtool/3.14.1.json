{
  "info": {
    "author": "Tjelvar Olsson",
    "author_email": "tjelvar.olsson@jic.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Dtool: Manage Scientific Data\n=============================\n\n.. image:: https://badge.fury.io/py/dtool.svg\n   :target: http://badge.fury.io/py/dtool\n   :alt: PyPi package\n\n.. image:: https://readthedocs.org/projects/dtool/badge/?version=latest\n   :target: https://readthedocs.org/projects/dtool?badge=latest\n   :alt: Documentation Status\n\n*Make your data more resilient, portable and easy to work with by packaging\nfiles & metadata into self contained datasets.*\n\n- Documentation: http://dtool.readthedocs.io\n- Free software: MIT License\n\nOverview\n--------\n\nDtool is a suite of software for managing scientific data and making it\naccessible programatically. It consists of a command line interface ``dtool``\nand a Python API: `dtoolcore <https://github.com/jic-dtool/dtoolcore>`_.\n\nThe ``dtool`` command line interface allows one to organise files into datasets\nand to move datasets between different storage solutions, for example from\nlocal disk to remote object storage. Importantly it also provides methods to\nverify that the transfer has been successful.\n\nThe Python API gives complete access to the data and metadata in a dataset.  It\nmakes it easy to create scripts for processing the items, or a subset of items,\nin a dataset. The Python API also allows datasets to be constructed\nprogramatically.\n\nDtool is extensible, meaning that it is possible to create plugins both for\nadding functionality to the command line interface and for creating interfaces\nto custom storage backends.\n\nThe ``dtool`` Python package is a meta package that installs the packages:\n\n- `dtoolcore <https://github.com/jic-dtool/dtoolcore>`_ - core API\n- `dtool-cli <https://github.com/jic-dtool/dtool-cli>`_ - CLI plugin scaffold\n- `dtool-create <https://github.com/jic-dtool/dtool-create>`_ - CLI commands for creating datasets\n- `dtool-info <https://github.com/jic-dtool/dtool-info>`_ - CLI commands for getting information about datasets\n- `dtool-symlink <https://github.com/jic-dtool/dtool-symlink>`_ - storage broker interface allowing symlinking to data\n- `dtool-http <https://github.com/jic-dtool/dtool-symlink>`_ - storage broker interface allowing read only access to datasets over HTTP\n\n\nInstallation::\n\n    $ pip install -U pip setuptools wheel\n    $ pip install dtool\n\nThere are support packages for several object storage solutions:\n\n- `dtool-s3 <https://github.com/jic-dtool/dtool-s3>`_ - storage broker interface to S3 object storage\n- `dtool-azure <https://github.com/jic-dtool/dtool-azure>`_ - storage broker interface to Azure Storage\n- `dtool-ecs <https://github.com/jic-dtool/dtool-ecs>`_ - storage broker interface to ECS S3 object storage\n- `dtool-irods <https://github.com/jic-dtool/dtool-irods>`_ - storage broker interface to iRODS\n\nIf you have access to Amazon S3, Microsoft Azure, ECS S3 or iRODS storage you may also want to install support for these::\n\n    $ pip install dtool-s3 dtool-azure dtool-ecs dtool-irods\n\nUsage::\n\n    $ dtool create my-awesome-dataset\n    Created proto dataset file:///Users/olssont/my-awesome-dataset\n    Next steps:\n    1. Add raw data, eg:\n       dtool add item my_file.txt file:///Users/olssont/my-awesome-dataset\n       Or use your system commands, e.g:\n       mv my_data_directory /Users/olssont/my-awesome-dataset/data/\n    2. Add descriptive metadata, e.g:\n       dtool readme interactive file:///Users/olssont/my-awesome-dataset\n    3. Convert the proto dataset into a dataset:\n       dtool freeze file:///Users/olssont/my-awesome-dataset\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/jic-dtool/dtool/tarball/3.14.1",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jic-dtool/dtool",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dtool",
    "package_url": "https://pypi.org/project/dtool/",
    "platform": "",
    "project_url": "https://pypi.org/project/dtool/",
    "project_urls": {
      "Download": "https://github.com/jic-dtool/dtool/tarball/3.14.1",
      "Homepage": "https://github.com/jic-dtool/dtool"
    },
    "release_url": "https://pypi.org/project/dtool/3.14.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Dtool command line client for managing data",
    "version": "3.14.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13229240,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e9751d36ca5673a0d2b7b0d7fa624c127dde908a484c34334c2cbcc31235119",
        "md5": "c0f615cffeaa44b6791b28fc88ba3a49",
        "sha256": "8ccc7a8877a4952a84a8fdb470120b39b546144f32ee0f8297070f53275010a3"
      },
      "downloads": -1,
      "filename": "dtool-3.14.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c0f615cffeaa44b6791b28fc88ba3a49",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2731,
      "upload_time": "2018-12-12T21:33:21",
      "upload_time_iso_8601": "2018-12-12T21:33:21.438647Z",
      "url": "https://files.pythonhosted.org/packages/0e/97/51d36ca5673a0d2b7b0d7fa624c127dde908a484c34334c2cbcc31235119/dtool-3.14.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}