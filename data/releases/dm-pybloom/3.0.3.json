{
  "info": {
    "author": "jxub",
    "author_email": "jjanarek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\npybloom\n=======\n\n.. image:: https://travis-ci.org/jaybaird/python-bloomfilter.svg?branch=master\n    :target: https://travis-ci.org/jaybaird/python-bloomfilter\n\n``pybloom`` is a module that includes a Bloom Filter data structure along with\nan implmentation of Scalable Bloom Filters as discussed in:\n\nP. Almeida, C.Baquero, N. PreguiÃ§a, D. Hutchison, Scalable Bloom Filters,\n(GLOBECOM 2007), IEEE, 2007.\n\nBloom filters are great if you understand what amount of bits you need to set\naside early to store your entire set. Scalable Bloom Filters allow your bloom\nfilter bits to grow as a function of false positive probability and size.\n\nA filter is \"full\" when at capacity: M * ((ln 2 ^ 2) / abs(ln p)), where M\nis the number of bits and p is the false positive probability. When capacity\nis reached a new filter is then created exponentially larger than the last\nwith a tighter probability of false positives and a larger number of hash\nfunctions.\n\n.. code-block:: python\n\n    >>> from pybloom import BloomFilter\n    >>> f = BloomFilter(capacity=1000, error_rate=0.001)\n    >>> [f.add(x) for x in range(10)]\n    [False, False, False, False, False, False, False, False, False, False]\n    >>> all([(x in f) for x in range(10)])\n    True\n    >>> 10 in f\n    False\n    >>> 5 in f\n    True\n    >>> f = BloomFilter(capacity=1000, error_rate=0.001)\n    >>> for i in xrange(0, f.capacity):\n    ...     _ = f.add(i)\n    >>> (1.0 - (len(f) / float(f.capacity))) <= f.error_rate + 2e-18\n    True\n\n    >>> from pybloom import ScalableBloomFilter\n    >>> sbf = ScalableBloomFilter(mode=ScalableBloomFilter.SMALL_SET_GROWTH)\n    >>> count = 10000\n    >>> for i in xrange(0, count):\n    ...     _ = sbf.add(i)\n    ...\n    >>> (1.0 - (len(sbf) / float(count))) <= sbf.error_rate + 2e-18\n    True\n\n    # len(sbf) may not equal the entire input length. 0.01% error is well\n    # below the default 0.1% error threshold. As the capacity goes up, the\n    # error will approach 0.1%.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datamaranai/python-bloomfilter/",
    "keywords": "data structures,bloom filter,bloom,filter,probabilistic,set",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dm-pybloom",
    "package_url": "https://pypi.org/project/dm-pybloom/",
    "platform": "any",
    "project_url": "https://pypi.org/project/dm-pybloom/",
    "project_urls": {
      "Homepage": "https://github.com/datamaranai/python-bloomfilter/"
    },
    "release_url": "https://pypi.org/project/dm-pybloom/3.0.3/",
    "requires_dist": [
      "bitarray (>=0.3.4)"
    ],
    "requires_python": "",
    "summary": "Datamaran's fork of Pybloom adapted to Python3",
    "version": "3.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3860641,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f72385fbb8f8160eb25dc99a23fa87b7eded7c6a79d10a56cf02b4a387b8afa",
        "md5": "6c38f11f8aadce946a6fc954595dab00",
        "sha256": "02513f34a47dd34d2eefada470f373ccddc0d6537bc530dccdab3769e0b1983e"
      },
      "downloads": -1,
      "filename": "dm_pybloom-3.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c38f11f8aadce946a6fc954595dab00",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10679,
      "upload_time": "2018-05-14T11:46:15",
      "upload_time_iso_8601": "2018-05-14T11:46:15.505944Z",
      "url": "https://files.pythonhosted.org/packages/6f/72/385fbb8f8160eb25dc99a23fa87b7eded7c6a79d10a56cf02b4a387b8afa/dm_pybloom-3.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f09f7a1460fb4a6bf3128f481788f5122d07904dc140b8f50c1800f26b8f314a",
        "md5": "445c6d3555673005fe54c3a965901946",
        "sha256": "66472c3964018735c5dbebed96c3ba0281acd5c14a9be49b82cbe2c87bc48895"
      },
      "downloads": -1,
      "filename": "dm_pybloom-3.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "445c6d3555673005fe54c3a965901946",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9270,
      "upload_time": "2018-05-14T11:46:17",
      "upload_time_iso_8601": "2018-05-14T11:46:17.093443Z",
      "url": "https://files.pythonhosted.org/packages/f0/9f/7a1460fb4a6bf3128f481788f5122d07904dc140b8f50c1800f26b8f314a/dm_pybloom-3.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}