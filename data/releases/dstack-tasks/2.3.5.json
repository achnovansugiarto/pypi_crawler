{
  "info": {
    "author": "J Minnaar",
    "author_email": "jr.minnaar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools",
      "Topic :: System :: Installation/Setup",
      "Topic :: System :: Software Distribution"
    ],
    "description": "dstack-tasks\n------------\n\ndstack-tasks is a collection of invoke tasks that wrap common tools and services to make it easier to deploy code.\n\nTools wrapped::\n\n    - docker\n    - docker-compose\n    - postgresql (backup and restore)\n    - mysql (backup and restore)\n    - awscli (s3 only for now)\n    - git\n    - python\n    - django manage.py\n\nThe tasks are designed to run as a standalone console script (dstack) or as a collection of tasks to build on in\nyour invoke and fabric2* tasks.\n\nInstallation\n------------\n\nTo install, use pip::\n\n    pip install --pre dstack-tasks\n\n\nOnce installed, you can use it from within your project directory. The console script uses a `.env`\nfile to configure itself. At the moment, some tasks still require environmental variables before it can be used.\n\nExample usage\n-------------\n\nTo see list of tasks, use `dstack --list`. To see the help text of each task, use `dstack <task name> --help`. See below\nfor example usage::\n\n    # Backs-up database\n    dstack postgres backup --tag local-dev\n\n    # Release new version of app and publish to S3 (requires ~/.aws/credentials to be set up\n    dstack release_code --upload --not-static\n\ndstack-tasks can also be used as a base library for your `invoke` and `fabric2` tasks::\n\n    pip install https://github.com/fabric/fabric/archive/v2.zip\n\nAll tasks can be run in \"dry\" mode or in a specific environment. To see what a tasks will execute, run it in `dry`\nmode::\n\n    dstack dry postgres backup\n\nTo give your task additional context, you can use the special `e` task to load environmental variables\nfrom a `.env` file::\n\n    dstack e release_code\n\nThis can be used to for example specify a different Github repo etc.\n\nNotes\n-----\n\nIt is important to note that dstack-tasks is console script build on top of invoke and is thus primarily meant for\nexecuting tasks locally. However, dstack-tasks fully supports being used as a library in your fabric (version 2)\nfabfile.py. Simply import all tasks from `dstack_tasks` in your fabfile and you can execute them on a remote server\nusing something like `fab -H example.com e deploy --version 1.0.0`.\n\nAt it's core however, invoke just wraps bash commands and executes them on the server. This means that for advanced uses\nit might be worthwhile to install dstack-tasks on the server to allow complex tasks to be written in python instead of\nbash. So, instead of running `ls -al` via fabric 2 on the remote server and trying to capture and parse the output, you\ncan use an appropriate python package to get a list of files in a directory.\n\nKnown Issues\n------------\n\ndstack-tasks does not yet include a generic task that can be used to call itself on the server. There is also currently\nan issue with setting runtime environmental variables using Fabric2 to run tasks remotely.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/obitec/dstack-tasks",
    "keywords": "docker python wheels images runtime automation deploy",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dstack-tasks",
    "package_url": "https://pypi.org/project/dstack-tasks/",
    "platform": "",
    "project_url": "https://pypi.org/project/dstack-tasks/",
    "project_urls": {
      "Homepage": "https://github.com/obitec/dstack-tasks"
    },
    "release_url": "https://pypi.org/project/dstack-tasks/2.3.5/",
    "requires_dist": [
      "awscli",
      "boto3",
      "colorama",
      "fabric",
      "invoke",
      "python-dotenv",
      "requests",
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "CLI that accompanies dstack-tasks make it easy to build and deploy application. Integrates with dstack-factory.",
    "version": "2.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7665615,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77a7138cdddde48c2593c840543feae958fd67da09de9fc9112a917748dba32b",
        "md5": "a3fcb6d00abdbe429293feaa03b39942",
        "sha256": "b29f0670d1592bc91271ca7d6ce5fe91faae70d551391ad43d4d9135213cd91b"
      },
      "downloads": -1,
      "filename": "dstack_tasks-2.3.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a3fcb6d00abdbe429293feaa03b39942",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22452,
      "upload_time": "2020-06-27T12:36:51",
      "upload_time_iso_8601": "2020-06-27T12:36:51.918533Z",
      "url": "https://files.pythonhosted.org/packages/77/a7/138cdddde48c2593c840543feae958fd67da09de9fc9112a917748dba32b/dstack_tasks-2.3.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}