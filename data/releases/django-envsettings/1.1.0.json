{
  "info": {
    "author": "David Evans",
    "author_email": "d@evans.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Django EnvSettings\n==================\n\n.. image:: https://img.shields.io/travis/evansd/django-envsettings.svg\n   :target:  https://travis-ci.org/evansd/django-envsettings\n   :alt: Build Status\n\n.. image:: https://img.shields.io/pypi/v/django-envsettings.svg\n    :target: https://pypi.python.org/pypi/django-envsettings\n    :alt: Latest PyPI version\n\n**One-stop shop for configuring 12-factor Django apps**\n\n * Simple API for getting settings from environment variables.\n * Supports wide variety of email, cache and database backends.\n * Easily customisable and extensible.\n * One line auto-config for many Heroku add-ons.\n\n\nBasic Settings\n--------------\n\nIn your Django project's ``settings.py``:\n\n.. code-block:: python\n\n    import envsettings\n\n    SECRET_KEY = envsettings.get('DJANGO_SECRET_KEY', 'development_key_not_a_secret')\n\n    # Accepts the strings \"True\" and \"False\"\n    DEBUG = envsettings.get_bool('DJANGO_DEBUG', default=True)\n\n    FILE_UPLOAD_MAX_MEMORY_SIZE = envsettings.get_int('MAX_UPLOAD_SIZE', default=2621440)\n\n\nEmail Settings\n--------------\n\nBecause of the way Django's email settings work, this requires a bit of a hack with\n``locals()``:\n\n.. code-block:: python\n\n    import envsettings\n\n    locals().update(\n        envsettings.email.get('MAIL_URL', default='file:///dev/stdout'))\n\n\nThis sets ``EMAIL_BACKEND`` and whatever other values are needed to\nconfigure the selected backend.\n\nExample URLs\n++++++++++++\n\nStandard SMTP backend:\n\n.. code-block:: bash\n\n    # SMTP without TLS\n    smtp://username:password@host.example.com:25\n    # SMTP with TLS\n    smtps://username:password@host.example.com:587\n\n\nSpecial Django backends for use in development:\n\n.. code-block:: bash\n\n    # Console backend\n    file:///dev/stdout\n\n    # Dummy packend\n    file:///dev/null\n\n    # File-based backend\n    file:///path/to/output/dir\n\n\nProprietary backends (each requires the appropriate package installed):\n\n.. code-block:: bash\n\n   # Requires `django-mailgun`\n   mailgun://api:api_key@my-sending-domain.com\n\n   # Requires `sendgrid-django`\n   sendgrid://username:password@sendgrid.com\n\n   # Requires `djrill`\n   mandrill://:api_key@mandrillapp.com\n   mandrill://subaccount_name:api_key@mandrillapp.com\n\n   # Requires `django-ses-backend`\n   ses://access_key_id:access_key@us-east-1\n   ses://access_key_id:access_key@email.eu-west-1.amazonaws.com\n\n   # Requires `django-postmark`\n   postmark://api:api_key@postmarkapp.com\n\n\nHeroku Auto-Config\n++++++++++++++++++\n\nPass ``auto_config=True`` like so:\n\n.. code-block:: python\n\n    locals().update(\n        envsettings.email.get(default='file:///dev/stdout', auto_config=True))\n\nThis will automatically detect and configure any of the following Heroku email add-ons:\n*Mailgun*, *Sendgrid*, *Mandrill*, *Postmark*.\n\nSo, for instance, you can configure your app to send email via Mailgun simply by running:\n\n.. code-block:: bash\n\n   heroku addons:add mailgun:starter\n\nBy default it will use each provider's SMTP endpoint, however if it detects that\nthe appropriate backend is installed (see list above) it will configure Django to\nuse the HTTP endpoint which will be faster.\n\n\nCache Settings\n--------------\n\n.. code-block:: python\n\n    import envsettings\n\n    CACHES = {'default': envsettings.cache.get('CACHE_URL', 'locmem://')}\n\n\nExample URLs\n++++++++++++\n\nDjango backends for use in development:\n\n.. code-block:: bash\n\n   # Local memory\n   locmem://\n   # Local memory with prefix\n   locmem://some-prefix\n\n   # File based\n   file:///path/to/cache/directory\n\n   # Dummy cache\n   file:///dev/null\n\n\nRedis (requires ``django-redis`` package):\n\n.. code-block:: bash\n\n  # Basic Redis configuration\n  redis://example.com:6379\n  # With password\n  redis://:secret@example.com:6379\n  # Specifying database number\n  redis://example.com:6379/3\n  # Using UNIX socket\n  redis:///path/to/socket\n  # Using UNIX socket with password and database number\n  redis://:secret@/path/to/socket:3\n\n\nTo use Memcached you need one of the following packages installed:\n``django_pylibmc``, ``django_bmemcached``, ``pylibmc``, ``mecached``\n\nOnly ``django_pylibmc`` and ``django_bmemcachd`` support authentication and the memcached\nbinary protocol, so if you want to use either of these featues you'll need one of those\npackages.\n\n.. code-block:: bash\n\n   # Basic Memcached configuration\n   memcached://example.com:11211\n   # Multiple servers\n   memcached://example.com:11211,another.com:11211,onemore.com:11211\n   # With authentication\n   memcached://username:password@example.com\n   # Using the binary protocol\n   memcached-binary://example.com:11211\n\n\nHeroku Auto-Config\n++++++++++++++++++\n\nPass ``auto_config=True`` like so:\n\n.. code-block:: python\n\n   CACHES = {'default': envsettings.cache.get(default='locmen://', auto_config=True)}\n\nThis will automatically detect and configure any of the following Heroku cache add-ons:\n*Memcachier*, *MemcachedCloud*, *RedisToGo*, *RedisCloud*, *OpenRedis*, *RedisGreen*.\n\n\nCustomising & Extending\n-----------------------\n\nDjango EnvSettings is designed to be easily extensible by subclassing one of the existing\nsettings providers: ``CacheSettings``, ``EmailSettings``, or ``DatabaseSettings``.\n\n\nChanging default configuration\n++++++++++++++++++++++++++++++\n\nObviously you can modify the configuration dictionary after it's returned from ``envsettings``.\nHowever you can also set default values for each backend, while letting the environment determine\nwhich backend to use. For example:\n\n.. code-block:: python\n\n   envsettings.database.CONFIG['postgres']['OPTIONS'] = {\n       'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE}\n\n\nSupporting new backends\n+++++++++++++++++++++++\n\nTo add a new backend, subclass the appropriate settings class.\nYou will then need to add a key to the ``CONFIG`` dictionary which maps\nthe URL scheme you want to use for your backend to the default config\nfor that backend. You will also need to add a method named\n``handle_<URL_SCHEME>_url`` which will be passed the output from ``urlparse`` and the\ndefault config. The method should use the values from the parsed URL to update the\nconfig appropriately.\n\nFor example:\n\n\n.. code-block:: python\n\n   import envsettings\n\n   class CacheSettings(envsettings.CacheSettings):\n\n       CONFIG = dict(envsettings.CacheSettings.CONFIG, **{\n           'my-proto': {'BACKEND': 'my_cache_backend.MyCacheBackend'}\n       })\n\n       def handle_my_proto_url(self, parsed_url, config):\n           config['HOST'] = parsed_url.hostname or 'localhost'\n           config['PORT'] = parsed_url.port or 9000\n           config['USERNAME'] = parsed_url.username\n           config['PASSWORD'] = parsed_url.password\n           return config\n\n   cachesettings = CacheSettings()\n\n   CACHES = {'default': cachesettings.get('CACHE_URL')}\n\n\nSupporting new auto configuration options\n+++++++++++++++++++++++++++++++++++++++++\n\nTo add a new auto-configuration provider, subclass the appropriate settings class and add a method\nnamed ``auto_config_<PROVIDER_NAME>``. This will be passed a dictionary of environment\nvariables and should return either an appropriate configuration URL, or None.\n\nThe auto config methods are tried in lexical order, so if you want to force a method\nto be tried first you could call it ``auto_config_00_my_provider``, or something like\nthat.\n\nHere's an example:\n\n.. code-block:: python\n\n   import envsettings\n\n   class CacheSettings(envsettings.CacheSettings):\n\n       def auto_config_my_redis(self, env):\n           try:\n               host = env['MY_REDIS_HOST']\n               password = env['MY_REDIS_PASSWORD']\n           except KeyError:\n               return None\n           else:\n               return 'redis://:{password}@{host}'.format(\n                   host=host, password=password)\n\n   cachesettings = CacheSettings()\n\n   CACHES = {'default': cachesettings.get('CACHE_URL', auto_config=True)}\n\n\nCompatibility\n-------------\n\nTested on Python **2.7**, **3.3**, **3.4** and **PyPy**,\nwith Django versions **1.4** --- **1.7**\n\n\nIssues & Contributing\n---------------------\n\nRaise an issue on the `GitHub project <https://github.com/evansd/django-envsettings>`_ or\nfeel free to nudge `@_EvansD <https://twitter.com/_evansd>`_ on Twitter.\n\n\nLicense\n-------\n\nMIT Licensed",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/evansd/django-envsettings",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-envsettings",
    "package_url": "https://pypi.org/project/django-envsettings/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-envsettings/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/evansd/django-envsettings"
    },
    "release_url": "https://pypi.org/project/django-envsettings/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "One-stop shop for configuring 12-factor Django apps",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1685820,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb552ad6e0cacf14b188051664f60bc3a23adcf5fffda220c0e5c269b7c97fde",
        "md5": "5d26f025d5d987bb89cdc82efdafe394",
        "sha256": "0cbb5cd65bcb818a930a9f3e7641ac8be44f1cbc2952cbf0ec101f9ee29b1dd6"
      },
      "downloads": -1,
      "filename": "django_envsettings-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d26f025d5d987bb89cdc82efdafe394",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 13273,
      "upload_time": "2015-08-20T15:07:26",
      "upload_time_iso_8601": "2015-08-20T15:07:26.782708Z",
      "url": "https://files.pythonhosted.org/packages/fb/55/2ad6e0cacf14b188051664f60bc3a23adcf5fffda220c0e5c269b7c97fde/django_envsettings-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd0cf66f09a389b0434f40cb8904596ee2c79c6f2ee14c68283336464f7df0b8",
        "md5": "0ea79eb75b08245e084f13e673fb729f",
        "sha256": "ea1c1a406f261e9747a872e73771a615ee0c3f53e910346f273e85ed1bfa7c66"
      },
      "downloads": -1,
      "filename": "django-envsettings-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ea79eb75b08245e084f13e673fb729f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12571,
      "upload_time": "2015-08-20T15:07:08",
      "upload_time_iso_8601": "2015-08-20T15:07:08.867446Z",
      "url": "https://files.pythonhosted.org/packages/fd/0c/f66f09a389b0434f40cb8904596ee2c79c6f2ee14c68283336464f7df0b8/django-envsettings-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}