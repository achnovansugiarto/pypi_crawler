{
  "info": {
    "author": "MeaningCloud",
    "author_email": "support@meaningcloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "=======================\nMeaningCloud for Python\n=======================\n\nThis is MeaningCloud's official Python client, designed to enable you to use MeaningCloud's services easily from your own applications.\n\nMeaningCloud\n============\n\nMeaningCloud is a cloud-based text analytics service that through APIs allows you extract meaning from all kind of unstructured content: social conversation, articles, documents... You can check our demos here: https://www.meaningcloud.com/demos\n\nThe different APIs provide easy access to many NLP tasks such as automatic classification, sentiment analysis, topic extraction, etc. To be able to use the service you just have to log into MeaningCloud (by registering or using other services to log in: https://www.meaningcloud.com/developer/login), and you will receive a license key associated to a basic Free plan.\n\nYou can read more about the plans and the features available `here <https://www.meaningcloud.com/products/pricing>`_.\n\n\nGetting started\n===============\n\nInstallation\n------------\n\nYou can load meaningcloud-python into your project by using::\n\n    pip install MeaningCloud-python\n\n\nYou can also clone the code and type the following on your shell::\n\n    python setup.py install\n\n\nConfiguration\n-------------\n\nThe only thing you need to start using MeaningCloud's APIs is to log into MeaningCloud (by registering or using other services to log in). Once you've done that, you will be given a license key (https://www.meaningcloud.com/developer/account/subscription). Copy it and paste it in the corresponding place in the code, select the API you want to use and the parameters you want to use, and that's it.\n\nYou can find all the technical documentation about the APIs in the `API section <https://www.meaningcloud.com/developer/apis>`_ of the website.\n\nAnd we are always available at support@meaningcloud.com\n\nFunctionality\n-------------\n\nThis SDK currently contains the following:\n\n* **Request**: manages requests to any of MeaningCloud's APIS. It can also be used to directly generate requests without using specific classes .\n    - **LanguageRequest**: models a request to MeaningCloud Language Identification API.\n    - **TopicsRequest**: models a request to MeaningCloud TopicsExtraction API.\n    - **ClassRequest**: models a request to MeaningCloud Text Classification API.\n    - **SentimentRequest**: models a request to MeaningCloud Sentiment Analysis API.\n    - **ParserRequest**: models a request to Meaningcloud Lemmatization, PoS and Parsing API.\n* **Response**: models a generic response from the MeaningCloud API.\n    - **TopicsResponse**: models a response from the Topic Extraction API, providing auxiliary functions to work with the response, extracting the different types of topics and some of the most used fields in them.\n    - **ClassResponse**: models a response from the Text Classification API, providing auxiliary functions to work with the response and extract the different fields in each category.\n    - **SentimentResponse**: models a response from the Sentiment Analysis API, providing auxiliary functions to work with the response and extract the sentiment detected at different levels and for different elements.\n    - **LanguageResponse**: models a response from the Language Identification API, providing auxiliary functions to work with the response and extract the sentiment detected at different levels and for different elements.\n    - **ParserResponse**: models a response from the Lemmatization, PoS and Parsing API, providing auxiliary functions to work with the response and extract the lemmatization and PoS tagging of the text provided.\n\nUsage\n-----\n\nThis is an example on how to use this client (also included in the _example_ folder)::\n\n    #! /usr/bin/env python\n\n    # Created by MeaningCloud Support Team\n    # Date: 26/02/18\n\n    import sys\n    import meaningcloud\n\n    # @param model str - Name of the model to use. Example: \"IAB_en\" by default = \"IPTC_en\"\n    model = 'IAB_en'\n\n    # @param license_key - Your license key (found in the subscription section in https://www.meaningcloud.com/developer/)\n    license_key = '<your_license_key>'\n\n    # @param text - Text to use for different API calls\n    text = 'London is a very nice city but I also love Madrid.'\n\n\n\n\n    try:\n        # We are going to make a request to the Topics Extraction API\n        topics_response =  meaningcloud.TopicsResponse(meaningcloud.TopicsRequest(license_key, txt=text, lang='en', topicType='e').sendReq())\n\n        # If there are no errors in the request, we print the output\n        if (topics_response.isSuccessful()):\n            print(\"\\nThe request to 'Topics Extraction' finished successfully!\\n\")\n\n            entities =  topics_response.getEntities()\n            if (entities):\n                print(\"\\tEntities detected (\" + str(len(entities)) + \"):\\n\")\n                for entity in entities:\n                    print(\"\\t\\t\" + topics_response.getTopicForm(entity) + ' --> ' + topics_response.getTypeLastNode(topics_response.getOntoType(entity)) + \"\\n\")\n\n            else:\n                print(\"\\nOh no! There was the following error: \" + topics_response.getStatusMsg() + \"\\n\")\n        else:\n            if(topics_response.getResponse() is None):\n                print(\"\\nOh no! The request sent did not return a Json\\n\")\n            else:\n                print(\"\\nOh no! There was the following error: \" + topics_response.getStatusMsg() + \"\\n\")\n\n\n\n        #CLASS API CALL\n        #class_response = meaningcloud.ClassResponse(meaningcloud.ClassRequest(license_key, txt=text, model=model).sendReq())\n\n\n        #SENTIMENT API CALL\n        #sentiment_response = meaningcloud.SentimentResponse(meaningcloud.SentimentRequest(license_key, lang='en', txt=text, txtf='plain').sendReq())\n\n\n        #GENERIC API CALL\n        #generic = meaningcloud.Request(url=\"url_of_specific_API\",key=key)\n        #generic.addParam('parameter','value')\n        #generic_result = generic.sendRequest()\n        #generic_response = meaningcloud.Response(generic_result)\n\n\n        #We are going to make a request to the Language Identification API\n        lang_response = meaningcloud.LanguageResponse(meaningcloud.LanguageRequest(license_key, txt=text).sendReq())\n\n\n        #If there are no errors in the request, we will use the language detected to make a request to Sentiment and Topics\n        if(lang_response.isSuccessful()):\n            print(\"\\nThe request to 'Language Identification' finished successfully!\\n\")\n\n            results = lang_response.getResults()\n            if('language_list' in results.keys() and results['language_list']):\n                language = results['language_list'][0]['language']\n                print(\"\\tLanguage detected: \" + results['language_list'][0]['name'] + ' (' + language + \")\\n\")\n\n        # We are going to make a request to the Lemmatization, PoS and Parsing API\n        parser_response = meaningcloud.ParserResponse(\n            meaningcloud.ParserRequest(license_key, txt=text, lang='en').sendReq())\n\n        # If there are no errors in the request, print tokenization and lemmatization\n        if parser_response.isSuccessful():\n            print(\"\\nThe request to 'Lemmatization, PoS and Parsing' finished successfully!\\n\")\n            lemmatization = parser_response.getLemmatization(True)\n            print(\"\\tLemmatization and PoS Tagging:\\n\")\n            for token, analyses in lemmatization.items():\n                print(\"\\t\\tToken -->\", token)\n                for analysis in analyses:\n                    print(\"\\t\\t\\tLemma -->\", analysis['lemma'])\n                    print(\"\\t\\t\\tPoS Tag -->\", analysis['pos'], \"\\n\")\n\n\n\n    except ValueError:\n        e = sys.exc_info()[0]\n        print(\"\\nException: \" + str(e))\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MeaningCloud/meaningcloud-python",
    "keywords": "nlp,MeaningCloud,text analytics",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MeaningCloud-python",
    "package_url": "https://pypi.org/project/MeaningCloud-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/MeaningCloud-python/",
    "project_urls": {
      "Homepage": "https://github.com/MeaningCloud/meaningcloud-python"
    },
    "release_url": "https://pypi.org/project/MeaningCloud-python/1.1.0/",
    "requires_dist": [
      "requests[security]",
      "check-manifest; extra == 'dev'",
      "coverage; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Official Python SDK for MeaningCloud API",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8189496,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3c05b3dd20a12ced96bf7fdbe997072441e1f1e4ae2e5fc76f82d099414a6d4",
        "md5": "9fd3c4d0f11f147bdc932c23edfc5bd2",
        "sha256": "454f94c6f713c0171014c8fe8b105169dcc1d59f6fb93c0c1f596b21ed8cd7ac"
      },
      "downloads": -1,
      "filename": "MeaningCloud_python-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fd3c4d0f11f147bdc932c23edfc5bd2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17785,
      "upload_time": "2018-04-10T09:38:56",
      "upload_time_iso_8601": "2018-04-10T09:38:56.736381Z",
      "url": "https://files.pythonhosted.org/packages/f3/c0/5b3dd20a12ced96bf7fdbe997072441e1f1e4ae2e5fc76f82d099414a6d4/MeaningCloud_python-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}