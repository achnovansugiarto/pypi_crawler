{
  "info": {
    "author": "Yupeng He",
    "author_email": "yupeng.he.bioinfo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# methylpy\nWelcome to the home page of methylpy, a pyhton-based analysis pipeline for\n* (single-cell) (whole-genome) bisulfite sequencing data\n* (single-cell)  NOMe-seq data\n* differential methylation analysis\n\n# Note\n* methylpy was initiated by and built on the work of [Mattew D. Schultz](https://github.com/schultzmattd)\n* [tutorial](https://github.com/yupenghe/methylpy/blob/methylpy/tutorial.md) is being written\n* In new version, allc files for one sample are no longer split and the current allc format does not support header. Command `cat allc_SAMPLENAME_*.tsv |grep chr -v > allc_SAMPLENAME.tsv` can be used to change the older version of allc to the new version.\n* Current version methylpy has major difference compared to previous version.\nPlease checkout this document and [tutorial](https://github.com/yupenghe/methylpy/blob/methylpy/tutorial.md)\nfor details.\n\n\n# What can methylpy do?\n#### Processing bisulfite sequencing data and NOMe-seq data\n* fast and flexible pipeline for both single-end and paired-end data\n* all the way from raw reads (fastq) to methylation state and/or open chromatin readouts\n* also support getting readouts from alignment (BAM file)\n* including options for read trimming, quality filter and PCR duplicate removal\n* accept compressed input and generate compressed output\n* support post-bisulfite adaptor tagging (PBAT) data\n\n#### Calling differentially methylated regions (DMRs)\n* DMR calling at single cytosine level\n* support comparison across 2 or more samples/groups\n* conservative and accurate\n* useful feature for dealing with low-coverage data by combining data of adjacent cytosines\n\n# What you want to do\n* [Install methylpy](#install-methylpy)\n* [Test methylpy](#test-methylpy)\n* [Process data](#process-data)\n* [Call DMRs](#call-dmrs)\n* [Additional functions for data processing](#additional-functions-for-data-processing)\n* [Cite methylpy](#cite-methylpy)\n\nrun `methylpy -h` to get a list of functions.\n\n# Install methylpy\n#### Step 1 - Download methylpy and set up environment variable\nEnter the directory where you would like to install methylpy and run\n```\ngit clone https://github.com/yupenghe/methylpy.git\ncd methylpy/\npython setup.py install\n```\nIf you would like to install methylpy in path of your choice, run \n`python setup.py install --prefix=/USER/PATH/`. \nThen, try `methylpy` and if it gives no error, the setup is likely successful.\nSee [Test methylpy](#test-methylpy) for more rigorious test.\n\n#### Step 2 - Install dependencies\nmethylpy is written in python so obviously python2/3 needs to be installed.\nmethylpy also depends on two python modules, [numpy](http://www.numpy.org/) \nand [scipy](https://www.scipy.org/).\nThe easiest way to resolve these dependencies is to install [anaconda](https://www.anaconda.com/download/)\n\nIn addition, some features of methylpy depend on several publicly available tools (not all of them are required\nif you only use a subset of methylpy functions).\n* [cutadapt](http://cutadapt.readthedocs.io/en/stable/installation.html) (>=1.9) for raw read trimming\n* [bowtie](http://bowtie-bio.sourceforge.net/index.shtml) and/or \n[bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml) for alignment\n* [samtools](https://github.com/samtools/samtools) (>=1.3) for alignment results manipulation\n* [Picard](https://broadinstitute.github.io/picard/index.html) (>=2.10.8) for removal of PCR duplicates\n* java (its path included in `PATH` environment variable) for running Picard\n* [wigToBigWig](http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig) for converting methylpy output \nto bigwig format\n\nLastly, if paths to cutadapt, bowtie/bowtie2, samtools and wigToBigWig are included in `PATH` variable,\nmethylpy can run these tools directly. Otherwise, the paths have to be passed to methylpy as augments. \nPath to Picard needs to be passed to methylpy as a parameter to run PCR duplicate removal.\n\n#### Optional step - Compile rms.cpp\nDMR finding requires an executable `methylpy/methylpy/run_rms_tests.out`, which was compiled from\nC++ code `methylpy/methylpy/rms.cpp`. In most cases, the precompiled file can be used directly. To\ntest this, simply run execute `methylpy/methylpy/run_rms_tests.out`. If help page shows, recompiling\nis not required. If error turns up, the executable needs to be regenerated by compiling `rms.cpp` and\nthis step requires [GSL](https://www.gnu.org/software/gsl/) installed correctly. In most linux operating \nsystem, the below commands will do the job\n```\ncd methylpy/methylpy/\ng++ -O3 -l gsl -l gslcblas -o run_rms_tests.out rms.cpp\n```\nIn Ubuntu (>=16.04), please try the below commands first.\n```\ncd methylpy/methylpy/\ng++ -o run_rms_tests.out rms.cpp `gsl-config --cflags â€”libs`\n```\n\n# Test methylpy\nTo test whether methylpy and the dependencies are installed and set up correctly, run\n```\ncd methylpy/test\npython run_test.py\n```\n\n# Process data\nPlease see [methylpy tutorial](https://github.com/yupenghe/methylpy/blob/methylpy/tutorial.md)\nfor more details.\n\n#### Step 1 - Build converted genome reference\nBuild bowtie/bowtie2 index for converted genome. Run `methylpy build-reference -h`\nto get more information. An example of building mm10 mouse reference index:\n\n```\nmethylpy build-reference \\\n\t--input-files mm10_bt2/mm10.fa \\\n\t--output-prefix mm10_bt2/mm10 \\\n\t--bowtie2 True\n```\n\n#### Step 2 - Process bisulfite sequencing and NOMe-seq data \nFunction `single-end-pipeline` is For processing single-end data. Run \n`methylpy single-end-pipeline -h` to get help information. Below code\nis an example of using methylpy to process single-end bisulfite sequencing\ndata. For processing NOMe-seq data, please use `num_upstr_bases=1` to include\none base upstream cytosine as part of cytosine sequence context, which can be\nused to tease out GC sites.\n\n```\nmethylpy single-end-pipeline \\\n\t--read-files raw/mESC_R1.fastq.gz \\\n\t--sample mESC \\\n\t--forward-ref mm10_bt2/mm10_f \\\n\t--reverse-ref mm10_bt2/mm10_r \\\n\t--ref-fasta mm10_bt2/mm10.fa \\\n\t--num-procs 8 \\\n\t--remove-clonal True \\\n\t--path-to-picard=\"picard/\"\n```\n\nAn command example for processing paired-end data.\nRun `methylpy paired-end-pipeline -h` to get more information. \n\n```\nmethylpy paired-end-pipeline \\\n\t--read1-files raw/mESC_R1.fastq.gz \\\n\t--read2-files raw/mESC_R2.fastq.gz \\\n\t--sample mESC \\\n\t--forward-ref mm10_bt2/mm10_f \\\n\t--reverse-ref mm10_bt2/mm10_r \\\n\t--ref-fasta mm10_bt2/mm10.fa \\\n\t--num-procs 8 \\\n\t--remove-clonal True \\\n\t--path-to-picard=\"picard/\"\n```\n\n#### Output format\nOutput file(s) are (compressed) tab-separated text file(s) in allc format. \"allc\" stands\nfor all cytosine (C). Each row in an allc file corresponds to one cytosine in the genome. \nAn allc file contain 7 columns and no header:\n\n|index|column name|example|note|\n|:----:|:-----:|:-----:|:---:|\n|1|chromosome|12|with no \"chr\"|\n|2|position|18283342|1-based|\n|3|strand|+|either + or -|\n|4|sequence context|CGT|can be more than 3 bases|\n|5|mc|18|count of reads supporting methylation|\n|6|cov|21|read coverage|\n|7|methylated|1|indicator of significant methylation|\n\n# Call DMRs\nThis function will take a list of compressed/uncompressed allc files (output files from methylpy pipeline) as input\nand look for DMRs. Help information of this function is available via running `methylpy DMRfind -h`. \n\nBelow is the code of an example of calling DMRs for CG methylation between two samples, \n`AD_HT` and `AD_IT` on chromosome 1 through 5 using 8 processors.\n\n```\nmethylpy DMRfind \\\n\t--allc-files allc/allc_AD_HT.tsv.gz allc/allc_AD_IT.tsv.gz \\\n\t--samples AD_HT AD_IT \\\n\t--mc-type \"CGN\" \\\n\t--chroms 1 2 3 4 5 \\\n\t--num-procs 8 \\\n\t--output-prefix DMR_HT_IT\n```\nPlease see [methylpy tutorial](https://github.com/yupenghe/methylpy/blob/methylpy/tutorial.md) for details.\n\n# Additional functions for data processing\n#### Extract cytosine methylation state from BAM file\nThe `call-methylation-state` function allows users to get cytosine methylation state (allc file) from\nalignment file (BAM file).\nIt is part of the data processing pipeline which is especially useful for getting the allc file from\nalignment file from other methylation data pipelines like bismark. Run `methylpy call-methylation-state -h`\nto get help information. Below is an example of running this function. Please make sure to remove \n`--paired-end True` or use `--paired-end False` for BAM file from single-end data.\n\n```\nmethylpy call-methylation-state \\\n\t--input-file mESC_processed_reads_no_clonal.bam \\\n\t--paired-end True \\\n\t--sample mESC \\\n\t--ref-fasta mm10_bt2/mm10.fa \\\n\t--num-procs 8\n```\n\n### Get methylation level for genomic regions\nCalculating methylation level of certain genomic regions can give an estimate of the methylation\nabundance of these loci. This can be achieved using the `add-methylation-level` function. \nSee `methylpy add-methylation-level -h` for more details about the input format and available options.\n```\nmethylpy add-methylation-level \\\n\t--input-tsv-file DMR_AD_IT.tsv \\\n\t--output-file DMR_AD_IT_with_level.tsv \\\n\t--allc-files allc/allc_AD_HT_1.tsv.gz allc/allc_AD_HT_2.tsv.gz \\\n\t\tallc/allc_AD_IT_1.tsv.gz allc/allc_AD_IT_2.tsv.gz \\\n\t--samples AD_HT_1 AD_HT_2 AD_IT_1 AD_IT_2 \\\n\t--mc-type CGN \\\n\t--num-procs 4\n```\n\n#### Merge allc files (of replicates)\nThe `merge-allc` function can merge multiple allc files into a single allc file. It is useful when \nseparate allc files are generated for replicates of a tissue or cell type, and one wants to get a single\nallc file for that tissue/cell type. See `methylpy merge-allc -h` for more information. \n```\nmethylpy merge-allc \\\n\t--allc-files allc/allc_AD_HT_1.tsv.gz allc/allc_AD_HT_2.tsv.gz \\\n\t--output-file allc/allc_AD_HT.tsv.gz \\\n\t--compress-output True\n```\n\n#### Convert allc file to bigwig format\nThe `allc-to-bigwig` function generates bigwig file from allc file. Methylation level will be\ncalculated in equally divided non-overlapping genomic bins and the output will be stored in a bigwig\nfile. See `methylpy allc-to-bigwig -h` for more information. \n```\nmethylpy allc-to-bigwig \\\n\t--input-allc-file results/allc_mESC.tsv.gz \\\n\t--output-file results/allc_mESC.bw \\\n\t--ref-fasta mm10_bt2/mm10.fa \\\n\t--mc-type CGN \\\n\t--bin-size 100 \t\n```\n\n#### Quality filter for bisulfite sequencing reads\nSometimes, we want to filter out reads that cannot be mapped confidently or are likely from \nunder-converted DNA fragments. This can be done using the `bam-quality-filter` function.\nSee `methylpy bam-quality-filter -h` for parameter inforamtion. \n\nFor example, below command can be used to filter out reads with less than 30 MAPQ score\n(poor alignment) and with mCH level greater than 0.7 (under-conversion) if the reads contain\nenough (at least 3) CH sites.\n\n```\nmethylpy bam-quality-filter \\\n\t--input-file mESC_processed_reads_no_clonal.bam \\\n\t--output-file mESC_processed_reads_no_clonal.filtered.bam \\\n\t--ref-fasta mm10_bt2/mm10.fa \\\n\t--quality-cutoff 30 \\\n\t--min-num-ch 3 \\\n\t--max-mch-level 0.7 \\\n\t--buffer-line-number 100\n```\n\n#### Reidentify DMRs from existing result\nmethylpy is able to reidentify-DMR based on the result of previous DMRfind run. This function is especially\nuseful in picking out DMRs across a subset of categories and/or with different filters. \nSee `methylpy reidentify-DMR -h` for details about the options.\n```\nmethylpy reidentify-DMR \\\n\t--input-rms-file results/DMR_P0_FBvsHT_rms_results.tsv.gz \\\n\t--output-file results/DMR_P0_FBvsHT_rms_results_recollapsed.tsv \\\n\t--collapse-samples P0_FB_1 P0_FB_2 P0_HT_1 P0_HT_2 \\\n\t--sample-category P0_FB P0_FB P0_HT P0_HT \\\n\t--min-cluster 2\n```\n\n# Cite methylpy\nIf you use methylpy, please cite\n>Matthew D. Schultz, Yupeng He, John W.Whitaker, Manoj Hariharan, Eran A. Mukamel,\nDanny Leung, Nisha Rajagopal, Joseph R. Nery, Mark A. Urich, Huaming Chen, Shin Lin, \nYiing Lin, Bing Ren, Terrence J. Sejnowski, Wei Wang, Joseph R. Ecker. \nHuman Body Epigenome Maps Reveal Noncanonical DNA Methylation Variation.\nNature. 523(7559):212-216, 2015 Jul.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/methylpy/",
    "keywords": "Bioinformatics pipeline,DNA methylation,Bisulfite sequencing data,Nome-seq data,Differential methylation,Calling DMRs,Epigenetics,Functional genomics",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "methylpy",
    "package_url": "https://pypi.org/project/methylpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/methylpy/",
    "project_urls": {
      "Homepage": "http://pypi.python.org/pypi/methylpy/"
    },
    "release_url": "https://pypi.org/project/methylpy/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Bisulfite sequencing data processing and differential methylation analysis",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8279527,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d276f11e552c816976f1d5cccfcfca08b38992ecb6b27130c857f23295df8bd",
        "md5": "09f31db410f4431358062e016e22b509",
        "sha256": "add28bf7f26efaaa78c9c44515ea82f7c2032dabcd761a1b33ec670e032e8974"
      },
      "downloads": -1,
      "filename": "methylpy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "09f31db410f4431358062e016e22b509",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 85467,
      "upload_time": "2017-10-26T19:38:44",
      "upload_time_iso_8601": "2017-10-26T19:38:44.404416Z",
      "url": "https://files.pythonhosted.org/packages/2d/27/6f11e552c816976f1d5cccfcfca08b38992ecb6b27130c857f23295df8bd/methylpy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}