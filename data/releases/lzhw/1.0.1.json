{
  "info": {
    "author": "Muhammad N. Fawi",
    "author_email": "m.noor.fawi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# lzhw\n\n[![](https://img.shields.io/badge/docs-latest-blue.svg)](https://mnoorfawi.github.io/lzhw/) \n[![Build Status](https://travis-ci.com/MNoorFawi/lzhw.svg?branch=master)](https://travis-ci.com/MNoorFawi/lzhw)\n\n**Compression** library to compress big lists and/or pandas dataframes using an **optimized algorithm (lzhw)** developed from Lempel-Ziv, Huffman and LZ-Welch techniques.\n\n## Quick Start\n\n```bash\npip install lzhw\n```\n\n```python\nimport lzhw\n\nsample_data = [\"Sunny\", \"Sunny\", \"Overcast\", \"Rain\", \"Rain\", \"Rain\", \"Overcast\", \"Sunny\", \"Sunny\",\n               \"Rain\", \"Sunny\", \"Overcast\", \"Overcast\", \"Rain\", \"Rain\", \"Rain\", \"Sunny\", \"Sunny\", \n\t\t\t   \"Overcaste\"]\n\ncompressed = lzhw.LZHW(sample_data)\n## let's see how the compressed object looks like:\nprint(compressed)\n# 1111101101010011111101101010011100000010\n\n## its size\nprint(compressed.size())\n# 32\n\n## size of original\nfrom sys import getsizeof\nprint(getsizeof(sample_data))\n# 216\n\nprint(compressed.space_saving())\n# space saving from original to compressed is 85%\n\n## Let's decompress and check whether there is any information loss\ndecomp = compressed.decompress()\nprint(decomp == sample_data)\n# True\n```\n\nAs we saw, the LZHW class has saved 85% of the space used to store the original list without any loss.\nThe class has also some useful helper methods as **space_saving**, **size**, and **decompress()** to revert back to original.\n\nAnother example with numeric data.\n\n```python\nfrom random import sample, choices\n\nnumbers = choices(sample(range(0, 5), 5), k = 20)\ncomp_num = lzhw.LZHW(numbers)\n\nprint(getsizeof(numbers) > comp_num.size())\n# True\n\nprint(numbers == list(map(int, comp_num.decompress()))) ## make it int again\n# True\n\nprint(comp_num.space_saving())\n# space saving from original to compressed is 88%\n```\n\nLet's look at how the compressed object is stored and how it looks like when printed:\nLZHW class has an attribute called **compressed** which is the integer of the encoded bitstring\n\n```python\nprint(comp_num.compressed) # how the compressed is saved (as integer of the bit string)\n# 103596881534874\n\nprint(comp_num)\n# 10111100011100010000111010100101101111110011010\n```\n\nWe can also write the compressed data to files using **save_to_file** method, \nand read it back and decompress it using **decompress_from_file** function.\n\n```python\nstatus = [\"Good\", \"Bad\", \"Bad\", \"Bad\", \"Good\", \"Good\", \"Average\", \"Average\", \"Good\",\n          \"Average\", \"Average\", \"Bad\", \"Average\", \"Good\", \"Bad\", \"Bad\", \"Good\"]\ncomp_status = lzhw.LZHW(status)\ncomp_status.save_to_file(\"status.txt\")\ndecomp_status = lzhw.decompress_from_file(\"status.txt\")\nprint(status == decomp_status)\n# True\n```\n\n## Compressing DataFrames\n\nlzhw doesn't work only on lists, it also compress pandas dataframes and save it into compressed files to decompress them later.\n\n```python\nimport pandas as pd\n\ndf = pd.DataFrame({\"a\": [1, 1, 2, 2, 1, 3, 4, 4],\n                   \"b\": [\"A\", \"A\", \"B\", \"B\", \"A\", \"C\", \"D\", \"D\"]})\ncomp_df = lzhw.CompressedDF(df)\n```\n\nLet's check space saved by compression\n```python\ncomp_space = 0\nfor i in range(len(comp_df.compressed)):\n\tcomp_space += comp_df.compressed[i].size()\n\nprint(comp_space, getsizeof(df))\n# 56 712\n\n## Test information loss\nprint(comp_df.compressed[0].decompress() == list(map(str, df.a)))\n# True\n```\n\n#### Saving and Loading Compressed DataFrames\n\nWith lzhw we can save a data frame into a compressed file and then read it again \nusing **save_to_file** method and **decompress_df_from_file** function.\n\n```python\n## Save to file\ncomp_df.save_to_file(\"comp_df.txt\")\n\n## Load the file\noriginal = lzhw.decompress_df_from_file(\"comp_df.txt\")\nprint(original)\n#   a  b\n#0  1  A\n#1  1  A\n#2  2  B\n#3  2  B\n#4  1  A\n#5  3  C\n#6  4  D\n#7  4  D\n```\n\n#### Compressing Bigger DataFrames\n\nLet's try to compress a real-world dataframe **german_credit.xlsx** file.\nOriginal txt file is **219 KB** on desk.\n\n```python\ngc_original = pd.read_excel(\"examples/german_credit.xlsx\")\ncomp_gc = lzhw.CompressedDF(gc_original)\n\n## Compare sizes in Python:\ncomp_space = 0\nfor i in range(len(comp_gc.compressed)):\n\tcomp_space += comp_gc.compressed[i].size()\n\nprint(comp_space, getsizeof(gc_original))\n# 12932 548852\n\nprint(comp_gc.compressed[0].decompress() == list(map(str, gc_original.iloc[:, 0])))\n# True\n```\n\n**Huge space saving, 97%, with no information loss!**\n\nLet's now write the compressed dataframe into a file and compare the sizes of the files.\n\n```python\ncomp_gc.save_to_file(\"gc_compressed.txt\")\n``` \n\nChecking the size of the compressed file, it is **87 KB**. Meaning that in total we saved around **60%**.\nFuture versions will be optimized to save more space.\n\nLet's now check when we reload the file, will we lose any information or not.\n\n```python\n## Load the file\ngc_original2 = lzhw.decompress_df_from_file(\"gc_compressed.txt\")\nprint(list(gc_original2.iloc[:, 13]) == list(map(str, gc_original.iloc[:, 13])))\n# True\n\nprint(gc_original.shape == gc_original2.shape)\n# True\n```\n\nPerfect! There is no information loss at all.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MNoorFawi/lzhw",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lzhw",
    "package_url": "https://pypi.org/project/lzhw/",
    "platform": "",
    "project_url": "https://pypi.org/project/lzhw/",
    "project_urls": {
      "Homepage": "https://github.com/MNoorFawi/lzhw"
    },
    "release_url": "https://pypi.org/project/lzhw/1.0.1/",
    "requires_dist": [
      "pandas"
    ],
    "requires_python": "",
    "summary": "Compression using an optimized algorithm (lzhw) developed from Lempel-Ziv, Huffman and LZ-Welch techniques",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7625775,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddd94b4d4faf1f5c4af5ac4e358e8290c64ca853b1d983009b4392da825fec9f",
        "md5": "33179ad1422289046ebb4fc8eaee9a2e",
        "sha256": "89a10dcd0a2540cddda8e0c9070172c0975c39f21a0a02d4e6b8f4b1dc146212"
      },
      "downloads": -1,
      "filename": "lzhw-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33179ad1422289046ebb4fc8eaee9a2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9496,
      "upload_time": "2020-05-28T17:57:37",
      "upload_time_iso_8601": "2020-05-28T17:57:37.970785Z",
      "url": "https://files.pythonhosted.org/packages/dd/d9/4b4d4faf1f5c4af5ac4e358e8290c64ca853b1d983009b4392da825fec9f/lzhw-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea104da1d986ca90d968056832782020f53ee4571630e2fe49722f4408b9b41e",
        "md5": "208d093c23d9f9ab631a85a4407e553e",
        "sha256": "f24a1b4cc7ff4af5940027d786d401b536c93ffd75abcb8b72c6fad83fba0f79"
      },
      "downloads": -1,
      "filename": "lzhw-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "208d093c23d9f9ab631a85a4407e553e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 173436,
      "upload_time": "2020-05-28T17:57:39",
      "upload_time_iso_8601": "2020-05-28T17:57:39.554782Z",
      "url": "https://files.pythonhosted.org/packages/ea/10/4da1d986ca90d968056832782020f53ee4571630e2fe49722f4408b9b41e/lzhw-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}