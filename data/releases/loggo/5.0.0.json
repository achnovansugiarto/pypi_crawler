{
  "info": {
    "author": "Bitpanda GmbH",
    "author_email": "nosupport@bitpanda.com",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Utilities"
    ],
    "description": "[![Build Status](https://travis-ci.org/bitpanda-labs/loggo.svg?branch=master)](https://travis-ci.org/bitpanda-labs/loggo)\n[![codecov.io](https://codecov.io/gh/bitpanda-labs/loggo/branch/master/graph/badge.svg)](https://codecov.io/gh/bitpanda-labs/loggo)\n[![LoC](https://tokei.rs/b1/github/bitpanda-labs/loggo)](https://github.com/bitpanda-labs/loggo)\n\n# Logging utilities for Python projects\n\n<!--- Don't edit the version line below manually. Let bump2version do it for you. -->\n> Version 5.0.0\n\n\n> This module provides ways of logging the input, output and errors in classes and functions It can be hooked up to graylog, printed to console or saved to a log file. It requires very little configuration.\n\n## Install\n\n```\npip install loggo\n# or\npython setup.py install\n```\n\n## Setup\n\nSetting up the tool as you like requires a small amount of configuration. Put this in the main `__init__.py`, or in a file called `log.py`. so you can import the same, ready-set-up logger easily. Let's call our app `tester`, so you would use `tester/__init__.py`:\n\n```python\nfrom loggo import Loggo\n# All setup values are optional\nsetup = dict(facility='tester',             # name of program logging the message\n             ip='0.0.0.0',                  # ip for graylog\n             port=9999,                     # port for graylog\n             do_print=True,                 # print to console\n             do_write=True,                 # write to file\n             logfile='mylog.txt',           # custom path to logfile\n             line_length=200,               # line truncation for console logging\n             truncation=1000,               # longest possible value in extra data\n             private_data=['password'],     # list of sensitive args/kwargs\n             obscured='[[[PRIVATE_DATA]]]') # string with which to obscure data\nLoggo = Loggo(setup)\n```\n\n## Usage\n\nIn other parts of the project, you should then be able to access the configured logger components with:\n\n```python\nfrom tester import Loggo\n```\n\n### Decorators\n\nYou can use `@Loggo` as a decorator on a class, class method or function. On classes, it will log every method; on methods and functions it will log the call signature, return and errors.\n\nFurthermore, you can use `@Loggo.ignore` to ignore a particular method of a class decorated by `@Loggo`. There is also `@Loggo.errors`, which will only log errors, not calls and returns.\n\nFor an example use, let's make a simple class that multiplies two numbers, but only if a password is supplied. We can ignore logging of the boring authentication system.\n\n```python\n@Loggo\nclass Multiplier(object):\n\n    def __init__(self, base):\n        self.base = base\n        \n    def multiply(self, n, password):\n        \"\"\"\n        Multiply by the number given during initialisation--requires password\n        \"\"\"\n        self.authenticated = self._do_authentication(password)\n        if not self.authenticated:\n            raise ValueError('Not authenticated!')\n        return self.base * n\n\n    @Loggo.ignore\n    def _do_authentication(self, password):\n        \"\"\"Not exactly Fort Knox\"\"\"\n        return password == 'tOpSeCrEt'\n```\n\nFirst, let's use it properly, with our secret password passed in:\n\n```python\nmult = Multiplier(50)\nresult = mult.multiply(50, 'tOpSeCrEt')\nassert result == 2500 # True\n```\n\nWe'll get some nice text in the console:\n\n```\n11.05 2018 17:14:54 *Called Multiplier.multiply(n=50, password='[PRIVATE_DATA]')\n11.05 2018 17:14:54 *Returned from Multiplier.multiply(n=50, password='[PRIVATE_DATA]') with int (2500)\n```\n\nNotice that our private argument `password` was successfully obscured. If you used `do_write=True`, this log will also be in your specified log file, also with password obscured.\n\n```python\nresult = Mult.multiply(7, 'password123')\n```\n\nAn error will raise, a log will be generated and we'll get extra info in the console, including a traceback:\n\n```\n11.05 2018 17:19:43 *Called Multiplier.multiply(n=7, password='[PRIVATE_DATA]')\n11.05 2018 17:19:43 *Errored during Multiplier.multiply(n=7, password='[PRIVATE_DATA]') with ValueError \"Not authenticated!\"    dev -- see below:\nTraceback (most recent call last):\n  File \"/Users/danny/work/loggo/loggo/loggo.py\", line 137, in full_decoration\n    response = function(*args, **kwargs)\n  File \"tester.py\", line 13, in multiply\n    raise ValueError('Not authenticated!')\nValueError: Not authenticated!\n```\n\n### `@Loggo.events`\n\n`@Loggo.events` allows you to pass in messages for particular events:\n\n```python\n@Loggo.events(\n              called='Log string for method call',\n              errored='Log string on exception',\n              returned='Log string for return',\n              error_level=50  # log level for errors\n              )\ndef test():\n    pass\n```\n\n### Logging without decorators\n\nFor logging manually, Loggo provides methods similar to the logging functions of the `logging` standard library: `Loggo.log`, `Loggo.debug`, `Loggo.info`, `Loggo.warning`, `Loggo.error`, `Loggo.critical`. The methods use the configuration that has already been defined. The main method `Loggo.log` takes three parameters:\n\n```python\nlevel = 50\nmsg = 'Message to log'\nextra = dict(some='data', that='will', be='logged')\nLoggo.log(level, msg, extra)\n# console: 11.05 2018 17:36:24 Message to log  50\n# extra_data in log file if `do_print` setting is True\n```\n\nMethods `Loggo.debug`, `Loggo.info`, `Loggo.warning`, `Loggo.error` and `Loggo.critical` are convenience methods for setting the log level. For instance,\n```python\nLoggo.warning('A message', dict(some='data'))\n```\nis equivalent to\n```python\nLoggo.log(logging.WARNING, 'A message', dict(some='data'))\n```\nwhere `logging.WARNING` is an integer constant imported from the standard library.\n\n### Methods\n\nYou can also start and stop logging with `Loggo.start()` and `Loggo.stop()`, at any point in your code, though error logs will still get through. If you want to suppress errors too, you can pass in `allow_errors=False`.\n\n### Context manager\n\nYou can suppress logs using a context manager. Errors are allowed here by default too:\n\n```python\nwith Loggo.pause(allow_errors=False):\n    do_something()\n```\n\n## Tests\n\n```bash\npython -m unittest\n```\n\n## Bumping version\n\nVersion bumps should be done using the `bump2version` utility. Install it with pip:\n\n```bash\npip install bump2version\n```\n\nWhenever you need to bump version, in the project root directory do:\n\n```bash\nbump2version (major | minor | patch)\ngit push <remote> <branch> --follow-tags\n```\n\nIf you don't want to remember to use the `--follow-tags` flag, you can edit your git config:\n\n```bash\ngit config --global push.followTags true\n```\n\nAfter this you can simply push the version bump commit to remote as you would normally, and the tag will also be pushed.\n\n## Limitations\n\n`Loggo` uses Python's standard library (`logging`) to ultimately generate a log. There are some gotchas when using it: for instance, in terms of the extra data that can be passed in, key names for this extra data cannot clash with some internal names used within the `logging` module (`message`, `args`, etc.). To get around this, you'll get a warning that your data contains a bad key name, and it will be changed (i.e. from `message` to `protected_message`).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bitpanda-labs/loggo",
    "keywords": "bitpanda utilities",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loggo",
    "package_url": "https://pypi.org/project/loggo/",
    "platform": "",
    "project_url": "https://pypi.org/project/loggo/",
    "project_urls": {
      "Homepage": "https://github.com/bitpanda-labs/loggo"
    },
    "release_url": "https://pypi.org/project/loggo/5.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python logging tools",
    "version": "5.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13575769,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca17a13272f3e4672d66b3db42906f62fe46fe4b3ebad3cc0d56839aa4ec0ed2",
        "md5": "c8615a872d07663fd084ce29077139f7",
        "sha256": "caccd4cb7d3b9e658633096e389d8bd2b9fd2af0c9b878741bb0f1753cd60448"
      },
      "downloads": -1,
      "filename": "loggo-5.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8615a872d07663fd084ce29077139f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17430,
      "upload_time": "2019-05-29T12:25:47",
      "upload_time_iso_8601": "2019-05-29T12:25:47.581717Z",
      "url": "https://files.pythonhosted.org/packages/ca/17/a13272f3e4672d66b3db42906f62fe46fe4b3ebad3cc0d56839aa4ec0ed2/loggo-5.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}