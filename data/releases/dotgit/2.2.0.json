{
  "info": {
    "author": "Kobus van Schoor",
    "author_email": "v.schoor.kobus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# dotgit\n\n![tests](https://github.com/kobus-v-schoor/dotgit/workflows/tests/badge.svg)\n[![coverage](https://coveralls.io/repos/github/kobus-v-schoor/dotgit/badge.svg)](https://coveralls.io/github/kobus-v-schoor/dotgit)\n![publish-pypi](https://github.com/kobus-v-schoor/dotgit/workflows/publish-pypi/badge.svg)\n[![downloads](https://img.shields.io/pypi/dm/dotgit)](https://pypi.org/project/dotgit/)\n\n## A comprehensive and versatile dotfiles manager\n\ndotgit will allows you to easily store all your dotfiles for any number of\nmachines in a single git repository. Written in python with no external\ndependencies besides git, it works on both Linux and MacOS (should also work on\nother \\*nix environments)\n\n## Table of Contents\n\n* [Project goals](#project-goals)\n* [Why use dotgit?](#why-use-dotgit)\n* [Usage example](#usage-example)\n* [Installation](#installation)\n* [Getting started](#getting-started)\n* [Example workflow](#example-workflow)\n* [Future goals](#future-goals)\n* [Migrating from v1.x](#migrating-from-v1x)\n\n## Project goals\n\n* Share files between machines or keep separate versions, all in the same repo\n* Make use of an intuitive filelist\n* Grouping of files to make organization easy\n* Make git source-control convenient and easy to use\n\n## Why use dotgit?\n\n* You can very easily organize and categorize your dotfiles, making it easy to\n  store different setups in the same repo (e.g. your workstation and your\n  headless server dotfiles, both in the same repo)\n* dotgit was designed with its most important goal being to make managing\n  multiple machine's dotfiles easy, by allowing to easily share and separate\n  dotfiles between machines\n* Ease-of-use is baked into everything without hindering more advanced users.\n  For instance, dotgit can automatically commit and push commits for you should\n  you want it to, but you can just as easily make the commits yourself\n* dotgit has an automated test suite that tests its functionality with several\n  versions of Python on Linux and MacOS to ensure cross-platform compatibility\n* Support for both symlinking or copying dotfiles to your home directory.\n  Copying allows you to quickly bootstrap a machine without leaving your repo\n  or dotgit on it\n* No external dependencies apart from git allowing you to install and use\n  dotgit easily in any environment that supports Python\n* Encryption using GnuPG supported to allow you to store sensitive dotfiles\n\n## Usage example\n\nAn example filelist might look something like this:\n\n\n```\n# grouping makes organization a breeze\nlaptop=tools,x,ssh\ndesktop=tools,x\n\n# sharing/splitting of dotfiles between hosts\n.vimrc:tools\n.vimrc:pi\n\n.xinitrc:x\n\n# encryption support using GnuPG\n.ssh/id_rsa:ssh|encrypt\n.ssh/id_rsa.pub:ssh|encrypt\n\n.bashrc\n\n# easily group dotfiles for other hosts into your dotgit repo\n.foo:server\n```\n\nFirstly, there will be two .vimrc files. The first one will be shared between\nthe hosts `desktop` and `laptop`. There will also be a separate `.vimrc` inside\nthe dotgit repository that will only be used with the `pi` host.\n\nThe second thing to notice is that you can use categories to group dotfiles. In\nthe example there is a `tools` and `x` category. This makes working with a\ngroup of dotfiles a breeze.\n\nIn this example the host `laptop`'s ssh public and private key will also be\nstored in the dotgit repo, but it will be safely encrypted using GnuPG\nsymmetrical encryption.\n\nSince no host was specified with `.bashrc` it will reside inside the `common`\ncategory. This means that it will be shared among all hosts using this dotgit\nrepository (unless a category is specifically used along with the dotgit\ncommands).\n\nLastly the `.foo` will only be used when you explicitly use the category\n`server`. This way you can for instance keep your \"server\" dotfiles in your\nmain dotfiles repo without cluttering your normal dotgit workflow.\n\nYou can also have a look at my personal dotfiles which I manage with dotgit\n[here](https://github.com/kobus-v-schoor/dotfiles).\n\n## Installation\n\nArch Linux users can install the\n[AUR package](https://aur.archlinux.org/packages/dotgit).\n\nIf you are not on Arch, the easiest way to install dotgit is using pip\n(substitute `pip` with `pip3` if you're on a Debian-like system):\n\n```\npip install dotgit\n```\n\nYou can also get bash-completion to work by installing dotgit's bash-completion\nin your home folder:\n\n```\ncurl https://raw.githubusercontent.com/kobus-v-schoor/dotgit/master/pkg/completion/bash.sh >> ~/.bash_completion\n```\n\n## Getting started\n\n1. Choose a folder where you want to store your dotfiles, `~/.dotfiles` is a\n   good place to start\n2. Create your dotfiles folder and `cd` to it `mkdir -p ~/.dotfiles; cd\n   ~/.dotfiles`\n3. Initialize your dotgit repo with `dotgit init`. You can also skip the first\n   two steps and clone an empty repo that you created somewhere e.g. on Github\n   and run the init step inside the cloned repo.\n4. Add your first dotfile `echo .bashrc >> filelist`\n5. Update your dotgit repo (you need to do this whenever you change the\n   filelist) with `dotgit update -v`. Once you do this your dotfile has been\n   moved from your home directory to your dotfiles repo, and a symlink was\n   created in your home directory in place of the original file pointing to the\n   file inside your dotfiles repo.\n6. Commit your changes to your dotgit repo by running `dotgit commit`\n\nThat's it! When you want to push your changes to your git remote you just do a\n`git push` as usual (dotgit will also offer to do this for you).\n\nIf you change your dotfiles (e.g. you edit your `.bashrc` file) you don't need\nto run an update operation again. You just cd into your dotfiles directory and\nrun `dotgit commit`. dotgit will generate a commit for you with a fitting\ndescription and will offer to push your changes to your remote (should you have\none).\n\nTo restore your dotfiles on another machine, just clone your repo, install\ndotgit and run `dotgit restore` inside your repo.\n\nIt is strongly recommended to look through dotgit's help by running `dotgit\n--help`. This will show you good ways to use dotgit and explain dotgit's options\nin detail.\n\n## Example workflow\n\nA typical workflow might look something like the following. In this example we\nwill set up two machines to use dotgit. The first will be named \"laptop\" and\nthe second \"desktop\". We want to share a \".vimrc\" file between the two but have\nseparate \".xinitrc\" files.\n\nFirst we start on the laptop. On it we have the \".vimrc\" file that we want to\nshare as well as the \".xinitrc\" file for the laptop. We create a new dotgit\nrepo (cloning an empty repo or just making an empty dir) and init the repo by\nrunning the following inside the repo dir:\n\n```\n[laptop]$ dotgit init\n```\n\nThis command creates an empty filelist and also makes the first commit inside\nthe repo. Next, we set up our filelist. We will set up the complete filelist\nnow, since the \".xinitrc\" file for the desktop won't be affected while we work\non the laptop (since it is in a separate category). We edit the filelist to\nlook as follows:\n\n```\n# dotgit filelist\n.vimrc:laptop,desktop\n.xinitrc:laptop\n.xinitrc:desktop\n```\n\nOur filelist is now ready. To update the dotgit repo to match it we run the\nupdate command inside the dotgit repo:\n\n```\n[laptop]$ dotgit update -v\n```\n\nOur repository now contains the newly-copied \".vimrc\" file as well as the\n\".xinitrc\" file for the laptop. To see these changes, we can run the diff\ncommand:\n\n```\n[laptop]$ dotgit diff\n```\n\nWe are now done on the laptop, so we commit our changes to the repo and push it\nto the remote (something like GitHub):\n\n```\n[laptop]$ dotgit commit\n```\n\nNext, on the desktop we clone the repo to where we want to save it.  Assuming\nthat dotgit is already installed on the desktop we cd into the dotfiles repo.\nWe first want to replace the \".vimrc\" on the desktop with the one stored in the\nrepo, so we run the restore command inside the repo:\n\n```\n[desktop]$ dotgit restore -v\n```\n\nNote that dotgit always replaces the file in the repo if the same file exists\nin your home folder and you run the \"update\" command. To prevent this from\nhappening, run the restore command first in in the previous step.\n\nWe now want to store the \".xinitrc\" file from the desktop in our dotgit repo,\nso again we run the update operation.\n\n```\n[desktop]$ dotgit update -v\n```\n\nAgain we save the changes to the dotfiles repo by committing it and pushing it\nto the remote:\n\n```\n[desktop]$ dotgit commit\n```\n\nNow we're done! To pull in the changes made from the desktop to the laptop, run\n\"git pull\" on the laptop. You might also need to run a \"dotgit restore\" on the\nlaptop if you added new files to the filelist on the desktop.\n\n## Future goals\n\ndotgit was written with a plugin architecture which allows easily extending it\nwith more functionality. The following plugins are on the wishlist for future\nreleases (more suggestions welcome):\n\n* [x] Encryption using GnuPG\n* [ ] Templating\n\n## Migrating from v1.x\n\nAfter many years dotgit was finally completely rewritten in python. The first\nversion was written in pure bash, and while this was appealing at first it\nquickly became a nightmare from a maintenance point-of-view. The new python\nrewrite comes with many advantages including:\n\n* Much better cross-platform compatibility, especially for MacOS. Using\n  utilities like `find` became problematic between different environments\n* A fully automated test suite to test dotgit on both Linux and MacOS\n* Code that the author can understand after not seeing it for a week\n* Unified install method (pip) for all the platforms\n\nAfter much consideration it was decided to rather to not re-implement the\ndirectory support, which is the only major change functionality wise from the\nfirst version. It requires a lot of special treatment that breaks some of the\nlogic that works very well for single files which lead to weird bugs and\nbehaviour in the first version. Excluding it made the file-handling logic much\nmore robust and the behaviour surrounding the handling of files is much more\npredictable.\n\nShould you decide you'd like to stick to the old version of dotgit, you are\nwelcome to do so. Installing the pip package will also make the original dotgit\navailable as the command \"dotgit.sh\" (AUR package as well). Please note that I\nwill not be able to support the old version anymore, and as such you're on your\nown if you decide to use the old version.\n\nTo make room for future improvements, the layout of the dotgit dotfiles repos\nhad to change. Unfortunately this means that the new repos are not directly\ncompatible with the old ones, although it is easy to migrate to the new\nversion's format. To do so, do the following:\n\n1. Firstly, backup your current dotfiles repo in case something goes wrong\n2. Next, do a hard restore using the old dotgit so that it copies all your\n   files from your repo to your home folder using `dotgit.sh hard-restore`\n3. Now, delete your old dotgit files inside your repo as well as your\n   cryptlist (which signals to dotgit that you are using the old version) using\n   `rm -rf dotfiles dmz cryptlist passwd`. Encrypted files are now specified\n   using the new plugin syntax (check the usage example earlier in the readme),\n   so add them to your original filelist using the new syntax.\n4. With the new version of dotgit, first run `dotgit init -v` and then run\n   `dotgit update -v`. This will store the files from your home folder back in\n   your repo in their new locations. If you have encrypted files this will also\n   ask for your new encryption password\n5. Commit the changes to your repo using either git or `dotgit commit`\n6. Familiarize yourself with the new dotgit syntax which has changed slightly\n   to better follow conventions commonly found on the command-line by reading\n   through the help using `dotgit -h`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kobus-v-schoor/dotgit",
    "keywords": "",
    "license": "GNU General Public License v2 (GPLv2)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dotgit",
    "package_url": "https://pypi.org/project/dotgit/",
    "platform": "",
    "project_url": "https://pypi.org/project/dotgit/",
    "project_urls": {
      "Homepage": "https://github.com/kobus-v-schoor/dotgit"
    },
    "release_url": "https://pypi.org/project/dotgit/2.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A comprehensive solution to managing your dotfiles",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9682857,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ac163964a735d182b6b306841a79600c9df4ef847da7866efc35ecb1cd4c807",
        "md5": "6e2a02ec0ac2d86075460e7e138f2419",
        "sha256": "af4bda2d17c4223db6629abb3a5c0fd8d2197da6b1544fd68af41a0d11c7d143"
      },
      "downloads": -1,
      "filename": "dotgit-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e2a02ec0ac2d86075460e7e138f2419",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 38316,
      "upload_time": "2020-09-07T20:40:54",
      "upload_time_iso_8601": "2020-09-07T20:40:54.098749Z",
      "url": "https://files.pythonhosted.org/packages/5a/c1/63964a735d182b6b306841a79600c9df4ef847da7866efc35ecb1cd4c807/dotgit-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "afcecbdd1d1fd77d18061081ae469e5d8a88dbf41585d23bca8f042825716b34",
        "md5": "8cd1e8213d90dde4e8a447d55a84d5f7",
        "sha256": "0068a3cf9e682c7ce2c763c970f3efd2492ccab99e5b5fbfc6231b9fae8214bb"
      },
      "downloads": -1,
      "filename": "dotgit-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8cd1e8213d90dde4e8a447d55a84d5f7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33623,
      "upload_time": "2020-09-07T20:40:54",
      "upload_time_iso_8601": "2020-09-07T20:40:54.939845Z",
      "url": "https://files.pythonhosted.org/packages/af/ce/cbdd1d1fd77d18061081ae469e5d8a88dbf41585d23bca8f042825716b34/dotgit-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}