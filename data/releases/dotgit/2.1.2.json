{
  "info": {
    "author": "Kobus van Schoor",
    "author_email": "v.schoor.kobus@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# dotgit\n\n![tests](https://github.com/kobus-v-schoor/dotgit/workflows/tests/badge.svg)\n[![coverage](https://coveralls.io/repos/github/kobus-v-schoor/dotgit/badge.svg)](https://coveralls.io/github/kobus-v-schoor/dotgit)\n![publish-pypi](https://github.com/kobus-v-schoor/dotgit/workflows/publish-pypi/badge.svg)\n[![downloads](https://img.shields.io/pypi/dm/dotgit)](https://pypi.org/project/dotgit/)\n\n## A comprehensive and versatile dotfiles manager\n\ndotgit will allows you to easily store all your dotfiles for any number of\nmachines in a single git repository. Written in python with no external\ndependencies besides git, it works on both Linux and MacOS (should also work on\nother \\*nix environments)\n\n## Project goals\n\n* Share files between machines or keep separate versions, all in the same repo\n* Make use of an intuitive filelist\n* Grouping of files to make organization easy\n* Make git source-control convenient and easy to use\n\n## Why use dotgit?\n\n* You can very easily organize and categorize your dotfiles, making it easy to\n  store different setups in the same repo (e.g. your workstation and your\n  headless server dotfiles, both in the same repo)\n* dotgit was designed with its most important goal being to make managing\n  multiple machine's dotfiles easy, by allowing to easily share and separate\n  dotfiles between machines\n* Ease-of-use is baked into everything without hindering more advanced users.\n  For instance, dotgit can automatically commit and push commits for you should\n  you want it to, but you can just as easily make the commits yourself\n* dotgit has an automated test suite that tests its functionality with several\n  versions of Python on Linux and MacOS to ensure cross-platform compatibility\n* Support for both symlinking or copying dotfiles to your home directory.\n  Copying allows you to quickly bootstrap a machine without leaving your repo\n  or dotgit on it\n* No external dependencies apart from git allowing you to install and use\n  dotgit easily in any environment that supports Python\n\n## Usage example\n\nAn example filelist might look something like this:\n\n\n```\nlaptop=tools,x\ndesktop=tools,x\n\n.vimrc:tools\n.vimrc:pi\n\n.xinitrc:x\n\n.bashrc\n\n.foo:server\n```\n\nFirstly, there will be two .vimrc files. The first one will be shared between\nthe hosts `desktop` and `laptop`. There will also be a separate `.vimrc` inside\nthe dotgit repository that will only be used with the `pi` host.\n\nThe second thing to notice is that you can use categories to group dotfiles. In\nthe example there is a `tools` and `x` category. This makes working with a\ngroup of dotfiles a breeze.\n\nSince no host was specified with `.bashrc` it will reside inside the `common`\ncategory. This means that it will be shared among all hosts using this dotgit\nrepository (unless a category is specifically used along with the dotgit\ncommands).\n\nLastly the `.foo` will only be used when you explicitly use the category\n`server`. This way you can for instance keep your \"server\" dotfiles in your\nmain dotfiles repo without cluttering your normal dotgit workflow.\n\nYou can also have a look at my personal dotfiles which I manage with dotgit\n[here](https://github.com/kobus-v-schoor/dotfiles).\n\n## Installation\n\nArch Linux users can install the\n[AUR package](https://aur.archlinux.org/packages/dotgit).\n\nIf you are not on Arch, the easiest way to install dotgit is using pip\n(substitute `pip` with `pip3` if you're on a Debian-like system):\n\n```\npip install dotgit\n```\n\nYou can also get bash-completion to work by installing dotgit's bash-completion\nin your home folder:\n\n```\ncurl https://raw.githubusercontent.com/kobus-v-schoor/dotgit/master/pkg/completion/bash.sh >> ~/.bash_completion\n```\n\n## Getting started\n\n1. Choose a folder where you want to store your dotfiles, `~/.dotfiles` is a\n   good place to start\n2. Create your dotfiles folder and `cd` to it `mkdir -p ~/.dotfiles; cd\n   ~/.dotfiles`\n3. Initialize your dotgit repo with `dotgit init`. You can also skip the first\n   two steps and clone an empty repo that you created somewhere e.g. on Github\n   and run the init step inside the cloned repo.\n4. Add your first dotfile `echo .bashrc >> filelist`\n5. Update your dotgit repo (you need to do this whenever you change the\n   filelist) with `dotgit update -v`. Once you do this your dotfile has been\n   moved from your home directory to your dotfiles repo, and a symlink was\n   created in your home directory in place of the original file pointing to the\n   file inside your dotfiles repo.\n6. Commit your changes to your dotgit repo by running `dotgit commit`\n\nThat's it! When you want to push your changes to your git remote you just do a\n`git push` as usual (dotgit will also offer to do this for you).\n\nIf you change your dotfiles (e.g. you edit your `.bashrc` file) you don't need\nto run an update operation again. You just cd into your dotfiles directory and\nrun `dotgit commit`. dotgit will generate a commit for you with a fitting\ndescription and will offer to push your changes to your remote (should you have\none).\n\nTo restore your dotfiles on another machine, just clone your repo, install\ndotgit and run `dotgit restore` inside your repo.\n\nIt is strongly recommended to look through dotgit's help by running `dotgit\n--help`. This will show you good ways to use dotgit and explain dotgit's options\nin detail.\n\n## Future goals\n\ndotgit was written with a plugin architecture. It currently only has one plugin,\nnamely the \"plain\" plugin, which just does symlinking. The following plugins are\nplanned for future releases:\n\n* Encryption using GnuPG\n* Templating\n\n## Migrating from v1.x\n\nAfter many years dotgit was finally completely rewritten in python. The first\nversion was written in pure bash, and while this was appealing at first it\nquickly became a nightmare from a maintenance point-of-view. The new python\nrewrite comes with many advantages including:\n\n* Much better cross-platform compatibility, especially for MacOS. Using\n  utilities like `find` became problematic between different environments\n* A fully automated test suite to test dotgit on both Linux and MacOS\n* Code that the author can understand after not seeing it for a week\n* Unified install method (pip) for all the platforms\n\nCurrently, two features are missing from the python rewrite:\n\n* Encryption support: this will be added in a future release\n* Directory support: after much consideration it was decided to rather to not\n  re-implement this. It requires a lot of special treatment that breaks some of\n  the logic that works very well for single files. Excluding it made the\n  file-handling logic much more robust\n\nShould you decide you'd like to stick to the old version of dotgit, you are\nwelcome to do so. Installing the pip package will also make the original dotgit\navailable as the command \"dotgit.sh\" (AUR package as well). Please note that I\nwill not be able to support the old version anymore, and as such you're on your\nown if you decide to use the old version.\n\nTo make room for future improvements, the layout of the dotgit dotfiles repos\nhad to change. Unfortunately this means that the new repos are not directly\ncompatible with the old ones, although it is easy to migrate to the new\nversion's format. To do so, do the following:\n\n- Firstly, backup your current dotfiles repo in case something goes wrong\n- Next, inside your dotfiles repo, move the dotfiles folder to its new location\n  by running `mv dotfiles tmp; mkdir dotfiles; mv tmp dotfiles/plain`.\n- You can leave your filelist as-is, the filelist syntax hasn't changed. You\n  will need to delete your \"cryptlist\" file as this signals to dotgit that this\n  is an old repo. Once the new version supports encryption it will not make use\n  of a separate \"cryptlist\" file anyway, so there is no reason to keep it. Note\n  that the encrypted files in your repo will be deleted once you run the new\n  dotgit since it won't be able to find them in the filelist.\n- With the new version of dotgit, run `dotgit update -v`. This will update the\n  repo if necessary and will also fix the symlinks in your home folder.\n- Commit the changes to your repo using either git or `dotgit commit`\n- Familiarize yourself with the new dotgit syntax which has changed slightly to\n  better follow conventions commonly found on the command-line by reading\n  through the help using `dotgit -h`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kobus-v-schoor/dotgit",
    "keywords": "",
    "license": "GNU General Public License v2 (GPLv2)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dotgit",
    "package_url": "https://pypi.org/project/dotgit/",
    "platform": "",
    "project_url": "https://pypi.org/project/dotgit/",
    "project_urls": {
      "Homepage": "https://github.com/kobus-v-schoor/dotgit"
    },
    "release_url": "https://pypi.org/project/dotgit/2.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A comprehensive solution to managing your dotfiles",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9682857,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b1bb34eba85f33b280405700580c321fd52b8be893e45441af945b430d209a9",
        "md5": "15ead08245c9daaf322b79acdce1ee79",
        "sha256": "d4f541644a15dc4d39b79e95d717ffbace90e2647a9b3dfabef686e228697b08"
      },
      "downloads": -1,
      "filename": "dotgit-2.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15ead08245c9daaf322b79acdce1ee79",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 32882,
      "upload_time": "2020-09-04T16:47:02",
      "upload_time_iso_8601": "2020-09-04T16:47:02.925983Z",
      "url": "https://files.pythonhosted.org/packages/5b/1b/b34eba85f33b280405700580c321fd52b8be893e45441af945b430d209a9/dotgit-2.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1c8b851134ba807a7859e6aa907d05368e9cf061ec0102c392b0693bf9053c0",
        "md5": "9b9f637ae59901f2b7030d42d8839235",
        "sha256": "57fd88d73c67a1f8d64fb671d34c6babb04eedc1b2fc094949f783d83553b318"
      },
      "downloads": -1,
      "filename": "dotgit-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9b9f637ae59901f2b7030d42d8839235",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27393,
      "upload_time": "2020-09-04T16:47:03",
      "upload_time_iso_8601": "2020-09-04T16:47:03.874784Z",
      "url": "https://files.pythonhosted.org/packages/b1/c8/b851134ba807a7859e6aa907d05368e9cf061ec0102c392b0693bf9053c0/dotgit-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}