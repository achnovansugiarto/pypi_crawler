{
  "info": {
    "author": "Axiros GmbH",
    "author_email": "gk@axiros.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "Terminal Markdown Viewer\n========================\n\n| |Build Status|\n| |PyPI version|\n\n| When you edit multiple md files remotely, like in a larger\n| `mkdocs <http://www.mkdocs.org/>`__ project, context switches between\n  editing\n| terminal(s) and viewing browser may have some efficiency impact.\n| Also sometimes there is just no browser, like via security gateways\n  offering\n| just a fixed set of applications on the hop in machine.\n| Further, reading efficiency and convenience is often significantly\n  improved\n| by using colors.\n| And lastly, using such a thing for cli applications might improve user\n  output,\n| e.g. for help texts.\n\n| This is where mdv, a Python based Markdown viewer for the terminal\n  might be\n| a good option.\n\n.. raw:: html\n\n   <!-- toc -->\n\n-  `Terminal Markdown Viewer <#terminal-markdown-viewer>`__\n\n   -  `Features <#features>`__\n   -  `Alternatives <#alternatives>`__\n   -  `Installation <#installation>`__\n\n      -  `Requirements <#requirements>`__\n\n         -  `2.7 ?! <#py27>`__\n\n      -  `Setup <#setup>`__\n\n   -  `Usage <#usage>`__\n\n      -  `CLI <#cli>`__\n      -  `Inline <#inline>`__\n      -  `Sample Inline Use Case: click module\n         docu <#sample-inline-use-case-click-module-docu>`__\n\n   -  `Customization <#customization>`__\n   -  `Screenshots <#screenshots>`__\n   -  `TODO <#todo>`__\n   -  `Credits <#credits>`__\n   -  `Updates <#updates>`__\n\n      -  `July 2016: <#july-2016>`__\n      -  `Lastly <#lastly>`__\n\n.. raw:: html\n\n   <!-- tocstop -->\n\nMarkdown is \"simple\" enough to be well displayed on modern (256 color)\nterminals (except images that is).\n\nfrom\n\n::\n\n    ### Source\n    # Header 1\n    ## Header 2\n    ### Header 3\n    #### Header 4\n    ##### Header 5\n    ###### Header 6\n    ```python\n    \"\"\" Test \"\"\"\n    # Make Py2 >>> Py3:\n    import os, sys; reload(sys); sys.setdefaultencoding('utf-8')\n    # no? see http://stackoverflow.com/a/29832646/4583360 ...\n\n    # code analysis for hilite:\n    try:\n        from pygments import lex, token\n        from pygments.lexers import get_lexer_by_name, guess_lexer\n    ```\n\n    | Tables | Fmt |\n    | -- | -- |\n    | !!! hint: wrapped | 0.1 **strong** |\n\n    !!! note: title\n        this is a Note\n\nYou can also use mdv as a **source code** viewer, best when you have\ndocstrings with markdown in your code:\n\n|image2|\n\nfrom\n\n.. code:: python\n\n    ~/terminal_markdown_viewer $ cat setup.py\n    #!/usr/bin/env python2.7\n    # coding: utf-8\n\n    \"\"\"_\n    # Mdv installation\n\n    ## Usage\n\n        [sudo] ./setup.py install\n\n    ----\n    \"\"\"\n\n    from setuptools import setup, find_packages\n\n    import mdv\n\n    setup(\n        name='mdv',\n        version=mdv.__version__,\n\n(the '\\_' after the docstring telling mdv that markdown follows)\n\n--------------\n\n    | mdv is a proof of concept hack: While for simple structures it\n      does its job quite well, for complex markdown you want to use\n      other tools.\n    | Especially for inlined html it simply fails.\n\n--------------\n\nFeatures\n--------\n\n-  Tons of theme combinations: mdv ships with > 200 luminocity sorted\n   themes, converted from html themes tables to ansi. Those can be\n   combined for code vs regular markdown output...\n-  Admonitions\n-  Tables, incl. wide table handling avoiding \"interleaving\"\n-  Somewhat hackable, all in `one <mdv/markdownviewer.py>`__ module\n-  Useable as lib as well\n-  File change monitor\n-  Text wrapping\n-  Source code highlighter\n-  Little directory change monitor (cames handy when working on multiple\n   files, to get the current one always displayed)\n\n   -  which can run arbitrary commands on file changes\n   -  which passes filepath, raw and prettyfied content to the other\n      command\n      Note: Poor man's implementation, polling. Check inotify based\n      tools if you want sth better.\n\nAlternatives\n------------\n\nThe ones I know of (and which made me write mdv ;-) ):\n\n#. There are quite a few from the js community (e.g.\n   `msee <https://www.npmjs.com/package/msee>`__, ansidown, ansimd and\n   also nd which is great) but they require nodejs & npm, which I don't\n   have on my servers. Also I personally wanted table handling and\n   admonition support throughout and prob. too old to hack other\n   peoples' js (struggling enough with my own). But have a look at them,\n   they do some things better than mdv in this early version (I try to\n   learn from them). Also\n   `this <https://github.com/substack/picture-tube>`__ would be worth a\n   look ;-)\n#. pandoc -> html -> elinks, lynx or pandoc -> groff -> man. (Heavy and\n   hard to use from within other programs. Styling suboptimal)\n#. vimcat (Also heavy and hard to use inline in other programs)\n\nSummary: For production ready robust markdown viewing (e.g. for your\ncustomers) I recommend nd still, due to the early state of mdv. For\nplaying around, especially with theming or when with Python, this one\nmight be a valid alternative to look at.\n\nInstallation\n------------\n\n::\n\n    pip install mdv\n\n| (2.7 version of pip)\n| If you get ``no attribute HTML_PLACEHOLDER``: update your markdown\n  package.\n\nPy2.7?!\n^^^^^^^\n\n| Except for some print brackets there is no reason it would not run in\n  3 and I'd\n| pull if anybody sent me a version for 2 and 3. I myself won't do it\n  though, will\n| never work in a language w/o bytestrings and the most important type\n  based on\n| `funny enumerated <http://utf8everywhere.org/#characters>`__ symbols.\n\n| Update: With 1.4 it now basically runs in Python3 in the sense of no\n  compile\n| time errors - but the rendering result still is not really usable.\n  Maybe\n| somebody is inclinded to fix that, I'm on Py2 still.\n\nChanged the shebang to ``/usr/bin/env python`` though.\n\nManual Install: Requirements\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  python2.7\n-  py markdown (pip install markdown)\n-  py pygments (pip install pygments)\n-  py yaml (pip install pyyaml)\n-  py docopt (pip install docopt)\n\nFurther a 256 color terminal (for now best with dark background) and\nfont support for a few special separator characters (which you could\nchange via config).\n\n    For light terms you'd just need to revert the 5 colors from the\n    themes, since they are sorted by luminocity.\n\nI did not test anything on windows.\n\nManual Install: Setup\n~~~~~~~~~~~~~~~~~~~~~\n\nDistribution via setuptools. If setuptools is not installed, run:\n\n::\n\n    pip install setuptools\n\nUse the setup.py provided inside, I.e. run:\n\n::\n\n    sudo ./setup.py install\n    (or ./setup.py install --user to install only for the current user)\n\nUsage\n-----\n\nCLI\n~~~\n\n.. code:: markdown\n\n    # Usage:\n\n        mdv [-t THEME] [-T C_THEME] [-i] [-x] [-X Lexer] [-l] [-L] [-c COLS] [-f FROM] [-m] [-C MODE] [-M DIR] [-H] [-A] [MDFILE]\n\n    # Options:\n\n        MDFILE    : Path to markdown file\n        -t THEME  : Key within the color ansi_table.json. 'random' accepted.\n        -T C_THEME: Theme for code highlight. If not set: Using THEME.\n        -l        : Light background (not yet supported)\n        -L        : Display links\n        -x        : Do not try guess code lexer (guessing is a bit slow)\n        -X Lexer  : Default lexer name (default: python)\n        -f FROM   : Display FROM given substring of the file.\n        -m        : Monitor file for changes and redisplay FROM given substring\n        -M DIR    : Monitor directory for markdown file changes\n        -c COLS   : Fix columns to this (default: your terminal width)\n        -C MODE   : Sourcecode highlighting mode.\n        -A        : Strip all ansi (no colors then)\n        -i        : Show theme infos with output\n        -H        : Print html version\n\n    # Notes:\n\n    We use stty tool to derive terminal size. If you pipe into mdv we use 80 cols.\n\n    ## To use mdv.py as lib:\n\n    Call the main function with markdown string at hand to get a\n    formatted one back. Sorry then for no Py3 support, accepting PRs if they don't screw Py2.\n\n    ## FROM:\n\n    FROM may contain max lines to display, seperated by colon.\n    Example:\n\n        -f 'Some Head:10' -> displays 10 lines after 'Some Head'\n\n    If the substring is not found we set it to the *first* character of the file -\n    resulting in output from the top (if your terminal height can be derived correctly through the stty cmd).\n\n    ## Code Highlighting\n\n    Set -C <all|code|doc|mod> for source code highlighting of source code files.\n    Mark inline markdown with a '_' following the docstring beginnings.\n\n    - all: Show markdown docstrings AND code (default if you say, e.g. `-C.`)\n    - code: Only Code\n    - doc: Only docstrings with markdown\n    - mod: Only the module level docstring\n\n\n    ## File Monitor:\n\n    If FROM is not found we display the whole file.\n\n    ## Directory Monitor:\n\n    We check only text file changes, monitoring their size.\n\n    By default .md, .mdown, .markdown files are checked but you can change like `-M 'mydir:py,c,md,'` where the last empty substrings makes mdv also monitor any file w/o extension (like 'README').\n\n    ### Running actions on changes:\n\n    If you append to `-M` a `'::<cmd>'` we run the command on any change detected (sync, in foreground).\n\n    The command can contain placeholders:\n\n        _fp_     # Will be replaced with filepath\n        _raw_    # Will be replaced with the base64 encoded raw content\n                   of the file\n        _pretty_ # Will be replaced with the base64 encoded prettyfied output\n\n    Like: mdv -M './mydocs:py,md::open \"_fp_\"'  which calls the open\n    command with argument the path to the changed file.\n\n\n    ## Themes\n\n    ### Theme Rollers\n\n\n        mdv -T all [file]:  All available code styles on the given file.\n        mdv -t all [file]:  All available md   styles on the given file.\n                            If file is not given we use a short sample file.\n\n    So to see all code hilite variations with a given theme:\n\n    Say C_THEME = all and fix THEME\n\n    Setting both to all will probably spin your beach ball...\n\n    ### Environ Vars\n\n    `$MDV_THEME` and `$MDV_CODE_THEME` are understood, e.g. `export\n    MDV_THEME=729.8953` in your .bashrc will give you a consistent color scheme.\n\n    Regarding the strange theme ids: Those numbers are the calculated\n    total luminocity of the 5 theme colors.\n\nInline\n~~~~~~\n\nmdv is designed to be used well from other (Py2) programs when they have\nmd at hand which should be displayed to the user:\n\n.. code:: python\n\n    import mdv\n\n    # config like this:\n    mdv.term_columns = 60\n\n    # calling like this (all CLI options supported, check def main\n    formatted = mdv.main(my_raw_markdown, c_theme=...)  \n\n    Note that I set the defaultencoding to utf-8 in ``__main__``. I have\n    this as my default python2 setup and did not test inline usage w/o.\n    Check `this <http://stackoverflow.com/a/29832646/4583360>`__ for\n    risks.\n\nSample Inline Use Case: click module docu\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| `Armin\n  Ronacher <http://lucumr.pocoo.org/2014/5/12/everything-about-unicode/>`__'s\n| `click <http://click.pocoo.org>`__ is a great framework for writing\n  larger CLI apps - but its help texts are a bit boring, intended to be\n  customized.\n\nHere is how:\n\nWrite a normal click module with a function but w/o a doc string as\nshown:\n\n.. code:: python\n\n    @pass_context                                                                   \n    def cli(ctx, action, name, host, port, user, msg):           \n        \"\"\" docu from module __doc__ \"\"\"\n\nOn module level you provide markdown for it, like:\n\n.. code:: shell\n\n    ~/axc/plugins/zodb_sub $ cat zodb.py | head\n    \"\"\"\n    # Fetch and push ZODB trees\n\n    ## ACTION: < info | pull | push | merge | dump | serve>\n\n    - info:  Requests server availability information\n    (...)\n\nwhich you set at click module import time:\n\n::\n\n    mod.cli.help = mod.__doc__\n\nLastly do this in your app module:\n\n.. code:: python\n\n    from click.formatting import HelpFormatter\n    def write_text(self, text):\n        \"\"\" since for markdown pretty out on cli I found no good tool\n        so I built my own \"\"\"\n        # poor man's md detection:\n        if not text.strip().startswith('#'):\n            return orig_write_text(self, text)\n        from axc.markdown.mdv import main as mdv\n        self.buffer.append(mdv(md=text, theme=os.environ['AXC_THEME']))\n\n    HelpFormatter.orig_write_text = HelpFormatter.write_text\n    HelpFormatter.write_text = write_text\n\nThe output has then colors:\n\n|image3|\n\nand at smaller terms rewraps nicely:\n\n|image4|\n\nFurther, having markdown in the module ``__doc__`` makes it simple to\nadd into a global project docu framework, like mkdocs.\n\nCustomization\n-------------\n\nYou can supply all CLI args in ``$HOME/.mdv``, in yaml format.\n\n| More flex you have via ``$HOME/.mdv.py``, which is execed if present,\n  when\n| running ``main``.\n\nAlternatively, in `mdv.py <mdv.py>`__ you can change some config\nstraight forward.\n\n.. code:: python\n\n    # ---------------------------------------------------------------------- Config\n    txt_block_cut, code_pref, list_pref, br_ends = '✂', '| ', '- ', '◈'\n    # ansi cols (default):\n    # R: Red (warnings), L: low visi, BG: background, BGL: background light, C=code\n    # H1 - H5 = the theme, the numbers are the ansi color codes:\n    H1,  H2,  H3,  H4,  H5, R,   L,  BG, BGL, T,   TL, C   = \\\n    231, 153, 117, 109, 65, 124, 59, 16, 188, 188, 59, 102\n    # Code (C is fallback if we have no lexer). Default: Same theme:\n    CH1, CH2, CH3, CH4, CH5 = H1, H2, H3, H4, H5\n\n    code_hl = { \"Keyword\" : 'CH3', \"Name\" : 'CH1',\n                \"Comment\" : 'L',  \"String\": 'CH4',\n                \"Error\"   : 'R',  \"Number\": 'CH4',\n                \"Operator\": 'CH5',\n                \"Generic\" : 'CH2'\n                }\n\n    admons = {'note'     : 'H3', 'warning': 'R',\n              'attention': 'H1', 'hint'   : 'H4',\n              'summary'  : 'H1', 'hint'   : 'H4',\n              'question' : 'H5', 'danger' : 'R',\n              'caution'  : 'H2'\n             }\n\n    def_lexer = 'python'\n    guess_lexer = True\n    # also global. but not in use, BG handling can get pretty involved...\n    background = BG\n\n    # normal text color:\n    color = T\n\n    show_links = None\n\n    # could be given, otherwise read from ansi_tables.json:\n    themes = {}\n\n\n    # sample for the theme roller feature:\n    md_sample = ''\n\n    # ------------------------------------------------------------------ End Config\n\nAny importing module can overwrite those module global variables as\nwell.\n\nShould you need yet additional themes, add them to ``ansi_tables.json``\nfile by adding your ansi codes there.\n\nScreenshots\n-----------\n\nRandom results, using the theme roller feature:\n\n|second|\n\nNote the table block splitting when the table does not fit (last\npicture).\n\nTODO\n----\n\n-  Refactor the implementation, using a config class\n-  Lines separators not optimal\n   (`nd <https://www.npmjs.com/package/nd>`__ does better)\n-  Test light colorscheme\n-  Dimming\n-  A few grey scale and 8 color themes\n-  Sorting of the json by luminance\n-  Some themes have black as darkest color, change to dark grey\n-  Common Mark instead of markdown\n\nCredits\n-------\n\n`pygments <http://pygments.org/>`__ (using their lexer)\n\n`tabulate <https://pypi.python.org/pypi/tabulate>`__\n\nand, naturally, the `python markdown\nproject <https://pythonhosted.org/Markdown/authors.html>`__\n\nUpdate: Next version will be CommonMark based though...\n\nUpdates\n-------\n\nJuly 2016:\n~~~~~~~~~~\n\n| Sort of an excuse for the long long time w/o an update:\n| I did actually start working on a more solid version based on\n  CommonMark but\n| that went a bit out of scope, into a general html terminal viewer,\n  which will\n| probably never be finished :-/\n\nSo at least here an update containing the stuff you guys sent as PRs,\nthanks all!!\n\n-  installation and dependencies via a setup.py (thanks\n   `Martin <https://github.com/althonos>`__)\n-  supporting ``echo -e \"# foo\\n## bar\" | mdv -`` and a 'light' theme\n   (thanks\n   `Stanislav <https://github.com/seletskiy>`__)\n-  and a few other improvements regarding python2.7, file location and\n   pyyaml, thanks all.\n\nAlso:\n\n-  fixed the most obvious bugs with nested ordered and unordered lists\n-  fixed bold marker\n-  different color highlighting for the list markers\n-  added a source code highlighting mode, which highlights also\n   docstrings in markdown (``-C <mode>``)\n-  some tests in the tests folder\n-  using ``textwrap`` now for the wrapping, to avoid these word breaks a\n   few complained about\n-  you can supply the default lexer now, e.g. ``-X javascript [-x]``\n-  fixed but with not rendered strong texts\n-  pip install mdv\n\nNov 2016:\n~~~~~~~~~\n\n-  travis\n-  Inline link tables\n   |image6|\n\nLastly\n~~~~~~\n\n*sorry for the aggressive promotion of setdefaultencoding in the example\nshot, hope it does not hurt anybody's feelings;-) I'm only on posix and\ndon't deal with last century encodings. Py2's text handling with it just\nrocks.*\n\n.. |Build Status| image:: https://travis-ci.org/axiros/terminal_markdown_viewer.svg?branch=master\n   :target: https://travis-ci.org/axiros/terminal_markdown_viewer\n.. |PyPI version| image:: https://badge.fury.io/py/mdv.svg\n   :target: https://badge.fury.io/py/mdv\n.. |image2| image:: ./samples/5.png\n.. |image3| image:: samples/3.png\n.. |image4| image:: samples/4.png\n.. |second| image:: https://github.com/axiros/terminal_markdown_viewer/blob/master/samples/2.png\n.. |image6| image:: samples/links.png",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/axiros/terminal_markdown_viewer/tarball/1.6.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/axiros/terminal_markdown_viewer",
    "keywords": "markdown,markup,terminal,hilighting,syntax,source code",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mdv",
    "package_url": "https://pypi.org/project/mdv/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mdv/",
    "project_urls": {
      "Download": "http://github.com/axiros/terminal_markdown_viewer/tarball/1.6.2",
      "Homepage": "http://github.com/axiros/terminal_markdown_viewer"
    },
    "release_url": "https://pypi.org/project/mdv/1.6.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Terminal Markdown Viewer",
    "version": "1.6.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4289381,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2740f2e789ec763e61960df8cd65341424a451f4b9f0b92954c378144389417",
        "md5": "47237cf2daaa50a7d1d094b5920b29ef",
        "sha256": "0af57e19bd45376f2b19d5cc1179dfd0358ddebc773a3f9369521debe48b84dd"
      },
      "downloads": -1,
      "filename": "mdv-1.6.2.tar.gz",
      "has_sig": false,
      "md5_digest": "47237cf2daaa50a7d1d094b5920b29ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45696,
      "upload_time": "2016-12-08T03:16:42",
      "upload_time_iso_8601": "2016-12-08T03:16:42.167262Z",
      "url": "https://files.pythonhosted.org/packages/e2/74/0f2e789ec763e61960df8cd65341424a451f4b9f0b92954c378144389417/mdv-1.6.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}