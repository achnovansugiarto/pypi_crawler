{
  "info": {
    "author": "Axiros GmbH",
    "author_email": "gk@axiros.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2 :: Only",
      "Programming Language :: Python :: 2.7",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "# Terminal Markdown Viewer\r\n\r\nWhen you edit multiple md files remotely, like in a larger\r\n[mkdocs](http://www.mkdocs.org/) project, context switches between editing\r\nterminal(s) and viewing browser may have some efficiency impact.\r\nAlso sometimes there is just no browser, like via security gateways offering\r\njust a fixed set of applications on the hop in machine.\r\nFurther, reading efficiency and convenience is often significantly improved\r\nby using colors.\r\nAnd lastly, using such a thing for cli applications might improve user output,\r\ne.g. for help texts.\r\n\r\nThis is where mdv, a Python based mark down viewer for the terminal might be\r\na good option.\r\n\r\n<!-- toc -->\r\n\r\n- [Terminal Markdown Viewer](#terminal-markdown-viewer)\r\n\t- [Features](#features)\r\n\t- [Alternatives](#alternatives)\r\n\t- [Installation](#installation)\r\n\t\t- [Requirements](#requirements)\r\n\t\t\t- [2.7 ?!](#py27)\r\n\t\t- [Setup](#setup)\r\n\t- [Usage](#usage)\r\n\t\t- [CLI](#cli)\r\n\t\t- [Inline](#inline)\r\n\t\t- [Sample Inline Use Case: click module docu](#sample-inline-use-case-click-module-docu)\r\n\t- [Customization](#customization)\r\n\t- [Screenshots](#screenshots)\r\n\t- [TODO](#todo)\r\n\t- [Credits](#credits)\r\n\t- [Updates](#updates)\r\n\t\t- [July 2016:](#july-2016)\r\n\t\t- [Lastly](#lastly)\r\n\r\n<!-- tocstop -->\r\n\r\n\r\n\r\nMarkdown is \"simple\" enough to be well displayed on modern (256 color) terminals (except images that is).\r\n\r\n<img src=\"./samples/1.png\" width=500>\r\n\r\nfrom\r\n\r\n\t### Source\r\n\t# Header 1\r\n\t## Header 2\r\n\t### Header 3\r\n\t#### Header 4\r\n\t##### Header 5\r\n\t###### Header 6\r\n\t```python\r\n\t\"\"\" Test \"\"\"\r\n\t# Make Py2 >>> Py3:\r\n\timport os, sys; reload(sys); sys.setdefaultencoding('utf-8')\r\n\t# no? see http://stackoverflow.com/a/29832646/4583360 ...\r\n\r\n\t# code analysis for hilite:\r\n\ttry:\r\n\t    from pygments import lex, token\r\n\t    from pygments.lexers import get_lexer_by_name, guess_lexer\r\n\t```\r\n\r\n\t| Tables | Fmt |\r\n\t| -- | -- |\r\n\t| !!! hint: wrapped | 0.1 **strong** |\r\n\r\n\t!!! note: title\r\n\t    this is a Note\r\n\r\n\r\nYou can also use mdv as a **source code** viewer, best when you have docstrings with markdown in your code:\r\n\r\n![](./samples/5.png)\r\n\r\nfrom\r\n\r\n```python\r\n~/terminal_markdown_viewer $ cat setup.py\r\n#!/usr/bin/env python2.7\r\n# coding: utf-8\r\n\r\n\"\"\"_\r\n# Mdv installation\r\n\r\n## Usage\r\n\r\n    [sudo] ./setup.py install\r\n\r\n----\r\n\"\"\"\r\n\r\nfrom setuptools import setup, find_packages\r\n\r\nimport mdv\r\n\r\nsetup(\r\n    name='mdv',\r\n    version=mdv.__version__,\r\n\r\n```\r\n(the '_' after the docstring telling mdv that markdown follows)\r\n\r\n----\r\n\r\n> mdv is a proof of concept hack: While for simple structures it does\r\nits job quite well, for complex markdown you want to use other tools.\r\n----\r\n\r\n\r\n## Features\r\n\r\n- Tons of theme combinations: mdv ships with > 200 luminocity sorted themes, converted from html themes tables to ansi. Those can be combined for code vs regular markdown output...\r\n- Admonitions\r\n- Tables, incl. wide table handling avoiding \"interleaving\"\r\n- Somewhat hackable, all in [one](markdownviewer.py) module\r\n- Useable as lib as well\r\n- File change monitor\r\n- Text wrapping\r\n- Source code highlighter\r\n- Little directory change monitor (cames handy when working on multiple files, to get the current one always displayed)\r\n\t- which can run arbitrary commands on file changes\r\n\t- which passes filepath, raw and prettyfied content to the other command\r\n        Note: Poor man's implementation, polling. Check inotify based tools if you want sth better.\r\n\r\n## Alternatives\r\n\r\nThe ones I know of (and which made me write mdv ;-) ):\r\n\r\n1. There are quite a few from the js community (e.g. [msee](https://www.npmjs.com/package/msee), ansidown, ansimd and also nd which is great) but they require nodejs & npm, which I don't have on my servers. Also I personally wanted table handling and admonition support throughout and prob. too old to hack other peoples' js (struggling enough with my own). But have a look at them, they do some things better than mdv in this early version (I try to learn from them). Also [this](https://github.com/substack/picture-tube) would be worth a look ;-)\r\n2. pandoc -> html -> elinks, lynx or pandoc -> groff -> man. (Heavy and hard to use from within other programs. Styling suboptimal)\r\n3. vimcat (Also heavy and hard to use inline in other programs)\r\n\r\nSummary: For production ready robust markdown viewing (e.g. for your customers) I recommend nd still, due to the early state of mdv. For playing around, especially with theming or when with Python, this one might be a valid alternative to look at.\r\n\r\n## Installation\r\n\r\n### Requirements\r\n\r\n- python2.7\r\n- py markdown (pip install markdown)\r\n- py pygments (pip install pygments)\r\n- py yaml (pip install yaml)\r\n\r\nFurther a 256 color terminal (for now best with dark background) and font support for a few special separator characters (which you could change via config).\r\n\r\n> For light terms you'd just need to revert the 5 colors from the themes, since they are sorted by luminocity.\r\n\r\nI did not test anything on windows.\r\n\r\n#### Py2.7?!\r\n\r\nExcept for some print brackets there is no reason it would not run in 3 and I'd\r\npull if anybody sent me a version for 2 and 3. I myself won't do it though, will\r\nnever work in a language w/o bytestrings and the most important type based on\r\n[funny enumerated](http://utf8everywhere.org/#characters) symbols.\r\n\r\n\r\n### Setup\r\n\r\nDistribution via setuptools. If setuptools is not installed, run:\r\n\r\n    pip install setuptools\r\n\r\n\r\nUse the setup.py provided inside, I.e. run:\r\n\r\n\tsudo ./setup.py install\r\n    (or ./setup.py install --user to install only for the current user)\r\n\r\nNo pip currently.\r\n\r\n\r\n## Usage\r\n\r\n### CLI\r\n\r\n```markdown\r\n# Usage:\r\n\r\n    mdv [-t THEME] [-T C_THEME] [-i] [-x] [-X Lexer] [-l] [-L] [-c COLS] [-f FROM] [-m] [-C MODE] [-M DIR] [-H] [-A] [MDFILE]\r\n\r\n# Options:\r\n\r\n    MDFILE    : Path to markdown file\r\n    -t THEME  : Key within the color ansi_table.json. 'random' accepted.\r\n    -T C_THEME: Theme for code highlight. If not set: Using THEME.\r\n    -l        : Light background (not yet supported)\r\n    -L        : Display links\r\n    -x        : Do not try guess code lexer (guessing is a bit slow)\r\n    -X Lexer  : Default lexer name (default: python)\r\n    -f FROM   : Display FROM given substring of the file.\r\n    -m        : Monitor file for changes and redisplay FROM given substring\r\n    -M DIR    : Monitor directory for markdown file changes\r\n    -c COLS   : Fix columns to this (default: your terminal width)\r\n    -C MODE   : Sourcecode highlighting mode.\r\n    -A        : Strip all ansi (no colors then)\r\n    -i        : Show theme infos with output\r\n    -H        : Print html version\r\n\r\n# Notes:\r\n\r\nWe use stty tool to derive terminal size. If you pipe into mdv we use 80 cols.\r\n\r\n## To use mdv.py as lib:\r\n\r\nCall the main function with markdown string at hand to get a\r\nformatted one back. Sorry then for no Py3 support, accepting PRs if they don't screw Py2.\r\n\r\n## FROM:\r\n\r\nFROM may contain max lines to display, seperated by colon.\r\nExample:\r\n\r\n    -f 'Some Head:10' -> displays 10 lines after 'Some Head'\r\n\r\nIf the substring is not found we set it to the *first* character of the file -\r\nresulting in output from the top (if your terminal height can be derived correctly through the stty cmd).\r\n\r\n## Code Highlighting\r\n\r\nSet -C <all|code|doc|mod> for source code highlighting of source code files.\r\nMark inline markdown with a '_' following the docstring beginnings.\r\n\r\n- all: Show markdown docstrings AND code (default if you say, e.g. `-C.`)\r\n- code: Only Code\r\n- doc: Only docstrings with markdown\r\n- mod: Only the module level docstring\r\n\r\n\r\n## File Monitor:\r\n\r\nIf FROM is not found we display the whole file.\r\n\r\n## Directory Monitor:\r\n\r\nWe check only text file changes, monitoring their size.\r\n\r\nBy default .md, .mdown, .markdown files are checked but you can change like `-M 'mydir:py,c,md,'` where the last empty substrings makes mdv also monitor any file w/o extension (like 'README').\r\n\r\n### Running actions on changes:\r\n\r\nIf you append to `-M` a `'::<cmd>'` we run the command on any change detected (sync, in foreground).\r\n\r\nThe command can contain placeholders:\r\n\r\n    _fp_     # Will be replaced with filepath\r\n    _raw_    # Will be replaced with the base64 encoded raw content\r\n               of the file\r\n    _pretty_ # Will be replaced with the base64 encoded prettyfied output\r\n\r\nLike: mdv -M './mydocs:py,md::open \"_fp_\"'  which calls the open\r\ncommand with argument the path to the changed file.\r\n\r\n\r\n## Theme rollers:\r\n\r\n\r\n    mdv -T all:  All available code styles on the given file.\r\n    mdv -t all:  All available md   styles on the given file.\r\n                If file is not given we use a short sample file.\r\n\r\nSo to see all code hilite variations with a given theme:\r\n\r\nSay C_THEME = all and fix THEME\r\n\r\nSetting both to all will probably spin your beach ball...\r\n\r\n\r\n```\r\n\r\n> Regarding the strange theme ids: Those numbers are the calculated total luminocity of the 5 theme colors.\r\n\r\n### Inline\r\n\r\nmdv is designed to be used well from other (Py2) programs when they have md at hand which should be displayed to the user:\r\n\r\n```python\r\nimport mdv\r\n\r\n# config like this:\r\nmdv.term_columns = 60\r\n\r\n# calling like this (all CLI options supported, check def main\r\nformatted = mdv.main(my_raw_markdown, c_theme=...)  \r\n```\r\n\r\n> Note that I set the defaultencoding to utf-8  in ``__main__``. I have this as my default python2 setup and did not test inline usage w/o. Check [this](http://stackoverflow.com/a/29832646/4583360) for risks.\r\n\r\n### Sample Inline Use Case: click module docu\r\n\r\n[Armin Ronacher](http://lucumr.pocoo.org/2014/5/12/everything-about-unicode/)'s\r\n[click](http://click.pocoo.org) is a great framework for writing larger CLI apps - but its help texts are a bit boring, intended to be customized.\r\n\r\nHere is how:\r\n\r\nWrite a normal click module with a function but w/o a doc string as shown:\r\n```python\r\n@pass_context                                                                   \r\ndef cli(ctx, action, name, host, port, user, msg):           \r\n\t\"\"\" docu from module __doc__ \"\"\"\r\n```\r\n\r\nOn module level you provide markdown for it, like:\r\n\r\n```shell\r\n~/axc/plugins/zodb_sub $ cat zodb.py | head\r\n\"\"\"\r\n# Fetch and push ZODB trees\r\n\r\n## ACTION: < info | pull | push | merge | dump | serve>\r\n\r\n- info:  Requests server availability information\r\n(...)\r\n```\r\nwhich you set at click module import time:\r\n\r\n\tmod.cli.help = mod.__doc__\r\n\r\n\r\nLastly do this in your app module:\r\n\r\n```python\r\nfrom click.formatting import HelpFormatter\r\ndef write_text(self, text):\r\n    \"\"\" since for markdown pretty out on cli I found no good tool\r\n\tso I built my own \"\"\"\r\n    # poor man's md detection:\r\n    if not text.strip().startswith('#'):\r\n        return orig_write_text(self, text)\r\n    from axc.markdown.mdv import main as mdv\r\n    self.buffer.append(mdv(md=text, theme=os.environ['AXC_THEME']))\r\n\r\nHelpFormatter.orig_write_text = HelpFormatter.write_text\r\nHelpFormatter.write_text = write_text\r\n```\r\n\r\nThe output has then colors:\r\n\r\n![](samples/3.png)\r\n\r\nand at smaller terms rewraps nicely:\r\n\r\n![](samples/4.png)\r\n\r\nFurther, having markdown in the module ``__doc__`` makes it simple to add into a global project docu framework, like mkdocs.\r\n\r\n\r\n\r\n## Customization\r\n\r\nYou can supply all CLI args in `$HOME/.mdv`, in yaml format.\r\n\r\nMore flex you have via `$HOME/.mdv.py`, which is execed if present, when\r\nrunning `main`.\r\n\r\nAlternatively, in [mdv.py](mdv.py) you can change some config straight forward.\r\n\r\n```python\r\n# ---------------------------------------------------------------------- Config\r\ntxt_block_cut, code_pref, list_pref, br_ends = '✂', '| ', '- ', '◈'\r\n# ansi cols (default):\r\n# R: Red (warnings), L: low visi, BG: background, BGL: background light, C=code\r\n# H1 - H5 = the theme, the numbers are the ansi color codes:\r\nH1,  H2,  H3,  H4,  H5, R,   L,  BG, BGL, T,   TL, C   = \\\r\n231, 153, 117, 109, 65, 124, 59, 16, 188, 188, 59, 102\r\n# Code (C is fallback if we have no lexer). Default: Same theme:\r\nCH1, CH2, CH3, CH4, CH5 = H1, H2, H3, H4, H5\r\n\r\ncode_hl = { \"Keyword\" : 'CH3', \"Name\" : 'CH1',\r\n            \"Comment\" : 'L',  \"String\": 'CH4',\r\n            \"Error\"   : 'R',  \"Number\": 'CH4',\r\n            \"Operator\": 'CH5',\r\n            \"Generic\" : 'CH2'\r\n            }\r\n\r\nadmons = {'note'     : 'H3', 'warning': 'R',\r\n          'attention': 'H1', 'hint'   : 'H4',\r\n          'summary'  : 'H1', 'hint'   : 'H4',\r\n          'question' : 'H5', 'danger' : 'R',\r\n          'caution'  : 'H2'\r\n         }\r\n\r\ndef_lexer = 'python'\r\nguess_lexer = True\r\n# also global. but not in use, BG handling can get pretty involved...\r\nbackground = BG\r\n\r\n# normal text color:\r\ncolor = T\r\n\r\nshow_links = None\r\n\r\n# could be given, otherwise read from ansi_tables.json:\r\nthemes = {}\r\n\r\n\r\n# sample for the theme roller feature:\r\nmd_sample = ''\r\n\r\n# ------------------------------------------------------------------ End Config\r\n```\r\n\r\nAny importing module can overwrite those module global variables as well.\r\n\r\nShould you need yet additional themes, add them to ``ansi_tables.json`` file by adding your ansi codes there.\r\n\r\n\r\n\r\n## Screenshots\r\n\r\nRandom results, using the theme roller feature:\r\n\r\n![second](https://github.com/axiros/terminal_markdown_viewer/blob/master/samples/2.png)\r\n\r\nNote the table block splitting when the table does not fit (last picture).\r\n\r\n## TODO\r\n\r\n- Refactor the implementation, using a config class\r\n- Lines separators not optimal ([nd](https://www.npmjs.com/package/nd) does better)\r\n- Test light colorscheme\r\n- Dimming\r\n- A few grey scale and 8 color themes\r\n- Sorting of the json by luminance\r\n- Some themes have black as darkest color, change to dark grey\r\n- Common Mark instead of markdown\r\n\r\n## Credits\r\n\r\n[pygments](http://pygments.org/) (using their lexer)\r\n\r\n[tabulate](https://pypi.python.org/pypi/tabulate)\r\n\r\nand, naturally, the [python markdown project](https://pythonhosted.org/Markdown/authors.html)\r\n\r\nUpdate: Next version will be CommonMark based though...\r\n\r\n\r\n## Updates\r\n\r\n### July 2016:\r\n\r\nSort of an excuse for the long long time w/o an update:\r\nI did actually start working on a more solid version based on CommonMark but\r\nthat went a bit out of scope, into a general html terminal viewer, which will\r\nprobably never be finished :-/\r\n\r\nSo at least here an update containing the stuff you guys sent as PRs, thanks all!!\r\n\r\n- installation and dependencies via a setup.py (thanks\r\n  [Martin](https://github.com/althonos))\r\n- supporting `echo -e \"# foo\\n## bar\" | mdv -` and a 'light' theme (thanks\r\n  [Stanislav](https://github.com/seletskiy))\r\n- and a few other improvements regarding python2.7, file location and pyyaml, thanks all.\r\n\r\nAlso:\r\n\r\n- fixed the most obvious bugs with nested ordered and unordered lists\r\n- fixed bold marker\r\n- different color highlighting for the list markers\r\n- added a source code highlighting mode, which highlights also docstrings in markdown (`-C <mode>`)\r\n- some tests in the tests folder\r\n- using `textwrap` now for the wrapping, to avoid these word breaks a few complained about\r\n- you can supply the default lexer now, e.g. `-X javascript [-x]`\r\n\r\n\r\n\r\n### Lastly\r\n\r\n*sorry for the aggressive promotion of setdefaultencoding in the example shot, hope it does not hurt anybody's feelings;-) I'm only on posix and don't deal with last century encodings. Py2's text handling with it just rocks.*",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/axiros/terminal_markdown_viewer/tarball/0.3",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/axiros/terminal_markdown_viewer",
    "keywords": "markdown,markup,terminal,hilighting,syntax,source code,table,formatting,ansi colors",
    "license": "BSD Style https://github.com/axiros/terminal_markdown_viewer/blob/master/LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdv",
    "package_url": "https://pypi.org/project/mdv/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mdv/",
    "project_urls": {
      "Download": "http://github.com/axiros/terminal_markdown_viewer/tarball/0.3",
      "Homepage": "http://github.com/axiros/terminal_markdown_viewer"
    },
    "release_url": "https://pypi.org/project/mdv/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Terminal Markdown Viewer",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4289381,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "53086b1c6b6e415ba673deca9d32d2646ce6a0ca7e0be91ccfb1ab51f4045c71",
        "md5": "ef3b087e42b47a3b9f0c98f5438f58ff",
        "sha256": "6b57074f72a5ae537d89b71775b221d60887594a71fc4e7d18124d41ebe7fc95"
      },
      "downloads": -1,
      "filename": "mdv-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ef3b087e42b47a3b9f0c98f5438f58ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40134,
      "upload_time": "2016-07-25T17:59:19",
      "upload_time_iso_8601": "2016-07-25T17:59:19.763672Z",
      "url": "https://files.pythonhosted.org/packages/53/08/6b1c6b6e415ba673deca9d32d2646ce6a0ca7e0be91ccfb1ab51f4045c71/mdv-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}