{
  "info": {
    "author": "Russi Chatterjee",
    "author_email": "root@ixaxaar.in",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "Differentiable Neural Computers and family, for Pytorch\n=======================================================\n\nIncludes: 1. Differentiable Neural Computers (DNC) 2. Sparse Access\nMemory (SAM) 3. Sparse Differentiable Neural Computers (SDNC)\n\n.. raw:: html\n\n   <!-- START doctoc generated TOC please keep comment here to allow auto update -->\n\n.. raw:: html\n\n   <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n-  `Install <#install>`__\n-  `From source <#from-source>`__\n-  `Architecure <#architecure>`__\n-  `Usage <#usage>`__\n-  `DNC <#dnc>`__\n\n   -  `Example usage <#example-usage>`__\n   -  `Debugging <#debugging>`__\n\n-  `SDNC <#sdnc>`__\n\n   -  `Example usage <#example-usage-1>`__\n   -  `Debugging <#debugging-1>`__\n\n-  `SAM <#sam>`__\n\n   -  `Example usage <#example-usage-2>`__\n   -  `Debugging <#debugging-2>`__\n\n-  `Tasks <#tasks>`__\n-  `Copy task (with curriculum and\n   generalization) <#copy-task-with-curriculum-and-generalization>`__\n-  `Generalizing Addition task <#generalizing-addition-task>`__\n-  `Generalizing Argmax task <#generalizing-argmax-task>`__\n-  `Code Structure <#code-structure>`__\n-  `General noteworthy stuff <#general-noteworthy-stuff>`__\n\n.. raw:: html\n\n   <!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n|Build Status| |PyPI version|\n\nThis is an implementation of `Differentiable Neural\nComputers <http://people.idsia.ch/~rupesh/rnnsymposium2016/slides/graves.pdf>`__,\ndescribed in the paper `Hybrid computing using a neural network with\ndynamic external memory, Graves et\nal. <https://www.nature.com/articles/nature20101>`__ and Sparse DNCs\n(SDNCs) and Sparse Access Memory (SAM) described in `Scaling\nMemory-Augmented Neural Networks with Sparse Reads and\nWrites <http://papers.nips.cc/paper/6298-scaling-memory-augmented-neural-networks-with-sparse-reads-and-writes.pdf>`__.\n\nInstall\n-------\n\n.. code:: bash\n\n    pip install dnc\n\nFrom source\n~~~~~~~~~~~\n\n::\n\n    git clone https://github.com/ixaxaar/pytorch-dnc\n    cd pytorch-dnc\n    pip install -r ./requirements.txt\n    pip install -e .\n\nFor using fully GPU based SDNCs or SAMs, install FAISS:\n\n.. code:: bash\n\n    conda install faiss-gpu -c pytorch\n\n``pytest`` is required to run the test\n\nArchitecure\n-----------\n\nUsage\n-----\n\nDNC\n~~~\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\nFollowing are the constructor parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | ``No | Size |\n| t\\_s | ne`` | of   |\n| ize  |      | the  |\n|      |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | ors  |\n+------+------+------+\n| hidd | ``No | Size |\n| en\\_ | ne`` | of   |\n| size |      | hidd |\n|      |      | en   |\n|      |      | unit |\n|      |      | s    |\n+------+------+------+\n| rnn\\ | ``'l | Type |\n| _typ | stm' | of   |\n| e    | ``   | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | cell |\n|      |      | s    |\n|      |      | used |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``1` | Numb |\n| _lay | `    | er   |\n| ers  |      | of   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | of   |\n|      |      | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | unit |\n|      |      | s    |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``2` | Numb |\n| _hid | `    | er   |\n| den\\ |      | of   |\n| _lay |      | hidd |\n| ers  |      | en   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | per  |\n|      |      | laye |\n|      |      | r    |\n|      |      | of   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bias | ``Tr | Bias |\n|      | ue`` |      |\n+------+------+------+\n| batc | ``Tr | Whet |\n| h\\_f | ue`` | her  |\n| irst |      | data |\n|      |      | is   |\n|      |      | fed  |\n|      |      | batc |\n|      |      | h    |\n|      |      | firs |\n|      |      | t    |\n+------+------+------+\n| drop | ``0` | Drop |\n| out  | `    | out  |\n|      |      | betw |\n|      |      | een  |\n|      |      | laye |\n|      |      | rs   |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bidi | ``Fa | If   |\n| rect | lse` | the  |\n| iona | `    | cont |\n| l    |      | roll |\n|      |      | er   |\n|      |      | is   |\n|      |      | bidi |\n|      |      | rect |\n|      |      | iona |\n|      |      | l    |\n|      |      | (Not |\n|      |      | yet  |\n|      |      | impl |\n|      |      | emen |\n|      |      | ted  |\n+------+------+------+\n| nr\\_ | ``5` | Numb |\n| cell | `    | er   |\n| s    |      | of   |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n|      |      | s    |\n+------+------+------+\n| read | ``2` | Numb |\n| \\_he | `    | er   |\n| ads  |      | of   |\n|      |      | read |\n|      |      | head |\n|      |      | s    |\n+------+------+------+\n| cell | ``10 | Size |\n| \\_si | ``   | of   |\n| ze   |      | each |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n+------+------+------+\n| nonl | ``'t | If   |\n| inea | anh' | usin |\n| rity | ``   | g    |\n|      |      | 'rnn |\n|      |      | '    |\n|      |      | as   |\n|      |      | ``rn |\n|      |      | n_ty |\n|      |      | pe`` |\n|      |      | ,    |\n|      |      | non- |\n|      |      | line |\n|      |      | arit |\n|      |      | y    |\n|      |      | of   |\n|      |      | the  |\n|      |      | RNNs |\n+------+------+------+\n| gpu\\ | ``-1 | ID   |\n| _id  | ``   | of   |\n|      |      | the  |\n|      |      | GPU, |\n|      |      | -1   |\n|      |      | for  |\n|      |      | CPU  |\n+------+------+------+\n| inde | ``Fa | Whet |\n| pend | lse` | her  |\n| ent\\ | `    | to   |\n| _lin |      | use  |\n| ears |      | inde |\n|      |      | pend |\n|      |      | ent  |\n|      |      | line |\n|      |      | ar   |\n|      |      | unit |\n|      |      | s    |\n|      |      | to   |\n|      |      | deri |\n|      |      | ve   |\n|      |      | inte |\n|      |      | rfac |\n|      |      | e    |\n|      |      | vect |\n|      |      | or   |\n+------+------+------+\n| shar | ``Tr | Whet |\n| e\\_m | ue`` | her  |\n| emor |      | to   |\n| y    |      | shar |\n|      |      | e    |\n|      |      | memo |\n|      |      | ry   |\n|      |      | betw |\n|      |      | een  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n|      |      | laye |\n|      |      | rs   |\n+------+------+------+\n\nFollowing are the forward pass parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | -    | The  |\n| t    |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | or   |\n|      |      | ``(B |\n|      |      | *T*X |\n|      |      | )``  |\n|      |      | or   |\n|      |      | ``(T |\n|      |      | *B*X |\n|      |      | )``  |\n+------+------+------+\n| hidd | ``(N | Hidd |\n| en   | one, | en   |\n|      | None | stat |\n|      | ,Non | es   |\n|      | e)`` | ``(c |\n|      |      | ontr |\n|      |      | olle |\n|      |      | r hi |\n|      |      | dden |\n|      |      | , me |\n|      |      | mory |\n|      |      |  hid |\n|      |      | den, |\n|      |      |  rea |\n|      |      | d ve |\n|      |      | ctor |\n|      |      | s)`` |\n+------+------+------+\n| rese | ``Fa | Whet |\n| t\\_e | lse` | her  |\n| xper | `    | to   |\n| ienc |      | rese |\n| e    |      | t    |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n| pass | ``Tr | Whet |\n| \\_th | ue`` | her  |\n| roug |      | to   |\n| h\\_m |      | pass |\n| emor |      | thro |\n| y    |      | ugh  |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n\nExample usage\n^^^^^^^^^^^^^\n\n.. code:: python\n\n    from dnc import DNC\n\n    rnn = DNC(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      batch_first=True,\n      gpu_id=0\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors) = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nDebugging\n^^^^^^^^^\n\nThe ``debug`` option causes the network to return its memory hidden\nvectors (numpy ``ndarray``\\ s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n.. code:: python\n\n    from dnc import DNC\n\n    rnn = DNC(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      batch_first=True,\n      gpu_id=0,\n      debug=True\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors), debug_memory = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nMemory vectors returned by forward pass (``np.ndarray``):\n\n+-------------------------------------+-----------------------+----------------------------+\n| Key                                 | Y axis (dimensions)   | X axis (dimensions)        |\n+=====================================+=======================+============================+\n| ``debug_memory['memory']``          | layer \\* time         | nr\\_cells \\* cell\\_size    |\n+-------------------------------------+-----------------------+----------------------------+\n| ``debug_memory['link_matrix']``     | layer \\* time         | nr\\_cells \\* nr\\_cells     |\n+-------------------------------------+-----------------------+----------------------------+\n| ``debug_memory['precedence']``      | layer \\* time         | nr\\_cells                  |\n+-------------------------------------+-----------------------+----------------------------+\n| ``debug_memory['read_weights']``    | layer \\* time         | read\\_heads \\* nr\\_cells   |\n+-------------------------------------+-----------------------+----------------------------+\n| ``debug_memory['write_weights']``   | layer \\* time         | nr\\_cells                  |\n+-------------------------------------+-----------------------+----------------------------+\n| ``debug_memory['usage_vector']``    | layer \\* time         | nr\\_cells                  |\n+-------------------------------------+-----------------------+----------------------------+\n\nSDNC\n~~~~\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | ``No | Size |\n| t\\_s | ne`` | of   |\n| ize  |      | the  |\n|      |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | ors  |\n+------+------+------+\n| hidd | ``No | Size |\n| en\\_ | ne`` | of   |\n| size |      | hidd |\n|      |      | en   |\n|      |      | unit |\n|      |      | s    |\n+------+------+------+\n| rnn\\ | ``'l | Type |\n| _typ | stm' | of   |\n| e    | ``   | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | cell |\n|      |      | s    |\n|      |      | used |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``1` | Numb |\n| _lay | `    | er   |\n| ers  |      | of   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | of   |\n|      |      | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | unit |\n|      |      | s    |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``2` | Numb |\n| _hid | `    | er   |\n| den\\ |      | of   |\n| _lay |      | hidd |\n| ers  |      | en   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | per  |\n|      |      | laye |\n|      |      | r    |\n|      |      | of   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bias | ``Tr | Bias |\n|      | ue`` |      |\n+------+------+------+\n| batc | ``Tr | Whet |\n| h\\_f | ue`` | her  |\n| irst |      | data |\n|      |      | is   |\n|      |      | fed  |\n|      |      | batc |\n|      |      | h    |\n|      |      | firs |\n|      |      | t    |\n+------+------+------+\n| drop | ``0` | Drop |\n| out  | `    | out  |\n|      |      | betw |\n|      |      | een  |\n|      |      | laye |\n|      |      | rs   |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bidi | ``Fa | If   |\n| rect | lse` | the  |\n| iona | `    | cont |\n| l    |      | roll |\n|      |      | er   |\n|      |      | is   |\n|      |      | bidi |\n|      |      | rect |\n|      |      | iona |\n|      |      | l    |\n|      |      | (Not |\n|      |      | yet  |\n|      |      | impl |\n|      |      | emen |\n|      |      | ted  |\n+------+------+------+\n| nr\\_ | ``50 | Numb |\n| cell | 00`` | er   |\n| s    |      | of   |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n|      |      | s    |\n+------+------+------+\n| read | ``4` | Numb |\n| \\_he | `    | er   |\n| ads  |      | of   |\n|      |      | read |\n|      |      | head |\n|      |      | s    |\n+------+------+------+\n| spar | ``4` | Numb |\n| se\\_ | `    | er   |\n| read |      | of   |\n| s    |      | spar |\n|      |      | se   |\n|      |      | memo |\n|      |      | ry   |\n|      |      | read |\n|      |      | s    |\n|      |      | per  |\n|      |      | read |\n|      |      | head |\n+------+------+------+\n| temp | ``4` | Numb |\n| oral | `    | er   |\n| \\_re |      | of   |\n| ads  |      | temp |\n|      |      | oral |\n|      |      | read |\n|      |      | s    |\n+------+------+------+\n| cell | ``10 | Size |\n| \\_si | ``   | of   |\n| ze   |      | each |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n+------+------+------+\n| nonl | ``'t | If   |\n| inea | anh' | usin |\n| rity | ``   | g    |\n|      |      | 'rnn |\n|      |      | '    |\n|      |      | as   |\n|      |      | ``rn |\n|      |      | n_ty |\n|      |      | pe`` |\n|      |      | ,    |\n|      |      | non- |\n|      |      | line |\n|      |      | arit |\n|      |      | y    |\n|      |      | of   |\n|      |      | the  |\n|      |      | RNNs |\n+------+------+------+\n| gpu\\ | ``-1 | ID   |\n| _id  | ``   | of   |\n|      |      | the  |\n|      |      | GPU, |\n|      |      | -1   |\n|      |      | for  |\n|      |      | CPU  |\n+------+------+------+\n| inde | ``Fa | Whet |\n| pend | lse` | her  |\n| ent\\ | `    | to   |\n| _lin |      | use  |\n| ears |      | inde |\n|      |      | pend |\n|      |      | ent  |\n|      |      | line |\n|      |      | ar   |\n|      |      | unit |\n|      |      | s    |\n|      |      | to   |\n|      |      | deri |\n|      |      | ve   |\n|      |      | inte |\n|      |      | rfac |\n|      |      | e    |\n|      |      | vect |\n|      |      | or   |\n+------+------+------+\n| shar | ``Tr | Whet |\n| e\\_m | ue`` | her  |\n| emor |      | to   |\n| y    |      | shar |\n|      |      | e    |\n|      |      | memo |\n|      |      | ry   |\n|      |      | betw |\n|      |      | een  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n|      |      | laye |\n|      |      | rs   |\n+------+------+------+\n\nFollowing are the forward pass parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | -    | The  |\n| t    |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | or   |\n|      |      | ``(B |\n|      |      | *T*X |\n|      |      | )``  |\n|      |      | or   |\n|      |      | ``(T |\n|      |      | *B*X |\n|      |      | )``  |\n+------+------+------+\n| hidd | ``(N | Hidd |\n| en   | one, | en   |\n|      | None | stat |\n|      | ,Non | es   |\n|      | e)`` | ``(c |\n|      |      | ontr |\n|      |      | olle |\n|      |      | r hi |\n|      |      | dden |\n|      |      | , me |\n|      |      | mory |\n|      |      |  hid |\n|      |      | den, |\n|      |      |  rea |\n|      |      | d ve |\n|      |      | ctor |\n|      |      | s)`` |\n+------+------+------+\n| rese | ``Fa | Whet |\n| t\\_e | lse` | her  |\n| xper | `    | to   |\n| ienc |      | rese |\n| e    |      | t    |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n| pass | ``Tr | Whet |\n| \\_th | ue`` | her  |\n| roug |      | to   |\n| h\\_m |      | pass |\n| emor |      | thro |\n| y    |      | ugh  |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n\nExample usage\n^^^^^^^^^^^^^\n\n.. code:: python\n\n    from dnc import SDNC\n\n    rnn = SDNC(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      sparse_reads=4,\n      batch_first=True,\n      gpu_id=0\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors) = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nDebugging\n^^^^^^^^^\n\nThe ``debug`` option causes the network to return its memory hidden\nvectors (numpy ``ndarray``\\ s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n.. code:: python\n\n    from dnc import SDNC\n\n    rnn = SDNC(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      batch_first=True,\n      sparse_reads=4,\n      temporal_reads=4,\n      gpu_id=0,\n      debug=True\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors), debug_memory = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nMemory vectors returned by forward pass (``np.ndarray``):\n\n+------+------+------+\n| Key  | Y    | X    |\n|      | axis | axis |\n|      | (dim | (dim |\n|      | ensi | ensi |\n|      | ons) | ons) |\n+======+======+======+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time | \\*   |\n| memo |      | cell |\n| ry'] |      | \\_si |\n| ``   |      | ze   |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| visi |      |  *te |\n| ble_ |      | mpor |\n| memo |      | al\\_ |\n| ry'] |      | read |\n| ``   |      | s+1  |\n|      |      | *    |\n|      |      | nr\\_ |\n|      |      | cell |\n|      |      | s    |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| read |      | *tem |\n| _pos |      | pora |\n| itio |      | l\\_r |\n| ns'] |      | eads |\n| ``   |      | +1   |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| link |      |  *te |\n| _mat |      | mpor |\n| rix' |      | al\\_ |\n| ]``  |      | read |\n|      |      | s+1  |\n|      |      | *    |\n|      |      | spar |\n|      |      | se\\_ |\n|      |      | read |\n|      |      | s+2\\ |\n|      |      | *tem |\n|      |      | pora |\n|      |      | l\\_r |\n|      |      | eads |\n|      |      | +1   |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| rev_ |      |  *te |\n| link |      | mpor |\n| _mat |      | al\\_ |\n| rix' |      | read |\n| ]``  |      | s+1  |\n|      |      | *    |\n|      |      | spar |\n|      |      | se\\_ |\n|      |      | read |\n|      |      | s+2\\ |\n|      |      | *tem |\n|      |      | pora |\n|      |      | l\\_r |\n|      |      | eads |\n|      |      | +1   |\n+------+------+------+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time |      |\n| prec |      |      |\n| eden |      |      |\n| ce'] |      |      |\n| ``   |      |      |\n+------+------+------+\n| ``de | laye | read |\n| bug_ | r    | \\_he |\n| memo | \\*   | ads  |\n| ry[' | time | \\*   |\n| read |      | nr\\_ |\n| _wei |      | cell |\n| ghts |      | s    |\n| ']`` |      |      |\n+------+------+------+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time |      |\n| writ |      |      |\n| e_we |      |      |\n| ight |      |      |\n| s']` |      |      |\n| `    |      |      |\n+------+------+------+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time |      |\n| usag |      |      |\n| e']` |      |      |\n| `    |      |      |\n+------+------+------+\n\nSAM\n~~~\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | ``No | Size |\n| t\\_s | ne`` | of   |\n| ize  |      | the  |\n|      |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | ors  |\n+------+------+------+\n| hidd | ``No | Size |\n| en\\_ | ne`` | of   |\n| size |      | hidd |\n|      |      | en   |\n|      |      | unit |\n|      |      | s    |\n+------+------+------+\n| rnn\\ | ``'l | Type |\n| _typ | stm' | of   |\n| e    | ``   | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | cell |\n|      |      | s    |\n|      |      | used |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``1` | Numb |\n| _lay | `    | er   |\n| ers  |      | of   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | of   |\n|      |      | recu |\n|      |      | rren |\n|      |      | t    |\n|      |      | unit |\n|      |      | s    |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| num\\ | ``2` | Numb |\n| _hid | `    | er   |\n| den\\ |      | of   |\n| _lay |      | hidd |\n| ers  |      | en   |\n|      |      | laye |\n|      |      | rs   |\n|      |      | per  |\n|      |      | laye |\n|      |      | r    |\n|      |      | of   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bias | ``Tr | Bias |\n|      | ue`` |      |\n+------+------+------+\n| batc | ``Tr | Whet |\n| h\\_f | ue`` | her  |\n| irst |      | data |\n|      |      | is   |\n|      |      | fed  |\n|      |      | batc |\n|      |      | h    |\n|      |      | firs |\n|      |      | t    |\n+------+------+------+\n| drop | ``0` | Drop |\n| out  | `    | out  |\n|      |      | betw |\n|      |      | een  |\n|      |      | laye |\n|      |      | rs   |\n|      |      | in   |\n|      |      | the  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n+------+------+------+\n| bidi | ``Fa | If   |\n| rect | lse` | the  |\n| iona | `    | cont |\n| l    |      | roll |\n|      |      | er   |\n|      |      | is   |\n|      |      | bidi |\n|      |      | rect |\n|      |      | iona |\n|      |      | l    |\n|      |      | (Not |\n|      |      | yet  |\n|      |      | impl |\n|      |      | emen |\n|      |      | ted  |\n+------+------+------+\n| nr\\_ | ``50 | Numb |\n| cell | 00`` | er   |\n| s    |      | of   |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n|      |      | s    |\n+------+------+------+\n| read | ``4` | Numb |\n| \\_he | `    | er   |\n| ads  |      | of   |\n|      |      | read |\n|      |      | head |\n|      |      | s    |\n+------+------+------+\n| spar | ``4` | Numb |\n| se\\_ | `    | er   |\n| read |      | of   |\n| s    |      | spar |\n|      |      | se   |\n|      |      | memo |\n|      |      | ry   |\n|      |      | read |\n|      |      | s    |\n|      |      | per  |\n|      |      | read |\n|      |      | head |\n+------+------+------+\n| cell | ``10 | Size |\n| \\_si | ``   | of   |\n| ze   |      | each |\n|      |      | memo |\n|      |      | ry   |\n|      |      | cell |\n+------+------+------+\n| nonl | ``'t | If   |\n| inea | anh' | usin |\n| rity | ``   | g    |\n|      |      | 'rnn |\n|      |      | '    |\n|      |      | as   |\n|      |      | ``rn |\n|      |      | n_ty |\n|      |      | pe`` |\n|      |      | ,    |\n|      |      | non- |\n|      |      | line |\n|      |      | arit |\n|      |      | y    |\n|      |      | of   |\n|      |      | the  |\n|      |      | RNNs |\n+------+------+------+\n| gpu\\ | ``-1 | ID   |\n| _id  | ``   | of   |\n|      |      | the  |\n|      |      | GPU, |\n|      |      | -1   |\n|      |      | for  |\n|      |      | CPU  |\n+------+------+------+\n| inde | ``Fa | Whet |\n| pend | lse` | her  |\n| ent\\ | `    | to   |\n| _lin |      | use  |\n| ears |      | inde |\n|      |      | pend |\n|      |      | ent  |\n|      |      | line |\n|      |      | ar   |\n|      |      | unit |\n|      |      | s    |\n|      |      | to   |\n|      |      | deri |\n|      |      | ve   |\n|      |      | inte |\n|      |      | rfac |\n|      |      | e    |\n|      |      | vect |\n|      |      | or   |\n+------+------+------+\n| shar | ``Tr | Whet |\n| e\\_m | ue`` | her  |\n| emor |      | to   |\n| y    |      | shar |\n|      |      | e    |\n|      |      | memo |\n|      |      | ry   |\n|      |      | betw |\n|      |      | een  |\n|      |      | cont |\n|      |      | roll |\n|      |      | er   |\n|      |      | laye |\n|      |      | rs   |\n+------+------+------+\n\nFollowing are the forward pass parameters:\n\n+------+------+------+\n| Argu | Defa | Desc |\n| ment | ult  | ript |\n|      |      | ion  |\n+======+======+======+\n| inpu | -    | The  |\n| t    |      | inpu |\n|      |      | t    |\n|      |      | vect |\n|      |      | or   |\n|      |      | ``(B |\n|      |      | *T*X |\n|      |      | )``  |\n|      |      | or   |\n|      |      | ``(T |\n|      |      | *B*X |\n|      |      | )``  |\n+------+------+------+\n| hidd | ``(N | Hidd |\n| en   | one, | en   |\n|      | None | stat |\n|      | ,Non | es   |\n|      | e)`` | ``(c |\n|      |      | ontr |\n|      |      | olle |\n|      |      | r hi |\n|      |      | dden |\n|      |      | , me |\n|      |      | mory |\n|      |      |  hid |\n|      |      | den, |\n|      |      |  rea |\n|      |      | d ve |\n|      |      | ctor |\n|      |      | s)`` |\n+------+------+------+\n| rese | ``Fa | Whet |\n| t\\_e | lse` | her  |\n| xper | `    | to   |\n| ienc |      | rese |\n| e    |      | t    |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n| pass | ``Tr | Whet |\n| \\_th | ue`` | her  |\n| roug |      | to   |\n| h\\_m |      | pass |\n| emor |      | thro |\n| y    |      | ugh  |\n|      |      | memo |\n|      |      | ry   |\n+------+------+------+\n\nExample usage\n^^^^^^^^^^^^^\n\n.. code:: python\n\n    from dnc import SAM\n\n    rnn = SAM(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      sparse_reads=4,\n      batch_first=True,\n      gpu_id=0\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors) = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nDebugging\n^^^^^^^^^\n\nThe ``debug`` option causes the network to return its memory hidden\nvectors (numpy ``ndarray``\\ s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n.. code:: python\n\n    from dnc import SAM\n\n    rnn = SAM(\n      input_size=64,\n      hidden_size=128,\n      rnn_type='lstm',\n      num_layers=4,\n      nr_cells=100,\n      cell_size=32,\n      read_heads=4,\n      batch_first=True,\n      sparse_reads=4,\n      gpu_id=0,\n      debug=True\n    )\n\n    (controller_hidden, memory, read_vectors) = (None, None, None)\n\n    output, (controller_hidden, memory, read_vectors), debug_memory = \\\n      rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n\nMemory vectors returned by forward pass (``np.ndarray``):\n\n+------+------+------+\n| Key  | Y    | X    |\n|      | axis | axis |\n|      | (dim | (dim |\n|      | ensi | ensi |\n|      | ons) | ons) |\n+======+======+======+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time | \\*   |\n| memo |      | cell |\n| ry'] |      | \\_si |\n| ``   |      | ze   |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| visi |      |  *te |\n| ble_ |      | mpor |\n| memo |      | al\\_ |\n| ry'] |      | read |\n| ``   |      | s+1  |\n|      |      | *    |\n|      |      | nr\\_ |\n|      |      | cell |\n|      |      | s    |\n+------+------+------+\n| ``de | laye | spar |\n| bug_ | r    | se\\_ |\n| memo | \\*   | read |\n| ry[' | time | s+2\\ |\n| read |      | *tem |\n| _pos |      | pora |\n| itio |      | l\\_r |\n| ns'] |      | eads |\n| ``   |      | +1   |\n+------+------+------+\n| ``de | laye | read |\n| bug_ | r    | \\_he |\n| memo | \\*   | ads  |\n| ry[' | time | \\*   |\n| read |      | nr\\_ |\n| _wei |      | cell |\n| ghts |      | s    |\n| ']`` |      |      |\n+------+------+------+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time |      |\n| writ |      |      |\n| e_we |      |      |\n| ight |      |      |\n| s']` |      |      |\n| `    |      |      |\n+------+------+------+\n| ``de | laye | nr\\_ |\n| bug_ | r    | cell |\n| memo | \\*   | s    |\n| ry[' | time |      |\n| usag |      |      |\n| e']` |      |      |\n| `    |      |      |\n+------+------+------+\n\nTasks\n-----\n\nCopy task (with curriculum and generalization)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe copy task, as descibed in the original paper, is included in the\nrepo.\n\nFrom the project root:\n\n.. code:: bash\n\n    python ./tasks/copy_task.py -cuda 0 -optim rmsprop -batch_size 32 -mem_slot 64 # (like original implementation)\n\n    python ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 32 -batch_size 1000 -optim adam -sequence_max_length 8 # (faster convergence)\n\n    For SDNCs:\n    python ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -memory_type sdnc -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 100 -mem_size 10  -read_heads 1 -sparse_reads 10 -batch_size 20 -optim adam -sequence_max_length 10\n\n    and for curriculum learning for SDNCs:\n    python ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -memory_type sdnc -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 100 -mem_size 10  -read_heads 1 -sparse_reads 4 -temporal_reads 4 -batch_size 20 -optim adam -sequence_max_length 4 -curriculum_increment 2 -curriculum_freq 10000\n\nFor the full set of options, see:\n\n::\n\n    python ./tasks/copy_task.py --help\n\nThe copy task can be used to debug memory using\n`Visdom <https://github.com/facebookresearch/visdom>`__.\n\nAdditional step required:\n\n.. code:: bash\n\n    pip install visdom\n    python -m visdom.server\n\nOpen http://localhost:8097/ on your browser, and execute the copy task:\n\n.. code:: bash\n\n    python ./tasks/copy_task.py -cuda 0\n\nThe visdom dashboard shows memory as a heatmap for batch 0 every\n``-summarize_freq`` iteration:\n\n.. figure:: ./docs/dnc-mem-debug.png\n   :alt: Visdom dashboard\n\n   Visdom dashboard\n\nGeneralizing Addition task\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe adding task is as described in `this github pull\nrequest <https://github.com/Mostafa-Samir/DNC-tensorflow/pull/4#issue-199369192>`__.\nThis task - creates one-hot vectors of size ``input_size``, each\nrepresenting a number - feeds a sentence of them to a network - the\noutput of which is added to get the sum of the decoded outputs\n\nThe task first trains the network for sentences of size ~100, and then\ntests if the network genetalizes for lengths ~1000.\n\n.. code:: bash\n\n    python ./tasks/adding_task.py -cuda 0 -lr 0.0001 -rnn_type lstm -memory_type sam -nlayer 1 -nhlayer 1 -nhid 100 -dropout 0 -mem_slot 1000 -mem_size 32 -read_heads 1 -sparse_reads 4 -batch_size 20 -optim rmsprop -input_size 3 -sequence_max_length 100\n\nGeneralizing Argmax task\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe second adding task is similar to the first one, except that the\nnetwork's output at the last time step is expected to be the argmax of\nthe input.\n\n.. code:: bash\n\n    python ./tasks/argmax_task.py -cuda 0 -lr 0.0001 -rnn_type lstm -memory_type dnc -nlayer 1 -nhlayer 1 -nhid 100 -dropout 0 -mem_slot 100 -mem_size 10 -read_heads 2 -batch_size 1 -optim rmsprop -sequence_max_length 15 -input_size 10 -iterations 10000\n\nCode Structure\n--------------\n\n1. DNCs:\n\n-  `dnc/dnc.py <dnc/dnc.py>`__ - Controller code.\n-  `dnc/memory.py <dnc/memory.py>`__ - Memory module.\n\n2. SDNCs:\n\n-  `dnc/sdnc.py <dnc/sdnc.py>`__ - Controller code, inherits\n   `dnc.py <dnc/dnc.py>`__.\n-  `dnc/sparse\\_temporal\\_memory.py <dnc/sparse_temporal_memory.py>`__ -\n   Memory module.\n-  `dnc/flann\\_index.py <dnc/flann_index.py>`__ - Memory index using\n   kNN.\n\n3. SAMs:\n\n-  `dnc/sam.py <dnc/sam.py>`__ - Controller code, inherits\n   `dnc.py <dnc/dnc.py>`__.\n-  `dnc/sparse\\_memory.py <dnc/sparse_memory.py>`__ - Memory module.\n-  `dnc/flann\\_index.py <dnc/flann_index.py>`__ - Memory index using\n   kNN.\n\n4. Tests:\n\n-  All tests are in `./tests <./tests>`__ folder.\n\nGeneral noteworthy stuff\n------------------------\n\n1. SDNCs use the `FLANN approximate nearest neigbhour\n   library <https://www.cs.ubc.ca/research/flann/>`__, with its python\n   binding `pyflann3 <https://github.com/primetang/pyflann>`__ and\n   `FAISS <https://github.com/facebookresearch/faiss>`__.\n\nFLANN can be installed either from pip (automatically as a dependency),\nor from source (e.g. for multithreading via OpenMP):\n\n.. code:: bash\n\n    # install openmp first: e.g. `sudo pacman -S openmp` for Arch.\n    git clone git://github.com/mariusmuja/flann.git\n    cd flann\n    mkdir build\n    cd build\n    cmake ..\n    make -j 4\n    sudo make install\n\nFAISS can be installed using:\n\n.. code:: bash\n\n    conda install faiss-gpu -c pytorch\n\nFAISS is much faster, has a GPU implementation and is interoperable with\npytorch tensors. We try to use FAISS by default, in absence of which we\nfall back to FLANN.\n\n2. ``nan``\\ s in the gradients are common, try with different batch\n   sizes\n\nRepos referred to for creation of this repo:\n\n-  `deepmind/dnc <https://github.com/deepmind/dnc>`__\n-  `ypxie/pytorch-NeuCom <https://github.com/ypxie/pytorch-NeuCom>`__\n-  `jingweiz/pytorch-dnc <https://github.com/jingweiz/pytorch-dnc>`__\n\n.. |Build Status| image:: https://travis-ci.org/ixaxaar/pytorch-dnc.svg?branch=master\n   :target: https://travis-ci.org/ixaxaar/pytorch-dnc\n.. |PyPI version| image:: https://badge.fury.io/py/dnc.svg\n   :target: https://badge.fury.io/py/dnc\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/dnc",
    "keywords": "differentiable neural computer dnc memory network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnc",
    "package_url": "https://pypi.org/project/dnc/",
    "platform": "",
    "project_url": "https://pypi.org/project/dnc/",
    "project_urls": {
      "Homepage": "https://github.com/pypa/dnc"
    },
    "release_url": "https://pypi.org/project/dnc/1.0.1/",
    "requires_dist": [
      "torch",
      "numpy",
      "pyflann3",
      "check-manifest; extra == 'dev'",
      "coverage; extra == 'test'"
    ],
    "requires_python": ">=3",
    "summary": "Differentiable Neural Computer, for Pytorch",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9058590,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20a884e81b807d5048cbbd40516597d96706f0630b613406fee1bf12c90749af",
        "md5": "4994dc3d5995b58f77dd788dbb068669",
        "sha256": "48d324f48827af28487a08c4cd35143541bd3a703f0eb759f32697efbdc74d71"
      },
      "downloads": -1,
      "filename": "dnc-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4994dc3d5995b58f77dd788dbb068669",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 30976,
      "upload_time": "2019-04-05T09:52:07",
      "upload_time_iso_8601": "2019-04-05T09:52:07.988977Z",
      "url": "https://files.pythonhosted.org/packages/20/a8/84e81b807d5048cbbd40516597d96706f0630b613406fee1bf12c90749af/dnc-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "930ea792045a324773d049059950f0ca4fa5887c4dfc6e75805c6b432844aaeb",
        "md5": "2d259bc79260ef234502b9e31e52b972",
        "sha256": "c7304133a40c161acdb79d8583dccd266f55f1a76564e2ed4483ece3605a051a"
      },
      "downloads": -1,
      "filename": "dnc-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2d259bc79260ef234502b9e31e52b972",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 32537,
      "upload_time": "2019-04-05T09:52:09",
      "upload_time_iso_8601": "2019-04-05T09:52:09.946404Z",
      "url": "https://files.pythonhosted.org/packages/93/0e/a792045a324773d049059950f0ca4fa5887c4dfc6e75805c6b432844aaeb/dnc-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}