{
  "info": {
    "author": "FJNR-inc",
    "author_email": "noel.rignon@fjnr.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "<p align=\"center\">\n  <h3 align=\"center\">Django-Dry-Rest-Permissions</h3>\n  <p align=\"center\">Rules based permissions for the Django Rest Framework.</p>\n  <p align=\"center\">\n    <a href=\"https://travis-ci.org/FJNR-inc/dry-rest-permissions\">\n      <img alt=\"Travis (.com)\" src=\"https://img.shields.io/travis/com/FJNR-inc/dry-rest-permissions?style=flat-square\">\n    </a>\n    <a href=\"https://pypi.org/project/dry-rest-permissions/\">\n      <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/dry-rest-permissions?style=flat-square\">\n    </a>\n  </p>\n</p>\n\n\n---\n\n\n## News :loudspeaker:\n\nThis fork it's officially supported by FJNR-inc since June 10th 2020. Multiple peoples tried to take contact with the old mainteners but the community had no news from him in the last two years and the package was completely out of date.\n\nIn this context:\n\n - Fell free to create issues in order to evaluate new needs\n - Fell free to create PR in order to merge your individual enhancement you can have done on your own\n - Fell free to contact us if you want to contribute on this package and maintain it, we think that it's always \n\n## Overview\n\nThis framework is a perfect fit for apps that have many tables and relationships between them. It provides a framework that allows you to define, for each action or groups of actions, what users have permission for based on existing data in your database.\n\n## What does DRY Rest Permissions provide?\n\n1. A framework for defining global and object level permissions per action.\n  1. Support for broadly defining permissions by grouping actions into safe and unsafe types.\n  2. Support for defining only global (table level) permissions or only object (row level) permissions.\n  3. Support for custom list and detail actions.\n2. A serializer field that will return permissions for an object to your client app. This is DRY and works with your existing permission definitions.\n3. A framework for limiting list requests based on permissions\n  1. Support for custom list actions\n\n## Why is DRY Rest Permissions different than other DRF permission packages?\n\nMost other DRF permissions are based on django-guardian. Django-guardian is an explicit approach to permissions that requires data to be saved in tables that explicitly grants permissions for certain actions. For apps that have many ways for a user to be given permission to certain actions, this approach can be very hard to maintain.\n\nFor example: you may have an app which lets you create and modify projects if you are an admin of an association that owns the project. This means that a user's permission will be granted or revoked based on many possibilities including ownership of the project transferring to a different association, the user's admin status in the association changing and the user entering or leaving the association. This would need a lot of triggers that would key off of these actions and explicitly change permissions.\n\nDRY Rest Permissions allows developers to easily describe what gives someone permission using the current data in an implicit way.\n\n## Requirements\n\n-  Python (3.4+)\n-  Django (2.2, 3.0)\n-  Django REST Framework (3.8, 3.9, 3.10, 3.11)\n\n## Installation\n\nInstall using ``pip``â€¦\n\n    $ pip install django-dry-rest-permissions\n\n## Setup\n\nAdd to INSTALLED_APPS\n```python\nINSTALLED_APPS = (\n    ...\n    'dry_rest_permissions',\n)\n```\n## Global vs. Object Permissions\nDRY Rest Permissions allows you to define both global and object level permissions.\n\nGlobal permissions are always checked first and define the ability of a user to take an action on an entire model. For example you can define whether a user has the ability to update any projects from the database.\n\nObject permissions are checked if global permissions pass and define whether a user has the ability to perform a specific action on a single object. These are also known as row level permissions.\nNote: list and create actions are the only standard actions that are only global. There is no such object level permission call because they are whole table actions.\n\n## Read/Write permissions vs. Specific Actions\nDRY Rest Permissions allows you to define permissions for both the standard actions (``list``, ``retrieve``, ``update``, ``destroy`` and ``create``) and custom actions defined using ``@detail_route`` and ``@list_route``.\n\nIf you don't need to define permissions on a granular action level you can generally define read or write permissions for a model. \"Read\" permissions groups together list and retrieve, while \"write\" permissions groups together destroy, update and create. All custom actions that use ``GET`` methods are considered read actions and all other methods are considered write.\n\nSpecific action permissions take precedence over general read or write permissions. For example you can lock down write permissions by always returning ``False`` and open up just update permissions for certain users.\n\nThe ``partial_update`` action is also supported, but by default is grouped with the update permission.\n\n## Add permissions to an API\n\nPermissions can be added to ModelViewSet based APIs.\n\n### Add permission class to a ModelViewSet\n\nFirst you must add ``DRYPermissions`` to the viewset's ``permission_classes``\n```python\nfrom rest_framework import viewsets\nfrom dry_rest_permissions.generics import DRYPermissions\n\n\nclass ProjectViewSet(viewsets.ModelViewSet):\n    permission_classes = (DRYPermissions,)\n    queryset = Project.objects.all()\n    serializer_class = ProjectSerializer\n```\nYou may also use ``DRYGlobalPermissions`` and ``DRYObjectPermissions``, which will only check global or object permissions.\n\nIf you want to define DRYPermissions for only some method types you can override the get_permissions function on the view like this:\n```python\ndef get_permissions(self):\n    if self.request.method == 'GET' or self.request.method == 'PUT':\n        return [DRYPermissions(),]\n    return []\n```\n\n### Define permission logic on the model\nPermissions for DRY Rest permissions are defined on the model so that they can be accessed both from the view for checking and from the serializer for display purposes with the ``DRYPermissionsField``.\n\n**Global permissions** are defined as either ``@staticmethod`` or ``@classmethod`` methods with the format ``has_<action/read/write>_permission``.\n\n**Object permissions** are defined as methods with the format ``has_object_<action/read/write>_permission``.\n\nThe following example shows how you would allow all users to read and create projects, while locking down the ability for any user to perform any other write action. In the example, read global and object permissions return ``True``, which grants permission to those actions. Write, globally returns False, which locks down write actions. However, create is a specific action and therefore takes precedence over write and gives all users the ability to create projects.\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Project(models.Model):\n    owner = models.ForeignKey('User')\n\n    @staticmethod\n    def has_read_permission(request):\n        return True\n\n    def has_object_read_permission(self, request):\n        return True\n\n    @staticmethod\n    def has_write_permission(request):\n        return False\n\n    @staticmethod\n    def has_create_permission(request):\n        return True\n``` \n  Now we will add to this example and allow project owners to update or destroy a project.\n```python\nclass Project(models.Model):\n    owner = models.ForeignKey('User')\n    ...\n\n    @staticmethod\n    def has_write_permission(request):\n        \"\"\"\n        We can remove the has_create_permission because this implicitly grants that permission.\n        \"\"\"\n        return True\n\n    def has_object_write_permission(self, request):\n        return request.user == self.owner\n```\n  If we just wanted to grant update permission, but not destroy we could do this:\n```python\nclass Project(models.Model):\n    owner = models.ForeignKey('User')\n    ...\n\n    @staticmethod\n    def has_write_permission(request):\n        \"\"\"\n        We can remove the has_create_permission because this implicitly grants that permission.\n        \"\"\"\n        return True\n\n    def has_object_write_permission(self, request):\n        return False\n\n    def has_object_update_permission(self, request):\n        return request.user == self.owner\n```\n### Custom action permissions\nIf a custom action, ``publish``, were created using ``@detail_route`` then permissions could be defined like so:\n```python\nclass Project(models.Model):\n    owner = models.ForeignKey('User')\n    ...\n\n    @staticmethod\n    def has_publish_permission(request):\n        return True\n\n    def has_object_publish_permission(self, request):\n        return request.user == self.owner\n``` \n### Helpful decorators\nThree decorators were defined for common permission checks\n``@allow_staff_or_superuser`` - Allows any user that has staff or superuser status to have the permission.\n``@authenticated_users`` - This permission will only be checked for authenticated users. Unauthenticated users will automatically be denied permission.\n``@unauthenticated_users`` - This permission will only be checked for unauthenticated users. Authenticated users will automatically be denied permission.\n\nExample:\n```python\nfrom dry_rest_permissions.generics import allow_staff_or_superuser, authenticated_users\n\n\nclass Project(models.Model):\n    owner = models.ForeignKey('User')\n    ...\n\n    @staticmethod\n    @authenticated_users\n    def has_publish_permission(request):\n        return True\n\n    @allow_staff_or_superuser\n    def has_object_publish_permission(self, request):\n        return request.user == self.owner\n```\n## Returning Permissions to the Client App\nYou often need to know all of the possible permissions that are available to the current user from within your client app so that you can show certain create, edit and destroy options. Sometimes you need to know the permissions on the client app so that you can display messages to them. ``DRYPermissionsField`` allows you to return these permissions in a serializer without having to redefine your permission logic. DRY!\n```python\nfrom dry_rest_permissions.generics import DRYPermissionsField\n\n\nclass ProjectSerializer(serializers.ModelSerializer):\n    permissions = DRYPermissionsField()\n\n    class Meta:\n        model = Project\n        fields = ('id', 'owner', 'permissions')\n```  \nThis response object will look like this:\n```json\n{\n    \"id\": 1,\n    \"owner\": 100,\n    \"permissions\": {\n        \"read\": true,\n        \"write\": false,\n        \"create\": true,\n        \"update\": true\n    }\n}\n```\n#### Definition\n``DRYPermissionsField(actions=None, additional_actions=None, global_only=False, object_only=False, **kwargs):``\n\n``actions`` - This can be passed a list in order to limit the actions that are looked up.\n\n``additional_actions`` - If you add custom actions then you can have DRYPermissionsField look them up by adding an array of the actions as so ``permissions = DRYPermissionsField(additional_actions=['publish'])``.\n\n``global_only`` - If set to ``True`` then it will only look up global permissions.\n\n``object_only`` - If set to ``True`` then it will only look up object permissions.\n\nThis field only returns what is defined on the model. By default it retrieves all default action types that are defined.\n\nA serializer with this field MUST have the request accessible via the serializer's context. By default DRF passes the request to all serializers that is creates. However, if you create a serializer yourself you will have to add the request manually like this:\n```python\nserializer = TestSerializer(data=request.data, context={'request': request})\n```\n\n## Filtering lists by action type\nMany times it is not enough to say that a user does not have permission to view a list of items. Instead you want a user to only be able to view a partial list of items. In this case DRY Rest Permissions built on the filter concept using ``DRYPermissionFiltersBase`` to apply permissions to specific actions.\n\nIf you want to apply the same permissions to all list requests (the standard one and custom list actions) you could do the following:\n```python\nfrom django.db.models import Q\nfrom rest_framework import viewsets\nfrom dry_rest_permissions.generics import DRYPermissionFiltersBase\n\n\nclass ProjectFilterBackend(DRYPermissionFiltersBase):\n\n    def filter_list_queryset(self, request, queryset, view):\n        \"\"\"\n        Limits all list requests to only be seen by the owners or creators.\n        \"\"\"\n        return queryset.filter(Q(owner=request.user) | Q(creator=request.user))\n\n\nclass ProjectViewSet(viewsets.ModelViewSet):\n    serializer_class = ProjectSerializer\n    queryset = Project.objects.all()\n    filter_backends = (ProjectFilterBackend,)\n```\nIf you had a custom list action called ``owned`` that returned just the owned projects you could do this:\n```python\nfrom django.db.models import Q\nfrom rest_framework import viewsets\nfrom dry_rest_permissions.generics import DRYPermissionFiltersBase\n\n\nclass ProjectFilterBackend(DRYPermissionFiltersBase):\n    action_routing = True\n\n    def filter_list_queryset(self, request, queryset, view):\n        \"\"\"\n        Limits all list requests to only be seen by the owners or creators.\n        \"\"\"\n        return queryset.filter(Q(owner=request.user) | Q(creator=request.user))\n\n    def filter_owned_queryset(self, request, queryset, view):\n        return queryset.filter(owner=request.user)\n\n\nclass ProjectViewSet(viewsets.ModelViewSet):\n    serializer_class = ProjectSerializer\n    queryset = Project.objects.all()\n    filter_backends = (ProjectFilterBackend,)\n```\n\n\n# History\n\n## 1.0.0 (2020-06-10)\n\n* First release on PyPI.\n* Forked from https://github.com/dbkaplan/dry-rest-permissions on the same day\n* Added support for Django 2.2\n* Added support for Django 3.0\n* Remove support for all Django version < 2.2\n* Added support for Django-Rest-Framework 3.8\n* Added support for Django-Rest-Framework 3.9\n* Added support for Django-Rest-Framework 3.10\n* Added support for Django-Rest-Framework 3.11\n* Remove support for all Django-Rest-Framework version < 3.8\n* Added support for Python 3.7\n* Added support for Python 3.8\n* Remove support for Python 2.7\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FJNR-inc/dry-rest-permissions",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dry-rest-permissions",
    "package_url": "https://pypi.org/project/django-dry-rest-permissions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dry-rest-permissions/",
    "project_urls": {
      "Homepage": "https://github.com/FJNR-inc/dry-rest-permissions"
    },
    "release_url": "https://pypi.org/project/django-dry-rest-permissions/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Rules based permissions for the Django Rest Framework",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10880445,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd16fd51be1dbab5a1b1bd8f3c09d287d1112dfec40e0412db0b2ae2cebc1e81",
        "md5": "12d370d1867921bc726cc4d5fe64d628",
        "sha256": "9c20937e8f861a98e1db8c34f286746ae8494d251ccee00d29ed58eedb0ce5b8"
      },
      "downloads": -1,
      "filename": "django_dry_rest_permissions-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "12d370d1867921bc726cc4d5fe64d628",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 10432,
      "upload_time": "2020-06-10T22:19:20",
      "upload_time_iso_8601": "2020-06-10T22:19:20.629644Z",
      "url": "https://files.pythonhosted.org/packages/cd/16/fd51be1dbab5a1b1bd8f3c09d287d1112dfec40e0412db0b2ae2cebc1e81/django_dry_rest_permissions-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bc4028dc607d7b4499995722873dc5b37fa0a654eed125ddcda17ccc60220c0",
        "md5": "85a7df175705cfb97a0a024fb18dd333",
        "sha256": "cbc4764c3311da82d79dc3d665eeb0f5f8e6d0dfa5a6e2c6c2be4dd9097dcd7d"
      },
      "downloads": -1,
      "filename": "django-dry-rest-permissions-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "85a7df175705cfb97a0a024fb18dd333",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13864,
      "upload_time": "2020-06-10T22:19:21",
      "upload_time_iso_8601": "2020-06-10T22:19:21.730070Z",
      "url": "https://files.pythonhosted.org/packages/1b/c4/028dc607d7b4499995722873dc5b37fa0a654eed125ddcda17ccc60220c0/django-dry-rest-permissions-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}