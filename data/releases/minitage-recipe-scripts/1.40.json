{
  "info": {
    "author": "Mathieu Pasquet",
    "author_email": "kiorky@cryptelium.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Buildout",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "******************************************************************************\nRecipe for compiling and installing software with or without minitage\n******************************************************************************\n\n.. contents::\n\n=======================\nIntroduction\n=======================\n\nThis is a collection of recipe which can be use inside or outside a minitage environment.\nWhat is interresting in using them in minitage is that you ll have all your system dependencies in\nthe build environment automaticly.\n\nThe egg has those entry point:\n    - *cmmi*: install configure/make/make install softwares\n    - *fetch*: fetch something, somewhere, with git, http, frp, static, hg, svn or bzr.\n    - *egg*: install python eggs / packages 'setuptoolisables'\n    - *printer*: print or dump to a file all versions needed to achieve eggs\n      requirements (versions.cfg made easy)\n    - *scripts*: install scripts from an egg and install egg dependencies if they\n      are not already in the cache\n    - *wsgi*: Make a Python paste configuration file eatable by mod_wsgi with\n      all the eggs dependencies you need.\n\nThe reasons why i have rewrite yet another buildout recipes builder are:\n    - Support for downloading stuff\n    - Do not rely on easy_install dependency system\n    - Support on the fly patchs for eggs and other distribution.\n    - Support multiple hooks at each stage of the build system.\n    - Support for distutils\n    - Robust offline mode\n    - We like pypi, but offer a mode to scan for eggs without need to check\n      the index,\n    - Support malformed or not indexed distributions.\n      In other terms, we provide an url, and the recipe builds it, that's all.\n    - All recipes must support automaticly minitage dependencies and rpath linking.\n\nYou can browse the code on minitage's following resources:\n\n    - http://git.minitage.org/git/minitage/eggs/minitage.recipe/\n    - http://www.minitage.org/trac/browser/minitage/eggs/minitage.recipe\n\nYou can migrate your buldouts without any effort with buildout.minitagificator:\n\n    * http://pypi.python.org/pypi/buildout.minitagificator\n\n\n\n\n===============================================\nminitage.recipe.scripts\n===============================================\n\n\nAbstract\n-----------------\n    - This recipe intends to install eggs and python software and on top of installed stuff, generating scripts and envrionment files.\n    - This recipe inherit from minitage;recipe:egg.\n    - Its heavilly inspired by zc.recipe.eggs* and try to completly replace it whereas be API compatbile.\n    - You can use it in conjunction with the buildout.minitagificator extension which monkey patch zc.buildout to use minitage recipes.\n    - What we can do that zc.recipe.egg wouldnt do, either at all or not in the way we want to:\n\n        * All scripts support initialisation code\n        * The 'scripts' egg metadata is also handled\n    - You can use it as you would use minitage.recipe:egg, use patch facility and etc.\n    - Ths recipe is also declared under those entry points:\n\n        * minitage.recipe:eggs\n        * minitage.recipe:script\n\nSpecific options\n-----------------\n\n    * All the shared options and the options from minitage.recipe:egg +\n    * scripts\n\n        - Scripts to generate, if empty, generate scripts for all the working set.\n        - If your egg have an old 'scripts' metadata, and old scripts where you want wrappers to be generated, just add the egg name to the scripts entry.\n        - If you want to rename a script, just enter something like entrypoint|scriptname=NewName::\n\n            s=NewName\n\n    * zap\n      If you do not want to a script, just enter a line separated list of not wanted scripts\n\n    * entry-points\n        A list of entry-point identifiers of the form:::\n\n            name=module:attrs\n\n        where name is a script name, module is a dotted name resolving to a module name, and attrs is a dotted name resolving to a callable object within a module.\n        This option is useful when working with distributions that don't declare entry points, such as distributions not written to work with setuptools.\n\n    * interpreter\n        The name of a script to generate that allow access to the Python interpreter with the PYTHONPATH set with all the working set entries.\n    * dependent-scripts\n        compatibility option, has no effect\n    * arguments\n        Specify some arguments to be passed to entry points as Python source.\n    * initialization\n        Python code to run prior to call the entry point\n\n\nDetailled documentation\n-------------------------\n\nLet's create a buildout configuration file::\n\n    >>> rmdir(tempdir)\n    >>> mkdir(tempdir)\n    >>> cd(tempdir)\n    >>> a = [mkdir(d) for d in ('eggs', 'develop-eggs', 'bin', 'src')]\n    >>> install_develop_eggs(['minitage.recipe.scripts'])\n    >>> install_eggs_from_pathes(['zc.buildout'], sys.path)\n    >>> touch('buildout.cfg')\n    >>> sh('buildout -o bootstrap')\n    buildout -o bootstrap...\n    >>> index_url = start_server(os.path.sep.join(tempdir))\n\nInitializing test env.\n+++++++++++++++++++++++\n::\n\n    >>> if os.path.exists('foo'): rmdir(dl)\n    >>> mkdir('dl')\n    >>> if os.path.exists('foo'): rmdir(foo)\n    >>> mkdir('foo')\n    >>> mkdir('foo/src/toto')\n    >>> touch('foo/setup.py', data=\"\"\"\n    ... from setuptools import setup, find_packages\n    ... setup(name='foo', version='1.0',\n    ...     packages=find_packages('src'),\n    ...     package_dir = {'': 'src'},\n    ...     include_package_data=True,\n    ...     scripts=['src/toto/toto.py'],\n    ...     entry_points={'console_scripts': ['s=toto.toto:f']},\n    ...     )\n    ... \"\"\")\n    >>> touch('foo/src/toto/__init__.py')\n    >>> touch('foo/src/toto/toto.py', data=\"\"\"\n    ... def f():\n    ...     print \"foo\"\n    ... if __name__ == '__main__' :\n    ...     print 'called'\n    ...\n    ... \"\"\")\n    >>> noecho = [os.remove(d) for d in os.listdir('.') if '.tar.gz' in d]\n    >>> os.chdir('foo')\n    >>> sh('python setup.py sdist')\n    p...\n    >>> noecho = [shutil.copy(os.path.join('dist', d), os.path.join('..', d)) for d in os.listdir('dist')]\n    >>> os.chdir('..')\n\nGenerating all scripts\n+++++++++++++++++++++++++++\nThus by not specifying any scripts entry in the buildout part.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> noecho = [remove(os.path.join('eggs', egg)) for egg in os.listdir('eggs') if 'foo' in egg]\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Got foo 1.0.\n    minitage.recipe: Picked: foo = 1.0\n    minitage.recipe: All egg dependencies seem to be installed!\n    minitage.recipe: Generated scripts: 's', 'toto.py'...\n\n\nLook at what have been generated.\n\n    >>> cat('bin', 'toto.py')\n    #!...\n    # ! GENERATED BY minitage.recipe !\n    import os\n    import sys\n    import subprocess...\n    sys.path[0:0] = ['/tmp/buildout.test/eggs/foo-1.0-py....egg' ]...\n    # EXEC ORGINAL CODE WITHOUT SHEBANG\n    __doc__  = 'I am generated by minitage.recipe.script recipe'...\n    os.environ['PYTHONPATH'] = ':'.join(sys.path + os.environ.get('PYTHONPATH', '').split(':'))\n    sys.argv.pop(0)\n    sys.exit(\n        subprocess.Popen(\n            [sys.executable, '/tmp/buildout.test/eggs/foo-1.0-py....egg/EGG-INFO/scripts/toto.py']+sys.argv,\n            env=os.environ\n        ).wait()\n    )...\n    >>> cat('bin', 's')\n    #!...\n    #!!! #GENERATED VIA MINITAGE.recipe !!!...\n    import sys...\n    sys.path[0:0] = [ '/tmp/buildout.test/eggs/foo-1.0-py....egg' ]...\n    import toto.toto...\n    if __name__ == '__main__':\n        toto.toto.f()...\n\n\nSelecting scripts to install\n+++++++++++++++++++++++++++++++\nInstalling only s.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... scripts =\n    ...     s\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Generated scripts: 's'....\n\nInstalling only toto.py.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... scripts =\n    ...     toto.py\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Generated scripts: 'toto.py'....\n\n.. desactivated because caused more harm than good... too much scripts no filtered\n.. Installing scripts from the foo distribution.\n..\n..     >>> data = \"\"\"\n..     ... [buildout]\n..     ... download-cache=${buildout:directory}/dl\n..     ... parts = part\n..     ... [part]\n..     ... recipe=minitage.recipe.scripts\n..     ... find-links=%(index)s\n..     ... scripts =\n..     ...     foo\n..     ... eggs=foo\n..     ... \"\"\"%{'index': index_url}\n..     >>> touch('buildout.cfg', data=data)\n..     >>> sh('bin/buildout -vvvvv install')\n..     b...\n..     minitage.recipe: Generated scripts: 's', 'toto.py'....\n\nDeclaring entry-points\n+++++++++++++++++++++++\nWe ll add an entry point 't' to be generated.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... entry-points=t=toto.toto:f\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Generated scripts: 't'....\n\nAdding initialization code\n++++++++++++++++++++++++++++\nWhat about adding environment variables for gis env.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... entry-points=t=toto.toto:f\n    ... eggs=foo\n    ... initialization = import os;os.environ.set('GDAL', 'TRUE')\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n\n    >>> \"import os;os.environ.set('GDAL', 'TRUE')\" in open(os.path.join('bin', 't')).read()\n    True\n\nAdding arguments\n++++++++++++++++++\nWhat about adding arguments to our launchers.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... eggs = foo\n    ... entry-points=t=toto.toto:f\n    ... arguments = ['a', 'b']\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n\n    >>> \"toto.toto.f(['a', 'b'])\" in open(os.path.join('bin', 't')).read()\n    True\n\nGenerating a python interpreter\n++++++++++++++++++++++++++++++++++\nHere is how you can generate a specific python interpreter will all the environement of the working set.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... interpreter = mypy\n    ... arguments = ['a', 'b']\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Generated scripts: 'mypy'....\n\n    >>> cat('bin', 'mypy')\n    #!...\n    #!!! #GENERATED VIA MINITAGE.recipe !!!...\n    sys.path[0:0] = [ '/tmp/buildout.test/eggs/foo-1.0-py....egg' ]...\n    if _interactive:\n        import code\n        code.interact(banner=\"\", local=globals())...\n\nGenerating an envrionment file\n++++++++++++++++++++++++++++++++++\nHere is how you can generate a specific envrionment file that you can source from to get the PYTHONPATH populated with eggs that you have configured.\n\n    >>> data = \"\"\"\n    ... [buildout]\n    ... download-cache=${buildout:directory}/dl\n    ... parts = part\n    ... [part]\n    ... recipe=minitage.recipe.scripts\n    ... find-links=%(index)s\n    ... env-file = mypy\n    ... eggs=foo\n    ... \"\"\"%{'index': index_url}\n    >>> touch('buildout.cfg', data=data)\n    >>> sh('bin/buildout -vvvvv install')\n    b...\n    minitage.recipe: Generated scripts: '/tmp/buildout.test/bin/mypy'....\n\n    >>> cat('bin', 'mypy')\n    #!/usr/bin/env sh\n    <BLANKLINE>\n    PYTHONPATH=\"/tmp/buildout.test/eggs/foo-1.0-py....egg:$PYTHONPATH\"\n    export PYTHONPATH\n    <BLANKLINE>\n    <BLANKLINE>\n\n\n\n=======================\nCHANGELOG\n=======================\n\n\n1.40\n-----\n    \n    - fix a special case where all scripts were filtered out\n\n1.39\n--------\n\n    -   do not preerve PYTHONPATH on env.file generation\n\n1.37\n-------\n\n    - Decorator helper\n\n\n1.36\n-----\n\n    - fix develop link\n\n1.35\n---------\n\n    - splitted out from minitage.recipe",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://cheeseshop.python.org/pypi/minitage.recipe.scripts",
    "keywords": "development buildout recipe",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "minitage.recipe.scripts",
    "package_url": "https://pypi.org/project/minitage.recipe.scripts/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/minitage.recipe.scripts/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://cheeseshop.python.org/pypi/minitage.recipe.scripts"
    },
    "release_url": "https://pypi.org/project/minitage.recipe.scripts/1.40/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "zc.buildout recipes to compile and install software or python packages and generate scripts or configuration files.",
    "version": "1.40",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 794820,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c2c3f5de76438b1b214e159d2aee1455fc16b8e12d753fd5590078c43234e25",
        "md5": "d13d414e4c5255b57418c7df94056d63",
        "sha256": "cfb0ba8a9322ccf800b40ada38928d846e2e5cee7dceb9f048e115c492d7da1b"
      },
      "downloads": -1,
      "filename": "minitage.recipe.scripts-1.40.zip",
      "has_sig": false,
      "md5_digest": "d13d414e4c5255b57418c7df94056d63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27893,
      "upload_time": "2009-10-28T09:01:43",
      "upload_time_iso_8601": "2009-10-28T09:01:43.554743Z",
      "url": "https://files.pythonhosted.org/packages/6c/2c/3f5de76438b1b214e159d2aee1455fc16b8e12d753fd5590078c43234e25/minitage.recipe.scripts-1.40.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}