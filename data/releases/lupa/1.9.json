{
  "info": {
    "author": "Stefan Behnel",
    "author_email": "stefan_ml@behnel.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Cython",
      "Programming Language :: Other Scripting Engines",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "Lupa\n====\n\n.. image:: logo/logo-220x200.png\n\nLupa integrates the runtimes of Lua_ or LuaJIT2_ into CPython.\nIt is a partial rewrite of LunaticPython_ in Cython_ with some\nadditional features such as proper coroutine support.\n\n.. _Lua: http://lua.org/\n.. _LuaJIT2: http://luajit.org/\n.. _LunaticPython: http://labix.org/lunatic-python\n.. _Cython: http://cython.org\n\nFor questions not answered here, please contact the `Lupa mailing list`_.\n\n.. _`Lupa mailing list`: http://www.freelists.org/list/lupa-dev\n\n.. contents:: :local:\n\n\nMajor features\n--------------\n\n* separate Lua runtime states through a ``LuaRuntime`` class\n\n* Python coroutine wrapper for Lua coroutines\n\n* iteration support for Python objects in Lua and Lua objects in\n  Python\n\n* proper encoding and decoding of strings (configurable per runtime,\n  UTF-8 by default)\n\n* frees the GIL and supports threading in separate runtimes when\n  calling into Lua\n\n* tested with Python 2.6/3.2 and later\n\n* written for LuaJIT2 (tested with LuaJIT 2.0.2), but also works\n  with the normal Lua interpreter (5.1 and 5.2)\n\n* easy to hack on and extend as it is written in Cython, not C\n\n\nWhy the name?\n-------------\n\nIn Latin, \"lupa\" is a female wolf, as elegant and wild as it sounds.\nIf you don't like this kind of straight forward allegory to an\nendangered species, you may also happily assume it's just an\namalgamation of the phonetic sounds that start the words \"Lua\" and\n\"Python\", two from each to keep the balance.\n\n\nWhy use it?\n-----------\n\nIt complements Python very well.  Lua is a language as dynamic as\nPython, but LuaJIT compiles it to very fast machine code, sometimes\nfaster than many statically compiled languages for computational code.\nThe language runtime is very small and carefully designed for\nembedding.  The complete binary module of Lupa, including a statically\nlinked LuaJIT2 runtime, only weighs some 700KB on a 64 bit machine.\nWith standard Lua 5.1, it's less than 400KB.\n\nHowever, the Lua ecosystem lacks many of the batteries that Python\nreadily includes, either directly in its standard library or as third\nparty packages. This makes real-world Lua applications harder to write\nthan equivalent Python applications. Lua is therefore not commonly\nused as primary language for large applications, but it makes for a\nfast, high-level and resource-friendly backup language inside of\nPython when raw speed is required and the edit-compile-run cycle of\nbinary extension modules is too heavy and too static for agile\ndevelopment or hot-deployment.\n\nLupa is a very fast and thin wrapper around Lua or LuaJIT.  It makes it\neasy to write dynamic Lua code that accompanies dynamic Python code by\nswitching between the two languages at runtime, based on the tradeoff\nbetween simplicity and speed.\n\n\nExamples\n--------\n\n..\n      ## doctest helpers:\n      >>> try: _ = sorted\n      ... except NameError:\n      ...     def sorted(seq):\n      ...         l = list(seq)\n      ...         l.sort()\n      ...         return l\n\n.. code:: python\n\n      >>> import lupa\n      >>> from lupa import LuaRuntime\n      >>> lua = LuaRuntime(unpack_returned_tuples=True)\n\n      >>> lua.eval('1+1')\n      2\n\n      >>> lua_func = lua.eval('function(f, n) return f(n) end')\n\n      >>> def py_add1(n): return n+1\n      >>> lua_func(py_add1, 2)\n      3\n\n      >>> lua.eval('python.eval(\" 2 ** 2 \")') == 4\n      True\n      >>> lua.eval('python.builtins.str(4)') == '4'\n      True\n\nThe function ``lua_type(obj)`` can be used to find out the type of a\nwrapped Lua object in Python code, as provided by Lua's ``type()``\nfunction:\n\n.. code:: python\n\n      >>> lupa.lua_type(lua_func)\n      'function'\n      >>> lupa.lua_type(lua.eval('{}'))\n      'table'\n\nTo help in distinguishing between wrapped Lua objects and normal\nPython objects, it returns ``None`` for the latter:\n\n.. code:: python\n\n      >>> lupa.lua_type(123) is None\n      True\n      >>> lupa.lua_type('abc') is None\n      True\n      >>> lupa.lua_type({}) is None\n      True\n\nNote the flag ``unpack_returned_tuples=True`` that is passed to create\nthe Lua runtime.  It is new in Lupa 0.21 and changes the behaviour of\ntuples that get returned by Python functions.  With this flag, they\nexplode into separate Lua values:\n\n.. code:: python\n\n      >>> lua.execute('a,b,c = python.eval(\"(1,2)\")')\n      >>> g = lua.globals()\n      >>> g.a\n      1\n      >>> g.b\n      2\n      >>> g.c is None\n      True\n\nWhen set to False, functions that return a tuple pass it through to the\nLua code:\n\n.. code:: python\n\n      >>> non_explode_lua = lupa.LuaRuntime(unpack_returned_tuples=False)\n      >>> non_explode_lua.execute('a,b,c = python.eval(\"(1,2)\")')\n      >>> g = non_explode_lua.globals()\n      >>> g.a\n      (1, 2)\n      >>> g.b is None\n      True\n      >>> g.c is None\n      True\n\nSince the default behaviour (to not explode tuples) might change in a\nlater version of Lupa, it is best to always pass this flag explicitly.\n\n\nPython objects in Lua\n---------------------\n\nPython objects are either converted when passed into Lua (e.g.\nnumbers and strings) or passed as wrapped object references.\n\n.. code:: python\n\n      >>> wrapped_type = lua.globals().type     # Lua's own type() function\n      >>> wrapped_type(1) == 'number'\n      True\n      >>> wrapped_type('abc') == 'string'\n      True\n\nWrapped Lua objects get unwrapped when they are passed back into Lua,\nand arbitrary Python objects get wrapped in different ways:\n\n.. code:: python\n\n      >>> wrapped_type(wrapped_type) == 'function'  # unwrapped Lua function\n      True\n      >>> wrapped_type(len) == 'userdata'       # wrapped Python function\n      True\n      >>> wrapped_type([]) == 'userdata'        # wrapped Python object\n      True\n\nLua supports two main protocols on objects: calling and indexing.  It\ndoes not distinguish between attribute access and item access like\nPython does, so the Lua operations ``obj[x]`` and ``obj.x`` both map\nto indexing.  To decide which Python protocol to use for Lua wrapped\nobjects, Lupa employs a simple heuristic.\n\nPratically all Python objects allow attribute access, so if the object\nalso has a ``__getitem__`` method, it is preferred when turning it\ninto an indexable Lua object.  Otherwise, it becomes a simple object\nthat uses attribute access for indexing from inside Lua.\n\nObviously, this heuristic will fail to provide the required behaviour\nin many cases, e.g. when attribute access is required to an object\nthat happens to support item access.  To be explicit about the\nprotocol that should be used, Lupa provides the helper functions\n``as_attrgetter()`` and ``as_itemgetter()`` that restrict the view on\nan object to a certain protocol, both from Python and from inside\nLua:\n\n.. code:: python\n\n      >>> lua_func = lua.eval('function(obj) return obj[\"get\"] end')\n      >>> d = {'get' : 'value'}\n\n      >>> value = lua_func(d)\n      >>> value == d['get'] == 'value'\n      True\n\n      >>> value = lua_func( lupa.as_itemgetter(d) )\n      >>> value == d['get'] == 'value'\n      True\n\n      >>> dict_get = lua_func( lupa.as_attrgetter(d) )\n      >>> dict_get == d.get\n      True\n      >>> dict_get('get') == d.get('get') == 'value'\n      True\n\n      >>> lua_func = lua.eval(\n      ...     'function(obj) return python.as_attrgetter(obj)[\"get\"] end')\n      >>> dict_get = lua_func(d)\n      >>> dict_get('get') == d.get('get') == 'value'\n      True\n\nNote that unlike Lua function objects, callable Python objects support\nindexing in Lua:\n\n.. code:: python\n\n      >>> def py_func(): pass\n      >>> py_func.ATTR = 2\n\n      >>> lua_func = lua.eval('function(obj) return obj.ATTR end')\n      >>> lua_func(py_func)\n      2\n      >>> lua_func = lua.eval(\n      ...     'function(obj) return python.as_attrgetter(obj).ATTR end')\n      >>> lua_func(py_func)\n      2\n      >>> lua_func = lua.eval(\n      ...     'function(obj) return python.as_attrgetter(obj)[\"ATTR\"] end')\n      >>> lua_func(py_func)\n      2\n\n\nIteration in Lua\n----------------\n\nIteration over Python objects from Lua's for-loop is fully supported.\nHowever, Python iterables need to be converted using one of the\nutility functions which are described here.  This is similar to the\nfunctions like ``pairs()`` in Lua.\n\nTo iterate over a plain Python iterable, use the ``python.iter()``\nfunction.  For example, you can manually copy a Python list into a Lua\ntable like this:\n\n.. code:: python\n\n      >>> lua_copy = lua.eval('''\n      ...     function(L)\n      ...         local t, i = {}, 1\n      ...         for item in python.iter(L) do\n      ...             t[i] = item\n      ...             i = i + 1\n      ...         end\n      ...         return t\n      ...     end\n      ... ''')\n\n      >>> table = lua_copy([1,2,3,4])\n      >>> len(table)\n      4\n      >>> table[1]   # Lua indexing\n      1\n\nPython's ``enumerate()`` function is also supported, so the above\ncould be simplified to:\n\n.. code:: python\n\n      >>> lua_copy = lua.eval('''\n      ...     function(L)\n      ...         local t = {}\n      ...         for index, item in python.enumerate(L) do\n      ...             t[ index+1 ] = item\n      ...         end\n      ...         return t\n      ...     end\n      ... ''')\n\n      >>> table = lua_copy([1,2,3,4])\n      >>> len(table)\n      4\n      >>> table[1]   # Lua indexing\n      1\n\nFor iterators that return tuples, such as ``dict.iteritems()``, it is\nconvenient to use the special ``python.iterex()`` function that\nautomatically explodes the tuple items into separate Lua arguments:\n\n.. code:: python\n\n      >>> lua_copy = lua.eval('''\n      ...     function(d)\n      ...         local t = {}\n      ...         for key, value in python.iterex(d.items()) do\n      ...             t[key] = value\n      ...         end\n      ...         return t\n      ...     end\n      ... ''')\n\n      >>> d = dict(a=1, b=2, c=3)\n      >>> table = lua_copy( lupa.as_attrgetter(d) )\n      >>> table['b']\n      2\n\nNote that accessing the ``d.items`` method from Lua requires passing\nthe dict as ``attrgetter``.  Otherwise, attribute access in Lua would\nuse the ``getitem`` protocol of Python dicts and look up ``d['items']``\ninstead.\n\n\nNone vs. nil\n------------\n\nWhile ``None`` in Python and ``nil`` in Lua differ in their semantics, they\nusually just mean the same thing: no value.  Lupa therefore tries to map one\ndirectly to the other whenever possible:\n\n.. code:: python\n\n      >>> lua.eval('nil') is None\n      True\n      >>> is_nil = lua.eval('function(x) return x == nil end')\n      >>> is_nil(None)\n      True\n\nThe only place where this cannot work is during iteration, because Lua\nconsiders a ``nil`` value the termination marker of iterators.  Therefore,\nLupa special cases ``None`` values here and replaces them by a constant\n``python.none`` instead of returning ``nil``:\n\n.. code:: python\n\n      >>> _ = lua.require(\"table\")\n      >>> func = lua.eval('''\n      ...     function(items)\n      ...         local t = {}\n      ...         for value in python.iter(items) do\n      ...             table.insert(t, value == python.none)\n      ...         end\n      ...         return t\n      ...     end\n      ... ''')\n\n      >>> items = [1, None ,2]\n      >>> list(func(items).values())\n      [False, True, False]\n\nLupa avoids this value escaping whenever it's obviously not necessary.\nThus, when unpacking tuples during iteration, only the first value will\nbe subject to ``python.none`` replacement, as Lua does not look at the\nother items for loop termination anymore.  And on ``enumerate()``\niteration, the first value is known to be always a number and never None,\nso no replacement is needed.\n\n.. code:: python\n\n      >>> func = lua.eval('''\n      ...     function(items)\n      ...         for a, b, c, d in python.iterex(items) do\n      ...             return {a == python.none, a == nil,   -->  a == python.none\n      ...                     b == python.none, b == nil,   -->  b == nil\n      ...                     c == python.none, c == nil,   -->  c == nil\n      ...                     d == python.none, d == nil}   -->  d == nil ...\n      ...         end\n      ...     end\n      ... ''')\n\n      >>> items = [(None, None, None, None)]\n      >>> list(func(items).values())\n      [True, False, False, True, False, True, False, True]\n\n      >>> items = [(None, None)]   # note: no values for c/d => nil in Lua\n      >>> list(func(items).values())\n      [True, False, False, True, False, True, False, True]\n\n\nNote that this behaviour changed in Lupa 1.0.  Previously, the ``python.none``\nreplacement was done in more places, which made it not always very predictable.\n\n\nLua Tables\n----------\n\nLua tables mimic Python's mapping protocol.  For the special case of\narray tables, Lua automatically inserts integer indices as keys into\nthe table.  Therefore, indexing starts from 1 as in Lua instead of 0\nas in Python.  For the same reason, negative indexing does not work.\nIt is best to think of Lua tables as mappings rather than arrays, even\nfor plain array tables.\n\n.. code:: python\n\n      >>> table = lua.eval('{10,20,30,40}')\n      >>> table[1]\n      10\n      >>> table[4]\n      40\n      >>> list(table)\n      [1, 2, 3, 4]\n      >>> list(table.values())\n      [10, 20, 30, 40]\n      >>> len(table)\n      4\n\n      >>> mapping = lua.eval('{ [1] = -1 }')\n      >>> list(mapping)\n      [1]\n\n      >>> mapping = lua.eval('{ [20] = -20; [3] = -3 }')\n      >>> mapping[20]\n      -20\n      >>> mapping[3]\n      -3\n      >>> sorted(mapping.values())\n      [-20, -3]\n      >>> sorted(mapping.items())\n      [(3, -3), (20, -20)]\n\n      >>> mapping[-3] = 3     # -3 used as key, not index!\n      >>> mapping[-3]\n      3\n      >>> sorted(mapping)\n      [-3, 3, 20]\n      >>> sorted(mapping.items())\n      [(-3, 3), (3, -3), (20, -20)]\n\nTo simplify the table creation from Python, the ``LuaRuntime`` comes with\na helper method that creates a Lua table from Python arguments:\n\n.. code:: python\n\n      >>> t = lua.table(1, 2, 3, 4)\n      >>> lupa.lua_type(t)\n      'table'\n      >>> list(t)\n      [1, 2, 3, 4]\n\n      >>> t = lua.table(1, 2, 3, 4, a=1, b=2)\n      >>> t[3]\n      3\n      >>> t['b']\n      2\n\nA second helper method, ``.table_from()``, is new in Lupa 1.1 and accepts\nany number of mappings and sequences/iterables as arguments.  It collects\nall values and key-value pairs and builds a single Lua table from them.\nAny keys that appear in multiple mappings get overwritten with their last\nvalue (going from left to right).\n\n.. code:: python\n\n      >>> t = lua.table_from([1, 2, 3], {'a': 1, 'b': 2}, (4, 5), {'b': 42})\n      >>> t['b']\n      42\n      >>> t[5]\n      5\n\nA lookup of non-existing keys or indices returns None (actually ``nil``\ninside of Lua).  A lookup is therefore more similar to the ``.get()``\nmethod of Python dicts than to a mapping lookup in Python.\n\n.. code:: python\n\n      >>> table[1000000] is None\n      True\n      >>> table['no such key'] is None\n      True\n      >>> mapping['no such key'] is None\n      True\n\nNote that ``len()`` does the right thing for array tables but does not\nwork on mappings:\n\n.. code:: python\n\n      >>> len(table)\n      4\n      >>> len(mapping)\n      0\n\nThis is because ``len()`` is based on the ``#`` (length) operator in\nLua and because of the way Lua defines the length of a table.\nRemember that unset table indices always return ``nil``, including\nindices outside of the table size.  Thus, Lua basically looks for an\nindex that returns ``nil`` and returns the index before that.  This\nworks well for array tables that do not contain ``nil`` values, gives\nbarely predictable results for tables with 'holes' and does not work\nat all for mapping tables.  For tables with both sequential and\nmapping content, this ignores the mapping part completely.\n\nNote that it is best not to rely on the behaviour of len() for\nmappings.  It might change in a later version of Lupa.\n\nSimilar to the table interface provided by Lua, Lupa also supports\nattribute access to table members:\n\n.. code:: python\n\n      >>> table = lua.eval('{ a=1, b=2 }')\n      >>> table.a, table.b\n      (1, 2)\n      >>> table.a == table['a']\n      True\n\nThis enables access to Lua 'methods' that are associated with a table,\nas used by the standard library modules:\n\n.. code:: python\n\n      >>> string = lua.eval('string')    # get the 'string' library table\n      >>> print( string.lower('A') )\n      a\n\n\nPython Callables\n----------------\n\nAs discussed earlier, Lupa allows Lua scripts to call Python functions\nand methods:\n\n.. code:: python\n\n      >>> def add_one(num):\n      ...     return num + 1\n      >>> lua_func = lua.eval('function(num, py_func) return py_func(num) end')\n      >>> lua_func(48, add_one)\n      49\n\n      >>> class MyClass():\n      ...     def my_method(self):\n      ...         return 345\n      >>> obj = MyClass()\n      >>> lua_func = lua.eval('function(py_obj) return py_obj:my_method() end')\n      >>> lua_func(obj)\n      345\n\nLua doesn't have a dedicated syntax for named arguments, so by default\nPython callables can only be called using positional arguments.\n\nA common pattern for implementing named arguments in Lua is passing them\nin a table as the first and only function argument.  See\nhttp://lua-users.org/wiki/NamedParameters for more details.  Lupa supports\nthis pattern by providing two decorators: ``lupa.unpacks_lua_table``\nfor Python functions and ``lupa.unpacks_lua_table_method`` for methods\nof Python objects.\n\nPython functions/methods wrapped in these decorators can be called from\nLua code as ``func(foo, bar)``, ``func{foo=foo, bar=bar}``\nor ``func{foo, bar=bar}``.  Example:\n\n.. code:: python\n\n      >>> @lupa.unpacks_lua_table\n      ... def add(a, b):\n      ...     return a + b\n      >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a=a, b=b} end')\n      >>> lua_func(5, 6, add)\n      11\n      >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a, b=b} end')\n      >>> lua_func(5, 6, add)\n      11\n\nIf you do not control the function implementation, you can also just\nmanually wrap a callable object when passing it into Lupa:\n\n.. code:: python\n\n      >>> import operator\n      >>> wrapped_py_add = lupa.unpacks_lua_table(operator.add)\n\n      >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a, b} end')\n      >>> lua_func(5, 6, wrapped_py_add)\n      11\n\nThere are some limitations:\n\n1. Avoid using ``lupa.unpacks_lua_table`` and ``lupa.unpacks_lua_table_method``\n   for functions where the first argument can be a Lua table.  In this case\n   ``py_func{foo=bar}`` (which is the same as ``py_func({foo=bar})`` in Lua)\n   becomes ambiguous: it could mean either \"call ``py_func`` with a named\n   ``foo`` argument\" or \"call ``py_func`` with a positional ``{foo=bar}``\n   argument\".\n\n2. One should be careful with passing ``nil`` values to callables wrapped in\n   ``lupa.unpacks_lua_table`` or ``lupa.unpacks_lua_table_method`` decorators.\n   Depending on the context, passing ``nil`` as a parameter can mean either\n   \"omit a parameter\" or \"pass None\".  This even depends on the Lua version.\n\n   It is possible to use ``python.none`` instead of ``nil`` to pass None values\n   robustly.  Arguments with ``nil`` values are also fine when standard braces\n   ``func(a, b, c)`` syntax is used.\n\nBecause of these limitations lupa doesn't enable named arguments for all\nPython callables automatically.  Decorators allow to enable named arguments\non a per-callable basis.\n\n\nLua Coroutines\n--------------\n\nThe next is an example of Lua coroutines.  A wrapped Lua coroutine\nbehaves exactly like a Python coroutine.  It needs to get created at\nthe beginning, either by using the ``.coroutine()`` method of a\nfunction or by creating it in Lua code.  Then, values can be sent into\nit using the ``.send()`` method or it can be iterated over.  Note that\nthe ``.throw()`` method is not supported, though.\n\n.. code:: python\n\n      >>> lua_code = '''\\\n      ...     function(N)\n      ...         for i=0,N do\n      ...             coroutine.yield( i%2 )\n      ...         end\n      ...     end\n      ... '''\n      >>> lua = LuaRuntime()\n      >>> f = lua.eval(lua_code)\n\n      >>> gen = f.coroutine(4)\n      >>> list(enumerate(gen))\n      [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)]\n\nAn example where values are passed into the coroutine using its\n``.send()`` method:\n\n.. code:: python\n\n      >>> lua_code = '''\\\n      ...     function()\n      ...         local t,i = {},0\n      ...         local value = coroutine.yield()\n      ...         while value do\n      ...             t[i] = value\n      ...             i = i + 1\n      ...             value = coroutine.yield()\n      ...         end\n      ...         return t\n      ...     end\n      ... '''\n      >>> f = lua.eval(lua_code)\n\n      >>> co = f.coroutine()   # create coroutine\n      >>> co.send(None)        # start coroutine (stops at first yield)\n\n      >>> for i in range(3):\n      ...     co.send(i*2)\n\n      >>> mapping = co.send(None)   # loop termination signal\n      >>> sorted(mapping.items())\n      [(0, 0), (1, 2), (2, 4)]\n\nIt also works to create coroutines in Lua and to pass them back into\nPython space:\n\n.. code:: python\n\n      >>> lua_code = '''\\\n      ...   function f(N)\n      ...         for i=0,N do\n      ...             coroutine.yield( i%2 )\n      ...         end\n      ...   end ;\n      ...   co1 = coroutine.create(f) ;\n      ...   co2 = coroutine.create(f) ;\n      ...\n      ...   status, first_result = coroutine.resume(co2, 2) ;   -- starting!\n      ...\n      ...   return f, co1, co2, status, first_result\n      ... '''\n\n      >>> lua = LuaRuntime()\n      >>> f, co, lua_gen, status, first_result = lua.execute(lua_code)\n\n      >>> # a running coroutine:\n\n      >>> status\n      True\n      >>> first_result\n      0\n      >>> list(lua_gen)\n      [1, 0]\n      >>> list(lua_gen)\n      []\n\n      >>> # an uninitialised coroutine:\n\n      >>> gen = co(4)\n      >>> list(enumerate(gen))\n      [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)]\n\n      >>> gen = co(2)\n      >>> list(enumerate(gen))\n      [(0, 0), (1, 1), (2, 0)]\n\n      >>> # a plain function:\n\n      >>> gen = f.coroutine(4)\n      >>> list(enumerate(gen))\n      [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)]\n\n\nThreading\n---------\n\nThe following example calculates a mandelbrot image in parallel\nthreads and displays the result in PIL. It is based on a `benchmark\nimplementation`_ for the `Computer Language Benchmarks Game`_.\n\n.. _`Computer Language Benchmarks Game`: http://shootout.alioth.debian.org/u64/benchmark.php?test=all&lang=luajit&lang2=python3\n.. _`benchmark implementation`: http://shootout.alioth.debian.org/u64/program.php?test=mandelbrot&lang=luajit&id=1\n\n.. code:: python\n\n    lua_code = '''\\\n        function(N, i, total)\n            local char, unpack = string.char, table.unpack\n            local result = \"\"\n            local M, ba, bb, buf = 2/N, 2^(N%8+1)-1, 2^(8-N%8), {}\n            local start_line, end_line = N/total * (i-1), N/total * i - 1\n            for y=start_line,end_line do\n                local Ci, b, p = y*M-1, 1, 0\n                for x=0,N-1 do\n                    local Cr = x*M-1.5\n                    local Zr, Zi, Zrq, Ziq = Cr, Ci, Cr*Cr, Ci*Ci\n                    b = b + b\n                    for i=1,49 do\n                        Zi = Zr*Zi*2 + Ci\n                        Zr = Zrq-Ziq + Cr\n                        Ziq = Zi*Zi\n                        Zrq = Zr*Zr\n                        if Zrq+Ziq > 4.0 then b = b + 1; break; end\n                    end\n                    if b >= 256 then p = p + 1; buf[p] = 511 - b; b = 1; end\n                end\n                if b ~= 1 then p = p + 1; buf[p] = (ba-b)*bb; end\n                result = result .. char(unpack(buf, 1, p))\n            end\n            return result\n        end\n    '''\n\n    image_size = 1280   # == 1280 x 1280\n    thread_count = 8\n\n    from lupa import LuaRuntime\n    lua_funcs = [ LuaRuntime(encoding=None).eval(lua_code)\n                  for _ in range(thread_count) ]\n\n    results = [None] * thread_count\n    def mandelbrot(i, lua_func):\n        results[i] = lua_func(image_size, i+1, thread_count)\n\n    import threading\n    threads = [ threading.Thread(target=mandelbrot, args=(i,lua_func))\n                for i, lua_func in enumerate(lua_funcs) ]\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n\n    result_buffer = b''.join(results)\n\n    # use Pillow to display the image\n    from PIL import Image\n    image = Image.fromstring('1', (image_size, image_size), result_buffer)\n    image.show()\n\nNote how the example creates a separate ``LuaRuntime`` for each thread\nto enable parallel execution.  Each ``LuaRuntime`` is protected by a\nglobal lock that prevents concurrent access to it.  The low memory\nfootprint of Lua makes it reasonable to use multiple runtimes, but\nthis setup also means that values cannot easily be exchanged between\nthreads inside of Lua.  They must either get copied through Python\nspace (passing table references will not work, either) or use some Lua\nmechanism for explicit communication, such as a pipe or some kind of\nshared memory setup.\n\n\nRestricting Lua access to Python objects\n----------------------------------------\n\n..\n        >>> try: unicode = unicode\n        ... except NameError: unicode = str\n\nLupa provides a simple mechanism to control access to Python objects.\nEach attribute access can be passed through a filter function as\nfollows:\n\n.. code:: python\n\n        >>> def filter_attribute_access(obj, attr_name, is_setting):\n        ...     if isinstance(attr_name, unicode):\n        ...         if not attr_name.startswith('_'):\n        ...             return attr_name\n        ...     raise AttributeError('access denied')\n\n        >>> lua = lupa.LuaRuntime(\n        ...           register_eval=False,\n        ...           attribute_filter=filter_attribute_access)\n        >>> func = lua.eval('function(x) return x.__class__ end')\n        >>> func(lua)\n        Traceback (most recent call last):\n         ...\n        AttributeError: access denied\n\nThe ``is_setting`` flag indicates whether the attribute is being read\nor set.\n\nNote that the attributes of Python functions provide access to the\ncurrent ``globals()`` and therefore to the builtins etc.  If you want\nto safely restrict access to a known set of Python objects, it is best\nto work with a whitelist of safe attribute names.  One way to do that\ncould be to use a well selected list of dedicated API objects that you\nprovide to Lua code, and to only allow Python attribute access to the\nset of public attribute/method names of these objects.\n\nSince Lupa 1.0, you can alternatively provide dedicated getter and\nsetter function implementations for a ``LuaRuntime``:\n\n.. code:: python\n\n        >>> def getter(obj, attr_name):\n        ...     if attr_name == 'yes':\n        ...         return getattr(obj, attr_name)\n        ...     raise AttributeError(\n        ...         'not allowed to read attribute \"%s\"' % attr_name)\n\n        >>> def setter(obj, attr_name, value):\n        ...     if attr_name == 'put':\n        ...         setattr(obj, attr_name, value)\n        ...         return\n        ...     raise AttributeError(\n        ...         'not allowed to write attribute \"%s\"' % attr_name)\n\n        >>> class X(object):\n        ...     yes = 123\n        ...     put = 'abc'\n        ...     noway = 2.1\n\n        >>> x = X()\n\n        >>> lua = lupa.LuaRuntime(attribute_handlers=(getter, setter))\n        >>> func = lua.eval('function(x) return x.yes end')\n        >>> func(x)  # getting 'yes'\n        123\n        >>> func = lua.eval('function(x) x.put = \"ABC\"; end')\n        >>> func(x)  # setting 'put'\n        >>> print(x.put)\n        ABC\n        >>> func = lua.eval('function(x) x.noway = 42; end')\n        >>> func(x)  # setting 'noway'\n        Traceback (most recent call last):\n         ...\n        AttributeError: not allowed to write attribute \"noway\"\n\n\nImporting Lua binary modules\n----------------------------\n\n**This will usually work as is**, but here are the details, in case\nanything goes wrong for you.\n\nTo use binary modules in Lua, you need to compile them against the\nheader files of the LuaJIT sources that you used to build Lupa, but do\nnot link them against the LuaJIT library.\n\nFurthermore, CPython needs to enable global symbol visibility for\nshared libraries before loading the Lupa module.  This can be done by\ncalling ``sys.setdlopenflags(flag_values)``.  Importing the ``lupa``\nmodule will automatically try to set up the correct ``dlopen`` flags\nif it can find the platform specific ``DLFCN`` Python module that\ndefines the necessary flag constants.  In that case, using binary\nmodules in Lua should work out of the box.\n\nIf this setup fails, however, you have to set the flags manually.\nWhen using the above configuration call, the argument ``flag_values``\nmust represent the sum of your system's values for ``RTLD_NEW`` and\n``RTLD_GLOBAL``.  If ``RTLD_NEW`` is 2 and ``RTLD_GLOBAL`` is 256, you\nneed to call ``sys.setdlopenflags(258)``.\n\nAssuming that the Lua luaposix_ (``posix``) module is available, the\nfollowing should work on a Linux system:\n\n.. code:: python\n\n      >>> import sys\n      >>> orig_dlflags = sys.getdlopenflags()\n      >>> sys.setdlopenflags(258)\n      >>> import lupa\n      >>> sys.setdlopenflags(orig_dlflags)\n\n      >>> lua = lupa.LuaRuntime()\n      >>> posix_module = lua.require('posix')     # doctest: +SKIP\n\n.. _luaposix: http://git.alpinelinux.org/cgit/luaposix\n\n\nInstalling lupa\n===============\n\nBuilding with LuaJIT2\n---------------------\n\n#) Download and unpack lupa\n\n   http://pypi.python.org/pypi/lupa\n\n#) Download LuaJIT2\n\n   http://luajit.org/download.html\n\n#) Unpack the archive into the lupa base directory, e.g.::\n\n     .../lupa-0.1/LuaJIT-2.0.2\n\n#) Build LuaJIT::\n\n     cd LuaJIT-2.0.2\n     make\n     cd ..\n\n   If you need specific C compiler flags, pass them to ``make`` as follows::\n\n     make CFLAGS=\"...\"\n\n   For trickier target platforms like Windows and MacOS-X, please see\n   the official `installation instructions for LuaJIT`_.\n\n   NOTE: When building on Windows, make sure that lua51.lib is made in addition\n   to lua51.dll. The MSVC build produces this file, MinGW does NOT.\n\n#) Build lupa::\n\n     python setup.py install\n\n   Or any other distutils target of your choice, such as ``build``\n   or one of the ``bdist`` targets.  See the `distutils\n   documentation`_ for help, also the `hints on building extension\n   modules`_.\n\n   Note that on 64bit MacOS-X installations, the following additional\n   compiler flags are reportedly required due to the embedded LuaJIT::\n\n     -pagezero_size 10000 -image_base 100000000\n\n   You can find additional installation hints for MacOS-X in this\n   `somewhat unclear blog post`_, which may or may not tell you at\n   which point in the installation process to provide these flags.\n\n   Also, on 64bit MacOS-X, you will typically have to set the\n   environment variable ``ARCHFLAGS`` to make sure it only builds\n   for your system instead of trying to generate a fat binary with\n   both 32bit and 64bit support::\n\n     export ARCHFLAGS=\"-arch x86_64\"\n\n   Note that this applies to both LuaJIT and Lupa, so make sure\n   you try a clean build of everything if you forgot to set it\n   initially.\n\n.. _`installation instructions for LuaJIT`: http://luajit.org/install.html\n.. _`somewhat unclear blog post`: http://t-p-j.blogspot.com/2010/11/lupa-on-os-x-with-macports-python-26.html\n.. _`distutils documentation`: http://docs.python.org/install/index.html#install-index\n.. _`hints on building extension modules`: http://docs.python.org/install/index.html#building-extensions-tips-and-tricks\n\n\nBuilding with Lua 5.1\n---------------------\n\nReportedly, it also works to use Lupa with the standard (non-JIT) Lua\nruntime.  To that end, install Lua 5.1 instead of LuaJIT2, including\nany development packages (header files etc.).\n\nOn systems that use the \"pkg-config\" configuration mechanism, Lupa's\nsetup.py will pick up either LuaJIT2 or Lua automatically, with a\npreference for LuaJIT2 if it is found.  Pass the ``--no-luajit`` option\nto the setup.py script if you have both installed but do not want to\nuse LuaJIT2.\n\nOn other systems, you may have to supply the build parameters\nexternally, e.g. using environment variables or by changing the\nsetup.py script manually.  Pass the ``--no-luajit`` option to the\nsetup.py script in order to ignore the failure you get when neither\nLuaJIT2 nor Lua are found automatically.\n\nFor further information, read this mailing list post:\n\nhttp://article.gmane.org/gmane.comp.python.lupa.devel/31\n\n\nInstalling lupa from packages\n=============================\n\nDebian/Ubuntu + Lua 5.2\n-----------------------\n\n#) Install Lua 5.2 development package::\n\n     $ apt-get install liblua5.2-dev\n\n#) Install lupa::\n\n     $ pip install lupa\n\nDebian/Ubuntu + LuaJIT2\n-----------------------\n\n#) Install LuaJIT2 development package::\n\n     $ apt-get install libluajit-5.1-dev\n\n#) Install lupa::\n\n     $ pip install lupa\n\nDepending on OS version, you might get an older LuaJIT2 version.\n\nOS X + Lua 5.2 + Homebrew\n-------------------------\n\n#) Install Lua::\n\n     $ brew install lua\n\n#) Install pkg-config::\n\n     $ brew install pkg-config\n\n#) Install lupa::\n\n     $ pip install lupa\n\n\n\nLupa change log\n===============\n\n1.9 (2019-12-21)\n----------------\n\n* Build against Lua 5.3 if available.\n\n* Use Lua 5.3.5 in binary wheels and as bundled Lua.\n\n* GH#129: Fix Lua module loading in Python 3.x.\n\n* GH#126: Fix build on Linux systems that install Lua as \"lua52\" package.\n\n* Built with Cython 0.29.14 for better Py3.8 compatibility.\n\n\n1.8 (2019-02-01)\n----------------\n\n* GH#107: Fix a deprecated import in Py3.\n\n* Built with Cython 0.29.3 for better Py3.7 compatibility.\n\n\n1.7 (2018-08-06)\n----------------\n\n* GH#103: Provide wheels for MS Windows and fix MSVC build on Py2.7.\n\n\n1.6 (2017-12-15)\n----------------\n\n* GH#95: Improved compatibility with Lua 5.3.\n  (patch by TitanSnow)\n\n\n1.5 (2017-09-16)\n----------------\n\n* GH#93: New method ``LuaRuntime.compile()`` to compile Lua code\n  without executing it.\n  (patch by TitanSnow)\n\n* GH#91: Lua 5.3 is bundled in the source distribution to simplify\n  one-shot installs.\n  (patch by TitanSnow)\n\n* GH#87: Lua stack trace is included in output in debug mode.\n  (patch by aaiyer)\n\n* GH#78: Allow Lua code to intercept Python exceptions.\n  (patch by Sergey Dobrov)\n\n* Built with Cython 0.26.1.\n\n\n1.4 (2016-12-10)\n----------------\n\n* GH#82: Lua coroutines were using the wrong runtime state\n  (patch by Sergey Dobrov)\n\n* GH#81: copy locally provided Lua DLL into installed package on Windows\n  (patch by Gareth Coles)\n\n* built with Cython 0.25.2\n\n\n1.3 (2016-04-12)\n----------------\n\n* GH#70: ``eval()`` and ``execute()`` accept optional positional arguments\n  (patch by John Vandenberg)\n\n* GH#65: calling ``str()`` on a Python object from Lua could fail if the\n  ``LuaRuntime`` is set up without auto-encoding (patch by Mikhail Korobov)\n\n* GH#63: attribute/keyword names were not properly encoded if the\n  ``LuaRuntime`` is set up without auto-encoding (patch by Mikhail Korobov)\n\n* built with Cython 0.24\n\n\n1.2 (2015-10-10)\n----------------\n\n* callbacks returned from Lua coroutines were incorrectly mixing\n  coroutine state with global Lua state (patch by Mikhail Korobov)\n\n* availability of ``python.builtins`` in Lua can be disabled via\n  ``LuaRuntime`` option.\n\n* built with Cython 0.23.4\n\n\n1.1 (2014-11-21)\n----------------\n\n* new module function ``lupa.lua_type()`` that returns the Lua type of\n  a wrapped object as string, or ``None`` for normal Python objects\n\n* new helper method ``LuaRuntime.table_from(...)`` that creates a Lua\n  table from one or more Python mappings and/or sequences\n\n* new ``lupa.unpacks_lua_table`` and ``lupa.unpacks_lua_table_method``\n  decorators to allow calling Python functions from Lua using named\n  arguments\n\n* fix a hang on shutdown where the LuaRuntime failed to deallocate due\n  to reference cycles\n\n* Lupa now plays more nicely with other Lua extensions that create\n  userdata objects\n\n\n1.0.1 (2014-10-11)\n------------------\n\n* fix a crash when requesting attributes of wrapped Lua coroutine objects\n\n* looking up attributes on Lua objects that do not support it now always\n  raises an AttributeError instead of sometimes raising a TypeError depending\n  on the attribute name\n\n\n1.0 (2014-09-28)\n----------------\n\n* NOTE: this release includes the major backwards incompatible changes listed\n  below.  It is believed that they simplify the interaction between Python code\n  and Lua code by more strongly following idiomatic Lua on the Lua side.\n\n  * Instead of passing a wrapped ``python.none`` object into Lua, ``None``\n    return values are now mapped to ``nil``, making them more straight forward\n    to handle in Lua code.  This makes the behaviour more consistent, as it\n    was previously somewhat arbitrary where ``none`` could appear and where a\n    ``nil`` value was used.  The only remaining exception is during iteration,\n    where the first returned value must not be ``nil`` in Lua, or otherwise\n    the loop terminates prematurely.  To prevent this, any ``None`` value\n    that the iterator returns, or any first item in exploded tuples that is\n    ``None``, is still mapped to ``python.none``. Any further values\n    returned in the same iteration will be mapped to ``nil`` if they are\n    ``None``, not to ``none``.  This means that only the first argument\n    needs to be manually checked for this special case.  For the\n    ``enumerate()`` iterator, the counter is never ``None`` and thus the\n    following unpacked items will never be mapped to ``python.none``.\n\n  * When ``unpack_returned_tuples=True``, iteration now also unpacks tuple\n    values, including ``enumerate()`` iteration, which yields a flat sequence\n    of counter and unpacked values.\n\n  * When calling bound Python methods from Lua as \"obj:meth()\", Lupa now\n    prevents Python from prepending the self argument a second time, so that\n    the Python method is now called as \"obj.meth()\".  Previously, it was called\n    as \"obj.meth(obj)\".  Note that this can be undesired when the object itself\n    is explicitly passed as first argument from Lua, e.g. when calling\n    \"func(obj)\" where \"func\" is \"obj.meth\", but these constellations should be\n    rare.  As a work-around for this case, user code can wrap the bound method\n    in another function so that the final call comes from Python.\n\n* garbage collection works for reference cycles that span both runtimes,\n  Python and Lua\n\n* calling from Python into Lua and back into Python did not clean up the\n  Lua call arguments before the innermost call, so that they could leak\n  into the nested Python call or its return arguments\n\n* support for Lua 5.2 (in addition to Lua 5.1 and LuaJIT 2.0)\n\n* Lua tables support Python's \"del\" statement for item deletion\n  (patch by Jason Fried)\n\n* Attribute lookup can use a more fine-grained control mechanism by\n  implementing explicit getter and setter functions for a LuaRuntime\n  (``attribute_handlers`` argument).  Patch by Brian Moe.\n\n* item assignments/lookups on Lua objects from Python no longer\n  special case double underscore names (as opposed to attribute lookups)\n\n\n0.21 (2014-02-12)\n-----------------\n\n* some garbage collection issues were cleaned up using new Cython features\n\n* new ``LuaRuntime`` option ``unpack_returned_tuples`` which automatically\n  unpacks tuples returned from Python functions into separate Lua objects\n  (instead of returning a single Python tuple object)\n\n* some internal wrapper classes were removed from the module API\n\n* Windows build fixes\n\n* Py3.x build fixes\n\n* support for building with Lua 5.1 instead of LuaJIT (setup.py --no-luajit)\n\n* no longer uses Cython by default when building from released sources (pass\n  ``--with-cython`` to explicitly request a rebuild)\n\n* requires Cython 0.20+ when building from unreleased sources\n\n* built with Cython 0.20.1\n\n\n0.20 (2011-05-22)\n-----------------\n\n* fix \"deallocating None\" crash while iterating over Lua tables in\n  Python code\n\n* support for filtering attribute access to Python objects for Lua\n  code\n\n* fix: setting source encoding for Lua code was broken\n\n\n0.19 (2011-03-06)\n-----------------\n\n* fix serious resource leak when creating multiple LuaRuntime instances\n\n* portability fix for binary module importing\n\n\n0.18 (2010-11-06)\n-----------------\n\n* fix iteration by returning ``Py_None`` object for ``None`` instead\n  of ``nil``, which would terminate the iteration\n\n* when converting Python values to Lua, represent ``None`` as a\n  ``Py_None`` object in places where ``nil`` has a special meaning,\n  but leave it as ``nil`` where it doesn't hurt\n\n* support for counter start value in ``python.enumerate()``\n\n* native implementation for ``python.enumerate()`` that is several\n  times faster\n\n* much faster Lua iteration over Python objects\n\n\n0.17 (2010-11-05)\n-----------------\n\n* new helper function ``python.enumerate()`` in Lua that returns a Lua\n  iterator for a Python object and adds the 0-based index to each\n  item.\n\n* new helper function ``python.iterex()`` in Lua that returns a Lua\n  iterator for a Python object and unpacks any tuples that the\n  iterator yields.\n\n* new helper function ``python.iter()`` in Lua that returns a Lua\n  iterator for a Python object.\n\n* reestablished the ``python.as_function()`` helper function for Lua\n  code as it can be needed in cases where Lua cannot determine how to\n  run a Python function.\n\n\n0.16 (2010-09-03)\n-----------------\n\n* dropped ``python.as_function()`` helper function for Lua as all\n  Python objects are callable from Lua now (potentially raising a\n  ``TypeError`` at call time if they are not callable)\n\n* fix regression in 0.13 and later where ordinary Lua functions failed\n  to print due to an accidentally used meta table\n\n* fix crash when calling ``str()`` on wrapped Lua objects without\n  metatable\n\n\n0.15 (2010-09-02)\n-----------------\n\n* support for loading binary Lua modules on systems that support it\n\n\n0.14 (2010-08-31)\n-----------------\n\n* relicensed to the MIT license used by LuaJIT2 to simplify licensing\n  considerations\n\n\n0.13.1 (2010-08-30)\n-------------------\n\n* fix Cython generated C file using Cython 0.13\n\n\n0.13 (2010-08-29)\n-----------------\n\n* fixed undefined behaviour on ``str(lua_object)`` when the object's\n  ``__tostring()`` meta method fails\n\n* removed redundant \"error:\" prefix from ``LuaError`` messages\n\n* access to Python's ``python.builtins`` from Lua code\n\n* more generic wrapping rules for Python objects based on supported\n  protocols (callable, getitem, getattr)\n\n* new helper functions ``as_attrgetter()`` and ``as_itemgetter()`` to\n  specify the Python object protocol used by Lua indexing when\n  wrapping Python objects in Python code\n\n* new helper functions ``python.as_attrgetter()``,\n  ``python.as_itemgetter()`` and ``python.as_function()`` to specify\n  the Python object protocol used by Lua indexing of Python objects in\n  Lua code\n\n* item and attribute access for Python objects from Lua code\n\n\n0.12 (2010-08-16)\n-----------------\n\n* fix Lua stack leak during table iteration\n\n* fix lost Lua object reference after iteration\n\n\n0.11 (2010-08-07)\n-----------------\n\n* error reporting on Lua syntax errors failed to clean up the stack so\n  that errors could leak into the next Lua run\n\n* Lua error messages were not properly decoded\n\n\n0.10 (2010-07-27)\n-----------------\n\n* much faster locking of the LuaRuntime, especially in the single\n  threaded case (see\n  http://code.activestate.com/recipes/577336-fast-re-entrant-optimistic-lock-implemented-in-cyt/)\n\n* fixed several error handling problems when executing Python code\n  inside of Lua\n\n\n0.9 (2010-07-23)\n----------------\n\n* fixed Python special double-underscore method access on LuaObject\n  instances\n\n* Lua coroutine support through dedicated wrapper classes, including\n  Python iteration support.  In Python space, Lua coroutines behave\n  exactly like Python generators.\n\n\n0.8 (2010-07-21)\n----------------\n\n* support for returning multiple values from Lua evaluation\n\n* ``repr()`` support for Lua objects\n\n* ``LuaRuntime.table()`` method for creating Lua tables from Python\n  space\n\n* encoding fix for ``str(LuaObject)``\n\n\n0.7 (2010-07-18)\n----------------\n\n* ``LuaRuntime.require()`` and ``LuaRuntime.globals()`` methods\n\n* renamed ``LuaRuntime.run()`` to ``LuaRuntime.execute()``\n\n* support for ``len()``, ``setattr()`` and subscripting of Lua objects\n\n* provide all built-in Lua libraries in ``LuaRuntime``, including\n  support for library loading\n\n* fixed a thread locking issue\n\n* fix passing Lua objects back into the runtime from Python space\n\n\n0.6 (2010-07-18)\n----------------\n\n* Python iteration support for Lua objects (e.g. tables)\n\n* threading fixes\n\n* fix compile warnings\n\n\n0.5 (2010-07-14)\n----------------\n\n* explicit encoding options per LuaRuntime instance to decode/encode\n  strings and Lua code\n\n\n0.4 (2010-07-14)\n----------------\n\n* attribute read access on Lua objects, e.g. to read Lua table values\n  from Python\n\n* str() on Lua objects\n\n* include .hg repository in source downloads\n\n* added missing files to source distribution\n\n\n0.3 (2010-07-13)\n----------------\n\n* fix several threading issues\n\n* safely free the GIL when calling into Lua\n\n\n0.2 (2010-07-13)\n----------------\n\n* propagate Python exceptions through Lua calls\n\n\n0.1 (2010-07-12)\n----------------\n\n* first public release\n\n\nLicense\n=======\n\nLupa\n----\n\nCopyright (c) 2010-2017 Stefan Behnel.  All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nLua\n---\n\n(See https://www.lua.org/license.html)\n\nCopyright © 1994–2017 Lua.org, PUC-Rio.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/scoder/lupa",
    "keywords": "",
    "license": "MIT style",
    "maintainer": "Lupa-dev mailing list",
    "maintainer_email": "lupa-dev@freelists.org",
    "name": "lupa",
    "package_url": "https://pypi.org/project/lupa/",
    "platform": "",
    "project_url": "https://pypi.org/project/lupa/",
    "project_urls": {
      "Homepage": "https://github.com/scoder/lupa"
    },
    "release_url": "https://pypi.org/project/lupa/1.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python wrapper around Lua and LuaJIT",
    "version": "1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15786462,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ec9c5f85d6a67ca2511a82baf1a3909e0ea0b51721e2cb2a104d6372cef493e",
        "md5": "fb5579ef4c04e585563809d9c4da6552",
        "sha256": "8434fdda16d101c458570d21baf9cd064304b515ed4ef9569949222ba04c3e37"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "fb5579ef4c04e585563809d9c4da6552",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 279445,
      "upload_time": "2019-12-21T13:51:17",
      "upload_time_iso_8601": "2019-12-21T13:51:17.244180Z",
      "url": "https://files.pythonhosted.org/packages/6e/c9/c5f85d6a67ca2511a82baf1a3909e0ea0b51721e2cb2a104d6372cef493e/lupa-1.9-cp27-cp27m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4337b7b95aba82dfd773ee9c8ca08719ffa21a71fb2e025b6ad981a7a5fd8e5e",
        "md5": "673bddc01444025867eecd391af7aca8",
        "sha256": "9823322e60b0d9695754e28f5a17323d111d6951933e958cfe72df9523a39e94"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "673bddc01444025867eecd391af7aca8",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 292635,
      "upload_time": "2019-12-21T13:52:03",
      "upload_time_iso_8601": "2019-12-21T13:52:03.700314Z",
      "url": "https://files.pythonhosted.org/packages/43/37/b7b95aba82dfd773ee9c8ca08719ffa21a71fb2e025b6ad981a7a5fd8e5e/lupa-1.9-cp27-cp27m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e240e54ad381e339604b2937eb5ec226454bb65fd2804ce6f1c858f9a7eac2e",
        "md5": "b7c2237961f8ae6641047ff42fcb69db",
        "sha256": "ba879849832b87c18dbc471bffc62ff3393b2034a3b103348d620646575f448a"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27mu-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "b7c2237961f8ae6641047ff42fcb69db",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 279429,
      "upload_time": "2019-12-21T13:51:24",
      "upload_time_iso_8601": "2019-12-21T13:51:24.103896Z",
      "url": "https://files.pythonhosted.org/packages/0e/24/0e54ad381e339604b2937eb5ec226454bb65fd2804ce6f1c858f9a7eac2e/lupa-1.9-cp27-cp27mu-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "92cb8044c04d81aa2241bdc75d99834ec50e48b15dcbecf34c8f07759fa3256b",
        "md5": "2682197de40c8ecc313ce27458b1f8b8",
        "sha256": "4badf4180f8fd28e032e8716422b7a0117879569e694b5e2e803a7e39fa85213"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27mu-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "2682197de40c8ecc313ce27458b1f8b8",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 292688,
      "upload_time": "2019-12-21T13:52:10",
      "upload_time_iso_8601": "2019-12-21T13:52:10.126666Z",
      "url": "https://files.pythonhosted.org/packages/92/cb/8044c04d81aa2241bdc75d99834ec50e48b15dcbecf34c8f07759fa3256b/lupa-1.9-cp27-cp27mu-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdfb5916d1cf20ba9a0b3fb6d8a956fd7261a4e9868b9a8a2efb3bd665ac78ad",
        "md5": "6c709a1c90f367983ea0d6c4378a2ce8",
        "sha256": "a690b0bafb7e50dd8ba14a06065059b11f5c8e5961564d5d45de2d9b4a9972b1"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27m-win32.whl",
      "has_sig": false,
      "md5_digest": "6c709a1c90f367983ea0d6c4378a2ce8",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 177171,
      "upload_time": "2019-12-21T13:52:49",
      "upload_time_iso_8601": "2019-12-21T13:52:49.810780Z",
      "url": "https://files.pythonhosted.org/packages/cd/fb/5916d1cf20ba9a0b3fb6d8a956fd7261a4e9868b9a8a2efb3bd665ac78ad/lupa-1.9-cp27-cp27m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b584cf3a11f239f066079f2cb55469cdc0e0a96139a6b02d8a79bc213c4976d8",
        "md5": "dfa1a1082a8e99d2e6c236a8d6653b68",
        "sha256": "6d65bdc251cd12b85487a1790ca1b282288be84555fe11fbe8b4357ae64708f5"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp27-cp27m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "dfa1a1082a8e99d2e6c236a8d6653b68",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "requires_python": null,
      "size": 216059,
      "upload_time": "2019-12-21T13:52:54",
      "upload_time_iso_8601": "2019-12-21T13:52:54.798330Z",
      "url": "https://files.pythonhosted.org/packages/b5/84/cf3a11f239f066079f2cb55469cdc0e0a96139a6b02d8a79bc213c4976d8/lupa-1.9-cp27-cp27m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "403b3f845bb180c3752e128d5c85e17396aca7e3cb77fe45ce8b8d3e8ca430c4",
        "md5": "7576becf325cf90228ccccb43a576a6f",
        "sha256": "ac7585125af7d7214e1f9dbdda965d7455c5065f71be20374c7900e01c74c05f"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp34-cp34m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "7576becf325cf90228ccccb43a576a6f",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": null,
      "size": 282325,
      "upload_time": "2019-12-21T13:51:30",
      "upload_time_iso_8601": "2019-12-21T13:51:30.801528Z",
      "url": "https://files.pythonhosted.org/packages/40/3b/3f845bb180c3752e128d5c85e17396aca7e3cb77fe45ce8b8d3e8ca430c4/lupa-1.9-cp34-cp34m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2318f2fcb236e8def4317440fdf5fffecf6ad569db6447de09df20aa8a727ef",
        "md5": "908f22e7dd4e2b1ebb4d68386e616732",
        "sha256": "517b96b23b4ce19feb54ee93d8c3b94f601a3d46cd1d570ecc5137fc7b9cb68c"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp34-cp34m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "908f22e7dd4e2b1ebb4d68386e616732",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "requires_python": null,
      "size": 296005,
      "upload_time": "2019-12-21T13:52:16",
      "upload_time_iso_8601": "2019-12-21T13:52:16.834479Z",
      "url": "https://files.pythonhosted.org/packages/d2/31/8f2fcb236e8def4317440fdf5fffecf6ad569db6447de09df20aa8a727ef/lupa-1.9-cp34-cp34m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b64f8d2e0fe60cc67d12d8229115d1844bbab200ad463abdbda3767424f972b",
        "md5": "185953d7209a12891a544f61343bc52f",
        "sha256": "632e7a101c288e05b823c2bae71ac69e0253e7f4120bc39b5dc1fcaf5daba0fb"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp35-cp35m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "185953d7209a12891a544f61343bc52f",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 284543,
      "upload_time": "2019-12-21T13:51:37",
      "upload_time_iso_8601": "2019-12-21T13:51:37.584622Z",
      "url": "https://files.pythonhosted.org/packages/3b/64/f8d2e0fe60cc67d12d8229115d1844bbab200ad463abdbda3767424f972b/lupa-1.9-cp35-cp35m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "175e769c4aedebc853a61e1161146adb22307dfe0e609cdf3670ca60bbf5fde0",
        "md5": "b745a7850aaa1a8feaa395b0d53d8647",
        "sha256": "42fcd8f7b33b84abce90c57aaeb80d9a2ba3c3fdb4cde2fac1c8f9e4eb00d581"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp35-cp35m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "b745a7850aaa1a8feaa395b0d53d8647",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 296208,
      "upload_time": "2019-12-21T13:52:23",
      "upload_time_iso_8601": "2019-12-21T13:52:23.265850Z",
      "url": "https://files.pythonhosted.org/packages/17/5e/769c4aedebc853a61e1161146adb22307dfe0e609cdf3670ca60bbf5fde0/lupa-1.9-cp35-cp35m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31e0f39db0f40df31ed0a4aa4d141e79eba4c405c7e405d76b9a15031093288e",
        "md5": "27cc5db6206c23378b5622b92ab0bd7a",
        "sha256": "d3cf15d0c1126373535452bdeb71b016fe970d7e5ee2bc0381df7bd35f99c820"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp35-cp35m-win32.whl",
      "has_sig": false,
      "md5_digest": "27cc5db6206c23378b5622b92ab0bd7a",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 199328,
      "upload_time": "2019-12-21T13:52:59",
      "upload_time_iso_8601": "2019-12-21T13:52:59.900064Z",
      "url": "https://files.pythonhosted.org/packages/31/e0/f39db0f40df31ed0a4aa4d141e79eba4c405c7e405d76b9a15031093288e/lupa-1.9-cp35-cp35m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72f27b13dd29b555997f7c9f95d597dd411508817e18f5c2cc94dffb28811c6d",
        "md5": "dfa8c4564f22f5afb7248fb2c431f049",
        "sha256": "49afbeaf90c758512d3c0dea48ac0ecfa460974690cf1af58b95845e6b607c4b"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp35-cp35m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "dfa8c4564f22f5afb7248fb2c431f049",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 254231,
      "upload_time": "2019-12-21T13:53:06",
      "upload_time_iso_8601": "2019-12-21T13:53:06.088723Z",
      "url": "https://files.pythonhosted.org/packages/72/f2/7b13dd29b555997f7c9f95d597dd411508817e18f5c2cc94dffb28811c6d/lupa-1.9-cp35-cp35m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e92da4081c389bf8fad931263018652ef92b127e3e9a7b211874ff1af313328",
        "md5": "61b6b1457446f5baf77560d1b12b1e14",
        "sha256": "abb357c35ad1c1b78b140c8cf1fd678bcaa04bab275c6d55e47a07717138e551"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp36-cp36m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "61b6b1457446f5baf77560d1b12b1e14",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 286486,
      "upload_time": "2019-12-21T13:51:44",
      "upload_time_iso_8601": "2019-12-21T13:51:44.011555Z",
      "url": "https://files.pythonhosted.org/packages/8e/92/da4081c389bf8fad931263018652ef92b127e3e9a7b211874ff1af313328/lupa-1.9-cp36-cp36m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2ef6496e2152777a29d8505dbcd9c89da780f6190ec32986ad5de145626dedc",
        "md5": "5bdf1fbf1f06e7940f0dd90b161fc9de",
        "sha256": "9ee2aa3e1e852a2917c5869e8ab69d725407a218d14c4c0c98f4b04b3b2a73a7"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp36-cp36m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "5bdf1fbf1f06e7940f0dd90b161fc9de",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 299389,
      "upload_time": "2019-12-21T13:52:29",
      "upload_time_iso_8601": "2019-12-21T13:52:29.958921Z",
      "url": "https://files.pythonhosted.org/packages/e2/ef/6496e2152777a29d8505dbcd9c89da780f6190ec32986ad5de145626dedc/lupa-1.9-cp36-cp36m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "375cbcfff5c8087c1ad5a159ce6abf03b945d5bbbb0ba185e960972d85df2b02",
        "md5": "30fb761baf364b5a85d9348940d6f1c8",
        "sha256": "d497f4727060a1daf8603e86cb731f587c38ab9a3451cd3c9c70f27859cbd3bd"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "30fb761baf364b5a85d9348940d6f1c8",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 200418,
      "upload_time": "2019-12-21T13:53:11",
      "upload_time_iso_8601": "2019-12-21T13:53:11.643742Z",
      "url": "https://files.pythonhosted.org/packages/37/5c/bcfff5c8087c1ad5a159ce6abf03b945d5bbbb0ba185e960972d85df2b02/lupa-1.9-cp36-cp36m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3bf7392a669d025db9bcf3f6038b43cfb34c1ef7f3776c9eee4f3841b0d7ebb",
        "md5": "815d66970c8fee34be7618b5573fd247",
        "sha256": "a7d7761b007fbf8b524291ac42bccc32b072102e7f7e547783a5a5ded66a0c39"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "815d66970c8fee34be7618b5573fd247",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "requires_python": null,
      "size": 255378,
      "upload_time": "2019-12-21T13:53:18",
      "upload_time_iso_8601": "2019-12-21T13:53:18.484799Z",
      "url": "https://files.pythonhosted.org/packages/f3/bf/7392a669d025db9bcf3f6038b43cfb34c1ef7f3776c9eee4f3841b0d7ebb/lupa-1.9-cp36-cp36m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a42b3d8d563783733a901d62d8dbbfc04b7f3fde0d9fcfb90d0c246877b746b",
        "md5": "760c5a6e3b96fe969567b4d7878e8860",
        "sha256": "acaecd88ce6b708fbaf20b76b4d35ecb2817159f8a939b0a73d2aa840dfef850"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp37-cp37m-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "760c5a6e3b96fe969567b4d7878e8860",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 285800,
      "upload_time": "2019-12-21T13:51:49",
      "upload_time_iso_8601": "2019-12-21T13:51:49.906349Z",
      "url": "https://files.pythonhosted.org/packages/0a/42/b3d8d563783733a901d62d8dbbfc04b7f3fde0d9fcfb90d0c246877b746b/lupa-1.9-cp37-cp37m-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22385e35df44f58b6492a9aa2fc643a800e4982f6d1388d7d03b4f3ef111f4e5",
        "md5": "d8665e9a62df1bbaa5fbde46a1c89c2f",
        "sha256": "c57cda6ba3dc55ddd8b6c566c4f315d6152307aee23f212aa06c5e653cde4f13"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp37-cp37m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d8665e9a62df1bbaa5fbde46a1c89c2f",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 300387,
      "upload_time": "2019-12-21T13:52:37",
      "upload_time_iso_8601": "2019-12-21T13:52:37.702023Z",
      "url": "https://files.pythonhosted.org/packages/22/38/5e35df44f58b6492a9aa2fc643a800e4982f6d1388d7d03b4f3ef111f4e5/lupa-1.9-cp37-cp37m-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e23e8aff72c473a20cd36031fddcb4119a3d29237b8a5c0b78acec26629851f",
        "md5": "f6c7223b89d0b2d139d2d0dbd06b1f49",
        "sha256": "fe1db400b471a0854fe364b63d7836973ee0d897a76628340d1721b6b4b89ddc"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp37-cp37m-win32.whl",
      "has_sig": false,
      "md5_digest": "f6c7223b89d0b2d139d2d0dbd06b1f49",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 200467,
      "upload_time": "2019-12-21T13:53:23",
      "upload_time_iso_8601": "2019-12-21T13:53:23.829941Z",
      "url": "https://files.pythonhosted.org/packages/4e/23/e8aff72c473a20cd36031fddcb4119a3d29237b8a5c0b78acec26629851f/lupa-1.9-cp37-cp37m-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d902edc115574160ca63c7ce6c30d989ec4997ffcde16ddf8d08ef6a5746398",
        "md5": "550c280aff6be1873bfaa75d2f10b8d1",
        "sha256": "42285855c022b36ed3f0c5d19d0ef27b1648e0683838cddaf9191acad4d6616c"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "550c280aff6be1873bfaa75d2f10b8d1",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 255868,
      "upload_time": "2019-12-21T13:53:29",
      "upload_time_iso_8601": "2019-12-21T13:53:29.875176Z",
      "url": "https://files.pythonhosted.org/packages/6d/90/2edc115574160ca63c7ce6c30d989ec4997ffcde16ddf8d08ef6a5746398/lupa-1.9-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebe8ce719e2b7472dbf2ed573d5ca31c8d9af3b878eebca94b6847dca14dfd0c",
        "md5": "aab98f912f91dca790d605ac27c8f54d",
        "sha256": "7619fbd85d9ece1d48fb72bb7389e98d878621d2da0b7622c99066671f294b65"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp38-cp38-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "aab98f912f91dca790d605ac27c8f54d",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 281127,
      "upload_time": "2019-12-21T13:51:56",
      "upload_time_iso_8601": "2019-12-21T13:51:56.385431Z",
      "url": "https://files.pythonhosted.org/packages/eb/e8/ce719e2b7472dbf2ed573d5ca31c8d9af3b878eebca94b6847dca14dfd0c/lupa-1.9-cp38-cp38-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bf66e22a48efa7f085bc6fc9d3350623ef71227fad0193c65b48a246f224fec",
        "md5": "a84760714a35bb4f2b221f1d38d51465",
        "sha256": "2551ae82ea0f90383fb153ecd29a1a166e2552e10b7a712ff047cad88062ad37"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp38-cp38-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "a84760714a35bb4f2b221f1d38d51465",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 293702,
      "upload_time": "2019-12-21T13:52:44",
      "upload_time_iso_8601": "2019-12-21T13:52:44.200751Z",
      "url": "https://files.pythonhosted.org/packages/2b/f6/6e22a48efa7f085bc6fc9d3350623ef71227fad0193c65b48a246f224fec/lupa-1.9-cp38-cp38-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "11386bc2cf029537767dd970e63a7ef1050ac62512aa3975e90ef2d17bfff3a4",
        "md5": "418451bb44c4aa77c1510beab391c944",
        "sha256": "162f6793b2ad40d25710b9998bce2eeb3938efbb4dbad49fb8c5082d214237b3"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp38-cp38-win32.whl",
      "has_sig": false,
      "md5_digest": "418451bb44c4aa77c1510beab391c944",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 203361,
      "upload_time": "2019-12-21T13:53:35",
      "upload_time_iso_8601": "2019-12-21T13:53:35.476225Z",
      "url": "https://files.pythonhosted.org/packages/11/38/6bc2cf029537767dd970e63a7ef1050ac62512aa3975e90ef2d17bfff3a4/lupa-1.9-cp38-cp38-win32.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34e39ddf011d75d68e37253c6a37aa40718e83ddfaf3020cbcf4a1af3e4a6193",
        "md5": "25c713bf109e270b734f632ee5e0e5ab",
        "sha256": "09d6c45eb3b9407588c5a168e3371b629e75c5822050e9feff393601709bd0d7"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "25c713bf109e270b734f632ee5e0e5ab",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": null,
      "size": 258655,
      "upload_time": "2019-12-21T13:53:41",
      "upload_time_iso_8601": "2019-12-21T13:53:41.901469Z",
      "url": "https://files.pythonhosted.org/packages/34/e3/9ddf011d75d68e37253c6a37aa40718e83ddfaf3020cbcf4a1af3e4a6193/lupa-1.9-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "60f647759f11bb4f651043ee4867a20c884beed9b43b716288fc87aa709a72f6",
        "md5": "b3e54b993c8a85b09881d3fa8db4143c",
        "sha256": "5e08a97a4ae46592f1fd04f2f97d9fdeb6a34dbcdc0a049e1ca5929e6902c558"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp39-cp39-manylinux1_i686.whl",
      "has_sig": false,
      "md5_digest": "b3e54b993c8a85b09881d3fa8db4143c",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 279466,
      "upload_time": "2020-10-18T06:53:34",
      "upload_time_iso_8601": "2020-10-18T06:53:34.202702Z",
      "url": "https://files.pythonhosted.org/packages/60/f6/47759f11bb4f651043ee4867a20c884beed9b43b716288fc87aa709a72f6/lupa-1.9-cp39-cp39-manylinux1_i686.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5876c23a8cceb15cc26beaae2ebba3a283b7b207ff4cba775c9b2b9fae63e2c",
        "md5": "d279d61d296103ad13490e3e56e9ac0f",
        "sha256": "7df1f565b92f124e45093dde8d262489a67f40eddd7a65035e6bc3b982be234f"
      },
      "downloads": -1,
      "filename": "lupa-1.9-cp39-cp39-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "d279d61d296103ad13490e3e56e9ac0f",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": null,
      "size": 281695,
      "upload_time": "2020-10-18T06:53:38",
      "upload_time_iso_8601": "2020-10-18T06:53:38.340297Z",
      "url": "https://files.pythonhosted.org/packages/f5/87/6c23a8cceb15cc26beaae2ebba3a283b7b207ff4cba775c9b2b9fae63e2c/lupa-1.9-cp39-cp39-manylinux1_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e44485d9a962dd135c74d82edec606691f1f4db664f11fe8393eef4146bb98d7",
        "md5": "540ddad3dc253f7a6c6d17b11860275b",
        "sha256": "a3e11d806ca02cf72e490ec1974f8b96a14a1091895c9dccebe0b8d52dd82e8e"
      },
      "downloads": -1,
      "filename": "lupa-1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "540ddad3dc253f7a6c6d17b11860275b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1014812,
      "upload_time": "2019-12-21T13:53:56",
      "upload_time_iso_8601": "2019-12-21T13:53:56.803908Z",
      "url": "https://files.pythonhosted.org/packages/e4/44/85d9a962dd135c74d82edec606691f1f4db664f11fe8393eef4146bb98d7/lupa-1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}