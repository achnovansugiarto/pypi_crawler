{
  "info": {
    "author": "Stanislas Guerra",
    "author_email": "stanislas.guerra@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===============================\nAnother Ajax Auto-Complete, Yet\n===============================\n\n\n.. image:: https://coveralls.io/repos/Starou/django-yaaac/badge.png\n  :target: https://coveralls.io/r/Starou/django-yaaac\n\n.. image:: https://pypip.in/v/django-yaaac/badge.png\n  :target: https://pypi.python.org/pypi/django-yaaac\n\n.. image:: https://pypip.in/py_versions/django-yaaac/badge.svg\n    :target: https://pypi.python.org/pypi/django-yaaac/\n    :alt: Supported Python versions\n\n.. image:: https://pypip.in/license/django-yaaac/badge.svg\n    :target: https://pypi.python.org/pypi/django-yaaac/\n    :alt: License\n\n\n\n*Yaaac* is lightweight Django application providing Ajax search to admin foreign-key form fields in addition \nto the *raw_id_fields* related lookup and - *cerise sur le gateau* - it is usable outside the admin.\n\n\nExamples\n========\n\nIn the admin\n------------\n\nConfigure the admin form to enable Ajax search where you usually use *raw_id_fields*.\n\n.. image:: examples/screenshot-admin-1.png\n    :alt: Ajax search field \n\nStart typing to select a value from the suggestion.\n\n.. image:: examples/screenshot-admin-2.png\n    :alt: Ajax search in progress\n\nThe selected object is displayed using the unicode value. You can reset the field to choose another one.\n\n.. image:: examples/screenshot-admin-3.png\n    :alt: Ajax search completed\n\nIn inlines as well.\n\n.. image:: examples/screenshot-admin-inline.png\n    :alt: Ajax search in inlines\n\n\nInstallation\n============\n\nInstall the app from the source::\n\n    python setup.py build && (sudo) python setup.py install\n\nOr with *pip*::\n\n    pip install django-yaaac\n\nAdd the app in your settings.INSTALLED_APPS::\n\n    INSTALLED_APPS = [\n        ...,\n        \"django_yaaac\",\n        ...,\n    ]\n\nIn the *urls.py* module of your project, define the url pattern for ajax calls::\n\n    import django_yaaac as yaaac\n    from django.conf.urls import patterns, include, url\n\n    urlpatterns = patterns('',\n        url(r'^yaaac/', include(yaaac.autocomplete.urls)),\n        ...\n    )\n\n\nUsage\n=====\n\nForms\n-----\n\nWhat you need to do is to declare a custom *ModelForm* and use it in your *ModelAdmin*::\n\n\n    from django import forms\n    from django.contrib import admin\n    from django.contrib.admin.templatetags.admin_static import static\n    from django.template import RequestContext\n    from django_yaaac.forms.fields import AutocompleteModelChoiceField\n    from test_app import models\n    \n\n    class BandMemberForm(forms.ModelForm):\n        band = AutocompleteModelChoiceField(site=admin.site, \n                                            queryset=models.Band.objects.all(),\n                                            yaaac_opts={\n                                                \"search_fields\": [\"^name\"],\n                                                \"suggest_by\": \"get_full_name\",\n                                                \"min_chars\": 3,    # Fire search when 3 chars are sent (1 by default.)\n                                                \"max_height\": 400, # 300px by default.\n                                                \"width\": 250,      # 300px by default.\n                                            },\n                                            required=True)\n        class Meta:\n            model = models.BandMember\n\n\n    class BandMemberAdmin(admin.ModelAdmin):\n        form = BandMemberForm\n        \n        class Media:\n            # You need jQuery.\n            js = (static('js/jquery.min.js'), )\n\n\n    admin.site.register(models.BandMember, BandMemberAdmin)\n\n\nThe *site* parameter of *AutocompleteModelChoiceField* is required for related lookup (the\nmagnifier glass). The *search_fields* is a list of fields to search against using the same syntax\nas in Django Admin (^, $ etc).\nExtra options *min_chars*, *max_height* and *width* are the counter-part of *minChars*, *maxHeight* and *width*\nin `Autocomplete options <https://github.com/devbridge/jQuery-Autocomplete#api>`_.\n\n\nDo not forget to add *jQuery* in your template (using *ModelAdmin.Media.js* in the example above).\nOutside the admin, you have to explicitly call the yaaac static files like that::\n    \n    <head>\n      {{ form.media }}\n    </head>\n\n\n*suggest_by* is optional. It can be a field or a method of the model.\nBy default, suggestions are shown using *__unicode__* method.\n\nIf your model define a ``get_absolute_url()`` method, the label is a link to that resource.\n\n\nModels\n------\n\nFor security reasons you must open the search view on the models like this::\n\n    class BandMember(models.Model):\n        plain_stupid_password = models.CharField(max_length=4)\n        first_name = models.CharField(max_length=100)\n        last_name = models.CharField(max_length=100)\n        band = models.ForeignKey(\"Band\", null=True, blank=True)\n        favorite_instrument = models.ForeignKey(\"Instrument\", null=True, blank=True)\n\n        class Meta:\n            unique_together = (('first_name', 'last_name'),)\n\n        class Yaaac:\n            user_passes_test = lambda instance, user: user and user.is_authenticated() or False \n            allows_suggest_by = ['get_full_name']\n\n        def __unicode__(self):\n            return u\"%s %s\" % (self.first_name, self.last_name)\n\n        def get_full_name(self):\n            return u\"%s %s\" % (self.first_name, self.last_name)\n\n\nThe `Yaaac` class must defines the following:\n\n\n- ``user_passes_test`` is a class method that takes a user and return True or False.\n- ``allows_suggest_by`` is a list of model fields or methods that can used as return value by the search view.\n\n\nTuning\n======\n\n\nTo ease the DOM manipulation, HTML classes are added to the elements. The most interesting being ``yaaac_<fieldname>``\nto the hidden input storing the foreign key value. This is very convenient when you need to add behavior to a whole\nset of fields - also those that don't exist when the page is created - sharing the same name. \n\nUse jQuery delegation (i.e. ``$(\".foo\").on(\"change\", \".yaaac_first_name\")``) to place an event on one field for all \nthe inline forms present in the page or to come (i.e. Click on \"Add a new Band Member\".)",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Starou/django-yaaac",
    "keywords": null,
    "license": "BSD Licence",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-yaaac",
    "package_url": "https://pypi.org/project/django-yaaac/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-yaaac/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/Starou/django-yaaac"
    },
    "release_url": "https://pypi.org/project/django-yaaac/1.8.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django application providing Ajax search capabilities.",
    "version": "1.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6702571,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6742d1050ed65f565a9a9e3ff9c4d66c4568cf22aaf0b9d44080b75612c9d957",
        "md5": "f4ce7e8d0a73b55a95463bc945858bae",
        "sha256": "3b7daa4eee91ad9a2ef270b43f8ac23c7b0a5f73286f97a72abfb80b44f800e8"
      },
      "downloads": -1,
      "filename": "django-yaaac-1.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f4ce7e8d0a73b55a95463bc945858bae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 648863,
      "upload_time": "2015-01-30T14:13:37",
      "upload_time_iso_8601": "2015-01-30T14:13:37.092512Z",
      "url": "https://files.pythonhosted.org/packages/67/42/d1050ed65f565a9a9e3ff9c4d66c4568cf22aaf0b9d44080b75612c9d957/django-yaaac-1.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}