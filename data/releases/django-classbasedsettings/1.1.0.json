{
  "info": {
    "author": "Matthew Tretter",
    "author_email": "m@tthewwithanm.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "This project allows you to define your Django project's settings using classes\ninstead of modules. Among other things, this allows you to use inheritance and\ncalculated properties.\n\n.. image:: https://secure.travis-ci.org/matthewwithanm/django-classbasedsettings.png?branch=develop\n   :target: http://travis-ci.org/matthewwithanm/django-classbasedsettings\n\n\nInstallation\n============\n\nThe easiest way to install is by using pip::\n\n    pip install django-classbasedsettings\n\nHowever you can also just drop the \"cbsettings\" folder into your pythonpath.\n\n\nSetup\n=====\n\nThe places where you're currently setting ``DJANGO_SETTINGS_MODULE``, you'll have\nto instead call ``cbsettings.configure``. So your manage.py will look something\nlike this::\n\n    #!/usr/bin/env python\n    import os\n    import sys\n    import cbsettings\n\n    if __name__ == \"__main__\":\n        os.environ.setdefault('DJANGO_SETTINGS_FACTORY', 'path.to.MySettings')\n        cbsettings.configure()\n\n        from django.core.management import execute_from_command_line\n\n        execute_from_command_line(sys.argv)\n\nYou'll have to make a similar modification to your wsgi file::\n\n    import os\n    import cbsettings\n    from django.core.wsgi import get_wsgi_application\n\n    os.environ.setdefault('DJANGO_SETTINGS_FACTORY', 'path.to.MySettings')\n    cbsettings.configure()\n\n    application = get_wsgi_application()\n\n\nUsage\n=====\n\n\nBasic\n-----\n\nThe only real change you need to make to the settings.py file that Django\ncreates for you is to nest all the variables in a class::\n\n    from cbsettings import DjangoDefaults\n\n    class MySettings(DjangoDefaults):\n\n        ADMINS = (\n            # ('Your Name', 'your_email@example.com'),\n        )\n\n        MANAGERS = ADMINS\n\n        DATABASES = {\n            'default': {\n                'ENGINE': 'django.db.backends.',\n                'NAME': '',\n                'USER': '',\n                'PASSWORD': '',\n                'HOST': '',\n                'PORT': '',\n            }\n        }\n\n        # etc, etc\n\nNotice that the class extends ``DjangoDefaults``. By inheriting from this class,\nyou get all the default settings values that Django normally composites your\nsettings with. (These are pulled in from ``django.conf.global_settings`` so\nthey'll track with your version of Django, not classbasedsettings.) You can\nalso do stuff like this::\n\n    class MySettings(DjangoDefaults):\n\n        STATICFILES_FINDERS = DjangoDefaults.STATICFILES_FINDERS + (\n            'my.custom.StaticFileFinder',\n        )\n\n        # etc\n\nThese are just normal Python classes, so you can do anything you normally can::\n\n    class MySettings(DjangoDefaults):\n\n        @property\n        def TEMPLATE_DEBUG(self):\n            # Now a subclass can override DEBUG and TEMPLATE_DEBUG will be changed accordingly\n            return self.DEBUG\n\n        # etc\n\nCallable properties are automatically called::\n\n    class MySettings(DjangoDefaults):\n\n        TEMPLATE_DEBUG = lambda s: s.DEBUG\n\n\\...unless you don't want them to be::\n\n    from cbsettings import callable_setting\n\n    class MySettings(DjangoDefaults):\n\n        @callable_setting\n        def SOME_SETTING(self, *args, **kwargs):\n            # This setting is actually a callable. The decorator tells cbsettings\n            # not to invoke it to get a settings value.\n            .\n            .\n            .\n\nYou can also prevent your callable settings from receiveing a \"self\" argument::\n\n    from cbsettings import callable_setting\n\n    class MySettings(DjangoDefaults):\n\n        @callable_setting(takes_self=False)\n        def SOME_SETTING(*args, **kwargs):\n            .\n            .\n            .\n\n\nUsing a Settings Factory\n------------------------\n\nYou might be thinking that hardcoding your settings class into files is just as\nbad as Django's hardcoding of the settings module. That's true. Which is why\n``configure()`` can be passed the path to any callable that returns a settings\nobject instance. So your manage.py might instead look like this::\n\n    #!/usr/bin/env python\n    import sys\n    import cbsettings\n\n    if __name__ == \"__main__\":\n        cbsettings.configure('path.to.my.settings.factory')\n\n        from django.core.management import execute_from_command_line\n\n        execute_from_command_line(sys.argv)\n\nThen, in ``path/to/my/settings.py``::\n\n    def factory():\n        if 'DEV' in os.environ:\n            return MyDebugSettings()\n        else:\n            return MyProductionSettings()\n\nNow you can easily change which settings class you're using based on whatever\nconditions you want without having to make modifications to multiple files.\n\n\nUsing Switcher\n--------------\n\nUsing a factory method to determine which settings class to use is a powerful\nfeature! But usually you'll want to switch settings classes based on the same\nkinds of conditions, so django-classbasedsettings comes with a factory that'll\nhandle these common cases, and allow you to easily define simple conditions of\nyour own. It also uses a more declarative syntax, which makes it more organized\nthan a factory method. Here's how you use it in your settings file::\n\n    from cbsettings import DjangoDefaults, switcher\n\n    class MyProductionSettings(DjangoDefaults):\n        DEBUG = False\n        # etc\n\n    class MyDevSettings(DjangoDefaults):\n        DEBUG = True\n        # etc\n\n    class MyTestingSettings(MyProductionSettings):\n        SOME_VAR = 'whatever'\n\n    # You can use one of the preregistered conditions by passing kwargs. The\n    # first class whose conditions are all met will be used.\n    switcher.register(MyTestSettings, testing=True)\n    switcher.register(MyDevSettings, hostnames=['mycompuer.home', 'billscomputer.home'])\n    switcher.register(MyProductionSettings, hostnames=['theserver.com'])\n\n    # ...or you can define your own simple checks as positional arguments. If\n    # all of the values are truthy (and any kwarg checks pass), the class will\n    # be used.\n    switcher.register(MyDevSettings, 'dev.mysite.com' in __file__)\n    switcher.register(MyDevSettings, os.environ.get('DEV'))\n\n    # Callable positional arguments will be called, then checked for truthiness.\n    switcher.register(MyDevSettings, lambda: randint(1, 2) == 2)\n\nYou can also use ``switcher.register`` as a class decorator::\n\n    @switcher.register(hostnames=['theserver.com'])\n    class MyProductionSettings(DjangoDefaults):\n        DEBUG = False\n        # etc\n\nThen, wherever you're calling ``configure``, pass it your module's ``switcher``\nvariable::\n\n    cbsettings.configure('path.to.my.settings.switcher')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/matthewwithanm/django-classbasedsettings/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/matthewwithanm/django-classbasedsettings",
    "keywords": "settings,classbased,class-based",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-classbasedsettings",
    "package_url": "https://pypi.org/project/django-classbasedsettings/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-classbasedsettings/",
    "project_urls": {
      "Download": "http://github.com/matthewwithanm/django-classbasedsettings/tarball/master",
      "Homepage": "http://github.com/matthewwithanm/django-classbasedsettings"
    },
    "release_url": "https://pypi.org/project/django-classbasedsettings/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Use classes to define settings.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1924976,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "984a59b8d9368b365a242ee480cf6ac5c958a878e8aa8bfef9cc13cc12890345",
        "md5": "fcda6d4668838e1c0d627b434ae7aa25",
        "sha256": "aaff19df7ea9dbef555a5c4e7cb5a59cc11c7dec3ed91348a679ed9a7f2212f4"
      },
      "downloads": -1,
      "filename": "django-classbasedsettings-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fcda6d4668838e1c0d627b434ae7aa25",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7773,
      "upload_time": "2013-02-11T15:38:45",
      "upload_time_iso_8601": "2013-02-11T15:38:45.692192Z",
      "url": "https://files.pythonhosted.org/packages/98/4a/59b8d9368b365a242ee480cf6ac5c958a878e8aa8bfef9cc13cc12890345/django-classbasedsettings-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}