{
  "info": {
    "author": "IIIT",
    "author_email": "github@iiit.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django Wicked Historian\n=======================\n\n![example workflow](https://github.com/innovationinit/django-wicked-historian/actions/workflows/test-package.yml/badge.svg?branch=main)\n[![Coverage Status](https://coveralls.io/repos/github/innovationinit/django-wicked-historian/badge.svg)](https://coveralls.io/github/innovationinit/django-wicked-historian)\n\n\nA complete solution for creating automatic history of Django models.\n\n## Installation\n\nPackage can be installed using PyPi:\n\n```\n$ pip install django-wicked-historian\n```\n\nYou can also use extras to ensure some additional dependencies specific for implementation of JSONField which is required for this package to work properly.\n\n```\n$ pip install django-wicked-historian[mysql]\n$ pip install django-wicked-historian[postgres]\n$ pip install django-wicked-historian[django-jsonfield]\n```\n\n\n## Defining JSONField to be used\n\nPackage requires some configuration. You need to specify JSONField implementation which package gonna use to store values of model fields in your settings:\n\n```\nfrom wicked_historian.encoder import JSONEncoder\n\nWICKED_HISTORIAN_JSON_FIELD_CLASS = 'path.to.JSONField'\nWICKED_HISTORIAN_JSON_FIELD_KWARGS = {\n    'encoder': JSONEncoder,\n}\n```\n\n`WICKED_HISTORIAN_JSON_FIELD_CLASS` - path to JSON field class to be used\n`WICKED_HISTORIAN_JSON_FIELD_KWARGS` - kwargs used for instantiate of supplied class\n\nRemember to always use `wicked_historian.encoder.JSONEncoder` as an encoder for this field.\n\n### Example configuration for common used fields\n\n#### jsonfield.JSONField\n\n```\nWICKED_HISTORIAN_JSON_FIELD_CLASS = 'jsonfield.JSONField'\nWICKED_HISTORIAN_JSON_FIELD_KWARGS = {\n    'encoder_class': JSONEncoder,\n}\n```\n\n#### django.contrib.postgres.fields.JSONField\n\nFor Django >= 2.1 use builtin field with our encoder.\n\n```\nWICKED_HISTORIAN_JSON_FIELD_CLASS = 'django.contrib.postgres.fields.JSONField'\nWICKED_HISTORIAN_JSON_FIELD_KWARGS = {\n    'encoder': JSONEncoder,\n}\n```\n\n#### django_mysql.models.fields.JSONField\n\nThis field in version 2.2.0 of django-mysql package doesn't support supplying custom json encoder. However this package supplies subclass of this field with support of custom encoders and `wicked_historian.encoder.JSONEncoder` is default encoder.\n\nUse field `wicked_historian.compat.mysql.JSONField` instead:\n\n```\nWICKED_HISTORIAN_JSON_FIELD_CLASS = 'wicked_historian.compat.mysql.JSONField'\nWICKED_HISTORIAN_JSON_FIELD_KWARGS = {}\n```\n\n\n## Adding history to model of choice\n\nModel for which history is going to be generated should inherit from `wicked_historian.models.DiffableHistoryModel` and have a class for history entries specified in the Model.Meta class. History class should be created using factory `wicked_historian.utils.generate_history_class`:\n\n```\nfrom wicked_historian.models import DiffableHistoryModel\nfrom wicked_historian.utils import generate_history_class\n\n\nclass Book(DiffableHistoryModel):\n    title = models.CharField(max_length=100)\n\n    class Meta:\n        history_class = 'this_app.models.BookEditHistory'\n\n\nBookEditHistory = generate_history_class(Book, __name__)\n```\n\nIf there is a need for customizing the history model, it can be generated with the `abstract` option and used as a base model for a custom history model.\n\n```\nclass BookEditHistory(generate_history_class(Book, __name__, abstract=True)):\n    custom_field = models.IntegerField(default=0)\n\n    def custom_method(self):\n        return self.custom_field + 10\n```\n\n### Changes in model's fields set\n\nIf the set of model fields changes in a non-incremental way (fields were removed or changed their type), old definitions of such fields should be supplied to the `generate_history_class` factory for handling already existing history entries concerning these fields:\n\n```\nfrom wicked_historian.utils import ObsoleteFieldDescription\n\nBookEditHistory = generate_history_class(\n    Book,\n    __name__,\n    obsolete_field_choices=[\n        ObsoleteFieldDescription('title', models.TextField()),\n        ObsoleteFieldDescription('number_of_pages', models.IntegerField()),\n        ObsoleteFieldDescription('age', models.IntegerField(choices=[\n            (1, 'XV'),\n            (2, 'XIX'),\n            (3, 'XX'),\n        ])),\n    ],\n)\n```\n\n\n### Excluding fields from history\n\nIf there is no need for generating history for some fields, they can be excluded by supplying list of unwanted fields name to `generate_history_class`. History for these will not be generated, but any already existing history can be read.\n\n```\nfrom wicked_historian.utils import ObsoleteFieldDescription\n\nBookEditHistory = generate_history_class(\n    Book,\n    __name__,\n    excluded_fields=['title'],\n)\n```\n\n### Choices in model fields\n\nPlease note that when the set of choices in model fields changes in a non-incremental way, some values may be impossible to restore from history entries. That's why you should always have a superset of all choices ever used in this fields declared in the field.\n\n## Reading/accessing history\n\nInstance history should be accessed by history model.\n\n### Retrieving whole history\n\nTo retrieve whole history use method `get_for`, e.g. `BookEditHistory.get_for(book)` will return list of whole `Book` instance history as dicts.\n\n### Filtering and searching history\n\nTo filter history use history model manager (e.g. `BookEditHistory.objects.filter(user=some_user, model=book)`) and transform history entry to dict form using `get_entry_for` method.\n\n```\nhistory_entry_instances = BookEditHistory.objects.filter(user=some_user, model=book)\nhistory_entries = BookEditHistory.get_history_entry(history_entry_instance) for history_entry_instance in history_entry_instances\n```\n\n### Troubleshooting custom m2m handling\n\nWhen there is risk of sending by Django both signals model related (pre_save, post_delete etc.) and m2m related use `wicked_historian.signals_exclusion.signal_exclusion` and make those changes in `signal_exclusion.model_signals_exclusion_context` context. When in context calling `signal_exclusion.are_model_signals_excluded` with the same arguments context was created returns `True`.\n\n\n## License\nThe Django Wicked Historian package is licensed under the [FreeBSD\nLicense](https://opensource.org/licenses/BSD-2-Clause).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-wicked-historian",
    "package_url": "https://pypi.org/project/django-wicked-historian/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-wicked-historian/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-wicked-historian/1.0.0/",
    "requires_dist": [
      "Django (<3.0,>=2.1)",
      "django-diffable (>=1.0.0)",
      "django-jsonfield (>=1.0.1) ; extra == 'django-jsonfield'",
      "django-mysql (>=2.2.0) ; extra == 'mysql'",
      "psycopg2 (>=2.6.2) ; extra == 'postgres'"
    ],
    "requires_python": "",
    "summary": "A complete solution for creating automatic history of Django models.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12969024,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "949c06a638ddb8466343fc13ee93ebd0b729f3480dc30e7ec7c36b4fef6e3524",
        "md5": "db25966cdecbb9f65159bf70dbd49ed2",
        "sha256": "e61c377f4b3023d2d7481b4b1c39176eaf854efae8a246dbe0987f1793f8ec9d"
      },
      "downloads": -1,
      "filename": "django_wicked_historian-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "db25966cdecbb9f65159bf70dbd49ed2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22411,
      "upload_time": "2022-02-22T08:39:09",
      "upload_time_iso_8601": "2022-02-22T08:39:09.112228Z",
      "url": "https://files.pythonhosted.org/packages/94/9c/06a638ddb8466343fc13ee93ebd0b729f3480dc30e7ec7c36b4fef6e3524/django_wicked_historian-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "312315cbc79ed95ffc757e9a652815ccaabaa1340902723e6507778b843650c3",
        "md5": "71fccd123fe51dcfe7b6ffadba62e88c",
        "sha256": "3dac0c456b13f42eec906ab5a73127df1ec394309dba5b412cd429c60fe3e4fc"
      },
      "downloads": -1,
      "filename": "django-wicked-historian-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "71fccd123fe51dcfe7b6ffadba62e88c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18052,
      "upload_time": "2022-02-22T08:39:10",
      "upload_time_iso_8601": "2022-02-22T08:39:10.675492Z",
      "url": "https://files.pythonhosted.org/packages/31/23/15cbc79ed95ffc757e9a652815ccaabaa1340902723e6507778b843650c3/django-wicked-historian-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}