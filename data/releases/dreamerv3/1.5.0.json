{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Mastering Diverse Domains through World Models\n\nA reimplementation of [DreamerV3][paper], a scalable and general reinforcement\nlearning algorithm that masters a wide range of applications with fixed\nhyperparameters.\n\n![DreamerV3 Tasks](https://user-images.githubusercontent.com/2111293/217647148-cbc522e2-61ad-4553-8e14-1ecdc8d9438b.gif)\n\nIf you find this code useful, please reference in your paper:\n\n```\n@article{hafner2023dreamerv3,\n  title={Mastering Diverse Domains through World Models},\n  author={Hafner, Danijar and Pasukonis, Jurgis and Ba, Jimmy and Lillicrap, Timothy},\n  journal={arXiv preprint arXiv:2301.04104},\n  year={2023}\n}\n```\n\nTo learn more:\n\n- [Research paper][paper]\n- [Project website][website]\n- [Twitter summary][tweet]\n\n## DreamerV3\n\nDreamerV3 learns a world model from experiences and uses it to train an actor\ncritic policy from imagined trajectories. The world model encodes sensory\ninputs into categorical representations and predicts future representations and\nrewards given actions.\n\n![DreamerV3 Method Diagram](https://user-images.githubusercontent.com/2111293/217355673-4abc0ce5-1a4b-4366-a08d-64754289d659.png)\n\nDreamerV3 masters a wide range of domains with a fixed set of hyperparameters,\noutperforming specialized methods. Removing the need for tuning reduces the\namount of expert knowledge and computational resources needed to apply\nreinforcement learning.\n\n![DreamerV3 Benchmark Scores](https://user-images.githubusercontent.com/2111293/217356042-536a693a-cb5e-42aa-a20f-5303a77cad9c.png)\n\nDue to its robustness, DreamerV3 shows favorable scaling properties. Notably,\nusing larger models consistently increases not only its final performance but\nalso its data-efficiency. Increasing the number of gradient steps further\nincreases data efficiency.\n\n![DreamerV3 Scaling Behavior](https://user-images.githubusercontent.com/2111293/217356063-0cf06b17-89f0-4d5f-85a9-b583438c98dd.png)\n\n# Instructions\n\n## Package\n\nIf you just want to run DreamerV3 on a custom environment, you can `pip install\ndreamerv3` and copy [`example.py`][example] from this repository as a starting\npoint.\n\n## Docker\n\nIf you want to make modifications to the code, you can either use the provided\n`Dockerfile` that contains instructions or follow the manual instructions\nbelow.\n\n## Manual\n\nInstall [JAX][jax] and then the other dependencies:\n\n```sh\npip install -r requirements.txt\n```\n\nSimple training script:\n\n```sh\npython example.py\n```\n\nFlexible training script:\n\n```sh\npython dreamerv3/train.py \\\n  --logdir ~/logdir/$(date \"+%Y%m%d-%H%M%S\") \\\n  --configs crafter --batch_size 16 --run.train_ratio 32\n```\n\n# Tips\n\n- All config options are listed in `configs.yaml` and you can override them\n  from the command line.\n- The `debug` config block reduces the network size, batch size, duration\n  between logs, and so on for fast debugging (but does not learn a good model).\n- By default, the code tries to run on GPU. You can switch to CPU or TPU using\n  the `--jax.platform cpu` flag. Note that multi-GPU support is untested.\n- You can run with multiple config blocks that will override defaults in the\n  order they are specified, for example `--configs crafter large`.\n- By default, metrics are printed to the terminal, appended to a JSON lines\n  file, and written as TensorBoard summaries. Other outputs like WandB can be\n  enabled in the training script.\n- If you get a `Too many leaves for PyTreeDef` error, it means you're\n  reloading a checkpoint that is not compatible with the current config. This\n  often happens when reusing an old logdir by accident.\n- If you are getting CUDA errors, scroll up because the cause is often just an\n  error that happened earlier, such as out of memory or incompatible JAX and\n  CUDA versions.\n- You can use the `small`, `medium`, `large` config blocks to reduce memory\n  requirements. The default is `xlarge`. See the scaling graph above to see how\n  this affects performance.\n- Many environments are included, some of which require installating additional\n  packages. See the installation scripts in `scripts` and the `Dockerfile` for\n  reference.\n- When running on custom environments, make sure to specify the observation\n  keys the agent should be using via `encoder.mlp_keys`, `encode.cnn_keys`,\n  `decoder.mlp_keys` and `decoder.cnn_keys`.\n- To log metrics from environments without showing them to the agent or storing\n  them in the replay buffer, return them as observation keys with `log_` prefix\n  and enable logging via the `run.log_keys_...` options.\n- To continue stopped training runs, simply run the same command line again and\n  make sure that the `--logdir` points to the same directory.\n\n# Disclaimer\n\nThis repository contains a reimplementation of DreamerV3 based on the open\nsource DreamerV2 code base. It is unrelated to Google or DeepMind. The\nimplementation has been tested to reproduce the official results on a range of\nenvironments.\n\n[jax]: https://github.com/google/jax#pip-installation-gpu-cuda\n[paper]: https://arxiv.org/pdf/2301.04104v1.pdf\n[website]: https://danijar.com/dreamerv3\n[tweet]: https://twitter.com/danijarh/status/1613161946223677441\n[example]: https://github.com/danijar/dreamerv3/blob/main/example.py\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/danijar/dreamerv3",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dreamerv3",
    "package_url": "https://pypi.org/project/dreamerv3/",
    "platform": null,
    "project_url": "https://pypi.org/project/dreamerv3/",
    "project_urls": {
      "Homepage": "http://github.com/danijar/dreamerv3"
    },
    "release_url": "https://pypi.org/project/dreamerv3/1.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mastering Diverse Domains through World Models",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16982130,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d12dc1dad62858ad2f0ab369289d6b919caa691b021922cf6e1881825e016a1",
        "md5": "7188be090341fb04dbc4e79d64b1235b",
        "sha256": "593a5d14473e481377133225d493ae991a6b62aa70cbbac84e3d055ab72d1f55"
      },
      "downloads": -1,
      "filename": "dreamerv3-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7188be090341fb04dbc4e79d64b1235b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 83049,
      "upload_time": "2023-02-22T20:03:59",
      "upload_time_iso_8601": "2023-02-22T20:03:59.182030Z",
      "url": "https://files.pythonhosted.org/packages/5d/12/dc1dad62858ad2f0ab369289d6b919caa691b021922cf6e1881825e016a1/dreamerv3-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}