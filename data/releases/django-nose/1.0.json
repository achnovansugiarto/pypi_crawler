{
  "info": {
    "author": "Erik Rose",
    "author_email": "erikrose@grinchcentral.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===========\ndjango-nose\n===========\n\nFeatures\n--------\n\n* All the goodness of `nose`_ in your Django tests\n* Fixture bundling, an optional feature which speeds up your fixture-based\n  tests by a factor of 4\n* Reuse of previously created test DBs, cutting 10 seconds off startup time\n* Support for various databases. Tested with MySQL, PostgreSQL, and SQLite.\n  Others should work as well.\n\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/\n\n\nInstallation\n------------\n\nYou can get django-nose from PyPI with... ::\n\n    pip install django-nose\n\nThe development version can be installed with... ::\n\n    pip install -e git://github.com/jbalogh/django-nose.git#egg=django-nose\n\nSince django-nose extends Django's built-in test command, you should add it to\nyour ``INSTALLED_APPS`` in ``settings.py``::\n\n    INSTALLED_APPS = (\n        ...\n        'django_nose',\n        ...\n    )\n\nThen set ``TEST_RUNNER`` in ``settings.py``::\n\n    TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'\n\n\nUse\n---\n\nThe day-to-day use of django-nose is mostly transparent; just run ``./manage.py\ntest`` as usual.\n\nSee ``./manage.py help test`` for all the options nose provides, and look to\nthe `nose docs`_ for more help with nose.\n\n.. _nose docs: http://somethingaboutorange.com/mrl/projects/nose/\n\n\nEnabling Database Reuse\n-----------------------\n\nYou can save several seconds at the beginning and end of your test suite by\nreusing the test database from the last run. To do this, set the environment\nvariable ``REUSE_DB`` to 1::\n\n    REUSE_DB=1 ./manage.py test\n\nThe one new wrinkle is that, whenever your DB schema changes, you should leave\nthe flag off the next time you run tests. This will cue the test runner to\nreinitialize the test database.\n\n\nEnabling Fast Fixtures\n----------------------\n\ndjango-nose includes a nose plugin which drastically speeds up your tests by\neliminating redundant setup of Django test fixtures. To use it...\n\n1. Subclass ``django_nose.FastFixtureTestCase`` instead of\n   ``django.test.TestCase``. (I like to import it ``as TestCase`` in my\n   project's ``tests/__init__.py`` and then import it from there into my actual\n   tests. Then it's easy to sub the base class in and out.)\n2. Activate the plugin by passing the ``--with-fixture-bundling`` option to ``./manage.py test``.\n\nHow Fixture Bundling Works\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe fixture bundler reorders your test classes so that ones with identical sets\nof fixtures run adjacently. It then advises the first of each series to load\nthe fixtures once for all of them (and the remaining ones not to bother). It\nalso advises the last to tear them down. Depending on the size and repetition\nof your fixtures, you can expect a 25% to 50% speed increase.\n\nIncidentally, the author prefers to avoid Django fixtures, as they encourage\nirrelevant coupling between tests and make tests harder to comprehend and\nmodify. For future tests, it is better to use the \"model maker\" pattern,\ncreating DB objects programmatically. This way, tests avoid setup they don't\nneed, and there is a clearer tie between a test and the exact state it\nrequires. The fixture bundler is intended to make existing tests, which have\nalready committed to fixtures, more tolerable.\n\nTroubleshooting\n~~~~~~~~~~~~~~~\n\nIf using ``--with-fixture-bundling`` causes test failures, it likely indicates\nan order dependency between some of your tests. Here are the most frequent\nsources of state leakage we have encountered:\n\n* Locale activation, which is maintained in a threadlocal variable. Be sure to\n  reset your locale selection between tests.\n* memcached contents. Be sure to flush between tests. Many test superclasses do\n  this automatically.\n\nIt's also possible that you have ``post_save`` signal handlers which create\nadditional database rows while loading the fixtures. ``FastFixtureTestCase``\nisn't yet smart enough to notice this and clean up after it, so you'll have to\ngo back to plain old ``TestCase`` for now.\n\nExempting A Class From Bundling\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn some unusual cases, it is desirable to exempt a test class from fixture\nbundling, forcing it to set up and tear down its fixtures at the class\nboundaries. For example, we might have a ``TestCase`` subclass which sets up\nsome state outside the DB in ``setUpClass`` and tears it down in\n``tearDownClass``, and it might not be possible to adapt those routines to heed\nthe advice of the fixture bundler. In such a case, simply set the\n``exempt_from_fixture_bundling`` attribute of the test class to ``True``.\n\n\nUsing With South\n----------------\n\n`South`_ installs its own test command that turns off migrations during\ntesting. Make sure that django-nose comes *after* ``south`` in\n``INSTALLED_APPS`` so that django_nose's test command is used.\n\n.. _South: http://south.aeracode.org/\n\n\nAlways Passing The Same Options\n-------------------------------\n\nTo always set the same command line options you can use a `nose.cfg or\nsetup.cfg`_ (as usual) or you can specify them in settings.py like this::\n\n    NOSE_ARGS = ['--failed', '--stop']\n\n.. _nose.cfg or setup.cfg: http://somethingaboutorange.com/mrl/projects/nose/0.11.2/usage.html#configuration\n\n\nCustom Plugins\n--------------\n\nIf you need to `make custom plugins`_, you can define each plugin class\nsomewhere within your app and load them from settings.py like this::\n\n    NOSE_PLUGINS = [\n        'yourapp.tests.plugins.SystematicDysfunctioner',\n        # ...\n    ]\n\nJust like middleware or anything else, each string must be a dot-separated,\nimportable path to an actual class. Each plugin class will be instantiated and\nadded to the Nose test runner.\n\n.. _make custom plugins: http://somethingaboutorange.com/mrl/projects/nose/0.11.2/plugins.html#writing-plugins\n\n\nOlder Versions of Django\n------------------------\n\nUpgrading from Django < 1.2\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDjango 1.2 switches to a `class-based test runner`_. To use django-nose\nwith Django 1.2, change your ``TEST_RUNNER`` from ``django_nose.run_tests`` to\n``django_nose.NoseTestSuiteRunner``.\n\n``django_nose.run_tests`` will continue to work in Django 1.2 but will raise a\nwarning. In Django 1.3, it will stop working.\n\nIf you were using ``django_nose.run_gis_tests``, you should also switch to\n``django_nose.NoseTestSuiteRunner`` and use one of the `spatial backends`_ in\nyour ``DATABASES`` settings.\n\n.. _class-based test runner: http://docs.djangoproject.com/en/dev/releases/1.2/#function-based-test-runners\n.. _spatial backends: http://docs.djangoproject.com/en/dev/ref/contrib/gis/db-api/#id1\n\nDjango 1.1\n~~~~~~~~~~\n\nIf you want to use django-nose with Django 1.1, use\nhttps://github.com/jbalogh/django-nose/tree/django-1.1 or\nhttp://pypi.python.org/pypi/django-nose/0.0.3.\n\n\nRecent Version History\n----------------------\n\n1.0 (2012-03-12)\n  * New fixture-bundling plugin for avoiding needless fixture setup (Erik Rose)\n  * Moved FastFixtureTestCase in from test-utils, so now all the\n    fixture-bundling stuff is in one library. (Erik Rose)\n  * Added the REUSE_DB setting for faster startup and shutdown. (Erik Rose)\n  * Fixed a crash when printing options with certain verbosities. (Daniel Abel)\n  * Broke hard dependency on MySQL. Support PostgreSQL. (Roger Hu)\n  * Support SQLite, both memory- and disk-based. (Roger Hu and Erik Rose)\n  * Nail down versions of the package requirements. (Daniel Mizyrycki)\n\n0.1.3 (2010-04-15)\n  * Even better coverage support (rozza)\n  * README fixes (carljm and ionelmc)\n  * optparse OptionGroups are handled better (outofculture)\n  * nose plugins are loaded before listing options\n\nSee more in changelog.txt.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jbalogh/django-nose",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-nose",
    "package_url": "https://pypi.org/project/django-nose/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-nose/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/jbalogh/django-nose"
    },
    "release_url": "https://pypi.org/project/django-nose/1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django test runner that uses nose",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8001161,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebe4a53d8433e96a4330b300d7dd202008901fa0c2099565000a2119d51b0225",
        "md5": "9f27926c42c58ea93973db236f22cd72",
        "sha256": "00d81d13c8dad5ef90535dbdb72b480ab3cedae1d1d154746744ce1946994b8f"
      },
      "downloads": -1,
      "filename": "django-nose-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9f27926c42c58ea93973db236f22cd72",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22987,
      "upload_time": "2012-03-13T20:04:50",
      "upload_time_iso_8601": "2012-03-13T20:04:50.504815Z",
      "url": "https://files.pythonhosted.org/packages/eb/e4/a53d8433e96a4330b300d7dd202008901fa0c2099565000a2119d51b0225/django-nose-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}