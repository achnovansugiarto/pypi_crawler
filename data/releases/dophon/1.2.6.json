{
  "info": {
    "author": "CallMeE",
    "author_email": "ealohu@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# dophon\n\n## 简要介绍:\n\n> 这是个python开发的基于flask服务器的一个快速web服务开发框架,集成开发所需部分常用功能,参考java中的对象管理以及实例注入的一些思路,还有部分后期添加的优化功能(例如请求黑名单 <--- 初步概念,防高频访问)之类的\n\n## 推荐使用场景:\n\n#### 用于解决部分需要快速开发或小成本服务器(正在考虑着手整合SpringCloud的sidecar)\n\n## 联系方式:\n\n有任何疑问或建议欢迎联系\n请发送邮件至 ---> ealohu@163.com\n\n--- \n\n---\n# 快速开始\n\n## 1.引入dophon\n\n```\npip install dophon\n```\n\n## 2.启动服务器\n\n```python\nfrom dophon import boot\n\n...\n\nif '__main__' == __name__:\n\n    boot.run_app()\n```\n\n## 3.配置文件参数\n\n\n```python\n# dophon.properties.__init__.py\n\n\"\"\"<div/>\n配置集合<div/>\nauthor:CallMeE<div/>\ndate:2018-06-01<div/>\n\"\"\"\n\n# 定义工程根目录(必须)\nproject_root=os.getcwd()\n\n# 此处为服务器配置(必须,默认开启ssl)\nhost = '127.0.0.1'  # 服务器监听地址(全ip监听为0.0.0.0),默认监听本地\nport = 443 # 服务器监听端口\nssl_context = 'adhoc' # ssl证书路径(默认本地证书)\n\n# 此处为路由文件夹配置\nblueprint_path = ['/routes'] # route model dir path(路由文件夹名称)\n\n# 此处为数据库配置\npool_conn_num = 5 # size of db connect pool() # 数据库连接池连接数(默认5个)\npydc_host = 'localhost' # 数据库连接地址\npydc_port = 3306 # 数据库连接端口\npydc_user = 'username' # 数据库连接用户名\npydc_password = 'password' # 数据库连接密码\npydc_database = 'database' # 连接数据库名(可在后面跟连接参数)\n```\n\n## 4.路由\n\n快速定义:\n\n```python\nfrom dophon import boot\n\napp = boot.get_app()\n```\n\n方式一:\n\n```python\nimport dophon\nimport DemoClass\n\n_DemoRou=None\n\napp=dophon.blue_print(\n    inject_config={\n        'inj_obj_list': {\n            '_DemoRou': DemoClass\n        },\n        'global_obj': globals()\n    },  # 此处为自动注入参数配置(非必须,不需要请填入空字典)\n    name='demo',  # 此处为路由代号(必须,不能重复)\n    import_name=__name__  # 此处为路由初始化名称(必须,无特定需求填写__name__)\n) \n```\n\n1. 方式一所定义的app为flask的Blueprint类型路由,同时自带了实例注入功能(inject_config参数)\n2. inject_config参数默认空,即不调用实例注入\n3. inject_config中的inj_obj_list的key必须在上文显式定义(主要为了读写方便)\n4. 其余参数同flask中的Blueprint\n\n方式二:\n```python\nfrom flask import Blueprint\n\napp=Blueprint('demo',__name__) # 具体参数参照flask.Blueprint\n```\n\n1. 方式二为直接使用flask的Blueprint定义路由\n\n## 5.对象注入\n\n### 5.1 配置方式注入\n\n方式一: 参考<4.路由.方式一>\n\n方式二:\n\n```python\nfrom dophon import annotation\nimport class_1\nimport class_2\n\ninject_prop={\n    'obj_1':class_1.obj1,\n    'obj_2':class_2.obj1\n}\n\nobj_1=None\nobj_2=None\n\n@Autowired.OuterWired(inject_prop,globals())\ndef inject_method():\n    pass\n\ninject_method()\n```\n\n方式三(不推荐):\n\n```python\nfrom dophon import annotation\n\nimport class_1\nimport class_2\n\nobj_1=None\nobj_2=None\n\n@Autowired.InnerWired([class_1.obj1,class_2.obj1],['obj_1','obj_2'],globals())\ndef inject_method():\n pass\n\ninject_method()\n```\n> ps:上列注入配置可通过引入外部对象进行管理,即创建一个文件通过引入文件中变量实现配置的统一管理\n\n### 5.2 函数装饰器方式注入\n\n#### 5.2.1 实例管理器的定义\n注入前必须定义一个实例管理器\n\n```python\nfrom dophon.annotation import *\n\nclass OwnBeanConfig(BeanConfig):\n    \"\"\"\n    实例管理器必须继承BeanConfig)\n\n    注意!!!\n        实例定义关键字必须唯一\n    \"\"\"\n\n    # 方式一\n    @bean()\n    def demo_obj_1(self):\n        \"\"\"\n        此处返回管理关键字为demo_obj_1的DemoObj()实例\n        \"\"\"\n        return DemoObj()\n\n    # 方式二\n    @bean(name='Demo')\n    def demo_obj_2(self):\n        \"\"\"\n        此处返回管理关键字为Demo的DemoObj()实例\n        \"\"\"\n        return DemoObj()\n\n```\n\n* 实例管理器支持with语法\n\n```python\nwith OwnBeanConfig() as config:\n    pass\n```\n\n* 也可以使用普通实例化的实例启动方式来启动实例管理器\n\n```python\nOwnBeanConfig()()  # 注意是两个括号\n```\n\n> ps:推荐使用BeanConfig子类作为实例批量管理\n\n#### 5.2.2 实例的获取\n\n```python\nfrom dophon.annotation import *\n\nbean=Bean('demo_obj_1')  # 此处获取管理关键字为demo_obj_1对应的实例\n\n# 或者使用类来定位实例\nbean=Bean(DemoObj)  # 多个同类实例会抛出语义错误\n\n```\n\n## 6.其他注解\n\n首先引入注解模块\n```python\nfrom dophon import annotation\n```\n\n或者\n\n```python\nfrom dophon.annotation import *\n```\n\n### 6.1 @ResponseBody\n\n返回json格式数据\n```python\nfrom dophon.annotation import *\n\n@ResponseBody()\ndef fun():\n    return 'result'\n\n# response -> result\n\n@ResponseBody()\ndef fun():\n    return {\n    'message':'result'\n    }\n\n# response -> { 'message' : 'result' }\n\n@ResponseBody()\ndef fun():\n    result={\n        'message':'result'\n        }\n    return result\n\n# response -> { 'message' : 'result' }\n\n```\n### 6.2 @ResponseTemplate\n\n返回对应页面(默认路由目录下html文件)\n```python\n\nfrom dophon.annotation import *\n\n@ResponseTemplate('index.html')\ndef ...\n```\nps:额外管理页面路径请在路由定义(dophon.blue_print())中配置template_folder,遵从linux系统cd路径语法\n\n### 6.3 @AutoParam\n\n自动配置请求中的参数(分离形式)\n推荐指定装饰器中的kwarg_list参数的列表(也就是说形参的列表形式),否则会出现参数混乱(严重)\n\n```python\nfrom dophon.annotation import *\n\n@AutoParam(kwarg_list=['param_1','param_2','param_3'])\ndef fun(param_1,param_2,param_3):\n    print(param_1)\n    print(param_2)\n    print(param_3)\n\n# request -> (params){ 'param_1' : '1' , 'param_2' : '2' , 'param_3' : '3' }\n# console -> 1\n#            2\n#            3\n\n```\n\n由于本装饰器存在参数混乱,推荐使用FullParam参数装饰器(下文)\n\n### 6.4 @FullParam\n\n自动配置请求中的参数(集中形式),表现形式为dict\n赋值参数无名称要求,其中默认赋值参数列表中的第一个参数\n```python\nfrom dophon.annotation import *\n\n@FullParam()\ndef fun(args):\n    print(args)\n\n# request -> (params){ 'param_1' : '1' , 'param_2' : '2' , 'param_3' : '3' }\n# console -> { 'param_1' : '1' , 'param_2' : '2' , 'param_3' : '3' }\n```\n\n### 6.5 @RequestMapping\n\n简化版路由(同app.route())\n```python\nfrom dophon.annotation import *\nfrom dophon import boot\n\napp=boot.get_app()\n\n@RequestMapping(app=app,'/test',['get'])\ndef fun():\n    pass\n\n```\n\n### 6.5 @Autowired\n\n参考<5.对象注入>\n```python\nfrom dophon.annotation import *\n\n@AutoWired()\ndef fun():\n    pass\n\n```\n\n## 7.日志模块(基于python中的logging模块)\n\n### 7.1 日志模块引用\n\n```python\nfrom dophon import logger\n\nlogger.inject_logger(globals())\n\n```\n其中:\n    globals()为注入日志记录功能的变量域,可以为本地变量域,局部变量域,也可以为自定义变量管理域\n\n### 7.2 日志模块的使用\n\n控制台带颜色输出(略丑)\n\n日志输出格式如下:\n\n```\n'%(levelname)s : (%(asctime)s) ==> ::: %(message)s'\n```\n\n例如:\n\n```\nINFO : (2018-08-02 15:34:11) ==> ::: 执行批量实例管理初始化\n```\n\n#### 7.2.0 自定义日志配置:\n\n格式代码如下:\n\n- %(levelno)s：打印日志级别的数值<br/>\n- %(levelname)s：打印日志级别的名称<br/>\n- %(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]<br/>\n- %(filename)s：打印当前执行程序名<br/>\n- %(funcName)s：打印日志的当前函数<br/>\n- %(lineno)d：打印日志的当前行号<br/>\n- %(asctime)s：打印日志的时间<br/>\n- %(thread)d：打印线程ID<br/>\n- %(threadName)s：打印线程名称<br/>\n- %(process)d：打印进程ID<br/>\n- %(message)s：打印日志信息<br/>\n\n通过自定义配置文件(application.py)定义日志配置:\n\n```python\n# 此处为日志配置\nlogger_config={\n    # 'filename': 'app.log',\n    # 'level': 'logging.DEBUG',\n    'format': '%(levelname)s : <%(module)s> (%(asctime)s) ==> %(filename)s {%(funcName)s} [line:%(lineno)d] ::: %(message)s',\n    'datefmt': '%Y-%m-%d %H:%M:%S'\n}\n```\n\n#### 7.2.1 debug:\n\n#### 7.2.2 info:\n\n#### 7.2.3 warning:\n\n#### 7.2.4 error:\n\n#### 7.2.5 critical:\n\n\n\n## 8.消息队列\n\n1. 只是一个轻量级消息队列,承载能力中等\n2. 即使使用线程池处理消息,极为消耗cpu资源\n3. 该队列基于io作为消息持久化,高频消息容易导致io阻塞\n4. 消息消费默认有1-3秒延迟(本地)\n\n### 8.1 配置\n\n// 消息队列单机承载上限为推荐30-50个话题(tag)\n\n> 上面这句话已经没有任何意义了,后续版本(1.18+)中通过封装了弹性容量的线程池(默认系数为2)进行自动伸缩尺容量\n\n可通过自定义配置配置上限\n\n\n<application.py>\n```python\nmsg_queue_max_num = 30   # 消息队列线程池承载上限\n```\n\n### 8.2 生产者配置\n\n推荐使用json格式传递数据(便于消费者转义数据)\n\n```python\nfrom dophon.msg_queue import *\n\n@producer(tag='DEMO_TAG')\ndef producer():\n    return 'aaa'\n\n```\n\n### 8.3 消费者配置\n\n方式一:\n\n```python\nfrom dophon.msg_queue import *\n\n@consumer(tag='DEMO_TAG')\ndef consumer(args):\n    print(args)\nconsumer()\n\n# ERROR : (2018-08-02 21:29:15) ==> ::: 2018080221291454499310002: consume() argument after ** must be a mapping, not str\n\n```\n\n> 非json会报错,需在装饰器上打开as_arg\n\n```python\nfrom dophon.msg_queue import *\n\n@consumer(tag='DEMO_TAG',as_args=True)\ndef consumer(args):\n    print(args)\nconsumer()\n\n# aaa\n\n```\n\n### 8.4 统一管理消费者\n\n```python\nfrom dophon.msg_queue import *\n\nclass TestConsumer(Consumer):\n\n    @consumer(tag='test_msg_tag|test_msg_tag2', as_args=False, delay=1)\n    def consume_msg(msg, timestamp, tag):\n        print(msg)\n        print(timestamp)\n        print(tag)\n\n# 实例化衍生类启动消费者\nTestConsumer()\n\n```\n\n## 9.数据库交互\n\n### 9.0 配置相关\n\n### 9.1 结果集映射方式\n\n结果集:sql执行脚本的一个集合,由于在实际开发中查询居多,简称结果集\n\n> 通过xml文件规范若干结果集组成\n```xml\n<!--test.xml-->\n<select id=\"findAll\">\n    SELECT\n    *\n    FROM\n    table\n</select>\n```\n\n> 通过代码关联xml文件,初始化结果集\n\n```python\nfrom dophon.mysql import *\n\n_cursor=db_obj('/test.xml',auto_fix=True)\n\n# 根路径为配置文件路径\n# 文件路径必须以/开头\n\n```\n\n> 通过代码获取xml文件其中某一个结果集(以id区分)\n\n```python\nresult= _cursor.exe_sql(methodName='findAll')\n```\n> 支持动态参数传入(#{}形式)以及骨架参数传入(${形式})\n\n动态参数传入:\n```xml\n<select id=\"findAllById\">\n    SELECT\n    *\n    FROM\n    table\n    WHERE\n    id=#{id}\n</select>\n```\n\n```python\nresult= _cursor.exe_sql(methodName='findAll',args={'id':'12345678'})\n```\n\n骨架参数传入:\n```xml\n<select id=\"findAllByTableName\">\n    SELECT\n    *\n    FROM\n    ${table_name}\n</select>\n```\n\n```python\nresult= _cursor.exe_sql(methodName='findAll',args={'id':'12345678'})\n```\n\n> 支持单条查询,列表查询,队列查询(结果集id与参数列表的列表形式和字典形式)\n\n单条查询:\n```python\nresult= _cursor.exe_sql_single(methodName='findAll',args={'id':'12345678'})\n\n\n# result<dict>\n\n```\n\n列表查询:\n```python\nresult= _cursor.exe_sql(methodName='findAll',args={'id':'12345678'})\n\n# result<list>\n\n```\n\n队列查询(不稳定):\n\n1.列表形式:\n```python\nresult= _cursor.exe_sql_queue(\n    method_queue=['test1','test2'],\n    args_queue=[\n        {'id':'123456','name':'tom'},\n        {}\n    ]\n)\n\n# result<dict>\n# {\n#   method_name:exec_result\n# }\n\n```\n2.字典形式:\n```python\nresult= _cursor.exe_sql_obj_queue(\n    queue_obj={\n        'test1':{\n            'id':'123456'\n        },\n        'test2':{}\n    }\n)\n\n# result<dict>\n# {\n#   method_name:exec_result\n# }\n\n```\n\n> 支持结果集文件热更新\n\n```python\nupdate_round(_cursor,1)\n\n# update_round(<cursor>,second:int)\n\n```\n\n> 支持远程维护结果集文件\n\n```python\nremote_cell = remote.getCell('test.xml', remote_path='http://127.0.0.1:8400/member/export/xml/test.xml')\n_cursor = db_obj(remote_cell.getPath(), debug=True)\n或者\n_cursor = db_obj(remote_cell, debug=True)\n```\n\n### 9.2 表模型映射方式\n\n暂时支持单条事务操作\n\n> 通过初始化模型管理器获取数据库表映射骨架\n\n```python\nfrom dophon import orm\nmanager = orm.init_orm_manager(['user'])\n```\n> 通过实例化映射骨架获取表操作缓存实例(操作实例)\n\n```python\nuser = manager.user()\n```\n> 通过对操作实例赋值进行对对应表模拟操作\n\n\n```python\nprint('打印对象变量域')\nfor attr in dir(user):\n    print(attr, \":\", eval(\"user.\" + attr))\nprint('开始对对象赋值')\nuser.user_id = 'id'\nuser.info_id = 'info_id'\nuser.user_name = 'user_name'\nuser.user_pwd = 'user_pwd'\nuser.user_status = 123\nuser.create_time = datetime.datetime.now().strftime('%y-%m-%d')\nuser.update_time = datetime.datetime.now().strftime('%y-%m-%d')\nprint('对象赋值完毕')\nprint('打印对象变量域')\nfor attr in dir(user):\n    print(attr, \":\", eval(\"user.\" + attr))\nprint('打印对象参数表')\nprint(user([]))\n\nprint('user([]):', user([]))\nprint(\"user(['user_id','info_id']):\", user(['user_id', 'info_id']))\nprint(\"user.get_field_list():\", user.get_field_list())\nprint(\"user.alias('user_table').get_field_list():\", user.alias('user_table').get_field_list())\n\n\n\n```\n> 通过对操作实例结构化操作对数据库对应表结构进行数据落地操作\n\n```python\nprint(user.where())\nprint(user.values())\n\nuser.select()\nuser.user_name = '111'\nuser.select_one()\nuser.select_all()\n\nuser = manager.user()\nuser.alias('u').select()\nuser.user_name = '111'\nuser.alias('us').select_one()\nuser.alias('userr').select_all()\n\n\nuser.user_id='test_id'\nuser.info_id='test_info_id'\nuser.user_name='test_user_name'\nuser.user_pwd='test_user_pwd'\nuser.user_status=1\nuser.create_time = datetime.datetime.now().strftime('%y-%m-%d')\nuser.update_time = datetime.datetime.now().strftime('%y-%m-%d')\n\nprint(user.insert())\n#\nuser.user_id = 'test_id'\nuser.info_id = 'info_id'\nuser.user_name = '柯李艺'\nuser.user_pwd = '333'\nuser.user_status = 123\nprint(user.update(update=['user_name','user_pwd'],where=['user_id']))\n#\nuser.user_id = 'test_id'\nuser.info_id = 'info_id'\nuser.user_name = 'user_name'\nuser.user_pwd = 'user_pwd'\nuser.user_status = 123\nprint(user.delete(where=['user_id']))\n\nuser1=manager.user()\nuser2=manager.user()\nprint(user1.select())\nuser1.user_name='early'\nuser1.left_join(user2,['user_id'],['user_id'])\nuser1.alias('u1').left_join(user2.alias('u2'),['user_id'],['user_id'])\n# print(user1.exe_join())\nprint(user1.select())\n\nuser1 = manager.user()\nprint('user1', '---', id(user1))\nuser2 = user1.copy_to_obj(manager.user)\nprint('user2', '---', id(user2))\nprint(user1('user_id'))\nuser3 = user1.read_from_dict({\n    'user_id': '111'\n})\nprint('user3', '---', id(user3))\nprint(user1('user_id'))\nprint(user3('user_id'))\n```\n\n## 10.容器启动\n\n> 框架容器启动功能:<br/>\n> 1. 实现自动生成部署容器\n> 2. 自动安装项目相关依赖\n> 3. 开发ide控制台调试\n\n> 框架依赖容器: [docker(点击前往官网)](http://www.docker.com)\n\n代码:\n```python\n# coding: utf-8\"\nfrom dophon import docker_boot\n\ndocker_boot.run_as_docker()\n```\n\n> - 运行结果:\n```\nINFO : (2018-08-14 12:10:14) ==> ::: 容器前期准备\nINFO : (2018-08-14 12:10:14) ==> ::: 生成依赖文件\nINFO : (2018-08-14 12:10:17) ==> ::: 生成Dockerfile\nINFO : (2018-08-14 12:10:17) ==> ::: 暂停已运行的实例\ndemo\nINFO : (2018-08-14 12:10:28) ==> ::: 移除已运行的实例\ndemo\nINFO : (2018-08-14 12:10:29) ==> ::: 移除旧镜像\nUntagged: demo:latest\nDeleted: sha256:eb9ace16ac18eea033b87a4bcab0925dc0139664193e480796b00bff72ac132c\nDeleted: sha256:2a1af90ac889f36ce7b2861cd8a0f9efa3a98c31915e965cb0bfd7887c32cb05\nDeleted: sha256:42bf2fedac374e453deaf06c62643679e8b71de52835a71b228966330b2e90ab\nINFO : (2018-08-14 12:10:30) ==> ::: 检测配置合法性\nINFO : (2018-08-14 12:10:31) ==> ::: 建立镜像\nSending build context to Docker daemon  26.62kB\nStep 1/6 : FROM python:3.6.5\n ---> 9a58cce9b09f\nStep 2/6 : ADD . ./demo\n ---> 2b30f0d25df8\nStep 3/6 : ADD . ./demo/demo\n ---> 61c751581940\nStep 4/6 : WORKDIR ./demo\nRemoving intermediate container f9439713ab6f\n ---> 8ac1423c208b\nStep 5/6 : RUN pip install -r requirements.txt\n ---> Running in 60b5364841ee\nCollecting click==6.7 (from -r requirements.txt (line 1))\n  Downloading https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl (71kB)\nCollecting dophon==1.1.7 (from -r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/98/81/33d06b15b37ef0715308a764c1cbf7a53ab69000d2bf7f029365b1c760cd/dophon-1.1.7-py3-none-any.whl (59kB)\nCollecting Flask==1.0.2 (from -r requirements.txt (line 3))\n  Downloading https://files.pythonhosted.org/packages/7f/e7/08578774ed4536d3242b14dacb4696386634607af824ea997202cd0edb4b/Flask-1.0.2-py2.py3-none-any.whl (91kB)\nCollecting itsdangerous==0.24 (from -r requirements.txt (line 4))\n  Downloading https://files.pythonhosted.org/packages/dc/b4/a60bcdba945c00f6d608d8975131ab3f25b22f2bcfe1dab221165194b2d4/itsdangerous-0.24.tar.gz (46kB)\nCollecting Jinja2==2.10 (from -r requirements.txt (line 5))\n  Downloading https://files.pythonhosted.org/packages/7f/ff/ae64bacdfc95f27a016a7bed8e8686763ba4d277a78ca76f32659220a731/Jinja2-2.10-py2.py3-none-any.whl (126kB)\nCollecting MarkupSafe==1.0 (from -r requirements.txt (line 6))\n  Downloading https://files.pythonhosted.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz\nCollecting six==1.11.0 (from -r requirements.txt (line 7))\n  Downloading https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl\nCollecting Werkzeug==0.14.1 (from -r requirements.txt (line 8))\n  Downloading https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)\nCollecting PyMySQL>=0.9.0 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/a7/7d/682c4a7da195a678047c8f1c51bb7682aaedee1dca7547883c3993ca9282/PyMySQL-0.9.2-py2.py3-none-any.whl (47kB)\nCollecting urllib3>=1.23 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl (133kB)\nCollecting Flask-Bootstrap>=3.3.7.1 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/88/53/958ce7c2aa26280b7fd7f3eecbf13053f1302ee2acb1db58ef32e1c23c2a/Flask-Bootstrap-3.3.7.1.tar.gz (456kB)\nCollecting schedule>=0.5.0 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/df/2c/3a94d846682a4fb94966e65bca19a1acb6f7dd85977f4e4cece6e677b757/schedule-0.5.0-py2.py3-none-any.whl\nCollecting pyOpenSSL>=18.0.0 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/96/af/9d29e6bd40823061aea2e0574ccb2fcf72bfd6130ce53d32773ec375458c/pyOpenSSL-18.0.0-py2.py3-none-any.whl (53kB)\nCollecting gevent>=1.3.5 (from dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/b6/2b/6be042be1023df54889d9e2a90b167f6fea65445384fccfdfd988cc16239/gevent-1.3.5-cp36-cp36m-manylinux1_x86_64.whl (4.6MB)\nCollecting cryptography (from PyMySQL>=0.9.0->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/c2/fa/fa9a8933c285895935d1392922fe721e9cb1b2c1881d14f149213a227ee3/cryptography-2.3-cp34-abi3-manylinux1_x86_64.whl (2.1MB)\nCollecting dominate (from Flask-Bootstrap>=3.3.7.1->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/43/b2/3b7d67dd59dab93ae08569384b254323516e8868b453eea5614a53835baf/dominate-2.3.1.tar.gz\nCollecting visitor (from Flask-Bootstrap>=3.3.7.1->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/d7/58/785fcd6de4210049da5fafe62301b197f044f3835393594be368547142b0/visitor-0.1.3.tar.gz\nCollecting greenlet>=0.4.13; platform_python_implementation == \"CPython\" (from gevent>=1.3.5->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/de/7b/cb662640540725deb0627264f6b890ee2b7725848b8cbca49e27bf3273c6/greenlet-0.4.14-cp36-cp36m-manylinux1_x86_64.whl (41kB)\nCollecting asn1crypto>=0.21.0 (from cryptography->PyMySQL>=0.9.0->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/ea/cd/35485615f45f30a510576f1a56d1e0a7ad7bd8ab5ed7cdc600ef7cd06222/asn1crypto-0.24.0-py2.py3-none-any.whl (101kB)\nCollecting idna>=2.1 (from cryptography->PyMySQL>=0.9.0->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl (58kB)\nCollecting cffi!=1.11.3,>=1.7 (from cryptography->PyMySQL>=0.9.0->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/6d/c0/47db8f624f3e4e2f3f27be03a93379d1ba16a1450a7b1aacfa0366e2c0dd/cffi-1.11.5-cp36-cp36m-manylinux1_x86_64.whl (421kB)\nCollecting pycparser (from cffi!=1.11.3,>=1.7->cryptography->PyMySQL>=0.9.0->dophon==1.1.7->-r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/8c/2d/aad7f16146f4197a11f8e91fb81df177adcc2073d36a17b1491fd09df6ed/pycparser-2.18.tar.gz (245kB)\nBuilding wheels for collected packages: itsdangerous, MarkupSafe, Flask-Bootstrap, dominate, visitor, pycparser\n  Running setup.py bdist_wheel for itsdangerous: started\n  Running setup.py bdist_wheel for itsdangerous: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/2c/4a/61/5599631c1554768c6290b08c02c72d7317910374ca602ff1e5\n  Running setup.py bdist_wheel for MarkupSafe: started\n  Running setup.py bdist_wheel for MarkupSafe: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/33/56/20/ebe49a5c612fffe1c5a632146b16596f9e64676768661e4e46\n  Running setup.py bdist_wheel for Flask-Bootstrap: started\n  Running setup.py bdist_wheel for Flask-Bootstrap: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/e8/b9/93/ef6ac3b8ead2d72cbcc042b9d58b613aaf47e533b9dc5b5999\n  Running setup.py bdist_wheel for dominate: started\n  Running setup.py bdist_wheel for dominate: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/86/7c/76/a514f343c9e4f85f4c98fe13138ab9c8f756647155c4c1f25e\n  Running setup.py bdist_wheel for visitor: started\n  Running setup.py bdist_wheel for visitor: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/68/b0/a2/cc8c7cf94ca3d1088a7d2e27936c1e0da170e05f560973e8dd\n  Running setup.py bdist_wheel for pycparser: started\n  Running setup.py bdist_wheel for pycparser: finished with status 'done'\n  Stored in directory: /root/.cache/pip/wheels/c0/a1/27/5ba234bd77ea5a290cbf6d675259ec52293193467a12ef1f46\nSuccessfully built itsdangerous MarkupSafe Flask-Bootstrap dominate visitor pycparser\nInstalling collected packages: click, MarkupSafe, Jinja2, itsdangerous, Werkzeug, Flask, six, asn1crypto, idna, pycparser, cffi, cryptography, PyMySQL, urllib3, dominate, visitor, Flask-Bootstrap, schedule, pyOpenSSL, greenlet, gevent, dophon\nSuccessfully installed Flask-1.0.2 Flask-Bootstrap-3.3.7.1 Jinja2-2.10 MarkupSafe-1.0 PyMySQL-0.9.2 Werkzeug-0.14.1 asn1crypto-0.24.0 cffi-1.11.5 click-6.7 cryptography-2.3 dominate-2.3.1 dophon-1.1.7 gevent-1.3.5 greenlet-0.4.14 idna-2.7 itsdangerous-0.24 pyOpenSSL-18.0.0 pycparser-2.18 schedule-0.5.0 six-1.11.0 urllib3-1.23 visitor-0.1.3\nYou are using pip version 10.0.1, however version 18.0 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nRemoving intermediate container 60b5364841ee\n ---> 4f7f51326068\nStep 6/6 : CMD [\"python\",\"./Bootstrap.py\"]\n ---> Running in a01240a5675c\nRemoving intermediate container a01240a5675c\n ---> 7fe9614a4948\nSuccessfully built 7fe9614a4948\nSuccessfully tagged demo:latest\nSECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have '-rwxr-xr-x' permissions. It is recommended to double check and reset permissions for sensitive files and directories.\nINFO : (2018-08-14 12:11:04) ==> ::: 运行镜像\n6686125b7b5ccef21240181bc08da3aabbf0765b72d4ae404d2cc15aabbd0999\nINFO : (2018-08-14 12:11:06) ==> ::: 打印容器内部地址(空地址代表启动失败)\n'172.17.0.2'\nINFO : (2018-08-14 12:11:07) ==> ::: 打印容器载体地址\n10.10.75.1\nINFO : (2018-08-14 12:11:07) ==> ::: 启动检测容器端口\nINFO : (2018-08-14 12:11:07) ==> ::: 容器启动完毕\nINFO : (2018-08-14 12:12:17) ==> ::: 容器存活性检查:http://10.10.75.1:80\nINFO : (2018-08-14 12:12:27) ==> ::: 容器存活性检查:http://10.10.75.1:80\nINFO : (2018-08-14 12:12:38) ==> ::: 容器存活性检查:http://10.10.75.1:80\n```\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ca11MeE/dophon",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dophon",
    "package_url": "https://pypi.org/project/dophon/",
    "platform": "",
    "project_url": "https://pypi.org/project/dophon/",
    "project_urls": {
      "Homepage": "https://github.com/Ca11MeE/dophon"
    },
    "release_url": "https://pypi.org/project/dophon/1.2.6/",
    "requires_dist": [
      "flask (>=1.0.2)",
      "PyMySQL (>=0.9.0)",
      "urllib3 (>=1.23)",
      "Flask-Bootstrap (>=3.3.7.1)",
      "gevent (>=1.3.5)",
      "schedule (>=0.5.0)"
    ],
    "requires_python": "",
    "summary": "dophon web framework like springboot",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10533562,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1909355aa2fb24ade6bdc9dd5b822bf9385a2695f6bfb87d22612a429533e5c0",
        "md5": "d9bbb99c807424bd66ffcafd2fc9f7b3",
        "sha256": "ccb7ea48dc9458a3a89ff8c71d816ef17829c121ba1ed311b6a91a4ec5c0d0b1"
      },
      "downloads": -1,
      "filename": "dophon-1.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d9bbb99c807424bd66ffcafd2fc9f7b3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 45790,
      "upload_time": "2018-09-13T08:09:50",
      "upload_time_iso_8601": "2018-09-13T08:09:50.063021Z",
      "url": "https://files.pythonhosted.org/packages/19/09/355aa2fb24ade6bdc9dd5b822bf9385a2695f6bfb87d22612a429533e5c0/dophon-1.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}