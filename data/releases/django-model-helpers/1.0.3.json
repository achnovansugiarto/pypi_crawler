{
  "info": {
    "author": "Ramast Magdy",
    "author_email": "ramast.com@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Model Helpers\n-------------\n\nModel helpers are small collection of django functions and classes that make working\nwith models easier. All functions here are compliant with pylint and has\ntest cases with over 95% code coverage. This doc describe each of these\nhelpers.\n\n**model\\_helpers.upload\\_to**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPass ``model_helpers.upload_to`` as ``upload_to`` parameter for any\nFileField or ImageField. This will generates random file name and return\nit while keeping the original file extension. each model get its own\nstorage folder named after model’s name.\n\n``upload_to`` function also block files with certain harmful extentions\nlike “php” or “py” from being uploaded.\n\n**Sample usage:**\n\n::\n\n    import model_helpers\n\n    class Profile(models.model):\n        name = CharField(max_length=100)\n        picture = ImageField(upload_to=model_helpers.upload_to)\n\nuploaded images for this model will be stored in:\n``media/Profile/<current_year>/<slugified_original_filename>``.\n\n**Note:** If filename exceeds 40 character, it will be trimmedl.\n\ncached\\_model\\_property decorator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cached_model_property`` is a decorator for model functions that takes\nno arguments. The decorator convert the function into a property that\nsupport caching out of the box\n\n**Note**: ``cached_model_property`` is totally different from django’s\n``cached_property`` the later is not true caching but rather memorizing\nfunction’s return value.\n\n**Sample usage:**\n\n::\n\n    class Team(models.Model):\n        @cached_model_property\n        def points(self):\n            # Do complex DB queries\n            return result\n\n        @cached_model_property(readonly=False)\n        def editable_points(self):\n            # get result\n            return result\n\n        @cached_model_property(cache_timeout=1)\n        def one_second_cache(self):\n            # get result\n            return result\n\nNow try\n\n::\n\n    team = Team.objects.first()\n\n-  ``team.points`` <– complex DB queries will happen, result will be\n   returned\n-  ``team.points`` <– this time result is returned from cache (points\n   function is not called\n-  ``del team.points`` <– points value has been removed from cache\n-  ``team.points`` <– complex DB queries will happen, result will be\n   returned\n\n**How does it work?**: first time the decorator store the function\noutput in the cache with\n``key = \"<model_class>_<instance.pk>_<function_name>\"`` so if you have\ntwo models with same name, or have model that provide no primary key you\ncan’t use this decorator.\n\nset ``readonly`` parameter to ``False`` to make the property writeable\n\n``team.editable_points = 88``\n\nIn this case the assigned value will replace the value stored in the\ncache\n\n``team.editable_points`` returns 88\n\nI personally don’t use the writable cached property option but might be\nuseful to someone else\n\n   from\n\nto\n\nChoices class *inspired by `Django Choices`_.*\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDealing with Django’s ``choices`` attribute is a pain. Here is a proper\nway of implementing choice field in Django\n\n::\n\n    class Student(models.Model):\n        FRESHMAN = 'FR'\n        SOPHOMORE = 'SO'\n        JUNIOR = 'JR'\n        SENIOR = 'SR'\n        YEAR_IN_SCHOOL_CHOICES = (\n            (FRESHMAN, 'Freshman'),\n            (SOPHOMORE, 'Sophomore'),\n            (JUNIOR, 'Junior'),\n            (SENIOR, 'Senior'),\n        )\n        year_in_school = models.CharField(\n                            max_length=2,\n                            choices=YEAR_IN_SCHOOL_CHOICES,\n                            default=FRESHMAN)\n\nThen you can do\n\n::\n\n    student = Student.objects.first()\n    if student.year_in_school == Student.SENIOR:\n          # do some senior stuff\n\nWith Choices class this becomes\n\n::\n\n    YEAR_IN_SCHOOL_CHOICES = Choices({\n        \"freshman\": \"FR\",\n        \"sophomore\": \"SO\",\n        \"junior\": \"JR\",\n        \"Senior\": \"SR\"\n    })\n\n\n    class Student(models.Model):\n        year_in_school = models.CharField(\n                            max_length=2,\n                            choices=YEAR_IN_SCHOOL_CHOICES(),\n                            default=YEAR_IN_SCHOOL_CHOICES.freshman)\n\nThen you can do\n\n::\n\n    student = Student.objects.first()\n    if student.year_in_school == YEAR_IN_SCHOOL_CHOICES.senior:\n          # do some senior stuff\n\n``YEAR_IN_SCHOOL_CHOICES`` is a readonly OrderedDict and you can treat\nit as such. for example: ``YEAR_IN_SCHOOL_CHOICES.keys()`` or\n``YEAR_IN_SCHOOL_CHOICES.iteritems()``\n\n``Choices`` class is more flexible because it allow you to specify 3\nvalues. choice name, choice db value, choice display name. The example\nabove can be better written like that\n\n::\n\n     YEAR_IN_SCHOOL_CHOICES = Choices({\n         \"freshman\": {\"id\": 0, \"display\": \"New comer\"},\n         \"sophomore\": 1,\n         \"junior\": 2,\n         \"Senior\": 3\n      }, order_by=\"id\")\n\n\n    class Student(models.Model):\n        year_in_school = models.SmalllIntegerField(\n                            choices=YEAR_IN_SCHOOL_CHOICES(),\n                            default=YEAR_IN_SCHOOL_CHOICES.freshman)\n\nThen you can do something like this\n\n::\n\n    Student.objects.filter(\n        year_in_school__gt=YEAR_IN_SCHOOL_CHOICES.sophomore)\n\nTo return all students in grades higher than Sophomore\n\n-  A choice can be defined as key/value ``\"sophomore\": 1`` in which case\n   display name will be code name capitalized ``\"Sophomore\"`` and will\n   be saved in DB as number ``1``\n-  A choice can be fully defined as key/dict\n   ``\"freshman\": {\"id\": 0, \"display\": \"New comer\"}`` in which case\n   display name will be ``\"New comer\"`` and id will be ``0``\n\nDefining extra keys to use in your code.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAs mentioned before ``Choices`` can be treated as an OrderedDictionary\nand so you should feel free to use the free functionality, for example\nadding extra keys\n\n::\n\n        AVAILABLE_SETTINGS = Choices({\n            \"max_page_width\": {\"id\": 0, \"display\": \"Maximum page width in pixels\", \"default\": 100})\n\nthen in your code you can do\n\n::\n\n    settings = Settings.objects.filter(name=AVAILABLE_SETTINGS.max_page_width).first()\n    if settings:\n        return settings.value\n    return AVAILABLE_SETTINGS[\"max_page_width\"][\"default\"]\n\nOrdering your ``Choices``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAssuming you have a big list of choices you might prefer to ask Choices\nclass to order them for you.\n\n**Example:**\n\n::\n\n    Choices({\n         \"usa\": {\"display\": \"United States\", \"id\": 0},\n         \"egypt\": 1,\n         \"uk\": {\"display\": \"United Kingdom\", \"id\": 2},\n         \"ua\": {\"display\": \"Ukraine\", \"id\": 3}\n        }, order_by=\"display\")\n\nThe fields will be in the order “Egypt”, “Ukraine”, “United Kingdom”,\n“United States”.\n\n``order_by=\"id\"`` will order the list by id\n\nIf you don’t want any sort of ordering then set ``order_by=None`` and in\nthis case its better that you pass your choices as tuple of dictionaries\nto maintain order\n\n::\n\n    Choices((\n         (\"uk\", {\"display\": \"United Kingdom\", \"id\": 2),\n         (\"usa\", {\"display\": \"United States\", \"id\": 0),\n         (\"egypt\", 1),\n         (\"ua\": {\"display\": \"Ukraine\", \"id\": 3})\n        ), order_by=None)\n\n**Note:** By default choices are ordered by display name\n\nUseful functions of ``Choices`` class\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``get_display_name``: given choice id, return the display name of\n   that id. same as model’s ``get_<field_name>_display()``\n-  ``get_code_name``: Given choice id same as ``get_display_name`` but\n   return code name\n-  ``get_value``: Given choice id, return value of any key defined\n   inside choice entry\n\n**Example:**\n\n::\n\n    CHOICES_EXAMPLE = Choices({\"my_key\": {\"id\": 0, \"display\": \"Display Of My Key\", \"additional_key\": 1234})\n    >>> CHOICES_EXAMPLE.get_display_name(0)\n    \"Display Of My Key\"\n    >>> CHOICES_EXAMPLE.get_code_name(0)\n    \"my_key\"\n    >>> CHOICES_EXAMPLE.get_value(0, \"additional_key\")\n    1234\n\n**model\\_helpers.KeyValueField**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes you need to have a simple key/value field. most developers\nwould rely on ``JsonField`` which is good for some use cases but people\nusing django admin may not like to modify json object that look like\nthis\n\n::\n\n    {\"key1\": \"value of some sort\", \"key2\": \"value containing \\\" character\"}\n\n\n``KeyValueField`` serialize objects in a more readable way. the\ndictionary above would be stored and displayed like this.\n\n::\n\n    key1 = value of some sort\n    key2 = value containing \" character\n\nThat’s it. For you as a developer you will access your ``KeyValueField``\nas a dictionary.\n\n**Example**:\n\n::\n\n    class MyModel(models.Model):\n         options = KeyValueField(separator=\":\")\n\n    >> my_model.options = \"key1 : val1 \\n key2 : val2\"\n    >> my_model.options\n    {\"key1\": \"val1\", \"key2\": \"val2\"}\n    >>> str(my_model.options)\n    \"key1 : val1 \\n key2 : val2\"\n\nYou can find more examples in the test file\n``tests/test_key_value_field.py``\n\n**``KeyValueField`` is NOT good for:**\n\n-  Maintain original value’s datatype. all values are converted to\n   unicode strings\n-  Store a multiline value\n\n\n.. _Django Choices: https://pypi.python.org/pypi/django-choices/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rewardz/django_model_helpers",
    "keywords": "django models keyvaluefield cached_model_property",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-model-helpers",
    "package_url": "https://pypi.org/project/django-model-helpers/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-model-helpers/",
    "project_urls": {
      "Homepage": "https://github.com/rewardz/django_model_helpers"
    },
    "release_url": "https://pypi.org/project/django-model-helpers/1.0.3/",
    "requires_dist": [
      "Django (>=1.5.0)",
      "nose; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Helpful functions and classes for your django app's models",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13425001,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fa8b4df16019fcc27d13d87f4f03b10d7b51605023d8043abcbdbaa09c72531",
        "md5": "f7455e2dc72ea81a86aea300de29476e",
        "sha256": "fc301ffb3d2118bc0a50a15e971e3b488bc57de30a83ee6233be2ef6c6b18cb4"
      },
      "downloads": -1,
      "filename": "django_model_helpers-1.0.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "f7455e2dc72ea81a86aea300de29476e",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 13597,
      "upload_time": "2015-12-17T05:29:37",
      "upload_time_iso_8601": "2015-12-17T05:29:37.406864Z",
      "url": "https://files.pythonhosted.org/packages/4f/a8/b4df16019fcc27d13d87f4f03b10d7b51605023d8043abcbdbaa09c72531/django_model_helpers-1.0.3-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c22146d9d20cd78d7f355b15ec82b9330650bc6feeeeaf18fb2b630331997fd0",
        "md5": "540e166c8a109cfa9a7c4d79316ad083",
        "sha256": "7be80b506a9e6d3c303b2af217b3c8b0b728ea45b5ccc5e4403dd2e89f559bed"
      },
      "downloads": -1,
      "filename": "django_model_helpers-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "540e166c8a109cfa9a7c4d79316ad083",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10517,
      "upload_time": "2015-12-17T05:29:44",
      "upload_time_iso_8601": "2015-12-17T05:29:44.058988Z",
      "url": "https://files.pythonhosted.org/packages/c2/21/46d9d20cd78d7f355b15ec82b9330650bc6feeeeaf18fb2b630331997fd0/django_model_helpers-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}