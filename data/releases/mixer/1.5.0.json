{
  "info": {
    "author": "Kirill Klenov",
    "author_email": "horneds@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Natural Language :: Russian",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "|logo| Mixer\n############\n\n.. _description:\n\nMixer is application to generate instances of Django or SQLAlchemy models.\nIt's useful for testing and fixtures replacement.\nFast and convenient test-data generation.\n\nMixer supports:\n\n    - Django_;\n    - SQLAlchemy_;\n    - Flask-SqlAlchemy;\n    - Mongoengine_;\n    - Custom schemes;\n\n.. _badges:\n\n.. image:: https://secure.travis-ci.org/klen/mixer.png?branch=develop\n    :target: http://travis-ci.org/klen/mixer\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/klen/mixer/badge.png?branch=develop\n    :target: https://coveralls.io/r/klen/mixer\n    :alt: Coverals\n\n.. image:: https://pypip.in/v/mixer/badge.png\n    :target: https://crate.io/packages/mixer\n    :alt: Version\n\n.. image:: https://pypip.in/d/mixer/badge.png\n    :target: https://crate.io/packages/mixer\n    :alt: Downloads\n\n.. image:: https://dl.dropboxusercontent.com/u/487440/reformal/donate.png\n    :target: https://www.gittip.com/klen/\n    :alt: Donate\n\n\n.. _documentation:\n\n\n**Docs are available at https://mixer.readthedocs.org/. Pull requests with documentation enhancements and/or fixes are awesome and most welcome.**\n\nОписание на русском языке: http://klen.github.io/mixer-ru.html\n\n\n.. _contents:\n\n.. contents::\n\n\n.. _requirements:\n\nRequirements\n=============\n\n- python (2.6, 2.7, 3.2, 3.3)\n- Django (1.4, 1.5) for django ORM suport;\n- SQLAlchemy for SQLAlchemy ORM suport;\n- Mongoengine for Mongoengine ODM support;\n- Flask-SQLALchemy for SQLAlchemy ORM suport and integration as Flask application;\n\n\n.. _installation:\n\nInstallation\n=============\n\n**Mixer** should be installed using pip: ::\n\n    pip install mixer\n\n\n.. _usage:\n\nUsage\n=====\n\n |   By default Mixer try to generate fake data. If you want randomize values\n |   initialize the Mixer by manual like: Mixer(fake=False)\n\n |   By default Mixer saves generated objects in database. If you want disable\n |   this, initialize the Mixer by manual like: Mixer(commit=False)\n\nDjango\n------\nQuick example: ::\n\n    from mixer.backend.django import mixer\n    from customapp.models import User, UserMessage\n\n    # Generate random User\n    user = mixer.blend(User)\n\n    # Generate UserMessage\n    message = mixer.blend(UserMessage, user=user)\n\n    # Generate UserMessage and User. Set User.username to 'testname'.\n    message = mixer.blend(UserMessage, user__username='testname')\n\n    # Generate SomeModel from SomeApp and select FK or M2M values from db\n    some = mixer.blend('someapp.somemodel', somerelation=mixer.select)\n\n    # Generate SomeModel from SomeApp and force a value of field with default to random\n    some = mixer.blend('someapp.somemodel', money=mixer.random)\n\n    # Generate 5 SomeModel instances and get a field values from custom generator\n    some_models = mixer.cycle(5).blend('somemodel', company=(company for company in companies))\n\n\nFlask, Flask-SQLAlchemy\n-----------------------\nQuick example: ::\n\n    from mixer.backend.flask import mixer\n    from models import User, UserMessage\n\n    mixer.init_app(self.app)\n\n    # Generate random User\n    user = mixer.blend(User)\n\n    # Generate UserMessage\n    message = mixer.blend(UserMessage, user=user)\n\n    # Generate UserMessage and User. Set User.username to 'testname'.\n    message = mixer.blend(UserMessage, user__username='testname')\n\n    # Generate SomeModel and select FK or M2M values from db\n    some = mixer.blend('project.models.SomeModel', somerelation=mixer.select)\n\n    # Generate SomeModel from SomeApp and force a value of field with default to random\n    some = mixer.blend('project.models.SomeModel', money=mixer.random)\n\n    # Generate 5 SomeModel instances and get a field values from custom generator\n    some_models = mixer.cycle(5).blend('project.models.SomeModel', company=(company for company in companies))\n\n\nSQLAlchemy\n----------\n\nExample of initialization: ::\n\n    from mixer.backend.sqlalchemy import Mixer\n\n    ENGINE = create_engine('sqlite:///:memory:')\n    BASE = declarative_base()\n    SESSION = sessionmaker(bind=ENGINE)\n\n    mixer = Mixer(session=SESSION(), commit=True)\n    role = mixer.blend('package.models.Role')\n\n\nAlso see `Flask, Flask-SQLALchemy`_.\n\n\nMongoengine\n-----------\n\nExample usage: ::\n\n    from mixer.backend.mongoengine import mixer\n    \n    class User(Document):\n        created_at = DateTimeField(default=datetime.datetime.now)\n        email = EmailField(required=True)\n        first_name = StringField(max_length=50)\n        last_name = StringField(max_length=50)\n\n    class Post(Document):\n        title = StringField(max_length=120, required=True)\n        author = ReferenceField(User)\n        tags = ListField(StringField(max_length=30))\n\n    post = mixer.blend(Post, author__username='foo')\n\n\nCommon usage\n------------\nQuick example: ::\n\n        from mixer.main import mixer\n\n        class Test:\n            one = int\n            two = int\n            name = str\n\n        class Scheme:\n            name = str\n            money = int\n            male = bool\n            prop = Test\n\n        scheme = mixer.blend(Scheme, prop__one=1)\n\n.. _custom:\n\nCustom fields\n-------------\n\nMixer allows you to define generators for fields by manualy.\n\nQuick example: ::\n\n        from mixer.main import mixer\n\n        class Test:\n            id = int\n            name = str\n\n        mixer.register(Test, {\n            'name': lambda: 'John',\n            'id': lambda: str(mixer.g.get_positive_integer())\n        })\n\n        test = mixer.blend(Test)\n        test.name == 'John'\n        isinstance(test.id, str)\n\n        # You could pinned just a value to field\n        mixer.register(Test, {\n            'name': 'Just John'\n        })\n        test = mixer.blend(Test)\n        test.name == 'Just John'\n\nAlso you can make your ow factory for field types: ::\n\n    from mixer.backend.django import Mixer, GenFactory\n\n    def get_func(*args, **kwargs):\n        return \"Always same\"\n\n    class MyFactory(GenFactory):\n        generators = {\n            models.CharField: get_func\n        }\n\n    mixer = Mixer(factory=MyFactory)\n\n\n.. _bagtracker:\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or\nannoyances please report them to the issue tracker\nat https://github.com/klen/mixer/issues\n\n\n.. _contributing:\n\nContributing\n============\n\nDevelopment of starter happens at github: https://github.com/klen/mixer\n\n\n.. _contributors:\n\nContributors\n=============\n\n* klen_ (horneds@gmail.com)\n\n\n.. _license:\n\nLicense\n=======\n\nLicensed under a `BSD license`_.\n\n\n.. _links:\n\n.. _BSD license: http://www.linfo.org/bsdlicense.html\n.. _klen: http://klen.github.io\n.. _SQLAlchemy: http://www.sqlalchemy.org/\n.. _Flask: http://flask.pocoo.org/\n.. _Django: http://djangoproject.org/\n.. _Mongoengine: http://mongoengine.org/\n.. |logo| image:: https://raw.github.com/klen/mixer/develop/docs/_static/logo.png\n                  :width: 100",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mixer/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/klen/mixer",
    "keywords": "django,flask,sqlalchemy,testing,mock,stub,mongoengine,data",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mixer",
    "package_url": "https://pypi.org/project/mixer/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/mixer/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/klen/mixer"
    },
    "release_url": "https://pypi.org/project/mixer/1.5.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mixer -- Is a fixtures replacement. Supported Django ORM, SqlAlchemy ORM, Mongoengine ODM and custom python objects.",
    "version": "1.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13270206,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "80d3be3e6334f1d52f4c4358f3c4ab6a1baf8c4fe0b51ee3b981b31762b1cb95",
        "md5": "c23671434596df3dccda49c80d81dbea",
        "sha256": "d225408822b9e09fcc9361851527ea707e3a8ff018b7d9a8a4c556c61815de90"
      },
      "downloads": -1,
      "filename": "mixer-1.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c23671434596df3dccda49c80d81dbea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31567,
      "upload_time": "2013-11-22T10:34:22",
      "upload_time_iso_8601": "2013-11-22T10:34:22.946853Z",
      "url": "https://files.pythonhosted.org/packages/80/d3/be3e6334f1d52f4c4358f3c4ab6a1baf8c4fe0b51ee3b981b31762b1cb95/mixer-1.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}