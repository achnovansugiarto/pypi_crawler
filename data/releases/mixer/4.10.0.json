{
  "info": {
    "author": null,
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Home-page: http://github.com/klen/mixer\nAuthor: Kirill Klenov\nAuthor-email: horneds@gmail.com\nLicense: BSD\nDescription: |logo| Mixer\n        ############\n        \n        .. _description:\n        \n        Mixer is application to generate instances of Django or SQLAlchemy models.\n        It's useful for testing and fixtures replacement.\n        Fast and convenient test-data generation.\n        \n        Mixer supports:\n        \n            - Django_;\n            - SQLAlchemy_;\n            - Flask-SqlAlchemy;\n            - Peewee_;\n            - Pony_;\n            - Mongoengine_;\n            - Custom schemes;\n        \n        .. _badges:\n        \n        .. image:: https://secure.travis-ci.org/klen/mixer.png?branch=develop\n            :target: http://travis-ci.org/klen/mixer\n            :alt: Build Status\n        \n        .. image:: https://coveralls.io/repos/klen/mixer/badge.png?branch=develop\n            :target: https://coveralls.io/r/klen/mixer\n            :alt: Coverals\n        \n        .. .. image:: https://pypip.in/v/mixer/badge.png\n            .. :target: https://crate.io/packages/mixer\n            .. :alt: Version\n        \n        .. .. image:: https://pypip.in/d/mixer/badge.png\n            .. :target: https://crate.io/packages/mixer\n            .. :alt: Downloads\n        \n        .. image:: https://dl.dropboxusercontent.com/u/487440/reformal/donate.png\n            :target: https://www.gittip.com/klen/\n            :alt: Donate\n        \n        \n        .. _documentation:\n        \n        \n        **Docs are available at https://mixer.readthedocs.org/. Pull requests with documentation enhancements and/or fixes are awesome and most welcome.**\n        \n        Описание на русском языке: http://klen.github.io/mixer-ru.html\n        \n        \n        .. _contents:\n        \n        .. contents::\n        \n        \n        .. _requirements:\n        \n        Requirements\n        =============\n        \n        - python (2.6, 2.7, 3.2, 3.3)\n        - Django (1.5, 1.6, 1.7) for django ORM suport;\n        - SQLAlchemy for SQLAlchemy ORM suport;\n        - Mongoengine for Mongoengine ODM support;\n        - Flask-SQLALchemy for SQLAlchemy ORM suport and integration as Flask application;\n        \n        \n        .. _installation:\n        \n        Installation\n        =============\n        \n        **Mixer** should be installed using pip: ::\n        \n            pip install mixer\n        \n        \n        .. _usage:\n        \n        Usage\n        =====\n        \n         |   By default Mixer try to generate fake data. If you want randomize values\n         |   initialize the Mixer by manual like: Mixer(fake=False)\n        \n         |   By default Mixer saves generated objects in database. If you want disable\n         |   this, initialize the Mixer by manual like: Mixer(commit=False)\n        \n        Django\n        ------\n        Quick example: ::\n        \n            from mixer.backend.django import mixer\n            from customapp.models import User, UserMessage\n        \n            # Generate random User\n            user = mixer.blend(User)\n        \n            # Generate UserMessage\n            message = mixer.blend(UserMessage, user=user)\n        \n            # Generate UserMessage and User. Set User.username to 'testname'.\n            message = mixer.blend(UserMessage, user__username='testname')\n        \n            # Generate SomeModel from SomeApp and select FK or M2M values from db\n            some = mixer.blend('someapp.somemodel', somerelation=mixer.SELECT)\n        \n            # Generate SomeModel from SomeApp and force a value of field with default to random\n            some = mixer.blend('someapp.somemodel', money=mixer.RANDOM)\n        \n            # Generate 5 SomeModel instances and get a field values from custom generator\n            some_models = mixer.cycle(5).blend('somemodel', company=(company for company in companies))\n        \n        \n        Flask, Flask-SQLAlchemy\n        -----------------------\n        Quick example: ::\n        \n            from mixer.backend.flask import mixer\n            from models import User, UserMessage\n        \n            mixer.init_app(self.app)\n        \n            # Generate random User\n            user = mixer.blend(User)\n        \n            # Generate UserMessage\n            message = mixer.blend(UserMessage, user=user)\n        \n            # Generate UserMessage and User. Set User.username to 'testname'.\n            message = mixer.blend(UserMessage, user__username='testname')\n        \n            # Generate SomeModel and select FK or M2M values from db\n            some = mixer.blend('project.models.SomeModel', somerelation=mixer.SELECT)\n        \n            # Generate SomeModel from SomeApp and force a value of field with default to random\n            some = mixer.blend('project.models.SomeModel', money=mixer.RANDOM)\n        \n            # Generate 5 SomeModel instances and get a field values from custom generator\n            some_models = mixer.cycle(5).blend('project.models.SomeModel', company=(company for company in companies))\n        \n        \n        Support for Flask-SQLAlchemy models that have `__init__` arguments\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        \n        For support this scheme, just create your own mixer class, like this: ::\n        \n            from mixer.backend.sqlalchemy import Mixer\n        \n            class MyOwnMixer(Mixer):\n        \n                def populate_target(self, values):\n                    target = self.__scheme(**values)\n                    return target\n        \n            mixer = MyOwnMixer()\n        \n        \n        SQLAlchemy\n        ----------\n        \n        Example of initialization: ::\n        \n            from mixer.backend.sqlalchemy import Mixer\n        \n            ENGINE = create_engine('sqlite:///:memory:')\n            BASE = declarative_base()\n            SESSION = sessionmaker(bind=ENGINE)\n        \n            mixer = Mixer(session=SESSION(), commit=True)\n            role = mixer.blend('package.models.Role')\n        \n        \n        Also see `Flask, Flask-SQLALchemy`_.\n        \n        \n        Mongoengine\n        -----------\n        \n        Example usage: ::\n        \n            from mixer.backend.mongoengine import mixer\n            \n            class User(Document):\n                created_at = DateTimeField(default=datetime.datetime.now)\n                email = EmailField(required=True)\n                first_name = StringField(max_length=50)\n                last_name = StringField(max_length=50)\n        \n            class Post(Document):\n                title = StringField(max_length=120, required=True)\n                author = ReferenceField(User)\n                tags = ListField(StringField(max_length=30))\n        \n            post = mixer.blend(Post, author__username='foo')\n        \n        \n        Common usage\n        ------------\n        Quick example: ::\n        \n                from mixer.main import mixer\n        \n                class Test:\n                    one = int\n                    two = int\n                    name = str\n        \n                class Scheme:\n                    name = str\n                    money = int\n                    male = bool\n                    prop = Test\n        \n                scheme = mixer.blend(Scheme, prop__one=1)\n        \n        \n        DB commits\n        ----------\n        \n        By default 'django', 'flask', 'mongoengine' backends tries to save objects\n        to database. For prevent this behaviour init `mixer` manually: ::\n        \n            from mixer.backend.django import Mixer\n        \n            mixer = Mixer(commit=False)\n        \n        \n        Or you can use mixer with custom params as context: ::\n        \n            from mixer.backend.django import mixer\n        \n            # Will be save to db\n            user1 = mixer.blend('auth.user')\n        \n            # Will not be save to db\n            with mixer.ctx(commit=False):\n                user2 = mixer.blend('auth.user')\n                \n        \n        .. _custom:\n        \n        Custom fields\n        -------------\n        \n        Mixer allows you to define generators for fields by manualy.\n        \n        Quick example: ::\n        \n                from mixer.main import mixer\n        \n                class Test:\n                    id = int\n                    name = str\n        \n                mixer.register(Test,\n                    name=lambda: 'John',\n                    id=lambda: str(mixer.g.get_positive_integer())\n                )\n        \n                test = mixer.blend(Test)\n                test.name == 'John'\n                isinstance(test.id, str)\n        \n                # You could pinned just a value to field\n                mixer.register(Test, name='Just John')\n                test = mixer.blend(Test)\n                test.name == 'Just John'\n        \n        Also you can make your own factory for field types: ::\n        \n            from mixer.backend.django import Mixer, GenFactory\n        \n            def get_func(*args, **kwargs):\n                return \"Always same\"\n        \n            class MyFactory(GenFactory):\n                generators = {\n                    models.CharField: get_func\n                }\n        \n            mixer = Mixer(factory=MyFactory)\n        \n        .. _middlewares:\n        \n        Middlewares\n        -----------\n        \n        You can add middleware layers to process generation: ::\n        \n            from mixer.backend.django import mixer\n        \n            # Register middleware to model\n            @mixer.middleware('auth.user')\n            def encrypt_password(user):\n                user.set_password('test')\n                return user\n        \n        You can add several middlewares.\n        Each middleware should get one argument (generated value) and return them.\n        \n        \n        .. _bugtracker:\n        \n        Bug tracker\n        ===========\n        \n        If you have any suggestions, bug reports or\n        annoyances please report them to the issue tracker\n        at https://github.com/klen/mixer/issues\n        \n        \n        .. _contributing:\n        \n        Contributing\n        ============\n        \n        Development of starter happens at github: https://github.com/klen/mixer\n        \n        \n        .. _contributors:\n        \n        Contributors\n        =============\n        \n        * Kirill Klenov     (https://github.com/klen, horneds@gmail.com)\n        \n        * Antoine Bertin    (https://github.com/Diaoul)\n        * Dmitriy Moseev    (https://github.com/DmitriyMoseev)\n        * Esteban J. G. Gabancho (https://github.com/egabancho)\n        * Kirill Pavlov     (https://github.com/pavlov99)\n        * Kwok-kuen Cheung  (https://github.com/cheungpat)\n        * Mahdi Yusuf       (https://github.com/myusuf3)\n        * Marek Baczyński   (https://github.com/imbaczek)\n        * Matt Caldwell     (https://github.com/mattcaldwell)\n        * Skylar Saveland   (https://github.com/skyl)\n        \n        \n        .. _license:\n        \n        License\n        =======\n        \n        Licensed under a `BSD license`_.\n        \n        \n        .. _links:\n        \n        .. _BSD license: http://www.linfo.org/bsdlicense.html\n        .. _klen: http://klen.github.io\n        .. _SQLAlchemy: http://www.sqlalchemy.org/\n        .. _Flask: http://flask.pocoo.org/\n        .. _Peewee: http://peewee.readthedocs.org/en/latest/\n        .. _Pony: http://ponyorm.com/\n        .. _Django: http://djangoproject.org/\n        .. _Mongoengine: http://mongoengine.org/\n        .. |logo| image:: https://raw.github.com/klen/mixer/develop/docs/_static/logo.png\n                          :width: 100\n        \nKeywords: django,flask,sqlalchemy,testing,mock,stub,mongoengine,data\nPlatform: Any\nClassifier: Development Status :: 4 - Beta\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: BSD License\nClassifier: Natural Language :: English\nClassifier: Natural Language :: Russian\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\nClassifier: Topic :: Software Development :: Testing\nClassifier: Topic :: Utilities",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mixer/",
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "mixer",
    "package_url": "https://pypi.org/project/mixer/",
    "platform": null,
    "project_url": "https://pypi.org/project/mixer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mixer/4.10.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mixer -- Is a fixtures replacement. Supported Django ORM, SqlAlchemy ORM, Mongoengine ODM and custom python objects.",
    "version": "4.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13270206,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aea9b5c8c34857bc8028c36847c285dcf4b1166e60c84f9b29fe6883b5e14585",
        "md5": "02475bd0dae39b082619f9ece01ceca4",
        "sha256": "792bffb6ae25687966d8cd0e9512c4d4b3a1998a49502c083ded34b4fcef776f"
      },
      "downloads": -1,
      "filename": "mixer-4.10.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02475bd0dae39b082619f9ece01ceca4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 133587,
      "upload_time": "2014-11-18T18:43:43",
      "upload_time_iso_8601": "2014-11-18T18:43:43.087494Z",
      "url": "https://files.pythonhosted.org/packages/ae/a9/b5c8c34857bc8028c36847c285dcf4b1166e60c84f9b29fe6883b5e14585/mixer-4.10.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4658bd93c0fc80b38498216cc53cf4ac7079932eff27f64fc9a51a7e127968ab",
        "md5": "3414973ff3db2c1e674c878f6a8960e8",
        "sha256": "e6e6c457ef1344eb10b80cf3f51a4ec969981b92509b5c0d4df0c530a6516b62"
      },
      "downloads": -1,
      "filename": "mixer-4.10.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3414973ff3db2c1e674c878f6a8960e8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 120300,
      "upload_time": "2014-11-18T18:43:46",
      "upload_time_iso_8601": "2014-11-18T18:43:46.448623Z",
      "url": "https://files.pythonhosted.org/packages/46/58/bd93c0fc80b38498216cc53cf4ac7079932eff27f64fc9a51a7e127968ab/mixer-4.10.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}