{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Home-page: http://github.com/klen/mixer\nAuthor: Kirill Klenov\nAuthor-email: horneds@gmail.com\nLicense: BSD\nDescription-Content-Type: UNKNOWN\nDescription: |logo| Mixer\n        ############\n        \n        Mixer is an application to generate instances of Django or SQLAlchemy models.\n        It's useful for testing and fixtures replacement. Fast and convenient test-data\n        generation.\n        \n        Mixer supports:\n        \n        * Django_;\n        * SQLAlchemy_;\n        * Flask-SQLAlchemy_;\n        * Peewee_;\n        * Pony_;\n        * Mongoengine_;\n        * Marshmallow_;\n        * Custom schemes;\n        \n        .. _badges:\n        \n        .. image:: http://img.shields.io/travis/klen/mixer.svg?style=flat-square\n            :target: http://travis-ci.org/klen/mixer\n            :alt: Build Status\n        \n        .. image:: http://img.shields.io/coveralls/klen/mixer.svg?style=flat-square\n            :target: https://coveralls.io/r/klen/mixer\n            :alt: Coverals\n        \n        .. image:: http://img.shields.io/pypi/v/mixer.svg?style=flat-square\n            :target: https://pypi.python.org/pypi/mixer\n            :alt: Version\n        \n        .. image:: http://img.shields.io/pypi/dm/mixer.svg?style=flat-square\n            :target: https://pypi.python.org/pypi/mixer\n            :alt: Downloads\n        \n        .. image:: http://img.shields.io/pypi/l/mixer.svg?style=flat-square\n            :target: https://pypi.python.org/pypi/mixer\n            :alt: License\n        \n        \n        .. _documentation:\n        \n        \n        **Docs are available at https://mixer.readthedocs.org/. Pull requests with\n        documentation enhancements and/or fixes are awesome and most welcome.**\n        \n        Описание на русском языке: http://klen.github.io/mixer.html\n        \n        \n        .. _contents:\n        \n        .. contents::\n        \n        \n        Requirements\n        =============\n        \n        - Django (1.10, 1.11, 2.0) for Django ORM support;\n        - Faker >= 0.7.3\n        - Flask-SQLALchemy for SQLAlchemy ORM support and integration as Flask application;\n        - Mongoengine for Mongoengine ODM support;\n        - SQLAlchemy for SQLAlchemy ORM support;\n        - fake-factory >= 0.5.0\n        - faker == 0.7.3\n        - python 2.7 or 3.6+\n        \n        \n        Installation\n        =============\n        \n        **Mixer** should be installed using pip: ::\n        \n            pip install mixer\n        \n        \n        Usage\n        =====\n        \n         |   By default Mixer tries to generate a fake (human-friendly) data.\n         |   If you want to randomize the generated values initialize the Mixer\n         |   by manual: Mixer(fake=False)\n        \n        \n         |   By default Mixer saves the generated objects in a database. If you want to disable\n         |   this, initialize the Mixer by manual like: Mixer(commit=False)\n        \n        \n        Django workflow\n        ---------------\n        Quick example: ::\n        \n            from mixer.backend.django import mixer\n            from customapp.models import User, UserMessage\n        \n            # Generate a random user\n            user = mixer.blend(User)\n        \n            # Generate an UserMessage\n            message = mixer.blend(UserMessage, user=user)\n        \n            # Generate an UserMessage and an User. Set username for generated user to 'testname'.\n            message = mixer.blend(UserMessage, user__username='testname')\n        \n            # Generate SomeModel from SomeApp and select FK or M2M values from db\n            some = mixer.blend('someapp.somemodel', somerelation=mixer.SELECT)\n        \n            # Generate SomeModel from SomeApp and force a value of money field from default to random\n            some = mixer.blend('someapp.somemodel', money=mixer.RANDOM)\n        \n            # Generate 5 SomeModel's instances and take company field's values from custom generator\n            some_models = mixer.cycle(5).blend('somemodel', company=(name for name in company_names))\n        \n        \n        Flask, Flask-SQLAlchemy\n        -----------------------\n        Quick example: ::\n        \n            from mixer.backend.flask import mixer\n            from models import User, UserMessage\n        \n            mixer.init_app(self.app)\n        \n            # Generate a random user\n            user = mixer.blend(User)\n        \n            # Generate an userMessage\n            message = mixer.blend(UserMessage, user=user)\n        \n            # Generate an UserMessage and an User. Set username for generated user to 'testname'.\n            message = mixer.blend(UserMessage, user__username='testname')\n        \n            # Generate SomeModel and select FK or M2M values from db\n            some = mixer.blend('project.models.SomeModel', somerelation=mixer.SELECT)\n        \n            # Generate SomeModel from SomeApp and force a value of money field from default to random\n            some = mixer.blend('project.models.SomeModel', money=mixer.RANDOM)\n        \n            # Generate 5 SomeModel's instances and take company field's values from custom generator\n            some_models = mixer.cycle(5).blend('project.models.SomeModel', company=(company for company in companies))\n        \n        \n        Support for Flask-SQLAlchemy models that have `__init__` arguments\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        \n        For support this scheme, just create your own mixer class, like this: ::\n        \n            from mixer.backend.sqlalchemy import Mixer\n        \n            class MyOwnMixer(Mixer):\n        \n                def populate_target(self, values):\n                    target = self.__scheme(**values)\n                    return target\n        \n            mixer = MyOwnMixer()\n        \n        \n        SQLAlchemy workflow\n        -------------------\n        \n        Example of initialization: ::\n        \n            from mixer.backend.sqlalchemy import Mixer\n        \n            ENGINE = create_engine('sqlite:///:memory:')\n            BASE = declarative_base()\n            SESSION = sessionmaker(bind=ENGINE)\n        \n            mixer = Mixer(session=SESSION(), commit=True)\n            role = mixer.blend('package.models.Role')\n        \n        \n        Also, see `Flask, Flask-SQLALchemy`_.\n        \n        \n        Mongoengine workflow\n        --------------------\n        \n        Example usage: ::\n        \n            from mixer.backend.mongoengine import mixer\n        \n            class User(Document):\n                created_at = DateTimeField(default=datetime.datetime.now)\n                email = EmailField(required=True)\n                first_name = StringField(max_length=50)\n                last_name = StringField(max_length=50)\n                username = StringField(max_length=50)\n        \n            class Post(Document):\n                title = StringField(max_length=120, required=True)\n                author = ReferenceField(User)\n                tags = ListField(StringField(max_length=30))\n        \n            post = mixer.blend(Post, author__username='foo')\n        \n        Marshmallow workflow\n        --------------------\n        \n        Example usage: ::\n        \n            from mixer.main import mixer\n            import marshmallow as ma\n        \n            class User(ma.Schema):\n                created_at = ma.fields.DateTime(required=True)\n                email = ma.fields.Email(required=True)\n                first_name = ma.fields.String(required=True)\n                last_name = ma.fields.String(required=True)\n                username = ma.fields.String(required=True)\n        \n            class Post(ma.Schema):\n                title = ma.fields.String(required=True)\n                author = ma.fields.Nested(User, required=True)\n        \n            post = mixer.blend(Post, author__username='foo')\n        \n        \n        Common usage\n        ------------\n        Quick example: ::\n        \n            from mixer.main import mixer\n        \n            class Test:\n                one = int\n                two = int\n                name = str\n        \n            class Scheme:\n                name = str\n                money = int\n                male = bool\n                prop = Test\n        \n            scheme = mixer.blend(Scheme, prop__one=1)\n        \n        \n        DB commits\n        ----------\n        \n        By default 'django', 'flask', 'mongoengine' backends tries to save objects in\n        database. For preventing this behavior init `mixer` manually: ::\n        \n            from mixer.backend.django import Mixer\n        \n            mixer = Mixer(commit=False)\n        \n        \n        Or you can temporary switch context use the mixer as context manager: ::\n        \n            from mixer.backend.django import mixer\n        \n            # Will be save to db\n            user1 = mixer.blend('auth.user')\n        \n            # Will not be save to db\n            with mixer.ctx(commit=False):\n                user2 = mixer.blend('auth.user')\n        \n        \n        .. _custom:\n        \n        Custom fields\n        -------------\n        \n        Mixer allows you to define generators for fields by manually.\n        \n        Quick example: ::\n        \n                from mixer.main import mixer\n        \n                class Test:\n                    id = int\n                    name = str\n        \n                mixer.register(Test,\n                    name=lambda: 'John',\n                    id=lambda: str(mixer.g.get_positive_integer())\n                )\n        \n                test = mixer.blend(Test)\n                test.name == 'John'\n                isinstance(test.id, str)\n        \n                # You could pinned just a value to field\n                mixer.register(Test, name='Just John')\n                test = mixer.blend(Test)\n                test.name == 'Just John'\n        \n        Also, you can make your own factory for field types: ::\n        \n            from mixer.backend.django import Mixer, GenFactory\n        \n            def get_func(*args, **kwargs):\n                return \"Always same\"\n        \n            class MyFactory(GenFactory):\n                generators = {\n                    models.CharField: get_func\n                }\n        \n            mixer = Mixer(factory=MyFactory)\n        \n        Middlewares\n        -----------\n        \n        You can add middleware layers to process generation: ::\n        \n            from mixer.backend.django import mixer\n        \n            # Register middleware to model\n            @mixer.middleware('auth.user')\n            def encrypt_password(user):\n                user.set_password('test')\n                return user\n        \n        You can add several middlewares. Each middleware should get one argument\n        (generated value) and return them.\n        \n        Locales\n        -------\n        \n        By default mixer uses 'en' locale. You could switch mixer default locale by\n        creating your own mixer: ::\n        \n            from mixer.backend.django import Mixer\n        \n            mixer = Mixer(locale='it')\n            mixer.faker.name()          ## u'Acchisio Conte'\n        \n        At any time you could switch mixer current locale: ::\n        \n            mixer.faker.locale = 'cz'\n            mixer.faker.name()          ## u'Miloslava Urbanov\\xe1 CSc.'\n        \n            mixer.faker.locale = 'en'\n            mixer.faker.name()          ## u'John Black'\n        \n            # Use the mixer context manager\n            mixer.faker.phone()         ## u'1-438-238-1116'\n            with mixer.ctx(locale='fr'):\n                mixer.faker.phone()     ## u'08 64 92 11 79'\n        \n            mixer.faker.phone()         ## u'1-438-238-1116'\n        \n        .. _bugtracker:\n        \n        Bug tracker\n        ===========\n        \n        If you have any suggestions, bug reports or\n        annoyances please report them to the issue tracker\n        at https://github.com/klen/mixer/issues\n        \n        \n        Contributing\n        ============\n        \n        Development of mixer happens at Github: https://github.com/klen/mixer\n        \n        \n        Contributors\n        =============\n        \n        * Antoine Bertin      (https://github.com/Diaoul)\n        * Benjamin Port       (https://github.com/bport)\n        * Dmitriy Moseev      (https://github.com/DmitriyMoseev)\n        * Eelke Hermens       (https://github.com/eelkeh)\n        * Esteban J. G. Gabancho (https://github.com/egabancho)\n        * Felix Dreissig      (https://github.com/F30)\n        * Illia Volochii      (https://github.com/illia-v)\n        * Jannis              (https://github.com/jnns)\n        * Kirill Pavlov       (https://github.com/pavlov99)\n        * Kwok-kuen Cheung    (https://github.com/cheungpat)\n        * Mahdi Yusuf         (https://github.com/myusuf3)\n        * Marek Baczyński     (https://github.com/imbaczek)\n        * Marigold            (https://github.com/Marigold)\n        * Matt Caldwell       (https://github.com/mattcaldwell)\n        * Mikhail Porokhovnichenko (https://github.com/marazmiki)\n        * Skylar Saveland     (https://github.com/skyl)\n        * Suriya Subramanian  (https://github.com/suriya)\n        \n        License\n        =======\n        \n        Licensed under a `BSD license`_.\n        \n        \n        .. _links:\n        \n        .. _BSD license: http://www.linfo.org/bsdlicense.html\n        .. _Django: http://djangoproject.com/\n        .. _Flask-SQLAlchemy: http://flask-sqlalchemy.pocoo.org/\n        .. _Flask: http://flask.pocoo.org/\n        .. _Marshmallow: http://marshmallow.readthedocs.io/en/latest/\n        .. _Mongoengine: http://mongoengine.org/\n        .. _Peewee: http://peewee.readthedocs.org/en/latest/\n        .. _Pony: http://ponyorm.com/\n        .. _SQLAlchemy: http://www.sqlalchemy.org/\n        .. _klen: http://klen.github.io\n        .. |logo| image:: https://raw.github.com/klen/mixer/develop/docs/_static/logo.png\n                          :width: 100\n        \nKeywords: django,flask,sqlalchemy,testing,mock,stub,mongoengine,data\nPlatform: Any\nClassifier: Development Status :: 4 - Beta\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: BSD License\nClassifier: Natural Language :: English\nClassifier: Natural Language :: Russian\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python :: 3.5\nClassifier: Programming Language :: Python :: 3.6\nClassifier: Programming Language :: Python\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\nClassifier: Topic :: Software Development :: Testing\nClassifier: Topic :: Utilities\n",
    "description_content_type": null,
    "docs_url": "https://pythonhosted.org/mixer/",
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mixer",
    "package_url": "https://pypi.org/project/mixer/",
    "platform": "",
    "project_url": "https://pypi.org/project/mixer/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mixer/6.0.0/",
    "requires_dist": [
      "Faker (==0.8.8)"
    ],
    "requires_python": "",
    "summary": "Mixer -- Is a fixtures replacement. Supported Django ORM, SqlAlchemy ORM, Mongoengine ODM and custom python objects.",
    "version": "6.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13270206,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a67dfea19438d524d275cf2b95195ef845fb8f9000f2a96b6e0bec5d8b8a63cc",
        "md5": "7230be390ec1abab78ea1d317d383aeb",
        "sha256": "f19f9720561eadb8e01f5874f60703c991820a072cf1573dd71fff36d11623b5"
      },
      "downloads": -1,
      "filename": "mixer-6.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7230be390ec1abab78ea1d317d383aeb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 41368,
      "upload_time": "2017-12-21T12:21:41",
      "upload_time_iso_8601": "2017-12-21T12:21:41.141825Z",
      "url": "https://files.pythonhosted.org/packages/a6/7d/fea19438d524d275cf2b95195ef845fb8f9000f2a96b6e0bec5d8b8a63cc/mixer-6.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7f219d93c1cba5ce26ecf9d34bfad9ecb6f4322454ac028d3e64658a151069b",
        "md5": "323348202eb0044adc9b0335942db23e",
        "sha256": "070359dee07b21892a758bd0b7837e60a99eef65b2447664dff1096fef4eef31"
      },
      "downloads": -1,
      "filename": "mixer-6.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "323348202eb0044adc9b0335942db23e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32054,
      "upload_time": "2017-12-21T12:21:44",
      "upload_time_iso_8601": "2017-12-21T12:21:44.843793Z",
      "url": "https://files.pythonhosted.org/packages/f7/f2/19d93c1cba5ce26ecf9d34bfad9ecb6f4322454ac028d3e64658a151069b/mixer-6.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}