{
  "info": {
    "author": "Alex Schroeder",
    "author_email": "alex@gnu.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Communications"
    ],
    "description": "# Mastodon Archive\n\nThis tool allows you to make an archive of your statuses, your\nfavourites and the media in both your statuses and your favourites.\nFrom this archive, you can generate a simple text file, or a HTML file\nwith or without media. Take a look at an\n[example](https://alexschroeder.ch/mastodon.weaponvsac.space.user.kensanata.html)\nif you're curious.\n\nNote that Mastodon\n[v2.3.0](https://github.com/tootsuite/mastodon/releases/tag/v2.3.0)\nadded an account archive download feature: \"Every 7 days you are able\nto request a full archive of your toots. The toots are exported in\nActivityPub JSON format alongside the media files attached to them,\nyour avatar and header images as well as the private key of your\naccount used for signing content.\" If all you want to do is have a\nbackup of your data, perhaps that is enough and you don't need this\ntool.\n\nPlease report issues on the\n[Software Wiki](https://alexschroeder.ch/software/Mastodon_Archive).\nYou can get the latest sources\n[from the author’s site](https://alexschroeder.ch/cgit/mastodon-archive/about/).\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [Installation](#installation)\n- [Making an archive](#making-an-archive)\n- [Splitting an archive](#splitting-an-archive)\n- [Downloading media files](#downloading-media-files)\n- [Generating a text file](#generating-a-text-file)\n- [Searching your archive](#searching-your-archive)\n- [Show context for a toot](#show-context-for-a-toot)\n- [Generating a HTML file](#generating-a-html-file)\n- [Reporting](#reporting)\n- [Expiring your toots and favourites](#expiring-your-toots-and-favourites)\n- [Troubleshooting](#troubleshooting)\n- [Followers](#followers)\n- [Following](#following)\n- [Whitelist](#whitelist)\n- [Mutuals](#mutuals)\n- [Example Setup](#example-setup)\n- [Documentation](#documentation)\n- [Development](#development)\n- [Processing using jq](#processing-using-jq)\n- [Exploring the API](#exploring-the-api)\n- [Alternatives](#alternatives)\n\n<!-- markdown-toc end -->\n\n# Installation\n\nThe following command will install `mastodon-archive` and all its\ndependencies:\n\n```bash\n# Python 3\npip3 install mastodon-archive\n```\n\nIf this is the first tool you installed using `pip` then perhaps it\ninstalled `mastodon-archive` in a directory that's not on your `PATH`.\nI had to add the following to my `~/.bashrc` file:\n\n```bash\nexport PATH=$PATH:$HOME/.local/bin\n```\n\n🔥 If you're getting an error that ends with `Command \"python setup.py\negg_info\" failed with error code 1 ...` you might have to install the\nsetup tools. Try the following:\n\n```bash\npip3 install --user setuptools\npip3 install mastodon-archive\n```\n\n# Making an archive\n\nWhen using the app for the first time, you have to authorize it:\n\n```text\n$ mastodon-archive archive kensanata@dice.camp\nRegistering app\nLog in\nVisit the following URL and authorize the app:\n[the app gives you a huge URL which you need to visit using a browser]\nThen paste the access token here:\n[this is where you paste the authorization code]\nGet user info\nGet statuses (this may take a while)\nSave 41 statuses\n```\n\nNote that the library we are using says: \"Mastodons API rate limits\nper IP. By default, the limit is 300 requests per 5 minute time slot.\nThis can differ from instance to instance and is subject to change.\"\nThus, if every request gets 20 toots, then we can get at most 6000\ntoots per five minutes.\n\nIf this is taking too long, consider skipping your favourites:\n\n```text\n$ mastodon-archive archive --no-favourites kensanata@dice.camp\n```\n\nIf you want a better picture of conversations, you can also include\nmentions. Mentions are notifications of statuses in which you were\nmentioned as opposed to statuses of yours that were favoured or\nboosted by others. Note that if you used to *dismiss* notifications\nusing the \"Clear notifications\" menu, then no mentions will be found\nas mentions are simply a particular kind of notification.\n\n```text\n$ mastodon-archive archive --with-mentions kensanata@dice.camp\n```\n\nNo matter what you did, You will end up with three new files:\n\n`dice.camp.client.secret` is where the client secret for this instance\nis stored. `dice.camp.user.kensanata.secret` is where the\nauthorisation token for this user and instance is stored. If these two\nfiles exist, you don't have to log in the next time you run the app.\nIf your login expired, you need to remove the file containing the\nauthorisation token and you will be asked to authorize the app again.\n\n`dice.camp.user.kensanata.json` is the JSON file with your data (but\nwithout your media attachments). If this file exists, only the missing\ntoots will be downloaded the next time you run the app. If you suspect\na problem and want to make sure that everything is downloaded again,\nyou need to remove this file.\n\n# Splitting an archive\n\nIf you keep adding your archive, it eventually grows very large. When\nit reaches hundreds of megabytes, consider *splitting* it.\n\n```\n$ ls -lh *.json\n-rw-r--r-- 1 alex alex 120M Apr 14 21:50 octodon.social.user.kensanata.json\n```\n\nYou can provide an `--older-than` option to specify the number of\nweeks you want to keep. The default is four weeks.\n\nIf you don't provide the `--confirmed` option, this is a dry run.\n\n```\n$ mastodon-archive split --older-than=10 kensanata@octodon.social\nThis is a dry run and nothing will be moved.\nInstead, we'll just list what would have happened.\nUse --confirmed to actually do it.\nLoading existing archive\nOlder than 2019-02-03 22:11:48.253408\nstatuses: 10623\nfavourites: 11233\nmentions: 10773\nWould have saved this to octodon.social.user.kensanata.0.json\n```\n\nWhen you do the split, the files are saved.\n\n```\n$ mastodon-archive split --older-than=10 --confirmed kensanata@octodon.social\nLoading existing archive\nOlder than 2019-02-03 22:11:59.668432\nstatuses: 10623\nfavourites: 11233\nmentions: 10773\nSaving octodon.social.user.kensanata.json\nSaving octodon.social.user.kensanata.0.json\n```\n\nVerify the result:\n\n```\n$ ls -lh *.json\n-rw-r--r-- 1 alex alex 107M Apr 14 22:12 octodon.social.user.kensanata.0.json\n-rw-r--r-- 1 alex alex  13M Apr 14 22:12 octodon.social.user.kensanata.json\n```\n\n# Downloading media files\n\nBy default, media you uploaded and media of statuses you added your\nfavourites are not part of your archive. You can download it using a\nseparate command, however.\n\nAssuming you already made an archive of your toots:\n\n```text\n$ mastodon-archive media kensanata@dice.camp\n44 urls in your archive (half of them are previews)\n34 files already exist\nDownloading |################################| 10/10\n```\n\nYou will end up with a new directory, `dice.camp.user.kensanata`. It\ncontains all the media you uploaded, and their corresponding previews.\n\nIf you rerun it, it will simply try to get the remaining files. Note,\nhowever, that instance administrators can *delete* media files. Thus,\nyou might be forever missing some files—particularly the ones from\n*remote* instances, if you added any to your favourites.\n\nThere's one thing you need to remember, though: the media directory\ncontains all the media from your statuses, and all the media from your\nfavourites. There is no particular reason why the media files from\nboth sources need to be in the same directory, see\n[issue #11](https://github.com/kensanata/mastodon-backup/issues/11).\n\n# Generating a text file\n\nAssuming you already made an archive of your toots:\n\n```text\n$ mastodon-archive text kensanata@dice.camp\n[lots of other toots]\nAlex Schroeder 🐉 @kensanata 2017-11-14T22:21:50.599000+00:00\nhttps://dice.camp/@kensanata/99005111284322450\n[#introduction](https://dice.camp/tags/introduction) I run\n[#osr](https://dice.camp/tags/osr) games using my own hose rule document but\nit all started with Labyrinth Lord which I knew long before I knew B/X. Sadly,\nmy Indie Game Night is no longer a thing but I still love Lady Blackbird, all\nthe [#pbta](https://dice.camp/tags/pbta) hacks on my drive, and so much more.\nBut in the three campaigns I run, it’s all OSR right now.\n```\n\nGenerating a text file just means redirection the output to a text\nfile:\n\n```text\n$ mastodon-archive text kensanata@dice.camp > statuses.txt\n```\n\nIf you're working with text, you might expect the first toot to be at\nthe top and the last toot to be at the bottom. In this case, you need\nto reverse the list:\n\n```text\n$ mastodon-archive text --reverse kensanata@dice.camp | head\n```\n\n# Searching your archive\n\nYou can also filter using regular expressions. These will be checked\nagainst the status *content* (obviously), *display name* and\n*username* (both are important for boosted toots), and the *created\nat* date. Also note that the regular expression will be applied to the\nraw status content. In other words, the status contains all the HTML\nand problably starts with a `<p>`, which is then removed in the\noutput.\n\n```text\n$ mastodon-archive text kensanata@dice.camp house\n```\n\nYou can provide multiple regular expressions and they will all be\nchecked:\n\n```text\n$ mastodon-archive text kensanata@dice.camp house rule\n```\n\nRemember basic\n[regular expression syntax](https://docs.python.org/3/library/re.html#regular-expression-syntax):\n`\\b` is a word boundary, `(?i)` ignores case, `(a|b)` is for\nalternatives, just to pick some useful ones. Use single quotes to\nprotect your backslashes and questionmarks.\n\n```text\n$ mastodon-archive text kensanata@dice.camp house 'rule\\b'\n```\n\nYou can also search your favourites or your mentions:\n\n```text\n$ mastodon-archive text --collection favourites kensanata@dice.camp '(?i)blackbird'\n```\n\nDates are in ISO format (e.g. `2017-11-19T14:00`). I usually only care\nabout year and month, though:\n\n```text\n$ mastodon-archive text --collection favourites kensanata@dice.camp bird '2017-(07|08|09|10|11)'\n```\n\n\n# Show context for a toot\n\nSometimes you only remember something about a *thread*. Let's say you\nasked a question a while back but now you can't remember the answer\nyou got back then. First, find the question:\n\n```text\n$ mastodon-archive text kensanata@dice.camp rules\nAlex Schroeder 🐉 @kensanata 2018-05-28T21:19:27.483000+00:00\nhttps://dice.camp/@kensanata/100109016572069901\n...\n```\n\nUsing the URL, you can now search the archive for some context:\n\n```text\n$ mastodon-archive context kensanata@dice.camp https://dice.camp/@kensanata/100109016572069901\n```\n\nThis shows the same information clicking on the toot shows you in the\nweb client: all its ancestors and all its descendants. Obviously, if\nthese toots are not in your archive, we can't find them. You'll have\nto click on the links and hope they're still around.\n\n\n# Generating a HTML file\n\nAssuming you already made an archive of your toots:\n\n```text\n$ mastodon-archive html kensanata@dice.camp\n```\n\nThis will create numbered HTML files starting with\n`dice.camp.user.kensanata.statuses.0.html`, each page with 2000 toots.\n\nYou can change the number of toots per page using an option:\n\n```text\n$ mastodon-archive html --toots-per-page 100 kensanata@dice.camp\n```\n\nIf you have downloaded your media attachments, these will be used in\nthe HTML files. Thus, if you want to upload the HTML files, you now\nneed to upload the media directory as well or all the media links will\nbe broken.\n\nYou can also generate a file for your favourites:\n\n```text\n$ mastodon-archive html --collection favourites kensanata@dice.camp\n```\n\nThis will create numbered HTML files starting with\n`dice.camp.user.kensanata.favourites.0.html`, each page with 2000\ntoots.\n\nNote that both the HTML file with your statuses and the HTML file with\nyour favourites will refer to the media files in your media directory.\n\n# Reporting\n\nSome numbers, including your ten most used hashtags:\n\n```text\n$ mastodon-archive report kensanata@dice.camp\nConsidering the last 12 weeks\nStatuses:               296\nBoosts:                  17\nMedia:                    9\n\nTop 10 hashtags:\n#caster(8) #20questions(5) #osr(3) #dungeonslayers(2) #introduction(2)\n#currentprojects(2) #diaspora(1) #gygax(1) #yoonsuin(1) #casters(1)\n\nFavourites:             248\nBoosts:                   0\nMedia:                   20\n\nTop 10 hashtags:\n#1strpg(9) #rpg(5) #myfirstcharacter(5) #introduction(5) #osr(4)\n#1strpgs(4) #dnd(3) #gamesnacks(1) #vancian(1) #mastoart(1)\n```\n\nYou can specify a different time number of weeks to consider using\n`--newer-than N` or use `--all` to consider all your statuses and\nfavourites.\n\nYou can list a different number of hashtags using `--top N` and you\ncan list all of them by using `--top -1`. This might result in a very\nlong list.\n\nBy default only your toots are considered for the hashtags. Use `--include-boosts` to also include toot you have boosted.\n\n# Expiring your toots and favourites\n\n**Warning**: This is a destructive operation. You will delete your\ntoots on your instance, or unfavour your favourites, or dismiss your\nnotifications on your instance. Where as it might be possible to\nfavour all your favourites again, there is no way to repost all those\ntoots. You will have a copy in your archive, but there is no way to\nrestore these to your instance.\n\n**But why?** I might want to keep a copy of my toots, but I don't\nthink they have much value going back months and years. I never read\nthrough years of tweeting history! This only benefits your enemies,\nnever your friends. So I want to expire my toots. We can always write\na blog post about the good stuff. You can read more about this [on my\nblog](https://alexschroeder.ch/wiki/2017-04-27_Record_Keeping).\n\n**Alternatives**: Check out [forget](https://forget.codl.fr/about/)\nwhich is a web app that only expires your toots without archiving\nthem.\n[MastoPurgee](https://github.com/ThomasLeister/mastopurge/blob/master/README.md)\ndoes the same thing but it's a stand-alone binary. Depending on your\nneeds, these might be good enough.\n\nAnyway, back to *Mastodon Archive*. 🙂\n\nSadly, I have some bad news for you: this has been rate limited to\n[30 statuses per 30 minutes](https://mastodon.social/@Gargron/101588449409740014)!\n😭\n\nNo, really! See the [merge request](https://github.com/tootsuite/mastodon/pull/10042).\nThis is terrible. Expiry basically only works if you run it every time\nyou have posted 30 statuses or so, in the long run. If you don't, be\nprepared for a *long* wait! 😴\n\nIn order to not go crazy, the code catches an interrupt (such as you\npressing `Ctrl-C`) and saves the data even though it hasn't finished\nexpiring your statuses.\n\nAnyway, enough complaining. How do you do it?\n\nYou can expire your toots using the `expire` command and providing the\n`--older-than` option. This option specifies the number of weeks to\nkeep on the server. Anything older than that is deleted or unfavoured.\nIf you use `--older-than 0`, then *all* your toots will be deleted, or\n*all* your favourites will be unfavoured, or *all* your notifications\nwill be dismissed.\n\n```text\n~/src/mastodon-backup $ mastodon-archive expire --older-than 0 kensanata@social.nasqueron.org\nThis is a dry run and nothing will be expired.\nInstead, we'll just list what would have happened.\nUse --confirmed to actually do it.\nDelete: 2017-11-26 \"<p>Testing äöü</p>\"\n```\n\nActually, the default operation just does a dry run. You need to use\nthe `--confirmed` option to proceed.\n\nAnd one more thing: since this requires the permission to *write* to\nyour account, you will have to reauthorize the app.\n\n```text\n$ mastodon-archive expire --collection favourites --older-than 0 \\\n  --confirmed kensanata@social.nasqueron.org\nLog in\nVisit the following URL and authorize the app:\n[long URL shown here]\nThen paste the access token here:\n[long token pasted here]\nExpiring |################################| 1/1\n```\n\nAfter a while you'll notice that archiving mentions takes more and\nmore time. The reason is when expiring mentions, the tool goes through\nall your notifications and looks at those of the type \"mention\" and\nexpires them if they are old enough. There are other types of\nnotifications, however: \"follow\", \"favourite\", and \"reblog\" (at the\ntime of this writing). As these are not archived, we also don't expire\nthem. Thus, the list of notifications to look through when archiving\nkeeps growing unless you use the \"Clear notifications\" menu in the\nMastodon web client. Alternatively, you can use the\n`--delete-other-notifications` option together with `--collection\nmentions` and then the tool will dismiss all the older other\nnotifications for you.\n\n# Troubleshooting\n\n🔥 If you are archiving a ton of toots and you run into a General API\nproblem, use the `--pace` option. This is what the problem looks like:\n\n```text\n$ mastodon-archive archive kensanata@dice.camp\n...\nGet statuses (this may take a while)\nTraceback (most recent call last):\n...\nmastodon.Mastodon.MastodonAPIError: General API problem.\n```\n\nSolution:\n\n```text\n$ mastodon-archive archive --pace kensanata@dice.camp\n```\n\nThe problem seems to be related to how Mastodon [rate\nlimits](https://mastodonpy.readthedocs.io/en/latest/#a-note-about-rate-limits)\nrequests.\n\n🔥 If you are expiring many toots, same thing. The default rate limit\nis 300 requests per five minutes, so when more than 300 toots are to\nbe deleted, the app simply has to wait for five minutes before\ncontinuing. It takes time.\n\n```text\n$ mastodon-archive expire --confirm kensanata@octodon.social\nLoading existing archive\nExpiring |                                | 1/1236\nWe need to authorize the app to make changes to your account.\nLog in\nVisit the following URL and authorize the app:\n[long URL here]\nThen paste the access token here:\n[access token here]\nConsidering the default rate limit of 300 requests per five minutes and having 1236 statuses,\nthis will take at least 20 minutes to complete.\nExpiring |#######                         | 301/1236\n```\n\n🔥 If you are experimenting with expiry, you'll need to give the app\nwrite permissions. If you then delete the user secret file, hoping to\nstart with a clean slate when archiving, you'll be asked to authorize\nthe app again, but somehow Mastodon remembers that you have already\ngranted the app read and write permissions, and you will get this\nerror:\n\n`mastodon.Mastodon.MastodonAPIError: Granted scopes \"read write\" differ from requested scopes \"read\".`\n\nIn order to get rid of this, you need to visit the website, got to\nSettings → Authorized apps and revoke your authorization for\nmastodon-archive. Now you can try the authorization URL again and you\nwill only get read permissions instead of both read and write\npermissions.\n\n# Followers\n\nThis is work in progress. I'm actually not sure where I want to go\nwith this. Right now it lists all your followers that haven't\ninteracted with you. If a toot of theirs mentions you, then that\ncounts as an interaction. Favouring and boosting does not count. By\ndefault, this looks at the last twelve weeks. In order for this to\nwork, you need an archive containing both mentions and followers.\n\n```text\n$ mastodon-archive archive --with-mentions --with-followers kensanata@dice.camp\nLoading existing archive\nGet user info\nGet new statuses\nFetched a total of 0 new toots\nGet new favourites\nFetched a total of 0 new toots\nGet new notifications\nFetched a total of 2 new toots\nGet followers (this may take a while)\nSaving 659 statuses, 376 favourites, 478 mentions, and 107 followers\n```\n\nNow you're ready to determine the list of lurkers:\n\n```text\n$ mastodon-archive followers kensanata@dice.camp\nConsidering the last 12 weeks\nThere is no whitelist\n...\n```\n\nAs I said, this is work in progress and I don't really know where I'm\ngoing with this. More\n[on my blog](https://alexschroeder.ch/wiki/2018-04-13_Social_Media_Goals).\n\nThis command supports the [whitelist](#whitelist).\n\n# Following\n\nAssume you're on the fediverse just for the conversation. You're not\nactually interested in following anybody who never talks to you: no\njournalists, no famous people, no pundits. You just want to follow\nregular people who interact with you. You can list the people you're\nfollowing who never mentioned you, and you can unfollow them all!\n\nThere are two prerequisites, however:\n\n1. you need to add the people you're following to the archive\n2. you need to add the mentions to the archive (this can take a long time)\n\n```text\n$ mastodon-archive archive --with-following --with-mentions kensanata@dice.camp\nLoading existing archive\nGet user info\nGet new statuses\nX\nAdded a total of 11 new items\nGet new favourites\nX\nAdded a total of 7 new items\nGet new notifications and look for mentions\n.....\nAdded a total of 7 new items\nSkipping followers\nGet following (this may take a while)\nSaving 932 statuses, 527 favourites, 657 mentions, 107 followers, and 192 following\n```\n\nGiven this data, you can now list the people we're interested in:\n\n```text\n$ mastodon-archive following kensanata@dice.camp\nConsidering the last 12 weeks\n...\n```\n\nAll these people that never mentioned you: do you really want to\nfollow them all? If you don't, here's how to unfollow them:\n\n```text\n$ mastodon-archive following --unfollow kensanata@dice.camp\nConsidering the last 12 weeks\nUnfollowing |################################| 1/125\nWe need to authorize the app to make changes to your account.\nRegistering app\nThis app needs access to your Mastodon account.\nVisit the following URL and authorize the app:\n[long URL here]\nThen paste the access token here:\n[access token here]\n```\n\nNote that the application needs the permission to unfollow people in\nyour name, which is why you need to authorize it again.\n\nThis command supports the [whitelist](#whitelist).\n\n# Whitelist\n\nYou can have a whitelist of people you want to be exempt from some\ncommands. Create a text file with a name like the following:\n`dice.camp.user.kensanata.whitelist.txt`.\n\nThat is: `<your domain>.user.<your account>.whitelist.txt`.\n\nThere, list the accounts you want to have in your whitelist, one per\nline. All of these formats should work:\n\n```text\nkensanata\nkensanata@dice.camp\nAlex Schroeder <kensanata@dice.camp>\n```\n\nTo verify your whitelist, use the whitelist command:\n\n```text\n$ mastodon-archive whitelist kensanata@dice.camp\n2 accounts are on the whitelist\nkensanata@dice.camp\nkensanata\n```\n\nUsing `wc -l` to count the lines in my output, here's how you can see\nthat it works:\n\n```text\n$ mastodon-archive followers kensanata@dice.camp | wc -l\n58\n$ echo linkskywalker@soc.ialis.me >> dice.camp.user.kensanata.whitelist.txt\n$ mastodon-archive followers kensanata@dice.camp | wc -l\n57\n```\n\n# Mutuals\n\nHow do you go about creating a whitelist, though? It's hard! You could\nstart with the list of people that are following you back, perhaps?\nHere's a command to do just that:\n\n```text\n$ mastodon-archive mutuals kensanata@dice.camp\nGet user info\n...\n```\n\nWe don't currently store the relationship status in our archive so\nthat's why this command requires a live connection. We do have the\nlist of people we are *following* in our archive, so we use that. If\nyou haven't done so, you need to create an archive using the\n`--with-following` option before you can use the `mutuals` command.\n\n```text\n$ mastodon-archive archive --with-following kensanata@dice.camp\nLoading existing archive\n...\n```\n\n# Example Setup\n\nI have a shell script called `backup-mastodon` which does the following:\n\n```sh\n#!/bin/sh\nmkdir -p ~/Documents/Mastodon/\ncd ~/Documents/Mastodon/ || exit\n\naccounts=\"kensanata@octodon.social kensanata@dice.camp kensanata@tabletop.social\"\n\necho Archive Statuses, Favourites, Mentions\nfor acc in $accounts; do\n    echo \"$acc\"\n    mastodon-archive archive --with-mentions \"$acc\"\ndone\n\necho Expiring Statuses\nfor acc in $accounts; do\n    echo \"$acc\"\n    mastodon-archive expire --older-than 8 --collection statuses --confirm \"$acc\"\ndone\n\necho Expiring Favourites\nfor acc in $accounts; do\n    echo \"$acc\"\n    mastodon-archive expire --older-than 8 --collection favourites --confirm \"$acc\"\ndone\n\necho Dismissing Notifications\nfor acc in $accounts; do\n    echo \"$acc\"\n    mastodon-archive expire --older-than 8 --collection mentions --delete-other-notifications --confirm \"$acc\"\ndone\n```\n\n# Documentation\n\nThe data we have in our archive file is a hash with three keys:\n\n1. `account` is a [User dict](https://mastodonpy.readthedocs.io/en/latest/#user-dicts)\n2. `statuses` is a list of [Toot dicts](https://mastodonpy.readthedocs.io/en/latest/#toot-dicts)\n3. `favourites` is a list of [Toot dicts](https://mastodonpy.readthedocs.io/en/latest/#toot-dicts)\n4. `mentions` is a list of [Toot dicts](https://mastodonpy.readthedocs.io/en/latest/#toot-dicts)\n\nIf you want to understand the details and the nested nature of these\ndata structures, you need to look at the Mastodon API documentation.\nOne way to get started is to look at what a\n[Status](https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md#status)\nentity looks like.\n\n# Development\n\nThe\n[setup.py](https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation)\ndetermines how the app is installed and what its dependencies are.\n\nIf you checked out the repository and you want to run the code from\nthe working directory on a single user system, use `sudo pip3 install\n--upgrade --editable .` in your working directory to make it is\n\"editable\" (i.e. the installation you have is linked to your working\ndirectory, now).\n\nIf you don't want to do this for the entire system, you need your own\nvirtual environemt: `pip3 install virtualenvwrapper`, `mkvirtualenv ma\n--python python3` (this installs and activates a virtual environment\ncalled `ma`), `pip install -e .` (`-e` installs an \"editable\" copy)\nand you're set. Use `workon ma` to work in that virtual environment in\nthe future.\n\n# Processing using jq\n\n[jq](https://stedolan.github.io/jq/) is a lightweight and flexible\ncommand-line JSON processor. That means you can use it to work with\nyour archive.\n\nThe following command will take all your favourites and create a map\nwith the keys `time` and `message` for each one of them, and put it\nall in an array.\n\n```sh\n$ jq '[.favourites[] | {time: .account.username, message: .content}]' < dice.camp.user.kensanata.json\n```\n\nExample output, assuming I had only a single favourite:\n\n```json\n[\n  {\n    \"time\": \"andrhia\",\n    \"message\": \"<p>It’s nice to reinvent yourself every so often, don’t you think?</p>\"\n  }\n]\n```\n\n# Exploring the API\n\nNow that you have token files, you can explore the Mastodon API using\n`curl`. Your *access token* is the long string in the file\n`*.user.*.secret`. Here is how to use it.\n\nGet a single status:\n\n```sh\ncurl --silent --show-error \\\n     --header \"Authorization: Bearer \"$(cat dice.camp.user.kensanata.secret) \\\n     https://dice.camp/api/v1/statuses/99005111284322450\n```\n\nExtract the account id from your archive using `jq` and use `echo` to\n[strip the surrounding double quotes](https://stackoverflow.com/a/24358387/534893).\nThen use the id to get some statuses from the account and use `jq` to\nprint the status ids:\n\n```sh\nID=$(eval echo $(jq .account.id < dice.camp.user.kensanata.json))\ncurl --silent --show-error \\\n     --header \"Authorization: Bearer \"$(cat dice.camp.user.kensanata.secret) \\\n     \"https://dice.camp/api/v1/accounts/$ID/statuses?limit=3\" \\\n     | jq '.[]|.id'\n```\n\n# Alternatives\n\nThere are two kinds of alternatives:\n\n1. Solutions that extract your public toots from your profile, e.g.\n   [https://octodon.social/@kensanata](https://octodon.social/@kensanata).\n   The problem there is that you'll only get \"top level\" toots and\n   boosts but *no replies*.\n   \n    * [Mastotool](https://mdhughes.tech/mastotool/) includes media\n      download!\n    * [MastoUserScrape.py](https://gist.github.com/FlyMyPG/2e9d4532453182ada0da78e74980193b)\n   \n2. Solutions that extract your public toots from your Atom feed, e.g.\n   [https://octodon.social/users/kensanata.atom](https://octodon.social/users/kensanata.atom).\n   The problem there is that you'll only get a few pages worth of\n   toots, not *all* of them.\n\n    * [Mastotool \"Atom\"](https://github.com/kensanata/mastotool)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kensanata/mastodon-backup#mastodon-archive",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mastodon-archive",
    "package_url": "https://pypi.org/project/mastodon-archive/",
    "platform": "",
    "project_url": "https://pypi.org/project/mastodon-archive/",
    "project_urls": {
      "Homepage": "https://github.com/kensanata/mastodon-backup#mastodon-archive"
    },
    "release_url": "https://pypi.org/project/mastodon-archive/1.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Utility for backing up your Mastodon content",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15156463,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d64fadcd3021b7846e05cc51a57b3704ce0321c6757e5f8df3fde0e02629993e",
        "md5": "996024a3ff6755ef2f3d014399e66815",
        "sha256": "993fb12067496bea23a8c816e6bb3eeae3f4129f3a986aeac2111b9f73dfae88"
      },
      "downloads": -1,
      "filename": "mastodon_archive-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "996024a3ff6755ef2f3d014399e66815",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 54615,
      "upload_time": "2019-11-21T19:55:54",
      "upload_time_iso_8601": "2019-11-21T19:55:54.533060Z",
      "url": "https://files.pythonhosted.org/packages/d6/4f/adcd3021b7846e05cc51a57b3704ce0321c6757e5f8df3fde0e02629993e/mastodon_archive-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}