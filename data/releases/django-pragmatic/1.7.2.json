{
  "info": {
    "author": "Pragmatic Mates",
    "author_email": "info@pragmaticmates.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "django-pragmatic\n================\n\nPragmatic tools and utilities for Django projects\n\nTested on Django 1.5 up to Django 1.10.2\n\n\nRequirements\n------------\n- Django\n\nSome utilities require additional libraries as:\n\n- django_filters\n- fpdf\n- Pillow/PIL\n- pyBarcode\n\n\nInstallation\n------------\n\n1. Install python library using pip: pip install django-pragmatic\n\n2. Add ``pragmatic`` to ``INSTALLED_APPS`` in your Django settings file\n\n\nUsage\n-----\n\nTemplates\n'''''''''\n``pragmatic/helpers/breadcrumbs.html``\n    Template helper for **django-breadcrumbs** app.\n\n``pragmatic/helpers/confirm_delete.html``\n    Form for delete confirmation.\n\n``pragmatic/helpers/messages.html``\n    Template helper for django messages framework.\n\n``pragmatic/helpers/pagination.html``\n    Template helper for paginating objects in ListViews.\n\n``pragmatic/helpers/pagination-listview.html``\n    Template helper for paginating objects in ListViews.\n\n``maintenance_mode.html``\n    Template for maintenance mode. See **MaintenanceModeMiddleware** below.\n\n\nTemplate tags\n'''''''''''''\n``{% load pragmatic_tags %}``\n\n``def klass(obj)``\n    Returns string of instance class name.\n\n``def translate(obj)``\n    Returns translated string of input value (string or any object).\n\n``def filename(obj)``\n    Returns name of the file without its path (basename).\n\n``def bootstrap3_field(field)``\n    Adds *form-control* class to field widget classes.\n\n``def filtered_objects_counts(filtered, all)``\n    Returns translatable percentage description of value filtered/all in this format:\n    *'<strong>%d (%.2f%%)</strong> filtered, from a total of %d' % (filtered, percent, all)'*\n\n``def qrcode(value, alt=None)``\n    Outputs generated QR code using Google charts API from a given string and adds alternative description to it.\n\n``def barcode(code, args=None)``:\n    Outputs generated barcode using pyBarcode library from a given string.\n\n``def paginator(context, objects, page_ident='page', anchor=None, adjacent=2)``\n    Pagination template tag.\n\n``def divide(value, arg)``\n    Divides the value by argument.\n\n``def multiply(value, arg)``\n    Multiplies the value by argument.\n\n``def add(value, arg)``\n    Adds the arg to the value.\n\n``def subtract(value, arg)``\n    Subtracts the arg to the value.\n\n``def capture(parser, token)``\n    Capture contents of block into context.\n\n\nContext processors\n''''''''''''''''''\n``def date_formats(request)``\n    Returns a lazy 'date formats' context variables DATE_FORMAT_JS, DATE_FORMAT_TAG, DATE_FORMAT_FULLMONTH_TAG,\n    from settings file.\n\n``def installed_apps(request)``\n    Returns a lazy 'INSTALLED_APPS' context variable.\n\n\nDecorators\n''''''''''\n``def permissions_required(app_label, login_url=None, raise_exception=False)``\n    Decorator for views that checks whether a user has at least one app permission\n    enabled, redirecting to the log-in page if necessary.\n    If the raise_exception parameter is given the PermissionDenied exception\n    is raised and app label of missing permission is stored in user instance.\n\n``def permission_required(perm, login_url=None, raise_exception=False)``\n    Decorator for views that checks whether a user has a particular permission\n    enabled, redirecting to the log-in page if necessary.\n    If the raise_exception parameter is given the PermissionDenied exception\n    is raised and missing permission is stored in user instance.\n\n``def receiver_subclasses(signal, sender, dispatch_uid_prefix, **kwargs)``\n    A decorator for connecting receivers and all receiver's subclasses to signals.\n\n\nFields\n''''''\n``class RangeField(forms.Field)``\n    Form field which expects input to be a number or number range (2 numbers divided with '-').\n\n``class MultiSelectField(models.Field)``\n    Model field which stores multiple choices as a comma-separated list of values, using the normal CHOICES attribute.\n\n``class MultiSelectFormField(forms.MultipleChoiceField)``\n    Form field for model field above (MultiSelectField).\n\n``class TruncatedModelChoiceField(forms.ModelChoiceField)``\n    ModelChoiceField is a form field which truncates overflowed characters from instance label\n    and adds '...' instead of them.\n\n\nFilters\n'''''''\n``class TruncatedModelChoiceFilter(forms.ModelChoiceField)``\n    Filter field for TruncatedModelChoiceField.\n\n``class OneFieldRangeFilter(django_filters.Filter)``\n    Filter field for RangeField.\n\n\nMiddleware\n''''''''''\n``class MaintenanceModeMiddleware(object)``\n    It looks for ``settings.MAINTENANCE_MODE`` attribute.\n    If it is set to True, template **maintenance_mode.html** will render for each request.\n\n\nLoghandlers\n'''''''''''\n``class AlternativeAdminEmailHandler(AdminEmailHandler)``\n    Same as ``django.utils.log import AdminEmailHandler``, but uses ``ALTERNATE_EMAIL_HOST_PASSWORD``,\n    ``ALTERNATE_EMAIL_HOST_USER``,  ``ALTERNATE_EMAIL_HOST``, ``ALTERNATE_EMAIL_PORT`` and\n    ``ALTERNATE_EMAIL_USE_TLS`` as connection settings.\n\n\nMixins\n''''''\n``class ReadOnlyFormMixin(forms.BaseForm)``\n    Adds 'readonly and 'disabled' attributes to fields specified in ``read_only`` form attribute.\n\n``class DeleteObjectMixin(object)``\n    Mixin for object delete confirmation. Implement ``get_parent()`` method or ``get_success_url()``\n    and ``get_back_url()`` methods instead.\n\n``class PickadateFormMixin(object)``\n    Mixin which fixes **pickadate.js** inputs and adds *data-value* attribute to them if you use your own date formats.\n\n``class FPDFMixin(object)``\n    Mixin helper for generating PDF outputs in Django using fpdf library.\n\n\nWidgets\n'''''''\n``class GroupedCheckboxSelectMultiple(CheckboxSelectMultiple)``\n    Advanced form field widget for grouping multiple choices into custom groups.\n    Use it with **static/js/grouped-checkboxes.js**\n\n\nThirdparty\n''''''''''\n``class BarcodeImageWriter(ImageWriter)``\n    Fixed version of barcode.writer.ImageWriter.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PragmaticMates/django-pragmatic",
    "keywords": "django pragmatic tools utils",
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pragmatic",
    "package_url": "https://pypi.org/project/django-pragmatic/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pragmatic/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/PragmaticMates/django-pragmatic"
    },
    "release_url": "https://pypi.org/project/django-pragmatic/1.7.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Pragmatic tools and utilities for Django projects",
    "version": "1.7.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16515340,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de28ba7d85cb226508e02995bd0c83f7a27e30d9fc47984f9fc2ee91f46cbd05",
        "md5": "8e6c716422e3d4a807f0b692cc3ed761",
        "sha256": "6ba79107409b1278ef4e7208c91b8af821fc7f1f0b0fba33a12e02165aa556d5"
      },
      "downloads": -1,
      "filename": "django-pragmatic-1.7.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8e6c716422e3d4a807f0b692cc3ed761",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16681,
      "upload_time": "2016-11-08T10:21:21",
      "upload_time_iso_8601": "2016-11-08T10:21:21.034091Z",
      "url": "https://files.pythonhosted.org/packages/de/28/ba7d85cb226508e02995bd0c83f7a27e30d9fc47984f9fc2ee91f46cbd05/django-pragmatic-1.7.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}