{
  "info": {
    "author": "David Ziegler",
    "author_email": "david.ziegler@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django css\r\n=================\r\n        \r\nDjango-css is a fork of django_compressor_ that makes it easy to use CSS compilers with your Django projects. CSS \r\ncompilers extend CSS syntax to include more powerful features such as variables and nested blocks, and pretty much \r\nrock_ all around. Django-css can currently be used with any CSS compiler that can be called from the command line, such \r\nas HSS_, Sass_, CleverCSS_, or LESS_.\r\n        \r\n.. _rock: http://blog.davidziegler.net/post/92203003/css-compilers-rock\r\n.. _HSS: http://ncannasse.fr/projects/hss\r\n.. _Sass: http://haml.hamptoncatlin.com/docs/rdoc/classes/Sass.html\r\n.. _CleverCSS: http://github.com/dziegler/clevercss/tree/master\r\n.. _LESS: http://lesscss.org/\r\n.. _django_compressor: http://github.com/mintchaos/django_compressor/tree/master\r\n        \r\nThanks to django_compressor, django-css will also version and compress linked and inline javascript or CSS into a single \r\ncached file. These cached files will get served through whatever frontend server you use for serving static files, because \r\nserving static files through Django is just silly.\r\n        \r\nNote: The pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: \r\nhttp://github.com/dziegler/clevercss/tree/master\r\n        \r\nInstallation\r\n************\r\n\r\nAdd ``compressor`` to INSTALLED_APPS. You should also enable some type of caching backend such as memcached, e.g. \r\n``CACHE_BACKEND = 'memcached://127.0.0.1:11211/'``. Don't worry, your static files are not being served through \r\nDjango. The only thing stored in cache is the path to the static file.\r\n\r\nUsage\r\n*****\r\n\r\nSyntax::\r\n\r\n    {% load compress %}\r\n    {% compress <js/css> %}\r\n    <html of inline or linked JS/CSS>\r\n    {% endcompress %}\r\n\r\nExamples::\r\n\r\n    {% load compress %}\r\n    {% compress css %}\r\n    <link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\">\r\n    <link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\">\r\n    {% endcompress %}\r\n\r\nWhich would be rendered like::\r\n\r\n    <link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\">\r\n\r\nor::\r\n\r\n    {% load compress %}\r\n    {% compress js %}\r\n    <script src=\"/media/js/one.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n    <script type=\"text/javascript\" charset=\"utf-8\">obj.value = \"value\";</script>\r\n    {% endcompress %}\r\n\r\nWhich would be rendered like::\r\n\r\n    <script type=\"text/javascript\" src=\"/media/CACHE/js/3f33b9146e12.js\" charset=\"utf-8\"></script>\r\n\r\nIf you're using xhtml, you should use::\r\n\r\n    {% load compress %}\r\n    {% compress css xhtml %}\r\n    <link rel=\"stylesheet\" href=\"/media/css/one.css\" type=\"text/css\" charset=\"utf-8\" />\r\n    <link rel=\"stylesheet\" href=\"/media/css/two.sass\" type=\"text/css\" charset=\"utf-8\" />\r\n    {% compress css %}\r\n\r\nWhich would be rendered like::\r\n\r\n    <link rel=\"stylesheet\" href=\"/media/CACHE/css/f7c661b7a124.css\" type=\"text/css\" media=\"all\" charset=\"utf-8\" />\r\n\r\n\r\nSettings\r\n********\r\n\r\n`COMPILER_FORMATS` default: {}\r\nA dictionary specifying the compiler and arguments to associate with each extension.\r\n\r\n\r\ndjango-css will select which CSS compiler to use based off a file's extension. For example::\r\n\r\n    COMPILER_FORMATS = {\r\n        '.sass': {\r\n        'binary_path':'sass',\r\n        'arguments': '*.sass *.css'\r\n    },\r\n        '.hss': {\r\n        'binary_path':'/home/dziegler/hss',\r\n        'arguments':'*.hss'\r\n    },\r\n    '.ccss': {\r\n        'binary_path':'clevercss',\r\n        'arguments': '*.ccss'\r\n        },\r\n    }\r\n\r\n\r\nwill use Sass to compile `*.sass` files, HSS to compile `*.hss` files, and clevercss to compile `*.ccss` files. `*.css` files \r\nwill be treated like normal css files.\r\n\r\nbinary_path is the path to the CSS compiler. In the above example, sass and clevercss are installed in my path, and   hss is \r\nlocated at /home/dziegler/hss.\r\n\r\narguments are arguments you would call in the command line to the compiler. The order and format of these will depend \r\non the CSS compiler you use. Prior to compilation, * will be replaced with the name of your file to be compiled.\r\n\r\nIf this seems a little hacky, it's because I wanted to make it easy to use whatever CSS compiler you want with as little setup \r\nas possible.\r\n\r\n\r\n`COMPRESS` default: the opposite of `DEBUG`\r\nBoolean that decides if compression will happen.\r\n\r\n`COMPRESS_CSS_FILTERS` default: []\r\nA list of filters that will be applied to CSS.\r\n\r\n`COMPRESS_JS_FILTERS` default: ['compressor.filters.jsmin.JSMinFilter'])\r\nA list of filters that will be applied to javascript.\r\n\r\n`COMPRESS_URL` default: `MEDIA_URL`\r\nControls the URL that linked media will be read from and compressed media\r\nwill be written to.\r\n\r\n`COMPRESS_ROOT` default: `MEDIA_ROOT`\r\nControls the absolute file path that linked media will be read from and\r\ncompressed media will be written to.\r\n\r\n`COMPRESS_OUTPUT_DIR` default: `\"CACHE\"`\r\nControls the directory inside `COMPRESS_ROOT` that compressed files will\r\nbe written to.\r\n\r\n\r\nNotes\r\n*****\r\n\r\nAll relative url() bits specified in linked CSS files are automatically\r\nconverted to absolute URLs while being processed. Any local absolute urls (those\r\nstarting with a '/') are left alone.\r\n\r\nStylesheets that are @import'd are not compressed into the main file. They are\r\nleft alone.\r\n\r\nSet the media attribute as normal on your <style> and <link> elements and\r\nthe combined CSS will be wrapped in @media blocks as necessary.\r\n\r\nLinked files must be on your COMPRESS_URL (which defaults to MEDIA_URL).\r\nIf DEBUG is true off-site files will throw exceptions. If DEBUG is false\r\nthey will be silently stripped.\r\n\r\nCSS files are compiled only when needed, because it would be silly to re-compile on every page request. The way this \r\nworks is that django-css looks at the time your css was last modified, and the time your CleverCSS, HSS, etc file was \r\nmodified. If the modification time for the CleverCSS, HSS, etc file is after the css file's, then the css file gets re-compiled.\r\n\r\nIf COMPRESS is False (defaults to the opposite of DEBUG) CSS files will still be compiled if needed, but files will not be \r\ncompressed and versioned.\r\n\r\nThe pypi version of CleverCSS is buggy and will not work with django-css. Use the updated version on github: \r\nhttp://github.com/dziegler/clevercss/tree/master\r\n\r\n**Recommendations:**\r\n\r\n* Use only relative or full domain absolute urls in your CSS files.\r\n* Avoid @import! Simply list all your CSS files in the HTML, they'll be combined anyway.\r\n\r\n\r\nChanges from 1.0.0, aka the version from google code\r\n****************************************************\r\n\r\nDjango-css was previously using django-compress_ for versioning and compression, and it now uses \r\ndjango_compressor_. The main reasons being that with django_compressor, css/js files are included in the template \r\nitself, not in settings, and versioning is much cleaner. Version 2 requires much less setup and is easier to use, but is not \r\ncompatible with version 1.\r\n\r\n.. _django-compress: http://code.google.com/p/django-compress/\r\n.. _django_compressor: http://github.com/mintchaos/django_compressor/tree/master\r\n\r\nSpecial thanks to Christian Metts and Andreas Pelme for all their hard work on django_compressor and django-compress.\r\n\r\n\r\n\r\n\r\nDependecies\r\n***********\r\n\r\n* BeautifulSoup",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/dziegler/django-css",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-css",
    "package_url": "https://pypi.org/project/django-css/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-css/",
    "project_urls": {
      "Homepage": "http://github.com/dziegler/django-css"
    },
    "release_url": "https://pypi.org/project/django-css/2.1.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "django-css provides an easy way to use CSS compilers with Django projects, and an automated system for compressing CSS and JavaScript files",
    "version": "2.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789403,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33f4c961e3b2869ab7631e752d4e6ce11e3ece42d5460e9148dea77f020c5250",
        "md5": "b5d39b6ff890b5a1d369f32942d2634d",
        "sha256": "48a75879f5beaa25442c69103e81d3c34c2b83c55bb6f548812e0e90296f402f"
      },
      "downloads": -1,
      "filename": "django-css-2.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b5d39b6ff890b5a1d369f32942d2634d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12743,
      "upload_time": "2009-12-31T07:33:10",
      "upload_time_iso_8601": "2009-12-31T07:33:10.511670Z",
      "url": "https://files.pythonhosted.org/packages/33/f4/c961e3b2869ab7631e752d4e6ce11e3ece42d5460e9148dea77f020c5250/django-css-2.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e2152f997e74b131cd7dc6d2f0fadb0ca3b9f6f87412df62f6393ff64141e3b",
        "md5": "d0b2cee44e69f33b0c10016e934912c2",
        "sha256": "a3e330fc574fbb676c5f821c6e3c1a04625cb0571b68899dfb1b69240737e24d"
      },
      "downloads": -1,
      "filename": "django-css-2.1.5.zip",
      "has_sig": false,
      "md5_digest": "d0b2cee44e69f33b0c10016e934912c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21373,
      "upload_time": "2009-12-31T07:33:36",
      "upload_time_iso_8601": "2009-12-31T07:33:36.939608Z",
      "url": "https://files.pythonhosted.org/packages/5e/21/52f997e74b131cd7dc6d2f0fadb0ca3b9f6f87412df62f6393ff64141e3b/django-css-2.1.5.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}