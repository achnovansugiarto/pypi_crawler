{
  "info": {
    "author": "Duong Vu",
    "author_email": "duong.t.vu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dnabarcoder\n\nDnabarcoder is a tool to predict global and local similarity cut-offs for fungal sequence identification. It was implemented in Python which takes DNA barcodes in a fasta file  and their taxonomic classification (at the species, genus, family, order, class, etc. levels) in a tab delimited file as inputs (see data/filamentousfungalITS.fasta and data/filamentousfungalITS.current.classification for the format of the files). The output of dnabarcode will be saved in an folder given by the user. If this folder is not given, the folder namely dnabarcoder will be created. Dnabarcoder contains four components: analysis, visualization, prediction, and classification to help analyze and predict similarity cut-offs for a dataset of barcodes as well as its subclades, and to classify a dataset against the barcode dataset with the predicted cut-offs. For every function of dnabarcoder, a figure is generated to interpret the result. An example of a complete workflow of dnabarcoder can be found in file data/CBSITS2.sh.\n\nAlthough dnabarcoder was initially developed for fungi, it is applicable to any other organisms using DNA barcodes for identification.\n\n## Dependencies:\n\n- [BLAST](https://blast.ncbi.nlm.nih.gov/Blast.cgi), used for DNA sequence comparisons\n- [Matplot](https://matplotlib.org/), used for the visualization of the results\n- [Krona](https://github.com/marbl/Krona/wiki), optional for visualizing classifications\n- [LARGEVIS](https://github.com/rugantio/LargeVis-python3), optinal for visualization\n- [DiVE](https://nlesc.github.io/DiVE), optional for visualization\n- [IQtree](http://www.iqtree.org/), optional for verification\n- [Clustalo](http://www.clustal.org/omega/), opional for verification\n\n## Analysis and Visualization\n\nThe analyzation component was to get an overview, and to study the length, the distribution, and the similarity variation of the sequences at different taxonomic levels. All outputs will be saved in an output folder, dnabarcoder is given as default.\n\n- To get an overview of the moldITS.fasta dataset:\n\n../../dnabarcoder.py overview -i CBSITS.fasta -c CBSITS.current.classification\n\nThe output is given in the file dnabarcoder/CBSITS.overview. The overview at the species, genus, family, order, and class levels are given in the files dnabarcoder/CBSITS.overview.species, dnabarcoder/CBSITS.overview.genus, dnabarcoder/CBSITS.overview.family, dnabarcoder/CBSITS.overview.order, and dnabarcoder/CBSITS.overview.class \n\n- To see the distribution of the barcode lengths:\n\n../../dnabarcoder.py length -i CBSITS.fasta -l 100\n\nHere l is the interval length. Analyzing sequence lengths is important to decide the minimum BLAST alignment length ml. \n\n-To get the distribution of the sequences at different taxonomic level. In the following example, the distribution of the sequences is computed from the species to the class level:\n\n../../dnabarcoder.py distribution -i CBSITS.fasta -c CBSITS.current.classification -ranks class,order,family,genus,species            \n\nwhere ranks are the classification ranks that we are interested in.\n\nIf we want to visualize the distribution of the sequences with Krona, then we can use the following command:\n\n../../dnabarcoder.py  distribution -i CBSITS.fasta -c CBSITS.current.classification -ranks class,order,family,genus,species -method krona\n\n- To get sequence variation with different taxonomic groups:\n\n../../dnabarcoder.py variation -i CBSITS.fasta -c CBSITS.current.classification -ranks class,order,family,genus,species  -ml 400\n\nHere the minimum BLAST alignment length ml is set to 400 as 95% of the barcodes have a length of more than 400bp. For short sequences like ITS1 or ITS2, ml should be set to smaller such as 50.\n\n- To compute a similarity matrix for the barcodes:\n\n../../dnabarcoder.py sim -i CBSITS.fasta -ml 400\n\nThe output is given in the file dnabarcoder/CBSITS.sim\n\nThe second component of dnabarcoder is to visualize the sequences-based 2D/3D “embeddings” using Matplotlib. Sequences’ coordinates are computed using LargeVis.\nTogether with sequence distribution and variation, visu-alization helped evaluate the predicted similarity cut-offs and classifi-cation results. \n\n../../dnabarcoder.py visualize -i CBSITS.fasta -c CBSITS.current.classification -rank class -ml 400 -sim dnabarcoder/CBSITS.sim\n\nIf the simmatrix is not given, dnabarcoder will compute it and save it in the file dnabarcoder/CBSITS.sim.\n\nHere the sequences are colored by on the taxa at the class level. \n\nWe can also visualize the sequences using [DIVE](https://github.com/NLeSC/DiVE). In this case, please download DiVE and place in the visualization folder, and use the following command:\n\n../../dnabarcoder.py visualize -i CBSITS.fasta -c CBSITS.current.classification -rank class -ml 400 -method dive\n\n## Prediction\n\nThe third component is to cluster and predict a similarity cut-off for sequence identification based on taxonomic classification. Given a taxonomic level, if higher taxonomic levels are not given, then whole dataset will be used for the prediction.\n\n- To predict a global similarity cut-off at the genus level of the moldITS dataset for example, use the followig command:\n\n../../dnabarcoder.py predict -i CBSITS.fasta -c CBSITS.current.classification -st 0.7 -et 1 -s 0.001 -ranks genus -ml 400\n\nThe prediction is saved in the file dnabarcoder/CBSITS.predicted, and the predicted cutoffs are saved in a json format file dnabarcoder/CBSITS.cutoffs.json and a tab delimited format file dnabarcoder/CBSITS.cutoffs.json.txt\n\n- To predict local similarity cut-offs at the genus level of the CBSITS dataset for example, use the followig command:\n\n../../dnabarcoder.py predict -i CBSITS.fasta -c CBSITS.current.classification -st 0.7 -et 1 -s 0.001 -ranks genus -higherranks family,order,class,phylum -ml 400\n\nWe can also predict the local cutoffs at a given rank individually:\n\n../../dnabarcoder.py predict -i CBSITS.fasta -c CBSITS.current.classification -st 0.7 -et 1 -s 0.001 -ranks genus -higherranks family -ml 400\n\nor in a given taxa:\n\n../../dnabarcoder.py predict -i CBSITS.fasta -c CBSITS.current.classification -st 0.7 -et 1 -s 0.001 -ranks genus -higherranks phylum -ml 400 -taxa Ascomycota\n\n\n- To predict global and local similarity cut-offs for the CBSITS dataset at the species level, we first need to remove sequences of species complexes that are indistinguishable by ITS with 100% similarity score:\n\n../../dnabarcoder.py remove -i CBSITS.fasta -c CBSITS.current.classification -ranks species -sim dnabarcoder/CBSITS.sim -ml 400 -t 1\n\nHere t is the threshold or cut-off for removing sequences of the same complex. The results will be saved in dnabarcoder/CBSITS.species.diff.fasta dna dnabarcoder/CBSITS.similar\n\n-To predict global similarity cut-off for species identification of the CBSITS dataset:\n\n../../dnabarcoder.py predict -i dnabarcoder/CBSITS.species.diff.fasta -c CBSITS.current.classification -st 0.9 -et 1 -s 0.001 -ranks species -ml 400 -sim dnabarcoder/CBSITS.sim -prefix CBSITS\n\nThe prefix is to save the prediction and the predicted cutoffs in files dnabarcoder/CBSITS.predicted, dnabarcoder/CBSITS.cutoffs.json and dnabarcoder/CBSITS.cutoffs.json.txt.\n\n-To predict local similarity cut-offs for species identification of the CBSITS dataset:\n\n../../dnabarcoder.py predict -i dnabarcoder/CBSITS.species.diff.fasta -c CBSITS.current.classification -st 0.9 -et 1 -s 0.001 -ranks species -higherranks genus,family,order,class,phylum -ml 400 -sim dnabarcoder/CBSITS.sim -prefix CBSITS \n\nThe prediction and cutoffs will be saved in the files dnabarcoder/filamentousfungalITS.predicted, dnabarcoder/CBSITS.cutoffs.json and dnabarcoder/CBSITS.cutoffs.json.txt.\n\n\nTo compute the best cutoffs:\n\n../../dnabarcoder.py best -i dnabarcoder/CBSITS.cutoffs.json -c CBSITS.current.classification\n\nThe best similarity cut-offs are saved in json and text format files dnabarcoder/CBSITS.cutoffs.best.json and dnabarcoder/CBSITS.cutoffs.best.txt.\n\n\n## Classification and Verification\n\nThe last component of dnabarcode is to classify a dataset against a reference/barcode dataset using a similarity cut-off or the local cut-offs predicted for the reference dataset.\n\n- To search for the best match of the sequences in the UNITErelease.fasta file, use the following command:\n\n../../dnabarcoder.py classify -i UNITErelease.fasta -r CBSITS.fasta -ml 400\n\nThe result is saved in the file dnabarcoder/UNITErelease.CBSITS_BLAST.bestmatch\n\nTo classify the UNITE sequences based on best matches, using the following commands:\n\n - Globally, based on only one similarity cut-off:\n\n../../dnabarcoder.py classify -i dnabarcoder/UNITErelease.CBSITS_BLAST.bestmatch -f UNITErelease.fasta -r CBSITS.fasta -c CBSITS.current.classification -cutoff 0.994 -rank species -confidence 0.8334 \n\nHere 0.994 is the global similarity cut-off for sequence identification at the species level. The result will be saved in dnabarcoder/UNITErelease.filamentousfungalITS_BLAST.species.0994.classified. \n\n- Locally, based on the similarity cut-off predicted for the best match:\n\n../../dnabarcoder.py classify -i dnabarcoder/UNITErelease.CBSITS_BLAST.bestmatch -f UNITErelease.fasta -r CBSITS.fasta -c CBSITS.current.classification -cutoffs dnabarcoder/CBSITS.cutoffs.best.json \n\nThe result will be saved in dnabarcoder/UNITErelease.CBSITS_BLAST.classified. \n\nOnly classify at the species level:\n\n../../dnabarcoder.py classify -i dnabarcoder/UNITErelease.CBSITS_BLAST.bestmatch -f UNITErelease.fasta -r CBSITS.fasta -c fCBSITS.current.classification -cutoffs dnabarcoder/CBSITS.cutoffs  -rank species\n\nThe result will be saved in dnabarcoder/UNITErelease.CBSITS_BLAST.species.classified. \n\n- To compute classification/assigment accuracy and precision, use the following commands:\n\n../../dnabarcoder.py accuracy -i dnabarcoder/UNITErelease.CBSITS_BLAST.species.classified -c UNITErelease.current.classification -r CBSITS.current.classification\n\n-To visualize the classification/assignment results with Krona:\n\n../../dnabarcoder.py krona -i dnabarcoder/UNITErelease.CBSITS_BLAST.classified -c filamentousfungalITS.current.classification\n\n- To verify the classification results based on phylogenic trees at the species level:\n\n../../dnabarcoder.py verify -i dnabarcoder/UNITErelease.CBSITS_BLAST.classified -c CBSITS.current.classification -r CBSITS.fasta -f UNITErelease.fasta -rank species\n\n## Data\n\nThe CBSITS barcode dataset was released in Vu et al. (2019), while the UNITErelease.fasta dataset is the [UNITE general FASTA release](https://plutof.ut.ee/#/doi/10.15156/BIO/786368). The CBSITS.current.classification and UNITErelease.current.classification were updated from [Mycobank](https://www.mycobank.org/).\n\n## Contact person \n\nDuong Vu (d.vu@wi.knaw.nl)\n\n\n## References\n\nVu D. et al. (2019). Large-scale generation and analysis of filamentous fungal DNA barcodes boosts coverage for kingdom fungi and reveals thresholds for fungal species and higher taxon delimitation. Studies in Mycology 92, 135-154.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vuthuyduong/dnabarcoder",
    "keywords": "dnabarcoder",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnabarcoder",
    "package_url": "https://pypi.org/project/dnabarcoder/",
    "platform": null,
    "project_url": "https://pypi.org/project/dnabarcoder/",
    "project_urls": {
      "Homepage": "https://github.com/vuthuyduong/dnabarcoder"
    },
    "release_url": "https://pypi.org/project/dnabarcoder/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "dnabarcoder: an open-source software package for analyzing and predicting DNA sequence similarity cut-offs for fungal sequence identification",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14014677,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "509aecc290340da2de70ca17321492437b0035de6747989c7f9294324ca43bd5",
        "md5": "4525be02f4acc7ffda72f75cd6873687",
        "sha256": "c57eced2a6732e4905088dfb11fc67c5103f289985ad3ec5725bda5c0edbb0c6"
      },
      "downloads": -1,
      "filename": "dnabarcoder-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4525be02f4acc7ffda72f75cd6873687",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 75911,
      "upload_time": "2022-04-19T10:10:53",
      "upload_time_iso_8601": "2022-04-19T10:10:53.412350Z",
      "url": "https://files.pythonhosted.org/packages/50/9a/ecc290340da2de70ca17321492437b0035de6747989c7f9294324ca43bd5/dnabarcoder-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}