{
  "info": {
    "author": "Ivan Del Mastro",
    "author_email": "info@adventure2italy.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "=====================\ndjango-geopositionmap\n=====================\n\nA model field that can hold a geoposition (latitude/longitude), and corresponding admin/form widget.\nPorting to GeoDjango Point type.\nGoogle map and OSM map widgets.\n\n\nPrerequisites\n-------------\n\ndjango-geopositionmap requires Django 1.4.10 or greater.\nGeoDjango gis contrib geospatial framework.\n\n\nInstallation\n------------\n\n- Use your favorite Python packaging tool to install ``geopositionmap``\n  from `PyPI`_, e.g.::\n\n    pip install django-geopositionmap\n\n- Add ``\"geopositionmap\"`` to your ``INSTALLED_APPS`` setting::\n\n    INSTALLED_APPS = (\n        # â€¦\n        \"geopositionmap\",\n    )\n\n- If you are still using Django <1.3, you are advised to install\n  `django-staticfiles`_ for static file serving.\n\n\nUsage\n-----\n\n``django-geopositionmap`` comes with a model field that makes it pretty\neasy to add a geoposition field to one of your models. To make use of\nit:\n\n- In your ``myapp/models.py``::\n\n    from django.db import models\n    from geopositionmap.geoFields import LatLngField\n\n    class POI(models.Model):\n        name = models.CharField(max_length=100)\n        position = LatLngField()\n\n- This enables the following simple API::\n\n    >>> from myapp.models import POI\n    >>> poi = POI.objects.get(id=1)\n    >>> poi.position\n    LatLng(52.522906,13.41156)\n    >>> poi.position.lat\n    52.522906\n    >>> poi.position.lng\n    13.41156\n\n- Some methods:\n\n    >>> pos = LatLng(10.0, 11.0)\n    >>> pos.geosPoint\n    <Point object at 0x4175910L>\n    >>> type(pos.geosPoint)\n    <class 'django.contrib.gis.geos.point.Point'>\n    >>> pos\n    LatLng(10.0,11.0)\n    >>> pos = LatLng('10','11')\n    >>> pos\n    LatLng(10.0,11.0)\n    >>> pos.lat\n    10.0\n    >>> pos.lng\n    11.0\n    >>> print pos\n    +010.0000000000000000,+011.0000000000000000\n    >>> type(pos)\n    <class 'geopositionmap.LatLng'>\n    >>> pos.to_string()\n    u'+010.0000000000000000,+011.0000000000000000'\n    >>> type(pos.to_string())\n    <type 'unicode'>\n    >>> pos.pos\n    (10.0, 11.0)\n    >>> type (pos.pos)\n    <type 'tuple'>\n    >>> pos.lat = 14\n    >>> pos.lng = -12\n    >>> pos\n    LatLng(14.0, -12.0)\n    >>> pos.setPos(41,46)\n    LatLng(41.0, 46.0)\n    >>> pos.setPos('41.15 46.56')\n    LatLng(41.15, 46.56)\n    >>> \n    >>> ne = LatLng('-13.0','-11.0')\n    >>> pos = LatLng('-14.0','-12.3')\n    >>> sw = LatLng('-15.0','-13.0')\n    >>> pos.isBounded(ne,sw)\n    LatLng(-14.0, -12.3)\n    >>> pos = LatLng('-14.0','12.3')\n    >>> pos.isBounded(ne,sw)\n    False\n\n    \n\nForm field and widget\n---------------------\n\nAdmin\n^^^^^\n\nIf you use a ``LatLngField`` in the admin it will automatically\nshow a `Google Maps`_ widget with a marker at the currently stored\nposition. You can drag and drop the marker with the mouse and the\ncorresponding latitude and longitude fields will be updated\naccordingly.\n\nIt looks like this:\n\n|geopositionmap-widget-admin|\n\n\nManager in models\n-----------------\n\nModels\n^^^^^^\n\nYou can use custom Manager to manage custom methods in your models object.\nLatLngField object is a geo position coordinate, thus you can find out if your point is right\ninto a boud area (NE,SW).\n\n- In your ``myapp/models.py``::\n\n    from django.db import models\n    from geopositionmap.geoFields import LatLngField\n    from geopositionmap.geoManager import geoManager\n    \n    objects = geoManager()\n\n    class POI(models.Model):\n        name = models.CharField(max_length=100)\n        position = LatLngField()\n        \n        def is_bounded(self):\n            return self.position\n\n- This enables the following simple API::\n\n    >>> from myapp.models import POI\n    >>> POI.objects.bound('42,13','40,10') #retrive POIs into bound rectangle, if are active\n    [<POI: POI object>]\n    >>> POI.objects.bound() #retrive all active POIs\n    []\n\n    \n- Active on map method\n\n    from django.db import models\n    from geopositionmap.geoFields import LatLngField\n    from geopositionmap.geoManager import geoManager\n    \n    objects = geoManager()\n\n    class POI(models.Model):\n        name = models.CharField(max_length=100)\n        position = LatLngField()\n        \n        def active_OnMap(self):\n            return False #return 'True' to active is_bounded method\n        \n        def is_bounded(self):\n            return self.position\n            \n- Use active_OnMap method enables the following simple API::\n\n    >>> from myapp.models import POI\n    >>> POI.objects.bound('42,13','40,10')\n    []\n    >>> POI.objects.bound()\n    []\n    \n    \nRegular Forms\n^^^^^^^^^^^^^\n\nUsing the map widget on a regular form outside of the admin requires\njust a little more work. In your template make sure that\n\n- `jQuery`_ is included\n- the static files (JS, CSS) of the map widget are included (just use\n  ``{{ form.media }}``)\n\n**Example**::\n\n    <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js\"></script>\n    <form method=\"POST\" action=\"\">{% csrf_token %}\n        {{ form.media }}\n        {{ form.as_p }}\n    </form>\n\n\nSettings\n--------\n\nYou can customize the `MapOptions`_ and `MarkerOptions`_ used to initialize the\nmap and marker in JavaScript by defining ``GEOPOSITIONMAP_MAP_OPTIONS`` or\n``GEOPOSITIONMAP_MARKER_OPTIONS`` in your ``settings.py``.\nSet True GEOPOSITIONMAP_GOOGLE_VIEW.GOOGLE_VIEW and GEOPOSITIONMAP_OSM_VIEW.OSM_VIEW to view\nGoogle maps or view OSM maps.\n\n**Example**::\n\n    GEOPOSITIONMAP_MAP_OPTIONS = {\n        'minZoom': 3,\n        'maxZoom': 15,\n    }\n\n    GEOPOSITIONMAP_MARKER_OPTIONS = {\n        'cursor': 'move'\n    }\n\n    GEOPOSITIONMAP_GOOGLE_VIEW = False # default is True\n    GEOPOSITIONMAP_OSM_VIEW    = False # default is True\n    \nPlease note that you cannot use a value like ``new google.maps.LatLng(52.5,13.4)``\nfor a setting like ``center`` or ``position`` because that would end up as a\nstring in the JavaScript code and not be evaluated. Please use\n`Lat/Lng Object Literals`_ for that purpose, e.g. ``{'lat': 52.5, 'lng': 13.4}``.\n\nYou can also customize the height of the displayed map widget by setting\n``GEOPOSITION_MAP_WIDGET_HEIGHT`` to an integer value (default is 480).\n\n\nLicense\n-------\n\n`MIT`_\n\n\n.. _Google Maps: http://code.google.com/apis/maps/documentation/javascript/\n.. |geopositionmap-widget-admin| image:: docs/images/admin.jpg\n.. _jQuery: http://jquery.com\n.. _MIT: http://philippbosch.mit-license.org/\n.. _MapOptions: https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions\n.. _MarkerOptions: https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions\n.. _Lat/Lng Object Literals: https://developers.google.com/maps/documentation/javascript/examples/map-latlng-literal\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ivandm/django-geopositionmap",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-geopositionmap",
    "package_url": "https://pypi.org/project/django-geopositionmap/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-geopositionmap/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/ivandm/django-geopositionmap"
    },
    "release_url": "https://pypi.org/project/django-geopositionmap/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django Geoposition, google and osm map. Model field that can hold a geoposition with bound method, gis Point type, and corresponding admin widget.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1373043,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f15ccd93210611fd21bd3604478f8ca1df6bb6c03b5c56ab1948a45465a4bc2",
        "md5": "ec79ac878c6ef7c3a24da2ced2c28de4",
        "sha256": "064760ab5891b23489b02a2d8ea3e7c1a89a200e990d264efcfefdd4f3524e81"
      },
      "downloads": -1,
      "filename": "django-geopositionmap-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "ec79ac878c6ef7c3a24da2ced2c28de4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23624,
      "upload_time": "2015-01-06T18:31:27",
      "upload_time_iso_8601": "2015-01-06T18:31:27.533284Z",
      "url": "https://files.pythonhosted.org/packages/5f/15/ccd93210611fd21bd3604478f8ca1df6bb6c03b5c56ab1948a45465a4bc2/django-geopositionmap-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}