{
  "info": {
    "author": "Ivan Begtin",
    "author_email": "ivan@begtin.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development",
      "Topic :: System :: Networking",
      "Topic :: Terminals",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "metawarc: a command-line tool for metadata extraction from files from WARC (Web ARChive)\n########################################################################################\n\nmetawarc (pronounced *me-ta-warc*) is a command line WARC files processing tools.\nIts goal is to make CLI interaction with files inside WARC archives so easy as possible.\nIt provides a simple ``metawarc`` command that allows to extract metadata from images, documents and other files inside\nWARC archives.\n\n\n.. contents::\n\n.. section-numbering::\n\n\n\nMain features\n=============\n\n* Built-in WARC support\n* Metadata extraction for a lot of file formats\n* Low memory footprint\n* Documentation\n* Test coverage\n\n\nFile formats supported\n======================\n\nMS Office OLE: .doc, .xls, .ppt\n\nMS Office XML: .docx, .xlsx, .pptx\n\nAdobe PDF: .pdf\n\nImages: .png, .jpg, .tiff, .jpeg, .jp2\n\n\nInstallation\n============\n\n\nAny OS\n-------------\n\nA universal installation method (that works on Windows, Mac OS X, Linux, â€¦,\nand always provides the latest version) is to use pip:\n\n\n.. code-block:: bash\n\n    # Make sure we have an up-to-date version of pip and setuptools:\n    $ pip install --upgrade pip setuptools\n\n    $ pip install --upgrade metawarc\n\n\n(If ``pip`` installation fails for some reason, you can try\n``easy_install metawarc`` as a fallback.)\n\n\nPython version\n--------------\n\nPython version 3.6 or greater is required.\n\nUsage\n=====\n\n\nSynopsis:\n\n.. code-block:: bash\n\n    $ metawarc [command] [flags]  inputfile\n\n\nSee also ``metawarc --help`` and ``metawarc [command] --help`` for help for each command.\n\n\nExamples\n--------\n\nExtract metadata of all supported file types from 'digital.gov.ru.warc.gz' and output results to default filename 'metadata.jsonl':\n\n.. code-block:: bash\n\n    $ metawarc metadata digital.gov.ru.warc.gz\n\n\nExtract metadata for .doc and .docx file types from 'digital.gov.ru.warc.gz' and output results to default filename 'metadata.jsonl':\n\n.. code-block:: bash\n\n    $ metawarc metadata --filetypes doc,docx digital.gov.ru.warc.gz\n\nExtract metadata for .doc and .docx file types from 'digital.gov.ru.warc.gz' and output results to filename 'digital_meta.jsonl':\n\n.. code-block:: bash\n\n    $ metawarc metadata --filetypes doc,docx --output digital_meta.jsonl digital.gov.ru.warc.gz\n\n\nCommands\n========\n\nMetadata command\n----------------\nExtracts metadata from files inside .warc files. Returns JSON lines output for each file found.\n\nExtract metadata for .doc and .docx file types from 'digital.gov.ru.warc.gz' and output results to filename 'digital_meta.jsonl':\n\n.. code-block:: bash\n\n    $ metawarc metadata --filetypes doc,docx --output digital_meta.jsonl digital.gov.ru.warc.gz\n\n\n\nAnalyze command\n----------------\nReturns list of mime mimetypes with stats as number of files and total files size for each mime type\n\nAnalyzes 'digital.gov.ru.warc.gz' and output results of list of mime types as table to console\n\n.. code-block:: bash\n\n    $ metawarc analyze digital.gov.ru.warc.gz",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/datacoon/metawarc/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/datacoon/metawarc/",
    "keywords": "warc archive webarchive metadata",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metawarc",
    "package_url": "https://pypi.org/project/metawarc/",
    "platform": "",
    "project_url": "https://pypi.org/project/metawarc/",
    "project_urls": {
      "Download": "https://github.com/datacoon/metawarc/",
      "Homepage": "https://github.com/datacoon/metawarc/"
    },
    "release_url": "https://pypi.org/project/metawarc/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "metawarc: a command-line tool for metadata extraction from files inside WARC (web archive)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15562599,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7f811442e78eabd794e7c5f196d0fba43569455769158ef0b69a066f93c328d",
        "md5": "707c02207d3a9d1d95645f6415e4d18d",
        "sha256": "7941013d80265aaab9898d37cea25c43af326b018be1c7a7b488e464866f62a2"
      },
      "downloads": -1,
      "filename": "metawarc-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "707c02207d3a9d1d95645f6415e4d18d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7384,
      "upload_time": "2020-05-11T13:14:55",
      "upload_time_iso_8601": "2020-05-11T13:14:55.969376Z",
      "url": "https://files.pythonhosted.org/packages/a7/f8/11442e78eabd794e7c5f196d0fba43569455769158ef0b69a066f93c328d/metawarc-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}