{
  "info": {
    "author": "dalor",
    "author_email": "dalor@i.ua",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# dpixiv\nTool to simple use pixiv api of site\n\n### Install\n```\npip install dpixiv\n```\n\n### Example of using\n\n```python\nfrom dpixiv import DPixivIllusts\n\npix = DPixivIllusts(session=None, proxy=None)\n\n### Attributes: ###\n\npix.is_auth  #(True|False)\npix.session  #session\npix.proxy    #http proxy 'http://{ip}:{port}'\n\n### Methods:    ###\n\n# Auth\npix.auth(login, password, captcha_token)\n# To get capthca_token go to https://accounts.pixiv.net/login\n# and write in browser console command:\n# document.getElementById('recaptcha-v3-token').value\n# Do it fast and save pix.session\n\n# Get lists of ids that recommended to user by pixiv\npictures_ids = pix.recommender(sample_illusts=None, count=100)\n\n# Get list(or not) of short information of pictures (fast speed)\nshort_pictures_info = pix.illust_list(illusts)\n\n# Get full information of picture (not so fast)\nfull_picture_info = pix.info(id, token=False)\n\n# Use next method for a lot of pictures(much faster then one by one)\n# Get list of full information of picture (medium speed)\nfull_pictures_info = pix.info_packs(ids, token=False)\n\n# Get lists of ids of pictures that similar to picture with id (fast speed)\nsimilar_pictures_ids = pix.similar(id, limit=10)\n\n# Get list of bookmarks\nbookmarks_ids = pix.bookmarks(page=None, from_page=1, to_page=1000000, step_count=10)\n# Use page to show only one page\n\n# Get list of following\nfollowing_ids = pix.new_work_following(page=None, from_page=1, to_page=1000000, step_count=10)\n# Use page to show only one page\n\n# Search by name\nsearch_ids = pix.search(word, page=None, from_page=1, to_page=1000000, step_count=10)\n# Use page to show only one page\n\n# Add tag (set token=True to info and get by 'token' key)\nresponse = pix.add_tag(pic_id, tag, token)\n\n# Delete tag\nresponse = pix.del_tag(pic_id, tag, token)\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dalor/dpixiv",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpixiv",
    "package_url": "https://pypi.org/project/dpixiv/",
    "platform": "",
    "project_url": "https://pypi.org/project/dpixiv/",
    "project_urls": {
      "Homepage": "https://github.com/dalor/dpixiv"
    },
    "release_url": "https://pypi.org/project/dpixiv/4.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tool to simple use pixiv api of site (Python >= 3.5)",
    "version": "4.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5829610,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc625400f42851bc869dc919160374e9330e4c5b56a3426cf1b8f6104301a184",
        "md5": "13e68b0a8851d429953a49d88b2ba13a",
        "sha256": "05de8227f55b1bf2a0e46f217c710c3f1566cf6bb2923ffa8bb79d8204aa1e11"
      },
      "downloads": -1,
      "filename": "dpixiv-4.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "13e68b0a8851d429953a49d88b2ba13a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5116,
      "upload_time": "2019-09-14T16:04:58",
      "upload_time_iso_8601": "2019-09-14T16:04:58.372293Z",
      "url": "https://files.pythonhosted.org/packages/dc/62/5400f42851bc869dc919160374e9330e4c5b56a3426cf1b8f6104301a184/dpixiv-4.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}