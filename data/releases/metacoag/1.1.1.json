{
  "info": {
    "author": "Vijini Mallawaarachchi and Yu Lin",
    "author_email": "viji.mallawaarachchi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/metagentools/MetaCoAG/master/MetaCoAG_Logo.png\" width=\"500\" title=\"MetaCoAG logo\" alt=\"MetaCoAG logo\">\n</p>\n\n# MetaCoAG: Binning Metagenomic Contigs via Composition, Coverage and Assembly Graphs\n\n[![DOI](https://img.shields.io/badge/DOI-10.1007/978--3--031--04749--7__5-informational)](https://doi.org/10.1007/978-3-031-04749-7_5)\n[![DOI](https://img.shields.io/badge/DOI-10.1089/cmb.2022.0262-green)](https://doi.org/10.1089/cmb.2022.0262)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/metacoag/badges/version.svg)](https://anaconda.org/bioconda/metacoag)\n[![PyPI version](https://badge.fury.io/py/metacoag.svg)](https://badge.fury.io/py/metacoag)\n\n[![CI](https://github.com/metagentools/MetaCoAG/actions/workflows/testing.yml/badge.svg)](https://github.com/metagentools/MetaCoAG/actions/workflows/testing.yml)\n![GitHub](https://img.shields.io/github/license/Vini2/MetaCoAG)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![CodeQL](https://github.com/metagentools/MetaCoAG/actions/workflows/codeql.yml/badge.svg)](https://github.com/metagentools/MetaCoAG/actions/workflows/codeql.yml)\n[![Documentation Status](https://readthedocs.org/projects/metacoag/badge/?version=latest)](https://metacoag.readthedocs.io/en/latest/?badge=latest)\n\nMetaCoAG is a metagenomic contig binning tool that makes use of the connectivity information found in assembly graphs, apart from the composition and coverage information. MetaCoAG makes use of single-copy marker genes along with a graph matching technique and a label propagation technique to bin contigs. MetaCoAG is tested on contigs obtained from next-generation sequencing (NGS) data. Currently, MetaCoAG supports contigs assembled using metaSPAdes and MEGAHIT, and recently we have added support for Flye assemblies (has not been tested extensively).\n\nFor detailed instructions on installation, usage and visualisation, please refer to the [documentation hosted at Read the Docs](https://metacoag.readthedocs.io/).\n\n**NEW:** MetaCoAG is now available on bioconda at \n[https://anaconda.org/bioconda/metacoag](https://anaconda.org/bioconda/metacoag) and on PyPI at [https://pypi.org/project/metacoag/](https://pypi.org/project/metacoag/).\n\n## Dependencies\nMetaCoAG installation requires Python 3.7 or above (tested on Python 3.7.4). You will need the following python dependencies to run MetaCoAG and related support scripts. The tested versions of the dependencies are listed as well.\n* [python-igraph](https://igraph.org/python/) - version 0.9.6\n* [biopython](https://biopython.org/) - version 1.74\n* [networkx](https://networkx.github.io/) - version 2.4\n* [scipy](https://www.scipy.org/) - version 1.3.1\n* [numpy](https://numpy.org/) - version 1.17.2\n* [tqdm](https://github.com/tqdm/tqdm) - version 4.36.1\n\nMetaCoAG uses the following tools to scan for single-copy marker genes. These tools have been tested on the following versions.\n* [FragGeneScan](https://sourceforge.net/projects/fraggenescan/) - version 1.31\n* [HMMER](http://hmmer.org/) - version 3.3.2\n\n\n## Installing MetaCoAG using conda\n\nWe recommend that you use [`conda`](https://docs.conda.io/en/latest/) to run MetaCoAG.\n\nYou can install MetaCoAG from [bioconda](https://anaconda.org/bioconda/metacoag).\n\n```shell\n# add channels\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\n# create conda environment and install metacoag\nconda create -n metacoag -c bioconda metacoag\n\n# activate metacoag environment\nconda activate metacoag\n\n# check metacoag installation\nmetacoag -h\n```\n\n## Setting up MetaCoAG for development\n\n### Downloading MetaCoAG\nYou can clone the MetaCoAG repository to your machine.\n\n```\ngit clone https://github.com/Vini2/MetaCoAG.git\n```\n\nNow go into the MetaCoAG folder using the command\n\n```\ncd MetaCoAG/\n```\n\n### Using `conda`\n\nOnce you have installed `conda`, make sure you are in the MetaCoAG folder. Now run the following commands to create a `conda` environment and activate it to run MetaCoAG.\n\n```\nconda env create -f environment.yml\nconda activate metacoag\n```\n\n### Using `pip`\nYou can run the following command to install MetaCoAG using `pip`. Make sure you are in the MetaCoAG folder.\n\n```\npip install .\n```\n\n**Note:** If you use pip to setup MetaCoAG for development, you will have to install [FragGeneScan](https://sourceforge.net/projects/fraggenescan/) and [HMMER](http://hmmer.org/) manually and add them to your system path.\n\n### Test the setup\n\nAfter setting up, run the following command to ensure that metacoag is working.\n\n```\nmetacoag -h\n```\n\n## Example Usage\n\n```\nmetacoag --assembler spades --graph /path/to/graph_file.gfa --contigs /path/to/contigs.fasta --paths /path/to/paths_file.paths --abundance /path/to/abundance.tsv --output /path/to/output_folder\n```\n\n```\nmetacoag --assembler megahit --graph /path/to/graph_file.gfa --contigs /path/to/contigs.fasta --abundance /path/to/abundance.tsv --output /path/to/output_folder\n```\n\n```\nmetacoag --assembler flye --graph /path/to/assembly_graph.gfa --contigs /path/to/assembly.fasta --paths /path/to/assembly_info.txt --abundance /path/to/abundance.tsv --output /path/to/output_folder\n```\n\n\n## Citation\n\nMetaCoAG has been accepted at [RECOMB 2022](https://recomb2022.net/accepted-papers/) and is published in Lecture Notes in Computer Science at [https://doi.org/10.1007/978-3-031-04749-7_5](https://doi.org/10.1007/978-3-031-04749-7_5) and the journal extension is published in the Journal of Computational Biology at [https://www.liebertpub.com/doi/10.1089/cmb.2022.0262](https://www.liebertpub.com/doi/10.1089/cmb.2022.0262).\n\nIf you use MetaCoAG in your work, please cite the following publications.\n\n```bibtex\n@InProceedings{10.1007/978-3-031-04749-7_5,\n  author=\"Mallawaarachchi, Vijini and Lin, Yu\",\n  editor=\"Pe'er, Itsik\",\n  title=\"MetaCoAG: Binning Metagenomic Contigs via Composition, Coverage and Assembly Graphs\",\n  booktitle=\"Research in Computational Molecular Biology\",\n  year=\"2022\",\n  publisher=\"Springer International Publishing\",\n  address=\"Cham\",\n  pages=\"70--85\",\n  abstract=\"Metagenomics has allowed us to obtain various genetic material from different species and gain valuable insights into microbial communities. Binning plays an important role in the early stages of metagenomic analysis pipelines. A typical pipeline in metagenomics binning is to assemble short reads into longer contigs and then bin into groups representing different species in the metagenomic sample. While existing binning tools bin metagenomic contigs, they do not make use of the assembly graphs that produce such assemblies. Here we propose MetaCoAG, a tool that utilizes assembly graphs with the composition and coverage information to bin metagenomic contigs. MetaCoAG uses single-copy marker genes to estimate the number of initial bins, assigns contigs into bins iteratively and adjusts the number of bins dynamically throughout the binning process. Experimental results on simulated and real datasets demonstrate that MetaCoAG significantly outperforms state-of-the-art binning tools, producing similar or more high-quality bins than the second-best tool. To the best of our knowledge, MetaCoAG is the first stand-alone contig-binning tool to make direct use of the assembly graph information.\",\n  isbn=\"978-3-031-04749-7\"\n}\n\n@Article{doi:10.1089/cmb.2022.0262,\nauthor = {Mallawaarachchi, Vijini and Lin, Yu},\ntitle = {Accurate Binning of Metagenomic Contigs Using Composition, Coverage, and Assembly Graphs},\njournal = {Journal of Computational Biology},\nvolume = {29},\nnumber = {12},\npages = {1357--1376},\nyear = {2022},\ndoi = {10.1089/cmb.2022.0262},\nnote ={PMID: 36367700},\nURL = {https://doi.org/10.1089/cmb.2022.0262},\neprint = {https://doi.org/10.1089/cmb.2022.0262},\nabstract = { Metagenomics enables the recovery of various genetic materials from different species, thus providing valuable insights into microbial communities. Metagenomic binning group sequences belong to different organisms, which is an important step in the early stages of metagenomic analysis pipelines. The classic pipeline followed in metagenomic binning is to assemble short reads into longer contigs and then bin these resulting contigs into groups representing different taxonomic groups in the metagenomic sample. Most of the currently available binning tools are designed to bin metagenomic contigs, but they do not make use of the assembly graphs that produce such assemblies. In this study, we propose MetaCoAG, a metagenomic binning tool that uses assembly graphs with the composition and coverage information of contigs. MetaCoAG estimates the number of initial bins using single-copy marker genes, assigns contigs into bins iteratively, and adjusts the number of bins dynamically throughout the binning process. We show that MetaCoAG significantly outperforms state-of-the-art binning tools by producing similar or more high-quality bins than the second-best binning tool on both simulated and real datasets. To the best of our knowledge, MetaCoAG is the first stand-alone contig-binning tool that directly makes use of the assembly graph information along with other features of the contigs. }\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metagentools/MetaCoAG",
    "keywords": "",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metacoag",
    "package_url": "https://pypi.org/project/metacoag/",
    "platform": null,
    "project_url": "https://pypi.org/project/metacoag/",
    "project_urls": {
      "Homepage": "https://github.com/metagentools/MetaCoAG"
    },
    "release_url": "https://pypi.org/project/metacoag/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "MetaCoAG: Binning Metagenomic Contigs via Composition, Coverage and Assembly Graphs",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16968400,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d902403523aadc2956207e9d7414658d4b895c13944e3b37dfad4d3ea64ca54",
        "md5": "f9fad77e1b4a5f0b03ed32e446d08e19",
        "sha256": "38b77cdf20853e5ec952118009425f2ca6356e73722dfbcd92456ad16cafbdbc"
      },
      "downloads": -1,
      "filename": "metacoag-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f9fad77e1b4a5f0b03ed32e446d08e19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 2886831,
      "upload_time": "2023-02-22T00:23:58",
      "upload_time_iso_8601": "2023-02-22T00:23:58.965564Z",
      "url": "https://files.pythonhosted.org/packages/6d/90/2403523aadc2956207e9d7414658d4b895c13944e3b37dfad4d3ea64ca54/metacoag-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}