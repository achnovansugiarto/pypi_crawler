{
  "info": {
    "author": "Ben Mather",
    "author_email": "bwhmather@bwhmather.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Python Mnemonicode\n==================\n\n|build-status| |coverage|\n\nA python library for encoding binary data as a sequence of english words.\n\nBased on, and compatible with http://web.archive.org/web/20101031205747/http://www.tothink.com/mnemonic/\n\n\nInstallation\n------------\n\nRecommended method is to use the version from `pypi`_\n\n.. code:: bash\n\n    $ pip install mnemonicode\n\nPlease note that this library supports python 3 only.\n\n\nUsage\n-----\n\nPython mnemonicode exposes four functions: `mnformat` and `mnparse` for handling conversions to and from formatted strings, and `mnencode` and `mndecode` for working with lower level lists of tuples of words.\n\n\nString encoding\n~~~~~~~~~~~~~~~\n\nEncode a byte array as a sequence of grouped words, formatted as a single string:\n\n.. code:: python\n\n    >>> mnformat(b\"cucumber\")\n    'paris-pearl-ultra--gentle-press-total';\n\nDecode a mnemonicode string into a byte array:\n\n.. code:: python\n\n    >>> mnparse('scoop-limit-recycle--ferrari-album')\n    b'tomato'\n\nBoth functions allow specifying the word and group separator.  It is safe for the word separator to match part of the group separator, but not the other way round.  Word and group separators that overlap with word in the dictionary should obviously be avoided.\n\nAn example using custom separators:\n\n.. code:: python\n\n    >>> mnemonicode.mnformat(\n    ...     b'apricot', group_separator=', uhhh, ', word_separator=', um, '\n    ... )\n    'arctic, um, dilemma, um, single, uhhh, presto, um, mask, um, jet'\n\n\nTuple encoding\n~~~~~~~~~~~~~~\n\nEncode a bytes object as an iterator of tuples of words:\n\n.. code:: python\n\n    >>> list(mnencode(b\"avocado\"))\n    [('bicycle', 'visible', 'robert'), ('cloud', 'unicorn', 'jet')]\n\nDecode an iterator of tuples of words to get a byte array:\n\n.. code:: python\n\n    >>> mndecode([('turtle', 'special', 'recycle'), ('ferrari', 'album')])\n    b'potato'\n\n\nLinks\n-----\n\n- Source code: https://github.com/bwhmather/python-mnemonicode\n- Issue tracker: https://github.com/bwhmather/python-mnemonicode/issues\n- Continuous integration: https://travis-ci.org/bwhmather/python-mnemonicode\n- PyPI: https://pypi.python.org/pypi/mnemonicode\n\n\nLicense\n-------\n\nThe project is licensed under the BSD license.  See `LICENSE`_ for details.\n\n\n.. |build-status| image:: https://travis-ci.org/bwhmather/python-mnemonicode.png?branch=develop\n    :target: https://travis-ci.org/bwhmather/python-mnemonicode\n    :alt: Build Status\n.. |coverage| image:: https://coveralls.io/repos/bwhmather/python-mnemonicode/badge.png?branch=develop\n    :target: https://coveralls.io/r/bwhmather/python-mnemonicode?branch=develop\n    :alt: Coverage\n.. _pypi: https://pypi.python.org/pypi/mnemonicode\n.. _LICENSE: ./LICENSE",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bwhmather/python-mnemonicode",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mnemonicode",
    "package_url": "https://pypi.org/project/mnemonicode/",
    "platform": "",
    "project_url": "https://pypi.org/project/mnemonicode/",
    "project_urls": {
      "Homepage": "https://github.com/bwhmather/python-mnemonicode"
    },
    "release_url": "https://pypi.org/project/mnemonicode/1.4.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for encoding binary data as a sequence of english words",
    "version": "1.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6187291,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1d0d0b23b713709303c5e94766e850150997d357fa77c8515aa2086b359df93",
        "md5": "90f045835379fa78805b9c1880889846",
        "sha256": "b71159e67912afa2b8d25d4306b2a37797615301c7f371e1419ff8d322d27b14"
      },
      "downloads": -1,
      "filename": "mnemonicode-1.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "90f045835379fa78805b9c1880889846",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15503,
      "upload_time": "2018-05-16T23:04:37",
      "upload_time_iso_8601": "2018-05-16T23:04:37.313992Z",
      "url": "https://files.pythonhosted.org/packages/c1/d0/d0b23b713709303c5e94766e850150997d357fa77c8515aa2086b359df93/mnemonicode-1.4.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}