{
  "info": {
    "author": "Carter Temm",
    "author_email": "cartertemm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Logging"
    ],
    "description": "Logsetup eases the often tedious and repetitive process of log initialization, without compromising flexibility.\n\nIt augments the builtin logging facility by providing a straightforward API, scores of seamless third-party integrations, thread-independent exception catching, and more.\n\nNever write another redundant logging procedure again.\n\n## why?\n\nThough python's builtin log facility provides a lot of flexibility and functionality straight out of the box, it unfortunately requires a lot of messy configuration, especially when used in complex applications.\n\nTo illustrate this, the following snippet is a typical log setup, where all events are printed to stderr and errors are sent to errors.log.\n\n```\nimport logging\n\nformatter = logging.Formatter(\"%(levelname)s:%(name)s:%(message)s\")\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nerror_handler = logging.FileHandler(\"errors.log\")\nerror_handler.setLevel(logging.ERROR)\nerror_handler.setFormatter(formatter)\nlogger.addHandler(error_handler)\n\nstream_handler = logging.StreamHandler()\nstream_handler.setLevel(logging.DEBUG)\nstream_handler.setFormatter(formatter)\nlogger.addHandler(stream_handler)\n```\n\nThat was awfully verbose.\n\nEnter logsetup!\n\n```\nimport logging\nimport logsetup\n\nlogsetup.set_level(logging.DEBUG)\n\nlogsetup.log_to_stream(logging.DEBUG)\nlogsetup.log_to_file(logging.ERROR, \"errors.log\")\n```\n\nand we're done\n\n```\n>>> logger = logging.getLogger()\n>>> logger.debug(\"debug message\")\nDEBUG root - <stdin>.<module> (2021-03-16 09:54:17) - MainThread (13828):\ndebug message\n\n>>> try:\n... \t0/0\n... except:\n... \tlogger.exception(\"while calculating 0/0\")\n\nERROR root - <stdin>.<module> (2021-03-16 09:55:47) - MainThread (13828):\nwhile calculating 0/0\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nZeroDivisionError: division by zero\n>>>\n```\n\n### What about basicConfig?\n\nlogging.basicConfig works fine in tiny console applications, but due to limited scope will quickly prove inadequate for anything more sophisticated.\n\n## How it works\n\nThe following assumes a solid understanding of logging levels, handlers, and how they interact to functionally send messages to different destinations.\nIf you need to quickly brush up on these concepts, have a look at the [Advanced Logging Tutorial](https://docs.python.org/3/howto/logging.html).\n\n\nAt the start of your application, import and initialize logsetup with a level which will be applied to the root logger.\n\n```\nimport logging\nimport logsetup\n\nlogsetup.set_level(logging.DEBUG)\n```\n\nTo log all exceptions at a severity of logging.ERROR, you can:\n\n```\nlogsetup.log_unhandled_exceptions()\n```\n\nand for the same behavior across threads:\n\n```\nlogsetup.log_threaded_exceptions\n```\n\nNote that `log_unhandled_exceptions` takes an optional callback, in cases where you need to notify your UI for example.\n\nAny logging implementation would be useless without handlers, which send messages to a destination of your choosing. In logsetup, handlers are created and applied in a single `logsetup.log_to_*` function call, each of which require a severity level and variable number of parameters.\n\n```\n>>> logsetup.log_to_file(logging.DEBUG, \"debug.log\")\n<FileHandler debug.log (DEBUG)>\n```\n\nIn short, this means write out all events with a severity of DEBUG or above to \"debug.log\".\n\nThere is no limit to the number of handlers a given logger can have. In fact, in production you'll probably want multiple. For instance, one to print messages to the console, another to pipe everything to a file for later review, and yet another to send critical errors to your team via email or Slack.\nIf you have a user-facing application, it's only a matter of time before something somewhere goes wrong. With permission, get peace of mind by automatically sending diagnostic data, crashes, errors and other issues along to those that can work to develop a patch.\n\n### Custom formats\n\nBy default, logsetup uses `logsetup.DEFAULT_FMT` and `logsetup.DEFAULT_DATEFMT` for it's log and date formatting.\n\nIf you'd like to change this for individual handlers, you can do so by passing the `fmt` and `datefmt` keyword arguments, like so:\n\n```\nfmt = \"%(asctime)s %(levelname)s:%(name)s:%(message)s\"\nlog_to_socket(logging.ERROR, host, port, fmt=fmt)\n```\n\n## Handlers\n\nThe following builtin handlers are currently supported. Refer to the code or corresponding handler's documentation for more info.\n\n* stream - writes to IO streams\n* file - writes to a file on disk\n* rotating_file - writes to a set of files on disk, switching out when one reaches a certain size\n* timed_rotating_file - like rotating_file, but switches out after a set time period\n* socket - writes pickled records to a socket listening over TCP. Use `logging.makeLogRecord` to turn the data into a python object\n* SMTP - writes to an email message, sent using the provided SMTP server\n\nThe following are implemented in logsetup directly:\n\n* [Mailgun](https://www.mailgun.com/) - cheap and hassle free email delivery API\n* [Prowl](https://www.prowlapp.com/) - sends iOS push notifications\n\n### Notifiers Integration\n\nIf the [Notifiers](https://github.com/liiight/notifiers) packages is installed, additional logsetup handler functions will be defined at runtime for each supported provider.\nUsing them is as simple as:\n\n```\nlogsetup.log_to_pushover(logging.ERROR, user, message, token)\nlogsetup.log_to_slack(logging.WARNING, webhook_url, message)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cartertemm/logsetup",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logsetup",
    "package_url": "https://pypi.org/project/logsetup/",
    "platform": "",
    "project_url": "https://pypi.org/project/logsetup/",
    "project_urls": {
      "Homepage": "https://github.com/cartertemm/logsetup"
    },
    "release_url": "https://pypi.org/project/logsetup/1.1/",
    "requires_dist": [
      "notifiers",
      "pyprowl"
    ],
    "requires_python": "",
    "summary": "Python log initialization made easy",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13072482,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3eeb5dd6fdff88ac6939bc883be07c2ba7353d1ecd53f1d045814dca20d5f0e",
        "md5": "73eb5c9e6ce1256cbd4e172cc1757f54",
        "sha256": "d165f49f35d47b31181d1b305a0e0d0d8be6d90ceadbc7336cf2272d5802e11d"
      },
      "downloads": -1,
      "filename": "logsetup-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73eb5c9e6ce1256cbd4e172cc1757f54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10457,
      "upload_time": "2022-03-03T20:04:26",
      "upload_time_iso_8601": "2022-03-03T20:04:26.294960Z",
      "url": "https://files.pythonhosted.org/packages/f3/ee/b5dd6fdff88ac6939bc883be07c2ba7353d1ecd53f1d045814dca20d5f0e/logsetup-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67bc7bdebda2bdd090ce4e1f2828ddeb160d0377994e970326c38f635cf3977a",
        "md5": "c58675a915e2de2c894ea4c82c9e5b8c",
        "sha256": "5d6f91987b5c0e27badbdd5da81624a35d17624813efc2378e88e8077ac81abc"
      },
      "downloads": -1,
      "filename": "logsetup-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c58675a915e2de2c894ea4c82c9e5b8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11619,
      "upload_time": "2022-03-03T20:04:28",
      "upload_time_iso_8601": "2022-03-03T20:04:28.102103Z",
      "url": "https://files.pythonhosted.org/packages/67/bc/7bdebda2bdd090ce4e1f2828ddeb160d0377994e970326c38f635cf3977a/logsetup-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}