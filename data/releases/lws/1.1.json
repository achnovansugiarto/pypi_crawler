{
  "info": {
    "author": "Jonathan Le Roux",
    "author_email": "leroux@merl.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Multimedia :: Sound/Audio :: Analysis"
    ],
    "description": "LWS\n===\n\n**Fast spectrogram phase recovery using Local Weighted Sums (LWS)**\n\nAuthor: Jonathan Le Roux -- 2008-2017\n\n.. image:: https://badge.fury.io/py/lws.svg\n    :target: https://badge.fury.io/py/lws\n\n| LWS is a C/C++ library for which this package is a Python wrapper.\n| A Matlab/Mex wrapper is also available.\n\nLicense\n-------\n\n| Copyright (C) 2008-2017 Jonathan Le Roux\n| Apache 2.0  (http://www.apache.org/licenses/LICENSE-2.0)\n\nReference\n---------\n\nIf you use this code, please cite the following papers.\n\nBatch LWS\n~~~~~~~~~\n\n| Jonathan Le Roux, Hirokazu Kameoka, Nobutaka Ono, Shigeki Sagayama, \n| \"Fast Signal Reconstruction from Magnitude STFT Spectrogram Based on Spectrogram Consistency,\" \n| in Proc. International Conference on Digital Audio Effects (DAFx), pp. 397--403, Sep. 2010.\n\n.. code::\n\n    @InProceedings{LeRoux2010DAFx09,\n      author =\t {Jonathan {Le Roux} and Hirokazu Kameoka and Nobutaka Ono and Shigeki Sagayama},\n      title =\t {Fast Signal Reconstruction from Magnitude {STFT} Spectrogram Based on Spectrogram Consistency},\n      booktitle =\t {Proc. International Conference on Digital Audio Effects (DAFx)},\n      year =\t 2010,\n      pages =\t {397--403},\n      month =\t sep\n    }\n    \n\n\nOnline LWS, \"No future\" LWS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| Jonathan Le Roux, Hirokazu Kameoka, Nobutaka Ono, Shigeki Sagayama, \n| \"Phase initialization schemes for faster spectrogram-consistency-based signal reconstruction,\" \n| in Proc. of ASJ Autumn Meeting, 3-10-3, Sep. 2010.\n\n.. code::\n\n    @InProceedings{LeRoux2010ASJ09,\n      author =\t {Jonathan {Le Roux} and Hirokazu Kameoka and Nobutaka Ono and Shigeki Sagayama},\n      title =\t {Phase Initialization Schemes for Faster Spectrogram-Consistency-Based Signal Reconstruction},\n      year =\t 2010,\n      booktitle =\t {Proceedings of the Acoustical Society of Japan Autumn Meeting (ASJ)},\n      number =\t {3-10-3},\n      month =\t mar\n    }\n    \nInstallation\n------------\n\n1. The easiest way to install `lws` is via `pip`:  \n\n        .. code-block:: bash\n\n            pip install lws\n\n2. To compile from source using cython (required if one modifies the code):  \n\n        .. code-block:: bash\n\n            cd python\n            LWS_USE_CYTHON=1 make \n\n3. To compile from source using the pre-generated c source file (which was obtained with cython): \n\n        .. code-block:: bash\n\n            cd python\n            make\n\n4. Alternatively, one can first use cython to create a tarball, which can then be installed by pip:  \n\n        .. code-block:: bash\n\n            cd python\n            make sdist\n            pip install dist/lws-1.0.tar.gz\n\n\nUsage\n-----\n.. code:: python\n\n    import lws\n    import numpy as np\n    \n    lws_processor=lws.lws(512,128, mode=\"speech\") # 512: window length; 128: window shift\n    X = lws_processor.stft(x) # where x is a single-channel waveform\n    X0 = np.abs(X) # Magnitude spectrogram\n    print('{:6}: {:5.2f} dB'.format('Abs(X)', lws_processor.get_consistency(X0))\n    X1 = lws_processor.run_lws(X0) # reconstruction from magnitude (in general, one can reconstruct from an initial complex spectrogram)\n    print('{:6}: {:5.2f} dB'.format('LWS', lws_processor.get_consistency(X1)))\n\nOptions\n-------\n\n.. code:: python\n\n    lws_processor=lws.lws(awin_or_fsize, fshift, L = 5, swin = None, look_ahead = 3,\n              nofuture_iterations = 0, nofuture_alpha = 1, nofuture_beta = 0.1, nofuture_gamma = 1,\n              online_iterations = 0, online_alpha = 1, online_beta = 0.1, online_gamma = 1,\n              batch_iterations = 100, batch_alpha = 100, batch_beta = 0.1, batch_gamma = 1,\n              symmetric_win = True, mode= None, fftsize=None, perfectrec=True)\n\n* ``awin_or_fsize``: either the analysis window, or a window length (in which case the sqrt(hann) window is used); the analysis window should be symmetric for the computations to be correct.\n* ``fshift``: window shift\n* ``L``: approximation order in the phase reconstruction algorithm, 5 should be good.\n* ``swin``: synthesis window (if None, it gets computed from the analysis window for perfect reconstruction)\n* ``look_ahead``: number of look-ahead frames in RTISI-LA-like algorithm, 3 should be good.\n* ``xxx_iterations``, ``xxx_alpha``, ``xxx_beta``, ``xxx_gamma``: number of iterations of algorithm xxx (where xxx is one of ``nofuture``, ``online``, or ``batch``), and parameters alpha/beta/gamma of the decreasing sparsity curve that is used to determine which bins get updated at each iteration. Any bin with magnitude larger than a given threshold is updated, others are ignored (``thresholds = alpha * np.exp(- beta * np.arange(iterations)**gamma)``)\n* ``symmetric_win``: determines whether to use a symmetric hann window or not\n* ``mode``: ``None``, ``'speech'``, or ``'music'``. This sets default numbers of iterations of each algorithm that seem to be good for speech and music signals. Disclaimer: your mileage may vary.\n* ``fftsize``: can be set longer than frame size to do 0-padding in the FFT. Note that 0-padding will be done symmetrically on the left and right of the window to enforce symmetry in the analysis window.\n* ``perfectrec``: whether to pad with zeros on each side to ensure perfect reconstruction at the boundaries too. \n\nThree steps are implemented, and they can be turned on/off independently by appropriately setting the corresponding number of iterations:\n\n* \"no future\" LWS: phase initialization using LWS updates that only involve past frames\n* online LWS: phase estimation using online LWS updates, corresponding to a fast time-frequency domain version of RTISI-LA\n* LWS: phase estimation using batch LWS updates on the whole spectrogram\n\n\nRemarks\n-------\n\n1) The .cpp files are actually C code with some C99 style comments, but the .cpp extension is needed on Windows for mex to acknowledge the c99 flag (with .c, it is discarded, and -ansi used instead, leading to compilation errors)\n\n2) Because the module is a C extension, it cannot be reloaded (see <http://bugs.python.org/issue1144263>). In Jupyter Notebooks, in particular, autoreload will not work, and the kernel has to be restarted.\n\nAcknowledgements\n----------------\n\nThe recipe to wrap the LWS C code as a python module was largely inspired by the following post by Martin Sosic: <http://martinsosic.com/development/2016/02/08/wrapping-c-library-as-python-module.html>",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/Jonathan-LeRoux/lws/archive/1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Jonathan-LeRoux/lws",
    "keywords": "phase,reconstruction,stft,short-term Fourier Transform,spectrogram",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lws",
    "package_url": "https://pypi.org/project/lws/",
    "platform": "",
    "project_url": "https://pypi.org/project/lws/",
    "project_urls": {
      "Download": "https://github.com/Jonathan-LeRoux/lws/archive/1.1.tar.gz",
      "Homepage": "https://github.com/Jonathan-LeRoux/lws"
    },
    "release_url": "https://pypi.org/project/lws/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fast spectrogram phase reconstruction using Local Weighted Sums",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9381656,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77566478cf2fdf54513a7af5053a548ca2e5cfb9aebc046d5d86a57afa7fa126",
        "md5": "76ae701072f9d59b0310ade5595290dd",
        "sha256": "91485599eca943907db09f208911eb9de503e72517c8a2280b0819fad5e9c931"
      },
      "downloads": -1,
      "filename": "lws-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "76ae701072f9d59b0310ade5595290dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 143357,
      "upload_time": "2017-11-30T20:38:26",
      "upload_time_iso_8601": "2017-11-30T20:38:26.111935Z",
      "url": "https://files.pythonhosted.org/packages/77/56/6478cf2fdf54513a7af5053a548ca2e5cfb9aebc046d5d86a57afa7fa126/lws-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}