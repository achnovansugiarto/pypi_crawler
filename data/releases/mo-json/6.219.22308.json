{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# More JSON Tools\r\n\r\n\r\n[![PyPI Latest Release](https://img.shields.io/pypi/v/mo-json.svg)](https://pypi.org/project/mo-json/)\r\n[![Build Status](https://app.travis-ci.com/klahnakoski/mo-json.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-json)\r\n [![Coverage Status](https://coveralls.io/repos/github/klahnakoski/mo-json/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-json?branch=dev)\r\n[![Downloads](https://pepy.tech/badge/mo-json)](https://pepy.tech/project/mo-json)\r\n\r\n\r\nThis set of modules provides the following benefits:\r\n\r\n* Serialize more datastructures into JSON\r\n* More flexibility  in what's accepted as \"JSON\"\r\n* Iterate over massive JSON easily (`mo_json.stream`)\r\n* Provide a bijection between strictly typed JSON, and dynamic typed JSON.\r\n\r\n\r\n## Recent Changes\r\n\r\n* **Version 6.x.x** - Typed encoder no longer encodes to typed multivalues, rather, encodes to array of typed values.  For example, instead of \r\n\r\n      {\"a\":{\"~n~\":[1, 2]}}\r\n  we get \r\n      \r\n      {\"a\":[{\"~n~\":1},{\"~n~\":2}]} \r\n\r\n## Usage\r\n\r\n### Encode using `__json__`\r\n\r\nAdd a `__json__` method to any class you wish to serialize to JSON. It is incumbent on you to ensure valid JSON is emitted:\r\n\r\n    class MyClass(object):\r\n        def __init__(self, a, b):\r\n            self.a = a\r\n            self.b = b\r\n\r\n        def __json__(self):\r\n            separator = \"{\"\r\n            for k, v in self.__dict__.items():\r\n                yield separator\r\n                separator = \",\"\r\n                yield value2json(k)+\": \"+value2json(v)\r\n            yield \"}\"\r\n\r\nWith the `__json__` function defined, you may use the `value2json` function:\r\n\r\n    from mo_json import value2json\r\n    \r\n    result = value2json(MyClass(a=\"name\", b=42))    \r\n\r\n\r\n### Encode using `__data__`\r\n\r\nAdd a `__data__` method that will convert your class into some JSON-serializable data structures.  You may find this easier to implement than emitting pure JSON.  **If both `__data__` and `__json__` exist, then `__json__` is used.**   \r\n\r\n    from mo_json import value2json\r\n\r\n    class MyClass(object):\r\n        def __init__(self, a, b):\r\n            self.a = a\r\n            self.b = b\r\n\r\n        def __data__(self):\r\n            return self.__dict__\r\n   \r\n    result = value2json(MyClass(a=\"name\", b=42))    \r\n\r\n\r\n### Decoding\r\n\r\nThe `json2value` function provides a couple of options\r\n\r\n* `flexible` - will be very forgiving of JSON accepted (see [hjson](https://pypi.org/project/hjson/))\r\n* `leaves` - will interpret keys with dots (\"`.`\") as dot-delimited paths\r\n\r\n\r\n```\r\nfrom mo_json import json2value\r\n\r\nresult = json2value(\r\n    \"http.headers.referer: http://example.com\", \r\n    flexible=True, \r\n    leaves=True\r\n)\r\nassert result=={'http': {'headers': {'referer': 'http://example.com'}}}\r\n```\r\n \r\nNotice the lack of quotes in the JSON (hjson) and the deep structure created by the dot-delimited path name\r\n\r\n## Running tests\r\n\r\n    pip install -r tests/requirements.txt\r\n    set PYTHONPATH=.    \r\n    python.exe -m unittest discover tests\r\n\r\n\r\n## Module Details\r\n\r\n### Method `mo_json.scrub()`\r\n\r\nRemove, or convert, a number of objects from a structure that are not JSON-izable. It is faster to `scrub` and use the default (aka c-based) python encoder than it is to use `default` serializer that forces the use of an interpreted python encoder. \r\n\r\n----------------------\r\n\r\n### Module `mo_json.stream`\r\n\r\nA module that supports queries over very large JSON\r\nstrings. The overall objective is to make a large JSON document appear like\r\na hierarchical database, where arrays of any depth, can be queried like\r\ntables. \r\n\r\n\r\n#### Limitations\r\n\r\nThis is not a generic streaming JSON parser. It is only intended to breakdown the top-level array, or object for less memory usage.  \r\n\r\n*  **Array values must be the last object property** - If you query into a \r\n   nested array, all sibling properties found after that array must be ignored \r\n   (must not be in the `expected_vars`). The code will raise an exception if\r\n   you can not extract all expected variables.\r\n\r\n----------------------\r\n\r\n### Method `mo_json.stream.parse()`\r\n\r\nWill return an iterator over all objects found in the JSON stream.\r\n\r\n**Parameters:**\r\n\r\n* **json** - a parameter-less function, when called returns some number of\r\n  bytes from the JSON stream. It can also be a string.\r\n* **path** - a dot-delimited string specifying the path to the nested JSON. Use \r\n  `\".\"` if your JSON starts with `[`, and is a list.\r\n* **expected_vars** - a list of strings specifying the full property names \r\n  required (all other properties are ignored)\r\n\r\n#### Common Usage\r\n\r\nThe most common use of `parse()` is to iterate over all the objects in a large, top-level, array:\r\n\r\n    parse(json, path=\".\", required_vars=[\".\"]}\r\n\r\nFor example, given the following JSON: \r\n\r\n    [\r\n        {\"a\": 1},\r\n        {\"a\": 2},\r\n        {\"a\": 3},\r\n        {\"a\": 4}\r\n    ]\r\n\r\nreturns a generator that provides\r\n\r\n    {\"a\": 1}\r\n    {\"a\": 2}\r\n    {\"a\": 3}\r\n    {\"a\": 4}\r\n\r\n\r\n#### Examples\r\n\r\n**Simple Iteration**\r\n\r\n    json = {\"b\": \"done\", \"a\": [1, 2, 3]}\r\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\r\n\r\nWe will iterate through the array found on property `a`, and return both `a` and `b` variables. It will return the following values:\r\n\r\n    {\"b\": \"done\", \"a\": 1}\r\n    {\"b\": \"done\", \"a\": 2}\r\n    {\"b\": \"done\", \"a\": 3}\r\n\r\n\r\n**Bad - Property follows array**\r\n\r\nThe same query, but different JSON with `b` following `a`:\r\n\r\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\r\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\r\n\r\nSince property `b` follows the array we're iterating over, this will raise an error.\r\n\r\n**Good - No need for following properties**\r\n\r\nThe same JSON, but different query, which does not require `b`:\r\n\r\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\r\n    parse(json, path=\"a\", required_vars=[\"a\"]}\r\n\r\nIf we do not require `b`, then streaming will proceed just fine:\r\n\r\n    {\"a\": 1}\r\n    {\"a\": 2}\r\n    {\"a\": 3}\r\n\r\n**Complex Objects**\r\n\r\nThis streamer was meant for very long lists of complex objects. Use dot-delimited naming to refer to full name of the property\r\n\r\n    json = [{\"a\": {\"b\": 1, \"c\": 2}}, {\"a\": {\"b\": 3, \"c\": 4}}, ...\r\n    parse(json, path=\".\", required_vars=[\"a.c\"])\r\n\r\nThe dot (`.`) can be used to refer to the top-most array. Notice the structure is maintained, but only includes the required variables.\r\n\r\n    {\"a\": {\"c\": 2}}\r\n    {\"a\": {\"c\": 4}}\r\n    ...\r\n\r\n**Nested Arrays**\r\n\r\nNested array iteration is meant to mimic a left-join from parent to child table;\r\nas such, it includes every record in the parent. \r\n\r\n    json = [\r\n        {\"o\": 1: \"a\": [{\"b\": 1}: {\"b\": 2}: {\"b\": 3}: {\"b\": 4}]},\r\n        {\"o\": 2: \"a\": {\"b\": 5}},\r\n        {\"o\": 3}\r\n    ]\r\n    parse(json, path=[\".\", \"a\"], required_vars=[\"o\", \"a.b\"])\r\n\r\nThe `path` parameter can be a list, which is used to indicate which properties\r\nare expected to have an array, and to iterate over them. Please notice if no\r\narray is found, it is treated like a singleton array, and missing arrays still\r\nproduce a result.\r\n\r\n    {\"o\": 1, \"a\": {\"b\": 1}}\r\n    {\"o\": 1, \"a\": {\"b\": 2}}\r\n    {\"o\": 1, \"a\": {\"b\": 3}}\r\n    {\"o\": 1, \"a\": {\"b\": 4}}\r\n    {\"o\": 2, \"a\": {\"b\": 5}}\r\n    {\"o\": 3}\r\n\r\n**Large top-level objects**\r\n\r\nSome JSON is a single large object, rather than an array of objects. In these cases, you can use the `items` operator to iterate through all name/value pairs of an object:\r\n\r\n    json = {\r\n        \"a\": \"test\",\r\n        \"b\": 2,\r\n        \"c\": [1, 2]\r\n    }\r\n    parse(json, {\"items\":\".\"}, {\"name\", \"value\"})   \r\n\r\nproduces an iterator of\r\n\r\n    {\"name\": \"a\", \"value\":\"test\"} \r\n    {\"name\": \"b\", \"value\":2} \r\n    {\"name\": \"c\", \"value\":[1,2]} \r\n\r\n----------------------\r\n\r\n### Module `typed_encoder`\r\n\r\n\r\nOne reason that NoSQL documents stores are wonderful is their schema can automatically expand to accept new properties. Unfortunately, this flexibility is not limitless; A string assigned to property prevents an object being assigned to the same, or visa-versa. This flexibility is under attack by the strict-typing zealots; who, in their self righteous delusion, believe explicit types are better. They make the lives of humans worse; as we are forced to toil over endless schema modifications.\r\n\r\nThis module translates JSON documents into \"typed\" form; which allows document containers to store both objects and primitives in the same property. This also enables the storage of values with no containing object! \r\n\r\nThe typed JSON has a different form than the original, and queries into the document store must take this into account. This conversion is intended to be hidden behind a query abstraction layer that can understand this format.\r\n\r\n#### How it works\r\n\r\nThere are three main conversions:\r\n\r\n1. Primitive values are replaced with single-property objects, where the property name indicates the data type of the value stored:\r\n```\r\n    {\"a\": true} -> {\"a\": {\"~b~\": true}} \r\n    {\"a\": 1   } -> {\"a\": {\"~n~\": 1   }} \r\n    {\"a\": \"1\" } -> {\"a\": {\"~s~\": \"1\" }}\r\n```\r\n2. JSON objects get an additional property, `~e~`, to mark existence. This allows us to query for object existence, and to count the number of objects.\r\n```    \r\n    {\"a\": {}} -> {\"a\": {}, \"~e~\": 1}  \r\n```\r\n3. JSON arrays are contained in a new object, along with `~e~` to count the number of elements in the array:\r\n```    \r\n    {\"a\": [1, 2, 3]} -> {\"a\": {\r\n        \"~e~\": 3, \r\n        \"~N~\":[\r\n            {\"~n~\": 1},\r\n            {\"~n~\": 2},\r\n            {\"~n~\": 3}\r\n        ]\r\n    }}\r\n```\r\nPlease notice the sum of `a.~e~` works for both objects and arrays; letting us interpret sub-objects as single-value nested object arrays. \r\n\r\n### Function `typed_encode()`\r\n\r\nAccepts a `dict`, `list`, or primitive value, and generates the typed JSON that can be inserted into a document store.\r\n\r\n### Function `json2typed()`\r\n\r\nConverts an existing JSON unicode string and returns the typed JSON unicode string for the same.\r\n\r\n\r\n----------------------\r\n\r\n\r\n### Module `mo_json.encode`\r\n\r\n### Function: `mo_json.encode.json_encoder()`\r\n\r\n----------------------\r\n\r\n**Update Mar2016** - *PyPy version 5.x appears to have improved C integration to\r\nthe point that the C library callbacks are no longer a significant overhead:\r\nThis pure Python JSON encoder is no longer faster than a compound C/Python\r\nsolution.*\r\n\r\nFast JSON encoder used in `convert.value2json()` when running in Pypy. Run the\r\n[speedtest](https://github.com/klahnakoski/pyLibrary/blob/dev/tests/speedtest_json.py)\r\nto compare with default implementation and ujson\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-json",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-json",
    "package_url": "https://pypi.org/project/mo-json/",
    "platform": null,
    "project_url": "https://pypi.org/project/mo-json/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-json"
    },
    "release_url": "https://pypi.org/project/mo-json/6.219.22308/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More JSON Tools!",
    "version": "6.219.22308",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547947,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03ede4100eb601b8aae51e4fa5331790059bc0b9785dfbdf81bc07a80f2af3ca",
        "md5": "3be78c757887bfeeb2b43f65ad7143be",
        "sha256": "185e6268db0af943eb442040b6e6f32db51a2ddbb1b0b13bf2be887dace6d20b"
      },
      "downloads": -1,
      "filename": "mo-json-6.219.22308.tar.gz",
      "has_sig": false,
      "md5_digest": "3be78c757887bfeeb2b43f65ad7143be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33028,
      "upload_time": "2022-11-04T02:50:48",
      "upload_time_iso_8601": "2022-11-04T02:50:48.622714Z",
      "url": "https://files.pythonhosted.org/packages/03/ed/e4100eb601b8aae51e4fa5331790059bc0b9785dfbdf81bc07a80f2af3ca/mo-json-6.219.22308.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}