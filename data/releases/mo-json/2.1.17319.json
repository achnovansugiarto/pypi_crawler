{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "More JSON Tools!\n================\n\nThis set of modules solves three problems:\n\n-  We want to iterate over massive JSON easily (``mo_json.stream``)\n-  A bijection between strictly typed JSON, and dynamic typed JSON.\n-  Flexible JSON parser to handle comments, and other forms\n-  JSON encoding is slow (``mo_json.encode``)\n\nModule ``mo_json.stream``\n-------------------------\n\nA module that supports queries over very large JSON strings. The overall\nobjective is to make a large JSON document appear like a hierarchical\ndatabase, where arrays of any depth, can be queried like tables.\n\nLimitations\n~~~~~~~~~~~\n\nThis is not a generic streaming JSON parser. It is only intended to\nbreakdown the top-level array, or object for less memory usage.\n\n-  **Array values must be the last object property** - If you query into\n   a nested array, all sibling properties found after that array must be\n   ignored (must not be in the ``expected_vars``). The code will raise\n   an exception if you can not extract all expected variables.\n\nMethod ``mo_json.stream.parse()``\n---------------------------------\n\nWill return an iterator over all objects found in the JSON stream.\n\n**Parameters:**\n\n-  **json** - a parameter-less function, when called returns some number\n   of bytes from the JSON stream. It can also be a string.\n-  **path** - a dot-delimited string specifying the path to the nested\n   JSON. Use ``\".\"`` if your JSON starts with ``[``, and is a list.\n-  **expected\\_vars** - a list of strings specifying the full property\n   names required (all other properties are ignored)\n\nCommon Usage\n~~~~~~~~~~~~\n\nThe most common use of ``parse()`` is to iterate over all the objects in\na large, top-level, array:\n\n::\n\n    parse(json, path=\".\", required_vars=[\".\"]}\n\nFor example, given the following JSON:\n\n::\n\n    [\n        {\"a\": 1},\n        {\"a\": 2},\n        {\"a\": 3},\n        {\"a\": 4}\n    ]\n\nreturns a generator that provides\n\n::\n\n    {\"a\": 1}\n    {\"a\": 2}\n    {\"a\": 3}\n    {\"a\": 4}\n\nExamples\n~~~~~~~~\n\n**Simple Iteration**\n\n::\n\n    json = {\"b\": \"done\", \"a\": [1, 2, 3]}\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\n\nWe will iterate through the array found on property ``a``, and return\nboth ``a`` and ``b`` variables. It will return the following values:\n\n::\n\n    {\"b\": \"done\", \"a\": 1}\n    {\"b\": \"done\", \"a\": 2}\n    {\"b\": \"done\", \"a\": 3}\n\n**Bad - Property follows array**\n\nThe same query, but different JSON with ``b`` following ``a``:\n\n::\n\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\n\nSince property ``b`` follows the array we're iterating over, this will\nraise an error.\n\n**Good - No need for following properties**\n\nThe same JSON, but different query, which does not require ``b``:\n\n::\n\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\n    parse(json, path=\"a\", required_vars=[\"a\"]}\n\nIf we do not require ``b``, then streaming will proceed just fine:\n\n::\n\n    {\"a\": 1}\n    {\"a\": 2}\n    {\"a\": 3}\n\n**Complex Objects**\n\nThis streamer was meant for very long lists of complex objects. Use\ndot-delimited naming to refer to full name of the property\n\n::\n\n    json = [{\"a\": {\"b\": 1, \"c\": 2}}, {\"a\": {\"b\": 3, \"c\": 4}}, ...\n    parse(json, path=\".\", required_vars=[\"a.c\"])\n\nThe dot (``.``) can be used to refer to the top-most array. Notice the\nstructure is maintained, but only includes the required variables.\n\n::\n\n    {\"a\": {\"c\": 2}}\n    {\"a\": {\"c\": 4}}\n    ...\n\n**Nested Arrays**\n\nNested array iteration is meant to mimic a left-join from parent to\nchild table; as such, it includes every record in the parent.\n\n::\n\n    json = [\n        {\"o\": 1: \"a\": [{\"b\": 1}: {\"b\": 2}: {\"b\": 3}: {\"b\": 4}]},\n        {\"o\": 2: \"a\": {\"b\": 5}},\n        {\"o\": 3}\n    ]\n    parse(json, path=[\".\", \"a\"], required_vars=[\"o\", \"a.b\"])\n\nThe ``path`` parameter can be a list, which is used to indicate which\nproperties are expected to have an array, and to iterate over them.\nPlease notice if no array is found, it is treated like a singleton\narray, and missing arrays still produce a result.\n\n::\n\n    {\"o\": 1, \"a\": {\"b\": 1}}\n    {\"o\": 1, \"a\": {\"b\": 2}}\n    {\"o\": 1, \"a\": {\"b\": 3}}\n    {\"o\": 1, \"a\": {\"b\": 4}}\n    {\"o\": 2, \"a\": {\"b\": 5}}\n    {\"o\": 3}\n\n**Large top-level objects**\n\nSome JSON is a single large object, rather than an array of objects. In\nthese cases, you can use the ``items`` operator to iterate through all\nname/value pairs of an object:\n\n::\n\n    json = {\n        \"a\": \"test\",\n        \"b\": 2,\n        \"c\": [1, 2]\n    }\n    parse(json, {\"items\":\".\"}, {\"name\", \"value\"})   \n\nproduces an iterator of\n\n::\n\n    {\"name\": \"a\", \"value\":\"test\"} \n    {\"name\": \"b\", \"value\":2} \n    {\"name\": \"c\", \"value\":[1,2]} \n\nModule ``typed_encoder``\n------------------------\n\nOne reason that NoSQL documents stores are wonderful is their schema can\nautomatically expand to accept new properties. Unfortunately, this\nflexibility is not limitless; A string assigned to property prevents an\nobject being assigned to the same, or visa-versa. This flexibility is\nunder attack by the strict-typing zealots, who, in their self righteous\ndelusion believe explicit types are better, actually make the lives of\nhumans worse; toiling over endless schema modifications.\n\nThis module translates JSON documents into \"typed\" form; which allows\ndocument containers to store both objects and primitives in the same\nproperty. This also enables the storage of values with no containing\nobject!\n\nHow it works\n~~~~~~~~~~~~\n\nTyped JSON uses ``$value`` and ``$object`` properties to markup the\noriginal JSON:\n\n-  All JSON objects are annotated with ``\"$object\":\".\"``, which makes\n   querying object existence (especially the empty object) easier.\n-  All primitive values are replaced with an object with a single\n   ``$value`` property: So ``\"value\"`` gets mapped to\n   ``{\"$value\": \"value\"}``.\n\nOf course, the typed JSON has a different form than the original, and\nqueries into the documents store must take this into account.\nFortunately, the use of typed JSON is intended to be hidden behind a\nquery abstraction layer.\n\nFunction ``typed_encode()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts a ``dict``, ``list``, or primitive value, and generates the\ntyped JSON that can be inserted into a document store.\n\nFunction ``json2typed()``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConverts an existing JSON unicode string and returns the typed JSON\nunicode string for the same.\n\n--------------\n\nalso see http://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html\n\nModule ``mo_json.encode``\n-------------------------\n\nFunction: ``mo_json.encode.json_encoder()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Update Mar2016** - *PyPy version 5.x appears to have improved C\nintegration to the point that the C library callbacks are no longer a\nsignificant overhead: This pure Python JSON encoder is no longer faster\nthan a compound C/Python solution.*\n\nFast JSON encoder used in ``convert.value2json()`` when running in Pypy.\nRun the\n`speedtest <https://github.com/klahnakoski/pyLibrary/blob/dev/tests/speedtest_json.py>`__\nto compare with default implementation and ujson",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-json",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-json",
    "package_url": "https://pypi.org/project/mo-json/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-json/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-json"
    },
    "release_url": "https://pypi.org/project/mo-json/2.1.17319/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More JSON Tools!",
    "version": "2.1.17319",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547947,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ded089152cc8533a929058d5dc8cf6df447196927876c29f34764c45c742b009",
        "md5": "7df03f58c90bc81d370aaf488a2fbc42",
        "sha256": "25429f348befe0969fd8e3622dbe31ff17639162ace502b59c4990f922b22382"
      },
      "downloads": -1,
      "filename": "mo-json-2.1.17319.tar.gz",
      "has_sig": false,
      "md5_digest": "7df03f58c90bc81d370aaf488a2fbc42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23100,
      "upload_time": "2017-11-15T19:22:33",
      "upload_time_iso_8601": "2017-11-15T19:22:33.021266Z",
      "url": "https://files.pythonhosted.org/packages/de/d0/89152cc8533a929058d5dc8cf6df447196927876c29f34764c45c742b009/mo-json-2.1.17319.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}