{
  "info": {
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "More JSON Tools!\n================\n\nThis set of modules solves three problems:\n\n-  We want to iterate over massive JSON easily (``mo_json.stream``)\n-  A bi-jection between strictly typed JSON, and dynamic typed JSON.\n-  Flexible JSON parser to handle comments, and other forms\n-  JSON encoding is slow (``mo_json.encode``)\n\nModule ``mo_json.stream``\n-------------------------\n\nA module supporting the implementation of queries over very large JSON\nstrings. The overall objective is to make a large JSON document appear\nlike a hierarchical database, where arrays of any depth, can be queried\nlike tables.\n\nLimitations\n~~~~~~~~~~~\n\nThis is not a generic streaming JSON parser. This module has two main\nrestrictions:\n\n1. **Objects are not streamed** - All objects will reside in memory.\n   Large objects, with a multitude of properties, may cause problems.\n   Property names should be known at query time. If you must serialize\n   large objects; instead of ``{<name>: <value>}`` format, try a list of\n   name/value pairs instead: ``[{\"name\": <name>, \"value\": <value>}]``\n   This format is easier to query, and gentler on the various document\n   stores that you may put this data into.\n2. **Array values must be the last object property** - If you query into\n   a nested array, all sibling properties found after that array must be\n   ignored (must not be in the ``expected_vars``). If not, then those\n   arrays will not benefit from streaming, and will reside in memory.\n\nFunction ``mo_json.stream.parse()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWill return an iterator over all objects found in the JSON stream.\n\n**Parameters:**\n\n-  **json** - a parameter-less function, when called returns some number\n   of bytes from the JSON stream. It can also be a string.\n-  **path** - a list of strings specifying the nested JSON paths. Use\n   ``\".\"`` if your JSON starts with ``[``, and is a list.\n-  **expected\\_vars** - a list of strings specifying the full property\n   names required (all other properties are ignored)\n\nExamples\n^^^^^^^^\n\n**Simple Iteration**\n\n::\n\n    json = {\"b\": \"done\", \"a\": [1, 2, 3]}\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\n\nWe will iterate through the array found on property ``a``, and return\nboth ``a`` and ``b`` variables. It will return the following values:\n\n::\n\n    {\"b\": \"done\", \"a\": 1}\n    {\"b\": \"done\", \"a\": 2}\n    {\"b\": \"done\", \"a\": 3}\n\n**Bad - Property follows array**\n\nThe same query, but different JSON with ``b`` following ``a``:\n\n::\n\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\n    parse(json, path=\"a\", required_vars=[\"a\", \"b\"]}\n\nSince property ``b`` follows the array we're iterating over, this will\nraise an error.\n\n**Good - No need for following properties**\n\nThe same JSON, but different query, which does not require ``b``:\n\n::\n\n    json = {\"a\": [1, 2, 3], \"b\": \"done\"}\n    parse(json, path=\"a\", required_vars=[\"a\"]}\n\nIf we do not require ``b``, then streaming will proceed just fine:\n\n::\n\n    {\"a\": 1}\n    {\"a\": 2}\n    {\"a\": 3}\n\n**Complex Objects**\n\nThis streamer was meant for very long lists of complex objects. Use\ndot-delimited naming to refer to full name of the property\n\n::\n\n    json = [{\"a\": {\"b\": 1, \"c\": 2}}, {\"a\": {\"b\": 3, \"c\": 4}}, ...\n    parse(json, path=\".\", required_vars=[\"a.c\"])\n\nThe dot (``.``) can be used to refer to the top-most array. Notice the\nstructure is maintained, but only includes the required variables.\n\n::\n\n    {\"a\": {\"c\": 2}}\n    {\"a\": {\"c\": 4}}\n    ...\n\n**Nested Arrays**\n\nNested array iteration is meant to mimic a left-join from parent to\nchild table; as such, it includes every record in the parent.\n\n::\n\n    json = [\n        {\"o\": 1: \"a\": [{\"b\": 1}: {\"b\": 2}: {\"b\": 3}: {\"b\": 4}]},\n        {\"o\": 2: \"a\": {\"b\": 5}},\n        {\"o\": 3}\n    ]\n    parse(json, path=[\".\", \"a\"], required_vars=[\"o\", \"a.b\"])\n\nThe ``path`` parameter can be a list, which is used to indicate which\nproperties are expected to have an array, and to iterate over them.\nPlease notice if no array is found, it is treated like a singleton\narray, and missing arrays still produce a result.\n\n::\n\n    {\"o\": 1, \"a\": {\"b\": 1}}\n    {\"o\": 1, \"a\": {\"b\": 2}}\n    {\"o\": 1, \"a\": {\"b\": 3}}\n    {\"o\": 1, \"a\": {\"b\": 4}}\n    {\"o\": 2, \"a\": {\"b\": 5}}\n    {\"o\": 3}\n\nModule ``typed_encoder``\n------------------------\n\nOne reason NoSQL documents stores are wonderful is the fact their schema\ncan automatically expand to accept new properties. Unfortunately, this\nflexibility is not limitless; A string assigned to property prevents an\nobject being assigned to the same, or visa-versa. This flexibility is\nunder attack by the strict-typing zealots, who, in their self righteous\ndelusion believe explicit types are better, actually make the lives of\nhumans worse; with endless schema modifications.\n\nThis module translates JSON documents into \"typed\" form; which allows\ndocument containers to store both objects and primitives in the same\nproperty value. This allows storage of values with no containing object!\n\nHow it works\n~~~~~~~~~~~~\n\nTyped JSON uses ``$value`` and ``$object`` properties to markup the\noriginal JSON:\n\n-  All JSON objects are annotated with ``\"$object\":\".\"``, which makes\n   querying object existence (especially the empty object) easier.\n-  All primitive values are replaced with an object with a single\n   ``$value`` property: So ``\"value\"`` gets mapped to\n   ``{\"$value\": \"value\"}``.\n\nOf course, the typed JSON has a different form than the original, and\nqueries into the documents store must take this into account.\nFortunately, the use of typed JSON is intended to be hidden behind a\nquery abstraction layer.\n\nFunction ``typed_encode()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAccepts a ``dict``, ``list``, or primitive value, and generates the\ntyped JSON that can be inserted into a document store.\n\nFunction ``json2typed()``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConverts an existing JSON unicode string and returns the typed JSON\nunicode string for the same.\n\n--------------\n\nalso see http://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html\n\nModule ``mo_json.encode``\n-------------------------\n\nFunction: ``mo_json.encode.json_encoder()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Update Mar2016** - *PyPy version 5.x appears to have improved C\nintegration to the point that the C library callbacks are no longer a\nsignificant overhead: This pure Python JSON encoder is no longer faster\nthan a compound C/Python solution.*\n\nFast JSON encoder used in ``convert.value2json()`` when running in Pypy.\nRun the\n`speedtest <https://github.com/klahnakoski/pyLibrary/blob/dev/tests/speedtest_json.py>`__\nto compare with default implementation and ujson",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klahnakoski/mo-json",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mo-json",
    "package_url": "https://pypi.org/project/mo-json/",
    "platform": "",
    "project_url": "https://pypi.org/project/mo-json/",
    "project_urls": {
      "Homepage": "https://github.com/klahnakoski/mo-json"
    },
    "release_url": "https://pypi.org/project/mo-json/1.0.17236/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "More JSON Tools!",
    "version": "1.0.17236",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17547947,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b7a67a74c8fd40cdd605070a8f3c89d1f2eacd4c22f14283c03bbc12038fb16",
        "md5": "60214023abb964abc23d8f08641f32ad",
        "sha256": "46af959ae877c60b45e56f45ebdefd127af1630fa9245a6e1fb2c47a06925980"
      },
      "downloads": -1,
      "filename": "mo-json-1.0.17236.zip",
      "has_sig": false,
      "md5_digest": "60214023abb964abc23d8f08641f32ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36194,
      "upload_time": "2017-08-24T16:58:07",
      "upload_time_iso_8601": "2017-08-24T16:58:07.949876Z",
      "url": "https://files.pythonhosted.org/packages/4b/7a/67a74c8fd40cdd605070a8f3c89d1f2eacd4c22f14283c03bbc12038fb16/mo-json-1.0.17236.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}