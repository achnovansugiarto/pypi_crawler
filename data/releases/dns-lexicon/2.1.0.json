{
  "info": {
    "author": "Jason Kulatunga",
    "author_email": "jason@thesparktree.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "[![Circle CI](https://circleci.com/gh/AnalogJ/lexicon.svg?style=shield)](https://circleci.com/gh/AnalogJ/lexicon)\n[![Coverage Status](https://coveralls.io/repos/github/AnalogJ/lexicon/badge.svg)](https://coveralls.io/github/AnalogJ/lexicon?branch=master)\n[![Docker Pulls](https://img.shields.io/docker/pulls/analogj/lexicon.svg)](https://hub.docker.com/r/analogj/lexicon)\n[![PyPI](https://img.shields.io/pypi/dm/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![PyPI](https://img.shields.io/pypi/v/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![PyPI](https://img.shields.io/pypi/pyversions/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![GitHub license](https://img.shields.io/github/license/AnalogJ/lexicon.svg)](https://github.com/AnalogJ/lexicon/blob/master/LICENSE)\n\n# lexicon\nManipulate DNS records on various DNS providers in a standardized/agnostic way.\n\n## Introduction\nLexicon provides a way to manipulate DNS records on multiple DNS providers in a standardized way.\nLexicon has a CLI but it can also be used as a python library.\n\nLexicon was designed to be used in automation, specifically letsencrypt.\n\n- [Generating Intranet & Private Network SSL Certificates using Lets Encrypt & Lexicon](http://blog.thesparktree.com/post/138999997429/generating-intranet-and-private-network-ssl)\n\n## Providers\nOnly DNS providers who have an API can be supported by `lexicon`.\n\nThe current supported providers are:\n\n- AWS Route53 ([docs](https://docs.aws.amazon.com/Route53/latest/APIReference/Welcome.html))\n- Cloudflare ([docs](https://api.cloudflare.com/#endpoints))\n- CloudXNS ([docs](https://www.cloudxns.net/Support/lists/cid/17.html))\n- DigitalOcean ([docs](https://developers.digitalocean.com/documentation/v2/#create-a-new-domain))\n- DNSimple ([docs](https://developer.dnsimple.com/))\n- DnsMadeEasy ([docs](http://www.dnsmadeeasy.com/pdf/API-Docv2.pdf))\n- DNSPark ([docs](https://dnspark.zendesk.com/entries/31210577-REST-API-DNS-Documentation))\n- DNSPod ([docs](https://support.dnspod.cn/Support/api))\n- EasyDNS ([docs](http://docs.sandbox.rest.easydns.net/))\n- Glesys ([docs](https://github.com/glesys/API/wiki/functions_domain))\n- Gandi ([docs](http://doc.rpc.gandi.net/))\n- LuaDNS ([docs](http://www.luadns.com/api.html))\n- Memset ([docs](https://www.memset.com/apidocs/methods_dns.html))\n- Namesilo ([docs](https://www.namesilo.com/api_reference.php))\n- NS1 ([docs](https://ns1.com/api/))\n- PointHQ ([docs](https://pointhq.com/api/docs))\n- Rage4 ([docs](https://gbshouse.uservoice.com/knowledgebase/articles/109834-rage4-dns-developers-api))\n- Transip ([docs](https://www.transip.nl/transip/api/))\n- Yandex ([docs](https://tech.yandex.com/domain/doc/reference/dns-add-docpage/))\n- Vultr ([docs](https://www.vultr.com/api/))\n\nPotential providers are as follows. If you would like to contribute one, please open a pull request.\n\n- AuroraDNS ([docs](https://www.pcextreme.com/aurora/dns))\n- AHNames ([docs](https://ahnames.com/en/resellers?tab=2))\n- ~~BuddyDNS ([docs](https://www.buddyns.com/support/api/v2/))~~\n- ~~ClouDNS ([docs](https://www.cloudns.net/wiki/article/56/))~~ <sub>Unable to test, requires paid account</sub>\n- ~~DurableDNS ([docs](https://durabledns.com/wiki/doku.php/ddns))~~ <sub>Can't set TXT records</sub>\n- ~~Dyn ([docs](https://help.dyn.com/dns-api-knowledge-base/))~~ <sub>Unable to test, requires paid account</sub>\n- ~~EntryDNS ([docs](https://entrydns.net/help))~~ <sub>Unable to test, requires paid account</sub>\n- Google Cloud DNS ([docs](https://cloud.google.com/dns/api/v1/))\n- GoDaddy DNS ([docs](https://developer.godaddy.com/getstarted#access))\n- ~~Host Virtual DNS ([docs](https://github.com/hostvirtual/hostvirtual-python-sdk/blob/master/hostvirtual.py))~~ <sub>Unable to test, requires paid account</sub>\n- ~~ironDNS ([docs](https://www.irondns.net/download/soapapiguide.pdf;jsessionid=02A1029AA9FB8BACD2048A60F54668C0))~~ <sub>Unable to test, requires paid account</sub>\n- ~~Linode ([docs](https://www.linode.com/api/dns))~~ <sub>Unable to test, requires paid account</sub>\n- ~~Liquidweb ([docs](https://www.liquidweb.com/storm/api/docs/v1/Network/DNS/Zone.html))~~ <sub>Unable to test, requires paid account</sub>\n- Mythic Beasts([docs](https://www.mythic-beasts.com/support/api/primary))\n- Namecheap ([docs](https://www.namecheap.com/support/api/methods.aspx))\n- ~~NFSN (NearlyFreeSpeech) ([docs](https://api.nearlyfreespeech.net/))~~ <sub>Unable to test, requires paid account</sub>\n- ~~OnApp DNS ([docs](https://docs.onapp.com/display/3api/DNS+Zones))~~ <sub>Unable to test, requires paid account</sub>\n- PowerDNS ([docs](https://doc.powerdns.com/md/httpapi/api_spec/))\n- Rackspace ([docs](https://developer.rackspace.com/docs/cloud-dns/v1/developer-guide/))\n- RFC2136 ([docs](https://en.wikipedia.org/wiki/Dynamic_DNS))\n- SoftLayer ([docs](https://sldn.softlayer.com/article/REST#HTTP_Request_Types))\n- ~~UltraDNS ([docs](https://restapi.ultradns.com/v1/docs))~~ <sub>Unable to test, requires paid account</sub>\n- ~~WorldWideDns ([docs](https://www.worldwidedns.net/dns_api_protocol.asp))~~ <sub>Unable to test, requires paid account</sub>\n- ~~Zerigo ([docs](https://www.zerigo.com/managed-dns/rest-api))~~ <sub>Unable to test, requires paid account</sub>\n- ~~Zonomi ([docs](http://zonomi.com/app/dns/dyndns.jsp))~~ <sub>Unable to test, requires paid account</sub>\n\n## Setup\nTo use lexicon as a CLI application, do the following:\n\n    pip install dns-lexicon\n\nSome providers (like Route53 and TransIP) require additional dependencies. You can install provider specific dependencies seperately:\n\n    pip install dns-lexicon[route53]\n\nYou can also install the latest version from the repository directly.\n\n    pip install git+https://github.com/AnalogJ/lexicon.git\n\nand with Route 53 provider dependencies:\n\n    pip install git+https://github.com/AnalogJ/lexicon.git#egg=dns-lexicon[route53]\n\n## Usage\n\n    $ lexicon -h\n      usage: lexicon [-h] [--version] [--delegated DELEGATED]\n                     {cloudflare,cloudxns,digitalocean,dnsimple,dnsmadeeasy,dnspark,dnspod,easydns,luadns,namesilo,nsone,pointhq,rage4,route53,vultr,yandex,zonomi}\n                     ...\n\n      Create, Update, Delete, List DNS entries\n\n      positional arguments:\n        {cloudflare,cloudxns,digitalocean,dnsimple,dnsmadeeasy,dnspark,dnspod,easydns,luadns,namesilo,nsone,pointhq,rage4,route53,vultr,yandex,zonomi}\n                              specify the DNS provider to use\n          cloudflare          cloudflare provider\n          cloudxns            cloudxns provider\n          digitalocean        digitalocean provider\n        ...\n          rage4               rage4 provider\n          route53             route53 provider\n          vultr               vultr provider\n          yandex              yandex provider\n          zonomi              zonomi provider\n\n      optional arguments:\n        -h, --help            show this help message and exit\n        --version             show the current version of lexicon\n        --delegated DELEGATED\n                              specify the delegated domain\n\n\n      $ lexicon cloudflare -h\n      usage: lexicon cloudflare [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                                [--priority PRIORITY] [--identifier IDENTIFIER]\n                                [--auth-username AUTH_USERNAME]\n                                [--auth-token AUTH_TOKEN]\n                                {create,list,update,delete} domain\n                                {A,AAAA,CNAME,MX,NS,SPF,SOA,TXT,SRV,LOC}\n\n      positional arguments:\n        {create,list,update,delete}\n                              specify the action to take\n        domain                specify the domain, supports subdomains as well\n        {A,AAAA,CNAME,MX,NS,SPF,SOA,TXT,SRV,LOC}\n                              specify the entry type\n\n      optional arguments:\n        -h, --help            show this help message and exit\n        --name NAME           specify the record name\n        --content CONTENT     specify the record content\n        --ttl TTL             specify the record time-to-live\n        --priority PRIORITY   specify the record priority\n        --identifier IDENTIFIER\n                              specify the record for update or delete actions\n        --auth-username AUTH_USERNAME\n                              specify email address used to authenticate\n        --auth-token AUTH_TOKEN\n                              specify token used authenticate\n\nUsing the lexicon CLI is pretty simple:\n\n    # setup provider environmental variables:\n    LEXICON_CLOUDFLARE_USERNAME=\"myusername@example.com\"\n    LEXICON_CLOUDFLARE_TOKEN=\"cloudflare-api-token\"\n\n    # list all TXT records on cloudflare\n    lexicon cloudflare list example.com TXT\n\n    # create a new TXT record on cloudflare\n    lexicon cloudflare create www.example.com TXT --name=\"_acme-challenge.www.example.com.\" --content=\"challenge token\"\n\n    # delete a  TXT record on cloudflare\n    lexicon cloudflare delete www.example.com TXT --name=\"_acme-challenge.www.example.com.\" --content=\"challenge token\"\n    lexicon cloudflare delete www.example.com TXT --identifier=\"cloudflare record id\"\n\n## Authentication\nMost supported DNS services provide an API token, however each service implements authentication differently.\nLexicon attempts to standardize authentication around the following CLI flags:\n\n- `--auth-username` - For DNS services that require it, this is usually the account id or email address\n- `--auth-password` - For DNS services that do not provide an API token, this is usually the account password\n- `--auth-token` - This is the most common auth method, the API token provided by the DNS service\n\nYou can see all the `--auth-*` flags for a specific service by reading the DNS service specific help: `lexicon cloudflare -h`\n\n### Environmental Variables\nInstead of providing Authentication information via the CLI, you can also specify them via Environmental Variables.\nEvery DNS service and auth flag maps to an Environmental Variable as follows: `LEXICON_{DNS Provider Name}_{Auth Type}`\n\nSo instead of specifying `--auth-username` and `--auth-token` flags when calling `lexicon cloudflare ...`,\nyou could instead set the `LEXICON_CLOUDFLARE_USERNAME` and `LEXICON_CLOUDFLARE_TOKEN` environmental variables.\n\n### Letsencrypt Instructions\nLexicon has an example [dehydrated hook file](examples/dehydrated.default.sh) that you can use for any supported provider.\nAll you need to do is set the PROVIDER env variable.\n\n    PROVIDER=cloudflare dehydrated --cron --hook dehydrated.default.sh --challenge dns-01\n\n\n## TroubleShooting & Useful Tools\nThere is an included example Dockerfile that can be used to automatically generate certificates for your website.\n\n## ToDo list\n\n- [x] Create and Register a lexicon pip package.\n- [ ] Write documentation on supported environmental variables.\n- [x] Wire up automated release packaging on PRs.\n- [x] Check for additional dns hosts with apis (from [fog](http://fog.io/about/provider_documentation.html), [dnsperf](http://www.dnsperf.com/), [libcloud](https://libcloud.readthedocs.io/en/latest/dns/supported_providers.html))\n- [ ] Get a list of Letsencrypt clients, and create hook files for them ([letsencrypt clients](https://github.com/letsencrypt/letsencrypt/wiki/Links))\n\n## Contributing Changes.\nIf the DNS provider you use is not already available, please consider contributing by opening a pull request.\n\n## License\nMIT\n\n## References\n\n    tox",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AnalogJ/lexicon",
    "keywords": "dns lexicon dns-lexicon dehydrated letsencrypt glesys dnspod nsone pointhq dnsimple route53 memset transip dnsmadeeasy namesilo dnspark digitalocean rage4 cloudxns vultr cloudflare easydns luadns yandex",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dns-lexicon",
    "package_url": "https://pypi.org/project/dns-lexicon/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dns-lexicon/",
    "project_urls": {
      "Homepage": "https://github.com/AnalogJ/lexicon"
    },
    "release_url": "https://pypi.org/project/dns-lexicon/2.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manipulate DNS records on various DNS providers in a standardized/agnostic way",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15535504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bcd824779254e116a835d33301acf67c0ebceafbf5658d14fa9e2330cb937b0a",
        "md5": "f5363083cc84797120d3d7f477d39869",
        "sha256": "d130bd31a93e2911c86bf0279799a2f1efb6db4ed920bda185d6139984d3df03"
      },
      "downloads": -1,
      "filename": "dns-lexicon-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f5363083cc84797120d3d7f477d39869",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27135,
      "upload_time": "2017-04-22T01:58:15",
      "upload_time_iso_8601": "2017-04-22T01:58:15.757412Z",
      "url": "https://files.pythonhosted.org/packages/bc/d8/24779254e116a835d33301acf67c0ebceafbf5658d14fa9e2330cb937b0a/dns-lexicon-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}