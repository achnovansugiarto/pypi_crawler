{
  "info": {
    "author": "Jason Kulatunga",
    "author_email": "jason@thesparktree.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "[![Circle CI](https://circleci.com/gh/AnalogJ/lexicon.svg?style=shield)](https://circleci.com/gh/AnalogJ/lexicon)\n[![Coverage Status](https://coveralls.io/repos/github/AnalogJ/lexicon/badge.svg)](https://coveralls.io/github/AnalogJ/lexicon?branch=master)\n[![PyPI](https://img.shields.io/pypi/dm/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![PyPI](https://img.shields.io/pypi/v/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![PyPI](https://img.shields.io/pypi/pyversions/dns-lexicon.svg)](https://pypi.python.org/pypi/dns-lexicon)\n[![GitHub license](https://img.shields.io/github/license/AnalogJ/lexicon.svg)](https://github.com/AnalogJ/lexicon/blob/master/LICENSE)\n[![Gratipay User](https://img.shields.io/gratipay/user/analogj.svg)](https://gratipay.com/~AnalogJ/)\n\n# lexicon\nManipulate DNS records on various DNS providers in a standardized/agnostic way. \n\n## Introduction\nLexicon provides a way to manipulate DNS records on multiple DNS providers in a standardized way. \nLexicon has a CLI but it can also be used as a python library. \n\nLexicon was designed to be used in automation, specifically letsencrypt.\n\n## Providers\nOnly DNS providers who have an API can be supported by `lexicon`. \n\nThe current supported providers are:\n\n- Cloudflare ([docs](https://api.cloudflare.com/#endpoints))\n- DigitalOcean ([docs](https://developers.digitalocean.com/documentation/v2/#create-a-new-domain))\n- DNSimple ([docs](https://developer.dnsimple.com/))\n- DnsMadeEasy ([docs](http://www.dnsmadeeasy.com/integration/pdf/API-Docv2.pdf))\n- DNSPark ([docs](https://dnspark.zendesk.com/entries/31210577-REST-API-DNS-Documentation))\n- EasyDNS ([docs](http://docs.sandbox.rest.easydns.net/))\n- Namesilo ([docs](https://www.namesilo.com/api_reference.php))\n- NS1 ([docs](https://ns1.com/api/))\n- PointHQ ([docs](https://pointhq.com/api/docs))\n- Rage4 ([docs](https://gbshouse.uservoice.com/knowledgebase/articles/109834-rage4-dns-developers-api))\n- Vultr ([docs](https://www.vultr.com/api/))\n\nPotential providers are as follows. If you would like to contribute one, please open a pull request.\n\n- AHNames ([docs](https://ahnames.com/en/resellers?tab=2))\n- AWS Route53 ([docs](https://docs.aws.amazon.com/Route53/latest/APIReference/Welcome.html))\n- BuddyDNS ([docs](https://www.buddyns.com/support/api/v2/))\n- ClouDNS ([docs](https://www.cloudns.net/wiki/article/56/))\n- Dyn ([docs](https://help.dyn.com/dns-api-knowledge-base/))\n- EntryDNS ([docs](https://entrydns.net/help))\n- Gandi ([docs](http://doc.rpc.gandi.net/))\n- Google Cloud DNS ([docs](https://cloud.google.com/dns/api/v1/))\n- ironDNS ([docs](https://www.irondns.net/download/soapapiguide.pdf;jsessionid=02A1029AA9FB8BACD2048A60F54668C0))\n- Linode ([docs](https://www.linode.com/api/dns))\n- Mythic Beasts([docs](https://www.mythic-beasts.com/support/api/primary))\n- Namecheap ([docs](https://www.namecheap.com/support/api/methods.aspx))\n- OnApp DNS ([docs](https://docs.onapp.com/display/3api/DNS+Zones))\n- PowerDNS ([docs](https://doc.powerdns.com/md/httpapi/api_spec/))\n- Rackspace ([docs](https://developer.rackspace.com/docs/cloud-dns/v1/developer-guide/))\n- RFC2136 ([docs](https://en.wikipedia.org/wiki/Dynamic_DNS))\n- Transip ([docs](https://www.transip.nl/transip/api/))\n- UltraDNS ([docs](https://restapi.ultradns.com/v1/docs))\n- Yandex ([docs](https://tech.yandex.com/domain/doc/reference/dns-add-docpage/))\n- Zerigo ([docs](https://www.zerigo.com/managed-dns/rest-api))\n- Zonomi ([docs](http://zonomi.com/app/dns/dyndns.jsp))\n\n## Setup\nTo use lexicon as a CLI application, do the following:\n\t\n\tpip install dns-lexicon\n\nYou can also install the latest version from the repository directly. \n \n\tpip install git+https://github.com/AnalogJ/lexicon.git\n\t\t\t\n## Usage\n\n\t$ lexicon -h\n\tusage: cli.py [-h] [--name=NAME] [--content=CONTENT] [--ttl=TTL]\n\t\t\t\t  [--priority=PRIORITY] [--identifier=IDENTIFIER]\n\t\t\t\t  [--auth-username=AUTH_USERNAME] [--auth-password=AUTH_PASSWORD]\n\t\t\t\t  [--auth-token=AUTH_TOKEN] [--auth-otp-token=AUTH_OTP_TOKEN]\n\t\t\t\t  {nsone,pointhq,easydns,dnspark,dnsmadeeasy,namesilo,rage4,vultr,cloudflare,dnsimple}\n\t\t\t\t  {create,list,update,delete} domain\n\t\t\t\t  {A,AAAA,CNAME,MX,NS,SPF,SOA,TXT,SRV,LOC}\n\n\t\n\tCreate, Update, Delete, List DNS entries\n\t\n\tpositional arguments:\n      {nsone,pointhq,easydns,digitalocean,dnspark,dnsmadeeasy,namesilo,rage4,vultr,cloudflare,dnsimple}\n\t\t\t\t\t\t\tspecify the DNS provider to use\n\t  {create,list,update,delete}\n\t\t\t\t\t\t\tspecify the action to take\n\t  domain                specify the domain, supports subdomains as well\n\t  {A,CNAME,MX,SOA,TXT}  specify the entry type\n\t\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  --name=NAME           specify the record name\n\t  --content=CONTENT     specify the record content\n\t  --ttl=TTL             specify the record time-to-live\n\t  --priority=PRIORITY   specify the record priority\n\t  --identifier=IDENTIFIER\n\t\t\t\t\t\t\tspecify the record for update or delete actions\n\t  --auth-username=AUTH_USERNAME\n\t\t\t\t\t\t\tspecify username used to authenticate to DNS provider\n\t  --auth-password=AUTH_PASSWORD\n\t\t\t\t\t\t\tspecify password used to authenticate to DNS provider\n\t  --auth-token=AUTH_TOKEN\n\t\t\t\t\t\t\tspecify token used authenticate to DNS provider\n\t  --auth-otp-token=AUTH_OTP_TOKEN\n\t\t\t\t\t\t\tspecify OTP/2FA token used authenticate to DNS\n\t\t\t\t\t\t\tprovider\n\nUsing the lexicon CLI is pretty simple:\n\n\t# setup provider environmental variables:\n\tLEXICON_CLOUDFLARE_USERNAME=\"myusername@example.com\"\n\tLEXICON_CLOUDFLARE_TOKEN=\"cloudflare-api-token\"\n\t\n\t# list all TXT records on cloudflare\n\tlexicon cloudflare list example.com TXT\n\t\n\t# create a new TXT record on cloudflare\n\tlexicon cloudflare create www.example.com TXT --name=\"_acme-challenge.www.example.com.\" --content=\"challenge token\"\n\n\t# delete a  TXT record on cloudflare\n\tlexicon cloudflare delete www.example.com TXT --name=\"_acme-challenge.www.example.com.\" --content=\"challenge token\"\n\tlexicon cloudflare delete www.example.com TXT --identifier=\"cloudflare record id\"\n\n\t\n\n### Letsencrypt Instructions\nLexicon has an example [letsencrypt.sh hook file](examples/letsencrypt.default.sh) that you can use for any supported provider. \nAll you need to do is set the PROVIDER env variable. \n\n\tPROVIDER=cloudflare letsencrypt.sh --cron --hook letsencrypt.default.sh --challenge dns-01\n\t\n\n## TroubleShooting & Useful Tools\nThere is an included example Dockerfile that can be used to automatically generate certificates for your website.\n\n## ToDo list\n\n- [x] Create and Register a lexicon pip package. \n- [ ] Write documentation on supported environmental variables. \n- [ ] Wire up automated release packaging on PRs.\n- [x] Check for additional dns hosts with apis (from [fog](http://fog.io/about/provider_documentation.html), [dnsperf](http://www.dnsperf.com/))\n- [ ] Get a list of Letsencrypt clients, and create hook files for them ([letsencrypt clients](https://github.com/letsencrypt/letsencrypt/wiki/Links))\n\n## Contributing Changes.\nIf the DNS provider you use is not already available, please consider contributing by opening a pull request. \n\n## License\nMIT\n\n## References\n\n    tox",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AnalogJ/lexicon",
    "keywords": "dns lexicon dns-lexicon letsencrypt nsone pointhq easydns dnspark dnsmadeeasy namesilo digitalocean rage4 vultr cloudflare dnsimple",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dns-lexicon",
    "package_url": "https://pypi.org/project/dns-lexicon/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dns-lexicon/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/AnalogJ/lexicon"
    },
    "release_url": "https://pypi.org/project/dns-lexicon/1.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Manipulate DNS records on various DNS providers in a standardized/agnostic way",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15535504,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0acca299cb3e757c0aeb1d43f6fe9bb79d9f095d2220f25692fbb2797b01fcb",
        "md5": "44337963ffba6e4532ab954c239dbabf",
        "sha256": "95668a2fec489df31a1e8c80aa3c1b4dc30be520eb848835088db49bacbf8035"
      },
      "downloads": -1,
      "filename": "dns-lexicon-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "44337963ffba6e4532ab954c239dbabf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14252,
      "upload_time": "2016-04-15T03:49:47",
      "upload_time_iso_8601": "2016-04-15T03:49:47.494732Z",
      "url": "https://files.pythonhosted.org/packages/c0/ac/ca299cb3e757c0aeb1d43f6fe9bb79d9f095d2220f25692fbb2797b01fcb/dns-lexicon-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}