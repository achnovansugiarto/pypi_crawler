{
  "info": {
    "author": "Ben Lopatin",
    "author_email": "ben@benlopatin.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "====================\ndjango-organizations\n====================\n\n.. start-table\n\n.. list-table::\n    :stub-columns: 1\n\n    * - Summary\n      - Groups and multi-user account management\n    * - Author\n      - Ben Lopatin (http://benlopatin.com)\n    * - Status\n      - |docs| |travis| |version| |wheel| |supported-versions| |supported-implementations|\n\n.. |docs| image:: https://readthedocs.org/projects/django-organizations/badge/?style=flat\n    :target: https://readthedocs.org/projects/django-organizations\n    :alt: Documentation Status\n\n.. |travis| image:: https://travis-ci.org/bennylope/django-organizations.svg?branch=master\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/bennylope/django-organizations\n\n.. |version| image:: https://img.shields.io/pypi/v/django-organizations.svg?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/django-organizations\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/django-organizations.svg?style=flat\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/django-organizations\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/django-organizations.svg?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/django-organizations\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/django-organizations.svg?style=flat\n    :alt: Supported implementations\n    :target: https://pypi.python.org/pypi/django-organizations\n\n\n.. end-table\n\n\nSeparate individual user identity from accounts and subscriptions. Django\nOrganizations adds user-managed, multi-user groups to your Django project. Use\nDjango Organizations whether your site needs organizations that function like\nsocial groups or multi-user account objects to provide account and subscription\nfunctionality beyond the individual user.\n\n* Works with your existing user model, whether\n  `django.contrib.auth` or a custom model. No additional user\n  or authentication functionality required.\n* Users can be belong to and own more than one organization (account, group)\n* Invitation and registration functionality works out of the box for many\n  situations and can be extended as need to fit specific requirements.\n* Start with the base models or use your own for greater customization.\n\nDocumentation is on `Read the Docs\n<http://django-organizations.readthedocs.org/en/latest/index.html>`_\n\n\nDevelopment & Contributing\n==========================\n\n**The master branch represents version 2 development. For updates related to 1.x\nversions of django-organizations pull requests should be made against the\n[`version-1.x` branch](tree/version-1.x).**\n\nDevelopment is on-going. To-do items have been moved to the wiki for the time\nbeing.\n\nThe basic functionality should not need much extending. Current dev priorities\nfor me and contributors should include:\n\n* Improving the tests and test coverage (ideally moving them back out of the\n  main module and executable using the setup.py file)\n* Improving the backends and backends concept so that additional invitation and\n  registration backends can be used\n* Documentation\n* Ensuring all application text is translatable\n\nPlease use the project's issues tracker to report bugs, doc updates, or other\nrequests/suggestions.\n\nTargets & testing\n-----------------\n\nThe codebase is targeted and tested against:\n\n* Django 2.2.x against Python 3.5, 3.6, 3.7, 3.8\n* Django 3.0.x against Python 3.6, 3.7, 3.8\n* Django 3.1.x against Python 3.6, 3.7, 3.8\n\nTo run the tests against all target environments, install `tox\n<https://testrun.org/tox/latest/>`_ and then execute the command::\n\n    tox\n\nFast testing\n------------\n\nTesting each change on all the environments takes some time, you may\nwant to test faster and avoid slowing down development by using pytest\nagainst your current environment::\n\n    pip install -r requirements-test.txt\n    py.test\n\nSupply the ``-x`` option for **failfast** mode::\n\n    py.test -x\n\nSubmitting\n----------\n\nThese submission guidelines will make it more likely your submissions will be\nreviewed and make it into the project:\n\n* Ensure they match the project goals and are sufficiently generalized\n* Please try to follow `Django coding style\n  <https://docs.djangoproject.com/en/stable/internals/contributing/writing-code/coding-style/>`_.\n  The code base style isn't all up to par, but I'd like it to move in that\n  direction\n* Also please try to include `good commit log messages\n  <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_.\n* Pull requests should include an amount of code and commits that are\n  reasonable to review, are **logically grouped**, and based off clean feature\n  branches.\n\nCode contributions are expected to pass in all target environments, and\npull requests should be made from branches with passing builds on `Travis\nCI <https://travis-ci.org/bennylope/django-organizations>`_.\n\nProject goals\n-------------\n\ndjango-organizations should be backend agnostic:\n\n1. Authentication agnostic\n2. Registration agnostic\n3. Invitation agnostic\n4. User messaging agnostic\n\nEtc.\n\nInstalling\n==========\n\nFirst add the application to your Python path. The easiest way is to use\n`pip`::\n\n    pip install django-organizations\n\nCheck the `Release History tab <https://pypi.org/project/django-organizations/#history>`_ on\nthe PyPI package page for pre-release versions. These can be downloaded by specifying the version.\n\nYou can also install by downloading the source and running::\n\n    $ python setup.py install\n\nBy default you will need to install `django-extensions` or comparable libraries\nif you plan on adding Django Organizations as an installed app to your Django\nproject. See below on configuring.\n\nConfiguring\n-----------\n\nMake sure you have `django.contrib.auth` installed, and add the `organizations`\napplication to your `INSTALLED_APPS` list:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django.contrib.auth',\n        'organizations',\n    )\n\nThen ensure that your project URL conf is updated. You should hook in the\nmain application URL conf as well as your chosen invitation backend URLs:\n\n.. code-block:: python\n\n    from organizations.backends import invitation_backend\n\n    urlpatterns = [\n        ...\n        url(r'^accounts/', include('organizations.urls')),\n        url(r'^invitations/', include(invitation_backend().get_urls())),\n    ]\n\nAuto slug field\n~~~~~~~~~~~~~~~\n\nThe standard way of using Django Organizations is to use it as an installed app\nin your Django project. Django Organizations will need to use an auto slug\nfield which are not included. By default it will try to import these from\ndjango-extensions, but you can configure your own in settings. The default:\n\n.. code-block:: python\n\n    ORGS_SLUGFIELD = 'django_extensions.db.fields.AutoSlugField'\n\nAlternative:\n\n.. code-block:: python\n\n    ORGS_SLUGFIELD = 'autoslug.fields.AutoSlugField'\n\nPrevious versions allowed you to specify an `ORGS_TIMESTAMPED_MODEL` path. This\nis now ignored and the functionality satisifed by a vendored solution. A\nwarning will be given but this *should not* have any effect on your code.\n\n- `django-extensions <http://django-extensions.readthedocs.org/en/latest/>`_\n- `Django AutoSlug <https://github.com/justinmayer/django-autoslug/>`_\n- `django-slugger <https://gitlab.com/dspechnikov/django-slugger/>`_\n\nRegistration & invitation backends\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can specify a different invitation backend in your project settings, and\nthe `invitation_backend` function will provide the URLs defined by that\nbackend:\n\n.. code-block:: python\n\n    INVITATION_BACKEND = 'myapp.backends.MyInvitationBackend'\n\n\nUsage Overview\n==============\n\nFor most use cases it should be sufficient to include the app views directly\nusing the default URL conf file. You can customize their functionality or\naccess controls by extending the base views.\n\nThere are three models:\n\n* **Organization** The group object. This is what you would associate your own\n  app's functionality with, e.g. subscriptions, repositories, projects, etc.\n* **OrganizationUser** A custom `through` model for the ManyToMany relationship\n  between the `Organization` model and the `User` model. It stores additional\n  information about the user specific to the organization and provides a\n  convenient link for organization ownership.\n* **OrganizationOwner** The user with rights over the life and death of the\n  organization. This is a one to one relationship with the `OrganizationUser`\n  model. This allows `User` objects to own multiple organizations and makes it\n  easy to enforce ownership from within the organization's membership.\n\nThe underlying organizations API is simple:\n\n.. code-block:: python\n\n    >>> from organizations.utils import create_organization\n    >>> chris = User.objects.get(username=\"chris\")\n    >>> soundgarden = create_organization(chris, \"Soundgarden\", org_user_defaults={'is_admin': True})\n    >>> soundgarden.is_member(chris)\n    True\n    >>> soundgarden.is_admin(chris)\n    True\n    >>> soundgarden.owner.organization_user\n    <OrganizationUser: Chris Cornell>\n    >>> soundgarden.owner.organization_user.user\n    >>> <User: chris>\n    >>> audioslave = create_organization(chris, \"Audioslave\")\n    >>> tom = User.objects.get(username=\"tom\")\n    >>> audioslave.add_user(tom, is_admin=True)\n    <OrganizationUser: Tom Morello>\n\nCustom models\n-------------\n\nDjango-organizations can act as a base library (not installed in your project)\nand used to create unique organization model sets using custom tables. See the\n`Cooking with Django Organizations\n<http://django-organizations.readthedocs.org/en/latest/cookbook.html#advanced-customization>`_\nsection in the documentation for advice on proceeding.\n\nLicense\n=======\n\nAnyone is free to use or modify this software under the terms of the BSD\nlicense.\n\nSponsors\n========\n\n`Muster <https://www.muster.com/home?utm_source=github&campaign=opensource>`_ is building precision advocacy software to impact policy through grassroots action.\n\n.. image:: https://www.muster.com/hs-fs/hubfs/muster_logo-2.png?width=600&name=muster_logo-2.png\n  :target: https://www.muster.com/home?utm_source=github&campaign=opensource\n  :width: 400\n  :alt: Alternative text\n\n\n.. :changelog:\n\nHistory\n=======\n\n2.0.1\n----------\n\n* Better compatibility with Django 3.2\n\n2.0.0\n-----\n\n* Invitation model backend uses models to track invitations\n* Registration/inviation backends take an optional namespace argument on initialization. The use\n  case is if you want to namespace the URLs\n* Can provide a dotted path to `invitation_backend` and `registration_backend` functions\n* Drops support for Python 2 and Django versions < 2.2 LTS\n* Migrate the codebase to an src/ layout\n* Now with more test coverage!\n\n\n1.1.1\n-----\n\n* Fixes issue with default backend where users defined without first/last names\n  might not be represented\n\n1.1.0\n-----\n\n* Migrations and slug related fixup\n\nThis is a small but significant change. A change introduced in version 1.0.0 due to\nincompatability with an unmaintained default dependency yielded migration issues for\nmany users. This release switches *back* to a *fork* of the original dependency\nto revert the default changes.\n\n1.0.0\n-----\n\n* Django 2 compatibility.\n\nAt this point it seems reasonable to bump to version 1.\n\n0.9.3\n-----\n\n* Create username value for user if username field exists (custom user models)\n* Replaced BaseBackend._send_email with BaseBackend.email_message. email_message() should return\n  the message without actually doing the send.\n\n0.9.2\n-----\n\n* Decouple concrete organizations.Organization model from the invitation/registration backends\n\n0.9.1\n-----\n\n* Fixes missing migration. Migration was created due to non-schema changes in models\n\n0.9.0\n-----\n\n* Add notification to users when added to an organization\n* New abstract models create separation between 'plain' base models and abstract\n  models that include abstracted functionality previously included only in\n  concrete models\n* Python 3.6 and Django 1.11 test support\n\n0.8.2\n-----\n\n* Updates setup classifiers information\n\n0.8.1\n-----\n\n* Fixes [lack of] validation bug in backend registration form\n\n0.8.0\n-----\n\n* Adds Django 1.10 support\n\n0.7.0\n-----\n\nFixes some issues which may require some users to clear out extraneous\nmigrations produced by using configurable base classes.\n\n* Fixes condition where `create_organization` produces an owner who is not an\n  admin user.\n* Fixes issue in slug field import resulting in spurious migrations.\n* Immediately deprecates configurable TimeStampedModel import. This caused\n  serious problems with Django's migration library which were not easily\n  resolved for a feature that added little value.\n\n0.6.1\n-----\n\n* Fixes email parsing from settings\n\n0.6.0\n-----\n\n* Adds Django 1.9 support\n* Drops support for Django 1.7\n* Fixes migration issue related to incomplete support for configurable model\n  fields and base model. If you are upgrading (especially from a fork of the\n  development version of django-organization) you may have an extra migration,\n  0002_auto_20151005_1823, which has been removed.\n\n0.5.3\n-----\n\n* Fixes migrations problem in build\n\n0.5.2\n-----\n\n* Fixes packaging bug\n\n0.5.1\n-----\n\n* Cleaned up installation instructions\n\n0.5.0\n-----\n\n* Drops testing support for Django 1.5 and Django 1.6\n* Adds native Django database migrations\n* Adds tested support for Django 1.7 and Django 1.8\n\n0.4.3\n-----\n\n* Adds app specific signals\n\n0.4.2\n-----\n\n* Various related name fixes in models, registration backends\n\n0.4.1\n-----\n\n* Support for older Django versions with outdated versions of `six`\n\n0.4.0\n-----\n\n* Allows for configurable TimeStampModel (base mixin for default Organization\n  model) and AutoSlugField (field on default Organization model).\n\n0.3.0\n-----\n\n* Initial Django 1.7 compatability release\n\n0.2.3\n-----\n\n* Fix issue validating organziation ownership for custom organization models\n  inheriting directly from the `Organization` class.\n\n0.2.2\n-----\n\n* Packaging fix\n\n0.2.1\n-----\n\n* Packaging fix\n\n0.2.0\n-----\n\n* Abstract base models. These allow for custom organization models\n  without relying on mulit-table inheritence, as well as custom\n  organization user models, all on an app-by-app basis.\n\n0.1.10\n------\n\n* Packaging fix\n\n0.1.9\n-----\n\n* Restructures tests to remove from installed module, should reduce installed\n  package size\n\n0.1.8\n-----\n\n* Fixes *another* bug in email invitations\n\n0.1.7\n-----\n\n* Fixes bug in email invitation\n\n0.1.6\n-----\n\n* Extends organizaton name length\n* Increase email field max length\n* Adds `get_or_add_user` method to Organization\n* Email character escaping\n\n0.1.5\n-----\n\n* Use raw ID fields in admin\n* Fixes template variable names\n* Allow superusers access to all organization views\n* Activate related organizations when activating an owner user\n\n0.1.4a\n------\n\n* Bug fix for user model import\n\n0.1.4\n-----\n\n* Bugfixes for deleting organization users\n* Removes additional `auth.User` references in app code\n\n0.1.3b\n------\n\n* Changes SlugField to an AutoSlugField from django-extensions\n* Base models on TimeStampedModel from django-extensions\n* ForeignKey to user model based on configurable user selection\n\n0.1.3\n-----\n\n* Manage organization models with South\n* Added configurable context variable names to view mixins\n* Added a base backend class which the Invitation and Registration backends extend\n* Lengthed Organization name and slug fields\n* Makes mixin model classes configurable\n* Improved admin display\n* Removes initial passwords\n\n0.1.2\n-----\n\n* Added registration backend\n* Various bug fixes\n\n0.1.1\n-----\n\n* Add RequestContext to default invitation registration view\n* Fix invitations\n\n0.1.0\n-----\n\n* Initial alpha application\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bennylope/django-organizations/",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-organizations",
    "package_url": "https://pypi.org/project/django-organizations/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-organizations/",
    "project_urls": {
      "Homepage": "https://github.com/bennylope/django-organizations/"
    },
    "release_url": "https://pypi.org/project/django-organizations/2.0.1/",
    "requires_dist": [
      "six",
      "Django (>=2.2.0)",
      "typing ; python_version < \"3.6\""
    ],
    "requires_python": "",
    "summary": "Group accounts for Django",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15529139,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0d39e26d044db3f00d4c7fb2d40141403545673bc0a0a3828f4bb6d5c9bfdef",
        "md5": "b236b7085246493034ce810a7ddf96e9",
        "sha256": "cbf0348728efb68b42a0849ce30f62cd9b5c48e66fce8173aaf061035ce54978"
      },
      "downloads": -1,
      "filename": "django_organizations-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b236b7085246493034ce810a7ddf96e9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 46576,
      "upload_time": "2021-09-22T16:16:24",
      "upload_time_iso_8601": "2021-09-22T16:16:24.098654Z",
      "url": "https://files.pythonhosted.org/packages/b0/d3/9e26d044db3f00d4c7fb2d40141403545673bc0a0a3828f4bb6d5c9bfdef/django_organizations-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a026a7f30a0f1946e57148904983fcf0356f51f743310aa0f9999c8eabd9c4f9",
        "md5": "2af159b04893a700c7f89cd79a01cb54",
        "sha256": "2f1d9febaa6c9d169a0d48b0228245d2fae16df3a124219008712c62895cc328"
      },
      "downloads": -1,
      "filename": "django-organizations-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2af159b04893a700c7f89cd79a01cb54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35025,
      "upload_time": "2021-09-22T16:16:26",
      "upload_time_iso_8601": "2021-09-22T16:16:26.019593Z",
      "url": "https://files.pythonhosted.org/packages/a0/26/a7f30a0f1946e57148904983fcf0356f51f743310aa0f9999c8eabd9c4f9/django-organizations-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}