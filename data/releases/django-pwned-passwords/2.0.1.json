{
  "info": {
    "author": "Jamie Counsell",
    "author_email": "jamiecounsell@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "======================\nDjango PWNED Passwords\n======================\n\n.. image:: https://badge.fury.io/py/django-pwned-passwords.svg\n    :target: https://badge.fury.io/py/django-pwned-passwords\n\n.. image:: https://travis-ci.org/jamiecounsell/django-pwned-passwords.svg?branch=master\n    :target: https://travis-ci.org/jamiecounsell/django-pwned-passwords\n\n.. image:: https://codecov.io/gh/jamiecounsell/django-pwned-passwords/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jamiecounsell/django-pwned-passwords\n\ndjango-pwned-passwords is a Django password validator that checks Troy Hunt's PWNED Passwords API to see if a password has been involved in a major security breach before.\n\n**Note: This app currently sends a portion of a user's hashed password to a third party. Before using this application, you should understand how that impacts you.**\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-pwned-passwords.readthedocs.io.\n\nRequirements\n------------\n\n* Django [1.8, 1.11], 2.0\n* Python 2.7, [3.4, 3.6]\n\nQuickstart\n----------\n\nInstall django-pwned-passwords::\n\n    pip install django-pwned-passwords\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_pwned_passwords',\n        ...\n    )\n\nAdd django-pwned-passwords's PWNEDPasswordValidator:\n\n.. code-block:: python\n\n    AUTH_PASSWORD_VALIDATORS = [\n        ...\n        {\n            'NAME': 'django_pwned_passwords.password_validation.PWNEDPasswordValidator'\n        }\n    ]\n\n\nFeatures\n--------\n\nThis password validator returns a ValidationError if the PWNED Passwords API\ndetects the password in its data set. Note that the API is heavily rate-limited,\nso there is a timeout (:code:`PWNED_VALIDATOR_TIMEOUT`).\n\nIf :code:`PWNED_VALIDATOR_FAIL_SAFE` is True, anything besides an API-identified bad password\nwill pass, including a timeout. If :code:`PWNED_VALIDATOR_FAIL_SAFE` is False, anything\nbesides a good password will fail and raise a ValidationError.\n\nSettings\n--------\n\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| Setting                            | Description                                                                                                         | Default                                                                                                                          |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_TIMEOUT`    | The timeout in seconds. The validator will not wait longer than this for a response from the API.                   | :code:`2`                                                                                                                        |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_FAIL_SAFE`  | If the API fails to get a valid response, should we fail safe and allow the password through?                       | :code:`True`                                                                                                                     |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_URL`        | The URL for the API in a string format.                                                                             | :code:`https://haveibeenpwned.com/api/v2/pwnedpassword/{short_hash}`                                                             |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_ERROR`      | The error message for an invalid password.                                                                          | :code:`\"Your password was determined to have been involved in a major security breach.\"`                                         |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_ERROR_FAIL` | The error message when the API fails. Note: this will only display if :code:`PWNED_VALIDATOR_FAIL_SAFE` is `False`. | :code:`\"We could not validate the safety of this password. This does not mean the password is invalid. Please try again later.\"` |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_HELP_TEXT`  | The help text for this password validator.                                                                          | :code:`\"Your password must not have been detected in a major security breach.\"`                                                  |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n\n\nRate Limiting\n-------------\n\nHistorically, requests to the API were rate limited. However, with the new k-anonymity model-based API, there are no such rate limits.\n\nRunning Tests\n-------------\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n0.2.0 (2018-03-05)\n++++++++++++++++++\n* Improved password checking.\n* No longer sends user passwords to a third party. Now uses havebeenpwned's k-anonymity_ model)\n* Thank you @Plazmaz\n.. _k-anonymity: https://en.wikipedia.org/wiki/K-anonymity\n\n0.1.0 (2017-08-05)\n++++++++++++++++++\n\n* Initial beta release. Working as intended. **Note: This app currently sends user passwords to a third party. There are obvious security risks associated with this practice.**\n\n0.0.1 (2017-08-04)\n++++++++++++++++++\n\n* Beta version, getting everything working.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jamiecounsell/django-pwned-passwords",
    "keywords": "django-pwned-passwords",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pwned-passwords",
    "package_url": "https://pypi.org/project/django-pwned-passwords/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pwned-passwords/",
    "project_urls": {
      "Homepage": "https://github.com/jamiecounsell/django-pwned-passwords"
    },
    "release_url": "https://pypi.org/project/django-pwned-passwords/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django password validator that checks Troy Hunt's PWNED Passwords API to see if a password has been involved in a major security breach before.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5647815,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc20b4565f308a34fdd1ec44c7362aeb016ee983dc4874ec3d7a8dd31dcc0f2d",
        "md5": "b01410e45c180a4baf9050159efde524",
        "sha256": "12754008edcad006ca936fcacada68e7634955e8156f4c884c8fb39289b8c2ff"
      },
      "downloads": -1,
      "filename": "django_pwned_passwords-2.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b01410e45c180a4baf9050159efde524",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 7728,
      "upload_time": "2018-11-05T23:42:48",
      "upload_time_iso_8601": "2018-11-05T23:42:48.284008Z",
      "url": "https://files.pythonhosted.org/packages/fc/20/b4565f308a34fdd1ec44c7362aeb016ee983dc4874ec3d7a8dd31dcc0f2d/django_pwned_passwords-2.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e37d3c9e411e5ad490d1b8825f7cc2f16367cc456cc5132d3af510c1e9405f7",
        "md5": "74a418d5706179457eb7ce5ca2b368f6",
        "sha256": "d93975401d63d98eb7caa85da3930c929d1f193d2c362d657ada91899625edf3"
      },
      "downloads": -1,
      "filename": "django-pwned-passwords-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "74a418d5706179457eb7ce5ca2b368f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7065,
      "upload_time": "2018-11-05T23:42:45",
      "upload_time_iso_8601": "2018-11-05T23:42:45.808676Z",
      "url": "https://files.pythonhosted.org/packages/1e/37/d3c9e411e5ad490d1b8825f7cc2f16367cc456cc5132d3af510c1e9405f7/django-pwned-passwords-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}