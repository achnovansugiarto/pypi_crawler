{
  "info": {
    "author": "Jamie Counsell",
    "author_email": "jamiecounsell@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "======================\nDjango PWNED Passwords\n======================\n\n.. image:: https://badge.fury.io/py/django-pwned-passwords.svg\n    :target: https://badge.fury.io/py/django-pwned-passwords\n\n.. image:: https://travis-ci.org/jamiecounsell/django-pwned-passwords.svg?branch=master\n    :target: https://travis-ci.org/jamiecounsell/django-pwned-passwords\n\n.. image:: https://codecov.io/gh/jamiecounsell/django-pwned-passwords/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jamiecounsell/django-pwned-passwords\n\ndjango-pwned-passwords is a Django password validator that checks Troy Hunt's PWNED Passwords API to see if a password has been involved in a major security breach before.\n\n**Note: This app currently sends a portion of a user's hashed password to a third party. Before using this application, you should understand how that impacts you.**\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-pwned-passwords.readthedocs.io.\n\nRequirements\n------------\n\n* Django [1.8, 1.11], 2.0\n* Python 2.7, [3.4, 3.6]\n\nQuickstart\n----------\n\nInstall django-pwned-passwords::\n\n    pip install django-pwned-passwords\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_pwned_passwords',\n        ...\n    )\n\nAdd django-pwned-passwords's PWNEDPasswordValidator:\n\n.. code-block:: python\n\n    AUTH_PASSWORD_VALIDATORS = [\n        ...\n        {\n            'NAME': 'django_pwned_passwords.password_validation.PWNEDPasswordValidator'\n        }\n    ]\n\n\nFeatures\n--------\n\nThis password validator returns a ValidationError if the PWNED Passwords API\ndetects the password in its data set. Note that the API is heavily rate-limited,\nso there is a timeout (:code:`PWNED_VALIDATOR_TIMEOUT`).\n\nIf :code:`PWNED_VALIDATOR_FAIL_SAFE` is True, anything besides an API-identified bad password\nwill pass, including a timeout. If :code:`PWNED_VALIDATOR_FAIL_SAFE` is False, anything\nbesides a good password will fail and raise a ValidationError.\n\nSettings\n--------\n\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| Setting                            | Description                                                                                                         | Default                                                                                                                          |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_TIMEOUT`    | The timeout in seconds. The validator will not wait longer than this for a response from the API.                   | :code:`2`                                                                                                                        |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_FAIL_SAFE`  | If the API fails to get a valid response, should we fail safe and allow the password through?                       | :code:`True`                                                                                                                     |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_URL`        | The URL for the API in a string format.                                                                             | :code:`https://haveibeenpwned.com/api/v2/pwnedpassword/{short_hash}`                                                             |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_ERROR`      | The error message for an invalid password.                                                                          | :code:`\"Your password was determined to have been involved in a major security breach.\"`                                         |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_ERROR_FAIL` | The error message when the API fails. Note: this will only display if :code:`PWNED_VALIDATOR_FAIL_SAFE` is `False`. | :code:`\"We could not validate the safety of this password. This does not mean the password is invalid. Please try again later.\"` |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n| :code:`PWNED_VALIDATOR_HELP_TEXT`  | The help text for this password validator.                                                                          | :code:`\"Your password must not have been detected in a major security breach.\"`                                                  |\n+------------------------------------+---------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------+\n\n\nRate Limiting\n-------------\n\nHistorically, requests to the API were rate limited. However, with the new k-anonymity model-based API, there are no such rate limits.\n\nRunning Tests\n-------------\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n0.2.0 (2018-03-05)\n++++++++++++++++++\n* Improved password checking.\n* No longer sends user passwords to a third party. Now uses havebeenpwned's k-anonymity_ model)\n* Thank you @Plazmaz\n.. _k-anonymity: https://en.wikipedia.org/wiki/K-anonymity\n\n0.1.0 (2017-08-05)\n++++++++++++++++++\n\n* Initial beta release. Working as intended. **Note: This app currently sends user passwords to a third party. There are obvious security risks associated with this practice.**\n\n0.0.1 (2017-08-04)\n++++++++++++++++++\n\n* Beta version, getting everything working.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jamiecounsell/django-pwned-passwords",
    "keywords": "django-pwned-passwords",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-pwned-passwords",
    "package_url": "https://pypi.org/project/django-pwned-passwords/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-pwned-passwords/",
    "project_urls": {
      "Homepage": "https://github.com/jamiecounsell/django-pwned-passwords"
    },
    "release_url": "https://pypi.org/project/django-pwned-passwords/2.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django password validator that checks Troy Hunt's PWNED Passwords API to see if a password has been involved in a major security breach before.",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5647815,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a32447eca78da84eacc54bbf3478b713d1dda1ddfa00c9bd05136f660eeffe82",
        "md5": "ea95706b013ecd5061dd83c157d264e0",
        "sha256": "a23026d69bd56e599b5197793ba0f44f22d5bd49e7b4bf794988f1869c76750d"
      },
      "downloads": -1,
      "filename": "django_pwned_passwords-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea95706b013ecd5061dd83c157d264e0",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 7733,
      "upload_time": "2019-02-04T00:41:18",
      "upload_time_iso_8601": "2019-02-04T00:41:18.514170Z",
      "url": "https://files.pythonhosted.org/packages/a3/24/47eca78da84eacc54bbf3478b713d1dda1ddfa00c9bd05136f660eeffe82/django_pwned_passwords-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15119ffc1ca29d23980968b5f2fbaeabc5c81c3229d3462b2f56d8b3f71ad193",
        "md5": "43e3bb1fdbda4ab88d302536402d11a8",
        "sha256": "df43e1ccba25414e5c69821d620d3450f74d423ab2349d34b9d6b3a1e21f1180"
      },
      "downloads": -1,
      "filename": "django-pwned-passwords-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "43e3bb1fdbda4ab88d302536402d11a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7083,
      "upload_time": "2019-02-04T00:41:16",
      "upload_time_iso_8601": "2019-02-04T00:41:16.189963Z",
      "url": "https://files.pythonhosted.org/packages/15/11/9ffc1ca29d23980968b5f2fbaeabc5c81c3229d3462b2f56d8b3f71ad193/django-pwned-passwords-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}