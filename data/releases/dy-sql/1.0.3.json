{
  "info": {
    "author": "Adobe",
    "author_email": "noreply@adobe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "######################\n Dynamic SQL (dy-sql)\n######################\n\nThis project consists of a set of python decorators that eases integration with SQL databases. These decorators\nmay trigger queries, inserts, updates, and deletes.\n\nThe decorators are a way to help us map our data in python to SQL queries and vice versa.\nWhen we select, insert, update, or delete the queries, we pass the data we want\nto insert along with a well defined query.\n\nThis is designed to be done with minimal setup and coding. You need to specify \nthe database connection parameters and annotate any SQL queries/updates you have with the\ndecorator that fits your needs.\n\nComponent Breakdown\n===================\n* **set_database_parameters** - this function needs to be used to set the database parameters so when a decorator function is called, it can initialize a connection pool to a correct database.\n* **DbMapResult** - this is a base class that can be used when selecting out data that helps to map the results of a query to an object in python\n* **@sqlquery** - this is a decorator for select queries that can return a sql result in a DbMapResult\n* **@sqlinsert** - this is a decorator for any queries that can change data in the database. This can take a set of values and yield multiple operations back for insertions inside of a transaction.\n* **@sqlexists** - this is a decorator that does a select query but wraps it and handles the return values giving back a True or False\n\nDatabase Preperation\n====================\nIn order to initialize a connection pool when you first call a function with a\nsql decorator, the database needs to be set up.\nthis is an init function to help with this. in your initialization code for your\napp, call the init function like in the following example.\n\n.. code-block:: python\n\n    from dysql import set_database_parameters\n\n\n    def set_database_from_config():\n        maria_db_config = {...}\n        set_database_parameters(\n            maria_db_host,\n            maria_db_user,\n            maria_db_password,\n            maria_db_databas,\n            port=maria_db_port,\n        )\n\nNote: the keyword arguments are not required and have standard default values,\nthe port for example defaults to 3306\n\nDecorators\n==========\nDecorators are an easy way for us to tell a function to be a 'query' and return\n a result without having to have a big chunk of boiler plate code. once the\n database has been prepared, calling a sql decorated function will initialize\n the database, parse the value returned in your function, make a corresponding\n parameterized query and return the results.\n\nThe basic structure is to decorate a method that returns a query string and its\n parameters should it have any parameters. There are multiple options for\n returning a query. below is a summary of some of the possibilities:\n\n* return a QueryData object that possibly contains queryparams and or templateparams\n* yield one or more QueryData object that possibly contains queryparams and or templateparams\n\nDbMapResult\n~~~~~~~~~~~\nThis wraps and returns the results of a query making it easier to access the data\nyou put into it for example if you make the query \"SELECT id, name FROM table\",\nit would return a list of DbMapResult objects that contain fields for each of\nthose properties. You could then easily loop through and access the properties\nlike in the following example\n\n.. code-block:: python\n\n    @sqlquery()\n    def get_items_from_sql_query():\n        return QueryData(\"SELECT id, name FROM table\")\n\n    def get_and_process_items():\n        for item in get_items_from_sql_query():\n            # we are able to access properties on the object\n            print('{name} goes with {id}'.format(item.name, item.id))\n\nWe can inherit from DbMapResult and override the way our data maps into the\nobject. This is primarily helpful in cases where we end up with multiple rows\nbecause a query has a 1 to many relationship\n\n.. code-block:: python\n\n    class ExampleMap(DbMapResult):\n        def map_result(self, result):\n            # we know we are mapping multiple rows to a single result\n            if self.id is None:\n                #in our case we know the id is the same so we only set it the first time\n                self.id = result['id']\n                #initialize our array\n                self.item_names = []\n\n        #we know that every result for a given id has a unique item_name\n        self.item_names.append(result['item_name'])\n\n    @sqlquery(mapping=ExampleMap)\n    def get_table_items()\n        return QueryData(\"\"\"\n            SELECT id, name, item_name FROM table\n            JOIN table_item ON table.id = table_item.table_id\n            JOIN item ON item.id = table_item.item_id\"\"\")\n\n    def print_item_names()\n        for table_item in get_table_items():\n            for item_name in table_item.item_names:\n                print('table name {} has item {}'.format(table_item.name, item_name))\n\n@sqlquery\n~~~~~~~~~\nThis is for making sql select calls. An optional mapper may be specified to\nchange the behavior of what is returned from a decorated method. The default\nmapper can combine multiple records into a single result if there is an\n``id`` field present in each record. Mappers available:\n\n* ``RecordCombiningMapper`` (default) - returns a list of results, with multiple records with the same ``id`` value\n  being combined into a single result. An optional ``record_mapper`` value may be passed to the constructor to change\n  how records are mapped to result.\n* ``SingleRowMapper`` - returns an object for the first record from the database (even if multiple records are\n  returned). An optional ``record_mapper`` value may be passed to the construct to change how this first record is\n  mapped to the result.\n* ``SingleColumnMapper`` - returns a list of scalars with the first column from every record, even if multiple columns\n  are returned from the database.\n* ``SingleRowAndColumnMapper`` - returns a single scalar value even if multiple records and columns are returned\n  from the database.\n* ``CountMapper`` - alias for ``SingleRowAndColumnMapper`` to make it clearer for counting queries.\n* Custom mappers may be made by extending the ``BaseMapper`` class and implementing the ``map_records`` method.\n\nbasic query with conditions hardcoded into query and default mapper\n\n.. code-block:: python\n\n    def get_items():\n        items = select_items_for_joe()\n        # ... work on items\n\n    @sqlquery()\n    def select_items_for_joe()\n        return QueryData(\"SELECT * FROM table WHERE name='joe'\")\n\nbasic query with params passed as a dict\n\n.. code-block:: python\n\n    def get_items():\n        items = select_items_for_name('joe')\n        # ... work on items, which contains all records matching the name\n\n    @sqlquery()\n    def select_items_for_name(name)\n        return QueryData(\"SELECT * FROM table WHERE name=:name\", query_params={'name':name})\n\nquery that only returns a single result from the first row\n\n.. code-block:: python\n\n    def get_joe_id():\n        result = get_item_for_name('joe')\n        return result.get('id')\n\n    # Either an instance or class may be used as the mapper parameter\n    @sqlquery(mapper=SingleRowMapper())\n    def get_item_for_name(name)\n        return QueryData(\"SELECT id, name FROM table WHERE name=:name\", query_params={'name':name})\n\nalternative to the above query that returns the id directly\n\n.. code-block:: python\n\n    def get_joe_id():\n        return get_id_for_name('joe')\n\n    @sqlquery(mapper=SingleRowAndColumnMapper)\n    def get_id_for_name(name)\n        return QueryData(\"SELECT id FROM table WHERE name=:name\", query_params={'name':name})\n\nquery that returns a list of scalar values containing the list of distinct names available\n\n.. code-block:: python\n\n    def get_unique_names():\n        return get_names_from_items()\n\n    @sqlquery(mapper=SingleColumnMapper)\n    def get_names_from_items()\n        return QueryData(\"SELECT DISTINCT(name) FROM table\")\n\nbasic count query that only returns the scalar value returned for the count\n\n.. code-block:: python\n\n    def get_count_for_joe():\n        return get_count_for_name('joe')\n\n    @sqlquery(mapper=CountMapper)\n    def get_count_for_name(name)\n        return QueryData(\"SELECT COUNT(*) FROM table WHERE name=:name\", query_params={'name':name})\n\n\n@sqlupdate\n~~~~~~~~~~\nHandles anything that is not a select. this is primarily, but not limited to, for insert, update, and delete.\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_dict)\n        return QueryData(\"INSERT INTO\", template_params={'in__item_id':item_id_list})\n\n@sqlexists\n~~~~~~~~~~\nThis wraps up a sql query conditionally and ultimately returns a boolean value to the caller. The query you give here can return anything you want but as good practice, try to always select as little as possible. For example, below we are just returning 1 because the value itself isn't used, we just need to know there are records avaliable\n\n.. code-block:: python\n\n    @sqlquery()\n    def item_exists(item_id)\n        return QueryData(\"SELECT 1 FROM table WHERE id=:id\", query_params={'id':item_id})\n\nUltimately, the above query becomes \"SELECT EXISTS (SELECT 1 FROM table WHERE id=:id)\". You'll notice the inner select value isn't actually used\n\nDecorator templates\n===================\n\n**in** template - this template will allow you to pass a list as a single parameter and have the `IN` condition build out for you. This allows you to more dynamically include values in your queries.\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list)\n        return QueryData(\"SELECT * FROM table WHERE {in__item_id}\",\n                        template_params={'in__item_id':item_id_list})\n\n**not_in** template -  this template will allow you to pass a list as a single parameter and have the `NOT IN` condition build out for you. This allows you more dynamically exclude values in your queries.\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list)\n        return QueryData(\"SELECT * FROM table WHERE {not_in__item_id}\",\n                        template_params={'not_in__item_id':item_id_list})\n\n**values** template - when inserting and you have multiple records to insert, this allows you to pass multiple records for insert in a single INSERT statement\n\n.. code-block:: python\n\n    @sqlquery()\n    def insert_items(items)\n        return QueryData(\"INSERT_INTO table(column_a, column_b) {values__items}\",\n                        template_params={'values__items':item_id_list})\n\nYou can write queries that contain templates and query_params used\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list, name)\n        return QueryData(\"SELECT * FROM table WHERE {in__item_id} and name=:name\",\n                        template_params={'in__item_id':item_id_list},\n                        query_params={'name': name})\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adobe/dy-sql",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dy-sql",
    "package_url": "https://pypi.org/project/dy-sql/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/dy-sql/",
    "project_urls": {
      "Homepage": "https://github.com/adobe/dy-sql"
    },
    "release_url": "https://pypi.org/project/dy-sql/1.0.3/",
    "requires_dist": [
      "sqlalchemy (>=1.4)"
    ],
    "requires_python": "",
    "summary": "Dynamically runs SQL queries and executions.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17294606,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c3ed746e87d3bfca71c9d40a91de5b8ad11db6be2a209cc9685b56d9ed7561c",
        "md5": "0211be8a5acac04122ece050c66e368c",
        "sha256": "7401e89addc196b37603303b5740339445593acf9dd19f7029ccbf65fd55d75d"
      },
      "downloads": -1,
      "filename": "dy_sql-1.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0211be8a5acac04122ece050c66e368c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 14288,
      "upload_time": "2021-08-20T21:50:46",
      "upload_time_iso_8601": "2021-08-20T21:50:46.315170Z",
      "url": "https://files.pythonhosted.org/packages/0c/3e/d746e87d3bfca71c9d40a91de5b8ad11db6be2a209cc9685b56d9ed7561c/dy_sql-1.0.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2420f69f3588881036fcee784e8f163e342e3652b4ea0e29b6988409382640c",
        "md5": "b0be1055f7601b14b54a689db06bd782",
        "sha256": "6e24e4b4ce13d5a9c81e0a0c7f42895849e29e229cbbc57734d640e2a1684e14"
      },
      "downloads": -1,
      "filename": "dy-sql-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b0be1055f7601b14b54a689db06bd782",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15782,
      "upload_time": "2021-08-20T21:50:47",
      "upload_time_iso_8601": "2021-08-20T21:50:47.746119Z",
      "url": "https://files.pythonhosted.org/packages/d2/42/0f69f3588881036fcee784e8f163e342e3652b4ea0e29b6988409382640c/dy-sql-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}