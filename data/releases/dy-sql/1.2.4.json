{
  "info": {
    "author": "Adobe",
    "author_email": "noreply@adobe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "######################\n Dynamic SQL (dy-sql)\n######################\n\nThis project consists of a set of python decorators that eases integration with SQL databases.\nThese decorators may trigger queries, inserts, updates, and deletes.\n\nThe decorators are a way to help us map our data in python to SQL queries and vice versa.\nWhen we select, insert, update, or delete the queries, we pass the data we want\nto insert along with a well defined query.\n\nThis is designed to be done with minimal setup and coding. You need to specify \nthe database connection parameters and annotate any SQL queries/updates you have with the\ndecorator that fits your needs.\n\nInstallation\n============\n\n.. code-block::\n\n    pip install dy-sql\n\nComponent Breakdown\n===================\n* **set_default_connection_parameters** - this function needs to be used to set the database parameters on\n  initialization so that when a decorator function is called, it can setup a connection pool to a correct database\n* **set_current_database** - (only supported on Python 3.7+) this function may be used to set the database name for the\n  current async context (not thread), this is especially useful for multitenant applications\n* **reset_current_database** - (only supported on Python 3.7+) helper method to reset the current database after\n  ``set_current_database`` has been used in an async context\n* **QueryData** - a class that may be returned or yielded from ``sql*`` decorated methods which\n  contains query information\n* **DbMapResult** - base class that can be used when selecting data that helps to map the results of a\n  query to an object in python\n* **@sqlquery** - decorator for select queries that can return a SQL result in a ``DbMapResult``\n* **@sqlinsert** - decorator for any queries that can change data in the database, this can take a set of\n  values and yield multiple operations back for insertions or updates inside of a transaction\n* **@sqlexists** - decorator for a simplified select query that will return true if a record exists and false otherwise\n* **XDbTestManager** - test manager classes that may be used for testing purposes\n\nDatabase Preparation\n====================\nIn order to initialize a connection pool for the ``sql*`` decorators, the database needs to first be set up\nusing the ``set_default_connection_parameters`` method.\n\n.. code-block:: python\n\n    from dysql import set_database_parameters\n\n    def set_database_from_config():\n        maria_db_config = {...}\n        set_database_parameters(\n            maria_db_host,\n            maria_db_user,\n            maria_db_password,\n            maria_db_databas,\n            port=maria_db_port,\n        )\n\nNote: the keyword arguments are not required and have standard default values,\nthe port for example defaults to 3306\n\nMultitenancy\n============\n\nIn some applications, it may be useful to set a database other than the default database in order to support\ndatabase-per-tenant configurations. This may be done using the ``set_current_database`` and ``reset_current_database``\nmethods.\n\n.. code-block:: python\n\n    from dysql import reset_current_database, set_current_database\n\n    def use_database_for_query():\n        set_database_parameters(\n            ...\n            'db1',\n        )\n        set_current_database('db2')\n        try:\n            # Queries db2 and not db1\n            query_database()\n        finally:\n            reset_current_database()\n\n.. warning::\n    These methods are only supported in Python 3.7+ due to their use of the ``contextvars`` module.\n\nDecorators\n==========\nDecorators are an easy way for us to tell a function to be a 'query' and return\na result without having to have a big chunk of boiler plate code. Once the\ndatabase has been prepared, calling a ``sql*`` decorated function will initialize\nthe database, parse the value returned in your function, make a corresponding\nparameterized query and return the results.\n\nThe basic structure is to decorate a method that returns information about the query.\nThere are multiple options for returning a query, below is a summary of some of the possibilities:\n\n* return a ``QueryData`` object that possibly contains ``query_params`` and/or ``template_params``\n* (not available for all ``sql*`` decorators) yield one or more ``QueryData`` objects,\n  each containing ``query_params`` and/or ``template_params``\n\nDbMapResult\n~~~~~~~~~~~\nThis class is used in the default mapper (see below) for any ``sqlquery`` decorated method. This class may also be\noverridden as shown below. The default class wraps and returns the results of a query for easy access to the data\nfrom the query. For example, if you use the query ``SELECT id, name FROM table``, it would return a list of\n``DbMapResult`` objects where each contains the ``id`` and ``name`` fields. You could then easily loop through\nand access the properties as shown in the following example:\n\n.. code-block:: python\n\n    @sqlquery()\n    def get_items_from_sql_query():\n        return QueryData(\"SELECT id, name FROM table\")\n\n    def get_and_process_items():\n        for item in get_items_from_sql_query():\n            # we are able to access properties on the object\n            print('{name} goes with {id}'.format(item.name, item.id))\n\nWe can inherit from ``DbMapResult`` and override the way our data maps into the\nobject. This is primarily helpful in cases where we end up with multiple rows\nsuch as a query for a 1-to-many relationship.\n\n.. code-block:: python\n\n    class ExampleMap(DbMapResult):\n        def map_result(self, result):\n            # we know we are mapping multiple rows to a single result\n            if self.id is None:\n                # in our case we know the id is the same so we only set it the first time\n                self.id = result['id']\n                # initialize our array\n                self.item_names = []\n\n        # we know that every result for a given id has a unique item_name\n        self.item_names.append(result['item_name'])\n\n    @sqlquery(mapping=ExampleMap)\n    def get_table_items()\n        return QueryData(\"\"\"\n            SELECT id, name, item_name FROM table\n                JOIN table_item ON table.id = table_item.table_id\n                JOIN item ON item.id = table_item.item_id\n        \"\"\")\n\n    def print_item_names()\n        for table_item in get_table_items():\n            for item_name in table_item.item_names:\n                print(f'table name {table_item.name} has item {item_name}')\n\n@sqlquery\n~~~~~~~~~\nThis is for making SQL ``select`` calls. An optional mapper may be specified to\nchange the behavior of what is returned from a decorated method. The default\nmapper can combine multiple records into a single result if there is an\n``id`` field present in each record. Mappers available:\n\n* ``RecordCombiningMapper`` (default) - returns a list of results, with multiple records with the same ``id`` value\n  being combined into a single result. An optional ``record_mapper`` value may be passed to the constructor to change\n  how records are mapped to result. By default the ``record_mapper`` used is ``DbMapResult``.\n* ``SingleRowMapper`` - returns an object for the first record from the database (even if multiple records are\n  returned). An optional ``record_mapper`` value may be passed to the constructor to change how this first record is\n  mapped to the result.\n* ``SingleColumnMapper`` - returns a list of scalars with the first column from every record, even if multiple columns\n  are returned from the database.\n* ``SingleRowAndColumnMapper`` - returns a single scalar value even if multiple records and columns are returned\n  from the database.\n* ``CountMapper`` - alias for ``SingleRowAndColumnMapper`` to make it clear that it may be used for ``count`` queries.\n* Custom mappers may be made by extending the ``BaseMapper`` class and implementing the ``map_records`` method.\n\nbasic query with conditions hardcoded into query and default mapper\n\n.. code-block:: python\n\n    def get_items():\n        items = select_items_for_joe()\n        # ... work on items\n\n    @sqlquery()\n    def select_items_for_joe()\n        return QueryData(\"SELECT * FROM table WHERE name='joe'\")\n\nbasic query with params passed as a dict\n\n.. code-block:: python\n\n    def get_items():\n        items = select_items_for_name('joe')\n        # ... work on items, which contains all records matching the name\n\n    @sqlquery()\n    def select_items_for_name(name)\n        return QueryData(\"SELECT * FROM table WHERE name=:name\", query_params={'name': name})\n\nquery that only returns a single result from the first row\n\n.. code-block:: python\n\n    def get_joe_id():\n        result = get_item_for_name('joe')\n        return result.get('id')\n\n    # Either an instance or class may be used as the mapper parameter\n    @sqlquery(mapper=SingleRowMapper())\n    def get_item_for_name(name)\n        return QueryData(\"SELECT id, name FROM table WHERE name=:name\", query_params={'name': name})\n\nalternative to the above query that returns the id directly\n\n.. code-block:: python\n\n    def get_joe_id():\n        return get_id_for_name('joe')\n\n    @sqlquery(mapper=SingleRowAndColumnMapper)\n    def get_id_for_name(name)\n        return QueryData(\"SELECT id FROM table WHERE name=:name\", query_params={'name': name})\n\nquery that returns a list of scalar values containing the list of distinct names available\n\n.. code-block:: python\n\n    def get_unique_names():\n        return get_names_from_items()\n\n    @sqlquery(mapper=SingleColumnMapper)\n    def get_names_from_items()\n        return QueryData(\"SELECT DISTINCT(name) FROM table\")\n\nbasic count query that only returns the scalar value returned for the count\n\n.. code-block:: python\n\n    def get_count_for_joe():\n        return get_count_for_name('joe')\n\n    @sqlquery(mapper=CountMapper)\n    def get_count_for_name(name)\n        return QueryData(\"SELECT COUNT(*) FROM table WHERE name=:name\", query_params={'name': name})\n\n\n@sqlupdate\n~~~~~~~~~~\nHandles any SQL that is not a select. This is primarily, but not limited to, ``insert``, ``update``, and ``delete``.\n\n.. code-block:: python\n\n    @sqlupdate()\n    def insert_items(item_dict)\n        return QueryData(\"INSERT INTO\", template_params={'in__item_id':item_id_list})\n\n@sqlexists\n~~~~~~~~~~\nThis wraps a SQL query to determine if a row exists or not. If at least one row is returned from the query, it will\nreturn True, otherwise False. The query you give here can return anything you want but as good practice,\ntry to always select as little as possible. For example, below we are just returning 1 because the value itself\nisn't used, we just need to know there are records available.\n\n.. code-block:: python\n\n    @sqlexists()\n    def item_exists(item_id)\n        return QueryData(\"SELECT 1 FROM table WHERE id=:id\", query_params={'id': item_id})\n\nUltimately, the above query becomes ``SELECT EXISTS (SELECT 1 FROM table WHERE id=:id)``.\nYou'll notice the inner select value isn't actually used in the return.\n\nDecorator templates\n===================\n\nTemplates and generators for these templates are also provided to simplify SQL query strings.\n\n**in** template - this template will allow you to pass a list as a single parameter and have the `IN`\ncondition build out for you. This allows you to more dynamically include values in your queries.\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list)\n        return QueryData(\"SELECT * FROM table WHERE {in__item_id}\",\n                        template_params={'in__item_id': item_id_list})\n\n**not_in** template -  this template will allow you to pass a list as a single parameter and have the `NOT IN`\ncondition build out for you. This allows you more dynamically exclude values in your queries.\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list)\n        return QueryData(\"SELECT * FROM table WHERE {not_in__item_id}\",\n                        template_params={'not_in__item_id': item_id_list})\n\n**values** template - when inserting and you have multiple records to insert, this allows you to pass\nmultiple records for insert in a single INSERT statement.\n\n.. code-block:: python\n\n    @sqlquery()\n    def insert_items(items)\n        return QueryData(\"INSERT_INTO table(column_a, column_b) {values__items}\",\n                        template_params={'values__items': item_id_list})\n\nYou can write queries that combine ``template_params`` and ``query_params`` as well..\n\n.. code-block:: python\n\n    @sqlquery()\n    def select_items(item_id_list, name)\n        return QueryData(\"SELECT * FROM table WHERE {in__item_id} and name=:name\",\n                        template_params={'in__item_id': item_id_list},\n                        query_params={'name': name})\n\nTesting with Managers\n=====================\n\nDuring testing, it may be useful to hook up a real database to the tests. However, this can be difficult to maintain\nschema and isolate databases during testing. Database test managers exist for this reason. Usage is very simple with\npytest.\n\n.. code-block:: python\n\n    @pytest.fixture(scope='module', autouse=True)\n    def setup_db(self):\n        # Pass in the database name and any optional params\n        with MariaDbTestManager(f'testdb_{self.__class__.__name__.lower()}'):\n            yield\n\nThe Maria database test manager is shown used above, but future implementations may be added for other SQL backends.\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adobe/dy-sql",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dy-sql",
    "package_url": "https://pypi.org/project/dy-sql/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/dy-sql/",
    "project_urls": {
      "Homepage": "https://github.com/adobe/dy-sql"
    },
    "release_url": "https://pypi.org/project/dy-sql/1.2.4/",
    "requires_dist": [
      "sqlalchemy (>=1.4)"
    ],
    "requires_python": "",
    "summary": "Dynamically runs SQL queries and executions.",
    "version": "1.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17294606,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6113d0888742bd0a539995b3caf2a9782b4f9e5f2f9b97606d4f8f1c52459e3",
        "md5": "a574c24a1c8f03e61c7faa358d475f73",
        "sha256": "550c29d0496dd0c50c384b7fc959ca844d5f550f5ae372610b930441cf0c969c"
      },
      "downloads": -1,
      "filename": "dy_sql-1.2.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a574c24a1c8f03e61c7faa358d475f73",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 19569,
      "upload_time": "2021-08-25T20:45:36",
      "upload_time_iso_8601": "2021-08-25T20:45:36.518494Z",
      "url": "https://files.pythonhosted.org/packages/d6/11/3d0888742bd0a539995b3caf2a9782b4f9e5f2f9b97606d4f8f1c52459e3/dy_sql-1.2.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cde0a8b88ec31bf351a69f639a2303010d6613d618a4cf57506d5572bdd5fe57",
        "md5": "796b3329060832ebb3be13b4a205684d",
        "sha256": "f328830544767731043b4bc1eefc67fea1ed42317e5266aca7a1b260a7c04401"
      },
      "downloads": -1,
      "filename": "dy-sql-1.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "796b3329060832ebb3be13b4a205684d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16576,
      "upload_time": "2021-08-25T20:45:38",
      "upload_time_iso_8601": "2021-08-25T20:45:38.014425Z",
      "url": "https://files.pythonhosted.org/packages/cd/e0/a8b88ec31bf351a69f639a2303010d6613d618a4cf57506d5572bdd5fe57/dy-sql-1.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}