{
  "info": {
    "author": "Jacob Bieker",
    "author_email": "jacob@openclimatefix.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# MetNet and MetNet-2\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\nPyTorch Implementation of Google Research's MetNet for short term weather forecasting (https://arxiv.org/abs/2003.12140), inspired from https://github.com/tcapelle/metnet_pytorch/tree/master/metnet_pytorch\n\nMetNet-2 (https://arxiv.org/pdf/2111.07470.pdf) is a further extension of MetNet that takes in a larger context image to predict up to 12 hours ahead, and is also implemented in PyTorch here.\n\n## Installation\n\nClone the repository, then run\n```shell\npip install -r requirements.txt\npip install -e .\n````\n\nAlternatively, you can also install a usually older version through ```pip install metnet```\n\nPlease ensure that you're using Python version 3.9 or above.\n\n## Data\n\nWhile the exact training data used for both MetNet and MetNet-2 haven't been released, the papers do go into some detail as to the inputs, which were GOES-16 and MRMS precipitation data, as well as the time period covered. We will be making those splits available, as well as a larger dataset that covers a longer time period, with [HuggingFace Datasets](https://huggingface.co/datasets/openclimatefix/goes-mrms)! Note: The dataset is not available yet, we are still processing data!\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"openclimatefix/goes-mrms\")\n```\n\nThis uses the publicly avaiilable GOES-16 data and the MRMS archive to create a similar set of data to train and test on, with various other splits available as well.\n\n## Pretrained Weights\nPretrained model weights for MetNet and MetNet-2 have not been publicly released, and there is some difficulty in reproducing their training. We release weights for both MetNet and MetNet-2 trained on cloud mask and satellite imagery data with the same parameters as detailed in the papers on HuggingFace Hub for [MetNet](https://huggingface.co/openclimatefix/metnet) and [MetNet-2](https://huggingface.co/openclimatefix/metnet-2). These weights can be downloaded and used using:\n\n```python\nfrom metnet import MetNet, MetNet2\nmodel = MetNet().from_pretrained(\"openclimatefix/metnet\")\nmodel = MetNet2().from_pretrained(\"openclimatefix/metnet-2\")\n```\n\n## Example Usage\n\nMetNet can be used with:\n\n```python\nfrom metnet import MetNet\nimport torch\nimport torch.nn.functional as F\n\nmodel = MetNet(\n        hidden_dim=32,\n        forecast_steps=24,\n        input_channels=16,\n        output_channels=12,\n        sat_channels=12,\n        input_size=32,\n        )\n# MetNet expects original HxW to be 4x the input size\nx = torch.randn((2, 12, 16, 128, 128))\nout = []\nfor lead_time in range(24):\n        out.append(model(x, lead_time))\nout = torch.stack(out, dim=1)\n# MetNet creates predictions for the center 1/4th\ny = torch.randn((2, 24, 12, 8, 8))\nF.mse_loss(out, y).backward()\n```\n\nAnd MetNet-2 with:\n\n```python\nfrom metnet import MetNet2\nimport torch\nimport torch.nn.functional as F\n\nmodel = MetNet2(\n        forecast_steps=8,\n        input_size=64,\n        num_input_timesteps=6,\n        upsampler_channels=128,\n        lstm_channels=32,\n        encoder_channels=64,\n        center_crop_size=16,\n        )\n# MetNet expects original HxW to be 4x the input size\nx = torch.randn((2, 6, 12, 256, 256))\nout = []\nfor lead_time in range(8):\n        out.append(model(x, lead_time))\nout = torch.stack(out, dim=1)\ny = torch.rand((2,8,12,64,64))\nF.mse_loss(out, y).backward()\n```\n\n## Contributors âœ¨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\"><a href=\"https://www.jacobbieker.com\"><img src=\"https://avatars.githubusercontent.com/u/7170359?v=4?s=100\" width=\"100px;\" alt=\"Jacob Bieker\"/><br /><sub><b>Jacob Bieker</b></sub></a><br /><a href=\"https://github.com/openclimatefix/metnet/commits?author=jacobbieker\" title=\"Code\">ðŸ’»</a></td>\n      <td align=\"center\"><a href=\"http://jack-kelly.com\"><img src=\"https://avatars.githubusercontent.com/u/460756?v=4?s=100\" width=\"100px;\" alt=\"Jack Kelly\"/><br /><sub><b>Jack Kelly</b></sub></a><br /><a href=\"https://github.com/openclimatefix/metnet/commits?author=JackKelly\" title=\"Code\">ðŸ’»</a></td>\n      <td align=\"center\"><a href=\"https://github.com/ValterFallenius\"><img src=\"https://avatars.githubusercontent.com/u/21970939?v=4?s=100\" width=\"100px;\" alt=\"Valter Fallenius\"/><br /><sub><b>Valter Fallenius</b></sub></a><br /><a href=\"#userTesting-ValterFallenius\" title=\"User Testing\">ðŸ““</a></td>\n      <td align=\"center\"><a href=\"https://github.com/terigenbuaa\"><img src=\"https://avatars.githubusercontent.com/u/91317406?v=4?s=100\" width=\"100px;\" alt=\"terigenbuaa\"/><br /><sub><b>terigenbuaa</b></sub></a><br /><a href=\"#question-terigenbuaa\" title=\"Answering Questions\">ðŸ’¬</a></td>\n      <td align=\"center\"><a href=\"https://github.com/NMC-DAVE\"><img src=\"https://avatars.githubusercontent.com/u/26354668?v=4?s=100\" width=\"100px;\" alt=\"Kan.Dai\"/><br /><sub><b>Kan.Dai</b></sub></a><br /><a href=\"#question-NMC-DAVE\" title=\"Answering Questions\">ðŸ’¬</a></td>\n      <td align=\"center\"><a href=\"https://github.com/SaileshBechar\"><img src=\"https://avatars.githubusercontent.com/u/38445041?v=4?s=100\" width=\"100px;\" alt=\"Sailesh Bechar\"/><br /><sub><b>Sailesh Bechar</b></sub></a><br /><a href=\"#question-SaileshBechar\" title=\"Answering Questions\">ðŸ’¬</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openclimatefix/metnet",
    "keywords": "artificial intelligence,deep learning,transformer,attention mechanism,metnet,forecasting,remote-sensing",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metnet",
    "package_url": "https://pypi.org/project/metnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/metnet/",
    "project_urls": {
      "Homepage": "https://github.com/openclimatefix/metnet"
    },
    "release_url": "https://pypi.org/project/metnet/4.1.5/",
    "requires_dist": [
      "einops (>=0.3.0)",
      "numpy (>=1.19.5)",
      "torchvision (>=0.10.0)",
      "antialiased-cnns",
      "axial-attention",
      "pytorch-msssim",
      "huggingface-hub",
      "ocf-datapipes ; extra == 'train'",
      "pytorch-lightning ; extra == 'train'"
    ],
    "requires_python": "",
    "summary": "PyTorch MetNet Implementation",
    "version": "4.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17177694,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7cfd3820083f96bc09176e908e42906259455366fb277835204a92e4715b807",
        "md5": "3e498d1e3f753e85ae0edaf2aaaa2bd2",
        "sha256": "082e7b14a8217f1d7a10e606afac1898100a47ff09aa7b035b041971bee18c8d"
      },
      "downloads": -1,
      "filename": "metnet-4.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e498d1e3f753e85ae0edaf2aaaa2bd2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20382,
      "upload_time": "2022-11-08T16:45:46",
      "upload_time_iso_8601": "2022-11-08T16:45:46.909570Z",
      "url": "https://files.pythonhosted.org/packages/e7/cf/d3820083f96bc09176e908e42906259455366fb277835204a92e4715b807/metnet-4.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab9e879a26800e5644e7add4e6020bae6ef7c6215ab1403bb7c091f8d5392791",
        "md5": "250f5b6d6aa854bcf02c71e56db95b2a",
        "sha256": "9188e45b7778f2309e53e9b66f6340078337acff6cddb3ce06e1b343b9ec1292"
      },
      "downloads": -1,
      "filename": "metnet-4.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "250f5b6d6aa854bcf02c71e56db95b2a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17385,
      "upload_time": "2022-11-08T16:45:48",
      "upload_time_iso_8601": "2022-11-08T16:45:48.602093Z",
      "url": "https://files.pythonhosted.org/packages/ab/9e/879a26800e5644e7add4e6020bae6ef7c6215ab1403bb7c091f8d5392791/metnet-4.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}