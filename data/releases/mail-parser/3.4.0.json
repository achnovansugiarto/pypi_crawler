{
  "info": {
    "author": "Fedele Mantuano",
    "author_email": "mantuano.fedele@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "`PyPI version <https://badge.fury.io/py/mail-parser>`__ `Build\nStatus <https://travis-ci.org/SpamScope/mail-parser>`__ `Coverage\nStatus <https://coveralls.io/github/SpamScope/mail-parser?branch=develop>`__\n`BCH compliance <https://bettercodehub.com/>`__\n` <https://microbadger.com/images/fmantuano/spamscope-mail-parser>`__\n\n.. figure:: https://raw.githubusercontent.com/SpamScope/spamscope/develop/docs/logo/spamscope.png\n   :alt: SpamScope\n\n   SpamScope\n\nmail-parser\n===========\n\nOverview\n--------\n\nmail-parser is not only a wrapper for\n`email <https://docs.python.org/2/library/email.message.html>`__ Python\nStandard Library. It give you an easy way to pass from raw mail to\nPython object that you can use in your code. It’s the key module of\n`SpamScope <https://github.com/SpamScope/spamscope>`__.\n\nmail-parser can parse Outlook email format (.msg). To use this feature,\nyou need to install ``libemail-outlook-message-perl`` package. For\nDebian based systems:\n\n::\n\n   $ apt-get install libemail-outlook-message-perl\n\nFor more details:\n\n::\n\n   $ apt-cache show libemail-outlook-message-perl\n\nmail-parser supports Python 3.\n\nDescription\n-----------\n\nmail-parser takes as input a raw email and generates a parsed object.\nThe properties of this object have the same name of `RFC\nheaders <https://www.iana.org/assignments/message-headers/message-headers.xhtml>`__:\n\n-  bcc\n-  cc\n-  date\n-  delivered_to\n-  from\\_ (not ``from`` because is a keyword of Python)\n-  message_id\n-  received\n-  reply_to\n-  subject\n-  to\n\nThere are other properties to get: - body - headers - attachments -\nsender IP address - to domains\n\nTo get custom headers you should replace “-” with “\\_”. Example for\nheader ``X-MSMail-Priority``:\n\n::\n\n   $ mail.X_MSMail_Priority\n\nmail-parser can detect defect in mail: -\n`defects <https://docs.python.org/2/library/email.message.html#email.message.Message.defects>`__:\nmail with some not compliance RFC part\n\nAll properties have a JSON and raw property that you can get with: -\nname_json - name_raw\n\nExample:\n\n::\n\n   $ mail.to (Python object)\n   $ mail.to_json (JSON)\n   $ mail.to_raw (raw header)\n\nThe command line tool use the JSON format.\n\nDefects\n~~~~~~~\n\nThese defects can be used to evade the antispam filter. An example are\nthe mails with a malformed boundary that can hide a not legitimate\nepilogue (often malware). This library can take these epilogues.\n\nApache 2 Open Source License\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmail-parser can be downloaded, used, and modified free of charge. It is\navailable under the Apache 2 license.\n`Donate <https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VEPXYP745KJF2>`__\n\nAuthors\n-------\n\nMain Author\n~~~~~~~~~~~\n\n**Fedele Mantuano**:\n`LinkedIn <https://www.linkedin.com/in/fmantuano/>`__\n\nInstallation\n------------\n\nClone repository\n\n::\n\n   git clone https://github.com/SpamScope/mail-parser.git\n\nand install mail-parser with ``setup.py``:\n\n::\n\n   $ cd mail-parser\n\n   $ python setup.py install\n\nor use ``pip``:\n\n::\n\n   $ pip install mail-parser\n\nUsage in a project\n------------------\n\nImport ``mailparser`` module:\n\n::\n\n   import mailparser\n\n   mail = mailparser.parse_from_bytes(byte_mail)\n   mail = mailparser.parse_from_file(f)\n   mail = mailparser.parse_from_file_msg(outlook_mail)\n   mail = mailparser.parse_from_file_obj(fp)\n   mail = mailparser.parse_from_string(raw_mail)\n\nThen you can get all parts\n\n::\n\n   mail.attachments: list of all attachments\n   mail.body\n   mail.date: datetime object in UTC\n   mail.defects: defect RFC not compliance\n   mail.defects_categories: only defects categories\n   mail.delivered_to\n   mail.from_\n   mail.get_server_ipaddress(trust=\"my_server_mail_trust\")\n   mail.headers\n   mail.mail: tokenized mail in a object\n   mail.message: email.message.Message object\n   mail.message_as_string: message as string\n   mail.message_id\n   mail.received\n   mail.subject\n   mail.text_plain: only text plain mail parts in a list\n   mail.to\n   mail.to_domains\n\nUsage from command-line\n-----------------------\n\nIf you installed mailparser with ``pip`` or ``setup.py`` you can use it\nwith command-line.\n\nThese are all swithes:\n\n::\n\n   usage: mailparser [-h] (-f FILE | -s STRING | -k)\n                      [-l {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}] [-j] [-b]\n                      [-a] [-r] [-t] [-dt] [-m] [-u] [-c] [-d] [-o]\n                      [-i Trust mail server string] [-p] [-z] [-v]\n\n   Wrapper for email Python Standard Library\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -f FILE, --file FILE  Raw email file (default: None)\n     -s STRING, --string STRING\n                           Raw email string (default: None)\n     -k, --stdin           Enable parsing from stdin (default: False)\n     -l {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}, --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}                                                                                          \n                           Set log level (default: WARNING)\n     -j, --json            Show the JSON of parsed mail (default: False)\n     -b, --body            Print the body of mail (default: False)\n     -a, --attachments     Print the attachments of mail (default: False)\n     -r, --headers         Print the headers of mail (default: False)\n     -t, --to              Print the to of mail (default: False)\n     -dt, --delivered-to   Print the delivered-to of mail (default: False)\n     -m, --from            Print the from of mail (default: False)\n     -u, --subject         Print the subject of mail (default: False)\n     -c, --receiveds       Print all receiveds of mail (default: False)\n     -d, --defects         Print the defects of mail (default: False)\n     -o, --outlook         Analyze Outlook msg (default: False)\n     -i Trust mail server string, --senderip Trust mail server string\n                           Extract a reliable sender IP address heuristically\n                           (default: None)\n     -p, --mail-hash       Print mail fingerprints without headers (default:\n                           False)\n     -z, --attachments-hash\n                           Print attachments with fingerprints (default: False)\n     -v, --version         show program's version number and exit\n\n   It takes as input a raw mail and generates a parsed object.\n\nExample:\n\n.. code:: shell\n\n   $ mailparser -f example_mail -j\n\nThis example will show you the tokenized mail in a JSON pretty format.\n\nFrom `raw\nmail <https://gist.github.com/fedelemantuano/5dd702004c25a46b2bd60de21e67458e>`__\nto `parsed\nmail <https://gist.github.com/fedelemantuano/e958aa2813c898db9d2d09469db8e6f6>`__.\n\nExceptions\n----------\n\nExceptions hierarchy of mail-parser:\n\n::\n\n   MailParserError: Base MailParser Exception\n   |\n   \\── MailParserOutlookError: Raised with Outlook integration errors\n   |\n   \\── MailParserEnvironmentError: Raised when the environment is not correct\n   |\n   \\── MailParserOSError: Raised when there is an OS error\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SpamScope/mail-parser",
    "keywords": "mail",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mail-parser",
    "package_url": "https://pypi.org/project/mail-parser/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/mail-parser/",
    "project_urls": {
      "Homepage": "https://github.com/SpamScope/mail-parser"
    },
    "release_url": "https://pypi.org/project/mail-parser/3.4.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Wrapper for email standard library",
    "version": "3.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9535486,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc453c52470f6a62becbcd18fb0850823284bd2d5a36069c74519217abea5387",
        "md5": "5bea57e6a4a7346f4cbccba8104125c9",
        "sha256": "85bf11991652eb27231779906f3fdec78fa594bf6124613e66b5841bc7587593"
      },
      "downloads": -1,
      "filename": "mail-parser-3.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5bea57e6a4a7346f4cbccba8104125c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13410,
      "upload_time": "2018-07-06T10:30:24",
      "upload_time_iso_8601": "2018-07-06T10:30:24.699955Z",
      "url": "https://files.pythonhosted.org/packages/dc/45/3c52470f6a62becbcd18fb0850823284bd2d5a36069c74519217abea5387/mail-parser-3.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}