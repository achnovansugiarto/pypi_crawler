{
  "info": {
    "author": "YunoJuno",
    "author_email": "code@yunojuno.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django UTM Tracker\n\nDjango app for extracting and storing UTM tracking values.\n\n## Django support\n\nThis package support Django 3.2+, and Python 3.7+\n\n## Background\n\nThis app has been designed to integrate the standard `utm_*` querystring\nparameters that are used by online advertisers with your Django project.\n\nIt does _not_ replace analytics (e.g. Google Analytics) and Adwords tracking,\nbut does have one crucial difference - it allows you to assign a specific user\nto a campaign advert.\n\nThis may be useful if you are trying to assess the value of multiple channels /\ncampaigns.\n\n### Supported querystring parameters\n\nParameter | Definition\n:-- | :--\nutm_medium | Identifies what type of link was used.\nutm_source | Identifies which site sent the traffic, and is a required parameter.\nutm_campaign | Identifies a specific product promotion or strategic campaign.\nutm_term | Identifies search terms.\ngclid | Identifies a google click, is used for ad tracking in Google Analytics via Google Ads.\naclk | Identifies a Microsoft Ad click (bing), is used for ad tracking.\nmsclkid | Identifies a Microsoft Ad click (MS ad network), is used for ad tracking.\ntwclid | Identifies a Twitter Ad click, is used for ad tracking.\nfbclid | Identifies a Facebook Ad click, is used for ad tracking.\n\nIn addition to the fixed list above, you can also specify custom tags\nusing the `UTM_TRACKER_CUSTOM_TAGS` setting. Any querystring params that\nmatch these tags are stashed in a JSONField called `custom_tags`.\n\n## How it works\n\nThe app works as a pair of middleware classes, that extract `utm_`\nvalues from any incoming request querystring, and then store those\nparameters against the request.user (if authenticated), or in the\nrequest.session (if not).\n\nThe following shows this workflow (pseudocode - see\n`test_utm_and_lead_source` for a real example):\n\n```python\nclient = Client()\n# first request stashes values, but does not create a LeadSource as user is anonymous\nclient.get(\"/?utm_medium=medium&utm_source=source...\")\nassert utm_values_in_session\nassert LeadSource.objects.count() == 0\n\n# subsequent request, with authenticated user, extracts values and stores LeadSource\nuser = User.objects.create(username=\"fred\")\nclient.force_login(user, backend=settings.FORCED_AUTH_BACKEND)\nclient.get(\"/\")\nassert not utm_values_in_session\nassert LeadSource.objects.count() == 1\n```\n\n### Why split the middleware in two?\n\nBy splitting the middleware into two classes, we enable the use case where we\ncan track leads without `utm_` querystring parameters. For instance, if you have\nan internal referral program, using a simple token, you can capture this as a\n`LeadSource` by adding sentinel values to the `request.session`:\n\n```python\ndef referral(request, token):\n    # do token handling\n    ...\n    # medium and source are mandatory for lead source capture\n    request.session[\"utm_medium\"] = \"referral\"\n    request.session[\"utm_source\"] = \"internal\"\n    # campaign, term and content are optional fields\n    request.session[\"utm_campaign\"] = \"july\"\n    request.session[\"utm_term\"] = token\n    request.session[\"utm_content\"] = \"buy-me\"\n    return render(request, \"landing_page.html\")\n```\n\n## Configuration\n\nAdd the app to `INSTALLED_APPS`:\n\n```python\n# settings.py\nINSTALLED_APPS = [\n    ...\n    \"utm_tracker\"\n]\n\nUTM_TRACKER_CUSTOM_TAGS = [\"tag1\", \"tag2\"]\n```\n\nand add both middleware classes to `MIDDLEWARE`:\n\n```python\n# settings.py\nMIDDLEWARE = [\n    ...\n    \"utm_tracker.middleware.UtmSessionMiddleware\",\n    \"utm_tracker.middleware.LeadSourceMiddleware\",\n]\n```\n\nThe `UtmSession` middleware must come before `LeadSource` middleware.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yunojuno/django-utm-tracker",
    "keywords": "",
    "license": "MIT",
    "maintainer": "YunoJuno",
    "maintainer_email": "code@yunojuno.com",
    "name": "django-utm-tracker",
    "package_url": "https://pypi.org/project/django-utm-tracker/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-utm-tracker/",
    "project_urls": {
      "Documentation": "https://github.com/yunojuno/django-utm-tracker",
      "Homepage": "https://github.com/yunojuno/django-utm-tracker",
      "Repository": "https://github.com/yunojuno/django-utm-tracker"
    },
    "release_url": "https://pypi.org/project/django-utm-tracker/1.1/",
    "requires_dist": [
      "django (>=2.2,<5.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Django app for extracting and storing UTM tracking values.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16902636,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22ddd9f28b163beb28e9a95c1db03542424bbd4576ba0b5a55c12b8b1b0e1a8c",
        "md5": "e9c40c5c0f6ebb5364dcfb3d5a81aaec",
        "sha256": "43f06b23b545800806e1640c0ed72dccdfb1216feabcd73f6bbdcb8eb26db32c"
      },
      "downloads": -1,
      "filename": "django_utm_tracker-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9c40c5c0f6ebb5364dcfb3d5a81aaec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 14033,
      "upload_time": "2022-02-01T14:19:04",
      "upload_time_iso_8601": "2022-02-01T14:19:04.786091Z",
      "url": "https://files.pythonhosted.org/packages/22/dd/d9f28b163beb28e9a95c1db03542424bbd4576ba0b5a55c12b8b1b0e1a8c/django_utm_tracker-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a831f36dcbf26fd6efb8ea13b7c5e89a59e768544ebdaa8c5b84cabdbde67517",
        "md5": "d0ea1cae32e41bfaa7d2dd6cb29c56c0",
        "sha256": "6365753a5d9827a7035643d522d4650e7d7c496796aab7c55f825144bd55a9cb"
      },
      "downloads": -1,
      "filename": "django-utm-tracker-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d0ea1cae32e41bfaa7d2dd6cb29c56c0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 10678,
      "upload_time": "2022-02-01T14:19:03",
      "upload_time_iso_8601": "2022-02-01T14:19:03.168422Z",
      "url": "https://files.pythonhosted.org/packages/a8/31/f36dcbf26fd6efb8ea13b7c5e89a59e768544ebdaa8c5b84cabdbde67517/django-utm-tracker-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}