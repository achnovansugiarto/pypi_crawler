{
  "info": {
    "author": "Justin Karneges",
    "author_email": "justin@fanout.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Django EventStream\n\nEventStream provides API endpoints for your Django application that can push data to connected clients. Data is sent using the Server-Sent Events protocol (SSE), in which data is streamed over a never-ending HTTP response.\n\nFor example, you could create an endpoint, `/events/`, that a client could connect to with a GET request:\n\n```http\nGET /events/ HTTP/1.1\nHost: api.example.com\nAccept: text/event-stream\n```\n\nThe client would receive a streaming HTTP response with content looking like this:\n\n```http\nHTTP/1.1 200 OK\nTransfer-Encoding: chunked\nConnection: Transfer-Encoding\nContent-Type: text/event-stream\n\nevent: stream-open\ndata:\n\nevent: message\ndata: {\"foo\": \"bar\"}\n\nevent: message\ndata: {\"bar\": \"baz\"}\n```\n\nFeatures:\n\n* Easy to consume from browsers or native applications.\n* Highly reliable. Events can be persisted to your database, so clients can recover if they get disconnected.\n* Set per-user channel permissions.\n* Clean API contract that could be exposed to third parties if desired.\n\n## Requirements\n\nThis library requires one or both of:\n\n* [Django Channels 2](https://channels.readthedocs.io/en/latest/) (for asynchronous connection handling, needs Python 3.5+).\n* A GRIP-compatible proxy such as [Pushpin](https://pushpin.org) or [Fanout Cloud](https://fanout.io) (will work with any Python version including 2.x).\n\n## Setup\n\nIf you're using Python 3.5 or later, we recommend setting up your project with Channels as this will give you the most flexibility, including being able to run standalone or with `runserver`. You can always [add Pushpin/Fanout](#multiple-instances-and-scaling) afterwards for high availability or scale.\n\nFor Python versions earlier than 3.5, see [Setup without Channels](#setup-without-channels).\n\n### Setup with Channels\n\nFirst, install this module:\n\n```sh\npip install django-eventstream\n```\n\nAdd the `channels` and `django_eventstream` apps to your `settings.py`:\n\n```py\nINSTALLED_APPS = [\n    ...\n    'channels',\n    'django_eventstream',\n]\n```\n\nAdd the `GripMiddleware`:\n\n```py\nMIDDLEWARE = [\n    'django_grip.GripMiddleware',\n    ...\n]\n```\n\nChannels introduces an entirely separate routing system for handling async connections. Routes are declared in `routing.py` files instead of `urls.py` files, and you declare an [ASGI](https://channels.readthedocs.io/en/latest/asgi.html) application instead of (or in addition to) a WSGI application.\n\nCreate a `routing.py` file in one of your Django app dirs, with an endpoint declared:\n\n```py\nfrom django.conf.urls import url\nfrom channels.routing import URLRouter\nfrom channels.http import AsgiHandler\nfrom channels.auth import AuthMiddlewareStack\nimport django_eventstream\n\nurlpatterns = [\n    url(r'^events/', AuthMiddlewareStack(\n        URLRouter(django_eventstream.routing.urlpatterns)\n    ), {'channels': ['test']}),\n    url(r'', AsgiHandler),\n]\n```\n\nThen, ensure you have a master `routing.py` file in your project dir (next to `settings.py`) that routes to the app's `routing` module from the previous step:\n\n```py\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nimport your_app.routing\n\napplication = ProtocolTypeRouter({\n    'http': URLRouter(your_app.routing.urlpatterns),\n})\n```\n\nSet `ASGI_APPLICATION` in your `settings.py` file to your project's `routing` module:\n\n```py\nASGI_APPLICATION = 'your_project.routing.application'\n```\n\nFinally, create an `asgi.py` file in your project dir. It's similar to your `wsgi.py`:\n\n```py\n\"\"\"\nASGI entrypoint. Configures Django and then runs the application\ndefined in the ASGI_APPLICATION setting.\n\"\"\"\n\nimport os\nimport django\nfrom channels.routing import get_default_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"your_project.settings\")\ndjango.setup()\napplication = get_default_application()\n```\n\nFor more information about setting up Channels in general, see the [Channels Documentation](http://channels.readthedocs.io/en/latest/tutorial/part_1.html#integrate-the-channels-library).\n\nThat's it! If you run `python manage.py runserver`, clients will be able to connect to the `/events/` endpoint and get a stream.\n\nTo send data to clients, call `send_event`:\n\n```py\nfrom django_eventstream import send_event\n\nsend_event('test', 'message', {'text': 'hello world'})\n```\n\nThe first argument is the channel to send on, the second is the event type, and the third is the event data. The data will be JSON-encoded using `DjangoJSONEncoder`.\n\n### Deploying with Channels\n\nAfter following the instructions in the previous section, you'll be able to develop and run locally using `runserver`. However, you should not use `runserver` when deploying, and instead launch an ASGI server such as Daphne, e.g.:\n\n```sh\ndaphne your_project.asgi:application\n```\n\nSee the [Channels Documentation](https://channels.readthedocs.io/en/latest/deploying.html) for information about deployment.\n\n### Multiple instances and scaling\n\nIf you want to run multiple instances of your Django project for high availablity, or need to be able to scale to a large number of connections, you can introduce a GRIP proxy layer (such as [Pushpin](https://pushpin.org) or [Fanout Cloud](https://fanout.io)) into your architecture.\n\nIn your `settings.py`, set `GRIP_URL` with your proxy settings:\n\n```py\nGRIP_URL = 'http://api.fanout.io/realm/your-realm?iss=your-realm&key=base64:your-realm-key'\n```\n\nThen configure the proxy to forward traffic to your project. E.g. with Fanout Cloud, set the `host:port` of your deployed project as your realm's Origin Server, and have clients connect to your realm's domain.\n\n### Setup without Channels\n\nIt is possible to use this library with a GRIP proxy only, without setting up Channels. This can be useful if your Python version doesn't support Channels.\n\nFirst, install this module:\n\n```sh\npip install django-eventstream\n```\n\nA few changes need to be made to `settings.py`.\n\nAdd the `django_eventstream` app:\n\n```py\nINSTALLED_APPS = [\n    ...\n    'django_eventstream',\n]\n```\n\nAdd the `GripMiddleware`:\n\n```py\nMIDDLEWARE = [\n    'django_grip.GripMiddleware',\n    ...\n]\n```\n\nSet `GRIP_URL` with your Pushpin or Fanout Cloud settings:\n\n```py\n# pushpin\nGRIP_URL = 'http://localhost:5561'\n```\n\n```py\n# fanout cloud\nGRIP_URL = 'http://api.fanout.io/realm/your-realm?iss=your-realm&key=base64:your-realm-key'\n```\n\nAdd an endpoint in `urls.py`:\n\n```py\nfrom django.conf.urls import url, include\nimport django_eventstream\n\nurlpatterns = [\n    ...\n    url(r'^events/', include(django_eventstream.urls), {'channels': ['test']}),\n]\n```\n\nThat's it! Clients can now connect to the `/events/` endpoint through the proxy and get a stream.\n\nTo send data to clients, call `send_event`:\n\n```py\nfrom django_eventstream import send_event\n\nsend_event('test', 'message', {'text': 'hello world'})\n```\n\nThe first argument is the channel to send on, the second is the event type, and the third is the event data. The data will be JSON-encoded using `DjangoJSONEncoder`.\n\n## Local development without Channels\n\nIf you're developing locally without Channels and want to test with Fanout Cloud, we recommend using [ngrok](https://ngrok.com/) to register a public host that routes to your local instance.\n\nAs a convenience, this module comes with a Django command `runserver_ngrok` that acts like `runserver` except it additionally configures your Fanout Cloud realm to use a detected tunnel as the origin server.\n\nFrom a separate shell, run `ngrok`:\n\n```sh\nngrok http 8000\n```\n\nThen run the `runserver_ngrok` command:\n\n```sh\npython manage.py runserver_ngrok\n```\n\nYou should see output like this:\n\n```\nSetting ngrok tunnel 4f91f84e.ngrok.io as GRIP origin\n...\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\nNote that it may take a minute or so for the changes to take effect.\n\nNow if you make client requests to your realm's domain (e.g. `{realm-id}.fanoutcdn.com`) they will be routed to your local instance.\n\n## Event storage\n\nBy default, events aren't persisted anywhere, so if clients get disconnected or if your server fails to send data, then clients can miss messages. For reliable delivery, you'll want to enable event storage.\n\nFirst, set up the database tables:\n\n```sh\npython manage.py migrate\n```\n\nThen, set a storage class in `settings.py`:\n\n```py\nEVENTSTREAM_STORAGE_CLASS = 'django_eventstream.storage.DjangoModelStorage'\n```\n\nThat's all you need to do. When storage is enabled, events are written to the database before they are published, and they persist for 24 hours. If clients get disconnected, intermediate proxies go down, or your own server goes down or crashes at any time, even mid-publish, the stream will automatically be repaired.\n\nTo enable storage selectively by channel, implement a channel manager and override `is_channel_reliable`.\n\n## Receiving in the browser\n\nInclude client libraries on the frontend:\n\n```html\n<script src=\"{% static 'django_eventstream/eventsource.min.js' %}\"></script>\n<script src=\"{% static 'django_eventstream/reconnecting-eventsource.js' %}\"></script>\n```\n\nListen for data:\n\n```js\nvar es = new ReconnectingEventSource('/events/');\n\nes.addEventListener('message', function (e) {\n    console.log(e.data);\n}, false);\n\nes.addEventListener('stream-reset', function (e) {\n    // ... client fell behind, reinitialize ...\n}, false);\n```\n\n## Authorization\n\nDeclare a channel manager class with your authorization logic:\n\n```py\nfrom django_eventstream.channelmanager import DefaultChannelManager\n\nclass MyChannelManager(DefaultChannelManager):\n    def can_read_channel(self, user, channel):\n        # require auth for prefixed channels\n        if channel.startswith('_') and user is None:\n            return False\n        return True\n```\n\nConfigure `settings.py` to use it:\n\n```py\nEVENTSTREAM_CHANNELMANAGER_CLASS = 'myapp.channelmanager.MyChannelManager'\n```\n\nWhenever permissions change, call `channel_permission_changed`. This will cause clients to be disconnected if they lost permission to the channel.\n\n```py\nfrom django_eventstream import channel_permission_changed\n\nchannel_permission_changed(user, '_mychannel')\n```\n\n## Routes and channel selection\n\nThe channels the client listens to are specified using Django view keyword arguments on the routes. Alternatively, if no keyword arguments are specified, then the client can select the channels on its own by providing one or more `channel` query parameters in the HTTP request.\n\nExamples:\n\n```py\n# specify fixed list of channels\nurl(r'^foo/events/', include(django_eventstream.urls), {'channels': ['foo']})\n\n# specify a list of dynamic channels using formatting based on view keywords\nurl(r'^objects/(?P<obj_id>\\w+)/events/', include(django_eventstream.urls),\n    {'format-channels': ['object-{obj_id}']})\n\n# client selects a single channel using a path component\nurl(r'^events/(?P<channel>\\w+)/', include(django_eventstream.urls))\n\n# client selects one or more channels using query parameters\nurl(r'^events/', include(django_eventstream.urls))\n```\n\nNote that if view keywords or a channel path component are used, the client cannot use query parameters to select channels.\n\nIf even more advanced channel mapping is needed, implement a channel manager and override `get_channels_for_request`.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fanout/django-eventstream",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-eventstream",
    "package_url": "https://pypi.org/project/django-eventstream/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-eventstream/",
    "project_urls": {
      "Homepage": "https://github.com/fanout/django-eventstream"
    },
    "release_url": "https://pypi.org/project/django-eventstream/2.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Server-Sent Events for Django",
    "version": "2.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16507038,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fb7ec483f62e3e1d82c771c9c94ab62f12128c4acd47ce6978e7ab6d7ccb231",
        "md5": "0c3063ab1e51ca4b33f9ffd2223df47c",
        "sha256": "bf10e4a9bcff1a506e2c5a5ac2849fd7bdd84b47698d94f8331344016c5624ec"
      },
      "downloads": -1,
      "filename": "django-eventstream-2.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0c3063ab1e51ca4b33f9ffd2223df47c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31026,
      "upload_time": "2018-09-01T02:38:16",
      "upload_time_iso_8601": "2018-09-01T02:38:16.648280Z",
      "url": "https://files.pythonhosted.org/packages/5f/b7/ec483f62e3e1d82c771c9c94ab62f12128c4acd47ce6978e7ab6d7ccb231/django-eventstream-2.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}