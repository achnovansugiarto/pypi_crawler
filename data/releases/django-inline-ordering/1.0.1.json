{
  "info": {
    "author": "Piotr Kilczuk",
    "author_email": "p.kilczuk@neumea.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "======================\ndjango-inline-ordering\n======================\n\nThis app aims at easing implementing drag & drop reordering of inline data in \nDjango Admin. \n\nRecent version of `Grappelli <http://code.google.com/p/django-grappelli/>`_ includes \ndrag and drop inlines, so if you are already using Grappelli, installing \ndjango-inline-ordering does not make sense. If you didn't evaluate Grappelli yet,\nI encourage you to do so!\n\nThe django-inline-ordering is being tested during development on: \n\n- Firefox 3.5+\n- Internet Explorer 7+\n- Google Chrome 10+\n- Opera 11+ \n\nSuggestions on how to improve django-inline-ordering are very welcome.\n\nInstallation\n------------\n\n1. Put 'inline_ordering' on your python path\n\n2. Add 'inline_ordering' to INSTALLED_APPS tuple in settings file \n\nUsage\n-----\n\nFor each model that you want to be reorderable with drag & drop, you need to \nsetup an admin class and slightly modify model declaration. This way you can \neasily apply reordering to existing model classes. You'll also have to run \n``collectstatic`` task or copy one file to your MEDIA_ROOT when using Django \n< 1.3.\n\nLet's start with a simple example: Gallery has many Images. User might \nwant to reorder the photos in the gallery to fit his likings.\n\n1. Setup your admin inline class to inherit after OrderableStackedInline\n   \n   ::\n     \n     from inline_ordering.admin import OrderableStackedInline\n     \n     \n     class ImageInline(OrderableStackedInline):\n    \n       model = Image \n     \n     \n     class GalleryAdmin(ModelAdmin):\n         \n         model = Gallery\n         inlines = (ImageInline, )\n\n2. Setup your model to inherit after Orderable\n   \n   ::\n   \n     from inline_ordering.models import Orderable\n     \n     class Image(Orderable):\n       src = models.ImageField(upload_to='gallery/images')\n       title = models.CharField(max_length=255)\n       alt = models.TextField()\n     \n     class Meta(Orderable.Meta):\n       pass\n    \n   As ordering column was named ``inline_ordering_position``, avoid using\n   this name in your model.\n\n   The Meta class declaration is NOT necessary - add it only if you need to set\n   your own meta attributes. \n    \n3. Make ``inline_ordering.js`` accessible over HTTP\n\n   Since Django 1.3, there is a `staticfiles app`_ that django-inline-ordering is \n   aware of. Just run ``manage.py collectstatic`` to copy/symlink media files.\n   \n   The simplest way, back in Django 1.2, was to copy\n   ``media/inline_ordering.js`` to your ``MEDIA_ROOT``.\n\n   If you however believe that would make a mess, take advantage of the \n   'INLINE_ORDERING_JS' setting and set it to a location which should be requested \n   when accessing orderable inlines:\n\n   ``INLINE_ORDERING_JS = STATIC_URL + '/js/third_party/inline_ordering.js'``\n\n.. _staticfiles app: http://docs.djangoproject.com/en/1.3/ref/contrib/staticfiles/\n\nKnown issues\n------------\n\n1. Reordering won't work for new records until saved. This needs a onchange \n   handler for the record form or some model refactoring. \n\n2. At this point there is no support for tabular inlines. If you would like to \n   approach this problem, fork the project on Github.\n\nDevelopment\n-----------\n\nA simple test project has been added in fdc2189 under tests/testproject. Use \ntools/buildenv.sh to build a virtualenv for development and syncdb to create \nnecessary models and admin permissions.\n\nVersion 1.0.1 is likely to be the last one, as I'm planning to release a new\nlibrary to support ordering in Django admin both of inlines as well as on the\nchange list. \n\nKudos\n-----\nsimon for http://djangosnippets.org/snippets/1053/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/centralniak",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-inline-ordering",
    "package_url": "https://pypi.org/project/django-inline-ordering/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-inline-ordering/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/centralniak"
    },
    "release_url": "https://pypi.org/project/django-inline-ordering/1.0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django app to ease ordering of related data - enable Drag&Drop ordering in admin with just a few LOC",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789872,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f9e083df266f5fdfe5c5f1dcdbd49b8a614e0476fb5a3971b34f5a01fb8bca4",
        "md5": "428789238206c2112cac8914dc1c526d",
        "sha256": "cf097646c6b100f227bdf929913c230ffbc93cd400b063a5d003343b324ae96b"
      },
      "downloads": -1,
      "filename": "django-inline-ordering-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "428789238206c2112cac8914dc1c526d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7368,
      "upload_time": "2012-06-29T15:56:47",
      "upload_time_iso_8601": "2012-06-29T15:56:47.675048Z",
      "url": "https://files.pythonhosted.org/packages/3f/9e/083df266f5fdfe5c5f1dcdbd49b8a614e0476fb5a3971b34f5a01fb8bca4/django-inline-ordering-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}