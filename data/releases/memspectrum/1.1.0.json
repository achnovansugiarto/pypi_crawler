{
  "info": {
    "author": "Alessandro Martini, Walter Del Pozzo",
    "author_email": "martini.alessandr@gmail.com,walter.delpozzo@ligo.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "memspectrum\n===========\n\n**Authors** Alessandro Martini, Stefano Schmidt, Walter del Pozzo\n\n**email** martini.alessandr@gmail.com\n\n**Copyright** Copyright (C) 2020 Alessandro Martini\n\n**Licence** CC BY 4.0\n\n**Version** 1.1.0\n\nMAXIMUM ENTROPY ESTIMATION ALGORITHM FOR FAST PSD COMPUTATION\n=============================================================\n\n``memspectrum`` is a package for the computation of power spectral densities of a time series. \nIt implements a Fast verions of Burg method of Maximum Entropy Spectral Analysis.\nThe method is fast and reliable and provides better performance than other standard methods.\n \nThe computation of the power spectral density requires solving the Levinson recursion for the \nforward prediction error coefficients a_k.\nThe knowledge of such coefficients allows to characterize the observed process in terms of \nan autoregressive process of order p (AR(p)), being p + 1 the lenght of the a_k array. Together\nwith a_k coefficients a P coefficient is estimated, and is to be interpreted as the variance of \nwhite noise component for the process. \nThe computation of these quantities allow to perform high quality forecast for the time series.\nThe estimate of the autoregressive order is via a second class, that implements several methods\navailable in literature. \n\nUsage of memspectrum\n====================\n\nTo get the PSD computed, the following steps are required\n\n+ Import the data\n+ Call ``MESA`` class passing data as argument\n\n::\n\n\tfrom memspectrum import MESA\n\tm = MESA()\n\n+ Compute the coefficients via the ``solve()`` method: MANDATORY for further computations \n\n::\n\n\tm.solve(data)\n\n+ At this point you can compute the spectrum and forecast\n\n::\n\n\tm.spectrum(dt)\n\tm.forecast(data)\n\nSinusoid example \n================\nTo compute (and plot) the spectrum of a (noisy) sinusoidal signal:\n::\n\n\tfrom memspectrum import MESA \n\timport numpy as np\n\nGenerating the data: \n::\n\n\tN, dt = 1000, .01  #Number of samples and sampling interval\n\ttime = np.arange(0, N) * dt\n\tfrequency = 2  \n\tdata = np.sin(2 * np.pi * frequency * time) + np.random.normal(.4, size = 1000) \n\tplt.plot(time, data, color = 'k') \n\t\n.. image:: https://raw.githubusercontent.com/martini-alessandro/Maximum-Entropy-Spectrum/main/memspectrum_package/ReadMeFigures/Data.jpeg\n   :width: 700px\n   \n   \n   \nSolving MESA is needed to compute PSD or forecast. \n::\n\n\tM = MESA() \n\tM.solve(data) \n\t\nThe spectrum can be computed on sampling frequencies (automatically generated) or on \nsome given interval \n::\n\n\tspectrum, frequencies = M.spectrum(dt)  #Computes on sampling frequencies \n\tuser_frequencies = np.linspace(1.5, 2.5)\n\tuser_spectrum = M.spectrum(dt, user_frequencies) #Computes on desired window\n\t\nPlotting the two the following is obtained: \n\n.. image:: https://raw.githubusercontent.com/martini-alessandro/Maximum-Entropy-Spectrum/main/memspectrum_package/ReadMeFigures/Spectrum.jpeg\n   :width: 700px\n   \n   \n   \nIt can also be used to perform forecasting. For example, we consider the first 900 points \nof the data and try to infer the upcoming signal. 1000 simulations of 100 points are performed.\nReal observed data are compared with median estimate and 90% Credibility regions \n::\n\n\tM = MESA() \n\tM.solve(data[:-100]) \n\tforecast = M.forecast(data[:-100], length = 100, number_of_simulations = 1000, include_data = False) \n\tmedian = np.median(forecast, axis = 0) #Ensemble median \n\tp5, p95 = np.percentile(forecast, (5, 95), axis = 0) #90% credibility boundaries\n\t\n\tplt.plot(time[:-100], data[:-100], color = 'k')\n\tplt.fill_between(time[-100:], p5, p95, color = 'b', alpha = .5, label = '90% Cr.') \n\tplt.plot(time[-100:], data[-100:], color = 'k', linestyle = '-.', label = 'Observed data') \n\tplt.plot(time[-100:], median, color = 'r', label = 'median estimate') \n\t \n \n\nThe forecast result is: \n\n.. image:: https://raw.githubusercontent.com/martini-alessandro/Maximum-Entropy-Spectrum/main/memspectrum_package/ReadMeFigures/Forecast.jpeg\n   :width: 700px\n\n\nGenerating data from PSD\n============================\nmemspectrum.generateTimeSeries provides a function that construct a time-series with a user-given power \n<<<<<<< HEAD\nspectral density. It can be called as \n:: \n=======\nspectral density. It can be called as :: \n>>>>>>> af7984f4cf9ef4ad7b528e26a5fd54e6ccbfb4d4\n\n\tfrom memspectrum.generateTimeSerie import generate_data\n\tf, psd = import wanted psd and frequency array \n\ttime, time_series, frequency, frequency_series, psd = generate_data(f, psd, T, sampling_rate)\n\t\nT represent the time length of the observation and sampling rate is equivalent to 1 / dt, with dt the sampling interval\n \n\nInstallation & documentation\n============================\nTo install the package: ::\n\n\tpip install memspectrum\n\nIt requires ``numpy``.\n\nOn the GitHub repository, a number of examples are available to the interested user:\n\n* `gwstrain.py <https://github.com/martini-alessandro/Maximum-Entropy-Spectrum/blob/main/examples/gwstrain.py>`_: computes the PSD on a piece of gravitational waves data and perform some forecasting\n* `sunspots.py <https://github.com/martini-alessandro/Maximum-Entropy-Spectrum/blob/main/examples/sunspots.py>`_: using data from sunspots, it uses memspectrum to find an autoregressive process which describes them and forecast\n* `sound_MESA.py <https://github.com/martini-alessandro/Maximum-Entropy-Spectrum/blob/main/examples/sound_MESA.py>`_: given an input audio (wav) file reproducing the sound of a waterfall, it computes the PSD and generate a synthetic noise, resembling the original one.\n\nFor more advanced use or for more information, please refer to the code documentation: ::\n\n\timport memspectrum\n\thelp(memspectrum)\n\thelp(memspectrum.<function_name>)\n\nFor full source code (and much more) see: https://github.com/martini-alessandro/Maximum-Entropy-Spectrum",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/martini-alessandro/Maximum-Entropy-Spectrum/",
    "keywords": "",
    "license": "CC by 4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "memspectrum",
    "package_url": "https://pypi.org/project/memspectrum/",
    "platform": "",
    "project_url": "https://pypi.org/project/memspectrum/",
    "project_urls": {
      "Homepage": "https://github.com/martini-alessandro/Maximum-Entropy-Spectrum/"
    },
    "release_url": "https://pypi.org/project/memspectrum/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "maximum entropy spectral analysis",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10293951,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2155f544711e984c5d7a7500c1a99b599006b92cd6653fb79f5dff18105d14d0",
        "md5": "124f7ae84a62a98b7190412a3a50d1c7",
        "sha256": "390092a6e2f2b7747cfd914aa51776cb2fd0071042c7e3b163ec8b67b271edf0"
      },
      "downloads": -1,
      "filename": "memspectrum-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "124f7ae84a62a98b7190412a3a50d1c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1517098,
      "upload_time": "2021-04-01T09:28:25",
      "upload_time_iso_8601": "2021-04-01T09:28:25.581225Z",
      "url": "https://files.pythonhosted.org/packages/21/55/f544711e984c5d7a7500c1a99b599006b92cd6653fb79f5dff18105d14d0/memspectrum-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}