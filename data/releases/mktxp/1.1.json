{
  "info": {
    "author": "Arseniy Kuznetsov",
    "author_email": "k.arseniy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: BSD :: FreeBSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Topic :: System",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "\n![License](https://img.shields.io/badge/License-GNU%20GPL-blue.svg)\n![Language](https://img.shields.io/badge/python-v3.6-blue)\n![License](https://img.shields.io/badge/mikrotik-routeros-orange)\n![License](https://img.shields.io/badge/prometheus-exporter-blueviolet)\n\n\n## Description\nMKTXP is a Prometheus Exporter for Mikrotik RouterOS devices.\\\nIt gathers and exports a rich set of metrics across multiple routers, all easily configurable via built-in CLI interface. \n\nApart from exporting to Prometheus, MKTXP can also print selected metrics directly on the command line (see an example below).\n\nFor effortless visualization of the RouterOS metrics exported to Prometheus, MKTXP comes with a dedicated [Grafana dashboard](https://grafana.com/grafana/dashboards/13679):\n\n<img width=\"32%\" alt=\"1\" src=\"https://user-images.githubusercontent.com/5028474/211141785-3d71df65-28cb-45fa-bd22-70022f40f162.png\"> <img width=\"32%\" alt=\"2\" src=\"https://user-images.githubusercontent.com/5028474/211141871-30b409fe-5c77-4616-9cc6-c0556432cfea.png\"> <img width=\"32%\" alt=\"3\" src=\"https://user-images.githubusercontent.com/5028474/211141793-61bee869-9125-4b74-a5b4-a02f0f82cc6d.png\">\n\n\n\n\n#### Requirements:\n- [Python 3.6.x](https://www.python.org/downloads/release/python-360/) or later\n\n- Supported OSs:\n   * Linux   \n   * Mac OSX\n   * FreeBSD\n\n- Mikrotik RouterOS device(s)\n\n- Optional: \n   * [Prometheus](https://prometheus.io/docs/prometheus/latest/installation/)\n   * [Grafana](https://grafana.com/docs/grafana/latest/installation/)\n   * [Docker](https://docs.docker.com/) / [Docker Compose](https://docs.docker.com/compose/)\n\n\n## Install:\nThere are multiple ways to install this project, from a standalone app to a [fully dockerized monitoring stack](https://github.com/akpw/mktxp-stack). \n- from [PyPI](https://pypi.org/project/mktxp/): `‚ùØ pip install mktxp`\n\n- latest from source repository: `‚ùØ pip install git+https://github.com/akpw/mktxp`\n\n- from [Docker image](https://github.com/akpw/mktxp/pkgs/container/mktxp) : `‚ùØ docker pull ghcr.io/akpw/mktxp:latest`\n\n- with [MKTXP Stack](https://github.com/akpw/mktxp-stack): a ready-to-go MKTXP monitoring stack\n\n\n## Getting started\nTo get started with MKTXP, you need to edit its main configuration file. This essentially involves adding your Mikrotik devices ip addresses & authentication info, optionally modifying various settings to specific needs. \n\nThe default configuration file comes with a sample configuration, making it easy to copy / edit parameters as needed:\n```\n[Sample-Router]\n    enabled = False         # turns metrics collection for this RouterOS device on / off\n    \n    hostname = localhost    # RouterOS IP address\n    port = 8728             # RouterOS IP Port\n    \n    username = username     # RouterOS user, needs to have 'read' and 'api' permissions\n    password = password\n    \n    use_ssl = False                 # enables connection via API-SSL servis\n    no_ssl_certificate = False      # enables API_SSL connect without router SSL certificate\n    ssl_certificate_verify = False  # turns SSL certificate verification on / off   \n\n    installed_packages = True       # Installed packages\n    dhcp = True                     # DHCP general metrics\n    dhcp_lease = True               # DHCP lease metrics\n    connections = True              # IP connections metrics\n    pool = True                     # Pool metrics\n    interface = True                # Interfaces traffic metrics\n    \n    firewall = True                 # IPv4 Firewall rules traffic metrics\n    ipv6_firewall = False           # IPv6 Firewall rules traffic metrics\n    ipv6_neighbor = False           # Reachable IPv6 Neighbors\n\n    poe = True                      # POE metrics\n    monitor = True                  # Interface monitor metrics\n    netwatch = True                 # Netwatch metrics\n    public_ip = True                # Public IP metrics\n    route = True                    # Routes metrics\n    wireless = True                 # WLAN general metrics\n    wireless_clients = True         # WLAN clients metrics\n    capsman = True                  # CAPsMAN general metrics\n    capsman_clients = True          # CAPsMAN clients metrics    \n\n    user = True                     # Active Users metrics\n    queue = True                    # Queues metrics\n    \n    remote_dhcp_entry = None        # An MKTXP entry for remote DHCP info resolution in capsman/wireless\n\n    use_comments_over_names = True  # when available, forces using comments over the interfaces names \n```\n\n#### Local install\nIf you have a local MKTXP installation, you can edit this file with your default system editor directly from mktxp:\n```bash\n‚ùØ mktxp edit\n```\nIn case you prefer a different editor, run the ```edit``` command with its optional `-ed` parameter:\n```\n‚ùØ mktxp edit -ed nano\n```\nObviously, you can do the same via just opening the config file directly:\n```\n‚ùØ nano ~/mktxp/mktxp.conf\n\n```\n\n#### Docker image install\nFor Docker instances, one way is to use a configured mktxp.conf file from a local installation. Alternatively you can create a standalone one in a dedicated folder:\n```\nmkdir mktxp\nnano mktxp/mktxp.conf # copy&edit sample entry(ies) from above\n```\nNow you can mount this folder and run your docker instance with:\n```\ndocker run -v \"$(pwd)/mktxp:/home/mktxp/mktxp/\" -p 49090:49090 -it --rm ghcr.io/akpw/mktxp:latest\n```\n\n#### MKTXP stack install\n[MKTXP Stack Getting Started](https://github.com/akpw/mktxp-stack#install--getting-started) provides similar instructions around editing the mktxp.conf file and, if needed, adding a dedicated API user to your Mikrotik RouterOS devices as mentioned below.\n\nüí° *In the case of usage within a [Docker Swarm](https://docs.docker.com/engine/swarm/), please do make sure to have all settings explicitly set in both the `mktxp.conf` and `_mktxp.conf` files.  Not doing this may cause [issues](https://github.com/akpw/mktxp/issues/55#issuecomment-1346693843) regarding a `read-only` filesystem.*\n\n## Mikrotik Device Config\nFor the purpose of RouterOS device monitoring, it's best to create a dedicated user with minimal required permissions. \\\nMKTXP only needs ```API``` and ```Read```, so at that point you can go to your router's terminal and type:\n```\n/user group add name=mktxp_group policy=api,read\n/user add name=mktxp_user group=mktxp_group password=mktxp_user_password\n```\n\n## A check on reality\nNow let's put some Mikrotik device address / user credentials in the above MKTXP configuration file, and at that point we should already be able to check out on our progress so far. Since MKTXP can output selected metrics directly on the command line with the ````mktxp print```` command, it's easy to do it even without Prometheus or Grafana. \\\nFor example, let's go take a look at some of my smart home CAPsMAN clients:\n```\n ‚ùØ mktxp print -en MKT-GT -cc\nConnecting to router MKT-GT@10.**.*.**\n2021-01-24 12:04:29 Connection to router MKT-GT@10.**.*.** has been established\n\n| dhcp_name            | dhcp_address   | mac_address       |   rx_signal | interface   | ssid   | tx_rate   | rx_rate   | uptime   |\n|----------------------|----------------|-------------------|-------------|-------------|--------|-----------|-----------|----------|\n| Woox Runner          | 10.**.*.**     | 80:*************D |         -64 | LR-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| Woox Office Lamp     | 10.**.*.**     | 80:*************F |         -59 | LR-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| Harmony Hub          | 10.**.*.**     | C8:*************5 |         -46 | LR-2G-1-1   | AKP    | 72 Mbps   | 72 Mbps   | 3 days   |\n| Woox Office Hub      | 10.**.*.**     | DC:*************7 |         -44 | LR-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| Woox Ext Hub         | 10.**.*.**     | DC:*************E |         -44 | LR-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| Amazon Echo          | 10.**.*.**     | CC:*************4 |         -44 | LR-2G-1-1   | AKP    | 72 Mbps   | 72 Mbps   | a day    |\n| Woox Living Room Hub | 10.**.*.**     | DC:*************0 |         -43 | LR-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| JBL View             | 10.**.*.**     | 00:*************D |         -28 | LR-2G-1-1   | AKP    | 144 Mbps  | 117 Mbps  | 7 hours  |\n|                      |                |                   |             |             |        |           |           |          |\n| MBP15                | 10.**.*.**     | 78:*************E |         -53 | GT-5G-1     | AKP5G  | 877 Mbps  | 877 Mbps  | 3 days   |\n|                      |                |                   |             |             |        |           |           |          |\n| Woox Toaster         | 10.**.*.**     | 68:*************B |         -70 | KT-2G-1-1   | AKP    | 72 Mbps   | 54 Mbps   | 3 days   |\n| Woox Kettle          | 10.**.*.**     | B4:*************5 |         -65 | KT-2G-1-1   | AKP    | 65 Mbps   | 54 Mbps   | 2 days   |\n| Woburn White         | 10.**.*.**     | 54:*************6 |         -59 | KT-2G-1-1   | AKP    | 72 Mbps   | 72 Mbps   | 9 hours  |\n| Siemens Washer       | 10.**.*.**     | 68:*************1 |         -57 | KT-2G-1-1   | AKP    | 72 Mbps   | 72 Mbps   | 2 days   |\n| Woburn Black         | 10.**.*.**     | 54:*************8 |         -57 | KT-2G-1-1   | AKP    | 72 Mbps   | 72 Mbps   | 9 hours  |\n| Google Nest Display  | 10.**.*.**     | 1C:*************A |         -49 | KT-2G-1-1   | AKP    | 52 Mbps   | 43 Mbps   | 8 hours  |\n-----------------------  --\nConnected Wifi Devices:  15\n-----------------------  --\n```\nHmmm, that toaster could probably use a better signal... :) \\\nBut let's get back on track and proceed with the business of exporting RouterOS metrics to Prometheus.\n\n\n## Exporting to Prometheus\nFor getting your routers' metrics into an existing Prometheus installation, we basically just need to connect MKTXP to it. \\\nLet's do just that via editing the Prometheus config file: \n```\n‚ùØ nano /etc/prometheus/prometheus.yml\n```\n\nand simply add:\n\n```\n  - job_name: 'mktxp'\n    static_configs:\n      - targets: ['mktxp_machine_IP:49090']\n\n```\n\nAt that point, we should be all ready for running the main `mktxp export` command that will be gathering router(s) metrics as configured above and serving them to Prometheus via a http server on the default port 49090. \\\n````\n‚ùØ mktxp export\nConnecting to router MKT-GT@10.**.*.**\n2021-01-24 14:16:22 Connection to router MKT-GT@10.**.*.** has been established\nConnecting to router MKT-LR@10.**.*.**\n2021-01-24 14:16:23 Connection to router MKT-LR@10.**.*.** has been established\n2021-01-24 14:16:23 Running HTTP metrics server on port 49090\n````\n\n## MKTXP system configuration\nIn case you need more control on how MKTXP is run, it can be done via editing the `_mktxp.conf` file. This allows things like changing the port and other impl-related parameters, enable parallel router fetching and configurable scrapes timeouts, etc. \nAs before, for local installation the editing can be done directly from mktxp:\n```\nmktxp edit -i\n```\n\n```\n[MKTXP]\n    port = 49090                    \n    socket_timeout = 2\n    \n    initial_delay_on_failure = 120\n    max_delay_on_failure = 900\n    delay_inc_div = 5\n\n    bandwidth = True                # Turns metrics bandwidth metrics collection on / off    \n    bandwidth_test_interval = 420   # Interval for colllecting bandwidth metrics\n    minimal_collect_interval = 5    # Minimal metric collection interval\n\n    verbose_mode = False            # Set it on for troubleshooting\n\n    fetch_routers_in_parallel = False   # Set to True if you want to fetch multiple routers parallel\n    max_worker_threads = 5              # Max number of worker threads that can fetch routers (parallel fetch only)\n    max_scrape_duration = 10            # Max duration of individual routers' metrics collection (parallel fetch only)\n    total_max_scrape_duration = 30      # Max overall duration of all metrics collection (parallel fetch only)\n```    \n\n\n## Grafana dashboard\nNow with your RouterOS metrics being exported to Prometheus, it's easy to visualize them with this [Grafana dashboard](https://grafana.com/grafana/dashboards/13679)\n\n\n## Setting up MKTXP to run as a Linux Service\nIf you've installed MKTXP on a Linux system, you can run it with system boot via adding a service. \\\nLet's start with:\n\n\n```\n‚ùØ nano /etc/systemd/system/mktxp.service\n\n```\n\nNow copy and paste the following:\n\n```\n[Unit]\nDescription=MKTXP Exporter\n\n[Service]\nUser=user # the user under which mktxp was installed\nExecStart=mktxp export # if mktxp is not at your $PATH, you might need to provide a full path\n\n[Install]\nWantedBy=default.target\n\n```\n\nLet's save and then start the service as well as check on its' status:\n```\n‚ùØ sudo systemctl daemon-reload\n‚ùØ sudo systemctl start mktxp\n‚ùØ sudo systemctl enable mktxp\n\n‚ùØ systemctl status mktxp\n‚óè mktxp.service - MKTXP Mikrotik Exporter to Prometheus\n     Loaded: loaded (/etc/systemd/system/mktxp.service; disabled; vendor preset: enabled)\n     Active: active (running) since Sun 2021-01-24 09:16:44 CET; 2h 44min ago\n     ...\n```\n\n\n## Setting up MKTXP to run as a FreeBSD Service\nIf you've installed MKTXP on a FreeBSD system, you can run it with system boot via adding a service. \\\nLet's start with:\n\n\n```\n‚ùØ nano /usr/local/etc/rc.d/mktxp\n```\n\nNow copy and paste the following:\n\n```\n#!/bin/sh\n\n# PROVIDE: mktxp\n# REQUIRE: DAEMON NETWORKING\n# BEFORE: LOGIN\n# KEYWORD: shutdown\n\n# Add the following lines to /etc/rc.conf to enable mktxp:\n# mktxp_enable=\"YES\"\n#\n# mktxp_enable (bool):    Set to YES to enable mktxp\n#                Default: NO\n# mktxp_user (str):       mktxp daemon user\n#                Default: root\n\n. /etc/rc.subr\n\nname=mktxp\nrcvar=mktxp_enable \n\n: ${mktxp_enable:=\"NO\"}\n: ${mktxp_user:=\"root\"}\n\n# daemon\npidfile=\"/var/run/${name}.pid\"\ncommand=\"/usr/sbin/daemon\"\nmktxp_command=\"/usr/local/bin/mktxp export\"\nprocname=\"daemon\"\ncommand_args=\" -c -f -P ${pidfile} ${mktxp_command}\"\n\nload_rc_config $name \nrun_rc_command \"$1\"\n```\n\nLet's save and then start the service as well as check on its' status:\n```\n‚ùØ sudo sysrc mktxp_enable=\"YES\"\n‚ùØ service mktxp start\n‚ùØ service mktxp status\n\n‚ùØ service mktxp status\nmktxp is running as pid 36704\n```\n\n\n## Description of CLI Commands\n### mktxp commands\n       . MKTXP commands:\n        .. info     Shows base MKTXP info\n        .. edit     Open MKTXP configuration file in your editor of choice        \n        .. print    Displays selected metrics on the command line\n        .. export   Starts collecting metrics for all enabled RouterOS configuration entries\n        .. show   \tShows MKTXP configuration entries on the command line\n\n````\n‚ùØ mktxp -h\nusage: MKTXP [-h] [--cfg-dir CFG_DIR] {info, edit, export, print, show, } ...\n\nPrometheus Exporter for Mikrotik RouterOS\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --cfg-dir CFG_DIR     MKTXP config files directory (optional)\n````\nTo learn more about individual commands, just run it with ```-h```:\nFor example, to learn everything about ````mktxp show````:\n````\n‚ùØ mktxp show -h\nusage: MKTXP show [-h]\n                  [-en ['Sample-Router']]\n                  [-cfg]\nDisplays MKTXP config router entries\noptional arguments:\n  -h, --help            show this help message and exit\n  -en, --entry-name ['Sample-Router']\n                        Config entry name\n  -cfg, --config        Shows MKTXP config files paths\n````  \n\n## Installing Development version\n- Clone the repo, then run: `$ python setup.py develop`\n\n\n**Running Tests**\n- TDB\n- Run via: `$ python setup.py test`\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/akpw/mktxp",
    "keywords": "Mikrotik RouterOS Prometheus Exporter",
    "license": "GNU General Public License v2 (GPLv2)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mktxp",
    "package_url": "https://pypi.org/project/mktxp/",
    "platform": null,
    "project_url": "https://pypi.org/project/mktxp/",
    "project_urls": {
      "Homepage": "https://github.com/akpw/mktxp"
    },
    "release_url": "https://pypi.org/project/mktxp/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Prometheus Exporter for Mikrotik RouterOS devices",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16742942,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0d1e20eaf0f2bdd23cdfbd4f3300c463d5888323052c548a557920417accc9c6",
        "md5": "239b9ff2264d035251ccce9cf97faa26",
        "sha256": "3627b21f48c858737352c2a50f511759a812bf4fcdee4cb670cab01bba6652db"
      },
      "downloads": -1,
      "filename": "mktxp-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "239b9ff2264d035251ccce9cf97faa26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45888,
      "upload_time": "2023-01-18T18:51:36",
      "upload_time_iso_8601": "2023-01-18T18:51:36.064118Z",
      "url": "https://files.pythonhosted.org/packages/0d/1e/20eaf0f2bdd23cdfbd4f3300c463d5888323052c548a557920417accc9c6/mktxp-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}