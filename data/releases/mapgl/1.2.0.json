{
  "info": {
    "author": "Adam Diehl",
    "author_email": "adadiehl@umich.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/mapGL.svg)](https://badge.fury.io/py/mapGL)\n[![Conda](https://img.shields.io/conda/v/bioconda/mapGL)](https://anaconda.org/bioconda/mapGL)\n[![GitHub](https://img.shields.io/github/license/adadiehl/mapGL)](https://github.com/adadiehl/mapGL/blob/master/LICENSE)\n<br/>\n\n |Host | Downloads |\n |-----|-----------|\n |PyPI |[![Downloads](https://pepy.tech/badge/mapgl)](https://pepy.tech/project/mapgl)|\n |conda|[![Conda](https://img.shields.io/conda/dn/bioconda/mapGL)](https://anaconda.org/bioconda/mapGL)|\n\n\n# mapGL\n## Prediction of lineage-specific gain and loss of genomic sequence elements based on phylogenetic maximum parsimony.\n\n\nLabel genomic regions as orthologous, gained in the query species, or lost in\nthe target species, based on inferred presence/absence in the most-recent\ncommon ancestor (MRCA). Chained alignment files are used to map features from\nquery to target and one or more outgroup species. Features that map directly from\nquery to target are labeled as orthologs, and ortholgous coordinates in the\ntarget species are given in the output. Non-mapping features are assigned as\ngains or losses based on a maximum-parsimony algorithm predicting presence\nor absence in the MRCA.\n\nBased on bnMapper.py, by Ogert Denas (James Taylor lab):\n  * https://github.com/bxlab/bx-python/blob/master/scripts/bnMapper.py\n  * https://travis-ci.org/bxlab/bx-python\n\n## Dependencies\nnumpy\nbx-python\ncython\nsix\n\n## Usage\n\n```mapGL.py [-h] [-o FILE] [-t FLOAT] [-g GAP] [-v {info,debug,silent}] [-k] input tree qname tname alignments [alignments ...] ```\n\n## Required Arguments\n\n  | Argument | Description |\n  |---|---|\n  | __input__ | Input regions to process. Should be in standard bed format. Only the first four bed fields will be used. |\n  | __tree__ | Phylogenetic tree describing relationships of query and target species to outgroups. Must be in standard Newick format. Branch lengths are optional, and will be ignored. |\n  | __qname__ | Name of the query species. Regions from this species will be mapped to target species coordinates. |\n  | __tname__ | Name of the target species. Regions from the query species will be mapped to coordinates from this species. |\n  | __alignments__ | Alignment files (.chain or .pkl): One for the target species and one per outgroup species. Files should be named according to the convention: qname.tname[...].chain.gz, where qname is the query species name and tname is the name of the target/outgroup species. Names used for qname and tname must match names used in the phylogenetic tree. |\n\n## Options\n\n  | Option | Description |\n  |---|---|\n  | __-h, --help__ | Show help message and exit. |\n  | __-o FILE, --output FILE__ | Output file. (default: stdout) |\n  | __-t FLOAT, --threshold FLOAT__ | Mapping threshold i.e., |elem| * threshold <= |mapped_elem|. Default = 0.0 -- equivalent to accepting a single-base overlap. On the other end of the spectrum, setting this value to 1 is equivalent to only accepting full-length overlaps. (default: 0.0) |\n  | __-g GAP, --gap GAP__ | Ignore elements with an insertion/deletion of this or bigger size. Ignore elements with an insertion/deletion of this or bigger size. Using the default value (-1) will allow gaps of any size. (default: -1) |\n  | __-v {info,debug,silent}, --verbose {info,debug,silent}__ | Verbosity level (default: info) |\n  | __-d, --drop_split__ | Follow the bnMapper convention of silently dropping elements that span multiple chains, rather than the liftOver mapping convention for split alignments: keep elements that span multiple chains and report the longest aligned segment. This is not recommended, as it may lead to spurious gain/loss predictions for orthologous elements that happen to be split across chains due to chromosomal rearrangements, etc... (default: False) |\n  | __-i {BED,narrowPeak}, --in_format__ {BED,narrowPeak} | Input file format. (default: BED) |\n  | __-f, --full_labels__ | Predict gain/loss events on the whole tree, not just branches leading to query and target species. (default: False) |\n  | __-n, --no_prune__ | Do not use pruned tree to resolve ambiguous gain/loss predictions. Instead, these will be labelled 'ambiguous'. (default: False) |\n## Output\n\nPredictions are reported in tab-delimited format with the first four columns following the BED4 convention. The predicted evolutionary history (i.e., ortholog, gain in query, or loss in target) is reported in the \"status\" column. The final three columns contain the mapped location, in target coordinates, of mapped (ortholog) elements.\n\n| Column | Description |\n|---|---|\n| __chrom__ | Chromosome on which the query element is located. |\n| __start__ | Start position on query chromosome. |\n| __end__ | End position on query chromosome. |\n| __name__ | Element name or ID. |\n| __peak__ | Peak location (narrowPeak input) or element midpoint (BED input) |\n| __status__ | Predicted phylogenetic history: __ortholog__, __gain_qname__, __loss_tname__, or __ambiguous__, if --no_prune is used. If __--full_labels__ is used, this may include additional loss/gain events on other branches, in a comma-delimited list format. |\n| __mapped chrom__ | For mapped (ortholog) elements, the chromosome on which the mapped element is located, in target coordinates. |\n| __mapped start__ | For mapped (ortholog) elements, the start position on the target chromosome on which the mapped element is located. |\n| __mapped end__ | For mapped (ortholog) elements, the end position on the target chromosome on which the mapped element is located. |\n| __mapped_peak__ | For mapped (ortholog) elements, the mapped peak position (narrowPeak input) or mapped element midpoint (BED input). |\n\n## Citation\nMapGL: Inferring evolutionary gain and loss of short genomic sequence features by phylogenetic maximum parsimony\nAdam G Diehl, Alan P Boyle\nbioRxiv 827907; doi: https://doi.org/10.1101/827907\nhttps://www.biorxiv.org/content/10.1101/827907v1\n\nCopyright 2018, Adam Diehl (adadiehl@umich.edu), Boyle Lab, University of Michigan\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adadiehl/mapGL",
    "keywords": "phylogenetics,evolution,ancestral reconstruction",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mapGL",
    "package_url": "https://pypi.org/project/mapGL/",
    "platform": "",
    "project_url": "https://pypi.org/project/mapGL/",
    "project_urls": {
      "Homepage": "https://github.com/adadiehl/mapGL"
    },
    "release_url": "https://pypi.org/project/mapGL/1.2.0/",
    "requires_dist": [
      "numpy",
      "six",
      "bx-python"
    ],
    "requires_python": "",
    "summary": "Prediction of lineage-specific gain and loss of sequence elements using phylogenetic maximum parsimony.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7707293,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9a0b62ccfba3c31cc2d82ad452510bf159182692dfeae751da808432c04381a",
        "md5": "01253dc918d88b19a17f3e4439a0fd21",
        "sha256": "4f9b54956fad4b84fdc63b0531ed914164d477fc8ee993c13f277f467c96669a"
      },
      "downloads": -1,
      "filename": "mapGL-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01253dc918d88b19a17f3e4439a0fd21",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18870,
      "upload_time": "2020-07-08T20:19:12",
      "upload_time_iso_8601": "2020-07-08T20:19:12.058124Z",
      "url": "https://files.pythonhosted.org/packages/c9/a0/b62ccfba3c31cc2d82ad452510bf159182692dfeae751da808432c04381a/mapGL-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "610e8ba5b046f09ea0c0207c3933132c60ea8331c37b34fbee16ae13885e6fe7",
        "md5": "f62fb492c317ca08d36c78e1e9159a74",
        "sha256": "abac187a886b88b615688d5df22a75db76aadaae5414f87a74483659a4e91058"
      },
      "downloads": -1,
      "filename": "mapGL-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f62fb492c317ca08d36c78e1e9159a74",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20452,
      "upload_time": "2020-07-08T20:19:13",
      "upload_time_iso_8601": "2020-07-08T20:19:13.064139Z",
      "url": "https://files.pythonhosted.org/packages/61/0e/8ba5b046f09ea0c0207c3933132c60ea8331c37b34fbee16ae13885e6fe7/mapGL-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}