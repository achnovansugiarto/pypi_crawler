{
  "info": {
    "author": "Tiphaine LAURENT",
    "author_email": "tip.lau@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django_APIView\n\nImplement a base generic view for handling model RESTful endpoints\n\n## Usage\n\n```py\n# models.py\n\nfrom django.db import models\n\nfrom django_modelapiview import JSONMixin\n\nclass MyModel(JSONMixin, models.Model):\n    \"\"\"\n    Declare your model as you usually do but\n    add a json_fields list\n    \"\"\"\n\n    json_fields:list[str] = ['text', 'image', 'fk', 'fk_reverse', 'm2m', 'my_method']\n\n    text = models.TextField()\n    image = models.ImageField()\n\n    fk = models.ForeignKey(...)\n    # fk_reverse\n    m2m = models.ManyToManyField(...)\n\n    def my_method(self):\n        return \"my custom value\"\n```\n\n```py\n# views.py\n\nfrom django_modelapiview import APIView\n\nfrom .models import MyModel\n\nclass MyView(APIView):\n    # Required\n    model:JSONMixin = MyModel # Your model\n    route:str = \"mymodels\" # The url to access your collection\n\n    # Optional\n    queryset:QuerySet = MyModel.objects.all() # A custom base queryset (will be affected by query filters)\n    singular_name:str = \"my model\" # Singular name of your model for reason message\n    plural_name:str = \"my models\" # Plural name of your model for reason message\n    http_method_names:list[str] = ['head', 'get', 'patch', 'post'] # The list of HTTP method names that this view will accept.\n    enforce_authentification:bool = True # Should this model be restricted with Token access\n    query_parameters:list[tuple[str, Callable[[QuerySet, object], QuerySet]]] = [\n        ('order_by', lambda queryset, field_names: queryset.order_by(*field_names.split(\",\")) if field_names else queryset),\n        ('limit', lambda queryset, limit: queryset[:int(limit)] if limit else queryset), # Should be last since sliced QuerySet can't be filtered anymore\n    ]\n```\n\n```py\n# urls.py\n\nfrom django.urls import path, include\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", include(\"django_routeview\")), # Django RouteView are used as based class for APIView in order to automatically register them\n]\n```\n\n## Using base views\n\nDjango ModelAPIView provides 2 base views:\n* LoginView: to handle authentification (using the default Django authentification system)\n* URLsView: to list the urls availables\n\n### Usage\n\n```py\n# urls.py\n\nfrom django.urls import path\n\nfrom django_modelapiview.views import LoginView, URLsView\n\nurlpatterns = [\n    ...\n    path(\"login\", LoginView.as_view(), name=\"login\"),\n    path(\"\", URLsView.as_view(), name=\"urls\")\n]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TiphaineLAURENT/Django_APIView",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-modelapiview",
    "package_url": "https://pypi.org/project/django-modelapiview/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-modelapiview/",
    "project_urls": {
      "Homepage": "https://github.com/TiphaineLAURENT/Django_APIView"
    },
    "release_url": "https://pypi.org/project/django-modelapiview/1.4.1/",
    "requires_dist": [
      "Django (>=3.1)",
      "django-routeview (>=1.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "An APIView to handles its model endpoints",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9297898,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b713346449cf68a4972adb532193dea2e682d56976f41ece0175ec263298a88",
        "md5": "679f637ef223aee71c95e55facd010ee",
        "sha256": "1a62dd2fe5bbf362530364091f176ff5bff2bf5ecc8bacc31767abd946170b5c"
      },
      "downloads": -1,
      "filename": "django_modelapiview-1.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "679f637ef223aee71c95e55facd010ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10202,
      "upload_time": "2020-09-09T17:58:20",
      "upload_time_iso_8601": "2020-09-09T17:58:20.602787Z",
      "url": "https://files.pythonhosted.org/packages/4b/71/3346449cf68a4972adb532193dea2e682d56976f41ece0175ec263298a88/django_modelapiview-1.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2a1ef7ce320af526117d3dd615e616557cf4304903cd442546a0248f9173ecd",
        "md5": "57d76b2d7d056c1e7bc134e7d93bbd34",
        "sha256": "31e46b48c6770d125031ae445a7f55d3f008204eb6172e705960008040632fdd"
      },
      "downloads": -1,
      "filename": "django_modelapiview-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "57d76b2d7d056c1e7bc134e7d93bbd34",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8789,
      "upload_time": "2020-09-09T17:58:22",
      "upload_time_iso_8601": "2020-09-09T17:58:22.138782Z",
      "url": "https://files.pythonhosted.org/packages/b2/a1/ef7ce320af526117d3dd615e616557cf4304903cd442546a0248f9173ecd/django_modelapiview-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}