{
  "info": {
    "author": "OpenStack",
    "author_email": "openstack-discuss@lists.openstack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: System :: Monitoring"
    ],
    "description": "Team and repository tags\n========================\n\n.. image:: https://governance.openstack.org/tc/badges/monasca-notification.svg\n    :target: https://governance.openstack.org/tc/reference/tags/index.html\n\n.. Change things from this point on\n\nNotification Engine\n===================\n\nThis engine reads alarms from Kafka and then notifies the customer using\nthe configured notification method. Multiple notification and retry\nengines can run in parallel, up to one per available Kafka partition.\nZookeeper is used to negotiate access to the Kafka partitions whenever a\nnew process joins or leaves the working set.\n\nArchitecture\n============\n\nThe notification engine generates notifications using the following\nsteps:\n\n1. Read Alarms from Kafka, with no auto commit. -\n   monasca\\_common.kafka.KafkaConsumer class\n2. Determine notification type for an alarm. Done by reading from mysql. - AlarmProcessor class\n3. Send notification. - NotificationProcessor class\n4. Add successful notifications to a sent notification topic. - NotificationEngine class\n5. Add failed notifications to a retry topic. - NotificationEngine class\n6. Commit offset to Kafka - KafkaConsumer class\n\nThe notification engine uses three Kafka topics:\n\n1. alarm\\_topic: Alarms inbound to the notification engine.\n2. notification\\_topic: Successfully sent notifications.\n3. notification\\_retry\\_topic: Failed notifications.\n\nA retry engine runs in parallel with the notification engine and gives\nany failed notification a configurable number of extra chances at\nsuccess.\n\nThe retry engine generates notifications using the following steps:\n\n1. Read notification json data from Kafka, with no auto commit. - KafkaConsumer class\n2. Rebuild the notification that failed. - RetryEngine class\n3. Send notification. - NotificationProcessor class\n4. Add successful notifications to a sent notification topic. - RetryEngine class\n5. Add failed notifications that have not hit the retry limit back to the retry topic. -\n   RetryEngine class\n6. Discard failed notifications that have hit the retry limit. - RetryEngine class\n7. Commit offset to Kafka. - KafkaConsumer class\n\nThe retry engine uses two Kafka topics:\n\n1. notification\\_retry\\_topic: Notifications that need to be retried.\n2. notification\\_topic: Successfully sent notifications.\n\nFault Tolerance\n---------------\n\nWhen reading from the alarm topic, no committing is done. The committing\nis done only after processing. This allows the processing to continue\neven though some notifications can be slow. In the event of a\ncatastrophic failure some notifications could be sent but the alarms\nhave not yet been acknowledged. This is an acceptable failure mode,\nbetter to send a notification twice than not at all.\n\nThe general process when a major error is encountered is to exit the\ndaemon which should allow the other processes to renegotiate access to\nthe Kafka partitions. It is also assumed that the notification engine\nwill be run by a process supervisor which will restart it in case of a\nfailure. In this way, any errors which are not easy to recover from are\nautomatically handled by the service restarting and the active daemon\nswitching to another instance.\n\nThough this should cover all errors, there is the risk that an alarm or\na set of alarms can be processed and notifications are sent out multiple\ntimes. To minimize this risk a number of techniques are used:\n\n-  Timeouts are implemented for all notification types.\n-  An alarm TTL is utilized. Any alarm older than the TTL is not\n   processed.\n\nOperation\n=========\n\n``oslo.config`` is used for handling configuration options. A sample\nconfiguration file ``etc/monasca/notification.conf.sample`` can be\ngenerated by running:\n\n::\n\n    tox -e genconfig\n\nTo run the service using the default config file location\nof `/etc/monasca/notification.conf`:\n\n::\n\n    monasca-notification\n\nTo run the service and explicitly specify the config file:\n\n::\n\n    monasca-notification --config-file /etc/monasca/monasca-notification.conf\n\nMonitoring\n----------\n\nStatsD is incorporated into the daemon and will send all stats to the\nStatsD server launched by monasca-agent. Default host and port points to\n**localhost:8125**.\n\n-  Counters\n\n   -  ConsumedFromKafka\n   -  AlarmsFailedParse\n   -  AlarmsNoNotification\n   -  NotificationsCreated\n   -  NotificationsSentSMTP\n   -  NotificationsSentWebhook\n   -  NotificationsSentPagerduty\n   -  NotificationsSentFailed\n   -  NotificationsInvalidType\n   -  AlarmsFinished\n   -  PublishedToKafka\n\n-  Timers\n\n   -  ConfigDBTime\n   -  SendNotificationTime\n\nPlugins\n-------\n\nThe following notification plugins are available:\n\n- Email\n- HipChat\n- Jira\n- PagerDuty\n- Slack\n- Webhook\n\nThe plugins can be configured via the Monasca Notification config file. In\ngeneral you will need to follow these steps to enable a plugin:\n\n- Make sure that the plugin is enabled in the config file\n- Make sure that the plugin is configured in the config file\n- Restart the Monasca Notification service\n\nPagerDuty plugin\n----------------\n\nThe PagerDuty plugin supports the PagerDuty v1 Events API. The first step\nis to `configure`_ a service in PagerDuty which uses this API. Once\nconfigured, the service will be assigned an integration key. This key should be\nused as the `ADDRESS` field when creating the notification type, for example:\n\n::\n\n    monasca notification-create pd_notification pagerduty a30d5560c5ce4239a6f52a01a15850ca\n\nThe default settings for the plugin, including the v1 Events API URL should\nbe sufficient to get started, but it is worth checking that the PagerDuty\nEvents v1 API URL matches that provided in the example Monasca Notification\nconfig file.\n\nSlack plugin\n~~~~~~~~~~~~\n\nTo use the Slack plugin you must first configure an incoming `webhook`_\nfor the Slack channel you wish to post notifications to. The notification can\nthen be created as follows:\n\n::\n\n    monasca notification-create slack_notification slack https://hooks.slack.com/services/MY/SECRET/WEBHOOK/URL\n\nNote that whilst it is also possible to use a token instead of a webhook,\nthis approach is now `deprecated`_.\n\nBy default the Slack notification will dump all available information into\nthe alert. For example, a notification may be posted to Slack which looks\nlike this:\n\n::\n\n    {\n      \"metrics\":[\n         {\n            \"dimensions\":{\n               \"hostname\":\"operator\"\n            },\n            \"id\":null,\n            \"name\":\"cpu.user_perc\"\n         }\n      ],\n      \"alarm_id\":\"20a54a65-44b8-4ac9-a398-1f2d888827d2\",\n      \"state\":\"ALARM\",\n      \"alarm_timestamp\":1556703552,\n      \"tenant_id\":\"62f7a7a314904aa3ab137d569d6b4fde\",\n      \"old_state\":\"OK\",\n      \"alarm_description\":\"Dummy alarm\",\n      \"message\":\"Thresholds were exceeded for the sub-alarms: count(cpu.user_perc, deterministic) >= 1.0 with the values: [1.0]\",\n      \"alarm_definition_id\":\"78ce7b53-f7e6-4b51-88d0-cb741e7dc906\",\n      \"alarm_name\":\"dummy_alarm\"\n    }\n\nThe format of the above message can be customised with a Jinja template. All fields\nfrom the raw Slack message are available in the template. For example, you may\nconfigure the plugin as follows:\n\n::\n\n    [notification_types]\n    enabled = slack\n\n    [slack_notifier]\n    message_template = /etc/monasca/slack_template.j2\n    timeout = 10\n    ca_certs = /etc/ssl/certs/ca-bundle.crt\n    insecure = False\n\nWith the following contents of `/etc/monasca/slack_template.j2`:\n\n::\n\n    {{ alarm_name }} has triggered on {% for item in metrics %}host {{ item.dimensions.hostname }}{% if not loop.last %}, {% endif %}{% endfor %}.\n\nWith this configuration, the raw Slack message above would be transformed\ninto:\n\n::\n\n   dummy_alarm has triggered on host(s): operator.\n\nFuture Considerations\n=====================\n\n- More extensive load testing is needed:\n\n   - How fast is the mysql db? How much load do we put on it. Initially I\n     think it makes most sense to read notification details for each alarm\n     but eventually I may want to cache that info.\n   - How expensive are commits to Kafka for every message we read? Should\n     we commit every N messages?\n   - How efficient is the default Kafka consumer batch size?\n   - Currently we can get ~200 notifications per second per\n     NotificationEngine instance using webhooks to a local http server. Is\n     that fast enough?\n   - Are we putting too much load on Kafka at ~200 commits per second?\n\n.. _webhook: https://api.slack.com/incoming-webhooks\n\n.. _deprecated: https://api.slack.com/custom-integrations/legacy-tokens\n\n.. _configure: https://support.pagerduty.com/docs/services-and-integrations#section-events-api-v1\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://opendev.org/openstack/monasca-notification",
    "keywords": "openstack monitoring email",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monasca-notification",
    "package_url": "https://pypi.org/project/monasca-notification/",
    "platform": "",
    "project_url": "https://pypi.org/project/monasca-notification/",
    "project_urls": {
      "Homepage": "https://opendev.org/openstack/monasca-notification"
    },
    "release_url": "https://pypi.org/project/monasca-notification/3.0.0/",
    "requires_dist": [
      "PyYAML (>=3.12)",
      "debtcollector (>=1.2.0)",
      "jira (>=1.0.3)",
      "keystoneauth1 (>=3.4.0)",
      "monasca-common (>=2.16.0)",
      "monasca-statsd (>=1.4.0)",
      "oslo.config (>=5.2.0)",
      "oslo.log (>=3.36.0)",
      "oslo.serialization (>=2.18.0)",
      "pbr (!=2.1.0,>=2.0.0)",
      "requests (>=2.14.2)",
      "simplejson (>=3.8.1)",
      "six (>=1.10.0)",
      "Jinja2 (>=2.10); extra == 'jira_plugin'",
      "Babel (!=2.4.0,>=2.3.4); extra == 'test'",
      "PyMySQL (>=0.7.6); extra == 'test'",
      "SQLAlchemy (!=1.1.5,!=1.1.6,!=1.1.7,!=1.1.8,>=1.0.10); extra == 'test'",
      "bandit (!=1.6.0,>=1.1.0); extra == 'test'",
      "coverage (!=4.4,>=4.0); extra == 'test'",
      "docutils (>=0.11); extra == 'test'",
      "hacking (<1.2.0,>=1.1.0); extra == 'test'",
      "oslotest (>=3.2.0); extra == 'test'",
      "psycopg2 (>=2.7.1); extra == 'test'",
      "stestr (>=1.0.0); extra == 'test'",
      "testrepository (>=0.0.18); extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Reads alarms from Kafka and then notifies the customer using their configured notification method.",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17397522,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "938e3b5423cf102a8112c1f438543d11a4427c6d2377b0f58285772edffc8461",
        "md5": "b83c367b89e9a95166f3086fa5c977bb",
        "sha256": "3ae62e1070ac85ec3f6bf2b7db820531ad78a517782f52dbb04bbed717b7d6e9"
      },
      "downloads": -1,
      "filename": "monasca_notification-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b83c367b89e9a95166f3086fa5c977bb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 66068,
      "upload_time": "2020-10-14T10:18:44",
      "upload_time_iso_8601": "2020-10-14T10:18:44.236919Z",
      "url": "https://files.pythonhosted.org/packages/93/8e/3b5423cf102a8112c1f438543d11a4427c6d2377b0f58285772edffc8461/monasca_notification-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee716194e47162a2d31fc9894ba749a87b88dfea68ef0754574c8fdc6fd97608",
        "md5": "a904b135d62120443dcbcc95abae0af4",
        "sha256": "33732702120a9e1e0388ba99d8c920effb80d714d1fd139860a9fe20e1b87f7c"
      },
      "downloads": -1,
      "filename": "monasca-notification-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a904b135d62120443dcbcc95abae0af4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 78024,
      "upload_time": "2020-10-14T10:18:45",
      "upload_time_iso_8601": "2020-10-14T10:18:45.530781Z",
      "url": "https://files.pythonhosted.org/packages/ee/71/6194e47162a2d31fc9894ba749a87b88dfea68ef0754574c8fdc6fd97608/monasca-notification-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}