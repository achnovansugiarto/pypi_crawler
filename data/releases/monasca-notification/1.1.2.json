{
  "info": {
    "author": "Tim Kuhlman",
    "author_email": "tim.kuhlman@hp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Topic :: System :: Monitoring"
    ],
    "description": "# Notification Engine\n\nThis engine reads alarms from Kafka and then notifies the customer using their configured notification method.\n\n# Architecture\nThere are four processing steps separated by queues implemented with python multiprocessing. The steps are:\n\n1. Reads Alarms from Kafka, with no auto commit. - KafkaConsumer class\n2. Determine notification type for an alarm. Done by reading from mysql. - AlarmProcessor class\n3. Send Notification. - NotificationProcessor class\n4. Add sent notifications to Kafka on the notification topic. - SentNotificationProcessor class\n\nThere is also a special processing step, the KafkaStateTracker, that runs in the main thread and keeps track of the\nlast committed message and ones available for commit, it then periodically commits all progress. This handles the\nsituation where alarms that are not acted on are quickly ready for commit but others which are prior to them in the\nkafka order are still in progress. Locking is also handled by this class using zookeeper.\n\nThere are 4 internal queues:\n\n1. alarms - kafka alarms are added to this queue.\n2. notifications - notifications to be sent, grouped by source alarm are added to this queue.\n   Consists of a list of Notification objects.\n3. sent_notifications - notifications that have been sent are added here. Consists of Notification objects.\n4. finished - alarms that are done with processing, either the notification is sent or there was none.\n\n## High Availability\nHA is handled by running multiple notification engines. Only one at a time is active if it dies another can take\nover and continue from where it left. A zookeeper lock file is used to ensure only one running daemon. If needed\nthe code can be modified to use kafka partitions to have multiple active engines working on different alarms.\n\n## Fault Tolerance\nWhen reading from the alarm topic no committing is done. The committing is done only after processing. This allows\nthe processing to continue even though some notifications can be slow. In the event of a catastrophic failure some\nnotifications could be sent but the alarms not yet acknowledged. This is an acceptable failure mode, better to send a\nnotification twice than not at all.\n\nThe general process when a major error is encountered is to exit the daemon which should allow another daemon to take\nover according to the HA strategy. It is also assumed the notification engine will be run by a process supervisor which\nwill restart it in case of a failure. This way any errors which are not easy to recover from are automatically handled\nby the service restarting and the active daemon switching to another instance.\n\nThough this should cover all errors there is risk that an alarm or set of alarms can be processed and notifications\nsent out multiple times. To minimize this risk a number of techniques are used:\n\n- Timeouts are implemented with all notification types.\n- On shutdown uncommitted work is finished up.\n- An alarm TTL is utilized. Any alarm older than the TTL is not processed.\n- A maximum offset lag time is set. The offset is normally only updated if there is a continuous chain of finished\n  alarms. If there is a new offset that arrives yet still a gap it is normally held in reserve. If the maximum lag\n  time has been set and exceeded when a new finished alarm comes in the offset is updated regardless of gaps.\n\n# Operation\nYaml config file by default is in '/etc/monasca/notification.yaml', a sample is in this project.\n\n## Monitoring\nstatsd is incorporated into the daemon and will send all stats to localhost on udp port 8125. In many cases the stats\nare gathered per thread, the thread number is indicated by a -# at the end of the name.\n\n- Counters\n    - ConsumedFromKafka\n    - AlarmsFailedParse\n    - AlarmsFinished\n    - AlarmsNoNotification\n    - AlarmsOffsetUpdated\n    - NotificationsCreated\n    - NotificationsSentSMTP\n    - NotificationsSentFailed\n    - NotificationsInvalidType\n    - PublishedToKafka\n- Timers\n    - ConfigDBTime\n    - SMTPTime\n    - OffsetCommitTime\n\n# Future Considerations\n- Currently I lock the topic rather than the partitions. This effectively means there is only one active notification\n  engine at any given time. In the future to share the load among multiple daemons we could lock by partition.\n- More extensive load testing is needed\n  - How fast is the mysql db? How much load do we put on it. Initially I think it makes most sense to read notification\n    details for each alarm but eventually I may want to cache that info.\n  - I am starting with a single KafkaConsumer and a single SentNotificationProcessor depending on load this may need\n    to scale.\n  - How fast is the state tracker? Do I need to scale or speed that up at all?\n\n# License\n\nCopyright (c) 2014 Hewlett-Packard Development Company, L.P.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n    \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied.\nSee the License for the specific language governing permissions and\nlimitations under the License.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stackforge/monasca-notification",
    "keywords": "openstack monitoring email",
    "license": "Apache",
    "maintainer": null,
    "maintainer_email": null,
    "name": "monasca-notification",
    "package_url": "https://pypi.org/project/monasca-notification/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/monasca-notification/",
    "project_urls": {
      "Homepage": "https://github.com/stackforge/monasca-notification"
    },
    "release_url": "https://pypi.org/project/monasca-notification/1.1.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": null,
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17397522,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f971ce851a2fbda2a29b92f7d6a722afc31bd70ff72d376d9da2f12e46dfba6",
        "md5": "005f23f76c376536d1d439f4b8ff40ae",
        "sha256": "b38e116b2fc343a73d84251afc5d79e5b427e88981aed8dee60315123a46b11c"
      },
      "downloads": -1,
      "filename": "monasca_notification-1.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "005f23f76c376536d1d439f4b8ff40ae",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 25445,
      "upload_time": "2014-10-31T22:12:01",
      "upload_time_iso_8601": "2014-10-31T22:12:01.654287Z",
      "url": "https://files.pythonhosted.org/packages/7f/97/1ce851a2fbda2a29b92f7d6a722afc31bd70ff72d376d9da2f12e46dfba6/monasca_notification-1.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76ffb1aae6ee9fc866c69024b90d134df63309a4e808cd968e44bba9f689df88",
        "md5": "d07a083a3f92d7b93ffc3a731af038b2",
        "sha256": "3b5e610810274e345e5ac5b2997161a313cadba1e0aba24683d8313d9ec4f035"
      },
      "downloads": -1,
      "filename": "monasca-notification-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d07a083a3f92d7b93ffc3a731af038b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22973,
      "upload_time": "2014-10-31T22:11:59",
      "upload_time_iso_8601": "2014-10-31T22:11:59.367466Z",
      "url": "https://files.pythonhosted.org/packages/76/ff/b1aae6ee9fc866c69024b90d134df63309a4e808cd968e44bba9f689df88/monasca-notification-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}