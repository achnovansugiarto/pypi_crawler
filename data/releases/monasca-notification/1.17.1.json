{
  "info": {
    "author": "OpenStack",
    "author_email": "openstack-discuss@lists.openstack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Monitoring"
    ],
    "description": "Team and repository tags\n========================\n\n.. image:: https://governance.openstack.org/tc/badges/monasca-notification.svg\n    :target: https://governance.openstack.org/tc/reference/tags/index.html\n\n.. Change things from this point on\n\nNotification Engine\n===================\n\nThis engine reads alarms from Kafka and then notifies the customer using\nthe configured notification method. Multiple notification and retry\nengines can run in parallel, up to one per available Kafka partition.\nZookeeper is used to negotiate access to the Kafka partitions whenever a\nnew process joins or leaves the working set.\n\nArchitecture\n============\n\nThe notification engine generates notifications using the following\nsteps:\n\n1. Read Alarms from Kafka, with no auto commit. -\n   monasca\\_common.kafka.KafkaConsumer class\n2. Determine notification type for an alarm. Done by reading from mysql. - AlarmProcessor class\n3. Send notification. - NotificationProcessor class\n4. Add successful notifications to a sent notification topic. - NotificationEngine class\n5. Add failed notifications to a retry topic. - NotificationEngine class\n6. Commit offset to Kafka - KafkaConsumer class\n\nThe notification engine uses three Kafka topics:\n\n1. alarm\\_topic: Alarms inbound to the notification engine.\n2. notification\\_topic: Successfully sent notifications.\n3. notification\\_retry\\_topic: Failed notifications.\n\nA retry engine runs in parallel with the notification engine and gives\nany failed notification a configurable number of extra chances at\nsuccess.\n\nThe retry engine generates notifications using the following steps:\n\n1. Read notification json data from Kafka, with no auto commit. - KafkaConsumer class\n2. Rebuild the notification that failed. - RetryEngine class\n3. Send notification. - NotificationProcessor class\n4. Add successful notifications to a sent notification topic. - RetryEngine class\n5. Add failed notifications that have not hit the retry limit back to the retry topic. -\n   RetryEngine class\n6. Discard failed notifications that have hit the retry limit. - RetryEngine class\n7. Commit offset to Kafka. - KafkaConsumer class\n\nThe retry engine uses two Kafka topics:\n\n1. notification\\_retry\\_topic: Notifications that need to be retried.\n2. notification\\_topic: Successfully sent notifications.\n\nFault Tolerance\n---------------\n\nWhen reading from the alarm topic, no committing is done. The committing\nis done only after processing. This allows the processing to continue\neven though some notifications can be slow. In the event of a\ncatastrophic failure some notifications could be sent but the alarms\nhave not yet been acknowledged. This is an acceptable failure mode,\nbetter to send a notification twice than not at all.\n\nThe general process when a major error is encountered is to exit the\ndaemon which should allow the other processes to renegotiate access to\nthe Kafka partitions. It is also assumed that the notification engine\nwill be run by a process supervisor which will restart it in case of a\nfailure. In this way, any errors which are not easy to recover from are\nautomatically handled by the service restarting and the active daemon\nswitching to another instance.\n\nThough this should cover all errors, there is the risk that an alarm or\na set of alarms can be processed and notifications are sent out multiple\ntimes. To minimize this risk a number of techniques are used:\n\n-  Timeouts are implemented for all notification types.\n-  An alarm TTL is utilized. Any alarm older than the TTL is not\n   processed.\n\nOperation\n=========\n\n``oslo.config`` is used for handling configuration options. A sample\nconfiguration file ``etc/monasca/notification.conf.sample`` can be\ngenerated by running:\n\n::\n\n    tox -e genconfig\n\nTo run the service using the default config file location\nof `/etc/monasca/notification.conf`:\n\n::\n\n    monasca-notification\n\nTo run the service and explicitly specify the config file:\n\n::\n\n    monasca-notification --config-file /etc/monasca/monasca-notification.conf\n\nMonitoring\n----------\n\nStatsD is incorporated into the daemon and will send all stats to the\nStatsD server launched by monasca-agent. Default host and port points to\n**localhost:8125**.\n\n-  Counters\n\n   -  ConsumedFromKafka\n   -  AlarmsFailedParse\n   -  AlarmsNoNotification\n   -  NotificationsCreated\n   -  NotificationsSentSMTP\n   -  NotificationsSentWebhook\n   -  NotificationsSentPagerduty\n   -  NotificationsSentFailed\n   -  NotificationsInvalidType\n   -  AlarmsFinished\n   -  PublishedToKafka\n\n-  Timers\n\n   -  ConfigDBTime\n   -  SendNotificationTime\n\nFuture Considerations\n=====================\n\n- More extensive load testing is needed:\n\n   - How fast is the mysql db? How much load do we put on it. Initially I\n     think it makes most sense to read notification details for each alarm\n     but eventually I may want to cache that info.\n   - How expensive are commits to Kafka for every message we read? Should\n     we commit every N messages?\n   - How efficient is the default Kafka consumer batch size?\n   - Currently we can get ~200 notifications per second per\n     NotificationEngine instance using webhooks to a local http server. Is\n     that fast enough?\n   - Are we putting too much load on Kafka at ~200 commits per second?\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openstack/monasca-notification",
    "keywords": "openstack monitoring email",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "monasca-notification",
    "package_url": "https://pypi.org/project/monasca-notification/",
    "platform": "",
    "project_url": "https://pypi.org/project/monasca-notification/",
    "project_urls": {
      "Homepage": "https://github.com/openstack/monasca-notification"
    },
    "release_url": "https://pypi.org/project/monasca-notification/1.17.1/",
    "requires_dist": [
      "PyYAML (>=3.12)",
      "debtcollector (>=1.2.0)",
      "jira (>=1.0.3)",
      "keystoneauth1 (>=3.4.0)",
      "monasca-common (>=2.7.0)",
      "monasca-statsd (>=1.4.0)",
      "oslo.config (>=5.2.0)",
      "oslo.log (>=3.36.0)",
      "pbr (!=2.1.0,>=2.0.0)",
      "requests (>=2.14.2)",
      "six (>=1.10.0)",
      "Jinja2 (>=2.10); extra == 'jira_plugin'",
      "Babel (!=2.4.0,>=2.3.4); extra == 'test'",
      "PyMySQL (>=0.7.6); extra == 'test'",
      "SQLAlchemy (!=1.1.5,!=1.1.6,!=1.1.7,!=1.1.8,>=1.0.10); extra == 'test'",
      "bandit (!=1.6.0,>=1.1.0); extra == 'test'",
      "coverage (!=4.4,>=4.0); extra == 'test'",
      "docutils (>=0.11); extra == 'test'",
      "hacking (<1.2.0,>=1.1.0); extra == 'test'",
      "mock (>=2.0.0); extra == 'test'",
      "oslotest (>=3.2.0); extra == 'test'",
      "psycopg2 (>=2.7.1); extra == 'test'",
      "stestr (>=1.0.0); extra == 'test'",
      "testrepository (>=0.0.18); extra == 'test'",
      "funcsigs (>=1.0.0); (python_version=='2.7' or python_version=='2.6') and extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Reads alarms from Kafka and then notifies the customer using their configured notification method.",
    "version": "1.17.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17397522,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b0a4d30216b7a50b4c275c9f63e310cc4207fa02ba99831636b462583e5f038",
        "md5": "0e49cff8c3bb44719faaa694311f70be",
        "sha256": "2bca829cf640a7e59952aa77efb7f6e296f8f31a05ff8e92d11ddaa445471646"
      },
      "downloads": -1,
      "filename": "monasca_notification-1.17.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e49cff8c3bb44719faaa694311f70be",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 65115,
      "upload_time": "2020-07-24T18:29:34",
      "upload_time_iso_8601": "2020-07-24T18:29:34.467416Z",
      "url": "https://files.pythonhosted.org/packages/4b/0a/4d30216b7a50b4c275c9f63e310cc4207fa02ba99831636b462583e5f038/monasca_notification-1.17.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85a405c070a25ae6024ef9875e8f3352ad4c82954cd03fce17a9e369266e2596",
        "md5": "351055a27c7252909e111e994eaf0724",
        "sha256": "d059f0de203bbda3f0ed919492b52cc23b2187bae38482bdc9a2e7495ba6b415"
      },
      "downloads": -1,
      "filename": "monasca-notification-1.17.1.tar.gz",
      "has_sig": false,
      "md5_digest": "351055a27c7252909e111e994eaf0724",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 69699,
      "upload_time": "2020-07-24T18:29:36",
      "upload_time_iso_8601": "2020-07-24T18:29:36.004769Z",
      "url": "https://files.pythonhosted.org/packages/85/a4/05c070a25ae6024ef9875e8f3352ad4c82954cd03fce17a9e369266e2596/monasca-notification-1.17.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}