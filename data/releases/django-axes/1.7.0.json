{
  "info": {
    "author": "Alex Clark",
    "author_email": "aclark@aclark.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Security",
      "Topic :: System :: Logging"
    ],
    "description": "Django Axes\n===========\n\n.. image:: https://secure.travis-ci.org/django-pci/django-axes.png?branch=master\n    :alt: Build Status\n    :target: http://travis-ci.org/django-pci/django-axes\n\n``django-axes`` is a very simple way for you to keep track of failed login\nattempts, both for the Django admin and for the rest of your site.  The name is\nsort of a geeky pun, since ``axes`` can be read interpreted as:\n\n* \"access\", as in monitoring access attempts\n* \"axes\", as in tools you can use hack (generally on wood).  In this case,\n  however, the \"hacking\" part of it can be taken a bit further: ``django-axes``\n  is intended to help you *stop* people from hacking (popular media\n  definition) your website.  Hilarious, right?  That's what I thought too!\n\n\nRequirements\n============\n\n``django-axes`` requires Django 1.5 or later. The application is intended to\nwork around the Django admin and the regular ``django.contrib.auth``\nlogin-powered pages.\n\n\nInstallation\n============\n\nYou can install the latest stable package running this command::\n\n    $ pip install django-axes\n\nAlso you can install the development version running this command::\n\n    $ pip install -e git+http://github.com/django-pci/django-axes.git#egg=django_axes-dev\n\nDevelopment\n===========\n\nYou can contribute to this project forking it from github and sending pull requests.\n\nRunning tests\n-------------\n\nTests can be run, after you clone the repository and having django installed, like::\n\n    $ PYTHONPATH=$PYTHONPATH:$PWD django-admin.py test axes --settings=axes.test_settings\n\n\nConfiguration\n=============\n\nFirst of all, you must add this project to your list of ``INSTALLED_APPS`` in\n``settings.py``::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'axes',\n        ...\n    )\n\nNext, install the ``FailedLoginMiddleware`` middleware::\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'axes.middleware.FailedLoginMiddleware'\n    )\n\nRun ``python manage.py migrate``.  This creates the appropriate tables in your database\nthat are necessary for operation.\n\nCustomizing Axes\n----------------\n\nYou have a couple options available to you to customize ``django-axes`` a bit.\nThese should be defined in your ``settings.py`` file.\n\n* ``AXES_LOGIN_FAILURE_LIMIT``: The number of login attempts allowed before a\n  record is created for the failed logins.  Default: ``3``\n* ``AXES_LOCK_OUT_AT_FAILURE``: After the number of allowed login attempts\n  are exceeded, should we lock out this IP (and optional user agent)?\n  Default: ``True``\n* ``AXES_USE_USER_AGENT``: If ``True``, lock out / log based on an IP address\n  AND a user agent.  This means requests from different user agents but from\n  the same IP are treated differently.  Default: ``False``\n* ``AXES_COOLOFF_TIME``: If set, defines a period of inactivity after which\n  old failed login attempts will be forgotten. Can be set to a python\n  timedelta object or an integer. If an integer, will be interpreted as a\n  number of hours.  Default: ``None``\n* ``AXES_LOGGER``: If set, specifies a logging mechanism for axes to use.\n  Default: ``'axes.watch_login'``\n* ``AXES_LOCKOUT_TEMPLATE``: If set, specifies a template to render when a\n  user is locked out. Template receives cooloff_time and failure_limit as\n  context variables. Default: ``None``\n* ``AXES_LOCKOUT_URL``: If set, specifies a URL to redirect to on lockout. If\n  both AXES_LOCKOUT_TEMPLATE and AXES_LOCKOUT_URL are set, the template will\n  be used. Default: ``None``\n* ``AXES_VERBOSE``: If ``True``, you'll see slightly more logging for Axes.\n  Default: ``True``\n* ``AXES_USERNAME_FORM_FIELD``: the name of the form field that contains your\n  users usernames. Default: ``username``\n\n* ``AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP``: If ``True`` prevents to login\n  from IP under particular user if attempts limit exceed, otherwise lock out\n  based on IP.\n  Default: ``False``\n* ``AXES_NEVER_LOCKOUT_WHITELIST``: If ``True``, users can always login from\n  whitelisted IP addresses.\n  Default: ``False``\n\n\nUsage\n=====\n\nUsing ``django-axes`` is extremely simple.  Once you install the application\nand the middleware, all you need to do is periodically check the Access\nAttempts section of the admin.\n\nBy default, django-axes will lock out repeated attempts from the same IP\naddress.  You can allow this IP to attempt again by deleting the relevant\n``AccessAttempt`` records in the admin.\n\nYou can also use the ``axes_reset`` management command using Django's\n``manage.py``.\n\n* ``manage.py axes_reset`` will reset all lockouts and access records.\n* ``manage.py axes_reset ip`` will clear lockout/records for ip\n\nIn your code, you can use ``from axes.utils import reset``.\n\n* ``reset()`` will reset all lockouts and access records.\n* ``reset(ip=ip)`` will clear lockout/records for ip\n* ``reset(username=username)`` will clear lockout/records for username\n\nIssues\n======\n\nNot being locked out after failed attempts\n------------------------------------------\n\nYou may find that Axes is not capturing your failed login attempts. It may be that you need to manually add watch_login to your login url.\nFor example, in your urls.py::\n\n    ...\n    from django.contrib.auth.views import login, logout, password_change\n    from axes.decorators import watch_login\n    ...\n    urlpatterns = patterns('',\n        (r'^login/$', watch_login(login), {'template_name': 'auth/login.html'}),\n    ...\n\n\nLocked out without reason\n-------------------------\n\nIt may happen that you have suddenly become locked out without a single failed\nattempt. One possible reason is that you are using some custom login form and the\nusername field is named something different than \"username\", e.g. \"email\". This\nleads to all users attempts being lumped together. To fix this add the following\nto your settings:\n\n    AXES_USERNAME_FORM_FIELD = \"email\"\n\n\nUsing a captcha\n===============\n\nUsing https://github.com/mbi/django-simple-captcha you do the following:\n\n1. Change axes lockout url in ``settings.py``::\n\n    AXES_LOCKOUT_URL = '/locked'\n\n2. Add the url in ``urls.py``::\n\n    url(r'^locked/$', locked_out, name='locked_out'),\n\n3. Create a captcha form::\n\n    class AxesCaptchaForm(forms.Form):\n        captcha = CaptchaField()\n\n4. Create a captcha view for the above url that resets on captcha success and redirects::\n\n    def locked_out(request):\n        if request.POST:\n            form = AxesCaptchaForm(request.POST)\n            if form.is_valid():\n                ip = get_ip_address_from_request(request)\n                reset(ip=ip)\n                return HttpResponseRedirect(reverse_lazy('signin'))\n        else:\n            form = AxesCaptchaForm()\n    \n        return render_to_response('locked_out.html', dict(form=form), context_instance=RequestContext(request))\n\n5. Add a captcha template::\n\n    <form action=\"\" method=\"post\">\n        {% csrf_token %}\n    \n        {{ form.captcha.errors }}\n        {{ form.captcha }}\n    \n        <div class=\"form-actions\">\n            <input type=\"submit\" value=\"Submit\" />\n        </div>\n    </form>\n\nDone.\n\nChanges\n=======\n\n1.7.0 (2016-06-10)\n------------------\n\n- Use render shortcut for rendering LOCKOUT_TEMPLATE\n  [Radosław Luter]\n\n- Added app_label for RemovedInDjango19Warning\n  [yograterol]\n\n- Add iso8601 translator.\n  [mullakhmetov]\n\n- Edit json response. Context now contains ISO 8601 formatted cooloff time\n  [mullakhmetov]\n\n- Add json response and iso8601 tests.\n  [mullakhmetov]\n\n- Fixes issue 162: UnicodeDecodeError on pip install\n  [joeribekker]\n\n- Added AXES_NEVER_LOCKOUT_WHITELIST option to prevent certain IPs from being locked out.\n  [joeribekker]\n\n\n1.6.1 (2016-05-13)\n------------------\n\n- Fixes whitelist check when BEHIND_REVERSE_PROXY\n  [Patrick Hagemeister]\n\n- Made migrations py3 compatible\n  [mvdwaeter]\n\n- Fixing #126, possibly breaking compatibility with Django<=1.7\n  [int-ua]\n\n- Add note for upgrading users about new migration files\n  [kelseyq]\n\n- Fixes #148\n  [camilonova]\n\n- Decorate auth_views.login only once\n  [teeberg]\n\n- Set IP public/private classifier to be compliant with RFC 1918.\n  [SilasX]\n\n- Issue #155. Lockout response status code changed to 403.\n  [Артур Муллахметов]\n\n- BUGFIX: Missing migration\n  [smeinel]\n\n1.6.0 (2016-01-07)\n------------------\n\n- Stopped using render_to_response so that other template engines work\n  [tarkatronic]\n\n- Improved performance & DoS prevention on query2str\n  [tarkatronic]\n\n- Immediately return from is_already_locked if the user is not lockable\n  [jdunck]\n\n- Iterate over ip addresses only once\n  [annp89]\n\n- added initial migration files to support django 1.7 &up. Upgrading users should run migrate --fake-initial after update\n  [ibaguio]\n\n- Add db indexes to CommonAccess model\n  [Schweigi]\n\n1.5.0 (2015-09-11)\n------------------\n\n- Fix #_get_user_attempts to include username when filtering AccessAttempts if AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP is True\n  [afioca]\n\n1.4.0 (2015-08-09)\n------------------\n\n- Send the user_locked_out signal. Fixes #94.\n  [toabi]\n\n1.3.9 (2015-02-11)\n------------------\n\n- Python 3 fix (#104)\n\n1.3.8 (2014-10-07)\n------------------\n\n- Rename GitHub organization from django-security to django-pci to emphasize focus on providing assistance with building PCI compliant websites with Django.\n  [aclark4life]\n\n1.3.7 (2014-10-05)\n------------------\n\n- Explain common issues where Axes fails silently\n  [cericoda]\n\n- Allow for user-defined username field for lookup in POST data\n  [SteveByerly]\n\n- Log out only if user was logged in\n  [zoten]\n\n- Support for floats in cooloff time (i.e: 0.1 == 6 minutes)\n  [marianov]\n\n- Limit amount of POST data logged (#73). Limiting the length of value is not enough, as there could be arbitrary number of them, or very long key names.\n  [peterkuma]\n\n- Improve get_ip to try for real ip address\n  [7wonders]\n\n- Change IPAddressField to GenericIPAddressField. When using a PostgreSQL database and the client does not pass an IP address you get an inet error. This is a known problem with PostgreSQL and the IPAddressField. https://code.djangoproject.com/ticket/5622. It can be fixed by using a GenericIPAddressField instead.\n  [polvoblanco]\n\n- Get first X-Forwarded-For IP\n  [tutumcloud]\n\n- White listing IP addresses behind reverse proxy. Allowing some IP addresses to have direct access to the app even if they are behind a reverse proxy. Those IP addresses must still be on a white list.\n  [ericbulloch]\n\n- Reduce logging of reverse proxy IP lookup and use configured logger. Fixes #76. Instead of logging the notice that django.axes looks for a HTTP header set by a reverse proxy on each attempt, just log it one-time on first module import. Also use the configured logger (by default axes.watch_login) for the message to be more consistent in logging.\n  [eht16]\n\n- Limit the length of the values logged into the database. Refs #73\n  [camilonova]\n\n- Refactored tests to be more stable and faster\n  [camilonova]\n\n- Clean client references\n  [camilonova]\n\n- Fixed admin login url\n  [camilonova]\n\n- Added django 1.7 for testing\n  [camilonova]\n\n- Travis file cleanup\n  [camilonova]\n\n- Remove hardcoded url path\n  [camilonova]\n\n- Fixing tests for django 1.7\n  [Andrew-Crosio]\n\n- Fix for django 1.7 exception not existing\n  [Andrew-Crosio]\n\n- Removed python 2.6 from testing\n  [camilonova]\n\n- Use django built-in six version\n  [camilonova]\n\n- Added six as requirement\n  [camilonova]\n\n- Added python 2.6 for travis testing\n  [camilonova]\n\n- Replaced u string literal prefixes with six.u() calls\n  [amrhassan]\n\n- Fixes object type issue, response is not an string\n  [camilonova]\n    \n- Python 3 compatibility fix for db_reset\n  [nicois]\n\n- Added example project and helper scripts\n  [barseghyanartur]\n\n- Admin command to list login attemps\n  [marianov]\n\n- Replaced six imports with django.utils.six ones\n  [amrhassan]\n\n- Replaced u string literal prefixes with six.u() calls to make it compatible with Python 3.2\n  [amrhassan]\n\n- Replaced `assertIn`s and `assertNotIn`s with `assertContains` and `assertNotContains`\n  [fcurella]\n\n- Added py3k to travis\n  [fcurella]\n\n- Update test cases to be python3 compatible\n  [nicois]\n\n- Python 3 compatibility fix for db_reset\n  [nicois]\n\n- Removed trash from example urls\n  [barseghyanartur]\n\n- Added django installer\n  [barseghyanartur]\n\n- Added example project and helper scripts\n  [barseghyanartur]\n\n\n1.3.6 (2013-11-23)\n------------------\n\n- Added AttributeError in case get_profile doesn't exist [camilonova]\n- Improved axes_reset command [camilonova]\n\n\n1.3.5 (2013-11-01)\n------------------\n\n- Fix an issue with __version__ loading the wrong version [graingert]\n\n\n1.3.4 (2013-11-01)\n------------------\n\n- Update README.rst for PyPI [marty] [camilonova] [graingert]\n- Add cooloff period [visualspace]\n\n\n1.3.3 (2013-07-05)\n------------------\n\n- Added 'username' field to the Admin table [bkvirendra]\n- Removed fallback logging creation since logging cames by default on django 1.4 or later, if you don't have it is because you explicitly wanted. Fixes #45 [camilonova]\n\n\n1.3.2 (2013-03-28)\n------------------\n\n- Fix an issue when a user logout [camilonova]\n- Match pypi version [camilonova]\n- Better User model import method [camilonova]\n- Use only one place to get the version number [camilonova]\n- Fixed an issue when a user on django 1.4 logout [camilonova]\n- Handle exception if there is not user profile model set [camilonova]\n- Made some cleanup and remove a pokemon exception handling [camilonova]\n- Improved tests so it really looks for the rabbit in the hole [camilonova]\n- Match pypi version [camilonova]\n\n\n1.3.1 (2013-03-19)\n------------------\n\n- Add support for Django 1.5 [camilonova]\n\n\n1.3.0 (2013-02-27)\n------------------\n\n- Bug fix: get_version() format string [csghormley]\n\n\n1.2.9 (2013-02-20)\n------------------\n\n- Add to and improve test cases [camilonova]\n\n\n1.2.8 (2013-01-23)\n------------------\n\n- Increased http accept header length [jslatts]\n\n\n1.2.7 (2013-01-17)\n------------------\n\n- Reverse proxy support [rmagee]\n- Clean up README [martey]\n\n\n1.2.6 (2012-12-04)\n------------------\n\n- Remove unused import [aclark4life]\n\n\n1.2.5 (2012-11-28)\n------------------\n\n- Fix setup.py [aclark4life]\n- Added ability to flag user accounts as unlockable. [kencochrane]\n- Added ipaddress as a param to the user_locked_out signal. [kencochrane]\n- Added a signal receiver for user_logged_out. [kencochrane]\n- Added a signal for when a user gets locked out. [kencochrane]\n- Added AccessLog model to log all access attempts. [kencochrane]",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-pci/django-axes",
    "keywords": "authentication,django,pci,security",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-axes",
    "package_url": "https://pypi.org/project/django-axes/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-axes/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/django-pci/django-axes"
    },
    "release_url": "https://pypi.org/project/django-axes/1.7.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Keep track of failed login attempts in Django-powered sites.",
    "version": "1.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17549561,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "846a1c73270ace8108ef7f18a33f607217267fec61a87bb259e96625099d155b",
        "md5": "1dfe95cd75013b9302ad1b600316bbfd",
        "sha256": "456db72a2bc214e641ac9ceb17b7b2b36ea5d7fb43b3c7a8c3bacacdf7766433"
      },
      "downloads": -1,
      "filename": "django-axes-1.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1dfe95cd75013b9302ad1b600316bbfd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31520,
      "upload_time": "2016-06-10T22:04:32",
      "upload_time_iso_8601": "2016-06-10T22:04:32.881365Z",
      "url": "https://files.pythonhosted.org/packages/84/6a/1c73270ace8108ef7f18a33f607217267fec61a87bb259e96625099d155b/django-axes-1.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}