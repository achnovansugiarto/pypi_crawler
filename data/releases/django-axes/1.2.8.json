{
  "info": {
    "author": "Alex Clark",
    "author_email": "aclark@aclark.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Security",
      "Topic :: System :: Logging"
    ],
    "description": "``django-axes`` is a very simple way for you to keep track of failed login\nattempts, both for the Django admin and for the rest of your site.  The name is\nsort of a geeky pun, since ``axes`` can be read interpreted as:\n\n  * \"access\", as in monitoring access attempts\n  * \"axes\", as in tools you can use hack (generally on wood).  In this case,\n    however, the \"hacking\" part of it can be taken a bit further: ``django-axes``\n    is intended to help you *stop* people from hacking (popular media\n    definition) your website.  Hilarious, right?  That's what I thought too!\n\nRequirements\n============\n\n``django-axes`` requires Django 1.0 or later.  The application is intended to\nwork around the Django admin and the regular ``django.contrib.auth``\nlogin-powered pages.\n\nInstallation\n============\n\nDownload ``django-axes`` using **one** of the following methods:\n\neasy_install\n------------\n\nYou can download the package from the `CheeseShop <http://pypi.python.org/pypi/django-axes/>`_ or use::\n\n    easy_install django-axes\n\nto download and install ``django-axes``.\n\nPackage Download\n----------------\n\nDownload the latest ``.tar.gz`` file from the downloads section and extract it\nsomewhere you'll remember.  Use ``python setup.py install`` to install it.\n\nCheckout from GitHub\n--------------------\n\nExecute the following command, and make sure you're checking ``django-axes``\nout somewhere on the ``PYTHONPATH``::\n\n    git clone git://github.com/codekoala/django-axes.git\n\nVerifying Installation\n----------------------\n\nThe easiest way to ensure that you have successfully installed ``django-axes``\nis to execute a command such as::\n\n    python -c \"import axes; print axes.get_version()\"\n\nIf that command completes with some sort of version number, you're probably\ngood to go.  If you see error output, you need to check your installation (I'd\nstart with your ``PYTHONPATH``).\n\nConfiguration\n=============\n\nFirst of all, you must add this project to your list of ``INSTALLED_APPS`` in\n``settings.py``::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'axes',\n        ...\n    )\n\nNext, install the ``FailedLoginMiddleware`` middleware::\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'axes.middleware.FailedLoginMiddleware'\n    )\n\nFinally, if you're using Django's @staff_member_required, you'll want to start\nimporting this from axes rather than from Django::\n\n    from axes.decorators import staff_member_required\n\nRun ``manage.py syncdb``.  This creates the appropriate tables in your database\nthat are necessary for operation.\n\nCustomizing Axes\n----------------\n\nYou have a couple options available to you to customize ``django-axes`` a bit.\nThese should be defined in your ``settings.py`` file.\n\n  * ``AXES_LOGIN_FAILURE_LIMIT``: The number of login attempts allowed before a\n    record is created for the failed logins.  Default: ``3``\n  * ``AXES_LOCK_OUT_AT_FAILURE``: After the number of allowed login attempts\n    are exceeded, should we lock out this IP (and optional user agent)?\n    Default: ``True``\n  * ``AXES_USE_USER_AGENT``: If ``True``, lock out / log based on an IP address\n    AND a user agent.  This means requests from different user agents but from\n    the same IP are treated differently.  Default: ``False``\n  * ``AXES_COOLOFF_TIME``: If set, defines a period of inactivity after which\n    old failed login attempts will be forgotten. Can be set to a python\n    timedelta object or an integer. If an integer, will be interpreted as a\n    number of hours.  Default: ``None``\n  * ``AXES_LOGGER``: If set, specifies a logging mechanism for axes to use.\n    Default: ``'axes.watch_login'``\n  * ``AXES_LOCKOUT_TEMPLATE``: If set, specifies a template to render when a\n    user is locked out. Template receives cooloff_time and failure_limit as\n    context variables. Default: ``None``\n  * ``AXES_LOCKOUT_URL``: If set, specifies a URL to redirect to on lockout. If\n    both AXES_LOCKOUT_TEMPLATE and AXES_LOCKOUT_URL are set, the template will\n    be used. Default: ``None``\n  * ``AXES_VERBOSE``: If ``True``, you'll see slightly more logging for Axes.\n    Default: ``True``\n\nUsage\n=====\n\nUsing ``django-axes`` is extremely simple.  Once you install the application\nand the middleware, all you need to do is periodically check the Access\nAttempts section of the admin.  A log file is also created for you to keep\ntrack of the events surrounding failed login attempts.  This log file can be\nfound in your Django project directory, by the name of ``axes.log``.  In the\nfuture I plan on offering a way to customize options for logging a bit more.\n\nBy default, django-axes will lock out repeated attempts from the same IP\naddress.  You can allow this IP to attempt again by deleting the relevant\n``AccessAttempt`` records in the admin.\n\nYou can also use the ``axes_reset`` management command (since 1.2.5-rc1). Using Django's\n``manage.py``.\n\n* ``manage.py axes_reset`` will reset all lockouts and access records.\n* ``manage.py axes_reset ip`` will clear lockout/records for ip\n\nIn your code, you can use ``from axes.utils import reset``.\n\n* ``reset()`` will reset all lockouts and access records.\n* ``reset(ip)`` will clear lockout/records for ip\n\n``reset`` will print a message to std out if there is nothing to reset,\nunless called with ``silent = True``\n\nChanges\n=======\n\n1.2.8 (2013-01-23)\n------------------\n\n- Increased http accept header length\n  [jslatts]\n\n1.2.7 (2013-01-17)\n------------------\n\n- Reverse proxy support\n  [rmagee]\n\n- Clean up README\n  [martey]\n\n1.2.6 (2012-12-04)\n------------------\n\n- Remove unused import\n  [aclark]\n\n1.2.5 (2012-11-28)\n------------------\n\n- Fix setup.py\n  [aclark]\n\n- Added ability to flag user accounts as unlockable.\n  [kencochrane]\n\n- Added ipaddress as a param to the user_locked_out signal.\n  [kencochrane]\n\n- Added a signal receiver for user_logged_out.\n  [kencochrane]\n\n- Added a signal for when a user gets locked out.\n  [kencochrane]\n\n- Added AccessLog model to log all access attempts.\n  [kencochrane]\n\n< 1.2.5\n-------\n\n- XXX Fix me",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/codekoala/django-axes",
    "keywords": "django,security,authentication",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-axes",
    "package_url": "https://pypi.org/project/django-axes/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-axes/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/codekoala/django-axes"
    },
    "release_url": "https://pypi.org/project/django-axes/1.2.8/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Keep track of failed login attempts in Django-powered sites.",
    "version": "1.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17549561,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25ae9f0d8ac09a9111da28bd26bcdf2614bb4c6bf7970b3327f15bd1ab898faa",
        "md5": "ccd71e0714a683ead2c4157046765365",
        "sha256": "e878b8f02b74e350933903d125cf06ce28847b43c606db68c0fcd91e234d961f"
      },
      "downloads": -1,
      "filename": "django-axes-1.2.8.zip",
      "has_sig": false,
      "md5_digest": "ccd71e0714a683ead2c4157046765365",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23495,
      "upload_time": "2013-01-23T15:29:07",
      "upload_time_iso_8601": "2013-01-23T15:29:07.322039Z",
      "url": "https://files.pythonhosted.org/packages/25/ae/9f0d8ac09a9111da28bd26bcdf2614bb4c6bf7970b3327f15bd1ab898faa/django-axes-1.2.8.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}