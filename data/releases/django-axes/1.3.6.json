{
  "info": {
    "author": "Alex Clark",
    "author_email": "aclark@aclark.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: Log Analysis",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
      "Topic :: Security",
      "Topic :: System :: Logging"
    ],
    "description": "Django Axes\n===========\n\n.. image:: https://secure.travis-ci.org/django-security/django-axes.png?branch=master\n    :alt: Build Status\n    :target: http://travis-ci.org/django-security/django-axes\n\n``django-axes`` is a very simple way for you to keep track of failed login\nattempts, both for the Django admin and for the rest of your site.  The name is\nsort of a geeky pun, since ``axes`` can be read interpreted as:\n\n* \"access\", as in monitoring access attempts\n* \"axes\", as in tools you can use hack (generally on wood).  In this case,\n  however, the \"hacking\" part of it can be taken a bit further: ``django-axes``\n  is intended to help you *stop* people from hacking (popular media\n  definition) your website.  Hilarious, right?  That's what I thought too!\n\n\nRequirements\n============\n\n``django-axes`` requires Django 1.4 or later.  The application is intended to\nwork around the Django admin and the regular ``django.contrib.auth``\nlogin-powered pages.\n\n\nInstallation\n============\n\nDownload and install ``django-axes`` using **one** of the following methods:\n\nPIP\n---\n\nYou can install the latest stable package running this command::\n\n    $ pip install django-axes\n\nAlso you can install the development version running this command::\n\n    $ pip install -e git+http://github.com/django-security/django-axes.git#egg=django_axes-dev\n\nSetuptools\n----------\n\nYou can install the latest stable package running::\n\n    $ easy_install django-axes\n\n\nDevelopment\n===========\n\nYou can contribute to this project forking it from github and sending pull requests.\n\nRunning tests\n-------------\n\nTests can be run, after you clone the repository and having django installed, like::\n\n    $ PYTHONPATH=$PYTHONPATH:$PWD django-admin.py test axes --settings=axes.test_settings\n\n\nConfiguration\n=============\n\nFirst of all, you must add this project to your list of ``INSTALLED_APPS`` in\n``settings.py``::\n\n    INSTALLED_APPS = (\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'axes',\n        ...\n    )\n\nNext, install the ``FailedLoginMiddleware`` middleware::\n\n    MIDDLEWARE_CLASSES = (\n        'django.middleware.common.CommonMiddleware',\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        'axes.middleware.FailedLoginMiddleware'\n    )\n\nRun ``python manage.py syncdb``.  This creates the appropriate tables in your database\nthat are necessary for operation.\n\nCustomizing Axes\n----------------\n\nYou have a couple options available to you to customize ``django-axes`` a bit.\nThese should be defined in your ``settings.py`` file.\n\n* ``AXES_LOGIN_FAILURE_LIMIT``: The number of login attempts allowed before a\n  record is created for the failed logins.  Default: ``3``\n* ``AXES_LOCK_OUT_AT_FAILURE``: After the number of allowed login attempts\n  are exceeded, should we lock out this IP (and optional user agent)?\n  Default: ``True``\n* ``AXES_USE_USER_AGENT``: If ``True``, lock out / log based on an IP address\n  AND a user agent.  This means requests from different user agents but from\n  the same IP are treated differently.  Default: ``False``\n* ``AXES_COOLOFF_TIME``: If set, defines a period of inactivity after which\n  old failed login attempts will be forgotten. Can be set to a python\n  timedelta object or an integer. If an integer, will be interpreted as a\n  number of hours.  Default: ``None``\n* ``AXES_LOGGER``: If set, specifies a logging mechanism for axes to use.\n  Default: ``'axes.watch_login'``\n* ``AXES_LOCKOUT_TEMPLATE``: If set, specifies a template to render when a\n  user is locked out. Template receives cooloff_time and failure_limit as\n  context variables. Default: ``None``\n* ``AXES_LOCKOUT_URL``: If set, specifies a URL to redirect to on lockout. If\n  both AXES_LOCKOUT_TEMPLATE and AXES_LOCKOUT_URL are set, the template will\n  be used. Default: ``None``\n* ``AXES_VERBOSE``: If ``True``, you'll see slightly more logging for Axes.\n  Default: ``True``\n\n\nUsage\n=====\n\nUsing ``django-axes`` is extremely simple.  Once you install the application\nand the middleware, all you need to do is periodically check the Access\nAttempts section of the admin.\n\nBy default, django-axes will lock out repeated attempts from the same IP\naddress.  You can allow this IP to attempt again by deleting the relevant\n``AccessAttempt`` records in the admin.\n\nYou can also use the ``axes_reset`` management command using Django's\n``manage.py``.\n\n* ``manage.py axes_reset`` will reset all lockouts and access records.\n* ``manage.py axes_reset ip`` will clear lockout/records for ip\n\nIn your code, you can use ``from axes.utils import reset``.\n\n* ``reset()`` will reset all lockouts and access records.\n* ``reset(ip=ip)`` will clear lockout/records for ip\n* ``reset(username=username)`` will clear lockout/records for username\n\nChanges\n=======\n\n1.3.6 (2013-11-23)\n------------------\n\n- Added AttributeError in case get_profile doesn't exist [camilonova]\n- Improved axes_reset command [camilonova]\n\n\n1.3.5 (2013-11-01)\n------------------\n\n- Fix an issue with __version__ loading the wrong version [graingert]\n\n\n1.3.4 (2013-11-01)\n------------------\n\n- Update README.rst for PyPI [marty] [camilonova] [graingert]\n- Add cooloff period [visualspace]\n\n\n1.3.3 (2013-07-05)\n------------------\n\n- Added 'username' field to the Admin table [bkvirendra]\n- Removed fallback logging creation since logging cames by default on django 1.4 or later, if you don't have it is because you explicitly wanted. Fixes #45 [camilonova]\n\n\n1.3.2 (2013-03-28)\n------------------\n\n- Fix an issue when a user logout [camilonova]\n- Match pypi version [camilonova]\n- Better User model import method [camilonova]\n- Use only one place to get the version number [camilonova]\n- Fixed an issue when a user on django 1.4 logout [camilonova]\n- Handle exception if there is not user profile model set [camilonova]\n- Made some cleanup and remove a pokemon exception handling [camilonova]\n- Improved tests so it really looks for the rabbit in the hole [camilonova]\n- Match pypi version [camilonova]\n\n\n1.3.1 (2013-03-19)\n------------------\n\n- Add support for Django 1.5 [camilonova]\n\n\n1.3.0 (2013-02-27)\n------------------\n\n- Bug fix: get_version() format string [csghormley]\n\n\n1.2.9 (2013-02-20)\n------------------\n\n- Add to and improve test cases [camilonova]\n\n\n1.2.8 (2013-01-23)\n------------------\n\n- Increased http accept header length [jslatts]\n\n\n1.2.7 (2013-01-17)\n------------------\n\n- Reverse proxy support [rmagee]\n- Clean up README [martey]\n\n\n1.2.6 (2012-12-04)\n------------------\n\n- Remove unused import [aclark]\n\n\n1.2.5 (2012-11-28)\n------------------\n\n- Fix setup.py [aclark]\n- Added ability to flag user accounts as unlockable. [kencochrane]\n- Added ipaddress as a param to the user_locked_out signal. [kencochrane]\n- Added a signal receiver for user_logged_out. [kencochrane]\n- Added a signal for when a user gets locked out. [kencochrane]\n- Added AccessLog model to log all access attempts. [kencochrane]",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/django-security/django-axes",
    "keywords": "django,security,authentication",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-axes",
    "package_url": "https://pypi.org/project/django-axes/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-axes/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/django-security/django-axes"
    },
    "release_url": "https://pypi.org/project/django-axes/1.3.6/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Keep track of failed login attempts in Django-powered sites.",
    "version": "1.3.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17549561,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e21385731549867afd1235d49c8eb39512b4a1c773c9aabc6cc87ed5d59b608d",
        "md5": "c472410a778538d0080448c419074b17",
        "sha256": "79e15f6b25430c4fd52a5459379640dfcfde5d3eab9e11f62ccdc71406cdb530"
      },
      "downloads": -1,
      "filename": "django-axes-1.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "c472410a778538d0080448c419074b17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13137,
      "upload_time": "2013-11-23T16:21:09",
      "upload_time_iso_8601": "2013-11-23T16:21:09.742581Z",
      "url": "https://files.pythonhosted.org/packages/e2/13/85731549867afd1235d49c8eb39512b4a1c773c9aabc6cc87ed5d59b608d/django-axes-1.3.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}