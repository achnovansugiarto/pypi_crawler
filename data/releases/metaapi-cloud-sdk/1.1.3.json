{
  "info": {
    "author": "Agilium Labs LLC",
    "author_email": "agiliumtrade@agiliumtrade.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "metaapi.cloud SDK for Python\n============================\n\nMetaApi is a powerful API for MetaTrader 4 and MetaTrader 5 terminals.\nMetaApi is available in cloud and self-hosted options.\n\nOfficial REST and websocket API documentation: https://metaapi.cloud/docs/client/\n\nPlease note that this SDK provides an abstraction over REST and websocket API to simplify your application logic.\nFor more information about SDK APIs please check docstring documentation in source codes located inside lib folder of this package.\n\nInstallation\n------------\n.. code-block:: bash\n\n    pip install metaapi-cloud-sdk\n\nObtaining MetaApi token\n-----------------------\nYou can obtain MetaApi token via https://app.metaapi.cloud/token UI.\n\nWorking code examples\n---------------------\nYou can find code examples at `examples folder of our github repo <https://github.com/agiliumtrade-ai/metaapi-python-client/tree/master/examples>`_ or in the examples folder of the pip package.\n\nAdd MetaTrader account to MetaApi\n---------------------------------\nYou can use https://app.metaapi.cloud/accounts UI to add a MetaTrader\naccount to MetaApi application. Alternatively you can use API as\ndemonstrated below.\n\nAdd MetaTrader account to MetaApi via API\n-----------------------------------------\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi\n\n    token = '...'\n    api = MetaApi(token)\n\n    # if you do not have created a provisioning profile for your broker,\n    # you should do it before creating an account\n    provisioningProfile = await api.provisioning_profile_api.create_provisioning_profile({\n        'name': 'My profile',\n        'version': 5\n    })\n    # servers.dat file is required for MT5 profile and can be found inside\n    # config directory of your MetaTrader terminal data folder. It contains\n    # information about available broker servers\n    await provisioningProfile.upload_file('servers.dat', '/path/to/servers.dat')\n    # for MT4, you should upload an .srv file instead\n    # await provisioningProfile.upload_file('broker.srv', '/path/to/broker.srv');\n\n    # Alternatively you can retrieve an existing profile from API\n    # provisioningProfile = await api.provisioning_profile_api.get_provisioning_profile('profileId');\n\n    # if you have not yet added your MetaTrader account, then add it\n    account = await api.metatrader_account_api.create_account({\n      'name': 'Trading account #1',\n      'type': 'cloud',\n      'login': '1234567',\n      # password can be investor password for read-only access\n      'password': 'qwerty',\n      'server': 'ICMarketsSC-Demo',\n      # synchronizationMode can be 'automatic' for RPC access or 'user' if you\n      # want to keep track of terminal state in real-time (e.g. if you are\n      # developing a EA or trading strategy)\n      'synchronizationMode': 'automatic',\n      'provisioningProfileId': provisioningProfile.id,\n      # algorithm used to parse your broker timezone. Supported values are\n      # icmarkets for America/New_York DST switch and roboforex for EET\n      # DST switch (the values will be changed soon)\n      'timeConverter': 'roboforex',\n      'application': 'MetaApi',\n      'magic': 123456\n    })\n\n    # Alternatively you can retrieve an existing account from API\n    # account = await api.metatrader_account_api.get_account('accountId');\n\nAccess MetaTrader account via RPC API\n-------------------------------------\nRPC API let you query the trading terminal state. You should use\nautomatic synchronization mode if all you need is the RPC API.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi\n\n    token = '...'\n    api = MetaApi(token)\n\n    account = await api.metatrader_account_api.get_account('accountId')\n\n    connection = await account.connect()\n\n    await connection.wait_synchronized()\n\n    # retrieve balance and equity\n    print(await connection.get_account_information())\n    # retrieve open positions\n    print(await connection.get_positions())\n    # retrieve a position by id\n    print(await connection.get_position('1234567'))\n    # retrieve pending orders\n    print(await connection.get_orders())\n    # retrieve a pending order by id\n    print(await connection.get_order('1234567'))\n    # retrieve history orders by ticket\n    print(await connection.get_history_orders_by_ticket('1234567'))\n    # retrieve history orders by position id\n    print(await connection.get_history_orders_by_position('1234567'))\n    # retrieve history orders by time range\n    print(await connection.get_history_orders_by_time_range(start_time, end_time))\n    # retrieve history deals by ticket\n    print(await connection.get_deals_by_ticket('1234567'))\n    # retrieve history deals by position id\n    print(await connection.get_deals_by_position('1234567'))\n    # retrieve history deals by time range\n    print(await connection.get_deals_by_time_range(start_time, end_time))\n\n    # trade\n    print(await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.create_market_sell_order('GBPUSD', 0.07, 2.0, 0.9, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.create_limit_buy_order('GBPUSD', 0.07, 1.0, 0.9, 2.0, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.create_limit_sell_order('GBPUSD', 0.07, 1.5, 2.0, 0.9, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.create_stop_buy_order('GBPUSD', 0.07, 1.5, 0.9, 2.0, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.create_stop_sell_order('GBPUSD', 0.07, 1.0, 2.0, 0.9, 'comment', 'TE_GBPUSD_7hyINWqAlE'))\n    print(await connection.modify_position('46870472', 2.0, 0.9))\n    print(await connection.close_position_partially('46870472', 0.9))\n    print(await connection.close_position('46870472'))\n    # this trade type is available for MT5 netting accounts only\n    print(await connection.close_position_by_symbol('EURUSD'))\n    print(await connection.modify_order('46870472', 0.07, 1.0, 2.0, 0.9))\n    print(await connection.cancel_order('46870472'))\n\n    # Note: trade methods do not throw an exception if terminal have refused\n    # the trade, thus you must check the returned value\n    result = await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, 'comment', 'TE_GBPUSD_7hyINWqAlE')\n    if result['description'] != 'TRADE_RETCODE_DONE':\n      print('Trade was rejected by MetaTrader terminal with ' + result['description'] + ' error')\n\n\n    # you can release all MetaApi resource when you are done using it\n    api.close()\n\nSynchronize with MetaTrader terminal state in real-time\n-------------------------------------------------------\nIf you are developing applications like trading strategy or an EA then\nyou'll likely need a real-time view of the terminal state. If this is\nthe case, then you should set your account synchronization mode to\n'user' and use API below to access terminal state.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi, HistoryStorage, SynchronizationListener\n\n    token = '...'\n    api = MetaApi(token)\n\n    account = await api.metatrader_account_api.get_account('accountId')\n\n    # account.synchronization_mode must be equal to 'user' at this point\n\n    class MongodbHistoryStorage(HistoryStorage):\n      # implement the abstract methods, see MemoryHistoryStorage for sample\n      # implementation\n\n    historyStorage = MongodbHistoryStorage()\n\n    # Note: if you will not specify history storage, then in-memory storage\n    # will be used (instance of MemoryHistoryStorage)\n    connection = await account.connect(historyStorage)\n\n    # access local copy of terminal state\n    terminalState = connection.terminal_state\n\n    # wait until synchronization completed\n    await connection.wait_synchronized()\n\n    print(terminalState.connected)\n    print(terminalState.connected_to_broker)\n    print(terminalState.account_information)\n    print(terminalState.positions)\n    print(terminalState.orders)\n    # symbol specifications\n    print(terminalState.specifications)\n    print(terminalState.specification('EURUSD'))\n    print(terminalState.price('EURUSD'))\n\n    # access history storage\n    historyStorage = connection.history_storage\n\n    # both orderSynchronizationFinished and dealSynchronizationFinished\n    # should be true once history synchronization have finished\n    print(historyStorage.order_synchronization_finished)\n    print(historyStorage.deal_synchronization_finished)\n    # invoke other methods provided by your history storage\n    print(await historyStorage.your_method())\n\n    # receive synchronization event notifications\n    # first, implement your listener\n    class MySynchronizationListener(SynchronizationListener):\n      # override abstract methods you want to receive notifications for\n\n    # now add the listener\n    listener = MySynchronizationListener()\n    connection.add_synchronization_listener(listener)\n    # remove the listener when no longer needed\n    connection.remove_synchronization_listener(listener)\n\n    # close the connection to clean up resources\n    connection.close()\n\n    # you can release all MetaApi resource when you done using it\n    api.close()\n\n\nKeywords: MetaTrader API, MetaTrader REST API, MetaTrader websocket API,\nMetaTrader 5 API, MetaTrader 5 REST API, MetaTrader 5 websocket API,\nMetaTrader 4 API, MetaTrader 4 REST API, MetaTrader 4 websocket API,\nMT5 API, MT5 REST API, MT5 websocket API, MT4 API, MT4 REST API,\nMT4 websocket API, MetaTrader SDK, MetaTrader SDK, MT4 SDK, MT5 SDK,\nMetaTrader 5 SDK, MetaTrader 4 SDK, MetaTrader python SDK, MetaTrader 5\npython SDK, MetaTrader 4 python SDK, MT5 python SDK, MT4 python SDK,\nFX REST API, Forex REST API, Forex websocket API, FX websocket API, FX\nSDK, Forex SDK, FX python SDK, Forex python SDK, Trading API, Forex\nAPI, FX API, Trading SDK, Trading REST API, Trading websocket API,\nTrading SDK, Trading python SDK",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agiliumtrade-ai/metaapi-python-sdk",
    "keywords": "metaapi.cloud,MetaTrader,MetaTrader 5,MetaTrader 4,MetaTrader5,MetaTrader4,MT,MT4,MT5,forex,trading,API,REST,websocket,client,sdk,cloud",
    "license": "SEE LICENSE IN LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaapi-cloud-sdk",
    "package_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/agiliumtrade-ai/metaapi-python-sdk"
    },
    "release_url": "https://pypi.org/project/metaapi-cloud-sdk/1.1.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SDK for MetaApi, a professional cloud forex API which includes MetaTrader REST API and MetaTrader websocket API. Supports both MetaTrader 5 (MT5) and MetaTrader 4 (MT4). (https://metaapi.cloud)",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973035,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e27a032efb9475c27c3d50505bef8105c66fb67991570c1fa6574470b04c72cb",
        "md5": "fa21e87edc414448cf43ba56925f288d",
        "sha256": "88da6c98025999d6285cacdc1ab23cb9215adefd5047993023aefd63f355e7c8"
      },
      "downloads": -1,
      "filename": "metaapi_cloud_sdk-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "fa21e87edc414448cf43ba56925f288d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 45066,
      "upload_time": "2020-06-27T22:18:01",
      "upload_time_iso_8601": "2020-06-27T22:18:01.065379Z",
      "url": "https://files.pythonhosted.org/packages/e2/7a/032efb9475c27c3d50505bef8105c66fb67991570c1fa6574470b04c72cb/metaapi_cloud_sdk-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}