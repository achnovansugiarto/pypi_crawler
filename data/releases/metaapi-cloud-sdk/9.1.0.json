{
  "info": {
    "author": "Agilium Labs LLC",
    "author_email": "agiliumtrade@agiliumtrade.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "metaapi.cloud SDK for Python\n############################\n\nMetaApi is a powerful, fast, cost-efficient, easy to use and standards-driven cloud forex trading API for MetaTrader 4 and MetaTrader 5 platform designed for traders, investors and forex application developers to boost forex application development process. MetaApi can be used with any broker and does not require you to be a brokerage.\n\nCopyFactory is a simple yet powerful copy-trading API which is a part of MetaApi. See below for CopyFactory readme section.\n\nMetaApi is a paid service, but API access to one MetaTrader account is free of charge.\n\nThe `MetaApi pricing <https://metaapi.cloud/#pricing>`_ was developed with the intent to make your charges less or equal to what you would have to pay\nfor hosting your own infrastructure. This is possible because over time we managed to heavily optimize\nour MetaTrader infrastructure. And with MetaApi you can save significantly on application development and\nmaintenance costs and time thanks to high-quality API, open-source SDKs and convenience of a cloud service.\n\nOfficial REST and websocket API documentation: https://metaapi.cloud/docs/client/\n\nPlease note that this SDK provides an abstraction over REST and websocket API to simplify your application logic.\n\nFor more information about SDK APIs please check docstring documentation in source codes located inside lib folder of this package.\n\nInstallation\n============\n.. code-block:: bash\n\n    pip install metaapi-cloud-sdk\n\nWorking code examples\n=====================\nPlease check `this short video <https://youtu.be/LIqFOOOLP-g>`_ to see how you can download samples via our web application.\n\nYou can find code examples at `examples folder of our github repo <https://github.com/agiliumtrade-ai/metaapi-python-sdk/tree/master/examples>`_ or in the examples folder of the pip package.\n\nWe have composed a `short guide explaining how to use the example code <https://metaapi.cloud/docs/client/usingCodeExamples>`_\n\nConnecting to MetaApi\n=====================\nPlease use one of these ways:\n\n1. https://app.metaapi.cloud/token web UI to obtain your API token.\n2. An account access token which grants access to a single account. See section below on instructions on how to retrieve account access token.\n\nSupply token to the MetaApi class constructor.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi\n\n    token = '...'\n    api = MetaApi(token)\n\nRetrieving account access token\n===============================\nAccount access token grants access to a single account. You can retrieve account access token via API:\n\n.. code-block:: python\n\n    account_id = '...'\n    account = await api.metatrader_account_api.get_account(account_id)\n    account_access_token = account.access_token\n    print(account_access_token)\n\nAlternatively, you can retrieve account access token via web UI on https://app.metaapi.cloud/accounts page (see `this video <https://youtu.be/PKYiDns6_xI>`_).\n\nManaging MetaTrader accounts (API servers for MT accounts)\n==========================================================\nBefore you can use the API you have to add an MT account to MetaApi and start an API server for it.\n\nHowever, before you can create an account, you have to create a provisioning profile.\n\nManaging provisioning profiles via web UI\n-----------------------------------------\nYou can manage provisioning profiles here: https://app.metaapi.cloud/provisioning-profiles\n\nCreating a provisioning profile via API\n---------------------------------------\n.. code-block:: python\n\n    # if you do not have created a provisioning profile for your broker,\n    # you should do it before creating an account\n    provisioningProfile = await api.provisioning_profile_api.create_provisioning_profile({\n        'name': 'My profile',\n        'version': 5,\n        'brokerTimezone': 'EET',\n        'brokerDSTSwitchTimezone': 'EET'\n    })\n    # servers.dat file is required for MT5 profile and can be found inside\n    # config directory of your MetaTrader terminal data folder. It contains\n    # information about available broker servers\n    await provisioningProfile.upload_file('servers.dat', '/path/to/servers.dat')\n    # for MT4, you should upload an .srv file instead\n    await provisioningProfile.upload_file('broker.srv', '/path/to/broker.srv')\n\nRetrieving existing provisioning profiles via API\n-------------------------------------------------\n.. code-block:: python\n\n    provisioningProfiles = await api.provisioning_profile_api.get_provisioning_profiles()\n    provisioningProfile = await api.provisioning_profile_api.get_provisioning_profile('profileId')\n\nUpdating a provisioning profile via API\n---------------------------------------\n.. code-block:: python\n\n    await provisioningProfile.update({'name': 'New name'})\n    # for MT5, you should upload a servers.dat file\n    await provisioningProfile.upload_file('servers.dat', '/path/to/servers.dat')\n    # for MT4, you should upload an .srv file instead\n    await provisioningProfile.upload_file('broker.srv', '/path/to/broker.srv')\n\nRemoving a provisioning profile\n-------------------------------\n.. code-block:: python\n\n    await provisioningProfile.remove()\n\nManaging MetaTrader accounts (API servers) via web UI\n-----------------------------------------------------\nYou can manage MetaTrader accounts here: https://app.metaapi.cloud/accounts\n\nCreate a MetaTrader account (API server) via API\n------------------------------------------------\n.. code-block:: python\n\n    account = await api.metatrader_account_api.create_account({\n      'name': 'Trading account #1',\n      'type': 'cloud',\n      'login': '1234567',\n      # password can be investor password for read-only access\n      'password': 'qwerty',\n      'server': 'ICMarketsSC-Demo',\n      'provisioningProfileId': provisioningProfile.id,\n      'application': 'MetaApi',\n      'magic': 123456,\n      'quoteStreamingIntervalInSeconds': 2.5 # set to 0 to receive quote per tick\n    })\n\nRetrieving existing accounts via API\n------------------------------------\n.. code-block:: python\n\n    # filter and paginate accounts, see doc for full list of filter options available\n    accounts = await api.metatraderAccountApi.get_accounts({\n        'limit': 10,\n        'offset': 0,\n        'query': 'ICMarketsSC-MT5',\n        'state': ['DEPLOYED']\n    })\n    # get accounts without filter (returns 1000 accounts max)\n    accounts = await api.metatraderAccountApi.get_accounts();\n\n    account = await api.metatraderAccountApi.get_account('accountId')\n\nUpdating an existing account via API\n------------------------------------\n.. code-block:: python\n\n    await account.update({\n        'name': 'Trading account #1',\n        'login': '1234567',\n        # password can be investor password for read-only access\n        'password': 'qwerty',\n        'server': 'ICMarketsSC-Demo',\n        'quoteStreamingIntervalInSeconds': 2.5\n    })\n\nRemoving an account\n-------------------\n.. code-block:: python\n\n    await account.remove()\n\nDeploying, undeploying and redeploying an account (API server) via API\n----------------------------------------------------------------------\n.. code-block:: python\n\n    await account.deploy()\n    await account.undeploy()\n    await account.redeploy()\n\nAccess MetaTrader account via RPC API\n=====================================\nRPC API let you query the trading terminal state. You should use\nRPC API if you develop trading monitoring apps like myfxbook or other\nsimple trading apps.\n\nQuery account information, positions, orders and history via RPC API\n--------------------------------------------------------------------\n.. code-block:: python\n\n    connection = await account.connect()\n\n    await connection.wait_synchronized()\n\n    # retrieve balance and equity\n    print(await connection.get_account_information())\n    # retrieve open positions\n    print(await connection.get_positions())\n    # retrieve a position by id\n    print(await connection.get_position('1234567'))\n    # retrieve pending orders\n    print(await connection.get_orders())\n    # retrieve a pending order by id\n    print(await connection.get_order('1234567'))\n    # retrieve history orders by ticket\n    print(await connection.get_history_orders_by_ticket('1234567'))\n    # retrieve history orders by position id\n    print(await connection.get_history_orders_by_position('1234567'))\n    # retrieve history orders by time range\n    print(await connection.get_history_orders_by_time_range(start_time, end_time))\n    # retrieve history deals by ticket\n    print(await connection.get_deals_by_ticket('1234567'))\n    # retrieve history deals by position id\n    print(await connection.get_deals_by_position('1234567'))\n    # retrieve history deals by time range\n    print(await connection.get_deals_by_time_range(start_time, end_time))\n\nQuery contract specifications and quotes via RPC API\n----------------------------------------------------\n.. code-block:: python\n\n    connection = await account.connect()\n\n    await connection.wait_synchronized()\n\n    # first, subscribe to market data\n    await connection.subscribe_to_market_data('GBPUSD')\n\n    # read contract specification\n    print(await connection.get_symbol_specification('GBPUSD'))\n    # read current price\n    print(await connection.get_symbol_price('GBPUSD'))\n\nUse real-time streaming API\n---------------------------\nReal-time streaming API is good for developing trading applications like trade copiers or automated trading strategies.\nThe API synchronizes the terminal state locally so that you can query local copy of the terminal state really fast.\n\nSynchronizing and reading terminal state\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.. code-block:: python\n\n    account = await api.metatrader_account_api.get_account('accountId')\n\n\n    # access local copy of terminal state\n    terminalState = connection.terminal_state\n\n    # wait until synchronization completed\n    await connection.wait_synchronized()\n\n    print(terminalState.connected)\n    print(terminalState.connected_to_broker)\n    print(terminalState.account_information)\n    print(terminalState.positions)\n    print(terminalState.orders)\n    # symbol specifications\n    print(terminalState.specifications)\n    print(terminalState.specification('EURUSD'))\n    print(terminalState.price('EURUSD'))\n\n    # access history storage\n    historyStorage = connection.history_storage\n\n    # both orderSynchronizationFinished and dealSynchronizationFinished\n    # should be true once history synchronization have finished\n    print(historyStorage.order_synchronization_finished)\n    print(historyStorage.deal_synchronization_finished)\n\nOverriding local history storage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nBy default history is stored in memory only. You can override history storage to save trade history to a persistent storage like MongoDB database.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import HistoryStorage\n\n    class MongodbHistoryStorage(HistoryStorage):\n        # implement the abstract methods, see MemoryHistoryStorage for sample\n        # implementation\n\n    historyStorage = MongodbHistoryStorage()\n\n    # Note: if you will not specify history storage, then in-memory storage\n    # will be used (instance of MemoryHistoryStorage)\n    connection = await account.connect(historyStorage)\n\n    # access history storage\n    historyStorage = connection.history_storage;\n\n    # invoke other methods provided by your history storage implementation\n    print(await historyStorage.yourMethod())\n\nReceiving synchronization events\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nYou can override SynchronizationListener in order to receive synchronization event notifications, such as account/position/order/history updates or symbol quote updates.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import SynchronizationListener\n\n    # receive synchronization event notifications\n    # first, implement your listener\n    class MySynchronizationListener(SynchronizationListener):\n        # override abstract methods you want to receive notifications for\n\n    # now add the listener\n    listener = MySynchronizationListener()\n    connection.add_synchronization_listener(listener)\n\n    # remove the listener when no longer needed\n    connection.remove_synchronization_listener(listener)\n\nRetrieve contract specifications and quotes via streaming API\n-------------------------------------------------------------\n.. code-block:: python\n\n    connection = await account.connect()\n\n    await connection.wait_synchronized()\n\n    # first, subscribe to market data\n    await connection.subscribe_to_market_data('GBPUSD')\n\n    # read constract specification\n    print(terminalState.specification('EURUSD'))\n\n    # read current price\n    print(terminalState.price('EURUSD'))\n\nExecute trades (both RPC and streaming APIs)\n--------------------------------------------\n.. code-block:: python\n\n    connection = await account.connect()\n\n    await connection.wait_synchronized()\n\n    # trade\n    print(await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, {'comment': 'comment',\n                                                                              'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_market_sell_order('GBPUSD', 0.07, 2.0, 0.9, {'comment': 'comment',\n                                                                               'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_limit_buy_order('GBPUSD', 0.07, 1.0, 0.9, 2.0, {'comment': 'comment',\n                                                                                  'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_limit_sell_order('GBPUSD', 0.07, 1.5, 2.0, 0.9, {'comment': 'comment',\n                                                                                   'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_buy_order('GBPUSD', 0.07, 1.5, 0.9, 2.0, {'comment': 'comment',\n                                                                                 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_sell_order('GBPUSD', 0.07, 1.0, 2.0, 0.9, {'comment': 'comment',\n                                                                                  'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.modify_position('46870472', 2.0, 0.9))\n    print(await connection.close_position_partially('46870472', 0.9))\n    print(await connection.close_position('46870472'))\n    print(await connection.close_positions_by_symbol('EURUSD'))\n    print(await connection.modify_order('46870472', 1.0, 2.0, 0.9))\n    print(await connection.cancel_order('46870472'))\n\n    # if you need to, check the extra result information in stringCode and numericCode properties of the response\n    result = await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, {'comment': 'comment',\n                                                                                 'clientId': 'TE_GBPUSD_7hyINWqAl'})\n    print('Trade successful, result code is ' + result['stringCode'])\n\nManaging MetaTrader demo accounts via API\n===========================================\nPlease note that not all MT4/MT5 servers allows you to create demo accounts using the method below.\n\nCreate a MetaTrader 4 demo account\n----------------------------------\n.. code-block:: python\n\n    demo_account = await api.metatrader_demo_account_api.create_mt4_demo_account(provisioningProfile.id, {\n        'balance': 100000,\n        'email': 'example@example.com',\n        'leverage': 100,\n        'serverName': 'Exness-Trial4'\n    })\n\nCreate a MetaTrader 5 demo account\n----------------------------------\n.. code-block:: python\n\n    demo_account = await api.metatrader_demo_account_api.create_mt5_demo_account(provisioningProfile.id, {\n        'balance': 100000,\n        'email': 'example@example.com',\n        'leverage': 100,\n        'serverName': 'ICMarketsSC-Demo'\n    })\n\nCopyFactory copy trading API (experimental)\n===========================================\n\nCopyFactory is a powerful trade copying API which makes developing forex\ntrade copying applications as easy as writing few lines of code.\n\nAt this point this feature is experimental and we have not yet defined a final price for it.\n\nWhy do we offer CopyFactory API\n-------------------------------------\n\nWe found that developing reliable and flexible trade copier is a task\nwhich requires lots of effort, because developers have to solve a series\nof complex technical tasks to create a product.\n\nWe decided to share our product as it allows developers to start with a\npowerful solution in almost no time, save on development and\ninfrastructure maintenance costs.\n\nCopyFactory features\n-------------------------------------\nFeatures supported:\n\n- low latency trade copying\n- connect arbitrary number of strategy providers and subscribers\n- subscribe accounts to multiple strategies at once\n- select arbitrary copy ratio for each subscription\n- apply advanced risk filters on strategy provider side\n- override risk filters on subscriber side\n- provide multiple strategies from a single account based on magic or symbol filters\n- reliable trade copying\n- supports manual trading on subscriber accounts while copying trades\n- synchronize subscriber account with strategy providers\n- monitor trading history\n- calculate trade copying commissions for account managers\n\nConfiguring trade copying\n-------------------------------------\n\nIn order to configure trade copying you need to:\n\n- add MetaApi MetaTrader accounts with CopyFactory as application field value (see above)\n- create CopyFactory master and slave accounts and connect them to MetaApi accounts via connectionId field\n- create a strategy being copied\n- subscribe slave CopyFactory accounts to the strategy\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi, CopyFactory\n\n    token = '...'\n    metaapi = MetaApi(token)\n    copy_factory = CopyFactory(token)\n\n    # retrieve MetaApi MetaTrader accounts with CopyFactory as application field value\n    master_metaapi_account = await api.metatrader_account_api.get_account('masterMetaapiAccountId')\n    if master_metaapi_account.application != 'CopyFactory'\n        raise Exception('Please specify CopyFactory application field value in your MetaApi account in order to use it in CopyFactory API')\n    slave_metaapi_account = await api.metatrader_account_api.get_account('slaveMetaapiAccountId')\n    if slave_metaapi_account.application != 'CopyFactory'\n        raise Exception('Please specify CopyFactory application field value in your MetaApi account in order to use it in CopyFactory API')\n\n    # create CopyFactory master and slave accounts and connect them to MetaApi accounts via connectionId field\n    configuration_api = copy_factory.configuration_api\n    master_account_id = configuration_api.generate_account_id()\n    slave_account_id = configuration_api.generate_account_id()\n    await configuration_api.update_account(master_account_id, {\n        'name': 'Demo account',\n        'connectionId': master_metaapi_account.id,\n        'subscriptions': []\n    })\n\n    # create a strategy being copied\n    strategy_id = await configuration_api.generate_strategy_id()\n    await configuration_api.update_strategy(strategy_id['id'], {\n        'name': 'Test strategy',\n        'description': 'Some useful description about your strategy',\n        'positionLifecycle': 'hedging',\n        'connectionId': slave_metaapi_account.id,\n        'maxTradeRisk': 0.1,\n        'stopOutRisk': {\n            'value': 0.4,\n            'startTime': '2020-08-24T00:00:00.000Z'\n        },\n        'timeSettings': {\n            'lifetimeInHours': 192,\n            'openingIntervalInMinutes': 5\n        }\n    })\n\n    # subscribe slave CopyFactory accounts to the strategy\n    await configuration_api.update_account(master_account_id, {\n        'name': 'Demo account',\n        'connectionId': master_metaapi_account.id,\n        'subscriptions': [\n            {\n                'strategyId': strategy_id,\n                'multiplier': 1\n            }\n        ]\n    })\n\nSee in-code documentation for full definition of possible configuration options.\n\nRetrieving trade copying history\n-------------------------------------\n\nCopyFactory allows you to monitor transactions conducted on trading accounts in real time.\n\nRetrieving trading history on provider side\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    history_api = copy_factory.history_api\n\n    # retrieve list of subscribers\n    print(await history_api.get_subscribers())\n\n    # retrieve list of strategies provided\n    print(await history_api.get_provided_strategies())\n\n    # retrieve trading history, please note that this method support pagination and limits number of records\n    print(await history_api.get_provided_strategies_transactions(datetime.fromisoformat('2020-08-01'), datetime.fromisoformat('2020-09-01')))\n\n\nRetrieving trading history on subscriber side\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    history_api = copy_factory.history_api\n\n    # retrieve list of providers\n    print(await history_api.get_providers())\n\n    # retrieve list of strategies subscribed to\n    print(await history_api.get_strategies_subscribed())\n\n    # retrieve trading history, please note that this method support pagination and limits number of records\n    print(await history_api.get_strategies_subscribed_transactions(datetime.fromisoformat('2020-08-01'), datetime.fromisoformat('2020-09-01')))\n\nResynchronizing slave accounts to masters\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThere is a configurable time limit during which the trades can be opened. Sometimes trades can not open in time due to broker errors or trading session time discrepancy.\nYou can resynchronize a slave account to place such late trades. Please note that positions which were\nclosed manually on a slave account will also be reopened during resynchronization.\n\n.. code-block:: python\n\n    account_id = '...' # CopyFactory account id\n\n    # resynchronize all strategies\n    await copy_factory.trading_api.resynchronize(account_id)\n\n    # resynchronize specific strategy\n    await copy_factory.trading_api.resynchronize(account_id, ['ABCD'])\n\nManaging stopouts\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nA subscription to a strategy can be stopped if the strategy have exceeded allowed risk limit.\n\n.. code-block:: python\n\n    trading_api = copy_factory.trading_api\n    account_id = '...' # CopyFactory account id\n\n    # retrieve list of strategy stopouts\n    print(await trading_api.get_stopouts(account_id))\n\n    # reset a stopout so that subscription can continue\n    await trading_api.reset_stopout(account_id, 'daily-equity)\n\nKeywords: MetaTrader API, MetaTrader REST API, MetaTrader websocket API,\nMetaTrader 5 API, MetaTrader 5 REST API, MetaTrader 5 websocket API,\nMetaTrader 4 API, MetaTrader 4 REST API, MetaTrader 4 websocket API,\nMT5 API, MT5 REST API, MT5 websocket API, MT4 API, MT4 REST API,\nMT4 websocket API, MetaTrader SDK, MetaTrader SDK, MT4 SDK, MT5 SDK,\nMetaTrader 5 SDK, MetaTrader 4 SDK, MetaTrader python SDK, MetaTrader 5\npython SDK, MetaTrader 4 python SDK, MT5 python SDK, MT4 python SDK,\nFX REST API, Forex REST API, Forex websocket API, FX websocket API, FX\nSDK, Forex SDK, FX python SDK, Forex python SDK, Trading API, Forex\nAPI, FX API, Trading SDK, Trading REST API, Trading websocket API,\nTrading SDK, Trading python SDK",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agiliumtrade-ai/metaapi-python-sdk",
    "keywords": "metaapi.cloud,MetaTrader,MetaTrader 5,MetaTrader 4,MetaTrader5,MetaTrader4,MT,MT4,MT5,forex,trading,API,REST,websocket,client,sdk,cloud,free,copy trading,copytrade,copy trade,trade copying",
    "license": "SEE LICENSE IN LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaapi-cloud-sdk",
    "package_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/agiliumtrade-ai/metaapi-python-sdk"
    },
    "release_url": "https://pypi.org/project/metaapi-cloud-sdk/9.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SDK for MetaApi, a professional cloud forex API which includes MetaTrader REST API and MetaTrader websocket API. Supports both MetaTrader 5 (MT5) and MetaTrader 4 (MT4). CopyFactorycopy trading API included. (https://metaapi.cloud)",
    "version": "9.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973035,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fde4b2cb22b3a9fdf7221355894a097d71589eb7a4278d087eb9c6cf2102160a",
        "md5": "c59790b3139006503c6bcc95a88377b8",
        "sha256": "940c5dc167d98aa9e17e4b4f378e9ab8819f0579e76a2a8c825b8ee81c64d13b"
      },
      "downloads": -1,
      "filename": "metaapi_cloud_sdk-9.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c59790b3139006503c6bcc95a88377b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1130954,
      "upload_time": "2020-11-08T14:33:49",
      "upload_time_iso_8601": "2020-11-08T14:33:49.342798Z",
      "url": "https://files.pythonhosted.org/packages/fd/e4/b2cb22b3a9fdf7221355894a097d71589eb7a4278d087eb9c6cf2102160a/metaapi_cloud_sdk-9.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}