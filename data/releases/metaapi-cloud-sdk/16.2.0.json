{
  "info": {
    "author": "Agilium Labs LLC",
    "author_email": "agiliumtrade@agiliumtrade.ai",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "metaapi.cloud SDK for Python\n############################\n\nMetaApi is a powerful, fast, cost-efficient, easy to use and standards-driven cloud forex trading API for MetaTrader 4 and MetaTrader 5 platform designed for traders, investors and forex application developers to boost forex application development process. MetaApi can be used with any broker and does not require you to be a brokerage.\n\nCopyFactory is a simple yet powerful copy-trading API which is a part of MetaApi. See below for CopyFactory readme section.\n\nMetaApi is a paid service, but API access to one MetaTrader account is free of charge.\n\nThe `MetaApi pricing <https://metaapi.cloud/#pricing>`_ was developed with the intent to make your charges less or equal to what you would have to pay\nfor hosting your own infrastructure. This is possible because over time we managed to heavily optimize\nour MetaTrader infrastructure. And with MetaApi you can save significantly on application development and\nmaintenance costs and time thanks to high-quality API, open-source SDKs and convenience of a cloud service.\n\nOfficial REST and websocket API documentation: https://metaapi.cloud/docs/client/\n\nPlease note that this SDK provides an abstraction over REST and websocket API to simplify your application logic.\n\nFor more information about SDK APIs please check docstring documentation in source codes located inside lib folder of this package.\n\nWorking code examples\n=====================\nPlease check `this short video <https://youtu.be/LIqFOOOLP-g>`_ to see how you can download samples via our web application.\n\nYou can find code examples at `examples folder of our github repo <https://github.com/agiliumtrade-ai/metaapi-python-sdk/tree/master/examples>`_ or in the examples folder of the pip package.\n\nWe have composed a `short guide explaining how to use the example code <https://metaapi.cloud/docs/client/usingCodeExamples/>`_\n\nInstallation\n============\n.. code-block:: bash\n\n    pip install metaapi-cloud-sdk\n\nConnecting to MetaApi\n=====================\nPlease use one of these ways:\n\n1. https://app.metaapi.cloud/token web UI to obtain your API token.\n2. An account access token which grants access to a single account. See section below on instructions on how to retrieve account access token.\n\nSupply token to the MetaApi class constructor.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi\n\n    token = '...'\n    api = MetaApi(token=token)\n\nRetrieving account access token\n===============================\nAccount access token grants access to a single account. You can retrieve account access token via API:\n\n.. code-block:: python\n\n    account_id = '...'\n    account = await api.metatrader_account_api.get_account(account_id=account_id)\n    account_access_token = account.access_token\n    print(account_access_token)\n\nAlternatively, you can retrieve account access token via web UI on https://app.metaapi.cloud/accounts page (see `this video <https://youtu.be/PKYiDns6_xI>`_).\n\nManaging MetaTrader accounts (API servers for MT accounts)\n==========================================================\nBefore you can use the API you have to add an MT account to MetaApi and start an API server for it.\n\nManaging MetaTrader accounts (API servers) via web UI\n-----------------------------------------------------\nYou can manage MetaTrader accounts here: https://app.metaapi.cloud/accounts\n\nCreate a MetaTrader account (API server) via API\n------------------------------------------------\n\nCreating an account using automatic broker settings detection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTo create an account, supply a request with account data and the platform field indicating the MetaTrader version.\nProvisioning profile id must not be included in the request for automatic broker settings detection.\n\n.. code-block:: python\n\n    try:\n        account = await api.metatrader_account_api.create_account(account={\n          'name': 'Trading account #1',\n          'type': 'cloud',\n          'login': '1234567',\n          'plattform': 'mt4',\n          # password can be investor password for read-only access\n          'password': 'qwerty',\n          'server': 'ICMarketsSC-Demo',\n          'application': 'MetaApi',\n          'magic': 123456,\n          'quoteStreamingIntervalInSeconds': 2.5, # set to 0 to receive quote per tick\n          'reliability': 'regular' # set this field to 'high' value if you want to increase uptime of your account (recommended for production environments)\n        })\n    except Exception as err:\n        # process errors\n        if hasattr(err, 'details'):\n            # returned if the server file for the specified server name has not been found\n            # recommended to check the server name or create the account using a provisioning profile\n            if err.details == 'E_SRV_NOT_FOUND':\n                print(err)\n            # returned if the server has failed to connect to the broker using your credentials\n            # recommended to check your login and password\n            elif err.details == 'E_AUTH':\n                print(err)\n            # returned if the server has failed to detect the broker settings\n            # recommended to try again later or create the account using a provisioning profile\n            elif err.details == 'E_SERVER_TIMEZONE':\n                print(err)\n\nIf the settings have not yet been detected for the broker, the server will begin the process of detection, and you will receive a response with wait time:\n\n.. code-block:: python\n\n    Retrying request in 60 seconds because request returned message: Automatic broker settings detection is in progress, please retry in 60 seconds\n\nThe client will automatically retry the request when the recommended time passes.\n\nError handling\n^^^^^^^^^^^^^^\nSeveral types of errors are possible during the request:\n\n- Server file not found\n- Authentication error\n- Settings detection error\n\nServer file not found\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThis error is returned if the server file for the specified server name has not been found. In case of this error it\nis recommended to check the server name. If the issue persists, it is recommended to create the account using a\nprovisioning profile.\n\n.. code-block:: python\n\n    {\n        \"id\": 3,\n        \"error\": \"ValidationError\",\n        \"message\": \"We were unable to retrieve the server file for this broker. Please check the server name or configure the provisioning profile manually.\",\n        \"details\": \"E_SRV_NOT_FOUND\"\n    }\n\nAuthentication error\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThis error is returned if the server has failed to connect to the broker using your credentials. In case of this\nerror it is recommended to check your login and password, and try again.\n\n.. code-block:: python\n\n    {\n        \"id\": 3,\n        \"error\": \"ValidationError\",\n        \"message\": \"We failed to authenticate to your broker using credentials provided. Please check that your MetaTrader login, password and server name are correct.\",\n        \"details\": \"E_AUTH\"\n    }\n\nSettings detection error\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThis error is returned if the server has failed to detect the broker settings. In case of this error it is recommended\nto retry the request later, or create the account using a provisioning profile.\n\n.. code-block:: python\n\n    {\n        \"id\": 3,\n        \"error\": \"ValidationError\",\n        \"message\": \"We were not able to retrieve server settings using credentials provided. Please try again later or configure the provisioning profile manually.\",\n        \"details\": \"E_SERVER_TIMEZONE\"\n    }\n\nCreating an account using a provisioning profile\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nIf creating the account with automatic broker settings detection has failed, you can create it using a `provisioning profile. <#managing-provisioning-profiles>`_\nTo create an account using a provisioning profile, create a provisioning profile for the MetaTrader server, and then add the provisioningProfileId field to the request:\n\n.. code-block:: python\n\n    account = await api.metatrader_account_api.create_account(account={\n      'name': 'Trading account #1',\n      'type': 'cloud',\n      'login': '1234567',\n      # password can be investor password for read-only access\n      'password': 'qwerty',\n      'server': 'ICMarketsSC-Demo',\n      'provisioningProfileId': provisioningProfile.id,\n      'application': 'MetaApi',\n      'magic': 123456,\n      'quoteStreamingIntervalInSeconds': 2.5, # set to 0 to receive quote per tick\n      'reliability': 'regular' # set this field to 'high' value if you want to increase uptime of your account (recommended for production environments)\n    })\n\nRetrieving existing accounts via API\n------------------------------------\n.. code-block:: python\n\n    # filter and paginate accounts, see doc for full list of filter options available\n    accounts = await api.metatrader_account_api.get_accounts(accounts_filter={\n        'limit': 10,\n        'offset': 0,\n        'query': 'ICMarketsSC-MT5',\n        'state': ['DEPLOYED']\n    })\n    # get accounts without filter (returns 1000 accounts max)\n    accounts = await api.metatrader_account_api.get_accounts();\n\n    account = await api.metatrader_account_api.get_account(account_id='accountId')\n\nUpdating an existing account via API\n------------------------------------\n.. code-block:: python\n\n    await account.update(account={\n        'name': 'Trading account #1',\n        'login': '1234567',\n        # password can be investor password for read-only access\n        'password': 'qwerty',\n        'server': 'ICMarketsSC-Demo',\n        'quoteStreamingIntervalInSeconds': 2.5\n    })\n\nRemoving an account\n-------------------\n.. code-block:: python\n\n    await account.remove()\n\nDeploying, undeploying and redeploying an account (API server) via API\n----------------------------------------------------------------------\n.. code-block:: python\n\n    await account.deploy()\n    await account.undeploy()\n    await account.redeploy()\n\nManage custom experts (EAs)\n---------------------------\nCustom expert advisors can only be used for MT4 accounts on g1 infrastructure. EAs which use DLLs are not supported.\n\nCreating an expert advisor via API\n----------------------------------\nYou can use the code below to create an EA. Please note that preset field is a base64-encoded preset file.\n\n.. code-block:: python\n\n    expert = await account.create_expert_advisor(expert_id='expertId', expert={\n        'period': '1h',\n        'symbol': 'EURUSD',\n        'preset': 'a2V5MT12YWx1ZTEKa2V5Mj12YWx1ZTIKa2V5Mz12YWx1ZTMKc3VwZXI9dHJ1ZQ'\n    })\n    await expert.upload_file('/path/to/custom-ea')\n\nRetrieving existing experts via API\n-----------------------------------\n\n.. code-block:: python\n\n    experts = await account.get_expert_advisors()\n\nRetrieving existing expert by id via API\n----------------------------------------\n\n.. code-block:: python\n\n    expert = await account.get_expert_advisor(expert_id='expertId')\n\nUpdating existing expert via API\n--------------------------------\nYou can use the code below to update an EA. Please note that preset field is a base64-encoded preset file.\n\n.. code-block:: python\n\n    await expert.update(expert={\n        'period': '4h',\n        'symbol': 'EURUSD',\n        'preset': 'a2V5MT12YWx1ZTEKa2V5Mj12YWx1ZTIKa2V5Mz12YWx1ZTMKc3VwZXI9dHJ1ZQ'\n    })\n    await expert.upload_file('/path/to/custom-ea')\n\nRemoving expert via API\n-----------------------\n\n.. code-block:: python\n\n    await expert.remove()\n\nManaging provisioning profiles\n==============================\nProvisioning profiles can be used as an alternative way to create MetaTrader accounts if the automatic broker settings\ndetection has failed.\n\nManaging provisioning profiles via web UI\n-----------------------------------------\nYou can manage provisioning profiles here: https://app.metaapi.cloud/provisioning-profiles\n\nCreating a provisioning profile via API\n---------------------------------------\n.. code-block:: python\n\n    # if you do not have created a provisioning profile for your broker,\n    # you should do it before creating an account\n    provisioningProfile = await api.provisioning_profile_api.create_provisioning_profile(profile={\n        'name': 'My profile',\n        'version': 5,\n        'brokerTimezone': 'EET',\n        'brokerDSTSwitchTimezone': 'EET'\n    })\n    # servers.dat file is required for MT5 profile and can be found inside\n    # config directory of your MetaTrader terminal data folder. It contains\n    # information about available broker servers\n    await provisioningProfile.upload_file(file_name='servers.dat', file='/path/to/servers.dat')\n    # for MT4, you should upload an .srv file instead\n    await provisioningProfile.upload_file(file_name='broker.srv', file='/path/to/broker.srv')\n\nRetrieving existing provisioning profiles via API\n-------------------------------------------------\n.. code-block:: python\n\n    provisioningProfiles = await api.provisioning_profile_api.get_provisioning_profiles()\n    provisioningProfile = await api.provisioning_profile_api.get_provisioning_profile(provisioning_profile_id='profileId')\n\nUpdating a provisioning profile via API\n---------------------------------------\n.. code-block:: python\n\n    await provisioningProfile.update(profile={'name': 'New name'})\n    # for MT5, you should upload a servers.dat file\n    await provisioningProfile.upload_file(file_name='servers.dat', file='/path/to/servers.dat')\n    # for MT4, you should upload an .srv file instead\n    await provisioningProfile.upload_file(file_name='broker.srv', file='/path/to/broker.srv')\n\nRemoving a provisioning profile\n-------------------------------\n.. code-block:: python\n\n    await provisioningProfile.remove()\n\nAccess MetaTrader account via RPC API\n=====================================\nRPC API let you query the trading terminal state. You should use\nRPC API if you develop trading monitoring apps like myfxbook or other\nsimple trading apps.\n\nQuery account information, positions, orders and history via RPC API\n--------------------------------------------------------------------\n.. code-block:: python\n\n    connection = account.get_rpc_connection()\n\n    await connection.wait_synchronized()\n\n    # retrieve balance and equity\n    print(await connection.get_account_information())\n    # retrieve open positions\n    print(await connection.get_positions())\n    # retrieve a position by id\n    print(await connection.get_position(position_id='1234567'))\n    # retrieve pending orders\n    print(await connection.get_orders())\n    # retrieve a pending order by id\n    print(await connection.get_order(order_id='1234567'))\n    # retrieve history orders by ticket\n    print(await connection.get_history_orders_by_ticket(ticket='1234567'))\n    # retrieve history orders by position id\n    print(await connection.get_history_orders_by_position(position_id='1234567'))\n    # retrieve history orders by time range\n    print(await connection.get_history_orders_by_time_range(start_time=start_time, end_time=end_time))\n    # retrieve history deals by ticket\n    print(await connection.get_deals_by_ticket(ticket='1234567'))\n    # retrieve history deals by position id\n    print(await connection.get_deals_by_position(position_id='1234567'))\n    # retrieve history deals by time range\n    print(await connection.get_deals_by_time_range(start_time=start_time, end_time=end_time))\n\nQuery contract specifications and quotes via RPC API\n----------------------------------------------------\n.. code-block:: python\n\n    connection = account.get_rpc_connection()\n\n    await connection.wait_synchronized()\n\n    # first, subscribe to market data\n    await connection.subscribe_to_market_data(symbol='GBPUSD')\n\n    # read symbols available\n    print(await connection.get_symbols())\n    # read contract specification\n    print(await connection.get_symbol_specification(symbol='GBPUSD'))\n    # read current price\n    print(await connection.get_symbol_price(symbol='GBPUSD'))\n\n    # unsubscribe from market data when no longer needed\n    await connection.unsubscribe_from_market_data(symbol='GBPUSD')\n\nQuery historical market data via RPC API\n----------------------------------------\nCurrently this API is supported on G1 only.\n\n.. code-block:: python\n\n    from datetime import datetime\n\n    # retrieve 1000 candles before the specified time\n    candles = await account.get_historical_candles(symbol='EURUSD', timeframe='1m',\n                                                   start_time=datetime.fromisoformat('2021-05-01'), limit=1000)\n\n    # retrieve 1000 ticks after the specified time\n    ticks = await account.get_historical_ticks(symbol='EURUSD', start_time=datetime.fromisoformat('2021-05-01'),\n                                               offset=5, limit=1000)\n\n    # retrieve 1000 latest ticks\n    ticks = await account.get_historical_ticks(symbol='EURUSD', start_time=None, offset=0, limit=1000)\n\nUse real-time streaming API\n---------------------------\nReal-time streaming API is good for developing trading applications like trade copiers or automated trading strategies.\nThe API synchronizes the terminal state locally so that you can query local copy of the terminal state really fast.\n\nSynchronizing and reading terminal state\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.. code-block:: python\n\n    account = await api.metatrader_account_api.get_account(account_id='accountId')\n    connection = account.get_streaming_connection()\n    await connection.connect()\n\n    # access local copy of terminal state\n    terminalState = connection.terminal_state\n\n    # wait until synchronization completed\n    await connection.wait_synchronized()\n\n    print(terminalState.connected)\n    print(terminalState.connected_to_broker)\n    print(terminalState.account_information)\n    print(terminalState.positions)\n    print(terminalState.orders)\n    # symbol specifications\n    print(terminalState.specifications)\n    print(terminalState.specification(symbol='EURUSD'))\n    print(terminalState.price(symbol='EURUSD'))\n\n    # access history storage\n    historyStorage = connection.history_storage\n\n    # both orderSynchronizationFinished and dealSynchronizationFinished\n    # should be true once history synchronization have finished\n    print(historyStorage.order_synchronization_finished)\n    print(historyStorage.deal_synchronization_finished)\n\n    print(historyStorage.deals)\n    print(historyStorage.history_orders)\n\nOverriding local history storage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nBy default history is stored in memory only. You can override history storage to save trade history to a persistent storage like MongoDB database.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import HistoryStorage\n\n    class MongodbHistoryStorage(HistoryStorage):\n        # implement the abstract methods, see MemoryHistoryStorage for sample\n        # implementation\n\n    historyStorage = MongodbHistoryStorage()\n\n    # Note: if you will not specify history storage, then in-memory storage\n    # will be used (instance of MemoryHistoryStorage)\n    connection = account.get_streaming_connection(history_storage=historyStorage)\n    await connection.connect()\n\n    # access history storage\n    historyStorage = connection.history_storage;\n\n    # invoke other methods provided by your history storage implementation\n    print(await historyStorage.yourMethod())\n\nReceiving synchronization events\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nYou can override SynchronizationListener in order to receive synchronization event notifications, such as account/position/order/history updates or symbol quote updates.\n\n.. code-block:: python\n\n    from metaapi_cloud_sdk import SynchronizationListener\n\n    # receive synchronization event notifications\n    # first, implement your listener\n    class MySynchronizationListener(SynchronizationListener):\n        # override abstract methods you want to receive notifications for\n\n    # retrieving a connection\n    connection = account.get_streaming_connection(history_storage=historyStorage)\n\n    # now add the listener\n    listener = MySynchronizationListener()\n    connection.add_synchronization_listener(listener=listener)\n\n    # remove the listener when no longer needed\n    connection.remove_synchronization_listener(listener=listener)\n\n    # open the connection after adding listeners\n    await connection.connect()\n\nRetrieve contract specifications and quotes via streaming API\n-------------------------------------------------------------\n.. code-block:: python\n\n    connection = account.get_streaming_connection()\n    await connection.connect()\n\n    await connection.wait_synchronized()\n\n    # first, subscribe to market data\n    await connection.subscribe_to_market_data(symbol='GBPUSD')\n\n    # read contract specification\n    print(terminalState.specification(symbol='EURUSD'))\n\n    # read current price\n    print(terminalState.price(symbol='EURUSD'))\n\n    # unsubscribe from market data when no longer needed\n    await connection.unsubscribe_from_market_data(symbol='GBPUSD')\n\nExecute trades (both RPC and streaming APIs)\n--------------------------------------------\n.. code-block:: python\n\n    connection = account.get_rpc_connection()\n    # or\n    connection = account.get_streaming_connection()\n    await connection.connect()\n\n    await connection.wait_synchronized()\n\n    # trade\n    print(await connection.create_market_buy_order(symbol='GBPUSD', volume=0.07, stop_loss=0.9, take_profit=2.0,\n        options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_market_sell_order(symbol='GBPUSD', volume=0.07, stop_loss=2.0, take_profit=0.9,\n        options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_limit_buy_order(symbol='GBPUSD', volume=0.07, open_price=1.0, stop_loss=0.9,\n        take_profit=2.0, options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_limit_sell_order(symbol='GBPUSD', volume=0.07, open_price=1.5, stop_loss=2.0,\n        take_profit=0.9, options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_buy_order(symbol='GBPUSD', volume=0.07, open_price=1.5, stop_loss=2.0,\n        take_profit=0.9, options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_sell_order(symbol='GBPUSD', volume=0.07, open_price=1.0, stop_loss=2.0,\n        take_profit=0.9, options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_limit_buy_order(symbol='GBPUSD', volume=0.07, open_price=1.5,\n        stop_limit_price=1.4, stop_loss=0.9, take_profit=2.0, options={'comment': 'comment',\n        'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.create_stop_limit_sell_order(symbol='GBPUSD', volume=0.07, open_price=1.0,\n        stop_limit_price=1.1, stop_loss=2.0, take_profit=0.9, options={'comment': 'comment',\n        'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print(await connection.modify_position(position_id='46870472', stop_loss=2.0, take_profit=0.9))\n    print(await connection.close_position_partially(position_id='46870472', volume=0.9))\n    print(await connection.close_position(position_id='46870472'))\n    print(await connection.close_by(position_id='46870472', opposite_position_id='46870482'))\n    print(await connection.close_positions_by_symbol(symbol='EURUSD'))\n    print(await connection.modify_order(order_id='46870472', open_price=1.0, stop_loss=2.0, take_profit=0.9))\n    print(await connection.cancel_order(order_id='46870472'))\n\n    # if you need to, check the extra result information in stringCode and numericCode properties of the response\n    result = await connection.create_market_buy_order(symbol='GBPUSD', volume=0.07, stop_loss=0.9, take_profit=2.0,\n        options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'}))\n    print('Trade successful, result code is ' + result['stringCode'])\n\n    # catch and output exception\n    try:\n        await connection.create_market_buy_order(symbol='GBPUSD', volume=0.07, stop_loss=0.9, take_profit=2.0,\n            options={'comment': 'comment', 'clientId': 'TE_GBPUSD_7hyINWqAl'})\n    except Exception as err:\n        print(api.format_error(err))\n\nTrailing stop loss\n^^^^^^^^^^^^^^^^^^\nTrailing stop loss is a trade option that allows you to automatically configure and change the order/position stop loss\nbased on the current price of the symbol. The specified settings are run on the server and modify the stop loss\nregardless of your connection to the account. The stop loss can be modified no more often than once in 15 seconds. Two\ntypes of trailing stop loss are available: distance stop loss and threshold stop loss, but both can be specified at the\nsame time. You can find the full description here:\n`https://metaapi.cloud/docs/client/models/trailingStopLoss/ <https://metaapi.cloud/docs/client/models/trailingStopLoss/>`_\n\n.. code-block:: python\n\n    # distance trailing stop loss\n    print(await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, {\n        'trailingStopLoss': {\n            'distance': {\n                'distance': 200,\n                'units': 'RELATIVE_POINTS'\n            }\n        }\n    }))\n\n    # threshold trailing stop loss\n    print(await connection.create_market_buy_order('GBPUSD', 0.07, 0.9, 2.0, {\n        'trailingStopLoss': {\n            'thresholds': [\n                {\n                    'threshold\": 50,\n                    'stopLoss\": 100\n                },\n                {\n                    'threshold\": 100,\n                    'stopLoss\": 50\n                }\n            ],\n            'units': 'RELATIVE_POINTS'\n        }\n    }))\n\nMonitoring account connection health and uptime\n===============================================\nYou can monitor account connection health using MetaApiConnection.health_monitor API.\n\n.. code-block:: python\n\n    monitor = connection.health_monitor\n    # retrieve server-side app health status\n    print(monitor.server_health_status)\n    # retrieve detailed connection health status\n    print(monitor.health_status)\n    # retrieve account connection update measured over last 7 days\n    print(monitor.uptime)\n\nTracking latencies\n==================\nYou can track latencies using MetaApi.latency_monitor API. Client-side latencies include network communication delays, thus the lowest client-side latencies are achieved if you host your app in AWS Ohio region.\n\n.. code-block:: python\n\n    api = MetaApi('token', {'enableLatencyMonitor': True})\n    monitor = api.latency_monitor\n    # retrieve trade latency stats\n    print(monitor.trade_latencies)\n    # retrieve update streaming latency stats\n    print(monitor.update_latencies)\n    # retrieve quote streaming latency stats\n    print(monitor.price_latencies)\n    # retrieve request latency stats\n    print(monitor.request_latencies)\n\nManaging MetaTrader demo accounts via API\n=========================================\nPlease note that not all MT4/MT5 servers allows you to create demo accounts using the method below.\n\nCreate a MetaTrader 4 demo account\n----------------------------------\n.. code-block:: python\n\n    demo_account = await api.metatrader_demo_account_api.create_mt4_demo_account(profile_id=provisioningProfile.id,\n        account={\n            'balance': 100000,\n            'email': 'example@example.com',\n            'leverage': 100,\n            'serverName': 'Exness-Trial4'\n        })\n\nCreate a MetaTrader 5 demo account\n----------------------------------\n.. code-block:: python\n\n    demo_account = await api.metatrader_demo_account_api.create_mt5_demo_account(profile_id=provisioningProfile.id,\n        account={\n            'balance': 100000,\n            'email': 'example@example.com',\n            'leverage': 100,\n            'serverName': 'ICMarketsSC-Demo'\n        })\n\nEnable Logging logging\n===========================================\nBy default SDK logs messages to console. You can select the SDK to use `logging <https://docs.python.org/3/library/logging.html>`_ logging\nlibrary by calling `MetaApi.enable_logging()` static method before creating MetaApi instances.\n.. code-block:: python\n\n    from metaapi_cloud_sdk import MetaApi\n\n    MetaApi.enable_logging()\n\n    meta_api = MetaApi(token)\n\nPlease note that the SDK does not configure logging automatically. If you decide to use logging, then your application\nis still responsible to configuring logging appenders and categories. Please refer to logging documentation for details.\n\nRate limits & quotas\n===========================================\nAPI calls you make are subject to rate limits. See `MT account management API <https://metaapi.cloud/docs/provisioning/rateLimiting/>`_ and `MetaApi API <https://metaapi.cloud/docs/client/rateLimiting/>`_ for details.\n\nMetaApi applies quotas to the number of accounts and provisioning profiles, for more details see the `MT account management API quotas <https://metaapi.cloud/docs/provisioning/userQuota/>`_\n\nCopyFactory copy trading API\n===========================================\n\nCopyFactory is a powerful trade copying API which makes developing forex\ntrade copying applications as easy as writing few lines of code.\n\nYou can find CopyFactory Python SDK documentation here: `https://github.com/agiliumtrade-ai/copyfactory-python-sdk <https://github.com/agiliumtrade-ai/copyfactory-python-sdk>`_\n\nMetaStats trading statistics API\n===========================================\n\nMetaStats is a powerful trade statistics API which makes it possible to add forex trading metrics into forex\napplications.\n\nYou can find MetaStats Python SDK documentation here:\n`https://github.com/agiliumtrade-ai/metastats-python-sdk <https://github.com/agiliumtrade-ai/metastats-python-sdk>`_",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/agiliumtrade-ai/metaapi-python-sdk",
    "keywords": "metaapi.cloud,MetaTrader,MetaTrader 5,MetaTrader 4,MetaTrader5,MetaTrader4,MT,MT4,MT5,forex,trading,API,REST,websocket,client,sdk,cloud,free,copy trading,copytrade,copy trade,trade copying",
    "license": "SEE LICENSE IN LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metaapi-cloud-sdk",
    "package_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/metaapi-cloud-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/agiliumtrade-ai/metaapi-python-sdk"
    },
    "release_url": "https://pypi.org/project/metaapi-cloud-sdk/16.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SDK for MetaApi, a professional cloud forex API which includes MetaTrader REST API and MetaTrader websocket API. Supports both MetaTrader 5 (MT5) and MetaTrader 4 (MT4). CopyFactorycopy trading API included. (https://metaapi.cloud)",
    "version": "16.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973035,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa09b562b57ea7eb39979d20a8d17583e333781233f70da5e2912d8067e0efbd",
        "md5": "5b13690d6da98eff1896ebdf0fd58ee3",
        "sha256": "e28b32c9b6a610f79314ebafe26126376e3f3670b0d9e067b6940981d7ec4b28"
      },
      "downloads": -1,
      "filename": "metaapi_cloud_sdk-16.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5b13690d6da98eff1896ebdf0fd58ee3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 175701,
      "upload_time": "2021-12-12T15:52:20",
      "upload_time_iso_8601": "2021-12-12T15:52:20.019551Z",
      "url": "https://files.pythonhosted.org/packages/aa/09/b562b57ea7eb39979d20a8d17583e333781233f70da5e2912d8067e0efbd/metaapi_cloud_sdk-16.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}