{
  "info": {
    "author": "Alisue",
    "author_email": "lambdalisue@hashnote.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-permission\n==========================\n.. image:: https://img.shields.io/travis/lambdalisue/django-permission/master.svg?style=flat-square\n    :target: http://travis-ci.org/lambdalisue/django-permission\n    :alt: Build status\n\n.. image:: https://img.shields.io/coveralls/lambdalisue/django-permission/master.svg?style=flat-square\n    :target: https://coveralls.io/github/lambdalisue/django-permission?branch=master \n    :alt: Coverage\n\n.. image:: https://img.shields.io/requires/github/lambdalisue/django-permission/master.svg?style=flat-square\n    :target: https://requires.io/github/lambdalisue/django-permission/requirements/?branch=master\n    :alt: Requirements Status\n\n.. image:: https://img.shields.io/scrutinizer/g/lambdalisue/django-permission/master.svg?style=flat-square\n    :target: https://scrutinizer-ci.com/g/lambdalisue/django-permission/inspections\n    :alt: Inspection\n\n.. image:: https://img.shields.io/pypi/v/django-permission.svg?style=flat-square\n    :target: setup.py\n    :alt: Version\n\n.. image:: https://img.shields.io/pypi/l/django-permission.svg?style=flat-square\n    :target: LICENSE\n    :alt: License\n\n.. image:: https://img.shields.io/pypi/format/django-permission.svg?style=flat-square\n    :alt: Format\n\n.. image:: https://img.shields.io/pypi/pyversions/django-permission.svg?style=flat-square\n    :alt: Supported python versions\n\n.. image:: https://img.shields.io/pypi/status/django-permission.svg?style=flat-square\n    :alt: Status\n\nAuthor\n    Alisue <lambdalisue@hashnote.net>\nSupported python versions\n    Python 2.7, 3.3, 3.4, 3.5, 3.6\nSupported django versions\n    Django 1.8 - 1.11b\n\nAn enhanced permission library which enables a *logic-based permission system*\nto handle complex permissions in Django.\n\n\nDocumentation\n-------------\nhttp://django-permission.readthedocs.org/en/latest/\n\nInstallation\n------------\nUse pip_ like::\n\n    $ pip install django-permission\n\n.. _pip:  https://pypi.python.org/pypi/pip\n\n\nUsage\n-----\n\nThe following might help you to understand as well.\n\n- Basic strategy or so on, `Issue #28 <https://github.com/lambdalisue/django-permission/issues/28>`_\n- Advanced usage and examples, `Issue #26 <https://github.com/lambdalisue/django-permission/issues/26>`_\n\nConfiguration\n~~~~~~~~~~~~~\n1.  Add ``permission`` to the ``INSTALLED_APPS`` in your settings\n    module\n\n    .. code:: python\n\n        INSTALLED_APPS = (\n            # ...\n            'permission',\n        )\n\n2.  Add our extra authorization/authentication backend\n\n    .. code:: python\n\n        AUTHENTICATION_BACKENDS = (\n            'django.contrib.auth.backends.ModelBackend', # default\n            'permission.backends.PermissionBackend',\n        )\n\n3.  Follow the instructions below to apply logical permissions to django models\n\nAutodiscovery\n~~~~~~~~~~~~~\nLike django's admin package, django-permission automatically discovers the ``perms.py`` in your application directory **by running ``permission.autodiscover()``**.\nAdditionally, if the ``perms.py`` module has a ``PERMISSION_LOGICS`` variable, django-permission automatically run the following functions to apply the permission logics.\n\n.. code:: python\n\n    for model, permission_logic_instance in PERMISSION_LOGICS:\n        if isinstance(model, str):\n            model = get_model(*model.split(\".\", 1))\n        add_permission_logic(model, permission_logic_instance)\n\n.. note::\n\n    Autodiscover feature is automatically called if you are using django higher than 1.7 so no need to follow the tutorial below.\n    To disable, use `PERMISSION_AUTODISCOVER_ENABLE` setting.\n\n**Quick tutorial**\n\n1.  Add ``import permission; permission.autodiscover()`` to your ``urls.py`` like:\n\n    .. code:: python\n\n        from django.conf.urls import patterns, include, url\n        from django.contrib import admin\n\n        admin.autodiscover()\n        # add this line\n        import permission; permission.autodiscover()\n\n        urlpatterns = patterns('',\n            url(r'^admin/', include(admin.site.urls)),\n            # ...\n        )\n\n2.  Write ``perms.py`` in your application directory like:\n\n    .. code:: python\n\n        from permission.logics import AuthorPermissionLogic\n        from permission.logics import CollaboratorsPermissionLogic\n\n        PERMISSION_LOGICS = (\n            ('your_app.Article', AuthorPermissionLogic()),\n            ('your_app.Article', CollaboratorsPermissionLogic()),\n        )\n\nYou can specify a different module or variable name, with ``PERMISSION_AUTODISCOVER_MODULE_NAME`` or ``PERMISSION_AUTODISCOVER_VARIABLE_NAME`` respectively.\n\nApply permission logic\n~~~~~~~~~~~~~~~~~~~~~~~~~\nLet's assume you wrote an article model which has an ``author`` attribute to store the creator of the article, and you want to give that author full control permissions\n(e.g. add, change and delete permissions).\n\nWhat you need to do is just applying ``permission.logics.AuthorPermissionLogic``\nto the ``Article`` model like\n\n.. code:: python\n\n    from django.db import models\n    from django.contrib.auth.models import User\n\n\n    class Article(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        author = models.ForeignKey(User)\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    # apply AuthorPermissionLogic\n    from permission import add_permission_logic\n    from permission.logics import AuthorPermissionLogic\n    add_permission_logic(Article, AuthorPermissionLogic())\n\n\n.. note::\n    From django-permission version 0.8.0, you can specify related object with\n    `field__name` attribute like\n    `django queryset lookup <https://docs.djangoproject.com/en/1.10/topics/db/queries/#field-lookups>`_.\n    See the working example below:\n\n.. code:: python\n\n    from django.db import models\n    from django.contrib.auth.models import User\n\n\n    class Article(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        project = models.ForeignKey('permission.Project')\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    class Project(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        author = models.ForeignKey(User)\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    # apply AuthorPermissionLogic to Article\n    from permission import add_permission_logic\n    from permission.logics import AuthorPermissionLogic\n    add_permission_logic(Article, AuthorPermissionLogic(\n        field_name='project__author',\n    ))\n\n\nThat's it.\nNow the following codes will work as expected:\n\n\n.. code:: python\n\n    user1 = User.objects.create_user(\n        username='john',\n        email='john@test.com',\n        password='password',\n    )\n    user2 = User.objects.create_user(\n        username='alice',\n        email='alice@test.com',\n        password='password',\n    )\n\n    art1 = Article.objects.create(\n        title=\"Article 1\",\n        body=\"foobar hogehoge\",\n        author=user1\n    )\n    art2 = Article.objects.create(\n        title=\"Article 2\",\n        body=\"foobar hogehoge\",\n        author=user2\n    )\n\n    # You have to apply 'permission.add_article' to users manually because it\n    # is not an object permission.\n    from permission.utils.permissions import perm_to_permission\n    user1.user_permissions.add(perm_to_permission('permission.add_article'))\n\n    assert user1.has_perm('permission.add_article') == True\n    assert user1.has_perm('permission.change_article') == False\n    assert user1.has_perm('permission.change_article', art1) == True\n    assert user1.has_perm('permission.change_article', art2) == False\n\n    assert user2.has_perm('permission.add_article') == False\n    assert user2.has_perm('permission.delete_article') == False\n    assert user2.has_perm('permission.delete_article', art1) == False\n    assert user2.has_perm('permission.delete_article', art2) == True\n\n    #\n    # You may also be interested in django signals to apply 'add' permissions to the\n    # newly created users.\n    # https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.post_save\n    #\n    from django.db.models.signals.post_save\n    from django.dispatch import receiver\n    from permission.utils.permissions import perm_to_permission\n\n    @receiver(post_save, sender=User)\n    def apply_permissions_to_new_user(sender, instance, created, **kwargs):\n        if not created:\n            return\n        #\n        # permissions you want to apply to the newly created user\n        # YOU SHOULD NOT APPLY PERMISSIONS EXCEPT PERMISSIONS FOR 'ADD'\n        # in this way, the applied permissions are not object permission so\n        # if you apply 'permission.change_article' then the user can change\n        # any article object.\n        #\n        permissions = [\n            'permission.add_article',\n        ]\n        for permission in permissions:\n            # apply permission\n            # perm_to_permission is a utility to convert string permission\n            # to permission instance.\n            instance.user_permissions.add(perm_to_permission(permission))\n\n\nSee http://django-permission.readthedocs.org/en/latest/_modules/permission/logics/author.html#AuthorPermissionLogic\nto learn how this logic works.\n\nNow, assume you add ``collaborators`` attribute to store collaborators\nof the article and you want to give them a change permission.\n\nWhat you need to do is quite simple.\nApply ``permission.logics.CollaboratorsPermissionLogic``\nto the ``Article`` model as follows\n\n\n.. code:: python\n\n    from django.db import models\n    from django.contrib.auth.models import User\n\n\n    class Article(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        author = models.ForeignKey(User)\n        collaborators = models.ManyToManyField(User)\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    # apply AuthorPermissionLogic and CollaboratorsPermissionLogic\n    from permission import add_permission_logic\n    from permission.logics import AuthorPermissionLogic\n    from permission.logics import CollaboratorsPermissionLogic\n    add_permission_logic(Article, AuthorPermissionLogic())\n    add_permission_logic(Article, CollaboratorsPermissionLogic(\n        field_name='collaborators',\n        any_permission=False,\n        change_permission=True,\n        delete_permission=False,\n    ))\n\n\n.. note::\n    From django-permission version 0.8.0, you can specify related object with\n    `field_name` attribute like\n    `django queryset lookup <https://docs.djangoproject.com/en/1.10/topics/db/queries/#field-lookups>`_.\n    See the working example below:\n\n\n.. code:: python\n\n    from django.db import models\n    from django.contrib.auth.models import User\n\n\n    class Article(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        project = models.ForeignKey('permission.Project')\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    class Project(models.Model):\n        title = models.CharField('title', max_length=120)\n        body = models.TextField('body')\n        collaborators = models.ManyToManyField(User)\n\n        # this is just required for easy explanation\n        class Meta:\n            app_label='permission'\n\n    # apply AuthorPermissionLogic to Article\n    from permission import add_permission_logic\n    from permission.logics import CollaboratorsPermissionLogic\n    add_permission_logic(Article, CollaboratorsPermissionLogic(\n        field_name='project__collaborators',\n    ))\n\n\nThat's it.\nNow the following codes will work as expected:\n\n\n.. code:: python\n\n    user1 = User.objects.create_user(\n        username='john',\n        email='john@test.com',\n        password='password',\n    )\n    user2 = User.objects.create_user(\n        username='alice',\n        email='alice@test.com',\n        password='password',\n    )\n\n    art1 = Article.objects.create(\n        title=\"Article 1\",\n        body=\"foobar hogehoge\",\n        author=user1\n    )\n    art1.collaborators.add(user2)\n\n    assert user1.has_perm('permission.change_article') == False\n    assert user1.has_perm('permission.change_article', art1) == True\n    assert user1.has_perm('permission.delete_article', art1) == True\n\n    assert user2.has_perm('permission.change_article') == False\n    assert user2.has_perm('permission.change_article', art1) == True\n    assert user2.has_perm('permission.delete_article', art1) == False\n\n\nSee http://django-permission.readthedocs.org/en/latest/_modules/permission/logics/collaborators.html#CollaboratorsPermissionLogic\nto learn how this logic works.\n\nThere are `StaffPermissionLogic <http://django-permission.readthedocs.org/en/latest/_modules/permission/logics/staff.html#StaffPermissionLogic>`_\nand `GroupInPermissionLogic <http://django-permission.readthedocs.org/en/latest/_modules/permission/logics/groupin.html#GroupInPermissionLogic>`_ \nfor ``is_staff` or ``group`` based permission logic as well.\n\nCustomize permission logic\n............................\nYour own permission logic class must be a subclass of\n``permission.logics.PermissionLogic`` and must override\n``has_perm(user_obj, perm, obj=None)`` method which return boolean value.\n\nClass, method, or function decorator\n-------------------------------------\nLike Django's ``permission_required`` but it can be used for object permissions\nand as a class, method, or function decorator.\nAlso, you don't need to specify a object to this decorator for object permission.\nThis decorator automatically determined the object from request\n(so you cannnot use this decorator for non view class/method/function but you\nanyway use ``user.has_perm`` in that case).\n\n\n.. code:: python\n\n    >>> from permission.decorators import permission_required\n    >>> # As class decorator\n    >>> @permission_required('auth.change_user')\n    >>> class UpdateAuthUserView(UpdateView):\n    ...     pass\n    >>> # As method decorator\n    >>> class UpdateAuthUserView(UpdateView):\n    ...     @permission_required('auth.change_user')\n    ...     def dispatch(self, request, *args, **kwargs):\n    ...         pass\n    >>> # As function decorator\n    >>> @permission_required('auth.change_user')\n    >>> def update_auth_user(request, *args, **kwargs):\n    ...     pass\n\n\nOverride the builtin ``if`` template tag\n----------------------------------------\ndjango-permission overrides the builtin ``if`` tag, adding two operators to handle\npermissions in templates.\nYou can write a permission test by using ``has`` keyword, and a target object with ``of`` as below.\n\n\n.. code:: html\n\n    {% if user has 'blogs.add_article' %}\n        <p>This user have 'blogs.add_article' permission</p>\n    {% elif user has 'blog.change_article' of object %}\n        <p>This user have 'blogs.change_article' permission of {{object}}</p>\n    {% endif %}\n\n    {# If you set 'PERMISSION_REPLACE_BUILTIN_IF = False' in settings #}\n    {% permission user has 'blogs.add_article' %}\n        <p>This user have 'blogs.add_article' permission</p>\n    {% elpermission user has 'blog.change_article' of object %}\n        <p>This user have 'blogs.change_article' permission of {{object}}</p>\n    {% endpermission %}\n\n.. note::\n    From Django 1.9, users require to add `'permission.templatetags.permissionif'` to `'builtins'` option manually.\n    See\n    - https://docs.djangoproject.com/en/1.9/releases/1.9/#django-template-base-add-to-builtins-is-removed\n    - https://docs.djangoproject.com/en/1.9/topics/templates/#module-django.template.backends.django\n    Or following example:\n\n    .. code:: python\n\n        TEMPLATES = [\n            {\n                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                'OPTIONS': {\n                    'builtins': ['permission.templatetags.permissionif'],\n                },\n            },\n        ]\n\nLicense\n-------------------------------------------------------------------------------\nThe MIT License (MIT)\n\nCopyright (c) 2015 Alisue, hashnote.net\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/lambdalisue/django-permission/tarball/master",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lambdalisue/django-permission",
    "keywords": "django object logical permission auth authentication",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-permission",
    "package_url": "https://pypi.org/project/django-permission/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-permission/",
    "project_urls": {
      "Download": "https://github.com/lambdalisue/django-permission/tarball/master",
      "Homepage": "https://github.com/lambdalisue/django-permission"
    },
    "release_url": "https://pypi.org/project/django-permission/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A enhanced permission system which enable logical permissionsystems to complex permissions",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12910854,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "249a92450631e16b098591ee80f0cc0354f99135d6a60c9abb76a2da79f85f7f",
        "md5": "41f74fe876da3c9f1df633189a801a29",
        "sha256": "1f4d2d1b726809260525fafc6bf30b3e80fcb290378d18f86b3eae51254ff49a"
      },
      "downloads": -1,
      "filename": "django_permission-1.0.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "41f74fe876da3c9f1df633189a801a29",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 59302,
      "upload_time": "2017-03-25T09:20:07",
      "upload_time_iso_8601": "2017-03-25T09:20:07.044342Z",
      "url": "https://files.pythonhosted.org/packages/24/9a/92450631e16b098591ee80f0cc0354f99135d6a60c9abb76a2da79f85f7f/django_permission-1.0.2-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abf628fa549b5b1f8d62e87e4194c80f8d87ee190d0eb34586847d508032ce09",
        "md5": "674c91bbf0e4ce78025c498b068cdccb",
        "sha256": "1842f90e639e5d79dd3bebb0721ca1bc4d564104409ec43ba42f1ba03d0e23bd"
      },
      "downloads": -1,
      "filename": "django_permission-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "674c91bbf0e4ce78025c498b068cdccb",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "requires_python": null,
      "size": 59302,
      "upload_time": "2017-03-25T09:20:19",
      "upload_time_iso_8601": "2017-03-25T09:20:19.749502Z",
      "url": "https://files.pythonhosted.org/packages/ab/f6/28fa549b5b1f8d62e87e4194c80f8d87ee190d0eb34586847d508032ce09/django_permission-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f19d04d543649741c64b593c9d34ad5e5388dc8e3efac9e3b6aa091e8a27e59c",
        "md5": "8521b92197a310948460bbe0dd2eb5c8",
        "sha256": "237ac0019ebcf21d8bbfc5b75430ba923f61b7aa1589d529936f6d62ca79157e"
      },
      "downloads": -1,
      "filename": "django-permission-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8521b92197a310948460bbe0dd2eb5c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 33342,
      "upload_time": "2017-03-25T09:20:16",
      "upload_time_iso_8601": "2017-03-25T09:20:16.132418Z",
      "url": "https://files.pythonhosted.org/packages/f1/9d/04d543649741c64b593c9d34ad5e5388dc8e3efac9e3b6aa091e8a27e59c/django-permission-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}