{
  "info": {
    "author": "Ignat Harczuk",
    "author_email": "ignathe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Documentation Status](https://readthedocs.org/projects/moltools/badge/?version=docs)](https://readthedocs.org/projects/moltools/?badge=docs)\n[![Build Status](https://travis-ci.org/fishstamp82/moltools.svg?branch=master)](https://travis-ci.org/fishstamp82/moltools)\n[![Coverage Status](https://coveralls.io/repos/fishstamp82/moltools/badge.svg?branch=master&service=github)](https://coveralls.io/github/fishstamp82/moltools?branch=master)\n[![DOI](https://zenodo.org/badge/19666/fishstamp82/moltools.svg)](https://zenodo.org/badge/latestdoi/19666/fishstamp82/moltools)\n\n\n#Welcome to moltools!\n\n\tCode purpose: Wrap DALTON LoProp calculation into convinient functions\n\tcallable by the Molecule instance using IPython or python scripts.\n\n## Current features:\n\n\tFeatures include obtaining LoProp properties for solvent molecules/ligands \n\tor for proteins and polymers that are covalently bonded via the MFCC procedure.\n\n\tBy integrating with the particles module, applequist equations are directly \n\tsolvable for a system of classical molecules using damped \n\tcharges/dipole-moments \tdirectly from QM-obtainable properties.\n\n\tFor localized Beta, this requires the latest development source of \n\tDALTON installed.\n\n## Installation:\n\n`git clone --recursive git@github.com:fishstamp82/moltools.git`\n\n`export PYTHONPATH=$(pwd)/moltools/src:$PYTHONPATH`\n\n> Tip: Export the pythonpath variable in your initrc file of choice in order to have it automatically load.\n\n\nExecute the following script if you want to run DALTON computations in parallel using HPC clusters.\n\nFor the Linköping HPC triolith, execute:\n\n`src/scripts/dalton_run_on_triolith.sh`\n\nFor Umeå HPC akka, execute:\n\n`src/scripts/dalton_run_on_akka.sh`\n\n\n## A quick-start:\n\nRun:\n\n* `ipython`\n* `in [1]: from molecules import Water, Cluster`\n\n##### Create a water molecule with oxygen in origo, in atomic units by default\n`in [2]: w1 = Water().get_standard()`\n\n##### Create an additional water molecule (atomic units by default)\n`in [3]: w2 = Water.get_standard()`\n\n##### Translate water 2 by 2.5 AU in the z-axis\n`in [4]: w2.translate_by_r( [0, 0, 2.5] )`\n\n##### Add them together into a Cluster\n`in [5]: c = Cluster( w1, w2 )`\n\n##### You can always make a quick visualization of a Molecule / Cluster\n`in [6]: c.plot()`\n\n##### Attach some properties to the waters (The rotation of properties will be taken care of )\n\n`#See template.py for all available templates`\n\n`in [8]: c.attach_properties( model = 'tip3p', method = 'HF', basis ='ANOPVDZ' )`\n\n##### Output the atomic/ molecular/ cluster propertiy via the .Property keyword, or via the quick-wrapper .p (.d for dipole, .a alpha .etc )\n\n`in [9]: print c.p.a`\n`[ 15.02184   0.        0.       11.48016   0.       13.72182]`\n\n##### Calculate each waters properties from ab-initio using DALTON, and put those properties on each atom using LoProp in one step:\n\n`In [10]: c.props_from_qm( tmpdir = '/tmp', dalpath = $PATH_TO_DALTON_SCRIPT )`\n\n##### If the dalton version is the development master branch, localized hyperpolarizabilities are obtainable:\n\n`In [11]: c.props_from_qm( method = 'b3lypqua', tmpdir = '/tmp', dalpath = $PATH_TO_DALTON_SCRIPT )`\n\n******\n\n\n## Extra features:\n\n\tThese include uncommenting \"#from mayavi import mlab\" in \n\tsrc/pdbreader.py and an installation of mayavi2.\n\tThis enables plotting of the beta tensor around molecules and clusters.\n\n\n######Visit [the documentation](http://moltools.readthedocs.org/en/latest) for the API and more tutorials on the source code. Work in progress and most stuff are outdated.\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.org/fishstamp82/moltools.git",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "moltools",
    "package_url": "https://pypi.org/project/moltools/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/moltools/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.org/fishstamp82/moltools.git"
    },
    "release_url": "https://pypi.org/project/moltools/1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Running point dipole calculations on chemical systems",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2164471,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edb1a355d8e06dc5704ac10aba7651a12ceef0a6d6db0a56bfd285eb573a1edc",
        "md5": "6a48af9b640f9f231120475452e7c7ee",
        "sha256": "90fa96a1548cbea073ff65c8dacadaf1aa58ea671d0b1e844e99931a592cccca"
      },
      "downloads": -1,
      "filename": "moltools-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a48af9b640f9f231120475452e7c7ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 274132,
      "upload_time": "2016-02-08T09:02:41",
      "upload_time_iso_8601": "2016-02-08T09:02:41.439501Z",
      "url": "https://files.pythonhosted.org/packages/ed/b1/a355d8e06dc5704ac10aba7651a12ceef0a6d6db0a56bfd285eb573a1edc/moltools-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}