{
  "info": {
    "author": "Chris Beaven",
    "author_email": "smileychris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "================\nDjango Countries\n================\n\nA Django application that provides country choices for use with forms, flag\nicons static files, and a country field for models.\n\nInstallation\n=============================\n\n1. ``pip install django-countries``\n2. Add ``django_countries`` to ``INSTALLED_APPS``\n\n\nCountryField\n============\n\nA country field for Django models that provides all ISO 3166-1 countries as\nchoices.\n\n``CountryField`` is based on Django's ``CharField``, providing choices\ncorresponding to the official ISO 3166-1 list of countries (with a default\n``max_length`` of 2).\n\nConsider the following model using a ``CountryField``::\n\n    from django.db import models\n    from django_countries.fields import CountryField\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField()\n\nAny ``Person`` instance will have a ``country`` attribute that you can use to\nget details of the person's country::\n\n    >>> person = Person(name='Chris', country='NZ')\n    >>> person.country\n    Country(code='NZ')\n    >>> person.country.name\n    'New Zealand'\n    >>> person.country.flag\n    '/static/flags/nz.gif'\n\nThis object (``person.country`` in the example) is a ``Country`` instance,\nwhich is described below.\n\nThe ``Country`` object\n----------------------\n\nAn object used to represent a country, instanciated with a two character\ncountry code.\n\nIt can be compared to other objects as if it was a string containing the\ncountry code and when evaluated as text, returns the country code.  \n\nname\n  Contains the full country name.\n\nflag\n  Contains a URL to the flag.\n\nalpha3\n  The three letter country code for this country.\n\nnumeric\n  The numeric country code for this country (as an integer).\n\nnumeric_padded\n  The numeric country code as a three character 0-padded string.\n\n``CountrySelectWidget``\n-----------------------\n\nA widget is included that can show the flag image after the select box\n(updated with JavaScript when the selection changes).\n\nWhen you create your form, you can use this custom widget like normal::\n\n    from django_countries.widgets import CountrySelectWidget\n\n    class PersonForm(forms.ModelForm):\n        class Meta:\n            model = models.Person\n            fields = ('name', 'country')\n            widgets = {'country': CountrySelectWidget}\n\n\nGet the countries from Python\n=============================\n\nUse the ``django_countries.countries`` object instance as an iterator of ISO\n3166-1 country codes and names (sorted by name).\n\nFor example::\n\n    >>> from django_countries import countries\n    >>> dict(countries)['NZ']\n    'New Zealand'\n\n    >>> for code, name in list(countries)[:3]:\n    ...     print(\"{name} ({code})\".format(name=name, code=code))\n    ...\n    Afghanistan (AF)\n    Ã…land Islands (AX)\n    Albania (AL)\n\nCountry names are translated using Django's standard ``ugettext``.\nIf you would like to help by adding a translation, please visit\nhttps://www.transifex.com/projects/p/django-countries/\n\n\nCustomization\n=============\n\nCustomize the country list\n--------------------------\n\nCountry names are taken from the official ISO 3166-1 list. If your project\nrequires the use of alternative names, the inclusion or exclusion of specific\ncountries then use the ``COUNTRIES_OVERRIDE`` setting.\n\nA dictionary of names to override the defaults.\n\nNote that you will need to handle translation of customised country names.\n\nSetting a country's name to ``None`` will exclude it from the country list.\nFor example::\n\n    COUNTRIES_OVERRIDE = {\n        'NZ': _('Middle Earth'),\n        'AU': None\n    }\n\n\nCustomize the flag URL\n----------------------\n\nThe ``COUNTRIES_FLAG_URL`` setting can be used to set the url for the flag\nimage assets. It defaults to::\n\n  COUNTRIES_FLAG_URL = 'flags/{code}.gif'\n\nThe URL can be relative to the STATIC_URL setting, or an absolute URL.\n\nThe location is parsed using Python's string formatting and is passed the\nfollowing arguments:\n\n    * code\n    * code_upper\n\nFor example: ``COUNTRIES_FLAG_URL = 'flags/16x10/{code_upper}.png'``\n\nNo checking is done to ensure that a static flag actually exists.\n\nAlternatively, you can specify a different URL on a specific ``CountryField``::\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField(\n            countries_flag_url='//flags.example.com/{code}.png')",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SmileyChris/django-countries/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-countries",
    "package_url": "https://pypi.org/project/django-countries/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-countries/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/SmileyChris/django-countries/"
    },
    "release_url": "https://pypi.org/project/django-countries/3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Provides a country field for Django models.",
    "version": "3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16640396,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a06e17fd9b939a4545deaa1ad90b9c2ab1cfa44b8c00abc9ca7c5da9bce1f713",
        "md5": "872266f22ab87dcb24c7c93af984201a",
        "sha256": "906b36b43a12134fbe8ee7f9d5350821e8703408f404b0b98c57052bbe3c991b"
      },
      "downloads": -1,
      "filename": "django-countries-3.0.tar.gz",
      "has_sig": true,
      "md5_digest": "872266f22ab87dcb24c7c93af984201a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 219190,
      "upload_time": "2014-12-28T22:16:27",
      "upload_time_iso_8601": "2014-12-28T22:16:27.045832Z",
      "url": "https://files.pythonhosted.org/packages/a0/6e/17fd9b939a4545deaa1ad90b9c2ab1cfa44b8c00abc9ca7c5da9bce1f713/django-countries-3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}