{
  "info": {
    "author": "Chris Beaven",
    "author_email": "smileychris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "================\nDjango Countries\n================\n\n.. image:: https://badge.fury.io/py/django-countries.svg\n    :alt: PyPI version\n    :target: https://badge.fury.io/py/django-countries\n\n.. image:: https://travis-ci.org/SmileyChris/django-countries.svg?branch=master\n    :alt: Build status\n    :target: http://travis-ci.org/SmileyChris/django-countries\n\n.. image:: https://codecov.io/gh/SmileyChris/django-countries/branch/master/graph/badge.svg\n    :alt: Coverage status\n    :target: https://codecov.io/gh/SmileyChris/django-countries\n\n\nA Django application that provides country choices for use with forms, flag\nicons static files, and a country field for models.\n\n.. contents::\n    :local:\n    :backlinks: none\n\n\nInstallation\n============\n\n1. ``pip install django-countries``\n2. Add ``django_countries`` to ``INSTALLED_APPS``\n\nFor more accurate sorting of translated country names, install the optional\npyuca_ package.\n\n.. _pyuca: https://pypi.python.org/pypi/pyuca/\n\n\nCountryField\n============\n\nA country field for Django models that provides all ISO 3166-1 countries as\nchoices.\n\n``CountryField`` is based on Django's ``CharField``, providing choices\ncorresponding to the official ISO 3166-1 list of countries (with a default\n``max_length`` of 2).\n\nConsider the following model using a ``CountryField``:\n\n.. code:: python\n\n    from django.db import models\n    from django_countries.fields import CountryField\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField()\n\nAny ``Person`` instance will have a ``country`` attribute that you can use to\nget details of the person's country:\n\n.. code:: python\n\n    >>> person = Person(name='Chris', country='NZ')\n    >>> person.country\n    Country(code='NZ')\n    >>> person.country.name\n    'New Zealand'\n    >>> person.country.flag\n    '/static/flags/nz.gif'\n\nThis object (``person.country`` in the example) is a ``Country`` instance,\nwhich is described below.\n\nUse ``blank_label`` to set the label for the initial blank choice shown in\nforms:\n\n.. code:: python\n\n    country = CountryField(blank_label='(select country)')\n\n\nMulti-choice\n------------\n\nThis field can also allow multiple selections of countries (saved as a comma\nseparated string). The field will always output a list of countries in this\nmode. For example:\n\n.. code:: python\n\n    class Incident(models.Model):\n        title = models.CharField(max_length=100)\n        countries = CountryField(multiple=True)\n\n    >>> for country in Incident.objects.get(title='Pavlova dispute').countries:\n    ...     print(country.name)\n    Australia\n    New Zealand\n\n\nThe ``Country`` object\n----------------------\n\nAn object used to represent a country, instantiated with a two character\ncountry code, three character code, or numeric code.\n\nIt can be compared to other objects as if it was a string containing the\ncountry code and when evaluated as text, returns the country code.\n\nname\n  Contains the full country name.\n\nflag\n  Contains a URL to the flag. If you page could have lots of different flags\n  then consider using ``flag_css`` instead to avoid excessive HTTP requests.\n\nflag_css\n  Output the css classes needed to display an HTML element as the correct flag\n  from within a single sprite image that contains all flags. For example:\n\n  .. code:: jinja\n\n    <link rel=\"stylesheet\" href=\"{% static 'flags/sprite.css' %}\">\n    <i class=\"{{ country.flag_css }}\"></i>\n\n  For multiple flag resolutions, use ``sprite-hq.css`` instead and add the\n  ``flag2x``, ``flag3x``, or ``flag4x`` class. For example:\n\n  .. code:: jinja\n\n    <link rel=\"stylesheet\" href=\"{% static 'flags/sprite-hq.css' %}\">\n    Normal: <i class=\"{{ country.flag_css }}\"></i>\n    Bigger: <i class=\"flag2x {{ country.flag_css }}\"></i>\n\n  You might also want to consider using ``aria-label`` for better\n  accessibility:\n\n  .. code:: jinja\n\n    <i class=\"{{ country.flag_css }}\"\n        aria-label=\"{% blocktrans with country_code=country.code %}\n            {{ country_code }} flag\n        {% endblocktrans %}\"></i>\n\nunicode_flag\n  A unicode glyph for the flag for this country. Currently well-supported in\n  iOS and OS X. See https://en.wikipedia.org/wiki/Regional_Indicator_Symbol\n  for details.\n\ncode\n  The two letter country code for this country.\n\nalpha3\n  The three letter country code for this country.\n\nnumeric\n  The numeric country code for this country (as an integer).\n\nnumeric_padded\n  The numeric country code as a three character 0-padded string.\n\n\n``CountrySelectWidget``\n-----------------------\n\nA widget is included that can show the flag image after the select box\n(updated with JavaScript when the selection changes).\n\nWhen you create your form, you can use this custom widget like normal:\n\n.. code:: python\n\n    from django_countries.widgets import CountrySelectWidget\n\n    class PersonForm(forms.ModelForm):\n        class Meta:\n            model = models.Person\n            fields = ('name', 'country')\n            widgets = {'country': CountrySelectWidget()}\n\nPass a ``layout`` text argument to the widget to change the positioning of the\nflag and widget. The default layout is:\n\n.. code:: python\n\n    '{widget}<img class=\"country-select-flag\" id=\"{flag_id}\" style=\"margin: 6px 4px 0\" src=\"{country.flag}\">'\n\n\nCustom forms\n============\n\nIf you want to use the countries in a custom form, use the model field's custom\nform field to ensure the translatable strings for the country choices are left\nlazy until the widget renders:\n\n.. code:: python\n\n    from django_countries.fields import CountryField\n\n    class CustomForm(forms.Form):\n        country = CountryField().formfield()\n\nUse ``CountryField(blank=True)`` for non-required form fields, and\n``CountryField(blank_label='(Select country)')`` to use a custom label for the\ninitial blank option.\n\nYou can also use the CountrySelectWidget_ as the widget for this field if you\nwant the flag image after the select box.\n\n\nGet the countries from Python\n=============================\n\nUse the ``django_countries.countries`` object instance as an iterator of ISO\n3166-1 country codes and names (sorted by name).\n\nFor example:\n\n.. code:: python\n\n    >>> from django_countries import countries\n    >>> dict(countries)['NZ']\n    'New Zealand'\n\n    >>> for code, name in list(countries)[:3]:\n    ...     print(\"{name} ({code})\".format(name=name, code=code))\n    ...\n    Afghanistan (AF)\n    Ã…land Islands (AX)\n    Albania (AL)\n\nCountry names are translated using Django's standard ``gettext``.\nIf you would like to help by adding a translation, please visit\nhttps://www.transifex.com/projects/p/django-countries/\n\n\nTemplate Tags\n=============\n\nIf you have your country code stored in a different place than a `CountryField`\nyou can use the template tag to get a `Country` object and have access to all\nof its properties:\n\n.. code:: jinja\n\n    {% load countries %}\n    {% get_country 'BR' as country %}\n    {{ country.name }}\n\nIf you need a list of countries, there's also a simple tag for that:\n\n.. code:: jinja\n\n    {% load countries %}\n    {% get_countries as countries %}\n    <select>\n    {% for country in countries %}\n        <option value=\"{{ country.code }}\">{{ country.name }}</option>\n    {% endfor %}\n    </select>\n\n\nCustomization\n=============\n\nCustomize the country list\n--------------------------\n\nCountry names are taken from the official ISO 3166-1 list. If your project\nrequires the use of alternative names, the inclusion or exclusion of specific\ncountries then use the ``COUNTRIES_OVERRIDE`` setting.\n\nA dictionary of names to override the defaults. The values can also use a more\n`complex dictionary format`_.\n\nNote that you will need to handle translation of customised country names.\n\nSetting a country's name to ``None`` will exclude it from the country list.\nFor example:\n\n.. code:: python\n\n    from django.utils.translation import gettext_lazy as _\n\n    COUNTRIES_OVERRIDE = {\n        'NZ': _('Middle Earth'),\n        'AU': None,\n        'US': {'names': [\n            _('United States of America'),\n            _('America'),\n        ],\n    }\n\nIf you have a specific list of countries that should be used, use\n``COUNTRIES_ONLY``:\n\n.. code:: python\n\n    COUNTRIES_ONLY = ['NZ', 'AU']\n\nor to specify your own country names, use a dictionary or two-tuple list\n(string items will use the standard country name):\n\n.. code:: python\n\n    COUNTRIES_ONLY = [\n        'US',\n        'GB',\n        ('NZ', _('Middle Earth')),\n        ('AU', _('Desert')),\n    ]\n\n\nShow certain countries first\n----------------------------\n\nProvide a list of country codes as the ``COUNTRIES_FIRST`` setting and they\nwill be shown first in the countries list (in the order specified) before all\nthe alphanumerically sorted countries.\n\nIf you want to sort these initial countries too, set the\n``COUNTRIES_FIRST_SORT`` setting to ``True``.\n\nBy default, these initial countries are not repeated again in the\nalphanumerically sorted list. If you would like them to be repeated, set the\n``COUNTRIES_FIRST_REPEAT`` setting to ``True``.\n\nFinally, you can optionally separate these 'first' countries with an empty\nchoice by providing the choice label as the ``COUNTRIES_FIRST_BREAK`` setting.\n\n\nCustomize the flag URL\n----------------------\n\nThe ``COUNTRIES_FLAG_URL`` setting can be used to set the url for the flag\nimage assets. It defaults to::\n\n    COUNTRIES_FLAG_URL = 'flags/{code}.gif'\n\nThe URL can be relative to the STATIC_URL setting, or an absolute URL.\n\nThe location is parsed using Python's string formatting and is passed the\nfollowing arguments:\n\n    * code\n    * code_upper\n\nFor example: ``COUNTRIES_FLAG_URL = 'flags/16x10/{code_upper}.png'``\n\nNo checking is done to ensure that a static flag actually exists.\n\nAlternatively, you can specify a different URL on a specific ``CountryField``:\n\n.. code:: python\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField(\n            countries_flag_url='//flags.example.com/{code}.png')\n\n\nSingle field customization\n--------------------------\n\nTo customize an individual field, rather than rely on project level settings,\ncreate a ``Countries`` subclass which overrides settings.\n\nTo override a setting, give the class an attribute matching the lowercased\nsetting without the ``COUNTRIES_`` prefix.\n\nThen just reference this class in a field. For example, this ``CountryField``\nuses a custom country list that only includes the G8 countries:\n\n.. code:: python\n\n    from django_countries import Countries\n\n    class G8Countries(Countries):\n        only = [\n            'CA', 'FR', 'DE', 'IT', 'JP', 'RU', 'GB',\n            ('EU', _('European Union'))\n        ]\n\n    class Vote(models.Model):\n        country = CountryField(countries=G8Countries)\n        approve = models.BooleanField()\n\n\nComplex dictionary format\n-------------------------\n\nFor ``COUNTRIES_ONLY`` and ``COUNTRIES_OVERRIDE``, you can also provide a\ndictionary rather than just a translatable string for the country name.\n\nThe options within the dictionary are:\n\n``name`` or ``names`` (required)\n  Either a single translatable name for this country or a list of multiple\n  translatable names. If using multiple names, the first name takes preference\n  when using ``COUNTRIES_FIRST`` or the ``Country.name``.\n\n``alpha3`` (optional)\n  An ISO 3166-1 three character code (or an empty string to nullify an existing\n  code for this country.\n\n``numeric`` (optional)\n  An ISO 3166-1 numeric country code (or ``None`` to nullify an existing code\n  for this country. The numeric codes 900 to 999 are left available by the\n  standard for user-assignment.\n\n\n``Country`` object external plugins\n-----------------------------------\n\nOther Python packages can add attributes to the Country_ object by using entry\npoints in their setup script.\n\n.. _Country: `The Country object`_\n\nFor example, you could create a ``django_countries_phone`` package which had a\nwith the following entry point in the ``setup.py`` file. The entry point name\n(``phone``) will be the new attribute name on the Country object. The attribute\nvalue will be the return value of the ``get_phone`` function (called with the\nCountry instance as the sole argument).\n\n.. code:: python\n\n  setup(\n      ...\n      entry_points={\n          'django_countries.Country': 'phone = django_countries_phone.get_phone'\n      },\n      ...\n  )\n\n\n\nDjango Rest Framework\n=====================\n\nDjango Countries ships with a ``CountryFieldMixin`` to make the\n`CountryField`_ model field compatible with DRF serializers. Use the following\nmixin with your model serializer:\n\n.. code:: python\n\n    from django_countries.serializers import CountryFieldMixin\n\n    class CountrySerializer(CountryFieldMixin, serializers.ModelSerializer):\n\n        class Meta:\n            model = models.Person\n            fields = ('name', 'email', 'country')\n\nThis mixin handles both standard and `multi-choice`_ country fields.\n\n\nDjango Rest Framework field\n---------------------------\n\nFor lower level use (or when not dealing with model fields), you can use the\nincluded ``CountryField`` serializer field. For example:\n\n.. code:: python\n\n    from django_countries.serializer_fields import CountryField\n\n    class CountrySerializer(serializers.Serializer):\n        country = CountryField()\n\nYou can optionally instantiate the field with the ``countries`` argument to\nspecify a custom Countries_ instance.\n\n.. _Countries: `Single field customization`_\n\nREST output format\n^^^^^^^^^^^^^^^^^^\n\nBy default, the field will output just the country code. If you would rather\nhave more verbose output, instantiate the field with ``country_dict=True``,\nwhich will result in the field having the following output structure:\n\n.. code:: json\n\n    {\"code\": \"NZ\", \"name\": \"New Zealand\"}\n\nEither the code or this dict output structure are acceptable as input\nirregardless of the ``country_dict`` argument's value.\n\n\nOPTIONS request\n---------------\n\nWhen you request OPTIONS against a resource (using the DRF `metadata support`_)\nthe countries will be returned in the response as choices:\n\n.. code:: text\n\n    OPTIONS /api/address/ HTTP/1.1\n\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Allow: GET, POST, HEAD, OPTIONS\n\n    {\n    \"actions\": {\n      \"POST\": {\n        \"country\": {\n        \"type\": \"choice\",\n        \"label\": \"Country\",\n        \"choices\": [\n          {\n            \"display_name\": \"Australia\",\n            \"value\": \"AU\"\n          },\n          [...]\n          {\n            \"display_name\": \"United Kingdom\",\n            \"value\": \"GB\"\n          }\n        ]\n      }\n    }\n\n.. _metadata support: http://www.django-rest-framework.org/api-guide/metadata/\n\n\n\nGraphQL\n=======\n\nA ``Country`` graphene object type is included that can be used when generating\nyour schema.\n\n.. code:: python\n\n    import graphene\n    from graphene_django.types import DjangoObjectType\n    from django_countries.graphql.types import Country\n\n    class Person(ObjectType):\n        country = graphene.Field(Country)\n\n        class Meta:\n            model = models.Person\n            fields = [\"name\", \"country\"]\n\nThe object type has the following fields available:\n\n* ``name`` for the full country name\n* ``code`` for the ISO 3166-1 two character country code\n* ``alpha3`` for the ISO 3166-1 three character country code\n* ``numeric`` for the ISO 3166-1 numeric country code\n* ``iocCode`` for the International Olympic Committee country code\n\n==========\nChange Log\n==========\n\nThis log shows interesting changes that happen for each version, latest\nversions first. It can be assumed that translations have been updated each\nrelease, and any new translations added.\n\n6.1.3 (18 August 2020)\n======================\n\n- Update flag of Mauritania.\n\n- Add flag for Kosovo (under its temporary code of XK).\n\n\n6.1.2 (26 March 2020)\n=====================\n\n- Fix Python 3.5 syntax error (no f-strings just yet...).\n\n\n6.1.1 (26 March 2020)\n=====================\n\n- Change ISO country import so that \"Falkland Islands  [Malvinas]\" => \"Falkland Islands (Malvinas)\".\n\n\n6.1 (20 March 2020)\n===================\n\n- Add a GraphQL object type for a django ``Country`` object.\n\n\n6.0 (28 February 2020)\n======================\n\n- Make DRF CountryField respect ``blank=False``. This is a backwards incompatible change since blank input will now\n  return a validation error (unless ``blank`` is explicitly set to ``True``).\n\n- Fix ``COUNTRIES_OVERRIDE`` when using the complex dictionary format and a single name.\n\n- Add bandit to the test suite for basic security analysis.\n\n- Drop Python 2.7 and Python 3.4 support.\n\n- Add Rest Framework 3.10 and 3.11 to the test matrix, remove 3.8.\n\n- Fix a memory leak when using PyUCA. Thanks Meiyer (aka interDist)!\n\n\n5.5 (11 September 2019)\n=======================\n\n- Django 3.0 compatibility.\n\n- Plugin system for extending the ``Country`` object.\n\n\n5.4 (11 August 2019)\n====================\n\n- Renamed Macedonia -> North Macedonia.\n\n- Fix an outlying ``makemigrations`` error.\n\n- Pulled in new translations which were provided but missing from previous\n  version.\n\n- Fixed Simplified Chinese translation (needed to be ``locale/zh_Hans``).\n\n- Introduce an optional complex format for ``COUNTRIES_ONLY`` and\n  ``COUNTRIES_OVERRIDE`` to allow for multiple names for a country, a custom\n  three character code, and a custom numeric country code.\n\n\n5.3.3 (16 February 2019)\n========================\n\n- Add test coverage for Django Rest Framework 3.9.\n\n\n5.3.2 (27 August 2018)\n======================\n\n- Tests for Django 2.1 and Django Rest Framework 3.8.\n\n\n5.3.1 (12 June 2018)\n====================\n\n- Fix ``dumpdata`` and ``loaddata`` for ``CountryField(multiple=True)``.\n\n\n5.3 (20 April 2018)\n===================\n\n- Iterating a ``Countries`` object now returns named tuples. This makes things\n  nicer when using ``{% get_countries %}`` or using the country list elsewhere\n  in your code.\n\n\n5.2 (9 March 2018)\n==================\n\n- Ensure Django 2.1 compatibility for ``CountrySelectWidget``.\n\n- Fix regression introduced into 5.1 when using Django 1.8 and certain queryset\n  lookup types (like ``__in``).\n\n\n5.1.1 (31 January 2018)\n=======================\n\n- Fix some translations that were included in 5.1 but not compiled.\n\n\n5.1 (30 January 2018)\n=====================\n\n* Tests now also cover Django Rest Framework 3.7 and Django 2.0.\n\n* Allow for creating country fields using (valid) alpha-3 or numeric codes.\n\n* Fix migration error with blank default (thanks Jens Diemer).\n\n* Add a ``{% get_countries %}`` template tag (thanks Matija ÄŒvrk).\n\n\n5.0 (10 October 2017)\n=====================\n\n* No longer allow ``multiple=True`` and ``null=True`` together. This causes\n  problems saving the field, and ``null`` shouldn't really be used anyway\n  because the country field is a subclass of ``CharField``.\n\n\n4.6 (16 June 2017)\n==================\n\n* Add a ``CountryFieldMixin`` Django Rest Framework serializer mixin that\n  automatically picks the right field type for a ``CountryField`` (both single\n  and multi-choice).\n\n* Validation for Django Rest Framework field (thanks Simon Meers).\n\n* Allow case-insensitive ``.by_name()`` matching (thanks again, Simon).\n\n* Ensure a multiple-choice ``CountryField.max_length`` is enough to hold all\n  countries.\n\n* Fix inefficient pickling of countries (thanks Craig de Stigter for the report\n  and tests).\n\n* Stop adding a blank choice when dealing with a multi-choice ``CountryField``.\n\n* Tests now cover multiple Django Rest Framework versions (back to 3.3).\n\n4.6.1\n-----\n\n* Fix invalid reStructuredText in CHANGES.\n\n4.6.2\n-----\n\n* Use transparency layer for flag sprites.\n\n\n4.5 (18 April 2017)\n===================\n\n* Change rest framework field to be based on ``ChoiceField``.\n\n* Allow for the rest framework field to deserialize by full country name\n  (specifically the English name for now).\n\n\n4.4 (6 April 2017)\n==================\n\n* Fix for broken CountryField on certain models in Django 1.11.\n  Thanks aktiur for the test case.\n\n* Update tests to cover Django 1.11\n\n\n4.3 (29 March 2017)\n===================\n\n* Handle \"Czechia\" translations in a nicer way (fall back to \"Czech Republic\"\n  until new translations are available).\n\n* Fix for an import error in Django 1.9+ due to use of non-lazy ``ugettext`` in\n  the django-countries custom admin filter.\n\n* Back to 100% test coverage.\n\n\n4.2 (10 March 2017)\n===================\n\n* Add sprite flag files (and ``Country.flag_css`` property) to help minimize\n  HTTP requests.\n\n\n4.1 (22 February 2017)\n======================\n\n* Better default Django admin filter when filtering a country field in a\n  ``ModelAdmin``.\n\n* Fix settings to support Django 1.11\n\n* Fix when using a model instance with a deferred country field.\n\n* Allow ``CountryField`` to handle multiple countries at once!\n\n* Allow CountryField to still work if Deferred.\n\n* Fix a field with customized country list. Thanks pilmie!\n\n\n4.0 (16 August 2016)\n====================\n\nDjango supported versions are now 1.8+\n\n* Drop legacy code\n\n* Fix tests, 100% coverage\n\n* IOS / OSX unicode flags function\n\n* Fix widget choices on Django 1.9+\n\n* Add ``COUNTRIES_FIRST_SORT``. Thanks Edraak!\n\n4.0.1\n-----\n\n* Fix tests for ``COUNTRIES_FIRST_SORT`` (feature still worked, tests didn't).\n\n\n3.4 (22 October 2015)\n=====================\n\n* Extend test suite to cover Django 1.8\n\n* Fix XSS escaping issue in CountrySelectWidget\n\n* Common name changes: fix typo of Moldova, add United Kingdom\n\n* Add ``{% get_country %}`` template tag.\n\n* New ``CountryField`` Django Rest Framework serializer field.\n\n3.4.1\n-----\n\n* Fix minor packaging error.\n\n\n3.3 (30 Mar 2015)\n=================\n\n* Add the attributes to ``Countries`` class that can override the default\n  settings.\n\n* CountriesField can now be passed a custom countries subclass to use, which\n  combined with the previous change allows for different country choices for\n  different fields.\n\n* Allow ``COUNTRIES_ONLY`` to also accept just country codes in its list\n  (rather than only two-tuples), looking up the translatable country name from\n  the full country list.\n\n* Fix Montenegro flag size (was 12px high rather than the standard 11px).\n\n* Fix outdated ISO country name formatting for Bolivia, Gambia, Holy See,\n  Iran, Micronesia, and Venezuela.\n\n\n3.2 (24 Feb 2015)\n=================\n\n* Fixes initial iteration failing for a fresh ``Countries`` object.\n\n* Fix widget's flag URLs (and use ensure widget is HTML encoded safely).\n\n* Add ``countries.by_name(country, language='en')`` method, allowing lookup of\n  a country code by its full country name. Thanks Josh Schneier.\n\n\n3.1 (15 Jan 2015)\n=================\n\n* Start change log :)\n\n* Add a ``COUNTRIES_FIRST`` setting (and some other related ones) to allow for\n  specific countries to be shown before the entire alphanumeric list.\n\n* Add a ``blank_label`` argument to ``CountryField`` to allow customization of\n  the label shown in the initial blank choice shown in the select widget.\n\n3.1.1 (15 Jan 2015)\n-------------------\n\n* Packaging fix (``CHANGES.rst`` wasn't in the manifest)\n\n\n3.0 (22 Oct 2014)\n=================\n\nDjango supported versions are now 1.4 (LTS) and 1.6+\n\n* Add ``COUNTRIES_ONLY`` setting to restrict to a specific list of countries.\n\n* Optimize country name translations to avoid exessive translation calls that\n  were causing a notable performance impact.\n\n* PyUCA integration, allowing for more accurate sorting across all locales.\n  Also, a better sorting method when PyUCA isn't installed.\n\n* Better tests (now at 100% test coverage).\n\n* Add a ``COUNTRIES_FLAG_URL`` setting to allow custom flag urls.\n\n* Support both IOC and numeric country codes, allowing more flexible lookup of\n  countries and specific code types.\n\n* Field descriptor now returns ``None`` if no country matches (*reverted in\n  v3.0.1*)\n\n3.0.1 (27 Oct 2014)\n-------------------\n\n* Revert descriptor to always return a Country object.\n\n* Fix the ``CountryField`` widget choices appearing empty due to a translation\n  change in v3.0.\n\n3.0.2 (29 Dec 2014)\n-------------------\n\n* Fix ``CountrySelectWidget`` failing when used with a model form that is\n  passed a model instance.\n\n\n2.1 (24 Mar 2014)\n=================\n\n* Add IOC (3 letter) country codes.\n\n* Fix bug when loading fixtures.\n\n2.1.1 (28 Mar 2014)\n-------------------\n\n* Fix issue with translations getting evaluated early.\n\n2.1.2 (28 Mar 2014)\n-------------------\n\n* Fix Python 3 compatibility.\n\n\n\n2.0 (18 Feb 2014)\n=================\n\nThis is the first entry to the change log. The previous was 1.5,\nreleased 19 Nov 2012.\n\n* Optimized flag images, adding flags missing from original source.\n\n* Better storage of settings and country list.\n\n* New country list format for fields.\n\n* Better tests.\n\n* Changed ``COUNTRIES_FLAG_STATIC`` setting to ``COUNTRIES_FLAG_URL``.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SmileyChris/django-countries/",
    "keywords": "django,countries,flags",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-countries",
    "package_url": "https://pypi.org/project/django-countries/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-countries/",
    "project_urls": {
      "Homepage": "https://github.com/SmileyChris/django-countries/"
    },
    "release_url": "https://pypi.org/project/django-countries/6.1.3/",
    "requires_dist": [
      "tox ; extra == 'dev'",
      "black ; extra == 'dev'",
      "django ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-django ; extra == 'dev'",
      "djangorestframework ; extra == 'dev'",
      "graphene-django ; extra == 'dev'",
      "transifex-client ; extra == 'maintainer'",
      "zest.releaser[recommended] ; extra == 'maintainer'",
      "django ; extra == 'maintainer'",
      "pytest ; extra == 'test'",
      "pytest-django ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "graphene-django ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Provides a country field for Django models.",
    "version": "6.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16640396,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "477e6b2c41013bd5d47f1b93743e3b90e1fe82d072816efc75fecd8f847241da",
        "md5": "9f16e5a4193f1bd2f932ac2a9cc1ca9b",
        "sha256": "a0f77154ae08cb38a0d65530a399ead5f5837ebf6c74f7576e71bb7acdacca94"
      },
      "downloads": -1,
      "filename": "django_countries-6.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9f16e5a4193f1bd2f932ac2a9cc1ca9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 789941,
      "upload_time": "2020-08-18T00:46:53",
      "upload_time_iso_8601": "2020-08-18T00:46:53.607084Z",
      "url": "https://files.pythonhosted.org/packages/47/7e/6b2c41013bd5d47f1b93743e3b90e1fe82d072816efc75fecd8f847241da/django_countries-6.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a0aac2eeec1a388b80fee9332bfcf8145561232fee99f70a93ef4843a7eb3d2",
        "md5": "d09d80db47cbbe51b466f659ca92f616",
        "sha256": "64015977a5989bcb0e645007299b19fe8ac117466af375161b26bcfa32ae2808"
      },
      "downloads": -1,
      "filename": "django-countries-6.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d09d80db47cbbe51b466f659ca92f616",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 619234,
      "upload_time": "2020-08-18T00:46:57",
      "upload_time_iso_8601": "2020-08-18T00:46:57.254880Z",
      "url": "https://files.pythonhosted.org/packages/4a/0a/ac2eeec1a388b80fee9332bfcf8145561232fee99f70a93ef4843a7eb3d2/django-countries-6.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}