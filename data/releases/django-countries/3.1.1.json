{
  "info": {
    "author": "Chris Beaven",
    "author_email": "smileychris@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "================\nDjango Countries\n================\n\nA Django application that provides country choices for use with forms, flag\nicons static files, and a country field for models.\n\nInstallation\n=============================\n\n1. ``pip install django-countries``\n2. Add ``django_countries`` to ``INSTALLED_APPS``\n\n\nCountryField\n============\n\nA country field for Django models that provides all ISO 3166-1 countries as\nchoices.\n\n``CountryField`` is based on Django's ``CharField``, providing choices\ncorresponding to the official ISO 3166-1 list of countries (with a default\n``max_length`` of 2).\n\nConsider the following model using a ``CountryField``::\n\n    from django.db import models\n    from django_countries.fields import CountryField\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField()\n\nAny ``Person`` instance will have a ``country`` attribute that you can use to\nget details of the person's country::\n\n    >>> person = Person(name='Chris', country='NZ')\n    >>> person.country\n    Country(code='NZ')\n    >>> person.country.name\n    'New Zealand'\n    >>> person.country.flag\n    '/static/flags/nz.gif'\n\nThis object (``person.country`` in the example) is a ``Country`` instance,\nwhich is described below.\n\nUse ``blank_label`` to set the label for the initial blank choice shown in\nforms::\n\n    country = CountryField(blank_label='(select country)')\n\nThe ``Country`` object\n----------------------\n\nAn object used to represent a country, instanciated with a two character\ncountry code.\n\nIt can be compared to other objects as if it was a string containing the\ncountry code and when evaluated as text, returns the country code.  \n\nname\n  Contains the full country name.\n\nflag\n  Contains a URL to the flag.\n\nalpha3\n  The three letter country code for this country.\n\nnumeric\n  The numeric country code for this country (as an integer).\n\nnumeric_padded\n  The numeric country code as a three character 0-padded string.\n\n``CountrySelectWidget``\n-----------------------\n\nA widget is included that can show the flag image after the select box\n(updated with JavaScript when the selection changes).\n\nWhen you create your form, you can use this custom widget like normal::\n\n    from django_countries.widgets import CountrySelectWidget\n\n    class PersonForm(forms.ModelForm):\n        class Meta:\n            model = models.Person\n            fields = ('name', 'country')\n            widgets = {'country': CountrySelectWidget}\n\n\nGet the countries from Python\n=============================\n\nUse the ``django_countries.countries`` object instance as an iterator of ISO\n3166-1 country codes and names (sorted by name).\n\nFor example::\n\n    >>> from django_countries import countries\n    >>> dict(countries)['NZ']\n    'New Zealand'\n\n    >>> for code, name in list(countries)[:3]:\n    ...     print(\"{name} ({code})\".format(name=name, code=code))\n    ...\n    Afghanistan (AF)\n    Ã…land Islands (AX)\n    Albania (AL)\n\nCountry names are translated using Django's standard ``ugettext``.\nIf you would like to help by adding a translation, please visit\nhttps://www.transifex.com/projects/p/django-countries/\n\n\nCustomization\n=============\n\nCustomize the country list\n--------------------------\n\nCountry names are taken from the official ISO 3166-1 list. If your project\nrequires the use of alternative names, the inclusion or exclusion of specific\ncountries then use the ``COUNTRIES_OVERRIDE`` setting.\n\nA dictionary of names to override the defaults.\n\nNote that you will need to handle translation of customised country names.\n\nSetting a country's name to ``None`` will exclude it from the country list.\nFor example::\n\n    COUNTRIES_OVERRIDE = {\n        'NZ': _('Middle Earth'),\n        'AU': None\n    }\n\nIf you have a specific list of countries that should be used, use\n``COUNTRIES_ONLY``::\n\n    COUNTRIES_ONLY = {\n        'NZ': _('Middle Earth'),\n        'AU': _('Desert'),\n    }\n\n\nShow certain countries first\n----------------------------\n\nProvide a list of country codes as the ``COUNTRIES_FIRST`` setting and they\nwill be shown first in the countries list (in the order specified) before all\nthe alphanumerically sorted countries.\n\nBy default, these 'first' countries are not repeated again in the\nalphanumerically sorted list. If you would like them to be repeated, set the\n``COUNTRIES_FIRST_REPEAT`` setting to ``True``.\n\nFinally, you can optionally separate these 'first' countries with an empty\nchoice by providing the choice label as the ``COUNTRIES_FIRST_BREAK`` setting.\n\n\nCustomize the flag URL\n----------------------\n\nThe ``COUNTRIES_FLAG_URL`` setting can be used to set the url for the flag\nimage assets. It defaults to::\n\n  COUNTRIES_FLAG_URL = 'flags/{code}.gif'\n\nThe URL can be relative to the STATIC_URL setting, or an absolute URL.\n\nThe location is parsed using Python's string formatting and is passed the\nfollowing arguments:\n\n    * code\n    * code_upper\n\nFor example: ``COUNTRIES_FLAG_URL = 'flags/16x10/{code_upper}.png'``\n\nNo checking is done to ensure that a static flag actually exists.\n\nAlternatively, you can specify a different URL on a specific ``CountryField``::\n\n    class Person(models.Model):\n        name = models.CharField(max_length=100)\n        country = CountryField(\n            countries_flag_url='//flags.example.com/{code}.png')\n\n\n==========\nChange Log\n==========\n\nThis log shows interesting changes that happen for each version, latest\nversions first. It can be assumed that translations have been updated each\nrelease (and any new translations added).\n\n\nVersion 3.1 (15 Jan 2015)\n=========================\n\n* Start change log :)\n\n* Add a ``COUNTRIES_FIRST`` setting (and some other related ones) to allow for\n  specific countries to be shown before the entire alphanumeric list.\n\n* Add a ``blank_label`` argument to ``CountryField`` to allow customization of\n  the label shown in the initial blank choice shown in the select widget.\n\nVersion 3.1.1 (15 Jan 2015)\n---------------------------\n\n* Packaging fix (``CHANGES.rst`` wasn't in the manifest)\n\n\nVersion 3.0 (22 Oct 2014)\n=========================\n\nDjango supported versions are now 1.4 (LTS) and 1.6+\n\n* Add ``COUNTRIES_ONLY`` setting to restrict to a specific list of countries.\n\n* Optimize country name translations to avoid exessive translation calls that\n  were causing a notable performance impact.\n\n* PyUCA integration, allowing for more accurate sorting across all locales.\n  Also, a better sorting method when PyUCA isn't installed.\n\n* Better tests (now at 100% test coverage).\n\n* Add a ``COUNTRIES_FLAG_URL`` setting to allow custom flag urls.\n\n* Support both IOC and numeric country codes, allowing more flexible lookup of\n  countries and specific code types.\n\n* Field descriptor now returns ``None`` if no country matches (*reverted in v3.0.1*)\n\nVersion 3.0.1 (27 Oct 2014)\n---------------------------\n\n* Revert descriptor to always return a Country object.\n\n* Fix the ``CountryField`` widget choices appearing empty due to a translation\n  change in v3.0.\n\nVersion 3.0.2 (29 Dec 2014)\n---------------------------\n\n* Fix ``CountrySelectWidget`` failing when used with a model form that is\n  passed a model instance.\n\n\nVersion 2.1 (24 Mar 2014)\n=========================\n\n* Add IOC (3 letter) country codes.\n\n* Fix bug when loading fixtures.\n\nVersion 2.1.1 (28 Mar 2014)\n---------------------------\n\n* Fix issue with translations getting evaluated early.\n\nVersion 2.1.2 (28 Mar 2014)\n---------------------------\n\n* Fix Python 3 compatibility.\n\n\n\nVersion 2.0 (18 Feb 2014)\n=========================\n\nThis is the first entry to the change log. The previous version was 1.5,\nreleased 19 Nov 2012.\n\n* Optimized flag images, adding flags missing from original source.\n\n* Better storage of settings and country list.\n\n* New country list format for fields.\n\n* Better tests.\n\n* Changed ``COUNTRIES_FLAG_STATIC`` setting to ``COUNTRIES_FLAG_URL``.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SmileyChris/django-countries/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-countries",
    "package_url": "https://pypi.org/project/django-countries/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-countries/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/SmileyChris/django-countries/"
    },
    "release_url": "https://pypi.org/project/django-countries/3.1.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Provides a country field for Django models.",
    "version": "3.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16640396,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7430e0156794daf114c3ee6beaa45f5f09e98616ecc99daba6e7730f98dd21b5",
        "md5": "c723a76d0c047c95ce8c617da49a8034",
        "sha256": "7a53f5f1030fbc81f17cea8055bbb4e3d94e294897e6e680fc3657226122a3b0"
      },
      "downloads": -1,
      "filename": "django-countries-3.1.1.tar.gz",
      "has_sig": true,
      "md5_digest": "c723a76d0c047c95ce8c617da49a8034",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 234593,
      "upload_time": "2015-01-15T02:01:30",
      "upload_time_iso_8601": "2015-01-15T02:01:30.290180Z",
      "url": "https://files.pythonhosted.org/packages/74/30/e0156794daf114c3ee6beaa45f5f09e98616ecc99daba6e7730f98dd21b5/django-countries-3.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}