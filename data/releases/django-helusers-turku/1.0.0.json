{
  "info": {
    "author": "City of Turku",
    "author_email": "sovellustuki@turku.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "[![Run tests](https://github.com/City-of-Helsinki/django-helusers/actions/workflows/test.yml/badge.svg)](https://github.com/City-of-Helsinki/django-helusers/actions/workflows/test.yml)\n[![codecov](https://codecov.io/gh/City-of-Helsinki/django-helusers/branch/master/graph/badge.svg?token=bOfnYCJsWW)](https://codecov.io/gh/City-of-Helsinki/django-helusers)\n[![Requirements](https://requires.io/github/City-of-Helsinki/django-helusers/requirements.svg?branch=master)](https://requires.io/github/City-of-Helsinki/django-helusers/requirements/?branch=master)\n\n# Django app for City of Helsinki user infrastructure\n\nDjango-helusers is your friendly app for bolting authentication into Django projects for City of Helsinki. Authentication schemes are based on [OAuth2](https://oauth.net/2/) and [OpenID Connect (OIDC)](https://openid.net/connect/).\n\nA baseline `User` model is provided that can be used with the various authentication use cases that are supported. The model supports mapping from AD groups to Django groups based on the authentication data.\n\nAdditionally there are **optional** functionalities that can be used as needed.\n\nFunctionalities for server needing (API) access token verification:\n\n* For servers using Django REST Framework\n* For servers not using Django REST Framework\n\nFunctionalities for server needing to authenticate against OIDC or OAuth2 server:\n\n* support Django session login against OIDC or OAuth2 server, including Helsinki Tunnistus service and Azure AD\n* augmented login template for Django admin, adding OIDC/OAuth2 login button\n\n## Adding django-helusers your Django project\n\nAdd `django-helusers` in your project's dependencies.\n\nSome optional features of `django-helusers` have additional dependencies.\nThese are mentioned in their relevant sections.\n\n### Adding django-helusers Django apps\n\nDjango-helusers provides two Django apps: `HelusersConfig` provides the\nmodels and templates needed for helusers to work and `HelusersAdminConfig`\nreconfigures Django admin to work with helusers.\n\nBefore adding the apps, you will need to remove `django.contrib.admin`, as\n`HelusersAdminConfig` is implementation of same functionality. You will get\n`django.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates:\nadmin`-error, if you forget this step.\n\nThen proceed by adding these apps to your `INSTALLED_APPS` in settings.py:\n\n```python\nINSTALLED_APPS = (\n    'helusers.apps.HelusersConfig',\n    'helusers.apps.HelusersAdminConfig',\n    ...\n)\n```\n\nUs usual with `INSTALLED_APPS`, ordering matters. `HelusersConfig` must come\nbefore `HelusersAdminConfig` and anything else providing admin templates.\nUnless, of course, you wish to override the admin templates provided here.\n\nOne possible gotcha is, if you've added custom views to admin without\nforwarding context from `each_context` to the your template.  Helusers\ntemplates expect variables from `each_context` and will break if they are\nmissing.\n\n### Adding user model\n\nhelusers provides a baseline user model adding fields for Helsinki\nspecific information. As per Django [best practice](https://docs.djangoproject.com/en/3.0/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project)\nyou should subclass this model to make future customization easier:\n\n```python\n\n# users/models.py\n\nfrom helusers.models import AbstractUser\n\n\nclass User(AbstractUser):\n    pass\n```\n\nand reference it in settings.py:\n\n```python\n# myproject/settings.py\n\nAUTH_USER_MODEL = 'users.User'\n```\n\n## Optional features\n\n### Django REST Framework API authentication using JWT\n\nIf you have a REST API implemented using Django REST Framework and you want to authorize access to your API using JWTs, then this might be useful to you.\n\nAPI token authentication is a stateless authentication method, where every request is\nauthenticated by checking the signature of the included JWT token. It still\ncreates a persistent Django user, which is updated with the information\nfrom the token with every request.\n\n- Include `drf-oidc-auth` in your project's dependencies.\n- Configure REST framework to use the `ApiTokenAuthentication` class in `settings.py`:\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'helusers.oidc.ApiTokenAuthentication',\n    ),\n}\n```\n\n- Set your deployment-specific variables in `local_settings.py`, e.g.:\n\n```python\nOIDC_API_TOKEN_AUTH = {\n    # Audience that must be present in the token for the request to be\n    # accepted. Value must be agreed between your SSO service and your\n    # application instance. Essentially this allows your application to\n    # know that the token in meant to be used with it.\n    'AUDIENCE': 'https://api.hel.fi/auth/projects',\n    # Who we trust to sign the tokens. The library will request the\n    # public signature keys from standard locations below this URL\n    'ISSUER': 'https://api.hel.fi/sso/openid'\n    # The following can be used if you need certain OAuth2 scopes\n    # for any functionality of the API. The request will be denied\n    # if scopes starting with API_SCOPE_PREFIX are not present\n    # in the token claims. Usually this is not needed, as checking\n    # the audience is enough.\n    'REQUIRE_API_SCOPE_FOR_AUTHENTICATION': True,\n    'API_SCOPE_PREFIX': 'projects',\n}\n```\n\n### API authentication using JWT in any setup\n\nIf you want to authorize access to your API using JWTs, but you are not using Django REST Framework, then this might be useful to you.\n\nAPI token authentication is a stateless authentication method, where every request is authenticated by checking the signature of the included JWT token.\nIt still creates a persistent Django user, which is updated with the information from the token with every request.\n\nDjango-helusers contains a `helusers.oidc.RequestJWTAuthentication` class.\nIt has a method called `authenticate` that takes a [Django HttpRequest](https://docs.djangoproject.com/en/3.1/ref/request-response/#django.http.HttpRequest) as an argument, looks for a JWT from that request and performs authentication.\nUser of this class can use it in any way they need to perform authentication and/or authorization.\nCheck the class documentation for more details.\n\nSome settings are needed (and some are optional) that affect how the `RequestJWTAuthentication` class works.\n\n```python\nOIDC_API_TOKEN_AUTH = {\n    # Audience that must be present in the token for it to be\n    # accepted. Value must be agreed between your SSO service and your\n    # application instance. Essentially this allows your application to\n    # know that the token is meant to be used with it.\n    # RequestJWTAuthentication supports multiple acceptable audiences,\n    # so this setting can also be a list of strings.\n    # This setting is required.\n    'AUDIENCE': 'https://api.hel.fi/auth/projects',\n\n    # Who we trust to sign the tokens. The library will request the\n    # public signature keys from standard locations below this URL.\n    # RequestJWTAuthentication supports multiple issuers, so this\n    # setting can also be a list of strings.\n    # Default is https://tunnistamo.hel.fi.\n    'ISSUER': 'https://api.hel.fi/sso/openid'\n\n    # The following can be used if you need certain scopes for any\n    # functionality of the API. Usually this is not needed, as checking\n    # the audience is enough. Default is False.\n    'REQUIRE_API_SCOPE_FOR_AUTHENTICATION': True,\n    # The name of the claim that is used to read in the scopes from the JWT.\n    # Default is https://api.hel.fi/auth.\n    'API_AUTHORIZATION_FIELD': 'scope_field',\n    # The request will be denied if scopes don't contain anything starting\n    # with the value provided here.\n    'API_SCOPE_PREFIX': 'projects',\n\n    # In order to do the authentication RequestJWTAuthentication needs\n    # some facts from the authorization server, mainly its public keys for\n    # verifying the JWT's signature. This setting controls the time how long\n    # authorization server configuration and public keys are \"remembered\".\n    # The value is in seconds. Default is 24 hours.\n    'OIDC_CONFIG_EXPIRATION_TIME': 600,\n}\n```\n\n### OIDC back channel logout endpoint\n\nDjango-helusers provides an [OIDC back channel logout](https://openid.net/specs/openid-connect-backchannel-1_0.html) endpoint implementation.\n\nBy default the OIDC back channel logout endpoint is disabled. You can enable it in your project's settings:\n\n```python\n# myproject/settings.py\nHELUSERS_BACK_CHANNEL_LOGOUT_ENABLED = True\n\n# These settings specify which authentication server(s) are trusted\n# to send back channel logout requests.\nOIDC_API_TOKEN_AUTH = {\n    # Who we trust to sign the logout tokens. The library will request\n    # the public signature keys from standard locations below this URL.\n    # Multiple issuers are supported, so this setting can also be a list\n    # of strings. Default is https://tunnistamo.hel.fi.\n    'ISSUER': 'https://api.hel.fi/sso/openid'\n\n    # Audience that must be present in the logout token for it to\n    # be accepted. Value must be agreed between your SSO service\n    # and your application instance. Essentially this allows your\n    # application to know that the token is meant to be used with\n    # it. Multiple acceptable audiences are supported, so this\n    # setting can also be a list of strings. This setting is required.\n    'AUDIENCE': 'https://api.hel.fi/auth/projects',\n}\n```\n\nYou will also need to add Django-helusers URLs to your URL dispatcher configuration:\n\n```python\n# myproject/urls.py\nurlpatterns = [\n    ...\n    # You can adjust the prefix as you want\n    path('helauth/', include('helusers.urls')),\n    ...\n]\n```\n\nWith these settings your project now provides an endpoint at `https://<your-domain>/helauth/logout/oidc/backchannel/` that responds to the OIDC back channel logout requests.\n\nWhen the endpoint receives a valid request, it stores information about the logout event to the database. This information is used when authentication for other requests is performed. The `helusers.oidc.RequestJWTAuthentication` class that performs authentication based on a JWT bearer token, checks if the token's session has been terminated (by a logout event), and if that's the case, it doesn't authenticate the caller.\n\n#### Logout event callback\n\nThe project using the OIDC back channel logout functionality has an option to attach a callback into the logout event handler. This is done by telling Django-helusers where this callback is located. Configure it in your project's settings:\n\n```python\n# myproject/settings.py\nHELUSERS_BACK_CHANNEL_LOGOUT_CALLBACK = \"myproject.utils.logout_callback\"\n```\n\nWhen a valid logout event is received, the callback is called. The callback receives two keyword arguments:\n\n* `request`: the [HttpRequest](https://docs.djangoproject.com/en/2.2/ref/request-response/#httprequest-objects) object describing the request to the logout endpoint\n* `jwt`: a `helusers.jwt.JWT` instance of the logout token\n\nThe callback can affect the result of the back channel logout event handling by returning an [HttpResponse](https://docs.djangoproject.com/en/2.2/ref/request-response/#httpresponse-objects) instance with a status code between 400 and 599 inclusive. If such a response object is returned by the callback, the logout event handling is terminated and the response is sent to the requester. Any other kind of return value from the callback is ignored.\n\n### Adding Tunnistamo authentication\n\ndjango-helusers ships with backend for authenticating against Tunnistamo\nusing OIDC. Configuring this includes a Tunnistamo login button to the admin login screen.\n\nThere is also a deprecated legacy OAuth2 backend using\nallauth framework.\n\nInclude `social-auth-app-django` in your project's dependencies.\n\nAdd `social_django` into your `INSTALLED_APPS` setting:\n\n```python\n# myproject/settings.py\nINSTALLED_APPS = (\n    ...\n    'social_django',\n    ...\n)\n```\n\nTypically you would want to support authenticating using both OIDC and local\ndatabase tables. Local users are useful for initial django admin login, before\nyou've delegated permissions to users coming through OIDC.\n\nAdd backend configuration to your `settings.py`:\n\n```python\nAUTHENTICATION_BACKENDS = [\n    'helusers.tunnistamo_oidc.TunnistamoOIDCAuth',\n    'django.contrib.auth.backends.ModelBackend',\n]\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n```\n\n`LOGIN_REDIRECT_URL` is the default landing URL after succesful login, if your\nform did not specify anything else.\n\n`LOGOUT_REDIRECT_URL` is the same for logout. django-helusers requires this\nto be set.\n\nYou will also need to add URLs for `social_django` & `helusers` to your URL\ndispatcher configuration (`urls.py`):\n\n```python\nurlpatterns = [\n    ...\n    path('pysocial/', include('social_django.urls', namespace='social')),\n    path('helauth/', include('helusers.urls')),\n    ...\n]\n```\n\nYou can change the paths if they conflict with your application.\n\nFinally, you will need to configure your SESSION_SERIALIZER. helusers stores\nthe access token expiration time as a datetime which is not serializable\nto JSON, so Django needs to be configured to use the built-in\nPickleSerializer:\n\n```python\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'\n```\n\n#### Django session login\n\nDjango session login is the usual login to Django that sets up a session\nand is typically implemented using a browser cookie. This is usually done\nusing form with username & password fields. Django-helusers adds another\npath that delegates the login to an OIDC provider. User logs in at the\nprovider and, upon successful return, a Django session is created for them.\nFor us, the main use case has been allowing logins to Django admin.\n\nTo support session login Django-helusers needs three settings that must\nbe configured both at Helsinki OIDC provider and your project instance.\nThe settings are:\n* client ID\n* client secret\n* Tunnistamo OIDC endpoint\n\n`Client` is OAuth2 / OIDC name for anything wanting to authenticate\nusers. Thus your application would be a `client`\n\nAdditionally you will need to provide your \"callback URL\" to the folks\nconfiguring Tunnistamo. This is implemented by `python-social-auth` and\nwill, by default, be `https://app.domain/auth/complete/tunnistamo/`. During\ndevelopment on your own laptop your `app.domain` would be `localhost`.\n\nAfter you've received your client ID, client secret and Tunnistamo OIDC\nendpoint you would configure them as follows:\n```python\nSOCIAL_AUTH_TUNNISTAMO_KEY = 'https://i/am/clientid/in/url/style'\nSOCIAL_AUTH_TUNNISTAMO_SECRET = 'iamyoursecret'\nSOCIAL_AUTH_TUNNISTAMO_OIDC_ENDPOINT = 'https://tunnistamo.example.com/'\n```\n\nNote that `client ID` becomes `KEY` and `client secret` becomes `SECRET`.\n\n#### Active Directory groups\n\nHelusers can sync users AD groups to local Django groups when using an AD \nlogin method in Tunnistamo. To enable groups sync you should add \"ad_groups\" \nscope to the Tunnistamo OIDC authorize call. It can be done by adding\nthe following to the settings:\n\n```python\nSOCIAL_AUTH_TUNNISTAMO_SCOPE = 'ad_groups'\n```\n\nThat setting will add \"ad_groups\" scope to the default social auth scopes\n\"openid profile email\". If you would like to modify the default social\nauth scopes you can set all of the scopes in the `SOCIAL_AUTH_TUNNISTAMO_SCOPE` \nsetting and set `SOCIAL_AUTH_TUNNISTAMO_IGNORE_DEFAULT_SCOPE` to `True`.\n\nAdditionally, the client in Tunnistamo should be configured with AD groups\nenabled.\n\nWhen the users returns from Tunnistamo with \"ad_groups\" claim set Helusers will \nadd all of the groups as an instance of `ADGroup` model to the database.\n\nThen, Helusers will add any missing ADGroups to the users' ad_groups-relation\nand remove any ADGroups the user is not a member of anymore.\n\nTo use groups in Django permissions, you should use the Django admin view \n(HELSINKI USERS > AD Group Mappings) to set mappings between ADGroups and \nGroups. Helusers will then add the user to Django groups that are mapped\nto their AD Groups.\n\nNote that after creating mappings you cannot manually add a user to a mapped\ngroup if they are not a member of the corresponding AD group because the\ngroup will be removed the next time the user logs in.\n\n#### Adding tunnistamo URL to template context\n\nIf you need to access the Tunnistamo API from your JS code, you can include\nthe Tunnistamo base URL in your template context using helusers's context processor:\n\n```python\nTEMPLATES = [\n    {\n        'OPTIONS': {\n            'context_processors': [\n                'helusers.context_processors.settings'\n            ]\n        }\n    }\n]\n```\n\n#### Carrying language preference from your application to Tunnistamo\n\nTunnistamo (per the OIDC specs) allows clients to specify the language used for\nthe login process. This allows you to carry your applications language setting\nto the login screens presented by Tunnistamo.\n\nConfigure `python-social-auth` to pass the necessary argument through its\nlogin view:\n```python\nSOCIAL_AUTH_TUNNISTAMO_AUTH_EXTRA_ARGUMENTS = {'ui_locales': 'fi'}\n```\n`fi` there is the language code that will be used when no language is requested, so change it if you you prefer some\nother default language. If you don't want to set a default language at all, use an empty string `\"\"` as the language\ncode.\n\nWhen this setting is in place, languages can be requested using query param `ui_locales=<language code>` when starting\nthe login process, for example in your template\n```\n<a href=\"{% url 'helusers:auth_login' %}?next=/foobar/&ui_locales=en\">Login in English</a>\n```\n\n#### Disabling password logins\n\nIf you're not allowing users to log in with passwords, you may disable the\nusername/password form from Django admin login page by setting `HELUSERS_PASSWORD_LOGIN_DISABLED`\nto `True`.\n\n# Development\n\nVirtual Python environment can be used. For example:\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\nInstall package requirements:\n\n```bash\npip install -e .\n```\n\nInstall development requirements:\n\n```bash\npip install pip-tools\npip-compile requirements-dev.in\npip install -r requirements-dev.txt\n```\n\n## Running tests\n\n```bash\npytest\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/City-of-Turku/django-helusers",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-helusers-turku",
    "package_url": "https://pypi.org/project/django-helusers-turku/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-helusers-turku/",
    "project_urls": {
      "Homepage": "https://github.com/City-of-Turku/django-helusers"
    },
    "release_url": "https://pypi.org/project/django-helusers-turku/1.0.0/",
    "requires_dist": [
      "Django (<4,>=2.2)",
      "cachetools (>=3.0.0)",
      "deprecation (>=2)",
      "requests",
      "python-jose"
    ],
    "requires_python": "",
    "summary": "Django app for the user infrastructure of the City of Turku",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16989325,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7252d08df45e1a70ca89d73139ab86086746ac2a6549fe9a7fa683613121d932",
        "md5": "4ffa9562710dd86c16cdb763c4120df5",
        "sha256": "5d8afb59c0b5665e42105622fae92705ef6f7449a07d67b982ee135929c72223"
      },
      "downloads": -1,
      "filename": "django_helusers_turku-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ffa9562710dd86c16cdb763c4120df5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 40228,
      "upload_time": "2023-02-23T06:25:16",
      "upload_time_iso_8601": "2023-02-23T06:25:16.488348Z",
      "url": "https://files.pythonhosted.org/packages/72/52/d08df45e1a70ca89d73139ab86086746ac2a6549fe9a7fa683613121d932/django_helusers_turku-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99872e6211436780363f9684918f938508c1672e2138ee2cb5f97f7db7c9b6f2",
        "md5": "53c4e0404fdd4e564e5439d1f0ab758b",
        "sha256": "ffedaf19396ea391c1972b9d132def43ecf9d591e524e9f869a6ab6c7c1a3f66"
      },
      "downloads": -1,
      "filename": "django-helusers-turku-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "53c4e0404fdd4e564e5439d1f0ab758b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30310,
      "upload_time": "2023-02-23T06:25:18",
      "upload_time_iso_8601": "2023-02-23T06:25:18.769599Z",
      "url": "https://files.pythonhosted.org/packages/99/87/2e6211436780363f9684918f938508c1672e2138ee2cb5f97f7db7c9b6f2/django-helusers-turku-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}