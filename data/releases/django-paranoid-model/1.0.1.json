{
  "info": {
    "author": "Luan Rodrigues",
    "author_email": "luanrodriguesbusiness@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-paranoid-model\nDjango abstract model with paranoid behavior, therefore when an instance is deleted it is not really deleted from database, it's applied a mask on the filter so when filter, the result are the \"undeleted\" instances.\n\n## Summary\n\n1) [Get Started](https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/02_get_started.md)\n2) [Create you paranoid model](https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/03_create_your_paranoid_model.md)\n3) [Instance Manipulate](https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/04_instance_manipulate.md)\n4) [Making queries](https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/04_instance_manipulate.md)\n5) [Admin](https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/06_django_admin.md)\n\n---\n\n# Getting Started\n\n```\npip install django-paranoid-model\n```\n\nAdd paranoid to your INSTALLED_APPS\n\n```py\nINSTALLED_APPS = [\n    ...\n    'paranoid_model'\n]\n```\n\n---\n\n# Create your Paranoid Model\n\nOn your models.py file import Paranoid class from paranoid_models.models file, then inheritance Paranoid class on your models\n\n```py\nfrom django.db import models\nfrom paranoid_model.models import Paranoid\n\nclass Person(Paranoid):  # make an inheritance\n    # all the default fields come with inheritance:\n    # created_at\n    # updated_at\n    # deleted_at\n    name = models.CharField(max_length=255)\n```\n\n* created_at is the field with creation date\n* updated_at is the field with latest update date\n* deleted_at is the field with deletion date, so when it is None it means it hasn't been deleted\n\n---\n\n# Instance Manipulate\n\nParanoidModel has some some differences on default Django methods.\n\n### Save()\n\nThis method has no difference, it work just like Django's\n\n```py\nmy_paranoid_instance = Paranoid()\nmy_paranoid_instance.save()\n```\n\n### Delete()\n\nThe **most important** method. This is why pararanoid model exists. When ``delete()`` an instance it should not be really deleted from database, but hide from user. \n\nThe magic is in the attribute ``deleted_at``. When there is no date (deleted_at is None) it means it has not been deleted, but if has a date it means it has been deleted. So when we call delete(), it will set up the current date to delete_at field and save the instance, instead of deleted.  \n\n**The delete works on *CASCADE*. So all the related objects will be soft deleted**\n\n```py\ninstance = ParanoidModel.objects.create()\ninstance.delete()  # instance has the current date on the field deleted_at but it still saved on database \ninstance.deleted_at is None\n>> False\n\n# but remember that this delete will do the same to every related instances like:\nperson = Person.objects.create(name='My Name')\nfor i in range(5):\n    Phone.objects.create(phone='123456789', owner=person)\n\nperson.delete()  # this will soft delete person\n# but will also delete all the 5 phones related to this person\n```\n\n### Delete(hard_delete=True)\n\nIf you really wants to delete the instance from databse you can use parameter ``hard_delete``. It calls Django's default method\n\n```py\ninstance = ParanoidModel.objects.create()\nintance.delete()  # will soft delete\ninstance.delete(hard_delete=True)  # will call django delete, so will delete from database\n```\n\nBe careful using ``hard_delete``\n\n### is_soft_deletd\n\nThis is a @property that returns a boolean if current instance has been soft deleted or not. Otherwise, it returns if attribute deleted_at is None. It is just a more easy way to check if deleted_at is None instead of use this whole sentence to check.\n\nSo you can just do the following:\n\n```py\ninstance = ParanoidModel.objects.create()\n\ninstance.is_soft_deleted\n>> False\n\ninstance.delete()\ninstance.is_soft_deleted\n>> True\n\n# real example\nperson = Person.objects.create(name='My name')\nperson.delete()\n\nif person.is_soft_deleted:\n    person.restore()\n```\n\n### Restore()\n\nOnce an instance has been soft deleted, it can be easily undeleted with method restore()\n\n```py\ninstance = ParanoidModel.objects.create()\n\ninstance.delete()\ninstance.is_soft_deleted\n>> True\n\ninstance.restore()\ninstance.is_soft_deleted\n>> False\n```\n\n---\n\n# Making queries\n\nIn short, the queries are the same as django's queries. The difference is that by default behavior all the queries comes with \nnot soft deleted.\n\nTo make a querry and include the deleted instance just need to give parameter ``with_deleted`` to the querry. This is a boolean parameter, so it can be True or False.\n\n##### Obs: Soft deleted is a instance where the filed ``deleted_at`` is not None\n\n\n### All()\n```py\nParanoidModel.objects.all()  # will return all the instancnes that hasn't been soft deleted\nParanoidModel.objects.all(with_deleted=False)  # this will exclude the soft deleted\nParanoidModel.objects.all(with_deleted=True)  # will include the soft deleted\n```\n\nAs you can see, ``.all()`` will return the same instances that ``all(with_deleted=False)``\n\n**Obs on related_name queries:** when an instance has been soft deleted, the related_querry ``all()`` will return ``with_deleted=True`` by default, because if the instance has been soft deleted, I guess, it want's to be querried the deleted objects, BUT you can alway pass the parameter ``with_deleted`` and it will work as you wish.\n\nIt's something like this:\n```py\nperson = Person.objects.create(name='person')\nfor i in range(20):\n    phone = Phone.objects.create(phone='123', owner=person)\n    if i % 2 == 0:\n        phone.delete()\n\nperson.phones.all()  # will return all not soft deleted\n\nperson.delete()  # will delete all the phones that belongs to person\n\n# since person has been deleted, a related_name querry will work a little different\nperson.phones.all()  # will return all and include the soft deleted\nperson.phones.all(with_deleted=True)  # will return all and include soft deleted\nperson.phones.all(with_deleted=False)  # will return all not soft deleted\n```\nThe explanation why Paranoid Query does it, is because imagine we have a *person* and we have *2 phones related to that person*, and that *person has been soft deleted*, and by cascade person's phones also soft deleted.\n\nNow imagine that in the future, that person wants a report of your datas once saved in database, so when we filter his data, we will need, also, his data deleted.\n\nThat is why paranoid query will include soft deleted when querring related_name with a soft delete instance.\n\n### Filter()\n```py\nParanoidModel.objects.filter(**kwargs)  # will return the filtered instancnes that hasn't been soft deleted\nParanoidModel.objects.filter(with_deleted=False, **kwargs)  # this will exclude the soft deleted\nParanoidModel.objects.filter(with_deleted=True, **kwargs)  # will include the soft deleted\n```\n\nAs you can see, ``.filter(**kwargs)`` will return the same instances that ``filter(with_deleted=False, **kwargs)``\n\n### Deleted_only()\n\nTo filter only deleted you must use ``deleted_only`` filter. Thats because ``filter`` override querry parameter ``deleted_at`` and change it.\n\n```py\nfor i in range(20):\n    instance = ParanoidModel.objects.create()\n\n    if i % 2 == 0:\n        instance.delete()\n\nParanoidModel.objects.deleted_only()  # only soft deleted_instance\n\n# DON'T DO THAT\n# \n# ParanoidModel.objects.filter(deleted_at__isnull=True)\n# this param 'deleted_at__isnull' is overwritten by querry filter\n# that's because every param wich starts with 'deleted_at' are removed\n```\n\n### Get()\n```py\nParanoidModel.objects.get(**kwargs)  \n# will retrun a single instance of the object that matches with the querry\n```\n\nCareful with get() method, because it can raise some errors.\nThe possible raises are: \n* **model.DoesNotExist**: (Django) will be raised if the querry doesn't match to any instance\n* **model.MultipleObjectsReturned**: (Django) will be raised if more than 1 instances matches with the querry\n* **model.SoftDeleted**: will be raised if the instance has been soft deleted.\n\nYou can do the following:\n```py\ntry:\n    ParanoidModel.objects.get(pk=10)\nexcept ParanoidModel.DoesNotExist:\n    # The querry didn't find any instance with pk = 10\n    pass\n```\nor\n```py\ntry:\n    ParanoidModel.objects.get(pk=10)\nexcept ParanoidModel.SoftDeleted:\n    # The querry found an instance, but it has been soft deleted\n    # it means you need to querry with method get_deleted() or get_or_restore()\n    pass\n```\n\nBut, if you pay attention it doesn't allow you to get an instance that has been soft deleted. Don't worry, no need to cry! :sob: ``get_deleted`` and ``get_or_restore`` will save you!\n\n### Get_deleted()\n```py\nParanoidModel.objects.get_deleted(**kwargs)  \n# will retrun a single instance of the object that matches with the querry\n```\n\nCareful with get_deleted() method, because it can raise some errors.\nThe possible raises are: \n* **model.DoesNotExist**: (Django) will be raised if the querry doesn't match to any instance\n* **model.MultipleObjectsReturned**: (Django) will be raised if more than 1 instances matches with the querry\n* **model.IsNotSoftDeleted**: will be raised if the instance has not been soft deleted yet.\n\nYou can do the following:\n```py\ntry:\n    ParanoidModel.objects.get_deleted(pk=10)\nexcept ParanoidModel.DoesNotExist:\n    # The querry didn't find any instance with pk = 10\n    pass\n```\nor\n```py\ntry:\n    ParanoidModel.objects.get_deleted(pk=10)\nexcept ParanoidModel.IsNotSoftDeleted:\n    # The querry found an instance, but it has not been soft deleted yet\n    # it means you need to querry with method get()\n    pass\n```\n### Get_or_restore()\nThis method will work just like Django's wiht a thiny difference, it will restore the instance if it has been soft deleted\n\n```py\nParanoidModel.objects.get_or_restore(pk=10)\n```\n\nLike all get method, it can raises some exceptions:\n* **model.DoesNotExist**: (Django) will be raised if the querry doesn't match to any instance\n* **model.MultipleObjectsReturned**: (Django) will be raised if more than 1 instances matches with the querry\n\n```py\ntry:\n    ParanoidModel.objects.get_deleted(pk=10)\nexcept ParanoidModel.DoesNotExist:\n    # The querry didn't find any instance with pk = 10\n    pass\n```\nor\n```py\ntry:\n    ParanoidModel.objects.get_deleted(name__icontains='a')\nexcept ParanoidModel.MultipleObjectsReturned:\n    # The querry found more than 1 instance\n    pass\n```\n\n### Restore()\nThis method restore all the instances soft deleted int the current querry set. Look at the example bellow\n\n```py\nfor i in range(20):\n    ParanoidModel.objects.create()\n\nParanoidModel.objects.all().count() == 0\n>> True\n\nParanoidModel.objects.all(with_deleted=True).restore()\n\nParanoidModel.objects.all().count() == 0:\n>> False\nParanoidModel.objects.all().count() == 20:\n>> True\n```\n\n---\n\n# Django Admin\n\n### Register your models\n\nTo register your model on django admin, is recomended to let ParanoidAdmin handle with admin action. Otherwise you may have\nsome trouble.\n\nParanoidAdmin also include some aditional methods to look more \"paranoid\" on admin page, some functions are:\n  * Delete: soft delete instance\n  * Permanently delete: hard delete\n  * Restore: remode deleted_at date\n  * Filter: filter all, only deleted, not deleted\n\nOn you  ``admin.py`` register you models like the example below:\n\n```py\n# admin.py\n\nfrom paranoid_model.admin import ParanoidAdmin\nfrom .models import MyModel\n\nadmin.site.register(MyModel, ParanoidAdmin)\n```\n\nThis will allow ParanoidAdmin to handle with admin actions.\n\nOnce done that, it should looks something like this:\n<img src=\"https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/images/admin/default.png\">\n\n### Customize list\n\nYou can customize the way objects are displayed changing the attribute ``list_display`` on admin. To do that, you're gonna\nhave to make an inheritance of ParanoidAdmin and change this attribute.\n\n\n```py\n# admin.py\n\nfrom paranoid_model.admin import ParanoidAdmin\nfrom .models import MyModel\n\n\nclass MyAdmin(ParanoidAdmin):\n    list_display = ('__str__',)  # Django's Default display when list\n\n\nadmin.site.register(MyModel, MyAdmin)\n```\n\nThis is how it will look like:\n<img src=\"https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/images/admin/change_list_display.png\">\n\nIf you like the Paranoid's default list display but just want to add some more attributes, you can do the following:\n\n```py\nclass MyAdmin(ParanoidAdmin):\n    list_display = ('name', 'phone',) + ParanoidAdmin.list_display\n```\n\n[Checkout Official Docs here](https://docs.djangoproject.com/en/3.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display)\n\n\n### Customize filter\n\nYou can customize filter window as you want like remove, add more filter.\n\n**Add more filter:**\n\n```py\n# admin.py\n\nfrom paranoid_model.admin import ParanoidAdmin\nfrom .models import MyModel\n\n\nclass MyFilter(ParanoidAdminFilter):\n\n    def lookups(self, request, mode_admin):\n        # Method to get tuple with all (`search_param`, `name to show`) \n        # to list on filter window\n\n        return super().lookups(request, mode_admin) + (\n            ('additional', 'Additional filter'),  # add aditional filters to super() filter\n        )\n\n    def queryset(self, request, queryset):\n        # Method to handle the querrying and return the QuerySet[]\n        # to be showed on site\n\n        if self.value() == 'additional':\n            # filter additional objects\n            pass\n        else:\n            # Not one of our additionals querry\n            return super().queryset(request, queryset)\n\n\n\nclass MyAdmin(ParanoidAdmin):\n    list_filter = (MyFilter,)  # Use our list filter created just above\n\n\nadmin.site.register(MyModel, MyAdmin)\n```\n\nLook at the result:\n<img src=\"https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/images/admin/additional_filter.png\">\n\n[Checkout Official Docs here](https://docs.djangoproject.com/en/3.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter)\n\n**Remove filter window:**\n\nRemove filter window is a peace of cake\n\n```py\n# admin.py\n\nfrom paranoid_model.admin import ParanoidAdmin\nfrom .models import MyModel\n\n\nclass MyAdmin(ParanoidAdmin):\n    list_filter = ()  # set list_filter with 0 filter inside\n\n\nadmin.site.register(MyModel, MyAdmin)\n```\n\nAnd if you also set ``list_display`` to be Django's default it will be just like Django's default model page.\n\n```py\n# admin.py\n\nfrom paranoid_model.admin import ParanoidAdmin\nfrom .models import MyModel\n\n\nclass MyAdmin(ParanoidAdmin):\n    list_display = ('__str__',)  # list like django\n    list_filter = ()  # remove filter window\n\n\nadmin.site.register(MyModel, MyAdmin)\n```\n\nDjango's default view:\n<img src=\"https://github.com/DarknessRdg/django-paranoid-model/blob/master/docs/images/admin/default_django.png\">\n\n\n---\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DarknessRdg/django-paranoid-model",
    "keywords": "django paranoid safedelete softdelete",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-paranoid-model",
    "package_url": "https://pypi.org/project/django-paranoid-model/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-paranoid-model/",
    "project_urls": {
      "Bug Reports": "https://github.com/DarknessRdg/django-paranoid-model/issues",
      "Homepage": "https://github.com/DarknessRdg/django-paranoid-model",
      "Source": "https://github.com/DarknessRdg/django-paranoid-model/"
    },
    "release_url": "https://pypi.org/project/django-paranoid-model/1.0.1/",
    "requires_dist": [
      "Django"
    ],
    "requires_python": ">=3.4",
    "summary": "Django abstract model with paranoid behavior",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9249632,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6987804d104ead5650e5bad045fee9170a607ee812388908e74162795cfe4c79",
        "md5": "fa498593a6704ca96e464378f5464375",
        "sha256": "3d141c273410c7bc01a003760b200e43b1d31e10243d63ea4a6d0b53c8c03e10"
      },
      "downloads": -1,
      "filename": "django_paranoid_model-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa498593a6704ca96e464378f5464375",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 19326,
      "upload_time": "2020-01-16T19:46:18",
      "upload_time_iso_8601": "2020-01-16T19:46:18.635760Z",
      "url": "https://files.pythonhosted.org/packages/69/87/804d104ead5650e5bad045fee9170a607ee812388908e74162795cfe4c79/django_paranoid_model-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94fac4a39d779a77428eb0c292502fb303a6fc8abcd77c9d86c5dc97b218b038",
        "md5": "46437e499decbf65eb2b8690ecbb9bf0",
        "sha256": "75c922052ea58f21c890249c62dcfca20fe9e48ad1849203fbe13de673fa47db"
      },
      "downloads": -1,
      "filename": "django-paranoid-model-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "46437e499decbf65eb2b8690ecbb9bf0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 15058,
      "upload_time": "2020-01-16T19:46:20",
      "upload_time_iso_8601": "2020-01-16T19:46:20.252033Z",
      "url": "https://files.pythonhosted.org/packages/94/fa/c4a39d779a77428eb0c292502fb303a6fc8abcd77c9d86c5dc97b218b038/django-paranoid-model-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}