{
  "info": {
    "author": "Tanmoy Sarkar",
    "author_email": "ts741127@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Lumi 💧 <a href=\"https://hits.seeyoufarm.com\"><img src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FTanmoy741127%2Flumi&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false\"/></a>\n\n<img align=\"right\" src=\"https://raw.githubusercontent.com/Tanmoy741127/cdn/main/lumi/lumi-logo.png\" height=\"100px\"/>\n\nLumi is an nano framework to convert your python functions into a REST API without any extra headache.\n\n* This library is created by taking the concept of **RPC** and blended with **REST API** specs. \n* We need to just register the function and it will be available as a REST API. \n* Web-server written with **Gunicorn**\n* Local development server provided for rapid development and prototyping.\n\n## Installation\n\n```bash\npip install lumi\n```\n\n## Function <--> API mapping\n![function - API maaping](https://raw.githubusercontent.com/Tanmoy741127/cdn/main/lumi/function-api-map.png)\n\n\n## How to use 🤔\n\nLet's create a simple function to add two numbers.\n\n```python\ndef add(a, b):\n    return a + b\n\ndef substract(a, b):\n    return a - b\n```\n\nNow, we want to expose this function as a REST API. We can do this by registering the function with Lumi.\n\n```python\n# app.py\n\nfrom lumi import Lumi\n\napp = Lumi()\n\napp.register(add) # Registering the function\napp.register(substract)\n\napp.runServer(host=\"127.0.0.1\", port=8080)\n```\n\nNoice 🎉🎉  API has been generated\n\nRun the sever by\n```\npython app.py\n```\nYou are going to see this in your terminal \n```\n[2022-11-24 17:32:08 +0530] [10490] [INFO] Starting gunicorn 20.1.0\n[2022-11-24 17:32:08 +0530] [10490] [INFO] Listening at: http://127.0.0.1:8080 (10490)\n[2022-11-24 17:32:08 +0530] [10490] [INFO] Using worker: sync\n[2022-11-24 17:32:08 +0530] [10492] [INFO] Booting worker with pid: 10492\n...\n...\n[2022-11-24 17:32:08 +0530] [10500] [INFO] Booting worker with pid: 10500\n```\n\nCongratulations 👏. Our Server is online. \n\n\nThe above code will generate a REST API with the following details.\n\n- Endpoint : `127.0.0.1:8080`\n- Route : `/add`\n- Method : `POST`\n- Sample Request Body : `{\"a\": 1, \"b\": 2}`\n\nLet's run the API and test it.\n\n```curl\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"a\": 1, \"b\": 2}' http://127.0.0.1:8080/add\n```\n\nOutput\n\n```json\n{\n    \"exit_code\": 0, \n    \"status_code\": 200, \n    \"result\": 3, \n    \"error\": \"\"\n}\n```\n\n## Custom Routing\nNow you may think, the function name will be always same as the route. But, you can change the route by passing the route parameter.\n\n```python\napp.register(add, route=\"/addition\")\n```\n## Custom Request Method\nBy default, the request method is `POST`. But, you can change it by passing the method parameter. Currenetly , it supports `POST`, `PUT` and `PATCH` methods.\n\n```python\nfrom lumi import Lumi, RequestMethod\n\napp = Lumi()\n\ndef add(a, b):\n    return a+b\n\n\napp.register(add, request_method=RequestMethod.PUT) # Register function for PUT method\napp.register(add, request_method=RequestMethod.PATCH) # Register function for PATCH method\n\napp.runServer()\n```\n\n## Status Codes\n\n| Status Code | Description |\n| --- | --- |\n| 200 | Request successfully executed and No Error happened during function execution |\n| 500 | Request was received but there was an error during function execution |\n| 400 | Bad Request (Possible Reason - The required parameters for the function has not provided) |\n| 405 | Method Not Allowed (Lumi only supports **POST** request) |\n| 404 | The route has no function associated with that |\n\n\n## Exit Codes\n| Exit Code | Description |\n| --- | --- |\n| 0 | No Error |\n| 1 | Error |\n\n> Note : If the function has some error , you can expect the exit code to be 1 and the error message in the response.\n\n## Task Lists\n- [x] Base System\n- [x] Add support for default parameters that is provided in the function\n- [ ] Make available GET request for the function\n- [x] Provide option to override POST with PUT if the user wants\n- [ ] Add authentication middleware support\n- [ ] Support nested routing of urls\n- [ ] For local development, create an file observer that can automatically reload the server when the file is changed.\n- [ ] Add support for object serialization and deserialization based on argument types of function\n\n## Contributing\n\nContributions are always welcome!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tanmoy741127/lumi",
    "keywords": "rpc rest api web backend framework",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lumi",
    "package_url": "https://pypi.org/project/lumi/",
    "platform": null,
    "project_url": "https://pypi.org/project/lumi/",
    "project_urls": {
      "Homepage": "https://github.com/Tanmoy741127/lumi"
    },
    "release_url": "https://pypi.org/project/lumi/1.0.7/",
    "requires_dist": [
      "gunicorn (==20.1.0)",
      "nanoid (==2.0.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Convert your Python functions into REST API without any extra effort 🔥",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16183087,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9437fc14e476f36a51861a99c2ce5932c2bac960121d9fcf7197bc4971487b1c",
        "md5": "a64627a112c4ff3916af5fc5b69c6f8e",
        "sha256": "d2f1dc39b0d0908ba8015a621072fbd278c08fbfed520ac308bf1f63bd320b42"
      },
      "downloads": -1,
      "filename": "lumi-1.0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a64627a112c4ff3916af5fc5b69c6f8e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 7244,
      "upload_time": "2022-11-25T16:32:41",
      "upload_time_iso_8601": "2022-11-25T16:32:41.261924Z",
      "url": "https://files.pythonhosted.org/packages/94/37/fc14e476f36a51861a99c2ce5932c2bac960121d9fcf7197bc4971487b1c/lumi-1.0.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee701ef6c86d59e78922f10a5d42da49ee7f2ba6298fbda1dc07e5085f3fd13d",
        "md5": "4e44acf0f36f59e45d85837e539f1798",
        "sha256": "3634d88c6f04f5e8ffb22a8e9dc5109ed1c7babf0ecfe3ac415962b37fc65a71"
      },
      "downloads": -1,
      "filename": "lumi-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "4e44acf0f36f59e45d85837e539f1798",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6854,
      "upload_time": "2022-11-25T16:32:43",
      "upload_time_iso_8601": "2022-11-25T16:32:43.454343Z",
      "url": "https://files.pythonhosted.org/packages/ee/70/1ef6c86d59e78922f10a5d42da49ee7f2ba6298fbda1dc07e5085f3fd13d/lumi-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}