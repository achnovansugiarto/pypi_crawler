{
  "info": {
    "author": "Develatio Technologies S.L.",
    "author_email": "contacto@develat.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Internationalization",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Localization"
    ],
    "description": "![PyPI](https://img.shields.io/pypi/v/django-tradukoj.svg)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n![t](https://img.shields.io/badge/status-stable-green.svg)\n\n# Tradukoj\n\nTradujok is a django db-based translation system with IETF's BCP 47 standard support\nand django-rest-framework serializers.\n\nTradukoj can be integrated with common js i18n libs thanks to his JSON tree generation feature.\n\nThis app is maintained and internally used by Develatio Technologies.\n\n## Requierements\n\n* Python: >= 3.6\n\n* Django: >= 2.1, 2.2\n\n## Features\n\n* Namespaces to separate projects or big sections of your app\n* JSON tree generation with your translations\n* django-rest-framework urls/views/serializers\n* django-rest-framework fields to be used in serializers\n* Fallback translation for drf fields\n* Translate model fields\n* Languaje detection endpoint\n* RTL - LTR support\n* PO files Import/Export\n* Public/Private translations isolation\n\n## Quick start\n\n1.  Install `pip install django-tradukoj`\n\n2. Add \"tradukoj\" to INSTALLED_APPS:\n\n```\nINSTALLED_APPS = {\n    ...\n    'tradukoj'\n}\n```\n\n3. Include the tradukoj URLconf in urls.py: `url(r'^tradukoj/', include('tradukoj.urls'))`\n\n4. Run `python manage.py migrate` to create db records.\n\n\n## Translate model fields\n\nUsage of `OneToOneTradukojField`:\n\n```\nfrom tradukoj.fields import OneToOneTradukojField\n\nclass MyModel(models.Model):\n    name = OneToOneTradukojField(null=True, blank=True, verbose_name='Name')\n\n```\n\n## Handle translations\n\n### Automatic key generation:\n\n```\n>>> from tradukoj.models import TranslationKey\n>>> from myapp.models import MyModel\n\n>>> instance = MyModel()\n>>> # This creates a translatable key with automatically generated name\n>>> instance.name = TranslationKey(init_namespace='mynamespace', public=True)\n>>> instance.name\n<TranslationKey: mynamespace.myapp_mymodel_name_0def4d78080144cdbc96302842935192>\n\n>>> # This will add a translation for es-ES to instance.name\n>>> # A record with 'es-ES' into tradukoj.models.BCP47 will be created if it\n>>> # does not exist.\n>>> instance.name.translate('es-ES', 'mi nombre')\n\n>>> # Access translations:\n>>> instance.name.translations.all()\n<QuerySet [<Translation: (es-ES - español (Spanish)) mynamespace.myapp_mymodel_name_0def4d78080144cdbc96302842935192 => mi nombre>]>\n\n>>> instance.name.translations.get(bcp47__langtag='es-ES')\n<Translation: (es-ES - español (Spanish)) test.medicalscience_specialties_name_0def4d78080144cdbc96302842935192 => mi nombre>\n\n>>> instance.name.translations.get(bcp47__langtag='es-ES').str_translation()\n'mi nombre'\n\n```\n\n\n## Custom key name:\n\nIf you dont specify a key for translation, a random one will be generated. To\nspecify a key, you should pass it as argument to `TranslationKey`:\n\n```\n>>> instance.name = TranslationKey(init_namespace='test', text='A translatable string', public=True)\n>>> instance.name\n<TranslationKey: test.A translatable string>\n>>> instance.name.save()\n>>> instance.name.translate('es-ES', 'Una cadena traducible')\n>>> instance.name.translations.all()\n<QuerySet [<Translation: (es-ES - español (Spanish)) test.A translatable string => Una cadena traducible>]>\n```\n\n\n## JSON tree of translations\n\nIf you are planning to use json tree feature of tradukoj, remember that a dot in\nkey are handled as subobject.\n\n```\nTranslationKey(init_namespace='project', text='home.title', public=True)\nTranslationKey(init_namespace='project', text='home.subtitle', public=True)\n```\n\nresults into this json object:\n```\n{\n    es-ES: {\n        project: {\n            home: {\n                title: 'Bienvenido',\n                subtitle: 'Secciones'\n            }\n        }\n    },\n    en-US: {\n        project: {\n            home: {\n                title: 'Welcome',\n                subtitle: 'Sections'\n            }\n        }\n    }\n}\n```\n\n\n## API REST Endpoints\n\n* Languaje detection: `YOUR_API_URL/tradukoj/bestlangtag/`\nAsking from `es-ES;en` (spanish-Spain,english) a web with only\n`es-MX` (spanish-Mexico) lang:\n\n```\n[\n    {\n        \"langtag\": \"es-MX\",\n        \"score\":92,\n        \"accept_lang\": \"es-es\"\n    },\n    {\n        \"langtag\": \"es-MX\",\n        \"score\": 92,\n        \"accept_lang\":\"es\"\n    },\n    {\n        \"langtag\":\"en\",\n        \"score\":100,\n        \"accept_lang\":\"en\"\n    }\n]\n```\n\n* Available langs: `YOUR_API_URL/tradukoj/available/`\n```\n{\n    \"count\": 28,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\"langtag\":\"en-EN\",\"name\":\"English (English)\",\"best_match_score\":92,\"default\":false,\"direction\":0},\n        {\"langtag\":\"es-MX\",\"name\":\"español (Spanish)\",\"best_match_score\":92,\"default\":false,\"direction\":0},\n        {\"langtag\":\"en-US\",\"name\":\"English (English)\",\"best_match_score\":98,\"default\":false,\"direction\":0},\n        {\"langtag\":\"ar-LB\",\"name\":\"العربية (Arabic)\",\"best_match_score\":0,\"default\":false,\"direction\":1},\n        {\"langtag\":\"fr-FR\",\"name\":\"français (French)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"pt-PT\",\"name\":\"português (Portuguese)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"ru-RU\",\"name\":\"русский (Russian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"de-DE\",\"name\":\"Deutsch (German)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"it-IT\",\"name\":\"italiano (Italian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"hu-HU\",\"name\":\"magyar (Hungarian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"cs-CZ\",\"name\":\"čeština (Czech)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"zh-CN\",\"name\":\"中文 (Chinese)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"vi-VN\",\"name\":\"Tiếng Việt (Vietnamese)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"hi-IN\",\"name\":\"हिन्दी (Hindi)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"uk_UA\",\"name\":\"українська (Ukrainian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"hy_AM\",\"name\":\"հայերեն (Armenian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"be_BY\",\"name\":\"беларуская (Belarusian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"bg_BG\",\"name\":\"български (Bulgarian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"km_KH\",\"name\":\"ខ្មែរ (Khmer)\",\"best_match_score\":84,\"default\":false,\"direction\":0},\n        {\"langtag\":\"et_EE\",\"name\":\"eesti (Estonian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"lv_LV\",\"name\":\"latviešu (Latvian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"pl_PL\",\"name\":\"polski (Polish)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"ro_RO\",\"name\":\"română (Romanian)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"uz_Latn\",\"name\":\"o‘zbek (Uzbek)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"tr_TR\",\"name\":\"Türkçe (Turkish)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"th_TH\",\"name\":\"ไทย (Thai)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"zh_TW\",\"name\":\"中文 (Chinese)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n        {\"langtag\":\"az_AZ\",\"name\":\"azərbaycan (Azerbaijani)\",\"best_match_score\":0,\"default\":false,\"direction\":0},\n    ]\n}\n```\n\n* Get all public translations list: `YOUR_API_URL/tradukoj/public/`\n* Get all private translations list: `YOUR_API_URL/tradukoj/private/`\n* Get plain JSON of all public translations: `YOUR_API_URL/tradukoj/public/plain/`\n* Get plain JSON of all private translations: `YOUR_API_URL/tradukoj/private/plain/`\n* Get filtered public translations: `YOUR_API_URL/tradukoj/public/plain/?bcp47__langtag=es&key__namespace__text=mynamespace`\n* Get filtered private translations: `YOUR_API_URL/tradukoj/public/plain/?bcp47__langtag=es&key__namespace__text=mynamespace`\n\n\n## Django Rest Framework, Tradukoj Field.\n\nTo handle a model translatable field into your drf serializers, `TradukojSerializedField`\n\n```\nfrom tradukoj.drf_fields import TradukojSerializedField\n\nclass MySerializer(serializers.ModelSerializer):\n    name = TradukojSerializedField(read_only=True, fallback_langtag='en-US')\n\n    class Meta:\n        model = MyModel\n        exclude = ('id', )\n\n```\n\nThis will give you a JSON like:\n\n```\n{\n    name: {\n        'fallback': 'Welcome',\n        'text': 'mykey',\n        'translations': {\n            'es-ES': 'Bienvenido',\n            'en-US': 'Welcome'\n        }\n    }\n}\n```\n\n\n## Command line tools\n\n### Generate .po file\n```\nusage: manage.py generate_pofile [-h] --langtag LANGTAG --output OUTPUT\n                                 --namespace NAMESPACE --reference_langtag\n                                 REFERENCE_LANGTAG [--version] [-v {0,1,2,3}]\n                                 [--settings SETTINGS]\n                                 [--pythonpath PYTHONPATH] [--traceback]\n                                 [--no-color] [--force-color]\n\nGenerate a .po file of langtag\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --langtag LANGTAG     tag used in BCP47\n  --output OUTPUT       output file\n  --namespace NAMESPACE\n                        namespace of translations\n  --reference_langtag REFERENCE_LANGTAG\n                        translated text used in comments to help translator\n                        team\n  --version             show program's version number and exit\n  -v {0,1,2,3}, --verbosity {0,1,2,3}\n                        Verbosity level; 0=minimal output, 1=normal output,\n                        2=verbose output, 3=very verbose output\n  --settings SETTINGS   The Python path to a settings module, e.g.\n                        \"myproject.settings.main\". If this isn't provided, the\n                        DJANGO_SETTINGS_MODULE environment variable will be\n                        used.\n  --pythonpath PYTHONPATH\n                        A directory to add to the Python path, e.g.\n                        \"/home/djangoprojects/myproject\".\n  --traceback           Raise on CommandError exceptions\n  --no-color            Don't colorize the command output.\n  --force-color         Force colorization of the command output.\n```\n\nGenerate a .po file of `es-ES` and put `en-US` translations as a commentary of\nevery `msgid`:\n\n`python manage.py generate_pofile --langtag es-ES --output ./pofile.po --namespace mynamespace --reference_langtag en-US`\n\n\n### Destroy keys not in a .po file:\n\nThis will destroy those keys not in a .po file and related translations.\n\n```\nusage: manage.py destroy_dbkeys_not_in_pofile [-h] --pofile POFILE --namespace\n                                              NAMESPACE [--safe] [--version]\n                                              [-v {0,1,2,3}]\n                                              [--settings SETTINGS]\n                                              [--pythonpath PYTHONPATH]\n                                              [--traceback] [--no-color]\n                                              [--force-color]\n\nRemove those translations key in DB that does not exists in a given pofile\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --pofile POFILE       The pofile\n  --namespace NAMESPACE\n                        The namespace\n  --safe                Show those keys that should be deleted but do not\n                        commit delete command on db\n  --version             show program's version number and exit\n  -v {0,1,2,3}, --verbosity {0,1,2,3}\n                        Verbosity level; 0=minimal output, 1=normal output,\n                        2=verbose output, 3=very verbose output\n  --settings SETTINGS   The Python path to a settings module, e.g.\n                        \"myproject.settings.main\". If this isn't provided, the\n                        DJANGO_SETTINGS_MODULE environment variable will be\n                        used.\n  --pythonpath PYTHONPATH\n                        A directory to add to the Python path, e.g.\n                        \"/home/djangoprojects/myproject\".\n  --traceback           Raise on CommandError exceptions\n  --no-color            Don't colorize the command output.\n  --force-color         Force colorization of the command output.\n```\n\n\n### Show incompatible keys when use JSON tree generation feature\n\nIf you are planning to use JSON tree generation, some keys will be incompatible\nwith this scheme:\n\n* namespace.section.title = 'test'\n* namespace.section = 'test'\n\nto detect those incompatibility, use `show_incompatible_tree_key` command:\n\n```\nusage: manage.py show_incompatible_tree_key [-h] [--pofile POFILE] [--version]\n                                            [-v {0,1,2,3}]\n                                            [--settings SETTINGS]\n                                            [--pythonpath PYTHONPATH]\n                                            [--traceback] [--no-color]\n                                            [--force-color]\n\nShow incompatible Translation Key for plain tree generation\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --pofile POFILE       Test pofile instead database\n  --version             show program's version number and exit\n  -v {0,1,2,3}, --verbosity {0,1,2,3}\n                        Verbosity level; 0=minimal output, 1=normal output,\n                        2=verbose output, 3=very verbose output\n  --settings SETTINGS   The Python path to a settings module, e.g.\n                        \"myproject.settings.main\". If this isn't provided, the\n                        DJANGO_SETTINGS_MODULE environment variable will be\n                        used.\n  --pythonpath PYTHONPATH\n                        A directory to add to the Python path, e.g.\n                        \"/home/djangoprojects/myproject\".\n  --traceback           Raise on CommandError exceptions\n  --no-color            Don't colorize the command output.\n  --force-color         Force colorization of the command output.\n```\n\n### Load .po files\n\nImporting `tradukoj.admin` models into your admin, will give you some features\nlike importing .po files.\n\n```\nfrom tradukoj import models\n\n\nclass TranslationKeyAdmin(admin.ModelAdmin):\n    search_fields = ('text',)\n\nclass TranslationAdmin(admin.ModelAdmin):\n    search_fields = ('key__text',)\n\n\nadmin.site.register(models.TranslationKey, TranslationKeyAdmin)\nadmin.site.register(models.GetTextFile)\nadmin.site.register(models.Namespace)\nadmin.site.register(models.Translation, TranslationAdmin)\nadmin.site.register(models.BCP47)\n\n```\n\n\n### Vue.js: Translate fields POC\n\nAssuming that you are storing your current languaje tag in `store.state.i18n.active_langtag`,\nuse this POC vuejs code:\n\ncreate a `plugins/tradukoj-translate.js` with this content:\n\n```\nimport store from \"../store\";\n\nconst TradukojTranslatable = {\n  install(Vue) {\n    Vue.mixin({\n      methods: {\n        $tradukojTranslate(translatable) {\n          if (!translatable) {\n            return \"\";\n          }\n\n          if (\n            translatable.translations &&\n            translatable.translations[store.state.i18n.active_langtag]\n          ) {\n            return translatable.translations[\n              store.state.i18n.active_langtag\n            ];\n          }\n\n          if (translatable.fallback) {\n            return translatable.fallback;\n          }\n\n          return \"\";\n        }\n      }\n    });\n  }\n};\nexport default TradukojTranslatable;\n```\n\nRegister globally:\n\n```\nimport TradukojTranslatable from \"@/plugins/tradukoj-translatable\";\nVue.use(TradukojTranslatable);\n```\n\nUse in component:\n\n```\n<template>\n  <div>\n    <p>{{ $tradukojTranslate(mymodel.name) }}</p>\n  </div>\n</template>\n[...]\n```\n\nOnce you change the value of `store.state.i18n.active_langtag`, the translations will be\nautomatically updated to current selected lang.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/develatio/django-tradukoj/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-tradukoj",
    "package_url": "https://pypi.org/project/django-tradukoj/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-tradukoj/",
    "project_urls": {
      "Homepage": "https://github.com/develatio/django-tradukoj/"
    },
    "release_url": "https://pypi.org/project/django-tradukoj/1.0.4/",
    "requires_dist": [
      "Django (>=2.0)",
      "langcodes (>=1.4.1)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A django IETF's BCP 47 DB-based translation system",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7561639,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e62bbd567f68817dec70db182b490993f28e793ae9af11216859a65d9e33e584",
        "md5": "013b3b036225026a6b65857e191ff221",
        "sha256": "934f6fc7e37618b9ead3f229b419821ff67fe3ef04a73a9af68cfa55680eaa13"
      },
      "downloads": -1,
      "filename": "django_tradukoj-1.0.4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "013b3b036225026a6b65857e191ff221",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": ">=3.6.0",
      "size": 27453,
      "upload_time": "2019-06-13T20:03:06",
      "upload_time_iso_8601": "2019-06-13T20:03:06.027442Z",
      "url": "https://files.pythonhosted.org/packages/e6/2b/bd567f68817dec70db182b490993f28e793ae9af11216859a65d9e33e584/django_tradukoj-1.0.4-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cee430aa523946ffa2733ec41b22193ecfdf2eeb1eacb4d18614eebd96163fe1",
        "md5": "ccf5e851415df714df9771722326c68c",
        "sha256": "fe24295b570f59e820a0458a338991cecc7e6a7e1e92a15d89c682ba012a419a"
      },
      "downloads": -1,
      "filename": "django-tradukoj-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "ccf5e851415df714df9771722326c68c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 17360,
      "upload_time": "2019-06-13T20:03:09",
      "upload_time_iso_8601": "2019-06-13T20:03:09.950106Z",
      "url": "https://files.pythonhosted.org/packages/ce/e4/30aa523946ffa2733ec41b22193ecfdf2eeb1eacb4d18614eebd96163fe1/django-tradukoj-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}