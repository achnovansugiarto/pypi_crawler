{
  "info": {
    "author": "Brandon Taylor",
    "author_email": "alsoicode@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "django-maintenancemode-2\n========================\n\n|Build Status|\n\nCurrent Version: 2.0.0\n\nThis project makes it easy to put your Django site into “maintenance\nmode”, or more technically, return an HTTP 503 response.\n\nThis project differs slightly from other implementations in that the\nmaintenance mode flag is stored in your database versus settings or an\nenvironment variable. If your site is deployed to multiple servers, the\ncentralized database-based maintenance flag makes it a snap to bring\nthem all up or down at once.\n\nRequirements\n------------\n\n-  `django <https://www.djangoproject.com/download/>`__\n-  `django.contrib.sites <https://docs.djangoproject.com/en/1.11/ref/contrib/sites/>`__\n\nPre-Requisites\n--------------\n\nYou must have at least one Site entry in your database **before**\ninstalling django-maintenancemode-2.\n\nSupported Python Versions\n-------------------------\n\n-  2.7, 3.x\n\nSupported Django Versions\n-------------------------\n-  4.x use the latest version\n-  2.x >= 3.x, please use version 1.3.1\n-  < 2, please use version 1.1.9\n\nInstallation\n------------\n\n1. ``pip install django-maintenancemode-2``\n\n– or –\n\n1. Download django-maintenancemode-2 from\n   `source <https://github.com/alsoicode/django-maintenancemode-2/archive/master.zip>`__\n2. \\*optional: Enable a virtualenv\n3. Run ``python setup.py install`` or add ``maintenancemode`` to your\n   PYTHONPATH\n\nSettings and Required Values\n----------------------------\n\n-  Ensure the `Sites\n   Framework <https://docs.djangoproject.com/en/1.11/ref/contrib/sites/>`__\n   is enabled, and you have at least one entry in the Sites table.\n-  Add ``maintenancemode.middleware.MaintenanceModeMiddleware`` to your\n   ``MIDDLEWARE_CLASSES``\n-  Add ``maintenancemode`` to your ``INSTALLED_APPS``\n-  Run ``python manage.py migrate`` to create the ``maintenancemode``\n   tables.\n-  Run your project to automatically add the ``maintenancemode``\n   database records.\n-  Add a 503.html template to the root of your templates directory, or\n   optionally add a ``MAINTENANCE_503_TEMPLATE`` path to your 503.html\n   file’s location in settings.\n-  ``maintenancemode`` will ignore any patterns beginning with the\n   default Django Admin url: ``^admin`` so you can turn it off. If you\n   use a custom url for admin, you may override the ignored admin\n   patterns by adding the ``MAINTENANCE_ADMIN_IGNORED_URLS`` list in\n   settings. Example: ``['^my-custom-admin', '^my-other-custom-admin']``\n-  You can also block staff users, who by default are ignored by\n   maintenance mode, by setting ``MAINTENANCE_BLOCK_STAFF`` to ``True``\n\nUsage\n-----\n\n.. figure:: http://res.cloudinary.com/alsoicode/image/upload/v1449537052/django-maintenancemode-2/maintenancemode.jpg\n   :alt: Image of django-maintenancemode-2\n\n   Image of django-maintenancemode-2\n\nTurning Maintenance Mode **On**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo put a site into “Maintenance Mode”, check the “In Maintenance Mode”\ncheckbox and save in Django Admin under the “Maintenancemode” section.\nThe next time you visit the public side of the site, it will return a\n503 if:\n\n-  You are not logged in as a superuser or staff user\n-  You are not viewing a URL in the ignored patterns list\n-  Your ``REMOTE_ADDR`` does not appear in the ``INTERNAL_IPS`` setting\n\nOr you can alternatively use the ``setmaintenance`` management command:\n\n    # sets maintenance on for the current settings.SITE_ID\n    ./manage.py setmaintenance on\n\n    # sets maintenance on for sites 2 and 3\n    ./manage.py setmaintenance on 2 3\n\nwhich can be useful for ``fabric`` deployment scripts etc.\n\nTurning Maintenance Mode **Off**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLog in, un-check the “In Maintenance Mode” checkbox and save.\n\nOr you can alternatively use the ``setmaintenance`` management command:\n\n    # sets maintenance off for the current settings.SITE_ID\n    $ ./manage.py setmaintenance off\n\n    # sets maintenance off for sites 2 and 3\n    $ ./manage.py setmaintenance off 2 3\n\nTesting and Sample Application\n------------------------------\n\nA “testproject” application is included, which also contains unit and\nfunctional tests you can run via ``python manage.py test`` from the\n``testproject`` directory.\n\nYou will need to run ``manage.py migrate`` to create the test project\ndatabase.\n\nThere are only two views in the testproject: - / - /ignored-page\n\nTo see ``maintenancemode`` in action, log into Django admin, and set the\nmaintenance mode to true. Log out, then visit the home page, and\ninstead, you’ll be greeted with the maintenance page.\n\nTo have ``maintenancemode`` ignore the “ignored-page” view, simply add\nit’s url pattern to the Ignored URLs as:\n\n::\n\n   ^ignored-page/$\n\nNow you should be able to visit the ``ignored-page`` view regardless of\nthe maintenancemode status. This is useful for contact or help pages you\nstill want people to be able to access while you’re working on other\nparts of the site.\n\nDatabase migrations\n~~~~~~~~~~~~~~~~~~~\n\n``./manage.py migrate`` should add the necessary tables.\n\n.. |Build Status| image:: https://travis-ci.org/alsoicode/django-maintenancemode-2.svg\n   :target: https://travis-ci.org/alsoicode/django-maintenancemode-2",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alsoicode/django-maintenancemode-2",
    "keywords": "",
    "license": "APL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-maintenancemode-2",
    "package_url": "https://pypi.org/project/django-maintenancemode-2/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-maintenancemode-2/",
    "project_urls": {
      "Homepage": "https://github.com/alsoicode/django-maintenancemode-2"
    },
    "release_url": "https://pypi.org/project/django-maintenancemode-2/2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Database-driven way to put your Django site into maintenance mode.",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15579284,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86abd504c438c4fd9159ffacef97730676f61bde13202272a91d3d7bdb51e75e",
        "md5": "cb7c887db056cc28873a91425e15444d",
        "sha256": "13fbc56eaba0b2bcb16332a66e2566648dcb68a89fabafddd03899c3d8a76704"
      },
      "downloads": -1,
      "filename": "django-maintenancemode-2-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cb7c887db056cc28873a91425e15444d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18754,
      "upload_time": "2022-10-29T17:15:47",
      "upload_time_iso_8601": "2022-10-29T17:15:47.838802Z",
      "url": "https://files.pythonhosted.org/packages/86/ab/d504c438c4fd9159ffacef97730676f61bde13202272a91d3d7bdb51e75e/django-maintenancemode-2-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}