{
  "info": {
    "author": "Tonye Jack",
    "author_email": "jtonye@ymail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-dynamic-model-validation\n===============================\n\n![PyPI](https://img.shields.io/pypi/v/django-dynamic-model-validation) [![Build Status](https://travis-ci.org/tj-django/django-dynamic-model-validation.svg?branch=master)](https://travis-ci.org/tj-django/django-dynamic-model-validation) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/6973bc063f1142afb66d897261d8f8f5)](https://www.codacy.com/gh/tj-django/django-dynamic-model-validation/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=tj-django/django-dynamic-model-validation&amp;utm_campaign=Badge_Grade) [![Codacy Badge](https://app.codacy.com/project/badge/Coverage/6973bc063f1142afb66d897261d8f8f5)](https://www.codacy.com/gh/tj-django/django-dynamic-model-validation/dashboard?utm_source=github.com&utm_medium=referral&utm_content=tj-django/django-dynamic-model-validation&utm_campaign=Badge_Coverage) \n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-dynamic-model-validation) ![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-dynamic-model-validation) [![Downloads](https://pepy.tech/badge/django-clone)](https://pepy.tech/project/django-clone)\n\n\n\nIntroduction\n------------\nThis package aims to provide tools needed to define custom field validation logic which can be used independently or with\ndjango forms, test cases, API implementation or any model operation that requires saving data to the database.\n\nThis can also be extended by defining table check constraints if needed but currently validation\nwill only be handled at the model level.\n\nInstallation\n------------\n\ndjango-dynamic-model-validation is distributed on [PyPI](https://pypi.org) as a universal\nwheel and is available on Linux/macOS and Windows and supports\nPython 2.7/3.5+ and PyPy.\n\n```bash\npip install django-dynamic-model-validation\n```\n\nUsage\n-----\nThis provides model level validation which includes:\n\n  - Conditional field validation\n  - Cross field validation\n  - Required field validation\n  - Optional field validation\n\n### Require a single field in a collection\n\n```py\n\nfrom django.db import models\nfrom dynamic_validator import ModelFieldRequiredMixin\n\n\nclass TestModel(ModelFieldRequiredMixin, models.Model):\n    amount = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    fixed_price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)\n    percentage = models.DecimalField(max_digits=3, decimal_places=0, null=True, blank=True)\n\n    REQUIRED_TOGGLE_FIELDS = [\n        ['amount', 'fixed_price', 'percentage'],  # Require only one of the following fields.\n    ]\n\n```\n\n```bash\n\npython manage.py shell\n...\n>>> from decimal import Decimal\n>>> from demo.models import TestModel\n>>> TestModel.objects.create(amount=Decimal('2.50'), fixed_price=Decimal('3.00'))\n...\nValueError: {'fixed_price': ValidationError([u'Please provide only one of: Amount, Fixed price, Percentage'])}\n\n```\n\n### Require all fields\n\n```py\n\nfrom django.db import models\nfrom dynamic_validator import ModelFieldRequiredMixin\n\n\nclass TestModel(ModelFieldRequiredMixin, models.Model):\n    amount = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    fixed_price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)\n    percentage = models.DecimalField(max_digits=3, decimal_places=0, null=True, blank=True)\n\n    REQUIRED_FIELDS = ['amount']  # Always requires an amount to create the instance.\n```\n\n```bash\n\npython manage.py shell\n...\n>>> from decimal import Decimal\n>>> from demo.models import TestModel\n>>> TestModel.objects.create(fixed_price=Decimal('3.00'))\n...\nValueError: {'amount': ValidationError([u'Please provide a value for: \"amount\".'])}\n\n```\n\n### Optionally required fields\n\n```py\n\nfrom django.db import models\nfrom dynamic_validator import ModelFieldRequiredMixin\n\n\nclass TestModel(ModelFieldRequiredMixin, models.Model):\n    amount = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    fixed_price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)\n    percentage = models.DecimalField(max_digits=3, decimal_places=0, null=True, blank=True)\n\n    OPTIONAL_TOGGLE_FIELDS = [\n        ['fixed_price', 'percentage']  # Optionally validates that only fixed price/percentage are provided when present.\n    ]\n\n```\n\n```bash\n\npython manage.py shell\n...\n>>> from decimal import Decimal\n>>> from demo.models import TestModel\n>>> first_obj = TestModel.objects.create(amount=Decimal('2.0'))\n>>> second_obj = TestModel.objects.create(amount=Decimal('2.0'), fixed_price=Decimal('3.00'))\n>>> third_obj = TestModel.objects.create(amount=Decimal('2.0'), fixed_price=Decimal('3.00'), percentage=Decimal('10.0'))\n...\nValueError: {'percentage': ValidationError([u'Please provide only one of: Fixed price, Percentage'])}\n\n```\n\n### Conditional required fields\n\n```py\n\nfrom django.db import models\nfrom django.conf import settings\nfrom dynamic_validator import ModelFieldRequiredMixin\n\n\nclass TestModel(ModelFieldRequiredMixin, models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL)\n\n    amount = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    fixed_price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)\n    percentage = models.DecimalField(max_digits=3, decimal_places=0, null=True, blank=True)\n\n    CONDITIONAL_REQUIRED_FIELDS = [\n        (\n            lambda instance: instance.user.is_active, ['amount', 'percentage'],\n        ),\n    ]\n\n```\n\n```bash\n\npython manage.py shell\n...\n>>> from decimal import Decimal\n>>> from django.contrib.auth import get_user_model\n>>> from demo.models import TestModel\n>>> user = get_user_model().objects.create(username='test', is_active=True)\n>>> first_obj = TestModel.objects.create(user=user, amount=Decimal('2.0'))\n...\nValueError: {u'percentage': ValidationError([u'Please provide a value for: \"percentage\"'])}\n\n```\n\n### Conditional required optional fields\n\n```py\n\nfrom django.db import models\nfrom django.conf import settings\nfrom dynamic_validator import ModelFieldRequiredMixin\n\n\nclass TestModel(ModelFieldRequiredMixin, models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL)\n\n    amount = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    fixed_price = models.DecimalField(max_digits=7, decimal_places=2, null=True, blank=True)\n    percentage = models.DecimalField(max_digits=3, decimal_places=0, null=True, blank=True)\n\n    CONDITIONAL_REQUIRED_TOGGLE_FIELDS = [\n        (\n            lambda instance: instance.user.is_active, ['fixed_price', 'percentage', 'amount'],\n        ),\n    ]\n```\n\n```bash\n\npython manage.py shell\n...\n>>> from decimal import Decimal\n>>> from django.contrib.auth import get_user_model\n>>> from demo.models import TestModel\n>>> user = get_user_model().objects.create(username='test', is_active=True)\n>>> first_obj = TestModel.objects.create(user=user)\n...\nValueError: {'__all__': ValidationError([u'Please provide a valid value for any of the following fields: Fixed price, Percentage, Amount'])}\n...\n>>>first_obj = TestModel.objects.create(user=user, amount=Decimal('2'), fixed_price=Decimal('2'))\n...\nValueError: {'__all__': ValidationError([u'Please provide only one of the following fields: Fixed price, Percentage, Amount'])}\n...\n\n```\n\nModel Attributes\n----------------\n\nThis is done using model attributes below.\n\n```py\n\n#  Using a list/iterable: [['a', 'b'], ['c', 'd']] which validates that a field from each item is provided.\nREQUIRED_TOGGLE_FIELDS = []\n\n# Using a list/iterable validates that all fields are provided.\nREQUIRED_FIELDS = []\n\n# Optional toggle fields list: [['a', 'b']] which runs the validation only when any of the fields are present.\nOPTIONAL_TOGGLE_FIELDS = []\n\n# Conditional field validation using a list of tuples the condition which could be boolean or a callable and the list/iterable of fields that are required if the condition evaluates to `True`.\n# [(condition, [fields]), (condition, fields)]\n\n# Using a callable CONDITIONAL_REQUIRED_FIELDS = [(lambda instance: instance.is_admin, ['a', 'd'])]\n# Using a boolean CONDITIONAL_REQUIRED_TOGGLE_FIELDS = [(True, ['b', 'c']), (True, ['d', f])]\n# asserts that either 'b' or 'c' is provided and either 'd' or 'f'.\n# (Note: This can also be handled using REQUIRED_FIELDS/REQUIRED_TOGGLE_FIELDS)\n\n# Validates that all fields are present if the condition is True\nCONDITIONAL_REQUIRED_FIELDS = []\n# Validated at least one not both fields are provided if the condition is True.\nCONDITIONAL_REQUIRED_TOGGLE_FIELDS = []\n\n```\n\nLicense\n-------\n\ndjango-dynamic-model-validation is distributed under the terms of both\n\n  - [MIT License](https://choosealicense.com/licenses/mit)\n  - [Apache License, Version 2.0](https://choosealicense.com/licenses/apache-2.0)\n\nat your option.\n\nTODO's\n------\n  - Move to support class and function based validators that use the instance object this should enable cross field model validation.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jackton1/django-dynamic-model-validation.git",
    "keywords": "django,model validation,django models,django object validation,field validation,conditional validation,cross field validation,django validation,django validators,django custom validation",
    "license": "MIT/Apache-2.0",
    "maintainer": "Tonye Jack",
    "maintainer_email": "jtonye@ymail.com",
    "name": "django-dynamic-model-validation",
    "package_url": "https://pypi.org/project/django-dynamic-model-validation/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dynamic-model-validation/",
    "project_urls": {
      "Homepage": "https://github.com/jackton1/django-dynamic-model-validation.git"
    },
    "release_url": "https://pypi.org/project/django-dynamic-model-validation/1.0.0/",
    "requires_dist": [
      "future",
      "six",
      "readme-renderer[md] ; extra == 'deploy'",
      "bump2version (==0.5.11) ; extra == 'deploy'",
      "Django (>=1.11.18) ; extra == 'development'",
      "pip-tools ; extra == 'development'",
      "check-manifest ; extra == 'development'",
      "future ; extra == 'development'",
      "six ; extra == 'development'",
      "tox ; extra == 'development'",
      "pytest-django ; extra == 'development'",
      "pluggy (>=0.7) ; extra == 'development'",
      "mock ; extra == 'development'",
      "codacy-coverage ; extra == 'development'",
      "flake8 ; extra == 'development'",
      "yamllint ; extra == 'development'",
      "isort ; extra == 'development'",
      "flake8 ; extra == 'lint'",
      "yamllint ; extra == 'lint'",
      "isort ; extra == 'lint'",
      "tox ; extra == 'test'",
      "pytest-django ; extra == 'test'",
      "pluggy (>=0.7) ; extra == 'test'",
      "mock ; extra == 'test'",
      "codacy-coverage ; extra == 'test'",
      "Django (>=1.11.18) ; extra == 'tox'",
      "pip-tools ; extra == 'tox'",
      "check-manifest ; extra == 'tox'"
    ],
    "requires_python": ">=2.6",
    "summary": "Extra django model validation.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9609693,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d3d19772333cd61b563305b91c74b2402c61e524d5d8a305a9b9c49a13dcd9c",
        "md5": "ff4b98f05f7c98e65c676ef0d45acd52",
        "sha256": "39719897cc73b92dc052bcfc42506ad946fd6b5d358b5892a8f7de2c6c401e1e"
      },
      "downloads": -1,
      "filename": "django_dynamic_model_validation-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff4b98f05f7c98e65c676ef0d45acd52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.6",
      "size": 15721,
      "upload_time": "2021-03-03T10:31:01",
      "upload_time_iso_8601": "2021-03-03T10:31:01.110511Z",
      "url": "https://files.pythonhosted.org/packages/7d/3d/19772333cd61b563305b91c74b2402c61e524d5d8a305a9b9c49a13dcd9c/django_dynamic_model_validation-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8c0340a05de9b01d93c95d11b27782b952ea23c4cba9f28318ba4314c17834f",
        "md5": "72d5654f3f2f7398afbd77b2da62ce86",
        "sha256": "30612c12ef2c6001b78ea154be8754b5729b832e9279a8ebf307a9ff3def1bd5"
      },
      "downloads": -1,
      "filename": "django-dynamic-model-validation-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "72d5654f3f2f7398afbd77b2da62ce86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.6",
      "size": 11418,
      "upload_time": "2021-03-03T10:31:03",
      "upload_time_iso_8601": "2021-03-03T10:31:03.086735Z",
      "url": "https://files.pythonhosted.org/packages/b8/c0/340a05de9b01d93c95d11b27782b952ea23c4cba9f28318ba4314c17834f/django-dynamic-model-validation-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}