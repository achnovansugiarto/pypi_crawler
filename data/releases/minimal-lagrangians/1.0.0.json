{
  "info": {
    "author": "Simon May",
    "author_email": "simon.may@mpa-garching.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# minimal-lagrangians\nThis is a Python program which allows one to specify the field content of an extension\nof the Standard Model of particle physics (SM) and, using this information, generates the\nmost general renormalizable Lagrangian that describes such a model. As the program was\nwritten for the study of minimal dark matter models with radiative neutrino masses,\nit can handle additional fields with the following properties:\n- scalar or Weyl fermion fields\n- SU(3) singlets\n- SU(2) singlets, doublets or triplets\n- arbitrary hypercharge\n- charged under a global ℤ₂ symmetry\n- charged under an arbitrary number of global U(1) symmetries\n\n## Requirements\nThe program requires Python 3 (tested with Python ≥ 3.4).\nNo external libraries are necessary.\n\n## Installation\n`minimal-lagrangians` is [available on pip](https://pypi.org/project/minimal-lagrangians/), so it can simply be installed by running\n\n    pip install minimal-lagrangians\n\n## Usage\n`minimal-lagrangians` only prints the potential involving at least one new (i. e. non-SM) field,\ni. e. the kinetic terms and the Standard Model Lagrangian are omitted. The models are\nnot checked for anomalies (tools like SARAH can be used for this purpose).\n\nThe new models are currently defined in the file [`data.py`](data.py). Models can be\nadded in a user-defined file (to be used with the `--model-file` option, see below) in\nthe following form:\n```python\n[\n\tBSMModel('<model_name>', (\n\t\t    # list of fields\n\t\t    # type       name   SU(2) rep.  hypercharge\n\t\t    # for a scalar field, e.g. a scalar doublet with hypercharge 1:\n\t\t    ScalarField ('S',   2,          Y=1),\n\t\t    # for a fermion field, e.g. a fermion singlet with hypercharge 0:\n\t\t    FermionField('F',   1,          Y=0),\n\t\t    # ℤ₂-even scalar field:\n\t\t    ScalarField ('S',   1,          Y=0, z2=1),\n\t\t    # …\n\t\t),\n\t\t# optional: parameter values for different hypercharge assignments (offsets), e.g.\n\t\t(0, 2, …)\n\t),\n\t# …\n]\n```\n\nTo add fields with global U(1) charges, use the optional parameter `u1`:\n```python\n        # type       name   SU(2) rep.  hypercharge  U(1) charges\n        # for a scalar field, e.g. a scalar doublet with hypercharge 1:\n        ScalarField ('S',   2,          Y=1,         u1=[ 1, 3, …]),\n        # for a fermion field, e.g. a fermion singlet with hypercharge 0:\n        FermionField('F',   1,          Y=0,         u1=[-1, 2, …]),\n```\nThe Standard Model fields are assumed to be neutral (`z2=1`, U(1) charges zero) under the new global symmetries.\n\nInformation on how to run the program on the command line can be obtained with\n`minimal-lagrangians -h`:\n>     usage: minimal-lagrangians [-h] [--format {LaTeX,SARAH,plain}]\n>                                [--model-file [path/to/file.py]] [--omit-equivalent-scalars]\n>                                [--omit-self-interaction] [--list-discarded-terms]\n>                                [--sarah-no-scalar-cpv]\n>                                model [parameter α]\n>     \n>     A Python program to generate the Lagrangians for dark matter models\n>     \n>     positional arguments:\n>       model                 name of the model whose Lagrangian is to be generated (specify\n>                             “list” in order to list all available models)\n>       parameter α           value of the model parameter α (determines hypercharges of the\n>                             fields)\n>     \n>     optional arguments:\n>       -h, --help            show this help message and exit\n>       --format {LaTeX,SARAH,plain}\n>                             output format for the generated Lagrangian (default: plain)\n>       --model-file [path/to/file.py]\n>                             file containing user-defined models; a file is only read if this\n>                             option is present (default: ./models.py)\n>       --omit-equivalent-scalars\n>                             keep only scalar fields from the model which have unique quantum\n>                             numbers and absolute hypercharge values (omit duplicates)\n>       --omit-self-interaction\n>                             omit pure self-interactions of the new fields in the Lagrangian,\n>                             that is, output only interaction terms which involve both SM and\n>                             new fields (default: output all terms)\n>       --list-discarded-terms\n>                             list redundant terms which were discarded from the Lagrangian\n>                             due to identities\n>       --sarah-no-scalar-cpv\n>                             assume that there is no CP violation causing mixing between\n>                             scalar and pseudoscalar fields for SARAH output\n\n\nTest cases can be run using\n\n    ./test.py\n\nAmong other checks, this currently tests whether the program produces the correct\nLagrangian for the following models:\n- T1-3-B with α = 0, which is studied in [(Fiaschi, Klasen, May; arXiv:1812.11133 [hep-ph])][1].\n- T1-1-A with α = 0, as given in [(Farzan; arXiv:0908.3729 [hep-ph])][2], which\n  presents an implementation of this model.\n- The models given in [(Cheung, Sanford; arXiv:1311.5896 [hep-ph])][3]:\n  - singlet–doublet fermion model (SDF, “model A”)\n  - singlet–doublet scalar model (SDS, “model B”)\n  - singlet–triplet scalar model (STS, “model C”)\n- The Higgs triplet model (→ seesaw type II), see e. g.\n  [(Kanemura, Yagyu; arXiv:1201.6287 [hep-ph])][4].\n\n## Examples\nFor example, running\n\n    minimal-lagrangians --omit-equivalent-scalars T1-1-A 0\n\nprints the Lagrangian for the model T1-1-A with α = 0 from\n[(Restrepo, Zapata, Yaguna; arXiv:1308.3655 [hep-ph])][5]:\n>      - M_ϕ'² ϕ'^† ϕ' - ½ M_φ² φ²\n>      - (λ₁ (H ϕ') φ + H.c.)\n>      - λ₂ (H^† H) (ϕ'^† ϕ') - λ₃ (H^† ϕ') (ϕ'^† H) - λ₄ (ϕ'^† ϕ')² - λ₅ (H^† H) φ² - λ₆ (ϕ'^† ϕ') φ² - (λ₇ (H ϕ')² + H.c.) - λ₈ φ⁴\n>      - (½ M_ψ ψ ψ + H.c.)\n>      - (y₁ (ϕ'^† L) ψ + H.c.)\n\nRunning\n\n    minimal-lagrangians STS\n\nprints the Lagrangian for model C (singlet–triplet scalar) from\n[(Cheung, Sanford; arXiv:1311.5896 [hep-ph])][3]:\n>      - ½ M_T² Tr(T²) - ½ M_S² S²\n>      - λ₁ H^† T² H - λ₂ (H^† T H) S - λ₃ (H^† H) S² - λ₄ Tr(T²)² - λ₅ Tr(T²) S² - λ₆ S⁴\n\n\n\n[1]: https://arxiv.org/abs/1812.11133\n[2]: https://arxiv.org/abs/0908.3729\n[3]: https://arxiv.org/abs/1311.5896\n[4]: https://arxiv.org/abs/1201.6287\n[5]: https://arxiv.org/abs/1308.3655\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/Socob/minimal-lagrangians",
    "keywords": "particle physics,beyond the standard model,dark matter",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "minimal-lagrangians",
    "package_url": "https://pypi.org/project/minimal-lagrangians/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/minimal-lagrangians/",
    "project_urls": {
      "Homepage": "https://gitlab.com/Socob/minimal-lagrangians"
    },
    "release_url": "https://pypi.org/project/minimal-lagrangians/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "A Python program to generate the Lagrangians for dark matter models",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7012909,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0456662629ef2557035bd31b390e8950d6b136d8ff3bd0893c0d638a99165907",
        "md5": "8247c01b435b07703ad6bc0b0022839e",
        "sha256": "870b889d07f7b73d34907da91376ceb65c823c8005d59880af36f92bd71f8f0e"
      },
      "downloads": -1,
      "filename": "minimal_lagrangians-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8247c01b435b07703ad6bc0b0022839e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 53480,
      "upload_time": "2020-03-18T02:22:14",
      "upload_time_iso_8601": "2020-03-18T02:22:14.913814Z",
      "url": "https://files.pythonhosted.org/packages/04/56/662629ef2557035bd31b390e8950d6b136d8ff3bd0893c0d638a99165907/minimal_lagrangians-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3777a5c8df785f649927d43e4c6908b8b80a9a581a5e63733bee68d6c300a15",
        "md5": "71fbf7d469402d682ce5631456665a66",
        "sha256": "a76cecc1b666fa41c187cc1d92177f1fb4d192058aa5c16524aaef7dbaebeb00"
      },
      "downloads": -1,
      "filename": "minimal-lagrangians-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "71fbf7d469402d682ce5631456665a66",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 36079,
      "upload_time": "2020-03-18T02:22:17",
      "upload_time_iso_8601": "2020-03-18T02:22:17.585732Z",
      "url": "https://files.pythonhosted.org/packages/c3/77/7a5c8df785f649927d43e4c6908b8b80a9a581a5e63733bee68d6c300a15/minimal-lagrangians-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}