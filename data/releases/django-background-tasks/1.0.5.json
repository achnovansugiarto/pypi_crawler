{
  "info": {
    "author": "arteria GmbH, John Montgomery",
    "author_email": "admin@arteria.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.4",
      "Framework :: Django :: 1.5",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=======================\nDjango Background Tasks\n=======================\n\n\n.. image:: https://travis-ci.org/arteria/django-background-tasks.svg\n    :target: https://travis-ci.org/arteria/django-background-tasks\n\nâ†‘ Yes, the tests are failing but the app works as expected. See issue 25_ for more info.\n\n\nDjango Background Task is a databased-backed work queue for Django_, loosely based around Ruby's DelayedJob_ library. This project was adopted and adapted from this_ repo.\n\nTo avoid conflicts on PyPI we renamed it to django-background-tasks (plural). For an easy upgrade from django-background-task to django-background-tasks, the internal module structure were left untouched.\n\nIn Django Background Task, all tasks are implemented as functions (or any other callable).\n\nThere are two parts to using background tasks:\n\n* creating the task functions and registering them with the scheduler\n* setup a cron task (or long running process) to execute the tasks\n\n\nSupported versions and compatibility\n==============================  \n* Python: 2 & 3\n* Django: 1.4 - 1.8\n\nFull Django LTS to LTS compatibility through django-compat_.\n  \nCreating and registering tasks\n==============================\n\nTo register a task use the background decorator::\n\n    from background_task import background\n    from django.contrib.auth.models import User\n    \n    @background(schedule=60)\n    def notify_user(user_id):\n        # lookup user by id and send them a message\n        user = User.objects.get(pk=user_id)\n        user.email_user('Here is a notification', 'You have been notified')\n\nThis will convert the notify_user into a background task function.  When you call it from regular code it will actually create a Task object and stores it in the database.  The database then contains serialised information about which function actually needs running later on.  This does place limits on the parameters that can be passed when calling the function - they must all be serializable as JSON.  Hence why in the example above a user_id is passed rather than a User object.\n\nCalling notify_user as normal will schedule the original function to be run 60 seconds from now::\n\n    notify_user(user.id)\n\nThis is the default schedule time (as set in the decorator), but it can be overridden::\n\n    notify_user(user.id, schedule=90) # 90 seconds from now\n    notify_user(user.id, schedule=timedelta(minutes=20)) # 20 minutes from now\n    notify_user(user.id, schedule=timezone.now()) # at a specific time\n\nRunning tasks\n=============\n\nThere is a management command to run tasks that have been scheduled::\n\n    python manage.py process_tasks\n\nThis will simply poll the database queue every few seconds to see if there is a new task to run.\n\nNB: to aid the management task in finding the registered tasks it is best to put them in a file called 'tasks.py'.  You can put them elsewhere, but you have to ensure that they will be imported so the decorator can register them with the scheduler.  By putting them in tasks.py they will be auto-discovered and the file automatically imported by the management command.\n\nThe process_tasks management command has the following options:\n\n* `duration` - Run task for this many seconds (0 or less to run forever) - default is 0\n* `sleep` - Sleep for this many seconds before checking for new tasks (if none were found) - default is 5\n* `log-file` - Log file destination\n* `log-std` - Redirect stdout and stderr to the logging system\n* `log-level` - Set logging level (CRITICAL, ERROR, WARNING, INFO, DEBUG)\n\nYou can use the `duration` option for simple process control, by running the management command via a cron job and setting the duration to the time till cron calls the command again.  This way if the command fails it will get restarted by the cron job later anyway.  It also avoids having to worry about resource/memory leaks too much.  The alternative is to use a grown-up program like supervisord_ to handle this for you.\n\nSettings\n========\n\nThere are a few settings optinos that can be set in your `settings.py` file.\n\n* `MAX_ATTEMPTS` - controls how many times a task will be attempted (default 25)\n* `MAX_RUN_TIME` - maximum possible task run time, after which tasks will be unlocked and tried again (default 3600 seconds)\n* Set ``BACKGROUND_TASK_RUN_ASYNC = True`` in the project setting will run the tasks asynchronous. This means the tasks will be processed in parallel (at the same time) instead of processing one by one (one after the other).  \n\nTask errors\n===========\n\nTasks are retried if they fail and the error recorded in last_error (and logged).  A task is retried as it may be a temporary issue, such as a transient network problem.  However each time a task is retried it is retried later and later, using an exponential back off, based on the number of attempts::\n\n    (attempts ** 4) + 5\n\nThis means that initially the task will be tried again a few seconds later.  After four attempts the task is tried again 261 seconds later (about four minutes).  At twenty five attempts the task will not be tried again for nearly four days!  It is not unheard of for a transient error to last a long time and this behavior is intended to stop tasks that are triggering errors constantly (i.e. due to a coding error) form dominating task processing.  You should probably monitor the task queue to check for tasks that have errors.  After `MAX_ATTEMPTS` the task will be marked as failed and will not be rescheduled again.\n\nKnown issues\n============\n\n* ``django.db.utils.OperationalError: database is locked`` when using SQLite. This is a SQLite specific error, see https://docs.djangoproject.com/en/dev/ref/databases/#database-is-locked-errors for more details.\n\n\n\n\n\n\n\n.. _Django: http://www.djangoproject.com/\n.. _DelayedJob: http://github.com/tobi/delayed_job\n.. _supervisord: http://supervisord.org/\n.. _this: https://github.com/lilspikey/django-background-task\n.. _compat:  https://github.com/arteria/django-compat\n.. _django-compat:  https://github.com/arteria/django-compat\n.. _25: https://github.com/arteria/django-background-tasks/issues/25",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/arteria/django-background-tasks",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-background-tasks",
    "package_url": "https://pypi.org/project/django-background-tasks/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-background-tasks/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/arteria/django-background-tasks"
    },
    "release_url": "https://pypi.org/project/django-background-tasks/1.0.5/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Database backed asynchronous task queue",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6350335,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b75f3414911aece366b09734b3ca8455a11000fe805bf359bf9c5767224406",
        "md5": "7f7535ee3d5f4d8de89df54b1d3b61b0",
        "sha256": "102c0f85a2c5d091278c2e9ceedb60a4d25ed13f15afd1c0922f244880654bb1"
      },
      "downloads": -1,
      "filename": "django-background-tasks-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7f7535ee3d5f4d8de89df54b1d3b61b0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13853,
      "upload_time": "2015-08-21T13:28:27",
      "upload_time_iso_8601": "2015-08-21T13:28:27.306198Z",
      "url": "https://files.pythonhosted.org/packages/62/b7/5f3414911aece366b09734b3ca8455a11000fe805bf359bf9c5767224406/django-background-tasks-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}