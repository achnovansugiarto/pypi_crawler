{
  "info": {
    "author": "Jonathan Eunice",
    "author_email": "jonathan.eunice@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "Markdown is great, but if you want pretty \"curled\" quotes, real em- and\nen-dashes, and the other typographic prettification that our modern Unicode- and\nWeb-savvy world affords, it needs to be married with ``smartypants`` (or an\nequivalent module) to turn ugly, programmer-ish punctuation into pretty\ntypographic punctuation. This module does that.\n\nUsage\n=====\n\n::\n  \n    import markdown\n    \n    text = \"\"\"\n    Markdown makes HTML from simple text files. But--it lacks typographic\n    \"prettification.\" That... That'd be sweet. Definitely 7---8 on a '10-point\n    scale'. Now it has it.\n    \n    Huzzah!\n    \"\"\"\n    \n    print markdown.markdown(text, extensions=['smartypants'])\n\nThis produces nice HTML output, including typographically \"pretty\" quotes and\nother punctuation. It also renders HTML entities in their named rather than\nnumeric form, which is easier on the eyes and more readily comprehended::\n\n    <p>Markdown makes HTML from simple text files. But&mdash;it lacks\n    typographic &ldquo;prettification.&rdquo; That&hellip; That&rsquo;d be\n    sweet. Definitely 7&ndash;8 on a &lsquo;10-point scale&rsquo;. Now it has\n    it.</p>\n    <p>Huzzah!</p>\n    \nNote that you don't really need to do an ``import mdx_smartypants``.\nYou're welcome to if you like, and it may help to advertise that the code\ndepends on ``mdx_smartypants`` being available. But ``markdown`` will\nlook for ``mdx_smartypants`` simply\nby virtue of the ``extensions=['smartypants']`` declaration.\n\n``mdx_smartypants`` will not massage indented code blocks, so your\nprogram snippets are safe.\n\nRTL Languages and Alternative Quotation Marks\n=============================================\n\n`Right-to-left languages <http://en.wikipedia.org/wiki/Right-to-left>`_ such as\nArabic, Hebrew, Persian, and Urdu reverse the convention seen in English and\nother left-to-right languages. The \"left\" quotation mark is really the\n\"starting\" quotation mark--and it should appear to the right of the \"right\"\nquotation mark. The \"right\" quotation mark, similarly, is really the \"ending\"\nmark, and appears to the left of the \"right\" mark. This is clearly not something\nthat was front-and-center even to the internationally-minded Unicode community,\ngiven how \"left\" and \"right\" are embedded in the official glyph names--a\nmisnomer that carries over into HTML entities.\n\nThe historical ``smartypants`` module similarly thinks in LTR terms. It even\nhard-codes the HTML entities used for quotation marks. To address this, this\nmodule's bundled ``spants`` derivative uses variable quotation marks, and\nprovides a middleman class ``Quotes`` which allows defining which HTML entities\nshould be used for starting single, ending single, starting double, and ending\ndouble quotation marks, respectively. It also provides a mechanism for defining\nthe directionality of text. When emitting for RTL languages, the normal\nleft/right conventions are reversed.\n\n``Quotes.set(ssquo, esquo, sdquo, edquo, dir)`` allows you to set one or more of\nthese values. If you are changing the direction of quoting  away from LTR, it's\nbest to redefine all of the quotes so that everything is consistently defined and\nordered.\n\n``Quotes.reset()`` puts everything back to factory defaults.\nPerhaps most usefully, ``Quotes.configure_for_text(text)`` guesses what\ndirection the language is rendered, and sets quotes accordingly. Note: This must be\ncalled with pure, plain text--not text wrapped in HTML or other markup (which\nwill fool the language guesser into improperly guessing English). If the user\nhas explicitly set language direction, the guess will not be made--but an\noptional ``force`` Boolean parameter can be supplied to specify that previous\nexplicit direction setting should be ignored, and guessing commenced.\n\nThis API and functionality is brand new; tests have been added and successfully\npassed for it, but it should be considered somewhat experimental for now.\n\nDigging even deeper, `a great variety and vast diversity of different\nquotation styles <https://en.wikipedia.org/wiki/Non-English_usage_of_quotation_marks>`_\nare used in different languages. While there is no automatic support\nfor styles that differ from English, ``Quotes.set`` can be called\nwith any HTML entities,\nallowing pretty much any convention to be supported. For example::\n\n    Quotes.set('&laquo;', '&raquo;', '&lasquo;', '&rasquo;')  # |laquo|Swiss|raquo| |lasquo|French|rasquo|\n    Quotes.set('&sbquo;', '&laquo;', '&bdquo;',  '&ldquo;')   # |bdquo|German|ldquo| or |sbquo|Czech|lsquo|\n    \n**NB** I do not have any experience with RTL, top-to-bottom languages such as\ntraditional Chinese and Japanese scripts. If additional changes are required to\nproperly support that directionality, I'd be happy to hear about it.\n\nNotes\n=====\n\n *  As of version 1.4, ``mdx_smartpants`` attempts to automagically guess the\n    direction of text flow used by the underlying language (e.g. LTR or RTL) and\n    arrange quotation marks accordingly. Thanks to `Ahmad Khayyat\n    <https://bitbucket.org/akhayyat>`_ for the bug report and discussion that\n    led to this upgrade. This release also moved to a package-oriented distribution,\n    given the additional modules required.\n    \n *  As of version 1.2, ``mdx_smartpants`` no longer uses the stock\n    ``smartypants`` module from PyPI. It incorporates a copy of the module,\n    called ``spants``, in order to tweak the code for Python 3 compatibility, to\n    fix the incorrect munging of punctuation within style blocks, and to make\n    other improvements. This is a partial step towards a rewrite of\n    ``smartypants`` itself to support Python 3 and be more in-line with modern\n    Python idioms.\n \n *  Now successfully packaged for, and tested against, against Python 2.6, 2.7,\n    and 3.3, as well as against PyPy 1.9 (based on 2.7.2). As of Version 1.4,\n    official support for Python 2.5 and 3.2 withdrawn; while it may work on\n    these, I can no longer test those versions. Also, they're obsolete. Time to\n    upgrade!\n   \n *  Automated multi-version testing managed by the awesome `pytest\n    <http://pypi.python.org/pypi/pytest>`_ and `tox\n    <http://pypi.python.org/pypi/tox>`_.\n\n *  The author, `Jonathan Eunice <mailto:jonathan.eunice@gmail.com>`_ or\n    `@jeunice on Twitter <http://twitter.com/jeunice>`_ welcomes your comments\n    and suggestions.\n   \nInstallation\n============\n\n::\n\n    pip install -U mdx_smartypants\n    \nTo use ``pip`` to install under a specific Python version, look for a\nprogram such as ``pip-3.3`` (e.g. ``which pip-3.3`` on Unix derived systems).\nFailing this, you may be able to ``easy_install`` under a specific Python version\n(3.3 in this example) via::\n\n    python3.3 -m easy_install --upgrade mdx_smartypants\n    \n(You may need to prefix these with \"sudo \" to authorize installation.)\n\n.. |lsquo| unicode::  U+2018 .. left single quote\n.. |rsquo| unicode::  U+2019 .. right single quote\n.. |ldquo| unicode::  U+201C .. left double quote\n.. |rdquo| unicode::  U+201D .. right double quote\n.. |laquo| unicode::  U+00AB .. left angle quote  / guillemet\n.. |raquo| unicode::  U+00BB .. right angle quote / guillemet\n.. |lasquo| unicode:: U+2039 .. left single angle quote\n.. |rasquo| unicode:: U+2039 .. right single angle quote\n.. |bdquo| unicode::  U+201E .. low double quote\n.. |sbquo| unicode::  U+201A .. low single quote",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/jeunice/mdx_smartypants",
    "keywords": "markdown smartypants extension curly quotes typographic",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mdx_smartypants",
    "package_url": "https://pypi.org/project/mdx_smartypants/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mdx_smartypants/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/jeunice/mdx_smartypants"
    },
    "release_url": "https://pypi.org/project/mdx_smartypants/1.4.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python-Markdown extension using smartypants to emit typographically nicer (\"curly\") quotes, proper (\"em\" and \"en\") dashes, etc.",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 922676,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82a8f53854daa2c29f8e945af85066b8034f99a4a6a9abc3075a7fb7b8ce237e",
        "md5": "b1c7e734f704213df0ed408a23ac4a37",
        "sha256": "13b6cfc86c447818d6ef9c91715a2dbc933711013eee9b246a4e37eab6c9d2f4"
      },
      "downloads": -1,
      "filename": "mdx_smartypants-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b1c7e734f704213df0ed408a23ac4a37",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17584,
      "upload_time": "2013-07-22T14:40:58",
      "upload_time_iso_8601": "2013-07-22T14:40:58.653194Z",
      "url": "https://files.pythonhosted.org/packages/82/a8/f53854daa2c29f8e945af85066b8034f99a4a6a9abc3075a7fb7b8ce237e/mdx_smartypants-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c18550e104e20470860d1f904666e67c1b699cc953795e79bffa56d137752678",
        "md5": "d3c6d65fcd283819079cabdd37479507",
        "sha256": "30f6f676751a74bcb6602c7080e6c7c4bd5048de18e93ef1812cae1f8feb56f9"
      },
      "downloads": -1,
      "filename": "mdx_smartypants-1.4.1.zip",
      "has_sig": false,
      "md5_digest": "d3c6d65fcd283819079cabdd37479507",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27270,
      "upload_time": "2013-07-22T14:40:48",
      "upload_time_iso_8601": "2013-07-22T14:40:48.395230Z",
      "url": "https://files.pythonhosted.org/packages/c1/85/50e104e20470860d1f904666e67c1b699cc953795e79bffa56d137752678/mdx_smartypants-1.4.1.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}