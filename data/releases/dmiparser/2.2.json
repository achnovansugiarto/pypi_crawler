{
  "info": {
    "author": "Qin Fandong",
    "author_email": "shell_way@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# python-dmiparser\n\n## About\n\nThis parse dmidecode output to JSON text.\n\n## Installation\n\n```shell\npip3 install -U dmiparser\n```\n\n## Usage\n\n### Use dmiparser directly\n\n```python\n#!/usr/bin/env python3\nimport json\nfrom dmiparser import DmiParser\n\n\nif \"__main__\" == __name__:\n    from functools import partial\n    from typing import Callable, Any\n\n\n    def reportSecs(*args: str, brWidth=80) -> None:\n        \"\"\"report texts format by section\n\n        @param args: text string\n        @param brWidth: br width\n        \"\"\"\n        br: Callable[[Any], None] = lambda c: print(\"-\" * c)\n        brn = partial(br, brWidth)\n\n        brn()\n\n        for text in args:\n            print(text)\n            brn()\n\n\n    text = (\n        \"# dmidecode 3.0\\n\"\n        \"Getting SMBIOS data from sysfs.\\n\"\n        \"SMBIOS 2.7 present.\\n\"\n        \"\\n\"\n        \"Handle 0x0003, DMI type 2, 17 bytes\\n\"\n        \"Base Board Information\\n\"\n        \"\\tManufacturer: Intel Corporation\\n\"\n        \"\\tProduct Name: S2600WT2R\\n\"\n        \"\\tVersion: H21573-372\\n\"\n        \"\\tSerial Number: BQWL81150522\\n\"\n        \"\\tAsset Tag: Base Board Asset Tag\\n\"\n        \"\\tFeatures:\\n\"\n        \"\\t\\tBoard is a hosting board\\n\"\n        \"\\t\\tBoard is replaceable\\n\"\n        \"\\tLocation In Chassis: Part Component\\n\"\n        \"\\tChassis Handle: 0x0000\\n\"\n        \"\\tType: Motherboard\\n\"\n        \"\\tContained Object Handles: 0\\n\"\n        \"\\n\"\n    )\n\n    # parser = DmiParser(text)\n    parser = DmiParser(text, sort_keys=True, indent=2)\n\n    parsedStr = str(parser)  # get str\n    parsedObj = json.loads(str(parser))  # get object\n\n    reportSecs(parsedStr, parsedObj)\n```\n\n### Use the default wrapper\n\n```python\nfrom dmiparser.wrapper import DmiDecode\n\n\nif \"__main__\" == __name__:\n    from functools import partial\n    from typing import Callable, Any\n\n\n    def getCpuInfo(dmidecode) -> str:\n        \"\"\"Get CPU information, will return text like below.\n\n        CPU1:\n            Family: Xeon\n            Version: Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz\n            Voltage: 1.8 V\n            Speed: 2200 MHz/4000 MHz\n            Status: Populated, Enabled\n            Core: 10/10\n            Thread: 20\n        CPU2:\n            Family: Xeon\n            Version: Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz\n            Voltage: 1.8 V\n            Speed: 2200 MHz/4000 MHz\n            Status: Populated, Enabled\n            Core: 10/10\n            Thread: 20\n\n        @param: dmidecode: DmiDecode object\n        @return: text of CPU information\n        \"\"\"\n        text = \"\"\n\n        for id, name in dmidecode.sections:\n            def getFirst(*args):\n                vals = dmidecode.getProp(*args, id=id, name=name)\n                return vals[0] if len(vals) > 0 else None\n\n            text += \"{}:\\n\".format(getFirst(\"Socket Designation\"))\n            text += \"\\tFamily: {}\\n\".format(getFirst(\"Family\"))\n            text += \"\\tVersion: {}\\n\".format(getFirst(\"Version\"))\n            text += \"\\tVoltage: {}\\n\".format(getFirst(\"Voltage\"))\n            text += \"\\tSpeed: {}/{}\\n\".format(getFirst(\"Current Speed\"), getFirst(\"Max Speed\"))\n            text += \"\\tStatus: {}\\n\".format(getFirst(\"Status\"))\n            text += \"\\tCore: {}/{}\\n\".format(getFirst(\"Core Enabled\"), getFirst(\"Core Count\"))\n            text += \"\\tThread: {}\\n\".format(getFirst(\"Thread Count\"))\n\n        return text\n\n\n    def reportSecs(*args: str, brWidth=80) -> None:\n        \"\"\"report texts format by section\n\n        @param args: text string\n        @param brWidth: br width\n        \"\"\"\n        br: Callable[[Any], None] = lambda c: print(\"-\" * c)\n        brn = partial(br, brWidth)\n\n        brn()\n\n        for text in args:\n            print(text)\n            brn()\n\n\n    dmidecode4 = DmiDecode(\"-t 4\", sort_keys=True, indent=2)  # Type 4 is Processor\n\n    reportSecs(dmidecode4.text, str(dmidecode4.data), getCpuInfo(dmidecode4))\n```\n\n> Tip: Superuser permissions are required here to run `dmidecode`.\n\n### Get full JSON text using an executable\n\n```shell\ndmiparser --format\n```\n\n> Tip: Superuser permissions are required here to run `dmidecode`.\n\n## Development\n\n### Test\n\n```shell\ntox\n```\n\n## License\n\n[MIT LICENSE](https://github.com/Arondight/python-dmiparser/blob/master/LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Arondight/python-dmiparser/tags",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Arondight/python-dmiparser",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dmiparser",
    "package_url": "https://pypi.org/project/dmiparser/",
    "platform": "Any",
    "project_url": "https://pypi.org/project/dmiparser/",
    "project_urls": {
      "Download": "https://github.com/Arondight/python-dmiparser/tags",
      "Homepage": "https://github.com/Arondight/python-dmiparser"
    },
    "release_url": "https://pypi.org/project/dmiparser/2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This parse dmidecode output to JSON text",
    "version": "2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14753178,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c97c70a5f4ac5995cd41412e5c70d202953c2961184c06d6aaccc2d3151230fd",
        "md5": "2c51cf9257f408e08ff572a0508e654b",
        "sha256": "5fe2945f1cefca1414532d561e427601c85630ca00abf437ae0b446613f19a4e"
      },
      "downloads": -1,
      "filename": "dmiparser-2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c51cf9257f408e08ff572a0508e654b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11512,
      "upload_time": "2022-08-05T05:53:36",
      "upload_time_iso_8601": "2022-08-05T05:53:36.911225Z",
      "url": "https://files.pythonhosted.org/packages/c9/7c/70a5f4ac5995cd41412e5c70d202953c2961184c06d6aaccc2d3151230fd/dmiparser-2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a9f3d634c2f9c4e6781331b5d9caf8380afd0c98f3ed7d9033ba3013d9477fa",
        "md5": "0b33a22a0f108a50ee71079bc49c37ad",
        "sha256": "9b7b69a8c8c1f206e02918f2bdb759737aa5dad64f47242a5f19a68b42af0b6f"
      },
      "downloads": -1,
      "filename": "dmiparser-2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0b33a22a0f108a50ee71079bc49c37ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7320,
      "upload_time": "2022-08-05T05:53:39",
      "upload_time_iso_8601": "2022-08-05T05:53:39.585651Z",
      "url": "https://files.pythonhosted.org/packages/4a/9f/3d634c2f9c4e6781331b5d9caf8380afd0c98f3ed7d9033ba3013d9477fa/dmiparser-2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}