{
  "info": {
    "author": "Eric McDonald",
    "author_email": "python-lockup@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": ".. vim: set fileencoding=utf-8:\n.. -*- coding: utf-8 -*-\n.. +--------------------------------------------------------------------------+\n   |                                                                          |\n   | Licensed under the Apache License, Version 2.0 (the \"License\");          |\n   | you may not use this file except in compliance with the License.         |\n   | You may obtain a copy of the License at                                  |\n   |                                                                          |\n   |     http://www.apache.org/licenses/LICENSE-2.0                           |\n   |                                                                          |\n   | Unless required by applicable law or agreed to in writing, software      |\n   | distributed under the License is distributed on an \"AS IS\" BASIS,        |\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |\n   | See the License for the specific language governing permissions and      |\n   | limitations under the License.                                           |\n   |                                                                          |\n   +--------------------------------------------------------------------------+\n\n*******************************************************************************\n                                    lockup\n*******************************************************************************\n\n.. TODO: Add row of status icons.\n\nEnables the creation of classes, modules, and namespaces on which all\nattributes are **immutable** and for which non-public attributes are concealed\n(**visibility restriction**).  Immutability increases code safety by\ndiscouraging monkey-patching and preventing accidental or deliberate changes to\nstate. Visibility restriction means that functions, like ``dir``, can report a\nsubset of attributes that are intended for programmers to use without exposing\ninternals.\n\nContents of this package are:\n\n* A module class, which enforces immutability and visibility restriction upon\n  module attributes. This module class can *replace* the standard Python module\n  class *with a single line of code* in a module definition.\n\n* A factory (metaclass) that creates classes, enforcing immutability and\n  visibility restriction upon their attributes. (Just attributes on the\n  classes, themsleves, are immutable and visibility-restricted and not\n  attributes on the instances of the classes.)\n\n* A factory that creates namespaces, enforcing immutability and visibility\n  restriction upon their attributes.\n\nFull Documentation: https://emcd.github.io/python-lockup/\n\nQuick Tour\n===============================================================================\n\nModule\n-------------------------------------------------------------------------------\n\nLet us consider the mutable `os <https://docs.python.org/3/library/os.html>`_\nmodule from the Python standard library and how we can alter \"constants\" that\nmay be used in many places:\n\n\t>>> import os\n\t>>> os.EX_OK\n\t0\n\t>>> del os.EX_OK\n\t>>> os.EX_OK\n\tTraceback (most recent call last):\n\t...\n\tAttributeError: module 'os' has no attribute 'EX_OK'\n\t>>> os.EX_OK = 0\n\t>>> type( os )\n\t<class 'module'>\n\nNow, let us see what protection it gains from becoming immutable:\n\n\t>>> import os\n\t>>> import lockup\n\t>>> lockup.reclassify_module( os )\n\t>>> del os.EX_OK\n\tTraceback (most recent call last):\n\t...\n\tlockup.exceptions.ImpermissibleAttributeOperation: Attempt to delete indelible attribute 'EX_OK' on module 'os'.\n\t>>> os.EX_OK = 255\n\tTraceback (most recent call last):\n\t...\n\tlockup.exceptions.ImpermissibleAttributeOperation: Attempt to assign immutable attribute 'EX_OK' on module 'os'.\n\t>>> type( os )\n\t<class 'lockup.Module'>\n\nClass Factory\n-------------------------------------------------------------------------------\n\nLet us monkey-patch a mutable class:\n\n\t>>> import lockup\n\t>>> class A:\n\t...     def expected_functionality( self ): return 42\n\t...\n\t>>> a = A( )\n\t>>> a.expected_functionality( )\n\t42\n\t>>> def monkey_patch( self ):\n\t...     return 'I selfishly change behavior upon which other consumers depend.'\n\t...\n\t>>> A.expected_functionality = monkey_patch\n\t>>> a = A( )\n\t>>> a.expected_functionality( )\n\t'I selfishly change behavior upon which other consumers depend.'\n\nNow, let us try to monkey-patch an immutable class:\n\n\t>>> import lockup\n\t>>> class B( metaclass = lockup.Class ):\n\t...     def expected_functionality( self ): return 42\n\t...\n\t>>> b = B( )\n\t>>> b.expected_functionality( )\n\t42\n\t>>> def monkey_patch( self ):\n\t...     return 'I selfishly change behavior upon which other consumers depend.'\n\t...\n\t>>> B.expected_functionality = monkey_patch\n\tTraceback (most recent call last):\n\t...\n\tlockup.exceptions.ImpermissibleAttributeOperation: Attempt to assign immutable attribute 'expected_functionality' on class ...\n\t>>> type( B )\n\t<class 'lockup.Class'>\n\t>>> del type( B ).__setattr__\n\tTraceback (most recent call last):\n\t...\n\tlockup.exceptions.ImpermissibleAttributeOperation: Attempt to delete indelible attribute '__setattr__' on class 'lockup.Class'.\n\t>>> issubclass( type( B ), type )\n\tTrue\n\nNamespace Factory\n-------------------------------------------------------------------------------\n\nAn alternative to `types.SimpleNamespace\n<https://docs.python.org/3/library/types.html#types.SimpleNamespace>`_ is\nprovided. First, let us observe the behaviors on a standard namespace:\n\n\t>>> import types\n\t>>> sn = types.SimpleNamespace( run = lambda: 42 )\n\t>>> sn\n\tnamespace(run=<function <lambda> at ...>)\n\t>>> sn.run( )\n\t42\n\t>>> type( sn )\n\t<class 'types.SimpleNamespace'>\n\t>>> dir( sn )\n\t['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'run']\n\t>>> sn.__dict__\n\t{'run': <function <lambda> at ...>}\n\t>>> type( sn.run )\n\t<class 'function'>\n\t>>> sn.run = lambda: 666\n\t>>> sn.run( )\n\t666\n\t>>> sn( )\n\tTraceback (most recent call last):\n\t...\n\tTypeError: 'types.SimpleNamespace' object is not callable\n\nNow, let us compare those behaviors to an immutable namespace:\n\n    >>> import lockup\n    >>> ns = lockup.create_namespace( run = lambda: 42 )\n    >>> ns\n    NamespaceClass( 'Namespace', ('object',), { ... } )\n    >>> ns.run( )\n    42\n    >>> type( ns )\n    <class 'lockup.NamespaceClass'>\n    >>> ns.__dict__\n    mappingproxy({...})\n    >>> type( ns.run )\n    <class 'function'>\n    >>> ns.run = lambda: 666\n    Traceback (most recent call last):\n    ...\n    lockup.exceptions.ImpermissibleAttributeOperation: Attempt to assign immutable attribute 'run' on class 'lockup.Namespace'.\n    >>> ns.__dict__[ 'run' ] = lambda: 666\n    Traceback (most recent call last):\n    ...\n    TypeError: 'mappingproxy' object does not support item assignment\n    >>> ns( )\n    Traceback (most recent call last):\n    ...\n    lockup.exceptions.ImpermissibleOperation: Impermissible instantiation of class 'lockup.Namespace'.\n\nAlso of note is that we can define namespace classes directly, allowing us to\ncapture imports for internal use in a module without publicly exposing them as\npart of the module API, for example:\n\n    >>> class __( metaclass = lockup.NamespaceClass ):\n    ...     from os import O_RDONLY, O_RDWR\n    ...\n    >>> __.O_RDONLY\n    0\n\nThe above technique is used internally within this package itself.\n\nExceptions\n-------------------------------------------------------------------------------\n\nExceptions can be intercepted with appropriate builtin exception classes or\nwith package exception classes:\n\n\t>>> import os\n\t>>> import lockup\n\t>>> from lockup.exceptions import InvalidOperation\n\t>>> os.O_RDONLY\n\t0\n\t>>> lockup.reclassify_module( os )\n\t>>> try: os.O_RDONLY = 15\n\t... except AttributeError as exc:\n\t...     type( exc ).mro( )\n\t...\n\t[<class 'lockup.exceptions.ImpermissibleAttributeOperation'>, <class 'lockup.exceptions.ImpermissibleOperation'>, <class 'lockup.exceptions.InvalidOperation'>, <class 'lockup.exceptions.Exception0'>, <class 'TypeError'>, <class 'AttributeError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>]\n\t>>> try: os.does_not_exist\n\t... except InvalidOperation as exc:\n\t...     type( exc ).mro( )\n\t...\n\t[<class 'lockup.exceptions.InaccessibleAttribute'>, <class 'lockup.exceptions.InaccessibleEntity'>, <class 'lockup.exceptions.InvalidOperation'>, <class 'lockup.exceptions.Exception0'>, <class 'AttributeError'>, <class 'Exception'>, <class 'BaseException'>, <class 'object'>]\n\n.. vim: set fileencoding=utf-8:\n.. -*- coding: utf-8 -*-\n.. +--------------------------------------------------------------------------+\n   |                                                                          |\n   | Licensed under the Apache License, Version 2.0 (the \"License\");          |\n   | you may not use this file except in compliance with the License.         |\n   | You may obtain a copy of the License at                                  |\n   |                                                                          |\n   |     http://www.apache.org/licenses/LICENSE-2.0                           |\n   |                                                                          |\n   | Unless required by applicable law or agreed to in writing, software      |\n   | distributed under the License is distributed on an \"AS IS\" BASIS,        |\n   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |\n   | See the License for the specific language governing permissions and      |\n   | limitations under the License.                                           |\n   |                                                                          |\n   +--------------------------------------------------------------------------+\n\nChangelog\n===============================================================================\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/emcd/python-lockup",
    "keywords": "api attribute concealment immutability namespace",
    "license": "Apache-2.0",
    "maintainer": "Eric McDonald",
    "maintainer_email": "python-lockup@googlegroups.com",
    "name": "lockup",
    "package_url": "https://pypi.org/project/lockup/",
    "platform": "",
    "project_url": "https://pypi.org/project/lockup/",
    "project_urls": {
      "Documentation": "https://emcd.github.io/python-lockup",
      "Google Group": "https://groups.google.com/g/python-lockup",
      "Homepage": "https://github.com/emcd/python-lockup",
      "Source Code": "https://github.com/emcd/python-lockup"
    },
    "release_url": "https://pypi.org/project/lockup/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Immutable and concealed attributes for classes, modules, and namespaces.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15580300,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a12747c16581d847d6f2a53733ed9a8ac5deb5292b5617ecfacbb0ccffff7a88",
        "md5": "c4daaf185f487cb8d81f23950d085cf3",
        "sha256": "159049fc4179ad42f7dd314328931c19b250bdbcb6f0cc9567194309c82894a2"
      },
      "downloads": -1,
      "filename": "lockup-1.0.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "c4daaf185f487cb8d81f23950d085cf3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16204,
      "upload_time": "2021-11-17T08:58:39",
      "upload_time_iso_8601": "2021-11-17T08:58:39.696337Z",
      "url": "https://files.pythonhosted.org/packages/a1/27/47c16581d847d6f2a53733ed9a8ac5deb5292b5617ecfacbb0ccffff7a88/lockup-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7bfb9fa29eb4982a378ba36be80ceed9c6c4d3d19e96349e74c228c645c4c400",
        "md5": "a68fe4cc4a9db98ab56454254fab4219",
        "sha256": "b5069b529977664bd38cca00751b17e5f926b5a06ed33f51456c72eca4de78fc"
      },
      "downloads": -1,
      "filename": "lockup-1.0.0.tar.gz",
      "has_sig": true,
      "md5_digest": "a68fe4cc4a9db98ab56454254fab4219",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18149,
      "upload_time": "2021-11-17T08:58:41",
      "upload_time_iso_8601": "2021-11-17T08:58:41.161409Z",
      "url": "https://files.pythonhosted.org/packages/7b/fb/9fa29eb4982a378ba36be80ceed9c6c4d3d19e96349e74c228c645c4c400/lockup-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}