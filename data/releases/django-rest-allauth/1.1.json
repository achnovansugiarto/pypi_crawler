{
  "info": {
    "author": "Omonbude O Emmanuel",
    "author_email": "budescode@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "===================\ndjango-rest-allauth\n===================\n\ndjango-rest-allauth is an authentication package for django\n\nQuick start\n-----------\n1. Install Dep:\n    pip install django-rest-framework django-cors-headers requests\n\n2. Add \"django_rest_allauth\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'django_rest_allauth',\n        'rest_framework',\n        'rest_framework.authtoken',\n        'corsheaders',\n    ]\n\n3. Include corsheaders in your middleware in settings.py::\n\n    MIDDLEWARE = [\n\n        'corsheaders.middleware.CorsMiddleware',\n\n        ...\n    ]\n\n4. Include DEFAULT_AUTHENTICATION_CLASSES and DEFAULT_PERMISSION_CLASSES in settings.py::\n\n    REST_FRAMEWORK = {\n\n        'DEFAULT_AUTHENTICATION_CLASSES': (\n\n            'rest_framework.authentication.TokenAuthentication',\n        ),\n        'DEFAULT_PERMISSION_CLASSES': (\n\n            'rest_framework.permissions.IsAuthenticated','rest_framework.permissions.AllowAny' )\n    }\n\n5. Include the django_rest_allauth URLconf in your project urls.py like this::\n\n    path('django-rest-allauth/', include('django_rest_allauth.api.urls')),\n\n6. Set how you want your corsheaders in settings.py or whitelist your url::\n    CORS_ALLOW_CREDENTIALS = True\n\n    CORS_ORIGIN_ALLOW_ALL = True\n\n    SITE_ID = 1\n\n7. Run ``python manage.py makemigrations`` ``python manage.py migrate`` to create the DjangoRestAllAuth models.\n\n8. Start the development server and visit http://127.0.0.1:8000/admin/\n   to create a poll (you'll need the Admin app enabled).\n\n9. Visit http://127.0.0.1:8000/django-rest-allauth/ to participate in the django_rest_allauth.\n\n**Url Endpoints**\nThis package uses token authentication\n\n- token/createuser\n\n- token/login\n\n- token/getuser\n\n- token/edituser\n\n- token/changepassword\n\n- token/resetpasswordcode\n\n- token/resetpassword\n\n- token/logout\n\nauthenticatesocialuser\n\n**createuser** \n    This is to create a user\n\n    Method: POST\n\n    Authorization: AllowAny\n\n    fields:\n    {\n    \"email\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\"\n    }\n\n    Optional fields are username, first_name and last_name\n\n\n\n**login** \n    This is to login a user, it returns userdetails with token along \n\n    Method: POST\n\n    Authorization: AllowAny\n\n    fields:\n    {\n    \"email\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    }\n\n    Optional either username or email can be used, or both.\n    It returns response with token along with it for authentication\n\n**getuser** \n    This is to get user details, it returns an object with the user details\n\n    Method: GET\n\n    Authorization: Token\n\n**edituser** \n    This is to edituser details\n\n    Method: PATCH\n\n    Authorization: Token\n\n    fields:\n    {\n    \"email\": \"\",\n    \"username\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    }\n\n    All fields are optional, only input the field you want to change\n\n**changepassword** \n    This is to change user's password\n\n    Method: POST\n\n    Authorization: Token\n\n    fields:\n    {\n    \"old_password\": \"\",\n    \"new_password\": \"\",\n    }\n\n    If the old password is correct, it changes the user's password to the new one.\n\n\n**resetpasswordcode**\n    This will generate a code for the user and send back as response,  the code can be sent to the user's email or sms, the next end point will be to accept the code and email\n    \n    Method: POST\n    \n    Authorization: AllowAny\n    \n    fields: \n    {\n    \"email\": \"\",\n    \"resetcode\": \"\"\n    }\n\n**resetpassword**\n    This will accept the code, email and password, if it's correct, the password will be changed\n    \n    Method: POST\n    \n    Authorization: AllowAny\n    \n    fields: \n    {\n    \"email\": \"\",\n    \"resetcode\": \"\",\n    \"password\": \"\"\n    }\n\n**logout**\n\n    This will delete the user's token\n\n    Method: POST\n\n    Authorization: AllowAny\n\n\n**authenticatesocialuser**\n\n    To authenticate a user with social media (facebook and google)\n\n    Method: POST\n\n    Authorization: AllowAny\n\n    fields:\n    {\n    \"provider\": '',\n    \"token\": \"\",\n    \"email\": \"\",\n    \"username\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"social_id\": \"\",\n    \"profile_pic\": \"\"\n    }\n    These fields are coming from google/facebook response.\n\n    provider field accepts 'Facebook' or 'Google' which ever provider being used.\n\n    token is the access_token returned from google or facebook.\n\n    social_id: for facebook it is \"id\" that is returned, for google, it is user_id.\n    \n    optional fields are username, first_name, last_name and profile_pic.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/budescode/django-rest-allauth",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-allauth",
    "package_url": "https://pypi.org/project/django-rest-allauth/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-allauth/",
    "project_urls": {
      "Homepage": "https://github.com/budescode/django-rest-allauth"
    },
    "release_url": "https://pypi.org/project/django-rest-allauth/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django package to handle rest framework authentications including social authentications",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8753032,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e7cddcda4e7c9cd4ec1f0312bd5e996f25841fc93836f30288b1607e77c7773",
        "md5": "3827a1e044d960ba275033271d6ef27b",
        "sha256": "6a73b5accf5c985edea4b26cc245942faf71df3f560588525d7c0699aee99939"
      },
      "downloads": -1,
      "filename": "django-rest-allauth-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3827a1e044d960ba275033271d6ef27b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10424,
      "upload_time": "2020-11-26T07:13:51",
      "upload_time_iso_8601": "2020-11-26T07:13:51.454632Z",
      "url": "https://files.pythonhosted.org/packages/9e/7c/ddcda4e7c9cd4ec1f0312bd5e996f25841fc93836f30288b1607e77c7773/django-rest-allauth-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}