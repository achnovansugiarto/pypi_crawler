{
  "info": {
    "author": "Rob Wagner",
    "author_email": "rob.wagner@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications :: Chat",
      "Typing :: Typed"
    ],
    "description": "<h1 align=\"center\">Discord Menus</h1>\n\n<div align=\"center\">\n  <strong><i>Simplified menus for discord.py developers.</i></strong>\n  <br>\n  <br>\n\n  <a href=\"https://pypi.org/project/dpymenus/\">\n    <img src=\"https://img.shields.io/pypi/v/dpymenus?color=0073B7&label=Latest&style=for-the-badge\" alt=\"Version\" />\n  </a>\n\n  <a href=\"https://dpymenus.readthedocs.io/en/latest/\">\n    <img src=\"https://img.shields.io/readthedocs/dpymenus/latest?style=for-the-badge\" alt=\"Docs\" />\n  </a>\n\n  <a href=\"https://python.org\">\n    <img src=\"https://img.shields.io/pypi/pyversions/dpymenus?color=0073B7&style=for-the-badge\" alt=\"Python Version\" />\n  </a>\n</div>\n\n<br>\n\n-----\n\n<img align=\"right\" src=\"assets/demo.gif\" alt=\"user creates an embed, reaction buttons are added, and user navigates the menu\nby clicking the buttons\">\n\n### Table of Contents\n**[Documentation](https://dpymenus.readthedocs.io/en/latest/?badge=latest)**\n+ [Getting Started](#getting-started)\n+ [Menu Options](#menu-options)\n+ [Helper Methods](#helper-methods)\n+ [Event Callbacks](#event-callbacks)\n+ [Generic Input Matching](#generic-input-matching)\n+ [Reaction Buttons](#reaction-buttons)\n+ [Poll Utilities](#poll-utilities)\n+ [Logging](#logging)\n\n<br>\n<br>\n\n-----\n\n### Getting Started\n`dpymenus` is an unofficial add-on for the `discord.py` library that lets you quickly compose various styles of \nmenus *(text, buttons, polls)* which react to user input.\n\nYou can install the library with `pip install dpymenus`.\n\nThis very basic example will get a menu running similar to the one in the .gif!\n\n```python\nfrom discord.ext import commands\nfrom dpymenus import Page, PaginatedMenu\n\n\nclass Demo(commands.Cog):\n    def __init__(self, client):\n        self.client = client\n\n    @commands.command()\n    async def demo(self, ctx: commands.Context):\n        page1 = Page(title='Page 1', description='First page test!')\n        page1.add_field(name='Example A', value='Example B')\n\n        page2 = Page(title='Page 2', description='Second page test!')\n        page2.add_field(name='Example C', value='Example D')\n\n        page3 = Page(title='Page 3', description='Third page test!')\n        page3.add_field(name='Example E', value='Example F')\n\n        menu = PaginatedMenu(ctx)\n        menu.add_pages([page1, page2, page3])\n        await menu.open()\n\n\ndef setup(client):\n    client.add_cog(Demo(client))\n```\n\nThere are more examples in the *examples* directory above for each menu style *(Text, Button, Paginated, and Polls)*.\n\nCan't find something you were looking for? Open an issue and I'll add a relevant example!\n\n### Menu Options\nMenus use fluent-style chaining, similar to how one builds a discord.py Embed, to set their behaviours. Below is a list\nof methods available for chaining, and what they do. If you are unfamiliar with how to use these, look at the examples in\nthe *examples/* directory for various ways to compose and apply these options.\n\n#### All Menu Types\n`.add_pages(x)` -- takes a list of Embed or Page objects and turns them into menu pages.\n\n`.set_timeout(x)` -- takes an integer and sets the duration *(in seconds)* before the menu will timeout.\n\n`.set_destination(x)` -- takes a User, TextChannel, or Context object and sends all menu output to that location.\n\n`.show_command_message()` -- prevents the message that invoked the menu from being deleted when the menu opens.\n\n`.persist_on_close()` -- prevents the menu from being deleted when closed. Clears reactions and remains on the last page.\n\n#### Text & Button Menus\n`.set_data(x` -- takes a dictionary of arbitrary data that can be used across menu and page functions.\n\n#### Text Menus\n`.set_delay(x)` -- takes an integer and sets the duration *(in seconds)* before the users response message will be deleted.\n\n`.normalize_responses()` -- user text responses will be stripped of whitespace *(incl. leading, trailing, and anything over 2 spaces within)* and lower-cased\n\n#### Paginated Menus\n`.buttons(x)` -- takes a list of Emoji or str objects and uses them to replace the default buttons. Must be 3 or 5 in length.\n\n`.set_cancel_page(x)` -- takes an Embed or Page object and displays that page when a user cancels the menu.\n\n`.set_timeout_page(x)` -- takes an Embed or Page object and displays that page when the menu times out.\n\n`.show_page_numbers()` -- adds pages numbers to the footer of each menu page *(in current_page/total_pages format)*. Overwrites\nuser set footers.\n\n`.show_skip_buttons()` -- adds two extra buttons to the menu, one for skipping to the first page and one for the last page.\n\n`.hide_cancel_button()` -- removes the cancel button from the menu.\n\n`.allow_multisession()` -- disables the one menu per user+channel session limit. Old menus are closed when a new one is opened.\n\n### Helper Methods\n`.next()`, `.previous()` -- goes forward or backward one page.\n\n`.to_first()`, `.to_last()` -- jumps to the first or last page.\n\n`.go_to(x)` -- takes a string or integer *(on_next function name or page index)* and jumps to that specific page. \nUseful for non-linear menus.\n\n`.button_pressed(x)` -- takes an Emoji or str button and returns True if that was the button the user had pressed.\nOnly usable on ButtonMenu.\n\n`.response_is(x)` -- takes a string or list of strings and returns True if that matches what a user had typed.\nOnly usable on TextMenu.\n\n### Event Callbacks\nBy default, the base menu implements methods for all events except `next` events, which should\nbe handled by the user. Events can be overridden using `.on_EVENTNAME` methods when creating your\nmenu object. Note that Polls and Paginated menus implement their own `next` event methods\nand should not be overwritten.\n\n**Events**\n\n- **next** -- Emit when the menu instance calls `.next()`. \n\n- **fail** -- Emit when user input on a page is invalid. Usable on Text menus.\n\n- **timeout** -- Emit when a menu times out. Usable on Text, Button, and Paginated menus.\n\n- **cancel** -- Emit when a menu is cancelled from user input. Usable on Text, Button, and Paginated menus.\n\n\n### Generic Input Matching\nFor Text Menu styles, the library contains some preset constants for quick, generic use-cases. You can\nimport what you need by name, or all at once like such:\n\n`from dpymenus.constants import *`\n\nThe defaults are:\n```python\nCONFIRM = ('y', 'yes', 'ok', 'k', 'kk', 'ready', 'rdy', 'r', 'confirm', 'okay')\nDENY = ('n', 'no', 'deny', 'negative', 'back', 'return')\nQUIT = ('e', 'exit', 'q', 'quit', 'stop', 'x', 'cancel', 'c')\n```\n\n### Reaction Buttons\nHere are some examples of how to acquire emojis in discord.py for custom buttons:\n\n```python\nbtn1 = client.get_emoji(3487239849812123)  # guild emoji\nbtn2 = discord.utils.get(ctx.guild.emojis, name='example')  # guild emoji\nbtn3 = '<:example2:35434643573451>'  # guild emoji\nbtn4 = '\\N{SNAKE}'  # unicode emoji as text\nbtn5 = '\\U00002714'  # unicode emoji codepoint :heavy_check_mark:\n```\n\n### Poll Utilities\nPolls have a handful of quick utility methods built-in that should make using them simpler and faster for most\nuse case scenarios.\n\n`.results()` -- Returns a dictionary where the keys are the poll choices, and the values are the final vote tally.\n\n`.add_results_fields()` -- Adds all the result fields to your closing page.\n\n`.generate_results_page()` -- Adds all the result fields to your closing page as well as calculates the winner or \na draw.\n\n### Logging\nIf you just wish to have basic logging, you can enable it by placing this at the start of your code:\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\nIf you are looking to customize the logger, you can use the example below for an idea on how to set it up.\n\n```python\nimport logging\nimport sys\n\nmenus_logger = logging.getLogger('dpymenus')\nmenus_logger.setLevel(logging.INFO)\nmenus_handler = logging.StreamHandler(sys.stdout)\nmenus_handler.setFormatter(logging.Formatter('[%(name)s] %(message)s'))\nmenus_logger.addHandler(menus_handler)\n```\n\n-----\n\nCheck out my other discord.py utility: **[cogwatch](https://github.com/robertwayne/cogwatch)** -- *Automatic hot-reloading for your discord.py command files.*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robertwayne/dpymenus",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dpymenus",
    "package_url": "https://pypi.org/project/dpymenus/",
    "platform": "",
    "project_url": "https://pypi.org/project/dpymenus/",
    "project_urls": {
      "Homepage": "https://github.com/robertwayne/dpymenus"
    },
    "release_url": "https://pypi.org/project/dpymenus/1.1.0/",
    "requires_dist": [
      "discord.py (>=1.4.1)",
      "emoji (==0.6.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Simplified menus for discord.py developers.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10536763,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1bc9cb49e1d060ab9dd9fa9730dd2d731ec8f7537764ea12341b9c1a1c6c13c8",
        "md5": "5bcd7b71cdcf57fb448bf36b3441fe78",
        "sha256": "0040366c60c528466eb950d8e760fbc5327271656fb265381a25749ea71fec53"
      },
      "downloads": -1,
      "filename": "dpymenus-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5bcd7b71cdcf57fb448bf36b3441fe78",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 19849,
      "upload_time": "2020-09-16T13:28:02",
      "upload_time_iso_8601": "2020-09-16T13:28:02.643641Z",
      "url": "https://files.pythonhosted.org/packages/1b/c9/cb49e1d060ab9dd9fa9730dd2d731ec8f7537764ea12341b9c1a1c6c13c8/dpymenus-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dd297285d4aa0fcefc61a4ad9fd25f05a35d4630dc64db859376911e09b52ef",
        "md5": "35b33eb2212f53d3cb795c531745a93b",
        "sha256": "6363410ab658819a94f4e72f6e39aa230404169927e18efbafa87326899230c0"
      },
      "downloads": -1,
      "filename": "dpymenus-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "35b33eb2212f53d3cb795c531745a93b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17869,
      "upload_time": "2020-09-16T13:28:03",
      "upload_time_iso_8601": "2020-09-16T13:28:03.949349Z",
      "url": "https://files.pythonhosted.org/packages/9d/d2/97285d4aa0fcefc61a4ad9fd25f05a35d4630dc64db859376911e09b52ef/dpymenus-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}