{
  "info": {
    "author": "Melvin Bijman",
    "author_email": "bijman.m.m@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Maat\n[![Build Status](https://travis-ci.com/Attumm/Maat.svg?branch=main)](https://travis-ci.com/Attumm/Maat)\n[![Coverage Status](https://coveralls.io/repos/github/Attumm/Maat/badge.svg)](https://coveralls.io/github/Attumm/Maat)\n[![Downloads](https://pepy.tech/badge/maat/week)](https://pepy.tech/project/maat)\n\nMaat is an easily extensible transformation and validation library for Python.\nBuilt for corner cases and speed.\n\nThe project is named after the ancient Egyptian god [Maat](https://en.wikipedia.org/wiki/Maat).\nHer scale was used to weigh the heart as described in the book of the dead.\n\nSince Maats scale is magical, it not only validates values, it can transform them too.\n\nMaat does dictionary-to-dictionary validation and transformation.\nFrom those two dictionaries a new dictionary is created.\nEach value of the dictionary to be validated is passed through their validation and transformation functions.\n\nMaat doesn't use other depenencies.\n\n## Examples\n\nThis validates that input name is of type `str` and is either \"John Doe\" or \"Jane Doe\".\nThrows `Invalid` exception when validation fails. Maat has a fail fast policy.\n\n```python\n    >>> from maat import validate\n    >>> user = {\"name\": \"John Doe\"}\n    >>> user_validation = {\"name\": {\"type\": \"str\", \"choices\": [\"John Doe\", \"Jane Doe\"]}}\n    >>> validate(user, user_validation)\n    {\"name\": \"John Doe\"}\n    \n    >>> validate({\"name\": \"peter pan\"}, user_validation)\n    Traceback (most recent call last):\n    maat.validation.Invalid: key: \"name\" contains invalid item \"peter pan\": not in valid choices [\"John Doe\", \"Jane Doe\"]\n    \n    >>> validate({\"name\": 42}, user_validation)\n    Traceback (most recent call last)\n    maat.validation.Invalid: key: \"name\" contains invalid item \"42\" with type \"int\": not of type string\n    \n    >>>  validate({\"user\": \"John Doe\"}, user_validation)\n    Traceback (most recent call last)\n    maat.validation.Invalid: invalid keys: user :expected keys: name\n    \n    >>> validate({\"name\": \"Jane Doe\"}, user_validation)\n    {\"name\": \"Jane Doe\"}\n\n    >>> import maat\n    >>> @maat.protected(user_validation)\n        def create_user(name):\n            return \"success\"\n\n    >>> create_user(\"peter pan\")\n    Traceback (most recent call last):\n    maat.maat.Invalid: key: \"name\" contains invalid item \"peter pan\": not in valid choices [\"John Doe\", \"Jane Doe\"]\n\n    >>> create_user(\"John Doe\")\n    \"success\"\n```\n\n## Starting Point Example\n\n```python\nvalidation = {\n    \"int   \": {\"type\": \"int\", \"cast\": True, \"min_amount\": 1, \"max_amount\": 150},\n    \"float \": {\"type\": \"float\", \"cast\": True, \"min_amount\": 1, \"max_amount\": 150},\n    \"list  \": {\"type\": \"list\", \"min_amount\": 1, \"max_amount\": 5},\n    \"dict  \": {\"type\": \"dict\", \"min_amount\": 1, \"max_amount\": 2, \"key_regex\": r\"(\\w+)\"},\n    \"string\": {\"type\": \"str\", \"cast\": True, \"min_length\": 1,\n        \"max_length\": 12, \"regex\": r\"(\\w+ )(\\w+)\", \"choices\": [\"John Doe\", \"Jane Doe\"]\n    }\n}\n```\n\nEach field could be nullable, optional, default; they can be added to any field.\n```python\n>>> input_dic = {\"int   \": None}\n>>> validation = {\n\t\"int   \": {\"type\": \"int\", \"min_amount\": 1, \"default\": 42},\n\t\"float \": {\"type\": \"float\", \"optional\": True},\n\t\"str   \": {\"type\": \"str\", \"nullable\": True},\n}\n>>> validate(input_dic, validation)\n{\n    \"int   \": 42,\n    \"str   \": None\n}\n```\n\nNested data structures, nested fields are treated the same as upper levels.\nIt's possible to nest thousand of levels, it can be increased by upping recursion level of python.\nNesting is done without any performance hit.\n```python\n        input_dic = {\n            \"foo\": {\n                \"foo_bar\": \"John Doe Street\",\n                \"foo_baz\": 123,\n            }\n        }\n        validation = {\n            \"foo\": {\"type\": \"dict\", \"key_regex\": r\"\\w+\", \"nested\": {\n                \"foo_bar\": {\"type\": \"str\", \"min_length\": 5, \"max_length\": 99},\n                \"foo_baz\": {\"type\": \"int\", \"min_amount\": 1},\n                }\n            }\n        }\n```\n\n## Installation\n```sh\npip install maat\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Note\nThis project is being used in production by multiple companies.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Attumm/Maat",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Maat",
    "package_url": "https://pypi.org/project/Maat/",
    "platform": "any",
    "project_url": "https://pypi.org/project/Maat/",
    "project_urls": {
      "Homepage": "https://github.com/Attumm/Maat"
    },
    "release_url": "https://pypi.org/project/Maat/3.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Validate like a Maat",
    "version": "3.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12742693,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd3aa508b8ffbba271ad458f506a4dd231454912356bccfbce1cbd7825c46031",
        "md5": "8f9f0bfbe9568b78472df5371b10c212",
        "sha256": "dbb3d9cdd679e6b72510a9ed8709d15496589717568b9bf7a9a457e4a10fb093"
      },
      "downloads": -1,
      "filename": "Maat-3.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f9f0bfbe9568b78472df5371b10c212",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7428,
      "upload_time": "2021-08-02T12:31:46",
      "upload_time_iso_8601": "2021-08-02T12:31:46.934866Z",
      "url": "https://files.pythonhosted.org/packages/dd/3a/a508b8ffbba271ad458f506a4dd231454912356bccfbce1cbd7825c46031/Maat-3.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33619500bb30717d4ed6923f0a088003cbb7fa7f0769e2d54d36f16467eb01f3",
        "md5": "d4dd163759af1f02422a39315336ed3e",
        "sha256": "c4454d7493940d482c5b59f43c3bf42bde61aa821acd125250f526a1a78fa912"
      },
      "downloads": -1,
      "filename": "Maat-3.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d4dd163759af1f02422a39315336ed3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6447,
      "upload_time": "2021-08-02T12:31:48",
      "upload_time_iso_8601": "2021-08-02T12:31:48.807237Z",
      "url": "https://files.pythonhosted.org/packages/33/61/9500bb30717d4ed6923f0a088003cbb7fa7f0769e2d54d36f16467eb01f3/Maat-3.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}