{
  "info": {
    "author": "Kevin Breen",
    "author_email": "thehermit@malwareconfig.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "RATDecoders\n===========\n\nMalconf is a python3 library that can be used to staticly analyse specific malware families and extract the Configuration data that can be used by \nIncident Responders during an incident. \n\nAs a library it can also be installed in to automated malware analysis pipelines. \n\n\n![Coverage](https://codecov.io/gh/kevthehermit/RATDecoders/branch/master/graph/badge.svg \"Coverage\")\n\n[![Build Status](https://travis-ci.com/kevthehermit/RATDecoders.svg?branch=master)](https://travis-ci.com/kevthehermit/RATDecoders)\n\n\n## Installation\n\n#### Requirements\n\nThere are some pre-reqs that are included in the pip setup and the requirements.txt\n\n- pefile\n- pbkdf2\n- javaobj-py3\n- pycrypto\n- androguard\n\nFor all the decoders you will need yara and yara-python. For dealing with .NET malware you will need to install yara-python with dotnet support\n\n###### yara-python with dotnet support\n\ngit clone --recursive https://github.com/VirusTotal/yara-python\npython3 setup.py build --enable-magic --enable-dotnet\nsudo python3 setup.py install\n\n#### Install from pip\n\npip3 install --upgrade malwareconfig\n\n#### Install from repo\n\n```\ngit clone git@github.com:kevthehermit/RATDecoders.git\ncd RATDecoders\npip3 install -r requirements.txt\npython3 setup.py install\n```\n\n###Current Rats\nHere is a list of the currently supported RATS:\n\n  - LostDoor\n  - Xtreme\n  - AAR\n  - AdWind\n  - Adzok\n  - AlienSpy\n  - Alina\n  - Arcom\n  - BlackNix\n  - BlackShades\n  - BlueBanana\n  - Bozok\n  - ClientMesh\n  - CyberGate\n  - DarkComet\n  - DarkRAT\n  - HawkEye\n  - Hrat / hworm / WSH\n  - Jbifrost\n  - JRat\n  - LuminosityLink\n  - LuxNet\n  - NanoCore\n  - NetWire\n  - njRat\n  - Plasma\n  - Remcos\n  - Saefko\n  - Sakula\n  - SpyNote / Mobihook\n\n###Upcoming RATS\n\n- Still migrating old ones!\n\n###Usage\n\nThe decoders now act like a framework with auto family detection. You can still find the original individual decoders in the archive folder. These will not be \nkept as up to date as the decoders in the framework. \n\n```malconf```\n\n```malconf -l``` This will list all the supported rats\n\n```malconf /path/to/sample ``` This will automagically detect the family and \n\n### Library\n\nIf you pip install you can also use it is a library. \n\n```\nfrom malwareconfig import fileparser\nfrom malwareconfig.modules import __decoders__, __preprocessors__\n\n# Open and parse the file\nsample_path = '/path/to/sample.exe'\nfile_info = fileparser.FileParser(file_path=sample_path)\n\n# Check for a valid decoder and then parse\nif file_info.malware_name in __decoders__:\n    module = __decoders__[file_info.malware_name]['obj']()\n    module.set_file(file_info)\n    module.get_config()\n    conf = module.config\n    pprint(conf)\n\n```\n\n\n### Thanks\n\nFull credit where credit is due. \n\nMalware.lu for the initial xtreme Rat Writeup - https://code.google.com/p/malware-lu/wiki/en_xtreme_RAT\n\nFireye for their Poison Ivy and Xtreme rat WriteUps (Even though they ignored my tweets :-) ) - http://www.fireeye.com/blog/technical/2014/02/xtremerat-nuisance-or-threat.html\n\nShawn Denbow and Jesse Herts for their paper here - http://www.matasano.com/research/PEST-CONTROL.pdf Saved me a lot of time",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://malwareconfig.com",
    "keywords": "",
    "license": "GNU V3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "malwareconfig",
    "package_url": "https://pypi.org/project/malwareconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/malwareconfig/",
    "project_urls": {
      "Homepage": "https://malwareconfig.com"
    },
    "release_url": "https://pypi.org/project/malwareconfig/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Malware Config Extraction",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7554969,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "15b3bd696967e8a268be2540596ca6a89d82fdc103c41676cc25341fed1d4bcc",
        "md5": "89438955bf05e15b32bbe2e1e3e8a4c2",
        "sha256": "3c5857f0bc52d54d3d083e82fc3feb0a33a31439f5684bde4e437692e7d5be0a"
      },
      "downloads": -1,
      "filename": "malwareconfig-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "89438955bf05e15b32bbe2e1e3e8a4c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40426,
      "upload_time": "2019-10-06T00:27:54",
      "upload_time_iso_8601": "2019-10-06T00:27:54.700892Z",
      "url": "https://files.pythonhosted.org/packages/15/b3/bd696967e8a268be2540596ca6a89d82fdc103c41676cc25341fed1d4bcc/malwareconfig-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}