{
  "info": {
    "author": "Jens Nistler <opensource@jensnistler.de>, Bogdan Radko <bogdan.radko@regiohelden.de>",
    "author_email": "opensource@regiohelden.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Monitoring"
    ],
    "description": "[![PyPI version](https://badge.fury.io/py/django-datawatch.svg)](https://badge.fury.io/py/django-datawatch)\n[![GitHub build status](https://github.com/RegioHelden/django-datawatch/workflows/Test/badge.svg)](https://github.com/RegioHelden/django-datawatch/actions)\n[![Coverage Status](https://coveralls.io/repos/github/RegioHelden/django-datawatch/badge.svg?branch=add_coveralls)](https://coveralls.io/github/RegioHelden/django-datawatch?branch=add_coveralls)\n[![Open Source Love](https://badges.frapsoft.com/os/v2/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badges/)\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)\n\n# Django Datawatch\n\nWith Django Datawatch you are able to implement arbitrary checks on data, review their status and even describe what to do to resolve them.\nThink of [nagios](https://www.nagios.org/)/[icinga](https://www.icinga.org/) for data.\n\n## Check execution backends\n\n### Synchronous\n\nWill execute all tasks synchronously which is not recommended but the most simple way to get started.\n\n### Celery\n\nWill execute the tasks asynchronously using celery as a task broker and executor.\nRequires celery 5.0.0 or later.\n\n### Other backends\n\nFeel free to implement other task execution backends and send a pull request.\n\n## Install\n\n```shell\n$ pip install django-datawatch\n```\n\nAdd `django_datawatch` to your `INSTALLED_APPS`\n\n## Celery beat database scheduler\n\nIf the datawatch scheduler should be run using the celery beat database scheduler, you need to install [django_celery_beat](hhttp://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#beat-custom-schedulers).\n\nAdd `django_datawatch.tasks.django_datawatch_scheduler` to the `CELERYBEAT_SCHEDULE` of your app.\nThis task should be executed every minute e.g. `crontab(minute='*/1')`, see example app.\n\n## Write a custom check\n\nCreate `checks.py` inside your module.\n\n```python\nfrom datetime import datetime\n\nfrom celery.schedules import crontab\n\nfrom django_datawatch.datawatch import datawatch\nfrom django_datawatch.base import BaseCheck, CheckResponse\nfrom django_datawatch.models import Result\n\n\n@datawatch.register\nclass CheckTime(BaseCheck):\n    run_every = crontab(minute='*/5')  # scheduler will execute this check every 5 minutes\n\n    def generate(self):\n        yield datetime.now()\n\n    def check(self, payload):\n        response = CheckResponse()\n        if payload.hour <= 7:\n            response.set_status(Result.STATUS.ok)\n        elif payload.hour <= 12:\n            response.set_status(Result.STATUS.warning)\n        else:\n            response.set_status(Result.STATUS.critical)\n        return response\n\n    def get_identifier(self, payload):\n        # payload will be our datetime object that we are getting from generate method\n        return payload\n\n    def get_payload(self, identifier):\n        # as get_identifier returns the object we don't need to process it\n        # we can return identifier directly\n        return identifier\n\n    def user_forced_refresh_hook(self, payload):\n        payload.do_something()\n```\n\n### .generate\n\nMust yield payloads to be checked. The check method will then be called for every payload.\n\n### .check\n\nMust return an instance of CheckResponse.\n\n### .get_identifier\n\nMust return a unique identifier for the payload. \n\n### .user_forced_refresh_hook\n\nA function that gets executed when the refresh is requested by a user through the `ResultRefreshView`.\n\nThis is used in checks that are purely based on triggers, e.g. when a field changes the test gets executed.\n\n### trigger check updates\n\nCheck updates for individual payloads can also be triggered when related datasets are changed.\nThe map for update triggers is defined in the Check class' trigger_update attribute.\n\n```\ntrigger_update = dict(subproduct=models_customer.SubProduct)\n```\n\nThe key is a slug to define your trigger while the value is the model that issues the trigger when saved.\nYou must implement a resolver function for each entry with the name of get_<slug>_payload which returns the payload or multiple payloads (as a list) to check (same datatype as .check would expect or .generate would yield).\n```\ndef get_subproduct_payload(self, instance):\n    return instance.product\n```\n\n## Exceptions\n\n#### `DatawatchCheckSkipException`\nraise this exception to skip current check. The result will not appear in the checks results. \n\n## Run your checks\n\nA management command is provided to queue the execution of all checks based on their schedule.\nAdd a crontab to run this command every minute and it will check if there's something to do.\n\n```shell\n$ ./manage.py datawatch_run_checks\n$ ./manage.py datawatch_run_checks --slug=example.checks.UserHasEnoughBalance\n```\n\n## Refresh your check results\n\nA management command is provided to forcefully refresh all existing results for a check.\nThis comes in handy if you changes the logic of your check and don't want to wait until the periodic execution or an update trigger.\n\n```shell\n$ ./manage.py datawatch_refresh_results\n$ ./manage.py datawatch_refresh_results --slug=example.checks.UserHasEnoughBalance\n```\n\n## Get a list of registered checks\n\n```shell\n$ ./manage.py datawatch_list_checks\n```\n\n## Clean up your database\n\nRemove the unnecessary check results and executions if you've removed the code for a check.\n\n```shell\n$ ./manage.py datawatch_clean_up\n```\n\n## Settings\n\n```python\nDJANGO_DATAWATCH_BACKEND = 'django_datawatch.backends.synchronous'\nDJANGO_DATAWATCH_RUN_SIGNALS = True\n```\n\n### DJANGO_DATAWATCH_BACKEND\n\nYou can chose the backend to run the tasks. Supported are 'django_datawatch.backends.synchronous' and 'django_datawatch.backends.celery'.\n\nDefault: 'django_datawatch.backends.synchronous'\n\n### DJANGO_DATAWATCH_RUN_SIGNALS\n\nUse this setting to disable running post_save updates during unittests if required.\n\nDefault: True\n\n### celery task queue\n\nDatawatch supported setting a specific queue in release < 0.4.0\n\nWith the switch to celery 4, you should use task routing to define the queue for your tasks, see http://docs.celeryproject.org/en/latest/userguide/routing.html\n\n# CONTRIBUTE\n\n## Dev environment\n- docker (at least 17.12.0+)\n- docker-compose (at least 1.18.0)\n\nPlease make sure that no other container is using port 8000 as this is the one you're install gets exposed to:\nhttp://localhost:8000/\n\n## Setup\n\nWe've included an example app to show how django_datawatch works.\nStart by launching the included docker container.\n```bash\ndocker-compose up -d\n```\n\nThen setup the example app environment.\n```bash\ndocker-compose run --rm app migrate\ndocker-compose run --rm app loaddata example\n```\nThe installed superuser is \"example\" with password \"datawatch\".\n\n## Run checks\n\nOpen http://localhost:8000/, log in and then go back to http://localhost:8000/.\nYou'll be prompted with an empty dashboard. That's because we didn't run any checks yet.\nLet's enqueue an update.\n```bash\ndocker-compose run --rm app datawatch_run_checks --force\n```\n\nThe checks for the example app are run synchronously and should be updated immediately.\nIf you decide to switch to the celery backend, you should now start a celery worker to process the checks.\n```bash\ndocker-compose run --rm --entrypoint=celery app worker -A example -l DEBUG\n```\n\nTo execute the celery beat scheduler which runs the datawatch scheduler every minute, just run:\n```bash\ndocker-compose run --rm --entrypoint=celery app beat --scheduler django_celery_beat.schedulers:DatabaseScheduler -A example\n```\n\nYou will see some failed check now after you refreshed the dashboard view.\n\n![Django Datawatch dashboard](http://static.jensnistler.de/django_datawatch.png \"Django Datawatch dashboard\")\n\n## Run the tests\n```bash\ndocker-compose run --rm app test\n```\n\n## Requirements upgrades\n\nCheck for upgradeable packages by running \n```bash\ndocker-compose up -d\ndocker-compose exec app pip-check\n```\n\n## Translations\n\nCollect and compile translations for all registered locales\n\n```bash\ndocker-compose run --rm app makemessages --no-location --all\ndocker-compose run --rm app compilemessages\n```\n\n## Making a new release\n\n[bumpversion](https://github.com/peritus/bumpversion) is used to manage releases.\n\nAdd your changes to the [CHANGELOG](./CHANGELOG.rst), run\n```bash\ndocker-compose exec app bumpversion <major|minor|patch>\n```\nthen push (including tags).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RegioHelden/django-datawatch",
    "keywords": "django,monitoring,datawatch,check,checks",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-datawatch",
    "package_url": "https://pypi.org/project/django-datawatch/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-datawatch/",
    "project_urls": {
      "Homepage": "https://github.com/RegioHelden/django-datawatch"
    },
    "release_url": "https://pypi.org/project/django-datawatch/3.3.0/",
    "requires_dist": [
      "celery (>=5.0.0)",
      "Django (<4.2,>=3.2)",
      "django-bootstrap3 (>=21.1)",
      "django-extensions (>=3.0.0)",
      "django-model-utils (>=4.2.0)",
      "python-dateutil (>=2.8.0)"
    ],
    "requires_python": "",
    "summary": "Django Datawatch runs automated data checks in your Django installation",
    "version": "3.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16280614,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5dec7a702f38d6d3f08c72191c4991349d887e9266c92a200fb326e6f96dd5f",
        "md5": "3b9f903cd7d399c46293993cdf0c58b6",
        "sha256": "90038e444a29282279401537ae0f22032bd7ba7343a0ec11538ffffa0889cad9"
      },
      "downloads": -1,
      "filename": "django_datawatch-3.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b9f903cd7d399c46293993cdf0c58b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 37392,
      "upload_time": "2023-01-02T16:56:34",
      "upload_time_iso_8601": "2023-01-02T16:56:34.955528Z",
      "url": "https://files.pythonhosted.org/packages/e5/de/c7a702f38d6d3f08c72191c4991349d887e9266c92a200fb326e6f96dd5f/django_datawatch-3.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "190c7c1fc624579cf879cc05b931e4ff6d022b940b338c53c719bd90d2144ade",
        "md5": "0f179a914ca85071817fd95e3d23b428",
        "sha256": "fe1094e9249e3afb705b8967f070c3a1141f39ebba56d0edb4881fe30029b965"
      },
      "downloads": -1,
      "filename": "django-datawatch-3.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0f179a914ca85071817fd95e3d23b428",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28912,
      "upload_time": "2023-01-02T16:56:36",
      "upload_time_iso_8601": "2023-01-02T16:56:36.267547Z",
      "url": "https://files.pythonhosted.org/packages/19/0c/7c1fc624579cf879cc05b931e4ff6d022b940b338c53c719bd90d2144ade/django-datawatch-3.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}