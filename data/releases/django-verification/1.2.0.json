{
  "info": {
    "author": "kaleissin",
    "author_email": "kaleissin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "===================\ndjango-verification\n===================\n\nGeneralized app for two-step verification.\n\nSupports Python 3.5, 3.6, 3.7; Django 1.11 and Django 2.2.\n\nVersions prior to 1.0.0 support Python 2 and Django older than 1.11.\n\nInstallation\n============\n\n1. Install the library, for instance with pip::\n\n    pip install django-verification\n\n2. Add the library to your INSTALLED_APPS of an exiting project::\n\n    INSTALLED_APPS += ['verification']\n\n3. Add the tables to the existing project::\n\n    python manage.py migrate verification\n\nUpgrade\n=======\n\nTo 0.4.1 (needs Django 1.7+)::\n\n    python manage.py migrate --fake verification 0001_initial\n\nDemo\n====\n\nCopy the entire django-verification directory somewhere, set up and enter a\nvirtualenv, then provided you are on some Un*x::\n\n    make demo\n\nThis'll automatically make a user \"admin\" with the password \"demo\".\n\nThe demo should now be running on http://127.0.0.1/\n\nRunning `make demo` again will erase the database from the previous run.\n\nTests\n=====\n\nTo run the tests, first install the testing-requirements::\n\n    pip install -r requirements/test.txt\n\nthen run the tests with::\n\n    make test APP=verification\n\nUsage\n=====\n\nCreate a KeyGroup. KeyGroups hold the config for your Keys, so you might want\nto make fixtures of them.\n\n.. code-block:: python\n\n    from verification.models import KeyGroup\n\n    keygroup = KeyGroup(\n        name='activate_account', # Unique\n        generator='sha1',        # See verification.generators\n    )\n\nCreate a Key on some event, for instance when a user clicks a button:\n\n.. code-block:: python\n\n    from verification.models import Key\n\n    Key.generate(group=keygroup)\n\nSet Key.send_func to some callable:\n\n.. code-block:: python\n\n    from django.core.mail import send_mail\n\n    # In this minimal example, the contents of the email is created earlier\n    def email_key(recipient, content):\n        subject = \"Activate account on FooBlog\"\n        recipient = ''.join(recipient.strip().split())\n        # Use any kind of messaging-system here\n        send_mail(subject, content, 'noreply@example.com', [recipient])\n\n    key.send_func = email_key\n\nChoose the claim-view, make the content of the email, send it with\nkey.send_key():\n\n.. code-block:: python\n\n    from django.core.urlresolvers import reverse\n\n    activate_url = reverse('verification-claim-post-url',\n            kwargs={'key': key, 'group': key.group})\n    content = \"Click on %s to activate your account on FooBlog!\" % activate_url\n    recipient = 'john.oe@example.com'\n\n    key.send_key(recipient, content)\n\nHook the ``key_claimed``-signal in order to do something after the key is claimed:\n\n.. code-block:: python\n\n    from django.dispatch import receiver\n\n    from verification.signals import key_claimed\n\n    @receiver(key_claimed)\n    def user_created_key_claimed(sender, **kwargs):\n        claimant = kwargs['claimant']\n        claimant.is_active = True\n        claimant.save()\n\n:Version: 1.2.0\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kaleissin/django-verification",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-verification",
    "package_url": "https://pypi.org/project/django-verification/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-verification/",
    "project_urls": {
      "Homepage": "https://github.com/kaleissin/django-verification"
    },
    "release_url": "https://pypi.org/project/django-verification/1.2.0/",
    "requires_dist": [
      "Django (<4.0,>=3.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Generalized app for two-step verification",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10826220,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "096bb1010adbe065dfc52f43d32172c5302b83eb6a9d576956233c93c0c1d990",
        "md5": "6c9695ad73d1fb49fc941f84f42a96ed",
        "sha256": "7a5b078aab2bece191211f1375f96bb6727b6214922e36adfde814de6e75a4ec"
      },
      "downloads": -1,
      "filename": "django_verification-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c9695ad73d1fb49fc941f84f42a96ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13737,
      "upload_time": "2021-07-05T13:16:43",
      "upload_time_iso_8601": "2021-07-05T13:16:43.930257Z",
      "url": "https://files.pythonhosted.org/packages/09/6b/b1010adbe065dfc52f43d32172c5302b83eb6a9d576956233c93c0c1d990/django_verification-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}