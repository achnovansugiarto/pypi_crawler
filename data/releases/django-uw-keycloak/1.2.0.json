{
  "info": {
    "author": "Ubiwhere",
    "author_email": "urbanplatform@ubiwhere.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Topic :: Security"
    ],
    "description": "# [WIP] Django Keycloak Authorization\n\nMiddleware to allow authorization using Keycloak and Django for django-rest-framework (DRF) and Graphene-based projects. \nThis package should only be used in projects starting from scratch, since it overrides the users' management.\n\n## Installation\n\n1. Add the module to your environment\n    * With PIP:\n        \n        ```shell\n        pip install django-uw-keycloak\n        ```\n\n    * By compiling from source:\n\n        ```shell\n        git clone https://github.com/urbanplatform/django-keycloak-auth && \\\n        cd django-keycloak-auth && \\\n        python3 setup.py install\n        ```\n\n2. Add `django_keycloak` to the Django project's `INSTALLED_APPS` set in the `settings` file\n3. Add `django_keycloak.middleware.KeycloakMiddleware` to the Django `MIDDLEWARE` set in the `settings` file\n4. In your Django project's `settings` file, change the Django `AUTHENTICATION_BACKENDS` to:\n\n    ```python\n    AUTHENTICATION_BACKENDS = ('django_keycloak.backends.KeycloakAuthenticationBackend',)\n    ```\n5. Add the following configuration to Django settings and replace the values with your own configuration attributes: \n\n    ```python\n    KEYCLOAK_CONFIG = {\n        'SERVER_URL': '<PUBLIC_SERVER_URL>',\n        'INTERNAL_URL': '<INTERNAL_SERVER_URL>',\n        'REALM': '<REALM_NAME>',\n        'CLIENT_ID': '<CLIENT_ID>',\n        'CLIENT_SECRET_KEY': '<CLIENT_SECRET_KEY>',\n        'CLIENT_ADMIN_ROLE': '<CLIENT_ADMIN_ROLE>',\n        'REALM_ADMIN_ROLE': '<REALM_ADMIN_ROLE>',\n        'EXEMPT_URIS': [],  # URIS to be ignored by the package\n        'GRAPHQL_ENDPOINT': 'graphql/'  # Default graphQL endpoint\n    }\n    ```\n6. Override the Django user model in the `settings` file:\n \n     ```python\n    AUTH_USER_MODEL = \"django_keycloak.KeycloakUserAutoId\"\n    ```\n\n7. If you are using Graphene, add the `GRAPHQL_ENDPOINT` to settings and `KeycloakGrapheneMiddleware` to the Graphene's `MIDDLEWARE`.\n    \n\n8. Configure Django-Rest-Framework authentication classes with `django_keycloak.authentication.KeycloakAuthentication`:\n\n    ```python\n    REST_FRAMEWORK = {\n        'DEFAULT_AUTHENTICATION_CLASSES': [\n            'django_keycloak.authentication.KeycloakAuthentication'\n        ],\n        'DEFAULT_RENDERER_CLASSES': [\n            'rest_framework.renderers.JSONRenderer',\n        ],\n        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n        'PAGE_SIZE': 100,  # Default to 20\n        'PAGINATE_BY_PARAM': 'page_size',\n        # Allow client to override, using `?page_size=xxx`.\n        'MAX_PAGINATE_BY': 100,\n        # Maximum limit allowed when using `?page_size=xxx`.\n        'TEST_REQUEST_DEFAULT_FORMAT': 'json'\n    }\n    ```\n    \n## DRY Permissions\nThe permissions must be set like in other projects. You must set the\npermissions configuration for each model. Example:\n\n```python\n@staticmethod\n@authenticated_users\ndef has_read_permission(request):\n    roles = request.remote_user.get('client_roles')\n\n    return True if 'ADMIN' in roles else False\n```\n\n## Keycloak users synchronization\n\nThe management command `sync_keycloak_users` must be ran periodically, in\norder to remove from the users no longer available at\nKeycloak from the local users. This command can be called using the task named \n`sync_users_with_keycloak`, using Celery. Fot that, you just need to:\n \n* Add the task to the `CELERY_BEAT_SCHEDULE` Ã¬n the Django project's settings:\n\n  ```python\n  CELERY_BEAT_SCHEDULE = {\n      'sync_users_with_keycloak': {\n          'task': 'django_keycloak.tasks.sync_users_with_keycloak',\n          'schedule': timedelta(hours=24),\n          'options': {'queue': 'sync_users'}\n      },\n  }\n  ```\n\n* Add the `sync_users` queue to the `docker-compose`'s `celery` service:\n\n  `command: celery worker -A citibrain_base -B -E -l info -Q backup,celery,sync_users --autoscale=4,1`\n\n**Attention:** This task is only responsible to delete users from local\nstorage. The creation of new users, on Keycloak, is done when they\ntry to login.\n\n## Notes\n\nSupport for celery 5: from version 0.7.4 on we should use celery 5 for the user sync. This implies running celery with celery -A app worker ... instead of celery worker -A app ...\n\n## Contact\n\ndjango-keycloak-auth [at] googlegroups [dot] com\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/urbanplatform/django-keycloak-auth",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-uw-keycloak",
    "package_url": "https://pypi.org/project/django-uw-keycloak/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-uw-keycloak/",
    "project_urls": {
      "Homepage": "https://github.com/urbanplatform/django-keycloak-auth"
    },
    "release_url": "https://pypi.org/project/django-uw-keycloak/1.2.0/",
    "requires_dist": [
      "Django (>=\"2.2\")",
      "djangorestframework (>=\"3.0\")",
      "dry-rest-permissions (>=\"0.1\")",
      "PyJWT (>=\"2.3\")",
      "requests (>=\"2.0\")",
      "cachetools (>=\"5.0\")"
    ],
    "requires_python": "",
    "summary": "Middleware to allow authorization using Keycloak and Django",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16500693,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f311f5ec80d8a89961f7d39e6fae4cd0111e92add77dbd769fe9a2786fb4eab2",
        "md5": "56883c5e9fe7b97598bcbbe8d7f057af",
        "sha256": "eb5ada461db10a0e867e7f0bc230169e52865811d6a821cb71198e1ffb5ac2f8"
      },
      "downloads": -1,
      "filename": "django_uw_keycloak-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56883c5e9fe7b97598bcbbe8d7f057af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24863,
      "upload_time": "2022-10-19T14:28:42",
      "upload_time_iso_8601": "2022-10-19T14:28:42.320740Z",
      "url": "https://files.pythonhosted.org/packages/f3/11/f5ec80d8a89961f7d39e6fae4cd0111e92add77dbd769fe9a2786fb4eab2/django_uw_keycloak-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7af6da12412203024d156afa491a298359400a16cdefc8f1316889e211a473ec",
        "md5": "1ce5301fa7794ef659923ad4541adc61",
        "sha256": "49487409f478f25fb6bfd2d84c71dca7deb68e925b14179d018a5ab947128fea"
      },
      "downloads": -1,
      "filename": "django_uw_keycloak-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1ce5301fa7794ef659923ad4541adc61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17928,
      "upload_time": "2022-10-19T14:28:43",
      "upload_time_iso_8601": "2022-10-19T14:28:43.592050Z",
      "url": "https://files.pythonhosted.org/packages/7a/f6/da12412203024d156afa491a298359400a16cdefc8f1316889e211a473ec/django_uw_keycloak-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}