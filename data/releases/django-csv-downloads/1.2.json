{
  "info": {
    "author": "YunoJuno",
    "author_email": "code@yunojuno.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Framework :: Django :: 4.1",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django CSV Downloads\n\nDjango app for tracking queryset-backed CSV downloads\n\n### Version support\n\nThe current version of the this app support **Python 3.8+** and **Django 3.2+**\n\n## What does this app do?\n\nThis app is used to track user downloads of CSVs that are derived from Django QuerySets. You provide\nthe filename, queryset and the list of columns that you want to output.\n\nIt has a single model (`CsvDownload`) that tracks downloads and stores the user, filename, row count\nand timestamp.\n\n## Usage\n\nThe recommended way to use this app is to rely on `django_csv.views.download_csv`, which wraps up\nthe creation of the download object and the generation of the CSV itself:\n\n```python\n# DISPLAY PURPOSES ONLY: DO NOT ENABLE USER DATA DOWNLOADS IN PRODUCTION\ndef download_users(request: HttpRequest) -> HttpResponse:\n    data = User.objects.all()\n    columns = (\"first_name\", \"last_name\", \"email\")\n    return download_csv(request.user, \"users.csv\", data, *columns)\n```\n\n## Settings\n\nThere is a `CSV_DOWNLOAD_MAX_ROWS` setting that is used to truncate output. Defaults to 10000. This is a backstop, and can be overridden on a per use\nbasis.\n\n## Examples\n\n**Caution:** All of these examples involve the User model as it's ubiquitous - DO NOT DO THIS ON A\nPRODUCTION ENVIRONMENT.\n\nExample of writing a QuerySet to a file:\n\n```python\n>>> data = User.objects.all()\n>>> columns = (\"first_name\", \"last_name\", \"email\")\n>>> with open('users.csv', 'w') as csvfile:\n>>>     csv.write_csv(csvfile, data, *columns)\n10  #<--- row count\n```\n\nadding a custom header:\n\n```python\n>>> data = User.objects.all()\n>>> columns = (\"first_name\", \"last_name\", \"email\")\n>>> column_headers = (\"given_name\", \"family_name\", \"email_address\")\n>>> with open('users.csv', 'w') as csvfile:\n>>>     csv.write_csv(csvfile, data, *columns, column_headers=column_headers)\n10\n```\n\nExample of writing to an HttpResponse:\n\n```python\n>>> response = HttpResponse(content_type=\"text/csv\")\n>>> response[\"Content-Disposition\"] = 'attachment; filename=\"users.csv\"'\n>>> csv.write_csv(response, data, *columns)\n10\n```\n\nExample of writing to an in-memory text buffer:\n\n```python\n>>> buffer = io.StringIO()\n>>> csv.write_csv(buffer, data, *columns)\n10\n```\n\nExample of writing directly to S3:\n\n```python\n>>> with s3.s3_upload(\"bucket_name\", \"object_key\") as buffer:\n...     csv.write_csv(fileobj, queryset, *columns)\n10\n>>> # one-line convenience function\n>>> s3.write_csv_s3(\"bucket_name/object_key\", queryset, *columns)\n10\n```\n\nExample of writing directly to SFTP:\n\n```python\n# requires a paramiko.SFTPClient to have been created / connected.\n>>> with sft.sftp_upload(client, remote_filepath) as fileobj:\n...     write_csv(fileobj, queryset, *columns)\n10\n>>> # one-line convenience function\n>>> sftp.write_csv_sftp(\"sftp://user:pass@host:port/path\", queryset, *columns)\n10\n```\n\nExample of a custom admin action to download User data:\n\n```python\nclass CustomUserAdmin(UserAdmin):\n\n    actions = ['download']\n    csv_fields = (\"first_name\", \"last_name\", \"email\", \"is_staff\")\n    csv_filename = \"users.csv\"\n\n    def download(self, request, queryset):\n        \"\"\"Download selected users as a CSV.\"\"\"\n        return download_csv(\n            user=request.user,\n            filename=CustomUserAdmin.csv_filename,\n            queryset=queryset,\n            *CustomUserAdmin.csv_fields\n        )\n\n    download.short_description = \"Download selected users\"\n```\n\nExample CBV that restricts queryset based on request.user:\n\n```python\nclass DownloadUsers(CsvDownloadView):\n\n    def has_permission(self, request: HttpRequest) -> bool:\n        return request.user.is_authenticated\n\n    def get_queryset(self, request: HttpRequest) -> QuerySetWriter:\n        \"\"\"Allow superusers to download Users.\"\"\"\n        if request.user.is_superuser:\n            return User.objects.all().order_by(\"first_name\", \"last_name\")\n        return User.objects.none()\n\n    def get_filename(self, request: HttpRequest) -> str:\n        return \"users.csv\"\n\n    def get_columns(self, request: HttpRequest) -> str:\n        return (\"first_name\", \"last_name\")\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yunojuno/django-csv-downloads",
    "keywords": "",
    "license": "MIT",
    "maintainer": "YunoJuno",
    "maintainer_email": "code@yunojuno.com",
    "name": "django-csv-downloads",
    "package_url": "https://pypi.org/project/django-csv-downloads/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-csv-downloads/",
    "project_urls": {
      "Documentation": "https://github.com/yunojuno/django-csv-downloads",
      "Homepage": "https://github.com/yunojuno/django-csv-downloads",
      "Repository": "https://github.com/yunojuno/django-csv-downloads"
    },
    "release_url": "https://pypi.org/project/django-csv-downloads/1.2/",
    "requires_dist": [
      "django (>=3.2,<5.0)",
      "boto3 ; extra == \"s3\" or extra == \"test\"",
      "paramiko ; extra == \"sftp\" or extra == \"test\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Django app for enabling and tracking CSV downloads",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17242639,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "67af5f30da804913c4c6444cabce24e1902c36b8ae85d41e1f2af2f672d41290",
        "md5": "f00411bb2cd0af749fe8c3274d7b8913",
        "sha256": "687b19d623f194d43ed6a3156c6eb8fc54f0cbe0f592e4ee6176c60fcbc823ca"
      },
      "downloads": -1,
      "filename": "django_csv_downloads-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f00411bb2cd0af749fe8c3274d7b8913",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 12109,
      "upload_time": "2023-02-28T11:50:21",
      "upload_time_iso_8601": "2023-02-28T11:50:21.633273Z",
      "url": "https://files.pythonhosted.org/packages/67/af/5f30da804913c4c6444cabce24e1902c36b8ae85d41e1f2af2f672d41290/django_csv_downloads-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ae9a28cdcae011ab9888c7d2c8cbdb489eb97c3845101cc7b44a79ea8d49cff",
        "md5": "37b662cdce3ae81feafe688b7701e683",
        "sha256": "2e5b6e81abf5927fbd839a3cd0802b735a02b5e5eefcea4fce2b72687325dbc8"
      },
      "downloads": -1,
      "filename": "django_csv_downloads-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "37b662cdce3ae81feafe688b7701e683",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 10664,
      "upload_time": "2023-02-28T11:50:23",
      "upload_time_iso_8601": "2023-02-28T11:50:23.418543Z",
      "url": "https://files.pythonhosted.org/packages/3a/e9/a28cdcae011ab9888c7d2c8cbdb489eb97c3845101cc7b44a79ea8d49cff/django_csv_downloads-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}