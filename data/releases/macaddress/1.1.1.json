{
  "info": {
    "author": "Alexander Kozhevnikov",
    "author_email": "mentalisttraceur@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "macaddress\n==========\n\nA module for handling hardware identifiers like MAC addresses.\n\nThis module makes it easy to:\n\n1. check if a string represents a valid MAC address, or a similar\n   hardware identifier like an EUI-64, OUI, etc,\n\n2. convert between string and binary forms of MAC addresses and\n   other hardware identifiers,\n\nand so on.\n\nHeavily inspired by the ``ipaddress`` module, but not yet quite\nas featureful.\n\n\nVersioning\n----------\n\nThis library's version numbers follow the `SemVer 2.0.0\nspecification <https://semver.org/spec/v2.0.0.html>`_.\n\n\nInstallation\n------------\n\n::\n\n    pip install macaddress\n\n\nUsage\n-----\n\nImport:\n\n.. code:: python\n\n    import macaddress\n\nClasses are provided for common hardware identifier\ntypes (``MAC``/``EUI48``, ``EUI64``, ``OUI``, and\nso on), as well as several less common ones. Others\nmight be added later. You can define ones that you\nneed in your code with just a few lines of code.\n\n\nParse or Validate String\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen only one address type is valid:\n````````````````````````````````````\n\nAll provided classes support the standard and common formats.\nFor example, the ``EUI48`` and ``MAC`` classes support the\nfollowing formats:\n\n.. code:: python\n\n    >>> macaddress.MAC('01-23-45-67-89-ab')\n    MAC('01-23-45-67-89-AB')\n    >>> macaddress.MAC('01:23:45:67:89:ab')\n    MAC('01-23-45-67-89-AB')\n    >>> macaddress.MAC('0123.4567.89ab')\n    MAC('01-23-45-67-89-AB')\n    >>> macaddress.MAC('0123456789ab')\n    MAC('01-23-45-67-89-AB')\n\nYou can inspect what formats a hardware address class supports\nby looking at its ``formats`` attribute:\n\n.. code:: python\n\n    >>> macaddress.OUI.formats\n    ('xx-xx-xx', 'xx:xx:xx', 'xxxxxx')\n\nEach ``x`` in the format string matches one hexadecimal\n\"digit\", and all other characters are matched literally.\n\nIf the string does not match one of the formats, a\n``ValueError`` is raised:\n\n.. code:: python\n\n    >>> try:\n    ...     macaddress.MAC('foo bar')\n    ... except ValueError as error:\n    ...     print(error)\n    ... \n    'foo bar' cannot be parsed as MAC\n\nIf you need to parse in a format that isn't supported,\nyou can define a subclass and add the format:\n\n.. code:: python\n\n    >>> class MACAllowsTrailingDelimiters(macaddress.MAC):\n    ...     formats = macaddress.MAC.formats + (\n    ...         'xx-xx-xx-xx-xx-xx-',\n    ...         'xx:xx:xx:xx:xx:xx:',\n    ...         'xxxx.xxxx.xxxx.',\n    ...     )\n    ... \n    >>> MACAllowsTrailingDelimiters('01-02-03-04-05-06-')\n    MACAllowsTrailingDelimiters('01-02-03-04-05-06')\n\nWhen multiple address types are valid:\n``````````````````````````````````````\n\nThere is also a ``parse`` function for when you have a string\nwhich might be one of several classes:\n\n.. code:: python\n\n    >>> from macaddress import EUI48, EUI64, MAC, OUI\n\n    >>> macaddress.parse('01:02:03', OUI, MAC)\n    OUI('01-02-03')\n    >>> macaddress.parse('01:02:03:04:05:06', OUI, MAC, EUI64)\n    MAC('01-02-03-04-05-06')\n    >>> macaddress.parse('010203040506', EUI64, EUI48)\n    EUI48('01-02-03-04-05-06')\n    >>> macaddress.parse('0102030405060708', EUI64, EUI48, OUI, MAC)\n    EUI64('01-02-03-04-05-06-07-08')\n\nIf the input string cannot be parsed as any of\nthe given classes, a ``ValueError`` is raised:\n\n.. code:: python\n\n    >>> try:\n    ...     macaddress.parse('01:23', MAC, OUI)\n    ... except ValueError as error:\n    ...     print(error)\n    ... \n    '01:23' cannot be parsed as MAC or OUI\n    >>> try:\n    ...     macaddress.parse('01:23', MAC, OUI, EUI64)\n    ... except ValueError as error:\n    ...     print(error)\n    ... \n    '01:23' cannot be parsed as MAC, OUI, or EUI64\n\nNote that the message of the ``ValueError`` tries to be helpful\nfor developers, but it is not localized, nor is its exact text\npart of the official public interface covered by SemVer.\n\n\nParse from Bytes\n~~~~~~~~~~~~~~~~\n\nAll ``macaddress`` classes can be constructed from raw bytes:\n\n.. code:: python\n\n    >>> macaddress.MAC(b'abcdef')\n    MAC('61-62-63-64-65-66')\n    >>> macaddress.OUI(b'abc')\n    OUI('61-62-63')\n\nIf the byte string is the wrong size, a ``ValueError`` is raised:\n\n.. code:: python\n\n    >>> try:\n    ...     macaddress.MAC(b'\\x01\\x02\\x03')\n    ... except ValueError as error:\n    ...     print(error)\n    ... \n    b'\\x01\\x02\\x03' has wrong length for MAC\n\n\nParse from Integers\n~~~~~~~~~~~~~~~~~~~\n\nAll ``macaddress`` classes can be constructed from raw integers:\n\n.. code:: python\n\n    >>> macaddress.MAC(0x010203ffeedd)\n    MAC('01-02-03-FF-EE-DD')\n    >>> macaddress.OUI(0x010203)\n    OUI('01-02-03')\n\nNote that the least-significant bit of the integer value maps\nto the last bit in the address type, so the same integer has\na different meaning depending on the class you use it with:\n\n.. code:: python\n\n    >>> macaddress.MAC(1)\n    MAC('00-00-00-00-00-01')\n    >>> macaddress.OUI(1)\n    OUI('00-00-01')\n\nIf the integer is too large for the hardware identifier class\nthat you're trying to construct, a ``ValueError`` is raised:\n\n.. code:: python\n\n    >>> try:\n    ...     macaddress.OUI(1_000_000_000)\n    ... except ValueError as error:\n    ...     print(error)\n    ... \n    1000000000 is too big for OUI\n\n\nGet as String\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> mac = macaddress.MAC('01-02-03-04-05-06')\n    >>> str(mac)\n    01-02-03-04-05-06\n\nThe first format listed in ``formats`` is used when\nstringifying the object. If you want to use a\ndifferent format, you can override the ``formats``\nattribute on the instance, or on a subclass:\n\n.. code:: python\n\n    >>> mac.formats = ('xx:xx:xx:xx:xx:xx',)\n    >>> str(mac)\n    01-02-03-04-05-06\n\n    >>> class MACWithColonsByDefault(macaddress.MAC):\n    ...     formats = ('xx:xx:xx:xx:xx:xx',) + macaddress.MAC.formats\n    ... \n    >>> MACWithColonsByDefault('ab:cd:ef:01:02:03')\n    MACWithColonsByDefault('AB:CD:EF:01:02:03')\n    >>> str(MACWithColonsByDefault('ab-cd-ef-01-02-03'))\n    AB:CD:EF:01:02:03\n    >>> str(MACWithColonsByDefault(int(mac)))\n    01:02:03:04:05:06\n\nNote that appending the original ``formats``\ntuple to the new custom formats ensures that\nyou can still *parse* all the valid formats.\n\n\nGet as Bytes\n~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> mac = macaddress.MAC('61-62-63-04-05-06')\n    >>> bytes(mac)\n    b'abc\\x04\\x05\\x06'\n\n\nGet as Integer\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> mac = macaddress.MAC('01-02-03-04-05-06')\n    >>> int(mac)\n    1108152157446\n    >>> int(mac) == 0x010203040506\n    True\n\n\nGet the OUI\n~~~~~~~~~~~\n\nMost classes supplied by this module have the ``oui``\nattribute, which returns their first three bytes as\nan OUI object:\n\n.. code:: python\n\n    >>> macaddress.MAC('01:02:03:04:05:06').oui\n    OUI('01-02-03')\n\n\nCompare\n~~~~~~~\n\nEquality\n````````\n\nAll ``macaddress`` classes support equality comparisons:\n\n.. code:: python\n\n    >>> macaddress.OUI('01-02-03') == macaddress.OUI('01:02:03')\n    True\n    >>> macaddress.OUI('01-02-03') == macaddress.OUI('ff-ee-dd')\n    False\n    >>> macaddress.OUI('01-02-03') != macaddress.CDI32('01-02-03-04')\n    True\n    >>> macaddress.OUI('01-02-03') != macaddress.CDI32('01-02-03-04').oui\n    False\n\nOrdering\n````````\n\nAll ``macaddress`` classes support total\nordering. The comparisons are designed to\nintuitively sort identifiers that start\nwith the same bits next to each other:\n\n.. code:: python\n\n    >>> some_values = [\n    ...     MAC('ff-ee-dd-01-02-03'),\n    ...     MAC('ff-ee-00-99-88-77'),\n    ...     MAC('ff-ee-dd-01-02-04'),\n    ...     OUI('ff-ee-dd'),\n    ... ]\n    >>> for x in sorted(some_values):\n    ...     print(x)\n    FF-EE-00-01-02-03\n    FF-EE-DD\n    FF-EE-DD-01-02-03\n    FF-EE-DD-01-02-04\n\n\nDefine New Types\n~~~~~~~~~~~~~~~~\n\nThis library is designed to make it very easy\nto use other hardware address types that this\nlibrary does not currently define for you.\n\nFor example, if you want to handle IP-over-InfiniBand\nlink-layer addresses, all you need to define is:\n\n.. code:: python\n\n    class InfiniBand(macaddress.HWAddress):\n        size = 20 * 8  # size in bits; 20 octets\n\n        formats = (\n            'xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx-xx',\n            'xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx',\n            'xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx',\n            'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n            # or whatever formats you want to support\n        )\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mentalisttraceur/python-macaddress",
    "keywords": "",
    "license": "0BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macaddress",
    "package_url": "https://pypi.org/project/macaddress/",
    "platform": "",
    "project_url": "https://pypi.org/project/macaddress/",
    "project_urls": {
      "Homepage": "https://github.com/mentalisttraceur/python-macaddress"
    },
    "release_url": "https://pypi.org/project/macaddress/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Like ``ipaddress``, but for hardware identifiers such as MAC addresses.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15660174,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82841ed33ce1423513e4fdc3523fb2436c20caeb4437262c33c7986a7e21dfd0",
        "md5": "b1e19b2ee6db41b6e1912ee8f32b1006",
        "sha256": "95842607b5c0017dcd30684764ef185d547273f204194f6605c2e938c47103ce"
      },
      "downloads": -1,
      "filename": "macaddress-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1e19b2ee6db41b6e1912ee8f32b1006",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8004,
      "upload_time": "2021-06-11T04:14:03",
      "upload_time_iso_8601": "2021-06-11T04:14:03.468120Z",
      "url": "https://files.pythonhosted.org/packages/82/84/1ed33ce1423513e4fdc3523fb2436c20caeb4437262c33c7986a7e21dfd0/macaddress-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61c7be50e2ffec531f67d897887c5de224355eec4984e775890a28e5b4d55f0b",
        "md5": "6de39eb19b17194499846f5e2fc98c4e",
        "sha256": "b096494a99da4fced35b0bc49a2627d34b39f26588f90bac77e1bb019fd67d3a"
      },
      "downloads": -1,
      "filename": "macaddress-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6de39eb19b17194499846f5e2fc98c4e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8556,
      "upload_time": "2021-06-11T04:14:05",
      "upload_time_iso_8601": "2021-06-11T04:14:05.479811Z",
      "url": "https://files.pythonhosted.org/packages/61/c7/be50e2ffec531f67d897887c5de224355eec4984e775890a28e5b4d55f0b/macaddress-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}