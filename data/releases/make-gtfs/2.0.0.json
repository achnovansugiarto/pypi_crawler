{
  "info": {
    "author": "Alex Raichev",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Make GTFS\n***********\n.. image:: https://travis-ci.org/mrcagney/make_gtfs.svg?branch=master\n    :target: https://travis-ci.org/mrcagney/make_gtfs\n\nA Python 3.5+ library to build GTFS feeds from basic route information.\nInspired by Conveyal's `geom2gtfs <https://github.com/conveyal/geom2gtfs>`_.\nMakes naive timetables, but they are often good enough for preliminary work.\n\n\nInstallation\n=============\n``pipenv install make_gtfs``\n\n\nUsage\n=====\nUse as a library, or use from the command line by typing ``make_gtfs --help`` and following the instructions.\n\nMake GTFS uses the following files to build a GTFS feed.\n\n- ``frequencies.csv``: (required) A CSV file containing route frequency\n  information. The CSV file contains the columns\n\n  - ``route_short_name``: (required) String. A unique short name\n    for the route, e.g. '51X'\n  - ``route_long_name``: (required) String. Full name of the route\n    that is more descriptive than ``route_short_name``\n  - ``route_type``: (required) Integer. The\n    `GTFS type of the route <https://developers.google.com/transit/gtfs/reference/#routestxt>`_\n  - ``service_window_id`` (required): String. A service window ID\n    for the route taken from the file ``service_windows.csv``\n  - ``direction``: (required) Integer 0, 1, or 2. Indicates\n    whether the route travels in GTFS direction 0, GTFS direction\n    1, or in both directions.\n    In the latter case, trips will be created that travel in both\n    directions along the route's path, each direction operating at\n    the given frequency.  Otherwise, trips will be created that\n    travel in only the given direction.\n  - ``frequency`` (required): Integer. The frequency of the route\n    during the service window in vehicles per hour.\n  - ``speed``:  (optional) Float. The speed of the route in\n    kilometers per hour\n  - ``shape_id``: (required) String. A shape ID that is listed in\n    ``shapes.geojson`` and corresponds to the linestring of the\n    (route, direction, service window) tuple.\n\n- ``meta.csv``: (required) A CSV file containing network metadata.\n  The CSV file contains the columns\n\n  - ``agency_name``: (required) String. The name of the transport\n    agency\n  - ``agency_url``: (required) String. A fully qualified URL for\n    the transport agency\n  - ``agency_timezone``: (required) String. Timezone where the\n    transit agency is located. Timezone names never contain the\n    space character but may contain an underscore. Refer to\n    `http://en.wikipedia.org/wiki/List_of_tz_zones <http://en.wikipedia.org/wiki/List_of_tz_zones>`_ for a list of valid values\n  - ``start_date``, ``end_date`` (required): Strings. The start\n    and end dates for which all this network information is valid\n    formated as YYYYMMDD strings\n  - ``default_route_speed``: (required) Float. Default speed in\n    kilometers per hour to assign to routes with no ``speed``\n    entry in the file ``routes.csv``\n\n- ``service_windows.csv``: (required) A CSV file containing service window\n  information.\n  A *service window* is a time interval and a set of days of the\n  week during which all routes have constant service frequency,\n  e.g. Saturday and Sunday 07:00 to 09:00.\n  The CSV file contains the columns\n\n  - ``service_window_id``: (required) String. A unique identifier\n    for a service window\n  - ``start_time``, ``end_time``: (required) Strings. The start\n    and end times of the service window in HH:MM:SS format where\n    the hour is less than 24\n  - ``monday``, ``tuesday``, ``wednesday``, ``thursday``,\n    ``friday``, ``saturday``, ``sunday`` (required): Integer 0\n    or 1. Indicates whether the service is active on the given day\n    (1) or not (0)\n\n- ``shapes.geojson``: (required) A GeoJSON file containing route shapes.\n  The file consists of one feature collection of LineString\n  features, where each feature's properties contains at least the\n  attribute ``shape_id``, which links the route's shape to the\n  route's information in ``routes.csv``.\n\n- ``stops.csv``: (optional) A CSV file containing all the required\n  and optional fields of ``stops.txt`` in\n  `the GTFS <https://developers.google.com/transit/gtfs/reference/#stopstxt>`_\n\n\n\nAlgorithm\n=========\nBasically,\n\n- ``routes.txt`` is created from ``frequencies.csv``\n- ``agency.txt`` is created from ``meta.csv``\n- ``calendar.txt`` is created in a dumb way with exactly one all-week service that applies to all trips\n- ``shapes.txt`` is created from ``shapes.geojson``\n- ``stops.txt`` is created from ``stops.csv`` if given.\n  Otherwise it is created by making a pair of stops for each shape, one stop at each endpoint of the shape and then deleting stops with duplicate coordinates. Note that this yields one stop for shapes that are loops.\n- ``trips.txt`` and ``stop_times.txt`` are created by taking each route, service window, and direction, and running a set of trips starting on the hour and operating at the route's speed and frequency specified for that service window.\n  If the route direction is 2, then two sets of trips in opposing directions will be created, each operating at the route's frequency.\n  Assign stops to each trip as follows.\n  Collect all stops in the built file ``stops.txt`` that are within a fixed distance of the traffic side (e.g. the right hand side for USA agency timezones and the left hand side for New Zealand agency timezones) of the trip shape.\n  If the trip has no nearby stops, then do not make stop times for that trip.\n\n\nExamples\n=========\nSee ``data/auckland`` for example files and play with the Jupyter notebook at ``ipynb/examples.ipynb``.\n\n\nDocumentation\n===============\nUnder ``docs/`` or view it as HTML `here <https://rawgit.com/araichev/make_gtfs/master/docs/_build/singlehtml/index.html>`_.\n\n\nAuthors\n========\n- Alex Raichev, 2014-09\n\n\nNotes\n======\n- Development status is Alpha\n- Uses semantic versioning\n- Thanks to `MRCagney <https://mrcagney.com>`_ for funding this project\n\n\nChanges\n========\n\n2.0.0, 2018-05-28\n------------------\n- Extended to handle optional input stops\n- Wrote ProtoFeed validation\n- Modularized code more\n\n\n1.0.0, 2018-05-22\n------------------\n- Restructured code and used GTFSTK, Click, Pytest, Pipenv\n\n\n0.6.1, 2015-03-05\n-------------------\n- Fixed a bug in ``create_stop_times()`` that crashed when given a zero frequency.\n\n\n0.6, 2015-01-29\n-------------------\n- Added direction field and renamed ``routes.csv`` to ``frequencies.csv``.\n- Simplified the code some too.\n\n\n0.5.1, 2015-01-28\n-------------------\n- Eliminated stops and trips for routes that have no linestrings\n\n\n0.5, 2015-01-27\n-----------------\n- Changed from headways to frequencies and replaced ``config.json`` with CSV files\n\n\n0.4, 2014-10-09\n------------------\n- Changed ``config.json`` spec to account for active days\n\n\n0.3, 2014-09-29\n-----------------\n- Finished writing first set of tests and packaged\n\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mrcagney/make_gtfs",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "make-gtfs",
    "package_url": "https://pypi.org/project/make-gtfs/",
    "platform": "",
    "project_url": "https://pypi.org/project/make-gtfs/",
    "project_urls": {
      "Homepage": "https://github.com/mrcagney/make_gtfs"
    },
    "release_url": "https://pypi.org/project/make-gtfs/2.0.0/",
    "requires_dist": [
      "gtfstk (>=9.1.0)",
      "pandas (<0.23.0)",
      "geopandas (>=0.3.0)",
      "Shapely (>=1.6.4)",
      "utm (>=0.4.2)",
      "click (>=6.7)"
    ],
    "requires_python": "",
    "summary": "A Python 3.5+ library to make GTFS feeds from simpler files",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15693172,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55f4cd87e345ce5e30c5e7a9726311b186fd51e5a3c37bdc85c774b5617affb0",
        "md5": "eaf9110e6380fe3340490af2f8254168",
        "sha256": "1f5ae69b91ee5443f59252c105b039e4a65540ed0a74f3d8e692f9751b04f6d7"
      },
      "downloads": -1,
      "filename": "make_gtfs-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eaf9110e6380fe3340490af2f8254168",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16672,
      "upload_time": "2018-05-28T00:00:35",
      "upload_time_iso_8601": "2018-05-28T00:00:35.317463Z",
      "url": "https://files.pythonhosted.org/packages/55/f4/cd87e345ce5e30c5e7a9726311b186fd51e5a3c37bdc85c774b5617affb0/make_gtfs-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d67c9d6007102fa3a62286e229be3f52f82cab070417947194993ec8d0e2f30f",
        "md5": "214579cf82ca2b4834261f081bcc50c8",
        "sha256": "970b51bf8b92eed600a1f2785bbaed563bdd21e6d31a1dd7f08cc948bee01cfd"
      },
      "downloads": -1,
      "filename": "make_gtfs-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "214579cf82ca2b4834261f081bcc50c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16283,
      "upload_time": "2018-05-28T00:00:36",
      "upload_time_iso_8601": "2018-05-28T00:00:36.871602Z",
      "url": "https://files.pythonhosted.org/packages/d6/7c/9d6007102fa3a62286e229be3f52f82cab070417947194993ec8d0e2f30f/make_gtfs-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}