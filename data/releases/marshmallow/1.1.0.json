{
  "info": {
    "author": "Steven Loria",
    "author_email": "sloria1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "********************************************\nmarshmallow: simplified object serialization\n********************************************\n\n.. image:: https://badge.fury.io/py/marshmallow.png\n    :target: http://badge.fury.io/py/marshmallow\n    :alt: Latest version\n\n.. image:: https://travis-ci.org/sloria/marshmallow.png?branch=master\n    :target: https://travis-ci.org/sloria/marshmallow\n    :alt: Travis-CI\n\nHomepage: http://marshmallow.rtfd.org/\n\n**marshmallow** is an ORM/ODM/framework-agnostic library for converting complex datatypes, such as objects, to and from native Python datatypes.\n\n.. code-block:: python\n\n    from datetime import date\n    from marshmallow import Schema, fields, pprint\n\n    class ArtistSchema(Schema):\n        name = fields.Str()\n\n    class AlbumSchema(Schema):\n        title = fields.Str()\n        release_date = fields.Date()\n        artist = fields.Nested(ArtistSchema)\n\n    bowie = dict(name='David Bowie')\n    album = dict(artist=bowie, title='Hunky Dory', release_date=date(1971, 12, 17))\n\n    schema = AlbumSchema()\n    result = schema.dump(album)\n    pprint(result.data, indent=2)\n    # { 'artist': {'name': 'David Bowie'},\n    #   'release_date': '1971-12-17',\n    #   'title': 'Hunky Dory'}\n\n\nIn short, marshmallow schemas can be used to:\n\n- **Validate** input data.\n- **Deserialize** input data to app-level objects.\n- **Serialize** app-level objects to primitive Python types. The serialized objects can then be rendered to standard formats such as JSON for use in an HTTP API.\n\nGet It Now\n==========\n\n::\n\n    $ pip install -U marshmallow\n\n\nDocumentation\n=============\n\nFull documentation is available at http://marshmallow.rtfd.org/ .\n\n\nRequirements\n============\n\n- Python >= 2.6 or >= 3.3\n\nmarshmallow has no external dependencies outside of the Python standard library, although `python-dateutil <https://pypi.python.org/pypi/python-dateutil>`_ is recommended for robust datetime deserialization.\n\n\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/sloria/marshmallow/blob/master/LICENSE>`_ file for more details.\n\n\nChangelog\n---------\n\n1.1.0 (2014-12-02)\n++++++++++++++++++\n\nFeatures:\n\n- Add ``Schema.validate`` method which validates input data against a schema. Similar to ``Schema.load``, but does not call ``make_object`` and only returns the errors dictionary.\n- Add several validation functions to the ``validate`` module. Thanks @philtay.\n- Store field name and instance on exceptions raised in ``strict`` mode.\n\nBug fixes:\n\n- Fix serializing dictionaries when field names are methods of ``dict`` (e.g. ``\"items\"``). Thanks @rozenm for reporting.\n- If a Nested field is passed ``many=True``, ``None`` serializes to an empty list. Thanks @nickretallack for reporting.\n- Fix behavior of ``many`` argument passed to ``dump`` and ``load``. Thanks @svenstaro for reporting and helping with this.\n- Fix ``skip_missing`` behavior for ``String`` and ``List`` fields. Thanks @malexer for reporting.\n- Fix compatibility with python-dateutil 2.3.\n- More consistent error messages across DateTime, TimeDelta, Date, and Time fields.\n\nDocs:\n\n- Update Flask and Peewee examples.\n\n1.0.1 (2014-11-18)\n++++++++++++++++++\n\nHotfix release.\n\n- Ensure that errors dictionary is correctly cleared on each call to Schema.dump and Schema.load.\n\n1.0.0 (2014-11-16)\n++++++++++++++++++\n\nAdds new features, speed improvements, better error handling, and updated documentation.\n\n- Add ``skip_missing`` ``class Meta`` option.\n- A field's ``default`` may be a callable.\n- Allow accessor function to be configured via the ``Schema.accessor`` decorator or the ``__accessor__`` class member.\n- ``URL`` and ``Email`` fields are validated upon serialization.\n- ``dump`` and ``load`` can receive the ``many`` argument.\n- Move a number of utility functions from fields.py to utils.py.\n- More useful ``repr`` for ``Field`` classes.\n- If a field's default is ``fields.missing`` and its serialized value is ``None``, it will not be included in the final serialized result.\n- Schema.dumps no longer coerces its result to a binary string on Python 3.\n- *Backwards-incompatible*: Schema output is no longer an ``OrderedDict`` by default. If you want ordered field output, you must explicitly set the ``ordered`` option to ``True``.\n- *Backwards-incompatible*: `error` parameter of the `Field` constructor is deprecated. Raise a `ValidationError` instead.\n- Expanded test coverage.\n- Updated docs.\n\n1.0.0-a (2014-10-19)\n++++++++++++++++++++\n\nMajor reworking and simplification of the public API, centered around support for deserialization, improved validation, and a less stateful ``Schema`` class.\n\n* Rename ``Serializer`` to ``Schema``.\n* Support for deserialization.\n* Use the ``Schema.dump`` and ``Schema.load`` methods for serializing and deserializing, respectively.\n* *Backwards-incompatible*: Remove ``Serializer.json`` and ``Serializer.to_json``. Use ``Schema.dumps`` instead.\n* Reworked fields interface.\n* *Backwards-incompatible*: ``Field`` classes implement ``_serialize`` and ``_deserialize`` methods. ``serialize`` and ``deserialize`` comprise the public API for a ``Field``. ``Field.format`` and ``Field.output`` have been removed.\n* Add ``exceptions.ForcedError`` which allows errors to be raised during serialization (instead of storing errors in the ``errors`` dict).\n* *Backwards-incompatible*: ``DateTime`` field serializes to ISO8601 format by default (instead of RFC822).\n* *Backwards-incompatible*: Remove ``Serializer.factory`` method. It is no longer necessary with the ``dump`` method.\n* *Backwards-incompatible*: Allow nesting a serializer within itself recursively. Use ``exclude`` or ``only`` to prevent infinite recursion.\n* *Backwards-incompatible*: Multiple errors can be stored for a single field. The errors dictionary returned by ``load`` and ``dump`` have lists of error messages keyed by field name.\n* Remove ``validated`` decorator. Validation occurs within ``Field`` methods.\n* ``Function`` field raises a ``ValueError`` if an uncallable object is passed to its constructor.\n* ``Nested`` fields inherit context from their parent.\n* Add ``Schema.preprocessor`` and ``Schema.validator`` decorators for registering preprocessing and schema-level validation functions respectively.\n* Custom error messages can be specified by raising a ``ValidationError`` within a validation function.\n* Extra keyword arguments passed to a Field are stored as metadata.\n* Fix ordering of field output.\n* Fix behavior of the ``required`` parameter on ``Nested`` fields.\n* Fix serializing keyed tuple types (e.g. ``namedtuple``) with ``class Meta`` options.\n* Fix default value for ``Fixed`` and ``Price`` fields.\n* Fix serialization of binary strings.\n* ``Schemas`` can inherit fields from non-``Schema`` base classes (e.g. mixins). Also, fields are inherited according to the MRO (rather than recursing over base classes). Thanks Josh Carp.\n* Add ``Str``, ``Bool``, and ``Int`` field class aliases.\n\n0.7.0 (2014-06-22)\n++++++++++++++++++\n\n* Add ``Serializer.error_handler`` decorator that registers a custom error handler.\n* Add ``Serializer.data_handler`` decorator that registers data post-processing callbacks.\n* *Backwards-incompatible*: ``process_data`` method is deprecated. Use the ``data_handler`` decorator instead.\n* Fix bug that raised error when passing ``extra`` data together with ``many=True``. Thanks Joe Alcorn for reporting.\n* If ``required=True`` validation is violated for a given ``Field``, it will raise an error message that is different from the message specified by the ``error`` argument. Thanks Anders Steinlein.\n* More generic error message raised when required field is missing.\n* ``validated`` decorator should only wrap a ``Field`` class's ``output`` method.\n\n0.6.0 (2014-06-03)\n++++++++++++++++++\n\n* Fix bug in serializing keyed tuple types, e.g. ``namedtuple`` and ``KeyedTuple``.\n* Nested field can load a serializer by its class name as a string. This makes it easier to implement 2-way nesting.\n* Make Serializer.data override-able.\n\n0.5.5 (2014-05-02)\n++++++++++++++++++\n\n* Add ``Serializer.factory`` for creating a factory function that returns a Serializer instance.\n* ``MarshallingError`` stores its underlying exception as an instance variable. This is useful for inspecting errors.\n* ``fields.Select`` is aliased to ``fields.Enum``.\n* Add ``fields.__all__`` and ``marshmallow.__all__`` so that the modules can be more easily extended.\n* Expose ``Serializer.OPTIONS_CLASS`` as a class variable so that options defaults can be overridden.\n* Add ``Serializer.process_data`` hook that allows subclasses to manipulate the final output data.\n\n0.5.4 (2014-04-17)\n++++++++++++++++++\n\n* Add ``json_module`` class Meta option.\n* Add ``required`` option to fields . Thanks `@DeaconDesperado <http://github.com/DeaconDesperado>`_.\n* Tested on Python 3.4 and PyPy.\n\n0.5.3 (2014-03-02)\n++++++++++++++++++\n\n* Fix ``Integer`` field default. It is now ``0`` instead of ``0.0``. Thanks `@kalasjocke <http://github.com/kalasjocke>`_.\n* Add ``context`` param to ``Serializer``. Allows accessing arbitrary objects in ``Function`` and ``Method`` fields.\n* ``Function`` and ``Method`` fields raise ``MarshallingError`` if their argument is uncallable.\n\n\n0.5.2 (2014-02-10)\n++++++++++++++++++\n\n* Enable custom field validation via the ``validate`` parameter.\n* Add ``utils.from_rfc`` for parsing RFC datestring to Python datetime object.\n\n0.5.1 (2014-02-02)\n++++++++++++++++++\n\n* Avoid unnecessary attribute access in ``utils.to_marshallable_type`` for improved performance.\n* Fix RFC822 formatting for localized datetimes.\n\n0.5.0 (2013-12-29)\n++++++++++++++++++\n\n* Can customize validation error messages by passing the ``error`` parameter to a field.\n* *Backwards-incompatible*: Rename ``fields.NumberField`` -> ``fields.Number``.\n* Add ``fields.Select``. Thanks @ecarreras.\n* Support nesting a Serializer within itself by passing ``\"self\"`` into ``fields.Nested`` (only up to depth=1).\n* *Backwards-incompatible*: No implicit serializing of collections. Must set ``many=True`` if serializing to a list. This ensures that marshmallow handles singular objects correctly, even if they are iterable.\n* If Nested field ``only`` parameter is a field name, only return a single value for the nested object (instead of a dict) or a flat list of values.\n* Improved performance and stability.\n\n0.4.1 (2013-12-01)\n++++++++++++++++++\n\n* An object's ``__marshallable__`` method, if defined, takes precedence over ``__getitem__``.\n* Generator expressions can be passed to a serializer.\n* Better support for serializing list-like collections (e.g. ORM querysets).\n* Other minor bugfixes.\n\n0.4.0 (2013-11-24)\n++++++++++++++++++\n\n* Add ``additional`` `class Meta` option.\n* Add ``dateformat`` `class Meta` option.\n* Support for serializing UUID, date, time, and timedelta objects.\n* Remove ``Serializer.to_data`` method. Just use ``Serialize.data`` property.\n* String field defaults to empty string instead of ``None``.\n* *Backwards-incompatible*: ``isoformat`` and ``rfcformat`` functions moved to utils.py.\n* *Backwards-incompatible*: Validation functions moved to validate.py.\n* *Backwards-incompatible*: Remove types.py.\n* Reorder parameters to ``DateTime`` field (first parameter is dateformat).\n* Ensure that ``to_json`` returns bytestrings.\n* Fix bug with including an object property in ``fields`` Meta option.\n* Fix bug with passing ``None`` to a serializer.\n\n0.3.1 (2013-11-16)\n++++++++++++++++++\n\n* Fix bug with serializing dictionaries.\n* Fix error raised when serializing empty list.\n* Add ``only`` and ``exclude`` parameters to Serializer constructor.\n* Add ``strict`` parameter and option: causes Serializer to raise an error if invalid data are passed in, rather than storing errors.\n* Updated Flask + SQLA example in docs.\n\n0.3.0 (2013-11-14)\n++++++++++++++++++\n\n* Declaring Serializers just got easier. The *class Meta* paradigm allows you to specify fields more concisely. Can specify ``fields`` and ``exclude`` options.\n* Allow date formats to be changed by passing ``format`` parameter to ``DateTime`` field constructor. Can either be ``\"rfc\"`` (default), ``\"iso\"``, or a date format string.\n* More useful error message when declaring fields as classes (instead of an instance, which is the correct usage).\n* Rename MarshallingException -> MarshallingError.\n* Rename marshmallow.core -> marshmallow.serializer.\n\n0.2.1 (2013-11-12)\n++++++++++++++++++\n\n* Allow prefixing field names.\n* Fix storing errors on Nested Serializers.\n* Python 2.6 support.\n\n0.2.0 (2013-11-11)\n++++++++++++++++++\n\n* Field-level validation.\n* Add ``fields.Method``.\n* Add ``fields.Function``.\n* Allow binding of extra data to a serialized object by passing the ``extra`` param when initializing a ``Serializer``.\n* Add ``relative`` paramater to ``fields.Url`` that allows for relative URLs.\n\n0.1.0 (2013-11-10)\n++++++++++++++++++\n\n* First release.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sloria/marshmallow",
    "keywords": "serialization,rest,json,api,marshal,marshalling,deserialization,validation,schema",
    "license": "Copyright 2014 Steven Loria\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "marshmallow",
    "package_url": "https://pypi.org/project/marshmallow/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/marshmallow/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/sloria/marshmallow"
    },
    "release_url": "https://pypi.org/project/marshmallow/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A lightweight library for converting complex datatypes to and from native Python datatypes.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16966409,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31a473e8471b649a3aa906ce790e5f9a2e434e7582d30bc32c7e83553cd8be7d",
        "md5": "4ad4f3cf98f06110947e2ad629ecd007",
        "sha256": "d45cd27a2952b7a43ace73e9b4518e2497353edf0d51b4256d0cbad88b68e47d"
      },
      "downloads": -1,
      "filename": "marshmallow-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ad4f3cf98f06110947e2ad629ecd007",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 47421,
      "upload_time": "2014-12-03T03:17:22",
      "upload_time_iso_8601": "2014-12-03T03:17:22.043926Z",
      "url": "https://files.pythonhosted.org/packages/31/a4/73e8471b649a3aa906ce790e5f9a2e434e7582d30bc32c7e83553cd8be7d/marshmallow-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de088ec6e4ac971255e8681f6fd0c6b66aa8dd23a986f0b735ddcacb5fc52782",
        "md5": "fd290da0acd22e9dbc1dff0a5de157c6",
        "sha256": "ae88b6ef4fc18877792316419d6f0edff8e9bd13f7d0874c59ce4ca8f9c6a158"
      },
      "downloads": -1,
      "filename": "marshmallow-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fd290da0acd22e9dbc1dff0a5de157c6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38403,
      "upload_time": "2014-12-03T03:17:20",
      "upload_time_iso_8601": "2014-12-03T03:17:20.145339Z",
      "url": "https://files.pythonhosted.org/packages/de/08/8ec6e4ac971255e8681f6fd0c6b66aa8dd23a986f0b735ddcacb5fc52782/marshmallow-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": [
    {
      "aliases": [
        "CVE-2018-17175",
        "GHSA-9q2p-fj49-vpxj"
      ],
      "details": "In the marshmallow library before 2.15.1 and 3.x before 3.0.0b9 for Python, the schema \"only\" option treats an empty list as implying no \"only\" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the \"only\" option, and there is a user role that produces an empty value for \"only\").",
      "fixed_in": [
        "2.15.1",
        "3.0.0b9"
      ],
      "id": "PYSEC-2018-67",
      "link": "https://osv.dev/vulnerability/PYSEC-2018-67",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    },
    {
      "aliases": [
        "CVE-2018-17175"
      ],
      "details": "In the marshmallow library before 2.15.1 and 3.x before 3.0.0b9 for Python, the schema \"only\" option treats an empty list as implying no \"only\" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the \"only\" option, and there is a user role that produces an empty value for \"only\").",
      "fixed_in": [
        "2.15.1"
      ],
      "id": "GHSA-9q2p-fj49-vpxj",
      "link": "https://osv.dev/vulnerability/GHSA-9q2p-fj49-vpxj",
      "source": "osv",
      "summary": null,
      "withdrawn": null
    }
  ]
}