{
  "info": {
    "author": "Edward Guan",
    "author_email": "eguan@logonlabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# LogonLabs Python\n\nThe official LogonLabs Python library.\n## Download\n\n    pip install -i logonlabs-python\n## LogonLabs API\n\n- Prior to coding, some configuration is required at https://logonlabs.com/app/#app-settings\n\n- For the full Developer Documentation please visit: https://logonlabs.com/docs/api/\n\n---\n### Instantiating a new client\n\n- Your `APP_ID` can be found in [App Settings](https://logonlabs.com/app/#/app-settings).\n- `APP_SECRETS` are configured [here](https://logonlabs.com/app/#/app-secrets).\n- The `LOGONLABS_API_ENDPOINT` should be set to `https://api.logonlabs.com`.\n\nCreate a new instance of `LogonClient`.  \n```python\nfrom logonlabs.client import Logonlabs\n\nlogonClient = Logonlabs('{APP_ID}', '{APP_SECRETS}', '{LOGONLABS_API_ENDPOINT}')\n\n```\n---\n### SSO Login QuickStart\nThe StartLogin function in the JS library begins the LogonLabs managed SSO process.\n>Further documentation on starting the login process via our JavaScript client can be found at our GitHub page [here](https://github.com/logonlabs/logonlabs-js). \nThe following example demonstrates what to do once the `callback Url` has been used by our system to redirect the user back to your page:\n```python\nrequest_headers = self.headers\ntoken = request_headers[\"token\"]\nresponse = logonClient.validateLogin(token)\ndata = response.json()\nif data['event_success']:\n    #success\n```\n---\n### Python Only Workflow\nThe following workflow is required if you're using Python to process all transaction requests.  If this does not apply to you, please refer to the SSO Login QuickStart section.\n#### Step 1 - StartLogin\nThis call begins the LogonLabs managed SSO process.  The `client_data` property is optional and is used to pass any data that is required after validating the request.  The `client_encryption_key` property is optionally passed if the application requires encrypting any data that is passed between the front and back ends of its infrastructure. The `tags` property is an Array of type Tag which is a simple object representing a key/value pair.\n```python\n\nidentity_provider = '{string}' # one of the following ['microsoft','google','facebook','linkedin','slack','twitter','github','quickbooks','onelogin']\nidentity_provider_id = '{string}' # require identity_provider or identity_provider_id\nclient_data = '{string}'\nclient_encryption_key = \"qbTRzCvUju\"\ntags = [{'example-key': 'example-value'}]\nredirect = False\nresponse = logonClient.startLogin(identity_provider, identity_provider_id, \"emailAddress\", client_data, client_encryption_key, tags)\nredirect_url = response.url\n```\n\nThe `redirect_url` property returned should be redirected to by the application.  Upon submitting their credentials, users will be redirected to the `callback_url` set within the application settings at https://logonlabs.com/app/#/app-settings.\n&nbsp;\n#### Step 2 - ValidateLogin\nThis method is used to validate the results of the login attempt.  `query_token` corresponds to the query parameter with the name `token` appended to the callback url specified for your app.\nThe response contains all details of the login and the user has now completed the SSO workflow.  If there is any additional information to add, UpdateEvent can be called on the `event_id` returned.\n```python\n\nresponse = logonClient.validateLogin('{token}')\ndata = response.json()\nif data['event_success']:\n    #success\nelse:\n    validation_details = data['validation_details']\n    if validation_details['auth_validation'] == 'Fail':\n        #authentication with identity provider failed\n\n    if validation_details['email_match_validation'] == 'Fail':\n        #email didn't match the one provided to StartLogin\n\n    if validation_details['ip_validation'] == 'Fail' or validation_details['geo_validation'] == 'Fail' or validation_details['time_validation'] == 'Fail':\n        #validation failed via restriction settings for the app\n```\n---\n### Events\nThe CreateEvent method can be used to create events that are outside of our SSO workflows.  UpdateEvent can be used to update any events made either by CreateEvent or by our SSO login.\n```python\n\nlocal_validation = '{string}' # one of the following ['Pass', 'Fail', 'NotApplicable']\ntags = [{'example-key': 'example-value'}]\nevent_type = '{string}' # one of the following ['LocalLogin', 'LocalLogout']\n\nresponse = logonClient.createEvent(event_type, True, local_validation, \"email_address\", \"ip_address\", \"user_agent\", \"first_name\", \"last_name\", tags)\ndata = response.json()\nevent_id = data['event_id']\n\nlocal_validation = 'Fail'\ntags = [{'failure-field': 'detailed reason for failure'}]\nresponse = logonClient.updateEvent(event_id, local_validation, tags)\n```\n---\n### Helper Methods\n#### GetProviders\nThis method is used to retrieve a list of all providers enabled for the application.\nIf an email address is passed to the method, it will return the list of providers available for that email domain.\n```python\nresponse = logonClient.getProviders(\"emailAddress\")\ndata = response.json()\nidentity_providers = data['identity_providers']\nfor provider in identity_providers:\n    #each individual providers available for this email address\n\n```\n#### Encrypt / Decrypt\nThe Python SDK has built in methods for encrypting strings using AES encryption.  Use a value for your encryption key that only your client will know how to decrypt \n```python\n\nclient_encryption_key = \"qbTRzCvUju\"\nvalue = \"string to be encrypted\"\nencrypted_string = logonClient.encrypt(value, client_encryption_key)\n\ndecrypted_string = logonClient.decrypt(encrypted_string, client_encryption_key)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/logonlabs/logonlabs-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logonlabs-python",
    "package_url": "https://pypi.org/project/logonlabs-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/logonlabs-python/",
    "project_urls": {
      "Homepage": "https://github.com/logonlabs/logonlabs-python"
    },
    "release_url": "https://pypi.org/project/logonlabs-python/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Logonlabs Python package",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7328480,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd21ca42452ef570aec4ae69c99c218118093ab87b17a89ce80e37905da1cfed",
        "md5": "3b656bfba5069fd05485a2defb4b5d95",
        "sha256": "519561b5e43d5e6165380a9704b8128c48870361a6aca4237c1af59d35e658d7"
      },
      "downloads": -1,
      "filename": "logonlabs_python-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b656bfba5069fd05485a2defb4b5d95",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6088,
      "upload_time": "2019-07-09T18:44:20",
      "upload_time_iso_8601": "2019-07-09T18:44:20.538816Z",
      "url": "https://files.pythonhosted.org/packages/fd/21/ca42452ef570aec4ae69c99c218118093ab87b17a89ce80e37905da1cfed/logonlabs_python-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}