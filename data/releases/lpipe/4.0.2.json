{
  "info": {
    "author": "Charlie Mathews",
    "author_email": "cmathews@mintel.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# lpipe\n[![PyPI version](https://img.shields.io/pypi/v/lpipe.svg)](https://pypi.org/project/lpipe/) [![TravisCI build status](https://travis-ci.com/mintel/lpipe.svg?branch=master)](https://travis-ci.com/github/mintel/lpipe) [![Code Coverage](https://img.shields.io/codecov/c/github/mintel/lpipe.svg)](https://codecov.io/gh/mintel/lpipe)\n\n**lpipe** provides a simple set of tools for writing clearly defined, multi-function AWS Lambdas in Python.\n\nThis project was borne out of a desire to support directed-graph workflows on FAAS. **lpipe** is designed to handle batched events from CloudWatch, Kinesis, or SQS.\n\n### Philosophy\n\n`lpipe` exists to consolidate the boilerplate required for writing high quality Lambdas in Python.\n\nFeatures include:\n* Batch message handling\n* Error handling and capture - distinguish exceptions which should poison the queue\n* Validate messages against function signatures\n* Automatically handle partial failures in a batch of messages (SQS)\n* Create directed graph workflows with a combination of one or more lambdas (*optional*)\n\n\n## Getting Started\n\n#### Basic Example\n\n```python\nimport lpipe\n\ndef test_func(foo: str, **kwargs):\n\tpass\n\ndef lambda_handler(event, context):\n    return lpipe.process_event(\n        event=event,\n        context=context,\n        call=test_func,\n        queue_type=lpipe.QueueType.SQS,\n    )\n```\n\nThis lambda could now be triggered by an SQS queue with the following message.\n\n```python\n{\n  \"foo\": \"bar\",\n}\n```\n\n\n\n#### Optionally, create a directed-graph workflow\n\nYou may also split your lambda into reusable chunks by defining paths.\n\n```python\ndef lambda_handler(event, context):\n    return lpipe.process_event(\n        event=event,\n        context=context,\n        paths={\n            \"EXAMPLE\": [test_func]\n        },\n        queue_type=lpipe.QueueType.SQS,\n    )\n```\n\nTrigger with...\n\n```python\n{\n  \"path\": \"EXAMPLE\",\n  \"kwargs\": {\n    \"foo\": \"bar\",\n  }\n}\n```\n\nThere are two tools which enable a directed workflow.\n\n* [Actions](#actions): A path may be defined as a `List[Action]` containing any functions, paths, or queues\n\n* [Payloads](#payloads): Your function may return a `Payload` or `List[Payload]` which will be sequentially executed before continuing\n\nSee the linked sections in \"Advanced\" for more details.\n\n\n\n## Message Structure\n\nThere are two message formats you will encounter.\n\n#### Basic\n\nlpipe will expect this structure if you call it via...\n\n* `process_event(call: FunctionType)`\n* `process_event(paths: dict, default_path: Union[str, Enum])`\n\n```json\n{\n  \"foo\": \"bar\",\n}\n```\n\n#### Directed Graph\n\nlpipe will expect this structure if you call it via...\n\n* `process_event(paths: dict)`\n\n```json\n{\n  \"path\": \"EXAMPLE\",\n  \"kwargs\": {\n    \"foo\": \"bar\",\n  }\n}\n```\n\n\n\n## Batch Processing\n\n### SQS\n\nWhen processing messages from an SQS queue, we will wait to raise any errors until all the messages in a batch are tried.\n* Successful Records will be deleted from the invoking queue\n* Failed records will raise an exception which ultimately triggers the SQS redrive policy.\n\n### Everything else...\n\n**If you're using any other invocation source, please consider setting your batch size to 1.**\n\n\n\n## Handling Errors\n\n`lpipe` relies on exceptions for flow control. Your code must raise exceptions that inherit from one of two classes.\n\n### `FailCatastrophically`\n\nRaise this if you want your lambda to error out. This will result in poisoned records persisting on the queue if you're not careful. Only use it if you have CRITICAL data in the queue *or* if you hit an error state while setting up. This will trigger your redrive or DLQ policy.\n\n| Exception | Description |\n| - | - |\n| InvalidConfigurationError(FailCatastrophically) | Raised automatically if your lambda is misconfigured. |\n\n### `FailButContinue`\n\nRaise this to log an exception and, optionally, send it to sentry, but continue processing more records. **This will treat your record as poisoned and will drop it.**\n\n| Exception | Description |\n| - | - |\n| InvalidPathError(FailButContinue) | Raised automatically if you use a Path that was not defined. |\n| InvalidPayloadError(FailButContinue) | Raised automatically if your lambda receives a message that is malformed or invalid. |\n\n### Everything else...\n\nAny errors that don't inherit from one of the two classes above will be logged and captured at sentry (if initialized.) Your record will then be dropped to prevent a poisoned queue.\n\n\n\n## Advanced\n\n#### Paths\n\nA path is defined by an enumerated name and a list of actions or functions.\n\n##### Example\n\n```python\nfrom enum import Enum\nfrom lpipe import Action\n\nclass Path(Enum):\n\tDO_THING = 1\n\nPATHS = {\n    Path.DO_THING: [\n        Action(required_params=[], functions=[], paths=[]),\n      \tAction(required_params=[], functions=[], paths=[]),\n    ],\n}\n```\n\n`lpipe` can also generate the enumeration for you automatically...\n\n```python\nPATHS = {\n    \"DO_THING\": [\n        Action(required_params=[], functions=[], paths=[]),\n      \tAction(required_params=[], functions=[], paths=[]),\n    ],\n}\n```\n\nA list of functions is also an acceptable path definition.\n```python\nPATHS = {\n    \"DO_THING\": [my_function, my_second_function],\n}\n```\n\n\n\n#### Actions\n\n```python\nlpipe.Action(required_params, functions, paths)\n```\n\n| Argument          | Type | Description                     |\n| ----------------- | ---- | ------------------------------- |\n| `required_params` | `list` | (optional if functions is set, required if ONLY paths is set) A list of kwarg keys to expect. |\n| `functions` | `list` | (optional if paths is set) A list of functions to run with the provided kwargs. |\n| `paths` | `list` | (optional if functions is set) A list of path names (to be run in the current lambda instance) or Queues to push messages to. |\n| `include_all_params` | `bool` | If true, pass all kwargs to every function/path in this Action. |\n\n##### Example\n\n```python\nfrom lpipe import Action\n\nAction(\n    required_params=[\"name\", \"email\"],\n    functions=[subscribe_to_pewdiepie],\n    paths=[SEND_MERCH]\n)\n```\n\nUsing this action would first call `subscribe_to_pewdiepie(name, email)` then try to run the `SEND_MERCH` path.\n\n`required_params` [is optional](#params) if you define type hints on your function.\n```python\ndef subscribe_to_pewdiepie(name: str, email: str, **kwargs):\n\tpass\n\nAction(\n    functions=[subscribe_to_pewdiepie],\n    paths=[SEND_MERCH]\n)\n```\n\n\n\n#### Defining Parameters\n\nParameters can be inferred from your function signatures or explicitly set. If you allow parameters to be inferred, default values are permitted, and type hints will be enforced.\n\n##### Example\n```python\ndef test_func(foo: str, bar: int = 42, **kwargs):\n\tpass\n\nPath.MY_PATH: [\n    Action(\n        functions=[my_func],  # IMPLICIT\n    )\n],\n```\n\n**OR**\n\n```python\ndef test_func(foo, bar, **kwargs):\n\tpass\n\nPath.MY_PATH: [\n    Action(\n        required_params=[\"foo\", \"bar\"],  # EXPLICIT\n        functions=[my_func],\n    )\n],\n```\n\n\n\n#### Queues\n\n```python\nlpipe.Queue(type, name, path)\n```\n\n| Argument          | Type | Description                     |\n| ----------------- | ---- | ------------------------------- |\n| `type` | `lpipe.QueueType` | |\n| `name` | `str` | Name/identifier of the queue (used by `QueueType.Kinesis`, `QueueType.SQS`) If you include name instead of url for an SQS queue, the queue URL will fetched automatically. |\n| `url`  | `str` | URL/URI of the queue (used by `QueueType.SQS`) |\n| `path` | `str` | (optional) A path name, usually to trigger a path in the lambda feeding off of this queue. If this is set, the sent message will be in the standard lpipe format of `{\"path\": \"\", \"kwargs\": {}}`.|\n\n##### Example\n\n```python\nfrom lpipe import Queue, QueueType\n\nQueue(type=QueueType.SQS, name=\"my-queue-name\")\n```\n\n\n\n#### Payloads\n\nIf you return `Payload` or `List[Payload]` from a function called by lpipe, the payloads will be sequentially executed before proceeding with other messages. Keep time restrictions in mind when using this feature.\n\n```python\nlpipe.Payload(kwargs, path, queue, event_source)\n```\n\n| Argument       | Type            | Description                                                 |\n| -------------- | --------------- | ----------------------------------------------------------- |\n| `kwargs`       | `dict`          |                                                             |\n| `path`         | `Enum` or `str` | Optional if `queue` is set                                  |\n| `queue`        | `lpipe.Queue`   | Optional if `path` is set                                   |\n| `event_source` | `str`           | (optional) Set automatically on Payloads generated by lpipe |\n\n##### Example\n\n```python\nfrom lpipe import Payload\n\nPayload(\n\tkwargs={\"lorem\": \"ipsum\"},\n  path=\"MY_PATH\",\n)\n```\n\n\n\n## Advanced Example\n\nCombining all of the features documented above will allow you to chain messages through a complex directed graph of local code and remote services without exceeding the 15 minute limit imposed by AWS Lambda.\n\nThis example demonstrates a lambda with two functions. Both can be triggered directly by a message, but one will trigger the other.\n\n```python\nimport lpipe\n\ndef my_func(foo: str, **kwargs):\n\tpass\n\ndef my_generic_func(foo: str, **kwargs):\n\t# pseudo code\n  data = request.get(os.environ[\"MY_API_URL\"], {\"foo\": foo})\n  # queue up message with another service\n  return Payload(\n    kwargs=data,\n    queue=lpipe.Queue(\n      type=lpipe.QueueType.SQS,\n      name=\"my-service-queue\",\n    ),\n  )\n\nPATHS = {\n    \"FIRST_PATH\": [\n        Action(functions=[my_func], paths=[\"GENERIC_REUSABLE_PATH\"]),\n    ],\n    \"GENERIC_REUSABLE_PATH\": [my_generic_func],\n}\n\ndef lambda_handler(event, context):\n    return lpipe.process_event(\n        event=event,\n        context=context,\n        paths=PATHS,\n        queue_type=lpipe.QueueType.SQS,\n    )\n```\n\nTrigger with...\n\n```python\n{\n  \"path\": \"FIRST_PATH\",\n  \"kwargs\": {\n    \"foo\": \"bar\",\n  }\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mintel/lpipe",
    "keywords": "",
    "license": "APACHE",
    "maintainer": "Charlie Mathews",
    "maintainer_email": "cmathews@mintel.com",
    "name": "lpipe",
    "package_url": "https://pypi.org/project/lpipe/",
    "platform": "",
    "project_url": "https://pypi.org/project/lpipe/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mintel/lpipe/issues",
      "Homepage": "https://github.com/mintel/lpipe",
      "Source Code": "https://github.com/mintel/lpipe"
    },
    "release_url": "https://pypi.org/project/lpipe/4.0.2/",
    "requires_dist": [
      "backoff",
      "boto3",
      "python-dateutil",
      "requests",
      "structlog",
      "sentry-sdk ; extra == 'sentry'",
      "python-decouple ; extra == 'sentry'"
    ],
    "requires_python": ">=3.6",
    "summary": "AWS Lambda framework for writing clear, minimal Python FAAS",
    "version": "4.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7927936,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6438307f3c2af72860cb8559112376d18bcf13b7829657984e932b5edae85f5",
        "md5": "70dcf0d61db1ed9b7510bf59cafbfddb",
        "sha256": "bcbb4c674c93b0087ad794d3c1b76012ddc360d58d021c49f46abbe5bf3bc960"
      },
      "downloads": -1,
      "filename": "lpipe-4.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70dcf0d61db1ed9b7510bf59cafbfddb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 27913,
      "upload_time": "2020-07-06T22:14:40",
      "upload_time_iso_8601": "2020-07-06T22:14:40.433500Z",
      "url": "https://files.pythonhosted.org/packages/a6/43/8307f3c2af72860cb8559112376d18bcf13b7829657984e932b5edae85f5/lpipe-4.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db49571c203b93f4540707af05d7cf92980d0de79d51d7d0b5fb3da8b9185ab2",
        "md5": "2fdd5618637b3675f33fc977513fa2ee",
        "sha256": "9b37b586fe371db57bdc24bd853463a9e7a746ee6ca9d23af1a2124f8c7fb497"
      },
      "downloads": -1,
      "filename": "lpipe-4.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2fdd5618637b3675f33fc977513fa2ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20604,
      "upload_time": "2020-07-06T22:14:41",
      "upload_time_iso_8601": "2020-07-06T22:14:41.653286Z",
      "url": "https://files.pythonhosted.org/packages/db/49/571c203b93f4540707af05d7cf92980d0de79d51d7d0b5fb3da8b9185ab2/lpipe-4.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}