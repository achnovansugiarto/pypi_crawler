{
  "info": {
    "author": "Michael Corey",
    "author_email": "mcorey@cironline.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Other Audience",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: MIDI",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "It's MIDITime!\n==============\n\nDo you have time time series data you want to play as music? Of course\nyou do!\n\nMIDITime converts any kind of time series data into pitch, attack and\nduration values based on musical options that you set up, then outputs a\n.mid file.\n\nMIDI files aren't technically audio -- they're instructions on how\nsoftware instruments should be played. You can either play .mid files\ndirectly in some music applications, or import them into a wide variety\nof music editors (like ProTools, Ableton, MaxMSP) and add a ton of bells\nand whistles to get broadcast-ready audio.\n\nWe used MIDITime to produce the data sonification in `this episode of\nReveal <https://www.revealnews.org/episodes/power-struggle-the-perilous-price-of-americas-energy-boom/#segment-oklahomas-man-made-earthquakes>`__.\nThe musical track -- without the talking -- `is\nhere <https://www.revealnews.org/article/listen-to-the-music-of-seismic-activity-in-oklahoma/>`__.\n\nInstalling\n----------\n\n.. code:: python\n\n    pip install miditime\n\nUsage\n-----\n\nVery basic:\n~~~~~~~~~~~\n\n.. code:: python\n\n    from miditime.miditime import MIDITime\n\n    # Instantiate the class with a tempo (120bpm is the default) and an output file destination.\n    mymidi = MIDITime(120, 'myfile.mid')\n\n    # Create a list of notes. Each note is a list: [time, pitch, attack, duration]\n    midinotes = [\n        [0, 60, 200, 3],  #At 0 beats (the start), Middle C with attack 200, for 3 beats\n        [10, 61, 200, 4]  #At 10 beats (12 seconds from start), C#5 with attack 200, for 4 beats\n    ]\n\n    # Add a track with those notes\n    mymidi.add_track(midinotes)\n\n    # Output the .mid file\n    mymidi.save_midi()\n\nA little more fun, a lot more control:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstantiate the class with a tempo (120bpm is the default), an output\nfile destination, the number of seconds you want to represent a year in\nthe final song (default is 5 sec/year), the base octave (C5 is middle C,\nso the default is 5, and how many octaves you want your output to range\nover (default is 1).\n\n.. code:: python\n\n    from miditime.miditime import MIDITime\n    mymidi = MIDITime(120, 'myfile.mid', 5, 5, 1)\n\nBring in some data (this is some earthquakes). I'm assuming your data is\nalready in date order, from oldest to newest.\n\n.. code:: python\n\n    my_data = [\n        {'event_date': <datetime object>, 'magnitude': 3.4},\n        {'event_date': <datetime object>, 'magnitude': 3.2},\n        {'event_date': <datetime object>, 'magnitude': 3.6},\n        {'event_date': <datetime object>, 'magnitude': 3.0},\n        {'event_date': <datetime object>, 'magnitude': 5.6},\n        {'event_date': <datetime object>, 'magnitude': 4.0}\n    ]\n\nConvert your date/time data into an integer, like days since the epoch\n(Jan. 1, 1970). You can use the days\\_since\\_epoch() helper method, or\nnot:\n\n.. code:: python\n\n    my_data_epoched = [{'days_since_epoch': mymidi.days_since_epoch(d['event_date']), 'magnitude': d['magnitude']} for d in my_data]\n\nConvert your integer date/time to something reasonable for a song. For\nexample, at 120 beats per minute, you'll need to scale the data down a\nlot to avoid a very long song if your data spans years. This uses the\nseconds\\_per\\_year attribute you set at the top, so if your date is\nconverted to something other than days you may need to do your own\nconversion. But if your dataset spans years and your dates are in days\n(with fractions is fine), use the beat() helper method.\n\n.. code:: python\n\n    my_data_timed = [{'beat': mymidi.beat(d['days_since_epoch']), 'magnitude': d['magnitude']} for d in my_data_epoched]\n\nGet the earliest date in your series so you can set that to 0 in the\nMIDI:\n\n.. code:: python\n\n    start_time = my_data_timed[0]['beat']\n\nSet up some functions to scale your other variable (magnitude in our\ncase) to match your desired mode/key and octave range. There are helper\nmethods to assist this scaling, very similar to a charting library like\nD3. You can choose a linear or logarithmic scale.\n\n.. code:: python\n\n    def mag_to_pitch_tuned(magnitude):\n        # Where does this data point sit in the domain of your data? (I.E. the min magnitude is 3, the max in 5.6). In this case the optional 'True' means the scale is reversed, so the highest value will return the lowest percentage.\n        scale_pct = mymidi.linear_scale_pct(3, 5.7, magnitude)\n\n        # Another option: Linear scale, reverse order\n        # scale_pct = mymidi.linear_scale_pct(3, 5.7, magnitude, True)\n\n        # Another option: Logarithmic scale, reverse order\n        # scale_pct = mymidi.log_scale_pct(3, 5.7, magnitude, True)\n\n        # Pick a range of notes. This allows you to play in a key.\n        c_major = ['C', 'D', 'E', 'F', 'G', 'A', 'B']\n\n        #Find the note that matches your data point\n        note = mymidi.scale_to_note(scale_pct, c_major)\n\n        #Translate that note to a MIDI pitch\n        midi_pitch = mymidi.note_to_midi_pitch(note)\n\n        return midi_pitch\n\nNow build your note list\n\n.. code:: python\n\n    note_list = []\n\n    for d in my_data_timed:\n        note_list.append([\n            d['beat'] - start_time,\n            mag_to_pitch_tuned(d['magnitude']),\n            100,  # attack\n            1  # duration, in beats\n        ])\n\nAnd finish\n\n.. code:: python\n\n    # Add a track with those notes\n    mymidi.add_track(note_list)\n\n    # Output the .mid file\n    mymidi.save_midi()\n\nPlay your music:\n~~~~~~~~~~~~~~~~\n\nThere are many programs to work with MIDI, but\n`timidity <http://sourceforge.net/projects/timidity/>`__ (installable\nwith apt) is a simple command-line one if you just want to hear what you\nhath wrought.\n\n::\n\n    timidity mymidifilename.mid\n\nLicense\n-------\n\nThis software is released under an MIT license. It would be awful nice\nif you credited Reveal and Michael Corey somehow if you use this to make\nsomething awesome.\n\nCredits\n-------\n\nMany thanks to Julia Smith for helping me to understand musical\nkeys/modes better.\n\nMIDITime is a wrapper around the actual midi-making hotness of\n`midiutil <https://github.com/duggan/midiutil>`__, produced by `Mark\nConway Wirt <http://www.emergentmusics.org/site-information>`__. I have\nincluded midiutil in this package `per his\nrecommendation <https://github.com/duggan/midiutil/blob/master/README.txt>`__.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cirlabs/miditime",
    "keywords": "audio midi time series data python",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "miditime",
    "package_url": "https://pypi.org/project/miditime/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/miditime/",
    "project_urls": {
      "Homepage": "https://github.com/cirlabs/miditime"
    },
    "release_url": "https://pypi.org/project/miditime/1.1.0/",
    "requires_dist": [
      "pytz"
    ],
    "requires_python": null,
    "summary": "Generate MIDI files from time series data. You can control can control what octaves and octave ranges you want.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2372002,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d28797a1c8e3616829ef4c2426b54aaddeb794d9bdc7bf53641f2535b491946",
        "md5": "72b66f3d5f37e7a2da31f9721bb18217",
        "sha256": "dd499282ca23be607c46a853cc40de8166d4985dd0732658ad78e550945dedc3"
      },
      "downloads": -1,
      "filename": "miditime-1.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72b66f3d5f37e7a2da31f9721bb18217",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 32157,
      "upload_time": "2016-08-04T21:31:41",
      "upload_time_iso_8601": "2016-08-04T21:31:41.766067Z",
      "url": "https://files.pythonhosted.org/packages/6d/28/797a1c8e3616829ef4c2426b54aaddeb794d9bdc7bf53641f2535b491946/miditime-1.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba2a30757076a3fea19406abfd4635f6b5ea26d4cc455d6f8bbb5137cda8b3e6",
        "md5": "ca8032063b1d855aedf284aa831f2d70",
        "sha256": "4d7f2da406d514f2f90d5c91db11e328b6e76780f45fb31ea66dd0e791315aa5"
      },
      "downloads": -1,
      "filename": "miditime-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ca8032063b1d855aedf284aa831f2d70",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23918,
      "upload_time": "2016-08-04T21:31:44",
      "upload_time_iso_8601": "2016-08-04T21:31:44.296947Z",
      "url": "https://files.pythonhosted.org/packages/ba/2a/30757076a3fea19406abfd4635f6b5ea26d4cc455d6f8bbb5137cda8b3e6/miditime-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}