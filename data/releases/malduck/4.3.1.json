{
  "info": {
    "author": "CERT Polska",
    "author_email": "info@cert.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# :duck: Malduck\n\n## [Installation ⚙️](#how-to-start) | [Docs 📚](https://malduck.readthedocs.io/en/latest/)\n\n---\n\nMalduck is your ducky companion in malware analysis journeys. It is mostly based on [Roach](https://github.com/hatching/roach) project, which derives many concepts from [mlib](https://github.com/mak/mlib) \nlibrary created by [Maciej Kotowicz](https://lokalhost.pl). The purpose of fork was to make Roach independent from [Cuckoo Sandbox](https://cuckoosandbox.org/) project, but still supporting its internal `procmem` format.\n\nMalduck provides many improvements resulting from CERT.pl codebase, making scripts written for malware analysis purposes much shorter and more powerful. \n\n## Features\n\n- **Cryptography** (AES, Blowfish, Camelie, ChaCha20, Serpent and many others)\n- **Compression algorithms** (aPLib, gzip, LZNT1 (RtlDecompressBuffer))\n- **Memory model objects** (work on memory dumps, PE/ELF, raw files and IDA dumps using the same code)\n- **Extraction engine** (modular extraction framework for config extraction from files/dumps)\n- Fixed integer types (like Uint64) and bitwise utilities\n- String operations (chunks, padding, packing/unpacking etc)\n- Hashing algorithms (CRC32, MD5, SHA1, SHA256)\n\n## Usage examples\n\n#### AES\n\n```python\nfrom malduck import aes\n\nkey = b'A'*16\niv = b'B'*16\nplaintext = b'data'*16\nciphertext = aes.cbc.encrypt(key, iv, plaintext)\n```\n\n### Serpent\n\n```python\nfrom malduck import serpent\n\nkey = b'a'*16\niv = b'b'*16\nplaintext = b'data'*16\nciphertext = serpent.cbc.encrypt(key, plaintext, iv)\n```\n\n### APLib decompression\n\n```python\nfrom malduck import aplib\n\n# Headerless compressed buffer\naplib(b'T\\x00he quick\\xecb\\x0erown\\xcef\\xaex\\x80jumps\\xed\\xe4veur`t?lazy\\xead\\xfeg\\xc0\\x00')\n```\n\n### Fixed integer types\n\n```python\nfrom malduck import DWORD\n\ndef sdbm_hash(name: bytes) -> int:\n    hh = 0\n    for c in name:\n        # operations on the DWORD type produce a dword, so a result\n        # is also a DWORD.\n        hh = DWORD(c) + (hh << 6) + (hh << 16) - hh\n    return int(hh)\n```\n\n### Extractor engine - module example\n\n```python\nfrom malduck import Extractor\n\nclass Citadel(Extractor):\n    family = \"citadel\"\n    yara_rules = (\"citadel\",)\n    overrides = (\"zeus\",)\n\n    @Extractor.string(\"briankerbs\")\n    def citadel_found(self, p, addr, match):\n        log.info('[+] `Coded by Brian Krebs` str @ %X' % addr)\n        return True\n\n    @Extractor.string\n    def cit_login(self, p, addr, match):\n        log.info('[+] Found login_key xor @ %X' % addr)\n        hit = p.uint32v(addr + 4)\n        print(hex(hit))\n        if p.is_addr(hit):\n            return {'login_key': p.asciiz(hit)}\n\n        hit = p.uint32v(addr + 5)\n        print(hex(hit))\n        if p.is_addr(hit):\n            return {'login_key': p.asciiz(hit)}\n```\n\n### Memory model objects\n\n```python\nfrom malduck import procmempe\n\nwith procmempe.from_file(\"notepad.exe\", image=True) as p:\n    resource_data = p.pe.resource(\"NPENCODINGDIALOG\")\n```\n\n## How to start\n\nInstall it by running\n\n```shell\npip install malduck\n```\n\nMore documentation can be found on [readthedocs](https://malduck.readthedocs.io/en/latest/).\n\n![Co-financed by the Connecting Europe Facility by of the European Union](https://www.cert.pl/uploads/2019/02/en_horizontal_cef_logo-e1550495232540.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CERT-Polska/malduck",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "malduck",
    "package_url": "https://pypi.org/project/malduck/",
    "platform": null,
    "project_url": "https://pypi.org/project/malduck/",
    "project_urls": {
      "Homepage": "https://github.com/CERT-Polska/malduck"
    },
    "release_url": "https://pypi.org/project/malduck/4.3.1/",
    "requires_dist": [
      "capstone (>=4.0.1)",
      "click (>=7.0)",
      "cryptography (>=3.1)",
      "dnfile (==0.11.0)",
      "pefile (>=2022.5.30)",
      "pycryptodomex (>=3.8.2)",
      "pyelftools",
      "typing-extensions (>=3.7.4.2)",
      "yara-python (==4.2.3)"
    ],
    "requires_python": ">=3.8",
    "summary": "Malduck is your ducky companion in malware analysis journeys",
    "version": "4.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17474994,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f428a64e0ae6799573988efaa88ca8e50cadcc1d9d1c4d858b49cbd3856fde3",
        "md5": "b67526989252b0bfbe84d04ba37a23e6",
        "sha256": "dc9fc35c062e3d6808585c69345f3dae22a6eb3c0ad59d92bfd5ca6d3f843461"
      },
      "downloads": -1,
      "filename": "malduck-4.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b67526989252b0bfbe84d04ba37a23e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 91889,
      "upload_time": "2023-03-28T08:35:01",
      "upload_time_iso_8601": "2023-03-28T08:35:01.411769Z",
      "url": "https://files.pythonhosted.org/packages/2f/42/8a64e0ae6799573988efaa88ca8e50cadcc1d9d1c4d858b49cbd3856fde3/malduck-4.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}