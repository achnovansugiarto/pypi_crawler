{
  "info": {
    "author": "CodeRed LLC",
    "author_email": "info@coderedcorp.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "django-sass\n===========\n\nThe absolute simplest way to use [Sass](https://sass-lang.com/) with Django.\nPure Python, minimal dependencies, and no special configuration required.\n\n[Source code on GitHub](https://github.com/coderedcorp/django-sass)\n\n\nStatus\n------\n\n|                        |                      |\n|------------------------|----------------------|\n| Python Package         |[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-sass)](https://pypi.org/project/django-sass/) [![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-sass)](https://pypi.org/project/django-sass/) [![PyPI - Wheel](https://img.shields.io/pypi/wheel/django-sass)](https://pypi.org/project/django-sass/) [![PyPI - Downloads](https://img.shields.io/pypi/dm/django-sass)](https://pypi.org/project/django-sass/) [![PyPI](https://img.shields.io/pypi/v/django-sass)](https://pypi.org/project/django-sass/) |\n| Build                  | [![Build Status](https://dev.azure.com/coderedcorp/coderedcms/_apis/build/status/django-sass?branchName=master)](https://dev.azure.com/coderedcorp/coderedcms/_build/latest?definitionId=10&branchName=master) [![Azure DevOps tests (branch)](https://img.shields.io/azure-devops/tests/coderedcorp/coderedcms/10/master)](https://dev.azure.com/coderedcorp/coderedcms/_build/latest?definitionId=10&branchName=master) [![Azure DevOps coverage (branch)](https://img.shields.io/azure-devops/coverage/coderedcorp/coderedcms/10/master)](https://dev.azure.com/coderedcorp/coderedcms/_build/latest?definitionId=10&branchName=master) |\n\n\nInstallation\n------------\n\n1. Install from pip.\n\n```\npip install django-sass\n```\n\n2. Add to your `INSTALLED_APPS` (you only need to do this in a dev environment,\nyou would not want this in your production settings file, although it adds zero\noverhead):\n\n```python\nINSTALLED_APPS = [\n    ...,\n    'django_sass',\n]\n```\n\n3. Congratulations, you're done üòÄ\n\n\nUsage\n-----\n\nIn your app's static files, use Sass as normal. The only difference is that\nyou can **not** traverse upwards using `../` in `@import` statements. For example:\n\n```\napp1/\n|- static/\n   |- app1/\n      |- scss/\n         |- _colors.scss\n         |- app1.scss\napp2/\n|- static/\n   |- app2/\n      |- scss/\n         |- _colors.scss\n         |- app2.scss\n```\n\nIn `app2.scss` you could reference app1's and app2's `_colors.scss` import as so:\n\n```scss\n@import 'app1/scss/colors';\n@import 'app2/scss/colors';\n// Or since you are in app2, you can reference its colors with a relative path.\n@import 'colors';\n```\n\nThen to compile `app2.scss` and put it in the `css` directory,\nrun the following management command (the `-g` will build a source map, which\nis helpful for debugging CSS):\n\n```\npython manage.py sass app2/static/app2/scss/app2.scss app2/static/app2/css/app2.css -g\n```\n\nOr, you can compile the entire `scss` directory into\na corresponding `css` directory. This will traverse all subdirectories as well:\n\n```\npython manage.py sass app2/static/app2/scss/ app2/static/app2/css/\n```\n\nIn your Django HTML template, reference the CSS file as normal:\n\n```html\n{% load static %}\n<link href=\"{% static 'app2/css/app2.css' %}\" rel=\"stylesheet\">\n```\n\n‚ú®‚ú® **Congratulations, you are now a Django + Sass developer!** ‚ú®‚ú®\n\nNow you can commit those CSS files to version control, or run `collectstatic` and deploy them as normal.\n\nFor an example project layout, see `testproject/` in this repository.\n\n\nWatch Mode\n----------\n\nTo have `django-sass` watch files and recompile them as they change (useful in development),\nadd the ``--watch`` flag.\n\n```\npython manage.py sass app2/static/app2/scss/ app2/static/app2/css/ --watch\n```\n\n\nExample: deploying compressed CSS to production\n-----------------------------------------------\n\nTo compile minified CSS, use the `-t` flag to specify compression level (one of:\n\"expanded\", \"nested\", \"compact\", \"compressed\"). The default is \"expanded\" which\nis human-readable.\n\n```\npython manage.py sass app2/static/app2/scss/ app2/static/app2/css/ -t compressed\n```\n\nYou may now optionally commit the CSS files to version control if so desired,\nor omit them, whatever fits your needs better. Then run `collectsatic` as normal.\n\n```\npython manage.py collectstatic\n```\n\nAnd now proceed with deploying your files as normal.\n\n\nLimitations\n-----------\n\n* `@import` statements must reference a path relative to a path in `STATICFILES_FINDERS`\n  (which will usually be an app's `static/` directory or some other directory specified\n  in `STATICFILES_DIRS`). Or they can reference a relative path equal to or below the\n  current file. It does not support traversing up the filesystem (i.e. `../`).\n\n  Legal imports:\n  ```scss\n  @import 'file-from-currdir';\n  @import 'subdir/file';\n  @import 'another-app/file';\n  ```\n  Illegal imports:\n  ```scss\n  @import '../file';\n  ```\n\n* Only files ending in `.scss` are supported for now.\n\n* Only supports `-g`, `-p`, and `-t` options similar to `pysassc`. Ideally `django-sass` will\n  be as similar as possible to the `pysassc` command line interface.\n\nFeel free to file an issue or make a pull request to improve any of these limitations. üê±‚Äçüíª\n\n\nWhy django-sass?\n----------------\n\nOther packages such as [django-libsass](https://github.com/torchbox/django-libsass)\nand [django-sass-processor](https://github.com/jrief/django-sass-processor),\nwhile nice packages, require `django-compressor` which itself depends on several\nother packages that require compilation to install.\n\n* If you simply want to use Sass in development without installing a web of unwanted\n  dependencies, then `django-sass` is for you.\n* If you don't want to deploy any processors or compressors to your production server,\n  then `django-sass` is for you.\n* If you don't want to change the way you reference and serve static files,\n  then `django-sass` is for you.\n* And if you want the absolute simplest installation and setup possible for doing Sass,\n  `django-sass` is for you too.\n\ndjango-sass only depends on libsass (which provides pre-built wheels for Windows, Mac,\nand Linux), and of course Django (any version).\n\n\nProgrammatically Compiling Sass\n-------------------------------\n\nYou can also use `django-sass` in Python to programmatically compile the sass.\nThis is useful for build scripts and static site generators.\n\n```python\nfrom django_sass import compile_sass\n\n# Compile scss and write to output file.\ncompile_sass(\n    inpath=\"/path/to/file.scss\",\n    outpath=\"/path/to/output.css\",\n    output_style=\"compressed\",\n    precision=8,\n    source_map=True\n)\n```\n\nFor more advanced usage, you can specify additional sass search paths outside\nof your Django project by using the `include_paths` argument.\n\n```python\nfrom django_sass import compile_sass, find_static_paths\n\n# Get Django's static paths.\ndirs = find_static_paths()\n\n# Add external paths.\ndirs.append(\"/external/path/\")\n\n# Compile scss and write to output file.\ncompile_sass(\n    inpath=\"/path/to/file.scss\",\n    outpath=\"/path/to/output.css\",\n    output_style=\"compressed\",\n    precision=8,\n    source_map=True,\n    include_paths=dirs,\n)\n```\n\nContributing\n------------\n\nTo set up a development environment, first check out this repository, create a\nvenv, then:\n\n```\n(myvenv)$ pip install -r requirements-dev.txt\n```\n\nBefore committing, run static analysis tools:\n\n```\n(myvenv)$ flake8\n(myvenv)$ mypy\n```\n\nThen run the unit tests:\n\n```\n(myvenv)$ pytest\n```\n\n\nChangelog\n---------\n\n#### 1.0.0\n* New: You can now use `django_sass` APIs directly in Python.\n* Added unit tests.\n* Code quality improvements.\n\n#### 0.2.0\n* New feature: `-g` option to build a source map (when input is a file, not a directory).\n\n#### 0.1.2\n* Fix: Write compiled CSS files as UTF-8.\n* Change: Default `-p` precision from 5 to 8 for better support building Bootstrap CSS.\n\n#### 0.1.1\n* Fix: Create full file path if not exists when specifying a file output.\n\n#### 0.1.0\n* Initial release\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coderedcorp/django-sass",
    "keywords": "",
    "license": "BSD license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-sass",
    "package_url": "https://pypi.org/project/django-sass/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-sass/",
    "project_urls": {
      "Homepage": "https://github.com/coderedcorp/django-sass"
    },
    "release_url": "https://pypi.org/project/django-sass/1.0.0/",
    "requires_dist": [
      "django",
      "libsass"
    ],
    "requires_python": "",
    "summary": "The absolute simplest way to use Sass with Django. Pure Python, minimal dependencies, and no special configuration required!",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11240889,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38360d15dd8e857579897dd924774b1108b176343b35ccb3ce555a7862fc7d84",
        "md5": "faf7800259c1e56f09faf21c45a436e9",
        "sha256": "ae6d3ac2959758ea0e9c11dc9a66c22c6694ec3c94c13cfada3ff2b884b568ae"
      },
      "downloads": -1,
      "filename": "django_sass-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "faf7800259c1e56f09faf21c45a436e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8262,
      "upload_time": "2020-02-20T20:18:43",
      "upload_time_iso_8601": "2020-02-20T20:18:43.504350Z",
      "url": "https://files.pythonhosted.org/packages/38/36/0d15dd8e857579897dd924774b1108b176343b35ccb3ce555a7862fc7d84/django_sass-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "349a6f7c32dcf62cbbd62c0a02f165c062b60932a33dc62b0ddb773f83d90585",
        "md5": "6c2f01c0581b0a6e640a3a6d3380d353",
        "sha256": "4c7f5041fdc366e879cc951c3fe16eb3811ac6d18142431af67283a430e4e12a"
      },
      "downloads": -1,
      "filename": "django-sass-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6c2f01c0581b0a6e640a3a6d3380d353",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9880,
      "upload_time": "2020-02-20T20:18:44",
      "upload_time_iso_8601": "2020-02-20T20:18:44.564404Z",
      "url": "https://files.pythonhosted.org/packages/34/9a/6f7c32dcf62cbbd62c0a02f165c062b60932a33dc62b0ddb773f83d90585/django-sass-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}