{
  "info": {
    "author": "LLCZ00",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Security :: Cryptography",
      "Topic :: Utilities"
    ],
    "description": "# Dynabyte\n### _Simplifying Simple Byte Operations_\nDynabyte is a python module designed to streamline the process of de-obfuscating strings and files, allowing you to perform bit-wise operations on large amounts of data with as little code as possible.\n## Basic Usage\nSee [*documentation*](https://google.com)\n\nDe-obfuscating a string:\n```py\nimport dynabyte\n\ndecrypt = dynabyte.loadarray(\"\\osb`pnarq-`a_v{t\")\ndecrypt.run(lambda byte, offset : (byte + 3) ^ 0x10) # Callback function to perform on each byte\ndecrypt.printbytes(format=\"string\") # Output: \"Obfuscated string\"\n```\nEncrypting a binary file w/ key \n```py\nimport dynabyte\n\nkey = dynabyte.getbytes(\"bada BING!\")\ndef encrypt(byte, offset): # Callbacks can be lambdas or regular functions\n    i = offset % len(key)\n    return (byte ^ key[i]) + 0xc\ndynabyte.loadfile(r\"C:\\Users\\IEUser\\suspicious.bin\").run(encrypt, count=2) # Run file through encryption function twice\ndynabyte.printbytes(key, format=\"C\") # Output: \"unsigned char byte_array[] = { 0x62, 0x61, 0x64, ... };\"\n```\n## Installation\n\nInstall from PyPI\n```\npip install dynabyte\n```\n## I/O Speed\nNaturally, since dynabyte passes each byte through a callback function, the delay starts to become noticeable around 5MB or so. As of v1.0.0, dynabyte's base speed is around 4.4MB(mebibytes) per second. This is the speed of simply passing the bytes through a \"No-op\" function that just returns an unaltered byte. More operations, of course, result in lower speeds. \n\nBenchmark of 5MB file:\n```\nNOP:                 1.06s -> 4.43 MB/s\nAdd,Sub:             1.12s -> 4.19 MB/s\nXOR:                 1.22s -> 3.85 MB/s\nXOR/Sub,Add:         1.28s -> 3.67 MB/s\nROR,ROL              2.17s -> 2.17 MB/s\nSub,Add/ROL,ROR:     2.27s -> 2.07 MB/s\nXOR/ROR,ROL:         2.34s -> 2.01 MB/s\nXOR/ROR,ROL,Add,Sub: 2.40s -> 1.96 MB/s\n```\n\nHowever this is all usually inconsquential when working with data typically found during malware analysis, i.e. strings and extracted files/shellcode. If there happens to be a 50MB XOR'd file embedded within a malware sample, 12 seconds isn't really that bad of a wait.\n## Known Issues & TODO\n- Processing speed of larger files could possibly be improved. Things to try:\n    - Migrating all file IO and byte processing into Cython\n    - Switching to numpy arrays (instead of bytearrays) and integrating them with Cython\n    - Rewriting file IO functionality in C and wrapping them\n- Add support for common encryption schemes (AES) and alternative encodings (Base64)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LLCZ00/Dynabyte",
    "keywords": "malware analysis obfuscation strings files",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynabyte",
    "package_url": "https://pypi.org/project/dynabyte/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynabyte/",
    "project_urls": {
      "Homepage": "https://github.com/LLCZ00/Dynabyte"
    },
    "release_url": "https://pypi.org/project/dynabyte/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Byte manipulation module for files and arrays",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16496027,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06f501097cb212488eeadbf1eaeab338c5bc28598a43266c70584adde2f34b63",
        "md5": "8c01092b9ad850f771bb38786364fa06",
        "sha256": "0df520f4e0ddcae6aac5ceea18e376aa2c05d2289e897f8cd330969067531ff1"
      },
      "downloads": -1,
      "filename": "dynabyte-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c01092b9ad850f771bb38786364fa06",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 11154,
      "upload_time": "2022-09-27T21:59:26",
      "upload_time_iso_8601": "2022-09-27T21:59:26.895226Z",
      "url": "https://files.pythonhosted.org/packages/06/f5/01097cb212488eeadbf1eaeab338c5bc28598a43266c70584adde2f34b63/dynabyte-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "941b9bba3797627e69fd4776ad0770e0e9257387769c848d7e73e9c16c3d5749",
        "md5": "bdec7ef2f6103b85c5beac1b40cb336c",
        "sha256": "506116f0d2f05b5066dd2133a7739c666b635d68bcd11663d7be1386fc6f329c"
      },
      "downloads": -1,
      "filename": "dynabyte-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bdec7ef2f6103b85c5beac1b40cb336c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 9928,
      "upload_time": "2022-09-27T21:59:28",
      "upload_time_iso_8601": "2022-09-27T21:59:28.691747Z",
      "url": "https://files.pythonhosted.org/packages/94/1b/9bba3797627e69fd4776ad0770e0e9257387769c848d7e73e9c16c3d5749/dynabyte-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}