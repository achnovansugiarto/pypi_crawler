{
  "info": {
    "author": "LLCZ00",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Security :: Cryptography",
      "Topic :: Utilities"
    ],
    "description": "# Dynabyte\n### _Simplifying Byte Operations_\nDynabyte is a python module and CLI tool designed to streamline the process of de-obfuscating data, allowing you to perform bit-wise operations on strings or files with as little code as possible.\n## Basic Usage\nSee [*documentation*](https://dynabyte.readthedocs.io/en/latest/)\n\nDynabyte can be used as a command line tool, or imported as a module for finer control over data and operations.\n### CLI\n```\nusage: dynabyte [-h] [-s INPUT] [-x INPUT] [-f INPUT] [-o OUTPUT] [--xor KEY] [--xor-hex KEY] [--order {xor,ops}]\n                [--delim SEP] [--style {c,list,int}]\n                [ops ...]\npositional arguments:\n  ops                   Additional operations to be performed on each input byte, executed from left to right (xor,\n                        add, sub, rol, ror). All values interpreted as hex.\noptions:\n  -h, --help            show this help message and exit\n  -s INPUT, --string INPUT\n                        Input string to perform operations on.\n  -x INPUT, --hex-in INPUT\n                        Input hex (comma seperated) to perform operations on.\n  -f INPUT, --file INPUT\n                        Input file to perform operation on.\n  -o OUTPUT, --output OUTPUT\n                        Output file.\n  --xor KEY             Quick XOR; XOR input against given key (string).\n  --xor-hex KEY         Quick XOR; XOR input against given key (comma seperated hex).\n  --order {xor,ops}     Declare if Quick XOR or additional ops are executed first, if both options are being used.\n                        (Default: xor)\n  --delim SEP           Set output hex delimiter. (Default: ',')\n  --style {c,list,int}  Set style to print output bytes. (Default: Comma deliminated hex)\nExamples:\n        dynabyte --string plaintext xor 56 sub 12\n        dynabyte -f sus.bin -o sus.exe --xor 'password' add 0x12\n        dynabyte --hex 0x1b,0x52,0xa,0x18,0x44,0x16,0x19,0x57 --xor k3y\n```\nEncoding/decoding a string:\n```\n$ dynabyte -s pa$$w0rd! --xor \"mr.pib\" sub 5 ror 3\nCallback function:\nlambda byte, offset: utils.RotateRight(((byte ^ key[offset % 6]) - 5), 3)\nOutput bytes:\n0x3,0xc1,0xa0,0xe9,0x23,0xa9,0x43,0x22,0x41\nOutput string:\n(Could not decode)\n```\nAny number of additional operations (*xor*, *add*, *sub*, *ror*, *rol*) can be added to the end of the command, to be performed on each byte sequentially from left to right. So to decode the string you just reverse the previous operations:\n```\n$ dynabyte --hex 0x3,0xc1,0xa0,0xe9,0x23,0xa9,0x43,0x22,0x41 --order ops --xor \"mr.pib\" rol 3 add 5\nCallback function:\nlambda byte, offset: ((utils.RotateLeft(byte, 3)) + 5) ^ key[offset % 6]\nOutput bytes:\n0x70,0x61,0x24,0x24,0x77,0x30,0x72,0x64,0x21\nOutput string:\npa$$w0rd!\n```\nA dynabyte callback function (see below) is dynamically generated to perform the command, and can be acceptably copy/pasted into script using the dynabyte module, if one were so incline.\n### Module\nDe-obfuscating a string:\n```py\nimport dynabyte\n\nobf_string = dynabyte.load(\"\\osb`pnarq-`a_v{t\")\nobf_string.ADD(3).XOR(0x10) # Add 3 to each byte, then XOR each byte by 0x10\nobf_string.print(style=\"string\") # Output: \"Obfuscated string\"\n```\nBuilt-in operation methods (*XOR*, *ADD*, *SUB*, *ROL*, *ROR*) can be used on both files and strings, the order of execution being left to right. \n\n*XOR* can also used to encode/decode against a key:\n```py\nimport dynabyte as db\n\nmystr = db.load([0x1b, 0x52, 0xa, 0x18, 0x44, 0x16, 0x19, 0x57]) # Encoded bytes from CLI example\nmystr.ROL(3).ADD(5).XOR(\"mr.pib\")\nmystr.print(\"string\") # Output: \"pa$$w0rd!\"\n```\nCustom callback functions can be used to execute operations with the *run()* method. This is generally more efficient for longer operations, and is recommended for files. Using callback functions also gives you access to the \"global\" offset of a particular byte, as well as the option to write the results to a new file.\n\nCallback Signature:\n```py\ndef callback(byte: bytes, offset: int): -> bytes\n    return byte\n```\nEncrypting/decrypting a file: \n```py\nimport dynabyte\n\nkey = b\"bada BING!\"\ncallback = lambda byte, offset: (byte ^ key[offset % len(key)]) + 0xc # Callbacks can be lambdas or regular functions\nmyfile = dynabyte.load(r\"C:\\Users\\IEUser\\suspicious.bin\")\n# Run file through callback function twice, encrypting file\nmyfile.run(callback, count=2) \n# Decrypt file by reversing the operations, output to file\nmyfile.run(lambda byte, offset: (byte - 0xc) ^ key[offset % len(key)], count=2, output=\"sus_copy.bin\") \n```\n## Installation\n\nInstall from PyPI\n```\npip install dynabyte\n```\n## Known Issues & TODO\n- Processing speed of larger files could possibly be improved. Things to try:\n    - Migrating all file IO and byte processing into Cython\n    - Switching to numpy arrays (instead of bytearrays) and integrating them with Cython\n    - Rewriting file IO functionality in C and wrapping them\n- Add support for common encryption schemes (AES) and alternative encodings (Base64)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LLCZ00/Dynabyte",
    "keywords": "malware analysis obfuscation strings files",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dynabyte",
    "package_url": "https://pypi.org/project/dynabyte/",
    "platform": null,
    "project_url": "https://pypi.org/project/dynabyte/",
    "project_urls": {
      "Homepage": "https://github.com/LLCZ00/Dynabyte"
    },
    "release_url": "https://pypi.org/project/dynabyte/2.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Byte manipulation tool/module for files and arrays",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16496027,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfe52d7788aec777018d4a7a5c32f365b2ccea26d4eb191e84c20eb616d5c923",
        "md5": "8df627dc7eef392eda809ebb132e97cb",
        "sha256": "9a19b201719259ca5ffe9099901e3400be463f86629eb3ddafa6ba258256ac41"
      },
      "downloads": -1,
      "filename": "dynabyte-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8df627dc7eef392eda809ebb132e97cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 15576,
      "upload_time": "2022-11-02T18:14:07",
      "upload_time_iso_8601": "2022-11-02T18:14:07.035614Z",
      "url": "https://files.pythonhosted.org/packages/bf/e5/2d7788aec777018d4a7a5c32f365b2ccea26d4eb191e84c20eb616d5c923/dynabyte-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3691090f8a64b32917d830bb0f218a21a444c30c4ae6ddb2d8fef3fec34a2a64",
        "md5": "da98f7aa08c1831c3ea573c75bd60d11",
        "sha256": "6d686f9cedc063098788d7faf70aa6e970d4e7ac2824a44047094ea3a1484a61"
      },
      "downloads": -1,
      "filename": "dynabyte-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "da98f7aa08c1831c3ea573c75bd60d11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 15446,
      "upload_time": "2022-11-02T18:14:08",
      "upload_time_iso_8601": "2022-11-02T18:14:08.839150Z",
      "url": "https://files.pythonhosted.org/packages/36/91/090f8a64b32917d830bb0f218a21a444c30c4ae6ddb2d8fef3fec34a2a64/dynabyte-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}