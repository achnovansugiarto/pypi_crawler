{
  "info": {
    "author": "Carlos Palol",
    "author_email": "carlos.palol@awarepixel.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\n============\nPython Money\n============\n\nMoney class with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.\n\nAll code examples use Python 3.x.\n\n**Contents**\n\n.. contents::\n    :local:\n    :backlinks: none\n\n\nInstallation\n============\n\nThis package is compatible with Python 2.7, 3.3, 3.4, but there are important `Differences between Python versions`_.\n\n::\n\n    pip install money\n\nFor locale-aware formatting, also install `Babel <https://pypi.python.org/pypi/Babel>`_:\n\n::\n\n    pip install babel\n\n\nBasic usage\n===========\n\n.. code:: python\n\n    >>> from money import Money\n    >>> m = Money(amount='2.22', currency='EUR')\n    >>> m\n    EUR 2.22\n\n*amount* can be any valid value for decimal.Decimal(value) and *currency* should be a three-letter currency code. You can perform most arithmetic operations between money objects and integers or decimals.\n\n.. code:: python\n\n    >>> from money import Money\n    >>> m = Money('2.22', 'EUR')\n    >>> m / 2\n    EUR 1.11\n    >>> m + Money('7.77', 'EUR')\n    EUR 9.99\n\nArithmetic operations with floats are not directly supported. If you need to operate with floats, you must first convert the float to a Decimal, or the Money object to a float (i.e. float(m)). Please be aware of the `issues and limitations of floating point arithmetics <https://docs.python.org/3/tutorial/floatingpoint.html>`_.\n\n\nFormatting\n==========\n\nMoney objects are printed by default with en_US formatting and the currency code.\n\n.. code:: python\n\n    >>> m = Money('1234.567', 'EUR')\n    >>> str(m)\n    'EUR 1,234.57'\n\nUse ``format(locale=DEFAULT_LC_NUMERIC, pattern=None)`` for locale-aware formatting with currency expansion. ``format()`` emulates ``babel.numbers.format_currency()``, and **requires Babel** to be installed:\n\n.. code:: python\n\n    >>> m = Money('1234.567', 'USD')\n    >>> m.format('en_US')\n    '$1,234.57'\n    >>> m.format('es_ES')\n    '1.234,57\\xa0US$'\n\nThe character ``\\xa0`` is an unicode non-breaking space (chicken-good). If no locale is passed, Babel will use your system's locale. You can also provide a specific pattern to format():\n\n.. code:: python\n\n    >>> m = Money('-1234.567', 'USD')\n    >>> # Regular US format:\n    >>> m.format('en_US', '¤#,##0.00') \n    '-$1,234.57'\n    >>> # Custom negative format:\n    >>> m.format('en_US', '¤#,##0.00;<¤#,##0.00>')\n    '<$1,234.57>'\n    >>> # Round, Spanish format, full currency name:\n    >>> m.format('es_ES', '0 ¤¤¤')\n    '-1235 dólares estadounidenses'\n\n\n`Learn more about the formatting syntax: <http://www.unicode.org/reports/tr35/tr35-numbers.html#Number_Format_Patterns>`_.\n\n\nCurrency exchange\n=================\n\nCurrency exchange works by \"installing\" a **backend** class that implements the abstract base class (`abc <http://docs.python.org/3.3/library/abc.html>`_) ``money.exchange.BackendBase``. Its API is exposed through ``money.xrates``, along with setup functions ``xrates.install(pythonpath)``, ``xrates.uninstall()``, and ``xrates.backend_name``.\n\nA simple proof-of-concept backend ``money.exchange.SimpleBackend`` is included:\n\n.. code:: python\n\n    from decimal import Decimal\n    from money import Money, xrates\n\n    xrates.install('money.exchange.SimpleBackend')\n    xrates.base = 'USD'\n    xrates.setrate('AAA', Decimal('2'))\n    xrates.setrate('BBB', Decimal('8'))\n    \n    a = Money(1, 'AAA')\n    b = Money(1, 'BBB')\n    \n    assert a.to('BBB') == Money('4', 'BBB')\n    assert b.to('AAA') == Money('0.25', 'AAA')\n    assert a + b.to('AAA') == Money('1.25', 'AAA')\n\nYou can use a subclass of Money, **XMoney** if you prefer automatic conversion between different currencies on binary operations. The currency of the leftmost object has priority.\n\n.. code:: python\n\n    from money import XMoney\n    \n    # Register backend and rates as above...\n    \n    a = XMoney(1, 'AAA')\n    b = XMoney(1, 'BBB')\n\n    assert a + b == XMoney('1.25', 'AAA')\n\n\n.. _python-differences:\n\nDifferences between Python versions\n===================================\n\n.. list-table::\n    :header-rows: 1\n    :stub-columns: 1\n    \n    * - Expression\n      - Python 2.x\n      - Python 3.x\n    \n    * - ``round(Money('2.5', 'EUR'))``\n      - Returns ``3.0``, a **float** rounded amount **away from zero**.\n      - Returns ``EUR 2``, a **Money object** with rounded amount to the **nearest even**.\n\n\n\nDesign decisions\n================\n\nThere are several design decisions in *money* that differ from currently available money class implementations:\n\nLocalization\n------------\n\nDo not keep any kind of locale conventions database inside this package. Locale conventions are extensive and change over time; keeping track of them is a project of its own. There is already such a project and database (the Unicode Common Locale Data Repository), and an excellent python API for it: `Babel <https://pypi.python.org/pypi/Babel>`_.\n\nCurrency\n--------\n\nThere is no need for a currency class. A currency is fully identified by its ISO 4217 code, and localization or exchange rates data are expected to be centralized as databases/services because of their changing nature.\n\nAlso:\n\n+ **Modulo operator (%)**: do not override to mean \"percentage\".\n+ **Numeric type**: you **can** mix numbers and money in binary operations, and objects evaluate to False if their amount is zero.\n+ **Global default currency**: subclassing is a safer solution.\n\n\nContributions\n=============\n\nContributions are welcome. You can use the `regular github mechanisms <https://help.github.com/>`_.\n\nTo be forward-compatible, and given the small size of the package, Python 2.7 is supported in a different source \"branch\" at ``src-py2``.\n\nTo test your changes you will need `tox <https://pypi.python.org/pypi/tox>`_ and python 2.7, 3.3, and 3.4. Simply cd to the package root (by setup.py) and run ``tox``.\n\n\nLicense\n=======\n\nmoney is released under the **MIT license**, which can be found in the file ``LICENSE``.\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carlospalol/money",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "money",
    "package_url": "https://pypi.org/project/money/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/money/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/carlospalol/money"
    },
    "release_url": "https://pypi.org/project/money/1.2.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python Money Class",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2068236,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c125e4621a5319cbfa4dcbaed2f30c193d012bf9b02901fe9d08152eca35b0e",
        "md5": "5284cdfe1caad9907e1efa011a41c350",
        "sha256": "c813e30c41154893918d5bc15998b734cba724796968c3e79f071ba6ec6fc9b9"
      },
      "downloads": -1,
      "filename": "money-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "5284cdfe1caad9907e1efa011a41c350",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16870,
      "upload_time": "2016-04-17T13:48:46",
      "upload_time_iso_8601": "2016-04-17T13:48:46.010605Z",
      "url": "https://files.pythonhosted.org/packages/9c/12/5e4621a5319cbfa4dcbaed2f30c193d012bf9b02901fe9d08152eca35b0e/money-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}