{
  "info": {
    "author": "Carlos Palol",
    "author_email": "carlos.palol@awarepixel.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\n============\nPython Money\n============\n\nMoney class with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.\n\n.. RADAR: version\n\n**This is version 1.3.0**.\n\n:Development: https://github.com/carlospalol/money\n:Latest release: https://pypi.python.org/pypi/money/\n\nThis package is compatible with Python 2.7, 3.4, 3.5 (tested in 2.7.11, 3.4.4, 3.5.1), but there are important `Differences between Python versions`_. All code examples use Python 3.x.\n\n**Contents**\n\n.. contents::\n    :local:\n    :backlinks: none\n\n\nInstallation\n============\n\nInstall the latest release with:\n\n::\n\n    pip install money\n\nFor locale-aware formatting, also install the latest version of `Babel <https://pypi.python.org/pypi/Babel>`_ (2.2 or higher required):\n\n::\n\n    pip install babel\n\n\nUsage\n=====\n\n.. code:: python\n\n    >>> from money import Money\n    >>> m = Money(amount='2.22', currency='EUR')\n    >>> m\n    EUR 2.22\n\n*amount* can be any valid value in ``decimal.Decimal(value)`` and *currency* should be a three-letter currency code. Money objects are immutable by convention and hashable. Once created, you can use read-only properties ``amount`` (decimal.Decimal) and ``currency`` (str) to access its internal components:\n\n.. code:: python\n\n    >>> m = Money(2, 'USD')\n    >>> m.amount\n    Decimal('2')\n    >>> m.currency\n    'USD'\n\nMoney emulates a numeric type and you can apply most arithmetic and comparison operators between money objects, as well as addition, subtraction, and division with integers (int) and decimal numbers (decimal.Decimal):\n\n.. code:: python\n\n    >>> m = Money('2.22', 'EUR')\n    >>> m / 2\n    EUR 1.11\n    >>> m + Money('7.77', 'EUR')\n    EUR 9.99\n\nMore formally, with *AAA* and *BBB* being different currencies:\n\n+-----------+---------------+-----------+-----------+-----------------+\n|           | Operator      | Money AAA | Money BBB | int, Decimal    |\n+===========+===============+===========+===========+=================+\n| **Money   | ``+``, ``-``  | Money     | N/A       | Money           |\n+ AAA**     +---------------+-----------+-----------+-----------------+\n|           | ``*``         | N/A       | N/A       | Money           |\n+           +---------------+-----------+-----------+-----------------+\n|           | ``/``, ``//`` | Decimal   | N/A       | Money           |\n+           +---------------+-----------+-----------+-----------------+\n|           | ``>``, ``>=`` | Compares  | N/A       | N/A             |\n|           | ``<``, ``<=`` | amount.   |           |                 |\n+           +---------------+           +-----------+-----------------+\n|           | ``==``        |           | False     | False           |\n|           |               |           |           |                 |\n+-----------+---------------+-----------+-----------+-----------------+\n\nArithmetic operations with floats are not directly supported. If you need to operate with floats, you must first convert the float to a Decimal, or the Money object to a float (i.e. float(m)). Please be aware of the `issues and limitations of floating point arithmetics <https://docs.python.org/3/tutorial/floatingpoint.html>`_.\n\n\nCurrency presets\n----------------\n\nIf you use fixed currencies in your code, you may find convenient to create currency-preset Money subclasses:\n\n.. code:: python\n\n    class EUR(Money):\n        def __init__(self, amount='0'):\n            super().__init__(amount=amount, currency='EUR')\n    \n    price = EUR('9.99')\n\n\nFormatting\n==========\n\nMoney objects are printed by default with en_US formatting and the currency code.\n\n.. code:: python\n\n    >>> m = Money('1234.567', 'EUR')\n    >>> str(m)\n    'EUR 1,234.57'\n\nUse ``format(locale=LC_NUMERIC, pattern=None, currency_digits=True, format_type='standard')`` for locale-aware formatting with currency expansion. ``format()`` relies on ``babel.numbers.format_currency()``, and **requires Babel** 2.2 or higher to be installed.\n\n.. code:: python\n\n    >>> m = Money('1234.567', 'USD')\n    >>> m.format('en_US')\n    '$1,234.57'\n    >>> m.format('es_ES')\n    '1.234,57\\xa0$'\n\nThe character ``\\xa0`` is an unicode non-breaking space. If no locale is passed, Babel will use your system's locale. You can also provide a specific pattern to format():\n\n.. code:: python\n\n    >>> m = Money('-1234.567', 'USD')\n    >>> # Regular US format:\n    >>> m.format('en_US', '¤#,##0.00') \n    '-$1,234.57'\n    >>> # Custom negative format:\n    >>> m.format('en_US', '¤#,##0.00;<¤#,##0.00>')\n    '<$1,234.57>'\n    >>> # Spanish format, full currency name:\n    >>> m.format('es_ES', '#,##0.00 ¤¤¤')\n    '-1.234,57 dólares estadounidenses'\n    >>> # Same as above, but rounding (overriding currency natural format):\n    >>> m.format('es_ES', '#0 ¤¤¤', currency_digits=False)\n    '-1235 dólares estadounidenses'\n\nFor more details on formatting see `Babel docs on currency formatting <http://babel.pocoo.org/en/latest/api/numbers.html#babel.numbers.format_currency>`_. To learn more about the formatting pattern syntax check out `Unicode TR35 <http://www.unicode.org/reports/tr35/tr35-numbers.html#Number_Format_Patterns>`_.\n\nCurrency exchange\n=================\n\nCurrency exchange works by \"installing\" a **backend** class that implements the abstract base class (`abc <https://docs.python.org/3/library/abc.html>`_) ``money.exchange.BackendBase``. Its API is exposed through ``money.xrates``, along with setup functions ``xrates.install(pythonpath)``, ``xrates.uninstall()``, and ``xrates.backend_name``.\n\nA simple proof-of-concept backend ``money.exchange.SimpleBackend`` is included:\n\n.. code:: python\n\n    from decimal import Decimal\n    from money import Money, xrates\n\n    xrates.install('money.exchange.SimpleBackend')\n    xrates.base = 'USD'\n    xrates.setrate('AAA', Decimal('2'))\n    xrates.setrate('BBB', Decimal('8'))\n    \n    a = Money(1, 'AAA')\n    b = Money(1, 'BBB')\n    \n    assert a.to('BBB') == Money('4', 'BBB')\n    assert b.to('AAA') == Money('0.25', 'AAA')\n    assert a + b.to('AAA') == Money('1.25', 'AAA')\n\n\n\nXMoney\n======\n\nYou can use ``money.XMoney`` (a subclass of Money), for automatic currency conversion while adding, subtracting, and dividing money objects (+, +=, -, -=, /, //). This is useful when aggregating lots of money objects with heterogeneous currencies. The currency of the leftmost object has priority.\n\n.. code:: python\n\n    from money import XMoney\n    \n    # Register backend and rates as above...\n    \n    a = XMoney(1, 'AAA')\n    b = XMoney(1, 'BBB')\n    \n    assert sum([a, b]) == XMoney('1.25', 'AAA')\n\n\nExceptions\n==========\n\nFound in ``money.exceptions``.\n\n``MoneyException(Exception)``\n    Base class for all exceptions.\n\n``CurrencyMismatch(MoneyException, ValueError)``\n    Thrown when mixing different currencies, e.g. ``Money(2, 'EUR') + Money(2, 'USD')``. Money objects must be converted first to the same currency, or XMoney could be used for automatic conversion.\n\n``InvalidOperandType(MoneyException, TypeError)``\n    Thrown when attempting invalid operations, e.g. multiplication between money objects.\n\n``ExchangeError(MoneyException)``\n    Base class for exchange exceptions.\n\n``ExchangeBackendNotInstalled(ExchangeError)``\n    Thrown if a conversion is attempted, but there is no backend available.\n\n``ExchangeRateNotFound(ExchangeError)``\n    The installed backend failed to provide a suitable exchange rate between the origin and target currencies.\n\n\nHierarchy\n---------\n\n* ``MoneyException``\n    * ``CurrencyMismatch``\n    * ``InvalidOperandType``\n    * ``ExchangeError``\n        * ``ExchangeBackendNotInstalled``\n        * ``ExchangeRateNotFound``\n\n\n\n.. _python-differences:\n\nDifferences between Python versions\n===================================\n\n.. list-table::\n    :header-rows: 1\n    :stub-columns: 1\n    \n    * - Expression\n      - Python 2.x\n      - Python 3.x\n    \n    * - ``round(Money('2.5', 'EUR'))``\n      - Returns ``3.0``, a **float** rounded amount **away from zero**.\n      - Returns ``EUR 2``, a **Money object** with rounded amount to the **nearest even**.\n    \n    * - ``Money('0', 'EUR').amount < '0'``\n      - Returns ``True``. This is the weird but expected behaviour in Python 2.x when comparing Decimal objects with non-numerical objects (Note the '0' is a string). `See note in docs <https://docs.python.org/2/library/stdtypes.html#comparisons>`_.\n      - TypeError: unorderable types: decimal.Decimal() > str()\n\n\n\nDesign decisions\n================\n\nThere are several design decisions in *money* that differ from currently available money class implementations:\n\nLocalization\n------------\n\nDo not keep any kind of locale conventions database inside this package. Locale conventions are extensive and change over time; keeping track of them is a project of its own. There is already such a project and database (the Unicode Common Locale Data Repository), and an excellent python API for it: `Babel <https://pypi.python.org/pypi/Babel>`_.\n\nCurrency\n--------\n\nThere is no need for a currency class. A currency is fully identified by its ISO 4217 code, and localization or exchange rates data are expected to be centralized as databases/services because of their changing nature.\n\nAlso:\n\n+ **Modulo operator (%)**: do not override to mean \"percentage\".\n+ **Numeric type**: you **can** mix numbers and money in binary operations, and objects evaluate to False if their amount is zero.\n+ **Global default currency**: subclassing is a safer solution.\n\n\nContributions\n=============\n\nContributions are welcome. You can use the `regular github mechanisms <https://help.github.com/>`_.\n\nTo be forward-compatible, and given the small size of the package, Python 2.7 is supported in a different source \"branch\" at ``src-py2``.\n\nTo test your changes you will need `tox <https://pypi.python.org/pypi/tox>`_ and python 2.7, 3.4, and 3.5. Simply cd to the package root (by setup.py) and run ``tox``.\n\n\nLicense\n=======\n\nmoney is released under the **MIT license**, which can be found in the file ``LICENSE``.\n\n\n\n\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/carlospalol/money",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "money",
    "package_url": "https://pypi.org/project/money/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/money/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/carlospalol/money"
    },
    "release_url": "https://pypi.org/project/money/1.3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Python Money Class",
    "version": "1.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2068236,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "529f642ef475b58588ce28ea93ed370075dcf1ee801bbc764e1adb4c1f2f2235",
        "md5": "d7330de2580356124f463737079dc400",
        "sha256": "ac049caf19df9502f7a481d5959fc51b038baaa68c5dcef2070ffbb785729f7d"
      },
      "downloads": -1,
      "filename": "money-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d7330de2580356124f463737079dc400",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18369,
      "upload_time": "2016-04-17T13:42:31",
      "upload_time_iso_8601": "2016-04-17T13:42:31.178295Z",
      "url": "https://files.pythonhosted.org/packages/52/9f/642ef475b58588ce28ea93ed370075dcf1ee801bbc764e1adb4c1f2f2235/money-1.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}