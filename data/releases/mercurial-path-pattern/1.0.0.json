{
  "info": {
    "author": "Marcin Kasperski",
    "author_email": "Marcin.Kasperski@mekk.waw.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: DFSG approved",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Topic :: Software Development :: Version Control"
    ],
    "description": ".. -*- mode: rst; compile-command: \"rst2html README.txt README.html\" -*-\n\n==========================================\nMercurial Path Pattern\n==========================================\n\nDon't repeat yourself defining ``[paths]`` over many repositories,\nspecify the general rule once in ``~/.hgrc``.\n\nPath Pattern is a Mercurial_ extension used to define default\nremote path aliases. You may find it helpful if you maintain\nconsistently layed out repository trees on a few machines.\n\nIt also provides shortcut ``hg cloneto «path-alias»`` (clone to\nremote address specified by short name).\n\nUsing path patterns\n=====================\n\nInstall the extension as described below.\n\nWrite in your ``~/.hgrc``::\n\n    [extensions]\n    mercurial_path_pattern =\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    bbssh.local = ~/devel/public/{below}\n    bbssh.remote = ssh://hg@bitbucket.org/Johny/{below:/=-}\n\nImagine ``~/devel/personal/blog/drafts`` and ``~/devel/public/pymods/acme``\nare both some mercurial repositories. Then::\n\n    cd ~/devel/personal/blog/drafts\n    hg push lagrange\n    # Works, pushes to ssh://johny@lagrange.mekk.net/sources/personal/blog/drafts\n\n    cd ~/devel/public/pymods/acme\n    hg pull lagrange\n    # Works, pulls from ssh://johny@lagrange.mekk.net/sources/public/pymods/acme\n    hg pull bbssh\n    # Works too, pulls from ssh://hg@bitbucket.org/Johny/pymods-acme\n\nThis works in spite of the fact, that those repos lack ``.hg/hgrc``.\n\nFor two repositories that's not very useful, but once you have hundred\nof them, managing individual ``.hg/hgrc`` becomes a hassle (imagine\nchanging ``lagrange.mekk.net`` to ``lagrange.mekk.com`` everywhere, or\nmaybe adding second remote alias for the new development machine).\n\n\n.. note::\n\n   On Windows extension tries to handle (in ``.local`` specifications)\n   both native paths (``C:\\repos\\sth``) and portable ones\n   (``C:/repos/sth``), but it is recommended to use the\n   latter. Whichever syntax is used, extracted ``{fragments}`` contain\n   ``/`` (so they can be easily used in remote urls).\n\nBy default path patterns have lower priority than per-repository\npaths, so in case you define ``lagrange`` path on repository level, it\nwon't be overwritten by pattern. You can augment it by adding\n``.enforce``::\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    lagrange.enforce = true\n\nWith such config pattern wins against any path from ``.hg/hgrc``\n(usually it is not recommended but can be handy if you have some\nbroken paths scattered around repositories).\n\nTo (re)use the same alias in a few different locations, use\n``.alias``::\n\n    [path_pattern]\n    production.local = ~/devel/{repo}\n    production.remote = ssh://www-owner@www.mekk.net/public/{repo}\n    experiment.local = ~/experiments/{repo}\n    experiment.remote = ssh://www-owner@beta.mekk.net/public/{repo}\n    experiment.alias = production\n\nDefinitions above let you ``hg push production`` not only in\n``~/devel/website/blog`` but also in ``~/experiments/website/qagame``.\nWhether this is a good idea, is up to you.\n\nYou can define ``default`` via path pattern if you wish::\n\n    [path_pattern]\n    default_hobby.local = ~/hobby/{repo}\n    default_hobby.remote =  ssh://hg@bitbucket.org/Johny/{below:/=-}\n    default_hobby.alias = default\n    default_wrk.local = ~/work/{what}\n    default_wrk.remote =  https://tim@devel-department.local/{what}\n    default_wrk.alias = default\n\n(here in ``~/hobby`` I push to bitbucket by default, but in ``~/work``\nto department server).\n\n.. note::\n\n   Mercurial will sooner or later define ``default`` path in\n   per-repository ``.hg/hgrc`` files.  Enforce your patterns\n   (``default_hobby.enforce = true``) if you need to defeat those\n   settings.\n\nPath Pattern mostly works behind the courtains, making standard commands\nlike ``hg pull``, ``hg push``, and ``hg incoming`` aware of extra\npaths. Still, it implements some commands described below.\n\nUsing cloneto\n======================\n\nThe ``cloneto`` command makes it easier to clone repository to remote url::\n\n    hg cloneto lagrange\n    # Equivalent to \n    #   hg clone . ssh://johny@lagrange.mekk.net/sources/pymodules/acme\n    # but noticeably shorter\n\nwhich works both for normal paths and paths derived from patterns, but\nis especially handy with patterns. In particular, it makes\nit possible to push newly created repository, for example::\n\n    cd ~/devel/libs\n    hg init xyz\n    cd xyz\n    hg cloneto lagrange\n    # Works, creates soures/libs/xyz on johny@lagrange.mekk.net\n\n.. note::\n\n   While ``cloneto`` is particularly useful with patterns, it works\n   for usual paths as well. You can write (new) path to repository\n   ``.hg/hgrc``, then ``hg cloneto «new-name»``.\n\nInstead of clonefrom\n=====================\n\nThere is no ``clonefrom`` command (at least for now), but it is not\nreally needed. The following works (imagine ``libs/zzz`` exists on\n``lagrange.mekk.net``, but is not yet cloned *here*)::\n\n    cd ~/devel/libs\n    hg init zzz\n    cd zzz\n    hg pull lagrange\n\n\nTesting pattern configuration\n==============================\n\nThe standard::\n\n    hg paths\n\ncommand lists paths defined for current repository, after pattern\nexpansion. Use it (in a few different repositories) to verify whether\nyour patterns generate proper paths.\n\nThe::\n\n    hg list_path_patterns\n\ncommand prints all patterns found in configuration. Use it to detect\ntypos causing some patterns to be ignored and to check the final\nresult of configuration processing.\n\n\n\nPattern syntax\n=====================\n\nPatterns are defined in ``[path_pattern]`` section of mercurial\nconfiguration file (typically they are kept in ``~/.hgrc``, but feel\nfree to define them system-wide).\n\nYou may have as many patterns as you like. Example::\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    euler.local = ~/devel/{repo}\n    euler.remote =  ssh://johny@euler.mekk.net/devel/{repo:/=.}/hg\n    wrk.local = ~/work/{what}\n    wrk.remote =  https://tim@devel-department.local/{what:/=__:\\=__}\n    ugly.local = ~/(topic)/sources/{subpath}/repo\n    ugly.remote = ssh://hg{topic}@devel.local/{topic}/{subpath}\n    cfg.local = ~/.config/upstart\n    cfg.remote = ssh://hgrepos@central.com/configs/riemann/upstart\n    cfg2.local = ~/.local/share/applications\n    cfg2.remote = ssh://hgrepos@central.com/configs/riemann/applications\n    cfg2.alias = cfg\n\nEvery pattern is defined by the pair of keys - ``«alias».local`` and\n``«alias».remote`` - or, less frequently, by set of three keys\n``«prefix».local``, ``«prefix».remote``, and ``«prefix».alias`` (where\n``«prefix»`` is anything unique).\n\nWhile processing patterns, the extension matches current repository\nroot path against ``local`` pattern, and if it matches, extracts parts\nmarked with markers and fills remote part with them to calculate\nproper path to use.\n\n.. note::\n\n    First matching pattern is used if more than one matches. Picking\n    *best* pattern may be implemented in the future.\n\nThe ``.local`` part should specify absolute repository path (``~`` and\n``~user`` are allowed). Some part(s) of the path may be replaced with\n``{brace}`` or ``(paren)`` markers:\n\n- ``{brace}`` matches everything aggressively (to the very end, unless\n  some fixed text follows it),\n\n- ``(paren)`` is limited to single path item and does not cross ``/`` or ``\\\\`` characters).\n\nThose parts will be extracted from local repository path and available\nfor use in remote path being defined.\n\n.. note::\n\n    Typically there will be single ``{marker}`` on the end, but more\n    obscure patterns are possible (as ``ugly`` above\n    illustrates). \n\nMarkers are optional, if no marker is used (see ``cfg`` above), rule\napplies to exactly one repository. This may make sense (over defining\npath in given repo ``.hg/hgrc``) if you prefer to centralize your\npaths.\n\nThe ``.remote`` part defines appropriate remote address. This is typical\nMercurial remote path, but ``{marker}``'s can be used to refer to\nvalues extracted from local path: ``{sth}`` is replaced with whatever\nmatched ``{sth}`` or ``(sth)`` present in local path.\n\nSimple modifications are supported – ``{sth:x=y}`` means *take whatever\nwas extracted as* ``sth`` *and replace any* ``x`` *with* ``y``. This is\nmostly used to replace ``/`` with some other character (in particular\n``{below:/=-}`` handles BitBucket convention, replacing slashes with minuses).\n\nReplacements can be chained if necessary – ``{sth:x=y,v=z}`` means\n*take whatever was extracted as* ``sth``, *replace any* ``x`` *with*\n``y``, *then replace any* ``v`` *with* ``z``, *then use the final\nresult*.\n\nFor example, with definitions above, if you happen to work\nin repository ``~/devel/python/libs/webby``, the extension will:\n\n1. Find that ``lagrange.local`` matches and that ``{repo}`` is\n   ``python/libs/webby``.   Filling ``lagrange.remote`` with\n   that value generates\n   ``ssh://johny@lagrange.mekk.net/sources/python/libs/webby``, so\n   finally it will create path alias\n   ``lagrange=ssh://johny@lagrange.mekk.net/sources/python/libs/webby``\n\n2. Discover that ``euler.local`` also matches, and ``{repo}`` is again\n   ``python/libs/webby``. After replacing ``/``-s with ``.``-s,\n   that brings alias \n   ``euler=ssh://johny@euler.mekk.net/devel/python.libs.webby/hg``\n\n3. Ignore remaining patterns as they do not match.\n\nIf ``.alias`` is defined, value of this item serves as path alias.\nOtherwise pattern prefix is used as alias. So, with definitions above:\n\n1. You may issue ``hg pull lagrange`` or ``hg push euler`` in\n   ``~/devel/snippets/js``.\n\n2. You may issue ``hg push cfg`` in both ``~/.config/upstart``\n   and ``~/.local/share/applications`` (in the latter thanks\n   to ``.alias``).\n\n\nInstallation\n=================================================\n\nLinux/Unix (from PyPI)\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have working ``pip`` or ``easy_install``::\n\n    pip install --user mercurial_path_pattern\n\nor maybe::\n\n    sudo pip install mercurial_path_pattern\n\n(or use ``easy_install`` instead of ``pip``). Then activate by::\n\n    [extensions]\n    mercurial_path_pattern =\n\nTo upgrade, repeat the same command with ``--upgrade`` option, for\nexample::\n\n    pip install --user --upgrade mercurial_path_pattern\n\nLinux/Unix (from source)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you don't have ``pip``, or wish to follow development more closely:\n\n- clone both this repository and `mercurial_extension_utils`_ and put\n  them in the same directory, for example::\n\n    cd ~/sources\n    hg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\n    hg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n\n- update to newest tags,\n\n- activate by::\n\n    [extensions]\n    mercurial_path_pattern = ~/sources/mercurial-path_pattern/mercurial_path_pattern.py\n\nTo upgrade, pull and update.\n\nNote that directory names matter. See `mercurial_extension_utils`_ for\nlonger description of this kind of installation.\n\nWindows\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have any Python installed, you may install with ``pip``::\n\n    pip install mercurial_path_pattern\n\nStill, as Mercurial (whether taken from TortoiseHg_, or own package)\nuses it's own bundled Python, you must activate by specifying the path::\n\n    [extensions]\n    mercurial_path_pattern = C:/Python27/Lib/site-packages/mercurial_path_pattern.py\n    ;; Or wherever pip installed it\n\nTo upgrade to new version::\n\n    pip --upgrade mercurial_path_pattern\n\nIf you don't have any Python, clone repositories::\n\n    cd c:\\hgplugins\n    hg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\n    hg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n\nupdate to tagged versions and activate by path::\n\n    [extensions]\n    mercurial_path_pattern = C:/hgplugins/mercurial-path_pattern/mercurial_path_pattern.py\n    ;; Or wherever you cloned\n\nSee `mercurial_extension_utils`_ documentation for more details on\nWindows installation. \n\n.. note::\n\n   Directory names matter. If ``mercurial_path_pattern.py`` can't find\n   ``mercurial_extension_utils.py`` in system path, it looks for it in\n   its own directory, in ``../mercurial_extension_utils``, and in\n   ``../extension_utils``.\n\n\n\nRelated extensions\n====================\n\n`Schemes Extension`_, distributed together with Mercurial, makes it\npossible to simplify repository URLs. For example, you can write::\n\n    hg clone bb://Mekk/mercurial-path_pattern\n\n(``bb`` is schemes alias expanding to BitBucket url).\n\nWhile both Path Pattern and Schemes are related to path management,\nthey target different usage patterns. Schemes is particularly useful\nfor people making frequent ad-hoc clones, Path Pattern is about\nkeeping consistent synchronized repository hierarchies. With Schemes\nurls you type are shorter and less error-prone, with Path Pattern\nyou don't type them at all (as long as you stay within *your* code).\n\nBoth can cooperate, schemes aliases can be used in pattern definitions::\n\n    [path_pattern]\n    bitb.local = ~/sources/{below}\n    bitb.remote = bb://Mekk/{below:/=-}\n\nHistory\n==================================================\n\nSee `HISTORY.txt`_\n\nDevelopment, bug reports, enhancement suggestions\n===================================================\n\nDevelopment is tracked on BitBucket, see \nhttp://bitbucket.org/Mekk/mercurial-path_pattern/\n\nUse BitBucket issue tracker for bug reports and enhancement\nsuggestions.\n\nAdditional notes\n================\n\nInformation about this extension is also available\non Mercurial Wiki: http://mercurial.selenic.com/wiki/PathPatternExtension\n\n\n\n.. _Mercurial: http://mercurial.selenic.com\n.. _HISTORY.txt: http://bitbucket.org/Mekk/mercurial-path_pattern/src/tip/HISTORY.txt\n.. _mercurial_extension_utils: https://bitbucket.org/Mekk/mercurial-extension_utils/\n.. _Schemes Extension: https://www.mercurial-scm.org/wiki/SchemesExtension\n.. _TortoiseHg: http://tortoisehg.bitbucket.org/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://bitbucket.org/Mekk/mercurial-path_pattern",
    "keywords": "mercurial hg path alias",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mercurial_path_pattern",
    "package_url": "https://pypi.org/project/mercurial_path_pattern/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mercurial_path_pattern/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://bitbucket.org/Mekk/mercurial-path_pattern"
    },
    "release_url": "https://pypi.org/project/mercurial_path_pattern/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Mercurial Path Pattern Extension",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9133565,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e3f83a4b36cae053a2cc137f354b011c3e063fe2614dfafe3cd8482ce17dcc0",
        "md5": "dec66108280a5e47461f9f93a48748bb",
        "sha256": "d1eaa1a48f28887772e3d59fc58f143e3e4579d7667d86ce1f51f26c4711fe08"
      },
      "downloads": -1,
      "filename": "mercurial_path_pattern-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dec66108280a5e47461f9f93a48748bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11647,
      "upload_time": "2015-10-28T22:34:40",
      "upload_time_iso_8601": "2015-10-28T22:34:40.167892Z",
      "url": "https://files.pythonhosted.org/packages/5e/3f/83a4b36cae053a2cc137f354b011c3e063fe2614dfafe3cd8482ce17dcc0/mercurial_path_pattern-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}