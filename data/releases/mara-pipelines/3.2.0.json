{
  "info": {
    "author": "Mara contributors",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Mara Pipelines\n\n[![Build Status](https://travis-ci.org/mara/mara-pipelines.svg?branch=master)](https://travis-ci.org/mara/mara-pipelines)\n[![PyPI - License](https://img.shields.io/pypi/l/mara-pipelines.svg)](https://github.com/mara/mara-pipelines/blob/master/LICENSE)\n[![PyPI version](https://badge.fury.io/py/mara-pipelines.svg)](https://badge.fury.io/py/mara-pipelines)\n[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://communityinviter.com/apps/mara-users/public-invite)\n\n\n\nThis package contains a lightweight data transformation framework with a focus on transparency and complexity reduction. It has a number of baked-in assumptions/ principles:\n\n- Data integration pipelines as code: pipelines, tasks and commands are created using declarative Python code.\n\n- PostgreSQL as a data processing engine.\n\n- Extensive web ui. The web browser as the main tool for inspecting, running and debugging pipelines.\n\n- GNU make semantics. Nodes depend on the completion of upstream nodes. No data dependencies or data flows.\n\n- No in-app data processing: command line tools as the main tool for interacting with databases and data.\n\n- Single machine pipeline execution based on Python's [multiprocessing](https://docs.python.org/3.6/library/multiprocessing.html). No need for distributed task queues. Easy debugging and output logging.\n\n- Cost based priority queues: nodes with higher cost (based on recorded run times) are run first.\n\n&nbsp;\n\n## Installation\n\nTo use the library directly, use pip:\n\n```\npip install mara-pipelines\n```\n\nor\n \n```\npip install git+https://github.com/mara/mara-pipelines.git\n```\n\nFor an example of an integration into a flask application, have a look at the [mara example project 1](https://github.com/mara/mara-example-project-1) and [mara example project 2](https://github.com/mara/mara-example-project-2).\n\nDue to the heavy use of forking, Mara Pipelines does not run natively on Windows. If you want to run it on Windows, then please use Docker or the [Windows Subsystem for Linux](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux). \n\n&nbsp;\n\n## Example\n\nHere is a pipeline \"demo\" consisting of three nodes that depend on each other: the task `ping_localhost`, the pipeline `sub_pipeline` and the task `sleep`:\n\n```python\nfrom mara_pipelines.commands.bash import RunBash\nfrom mara_pipelines.pipelines import Pipeline, Task\nfrom mara_pipelines.ui.cli import run_pipeline, run_interactively\n\npipeline = Pipeline(\n    id='demo',\n    description='A small pipeline that demonstrates the interplay between pipelines, tasks and commands')\n\npipeline.add(Task(id='ping_localhost', description='Pings localhost',\n                  commands=[RunBash('ping -c 3 localhost')]))\n\nsub_pipeline = Pipeline(id='sub_pipeline', description='Pings a number of hosts')\n\nfor host in ['google', 'amazon', 'facebook']:\n    sub_pipeline.add(Task(id=f'ping_{host}', description=f'Pings {host}',\n                          commands=[RunBash(f'ping -c 3 {host}.com')]))\n\nsub_pipeline.add_dependency('ping_amazon', 'ping_facebook')\nsub_pipeline.add(Task(id='ping_foo', description='Pings foo',\n                      commands=[RunBash('ping foo')]), ['ping_amazon'])\n\npipeline.add(sub_pipeline, ['ping_localhost'])\n\npipeline.add(Task(id='sleep', description='Sleeps for 2 seconds',\n                  commands=[RunBash('sleep 2')]), ['sub_pipeline'])\n```\n\nTasks contain lists of commands, which do the actual work (in this case running bash commands that ping various hosts). \n\n&nbsp;\n\nIn order to run the pipeline, a PostgreSQL database needs to be configured for storing run-time information, run output and status of incremental processing: \n\n```python\nimport mara_db.auto_migration\nimport mara_db.config\nimport mara_db.dbs\n\nmara_db.config.databases \\\n    = lambda: {'mara': mara_db.dbs.PostgreSQLDB(host='localhost', user='root', database='example_etl_mara')}\n\nmara_db.auto_migration.auto_discover_models_and_migrate()\n```\n\nGiven that PostgresSQL is running and the credentials work, the output looks like this (a database with a number of tables is created):\n\n```\nCreated database \"postgresql+psycopg2://root@localhost/example_etl_mara\"\n\nCREATE TABLE data_integration_file_dependency (\n    node_path TEXT[] NOT NULL, \n    dependency_type VARCHAR NOT NULL, \n    hash VARCHAR, \n    timestamp TIMESTAMP WITHOUT TIME ZONE, \n    PRIMARY KEY (node_path, dependency_type)\n);\n\n.. more tables\n```\n\n### CLI UI\n\nThis runs a pipeline with output to stdout:\n\n```python\nfrom mara_pipelines.ui.cli import run_pipeline\n\nrun_pipeline(pipeline)\n```\n\n![Example run cli 1](https://github.com/mara/mara-pipelines/raw/master/docs/example-run-cli-1.gif)\n\n&nbsp;\n\nAnd this runs a single node of pipeline `sub_pipeline` together with all the nodes that it depends on:\n\n```python\nrun_pipeline(sub_pipeline, nodes=[sub_pipeline.nodes['ping_amazon']], with_upstreams=True)\n```\n\n![Example run cli 2](https://github.com/mara/mara-pipelines/raw/master/docs/example-run-cli-2.gif)\n\n&nbsp;\n\n\nAnd finally, there is some sort of menu based on [pythondialog](http://pythondialog.sourceforge.net/) that allows to navigate and run pipelines like this:\n\n```python\nfrom mara_pipelines.ui.cli import run_interactively\n\nrun_interactively()\n```\n\n![Example run cli 3](https://github.com/mara/mara-pipelines/raw/master/docs/example-run-cli-3.gif)\n\n\n\n### Web UI\n\nMore importantly, this package provides an extensive web interface. It can be easily integrated into any [Flask](http://flask.pocoo.org/) based app and the [mara example project](https://github.com/mara/mara-example-project) demonstrates how to do this using [mara-app](https://github.com/mara/mara-app).\n\nFor each pipeline, there is a page that shows\n\n- a graph of all child nodes and the dependencies between them\n- a chart of the overal run time of the pipeline and it's most expensive nodes over the last 30 days (configurable)\n- a table of all the pipeline's nodes with their average run times and the resulting queuing priority\n- output and timeline for the last runs of the pipeline\n\n\n![Mara pipelines web ui 1](https://github.com/mara/mara-pipelines/raw/master/docs/mara-pipelines-web-ui-1.png)\n\nFor each task, there is a page showing \n\n- the upstreams and downstreams of the task in the pipeline\n- the run times of the task in the last 30 days\n- all commands of the task\n- output of the last runs of the task\n\n![Mara pipelines web ui 2](https://github.com/mara/mara-pipelines/raw/master/docs/mara-pipelines-web-ui-2.png)\n\n\nPipelines and tasks can be run from the web ui directly, which is probably one of the main features of this package: \n\n![Example run web ui](https://github.com/mara/mara-pipelines/raw/master/docs/example-run-web-ui.gif)\n\n&nbsp;\n\n# Getting started\n\nDocumentation is currently work in progress. Please use the [mara example project 1](https://github.com/mara/mara-example-project-1) and [mara example project 2](https://github.com/mara/mara-example-project-2) as a reference for getting started. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mara/mara-pipelines",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mara-pipelines",
    "package_url": "https://pypi.org/project/mara-pipelines/",
    "platform": null,
    "project_url": "https://pypi.org/project/mara-pipelines/",
    "project_urls": {
      "Homepage": "https://github.com/mara/mara-pipelines"
    },
    "release_url": "https://pypi.org/project/mara-pipelines/3.2.0/",
    "requires_dist": [
      "mara-db (>=4.7.1)",
      "mara-page (>=1.3.0)",
      "graphviz (>=0.8)",
      "python-dateutil (>=2.6.1)",
      "pythondialog (>=3.4.0)",
      "more-itertools (>=3.1.0)",
      "psutil (>=5.4.0)",
      "wheel (>=0.31)",
      "requests (>=2.19.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Opinionated lightweight ELT pipeline framework",
    "version": "3.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16860731,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a16f36f928dcbc7e2f46e2bf05936deec571e8e777250187a5ba58ac4e2f81d1",
        "md5": "de26e106332c1d3674ce56eb6e67d42c",
        "sha256": "da419483d9539822baa230eff741830e9a84394959d540e9a92a989dae8fffdf"
      },
      "downloads": -1,
      "filename": "mara_pipelines-3.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "de26e106332c1d3674ce56eb6e67d42c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 77388,
      "upload_time": "2022-05-29T20:09:09",
      "upload_time_iso_8601": "2022-05-29T20:09:09.721849Z",
      "url": "https://files.pythonhosted.org/packages/a1/6f/36f928dcbc7e2f46e2bf05936deec571e8e777250187a5ba58ac4e2f81d1/mara_pipelines-3.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50f286505c1cc007c84318db3a6b187779b7d24c6b793aeb68da99ef1d177209",
        "md5": "a517a31f9ffefba5fad8380d3d0593dd",
        "sha256": "eb4945d8753e7152fd659275a25f101f88486c05ebe378a58ccc860dfa32e0ce"
      },
      "downloads": -1,
      "filename": "mara-pipelines-3.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a517a31f9ffefba5fad8380d3d0593dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3182692,
      "upload_time": "2022-05-29T20:09:19",
      "upload_time_iso_8601": "2022-05-29T20:09:19.945291Z",
      "url": "https://files.pythonhosted.org/packages/50/f2/86505c1cc007c84318db3a6b187779b7d24c6b793aeb68da99ef1d177209/mara-pipelines-3.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}