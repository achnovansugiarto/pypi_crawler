{
  "info": {
    "author": "Stephen Nayfach",
    "author_email": "snayfach@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MicrobeCensus\r\nMicrobeCensus is a fast and easy to use pipeline for estimating the average genome size (AGS) of a microbial \r\ncommunity from metagenomic data. \r\n\r\nIn short, AGS is estimated by aligning reads to a set of universal single-copy gene families present in nearly all cellular microbes (Bacteria, Archaea, Fungi). \r\nBecause these genes occur once per genome, the average genome size of a microbial community is inversely proportional to the fraction of reads which hit these genes.\r\n\r\nOnce AGS is obtained, it becomes possible to obtain the total coverage of microbial genomes present in a sample (genome equivalents = total bp sequenced/AGS in bp), which can be useful for normalizing gene abundances.\r\n\r\n### Requirements\r\n* Python dependencies (installed via setup.py): Numpy, BioPython\r\n* Supported platforms: Mac OSX, Unix/Linux; Windows not currently supported\r\n* Python version 2 or 3\r\n\r\n### Installation\nDownload MicrobeCensus from: https://github.com/snayfach/MicrobeCensus/archive/v1.0.7.tar.gz  \r\n\r\nUnpack the project: \r\n`tar -zxvf MicrobeCensus-1.0.7.tar.gz`\r\n\r\nNavigate to the installation directory:  \r\n`cd /path/to/MicrobeCensus`  \r\n\r\nRun setup.py. This will install any dependencies:  \r\n`python setup.py install` or  \r\n`sudo python setup.py install` to install as a superuser\r\n\r\nAlternatively, MicrobeCensus can be installed directly from PyPI:  \r\n`pip install MicrobeCensus` or   \r\n`sudo pip install MicrobeCensus` to install as a superuser, or  \r\n`pip install --user MicrobeCensus` to install in your home directory  \r\n\r\n### Using MicrobeCensus without installing\r\nAlthough this is not recommended, users may wish to run MicrobeCensus without running setup.py.  \r\n\r\nBoth BioPython and Numpy will both need to be already installed.\r\nYou should be able to enter the following command in the python interpreter without getting an error:  \r\n`>>> import Bio.SeqIO`  \r\n`>>> import numpy`\r\n\r\nNext, add the MicrobeCensus module to your PYTHONPATH environmental variable:  \r\n`export PYTHONPATH=$PYTHONPATH:/path/to/MicrobeCensus` or  \r\n`echo -e \"\\nexport PYTHONPATH=\\$PYTHONPATH:/path/to/MicrobeCensus\" >> ~/.bash_profile` to avoid entering the command in the future\r\n\r\nFinally, add the scripts directory to your PATH environmental variable:  \r\n`export PATH=$PATH:/path/to/MicrobeCensus/scripts` or  \r\n`echo -e \"\\nexport PATH=\\$PATH:/path/to/MicrobeCensus/scripts\" >> ~/.bash_profile` to avoid entering the command in the future\r\n\r\nNow, you should be able to enter the command into your terminal without getting an error:  \r\n`run_microbe_census.py -h`\r\n\r\n### Testing the software\r\nAfter installing MicrobeCensus, we recommend testing the software:  \r\n`cd /path/to/MicrobeCensus/test`  \r\n`python test_microbe_census.py`\r\n\r\n### Running MicrobeCensus\r\nMicrobeCensus can either be run as a command-line script or imported to python as a module.\r\n\r\n#### Command-line usage\r\n**run_microbe_census.py [-options] seqfiles outfile**\r\n\r\nInput/Output (required):\r\n* **SEQFILES**  \r\npath to input metagenome(s)  \r\nfor paired-end metagenomes use commas to specify each file (ex: read_1.fq.gz,read_2.fq.gz)  \r\ncan be FASTQ/FASTA  \r\ncan be gzip (.gz) or bzip (.bz2) compressed\r\n* **OUTFILE**  \r\npath to output file containing AGS estimate \r\n\r\nPipeline throughput (optional):\r\n* **-n NREADS**  \r\nnumber of reads to sample from seqfile and use for AGS estimation.  \r\nto use all reads set to large number, like 100000000  \r\n(default = 2000000)\n* **-t THREADS**  \r\nnumber of threads to use for database search (default= 1)  \n* **-e**  \r\nquit after average genome size is obtained and do not estimate the number of genome equivalents in SEQFILES.  \nuseful in combination with -n for quick tests (default = False)  \r\n\r\nFile type (optional):\r\n* **-f {fasta,fastq}**  \r\nfile type (default = autodetect)\r\n* **-c {fastq-sanger,fastq-solexa,fastq-illumina}**  \r\nquality score encoding (default = autodetect)\r\n\r\nQuality control (optional):\r\n* **-l {50,60,70,80,90,100,110,120,130,140,150,175,200,225,250,300,350,400,450,500}**  \r\nall reads trimmed to this length; reads shorter than this are discarded  \r\n(default = median read length)\r\n* **-q MIN_QUALITY**  \r\nminimum base-level PHRED quality score (default = -5)\r\n* **-m MEAN_QUALITY**  \r\nminimum read-level PHRED quality score (default = -5)\r\n* **-d**  \r\nfilter duplicate reads (default = False)\r\n* **-u MAX_UNKNOWN**  \r\nmax percent of unknown bases per read (default = 100)\r\n                        \r\nMisc options: \r\n* **-h, --help:**            show this help message and exit \r\n* **-v:**                    print program's progress to stdout (default = False) \r\n* **-V, --version:**         show program's version number and exit \r\n\r\n#### Module usage\r\n\r\nFirst, import the module:  \r\n`>>> from microbe_census import microbe_census`\r\n\r\nNext, setup your options and arguments, formatted as a dictionary. The path to your metagenome is the only requirement (default values will be used for all other options):  \r\n`>>> args = {'seqfiles':['MicrobeCensus/microbe_census/example/example.fq.gz']}`\r\n\r\nIf you have paired-end libraries, separate them with a comma:  \r\n`>>> args = {'seqfiles':['seqfile_1.fq.gz', 'seqfile_2.fq.gz']}`\r\n\r\nAlternatively, other options can be specified:  \r\n```\r\n>>> args = {\r\n  'seqfiles':['MicrobeCensus/microbe_census/example/example.fq.gz'],\r\n  'nreads':100000,\r\n  'read_length':100,\r\n  'file_type':'fastq',\r\n  'quality_type':'fastq-sanger',\r\n  'threads':1,\r\n  'min_quality':10,\r\n  'mean_quality':10,\r\n  'filter_dups':False,\r\n  'max_unknown':0,\r\n  'verbose':True}\r\n```\r\n\r\nFinally, the entire pipeline can be run by passing your arguments to the run_pipeline function. MicrobeCensus returns the estimated AGS of your metagenome, along with a dictionary of used arguments:\r\n`average_genome_size, args = microbe_census.run_pipeline(args)`\r\n\r\nFor normalization, you can also estimate the number of genome equivalents in your metagenome:  \r\n`count_bases = microbe_census.count_bases(args['seqfiles'])`  \r\n`genome_equivalents = count_bases/average_genome_size`\r\n\r\n\r\n#### Recommended options\r\n* When in doubt, use default parameters! In most cases, MicrobeCensus tries to pick the best parameters for you. \r\n* For more accurate estimates of AGS, use -n to increase the number of reads sampled. The default value of 2,000,000 should give good results, but more reads may result in slightly more accurate estimates, particularly when AGS is very large.\r\n* Don't use quality filtering options (-q, -m, -d, -u) if you plan on using MicrobeCensus for normalization. In this case, MicrobeCensus should be directly run on the metagenome you used for estimating gene-family abundances.\r\n* Use -v/--verbose to print program progress\r\n\r\n### Output format\r\n**Parameters**  \r\n*metagenome*: path to your metagenome(s)  \r\n*reads_sampled*: the number of reads sampled from the metagenome to estimate AGS  \r\n*trimmed_length*: reads were trimmed to this length to estimate AGS  \r\n*min_quality*: minimum per-base quality  \r\n*mean_quality*: minimum average-base quality  \r\n*filter_dups*: filter exact duplicate reads  \r\n*max_unknown*: filter reads where the % of Ns is greater than this\r\n\r\n**Results**  \r\n*average_genome_size*: the average genome size (in bp) of your input metagenome  \r\n*total_bases*: the total number of base-pairs of your input metagenome  \r\n*genome_equivalents*: the total coverage of microbial genomes in your input metagenome\r\n\r\n### Normalization\r\nThe number of genome equivalents can be used to normalize count data obtained from metagenomes using the statistic **RPKG (reads per kb per genome equivalent)**. This is similar to the commonly used statistic RPKM, but instead of dividing by the number of total mapped reads, we divide by the number of genome equivalents:\r\n\r\n>RPKG = (reads mapped to gene)/(gene length in kb)/(genome equivalents)\r\n\r\nUse case: \r\nWe have two metagenomic libraries, L1 and L2, and we use MicrobeCensus to estimate the number of genome equivilants in each: \r\n>GE_L1 = 40  \r\n>GE_L2 = 20  \r\n\r\nNext, we map reads from each library to a reference database which contains a gene of interest G. G is 1000 bp long. \r\nWe get 100 reads mapped to gene G from each library:\r\n>LENGTH_G = 1,000 bp  \r\n>MAPPED_READS_G_L1 = 100  \r\n>MAPPED_READS_G_L2 = 100\r\n\r\nFinally, we quantify RPKG for gene G in each library:\r\n>RPKG for G in L1 = (100 mapped reads)/(1 kb)/(40 GE) = 2.5  \r\n>RPKG for G in L2 = (100 mapped reads)/(1 kb)/(20 GE) = 5.0  \r\n\r\n### Software speed\r\n* Run times are for a 150 bp library. Expect longer/shorter runtimes depending on read length.\r\n\r\nThreads (-t)  | Reads/Second\r\n------------- | -------------\r\n1  | 830\r\n2  | 1,300\r\n4  | 1,800\r\n8  | 2,000\r\n\r\n### Known bugs/issues\r\n* MicrobeCensus cannot hande FASTQ files with invalid formatting. See: https://en.wikipedia.org/wiki/FASTQ_format#Format. Common mistakes include differences in descriptions between sequence and quality headers:\r\n```\r\n@SEQ_ID\r\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\r\n+SEQ_ID not ok\r\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65\r\n```\r\n```\r\n@SEQ_ID this is ok\r\nGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT\r\n+SEQ_ID this is ok\r\n!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65\r\n```\r\n\r\n\r\n### Training\r\nWe have included scripts and documentation for retraining MicrobeCensus, using user-supplied training genomes and gene families. Documentation and scripts can be found under: MicrobeCensus/training\r\n\r\n### Citing\r\nIf you use MicrobeCensus, please cite:  \r\n\r\nNayfach, S. and Pollard, K.S. Average genome size estimation improves comparative metagenomics and sheds light on the functional ecology of the human microbiome. _Genome biology 2015;**16**(1):51_.\r\n\r\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/snayfach/MicrobeCensus",
    "keywords": null,
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "MicrobeCensus",
    "package_url": "https://pypi.org/project/MicrobeCensus/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/MicrobeCensus/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/snayfach/MicrobeCensus"
    },
    "release_url": "https://pypi.org/project/MicrobeCensus/1.0.7/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Estimation of average genome size from metagenomic data",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1985998,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0bd3a36bba61fdbbd9b69b9b1ba689e2e2d8791b31e203a9a139b4b4c390457",
        "md5": "89b5169ee898fea263040f55126523e6",
        "sha256": "3df0291d6b8784c58d2e86af2e743a766535f4aadc06459fac86ae9d03f3691c"
      },
      "downloads": -1,
      "filename": "MicrobeCensus-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "89b5169ee898fea263040f55126523e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22021345,
      "upload_time": "2016-03-02T17:22:33",
      "upload_time_iso_8601": "2016-03-02T17:22:33.064121Z",
      "url": "https://files.pythonhosted.org/packages/d0/bd/3a36bba61fdbbd9b69b9b1ba689e2e2d8791b31e203a9a139b4b4c390457/MicrobeCensus-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}