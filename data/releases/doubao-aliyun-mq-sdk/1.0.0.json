{
  "info": {
    "author": "biao.xu",
    "author_email": "biao.xu@baodanyun-inc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# DOUBAO-ALIYUN-MQ-SDK\n\n豆包阿里云rocketMQ SDK\n\n## 安装\n\n```bash\npip3 install doubao-aliyun-mq-sdk\n```\n\n或者\n\n```bash\npython3 setup.py install\n```\n\n## 使用\n\n```python\nfrom doubao_aliyun_mq import Client as AliyunMQClient\n\n\naliyun_mq_client = AliyunMQClient(<http_endpoint>, <access_key>, <secret_key>)\n# 获取消费者实例\nconsumer = aliyun_mq_client.get_consumer(<instance_id>, <topic_name>, <group_id>)\n# 获取生产者实例\nproducer = aliyun_mq_client.get_producer(<instance_id>, <topic_name>)\n```\n\n### 生产者（producer）\n\n#### `producer.send`\n\n发送消息\n\n* `msg`: 消息内容， 类型str\n* `tag`: 消息标签， 默认 ''\n* `properties`: 属性， 类型dict， 默认 None\n* `start_deliver_time`: 定时消息,毫秒级绝对时间，默认 None\n\n#### `producer.send_json`\n\n发送json格式的消息\n\n* `msg`: 消息内容(json)， 类型dict\n* `tag`: 消息标签， 默认 ''\n* `properties`: 属性， 类型dict， 默认 None\n* `start_deliver_time`: 定时消息,毫秒级绝对时间，默认 None\n\n### 消费者（consumer）\n\n#### `consumer.receive`\n\n接收消息\n\n* `batch`: 一次最多接收条数(最多可设置为16条)， 默认 1\n* `wait_seconds`: 长轮询时间（最多可设置为30秒）， 默认 3\n\n#### `consumer.ack_message`\n\n确认消息\n\n* `recv_msgs`: 接收到的消息列表， 类型 list\n\n#### `consumer.consume`\n\n使用with语句实现消费消息（接收并确认）\n\n* `batch`: 一次最多接收条数(最多可设置为16条)， 默认 1\n* `wait_seconds`: 长轮询时间（最多可设置为30秒）， 默认 3\n\n#### `consumer.consume_decorator`\n\n消费装饰器，被装饰的函数第一个参数返回接收到的消息泪飙\n\n* `batch`: 一次最多接收条数(最多可设置为16条)， 默认 1\n* `wait_seconds`: 长轮询时间（最多可设置为30秒）， 默认 3\n\n## 示例\n\n```python\nfrom doubao_config import Client as ConfigClient\nimport time\nfrom doubao_aliyun_mq import Client as AliyunMQClient\n\n\n# 配合doubao-config使用\nconfig_client = ConfigClient(<config_host>, <config_username>, <config_password>)\nconfig = config_client.get_config(<application>, <profile>)\n\naliyun_mq_client = AliyunMQClient(\n    config['base.comm.rocket-mq.onsAddr.digital.http'], config['base.rocket-mq.accessKeyId'],\n    config['base.rocket-mq.accessKeySecret'])\n\n# 获取消费者实例\nconsumer = aliyun_mq_client.get_consumer(config['base.comm.rocket-mq.digital.id'], <topic_name>, <group_id>)\n# 获取生产者实例\nproducer = aliyun_mq_client.get_producer(config['base.comm.rocket-mq.digital.id'], <topic_name>)\n\nsize = 10\n\n# 发送消息\nfor i in range(size):\n    msg = 'test %d' % i\n    producer.send(msg)\n    print('send:', msg)\n\n# 接收消息\nmsgs = consumer.receive(batch=size)\nif msgs:\n    for msg in msgs:\n        print('receive:', msg.message_id, msg.message_body, msg.message_tag)\n\n# 确认消息消费成功\nconsumer.ack_message(msgs)\nprint('ack message:', msgs)\n\n# 发送消息（json）\nfor i in range(size):\n    msg = {'test': 1}\n    producer.send_json(msg)\n    print('send:', {'test': 1})\n\n# 消费消息（接收消息并确认）\nfor i in range(size):\n    with consumer.consume() as msgs:\n        if msgs:\n            for msg in msgs:\n                print('consume:', msg.message_id, msg.message_body, msg.message_tag)\n\n# 发送消息（json）带标签\nfor i in range(size):\n    msg = {'test': 1}\n    producer.send_json(msg, tag='ttt')\n    print('send:', {'test': 1})\n\n\n# 消费消息（装饰器）\n@consumer.consume_decorator(batch=10)\ndef test_func(msgs, *args, **kwargs):\n    print('decorator consume:', msgs)\n    for msg in msgs:\n        print('--- message_id', msg.message_id)\n        print('--- message_tag', msg.message_tag)\n        print('--- message_body', msg.message_body)\n        print('--- publish_time', msg.publish_time)\n        print('--- consumed_times', msg.consumed_times)\n        print('--- next_consume_time', msg.next_consume_time)\n\nfor i in range(size):\n    test_func()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doubao-aliyun-mq-sdk",
    "package_url": "https://pypi.org/project/doubao-aliyun-mq-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/doubao-aliyun-mq-sdk/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/doubao-aliyun-mq-sdk/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Doubao Aliyun RocketMQ Python SDK",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7340952,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "464d62bbda0fbcc3dfc0201cade4596d2ce58a1d91f64d6ae2623f876d256456",
        "md5": "956befec9bd365d67b500f57f0d1512c",
        "sha256": "70268da175a9f30409c61c7d51576e17ed69f2efcf4800124aa9611f1e075a23"
      },
      "downloads": -1,
      "filename": "doubao-aliyun-mq-sdk-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "956befec9bd365d67b500f57f0d1512c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 3942,
      "upload_time": "2020-05-28T03:10:39",
      "upload_time_iso_8601": "2020-05-28T03:10:39.165911Z",
      "url": "https://files.pythonhosted.org/packages/46/4d/62bbda0fbcc3dfc0201cade4596d2ce58a1d91f64d6ae2623f876d256456/doubao-aliyun-mq-sdk-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}