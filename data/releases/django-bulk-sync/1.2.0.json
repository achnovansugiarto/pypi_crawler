{
  "info": {
    "author": "Scott Stafford",
    "author_email": "scott.stafford+bulksync@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-bulk-sync\nCombine bulk create, update, and delete into a single call.\n\n`django-bulk-sync` is a package for the Django ORM that combines bulk_create, bulk_update, and delete into a single method call to `bulk_sync`.  \n\nIt manages all necessary creates, updates, and deletes with as few database calls as possible to maximize performance.\n\n## Installation\n\nThe package is available on pip as [django-bulk-sync][django-bulk-sync].  Run:\n\n`pip install django-bulk-sync`\n\nthen import via:\n\n`from bulk_sync import bulk_sync`\n\n## A Usage Scenario\n\nCompanies have zero or more Employees. You want to efficiently sync the names of all employees for a single `Company` from an import from that company, but some are added, updated, or removed.  The simple approach is inefficient -- read the import line by line, and:\n\nFor each of N records:\n\n- SELECT to check for the employee's existence\n- UPDATE if it exists, INSERT if it doesn't\n\nThen figure out some way to identify what was missing and delete it.  As is so often the case, the speed of this process is controlled mostly by the number of queries run, and here it is about two queries for every record, and so O(N).\n\nInstead, with `bulk_sync`, we can avoid the O(N) number of queries, and simplify the logic we have to write as well. \n\n## Example Usage\n\n```python\nfrom django.db.models import Q\nfrom bulk_sync import bulk_sync\n\nnew_models = []\nfor line in company_import_file:\n\t# The `.id` (or `.pk`) field should not be set. Instead, `key_fields` \n\t# tells it how to match.\n\te = Employee(name=line['name'], phone_number=line['phone_number'], ...)\n\tnew_models.append(e)\n\n# `filters` controls the subset of objects considered when deciding to \n# update or delete.\nfilters = Q(company_id=501)  \n# `key_fields` matches an existing object if all `key_fields` are equal.\nkey_fields = ('name', )  \nret = bulk_sync(\n        new_models=new_models,\n        filters=filters,\n        key_fields=key_fields)\n\nprint(\"Results of bulk_sync: \"\n      \"{created} created, {updated} updated, {deleted} deleted.\"\n      \t\t.format(**ret['stats']))\n```\n\nUnder the hood, it will atomically call `bulk_create`, `bulk_update`, and a single queryset `delete()` call, to correctly and efficiently update all fields of all employees for the filtered Company, using `name` to match properly. \n\n## Argument Reference\n\n`def bulk_sync(new_models, key_fields, filters, batch_size=None):`\nCombine bulk create, update, and delete.  Make the DB match a set of in-memory objects.\n- `new_models`: An iterable of Django ORM `Model` objects that you want stored in the database. They may or may not have `id` set, but you should not have already called `save()` on them.\n- `key_fields`: Identifying attribute name(s) to match up `new_models` items with database rows.  If a foreign key is being used as a key field, be sure to pass the `fieldname_id` rather than the `fieldname`.\n- `filters`: Q() filters specifying the subset of the database to work in.\n- `batch_size`: passes through to Django `bulk_create.batch_size` and `bulk_update.batch_size`, and controls how many objects are created/updated per SQL query.\n\n`def bulk_compare(old_models, new_models, key_fields, ignore_fields=None):`\nCompare two sets of models by `key_fields`.\n- `old_models`: Iterable of Django ORM objects to compare.\n- `new_models`: Iterable of Django ORM objects to compare.\n- `key_fields`: Identifying attribute name(s) to match up `new_models` items with database rows.  If a foreign key\n        is being used as a key field, be sure to pass the `fieldname_id` rather than the `fieldname`.\n- `ignore_fields`: (optional) If set, provide field names that should not be considered when comparing objects.\n- Returns dict of: ```\n    {\n        'added': list of all added objects.\n        'unchanged': list of all unchanged objects.\n        'updated': list of all updated objects.\n        'updated_details': dict of {obj: {field_name: (old_value, new_value)}} for all changed fields in each updated object.\n        'removed': list of all removed objects.\n    } ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mathandpencil/django-bulk-sync",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-bulk-sync",
    "package_url": "https://pypi.org/project/django-bulk-sync/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-bulk-sync/",
    "project_urls": {
      "Homepage": "https://github.com/mathandpencil/django-bulk-sync"
    },
    "release_url": "https://pypi.org/project/django-bulk-sync/1.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Combine bulk add, update, and delete into a single call.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13250701,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b44a38f0cf6bef317f1f84945aefc39c6192bab7b9e239c0727372bb11d4f03",
        "md5": "add45ed121f796558d2345802b7ebdef",
        "sha256": "d6589a9252c609c28d67c1a753f94fbe33e48bec5005edc5ab71bb1164030e3c"
      },
      "downloads": -1,
      "filename": "django_bulk_sync-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "add45ed121f796558d2345802b7ebdef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7739,
      "upload_time": "2019-06-05T15:11:55",
      "upload_time_iso_8601": "2019-06-05T15:11:55.694322Z",
      "url": "https://files.pythonhosted.org/packages/2b/44/a38f0cf6bef317f1f84945aefc39c6192bab7b9e239c0727372bb11d4f03/django_bulk_sync-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c011d4f6dbd7c735cfc0505d048407ae1a2fb54870283400e737163e3ea20d46",
        "md5": "01267e99c0fab51a3ac85e0ac0683e14",
        "sha256": "6b4b983974e8c70b2c320b90c9f4e4d54bfbda4692753a441b67c37c91231f7f"
      },
      "downloads": -1,
      "filename": "django-bulk-sync-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "01267e99c0fab51a3ac85e0ac0683e14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5683,
      "upload_time": "2019-06-05T15:11:59",
      "upload_time_iso_8601": "2019-06-05T15:11:59.275785Z",
      "url": "https://files.pythonhosted.org/packages/c0/11/d4f6dbd7c735cfc0505d048407ae1a2fb54870283400e737163e3ea20d46/django-bulk-sync-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}