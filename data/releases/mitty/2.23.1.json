{
  "info": {
    "author": "Seven Bridges Genomics",
    "author_email": "kaushik.ghose@sbgdinc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "Mitty is a data simulator meant to help debug aligners and variant\ncallers.\n\nIt requires Python 3.4 or later. It is released under the\n`Apache <LICENSE.txt>`__ license.\n\n|DOI|\n\n.. figure:: docs/images/genome-simulation.png?raw=true\n   :alt: Genome simulation\n\n   Genome simulation\n\n.. figure:: docs/images/read-simulation.png?raw=true\n   :alt: Read simulation\n\n   Read simulation\n\n.. figure:: docs/images/reports.png?raw=true\n   :alt: Report generation\n\n   Report generation\n\nFeatures\n========\n\n-  Generate reads from the whole genome, a single tiny region or from a\n   set of regions as desired\n-  Handles X, Y chromosomes and polyploidy IF the VCF GT field is\n   properly set\n-  Read qname stores correct POS, CIGAR and the sizes of variants\n   covered by the read\n-  Name of sample included in read allowing us to mix FASTQs from\n   different simulations/sources\n\n   -  Can mix viral contamination into reads\n   -  Can do tumor/normal mixes\n\n-  Corruption module adds sequencing errors to reads\n\n   -  Read models can be sampled from existing BAM files\n\n-  \"God aligner\" writes out a BAM with perfect alignments which can be\n   used for BAM comparisons\n-  Simple genome simulator to generate VCFs with SNPs and different\n   sizes of Insertions and Deletions for aligner/caller testing\n\nIt is also informative to browse the `release\nnotes <release_notes.txt>`__ and poke around the detailed documentation\nunder the `/docs <docs/>`__ folder\n\nQuickstart\n==========\n\nInstall\n-------\n\n::\n\n    conda create -n mymitty python=3.5\n\n-  Using a virtual env is recommended, but it's a personal choice\n-  Mitty requires Python3 to run\n\nInstall Mitty from the public github repository. **Requires pip 9.0 or\nlater**\n\n::\n\n    pip install --upgrade setuptools pip\n    pip install git+https://github.com/sbg/Mitty.git\n\nRun tests\n---------\n\n::\n\n    nosetests mitty.test -v\n\nProgram help\n------------\n\nHelp is available from the command line. Simply invoking the base\nprogram with no arguments will list all the sub programs with some short\nhelp:\n\n::\n\n    mitty\n\nDetailed help on particular commands is also available:\n\n::\n\n    mitty generate-reads --help\n\nRunning commands with the verbose option allows you to tune what\nmessages (ranging from Errors to Debug) you get.\n\n::\n\n    mitty -v{1,2,3,4} <command>\n\nDetailed tutorial with commentary\n=================================\n\nExample scripts and data\n------------------------\n\nIf you want to follow along with this tutorial you will find the\nrelevant example scripts and test data in the\nhttps://github.com/kghosesbg/mitty-demo-data project.\n\n*The separate project has been created to avoid making the main source\ntree bulky by filling it with binary files not needed for program\noperation.*\n\n(Some of the examples require other tools such as ``samtools``, ``bwa``\nand ``vcftools``)\n\nGenerating reads\n----------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/generating-reads/gen-reads.sh>`__)\n\nAliases used\n~~~~~~~~~~~~\n\n::\n\n    FASTA=../data/human_g1k_v37.fa.gz\n    SAMPLEVCF=../data/1kg.20.22.vcf.gz\n    SAMPLENAME=HG00119\n    REGION_BED=region.bed\n    FILTVCF=HG00119-filt.vcf.gz\n    READMODEL=1kg-pcr-free.pkl\n    COVERAGE=30\n    READ_GEN_SEED=7\n    FASTQ_PREFIX=HG00119-reads\n    READ_CORRUPT_SEED=8\n\nPrepare VCF file for taking reads from\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe read simulator can not properly generate ground truth reads from\noverlapping variants (e.g. a deletion that overlaps a SNP on the same\nchromosome copy), complex variants (variant calls where the REF and ALT\nare both larger than 1 bp) or any entry that does not precisely lay out\nthe ALT sequence in the ALT column, such as angle bracket ID references\nand variants breakend notation. Such calls must be filtered from a VCF\nfile before it can be used as a sample to generate reads from.\n\n::\n\n    mitty -v4 filter-variants \\\n      ${SAMPLEVCF} \\\n      ${SAMPLENAME} \\\n      ${REGION_BED} \\\n      - \\\n      2> vcf-filter.log | bgzip -c > ${FILTVCF}\n\n    tabix -p vcf ${FILTVCF}\n\nThe ``region.bed`` file is used to select out just the parts of the VCF\nwe would like to generate reads from. The input VCF can be a population\nVCF (say from the 1000G project). The ``${SAMPLENAME}`` indicates which\nsample to extract from the VCF.\n\n``vcf-filter.log`` looks like::\n\n::\n\n    $ cat vcf-filter.log \n    DEBUG:mitty.lib.vcfio:Starting filtering ...\n    DEBUG:mitty.lib.vcfio:Filtering ('1', 1000000, 2000000)\n    DEBUG:mitty.lib.vcfio:Complex variant 1:1827835 CTT -> ('CT', 'C')\n    DEBUG:mitty.lib.vcfio:Filtering ('3', 60830384, 61830384)\n    DEBUG:mitty.lib.vcfio:Complex variant 3:60835995 TTCTCTCTCTCTCTCTCTCTCTC -> ('TTCTCTCTCTCTCTCTCTCTCTCTCTCTC', 'T')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:60897726 TAC -> ('TACAC', 'T')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:60970457 GGTGTGT -> ('GGT', 'G')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61205001 ATG -> ('ATGTG', 'A')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61309628 GGTGTGTGTGTGTGTGT -> ('GGTGTGTGTGTGTGTGTGTGT', 'G')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61360782 AGTGTGTGTGT -> ('AGTGTGTGTGTGT', 'A')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61469726 CAAAAAAAAAAAAAAA -> ('CA', 'C')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61488707 TTGTG -> ('TTG', 'T')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61509647 TCACACACACA -> ('TCACACACACACACA', 'T')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61522251 TACACAC -> ('TACAC', 'T')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61541525 CA -> ('CAAA', 'C')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61633465 CAAAAAAA -> ('CAAAAAAAAAAAAA', 'C')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61718383 AAAATAAAT -> ('AAAAT', 'A')\n    DEBUG:mitty.lib.vcfio:Complex variant 3:61731724 CTTT -> ('CTT', 'C')\n    DEBUG:mitty.lib.vcfio:Processed 2807 variants\n    DEBUG:mitty.lib.vcfio:Sample had 2807 variants\n    DEBUG:mitty.lib.vcfio:Discarded 15 variants\n    DEBUG:mitty.lib.vcfio:Took 0.28023505210876465 s\n\n**NOTE: If the BED file is not sorted, the output file needs to be\nsorted again.**\n\n``${FILTVCF}`` can now be used to generate reads and will serve as a\ntruth VCF for VCF benchmarking.\n\nListing and inspecting read models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``mitty list-read-models`` will list built in read models\n\n``mitty list-read-models -d ./mydir`` will list additional custom models\nstored in ``mydir``\n\n``mitty describe-read-model 1kg-pcr-free.pkl model.png`` prints a panel\nof plots showing read characteristics\n\nSee later for a list of read models supplied with Mitty and their\ncharacteristics\n\nCreating custom read models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**This is only needed if none of the existing read models match your\nrequirements**\n\nPrepare a Illumina type read model from a BAM\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/read-models/sampled-model.sh>`__)\n\n::\n\n    BAM=../data/sample.bam\n    MODELNAME=sampled-model.pkl\n\n    mitty -v4 create-read-model bam2illumina \\\n      --every 10 \\\n      --min-mq 20 \\\n      -t 2 \\\n      --max-bp 300 \\\n      --max-tlen 1000 \\\n      ${BAM} \\\n      ${MODELNAME} \\\n      'Sampled model created for the demo'\n\n    mitty describe-read-model ${MODELNAME} ${MODELNAME}.png\n\nCreate arbitrary Illumina type read models\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe read model file is just a Python pickle file of a dictionary\ncarrying specifications for the model. You can create arbitrary models\nby specifying your own parameters. Please see the `read model\ndocumentation <docs/readmodelformat.md>`__ for a description of all the\nparameters.\n\nEasily prepare completely synthetic Illumina type read model\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/read-models/synthetic-model.sh>`__)\n\nMitty also supplies a model generator (``synth-illumina``) to generate\ncustom Illumina like read models with template sizes and base quality\npatterns following simple mathematical distributions. This model\ngenerator allows us to quickly create reads models with a wide variety\nof independently variable parameters.\n\n::\n\n    MODELNAME=synthetic-model.pkl\n\n    mitty create-read-model synth-illumina \\\n      ${MODELNAME} \\\n      --read-length 121 \\\n      --mean-template-length 400 \\\n      --std-template-length 20 \\\n      --bq0 30 \\\n      --k 200 \\\n      --sigma 5 \\\n      --comment 'Model created for the demo' \\\n\nThe generated read model looks like:\n\n.. figure:: docs/images/synthetic-model.pkl.png?raw=true\n   :alt: \n\nGenerating perfect reads\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    mitty -v4 generate-reads \\\n      ${FASTA} \\\n      ${FILTVCF} \\\n      ${SAMPLENAME} \\\n      ${REGION_BED} \\\n      ${READMODEL} \\\n      ${COVERAGE} \\\n      ${READ_GEN_SEED} \\\n      >(gzip > ${FASTQ_PREFIX}1.fq.gz) \\\n       ${FASTQ_PREFIX}-lq.txt \\\n       --fastq2 >(gzip > ${FASTQ_PREFIX}2.fq.gz) \\\n       --threads 2\n\n*(When you supply a model file name to the read generator it will first\nlook among the builtin read models to see if the file name is a match\n(typically these are in the ``mitty/data/readmodels`` folder). It will\nthen treat the model file name as a path and try and load that from your\nfile system - which is the case in this particular example.)*\n\nThe produced FASTQs have qnames encoding the correct read alignments for\neach read in the template. qnames may exceed the SAM specification limit\n(nominally 254 characters, but there\n`are <https://github.com/samtools/htslib/issues/520>`__\n`caveats <https://github.com/pysam-developers/pysam/issues/447>`__). In\nsuch cases the qname in the FASTQ is truncated and the complete qname is\nprinted in the side-car file ``${FASTQ_PREFIX}-lq.txt``.\n\nThe qname format can be obtained by executing ``mitty qname``\n\nReference reads\n^^^^^^^^^^^^^^^\n\nAs you might expect, by passing a VCF with no variants we can generate\nreads with no variants, representing the reference genome. One Mitty\nfeature to be aware of is ploidy inference from the VCF: if there are no\nvariants in a contig, Mitty assumes that contig is diploid, otherwise\nMitty uses the GT (genotype) tag to infer ploidy.\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/reference-reads/ref-reads-m.sh>`__)\n\nHence for a human male we set up the VCF (``human-m-ref.vcf``) as:\n\n::\n\n    ##fileformat=VCFv4.2\n    ##FILTER=<ID=PASS,Description=\"All filters passed\">\n    ##fileDate=20160824\n    ##contig=<ID=1,length=249250621>\n    ##contig=<ID=2,length=243199373>\n    ...\n    ##contig=<ID=X,length=155270560>\n    ##contig=<ID=Y,length=59373566>\n    ##contig=<ID=MT,length=16569>\n    ##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Consensus Genotype across all datasets with called genotype\">\n    #CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  ref\n    X       1       .       A       G       50      PASS    .       GT      0\n    Y       1       .       A       G       50      PASS    .       GT      0\n\nWhen we generate reads from this VCF say from chromosome 1, X and Y we\nsee the following trace:\n\n::\n\n    DEBUG:mitty.lib.vcfio:Contig: 1, ploidy: 2 (Assumed. Contig was empty)\n    DEBUG:mitty.lib.vcfio:Contig: X, ploidy: 1 \n    DEBUG:mitty.lib.vcfio:Contig: Y, ploidy: 1 \n\nwhich tells us that contig 1 has been assumed to be diploid, whereas X\nand Y are inferred to be haploid because of the dummy entries we set.\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/reference-reads/ref-reads-f.sh>`__)\n\nTechnically the human female VCF could be set up as a VCF with just the\nheader (Mitty would infer all contigs to be diploid), but it turns out\nthat some tools (including pysam) operate incorrectly when the VCF is\ncompletely empty, so we supply one dummy line for the VCF\n(``human-f-ref.vcf``) as:\n\n::\n\n    ##fileformat=VCFv4.2\n    ##FILTER=<ID=PASS,Description=\"All filters passed\">\n    ##fileDate=20160824\n    ##contig=<ID=1,length=249250621>\n    ##contig=<ID=2,length=243199373>\n    ...\n    ##contig=<ID=X,length=155270560>\n    ##contig=<ID=Y,length=59373566>\n    ##contig=<ID=MT,length=16569>\n    ##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Consensus Genotype across all datasets with called genotype\">\n    #CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  ref\n    X       1       .       A       G       50      PASS    .       GT      0/0\n\nTruncating reads\n^^^^^^^^^^^^^^^^\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/generating-reads/truncated-reads.sh>`__)\n\nFor some experiments you might want to generate custom sized reads.\n``generate-reads`` allows you to do this with the ``--truncate-to``\nargument\n\n::\n\n    FASTQ_PREFIX=HG00119-truncated-reads\n    mitty -v4 generate-reads \\\n      ${FASTA} \\\n      ${FILTVCF} \\\n      ${SAMPLENAME} \\\n      ${REGION_BED} \\\n      ${READMODEL} \\\n      ${COVERAGE} \\\n      ${READ_GEN_SEED} \\\n      >(gzip > ${FASTQ_PREFIX}1.fq.gz) \\\n      ${FASTQ_PREFIX}-lq.txt \\\n      --fastq2 >(gzip > ${FASTQ_PREFIX}2.fq.gz) \\\n      --truncate-to 60 \\\n      --threads 2\n\nThis generates the same kind of reads as before, but all the reads are\n60bp long, instead of their usual length. You can not make reads longer\nthan what the model originally specifies (This to ensure that the read\ncorruption code will work seamlessly with such truncated reads.)\n\nUn-pairing reads\n^^^^^^^^^^^^^^^^\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/generating-reads/unpaired-reads.sh>`__)\n\nFor some experiments you might want to use the existing Illumina or\nother model that normally produces paired-end reads to generate\nsingle-end reads instead. The ``--unpair`` argument allows you to do\nthis. Note that in this case you should not pass in a second output\nFASTQ file.\n\n::\n\n    FASTQ_PREFIX=HG00119-unpaired-reads\n    mitty -v4 generate-reads \\\n      ${FASTA} \\\n      ${FILTVCF} \\\n      ${SAMPLENAME} \\\n      ${REGION_BED} \\\n      ${READMODEL} \\\n      ${COVERAGE} \\\n      ${READ_GEN_SEED} \\\n      >(gzip > ${FASTQ_PREFIX}.fq.gz) \\\n       ${FASTQ_PREFIX}-lq.txt \\\n       --unpair \\\n       --threads 2\n\nCorrupting reads\n~~~~~~~~~~~~~~~~\n\nThe reads generated using the previous command have no base call errors.\nBase call errors can be introduced into the reads using the following\ncommand.\n\n::\n\n    mitty -v4 corrupt-reads \\\n      ${READMODEL} \\\n      ${FASTQ_PREFIX}1.fq.gz >(gzip > ${FASTQ_PREFIX}-corrupt1.fq.gz) \\\n      ${FASTQ_PREFIX}-lq.txt \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${READ_CORRUPT_SEED} \\\n      --fastq2-in ${FASTQ_PREFIX}2.fq.gz \\\n      --fastq2-out >(gzip > ${FASTQ_PREFIX}-corrupt2.fq.gz) \\\n      --threads 2\n\n*Using a read model different to that used to generate the reads\noriginally can lead to undefined behavior, including crashes.*\n\nAs mentioned, the side-car file ``${FASTQ_PREFIX}-lq.txt`` carries\nqnames longer than 254 characters. The output side-car file\n``${FASTQ_PREFIX}-corrupt-lq.txt`` similarly carries longer qnames from\nthe corrupted reads. The qname for each corrupted template is identical\nto the original, uncorrupted template, except for the addition of an\nMD-like tag that allows recovery of the original bases before sequencing\nerrors were introduced.\n\nThe BQ profile of the sample FASTQ generated by this command (generated\nby FASTQC) looks like\n\nMate 1: |FASTQC screenshot showing BQ distribution|\n\nMate 2: |FASTQC screenshot showing BQ distribution|\n\ncan be compared with the empirical model profile shown in the Appendix\nfor the ``1kg-pcr-free.pkl`` model.\n\nAfter passing these reads through an aligner and viewing them on a\ngenome browser, such as IGV one can make a quick inspection of the\nalignments.\n\n.. figure:: docs/images/igv-alignment-qname.png?raw=true\n   :alt: IGV screenshot showing read qname and one het variant\n\n   IGV screenshot showing read qname and one het variant\n\nSince the qname carries the correct alignment and CIGAR string you can\nmatch that against the actual alignment and CIGAR string for spot\nchecks.\n\nPerfect BAM (God aligner)\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/god-aligner/god-aligner.sh>`__)\n\nPassing the simulated FASTQ through the god aligner produces a \"perfect\nBAM\" which can be used as a truth BAM for comparing alignments from\ndifferent aligners. This truth BAM can also be used to test variant\ncallers by removing one moving part (the aligner) from the analysis\nchain.\n\n::\n\n    FASTA=../data/human_g1k_v37.fa.gz\n    FASTQ_PREFIX=../generating-reads/HG00119-reads\n    GODBAM=HG00119-god.bam\n\n    mitty -v4 god-aligner \\\n      ${FASTA} \\\n      ${FASTQ_PREFIX}-corrupt1.fq.gz \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${GODBAM} \\\n      --fastq2 ${FASTQ_PREFIX}-corrupt2.fq.gz \\\n      --threads 2\n\nAnalysis\n--------\n\nMitty supplies some tools to help with benchmarking and debugging of\naligner/caller pipelines.\n\nAlignment accuracy\n------------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/alignment-accuracy/alignment-accuracy.sh>`__)\n\n*(Assumes bwa and samtools are installed)*\n\n::\n\n    BAM=hg001-bwa.bam\n\n    bwa mem \\\n      ${FASTA} \\\n      ${FASTQ_PREFIX}-corrupt1.fq.gz \\\n      ${FASTQ_PREFIX}-corrupt2.fq.gz | samtools view -bSho temp.bam\n    samtools sort temp.bam > ${BAM}\n    samtools index ${BAM}\n\n    mitty -v4 debug alignment-analysis process\\\n      ${BAM} \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${BAM}.alignment.npy \\\n      --fig-prefix ${BAM}.alignment \\\n      --max-d 200 \\\n      --max-size 50 \\\n      --plot-bin-size 10\n\nThis invocation will process ``${BAM}`` and summarize the alignment\nperformance in a numpy data file (``${BAM}.alignment.npy``). It will\nplot them in a set of figures named with the prefix\n``${BAM}.alignment``. The alignment error will be assessed upto a\nmaximum of 200bp. The program will check variants from 50bp deletions to\n50bp insertions, putting them into 10bp size bins. SNPs are always\ncounted and placed in their own spearate bin.\n\n.. figure:: docs/images/aligner-report-example-1.png?raw=true\n   :alt: MQ plots\n\n   MQ plots\n\n.. figure:: docs/images/aligner-report-example-2.png?raw=true\n   :alt: Alignment accuracy plots\n\n   Alignment accuracy plots\n\nSubset a BAM for detailed analysis\n----------------------------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/subset-bam/subset-bam.sh>`__)\n\nThe ``subset-bam`` debug subtool allows us to select out reads from a\nBAM based on whether they contain variants and whether they fall within\na certain d\\_err range\n\nEx 1: Extract only reads from SNPs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    BAMOUT=HG00119-bwa-snps.bam\n    mitty -v4 debug subset-bam \\\n      ${BAMIN} \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${BAMOUT} \\\n      --v-range 0 0 \\\n      --reject-reference-reads \\\n      --processes 2\n\n.. figure:: docs/images/igv-subsetbam-snp-example.png?raw=true\n   :alt: Reads under SNPs\n\n   Reads with SNPs only\n\nEx 2: Extract only correctly aligned reads from deletions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    BAMOUT=HG00119-bwa-good-del.bam\n    mitty -v4 debug subset-bam \\\n      ${BAMIN} \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${BAMOUT} \\\n      --v-range -10000 -1 \\\n      --d-range -5 5 \\\n      --reject-reference-reads \\\n      --processes 2\n\nEx 3: Extract only reads from deletions mis-aligned by more than 5 bp\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    BAMOUT=HG00119-bwa-poor-del.bam\n    mitty -v4 debug subset-bam \\\n      ${BAMIN} \\\n      ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      ${BAMOUT} \\\n      --v-range -10000 -1 \\\n      --d-range -5 5 \\\n      --reject-d-range \\\n      --reject-reference-reads \\\n      --processes 2\n\n.. figure:: docs/images/igv-subsetbam-del-example.png?raw=true\n   :alt: Reads undel DELs\n\n   Reads undel DELs\n\nVariant calling accuracy, parametrized by variant size\n------------------------------------------------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/variant-call-analysis/call-analysis.sh>`__)\n\nWe can use a set of tools developed by the GA4GH consortium to compare a\nVCF produced by a pipeline with a truth VCF. One of the outputs of the\ncomparator tools is a VCF (called an evaluation VCF) where each call is\nannotated with by whether it is a TP, FN, FP or GT error.\n\n``variant-call-analysis`` is a program that summarizes the data in such\nan evaluation VCF in terms of variant size.\n\n::\n\n    EVCF=../data/0.9.29.eval.vcf.gz\n    CSV=0.9.29.eval.data.csv\n    FIG=caller-report-example.png\n\n    mitty -v4 debug variant-call-analysis process \\\n     ${EVCF} \\\n     ${CSV} \\\n     --max-size 75 \\\n     --fig-file ${FIG} \\\n     --plot-bin-size 5 \\\n     --title 'Example call analysis plot'\n\nThis invocation will process ``0.9.29.eval.vcf.gz`` produced by vcfeval,\nwrite the results as a comma separated file (``0.9.29.eval.data.csv``)\nand then plot them in ``caller-report-example.png``.\n\n.. figure:: docs/images/caller-report-example.png?raw=true\n   :alt: P/R plots\n\n   P/R plots\n\nTo replot already processed data use the ``plot`` subcommand instead of\nthe ``process`` subcommand\n\n::\n\n    mitty -v4 debug variant-call-analysis plot \\\n      ${CSV} \\\n      caller-report-example2.png \\\n      --plot-bin-size 10 \\\n      --plot-range 50 \\\n      --title 'Example call analysis plot'\n\nImprovements, regressions in variant calling\n--------------------------------------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/call-fate/call-fate.sh>`__)\n\nWhen comparing different versions of a pipeline, or two different\npipelines the Precision and Recall curves and summary tables give some\ninformation about the improvements and regressions introduced, but only\nat a very coarse level. The ``call-fate`` tool compares two evaluation\nVCFs and tracks the transitions of variant calls between different call\ncategories (TP, FN, GT, FP) which allow us to see in greater detail the\nimprovements and regressions going from one pipeline to the other.\n\nIn the examples below we are comparing two evaluation VCF files\n``{0.9.29, 0.9.32}.eval.vcf.gz``\n\n::\n\n    EVCF1=../data/0.9.29.eval.vcf.gz\n    EVCF2=../data/0.9.32.eval.vcf.gz\n    OUTPREFIX=fate-29-32\n\n    mitty -v4 debug call-fate \\\n     ${EVCF1} \\\n     ${EVCF2} \\\n     - \\\n     ${OUTPREFIX}-summary.txt | vcf-sort | bgzip -c > ${OUTPREFIX}.vcf.gz\n\n(This assumes we have vcf-tools available so we can sort the VCF)\n\nThe program produces a summary table output:\n\n::\n\n    Improved    SNP INDEL\n    --------------------\n    FN->TP:     391 587\n    FN->GT:     35  134\n    GT->TP:     342 429\n    FP->N:      23710   8680\n\n    Unchanged   SNP INDEL\n    --------------------\n    TP->TP:     3504751 680531\n    FN->FN:     4571    12259\n    GT->GT:     1851    12639\n    FP->FP:     379274  211967\n\n    Regressed   SNP INDEL\n    --------------------\n    TP->FN:     351 488\n    TP->GT:     134 305\n    GT->FN:     27  129\n    N->FP:      13674   7180\n\nAnd a VCF file with 12 samples, corresponding to the 12 categories\nabove. For each variant the GT field is 0/0 for all samples except the\none corresponding to the transition category it belongs to. This allows\nus to easily visualize the fate of individual variants using, for\nexample, IGV.\n\n.. figure:: docs/images/call-fate-igv.png?raw=true\n   :alt: call-fate VCF overlay on IGV\n\n   call-fate VCF overlay on IGV\n\nSet differences of two or more BAM files derived from the same FASTQ(s)\n-----------------------------------------------------------------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/partition-bams/partition-bams.sh>`__)\n\nOne way of making a detailed examination of the effects of changes to\nalignment algorithms is to track how read alignments from the same FASTQ\nchange. The ``partition-bams`` subtool allows us to take 2 or more BAMs\nand apply a membership criterion to each read and classify the reads\naccording to how they fared in each of the BAMs.\n\nIn the `associated\nexample <https://github.com/kghosesbg/mitty-demo-data/blob/master/partition-bams/partition-bams.sh>`__\n``bwa mem`` is run with three different values of the ``-r`` parameter\non a small FASTQ. We then apply the membership criterion \\|d\\_err\\| < 10\nand analyze the three BAMs.\n\n::\n\n    FASTQ_PREFIX=../generating-reads/HG00119-reads\n\n    mitty -v4 debug partition-bams \\\n      myderr \\\n      d_err \\\n      --threshold 10 \\\n      --sidecar_in ${FASTQ_PREFIX}-corrupt-lq.txt \\\n      --bam HG00119-bwa1.bam \\\n      --bam HG00119-bwa2.bam \\\n      --bam HG00119-bwa3.bam\n\nThis tool produces a summary file ``myderr_summary.txt`` that looks\nlike:\n\n::\n\n    (A)(B)(C)   576\n    (A)(B)C 0\n    (A)B(C) 0\n    (A)BC   57\n    A(B)(C) 84\n    A(B)C   0\n    AB(C)   0\n    ABC 359793\n\nIn this nomenclature A is the set and (A) is the complement of this set.\nThe set labels A, B, C ... (upto a maximum of 10) refer to the BAM files\nin sequence they were supplied.\n\nThus, ABC means all the reads which have a \\|d\\_err\\| < 10 in all the\nthree files. AB(C) means all the reads which have a \\|d\\_err\\| < 10 in A\nand B but not C, and so on. A reader familiar with Venn diagrams is\nreferred to the chart below for a translation of the three dimensional\ncase to a three way Venn diagram. Higher dimensions are harder to\nvisualize as Venn diagrams.\n\n.. figure:: docs/images/sets.png?raw=true\n   :alt: Sets to Venn diagram\n\n   Sets to Venn diagram\n\nThe tool also produces a set of files following the naming convention:\n\n::\n\n    myderr_(A)(B)(C)_A.bam\n    myderr_(A)(B)(C)_B.bam\n    myderr_(A)(B)(C)_C.bam\n    myderr_(A)(B)C_A.bam\n    myderr_(A)(B)C_B.bam\n    myderr_(A)(B)C_C.bam\n    ...\n\nThe first part of the name follows the convention outlined above. The\ntrailing A, B, C refer to the orginal source BAM of the reads. So\n``myderr_(A)(B)(C)_B.bam`` carries reads from bam B that have \\|d\\_err\\|\n>= 10 in all the three BAMs.\n\nAn example of throwing these files up on a genome browser and inspecting\nthem is given below\n\n.. figure:: docs/images/igv-sets.png?raw=true\n   :alt: BAM partitions on IGV\n\n   IGV Bam Partitions\n\nThe criteria the ``partition-bam`` tool can be run on can be obtained by\npassing it the ``--criteria`` option.\n\nGenerating samples (genomes)\n----------------------------\n\nMitty also has features to generate simulated genomes in the form of VCF\nfiles.\n\nSimulated variants\n~~~~~~~~~~~~~~~~~~\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/simulating-variants/simulate-variants.sh>`__)\n\nThe ``simulate-variants`` command generates a VCF with simulated\nvariants. The program carries three basic models for variant simulation\n- SNPs, insertions and deletions and is invoked as follows:\n\n::\n\n    FASTA=../data/human_g1k_v37.fa.gz\n    SAMPLENAME=S0\n    BED=region.bed\n    VCF=sim.vcf.gz\n\n    mitty -v4 simulate-variants \\\n      - \\\n      ${FASTA} \\\n      ${SAMPLENAME} \\\n      ${BED} \\\n      7 \\\n      --p-het 0.6 \\\n      --model SNP 0.001 1 1 \\\n      --model INS 0.0001 10 100 \\\n      --model DEL 0.0001 10 100 | bgzip -c > ${VCF}\n\n    tabix ${VCF}\n\nThe model parameters are given by\n\n.. raw:: html\n\n   <P>\n\n refers to the variant model to use\n\n.. raw:: html\n\n   <P>\n\nis the probability of a variant being placed on any given base indicate\nthe size ranges of the variants produced. These are ignored for SNP\n\nThis VCF should be run through the ``filter-variants`` program as usual\nbefore taking reads. This is especially important because the simulation\ncan produce illegaly overlapping variants which will be taken out by\nthis step.\n\nInvoking ``mitty simulate-variants --list-models`` will list available\nmodels\n\nMiscellaneous utilities\n-----------------------\n\nBam to truth\n------------\n\n(`Example\nscript <https://github.com/kghosesbg/mitty-demo-data/blob/master/bam-to-truth/bam_to_truth.sh>`__)\n\nSometimes we want to treat the alignment from one aligner (e.g. BWA) as\nthe truth and then check how other aligners do relative to that. An\nideal tool would do a read by read comparison, and we have some other\ntools that do this, however such comparisons, because they need to\nmatchup read qnames, can become expensive. This is a compromise method.\n\n``bam-to-truth`` creates FASTQ file(s) from a BAM file, changing the\nqname to encode the alignment of the read. The FASTQ files can then be\nused like any other simulated FASTQ, to analyze alignment performance\nfor other aligners relative to the original aligner. The code only\nwrites out reads for which both mates are mapped and for which both\nmates have MQ greater than the supplied threshold.\n\nVariant size distribution\n-------------------------\n\nPlot variant size distribution in VCF file:\n\n::\n\n    mitty -v4 debug variant-by-size \\\n      hg001.vcf.gz hg001.variant.size.csv \\\n      --plot-bin-size 5 \\\n      --max-size 100 \\\n      --title \"HG001\" \\\n      --fig-file hg001.variant.png \n\nAppendix\n========\n\nQname format\n------------\n\nRead alignment and simulation metadata are stored in the qname in the\nfollowing format.\n\n::\n\n    $ mitty qname\n\n          @index|sn|chrom:copy|strand:pos:cigar:v1,v2,...:MD|strand:pos:cigar:v1,v2,...:MD*\n\n    index:  unique code for each template. If you must know, the index is simply a monotonic counter\n            in base-36 notation\n    sn:     sample name. Useful if simulation is an ad-mixture of sample + contaminants or multiple samples\n    chrom:  chromosome id of chromosome the read is taken from\n    copy:   copy of chromosome the read is taken from (0, 1, 2, ...) depends on ploidy\n    strand: 0: forward strand, 1: reverse strand\n    pos:    Position of first (left-most) reference matching base in read (Same definition as for POS in BAM)\n            One based\n            For reads coming from completely inside an insertion this is, however, the POS for the insertion\n    cigar:  CIGAR string for correct alignment.\n            For reads coming from completely inside an insertion, however, the CIGAR string is:\n            '>p+nI' where:\n               '>' is the unique key that indicates a read inside a long insertion\n               'p' is how many bases into the insertion branch the read starts\n               'n' is simply the length of the read\n    v1,v2,..: Comma separated list of variant sizes covered by this read\n                0 = SNP\n                + = INS\n                - = DEL\n    MD:     Read corruption MD tag. This is empty for perfect reads, but is filled with an MD formatted\n            string for corrupted reads. The MD string is referenced to the original, perfect read, not\n            a reference sequence.\n\n    Notes:\n\n    - The alignment information is repeated for every read in the template.\n      The example shows what a PE template would look like.\n    - The pos value is are one based to make comparing qname info in genome browser easier\n    - qnames longer than N characters are stored in a side-car file alongside the simulated FASTQs.\n      The qname in the FASTQ file itself is truncated to N characters.\n\n      Nominally, N=254 according to the SAM spec, but due to bugs in some versions of htslib\n      this has been set shorter to 240.\n      A truncated qname is detected when the last character is not *\n\nExample from a perfect read:\n\n``@8|INTEGRATION|1:1|1:1930067:27=1X63=1I158=:0,1:|0:1929910:184=1X63=1I1=:0,1:*``\n\nCorresponding read after passing through read corruption model:\n\n``@8|INTEGRATION|1:1|1:1930067:27=1X63=1I158=:0,1:126T29T16G15G28C0T2T8C9T0C6T|0:1929910:184=1X63=1I1=:0,1:9G25G3T1C36T87G10G0C0A4A1G4C0A0G0G0A1A0T0C3A1C0A0T0C0C0T0G2T0A0A1A0G1G0T0G0A0A0A0C1T1A0T0C0T0C0T0A1T1A0A1A0T0A0C0A0A*``\n\n::\n\n    @8           - simulated reads serial number\n    INTEGRATION  - name of sample (from VCF) reads are generated from\n    1:1          - read is from chromosome 1, copy 1 (copy numbers start 0, 1, ...)\n    1:1930067:27=1X63=1I158=:0,1:126T29T16G15G28C0T2T8C9T0C6T \n                 - read one metadata with fields as:\n\n        1:1930067       - read is from reverse strand (1, as opposed to 0 - see the metdata for the mate) at pos 1930067\n        27=1X63=1I158=  - this is the correct CIGAR for this read\n        0,1             - this read carries two variants a SNP (0) and an insertion (1)\n        126T29T16G15G28C0T2T8C9T0C6T  \n                        - This string follows the conventions for an MD tag and indicates the sequencing error\n                          relative to the uncorrupted read\n\n    0:1929910:184=1X63=1I1=:0,1:9G25G3T1C36T87G10G0C0A4A1G4C0A0G0G0A1A0T0C3A1C0A0T0C0C0T0G2T0A0A1A0G1G0T0G0A0A0A0C1T1A0T0C0T0C0T0A1T1A0A1A0T0A0C0A0A \n                 - read two metadata in same format\n\nBuilt-in read models\n--------------------\n\n.. figure:: docs/images/1kg-pcr-free.png?raw=true\n   :alt: \n\n.. figure:: docs/images/hiseq-X-v2.5-Garvan.png?raw=true\n   :alt: \n\n.. figure:: docs/images/old-Garvan.png?raw=true\n   :alt: \n\n.. figure:: docs/images/hiseq-2500-v1-pcr-free.png?raw=true\n   :alt: \n\n.. figure:: docs/images/hiseq-X-v1-HLI.png?raw=true\n   :alt: \n\n.. |DOI| image:: https://zenodo.org/badge/65392390.svg\n   :target: https://zenodo.org/badge/latestdoi/65392390\n.. |FASTQC screenshot showing BQ distribution| image:: docs/images/1kg-pcr-free-corrupt-fastqc-r1.png?raw=true\n.. |FASTQC screenshot showing BQ distribution| image:: docs/images/1kg-pcr-free-corrupt-fastqc-r2.png?raw=true",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/sbg/Mitty/archive/development.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sbg/Mitty",
    "keywords": "simulator,genomics,ngs,read mapper,aligner,variant caller",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mitty",
    "package_url": "https://pypi.org/project/mitty/",
    "platform": "",
    "project_url": "https://pypi.org/project/mitty/",
    "project_urls": {
      "Download": "https://github.com/sbg/Mitty/archive/development.zip",
      "Homepage": "https://github.com/sbg/Mitty"
    },
    "release_url": "https://pypi.org/project/mitty/2.23.1/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Simulator for genomic data",
    "version": "2.23.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4463966,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7fc2bdc6e839d47f735cee5af55b029567c3efc81e83d7dc92e990f005006e0",
        "md5": "ec93847cf55dcec77d636000699b2560",
        "sha256": "e5dbf7411e53fef866e615f41eb211adee91a9865e28c36c3cd69ca8ee1632d9"
      },
      "downloads": -1,
      "filename": "mitty-2.23.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ec93847cf55dcec77d636000699b2560",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 1255962,
      "upload_time": "2017-08-04T14:04:34",
      "upload_time_iso_8601": "2017-08-04T14:04:34.793904Z",
      "url": "https://files.pythonhosted.org/packages/a7/fc/2bdc6e839d47f735cee5af55b029567c3efc81e83d7dc92e990f005006e0/mitty-2.23.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}