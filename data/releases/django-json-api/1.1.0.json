{
  "info": {
    "author": "Sharework",
    "author_email": "root@sharework.co",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# django-json-api\n\n[![PyPI version](https://badge.fury.io/py/django-json-api.svg)](https://badge.fury.io/py/django-json-api)\n[![codecov](https://codecov.io/gh/share-work/django-json-api/branch/develop/graph/badge.svg?token=hTGA39HrJV)](https://codecov.io/gh/share-work/django-json-api)\n[![Reveal](https://circleci.com/gh/reveal-co/django-json-api.svg?style=shield&circle-token=727d6ee289cf310d7f2a473d02574506f6ea8ef7)](https://app.circleci.com/pipelines/github/reveal-co/django-json-api)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n**django-json-api** uses Django's ORM interfaces as inspiration to serialize, request and\ndeserialize entities from databases of other microservices using (and benefiting from) the\n[JSON:API](https://jsonapi.org/) specification.\n\n\n## Installation\n\nTo install via pip:\n\n```sh\npip install django-json-api\n```\n\nYou can also install from the source:\n\n```sh\ngit clone git@github.com:reveal-co/django-json-api.git\ncd django-json-api\ngit checkout main\npip install -e .\n```\n\n## Getting started\n\nSuppose you have a `django.db.models.Model` class inside microservice A, such as:\n\n```python\nfrom django.db import models\n\nclass Company(models.Model):\n    name = models.CharField(max_length=256)\n    domain = models.CharField(max_length=256)\n    deleted_at = models.DateTimeField(null=True, default=None)\n```\n\nIf you wish to consume it from microservice B, first add this inside the aforementioned model's\ndefinition:\n\n\n```python\n    class JSONAPIMeta:\n        resource_name = 'companies'\n```\n\nand define an instance of a `django_json_api.models.JSONAPIModel` inside microservice B:\n\n```python\nfrom django_json_api.models import JSONAPIModel\nfrom django_json_api.fields import Attribute\n\nclass Company(JSONAPIModel):\n    class Meta:\n        api_url = MICROSERVICE_A_API_URL\n        resource_type = 'companies'\n\n    name = Attribute()\n    domain = Attribute()\n```\n\nPS: `api_url` expects a url with protocol (i.e. starting with `http(s)://`) and ending with a trailing slash `/`.\n\nNow, querying companies from microservice B is as easy as:\n\n```python\n  Company.objects.all()\n  Company.objects.filter(name=\"Reveal\")\n  Company.objects.iterator()\n  ...\n```\n\nYou can also have entities in one microservice relate to entities in another by leveraging both `RelatedJSONAPIField`\nand `WithJSONAPIQuerySet`. Take a look at this model definition from microservice B:\n\n```python\nfrom django.db import models\nfrom django_json_api.django import RelatedJSONAPIField\n\n\nclass User(models.Model):\n    name = models.CharField(max_length=256)\n    company = RelatedJSONAPIField(json_api_model=Company)\n    deleted_at = models.DateTimeField(null=True, default=None)\n```\n\nHere, `Company` is the `JSONAPIModel` defined above. This makes it possible, when querying for a user, to also\nfetch its related company:\n\n```python\nuser = User.objects.get(pk=1)\nuser.company # This will be resolved through an underlying HTTP request\n```\n\nIn case of larger querysets, you might want to prefetch the relations as you do with django's `prefetch_related`. For\nthat, you imbue `User`'s manager using `WithJSONApiQuerySet`, which will grant the manager a new\nmethod: `prefetch_jsonapi`.\n\nIf the remote microservice API supports PATCH request, you can save a record's attributes:\n\n```python\nuser = User.objects.get(pk=1)\nprint(user.name)  # Joe\nuser.name = \"Jack\"\nuser.save(update_fields=[\"name\"]) # This will perform a PATCH HTTP request\nupdated_user = User.from_cache(pk=1)\nprint(updated_user.name)  # Jack: the updated record with its new attributes is cached\n```\n\n## Authentication\n\nIt is possible to path a `auth` parameter to the `JSONAPIClient` in order to dynamically set the authorization headers on\nrequests before sending them to the remote HTTP server.\n\n```python\nimport jwt\nimport time\n\n\nclass CustomJWTAuth:\n    def __init__(self: \"CustomJWTAuth\", subject: str, secret: str, audience: str) -> None:\n    \tself.audience = audience\n    \tself.secret = secret\n\tself.subject = subject\n\n    def __call__(self: \"CustomJWTAuth\", request: requests.Request) -> requests.Request:\n        iat = int(time.time())\n    \ttoken = jwt.encode(\n\t    {\"sub\": self.subject, \"iat\": iat, \"exp\": iat + 60, \"aud\": self.audience},\n\t    self.secret,\n\t    \"HS256\",\n\t)\n\trequest.headers[\"Authorization\"] = f\"Bearer {token}\"\n\treturn request\n\n# This client will generate a new signed JWT for each request\nclient = JSONAPIClient(auth=CustomJWTAuth(\"myService\", \"*******\", \"jsonapi\"))\n```\n\n\n## License\n\n[MIT](LICENSE)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/share-work/django-json-api",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-json-api",
    "package_url": "https://pypi.org/project/django-json-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-json-api/",
    "project_urls": {
      "Homepage": "https://github.com/share-work/django-json-api"
    },
    "release_url": "https://pypi.org/project/django-json-api/1.1.0/",
    "requires_dist": [
      "djangorestframework-jsonapi (>=6.0.0)",
      "djangorestframework (>=3.14.0)",
      "python-dateutil (>=2.8.2)",
      "black (==22.3.0) ; extra == 'all'",
      "coverage (==5.4) ; extra == 'all'",
      "django-coverage-plugin (==1.8.0) ; extra == 'all'",
      "flake8 (==3.8.4) ; extra == 'all'",
      "isort (==5.7.0) ; extra == 'all'",
      "pre-commit (==2.10.0) ; extra == 'all'",
      "pytest-cov (==2.11.1) ; extra == 'all'",
      "pytest-django (==4.5.2) ; extra == 'all'",
      "pytest (==7.2.1) ; extra == 'all'",
      "requests-mock (==1.8.0) ; extra == 'all'",
      "testfixtures (==6.17.1) ; extra == 'all'",
      "black (==22.3.0) ; extra == 'dev'",
      "coverage (==5.4) ; extra == 'dev'",
      "django-coverage-plugin (==1.8.0) ; extra == 'dev'",
      "flake8 (==3.8.4) ; extra == 'dev'",
      "isort (==5.7.0) ; extra == 'dev'",
      "pre-commit (==2.10.0) ; extra == 'dev'",
      "pytest-cov (==2.11.1) ; extra == 'dev'",
      "pytest-django (==4.5.2) ; extra == 'dev'",
      "pytest (==7.2.1) ; extra == 'dev'",
      "requests-mock (==1.8.0) ; extra == 'dev'",
      "testfixtures (==6.17.1) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "JSON API specification for Django services",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17430091,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5567224f24901a84c67c550d7dd797a8ece7405cde48acef9e8d8c68f0a2dd8e",
        "md5": "3f47696371f1e8fe167090b89ed0fe33",
        "sha256": "7914821a84ac9a97d35a291d8b1239c03d1c0e08dc94663e07ba0632cfc14a8d"
      },
      "downloads": -1,
      "filename": "django_json_api-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3f47696371f1e8fe167090b89ed0fe33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 30455,
      "upload_time": "2023-03-23T15:03:19",
      "upload_time_iso_8601": "2023-03-23T15:03:19.159145Z",
      "url": "https://files.pythonhosted.org/packages/55/67/224f24901a84c67c550d7dd797a8ece7405cde48acef9e8d8c68f0a2dd8e/django_json_api-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7dd05e65356056b1f5282c36ecd234326d73e639ab88968a75ef023f8a258053",
        "md5": "231a841b412e9c5f6e8eb56435738780",
        "sha256": "e656c8c5f93374050bd6c15e2b2dd10d45a40299b86d54ad7b0332ff0a66d8f7"
      },
      "downloads": -1,
      "filename": "django-json-api-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "231a841b412e9c5f6e8eb56435738780",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 26030,
      "upload_time": "2023-03-23T15:03:23",
      "upload_time_iso_8601": "2023-03-23T15:03:23.235455Z",
      "url": "https://files.pythonhosted.org/packages/7d/d0/5e65356056b1f5282c36ecd234326d73e639ab88968a75ef023f8a258053/django-json-api-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}