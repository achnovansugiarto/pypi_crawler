{
  "info": {
    "author": "Lyst Ltd.",
    "author_email": "devs@lyst.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Django URLconf Export\n\n![Django URLconf Export logo](https://github.com/lyst/django-urlconf-export/raw/master/logos/box-logo.jpg)\n\nDo you need to make URLs for your Django website in another microservice?\n\nThis used to be painful; you had to hard-code URL logic in multiple places.\n\nThis was messy and fragile, especially when URLs are translated to multiple languages.\n\nBut now, Django URLconf Export has solved this problem.\n\nIt exports your website URLconf in a JSON format, and imports it in other services.\n\nSo you can make URLs for your website from anywhere, with no hassle, no repetition and no debt.\n\nSome example uses:\n\n* Email microservice that sends links to users.\n* Sitmaps generation microservice.\n* Microservice that buys paid ads for some website pages.\n\n## Video: 7 minute overview\n\n[![Link to short overview on YouTube](https://github.com/lyst/django-urlconf-export/raw/master/logos/video-link-720p.jpg)](https://youtu.be/3-9_6My5EWg)\n\n## Table of contents\n\n- [Django URLconf Export](https://github.com/lyst/django-urlconf-export#django-urlconf-export)\n  * [Video: 7 minute overview](https://github.com/lyst/django-urlconf-export#video-7-minute-overview)\n- [User Guide](https://github.com/lyst/django-urlconf-export#user-guide)\n  * [Installation](https://github.com/lyst/django-urlconf-export#installation)\n  * [Export URLconf as JSON](https://github.com/lyst/django-urlconf-export#export-urlconf-as-json)\n  * [Save URLconf to a file](https://github.com/lyst/django-urlconf-export#save-urlconf-to-a-file)\n    + [Example use-case](https://github.com/lyst/django-urlconf-export#example-use-case)\n  * [Serve URLconf from an endpoint](https://github.com/lyst/django-urlconf-export#serve-urlconf-from-an-endpoint)\n    + [Example use-case](https://github.com/lyst/django-urlconf-export#example-use-case-1)\n- [Feature Details](https://github.com/lyst/django-urlconf-export#feature-details)\n  * [Included URLs](https://github.com/lyst/django-urlconf-export#included-urls)\n  * [I18n URLs](https://github.com/lyst/django-urlconf-export#i18n-urls)\n  * [Export whitelist and blacklist](https://github.com/lyst/django-urlconf-export#export-whitelist-and-blacklist)\n  * [Import to a service with its own URLs](https://github.com/lyst/django-urlconf-export#import-to-a-service-with-its-own-urls)\n  * [Export non-default root URLconf](https://github.com/lyst/django-urlconf-export#export-non-default-root-urlconf)\n  * [Making URLs in a non-Django service](https://github.com/lyst/django-urlconf-export#making-urls-in-a-non-django-service)\n  * [Quality assurance for i18n URLs](https://github.com/lyst/django-urlconf-export#quality-assurance-for-i18n-urls)\n    + [Check for translation errors in URL patterns](https://github.com/lyst/django-urlconf-export#check-for-translation-errors-in-url-patterns)\n    + [Ensure URL patterns use kwargs, not args](https://github.com/lyst/django-urlconf-export#ensure-url-patterns-use-kwargs-not-args)\n- [Development Guide](https://github.com/lyst/django-urlconf-export#development-guide)\n  * [Running tests](https://github.com/lyst/django-urlconf-export#running-tests)\n  * [Developing](https://github.com/lyst/django-urlconf-export#developing)\n  * [Changing test dependencies](https://github.com/lyst/django-urlconf-export#changing-test-dependencies)\n  * [Formatting imports and code](https://github.com/lyst/django-urlconf-export#formatting-imports-and-code)\n  * [Publishing to PyPi](https://github.com/lyst/django-urlconf-export#publishing-to-pypi)\n- [Further Development](https://github.com/lyst/django-urlconf-export#further-development)\n\n# User Guide\n\n## Installation\n\nThe package is called `django-urlconf-export`\n\nSome ways to install:\n\n```shell\npipenv install django-urlconf-export\n\npip install django-urlconf-export\n\npoetry add django-urlconf-export\n```\n\n## Export URLconf as JSON\n\nIf you have this URLconf:\n\n```Python\nurlpatterns = [\n    url(r\"^login/$\", View.as_view(), name=\"login\"),\n]\n```\n\nYou can run this code:\n\n```Python\nfrom django_urlconf_export import export_urlconf\n\nexport_urlconf.as_json()\n```\n\nYou will get this JSON:\n\n```Python\n[\n    {\"regex\": \"^login/$\", \"name\": \"login\"},\n]\n```\n\nThen somewhere else, you can import the JSON like this:\n\n```Python\nfrom django_urlconf_export import import_urlconf\n\nimport_urlconf.from_json(json_urlpatterns)\n```\n\nThen you can call `reverse` to make urls, just like normal:\n\n```Python\nreverse(\"login\") == \"/login/\"\n```\n\n\n## Save URLconf to a file\n\nIf you add `django_urlconf_export` to your website's `INSTALLED_APPS` you can run:\n\n```shell\ndjango-admin export_urlconf_to_file > \"urlconf.json\"\n```\n\nTo create a file called `urlconf.json`\n\nThen you can import the file somewhere else like this:\n\n```python\nimport_urlconf.from_file(\"urlconf.json\")\n```\n\n### Example use-case\n\nAt Lyst, we have a skeleton repo that we share with external agencies who create special pages for us like [The Year in Fashion](https://www.lyst.com/year-in-fashion-2019/). The repo is a stripped-down simulation of our production environment. Agencies develop pages for our website within the repo, so integration is easy.\n\nWe include a URLconf file in the skeleton repo. Before we did this, agencies used to hard-code URLs into their work. But now:\n\n* They can make URLs in the standard Django way.\n* The URLs are always correct; no silent errors.\n* The URLs are localised for all the languages we support.\n\n## Serve URLconf from an endpoint\n\nThis view returns URLconf JSON:\n\n```Python\nfrom django_urlconf_export.views.export import URLConfExportView\n\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view()),\n]\n```\n\nThen you can import from a URI like this:\n\n```Python\nimport_urlconf.from_uri(\"/urlconf/\")\n```\n\n### Example use-case\n\nA Lyst we have 3 services that make Lyst website urls:\n\n* An email service.\n* A sitemaps generation service.\n* A paid advertising purchasing service.\n\nThese services fetch URLconf from the Lyst website when they boot up, and update it periodically.\n\nSo when the URLs change, we don't need to update any service code. This is particularly helpful when we add a new language for our localised URLs.\n\n\n\n# Feature Details\n\nIf you prefer to read code than docs, the tests have examples of all feature details:\n\n* [export_urlconf tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py)\n* [import_urlconf tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_import_urlconf.py)\n\n\n## Included URLs\n\nWe fully support included URLconf. The JSON looks like:\n\n```python\n{\n    \"regex\": \"^colors/\",\n    \"namespace\": None,\n    \"app_name\": None,\n    \"includes\": [\n        {\"regex\": \"^red/$\", \"name\": \"red\"},\n        {\"regex\": \"^blue/$\", \"name\": \"blue\"}\n    ],\n}\n```\n\n## I18n URLs\n\nWe fully support internationalized URLs. \n\nThe JSON looks like:\n\n```python\n{\n    \"regex\": {\n        \"en-us\": \"^color/$\",\n        \"en-gb\": \"^colour/$\",\n        \"fr-fr\": \"^couleur/$\"\n    },\n    \"name\": \"color\"\n}\n```\n\n---\n\nSome websites (e.g. Lyst) only localise URLs at the language-family level.\n\nFor example, `en` rather than `en-us` and `en-gb`.\n\nIf you set this Django setting:\n\n```python\nURLCONF_EXPORT_LANGUAGE_WITHOUT_COUNTRY = True\n```\n\nThen you get JSON like:\n\n```python\n{\n    \"regex\": {\n        \"en\": \"^color/$\",\n        \"fr\": \"^couleur/$\"\n    },\n    \"name\": \"color\"\n}\n```\n\nYou can also add an argument when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(language_without_country=True)\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file --language-without-country > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(language_without_country=True)),\n]\n```\n\n---\n\nWe support the `LocalePrefixPattern` (see [Django docs](https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#language-prefix-in-url-patterns).\n\nSo if you have URLconf like:\n\n```python\nfrom django.conf.urls.i18n import i18n_patterns\n\nurlpatterns = i18n_patterns(\n    url(r\"^$\", View.as_view(), name=\"index\"),\n)\n```\n\nYou get JSON like:\n\n```python\n{\n    \"isLocalePrefix\": True,\n    \"classPath\": \"django.urls.resolvers.LocalePrefixPattern\",\n    \"includes\": [\n        {\"regex\": \"^$\", \"name\": \"index\"}\n    ],\n}\n```\n\nNote that `classPath` is saved in the JSON. So if (like Lyst) your project uses a subclass of Django's `LocalePrefixPattern` it will work.\n\n\n## Export whitelist and blacklist\n\nBy default, all URLs will be exported. But you can set a whitelist and/or blacklist with these Django settings:\n\n```python\nURLCONF_EXPORT_WHITELIST = [\"only-show-this-url\"]\nURLCONF_EXPORT_BLACKLIST = [\"hide-this-url\", \"hide-this-one-too\"]\n```\n\nThe whitelist is applied first, then the blacklist.\n\nList items can be regexes, for example `\"secret-.\"` matches all URL names that start with `secret-` like `secret-page-1`, `secret-page-2` etc.\n\nThe lists are a mixture of:\n\n* URL names\n* URL namespaces\n\nFor included URLs with a `namespace` (see [Django docs](https://docs.djangoproject.com/en/3.0/topics/http/urls/#url-namespaces)) like the Django admin urls, the `namespace` and the `url_name` must be _both_ be allowed by the lists. \n\nSo you can ban all URLs in the `admin` namespace with `blacklist = [\"admin\"]`.\n\nIf you want to export `admin:some-url` but no other `admin` URLs, set `whitelist = [\"admin\", \"some-url\"]`. \n\nNote: if you set `whitelist = [\"admin\"]` _no admin URLs will be exported_.\n\nSee the [unit tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py) for more examples.\n\nYou can check the whitelist and/or blacklist are working as expected like this:\n\n```python\nprint(export_urlconf.get_all_allowed_url_names())\n```\n\nYou can also set whitelist or blacklist explicitly when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(\n    whitelist=[\"only-show-this-url\"],\n    blacklist=[\"hide-this-url\", \"hide-this-one-too\"]\n)\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file \\\n        --whitelist 'only-show-this-url' \\\n        --blacklist 'hide-this-url\", \"hide-this-one-too' \\\n        > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(\n        whitelist=[\"only-show-this-url\"],\n        blacklist=[\"hide-this-url\", \"hide-this-one-too\"]\n    )),\n]\n```\n\n## Import to a service with its own URLs\n\nBy default, the library imports URLconf into the root URLconf module of a service - `settings.ROOT_URLCONF`. \n\nBut you might not want to do this if the service has its own URLs.\n\nYou can import to a different module like this:\n\n```python\nimport_urlconf.from_file(\"urlconf.json\", urlconf=\"imported_urls\")\n```\n\nIf the module does not exist, it will be created - so you can call it anything you like.\n\nIf the module exists and has some `urlpatterns` already, the imported URLconf will be appended.\n\nThen you can make a url like:\n\n```python\nreverse(\"login\", urlconf=\"imported_urls\")\n```\n\n## Export non-default root URLconf\n\nBy default, we export the root URLconf module that creates the endpoints of your Django website: `settings.ROOT_URLCONF`. This is almost always what you want.\n\nIf you need to export from a different root URLconf module, you can use this Django setting:\n\n```python\nURLCONF_EXPORT_ROOT_URLCONF = \"path.to.non_default_root_urlconf\"\n```\n\nOr when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(\"path.to.non_default_root_urlconf\")\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file \\\n        --urlconf 'path.to.non_default_root_urlconf' \\\n        > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(\n        urlconf=\"path.to.non_default_root_urlconf\",\n    )),\n]\n```\n\n## Making URLs in a non-Django service\n\nYou can import and make URLs in any Python code; it doesn't need to be a Django webserver.\n\nYou just need to add Django as a dependency, and initialise like this:\n\n```python\nimport django\nfrom django.conf import settings\n\nsettings.configure(\n    SECRET_KEY=\"aifbc\",\n    ROOT_URLCONF=\"mock_root_urlconf\",\n)\n\ndjango.setup()\n```\n\nA similar pattern is used when [running pytests for a Django application](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/conftest.py).\n\n## Quality assurance for i18n URLs\n\nThis library is particularly useful if you have internationalized URLs.\n\nWe provide some methods to help ensure URLs are translated correctly.\n\n### Check for translation errors in URL patterns\n\nIf you want to check that URL pattern kwargs are the same for all translations of a URL, you can add a unit test to your project like:\n\n```python\nfrom django_urlconf_export import urlconf_qa\n\ndef test_for_url_translation_errors():\n    urlconf_qa.assert_url_kwargs_are_the_same_for_all_languages()\n```\n\n### Ensure URL patterns use kwargs, not args\n\nDjango allows you to make URL patterns that have positional arguments (`args`) and/or named keyword arguments (`kwargs`).\n\nThis flexibility can lead to confusion, particularly in large teams. So it can be helpful to ensure developers only use `kwargs` and not `args`.\n\nIt's also less error-prone to translate URLs that use `kwargs`, because translators are free to change the order of `kwargs` in the URL to match the word order in their language.\n\nFor example, at Lyst we have URLs like:\n\n|         | Example URL   | Localised URL Pattern                         |\n|---------|---------------|-----------------------------------------------|\n| English | `/gucci-bags` | `/(?P<designer_name>.+)-(?P<product_type>.+)` |\n| French  | `/sacs-gucci` | `/(?P<product_type>.+)-(?P<designer_name>.+)` |\n\nTo enforce that URL patterns always use `kwargs` and not `args`, add a test like this:\n\n```python\nfrom django_urlconf_export import urlconf_qa\n\ndef test_all_urls_use_kwargs():\n    urlconf_qa.assert_all_urls_use_kwargs_not_args()\n```\n\n# Development Guide\n\n## Running tests\n\n`pip install tox` (or `pip3 install tox`)\n\nThen run `tox`\n\n## Developing\n\n`pip install --user pipenv` (or `pip3 install --user pipenv`)\n\nThen run:\n\n* `pipenv install`\n* `pipenv shell`\n* `exit`\n* `pipenv --venv`\n\nThe location of the virtual environment will be displayed.\n\nHere is a [guide for using this venv in PyCharm](https://stackoverflow.com/a/50749980/3048733).\n\n## Changing test dependencies\n\nYou need to `pipenv install {new-dependency}` and also add the dependency in `tox.ini`.\n\n## Formatting imports and code\n\nFirst run `pipenv shell`\n\nThen run:\n\n* `isort` - format imports\n* `black src/ tests/` - format code\n\nThen `exit` to quit the shell.\n\n## Publishing to PyPi\n\nCreate a new release, and the package will be published automatically by a GitHub action. \n\n# Further Development\n\nIt would be cool if we could make URLs in JavaScript using the JSON generated by this library. Then we could make URLs on the front-end, and in Node services.\n\nLyst are not working on this at the moment. If this feature would be useful to you, a PR would be very welcome :)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lyst/django-urlconf-export",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-urlconf-export",
    "package_url": "https://pypi.org/project/django-urlconf-export/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-urlconf-export/",
    "project_urls": {
      "Homepage": "https://github.com/lyst/django-urlconf-export"
    },
    "release_url": "https://pypi.org/project/django-urlconf-export/1.0.4/",
    "requires_dist": [
      "django",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Make URLs for your website from anywhere.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7410564,
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "664c4c72d0fdbc1f176d50d911b46c502724a1f64b98bb1209860e0223671c4d",
        "md5": "dfa33d4c779f757e4bbaea21255e4281",
        "sha256": "319521012dbe3a7a43d59bf587df1a56449d8ee7912205b7d8e4cd4297b11815"
      },
      "downloads": -1,
      "filename": "django_urlconf_export-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dfa33d4c779f757e4bbaea21255e4281",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14976,
      "upload_time": "2020-03-16T21:29:30",
      "upload_time_iso_8601": "2020-03-16T21:29:30.671907Z",
      "url": "https://files.pythonhosted.org/packages/66/4c/4c72d0fdbc1f176d50d911b46c502724a1f64b98bb1209860e0223671c4d/django_urlconf_export-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "928581d2d9c4d5bc26e5ed14675f7b94db7708d37808e47cbecedf49343e4e53",
        "md5": "5088703a18e55b9adbdc30d099bc7c93",
        "sha256": "a2be1400e2712eaf73bad9a489015a8622821bc838be5c2fe2e81af67fabbd2b"
      },
      "downloads": -1,
      "filename": "django-urlconf-export-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5088703a18e55b9adbdc30d099bc7c93",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 673365,
      "upload_time": "2020-03-16T21:29:32",
      "upload_time_iso_8601": "2020-03-16T21:29:32.052098Z",
      "url": "https://files.pythonhosted.org/packages/92/85/81d2d9c4d5bc26e5ed14675f7b94db7708d37808e47cbecedf49343e4e53/django-urlconf-export-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}