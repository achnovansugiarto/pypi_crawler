{
  "info": {
    "author": "srplab",
    "author_email": "srplab.cn@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<h1 align=\"center\">CNode(Complex node)</h1>\r\n\r\n\r\nThe actual object can be abstracted as a node, and the relationship between the objects is expressed by the connections between the nodes. \r\n\r\nEach node has a specific meaning and can correspond to a data object or process object. The connection between nodes represents the relationship between them. If the status of a node is active, the status of the related node may be active too. In general, there are many factors that cause the state of a node to change. Each factor is associated with multiple other nodes(objects). The structure of the node needs to reflect this case, so a node is not a simple abstract point, but should have relatively complex structure.\r\n\r\nCnode consists of multiple input points and an output point. Each input point is connected to multiple other nodes, which can be regarded as a factor affecting the state of the node. The input point and other nodes are connected through a network. The output point is connected to all input points. The number of input points and connected cnodes can be changed dynamically.\r\n\r\nGiven status of some nodes, taken these nodes as the input points of other nodes, and get the status of output point of these nodes. A node can correspond to an actual object. When the node is activated, the corresponding object can do some processing. The connections between nodes can be judged based the actual object activation is correct or not.\r\n\r\nIt's features :\r\n\r\n* Each node can correspond to an actual object\r\n* Each node is true (activated) can be determined by multiple factors (points), each factor is related to multiple other nodes.\r\n* Each node forms a network through connections and their parameters, supporting inference based on the relationship between nodes.\r\n* Supports dynamic execution(reasoning) to obtain new active nodes\r\n* The execution or inference logic is placed in NodePoint's OnExecute method, which can be flexibly defined, including the use of neural networks algorithm.\r\n* Supports dynamic establishment and optimization of connections between nodes.\r\n\r\n **[More detail](https://github.com/srplab/pchain)**\r\n\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/srplab/cnode",
    "keywords": "network graph",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cnode",
    "package_url": "https://pypi.org/project/cnode/",
    "platform": "any",
    "project_url": "https://pypi.org/project/cnode/",
    "project_urls": {
      "Homepage": "https://github.com/srplab/cnode"
    },
    "release_url": "https://pypi.org/project/cnode/0.1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "CNode is complex node, supports dynamic establishment and optimization of connections between nodes )",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10147919,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "add546a589d5445bca89020839c8ece412d19b8a0ee6f638bdfa7256d460f9e1",
          "md5": "b5298d5327cb4da77bb77f32a72010aa",
          "sha256": "40fc4c79423dc360ede2b2afc038bfd8346a8b764d164044bc9d59ea24be65b0"
        },
        "downloads": -1,
        "filename": "cnode-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5298d5327cb4da77bb77f32a72010aa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 5720091,
        "upload_time": "2021-04-23T08:00:54",
        "upload_time_iso_8601": "2021-04-23T08:00:54.257751Z",
        "url": "https://files.pythonhosted.org/packages/ad/d5/46a589d5445bca89020839c8ece412d19b8a0ee6f638bdfa7256d460f9e1/cnode-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "add546a589d5445bca89020839c8ece412d19b8a0ee6f638bdfa7256d460f9e1",
        "md5": "b5298d5327cb4da77bb77f32a72010aa",
        "sha256": "40fc4c79423dc360ede2b2afc038bfd8346a8b764d164044bc9d59ea24be65b0"
      },
      "downloads": -1,
      "filename": "cnode-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b5298d5327cb4da77bb77f32a72010aa",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 5720091,
      "upload_time": "2021-04-23T08:00:54",
      "upload_time_iso_8601": "2021-04-23T08:00:54.257751Z",
      "url": "https://files.pythonhosted.org/packages/ad/d5/46a589d5445bca89020839c8ece412d19b8a0ee6f638bdfa7256d460f9e1/cnode-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}