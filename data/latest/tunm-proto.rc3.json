{
  "info": {
    "author": "tickbh",
    "author_email": "tickdream125@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# tunm_proto\nsimple binary proto\n一种简单的二进制数据协议\n\n## 支持的数据类型\n基本支持的类型 \"u8\",   \"i8\",   \"u16\",   \"i16\",   \"u32\",   \"i32\", \"u64\",   \"i64\", \"varint\", \"float\",   \"string\",  \"raw\", \"array\",  \"map\"\n\n### 各种数值类型格式说明\n- u8/i8 用一个字节进行写入\n- u16/i16/u32/i32/u64/i64 分别对应大小的数据写入, 小端模式\n- float 精度只有3位小数, 当成*1000的u32处理\n- double 精度只有6位小数, 当成*1000000的u64数据\n- varint 可变长的整型数据\n> 如果是正数则*2, 如果是负数则-(x + 1) * 2, 相当于0->0, -1->1, 1->2,-2->3,2->4来做处理, 因为是小子节的数比较多, 每bit里的第一位则表示是否是最后一位, 如果10000001, 则表示还要继续往下读如果是00000001则表示这是最后一位\n- str 字符串类型, 则先用varint表示str的长度, 然后再写入str的值\n- str_idx 字符串索引值, 在str的arr表中的第几位, 重复的str则在同一个位置, 用varint表示\n- array 数组类型, 先用varint表示array的长度, 然后再写入各个value的数值\n- map map类型, 先用varint表示map的长度, 然后先写入key, 再写入value, 依次循环到结束\n\n\n## 为什么我们需要二进制协议\n下图是文本格式JSON与tunm的对比\n\n| 类型| 可读 | 可编辑 | 编码速度  | 解码速度 | 数据大小 | 预定义 |\n| :--- | :----: | :----: | :----: | :----: | :---: | :---: |\n| JSON   |  ✓   | ✓   | 慢 | 慢| 大 | 否 |\n| tunm   |  x    | x   | 快 | 快| 小 | 否 |\n| protobuf |  x  | x   | 快 | 快| 小 | 是 |\n\n在高性能的场景下, 或者需要流量传输比较敏感的地方, 通常会选择二进制来代替文本协议来做为通讯的, 如RPC, REST, 游戏等情况。\n相对于google protobuf, 它需要比较完善的预定义过程, 就比如客户端版本1, 服务端版本2, 就有比较大的可能造成不兼容, 对需求经常变化的就会比较难与同步。\ntunm相对于JSON, 若第一版是\n```json\n{\n    \"name\": \"tunm\", \"version\": 1\n}\n```\n此时第二版需要加入用户的id, 就可以很方便的变成\n```json\n{\n    \"name\": \"tunm\", \"version\": 2, \"id\": 1\n}\n```\n而对客户端1来说, 只是多一个id的字段, 不会有任何的破坏, 做到版本升级而无影响\n\n## 数据使用, 以Rust为例\n```rust\nextern crate tunm_proto as tunm;\nuse tunm::{Value, Buffer};\n\nmod test_data;\nuse std::collections::{HashMap};\n\nfn main()\n{\n    println!(\"welcome to tickdream rust protocol\");\n\n    let mut hash_value = HashMap::<Value, Value>::new();\n    hash_value.insert(Value::Str(\"name\".to_string()), Value::Str(\"tunm_proto\".to_string()));\n    hash_value.insert(Value::Str(\"tunm_proto\".to_string()), Value::U16(1 as u16));\n\n    {\n        let mut buffer = Buffer::new();\n        tunm::encode_proto(&mut buffer, &\"cmd_test_op\".to_string(), vec![Value::Map(hash_value.clone())]).unwrap();\n        let just_str = \"\n        [\\\"cmd_test_op\\\", [\\\"tunm_proto\\\", {\\\"name\\\": \\\"tunm_proto\\\", \\\"tunm_proto\\\": 1}]]\n        \";\n        println!(\"just json len = {}\", just_str.len());\n        println!(\"buffer len == {}\", buffer.data_len());\n        // just read field\n        let read = tunm::decode_proto(&mut buffer).unwrap();\n        match read {\n            (name, val) => {\n                assert_eq!(name, \"cmd_test_op\".to_string());\n                assert_eq!(val[0], Value::Map(hash_value));\n                assert_eq!(val.len(), 1);\n            }\n        }\n    }\n}\n\n```\n\n\n### 格式说明\n数据协议分为三部分(协议名称, 字符串索引区, 数据区(默认为数组))\n如数据协议名为cmd_test_op, 数据为[\"tunm_proto\", {\"name\": \"tunm_proto\", \"tunm_proto\": 1}]\n1. 那么数据将先压缩协议名cmd_test_op, 将先写下可变长度(varint)值为11占用1字节, 然后再写入cmd_test_op的utf8的字节数\n2. 接下来准备写入字符串索引区, 索引数据用到的字符串为[\"tunm_proto\", \"name\"]两个字符串, 即将写入可变长度(varint)值为2占用一字节, 然后分别写入字符串tunm_proto和name两个字符串, 这样子字符串相接近有利于压缩, 且如果有相同的字符串可以更好的进行复用\n3. 接下来准备写入数据区, \n首先判断为一个数组, 写入类型u8(TYPE_ARR=16), 写入数组长度varint(2), 准备开始写第一个数据, 字符串tunm_proto, 已转成id, 则写入类型u8(TYPE_STR_IDX=14), 查索引号0, 则写入varint(0), 第一个字段写入完毕, 接下来第二个字段是一个map数据, 写入map长度varint(2), 然后进行遍历得到key值为name, 则写入写入类型u8(TYPE_STR_IDX=14),查索引号1, 则写入varint(1), 然后开始写name对应的值tunm_proto, 写入TYPE_STR_IDX类型的0值, 则这组key写入完毕, 依此类推写入第二组数据\n\n测试打印的结果\n用完整的level-full4.json\n\n```\n原始的JSON长度 = 2.2M\n解析JSON用时 = Ok(1.520187s)\n用tunm_proto压缩test_level4_json的长度 = 370k\n压缩JSON耗时 = Ok(31.842ms)\nname = cmd_level4_full\n解析buffer耗时 = Ok(22.642ms)\n```\n解析速度约为JSON的68倍, 符合预期, 大小为明文的0.16倍, 符合压缩比",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "tunm proto for Python",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tunm-proto",
    "package_url": "https://pypi.org/project/tunm-proto/",
    "platform": "any",
    "project_url": "https://pypi.org/project/tunm-proto/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tunm-proto/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "a binary proto like json",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14398094,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "768e3661f95c5db3a4d37ffc9c731007c4825d957febf9dd3eb337cd014bb7bc",
          "md5": "6bcaadeb88000467aa753a7111e3460a",
          "sha256": "7f9dfee72c06fae9b67cbac718289db665de818d893c4d44507dbb84d08bd3e2"
        },
        "downloads": -1,
        "filename": "tunm_proto-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6bcaadeb88000467aa753a7111e3460a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9180,
        "upload_time": "2022-06-24T06:39:58",
        "upload_time_iso_8601": "2022-06-24T06:39:58.963021Z",
        "url": "https://files.pythonhosted.org/packages/76/8e/3661f95c5db3a4d37ffc9c731007c4825d957febf9dd3eb337cd014bb7bc/tunm_proto-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c881f8e6cd46186b65206e15382623bf07a34042d9e1f43d4e626a4bdfb0d339",
          "md5": "f85f11a637e30f565200858d18adb946",
          "sha256": "bbe995628dcc25e59e3a8f8b2725071245b90ba054b865b5705f584170b071c7"
        },
        "downloads": -1,
        "filename": "tunm_proto-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f85f11a637e30f565200858d18adb946",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10855,
        "upload_time": "2022-07-04T08:07:09",
        "upload_time_iso_8601": "2022-07-04T08:07:09.598000Z",
        "url": "https://files.pythonhosted.org/packages/c8/81/f8e6cd46186b65206e15382623bf07a34042d9e1f43d4e626a4bdfb0d339/tunm_proto-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fd580f2a655b981eff917486c39b97ef0071d0bc5f2f0196c61c9f7a4f84f00",
          "md5": "ee331c91be4b342535476f94eb389d54",
          "sha256": "d997b45838a85e7dad57e6e2eaa9dc7a060b2f8c4896d962377efb3cd4be5324"
        },
        "downloads": -1,
        "filename": "tunm_proto-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee331c91be4b342535476f94eb389d54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10891,
        "upload_time": "2022-07-11T11:21:36",
        "upload_time_iso_8601": "2022-07-11T11:21:36.290939Z",
        "url": "https://files.pythonhosted.org/packages/2f/d5/80f2a655b981eff917486c39b97ef0071d0bc5f2f0196c61c9f7a4f84f00/tunm_proto-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fd580f2a655b981eff917486c39b97ef0071d0bc5f2f0196c61c9f7a4f84f00",
        "md5": "ee331c91be4b342535476f94eb389d54",
        "sha256": "d997b45838a85e7dad57e6e2eaa9dc7a060b2f8c4896d962377efb3cd4be5324"
      },
      "downloads": -1,
      "filename": "tunm_proto-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ee331c91be4b342535476f94eb389d54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10891,
      "upload_time": "2022-07-11T11:21:36",
      "upload_time_iso_8601": "2022-07-11T11:21:36.290939Z",
      "url": "https://files.pythonhosted.org/packages/2f/d5/80f2a655b981eff917486c39b97ef0071d0bc5f2f0196c61c9f7a4f84f00/tunm_proto-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}