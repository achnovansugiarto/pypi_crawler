{
  "info": {
    "author": "Al Cramer",
    "author_email": "ac2.71828@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## jsserialize.py: serialize python data structures as json strings\n\nThis module defines the functions \"encode\" and \"decode\",\nwhich encode/decode data to and from json strings.\nUnlike the functions in the standard \"json\" package,\nthese can automatically handle user-defined classes and circular references.\n\n\t\tjsserialize functions:\n\n\t\tencode(data,custom_encode=None):\n\t\t\tEncode \"data\" to a json string. \n\t\t\tUse \"custom_encode\" to override the default encoding of objects.\n\t\t\tReturns: json string encoding of \"data\"\n\n\t\tdecode(jsonstr,custom_decode=None):\n\t\t\tRecreate data from a json string (\"jsonstr\").  \n\t\t\tUse \"custom_decode\" to override the default decoding of objects.\n\t\t\tReturns: the recreated data\n\nCustom encode/decode:\n\nWhen we encode an object, we create a dictionary of \nname/value pairs giving the object's attributes. This contains \nthe info needed to rebuild the object at decode time. The default \nhandling requires that the object's class have a default \nconstructor (ie., a constructor that doesn't accept arguments, \"MyClass()\").\nIf that's not possible, you can pass a custom encoder to \"encode\" \n(and custom decoder to \"decode\").\n\nThe custom encoder accepts an object and returns a dictionary.\nReturning \"None\" means the object wasn't encoded, and we should\nuse the default handling. The custom decoder accepts a class name\nand dictionary and returns an object. Returning \"None\" means\nit wasn't decoded, and we should use the default handling.\nHere's an example: we encode/decode a date from\nthe python datetime module.\n\n\t\tdef custom_encode(obj):\n    \t\tif obj.__class__.__name__ == 'date':\n        \t\t# 'obj.isoformat()' returns a str\n        \t\treturn {'isoformat': obj.isoformat()}\n    \t\treturn None\n\n\t\tdef custom_decode(classname,dct):\n    \t\tif classname == 'datetime.date':\n        \t\t# \"fromisoformat\" is class method that creates\n        \t\t# a date object from an isoformat string\n        \t\treturn datetime.date.fromisoformat(dct['isoformat'])\n    \t\treturn None\n\nNote: in \"custom_decode\", \"classname\" is the full classname \n(module name, followed by the name in the class definition).\n\n### Requirements and Installation\nRequires Python 3.  Install with pip:\n\n\t\tpip install jsserialize\n\n### Dev Notes\nThis repository contains \"jsserialize.py\". Additonal files (\"setup.py\",\n\"setup.cfg\", and \"hwoto_pypi.txt\") are for uploading the module to pypi.\n\n### Sample Code\n\n\t\timport jsserialize\n\t\t\n\t\t# We need some data to encode. We'll use a tree built from Nodes.\n\t\t# The base class None has a \"parent\" attribute and a list \"kids\"\n\t\t# containing child nodes. From the base class we define 2 subclasses,\n\t\t# \"A\" and \"B\". The A class has a \"color\" attribute whose value is a string.\n\t\t# The B class has a \"date\" attribute whose value is an object of class\n\t\t# \"date\", from the standard python \"datetime\" module.\n\t\t\n\t\timport datetime\n\t\tnodeid = 0\n\t\tclass Node():\n    \t\tdef __init__(self):\n        \t\tglobal nodeid\n        \t\tself.id = str(nodeid)\n        \t\tnodeid += 1\n        \t\tself.parent = None\n        \t\tself.kids = []\n\t\t\n    \t\tdef add_kid(self,kid):\n        \t\tself.kids.append(kid)\n        \t\tkid.parent = self\n\t\t\n    \t\tdef attrs_to_str(self):\n        \t\t# child classes override this to return a string giving\n        \t\t# attribute name/values.\n        \t\treturn ''\n\t\t\n    \t\tdef printme(self,indent=''):\n        \t\tpid = \"None\" if self.parent is None else self.parent.id\n        \t\tprint('%s%s %s parent:%s %s' %\n            \t\t(indent,self.__class__.__name__,\n            \t\tself.id,pid,self.attrs_to_str()))\n        \t\tindent += '  '\n        \t\tfor k in self.kids:\n            \t\tk.printme(indent)\n\t\t\n\t\tclass A(Node):\n    \t\tdef __init__(self,color='red'):\n        \t\tsuper().__init__()\n        \t\tself.color = color\n\t\t\n    \t\tdef attrs_to_str(self):\n        \t\treturn 'color:%s' % self.color\n\t\t\n\t\tclass B(Node):\n    \t\tdef __init__(self,date=None):\n        \t\tsuper().__init__()\n        \t\tself.date = date\n\t\t\n    \t\tdef attrs_to_str(self):\n        \t\treturn 'date:%s' % (\n            \t\t'None' if self.date is None else self.date.isoformat())\n\t\t\n\t\t# make the data we'll encode/decode: a tree built from A and B nodes.\n\t\tdef make_data():\n    \t\troot = A()\n    \t\tkid1 = A('yellow')\n    \t\tkid2 = B(datetime.date.fromordinal(1))\n    \t\troot.add_kid(kid1)\n    \t\troot.add_kid(kid2)\n    \t\tkid2.add_kid( A('blue') )\n    \t\tkid2.add_kid( B(datetime.date.today()) )\n    \t\treturn root\n\t\t\n\t\t# Here are the custom encode/decode functions. We need them\n\t\t# because our data includes objects of class \"date\"\n\t\t# from the python standard \"datetime\" module, and jsserialize\n\t\t# doesn't know how to encode/decode objects of that class.\n\t\t# Note that these encode/decode functions only need to handle\n\t\t# \"date\" objects -- our data also includes objects of class \"A\"\n\t\t# and \"B\", but jsserialize can handle them without our help. (For this\n\t\t# to work, we have to make sure our user-defined classes have\n\t\t# default constructors).\n\t\t\n\t\tdef custom_encode(obj):\n    \t\tif obj.__class__.__name__ == 'date':\n        \t\t# 'obj.isoformat()' returns a str\n        \t\treturn {'isoformat': obj.isoformat()}\n    \t\t# returning None tells jsserialize: we didn't encode the\n    \t\t# object, you do it.\n    \t\treturn None\n\t\t\n\t\tdef custom_decode(classname,dct):\n    \t\t# Notice that classname is the \"full\" name for the class:\n    \t\t# module name, followed the name that appeared in the\n    \t\t# class definition.\n    \t\tif classname == 'datetime.date':\n        \t\t# \"fromisoformat\" is class method that creates\n        \t\t# a date object from an isoformat string\n        \t\treturn datetime.date.fromisoformat(dct['isoformat'])\n    \t\t# returning None tells jsserialize: we didn't decode the\n    \t\t# object, you do it.\n    \t\treturn None\n\t\t\n\t\tdef test():\n    \t\t# create data to be encoded: a tree built from nodes\n    \t\tdata = make_data()\n    \t\tprint(\"data to be encoded:\")\n    \t\tdata.printme()\n\t\t\n    \t\t# get the json string encoding\n    \t\tjson_str = jsserialize.encode(data,custom_encode=custom_encode)\n\t\t\n    \t\t# decode the json_str, recreating the data\n    \t\tdata2 = jsserialize.decode(json_str, custom_decode=custom_decode)\n    \t\tprint(\"\\ndecoded data:\")\n    \t\tdata2.printme()\n\t\t\n    \t\t# print the json string\n    \t\tprint(\"\\njson string:\")\n    \t\tprint(json_str)\n\t\t\n\t\tif __name__=='__main__':\n    \t\ttest()\n\n### Who do I talk to? ###\n\nAl Cramer (ac2.7@1828@gmail.com)\n\nCopyright Al Cramer 2022\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://alcramer@bitbucket.org/alcramer/jsserialize.git",
    "keywords": "json,serialize,serialization",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsserialize",
    "package_url": "https://pypi.org/project/jsserialize/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsserialize/",
    "project_urls": {
      "Homepage": "https://alcramer@bitbucket.org/alcramer/jsserialize.git"
    },
    "release_url": "https://pypi.org/project/jsserialize/0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "1-step serialization to/from json: handles user classes and circular refs",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12976003,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f13b313f19bb920cc7f2b894839badea1128bfbd948984353db342ad228a15d",
          "md5": "ce831141c7df2e5e89e0aaf51c02d5cc",
          "sha256": "27c9219a49b8e2402dba442ea5edebb4ceb25940c5b9bd064002b4edf72d13e3"
        },
        "downloads": -1,
        "filename": "jsserialize-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce831141c7df2e5e89e0aaf51c02d5cc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6455,
        "upload_time": "2022-02-22T21:31:21",
        "upload_time_iso_8601": "2022-02-22T21:31:21.089304Z",
        "url": "https://files.pythonhosted.org/packages/8f/13/b313f19bb920cc7f2b894839badea1128bfbd948984353db342ad228a15d/jsserialize-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fc09074f387dc9df73904bfb9ca4c47fa0a0ed26508fcd79a1999af87dc8c94",
          "md5": "4b8370f513dcc364775bf9d68de6fd36",
          "sha256": "a19c0b3445fe1e28dbcdbf38c3440e8d04ac7d3c681261a5a97242d6bb971423"
        },
        "downloads": -1,
        "filename": "jsserialize-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4b8370f513dcc364775bf9d68de6fd36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6266,
        "upload_time": "2022-02-22T21:31:23",
        "upload_time_iso_8601": "2022-02-22T21:31:23.140136Z",
        "url": "https://files.pythonhosted.org/packages/1f/c0/9074f387dc9df73904bfb9ca4c47fa0a0ed26508fcd79a1999af87dc8c94/jsserialize-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f13b313f19bb920cc7f2b894839badea1128bfbd948984353db342ad228a15d",
        "md5": "ce831141c7df2e5e89e0aaf51c02d5cc",
        "sha256": "27c9219a49b8e2402dba442ea5edebb4ceb25940c5b9bd064002b4edf72d13e3"
      },
      "downloads": -1,
      "filename": "jsserialize-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce831141c7df2e5e89e0aaf51c02d5cc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6455,
      "upload_time": "2022-02-22T21:31:21",
      "upload_time_iso_8601": "2022-02-22T21:31:21.089304Z",
      "url": "https://files.pythonhosted.org/packages/8f/13/b313f19bb920cc7f2b894839badea1128bfbd948984353db342ad228a15d/jsserialize-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fc09074f387dc9df73904bfb9ca4c47fa0a0ed26508fcd79a1999af87dc8c94",
        "md5": "4b8370f513dcc364775bf9d68de6fd36",
        "sha256": "a19c0b3445fe1e28dbcdbf38c3440e8d04ac7d3c681261a5a97242d6bb971423"
      },
      "downloads": -1,
      "filename": "jsserialize-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4b8370f513dcc364775bf9d68de6fd36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6266,
      "upload_time": "2022-02-22T21:31:23",
      "upload_time_iso_8601": "2022-02-22T21:31:23.140136Z",
      "url": "https://files.pythonhosted.org/packages/1f/c0/9074f387dc9df73904bfb9ca4c47fa0a0ed26508fcd79a1999af87dc8c94/jsserialize-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}