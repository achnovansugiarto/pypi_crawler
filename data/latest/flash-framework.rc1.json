{
  "info": {
    "author": "Manikant Kumar",
    "author_email": "mani2474695@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# Welcome to Flash 👋\n![Version](https://img.shields.io/badge/version-1-blue.svg?cacheSeconds=2592000)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](#)\n\n> Flash is a Python based web framework that has been created to \nlearn how web framework work under the hood\n\n## Quick Start\n\nInstall it:\n\n```bash\npip install flash-framework\n\n```\n\nBasic Usage:\n\n```python\n# app.py\nfrom flash import Flash\n\napp = Flash()\n\n\n@app.route(\"/\")\ndef home(req, resp):\n    resp.text = \"Hello, this is a home page.\"\n\n\n@app.route(\"/about\")\ndef about_page(req, resp):\n    resp.text = \"Hello, this is an about page.\"\n\n\n@app.route(\"/{age:d}\")\ndef tell_age(req, resp, age):\n    resp.text = f\"Your age is {age}\"\n\n\n@app.route(\"/{name:l}\")\nclass GreetingHandler:\n    def get(self, req, resp, name):\n        resp.text = f\"Hello, {name}\"\n\n\n@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\"example.html\", context={\"title\": \"Awesome Framework\", \"body\": \"welcome to the future!\"})\n\n\n@app.route(\"/json\")\ndef json_handler(req, resp):\n    resp.json = {\"this\": \"is JSON\"}\n\n\n@app.route(\"/custom\")\ndef custom_response(req, resp):\n    resp.body = b'any other body'\n    resp.content_type = \"text/plain\"\n```\n\nStart:\n\n```bash\ngunicorn app:app\n```\n\n## Handlers\n\nIf you use class based handlers, only the methods that you implement will be allowed:\n\n```python\n@app.route(\"/{name:l}\")\nclass GreetingHandler:\n    def get(self, req, resp, name):\n        resp.text = f\"Hello, {name}\"\n```\n\nThis handler will only allow `GET` requests. That is, `POST` and others will be rejected. The same thing can be done with\nfunction based handlers in the following way:\n\n```python\n@app.route(\"/\", methods=[\"get\"])\ndef home(req, resp):\n    resp.text = \"Hello, this is a home page.\"\n```\n\nNote that if you specify `methods` for class based handlers, they will be ignored.\n\n## Unit Tests\n\nThe recommended way of writing unit tests is with [pytest](https://docs.pytest.org/en/latest/). There are two built in fixtures\nthat you may want to use when writing unit tests with Flash. The first one is `app` which is an instance of the main `Flash` class:\n\n```python\ndef test_route_overlap_throws_exception(app):\n    @app.route(\"/\")\n    def home(req, resp):\n        resp.text = \"Welcome Home.\"\n\n    with pytest.raises(AssertionError):\n        @app.route(\"/\")\n        def home2(req, resp):\n            resp.text = \"Welcome Home2.\"\n```\n\nThe other one is `client` that you can use to send HTTP requests to your handlers. It is based on the famous [requests](http://docs.python-requests.org/en/master/) and it should feel very familiar:\n\n```python\ndef test_parameterized_route(app, client):\n    @app.route(\"/{name}\")\n    def hello(req, resp, name):\n        resp.text = f\"hey {name}\"\n\n    assert client.get(url(\"/matthew\")).text == \"hey matthew\"\n```\n\nNote that there is a `url()` function used. It is used to generate the absolute url of the request given a relative url. Import it before usage:\n\n```python\nfrom flash.utils.tests import url\n```\n\n## Templates\n\nThe default folder for templates is `templates`. You can change it when initializing the main `Flash()` class:\n\n```python\napp = Flash(templates_dir=\"templates_dir_name\")\n```\n\nThen you can use HTML files in that folder like so in a handler:\n\n```python\n@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\"example.html\", context={\"title\": \"Awesome Framework\", \"body\": \"welcome to the future!\"})\n```\n\n## Static Files\n\nJust like templates, the default folder for static files is `static` and you can override it:\n\n```python\napp = Flash(static_dir=\"static_dir_name\")\n```\n\nThen you can use the files inside this folder in HTML files:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{title}}</title>\n\n  <link href=\"/static/main.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n\n<body>\n    <h1>{{body}}</h1>\n    <p>This is a paragraph</p>\n</body>\n</html>\n```\n\n## Custom Exception Handler\n\nSometimes, depending on the exception raised, you may want to do a certain action. For such cases, you can register an exception handler:\n\n```python\ndef on_exception(req, resp, exception):\n    if isinstance(exception, HTTPError):\n        if exception.status == 404:\n            resp.text = \"Unfortunately the thing you were looking for was not found\"\n        else:\n            resp.text = str(exception)\n    else:\n        # unexpected exceptions\n        if app.debug:\n            debug_exception_handler(req, resp, exception)\n        else:\n            print(\"These unexpected exceptions should be logged.\")\n\napp = Flash(debug=False)\napp.add_exception_handler(on_exception)\n```\n\nThis exception handler will catch 404 HTTPErrors and change the text to `\"Unfortunately the thing you were looking for was not found\"`. For other HTTPErrors, it will simply\nshow the exception message. If the raised exception is not an HTTPError and if `debug` is set to True, it will show the exception and its traceback. Otherwise, it will log it.\n\n## Middleware\n\nYou can create custom middleware classes by inheriting from the `flash.middleware.Middleware` class and override its two methods\nthat are called before and after each request:\n\n```python\nfrom flash import Flash\nfrom flash.middleware import Middleware\n\napp = Flash()\n\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\n\napp.add_middleware(SimpleCustomMiddleware)\n```\n\n### ORM\n\nFlash has a built-in ORM. Here is how you can use it:\n\n\n```python\n# connect to database\nfrom flash.orm import Database\n\ndb = Database(\"./test.db\")\n\n# define tables\nclass Author(Table):\n    name = Column(str)\n    age = Column(int)\n\nclass Book(Table):\n    title = Column(str)\n    published = Column(bool)\n    author = ForeignKey(Author)\n\n# create tables\ndb.create(Author)\ndb.create(Book)\n\n# create an instance and insert a row\ngreg = Author(name=\"George\", age=13)\ndb.save(greg)\n\n# fetch all rows\nauthors = db.all(Author)\n\n# get a specific row\nauthor = db.get(Author, 47)\n\n# save an object with a foreign key\nbook = Book(title=\"Building an ORM\", published=True, author=greg)\ndb.save(book)\n\n# fetch an object with a forein key\nprint(Book.get(55).author.name)\n\n# update an object\nbook.title = \"How to build an ORM\"\ndb.update(book)\n\n# delete an object\ndb.delete(Book, id=book.id)\n```\n\n## Features\n\n- WSGI compatible\n- Built-in ORM\n- Parameterized and basic routing\n- Class based handlers\n- Test Client\n- Support for templates\n- Support for static files\n- Custom exception handler\n- Middleware\n\n## Author\n\n👤 **Manikant Kumar**\n\n* Website: https://devil-cyber.github.io/CodingSpace/\n* Github: [@devil-cyber](https://github.com/devil-cyber)\n* LinkedIn: [@mani360](https://linkedin.com/in/mani360)\n\n## Show your support\n\nGive a ⭐️ if this project helped you!\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/devil-cyber/flash",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flash-framework",
    "package_url": "https://pypi.org/project/flash-framework/",
    "platform": "",
    "project_url": "https://pypi.org/project/flash-framework/",
    "project_urls": {
      "Homepage": "https://github.com/devil-cyber/flash"
    },
    "release_url": "https://pypi.org/project/flash-framework/1.0.0/",
    "requires_dist": [
      "attrs (==21.2.0)",
      "charset-normalizer (==2.0.1)",
      "gunicorn (==20.1.0)",
      "idna (==3.2)",
      "iniconfig (==1.1.1)",
      "Jinja2 (==3.0.1)",
      "MarkupSafe (==2.0.1)",
      "packaging (==21.0)",
      "parse (==1.19.0)",
      "pluggy (==0.13.1)",
      "py (==1.10.0)",
      "pyparsing (==2.4.7)",
      "pytest (==6.2.4)",
      "requests (==2.26.0)",
      "requests-wsgi-adapter (==0.4.1)",
      "toml (==0.10.2)",
      "urllib3 (==1.26.6)",
      "WebOb (==1.8.7)",
      "whitenoise (==5.2.0)"
    ],
    "requires_python": ">=3.6.9",
    "summary": "Python Web Framework built for learning and fun.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10905081,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "146acf1ec3a6f2eddde92cac8ed6002ec7a8e923d41f52d47d61b904589ea17e",
          "md5": "be7fbb0dd572f20809e6c8b5f2d7dc7b",
          "sha256": "c0e462d632108a224dabb3718ec2a0d1338dac9909c9ef6cc9b55d01a13b351b"
        },
        "downloads": -1,
        "filename": "flash_framework-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be7fbb0dd572f20809e6c8b5f2d7dc7b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6.9",
        "size": 10955,
        "upload_time": "2021-07-14T07:47:20",
        "upload_time_iso_8601": "2021-07-14T07:47:20.125301Z",
        "url": "https://files.pythonhosted.org/packages/14/6a/cf1ec3a6f2eddde92cac8ed6002ec7a8e923d41f52d47d61b904589ea17e/flash_framework-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc313b5b86e51ea64eefa6f2ace4c0f6ee429bbead98dc0e94dc61ffc47067d1",
          "md5": "bbc0a55f07d86d399c9ed6d6b1d7e5ba",
          "sha256": "abee9f061fccf9d16c901ea6bd4afbc9c8015934c2de78bc6f63bd13b98a61fb"
        },
        "downloads": -1,
        "filename": "flash-framework-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbc0a55f07d86d399c9ed6d6b1d7e5ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.9",
        "size": 12418,
        "upload_time": "2021-07-14T07:47:23",
        "upload_time_iso_8601": "2021-07-14T07:47:23.364332Z",
        "url": "https://files.pythonhosted.org/packages/cc/31/3b5b86e51ea64eefa6f2ace4c0f6ee429bbead98dc0e94dc61ffc47067d1/flash-framework-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "146acf1ec3a6f2eddde92cac8ed6002ec7a8e923d41f52d47d61b904589ea17e",
        "md5": "be7fbb0dd572f20809e6c8b5f2d7dc7b",
        "sha256": "c0e462d632108a224dabb3718ec2a0d1338dac9909c9ef6cc9b55d01a13b351b"
      },
      "downloads": -1,
      "filename": "flash_framework-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be7fbb0dd572f20809e6c8b5f2d7dc7b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6.9",
      "size": 10955,
      "upload_time": "2021-07-14T07:47:20",
      "upload_time_iso_8601": "2021-07-14T07:47:20.125301Z",
      "url": "https://files.pythonhosted.org/packages/14/6a/cf1ec3a6f2eddde92cac8ed6002ec7a8e923d41f52d47d61b904589ea17e/flash_framework-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc313b5b86e51ea64eefa6f2ace4c0f6ee429bbead98dc0e94dc61ffc47067d1",
        "md5": "bbc0a55f07d86d399c9ed6d6b1d7e5ba",
        "sha256": "abee9f061fccf9d16c901ea6bd4afbc9c8015934c2de78bc6f63bd13b98a61fb"
      },
      "downloads": -1,
      "filename": "flash-framework-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bbc0a55f07d86d399c9ed6d6b1d7e5ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.9",
      "size": 12418,
      "upload_time": "2021-07-14T07:47:23",
      "upload_time_iso_8601": "2021-07-14T07:47:23.364332Z",
      "url": "https://files.pythonhosted.org/packages/cc/31/3b5b86e51ea64eefa6f2ace4c0f6ee429bbead98dc0e94dc61ffc47067d1/flash-framework-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}