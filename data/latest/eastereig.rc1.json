{
  "info": {
    "author": "B. Nennig, M. Ghienne",
    "author_email": "benoit.nennig@supmeca.fr, martin.ghienne@supmeca.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "EasterEig\n=========\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0) ![CI-Ubuntu](https://github.com/nennigb/EasterEig/workflows/CI-Ubuntu/badge.svg) [![pypi release](https://img.shields.io/pypi/v/eastereig.svg)](https://pypi.org/project/eastereig/)\n\nConsider a parametric eigenvalue problem depending on a parameter \\(\\nu\\). This arises for instance in\n\n  - waveguides, where the _wavenumber_ (eigenvalue) depends on the frequency (parameter)\n  - waveguides with absorbing materials on the wall, where _modal attenuation_ (eigenvalue imaginary part) depends on the liner properties like impedance, density (parameter)\n  - structural dynamics with a randomly varying parameter, where the _resonances frequencies_ (eigenvalue) depend on the parameter\n  - ...\n\nExceptional points (EP) of non-Hermitian systems correspond to particular values of the parameter leading to defective eigenvalue.\nAt EP, both eigenvalues and eigenvectors are merging. \n\nThe aim of this package is to **locate** exceptional points and to **reconstruct** the eigenvalue loci. The theoretical part of this work is described in [1], as for the location of _exceptional points_ and illustrated in [2] for eigenvalues reconstruction in structural dynamics.\n\nThe method requires the computation of successive derivatives of two selected eigenvalues with respect to the parameter so that, after recombination, regular functions can be constructed. This algebraic manipulation enables\n * exceptional points (EP) localization, using standard root-finding algorithms; \n * computation of the associated Puiseux series up to an arbitrary order.\n\nThis representation, which is associated with the topological structure of Riemann surfaces, allows to efficiently approximate the selected pair in a certain neighbourhood of the EP.\n\nTo use this package :\n\n  1. an access to the **operator derivative** must be possible\n  2. the eigenvalue problem must be recast into\n  \t\t\\[ \\mathbf{L} (\\lambda(\\nu), \\nu) \\mathbf{x} (\\nu) =\\mathbf{0}  \\]\n\nThe matrices of discrete operators can be either of numpy type for _full_, scipy type for _sparse_ or petsc mpiaij type for _sparse parallel_ matrices.\n\nIf eastereig is useful for your research, please cite the following references. If you have some questions, suggestions or find some bugs, report them as issues [here](https://github.com/nennigb/EasterEig/issues).\n\nReferences\n----------\n\n   [1] B. Nennig and E. Perrey-Debain. A high order continuation method to locate exceptional points and to compute Puiseux series with applications to acoustic waveguides. J. Comp. Phys., 109425, (2020). [[doi](https://dx.doi.org/10.1016/j.jcp.2020.109425)]; [[open access](https://arxiv.org/abs/1909.11579)]\n\n   [2] M. Ghienne and B. Nennig. Beyond the limitations of perturbation methods for real random eigenvalue problems using Exceptional Points and analytic continuation. Journal of Sound and vibration, (2020). [[doi](https://doi.org/10.1016/j.jsv.2020.115398)]; [[open access](https://hal.archives-ouvertes.fr/hal-02536849)]\n\n\nBasic workflow and class hierarchy\n----------------------------------\n\n`eastereig` provides several top level classes:\n\n  1. **OP class**, defines operators of your problem\n  2. **Eig class**, handles eigenvalues, their derivatives and reconstruction\n  3. **EP class**, combines Eig object to locate EP and compute Puiseux series\n  4. **Loci class**, stores numerical value of eigenvalues loci and allows easy Riemann surface plotting\n\nDependencies\n-------------\n\n`eastereig` is based on numpy (full) and scipy (sparse) for most internal computation and can handle _large_ parallel sparse matrices thanks to **optional** import of [petsc4py](https://petsc4py.readthedocs.io/en/stable/install.html) (and mumps), \n[slepc4py](https://slepc4py.readthedocs.io/en/stable/install.html) and\nand [mpi4py](https://mpi4py.readthedocs.io/en/stable/install.html). As non-hermitian problems involve complex-valued eigenvalues, computations are realized with complex arithmetic and the **complex petsc version** is expected.\nTested for python 3.5\n\n> **Remarks :**\n> To run an example with petsc (parallel), you need to run python with `mpirun`. For instance, to run a program with 2 proc\n> `mpirun -n 2 python myprog.py`\n\nInstall \n--------\n\nYou'll need : \n* python (tested for v >= 3.5);\n* pip (optional).\nNote that on ubuntu, you will need to use `pip3` instead of `pip` and `python3` instead of `python`. Please see the steps given in the continous integration script [workflows](.github/workflows/ci-ubuntu.yml).\n\n### Using pip (preferred)\nConsider using `pip` over custom script (rationale [here](https://pip.pypa.io/en/stable/reference/pip_install/)). \n\nYou can install `eastereig` either from pypi (main releases only):\n```\npip install eastereig [--user]\n``` \nor from github:\n```\npip install path/to/EeasterEig-version.tar.gz [--user]\n```\nor in _editable_ mode if you want to modify the sources\n```\npip install -e path/to/EeasterEig\n```\n> The version of the required libraries specified in `install_requires` field from `setup.py` are given to ensure the backward compatibility up to python 3.5. A more recent version of these libraries can be safely used for recent python version. \n\n### Using python setuptools\nGo to root folder.\nand run:\n```\npython setup.py install [--user]\n```\n\nTo get the lastest updates (dev relases), run: \n```\npython setup.py develop [--user]\n```\n\nRunning tests\n-------------\nTests are handled with doctest. \n\nTo execute the full test suite, run :\n```\npython -m eastereig\n```\n\nDocumentation\n--------------\n\n## Generate documentation \nRun: \n```\npdoc3 --html --force --config latex_math=True  eastereig\n```\nN.B: The doctring are compatible with several Auto-generate API documentation, like pdoc.\nThis notably allows to see latex includes.\n\n## Generate class diagram\nRun: \n```\npyreverse -s0 eastereig -m yes -f ALL\ndot -Tsvg classes.dot -o classes.svg\n```\nN.B: Class diagram generation is done using `pyreverse` (installed with pylint and spyder).\n\n## Generate documentation and class diagram\nBoth aspects are included in the `makedoc.py' script. So, just run :\n```\npython ./makedoc.py\n```\n\nGetting started\n---------------\n\nSeveral working examples are available in `./examples/` folder\n\n  1. Acoustic waveguide with an impedance boundary condition (with the different supported linear libraries)\n  2. 3-dof toy model of a structure with one random parameter (with numpy)\n\nTo get started, the first step is to define your problem. Basically it means to link the discrete operators (matrices) and their derivatives to the `eastereig` OP class.\nThe problem has to be recast in the following form:\n\n\\( \\left[ \\underbrace{1}_{f_0(\\lambda)=1} \\mathbf{K}_0(\\nu) + \\underbrace{\\lambda(\\nu)}_{f_1(\\lambda)=\\lambda} \\mathbf{K}_1(\\nu) + \\underbrace{\\lambda(\\nu)^2}_{f_2(\\lambda)} \\mathbf{K}_2(\\nu) \\right] \\mathbf{x} =  \\mathbf{0} \\).\n\nMatrices are then stacked in the variable `K`\n```\nK = [K0,K1,K2].\n```\n**The functions** that return the derivatives with respect to \\(\\nu\\) of each matrices have to be put in `dK`. The prototype of this function is fixed (the parameter n corresponds to the derivative order) to ensure automatic computation of the operator derivatives.\n```\ndK = [dK0,dK1,dK2].\n```\nFinally, **the functions** that returns derivatives with respect to \\( \\lambda\\) are stored in 'flda'\n```\nflda = [None,ee.lda_func.Lda,ee.lda_func.Lda2].\n```\nBasic linear and quadratic dependency are defined in the module `lda_func`. Others dependencies can be easily implemented; provided that the appropriate eigenvalue solver is also implemented). The `None` keyword is used when there is no dependency to the eigenvalue, e. g. \\(\\mathbf{K}_0\\).\n\nThis formulation is used to automatically compute (i) the successive derivatives of the operator and (ii) the RHS associated to the bordered matrix.\n\nThese variables are defined by creating **a subclass** that inherits from the eastereig **OP class**. For example, considering a generalized eigenvalue problem \\( \\left[\\mathbf{K}_0(\\nu) + \\lambda \\mathbf{K}_1(\\nu) \\right] \\mathbf{x} =  \\mathbf{0} \\) :\n\n```\nimport eastereig as ee\n\nclass MyOP(ee.OP):\n    \"\"\" Create a subclass of the OP class to describe your problem\n    \"\"\"\n    def __init__(self):\n        \"\"\" Initialize the problem       \n        \"\"\"\n\n        # initialize OP interface\n        self.setnu0(z)\n\n        # mandatory -----------------------------------------------------------\n        self._lib='scipysp' # 'numpy' or 'petsc'\n        # create the operator matrices\n        self.K=self.CreateMatrix()\n        # define the list of function to compute the derivatives of each operator matrix\n        self.dK = [self.dmat0, self.dmat1]        \n        # define the list of functions to set the eigenvalue dependency of each operator matrix\n        self.flda = [None, ee.lda_func.Lda] \n        # ---------------------------------------------------------------------\n\n    def CreateMyMatrices(self,...):\n\t\t\"\"\" Create my matrices and return a list\n\t\t\"\"\"\n \t\t...\n    \treturn list_of_Ki\n\n    def dmat0(self,n):\n\t\t\"\"\" Return the matrix derivative with respect to nu\n\t\tN.B. : The prototype of this function is fixed, the n parameter\n\t\tstands for the derivative order. If the derivative is null,\n\t\tthe function returns the value 0.\n\t\t\"\"\"\n\t\t...\n\t\treturn dM0\n\n    def dmat1(self,n):\n\t\t\"\"\" Return the matrix derivative with respect to nu\n\t\tN.B. : The prototype of this function is fixed, the n parameter\n\t\tstands for the derivative order. If the derivative is null,\n\t\tthe function returns the value 0.\n\t\t\"\"\"\n\t\t...\n\t\treturn dM1\n\n\n```\n\nHow to contribute ?\n-------------------\n\nIf you want to contribute to `eastereig`, your are welcomed! Don't hesitate to\n  - report bugs, installation problems or ask questions on [issues](https://github.com/nennigb/EasterEig/issues);\n  - propose some enhancements in the code or in documentation through **pull requests** (PR);\n  - suggest or report some possible new usages and why not start a scientific collaboration ;-)\n  - ...\n\nTo ensure code homogeneity among contributors, we use a source-code analyzer (eg. pylint). \nBefore submitting a PR, run the tests suite.\n\n\nLicense\n-------\nThis file is part of eastereig, a library to locate exceptional points and to reconstruct eigenvalues loci.\n\nEastereig is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nEastereig is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with Eastereig.  If not, see <https://www.gnu.org/licenses/>.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nennigb/EasterEig",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eastereig",
    "package_url": "https://pypi.org/project/eastereig/",
    "platform": "",
    "project_url": "https://pypi.org/project/eastereig/",
    "project_urls": {
      "Homepage": "https://github.com/nennigb/EasterEig"
    },
    "release_url": "https://pypi.org/project/eastereig/1.1.0/",
    "requires_dist": [
      "numpy (<=1.18.5)",
      "scipy (<=1.4.1)",
      "matplotlib (<=3.0.1)"
    ],
    "requires_python": ">=3.5",
    "summary": "A library to locate exceptional points and to reconstruct eigenvalues loci",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8101012,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7110351faeb8782a5c9e5889b3d89cd3bfd2f21074f5f3c7dc9f4472b00e4221",
          "md5": "9a880cfb7aadb737e25b870f07cdd4eb",
          "sha256": "e073c184dd72d4f9d6f42a4cad97b15b195b166ce8f0fdbeb5360bed558f6414"
        },
        "downloads": -1,
        "filename": "eastereig-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a880cfb7aadb737e25b870f07cdd4eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 77477,
        "upload_time": "2020-09-03T09:32:39",
        "upload_time_iso_8601": "2020-09-03T09:32:39.759663Z",
        "url": "https://files.pythonhosted.org/packages/71/10/351faeb8782a5c9e5889b3d89cd3bfd2f21074f5f3c7dc9f4472b00e4221/eastereig-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7110351faeb8782a5c9e5889b3d89cd3bfd2f21074f5f3c7dc9f4472b00e4221",
        "md5": "9a880cfb7aadb737e25b870f07cdd4eb",
        "sha256": "e073c184dd72d4f9d6f42a4cad97b15b195b166ce8f0fdbeb5360bed558f6414"
      },
      "downloads": -1,
      "filename": "eastereig-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a880cfb7aadb737e25b870f07cdd4eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 77477,
      "upload_time": "2020-09-03T09:32:39",
      "upload_time_iso_8601": "2020-09-03T09:32:39.759663Z",
      "url": "https://files.pythonhosted.org/packages/71/10/351faeb8782a5c9e5889b3d89cd3bfd2f21074f5f3c7dc9f4472b00e4221/eastereig-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}