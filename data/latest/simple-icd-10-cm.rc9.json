{
  "info": {
    "author": "Stefano Travasci",
    "author_email": "stefanotravasci@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# simple_icd_10_cm\nA simple python library for ICD-10-CM codes\n\n## Index\n* [Release notes](#release-notes)\n* [Introduction](#introduction)\n* [Setup](#setup)\n* [The format of the codes](#the-format-of-the-codes)\n* [About the file \"Instructional Notations.md\"](#about-the-file-instructional-notationsmd)\n* [Blocks containing only one category](#blocks-containing-only-one-category)\n* [About the special seventh character](#about-the-special-seventh-character)\n* [Documentation](#documentation)\n  * [is_valid_item(code)](#is_valid_itemcode)\n  * [is_category_or_subcategory(code)](#is_category_or_subcategorycode)\n  * [is_chapter_or_block(code)](#is_chapter_or_blockcode)\n  * [is_chapter(code)](#is_chaptercode)\n  * [is_block(code)](#is_blockcode)\n  * [is_category(code)](#is_categorycode)\n  * [is_subcategory(code, include_extended_subcategories=True)](#is_subcategorycode-include_extended_subcategoriestrue)\n  * [is_extended_subcategory(code)](#is_extended_subcategorycode)\n  * [get_description(code, prioritize_blocks=False)](#get_descriptioncode-prioritize_blocksfalse)\n  * [get_excludes1(code, prioritize_blocks=False)](#get_excludes1code-prioritize_blocksfalse)\n  * [get_excludes2(code, prioritize_blocks=False)](#get_excludes2code-prioritize_blocksfalse)\n  * [get_includes(code, prioritize_blocks=False)](#get_includescode-prioritize_blocksfalse)\n  * [get_inclusion_term(code, prioritize_blocks=False)](#get_inclusion_termcode-prioritize_blocksfalse)\n  * [get_seven_chr_note(code, search_in_ancestors=False, prioritize_blocks=False)](#get_seven_chr_notecode-search_in_ancestorsfalse-prioritize_blocksfalse)\n  * [get_seven_chr_def(code, search_in_ancestors=False, prioritize_blocks=False)](#get_seven_chr_defcode-search_in_ancestorsfalse-prioritize_blocksfalse)\n  * [get_use_additional_code(code, search_in_ancestors=False, prioritize_blocks=False)](#get_use_additional_codecode-search_in_ancestorsfalse-prioritize_blocksfalse)\n  * [get_code_first(code, search_in_ancestors=False, prioritize_blocks=False)](#get_code_firstcode-search_in_ancestorsfalse-prioritize_blocksfalse)\n  * [get_full_data(code, search_in_ancestors=False, prioritize_blocks=False)](#get_full_datacode-search_in_ancestorsfalse-prioritize_blocksfalse)\n  * [get_parent(code, prioritize_blocks=False)](#get_parentcode-prioritize_blocksfalse)\n  * [get_children(code, prioritize_blocks=False)](#get_childrencode-prioritize_blocksfalse)\n  * [get_ancestors(code, prioritize_blocks=False)](#get_ancestorscode-prioritize_blocksfalse)\n  * [get_descendants(code, prioritize_blocks=False)](#get_descendantscode-prioritize_blocksfalse)\n  * [is_ancestor(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)](#is_ancestora-b-prioritize_blocks_afalse-prioritize_blocks_bfalse)\n  * [is_descendant(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)](#is_descendanta-b-prioritize_blocks_afalse-prioritize_blocks_bfalse)\n  * [get_nearest_common_ancestor(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)](#get_nearest_common_ancestora-b-prioritize_blocks_afalse-prioritize_blocks_bfalse)\n  * [is_leaf(code, prioritize_blocks=False)](#is_leafcode-prioritize_blocksfalse)\n  * [get_all_codes(with_dots=True)](#get_all_codeswith_dotstrue)\n  * [get_index(code)](#get_indexcode)\n  * [remove_dot(code)](#remove_dotcode)\n  * [add_dot(code)](#add_dotcode)\n* [Conclusion](#conclusion)\n\n## Release notes\n* **1.1.2**: Minor fix in get_full_data\n* **1.1.1**: Fixed minor error in the release\n* **1.1.0**: Fixed a bug that caused many codes not to be included\n* **1.0.5**: Fixed a minor bug that affected get_nearest_common_ancestor(a,b) when a and b were the same code but written in different formats.\n* **1.0.4**: Managed to get the built package to read the data files\n* **1.0.0**: Initial release\n\n## Introduction\nThe objective of this library is to provide a simple instrument for dealing with **ICD-10-CM** codes in Python. It provides ways to check whether a code exists, find its ancestors and descendants, see the data associated with it, including its description, and much more.  \nIf you are looking for a library that deals with ICD-10 codes instead of ICD-10-CM codes, you can check the [simple_icd_10 library](https://github.com/StefanoTrv/simple_icd_10), which is based on the 2019 version of ICD-10.\n\nThe data used in this library was taken from the websites of the CDC and of the CMS. This library currently uses the **January 2021 release of ICD-10-CM**.\n\n## Setup\nYou can install the package with pip, using this command:\n```bash\npip install simple-icd-10-cm\n```\n\nYou can also install the package with conda, using the following command:\n```bash\nconda install -c stefanotrv simple_icd_10_cm\n```\n\nYou can also use the \"simple_icd_10_cm.py\" file, which contains all the source code, in conjunction with the \"data\" folder, which contains the data used in this library (you can find them in the [GitHub repository](https://github.com/StefanoTrv/simple_icd_10_CM)).\n\n## The format of the codes\nThe codes of subcategories can be written in two different ways: with a dot (for example \"I13.1\") and with no dot (for example \"I131\"). The functions in this library can receive as input codes in both these formats. The codes returned by the functions will always be in the format with the dot.  \nYou can easily change the format of a code by using the [`remove_dot`](#remove_dotcode) and [`add_dot`](#add_dotcode) functions.\n\n## About the file \"Instructional Notations.md\"\nThe file [Instructional Notations.md](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) contains the introduction present in the file `icd10cm_tabular_2021.xml` (the file that contains the whole ICD-10-CM classification), copied there in a more accessible and readable format. There you can find an explanation about the meaning of most of the additional fields that can accompany a code.\n\n## Blocks containing only one category\nUnlike ICD-10, ICD-10-CM includes blocks of categories that contain only one (and its subcategories). These blocks are named after the category that they contain, which means that ICD-10-CM contains blocks and categories that have the same exact code. This is a problem: because of this questionable decision, we can't know for sure if the code \"B99\", for example, refers to the category \"B99\" or to the block with the same name. This can be seen in the following example, where \"B99\" is recognized as both a block and a category:\n```python\ncm.is_block(\"B99\")\n#True\ncm.is_category(\"B99\")\n#True\n```\nTo solve this ambiguity, I've introduced in most functions the optional argument `prioritize_blocks`. This optional argument has an effect only when the string passed as input could be the name of a category or of its parent block: when this ambiguity is not present, the value of this argument won't have any impact on the computation. When `prioritize_blocks` is False, which is the default value, the ambiguous code will be interpreted as the category, when it's set to True the same code will be interpreted as being the block. The following code shows an example of this in action:\n```python\ncm.get_children(\"B99\")\n#['B99.8', 'B99.9']\ncm.get_children(\"B99\",prioritize_blocks=True)\n#['B99']\n```\nIf you want to know if a specific code is ambiguous, it's pretty simple: you just have to check if it's at the same time a block and a category, as in the following examples:\n```python\ncm.is_block(\"B10\") and cm.is_category(\"B10\")\n#True\ncm.is_block(\"I12\") and cm.is_category(\"I12\")\n#False\n```\n\n## About the special seventh character\nThe file `icd10cm_tabular_2021.xml`, which is the XML file that contains the whole ICD-10-CM classification, doesn't have an entry for each code generated by adding the \"special\" seventh character, but it contains rules that explain how to generate these codes in the \"sevenChrDef\" field (and sometimes in the \"sevenChrNote\" field too, just to complicate things a little bit...). You can find more about the structure of these particular codes in [Instructional Notations.md](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md).  \nDue to the lack of a complete entry for these codes, I had to decide how they would be handled in this library. So I decided that their only field would be the description, composed of the description of their parent followed by the description of the meaning of the additional character, with a comma between the two: this description appears in official documents about ICD-10-CM (for example in the file `icd10cm-order-Jan-2021.txt`), so it's not my invention but the actual official format. All the other fields are empty, but the optional argument `search_in_ancestors` of certain functions can be used to automatically retrieve the content of certain fields from the ancestors of the code (see the description of the specific functions in the [Documentation](#documentation) for more details).  \nIf you need to know whether a code has been automatically generated using a rule described in a \"sevenChrDef\" field, you can use the [`is_extended_subcategory`](#is_extended_subcategorycode) function.\n\n## Documentation\nHere I list all the functions provided by this library and describe how to use them. If you are interested in a more interactive introduction to simple_icd_10_cm, please take a look at the Jupyter Notebook [\"Showcase notebook.ipynb\"](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Showcase%20notebook.ipynb); there you can also find more examples.\n\nHere I suppose we have imported the library as follows:\n```python\nimport simple_icd_10_cm as cm\n```\n### is_valid_item(code)\nThis function takes a string as input and returns True if the string is a valid chapter, block, category or subcategory in ICD-10-CM, False otherwise.\n```python\ncm.is_valid_item(\"cat\")\n#False\ncm.is_valid_item(\"B99\")\n#True\n```\n### is_category_or_subcategory(code)\nThis function takes a string as input and returns True if the string is a valid category or subcategory in ICD-10-CM, False otherwise.\n```python\ncm.is_category_or_subcategory(\"A00-B99\")\n#False\ncm.is_category_or_subcategory(\"B99\")\n#True\n```\n### is_chapter_or_block(code)\nThis function takes a string as input and returns True if the string is a valid chapter or block in ICD-10-CM, False otherwise.\n```python\ncm.is_chapter_or_block(\"L80-L99\")\n#True\ncm.is_chapter_or_block(\"L99\")\n#False\n```\n### is_chapter(code)\nThis function takes a string as input and returns True if the string is a valid chapter in ICD-10-CM, False otherwise.\n```python\ncm.is_chapter(\"12\")\n#True\ncm.is_chapter(\"B99\")\n#False\n```\n### is_block(code)\nThis function takes a string as input and returns True if the string is a valid block in ICD-10-CM, False otherwise.\n```python\ncm.is_block(\"L80-L99\")\n#True\ncm.is_block(\"L99\")\n#False\n```\n### is_category(code)\nThis function takes a string as input and returns True if the string is a valid category in ICD-10-CM, False otherwise.\n```python\ncm.is_category(\"B99\")\n#True\ncm.is_category(\"14\")\n#False\n```\n### is_subcategory(code, include_extended_subcategories=True)\nThis function takes a string as input and returns True if the string is a valid subcategory in ICD-10-CM, False otherwise. By setting the optional argument `include_extended_subcategories` to False, this function will also return False if the string is a valid subcategory obtained by adding the 7th character to another code (see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) for more information).\n```python\ncm.is_subcategory(\"B95.1\")\n#True\ncm.is_subcategory(\"B99\")\n#False\ncm.is_subcategory(\"S12.000G\")\n#True\ncm.is_subcategory(\"S12.000G\", include_extended_subcategories=False)\n#False\n```\n### is_extended_subcategory(code)\nThis function takes a string as input and returns True if the string is a valid subcategory in ICD-10-CM obtained by adding the 7th character to another code (see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) and [About the special seventh character](#about-the-special-seventh-character) for more information), False otherwise.\n```python\ncm.is_extended_subcategory(\"S12.000G\")\n#True\ncm.is_extended_subcategory(\"S12.000\")\n#False\n```\n### get_description(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **string** containing its description, otherwise it raises a ValueError. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_description(\"12\")\n#'Diseases of the skin and subcutaneous tissue (L00-L99)'\ncm.get_description(\"I70.501\")\n#'Unspecified atherosclerosis of nonautologous biological bypass graft(s) of the extremities, right leg'\n```\n### get_excludes1(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **list of strings** containing the data of the \"excludes1\" field of this code, otherwise it raises a ValueError. If this code does not have an \"excludes1\" field, it returns an empty list. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) if you have doubts about the meaning of this field. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_excludes1(\"12\")\n#[]\ncm.get_excludes1(\"I82.40\")\n#['acute embolism and thrombosis of unspecified deep veins of distal lower extremity (I82.4Z-)',\n# 'acute embolism and thrombosis of unspecified deep veins of proximal lower extremity (I82.4Y-)']\n```\n### get_excludes2(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **list of strings** containing the data of the \"excludes2\" field of this code, otherwise it raises a ValueError. If this code does not have an \"excludes2\" field, it returns an empty list. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) if you have doubts about the meaning of this field. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_excludes2(\"I82.40\")\n#[]\ncm.get_excludes2(\"J34.81\")\n#['gastrointestinal mucositis (ulcerative) (K92.81)',\n# 'mucositis (ulcerative) of vagina and vulva (N76.81)',\n# 'oral mucositis (ulcerative) (K12.3-)']\n```\n### get_includes(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **list of strings** containing the data of the \"includes\" field of this code, otherwise it raises a ValueError. If this code does not have an \"includes\" field, it returns an empty list. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) if you have doubts about the meaning of this field. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_includes(\"I82.40\")\n#[]\ncm.get_includes(\"J36\")\n#['abscess of tonsil', 'peritonsillar cellulitis', 'quinsy']\n```\n### get_inclusion_term(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **list of strings** containing the data of the \"inclusionTerm\" field of this code, otherwise it raises a ValueError. If this code does not have an \"inclusionTerm\" field, it returns an empty list. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_inclusion_term(\"A23\")\n#[]\ncm.get_inclusion_term(\"J37.0\")\n#['Catarrhal laryngitis', 'Hypertrophic laryngitis', 'Sicca laryngitis']\n```\n### get_seven_chr_note(code, search_in_ancestors=False, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **string** containing the data of the \"sevenChrNote\" field of this code, otherwise it raises a ValueError. If this code does not have an \"sevenChrNote\" field, it returns an empty string. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) and [About the special seventh character](#about-the-special-seventh-character) if you have doubts about the meaning of this field. When the optional argument `search_in_ancestors` is set to True, if the given code doesn't have a \"sevenChrNote\" field but one of its ancestor does, the \"sevenChrNote\" data of the closer ancestor that contains such a field is returned. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_seven_chr_note(\"I82.40\")\n#''\ncm.get_seven_chr_note(\"M48.4\")\n#'The appropriate 7th character is to be added to each code from subcategory M48.4:'\ncm.get_seven_chr_note(\"R40.241\")\n#''\ncm.get_seven_chr_note(\"R40.241\",search_in_ancestors=True)\n#'The following appropriate 7th character is to be added to subcategory R40.24-:'\n```\n### get_seven_chr_def(code, search_in_ancestors=False, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **dictionary** containing the data of the \"sevenChrDef\" field of this code, otherwise it raises a ValueError. The dictionary maps the seventh character to a string that contains its meaning. If this code does not have an \"sevenChrDef\" field, it returns an empty list. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) and [About the special seventh character](#about-the-special-seventh-character) if you have doubts about the meaning of this field. When the optional argument `search_in_ancestors` is set to True, if the given code doesn't have a \"sevenChrDef\" field but one of its ancestor does, the \"sevenChrDef\" data of the closer ancestor that contains such a field is returned. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_seven_chr_def(\"I82.40\")\n#{}\ncm.get_seven_chr_def(\"M48.4\")\n#{'A': 'initial encounter for fracture',\n# 'D': 'subsequent encounter for fracture with routine healing',\n# 'G': 'subsequent encounter for fracture with delayed healing',\n# 'S': 'sequela of fracture'}\ncm.get_seven_chr_def(\"R40.241\")\n#{}\ncm.get_seven_chr_def(\"R40.241\",search_in_ancestors=True)\n#{'0': 'unspecified time',\n# '1': 'in the field [EMT or ambulance]',\n# '2': 'at arrival to emergency department',\n# '3': 'at hospital admission',\n# '4': '24 hours or more after hospital admission'}\n```\n### get_use_additional_code(code, search_in_ancestors=False, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **string** containing the data of the \"useAdditionalCode\" field of this code, otherwise it raises a ValueError. If this code does not have an \"useAdditionalCode\" field, it returns an empty string. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) if you have doubts about the meaning of this field. When the optional argument `search_in_ancestors` is set to True, if the given code doesn't have a \"useAdditionalCode\" field but one of its ancestor does, the \"useAdditionalCode\" data of the closer ancestor that contains such a field is returned. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_use_additional_code(\"I82.41\")\n#''\ncm.get_use_additional_code(\"R50.2\")\n#'code for adverse effect, if applicable, to identify drug (T36-T50 with fifth or sixth character 5)'\ncm.get_use_additional_code(\"R65.20\")\n#''\ncm.get_use_additional_code(\"R65.20\",search_in_ancestors=True)\n#'code to identify specific acute organ dysfunction, such as:\n# acute kidney failure (N17.-)\n# acute respiratory failure (J96.0-)\n# critical illness myopathy (G72.81)\n# critical illness polyneuropathy (G62.81)\n# disseminated intravascular coagulopathy [DIC] (D65)\n# encephalopathy (metabolic) (septic) (G93.41)\n# hepatic failure (K72.0-)'\n```\n### get_code_first(code, search_in_ancestors=False, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a **string** containing the data of the \"codeFirst\" field of this code, otherwise it raises a ValueError. If this code does not have an \"codeFirst\" field, it returns an empty string. Please see [Instructional Notations](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Instructional%20Notations.md) if you have doubts about the meaning of this field. When the optional argument `search_in_ancestors` is set to True, if the given code doesn't have a \"codeFirst\" field but one of its ancestor does, the \"codeFirst\" data of the closer ancestor that contains such a field is returned. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_code_first(\"I82.41\")\n#''\ncm.get_code_first(\"R68.13\")\n#'confirmed diagnosis, if known'\ncm.get_code_first(\"S04.01\")\n#''\ncm.get_code_first(\"S04.01\",search_in_ancestors=True)\n#'any associated intracranial injury (S06.-)'\n```\n### get_full_data(code, search_in_ancestors=False, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a string containing all the available data of the code, otherwise it raises a ValueError. The empty fields are omitted from the string, except for the list of children (see second example below). When the optional argument `search_in_ancestors` is set to True, if the given code doesn't have a certain field but one of its ancestor does, the data of the closer ancestor that contains such a field is returned: see the previous functions to know which are the fields that are influenced by this argument and which are not. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_full_data(\"I82.41\")\n#'Name:\n# I82.41\n# Description:\n# Acute embolism and thrombosis of femoral vein\n# Parent:\n# I82.4\n# inclusion term:\n# Acute embolism and thrombosis of common femoral vein\n# Acute embolism and thrombosis of deep femoral vein\n# Children:\n# I82.411, I82.412, I82.413, I82.419'\ncm.get_full_data(\"C8401\")\n#'Name:\n# C84.01\n# Description:\n# Mycosis fungoides, lymph nodes of head, face, and neck\n# Parent:\n# C84.0\n# Children:\n# None'\n```\n### get_parent(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a string containing its parent, otherwise it raises a ValueError. If the code doesn't have a parent (that is, if it's a chapter), it returns an empty string. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_parent(\"I70.501\")\n#'I70.50'\ncm.get_parent(\"12\")\n#''\n```\n### get_children(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a list of strings containing its children, otherwise it raises a ValueError. If the code doesn't have children, it returns an empty list. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_children(\"12\")\n#['L00-L08', 'L10-L14', 'L20-L30', 'L40-L45', 'L49-L54', 'L55-L59', 'L60-L75', 'L76', 'L80-L99']\ncm.get_children(\"I70.501\")\n#[]\n```\n### get_ancestors(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a list containing all its ancestors in the ICD-10-CM classification, otherwise it raises a ValueError. The results are ordered from its parent to its most distant ancestor. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_ancestors(\"S14.109S\")\n#['S14.109', 'S14.10', 'S14.1', 'S14', 'S10-S19', '19']\ncm.get_ancestors(\"7\")\n#[]\n```\n### get_descendants(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns a list containing all its descendants in the ICD-10-CM classification, otherwise it raises a ValueError. The returned codes are ordered as in a pre-order depth-first traversal of the tree containing the ICD-10-CM classification. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.get_descendants(\"G93\")\n#['G93.0', 'G93.1', 'G93.2', 'G93.3', 'G93.4', 'G93.40', 'G93.41', 'G93.49', 'G93.5', 'G93.6', 'G93.7', 'G93.8', 'G93.81', 'G93.82', 'G93.89', 'G93.9']\ncm.get_descendants(\"S14.109S\")\n#[]\n```\n### is_ancestor(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)\nThis function takes two strings as input. If both strings are valid ICD-10-CM codes, it returns True if the first string is an ancestor of the second string. If at least one of the strings is not a valid ICD-10-CM code, it raises a ValueError. The optional arguments `prioritize_blocks_a` and `prioritize_blocks_b` refer, respectively, to the codes in `a` and in `b`; please see [Blocks containing only one category](#blocks-containing-only-one-category) for the meaning of these optional arguments.\n```python\ncm.is_ancestor(\"18\",\"R01.0\")\n#True\ncm.is_ancestor(\"K00-K14\",\"M31\")\n#False\ncm.is_ancestor(\"B99\",\"B99\")\n#False\ncm.is_ancestor(\"B99\",\"B99\",prioritize_blocks_a=True)\n#True\n```\n### is_descendant(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)\nThis function takes two strings as input. If both strings are valid ICD-10-CM codes, it returns True if the first string is a descendant of the second string. If at least one of the strings is not a valid ICD-10-CM code, it raises a ValueError. The optional arguments `prioritize_blocks_a` and `prioritize_blocks_b` refer, respectively, to the codes in `a` and in `b`; please see [Blocks containing only one category](#blocks-containing-only-one-category) for the meaning of these optional arguments.\n```python\ncm.is_descendant(\"R01.0\",\"18\")\n#True\ncm.is_descendant(\"M31\",\"K00-K14\")\n#False\n```\n### get_nearest_common_ancestor(a, b, prioritize_blocks_a=False, prioritize_blocks_b=False)\nThis function takes two strings as input. If both strings are valid ICD-10-CM codes, it returns their nearest common ancestor if it exists, an empty string if it doesn't exist. If at least one of the strings is not a valid ICD-10-CM code, it raises a ValueError. The optional arguments `prioritize_blocks_a` and `prioritize_blocks_b` refer, respectively, to the codes in `a` and in `b`; please see [Blocks containing only one category](#blocks-containing-only-one-category) for the meaning of these optional arguments.\n```python\ncm.get_nearest_common_ancestor(\"H28\",\"H25.1\")\n#'H25-H28'\ncm.get_nearest_common_ancestor(\"K35\",\"E21.0\")\n#''\n```\n### is_leaf(code, prioritize_blocks=False)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns True if it's a leaf in the ICD-10-CM classification (that is, if it has no children), otherwise it returns False. If the string is not a valid ICD-10-CM code it raises a ValueError. For the meaning of the optional argument `prioritize_blocks`, please see [Blocks containing only one category](#blocks-containing-only-one-category).\n```python\ncm.is_leaf(\"12\")\n#False\ncm.is_leaf(\"I70.501\")\n#True\n```\n### get_all_codes(with_dots=True)\nThis function returns the list of all items in the ICD-10-CM classification. If the optional boolean argument `with_dots` is set to False, the subcategories in the list will not have a dot in them, otherwise the subcategories will have a dot in them. The codes that represent both a block and a category (for example \"B99\") appear only once in this list.\n```python\ncm.get_all_codes()\n#['1', 'A00-A09', 'A00', 'A00.0', 'A00.1', 'A00.9', 'A01', 'A01.0', ...\ncm.get_all_codes(False)\n#['1', 'A00-A09', 'A00', 'A000', 'A001', 'A009', 'A01', 'A010', ...\n```\n### get_index(code)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns its index in the list returned by `get_all_codes`, otherwise it raises a ValueError.\n```python\ncm.get_index(\"P00\")\n#27735\ncm.get_all_codes(True)[27735]\n#\"P00\"\n```\n### remove_dot(code)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns the same code in the notation without the dot, otherwise it raises a ValueError.\n```python\ncm.remove_dot(\"C84.Z0\")\n#'C84Z0'\ncm.remove_dot(\"C84Z0\")\n#'C84Z0'\ncm.remove_dot(\"K00-K14\")\n#'K00-K14'\n```\n### add_dot(code)\nThis function takes a string as input. If the string is a valid ICD-10-CM code, it returns the same code in the notation with the dot, otherwise it raises a ValueError.\n```python\ncm.add_dot(\"C84Z0\")\n#'C84.Z0'\ncm.add_dot(\"C84.Z0\")\n#'C84.Z0'\ncm.add_dot(\"K00-K14\")\n#'K00-K14'\n```\n\n## Conclusion\nThis should be everything you need to know about the simple_icd_10_cm library. Please contact me if you find any mistake, bug, missing feature or anything else that could be improved or made easier to comprehend, both in this documentation and in the library itself as well as in the [Showcase notebook](https://github.com/StefanoTrv/simple_icd_10_CM/blob/master/Showcase%20notebook.ipynb). You can also contact me if you need any help using this library, but I may not be able to help with questions about the ICD-10-CM classification itself. This library currently only support the January 2021 release of ICD-10-CM: let me know if you'd like me to implement the ability to switch between different versions of ICD-10-CM, and also tell me which release or releases you are interested in.\n\nIf you find this library useful and are feeling generous, consider making a donation using one of the methods listed at the end of this document.\n\n*Stefano Travasci*\n\n---\n\nPaypal: [![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/donate?hosted_button_id=9HMMFAZE248VN)\n\nCurecoin: BKxCWuWzsqtLzAvAjtpsHpJ7LqFHPubqft\n\nBitcoin: bc1qjtnvzzgpsxz397l03vhrw8l30vl2p7fepmn5yy\n\n<sub>*let me know if your favorite donation method is not in this list*</sub>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/StefanoTrv/simple_icd_10_CM",
    "keywords": "ICD-10-CM ICD-10 icd 10 CM codes clinical modification",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-icd-10-cm",
    "package_url": "https://pypi.org/project/simple-icd-10-cm/",
    "platform": "",
    "project_url": "https://pypi.org/project/simple-icd-10-cm/",
    "project_urls": {
      "Homepage": "https://github.com/StefanoTrv/simple_icd_10_CM"
    },
    "release_url": "https://pypi.org/project/simple-icd-10-cm/1.1.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A simple python library for ICD-10-CM codes",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11509397,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f9535781ec6af2ebff6a2e10fc81c166e21872766c5c31674cb7cca4554b979",
          "md5": "17f045c11525fcce8be51f099f720a88",
          "sha256": "5983eff206af313b866a47259e5fb4d7bd68ab3804823bff1eab06578e09e6a9"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17f045c11525fcce8be51f099f720a88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 11997,
        "upload_time": "2021-07-05T17:18:10",
        "upload_time_iso_8601": "2021-07-05T17:18:10.609554Z",
        "url": "https://files.pythonhosted.org/packages/0f/95/35781ec6af2ebff6a2e10fc81c166e21872766c5c31674cb7cca4554b979/simple_icd_10_cm-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "989771e69759315c12d5fec0677df7e35ad5eea2417bdda0451ccac9484684de",
          "md5": "ab494fc65a185baebdc4aa5b98ba64c0",
          "sha256": "78553e07073457ad01816c1b1a6c521d942885891288da661b8bc5139a56d420"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab494fc65a185baebdc4aa5b98ba64c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 22939,
        "upload_time": "2021-07-05T17:18:12",
        "upload_time_iso_8601": "2021-07-05T17:18:12.418406Z",
        "url": "https://files.pythonhosted.org/packages/98/97/71e69759315c12d5fec0677df7e35ad5eea2417bdda0451ccac9484684de/simple_icd_10_cm-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c3e73c48c97349b9be2d27b4eefc002153d495f54284f1c52fa6868ef17e770",
          "md5": "1f1d14129a5de0775ca48adc40d034ad",
          "sha256": "c555ee2deb72d22952bdbfd872f309fb77e33e2521cefbfc3f47c7908d3ddb6e"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f1d14129a5de0775ca48adc40d034ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2211916,
        "upload_time": "2021-07-05T17:48:30",
        "upload_time_iso_8601": "2021-07-05T17:48:30.189863Z",
        "url": "https://files.pythonhosted.org/packages/9c/3e/73c48c97349b9be2d27b4eefc002153d495f54284f1c52fa6868ef17e770/simple_icd_10_cm-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a237194fd384b0e017a21c71609d6a5977d62ac29f0208dbd9b8d876ceda69d",
          "md5": "2329585a33f83b7dc80878686f2c2c12",
          "sha256": "379c5762d8ba17e3410f27618f518aeee0b4b960ac3d92d085a85366f6f5ef36"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2329585a33f83b7dc80878686f2c2c12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151091,
        "upload_time": "2021-07-05T17:48:33",
        "upload_time_iso_8601": "2021-07-05T17:48:33.776771Z",
        "url": "https://files.pythonhosted.org/packages/6a/23/7194fd384b0e017a21c71609d6a5977d62ac29f0208dbd9b8d876ceda69d/simple_icd_10_cm-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d1550452b490cb7617a0befb61f0f3d13cc6d9fe74695bec3e90ffcd4ce28f",
          "md5": "4e1ccfc8667cb04b7e249a5f1d4f7a80",
          "sha256": "a04223963c3e353d0beb9b821c48727a305d6b3279a99b022c0c926e2d954cbf"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e1ccfc8667cb04b7e249a5f1d4f7a80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 8426,
        "upload_time": "2021-07-05T18:12:26",
        "upload_time_iso_8601": "2021-07-05T18:12:26.526098Z",
        "url": "https://files.pythonhosted.org/packages/15/d1/550452b490cb7617a0befb61f0f3d13cc6d9fe74695bec3e90ffcd4ce28f/simple_icd_10_cm-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6807943a230bd696e082d86355be96859d04e2153c39b77cff0c149788e7208",
          "md5": "fb3a73154355104167742d4f31a75639",
          "sha256": "e461e1b5c9a3a665e18b6bb34f07fd163d4c278ebcc45ae99f93bec40121cc01"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fb3a73154355104167742d4f31a75639",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2148019,
        "upload_time": "2021-07-05T18:12:29",
        "upload_time_iso_8601": "2021-07-05T18:12:29.528414Z",
        "url": "https://files.pythonhosted.org/packages/d6/80/7943a230bd696e082d86355be96859d04e2153c39b77cff0c149788e7208/simple_icd_10_cm-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e82f2e65a1e168bfc5a96eba07afabb5b989d99f26e14c9fde2f949d851b0c54",
          "md5": "ac668f10a1cbd11f0ac401a176fb278c",
          "sha256": "075f31ca07c518a0688f3e9d50809eca75323a65391d1478727c3ad74f0e01be"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac668f10a1cbd11f0ac401a176fb278c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 8427,
        "upload_time": "2021-07-05T18:16:58",
        "upload_time_iso_8601": "2021-07-05T18:16:58.731803Z",
        "url": "https://files.pythonhosted.org/packages/e8/2f/2e65a1e168bfc5a96eba07afabb5b989d99f26e14c9fde2f949d851b0c54/simple_icd_10_cm-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b54e2e5fccd2829e27c4ccc04b77b001b1ee72f22e7f2d18a6f871e3e444fdb",
          "md5": "07d6e26e448e01e9ecf8f62ca823ea62",
          "sha256": "e677f85a5d1a15f1344298298859f914f8028f1b6c9c08c6e88d023d8401cd5d"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "07d6e26e448e01e9ecf8f62ca823ea62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151120,
        "upload_time": "2021-07-05T18:17:01",
        "upload_time_iso_8601": "2021-07-05T18:17:01.673427Z",
        "url": "https://files.pythonhosted.org/packages/9b/54/e2e5fccd2829e27c4ccc04b77b001b1ee72f22e7f2d18a6f871e3e444fdb/simple_icd_10_cm-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "901f8cdcc5978e3645e93e395d471ef20894773f2cafc194aecd3e1a5143bf52",
          "md5": "d483507df6e58cfb040c5ec485986b38",
          "sha256": "065a2617a0a1fa90500657b024859ac7199671d2b4fec93d80ca6871947e1af0"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d483507df6e58cfb040c5ec485986b38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2212218,
        "upload_time": "2021-07-05T20:18:40",
        "upload_time_iso_8601": "2021-07-05T20:18:40.952788Z",
        "url": "https://files.pythonhosted.org/packages/90/1f/8cdcc5978e3645e93e395d471ef20894773f2cafc194aecd3e1a5143bf52/simple_icd_10_cm-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d734b87b5e335204cc3e8ffae7dc02eb0d3397518b6890bab5ba3d1dfd3f2478",
          "md5": "e47c168c3d114e64fd3a792652b79c56",
          "sha256": "6d7be130ef917e658626f78dfddb236685df6bea7c50f74180a178fe7ad4e765"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e47c168c3d114e64fd3a792652b79c56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151299,
        "upload_time": "2021-07-05T20:18:43",
        "upload_time_iso_8601": "2021-07-05T20:18:43.634176Z",
        "url": "https://files.pythonhosted.org/packages/d7/34/b87b5e335204cc3e8ffae7dc02eb0d3397518b6890bab5ba3d1dfd3f2478/simple_icd_10_cm-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb8b43047ffbc1637ffbc9e5f1b06af6ed26bffbcb0f5f63d574b0ba6133945e",
          "md5": "477d43d87b810b390a0a66b75a49fb64",
          "sha256": "cb838d2a8ce48fcdf5dd99d8b509e21c0c1785b7cdb675f6cf842bfdaedb14be"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "477d43d87b810b390a0a66b75a49fb64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2212273,
        "upload_time": "2021-08-06T15:15:54",
        "upload_time_iso_8601": "2021-08-06T15:15:54.366783Z",
        "url": "https://files.pythonhosted.org/packages/cb/8b/43047ffbc1637ffbc9e5f1b06af6ed26bffbcb0f5f63d574b0ba6133945e/simple_icd_10_cm-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4150914c62af1f45615e8419438269dc607eb1e0ec4cac0896aaf7f4c56d6a6",
          "md5": "9658e8b277f1f51a6e0428921008e557",
          "sha256": "134b490e83568460b181f6f36aa81052942877751fd5e2068b37d00aed78f210"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9658e8b277f1f51a6e0428921008e557",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151633,
        "upload_time": "2021-08-06T15:15:57",
        "upload_time_iso_8601": "2021-08-06T15:15:57.710781Z",
        "url": "https://files.pythonhosted.org/packages/b4/15/0914c62af1f45615e8419438269dc607eb1e0ec4cac0896aaf7f4c56d6a6/simple_icd_10_cm-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c90504278fe1d42464d9f0d347acea188a01d3b137c06720b0638839b0c018f3",
          "md5": "2498766f75f9e59c2b01c9d34e06293c",
          "sha256": "4d000885f3a50afb57a4629ba41fc20cac9ff8d4b768f688e64e2fd6c727c900"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2498766f75f9e59c2b01c9d34e06293c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2212323,
        "upload_time": "2021-09-20T20:50:16",
        "upload_time_iso_8601": "2021-09-20T20:50:16.603171Z",
        "url": "https://files.pythonhosted.org/packages/c9/05/04278fe1d42464d9f0d347acea188a01d3b137c06720b0638839b0c018f3/simple_icd_10_cm-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37b87778b61f723c0049d28344603c1431761fa666d71fef105545f6d3cdb0ac",
          "md5": "dfa7c548522de6210b493a8250009e35",
          "sha256": "b013b12509a32ae0c3b5323726f0d59e5b4cda988f6e1e1c817e21c23992c188"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dfa7c548522de6210b493a8250009e35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151736,
        "upload_time": "2021-09-20T20:50:19",
        "upload_time_iso_8601": "2021-09-20T20:50:19.920190Z",
        "url": "https://files.pythonhosted.org/packages/37/b8/7778b61f723c0049d28344603c1431761fa666d71fef105545f6d3cdb0ac/simple_icd_10_cm-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96bb7280817f91a370e6ef9ac5bad25912ecc1bd785056216826aa080a9d8240",
          "md5": "180ea43b3443fbe118a092c8fe2779b5",
          "sha256": "002afb2c10a97b34addd37350b05a522ef99df88039a0688638fd1c9d0e2cd01"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "180ea43b3443fbe118a092c8fe2779b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2212332,
        "upload_time": "2021-09-20T21:15:04",
        "upload_time_iso_8601": "2021-09-20T21:15:04.937722Z",
        "url": "https://files.pythonhosted.org/packages/96/bb/7280817f91a370e6ef9ac5bad25912ecc1bd785056216826aa080a9d8240/simple_icd_10_cm-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13a4d25a4bc573c3e6332261f719368c28d4b60427b90526a5ed91fe0e6cc046",
          "md5": "d5cc0bc0cb3b86ae28d832683eac0285",
          "sha256": "36809766e52524324315322585b297d3bc38c528e6ab86ebf5cb09d40cbb325b"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5cc0bc0cb3b86ae28d832683eac0285",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151747,
        "upload_time": "2021-09-20T21:15:08",
        "upload_time_iso_8601": "2021-09-20T21:15:08.117846Z",
        "url": "https://files.pythonhosted.org/packages/13/a4/d25a4bc573c3e6332261f719368c28d4b60427b90526a5ed91fe0e6cc046/simple_icd_10_cm-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4a0e4864e1171f6ef0b6cfd3f000d5de3f9d74df7a8ddf6119cc3c866a08d34",
          "md5": "e1a0240d9bd5efc2b3dc69c0b402f70e",
          "sha256": "f6c8a14025b39ce288abc6c380ca0c89bcf3c3dc458490fe7c61cabd53ba46d6"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1a0240d9bd5efc2b3dc69c0b402f70e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 2212352,
        "upload_time": "2021-09-21T18:12:25",
        "upload_time_iso_8601": "2021-09-21T18:12:25.266783Z",
        "url": "https://files.pythonhosted.org/packages/b4/a0/e4864e1171f6ef0b6cfd3f000d5de3f9d74df7a8ddf6119cc3c866a08d34/simple_icd_10_cm-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95860b7317b188906976cae03664839f21f3a2e9310b56af5c2b220913f5a4e1",
          "md5": "e21632ca2fee073965eb942498f7a021",
          "sha256": "61b506cd43b3b8df1263eca32163015a526a1e3bc1f9191244ed2a142cbb3fd3"
        },
        "downloads": -1,
        "filename": "simple_icd_10_cm-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e21632ca2fee073965eb942498f7a021",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2151781,
        "upload_time": "2021-09-21T18:12:28",
        "upload_time_iso_8601": "2021-09-21T18:12:28.750881Z",
        "url": "https://files.pythonhosted.org/packages/95/86/0b7317b188906976cae03664839f21f3a2e9310b56af5c2b220913f5a4e1/simple_icd_10_cm-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4a0e4864e1171f6ef0b6cfd3f000d5de3f9d74df7a8ddf6119cc3c866a08d34",
        "md5": "e1a0240d9bd5efc2b3dc69c0b402f70e",
        "sha256": "f6c8a14025b39ce288abc6c380ca0c89bcf3c3dc458490fe7c61cabd53ba46d6"
      },
      "downloads": -1,
      "filename": "simple_icd_10_cm-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1a0240d9bd5efc2b3dc69c0b402f70e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 2212352,
      "upload_time": "2021-09-21T18:12:25",
      "upload_time_iso_8601": "2021-09-21T18:12:25.266783Z",
      "url": "https://files.pythonhosted.org/packages/b4/a0/e4864e1171f6ef0b6cfd3f000d5de3f9d74df7a8ddf6119cc3c866a08d34/simple_icd_10_cm-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95860b7317b188906976cae03664839f21f3a2e9310b56af5c2b220913f5a4e1",
        "md5": "e21632ca2fee073965eb942498f7a021",
        "sha256": "61b506cd43b3b8df1263eca32163015a526a1e3bc1f9191244ed2a142cbb3fd3"
      },
      "downloads": -1,
      "filename": "simple_icd_10_cm-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e21632ca2fee073965eb942498f7a021",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 2151781,
      "upload_time": "2021-09-21T18:12:28",
      "upload_time_iso_8601": "2021-09-21T18:12:28.750881Z",
      "url": "https://files.pythonhosted.org/packages/95/86/0b7317b188906976cae03664839f21f3a2e9310b56af5c2b220913f5a4e1/simple_icd_10_cm-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}