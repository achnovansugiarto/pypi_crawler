{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "Object Watchdog\n===============\n\nThis library allow to monitor changes in a Python object and, when some attribute changes, then launch callbacks.\n\nSupport this project\n====================\n\nSupport this project (to solve issues, new features...) by applying the Github \"Sponsor\" button.\n\nInstall\n=======\n\n.. code-block:: console\n\n    $ pip install object-watchdog\n\nCallbacks types\n===============\n\nThere're 3 types of callbacks:\n\n- Async callbacks: launch coroutines as callbacks\n- Callbacks: launch functions as callbacks\n- Cache callbacks: Launch methods of class to update caches\n\nGlobal vs local callbacks\n=========================\n\n- Local callbacks are called only for these classes that have set the callbacks\n- Global callbacks are called for all classes that uses the Object Watchdog\n\nHow to usage\n============\n\nObject Watchdog should be used as metaclass:\n\n.. code-block:: python\n\n    from object_watchdog import ObjectWatchdog\n\n    class User(metaclass=ObjectWatchdog):\n        ...\n\nDefining local callbacks\n========================\n\nCallbacks could be defined in running time and in definition.\n\nDefinition mode\n---------------\n\nAt the classes you can put callbacks when any attribute changes, you can define these types of callbacks in these properties:\n\n- `__async_callbacks__`\n- `__callbacks__`\n- `__cache_callbacks__`\n\nExample:\n\n.. code-block:: python\n\n    async def async_callback(instance, klass_name, key, value):\n        print(f\"[!] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    async def async_callback2(instance, klass_name, key, value):\n        print(f\"[0] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    def callback(instance, klass_name, key, value):\n        print(f\"[!] Sync New change local callback in key '{key}'. New value '{value}'\")\n\n\n    class User(metaclass=ObjectWatchdog):\n        __async_callbacks__ = [async_callback, async_callback2]\n        __callbacks__ = [callback]\n        __cache_callbacks__ = [\"__build_hash__\"]\n\n        ...\n\nRunning time\n------------\n\nIf you need to add some callback in run time, Metaclass add these methods:\n\n- `add_callback`\n- `add_async_callback`\n- `add_cache_callback`\n\n.. code-block:: python\n\n    import asyncio\n\n    from typing import Dict\n    from dataclasses import dataclass, field\n\n    from object_watchdog import ObjectWatchdog\n\n\n    @dataclass\n    class User(metaclass=ObjectWatchdog):\n        user: str\n        password: str\n\n        @property\n        def hash(self):\n            if not self.__cached_hash:\n                self.__build_hash__()\n            return self.__cached_hash\n\n        def __build_hash__(self, key: str = None):\n            if key and key != \"user\" and key != \"password\":\n                return\n\n            h = hashlib.sha512()\n            h.update(\n                f\"{self.user}#{self.password}\".encode(\"UTF-8\")\n            )\n\n            self.__cached_hash = h.hexdigest()\n\n    async def coro_callback(instance, klass_name, key, value):\n        print(f\"[!] New change in key '{key}'. New value '{value}'\")\n\n\n    async def main():\n\n        u = User(user=\"john\", password=\"password\")\n        u.add_async_callback(coro_callback)\n        u.add_cache_callback(\"__build_hash__\")\n\n        print(\"[*] Modifying property 'value'\")\n        u.password = \"new password!\"\n\n\n    def main():\n        asyncio.run(coro_main())\n\n\n    main()\n\n\nDefining global callbacks\n=========================\n\nGlobal callback applies to all classes (or dataclasses) that uses ObjectWatchdog as a metaclass.\n\nIf you want to call any function / coroutine when some class have been modified, you also can use this method. ObjectWatchdog metaclass has these methods:\n\n- `add_global_callback`\n- `add_global_async_callback`\n- `add_global_cache_callback`\n\n.. code-block:: python\n\n    import asyncio\n\n    from typing import Dict\n    from dataclasses import dataclass, field\n\n    from object_watchdog import ObjectWatchdog\n\n\n    @dataclass\n    class MyClass(metaclass=ObjectWatchdog):\n        value: str\n        my_dict: Dict = field(default_factory=dict)\n\n\n    @dataclass\n    class MyClass2(metaclass=ObjectWatchdog):\n        value: str\n        my_dict: Dict = field(default_factory=dict)\n\n\n    async def coro_local_callback(instance, klass_name, key, value):\n        print(f\"[!] New change local callback in key '{key}'. New value '{value}'\")\n\n\n    async def coro_global_callback(instance, klass_name, key, value):\n        print(f\"[!] New change global callback in instance '{repr(instance)}' key '{key}'. New value '{value}'\")\n\n\n    async def coro_main():\n\n        ObjectWatchdog.add_global_callback(coro_global_callback)\n\n        u1 = MyClass(value=\"class 1\", my_dict={\"k\": \"v\"})\n        u2 = MyClass2(value=\"class 2\", my_dict={\"k\": \"v\"})\n\n        print(\"[*] Modifying property 'value'\")\n        u1.value = \"new value!\"\n        u2.value = \"new value!\"\n\n\n    def main():\n        asyncio.run(coro_main())\n\n\n    main()\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cr0hn/object-watchdog",
    "keywords": "monitor,watchdog,metaclass",
    "license": "License :: OSI Approved :: BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "object-watchdog",
    "package_url": "https://pypi.org/project/object-watchdog/",
    "platform": "",
    "project_url": "https://pypi.org/project/object-watchdog/",
    "project_urls": {
      "Homepage": "https://github.com/cr0hn/object-watchdog"
    },
    "release_url": "https://pypi.org/project/object-watchdog/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Watch Python object for changes in runtime and launch callbacks",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10797247,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e19a6b2fb89b86e0f5763d2ae8090d87419063d0c734573904b73383e0bf6b0e",
          "md5": "2370cf66f50b7959a69bf3e29191e862",
          "sha256": "c3328ad51bb8325f3b94b1e6ab898f1c82d02edf1b32c0edfee96b8c50aa2145"
        },
        "downloads": -1,
        "filename": "object_watchdog-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2370cf66f50b7959a69bf3e29191e862",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5307,
        "upload_time": "2020-05-04T07:40:16",
        "upload_time_iso_8601": "2020-05-04T07:40:16.707205Z",
        "url": "https://files.pythonhosted.org/packages/e1/9a/6b2fb89b86e0f5763d2ae8090d87419063d0c734573904b73383e0bf6b0e/object_watchdog-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6cad80707193325e92d55dd0ebd8c9df175a006c6bd0957e0eee39a69f43c02",
          "md5": "6bead1e125188c6b16889c13be5eb1f6",
          "sha256": "43c9fb0966135ff7b57b029612762258433c0435737549a8dfe73ba20f1a735d"
        },
        "downloads": -1,
        "filename": "object-watchdog-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6bead1e125188c6b16889c13be5eb1f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5712,
        "upload_time": "2020-05-04T07:40:19",
        "upload_time_iso_8601": "2020-05-04T07:40:19.522972Z",
        "url": "https://files.pythonhosted.org/packages/e6/ca/d80707193325e92d55dd0ebd8c9df175a006c6bd0957e0eee39a69f43c02/object-watchdog-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3723e6090683eb97032fa57b89397efdc866265ffa6683b03ce3264d4b71cc3c",
          "md5": "a5d99ca4aa803edfb00a43a132a62842",
          "sha256": "d3cd0a9243b906b974929089d393d314d8e72ebf2a2fdcbefaf3118c4ba80598"
        },
        "downloads": -1,
        "filename": "object_watchdog-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5d99ca4aa803edfb00a43a132a62842",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3536,
        "upload_time": "2021-07-01T13:56:25",
        "upload_time_iso_8601": "2021-07-01T13:56:25.073284Z",
        "url": "https://files.pythonhosted.org/packages/37/23/e6090683eb97032fa57b89397efdc866265ffa6683b03ce3264d4b71cc3c/object_watchdog-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fd888b7a3764c9a7043288d878e987f0bdfeafaea45f89b3cc794f270c9dcb6",
          "md5": "068df8007e48fd3ae5a9fcc172a194f8",
          "sha256": "e1877af82641fe2ebebb33564887f9be864ce787087dafbc58cf98cf29f8adf0"
        },
        "downloads": -1,
        "filename": "object-watchdog-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "068df8007e48fd3ae5a9fcc172a194f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3909,
        "upload_time": "2021-07-01T13:56:26",
        "upload_time_iso_8601": "2021-07-01T13:56:26.378268Z",
        "url": "https://files.pythonhosted.org/packages/0f/d8/88b7a3764c9a7043288d878e987f0bdfeafaea45f89b3cc794f270c9dcb6/object-watchdog-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3723e6090683eb97032fa57b89397efdc866265ffa6683b03ce3264d4b71cc3c",
        "md5": "a5d99ca4aa803edfb00a43a132a62842",
        "sha256": "d3cd0a9243b906b974929089d393d314d8e72ebf2a2fdcbefaf3118c4ba80598"
      },
      "downloads": -1,
      "filename": "object_watchdog-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5d99ca4aa803edfb00a43a132a62842",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3536,
      "upload_time": "2021-07-01T13:56:25",
      "upload_time_iso_8601": "2021-07-01T13:56:25.073284Z",
      "url": "https://files.pythonhosted.org/packages/37/23/e6090683eb97032fa57b89397efdc866265ffa6683b03ce3264d4b71cc3c/object_watchdog-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0fd888b7a3764c9a7043288d878e987f0bdfeafaea45f89b3cc794f270c9dcb6",
        "md5": "068df8007e48fd3ae5a9fcc172a194f8",
        "sha256": "e1877af82641fe2ebebb33564887f9be864ce787087dafbc58cf98cf29f8adf0"
      },
      "downloads": -1,
      "filename": "object-watchdog-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "068df8007e48fd3ae5a9fcc172a194f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3909,
      "upload_time": "2021-07-01T13:56:26",
      "upload_time_iso_8601": "2021-07-01T13:56:26.378268Z",
      "url": "https://files.pythonhosted.org/packages/0f/d8/88b7a3764c9a7043288d878e987f0bdfeafaea45f89b3cc794f270c9dcb6/object-watchdog-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}