{
  "info": {
    "author": "Aminor_z",
    "author_email": "aminor_z@qq.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Pruina-Socket-Python](https://socialify.git.ci/Aminor-z/Pruina-Socket-Python/image?forks=1&issues=1&language=1&logo=https%3A%2F%2Fraw.githubusercontent.com%2FAminor-z%2FPruina-Socket-Python%2Fmain%2Flogo.svg&name=1&pulls=1&stargazers=1&theme=Dark)](https://github.com/Aminor-z/Pruina-Socket-Python)\n\n# Pruina-Socket\n**Pruina-Socket**是一个用于快速开发的TCP Socket组件，包含服务端、客户端等内容。\n# Pruina-Socket-Python\n安装：\n```cmd\npip install pruina-socket\n```\n通过以下简单的代码，即可启动具有响应功能的`Pruina-Socket`的服务端和客户端：\n\n```python\nfrom pruina.socket.server import PruinaSocketServer\nfrom pruina.socket.client import PruinaSocketClient\n\n\n# 服务端响应函数\ndef server_response(word, handler= None, **kwargs):\n    print(f\"{handler.server_name}: get '{word.decode()}'\")\n    handler.send(\"server response\", word)\n\n\n# 客户端响应函数\ndef client_response(word, handler: PruinaSocketClient = None, **kwargs):\n    decoded_word = word.decode()\n    print(f\"{handler.name}: get '{decoded_word}'\")\n\n\n# 服务端\nserver = PruinaSocketServer()\nserver.hooks.add_hook(\"client msg\", server_response)\nserver.serve_forever(new_thread=True)  # new_thread=False时，将阻塞\n\n# 客户端\nclient = PruinaSocketClient()\nclient.hooks.add_hook(\"server response\", client_response)\nclient.connect()\nclient.send(\"client msg\", b\"hello world!\")\n\n# 暂时阻止退出\nimport time\n\ntime.sleep(1)\n```\n\n也可通过以下简单的代码，即可启动复杂的服务端（以torch模型服务为例）：  \n1. 模型配置\n\n    ``` python\n    # 模型配置\n    import torch.nn as nn\n    import os\n    import torch\n\n\n    class Model(nn.Module):\n        def __init__(self):\n            super().__init__()\n            self.linear = nn.Linear(1, 1)\n\n        def forward(self, x):\n            return self.linear(x)\n\n\n    # 模型存储路径，不存在自动生成\n    model_path = 'resources/example.pt'\n    if not os.path.exists('resources/example.pt'):\n        torch.save(Model(), model_path)\n    ```\n\n2. 服务端配置和启动\n    \n    ``` python\n    # 响应函数\n    from pruina.socket.handler.MessageHookRequestHandler import MessageHookRequestHandler\n    from pruina.socket.server import PruinaSocketServer\n\n\n    def predict(d: bytes, handler: MessageHookRequestHandler = None, **kwargs):\n        model = handler.resources.get(\"torch_model\")\n        x = torch.tensor([float(d.decode())], dtype=torch.float32)\n        y = model(x)\n        print(f'Torch model:\\n\\t{x.item():.4f}->{y.item():.4f}')\n\n    server = PruinaSocketServer()\n    server.resources.add_lazy_resource(\"torch_model\", torch.load, \"resources/example.pt\")\n    server.hooks.add_hook(\"predict\", predict)\n    server.serve_forever()\n    ```\n\n3. 使用客户端测试（此处使用另一进程）\n\n    ``` python\n    # 响应函数\n    from pruina.socket.client import PruinaSocketClient\n\n    client = PruinaSocketClient()\n    client.connect()\n    client.send(\"predict\", b\"1.23\")\n    ```\n\n\n# 使用概览\n## 服务端\n* **PruinaSocketServer**  \n以hook形式运行的SocketServer\n\n> **PruinaSocketServer 可选参数**  \n> * `host`: str = socket.gethostname() # 服务地址  \n> * `port`: int = 50003 # 端口  \n> * `name`: str = 'server' # 服务名称  \n> * `daemon_threads`: bool = True # daemon设置  \n> \n> **PruinaSocketServer 属性**  \n> * `name`: str = name # 服务名称\n> * `server`: ThreadingTCPServer = ThreadingTCPServer((host, port), MessageHookRequestHandler) # ThreadingTCPServer\n> * `properties`: Properties = Properties() # Properties\n> * `local_properties`: Properties = Properties() # Local Properties\n> * `resources`: Resources = Resources() # Resources\n> * `local_resources`: Resources = Resources() # Local Resources\n> * `hooks`: CachedMsgHooks = CachedMsgHooks() # CachedMsgHooks\n\n示例代码：\n\n```python\nfrom pruina.socket.handler.PruinaHandler import PruinaHandler\nfrom pruina.socket.server import PruinaSocketServer\n\n\n# 服务端响应函数\ndef server_response(word, handler: PruinaHandler = None, **kwargs):\n   decoded_word = word.decode()\n   print(f\"{handler.server_name}: get '{decoded_word}'\")\n   handler.send(\"server response\", word)\n\n\n# 服务端\nserver = PruinaSocketServer()\nserver.hooks.add_hook(\"client msg\", server_response)\nserver.serve_forever()\n```\n\n## 客户端\n* **PruinaSocketClient**  \n以hook形式运行的SocketClient\n\n> **PruinaSocketClient 可选参数**  \n> * `host`: str = socket.gethostbyname(socket.gethostname()) # 服务地址\n> * `port`: int = 50003 # 端口\n> * `name`: str = 'server' # 服务名称\n> * `max_retry`: int = 3 # 最大重试次数\n> \n> **PruinaSocketClient 属性**  \n> * `name`: str = name # 服务名称\n> * `host`: str = socket.gethostbyname(socket.gethostname()) # 服务地址  \n> * `port`: int = 50003 # 端口  \n> * `client`: socket.socket(socket.AF_INET, socket.SOCK_STREAM) # socket.socket\n> * `properties`: Properties = Properties() # Properties\n> * `resources`: Resources = Resources() # Resources\n> * `hooks`: CachedMsgHooks = CachedMsgHooks() # CachedMsgHooks\n\n示例代码：\n\n```python\nfrom pruina.socket.client import PruinaSocketClient\n\n\n# 客户端响应函数\ndef client_response(word, handler: PruinaSocketClient = None, **kwargs):\n    decoded_word = word.decode()\n    print(f\"{handler.name}: get '{decoded_word}'\")\n\n\n# 客户端\nclient = PruinaSocketClient()\nclient.hooks.add_hook(\"server response\", client_response)\nclient.connect()\nclient.send(\"client msg\", b\"hello world!\")\n```\n\n## 组件\n* **Hooks**  \n默认使用`CachedMsgHooks`。  \n`CachedMsgHooks`是拥有一级缓存的Hook映射集，实现将消息标识符与函数的绑定。\n> **CachedMsgHooks 参数**  \n> * `parent`: MsgHooks = None 指向另一个CachedMsgHooks时，会进行deepcopy\n\n示例代码：\n\n```python\nfrom pruina.socket.server import PruinaSocketServer\n\n\n# hook函数\ndef server_response(word, handler=None, **kwargs):\n    decoded_word = word.decode()\n    print(f\"{handler.server_name}: get '{decoded_word}'\")\n    handler.send(\"server response\", word)\n\n\nserver = PruinaSocketServer()\nserver.hooks.add_hook(\"client msg\", server_response)\nserver.serve_forever()\n\n```\n\n* **Properties**  \n`Properties`用于传入小型对象，如int，str等。  \nPruina的server中，有`properties`和`local_properties`之分。\n> * **properties**  \n> 在整个server和所有handler中，只存在唯一的`properties`\n>\n> * **local_properties**  \n> 对于每一个建立连接的handler，都有唯一的`Properties`。\n> 每个handler中的`local_properties`都将从Server中设定的`local_properties`中deepcopy一份，作为handler独立的`local_properties`。\n\n示例代码：\n\n```python\nfrom pruina.socket.server import PruinaSocketServer\n\nserver = PruinaSocketServer()\n\nserver.properties.set(\"var_int\", 1)\nserver.properties.set(\"var_str\", \"Hello World!\")\nserver.local_properties.set(\"var_list\", list())\nserver.local_properties.set(\"var_dict\", dict())\n\nserver.init()\nserver.serve_forever()\n```\n\n* Resources  \n`Resources`用于传入大型资源，如`torch.nn.model`等。  \n`Resources`中保存着`Resource`和`LazyResource`（见Resource & LazyResource）  \nPruina的server中，有`resources`和`local_resources`之分。\n> * **resources**  \n> 在整个server和所有handler中，只存在唯一的`resources`。  \n>\n> * **local_resources**  \n> 对于每一个建立连接的handler，都有唯一的`local_resources`。  \n> 每个handler中的`local_resources`都将从Server中设定的`local_resources`中deepcopy一份，作为handler独立的`local_resources`。\n\n示例代码见Resource和LazyResource部分。\n\n* Resource & LazyResource\n`Resource`和`LazyResource`是资源实体。  \n> * **Resource**  \n> 资源实体，传入构造数据后，将在服务器启动时加载。  \n> \n> * **LazyResource**  \n> 资源实体，传入构造数据后，将在首次`get()`时进行加载。\n\n示例代码：\n\n```python\nimport os\n\nimport torch\nimport torch.nn as nn\n\nfrom pruina.socket.server import PruinaSocketServer\nfrom pruina.socket.handler.PruinaHandler import PruinaHandler\n\n\nclass Model(nn.Module):\n   def __init__(self):\n      super().__init__()\n      self.linear = nn.Linear(1, 1)\n\n   def forward(self, x):\n      return self.linear(x)\n\n\ndef predict(d: bytes, handler: PruinaHandler = None, **kwargs):\n   model = handler.resources.get(\"torch_model_1\")\n   x = torch.tensor([float(d.decode())], dtype=torch.float32)\n   y = model(x)\n   print(f'Torch model:\\n\\t{x.item():.4f}->{y.item():.4f}')\n\n\nmodel_path = 'resources/example.pt'\nif not os.path.exists('resources/example.pt'):\n   torch.save(Model(), model_path)\nserver = PruinaSocketServer()\n\nserver.resources.add_resource(\"torch_model_1\", torch.load, model_path)\nserver.resources.add_lazy_resource(\"torch_model_2\", torch.load, model_path)\nserver.local_resources.add_resource(\"torch_model_3\", torch.load, model_path)\nserver.local_resources.add_lazy_resource(\"torch_model_4\", torch.load, model_path)\n\nserver.hooks.add_hook(\"predict\", predict)\n\nserver.init()\nserver.serve_forever()\n```\n\n## Cython\n`Pruina-SocketServer`可通过`cypackage`直接转化为cython版本。\n* 安装`cypackage`：\n```cmd\npip install cypackage\n```\n* 使用`cypackage`生成cython版本的`Pruina-SocketServer`\n```cmd\ncypackage pruina-socket\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aminor-z/pruina-socket-python",
    "keywords": "pruina socket protobuf server client hook multithreading",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Pruina-Socket",
    "package_url": "https://pypi.org/project/Pruina-Socket/",
    "platform": "",
    "project_url": "https://pypi.org/project/Pruina-Socket/",
    "project_urls": {
      "Homepage": "https://github.com/aminor-z/pruina-socket-python"
    },
    "release_url": "https://pypi.org/project/Pruina-Socket/0.0.5/",
    "requires_dist": [
      "tqdm",
      "protobuf"
    ],
    "requires_python": ">=3.6",
    "summary": "Pruina-Socket",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12802866,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5c14d7305f873cd27fa0f6ce38b099db1a609f02919a8a988d7c04a73a74bac",
          "md5": "7048e8d9a9dbd0b23e0f3282cef4a4f2",
          "sha256": "972448d01602a8b160dd0be5ebd5d6e3aee40a56aa1c3ba1b3cd2a11934aa59e"
        },
        "downloads": -1,
        "filename": "Pruina_Socket-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7048e8d9a9dbd0b23e0f3282cef4a4f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23870,
        "upload_time": "2021-11-08T11:00:14",
        "upload_time_iso_8601": "2021-11-08T11:00:14.112698Z",
        "url": "https://files.pythonhosted.org/packages/c5/c1/4d7305f873cd27fa0f6ce38b099db1a609f02919a8a988d7c04a73a74bac/Pruina_Socket-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b20b01ee215e5f5722d3fe23125ae776d7fe71a202905244ee18375d0202176d",
          "md5": "c7b360c4cf10f0e0fa20eab41e3d4819",
          "sha256": "e783dc2c2256def0f0ca3d212434f89aa4c5b4ebda1521f13130d539bf82a792"
        },
        "downloads": -1,
        "filename": "Pruina-Socket-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7b360c4cf10f0e0fa20eab41e3d4819",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22225,
        "upload_time": "2021-11-08T11:00:16",
        "upload_time_iso_8601": "2021-11-08T11:00:16.145220Z",
        "url": "https://files.pythonhosted.org/packages/b2/0b/01ee215e5f5722d3fe23125ae776d7fe71a202905244ee18375d0202176d/Pruina-Socket-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4af9c5165a225d94739ba86e5a3db4333a721db42b09c188cb6956884e0acca",
          "md5": "44bae398f478c256e6edb68bad43f866",
          "sha256": "f6df513474ad7f9b7baeba4de2ef678fb4d2d13b70ea85a3c0fe71b93a4e5bdb"
        },
        "downloads": -1,
        "filename": "Pruina_Socket-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44bae398f478c256e6edb68bad43f866",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23939,
        "upload_time": "2022-01-09T13:37:15",
        "upload_time_iso_8601": "2022-01-09T13:37:15.407624Z",
        "url": "https://files.pythonhosted.org/packages/d4/af/9c5165a225d94739ba86e5a3db4333a721db42b09c188cb6956884e0acca/Pruina_Socket-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33697437918ff4da58bbe035a0a0f6732af30e1e39a7708e53c03ea6063f186d",
          "md5": "2d74b2ee962225e63891502a700a71dc",
          "sha256": "c2a2c526c775be9ebcde535f202190f9d9830b25b7f64472e714106c8a81938b"
        },
        "downloads": -1,
        "filename": "Pruina-Socket-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d74b2ee962225e63891502a700a71dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21726,
        "upload_time": "2022-01-09T13:37:17",
        "upload_time_iso_8601": "2022-01-09T13:37:17.341063Z",
        "url": "https://files.pythonhosted.org/packages/33/69/7437918ff4da58bbe035a0a0f6732af30e1e39a7708e53c03ea6063f186d/Pruina-Socket-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "281e54f8a8e8b7cc7658f09900001d5ffcdd29437767502643422b71955ad004",
          "md5": "15e6cf6c3c2d8caeaac6abbf4df03ff2",
          "sha256": "841e8d06b905483e6bbbba193d145ce64ecfbef74eb493e94525a1fe7dd33b6e"
        },
        "downloads": -1,
        "filename": "Pruina_Socket-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15e6cf6c3c2d8caeaac6abbf4df03ff2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24761,
        "upload_time": "2022-02-06T13:48:54",
        "upload_time_iso_8601": "2022-02-06T13:48:54.917660Z",
        "url": "https://files.pythonhosted.org/packages/28/1e/54f8a8e8b7cc7658f09900001d5ffcdd29437767502643422b71955ad004/Pruina_Socket-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b579cf95e0627f4adbb3f53b69ff0372abbfe8af077bd7bba0e970644ea11bf8",
          "md5": "9f2602ec917e764681c625c745d2f8d7",
          "sha256": "15e25a1d7d1cb7da9935f19097650ace50f3c763f7e4e1a0753eed45b73416f4"
        },
        "downloads": -1,
        "filename": "Pruina-Socket-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9f2602ec917e764681c625c745d2f8d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22269,
        "upload_time": "2022-02-06T13:48:56",
        "upload_time_iso_8601": "2022-02-06T13:48:56.649901Z",
        "url": "https://files.pythonhosted.org/packages/b5/79/cf95e0627f4adbb3f53b69ff0372abbfe8af077bd7bba0e970644ea11bf8/Pruina-Socket-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "281e54f8a8e8b7cc7658f09900001d5ffcdd29437767502643422b71955ad004",
        "md5": "15e6cf6c3c2d8caeaac6abbf4df03ff2",
        "sha256": "841e8d06b905483e6bbbba193d145ce64ecfbef74eb493e94525a1fe7dd33b6e"
      },
      "downloads": -1,
      "filename": "Pruina_Socket-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15e6cf6c3c2d8caeaac6abbf4df03ff2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24761,
      "upload_time": "2022-02-06T13:48:54",
      "upload_time_iso_8601": "2022-02-06T13:48:54.917660Z",
      "url": "https://files.pythonhosted.org/packages/28/1e/54f8a8e8b7cc7658f09900001d5ffcdd29437767502643422b71955ad004/Pruina_Socket-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b579cf95e0627f4adbb3f53b69ff0372abbfe8af077bd7bba0e970644ea11bf8",
        "md5": "9f2602ec917e764681c625c745d2f8d7",
        "sha256": "15e25a1d7d1cb7da9935f19097650ace50f3c763f7e4e1a0753eed45b73416f4"
      },
      "downloads": -1,
      "filename": "Pruina-Socket-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "9f2602ec917e764681c625c745d2f8d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 22269,
      "upload_time": "2022-02-06T13:48:56",
      "upload_time_iso_8601": "2022-02-06T13:48:56.649901Z",
      "url": "https://files.pythonhosted.org/packages/b5/79/cf95e0627f4adbb3f53b69ff0372abbfe8af077bd7bba0e970644ea11bf8/Pruina-Socket-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}