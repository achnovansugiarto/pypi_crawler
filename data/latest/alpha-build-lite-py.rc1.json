{
  "info": {
    "author": "Cristian Matache",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# AlphaBuild\n\n[![Made with make](https://img.shields.io/badge/Made%20with-Make-lightblue?style=flat&logo=CMake&logoColor=lightblue)\n](https://www.gnu.org/software/make/manual/make.html)\n[![Made with bash](https://img.shields.io/badge/Made%20with-Bash-darkgreen?style=flat&logo=GNUBash)\n](https://www.gnu.org/software/bash/)\n\n[![supports python](https://img.shields.io/badge/Supports%20-Python-blue?style=flat&logo=Python)\n](https://www.python.org/)\n[![supports jupyter](https://img.shields.io/badge/Supports%20-Jupyter-orange?style=flat&logo=Jupyter)\n](https://jupyter.org/)\n[![supports bash](https://img.shields.io/badge/Supports%20-Bash-darkgreen?style=flat&logo=GNUBash)\n](https://www.gnu.org/software/bash/)\n[![supports kt](https://img.shields.io/badge/Supports%20-Kotlin-violet?style=flat&logo=Kotlin&logoColor=violet)\n](https://kotlinlang.org/)\n[![supports swift](https://img.shields.io/badge/Supports%20-Swift-orange?style=flat&logo=Swift&logoColor=orange)\n](https://developer.apple.com/swift/)\n[![supports js](https://img.shields.io/badge/Supports%20-JavaScript-yellow?style=flat&logo=JavaScript&logoColor=yellow)\n](https://www.javascript.com/)\n[![supports js](https://img.shields.io/badge/Supports%20-TypeScript-blue?style=flat&logo=TypeScript&logoColor=blue)\n](https://www.typescriptlang.org/)\n[![supports haskell](https://img.shields.io/badge/Supports%20-Haskell-purple?style=flat&logo=Haskell&logoColor=violet)\n](https://www.haskell.org/)\n[![supports markdown](https://img.shields.io/badge/Supports%20-Markdown-black?style=flat&logo=Markdown)\n](https://www.markdownguide.org/)\n[![supports html5](https://img.shields.io/badge/Supports%20-HTML-orange?style=flat&logo=HTML5&logoColor=orange)\n](https://en.wikipedia.org/wiki/HTML5)\n[![supports linux](https://img.shields.io/badge/Supports%20-Linux-yellow?style=flat&logo=Linux)\n](https://www.linux.org/)\n[![supports windows](https://img.shields.io/badge/Supports%20-Windows-brown?style=flat&logo=Windows)\n](https://www.microsoft.com/en-us/windows)\n[![supports mac](https://img.shields.io/badge/Supports%20-MacOS-silver?style=flat&logo=Apple)\n](https://www.apple.com/macos/)\n[![supports pycharm](https://img.shields.io/badge/Compatible%20with%20-PyCharm-green?style=flat&logo=PyCharm&logoColor=green)\n](https://www.jetbrains.com/pycharm/)\n[![supports ado](https://img.shields.io/badge/Compatible%20with%20-AzureDevOps-royalblue?style=flat&logo=AzureDevOps&logoColor=royalblue)\n](https://azure.microsoft.com/en-us/services/devops/)\n[![supports github](https://img.shields.io/badge/Compatible%20with%20-GithubActions-black?style=flat&logo=github&logoColor=black)\n](https://github.com/features/actions)\n[![supports jenkins](https://img.shields.io/badge/Compatible%20with%20-Jenkins-red?style=flat&logo=Jenkins)\n](https://www.jenkins.io/)\n[![supports circleci](https://img.shields.io/badge/Compatible%20with%20-CircleCI-darkgrey?style=flat&logo=CircleCI)\n](https://www.jenkins.io/)\n\nAlphaBuild is a simple monorepo build tool based on Make with out-of-the-box support for numerous tools in the\nPython, Bash, Jupyter Notebooks, Markdown, YAML ecosystems and with a strong focus on extensibility.\n\nThe way AlphaBuild works draws inspiration heavily from monorepo build tools such as Pants, Bazel, Buck.\nIt can run at once multiple linters, formatters, type checkers, hermetic packers, testing frameworks, virtual\nenvironment managers etc.\n\n1. [Platforms](#Platforms)\n2. [Usage](#Usage)\n   1. [Goals - what tools we run](#goals---what-tools-we-run)\n   2. [Targets - what files we run the tools on](#targets---what-files-we-run-the-tools-on)\n3. [AlphaBuild structure](#alphabuild-structure)\n4. [IDE Integration](#ide-integration)\n5. [Example monorepo running AlphaBuild](#example-monorepo-running-alphabuild)\n6. [Common admin actions](#common-admin-actions)\n   1. [Installation](#installation)\n   2. [CI/CD Setup](#cicd-setup)\n   3. [Upgrade](#upgrade)\n   4. [Change goal definitions](#change-goal-definitions)\n   5. [Add goals](#add-goals)\n   6. [Update PYTHONPATH](#update-pythonpath)\n   7. [See/Change tools config](#seechange-tools-config)\n   8. [Third party environments](#third-party-environments)\n   9. [Nested Makefiles](#nested-makefiles)\n   10. [Generate requirements.txt for each sub-project](#generate-requirementstxt-for-each-sub-project)\n   11. [Generate setup.py for each sub-project](#generate-setuppy-for-each-sub-project)\n   12. [Markdown badge](#markdown-badge)\n7. [Out-of-the-box tools by language](#out-of-the-box-tools-by-language)\n8. [High-level comparison with Pants, Bazel, Pre-commit,\n   Makefiles](#high-level-comparison-with-pants-bazel-pre-commit-and-traditional-makefiles)\n9. [Limitations](#limitations)\n10. [Detailed comparison: Make vs Pre-commit vs Tox/Nox vs Bazel vs Pants](#detailed-comparison-alphabuild-vs-make-vs-pre-commit-vs-toxnox-vs-bazel-vs-pants)\n\n## Platforms\n\nAlphaBuild works on Linux distributions, MacOS, WSL and Windows with Git Bash.\n`Make` and `Bash` are AlphaBuild's only pre-requisites (Note: Bash with GNU utilities, not BSD utilities).\n\n### Linux, WSL\n\nSince Linux is awesome and WSL follows its footsteps, AlphaBuild should just work there.\n\n### MacOS\n\nAlphaBuild relies heavily on the GNU version of `find` and `egrep`, so, if you are running an OS which,\nby default, uses BSD rather than GNU (pointing fingers to MacOS here, you may need to\n`brew install` `findutils` and `grep`, see: <https://xenodium.com/gnu-find-on-macos/>)\n\nAlso, AlphaBuild may not work if you have ancient versions of `Make` / `Bash`, so try upgrading them if some commands\ndon't seem to work. Macs typically come equipped with ancient versions of `Bash`.\n\n### Windows\n\nOn Windows, `Make` and `Bash` are not supported out-of-the-box, so it is recommended to use AlphaBuild on Windows within\nGit Bash. Note that Git Bash does not come with Make pre-installed. Once you downloaded and installed Git Bash\nrun `build-support/git-bash-integration/install_make.sh` running Git Bash as administrator. Alternatively, you may get\n`Make` from `conda`.\n\n## Usage\n\nUsually to format, lint, type-check, test, package, ... the code, one needs to run a bunch of commands in the terminal,\nsetting the right flags and the right parameters. This Make-based build system helps with running these commands with\na very simple interface:\n\n`make <goal> <optional-targets>`\n\nwhere\n\n- **goal = what tools we run**\n- **targets = over which files we run these tools**.\n\n### Goals - what tools we run\n\nGoals mean what command line tools to run. This build system can run one more tools at once as follows:\n\n- Single **individual** tool\n  - e.g. `make mypy`, `make flake8`, `make isort`\n- Multiple tools for a **specific language**\n  - e.g. `make fmt-py` runs all Python formatters e.g. `isort`, `black`, `docformatter`, `flynt`, `autoflake`\n  - e.g. `make fmt-sh` runs `shfmt`\n  - e.g. `make lint-py` runs Python all linters and all formatters in \"verification\" mode, that is `flake8` + `pylint` +\n    check whether the code is already formatted with `isort`, `black`, `docformatter`, `flynt`, `autoflake`\n  - `make fmt-md`, `make lint-yml`, `test-sh`, `test-py` ... work similarly\n- Multiple tools for **multiple languages**\n  - e.g. `make fmt` runs all formatters for all supported languages (Python, Bash, Markdown, YAML, ...)\n  - e.g. `make lint` runs all linters for all supported languages\n  - e.g. `make test` runs all test suites for all supported languages\n\nIt is possible to run multiple goals at once like `make lint test`. In addition, it is very easy to change the meaning\nof goals that run more than one command since they are very simply defined in Make based on other goals. For example,\none can remove the `shfmt` from bash linting simply by doing the below:\n\n```makefile\n# Before\nlint-sh: shellcheck shfmt-check  # where shellcheck and shfmt-check run the respective commands\n# After\nlint-sh: shellcheck\n```\n\nPer-tool config files (e.g. `mypy.ini`, `pyproject.toml`) are typically places in\n`build-support/<language>/tools-config/`.\n\n### Targets - what files we run the tools on\n\nWe have seen that Make gives us the power to run multiple terminal commands effortlessly. Using a Makefile like\ndescribed above is standard practice in many projects, typically running the different tools over all their files.\nHowever, as projects grow, the need to run these tools at different granularities (e.g. in a specific directory,\nover a given file, on the diff between two branches, since we last committed etc). This is where targets come into play.\n\n#### With default targets\n\nThe default targets per-language are defined at the top of the `Makefile` in language specific variables\ne.g. `ONPY=py-project1/ py-project2/ script.py` and `ONSH=scripts/`.\n\n- `make lint` runs:\n  - all Python linters on all directories (in the `$ONPY`) that contain Python/stub files.\n  - all notebook linters on all directories (in `$ONNB`) that contain `.ipynb` files.\n  - all Bash linters (shellcheck) on all directories (in `$ONSH`) that contain Bash files.\n  - a Haskell linter (hlint) on all directories (in `$ONHS`) that contain Haskell files.\n  - a YAML linter (yamllint) on all directories (in `$ONYML`) that contain YAML files.\n- `make lint`, `make fmt -j1`, `make type-check` work similarly\n- remember that the `$(ONPY)`, `$(ONSH)`, ... variables are defined at the top of the Makefile and represent the\n  default locations where AlphaBuild searches for files certain languages.\n\n#### With specific targets\n\nTo specify manually the files/directories you want to run your tools on, AlphaBuild leverages the \"on\" syntax:\n\n- **file:** `make lint on=app_iqor/server.py` runs all Python linters on the file, same\n  as `make lint-py on=app_iqor/server.py`\n- **directory:** `make lint on=lib_py_utils` runs a bunch of linters on the directory, in this case, same\n  as `make lint-py on=lib_py_utils/`.\n- **files/directories:** `make lint on=\"lib_py_utils app_iqor/server.py\"` runs a bunch of linters on both targets.\n- **globs:** `make lint on=lib_*`\n- **aliases:** `make fmt on=iqor` where at the top of the Makefile `iqor=app_iqor/iqor app_iqor/test_iqor`, this is the\n  same as `make fmt on=app_iqor/iqor app_iqor/test_iqor` because `iqor` is an alias for\n  `app_iqor/iqor app_iqor/test_iqor`. Even though this example is simplistic, it is useful to alias combinations of\n  multiple files/directories. It is recommended to set aliases as constants in the Makefile even though environment\n  variables would also work.\n- same for `make fmt`, `make test`, `make type-check`.\n\n#### With git revision targets\n\n- `make fmt -j1 since=master` runs all formatters on the diff between the current branch and master.\n- `make fmt -j1 since=HEAD~1` runs all formatters on all files that changed since \"2 commits ago\".\n- `make lint since=--cached` runs all linters on all files that are \"git added\".\n- all goals that support the \"on\" syntax also support the \"since\" syntax\n\n#### Mixed \"on\" and \"since\"\n\nOne can use the \"on\" and \"since\" syntaxes at the same time. For example:\n\n- `make lint on=my_dir/ since=HEAD~2` will run all linters on all files in `my_dir/` that changed since \"3 commits ago\".\n\n#### Constraints\n\nDifferent languages may have different goals, for example Python can be packaged hermetically with Shiv, while Bash\nobviously can't.\n\nThe following goals must support the \"on\" and \"since\" syntax and ensure that they are only run if there are any targets\nfor the language they target:\n\n- format\n- lint\n- type-check\n- test\n\nIf you want to learn more about the API of a specific goal, check the source code.\n\n## AlphaBuild structure\n\n- **Makefile:** AlphaBuild's entry point, this is where all components come together.\n- **3rdparty/:** Files required to build environments of 3rd party dependencies (e.g. requirements.txt files,\n  package.json or lock files)\n- **build-support/:** Makefile library inspired by Pants/Bazel to run linters, formatters, test frameworks, type\n  checkers, packers etc. on a variety of languages (Python, Jupyter Notebooks, Bash, Haskell, YAML, Markdown)\n  - The flags used per-tool (e.g. setting the paths to config files) can be found in\n    `build-support/alpha-build/config/<lang>.mk`\n  - The core part of AlphaBuild lives in `build-support/alpha-build/core/`, this comprises the build-system backbone\n    `resolver.mk` and recipes to run lots of readily-available tools. This should be the same for all monorepos that\n    use AlphaBuild.\n  - By convention, repo-specific custom goals go in `build-support/alpha-build/extensions/` following the examples in `core`.\n  - `build-support/<other-programming-lang-than-make>/` contain things like config files for each tool and other files\n    required for your custom AlphaBuild goals.\n\n## IDE Integration\n\n- **PyCharm / IntelliJ**\n  - Windows: On Windows, it is advised to set Git Bash as the default \"Terminal\". In \"settings\" search for \"terminal\",\n    go to \"Tools â†’ Terminal\" and set \"Shell Path\" to something like `C:\\Program Files\\Git\\bin\\bash.exe`.\n  - PYTHONPATH: If you are writing Python, please mark the directories for each project as \"Sources Roots\", such that\n    PyCharm discovers your imports.\n  - AlphaBuild hotkeys: It is easy to use AlphaBuild with hotkeys. For example, mapping `Alt+F` to\n    `make fmt -j1 on=<current-file>` and `Alt+L` to `make lint on=<current-file>`. To set this up, follow the example in\n    `build-support/ide-integration/windows/` to set up an external tool. Unix systems would be similar. Next, just map the\n    new external tools to your hotkeys.\n    ![external-tool](build-support/ide-integration/windows/example-setup-windows-pycharm.png)\n    ![external-tool-keymap](build-support/ide-integration/windows/example-setup-windows-pycharm-keymap.png)\n\n\n## Common admin actions\n\n### Installation\n\nUse this `cookiecutter` template: https://github.com/cristianmatache/cookiecutter-alpha-build-polyrepo-py.\nFeel free to extend the project such that it becomes a monorepo.\n\n#### Upgrade\n\nTo upgrade an existing installation if new tools are added or changes are made to the target resolution infrastructure,\none would simply need to replace the `build-support/alpha-build/core` directory. To do that please run:\n\n```bash\npip install alpha-build-core --target tmp/\ntar -xvf tmp/alpha_build_core.tar.gz\nrm -rf tmp/\n```\n\n#### CI/CD setup\n\nSince all CI/CD pipelines essentially rely on running some scripts in a certain order, AlphaBuild can be called\ndirectly from any CI/CD pipeline regardless of CI/CD technology provider. AlphaBuild helps with ensuring that both the\nCI pipelines and developers run the exact same commands. Since, one can easily select targets within the repo, setting\npipelines on a per sub-project basis, is effortless with AlphaBuild.\n\n\n#### Change goal definitions\n\nLet's say, for example, you don't want to run `pylint` as part of your python linting. You would simply go to the\n`Makefile` and change the definition of the `lint-py` goal to not include `pylint`.\n\n#### Add goals\n\nThe goals that are available out of the box are found in `build-support/alpha-build/core/<language>/`.\nYou can extend/replace the core goals for new languages and/or tools by writing `.mk` code in\n`build-support/alpha-build/extensions/<language>/` following the examples in `build-support/alpha-build/core/`.\nFor example, <https://github.com/cristianmatache/workspace> extends AlphaBuild with Prometheus and Alertmanager goals.\n\n#### Update PYTHONPATH\n\nThe PYTHONPATH is set at the top of the `Makefile`. For example, to add new directories to\nthe PYTHONPATH (i.e. to mark them as sources roots) set `PY_SOURCES_ROOTS` at the top of the Makefile.\n\n#### See/Change tools config\n\nLet's say you want to change the way `mypy` is configured to exclude some directory from checking. Then head to\n`build-support/alpha-build/config/python.mk` check what is the path to the `mypy` config file, go there and update it.\nAll other tools work similarly.\n\n#### Third party environments\n\n- **Exact reproduction of the default environment:** The recipes to fully replicate the default environment\n  (mostly using `pip`, `conda` and `npm`) are found in `build-support/alpha-build/core/<langugage>/setup.mk`, where they\n  use dependency files and lock files that can be found in `3rdparty/`. In practice, run `make env-default-replicate`\n  inside a conda environment. Also make sure you also have `npm` installed because `markdownlint` and `bats` bash\n  testing framework come from `npm` (if you don't need them no need to worry about `npm` just exclude the `markdown`\n  environment rule from the pre-requisites of `env-default-replicate`)\n- **Create/Upgrade/Edit default environment:** If you want to edit the default environment, for example to add,\n  remove, constrain packages edit the `requirements.txt` not the `constraints.txt` file (in `3rdparty/`).\n  The `constraints.txt` is only used for reproducibility. If you just want to upgrade your third party dependencies\n  there is no need to temper with the `requirements.txt` files. Then run `make env-default-upgrade` and check the lock\n  files back into git.\n- **Add a new environment:** To add a new environment, first add the dependency files (e.g. `requirements.txt`) in\n  `3rdparty/<new-env-name>`, add a new goal in `build-support/alpha-build/extensions`. For environment management over\n  time, we strongly encourage maintaining the approach split between creation/upgrade/edit and exact reproduction of\n  environments.\n\n#### Nested Makefiles\n\nSupposing you want to use a different config file for `black` for a project in your monorepo. You would have 2 options:\nchange the config file globally from `build-support/alpha-build/config/python.mk` (this would affect other projects) or create\nanother `Makefile` in your specific project if you just want different settings for your little project (whether this\nis a good or a bad idea is more of a philosophical debate, I would argue that globally consistent config files are\npreferable, but I acknowledge that this may be needed sometimes).\nSo, to have nested `Makefile`s that work with different config files:\n\n```makefile\n# root/Makefile\nblack.%:  # Add this goal to be able to delegate to inner Makefile-s\n    $(MAKE) -C $(subst .,/,$*) custom-black\nfmt-py: black black.my-proj  # Add your custom \"black\" goals here\n\n# root/my-proj/Makefile\ninclude build-support/alpha-build/core/python/format.mk\ncustom-black:\n    $(eval targets := $(onpy))\n    $(MAKE) black targets=\"$(on)\" BLACK_FLAGS=\"-S --config my-proj/pyproject.toml\"\n```\n\nThis way `make fmt-py` at the root would call the regular `black` rule but will also delegate to the inner Makefile\n`custom-black` rule to run the same tool differently. Don't forget to exclude `my-proj/` from black in the outer\nMakefile, otherwise black would be run twice (once from the outside Makefile and again from the inner one).\n\n#### Generate requirements.txt for each sub-project\n\nRun `make reqs-py`.\n\n#### Generate setup.py for each sub-project\n\nRun `build-support/python/packaging/generate_pip_install_files.py`\n\n#### Markdown badge\n\nIf you like AlphaBuild, wear the Markdown badge on your repo:\n[![powered_by_alpha_build](https://img.shields.io/badge/Powered%20by%20-AlphaBuild-lightblue?style=flat&logo=CMake&logoColor=lightblue)\n](https://github.com/cristianmatache/alpha-build)\n\n```markdown\n[![powered_by_alpha_build](https://img.shields.io/badge/Powered%20by%20-AlphaBuild-lightblue?style=flat&logo=CMake&logoColor=lightblue)\n](https://github.com/cristianmatache/alpha-build)\n```\n\n## Out-of-the-box tools by language\n\nAlphaBuild has recipes to run the following tools. However, if you don't use some of them you don't need to have them\ninstalled in your environments. For example, let's say you don't use `bandit` then you don't need to have `bandit`\ninstalled in your environment provided that you are not using the `bandit` goal per-se or as part of a composite goal\nlike `lint-py` or `lint`.\n\n<!-- markdownlint-disable MD033 -->\n<details>\n  <summary>Click to expand and see the supported tools!</summary>\n\n- Python:\n  - Setup: `pip` / `conda`\n  - Type-check: `mypy`\n  - Test: `pytest` (along with `doctest` and other plugins)\n  - Format + Lint: `black`, `docformatter`, `isort`, `autoflake`, `flynt`, `pre-commit`, `pyupgrade`\n  - Lint only: `flake8`, `pylint`, `bandit`, `pydocstyle` (along with plugins like `darglint`, `flake8-bugbear`)\n  - Package: `pipreqs`, `shiv`\n- Jupyter:\n  - Setup: `pip`\n  - Format + Lint: `jupyterblack`, `nbstripout`\n  - Lint only: `flake8-nb`\n- Bash:\n  - Setup: `npm` and `conda`\n  - Test: `bats` (bash testing: `bats-core`, `bats-assert`, `bats-support`)\n  - Format + Lint: `shfmt`\n  - Lint only: `shellcheck`\n- Haskell:\n  - Lint: `hlint`\n- YAML:\n  - Setup: `pip`\n  - Lint: `yamllint`, `prettier`\n\n[//]: # (- Prometheus and Alertmanager YAML:)\n\n[//]: # (  - Lint: `promtool check`, `amtool check-config`)\n- Markdown:\n  - Setup: `npm`\n  - Format + Lint: `markdownlint`, `prettier`\n- HTML + CSS:\n  - Setup: `npm`\n  - Format + Lint: `prettier`\n- JavaScript:\n  - Setup: `npm`\n  - Format + Lint: `prettier`\n- TypeScript:\n  - Setup: `npm`\n  - Format + Lint: `prettier`\n- reStructuredText Text (.rst)\n  - Lint: `rstcheck`\n- Swift:\n  - Format: `SwiftLint`, `swift-format`\n  - Lint: `SwiftLint`, `swift-format`\n- Kotlin:\n  - Format: `ktlint`\n  - Lint: `ktlint`\n    It is very easy to extend this list with another tool, just following the existing examples.\n</details>\n<!-- markdownlint-enable MD033 -->\n\n## Example monorepo running AlphaBuild\n\nTo see AlphaBuild at work in a real-world example check <https://github.com/cristianmatache/workspace> out.\nWorkspace extends AlphaBuild with support for Prometheus, Alertmanager and Grafana.\n\n\n## High-level comparison with Pants, Bazel, Pre-commit and traditional Makefiles\n\nModern build tools like Pants or Bazel work similarly to AlphaBuild in terms of goals and targets, but they also add\na caching layer on previous results of running the goals. While they come equipped with heavy machinery to support\nenormous scale projects, they also come with some restrictions and specialized maintenance and contribution requirements.\n\nFor example, Pants which, in my opinion, is the most suitable modern build tool for Python doesn't allow building\nenvironments with arbitrary package managers (e.g. conda, mamba), does not work on Windows, prohibits inconsistent\nenvironments (which is good but sometimes simply impossible in practice), does not yet support multiple environments.\nBazel, requires maintaining the dependencies between Python files twice, once as \"imports\" in the Python files\n(the normal thing to do) and twice in some specific `BUILD` files that must be placed in each directory (by contrast\nPants features autodiscovery). Maintaining the same dependencies in two places is quite draining. Of course, these tools\ncome with benefits like (remote) caching, incrementality and out-of-the-box support for hermetic packaging (e.g. PEXes),\nremote execution etc. Moreover, playing with some new command line tools, or new programming languages / types of files\n(e.g. Jupyter Notebooks, Markdown, YAML) may be challenging with these frameworks. The Pants community is very welcoming\nand supportive towards incorporating new tools, so it would be good to give Pants a try first. However, if any of the\nmentioned shortcomings is a hard requirement, Make seems like a good and robust alternative in the meanwhile which\nwithstood the test of time in so many settings. AlphaBuild's strengths are its flexibility, simplicity, transparency and\ntooling richness. One can quickly hack/add a new tool, see the commands that run under the hood and does not need to\nworry about BUILD files or the config language.\n\nSince AlphaBuild is essentially a script manager (Python, Bash, Perl, anything) enhanced with advanced\ntarget/file/directory selection, AlphaBuild would allow an incremental adoption of large-scale build tools like Pants.\nFor example, in the main Makefile, one could do:\n\n```make\n# Makefile\n\nlint-with-pants:\n   $(eval on := ::)  # Default value if the user does not specify \"on\" in the terminal command like: make goal on=.\n   ./pants lint $(on)\n\nlint: lint-md lint-nb lint-yml lint-with-pants\n```\n\nsuch that running a command like the below would delegate most of the work to Pants while using AlphaBuild's core or\ncustom capabilities not yet available in Pants (e.g. linting notebooks, markdown or YAML files).\n\n```bash\nmake lint on=my-dir/\n```\n\nBare `pre-commit` and typical usages of Make work exceptionally well on small projects, but they don't really scale\nwell to multi-projects monorepos. The build system proposed here, already incorporates `pre-commit` and is obviously\ncompatible with any existing Makefiles. This approach simply takes the idea of advanced target selection and ports it\nover to classical techniques like pre-commit and Make.\n\n## Limitations\n\nSince AlphaBuild is essentially a small-repo tool (Python Makefile) adapted to work on larger codebases (through target\nselection), there is a point from where it will no longer be able to scale up. Fortunately, that point is quite far away\nfrom medium-sized repos/teams.\n\nIn addition, AlphaBuild requires that the commands it builds are shorter than `getconf ARG_MAX` characters.\n\n## Detailed comparison: AlphaBuild vs Make vs Pre-commit vs Tox/Nox vs Bazel vs Pants\n\nMost small/medium popular Python open source projects use Make, Pre-commit and/or Tox/Nox with a crushing majority\nfor formatting, linting and/or testing and/or publishing. For the same purposes, fewer projects simply use a bunch\nof Bash scripts or monorepo-style build tools like Bazel (or Pants, Buck, Please).\nMake, pre-commit, nox/tox work pretty well together in the same repo and are often used so.\n\n**Note 1:** Every time we talk about Pants we talk about Pants V2, which is a fundamentally different product from\nPants V1. Even Twitter gave up on Pants V1 and is moving to Bazel (see\n<https://twitter.com/jin_/status/1255133781876330497>).\n\n**Note 2:** IMHO Pants (V2) is the best (but not yet perfect) build tool for large monorepos out there and has\ngreat potential.\n\n### Pros and Cons\n\n<!-- markdownlint-disable MD033 -->\n<details>\n  <summary>Click to expand and see the pros and cons of each tool!</summary>\n\n- **Tox/Nox:**\n  - Pros:\n    - Good to run the same commands in multiple environments\n    - Cross-platform\n  - Cons:\n    - Does not scale to large repos\n    - Python-only\n  - Notes: can be called from within Make, but can also call Make and pre-commit commands\n    (see: <https://tox.wiki/en/latest/config.html#conf-allowlist_externals>)\n- **Pre-commit:**\n  - Pros:\n    - Great to manage git hooks (as the name implies)\n    - Can run over all files or over a specific set of files but not directories\n    (slightly more advanced target selection)\n    - Sort of incremental\n  - Cons:\n    - Does not work on Windows (docs say it doesn't but in fact it does partly) \\[EDIT this is no longer the case.\\]\n    - Typically, very much geared towards format and lint.\n  - Notes: can be called from within Make\n- **Make:**\n  - Pros:\n    - Very flexible -> can essentially cover any tools/language (AlphaBuild is just Make with several built-in tools\n      and target selection) and any way of fetching dependencies, multiple 3rd party environments etc.\n    - Very transparent -> easy to support\n    - Cross-platform\n    - Supports nested Makefiles\n  - Cons:\n    - More scalable than pre-commit/tox/nox but not as scalable or hermetic as Bazel/Pants/Buck/Please\n      (see <https://github.com/thought-machine/please#why-please-and-not-make> for details).\n  - Notes: can run pre-commit, tox/nox but can also be run from tox/nox (not from pre-commit though)\n- **Bazel:**\n  - Pros:\n    - Great for large scale projects (incremental, DAG, remote caching/execution)\n    - Hermetic\n  - Cons:\n    - Need to maintain special BUILD files in every directory in which all dependencies are written again\n      (once imported in the code, twice in the BUILD files)\n    - Low tool coverage for Python/Jupyter ecosystem\n    - Support for 3rd party Python environments was not great (not sure if it is still the case)\n    - Has more sophisticated support needs (dedicated engineers and/or tuned CI infra)\n  - Notes: can be called from within Make\n- **Pants V2:**\n  - Pros:\n    - Great for large scale projects (incremental, DAG, remote caching/execution)\n    - Dependencies are auto-discovered in BUILD files\n    - Hermetic\n  - Cons:\n    - Environment support: no conda, no multiple environments, no arbitrary ways to create environments, no inconsistent\n      envs\n    - No support for Windows (only for WSL)\n    - Tool/language support could be better (Pants's support for Python is better than Bazel's though)\n    - Has more sophisticated support needs (e.g. dedicated engineers and/or tuned CI infra)\n    - Does not readily support the equivalent of nested Makefiles\n  - Notes:\n    - Can be called from within Make\n    - Still need to have BUILD files in every directory (much easier to work with than in Bazel)\n\n</details>\n\n### Users by tool\n\n<details>\n  <summary>Click to expand and see who uses each tool!</summary>\n\n#### Nox, Tox, Pre-commit\n\nThese tools are simply extremely popular.\n\n#### Bazel\n\n- ray\n- pytorch (**Make for Python, Bash and CMake**; in parallel with Bazel for other languages)\n- selenium (with Rake i.e. ruby make) -> example BUILD file\n  <https://github.com/SeleniumHQ/selenium/blob/trunk/py/BUILD.bazel>\n- tensorflow\n- keras\n- protobuf\n- jax (with pre-commit)\n\n#### Pants\n\n<https://www.pantsbuild.org/page/who-uses-pants>\n\n#### Make\n\n- Data\n  - pandas (in parallel with pre-commit)\n  - vaex\n  - pydantic\n  - pandera (in parallel with pre-commit, Make also runs nox)\n- ML\n  - pytorch (Make for Python, Bash and CMake; in parallel with Bazel for other languages)\n  - xgboost\n  - Determined AI (example of a more scalable Make-based infrastructure with nested Makefiles)\n- Visualization\n  - seaborn\n- Distributed\n  - celery (in parallel with tox and pre-commit)\n- Stream processing\n  - faust (Make also runs pre-commit)\n- Web\n  - requests\n  - gunicorn (in parallel with tox)\n  - sentry-python (Make also runs tox)\n- AsyncIO (Aio-libs)\n  - aiohttp (Make also runs pre-commit)\n  - yarl\n  - aiomysql\n  - aioredis-py (Make also runs pre-commit)\n  - aiopg\n- DevOps\n  - ansible (in parallel with tox)\n  - pytest-testinfra (in parallel with tox)\n- Documentation\n  - sphinx: the home repo (in parallel with tox)\n  - everything that uses sphinx for documentation\n- Packaging\n  - poetry (in parallel with tox and pre-commit)\n- pyyaml (in parallel with tox)\n- colorama (in parallel with tox)\n- wrapt (Make also runs tox)\n- pydata bottleneck\n- facebook research\n  - mephisto\n  - demucs\n  - diffq\n  - dora\n- apache\n  - superset (in parallel with tox and pre-commit)\n- IBM\n  - lale (in parallel with pre-commit)\n  - compliance-trestle (Make also runs pre-commit)\n- reddit\n  - baseplate.py\n  - baseplate.py-upgrader\n  - cqlmapper\n- Other companies: AWS, Lyft, Microsoft, GoCardless, HewlettPackard\n\n</details>\n<!-- markdownlint-enable MD033 -->\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cristianmatache/alpha-build",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alpha-build-lite-py",
    "package_url": "https://pypi.org/project/alpha-build-lite-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/alpha-build-lite-py/",
    "project_urls": {
      "Homepage": "https://github.com/cristianmatache/alpha-build"
    },
    "release_url": "https://pypi.org/project/alpha-build-lite-py/0.1.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AlphaBuild's lightweight core",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16320360,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "295993fc1f5c93d6157e59c68df17108b05bf9bc76b16fb743eec60fc7bd26b1",
          "md5": "18fa8863ca7f0e782f51d33395a857ab",
          "sha256": "30fddeab6b63d5421bb9a4bf49df108df7c6b83b016da1e23967ae1ea1402115"
        },
        "downloads": -1,
        "filename": "alpha_build_lite_py-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18fa8863ca7f0e782f51d33395a857ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17532,
        "upload_time": "2023-01-05T17:46:51",
        "upload_time_iso_8601": "2023-01-05T17:46:51.342461Z",
        "url": "https://files.pythonhosted.org/packages/29/59/93fc1f5c93d6157e59c68df17108b05bf9bc76b16fb743eec60fc7bd26b1/alpha_build_lite_py-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "295993fc1f5c93d6157e59c68df17108b05bf9bc76b16fb743eec60fc7bd26b1",
        "md5": "18fa8863ca7f0e782f51d33395a857ab",
        "sha256": "30fddeab6b63d5421bb9a4bf49df108df7c6b83b016da1e23967ae1ea1402115"
      },
      "downloads": -1,
      "filename": "alpha_build_lite_py-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18fa8863ca7f0e782f51d33395a857ab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17532,
      "upload_time": "2023-01-05T17:46:51",
      "upload_time_iso_8601": "2023-01-05T17:46:51.342461Z",
      "url": "https://files.pythonhosted.org/packages/29/59/93fc1f5c93d6157e59c68df17108b05bf9bc76b16fb743eec60fc7bd26b1/alpha_build_lite_py-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}