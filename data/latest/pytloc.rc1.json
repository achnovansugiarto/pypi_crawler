{
  "info": {
    "author": "Gilda Rech BANSIMBA",
    "author_email": "bansimbagilda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pytLoc\npytLoc is a python tool that locks python source files using a one time pad lock. It helps to securely storing and sharing python source files. <br/>\n         **Author**: [Gilda Bansimba](https://github.com/GildaRech/GildaRech)<br/>\n         **usage**: **`from pytLoc import pytLoc`**<br/>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **`pytLoc.pytLoc(*args).[method]`** <br/>\n         Options and methods. <br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This class represents the heart of pytLoc.<br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It takes optionnal arguments:<br/>\n       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -either a list of file names in the current working directory. E.g: ***`pytLoc.pytLoc(\"file1.py\")`***<br/>\n       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or ***`pytLoc.pytLoc(\"file1.py\", \"file2.py\")`***<br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-either \".\" to obfuscate all python files in the current working directory. E.g: ***`pytLoc.pytLoc(\".\").loc(key)`***<br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-either \"*\" to obfuscate all python files in the current working directory and in its subfolders. E.g: ***`pytLoc.pytLoc(\"*\").loc(key)`***<br/>\n       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -either \"`***`\" to obfuscate all python source code files stored in the entire disk. E.g: ***`pytLoc.pytLoc(\"***\").loc(key)`***<br/>\n       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ***key*** --> the key is a string: a phrase or key string or a list of words or strings. E.g: key=\"hello\"; key=\"hello, h*cb45#\".<br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ***genKey(key, leng)*** --> generates a one time pad of length \"leng\" key from a the key \"key\".<br/>\n               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This key is generated randomly using the secure hash algorithm with 512 bits. To do so, <br/>\n               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it uses the composition function of functions initialized at sha512(key) concatenated with <br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the footprints of consecutive concatenation of footprints up to the length \"leng\".<br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;***loc(key)*** --> locks / obfuscates python files indicated in pytLoc with the one time pad key generated from\n                the key \"Key\"<br/>\n        ***`unloc(key)`***       --> unlocks / de-obfuscates python files indicated in pytLoc with the one time pad key generated\n                             from the key \"Key\".<br/>\n        ***`genKey(key, len)`*** --> generates a one time pad security key of length len derived from key.<br/>\n        ***`sig(file)`***        --> computes a hash of file.<br/>\n        ***`check(file)`***      --> function that checks the integrity of a locked python source.<br/>\n        E.g: 1- *OBFUSCATE / LOCK A PYTHON FILE or PYTHON FILES IN THE CURRENT WORKING DIRECTORY*<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to obfuscatE the file \"file1.py\" located in the current working directory with the one time pad generated from key \"hello\",<br/>\n               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --> ***`pytLoc.pytLoc(\"file1.py\").loc(\"hello\")`*** which generates the file \"LOCKED_file1.py\" in the same directory. This file is obfuscated.<br/>\n               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to DE-obfuscatE the file \"LOCKED_file1.py\" located in the current working directory with the one time pad generated from key \"hello\",<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\"LOCKED_file1.py\").unlock(\"hello\")`*** which generates back the file \"UNLOCKED_file1.py\" which is equal to \"file1.py\" in the same \n                    directory.<br/>\n             2- *OBFUSCATE / LOCK ALL PYTHON FILES LOCATED IN THE CURRENT WORKING DIRECTORY*<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to obfuscatE all python files located in the current working directory with the one time pad generated from the key \"hello\",<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\".\").loc(\"hello\")`*** which generates the files \"LOCKED_....py\" in the same directory. These files are obfuscated.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to DE-OBFUSCATE / UNLOCK all the obfuscated python files \"LOCKED_....py\" located in the current working directory with the one time pad generated from\n                the key \"hello\", <br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\".\").unlock(\"hello\")`*** which generates back the files \"UNLOCKED_....py\" in the same directory.<br/>\n             3- *OBFUSCATE / LOCK ALL PYTHON FILES LOCATED IN THE CURRENT WORKING DIRECTORY AND ITS SUB-DIRECTORIES*<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to obfuscatE all python files located in the current working directory and its sub-directories with the one time pad generated from the key \"hello\",<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\"*\").loc(\"hello\")`*** which generates the files \"LOCKED_....py\" in current working directory and all its corresponding sub-directories.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to OBFUSCATE / LOCK all python files located in the current working directory and its sub-directories, <br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\"*\").unlock(\"hello\")`*** which generates the files \"UNLOCKED....py\" in the current working directory and all its corresponding sub-directories.<br/>\n             4- *OBFUSCATE / LOCK ALL PYTHON FILES LOCATED IN THE ENTIRE DRIVE PARTITION*<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to obfuscatE all python files located in the entire drive partition with the one time pad generated from the key \"hello\",<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\"***\").loc(\"hello\")`*** which generates the files \"LOCKED_....py\" in wherever directory or sub-directory where python files are found.<br/>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to DE-obfuscatE all python files located in the entire drive partition with the one time pad generated from the key \"hello\",<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--> ***`pytLoc.pytLoc(\"***\").unlock(\"hello)`*** which generates the files \"UNLOCKED....py\" in wherever directory or sub-directory where locked python files are found.<br/>\n\n     NOTE: when calling pytLoc withe parameter without parameter delete or with parameter delete=False, (E.g `pytLoc.pytLoc(\"file1.py\").loc(key)` or <br/>\n     `pytLoc.pytLoc(\"file1.py\", delete=False).loc(key)` ), the original files are not deleted. and with parameter delete=True, original files are deleted <br/>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GildaRech/pytLoc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytLoc",
    "package_url": "https://pypi.org/project/pytLoc/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytLoc/",
    "project_urls": {
      "Bug Tracker": "https://github.com/GildaRech/pytLoc/issues",
      "Homepage": "https://github.com/GildaRech/pytLoc"
    },
    "release_url": "https://pypi.org/project/pytLoc/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "python tool that locks python source files using a one time pad lock. It helps to securely storing and sharing python source files.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12479080,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68600e82b11b2999d85d2080cd8a34a2a0a53badc2c39064c681c5c216c4c203",
          "md5": "3d98b604b660e931fa47bbd483c60ea5",
          "sha256": "ab492d22c6781cc14d4c07a26e64501741d6b4d75b30802ffa1b233cfc9fd82c"
        },
        "downloads": -1,
        "filename": "pytLoc-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d98b604b660e931fa47bbd483c60ea5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8049,
        "upload_time": "2022-01-04T23:35:35",
        "upload_time_iso_8601": "2022-01-04T23:35:35.045785Z",
        "url": "https://files.pythonhosted.org/packages/68/60/0e82b11b2999d85d2080cd8a34a2a0a53badc2c39064c681c5c216c4c203/pytLoc-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6130b701420cd4794e4fefc7b2d79e2080ef5d963ae656a7d96b06de7403f74a",
          "md5": "01917a33d1227c4b795c57261c155358",
          "sha256": "90fefff15621c8e7cf6ad5edcfc39d37994c0d5a13eca6b36a65d67552b87ec2"
        },
        "downloads": -1,
        "filename": "pytLoc-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "01917a33d1227c4b795c57261c155358",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7796,
        "upload_time": "2022-01-04T23:35:36",
        "upload_time_iso_8601": "2022-01-04T23:35:36.710924Z",
        "url": "https://files.pythonhosted.org/packages/61/30/b701420cd4794e4fefc7b2d79e2080ef5d963ae656a7d96b06de7403f74a/pytLoc-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68600e82b11b2999d85d2080cd8a34a2a0a53badc2c39064c681c5c216c4c203",
        "md5": "3d98b604b660e931fa47bbd483c60ea5",
        "sha256": "ab492d22c6781cc14d4c07a26e64501741d6b4d75b30802ffa1b233cfc9fd82c"
      },
      "downloads": -1,
      "filename": "pytLoc-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d98b604b660e931fa47bbd483c60ea5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8049,
      "upload_time": "2022-01-04T23:35:35",
      "upload_time_iso_8601": "2022-01-04T23:35:35.045785Z",
      "url": "https://files.pythonhosted.org/packages/68/60/0e82b11b2999d85d2080cd8a34a2a0a53badc2c39064c681c5c216c4c203/pytLoc-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6130b701420cd4794e4fefc7b2d79e2080ef5d963ae656a7d96b06de7403f74a",
        "md5": "01917a33d1227c4b795c57261c155358",
        "sha256": "90fefff15621c8e7cf6ad5edcfc39d37994c0d5a13eca6b36a65d67552b87ec2"
      },
      "downloads": -1,
      "filename": "pytLoc-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "01917a33d1227c4b795c57261c155358",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7796,
      "upload_time": "2022-01-04T23:35:36",
      "upload_time_iso_8601": "2022-01-04T23:35:36.710924Z",
      "url": "https://files.pythonhosted.org/packages/61/30/b701420cd4794e4fefc7b2d79e2080ef5d963ae656a7d96b06de7403f74a/pytLoc-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}