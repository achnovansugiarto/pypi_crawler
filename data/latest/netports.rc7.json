{
  "info": {
    "author": "",
    "author_email": "Vladimir Prusakov <vladimir.prusakovs@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Networking"
    ],
    "description": "\r\n.. image:: https://img.shields.io/pypi/v/netports.svg\r\n   :target: https://pypi.python.org/pypi/netports\r\n.. image:: https://img.shields.io/pypi/pyversions/netports.svg\r\n   :target: https://pypi.python.org/pypi/netports\r\n\r\n\r\nnetports\r\n========\r\n\r\nPython tools for managing ranges of VLANs, TCP/UDP ports, IP protocols, Interfaces\r\nRecommended for scripting in telecommunications networks.\r\n\r\n.. contents:: **Contents**\r\n    :local:\r\n\r\n\r\nRequirements\r\n------------\r\n\r\nPython >=3.8\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nInstall the package from pypi.org release\r\n\r\n.. code:: bash\r\n\r\n    pip install netports\r\n\r\nor install the package from github.com release\r\n\r\n.. code:: bash\r\n\r\n    pip install https://github.com/vladimirs-git/netports/archive/refs/tags/0.7.3.tar.gz\r\n\r\nor install the package from github.com repository\r\n\r\n.. code:: bash\r\n\r\n    pip install git+https://github.com/vladimirs-git/netports@0.7.3\r\n\r\n\r\n\r\nTCP/UDP ports\r\n-------------\r\n\r\n\r\nitcp()\r\n......\r\n**itcp(items, verbose, all)**\r\nInteger TCP/UDP Ports. Sorting TCP/UDP ports and removing duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of TCP/UDP ports, can be unsorted and with duplicates\r\nverbose         *bool*                      True - all ports in verbose mode: [1, 2, ..., 65535], False - all ports in brief mode: [-1], to save RAM (default)\r\nall             *bool*                      True - Returns all TCP/UDP ports: [1, 2, ..., 65535], or [-1] for verbose=False\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *List[int]* of unique sorted TCP/UDP ports\r\nRaises\r\n    *ValueError* if TCP/UDP ports are outside valid range 1...65535\r\n\r\n\r\n\r\nstcp()\r\n......\r\n**stcp(items, verbose, all)**\r\nString TCP/UDP ports. Sorting TCP/UDP ports and removing duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of TCP/UDP ports, can be unsorted and with duplicates\r\nverbose         *bool*                      True - all ports in verbose mode: [1, 2, ..., 65535], False - all ports in brief mode: [-1], to save RAM (default)\r\nall             *bool*                      True - Returns all TCP/UDP ports: \"1-65535\"\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *str* of unique sorted TCP/UDP ports\r\nRaises\r\n    *ValueError* if TCP/UDP ports are outside valid range 1...65535\r\n\r\n\r\n**Examples**\r\n\r\n`./examples/tcp_udp.py`_\r\n\r\n\r\n\r\nVLAN IDs\r\n--------\r\n\r\n\r\nivlan()\r\n.......\r\n**ivlan(items, verbose, all, splitter, range_splitter, platform)**\r\nSorting integer VLAN IDs and removing duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter        Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of VLANs, can be unsorted and with duplicates\r\nverbose         *bool*                      True - all VLAN IDs in verbose mode: [1, 2, ..., 65535], False - all VLAN IDs in brief mode: [-1], to save RAM (default)\r\nall             *bool*                      True - Returns all VLAN IDs: [1, 2, ..., 4094], or [-1] for verbose=False\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\nplatform        *str*                       Set ``splitter`` and ``range_splitter`` to platform specific values. Defined: \"cisco\" (Cisco IOS), \"hpe\" (Hewlett Packard Enterprise).\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *List[int]* of unique sorted VLANs\r\nRaises\r\n    *ValueError* if VLANs are outside valid range 1...4094\r\n\r\n\r\nsvlan()\r\n.......\r\n**svlan(items, verbose, all, splitter, range_splitter, platform)**\r\nSorting string VLANs and removing duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of VLANs, can be unsorted and with duplicates\r\nverbose         *bool*                      True - all VLAN IDs in verbose mode: [1, 2, ..., 65535], False - all VLAN IDs in brief mode: [-1], to save RAM (default)\r\nall             *bool*                      True - Returns all VLAN IDs: \"1-4094\"\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\nplatform        *str*                       Set ``splitter`` and ``range_splitter`` to platform specific values. Defined: \"cisco\" (Cisco IOS), \"hpe\" (Hewlett Packard Enterprise).\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *str* of unique sorted VLANs\r\nRaises\r\n    *ValueError* if VLANs are outside valid range 1...4094\r\n\r\n\r\n**Examples**\r\n\r\n`./examples/vlan.py`_\r\n\r\n\r\n\r\nIP protocols\r\n------------\r\n\r\n\r\nIP_NAMES, IP_NUMBERS\r\n....................\r\n\r\nDictionary with known IP protocol names and IDs listed in https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers\r\n\r\n\r\niip()\r\n.....\r\n**iip(items, verbose, all, strict)**\r\nSorting IP protocol numbers and removing duplicates\r\n\r\n\r\n=============== =========================== ============================================================================\r\nParameter        Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of IP protocol numbers, can be unsorted and with duplicates, \"ip\" - Return all IP protocol numbers: [0, 1, ..., 255]\r\nverbose         *bool*                      True - all protocols in verbose mode: [0, 1, ..., 255], False - all protocols in brief mode: [-1], to save RAM (default)\r\nstrict          *bool*                      True - Raises ValueError, if the protocol is unknown (default), False - Skips unknown protocols\r\nall             *bool*                      True - Return all IP protocol numbers: [0, 1, ..., 255]\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *List[int]* of unique sorted IP protocol numbers\r\nRaises\r\n    *ValueError* if IP protocol numbers are outside valid range 0...255\r\n\r\nsip()\r\n.....\r\n**sip(items, verbose, all)**\r\nSoring string IP protocol numbers and removing duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of IP protocol numbers, can be unsorted and with duplicates. \"ip\" - mean all numbers in range 0...255.\r\nverbose         *bool*                      True - all protocols in verbose mode: [0, 1, ..., 255], False - all protocols in brief mode: [-1], to save RAM (default)\r\nstrict          *bool*                      True - Raises ValueError, if the protocol is unknown (default), False - Skips unknown protocols\r\nall             *bool*                      True - Return all IP protocol numbers: \"0-255\"\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *str* of unique sorted IP protocol numbers\r\nRaises\r\n    *ValueError* if IP protocol numbers are outside valid range 0...255\r\n\r\n\r\nip_pairs()\r\n..........\r\n**ip_pairs(items, strict)**\r\nSplits items to IP protocol Number, Name and undefined-invalid protocols\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of IP protocol names and numbers, can be unsorted and with duplicates\r\nverbose         *bool*                      True - all protocols in verbose mode: [0, 1, ..., 255], False - all protocols in brief mode: [-1], to save RAM (default)\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *List[Tuple[int, str]]* Pairs of IP protocol number and name,\r\n     *List[str]* Undefined protocol names and invalid numbers\r\n\r\n\r\n**Examples**\r\n\r\n`./examples/ip.py`_\r\n\r\n\r\nObjects\r\n-------\r\n\r\n\r\nRange()\r\n.......\r\n**Range(items, splitter, range_splitter, strict)**\r\nAn object that represents ports range as *str* and as *List[int]*\r\nObject implements most of the `set <https://www.w3schools.com/python/python_ref_set.asp>`_ and\r\n`list <https://www.w3schools.com/python/python_ref_list.asp>`_ methods that handle the Range.numbers attribute.\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str*, *List[int]*          Range of numbers. Numbers can be unsorted and duplicated.\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\nstrict          *bool*                      True - Raise ValueError, if in items is invalid item. False - Make Range without invalid items. By default True.\r\n=============== =========================== ============================================================================\r\n\r\nAttributes demonstration\r\n\r\n\r\nRange operators\r\n:::::::::::::::\r\n\r\n**Range** object implements:\r\n\r\n- Arithmetic operators: ``+``, ``-``\r\n- Reference to numbers in range by index\r\n\r\n=============================== =========================== ============================================================\r\nOperator                        Return                      Description\r\n=============================== =========================== ============================================================\r\nRange(\"1,4\") + Range(\"3,5\")     Range(\"1,3-5\")              Add two objects\r\nRange(\"1-5\") - Range(\"2\")       Range(\"1,3-5\")              Subtract two objects\r\nRange(\"1,3-5\")[1]               3                           Get number by index\r\nRange(\"1,3-5\")[1:3]             [3, 4]                      Get numbers by slice\r\n=============================== =========================== ============================================================\r\n\r\n\r\nRange methods\r\n:::::::::::::\r\n\r\n**Range** object implements most of `set <https://www.w3schools.com/python/python_ref_set.asp>`_\r\nand `list <https://www.w3schools.com/python/python_ref_list.asp>`_ methods.\r\n\r\n=================================== ====================================================================================\r\nMethod                              Description\r\n=================================== ====================================================================================\r\nadd(other)                          Adds other *Range* object to self\r\nappend(number)                      Appends number to self\r\nclear()                             Removes all numbers from self\r\ncopy()                              Returns a copy of self *Range* object\r\ndifference(other)                   Returns the *Range* object of the difference between self and other *Range*\r\ndifference_update(other)            Removes other *Range* from self\r\ndiscard(number)                     Removes the specified number from self *Range*\r\nextend(numbers)                     Adds *List[int]* numbers to self\r\nindex(number)                       Returns index of number, raises ValueError if the number is not present in range\r\nintersection(other)                 Returns *Range* which is the intersection of self and other *Range*\r\nintersection_update(other)          Removes numbers of other *Range* in self, that are not present in other\r\nisdisjoint(other)                   Returns whether self numbers and other *Range* numbers have intersection or not\r\nissubset(other)                     Returns whether other *Range* numbers contains self numbers or not\r\nissuperset(other)                   Returns whether self *Range* numbers contains other *Range* numbers set or not\r\npop()                               Removes and returns last number in *Range*, raises IndexError if list is empty or index is out of range\r\nremove(number)                      Removes the specified number from self *Range*, raises ValueError if the numbers is not present\r\nsymmetric_difference(other)         Returns *Range* object with the symmetric differences of self and other *Range*\r\nsymmetric_difference_update(other)  Inserts the symmetric differences from self *Range* and other *Range*\r\nupdate(other)                       Returns *Range* of the union of self *Range* and other *Range*\r\n=================================== ====================================================================================\r\n\r\n\r\n**Examples**\r\n\r\n- Attributes demonstration\r\n- Sorts numbers and removes duplicates\r\n- Range with custom splitters\r\n\r\n`./examples/range.py`_\r\n\r\n\r\n\r\nNumbers\r\n-------\r\n\r\nparse_range()\r\n.............\r\n**parse_range(line, splitter, range_splitter)**\r\nParses range from line. Removes white spaces considering splitters.\r\nSort numbers and removes duplicates.\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nline            *str*                       Range of numbers, can be unsorted and with duplicates\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    Range *object*\r\n\r\n\r\ninumbers()\r\n..........\r\n**inumbers(items, splitter, range_splitter)**\r\nSort integer numbers and removes duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of numbers, can be unsorted and with duplicates\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *List[int]* of unique sorted numbers\r\n\r\n\r\nsnumbers()\r\n..........\r\n**snumbers(items, splitter, range_splitter)**\r\nSort string numbers and removes duplicates\r\n\r\n=============== =========================== ============================================================================\r\nParameter       Type                        Description\r\n=============== =========================== ============================================================================\r\nitems           *str, List[int], List[str]* Range of numbers, can be unsorted and with duplicates\r\nsplitter        *str*                       Separator character between items, by default \",\"\r\nrange_splitter  *str*                       Separator between min and max numbers in range, by default \"-\"\r\n=============== =========================== ============================================================================\r\n\r\nReturn\r\n    *str* of unique sorted numbers\r\n\r\n\r\n**Examples**\r\n\r\n- Sorts numbers and removes duplicates\r\n- Range with custom splitter and range_splitter\r\n- Converts unsorted range to sorted *List[int]* without duplicates\r\n- Converts unsorted range to *List[int]* with custom splitters\r\n- Converts unsorted range to sorted *str* without duplicates\r\n- Converts unsorted range to *str* with custom splitters\r\n\r\n`./examples/numbers.py`_\r\n\r\n\r\nInterfaces\r\n----------\r\n\r\n\r\nintfrange()\r\n...........\r\n**intfrange(items, fmt)**\r\nConvert interfaces names to shorted range notation\r\n\r\n=========== ============ ===========================================================================\r\nParameter   Type         Description\r\n=========== ============ ===========================================================================\r\nitems       *List[str]*  List of interfaces\r\nfmt         *str*        Format option: \"long\"  - Long names: [\"interface Ethernet1/1-3\"], \"short\" - Short names: [\"Eth1/1/1-3\"]\r\n=========== ============ ===========================================================================\r\n\r\nReturn\r\n    *List[str]* Interface ranges\r\n\r\n\r\nIntf()\r\n......\r\n**Intf(line, splitter)**\r\nAn object of interface name, that can contain up to 4 indexes.\r\nSorts the interfaces by indexes (not by alphabetic).\r\n\r\n=============== ======= ============================================================================\r\nParameter       Type    Description\r\n=============== ======= ============================================================================\r\nline            *str*   Interface name that can contain up to 4 indexes\r\nsplitter        *str*   Separator characters between indexes. By default \",./:\"\r\n=============== ======= ============================================================================\r\n\r\n\r\nAttributes\r\n::::::::::\r\n\r\n=============== ============ =======================================================================\r\nAttributes      Type         Description\r\n=============== ============ =======================================================================\r\ndelimiters                   Interface all delimiters\r\nid0             str          Interface name. Line without IDs\r\nid1             int          Interface 1st ID\r\nid2             int          Interface 2nd ID\r\nid3             int          Interface 3rd ID\r\nid4             int          Interface 4th ID\r\nids                          Interface all IDs\r\nline            str          Interface line\r\nname            str          Interface name with IDs\r\nname_short      str          Interface short name with IDs\r\n=============== ============ =======================================================================\r\n\r\n\r\nlast_idx()\r\n..........\r\n**last_idx()**\r\nIndex of last ID in interface line\r\n\r\n\r\nall_names()\r\n...........\r\n**all_names()**\r\nAll variants of names: long, short, upper-case, lover-case\r\n\r\n\r\npart()\r\n......\r\n**part(idx)**\r\nInterface part before interested ID\r\n\r\n\r\n**Examples**\r\n\r\n- Attributes demonstration\r\n- Interface with custom splitter between indexes. Splitter is ignored when comparing\r\n- Sorting by indexes\r\n- Grouping interfaces by 3rd index\r\n\r\n`./examples/intfs.py`_\r\n\r\n\r\n\r\n.. _`./examples/tcp_udp.py` : ./examples/tcp_udp.py\r\n.. _`./examples/vlan.py` : ./examples/vlan.py\r\n.. _`./examples/ip.py` : ./examples/ip.py\r\n.. _`./examples/range.py` : ./examples/range.py\r\n.. _`./examples/numbers.py` : ./examples/numbers.py\r\n.. _`./examples/intfs.py` : ./examples/intfs.py\r\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "networking,port,range,tcp,udp,vlan,ip,interface",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netports",
    "package_url": "https://pypi.org/project/netports/",
    "platform": null,
    "project_url": "https://pypi.org/project/netports/",
    "project_urls": {
      "Bug Tracker": "https://github.com/vladimirs-git/netports/issues",
      "Download URL": "https://github.com/vladimirs-git/netports/archive/refs/tags/0.7.3.tar.gz",
      "Homepage": "https://github.com/vladimirs-git/netports",
      "Repository": "https://github.com/vladimirs-git/netports"
    },
    "release_url": "https://pypi.org/project/netports/0.7.3/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python tools for managing ranges of VLANs, TCP/UDP ports, IP protocols, Interfaces",
    "version": "0.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16543301,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14a1bfc25c14aa2fe6e4345daf3ffc9a6423bb2deddced0105d7ef6cffc0df45",
          "md5": "8a419a1fcbd0666006706cd2f043adee",
          "sha256": "26c2b183e7fb4cd90e02a98c71f49bfad4ceb89c6874531a12d69689bb937214"
        },
        "downloads": -1,
        "filename": "netports-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a419a1fcbd0666006706cd2f043adee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24945,
        "upload_time": "2022-06-22T04:31:29",
        "upload_time_iso_8601": "2022-06-22T04:31:29.241435Z",
        "url": "https://files.pythonhosted.org/packages/14/a1/bfc25c14aa2fe6e4345daf3ffc9a6423bb2deddced0105d7ef6cffc0df45/netports-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b262fbe94c0caa2c9cb3bf8773a2e4293cd26c855caaa28f6f00ee017b90aeb9",
          "md5": "1907e4a9e5f5e595eac4ab338ed904d6",
          "sha256": "8ee6d8321686ddfb564cbc7eeaaefdd1dda4bdb3e889059d2cf0ee547af71e89"
        },
        "downloads": -1,
        "filename": "netports-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1907e4a9e5f5e595eac4ab338ed904d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24732,
        "upload_time": "2022-07-30T15:36:16",
        "upload_time_iso_8601": "2022-07-30T15:36:16.239835Z",
        "url": "https://files.pythonhosted.org/packages/b2/62/fbe94c0caa2c9cb3bf8773a2e4293cd26c855caaa28f6f00ee017b90aeb9/netports-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61794dc8882bfae6df9e920eb48e4e37d329c67515b95abe8de76353ca60aa37",
          "md5": "8d849e574b53da073940d6c023cfe731",
          "sha256": "6d626aab37e1acc5446b748d54cd879c7be95db7299c9b76d07a6fabba619f14"
        },
        "downloads": -1,
        "filename": "netports-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d849e574b53da073940d6c023cfe731",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24851,
        "upload_time": "2022-11-01T17:54:36",
        "upload_time_iso_8601": "2022-11-01T17:54:36.875622Z",
        "url": "https://files.pythonhosted.org/packages/61/79/4dc8882bfae6df9e920eb48e4e37d329c67515b95abe8de76353ca60aa37/netports-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aae3b3328c46c4e63c101a4109b80910a5887ec3dd43c63775e6826f28624b40",
          "md5": "71884088f998951509c5deb1dc1ea19b",
          "sha256": "633f8cbe585af0aa0a0e5a6ad5dfeb3fb1acbeb75050e593693518b705a4b773"
        },
        "downloads": -1,
        "filename": "netports-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71884088f998951509c5deb1dc1ea19b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 24868,
        "upload_time": "2022-11-14T09:52:38",
        "upload_time_iso_8601": "2022-11-14T09:52:38.404195Z",
        "url": "https://files.pythonhosted.org/packages/aa/e3/b3328c46c4e63c101a4109b80910a5887ec3dd43c63775e6826f28624b40/netports-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27474cda7749cde07348c6fce20f4761e54f7cef7c9c5a48f750a0b1a53b5df2",
          "md5": "ed49407277777d4f6e1bd1ae63d3a114",
          "sha256": "a1f364586e7b688894dfd6f806675cf963f626a2222f100d6b6479662d78f6e3"
        },
        "downloads": -1,
        "filename": "netports-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed49407277777d4f6e1bd1ae63d3a114",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25327,
        "upload_time": "2022-12-06T05:44:59",
        "upload_time_iso_8601": "2022-12-06T05:44:59.204762Z",
        "url": "https://files.pythonhosted.org/packages/27/47/4cda7749cde07348c6fce20f4761e54f7cef7c9c5a48f750a0b1a53b5df2/netports-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83eb00cf580cceb53b1fe834e35768226df0a742626b120dd2ff72742664deec",
          "md5": "d76900ec4c339b4a26da44bafcc75f00",
          "sha256": "bea186581d1f3342dd96fda798f4e56ed033148b8ca69372cb7dda70c4f6c662"
        },
        "downloads": -1,
        "filename": "netports-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d76900ec4c339b4a26da44bafcc75f00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25339,
        "upload_time": "2022-12-22T09:27:54",
        "upload_time_iso_8601": "2022-12-22T09:27:54.385938Z",
        "url": "https://files.pythonhosted.org/packages/83/eb/00cf580cceb53b1fe834e35768226df0a742626b120dd2ff72742664deec/netports-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc7857469feec9f65682a5ef32b75698de66170f0abdee1fba6f28725e506f1c",
          "md5": "d59e77df824b9bad4ccf2fb980959172",
          "sha256": "2a9c9372eef7b9434a2ca7fd0efec0069653f0cab01baf22ac73d7b469b30d7a"
        },
        "downloads": -1,
        "filename": "netports-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d59e77df824b9bad4ccf2fb980959172",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 25444,
        "upload_time": "2023-01-24T08:12:48",
        "upload_time_iso_8601": "2023-01-24T08:12:48.878095Z",
        "url": "https://files.pythonhosted.org/packages/fc/78/57469feec9f65682a5ef32b75698de66170f0abdee1fba6f28725e506f1c/netports-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc7857469feec9f65682a5ef32b75698de66170f0abdee1fba6f28725e506f1c",
        "md5": "d59e77df824b9bad4ccf2fb980959172",
        "sha256": "2a9c9372eef7b9434a2ca7fd0efec0069653f0cab01baf22ac73d7b469b30d7a"
      },
      "downloads": -1,
      "filename": "netports-0.7.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d59e77df824b9bad4ccf2fb980959172",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 25444,
      "upload_time": "2023-01-24T08:12:48",
      "upload_time_iso_8601": "2023-01-24T08:12:48.878095Z",
      "url": "https://files.pythonhosted.org/packages/fc/78/57469feec9f65682a5ef32b75698de66170f0abdee1fba6f28725e506f1c/netports-0.7.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}