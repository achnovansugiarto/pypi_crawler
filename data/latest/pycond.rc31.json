{
  "info": {
    "author": "gk",
    "author_email": "gk@axiros.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: Text Editors :: Text Processing"
    ],
    "description": "---\n\nauthor: gk\nversion: 20230212\n\n---\n\n\n# pycond: Lightweight Declarative Condition Expressions\n\n[![Build Status](https://travis-ci.org/axiros/pycond.svg?branch=master)](https://travis-ci.org/axiros/pycond) [![codecov](https://codecov.io/gh/axiros/pycond/branch/master/graph/badge.svg)](https://codecov.io/gh/axiros/pycond)[![PyPI    version][pypisvg]][pypi] [![][blacksvg]][black]\n\n[blacksvg]: https://img.shields.io/badge/code%20style-black-000000.svg\n[black]: https://github.com/ambv/black\n[pypisvg]: https://img.shields.io/pypi/v/pycond.svg\n[pypi]: https://badge.fury.io/py/pycond\n\n<!-- badges: http://thomas-cokelaer.info/blog/2014/08/1013/ -->\n\n\n<!-- TOC -->\n\n# Table Of Contents\n\n- <a name=\"toc1\"></a>[What](#what)\n- <a name=\"toc2\"></a>[Why](#why)\n    - <a name=\"toc3\"></a>[Alternatives](#alternatives)\n- <a name=\"toc4\"></a>[Mechanics](#mechanics)\n    - <a name=\"toc5\"></a>[Parsing](#parsing)\n    - <a name=\"toc6\"></a>[Building](#building)\n    - <a name=\"toc7\"></a>[Structured Conditions](#structured-conditions)\n    - <a name=\"toc8\"></a>[Evaluation](#evaluation)\n    - <a name=\"toc9\"></a>[Default Lookup](#default-lookup)\n    - <a name=\"toc10\"></a>[Passing State](#passing-state)\n    - <a name=\"toc11\"></a>[Deep Lookup / Nested State / Lists](#deep-lookup-nested-state-lists)\n        - <a name=\"toc12\"></a>[Lookup Performance: Prebuilt Deep Getters](#lookup-performance-prebuilt-deep-getters)\n        - <a name=\"toc13\"></a>[Best Practices](#best-practices)\n    - <a name=\"toc14\"></a>[Prefixed Data](#prefixed-data)\n    - <a name=\"toc15\"></a>[Attributes Access](#attributes-access)\n    - <a name=\"toc16\"></a>[Custom Lookup And Value Passing](#custom-lookup-and-value-passing)\n    - <a name=\"toc17\"></a>[Lazy Evaluation](#lazy-evaluation)\n    - <a name=\"toc18\"></a>[Condition Operators (Comparators)](#condition-operators-comparators)\n        - <a name=\"toc19\"></a>[Using Symbolic Operators](#using-symbolic-operators)\n        - <a name=\"toc20\"></a>[Extending Condition Operators](#extending-condition-operators)\n        - <a name=\"toc21\"></a>[Negation `not`](#negation-not)\n        - <a name=\"toc22\"></a>[Reversal `rev`](#reversal-rev)\n        - <a name=\"toc23\"></a>[Wrapping Condition Operators](#wrapping-condition-operators)\n            - <a name=\"toc24\"></a>[Global Wrapping](#global-wrapping)\n        - <a name=\"toc25\"></a>[Condition Local Wrapping](#condition-local-wrapping)\n        - <a name=\"toc26\"></a>[Combining Operations](#combining-operations)\n    - <a name=\"toc27\"></a>[Details](#details)\n        - <a name=\"toc28\"></a>[Debugging Lookups](#debugging-lookups)\n        - <a name=\"toc29\"></a>[Enabling/Disabling of Branches](#enabling-disabling-of-branches)\n        - <a name=\"toc30\"></a>[Building Conditions From Text](#building-conditions-from-text)\n            - <a name=\"toc31\"></a>[Grammar](#grammar)\n            - <a name=\"toc32\"></a>[Atomic Conditions](#atomic-conditions)\n            - <a name=\"toc33\"></a>[Nesting](#nesting)\n        - <a name=\"toc34\"></a>[Tokenizing Details](#tokenizing-details)\n            - <a name=\"toc35\"></a>[Functioning](#functioning)\n            - <a name=\"toc36\"></a>[Separator `sep`](#separator-sep)\n            - <a name=\"toc37\"></a>[Apostrophes](#apostrophes)\n            - <a name=\"toc38\"></a>[Escaping](#escaping)\n        - <a name=\"toc39\"></a>[Building](#building)\n            - <a name=\"toc40\"></a>[Autoconv: Casting of values into python simple types](#autoconv-casting-of-values-into-python-simple-types)\n    - <a name=\"toc41\"></a>[Context On Demand](#context-on-demand)\n    - <a name=\"toc42\"></a>[Lookup Providers](#lookup-providers)\n        - <a name=\"toc43\"></a>[Accepted Signatures](#accepted-signatures)\n        - <a name=\"toc44\"></a>[Parametrized Lookup Functions](#parametrized-lookup-functions)\n        - <a name=\"toc45\"></a>[Namespace](#namespace)\n    - <a name=\"toc46\"></a>[Caching](#caching)\n    - <a name=\"toc47\"></a>[Extensions](#extensions)\n    - <a name=\"toc48\"></a>[Named Conditions: Qualification](#named-conditions-qualification)\n    - <a name=\"toc49\"></a>[Options](#options)\n    - <a name=\"toc50\"></a>[Partial Evaluation](#partial-evaluation)\n    - <a name=\"toc51\"></a>[Streaming Data](#streaming-data)\n        - <a name=\"toc52\"></a>[Filtering](#filtering)\n        - <a name=\"toc53\"></a>[Streaming Classification](#streaming-classification)\n        - <a name=\"toc54\"></a>[Selective Classification](#selective-classification)\n    - <a name=\"toc55\"></a>[Treating of Booleans (Conditions, Not Names)](#treating-of-booleans-conditions-not-names)\n    - <a name=\"toc56\"></a>[Asyncronous Operations](#asyncronous-operations)\n        - <a name=\"toc57\"></a>[Asyncronous Filter](#asyncronous-filter)\n\n<!-- TOC -->\n\n\n# <a href=\"#toc1\">What</a>\n\nYou have a bunch of data, possibly streaming...\n\n```csv\nid,first_name,last_name,email,gender,ip_address\n1,Rufe,Morstatt,rmorstatt0@newsvine.de,Male,216.70.69.120\n2,Kaela,Scott,scott@opera.com,Female,73.248.145.44,2\n(...)\n```\n\n... and you need to filter. For now lets say we have them already as list of dicts.\n\nYou can do it imperatively:\n\n```python\nfoo_users = [\n    u\n    for u in users\n    if (u['gender'] == 'Male' or u['last_name'] == 'Scott') and '@' in u['email']\n]\n```\n\nor you have this module assemble a condition function from a declaration like:\n\n```python\nfrom pycond import make_filter\ncond = 'email contains .de and gender eq Male or last_name eq Scott'\nis_foo = make_filter(cond) # the built filter function is first\n```\n\nand then apply as often as you need, against varying state / facts / models (...):\n\n```\nfoo_users = filter(is_foo, users)\n```\n\nwith roughly the same performance (factor 2-3) than the handcrafted python.\n\n> In real life performance is often **better** then using imperative code, due to\n`pycond's` [lazy evaluation](#context-on-demand-and-lazy-evaluation) feature. \n\n# <a href=\"#toc2\">Why</a>\n\nWhen the developer can decide upon the filters to apply on data he'll certainly\nuse Python's excellent expressive possibilities directly, e.g. as shown above\nthrough list comprehensions.   \nBut what if the filtering conditions are based on decisions outside of the program's\ncontrol? I.e. from an end user, hitting the program via the network, in a somehow serialized form, which is rarely directly evaluatable Python.\n\nThis is the main use case for this module.  \n\n## <a href=\"#toc3\">Alternatives</a>\n\nBut why yet another tool for such a standard job?  \n\nThere is a list of great tools and frameworks where condition parsing is a (small) part of them, e.g. [pyke](http://pyke.sourceforge.net/) or [durable](https://pypi.python.org/pypi/durable_rules) and many in the django world or from SQL statement parsers.\n\n\n`1.` I just needed a very **slim** tool for only the parsing into functions - but this pretty transparent and customizable\n\npycond allows to customize\n- the list of condition operators\n- the list of combination operators\n- the general behavior of condition operators via global or condition local wrappers\n- their names\n- the tokenizer\n- the value lookup function\n\nand ships as zero dependency single module.\n\nAll evaluation is done via [partials](https://stackoverflow.com/a/3252425/4583360) and not lambdas, i.e. operations can be introspected and debugged very simply, through breakpoints or custom logging operator or lookup wrappers.\n\n`2.` Simplicity of the grammar: Easy to type directly, readable by non\nprogrammers but also synthesisable from structured data, e.g. from a web framework.\n\n\n`3.` Performance: Good enough to have \"pyconditions\" used within [stream filters](https://github.com/ReactiveX/RxPY).\nWith the current feature set we are sometimes a factor 2-3 worse but (due to lazy eval) often better,\ncompared with handcrafted list comprehensions.\n\n\n# <a href=\"#toc4\">Mechanics</a>\n\n<!-- md_links_for: github -->\n<!-- autogen tutorial -->\n\n## <a href=\"#toc5\">Parsing</a>\n\npycond parses the condition expressions according to a set of constraints given to the parser in the `tokenizer` function.\n\nThe result of the tokenizer is given to the builder.\n\n\n\n```python\nimport pycond as pc\n\nexpr = '[a eq b and [c lt 42 or foo eq bar]]'\ncond = pc.to_struct(pc.tokenize(expr, sep=' ', brkts='[]'))\nprint('filter:', cond)\n# test:\ndata = [\n    {'a': 'b', 'c': 1, 'foo': 42},\n    {'a': 'not b', 'c': 1},\n]\nfiltered = list(filter(pc.make_filter(expr), data))\nprint('matching:', filtered)\nreturn cond, len(filtered)\n```\nOutput:\n\n```\nfilter: [['a', 'eq', 'b', 'and', ['c', 'lt', '42', 'or', 'foo', 'eq', 'bar']]]\nmatching: [{'a': 'b', 'c': 1, 'foo': 42}]\n```\n\n\n## <a href=\"#toc6\">Building</a>\n\nAfter parsing, the builder is assembling a nested set of operator functions,\ncombined via combining operators. The functions are partials, i.e. not yet\nevaluated - but information about the necessary keys is already available:\n\n\n\n```python\nf, meta = pc.parse_cond('foo eq bar')\nassert meta['keys'] == ['foo']\nassert f(state={'foo': 'bar'}) == True\n```\n\n\n\nNote: The `make_filter` function is actually a convencience function for\n`parse_cond`, ignoring that meta information and calling with\n`state=<filter val>`\n\n\n## <a href=\"#toc7\">Structured Conditions</a>\n\nOther processes may deliver condition structures via serializable formats (e.g.\njson). If you pass such already tokenized constructs to the `pycond` function,\nthen the tokenizer is bypassed:\n\n\n\n```python\ncond = [['a', 'eq', 'b'], 'or', ['c', 'in', ['foo', 'bar']]]\nassert pc.pycond(cond)(state={'a': 'b'}) == True\n# json support is built in:\ncond_as_json = json.dumps(cond)\nassert pc.pycond(cond_as_json)(state={'a': 'b'}) == True\n```\n\n\n\n## <a href=\"#toc8\">Evaluation</a>\n\nThe result of the builder is a 'pycondition', i.e. a function which can be run many times against varying state of the system.\nHow state is evaluated is customizable at build and run time.\n\n## <a href=\"#toc9\">Default Lookup</a>\n\n\"Lookup\" denotes the process of deriving the actual values to evaluate, from a given state. Can be simple gets, getattrs, walks into the structure - or arbitrary, via custom lookup functions.\n\nThe default is to *get* lookup keys within expressions from an initially empty `State` dict within the module. This is *not* thread safe, i.e. not to be used in async or non cooperative multitasking environments.\n\n\n\n```python\nf = pc.pycond('foo eq bar')\nassert f() == False\npc.State['foo'] = 'bar'  # not thread safe!\nassert f() == True\n```\n\n\n(`pycond` is a shortcut for `parse_cond`, when meta infos are not required).\n\n## <a href=\"#toc10\">Passing State</a>\n\nUsing a state argument at evaluation *is* thread safe:  \n\n\n```python\nassert pc.pycond('a gt 2')(state={'a': 42}) == True\nassert pc.pycond('a gt 2')(state={'a': -2}) == False\n```\n\n## <a href=\"#toc11\">Deep Lookup / Nested State / Lists</a>\n\nYou may supply a path seperator for diving into nested structures like so:  \n\n\n```python\nm = {'a': {'b': [{'c': 1}]}}\nassert pc.pycond('a.b.0.c', deep='.')(state=m) == True\nassert pc.pycond('a.b.1.c', deep='.')(state=m) == False\nassert pc.pycond('a.b.0.c eq 1', deep='.')(state=m) == True\n# convencience argument for string conditions:\nassert pc.pycond('deep: a.b.0.c')(state=m) == True\n\n# This is how you express deep access via structured conditions:\nassert pc.pycond([('a', 'b', 0, 'c'), 'eq', 1])(state=m) == True\n\n# Since tuples are not transferrable in json, we also allow deep paths as list:\n# We apply heuristics to exclude expressions or conditions:\nc = [[['a', 'b', 0, 'c'], 'eq', 1], 'and', 'a']\nf, nfos = pc.parse_cond(c)\n# sorting order for keys: tuples at end, sorted by len, rest default py sorted:\nassert f(state=m) == True and nfos['keys'] == ['a', ('a', 'b', 0, 'c')]\n```\n\n\n- The structure may also contain objects, then we use getattribute to get to the next value.\n\n- `deep=\".\"` is actually just convience notation for supplying the following \"lookup function\" (see below):\n\n\n\n```python\nm = {'a': {'b': [{'c': 1}]}}\nassert pc.pycond('a.b.0.c', lookup=pc.state_get_deep)(state=m) == True\n```\n\n\n### <a href=\"#toc12\">Lookup Performance: Prebuilt Deep Getters</a>\n\nThe value lookup within nested structures can be stored into item and attribute getters (or , alternatively, an evaluated synthesized lookup function), built, when the first item has a matching structure.\n\n- Upside: [Performance](./test/test_getter_perf.py) is a few times better compared to when the structure of items is explored each time, as with the 'deep' parameter.\n- Downside: The lookup remains as built for the first structurely matching item. Schematic changes like from a key within a dict to an attribute will not except but deliver always False for the\n  actual condition value matching.\n\n- `pycond.Getters.state_get_deep2`: A list of item and attribute getters is built at first successfull lookup evaluation.\n- `pycond.Getters.state_get_evl`: An expression like \"lambda state=state['a'].b[0]['c']\" is built and evaluated, then applied to the items. \n   - Fastest way to get to the values at evaluation time.   \n   - Security: Round brackets within key names are forbidden and deliver always false - but an eval is an eval i.e. potentially evil.\n\nThese two additional \"deep\" lookup functions are conveniently made accessible by supplying a `deep2` or `deep3` argument:\n\n\n\n```python\nm = {'a': {'b': [{'c': 1}]}}\n# 3 times faster than deep. Safe.\nassert pc.pycond('a.b.0.c', deep2='.')(state=m) == True\n# 4 times faster than deep. Eval involved.\nassert pc.pycond('a.b.0.c', deep3='.')(state=m) == True\n```\n\nThe evaluation results for the keys are cached. The cache is cleared after 1Mio entries but can be cleared manually via `pc.clear_caches()` any time before that.\n\n### <a href=\"#toc13\">Best Practices</a>\n\n- Lookup keys change all the time, not many items checked for specific key: Use `deep`\n- Many items to be checked with same keys, input from untrusted users: Use `deep2`\n- Many items to be checked with same keys, input from trusted users: Use `deep3`\n\n\n\n## <a href=\"#toc14\">Prefixed Data</a>\n\nWhen data is passed through processing pipelines, it often is passed with headers. So it may be useful to pass a global prefix to access the payload like so:\n\n\n\n```python\nm = {'payload': {'b': [{'c': 1}], 'id': 123}}\nassert pc.pycond('b.0.c', deep='.', prefix='payload')(state=m) == True\n```\n\n## <a href=\"#toc15\">Attributes Access</a>\n\nSince version 20210221 we try attributes when objects are not dicts:\n\n\n\n```python\nclass MyObj:\n    val = {'a': 'b'}\n\nm = {'payload': {'obj': MyObj()}}\ncond = [['obj.val.a', 'eq', 'b']]\nassert pc.pycond(cond, deep='.', prefix='payload')(state=m) == True\n```\n\n\n## <a href=\"#toc16\">Custom Lookup And Value Passing</a>\n\nYou can supply your own function for value acquisition.\n\n- Signature: See example.\n- Returns: The value for the key from the current state plus the\n  compare value for the operator function.  \n\n\n```python\n# must return a (key, value) tuple:\nmodel = {'eve': {'last_host': 'somehost'}}\n\ndef my_lu(k, v, req, user, model=model):\n    print('user check. locals:', dict(locals()))\n    return (model.get(user) or {}).get(k), req[v]\n\nf = pc.pycond('last_host eq host', lookup=my_lu)\n\nreq = {'host': 'somehost'}\nassert f(req=req, user='joe') == False\nassert f(req=req, user='eve') == True\n```\nOutput:\n\n```\nuser check. locals: {'k': 'last_host', 'v': 'host', 'req': {'host': 'somehost'}, 'user': 'joe', 'model': {'eve': {'last_host': 'somehost'}}}\nuser check. locals: {'k': 'last_host', 'v': 'host', 'req': {'host': 'somehost'}, 'user': 'eve', 'model': {'eve': {'last_host': 'somehost'}}}\n```\n\n> as you can see in the example, the state parameter is just a convention\nfor `pyconds'` [title: default lookup function, fmatch:pycond.py, lmatch:def state_get] < SRC > .\n\n## <a href=\"#toc17\">Lazy Evaluation</a>\n\nThis is avoiding unnecessary calculations in many cases:\n\nWhen an evaluation branch contains an \"and\" or \"and_not\" combinator, then\nat runtime we evaluate the first expression - and stop if it is already\nFalse.\nSame when first expression is True, followed by \"or\" or \"or_not\".\n\nThat way expensive deep branch evaluations are omitted or, when\nthe lookup is done lazy, the values won't be even fetched:\n\n\n\n```python\nevaluated = []\n\ndef myget(key, val, cfg, state=None, **kw):\n    evaluated.append(key)\n    return pc.state_get(key, val, cfg, state, **kw)\n\nf = pc.pycond('[a eq b] or foo eq bar and baz eq bar', lookup=myget)\nassert f(state={'foo': 42}) == False\n# the value for \"baz\" is not even fetched and the whole (possibly\n# deep) branch after the last and is ignored:\nassert evaluated == ['a', 'foo']\nprint(evaluated)\nevaluated.clear()\n\nf = pc.pycond('[[a eq b] or foo eq bar] and baz eq bar', lookup=myget)\nassert f(state={'a': 'b', 'baz': 'bar'}) == True\n# the value for \"baz\" is not even fetched and the whole (possibly\n# deep) branch after the last and is ignored:\nassert evaluated == ['a', 'baz']\nprint(evaluated)\n```\nOutput:\n\n```\n['a', 'foo']\n['a', 'baz']\n```\n\nRemember that all keys occurring in a condition(which may be provided by the user at runtime) are returned by the condition parser. Means that building of evaluation contexts[can be done](  # context-on-demand-and-lazy-evaluation), based on the data actually needed and not more.\n\n## <a href=\"#toc18\">Condition Operators (Comparators)</a>\n\nAll boolean[standardlib operators](https://docs.python.org/2/library/operator.html)\nare available by default:\n\n\n\n```python\nfrom pytest2md import html_table as tbl  # just a table gen.\nfrom pycond import get_ops\n\nfor k in 'nr', 'str':\n    s = 'Default supported ' + k + ' operators...(click to extend)'\n    print(tbl(get_ops()[k], [k + ' operator', 'alias'], summary=s))\n```\n\n\n<details><summary>Default supported nr operators...(click to extend)</summary>\n\n<table>\n<tr><td>nr operator</td><td>alias</td></tr>\n<tr><td>add</td><td>+</td></tr>\n<tr><td>and_</td><td>&</td></tr>\n<tr><td>eq</td><td>==</td></tr>\n<tr><td>floordiv</td><td>//</td></tr>\n<tr><td>ge</td><td>>=</td></tr>\n<tr><td>gt</td><td>></td></tr>\n<tr><td>iadd</td><td>+=</td></tr>\n<tr><td>iand</td><td>&=</td></tr>\n<tr><td>ifloordiv</td><td>//=</td></tr>\n<tr><td>ilshift</td><td><<=</td></tr>\n<tr><td>imod</td><td>%=</td></tr>\n<tr><td>imul</td><td>*=</td></tr>\n<tr><td>ior</td><td>|=</td></tr>\n<tr><td>ipow</td><td>**=</td></tr>\n<tr><td>irshift</td><td>>>=</td></tr>\n<tr><td>is_</td><td>is</td></tr>\n<tr><td>is_not</td><td>is</td></tr>\n<tr><td>isub</td><td>-=</td></tr>\n<tr><td>itruediv</td><td>/=</td></tr>\n<tr><td>ixor</td><td>^=</td></tr>\n<tr><td>le</td><td><=</td></tr>\n<tr><td>lshift</td><td><<</td></tr>\n<tr><td>lt</td><td><</td></tr>\n<tr><td>mod</td><td>%</td></tr>\n<tr><td>mul</td><td>*</td></tr>\n<tr><td>ne</td><td>!=</td></tr>\n<tr><td>or_</td><td>|</td></tr>\n<tr><td>pow</td><td>**</td></tr>\n<tr><td>rshift</td><td>>></td></tr>\n<tr><td>sub</td><td>-</td></tr>\n<tr><td>truediv</td><td>/</td></tr>\n<tr><td>xor</td><td>^</td></tr>\n<tr><td>itemgetter</td><td></td></tr>\n<tr><td>length_hint</td><td></td></tr>\n</table>\n</details>\n\n\n\n\n<details><summary>Default supported str operators...(click to extend)</summary>\n\n<table>\n<tr><td>str operator</td><td>alias</td></tr>\n<tr><td>attrgetter</td><td></td></tr>\n<tr><td>concat</td><td>+</td></tr>\n<tr><td>contains</td><td></td></tr>\n<tr><td>countOf</td><td></td></tr>\n<tr><td>iconcat</td><td>+=</td></tr>\n<tr><td>indexOf</td><td></td></tr>\n<tr><td>methodcaller</td><td></td></tr>\n</table>\n</details>\n\n\n\n\n### <a href=\"#toc19\">Using Symbolic Operators</a>\n\nBy default pycond uses text style operators.\n\n- `ops_use_symbolic` switches processwide to symbolic style only.\n- `ops_use_symbolic_and_txt` switches processwide to both notations allowed.\n\n\n\n```python\npc.ops_use_symbolic()\npc.State['foo'] = 'bar'\nassert pc.pycond('foo == bar')() == True\ntry:\n    # this raises now, text ops not known anymore:\n    pc.pycond('foo eq bar')\nexcept:\n    pc.ops_use_symbolic_and_txt(allow_single_eq=True)\n    assert pc.pycond('foo = bar')() == True\n    assert pc.pycond('foo == bar')() == True\n    assert pc.pycond('foo eq bar')() == True\n    assert pc.pycond('foo != baz')() == True\n```\n\n\n> Operator namespace(s) should be assigned at process start, they are global.\n\n### <a href=\"#toc20\">Extending Condition Operators</a>\n\n\n\n```python\npc.OPS['maybe'] = lambda a, b: int(time.time()) % 2\n# valid expression now:\nassert pc.pycond('a maybe b')() in (True, False)\n```\n\n\n### <a href=\"#toc21\">Negation `not`</a>\n\nNegates the result of the condition operator:\n\n\n\n```python\npc.State['foo'] = 'abc'\nassert pc.pycond('foo eq abc')() == True\nassert pc.pycond('foo not eq abc')() == False\n```\n\n\n### <a href=\"#toc22\">Reversal `rev`</a>\n\nReverses the arguments before calling the operator  \n\n\n```python\npc.State['foo'] = 'abc'\nassert pc.pycond('foo contains a')() == True\nassert pc.pycond('foo rev contains abc')() == True\n```\n\n\n> `rev` and `not` can be combined in any order.\n\n### <a href=\"#toc23\">Wrapping Condition Operators</a>\n\n#### <a href=\"#toc24\">Global Wrapping</a>\n\nYou may globally wrap all evaluation time condition operations through a custom function:\n\n\n\n```python\nl = []\n\ndef hk(f_op, a, b, l=l):\n    l.append((getattr(f_op, '__name__', ''), a, b))\n    return f_op(a, b)\n\npc.run_all_ops_thru(hk)  # globally wrap the operators\n\npc.State.update({'a': 1, 'b': 2, 'c': 3})\nf = pc.pycond('a gt 0 and b lt 3 and not c gt 4')\nassert l == []\nf()\nexpected_log = [('gt', 1, 0.0), ('lt', 2, 3.0), ('gt', 3, 4.0)]\nassert l == expected_log\npc.ops_use_symbolic_and_txt()\n```\n\n\nYou may compose such wrappers via repeated application of the `run_all_ops_thru` API function.\n\n### <a href=\"#toc25\">Condition Local Wrapping</a>\n\nThis is done through the `ops_thru` parameter as shown:\n\n\n\n```python\ndef myhk(f_op, a, b):\n    return True\n\npc.State['a'] = 1\nf = pc.pycond('a eq 2')\nassert f() == False\nf = pc.pycond('a eq 2', ops_thru=myhk)\nassert f() == True\n```\n\n\n> Using `ops_thru` is a good way to debug unexpected results, since you\n> can add breakpoints or loggers there.\n\n### <a href=\"#toc26\">Combining Operations</a>\n\nYou can combine single conditions with\n\n- `and`\n- `and not`\n- `or`\n- `or not`\n- `xor` by default.\n\nThe combining functions are stored in `pycond.COMB_OPS` dict and may be extended.\n\n> Do not use spaces for the names of combining operators. The user may use them but they are replaced at before tokenizing time, like `and not` -> `and_not`.\n\n## <a href=\"#toc27\">Details</a>\n\n### <a href=\"#toc28\">Debugging Lookups</a>\n\npycond provides a key getter which prints out every lookup.  \n\n\n```python\nf = pc.pycond('[[a eq b] or foo eq bar] or [baz eq bar]', lookup=pc.dbg_get)\nassert f(state={'foo': 'bar'}) == True\n```\nOutput:\n\n```\nLookup: a b -> None\nLookup: foo bar -> bar\n```\n\n### <a href=\"#toc29\">Enabling/Disabling of Branches</a>\n\nInsert booleans like shown:  \n\n\n```python\nf = pc.pycond(['foo', 'and', ['bar', 'eq', 1]])\nassert f(state={'foo': 1}) == False\nf = pc.pycond(['foo', 'and', [True, 'or', ['bar', 'eq', 1]]])\nassert f(state={'foo': 1}) == True\n```\n\n### <a href=\"#toc30\">Building Conditions From Text</a>\n\nCondition functions are created internally from structured expressions -\nbut those are[hard to type](  # lazy-dynamic-context-assembly),\ninvolving many apostropies.\n\nThe text based condition syntax is intended for situations when end users\ntype them into text boxes directly.\n\n#### <a href=\"#toc31\">Grammar</a>\n\nCombine atomic conditions with boolean operators and nesting brackets like:\n\n```\n[< atom1 > < and | or | and not|... > <atom2 > ] < and|or... > [ [ < atom3 > ....\n```\n\n#### <a href=\"#toc32\">Atomic Conditions</a>\n\n```\n[not] < lookup_key > [[rev] [not] < condition operator (co) > <value > ]\n```\n- When just `lookup_key` is given, then `co` is set to the `truthy` function:\n```python\ndef truthy(key, val=None):\n    return operatur.truth(k)\n```\n\nso such an expression is valid and True:\n\n\n\n```python\npc.State.update({'foo': 1, 'bar': 'a', 'baz': []})\nassert pc.pycond('[ foo and bar and not baz]')() == True\n```\n\n- When `not lookup_key` is given, then `co` is set to the `falsy`\n  function:\n\n\n\n```python\nm = {'x': 'y', 'falsy_val': {}}\n# normal way\nassert pc.pycond(['foo', 'eq', None])(state=m) == True\n# using \"not\" as prefix:\nassert pc.pycond('not foo')(state=m) == True\nassert pc.pycond(['not', 'foo'])(state=m) == True\nassert pc.pycond('not falsy_val')(state=m) == True\nassert pc.pycond('x and not foo')(state=m) == True\nassert pc.pycond('y and not falsy_val')(state=m) == False\n```\n\n\n#### <a href=\"#toc33\">Nesting</a>\n\nCombined conditions may be arbitrarily nested using brackets \"[\" and \"]\".\n\n> Via the `brkts` config parameter you may change those to other separators at build time.\n\n### <a href=\"#toc34\">Tokenizing Details</a>\n\n> Brackets as strings in this flat list form, e.g. `['[', 'a', 'and' 'b', ']'...]`\n\n#### <a href=\"#toc35\">Functioning</a>\n\nThe tokenizers job is to take apart expression strings for the builder.\n\n#### <a href=\"#toc36\">Separator `sep`</a>\n\nSeparates the different parts of an expression. Default is ' '.\n\n\n\n```python\npc.State['a'] = 42\nassert pc.pycond('a.eq.42', sep='.')() == True\n```\n\n> sep can be a any single character including binary.\n\nBracket characters do not need to be separated, the tokenizer will do:\n\n\n\n```python\n# equal:\nassert (\n    pc.pycond('[[a eq 42] and b]')() == pc.pycond('[ [ a eq 42 ] and b ]')()\n)\n```\n\n> The condition functions themselves do not evaluate equal - those\n> had been assembled two times.\n\n#### <a href=\"#toc37\">Apostrophes</a>\n\nBy putting strings into Apostrophes you can tell the tokenizer to not further inspect them, e.g. for the seperator:\n\n\n\n```python\npc.State['a'] = 'Hello World'\nassert pc.pycond('a eq \"Hello World\"')() == True\n```\n\n\n#### <a href=\"#toc38\">Escaping</a>\n\nTell the tokenizer to not interpret the next character:\n\n\n\n```python\npc.State['b'] = 'Hello World'\nassert pc.pycond('b eq Hello\\ World')() == True\n```\n\n\n### <a href=\"#toc39\">Building</a>\n\n#### <a href=\"#toc40\">Autoconv: Casting of values into python simple types</a>\n\nExpression string values are automatically cast into bools and numbers via the public `pycond.py_type` function.\n\nThis can be prevented by setting the `autoconv` parameter to `False` or by using Apostrophes:\n\n\n\n```python\npc.State['a'] = '42'\nassert pc.pycond('a eq 42')() == False\n# compared as string now\nassert pc.pycond('a eq \"42\"')() == True\n# compared as string now\nassert pc.pycond('a eq 42', autoconv=False)() == True\n```\n\n\nIf you do not want to provide a custom lookup function(where you can do what you want)\nbut want to have looked up keys autoconverted then use:\n\n\n\n```python\nfor id in '1', 1:\n    pc.State['id'] = id\n    assert pc.pycond('id lt 42', autoconv_lookups=True)\n```\n\n\n## <a href=\"#toc41\">Context On Demand</a>\n\nOften the conditions are in user space, applied on data streams under\nthe developer's control only at development time.\n\nThe end user might pick only a few keys from many offered within an API.\n\npycond's `ctx_builder` allows to only calculate those keys at runtime,\nthe user decided to base conditions upon:\nAt condition build time hand over a namespace for *all * functions which\nare available to build the ctx.\n\n`pycon` will return a context builder function for you, calling only those functions\nwhich the condition actually requires.\n\n\n\n```python\npc.ops_use_symbolic_and_txt(allow_single_eq=True)\n\n# Condition the end user configured, e.g. at program run time:\ncond = [\n    ['group_type', 'in', ['lab', 'first1k', 'friendly', 'auto']],\n    'and',\n    [\n        [\n            [\n                [\n                    ['cur_q', '<', 0.5],\n                    'and',\n                    ['delta_q', '>=', 0.15],\n                ],\n                'and',\n                ['dt_last_enforce', '>', 28800],\n            ],\n            'and',\n            ['cur_hour', 'in', [3, 4, 5]],\n        ],\n        'or',\n        [\n            [\n                [\n                    ['cur_q', '<', 0.5],\n                    'and',\n                    ['delta_q', '>=', 0.15],\n                ],\n                'and',\n                ['dt_last_enforce', '>', 28800],\n            ],\n            'and',\n            ['clients', '=', 0],\n        ],\n    ],\n]\n\n# Getters for API keys offered to the user, involving potentially\n# expensive to fetch context delivery functions:\n# Signature must provide minimum a positional for the current\n# state:\nclass ApiCtxFuncs:\n    def expensive_but_not_needed_here(ctx):\n        raise Exception(\"Won't run with cond. from above\")\n\n    def cur_q(ctx):\n        print('Calculating cur_q')\n        return 0.1\n\n    def cur_hour(ctx):\n        print('Calculating cur_hour')\n        return 4\n\n    def dt_last_enforce(ctx):\n        print('Calculating dt_last_enforce')\n        return 10000000\n\n    def delta_q(ctx):\n        print('Calculating (expensive) delta_q')\n        time.sleep(0.1)\n        return 1\n\n    def clients(ctx):\n        print('Calculating clients')\n        return 0\n\nif sys.version_info[0] < 3:\n    # we don't think it is a good idea to make the getter API stateful ;-)\n    p2m.convert_to_staticmethods(ApiCtxFuncs)\n\nf, nfos = pc.parse_cond(cond, ctx_provider=ApiCtxFuncs)\n\n# now we create (incomplete) data..\ndata1 = {'group_type': 'xxx'}, False\ndata2 = {'group_type': 'lab'}, True\n\n# this key stores a context builder function, calculating the complete data:\nmake_ctx = nfos['complete_ctx']\n\nt0 = time.time()\nfor event, expected in data1, data2:\n    assert f(state=make_ctx(event)) == expected\n\nprint('Calc.Time (delta_q was called twice):', round(time.time() - t0, 4)),\nreturn cond, ApiCtxFuncs\n```\nOutput:\n\n```\nCalculating clients\nCalculating cur_hour\nCalculating cur_q\nCalculating (expensive) delta_q\nCalculating dt_last_enforce\nCalculating clients\nCalculating cur_hour\nCalculating cur_q\nCalculating (expensive) delta_q\nCalculating dt_last_enforce\nCalc.Time (delta_q was called twice): 0.2006\n```\n\n\n## <a href=\"#toc42\">Lookup Providers</a>\n\nContextBuilders are interesting but we can do better.\n\nWe still calculated values for keys which might(dependent on the data) be not needed in dead ends of a lazily evaluated condition.\n\nLets avoid calculating these values, remembering the [custom lookup function](#custom-lookup-and-value-passing) feature.\n\nThis is where lookup providers come in, providing namespaces for functions to be called conditionally.\n\nPycond [treats the condition keys as function names][pycond.py#614] within that namespace and calls them, when needed.\n\n### <a href=\"#toc43\">Accepted Signatures</a>\n\nLookup provider functions may have the following signatures:\n\n\n\n```python\nclass F:\n    # simple data passing\n    def f1(data):\n        \"\"\"simple return a value being compared, getting passed the state/data\"\"\"\n        return data['a']\n\n    # simple, with ctx\n    def f2(data, **kw):\n        \"\"\"\n        simple return a value being compared, getting passed the state/data\n        All context information within kw, compare value not modifiable\n        \"\"\"\n        return data['b']\n\n    # full pycond compliant signature,\n    def f3(key, val, cfg, data, **kw):\n        \"\"\"\n        full pycond signature.\n        val is the value as defined by the condition, and which you could return modified\n        kw holds the cache, cfg holds the setup\n        v has to be returned:\n        \"\"\"\n        return data['c'], 100  # not 45!\n\n    # applied al\n    def f4(*a, **kw):\n        \"\"\"\n        Full variant(always when varargs are involved)\n        \"\"\"\n        return a[3]['d'], 'foo'\n\n_ = 'and'\nf = pc.pycond(\n    [\n        [':f1', 'eq', 42],\n        _,\n        [':f2', 'eq', 43, _, ':f3', 'eq', 45],\n        _,\n        [':f4', 'eq', 'foo'],\n    ],\n    lookup_provider=F,\n)\nassert f(state={'a': 42, 'b': 43, 'c': 100, 'd': 'foo'}) == True\n```\n\n### <a href=\"#toc44\">Parametrized Lookup Functions</a>\n\nVia the 'params' parameter you may supply keyword args to lookup functions:  \n\n\n```python\nclass F:\n    def hello(k, v, cfg, data, count, **kw):\n        return data['foo'] == count, 0\n\nm = pc.pycond([':hello'], lookup_provider=F, params={'hello': {'count': 2}})(\n    state={'foo': 2}\n)\nassert m == True\n```\n\n\n### <a href=\"#toc45\">Namespace</a>\n\n- Lookup functions can be found in nested class hirarchies or dicts. Separator is colon(':')\n- As shown above, if they are flat within a toplevel class or dict you should still prefix with ':', to get build time exception(MissingLookupFunction) when not present\n- You can switch that behaviour off per condition build as config arg, as shown below\n- You can switch that behaviour off globally via `pc.prefixed_lookup_funcs=False`\n\nWarning: This is a breaking API change with pre-20200610 versions, where the prefix was not required to find functions in, back then, only flat namespaces. Use the global switch after import to get the old behaviour.\n\n\n\n```python\nclass F:\n    def a(data):\n        return data['foo']\n\n    class inner:\n        def b(data):\n            return data['bar']\n\nm = {'c': {'d': {'func': lambda data: data['baz']}}}\n\n# for the inner lookup the first prefix may be omitted:\n_ = 'and'\ncond = [\n    [':a', 'eq', 'foo1'],\n    _,\n    ['inner:b', 'eq', 'bar1'],\n    _,\n    [\n        'c:d',\n        'eq',\n        'baz1',\n    ],\n]\nc = pc.pycond(cond, lookup_provider=F, lookup_provider_dict=m)\nassert c(state={'foo': 'foo1', 'bar': 'bar1', 'baz': 'baz1'}) == True\n\n# Prefix checking on / off:\ntry:\n    pc.pycond([':xx', 'and', cond])\n    i = 9 / 0  # above will raise this:\nexcept pc.MissingLookupFunction:\n    pass\ntry:\n    pc.pycond([':xx', 'and', cond], prefixed_lookup_funcs=False)\n    i = 9 / 0  # above will raise this:\nexcept pc.MissingLookupFunction:\n    pass\ncond[0] = 'a'  # remove prefix, will still be found\nc = pc.pycond(\n    ['xx', 'or', cond],\n    lookup_provider=F,\n    lookup_provider_dict=m,\n    prefixed_lookup_funcs=False,\n)\nassert c(state={'foo': 'foo1', 'bar': 'bar1', 'baz': 'baz1'}) == True\n```\n\nYou can switch that prefix needs off - and pycond will then check the state for key presence:\n\n\n\n```python\n# we let pycond generate the lookup function (we use the simple signature type):\nf = pc.pycond(cond, lookup_provider=ApiCtxFuncs, prefixed_lookup_funcs=False)\n# Same events as above:\ndata1 = {'group_type': 'xxx'}, False\ndata2 = {'group_type': 'lab'}, True\n\nt0 = time.time()\nfor event, expected in data1, data2:\n    # we will lookup only once:\n    assert f(state=event) == expected\n\nprint(\n    'Calc.Time (delta_q was called just once):',\n    round(time.time() - t0, 4),\n)\n\n# The deep switch keeps working:\ncond2 = [cond, 'or', ['a-0-b', 'eq', 42]]\nf = pc.pycond(\n    cond2,\n    lookup_provider=ApiCtxFuncs,\n    deep='-',\n    prefixed_lookup_funcs=False,\n)\ndata2[0]['a'] = [{'b': 42}]\nprint('sample:', data2[0])\nassert f(state=data2[0]) == True\n```\nOutput:\n\n```\nCalculating cur_q\nCalculating (expensive) delta_q\nCalculating dt_last_enforce\nCalculating cur_hour\nCalc.Time (delta_q was called just once): 0.1004\nsample: {'group_type': 'lab', 'a': [{'b': 42}]}\nCalculating cur_q\nCalculating (expensive) delta_q\nCalculating dt_last_enforce\nCalculating cur_hour\n```\n\n\nThe output demonstrates that we did not even call the value provider functions for the dead branches of the condition.\n\nNOTE: Instead of providing a class tree you may also provide a dict of functions as `lookup_provider_dict` argument, see `qualify` examples below.\n\n## <a href=\"#toc46\">Caching</a>\n\nNote: Currently you cannot override these defaults. Drop an issue if you need to.\n\n- Builtin state lookups: Not cached\n- Custom `lookup` functions: Not cached(you can implement caching within those functions)\n- Lookup provider return values: Cached, i.e. called only once, per data set\n- Named condition sets(see below): Cached\n\n## <a href=\"#toc47\">Extensions</a>\n\nWe deliver a few lookup function [extensions][pycond.py#711]\n\n- for time checks\n- for os.environ checks(re-evaluated at runtime)\n\n\n\n```python\nfrom datetime import datetime as dt\nfrom os import environ as env\n\nthis_sec = dt.now().second\nthis_utc_hour = dt.utcnow().hour\nf = pc.pycond(\n    [\n        ['env:foo', 'eq', 'bar'],\n        'and',\n        # not breaking the build when the sec just jumps:\n        ['dt:second', 'in', [this_sec, this_sec + 1, 0]],\n        'and',\n        ['utc:hour', 'eq', this_utc_hour],\n    ]\n)\nenv['foo'] = 'bar'\nassert f(state={'a': 1}) == True\n```\n\n\n\n## <a href=\"#toc48\">Named Conditions: Qualification</a>\n\nInstead of just delivering booleans, pycond can be used to determine a whole set of\ninformation about data declaratively, like so:  \n\n\n```python\n# We accept different forms of delivery.\n# The first full text is restricted to simple flat dicts only:\nfor c in [\n    'one: a gt 10, two: a gt 10 or foo eq bar',\n    {'one': 'a gt 10', 'two': 'a gt 10 or foo eq bar'},\n    {\n        'one': ['a', 'gt', 10],\n        'two': ['a', 'gt', 10, 'or', 'foo', 'eq', 'bar'],\n    },\n]:\n    f = pc.qualify(c)\n    r = f({'foo': 'bar', 'a': 0})\n    assert r == {'one': False, 'two': True}\n```\n\n\nWe may refer to results of other named conditions and also can pass named condition sets as lists instead of dicts:  \n\n\n```python\ndef run(q):\n    print('Running', q)\n\n    class F:\n        def custom(data):\n            return data.get('a')\n\n    f = pc.qualify(q, lookup_provider=F)\n\n    assert f({'a': 'b'}) == {\n        'first': True,\n        'listed': [False, False],\n        'thrd': True,\n        'zero': True,\n        'last': True,\n    }\n    res = f({'c': 'foo', 'x': 1})\n    assert res == {\n        'first': False,\n        'listed': [False, True],\n        'thrd': False,\n        'zero': True,\n        'last': True,\n    }\n\nq = {\n    'thrd': ['k', 'or', ':first'],\n    'listed': [['foo'], ['c', 'eq', 'foo']],\n    'zero': [['x', 'eq', 1], 'or', ':thrd'],\n    'first': [':custom', 'eq', 'b'],\n    'last': True,  # you might want to do this to always get at least one matcher, e.g. for data streaming\n}\n# as list of conditions:\nrun(q)\n\n# as dict:\nq = dict([[k, v] for k, v in q.items()])\nrun(q)\n```\nOutput:\n\n```\nRunning {'thrd': ['k', 'or', ':first'], 'listed': [['foo'], ['c', 'eq', 'foo']], 'zero': [['x', 'eq', 1], 'or', ':thrd'], 'first': [':custom', 'eq', 'b'], 'last': True}\nRunning {'thrd': ['k', 'or', ':first'], 'listed': [['foo'], ['c', 'eq', 'foo']], 'zero': [['x', 'eq', 1], 'or', ':thrd'], 'first': [':custom', 'eq', 'b'], 'last': True}\n```\n\nWARNING: For performance reasons there is no built in circular reference check. You'll run into python's built in recursion checker!\n\n## <a href=\"#toc49\">Options</a>\n\n- into: Put the matched named conditions into the original data\n- prefix: Work from a prefix nested in the root\n- add_cached: Return also the data from function result cache\n\nHere a few variants to parametrize behaviour, by example:  \n\n\n```python\nconds = {\n    0: ['foo'],\n    1: ['bar'],\n    2: ['func'],\n    3: ['n'],\n    'n': ['bar'],\n}\n\nclass F:\n    def func(*a, **kw):\n        return True, 0\n\nq = lambda d, **kw: pc.qualify(\n    conds, lookup_provider=F, prefixed_lookup_funcs=False, **kw\n)(d)\n\nm = q({'bar': 1})\nassert m == {0: False, 1: True, 2: True, 3: True, 'n': True}\n\n# return data, with matched conds in:\nm = q({'bar': 1}, into='conds')\nassert m == {\n    'bar': 1,\n    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True},\n}\n\ndef msg():\n    return {'bar': 1, 'pl': {'a': 1}}\n\n# add_cached == True -> it's put into the cond results:\nm = q(msg(), into='conds', add_cached=True)\nassert m == {\n    'bar': 1,\n    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True, 'func': True},\n    'pl': {'a': 1},\n}\n\nm = q(msg(), into='conds', add_cached='pl')\nassert m == {\n    'bar': 1,\n    'conds': {0: False, 1: True, 2: True, 3: True, 'n': True},\n    # n had been put into the cache, was not evaled twice:\n    'pl': {'a': 1, 'func': True, 'n': True},\n}\n\nm = q({'bar': 1}, add_cached='pl')\nassert m == {0: False, 1: True, 2: True, 3: True, 'n': True, 'func': True}\n\n# prefix -> Nr 1, bar,  should NOT be True, since not in pl now:\nm = q(\n    msg(),\n    prefix='pl',\n    into='conds',\n    add_cached='pl',\n)\nassert m == {\n    'bar': 1,\n    'conds': {0: False, 1: False, 2: True, 3: False, 'n': False},\n    'pl': {'a': 1, 'func': True, 'n': False},\n}\n```\n\n\n\n## <a href=\"#toc50\">Partial Evaluation</a>\n\nIf you either supply a key called 'root' OR supply it as argument to `qualify`, pycond will only evaluate named conditions required to calculate the root key:\n\n\n\n```python\ncalled = []\n\ndef expensive_func(k, v, cfg, data, **kw):\n    called.append(data)\n    return 1, v\n\ndef xx(k, v, cfg, data, **kw):\n    called.append(data)\n    return data.get('a'), v\n\nfuncs = {'exp': {'func': expensive_func}, 'xx': {'func': xx}}\nq = {\n    'root': ['foo', 'and', ':bar'],\n    'bar': [\n        ['somecond'],\n        'or',\n        [[':exp', 'eq', 1], 'and', ':baz'],\n    ],\n    'x': [':xx'],\n    'baz': [':exp', 'lt', 10],\n}\nqualifier = pc.qualify(q, lookup_provider_dict=funcs, add_cached=True)\n\nd = {'foo': 1}\nr = qualifier(d)\n\n# root, bar, baz had been calculated, not x\nassert r == {'root': True, 'bar': True, 'baz': True, 'exp': 1}\n# expensive_func result, which was cached, is also returned.\n# expensive_func only called once allthough result evaluated for bar and baz:\nassert len(called) == 1\n\ncalled.clear()\nf = pc.qualify(q, lookup_provider_dict=funcs, root='x', add_cached=True)\nassert f({'a': 1}) == {'x': True, 'xx': 1}\nassert f({'b': 1}) == {'x': False, 'xx': None}\nassert called == [{'a': 1}, {'b': 1}]\n```\n\nThis means pycond can be used as a lightweight declarative function dispatching framework.\n\n\n## <a href=\"#toc51\">Streaming Data</a>\n\nSince version 20200601 and Python 3.x versions, pycond can deliver[ReactiveX](https://github.com/ReactiveX/RxPY) compliant stream operators.\n\nLets first set up a test data stream, by defining a function `rx_setup` like so:\n\n\n\n```python\n# simply `import rx as Rx and rx = rx.operators`:\n# import pycond as pc, like always:\nRx, rx, GS = pc.import_rx('GS')\n\ndef push_through(*test_pipe, items=4):\n    \"\"\"\n    Function which takes a set of operators and runs an 'rx.interval' stream, until count items are through\n    \"\"\"\n\n    # stream sink result holder plus a stream completer:\n    l, compl = [], rx.take(items)\n    l.clear()  # clear any previous results\n\n    def next_(x):\n        # simply remember what went through in a list:\n        l.append(x)\n\n    def err(*a):\n        # should never happen:\n        print('exception', a)\n\n    stream = Rx.interval(0.01)  # numbers, each on its own thread\n\n    # turns the ints into dicts: {'i': 1}, then {'i': 2} and so on:\n    # (we start from 1, the first 0 we filter out)\n    stream = stream.pipe(\n        rx.filter(lambda i: i > 0), rx.map(lambda i: {'i': i})\n    )\n\n    # defines the stream through the tested operators:\n    test_pipe = test_pipe + (compl,)\n    s = stream.pipe(*test_pipe)\n\n    # runs the stream:\n    d = s.subscribe(\n        on_error=err,\n        on_next=next_,\n        on_completed=lambda: l.append('completed'),\n    )\n\n    # blocks until completed:\n    while not (l and l[-1] == 'completed'):\n        time.sleep(0.001)\n    l.pop()  # removes completed indicator\n\n    return l  # returns all processed messages\n\nreturn Rx, rx, push_through\n```\n\nLets test the setup by having some messages streamed through:\n\n\n\n```python\nRx, rx, push_through = rx_setup()\n# test test setup:\nr = push_through(items=3)\nassert r == [{'i': 1}, {'i': 2}, {'i': 3}]\n```\n\n-> test setup works.\n\n### <a href=\"#toc52\">Filtering</a>\n\nThis is the most simple operation: A simple stream filter.\n\n\n\n```python\nRx, rx, push_through = rx_setup()\n\n# ask pycond for a stream filter based on a condition:\npcfilter = partial(pc.rxop, ['i', 'mod', 2])\n\nr = push_through(pcfilter())\nodds = [{'i': 1}, {'i': 3}, {'i': 5}, {'i': 7}]\nassert r == odds\n\n# try the stream filter with message headered data:\npl = 'payload'\nr = push_through(rx.map(lambda i: {pl: i}), pcfilter(prefix=pl))\nprint('Full messages passed:', r)\nr = [m[pl] for m in r]\nassert len(r) == 4\nassert r == odds\n```\nOutput:\n\n```\nFull messages passed: [{'payload': {'i': 1}}, {'payload': {'i': 3}}, {'payload': {'i': 5}}, {'payload': {'i': 7}}]\n```\n\n### <a href=\"#toc53\">Streaming Classification</a>\n\nUsing named condition dicts we can classify data, i.e. tag it, in order to process subsequently:\n\n\n\n```python\nRx, rx, push_through = rx_setup()\n\n# generate a set of classifiers:\nconds = [['i', 'mod', i] for i in range(2, 4)]\n\ndef run(offs=0):\n\n    # and get a classifying operator from pycond, adding the results in place, at key 'mod':\n    r = push_through(pc.rxop(conds, into='mod'))\n    i, j = 0 + offs, 1 + offs\n    assert r == [\n        {'i': 1, 'mod': {i: 1, j: 1}},\n        {'i': 2, 'mod': {i: 0, j: 2}},\n        {'i': 3, 'mod': {i: 1, j: 0}},\n        {'i': 4, 'mod': {i: 0, j: 1}},\n    ]\n\n# this will automatically number the classifiers, from 0:\nrun()\n\n# we can also provide the names of the classifiers by passing a dict:\n# here we pass 2 and 3 as those names:\nconds = dict([(i, ['i', 'mod', i]) for i in range(2, 4)])\nrun(2)\n```\n\nNormally the data has headers, so thats a good place to keep the classification tags.\n\n### <a href=\"#toc54\">Selective Classification</a>\n\nWe fall back to an alternative condition evaluation(which could be a function call) * only * when a previous condition evaluation returns something falsy - by providing a * root condition*.\nWhen it evaluated, possibly requiring evaluation of other conditions, we return:  \n\n\n```python\nRx, rx, push_through = rx_setup()\n\n# using the list style:\nconds = [[i, [['i', 'mod', i], 'or', ':alt']] for i in range(2, 4)]\nconds.append(['alt', ['i', 'gt', 1]])\n\n# provide the root condition. Only when it evals falsy, the named \"alt\" condiction will be evaluated:\nr = push_through(pc.rxop(conds, into='mod', root=2, add_cached=True))\n\nassert r == [\n    # evaluation of alt was not required:\n    {'i': 1, 'mod': {2: True}},\n    # evaluation of alt was required:\n    {'i': 2, 'mod': {2: True, 'alt': True}},\n    {'i': 3, 'mod': {2: True}},\n    {'i': 4, 'mod': {2: True, 'alt': True}},\n]\n```\n\n## <a href=\"#toc55\">Treating of Booleans (Conditions, Not Names)</a>\n\nFor the special case of booleans in a condition list we do not treat them as names.  \n\n\n```python\n# 2 unnamed conditions -> keys will be positional\nqs = pc.qualify([True, False])\nres = qs({'a': 1})\nassert res == {0: True, 1: False}  # and not {True: False}\n# 2 named conds\nqs = pc.qualify([[1, ['a', 'eq', 1]], [2, ['b', 'eq', 42]]])\nres = qs({'a': 1})\nassert res == {1: True, 2: False}\n```\n\n## <a href=\"#toc56\">Asyncronous Operations</a>\n\nWARNING: Early Version. Only for the gevent platform.\n\nSelective classification allows to call condition functions only when other criteria are met.\nThat makes it possible to read e.g. from a database only when data is really required - and not always, \"just in case\".\n\npycond allows to define, that blocking operations should be run * async* within the stream, possibly giving up order.\n\n### <a href=\"#toc57\">Asyncronous Filter</a>\n\nFirst a simple filter, which gives up order but does not block:\n\n\n\n```python\nRx, rx, push_through = rx_setup()\n\nclass F:\n    def check(k, v, cfg, data, t0=[], **kw):\n        # will be on different thread:\n        i, pointer = data['i'], ''\n        if not t0:\n            t0.append(now())\n        if i == 1:\n            # ints are fired at 0.01, i.e. the 1 will land 4 after 1:\n            time.sleep(0.048)\n            pointer = '   <----- not in order, blocked'\n        # demonstrate that item 1 is not blocking anything - just order is disturbed:\n        print('item %s: %.3fs %s' % (i, now() - t0[0], pointer))\n        return i % 2, v\n\n# have the operator built for us - with a single condition filter:\nrxop = pc.rxop(\n    [':check'],\n    into='mod',\n    lookup_provider=F,\n    asyn=['check'],\n)\nr = push_through(rxop, items=5)\nassert [m['i'] for m in r] == [3, 5, 1, 7, 9]\n```\nOutput:\n\n```\nitem 2: 0.011s \nitem 3: 0.022s \nitem 4: 0.034s \nitem 5: 0.045s \nitem 1: 0.049s    <----- not in order, blocked\nitem 6: 0.057s \nitem 7: 0.068s \nitem 8: 0.079s \nitem 9: 0.090s\n```\n\nFinally asyncronous classification, i.e. evaluation of multiple conditions:\n\n\n\n```python\ndef _thn(msg, data):\n    return print('thread:', cur_thread().name, msg, data)\n\n# push_through just runs a stream of {'i': <nr>} through a given operator:\nRx, rx, push_through = rx_setup()\n\n# Defining a simple 'set' of classifiers, here as list, with one single key: 42:\nconds = [\n    [\n        42,\n        [\n            ['i', 'lt', 100],\n            'and',\n            [[':odd', 'eq', 1], 'or', ['i', 'eq', 2]],\n            'and_not',\n            [':blocking', 'eq', 3],\n        ],\n    ]\n]\n\nclass F:\n    \"\"\"\n    Namespace for condition lookup functions.\n    You may also pass a dict(lookup_provider_dict)\n\n    We provide the functions for 'odd' and 'blocking'.\n    \"\"\"\n\n    def odd(k, v, cfg, data, **kw):\n        # just print the threadname.\n        # will go up, interval stream has each nr on its own thread:\n        _thn('odd', data)\n        # fullfill condition only for odd numbers\n        # -> even nrs won't even run func 'blocking':\n        return data['i'] % 2, v\n\n    def blocking(k, v, cfg, data, **kw):\n        i = data['i']\n        # will be on different thread:\n        _thn('blocking', data)\n        if i == 1:\n            # two others will \"overtake the i=1 item,\n            # since the interval stream is firing every 0.01 secs:\n            time.sleep(0.028)\n        elif i == 2:\n            # Exceptions, incl. timeouts, will simply be forwarded to cfg['err_handler']\n            # i.e. also timeout mgmt have to be done here, in the custom functions themselves.\n\n            # Rationale for not providing a timeout monitoring within pycond itself:\n            # Async ops are done with libs, which ship with their own timeout params.\n            # No need to re-invent / overlay with our own monitoring of that.\n\n            # In the err handler, then further arrangements can be done.\n            raise TimeoutError('ups')\n        elif i == 5:\n            1 / 0\n        return data['i'], v\n\nerrors = []\n\ndef handle_err(item, cfg, ctx, exc, t=errors, **kw):\n    # args are: [item, cfg]\n    if 'ups' in str(exc):\n        assert item['i'] == 2\n        assert exc.__class__ == TimeoutError\n        t.append(item)\n    else:\n        assert item['i'] == 5\n        assert exc.__class__ == ZeroDivisionError\n        t.append(item)\n\n# have the operator built for us:\nrxop = pc.rxop(\n    conds,\n    into='mod',\n    lookup_provider=F,\n    err_handler=handle_err,\n    asyn=['blocking'],\n)\nr = push_through(rxop, items=5)\nassert [m['i'] for m in r] == [3, 1, 4, 6, 7]\nassert [m['mod'][42] for m in r] == [False, True, False, False, True]\n# item 2 caused a timeout:\nassert [t['i'] for t in errors] == [2, 5]\n```\nOutput:\n\n```\nthread: Thread-55 odd {'i': 1}\nthread: Dummy-57 blocking {'i': 1}\nthread: Thread-56 odd {'i': 2}\nthread: Dummy-59 blocking {'i': 2}\nthread: Thread-58 odd {'i': 3}\nthread: Dummy-61 blocking {'i': 3}\nthread: Thread-60 odd {'i': 4}\nthread: Thread-62 odd {'i': 5}\nthread: Dummy-64 blocking {'i': 5}\nthread: Thread-63 odd {'i': 6}\nthread: Thread-65 odd {'i': 7}\nthread: Dummy-67 blocking {'i': 7}\n```\n\n\n*Auto generated by [pytest2md](https://github.com/axiros/pytest2md), running [./tests/test_tutorial.py](./tests/test_tutorial.py)\n\n<!-- autogen tutorial -->\n\n\n<!-- autogenlinks -->\n[pycond.py#614]: https://github.com/axiros/pycond/blob/54fea4c6b0cdc62bcf0b984214649344b1a77230/pycond.py#L614\n[pycond.py#711]: https://github.com/axiros/pycond/blob/54fea4c6b0cdc62bcf0b984214649344b1a77230/pycond.py#L711\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/axiros/pycond",
    "keywords": "conditions,expression,async,serialization,rxpy,reactivex",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycond",
    "package_url": "https://pypi.org/project/pycond/",
    "platform": null,
    "project_url": "https://pypi.org/project/pycond/",
    "project_urls": {
      "Homepage": "https://github.com/axiros/pycond"
    },
    "release_url": "https://pypi.org/project/pycond/20230212/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lightweight Condition Parsing and Building of Evaluation Expressions",
    "version": "20230212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16800478,
  "releases": {
    "190427": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c503ef787e006dd3d4ee739df17c38684ee4e890c7e1b655c42fa74638e445b0",
          "md5": "37d77d934b0bd334af009a6f16c74dc1",
          "sha256": "b689b5c18b33d684b207ba58c1bb4cb666fd79c613507cf2064741cb55b26c68"
        },
        "downloads": -1,
        "filename": "pycond-190427-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37d77d934b0bd334af009a6f16c74dc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15227,
        "upload_time": "2019-04-22T10:37:41",
        "upload_time_iso_8601": "2019-04-22T10:37:41.634533Z",
        "url": "https://files.pythonhosted.org/packages/c5/03/ef787e006dd3d4ee739df17c38684ee4e890c7e1b655c42fa74638e445b0/pycond-190427-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45b7f6ddc9f8f85fec2beeabc5f38f005f383e51f1f5609aacbd9b71073a704a",
          "md5": "61d36810919a9b3cb71ad145a62bd8e2",
          "sha256": "44730eea2af2246a192e16caa95aa0f5d87101adb76b5642eed790db1912763a"
        },
        "downloads": -1,
        "filename": "pycond-190427.tar.gz",
        "has_sig": false,
        "md5_digest": "61d36810919a9b3cb71ad145a62bd8e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20238,
        "upload_time": "2019-04-22T10:37:43",
        "upload_time_iso_8601": "2019-04-22T10:37:43.721152Z",
        "url": "https://files.pythonhosted.org/packages/45/b7/f6ddc9f8f85fec2beeabc5f38f005f383e51f1f5609aacbd9b71073a704a/pycond-190427.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "190519": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e82efca2949d8851422d5b3d850f22f684df48cd664ede20e5c960fdc160d4d2",
          "md5": "abf541e8ee70e07d92fe7772b02a3472",
          "sha256": "012386c54afadaa3cc45cd5d3f2cb40e1c296a4af6e1fe6c63e9ab9e038d6ca5"
        },
        "downloads": -1,
        "filename": "pycond-190519-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abf541e8ee70e07d92fe7772b02a3472",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15754,
        "upload_time": "2019-05-16T00:20:04",
        "upload_time_iso_8601": "2019-05-16T00:20:04.543453Z",
        "url": "https://files.pythonhosted.org/packages/e8/2e/fca2949d8851422d5b3d850f22f684df48cd664ede20e5c960fdc160d4d2/pycond-190519-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2646136fe1b42dcca2129440b0e2bb5218b874dd7feb7d14f8cb74bc87045cbf",
          "md5": "cba1efaf0d79cae3822f359305955294",
          "sha256": "dfa61829c2e5aaa68138af02b8f4f467cfe732a4b4dd6d62997615cfa4150fc7"
        },
        "downloads": -1,
        "filename": "pycond-190519.tar.gz",
        "has_sig": false,
        "md5_digest": "cba1efaf0d79cae3822f359305955294",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20906,
        "upload_time": "2019-05-16T00:20:07",
        "upload_time_iso_8601": "2019-05-16T00:20:07.999083Z",
        "url": "https://files.pythonhosted.org/packages/26/46/136fe1b42dcca2129440b0e2bb5218b874dd7feb7d14f8cb74bc87045cbf/pycond-190519.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "190520": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ffcc715d2e58d85b839ee1028057740843cd99c95ab4b7fa42c24d74ca81f1c",
          "md5": "7e26fbbe912cbd02cb9177992e6cf7fe",
          "sha256": "3ec62ff436b4f1c98a3e4098d28bb8663b9704a065cd6be990422fc3bef26fad"
        },
        "downloads": -1,
        "filename": "pycond-190520-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e26fbbe912cbd02cb9177992e6cf7fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15806,
        "upload_time": "2019-05-16T00:47:49",
        "upload_time_iso_8601": "2019-05-16T00:47:49.414277Z",
        "url": "https://files.pythonhosted.org/packages/5f/fc/c715d2e58d85b839ee1028057740843cd99c95ab4b7fa42c24d74ca81f1c/pycond-190520-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bf1c3b921d8e39a198e21b5167c7852f25ec344514b4685c1d1a600dc2a4966",
          "md5": "1217816e4e3802e5214e344f6fa3f49a",
          "sha256": "0b780389a45b2d810557c602f284eacdf1c3b1acb81935183fd4d5b718f79266"
        },
        "downloads": -1,
        "filename": "pycond-190520.tar.gz",
        "has_sig": false,
        "md5_digest": "1217816e4e3802e5214e344f6fa3f49a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21041,
        "upload_time": "2019-05-16T00:47:53",
        "upload_time_iso_8601": "2019-05-16T00:47:53.738474Z",
        "url": "https://files.pythonhosted.org/packages/5b/f1/c3b921d8e39a198e21b5167c7852f25ec344514b4685c1d1a600dc2a4966/pycond-190520.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "190521": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ac6b58addce6592311c75f04571c0b463bea68f5264a34c18caa1920f44e9c",
          "md5": "654a5ffffdbfe684403ca3665309aae9",
          "sha256": "65578bdf507c5807f822ec50d6e457b72ae3b8e5ce571809ffbc2f3155db9076"
        },
        "downloads": -1,
        "filename": "pycond-190521-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "654a5ffffdbfe684403ca3665309aae9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15806,
        "upload_time": "2019-05-16T00:50:30",
        "upload_time_iso_8601": "2019-05-16T00:50:30.242023Z",
        "url": "https://files.pythonhosted.org/packages/13/ac/6b58addce6592311c75f04571c0b463bea68f5264a34c18caa1920f44e9c/pycond-190521-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba2a89a8b565f3c7469a0eea22d4d45f90f0f7e9260f4f2b962612242fffa05",
          "md5": "9f14368b424dffa3447dd64cc137fa8d",
          "sha256": "a1e3206227ce93f48de59c34ed3c54518d6f3f853220067b30e058fac853c8bd"
        },
        "downloads": -1,
        "filename": "pycond-190521.tar.gz",
        "has_sig": false,
        "md5_digest": "9f14368b424dffa3447dd64cc137fa8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21044,
        "upload_time": "2019-05-16T00:50:32",
        "upload_time_iso_8601": "2019-05-16T00:50:32.310488Z",
        "url": "https://files.pythonhosted.org/packages/6b/a2/a89a8b565f3c7469a0eea22d4d45f90f0f7e9260f4f2b962612242fffa05/pycond-190521.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "190522": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47459ebad489d3fd126442245710fd60d7f75a4de9a2e2028fc57dc65189c35c",
          "md5": "d05c150f20eb62823483107cac29880a",
          "sha256": "eb66ccac57dbe95af2690c8b2a74a324189a80a87a5b2e1b7ab7a27478e65d92"
        },
        "downloads": -1,
        "filename": "pycond-190522-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d05c150f20eb62823483107cac29880a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15862,
        "upload_time": "2019-05-16T08:41:39",
        "upload_time_iso_8601": "2019-05-16T08:41:39.087668Z",
        "url": "https://files.pythonhosted.org/packages/47/45/9ebad489d3fd126442245710fd60d7f75a4de9a2e2028fc57dc65189c35c/pycond-190522-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46405c61213eb6941371b1385c5fc1710175bd332b8bae071b53b9e1e46ab19",
          "md5": "f6e6744d8f41c75e0dd2264e82b3f63c",
          "sha256": "043e65234c72d750a6300b6d759497a23fd2b92b7e12371e940f20b749e00d7f"
        },
        "downloads": -1,
        "filename": "pycond-190522.tar.gz",
        "has_sig": false,
        "md5_digest": "f6e6744d8f41c75e0dd2264e82b3f63c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21121,
        "upload_time": "2019-05-16T08:41:41",
        "upload_time_iso_8601": "2019-05-16T08:41:41.301831Z",
        "url": "https://files.pythonhosted.org/packages/a4/64/05c61213eb6941371b1385c5fc1710175bd332b8bae071b53b9e1e46ab19/pycond-190522.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "190523": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f12fc55abd315fdce6393d4cafdd66ad51ac085781537587a311d2343b64262b",
          "md5": "82948e122b5f1bc62a7a78be5a844d94",
          "sha256": "8435ff4ac521af6bcc6e9fc64d9b7a2c474c187f6e42af067cd2e7e0dfcbae09"
        },
        "downloads": -1,
        "filename": "pycond-190523-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82948e122b5f1bc62a7a78be5a844d94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15838,
        "upload_time": "2019-05-16T08:47:55",
        "upload_time_iso_8601": "2019-05-16T08:47:55.901855Z",
        "url": "https://files.pythonhosted.org/packages/f1/2f/c55abd315fdce6393d4cafdd66ad51ac085781537587a311d2343b64262b/pycond-190523-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d1ae9671c0961538a2fa2f616c2033be81055b5f8ab60a7fafdaaf32aa4c958",
          "md5": "9321650bece558992d4d188e7a8ef18c",
          "sha256": "6e058cf73e8d9b5b8dbf700b99052ab7788f3a2ad859b86bd228e2f163d2d589"
        },
        "downloads": -1,
        "filename": "pycond-190523.tar.gz",
        "has_sig": false,
        "md5_digest": "9321650bece558992d4d188e7a8ef18c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21100,
        "upload_time": "2019-05-16T08:47:57",
        "upload_time_iso_8601": "2019-05-16T08:47:57.924947Z",
        "url": "https://files.pythonhosted.org/packages/6d/1a/e9671c0961538a2fa2f616c2033be81055b5f8ab60a7fafdaaf32aa4c958/pycond-190523.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "200222": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bab00c740c795e0101bae4350a1a28c71241de9e02b2191b54cad9bd081eea9",
          "md5": "31e96fb701254a6e8a96d23cc63c1094",
          "sha256": "e9183491819222ecc95390d843f06de84459da231396a41812e86dd6548015fe"
        },
        "downloads": -1,
        "filename": "pycond-200222-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31e96fb701254a6e8a96d23cc63c1094",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15849,
        "upload_time": "2020-02-22T07:53:43",
        "upload_time_iso_8601": "2020-02-22T07:53:43.677945Z",
        "url": "https://files.pythonhosted.org/packages/9b/ab/00c740c795e0101bae4350a1a28c71241de9e02b2191b54cad9bd081eea9/pycond-200222-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "764bea365f9d0e434026d54886e6e38f3bed6c2480860cc7b95c691260250de3",
          "md5": "0aa3d26975b5a8d0eed5622e5ef4e76e",
          "sha256": "3e42db025f005334f857b698386f96d58c3df71d0b66e74638815eb82fc541b0"
        },
        "downloads": -1,
        "filename": "pycond-200222.tar.gz",
        "has_sig": false,
        "md5_digest": "0aa3d26975b5a8d0eed5622e5ef4e76e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21078,
        "upload_time": "2020-02-22T07:53:45",
        "upload_time_iso_8601": "2020-02-22T07:53:45.978441Z",
        "url": "https://files.pythonhosted.org/packages/76/4b/ea365f9d0e434026d54886e6e38f3bed6c2480860cc7b95c691260250de3/pycond-200222.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "200520": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89de94a7a71a359581cb3c585c60b0df1665d21b98569b5db2f1dfe08add30a7",
          "md5": "feb26a5e0879f8ac96d17db3f30bbf2d",
          "sha256": "c9c2cf4f487a29cb42825d686312b47543d832ebaad3c7285d54cf3d0a8574ba"
        },
        "downloads": -1,
        "filename": "pycond-200520-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feb26a5e0879f8ac96d17db3f30bbf2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15849,
        "upload_time": "2020-05-20T12:32:54",
        "upload_time_iso_8601": "2020-05-20T12:32:54.961315Z",
        "url": "https://files.pythonhosted.org/packages/89/de/94a7a71a359581cb3c585c60b0df1665d21b98569b5db2f1dfe08add30a7/pycond-200520-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5615192058c21debb5e2f5ccdfb7b4a0987e9c423afb8df3af25572345ef1969",
          "md5": "5a72bfb73f04c0a822b2793929743872",
          "sha256": "fb2e5fbf4080f19c6b563f6761b59d09f8af5f91d4faf7b357273a24f56a8a56"
        },
        "downloads": -1,
        "filename": "pycond-200520.tar.gz",
        "has_sig": false,
        "md5_digest": "5a72bfb73f04c0a822b2793929743872",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21070,
        "upload_time": "2020-05-20T12:32:56",
        "upload_time_iso_8601": "2020-05-20T12:32:56.873842Z",
        "url": "https://files.pythonhosted.org/packages/56/15/192058c21debb5e2f5ccdfb7b4a0987e9c423afb8df3af25572345ef1969/pycond-200520.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.10.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c24e6ab68806435d266be6deaacf06ce24173366dbd300daacca0cfbee8849f",
          "md5": "5f3b28d71dd832031667d94f33e7d469",
          "sha256": "f87fa34aaacdd3ee1bd4a0061caa1dce89fe11c8a37d63184564ed5a02dfb1e6"
        },
        "downloads": -1,
        "filename": "pycond-2020.10.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f3b28d71dd832031667d94f33e7d469",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29406,
        "upload_time": "2020-10-12T01:09:09",
        "upload_time_iso_8601": "2020-10-12T01:09:09.988285Z",
        "url": "https://files.pythonhosted.org/packages/2c/24/e6ab68806435d266be6deaacf06ce24173366dbd300daacca0cfbee8849f/pycond-2020.10.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d47411af982f41875d8e811e92b440a9080321bbf5f4ce321fd0a8b0c174f4da",
          "md5": "5968c52a3ae4a15fb6b96612f259f54d",
          "sha256": "84e4cf80758a083461ee60808917cd12079791869aa619fadc3b3d10ce57e4f5"
        },
        "downloads": -1,
        "filename": "pycond-2020.10.10.tar.gz",
        "has_sig": false,
        "md5_digest": "5968c52a3ae4a15fb6b96612f259f54d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60980,
        "upload_time": "2020-10-12T01:09:13",
        "upload_time_iso_8601": "2020-10-12T01:09:13.045165Z",
        "url": "https://files.pythonhosted.org/packages/d4/74/11af982f41875d8e811e92b440a9080321bbf5f4ce321fd0a8b0c174f4da/pycond-2020.10.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200527": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f3898a96867479a15a13e84be259f10665ebbbc405b61ab68716faba72880a1",
          "md5": "7b751bf0aa7302600613cf6c46488d11",
          "sha256": "0c97aa01f37baa8a1b821f7e5d95482f794b349d56b3227872d343377871c1df"
        },
        "downloads": -1,
        "filename": "pycond-20200527-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b751bf0aa7302600613cf6c46488d11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15966,
        "upload_time": "2020-05-27T20:59:37",
        "upload_time_iso_8601": "2020-05-27T20:59:37.467549Z",
        "url": "https://files.pythonhosted.org/packages/6f/38/98a96867479a15a13e84be259f10665ebbbc405b61ab68716faba72880a1/pycond-20200527-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3f459051469b1a68b512b6257a8e5f32202d63e01dfc33699a19c0105681fa2",
          "md5": "ee43df17642bdc1a34f608add85c2bc7",
          "sha256": "c36b9723bf9cd43f5c6f8c833d731356348a5719503bfa59742e090a5a1cb1ee"
        },
        "downloads": -1,
        "filename": "pycond-20200527.tar.gz",
        "has_sig": false,
        "md5_digest": "ee43df17642bdc1a34f608add85c2bc7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21154,
        "upload_time": "2020-05-27T20:59:39",
        "upload_time_iso_8601": "2020-05-27T20:59:39.249101Z",
        "url": "https://files.pythonhosted.org/packages/e3/f4/59051469b1a68b512b6257a8e5f32202d63e01dfc33699a19c0105681fa2/pycond-20200527.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200601": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edc14de50ea593a4b84770c75d27ee91ace721a3550c65ba2a0c2d1a212dd2e1",
          "md5": "20a7205ce7c801f6fd0cf9ca4343c542",
          "sha256": "5d73843b08169628fdee1cf23cbd290d79525772363dc932731966e21ab7d170"
        },
        "downloads": -1,
        "filename": "pycond-20200601-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20a7205ce7c801f6fd0cf9ca4343c542",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19187,
        "upload_time": "2020-05-31T06:40:23",
        "upload_time_iso_8601": "2020-05-31T06:40:23.747934Z",
        "url": "https://files.pythonhosted.org/packages/ed/c1/4de50ea593a4b84770c75d27ee91ace721a3550c65ba2a0c2d1a212dd2e1/pycond-20200601-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ec9afa674729b6f8b6336be753972a8e1f0aabb84f5c5b29d04c26406e8adca",
          "md5": "b7e787bbc6e4f60df6f612045e76cf43",
          "sha256": "2239a3eb1cdbea2ab18921c285e1b7a2c45a743c8f4e4931231ebe1119484d82"
        },
        "downloads": -1,
        "filename": "pycond-20200601.tar.gz",
        "has_sig": false,
        "md5_digest": "b7e787bbc6e4f60df6f612045e76cf43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33321,
        "upload_time": "2020-05-31T06:40:25",
        "upload_time_iso_8601": "2020-05-31T06:40:25.911048Z",
        "url": "https://files.pythonhosted.org/packages/9e/c9/afa674729b6f8b6336be753972a8e1f0aabb84f5c5b29d04c26406e8adca/pycond-20200601.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200602": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3d946ce7259bd66bb8428fe8d5135c41ebbb6b1d269b50ca347965b7de8a0db",
          "md5": "96b6ffc6ae5ab72159c83710fe200639",
          "sha256": "10175f6aecdc6549e7ace2fae6737fbf6cf88e7d52a3149f7bddde71a4816a3c"
        },
        "downloads": -1,
        "filename": "pycond-20200602-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96b6ffc6ae5ab72159c83710fe200639",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22199,
        "upload_time": "2020-06-03T11:58:51",
        "upload_time_iso_8601": "2020-06-03T11:58:51.639594Z",
        "url": "https://files.pythonhosted.org/packages/d3/d9/46ce7259bd66bb8428fe8d5135c41ebbb6b1d269b50ca347965b7de8a0db/pycond-20200602-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11e6fcc77a58f37f523c8805b5f948963ceb4c20ea28709e23586a5413c3b7b6",
          "md5": "77db0ef3a360a27032a3482f4c5f8f19",
          "sha256": "b65ee3cca76d4f53cb2adb04a24b968924b71593dc59552ad60edf87252fa197"
        },
        "downloads": -1,
        "filename": "pycond-20200602.tar.gz",
        "has_sig": false,
        "md5_digest": "77db0ef3a360a27032a3482f4c5f8f19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45183,
        "upload_time": "2020-06-03T11:58:53",
        "upload_time_iso_8601": "2020-06-03T11:58:53.790784Z",
        "url": "https://files.pythonhosted.org/packages/11/e6/fcc77a58f37f523c8805b5f948963ceb4c20ea28709e23586a5413c3b7b6/pycond-20200602.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200603": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29c60426cd4c3fb493ed549894966325080ceb64c55b8c3ce55b71a17f32be23",
          "md5": "c9b2a9653f8c5a93039841cde7fc99d9",
          "sha256": "b37fa7a12b8bce09e93153d26621f7e669f4e7f50258ded6e2a1eaf5973f7dcf"
        },
        "downloads": -1,
        "filename": "pycond-20200603-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9b2a9653f8c5a93039841cde7fc99d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24629,
        "upload_time": "2020-06-08T22:45:16",
        "upload_time_iso_8601": "2020-06-08T22:45:16.157069Z",
        "url": "https://files.pythonhosted.org/packages/29/c6/0426cd4c3fb493ed549894966325080ceb64c55b8c3ce55b71a17f32be23/pycond-20200603-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "537ca17121180fc4184068e7677e888310307739c554c17253801e685c6f424f",
          "md5": "6256bade782a87f959727fedff89a930",
          "sha256": "1d8769008b8c3825c4ef3a10882bd68bb5de7bfb6ac32da746ccbd5d11175b59"
        },
        "downloads": -1,
        "filename": "pycond-20200603.tar.gz",
        "has_sig": false,
        "md5_digest": "6256bade782a87f959727fedff89a930",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50443,
        "upload_time": "2020-06-08T22:45:18",
        "upload_time_iso_8601": "2020-06-08T22:45:18.904681Z",
        "url": "https://files.pythonhosted.org/packages/53/7c/a17121180fc4184068e7677e888310307739c554c17253801e685c6f424f/pycond-20200603.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200605": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45520e3c6b813cebb93fae31cc531f22d9a683b15d6fe6ee1c1c2d8c2538cc1c",
          "md5": "fc2bcc00141a40428b9f003526d5523e",
          "sha256": "b7a4969eb5d0bb20932613fe9683f1a0bb88c0f461a6fdb2e763612085624e29"
        },
        "downloads": -1,
        "filename": "pycond-20200605-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc2bcc00141a40428b9f003526d5523e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24671,
        "upload_time": "2020-06-09T06:20:53",
        "upload_time_iso_8601": "2020-06-09T06:20:53.736276Z",
        "url": "https://files.pythonhosted.org/packages/45/52/0e3c6b813cebb93fae31cc531f22d9a683b15d6fe6ee1c1c2d8c2538cc1c/pycond-20200605-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ae5dded153743367feb3984d58613535d822b62ecc3c29023749f9fb5829a6b",
          "md5": "b11ff40dec503f238607327a0b87a26e",
          "sha256": "ec0246bc3f5f3be6e7c5d25a6e9dfe7618f199fc61fccbeb26c3a4456b1bd8a1"
        },
        "downloads": -1,
        "filename": "pycond-20200605.tar.gz",
        "has_sig": false,
        "md5_digest": "b11ff40dec503f238607327a0b87a26e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50646,
        "upload_time": "2020-06-09T06:20:55",
        "upload_time_iso_8601": "2020-06-09T06:20:55.658040Z",
        "url": "https://files.pythonhosted.org/packages/5a/e5/dded153743367feb3984d58613535d822b62ecc3c29023749f9fb5829a6b/pycond-20200605.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200606": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d608b8e3bfb8699c1b0b7fce18df2ea245f9bc90cdcfc30e1fe7ee1bfef98aa",
          "md5": "e667f8e6bcdd196bb7b2e229620c6e8e",
          "sha256": "eb74ab52dbfe756be07b7165b8fc36650ec7daa8696f924f1ab1882033741027"
        },
        "downloads": -1,
        "filename": "pycond-20200606-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e667f8e6bcdd196bb7b2e229620c6e8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24675,
        "upload_time": "2020-06-09T06:22:04",
        "upload_time_iso_8601": "2020-06-09T06:22:04.716359Z",
        "url": "https://files.pythonhosted.org/packages/1d/60/8b8e3bfb8699c1b0b7fce18df2ea245f9bc90cdcfc30e1fe7ee1bfef98aa/pycond-20200606-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "010c5f20448c3ec8dc32fd1777d9627a3fe03503d4ddd0e981ccaefb79fc9a42",
          "md5": "63ba3487e732811f23777485efb5c435",
          "sha256": "2cfbf08b2c561ee06fb424ddd6827455062aee5114745316a63ef18bbb99f85a"
        },
        "downloads": -1,
        "filename": "pycond-20200606.tar.gz",
        "has_sig": false,
        "md5_digest": "63ba3487e732811f23777485efb5c435",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50658,
        "upload_time": "2020-06-09T06:22:07",
        "upload_time_iso_8601": "2020-06-09T06:22:07.053815Z",
        "url": "https://files.pythonhosted.org/packages/01/0c/5f20448c3ec8dc32fd1777d9627a3fe03503d4ddd0e981ccaefb79fc9a42/pycond-20200606.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200610": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4439516c71c2eca823850805f3dffb92aabac6cda0f620cd2706ad82ae9621bd",
          "md5": "d786dc00bcc72035ed54c498321883bd",
          "sha256": "92b22c63b9012724bc49d2cbee429477b93b1fd4aeebc5a59e273ba9d28eec3b"
        },
        "downloads": -1,
        "filename": "pycond-20200610-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d786dc00bcc72035ed54c498321883bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25880,
        "upload_time": "2020-06-15T22:22:30",
        "upload_time_iso_8601": "2020-06-15T22:22:30.041965Z",
        "url": "https://files.pythonhosted.org/packages/44/39/516c71c2eca823850805f3dffb92aabac6cda0f620cd2706ad82ae9621bd/pycond-20200610-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf29e5011179318ac9300c0e5d4ea12df36565c1c6e3e7f5bbd365a3e4e6f7c",
          "md5": "98f341e9f85a1219111b6c67275583ad",
          "sha256": "adb85c091b5a5c979766cadf6c92a9eca52a6eb8136f77f96b70cd8c70c71eb6"
        },
        "downloads": -1,
        "filename": "pycond-20200610.tar.gz",
        "has_sig": false,
        "md5_digest": "98f341e9f85a1219111b6c67275583ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51855,
        "upload_time": "2020-06-15T22:22:32",
        "upload_time_iso_8601": "2020-06-15T22:22:32.198995Z",
        "url": "https://files.pythonhosted.org/packages/dd/f2/9e5011179318ac9300c0e5d4ea12df36565c1c6e3e7f5bbd365a3e4e6f7c/pycond-20200610.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200612": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "522a3e14499fa47e9724fe88ced39574fe2bbb8e5de8338d7d0aa202da533483",
          "md5": "c211c5b757c7cc0c384be1d888ba7d03",
          "sha256": "6e8d8eb69af37bf8e1553c4da6dad4cd132441a96c989be48c1fe3a3851a777c"
        },
        "downloads": -1,
        "filename": "pycond-20200612-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c211c5b757c7cc0c384be1d888ba7d03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25942,
        "upload_time": "2020-06-16T06:20:15",
        "upload_time_iso_8601": "2020-06-16T06:20:15.546696Z",
        "url": "https://files.pythonhosted.org/packages/52/2a/3e14499fa47e9724fe88ced39574fe2bbb8e5de8338d7d0aa202da533483/pycond-20200612-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e3cec5de4a2e1e2935b55dea28ce9198cb39025a128a36ec40349e332fde155",
          "md5": "c0dbba48f5f9a20f5a9d72abf4154240",
          "sha256": "3a6dda6af4104c5b09f58c076310d431bab700adeead3946f188176d9aa65c03"
        },
        "downloads": -1,
        "filename": "pycond-20200612.tar.gz",
        "has_sig": false,
        "md5_digest": "c0dbba48f5f9a20f5a9d72abf4154240",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51955,
        "upload_time": "2020-06-16T06:20:17",
        "upload_time_iso_8601": "2020-06-16T06:20:17.574341Z",
        "url": "https://files.pythonhosted.org/packages/6e/3c/ec5de4a2e1e2935b55dea28ce9198cb39025a128a36ec40349e332fde155/pycond-20200612.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200614": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38f625a8b85dedc921ade78b80db5ba170565461f66fe30887c577d8010052bb",
          "md5": "8a64a0cbce7b9855fdeeb045b2ccdfbc",
          "sha256": "d2976976c4fac650a545888847b51d165ce0d0f1f82a3562f502d482b932c3be"
        },
        "downloads": -1,
        "filename": "pycond-20200614-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a64a0cbce7b9855fdeeb045b2ccdfbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27044,
        "upload_time": "2020-06-16T18:59:04",
        "upload_time_iso_8601": "2020-06-16T18:59:04.336657Z",
        "url": "https://files.pythonhosted.org/packages/38/f6/25a8b85dedc921ade78b80db5ba170565461f66fe30887c577d8010052bb/pycond-20200614-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5dd3e1ce674ae3a7f5bc3de20cda664cb6fd3ce0b0b03b4787cd5dab9556c1",
          "md5": "2a851e68b2acd6670f47d65829c5129a",
          "sha256": "30007b5b0ac606afa13fe70d6e314c88ce9c6126b967eb05463f4c1ac3e0ae8d"
        },
        "downloads": -1,
        "filename": "pycond-20200614.tar.gz",
        "has_sig": false,
        "md5_digest": "2a851e68b2acd6670f47d65829c5129a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54787,
        "upload_time": "2020-06-16T18:59:06",
        "upload_time_iso_8601": "2020-06-16T18:59:06.814957Z",
        "url": "https://files.pythonhosted.org/packages/ca/5d/d3e1ce674ae3a7f5bc3de20cda664cb6fd3ce0b0b03b4787cd5dab9556c1/pycond-20200614.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200624": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e1a75d2fd6d516153cd959daac611438e3d93f1a081d9dfe5a4d183c7a1f1c2",
          "md5": "eb56756017e208799eda8c639c7c4cff",
          "sha256": "dfac16eb19e41064a249fc7f745ab4216ae2dcfe53688c582fb5197e734798ed"
        },
        "downloads": -1,
        "filename": "pycond-20200624-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb56756017e208799eda8c639c7c4cff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29480,
        "upload_time": "2020-06-24T15:51:36",
        "upload_time_iso_8601": "2020-06-24T15:51:36.714335Z",
        "url": "https://files.pythonhosted.org/packages/3e/1a/75d2fd6d516153cd959daac611438e3d93f1a081d9dfe5a4d183c7a1f1c2/pycond-20200624-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "007e6fac3a4eeed7dec08f619e7a80a845f69b87fae9404a711045b1b4f8be03",
          "md5": "6b3dccc7a1765948ce2bd2da845bc0e1",
          "sha256": "491218e4a20c2242e829dfcec427277fcbb74cb4f7066f08397cc94bed8add1b"
        },
        "downloads": -1,
        "filename": "pycond-20200624.tar.gz",
        "has_sig": false,
        "md5_digest": "6b3dccc7a1765948ce2bd2da845bc0e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61653,
        "upload_time": "2020-06-24T15:51:38",
        "upload_time_iso_8601": "2020-06-24T15:51:38.994780Z",
        "url": "https://files.pythonhosted.org/packages/00/7e/6fac3a4eeed7dec08f619e7a80a845f69b87fae9404a711045b1b4f8be03/pycond-20200624.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200625": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acab3ac8ab6f1da72578e798d15b96f9e8de9f50119ff245944f0ba07056f7b6",
          "md5": "d8ba26569b21bfc620c64d22fa08aa71",
          "sha256": "a2c7d8f49153ff5d3c9c7cc907bb1ccac7d423787c7523f6fe7ea1cf3f13af90"
        },
        "downloads": -1,
        "filename": "pycond-20200625-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8ba26569b21bfc620c64d22fa08aa71",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29083,
        "upload_time": "2020-06-24T18:47:24",
        "upload_time_iso_8601": "2020-06-24T18:47:24.319865Z",
        "url": "https://files.pythonhosted.org/packages/ac/ab/3ac8ab6f1da72578e798d15b96f9e8de9f50119ff245944f0ba07056f7b6/pycond-20200625-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c115cdb4284da66154c9de6b68b6a60a9d2548a9fa6ffcc4bef3c144fe60aa",
          "md5": "c0550441a699e6fecf4b00a378ea197d",
          "sha256": "4d35573b4f828c963c0edee485d3aebdeb5bcdf7becc953a5a4fbcdaf541faf4"
        },
        "downloads": -1,
        "filename": "pycond-20200625.tar.gz",
        "has_sig": false,
        "md5_digest": "c0550441a699e6fecf4b00a378ea197d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60204,
        "upload_time": "2020-06-24T18:47:26",
        "upload_time_iso_8601": "2020-06-24T18:47:26.645737Z",
        "url": "https://files.pythonhosted.org/packages/32/c1/15cdb4284da66154c9de6b68b6a60a9d2548a9fa6ffcc4bef3c144fe60aa/pycond-20200625.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200626": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d8464df3fd351d593543530662a6e6d8208eff8d1422f646292f1b233c251e4",
          "md5": "383d1e93a5cf48563f952248af3ae61f",
          "sha256": "3360e1e925ffc13df0e9e820832da5d8b66f45c1c48df739fb49b74497cf5ae1"
        },
        "downloads": -1,
        "filename": "pycond-20200626-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "383d1e93a5cf48563f952248af3ae61f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29082,
        "upload_time": "2020-06-24T19:24:06",
        "upload_time_iso_8601": "2020-06-24T19:24:06.630935Z",
        "url": "https://files.pythonhosted.org/packages/6d/84/64df3fd351d593543530662a6e6d8208eff8d1422f646292f1b233c251e4/pycond-20200626-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b2f8cc634b678ae58b633bc3e2354b5ea546f477a1027f8048b6e55a65faa51",
          "md5": "d477a6eb8e5aea1e2b6d904bcd121320",
          "sha256": "150a9cc44cdce9a4f16b5b96e1ffae0069cd051296c8a1ef4598fa2c3f0118cb"
        },
        "downloads": -1,
        "filename": "pycond-20200626.tar.gz",
        "has_sig": false,
        "md5_digest": "d477a6eb8e5aea1e2b6d904bcd121320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60191,
        "upload_time": "2020-06-24T19:24:09",
        "upload_time_iso_8601": "2020-06-24T19:24:09.398787Z",
        "url": "https://files.pythonhosted.org/packages/2b/2f/8cc634b678ae58b633bc3e2354b5ea546f477a1027f8048b6e55a65faa51/pycond-20200626.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200630": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "938660d554526c5884523f690d293afa35520500f99354ce749a671aa5cd4a45",
          "md5": "fde0c861e434adae427ae540e143df44",
          "sha256": "43bad404baeadc69bf463f98d2ebb7d6f5b28c4daee064fc61fdacd698431b53"
        },
        "downloads": -1,
        "filename": "pycond-20200630-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fde0c861e434adae427ae540e143df44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29113,
        "upload_time": "2020-06-30T20:52:15",
        "upload_time_iso_8601": "2020-06-30T20:52:15.317641Z",
        "url": "https://files.pythonhosted.org/packages/93/86/60d554526c5884523f690d293afa35520500f99354ce749a671aa5cd4a45/pycond-20200630-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35372287846e23505d1d99ae388b51f013243fcbc1bef870bdffb9611be3c513",
          "md5": "dbed1eb48630aaafa8e4cdbeb35b314a",
          "sha256": "50568c7c58400402c824e46efdcc66ece12b4d471ca2d4f22ee0fb188e30f9df"
        },
        "downloads": -1,
        "filename": "pycond-20200630.tar.gz",
        "has_sig": false,
        "md5_digest": "dbed1eb48630aaafa8e4cdbeb35b314a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60229,
        "upload_time": "2020-06-30T20:52:17",
        "upload_time_iso_8601": "2020-06-30T20:52:17.812030Z",
        "url": "https://files.pythonhosted.org/packages/35/37/2287846e23505d1d99ae388b51f013243fcbc1bef870bdffb9611be3c513/pycond-20200630.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200631": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f7971fef3791c7a833e8bee3dc72ed5eb1fb44afa72e2cf235d4e36dd7a0c07",
          "md5": "5f2418cbbf4e9d3bad2aeee641c7f590",
          "sha256": "817fbc0ff8b52309909541f34b5031a422e5cfa251485dc94ec14e2a0ee5c714"
        },
        "downloads": -1,
        "filename": "pycond-20200631-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f2418cbbf4e9d3bad2aeee641c7f590",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29113,
        "upload_time": "2020-06-30T20:53:24",
        "upload_time_iso_8601": "2020-06-30T20:53:24.841220Z",
        "url": "https://files.pythonhosted.org/packages/2f/79/71fef3791c7a833e8bee3dc72ed5eb1fb44afa72e2cf235d4e36dd7a0c07/pycond-20200631-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a58e5f5124e619bcc903754055491d720db091d2d3158e1cb87f6838d5b0d02f",
          "md5": "34f6164876dec1f9dd6ac6d3a7479c56",
          "sha256": "040d2966107166aef4761f5c23099b774874351dfe7756759b3f3b0fb7efeb01"
        },
        "downloads": -1,
        "filename": "pycond-20200631.tar.gz",
        "has_sig": false,
        "md5_digest": "34f6164876dec1f9dd6ac6d3a7479c56",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60222,
        "upload_time": "2020-06-30T20:53:27",
        "upload_time_iso_8601": "2020-06-30T20:53:27.267960Z",
        "url": "https://files.pythonhosted.org/packages/a5/8e/5f5124e619bcc903754055491d720db091d2d3158e1cb87f6838d5b0d02f/pycond-20200631.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200701": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01e0995a87d490fe657f3c8d5c6b05e6dd4f172d8e94e3cf04b5e74bc07ae86a",
          "md5": "80daa8661c03e89ca58841e40caf2938",
          "sha256": "55b073f747e3a5766ef443fb0f9b4dc125a8de999a94afbe36ec30d0f404e82c"
        },
        "downloads": -1,
        "filename": "pycond-20200701-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80daa8661c03e89ca58841e40caf2938",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29113,
        "upload_time": "2020-06-30T20:56:34",
        "upload_time_iso_8601": "2020-06-30T20:56:34.562801Z",
        "url": "https://files.pythonhosted.org/packages/01/e0/995a87d490fe657f3c8d5c6b05e6dd4f172d8e94e3cf04b5e74bc07ae86a/pycond-20200701-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e5842431035f70d91d42137a5f67cf7575745f56dd842cdf385fc69e083396",
          "md5": "1d248e3c70e1683fec9488de6845bd23",
          "sha256": "dc23c6bcd8cd810c0020eebcf25c4ee1d1640eebb629b2544863a2ed21a9ef4c"
        },
        "downloads": -1,
        "filename": "pycond-20200701.tar.gz",
        "has_sig": false,
        "md5_digest": "1d248e3c70e1683fec9488de6845bd23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60225,
        "upload_time": "2020-06-30T20:56:37",
        "upload_time_iso_8601": "2020-06-30T20:56:37.017137Z",
        "url": "https://files.pythonhosted.org/packages/75/e5/842431035f70d91d42137a5f67cf7575745f56dd842cdf385fc69e083396/pycond-20200701.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200730": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "132eda808a05b23cdf1f2e87845b8bcbe38e36be257518746f6448cfc7dd210e",
          "md5": "cc798537d4d8f1018387ecb3c5291dcf",
          "sha256": "7179d0abad212c7ea6cd85a21ec4bc4bbad991699530f498cbeab78e58304b1d"
        },
        "downloads": -1,
        "filename": "pycond-20200730-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc798537d4d8f1018387ecb3c5291dcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29364,
        "upload_time": "2020-07-30T08:29:04",
        "upload_time_iso_8601": "2020-07-30T08:29:04.122799Z",
        "url": "https://files.pythonhosted.org/packages/13/2e/da808a05b23cdf1f2e87845b8bcbe38e36be257518746f6448cfc7dd210e/pycond-20200730-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e012f82ee7d38b32efc118fa0a29451be17604dafa2d24d5a9c191a1e1651bd8",
          "md5": "29457ee46dd69d5590e14cb10c20f8c6",
          "sha256": "cc311903fdce27c1b122d09e841df4867a7c8ab152d672b503d1d3a65ef06ec9"
        },
        "downloads": -1,
        "filename": "pycond-20200730.tar.gz",
        "has_sig": false,
        "md5_digest": "29457ee46dd69d5590e14cb10c20f8c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60879,
        "upload_time": "2020-07-30T08:29:08",
        "upload_time_iso_8601": "2020-07-30T08:29:08.399512Z",
        "url": "https://files.pythonhosted.org/packages/e0/12/f82ee7d38b32efc118fa0a29451be17604dafa2d24d5a9c191a1e1651bd8/pycond-20200730.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20201010": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47f7b2bf7ee32246d9383c12c8e1bf0dff75c2ea6313f148852de24a1922bd52",
          "md5": "760b99d3f6871ff9aa2d864cac30d1c6",
          "sha256": "65674cdf38ac198d0462643f5b0be5201c05216bc13d1a89ff96c741c701db31"
        },
        "downloads": -1,
        "filename": "pycond-20201010-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "760b99d3f6871ff9aa2d864cac30d1c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29381,
        "upload_time": "2020-10-12T09:04:15",
        "upload_time_iso_8601": "2020-10-12T09:04:15.604605Z",
        "url": "https://files.pythonhosted.org/packages/47/f7/b2bf7ee32246d9383c12c8e1bf0dff75c2ea6313f148852de24a1922bd52/pycond-20201010-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b1a09497ff5a4b90f5f6e85726ac953ca5b3b168ddba6449d84c73ded2bd782",
          "md5": "033ac2d02fecc372d5b9de9293b4a762",
          "sha256": "abb660b29263f7d6d2aae3ffe5a05d9a8015bbcf7a042c17818abe40732d56d1"
        },
        "downloads": -1,
        "filename": "pycond-20201010.tar.gz",
        "has_sig": false,
        "md5_digest": "033ac2d02fecc372d5b9de9293b4a762",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60949,
        "upload_time": "2020-10-12T09:04:19",
        "upload_time_iso_8601": "2020-10-12T09:04:19.022667Z",
        "url": "https://files.pythonhosted.org/packages/3b/1a/09497ff5a4b90f5f6e85726ac953ca5b3b168ddba6449d84c73ded2bd782/pycond-20201010.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210221": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "792a55bf7a0214a60cdf0ec6ea1ab425265ee6a2b6aac0819f64e164c8a0027a",
          "md5": "285656db079c72f002144dacbe0ba2c4",
          "sha256": "7ff04d007a3e3129895e070730106b9b50f56cebe2f518a3a1a3d07fee53e99c"
        },
        "downloads": -1,
        "filename": "pycond-20210221-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "285656db079c72f002144dacbe0ba2c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29704,
        "upload_time": "2021-02-20T23:02:20",
        "upload_time_iso_8601": "2021-02-20T23:02:20.833671Z",
        "url": "https://files.pythonhosted.org/packages/79/2a/55bf7a0214a60cdf0ec6ea1ab425265ee6a2b6aac0819f64e164c8a0027a/pycond-20210221-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee9d86e86976e0690d1501b366e074057484fccbf6d05f84f733e6add21fd401",
          "md5": "d4832ebd5ce2036c466f7940703c6949",
          "sha256": "2b49dd7581c570d215c619e518155e4fdbe6afd6fd2f74935272805d91b25e2d"
        },
        "downloads": -1,
        "filename": "pycond-20210221.tar.gz",
        "has_sig": false,
        "md5_digest": "d4832ebd5ce2036c466f7940703c6949",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62294,
        "upload_time": "2021-02-20T23:02:23",
        "upload_time_iso_8601": "2021-02-20T23:02:23.760767Z",
        "url": "https://files.pythonhosted.org/packages/ee/9d/86e86976e0690d1501b366e074057484fccbf6d05f84f733e6add21fd401/pycond-20210221.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220310": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2db9ae25c1b2b3ff69f31327121779a667e880a4a3d0f9b7630d92a595976689",
          "md5": "d7cee7dd8aa01fb9f3300e20858a396d",
          "sha256": "fd6e442cbe445ce8cb246070a5ed7e797b51c277d968f1e83f650c9ab58172a8"
        },
        "downloads": -1,
        "filename": "pycond-20220310-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7cee7dd8aa01fb9f3300e20858a396d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29900,
        "upload_time": "2022-03-09T19:43:25",
        "upload_time_iso_8601": "2022-03-09T19:43:25.302779Z",
        "url": "https://files.pythonhosted.org/packages/2d/b9/ae25c1b2b3ff69f31327121779a667e880a4a3d0f9b7630d92a595976689/pycond-20220310-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03196448e301b976cab059253abd620138a542f0f1a517e628c813a18d490641",
          "md5": "bc84a1d173f3e8efa9c6386d60be2f9e",
          "sha256": "f9ff7dfc5d3cc3ac9375ad92c23cba0422f8e17af823a8a8ec56d47b45d194e4"
        },
        "downloads": -1,
        "filename": "pycond-20220310.tar.gz",
        "has_sig": false,
        "md5_digest": "bc84a1d173f3e8efa9c6386d60be2f9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62907,
        "upload_time": "2022-03-09T19:43:28",
        "upload_time_iso_8601": "2022-03-09T19:43:28.061035Z",
        "url": "https://files.pythonhosted.org/packages/03/19/6448e301b976cab059253abd620138a542f0f1a517e628c813a18d490641/pycond-20220310.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230210": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9217168486ea77fc94d8d646be1874fd15e9877d7e9c31de652d9881f7326fea",
          "md5": "247eb29aa0f298be3596501a8c7de2f6",
          "sha256": "19b690375fa816e97b0903f3aa3c6ccb5ec49a5abfebfd0cf6fd16fbdcb69f83"
        },
        "downloads": -1,
        "filename": "pycond-20230210-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "247eb29aa0f298be3596501a8c7de2f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29978,
        "upload_time": "2023-02-09T21:32:12",
        "upload_time_iso_8601": "2023-02-09T21:32:12.950971Z",
        "url": "https://files.pythonhosted.org/packages/92/17/168486ea77fc94d8d646be1874fd15e9877d7e9c31de652d9881f7326fea/pycond-20230210-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d40f10b0705bf6cfa8a0e164729c972bbd016af54498e437c0079d0f8255746",
          "md5": "c6bc600202f43966d99bc8f223691dcb",
          "sha256": "80336f46d59afb11da7f16b8217f1e083a85acefa3a20eb8a55aff34d1ed1676"
        },
        "downloads": -1,
        "filename": "pycond-20230210.tar.gz",
        "has_sig": false,
        "md5_digest": "c6bc600202f43966d99bc8f223691dcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83895,
        "upload_time": "2023-02-09T21:32:15",
        "upload_time_iso_8601": "2023-02-09T21:32:15.971182Z",
        "url": "https://files.pythonhosted.org/packages/3d/40/f10b0705bf6cfa8a0e164729c972bbd016af54498e437c0079d0f8255746/pycond-20230210.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230211": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "961907898e2291f81ecc31ff7335a4a5e059b75818360ebe8fba9f1168639b46",
          "md5": "561ba8eb236b6c83184eac8cccabed6b",
          "sha256": "13ccc8d30d6dad998274f05b3bf25684ad272d3709a05bcd172f5ed9252fdf7d"
        },
        "downloads": -1,
        "filename": "pycond-20230211-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "561ba8eb236b6c83184eac8cccabed6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29975,
        "upload_time": "2023-02-09T21:36:31",
        "upload_time_iso_8601": "2023-02-09T21:36:31.732007Z",
        "url": "https://files.pythonhosted.org/packages/96/19/07898e2291f81ecc31ff7335a4a5e059b75818360ebe8fba9f1168639b46/pycond-20230211-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51169d8068fe8473dedfd01fd78dc885a8b02a41ad4a08928009cc61c812c434",
          "md5": "5ef17b40798c02fbaac56c85e7f920da",
          "sha256": "e09bf87c86d391958a96ae47a4192ada1b66cd5efa8f2e40c7350f0fd01b024a"
        },
        "downloads": -1,
        "filename": "pycond-20230211.tar.gz",
        "has_sig": false,
        "md5_digest": "5ef17b40798c02fbaac56c85e7f920da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 83892,
        "upload_time": "2023-02-09T21:36:34",
        "upload_time_iso_8601": "2023-02-09T21:36:34.464932Z",
        "url": "https://files.pythonhosted.org/packages/51/16/9d8068fe8473dedfd01fd78dc885a8b02a41ad4a08928009cc61c812c434/pycond-20230211.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e37d2a8b1f3740724b7919a13dc0487d831de53ed7753e1e8c23c327fc03b35",
          "md5": "94e31ae97dd7672c1852f25c4f0f6168",
          "sha256": "a0a9da689cb6c071fc8d551a2231270ec6672feb7d0107551bd1fa59673a0d46"
        },
        "downloads": -1,
        "filename": "pycond-20230212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94e31ae97dd7672c1852f25c4f0f6168",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31582,
        "upload_time": "2023-02-10T22:54:27",
        "upload_time_iso_8601": "2023-02-10T22:54:27.288150Z",
        "url": "https://files.pythonhosted.org/packages/4e/37/d2a8b1f3740724b7919a13dc0487d831de53ed7753e1e8c23c327fc03b35/pycond-20230212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9af2af7216e749edc5a30f945c3cf106bbf6327f82d72b74dce1cb813c67b2fc",
          "md5": "febee61408f13c0e0169b7dbb7b42428",
          "sha256": "eb38daa6fe6903cd8e578bb48d976bc7177dcc7087fef3e616ea39f92e01e7c1"
        },
        "downloads": -1,
        "filename": "pycond-20230212.tar.gz",
        "has_sig": false,
        "md5_digest": "febee61408f13c0e0169b7dbb7b42428",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88693,
        "upload_time": "2023-02-10T22:54:29",
        "upload_time_iso_8601": "2023-02-10T22:54:29.857524Z",
        "url": "https://files.pythonhosted.org/packages/9a/f2/af7216e749edc5a30f945c3cf106bbf6327f82d72b74dce1cb813c67b2fc/pycond-20230212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e37d2a8b1f3740724b7919a13dc0487d831de53ed7753e1e8c23c327fc03b35",
        "md5": "94e31ae97dd7672c1852f25c4f0f6168",
        "sha256": "a0a9da689cb6c071fc8d551a2231270ec6672feb7d0107551bd1fa59673a0d46"
      },
      "downloads": -1,
      "filename": "pycond-20230212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94e31ae97dd7672c1852f25c4f0f6168",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 31582,
      "upload_time": "2023-02-10T22:54:27",
      "upload_time_iso_8601": "2023-02-10T22:54:27.288150Z",
      "url": "https://files.pythonhosted.org/packages/4e/37/d2a8b1f3740724b7919a13dc0487d831de53ed7753e1e8c23c327fc03b35/pycond-20230212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9af2af7216e749edc5a30f945c3cf106bbf6327f82d72b74dce1cb813c67b2fc",
        "md5": "febee61408f13c0e0169b7dbb7b42428",
        "sha256": "eb38daa6fe6903cd8e578bb48d976bc7177dcc7087fef3e616ea39f92e01e7c1"
      },
      "downloads": -1,
      "filename": "pycond-20230212.tar.gz",
      "has_sig": false,
      "md5_digest": "febee61408f13c0e0169b7dbb7b42428",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 88693,
      "upload_time": "2023-02-10T22:54:29",
      "upload_time_iso_8601": "2023-02-10T22:54:29.857524Z",
      "url": "https://files.pythonhosted.org/packages/9a/f2/af7216e749edc5a30f945c3cf106bbf6327f82d72b74dce1cb813c67b2fc/pycond-20230212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}