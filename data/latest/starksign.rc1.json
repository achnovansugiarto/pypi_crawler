{
  "info": {
    "author": "Stark Sign",
    "author_email": "developers@starkinfra.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Stark Sign Python SDK - Beta\n\nWelcome to the Stark Sign Python SDK! This tool is made for Python \ndevelopers who want to easily integrate with our API.\nThis SDK version is compatible with the Stark Sign API v2.\n\n# Introduction\n\n## Index\n\n- [Introduction](#introduction)\n    - [Supported Python versions](#supported-python-versions)\n    - [API documentation](#stark-sign-api-documentation)\n    - [Versioning](#versioning)\n- [Setup](#setup)\n    - [Install our SDK](#1-install-our-sdk)\n    - [Setting up the environment](#2-setting-up-the-environment)\n    - [Setting up the error language](#3-setting-up-the-error-language)\n- [Signatures](#signatures)\n    - [Link](#1-link-signatures)\n    - [Token](#2-token-signatures)\n    - [Server](#3-server-signatures) \n- [Usage](#usage)\n    - [Server signatures](#server-signatures): Sign a document automatically using the server method\n    - [Token signatures](#token-signatures): Sign a document on behalf of a person via SMS/email tokens\n- [Handling errors](#handling-errors)\n- [Help and Feedback](#help-and-feedback)\n\n## Supported Python Versions\n\nThis library supports the following Python versions:\n\n* Python 2.7\n* Python 3.4+\n\n## Stark Sign API documentation\n\nFeel free to take a look at our [API docs](https://www.starksign.com/docs/api).\n\n## Versioning\n\nThis project adheres to the following versioning pattern:\n\nGiven a version number MAJOR.MINOR.PATCH, increment:\n\n- MAJOR version when the **API** version is incremented. This may include backwards incompatible changes;\n- MINOR version when **breaking changes** are introduced OR **new functionalities** are added in a backwards compatible manner;\n- PATCH version when backwards compatible bug **fixes** are implemented.\n\n# Setup\n\n## 1. Install our SDK\n\n1.1 To install the package with pip, run:\n\n```sh\npip install starksign\n```\n\n1.2 To install from source, clone the repo and run:\n\n```sh\npython setup.py install\n```\n\n## 2. Setting up the environment\n\nYou must configure the SDK to use one of our two available environments:\n\n- `sandbox`: This is a testing environment where you can get to know and test your system's interactions with ours.\n- `production`: This is real World, where your actions will have a real impact on your operations.\n\nTo do this, assign it while your application is booting: \n\n```python\nimport starksign\n\nstarksign.environment = \"sandbox\"  # or production\n```\n\nOn all following examples, we will assume a default user has been set.\n\n## 3. Setting up the error language\n\nThe error language (and timeout) can also be set in the same way as the default user:\n\n```python\nimport starksign\n\nstarksign.language = \"en-US\"\n```\n\nLanguage options are \"en-US\" for English and \"pt-BR\" for Brazilian Portuguese. English is the default.\n\n# Signatures\n\nThere are 3 ways a party can sign a document: \n\n## 1. Link signatures\n\nUsing this method, the signer will receive a link (by email, SMS, etc.),\nwhich will open the document link with a validated signature button.\nBy reading the document and clicking on the button, the person's signature will be registered.\nThis method doesn't require usage of this SDK and its functions.\n\n## 2. Token signatures\n\nUsing this method, you are expected to provide an interface (via browser, app, etc.) to the signer,\nwho will read the document, receive a token (via email, SMS, etc.) and then inform it to the interface to sign it.\n\n## 3. Server signatures\n\nUsing this method, your service will receive a request on the informed endpoint.\nThis request will carry a private key, which should be used to sign the document after its validation.\n\n# Usage\n\nHere are a few examples on how to use the SDK. If you have any doubts, you can also use the built-in\n`help()` function to get more info on the desired functionality\n(for example: `help(starksign.issuinginvoice.create)`)\n\n## Server signatures\n\nIf you need a server/system to automatically sign the documents, you can follow these steps:\n\n### 1. Receive a SignatureRequest on your endpoint\n\nIf your system is expected to sign documents that are being generated,\nbe prepared to receive calls to the informed endpoint and parse them accordingly before you proceed with the signature:\n\n```python\nimport starksign\n\nresponse = listen()  # this is the method you made to get the events posted to your webhook endpoint\n\nsignature_request = starksign.signaturerequest.parse(\n    content=response.data.decode(\"utf-8\"),\n    signature=response.headers[\"Digital-Signature\"],\n)\n\nprint(signature_request)\n```\n\n### 2. Get the document data before signing\n\nOnce you receive a signature request, fetch the referenced document to check it out before signing it:\n\n```python\nimport starksign\n\ndocument = starksign.document.get(signature_request.document_id)\n\nprint(document)\n```\n\n### 3. Sign the document\n\nOnce you have the SignatureRequest and Document and your system understands the signature is due, you can sign it:\n\n```python\nimport starksign\n\nsignature = starksign.document.sign(\n  id=document.id,\n  content=document.content,\n  signer_id=signature_request.signer_id,\n  private_key=signature_request.private_key,\n)\n\nprint(signature)\n```\n\n## Token signatures\n\nIf you expect your users to sign documents using the tokens they receive via email, SMS, etc.,\nyour interface (which should already have the document data loaded) should be able to receive their tokens and sign on\ntheir behalf by doing this:\n\n### 1. Sign the document\n\nThis is the same method used before, but the token is provided instead of the private_key:\n\n```python\nimport starksign\n\n# since your interface is asking for a specific document's signature, it should already know the document and signer\ndocument = get_document()  # this is not an SDK function, you should implement this to get the Document data \nsigner = get_signer()  # this is not an SDK function, you should implement this to get the Signer data\n\ntoken = get_user_input()  # this is not an SDK function, you should implement this to get the user input\n\nsignature = starksign.document.sign(\n  id=document.id,\n  content=document.content,\n  signer_id=signer.id,\n  token=token,\n)\n\nprint(signature)\n```\n\n# Handling errors\n\nThe SDK may raise one of four types of errors: __InputErrors__, __InternalServerError__, __UnknownError__, __InvalidSignatureError__\n\n__InputErrors__ will be raised whenever the API detects an error in your request (status code 400).\nIf you catch such an error, you can get its elements to verify each of the\nindividual errors that were detected in your request by the API.\nFor example:\n\n```python\nimport starksign\n\ntry:\n    signature = starksign.document.sign(\n        id=\"7a8361ec097543daa48acd5312471cf5\",\n        content=\"<meta charset='utf-8'><page size='A4'>Test</page>\",\n        signer_id=\"2345234523452345\",\n        token=\"abcd1234\",\n    )\nexcept starksign.error.InputErrors as exception:\n    for error in exception.errors:\n        print(error.code)\n        print(error.message)\n```\n\n__InternalServerError__ will be raised if the API runs into an internal error.\nIf you ever stumble upon this one, rest assured that the development team\nis already rushing in to fix the mistake and get you back up to speed.\n\n__UnknownError__ will be raised if a request encounters an error that is\nneither __InputErrors__ nor an __InternalServerError__, such as connectivity problems.\n\n__InvalidSignatureError__ will be raised specifically by starksign.event.parse()\nwhen the provided content and signature do not check out with the Stark Sign public\nkey.\n\n# Help and Feedback\n\nIf you have any questions about our SDK, just send us an email.\nWe will respond you quickly, pinky promise. We are here to help you integrate with us ASAP.\nWe also love feedback, so don't be shy about sharing your thoughts with us.\n\nEmail: help@starkbank.com",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/starksign/sdk-python",
    "keywords": "stark sign,starksign,sdk,stark",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starksign",
    "package_url": "https://pypi.org/project/starksign/",
    "platform": null,
    "project_url": "https://pypi.org/project/starksign/",
    "project_urls": {
      "Homepage": "https://github.com/starksign/sdk-python"
    },
    "release_url": "https://pypi.org/project/starksign/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "SDK to facilitate Python integrations with Stark Sign",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15024559,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3894671fac03cddbafde3a8ec490ed800ab1e0c438613d1c8c591e89e0ab5b84",
          "md5": "ce4b1f320da68d72064bd815ef09d127",
          "sha256": "131ae617950929235b1fc2df3f59047882eac8c8dae5f7544a4f71e6a161fb5f"
        },
        "downloads": -1,
        "filename": "starksign-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce4b1f320da68d72064bd815ef09d127",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12616,
        "upload_time": "2022-09-07T20:40:25",
        "upload_time_iso_8601": "2022-09-07T20:40:25.215453Z",
        "url": "https://files.pythonhosted.org/packages/38/94/671fac03cddbafde3a8ec490ed800ab1e0c438613d1c8c591e89e0ab5b84/starksign-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3894671fac03cddbafde3a8ec490ed800ab1e0c438613d1c8c591e89e0ab5b84",
        "md5": "ce4b1f320da68d72064bd815ef09d127",
        "sha256": "131ae617950929235b1fc2df3f59047882eac8c8dae5f7544a4f71e6a161fb5f"
      },
      "downloads": -1,
      "filename": "starksign-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ce4b1f320da68d72064bd815ef09d127",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12616,
      "upload_time": "2022-09-07T20:40:25",
      "upload_time_iso_8601": "2022-09-07T20:40:25.215453Z",
      "url": "https://files.pythonhosted.org/packages/38/94/671fac03cddbafde3a8ec490ed800ab1e0c438613d1c8c591e89e0ab5b84/starksign-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}