{
  "info": {
    "author": "",
    "author_email": "Pietro Marafini <marafini@csgenetics.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. image:: https://user-images.githubusercontent.com/6096414/93030687-c7cf7300-f61c-11ea-92b8-102ec17ef6aa.png\n\nUMI-tools was published in `Genome Research <http://genome.cshlp.org/content/early/2017/01/18/gr.209601.116.abstract>`_ on 18 Jan '17 (open access)\n\nFor full documentation see https://umi-tools.readthedocs.io/en/latest/\n\nTools for dealing with Unique Molecular Identifiers\n====================================================\n\nThis repository contains tools for dealing with Unique Molecular\nIdentifiers (UMIs)/Random Molecular Tags (RMTs) and single cell\nRNA-Seq cell barcodes. Currently there are 6\ncommands. \n\nThe ``extract`` and ``whitelist`` commands are used to prepare a\nfastq containg UMIs +/- cell barcodes for alignment. \n\n* whitelist:\n   **Builds a whitelist of the 'real' cell barcodes**\n      This is useful for droplet-based single cell RNA-Seq where the\n      identity of the true cell barcodes is unknown. Whitelist can\n      then be used to filter with extract (see below)\n\n* extract:\n   **Flexible removal of UMI sequences from fastq reads.**\n      UMIs are removed and appended to the read name. Any other\n      barcode, for example a library barcode, is left on the read. Can\n      also filter reads by quality or against a whitelist (see above)\n\nThe remaining commands, ``group``, ``dedup`` and ``count``/``count_tab``, are used to\nidentify PCR duplicates using the UMIs and perform different levels of\nanalysis depending on the needs of the user. A number of different UMI\ndeduplication schemes are enabled - The recommended method is\n*directional*.\n\n* dedup:\n   **Groups PCR duplicates and deduplicates reads to yield one read per group**\n      Use this when you want to remove the PCR duplicates prior to any\n      downstream analysis\n\n* group: \n   **Groups PCR duplicates using the same methods available through `dedup`.**\n      This is useful when you want to manually interrogate the PCR duplicates\n   \n* count:\n   **Groups and deduplicates PCR duplicates and counts the unique molecules per gene**\n      Use this when you want to obtain a matrix with unique molecules\n      per gene, per cell, for scRNA-Seq.\n\n* count_tab:\n   **As per count except input is a flatfile**\n\nSee `QUICK_START.md <./doc/QUICK_START.md>`_ for a quick tutorial on\nthe most common usage pattern.\n\nIf you want to use UMI-tools in single-cell RNA-Seq data processing,\nsee `Single_cell_tutorial.md <./doc/Single_cell_tutorial.md>`_\n\n**Important update**: We now recommend the use of `alevin` for droplet-based\nscRNA-Seq (e.g 10X, inDrop etc). `alevin` is an accurate, fast and convenient end-to-end tool to go from fastq -> count matrix and  extends the UMI error correction in `UMI-tools` within a framework that also enables quantification of droplet scRNA-Seq without discarding multi-mapped reads.  See `alevin documentation <https://salmon.readthedocs.io/en/latest/alevin.html>`_ and `alevin pre-print <https://www.biorxiv.org/content/10.1101/335000v2>`_ for more information\n\nThe ``dedup``, ``group``, and ``count`` / ``count_tab`` commands make use of network-based methods to resolve similar UMIs with the same alignment coordinates. For a background regarding these methods see:\n\n`Genome Research Publication <http://genome.cshlp.org/content/early/2017/01/18/gr.209601.116.abstract>`_\n\n`Blog post discussing network-based methods <https://cgatoxford.wordpress.com/2015/08/14/unique-molecular-identifiers-the-problem-the-solution-and-the-proof/>`_.\n\n\nInstallation\n------------\n\nIf you're using Conda, you can use:\n\n.. code:: bash\n\n   $ conda install -c bioconda -c conda-forge umi_tools\n\nOr pip:\n\n.. code:: bash\n\n   $ pip install umi_tools\n\n\nOr if you'd like to work directly from the git repository:\n\n.. code:: bash\n\n   $ git clone https://github.com/CGATOxford/UMI-tools.git\n\nEnter repository and run:\n\n.. code:: bash\n\n   $ python setup.py install\n\nFor more detail see `INSTALL.rst <./doc/INSTALL.rst>`_\n\nHelp\n----- \n\nFor full documentation see https://umi-tools.readthedocs.io/en/latest/\n\nSee `QUICK_START.md <./doc/QUICK_START.md>`_ and\n`Single_cell_tutorial.md <./doc/Single_cell_tutorial.md>`_ for tutorials on the most common usage patterns.\n\nTo get help on umi_tools run\n\n.. code:: bash\n\n   $ umi_tools --help\n\nTo get help on the options for a specific [COMMAND], run\n\n.. code:: bash\n\n   $ umi_tools [COMMAND] --help\n\n\nDependencies\n------------\numi_tools is dependent on `python>=3.5`, `numpy`, `pandas`, `scipy`, `cython`, `pysam`,\n`future`, `regex` and `matplotlib`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "umi-tools-csgx-b",
    "package_url": "https://pypi.org/project/umi-tools-csgx-b/",
    "platform": null,
    "project_url": "https://pypi.org/project/umi-tools-csgx-b/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pmarafini/UMI-tools-csgx/issues",
      "Homepage": "https://github.com/pmarafini/UMI-tools-csgx"
    },
    "release_url": "https://pypi.org/project/umi-tools-csgx-b/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "updated Vlad Kiselev umi-tools-csgx fork of umi-tools",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16593728,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78d7671d8108e32aded35bbaeedf71a1df9fd1c3e9031e15458bf3898bcd008d",
          "md5": "54cf645b20a1e82be369ed03d2b3d79f",
          "sha256": "c89ab522895a3bae50f9f6a535f8651dd3c6d2a99af970935f95b3dfc4b3cd95"
        },
        "downloads": -1,
        "filename": "umi_tools_csgx_b-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54cf645b20a1e82be369ed03d2b3d79f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 82605,
        "upload_time": "2023-01-27T18:34:27",
        "upload_time_iso_8601": "2023-01-27T18:34:27.257248Z",
        "url": "https://files.pythonhosted.org/packages/78/d7/671d8108e32aded35bbaeedf71a1df9fd1c3e9031e15458bf3898bcd008d/umi_tools_csgx_b-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f59af830cf28c06250a4516fbb35f2477a58e3e17720cd8a8eeae079252f49e8",
          "md5": "0ea46d54cdba12f9495511fb3278408b",
          "sha256": "a88f6ae2059f76d313e4710b2968c97e8308c69b0511fadd64151a2b333a4a94"
        },
        "downloads": -1,
        "filename": "umi_tools_csgx_b-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0ea46d54cdba12f9495511fb3278408b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15528260,
        "upload_time": "2023-01-27T18:34:32",
        "upload_time_iso_8601": "2023-01-27T18:34:32.575146Z",
        "url": "https://files.pythonhosted.org/packages/f5/9a/f830cf28c06250a4516fbb35f2477a58e3e17720cd8a8eeae079252f49e8/umi_tools_csgx_b-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "78d7671d8108e32aded35bbaeedf71a1df9fd1c3e9031e15458bf3898bcd008d",
        "md5": "54cf645b20a1e82be369ed03d2b3d79f",
        "sha256": "c89ab522895a3bae50f9f6a535f8651dd3c6d2a99af970935f95b3dfc4b3cd95"
      },
      "downloads": -1,
      "filename": "umi_tools_csgx_b-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54cf645b20a1e82be369ed03d2b3d79f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 82605,
      "upload_time": "2023-01-27T18:34:27",
      "upload_time_iso_8601": "2023-01-27T18:34:27.257248Z",
      "url": "https://files.pythonhosted.org/packages/78/d7/671d8108e32aded35bbaeedf71a1df9fd1c3e9031e15458bf3898bcd008d/umi_tools_csgx_b-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f59af830cf28c06250a4516fbb35f2477a58e3e17720cd8a8eeae079252f49e8",
        "md5": "0ea46d54cdba12f9495511fb3278408b",
        "sha256": "a88f6ae2059f76d313e4710b2968c97e8308c69b0511fadd64151a2b333a4a94"
      },
      "downloads": -1,
      "filename": "umi_tools_csgx_b-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0ea46d54cdba12f9495511fb3278408b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15528260,
      "upload_time": "2023-01-27T18:34:32",
      "upload_time_iso_8601": "2023-01-27T18:34:32.575146Z",
      "url": "https://files.pythonhosted.org/packages/f5/9a/f830cf28c06250a4516fbb35f2477a58e3e17720cd8a8eeae079252f49e8/umi_tools_csgx_b-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}