{
  "info": {
    "author": "Oscar Ureña",
    "author_email": "oscar.enrique.urena@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pyspectra\nWelcome to pyspectra. <br>\nThis package is intended to  put functions together to analyze and transform spectral data from multiple spectroscopy instruments. <br>\n\nCurrently supported input files are:\n* .spc\n* .dx\n\nPySpectra is intended to facilitate working with spectroscopy files in python by using a friendly  integration with pandas dataframe objects. <br>.\nAlso pyspectra provides a set of routines to execute spectral pre-processing like:<br>\n* MSC\n* SNV\n* Detrend\n* Savitzky - Golay\n* Derivatives\n* ..\n\nData spectra can be used for traditional chemometrics analysis but also can be used in general advanced analytics modelling in order to deliver additional  information to manufacturing models by supplying spectral information.\n\n\n```python\n#Import basic libraries\nimport spc\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.decomposition import PCA\n```\n\n# Read .spc file\n## Read a single file\n\n\n```python\nfrom pyspectra.readers.read_spc import read_spc\nspc=read_spc('pyspectra/sample_spectra/VIAVI/JDSU_Phar_Rotate_S06_1_20171009_1540.spc')\nspc.plot()\nplt.xlabel(\"nm\")\nplt.ylabel(\"Abs\")\nplt.grid(True)\nprint(spc.head())\n```\n\n    gx-y(1)\n    908.100000    0.123968\n    914.294355    0.118613\n    920.488710    0.113342\n    926.683065    0.108641\n    932.877419    0.098678\n    dtype: float64\n\n\n\n![Single spc spectra](https://github.com/OEUM/PySpectra/blob/main/images/output_3_1_SingleSpectraSPC.png?raw=true)\n\n\n## Read multiple .spc files from a directory\n\n\n```python\nfrom pyspectra.readers.read_spc import read_spc_dir\n\ndf_spc, dict_spc=read_spc_dir('pyspectra/sample_spectra/VIAVI')\ndisplay(df_spc.transpose())\nf, ax =plt.subplots(1, figsize=(18,8))\nax.plot(df_spc.transpose())\nplt.xlabel(\"nm\")\nplt.ylabel(\"Abs\")\nax.legend(labels= list(df_spc.transpose().columns))\nplt.show()\n```\n\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n    gx-y(1)\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>JDSU_Phar_Rotate_S06_1_20171009_1540.spc</th>\n      <th>JDSU_Phar_Rotate_S11_2_20171009_1614.spc</th>\n      <th>JDSU_Phar_Rotate_S17_1_20171009_1652.spc</th>\n      <th>JDSU_Phar_Rotate_S23_1_20171009_1734.spc</th>\n      <th>JDSU_Phar_Rotate_S30_2_20171009_1815.spc</th>\n      <th>JDSU_Phar_Rotate_S37_2_20171009_1853.spc</th>\n      <th>JDSU_Phar_Rotate_S43_2_20171009_1928.spc</th>\n      <th>JDSU_Phar_Rotate_S49_1_20171009_2000.spc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>908.100000</th>\n      <td>0.123968</td>\n      <td>0.164750</td>\n      <td>0.156647</td>\n      <td>0.147828</td>\n      <td>0.182833</td>\n      <td>0.171957</td>\n      <td>0.164471</td>\n      <td>0.149373</td>\n    </tr>\n    <tr>\n      <th>914.294355</th>\n      <td>0.118613</td>\n      <td>0.159980</td>\n      <td>0.150746</td>\n      <td>0.142974</td>\n      <td>0.178452</td>\n      <td>0.166827</td>\n      <td>0.159545</td>\n      <td>0.142818</td>\n    </tr>\n    <tr>\n      <th>920.488710</th>\n      <td>0.113342</td>\n      <td>0.155193</td>\n      <td>0.144959</td>\n      <td>0.138178</td>\n      <td>0.173734</td>\n      <td>0.161695</td>\n      <td>0.154330</td>\n      <td>0.136648</td>\n    </tr>\n    <tr>\n      <th>926.683065</th>\n      <td>0.108641</td>\n      <td>0.151398</td>\n      <td>0.140178</td>\n      <td>0.134014</td>\n      <td>0.170061</td>\n      <td>0.157110</td>\n      <td>0.149876</td>\n      <td>0.130452</td>\n    </tr>\n    <tr>\n      <th>932.877419</th>\n      <td>0.098678</td>\n      <td>0.141859</td>\n      <td>0.129715</td>\n      <td>0.124426</td>\n      <td>0.160590</td>\n      <td>0.147076</td>\n      <td>0.140119</td>\n      <td>0.119561</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1651.422581</th>\n      <td>0.220935</td>\n      <td>0.262070</td>\n      <td>0.259643</td>\n      <td>0.242916</td>\n      <td>0.279041</td>\n      <td>0.271492</td>\n      <td>0.260664</td>\n      <td>0.252704</td>\n    </tr>\n    <tr>\n      <th>1657.616935</th>\n      <td>0.221848</td>\n      <td>0.262732</td>\n      <td>0.260664</td>\n      <td>0.243092</td>\n      <td>0.278962</td>\n      <td>0.272893</td>\n      <td>0.261647</td>\n      <td>0.254481</td>\n    </tr>\n    <tr>\n      <th>1663.811290</th>\n      <td>0.219904</td>\n      <td>0.260335</td>\n      <td>0.258975</td>\n      <td>0.240656</td>\n      <td>0.276382</td>\n      <td>0.271624</td>\n      <td>0.260278</td>\n      <td>0.253761</td>\n    </tr>\n    <tr>\n      <th>1670.005645</th>\n      <td>0.214080</td>\n      <td>0.253475</td>\n      <td>0.253110</td>\n      <td>0.234047</td>\n      <td>0.269528</td>\n      <td>0.265615</td>\n      <td>0.254568</td>\n      <td>0.248288</td>\n    </tr>\n    <tr>\n      <th>1676.200000</th>\n      <td>0.204217</td>\n      <td>0.242375</td>\n      <td>0.243082</td>\n      <td>0.223539</td>\n      <td>0.258771</td>\n      <td>0.255306</td>\n      <td>0.244826</td>\n      <td>0.238663</td>\n    </tr>\n  </tbody>\n</table>\n<p>125 rows Ã— 8 columns</p>\n</div>\n\n\n\n![Multiple spectra spc](https://github.com/OEUM/PySpectra/blob/main/images/output_5_2_MultiSpectraSPC.png?raw=true)\n\n\n# Read .dx spectral files\nPyspectra is also built with a set of regex that allows to read the most common .dx file formats from different vendors like:\n * FOSS\n * Si-Ware Systems\n * Spectral Engines\n * Texas Instruments\n * VIAVI\n\n## Read a single .dx file\n.dx reader can read:\n* Single files containing single spectra : read\n* Single files containing multiple spectra : read\n* Multiple files from directory : read_from_dir\n### Single file, single spectra\n\n\n```python\n# Single file with single spectra\nfrom pyspectra.readers.read_dx import read_dx\n#Instantiate an object\nFoss_single= read_dx()\n# Run  read method\ndf=Foss_single.read(file='pyspectra/sample_spectra/DX multiple files/Example1.dx')\ndf.transpose().plot()\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1f44faa7940>\n\n\n\n\n![Single DX spectra](https://github.com/OEUM/PySpectra/blob/main/images/output_8_1_SingleSpectraDX.png?raw=true)\n\n\n### Single file, multiple spectra:\n.dx reader stores all the information as attributes of the object on Samples. Each key represent a sample.\n\n\n```python\nFoss_single= read_dx()\n# Run  read method\ndf=Foss_single.read(file='pyspectra/sample_spectra/FOSS/FOSS.dx')\ndf.transpose().plot(legend=False)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1f44f7f2e50>\n\n\n\n\n![Multi DX spectra](https://github.com/OEUM/PySpectra/blob/main/images/output_10_1_MultiSpectraDX.png?raw=true)\n\n\n\n```python\nfor c in Foss_single.Samples['29179'].keys():\n    print(c)\n```\n\n    y\n    Conc\n    TITLE\n    JCAMP_DX\n    DATA TYPE\n    CLASS\n    DATE\n    DATA PROCESSING\n    XUNITS\n    YUNITS\n    XFACTOR\n    YFACTOR\n    FIRSTX\n    LASTX\n    MINY\n    MAXY\n    NPOINTS\n    FIRSTY\n    CONCENTRATIONS\n    XYDATA\n    X\n    Y\n\n\n# Spectra preprocessing\nPyspectra has a set of built in classes to perform spectra  pre-processing like: <br>\n* MSC: Multiplicative scattering correction\n* SNV: Standard normal variate\n* Detrend\n* n order derivative\n* Savitzky golay smmothing\n\n\n```python\nfrom pyspectra.transformers.spectral_correction import msc, detrend ,sav_gol,snv\n```\n\n\n```python\nMSC= msc()\nMSC.fit(df)\ndf_msc=MSC.transform(df)\n\n\nf, ax= plt.subplots(2,1,figsize=(14,8))\nax[0].plot(df.transpose())\nax[0].set_title(\"Raw spectra\")\n\nax[1].plot(df_msc.transpose())\nax[1].set_title(\"MSC spectra\")\nplt.show()\n```\n\n\n![MSC transformation](https://github.com/OEUM/PySpectra/blob/main/images/output_14_0_MSC.png?raw=true)\n\n\n\n```python\nSNV= snv()\ndf_snv=SNV.fit_transform(df)\n\nDetr= detrend()\ndf_detrend=Detr.fit_transform(spc=df_snv,wave=np.array(df_snv.columns))\n\nf, ax= plt.subplots(3,1,figsize=(18,8))\nax[0].plot(df.transpose())\nax[0].set_title(\"Raw spectra\")\n\nax[1].plot(df_snv.transpose())\nax[1].set_title(\"SNV spectra\")\n\nax[2].plot(df_detrend.transpose())\nax[2].set_title(\"SNV+ Detrend spectra\")\n\nplt.tight_layout()\nplt.show()\n```\n\n\n![SNV and Detrend transformations](https://github.com/OEUM/PySpectra/blob/main/images/output_15_0_SNV_Detrend.png?raw=true)\n\n\n# Modelling of spectra\n\n## Decompose using PCA\n\n\n```python\npca=PCA()\npca.fit(df_msc)\nplt.figure(figsize=(18,8))\nplt.plot(range(1,len(pca.explained_variance_)+1),100*pca.explained_variance_.cumsum()/pca.explained_variance_.sum())\nplt.grid(True)\nplt.xlabel(\"Number of components\")\nplt.ylabel(\" cumulative % of explained variance\")\n```\n\n\n\n\n\n\n\n\n\n![PCAcumulative variance](https://github.com/OEUM/PySpectra/blob/main/images/output_18_1_PCA_Variance.png?raw=true)\n\n\n\n```python\ndf_pca=pd.DataFrame(pca.transform(df_msc))\nplt.figure(figsize=(18,8))\nplt.plot(df_pca.loc[:,0:25].transpose())\n\n\nplt.title(\"Transformed spectra PCA\")\nplt.ylabel(\"Response feature\")\nplt.xlabel(\"Principal component\")\nplt.grid(True)\nplt.show()\n```\n\n\n![Transformed PCA values](https://github.com/OEUM/PySpectra/blob/main/images/output_19_0_PCA_values.png?raw=true)\n\n\n## Using automl libraries to deploy faster models\n\n\n```python\nimport tpot\nfrom tpot import TPOTRegressor\nfrom sklearn.model_selection import RepeatedKFold\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\nmodel = TPOTRegressor(generations=10, population_size=50, scoring='neg_mean_absolute_error',\n                      cv=cv, verbosity=2, random_state=1, n_jobs=-1)\n```\n\n\n```python\ny=Foss_single.Conc[:,0]\nx=df_pca.loc[:,0:25]\nmodel.fit(x,y)\n```\n\n\n    HBox(children=(FloatProgress(value=0.0, description='Optimization Progress', max=550.0, style=ProgressStyle(deâ€¦\n\n\n\n    Generation 1 - Current best internal CV score: -0.30965836730187607\n\n    Generation 2 - Current best internal CV score: -0.30965836730187607\n\n    Generation 3 - Current best internal CV score: -0.30965836730187607\n\n    Generation 4 - Current best internal CV score: -0.308295313408046\n\n    Generation 5 - Current best internal CV score: -0.308295313408046\n\n    Generation 6 - Current best internal CV score: -0.308295313408046\n\n    Generation 7 - Current best internal CV score: -0.308295313408046\n\n    Generation 8 - Current best internal CV score: -0.3082953134080456\n\n    Generation 9 - Current best internal CV score: -0.3082953134080456\n\n    Generation 10 - Current best internal CV score: -0.3078569602146527\n\n    Best pipeline: LassoLarsCV(PCA(LinearSVR(input_matrix, C=0.1, dual=True, epsilon=0.1, loss=epsilon_insensitive, tol=0.01), iterated_power=3, svd_solver=randomized), normalize=False)\n\n\n\n\n\n    TPOTRegressor(cv=RepeatedKFold(n_repeats=3, n_splits=10, random_state=1),\n                  generations=10, n_jobs=-1, population_size=50, random_state=1,\n                  scoring='neg_mean_absolute_error', verbosity=2)\n\n\n\n\n```python\nfrom sklearn.metrics import r2_score\nr2=round(r2_score(y,model.predict(x)),2)\nplt.scatter(y,model.predict(x),alpha=0.5, color='r')\nplt.plot([y.min(),y.max()],[y.min(),y.max()],LineStyle='--',color='black')\nplt.xlabel(\"y actual\")\nplt.ylabel(\"y predicted\")\nplt.title(\"Spectra model prediction R^2:\"+ str(r2))\n\nplt.show()\n```\n\n\n![TPOT model fit](https://github.com/OEUM/PySpectra/blob/main/images/output_23_0_model_fit.png?raw=true)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OEUM/PySpectra",
    "keywords": "spectroscopy,nir,ftir,raman,spc,dx,foss,viavi,grams",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyspectra",
    "package_url": "https://pypi.org/project/pyspectra/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyspectra/",
    "project_urls": {
      "Homepage": "https://github.com/OEUM/PySpectra"
    },
    "release_url": "https://pypi.org/project/pyspectra/0.0.1.2/",
    "requires_dist": [
      "numpy",
      "pandas",
      "spc-spectra",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "A  python package designed to work with spectroscopy data",
    "version": "0.0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8618034,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "688cac102b9c6a0de77cc5b299d555999428e6edec16ad9b73b0c760ae9b6abf",
          "md5": "32067ad8d0282bac6fe7b794a11f8779",
          "sha256": "f5c9756736ce58740cc5a18d5ac12b71dbfc7b1599b6c53aa102d4e86bfbe8a1"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32067ad8d0282bac6fe7b794a11f8779",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22411,
        "upload_time": "2020-11-07T17:47:31",
        "upload_time_iso_8601": "2020-11-07T17:47:31.169394Z",
        "url": "https://files.pythonhosted.org/packages/68/8c/ac102b9c6a0de77cc5b299d555999428e6edec16ad9b73b0c760ae9b6abf/pyspectra-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c89ea870d649b9e0f7b0040c9d6f8642cfa57b86c3f508d4fb1526a90b52ccca",
          "md5": "5f4e9929cedc1c7d2c9bddaa76e19795",
          "sha256": "5f5a47664e4d711ee626a8da9f7bfe429c07310db4a7d6ae4f824bdccbb1f0b1"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5f4e9929cedc1c7d2c9bddaa76e19795",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14003,
        "upload_time": "2020-11-07T17:47:34",
        "upload_time_iso_8601": "2020-11-07T17:47:34.470781Z",
        "url": "https://files.pythonhosted.org/packages/c8/9e/a870d649b9e0f7b0040c9d6f8642cfa57b86c3f508d4fb1526a90b52ccca/pyspectra-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f18d7063c7d5e506b8bdd8216418838d9f0f7da7a8d5666e4d7b5681b2204ba8",
          "md5": "7b4829917318f173644a892ad7cd3c80",
          "sha256": "4f5a74180bb03ecde31df2edb998b96ee9af0927feaa8d9f7b143ed8d2fad9fc"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b4829917318f173644a892ad7cd3c80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22569,
        "upload_time": "2020-11-07T18:50:32",
        "upload_time_iso_8601": "2020-11-07T18:50:32.286786Z",
        "url": "https://files.pythonhosted.org/packages/f1/8d/7063c7d5e506b8bdd8216418838d9f0f7da7a8d5666e4d7b5681b2204ba8/pyspectra-0.0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af2502658d40b9257ff313a59591d409d94bef8fdbe1200265992bb8d0870584",
          "md5": "17b4bde165a9da9eb76c13e29fc590d0",
          "sha256": "35f257f519e5b8d0347c83d74ec4a144d5566d9966a96d72fd2532bd060d9a31"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17b4bde165a9da9eb76c13e29fc590d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14327,
        "upload_time": "2020-11-07T18:50:34",
        "upload_time_iso_8601": "2020-11-07T18:50:34.226960Z",
        "url": "https://files.pythonhosted.org/packages/af/25/02658d40b9257ff313a59591d409d94bef8fdbe1200265992bb8d0870584/pyspectra-0.0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34cd072c984e3a3130f1f1dd9423c8e1a97b312cb09f616ebcd8ba09b9b0f03d",
          "md5": "463336238d2c8d835b2bc5430824b298",
          "sha256": "ad0965ee554f0fb4d2e2982d95f7c315195206faba30960200956d213f49f154"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "463336238d2c8d835b2bc5430824b298",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22579,
        "upload_time": "2020-11-09T21:49:41",
        "upload_time_iso_8601": "2020-11-09T21:49:41.733637Z",
        "url": "https://files.pythonhosted.org/packages/34/cd/072c984e3a3130f1f1dd9423c8e1a97b312cb09f616ebcd8ba09b9b0f03d/pyspectra-0.0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2db5596a5300bcfd5844138b9097c01b6672680005c5a98b97881c43400b57e",
          "md5": "9e042b1ea94f8fd9b09283071701f92d",
          "sha256": "2b31be5a7a31883f105ea286fa272fe1b1e70ce551ae34d11028267392df04e6"
        },
        "downloads": -1,
        "filename": "pyspectra-0.0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e042b1ea94f8fd9b09283071701f92d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14190,
        "upload_time": "2020-11-09T21:49:43",
        "upload_time_iso_8601": "2020-11-09T21:49:43.204035Z",
        "url": "https://files.pythonhosted.org/packages/d2/db/5596a5300bcfd5844138b9097c01b6672680005c5a98b97881c43400b57e/pyspectra-0.0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34cd072c984e3a3130f1f1dd9423c8e1a97b312cb09f616ebcd8ba09b9b0f03d",
        "md5": "463336238d2c8d835b2bc5430824b298",
        "sha256": "ad0965ee554f0fb4d2e2982d95f7c315195206faba30960200956d213f49f154"
      },
      "downloads": -1,
      "filename": "pyspectra-0.0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "463336238d2c8d835b2bc5430824b298",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22579,
      "upload_time": "2020-11-09T21:49:41",
      "upload_time_iso_8601": "2020-11-09T21:49:41.733637Z",
      "url": "https://files.pythonhosted.org/packages/34/cd/072c984e3a3130f1f1dd9423c8e1a97b312cb09f616ebcd8ba09b9b0f03d/pyspectra-0.0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2db5596a5300bcfd5844138b9097c01b6672680005c5a98b97881c43400b57e",
        "md5": "9e042b1ea94f8fd9b09283071701f92d",
        "sha256": "2b31be5a7a31883f105ea286fa272fe1b1e70ce551ae34d11028267392df04e6"
      },
      "downloads": -1,
      "filename": "pyspectra-0.0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9e042b1ea94f8fd9b09283071701f92d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14190,
      "upload_time": "2020-11-09T21:49:43",
      "upload_time_iso_8601": "2020-11-09T21:49:43.204035Z",
      "url": "https://files.pythonhosted.org/packages/d2/db/5596a5300bcfd5844138b9097c01b6672680005c5a98b97881c43400b57e/pyspectra-0.0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}