{
  "info": {
    "author": "Josh Borrow",
    "author_email": "josh@joshborrow.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "ScRunner\n========\n\nScRunner is a script runner for python.\n\nIt specialises in running a repeated set of analysis scripts on similar data,\nand allows you to collect scripts together with metadata for easy\ncomparisons.\n\nThe scripts must all use the same argument parser API, and\nmust contain frontmatter in the docstring to describe the figures\nthat will be made.\n\nThese figures can then be combined together into a webpage for easy\nviewing. ScRunner is a simplified, generalised, version of the\n[`swift-pipeline`](https://github.com/swiftsim/pipeline), along\nwith [PagePlot](https://github.com/jborrow/pageplot).\n\nRequirements\n------------\n\nThis package only has two requirements:\n\n+ `attrs`\n+ `jinja2`\n\nScript API\n----------\n\nScripts must include frontmatter in their docstring, as follows (with\nexamples):\n\n```python\n\"\"\"\nBasic script description\n\n---\n{\n\"name\": \"test_script.py\",\n\"created_by\": \"Josh Borrow\",\n\"contact_email\": \"borrowj@mit.edu\",\n\"capture_stdout\": \"True\",\n\"outputs\": [\n    {\n        \"filename\": \"stellar_density_image\",\n        \"title\": \"Stellar Halo Image\",\n        \"description\": \"Projected stellar density through entire selected volume (as a 2D histogram). Haloes with $M_* > 10^6$ M$_\\\\odot$ are shown as points.\",\n        \"multi_output\": \"False\"\n    },\n    {\n        \"filename\": \"stellar_density_image_individual\",\n        \"title\": \"Stellar Halo Image\",\n        \"description\": \"Projected stellar density for individual objects\",\n        \"multi_output\": \"True\"\n    }\n],\n\"ancillary_outputs\": [\n    {\n        \"filename\": \"parameters.txt\",\n        \"title\": \"Runtime Parameters\"\n    },\n    {\n        \"filename\": \"config.txt\",\n        \"title\": \"Compile-time Parameters\"\n    }\n]\n}\n---\n```\n\nThe frontmatter should be valid JSON (i.e. it must not have\ntrailing commas).\n\nThis script should then produce two sets of figures (listed in \"outputs\"),\nand two additional outputs (\"parameters.txt\" and \"config.txt\"). The first,\na single figure, called `stellar_density_image.png` (or other given\nfile extension, decided at runtime), and a series of figures called\n`stellar_density_image_individual_0.png` up to a number determined\nat run time. If \"capture_stdout\" is `True`, then the standard output\nof this script will be captured and displayed at the top of the webpage.\nIt is suggested that the script prints valid HTML.\n\nWithin the script, the `ScriptArgumentParser` must be used, as\nfollows:\n\n```python\nfrom scrunner import ScriptArgumentParser\narguments = ScriptArgumentParser()\n```\n\nThe `arguments` instance will then take a number\nof command-line arguments, as follows:\n\n```\nusage: star_images.py [-h] -d [DATA ...] -o OUTPUT_DIRECTORY -f FILE_TYPE -n\n                      NUMBER_OF_FIGURES [-s STYLESHEET]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d [DATA ...], --data [DATA ...]\n                        Data input files. Example: test_0.hdf5 test_1.hdf5\n  -o OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n                        Output directory for the produced figures.\n  -f FILE_TYPE, --file-type FILE_TYPE\n                        File type (extension) for the output files\n  -n NUMBER_OF_FIGURES, --number-of-figures NUMBER_OF_FIGURES\n                        Number of figures to create with this script.\n  -s STYLESHEET, --stylesheet STYLESHEET\n                        Matplotlib stylesheet to use\n```\n\nThese should be accessed and used within the script in\nthe folowing ways:\n\n### Data\n\nThe data argument will be a list of data paths, received from the\nmain script runner (see later). These will be given in the same\norder to all scripts.\n\n```python\narguments.data\n>>> [PosixPath(\"./DataFileOne.hdf5\"), PosixPath(\"./DataFileTwo.hdf5\")]\n```\n\n### Number of Figures\n\nThe number of figures is simply an integer describing the number\nof figures that plots tagged with `\"multi_output\": \"true\"` should\noutput. The webpage will expect this many figures.\n\n```\narguments.number_of_figures\n>>> 5\n```\n\n### Matplotlib Stylesheet\n\nTo ensure a consistent stylesheet across your output figures,\nit is highly recommended that you use the stylesheet argument\nin your script:\n\n```python\nimport matplotlib.pyplot as plt\nplt.style.use(arguments.stylesheet)\n```\n\n### Saving Figures\n\nThere are two arguments that the script argument parser\ntakes, `output_directory`, and `file_type`. It's recommended\nthat, instead of using these yourself, you use the provided\n`get_filename_for_output` method:\n\n```python\narguments.get_filename_for_output(\n    base_name=\"stellar_density_image\"\n)\n>>> PosixPath(\"output_path/stellar_density_image.png\")\n\narguments.get_filename_for_output(\n    base_name=\"stellar_density_image_individual\",\n    output_number=3,\n)\n>>> PosixPath(\"output_path/stellar_density_image_individual_3.png\")\n```\n\nNot providing the `output_number` argument provides the\nfile path for a non-multi-output figure.\n\nAncillary outputs should make use of the `arguments.output_directory`\nto save to the correct location.\n\n\nRunning Scripts\n---------------\n\nRunning a collection of scripts is as simple as placing\nthem all in the same directory, and using the command-line\ntool `scrun`:\n\n```\nscrun \\\n  -d data_file_one.csv data_file_two.csv \\\n  -p /home/josh/scripts_to_run \\\n  -o ./my_outputs/output_7 \\\n  -f png \\\n  -n 3 \\\n  -s /home/josh/stylesheet.mplstyle\n```\n\nWhere all of these will be passed as expected through to the\nscripts, except for `-r` which is the directory containing all\nscripts to run.\n\nIn your output folder, which will be created if it does not exist,\nyou will find an `index.html` file, which provides a summary of\nyour outputs.\n\nOn completion, `scrun` will print:\n```\nSuccessfully completed 2 scripts\nThere were 0 failures\nThere were 0 scripts that raised warnings\n```\nand individual stdout and stderr from your scripts,\nif they raise a warning or fail.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jborrow/scrunner",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scrunner",
    "package_url": "https://pypi.org/project/scrunner/",
    "platform": "",
    "project_url": "https://pypi.org/project/scrunner/",
    "project_urls": {
      "Homepage": "https://github.com/jborrow/scrunner"
    },
    "release_url": "https://pypi.org/project/scrunner/0.1.2/",
    "requires_dist": [
      "attrs (>=21.0.0)",
      "jinja2 (>3.0.0)"
    ],
    "requires_python": "",
    "summary": "Runs scripts with associated metadata and puts together a summary page.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12818740,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbc5c9ad3a2694bffe86e67291b87b56de876b57b5b60caa22da7408b147cc85",
          "md5": "25ccc75721a5f7dc40a93cf837795f9c",
          "sha256": "210e2fb4006452add3db5bd0efddf6e4f1e82d5369c0e846ecdcd852c87aed9f"
        },
        "downloads": -1,
        "filename": "scrunner-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25ccc75721a5f7dc40a93cf837795f9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12848,
        "upload_time": "2022-01-14T16:58:03",
        "upload_time_iso_8601": "2022-01-14T16:58:03.529957Z",
        "url": "https://files.pythonhosted.org/packages/fb/c5/c9ad3a2694bffe86e67291b87b56de876b57b5b60caa22da7408b147cc85/scrunner-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be3b7eeca9f79507c5ff3bc71dea6e4e5cec1c594ac4984158cd631a51b88575",
          "md5": "71822f90e1f3de3e0dda493c4f24a3f2",
          "sha256": "95cf6c1e52491d570d8a9e1ea2ad9e0fbbe2a56befd0ff179b77de438fd26665"
        },
        "downloads": -1,
        "filename": "scrunner-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71822f90e1f3de3e0dda493c4f24a3f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12852,
        "upload_time": "2022-01-14T16:58:39",
        "upload_time_iso_8601": "2022-01-14T16:58:39.434592Z",
        "url": "https://files.pythonhosted.org/packages/be/3b/7eeca9f79507c5ff3bc71dea6e4e5cec1c594ac4984158cd631a51b88575/scrunner-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8376ddd992ca8f01a3693d4d722603798ba43b8bb095ff1ca56c4ae773baa63",
          "md5": "b750d2f83249ae88bc7cdbf474e65eee",
          "sha256": "6c745090dd1ba3d085ab77f725df29217aad67464613885bad050d3f5929d75f"
        },
        "downloads": -1,
        "filename": "scrunner-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b750d2f83249ae88bc7cdbf474e65eee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12919,
        "upload_time": "2022-01-14T18:12:47",
        "upload_time_iso_8601": "2022-01-14T18:12:47.109953Z",
        "url": "https://files.pythonhosted.org/packages/f8/37/6ddd992ca8f01a3693d4d722603798ba43b8bb095ff1ca56c4ae773baa63/scrunner-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c59f3088c3006308cdb3f0fbd49b872e031ea60d653869966d61428a9b8788",
          "md5": "024a2738d126a7a2915ac867a7fc2a0f",
          "sha256": "646515a2b0ce3095c8d9641f2414f789cb055c6555a657582b2eb0113344abe7"
        },
        "downloads": -1,
        "filename": "scrunner-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "024a2738d126a7a2915ac867a7fc2a0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12919,
        "upload_time": "2022-02-07T21:25:09",
        "upload_time_iso_8601": "2022-02-07T21:25:09.680666Z",
        "url": "https://files.pythonhosted.org/packages/a6/c5/9f3088c3006308cdb3f0fbd49b872e031ea60d653869966d61428a9b8788/scrunner-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6c59f3088c3006308cdb3f0fbd49b872e031ea60d653869966d61428a9b8788",
        "md5": "024a2738d126a7a2915ac867a7fc2a0f",
        "sha256": "646515a2b0ce3095c8d9641f2414f789cb055c6555a657582b2eb0113344abe7"
      },
      "downloads": -1,
      "filename": "scrunner-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "024a2738d126a7a2915ac867a7fc2a0f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12919,
      "upload_time": "2022-02-07T21:25:09",
      "upload_time_iso_8601": "2022-02-07T21:25:09.680666Z",
      "url": "https://files.pythonhosted.org/packages/a6/c5/9f3088c3006308cdb3f0fbd49b872e031ea60d653869966d61428a9b8788/scrunner-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}