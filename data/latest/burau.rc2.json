{
  "info": {
    "author": "Søren Fuglede Jørgensen",
    "author_email": "pypi@fuglede.dk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Burau\n=====\n\nMethods for finding kernel elements of the B_4 Burau representation,\nor helping to show that no non-trivial elements of the kernel exist.\n\nBackground\n----------\nHere, we follow the lead from Bigelow [0]_ and consider a particular family of\npairs of curves in the four-punctured disc. We follow more or less the same\nprescription as in Bigelow's C implementation currently available at::\n\n    https://github.com/freshbugs/burau4/blob/master/iv.c\n\nand in particular, we thank Bigelow for useful ideas on how to represent the\ncurves: We place the four punctures in a square, identifing them in our\nexplanation via compass directions. In the notation of [0], we let\n\\alpha denote the curve connecting the two south punctures, ordered so\nthat the code below does not have any sign mistakes::\n\n    ╳  ╳\n\n    ╳──╳\n\nThe curve \\beta is more complicated. The two north punctures are placed\nat the middle of two caps, each consisting of a given number of parallel\ncurves, the two south punctures at the middle of two such multi-cups, two\nvertical strands are pulled south from each of the two north punctures, and a\nmulti-cap extending above the two north caps ensures that everything can be\ntied together.\n\nAs an example, suppose ``cap_west = 2``, ``cap_east = 1``, ``cup_west = 3``,\nand ``cup_east = 2``. Then, joining the north and south halves of the picture,\nwe have::\n\n    num_strands = 2 * (cup_west + cup_east) = 10\n\nstrands, and to tie things together, we need an outer cap containing::\n\n   cap_outer = cup_west + cup_east - (cap_west + cap_east + 1) = 1\n\nstrand. At the end of the day, we get a picture that looks as follows (not\nincluding the drawing of \\alpha)::\n\n    ┌─────────────────┐\n    │ ┌───────┐       │\n    │ │ ┌───┐ │ ┌───┐ │\n    │ │ │ ╳ │ │ │ ╳ │ │\n    │ │ │ │ │ │ │ │ │ │\n    │ │ │╳│ │ │ │ │╳│ │\n    │ │ └─┘ │ │ │ └─┘ │\n    │ └─────┘ │ └─────┘\n    └─────────┘\n\nNote that for this picture to make sense, we must require that::\n\n    cup_west + cup_east - (cap_west + cap_east) > 0.\n\nOur goal is to calculate, in the notation of Bigelow [0]_,\n\\int_\\beta \\alpha. As such, we follow \\beta from the northwest\npuncture to the northeast puncture, along the way keeping track of\nintersections with \\alpha. Each intersection contributes a summand\n\\pm t^k, in which the sign of the coefficient is determined by whether\nwe intersect from the north or the south, and whose power is determined by the\ncurrent \"level\". To determine this power, we picture our four-punctured disk as\nthe vertical projection of a parking garage that extends infinitely up and down\n(see Wikipedia [1]_ for an illustration), with a copy of \\alpha living\nin each level. We start at level 0 of the garage, and as we move along, we may\nencounter four \"ramps\" that take us between different levels::\n\n    down             up\n   ──────╳        ╳──────\n     up             down\n\n    down             up\n   ──────╳        ╳──────\n     up             down\n\nWith the example \\beta above, we first encounter an \\alpha at\nlevel 0 from the north, giving us a summand of t^0. Then, we loop\naround, encounter two ramps, both of which take us down a level, before we\nencounter \\alpha from the north again, now at level -2, giving us a\nsummand of t^{-2}. A bit later, we get a t^{-4} before we loop\nall the way around, encounter four down-ramps, then intersect \\alpha\nfrom the south, this time changing the sign, so we get a -t^{-8} and a\nbit later a -t^{-10}. Adding all of these up, we find that\n\n    \\int_\\beta \\alpha = 1 + t^{-2} + t^{-4} - t^{-8} - t^{-10}\n\nTo show that the Burau representation of B_4 is not faithful amounts to\nfinding a non-trivial \\beta so that the above polynomial is 0.\n\nUsage\n-----\n\nThe package can be installed from PyPI::\n\n    pip install burau\n\nThe above example can be reproduced using the functionality of this Python\nmodule as follows:\n\n>>> from burau.curve import calculate_polynomial\n>>> calculate_polynomial(cap_west=2, cap_east=1, cup_west=3, cup_east=2)\n(DictType[int64,int64]<iv=None>({0: 1, -2: 1, -4: 1, -8: -1, -10: -1}), True, 5)\n\nHere, the first output is a dictionary mapping a power of the polynomial to the\ncoefficient of that power. The second output indicates that the curve beta is\na connected curve (an example for which this is not the case is the\ninput (1, 1, 3, 3)). The third output is the number of crossings with\n\\alpha encountered along the way.\n\nA kernel element thus corresponds to the empty dictionary. The implementation\nuses Numba under the hood to improve the speed of the calculation. We also\nprovide a more vanilla Python implementation which is about 100x slower than\nthe Numba-friendly one, but is easier to read and can be used if system\nrestrictions make it impossible to run Numba.\n\nReferences\n----------\n.. [0] Bigelow, Stephen (1999). \"The Burau representation is not faithful\n       for n = 5\". Geometry & Topology. 3: 397–404. arXiv:math/9904100.\n       doi:10.2140/gt.1999.3.397.\n.. [1] https://en.wikipedia.org/wiki/Burau_representation..\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fuglede/burau",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "burau",
    "package_url": "https://pypi.org/project/burau/",
    "platform": "",
    "project_url": "https://pypi.org/project/burau/",
    "project_urls": {
      "Homepage": "https://github.com/fuglede/burau"
    },
    "release_url": "https://pypi.org/project/burau/0.0.3/",
    "requires_dist": [
      "numba",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Search for non-trivial elements of the kernel of the Burau representation of the four-strand braid group.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11613455,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "348e6cbd02f2dc7795d8f911ec1c4c8055d5beb3ab4db4fa4908bfed6668035b",
          "md5": "7c357e69073015ce8e56c34943ce13da",
          "sha256": "b35783d5aa0ecb4feca932be02f2b7b901253aa8be881b118a934f6c35d7c5e5"
        },
        "downloads": -1,
        "filename": "burau-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c357e69073015ce8e56c34943ce13da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7126,
        "upload_time": "2020-10-08T19:44:15",
        "upload_time_iso_8601": "2020-10-08T19:44:15.662779Z",
        "url": "https://files.pythonhosted.org/packages/34/8e/6cbd02f2dc7795d8f911ec1c4c8055d5beb3ab4db4fa4908bfed6668035b/burau-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52b85c8b8eda06311d4c70eda49d872ce884388464830e11331465371405e33e",
          "md5": "49625845bf65f61785be20e9a2e5a616",
          "sha256": "66594b57f26003091ccf82852df94e06e40fb221917810507ffbdc1f41921f27"
        },
        "downloads": -1,
        "filename": "burau-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "49625845bf65f61785be20e9a2e5a616",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6956,
        "upload_time": "2020-10-08T19:44:16",
        "upload_time_iso_8601": "2020-10-08T19:44:16.725420Z",
        "url": "https://files.pythonhosted.org/packages/52/b8/5c8b8eda06311d4c70eda49d872ce884388464830e11331465371405e33e/burau-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71df77fe960c0ed7e01418709ddff61782c21358e67d86fd8539ccac413d8ef8",
          "md5": "3e277c8bfee4dcd470a21f8bf296bc7f",
          "sha256": "f5af808687fa6edb7c810d1ce4341e776faf69c3e5d3fb0a7b5704e7584bbec1"
        },
        "downloads": -1,
        "filename": "burau-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e277c8bfee4dcd470a21f8bf296bc7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7988,
        "upload_time": "2021-10-02T20:04:25",
        "upload_time_iso_8601": "2021-10-02T20:04:25.612803Z",
        "url": "https://files.pythonhosted.org/packages/71/df/77fe960c0ed7e01418709ddff61782c21358e67d86fd8539ccac413d8ef8/burau-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eaf6c20233fdcb30c35475761098355daad1cdf40fbc1f45b342231c301dac3",
          "md5": "7a080dcb00aba73282f50b763d4213db",
          "sha256": "5fdca2686f6e73a65fed9ed9805d14a00cf4ae66febe95a1203ddbafb268cadb"
        },
        "downloads": -1,
        "filename": "burau-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7a080dcb00aba73282f50b763d4213db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7425,
        "upload_time": "2021-10-02T20:04:26",
        "upload_time_iso_8601": "2021-10-02T20:04:26.890431Z",
        "url": "https://files.pythonhosted.org/packages/5e/af/6c20233fdcb30c35475761098355daad1cdf40fbc1f45b342231c301dac3/burau-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71df77fe960c0ed7e01418709ddff61782c21358e67d86fd8539ccac413d8ef8",
        "md5": "3e277c8bfee4dcd470a21f8bf296bc7f",
        "sha256": "f5af808687fa6edb7c810d1ce4341e776faf69c3e5d3fb0a7b5704e7584bbec1"
      },
      "downloads": -1,
      "filename": "burau-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3e277c8bfee4dcd470a21f8bf296bc7f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7988,
      "upload_time": "2021-10-02T20:04:25",
      "upload_time_iso_8601": "2021-10-02T20:04:25.612803Z",
      "url": "https://files.pythonhosted.org/packages/71/df/77fe960c0ed7e01418709ddff61782c21358e67d86fd8539ccac413d8ef8/burau-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5eaf6c20233fdcb30c35475761098355daad1cdf40fbc1f45b342231c301dac3",
        "md5": "7a080dcb00aba73282f50b763d4213db",
        "sha256": "5fdca2686f6e73a65fed9ed9805d14a00cf4ae66febe95a1203ddbafb268cadb"
      },
      "downloads": -1,
      "filename": "burau-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7a080dcb00aba73282f50b763d4213db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7425,
      "upload_time": "2021-10-02T20:04:26",
      "upload_time_iso_8601": "2021-10-02T20:04:26.890431Z",
      "url": "https://files.pythonhosted.org/packages/5e/af/6c20233fdcb30c35475761098355daad1cdf40fbc1f45b342231c301dac3/burau-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}