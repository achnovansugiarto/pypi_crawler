{
  "info": {
    "author": "",
    "author_email": "Alex Marienko <alexey.maryenko@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Operating System :: POSIX :: Other",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "|Test Package| |Black badge|\n\nTerminal Formatters\n===================\n\nSimple Python package for producing colored and formated terminal text.\n\n|colored-text-python|\n\nTerminals traditionally take an input of bytes and display them as white\ntext on a black background. But if the input contains specific CSI\n(Control Sequence Introducer) sequences then the terminal may alter\ncertain display properties of the text, such as the style or color.\nUsing styles and colors in console applications helps us analyze\ninformation faster and focus on important parts of the displayed\ninformation.\n\nThe package creates ANSI escape character sequences for changing the\ncolor and style of the font, based on human-readable parameters like\n``black``, ``green``, ``italic`` etc.\n\nANSI Escape Codes for Terminal Graphics\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `ANSI escape code\nstandard <https://en.wikipedia.org/wiki/ANSI_escape_code>`__, formally\nadopted as `ISO/IEC\n6429 <https://www.ecma-international.org/publications/standards/Ecma-048.htm>`__,\ndefines a series of control sequences. Each control sequence begins with\na *Control Sequence Introducer* (CSI), defined as an escape character\nfollowed immediately by a bracket: ``ESC[``. The ANSI ASCII standard\nrepresents the escape ESC character by the decimal number 27 (33 in\noctal, 1B in hexadecimal). The ``ESC[`` is followed by any number\n(including none) of \"parameter bytes\" in the range ``0x30–0x3F`` (ASCII\n``0–9:;<=>?``), then by any number of \"intermediate bytes\" in the range\n``0x20–0x2F`` (ASCII ``space`` and ``!\"#$%&'()*+,-./)``, then finally by\na single \"final byte\" in the range ``0x40–0x7E`` (ASCII\n``@A–Z[\\]^_``\\ a–z{|}~`).\n\nAll common sequences just use the parameters as a series of\nsemicolon-separated numbers. Missing numbers are treated as 0 and no\nparameters at all in ``ESC[m`` acts like a 0 reset code.\n\nSelect Graphic Rendition (SGR) parameters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe control sequence ``CSI n m``, named *Select Graphic Rendition*\n(SGR), sets display attributes. Several attributes can be set in the\nsame sequence, separated by semicolons. Each display attribute remains\nin effect until a following occurrence of SGR resets it. If no codes are\ngiven, ``CSI m`` is treated as ``CSI 0 m`` (reset / normal).\n\nThe package uses only basic parameters to control the font style and its\ncolor. The most commonly used SGR parameters to control the font style\nin the range (0-8) and the 8 actual colors within the ranges (30-37,\n40-47, 90-97, 100-107) are defined by the ANSI standard. The package put\nthese parameters together to create a full SGR command.\n\nThe original specification only had 8 colors, and just gave them names.\nThe SGR parameters ``30–37`` selected the foreground color, while\n``40–47`` selected the background. Quite a few terminals implemented\n\"bold\" (SGR code ``1``) as a brighter color rather than a different\nfont, thus providing 8 additional foreground colors. Usually you could\nnot get these as background colors, though sometimes inverse video (SGR\ncode 7) would allow that. Examples: to get black letters on white\nbackground use ``ESC[30;47m``, to get red use ``ESC[31m``, to get bright\nred use ``ESC[1;31m``. To reset colors to their defaults, use\n``ESC[39;49m`` (not supported on some terminals), or reset all\nattributes with ``ESC[0m``. Later terminals added the ability to\ndirectly specify the \"bright\" colors with ``90–97`` and ``100–107``.\n\nThe following diagram shows the complete text style and color rendering\nscheme.\n\n|how-to-print-colored-text-in-python|\n\nThe package supports the parameters shown in the tables below:\n\nFont Styles\n^^^^^^^^^^^\n\n+-----------+---------------------------+---------------------------+\n| Parameter | Name                      | Note                      |\n+===========+===========================+===========================+\n| 0         | Reset or normal           | All attributes off        |\n+-----------+---------------------------+---------------------------+\n| 1         | Bold or increased         | As with faint, the color  |\n|           | intensity                 | change is a PC (SCO/CGA)  |\n|           |                           | invention                 |\n+-----------+---------------------------+---------------------------+\n| 2         | Faint, decreased          | May be implemented as a   |\n|           | intensity, or dim         | light font weight like    |\n|           |                           | bold                      |\n+-----------+---------------------------+---------------------------+\n| 3         | Italic                    | Not widely supported.     |\n|           |                           | Sometimes treated as      |\n|           |                           | inverse or blink          |\n+-----------+---------------------------+---------------------------+\n| 4         | Underline                 | Style extensions exist    |\n|           |                           | for Kitty, VTE, mintty    |\n|           |                           | and iTerm2                |\n+-----------+---------------------------+---------------------------+\n| 5         | Blink or Slow blink       | Sets blinking to less     |\n|           |                           | than 150 times per minute |\n+-----------+---------------------------+---------------------------+\n| 7         | Negative, Reverse or      | Swap foreground and       |\n|           | invert                    | background colors;        |\n|           |                           | inconsistent emulation    |\n+-----------+---------------------------+---------------------------+\n| 8         | Conceal or hide           | Not widely supported      |\n+-----------+---------------------------+---------------------------+\n\nForeground/Background Colors\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n========== ========== ====================\nForeground Background Name\n========== ========== ====================\n30         40         Black\n31         41         Red\n32         42         Green\n33         43         Yellow\n34         44         Blue\n35         45         Magenta\n36         46         Cyan\n37         47         White\n90         100        Black Bright or Grey\n91         101        Red Bright\n92         102        Green Bright\n93         103        Yellow Bright\n94         104        Blue Bright\n95         105        Magenta Bright\n96         106        Cyan Bright\n97         107        Bright\n========== ========== ====================\n\nTest scripts in the source code repository print formatted/colored\ntables using supported ANSI sequences. The following styles and colors\nworks with most terminal applications.\n\n|colored-style--python|\n\n|colored-text--python|\n\nThe package has no requirements other than the standard library.\n\nUsage\n~~~~~\n\nHow to use the module in your own python code:\n\n.. code-block:: python\n\n   from termformatters import StyleFormatters\n   from termformatters import ForegroundFormatters\n   from termformatters import BackgroundFormatters\n\n   \"\"\"Creating Formatters Instances\"\"\"\n   S = StyleFormatters()\n   FG = ForegroundFormatters()\n   BG = BackgroundFormatters()\n\n   print(FG.green(\"Printing `Green` colored text\"))\n   print(FG.cyan(\"Printing `Cyan` colored text\"))\n   print(\n       S.bold(\n           FG.white_bright(\n               \"Printing `Bold` and `White Bright` text\"\n           )\n       )\n   )\n   print(\n       FG.yellow(\n           BG.blue_bright(\n               \"Printing `Yellow` text on `Blue` background\"\n           )\n       )\n   )\n\nReferences\n~~~~~~~~~~\n\n-  `ANSI escape code\n   standard <https://en.wikipedia.org/wiki/ANSI_escape_code>`__\n-  `ISO/IEC\n   6429 <https://www.ecma-international.org/publications/standards/Ecma-048.htm>`__\n\n.. |colored-text-python| image:: https://user-images.githubusercontent.com/101603641/195454314-e0b5352f-3312-496a-a9aa-1f67ac370efc.jpg\n.. |how-to-print-colored-text-in-python| image:: https://user-images.githubusercontent.com/101603641/195437212-1de20dbd-47ce-43fa-826f-e8f069813e3b.jpg\n.. |colored-style--python| image:: https://user-images.githubusercontent.com/101603641/195454430-4856cf8d-3a71-4584-b462-cf56430c5d64.gif\n.. |colored-text--python| image:: https://user-images.githubusercontent.com/101603641/195454450-625c2d22-0b2e-4db0-8016-7c4cafad6116.jpg\n.. |Test Package| image:: https://github.com/amarienko/TerminalFormatters/actions/workflows/termformatters-main-lint-and-test.yaml/badge.svg?branch=main\n   :target: https://github.com/amarienko/TerminalFormatters/actions/workflows/termformatters-main-lint-and-test.yaml\n.. |Black badge| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "terminal,font,colors,styles,formatter",
    "license": "MIT License Copyright (c) 2022 Alex Marienko Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "termformatters",
    "package_url": "https://pypi.org/project/termformatters/",
    "platform": null,
    "project_url": "https://pypi.org/project/termformatters/",
    "project_urls": {
      "Bug Tracker": "https://github.com/amarienko/TerminalFormatters/issues",
      "Homepage": "https://github.com/amarienko/TerminalFormatters"
    },
    "release_url": "https://pypi.org/project/termformatters/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Terminal font style and base 16 colors formatters",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15443181,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76fdffa84bfe37d7da5b35c756dededae9ac38a27b72d3c715591b8d31e54711",
          "md5": "97709d40da219c241a7f57114de9fc2e",
          "sha256": "f4d5e45e9ee98cf3625bb0f755644cc86afb54ce10edb67da60197b4a44cea1e"
        },
        "downloads": -1,
        "filename": "termformatters-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97709d40da219c241a7f57114de9fc2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 13484,
        "upload_time": "2022-10-18T00:56:24",
        "upload_time_iso_8601": "2022-10-18T00:56:24.074855Z",
        "url": "https://files.pythonhosted.org/packages/76/fd/ffa84bfe37d7da5b35c756dededae9ac38a27b72d3c715591b8d31e54711/termformatters-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82da949165b54fa2f8b041e152d7a770fe08e1ce2eb03e4f2f75528a9ac6827c",
          "md5": "b6a9d8908d853b42468b85530eb9800a",
          "sha256": "01a1f2128b823c701bda9539b6177dbb1f47f370c897e710a9e61eb40f8d329b"
        },
        "downloads": -1,
        "filename": "termformatters-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b6a9d8908d853b42468b85530eb9800a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 14271,
        "upload_time": "2022-10-18T00:56:25",
        "upload_time_iso_8601": "2022-10-18T00:56:25.974462Z",
        "url": "https://files.pythonhosted.org/packages/82/da/949165b54fa2f8b041e152d7a770fe08e1ce2eb03e4f2f75528a9ac6827c/termformatters-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76fdffa84bfe37d7da5b35c756dededae9ac38a27b72d3c715591b8d31e54711",
        "md5": "97709d40da219c241a7f57114de9fc2e",
        "sha256": "f4d5e45e9ee98cf3625bb0f755644cc86afb54ce10edb67da60197b4a44cea1e"
      },
      "downloads": -1,
      "filename": "termformatters-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "97709d40da219c241a7f57114de9fc2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 13484,
      "upload_time": "2022-10-18T00:56:24",
      "upload_time_iso_8601": "2022-10-18T00:56:24.074855Z",
      "url": "https://files.pythonhosted.org/packages/76/fd/ffa84bfe37d7da5b35c756dededae9ac38a27b72d3c715591b8d31e54711/termformatters-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82da949165b54fa2f8b041e152d7a770fe08e1ce2eb03e4f2f75528a9ac6827c",
        "md5": "b6a9d8908d853b42468b85530eb9800a",
        "sha256": "01a1f2128b823c701bda9539b6177dbb1f47f370c897e710a9e61eb40f8d329b"
      },
      "downloads": -1,
      "filename": "termformatters-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b6a9d8908d853b42468b85530eb9800a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 14271,
      "upload_time": "2022-10-18T00:56:25",
      "upload_time_iso_8601": "2022-10-18T00:56:25.974462Z",
      "url": "https://files.pythonhosted.org/packages/82/da/949165b54fa2f8b041e152d7a770fe08e1ce2eb03e4f2f75528a9ac6827c/termformatters-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}