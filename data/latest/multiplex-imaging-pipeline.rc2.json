{
  "info": {
    "author": "Erik Storrs",
    "author_email": "estorrs@wustl.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# multiplex-imaging-pipeline\n\nA pipeline for multiplex imaging analysis\n\n\n\n## Installation\n\n```bash\npip install multiplex-imaging-pipeline\n```\n\n## Cell Annotation\n\nSee example notebook [here](https://github.com/estorrs/multiplex-imaging-pipeline/blob/main/notebooks/cell_annotation_example.ipynb) for an example of how to perform cell annotation on the output of `mip generate-spatial-features`. \n\n## CLI usage\n\nThe multiplex imaging analysis command line tool has four main modes:\n+ make-ome\n  + make an ome.tiff formatted to Human Tumor Atlas Network specifications from a folder of .tif files or a .qptiff file\n+ show-channels\n  + output channel order of an ome.tiff file\n+ generate-spatial-features\n  + given a ome.tiff and labeled cell segmentation .tif, generate a table with features for each cell. Features include basic morphology metrics and marker intensity mean, min, and max for each channel.\n+ generate-region-features\n  + Given an ome.tiff and a .tif file specifying region locations, generate region-based metrics. Region based metrics include the following: region morphology, region boundary characteristics, TME interactions.\n\n#### make-ome\n\n###### Create from a .qptiff file (new CODEX)\n\n```bash\nmip make-ome --input-tif </path/to/*.qptiff> --output-filepath </path/to/output.ome.tiff>\n```\n\n###### Create from a folder of .tif files\n\nTakes as input a directory containing stitched .tif images and creates and HTAN consortium compatible ome.tiff\n\n```bash\nmip make-ome --input-tif </path/to/directory/with/tiffs> --output-filepath </path/to/output.ome.tiff> --platform raw\n```\n\n#### show-channels\n\n```bash\nmip show-channels --ome-tiff </path/to/*.ome.tiff>\n```\n\n#### generate-spatial-features\n\nTakes a label image and ome.tiff as input, and outputs spatial features.\n\nlabel image - .tif containing cell segmentation information. is a tiff where all background pixels have the value 0, and the pixels representing the location of a cell are given an integer label unique to that cell. This image can be generated by QiTissue, or a variety of cell segmentation tools. Will generate two files: <output_prefix>.txt and <output_prefix>.h5ad. The former is a tab-seperated file where each row is a cell and each column is a feature. The .h5ad file contains the same information, but in scanpy AnnData format.\n\n```bash\nmip generate-spatial-features --label-image </path/to/label/image.tif> --ome-tiff </path/to/*.ome.tiff> --output-prefix </path/to/output/prefix>\n```\n\n#### generate-region-features\n\nGenerates region based features.\n\ninputs:\n+ --spatial-features\n  + Filepath of a tab-seperated .txt file with columns specifying coordinates cell annotations in slide. First column is cell ID, second and third columns are treated as \"x\" and \"y\" coordinates respectively. All following columns are treated as cell metadata features and seperate fractions/metrics will be generated for each feature.\n+ --ome-tiff\n  + Filepath of ome.tiff corresponding to region mask.\n+ --regions-mask\n  + Filepath of region mask that will be used when calculating metrics. Mask should be a .tif file and the same height and width as --ome-tiff. 0-valued pixels are background, 1-valued pixels are regions.\n+ --channel-thresholds-grid\n  + Filepath of tab-seperated .txt file where the first column is a channel name in the --ome-tiff and the second column is threshold values to use when determining positive grid polygons in the ring around each region.\n+ -channel-thresholds-pixel\n  + Filepath of tab-seperated .txt file where the first column is a channel name in the --ome-tiff and the second column is threshold values to use when determining positive pixels when calculating region positive marker fractions.\n+ --output-dir\n  + Location to write generate-region-features output files.\n+ --expansion\n  + Distance (in pixels) to draw ring area around each region that is used to calculate grid metrics. Default is 40 pixels.\n+ --boundary-dist\n  + Distance (in pixels) to draw boundary area around each region. Default is 150 pixels.\n+ --perp-steps\n  + Number of perpendicular steps to use in expansion area. I.e. number of arcs to draw that are offset from the region boundary. Default is 10 pixels.\n+ --parallel-step\n  + Step size (in pixels) to segment grid parallel to region boundary. Default is 50 pixels.\n+ --breakage-dist\n  + Distance (in pixels) along innermost arc to use when drawing breakage lines. Default is 10 pixels.\n+ --area_thresh\n  + Filter out grid polygons with area greater than area-thresh. Default is 2000.\n+ --breakage-line-thresh\n  + Filter out grid polygons with area greater than area-thresh. Default is 100\n+ --min-region-size\n  + Skip regions below --min-region-size when calculating metrics. Default is None\n+ --max-region-size\n  + Skip regions over --max-region-size when calculating metrics. Helps speed up runs for debugging purposes since there are non-linear increases in runtime with region size. Default is None.\n+ --skip-grid-metrics\n  + If --slip-grid-metrics, then do not calculate polygon-mesh related metrics and only calculate basic region metrics.\n\n```bash\nmip generate-region-features --spatial-features </path/to/spatial_features/*.txt> --ome-tiff </path/to/*.ome.tiff> --region-mask </path/to/region_mask/*.tif> --channel-thresholds-grid </path/to/channel_thresholds_grid/*.txt> --channel-thresholds-pixel </path/to/channel_thresholds_pixel/*.txt> --output-dir </path/to/output/dir>\n```\n\n#### help\n\n```bash\nmip --help\n```\n\nusage: mip [-h] [--sep SEP] [--input-tif INPUT_TIF] [--output-filepath OUTPUT_FILEPATH] [--platform {codex,phenocycler,raw}] [--bbox BBOX] [--label-image LABEL_IMAGE] [--ome-tiff OME_TIFF] [--output-prefix OUTPUT_PREFIX] [--spatial-features SPATIAL_FEATURES] [--regions-mask REGIONS_MASK] [--channel-thresholds-grid CHANNEL_THRESHOLDS_GRID] [--channel-thresholds-pixel CHANNEL_THRESHOLDS_PIXEL] [--output-dir OUTPUT_DIR] [--boundary-dist BOUNDARY_DIST] [--perp-steps PERP_STEPS] [--expansion EXPANSION] [--parallel-step PARALLEL_STEP] [--breakage-dist BREAKAGE_DIST] [--area_thresh AREA_THRESH] [--breakage-line-thresh BREAKAGE_LINE_THRESH] [--min-region-size MIN_REGION_SIZE] [--max-region-size MAX_REGION_SIZE] [--skip-grid-metrics]\n{make-ome,generate-spatial-features,generate-region-features,show-channels}\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/estorrs/multiplex-imaging-analysis",
    "keywords": "multiplex imaging codex neighborhood analysis image segmentation visualization mibi codex phenocycler mihc hyperion",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "multiplex-imaging-pipeline",
    "package_url": "https://pypi.org/project/multiplex-imaging-pipeline/",
    "platform": null,
    "project_url": "https://pypi.org/project/multiplex-imaging-pipeline/",
    "project_urls": {
      "Homepage": "https://github.com/estorrs/multiplex-imaging-analysis"
    },
    "release_url": "https://pypi.org/project/multiplex-imaging-pipeline/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python library for multiplex imaging analysis",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16459087,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81e611cb3356d3b9247dd46551c05edb8db2ae5efbf421620480523645b955e5",
          "md5": "ef88c23cc7e8b378a673d88883e6d6b5",
          "sha256": "46a8ecf7f4c86af37dd47fe23da878e277f53fff6cb9746f41ec88b0a4b5b95a"
        },
        "downloads": -1,
        "filename": "multiplex-imaging-pipeline-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef88c23cc7e8b378a673d88883e6d6b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17416,
        "upload_time": "2023-01-12T15:32:35",
        "upload_time_iso_8601": "2023-01-12T15:32:35.171196Z",
        "url": "https://files.pythonhosted.org/packages/81/e6/11cb3356d3b9247dd46551c05edb8db2ae5efbf421620480523645b955e5/multiplex-imaging-pipeline-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "679b8dc33986baf3919df9d7598f3cc33e054062c176084d07e85025a4f0b1b8",
          "md5": "d176c766c53a66e324e062c86af5d9cc",
          "sha256": "e19b94c7d04f450baa495c23f5acf993857aa530532a87db99f1b10e87553ecc"
        },
        "downloads": -1,
        "filename": "multiplex-imaging-pipeline-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d176c766c53a66e324e062c86af5d9cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20288,
        "upload_time": "2023-01-17T14:45:26",
        "upload_time_iso_8601": "2023-01-17T14:45:26.361229Z",
        "url": "https://files.pythonhosted.org/packages/67/9b/8dc33986baf3919df9d7598f3cc33e054062c176084d07e85025a4f0b1b8/multiplex-imaging-pipeline-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "679b8dc33986baf3919df9d7598f3cc33e054062c176084d07e85025a4f0b1b8",
        "md5": "d176c766c53a66e324e062c86af5d9cc",
        "sha256": "e19b94c7d04f450baa495c23f5acf993857aa530532a87db99f1b10e87553ecc"
      },
      "downloads": -1,
      "filename": "multiplex-imaging-pipeline-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d176c766c53a66e324e062c86af5d9cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20288,
      "upload_time": "2023-01-17T14:45:26",
      "upload_time_iso_8601": "2023-01-17T14:45:26.361229Z",
      "url": "https://files.pythonhosted.org/packages/67/9b/8dc33986baf3919df9d7598f3cc33e054062c176084d07e85025a4f0b1b8/multiplex-imaging-pipeline-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}