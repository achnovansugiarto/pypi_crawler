{
  "info": {
    "author": "Activeconnect",
    "author_email": "support@activeconnect.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Activeconnect\n\n[Activeconnect](https://activeconnect.io) provides multifactor identity and presence verification.\n\n\nThis library provides a Python wrapper for the Activeconnect API.\n\n## Getting Started\n### Create an Activeconnect Account\nTo begin visit [Activeconnect Developer Portal](https://activeconnect.activeapi.ninja/register) to register.\n### Create an Activeconnect Application\nOnce you have registered [create a new Activeconnect application](https://activeconnect.activeapi.ninja/create_application).\nSave the Application ID and Application Secret in a safe place as you will need this to authenticate calls to the Activeconnect API.\n### Register Users\nActiveconnect identifies application users using a token supplied by the application developer.\nYou can use your existing user IDs or create a lookup table that maps your user ID to a value you provide to Activeconnect.\n\nUsers are registered using the Activeconnect ManagementAPI.\nCreate an instance of Activeconnect.ManagementAPI using your application ID and secret.\n```python\nfrom Activeconnect.management_api import ManagementAPI\nfrom Activeconnect.management_api import ManagementAPIResult\napplication_id = \"MY APPLICATION ID\"\napplication_secret = \"MY APPLICATION SECRET\"\n\nmanager = ManagementAPI(application_id=\"MY APPLICATION ID\", application_secret=\"MY APPLICATION SECRET\")\n```\nTo add a single user call ManagementAPI.add_user\n```python\nadd_user_result = manager.add_user(\"MY USER\")\n\nif add_user_result == ManagementAPIResult.success:\n    # User added\n    print(\"user added\")\nelif add_user_result == ManagementAPIResult.user_exists:\n    # User already exists\n    print(\"user already exists\")\nelse:\n    # User failed\n    print(\"add user failed\")\n```\nTo add multiple users call ManagementAPI.add_users.\n```python\nusers = [\"MY USER 1\", \"MY USER 2\", \"MY USER 3\"]\ncreated, existing = manager.add_users(users)\nif created is not None:\n    print(\"Users created: {}\".format(created))\nif existing is not None:\n    print(\"Existing users: {}\".format(existing))\n``` \n### Registering a Mobile Device\nActiveconnect uses a mobile device to collect authentication data.\nMobile devices are registered using a registration link generated by Activeconnect.\nThe Activeconnect mobile application is registered to open these links and register the device.\nTo obtain a registration link use ManagementAPI.get_registration_link.\nThe display_name query parameter is optional and is used by the Activeconnect mobile app to provide a description of the user.\n```python\nregistration_link = manager.get_registration_link(user_id=\"MY USER 1\", display_name=\"MY USER 1@myapp\")\n```\nManagementAPI also provides a helper method to send a registration link to a mobile device using SMS.\n```python\nmanager.send_registration_sms(  user_id=\"MY USER 1\",\n                                display_name=\"MY USER1@myapp\",\n                                phone_number=\"+1XXXYYYY\",\n                                message=None)\n```\nYou can specify a message for the SMS body\n```python\nmanager.send_registration_sms(  user_id=\"MY USER 1\",\n                                display_name=\"MY USER1@myapp\",\n                                phone_number=\"+1XXXYYYY\",\n                                message=\"REGISTER FOR MY APP\")\n```\n### Registering a Mobile Device\nBefore a user can authenticate using Activeconnect they must register a mobile device.\nTo check if a user has registered a mobile device use ManagementAPI.has_registered_mobile_device\n```python\nhas_device = manager.has_registered_mobile_device(\"MY USER 1\")\n\nif has_device is ManagementAPIResult.has_mobile_device:\n    print(\"User has mobile device.\")\nelif has_device is ManagementAPIResult.no_mobile_device:\n    print(\"User has no mobile device.\")\nelse:\n    print(\"has_registered_mobile_device failed.\")\n```\n### Removing Users\nTo remove a single user use ManagementAPI.delete_user\n```python\nmanager.delete_use(\"MY USER 1\")\n```\nTo remove multiple users use ManagementAPI.delete_users\n```python\nusers=[\"MY USER 1\", \"MY USER 2\",...]\nmanager.delete_users(users)\n```\n\n### Authenticating Users\nActiveconnect authentication is a multi step process:\n* Initiate the authentication process using the Authentication API.\n* If the process is initiated the mobile device will collect authentication data and send it to Activeconnect\n* Activeconnect processes the collected data and determines whether the user is authenticated.\nCreate an instance of Activeconnect.AuthenticationAPI using the application ID and application secret created above.\n```python\nfrom Activeconnect.authentication_api import AuthenticationAPI,AuthenticationMethod\nauthenticator=AuthenticationAPI(application_id=\"MY APPLICATION ID\", \n                                application_secret=\"MY APPLICATION SECRET\")\n\n# Initiate the authentication process.\nsession = authenticator.authenticate_user(\"MY USER 1\")\n\n# Check if authentication started.\nif session.failed:\n    # Authentication failed - check the failure reason.\n    # If the user has not registered a mobile device, the failure_reason will be NO_MOBILE_DEVICE\n    print(\"Authentication failed {}\".format(session.failure_reason))\nelif session.in_progress:\n    # Authentication is in progress\n    print(\"Authentication in progress\")\nelse:\n    print(\"Session status is {}\".format(session.session_status.name))\n```\nOnce the authentication process is initiated periodically check the status of the session using Activeconnect.Session.getStatus.\n```python\n# Wait for the user to approve the request.\nwhile session.in_progress:\n    # Get the status of the session\n    session_status = session.get_status()\n    \n    # Wait a while and try again\n    time.sleep(5)\n\nif session.active:\n    print(\"authenticated\")\n    # Now end the session\n    session.destroy()\nelse:\n    print(\"Authentication failed {}\".format(session.session_status.name))\n```\n### Ending a Session\nTo end an Activeconnect session call Activeconnect.Session.destroy.\n```python\nsession.destroy()\n```\n### Session Serialization\nIt may be necessary to save session information in cookies or pass session information with URLS.\nActiveconnect.Session is derived from [marshmallow dataclass](https://pypi.org/project/marshmallow-dataclass/) and can be serialized as JSON.\n```python\n# Save a session as JSON\nsession_json=Session.Schema().dumps(session)\n\n# Load a session from JSON\nnew_session=Session.Schema().loads(session_json)\n```\nIt is recommeded that the generated JSON in encrypted before storing.\nOne way to do this is to use [the itsdangerous package](https://pypi.org/project/itsdangerous/).\n```python\nfrom itsdangerous.url_safe import URLSafeSerializer\n\n# Convert the session to JSON.\nsession_json=Session.Schema().dumps(session)\n\n# Encode/encrypt the session JSON\ns = URLSafeSerializer(\"secret-key\")\nsession_token = s.dumps(session_json)\n\n# Store the session_token...\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Activeconnect",
    "package_url": "https://pypi.org/project/Activeconnect/",
    "platform": "",
    "project_url": "https://pypi.org/project/Activeconnect/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/Activeconnect/0.0.10/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python package to access Activeconnect API",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7753332,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb726676ee5fff8da635c3a555b41fa220653f2c538b98b4b0b29d94e69cbf2c",
          "md5": "660e075af425150f32070a2508b1e225",
          "sha256": "171d483d3c2d0846d21fddbd9fb2fe25ff6e625f51b9d5357867eaeec7629701"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "660e075af425150f32070a2508b1e225",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8214,
        "upload_time": "2020-07-22T01:12:25",
        "upload_time_iso_8601": "2020-07-22T01:12:25.757182Z",
        "url": "https://files.pythonhosted.org/packages/cb/72/6676ee5fff8da635c3a555b41fa220653f2c538b98b4b0b29d94e69cbf2c/Activeconnect-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a67c97612b8b8551b80d213265b1105b187063e1477a8c9ec3af0ad61128f7ec",
          "md5": "856064d8269f7c0bf8821348ec152954",
          "sha256": "ebf2d7cb0d3f8984b94d4c3a2b16a10fe8c85b759eeba978f2ba8a0409bda6a4"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "856064d8269f7c0bf8821348ec152954",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10680,
        "upload_time": "2020-04-01T03:37:52",
        "upload_time_iso_8601": "2020-04-01T03:37:52.142171Z",
        "url": "https://files.pythonhosted.org/packages/a6/7c/97612b8b8551b80d213265b1105b187063e1477a8c9ec3af0ad61128f7ec/Activeconnect-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df6a6d3b1b2f27ab62217d1c035349a1673a870bf838e34ccd4cff6ca1ac251d",
          "md5": "bfc1e120321fc338106a1c4744ccd98f",
          "sha256": "ac0d6a9933a536607ee8727b6b5f5d3071efde443cff71c63d585df981944ae9"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bfc1e120321fc338106a1c4744ccd98f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7400,
        "upload_time": "2020-04-01T03:37:54",
        "upload_time_iso_8601": "2020-04-01T03:37:54.362402Z",
        "url": "https://files.pythonhosted.org/packages/df/6a/6d3b1b2f27ab62217d1c035349a1673a870bf838e34ccd4cff6ca1ac251d/Activeconnect-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "700838c0ec86014a6033ff88bb8e1e4e7893a5ef0ba1063b580382747514e0b1",
          "md5": "cb39ebd48554d9462e692832a82f8ba7",
          "sha256": "673f96e7d8e8f06bacb2f71bab6c1a68ccd4d5e2acfe9c423cd5aba838d532db"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb39ebd48554d9462e692832a82f8ba7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11368,
        "upload_time": "2020-06-08T16:37:33",
        "upload_time_iso_8601": "2020-06-08T16:37:33.131998Z",
        "url": "https://files.pythonhosted.org/packages/70/08/38c0ec86014a6033ff88bb8e1e4e7893a5ef0ba1063b580382747514e0b1/Activeconnect-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e0faf506ab960f87a8be436ddf8b54adac6c924177e490ac6e61f922f156ef",
          "md5": "873f24767e76ae1a5a0d532b12a620c4",
          "sha256": "613a86ff531f0e60108d546c30df90b6d1a38b495c300f42188068d392fc0b07"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "873f24767e76ae1a5a0d532b12a620c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8227,
        "upload_time": "2020-06-08T16:37:34",
        "upload_time_iso_8601": "2020-06-08T16:37:34.386083Z",
        "url": "https://files.pythonhosted.org/packages/10/e0/faf506ab960f87a8be436ddf8b54adac6c924177e490ac6e61f922f156ef/Activeconnect-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8cb8284341e72f2085437247bd87926d21c90f1b8c6f348e8f1b3d9ffb15cf4",
          "md5": "360de775b12f1167900b1bd974abf34b",
          "sha256": "c08fe8535be6c3d2918fa2487e50549d030074ef3c41a48ad2c7dba1e6eafa2d"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "360de775b12f1167900b1bd974abf34b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11371,
        "upload_time": "2020-06-08T17:14:27",
        "upload_time_iso_8601": "2020-06-08T17:14:27.889223Z",
        "url": "https://files.pythonhosted.org/packages/b8/cb/8284341e72f2085437247bd87926d21c90f1b8c6f348e8f1b3d9ffb15cf4/Activeconnect-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b59c6211843a02c33ceed7fb3d40efd1d5109fedab81f732d2ec2c0fd721e9a",
          "md5": "5fef0733117ce068ab884502ded43bee",
          "sha256": "3ffe47bf9db48db59e549db35ee8cfe14949e70e28d357a6e6c640da297617fa"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5fef0733117ce068ab884502ded43bee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8222,
        "upload_time": "2020-06-08T17:14:29",
        "upload_time_iso_8601": "2020-06-08T17:14:29.303598Z",
        "url": "https://files.pythonhosted.org/packages/1b/59/c6211843a02c33ceed7fb3d40efd1d5109fedab81f732d2ec2c0fd721e9a/Activeconnect-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfde808b1fb22554c6945eaf603d1e25eaeec795a581184c4765e73ed8c99ff4",
          "md5": "c81fedf5012cb4545eefe6dcb97632c0",
          "sha256": "41e76cc24d22362f48683425e987929b74079e9a3c41da60700fccd02a368db5"
        },
        "downloads": -1,
        "filename": "Activeconnect-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c81fedf5012cb4545eefe6dcb97632c0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8221,
        "upload_time": "2020-07-22T01:09:05",
        "upload_time_iso_8601": "2020-07-22T01:09:05.385655Z",
        "url": "https://files.pythonhosted.org/packages/cf/de/808b1fb22554c6945eaf603d1e25eaeec795a581184c4765e73ed8c99ff4/Activeconnect-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cb726676ee5fff8da635c3a555b41fa220653f2c538b98b4b0b29d94e69cbf2c",
        "md5": "660e075af425150f32070a2508b1e225",
        "sha256": "171d483d3c2d0846d21fddbd9fb2fe25ff6e625f51b9d5357867eaeec7629701"
      },
      "downloads": -1,
      "filename": "Activeconnect-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "660e075af425150f32070a2508b1e225",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8214,
      "upload_time": "2020-07-22T01:12:25",
      "upload_time_iso_8601": "2020-07-22T01:12:25.757182Z",
      "url": "https://files.pythonhosted.org/packages/cb/72/6676ee5fff8da635c3a555b41fa220653f2c538b98b4b0b29d94e69cbf2c/Activeconnect-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}