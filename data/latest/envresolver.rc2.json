{
  "info": {
    "author": "Joni Lepist√∂",
    "author_email": "joni.m.lepisto@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Envresolver\nEnvresolver is a Python library for parsing [environment variables](https://en.wikipedia.org/wiki/Environment_variable) \nto common Python datatypes. Environment variables are only accessible as pure text (string) typed variables and thus need\nsome manipulation to transform into any other types. `EnvResolver` class provides a nifty way of parsing the current \nenvironment according to given specifications.\n\nInstall with pip:\n`pip install envresolver`\n\n#### Supported types (at the moment)\n- `str`\n- `bool`\n- `int`\n- `float`\n- `list` holding any of the supported types\n- `Json`\n- `XML`\n- `datetime`\n\n#### Why Envresolver?\nEnvresolver is a lightweight alternative to other environment parsers and customizable by-design. \nAdding support for new types is ultra-simplified and does not need any source modifications of the library itself.\n\n\n## Usage\n\nAll variables to-be-resolved must be specified with a supported type when using `EnvResolver`. `EnvResolver` then inspects\nall the specified variables and tries to parse an environment variable with the same name to the given type format. For example,\nto parse simple string values:\n\n```python\nfrom envresolver import EnvResolver\n\nr = EnvResolver()\nr.add_variable(\"var\")\nr.resolve()\n```\n\nIf an environment variable `var` was present in the current environment, it can be accessed after resolving by a special \nnamespace member `ns` or by an explicit method `getr`.\n\n```python\nr.ns.var\n# Or\nr.getr(\"var\")\n```\n\nAdditionally, variables can also be fetched from the current environment without pre-calculated resolving.\nThis is suitable for simple variables and values that can change constantly:\n\n```python\nfrom envresolver import EnvResolver\n\nr = EnvResolver()\nr.get(\"var\")\n```\n\n\nUser can also supply default values to all requests:\n\n```python\nr.add_variable(\"var2\", default=\"default_value\")\n# Or\nr.get(\"var2\", default=\"default_value\")\n```\n\n### Environment Variables with Type Conversions\n\nAs stated before, `EnvResolver` also supports automated type conversions for environment variables. Variable types can\nbe specified as shown:\n\n```python\nr.add_variable(\"var\", t=int, default=-1)\n# Or\nr.get(\"var\", t=int, default=-1)\n```\n\nLet's imagine the current environment would hold the variable `var` with a value of `\"5\"`. By running `EnvResolver.resolve`, \nit would be automatically parsed. However, if the environment variable `var` would hold an incompatible value, `\"_\"` as an example,\nthe parsing would fail and `r.var` would hold the default value, if one was given:\n\n```python\nfrom envresolver import EnvResolver\n\n# export var=5\nr = EnvResolver()\nr.add_variable(\"var\", t=int, default=-1)\nr.resolve()\nr.ns.var  # 5\n\n# export var=_\nr = EnvResolver()\nr.add_variable(\"var\", t=int, default=-1)\nr.resolve()\nr.ns.var  # -1\n```\n\n### Advanced Types\n\n`EnvResolver` currently supports also some more advanced types of variables, such as lists, Json and XML. Lists have full support\nof type hinting and will try to convert all elements accordingly:\n\n```python\nfrom typing import List\nfrom envresolver import EnvResolver\n\n# export my_list=\"1,2,3,4\"\nr = EnvResolver()\nr.add_variable(\"my_list\", t=List[int])\nr.resolve()\nr.ns.my_list  # [1, 2, 3, 4]\n```\n\nJson and XML are supported via custom type notations stored in `envresolver.Types`. Json and XML will be parsed using Pythons built-in\n`json` and `xml` modules. Json parsing will output native python lists/dicts and XML results will be of type `xml.etree.ElementTree.Element`.\nHere is an example on Json parsing:\n\n```python\nfrom envresolver import EnvResolver, Types\n\n# export json='{\"key\": \"val\"}'\nr = EnvResolver()\nr.add_variable(\"json\", t=Types.Json)\nr.resolve()\nr.ns.json  # {\"key\": \"val\"}\n```\n\nDate objects are supported via Pythons built-in `datetime` module. User can specify in which format the date strings are expected, with the default being\n`%Y-%m-%d %H:%M:%S`. Here is an example:\n\n```python\nimport datetime\nfrom envresolver import EnvResolver\n\n# export mydate=\"2021-01-01 12:34:56\"\nr = EnvResolver()\nr.add_variable(\"mydate\", datetime.datetime)\nr.resolve()\nr.ns.mydate # datetime.datetime -object with the correct time\n```\n\nParsing certain advaced types, such as `datetime` objects or lists, relies on additional information\nregarding the data format. List parsing needs to know the list separator character and datetime conversions\nrely on certain date formats. These can be configured either at `EnvResolver` initialization or afterwards using\nthe methods `set_list_separator` and `set_datetime_format`.\n\n### Custom Types\n\nUsers can supply `EnvResolver` with custom parsers as well as override existing ones. Below is an example of using a custom parser\nfor reading data into a user-defined class:\n\n```python\nfrom envresolver import EnvResolver\n\n\nclass MyData:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n\ndef my_data_converter(e: str):\n    s = e.split(\".\")\n\n    # Raise ValueError if the given \n    # environment variable is in \n    # wrong format\n    if len(s) != 2:\n        raise ValueError\n\n    # Return parsed data\n    return MyData(a=s[0], b=s[1])\n\n\n# export data=\"john.smith\"\nr = EnvResolver()\nr.add_converter(MyData, my_data_converter)\nr.add_variable(\"data\", t=MyData)\nr.resolve()\nr.ns.data  # MyData(a = \"john\", b = \"smith\")\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/jjstoo/envresolver/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jjstoo/envresolver",
    "keywords": "environment,variable,variables,shell,parsing",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "envresolver",
    "package_url": "https://pypi.org/project/envresolver/",
    "platform": "",
    "project_url": "https://pypi.org/project/envresolver/",
    "project_urls": {
      "Download": "https://github.com/jjstoo/envresolver/releases",
      "Homepage": "https://github.com/jjstoo/envresolver"
    },
    "release_url": "https://pypi.org/project/envresolver/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pythonic parsing of environment variables",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12648146,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "155b0800c96fdd633e089e95f84a62211269c69c86fcc1c9d88ca4e19d9bb44f",
          "md5": "69f51f93f8495a29cfd9cc0d8edea82d",
          "sha256": "7cc8ed1a07320af053fd939a10849f3112daf5655694f3436cd525fb859ae4e4"
        },
        "downloads": -1,
        "filename": "envresolver-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "69f51f93f8495a29cfd9cc0d8edea82d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8626,
        "upload_time": "2021-11-10T11:43:52",
        "upload_time_iso_8601": "2021-11-10T11:43:52.531046Z",
        "url": "https://files.pythonhosted.org/packages/15/5b/0800c96fdd633e089e95f84a62211269c69c86fcc1c9d88ca4e19d9bb44f/envresolver-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ba291348da3ad28d72d6708316184ad565c47044493839dff1fe2177c207cf1",
          "md5": "25458b88e89f59c4339e89931dd5b1d7",
          "sha256": "a14011d2516bb6e8c7502ac3f1def44e6d8a0dd8ea1fcb710ea6778a0f9a5f74"
        },
        "downloads": -1,
        "filename": "envresolver-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25458b88e89f59c4339e89931dd5b1d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9729,
        "upload_time": "2022-01-21T21:51:19",
        "upload_time_iso_8601": "2022-01-21T21:51:19.281470Z",
        "url": "https://files.pythonhosted.org/packages/6b/a2/91348da3ad28d72d6708316184ad565c47044493839dff1fe2177c207cf1/envresolver-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4cc3a179991c44147a72d3d4212cc56eeae5f8e936417664eaa61a43d718731",
          "md5": "e2a353bf0472d093d6d47c7aea39fb53",
          "sha256": "a33187492c085005e0261d95113c3c7025b54d1a22a994788481c75141529edd"
        },
        "downloads": -1,
        "filename": "envresolver-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2a353bf0472d093d6d47c7aea39fb53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9186,
        "upload_time": "2022-01-21T21:51:20",
        "upload_time_iso_8601": "2022-01-21T21:51:20.631862Z",
        "url": "https://files.pythonhosted.org/packages/e4/cc/3a179991c44147a72d3d4212cc56eeae5f8e936417664eaa61a43d718731/envresolver-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ba291348da3ad28d72d6708316184ad565c47044493839dff1fe2177c207cf1",
        "md5": "25458b88e89f59c4339e89931dd5b1d7",
        "sha256": "a14011d2516bb6e8c7502ac3f1def44e6d8a0dd8ea1fcb710ea6778a0f9a5f74"
      },
      "downloads": -1,
      "filename": "envresolver-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25458b88e89f59c4339e89931dd5b1d7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9729,
      "upload_time": "2022-01-21T21:51:19",
      "upload_time_iso_8601": "2022-01-21T21:51:19.281470Z",
      "url": "https://files.pythonhosted.org/packages/6b/a2/91348da3ad28d72d6708316184ad565c47044493839dff1fe2177c207cf1/envresolver-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e4cc3a179991c44147a72d3d4212cc56eeae5f8e936417664eaa61a43d718731",
        "md5": "e2a353bf0472d093d6d47c7aea39fb53",
        "sha256": "a33187492c085005e0261d95113c3c7025b54d1a22a994788481c75141529edd"
      },
      "downloads": -1,
      "filename": "envresolver-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e2a353bf0472d093d6d47c7aea39fb53",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9186,
      "upload_time": "2022-01-21T21:51:20",
      "upload_time_iso_8601": "2022-01-21T21:51:20.631862Z",
      "url": "https://files.pythonhosted.org/packages/e4/cc/3a179991c44147a72d3d4212cc56eeae5f8e936417664eaa61a43d718731/envresolver-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}