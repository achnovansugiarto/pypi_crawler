{
  "info": {
    "author": "Kevin Paul",
    "author_email": "kpaul@ucar.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Atmospheric Science",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.3895009.svg\n   :target: https://doi.org/10.5281/zenodo.3895009\n\n.. image:: https://codecov.io/gh/NCAR/PyConform/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/NCAR/PyConform\n\n.. image:: https://github.com/NCAR/PyConform/workflows/Tests/badge.svg\n  :target: https://github.com/NCAR/PyConform/actions?query=workflow%3ATests\n\n.. image:: https://github.com/NCAR/PyConform/workflows/Linting/badge.svg\n  :target: https://github.com/NCAR/PyConform/actions?query=workflow%3ALinting\n\nPyConform\n=========\n\nA package for transforming a NetCDF dataset into a defined format\nsuitable for publication according to a defined publication standard.\n\n:AUTHORS: Sheri Mickelson, Kevin Paul\n:COPYRIGHT: 2020, University Corporation for Atmospheric Research\n:LICENSE: See the LICENSE.rst file for details\n\nSend questions and comments to Kevin Paul (kpaul@ucar.edu) or\nSheri Mickelson (mickelso@ucar.edu).\n\n\nOverview\n--------\n\nThe PyConform package is a Python-based package for converting model time-series\ndata into MIP-conforming (i.e., *standardized*) time-series data.  It was designed\nfor CMIP6 *specifically for NCAR's CESM CMIP6 workflow*, but we attempted to\ndesign the code in a way that is general purpose.  PyConform attempts to divide\nthe standardization problem specification step into two separate pieces:\n\n1. a specification of the *standard*, and\n2. a specification of the *conversion process*.\n\nThis separate was created to allow the *standard* to be defined by (for example)\nthe MIP designers and the *conversion process* to be defined by the model\ndevelopers (i.e., scientists).  For CMIP6, we used the ``dreqpy`` utility to\ndefine the *standard*, and the scientists then just needed to provide one-line\n*definitions* for how to convert the raw CESM data into the requested\nstandardized output.\n\nCurrently, the main considerations that need to be made when creating\n*definitions* are the following:\n\n1. physical units will be converted *automatically*, if possible according to\n   the ``cf_units`` package,\n2. the *dimensions* of the resulting data variable produced by the *definition*\n   operation must be *mappable* to requested dimensions specified in the\n   standard, and\n3. special operations/computations that are not supplied with PyConform in\n   the ``functions`` module may need to be written by hand and called explicitly\n   in the output variable *definition*.\n\n.. warning::\n    PyConform should only be used with caution!  As mentioned, it was created\n    specifically for NCAR's contributions to CMIP6.  PyConform is not designed\n    to fix *problems* with your input data, and as such is completely incapable\n    of detecting many problems with your data!  (That is, \"garbage in, garbage\n    out!\")\n\n    The *core* part of PyConform was designed and implemented\n    before a full understanding of the requirements could be obtained.  Full\n    testing of PyConform could not be done without knowing what all of the\n    input (i.e., model output) data would look like!  And, to make matters\n    more difficult, the *specification* utility that PyConform depends upon\n    (``dreqpy``) took quite a while to stabilize.  As a result, much of\n    PyConform's testing had to be done *on-the-fly*.\n\n.. warning::\n    **Deprecation:**\n    With the completion of CMIP6, this project is essentially deprecated.  Much\n    of the operations and core functionality of this tool can be reproduced in\n    a much more robust way with Xarray_.  The parallelism provided via MPI\n    in PyConform can be handled in a much better way with Dask_, which already\n    works with Xarray_.  It is our belief that this utility should be replaced\n    in the future by a framework built on Xarray_ and Dask_, but due to\n    resource limitations, we cannot build that tool.  We would certainly\n    welcome any others to take on that challenge!\n\n.. _Xarray: http://xarray.pydata.org/\n.. _Dask: http://dask.org\n\nDependencies\n------------\n\nThe PyConform package directly depends upon 4 main external packages:\n\n* ASAPTools (>=0.6)\n* cf-units\n* dreqpy\n* netCDF4-python\n* ply\n* python-dateutil\n\nThese dependencies imply the dependencies:\n\n* numpy (>=1.5)\n* netCDF4\n* MPI\n* UDUNITS2\n\nAdditionally, the entire package is designed to work with Python v2.7 and up\nto (but not including) Python v3.0.\n\nThe version requirements have not been rigidly tested, so earlier versions\nmay actually work.  No version requirement is made during installation, though,\nso problems might occur if an earlier versions of these packages have been\ninstalled.\n\n\nObtaining the Source Code\n-------------------------\n\nCurrently, the most up-to-date development source code is available\nvia git from the site::\n\n    https://github.com/NCAR/PyConform\n\nCheck out the most recent stable tag.  The source is available in\nread-only mode to everyone.  Developers are welcome to update the source\nand submit Pull Requests via GitHub.\n\n\nBuilding & Installing from Source\n---------------------------------\n\nInstallation of the PyConform package is very simple.  After checking out the source\nfrom the above svn link, via::\n\n    $ git clone https://github.com/NCAR/PyConform\n\nEnter the newly cloned directory::\n\n    $ cd PyConform\n\nThen, run the Python setuptools setup script.  On unix, this involves::\n\n    $  python setup.py install [--prefix=/path/to/install/location]\n\nThe prefix is optional, as the default prefix is typically /usr/local on\nlinux machines.  However, you must have permissions to write to the prefix\nlocation, so you may want to choose a prefix location where you have write\npermissions.  Like most distutils installations, you can alternatively\ninstall the PyReshaper with the '--user' option, which will automatically\nselect (and create if it does not exist) the $HOME/.local directory in which\nto install.  To do this, type (on unix machines)::\n\n    $  python setup.py install --user\n\nThis can be handy since the site-packages directory will be common for all\nuser installs, and therefore only needs to be added to the PYTHONPATH once.\n\nThe documentation_ for PyConform is hosted on GitHub Pages.\n\n.. _documentation:  https://ncar.github.io/pyconform\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NCAR/PyConform",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyConform",
    "package_url": "https://pypi.org/project/PyConform/",
    "platform": "",
    "project_url": "https://pypi.org/project/PyConform/",
    "project_urls": {
      "Homepage": "https://github.com/NCAR/PyConform"
    },
    "release_url": "https://pypi.org/project/PyConform/0.3.0/",
    "requires_dist": [
      "asaptools",
      "cf-units",
      "netCDF4",
      "numpy",
      "ply",
      "python-dateutil"
    ],
    "requires_python": ">=2.7",
    "summary": "Parallel Python NetCDF Dataset Standardization Tool",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8272902,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7fe1641279f5babf8bfe75419b55770231400cbf474cccd852f53ede2e666e4",
          "md5": "7f9d2b85e337eeb049ca0f26d4354efa",
          "sha256": "fa111212eed007b7a18b0c67ee502b0739c2763fd405a155027620f4159f92c1"
        },
        "downloads": -1,
        "filename": "PyConform-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f9d2b85e337eeb049ca0f26d4354efa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 88937,
        "upload_time": "2020-09-25T18:29:46",
        "upload_time_iso_8601": "2020-09-25T18:29:46.902558Z",
        "url": "https://files.pythonhosted.org/packages/c7/fe/1641279f5babf8bfe75419b55770231400cbf474cccd852f53ede2e666e4/PyConform-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f2153c2effd8281cc2c3e3832711bf048ae2a22093f0b206e703ab14c92aa76",
          "md5": "95ad4246d20047896b2b30be03be25a3",
          "sha256": "5f19898d0a359b9f1500605942acbaa5fa7a0009561516c5cd65adb0af21c928"
        },
        "downloads": -1,
        "filename": "PyConform-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95ad4246d20047896b2b30be03be25a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 12385391,
        "upload_time": "2020-09-25T18:29:49",
        "upload_time_iso_8601": "2020-09-25T18:29:49.862780Z",
        "url": "https://files.pythonhosted.org/packages/9f/21/53c2effd8281cc2c3e3832711bf048ae2a22093f0b206e703ab14c92aa76/PyConform-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7fe1641279f5babf8bfe75419b55770231400cbf474cccd852f53ede2e666e4",
        "md5": "7f9d2b85e337eeb049ca0f26d4354efa",
        "sha256": "fa111212eed007b7a18b0c67ee502b0739c2763fd405a155027620f4159f92c1"
      },
      "downloads": -1,
      "filename": "PyConform-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f9d2b85e337eeb049ca0f26d4354efa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 88937,
      "upload_time": "2020-09-25T18:29:46",
      "upload_time_iso_8601": "2020-09-25T18:29:46.902558Z",
      "url": "https://files.pythonhosted.org/packages/c7/fe/1641279f5babf8bfe75419b55770231400cbf474cccd852f53ede2e666e4/PyConform-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f2153c2effd8281cc2c3e3832711bf048ae2a22093f0b206e703ab14c92aa76",
        "md5": "95ad4246d20047896b2b30be03be25a3",
        "sha256": "5f19898d0a359b9f1500605942acbaa5fa7a0009561516c5cd65adb0af21c928"
      },
      "downloads": -1,
      "filename": "PyConform-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "95ad4246d20047896b2b30be03be25a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 12385391,
      "upload_time": "2020-09-25T18:29:49",
      "upload_time_iso_8601": "2020-09-25T18:29:49.862780Z",
      "url": "https://files.pythonhosted.org/packages/9f/21/53c2effd8281cc2c3e3832711bf048ae2a22093f0b206e703ab14c92aa76/PyConform-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}