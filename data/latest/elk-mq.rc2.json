{
  "info": {
    "author": "",
    "author_email": "Tijmen Verhoef <tijmenmenno@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Rust"
    ],
    "description": "# ElkMQ (Event Log driven Kompakt Message Queue)\r\n\r\nElkMQ is a pure rust implementation of the Message Queue pattern over Redis.\r\n\r\n## What can I do with ElkMQ?\r\n\r\nElkMQ allows asynchronous message passing over a Redis instance. If a secure Redis instance is already deployed,\r\nElkMQ can connect to it and use it to communicate.\r\n\r\nEach message is guaranteed to be delivered only once. This allows for safe N:M client communication. Awaiting\r\nresponses is also allowed by ElkMQ. This makes ElkMQ usable as a communication backbone for independent services.\r\n\r\nUsing ElkMQ in existing rust programs is as easy as including it in your dependency list. Using ElkMQ as a python module is as easy as installing it with Pip.\r\n\r\n## Minumum requirements\r\n\r\n- Redis 6.0\r\n- Rust 1.65\r\n- Python 3+ (for the python module)\r\n\r\n## Examples\r\n\r\n### Rust examples\r\n\r\nThe examples below show the usage of ElkMQ for rust clients. They show how events can be enqueued, dequeued, and\r\nawaited. Some examples also show their output.\r\n\r\nEnqueueing and dequeueing an event in a newly created queue is straightforward, see the following example:\r\n\r\n```rust\r\nuse elk_mq::{ EventQueue, ServiceEvent, Timestamp, TimestampedEvent };\r\n\r\nfn main() {\r\n    // Create a queue with a name\r\n    let mut queue: EventQueue = EventQueue::new(\"foo\", \"redis://127.0.0.1\");\r\n\r\n    // Create an event\r\n    let event: ServiceEvent = ServiceEvent::new(10, \"test_event\", Some(\"serialized_data\".to_string()));\r\n\r\n    // Enqueueing returns the event timestamp registered by the Redis instance\r\n    let _timestamp: Timestamp = queue.enqueue(&event).unwrap();\r\n\r\n    // Dequeueing returns the timestamp of the event, and the event itself as a timestamped event type\r\n    let timestamped_event: TimestampedEvent = queue.dequeue().unwrap();\r\n\r\n    println!(\"{:#?}\", timestamped_event)\r\n}\r\n```\r\n\r\nThe output this example generates is listed below:\r\n\r\n```out\r\nTimestampedEvent(\r\n    1669887505996,\r\n    ServiceEvent {\r\n        request_uuid: 215842608724208526221701166594411877883,\r\n        timeout: 10,\r\n        action: \"test_event\",\r\n        payload: Some(\r\n            \"serialized_data\",\r\n        ),\r\n    },\r\n)\r\n```\r\n\r\nAwaiting a response for an event is similar to enqueueing the event, save for the fact that the await can time\r\nout. If this happens an EventQueueError is returned, and the program continues. Any service dequeueing events should\r\ntake care to verify if the timeout of an event is already expired before handling it. If a response is enqueued,\r\nbut the original event timeout has already expired, then the response will never be handled. This is not an issue\r\nin regular use, but it will take up space in your Redis instance.\r\n\r\n```rust\r\n    // -- snip -- //\r\n\r\n    // an event with a 20 second timeout\r\n    let event: ServiceEvent = ServiceEvent::new(\r\n        20, // timeout in seconds\r\n        \"test_awaited_event\", // event name\r\n        Some(\"serialized_data\".to_string())\r\n    );\r\n\r\n    // after 20 seconds this either panics with a TimeoutExpired error\r\n    // or returns the received response as a TimestampedEvent\r\n    let response: TimestampedEvent = queue.await_response(&event).unwrap();\r\n\r\n    // -- snip -- //\r\n```\r\n\r\n### Notes on the python module\r\n\r\nThe python module functions exactly the same as the Rust library. All python types mirror their rust counterparts,\r\nexcept for TimestampedEvent. In python this is a `(int, ServiceEvent)` tuple to allow for easy destructuring of data.\r\n\r\n## Authors\r\n\r\n- Tijmen Verhoef, <tijmenmenno@gmail.com>\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elk-mq",
    "package_url": "https://pypi.org/project/elk-mq/",
    "platform": null,
    "project_url": "https://pypi.org/project/elk-mq/",
    "project_urls": {
      "homepage": "https://github.com/nemjit001/elk-mq",
      "repository": "https://github.com/nemjit001/elk-mq"
    },
    "release_url": "https://pypi.org/project/elk-mq/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A Message Queue implementation in rust, available as a python extension module",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16006089,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c248bd8629e14c46108cc5c3668e6a2830f0d36ce208a27272be8e55b658cfa7",
          "md5": "7d8d637d20df81dccfa1ecce9c2ffee6",
          "sha256": "906c707bd1dd347b5bdfd3e42f975e582c211f64facc42b369ee4fc0f5ac5784"
        },
        "downloads": -1,
        "filename": "elk_mq-0.1.0-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "7d8d637d20df81dccfa1ecce9c2ffee6",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3",
        "size": 729874,
        "upload_time": "2022-12-02T13:05:38",
        "upload_time_iso_8601": "2022-12-02T13:05:38.142191Z",
        "url": "https://files.pythonhosted.org/packages/c2/48/bd8629e14c46108cc5c3668e6a2830f0d36ce208a27272be8e55b658cfa7/elk_mq-0.1.0-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7514439f05e4e2fef3814b7835c11b390931a2b5a1869f98ca7920d8ddda5221",
          "md5": "876e3ceaa0ab6b6dc8e824b178935f70",
          "sha256": "5cc09f04eefadf798ccdc7d1b1d0dc3a53a2454cb7751d5eff6e1232a823c8e1"
        },
        "downloads": -1,
        "filename": "elk_mq-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "876e3ceaa0ab6b6dc8e824b178935f70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 17389,
        "upload_time": "2022-12-02T13:05:39",
        "upload_time_iso_8601": "2022-12-02T13:05:39.745446Z",
        "url": "https://files.pythonhosted.org/packages/75/14/439f05e4e2fef3814b7835c11b390931a2b5a1869f98ca7920d8ddda5221/elk_mq-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36223a619cf79ad26a4cc91af9204e1a9a020df1b67f6205893b8c4f49206d28",
          "md5": "70f8bc930f1cbc280fc25e2b24177ead",
          "sha256": "2d0dfe64a12571da5402269e56ad239d372a3dc8d088c79c59ea3fbbd6d27d61"
        },
        "downloads": -1,
        "filename": "elk_mq-0.1.1-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "70f8bc930f1cbc280fc25e2b24177ead",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3",
        "size": 725911,
        "upload_time": "2022-12-06T09:46:32",
        "upload_time_iso_8601": "2022-12-06T09:46:32.787101Z",
        "url": "https://files.pythonhosted.org/packages/36/22/3a619cf79ad26a4cc91af9204e1a9a020df1b67f6205893b8c4f49206d28/elk_mq-0.1.1-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c2ca35380abeaba1cc41c75976bb25018a1676a38e1162434a8d7736a90398b",
          "md5": "11cee41baa17dbb92504028026203d82",
          "sha256": "d9467588f6426fb821d6ca763562cbbd740b8cd28a938be4df51bcbc169cd2e9"
        },
        "downloads": -1,
        "filename": "elk_mq-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11cee41baa17dbb92504028026203d82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 13162,
        "upload_time": "2022-12-06T09:46:34",
        "upload_time_iso_8601": "2022-12-06T09:46:34.468912Z",
        "url": "https://files.pythonhosted.org/packages/7c/2c/a35380abeaba1cc41c75976bb25018a1676a38e1162434a8d7736a90398b/elk_mq-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36223a619cf79ad26a4cc91af9204e1a9a020df1b67f6205893b8c4f49206d28",
        "md5": "70f8bc930f1cbc280fc25e2b24177ead",
        "sha256": "2d0dfe64a12571da5402269e56ad239d372a3dc8d088c79c59ea3fbbd6d27d61"
      },
      "downloads": -1,
      "filename": "elk_mq-0.1.1-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "70f8bc930f1cbc280fc25e2b24177ead",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3",
      "size": 725911,
      "upload_time": "2022-12-06T09:46:32",
      "upload_time_iso_8601": "2022-12-06T09:46:32.787101Z",
      "url": "https://files.pythonhosted.org/packages/36/22/3a619cf79ad26a4cc91af9204e1a9a020df1b67f6205893b8c4f49206d28/elk_mq-0.1.1-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c2ca35380abeaba1cc41c75976bb25018a1676a38e1162434a8d7736a90398b",
        "md5": "11cee41baa17dbb92504028026203d82",
        "sha256": "d9467588f6426fb821d6ca763562cbbd740b8cd28a938be4df51bcbc169cd2e9"
      },
      "downloads": -1,
      "filename": "elk_mq-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "11cee41baa17dbb92504028026203d82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 13162,
      "upload_time": "2022-12-06T09:46:34",
      "upload_time_iso_8601": "2022-12-06T09:46:34.468912Z",
      "url": "https://files.pythonhosted.org/packages/7c/2c/a35380abeaba1cc41c75976bb25018a1676a38e1162434a8d7736a90398b/elk_mq-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}