{
  "info": {
    "author": "loopyme",
    "author_email": "peter@mail.loopy.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Task-Graph\n\nBuild a dynamic task graph for your project with Task-Graph!\n\n## Introduction \n\nWhen facing a complex task, it's often necessary to recalculate the entire task when user wants to get one of the intermediate results, or to adjust one of the parameters or methods, but once you have Task-Graph,\n\n1. If you need to get a result, Task-Graph will only compute all the upstream tasks of the result, and each task will cache  for later use.\n\n2. If one of the task's parameters or method is adjusted, Task-Graph will automatically check all the downstream tasks and clear their cached results.\n\n**In short, Task-Graph will make the computer lazy and just fulfill your needs without doing repetitive tasks, no more or less.**\n\n## Usage\n\nNo doc available now, here is an minimal example.\n\n```python\n# import\nfrom task_graph import TaskGraph\n\n# init a TaskGraph\ntg = TaskGraph()\n\n# user task methods\ndef add(a, b):\n    print(\"add\", a, b)\n    return a + b\n\n\ndef sub(a, b):\n    print(\"sub\", a, b)\n    return a - b\n\n# describe the task graph(much like dask.delayed)\nret1 = tg.add_task(add)(1, 2)\nret2 = tg.add_task(add)(3, ret1)\nret3 = tg.add_task(add)(4, ret2)\nret4 = tg.add_task(sub)(ret2, ret3)\nfinal = tg.add_task('to_list')(ret1, ret2, ret3, ret4)\n\n# trigger the computation and print\nprint(final.compute())\n\n# when I want to update a task\ntg.update_task(ret3)(add)(5, ret2)\n\n# Because ret3 is change, rest3, rest4 and final will be recalculated\nprint(final.compute())\n\n```\n\nOr, a lazy way:\n\n```python\nfrom task_graph import TaskGraph\n\n\ntg = TaskGraph()\n\ndef add(a, b):\n    print(\"add\", a, b)\n    return a + b\n\n\ndef sub(a, b):\n    print(\"sub\", a, b)\n    return a - b\n\n# omit add_task\nret1 = tg(add)(1, 2)\nret2 = tg(add)(3, ret1)\nret3 = tg(add)(4, ret2)\nret4 = tg(sub)(ret2, ret3)\nfinal = tg('to_list')(ret1, ret2, ret3, ret4)\n\n# auto compute and print\nfinal.print()\n\n# omit update_task\ntg(ret3)(add)(5, ret2)\n\n# auto compute and print\nfinal.print()\n\n\n```\n## TODO\nTask-Graph is at the very beginning, so many todos in the codes. Here are a few general ones:\n\n- [ ] add parallel scheduler\n- [ ] add decorator that can auto transfer function to task\n- [ ] add graphviz-based visualization\n- [ ] add unit test\n- [ ] add doc\n- [ ] add examples\n\n\n## Zen\n\n**I am lazy, so I build this to let computer be also lazy.**\n\nOne of the biggest differences in Python from other languages is that the methods (like all other objects) are mutable, Task-Graph is designed to accommodate that.\n\nTask-Graph was designed to speed up python project, and want to make it the simplest solution to avoid any recalculation.\n\nI have referred to the Dask.delayed API in many places. The difference between Task-Graph and Dask is to try to adapt to the dynamics of the python and python projects, and **make computer not only delayed but also lazy**.\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/loopyme/Task-Graph",
    "keywords": "task-graph task-manager lazy",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "task-graph",
    "package_url": "https://pypi.org/project/task-graph/",
    "platform": "",
    "project_url": "https://pypi.org/project/task-graph/",
    "project_urls": {
      "Homepage": "https://github.com/loopyme/Task-Graph"
    },
    "release_url": "https://pypi.org/project/task-graph/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Make computer lazy and build a dynamic task graph for your project!",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7239398,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4767d57a0b4a1ce83a0d4d30dd7faeddc6e25f3bc5b12b733c0443970a2c0e0",
          "md5": "c871c10952b4b75b7388bc64ee6787d4",
          "sha256": "eb981f8d2ff90724e097b55dae83a64d55a0f34213734cdd8bf24373d24adda2"
        },
        "downloads": -1,
        "filename": "task_graph-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c871c10952b4b75b7388bc64ee6787d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7842,
        "upload_time": "2020-05-14T09:23:18",
        "upload_time_iso_8601": "2020-05-14T09:23:18.116929Z",
        "url": "https://files.pythonhosted.org/packages/b4/76/7d57a0b4a1ce83a0d4d30dd7faeddc6e25f3bc5b12b733c0443970a2c0e0/task_graph-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9075f01f57f5b97ec0f43978510139fb7ed1a2c1bc8c2ac45c32967abba437f4",
          "md5": "eda13e2168841430823e2e0cecd0dc3c",
          "sha256": "f1ca3404ff747e5804a75fbc9a17552ea5682b9c6f3ff5458ce25dddd31cf597"
        },
        "downloads": -1,
        "filename": "task-graph-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eda13e2168841430823e2e0cecd0dc3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5927,
        "upload_time": "2020-05-14T09:23:20",
        "upload_time_iso_8601": "2020-05-14T09:23:20.795613Z",
        "url": "https://files.pythonhosted.org/packages/90/75/f01f57f5b97ec0f43978510139fb7ed1a2c1bc8c2ac45c32967abba437f4/task-graph-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4767d57a0b4a1ce83a0d4d30dd7faeddc6e25f3bc5b12b733c0443970a2c0e0",
        "md5": "c871c10952b4b75b7388bc64ee6787d4",
        "sha256": "eb981f8d2ff90724e097b55dae83a64d55a0f34213734cdd8bf24373d24adda2"
      },
      "downloads": -1,
      "filename": "task_graph-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c871c10952b4b75b7388bc64ee6787d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7842,
      "upload_time": "2020-05-14T09:23:18",
      "upload_time_iso_8601": "2020-05-14T09:23:18.116929Z",
      "url": "https://files.pythonhosted.org/packages/b4/76/7d57a0b4a1ce83a0d4d30dd7faeddc6e25f3bc5b12b733c0443970a2c0e0/task_graph-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9075f01f57f5b97ec0f43978510139fb7ed1a2c1bc8c2ac45c32967abba437f4",
        "md5": "eda13e2168841430823e2e0cecd0dc3c",
        "sha256": "f1ca3404ff747e5804a75fbc9a17552ea5682b9c6f3ff5458ce25dddd31cf597"
      },
      "downloads": -1,
      "filename": "task-graph-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "eda13e2168841430823e2e0cecd0dc3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5927,
      "upload_time": "2020-05-14T09:23:20",
      "upload_time_iso_8601": "2020-05-14T09:23:20.795613Z",
      "url": "https://files.pythonhosted.org/packages/90/75/f01f57f5b97ec0f43978510139fb7ed1a2c1bc8c2ac45c32967abba437f4/task-graph-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}