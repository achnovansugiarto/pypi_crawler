{
  "info": {
    "author": "Kevin Cutler",
    "author_email": "kevinjohncutler@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# <b>Cellpose backend for Omnipose</b>\n\nThis fork of Cellpose continues the generalizations first introduced by Omnipose. Because Omnipose will not be incorporated into Cellpose 2.0, this fork will continue to be maintained by the author of Omnipose ([@kevinjohncutler](https://github.com/kevinjohncutler)), with the current goal of updating to support Cellpose 2.0 when it is released and if it shows substantial improvements. For now, I will be providing addtional updates and bugfixes based on Cellpose 1.0 from January 2022. This fork will remain backwards-compatible with Cellpose. See the main Cellpose repo for basic Cellpose usage, and the Omnipose repo for Omnipose-specific settings. \n\nThe main generalization introduced in this fork is true 3D segmentation - that is, direct prediction of 3D flow field as opposed to merging flow components from 2D predictions. Use the `--dim` flag to specify whether or not you want to train/evaluate on 2D or 3D volumes. \n\nAs training 3D models are for more resource-intensive, the code has also been somewhat optimized for multi-GPU training. The main branch of Cellpose cannot use multiple GPUs, but this branch can. We have tested this only on AWS instances. \n\nThe GUI has also been greatly improved with bugfixes and additional features. The most important new feature is the ability to easily copy the parameters for replicating the GUI results in a Jupyter Notebook. This work is ongoing.\n\nFuture GUI goals:\n* optional parameter output in CLI format (not just function API for python scripts)\n* time lapse stack handling \n* 3D Omnipose options \n* add boundary output for visualization\n* allow gamma and percentile range to be segmentation parameters (just for visualization now)\n* give in to my OCD around GUI elements and make it prettier \n\nThis version of the GUI defaults to Omnipose parameters and models.\n\n\n### Run cellpose without local python installation\n\nYou can quickly try out Cellpose on the [website](https://www.cellpose.org) first (some features disabled). \n\nYou can also run Cellpose in google colab with a GPU: \n* a code-based notebook: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/MouseLand/cellpose/blob/master/notebooks/run_cellpose_GPU.ipynb)\n* a more user-friendly notebook for 2D segmentation written by [@pr4deepr](https://github.com/pr4deepr): [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/MouseLand/cellpose/blob/master/notebooks/Cellpose_cell_segmentation_2D_prediction_only.ipynb)\n* a user-friendly [ZeroCostDL4Mic](https://github.com/HenriquesLab/ZeroCostDL4Mic) notebook that includes training cellpose models, written by [@guijacquemet](https://github.com/guijacquemet): [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/HenriquesLab/ZeroCostDL4Mic/blob/master/Colab_notebooks/Beta%20notebooks/Cellpose_2D_ZeroCostDL4Mic.ipynb)\n\nThe colab notebooks are recommended if you have issues with MKL or run speed on your local computer (and are running 3D volumes). Colab does not allow you to run the GUI, but you can save `*_seg.npy` files in colab that you can download and open in the GUI.\n\n**Executable file**: You can download an executable file for [*Windows 10*](http://www.cellpose.org/windows) or for [*Mac OS*](http://www.cellpose.org/mac) (High Sierra or greater) that were made using PyInstaller on Intel processors (MKL acceleration works, but no GPU support). Note in both cases it will take a few seconds to open.\n\n* The [*Mac OS*](https://www.cellpose.org/mac) file will download as `cellpose_mac` OR `cellpose_mac.dms`. You will need to make it into an executable file and run it through the terminal:\n1. Open a terminal and run `cd ~/Downloads/`.\n2. Run `chmod 777 cellpose_mac` OR `chmod 777 cellpose_mac.dms` to make the file executable.\n3. Run `./cellpose_mac` OR `./cellpose_mac.dms` to open the cellpose GUI. Messages from cellpose_omni will be printed in the terminal.\n4. You can also run using the command line interface, e.g. as `./cellpose_mac --dir ~/Pictures/ --chan 2 --save_png`.\n\n* The [*Windows 10*](https://www.cellpose.org/windows) file is an exe and you can click on it to run the GUI. You can also run using the command line interface, e.g. as `cellpose.exe --dir Pictures/ --chan 2 --save_png`\n\n### Detailed documentation at [www.cellpose.org/docs](http://www.cellpose.org/docs).\n\n## System requirements\n\nLinux, Windows and Mac OS are supported for running the code. For running the graphical interface you will need a Mac OS later than Yosemite. At least 8GB of RAM is required to run the software. 16GB-32GB may be required for larger images and 3D volumes. The software has been heavily tested on Windows 10 and Ubuntu 18.04 and less well-tested on Mac OS. Please open an issue if you have problems with installation.\n\n## Local installation\n\nIf you have an older `cellpose` environment you can remove it with `conda env remove -n cellpose` before creating a new one.\n\nIf you are using a GPU, make sure its drivers and the cuda libraries are correctly installed.\n\n1. Install an [Anaconda](https://www.anaconda.com/download/) distribution of Python -- Choose **Python 3.8** and your operating system. Note you might need to use an anaconda prompt if you did not add anaconda to the path.\n2. Open an anaconda prompt / command prompt with `conda` for **python 3** in the path\n3. Create a new environment with `conda create --name cellpose python=3.8`.\n4. To activate this new environment, run `conda activate cellpose`\n5. To install the minimal version of cellpose, run `python -m pip install cellpose`.  \n6. To install cellpose, omnipose and the GUI, run `python -m pip install cellpose[all]`. If you're on a zsh server, you may need to use ' ' around the cellpose[all] call: `python -m pip install 'cellpose[all]'.\n\nTo upgrade cellpose (package [here](https://pypi.org/project/cellpose/)), run the following in the environment:\n\n~~~sh\npython -m pip install cellpose --upgrade\n~~~\n\nNote you will always have to run `conda activate cellpose` before you run cellpose. If you want to run jupyter notebooks in this environment, then also `conda install jupyter` and `python -m pip install matplotlib`.\n\nYou can also try to install cellpose, omnipose and the GUI dependencies from your base environment using the command\n\n~~~~sh\npython -m pip install cellpose[all]\n~~~~\n\n\nIf you have **issues** with installation, see the [docs](https://cellpose.readthedocs.io/en/latest/installation.html) for more details. You can also use the cellpose environment file included in the repository and create a cellpose environment with `conda env create -f environment.yml` which may solve certain dependency issues.\n\nIf these suggestions fail, open an issue.\n\n### GPU version (CUDA) on Windows or Linux\n\nIf you plan on running many images, you may want to install a GPU version of *torch* (if it isn't already installed).\n\nBefore installing the GPU version, remove the CPU version:\n~~~\npip uninstall torch\n~~~\n\nFollow the instructions [here](https://pytorch.org/get-started/locally/) to determine what version to install. The Anaconda install is strongly recommended, and then choose the CUDA version that is supported by your GPU (newer GPUs may need newer CUDA versions > 10.2). For instance this command will install the 10.2 version on Linux and Windows (note the `torchvision` and `torchaudio` commands are removed because cellpose doesn't require them):\n\n~~~\nconda install pytorch cudatoolkit=10.2 -c pytorch\n~~~~\n\nFor the GPU version of mxnet, you will need to install the cuda toolkit first if you haven't already (on Windows it may be necessary to install via anaconda as below):\n\n~~~\nconda install -c anaconda cudatoolkit\n~~~\n\nWhen upgrading GPU Cellpose in the future, you will want to ignore dependencies (to ensure that the pip version of torch does not install):\n~~~\npip install --no-deps cellpose --upgrade\n~~~\n\n### Installation of github version\n\nFollow steps from above to install the dependencies. Then run \n~~~\npip install git+https://www.github.com/mouseland/cellpose.git\n~~~\n\nIf you want edit ability to the code, in the github repository folder, run `pip install -e .`. If you want to go back to the pip version of cellpose, then say `pip install cellpose`.\n\n### Download of pretrained models\n\nThe models will be downloaded automatically from the [website](https://www.cellpose.org) when you first run a pretrained model in cellpose. If you are having issues with the downloads, you can download them from this [google drive zip file](https://drive.google.com/file/d/1mK8aJDg0jv6s9Vc_5HntpUPmC--p2fE0/view?usp=sharing), unzip the file and put the models in your home directory under the path .cellpose/models/, e.g. on Windows this would be C:/Users/YOUR_USERNAME/.cellpose/models/ or on Linux this would be /home/YOUR_USERNAME/.cellpose/models/, so /home/YOUR_USERNAME/.cellpose/models/cyto_0 is the full path to one model for example. If you cannot access google drive, the models are also available on baidu: Link：https://pan.baidu.com/s/1CARpRGCBHIYaz7KeyoX-fg ; Fetch code：pose ; thanks to @qixinbo!\n\n## Running cellpose\n\nThe quickest way to start is to open the GUI from a command line terminal. You might need to open an anaconda prompt if you did not add anaconda to the path:\n~~~~\npython -m cellpose\n~~~~\n\nThe first time cellpose runs it downloads the latest available trained model weights from the website.\n\nYou can now **drag and drop** any images (*.tif, *.png, *.jpg, *.gif) into the GUI and run Cellpose, and/or manually segment them. When the GUI is processing, you will see the progress bar fill up and during this time you cannot click on anything in the GUI. For more information about what the GUI is doing you can look at the terminal/prompt you opened the GUI with. For example data, see [website](http://www.cellpose.org) or this google drive [folder](https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z). For best accuracy and runtime performance, resize images so cells are less than 100 pixels across. \n\n### Step-by-step demo\n\n1. Download the google drive [folder](https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z) and unzip it. These are a subset of the test images from the paper.\n2. Start the GUI with `python -m cellpose`.\n3. Drag an image from the folder into the GUI.\n4. Set the model (in demo all are `cyto`) and the channel you want to segment (in demo all are `green`). Optionally set the second channel if you are segmenting `cyto` and have an available nucleus channel.\n5. Click the `calibrate` button to estimate the size of the objects in the image. Alternatively you can set the `cell diameter` by hand and press ENTER. You will see the size you set as a red disk at the bottom left of the image.\n6. Click the `run segmentation` button. If MASKS ON is checked, you should see masks drawn on the image.\n7. Now you can click the LEFT/RIGHT arrow keys to move through the folder and segment another image.\n\nOn the demo images each of these steps should run in less than a few seconds on a standard laptop or desktop (with mkl working).\n\n### 3D segmentation\n\nFor multi-channel, multi-Z tiff's, the expected format is Z x channels x Ly x Lx.\n\n## Contributing training data\n\nWe are very excited about receiving community contributions to the training data and re-training the cytoplasm model to make it better. Please follow these guidelines:\n\n1. Run cellpose on your data to see how well it does. Try varying the diameter, which can change results a little. \n2. If there are relatively few mistakes, it won't help much to contribute labelled data. \n3. If there are consistent mistakes, your data is likely very different from anything in the training set, and you should expect major improvements from contributing even just a few manually segmented images.\n4. For images that you contribute, the cells should be at least 10 pixels in diameter, and there should be **at least** several dozens of cells per image, ideally ~100. If your images are too small, consider combining multiple images into a single big one and then manually segmenting that. If they are too big, consider splitting them into smaller crops. \n5. For the manual segmentation, please try to outline the boundaries of the cell, so that everything (membrane, cytoplasm, nucleus) is inside the boundaries. Do not just outline the cytoplasm and exclude the membrane, because that would be inconsistent with our own labelling and we wouldn't be able to use that. \n6. Do not use the results of the algorithm in any way to do contributed manual segmentations. This can reinforce a vicious circle of mistakes, and compromise the dataset for further algorithm development. \n\nIf you are having problems with the nucleus model, please open an issue before contributing data. Nucleus images are generally much less diverse, and we think the current training dataset already covers a very large set of modalities. \n\n\n## Using the GUI\n\nThe GUI serves two main functions:\n\n1. Running the segmentation algorithm.\n2. Manually labelling data.\n\nThere is a help window in the GUI that provides more instructions and \na page in the documentation [here](http://cellpose.readthedocs.io/en/latest/gui.html).\nAlso, if you hover over certain words in the GUI, their definitions are revealed as tooltips. \nHere is a summary of their functions:\n\n<img src=\"docs/_static/cellpose_gui.png\" width=\"600\" title=\"cellpose gui\" alt=\"cellpose gui\" vspace = \"50\">\n\n### In a notebook\n\nSee [run_cellpose.ipynb](notebooks/run_cellpose.ipynb).\n\n### From the command line\n\nRun `python -m cellpose` and specify parameters as below. For instance to run on a folder with images where cytoplasm is green and nucleus is blue and save the output as a png:\n~~~\npython -m cellpose --dir ~/images_cyto/test/ --pretrained_model cyto --chan 2 --chan2 3 --save_png\n~~~\n\nYou can specify the diameter for all the images or set to 0 if you want the algorithm to estimate it on an image by image basis. Here is how to run on nuclear data (grayscale) where the diameter is automatically estimated:\n~~~\npython -m cellpose --dir ~/images_nuclei/test/ --pretrained_model nuclei --diameter 0. --save_png\n~~~\n\nSee the [docs](http://cellpose.readthedocs.io/en/latest/command.html) for more info.\n\n### Timing\n\nYou can check if cellpose is running the MKL version (if you are using the CPU not the GPU) by adding the flag `--check_mkl`. If you are not using MKL cellpose will be much slower. Here are Cellpose run times divided into the time it takes to run the deep neural network (DNN) and the time for postprocessing (gradient tracking, segmentation, quality control etc.). The DNN runtime is shown using either a GPU (Nvidia GTX 1080Ti) or a CPU (Intel 10-core 7900X), with or without network ensembling (4net vs 1net). The postprocessing runtime is similar regardless of ensembling or CPU/GPU version. Runtime is shown for different image sizes, all with a cell diameter of 30 pixels (the average from our training set).\n\n|   | 256 pix | 512 pix | 1024 pix |\n|----|-------|------|----------|\n| DNN (1net, GPU) | 0.054 s | 0.12 s | 0.31 s  |\n| DNN (1net, CPU) | 0.30 s | 0.65 s | 2.4 s  |\n| DNN (4net, GPU) | 0.23 s | 0.41 s | 1.3 s |\n| DNN (4net, CPU) | 1.3 s | 2.5 s | 9.1 s  |\n|  | |  |  |\n| Postprocessing (CPU) | 0.32 s | 1.2 s | 6.1 s  |\n\n## Outputs\n\nSee the [docs](http://cellpose.readthedocs.io/en/latest/outputs.html) for info.\n\n## Dependencies\ncellpose relies on the following excellent packages (which are automatically installed with conda/pip if missing):\n- [mxnet_mkl](https://mxnet.apache.org/)\n- [pyqtgraph](http://pyqtgraph.org/)\n- [PyQt6](http://pyqt.sourceforge.net/Docs/PyQt6/)\n- [numpy](http://www.numpy.org/) (>=1.16.0)\n- [numba](http://numba.pydata.org/numba-doc/latest/user/5minguide.html)\n- [scipy](https://www.scipy.org/)\n- [natsort](https://natsort.readthedocs.io/en/master/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kevinjohncutler/cellpose",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellpose-omni",
    "package_url": "https://pypi.org/project/cellpose-omni/",
    "platform": null,
    "project_url": "https://pypi.org/project/cellpose-omni/",
    "project_urls": {
      "Homepage": "https://github.com/kevinjohncutler/cellpose"
    },
    "release_url": "https://pypi.org/project/cellpose-omni/0.9.1/",
    "requires_dist": [
      "numpy (>=1.22.4)",
      "scipy",
      "natsort",
      "tifffile",
      "tqdm",
      "numba",
      "torch (>=1.6)",
      "opencv-python-headless",
      "fastremap",
      "imagecodecs",
      "pyqtgraph (>=0.12.4) ; extra == 'all'",
      "PyQt6.sip ; extra == 'all'",
      "PyQt6 ; extra == 'all'",
      "google-cloud-storage ; extra == 'all'",
      "omnipose-theme ; extra == 'all'",
      "superqt ; extra == 'all'",
      "colour ; extra == 'all'",
      "darkdetect ; extra == 'all'",
      "scikit-image ; extra == 'all'",
      "scikit-learn ; extra == 'all'",
      "edt ; extra == 'all'",
      "torch-optimizer ; extra == 'all'",
      "ncolor (>=1.2.1) ; extra == 'all'",
      "dask ; extra == 'distributed'",
      "dask-image ; extra == 'distributed'",
      "scikit-learn ; extra == 'distributed'",
      "sphinx (>=3.0) ; extra == 'docs'",
      "sphinxcontrib-apidoc ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "pyqtgraph (>=0.12.4) ; extra == 'gui'",
      "PyQt6.sip ; extra == 'gui'",
      "PyQt6 ; extra == 'gui'",
      "google-cloud-storage ; extra == 'gui'",
      "omnipose-theme ; extra == 'gui'",
      "superqt ; extra == 'gui'",
      "colour ; extra == 'gui'",
      "darkdetect ; extra == 'gui'",
      "scikit-image ; extra == 'omni'",
      "scikit-learn ; extra == 'omni'",
      "edt ; extra == 'omni'",
      "torch-optimizer ; extra == 'omni'",
      "ncolor (>=1.2.1) ; extra == 'omni'"
    ],
    "requires_python": "",
    "summary": "cellpose fork developed for omnipose",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17489339,
  "releases": {
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e17a6cd9e173415452a7432134eeb6833cbfc90768605d9164c7ba625c0fb4d1",
          "md5": "90061d09e480bfd9b855a53ef2817f29",
          "sha256": "de373119c36b2ac1e74a30d35d8ac9bea6f26977c0a0fde392267d134f3bf9ff"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.6.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90061d09e480bfd9b855a53ef2817f29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 195769,
        "upload_time": "2022-10-14T03:07:41",
        "upload_time_iso_8601": "2022-10-14T03:07:41.497602Z",
        "url": "https://files.pythonhosted.org/packages/e1/7a/6cd9e173415452a7432134eeb6833cbfc90768605d9164c7ba625c0fb4d1/cellpose_omni-0.6.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54a90ff3e9e1c4772359f65fa5f1aa69a81763bc4b44a412ca1746035b3585c9",
          "md5": "69e5bf0de6fe96b81cc20e1c79c835ec",
          "sha256": "a1dc84799cf3b7d2cb13c83cbb9bc67e1486ec6fe4df0204f8c55f18686f69cb"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "69e5bf0de6fe96b81cc20e1c79c835ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207092,
        "upload_time": "2022-10-14T03:07:54",
        "upload_time_iso_8601": "2022-10-14T03:07:54.211487Z",
        "url": "https://files.pythonhosted.org/packages/54/a9/0ff3e9e1c4772359f65fa5f1aa69a81763bc4b44a412ca1746035b3585c9/cellpose-omni-0.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0983f0b37d4ff825ed0e0a5e2d843e9262d7739e1cabf6315cdd425a206b3bb",
          "md5": "f116bc9b8aa76be8a400105a9fac940a",
          "sha256": "d74c9a28298473ff18fc80bf7fcbb4e18d70950f3146dfdd0359c742d79311c7"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.6.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f116bc9b8aa76be8a400105a9fac940a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 195898,
        "upload_time": "2022-10-14T07:51:17",
        "upload_time_iso_8601": "2022-10-14T07:51:17.195544Z",
        "url": "https://files.pythonhosted.org/packages/e0/98/3f0b37d4ff825ed0e0a5e2d843e9262d7739e1cabf6315cdd425a206b3bb/cellpose_omni-0.6.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03415a1c3bf366d9efe4042222816916829661e7faf6fcf651d4d4293bbb03c",
          "md5": "a0384815aea8a1da17fe38d48bff880f",
          "sha256": "f61993c8cea835ddcbee0f69efdb6163d847df555066c4512064b20e1fb512df"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a0384815aea8a1da17fe38d48bff880f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207239,
        "upload_time": "2022-10-14T07:51:29",
        "upload_time_iso_8601": "2022-10-14T07:51:29.660707Z",
        "url": "https://files.pythonhosted.org/packages/f0/34/15a1c3bf366d9efe4042222816916829661e7faf6fcf651d4d4293bbb03c/cellpose-omni-0.6.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72c587cafc497fc24fbec9fa869ab993df3ae8d3644f8114eaf5778a8f44b81a",
          "md5": "6805a81131ec3a2eeb4912124be07219",
          "sha256": "2642d888db20438a7510489ccb3f445de32bef88a389d510e242415e5e78f9b4"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.6.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6805a81131ec3a2eeb4912124be07219",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 195842,
        "upload_time": "2022-10-17T21:36:43",
        "upload_time_iso_8601": "2022-10-17T21:36:43.907509Z",
        "url": "https://files.pythonhosted.org/packages/72/c5/87cafc497fc24fbec9fa869ab993df3ae8d3644f8114eaf5778a8f44b81a/cellpose_omni-0.6.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "430a3e6e474c74ebbce2b544019f11ff3a3e1df378fa6e79f52595297627d792",
          "md5": "293c97e30ab3eb8e31e9cc5dcc29b5a5",
          "sha256": "bfcc15c810a877bcca510b8ecbb4089a20597bf9eedc77c4c88e6858a95cbe63"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.6.9.tar.gz",
        "has_sig": false,
        "md5_digest": "293c97e30ab3eb8e31e9cc5dcc29b5a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207199,
        "upload_time": "2022-10-17T21:36:56",
        "upload_time_iso_8601": "2022-10-17T21:36:56.653437Z",
        "url": "https://files.pythonhosted.org/packages/43/0a/3e6e474c74ebbce2b544019f11ff3a3e1df378fa6e79f52595297627d792/cellpose-omni-0.6.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39a7b6feb1647d0c1f5e65f1dbfa90eae3499a15b45d165089ab0c1d1566d4ca",
          "md5": "fa7e875ebf1148da4c202f8ee2737416",
          "sha256": "692dd24c92b38ef4f902ff812c3042d2d28e519ad09bbad0bf78b46145cbff7f"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa7e875ebf1148da4c202f8ee2737416",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 195841,
        "upload_time": "2022-10-21T03:33:21",
        "upload_time_iso_8601": "2022-10-21T03:33:21.059629Z",
        "url": "https://files.pythonhosted.org/packages/39/a7/b6feb1647d0c1f5e65f1dbfa90eae3499a15b45d165089ab0c1d1566d4ca/cellpose_omni-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "388d55d3658c863049a2cfa737cb8779bdb9fa91d14dd9b08ee2a206f95f929c",
          "md5": "f0432ce3894df97461f5203432d0e73d",
          "sha256": "27cd4c196c21c4be0d27d0ceb20e0d1a6ebbca3e5b1a6868fa3334224956a731"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0432ce3894df97461f5203432d0e73d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207177,
        "upload_time": "2022-10-21T03:33:34",
        "upload_time_iso_8601": "2022-10-21T03:33:34.215455Z",
        "url": "https://files.pythonhosted.org/packages/38/8d/55d3658c863049a2cfa737cb8779bdb9fa91d14dd9b08ee2a206f95f929c/cellpose-omni-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b6bfdff8cf03ed0235ce7f63508cb00490f83c2ebe60a020aec23ce1b4cd700",
          "md5": "ada20c03ab47edd8e0466b02d52861d4",
          "sha256": "981de3564cd8b083b44f55e21bec7e2a7050fe6334830fdbf0247093c062c7c0"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ada20c03ab47edd8e0466b02d52861d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 196044,
        "upload_time": "2022-10-31T19:32:51",
        "upload_time_iso_8601": "2022-10-31T19:32:51.875424Z",
        "url": "https://files.pythonhosted.org/packages/3b/6b/fdff8cf03ed0235ce7f63508cb00490f83c2ebe60a020aec23ce1b4cd700/cellpose_omni-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f5396adcd43d4956a33f03f8d904779a672b04a98c9a248ca18f6d7d1fa673a",
          "md5": "4c2496da54fc166f98fb57d0712dbdec",
          "sha256": "a70731dfdc06110b4e120d8452dedff3586eb70eeebc0bc524485e80fc7982b4"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4c2496da54fc166f98fb57d0712dbdec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207398,
        "upload_time": "2022-10-31T19:33:04",
        "upload_time_iso_8601": "2022-10-31T19:33:04.164066Z",
        "url": "https://files.pythonhosted.org/packages/2f/53/96adcd43d4956a33f03f8d904779a672b04a98c9a248ca18f6d7d1fa673a/cellpose-omni-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5253840843023bce538afd780dd727076816b1b80fc9857854773ee10dd17316",
          "md5": "eec9e2992cc477062d351c31c899e55e",
          "sha256": "f7d33dca8e5c735e676a063b836bc5e43822ea09defeaca50eb6e8e0d0ecbd11"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eec9e2992cc477062d351c31c899e55e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 196113,
        "upload_time": "2022-11-21T05:51:59",
        "upload_time_iso_8601": "2022-11-21T05:51:59.760431Z",
        "url": "https://files.pythonhosted.org/packages/52/53/840843023bce538afd780dd727076816b1b80fc9857854773ee10dd17316/cellpose_omni-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5de3fa95af1e41fb2474e547f482e9c46c31d26bbc19b08fa6843ed2f5123ae6",
          "md5": "72d97a300764f48045fef9a93b3f1c2e",
          "sha256": "17fb96b93820249466c1bc1b85f2afe2f08b7bc2239abe0c269c88f20e93c24c"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "72d97a300764f48045fef9a93b3f1c2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9207465,
        "upload_time": "2022-11-21T05:52:12",
        "upload_time_iso_8601": "2022-11-21T05:52:12.463213Z",
        "url": "https://files.pythonhosted.org/packages/5d/e3/fa95af1e41fb2474e547f482e9c46c31d26bbc19b08fa6843ed2f5123ae6/cellpose-omni-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26f27aefbf90b558f2c57b83d763dd952674db8ac869c76f00e95d7f12583f32",
          "md5": "3a2b00a914cd44aab317788557c44706",
          "sha256": "7074f248656b5e29aae3e615ade4ce350dcc8a170cee94d5655a739fc454b6f8"
        },
        "downloads": -1,
        "filename": "cellpose_omni-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a2b00a914cd44aab317788557c44706",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 200149,
        "upload_time": "2023-03-29T06:29:29",
        "upload_time_iso_8601": "2023-03-29T06:29:29.904022Z",
        "url": "https://files.pythonhosted.org/packages/26/f2/7aefbf90b558f2c57b83d763dd952674db8ac869c76f00e95d7f12583f32/cellpose_omni-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea575f0c6f27b7c33d2112a3e7abc0889b11699dca6b1f03cf4a7543c84ff3a",
          "md5": "0cf24ea500599bd419afbc7780bb90ba",
          "sha256": "84f3199a751a74ddab643227bd0425ffafedcc2e739a57958f73a6d5f5348b6e"
        },
        "downloads": -1,
        "filename": "cellpose-omni-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0cf24ea500599bd419afbc7780bb90ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 308317,
        "upload_time": "2023-03-29T06:29:32",
        "upload_time_iso_8601": "2023-03-29T06:29:32.481149Z",
        "url": "https://files.pythonhosted.org/packages/9e/a5/75f0c6f27b7c33d2112a3e7abc0889b11699dca6b1f03cf4a7543c84ff3a/cellpose-omni-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26f27aefbf90b558f2c57b83d763dd952674db8ac869c76f00e95d7f12583f32",
        "md5": "3a2b00a914cd44aab317788557c44706",
        "sha256": "7074f248656b5e29aae3e615ade4ce350dcc8a170cee94d5655a739fc454b6f8"
      },
      "downloads": -1,
      "filename": "cellpose_omni-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3a2b00a914cd44aab317788557c44706",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 200149,
      "upload_time": "2023-03-29T06:29:29",
      "upload_time_iso_8601": "2023-03-29T06:29:29.904022Z",
      "url": "https://files.pythonhosted.org/packages/26/f2/7aefbf90b558f2c57b83d763dd952674db8ac869c76f00e95d7f12583f32/cellpose_omni-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ea575f0c6f27b7c33d2112a3e7abc0889b11699dca6b1f03cf4a7543c84ff3a",
        "md5": "0cf24ea500599bd419afbc7780bb90ba",
        "sha256": "84f3199a751a74ddab643227bd0425ffafedcc2e739a57958f73a6d5f5348b6e"
      },
      "downloads": -1,
      "filename": "cellpose-omni-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0cf24ea500599bd419afbc7780bb90ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 308317,
      "upload_time": "2023-03-29T06:29:32",
      "upload_time_iso_8601": "2023-03-29T06:29:32.481149Z",
      "url": "https://files.pythonhosted.org/packages/9e/a5/75f0c6f27b7c33d2112a3e7abc0889b11699dca6b1f03cf4a7543c84ff3a/cellpose-omni-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}