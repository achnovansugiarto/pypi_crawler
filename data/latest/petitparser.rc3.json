{
  "info": {
    "author": "Nikola BebiÄ‡",
    "author_email": "nikola.bebic99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PetitParser for Python\n\nGrammars for programming languages are traditionally specified statically. They are hard to compose and reuse due to ambiguities that inevitably arise. PetitParser combines ideas from scannnerless parsing, parser combinators, parsing expression grammars (PEG) and packrat parsers to model grammars and parsers as objects that can be reconfigured dynamically.\n\nPetitParser was originally implemented in Smalltalk. This Python implementation (and parts of the README as well) is mostly a direct translation of the [Java version](https://github.com/petitparser/java-petitparser).\n\n## Tutorial\n\n### Writing a simple grammar\n\nWriting grammars with PetitParser is as simple as writing python code. For example to write a grammar that can parse identifiers that start with a letter followed by zero or more letters or digits is defined as follows:\n\n```python\nfrom petitparser import character as c\nident = c.letter() & (c.letter() | c.digit()).star()\n```\n\n### Parsing some input\n\nTo parse a string we can use the `Parser.parse` method:\n\n```python\nid1 = ident.parse('yeah')\nid2 = ident.parse('f12')\n```\n\nThe method returns a `Result` which is either a `Success` or a `Failure` (can be checked with `Result.is_success` / `Result.is_failure` properties). If it's a success (like above) we can get the result with `Result.value` property:\n\n```python\nprint(id1.value) # ['y', ['e', 'a', 'h']]\nprint(id2.value) # ['f', ['1', '2']]\n```\n\nIf we try to parse somehing invalid, we get an instance of `Failure`\n\n```python\nid3 = ident.parse('123')\nprint(id3.message)  # letter expected\nprint(id3.position) # 0\n```\n\nIf you are only interested if a string matches or not, you can use `Parser.accept()` method:\n\n```python\nprint(ident.accept('foo')) # True\nprint(ident.accept('123')) # False\n```\n\n### Diferent kinds of parsers\n\n\n\nPetitParser provide a large set of ready-made parser that you can compose to consume and transform arbitrarily complex languages. The terminal parsers are the most simple ones. We've already seen a few of those:\n\n* `petitparser.character.of('a')` parses a single character `a`.\n* `petitparser.string.of('abc')` parses the string `abc`.\n* `petitparser.character.any()` parses any character \n* `petitparser.character.digit()` parses any digit (using `str.isdigit`)\n* `petitparser.character.letter()` parses any leter (using `str.isalpha`) \n* `petitparser.character.word()` parses any letter or figit (using `str.isalnum`) \n\nOther parsers are available in `petitparser.character` and `petitparser.string` modules.\n\nSo instead of using the letter and digit predicate, we could have written our identifier parser like this:\n\n```python\nident = c.letter() & c.word().star()\n```\n\nNext set of parsers are used to combine other persers together:\n\n* `p1.seq(p2)` or `p1 & p2`: parses `p1` followed by `p2`\n* `p1.or_(p2)` or `p1 | p2`: pasres `p1`, and if that fails parses `p2` (ordered choice)\n* `p.star()` parses `p` zero or more times\n* `p.plus()` parses `p` one or more times\n* `p.optional()` parses `p` if possible\n* `p[m:n]` parses `p` between `m` (default 0) and `n` (default unlimited) times\n* `p.and_()` or `+p` parses `p`, but does not consume input\n* `p.not_()` or `-p` parses `p` and succeeds if that fails, but does not consume input.\n* `p.end()` parses `p` and succeeds at the end of input.\n\n> _Note:_ some methods are suffixe with an underscore to keep their original names, and to not conflict with the Python keywords\n\nTo attach an action or transformation to a parser we can use the following methods:\n\n* `p.map(lambda x: ...)` performs the transformation given by the function.\n* `p.pick(n)` returns the `n`-th element of the list `p` returns.\n* `p.flatten()` creates a string from the result of `p`.\n* `p.token()` creates a `Token` from the result of `p`.\n* `p.trim()` trims whitespace before and after `p`.\n\nTo return the string of the parsed identifier, we can modify our parser like this:\n\n```python\nident = (c.letter() & c.word().star()).flatten()\n```\n\nTo conveniently find all matches in a given input string you can use `Parser.matches_skipping()`:\n\n```python\nprint(ident.matches_skipping('foo 123 bar4')) # ['foo', 'bar4']\n```\n\n### Writing more complicated grammar\n\nNow we are able to write a more complicated grammar for evaluating simple arithmetic expressions. Within a file we start with the grammar for a number (actually an integer):\n\n```python\nnumber = c.digit().plus().flatten().trim().map(int)\n```\n\nThen we define the productions for addition and multiplication in order of precedence. Note that we instantiate the productions with undefined parsers upfront, because they recursively refer to each other. Later on we can resolve this recursion by setting their reference:\n\n```python\nfrom petitparser import SettableParser\nterm = SettableParser.undefined()\nprod = SettableParser.undefined()\nprim = SettableParser.undefined()\n\nterm.set(\n    (prod & c.of('+').trim() & term).map(lambda x: x[0] + x[2])\n    | prod\n)\n\nprod.set(\n    (prim & c.of('*').trim() & prod).map(lambda x: x[0] * x[2])\n    | prim\n)\n\nprim.set(\n    (c.of('(').trim() & term & c.of(')').trim())\n        .map(lambda x: x[1])\n    | number\n)\n```\n\nTo make sure that our parser consumes all input we wrap it with the `end()` parser into the start production:\n\n```python\nstart = term.end()\n```\n\nThat's it, now we can test our parser and evaluator:\n\n```python\nprint(start.parse('1 + 2 * 3').value)   # 7\nprint(start.parse('(1 + 2) * 3').value) # 9\n```\n\nAs an exercise we could extend the parser to also accept negative numbers and floating point numbers, not only integers. Furthermore it would be useful to support subtraction and division as well. All these features can be added with a few lines of PetitParser code.\n\n### Using the Expression Builder\n\nWriting such expression parsers is pretty common and can be quite tricky to get right. To simplify things, PetitParser comes with a builder that can help you to define such grammars easily. It supports the definition of operator precedence; and prefix, postfix, left- and right-associative operators.\n\n```python\nfrom petitparser import ExpressionBuilder\nbuilder = ExpressionBuilder()\n```\n\nThen we define the operator-groups in descending precedence. The highest precedence are the literal numbers themselves. This time we accept floating point numbers, not just integers. In the same group we add support for parenthesis (note that the wrapper action receives 3 arguments, including both wrapper parts):\n\n```python\nbuilder.group()\\\n    .primitive((\n            c.digit().plus()\n            & (c.of('.') & c.digit().plus()).optional()\n        ).flatten().trim().map(float))\\\n    .wrapper(\n        c.of('(').trim(),\n        c.of(')').trim(),\n        lambda _l, x, _r: x\n    )\n```\n\nThen come the normal arithmetic operators. Note, that the action blocks receive both of the terms and the parsed operator in the order they appear in the parsed input, and the operator:\n\n```python\n# negation is a prefix operator\nbuilder.group()\\\n    .prefix(c.of('-'), lambda _op, x: -x)\n\n# power is right-associative\nbuilder.group()\\\n    .right(c.of('^'), lambda lhs, _op, rhs: lhs ** rhs)\n\n# multiplication and addition are left-assicoative\nbuilder.group()\\\n    .left(c.of('*'), lambda lhs, _op, rhs: lhs * rhs)\\\n    .left(c.of('/'), lambda lhs, _op, rhs: lhs / rhs)\nbuilder.group()\\\n    .left(c.of('+'), lambda lhs, _op, rhs: lhs + rhs)\\\n    .left(c.of('-'), lambda lhs, _op, rhs: lhs - rhs)\n```\n\nFinally we can build the parser:\n\n```python\nparser = builder.build().end()\n```\n\nAfter executing the above code we get an efficient parser that correctly evaluates expressions like:\n\n```python\nprint(parser.parse('-8').value)     # -8.0\nprint(parser.parse('1+2*3').value)  # 7\nprint(parser.parse('1*2+3').value)  # 5\nprint(parser.parse('8/4/2').value)  # 1\nprint(parser.parse('2^2^3').value)  # 256\n```\n\n### Using Grammar Definition\n\nUsing the `GrammarDefinition` class is a bit different than in other PetitParser implementations, and is done so to make it simpler to write grammars. It uses some metaclass trickery to allow simple definitions of complex grammars.\n\nHere is a lambda expression grammar in PEG syntax:\n\n```\nexpression  ::= variable / abstraction / application\nvariable    ::= letter word*\nabstraction ::= '\\' variable '.' expression\napplication ::= '(' expression expression ')'\n\nstart       ::= expression EOF\n```\n\nAnd here it is translated into PetitParser Grammar Definition\n\n```python\nfrom petitparser import GrammarDefinition, ref\nfrom petitparser import character as c\n\nclass LambdaGrammar(GrammarDefinition):\n    start = ref('expression').end()\n    \n    expression = (\n        ref('variable')\n        | ref('abstraction')\n        | ref('application')\n    )\n    \n    variable = (\n        c.letter()\n        & c.word().star()\n    ).flatten().trim()\n    \n    abstraction = (\n        c.of('\\\\').trim()\n        & ref('variable')\n        & c.of('.').trim()\n        & ref('expression'))\n\n    application = (\n        c.of('(').trim()\n        & ref('expression')\n        & ref('expression')\n        & c.of(')').trim()\n    )\n```\n\n## License\n\nThe MIT License, see [LICENSE](./LICENSE)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/profMagija/py-petitparser",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "petitparser",
    "package_url": "https://pypi.org/project/petitparser/",
    "platform": "",
    "project_url": "https://pypi.org/project/petitparser/",
    "project_urls": {
      "Homepage": "https://github.com/profMagija/py-petitparser"
    },
    "release_url": "https://pypi.org/project/petitparser/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "PetitParser implemented in Python",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11117389,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a02155b0a8e6ed5c67c38121ad1f355f1bbc51fb330e43074053360676aeb22",
          "md5": "7040f6a9a688ed4fdb8bafb6f4050f8e",
          "sha256": "311610c578a0f9290e13bc3be4e8f67e19f61848927d52e7bf54d1402420c0ef"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7040f6a9a688ed4fdb8bafb6f4050f8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5247,
        "upload_time": "2021-08-07T09:17:27",
        "upload_time_iso_8601": "2021-08-07T09:17:27.377422Z",
        "url": "https://files.pythonhosted.org/packages/0a/02/155b0a8e6ed5c67c38121ad1f355f1bbc51fb330e43074053360676aeb22/petitparser-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e76675baa2ccd89ae07489c8818be41bc3752c16d984dd3bc348638748d138b",
          "md5": "69f93effa0c17717419d669080f2f92f",
          "sha256": "def7334b44a22aaa3521fa620af9fc44f4430514b8d682c18530a7ffd7ea2174"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69f93effa0c17717419d669080f2f92f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7665,
        "upload_time": "2021-08-07T09:17:28",
        "upload_time_iso_8601": "2021-08-07T09:17:28.577481Z",
        "url": "https://files.pythonhosted.org/packages/7e/76/675baa2ccd89ae07489c8818be41bc3752c16d984dd3bc348638748d138b/petitparser-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "105fd63e79577b6bfb10ce986a7bdac3ab9495d6ab417787de584e3a40a2f230",
          "md5": "b1e4b272f39c2b7ba57053c5db598508",
          "sha256": "65c2cb8f1cfdfce6e253521d0bba16c821b2d4e39a14e4b79383499b5b8f9b20"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1e4b272f39c2b7ba57053c5db598508",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8592,
        "upload_time": "2021-08-07T09:26:55",
        "upload_time_iso_8601": "2021-08-07T09:26:55.502112Z",
        "url": "https://files.pythonhosted.org/packages/10/5f/d63e79577b6bfb10ce986a7bdac3ab9495d6ab417787de584e3a40a2f230/petitparser-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f740946285925329e26153d9a594553a1893c92258a4c6d20d3dfe96e4365db",
          "md5": "e818d2b88e4bac1944d6eac2d78838c1",
          "sha256": "ac2b7ef2d5fb75b87c75e532fe85f25174ea88d539cab6d5cf8e837523ecb499"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e818d2b88e4bac1944d6eac2d78838c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7935,
        "upload_time": "2021-08-07T09:26:57",
        "upload_time_iso_8601": "2021-08-07T09:26:57.270015Z",
        "url": "https://files.pythonhosted.org/packages/4f/74/0946285925329e26153d9a594553a1893c92258a4c6d20d3dfe96e4365db/petitparser-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eff3aab386af5217323958b46f8a8bb1074eb757d5f6a8722552d391bcbf7960",
          "md5": "bbfbfa429a894bbcbeb1738c0ea12f7d",
          "sha256": "3d9a70b08ed5653a4ca7dcbd006af0df787b08def2d899c2482257309395422e"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbfbfa429a894bbcbeb1738c0ea12f7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19228,
        "upload_time": "2021-08-07T10:51:47",
        "upload_time_iso_8601": "2021-08-07T10:51:47.155026Z",
        "url": "https://files.pythonhosted.org/packages/ef/f3/aab386af5217323958b46f8a8bb1074eb757d5f6a8722552d391bcbf7960/petitparser-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b37cbbd462cf88c49be3ca3756ce24df00861a10d203d3de3ed5f52982e9f55",
          "md5": "776d62941c664ef4d4079a7ca8b49fd9",
          "sha256": "7033b4a016cbb48533523e96f36d480ef2c4a6a9e451f1ce1138ee019f3d793b"
        },
        "downloads": -1,
        "filename": "petitparser-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "776d62941c664ef4d4079a7ca8b49fd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18129,
        "upload_time": "2021-08-07T10:51:49",
        "upload_time_iso_8601": "2021-08-07T10:51:49.056359Z",
        "url": "https://files.pythonhosted.org/packages/2b/37/cbbd462cf88c49be3ca3756ce24df00861a10d203d3de3ed5f52982e9f55/petitparser-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eff3aab386af5217323958b46f8a8bb1074eb757d5f6a8722552d391bcbf7960",
        "md5": "bbfbfa429a894bbcbeb1738c0ea12f7d",
        "sha256": "3d9a70b08ed5653a4ca7dcbd006af0df787b08def2d899c2482257309395422e"
      },
      "downloads": -1,
      "filename": "petitparser-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bbfbfa429a894bbcbeb1738c0ea12f7d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19228,
      "upload_time": "2021-08-07T10:51:47",
      "upload_time_iso_8601": "2021-08-07T10:51:47.155026Z",
      "url": "https://files.pythonhosted.org/packages/ef/f3/aab386af5217323958b46f8a8bb1074eb757d5f6a8722552d391bcbf7960/petitparser-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b37cbbd462cf88c49be3ca3756ce24df00861a10d203d3de3ed5f52982e9f55",
        "md5": "776d62941c664ef4d4079a7ca8b49fd9",
        "sha256": "7033b4a016cbb48533523e96f36d480ef2c4a6a9e451f1ce1138ee019f3d793b"
      },
      "downloads": -1,
      "filename": "petitparser-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "776d62941c664ef4d4079a7ca8b49fd9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18129,
      "upload_time": "2021-08-07T10:51:49",
      "upload_time_iso_8601": "2021-08-07T10:51:49.056359Z",
      "url": "https://files.pythonhosted.org/packages/2b/37/cbbd462cf88c49be3ca3756ce24df00861a10d203d3de3ed5f52982e9f55/petitparser-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}