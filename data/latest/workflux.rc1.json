{
  "info": {
    "author": "Kersten Henrik Breuer",
    "author_email": "k.breuer@dkfz.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "[badges-health-workflux-master]: <https://img.shields.io/website?url=https%3A%2F%2Fcwlab.krini.ingress.rancher.computational.bio%2F>\n[depl-ui-workflux-dkfz-master]: <https://cwlab.dev.krini.ingress.rancher.computational.bio/>\n\n# workflUX - The Workflow User eXperience\n(Formerly known as CWLab.)\n\nAn open-source, cloud-ready web application for simplified deployment of big data workflows.\n\n**CI/CD:**\n[![Build Status](https://dev.azure.com/ComputationalEpigenomics/cwlab/_apis/build/status/CompEpigen.cwlab?branchName=master)](https://dev.azure.com/ComputationalEpigenomics/cwlab/_build/latest?definitionId=2&branchName=master)\n\n**Packaging:**\n[![PyPI status](https://img.shields.io/pypi/status/workflux.svg)](https://pypi.python.org/pypi/workflux/)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/workflux.svg)](https://pypi.python.org/pypi/workflux/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/workflux.svg)](https://pypi.python.org/pypi/workflux/)\n[![Docker Cloud Automated build](https://img.shields.io/docker/cloud/automated/compepigen/workflux)](https://hub.docker.com/r/compepigen/workflux/builds)\n  \n**Citation & Contribution:**\n[![DOI](https://zenodo.org/badge/180648493.svg)](https://zenodo.org/badge/latestdoi/180648493)\n[![All Contributors](https://img.shields.io/badge/all_contributors-9-orange.svg?style=flat-square)](#contributors-)\n\n\n## Installation and Quick Start:\n**Attention: workflUX is in beta state and breaking changes might be introduced in the future. However, if you like to test it or even run in production, we will support you.**\n\nInstallation can be done using pip:  \n`python3 -m pip install workflux`\n\nPlease see the section \"Configuration\" for a discussion of available options.\n\nStart the webserver with your custom configuration (or leave out the `--config` flag to use the default one):  \n`workflux up --config config.yaml`\n\nIf you like to make use of containers for dependency management, you need to install [Docker](https://docs.docker.com/install/) or a Docker-compatible containerization solution like [singularity](https://singularity.lbl.gov/) or [udocker](https://github.com/indigo-dc/udocker). To run on Windows or MacOs, please install the dedicated docker versions: [Docker for Windows](https://docs.docker.com/docker-for-windows/), [Docker for Mac](https://docs.docker.com/docker-for-mac/) \n\nThe usage of the web interface should be self-explanatory with build-in instruction. The following section gives an overview of the basic usage scenario.\n\n## Supported Systems:\n\nworkflUX is written in platform-agnostic python and can therefore be executed on:  \n\n- **Linux**\n- **MacOs**\n- **Windows**\\*\n\nAny CWL runner that has a command-line interface can be integrated into workflUX in order to execute CWL workflows or tool-wrappers, such as:  \n\n- **cwltool** (the reference implementation) - https://github.com/common-workflow-language/cwltool\n- **Toil** (UCSC) - https://github.com/DataBiosphere/toil\n- **Cromwell** (Broad Institute) - https://github.com/broadinstitute/cromwell\n- **Reana** (CERN) - https://reana.readthedocs.io/en/latest/index.html\n- **CWLEXEC** (IBM) - https://github.com/IBMSpectrumComputing/cwlexec\n(Please find a constantly updated list at: https://www.commonwl.org/#Implementations)\n\nTherefore, workflUX can be used on any infrastructure supported by these CWL runners, including:  \n\n- **single workstations**\n- **HPC clusters** (PBS, LSF, slurm, ...)\n- **clouds** (AWS, GCP, Azure, OpenStack)\n\n\\***Please Note:**  \nExecution on Windows is only supported by cwltool which talks to docker for windows. Therefore, CWL-wrapped tools and workflows which where originally designed for Linux/MacOs can be executed on Windows with a graphical interface provided by workflUX.\n\n## Usage:\nPlease see our [tutorial](./tutorials/Covid19_MSA_Group_Comparison.md), that walks you through an simple yet meaningful example of how workflUX can be used to compare the spike protein sequences of Covid-19 in two patient cohorts.  \n\nHere are some apetizers:\n![welcome screenshot](./screenshots/0.0_welcome.png)  \n \n![create job screenshot](./screenshots/2.4_create_job.png)\n## Configuration:\nworkflUX is a highly versatile package and makes almost no assumptions on your hard- and software environment used for the execution of CWL. To adapt it to your system and use case, a set of configuration options is available:  \n\n- General configs, including: \n    - webserver (hosting IP address and port, remotely or locally available, login protected or not)\n    - paths of working directories\n- Execution profiles:  \n    This flexible API allows you to adapt workflUX to your local software environment and to integrate a CWL runner of your choice (such as Cwltool, Toil, or Cromwell).\n\nAll configuration options can be specified in a single YAML file which is provided to workflUX upon start:  \n`workflux up --config my_config.yaml`\n\nTo get an example config file, run the following command:  \n`workflux print_config > config.yaml`\n(or see the example below)\n\n### General Configs:\n\n- **WEB_SERVER_HOST**:  \n    Specify the host or IP address on which the webserver shall run. Use `localhost` for local usage on your machine only. Use `0.0.0.0` to allow remote accessibility by other machines in the same network.  \n    *Default*: `localhost`\n- **WEB_SERVER_PORT**:  \n    Specify the port used by the webserver.  \n    *Default*: 5000\n\n- **TEMP_DIR**:  \n    Directory for temporary files.  \n    *Default*: a subfolder \"workflux/temp\" in the home directory\n- **WORKFLOW_DIR**:  \n    Directory for saving CWL documents.  \n    *Default*: a subfolder \"workflux/temp\" in the home directory\n- **EXEC_DIR**:  \n    Directory for saving execution data including output files.  \n    *Default*: a subfolder \"workflux/temp\" in the home directory\n- **DEFAULT_INPUT_DIR**:  \n    Default directory where users can search for input files. You may specify additional input directories using the \"**ADD_INPUT_DIRS**\" parameter.\n    *Default*: a subfolder \"workflux/temp\" in the home directory\n- **DB_DIR**:  \n    Directory for databases.  \n    *Default*: a subfolder \"workflux/temp\" in the home directory\n- **ADD_INPUT_DIRS**:  \n    In addition to \"**DEFAULT_INPUT_DIR**\", these directories can be searched by the user for input files.  \n    Please specify them in the format \"*name: path*\" like shown in this example:  \n    ```\n    ADD_INPUT_DIRS:\n        GENOMES_DIR: '/ngs_share/genomes'\n        PUBLIC_GEO_DATA: '/datasets/public/geo'\n    ```\n    *Default*: no additional input dirs.\n- **ADD_INPUT_AND_UPLOAD_DIRS**:  \n    Users can search these directories for input files (in addition to \"**DEFAULT_INPUT_DIR**\") and they may also upload their one files.  \n    Please specify them in the format \"*name: path*\" like shown in this example:  \n    ```\n    ADD_INPUT_AND_UPLOAD_DIRS:\n        UPLOAD_SCRATCH: '/scratch/upload'\n        PERMANEN_UPLOAD_STORE: '/datasets/upload'\n    ```\n    *Default*: no additional input dirs.\n\n- **DEBUG**:  \n    If set to True, the debugging mode is turned on. Do not use on production systems.  \n    *Default*: False\n    \n### Exec Profiles:  \nThis is where you configure how to execute cwl jobs on your system. A profile consists of four steps: prepare, exec, eval, and finalize (only exec required, the rest is optional). For each step, you can specify commands that are executed in bash or cmd terminal.  \n\nYou can define multiple execution profile as shown in the config example below. This allows frontend users to choose between different execution options (e.g. using different CWL runners, different dependency management systems, or even choose a between multiple available batch execution infrastructures like lsf, pbs, ...). For each execution profile, following configuration parameters are available (but only **type** and **exec** is required):  \n\n- **type**:  \n    Specify which shell/interpreter to use. For Linux or MacOS use `bash`. For Windows, use `powershell`.  \n    *Required*.\n- **max_retries**:\n    Specify how many times the execution (all steps) is retried before marking a run as failed.\n- **timeout**:  \n    For each step in the execution profile, you can set a timeout limit.  \n    *Default*:  \n    ```yaml\n    prepare: 120\n    exec: 86400\n    eval: 120\n    finalize: 120\n    ```\n\n- **prepare**\\*:  \n    Commands that are executed before the actual CWL execution. For instance to load required python/conda environments.  \n    *Optional*.\n- **exec**\\*:  \n    Commands to start the CWL execution. Usually, this is only the command line to execute the CWL runner. The stdout and stderr of the CWL runner should be redirected to the predefined log file.  \n    *Required*.\n- **eval**\\*:  \n    The exit status at the end of the *exec* step is automatically checked. Here you can specify commands to additionally evaluate the content of the execution log to determine if the execution succeeded. To communicate failure to workflUX, set the `SUCCESS` variable to `False`.  \n    *Optional*.\n- **finalize**\\*:\n    Commands that are executed after *exec* and *eval*. For instance, this can be used to clean up temporary files.\n\n    \n\\* **Additional notes regarding execution profile steps:**  \n\n- In each step following predefined variables are available:\n    - ``JOB_ID``\n    - ``RUN_ID`` (please note: is only unique within a job)\n    - ``WORKFLOW`` (the path to the used CWL document)\n    - ``RUN_INPUT`` (the path to the YAML file containing input parameters)\n    - ``OUTPUT_DIR`` (the path of the run-specific output directory)\n    - ``LOG_FILE`` (the path of the log file that should receive the stdout and stderr of CWL runner)\n    - ``SUCCESS`` (if set to `False` the run will be marked as failed and terminated)\n    - ``PYTHON_PATH`` (the path to the python interpreter used to run workflUX)\n- The steps will be executed in the order: prepare, exec, eval, finalize.\n- You may define your own variables in one step and access them in the subsequent steps.\n- At the end of each step. The exit code is checked. If it is non-zero, the run will be marked as failed. Please note, if a step consists of multiple commands and an intermediate command fails, this will not be recognized by workflUX as long as the final command of the step will succeed. To manually communicate failure to workflUX, please set the `SUCCESS` variable to `False`.\n- The steps are executed using pexpect (https://pexpect.readthedocs.io/en/stable/overview.html), this allows you also connect to a remote infrastructure via ssh (recommended to use an ssh key). Please be aware that the path of files or directories specified in the input parameter YAML will not be adapted to the new host. We are working on solutions to achieve an automated path correction and/or upload functionality if the execution host is not the workflUX server host.\n- On Windows, please be aware that each code block (contained in ``{...}``) has to be in one line.\n\n### Example configuration files:\n  \nBelow, you can find example configurations for local execution of CWL workflows or tools with cwltool.\n\n#### Linux / MacOs:\n\n```yaml  \nWEB_SERVER_HOST: localhost \nWEB_SERVER_PORT: 5000\n\nDEBUG: False  \n\nTEMP_DIR: '/home/workflux_user/workflux/temp'\nWORKFLOW_DIR: '/home/workflux_user/workflux/workflows'\nEXEC_DIR: '/datasets/processing_out/'\nDEFAULT_INPUT_DIR: '/home/workflux_user/workflux/input'\nDB_DIR: '/home/workflux_user/workflux/db'\n\nADD_INPUT_DIRS:\n    GENOMES_DIR: '/ngs_share/genomes'\n    PUBLIC_GEO_DATA: '/datasets/public/geo'\n\nADD_INPUT_AND_UPLOAD_DIRS:\n    UPLOAD_SCRATCH: '/scratch/upload'\n    PERMANEN_UPLOAD_STORE: '/datasets/upload'\n\nEXEC_PROFILES:\n    cwltool_local:\n        type: bash\n        max_retries: 2\n        timeout:\n            prepare: 120\n            exec: 86400\n            eval: 120\n            finalize: 120\n        exec: |\n            cwltool --outdir \"${OUTPUT_DIR}\" \"${WORKFLOW}\" \"${RUN_INPUT}\" \\\n                >> \"${LOG_FILE}\" 2>&1\n        eval: | \n            LAST_LINE=$(tail -n 1 ${LOG_FILE})\n            if [[ \"${LAST_LINE}\" == *\"Final process status is success\"* ]]\n            then\n                SUCCESS=True\n            else\n                SUCCESS=False\n                ERR_MESSAGE=\"cwltool failed - ${LAST_LINE}\"\n            fi\n```\n\n#### Windows:\n\n```yaml\nWEB_SERVER_HOST: localhost\nWEB_SERVER_PORT: 5000\n\nDEBUG: False  \n\nTEMP_DIR: 'C:\\Users\\workflux_user\\workflux\\temp'\nWORKFLOW_DIR: 'C:\\Users\\workflux_user\\workflux\\workflows'\nEXEC_DIR: 'D:\\processing_out\\'\nDEFAULT_INPUT_DIR: 'C:\\Users\\workflux_user\\workflux\\input'\nDB_DIR: 'C:\\Users\\workflux_user\\workflux\\db'\n\nADD_INPUT_DIRS:\n    GENOMES_DIR: 'E:\\genomes'\n    PUBLIC_GEO_DATA: 'D:\\public\\geo'\n    \nADD_INPUT_AND_UPLOAD_DIRS:\n    UPLOAD_SCRATCH: 'E:\\upload'\n    PERMANEN_UPLOAD_STORE: '\\D:\\upload'\n\nEXEC_PROFILES:\n    cwltool_windows:\n        type: powershell\n        max_retries: 2\n        timeout:\n            prepare: 120\n            exec: 86400\n            eval: 120\n            finalize: 120\n        exec: |\n            . \"${PYTHON_PATH}\" -m cwltool --debug --default-container ubuntu:16.04 --outdir \"${OUTPUT_DIR}\" \"${CWL}\" \"${RUN_INPUT}\" > \"${LOG_FILE}\" 2>&1\n\n        eval: |\n            $LAST_LINES = (Get-Content -Tail 2 \"${LOG_FILE}\")\n\n            if ($LAST_LINES.Contains(\"Final process status is success\")){$SUCCESS=\"True\"}\n            else {$SUCCESS=\"False\"; $ERR_MESSAGE = \"cwltool failed - ${LAST_LINE}\"}\n```\n\n## Licence:\nThis package is free to use and modify under the Apache 2.0 Licence.\n\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/KerstenBreuer\"><img src=\"https://avatars3.githubusercontent.com/u/28008309?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kersten Breuer</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=KerstenBreuer\" title=\"Code\">💻</a> <a href=\"#design-KerstenBreuer\" title=\"Design\">🎨</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lutsik\"><img src=\"https://avatars0.githubusercontent.com/u/10563886?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pavlo Lutsik</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=lutsik\" title=\"Code\">💻</a> <a href=\"#ideas-lutsik\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#financial-lutsik\" title=\"Financial\">💵</a></td>\n    <td align=\"center\"><a href=\"https://github.com/svedziok\"><img src=\"https://avatars0.githubusercontent.com/u/17719296?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sven Twardziok</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=svedziok\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/MariusDieckmann\"><img src=\"https://avatars0.githubusercontent.com/u/13437264?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marius</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=MariusDieckmann\" title=\"Code\">💻</a> <a href=\"#infra-MariusDieckmann\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lukasjelonek\"><img src=\"https://avatars0.githubusercontent.com/u/6919146?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Lukas Jelonek</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=lukasjelonek\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/illusional\"><img src=\"https://avatars1.githubusercontent.com/u/22381693?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michael Franklin</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=illusional\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://git.scicore.unibas.ch/kanitz\"><img src=\"https://avatars3.githubusercontent.com/u/10855418?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alex Kanitz</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=uniqueg\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://fr.linkedin.com/in/yoannpageaud\"><img src=\"https://avatars3.githubusercontent.com/u/12813932?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yoann PAGEAUD</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=YoannPa\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/yxomo\"><img src=\"https://avatars2.githubusercontent.com/u/8003345?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yassen Assenov</b></sub></a><br /><a href=\"#ideas-yxomo\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ifishlin\"><img src=\"https://avatars3.githubusercontent.com/u/9721827?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>YuYu Lin</b></sub></a><br /><a href=\"https://github.com/CompEpigen/workflUX/commits?author=ifishlin\" title=\"Code\">💻</a> <a href=\"#plugin-ifishlin\" title=\"Plugin/utility libraries\">🔌</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/CompEpigen/workflUX",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CompEpigen/workflUX",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "workflux",
    "package_url": "https://pypi.org/project/workflux/",
    "platform": "",
    "project_url": "https://pypi.org/project/workflux/",
    "project_urls": {
      "Download": "https://github.com/CompEpigen/workflUX",
      "Homepage": "https://github.com/CompEpigen/workflUX"
    },
    "release_url": "https://pypi.org/project/workflux/0.5.0/",
    "requires_dist": [
      "werkzeug",
      "flask",
      "flask-wtf",
      "flask-login",
      "flask-sqlalchemy",
      "pyexcel",
      "pyexcel-io",
      "pyexcel-ods",
      "pyexcel-ods3",
      "pyexcel-xls",
      "pyexcel-xlsx (<=0.5.7)",
      "PyYAML (>=5.1)",
      "pexpect",
      "janis-pipelines",
      "cwltool (==3.0.20201203173111)",
      "psutil",
      "miniwdl (>=0.0.5)",
      "requests",
      "path (<13.2.0)",
      "schema-salad (>=7.0.20200811075006)",
      "trs-cli (>=0.3.1)",
      "pydantic",
      "cwlformat (<=2020.5.19)",
      "pytest ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "A platform-agnostic, cloud-ready framework for simplified deployment of the Common Workflow Language using a graphical web interface",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10704324,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8389dab5c73559adb32c2e8888d315034a598af1fa19a39d66a4f34757d4ff5",
          "md5": "055c76a07e8daf5ea4ea0502f0b9147c",
          "sha256": "1955cbfb9f7fc0fc25bfaf4e9372ffa0d06b08529b660515e9a3dcc7bb0990bd"
        },
        "downloads": -1,
        "filename": "workflux-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "055c76a07e8daf5ea4ea0502f0b9147c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 224339,
        "upload_time": "2021-06-21T17:54:18",
        "upload_time_iso_8601": "2021-06-21T17:54:18.005678Z",
        "url": "https://files.pythonhosted.org/packages/c8/38/9dab5c73559adb32c2e8888d315034a598af1fa19a39d66a4f34757d4ff5/workflux-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f4c04b097d575c70067afbb66c65ac9391dda55202434ec19be53559edb4bea",
          "md5": "60bc8fc4c88424d838ef5600e5ec40df",
          "sha256": "0ebf522c1d86446719048f9479641a3c1e3b993a612d8ed96efb82e8c6628a94"
        },
        "downloads": -1,
        "filename": "workflux-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60bc8fc4c88424d838ef5600e5ec40df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 212578,
        "upload_time": "2021-06-21T17:54:22",
        "upload_time_iso_8601": "2021-06-21T17:54:22.094404Z",
        "url": "https://files.pythonhosted.org/packages/8f/4c/04b097d575c70067afbb66c65ac9391dda55202434ec19be53559edb4bea/workflux-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8389dab5c73559adb32c2e8888d315034a598af1fa19a39d66a4f34757d4ff5",
        "md5": "055c76a07e8daf5ea4ea0502f0b9147c",
        "sha256": "1955cbfb9f7fc0fc25bfaf4e9372ffa0d06b08529b660515e9a3dcc7bb0990bd"
      },
      "downloads": -1,
      "filename": "workflux-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "055c76a07e8daf5ea4ea0502f0b9147c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 224339,
      "upload_time": "2021-06-21T17:54:18",
      "upload_time_iso_8601": "2021-06-21T17:54:18.005678Z",
      "url": "https://files.pythonhosted.org/packages/c8/38/9dab5c73559adb32c2e8888d315034a598af1fa19a39d66a4f34757d4ff5/workflux-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f4c04b097d575c70067afbb66c65ac9391dda55202434ec19be53559edb4bea",
        "md5": "60bc8fc4c88424d838ef5600e5ec40df",
        "sha256": "0ebf522c1d86446719048f9479641a3c1e3b993a612d8ed96efb82e8c6628a94"
      },
      "downloads": -1,
      "filename": "workflux-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "60bc8fc4c88424d838ef5600e5ec40df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 212578,
      "upload_time": "2021-06-21T17:54:22",
      "upload_time_iso_8601": "2021-06-21T17:54:22.094404Z",
      "url": "https://files.pythonhosted.org/packages/8f/4c/04b097d575c70067afbb66c65ac9391dda55202434ec19be53559edb4bea/workflux-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}