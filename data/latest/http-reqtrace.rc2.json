{
  "info": {
    "author": "Julb",
    "author_email": "julien@julb.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "![PyPI](https://img.shields.io/pypi/v/http-reqtrace)\n![PyPI - License](https://img.shields.io/pypi/l/http-reqtrace)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/http-reqtrace)\n[![docker-image-version](https://img.shields.io/docker/v/julb/http-reqtrace.svg?sort=semver)](https://hub.docker.com/r/julb/http-reqtrace)\n[![docker-image-size](https://img.shields.io/docker/image-size/julb/http-reqtrace.svg?sort=semver)](https://hub.docker.com/r/julb/http-reqtrace)\n[![docker-pulls](https://img.shields.io/docker/pulls/julb/http-reqtrace.svg)](https://hub.docker.com/r/julb/http-reqtrace)\n\n# http-reqtrace\n\n## Description\n\nThe application starts a Web server which logs details of all incoming HTTP requests such as:\n\n- HTTP Method & URL\n- Query params\n- Headers\n- Body\n\nThe application accepts all HTTP methods and URIs.\nThe routing is defined like this:\n\n- `/status/:statusCode` : return an HTTP response with status code **statusCode** and body `{\"message\":\"OK|KO\"}`\n- `/**/*` : return an HTTP response with status code **200 OK** and body `{\"message\":\"OK\"}`\n- `/metrics` : return Prometheus metrics regarding HTTP requests\n\nFollowing query parameters are also supported:\n\n- `?latencyInMs=60000` : wait for the given period in milliseconds before responding. This time cannot exceed 5 minuts.\n\nThis service can be used to :\n\n- See very quickly what are the requests received and inspect their content.\n- Have a quick way to simulate specific cases with particular HTTP response codes.\n\n## How to use\n\n### Starts the service\n\n- Run container:\n\n```bash\n$ docker run -ti --name http-reqtrace -p 80:8080 -e PORT=8080 -u 65534:65534 julb/http-reqtrace:latest\n```\n\nNote: the `PORT` environment variable can be set to customize listening port.\n\n### Request the service with any method, URI and parameters\n\n```bash\n$ curl http://localhost/context/uri?param1=value1&param2=value2 -H \"Authorization: Bearer jwt\"\n{\"statusCode\": 200,\"message\":\"OK\"}\n```\n\n```bash\nINFO in app: > [GET] HTTP/1.1 http://localhost/context/uri?param1=value1&param2=value2\nINFO in app: >>     Header : Host : localhost\nINFO in app: >>     Header : User-Agent : curl/7.54.0\nINFO in app: >>     Header : Accept : */*\nINFO in app: >>     Header : Authorization : Bearer jwt\nINFO in app: >>     Query  : param1 : value1\nINFO in app: >>     Query  : param2 : value2\nINFO in app: >>     Body   : b''\nINFO in app: < [ HTTP 200 ]\n```\n\n### Getting specific HTTP responses status codes\n\n```bash\n$ curl http://localhost/status/404 -H \"Authorization: Bearer jwt\"\n{\"statusCode\":404,\"message\":\"KO\"}\n\n$ curl http://localhost/status/500 -H \"Authorization: Bearer jwt\"\n{\"statusCode\":500,\"message\":\"KO\"}\n```\n\n```bash\nINFO in app: > [GET] HTTP/1.1 http://localhost/status/404\nINFO in app: >>     Header : Host : localhost\nINFO in app: >>     Header : User-Agent : curl/7.54.0\nINFO in app: >>     Header : Accept : */*\nINFO in app: >>     Header : Authorization : Bearer jwt\nINFO in app: >>     Body   : b''\nINFO in app: < [ HTTP 404 ]\nINFO in app: > [GET] HTTP/1.1 http://localhost/status/500\nINFO in app: >>     Header : Host : localhost\nINFO in app: >>     Header : User-Agent : curl/7.54.0\nINFO in app: >>     Header : Accept : */*\nINFO in app: >>     Header : Authorization : Bearer jwt\nINFO in app: >>     Body   : b''\nINFO in app: < [ HTTP 500 ]\n```\n\n### Simulate latency\n\n```bash\n$ curl http://localhost/status/504?latencyInMs=60000\n{\"statusCode\":504,\"message\":\"KO\"}\n```\n\n```bash\nINFO in app: > [GET] HTTP/1.1 http://localhost/status/504?latencyInMs=60000\nINFO in app: >>     Header : Host : localhost\nINFO in app: >>     Header : User-Agent : curl/7.54.0\nINFO in app: >>     Header : Accept : */*\nINFO in app: >>     Query  : latencyInMs : 60000\nINFO in app: >>     Body   : b''\nINFO in app: << Waiting for timeout exhaust: 60000ms.\nINFO in app: < [ HTTP 504 ]\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/julb/http-reqtrace",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "http-reqtrace",
    "package_url": "https://pypi.org/project/http-reqtrace/",
    "platform": "",
    "project_url": "https://pypi.org/project/http-reqtrace/",
    "project_urls": {
      "Homepage": "https://github.com/julb/http-reqtrace"
    },
    "release_url": "https://pypi.org/project/http-reqtrace/1.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The application starts a Web server which logs details of all incoming HTTP requests.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9498281,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a86b383e1d65f65308281f066c63a2a1499e0cfe02879b9b125a8a1687c288d2",
          "md5": "bd9012a5f21a383ca5d5fa5efb984a71",
          "sha256": "757795578349287d911024eb8eb6609bcf0ea94efa4df407368191d2b8a6f7ea"
        },
        "downloads": -1,
        "filename": "http-reqtrace-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd9012a5f21a383ca5d5fa5efb984a71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3876,
        "upload_time": "2020-11-30T08:29:15",
        "upload_time_iso_8601": "2020-11-30T08:29:15.166164Z",
        "url": "https://files.pythonhosted.org/packages/a8/6b/383e1d65f65308281f066c63a2a1499e0cfe02879b9b125a8a1687c288d2/http-reqtrace-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee0d63cc5b801cca84d97ea42c1fad2548aaaf9abe634659f2ed9a34019e8ec4",
          "md5": "61cf0c4a3ae0cfb80a77e2292f5c6176",
          "sha256": "003a8121073a09d41263a81ba23a2220063bd60e222e510ae3ad7c2fe9918ba7"
        },
        "downloads": -1,
        "filename": "http-reqtrace-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "61cf0c4a3ae0cfb80a77e2292f5c6176",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3856,
        "upload_time": "2021-02-23T10:41:23",
        "upload_time_iso_8601": "2021-02-23T10:41:23.569645Z",
        "url": "https://files.pythonhosted.org/packages/ee/0d/63cc5b801cca84d97ea42c1fad2548aaaf9abe634659f2ed9a34019e8ec4/http-reqtrace-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee0d63cc5b801cca84d97ea42c1fad2548aaaf9abe634659f2ed9a34019e8ec4",
        "md5": "61cf0c4a3ae0cfb80a77e2292f5c6176",
        "sha256": "003a8121073a09d41263a81ba23a2220063bd60e222e510ae3ad7c2fe9918ba7"
      },
      "downloads": -1,
      "filename": "http-reqtrace-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "61cf0c4a3ae0cfb80a77e2292f5c6176",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3856,
      "upload_time": "2021-02-23T10:41:23",
      "upload_time_iso_8601": "2021-02-23T10:41:23.569645Z",
      "url": "https://files.pythonhosted.org/packages/ee/0d/63cc5b801cca84d97ea42c1fad2548aaaf9abe634659f2ed9a34019e8ec4/http-reqtrace-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}