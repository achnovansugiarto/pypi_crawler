{
  "info": {
    "author": "acollange",
    "author_email": "acollange@esrifrance.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# Orionpy\n\nThe OrionPy API allows to manage and administrate Orion without having to use the arcOpole Builder console.\n\n- [Orionpy](#orionpy)\n- [Installation requirements](#installation-requirements)\n  * [Which python modules are required for this project ?](#which-python-modules-are-required-for-this-project-)\n  * [Installation](#installation)\n- [Usage](#usage)\n  * [Jupyter example](#jupyter-example)\n  * [Connection to Orion](#connection-to-orion)\n  * [Get access to the data](#get-access-to-the-data)\n  * [Working with filters](#working-with-filters)\n  * [Groups management](#groups-management)\n  * [Resource handling](#resource-handling)\n  * [Changing rights](#changing-rights)\n  * [Handling Cadastre resource](#handling-cadastre-resource)\n  * [IMC handling](#imc-handling)\n  * [CSV Handling](#csv-handling)\n  * [Handling Stats resource](#handling-stats-resource)\n  * [Handling projects and geonotes](#handling-projects-and-geonotes)\n  * [Working with the ArcGIS API for Python.](#working-with-the-arcgis-api-for-python)\n- [Go further](#go-further)\n\n# Installation requirements\n\nFirst of all, you need to have [Python](https://www.python.org/) installed, with a version >= 3.7.\n\nIt is then required to install [pip](https://pip.pypa.io/en/stable/installing/).  \nFor information, pip is already installed if you are using Python 2 >=2.7.9 or Python 3 >=3.4 downloaded from https://www.python.org/.\nIt is also already installed if you are working in a Virtual Environment created by virtualenv or pyvenv.\n\nJust make sure to upgrade pip.\n\n## Which python modules are required for this project ?\n\nThe packages that will be installed in the following steps are :\n* requests\n* urllib3\n\n## Installation\n\nSince **OrionPy** is available on https://pypi.org/project/orionpy/, it must be installed using :\n```bash\npip install orionpy\n```\n\n# Usage\nThe following section describes the main functions available in the API.\n\n## Jupyter example\nThere is a full and executable example of OrionPy's usage in the file _Demonstration.ipynb_.\n\nThis file can be found in the project's [homepage](https://gitlab.com/esrifrance-public/orionpy/orionpy))\n and opened using [Jupyter](http://jupyter.org/).\n\nFor more information on Jupyter, how to install it and use it, check the following links:\n* http://jupyter.org/\n* https://developers.arcgis.com/python/guide/using-the-jupyter-notebook-environment/\n* https://developers.arcgis.com/python/guide/install-and-set-up/#Test-your-install-with-jupyter-notebook\n\n> Of course, you can also test the API without Jupyter.\nJust note that the examples in this README might not work being \"copy-and-pasted\" in a Python file.\n\nOther examples of code using the API can be found in the _main.py_ file.\n\n## Connection to Orion\nOrion is our main class.\nIt is by using its instance that the user has access to all data and operations available.\n\nThis Orion class generates a token authorizing the user connection to the Orion server. \n\nHere is an example connecting to [https://front.arcopole.fr](https://front.arcopole.fr) :\n```python\nfrom orionpy.orioncore.Orion import Orion\n\nusername = \"\"  # Enter here the login for the arcOpole Builder console.\npassword = \"\"  # If empty, will be asked - securely - later.\nurl_machine = \"https://front.arcopole.fr\"  # External url of the WebAdaptor.\nportal = \"portal\"  # Entry point to the WebAdaptor of the Portal for ArcGIS. (optional. default = \"portal\")\norion = Orion(username, password, url_machine, portal)\n```\n> To create Orion session, the user must be an arcOpole administrator. In case of it is necessary to use some Orion functionnalities with an other user. It is possible to create a light Orion session as follow. In that case, all manage functionnalities are not available : \n ```python\norion = OrionRest(username, password, url_machine, portal)\n```\n\n> In the case where there is a problem with SSL verification, the parameter **verify_cert** can be set as follow :\n```python\norion = Orion(username, password, url_machine, portal, verify_cert=False)\n```\n> It is recommended to leave password as an empty string.\n>   If left empty, a message will be displayed, asking to type down the username's password.\n\n\n## Get access to the data\nOnce the connection is done, it is possible to get access to the data.\n\nTwo methods are used for this.\nOne to get all the elements and another to get one element using its name/id.\nWARNING : {**_elements_**} must be replaced by one of the following : **groups**, **filters**, **services**.\n\n[//]: # (TODO : /!\\ get toujours avec le nom. Nouveau nom de m√©thode pour les services?)\n\n```python\n# Get the list of elements\nelements_list = orion.{elements}.all()\n# print this list\nfor element in elements_list:\n    print(element)\n\n# Get a particular element and print it\nelement = orion.{elements}.get(element_name)\nprint(element)\n```\n\nFor instance, to get (and print) the group \"Groupe 2\" :\n```python\ngroup = orion.groups.get(\"Groupe 2\")\nprint(group)\n```\n\n## Working with filters\nTo apply accurate and specific rights, data filters are essentials.\n\nCurrently, two types of data filters exist : FDU filters and SQL filters.\n\n[//]: # (TODO : Quick description of each filter type)\n\nGet the list of all the filters defined or of a particular filter:\n```python\nfilters = orion.filters.all()\nfilter = orion.filters.get(filter_name)\n```\nCreate a new FDU filter :\n```python\n# Create a FDU filter on one field :\norion.filters.add_FDU_filter(filter_name, fields = [field],\n                             filtering_values = ['val1', 'val2', ...])\n# Create a FDU filter on several fields :\norion.filters.add_FDU_filter(filter_name, fields = [field1, field2],\n                             filtering_values = [['val11', 'val21'],\n                                                 ['val12', 'val22']])\n# Create a User FDU filter on one field :\nproperties = {\n    \"type\" : \"user\" #declare filter as a user filter,\n}\norion.filters.add_FDU_filter(filter_name, fields = [field], properties = properties,\n                             filtering_values = ['val1', 'val2', ...])\n```\nCreate a new SQL filter :\n```python\n# Example creation of a SQL filter\norion.filters.add_SQL_filter(filter_name, where_clause = \"NOMCOMM='NICE'\")\n```\n\nRemoving an existing filter :\n```python\norion.filters.remove_filter(filter_name)\n```\n\n### FDU filter\nIf the filter is of FDU type, some more operations are available such as :\n```python\n# Print all fdu filters :\nfor fdu_f in orion.filters.all_fdu():\n    print(fdu_f)\n# Get fields concerned by the filter\nfields = fdu_filter.get_fields()\n\n# Get all labels corresponding to the defined filtering values\nlabels = fdu_filter.get_labels()\n\n# Know if a given label is defined :\nfdu_filter.is_label_defined(label)\n```\n\n### Update a filter's value\n\nFrom orion.filters, it is possible to update a given filter's values.\n\n#### Update SQL Filter\n\n*where_clause* parameter is a string that contains the filter's condition :\n\n_\"territoire in ('1')\"_\n\n```python\n# Updates the where clause on a SQL filter.\norion.filters.update_sql_filter_value(filter_name, where_clause)\n```\n\n#### Update FDU Filter\n\nTo update FDU filter, need to use an array in *filtering_values* like :\n\n_[\"Filter value 1\",\"Filter value 2\"]_\n\n```python\n# Replace all FDU values by the new input filtering values\norion.filters.replace_fdu_values(filter_name, filtering_values)\n\n# Adds new filtering values to a FDU\norion.filters.add_values_to_fdu(filter_name, filtering_values)\n\n# Removes filtering values from a FDU\norion.filters.remove_values_from_fdu(filter_name, filtering_values)\n```\n\n_**NB** : filtering_values is formatted the same way as in `orion.filters.add_FDU_filter`._\n\n## Groups management\nIn arcOpole Builder, rights are mainly applied on groups. A group is composed of several users.\nGet the list of all groups / a particular group:\n```python\ngroups = orion.groups.all()\ngroup = orion.groups.get(group_name)\ngroup = orion.groups.get_with_id(group_id)\n```\nUpdate/Add a FDU's filtering values for this group :\n```python\nfdu_filter = orion.filters.get(filter_name)\n\nfilter_values = ['val1', 'val2']\ngroup.set_filter_values(fdu_filter, filter_values)\n\n# 2nd solution if want to set all filtering values\ngroup.set_filter_values(fdu_filter, add_all_values=True)\n\n# Other solution if doesn't use labels but field_values :\nfield_values = ['field_val1', 'field_val2', 'field_val3']\nfield = \"\" # Field corresponding to field values\ngroup.set_filter_field_values(fdu_filter, field_values, field)\n```\nUpdate/Add several FDU's filtering values for this group :\n```python\nfilter1_name = \"\" # Filter name\nfilter2_name = \"\" # Filter name\nfilter1 = orion.filters.get(filter1_name)\nfilter2 = orion.filters.get(filter2_name)\n\nfilters_values = {filter1: ['val1', 'val2'], filter2: ['val3', 'val4']}\ngroup.set_several_filter_values(filters_values)\n```\nCheck if a group already have defined filtering values on a given filter:\n```python\nif group.has_defined_filter_values(fdu_filter):\n    print('This group has defined filtering values')\n```\nRedefine all FDU's filtering values for this group :\n```python\ngroup.reset_all_filters_values(filters_values)\n```\n\n### Users management\nIn arcOpole Builder, stats are applied on users. \n\nGet the list of all users / a particular user:\n```python\nusers = orion.users.all()\nuser = orion.users.get(user_name)\nuser = orion.users.get_with_id(user_id)\n```\n\n## Resource handling\nTypes of resource handled in this API :\n* services\n    * layers\n        * fields\n    * tables\n        * fields\n\n### Services\nGet the list of all ArcGIS services :\n```python\nservices = orion.services.all()\n```\n\nTo get 1 particular ArcGIS service, it is required to use its REST relative Url, which is formatted as :\n**FOLDER/SERVICE_SERVICETYPE**.\n\nFor instance :\n```python\nservice = orion.services.get(\"Cannes/EspacesVerts_FeatureServer\")\n\n# Get all services' REST urls\nurls = orion.services.urls()\n```\nGet only the services managed by arcOpole Builder (or 1 service in this list) :\n```python\nservices = orion.services.all_managed()\nservice = orion.services.get_in_managed(service_rest_url)\n```\nEnable or Disable service management:\n```python\nservice.enable()\nservice.disable()\n```\n\nIt is also possible to know if a given service is a cadastre resource.\nIf that is the case, the usual right-handling methods won't be available for this service.\n```python\nif service.is_cadastre_resource():\n    print(\"The service is a cadastre resource\")\n```\n\n### Layers\nGet all layers or 1 layer from a specific service.\n> In a same service, two layers can have the same name.\nTherefore, it is more recommended to use the `get_with_id` method.\n\n```python\nlayers = service.layers.all()\nlayer = service.layers.get_with_id(layer_id)\n\n# Not recommended for layers.\nlayer = service.layers.get(layer_name)\n```\nGet a layer's id :\n```python\nlayer_id = service.layers.get_id(layer_name)\n```\n\n#### Group of layers\nAs a \"subtype\" of layer, it is also possible to find groups of layers.\nIn OrionPy, they are handled in the class `Layer` using several methods.\n\n```python\n# If the layer is a group of layers...\nif layer.is_group():\n    print('Layer is a group of layers')\n\n    if layer.has_sub_layers():\n        # The following methods get a list with IDs of layers in this group\n        sub_layers_ids = layer.get_sub_layers_ids()\n        print('Layers contained in this group have ids : ', sub_layers_ids)\nelse:\n    print('Layer is not a group of layer')\n    if layer.has_parent_layer():  # If the layer is in a group of layers\n        print(\"layer's parent id is :\", layer.get_parent_layer_id())\n```\n\n### Tables\nAccess to tables (all of them or a specific one) :\n```python\ntables = service.tables.all()\ntable = service.tables.get(table_name)\n```\n\n### Fields\nIt is possible to get access to fields using a layer or a table.\n\nGet all / 1 field(s) for a specific layer or a specific table :\n```python\nfields = layer_or_table.fields.all()\nfield = layer_or_table.fields.get(field_name)\n```\nGet a field's name :\n```python\nname = field.get_name()\n```\n\n## Changing rights\n\nOnce you've had your resource (service, layer, table or field), it is possible to apply the following operations :\n\n### Print a right summary :\nPrint a summary of the rights defined on a resource, also the filters applied and if the right is inherited or not.\n```python\nservice.print_rights(group)\n```\n### Inheritance handling\nEnable/disable right inheritance for a resource and a particular group :\n```python\nservice.enable_inheritance(group)\nservice.disable_inheritance(group)\n\nif service.has_inherited_right(group):\n    print('Resource right is inherited for this group')\n```\n\n### Clear all rights\n\nFrom aOB 1.3.4, it is possible to clear all rights on a given resources and its sub-resources.\nBasically, it does the same as manually enabling inheritance for all profiles on a resource and its sub-resources.\n\n```python\nservice.clear_all_rights()\n```\n\n### Handling right level\nUpdate right-level for a group on a resource :\n```python\nfrom orionpy.orioncore.resources.Resource import RightLevel\n\nright_level = RightLevel.[ACCESS|READ|WRITE]  # Pick one of the three rights you want to apply\n\nservice.update_right(group, right_level)\n```\nNote that it is not possible to update right if (between else), the right is inherited or the service is not enabled.\n\nIf you know what you are doing, you can also use the `force_rights` command.\nThis method will automatically disable inheritance and enable service management before updating rights.\n```python\nservice.force_right(group, right_level)\n```\n\n### Apply a filter\nThe arcOpole Builder console handles the application of a FDU filter on three types of resources :\n* Service,\n* Table,\n* Layer.\n\nAs an example, here is how to (de)activate a FDU filter on a service for a group\n```python\n# Get the data required\nfdu_filter = orion.filters.get(filter_name)\ngroup = orion.groups.get(group_name)\nservice = orion.services.get(service_name)\n\n# Activate and/or deactivate a fdu\nservice.activate_fdu_filter(group, fdu_filter)\nservice.deactivate_fdu_filter(group, fdu_filter)\n```\n\nIt is also possible to (de)activate a SQL filter on layer or table :\n```python\n# Get the data required\nsql_filter = orion.filters.get(filter_name)\ngroup = orion.groups.get(group_name)\nservice = orion.services.get(service_name)\nlayer = service.layers.get(layer_name)\n\n# Activate and/or deactivate a sql filter\nlayer.activate_sql_filter(group, sql_filter)\nlayer.deactivate_sql_filter(group, sql_filter)\n```\n\n## Handling Cadastre resource\n\nYou can get the cadastre resource with\n```python\n# Get the data required\ncadastre_resource = orion.businesses.get_cadastre_resource()\n```\n\n### Get the filter associated with a Cadastre resource\nAfter the cadastre resource is recovered, you can access to the associated filter's id using the `associated_filter_id` property.\n\nIf you want to update this filter's filtering value, you must get the corresponding filter.\nIt is necessary for others methods such as `update_right` (if update to **NOMINATIF_ACCESS**), `activate_filter` and `deactivate_filter`.\n\nTo access this filter directly from the Cadastre resource, you must first set it.\nIt will then be possible to access it using the `associated_filter` property.\n```python\n# Get the filter associated with the resource's :\nfilter = orion.filters.get_with_id(cadastre_resource.associated_filter_id)\n\ncadastre_resource.init_filter_access(filter)\n\n#... It is now possible to call methods directly on :\ncadastre_resource.associated_filter\n```\n\n### Using filter with Cadastre resource\n\nAny FDU filter method can be used with `associated_filter`.\nMoreover, you can call specific method with the Cadastre resource.\n\n_Reminder : you **must** call the `init_filter_access` method before calling these_\n\nAlso note that `deactivate_filter` will not work if the group has a NOMINATIF_ACCESS\n\n```python\n\ncadastre_resource.activate_filter(group)\ncadastre_resource.deactivate_filter(group)\n```\n\n### Managing Cadastre resource\n\nOn the cadastre resource, three rights are available and can be updated using `update_right` method.\nThe right levels available are :\n* `RightLevel.NO_ACCESS`\n* `RightLevel.PUBLIC_ACCESS`\n* `RightLevel.NOMINATIF_ACCESS`\n\n_Note : When switching to `RightLevel.NOMINATIF_ACCESS` for a group, the filter must be activated for this group.\nIf `init_filter_access` was called before, `update_right` will automatically apply the filter_\n\n```python\n# (... get a group to update right for ...)\n\n# update the rights\ncadastre_resource.update_right(group, RightLevel.***) # replace *** by one of the 3 rights applicable\n\n# print the rights defined for the group on the cadastre_resource\ncadastre_resource.print_rights(group)\n```\n\n## IMC handling\nOrionPy allows to get IMC definition and execute it. All capabilities are available in `imcs` module. The IMC is an object with an **id**, a **description** and a **definition**\n\n```python\n# List all IMCs\nimcs = orion.imcs.all()\nfor imc in imcs:\n    print(imc)\n\n# Get IMC by name\nimc = orion.imcs.get(name)\n\n# Get IMC definition\nimc_definition = imc.definition\n```\nTo execute an IMC with Orion, you must supply 2 parameters.\n* The first parameter is the IMC definition. The definition can come from the object as define above or it is possible to store definition in json file\n* The second parameter is the input geometry. This data can be generated with the REST services of ArcGIS Server and the query operation on layer. It is necessary the query JSON response. \n\nAfter that, it is possible to execute IMC as follow:\n```python\n# Get input parameters\ndefinition = orion.imcs.get(\"Info cadastrales\").definition\n\nwith open('query_result.json') as json_file:\n    input_set = json.load(json_file)\n\n# Execute IMC\nresult = orion.imcs.execute(definition, input_geometry)\nprint(result)\n```\n\n## CSV Handling\nIt is also possible to generate a CSV containing a summary on the current system rights.\n\nSeveral CSV classes exists. Each of them with two methods.\nThe `generate` method generating a CSV with information.\nAnd the `read_and_apply` method reading a CSV file generated and applying modification to the server.\n\n### Handling filtering values with a CSV\nThis is done creating a `CSVFilteringValues` class.\n\n```python\nfrom orionpy.orioncsv.csvfilteringvalues import CSVFilteringValues\n\n# Creates the class to create/handle a csv for filtering values.\ncsv_handler = CSVFilteringValues(orion)\n\ncsv_path = \"my_csv.csv\"  # Enter here a csv filename\ncsv_handler.generate(csv_path)\n\n### Now you can open the csv file analyze its content and modify it...\n\n# To apply modifications written in CSV file :\ncsv_handler.read_and_apply(csv_path)\n```\n\nSample of the CSV generated :\n\n| Filter | Label | Group1 | Group2 | ... |\n| --- | --- | :---: | :---: | --- |\n| filter1 | label1 | 1 | 0 | ... |\n| filter1 | label2 | 0 | 0 | ... |\n| filter2 | label1 | 1 | 1 | ... |\n| ... | ... | ... | ... | ... |\n\n* 0 means that the filtering value is not activated for this group,\n* 1 means that it is.\n\n### Handling rights on a resource with a CSV\nThis is done creating a `CSVRightsManagement` class.\n\nIt will create a summary of rights on a Service and all of its component (layers, fields, tables).\n\n```python\nfrom orionpy.orioncsv.csvrightsmanagement import CSVRightsManagement\n\n# Creates the class to create/handle a csv for filtering values.\ncsv_handler = CSVRightsManagement(orion)\n\ncsv_path = \"\"  # TODO : Enter here a csv filename\nservice_url = \"\"  # TODO : Enter here a valid service's rest url\nservice = orion.services.get(service_url)\ngroup_name = \"\" # TODO enter here a group name\ngroup_list = [orion.groups.get(group_name)]\n\n# NB : The following line might not work directly, please refer\ncsv_handler.generate(csv_path, service, group_list = group_list)\n\n### Now you can open the csv file analyze its content and modify it...\n\n# To apply modifications written in CSV file :\ncsv_handler.read_and_apply(csv_path)\n```\n\nIf the `group_list` argument isn't set, the `generate` method will get the groups shared with the Service given to generate a summary of rights for all these groups.\n> In order to use this functionnality of getting the groups shared, your orion instance must be of OrionGIS type. (refer to section \"Working with the ArcGIS API for Python\")\n\n```python\ncsv_handler.generate(csv_path, service)\n```\n\nSample of the CSV generated :\n\n| Type | Relative url | Label | Group1 | Group2 | ... |\n| --- | --- | --- | --- | --- | --- |\n| SERVICE | Serv1_MapServer | Serv1_MapServer | read | access | ... |\n| LAYER | Serv1_MapServer/0 | layer1 | inherited (read) | write | ... |\n| FIELD | Serv1_MapServer/0/field1 | field1 | access | inherited (write) | ... |\n| FIELD | Serv1_MapServer/0/field2| field2 | inherited (read) | access | ... |\n| SERVICE | Serv2_FeatureServer | Serv2_FeatureServer | inherited (read)| write | ... |\n| ... | ... | ... | ... | ... | ... |\n\n### Importing rights from a JSON file\n\nThis can be made using the `CSVFilteringCadastre` class.\n\nFirst, the class must be initialized with a connection to Orion :\n\n```python\nfrom src.orioncsv.csvfilteringcadastre import CSVFilteringCadastre\n\ncsv_filtering_cadastre = CSVFilteringCadastre(orion)\n```\n\nThen, a CSV file must be generated from the json file, containing data :\n\n```python\ncsv_path = \"\"  # TODO : Enter here the csv path\njson_path = \"\" # TODO : Enter here the json file's path\ncsv_filtering_cadastre.generate(csv_path, json_path)\n```\n\nOnce the CSV is generated by analyzing the json, the rights can be imported :\n\n```python\ncsv_filtering_cadastre.read_and_apply(csv_path)\n```\n\n\n## Handling Stats resource\n\nStats resource allows to group users in specific organisationnal units. Organizational units represent the administrative division of your organization. One user can only associate with one organisationnal unit. \n\nYou can get the stats resource with\n```python\n# Get the data required\nstats_resource = orion.businesses.get_stats_resource(\"hosted\")\n```\n\n`storage_id` is an optional parameter to found a specific storage in stats resource. Actually `hosted` is the only available type of storage. \nThis method return the specific `StorageResource` object. If not found `get_stats_resource` return None.\n\nStats resource works with the units organisationnal.  with a specific FDU in arcOpole Builder. After creation, apply one value of this FDU on user\n\n### FDU for stats\n\nIn arcOpole Builder, organisationnal units are modelized by the FDU. So you need to create new FDU with all division of your organisation. \n\nIt is possible to use FDU with OrionPy or in aob-admin application.\n\nFor more information on FDU in OrionPy, please refere on FDU creation describe above.\n\n```python\n# Create FDU\norion.filters.add_FDU_filter(filter_stats_name, fields = fields,\n                             filtering_values = values)\n```\n\n> Example for filtering_values : ['Secteur1', 'Secteur2', ...]\n\n### (Dis)associate FDU with storage resource\n\nTo associate FDU with storage resource use `update_filter` method.\n\nTo disassociate it, use `disassociate_filter` method.\n\n```python\n# Associate filter to storage resource\nstorage_resource.update_filter(fdu_filter.get_id())\n\n# Disassociate the filter from the storage resource\nstorage_resource.disassociate_filter()\n```\n\n### Add filter value to user\n\nAfter create specific stats FDU, associate FDU to storage resource, the last step is to add filter value for users. In stats module, one user only can associate one filter value.\n\n```python\n# Add filter value to a specific user\nfilter_values = ['Secteur1']\nuser.set_filter_values(fdu_filter, filter_values)\n```\n\n### Handling organisationnal units with a CSV\nThis is done creating a `CSVOrganisationUnit` class.\n\nIt will create a summary of users and there associated organisationnal units.\n\n```python\nfrom orionpy.orioncsv.csvorganisationunit import CSVOrganisationUnit\n\n# Creates the class to create/handle a csv for filtering values.\ncsv_handler = CSVOrganisationUnit(orion)\n\ncsv_path = \"\"  # TODO : Enter here a csv filename\n\n# To generate a csv file that will list the users and their associated organizational unit \ncsv_handler.generate(csv_path)\n\n### Now you can open the csv file analyze its content and modify it...\n\n# To apply modifications written in CSV file :\ncsv_handler.read_and_apply(csv_path)\n```\n\nSample for CSV \n\n| UserName | Organization\n| --- | ---\n| admin_aob | Secteur1\n| user1 | Secteur2\n| editor1 | Secteur3\n| ... | ...\n||\n\n> Before using this functionality, please ensure that a filter is associated with the storage resource (refer to section \"Associate FDU with storage resource\")\n\n## Handling projects and geonotes\n\nYou can access projects or geonotes and use methods on these items :\n\n```python\norion.{items}.{method(...)}\n\n# for projects\norion.projects.{method(...)}\n\n# for geonotes\norion.geonotes.{method(...)}\n\n```\n\nHere are the methods you can use to:\n\n* search for items\n\n```python\n# get the result of the method search (as a list of items) and print it\n\nsearch = orion.{items}.search(q=\"\", start=-1, num=100, all=False)\n# values in search are the default values\n# q is the query\n# start correspond to the number of the first result\n# num correspond to the number of results\n# define all as True to search both in Orion and Portal or False to search only in Portal\n\nprint(search)\n```\n\n> For *q* parameter in case of geonotes\n```python\n# Search geonote for editor_aob\nq=\"owner:editor_aob AND type:Feature Collection AND tags:aob_geonote\"\n\n# Search geonote for all users\nq=\"type:Feature Collection AND tags:aob_geonote\"\n\n# Search project for editor_aob\nq=\"owner:editor_aob AND type:Document Link AND tags:aob_project\"\n\n# Search project for all users\nq=\"type:Document Link AND tags:aob_project\"\n```\n\n* get the DATA of an item from an item id, also called 'itemId'\n\n```python\n# get the result of the method data (json) and print it\n\ndata = orion.{items}.data('itemId')\n\n#you can get the data and export it in a new or existing json file using this method:\ndata = orion.{items}.data_export('itemId', 'path_of_the_exported_file.json')\n#the path of the file must contain '.json' at the end\n\n#you can also use the id of the first item returned in the previous method :\ndata = orion.{items}.data(search[0].get_id())\nprint(data)\n```\n\n* add an item in aOB\n\n```python\n# return the result of the query, here in add_item\n\nadd_item = orion.{items}.add_item(\"owner\", \"title\", text, snippet=None)\n# owner is the user that create the item\n# title is the title of the item you want to add\n# text is the json data to add\n# text can be for example 'text = orion.{items}.data('itemId')'\n# snippet is the description, set by default on None.\n\n#you can also import data from an existing json file\nadd_item = orion.{items}.add_item_from_file(\"owner\", \"title\", 'path_of_json_file.json', snippet=None)\n\n#you can print the return of the method, which is the result of the query send to the server\nprint(add_item)\n```\n\n* update an item in aOB\n\n```python\n# return the result of the query, here in add_item\n\nupdate_item = orion.{items}.update_item(\"itemId\", \"title\", text, snippet=None)\n# itemId is the id of the item to update\n# title is the new title of the item you want to update\n# text is the json data to update\n# text can be for example 'text = orion.{items}.data('itemId')'\n# snippet is the description, set by default on None.\n\n#you can also update an item with an existing json file\nupdate_item = orion.{items}.update_item_from_file(\"itemId\", \"title\", \"path_of_json_file.json\", snippet=None)\n\n#you can print the return of the method, which is the result of the query send to the server\nprint(update_item)\n```\n\n* reassign the owner of an item\n\n```python\n# return the result of the query, here in add_item\n\nreassign_item = orion.{items}.reassign(\"itemId\", \"targetUsername\")\n# itemId is the id of the item to reassign\n# targetUsername is the new username\n\n#you can print the return of the method, which is the result of the query send to the server\nprint(reassign_item)\n```\n\n* delete an item\n\n```python\n# return the result of the query, here in add_item\n\ndelete = orion.{items}.delete(\"itemId\")\n# itemId is the id of the item to reassign\n\n#you can print the return of the method, which is the result of the query send to the server\nprint(delete)\n```\n\n\n## Working with the ArcGIS API for Python.\nIn some cases, OrionPy can work with the ArcGIS API for Python.\nIt is first required to install the API following its [documentation](https://developers.arcgis.com/python/).\n\nThen, you can access its methods creating the class :\n```python\nfrom orionpy.oriongis.oriongis import OrionGIS\n\n# NB : parameter are the same as the Orion class\norion_gis = OrionGIS(username, password, url_machine, portal)\n```\n\n### Access a Esri API method\n```python\norion_gis.gis.[....]\n```\n\n### Handling sharing on a service.\nAdding the Esri's API into OrionPy allowed to add the posibility of handling a service sharing.\n\ndoesn't only allow to call methods from the API.\nIt gives the opportunity to create methods mixing calls to OrionPy and to the Esri API.\n\n```python\nservice_url = \"\"\nservice = orion_gis.services.get(service_url)\ngroup_name = \"\"\ngroup = orion_gis.groups.get(group_name)\n\n# Share a service with a group\norion_gis.services_gis_mgr.share(service, group.get_id())\n\n# Unshare a service with a group\norion_gis.services_gis_mgr.unshare(service, group.get_id())\n\n# Check if a service is share with a group :\nif orion_gis.service_gis_mgr.is_shared_with(service, group.get_id()):\n    print('Service shared with group')\nelse:\n    print('Service not shared with group')\n\n# Get ID's of the groups with which a given service is shared\norion_gis.services_gis_mgr.get_groups_id_shared(service)\n```\n\n\n# Go further\n\nAccess to the full code documentation of the API is possible by opening\nthe file *index.html* on your web browser in the folder :\n**docs/build/html**.\n\n> This folder can be found in the project's [homepage](https://gitlab.com/esrifrance-public/orionpy/orionpy)).\n\nGitlab deposit is at https://gitlab.com/esrifrance-public/orionpy/orionpy\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/esrifrance-public/orionpy/orionpy",
    "keywords": "orionpy orion arcopole builder",
    "license": "Proprietary",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orionpy",
    "package_url": "https://pypi.org/project/orionpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/orionpy/",
    "project_urls": {
      "Homepage": "https://gitlab.com/esrifrance-public/orionpy/orionpy"
    },
    "release_url": "https://pypi.org/project/orionpy/21.10.19/",
    "requires_dist": [
      "requests",
      "urllib3"
    ],
    "requires_python": ">=3.7",
    "summary": "Python API to administrate arcOpole Builder",
    "version": "21.10.19",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11769573,
  "releases": {
    "21.1.11rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ff36b17eca0ad7322ebd3ce82b7faeae7661d4f3a415106a444026c59742768",
          "md5": "ae7e2732c7296ead61c0b38ebc16dcc5",
          "sha256": "d2cb0c6ec55cc2db3f3e8e0d3fae8d30c16cee9beb739d95ddad6837a15aeae8"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.11rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae7e2732c7296ead61c0b38ebc16dcc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69457,
        "upload_time": "2021-01-11T15:15:54",
        "upload_time_iso_8601": "2021-01-11T15:15:54.959262Z",
        "url": "https://files.pythonhosted.org/packages/7f/f3/6b17eca0ad7322ebd3ce82b7faeae7661d4f3a415106a444026c59742768/orionpy-21.1.11rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca46ab83263aef9d0dc74ea2e2794fe95473b6533ee0c69e12394f5e27ccbbfb",
          "md5": "2011c632d01c0733c6883c52b1ef5861",
          "sha256": "69b998c9dee170578a139feb0aad398cfa134fd3dee1b98985d2c53b1ff58784"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.11rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "2011c632d01c0733c6883c52b1ef5861",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 61122,
        "upload_time": "2021-01-11T15:15:56",
        "upload_time_iso_8601": "2021-01-11T15:15:56.707164Z",
        "url": "https://files.pythonhosted.org/packages/ca/46/ab83263aef9d0dc74ea2e2794fe95473b6533ee0c69e12394f5e27ccbbfb/orionpy-21.1.11rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "269ec68f15088dbce4faa16a1d766ed607dd94a26c3eaa0206be346ed3f48e80",
          "md5": "7fca866da31390dd7323b1d69bec4582",
          "sha256": "633a59d5fbdaa42ae641a8e58e667ce617eb456bcc377d89666a656242d138fd"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7fca866da31390dd7323b1d69bec4582",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69861,
        "upload_time": "2021-01-13T15:40:51",
        "upload_time_iso_8601": "2021-01-13T15:40:51.566570Z",
        "url": "https://files.pythonhosted.org/packages/26/9e/c68f15088dbce4faa16a1d766ed607dd94a26c3eaa0206be346ed3f48e80/orionpy-21.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5e2e124111479c2782be878ed418a32f90426a04aa13fe5248bb165832f6cd5",
          "md5": "41d0ef675ebf863bc8c77c2a953ffadb",
          "sha256": "cbb9ff186d94a8e0ca5c99a47ba1ee4e9a39f70590cca60e0257a7de9af8be8b"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "41d0ef675ebf863bc8c77c2a953ffadb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64004,
        "upload_time": "2021-01-13T15:40:53",
        "upload_time_iso_8601": "2021-01-13T15:40:53.234962Z",
        "url": "https://files.pythonhosted.org/packages/a5/e2/e124111479c2782be878ed418a32f90426a04aa13fe5248bb165832f6cd5/orionpy-21.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.1.8rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b66b975e0fa8efc6aba75d1f45e965a40d07164d2412c915ba348e056c23e5dc",
          "md5": "6825473b738a6038ccf8891654e18c2b",
          "sha256": "ecb6a60da49d2e68c8a4c99d683e57a6c5f91a6a9b23beb9dc4c163d70913cec"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.8rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6825473b738a6038ccf8891654e18c2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 69442,
        "upload_time": "2021-01-11T14:34:02",
        "upload_time_iso_8601": "2021-01-11T14:34:02.851712Z",
        "url": "https://files.pythonhosted.org/packages/b6/6b/975e0fa8efc6aba75d1f45e965a40d07164d2412c915ba348e056c23e5dc/orionpy-21.1.8rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddc745e64388b9e61b038fb4c5ceed52251efba82404982ccd43296d0220da0a",
          "md5": "79bf78087935fc7b5ea5120ec58cc22f",
          "sha256": "ec438c2868174a6657d4bed3b459f73a2ad19e5290c8beb85d7c79d138c056af"
        },
        "downloads": -1,
        "filename": "orionpy-21.1.8rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "79bf78087935fc7b5ea5120ec58cc22f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 61314,
        "upload_time": "2021-01-11T14:34:05",
        "upload_time_iso_8601": "2021-01-11T14:34:05.006359Z",
        "url": "https://files.pythonhosted.org/packages/dd/c7/45e64388b9e61b038fb4c5ceed52251efba82404982ccd43296d0220da0a/orionpy-21.1.8rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.10.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f86b035df9aff576fe94434b8570da0fd693eb748ab72be21c2cea024b7a3ca3",
          "md5": "f57c26f2ab77e4496b0e30bac7e2f16c",
          "sha256": "67119212d0b85cd77852c988daed2334b30ce2951f1e363321653b3c09eb46ce"
        },
        "downloads": -1,
        "filename": "orionpy-21.10.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f57c26f2ab77e4496b0e30bac7e2f16c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 80139,
        "upload_time": "2021-10-19T13:40:02",
        "upload_time_iso_8601": "2021-10-19T13:40:02.954216Z",
        "url": "https://files.pythonhosted.org/packages/f8/6b/035df9aff576fe94434b8570da0fd693eb748ab72be21c2cea024b7a3ca3/orionpy-21.10.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6a931d2a5a8bb71f6d894693e09a1f50dcfa97eb3ce3fa432508197bd8c71e9",
          "md5": "d0481909682280742aaad7a7da2a74f6",
          "sha256": "132fb981c2822cb0dde77d62f272163d67827bb91589700d7191f86f29bee4f6"
        },
        "downloads": -1,
        "filename": "orionpy-21.10.19.tar.gz",
        "has_sig": false,
        "md5_digest": "d0481909682280742aaad7a7da2a74f6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 72351,
        "upload_time": "2021-10-19T13:40:05",
        "upload_time_iso_8601": "2021-10-19T13:40:05.812884Z",
        "url": "https://files.pythonhosted.org/packages/f6/a9/31d2a5a8bb71f6d894693e09a1f50dcfa97eb3ce3fa432508197bd8c71e9/orionpy-21.10.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.10.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc449b7db52506ff7ea304b53c0db3d698cefe50af02ae02172d0c25d54bbbf3",
          "md5": "f4567e44b856607710fe92437cbf7900",
          "sha256": "4d1b859eed50542e3d492ec9c1e961a61f762b0dcc0e70dc6997e36ead161fc0"
        },
        "downloads": -1,
        "filename": "orionpy-21.10.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4567e44b856607710fe92437cbf7900",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 79500,
        "upload_time": "2021-10-06T16:30:15",
        "upload_time_iso_8601": "2021-10-06T16:30:15.316923Z",
        "url": "https://files.pythonhosted.org/packages/cc/44/9b7db52506ff7ea304b53c0db3d698cefe50af02ae02172d0c25d54bbbf3/orionpy-21.10.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a6f0c37176f9c045402cf46e533b645343f8d4c599c6072504c326ce2faa71",
          "md5": "82c1a70c6e741677027ba0e2dde84d06",
          "sha256": "c14bb887788d0a48c6d65afe3046f618a6a565a16dceed6d43ce7b7893dcf8fa"
        },
        "downloads": -1,
        "filename": "orionpy-21.10.6.tar.gz",
        "has_sig": false,
        "md5_digest": "82c1a70c6e741677027ba0e2dde84d06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 71630,
        "upload_time": "2021-10-06T16:30:18",
        "upload_time_iso_8601": "2021-10-06T16:30:18.676892Z",
        "url": "https://files.pythonhosted.org/packages/a5/a6/f0c37176f9c045402cf46e533b645343f8d4c599c6072504c326ce2faa71/orionpy-21.10.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae58af48663ceb26b124cdf054ae5d755350f5615104885ea854fc797bb7319a",
          "md5": "54103d70db0629db0b4e5d1c1d7072c1",
          "sha256": "4dbc4a413e8824b8eb4815bb927e6aaeb4c23422ccd5c86387f785d96f2642b3"
        },
        "downloads": -1,
        "filename": "orionpy-21.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54103d70db0629db0b4e5d1c1d7072c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70391,
        "upload_time": "2021-02-08T15:00:02",
        "upload_time_iso_8601": "2021-02-08T15:00:02.853845Z",
        "url": "https://files.pythonhosted.org/packages/ae/58/af48663ceb26b124cdf054ae5d755350f5615104885ea854fc797bb7319a/orionpy-21.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ae430fe3555652a66bf09de2f00079c52d3c52881a7d24eac1bcf5cae98716e",
          "md5": "2b3eb22f2e2f548282f53565c96860a9",
          "sha256": "dab28f0d418fd64143c7831a3d12a0550c3074129fac258c11e3ec499a18c4ef"
        },
        "downloads": -1,
        "filename": "orionpy-21.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2b3eb22f2e2f548282f53565c96860a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 60707,
        "upload_time": "2021-02-08T15:00:04",
        "upload_time_iso_8601": "2021-02-08T15:00:04.769621Z",
        "url": "https://files.pythonhosted.org/packages/4a/e4/30fe3555652a66bf09de2f00079c52d3c52881a7d24eac1bcf5cae98716e/orionpy-21.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.2.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "551f91d1817d3c6d21b7491b8b47c42dc5b7fa8051f555a791acc337f35c679b",
          "md5": "fc2ca9dd3cc727de0dc5570034cb20fb",
          "sha256": "b90c99d6f7130f227c15c38d93bfeda183aba20a62928e111e66162b26770488"
        },
        "downloads": -1,
        "filename": "orionpy-21.2.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc2ca9dd3cc727de0dc5570034cb20fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70410,
        "upload_time": "2021-02-09T08:04:58",
        "upload_time_iso_8601": "2021-02-09T08:04:58.348229Z",
        "url": "https://files.pythonhosted.org/packages/55/1f/91d1817d3c6d21b7491b8b47c42dc5b7fa8051f555a791acc337f35c679b/orionpy-21.2.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f53fc6c6e1e7ed57dd29a906b1dc4182d7ffc29ef16b76d232bf53f87aab22d",
          "md5": "f672acfcba84434136ba4ec247090d82",
          "sha256": "f191521c7fbb750e9d0d3488bc97fecf5f7145053a8ca0df3eae8056788b02ba"
        },
        "downloads": -1,
        "filename": "orionpy-21.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f672acfcba84434136ba4ec247090d82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 60725,
        "upload_time": "2021-02-09T08:05:00",
        "upload_time_iso_8601": "2021-02-09T08:05:00.164267Z",
        "url": "https://files.pythonhosted.org/packages/4f/53/fc6c6e1e7ed57dd29a906b1dc4182d7ffc29ef16b76d232bf53f87aab22d/orionpy-21.2.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.3.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91aec9ce879caf0eacb232abb2d9ca6e3703c5fb4f2a696bddb6dc8b3f7f03b0",
          "md5": "5ac41258e9df1d97069c4456dac9c35d",
          "sha256": "067de7b705b8e67e96153755c46b5cc36a9d08581c1f0230e2544eeaa8b9d30c"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ac41258e9df1d97069c4456dac9c35d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72277,
        "upload_time": "2021-03-15T15:40:49",
        "upload_time_iso_8601": "2021-03-15T15:40:49.287741Z",
        "url": "https://files.pythonhosted.org/packages/91/ae/c9ce879caf0eacb232abb2d9ca6e3703c5fb4f2a696bddb6dc8b3f7f03b0/orionpy-21.3.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "452df15881c3eade3a9be37f71d72ec4263969c685113c94d6c519d06f6c2365",
          "md5": "fe45c7ddb79268e1e30ca80b7e046e9a",
          "sha256": "1bbb246b709ade7249cbc2ba17572e52272f65ea9b1468191e525e585d64f239"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.15.tar.gz",
        "has_sig": false,
        "md5_digest": "fe45c7ddb79268e1e30ca80b7e046e9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64412,
        "upload_time": "2021-03-15T15:40:51",
        "upload_time_iso_8601": "2021-03-15T15:40:51.220769Z",
        "url": "https://files.pythonhosted.org/packages/45/2d/f15881c3eade3a9be37f71d72ec4263969c685113c94d6c519d06f6c2365/orionpy-21.3.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.3.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da7edb24afc688d3fdb43927163a71eaf381417f5a12317e53b0a8b748787033",
          "md5": "adad4c6a22bd1a3a2d849c0645fbe527",
          "sha256": "6354230647829da6812e111c092fd3ef55bb199b1feb1769cf68eda69be48a46"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adad4c6a22bd1a3a2d849c0645fbe527",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72308,
        "upload_time": "2021-03-18T09:44:08",
        "upload_time_iso_8601": "2021-03-18T09:44:08.643555Z",
        "url": "https://files.pythonhosted.org/packages/da/7e/db24afc688d3fdb43927163a71eaf381417f5a12317e53b0a8b748787033/orionpy-21.3.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e010e72b926b0a34876dae60bca932f332bcc223864fffbf0580ecb37a60fdf",
          "md5": "4b79c78c5f546b19763cfabd4d0e62c9",
          "sha256": "0ef0049f389ef6e4b23ea7c9c498fdf622613621b89f0ea46aec0bcfc8be613d"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.18.tar.gz",
        "has_sig": false,
        "md5_digest": "4b79c78c5f546b19763cfabd4d0e62c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64457,
        "upload_time": "2021-03-18T09:44:10",
        "upload_time_iso_8601": "2021-03-18T09:44:10.606367Z",
        "url": "https://files.pythonhosted.org/packages/8e/01/0e72b926b0a34876dae60bca932f332bcc223864fffbf0580ecb37a60fdf/orionpy-21.3.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "21.3.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9cc5e600ea5d7acca4713bd0fffc8d8f629ef1ce968b98e04fe596d1d9919c5",
          "md5": "a98f607a17debbc81cc50551484bbc5a",
          "sha256": "32aecb03c74987c8e63be122d5461210135b843d0c40d21f494217479198d2c8"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a98f607a17debbc81cc50551484bbc5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72370,
        "upload_time": "2021-03-26T14:44:49",
        "upload_time_iso_8601": "2021-03-26T14:44:49.117963Z",
        "url": "https://files.pythonhosted.org/packages/e9/cc/5e600ea5d7acca4713bd0fffc8d8f629ef1ce968b98e04fe596d1d9919c5/orionpy-21.3.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd562d78046b1a0752f70ac7ea59393c70def1082ee4897003da6c4449e104c7",
          "md5": "a648780b8165c926f0352150dcec6d3e",
          "sha256": "0273c32fd6765e5463bfa390131e6d16e7d585ab3f7a139f141221c3f71b49d7"
        },
        "downloads": -1,
        "filename": "orionpy-21.3.26.tar.gz",
        "has_sig": false,
        "md5_digest": "a648780b8165c926f0352150dcec6d3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 64448,
        "upload_time": "2021-03-26T14:44:51",
        "upload_time_iso_8601": "2021-03-26T14:44:51.144105Z",
        "url": "https://files.pythonhosted.org/packages/cd/56/2d78046b1a0752f70ac7ea59393c70def1082ee4897003da6c4449e104c7/orionpy-21.3.26.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f86b035df9aff576fe94434b8570da0fd693eb748ab72be21c2cea024b7a3ca3",
        "md5": "f57c26f2ab77e4496b0e30bac7e2f16c",
        "sha256": "67119212d0b85cd77852c988daed2334b30ce2951f1e363321653b3c09eb46ce"
      },
      "downloads": -1,
      "filename": "orionpy-21.10.19-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f57c26f2ab77e4496b0e30bac7e2f16c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 80139,
      "upload_time": "2021-10-19T13:40:02",
      "upload_time_iso_8601": "2021-10-19T13:40:02.954216Z",
      "url": "https://files.pythonhosted.org/packages/f8/6b/035df9aff576fe94434b8570da0fd693eb748ab72be21c2cea024b7a3ca3/orionpy-21.10.19-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6a931d2a5a8bb71f6d894693e09a1f50dcfa97eb3ce3fa432508197bd8c71e9",
        "md5": "d0481909682280742aaad7a7da2a74f6",
        "sha256": "132fb981c2822cb0dde77d62f272163d67827bb91589700d7191f86f29bee4f6"
      },
      "downloads": -1,
      "filename": "orionpy-21.10.19.tar.gz",
      "has_sig": false,
      "md5_digest": "d0481909682280742aaad7a7da2a74f6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 72351,
      "upload_time": "2021-10-19T13:40:05",
      "upload_time_iso_8601": "2021-10-19T13:40:05.812884Z",
      "url": "https://files.pythonhosted.org/packages/f6/a9/31d2a5a8bb71f6d894693e09a1f50dcfa97eb3ce3fa432508197bd8c71e9/orionpy-21.10.19.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}