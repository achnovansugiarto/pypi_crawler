{
  "info": {
    "author": "KU Leuven",
    "author_email": "alecorrojo@gmail.com, cedric.lood@kuleuven.be",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Table of Contents\n\n1.  [SASpector: a tool for analysis of missing regions in (bacterial) draft genomes\"](#orgc954b8f)\n2.  [Introduction](#orgfc8146a)\n3.  [System Requirements](#org1d89a66)\n    1.  [General dependencies](#org36ea480)\n    2.  [Third-party tools (available on bioconda)](#org88d3159)\n    3.  [Installation](#org51dbcec)\n    4.  [Command line options](#org9550907)\n    5.  [Usage](#orgab8c9a6)\n    6.  [Output](#orgfb6aafb)\n4.  [Contact](#org86ccb18)\n5.  [References](#org7083ee4)\n\n\n<a id=\"orgc954b8f\"></a>\n\n# SASpector: a tool for analysis of missing regions in (bacterial) draft genomes\"\n\nA bioinformatics tool to extract and analyze missing regions of\nshort-read assemblies by mapping the contigs to a reference genome.\n\nPublication: to be added (doi)\n\n![Image](https://github.com/LoGT-KULeuven/SASpector/blob/dev/SASPector-logo.png?raw=true)\n\n<a id=\"orgfc8146a\"></a>\n\n# Introduction\n\nSASpector is a tool that compares a short-reads assembly with a\nreference bacterial genome (for example obtained via hybrid assembly)\nby extracting missing (unmapped) regions from the reference and\nanalyzing them to see functional and compositional pattern. The aim of\nthe analysis is to explain why these regions are missed by the\nshort-read assembly and if important parts of the genome are missed\nwhen a resolved genome is lacking.\n\nThe tool takes as global inputs the reference genome and a short-read\nassembly as contigs/draft genome, both in FASTA format. This\nrepository contains a command-line tool \\`SASpector\\` to obtain missing\nregions and several script for evaluation and analysis for those\nmissing regions:\n\n-   *mapper.py*: mapping of the short-reads assembly against the\n    reference assembly using progressiveMauve (Mauve aligner).\n-   *summary.py*: extraction of the mapped, unmapped (missing) and\n    conflict regions to FASTA files. Also, creates summary statistic for\n    the missing regions and reference which are written to separate\n    tab-delimited files.\n-   *gene_predict.py*: prediction of genes in the missing regions using\n    Prokka. Optionally, run BLASTX to the predicted genes with an\n    user-defined protein database in FASTA file. In this repository you\n    can find protein database retrieved from UniprotKB for bacterial\n    species: *Escherichia coli*, *Pseudomonas aeruginosa*, *Klebsiella\n    pneumoniae*, *Bacillus subtillis* and *Staphylococcus aureus*.\n\nOptionally, some scripts provide additional analysis:\n\n-   *kmer.py*: tandem repeats in the missing regions and pairwise\n    comparison between kmers of missing and mapped regions using\n    Sourmash.\n-   *coverage.py*: calculates the average coverage of the missing and\n    mapped regions with a provided BAM file.\n-   *quastunmap.py*: performs a genome quality assessment for the\n    missing regions to the reference and provides a genome viewer using\n    QUAST and Icarus.\n\n\n<a id=\"org1d89a66\"></a>\n\n# System Requirements\n\nLinux 64-bit and OS X are supported.\n\n\n<a id=\"org36ea480\"></a>\n\n## General dependencies\n\n-   Python3 (3.4+)\n-   shutil\n-   shlex\n-   Seaborn\n-   BioPython\n-   matplotlib\n-   Pandas\n-   numpy\n-   sourmash\n\n<a id=\"org88d3159\"></a>\n\n## Third-party tools (available on bioconda)\n\n-   [progressiveMauve](https://darlinglab.org/mauve/mauve.html)\n-   [prokka](https://github.com/tseemann/prokka)\n-   [BLAST+](https://blast.ncbi.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download)\n-   [QUAST](https://github.com/ablab/quast)\n-   [SAMtools](http://samtools.sourceforge.net/)\n-   [Tandem repeats finder](https://tandem.bu.edu/trf/trf.download.html)\n-   [refseq\\_masher](https://github.com/phac-nml/refseq_masher)\n\n<a id=\"org51dbcec\"></a>\n\n## Installation\nFirst you need to ensure that the above tools are available in your\nenvironment. This can be achieved by means of conda virtual\nenvironments as follows: \n\n\t$ conda install mamba -n base -c conda-forge\n\t$ mamba create -n SASpector \n\t$ mamba activate SASpector\n\t$ mamba install -c conda-forge -c bioconda -c defaults blast emboss progressivemauve prokka quast samtools sourmash trf mash pyani\n\nWe recommend to install SASpector as follows:\n\n\t$ git clone https://github.com/LoGT-KULeuven/SASpector\n\t$ cd SASpector\n\t$ python setup.py install --user\n\n<a id=\"org9550907\"></a>\n\n## Command line options\n\nFor basic functionalities, run \\`SASpector\\`:\n\n    usage: SASpector - Short-read Assembly inSpector [-h] [-p PREFIX]\n    \t\t\t\t\t\t [-dir OUTDIR] [-f [LENGTH]]\n    \t\t\t\t\t\t [-db [PROTEIN-DB]] [-k [K]]\n    \t\t\t\t\t\t [-q] [-msh] [-c [BAMFILE]]\n    \t\t\t\t\t\t --draft draft_assembly.fasta\n                             --reference reference_assembly.fasta\n    Required arguments:\n      -draft, --draft        Short-read assembly FASTA file as contigs/draft genome.\n\n    optional arguments:\n\t  -ref, --reference      Reference assembly FASTA file. If this is not provided, you can\n\t            try to use the -msh option to automatically serach refseq\n      -h, --help            show this help message and exit\n      -p PREFIX, --prefix PREFIX\n    \t\t\tGenome ID\n      -dir OUTDIR, --outdir OUTDIR\n    \t\t\tOutput directory\n      -f [LENGTH], --flanking [LENGTH]\n    \t\t\tAdd flanking regions to the extracted missing regions\n    \t\t\t[Default = 100 bp]\n      -db [PROTEIN-DB], --proteindb [PROTEIN-DB]\n    \t\t\tBLAST protein database FASTA file to use for checking\n    \t\t\tthe Prokka gene prediction\n      -k [K], --kmers [K]   Choose k to calculate kmer frequencies\n      -q, --quast           Run QUAST with unmapped regions against reference\n    \t\t\tassembly\n      -c [BAMFILE], --coverage [BAMFILE]\n    \t\t\tRun SAMtools bedcov to look at short-read coverage in\n    \t\t\tthe missing regions. Needs alignment of reads to the\n    \t\t\treference genome in BAM format\n      -msh [PATH], --mash_selection [PATH]\n\t\t        run automated reference selection (experimental feature)\n\t\t\t\tneeds a sketch file (provided in SASpector/assets)\n\n\nFirst, Mauve performs an alignment of both genomes with the\nprogressiveMauve algorithm. This generates the subdirectory\n*prefix.alignment* with several output files and importantly the\nbackbone file with coordinates of the mapped and unmapped regions in\nthe reference genome.\n\nThis backbone file is parsed and we extract the sequences that are not\ncovered in the short-read assembly from the reference genome. They are\nwritten to a multi-fasta file with the prefix and coordinates in the\nheaders, which is done equally for the mapped and conflict regions\n(regions that didn't map correctly due to gaps or indels). Two\ntab-delimited summary files are generated in a subdirectory called\nsummary. One for the reference, with the amount of gapped and ungapped\nregions, the fraction of the reference genome that they represent, the\nGC content and the length. The other one for the unmapped regions,\nwith for each region the GC content and length and then for each amino\nacid the occurence frequency averaged over all 6 reading frames. As an\noptional input, the user can add flanking regions to the extracted\nmissing regions.\n\nFinally, SASpector predicts genes that are in the missing regions\nusing Prokka and if a protein FASTA file database is provided,\nSASpector will BLAST the output sequences from Prokka to the database\ngenerating a tab-delimited summary with the hits of the sequences. You\ncan use our defined database *saspector_proteindb.fasta*.\n\nAs optional analysis:\n\n-   kmer analysis and tandem repeats: SASpector runs Tandem Repeats\n    Finder and will generate HTML reports for the missing regions with\n    tandem repeats. Finally, SASpector will perform a pairwise\n    comparison between kmers of missing regions and mapped regions\n    (k-size = 31) for comparative studies, using sourmash.\n\n-   Coverage analysis: if a BAM file is provided, SASpector will\n    calculate the average coverage of the missing and the mapped\n    regions, using SAMtools. It will generate a sorted BAM file and\n    tab-delimited reports of the coverage for both regions.\n\n-   QUAST: SASpector will run QUAST for the missing regions against the\n    reference genome for genome quality assessment and will provide\n    Icarus as genome viewer.\n\n\n<a id=\"orgab8c9a6\"></a>\n\n## Usage\n\n    SASpector [Reference genome].fasta [Contigs].fasta -p [Genome ID] -dir [Output directory] -f [Length] -db [Protein database].fasta -k [kmer size] -c [reference genome].bam -q\n\n\n<a id=\"orgfb6aafb\"></a>\n\n## Output\n\n    [Output directory]/\n      [Genome ID]_unmappedregions.fasta    FASTA file of the missing regions\n      [Genome ID]_mappedregions.fasta      FASTA file of the mapped regions\n      [Genome ID]_conflictregions.fasta    FASTA file of regions that did not map correctly\n      [Genome ID]_referencesummary.tsv     tab-delimited summary report of the reference genome\n      [Genome ID]_unmapsummary.tsv         tab-delimited summary report of the missing regions\n      [Genome ID]_length_missing.jpg       Distribution plot of the length of the missing missing regions\n      [Genome ID]_gc_content_missing.jpg   Distribution plot of the GC content of the missing regions\n      [Genome ID]_codons_missing.jpg       Boxplot of the averaged frequency for each amino acid (for all 6 reading frames) of the missing regions\n      alignment/\n        [Genome ID].alignment              Alignment output from progressiveMauve\n        [Genome ID].bbcols                 Coordinates of the mapped and unmapped regions from Mauve (not used)\n        [Genome ID].backbone               Coordinates of the mapped, unmapped and conflicts regions from progressiveMauve\n        [Genome ID].sslist                 SSlists of short-reads assembly and reference genome\n      genesprediction/\n        [Genome ID].predictedgenes.gff                    Genes annotation GFF3 file\n        [Genome ID].predictedgenes.gbk                    Genbank file\n        [Genome ID].predictedgenes.fna                    Nucleotide FASTA file of the missing regions\n        [Genome ID].predictedgenes.faa                    Protein FASTA file of the translated CDS sequences\n        [Genome ID].predictedgenes.ffn                    Nucleotide FASTA file of all the prediction transcripts\n        [Genome ID].predictedgenes.sqn                    Sequin file for submission to Genbank\n        [Genome ID].predictedgenes.fsa                    Nucleotide FASTA file of the missing regions, used by 'tbl2asn' for the .sqn file\n        [Genome ID].predictedgenes.tbl                    Feature table file, used by 'tbl2asn' for the .sqn file\n        [Genome ID].predictedgenes.err                    NCBI discrepancy report\n        [Genome ID].predictedgenes.log                    Output report of Prokka during its run\n        [Genome ID].predictedgenes.txt                    Statistics of the annotated features\n        [Genome ID].predictedgenes.tsv                    tab-delimited report of all features\n        [Genome ID]_blastxresults.tsv      tab-delimited report of BLASTX\n      kmer/\n        [Genome ID]_sourmash               tab-delimited output of pairwise comparison between missing regions and mapped regions\n        _distances.tsv\n        sourmash                Clustermap of pairwise comparison\n        _clustermap.jpg\n      trf/\n        *.html                  Tandem Repeat Finder HTML interactive reports\n      coverage/\n        [Genome ID].sorted.bam             Sorted BAM file of the reference genome\n        [Genome ID].sorted.bam.bai         Sorted BAM index file\n        [Genome ID]_mappedregions.bed      BED file of the mapped regions\n        [Genome ID]_unmappedregions.bed    BED file of the missing regions\n        [Genome ID]_mapcvg.tsv             tab-delimited report of the average coverage of the mapped regions\n        [Genome ID]_unmappedcvg.tsv        tab-delimited report of the average coverage of the missing regions\n        [Genome ID]_coverageresults.tsv    tab-delimited summary report of the average coverage, total depth per base and locations for both regions\n        coverage_boxplots.jpg      Boxplot comparison of the average coverage for both regions\n      quast/\n        report.txt              QUAST summary table\n        report.tsv              tab-delimited summary report\n        report.tex              LaTex summary report\n        report.html             HTML interactive report, includes all tables and plots for statistics\n        report.pdf              PDF report\n        icarus.html             Icarus genome viewer\n\n\n<a id=\"org86ccb18\"></a>\n\n# Contact\n\nLaboratory of Computational Systems Biology, KU Leuven\n\n\n<a id=\"org7083ee4\"></a>\n\n# References\n\n-   Altschul, S. F., Gish, W., Miller, W., Myers, E. W., & Lipman, D. J. (1990). Basic local alignment search tool. Journal of Molecular Biology, 215(3), 403-410.\n-   Darling, A. C. E. (2004). Mauve: Multiple Alignment of Conserved Genomic Sequence With Rearrangements. Genome Research, 14(7), 1394-1403.$\n-   Brown and Irber (2016), sourmash: a library for MinHash sketching of DNA Journal of Open Source Software, 1(5), 27.\n-   Pierce NT, Irber L, Reiter T et al. Large-scale sequence comparisons with sourmash [version 1; peer review: 2 approved]. F1000Research 2019, 8:1006\n-   Gurevich, A., Saveliev, V., Vyahhi, N., & Tesler, G. (2013). QUAST: Quality assessment tool for genome assemblies. Bioinformatics, 29(8), 1072-1075.\n-   Li H.\\*, Handsaker B.\\*, Wysoker A., Fennell T., Ruan J., Homer N., Marth G., Abecasis G., Durbin R. and 1000 Genome Project Data Processing Subgroup (2009) The Sequence alignment/map (SAM) format and SAMtools. Bioinformatics, 25, 2078-9.\n-   Torsten Seemann, Prokka: rapid prokaryotic genome annotation, Bioinformatics, Volume 30, Issue 14, 15 July 2014, Pages 2068-2069.\n-   Benson G. (1999). Tandem repeats finder: a program to analyze DNA sequences. Nucleic acids research, 27(2), 573-580.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LoGT-KULeuven/SASpector",
    "keywords": "",
    "license": "",
    "maintainer": "Computational systems biology group",
    "maintainer_email": "vera.vannoort@kuleuven.be",
    "name": "SASpector",
    "package_url": "https://pypi.org/project/SASpector/",
    "platform": "",
    "project_url": "https://pypi.org/project/SASpector/",
    "project_urls": {
      "Homepage": "https://github.com/LoGT-KULeuven/SASpector"
    },
    "release_url": "https://pypi.org/project/SASpector/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "Short-read Assembly inSpector",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13037917,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29a573fc573b296f008696f7279efa0786d06c837c6bd54b80de995541a8763",
          "md5": "34c887c2795b3913940d8651a15b7f59",
          "sha256": "8e4f4a01ad55e49cb6aa865bf447242c8d5469c5cdf365c4b7bead5243364596"
        },
        "downloads": -1,
        "filename": "SASpector-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "34c887c2795b3913940d8651a15b7f59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 10354456,
        "upload_time": "2019-12-15T14:07:16",
        "upload_time_iso_8601": "2019-12-15T14:07:16.449535Z",
        "url": "https://files.pythonhosted.org/packages/e2/9a/573fc573b296f008696f7279efa0786d06c837c6bd54b80de995541a8763/SASpector-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2695798249507dc6b69cb2af87a32ec9ff2f55ca58191b0c2c7d044705d6519",
          "md5": "06ed64a8eb31fd9f53fc3494b67c20b1",
          "sha256": "09d63056198a090dd3718a2d5711c62ff2521dcdfbc66418d3b5af4737a6bc28"
        },
        "downloads": -1,
        "filename": "SASpector-0.0.3-py3.7.egg",
        "has_sig": false,
        "md5_digest": "06ed64a8eb31fd9f53fc3494b67c20b1",
        "packagetype": "bdist_egg",
        "python_version": "0.0.3",
        "requires_python": ">=3.4",
        "size": 8531956,
        "upload_time": "2021-06-10T12:01:02",
        "upload_time_iso_8601": "2021-06-10T12:01:02.926842Z",
        "url": "https://files.pythonhosted.org/packages/a2/69/5798249507dc6b69cb2af87a32ec9ff2f55ca58191b0c2c7d044705d6519/SASpector-0.0.3-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16a352fa5c3f5ce20813201d78548f47d4eebe82517fdfb897df8e9565048fe3",
          "md5": "d9c7dae671427fe820ba3369c8fcb9b0",
          "sha256": "c800359ab0855aa399ede05112512b1dbb5069c5e05b29263d9d2a468b194568"
        },
        "downloads": -1,
        "filename": "SASpector-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d9c7dae671427fe820ba3369c8fcb9b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 4256467,
        "upload_time": "2021-06-21T06:39:15",
        "upload_time_iso_8601": "2021-06-21T06:39:15.576364Z",
        "url": "https://files.pythonhosted.org/packages/16/a3/52fa5c3f5ce20813201d78548f47d4eebe82517fdfb897df8e9565048fe3/SASpector-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5eb8aedce506f34641aaf30e5c57c43d76f4fdf11edde09edd8f272bdd35147",
          "md5": "a2e86d3045440fa9b16d16ac9466d2e5",
          "sha256": "1e042f6dc34af0ee909b08d6d7feb0cb92d1877f4ad01c24495c18cd8a7bf6e5"
        },
        "downloads": -1,
        "filename": "SASpector-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a2e86d3045440fa9b16d16ac9466d2e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 22845,
        "upload_time": "2022-02-28T22:12:03",
        "upload_time_iso_8601": "2022-02-28T22:12:03.630841Z",
        "url": "https://files.pythonhosted.org/packages/c5/eb/8aedce506f34641aaf30e5c57c43d76f4fdf11edde09edd8f272bdd35147/SASpector-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5eb8aedce506f34641aaf30e5c57c43d76f4fdf11edde09edd8f272bdd35147",
        "md5": "a2e86d3045440fa9b16d16ac9466d2e5",
        "sha256": "1e042f6dc34af0ee909b08d6d7feb0cb92d1877f4ad01c24495c18cd8a7bf6e5"
      },
      "downloads": -1,
      "filename": "SASpector-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "a2e86d3045440fa9b16d16ac9466d2e5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 22845,
      "upload_time": "2022-02-28T22:12:03",
      "upload_time_iso_8601": "2022-02-28T22:12:03.630841Z",
      "url": "https://files.pythonhosted.org/packages/c5/eb/8aedce506f34641aaf30e5c57c43d76f4fdf11edde09edd8f272bdd35147/SASpector-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}