{
  "info": {
    "author": "Enrico Pittini",
    "author_email": "pittinienrico@hotmail.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# EEA-datasets-handler\nLibrary for handling the air pollution datasets provided by [EEA](https://www.eea.europa.eu/data-and-maps/data/aqereporting-8).\n\nThis library is part of my bachelor thesis, check out the other works.\n- [ILMETEO-datasets-handler](https://github.com/EnricoPittini/ILMETEO-datasets-handler)\n- [model-selection](https://github.com/EnricoPittini/model-selection)\n- [timeSeries-processing](https://github.com/EnricoPittini/timeSeries-processing)\n- [Air-quality-prediction](https://github.com/EnricoPittini/Air-quality-prediction)\n\n## Description\nThe two main purposes of this library are the following.\nThe first is to allow the user to download the EEA datasets, in an intuitive and easy way.\nThe second is to allow the user to process the downloaded datasets into a properly cleaned and prepared pandas DataFrame.\n\n### Guiding principles\nThe functionalities of this library are built in order to have an interface similar to the one of the [EEA download service](https://discomap.eea.europa.eu/map/fme/AirQualityExport.htm).\nThe aim of that is to have a set of functionalities which interact with the EEA services from python using the same interface exposed by the EEA itself.\nFor example, in the EEA interface a user can specify a pollutant using either the numeric notation or the textual one: this feature is kept in the library.\n\nActually, that interface is even improved. It is made richier and more flexible, in order to facilitate and reduce the user work.\nThe aim of that is to automate the interaction with the EEA services.\nFor example, if a user wants to download all the datasets about PM10 in Italy, he doesn’t have to download the dataset of each Italian city one at a time. The user can simply specify that he is interested in all the Italian cities.\n\nFinally, this library is built in order to appropriately warn the user. The user is informed each time he specifies an inappropriate value. In addition, he is also warned each time the action requested is not performed correctly or completely.\n\n### Functionalities\nThere are three groups of functionalities.\n\nThe first group allows the user to know the EEA supported values, by getting them.\nThe supported values are the values used by the EEA interface. So, in other words, these are the values that the user is allowed to use in order to specify which air pollution datasets are of interest.\nThere are three kinds of values.\n- Years.\n- Pollutants.\n- Countries and cities. For each country there is an associated list of cities. Actually, there are also countries with no associated cities.\n\nThe second group of functionalities allows the user to filter only the EEA supported values. Given a collection of values, only the supported values are kept.\n\nFinally, the third group of functionalities is the most important. It allows the user to actually download the air pollution datasets in his local storage.\nEach downloaded dataset is a csv file. Its name has the following structure:\nNationCode_CityName_PollutantId_Year_StationId.csv\nwhere the station is the physical place where the air pollution measurements have been made.\nThis quadruple is an unique identifier of the dataset.\nIn addition, an appropriate and straightforward structure of directories is built, in order to keep the datasets well organized. If this structure already exists in the local storage, that structure is used ( i.e. a new structure is not created) and the datasets with the same quadruple are overwritten.\n\nInside the third group there are other important  functionalities.\nThese allow the user to retrieve and delete the downloaded datasets.\nIn addition, they allow the user to load the downloaded datasets into a single pandas DataFrame. This is a raw DataFrame, since it simply contains the air pollution measurements (i.e. the measurements are not grouped by day).\nFinally, these functionalities allow the user to process the loaded pandas DataFrame into a properly cleaned and prepared new DataFrame. This returned DataFrame is a time series DataFrame, since the measurements are grouped by day.\n\nIt is important to notice that, while the raw DataFrame contains several useless features (i.e. features which are simply EEA codes and indicators), the time series DataFrame contains only the air pollution concentrations. In other words, the returned DataFrame is ready to be used.\n\n### Implementation details\nIn this section, the most significant implementation details are described.\n\nFirst of all, it is described how the EEA supported values are mainly represented.\nIt is important to underline that only the python built-in data structures are used.\n- The supported years are represented as a list of integers.\n- The supported pollutants are mainly represented as a list of integers, which are the pollutants numeric notations.\nIn addition, the supported pollutants are also represented as a dictionary, which maps the pollutants numeric notations into the pollutants textual notations (i.e. it is a map from strings to strings).\n- The supported countries and the associated lists of cities are represented as a dictionary, which maps the countries code notations into the lists of cities (i.e.it is a map from strings to lists of strings).\nIn addition, the supported countries are also represented as a dictionary, which maps the countries code notations into the countries extended notations (i.e. it is a map from strings to strings).\nOther additional data structures are available, such as the list of supported countries and the list of all the supported cities.\n\nSecondly, the main functionality of the library, i.e. the one which is responsible for downloading the datasets, is built on top of the EEA download service.\nThis means that, under the hood, the same service used by the EEA users is utilized.\n\nThe retrieving of the downloaded datasets is performed in a recursive manner. Given the structure of directories where the datasets have been downloaded, the research is firstly carried out on the parent directory and then it is propagated on each sub-folder.\n\nFinally, the cleaning of the data is mainly performed according to the EEA indications. In fact, the EEA feature “Validity” indicates the reliability of the measurements: a positive value means that the measurement is valid.\nIn addition, other cleaning operations are performed, in order to guarantee the consistency of the data.\n\n### Sources\nThe supported pollutants have been taken from the official [EEA dataset](http://dd.eionet.europa.eu/vocabulary/aq/pollutant/view?page=7#vocabularyConceptResults), which contains all the pollutants and the related information.\nThis dataset has been properly processed, in order to keep only the relevant information and in order to build the data structures mentioned above.\n\nInstead, the supported years have been simply taken from the Web page of the EEA downloading service.\n\nAlso the supported countries and the associated lists of supported cities have been simply taken from that page.\nActually, this information is taken from the HTML document and from the associated JavaScript file.\nFrom this information, the data structures mentioned above are built.\n\n\n## Installation\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install EEA-datasets-handler.\n\n```bash\npip install EEA-datasets-handler\n```\n\n## Main usage\n\n```python\nimport EEA_datasets_handler as eea\n\n# Download the datasets\ndest_path = \"C:\\\\Datasets\"\ncountries_cities_dict = {\"IT\":[\"Milano\",\"Venezia\"],\n                         \"CY\":\"all\",\n                         \"AT\":[\"Lienz\",\"Wien\"],\n                         \"GB\":[\"London\"]}\npollutants = [\"PM10\", \"PM15\"]\nyears = [2015, 2020]\neea.download_datasets(dest_path, countries_cities_dict, pollutants, years)\n\n# Load the datasets into a raw pandas DataFrame\nsource_path = \"C:\\\\Datasets\\\\EEA\"\ncountries_cities_dict = {\"IT\":[\"Milano\"]}\npollutants = [\"PM10\"]\nyears = [2020]\ndf = eea.load_datasets(source_path, countries_cities_dict, pollutants, years)\n\n# Preprocess the DataFrame into time series DataFrames\ndf_mean, df_min, df_max = eea.preprocessing(df, fill=True)\n```\n\n## References\n- [EEA](https://www.eea.europa.eu/). The European Environment Agency (EEA) is an agency of the European Union, whose task is to provide sound, independent information on the environment.\n- [pandas](https://pandas.pydata.org/) is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\n- [requests](https://docs.python-requests.org/en/master/) is an elegant and simple HTTP library for Python, built for human beings.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/EnricoPittini/EEA-datasets-handler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "EEA-datasets-handler",
    "package_url": "https://pypi.org/project/EEA-datasets-handler/",
    "platform": "",
    "project_url": "https://pypi.org/project/EEA-datasets-handler/",
    "project_urls": {
      "Homepage": "https://github.com/EnricoPittini/EEA-datasets-handler"
    },
    "release_url": "https://pypi.org/project/EEA-datasets-handler/1.0.1/",
    "requires_dist": [
      "requests",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Library which handles the air pollution datasets provided by EEA",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11825432,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2167b6a0c87bc2e727b23a690f7d1c7e87c23363372a491a4fa1740255fbeb7",
          "md5": "f22c95153cdfba9293a83ced72f8f5aa",
          "sha256": "cad65c14906020bdb83c5bc9caaaf3af25062e38d90c8f36925006aa0c093285"
        },
        "downloads": -1,
        "filename": "EEA_datasets_handler-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f22c95153cdfba9293a83ced72f8f5aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23043,
        "upload_time": "2021-10-25T17:14:52",
        "upload_time_iso_8601": "2021-10-25T17:14:52.699805Z",
        "url": "https://files.pythonhosted.org/packages/f2/16/7b6a0c87bc2e727b23a690f7d1c7e87c23363372a491a4fa1740255fbeb7/EEA_datasets_handler-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2167b6a0c87bc2e727b23a690f7d1c7e87c23363372a491a4fa1740255fbeb7",
        "md5": "f22c95153cdfba9293a83ced72f8f5aa",
        "sha256": "cad65c14906020bdb83c5bc9caaaf3af25062e38d90c8f36925006aa0c093285"
      },
      "downloads": -1,
      "filename": "EEA_datasets_handler-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f22c95153cdfba9293a83ced72f8f5aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23043,
      "upload_time": "2021-10-25T17:14:52",
      "upload_time_iso_8601": "2021-10-25T17:14:52.699805Z",
      "url": "https://files.pythonhosted.org/packages/f2/16/7b6a0c87bc2e727b23a690f7d1c7e87c23363372a491a4fa1740255fbeb7/EEA_datasets_handler-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}