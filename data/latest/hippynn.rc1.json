{
  "info": {
    "author": "Nicholas Lubbers et al",
    "author_email": "hippynn@lanl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "The hippynn python package - a modular library for atomistic machine learning with pytorch.\n*******************************************************************************************\n\nWe aim to provide a powerful library for the training of atomistic\n(or physical point-cloud) machine learning.\nWe want entry-level users to be able to efficiently train models\nto millions of datapoints, and a modular structure for extension or contribution.\n\nWhile hippynn's development so-far has centered around the HIP-NN architecture, don't let that\ndiscourage you if you are performing research with another model.\nGet in touch, and let's work together to provide a high-quality implementation of your work,\neither as a contribution or an interface extension to your own package.\n\nFeatures:\n=========\nModular set of pytorch layers for atomistic operations\n----------------------------------------------------------\n- Atomistic operations can be tricky to write in native pytorch.\n  Most operations provided here support linear-scaling models.\n- Model energy, force charge & charge moments, bond orders, and more!\n- nn.Modules are written with minimal reference to the rest of the library;\n  if you want to use them in your scripts without using the rest of the features\n  provided here -- no problem!\n\nGraph level API for simple and flexible construction of models from pytorch components.\n---------------------------------------------------------------------------------------\n\n- Build models based on the abstract physics/mathematics of the problem,\n  without having to think about implementation details.\n- Graph nodes support native python syntax, for example different forms of loss can be directly added.\n- Link predicted values in the model with a database entry to compare predicted and true values\n- IndexType logic records metadata about tensor structure, and provides\n  automatic conversion to compatible structures when possible.\n- Graph API is independent of module implementation.\n\nPlot level API for tracking your training.\n----------------------------------------------------------\n- Using the graph API, define quantities to evaluate before, during, or after training as\n  figures using matplotlib.\n\nTraining & Experiment API\n----------------------------------------------------------\n- Integrated with graph level API\n- Pretty-printing loss metrics, generating plots periodically\n- Callbacks and checkpointing\n\nCustom Kernels for fast execution\n----------------------------------------------------------\n- Certain operations are not efficiently written in pure pytorch, we provide\n  alternative implementations with ``numba``\n- These are directly linked in with pytorch Autograd -- use them like native pytorch functions.\n- These provide advantages in memory footprint and speed\n- Includes CPU and GPU execution for custom kernels\n\nInterfaces\n----------------------------------------------------------\n- ASE: Define ``ASE`` calculators based on the graph-level API.\n- PYSEQM: Use ``PYSEQM`` calculations as nodes in a graph.\n\nInstallation\n============\n\n- Clone this repository and navigate into it.\n- Run ``pip install .``\n\nIf you fee like tinkering, do an editable install: ``pip install -e .``\n\nYou can install using all optional dependencies from pip with: ``pip install -e .[full]``\n\nNotes\n-----\n\n- Install dependencies with pip from requirements.txt .\n- Install dependencies with conda from conda_requirements.txt .\n- If you don't want pip to install them, conda install from file before installing ``hippynn``.\n  You may want to use -c pytorch for the pytorch channel.\n  For ase and cupy, you probably want to use -c conda-forge.\n- Optional dependencies are in optional_dependencies.txt\n\n\nWe are currently under development. At the moment you should be prepared for breaking changes -- keep track\nof what version you are using if you need to maintain consistency.\n\nAs we clean up the rough edges, we are preparing a manuscript.\nIf, in the mean time, you are using hippynn in your work, please cite this repository and the HIP-NN paper:\n\nLubbers, N., Smith, J. S., & Barros, K. (2018).\nHierarchical modeling of molecular energies using a deep neural network.\nThe Journal of chemical physics, 148(24), 241715.\n\nSee AUTHORS.txt for information on authors.\n\nSee LICENSE.txt for licensing information. hippynn is licensed under the BSD-3 license.\n\nTriad National Security, LLC (Triad) owns the copyright to hippynn, which it identifies as project number LA-CC-19-093.\n\nCopyright 2019. Triad National Security, LLC. All rights reserved.\nThis program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos\nNational Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S.\nDepartment of Energy/National Nuclear Security Administration. All rights in the program are\nreserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear\nSecurity Administration. The Government is granted for itself and others acting on its behalf a\nnonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare\nderivative works, distribute copies to the public, perform publicly and display publicly, and to permit\nothers to do so.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hippynn",
    "package_url": "https://pypi.org/project/hippynn/",
    "platform": null,
    "project_url": "https://pypi.org/project/hippynn/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/hippynn/0.0.1b2/",
    "requires_dist": null,
    "requires_python": ">3.7",
    "summary": "The hippynn python package - a modular library for atomistic machine learning with pytorch",
    "version": "0.0.1b2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16104403,
  "releases": {
    "0.0.1b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ebec0d19a39a8302da603995636b834e27eff182855d9b77d6e64140343dad",
          "md5": "9514afe506983250b91ea0f7280ac3d4",
          "sha256": "ae1083f1d69a03a9e3b68850c264e0307c0e322e22308aff53419accc5615f5e"
        },
        "downloads": -1,
        "filename": "hippynn-0.0.1b2.tar.gz",
        "has_sig": false,
        "md5_digest": "9514afe506983250b91ea0f7280ac3d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">3.7",
        "size": 119149,
        "upload_time": "2022-12-01T21:01:25",
        "upload_time_iso_8601": "2022-12-01T21:01:25.537603Z",
        "url": "https://files.pythonhosted.org/packages/13/eb/ec0d19a39a8302da603995636b834e27eff182855d9b77d6e64140343dad/hippynn-0.0.1b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13ebec0d19a39a8302da603995636b834e27eff182855d9b77d6e64140343dad",
        "md5": "9514afe506983250b91ea0f7280ac3d4",
        "sha256": "ae1083f1d69a03a9e3b68850c264e0307c0e322e22308aff53419accc5615f5e"
      },
      "downloads": -1,
      "filename": "hippynn-0.0.1b2.tar.gz",
      "has_sig": false,
      "md5_digest": "9514afe506983250b91ea0f7280ac3d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">3.7",
      "size": 119149,
      "upload_time": "2022-12-01T21:01:25",
      "upload_time_iso_8601": "2022-12-01T21:01:25.537603Z",
      "url": "https://files.pythonhosted.org/packages/13/eb/ec0d19a39a8302da603995636b834e27eff182855d9b77d6e64140343dad/hippynn-0.0.1b2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}