{
  "info": {
    "author": "Rob MacKinnon",
    "author_email": "rome@villagertech.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "=====================\n**DOMObjects v0.1.0**\n=====================\n---------------------\n**About**\n---------------------\nDOMObjects is designed to create flexible data structures that allows users to\neasily traverse to siblings or parents. The datastructure modeled should be\nsome what familiar compared to the Javascript DOM object structure.\n\n---------------------\n**Features**\n---------------------\n- Scoped namespaces\n- Traversable data tree\n- Easier data management\n\nScoped Namespacing\n----------------------\nIndividual namespaces are created to allow for compartmentalized and scoped\nconfiguration and storage allowing for top-down tree transveral and blocking\nscope escaping from child objects. Namespace objects also do not require valid\nnaming conventions, and can contain invalid characters. These objects are\nreferenced via the `get_context` method.\n\nTraversable Data Tree\n-------------------------\nTraversing the object tree is simple and similar to the Javascript DOM object\ntree. This is by design, by referencing `siblings`, `parent`, or `children`\nproperties, you can get and manage all aspects of an object.\n\nEasier Data Management\n-----------------------\nAssignment of callback methods can be done so programatically. The defined\n\"value\" of the property is not limited to static value, but supports dynamic\nevaluation. Therefore, with the usage of the ``add_property`` method static\nobjects (e.g. ``str``, ``int``, ``bool``, etc.), ``callable`` objects, callable object\noutput, and evaluateable callable objects can be attached to the object tree.\n\n::\n     \n     def callableDef(var): \n          # Do something with var\n          return var\n          \n     # Assignement of a callback method\n     ROOT.add_property(\"callback\", callableDef)\n     \n     # Referencing the method\n     print(ROOT.callback(\"variable\"))\n     \n     # Define a method as though it were using the @property decorator\n     ROOT.add_property(\"preDefProp\", callableDef(\"use-this-everytime\"))\n     print(ROOT.preDefProp)\n     \n--------------------\nGetting Started\n--------------------\nImport ``DOMObjects`` and create a root object. Root objects consist of the top level\nnamespace object and are the base structure to build your datastructure on.\n\n::\n     \n     import DOMobjects\n     ROOT = DOMobjects.DOMRootObject()\n     \nChildren\n---------------------\nOut of the box, a root object comes empty, plain and boring. Start by adding\nsome children by using the ``new_child`` method. Once created it can be\nreferenced and operated on. Children can also be referenced by context, as\nseen further in this example.\n\n::\n     \n     ROOT.new_child(\"first_born\")\n     ROOT.first_born.name\n     >>> \"first_born\"\n     child_context = ROOT.first_born.get_context()\n     child_context.name\n     >>> \"first_born\"\n     \nReferencing children by context is the preferred method of operation. As\npython does more interesting (and some ways less predictable) operations with\nvalue reference vs call reference, you can save some headache and use context.\n\nParenting\n---------------------\n\nAs with creation of any child, there is a parent. This value is automatically\nset on the child to match the parent object. This value is also automatically\nsoft-locked.  While possible to update with private methods, doing so is not\nrecommended.\n\n::\n     \n     ROOT.first_born.parent\n     >>> \"root\"\n     \n\nBulk Children\n---------------------\nCreating one child is great, but lets create more with a single method. Using\nthe `add_child_bulk` method allows you to pass a `list` of children and create\nthem automatically.\n\n::\n\n     more_children = [\"second_born\", \"third_born\", \"forth_born\", \"fifth_born\"]\n     ROOT.new_child_bulk(more_children)\n     ROOT.children\n     >>> [\"first_born\", \"second_born\", \"third_born\", \"forth_born\", \"fifth_born\"]\n     \n\nSiblings\n---------------------\nEach child has the ``siblings`` attribute will report all the child nodes\nwith the same parent.\n\n::\n\n     ROOT.first_born.siblings\n     >>> [\"second_born\", \"third_born\", \"forth_born\", \"fifth_born\"]\n     \n\nNamespaces\n---------------------\nFrom a parent object calling the ``new_namespace()`` method will create a child\nwith the `FLAG_NAMESPACE` bit flag set. This flag manages the ability of\nchildren to perform path traversal upward and limits them to within their own namespace.\nNamespaces names do not have to conform to standard Python object name limitations.\nTo operate on this child type, use the `get_context` method on the parent object to retrieve it.\n\n::\n\n     ROOT.new_namespace(\"new_namespace_object\")\n     ROOT.new_namespace(\"{b52702e0-1513-4201-82df-592c05ee7a02}\")\n     context1 = ROOT.get_context(\"new_namespace_object\")\n     context2 = ROOT.get_context(\"{b52702e0-1513-4201-82df-592c05ee7a02}\")\n     context1.parent\n     >>> None\n     \n\nDictGroups\n---------------------\nChildren grouping can be acheived with the usage of the ``new_dictgroup`` method.\nThe ``DictGroup`` class includes several overrides as an extension to the\n``DOMObject`` class.  This allows for ``dict``-like usage and standard property\nsetting. New children added under this object type group together in a more\nuser friendly iterable group.\n\n::\n\n     ROOT.new_dictgroup(\"group\")\n     ROOT.group.new_child_bulk([\"A\", \"B\", \"C\"])\n     ROOT.group[\"A\"].name\n     >>> A\n     ROOT.group[\"A\"].siblings\n     >>> [\"B\", \"C\"]\n     \nProperties\n---------------------\nProperty management for a child generally should not be expensive. Adding,\nremoving, setting, and getting can be easily achieved with the built-in methods\n``new_method``, ``new_property``, ``del_property``, ``set_property``, ``set_method``, and\n``get_property``. Properties have the special feature of referencing any kind of\nobject type. They can be static or dynamic values. Like namespacing, the naming\nconvention does not have to follow Python object name limitation. In the\nfollowing example, both static and dynamic value types can be found.\n\n::\n\n     def demo_def(value):\n          return 1+value\n     \n     ROOT.new_property(\"value\", 1)\n     ROOT.value\n     >>> 1\n     ROOT.new_property(\"dynamic_call\", demo_def)\n     ROOT.dynamic_call(1)\n     >>> 2\n     ROOT.new_property(\"dynamic_value\", demo_def(3))\n     ROOT.dynamic_value\n     >>> 4\n     ROOT.new_method(\"method\", demo_def, [3])\n     ROOT.method()\n     >>> 3\n     demo_list = [1, 2, 3]\n     ROOT.new_method(\"sum\", sum, [demo_list])\n     ROOT.sum()\n     >>> 6\n     demo_list = [4, 5, 6]\n     ROOT.sum()\n     >>> 15\n     \nBulk Properties\n---------------------\nWith large systems come large selections of properties. Using the\n``new_property_bulk`` method allows for creation of reusable property sets.\nIf no value is defined (as with the first property in our example), a default\nvalue of ``None`` is assigned.\n\n::\n\n    props = [\n        \"single_prop\",\n        (\"another_prop\", \"with_value\")\n    ]\n    ROOT.new_property_bulk(props)\n    ROOT.single_prop\n    >>> None\n    ROOT.another_prop\n    >>> \"with_value\"\n\n\n--------------------------------------------------------\nBuilding Large Datastructures `(new as of v0.1.0 beta1)`\n--------------------------------------------------------\nBootstrapping properties for datastructures with ``DOMObjects`` is made easier by using\nthe DOMObject's ``build_schema`` method and ``DOMSchema`` objects. Start by creating an schema object, and giving it some structure.\n\n::\n\n    schema = DOMSchema()\n    schema.children = {\n        \"child_1\": {\n        \t\"props\": {\n\t\t\t    \"A\": {\n\t\t\t\t\"cast\": int,\n\t\t\t\t\"default\": 1\n\t\t\t    },\n\t\t\t    \"B\": {\n\t\t\t\t\"cast\": str,\n\t\t\t\t\"default\": \"string value for child 1\"\n\t\t\t    }\n\t\t}\n        },\n        \"child_2\": {\n        \t\"props\": {\n        \t\t\"A\": {\n        \t\t\t\"cast\": int,\n        \t\t\t\"default\": 2\n        \t\t}\n        \t},\n        \t\"children\": {\n\t\t\t\"subchild_1\": {},\n\t\t\t\"subchild_2\": {},\n\t\t\t\"subchild_3\": {}\n        \t}\n        },\n    }\n    schema.dictgroups = {\n    \t\"group_1\": {}\n    \t\"group_2\": {\n    \t\t\"children\": {\n\t\t\t\"subchild_1\": {\n\t\t\t\t\"props\": {\n\t\t\t\t\t\"A\": {\n\t\t\t\t\t\t\"cast\": int,\n\t\t\t\t\t\t\"default\": 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"subchild_2\": {},\n\t\t\t\"subchild_3\": {}\n    \t\t}\n\t}\n    }\n\nNext generate the above schema. To do so, call the ``build_schema`` method on the required context. In this example, we'll use the root object.\n\n::\n\n    ROOT.build_schema(schema)\n    ROOT.child_1.A\n    >>> 1\n    ROOT.child_2.A\n    >>> 2\n    ROOT.group_2.children\n    >>> [\"subchild_1\",\"subchild_2\",\"subchild_3\"]\n    ROOT.group_2[\"subchild_1\"].A\n    >>> 3\n\n----------------------------\nAttribute and Property Flags\n----------------------------\n\nBit Flags\n----------------------------\nProperties and children have assigned control flags set allowing for\nsoft locking. Bit values are found under the ``__flags__`` sub-object.\nDirectly managing them is not suggested, instead use the built-in methods\n``set_flag``, ``get_flag``, ``update_flag``, or ``test_flag`` to update, set, unset, or test value masks.\n\nValid mask values are available as: ``FLAG_READ``, ``FLAG_WRITE``, or ``FLAG_NAMESPACE``.\n\nMapping\n----------------------------\n\n::\n\n     Bit Position:\n     0 1 2 3 4 5 6 7   Flags:\n      .--------------- [1] Readeable = FLAG_READ\n     /  .------------- [2] Writeable = FLAG_WRITE\n     | /  .----------- [4] Namespace = FLAG_NAMESPACE\n     | | /  .--------- [8] Reserved\n     | | | /  .------- [16] Reserved\n     | | | | /  .----- [32] Reserved\n     | | | | | /  .--- [64] Reserved\n     | | | | | | /  .- [128] Reserved\n     | | | | | | | /\n     1 1 1 1 1 1 1 1\n     ^\n      ---- MSB\n     \n----------------------------\nExamples\n----------------------------\n::\n\n    def demo_def():\n        return True\n\n    ROOT = DOMRootObject()\n    ROOT.new_child(\"sample_child\")\n    ROOT.new_child(\"sample_sibling\")\n    ROOT.sample_child.new_child(\"sub_child\")\n\n    moreChildren = [\"bulkChild\", \"anotherChild\"]\n    ROOT.new_child_bulk(moreChildren)\n\n\n    # Define a callable property\n    ROOT.sample_child.add_method(\"callable\", demo_def)\n    print(\"This prop is callable and %s\" % ROOT.sample_child.callable())\n\n    # Define values\n    ROOT.sample_child.add_property(\"value_int\", 1)\n    ROOT.sample_child.add_property(\"value_float\", 1.00001)\n\n    # Define evaluatable properties like lambdas\n    ROOT.sample_child.add_property(\"bool_eval\", (demo_def() !=  True))\n    ROOT.sample_child.add_property(\"child_count\", len(ROOT.children))\n\n    ROOT.children              ## returns [\"sample_child\", \"sample_sibling\"]\n    ROOT.sample_child.sibings  ## returns [\"sample_sibling\"]\n\n    # Get a node context directly\n    sub_child = ROOT.sample_child.sub_child.get_context()\n    # or get a node's context via it's parent\n    sub_child = ROOT.sample_child.get_context(\"sub_child\")\n\n    # Try getting a Node's object path\n    print(sub_child.path)\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/villagertech/DOMObjects",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DOMObjects",
    "package_url": "https://pypi.org/project/DOMObjects/",
    "platform": "any",
    "project_url": "https://pypi.org/project/DOMObjects/",
    "project_urls": {
      "Bug Tracker": "https://github.com/villagertech/DOMObjects/issues",
      "Homepage": "https://github.com/villagertech/DOMObjects"
    },
    "release_url": "https://pypi.org/project/DOMObjects/0.1.0b4/",
    "requires_dist": [
      "pytest ; extra == 'testing'"
    ],
    "requires_python": ">=3.6",
    "summary": "Create Python DOM style datastructures with ease.",
    "version": "0.1.0b4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11978374,
  "releases": {
    "0.1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8c80bfc23991a6791f429b34553c7147f377ef9507f18d55da6d1d6978537bb",
          "md5": "5ebefd0d9df74f47c805d97fddc3604f",
          "sha256": "8e7f1726a3f2407fea1551098b8cdae6b070b78b3644afc401f84da57a39a410"
        },
        "downloads": -1,
        "filename": "DOMObjects-0.1.0b4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ebefd0d9df74f47c805d97fddc3604f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14564,
        "upload_time": "2021-11-09T23:20:26",
        "upload_time_iso_8601": "2021-11-09T23:20:26.478947Z",
        "url": "https://files.pythonhosted.org/packages/e8/c8/0bfc23991a6791f429b34553c7147f377ef9507f18d55da6d1d6978537bb/DOMObjects-0.1.0b4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "435098d6f14e02c12473794fb84a66c6b0b4453650e648043e1f128e206b9b27",
          "md5": "90b9eb51dcef405c7701adb929e2badd",
          "sha256": "16f633f7d921961e723d4a69d48290735d883e668378d788024c5a447b41be38"
        },
        "downloads": -1,
        "filename": "DOMObjects-0.1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "90b9eb51dcef405c7701adb929e2badd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17349,
        "upload_time": "2021-11-09T23:20:27",
        "upload_time_iso_8601": "2021-11-09T23:20:27.655794Z",
        "url": "https://files.pythonhosted.org/packages/43/50/98d6f14e02c12473794fb84a66c6b0b4453650e648043e1f128e206b9b27/DOMObjects-0.1.0b4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8c80bfc23991a6791f429b34553c7147f377ef9507f18d55da6d1d6978537bb",
        "md5": "5ebefd0d9df74f47c805d97fddc3604f",
        "sha256": "8e7f1726a3f2407fea1551098b8cdae6b070b78b3644afc401f84da57a39a410"
      },
      "downloads": -1,
      "filename": "DOMObjects-0.1.0b4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ebefd0d9df74f47c805d97fddc3604f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14564,
      "upload_time": "2021-11-09T23:20:26",
      "upload_time_iso_8601": "2021-11-09T23:20:26.478947Z",
      "url": "https://files.pythonhosted.org/packages/e8/c8/0bfc23991a6791f429b34553c7147f377ef9507f18d55da6d1d6978537bb/DOMObjects-0.1.0b4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "435098d6f14e02c12473794fb84a66c6b0b4453650e648043e1f128e206b9b27",
        "md5": "90b9eb51dcef405c7701adb929e2badd",
        "sha256": "16f633f7d921961e723d4a69d48290735d883e668378d788024c5a447b41be38"
      },
      "downloads": -1,
      "filename": "DOMObjects-0.1.0b4.tar.gz",
      "has_sig": false,
      "md5_digest": "90b9eb51dcef405c7701adb929e2badd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17349,
      "upload_time": "2021-11-09T23:20:27",
      "upload_time_iso_8601": "2021-11-09T23:20:27.655794Z",
      "url": "https://files.pythonhosted.org/packages/43/50/98d6f14e02c12473794fb84a66c6b0b4453650e648043e1f128e206b9b27/DOMObjects-0.1.0b4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}