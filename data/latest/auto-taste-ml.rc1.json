{
  "info": {
    "author": "Cui Zy",
    "author_email": "1776228595@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**Auto_Taste_ML 0.0.1**\n\n# Illustrate：\n\n​\tThis is a machine learning expansion package for Cui Lianshan and his friends. It has a strong socialist open source sharing spirit, and is extremely creative and combat effective. Let us applaud them here :clinking_glasses: :clinking_glasses:\n\n## Spend\n\nTest set data location:：{Example}\n\nThe configuration is as follows：\n\n|        | Windows            | Windows            | MacOS   | Linux               |\n| ------ | ------------------ | ------------------ | ------- | ------------------- |\n| Config | i7-9750H           | i7-9750H           | M1      | E5-2640 V4          |\n| Cores  | 6 cores 12 threads | 6 cores 12 threads | 8 cores | 20 cores 40 threads |\n| Freq   | 2.67GHz            | 3.2GHz             |         | 2.40GHz             |\n\n运行速度对比结果如下：\n\n| Not integrated      | Windows1 | Windows2  | MacOS      | Linux      |\n| ------------------- | -------- | --------- | ---------- | ---------- |\n| ALL_FUNCTION        | 47.364   | 43.681    | 34.013     | ==27.282== |\n| binary_ROC()        | 45.809   | 42.964    | 32.751     | ==32.143== |\n| auto_model()        | 53.498   | 48.649    | ==38.267== | 40.794     |\n| estimator_violion() | 1.191    | ==1.021== | 1.678      | 2.395      |\n\n\n\n| 集成                | Windows1 | Windows2              | MacOS                                                        | Linux                                                        |\n| ------------------- | -------- | --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| binary_ROC()        | 46.2 s   | 43.2 s                | CPU times: user 4.82 s, sys: 365 ms, total: 5.18 s Wall time: ==32.9s== | CPU times: user 9.59 s, sys: 3.89 s, total: 13.5 s Wall time: 33.3 s |\n| auto_model()        | 50.4 s   | 47.1 s                | CPU times: user 9.75 s, sys: 247 ms, total: 10 s Wall time: ==38.1 s== | CPU times: user 15.1 s, sys: 1.68 s, total: 16.8 s Wall time: 41.1 s |\n| estimator_violion() | 1.16 s   | Wall time: ==1.01 s== | CPU times: user 2.02 s, sys: 70.1 ms, total: 2.09 s Wall time: 1.69 s | CPU times: user 3.85 s, sys: 2.32 s, total: 6.17 s Wall time: 2.23 s |\n\n## Request_install\n\nYou can refer to learning the environment backup in the current directory: Auto_ML_C.yaml\n\nThe main software involved is as follows:\n\n| Package          | 最低版本——待检测 |\n| ---------------- | ---------------- |\n| python=3.8.10    |                  |\n| seaborn=0.11.2   |                  |\n| pandas=1.3.3     |                  |\n| matplotlib=3.4.2 |                  |\n| numpy=1.20.3     |                  |\n\n\n\n# Content:\n\n​\tThis package is based on Sklearn, imblance and other machine learning expansion packages. It is currently planned to be divided into two parts:\n\n- Classification task\n\n  1. binary_classfication.py\n\n     \n\n     |                                           | Function                                                     | Rturn                                                 |\n     | ----------------------------------------- | ------------------------------------------------------------ | ----------------------------------------------------- |\n     | cal_add_1(num1,num2):wave:                | welcome                                                      | num1,num2                                             |\n     | LogisticRegressionCV_mdoel(X, Y,cv)       |                                                              |                                                       |\n     | SGDClassifier_model(X,Y,cv)               |                                                              |                                                       |\n     | LinearDiscriminantAnalysis_model(X, Y,cv) |                                                              |                                                       |\n     | LinearSVC_model(X, Y,cv)                  |                                                              |                                                       |\n     | SVC_model(X, Y,cv)                        |                                                              |                                                       |\n     | DecisionTreeClassifier_model(X,Y,cv)      |                                                              |                                                       |\n     | AdaBoostClassifier_model(X,Y,cv)          |                                                              |                                                       |\n     | BaggingClassifier_model(X, Y,cv)          |                                                              |                                                       |\n     | GradientBoostingClassifier_model(X, Y,cv) |                                                              |                                                       |\n     | RandomForestClassifier_model(X, Y,cv)     |                                                              |                                                       |\n     | KNeighborsClassifier_model(X, Y,cv)       |                                                              |                                                       |\n     | BernoulliNB_model(X, Y,cv)                |                                                              |                                                       |\n     | GaussianNB_model(X,Y,cv)                  |                                                              |                                                       |\n     | Below is the total function               |                                                              |                                                       |\n     | binary_ROC(X,Y,k,fig_name)                | Plot the best ROC under scalar hyperparameter search         | fig                                                   |\n     | auto_model(X, Y, k)                       | Model's scalar hyperparameter search results                 | Auc_data, Acc_data, <br />Recall_data, Precision_data |\n     | estimator_violion(df1,df2,fig_name)       | Draw a violin chart for the Dataframe of the auto_model result | fig                                                   |\n     \n     \n     \n     \n     \n  3. Multi-class function\n     \n     Develeping :man_health_worker:\n     \n  3. 特征筛选函数Feature_struction\n  \n     | Name                                                        | Function                                                     | Rturn     |\n     | ----------------------------------------------------------- | ------------------------------------------------------------ | --------- |\n     | data_enhance_show(X,Y[[\"Taste_num\"]],location,kind=\"SMOTE\") | A variety of visualization methods to reduce dimensionality to visualize the data to be enhanced | DataFRmae |\n     | data_enhance(X.iloc[:,:-1],Y[[\"Taste_num\"]])                | Use multiple indicators to evaluate the results of different enhancement methods | DataFrame |\n     | data_enhance_compare(tmp1,location,name)                    | Visualize the return result of function 2                    | Fig       |\n  \n     \n  \n  4. The progress bar version of hyperparameter optimization! ! ! ! Surely series next time!\n\n\n\n# How to Use\n\n## Installation\n\n```python\n# Method 1\n# Create a new environment, here is conda as an example\nconda create --name Auto_ML_C python=3.8.10\n\n# Activate the newly created environment\nconda activate Auto_ML_C\n\n# Installation package\npip install Auto_ML_C==0.0.11\npip install imblearn\n\n# Suggest the pipeline of Jupyter notebook [optional, recommended]\nconda install jupyter notebook\nconda install ipykernel \npython -m ipykernel install --user --name Auto_ML_C --display-name   \"Auto_ML_C\"\n# Install Sklearn 0.6.  this will fixed next version\nconda install -c conda-forge sklearn-contrib-lightning\n\n# Method2\n# Use the yaml environment file on the GitHub homepage to directly copy the current environment\nconda env create -n Auto_ML_C -f Auto_ML_C.yaml\n\n# Activate the newly created environment\nconda activate \n\n# Suggest the pipeline of Jupyter notebook [optional, recommended]\nconda install jupyter notebook\nconda install ipykernel \npython -m ipykernel install --user --name Auto_ML_C --display-name   \"Auto_ML_C\"\n```\n\n\n\n## Feature_struction\n\n```python\nimport auto_ml_c.Feature_structure as fs\nimport pandas as pd\ndf = pd.read_csv(\"1_23肽全部的构效数据.csv\")\nX = df.iloc[:,2:]\nY = df[[\"Taste\"]]\nY[\"Taste_num\"] = 10\nfor i in range(Y.shape[0]):\n    if Y[\"Taste\"].iloc[i] == \"Umami\":\n        Y[\"Taste_num\"].iloc[i] = 1\n    elif Y[\"Taste\"].iloc[i] == \"Bitter\":\n        Y[\"Taste_num\"].iloc[i] = 0\n        \n# Function 1: Use a variety of visualization methods to reduce dimensionality to visualize the data to be enhanced       \n# 函数1： 采用多种可视化方法进行降维可视化待增强数据\nlocation = \"\"\ntmp = fs.data_enhance_show(X,Y[[\"Taste_num\"]],location,kind=\"SMOTE\")  \ntmp\n\n# Function 2: Using multiple indicators to evaluate the results of different enhancement methods\n# 函数2： 采用多指标评价不同增强方法后的结果\ntmp1 = fs.data_enhance(X.iloc[:,:-1],Y[[\"Taste_num\"]])\ntmp1\n\n# Function 3: Visualize the return result of function 2\n# 函数3：可视化函数2的返回结果\nlocation = \"\"\nname=\"Test\"\ntmp2 = fs.data_enhance_compare(tmp1,location,name)\ntmp2\n```\n\n![image-20211026201938046](README/image-20211026201938046.png)\n\n\n\n![image-20211026202033919](README/image-20211026202023150.png)\n\n\n\n## Binary Classication\n\n```python\n# Here is an example of the function binary_classfication_ws  \n# 这里以函数binary_classfication_ws举例\n\n# 开始加载环境\nimport pandas as pd\nimport numpy as np\nimport auto_ml_c.binary_classfication as abc\n\n# 读取测试数据\ndf = pd.read_csv(\"2_data_deal_smote.csv\")\nX = df.iloc[:,:-1]\nY = df[\"label\"]\nscore = 'accuracy'\n\n# The first function, draw ROC image\ntmp_a = abc.binary_ROC(X,Y,cv,\"111\",\"accuracy\")\n\n# The second function, get Auc_data, Acc_data, Recall_data, Precision_data\ntmp_b1,tmp_b2,tmp_b3,tmp_b4 = abc.auto_model(X,Y,cv,\"accuracy\")\n\n# The third function, draw the evaluation graph obtained by function 2 auto_model\ntmp_c = abc.estimator_violion(tmp_b1,tmp_b2,\"Violionplot\")\n```\n\n<img src=\"README/binary_ROC.png\" alt=\"binary_ROC\" style=\"zoom:50%;\" />\n\n![estimator_violion](README/estimator_violion.png)\n\n\n\n# ConTact\n\nVX：Cuizy13390906310_ic\n\nQQ：1776228595\n\nE-mail：1776228595@qq.com\n\nGitHub：地址待填写\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SynchronyML/Auto_Taste_ML",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Auto-Taste-ML",
    "package_url": "https://pypi.org/project/Auto-Taste-ML/",
    "platform": "",
    "project_url": "https://pypi.org/project/Auto-Taste-ML/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SynchronyML/Auto_Taste_ML/issues",
      "Homepage": "https://github.com/SynchronyML/Auto_Taste_ML"
    },
    "release_url": "https://pypi.org/project/Auto-Taste-ML/0.0.1/",
    "requires_dist": [
      "numpy (>=1.11.0)",
      "seaborn (>=0.11.2)",
      "pandas (>=1.3.3)",
      "matplotlib (>=3.4.2)",
      "xgboost (>=1.4.0)",
      "scikit-learn (>=0.24.2)"
    ],
    "requires_python": ">=3.8.10",
    "summary": "A small example package",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12348442,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2ed4b091c2678e1cd90f2947a18e35ee6f9f4130ff35a74d7d55d9e1465fd8",
          "md5": "fb145009b7e71bd246e7b84882c28a7b",
          "sha256": "182687ef28301b29979a8ec52824c843b3a5d0f211a8d41db63ca9b3223818e0"
        },
        "downloads": -1,
        "filename": "Auto_Taste_ML-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb145009b7e71bd246e7b84882c28a7b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.10",
        "size": 13544,
        "upload_time": "2021-12-18T15:02:29",
        "upload_time_iso_8601": "2021-12-18T15:02:29.187655Z",
        "url": "https://files.pythonhosted.org/packages/5e/2e/d4b091c2678e1cd90f2947a18e35ee6f9f4130ff35a74d7d55d9e1465fd8/Auto_Taste_ML-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f0a87f6f82effe41e158578fb4274e5d188969170996b66e3eb0e5e68a03293",
          "md5": "65a52fed81d8a645f92f1b833de4aee6",
          "sha256": "73dc96b120ae0f23f94184a6f39c1b890869a5721aea493ef34aa54bf218037a"
        },
        "downloads": -1,
        "filename": "Auto_Taste_ML-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65a52fed81d8a645f92f1b833de4aee6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.10",
        "size": 13233,
        "upload_time": "2021-12-18T15:02:31",
        "upload_time_iso_8601": "2021-12-18T15:02:31.268576Z",
        "url": "https://files.pythonhosted.org/packages/7f/0a/87f6f82effe41e158578fb4274e5d188969170996b66e3eb0e5e68a03293/Auto_Taste_ML-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e2ed4b091c2678e1cd90f2947a18e35ee6f9f4130ff35a74d7d55d9e1465fd8",
        "md5": "fb145009b7e71bd246e7b84882c28a7b",
        "sha256": "182687ef28301b29979a8ec52824c843b3a5d0f211a8d41db63ca9b3223818e0"
      },
      "downloads": -1,
      "filename": "Auto_Taste_ML-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb145009b7e71bd246e7b84882c28a7b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.10",
      "size": 13544,
      "upload_time": "2021-12-18T15:02:29",
      "upload_time_iso_8601": "2021-12-18T15:02:29.187655Z",
      "url": "https://files.pythonhosted.org/packages/5e/2e/d4b091c2678e1cd90f2947a18e35ee6f9f4130ff35a74d7d55d9e1465fd8/Auto_Taste_ML-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f0a87f6f82effe41e158578fb4274e5d188969170996b66e3eb0e5e68a03293",
        "md5": "65a52fed81d8a645f92f1b833de4aee6",
        "sha256": "73dc96b120ae0f23f94184a6f39c1b890869a5721aea493ef34aa54bf218037a"
      },
      "downloads": -1,
      "filename": "Auto_Taste_ML-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "65a52fed81d8a645f92f1b833de4aee6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.10",
      "size": 13233,
      "upload_time": "2021-12-18T15:02:31",
      "upload_time_iso_8601": "2021-12-18T15:02:31.268576Z",
      "url": "https://files.pythonhosted.org/packages/7f/0a/87f6f82effe41e158578fb4274e5d188969170996b66e3eb0e5e68a03293/Auto_Taste_ML-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}