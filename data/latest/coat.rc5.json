{
  "info": {
    "author": "moyogatomi",
    "author_email": "moyogatomi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Coat\n---\n__Coat__ is small wrapper that sits on __numpy__'s ndarray (*subclassed*) and __opencv__\\\n Coat's only purpouse is for rapid prototyping\n\n---\n### Style\n\n__Coat__ is using method cascading\\\nreturn from every method is __Coat__'s HigherCoating instance\\\nOnly exception is method classic() which returns back numpy instance\\\n\n### Install\n\npreferably use virtual env\n\n```bash\npip install coat\n\n```\n\n### Demo\n\nfunction __Coat__ is a proxy function that handles different types of args.\n\nIt handles str(url), list/generator of images and ndarray. \n\n\n```python\nfrom coat import Coat\n\nurl = \"https://natgeo.imgix.net/subjects/headers/shutterstock_276228476.jpg?auto=compress,format&w=1920&h=960&fit=crop\"\nCoat(url).thresh(125,255).show()\n\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/earth_thresh.jpg)\n\n\n## Usage\n\n__Content__\n\n[Core functionalities](#Core-functionalities)\\\n[Dominance](#Auto-resolver)\\\n[Array manipulation](#Array-manipulation)\\\n[Image downloading](#Download-image)\\\n[Labeling](#Supports-labeling)\\\n[Color spaces](#Colorspace-change)\\\n[Helper functions](#Image-processing-helpers)\\\n[Montage](#Montage)\\\n[Contours](#Contours)\\\n[Color filtering](#Replace-particular-color)\\\n[Motion difference](#Motion-difference)\n\n---\n\n### Core functionalities\nLets define two arrays of different type, size and dimension\n```python\n# Import Coat(proxy function) and Montage\nfrom coat import Coat, Montage\nimport numpy as np\n\narray1 = Coat(np.zeros(shape=[40,60,3],dtype=np.uint8))\narray2 = Coat(np.zeros(shape=[8,8],dtype=np.float32))\n```\n##### Auto resolver\nCoating the arrays you let __Coat__ resolve array operations whenever there is conflict \n```python\nres = array1 + array2\n\nres.shape,res.dtype\n>>> (40, 60, 3) uint8\n```\nCoated arrays can be dominant or non-dominant.\nGeneral rules are as follows:\n```sh\nA(non-dominant) + B(non-dominant) -> A is prioritized\nA(non-dominant) + B(dominant)     -> B is prioritized\nA(dominant) + B(non-dominant)     -> A is prioritized\nA(dominant) + B(dominant)         -> A is prioritized\n```\n##### Dominance setting\nYou can set which array is dominant\nBe default each array is not dominant.\n```python\nres = array1 * array2.host()\nres.shape,res.dtype\n>>> (8, 8) float32\n```\nIf have arrays of different size and dimension( gray & colored), you can simply transform to common standard as follows\n```python\nlist_of_images = [img1,img2, img3, .., .., imgN]\n\n# define common standard\ngrayscale_template = Coat(np.zeros(shape=[100,100],dtype=np.uint8))\ncolored_template = Coat(np.zeros(shape=[100,100],dtype=np.uint8))\n\ngrascaled = [grayscale_template.host() + image for image in list_of_images]\ncolored =   [colored_template.host() + image for image in list_of_images]\n```\n##### interpolation\nYou can set interpolation algorithm (default is LINEAR - BILINEAR)\n```python\nres = array1 - array2.host('CUBIC')\n```\n\n##### Removing dominance\n```python\nres = array1 * array2.host('CUBIC').guest()\nres.shape,res.dtype\n>>> (40, 60, 3) uint8\n```\n### Array manipulation\n\n##### osize as objective size\n```python\narray1.shape, array2.shape\n>>> (40, 60, 3) , (8,8)\narray1.osize(array2.shape).shape\n>>> (8,8,3)\narray2.osize(array1.shape).shape\n>>> (40, 60)\n```\n\n##### rsize as relative size\n```python\nres = array2.rsize(fx = 2, fy=0.5)\nres.shape\n>>> (16, 4)\n```\n###### ndarray compatibility\n```python\nres = array1 + np.zeros(shape=array1.shape)\nnp.uint8(array1) # -> returns back Coat instance with changed datatype\narray1.classic() # -> returns back numpy instance\n```\n\n# Leveraging OpenCV\n\n##### Download image\npass url to Coat and __show__ it\n```python\nurl = \"https://natgeo.imgix.net/subjects/headers/shutterstock_276228476.jpg?auto=compress,format&w=1920&h=960&fit=crop\"\nimage = Coat(url).show()\nimage = image.rsize(fx=0.25,fy=0.25)\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/earth.jpg)\n##### Supports labeling\n```python\n# Use int for objective coordinates\nimage.labelbox(\"Home\",(0,136),(230,340), bcolor = [0,255,0]).show()\n# Use float for relative coordinates\nimage.labelbox(\"Home\",(0.0,0.3),(0.9,0.7), bcolor = [0,255,0]).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/earth_label.jpg)\n\n##### Colorspace change\nsupported color transformation\n```\nBGR2GRAY\nBGR2HLS\nBGR2HSV\nHSV2BGR\nGRAY2RGB\nGRAY2BGR\nRGB2GRAY\nRGB2HSV\nRGB2HLS\n```\n```python\nimage.color_to('BGR2GRAY')\n```\n##### NOTE\nOpenCV is using BGR as default color scheme\n##### Image processing helpers\nThreshold\n```python\nimage.thresh(125,255,'thresh_binary').show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/earth_thresh.jpg)\n\nConvolution filtering\n```python\nimage.blur_median\nimage.filter_bilateral\nimage.blur_gauss\nimage.blur_average\n```\nConvolution 2D\n```python\nimg.conv(kernel)\n```\n\n##### Montage\n\nSee orignal next to processed image\\\nwe add host (turn on dominance of first image) so we get result in RGB colorspace as our original image is rgb\n```python\nimage.rsize(fx=0.3,fy=0.3).host().join(image.thresh(127,255)).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/earth_thresh_join.jpg)\nMontage of different color spaces\n```python\nimg = image.rsize(fx=0.3,fy=0.3)\ncolor_spaces = [\"BGR2GRAY\",\"BGR2HLS\",\"BGR2HSV\",]\n```\nDominant is the first image if template is not defined\n```python\nall_images = [img] + [img.to_color(cspace) for cspace in color_spaces]\nmontage = Montage(all_images).grid(2,2).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/montage_colorspaces.jpg)\n\nresize montage based on template\n```python\nmontage = Montage(all_images).template(np.zeros(shape=[50,50,3],dtype=np.uint8)).grid(2,2)\n```\n\n##### Remove stars with morphological opening\n```python\nimage.morphologyEx('open',3).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/no_stars.jpg)\n\n##### Contours\n```python\n# Draw quick countours\nthr = image.thresh(200,255)\n\n# copy \ncontoured = image.copy().contours(thr,min_size=5, max_size = 9999999,thickness=2,color = [0,125,255]).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/contour1.jpg)\n\n##### Replace particular color\n```python\npresent = [0,125,255]\nfuture = [255,0,0]\ncontoured.replace(present,future).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/contour2.jpg)\n##### Color filtering\n```python\n# [36,0,0] --> green color interval in HSV <--[70,255,255]\nimage.filterHsv([36,0,0],[70,255,255],passband=True).show()\nimage.filterHsv([36,0,0],[70,255,255],passband=False).show()\n# Passband False:   -------|++|----- \n# Passband True:   ++++++|--|++++++ \n```\npassband True\n\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/filter_true.jpg)\n\n\npassband False\n\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/filter_false.jpg)\n\n##### Motion difference\n```python\nbox1 = Coat(np.zeros(shape=[400,400,3])).box((30,30),(250,250),color=[255,125,0])\nbox2 = Coat(np.zeros(shape=[400,400,3])).box((30,150),(250,350),color=[255,125,0])\n\nmotion_diff = box1.motion_difference(box2,val=30).show()\n```\n![](https://raw.githubusercontent.com/moyogatomi/coat/master/samples/mdiff.jpg)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/moyogatomi/coat/blob/master/dist/coat-0.6.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/moyogatomi/coat",
    "keywords": "ndarray,opencv,prototyping,image processing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "coat",
    "package_url": "https://pypi.org/project/coat/",
    "platform": "",
    "project_url": "https://pypi.org/project/coat/",
    "project_urls": {
      "Download": "https://github.com/moyogatomi/coat/blob/master/dist/coat-0.6.tar.gz",
      "Homepage": "https://github.com/moyogatomi/coat"
    },
    "release_url": "https://pypi.org/project/coat/0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Wrapper around ndarray and opencv for rapid prototyping",
    "version": "0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6190012,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f17383a9824999b31c19310ad30296411c7620777646a7f2a5141fbf4ec5a923",
          "md5": "e5e09345bf685e518b4e9da036558747",
          "sha256": "c94ba7fd2cb7314e68bb93c566f25d6e1688e86adbe58020165fba009f779a71"
        },
        "downloads": -1,
        "filename": "coat-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5e09345bf685e518b4e9da036558747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11006,
        "upload_time": "2019-11-24T11:55:42",
        "upload_time_iso_8601": "2019-11-24T11:55:42.439371Z",
        "url": "https://files.pythonhosted.org/packages/f1/73/83a9824999b31c19310ad30296411c7620777646a7f2a5141fbf4ec5a923/coat-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a752ce2aea8fb31b8b461ab6a4fc7fbfd2ab2f841b55bc796c2a6e1cdf0db64",
          "md5": "bec13dc22feac5a4f9941270e20fc073",
          "sha256": "8fafbbebf228176f2b2dd877e1dfe7777af5130c2a27b7f215792e5415849d19"
        },
        "downloads": -1,
        "filename": "coat-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bec13dc22feac5a4f9941270e20fc073",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11068,
        "upload_time": "2019-11-24T12:28:38",
        "upload_time_iso_8601": "2019-11-24T12:28:38.350291Z",
        "url": "https://files.pythonhosted.org/packages/3a/75/2ce2aea8fb31b8b461ab6a4fc7fbfd2ab2f841b55bc796c2a6e1cdf0db64/coat-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96fa3a8cc6b4ffca39da588175ffb782e72aa5121cfd85da3b6ba0f9d87ac26c",
          "md5": "58ae4f58bcd69a60d788106ba7a269aa",
          "sha256": "10eb7005ace3b4ba0823074ad5ec7c28c1e435949d1891e4187ad5ac051f7ba2"
        },
        "downloads": -1,
        "filename": "coat-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "58ae4f58bcd69a60d788106ba7a269aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10800,
        "upload_time": "2019-11-24T13:03:28",
        "upload_time_iso_8601": "2019-11-24T13:03:28.630836Z",
        "url": "https://files.pythonhosted.org/packages/96/fa/3a8cc6b4ffca39da588175ffb782e72aa5121cfd85da3b6ba0f9d87ac26c/coat-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "229cba7857e8dc3d62966390a6980658a2445a1437c8c821a01223b9a5a8df34",
          "md5": "418618ed4729b4178001d8eba826505b",
          "sha256": "17cfc8b139f3a67ab55b49c48fe33987eb5a627351d9c6c4efdb9ef6a60de574"
        },
        "downloads": -1,
        "filename": "coat-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "418618ed4729b4178001d8eba826505b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10914,
        "upload_time": "2019-11-24T13:23:41",
        "upload_time_iso_8601": "2019-11-24T13:23:41.815449Z",
        "url": "https://files.pythonhosted.org/packages/22/9c/ba7857e8dc3d62966390a6980658a2445a1437c8c821a01223b9a5a8df34/coat-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efe60996f3ab8a7331bc42772aadf6aab732d5ce1910924a397f91158be067d0",
          "md5": "10fab62e3d2dd9f37c4278c3bdaa833b",
          "sha256": "47750f12f187e34abd779a39aeba0afd94b4a3719df8a02fd27497426007b821"
        },
        "downloads": -1,
        "filename": "coat-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "10fab62e3d2dd9f37c4278c3bdaa833b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14088,
        "upload_time": "2019-11-24T14:31:36",
        "upload_time_iso_8601": "2019-11-24T14:31:36.481085Z",
        "url": "https://files.pythonhosted.org/packages/ef/e6/0996f3ab8a7331bc42772aadf6aab732d5ce1910924a397f91158be067d0/coat-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efe60996f3ab8a7331bc42772aadf6aab732d5ce1910924a397f91158be067d0",
        "md5": "10fab62e3d2dd9f37c4278c3bdaa833b",
        "sha256": "47750f12f187e34abd779a39aeba0afd94b4a3719df8a02fd27497426007b821"
      },
      "downloads": -1,
      "filename": "coat-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "10fab62e3d2dd9f37c4278c3bdaa833b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14088,
      "upload_time": "2019-11-24T14:31:36",
      "upload_time_iso_8601": "2019-11-24T14:31:36.481085Z",
      "url": "https://files.pythonhosted.org/packages/ef/e6/0996f3ab8a7331bc42772aadf6aab732d5ce1910924a397f91158be067d0/coat-0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}