{
  "info": {
    "author": "",
    "author_email": "Baptiste Lesquoy <baptistelesquoy@protonmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Gama client\n Gama-client is a python wrapper for interacting with the headless mode (called gama-server) of the multi-agent modeling platform [gama](https://gama-platform.org/). The latest release is compatible with gama 1.9.0.\nThis wrapper will take care of the connection with gama-server and of sending properly formatted requests to gama-server. It is made to fit the asynchronous nature of gama-server and thus makes it possible to handle multiple simulations at the same time, but the counterpart is that the users will still have to manage what to do with the received messages (command confirmation, simulation output, errors etc.) by themselves. We provide a working example that shows the architecture you can deploy if you still want to have a sequential execution.\n\n# Installation\nIn your python environment, install the gama-client package with the command:\n\n```\npip install gama-client\n```\n\nFor advanced users, you can find the package on the [pypi website](https://pypi.org/project/gama-client/) and do it yourself instead of using the `pip` tool.\n\nYou can check that everything went well by opening a python console and try the following line:\n\n```python\nfrom gama_client.base_client import GamaBaseClient\n```\n\nIf you don't see any error message then `gama-client` has been installed correctly.\n\n\n# Using it\n\n## Requirements\n\nTo use `gama-client` you first need to have an instance of [gama-server](https://gama-platform.org/wiki/next/HeadlessServer) open and the python package installed. Then you can interact with gama-server in python using the `GamaBaseClient` class.\n\n## Available functions\nThe wrapper supports all the commands described in the gama-server [documentation](https://gama-platform.org/wiki/next/HeadlessServer#available-commands).\n\n## Quick overview\n\nAs explained before, everything goes through the `GamaBaseClient` class.\n\nBefore doing anything you will have to create an instance of that class with the `url` and `port` where your gama-server is running as well as the function that should be called when a message is received.\nfor example to connect to a local gama-server running on port 6868 and printing received message:\n```python\nimport asyncio\n\nfrom gama_client.base_client import GamaBaseClient\nasync def message_handler(message):\n    print(\"received message:\", message)\n\n\nasync def main():\n    client = GamaBaseClient(\"localhost\", 6868, message_handler)\n    await client.connect(False)\n\n    while True:\n        await asyncio.sleep(1)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\nWhen running main, your python program should connect to gama-server and when the [ConnectionSuccessful](https://gama-platform.org/wiki/next/HeadlessServer#messages-types) message is sent back to python, the console should show\n```yaml\nreceived message: {'type': 'ConnectionSuccessful', 'content': '480777042'}\n```\n**Note:** make sure to define your `message_handler` as an **async** function, as it's what's expected by `GamaBaseClient`.\n\nAs explained in the gama-server documentation [here](https://gama-platform.org/wiki/next/HeadlessServer#connection) and [there](https://gama-platform.org/wiki/next/HeadlessServer#connection-related-answers) you should then use the `content` value (here '480777042') as a **socket id** in the rest of your interactions with gama-server. \nThe class `GamaBaseClient` contains a variable `socket_id` that you can use to store the socket id of your client, or for more simplicity you can connect with:\n```python\nawait client.connect(True)\n```\nor\n```python\nawait client.connect()\n```\nAnd the client will take care of handling this first message and setting the `socket_id` by itself.\n\n### Running commands\nOnce connected you will want to run commands, the principle is pretty simple: all commands can be run your `client` variable through functions. For example if you want to run the [load command](https://gama-platform.org/wiki/next/HeadlessServer#the-load-command) you just have to call the `load` function with the proper parameters.\n```python\nawait client.load(\"path/to/gaml/file\", \"my_experiment_name\")\n```\n\n### Message handling\n\n#### Filtering messages\nThe messages sent back by gama-server all follow the json format and are converted into a python dictionary by the wrapper. Those messages all have a field called `type` that can help you discriminate between them. The complete list of types and what they correspond to is given in the [documentation](https://gama-platform.org/wiki/next/HeadlessServer#messages-types). And on the python's side you can use the enum `MessageTypes` to test the type of a received message. \nHere is an example of a `message_handler` function that prints a personnalised message when a command has been executed successfully:\n```python\nasync def message_handler(message):\n    if \"type\" in message.keys() and message['type'] == MessageTypes.CommandExecutedSuccessfully.value:\n        print(\"congratulation, a command was executed successfully !\")\n    else:\n        print(\"other kind of message\", message)\n```\n**Notes:** \n * If you use the `MessageTypes` enum, don't forget to use the `value` attribute to compare it to strings\n * As explained before, `message_handler` **must** be `async` even if you don't use `await` inside\n \n#### Retrieving a command's answer\n\nIf you run your client purely asynchronous and have multiple simulations running at the same time, you will encounter the problem of retrieving which message corresponds to which command/simulation.\n\nFor the simulation outputs or errors, they simply include an `experiment_id` field that will tell you exactly to which experiment the message corresponds to.\nAnswers to commands include a `command` field, containing the entirety of the command it responds to. \n\nIn every command function, there is an optional parameter called `additional_data`, you can use it to store metadata about your command, for example an id, and use it to find to which precise command does an answer responds to because those additional data will also be stored in the `command` field of the answer.\n\nFor example here we run 3 identical load commands, and we want to have a special treatment for the second one only, so we give it a special id in the `additional-data` in order to find the corresponding answer in the `message-handler` function:\n```python\nimport asyncio\nfrom typing import Dict\n\nfrom gama_client.base_client import GamaBaseClient\n\nload_command_secret_id = 123\nother_id = 1\n\n\nasync def message_handler(message: Dict):\n    if \"command\" in message.keys() and \"my_secret_id\" in message['command'] and message['command'][\"my_secret_id\"] == load_command_secret_id:\n        print(\"answer for the load command we wanted to retrieve received:\", message)\n    else:\n        print(\"other kind of message\", message)\n\nasync def main():\n    client = GamaBaseClient(\"localhost\", 6868, message_handler)\n    await client.connect()\n\n    gaml_file = \"path/to/gaml/file\"\n    expriment = \"name of the experiment\"\n    # this is not the command we want to retrieve\n    await client.load(gaml_file, expriment, additional_data={\"my_secret_id\": other_id})\n\n    # this is the command we want to retrieve the answer to\n    await client.load(gaml_file, expriment, additional_data={\"my_secret_id\": load_command_secret_id})\n\n    # this is not the command we want to retrieve\n    await client.load(gaml_file, expriment, additional_data={\"my_secret_id\": other_id})\n\n    while True:\n        await asyncio.sleep(1)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n\n## Example code\nA complete working example is given in the `examples` directory, you just have to change the values of the variables `MY_SERVER_URL`, `MY_SERVER_PORT`, `GAML_FILE_PATH_ON_SERVER`, `EXPERIMENT_NAME` and `MY_EXP_INIT_PARAMETERS` to the one corresponding to your own gama-server and experiment to try it.\n \n \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2022 Baptiste Lesquoy  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gama-client",
    "package_url": "https://pypi.org/project/gama-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/gama-client/",
    "project_urls": {
      "Bug Tracker": "https://github.com/gama-platform/Gama-client-python/issues",
      "Homepage": "https://github.com/gama-platform/Gama-client-python"
    },
    "release_url": "https://pypi.org/project/gama-client/1.1.1/",
    "requires_dist": [
      "websockets~=10.3"
    ],
    "requires_python": ">=3.7",
    "summary": "A Gama client wrapper in python to interact with Gama server",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16414041,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61c4b6c6967da22e637ea7319dc74dd19eeeb420f1c91b721d01ab79c09ba61e",
          "md5": "9ae973c3c1d55eddb25131012022977a",
          "sha256": "8791d80634ac9f875ca7ac79cf09c3f47e7ab2a97a78479e38fed7febe9c390b"
        },
        "downloads": -1,
        "filename": "gama_client-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ae973c3c1d55eddb25131012022977a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5607,
        "upload_time": "2022-08-23T09:50:01",
        "upload_time_iso_8601": "2022-08-23T09:50:01.105257Z",
        "url": "https://files.pythonhosted.org/packages/61/c4/b6c6967da22e637ea7319dc74dd19eeeb420f1c91b721d01ab79c09ba61e/gama_client-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdce703c24ef42847ff940c366b4217d769bdf17d791d88b4587edb965e2b970",
          "md5": "2c168106d7f9d3af06883dc33a694fcc",
          "sha256": "cde335ba08b47488cf2d2cfc1aa5fdb1f95613e9523dcf4421593e3db6f5f689"
        },
        "downloads": -1,
        "filename": "gama_client-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2c168106d7f9d3af06883dc33a694fcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5635,
        "upload_time": "2022-08-23T09:50:03",
        "upload_time_iso_8601": "2022-08-23T09:50:03.054222Z",
        "url": "https://files.pythonhosted.org/packages/cd/ce/703c24ef42847ff940c366b4217d769bdf17d791d88b4587edb965e2b970/gama_client-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "649649f4ee724133b0c00285f3828f4ec2a3940ee0ffc3569a04ef75244086c5",
          "md5": "f591c731d4da3e2c5247d055460e655e",
          "sha256": "18dc33a6cafdcd8953bc4c41f1d7164d429c217696609fbb10721ada371cb4a2"
        },
        "downloads": -1,
        "filename": "gama_client-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f591c731d4da3e2c5247d055460e655e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8591,
        "upload_time": "2022-12-19T08:47:10",
        "upload_time_iso_8601": "2022-12-19T08:47:10.172114Z",
        "url": "https://files.pythonhosted.org/packages/64/96/49f4ee724133b0c00285f3828f4ec2a3940ee0ffc3569a04ef75244086c5/gama_client-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fb6a14acc7331c753d18bf753ee32ea58392e84252ee6b4e7721cbf2cb24619",
          "md5": "cc57f993c958ea71280b49b0b5f7e196",
          "sha256": "f4d2e3320fa7c70edf6cb430fb40f7f145b852f9502f29a8f7ef513f327e9dbc"
        },
        "downloads": -1,
        "filename": "gama_client-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc57f993c958ea71280b49b0b5f7e196",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8357,
        "upload_time": "2022-12-19T08:47:11",
        "upload_time_iso_8601": "2022-12-19T08:47:11.766047Z",
        "url": "https://files.pythonhosted.org/packages/5f/b6/a14acc7331c753d18bf753ee32ea58392e84252ee6b4e7721cbf2cb24619/gama_client-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a6488b617caa2750d6cc3775a9fe37a316ddea4f4b7517d81ffa6a9185e95ae",
          "md5": "8f7fd03d308480c8b3c623997234db0e",
          "sha256": "71f07217707c293f9423bb4a2e517a740ded72d29a763293a6f58a642b75f788"
        },
        "downloads": -1,
        "filename": "gama_client-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f7fd03d308480c8b3c623997234db0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9262,
        "upload_time": "2023-01-13T05:11:37",
        "upload_time_iso_8601": "2023-01-13T05:11:37.194697Z",
        "url": "https://files.pythonhosted.org/packages/3a/64/88b617caa2750d6cc3775a9fe37a316ddea4f4b7517d81ffa6a9185e95ae/gama_client-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a59e87ec81a82f4b967a8a7f56fd99481bca78b84815c202ba6a878fa543abe",
          "md5": "3086e1e286bbfe761d214be96dc3b7b4",
          "sha256": "23319d086b70937230cb088488e022463aaefa70d934b3322b833e4902593b7f"
        },
        "downloads": -1,
        "filename": "gama_client-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3086e1e286bbfe761d214be96dc3b7b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9907,
        "upload_time": "2023-01-13T05:11:40",
        "upload_time_iso_8601": "2023-01-13T05:11:40.719059Z",
        "url": "https://files.pythonhosted.org/packages/9a/59/e87ec81a82f4b967a8a7f56fd99481bca78b84815c202ba6a878fa543abe/gama_client-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a6488b617caa2750d6cc3775a9fe37a316ddea4f4b7517d81ffa6a9185e95ae",
        "md5": "8f7fd03d308480c8b3c623997234db0e",
        "sha256": "71f07217707c293f9423bb4a2e517a740ded72d29a763293a6f58a642b75f788"
      },
      "downloads": -1,
      "filename": "gama_client-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f7fd03d308480c8b3c623997234db0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9262,
      "upload_time": "2023-01-13T05:11:37",
      "upload_time_iso_8601": "2023-01-13T05:11:37.194697Z",
      "url": "https://files.pythonhosted.org/packages/3a/64/88b617caa2750d6cc3775a9fe37a316ddea4f4b7517d81ffa6a9185e95ae/gama_client-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a59e87ec81a82f4b967a8a7f56fd99481bca78b84815c202ba6a878fa543abe",
        "md5": "3086e1e286bbfe761d214be96dc3b7b4",
        "sha256": "23319d086b70937230cb088488e022463aaefa70d934b3322b833e4902593b7f"
      },
      "downloads": -1,
      "filename": "gama_client-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3086e1e286bbfe761d214be96dc3b7b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9907,
      "upload_time": "2023-01-13T05:11:40",
      "upload_time_iso_8601": "2023-01-13T05:11:40.719059Z",
      "url": "https://files.pythonhosted.org/packages/9a/59/e87ec81a82f4b967a8a7f56fd99481bca78b84815c202ba6a878fa543abe/gama_client-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}