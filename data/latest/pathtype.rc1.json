{
  "info": {
    "author": "Xavier Frenette",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pathtype: Validate paths in command line arguments\n===\n\n\nThe *pathtype* Python package makes it simple to validate paths in command line (CLI)\narguments. It's made to be used with the `argparse` argument parser. It can validate \nthe existence of the file, its permissions, its file name, file extension, etc. With \n*pathtype*, you keep path arguments validation inside the command line parsing logic,\naway from your core application code.\n\nUse it as the `type` argument in `parser.add_argument()` to automatically have a CLI \npath argument validated and returned as a `pathlib.Path` instance.\n\nIt works with Python 3.7+, both with Posix and Windows paths.\n\n**Example**\n\n```python\nimport argparse\nimport pathtype\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    # We use `pathtype.Path` as the `type` argument to validate that the --image \n    # argument is a readable image file (checks the file extension).\n    parser.add_argument(\n        \"--image\", required=True,\n        help=\"Image file to open (PNG, GIF or JPEG supported)\",\n        type=pathtype.Path(readable=True, name_matches_re=r\"\\.(png|jpe?g|gif)$\")\n    )\n \n    # Path validations are done automatically by calling the next line, no need to \n    # add code to validate that the path can be read and that it has the correct \n    # extension. \n    args = parser.parse_args()\n    \n    # args.image is an instance of pathlib.Path. And since using `readable` implies \n    # `exists`, we know the file already exists and is readable by the current user.\n    print(args.image.exists())\n    # True\n```\n\n# Installation\n\n*pathtype* requires Python 3.7+.\n\nInstall with pip:\n\n```shell\npip install pathtype\n```\n\n# Usage\n\nUsing `pathtype.Path` without any arguments simply converts the CLI argument to a \n`pathlib.Path` instance:\n\n```python\nparser.add_argument(\n  \"my_arg\", type=pathtype.Path()\n)\n\nargs = parser.parse_args()\nprint(type(args.my_arg))  # >>> <class 'pathlib.PosixPath'>\n```\n\nBut you will generally also want to run some validations on the properties of the path.\n\n## Predefined validations (basic usage)\n\nMultiple validations are available to have the path validated during CLI arguments \nparsing. If a validation fails, argument parsing will fail in the usual manner. If \nit succeeds, the argument will be converted to a `pathlib.Path` instance.\n\n| To validate that...                                                      | use ...                                                        |\n|--------------------------------------------------------------------------|----------------------------------------------------------------|\n| the path points to an existing file or directory                         | `pathtype.Path(exists=True)`                                   |\n| the path does NOT point to an existing file or directory                 | `pathtype.Path(not_exists=True)`                               |\n| the path's parent directory exists                                       | `pathtype.Path(parent_exists=True)`                            |\n| the file can be created (*)                                              | `pathtype.Path(creatable=True)`                                |\n| the file can be created or, if it already exists, it's writable (*)      | `pathtype.Path(writable_or_creatable=True)`                    |\n| the current user has some permissions on the file or directory (*)       | `pathtype.Path(readable=True, writable=True, executable=True)` |\n| the *file name* (the last part of the path) matches a regular expression | `pathtype.Path(name_matches_re=r\"\\.jpe?g$\")`                   |\n| the *file name* matches a glob pattern                                   | `pathtype.Path(name_matches_glob=\"*.pkl\")`                     |\n| the *full* (absolute and normalized) path matches a regular expression   | `pathtype.Path(path_matches_re=\"/home/.+/logs/?$\")`            |\n| the *full* path matches a glob pattern                                   | `pathtype.Path(path_matches_glob=\"/home/*/*.pkl\")`             |\n\n(*) All permission related validations use the current user's permission. For example,\nthe `creatable` validation validates that the user running your code has permissions to \ncreate the file. Ignored on Windows.\n\n### Combining validations\n\nYou can combine multiple validations together.\n\n**Example**\n\nValidate that the path is a text file (*.txt) that doesn't exist yet, but that the \ncurrent user has permissions to create the file (implies that the parent directory \nexists):\n\n```python\nparser.add_argument(\n    \"--file\",\n    type=pathtype.Path(not_exists=True, creatable=True, name_matches_glob=\"*.txt\")\n)\nargs = parser.parse_args([\"--file\", \"path/to/my_file.txt\"])\n```\n\n# Custom validation (advanced usage)\n\nYou can also create your own custom validations (or \"validators\") and use them alone, \nor in combination with the predefined validations.\n\n## Making a custom validator\n\nA custom validator is a callable object (generally a function) that has the \nfollowing signature:\n\n```python\ndef validator(path: pathlib.Path, arg: str) -> None\n```\n\nThe validator must accept two arguments, `path` and `arg`, that are two views of the \noriginal CLI argument. If the original CLI argument was `\"../path/to/file\"`, then\n`path = pathlib.Path(\"../path/to/file\")` and `arg = \"../path/to/file\"`.\n\nIf the validator considers that its validation failed, it must raise one of the\nfollowing exception:\n\n* `argparse.ArgumentTypeError`\n* `TypeError`\n* `ValueError`\n\nRaising any other type of error won't be nicely handled by ``argparse``.\n\nIf its validation passes, it must end without returning anything.\n\n## Using a custom validator\n\nYou use the validator by passing it to the `validator` parameter of `pathtype.Path()`.\n\nYou can also pass an iterable (ex: a list) of validators, and they will be executed \nsequentially.\n\n**Example**\n\nThe next example creates two (strange) custom validators: one that validates that the \nfile name contains the letter \"a\", the other validates that the file name doesn't \ncontain the letter \"b\". The command line argument *--path-1* uses only the first \nvalidator, the command line argument *--path-2* uses both.\n\n```python\ndef must_have_a(path: pathlib.Path, arg: str):\n    \"\"\"Custom validator that fails if the file name doesn't contain the letter 'a'.\"\"\"\n    if \"a\" not in path.name:\n        raise argparse.ArgumentTypeError('The file name must have the letter \"a\"')\n\ndef must_not_have_b(path: pathlib.Path, arg: str):\n    \"\"\"Custom validator that fails if the file name contains the letter 'b'.\"\"\"\n    if \"b\" in path.name:\n        raise argparse.ArgumentTypeError('The file name must NOT have the letter \"b\"')\n\n    \nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"--path-1\",\n    type=pathtype.Path(validator=must_have_a)\n)\nparser.add_argument(\n    \"--path-2\",\n    type=pathtype.Path(validator=[must_have_a, must_not_have_b])\n)\n```\n\n## Using predefined validations with a custom validator\n\nYou can still use any of the predefined validations (as presented in the \"basic \nusage\" section) when using a custom validator.\n\n**Example**\n\nThe following would validate the existence of the file and run a custom validator.\n\n```python\nparser.add_argument(\n    ...\n    type=pathtype.Path(validator=must_not_have_b, exists=True)\n)\n```\n\n**Warning:** Validators in `validator` are always run *after* any of the predefined \nvalidations. So in the previous example, the existence of the file is validated \n*first* and only then the custom validator is executed.\n\nIf you need to change the order, you would have to remove `exists=True` and instead\nadd an \"existence\" validator to your list of custom validators, in the order you wish.\n\nBut you don't need to recreate validators for any of the predefined validations. They \nare all available in the `pathtype.validation` module. Just instantiate a class and \nuse it like a custom validator.\n\n**Example**\n\nThe following changes the order of validation of the previous example: first the \ncustom validator is executed before validating the existence. The latter validator is\nsimply an instance of `pathtype.validation.Exists`.\n\n```python\nfrom pathtype.validation import Exists\n\nexist_validator = Exists()\n\nparser.add_argument(\n    ...\n    type=pathtype.Path(validator=[must_not_have_b, exist_validator])\n)\n```\n\n## Logical combination of validators\n\nThe classes `pathtype.validation.Any` and `pathtype.validation.All` allow you to create\nvalidators that are logical combinations of other validators (i.e. *OR* or *AND* \nexpressions).\n\n* `Any`: an instance of this class, initialized with a sequence of validators, is a \n  validator that will pass if *any* of its validators passes, and fail if they all \n  fail. Equivalent to an *OR* expression.\n* `All`: Similarly, an instance of this class is a validator that will pass if *all* \n  of its validators pass, and fails if *any* fails. Equivalent to an *AND* expression.\n\nThose two classes can be used to create complex validation trees.\n\n**Example**\n\nWe create a validator that validates that the file name contains \"a\" *OR* that it \ndoesn't contain \"b\":\n\n```python\nfrom pathtype.validation import Any\n\nor_validator = Any(must_have_a, must_not_have_b)\n\nparser.add_argument(\n    ...\n    type=pathtype.Path(validator=or_validator)\n)\n```\n\n## Complete custom validator example\n\nWe want a custom validator that validates that the path is inside the current user's \nhome directory:\n\n```python\nimport os.path\nimport pathlib\nimport argparse\nimport pathtype\n\n\ndef is_inside_home_dir(path: pathlib.Path, arg: str):\n    \"\"\"Validate that the path is inside the current user's home directory.\"\"\"\n    expanded_path = os.path.expanduser(path)\n    resolved_path = pathlib.Path(os.path.abspath(expanded_path))\n    user_dir = pathlib.Path.home()\n    # We check that `resolved_path` starts with the same directories as `user_dir`\n    is_child = resolved_path.parts[:len(user_dir.parts)] == user_dir.parts\n    \n    if not is_child:\n        raise argparse.ArgumentTypeError(\n            f\"path ({resolved_path}) is not in the user's home directory ({user_dir})\"\n        )\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--path\",\n        type=pathtype.Path(validator=is_inside_home_dir)\n    )\n\n    # The following line won't raise any error\n    args = parser.parse_args([\"--path\", \"~/valid/path\"])\n    print(repr(args.path))\n    # PosixPath('~/valid/path')\n\n    # The following line will fail since the path is not inside the user's directory\n    args = parser.parse_args([\"--path\", \"/at-root\"])\n    # Fails with this message:\n    #   usage: example.py [-h] [--path PATH]\n    #   example.py: error: argument --path: path (/at-root) is not in the user's home directory (/home/user)\n```\n\n# Notes\n\n* All paths instances are actually\n  [concrete paths](https://docs.python.org/3/library/pathlib.html#concrete-paths) \n  (i.e. created with `pathlib.Path()`), \n  and not pure paths (i.e. `pathlib.PurePath()`). This means that if ran on Windows, \n  the path argument will be converted to an instance of `pathlib.WindowsPath`, and on \n  other systems it'll be converted to an instance of `pathlib.PosixPath`. Behavior \n  may change on different OS's, so it's best not to parse argument across OS's.\n* Validations are run once, during argument parsing. Always remember that, by the \n  time you actually use the path, some properties of the file may have changed. For \n  example, let's say you use `pathtype.Path(exists=True)`. Although the file may \n  exist at the time of argument parsing, another process may delete the file by the \n  time you actually want to access it. So only use this package as a user-friendly \n  \"first check\".\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xfrenette/pathtype",
    "keywords": "argparse,argument parsing,path,pathlib,cli,command line",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pathtype",
    "package_url": "https://pypi.org/project/pathtype/",
    "platform": null,
    "project_url": "https://pypi.org/project/pathtype/",
    "project_urls": {
      "Homepage": "https://github.com/xfrenette/pathtype"
    },
    "release_url": "https://pypi.org/project/pathtype/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Easily validate paths in command line arguments. To be used with argparse.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14456153,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c9fc1c143f572899da15217d3ccb64b470f5982e3cb70b2157bf2cdaa35e270",
          "md5": "044eee6b96b88c7ab3dcf8f3991cf5be",
          "sha256": "ae571cda022344966ed73512586bda5f126b48661a1d127a162a8d4674b9bdb9"
        },
        "downloads": -1,
        "filename": "pathtype-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "044eee6b96b88c7ab3dcf8f3991cf5be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14076,
        "upload_time": "2022-07-16T20:43:16",
        "upload_time_iso_8601": "2022-07-16T20:43:16.014000Z",
        "url": "https://files.pythonhosted.org/packages/0c/9f/c1c143f572899da15217d3ccb64b470f5982e3cb70b2157bf2cdaa35e270/pathtype-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a32538fe0ff6f98941c9171749f8f7883682f3173fdd4e7ba663f0bec8a2d0b",
          "md5": "a59ee1ec775549edae458300be0718c1",
          "sha256": "16dbd266c32c73d1864ff1926d7765db7937eccb5af179a9f2e394ede436c5c2"
        },
        "downloads": -1,
        "filename": "pathtype-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a59ee1ec775549edae458300be0718c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 21814,
        "upload_time": "2022-07-16T20:43:17",
        "upload_time_iso_8601": "2022-07-16T20:43:17.763283Z",
        "url": "https://files.pythonhosted.org/packages/1a/32/538fe0ff6f98941c9171749f8f7883682f3173fdd4e7ba663f0bec8a2d0b/pathtype-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c9fc1c143f572899da15217d3ccb64b470f5982e3cb70b2157bf2cdaa35e270",
        "md5": "044eee6b96b88c7ab3dcf8f3991cf5be",
        "sha256": "ae571cda022344966ed73512586bda5f126b48661a1d127a162a8d4674b9bdb9"
      },
      "downloads": -1,
      "filename": "pathtype-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "044eee6b96b88c7ab3dcf8f3991cf5be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14076,
      "upload_time": "2022-07-16T20:43:16",
      "upload_time_iso_8601": "2022-07-16T20:43:16.014000Z",
      "url": "https://files.pythonhosted.org/packages/0c/9f/c1c143f572899da15217d3ccb64b470f5982e3cb70b2157bf2cdaa35e270/pathtype-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a32538fe0ff6f98941c9171749f8f7883682f3173fdd4e7ba663f0bec8a2d0b",
        "md5": "a59ee1ec775549edae458300be0718c1",
        "sha256": "16dbd266c32c73d1864ff1926d7765db7937eccb5af179a9f2e394ede436c5c2"
      },
      "downloads": -1,
      "filename": "pathtype-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a59ee1ec775549edae458300be0718c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 21814,
      "upload_time": "2022-07-16T20:43:17",
      "upload_time_iso_8601": "2022-07-16T20:43:17.763283Z",
      "url": "https://files.pythonhosted.org/packages/1a/32/538fe0ff6f98941c9171749f8f7883682f3173fdd4e7ba663f0bec8a2d0b/pathtype-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}