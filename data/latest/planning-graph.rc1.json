{
  "info": {
    "author": "Debby Nirwan",
    "author_email": "debby_nirwan@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# planning-graph\nPlanning Graph for AI Planning in Python\n\n## About\nThis library implements Planning Graph and its Planner that can be used to solve\nSTRIPS-like AI Planning Problems using PDDL.\n\nWhen passed the domain and problem representations in PDDL, the library returns\nSolution Plan if any.\n\n## Documentation\nIf you are interested in understanding the Planning Graph, please read my post\nat https://towardsdatascience.com/improving-classical-ai-planning-complexity-with-planning-graph-c63d47f87018\n\n## Installation\n```commandline\npip install planning-graph\n```\nor, you can clone this repository\n\n## Example\n\n### PDDL for representing planning domain and problem\nThe Dock-Worker Robots Domain and Problem are provided in the [domain](domain) directory.\nYou can create your own PDDL files, or you can download from the internet.\n\n### Create a Planning Graph from PDDL\n```python\nfrom planning_graph.planning_graph import PlanningGraph\n\n\nplanning_graph = PlanningGraph('domain/dock-worker-robot-domain.pddl', \n                               'domain/dock-worker-robot-problem.pddl')\n\ngraph = planning_graph.create(max_num_of_levels=10)\n```\nplanning_graph.create() returns a Graph object if the goal state is achieved, or \nthe maximum number of levels have been reached.\n\n### Create visualization\nIf you want to visualize the generated graph you can set visualize=True, by default\nit is set to False.\n```python\nfrom planning_graph.planning_graph import PlanningGraph\n\n\nplanning_graph = PlanningGraph('domain/dock-worker-robot-domain.pddl', \n                               'domain/dock-worker-robot-problem.pddl',\n                               visualize=True)\n\ngraph = planning_graph.create(max_num_of_levels=10)\ngraph.visualize_png(\"generated_graph.png\")\n```\nthe result looks like the following:\n![alt text](domain/planning_graph.png)\n\n### Find a Solution Plan\nTo find a solution plan you simply have to create a Planner and pass the arguments\nit requires.\n```python\nfrom planning_graph.planning_graph import PlanningGraph\nfrom planning_graph.planning_graph_planner import GraphPlanner\n\n\nplanning_graph = PlanningGraph('domain/dock-worker-robot-domain.pddl', \n                               'domain/dock-worker-robot-problem.pddl')\n\ngraph = planning_graph.create(max_num_of_levels=10)\ngoal = planning_graph.goal\ngraph_planner = GraphPlanner()\nlayered_plan = graph_planner.plan(graph, goal)\n```\nit returns a layered plan if the solution exists, otherwise, it returns None.\n\n## pddlpy\npddlpy included in this repo is the work of HernÃ¡n M. Foffani, it is copied from [here.](https://github.com/hfoffani/pddl-lib)\nIt is copied because it won't work when installed as a package due to wrong version of\nantlr4 package. There are no changes made to it.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/debbynirwan/planning_graph",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "planning-graph",
    "package_url": "https://pypi.org/project/planning-graph/",
    "platform": "Python 3",
    "project_url": "https://pypi.org/project/planning-graph/",
    "project_urls": {
      "Homepage": "https://github.com/debbynirwan/planning_graph"
    },
    "release_url": "https://pypi.org/project/planning-graph/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Planning Graph for AI Planning",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9369206,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f06201c214a2faf7caa7359ef08168a19d6745f87e928c8a12c1fde4a3d7900",
          "md5": "a82417ff046909ed2372a3214f822a1e",
          "sha256": "022b709bfd4a4870d9c4f5ecb0391aeb8a3fda1a69d279dc65db0471058747f0"
        },
        "downloads": -1,
        "filename": "planning_graph-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a82417ff046909ed2372a3214f822a1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 50502,
        "upload_time": "2021-02-10T00:32:20",
        "upload_time_iso_8601": "2021-02-10T00:32:20.762360Z",
        "url": "https://files.pythonhosted.org/packages/7f/06/201c214a2faf7caa7359ef08168a19d6745f87e928c8a12c1fde4a3d7900/planning_graph-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "574c657b3cb1f051af24db38407e42aee99c3caabf6ad3ff7487a5aca8446275",
          "md5": "40fe4996c8ffa362e778fc06e5795926",
          "sha256": "53d6a58fef2c0fbf00a1b1a5d7945e98ec7a2b1a1e38463b6bdc5d54a01b2a3b"
        },
        "downloads": -1,
        "filename": "planning-graph-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "40fe4996c8ffa362e778fc06e5795926",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43474,
        "upload_time": "2021-02-10T00:32:21",
        "upload_time_iso_8601": "2021-02-10T00:32:21.937090Z",
        "url": "https://files.pythonhosted.org/packages/57/4c/657b3cb1f051af24db38407e42aee99c3caabf6ad3ff7487a5aca8446275/planning-graph-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f06201c214a2faf7caa7359ef08168a19d6745f87e928c8a12c1fde4a3d7900",
        "md5": "a82417ff046909ed2372a3214f822a1e",
        "sha256": "022b709bfd4a4870d9c4f5ecb0391aeb8a3fda1a69d279dc65db0471058747f0"
      },
      "downloads": -1,
      "filename": "planning_graph-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a82417ff046909ed2372a3214f822a1e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 50502,
      "upload_time": "2021-02-10T00:32:20",
      "upload_time_iso_8601": "2021-02-10T00:32:20.762360Z",
      "url": "https://files.pythonhosted.org/packages/7f/06/201c214a2faf7caa7359ef08168a19d6745f87e928c8a12c1fde4a3d7900/planning_graph-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "574c657b3cb1f051af24db38407e42aee99c3caabf6ad3ff7487a5aca8446275",
        "md5": "40fe4996c8ffa362e778fc06e5795926",
        "sha256": "53d6a58fef2c0fbf00a1b1a5d7945e98ec7a2b1a1e38463b6bdc5d54a01b2a3b"
      },
      "downloads": -1,
      "filename": "planning-graph-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "40fe4996c8ffa362e778fc06e5795926",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 43474,
      "upload_time": "2021-02-10T00:32:21",
      "upload_time_iso_8601": "2021-02-10T00:32:21.937090Z",
      "url": "https://files.pythonhosted.org/packages/57/4c/657b3cb1f051af24db38407e42aee99c3caabf6ad3ff7487a5aca8446275/planning-graph-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}