{
  "info": {
    "author": "Robert Sharp",
    "author_email": "webmaster@sharpdesigndigital.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Iterator Algorithms\n#### Robert Sharp, Library Author\n\n\nIA is a collection of iterator algorithms for Python3, inspired by the C++ \nalgorithms library.\n\nMany of the algorithms are the same as those found in the standard library, but \nextended in some way. For example: the IA.symmetric_difference function can \naccept an arbitrary number of sets as input. For comparison, the builtin set \nmethod of the same name can only compare 2 sets. The abstraction is raised from - \n\"What's not in both sets.\" to \"What's not in all sets.\" In both cases the result\nis the exact opposite of the intersection of the same sets.\n\n### Quick Installation:\n```bash\n$ python3 -m pip install IteratorAlgorithms\n```\n\n### Run Test Suite:\n```bash\n$ python3 -m IteratorAlgorithms\n# Verbose Test Output\n...\n102 tests in 32 items.\n102 passed and 0 failed.\nTest passed.\n```\nTests are verbose by default. Tests are only run when the module is executed as a script, as above.\n\n### Standard Import:\n```bash\n$ python3\n>>> import IteratorAlgorithms as ia\n# No Test Output. Ready for work!\n>>>\n```\nNone of the standard import styles should trigger the tests.\n\n### Help Features\nAll the features of this module have full help support built in.\n```bash\n$ python3\n>>> from IteratorAlgorithms import fork\n>>> help(fork)\n```\n```\nHelp on function fork in module IteratorAlgorithms:\n\nfork(array: Iterable, forks: int = 2) -> tuple\n    Fork\n    Iterator Duplicator. Same as itertools.tee but with a better name.\n\n    # DocTest:\n    >>> it = iter(range(10))\n    >>> a, b, c = fork(it, 3)\n    >>> list(c)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> a == b\n    False\n    >>> list(a) == list(b)\n    True\n\n    @param array: Iterable to be forked.\n    @param forks: Optional Integer. Default is 2. Represents the number of forks.\n    @return: tuple of N Iterators where N is the number of forks.\n\n```\n\n## Table of Contents:\n- Generators\n    - iota\n    - generate\n    - generate_n\n- Expansions\n    - fork\n    - exclusive_scan\n    - inclusive_scan\n- Transforms\n    - transform\n    - adjacent_difference\n    - partial_sum\n- Permutations\n    - partition\n- Reductions\n    - reduce\n    - accumulate\n    - product\n    - min_max\n- Queries\n    - all_of\n    - any_of\n    - none_of\n- Transform & Reduction\n    - transform_reduce\n    - inner_product\n    - matrix_multiply\n- Multidimensional Reductions\n    - zip_transform\n    - transposed_sums\n- Multi-Set Operations\n    - union\n    - intersection\n    - difference\n    - symmetric_difference\n\n---\n\n## Generators\n\n### `IteratorAlgorithms.iota`\n```\nHelp on function iota in module IteratorAlgorithms:\n\niota(start, *, stop=None, step=1, stride=0) -> Iterator\n    Iota\n    Iterator of a given range with grouping size equal to the stride.\n    If stride is zero - a single dimensional iterator is returned.\n\n    DocTests:\n    >>> list(iota(10))\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> list(iota(start=1, stop=11))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> list(iota(start=2, stop=21, step=2))\n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    >>> list(iota(start=2, stop=21, step=2, stride=2))\n    [(2, 4), (6, 8), (10, 12), (14, 16), (18, 20)]\n\n    @param start: Beginning. Required.\n    @param stop: Ending. Default is None.\n    @param step: Stepping. Default is one.\n    @param stride: Size of groupings. Default is zero.\n\n```\n### `IteratorAlgorithms.generate`\n```\nHelp on function generate in module IteratorAlgorithms:\n\ngenerate(func: Callable, *args, **kwargs) -> Iterator\n    Generate\n    Infinite iterator of a callable with arguments.\n\n    DocTests:\n    >>> counter = itertools.count(1)\n    >>> gen = generate(next, counter)\n    >>> list(next(gen) for _ in range(10))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    @param func: Callable.\n    @param args: Positional arguments for the functor.\n    @param kwargs: Keyword arguments for the functor.\n\n```\n### `IteratorAlgorithms.generate_n`\n```\nHelp on function generate_n in module IteratorAlgorithms:\n\ngenerate_n(n: int, func: Callable, *args, **kwargs) -> Iterator\n    Generate N\n    Abstract generator function. Finite.\n\n    DocTests:\n    >>> counter = itertools.count(1)\n    >>> list(generate_n(10, next, counter))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    @param n: Number of elements to generate.\n    @param func: Callable.\n    @param args: Positional arguments for the functor.\n    @param kwargs: Keyword arguments for the functor.\n\n```\n\n## Expansions\n\n### `IteratorAlgorithms.fork`\n```\nHelp on function fork in module IteratorAlgorithms:\n\nfork(array: Iterable, forks: int = 2) -> Iterator\n    Fork\n    Iterator Duplicator. Same as itertools.tee but with a better name.\n\n    DocTests:\n    >>> it = iter(range(10))\n    >>> a, b, c = fork(it, 3)\n    >>> list(c)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> a == b\n    False\n    >>> list(a) == list(b)\n    True\n\n    @param array: Iterable to be forked.\n    @param forks: Optional Integer. Default is 2. Represents the number of forks.\n    @return: Tuple of N Iterators where N is the number of forks.\n\n```\n### `IteratorAlgorithms.inclusive_scan`\n```\nHelp on function inclusive_scan in module IteratorAlgorithms:\n\ninclusive_scan(array: Iterable, init=None) -> Iterator\n    Inclusive Scan -> Adjacent Pairs\n\n    DocTests:\n    >>> list(inclusive_scan(range(1, 10)))\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n    >>> list(inclusive_scan(range(1, 10), 0))\n    [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n\n    @param array: Iterable to be scanned.\n    @param init: Optional initial value. Default is None.\n    @return: Iterator of Pairs.\n\n```\n### `IteratorAlgorithms.exclusive_scan`\n```\nHelp on function exclusive_scan in module IteratorAlgorithms:\n\nexclusive_scan(array: Iterable, init=None) -> Iterator\n    Exclusive Scan -> Adjacent Pairs\n    Like inclusive_scan, but ignores the last value.\n\n    DocTests:\n    >>> list(exclusive_scan(range(1, 10)))\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\n    >>> list(exclusive_scan(range(1, 10), 0))\n    [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\n\n    @param array: Iterable to be scanned.\n    @param init: Initial Value.\n    @return: Iterator of Pairs.\n\n```\n\n## Transforms\n\n### `IteratorAlgorithms.transform`\n```\nHelp on function transform in module IteratorAlgorithms:\n\ntransform(array: Iterable, func: Callable) -> Iterator\n    Transform\n    Similar to map but with a reversed signature.\n\n    DocTests:\n    >>> list(transform(range(10), add_one))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> list(transform(range(10), square))\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n    @param array: Iterable of Values.\n    @param func: Unary Functor. F(x) -> Value\n    @return: Iterator of transformed Values.\n\n```\n### `IteratorAlgorithms.adjacent_difference`\n```\nHelp on function adjacent_difference in module IteratorAlgorithms:\n\nadjacent_difference(array: Iterable) -> Iterator\n    Adjacent Difference\n    Calculates the difference between adjacent pairs.\n    This is the opposite of Partial Sum.\n    The first iteration compares with zero for proper offset.\n\n    DocTests:\n    >>> list(adjacent_difference(range(1, 10)))\n    [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    >>> list(adjacent_difference(partial_sum(range(1, 10))))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> list(adjacent_difference(partial_sum(range(-10, 11, 2))))\n    [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n\n    @param array: Iterable of Numeric Values.\n    @return: Iterator of adjacent differences.\n\n```\n### `IteratorAlgorithms.partial_sum`\n```\nHelp on function partial_sum in module IteratorAlgorithms:\n\npartial_sum(array: Iterable) -> Iterator\n    Partial Sum\n    Calculates the sum of adjacent pairs.\n    This is the opposite of Adjacent Difference.\n\n    DocTests:\n    >>> list(partial_sum(range(1, 10)))\n    [1, 3, 6, 10, 15, 21, 28, 36, 45]\n    >>> list(partial_sum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    @param array: Iterable of Numeric Values.\n    @return: Iterator of adjacent sums.\n\n```\n\n## Permutations\n\n### `IteratorAlgorithms.partition`\n```\nHelp on function partition in module IteratorAlgorithms:\n\npartition(array: Iterable, predicate: Callable) -> Iterator\n    Stable Partition\n    Arranges all the elements of a group such that any that return true\n        when passed to the predicate will be at the front, and the rest will be\n        at the back. The size of the output iterator will be the same as the\n        size of the input iterable.\n\n    DocTests:\n    >>> list(partition(range(1, 10), is_even))\n    [2, 4, 6, 8, 1, 3, 5, 7, 9]\n    >>> list(partition(range(1, 10), is_odd))\n    [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n    @param array: Iterable of values to be partitioned.\n    @param predicate: Unary functor. F(x) -> bool\n    @return: Partitioned Iterator.\n\n```\n\n## Reductions\n\n### `IteratorAlgorithms.reduce`\n```\nHelp on function reduce in module IteratorAlgorithms:\n\nreduce(array: Iterable, func: Callable, initial=None)\n    Reduce from functools\n    Similar to accumulate but allows any binary functor and an initial value.\n\n    DocTests:\n    >>> reduce(range(1, 5), operator.add)\n    10\n    >>> reduce(range(1, 5), operator.add, 100)\n    110\n    >>> reduce(range(1, 5), operator.mul)\n    24\n    >>> reduce(range(1, 5), operator.mul, 0)\n    0\n\n    @param array: Iterable of Values to be reduced.\n    @param func: Binary Functor.\n    @param initial: Initial value. Typically, 0 for add or 1 for multiply.\n    @return: Reduced Value.\n\n```\n### `IteratorAlgorithms.accumulate`\n```\nHelp on function accumulate in module IteratorAlgorithms:\n\naccumulate(array: Iterable, func: Callable = <built-in function add>, initial=None) -> Iterator\n    Accumulate from itertools\n    Returns the resulting list from appling the functor to pairs of previous\n    result and each next value.\n\n    DocTests:\n    >>> list(accumulate([1, 1, 1]))\n    [1, 2, 3]\n    >>> list(accumulate([1, 2, 3]))\n    [1, 3, 6]\n    >>> list(accumulate([1, 1, 1], operator.sub, 10))\n    [10, 9, 8, 7]\n\n    @param initial: Initial Value. `None` by default.\n    @param func: Binary Functor. `operator.add` by default.\n    @param array: Iterable of Values\n    @return: Iterator of Accumulated Values\n\n```\n### `IteratorAlgorithms.product`\n```\nHelp on function product in module IteratorAlgorithms:\n\nproduct(array: Iterable)\n    Product\n    Reduce with multiply.\n    For counting numbers from 1 to N: returns the factorial of N.\n\n    DocTests:\n    >>> product(range(1, 5))\n    24\n    >>> product(range(5, 10))\n    15120\n\n    @param array: Iterable of Values to be reduced.\n    @return: Product of all elements multiplied together.\n\n```\n### `IteratorAlgorithms.min_max`\n```\nHelp on function min_max in module IteratorAlgorithms:\n\nmin_max(array: Iterable) -> Iterator\n    Min & Max Element\n\n    DocTests:\n    >>> tuple(min_max(range(1, 10)))\n    (1, 9)\n    >>> tuple(min_max([100, 42, 69, 1]))\n    (1, 100)\n\n    @param array: Iterable of Numeric Values\n    @return: Tuple(Minimum, Maximum)\n\n```\n### `IteratorAlgorithms.star_sum`\n```\nHelp on function star_sum in module IteratorAlgorithms:\n\nstar_sum(*args)\n    Star Sum: Add All Args\n    Similar to accumulate, but takes an arbitrary number of arguments.\n\n    DocTests:\n    >>> star_sum(1)\n    1\n    >>> star_sum(1, 2)\n    3\n    >>> star_sum(1, 2, 3)\n    6\n    >>> star_sum(1, 2, 3, 4)\n    10\n\n    @param args: Numbers to be summed.\n    @return: Sum of all arguments.\n\n```\n### `IteratorAlgorithms.star_product`\n```\nHelp on function star_product in module IteratorAlgorithms:\n\nstar_product(*args)\n    Star Product: Multiply All Args\n    Similar to product, but takes an arbitrary number of arguments.\n\n    DocTests:\n    >>> star_product(0, 42)\n    0\n    >>> star_product(3, 3, 3)\n    27\n    >>> star_product(1, 2, 3, 4)\n    24\n\n    @param args: Numbers to be multiplied.\n    @return: Product of all arguments.\n\n```\n\n## Queries\n\n### `IteratorAlgorithms.all_of`\n```\nHelp on function all_of in module IteratorAlgorithms:\n\nall_of(array: Iterable, predicate: Callable) -> bool\n    All of These\n\n    DocTests:\n    >>> all_of([], is_even)\n    True\n    >>> all_of([2, 4, 6], is_even)\n    True\n    >>> all_of([1, 4, 6], is_even)\n    False\n    >>> all_of([1, 3, 5], is_even)\n    False\n\n    @param array: Iterable to inspect.\n    @param predicate: Callable. f(x) -> bool\n    @return: Boolean.\n\n```\n### `IteratorAlgorithms.any_of`\n```\nHelp on function any_of in module IteratorAlgorithms:\n\nany_of(array: Iterable, predicate: Callable) -> bool\n    Any of These\n\n    DocTests:\n    >>> any_of([], is_even)\n    False\n    >>> any_of([2, 4, 6], is_even)\n    True\n    >>> any_of([1, 4, 6], is_even)\n    True\n    >>> any_of([1, 3, 5], is_even)\n    False\n\n    @param array: Iterable to inspect.\n    @param predicate: Callable. f(x) -> bool\n    @return: Boolean.\n\n```\n### `IteratorAlgorithms.none_of`\n```\nHelp on function none_of in module IteratorAlgorithms:\n\nnone_of(array: Iterable, predicate: Callable) -> bool\n    None Of These\n\n    DocTests:\n    >>> none_of([], is_even)\n    True\n    >>> none_of([2, 4, 6], is_even)\n    False\n    >>> none_of([1, 4, 6], is_even)\n    False\n    >>> none_of([1, 3, 5], is_even)\n    True\n\n    @param array: Iterable to inspect.\n    @param predicate: Callable. f(x) -> bool\n    @return: Boolean.\n\n```\n\n## Transform & Reduce\n\n### `IteratorAlgorithms.transform_reduce`\n```\nHelp on function transform_reduce in module IteratorAlgorithms:\n\ntransform_reduce(lhs: Iterable, rhs: Iterable, transformer: Callable, reducer: Callable)\n    Transform Reduce\n    Pairwise transform and then reduction across all results.\n\n    DocTests:\n    >>> transform_reduce(range(1, 6), range(1, 6), operator.mul, sum)\n    55\n    >>> transform_reduce(range(1, 6), range(1, 6), operator.add, product)\n    3840\n\n    @param lhs: Left Iterator\n    @param rhs: Right Iterator\n    @param transformer: Binary Functor F(x, y) -> Value\n    @param reducer: Reduction Functor F(Iterable) -> Value\n    @return: Reduced Value\n\n```\n### `IteratorAlgorithms.inner_product`\n```\nHelp on function inner_product in module IteratorAlgorithms:\n\ninner_product(lhs: Iterable, rhs: Iterable)\n    Inner Product\n    Performs pairwise multiplication across the iterables,\n        then returns the sum of the products.\n\n    DocTests:\n    >>> inner_product(range(1, 6), range(1, 6))\n    55\n    >>> inner_product(range(11), range(11))\n    385\n\n    @param lhs: Left Iterator\n    @param rhs: Right Iterator\n    @return: Sum of the products.\n\n```\n\n## Multidimensional Reductions\n\n### `IteratorAlgorithms.zip_transform`\n```\nHelp on function zip_transform in module IteratorAlgorithms:\n\nzip_transform(transducer: Callable, *args: Iterable) -> Iterator\n    Zip Transform\n    The transducer should take the same number of arguments as the number of\n    iterators passed. Each iteration will call the transducer with the ith element\n    of each iterable. F(a[i], b[i], c[i]...) ...\n\n    DocTests:\n    >>> l1 = (0, 1, 2, 3)\n    >>> l2 = (8, 7, 6, 5)\n    >>> l3 = (1, 1, 1, 1)\n    >>> list(zip_transform(star_sum, []))\n    []\n    >>> list(zip_transform(star_sum, l1))\n    [0, 1, 2, 3]\n    >>> list(zip_transform(star_sum, l1, l2))\n    [8, 8, 8, 8]\n    >>> list(zip_transform(star_sum, l1, l2, l3))\n    [9, 9, 9, 9]\n\n    @param transducer: Callable\n    @param args: Any number of iterables.\n    @return: Iterator of values from the transducer.\n\n```\n### `IteratorAlgorithms.transposed_sums`\n```\nHelp on function transposed_sums in module IteratorAlgorithms:\n\ntransposed_sums(*args: Iterable) -> Iterator\n    Transposed Sums - Column Sums\n    The size of the output iterator will be the same as\n        the smallest input iterator.\n\n    DocTests:\n    >>> l1 = (0, 1, 2, 3)\n    >>> l2 = (8, 7, 6, 5)\n    >>> l3 = (1, 1, 1, 1)\n    >>> list(transposed_sums(l1, l2, l3))\n    [9, 9, 9, 9]\n\n    @param args: Arbitrary number of Iterators of numeric values.\n    @return: Iterator of transposed sums aka column sums.\n\n```\n\n## Multi-Set Operations\n\n### `IteratorAlgorithms.union`\n```\nHelp on function union in module IteratorAlgorithms:\n\nunion(*args: set) -> set\n    Multiple Set Union\n    Includes all elements of every set passed in.\n\n    DocTests:\n    >>> s1 = {0, 2, 4, 6, 8}\n    >>> s2 = {1, 2, 3, 4, 5}\n    >>> s3 = {2, 8, 9, 1, 7}\n    >>> union(s1, s2, s3)\n    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\n    @param args: Arbitrary number of sets.\n    @return: Unified set\n\n```\n### `IteratorAlgorithms.intersection`\n```\nHelp on function intersection in module IteratorAlgorithms:\n\nintersection(*args: set) -> set\n    Multiple Set Intersection\n    Includes all elements that are common to every set passed in.\n    If there is no intersection, it will return the empty set.\n    If all sets are the same, it will return the union of all sets.\n    Opposite of symmetric_difference.\n\n    DocTests:\n    >>> s1 = {0, 2, 4, 6, 8}\n    >>> s2 = {1, 2, 3, 4, 5}\n    >>> s3 = {2, 8, 9, 1, 7}\n    >>> intersection(s1, s2, s3)\n    {2}\n\n    @param args: Arbitrary number of sets.\n    @return: Set of common elements\n\n```\n### `IteratorAlgorithms.difference`\n```\nHelp on function difference in module IteratorAlgorithms:\n\ndifference(*args: set) -> set\n    Multiple Set Difference\n    Includes every element in the first set that isn't in one of the others.\n    If there is no difference, it will return the empty set.\n\n    DocTests:\n    >>> s1 = {0, 2, 4, 6, 8}\n    >>> s2 = {1, 2, 3, 4, 5}\n    >>> s3 = {2, 8, 9, 1, 7}\n    >>> difference(s1, s2, s3)\n    {0, 6}\n\n    @param args: Arbitrary number of sets.\n    @return: Difference between the first set and the rest.\n\n```\n### `IteratorAlgorithms.symmetric_difference`\n```\nHelp on function symmetric_difference in module IteratorAlgorithms:\n\nsymmetric_difference(*args: set) -> set\n    Multiple Set Symmetric Difference\n    Includes all elements that are not common to every set passed in.\n    If there is no intersection, it will return the union of all sets.\n    If all sets are the same, it will return the empty set.\n    Opposite of intersection.\n\n    DocTests:\n    >>> s1 = {0, 2, 4, 6, 8}\n    >>> s2 = {1, 2, 3, 4, 5}\n    >>> s3 = {2, 8, 9, 1, 7}\n    >>> symmetric_difference(s1, s2, s3)\n    {0, 1, 3, 4, 5, 6, 7, 8, 9}\n\n    @param args: Arbitrary number of sets.\n    @return: Symmetric difference considering all sets.\n\n```\n\n\n## Test Summary\n```\n1 items had no tests:\n    __main__\n32 items passed all tests:\n   3 tests in __main__.accumulate\n   2 tests in __main__.add_one\n   3 tests in __main__.adjacent_difference\n   4 tests in __main__.all_of\n   4 tests in __main__.any_of\n   4 tests in __main__.difference\n   2 tests in __main__.exclusive_scan\n   5 tests in __main__.fork\n   3 tests in __main__.generate\n   2 tests in __main__.generate_n\n   2 tests in __main__.inclusive_scan\n   2 tests in __main__.inner_product\n   4 tests in __main__.intersection\n   4 tests in __main__.iota\n   5 tests in __main__.is_even\n   5 tests in __main__.is_odd\n   2 tests in __main__.matrix_multiply\n   2 tests in __main__.min_max\n   4 tests in __main__.none_of\n   2 tests in __main__.partial_sum\n   2 tests in __main__.partition\n   2 tests in __main__.product\n   4 tests in __main__.reduce\n   3 tests in __main__.square\n   3 tests in __main__.star_product\n   4 tests in __main__.star_sum\n   4 tests in __main__.symmetric_difference\n   2 tests in __main__.transform\n   2 tests in __main__.transform_reduce\n   4 tests in __main__.transposed_sums\n   4 tests in __main__.union\n   7 tests in __main__.zip_transform\n105 tests in 33 items.\n105 passed and 0 failed.\nTest passed.\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "accumulate,adjacent_difference,all_of,any_of,difference,exclusive_scan,fork,generate,generate_n,inclusive_scan,inner_product,intersection,iota,min_max,none_of,partial_sum,partition,product,reduce,star_sum,star_product,symmetric_difference,transform,transform_reduce,transposed_sums,union,zip_transform",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "IteratorAlgorithms",
    "package_url": "https://pypi.org/project/IteratorAlgorithms/",
    "platform": null,
    "project_url": "https://pypi.org/project/IteratorAlgorithms/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/IteratorAlgorithms/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A collection of iterator algorithms for Python3.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14585385,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f459c7c92001aa32c0b26ba593177b8bdd12840ec966a059a022d1fac2a48f74",
          "md5": "a25d126e406ecc781a33c47b0427dbba",
          "sha256": "86f69fc789681243f37035d85944b0284fb5048e2c6565e4f65aa6585a47d272"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a25d126e406ecc781a33c47b0427dbba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9873,
        "upload_time": "2019-12-28T02:10:06",
        "upload_time_iso_8601": "2019-12-28T02:10:06.409954Z",
        "url": "https://files.pythonhosted.org/packages/f4/59/c7c92001aa32c0b26ba593177b8bdd12840ec966a059a022d1fac2a48f74/IteratorAlgorithms-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4c52716239510f7a71945e1310d2cf483307ff2357e8c8ea49763d678a76337",
          "md5": "f2a2bc247742376c16649e4f6ac88a71",
          "sha256": "18a566dcabf8da85d330105bb7e46c7906febab45ec9ffd5fabd61e418986fc6"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2a2bc247742376c16649e4f6ac88a71",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12668,
        "upload_time": "2019-12-28T02:10:08",
        "upload_time_iso_8601": "2019-12-28T02:10:08.871421Z",
        "url": "https://files.pythonhosted.org/packages/b4/c5/2716239510f7a71945e1310d2cf483307ff2357e8c8ea49763d678a76337/IteratorAlgorithms-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37ab3a44c989787ebf13142652a3d13048ae74ea9f2f2152e53c8bc6bfb8035b",
          "md5": "9852e0a3a8f9a837fdb66cfacf49bd6e",
          "sha256": "9d928c6faa3131e87cb2bd6652729cb34c20ea2586991263b998fce4806a290d"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9852e0a3a8f9a837fdb66cfacf49bd6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9904,
        "upload_time": "2019-12-28T03:00:56",
        "upload_time_iso_8601": "2019-12-28T03:00:56.762000Z",
        "url": "https://files.pythonhosted.org/packages/37/ab/3a44c989787ebf13142652a3d13048ae74ea9f2f2152e53c8bc6bfb8035b/IteratorAlgorithms-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40163c5cb7cd7fb0318af21ef6c173742867b949ae2e0147a9087e703bc09ba0",
          "md5": "b5c1c7ac1ee74740ff35be287834e97e",
          "sha256": "f39c2f29326790845478c90ef26bd37265c1126192df800f63ab0174870d3c56"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5c1c7ac1ee74740ff35be287834e97e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12705,
        "upload_time": "2019-12-28T03:00:58",
        "upload_time_iso_8601": "2019-12-28T03:00:58.368540Z",
        "url": "https://files.pythonhosted.org/packages/40/16/3c5cb7cd7fb0318af21ef6c173742867b949ae2e0147a9087e703bc09ba0/IteratorAlgorithms-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ee47eccf1fb6a8c2b54a198b28879f98343e4f1e952df3fedad88e456fb3945",
          "md5": "19fd8825f47273c800a682bf0814c8a7",
          "sha256": "47fd177345d7a98274c802a4906d99ebb5fd5187adb54e854641493100fecb6b"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19fd8825f47273c800a682bf0814c8a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10482,
        "upload_time": "2019-12-29T02:02:47",
        "upload_time_iso_8601": "2019-12-29T02:02:47.040424Z",
        "url": "https://files.pythonhosted.org/packages/6e/e4/7eccf1fb6a8c2b54a198b28879f98343e4f1e952df3fedad88e456fb3945/IteratorAlgorithms-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b958b205f27cbe81345a4cc684a0b25e80a04928d9df77beacf2545bba1dc0ee",
          "md5": "3a2ce72985cdd49ad6cd700a90562130",
          "sha256": "7ab4218bc12ea4df4e3ca763d830d60d20d8add9a4f5d68441a9baddfa16a9f5"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3a2ce72985cdd49ad6cd700a90562130",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13989,
        "upload_time": "2019-12-29T02:02:48",
        "upload_time_iso_8601": "2019-12-29T02:02:48.481183Z",
        "url": "https://files.pythonhosted.org/packages/b9/58/b205f27cbe81345a4cc684a0b25e80a04928d9df77beacf2545bba1dc0ee/IteratorAlgorithms-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85825f086dfefa1fa4b364bbd97277ce7dad207828d81c42e82d4fa3aa468ca5",
          "md5": "99cd8adde299f3026d8c6fcaf75de16c",
          "sha256": "faa0ee2ff6d1b57a2d99d832bbd346d99f85c79c4cab992f80bb2373a267e3f1"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99cd8adde299f3026d8c6fcaf75de16c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9854,
        "upload_time": "2019-12-29T06:39:04",
        "upload_time_iso_8601": "2019-12-29T06:39:04.515826Z",
        "url": "https://files.pythonhosted.org/packages/85/82/5f086dfefa1fa4b364bbd97277ce7dad207828d81c42e82d4fa3aa468ca5/IteratorAlgorithms-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "423a451aaa525afbd9666ef7ffaea23b96a83fe6e74a898eae88bd0cb1bcdb98",
          "md5": "490d0ff1357e964ad1ac1d3f6922c528",
          "sha256": "8efddc8e88bb8be3259818bdd2056f82192de939685f5438958facf01f328c88"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "490d0ff1357e964ad1ac1d3f6922c528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12913,
        "upload_time": "2019-12-29T06:39:06",
        "upload_time_iso_8601": "2019-12-29T06:39:06.158404Z",
        "url": "https://files.pythonhosted.org/packages/42/3a/451aaa525afbd9666ef7ffaea23b96a83fe6e74a898eae88bd0cb1bcdb98/IteratorAlgorithms-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04742e02aee594f19f8c98fd7c6956628bb7d11b89b98c55244ec8324e3823cf",
          "md5": "ed9e3bcde16ca38c11a2261d0b4e9cf4",
          "sha256": "26e29c967a82b3c25b2275020df734d9f509ffa887270da7e1ed015e0fbd5b6b"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed9e3bcde16ca38c11a2261d0b4e9cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9853,
        "upload_time": "2019-12-30T21:54:21",
        "upload_time_iso_8601": "2019-12-30T21:54:21.097361Z",
        "url": "https://files.pythonhosted.org/packages/04/74/2e02aee594f19f8c98fd7c6956628bb7d11b89b98c55244ec8324e3823cf/IteratorAlgorithms-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08987537f500e27e5c506d2702cba117d9c404527c5af8e256caf636ecd4e46f",
          "md5": "17891b5c786ebabf746f06e9eddee6a5",
          "sha256": "de568ffd89e5dc55818d481f5eb5ce9df46730cf5f11214bcb1afae1f37c9a43"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "17891b5c786ebabf746f06e9eddee6a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12858,
        "upload_time": "2019-12-30T21:54:22",
        "upload_time_iso_8601": "2019-12-30T21:54:22.876684Z",
        "url": "https://files.pythonhosted.org/packages/08/98/7537f500e27e5c506d2702cba117d9c404527c5af8e256caf636ecd4e46f/IteratorAlgorithms-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f374c405a8306d09c552d77b957e8d730d976d748777e0859633a177cdc5681",
          "md5": "c3ab9cac2a0100b41bfabf2dca6cb3e1",
          "sha256": "9ff6c9622e4ddd2d1c69fb4797aa12ac0864c445812a183f188fc47b8a4841ec"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3ab9cac2a0100b41bfabf2dca6cb3e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9820,
        "upload_time": "2020-01-10T18:15:16",
        "upload_time_iso_8601": "2020-01-10T18:15:16.074489Z",
        "url": "https://files.pythonhosted.org/packages/3f/37/4c405a8306d09c552d77b957e8d730d976d748777e0859633a177cdc5681/IteratorAlgorithms-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "881ded099b3a11b4db13c5dfbc7dfbb299af31b58faa352be889a7c7a2cdb38d",
          "md5": "69a1cf0743979322580bd0d9d240f4f7",
          "sha256": "1150ba9c79cdff0d157690a46c29fc0927359555bebc40c145226e85768aefd9"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "69a1cf0743979322580bd0d9d240f4f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12857,
        "upload_time": "2020-01-10T18:15:17",
        "upload_time_iso_8601": "2020-01-10T18:15:17.868977Z",
        "url": "https://files.pythonhosted.org/packages/88/1d/ed099b3a11b4db13c5dfbc7dfbb299af31b58faa352be889a7c7a2cdb38d/IteratorAlgorithms-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ddb481e04815f210158e211af83c38e8ab848b06cad7d35ae74bd3093368c81",
          "md5": "ead8bae8365a65d66c926a5f393f65a1",
          "sha256": "9ecc54b65b7d30facdced984eeb427ee3efa0fa2117e4c55bd765d236ac15560"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ead8bae8365a65d66c926a5f393f65a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9853,
        "upload_time": "2020-01-22T05:09:10",
        "upload_time_iso_8601": "2020-01-22T05:09:10.328234Z",
        "url": "https://files.pythonhosted.org/packages/8d/db/481e04815f210158e211af83c38e8ab848b06cad7d35ae74bd3093368c81/IteratorAlgorithms-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1757916383fa906bf9f96708723b846a55188cb263250dbd222e3e749161ec9e",
          "md5": "91f3251f38ff05579b86b28da1d92cce",
          "sha256": "7d326418fa9786008a1fc8745f8c151f8a6ff35696d710995d60a6707bf1610d"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "91f3251f38ff05579b86b28da1d92cce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12940,
        "upload_time": "2020-01-22T05:09:11",
        "upload_time_iso_8601": "2020-01-22T05:09:11.979836Z",
        "url": "https://files.pythonhosted.org/packages/17/57/916383fa906bf9f96708723b846a55188cb263250dbd222e3e749161ec9e/IteratorAlgorithms-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7210bc052b666f77d48b21daaba850fc620b7b17cfd4084da3df1e42af6f89b3",
          "md5": "bc61cdba25a36bf119382e6f6f5dca16",
          "sha256": "a1514b0a6f35f58cb8be9b5c7ce4baeb6abfa2d5881c64b0faa416380138f61d"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc61cdba25a36bf119382e6f6f5dca16",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9898,
        "upload_time": "2020-01-24T23:17:06",
        "upload_time_iso_8601": "2020-01-24T23:17:06.352750Z",
        "url": "https://files.pythonhosted.org/packages/72/10/bc052b666f77d48b21daaba850fc620b7b17cfd4084da3df1e42af6f89b3/IteratorAlgorithms-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "698739b4fcad52a647ecb6bef5c0b6f94414427598740841ea2b273e93339f7d",
          "md5": "ce7f090079ebce0fc7369c4818120377",
          "sha256": "706826a44153957bf9a311893cf5fc2f6463f07ee98cdc26db0aaf889ec32029"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce7f090079ebce0fc7369c4818120377",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13009,
        "upload_time": "2020-01-24T23:17:07",
        "upload_time_iso_8601": "2020-01-24T23:17:07.735152Z",
        "url": "https://files.pythonhosted.org/packages/69/87/39b4fcad52a647ecb6bef5c0b6f94414427598740841ea2b273e93339f7d/IteratorAlgorithms-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "356bc525c2d4455edde50561c61dfe6032e0917fd6b8ea6236e9db77301c1d4b",
          "md5": "fa3febd06f24b6cf1230cc409cca253d",
          "sha256": "086f4f7920d0ae2cdfadfa443d6afb8d309208af82f711776c479f2508c36889"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa3febd06f24b6cf1230cc409cca253d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9995,
        "upload_time": "2020-02-08T06:36:22",
        "upload_time_iso_8601": "2020-02-08T06:36:22.836803Z",
        "url": "https://files.pythonhosted.org/packages/35/6b/c525c2d4455edde50561c61dfe6032e0917fd6b8ea6236e9db77301c1d4b/IteratorAlgorithms-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f1113950ae1f5f45c4616033fbd92b30b610c4e626e1e3ccc45b56da5136af",
          "md5": "551ddf8e10b8c198ada7911e13faae02",
          "sha256": "d783e5a5b4b6e1f25984af2ad013c3674eaad9ac87c0ef80a331ebe1bc561a65"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "551ddf8e10b8c198ada7911e13faae02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13074,
        "upload_time": "2020-02-08T06:36:24",
        "upload_time_iso_8601": "2020-02-08T06:36:24.562735Z",
        "url": "https://files.pythonhosted.org/packages/a5/f1/113950ae1f5f45c4616033fbd92b30b610c4e626e1e3ccc45b56da5136af/IteratorAlgorithms-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49a62ff8cf942098f752c07f3e04309c90a54d64944f135b8583cffce290b199",
          "md5": "2f680e3cfc129bf8d3525fccb5a8c705",
          "sha256": "93e04e07028c044dc4d56fe0d317fd079fd71152f8c982bfc13b341cfd970ee5"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f680e3cfc129bf8d3525fccb5a8c705",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9992,
        "upload_time": "2020-02-29T19:28:06",
        "upload_time_iso_8601": "2020-02-29T19:28:06.654240Z",
        "url": "https://files.pythonhosted.org/packages/49/a6/2ff8cf942098f752c07f3e04309c90a54d64944f135b8583cffce290b199/IteratorAlgorithms-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e4031387869ef2cd57e69e17d5f9b3b0d4e3113360d4023e93665522d62f223",
          "md5": "2d9c994719212ae91433d6f14b63c2f2",
          "sha256": "a66d170cab724c1fa8c19a27732e8ff2758408eca06da7ad10be46394db5af1e"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2d9c994719212ae91433d6f14b63c2f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13083,
        "upload_time": "2020-02-29T19:28:08",
        "upload_time_iso_8601": "2020-02-29T19:28:08.381453Z",
        "url": "https://files.pythonhosted.org/packages/0e/40/31387869ef2cd57e69e17d5f9b3b0d4e3113360d4023e93665522d62f223/IteratorAlgorithms-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5e330ba5d26018ebf1c9d8bb5a6af3d73193d3d4766efa7f0f5483ffc43fb6e",
          "md5": "418d612b010a7c0af2cf1c4690b0a7e4",
          "sha256": "fcaf95ca09631ef7752cf12086f7f6b56da7cb87fe314dc621c8244122bf7da8"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "418d612b010a7c0af2cf1c4690b0a7e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9990,
        "upload_time": "2020-04-20T23:24:08",
        "upload_time_iso_8601": "2020-04-20T23:24:08.415476Z",
        "url": "https://files.pythonhosted.org/packages/f5/e3/30ba5d26018ebf1c9d8bb5a6af3d73193d3d4766efa7f0f5483ffc43fb6e/IteratorAlgorithms-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c024e958561ddf80b3452764adb1f7f582689c588ff8d64b3b91e3f26b91139",
          "md5": "6a59a45ed0567a6d1f0de20cdff3d26f",
          "sha256": "3879402c9ed441308f37115a641463a30abeb2b320b06e27d2b6f3da2f451161"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6a59a45ed0567a6d1f0de20cdff3d26f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13075,
        "upload_time": "2020-04-20T23:24:09",
        "upload_time_iso_8601": "2020-04-20T23:24:09.938866Z",
        "url": "https://files.pythonhosted.org/packages/0c/02/4e958561ddf80b3452764adb1f7f582689c588ff8d64b3b91e3f26b91139/IteratorAlgorithms-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85aa70839119223d89c0e6edbc98d6e242f3468ef9d8567e6efcb5c12cb9791b",
          "md5": "4f83403fe6ad864e2f663b13d760abe7",
          "sha256": "f9a02c267d43cc6ffd993b60a833e01ff461c75f2d7b2038fb53b54ca110f2c3"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f83403fe6ad864e2f663b13d760abe7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10069,
        "upload_time": "2022-07-29T04:36:11",
        "upload_time_iso_8601": "2022-07-29T04:36:11.348113Z",
        "url": "https://files.pythonhosted.org/packages/85/aa/70839119223d89c0e6edbc98d6e242f3468ef9d8567e6efcb5c12cb9791b/IteratorAlgorithms-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c24aeb1858dcd49a145a3e62821ada8d796770585c1d59ff27f01a50708bdf6",
          "md5": "7535b30f6c270d3d3f255aefee7bf5b2",
          "sha256": "d8703208ad81234fae68096edfdcb7959a37a92ad7c870f9f85ac14817f895e5"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7535b30f6c270d3d3f255aefee7bf5b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13184,
        "upload_time": "2022-07-29T04:36:12",
        "upload_time_iso_8601": "2022-07-29T04:36:12.546353Z",
        "url": "https://files.pythonhosted.org/packages/2c/24/aeb1858dcd49a145a3e62821ada8d796770585c1d59ff27f01a50708bdf6/IteratorAlgorithms-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2571a0d4cc9db8c367506f076e26b4043695a00f28f11629854b312e9b2036a",
          "md5": "5b5b55054662c523753dccccbc4ad78a",
          "sha256": "c9c9350736a234c7738559adbd2d7e58c9efae11cb46a243bd169b133a723017"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b5b55054662c523753dccccbc4ad78a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10177,
        "upload_time": "2022-07-29T04:43:07",
        "upload_time_iso_8601": "2022-07-29T04:43:07.185905Z",
        "url": "https://files.pythonhosted.org/packages/e2/57/1a0d4cc9db8c367506f076e26b4043695a00f28f11629854b312e9b2036a/IteratorAlgorithms-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be4104a9ef65d76426619d2e97914db38978a5025ba3e004d86b3bf39576de4f",
          "md5": "a1af5eeccb6efd3136c7e26012f7a2da",
          "sha256": "35791dd61a59ed5342aa25d3022e2ed886c87d030c22a5a474caab2b1e163e10"
        },
        "downloads": -1,
        "filename": "IteratorAlgorithms-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a1af5eeccb6efd3136c7e26012f7a2da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13221,
        "upload_time": "2022-07-29T04:43:09",
        "upload_time_iso_8601": "2022-07-29T04:43:09.417880Z",
        "url": "https://files.pythonhosted.org/packages/be/41/04a9ef65d76426619d2e97914db38978a5025ba3e004d86b3bf39576de4f/IteratorAlgorithms-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2571a0d4cc9db8c367506f076e26b4043695a00f28f11629854b312e9b2036a",
        "md5": "5b5b55054662c523753dccccbc4ad78a",
        "sha256": "c9c9350736a234c7738559adbd2d7e58c9efae11cb46a243bd169b133a723017"
      },
      "downloads": -1,
      "filename": "IteratorAlgorithms-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b5b55054662c523753dccccbc4ad78a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10177,
      "upload_time": "2022-07-29T04:43:07",
      "upload_time_iso_8601": "2022-07-29T04:43:07.185905Z",
      "url": "https://files.pythonhosted.org/packages/e2/57/1a0d4cc9db8c367506f076e26b4043695a00f28f11629854b312e9b2036a/IteratorAlgorithms-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be4104a9ef65d76426619d2e97914db38978a5025ba3e004d86b3bf39576de4f",
        "md5": "a1af5eeccb6efd3136c7e26012f7a2da",
        "sha256": "35791dd61a59ed5342aa25d3022e2ed886c87d030c22a5a474caab2b1e163e10"
      },
      "downloads": -1,
      "filename": "IteratorAlgorithms-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a1af5eeccb6efd3136c7e26012f7a2da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13221,
      "upload_time": "2022-07-29T04:43:09",
      "upload_time_iso_8601": "2022-07-29T04:43:09.417880Z",
      "url": "https://files.pythonhosted.org/packages/be/41/04a9ef65d76426619d2e97914db38978a5025ba3e004d86b3bf39576de4f/IteratorAlgorithms-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}