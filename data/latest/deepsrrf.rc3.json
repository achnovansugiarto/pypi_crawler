{
  "info": {
    "author": "Hakan Temiz",
    "author_email": "htemiz@artvin.edu.tr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## <p align='center'> A Python Framework for Obtaining and Automating Super Resolution with Deep Learning Algorithms </p>\n\n\n[![DOI](https://zenodo.org/badge/198432258.svg)](https://zenodo.org/badge/latestdoi/198432258)\n\n\n<p align='justify'>\nDeepSR is an open source progam that eases the entire processes of the Super Resolution (SR) problem in terms of Deep Learning (DL) algorithms. DeepSR makes it very simple to design and build DL models. Thus, it empowers researchers to focus on their studies by saving them from struggling with time consuming and challenging workloads while pursuing successful DL algorithms for the task of SR.\n</p>\n\n<br/>\n <p align='justify'>\nEach step in the workflow of SR pipeline, such as pre-processing, augmentation, normalization, training, post-processing, and test are governed by this framework in such a simple, easy and efficient way that there would remain at most very small amount of work for researchers to accomplish their experiments. In this way, DeepSR ensures a way of fast prototyping and providing a basis for researchers and/or developers eliminating the need of commencing whole job from the scratch, or the need of adapting existing program(s) to new designs and implementations. \n</p>\n\n</br>\n<p align='justify'>\nDeepSR is designed in such a way that one can interact with it from the command prompt, or use it as class object by importing it into another program. It is mainly tailored for using it with scripts from command prompt by providing many ready-to-use functionalities at hand. Hence, multiple tasks/experiments can be performed successively by using batch scripts. However, addition to command prompt interface, it is ready also to do the same tasks by calling it as a class object from another Python program. Addition to this, one can develop his/her own programs or can write Python scripts performing subject specific tasks at his/her disposal. Even more, he/she can add new features to the program to contribute this effort for making it better.\n</p>\n\n  In order to construct DL models, DeepSR utilizes [Kears](https://www.keras.io). Keras is capable of running on top of the\n  following prominent DL frameworks: \n\n  [TensorFlow](https://www.tensorflow.org), [Theano](http://deeplearning.net/software/theano/) and [CNTK](https://github.com/microsoft/CNTK)\n\n It transforms DL models designed by coding with its API into the models of these frameworks. Thus, this program  is capable of running models on both CPUs or GPUs seamlessly by leveraging these frameworks.\n\n\n## Installation\n\nIn order to install the DeepSR, issue the following command in command prompt.\n\n    python -m pip install DeepSR\n\nThe downloadable binaries and source code are available at PyPI repository in the following address:\n\n https://pypi.org/project/DeepSR\n\n  ## How to Use It\n<p align='justify'>\nDeepSR fundamentally consists of three Python files: DeepSR.py, args.py, and utils.py. \nThe DeepSR object is declared in the file DeepSR.py. It is the core python module called first for running the program.\n All parameters that can be used with DeepSR in command prompt are defined in the file args.py.\n  The module, utils.py accompanies many tools making the life easier and maintaining the reusability.\n\n\n<p align='center'>\n<img align='center' src=\"https://github.com/htemiz/DeepSR/blob/master/DeepSR/docs/The&#32;DeepSR.png\" style=\"width:160px,height=100px;text-aiign:center;display:blcok;\"/>\n </p>\n\n<p align='justify'>\nAll needs to be done is to build up a DL model using the API of Keras within a model file (a python file),\n  and then, provide the program the relevant information and/or instructions. A Model file is an ordinary \n  Python file (a .py) must have at least two things within itself:\n- A dictionary named `settings`. This dictionary is used to supply the DeepSR with all necessary settings\n    and/or instructions to perform tasks.\n- A method named `build_model`. This method preserves the definition of the model in Keras API,\n  and returns it the composed version of it. By this way, DeepSR intakes deep learning models \n  (either from command prompt, or whereas it is used as an class object)\n </p>\n\n<p align='justify'>\nPlease refer to the <b>Section 3</b> in the program manual, for further information about model files.\n To see a sample model file, locate the samples folder within DeepSR folder.\n </p>\n\n<p align='justify'>\nThis dictionary is used to provide the program all necessary settings and/or instructions to do intended tasks. \nSettings are given in the dictionary in a key-value pairs. All keys are summarized in the [manual](DeepSR/docs/DeepSR&#32;Manual&#32;v1.0.0.pdf)\nThe keys correspond to command arguments in command prompt. One can easily construct and set his/her models\nwith parameters by providing key-value pairs in this dictionary to perform Super Resolution task with \nDeep Learning methods.\n</p>\n\n<p align='justify'>\nHowever, the same settings can also be given to the program as arguments in command prompt.\nPlease note that although settings were designated in the dictionary, the same settings provided as arguments\nin command prompt override them. Thus, the program ignores the values/instructions of those settings designated \nin the dictionary and uses the ones given as command arguments. \n </p>\n\n<p align='justify'>\nThe alteration of the settings is valid only for the class object, not valid for model files.\nNamely, settings are not changed in the dictionary within the model files. Model files will remain intact. \n</p>\n\n\n### Interacting with Command Prompt\n\n<p align='justify'>\n\nThe following code snippet is a sample for the use of the program from command line. This code instructs the DeepSR \nto start training the model given (returned from build_model function) in the file 'sample_model_1.py' with the parameters\ngiven in the dictionary 'settings' within the same file. If you check the model file, for example,\nyou will notice that training will to be performed for 10 epoch, scale is 4, learning rate is 0.001, and so on. \nThe test results (scores of image quality measures used in test procedure) \nobtained from each test images are saved in an Excel file with the average scores of measures over test set.\n</p>\n\n    python DeepSR.py --modelfile “sample_model_1.py” --train\n\nPlease note that it is assumed that the location of the DeepSR.py file has already set to the system's PATH.\n\nTo perform the test for the evaluation of the model's performance on given test set of images \nby a number of image quality measures, add `--test` argument to above code\n\n    python DeepSR.py --modelfile “sample_model_1.py” --train --test\n\nThe following code augments images with 90, 180, 270 degree of rotations, and applies \nMin-Max normalization (0-1) before they were given to the model for training procedure. After training, test is \ngoing to be applied also. \n\n    python DeepSR.py --modelfile “sample_model_1.py” -–train -–augment 90 180 270 --test  --normalization minmax\n\nBelow, another model file (you can locate this file under samples folder) is used to perform the test for \na trained model by saving the outputs (images) of each layers in image files.\n\n    python DeepSR.py --modelfile “sample_model_2.py” -–test --layeroutputs --saveimages\n\nMore detailed examples and explanation are given in the program manual.  \n\n### Using DeepSR as Class Object\n\n<p align='justify'>\nDeepSR can be used as a Python object from another program as well. The key point here is,\n that all parameters along with settings must be assigned to the object before doing any \n operation with it. User need to designate each parameter/instruction as class member or methods \n by manually. On the other hand, there is another way of doing this procedure.\n </p>\n\n <p align='justify'>\nDeepSR object takes only one parameter in class construction phase for setting it up with parameters:\n args (arguments or setting, in another word). The argument, args must be a dictionary with\n  key-value pairs similar to the dictionary, settings in model files. The parameters/instructions \n  in args can be taken from a file programmatically or can be written in actual python code where \n  the actual program is being coded. It is up to the user. \n</p>\n\n <p align='justify'>\nDeepSR can be constructed without providing any settings in args. The class will have no any members\n or methods in such case. This user is informed about this situation in command prompt. However,\n  each parameter of the program (and also build method) must still be designated in the class as members\n   before they are being used for any operations. \n</p>\n\n <p align='justify'>\nThe following code snippet is an example for creating DeepSR object from Python scripts by \nassigning settings to class in construction stage of the class.\n</p>\n\n```python\nimport DeepSR  \nfrom os.path import basename  \n\nsettings = \\  \n    {  \n        'augment': [90, 180],  # can be any combination of [90,180,270, 'flipud', 'fliplr', 'flipudlr' ], or []  \n        'backend': 'theano', # keras is going to use theano framework in processing.  \n        'batchsize':9,  # number of batches  \n        'channels': 1,  # color channels to be used in training . Only one channel in this case  \n        'colormode': 'YCbCr',  # the color space is YCbCr. 'YCbCr' or 'RGB'  \n        'crop': 0,  # do not crop from borders of images.  \n        'crop_test': 0,  # do not crop from borders of images in tests.  \n        'decay': 1e-6,  # learning rate decay.  \n        'earlystoppingpatience': 5,  # stop after 5 epochs if the performance of the model has not improved.  \n        'epoch': 2,  # train the model for total 10 passes on training data.  \n        'inputsize': 33,  # size of input image patches is 33x33.  \n        'lrate': 0.001,  \n        'lrateplateaupatience': 3,  # number of epochs to wait before reducing the learning rate.  \n        'lrateplateaufactor': 0.5,  # the ratio of decrease in learning rate value.  \n        'minimumlrate': 1e-7,  # learning rate can be reduced down to a maximum of this value.  \n        'modelname': basename(__file__).split('.')[0],  # modelname is the same as the name of this file.  \n        'metrics': ['PSNR', 'SSIM'],  # the model name is the same as the name of this file.  \n        'normalization': ['standard', 53.28, 40.732],  # apply standardization to input images (mean, std)  \n        'outputdir': '',  # sub directories automatically created.  \n        'scale': 4,  # magnification factor is 4.  \n        'stride': 11,  # give a step of 11 pixels apart between patches while cropping them from images for training.  \n        'target_channels': 1,  # color channels to be used in tests . Only one channel in this case  \n        'target_cmode': 'RGB',  # 'YCbCr' or 'RGB'  \n        'testpath': [r'D:\\test_images'],  # path to the folder in which test images are. Can be more than one.  \n        'traindir': r'D:\\training_images',  # path to the folder in which training images are.  \n        'upscaleimage': False,  # The model is going to upscale the given low resolution image.  \n        'valdir': r'',  # path to the folder in which validation images are.  \n        'workingdir': r'',  # path to the working directory. All outputs to be produced within this directory  \n        'weightpath': '',  # path to model weights either for training to start with, or for test.  \n    }  \n\nDSR = DeepSR.DeepSR(settings)  # instance of DeepSR object without the build_model method.  \n```\n\n<p align='justify'>\nAt this point, DeepSR object was created with parameters but without the method “build_model”. \nTherefore this method must be declared in the class object in order to compose a deep learning model. \nUser can write this method in the same script and assign it to the class by calling the member method \nof the DeepSR object: set_model. In the following code snippet, a sample method for constructing \na deep learning model defined and assigned to DeepSR object by the member method.\n\n```python\nfrom keras import  losses  \nfrom keras.layers import Input  \nfrom keras.layers.convolutional import Conv2D, UpSampling2D  \nfrom keras.models import  Model  \nfrom keras.optimizers import Adam  \n\n#  a method returning an autoencoder model  \ndef build_model(self, testmode=False):  \n    if testmode:  \n        input_size = None  \n\n    else:  \n        input_size = self.inputsize  \n\n    # encoder  \n    input_img = Input(shape=(input_size, input_size, self.channels))  \n    x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)  \n    x = Conv2D(16, (1, 1), activation='relu', padding='same')(x)  \n    x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)  \n    x = Conv2D(3, (1, 1), activation='relu', padding='same')(x)  \n\n    # decoder  \n    x = UpSampling2D((self.scale, self.scale))(x)  # upscale by the scale factor  \n    x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)  \n    x = Conv2D(16, (1, 1), activation='relu', padding='same')(x)  \n    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)  \n    decoded = Conv2D(self.channels, (3, 3), activation='relu', padding='same')(x)  \n    autoencoder = Model(input_img, decoded)  \n    autoencoder.compile(Adam(self.lrate, self.decay), loss=losses.mean_squared_error)  \n    return autoencoder  \n```\n\nNow, the class object is ready for further processes. A training and test procedure is being implemented below.\n\n```python\nDSR.set_model(build_model)  # set build_model function to compose a DL model in the class.  \n\nDSR.epoch =1 # training will be implemented for 1 time instead of 10 as defined in settings.  \n\nDSR.train()  # training procedure.  \n\n# the performance of the model is evaluated below.  \nDSR.test(testpath=DSR.testpath, weightpath=DSR.weightpath, saveimages=False, plot=False)  \n\n```\n\nTo wrap all together, whole code is below.\n\n```python\nimport DeepSR  \nfrom os.path import basename  \n\nsettings = \\  \n    {  \n        'augment': [90, 180],  # can be any combination of [90,180,270, 'flipud', 'fliplr', 'flipudlr' ], or []  \n        'backend': 'theano', # keras is going to use theano framework in processing.  \n        'batchsize':9,  # number of batches  \n        'channels': 1,  # color channels to be used in training . Only one channel in this case  \n        'colormode': 'YCbCr',  # the color space is YCbCr. 'YCbCr' or 'RGB'  \n        'crop': 0,  # do not crop from borders of images.  \n        'crop_test': 0,  # do not crop from borders of images in tests.  \n        'decay': 1e-6,  # learning rate decay.  \n        'earlystoppingpatience': 5,  # stop after 5 epochs if the performance of the model has not improved.  \n        'epoch': 2,  # train the model for total 10 passes on training data.  \n        'inputsize': 33,  # size of input image patches is 33x33.  \n        'lrate': 0.001,  \n        'lrateplateaupatience': 3,  # number of epochs to wait before reducing the learning rate.  \n        'lrateplateaufactor': 0.5,  # the ratio of decrease in learning rate value.  \n        'minimumlrate': 1e-7,  # learning rate can be reduced down to a maximum of this value.  \n        'modelname': basename(__file__).split('.')[0],  # modelname is the same as the name of this file.  \n        'metrics': ['PSNR', 'SSIM'],  # the model name is the same as the name of this file.  \n        'normalization': ['standard', 53.28, 40.732],  # apply standardization to input images (mean, std)  \n        'outputdir': '',  # sub directories automatically created.  \n        'scale': 4,  # magnification factor is 4.  \n        'stride': 11,  # give a step of 11 pixels apart between patches while cropping them from images for training.  \n        'target_channels': 1,  # color channels to be used in tests . Only one channel in this case  \n        'target_cmode': 'RGB',  # 'YCbCr' or 'RGB'  \n        'testpath': [r'D:\\test_images'],  # path to the folder in which test images are. Can be more than one.  \n        'traindir': r'D:\\training_images',  # path to the folder in which training images are.  \n        'upscaleimage': False,  # The model is going to upscale the given low resolution image.  \n        'valdir': r'',  # path to the folder in which validation images are.  \n        'workingdir': r'',  # path to the working directory. All outputs to be produced within this directory  \n        'weightpath': '',  # path to model weights either for training to start with, or for test.  \n    }  \n\nDSR = DeepSR.DeepSR(settings)  # instance of DeepSR object without the build_model method.  \n\nfrom keras import  losses  \nfrom keras.layers import Input  \nfrom keras.layers.convolutional import Conv2D, UpSampling2D  \nfrom keras.models import  Model  \nfrom keras.optimizers import Adam  \n\n#  a method returning an autoencoder model  \ndef build_model(self, testmode=False):  \n    if testmode:  \n        input_size = None  \n\n    else:  \n        input_size = self.inputsize  \n\n    # encoder  \n    input_img = Input(shape=(input_size, input_size, self.channels))  \n    x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)  \n    x = Conv2D(16, (1, 1), activation='relu', padding='same')(x)  \n    x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)  \n    x = Conv2D(3, (1, 1), activation='relu', padding='same')(x)  \n\n    # decoder  \n    x = UpSampling2D((self.scale, self.scale))(x)  # upscale by the scale factor  \n    x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)  \n    x = Conv2D(16, (1, 1), activation='relu', padding='same')(x)  \n    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)  \n    decoded = Conv2D(self.channels, (3, 3), activation='relu', padding='same')(x)  \n    autoencoder = Model(input_img, decoded)  \n    autoencoder.compile(Adam(self.lrate, self.decay), loss=losses.mean_squared_error)  \n    return autoencoder  \n\nDSR.set_model(build_model)  # set build_model function to compose a DL model in the class.  \n\nDSR.epoch =1 # model shall be trained only for 1 epoch, instead of 10 as defined in settings.  \n\nDSR.train()  # training procedure.  \n\n# evaluate the performance of the model.  \nDSR.test(testpath=DSR.testpath, weightpath=DSR.weightpath, saveimages=False, plot=False)  \n\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/htemiz/DeepSRRF",
    "keywords": "super resolution deep learning DeepSRRF",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DeepSRRF",
    "package_url": "https://pypi.org/project/DeepSRRF/",
    "platform": "",
    "project_url": "https://pypi.org/project/DeepSRRF/",
    "project_urls": {
      "Documentation": "https://github.com/htemiz/deepsr/tree/master/DeepSRRF/docs",
      "Homepage": "https://github.com/htemiz/DeepSRRF",
      "Source": "https://github.com/htemiz/deepsr/tree/master/DeepSRRF"
    },
    "release_url": "https://pypi.org/project/DeepSRRF/0.0.37/",
    "requires_dist": [
      "scipy (==1.2.1)",
      "pandas",
      "h5py",
      "matplotlib",
      "scikit-image (==0.14.3)",
      "scikit-video",
      "sporco",
      "Pillow",
      "sewar",
      "openpyxl",
      "numpy (>=1.13.3tensorflow-gpu==1.14.0)",
      "theano",
      "keras (==2.2.4)",
      "setuptools (>41.0.0)",
      "markdown (>=2.2.0)",
      "GraphViz",
      "importlib"
    ],
    "requires_python": ">=3",
    "summary": "A framework for Obtaining and Automating Super Resolution for RF data with Deep Learning Algorithms",
    "version": "0.0.37",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9770020,
  "releases": {
    "0.0.35": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94f05fbdc009fa45cef113f1de9445b2319677bd527290be3f2a9429c90ae8a0",
          "md5": "42b480946e2b672dc82e84041cb7983b",
          "sha256": "5e264deadd5dca04ffd2b69523e370825c5a152e67c3e3a5088f36aeaaea3575"
        },
        "downloads": -1,
        "filename": "DeepSRRF-0.0.35-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42b480946e2b672dc82e84041cb7983b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 63658,
        "upload_time": "2021-03-14T08:32:07",
        "upload_time_iso_8601": "2021-03-14T08:32:07.974552Z",
        "url": "https://files.pythonhosted.org/packages/94/f0/5fbdc009fa45cef113f1de9445b2319677bd527290be3f2a9429c90ae8a0/DeepSRRF-0.0.35-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.36": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "921b8c41cea9da8d44e10f25545bfd117b36bbc60662d1a7d35cb12e7cbcc961",
          "md5": "32f0a7f55e3b296c5780713ff22632e5",
          "sha256": "281dcdc2e65e27bb2c5e12fda2cc1f3a169a3ac486b40636d03943cb58c948b4"
        },
        "downloads": -1,
        "filename": "DeepSRRF-0.0.36-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32f0a7f55e3b296c5780713ff22632e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 63657,
        "upload_time": "2021-03-14T08:32:19",
        "upload_time_iso_8601": "2021-03-14T08:32:19.302747Z",
        "url": "https://files.pythonhosted.org/packages/92/1b/8c41cea9da8d44e10f25545bfd117b36bbc60662d1a7d35cb12e7cbcc961/DeepSRRF-0.0.36-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac7e6a637aa7a8e3e94d3b53b1e0458b4ab1c108c1c5b3f8cbb778bca4f5dbb3",
          "md5": "bbebe01299576fb7af980623a43f776d",
          "sha256": "f0babc6badf4d264fb2e3c5dc62a5b22279658d21bae06da90f423c6baa3187d"
        },
        "downloads": -1,
        "filename": "DeepSRRF-0.0.36.tar.gz",
        "has_sig": false,
        "md5_digest": "bbebe01299576fb7af980623a43f776d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 281806,
        "upload_time": "2021-03-14T08:32:26",
        "upload_time_iso_8601": "2021-03-14T08:32:26.599108Z",
        "url": "https://files.pythonhosted.org/packages/ac/7e/6a637aa7a8e3e94d3b53b1e0458b4ab1c108c1c5b3f8cbb778bca4f5dbb3/DeepSRRF-0.0.36.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.37": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e43b835569519c49be1e08133ca40889c06986acbe7499f2787bfb0c346bd143",
          "md5": "30975a18b626466131fd336d02543d3e",
          "sha256": "7b03c94469664da4a06e4f06273e7f7fc9e50437a77ec4e81b480ad697d670ec"
        },
        "downloads": -1,
        "filename": "DeepSRRF-0.0.37-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30975a18b626466131fd336d02543d3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 63771,
        "upload_time": "2021-03-15T05:44:14",
        "upload_time_iso_8601": "2021-03-15T05:44:14.248717Z",
        "url": "https://files.pythonhosted.org/packages/e4/3b/835569519c49be1e08133ca40889c06986acbe7499f2787bfb0c346bd143/DeepSRRF-0.0.37-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d796cd78b18c960d5e5e2e5fe09825a4e43053e6a16c5b79400a4199fa3f0f0",
          "md5": "fe038a9a79e745d6200768e0f9ee425e",
          "sha256": "4c72aa7d61c13a90962236c96af0538655fc06f7342f2dbf54f3e450411b5f15"
        },
        "downloads": -1,
        "filename": "DeepSRRF-0.0.37.tar.gz",
        "has_sig": false,
        "md5_digest": "fe038a9a79e745d6200768e0f9ee425e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 281809,
        "upload_time": "2021-03-15T05:44:20",
        "upload_time_iso_8601": "2021-03-15T05:44:20.804682Z",
        "url": "https://files.pythonhosted.org/packages/9d/79/6cd78b18c960d5e5e2e5fe09825a4e43053e6a16c5b79400a4199fa3f0f0/DeepSRRF-0.0.37.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e43b835569519c49be1e08133ca40889c06986acbe7499f2787bfb0c346bd143",
        "md5": "30975a18b626466131fd336d02543d3e",
        "sha256": "7b03c94469664da4a06e4f06273e7f7fc9e50437a77ec4e81b480ad697d670ec"
      },
      "downloads": -1,
      "filename": "DeepSRRF-0.0.37-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30975a18b626466131fd336d02543d3e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 63771,
      "upload_time": "2021-03-15T05:44:14",
      "upload_time_iso_8601": "2021-03-15T05:44:14.248717Z",
      "url": "https://files.pythonhosted.org/packages/e4/3b/835569519c49be1e08133ca40889c06986acbe7499f2787bfb0c346bd143/DeepSRRF-0.0.37-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d796cd78b18c960d5e5e2e5fe09825a4e43053e6a16c5b79400a4199fa3f0f0",
        "md5": "fe038a9a79e745d6200768e0f9ee425e",
        "sha256": "4c72aa7d61c13a90962236c96af0538655fc06f7342f2dbf54f3e450411b5f15"
      },
      "downloads": -1,
      "filename": "DeepSRRF-0.0.37.tar.gz",
      "has_sig": false,
      "md5_digest": "fe038a9a79e745d6200768e0f9ee425e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 281809,
      "upload_time": "2021-03-15T05:44:20",
      "upload_time_iso_8601": "2021-03-15T05:44:20.804682Z",
      "url": "https://files.pythonhosted.org/packages/9d/79/6cd78b18c960d5e5e2e5fe09825a4e43053e6a16c5b79400a4199fa3f0f0/DeepSRRF-0.0.37.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}