{
  "info": {
    "author": "Krzysztof Babendych",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# AioZipStream\n\nThis is a fork of [ZipStream](https://github.com/kbbdy/zipstream). Simple python library for streaming ZIP files which are created dynamically, without using any temporary files.\n\n- No temporary files, data is streamed directly\n- Supported `deflate` compression method\n- Small memory usage, straming is realised using yield statement\n- Archive structure is created on the fly, and all data can be created during stream\n- Files included into archive can be generated on the fly using Python generators\n- Asynchronous AioZipStream and classic ZipStream are available\n- Zip32 format compatible files\n- Independent from python's standard ZipFile implementation\n- Almost no dependencies: only `aiofiles` in some circumstances (see AioZipStream section for details)\n- Zip64 support is also planned in future (far future, because I never hitted 4GB file size limit ;-) )\n\n### Required Python version:\n\n`ZipStream` is compatible with **Python 2.7**.\n\n`AioZipStream` require **Python 3.6**. For earlier versions `AioZipStream` is not available for import.\n\n\n## Usage:\n\nList of files to archive is stored as list of dicts. Why dicts? Because there are possible additional parameters for each file, and more parameters are planned in future.\n\nSample list of files to archive:\n\n```python\nfiles = [\n         # file /tmp/file.dat will be added to archive under `file.dat` name.\n         {'file':'/tmp/file.dat'},\n\n         # same file as previous under own name: `completly_different.foo`\n         # and will be compressed using `deflate` compression method\n         {'file':'/tmp/file.dat',\n          'name':'completly_different.foo',\n          'compression':'deflate'}\n        ]\n```\n\nIt's time to stream / archive:\n\n```python\nzs = ZipStream(files)\nwith open(\"example.zip\", \"wb\") as fout:\n    for data in zs.stream():\n        fout.write(data)\n```\n\nAny iterable source of binary data can be used in place of regular files. Using generator as input for file must be represented by `stream` field instead of `file`, additional `name` parameter is also required.\n\n```python\n\ndef source_of_bytes():\n    yield b\"123456789\"\n    yield b\"abcdefgh\"\n    yield b\"I am a binary data\"\n\nfiles = [....\n         # file will be generated dynamically under name my_data.bin\n         {'stream': source_of_bytes(), 'name': 'my_data.bin'},\n        ]\n```\n\nKeep in mind, that data should be served in chunks of reasonable size, because in case of using stream, `ZipStream` class is not able to split data by self.\n\nList of files to stream can be also generated on the fly, during streaming:\n\n```python\nimport os\nfrom zipstream import ZipStream\n\ndef files_to_stream_with_foo_in_name(dirname):\n    # all files from selected firectory\n    for f in os.listdir(dirname):\n        fp = os.path.join(dirname, f)\n        if os.path.isfile(fp):\n            yield {'file': fp,\n                   'name': \"foo_\" + os.path.basename(fp)}\n    # and our generator too\n    yield {'stream': source_of_bytes(),\n           'name': 'my_data.bin',\n           'compression': 'deflate'}\n\nzs = ZipStream(files_to_stream_with_foo_in_name('\\tmp\\some-files'))\n```\n\n## Asynchronous AioZipStream\n\n:warning: **To use asynchronous AioZipStream at least Python 3.6 version is required**. AioZipStream is using asynchronous generator syntax, wchich is avilable from 3.6 version.\n\nTo work with local files addtional `aiofiles` library is required. If You plan to stream only dynamically generated content, then `aiofiles` is not required.\n\nSee [aiofiles github repo](https://github.com/Tinche/aiofiles) for details about `aiofiles`.\n\n\n### Sample of asynchronous zip streaming\n\nAny generator used to create data on the fly, must be defined as `async`:\n\n```python\nasync def content_generator():\n    yield b'foo baz'\n    asyncio.sleep(0.1) # we simulate little slow source of data\n    data = await remote_data_source()\n    yield bytes(data, 'utf-8') # always remember to yield binary data\n    asyncio.sleep(0.5)\n    yield b\"the end\"\n```\n\nAlso zip streaming must be inside `async` function. Note usage `aiofiles.open` instead of `open`, which is asynchronous and will not block event loop during disk access.\n\n```python\nfrom zipstream import AioZipStream\n\nasync def zip_async(zipname, files):\n    aiozip = AioZipStream(files, chunksize=32768)\n    async with aiofiles.open(zipname, mode='wb') as z:\n        async for chunk in aiozip.stream():\n            await z.write(chunk)\n```\n\nHere is going list of files to send:\n\n```python\nfiles = [\n    {'file': '/tmp/car.jpeg'},\n    {'file': '/tmp/aaa.mp3', 'name': 'music.mp3'},\n    {'stream': content_generator(),\n     'name': 'random_stuff.txt'}\n]\n```\n\nStart asyncio loop and stream result to file:\n\n```python\nloop = asyncio.get_event_loop()\nloop.run_until_complete(zip_async('example.zip', files))\nloop.stop()\n```\n\n## Examples\n\nSee `examples` directory for complete code and working examples of ZipStream and AioZipStream.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kbbdy/zipstream",
    "keywords": "zip streaming",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiozipstream",
    "package_url": "https://pypi.org/project/aiozipstream/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiozipstream/",
    "project_urls": {
      "Homepage": "https://github.com/kbbdy/zipstream"
    },
    "release_url": "https://pypi.org/project/aiozipstream/0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Creating zip files on the fly",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7513415,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4332942919e4bc56894416ad78e65d4d06434f388e28ef2740d2176e5db5e010",
          "md5": "5559b5c356bc81b24768d1810bb89ece",
          "sha256": "a58bad8c75aba319c07bd3d817da7caec7417c1eb4f4c692e00b173fb9ded9c6"
        },
        "downloads": -1,
        "filename": "aiozipstream-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5559b5c356bc81b24768d1810bb89ece",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 8601,
        "upload_time": "2020-06-19T08:56:17",
        "upload_time_iso_8601": "2020-06-19T08:56:17.335196Z",
        "url": "https://files.pythonhosted.org/packages/43/32/942919e4bc56894416ad78e65d4d06434f388e28ef2740d2176e5db5e010/aiozipstream-0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f1b97b8d72faeb6cd6b44c23fdc45d054b00366ce153896e76e375e63f80a68",
          "md5": "59cbd77ddc821ee964e9965a350d5e05",
          "sha256": "ccc5cec35c2580b8a13185c916b1581bfcb4278ddf6ea3f7f834b6c9c47d6c61"
        },
        "downloads": -1,
        "filename": "aiozipstream-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "59cbd77ddc821ee964e9965a350d5e05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7826,
        "upload_time": "2020-06-19T08:56:19",
        "upload_time_iso_8601": "2020-06-19T08:56:19.782538Z",
        "url": "https://files.pythonhosted.org/packages/0f/1b/97b8d72faeb6cd6b44c23fdc45d054b00366ce153896e76e375e63f80a68/aiozipstream-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4332942919e4bc56894416ad78e65d4d06434f388e28ef2740d2176e5db5e010",
        "md5": "5559b5c356bc81b24768d1810bb89ece",
        "sha256": "a58bad8c75aba319c07bd3d817da7caec7417c1eb4f4c692e00b173fb9ded9c6"
      },
      "downloads": -1,
      "filename": "aiozipstream-0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5559b5c356bc81b24768d1810bb89ece",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 8601,
      "upload_time": "2020-06-19T08:56:17",
      "upload_time_iso_8601": "2020-06-19T08:56:17.335196Z",
      "url": "https://files.pythonhosted.org/packages/43/32/942919e4bc56894416ad78e65d4d06434f388e28ef2740d2176e5db5e010/aiozipstream-0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f1b97b8d72faeb6cd6b44c23fdc45d054b00366ce153896e76e375e63f80a68",
        "md5": "59cbd77ddc821ee964e9965a350d5e05",
        "sha256": "ccc5cec35c2580b8a13185c916b1581bfcb4278ddf6ea3f7f834b6c9c47d6c61"
      },
      "downloads": -1,
      "filename": "aiozipstream-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "59cbd77ddc821ee964e9965a350d5e05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7826,
      "upload_time": "2020-06-19T08:56:19",
      "upload_time_iso_8601": "2020-06-19T08:56:19.782538Z",
      "url": "https://files.pythonhosted.org/packages/0f/1b/97b8d72faeb6cd6b44c23fdc45d054b00366ce153896e76e375e63f80a68/aiozipstream-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}