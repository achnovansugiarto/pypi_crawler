{
  "info": {
    "author": "Mohamed El-Kalioby",
    "author_email": "mkalioby@mkalioby.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Leopards\n\n[![PyPI version](https://badge.fury.io/py/leopards.svg)](https://badge.fury.io/py/leopards)\n[![Python Versions](https://img.shields.io/pypi/pyversions/leopards.svg)](https://img.shields.io/pypi/pyversions/leopards.svg)\n![Coverage](https://img.shields.io/badge/coverage-100%25-success)\n![build status](https://github.com/mkalioby/leopards/actions/workflows/workflow.yml/badge.svg)\n\nLeopards is a way to query list of dictionaries or objects as if you are filtering in  DBMS. \nYou can get dicts/objects that are matched by OR, AND or NOT or all of them.\nAs you can see in the comparison they are much faster than Pandas.\n\n\n## Installation\n\n```shell\npip install leopards\n```\n\n## Usage\n\n```python\nfrom leopards import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,{'name__contains':\"k\", \"age__lt\":20})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'Mike', 'age': '19'}]\n```\n\nThe above filtration can be written as\n\n```python\nfrom leopards import Q\n\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"}]\nfiltered = Q(l, name__contains=\"k\", age__lt=20)\n\n```\n\n**Notes:** \n1. `Q` returns an iterator which can be converted to a list by calling `list`.\n2. Even though, age was `str` in the dict, as the value of in the query dict was `int`, Leopards converted the value in dict automatically to match the query data type. This behaviour can be stopped by passing `False` to `convert_types` parameter.\n\n## Supported filters\n* `eq`: equals and this default filter\n* `gt`: greater than.\n* `gte`: greater than or equal.\n* `lt`: less than \n* `lte`: less than or equal \n* `in`: the value in a list of a tuple.\n    * e.g.  age__in=[10,20,30]\n* `contains`: contains a substring as in the example.\n* `icontains`: case-insensitive `contains`.\n* `startswith`: checks if a value starts with a query strings.\n* `istartswith`: case-insensitive `startswith`.\n* `endswith`: checks if a value ends with a query strings.\n* `iendswith`: case-insensitive `endswith`.\n* `isnull`:  checks if the value matches any of NULL_VALUES which are `('', '.', None, \"None\", \"null\", \"NULL\")`\n  * e.g. `filter__isnull=True` or `filter__isnull=False`\n\nFor `eq`,`gt`,`gte`,`lt`,`lte`, `in`, `contains`, `icontains`, `startswith`,`istartswith`, `endswith` and `iendswith`, you can add a `n` to negate the results. e.g  `nin` which is equivalent to `not in` \n\n   \n## Advanced examples\nThis section will cover the use of `OR`, `AND` and `NOT`\n\n### Usage of `OR`\n`OR` or `__or__` takes a list of dictionaries to evaluate and returns with the first `True`.\n\n```python\nfrom leopards import Q\n\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"}]\nfiltered = Q(l, {\"OR\": [{\"name__contains\": \"k\"}, {\"age__gte\": 21}]})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'Mike', 'age': '19'}, {'name': 'Sarah', 'age': '21'}]\n```\n\n### Usage of `NOT`\n`NOT` or `__not__` takes a dict for query run.\n\n```python\nfrom leopards import Q\n\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"}]\nfiltered = Q(l, {\"age__gt\": 15, \"NOT\": {\"age__eq\": 19}})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'John', 'age': '16'}, {'name': 'Sarah', 'age': '21'}]\n```\n\n### Usage of `AND`\n`AND` or `__and__` takes a list of dict for query run, returns with the first `False`.\n\n```python\nfrom leopards import Q\n\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"}]\nfiltered = Q(l, {\"__and__\": [{\"age__gte\": 15}, {\"age__lt\": 21}]})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'John', 'age': '16'}, {'name': 'Mike', 'age': '19'}]\n```\n\n## Aggregating Data\n\nYou  can run the following aggregations\n* Count\n* Max\n* Min\n* Sum\n* Avg\n\n### Count\n\nFind the count of certain aggregated column\n```python\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"},{\"name\":\"John\",\"age\":\"19\"}]\nfrom leopards import Count\ncount = Count(l,['age'])\n```\noutput\n```python\n[{\"age\":\"16\",\"count\":1},{\"age\":\"19\",\"count\":2}, {\"age\":\"21\",\"count\":1}]\n```\n\n### Max\n\nFind the Max value for a certain column in  certain aggregated columns\n```python\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"},{\"name\":\"Joh\",\"age\":\"19\"}]\nfrom leopards import Max\ncount = Max(l,\"age\",['name'],dtype=int)\n```\noutput\n```python\n[{'name': 'John', 'age': '19'}, {'name': 'Mike', 'age': '19'}, {'name': 'Sarah', 'age': '21'}]\n```\n\n**Notes:**\n* If you don't pass the aggregation columns, the maximum will be found across dataset.\n* You can pass the datatype of the column to convert it on the fly while evaluating\n```python\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"},{\"name\":\"Joh\",\"age\":\"19\"}]\nfrom leopards import Max\nm = Max(l,\"age\",dtype=int)\n```\n\noutput\n```python\n[{'age': 21}]\n```\n\n\n### Min\n\nFind the Max value for a certain column in  certain aggregated columns\n```python\nl = [{\"name\": \"John\", \"age\": \"16\"}, {\"name\": \"Mike\", \"age\": \"19\"}, {\"name\": \"Sarah\", \"age\": \"21\"},{\"name\":\"Joh\",\"age\":\"19\"}]\nfrom leopards import Min\nm = Min(l,\"age\",['name'])\n```\noutput\n```python\n[{'name': 'John', 'age': '16'}, {'name': 'Mike', 'age': '19'}, {'name': 'Sarah', 'age': '21'}]\n```\n**Note:** \n* If you don't pass the aggregation columns, the min will be found across dataset.\n* You can pass the datatype of the column to convert it on the fly while evaluating\n\n\n## Sum and Avg\n\nLike Min and Max but only works with integers and floats.\n\n## Comparison with Pandas\n\nThis is done on Python 3.8 running on Ubuntu 22.04 on i7 11th generation and 32 GB of RAM.\n\n| Comparison                                                  | Pandas   | Leopards    |\n|-------------------------------------------------------------|----------|-------------|\n| Package Size     <br/> (Lower is better)                    | 29.8 MB  | **7.5 KB**  |\n| import Time (Worst) <br/> (Lower is better)                 | 146 ms   | **1.05 ms** |\n| load 10k CSV lines<br/> (Lower is better) <sup>[1]</sup>    | 0.295s   | **0.138s**  |\n| get first matched record<br/> (Lower is better)             | 0.310s   | **0.017s**  |\n| print all filtered records (10/10k) <br/> (Lower is better) | 0.310s   | **0.137s**  | \n| filter by integers <br/>(Lower is better)                   | 0.316s   | **0.138s**  |\n\n<sup>[1]</sup> This was loading the whole csv in memory which was for sake of fair comparison. \nNevertheless,  Leopards can work with DictReader as an iterable which executes in **0.014s**, then it handles line by line.\n\nThanks for [Asma Tahir](https://github.com/tahirasma) for Pandas stats.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mkalioby/leopards/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mkalioby/leopards/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "leopards",
    "package_url": "https://pypi.org/project/leopards/",
    "platform": null,
    "project_url": "https://pypi.org/project/leopards/",
    "project_urls": {
      "Download": "https://github.com/mkalioby/leopards/",
      "Homepage": "https://github.com/mkalioby/leopards/"
    },
    "release_url": "https://pypi.org/project/leopards/0.20.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Allows filtering & aggregation iterable of dictionary by another dictionary. Much faster than pandas",
    "version": "0.20.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15829505,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "faba011784e3608e1df09279a19c03ff634d9c9b8d29cda892f0d1389bd85141",
          "md5": "efba77d341ae03070d9db8a87835b1c6",
          "sha256": "90b584bca03eb324b52d0f0034a3c1981475e4f465ec87c508eda1ca4db2e7b7"
        },
        "downloads": -1,
        "filename": "leopards-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efba77d341ae03070d9db8a87835b1c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10000,
        "upload_time": "2022-11-15T14:48:53",
        "upload_time_iso_8601": "2022-11-15T14:48:53.294311Z",
        "url": "https://files.pythonhosted.org/packages/fa/ba/011784e3608e1df09279a19c03ff634d9c9b8d29cda892f0d1389bd85141/leopards-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd8f0dc652a957b8d2da705730b1b64e068c2523338e91951012f190fcb09cbc",
          "md5": "19f616ec2b73d8421e608a598b5ffbb5",
          "sha256": "e5e98d6733b95ad63ca21b29956f3ce355f6714b6b393f130b43f747475de82b"
        },
        "downloads": -1,
        "filename": "leopards-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19f616ec2b73d8421e608a598b5ffbb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10022,
        "upload_time": "2022-11-15T15:12:05",
        "upload_time_iso_8601": "2022-11-15T15:12:05.414657Z",
        "url": "https://files.pythonhosted.org/packages/fd/8f/0dc652a957b8d2da705730b1b64e068c2523338e91951012f190fcb09cbc/leopards-0.10.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "030b608f3c7833c349fc2152fee8777085903f53629fd658905e12ad22c329fc",
          "md5": "7d81d341c19e9da895910a0afad32170",
          "sha256": "0d3d04ed122a54addab7abf802c5444f49dd5494dd6aa1c4def9bf89817b3698"
        },
        "downloads": -1,
        "filename": "leopards-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d81d341c19e9da895910a0afad32170",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8471,
        "upload_time": "2022-11-16T10:39:06",
        "upload_time_iso_8601": "2022-11-16T10:39:06.189642Z",
        "url": "https://files.pythonhosted.org/packages/03/0b/608f3c7833c349fc2152fee8777085903f53629fd658905e12ad22c329fc/leopards-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.20.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62b421eba534e96b4c253d63d21a4e6c335278429721d84521a262d8294841dc",
          "md5": "6e28a15208ec33d51503b38fba68396e",
          "sha256": "05c4ed39de27252488f8bcc8243b8d21c8ec2452a3ecde7505e1394b73c28d90"
        },
        "downloads": -1,
        "filename": "leopards-0.20.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e28a15208ec33d51503b38fba68396e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9334,
        "upload_time": "2022-11-20T08:28:53",
        "upload_time_iso_8601": "2022-11-20T08:28:53.088475Z",
        "url": "https://files.pythonhosted.org/packages/62/b4/21eba534e96b4c253d63d21a4e6c335278429721d84521a262d8294841dc/leopards-0.20.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8c919211b7f7664fb336fea9ebc3ce8d578b0cf27a1b7184ed03502e206e7f1",
          "md5": "3bb2462078ca67d970d2db506c2792fe",
          "sha256": "3d2c58ae666ec16165f1d4ea9c88df5a3910edc5d0b482a3823bfff8530fc432"
        },
        "downloads": -1,
        "filename": "leopards-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb2462078ca67d970d2db506c2792fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8210,
        "upload_time": "2022-11-15T13:50:20",
        "upload_time_iso_8601": "2022-11-15T13:50:20.669219Z",
        "url": "https://files.pythonhosted.org/packages/a8/c9/19211b7f7664fb336fea9ebc3ce8d578b0cf27a1b7184ed03502e206e7f1/leopards-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3532fcf09dc47e61681a5c73e329ff136a8de6d4b1612bc2f8f37caab4f58d83",
          "md5": "13875e12ef2674b3a7ce50df7831f14b",
          "sha256": "edf7ce1b06df77a7104db9c34e102ae6cc9f6588dc91372152177d20e932f02f"
        },
        "downloads": -1,
        "filename": "leopards-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13875e12ef2674b3a7ce50df7831f14b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8904,
        "upload_time": "2022-11-15T13:57:07",
        "upload_time_iso_8601": "2022-11-15T13:57:07.290261Z",
        "url": "https://files.pythonhosted.org/packages/35/32/fcf09dc47e61681a5c73e329ff136a8de6d4b1612bc2f8f37caab4f58d83/leopards-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca2b3db29cca6858c174bde6430971954c82f4e0ed9163c2e5033246ec54920c",
          "md5": "0661d31abb121bc013e67f41d229cf36",
          "sha256": "b1289e86a74e520dabf22c8affbafaecf7866238182166dec647fe7ae4626e70"
        },
        "downloads": -1,
        "filename": "leopards-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0661d31abb121bc013e67f41d229cf36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8905,
        "upload_time": "2022-11-15T13:58:46",
        "upload_time_iso_8601": "2022-11-15T13:58:46.547947Z",
        "url": "https://files.pythonhosted.org/packages/ca/2b/3db29cca6858c174bde6430971954c82f4e0ed9163c2e5033246ec54920c/leopards-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b421eba534e96b4c253d63d21a4e6c335278429721d84521a262d8294841dc",
        "md5": "6e28a15208ec33d51503b38fba68396e",
        "sha256": "05c4ed39de27252488f8bcc8243b8d21c8ec2452a3ecde7505e1394b73c28d90"
      },
      "downloads": -1,
      "filename": "leopards-0.20.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e28a15208ec33d51503b38fba68396e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9334,
      "upload_time": "2022-11-20T08:28:53",
      "upload_time_iso_8601": "2022-11-20T08:28:53.088475Z",
      "url": "https://files.pythonhosted.org/packages/62/b4/21eba534e96b4c253d63d21a4e6c335278429721d84521a262d8294841dc/leopards-0.20.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}