{
  "info": {
    "author": "Noemi Emanuela Cazzaniga",
    "author_email": "noemi.cazzaniga@polimi.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Office/Business",
      "Topic :: Office/Business :: Financial",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Utilities"
    ],
    "description": "# faostat Python Package \n\nTools to read data from Faostat API.\n\n# Features\n\n* Read Faostat data and metadata as list of tuples or as pandas dataframe.\n* MIT license.\n\n\n# Documentation\n\n\n## Getting started:\n\nRequires Python 3.6+\n\n```bash\npip install faostat\n```\n\n\n## Read the list of available datasets:\n\n### As a list of tuples:\n\n```python\nfaostat.list_datasets(https_proxy=None)\n```\n\nRead the available datsets and return a list of tuples.\nThe first element of the list contains the header line.\n*https_proxy* is supposed to be used only if you need to use a proxy\nfor https and should be a list like: `[username, password, url:port]`.\nMore information on the available datasets can be found in the official [Faostat website][faoweb].\n\nExample:\n```python\n>>> ld = faostat.list_datasets()\n>>> ld[0]\n('code', 'label', 'date_update', 'note_update', 'release_current', 'state_current', 'year_current', 'release_next', 'state_next', 'year_next')\n>>> ld[1:4]\n[('QCL', 'Crops and livestock products', '2022-02-17', 'minor revision', '2021-12-21 / 2022-02-17', 'final', '2020', '2022-12', 'final', '2020'),\n ('QI', 'Production Indices', '2021-03-18', '', '2021-03-18', 'final', '2019', '2022-04', 'final', '2020'),\n ('QV', 'Value of Agricultural Production', '2021-03-18', 'minor revision', '2021-03-18', 'final', '2020', '2022-04', 'final', '2019')]\n```\n\n### As a pandas dataframe:\n\n```python\nfaostat.list_datasets_df(https_proxy=None)\n```\n\nRead the available datasets and return a pandas dataframe.\nThe first element of the list contains the header line.\n\n*https_proxy* is supposed to be used only if you need to use a proxy\nfor https and should be a list like: `[username, password, url:port]`.\n\nMore information on the available datasets can be found in the official [Faostat website][faoweb].\n\nExample:\n```python\n>>> df = faostat.list_datasets_df()\n>>> df\n   code                              label  ... state_next year_next\n0   QCL       Crops and livestock products  ...      final      2020\n1    QI                 Production Indices  ...      final      2020\n2    QV   Value of Agricultural Production  ...      final      2019\n3    FS  Suite of Food Security Indicators  ...      final      2021\n4   SCL        Supply Utilization Accounts  ...      final      2020\n..  ...                                ...  ...        ...       ...\n70   FA           Food Aid Shipments (WFP)  ...                     \n71   RM                          Machinery  ...                     \n72   RY                  Machinery Archive  ...                     \n73   RA                Fertilizers archive  ...                     \n74   PA       Producer Prices (old series)  ...                     \n```\n\n\n## Check areas/countries, years, items and elements for a given dataset:\nFrequently you will need just a subset of a dataset, for instance only one year or country.\nYou will therefore use the following functions.\n\n*https_proxy* is supposed to be used only if you need to use a proxy\nfor https and should be a list like: `[username, password, url:port]`.\n\n### To retrieve the available areas/countries for a given dataset:\n\n```python\nfaostat.get_areas(code, https_proxy=None)\n```\n\nGiven the code of a dataset, read the areas and their FAO code and returns a dictionary `{label: code}`.\n\nExample:\n```python\n>>> a = faostat.get_areas('QCL')\n>>> a\n{'Afghanistan': '2',\n 'Albania': '3',\n 'Algeria': '4',\n 'Angola': '7', \n etc.}\n```\n\n### To retrieve the available years for a given dataset:\n\n```python\nfaostat.get_years(code, https_proxy=None)\n```\n\nGiven the code of a dataset, read the years and returns a dictionary `{label: code}`.\n\nExample:\n```python\n>> import faostat\n>>> y = faostat.get_years('QCL')\n>>> y\n{'2020': '2020',\n '2019': '2019',\n '2018': '2018',\n '2017': '2017',\n '2016': '2016', \n etc.}\n```\n\n### To retrieve the available items for a given dataset:\n\n```python\nfaostat.get_items(code, https_proxy=None)\n```\n\nGiven the code of a dataset, read the items and returns a dictionary `{label: code}`.\n\nExample:\n```python\n>>> i = faostat.get_items('QCL')\n>>> i\n{'Agave fibres nes': '800',\n 'Almonds, with shell': '221',\n 'Anise, badian, fennel, coriander': '711',\n 'Apples': '515', \n etc.}\n```\n\n### To retrieve the available elements for a given dataset:\n\n```python\nfaostat.get_elements(code, https_proxy=None)\n```\n\nGiven the code of a dataset, read the elements and returns a dictionary `{label: code}`.\n\nExample:\n```python\n>>> e = faostat.get_elements('QCL')\n>>> e\n{'Area harvested': '2312',\n 'Yield': '2413',\n 'Production Quantity': '2510',\n 'Stocks': '2111',\n etc.}\n```\n\n## Read data from a dataset:\n\n### As a list of tuples:\n\n```python\nfaostat.get_data(code, pars={}, show_flags=False, null_values=False, https_proxy=None)\n```\n\nGiven the code of a Faostat dataset, returns the data as a list of tuples.\n*pars* is optional, but recommended to avoid Timeout Error due to too large query.\n\nTo download only a subset of the dataset, you need to pass *pars={key: value, ...}*:\n* key can be one or more of the following string: 'areas', 'years', 'elements', 'items';\n* value can be a number, a string or a list, from the codes obtained with get_areas, get_years, get_elements, get_items.\n\nSet *show_flags=True* if you want to download also the data flags.\n\n*https_proxy* is supposed to be used only if you need to use a proxy\nfor https and should be a list like: `[username, password, url:port]`.\n\nExample:\n```python\n>>> data = faostat.get_data('QCL',pars={'elements':[2312, 2313],'items':'221'})\n>>> data[40:44]\n[('QCL', 'Crops and livestock products', '2', 'Afghanistan', '5312', 'Area harvested', '221', 'Almonds, with shell', '2014', '2014', 'ha', 13703.0),\n ('QCL', 'Crops and livestock products', '2', 'Afghanistan', '5312', 'Area harvested', '221', 'Almonds, with shell', '2015', '2015', 'ha', 14676.0),\n ('QCL', 'Crops and livestock products', '2', 'Afghanistan', '5312', 'Area harvested', '221', 'Almonds, with shell', '2016', '2016', 'ha', 19481.0),\n ('QCL', 'Crops and livestock products', '2', 'Afghanistan', '5312', 'Area harvested', '221', 'Almonds, with shell', '2017', '2017', 'ha', 19793.0)]\n```\n\n### As a pandas dataframe:\n\n```python\nfaostat.get_data_df(code, pars={}, show_flags=False, null_values=False, https_proxy=None)\n```\n\nGiven the code of a Faostat dataset, returns the data as a pandas dataframe.\n\n*pars* is optional, but recommended to avoid Timeout Error due to too large query.\n\nTo download only a subset of the dataset, you need to pass *pars={key: value, ...}*:\n* key can be one or more of the following string: 'areas', 'years', 'elements', 'items';\n* value can be a number, a string or a list, from the codes obtained with get_areas, get_years, get_elements, get_items.\n\nSet *show_flags=True* if you want to download also the data flags.\n\n*https_proxy* is supposed to be used only if you need to use a proxy\nfor https and should be a list like: `[username, password, url:port]`.\n\nExample:\n```python\n>>> data_df = faostat.get_data_df('QCL',pars={'elements':[2312, 2313],'items':'221'})\n>>> data_df\n     Domain Code                        Domain  ... Unit     Value\n0            QCL  Crops and livestock products  ...   ha       0.0\n1            QCL  Crops and livestock products  ...   ha    5900.0\n2            QCL  Crops and livestock products  ...   ha    6000.0\n3            QCL  Crops and livestock products  ...   ha    6000.0\n4            QCL  Crops and livestock products  ...   ha    6000.0\n         ...                           ...  ...  ...       ...\n4038         QCL  Crops and livestock products  ...   ha  392722.0\n4039         QCL  Crops and livestock products  ...   ha  418436.0\n4040         QCL  Crops and livestock products  ...   ha  423949.0\n4041         QCL  Crops and livestock products  ...   ha  453034.0\n4042         QCL  Crops and livestock products  ...   ha  425302.0\n```\n\n\n## Bug reports and feature requests:\n\nPlease [open an issue][issue] or send a message to noemi.cazzaniga [at] polimi.it.\n\n\n## Disclaimer:\n\nDownload and usage of Faostat data is subject to FAO's general [terms and conditions][pol].\n\n\n## Data sources:\n\n* Faostat database: [online catalog][faoweb].\n\n\n## References:\n\n* Python package [pandas][pd]: Python Data Analysis Library.\n* Python package [eurostat][es]: Tools to read data from Eurostat.\n\n\n## History:\n\n### version 0.1.1 (2022):\n\n* First official release.\n\n\n\n[faoweb]: https://www.fao.org/faostat/en/#data\n[pol]: https://www.fao.org/contact-us/terms/en/\n[issue]: https://bitbucket.org/noemicazzaniga/faostat/issues/new\n[pd]: https://pandas.pydata.org/\n[es]: https://pypi.org/project/eurostat/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "faostat statistics data economics science",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "faostat",
    "package_url": "https://pypi.org/project/faostat/",
    "platform": null,
    "project_url": "https://pypi.org/project/faostat/",
    "project_urls": {
      "Source": "https://bitbucket.org/noemicazzaniga/faostat/src/master/"
    },
    "release_url": "https://pypi.org/project/faostat/0.1.1/",
    "requires_dist": [
      "pandas",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Faostat Python Package",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13500463,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ef301c21424bf92ec2c4a2a913cb1511165e644d62c0c9fa073bb3cf3a1a6ac",
          "md5": "b8761817eca4c0053dae2d050338acab",
          "sha256": "f853fbe7365ee2eaed13e96cf5a154335fe2c3deb102f81bba9cf17d6d0ee56d"
        },
        "downloads": -1,
        "filename": "faostat-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8761817eca4c0053dae2d050338acab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6481,
        "upload_time": "2022-04-13T10:19:01",
        "upload_time_iso_8601": "2022-04-13T10:19:01.214719Z",
        "url": "https://files.pythonhosted.org/packages/4e/f3/01c21424bf92ec2c4a2a913cb1511165e644d62c0c9fa073bb3cf3a1a6ac/faostat-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d1f0699e6921bc9abeb2b2134c5c04b229703ee650322c6dc5c11b98d278c8c",
          "md5": "febcb88c9cf33d0aa4bf08abae1c93f2",
          "sha256": "6558e5ed11aa4905409f264986f6e5620465d0653e92bd961740f407a63c213a"
        },
        "downloads": -1,
        "filename": "faostat-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "febcb88c9cf33d0aa4bf08abae1c93f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6985,
        "upload_time": "2022-04-13T10:19:03",
        "upload_time_iso_8601": "2022-04-13T10:19:03.184887Z",
        "url": "https://files.pythonhosted.org/packages/6d/1f/0699e6921bc9abeb2b2134c5c04b229703ee650322c6dc5c11b98d278c8c/faostat-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ef301c21424bf92ec2c4a2a913cb1511165e644d62c0c9fa073bb3cf3a1a6ac",
        "md5": "b8761817eca4c0053dae2d050338acab",
        "sha256": "f853fbe7365ee2eaed13e96cf5a154335fe2c3deb102f81bba9cf17d6d0ee56d"
      },
      "downloads": -1,
      "filename": "faostat-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b8761817eca4c0053dae2d050338acab",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6481,
      "upload_time": "2022-04-13T10:19:01",
      "upload_time_iso_8601": "2022-04-13T10:19:01.214719Z",
      "url": "https://files.pythonhosted.org/packages/4e/f3/01c21424bf92ec2c4a2a913cb1511165e644d62c0c9fa073bb3cf3a1a6ac/faostat-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d1f0699e6921bc9abeb2b2134c5c04b229703ee650322c6dc5c11b98d278c8c",
        "md5": "febcb88c9cf33d0aa4bf08abae1c93f2",
        "sha256": "6558e5ed11aa4905409f264986f6e5620465d0653e92bd961740f407a63c213a"
      },
      "downloads": -1,
      "filename": "faostat-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "febcb88c9cf33d0aa4bf08abae1c93f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6985,
      "upload_time": "2022-04-13T10:19:03",
      "upload_time_iso_8601": "2022-04-13T10:19:03.184887Z",
      "url": "https://files.pythonhosted.org/packages/6d/1f/0699e6921bc9abeb2b2134c5c04b229703ee650322c6dc5c11b98d278c8c/faostat-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}