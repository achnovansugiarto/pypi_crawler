{
  "info": {
    "author": "Matthew Brett",
    "author_email": "matthew.brett@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# (Multiple) component marking\n\nSome tools I use when marking homework with with single or multiple Jupyter\nnotebook components.\n\nThe notebooks may have questions for manual marking, and plots for marking.\n\nThey assume some Canvas](https://www.instructure.com/canvas) conventions of\nnaming files, and grade output CSV format.\n\nThe tools consist primarily command line utilities, with some supporting code\nin a utility library.\n\n## Quickstart\n\n### For single component submission:\n\n```\nCOMPONENTS_DIR=components\nmcp-check-unpack\nmcp-prepare-components\nmcp-find-duplicates $COMPONENTS_DIR/*/*.Rmd\nmcp-cp-models\nmcp-extract-manual\nrnbg-allow-raise $COMPONENTS_DIR/*/*.Rmd --show-error\nmcp-extract-plots\nmcp-grade-nbs\n# Review `<component>/marking/autograde.md`.\n# Rerun after any edits.\nmcp-grade-nbs\nmcp-grade-component\nmcp-scale-combine\n```\n\n### For multiple component submission:\n\n```\nCOMPONENTS_DIR=components\nmcp-check-unpack\nmcp-prepare-components\nmcp-find-duplicates $COMPONENTS_DIR/*/*.Rmd\nmcp-cp-models\n# For each component\n    COMPONENT=my_component\n    rnbg-allow-raise $COMPONENTS_DIR/$COMPONENT/*.Rmd --show-error\n    mcp-grade-nbs $COMPONENT\n    # Review `$COMPONENT/marking/autograde.md`.\n    # Rerun after any edits.\n    mcp-grade-nbs $COMPONENT\n    mcp-extract-manual $COMPONENT\n    mcp-extract-plots $COMPONENT\n    mcp-grade-component $COMPONENT\n# Finally\nmcp-scale-combine\n```\n\n## Getting set up\n\nMake a virtual environment / Conda environment for running the marking code, and set yourself up in that environment:\n\n```\npython -m virtualenv ~/envs/marking-env\nsource ~/envs/marking-env/bin/activate\n```\n\nor\n\n```\nconda create --name marking-env\nconda activate marking-env\nconda install pip\n```\n\nTo install locally from the repository, you will need\n[flit](https://pypi.org/project/flit):\n\n```\npip install flit\n```\n\nThen install MCPMark with its dependencies:\n\n```\ncd mcpmark  # Directory containing this README\nflit install -s\n```\n\nTest all is working as expected with:\n\n```\npip install -r test-requirements.txt\npytest mcpmark\n```\n\n## A typical marking run\n\n*   Make sure you have activated the environment above with e.g. `source\n    ~/envs/marking-env` or `conda activate marking-env`\n* Make a directory for marking, call this `homework1` or similar.\n* `cd homework1`\n* Download submissions (`.zip` files for multiple notebook submission, `.ipynb`\n  files for single notebook submission). Download some directory e.g.\n  `submissions` in current directory. There should be one `.zip` file per\n  student in the case of multiple notebook submissions, or one `.ipynb` file\n  per student in case of single submissions.\n* Download Canvas marks CSV file to this (`homework1`) directory.\n* Edit `assign_config.yaml` --- see `doc/` for an example.   Use the\n  `components` field to name and define components.  Each component corresponds\n  to one notebook, so there will be one component for single notebook\n  submissions, and multiple component for multiple notebook submissions.\n* In what follows below, a \"component name\" is the name you have given for\n  a single notebook assignment in the `assign_config.yaml` file.\n* Develop script to identify notebooks by their content - see `doc` for an\n  example, and `mcpmark/cli/prepare_components.py` for code using this script.\n  This allows Mcpmark to check that a student does have a matching notebook for\n  each required component.\n* Run `mcp-check-unpack`.  If any errors arise, check and maybe change the\n  submission filenames.\n* Run `mcp-prepare-components`.  This will check that all the students in the\n  relevant student files have got matching notebook submissions for all\n  required components.  The error message should tell you what is missing.  If\n  you discover that the warning is a false positive, and you were not expecting\n  this student to submit (yet), then fill in their ID in the `known_missing`\n  list of the `assign_config.yaml` file, to tell Mcpmark not to check their\n  submissions.  Then re-run `mcp-prepare-components`, repeating until you get\n  no errors.\n* In what follows, you can generally omit the `<component_name>` argument when\n  you only have one component.\n* For items below, assume script `rerun` is on the path and has contents\n  `while true; do $@; done`\n* Per notebook / component:\n    * Develop tests in `model/<component_name>/tests` directory.\n    * Test tests with `grade_oknb.py`.\n    * Copy tests etc into components directory with `mcp-cp-models`\n    * e.g. `mcp-find-duplicates components/my_component/*.Rmd` to analyze\n      duplicates, write summary into some file, say `report.md`.\n    * Check notebook execution with `mcp-run-notebooks <path_to_notebooks>`.\n      Consider running this with e.g. `rerun mcp-run-notebooks\n      components/pandering` to continuously test notebooks.\n    * Move any irreparable notebooks to `broken` directory, and mark in\n      `marking/broken.csv` file.\n    * `mcp-extract-manual <component_name>` (component name optional for single\n      component submissions). Edit notebooks where manual component not found.\n      Maybe e.g. `rerun mcp-extract-manual pandering`.\n    * Mark generated manual file in `<component>/marking/*_report.md`.\n    * Check manual scoring with something like `mcp-manual-scores\n      components/lymphoma/dunleavy_plausible_report.md`.  Or you can leave\n      that until grading the whole component with `mcp-grade-component`.\n    * `mcp-extract-plots <component_name>` (component name optional for single\n      component submissions).  Edit `marked/plot_nbs.ipynb` to add marks.\n    * Run auto-grading with `mcp-grade-nbs <component_name>`\n      (`<component_name>`) is optional if a single component.\n    * Review `<component>/marking/autograde.md`.\n    *   Update any manual fixes with `#M: ` notation to add / subtract marks.\n        These are lines in code cells / chunks, of form `#M:\n        <score_increment>` -- e.g. `#M: -2.5`.  They reach the final score via\n        `mcp-grade-components`.\n    * Final run of `mcp-grade-nbs`\n    * `mcp-grade-component <component_name>`; (`<component_name>`) is optional\n      if a single component.\n\nWhen done:\n\n* `mcp-scale-combine` to rescale the component marks to their out-of figure\n  given in `assign_config.yaml`, and generate the summary `.csv` file.  Do this\n  even when there is only one component (in order to do the rescaling).\n* `mcp-export-marks` to convert the output of `ncp-rescale-combines` to\n  a format for import into Canvas.\n\n## Utilities\n\n* `mcputils` - various utilities for supporting the scripts.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matthew-brett/mcpmark",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "mcpmark",
    "package_url": "https://pypi.org/project/mcpmark/",
    "platform": null,
    "project_url": "https://pypi.org/project/mcpmark/",
    "project_urls": {
      "Homepage": "https://github.com/matthew-brett/mcpmark"
    },
    "release_url": "https://pypi.org/project/mcpmark/0.1/",
    "requires_dist": [
      "gradools",
      "rnbgrader>=0.2"
    ],
    "requires_python": ">=3.6",
    "summary": "Tools for grading multiple notebook component exercises.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16463559,
  "releases": {
    "0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "dcb781871707006a829206f825eadd4dfed9fdacebc5916169216aa395c3c27f",
          "md5": "715fbe38d32a85cafe70aad1fea8ba41",
          "sha256": "7d725caa5ba290db02f0b0ccca8bd8407906dd19f8356f29179fedfde0a96b0e"
        },
        "downloads": -1,
        "filename": "mcpmark-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "715fbe38d32a85cafe70aad1fea8ba41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39057,
        "upload_time": "2023-01-17T21:25:46",
        "upload_time_iso_8601": "2023-01-17T21:25:46.647472Z",
        "url": "https://files.pythonhosted.org/packages/dc/b7/81871707006a829206f825eadd4dfed9fdacebc5916169216aa395c3c27f/mcpmark-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "46275c5d2538a643db75c5654bb74455620fcd3f6439fa29a2af5101fa082dbb",
          "md5": "b609391d83d675883e7fffb39f42ac05",
          "sha256": "8b32be012a8852b4ec3c48f04b638d1597c0a1cf64f5202b21b6201c1cb6c814"
        },
        "downloads": -1,
        "filename": "mcpmark-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b609391d83d675883e7fffb39f42ac05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31794,
        "upload_time": "2023-01-17T21:25:48",
        "upload_time_iso_8601": "2023-01-17T21:25:48.699078Z",
        "url": "https://files.pythonhosted.org/packages/46/27/5c5d2538a643db75c5654bb74455620fcd3f6439fa29a2af5101fa082dbb/mcpmark-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "dcb781871707006a829206f825eadd4dfed9fdacebc5916169216aa395c3c27f",
        "md5": "715fbe38d32a85cafe70aad1fea8ba41",
        "sha256": "7d725caa5ba290db02f0b0ccca8bd8407906dd19f8356f29179fedfde0a96b0e"
      },
      "downloads": -1,
      "filename": "mcpmark-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "715fbe38d32a85cafe70aad1fea8ba41",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39057,
      "upload_time": "2023-01-17T21:25:46",
      "upload_time_iso_8601": "2023-01-17T21:25:46.647472Z",
      "url": "https://files.pythonhosted.org/packages/dc/b7/81871707006a829206f825eadd4dfed9fdacebc5916169216aa395c3c27f/mcpmark-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "46275c5d2538a643db75c5654bb74455620fcd3f6439fa29a2af5101fa082dbb",
        "md5": "b609391d83d675883e7fffb39f42ac05",
        "sha256": "8b32be012a8852b4ec3c48f04b638d1597c0a1cf64f5202b21b6201c1cb6c814"
      },
      "downloads": -1,
      "filename": "mcpmark-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b609391d83d675883e7fffb39f42ac05",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31794,
      "upload_time": "2023-01-17T21:25:48",
      "upload_time_iso_8601": "2023-01-17T21:25:48.699078Z",
      "url": "https://files.pythonhosted.org/packages/46/27/5c5d2538a643db75c5654bb74455620fcd3f6439fa29a2af5101fa082dbb/mcpmark-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}