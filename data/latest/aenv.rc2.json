{
  "info": {
    "author": "MartinWiechmann",
    "author_email": "martin.wiechmann.office@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security"
    ],
    "description": "# AEnv\n\n[![OS](https://img.shields.io/badge/Runs%20on%3A-Linux%20%7C%20Mac%20%7C%20Windows-green)]() [![RunsOn](https://img.shields.io/badge/Used%20technologies-AWS%20%7C%20Python%203-green)]() [![RunsOn](https://img.shields.io/github/license/MartinWie/AEnv)](https://github.com/MartinWie/AEnv/blob/master/LICENSE) [![Open Source](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://opensource.org/)\n\n![AEnv](https://github.com/MartinWie/AEnv/blob/master/AEnv_logo.png)\n\nA Python-based CLI tool to simplify the process of fetching and injecting environment variables from AWS Parameter Store.\n\n## Table of Contents\n\n1. [Description](#description)\n2. [Installation](#installation)\n3. [Usage](#Usage)\n4. [Setup](#Setup)\n5. [Permissions](#Permissions)\n6. [Concept](#Concept)\n7. [Access-parameter-store-entries](#Access-parameter-store-entries)\n8. [Authentication](#Authentication)\n9. [Todos](#Todos)\n10. [Acknowledgments](#Acknowledgments)\n11. [License](#License)\n\n## Description\n\nThis CLI tool (`aenv`) allows you to fetch environment variables from AWS Parameter Store, injecting them into your local environment for use in your applications. The tool also supports authentication with MFA, including Yubikeys.\n\n\n\n## Installation\n\n### Prerequisites\n\n* Install python3 and pip\n\n* [Install AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)\n* Boto3 (Will be installed with the aenv package)\n  * Windows: [setup Boto3 credentials](https://pypi.org/project/boto3/)\n\n\n### Main Package (aenv)\n\n```\npip install aenv\n```\n\n\n\n## Usage\n\n```\naenv --help\n# or\naenv -h\n```\n\nAll current options:\n```\naenv [-s <service/application>] [-i] [-n] [-e <env>] [-t <2fa key>] [-T] [-Y] [-u <aws username>] [-a <account number>] [-p <aws profile>] [-r <region>] <command>\n```\n\n| Option | explanation | sample | comment \n| :- | :- | :- | :-\n|-h | Shows help | aenv -h |\n|-i | Starts aenv in interactive mode | aenv -i | Gives you a command line that you can interact with |\n|-s \\<service/application> | For which service should the environment variables be loaded? | aenv -s CustomerService\n|-S | Sets a default service for aenv and writes it to a config file | aenv -S CustomerService | from now on \"CustomerService\" is the default service which means \"-s CustomerService\" is redundant \n|-n | Do not query the parameter store at all  | aenv -n | Can be used to auth the current session with MFA\n|-e \\<env> | For which environment should the environment variables be loaded? For example Dev, Test or Prod (permission required) | aenv -e Prod | \n|-t \\<2fa key> | Takes the 2FA key from your aws account | aenv -t 987123\n|-T | Lets you type in the 2FA key from your aws account during runtime | aenv -T | When you run your command aenv will ask for the token |\n|-Y | Uses Yubikey for MFA auth | aenv -Y | During runtime aenv will use ykman to fetch the MFA-Key from your yubikey\n|-r \\<region> | Overwrites temporary the awscli default region | aenv -r eu-central-1 | aenv will use the given region for example Frankfurt\n|-q | Quiet mode (less output) | aenv -q |\n|-u \\<aws username> | Sets a specific username combined with -a gives you a faster runtime (otherwise this data needs to be retrieved via aws) | aenv -u user@example.de |\n|-a \\<account number> | Sets a specific account number combined with -u gives you a faster runtime (otherwise this data needs to be retrieved via aws) | aenv -a 999999999999 | \n|-p \\<aws profile> | If multiple aws profiles are available you can choose the profile otherwise aenv will use the default profile | aenv -p testUser1\n|-c \\<aws profile> | Container mode(enable this to make aenv work in ecs and codebuild) | aenv -c | [permissions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html)\n|\\<command> | Is the command to execute with environment variables injected. | aenv code | Will run VS Code with access to given environment variables\n\n\n\n## Setup\n\nLets start with setting up a simple example service. Let's call it **UserService**. \n\nThe **UserService** needs a **database hostname**, a **database username** and a **database password**. \n\nLet's assume, we have two environments, \"Dev\" and \"Test\" and we want to inject the correct **UserService**,  **database hostname**,... for the related environment.\n\nStep 1 is to create the AWS parameter store entries.\nLet's create two entries:\n\n```\n/Dev/UserService/DB/hostname\n# and \n/Test/UserService/DB/hostname\n```\n\nBoth are SecureString, that hold the values:\n```\ndb.dev.example.com for /Dev/UserService/DB/hostname\nand\ndb.test.example.com for /Test/UserService/DB/hostname\n```\n\nStep 2 is to fetch those values and have them available as environment variables.\n\nFor the **UserService** variables on Dev run:\n\n```\naenv -e Dev -s UserService \n```\nThis command fetches all entries from the parameter store with the path /Dev/UserService/* and makes them available as environment variables.\n\nIf you just want to echo out the DB hostname we created (/Dev/UserService/DB/hostname) you can run:\n\n```\naenv -e Dev -s UserService echo '$SECRET_USERSERVICE_DB_HOSTNAME'\n```\n\nYou can also run your service with aenv to have the correct DB hostname available in the service as an environment variable.\nThe call for a Python or JVM service would be:\n\n```\naenv -e Dev -s UserService java -jar service.jar\n# or\naenv -e Dev -s UserService python service2.py\n```\n\nBoth services now have access to the environment variable \"SECRET_USERSERVICE_DB_HOSTNAME\" containing the value that we defined for \"/Dev/UserService/DB/hostname\".\n\n## Permissions\n\n### Permissions (User)\n\nHere is the minimal suggested set of IAM permissions to use aenv for all services that can be found for our Dev environment:\n\n(Do not forget to adapt to account ID(123456789098) to your own )  \n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:GetParametersByPath\",\n                \"ssm:GetParameters\",\n                \"ssm:ListTagsForResource\",\n                \"ssm:GetParameter\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ssm:*:123456789098:parameter/Dev/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"ssm:DescribeParameters\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\nThese permissions allow to fetch all entries for any service in the Dev environment.\n\nFor example, fetching all environment variables for a service called UserService:\n\n```\naenv -e Dev -s UserService\n```\n\nTo further limit access to only allow loading environment variables for a specific service like \"UserService\" we need to adapt the \"Resource\":\n\n```\n\"Resource\": [\n                \"arn:aws:ssm:*:123456789098:parameter/Dev/UserService/*\"\n            ]\n```\n\n\n\n#### Permissions (AWS)\n\nThis is a work in progress!\n\nCurrently, the yubikey needs to be added as a **virtual mfa** and needs to be the **first** device in our Multi-factor authentication devices.\nFeel free to also add your Yubikey as a hardware mfa **afterwards**.(The AWS web console works flawless with multiple mfa's)\n\n```\npip install --user yubikey-manager\n```\n[Official documentation](https://docs.yubico.com/software/yubikey/tools/ykman/Install_ykman.html)\n\n\n## Permissions (IAM policies / Instance roles)\n\n| Permission | Used in the code | Documentation | Comment \n| :- | :- | :- | :-\n| \"ec2:DescribeTags\" | clientEC2.describe_tags() | https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTags.html |\n| \"sts:GetCallerIdentity\" | clientSTS.get_caller_identity() | https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html | Optional(No permissions are required to perform this operation.)\n| \"sts:GetSessionToken\" | clientSTS.get_session_token() | https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html |\n| \"ssm:GetParametersByPath\" | clientSSMMFA.get_parameters_by_path() | https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html |\n| \"iam:ListMFADevices\" | boto3.client('iam').list_mfa_devices() | https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_iam_mfa-selfmanage.html | Optional! (At the moment not in use but as soon aws API supports hardware tokens this can be enabled to let aenv support hardware MFA's) \n\n**tldr Minimal permissions:**\n\n“ec2:DescribeTags”\n\n“sts:GetSessionToken”\n\n“ssm:GetParametersByPath”\n\n### Advanced permission 1 (Enforce MFA authentication for accessing Prod parameters)\n\nTo enforce MFA authentication for all Prod parameters you can make use of the condition \"MultiFactorAuthPresent\" in your IAM permission.\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\",\n                \"ssm:DeleteParameter\",\n                \"ssm:GetParameterHistory\",\n                \"ssm:GetParametersByPath\",\n                \"ssm:GetParameters\",\n                \"ssm:ListTagsForResource\",\n                \"ssm:GetParameter\",\n                \"ssm:DeleteParameters\"\n            ],\n            \"Resource\": [\n                \"arn:aws:ssm:*:123456789098:parameter/Prod/*\"\n            ],\n            \"Condition\": {\n                \"Bool\": {\n                    \"aws:MultiFactorAuthPresent\": \"true\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"VisualEditor1\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"ssm:DescribeParameters\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n### Advanced permission 2 (Enforce MFA authentication for AWS feature / function)\n\nAdd the condition \"MultiFactorAuthPresent\" to your IAM permission:\n\n```\n    \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n```\n\nSample for sts:AssumeRole: \n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Principal\": {\"AWS\": \"ACCOUNT-B-ID\"},\n    \"Action\": \"sts:AssumeRole\",\n    \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n  }\n}\n```\n\nNow you need MFA authentication to run assume role commands.\nSample call for this would be:\n\n```\naenv -q -n -Y aws sts assume-role --role-arn \"arn:aws:iam::123456789012:role/example-role\" --role-session-name AWSCLI-Session\n\n# -q removes the unnecessary output\n# -n puts aenv in only authentication mode\n# -Y authenticates the session with your YubiKey, alternatively you could use -t or -T\n```\n\n\n## Concept\n\nAEnv uses the parameter store path to define the environment and service name, following this schema:\n\n```\n/<Environment>/<Service-Name>/\n\n# Which could look like:\n/Prod/CustomerManagement/DB/USER\n# Or\n/Prod/CustomerManagement/DB/PASSWORD\n```\n\nHaving those two in place would enable our **CustomerManagement** service running in our Prod environment to access, the environment variables:\nSECRET_CUSTOMERMANAGEMENT_DB_USER\nand \nSECRET_CUSTOMERMANAGEMENT_DB_PASSWORD\n\nWith both parameters in place, your **CustomerManagement** application/service, launched with aenv, could now access the database with the provided username and password.\n\n```\naenv -e Prod -s CustomerManagement java -jar service.jar\n```\n\n#### Format for these environment variables:\n\nEvery environment variable that is loaded with aenv starts with \"SECRET_\".\n\nThen the service-name and path, separated by underliners. (of course in upper case)\n\nFor example: \n\n```\n/Prod/CustomerManagement/DB/USER\n```\n\nwould be accessible with:\n\n```\nSECRET_CUSTOMERMANAGEMENT_DB_USER\n```\n\nor\n\n```\n/Prod/CustomerManagement/DB/PASSWORD/USER1\n```\n\nwould be accessible with:\n\n```\nSECRET_CUSTOMERMANAGEMENT_DB_PASSWORD_USER1\n```\n\nMore about environment variables: [Guide to Unix/Environment Variables](https://en.wikibooks.org/wiki/Guide_to_Unix/Environment_Variables)\n\n\n## Access-parameter-store-entries\n\n#### Testing single variables\n**Linux/Mac**\n\n```\naenv -e Dev -s UserService echo '$SECRET_USERSERVICE_UI_URL'\n```\n\nor\n\n**Windows**\n\n```\naenv -e Dev -s UserService echo %SECRET_USERSERVICE_UI_URL%  \n```\n\n\n### How to access the environment variables in Kotlin and Python\n\n#### How to access the environment variables\n\nTo access those environment variables you have to run your application/service with aenv.\n\n```\naenv -e Dev -s UserService java -jar service.jar\n//or\naenv -e Dev -s UserService python service2.py\n```\n\nNow these two services have access to all Dev environment variables for the UserService.\nHere are easy examples for Python and Kotlin:\n\n**Python:**\n\n```\nimport os\nos.getenv('SECRET_USERSERVICE_HOSTNAME')\n\n# For example conneting to a host depending on the environment:\n....\n\nhostname = os.getenv('SECRET_USERSERVICE_HOSTNAME')\n....\n\n```\n\n**Kotlin:**\n\n```\nval envVar : String? = System.getenv(\"SECRET_USERSERVICE_HOSTNAME\")\n```\n\n### Bonus:\n#### Running a local application with access to environment variables of a given service\n\nLinux/Mac running IntelliJ with Test environment variables for the **UserService**\n\n```\naenv -e Test -s UserService \"/Applications/IntelliJ\\ IDEA\\ CE.app/Contents/MacOS/idea\"\n```\n\nThis can come in handy if you want to debug something that only seems to occure in the Test environment. \n\n\n\n## Authentication\n\n**AWS Server:**\n\nEasy!\n\nDone by boto3. Boto3 automatically uses the in the instance role defined permissions.\n\n(Details \"Permissions\" section)\n\n**Developer:**\n\nboto3 uses the aws CLI's authentication so make sure you set this up before ;)\n\n[AWS CLI](https://aws.amazon.com/cli/)\n\nBy default, aenv uses the aws CLI default profile, but of course, you can choose the profile, that you want to use, simply do:\n\n```\naenv -p <awscli profile name>\n#or \naenv -h \n#to see more configuration options\n```\n\n(More details in the \"Usage\" section)\n\n**MFA**\n\nMulti-factor authentication is highly suggested!\n\nhttps://lmgtfy.com/?q=why+mfa+is+important\n\nOk, all jokes aside especially for production parameters your IAM users should require MFA authentication at least for production parameters.\n\nAt least in my humble opinion, this should be a \"better be safe than sorry\" point.\n\nEspecially for your production systems!\n\nAEnv supports multiple MFA options, details in the \"Usage\" section, here the short overview:\n\n```\n# Normal virtual mfa token:\naenv -t <TOKEN>\n\n# Asks for the token during runtime:\naenv -T\n\n# leads to an interactive token query during runtime:\n$ aenv -T\n$ Please enter token: \n\n#Yubikey Authenticator:\naenv -Y\n\n```\n\n## Todos\n\n* refactor whole code base\n* Add better permission error handling (Especially the auth part)\n* Add check if service exists/can be read with proper error message\n* Update and correct -h / --help output\n* Add regex filter for only loading specific variables\n* Add regex filter to leave out variables from loading\n* remove -q and add -v mode \n* add -P to save a default profile\n* Update initial setup instructions + console output for this(ykman + output for missing service)\n* Option to list all available environments / services(discover/list env / list services)\n* Check for ykman on -Y calls improve output\n* Currently only the fist MFA device of any given account is used -> add mfa device selection + option for default selection\n* cleanup/refactor documentation / improve overall structure\n* add auth only mode(no env and no service name given)\n* Add more information about container mode and necessary IAM permissions\n* Enhance local profile/config setup/usage\n* Handle the region in the same way services are handled\n* Load multiple services at once instead of concatenating multiple aenv calls ( \"aenv -s Service1 aenv -s Service2 \")\n* Add feature for only loading certain variables to speed up loading\n* Add assume role feature to support this setup more ease -> https://aws.amazon.com/de/blogs/security/enhance-programmatic-access-for-iam-users-using-yubikey-for-multi-factor-authentication/\n* Add testing\n\n## Acknowledgments \n\n**Inspired by:**\n\n* **Gunnar Zarncke** - [LinkedIn](https://www.linkedin.com/in/gunnar-zarncke-952134163/) and his/troy gmbh's opensource credo projekt - [Git Credo](https://bitbucket.org/infomadis/troy-credo-aws/)\n\n**Bug reports:**\n\n* **[Arif PEHLİVAN](https://github.com/mrpehlivan)** \n\n* **[Carlos Freund](https://github.com/happyherp)**\n\n## License\n\nMIT [Link](https://github.com/MartinWie/AEnv/blob/master/LICENSE)\n\n## Support me :heart: :star: :money_with_wings:\nIf this project provided value, and you want to give something back, you can give the repo a star or support by buying me a coffee.\n\n<a href=\"https://buymeacoffee.com/MartinWie\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-blue.png\" alt=\"Buy Me A Coffee\" width=\"170\"></a>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/MartinWie/AEnv/archive/2.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MartinWie/AEnv",
    "keywords": "aws credo security parameterstore ssm cloud password aenv",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aenv",
    "package_url": "https://pypi.org/project/aenv/",
    "platform": null,
    "project_url": "https://pypi.org/project/aenv/",
    "project_urls": {
      "Download": "https://github.com/MartinWie/AEnv/archive/2.0.2.tar.gz",
      "Homepage": "https://github.com/MartinWie/AEnv"
    },
    "release_url": "https://pypi.org/project/aenv/2.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python 3 tool to fetch secure strings from the aws parameter store and injecting those into environment variables.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17500918,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b38fa4e08c838b467dcf7a5ca6d6be6328d5c7bc4bb41f5f9e97646f2b817904",
          "md5": "fe4838de20601aa0a412db07e8e60dd0",
          "sha256": "e8cd6e18fb6bc80a5556bc1aa8b0d9e23c6e94620feb3ebef32dd6c7af54f38e"
        },
        "downloads": -1,
        "filename": "aenv-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe4838de20601aa0a412db07e8e60dd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18589,
        "upload_time": "2022-11-29T10:54:04",
        "upload_time_iso_8601": "2022-11-29T10:54:04.071018Z",
        "url": "https://files.pythonhosted.org/packages/b3/8f/a4e08c838b467dcf7a5ca6d6be6328d5c7bc4bb41f5f9e97646f2b817904/aenv-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "601cea6052e92450015c97aa929e9b11c5d76dbb479eb9d9be9591ec0ccf244f",
          "md5": "014f99b6e55e131281b70f1edb480fde",
          "sha256": "300819dc806f0f44a413034a5f16170f5ce8b3ae6976f1df460899bdf389d192"
        },
        "downloads": -1,
        "filename": "aenv-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "014f99b6e55e131281b70f1edb480fde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17711,
        "upload_time": "2023-03-29T23:07:01",
        "upload_time_iso_8601": "2023-03-29T23:07:01.449892Z",
        "url": "https://files.pythonhosted.org/packages/60/1c/ea6052e92450015c97aa929e9b11c5d76dbb479eb9d9be9591ec0ccf244f/aenv-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "601cea6052e92450015c97aa929e9b11c5d76dbb479eb9d9be9591ec0ccf244f",
        "md5": "014f99b6e55e131281b70f1edb480fde",
        "sha256": "300819dc806f0f44a413034a5f16170f5ce8b3ae6976f1df460899bdf389d192"
      },
      "downloads": -1,
      "filename": "aenv-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "014f99b6e55e131281b70f1edb480fde",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17711,
      "upload_time": "2023-03-29T23:07:01",
      "upload_time_iso_8601": "2023-03-29T23:07:01.449892Z",
      "url": "https://files.pythonhosted.org/packages/60/1c/ea6052e92450015c97aa929e9b11c5d76dbb479eb9d9be9591ec0ccf244f/aenv-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}