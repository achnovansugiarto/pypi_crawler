{
  "info": {
    "author": "Kamran Kowsari",
    "author_email": "kk7nc@virginia.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing"
    ],
    "description": "|DOI| |Pypi| |arxiv| |werckerstatus| |appveyor| |BuildStatus| |PowerPoint| |researchgate| |Binder| |pdf| |GitHublicense| |twitter|\n\n\nReferenced paper : `RMDL: Random Multimodel Deep Learning for\nClassification <https://www.researchgate.net/publication/324922651_RMDL_Random_Multimodel_Deep_Learning_for_Classification>`__\n\nRandom Multimodel Deep Learning (RMDL):\n=======================================\n\nA new ensemble, deep learning approach for classification. Deep\nlearning models have achieved state-of-the-art results across many domains.\nRMDL solves the problem of finding the best deep learning structure\nand architecture while simultaneously improving robustness and accuracy\nthrough ensembles of deep learning architectures. RDML can accept\nasinput a variety data to include text, video, images, and symbolic.\n\n|RDL|\n\nOverview of RDML: Random Multimodel Deep Learning for classification. The\nRMDL includesnRandom modelswhich aredrandom model of DNN classifiers,\ncmodels of CNN classifiers, andrRNN classifiers wherer+c+d=n.\n\n\n|RMDL|\n\n\n\nRandom Multimodel Deep Learning (RDML) architecture for classification.\nRMDL includes 3 Random models, oneDNN classifier at left, one Deep CNN\nclassifier at middle, and one Deep RNN classifier at right (each unit could be LSTMor GRU).\n\n\nInstallation\n=============\n\nThere are git RMDL in this repository; to clone all the needed files,\nplease use:\n\nUsing pip\n----------\n\n.. code:: python\n\n        pip install RMDL\n\n\nUsing git\n---------\n.. code:: bash\n\n    git clone --recursive https://github.com/kk7nc/RMDL.git\n\nThe primary requirements for this package are Python 3 with Tensorflow. The requirements.txt file\ncontains a listing of the required Python packages; to install all requirements, run the following:\n\n.. code:: bash\n\n    pip -r install requirements.txt\n\nOr\n\n.. code:: bash\n\n    pip3  install -r requirements.txt\n\nOr:\n\n.. code:: bash\n\n    conda install --file requirements.txt\n\nDocumentation:\n==============\n\nThe exponential growth in the number of complex datasets every year requires  more enhancement in\nmachine learning methods to provide  robust and accurate data classification. Lately, deep learning\napproaches have been achieved surpassing results in comparison to previous machine learning algorithms\non tasks such as image classification, natural language processing, face recognition, and etc. The\nsuccess of these deep learning algorithms relys on their capacity to model complex and non-linear\nrelationships within data. However, finding the suitable structure for these models has been a challenge\nfor researchers. This paper introduces Random Multimodel Deep Learning (RMDL): a new ensemble, deep learning\napproach for classification.  RMDL solves the problem of finding the best deep learning structure and\narchitecture while simultaneously improving robustness and accuracy through ensembles of deep\nlearning architectures. In short, RMDL trains multiple models of Deep Neural Network (DNN),\nConvolutional Neural Network (CNN) and Recurrent Neural Network (RNN) in parallel and combines\ntheir results to produce better result of any of those models individually. To create these models,\neach deep learning model has been constructed in a random fashion regarding the number of layers and\nnodes in their neural network structure. The resulting RDML model can be used for various domains such\nas text, video, images, and symbolic. In this Project, we describe RMDL model in depth and show the results\nfor image and text classification as well as face recognition. For image classification, we compared our\nmodel with some of the available baselines using MNIST and CIFAR-10 datasets. Similarly, we used four\ndatasets namely, WOS, Reuters, IMDB, and 20newsgroup and compared our results with available baselines.\nWeb of Science (WOS) has been collected  by authors and consists of three sets~(small, medium and large set).\nLastly, we used ORL dataset to compare the performance of our approach with other face recognition methods.\nThese test results show that RDML model consistently outperform standard methods over a broad range of\ndata types and classification problems.\n\nDatasets for RMDL:\n==================\n\nText Datasets:\n--------------\n\n- `IMDB Dataset <http://ai.stanford.edu/~amaas/data/sentiment/>`__\n\n  * This dataset contains 50,000 documents with 2 categories.\n\n- `Reters-21578 Dataset <https://keras.io/datasets/>`__\n\n  * This dataset contains 21,578 documents with 90 categories.\n\n- `20Newsgroups Dataset <https://archive.ics.uci.edu/ml/datasets/Twenty+Newsgroups>`__\n\n  * This dataset contains 20,000 documents with 20 categories.\n\n-  Web of Science Dataset (DOI:\n   `10.17632/9rw3vkcfy4.2 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__)\n\n   -  Web of Science Dataset\n      `WOS-11967 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 11,967 documents with 35 categories which\n         include 7 parents categories.\n\n   -  Web of Science Dataset\n      `WOS-46985 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 46,985 documents with 134 categories\n         which include 7 parents categories.\n\n   -  Web of Science Dataset\n      `WOS-5736 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 5,736 documents with 11 categories which\n         include 3 parents categories.\n\nImage datasets:\n---------------\n\n-  `MNIST Dataset <https://en.wikipedia.org/wiki/MNIST_database>`__\n\n   -  The MNIST database contains 60,000 training images and 10,000\n      testing images.\n\n-  `CIFAR-10 Dataset <https://www.cs.toronto.edu/~kriz/cifar.html>`__\n\n   -  The CIFAR-10 dataset consists of 60000 32x32 colour images in 10\n      classes, with 6000 images per class. There are 50000 training\n      images and 10000 test images.\n\nFace Recognition\n----------------\n\n`The Database of Faces (The Olivetti Faces\nDataset) <http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html>`__\n\n-  The The Database of Faces dataset consists of 400 92x112 colour\n   images and grayscale in 40 person\n\nRequirements for RMDL :\n=======================\n\nGeneral:\n----------\n\n-  Python 3.5 or later see `Instruction\n   Documents <https://www.python.org/>`__\n\n-  TensorFlow see `Instruction\n   Documents <https://www.tensorflow.org/install/install_linux>`__.\n\n-  scikit-learn see `Instruction\n   Documents <http://scikit-learn.org/stable/install.html>`__\n\n-  Keras see `Instruction Documents <https://keras.io/>`__\n\n-  scipy see `Instruction\n   Documents <https://www.scipy.org/install.html>`__\n\n\nGPU (if you want to run on GPU):\n--------------------------------\n\n-  CUDAÂ® Toolkit 8.0. For details, see `NVIDIAâ€™s\n   documentation <https://developer.nvidia.com/cuda-toolkit>`__.\n\n-  The `NVIDIA drivers associated with CUDA Toolkit\n   8.0 <http://www.nvidia.com/Download/index.aspx>`__.\n\n-  cuDNN v6. For details, see `NVIDIAâ€™s\n   documentation <https://developer.nvidia.com/cudnn>`__.\n\n-  GPU card with CUDA Compute Capability 3.0 or higher.\n\n-  The libcupti-dev library,\n\nText and Document Classification\n=================================\n\n-  Download GloVe: Global Vectors for Word Representation `Instruction\n   Documents <https://nlp.stanford.edu/projects/glove/>`__\n\n   -  Set data directory into\n      `Global.py <https://github.com/kk7nc/RMDL/blob/master/src/Global.py>`__\n\n   -  if you are not setting GloVe directory, GloVe will be downloaded\n\nParameters:\n===========\n\nText_Classification\n-------------------\n\n.. code:: python\n\n         from RMDL import RMDL_Text\n\n.. code:: python\n\n       Text_Classification(x_train, y_train, x_test,  y_test, batch_size=128,\n                        EMBEDDING_DIM=50,MAX_SEQUENCE_LENGTH = 500, MAX_NB_WORDS = 75000,\n                        GloVe_dir=\"\", GloVe_file = \"glove.6B.50d.txt\",\n                        sparse_categorical=True, random_deep=[3, 3, 3], epochs=[500, 500, 500],  plot=True,\n                        min_hidden_layer_dnn=1, max_hidden_layer_dnn=8, min_nodes_dnn=128, max_nodes_dnn=1024,\n                        min_hidden_layer_rnn=1, max_hidden_layer_rnn=5, min_nodes_rnn=32,  max_nodes_rnn=128,\n                        min_hidden_layer_cnn=3, max_hidden_layer_cnn=10, min_nodes_cnn=128, max_nodes_cnn=512,\n                        random_state=42, random_optimizor=True, dropout=0.05):\n\n\nInput\n~~~~~\n\n- x_train\n- y_train\n- x_test\n- y_test\n\nbatch_size\n~~~~~~~~~~\n\n- batch_size: Integer. Number of samples per gradient update. If unspecified, it will default to 128.\n\nEMBEDDING_DIM\n~~~~~~~~~~~~~~\n\n- batch_size: Integer. Shape of word embedding (this number should be same with GloVe or other pre-trained embedding techniques that be used), it will default to 50 that used with pain of glove.6B.50d.txt file.\n\n\nMAX_SEQUENCE_LENGTH\n~~~~~~~~~~~~~~~~~~~\n\n- MAX_SEQUENCE_LENGTH: Integer. Maximum length of sequence or document in datasets, it will default to 500.\n\n\nMAX_NB_WORDS\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- MAX_NB_WORDS: Integer. Maximum number of unique words in datasets,  it will default to 75000.\n\n\nGloVe_dir\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- GloVe_dir: String. Address of GloVe or any pre-trained directory,  it will default to null which glove.6B.zip will be download.\n\n\nGloVe_file\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- GloVe_dir: String. Which version of GloVe or pre-trained word emending will be used,  it will default to glove.6B.50d.txt.\n\n- NOTE: if you use other version of GloVe EMBEDDING_DIM must be same dimensions.\n\nsparse_categorical\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- sparse_categorical: bool. When target's dataset is (n,1) should be True, it will default to True.\n\nrandom_deep\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_deep: Integer [3]. Number of ensembled model used in RMDL random_deep[0] is number of DNN, random_deep[1] is number of RNN, random_deep[0] is number of CNN, it will default to [3, 3, 3].\n\n\nepochs\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- epochs: Integer [3]. Number of epochs in each ensembled model used in RMDL epochs[0] is number of epochs used in DNN, epochs[1] is number of epochs used in  RNN, epochs[0] is number of epochs used in CNN, it will default to [500, 500, 500].\n\n\nplot\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- plot: bool. True: shows confusion matrix and accuracy and loss\n\n\nmin_hidden_layer_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_hidden_layer_dnn: Integer. Lower Bounds of hidden layers of DNN used in RMDL, it will default to 1.\n\n\nmax_hidden_layer_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_hidden_layer_dnn: Integer. Upper bounds of hidden layers of DNN used in RMDL, it will default to 8.\n\n\nmin_nodes_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_dnn: Integer. Lower bounds of nodes in each layer of DNN used in RMDL, it will default to 128.\n\nmax_nodes_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_nodes_dnn: Integer. Upper bounds of nodes in each layer of DNN used in RMDL, it will default to 1024.\n\nmin_hidden_layer_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_hidden_layer_rnn: Integer. Lower Bounds of hidden layers of RNN used in RMDL, it will default to 1.\n\n\nmax_hidden_layer_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- man_hidden_layer_rnn: Integer. Upper Bounds of hidden layers of RNN used in RMDL, it will default to 5.\n\n\nmin_nodes_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_rnn: Integer. Lower bounds of nodes (LSTM or GRU) in each layer of RNN used in RMDL, it will default to 32.\n\nmax_nodes_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_nodes_rnn: Integer. Upper bounds of nodes (LSTM or GRU) in each layer of RNN used in RMDL, it will default to 128.\n\n\nmin_hidden_layer_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_hidden_layer_cnn: Integer. Lower Bounds of hidden layers of CNN used in RMDL, it will default to 3.\n\n\nmax_hidden_layer_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_hidden_layer_cnn: Integer. Upper Bounds of hidden layers of CNN used in RMDL, it will default to 10.\n\n\nmin_nodes_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_cnn: Integer. Lower bounds of nodes (2D convolution layer) in each layer of CNN used in RMDL, it will default to 128.\n\nmax_nodes_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_cnn: Integer. Upper bounds of nodes (2D convolution layer) in each layer of CNN used in RMDL, it will default to 512.\n\nrandom_state\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_state : Integer, RandomState instance or None, optional (default=None)\n\n  * If Integer, random_state is the seed used by the random number generator;\n\n\nrandom_optimizor\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_optimizor : bool, If False, all models use adam optimizer.  If True, all models use random optimizers. it will default to True\n\n\ndropout\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- dropout: Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.\n\n\nImage_Classification\n---------------------\n\n.. code:: python\n\n         from RMDL import RMDL_Image\n\n.. code:: python\n\n         Image_Classification(x_train, y_train, x_test, y_test, shape, batch_size=128,\n                                  sparse_categorical=True, random_deep=[3, 3, 3], epochs=[500, 500, 500], plot=True,\n                                  min_hidden_layer_dnn=1, max_hidden_layer_dnn=8, min_nodes_dnn=128, max_nodes_dnn=1024,\n                                  min_hidden_layer_rnn=1, max_hidden_layer_rnn=5, min_nodes_rnn=32, max_nodes_rnn=128,\n                                  min_hidden_layer_cnn=3, max_hidden_layer_cnn=10, min_nodes_cnn=128, max_nodes_cnn=512,\n                                  random_state=42, random_optimizor=True, dropout=0.05)\n\nInput\n~~~~~\n- x_train\n- y_train\n- x_test\n- y_test\n\nshape\n~~~~~\n\n- shape: np.shape . shape of image. The most common situation would be a 2D input with shape (batch_size, input_dim).\n\nbatch_size\n~~~~~~~~~~\n\n- batch_size: Integer. Number of samples per gradient update. If unspecified, it will default to 128.\n\nsparse_categorical\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- sparse_categorical: bool. When target's dataset is (n,1) should be True, it will default to True.\n\nrandom_deep\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_deep: Integer [3]. Number of ensembled model used in RMDL random_deep[0] is number of DNN, random_deep[1] is number of RNN, random_deep[0] is number of CNN, it will default to [3, 3, 3].\n\n\nepochs\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- epochs: Integer [3]. Number of epochs in each ensembled model used in RMDL epochs[0] is number of epochs used in DNN, epochs[1] is number of epochs used in  RNN, epochs[0] is number of epochs used in CNN, it will default to [500, 500, 500].\n\n\nplot\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- plot: bool. True: shows confusion matrix and accuracy and loss\n\n\nmin_hidden_layer_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_hidden_layer_dnn: Integer. Lower Bounds of hidden layers of DNN used in RMDL, it will default to 1.\n\n\nmax_hidden_layer_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_hidden_layer_dnn: Integer. Upper bounds of hidden layers of DNN used in RMDL, it will default to 8.\n\n\nmin_nodes_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_dnn: Integer. Lower bounds of nodes in each layer of DNN used in RMDL, it will default to 128.\n\nmax_nodes_dnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_nodes_dnn: Integer. Upper bounds of nodes in each layer of DNN used in RMDL, it will default to 1024.\n\nmin_nodes_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_rnn: Integer. Lower bounds of nodes (LSTM or GRU) in each layer of RNN used in RMDL, it will default to 32.\n\nmax_nodes_rnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- maz_nodes_rnn: Integer. Upper bounds of nodes (LSTM or GRU) in each layer of RNN used in RMDL, it will default to 128.\n\n\nmin_hidden_layer_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_hidden_layer_cnn: Integer. Lower Bounds of hidden layers of CNN used in RMDL, it will default to 3.\n\n\nmax_hidden_layer_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- max_hidden_layer_cnn: Integer. Upper Bounds of hidden layers of CNN used in RMDL, it will default to 10.\n\n\nmin_nodes_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_cnn: Integer. Lower bounds of nodes (2D convolution layer) in each layer of CNN used in RMDL, it will default to 128.\n\nmax_nodes_cnn\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- min_nodes_cnn: Integer. Upper bounds of nodes (2D convolution layer) in each layer of CNN used in RMDL, it will default to 512.\n\nrandom_state\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_state : Integer, RandomState instance or None, optional (default=None)\n\n  * If Integer, random_state is the seed used by the random number generator;\n\n\nrandom_optimizor\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- random_optimizor : bool, If False, all models use adam optimizer.  If True, all models use random optimizers. it will default to True\n\n\ndropout\n~~~~~~~~~~~~~~~~~~~~~~~\n\n\n- dropout: Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.\n\n\nExample\n========\n\nMNIST\n-----\n\n-  The MNIST database contains 60,000 training images and 10,000 testing images.\n\nImport Packages\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n        from keras.datasets import mnist\n        import numpy as np\n        from RMDL import RMDL_Image as RMDL\n\n\nLoad Data\n~~~~~~~~~\n\n.. code:: python\n\n        (X_train, y_train), (X_test, y_test) = mnist.load_data()\n        X_train_D = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')\n        X_test_D = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')\n        X_train = X_train_D / 255.0\n        X_test = X_test_D / 255.0\n        number_of_classes = np.unique(y_train).shape[0]\n        shape = (28, 28, 1)\n\nUsing RMDL\n~~~~~~~~~~~\n\n.. code:: python\n\n        batch_size = 128\n        sparse_categorical = 0\n        n_epochs = [100, 100, 100]  ## DNN-RNN-CNN\n        Random_Deep = [3, 3, 3]  ## DNN-RNN-CNN\n        RMDL.Image_Classification(X_train, y_train, X_test, y_test, batch_size, shape, sparse_categorical, Random_Deep,\n                                n_epochs)\n\nIMDB\n-----\n\n-  This dataset contains 50,000 documents with 2 categories.\n\nImport Packages\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n        import sys\n        import os\n        from RMDL import text_feature_extraction as txt\n        from keras.datasets import imdb\n        import numpy as np\n        from RMDL import RMDL_Text as RMDL\n\nLoad Data\n~~~~~~~~~\n\n.. code:: python\n\n        print(\"Load IMDB dataset....\")\n        (X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=MAX_NB_WORDS)\n        print(len(X_train))\n        print(y_test)\n        word_index = imdb.get_word_index()\n        index_word = {v: k for k, v in word_index.items()}\n        X_train = [txt.text_cleaner(' '.join(index_word.get(w) for w in x)) for x in X_train]\n        X_test = [txt.text_cleaner(' '.join(index_word.get(w) for w in x)) for x in X_test]\n        X_train = np.array(X_train)\n        X_train = np.array(X_train).ravel()\n        print(X_train.shape)\n        X_test = np.array(X_test)\n        X_test = np.array(X_test).ravel()\n\nUsing RMDL\n~~~~~~~~~~~\n\n.. code:: python\n\n        batch_size = 100\n        sparse_categorical = 0\n        n_epochs = [100, 100, 100]  ## DNN--RNN-CNN\n        Random_Deep = [3, 3, 3]  ## DNN--RNN-CNN\n\n        RMDL.Text_Classification(X_train, y_train, X_test, y_test, batch_size, sparse_categorical, Random_Deep,\n                            n_epochs)\n\nWeb Of Science\n--------------\n\n-  Linke of dataset: |Data|\n\n   -  Web of Science Dataset\n      `WOS-11967 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 11,967 documents with 35 categories which\n         include 7 parents categories.\n\n   -  Web of Science Dataset\n      `WOS-46985 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 46,985 documents with 134 categories\n         which include 7 parents categories.\n\n   -  Web of Science Dataset\n      `WOS-5736 <http://dx.doi.org/10.17632/9rw3vkcfy4.2>`__\n\n      -  This dataset contains 5,736 documents with 11 categories which\n         include 3 parents categories.\n\nImport Packages\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n        from RMDL import text_feature_extraction as txt\n        from sklearn.model_selection import train_test_split\n        from RMDL.Download import Download_WOS as WOS\n        import numpy as np\n        from RMDL import RMDL_Text as RMDL\n\nLoad Data\n~~~~~~~~~\n.. code:: python\n\n        path_WOS = WOS.download_and_extract()\n        fname = os.path.join(path_WOS,\"WebOfScience/WOS11967/X.txt\")\n        fnamek = os.path.join(path_WOS,\"WebOfScience/WOS11967/Y.txt\")\n        with open(fname, encoding=\"utf-8\") as f:\n            content = f.readlines()\n            content = [txt.text_cleaner(x) for x in content]\n        with open(fnamek) as fk:\n            contentk = fk.readlines()\n        contentk = [x.strip() for x in contentk]\n        Label = np.matrix(contentk, dtype=int)\n        Label = np.transpose(Label)\n        np.random.seed(7)\n        print(Label.shape)\n        X_train, X_test, y_train, y_test = train_test_split(content, Label, test_size=0.2, random_state=4)\n\nUsing RMDL\n~~~~~~~~~~~\n.. code:: python\n\n        batch_size = 100\n        sparse_categorical = 0\n        n_epochs = [5000, 500, 500]  ## DNN--RNN-CNN\n        Random_Deep = [3, 3, 3]  ## DNN--RNN-CNN\n\n        RMDL.Text_Classification(X_train, y_train, X_test, y_test, batch_size, sparse_categorical, Random_Deep,\n                                n_epochs)\n\nReuters-21578\n-------------\n\n- This dataset contains 21,578 documents with 90 categories.\n\nImport Packages\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n         import sys\n         import os\n         import nltk\n         nltk.download(\"reuters\")\n         from nltk.corpus import reuters\n         from sklearn.preprocessing import MultiLabelBinarizer\n         import numpy as np\n         from RMDL import RMDL_Text as RMDL\n\nLoad Data\n~~~~~~~~~\n.. code:: python\n\n         documents = reuters.fileids()\n\n         train_docs_id = list(filter(lambda doc: doc.startswith(\"train\"),\n                                   documents))\n         test_docs_id = list(filter(lambda doc: doc.startswith(\"test\"),\n                                  documents))\n         X_train = [(reuters.raw(doc_id)) for doc_id in train_docs_id]\n         X_test = [(reuters.raw(doc_id)) for doc_id in test_docs_id]\n         mlb = MultiLabelBinarizer()\n         y_train = mlb.fit_transform([reuters.categories(doc_id)\n                                    for doc_id in train_docs_id])\n         y_test = mlb.transform([reuters.categories(doc_id)\n                               for doc_id in test_docs_id])\n         y_train = np.argmax(y_train, axis=1)\n         y_test = np.argmax(y_test, axis=1)\n\n\nUsing RMDL\n~~~~~~~~~~~\n.. code:: python\n\n         batch_size = 100\n         sparse_categorical = 0\n         n_epochs = [20, 500, 50]  ## DNN--RNN-CNN\n         Random_Deep = [3, 0, 0]  ## DNN--RNN-CNN\n\n         RMDL.Text_Classification(X_train, y_train, X_test, y_test, batch_size, sparse_categorical, Random_Deep,\n                               n_epochs)\n\n\nOlivetti Faces\n--------------\n\n- There are ten different images of each of 40 distinct subjects. For some subjects, the images were taken at different times, varying the lighting, facial expressions (open / closed eyes, smiling / not smiling) and facial details (glasses / no glasses). All the images were taken against a dark homogeneous background with the subjects in an upright, frontal position (with tolerance for some side movement).\n\nImport Packages\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n         from sklearn.datasets import fetch_olivetti_faces\n         from sklearn.model_selection import train_test_split\n         from RMDL import RMDL_Image as RMDL\n\nLoad Data\n~~~~~~~~~\n.. code:: python\n\n         number_of_classes = 40\n         shape = (64, 64, 1)\n         data = fetch_olivetti_faces()\n         X_train, X_test, y_train, y_test = train_test_split(data.data,\n                                                       data.target, stratify=data.target, test_size=40)\n         X_train = X_train.reshape(X_train.shape[0], 64, 64, 1).astype('float32')\n         X_test = X_test.reshape(X_test.shape[0], 64, 64, 1).astype('float32')\n\nUsing RMDL\n~~~~~~~~~~~\n.. code:: python\n\n         batch_size = 100\n         sparse_categorical = 0\n         n_epochs = [500, 500, 50]  ## DNN--RNN-CNN\n         Random_Deep = [0, 0, 1]  ## DNN--RNN-CNN\n         RMDL.Image_Classification(X_train, y_train, X_test, y_test, batch_size, shape, sparse_categorical, Random_Deep,\n                               n_epochs)\n\n\n\nMore Exanmple\n`link <https://github.com/kk7nc/RMDL/tree/master/Examples>`__\n\n|Results|\n\n\nError and Comments:\n----------------------\n\n\nSend an email to kk7nc@virginia.edu\n\nCitations\n---------\n\n.. code::\n\n    @inproceedings{Kowsari2018RMDL,\n    title={RMDL: Random Multimodel Deep Learning for Classification},\n    author={Kowsari, Kamran and Heidarysafa, Mojtaba and Brown, Donald E. and Jafari Meimandi, Kiana and Barnes, Laura E.},\n    booktitle={Proceedings of the 2018 International Conference on Information System and Data Mining},\n    year={2018},\n    DOI={https://doi.org/10.1145/3206098.3206111},\n    organization={ACM}\n    }\n\n.. |werckerstatus| image:: https://app.wercker.com/status/3a564158e809971e2f7416beba5d05af/s/master\n   :target: https://app.wercker.com/project/byKey/3a564158e809971e2f7416beba5d05af\n.. |BuildStatus| image:: https://travis-ci.org/kk7nc/RMDL.svg?branch=master\n   :target: https://travis-ci.org/kk7nc/RMDL\n.. |PowerPoint| image:: https://img.shields.io/badge/Presentation-download-red.svg?style=flat\n   :target: https://github.com/kk7nc/RMDL/blob/master/docs/RMDL.pdf\n.. |researchgate| image:: https://img.shields.io/badge/ResearchGate-RMDL-blue.svg?style=flat\n   :target: https://www.researchgate.net/publication/324922651_RMDL_Random_Multimodel_Deep_Learning_for_Classification\n.. |Binder| image:: https://mybinder.org/badge.svg\n   :target: https://mybinder.org/v2/gh/kk7nc/RMDL/master\n.. |pdf| image:: https://img.shields.io/badge/pdf-download-red.svg?style=flat\n   :target: https://github.com/kk7nc/RMDL/blob/master/docs/ACM-RMDL.pdf\n.. |GitHublicense| image:: https://img.shields.io/badge/licence-GPL-blue.svg\n   :target: ./LICENSE\n.. |RDL| image:: http://kowsari.net/onewebmedia/RDL.jpg\n.. |RMDL| image:: http://kowsari.net/onewebmedia/RMDL.jpg\n.. |Results| image:: http://kowsari.net/onewebmedia/RMDL_Results.png\n.. |Data| image:: https://img.shields.io/badge/DOI-10.17632/9rw3vkcfy4.6-blue.svg?style=flat\n   :target: http://dx.doi.org/10.17632/9rw3vkcfy4.6\n.. |Pypi| image:: https://img.shields.io/badge/Pypi-RMDL%201.0.5-blue.svg\n   :target: https://pypi.org/project/RMDL/\n.. |DOI| image:: https://img.shields.io/badge/DOI-10.1145/3206098.3206111-blue.svg?style=flat\n   :target: https://doi.org/10.1145/3206098.3206111\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/kk7nc/RMDL?branch=master&svg=true\n    :target: https://ci.appveyor.com/project/kk7nc/RMDL\n.. |arxiv| image:: https://img.shields.io/badge/arXiv-1805.01890-red.svg\n    :target: https://arxiv.org/abs/1805.01890\n.. |twitter| image:: https://img.shields.io/twitter/url/http/shields.io.svg?style=social\n    :target: https://twitter.com/intent/tweet?text=RMDL:%20Random%20Multimodel%20Deep%20Learning%20for%20Classification%0aGitHub:&url=https://github.com/kk7nc/RMDL&hashtags=DeepLearning,classification,MachineLearning,deep_neural_networks,Image_Classification,Text_Classification,EnsembleLearning\n\n\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kk7nc/RMDL",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "RMDL",
    "package_url": "https://pypi.org/project/RMDL/",
    "platform": "",
    "project_url": "https://pypi.org/project/RMDL/",
    "project_urls": {
      "Homepage": "https://github.com/kk7nc/RMDL"
    },
    "release_url": "https://pypi.org/project/RMDL/1.0.8/",
    "requires_dist": [
      "matplotlib (>=2.1.2)",
      "numpy (>=1.12.1)",
      "pandas (>=0.22.0)",
      "scipy",
      "tensorflow",
      "keras (>=2.0.9)",
      "scikit-learn (>=0.19.0)",
      "nltk (>=3.2.4)"
    ],
    "requires_python": "",
    "summary": "RMDL: Random Multimodel Deep Learning for Classification",
    "version": "1.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7608608,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b0fddee740c7fc07956637ad508e3671ec84e768e7f862ffb51698129876815",
          "md5": "0a96aed9d64b7937ca45740e21aadd87",
          "sha256": "4036d8fefce72903218b9b83eafe679568f82b25826ded0cfe16d67ebae89271"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a96aed9d64b7937ca45740e21aadd87",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23379,
        "upload_time": "2018-05-03T20:40:41",
        "upload_time_iso_8601": "2018-05-03T20:40:41.744284Z",
        "url": "https://files.pythonhosted.org/packages/0b/0f/ddee740c7fc07956637ad508e3671ec84e768e7f862ffb51698129876815/RMDL-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fafc7b88a3aee85e1836555276413219a4ba81c27ffdbad7ead46a3a055443f",
          "md5": "61b42f5282981f696b71d7090a03a07f",
          "sha256": "fe29164561cf2ea74af0543efb0001e5edbfc85c14c110066c30885a7f471237"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61b42f5282981f696b71d7090a03a07f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 30915,
        "upload_time": "2018-05-04T01:54:19",
        "upload_time_iso_8601": "2018-05-04T01:54:19.081405Z",
        "url": "https://files.pythonhosted.org/packages/1f/af/c7b88a3aee85e1836555276413219a4ba81c27ffdbad7ead46a3a055443f/RMDL-1.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d59c86fb0edfe3df69f0a5323ecc208f7d61e30c030f713d2ef005150b74b7d3",
          "md5": "2d488cc337cb2bacd3c13d16376c0fce",
          "sha256": "49417b03842c60b7fd7370151467d0b938c5d2f12f071facdea00ae1622aeffc"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d488cc337cb2bacd3c13d16376c0fce",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 41441,
        "upload_time": "2018-05-10T23:25:33",
        "upload_time_iso_8601": "2018-05-10T23:25:33.527880Z",
        "url": "https://files.pythonhosted.org/packages/d5/9c/86fb0edfe3df69f0a5323ecc208f7d61e30c030f713d2ef005150b74b7d3/RMDL-1.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c108eb40864cc66de142bb45fe59e55a42850ed7c8683d77d63342fdf9ebab4",
          "md5": "dea4dca0c5e233c96fe61ceeb79e0c38",
          "sha256": "d99feea8eff27afd60e3656cda94f9521cf7340fd4b8e473e4bcdcd70053f9fd"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dea4dca0c5e233c96fe61ceeb79e0c38",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 41299,
        "upload_time": "2018-05-10T23:55:49",
        "upload_time_iso_8601": "2018-05-10T23:55:49.059287Z",
        "url": "https://files.pythonhosted.org/packages/4c/10/8eb40864cc66de142bb45fe59e55a42850ed7c8683d77d63342fdf9ebab4/RMDL-1.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b84cf4f40cec03cc82c0f59edda88c163328a0f6347b87eb446e90cba58bc706",
          "md5": "6a030cded8a87e5353a661ed30ec1935",
          "sha256": "6b7017081bc993e22682c20caf4bb0e8bbdc5a878996aec83f825220b126c38a"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a030cded8a87e5353a661ed30ec1935",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 41374,
        "upload_time": "2018-05-11T20:53:32",
        "upload_time_iso_8601": "2018-05-11T20:53:32.995678Z",
        "url": "https://files.pythonhosted.org/packages/b8/4c/f4f40cec03cc82c0f59edda88c163328a0f6347b87eb446e90cba58bc706/RMDL-1.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181c7911d9b8ea3a95983d19720560963b3b809af7308a46a111756606ed928f",
          "md5": "b3458efd90d79b0496fa1ca29a382a02",
          "sha256": "8ffcf48919e1d05a0bac78f77ca1e06886c7a3f0230aa02bae72f375e9c40f72"
        },
        "downloads": -1,
        "filename": "RMDL-1.0.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3458efd90d79b0496fa1ca29a382a02",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 44467,
        "upload_time": "2020-07-01T18:26:53",
        "upload_time_iso_8601": "2020-07-01T18:26:53.390271Z",
        "url": "https://files.pythonhosted.org/packages/18/1c/7911d9b8ea3a95983d19720560963b3b809af7308a46a111756606ed928f/RMDL-1.0.8-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "181c7911d9b8ea3a95983d19720560963b3b809af7308a46a111756606ed928f",
        "md5": "b3458efd90d79b0496fa1ca29a382a02",
        "sha256": "8ffcf48919e1d05a0bac78f77ca1e06886c7a3f0230aa02bae72f375e9c40f72"
      },
      "downloads": -1,
      "filename": "RMDL-1.0.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3458efd90d79b0496fa1ca29a382a02",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 44467,
      "upload_time": "2020-07-01T18:26:53",
      "upload_time_iso_8601": "2020-07-01T18:26:53.390271Z",
      "url": "https://files.pythonhosted.org/packages/18/1c/7911d9b8ea3a95983d19720560963b3b809af7308a46a111756606ed928f/RMDL-1.0.8-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}