{
  "info": {
    "author": "Ryoma Sato",
    "author_email": "r.sato@ml.ist.i.kyoto-u.ac.jp",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Enumerating Fair Packages for Group Recommendations (WSDM 2022)\n\nWe proposed an efficient method to enumerate *all* fair packages with respect to envy-freeness and proportionality.\n\nPaper: https://arxiv.org/abs/2105.14423\n\n## 💿 Installation\n\n```\n$ pip install fape\n```\n\n## 💡 How to Use\n\nThis package is compatible with [graphillion](https://github.com/takemaru/graphillion) and [SAPPOROBDD](http://www.lab2.kuis.kyoto-u.ac.jp/minato/SAPPOROBDD/). Please install graphillion via\n\n```\n$ pip install graphillion\n```\n\n### Basic Usage\n\n`fape.construct_zdd` constructs ZDD and outputs a ZDD string. \n\n```python\nimport fape\nimport numpy as np\nfrom graphillion import setset\n\nm = 3\nn = 4\nR = np.array([\n    [10.0, 20.0, 5.0, 5.0],\n    [10.0, 5.0, 5.0, 30.0],\n    [10.0, 20.0, 5.0, 5.0],\n]) # 3 members x 4 itmes\n\nzdd_string = fape.construct_zdd(\n    R,\n    package_size=2,\n    tau=3,\n    criterion='proportionality',\n    delta=0.5\n)\nsetset.set_universe([i for i in range(n)])\nss = setset(setset.loads(zdd_string))\nfor r in ss:\n    print(r)\n# {0, 1}\n# {0, 2}\n# {0, 3}\n# {1, 3}\n\nweight = {\n    i: R[:, i].mean() for i in range(n)\n}\nfor r in ss.max_iter(weight):\n    print(r)\n    break\n# {1, 3}\n```\n\nIn this example, `delta = 0.5` means that each member likes the items with top talf ratings. Namely,\n\n* member 0 likes items 0 and 1,\n* member 1 likes items 0 and 3, and\n* member 2 likes items 0 and 1 (zero-indexed).\n\n`tau = 3` means that three members (i.e., all members) should be satisfied. `fape.construct_zdd` enumerates such packages. There are qualified four packages, {0, 1}, {0, 2}, {0, 3}, and {1, 3}.\n\n`weight` is a dictionary that stores the average preference of each item. `max_iter` iterates packages in the descreasing order of weights. In this example, package {1, 3} has the largest weight.\n\nA `graphillion.setset.setset` supports various operations, including union (`|`) and intersection (`&`). Please refer to the document of [graphillion](https://github.com/takemaru/graphillion) for more details.\n\n## 📝 Results\n\n|Dataset<br>Metric|MovieLens<br>Proportionality|MovieLens<br>Envyfreeness|MovieLens<br>Preference|MovieLens<br>TotalScore|Amazon<br>Proportionality|Amazon<br>Envyfreeness|Amazon<br>Preference|Amazon<br>TotalScore|\n|---|---|---|---|---|---|---|---|---|\n|Averanking| **1.000 ± 0.000** | 0.725 ± 0.156 | **0.911 ± 0.027** | 2.636 ± 0.171 | **1.000 ± 0.000** | 0.500 ± 0.125 | **0.939 ± 0.012** | 2.439 ± 0.126 |\n|LMRanking| 0.988 ± 0.037 | 0.588 ± 0.168 | 0.876 ± 0.036 | 2.451 ± 0.188 | 0.912 ± 0.263 | 0.425 ± 0.139 | 0.924 ± 0.031 | 2.261 ± 0.373 |\n|GreedyVar| 0.912 ± 0.080 | 0.750 ± 0.112 | 0.812 ± 0.035 | 2.474 ± 0.157 | 0.787 ± 0.202 | 0.637 ± 0.088 | 0.859 ± 0.031 | 2.284 ± 0.287 |\n|GreedyLM| 0.950 ± 0.061 | 0.775 ± 0.109 | 0.813 ± 0.036 | 2.538 ± 0.155 | 0.662 ± 0.159 | 0.600 ± 0.094 | 0.853 ± 0.031 | 2.115 ± 0.249 |\n|GFAR| 0.950 ± 0.061 | 0.762 ± 0.104 | 0.812 ± 0.038 | 2.525 ± 0.154 | 0.762 ± 0.142 | 0.650 ± 0.075 | 0.871 ± 0.025 | 2.284 ± 0.219 |\n|SPGreedy| **1.000 ± 0.000** | 0.525 ± 0.156 | 0.851 ± 0.041 | 2.376 ± 0.167 | 1.000 ± 0.000 | 0.375 ± 0.079 | 0.867 ± 0.015, | 2.242 ± 0.085 |\n|EFGreedy| 0.925 ± 0.127 | **1.000 ± 0.000** | 0.792 ± 0.053 | 2.717 ± 0.165 | 0.750 ± 0.244 | 0.838 ± 0.080 | 0.854 ± 0.027 | 2.441 ± 0.302 |\n|FAPE(ours, exact)| **1.000 ± 0.000** | **1.000 ± 0.000** | 0.888 ± 0.037 | **2.888 ± 0.037** | **1.000 ± 0.000** | **0.912 ± 0.057** | 0.913 ± 0.020 | **2.825 ± 0.064** |\n|FAPE(ours, 10th)| **1.000 ± 0.000** | **1.000 ± 0.000** | 0.887 ± 0.037 | 2.887 ± 0.037 | **1.000 ± 0.000** | **0.912 ± 0.057** | 0.911 ± 0.020 | 2.824 ± 0.064 |\n|FAPE(ours, 100th)| **1.000 ± 0.000** | **1.000 ± 0.000** | 0.881 ± 0.040 | 2.881 ± 0.040 | **1.000 ± 0.000** | 0.900 ± 0.050 | 0.905 ± 0.025 | 2.805 ± 0.058 |\n|FAPE(ours, random)| **1.000 ± 0.000** | **1.000 ± 0.000** | 0.720 ± 0.044 | 2.720 ± 0.044 | **1.000 ± 0.000** | 0.912 ± 0.057 | 0.878 ± 0.023 | 2.790 ± 0.069 |\n\nPlease refer to the paper for more details.\n\n## 🧪 How to Reproduce\n\n### Dependency of python scripts\n\nPlease install [graphillion](https://github.com/takemaru/graphillion) and [surprise](http://surpriselib.com/) via `pip install graphillion scikit-surprise`\n\n### Data\n\nYou can download and preprocess data by the following command. It may take time. Please use only MovieLens 100k/1m if it takes too much time.\n\n```\n$ bash download.sh\n```\n\n`100k.npy`, `1m.npy`, `10m.npy`, `20m.npy`, and `25m.npy` are variants of the MovieLens dataset. `home_and_kitchen.npy` is the Amazon dataset.\n\n### Evaluation Scripts\n\n* `speed.py` measures the speed of FAPE (Section 4.2).\n* `evaluate_baselines.py` evaluates the baseline methods (Section 4.3).\n* `evaluate_ours.py` evaluates FAPE (Section 4.3).\n\n## Citation\n\n```\n@inproceedings{sato2022enumerating,\n  author    = {Ryoma Sato},\n  title     = {Enumerating Fair Packages for Group Recommendations},\n  booktitle = {Proceedings of the Fifteenth {ACM} International Conference on Web Search and Data Mining, {WSDM}},\n  year      = {2022},\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joisino/fape",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fape",
    "package_url": "https://pypi.org/project/fape/",
    "platform": "",
    "project_url": "https://pypi.org/project/fape/",
    "project_urls": {
      "Homepage": "https://github.com/joisino/fape"
    },
    "release_url": "https://pypi.org/project/fape/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fair package enuemeration for group recommendations",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12417900,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b572672cb1798aa31d3800fe6344a096778428520acce32e1aca82d2e090f2e8",
          "md5": "4fc849957e9b04ae4efe9907bf4397d2",
          "sha256": "d8dfc7747cd188b1f72d8b7690454b1de62e96e9267dc6c288d6710a6672deb7"
        },
        "downloads": -1,
        "filename": "fape-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4fc849957e9b04ae4efe9907bf4397d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5647,
        "upload_time": "2021-12-28T00:40:04",
        "upload_time_iso_8601": "2021-12-28T00:40:04.402946Z",
        "url": "https://files.pythonhosted.org/packages/b5/72/672cb1798aa31d3800fe6344a096778428520acce32e1aca82d2e090f2e8/fape-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b572672cb1798aa31d3800fe6344a096778428520acce32e1aca82d2e090f2e8",
        "md5": "4fc849957e9b04ae4efe9907bf4397d2",
        "sha256": "d8dfc7747cd188b1f72d8b7690454b1de62e96e9267dc6c288d6710a6672deb7"
      },
      "downloads": -1,
      "filename": "fape-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4fc849957e9b04ae4efe9907bf4397d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5647,
      "upload_time": "2021-12-28T00:40:04",
      "upload_time_iso_8601": "2021-12-28T00:40:04.402946Z",
      "url": "https://files.pythonhosted.org/packages/b5/72/672cb1798aa31d3800fe6344a096778428520acce32e1aca82d2e090f2e8/fape-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}