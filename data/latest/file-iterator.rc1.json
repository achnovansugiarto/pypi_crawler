{
  "info": {
    "author": "Fernando Ancona",
    "author_email": "f.anconac@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development"
    ],
    "description": "# file-iterator\nTool to iterate the contents of different file types (*plain*, *zip* or *gzip*) through the same interface.\n\nThe motivation for `file-iterator` is accessibility to file contents and code readability, as well as \nproviding a way to link handlers (functions) to common file-reading events (start/stop/end file reading).\n\n## Installing\nfile-iterator is on PyPI so all you need to do is:\n\n```\npip install file-iterator\n```\n\n## Testing\nJust run:\n\n```\npytest tests/\n```\n\n## Overview - Tutorial\n```python\n# Let's say we have the same text in 3 file formats.\nname_txt = 'file.txt'\nname_gzip = 'file.gz'\nname_zip = 'file.zip'\n\n# In Python, we could read the text file just like this:\nf = open(name_txt, 'r')\nfor line in f:\n    print(line)\nf.close()\n\n# For the GZIP file, a library is required.\nimport gzip\nf = gzip.open(name_gzip, 'r')\nfor line in f:\n    print(line)\nf.close()\n\n# As well as for the ZIP file.\nimport zipfile\nz = zipfile.ZipFile(name_zip, 'r')\nf = z.open(z.namelist()[0], 'r')\nfor line_bytes in f:\n    print(line_bytes)\nf.close()\n```\n\nWith the `FileIterator` interface, we could iterate the contents of any file the same way. \nWe also wouldn't need to close it.\n```python\nfrom file_iterator import FileIterator\n\ndef print_contents(it):\n    for line_bytes in it:\n        print(line_bytes)\n        \nit = FileIterator.get_iter(name_txt, 'plain')\nprint_contents(it)\n\nit = FileIterator.get_iter(name_gzip, 'gzip')\nprint_contents(it)\n\nit = FileIterator.get_iter(name_zip, 'zip')\nprint_contents(it)\n```\n\nWith the `FileGroupIterator` interface, we could iterate through all the contents simply.\n```python\nfrom file_iterator import FileGroupIterator\n\nnames = [name_txt, name_gzip, name_zip]\nit = FileGroupIterator(names)\nprint_contents(it)\n```\n\nFor loops use a copy of the iterator. Therefore, the original doesn't exhaust itself\nand we can iterate multiple times.\n```python\nprint_contents(it)\nprint_contents(it)\n```\n\nWe can also iterate using `next()`.\n```python\n# Returns None when everything has been read.\nline_b = next(it)\nwhile line_b:\n    line_b = next(it)\n\n# This iteration does exhaust the iterator object.\nprint(line_b is None) # Prints True.\nfor line_b in it:\n    pass # Doesn't enter here.\n```\n\nIt also supports context manager functionality:\n```python\nwith FileGroupIterator(names) as it:\n    print_contents(it)\n\n```\n\n## License\nMIT\n\n## Todo\n- [X] Upload package to PyPi.\n- [ ] Tests: Events.\n- [ ] Tutorial: Events usage.\n- [ ] Event handlers: Receive a parameter containing info about the sender (object who triggered the event).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ferancona/file-iterator/archive/1.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ferancona/file-iterator",
    "keywords": "FILE,READ,CONTENT,ITERATION",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "file-iterator",
    "package_url": "https://pypi.org/project/file-iterator/",
    "platform": "",
    "project_url": "https://pypi.org/project/file-iterator/",
    "project_urls": {
      "Download": "https://github.com/ferancona/file-iterator/archive/1.0.1.tar.gz",
      "Homepage": "https://github.com/ferancona/file-iterator"
    },
    "release_url": "https://pypi.org/project/file-iterator/1.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Utilities for iterating file contents.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9691041,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d95e0b789f9e3511876f4fd16eba05f9916c5db64dad1e531d01d58c142d2b2",
          "md5": "ea1625bb1da42b2c13b2f291f14247b7",
          "sha256": "cae95326e36039f31dbe485efdb68516536eb916b3a997ab45e0e3d30f5ab4ab"
        },
        "downloads": -1,
        "filename": "file-iterator-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea1625bb1da42b2c13b2f291f14247b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6640,
        "upload_time": "2021-03-06T21:27:48",
        "upload_time_iso_8601": "2021-03-06T21:27:48.356915Z",
        "url": "https://files.pythonhosted.org/packages/7d/95/e0b789f9e3511876f4fd16eba05f9916c5db64dad1e531d01d58c142d2b2/file-iterator-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d95e0b789f9e3511876f4fd16eba05f9916c5db64dad1e531d01d58c142d2b2",
        "md5": "ea1625bb1da42b2c13b2f291f14247b7",
        "sha256": "cae95326e36039f31dbe485efdb68516536eb916b3a997ab45e0e3d30f5ab4ab"
      },
      "downloads": -1,
      "filename": "file-iterator-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ea1625bb1da42b2c13b2f291f14247b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 6640,
      "upload_time": "2021-03-06T21:27:48",
      "upload_time_iso_8601": "2021-03-06T21:27:48.356915Z",
      "url": "https://files.pythonhosted.org/packages/7d/95/e0b789f9e3511876f4fd16eba05f9916c5db64dad1e531d01d58c142d2b2/file-iterator-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}