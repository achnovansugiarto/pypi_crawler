{
  "info": {
    "author": "",
    "author_email": "Ken Greim <ken.greim+vatsimapi@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Games/Entertainment :: Simulation",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# What is Vatsim Py-API?\nVatsim Py-API is a Python library to interact with data from Vatsim's live datafeed, currently located at: http://data.vatsim.net/. It implements Python objects to access the underlying Vatsim data in a Pythonic way, and also parses certain data into developer friendly formats (e.g., timestamp strings into Python datetime objects). \n\nBecause Vatsim's datafeed is updated every ~15 seconds, Py-API supports configurable caching of data from the datafeed so that each access method does not fetch the datafeed (although a \"force update\" override exists if needed).\n\n# Status\nThis project is in alpha state. It currently offers full functionality to access the Vatsim live data (with time-based caching support), but\nfurther work is needed in the areas of: documentation, error handling, caching, configurability, testing.\n\n# Installation\n\nThe easiest way to install is via pip.\n```\npip install vatsim-api\n```\n\nAlternatively, you can use the `vatsim` folder or `liveapi.py` as a package or single-file module, respectively. Make sure you have the necessary 3rd-party libraries installed with `pip` (at the moment, only `requests` is required).\n\n\n\n# Full Documentation\nTBD\n\n# Known Issues and Noteworthy Considerations\nTBD\n\n# Examples\n\n## Create API object\nUse default caching periods (60 seconds for METARs and 15 seconds for network data)\n```python\nimport vatsim\napi = vatsim.VatsimLiveAPI()\n```\n\n## Create API object with different cache TTLs\nConfigurable with the `DATA_TTL` and `METAR_TTL` arguments, which speciy how long network data and METAR data should be cached (in seconds), respectively\n```python\nimport vatsim\n# 1 min network data cache and 5 min METAR cache\napi = vatsim_api.VatsimLiveAPI(DATA_TTL=60, METAR_TTL=300)\n```\n\n## Retrieve all pilots or controllers and iterate through them\n`pilots()` returns a dictionary of `Pilot` instances with each `Pilot.cid` as the dictionary key\n\n`controllers()` returns a dictionary of `Controller` instances with each `Controller.cid` as the dictionary key\n```python\np = api.pilots()\nfor cid, pilot in p.items():\n    # Do something here\n\nc = api.controllers()\nfor cid, controller in c.items():\n    # Do something here\n```\n\n## Retrieve a list of pilots  or controllers based on multiple CIDs\n`cids` argument expects either a single integer or a list of integers.\n\n`pilots(cid)` returns a dictionary of `Pilot` instances based on exact CID matches, or `None` if no matches are found\n\n`controllers(cid)` returns a dictionary of `Controller` instances based on exact CID matches, or `None` if no matches are found\n```python\np = api.pilots(cids=[123456, 234567, 345678])\nfor cid, pilot in p.items():\n    # Do something here\n\nc = api.controllers(cids=[123456, 234567, 345678])\nfor cid, controller in c.items():\n    # Do something here\n```\n\n## Retrieve a list of pilots or controllers based on one or more string regular expressions\n`callsigns` argument expects either a single string or a list of strings. `callsigns` argument will be ignored if `cids` argument is provided, as in the example above.\n\n`pilots(callsigns)` will evaluate each string as a Python regular expression and return a dictionary of `Pilot` instances where the Pilot's callsign matches one of the given callsign regular expressions (using `re.search`), or `None` if no matches are found\n\n`controllers(callsigns)` will evaluate each string as a Python regular expression and return a dictionary of `Controller` instances where the Controller's callsign matches one of the given callsign regular expressions (using `re.search`), or `None` if no matches are found\n```python\np = api.pilots(callsigns=['UAL123', 'UAL', 'SWA'])\nfor cid, pilot in p.items():\n    # Do something here\n\n# Note that last item uses regex to match OAK_CTR, OAK_41_CTR, OAK_44_CTR, etc. but not OAK_GND\nc = api.controllers(callsigns=['SFO', 'SJC', 'OAK.*_CTR'])\nfor cid, controller in c.items():\n    # Do something here\n```\n\n## Retrieve a single pilot or controller by Vatsim CID or callsign\n`cid` argument expects an integer. `callsign` argument expects a string. . If both `cid` and `callsign` arguments are provided, only `cid` will be used.\n\n`pilot()` returns a single `Pilot` instance based on exact CID or callsign string match (both are unique on the Vatsim network for Pilots) or `None`\n\n`controller()` returns a single `Controller` instance based on exact CID or callsign string match (both are unique on the Vatsim network for Controllers) or `None`\n```python\np1 = api.pilot(cid=123456)\np2 = api.pilot(callsign='UAL123')\n\nc1 = api.controller(cid=123456)\nc2 = api.controller(callsign='SFO_TWR')\n```\n\n## Retrieve all METARs\n```python\nm = api.metars()\nfor field, metar in m.items():\n    # Do something\n```\n\n## Retrieve a subset of METARs\n```python\nm = api.metars(['KSFO', 'KLAX'], ['KSJC'])\nfor field, metar in m.items():\n    # Do something\n```\n\n## Retrieve a single METAR\n```python\nm = api.metar('KSFO')\n```\n\n## Access information about a pilot and their flightplan\n```python\np = api.pilots()\nfor cid, pilot in p.items():\n    if pilot.flight_plan is not None:\n        print('%s departed from %s and is going to %s at current altitude %i' % (pilot.callsign, pilot.flight_plan.departure, pilot.flight_plan.arrival, pilot.altitude))\n    else:\n        print('%s is at current altitude %i with no flight plan' % (pilot.callsign, pilot.altitude))\n```\n\n## Get information about a controller\n```python\nc = api.controllers()\nfor cid, controller in c.items():\n    print('%s controlling position %s on %s' % (controller.name, controller.callsign, controller.frequency))\n```\n\n# Todo\nTBD\n\n# License\nVatsim Py-API is licensed under the MIT License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vatsim-api",
    "package_url": "https://pypi.org/project/vatsim-api/",
    "platform": null,
    "project_url": "https://pypi.org/project/vatsim-api/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kengreim/Vatsim-Py-API/issues",
      "Homepage": "https://github.com/kengreim/Vatsim-Py-API"
    },
    "release_url": "https://pypi.org/project/vatsim-api/0.1.0/",
    "requires_dist": [
      "requests>=2.28"
    ],
    "requires_python": ">=3.7",
    "summary": "Library to access Vatsim live data and APIs",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15923641,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "516c0ec07d3198bf87d020477d7570d75b2cee583180688fc9814e3e2e084dc2",
          "md5": "5bf17fa7e8d05799ad7b40a897387858",
          "sha256": "b2a8f45be8de302fd3fecfa11a31d823c979ec375aa0e01f6b21e52aa243f362"
        },
        "downloads": -1,
        "filename": "vatsim_api-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bf17fa7e8d05799ad7b40a897387858",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9077,
        "upload_time": "2022-11-29T06:40:12",
        "upload_time_iso_8601": "2022-11-29T06:40:12.541509Z",
        "url": "https://files.pythonhosted.org/packages/51/6c/0ec07d3198bf87d020477d7570d75b2cee583180688fc9814e3e2e084dc2/vatsim_api-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "516c0ec07d3198bf87d020477d7570d75b2cee583180688fc9814e3e2e084dc2",
        "md5": "5bf17fa7e8d05799ad7b40a897387858",
        "sha256": "b2a8f45be8de302fd3fecfa11a31d823c979ec375aa0e01f6b21e52aa243f362"
      },
      "downloads": -1,
      "filename": "vatsim_api-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5bf17fa7e8d05799ad7b40a897387858",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9077,
      "upload_time": "2022-11-29T06:40:12",
      "upload_time_iso_8601": "2022-11-29T06:40:12.541509Z",
      "url": "https://files.pythonhosted.org/packages/51/6c/0ec07d3198bf87d020477d7570d75b2cee583180688fc9814e3e2e084dc2/vatsim_api-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}