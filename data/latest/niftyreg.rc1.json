{
  "info": {
    "author": "Marc Modat",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Education",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "#####################\n# NIFTY_REG PACKAGE #\n#####################\n\n##############################################################################\n\n--------------------------------\n1 WHAT DOES THE PACKAGE CONTAIN?\n--------------------------------\nThe code contains programs to perform rigid, affine and non-linear registration\nof 2D and 3D images stored as Nifti or Analyze (nii or hdr/img).\n\nThe rigid and affine registration are performed using an algorithm initially\npresented by Ourselin et al.[1]. The symmetric versions of the rigid and\naffine registration have been presented in Modat et al.[2].\nThe non-linear registration is based on the work is based on the work initially\npresented by Rueckert et al.[3]. The current implementation has been presented\nin Modat et al.[4].\n\nOurselin et al.[1] presented an algorithm called Aladin, which is based on\na block-matching approach and a Trimmed Least Square (TLS) scheme. Firstly,\nthe block matching provides a set of corresponding points between a reference\nand a warped floating image. Secondly, using this set of corresponding points,\nthe best rigid or affine transformation is evaluated. This two-step loop is\nrepeated until convergence to the best transformation.\nIn our implementation, we used the normalised cross-correlation between the\nreference and warped floating blocks to extract the best correspondence. The\nblock width is constant and has been set to 4 pixels or voxels. A coarse-to-\nﬁne approach is used, where the registration is ﬁrst performed on down-sampled\nimages (using a Gaussian pyramid) and finally performed on full resolution\nimages. The symmetric approach optimises concurrently forward and backward\ntransformations.\nreg aladin is the name of the command to perform rigid or affine registration.\n\nThe non-rigid algorithm implementation is based on the Free-From Deformation\npresented by Rueckert et al.[3]. However, the algorithm has been re-factored\nin order to speed-up registration. The deformation of the floating image is\nperformed using cubic B-splines to generate the deformation ﬁeld. Concretely,\na lattice of equally spaced control points is defined over the reference image\nand moving each point allows to locally modify the mapping to the floating\nimage. In order to assess the quality of the warping between both input images,\nan objective function composed from the Normalised Mutual Information (NMI) and\nthe Bending-Energy (BE) is used. The objective function value is optimised\nusing the analytical derivative of both, the NMI and the BE within a conjugate\ngradient scheme. The symmetric version of the algorithm takes advantage of\nstationary velocity field parametrisation.\nreg f3d is the command to perform non-linear registration.\n\nA third program, called reg resample, is been embedded in the package. It\nuses the output of reg aladin and reg f3d to apply transformation, generate\ndeformation ﬁelds or Jacobian map images for example.\n\nThe code has been implemented for CPU and GPU architecture. The former\ncode is based on the C/C++ language, whereas the later is based on CUDA\n(http://www.nvidia.com).\n\nThe nifti library (http://nifti.nimh.nih.gov/) is used to read and write\nimages. The code is thus dealing with nifti and analyse formats.\n\nIf you are planning to use any of our research, we would be grateful if you\nwould be kind enough to cite reference(s) 2 (rigid or affine) and/or\n4 (non-rigid).\n\n##############################################################################\n\n---------\n2 LICENSE\n---------\nCopyright (c) 2009, University College London, United-Kingdom\nAll rights reserved.\n\nRedistribution and use in floating and binary forms, with or without\nmodification,\nare permitted provided that the following conditions are met:\n\nRedistributions of floating code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nNeither the name of the University College London nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\nTHE POSSIBILITY OF SUCH DAMAGE.\n\n##############################################################################\n\n---------\n3 CONTACT\n---------\nFor any comment, please, feel free to contact Marc Modat (m.modat@ucl.ac.uk).\n\n##############################################################################\n\n------------\n4 REFERENCES\n------------\n[1] Ourselin, et al. (2001). Reconstructing a 3D structure from serial\nhistological sections. Image and Vision Computing, 19(1-2), 25–31.\n[2] Modat, et al. (2014). Global image registration using a symmetric block-\nmatching approach. Journal of Medical Imaging, 1(2), 024003–024003.\ndoi:10.1117/1.JMI.1.2.024003\n[3] Rueckert, et al.. (1999). Nonrigid registration using free-form\ndeformations: Application to breast MR images. IEEE Transactions on Medical\nImaging, 18(8), 712–721. doi:10.1109/42.796284\n[4] Modat, et al. (2010). Fast free-form deformation using graphics processing\nunits. Computer Methods And Programs In Biomedicine,98(3), 278–284.\ndoi:10.1016/j.cmpb.2009.09.002\n\n##############################################################################\n##############################################################################\n##############################################################################\n##############################################################################\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KCL-BMEIS/niftyreg",
    "keywords": "image-registration",
    "license": "",
    "maintainer": "Casper da Costa-Luis",
    "maintainer_email": "imaging@cdcl.ml",
    "name": "niftyreg",
    "package_url": "https://pypi.org/project/niftyreg/",
    "platform": null,
    "project_url": "https://pypi.org/project/niftyreg/",
    "project_urls": {
      "Changelog": "https://github.com/KCL-BMEIS/niftyreg/releases",
      "Homepage": "https://github.com/KCL-BMEIS/niftyreg"
    },
    "release_url": "https://pypi.org/project/niftyreg/1.5.70rc1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "NiftyReg Python package",
    "version": "1.5.70rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13755239,
  "releases": {
    "1.5.70rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be29e6d8ab1a70f9c44968e7cebdec036bfdc729591723db3e72bfcf6c422719",
          "md5": "2fe0e8704c430ee8f7beab97852444f4",
          "sha256": "47499de11b5ca9a7673873a02cd26bedb1f5e1be3a867994d9d2d817fbcd6b52"
        },
        "downloads": -1,
        "filename": "niftyreg-1.5.70rc1.tar.gz",
        "has_sig": true,
        "md5_digest": "2fe0e8704c430ee8f7beab97852444f4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3832003,
        "upload_time": "2022-05-09T06:46:27",
        "upload_time_iso_8601": "2022-05-09T06:46:27.758374Z",
        "url": "https://files.pythonhosted.org/packages/be/29/e6d8ab1a70f9c44968e7cebdec036bfdc729591723db3e72bfcf6c422719/niftyreg-1.5.70rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be29e6d8ab1a70f9c44968e7cebdec036bfdc729591723db3e72bfcf6c422719",
        "md5": "2fe0e8704c430ee8f7beab97852444f4",
        "sha256": "47499de11b5ca9a7673873a02cd26bedb1f5e1be3a867994d9d2d817fbcd6b52"
      },
      "downloads": -1,
      "filename": "niftyreg-1.5.70rc1.tar.gz",
      "has_sig": true,
      "md5_digest": "2fe0e8704c430ee8f7beab97852444f4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3832003,
      "upload_time": "2022-05-09T06:46:27",
      "upload_time_iso_8601": "2022-05-09T06:46:27.758374Z",
      "url": "https://files.pythonhosted.org/packages/be/29/e6d8ab1a70f9c44968e7cebdec036bfdc729591723db3e72bfcf6c422719/niftyreg-1.5.70rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}