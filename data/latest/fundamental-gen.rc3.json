{
  "info": {
    "author": "",
    "author_email": "Vuong Nguyen <tienvuong.gt@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "===============\nyahoofinancials\n===============\n\nA python module that returns stock, cryptocurrency, forex, mutual fund, commodity futures, ETF, and US Treasury financial data from Yahoo Finance.\n\n.. image:: https://travis-ci.org/JECSand/yahoofinancials.svg?branch=master\n    :target: https://travis-ci.org/JECSand/yahoofinancials\n\nCurrent Version: v1.6\n\nVersion Released: 10/18/2020\n\nReport any bugs by opening an issue here: https://github.com/JECSand/yahoofinancials/issues\n\nOverview\n--------\nA powerful financial data module used for pulling both fundamental and technical data from Yahoo Finance.\n\n- As of Version 0.10, Yahoo Financials now returns historical pricing data for commodity futures, cryptocurrencies, ETFs, mutual funds, U.S. Treasuries, currencies, indexes, and stocks.\n\nInstallation\n-------------\n- yahoofinancials runs on Python 2.7, 3.3, 3.4, 3.5, 3.6, and 3.7.\n- The package depends on beautifulsoup4 and pytz to work.\n\n1. Installation using pip:\n\n- Linux/Mac:\n\n.. code-block:: bash\n\n    $ pip install yahoofinancials\n\n- Windows (If python doesn't work for you in cmd, try running the following command with just py):\n\n.. code-block::\n\n    > python -m pip install yahoofinancials\n\n2. Installation using github (Mac/Linux):\n\n.. code-block:: bash\n\n    $ git clone https://github.com/JECSand/yahoofinancials.git\n    $ cd yahoofinancials\n    $ python setup.py install\n\n3. Demo using the included demo script:\n\n.. code-block:: bash\n\n    $ cd yahoofinancials\n    $ python demo.py -h\n    $ python demo.py\n    $ python demo.py WFC C BAC\n\n4. Test using the included unit testing script:\n\n.. code-block:: bash\n\n    $ cd yahoofinancials\n    $ python test/test_yahoofinancials.py\n\nModule Methods\n--------------\n- The financial data from all methods is returned as JSON.\n- You can run multiple symbols at once using an inputted array or run an individual symbol using an inputted string.\n- YahooFinancials works with Python 2.7, 3.3, 3.4, 3.5, 3.6, and 3.7 and runs on all operating systems. (Windows, Mac, Linux).\n\nFeatured Methods\n^^^^^^^^^^^^^^^^\n1. get_financial_stmts(frequency, statement_type, reformat=True)\n\n   - frequency can be either 'annual' or 'quarterly'.\n   - statement_type can be 'income', 'balance', 'cash' or a list of several.\n   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.\n2. get_stock_price_data(reformat=True)\n\n   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.\n3. get_stock_earnings_data(reformat=True)\n\n   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.\n4. get_summary_data(reformat=True)\n\n   - Returns financial summary data for cryptocurrencies, stocks, currencies, ETFs, mutual funds, U.S. Treasuries, commodity futures, and indexes.\n   - reformat optional value defaulted to true. Enter False for unprocessed raw data from Yahoo Finance.\n5. get_stock_quote_type_data()\n\n6. get_historical_price_data(start_date, end_date, time_interval)\n\n   - This method will pull historical pricing data for stocks, currencies, ETFs, mutual funds, U.S. Treasuries, cryptocurrencies, commodities, and indexes.\n   - start_date should be entered in the 'YYYY-MM-DD' format and is the first day that data will be pulled for.\n   - end_date should be entered in the 'YYYY-MM-DD' format and is the last day that data will be pulled for.\n   - time_interval can be either 'daily', 'weekly', or 'monthly'. This variable determines the time period interval for your pull.\n   - Data response includes relevant pricing event data such as dividends and stock splits.\n7. get_num_shares_outstanding(price_type='current')\n\n   - price_type can also be set to 'average' to calculate the shares outstanding with the daily average price.\n\nMethods Added in V1.5\n^^^^^^^^^^^^^^^^^^^^^^^\n- get_daily_dividend_data(start_date, end_date)\n\nAdditional Module Methods\n^^^^^^^^^^^^^^^^^^^^^^^^^\n- get_interest_expense()\n- get_operating_income()\n- get_total_operating_expense()\n- get_total_revenue()\n- get_cost_of_revenue()\n- get_income_before_tax()\n- get_income_tax_expense()\n- get_gross_profit()\n- get_net_income_from_continuing_ops()\n- get_research_and_development()\n- get_current_price()\n- get_current_change()\n- get_current_percent_change()\n- get_current_volume()\n- get_prev_close_price()\n- get_open_price()\n- get_ten_day_avg_daily_volume()\n- get_three_month_avg_daily_volume()\n- get_stock_exchange()\n- get_market_cap()\n- get_daily_low()\n- get_daily_high()\n- get_currency()\n- get_yearly_high()\n- get_yearly_low()\n- get_dividend_yield()\n- get_annual_avg_div_yield()\n- get_five_yr_avg_div_yield()\n- get_dividend_rate()\n- get_annual_avg_div_rate()\n- get_50day_moving_avg()\n- get_200day_moving_avg()\n- get_beta()\n- get_payout_ratio()\n- get_pe_ratio()\n- get_price_to_sales()\n- get_exdividend_date()\n- get_book_value()\n- get_ebit()\n- get_net_income()\n- get_earnings_per_share()\n- get_key_statistics_data()\n\nUsage Examples\n--------------\n- The class constructor can take either a single ticker or a list of tickers as it's parameter.\n- This makes it easy to initiate multiple classes for different groupings of financial assets.\n- Quarterly statement data returns the last 4 periods of data, while annual returns the last 3.\n\nSingle Ticker Example\n^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from yahoofinancials import YahooFinancials\n\n    ticker = 'AAPL'\n    yahoo_financials = YahooFinancials(ticker)\n\n    balance_sheet_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'balance')\n    income_statement_data_qt = yahoo_financials.get_financial_stmts('quarterly', 'income')\n    all_statement_data_qt =  yahoo_financials.get_financial_stmts('quarterly', ['income', 'cash', 'balance'])\n    apple_earnings_data = yahoo_financials.get_stock_earnings_data()\n    apple_net_income = yahoo_financials.get_net_income()\n    historical_stock_prices = yahoo_financials.get_historical_price_data('2008-09-15', '2018-09-15', 'weekly')\n\nLists of Tickers Example\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from yahoofinancials import YahooFinancials\n\n    tech_stocks = ['AAPL', 'MSFT', 'INTC']\n    bank_stocks = ['WFC', 'BAC', 'C']\n    commodity_futures = ['GC=F', 'SI=F', 'CL=F']\n    cryptocurrencies = ['BTC-USD', 'ETH-USD', 'XRP-USD']\n    currencies = ['EURUSD=X', 'JPY=X', 'GBPUSD=X']\n    mutual_funds = ['PRLAX', 'QASGX', 'HISFX']\n    us_treasuries = ['^TNX', '^IRX', '^TYX']\n\n    yahoo_financials_tech = YahooFinancials(tech_stocks)\n    yahoo_financials_banks = YahooFinancials(bank_stocks)\n    yahoo_financials_commodities = YahooFinancials(commodity_futures)\n    yahoo_financials_cryptocurrencies = YahooFinancials(cryptocurrencies)\n    yahoo_financials_currencies = YahooFinancials(currencies)\n    yahoo_financials_mutualfunds = YahooFinancials(mutual_funds)\n    yahoo_financials_treasuries = YahooFinancials(us_treasuries)\n\n    tech_cash_flow_data_an = yahoo_financials_tech.get_financial_stmts('annual', 'cash')\n    bank_cash_flow_data_an = yahoo_financials_banks.get_financial_stmts('annual', 'cash')\n\n    banks_net_ebit = yahoo_financials_banks.get_ebit()\n    tech_stock_price_data = yahoo_financials_tech.get_stock_price_data()\n    daily_bank_stock_prices = yahoo_financials_banks.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n    daily_commodity_prices = yahoo_financials_commodities.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n    daily_crypto_prices = yahoo_financials_cryptocurrencies.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n    daily_currency_prices = yahoo_financials_currencies.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n    daily_mutualfund_prices = yahoo_financials_mutualfunds.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n    daily_treasury_prices = yahoo_financials_treasuries.get_historical_price_data('2008-09-15', '2018-09-15', 'daily')\n\nExamples of Returned JSON Data\n------------------------------\n\n1. Annual Income Statement Data for Apple:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('AAPL')\n    print(yahoo_financials.get_financial_stmts('annual', 'income'))\n\n\n.. code-block:: javascript\n\n    {\n        \"incomeStatementHistory\": {\n            \"AAPL\": [\n                {\n                    \"2016-09-24\": {\n                        \"minorityInterest\": null,\n                        \"otherOperatingExpenses\": null,\n                        \"netIncomeFromContinuingOps\": 45687000000,\n                        \"totalRevenue\": 215639000000,\n                        \"totalOtherIncomeExpenseNet\": 1348000000,\n                        \"discontinuedOperations\": null,\n                        \"incomeTaxExpense\": 15685000000,\n                        \"extraordinaryItems\": null,\n                        \"grossProfit\": 84263000000,\n                        \"netIncome\": 45687000000,\n                        \"sellingGeneralAdministrative\": 14194000000,\n                        \"interestExpense\": null,\n                        \"costOfRevenue\": 131376000000,\n                        \"researchDevelopment\": 10045000000,\n                        \"netIncomeApplicableToCommonShares\": 45687000000,\n                        \"effectOfAccountingCharges\": null,\n                        \"incomeBeforeTax\": 61372000000,\n                        \"otherItems\": null,\n                        \"operatingIncome\": 60024000000,\n                        \"ebit\": 61372000000,\n                        \"nonRecurring\": null,\n                        \"totalOperatingExpenses\": 0\n                    }\n                }\n            ]\n        }\n    }\n\n2. Annual Balance Sheet Data for Apple:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('AAPL')\n    print(yahoo_financials.get_financial_stmts('annual', 'balance'))\n\n\n.. code-block:: javascript\n\n    {\n        \"balanceSheetHistory\": {\n            \"AAPL\": [\n                {\n                    \"2016-09-24\": {\n                        \"otherCurrentLiab\": 8080000000,\n                        \"otherCurrentAssets\": 8283000000,\n                        \"goodWill\": 5414000000,\n                        \"shortTermInvestments\": 46671000000,\n                        \"longTermInvestments\": 170430000000,\n                        \"cash\": 20484000000,\n                        \"netTangibleAssets\": 119629000000,\n                        \"totalAssets\": 321686000000,\n                        \"otherLiab\": 36074000000,\n                        \"totalStockholderEquity\": 128249000000,\n                        \"inventory\": 2132000000,\n                        \"retainedEarnings\": 96364000000,\n                        \"intangibleAssets\": 3206000000,\n                        \"totalCurrentAssets\": 106869000000,\n                        \"otherStockholderEquity\": 634000000,\n                        \"shortLongTermDebt\": 11605000000,\n                        \"propertyPlantEquipment\": 27010000000,\n                        \"deferredLongTermLiab\": 2930000000,\n                        \"netReceivables\": 29299000000,\n                        \"otherAssets\": 8757000000,\n                        \"longTermDebt\": 75427000000,\n                        \"totalLiab\": 193437000000,\n                        \"commonStock\": 31251000000,\n                        \"accountsPayable\": 59321000000,\n                        \"totalCurrentLiabilities\": 79006000000\n                    }\n                }\n            ]\n        }\n    }\n\n3. Quarterly Cash Flow Statement Data for Citigroup:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('C')\n    print(yahoo_financials.get_financial_stmts('quarterly', 'cash'))\n\n\n.. code-block:: javascript\n\n    {\n        \"cashflowStatementHistoryQuarterly\": {\n            \"C\": [\n                {\n                    \"2017-06-30\": {\n                        \"totalCashFromOperatingActivities\": -18505000000,\n                        \"effectOfExchangeRate\": -117000000,\n                        \"totalCashFromFinancingActivities\": 39798000000,\n                        \"netIncome\": 3872000000,\n                        \"dividendsPaid\": -760000000,\n                        \"salePurchaseOfStock\": -1781000000,\n                        \"capitalExpenditures\": -861000000,\n                        \"changeToLiabilities\": -7626000000,\n                        \"otherCashflowsFromInvestingActivities\": 82000000,\n                        \"totalCashflowsFromInvestingActivities\": -22508000000,\n                        \"netBorrowings\": 33586000000,\n                        \"depreciation\": 901000000,\n                        \"changeInCash\": -1332000000,\n                        \"changeToNetincome\": 1444000000,\n                        \"otherCashflowsFromFinancingActivities\": 8753000000,\n                        \"changeToOperatingActivities\": -17096000000,\n                        \"investments\": -23224000000\n                    }\n                }\n            ]\n        }\n    }\n\n4. Monthly Historical Stock Price Data for Wells Fargo:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('WFC')\n    print(yahoo_financials.get_historical_price_data(\"2018-07-10\", \"2018-08-10\", \"monthly\"))\n\n\n.. code-block:: javascript\n\n    {\n        \"WFC\": {\n            \"currency\": \"USD\",\n            \"eventsData\": {\n                \"dividends\": {\n                    \"2018-08-01\": {\n                        \"amount\": 0.43,\n                        \"date\": 1533821400,\n                        \"formatted_date\": \"2018-08-09\"\n                    }\n                }\n            },\n            \"firstTradeDate\": {\n                \"date\": 76233600,\n                \"formatted_date\": \"1972-06-01\"\n            },\n            \"instrumentType\": \"EQUITY\",\n            \"prices\": [\n                {\n                    \"adjclose\": 57.19147872924805,\n                    \"close\": 57.61000061035156,\n                    \"date\": 1533096000,\n                    \"formatted_date\": \"2018-08-01\",\n                    \"high\": 59.5,\n                    \"low\": 57.08000183105469,\n                    \"open\": 57.959999084472656,\n                    \"volume\": 138922900\n                }\n            ],\n            \"timeZone\": {\n                \"gmtOffset\": -14400\n            }\n        }\n    }\n\n5. Monthly Historical Price Data for EURUSD:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('EURUSD=X')\n    print(yahoo_financials.get_historical_price_data(\"2018-07-10\", \"2018-08-10\", \"monthly\"))\n\n\n.. code-block:: javascript\n\n    {\n        \"EURUSD=X\": {\n            \"currency\": \"USD\",\n            \"eventsData\": {},\n            \"firstTradeDate\": {\n                \"date\": 1070236800,\n                \"formatted_date\": \"2003-12-01\"\n            },\n            \"instrumentType\": \"CURRENCY\",\n            \"prices\": [\n                {\n                    \"adjclose\": 1.1394712924957275,\n                    \"close\": 1.1394712924957275,\n                    \"date\": 1533078000,\n                    \"formatted_date\": \"2018-07-31\",\n                    \"high\": 1.169864296913147,\n                    \"low\": 1.1365960836410522,\n                    \"open\": 1.168961763381958,\n                    \"volume\": 0\n                }\n            ],\n            \"timeZone\": {\n                \"gmtOffset\": 3600\n            }\n        }\n    }\n\n6. Monthly Historical Price Data for BTC-USD:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('BTC-USD')\n    print(yahoo_financials.get_historical_price_data(\"2018-07-10\", \"2018-08-10\", \"monthly\"))\n\n\n.. code-block:: javascript\n\n    {\n        \"BTC-USD\": {\n            \"currency\": \"USD\",\n            \"eventsData\": {},\n            \"firstTradeDate\": {\n                \"date\": 1279321200,\n                \"formatted_date\": \"2010-07-16\"\n            },\n            \"instrumentType\": \"CRYPTOCURRENCY\",\n            \"prices\": [\n                {\n                    \"adjclose\": 6285.02001953125,\n                    \"close\": 6285.02001953125,\n                    \"date\": 1533078000,\n                    \"formatted_date\": \"2018-07-31\",\n                    \"high\": 7760.740234375,\n                    \"low\": 6133.02978515625,\n                    \"open\": 7736.25,\n                    \"volume\": 4334347882\n                }\n            ],\n            \"timeZone\": {\n                \"gmtOffset\": 3600\n            }\n        }\n    }\n\n7. Weekly Historical Price Data for Crude Oil Futures:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('CL=F')\n    print(yahoo_financials.get_historical_price_data(\"2018-08-01\", \"2018-08-10\", \"weekly\"))\n\n\n.. code-block:: javascript\n\n    {\n        \"CL=F\": {\n            \"currency\": \"USD\",\n            \"eventsData\": {},\n            \"firstTradeDate\": {\n                \"date\": 1522555200,\n                \"formatted_date\": \"2018-04-01\"\n            },\n            \"instrumentType\": \"FUTURE\",\n            \"prices\": [\n                {\n                    \"adjclose\": 68.58999633789062,\n                    \"close\": 68.58999633789062,\n                    \"date\": 1532923200,\n                    \"formatted_date\": \"2018-07-30\",\n                    \"high\": 69.3499984741211,\n                    \"low\": 66.91999816894531,\n                    \"open\": 68.37000274658203,\n                    \"volume\": 683048039\n                },\n                {\n                    \"adjclose\": 67.75,\n                    \"close\": 67.75,\n                    \"date\": 1533528000,\n                    \"formatted_date\": \"2018-08-06\",\n                    \"high\": 69.91999816894531,\n                    \"low\": 66.13999938964844,\n                    \"open\": 68.76000213623047,\n                    \"volume\": 1102357981\n                }\n            ],\n            \"timeZone\": {\n                \"gmtOffset\": -14400\n            }\n        }\n    }\n\n8. Apple Stock Quote Data:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('AAPL')\n    print(yahoo_financials.get_stock_quote_type_data())\n\n\n.. code-block:: javascript\n\n    {\n        \"AAPL\": {\n            \"underlyingExchangeSymbol\": null,\n            \"exchangeTimezoneName\": \"America/New_York\",\n            \"underlyingSymbol\": null,\n            \"headSymbol\": null,\n            \"shortName\": \"Apple Inc.\",\n            \"symbol\": \"AAPL\",\n            \"uuid\": \"8b10e4ae-9eeb-3684-921a-9ab27e4d87aa\",\n            \"gmtOffSetMilliseconds\": \"-14400000\",\n            \"exchange\": \"NMS\",\n            \"exchangeTimezoneShortName\": \"EDT\",\n            \"messageBoardId\": \"finmb_24937\",\n            \"longName\": \"Apple Inc.\",\n            \"market\": \"us_market\",\n            \"quoteType\": \"EQUITY\"\n        }\n    }\n\n9. U.S. Treasury Current Pricing Data:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials(['^TNX', '^IRX', '^TYX'])\n    print(yahoo_financials.get_current_price())\n\n\n.. code-block:: javascript\n\n    {\n        \"^IRX\": 2.033,\n        \"^TNX\": 2.895,\n        \"^TYX\": 3.062\n    }\n\n10. BTC-USD Summary Data:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('BTC-USD')\n    print(yahoo_financials.get_summary_data())\n\n\n.. code-block:: javascript\n\n    {\n        \"BTC-USD\": {\n            \"algorithm\": \"SHA256\",\n            \"ask\": null,\n            \"askSize\": null,\n            \"averageDailyVolume10Day\": 545573809,\n            \"averageVolume\": 496761640,\n            \"averageVolume10days\": 545573809,\n            \"beta\": null,\n            \"bid\": null,\n            \"bidSize\": null,\n            \"circulatingSupply\": 17209812,\n            \"currency\": \"USD\",\n            \"dayHigh\": 6266.5,\n            \"dayLow\": 5891.87,\n            \"dividendRate\": null,\n            \"dividendYield\": null,\n            \"exDividendDate\": \"-\",\n            \"expireDate\": \"-\",\n            \"fiftyDayAverage\": 6989.074,\n            \"fiftyTwoWeekHigh\": 19870.62,\n            \"fiftyTwoWeekLow\": 2979.88,\n            \"fiveYearAvgDividendYield\": null,\n            \"forwardPE\": null,\n            \"fromCurrency\": \"BTC\",\n            \"lastMarket\": \"CCCAGG\",\n            \"marketCap\": 106325663744,\n            \"maxAge\": 1,\n            \"maxSupply\": 21000000,\n            \"navPrice\": null,\n            \"open\": 6263.2,\n            \"openInterest\": null,\n            \"payoutRatio\": null,\n            \"previousClose\": 6263.2,\n            \"priceHint\": 2,\n            \"priceToSalesTrailing12Months\": null,\n            \"regularMarketDayHigh\": 6266.5,\n            \"regularMarketDayLow\": 5891.87,\n            \"regularMarketOpen\": 6263.2,\n            \"regularMarketPreviousClose\": 6263.2,\n            \"regularMarketVolume\": 755834368,\n            \"startDate\": \"2009-01-03\",\n            \"strikePrice\": null,\n            \"totalAssets\": null,\n            \"tradeable\": false,\n            \"trailingAnnualDividendRate\": null,\n            \"trailingAnnualDividendYield\": null,\n            \"twoHundredDayAverage\": 8165.154,\n            \"volume\": 755834368,\n            \"volume24Hr\": 750196480,\n            \"volumeAllCurrencies\": 2673437184,\n            \"yield\": null,\n            \"ytdReturn\": null\n        }\n    }\n\n11. Apple Key Statistics Data:\n\n\n.. code-block:: python\n\n    yahoo_financials = YahooFinancials('AAPL')\n    print(yahoo_financials.get_key_statistics_data())\n\n\n.. code-block:: javascript\n\n    {\n        \"AAPL\": {\n            \"annualHoldingsTurnover\": null,\n            \"enterpriseToRevenue\": 2.973,\n            \"beta3Year\": null,\n            \"profitMargins\": 0.22413999,\n            \"enterpriseToEbitda\": 9.652,\n            \"52WeekChange\": -0.12707871,\n            \"morningStarRiskRating\": null,\n            \"forwardEps\": 13.49,\n            \"revenueQuarterlyGrowth\": null,\n            \"sharesOutstanding\": 4729800192,\n            \"fundInceptionDate\": \"-\",\n            \"annualReportExpenseRatio\": null,\n            \"totalAssets\": null,\n            \"bookValue\": 22.534,\n            \"sharesShort\": 44915125,\n            \"sharesPercentSharesOut\": 0.0095,\n            \"fundFamily\": null,\n            \"lastFiscalYearEnd\": 1538179200,\n            \"heldPercentInstitutions\": 0.61208,\n            \"netIncomeToCommon\": 59531001856,\n            \"trailingEps\": 11.91,\n            \"lastDividendValue\": null,\n            \"SandP52WeekChange\": -0.06475246,\n            \"priceToBook\": 6.7582316,\n            \"heldPercentInsiders\": 0.00072999997,\n            \"nextFiscalYearEnd\": 1601337600,\n            \"yield\": null,\n            \"mostRecentQuarter\": 1538179200,\n            \"shortRatio\": 1,\n            \"sharesShortPreviousMonthDate\": \"2018-10-31\",\n            \"floatShares\": 4489763410,\n            \"beta\": 1.127094,\n            \"enterpriseValue\": 789555511296,\n            \"priceHint\": 2,\n            \"threeYearAverageReturn\": null,\n            \"lastSplitDate\": \"2014-06-09\",\n            \"lastSplitFactor\": \"1/7\",\n            \"legalType\": null,\n            \"morningStarOverallRating\": null,\n            \"earningsQuarterlyGrowth\": 0.318,\n            \"priceToSalesTrailing12Months\": null,\n            \"dateShortInterest\": 1543536000,\n            \"pegRatio\": 0.98,\n            \"ytdReturn\": null,\n            \"forwardPE\": 11.289103,\n            \"maxAge\": 1,\n            \"lastCapGain\": null,\n            \"shortPercentOfFloat\": 0.0088,\n            \"sharesShortPriorMonth\": 36469092,\n            \"category\": null,\n            \"fiveYearAverageReturn\": null\n        }\n    }\n\n12. Apple and Wells Fargo Daily Dividend Data:\n\n\n.. code-block:: python\n\n    start_date = '1987-09-15'\n    end_date = '1988-09-15'\n    yahoo_financials = YahooFinancials(['AAPL', 'WFC'])\n    print(yahoo_financials.get_daily_dividend_data(start_date, end_date))\n\n\n.. code-block:: javascript\n\n    {\n        \"AAPL\": [\n            {\n                \"date\": 564157800,\n                \"formatted_date\": \"1987-11-17\",\n                \"amount\": 0.08\n            },\n            {\n                \"date\": 571674600,\n                \"formatted_date\": \"1988-02-12\",\n                \"amount\": 0.08\n            },\n            {\n                \"date\": 579792600,\n                \"formatted_date\": \"1988-05-16\",\n                \"amount\": 0.08\n            },\n            {\n                \"date\": 587655000,\n                \"formatted_date\": \"1988-08-15\",\n                \"amount\": 0.08\n            }\n        ],\n        \"WFC\": [\n            {\n                \"date\": 562861800,\n                \"formatted_date\": \"1987-11-02\",\n                \"amount\": 0.3008\n            },\n            {\n                \"date\": 570724200,\n                \"formatted_date\": \"1988-02-01\",\n                \"amount\": 0.3008\n            },\n            {\n                \"date\": 578583000,\n                \"formatted_date\": \"1988-05-02\",\n                \"amount\": 0.3344\n            },\n            {\n                \"date\": 586445400,\n                \"formatted_date\": \"1988-08-01\",\n                \"amount\": 0.3344\n            }\n        ]\n    }\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2020 Connor Sanders  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fundamental-gen",
    "package_url": "https://pypi.org/project/fundamental-gen/",
    "platform": null,
    "project_url": "https://pypi.org/project/fundamental-gen/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tienvuong-vn/yahoofinancials",
      "Homepage": "https://github.com/tienvuong-vn/yahoofinancials"
    },
    "release_url": "https://pypi.org/project/fundamental-gen/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Fundamental genarator",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14622589,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299aa1fe1902298787112535761ff9b3dffc1c3d92219c3d953e280da16d65e8",
          "md5": "5ac5a1a96359b5914b65bfe8b8222ecf",
          "sha256": "ca84477b9a33dd9f9db73025254cf32c2ed8c1f778929d564d6d5404b22ec56d"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ac5a1a96359b5914b65bfe8b8222ecf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17761,
        "upload_time": "2022-07-29T08:12:37",
        "upload_time_iso_8601": "2022-07-29T08:12:37.086126Z",
        "url": "https://files.pythonhosted.org/packages/29/9a/a1fe1902298787112535761ff9b3dffc1c3d92219c3d953e280da16d65e8/fundamental_gen-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b134c46a408f228f70d24a19d443e941c4ab5fd4c97f582aef29d58a83eedc21",
          "md5": "0b892d6b3d180be5b02596452556fee1",
          "sha256": "938c68be76f9de29a236d6a4ca09c8c16c221a629f0939635dbca130516658d2"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0b892d6b3d180be5b02596452556fee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18623,
        "upload_time": "2022-07-29T08:12:39",
        "upload_time_iso_8601": "2022-07-29T08:12:39.832637Z",
        "url": "https://files.pythonhosted.org/packages/b1/34/c46a408f228f70d24a19d443e941c4ab5fd4c97f582aef29d58a83eedc21/fundamental_gen-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3535eeb707463188ca86f62233ad81dcde72e5f00a3b29f98a5e2b6c5b38acfd",
          "md5": "8fbbd2f6be2bc9e935360cb468e373a3",
          "sha256": "2c7dfdef67ff50dbfc1e55c3db0716201f0c791c01b3224b640767adf7098f1b"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fbbd2f6be2bc9e935360cb468e373a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16361,
        "upload_time": "2022-07-29T08:27:57",
        "upload_time_iso_8601": "2022-07-29T08:27:57.899722Z",
        "url": "https://files.pythonhosted.org/packages/35/35/eeb707463188ca86f62233ad81dcde72e5f00a3b29f98a5e2b6c5b38acfd/fundamental_gen-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6361006d019698a51f9a8d6ca8b5b9596d97f93739cbedb06c828bd9e6ee4939",
          "md5": "50ff543702a060e207fb8211fba1dc12",
          "sha256": "5326889ba3542daa4fc3182f04ddc4bf67fa9c3e1e248c69bbfb645ce5a626af"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "50ff543702a060e207fb8211fba1dc12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18643,
        "upload_time": "2022-07-29T08:28:00",
        "upload_time_iso_8601": "2022-07-29T08:28:00.813493Z",
        "url": "https://files.pythonhosted.org/packages/63/61/006d019698a51f9a8d6ca8b5b9596d97f93739cbedb06c828bd9e6ee4939/fundamental_gen-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "943fd91527196728df166c5a5f8d704494af1320b731d978285eb718e8f5eb95",
          "md5": "f79755e1a8d03da36d62e09b21c67d3d",
          "sha256": "f7032e6f2d2aeb0661a234935e250511c3d201695faeede879f3adc57fcbd8db"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f79755e1a8d03da36d62e09b21c67d3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16400,
        "upload_time": "2022-08-02T07:08:48",
        "upload_time_iso_8601": "2022-08-02T07:08:48.099326Z",
        "url": "https://files.pythonhosted.org/packages/94/3f/d91527196728df166c5a5f8d704494af1320b731d978285eb718e8f5eb95/fundamental_gen-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dac65c389fd2ef85910954afae321d0aae4048a87e926cc9ed71be3df5ffc0b",
          "md5": "23b33e86cac2c5cf8a97e84354305110",
          "sha256": "0c04bbb9002d70fd8c156198d40121d69911e7d419366a5c2296a35d6c91a2a5"
        },
        "downloads": -1,
        "filename": "fundamental_gen-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "23b33e86cac2c5cf8a97e84354305110",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19005,
        "upload_time": "2022-08-02T07:08:51",
        "upload_time_iso_8601": "2022-08-02T07:08:51.031181Z",
        "url": "https://files.pythonhosted.org/packages/8d/ac/65c389fd2ef85910954afae321d0aae4048a87e926cc9ed71be3df5ffc0b/fundamental_gen-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "943fd91527196728df166c5a5f8d704494af1320b731d978285eb718e8f5eb95",
        "md5": "f79755e1a8d03da36d62e09b21c67d3d",
        "sha256": "f7032e6f2d2aeb0661a234935e250511c3d201695faeede879f3adc57fcbd8db"
      },
      "downloads": -1,
      "filename": "fundamental_gen-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f79755e1a8d03da36d62e09b21c67d3d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16400,
      "upload_time": "2022-08-02T07:08:48",
      "upload_time_iso_8601": "2022-08-02T07:08:48.099326Z",
      "url": "https://files.pythonhosted.org/packages/94/3f/d91527196728df166c5a5f8d704494af1320b731d978285eb718e8f5eb95/fundamental_gen-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8dac65c389fd2ef85910954afae321d0aae4048a87e926cc9ed71be3df5ffc0b",
        "md5": "23b33e86cac2c5cf8a97e84354305110",
        "sha256": "0c04bbb9002d70fd8c156198d40121d69911e7d419366a5c2296a35d6c91a2a5"
      },
      "downloads": -1,
      "filename": "fundamental_gen-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "23b33e86cac2c5cf8a97e84354305110",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19005,
      "upload_time": "2022-08-02T07:08:51",
      "upload_time_iso_8601": "2022-08-02T07:08:51.031181Z",
      "url": "https://files.pythonhosted.org/packages/8d/ac/65c389fd2ef85910954afae321d0aae4048a87e926cc9ed71be3df5ffc0b/fundamental_gen-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}