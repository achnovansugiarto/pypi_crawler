{
  "info": {
    "author": "k5md",
    "author_email": "k-5md@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Utilities"
    ],
    "description": "# picorm\n[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-390/) \n\nPicorm is a small ORM with limited functions for multiple database engines for pet-projects, mostly for simple CRUD operations in cases, when you don't want to introduce a solid ORM like SQLAlchemy or whatever, but still want to keep storage-related stuff out of your code.\n\n## Getting Started\n### Installation\nTo install from [pypi](https://pypi.org/project/picorm/):\n```\npip install picorm\n```\n\n### Simple usage\n```python\nfrom picorm import FileStorage as Storage # import one of storage implementations\n\nstorage = Storage('path_to_database_file') # create storage object\n\n# every collection that you need to store must inherit from storage's Table class\nclass Users(storage.Table): \n    def __init__(self, fields = {}):\n        defaults = OrderedDict([('key', 'users')]) # specify table name\n        for k, v in fields.items():\n            defaults[k] = v\n        super().__init__(defaults)\n        storage.create('users', OrderedDict([ # specify table name and desired fields to be stored\n            ('key', storage.types['int']), \n            ('id', storage.types['int']),\n            ('name', storage.types['str']),\n            ('type', storage.types['str']),\n        ]))\n        # every query on storage.users will return object of this class if not specified otherwise\n        class User(self.Record): \n            def __init__(self, fields = {}):\n                # default values for fields\n                defaults = OrderedDict([\n                    ('key', -1), \n                    ('id', -1),\n                    ('name', ':null'),\n                    ('type', ':null'),\n                ])\n                for k, v in fields.items():\n                    defaults[k] = v\n                super().__init__(defaults)\n            # that's it, you can add your own methods and properties\n        self.User = User # attach classes to table object\nusers = Users() # create table object\nusers.Record = users.User # make every query return object of class User\n```\n### Storage querying\n```python\nnew_user = users.User({'id': 42, 'name': 'foo'}) # create record, you can do it this way or through storage.users.User\nusers.add (new_user) # place it in storage\nfound_user = users.find_one({'name': 'foo'}) # get storage Record - an object of class User\nfound_user.get('id') # get record's field value\nfound_user.set({'name': 'bar'}) # change desired fields\nstorage.disconnect() # don't forget to disconnect from storage if you're planning to switch engines\n```\n\n### Return different subclasses of table record\nIn those cases, when you need queries to return various subclasses of table record, you can simply introduce them after User definition in example:\n```python\nclass Users(storage.Table): \n    def __init__(self, fields = {}):\n        # ...\n        class Player(User): # an example of subclassing table Record\n            type = 'player'\n            def __init__(self, fields):\n                overrides = {'type': Player.type}\n                merged = {**fields, **overrides}\n                super().__init__(merged)\n        \n        # ...\n        self.Player = Player # attach class to table object\n        \n        # create a type -> class map to return objects of different subclasses of table record\n        self.type_class_map = { \n            Player.type: Player,\n            User.type: User,\n            ':null': User, # \"default\" class to wrap record\n        }\n\n# make every query return object of either Player or User class based on \"type\" field value\nusers.Record = lambda fields: users.type_class_map[fields['type']](fields)\n```\n\n### Table methods \n| method   | arguments               | returns              |\n| :------  | :---------------------- | :------------------- |\n| create   |self, name, schema, log  |None                  |\n| find     |self, selector           |list of Record objects|\n| find_one |self, selector           |Record object or None |\n| find_max |self, key                |Record object or None |\n| add      |self, record             |None                  |\n| remove   |self, record             |None                  |\n\n### Record operations\n| method  | arguments    | returns             |\n| :------ | :----------- | :------------------ |\n| set     |self, fields  |None                 |\n| get     |self, key     |Record's field value |\n\n### Supported engines\n- File storage\n- SQLite storage\n\n## Development\n### Environment setup\n1.  Install Python 3.9+\n2.  Install `virtualenv`\n    ```sh\n    pip install virtualenv\n    ```\n3.  Clone this project\n4.  From project directory, run\n    ```sh\n    virtualenv .env\n    ```\n    **Note**: This will create a virtual environment using the Python version\n    that `virtualenv` was run with (which will be the version it was installed\n    with). To use a specific Python version, run:\n    ```sh\n    virtualenv --python=<path_to_other_python_version> .env\n    # For example, this might look like\n    virtualenv --python=/usr/bin/python3.6 .env\n    ```\n5.  Assuming you are using the `bash` shell, run:\n    ```sh\n    source .env/bin/activate\n    ```\n    For other shells, see the other `activate.*` scripts in the `.env/bin/`\n    directory. If you are on Windows, run:\n    ```sh\n    .env\\Scripts\\activate.bat\n    ```\n6.  Install all of the required packages using\n    ```sh\n    pip install -r requirements.txt\n    ```\n\n### Testing\nThis project uses tox -> pytest. To trigger tests either run ```tox``` or ```pytest``` optionally with -vv and -s flags for verbosity and prints.\n\n### Packaging module\nRun the following command to package picorm module:\n```sh\npython -m pip install --upgrade build\npython -m build\n```\nGenerated archive and .whl package will be placed in **dist** directory.\n\n## Contributions\nPR are always welcome!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/k5md/picorm",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "picorm",
    "package_url": "https://pypi.org/project/picorm/",
    "platform": null,
    "project_url": "https://pypi.org/project/picorm/",
    "project_urls": {
      "Bug Tracker": "https://github.com/k5md/picorm/issues",
      "Homepage": "https://github.com/k5md/picorm"
    },
    "release_url": "https://pypi.org/project/picorm/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Small ORM with limited functions for multiple database engines for pet-projects",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17354415,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13e1fc2247e5a8ccbc57d51f09362f56e0285a70b674ea8b32337d4d359e0b2d",
          "md5": "5387e82b32928fbbcddecd8f215a8540",
          "sha256": "e4ea5cf03344dffb25a04fbe9e1f5806955b0cf8013a54ee8714b0abf013d33d"
        },
        "downloads": -1,
        "filename": "picorm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5387e82b32928fbbcddecd8f215a8540",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5992,
        "upload_time": "2023-03-19T15:32:24",
        "upload_time_iso_8601": "2023-03-19T15:32:24.102414Z",
        "url": "https://files.pythonhosted.org/packages/13/e1/fc2247e5a8ccbc57d51f09362f56e0285a70b674ea8b32337d4d359e0b2d/picorm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e501d1b46aaaec28ca163fb327819d6dd63fd9ce3da32b2398efebd9d874525",
          "md5": "cd27380e18f07ea3218aaa8970fb13c9",
          "sha256": "e225169b3d4e76b66a60b1447e79a7f60b991a42c1f1db0edd72298cf10e3498"
        },
        "downloads": -1,
        "filename": "picorm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd27380e18f07ea3218aaa8970fb13c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5498,
        "upload_time": "2023-03-19T15:32:25",
        "upload_time_iso_8601": "2023-03-19T15:32:25.866281Z",
        "url": "https://files.pythonhosted.org/packages/1e/50/1d1b46aaaec28ca163fb327819d6dd63fd9ce3da32b2398efebd9d874525/picorm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13e1fc2247e5a8ccbc57d51f09362f56e0285a70b674ea8b32337d4d359e0b2d",
        "md5": "5387e82b32928fbbcddecd8f215a8540",
        "sha256": "e4ea5cf03344dffb25a04fbe9e1f5806955b0cf8013a54ee8714b0abf013d33d"
      },
      "downloads": -1,
      "filename": "picorm-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5387e82b32928fbbcddecd8f215a8540",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5992,
      "upload_time": "2023-03-19T15:32:24",
      "upload_time_iso_8601": "2023-03-19T15:32:24.102414Z",
      "url": "https://files.pythonhosted.org/packages/13/e1/fc2247e5a8ccbc57d51f09362f56e0285a70b674ea8b32337d4d359e0b2d/picorm-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e501d1b46aaaec28ca163fb327819d6dd63fd9ce3da32b2398efebd9d874525",
        "md5": "cd27380e18f07ea3218aaa8970fb13c9",
        "sha256": "e225169b3d4e76b66a60b1447e79a7f60b991a42c1f1db0edd72298cf10e3498"
      },
      "downloads": -1,
      "filename": "picorm-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd27380e18f07ea3218aaa8970fb13c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5498,
      "upload_time": "2023-03-19T15:32:25",
      "upload_time_iso_8601": "2023-03-19T15:32:25.866281Z",
      "url": "https://files.pythonhosted.org/packages/1e/50/1d1b46aaaec28ca163fb327819d6dd63fd9ce3da32b2398efebd9d874525/picorm-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}