{
  "info": {
    "author": null,
    "author_email": "\"Rafael J. Vicente\" <rafaelj.vicente@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Setuptools CUDA C++\n\n[![PyPI - Version](https://img.shields.io/pypi/v/setuptools-cuda-cpp.svg)](https://pypi.org/project/setuptools-cuda-cpp)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/setuptools-cuda-cpp.svg)](https://pypi.org/project/setuptools-cuda-cpp)\n[![GitHub - Dependencies](https://img.shields.io/librariesio/release/pypi/setuptools-cuda-cpp?label=deps)](https://pypi.org/project/setuptools-cuda-cpp)\n[![GitHub - Issues](https://img.shields.io/github/issues/RafaelJVicente/setuptools-cuda-cpp?color=yellow)](https://github.com/RafaelJVicente/setuptools-cuda-cpp/issues)\n[![GitHub - Last commit](https://img.shields.io/github/last-commit/RafaelJVicente/setuptools-cuda-cpp?color=purple)](https://github.com/RafaelJVicente/setuptools-cuda-cpp)\n\n[//]: # ([![GitHub - Build]&#40;https://img.shields.io/github/actions/workflow/status/RafaelJVicente/setuptools-cuda-cpp/unit-tests.yml&#41;]&#40;https://github.com/RafaelJVicente/setuptools-cuda-cpp&#41;)\n\nThe setuptools-cuda-cpp is a module that extends setuptools functionality for building hybrid C++ and CUDA extensions\nfor Python wrapper modules.\n\n-----\n\n**Table of Contents**\n\n- [Summary](#summary)\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Issues](#issues)\n- [License](#license)\n- [Acknowledgements](#acknowledgements)\n\n## Summary\n\nThis project meant to be a soft solution to include mixed c++/CUDA extensions in your projects, no matter if you are\nusing old python version (3.6+) or old GPU drivers (sm/compute arch 3.0+).\n\n## Features\n\n- Python version >= 3.6 .\n- SM(StreamingMultiprocessor)/Compute architecture >= 3.0 .\n- Cython compatible but not mandatory.\n- Any CUDA version (since you can configure nvcc flags).\n- Preloaded flags for cpp and CUDA compilers.\n- Mixed compilations (.cpp and .cu files can be included in a single extension).\n- Advanced find_cuda features (automatically try to find the CUDAHOME directory).\n- Include NVIDIA Management Library (NVML) capabilities info.\n\n## Installation\n\n```console\npip install setuptools-cuda-cpp\n```\n\n## Usage\n\nAdd the library to your project configuration files (\"pyproject.toml\" and/or \"setup.py/.cfg\").\n\n### 1. Example for \"legacy build\" (old python versions with setuptools < 61.0.0):\n\n[**setup.py**](./examples/cuda_example/setup.py)\n\n```python\nfrom pathlib import Path\nfrom setuptools import setup\nfrom setuptools_cuda_cpp import CUDAExtension, BuildExtension, fix_dll\n\ncuda_ext_path = Path('src/my_cuda_package/cuda_ext')\ncuda_ext = CUDAExtension(\n    name='my_cuda_package.cuda_ext',\n    include_dirs=[cuda_ext_path / 'include'],\n    sources=[\n        cuda_ext_path / 'cuda_ext.cu',\n        cuda_ext_path / 'cuda_ext_wrapper.cpp',\n    ],\n    libraries=fix_dll(['cudart']),  # Use fix_dll() only for Windows compatibility (check documentation for more info).\n    extra_compile_args={\n        'cxx': ['-g'],  # cpp compiler flags\n        'nvcc': ['-O2'],  # nvcc flags\n    },\n)\n\nsetup(\n    name='my-cuda-package',\n    version='0.0.1',\n    install_requires=['numpy', ],\n    extras_require={'cython': ['cython'], },\n    ext_modules=[cuda_ext],\n    cmdclass={'build_ext': BuildExtension},\n)\n```\n\nYou can also use pyproject.toml with [Flit](https://flit.pypa.io) making\na [custom build-backend](https://setuptools.pypa.io/en/latest/build_meta.html#dynamic-build-dependencies-and-other-build-meta-tweaks).\n\n### 2. Example for \"pyproject.toml build\" (with setuptools >= 61.0.0):\n\n[**pyproject.toml**](./examples/cuda_example/build_for_setuptools_61.0.0+/pyproject.toml)\n\n```toml\n[build-system]\nrequires = [\"setuptools-cuda-cpp\", \"flit_core >=3.2,<4\", \"wheel\", \"cython\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"my-cuda-package\"\ndependencies = [\"numpy\"]\ndynamic = [\"version\", \"description\"]\n# ...\n```\n\nAnd configure the setup.py for the different extensions you want to use:\n\n[**setup.py**](examples/cuda_example/build_for_setuptools_61.0.0+/setup.py)\n\n```python\nfrom pathlib import Path\nfrom setuptools import setup\nfrom setuptools_cuda_cpp import CUDAExtension, BuildExtension, fix_dll\n\ncuda_ext_path = Path('src/my_cuda_package/cuda_ext')\ncuda_ext = CUDAExtension(\n    name='my_cuda_package.cuda_ext',\n    include_dirs=[cuda_ext_path / 'include'],\n    sources=[\n        cuda_ext_path / 'cuda_ext.cu',\n        cuda_ext_path / 'cuda_ext_wrapper.cpp',\n    ],\n    libraries=fix_dll(['cudart']),  # Use fix_dll() only for Windows compatibility (check documentation for more info).\n    extra_compile_args={\n        'cxx': ['-g'],  # cpp compiler flags\n        'nvcc': ['-O2'],  # nvcc flags\n    },\n)\n\nsetup(\n    ext_modules=[cuda_ext],\n    cmdclass={'build_ext': BuildExtension},\n)\n```\n\n## Issues\n\nIf you receive a EnvironmentError exception you should set CUDAHOME environment variable pointing to the CUDA\ninstallation path. This would happen if the find_cuda() method is not capable of locate it.\nAs reference the directory should contain:\n\n```text\nCUDAHOME\n├── bin\n│   └── nvcc\n├── include\n│   └── cudart.h\n├── lib\n└── nvml\n```\n\n## License\n\n`setuptools-cuda-cpp` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n\n## Acknowledgements\nThe package is based on [cpp_extension](https://pytorch.org/docs/stable/cpp_extension.html), but it also includes:\n- Support for deprecated older architectures (from sm / compute 3.0).\n- Improved find_cuda system.\n- Pathlib library and Windows missing dll support.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "cuda,extension,compilation,compile,cpp,c++,cross,ext,setuptools,wrapper",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "setuptools-cuda-cpp",
    "package_url": "https://pypi.org/project/setuptools-cuda-cpp/",
    "platform": null,
    "project_url": "https://pypi.org/project/setuptools-cuda-cpp/",
    "project_urls": {
      "Documentation": "https://github.com/RafaelJVicente/setuptools-cuda-cpp#readme",
      "Issues": "https://github.com/RafaelJVicente/setuptools-cuda-cpp/issues",
      "Source": "https://github.com/RafaelJVicente/setuptools-cuda-cpp"
    },
    "release_url": "https://pypi.org/project/setuptools-cuda-cpp/0.1.8/",
    "requires_dist": [
      "setuptools",
      "nvidia-ml-py"
    ],
    "requires_python": ">=3.6",
    "summary": "Module that extends setuptools functionality for building hybrid C++ and CUDA extension for Python wrapper modules.",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17261335,
  "releases": {
    "0.1.7": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "05c3db80b8d411b6bd58eb4b8d09891b2c0b5edaea3c1268aa10878137f2b72b",
          "md5": "66244bb73f4ebb76d9e07da90b440525",
          "sha256": "9e6b8674cbe0029cd2b2140a4de522990b6963f176fa62d09bc2cc40b83e6bc9"
        },
        "downloads": -1,
        "filename": "setuptools_cuda_cpp-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66244bb73f4ebb76d9e07da90b440525",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18320,
        "upload_time": "2023-03-12T14:29:42",
        "upload_time_iso_8601": "2023-03-12T14:29:42.832636Z",
        "url": "https://files.pythonhosted.org/packages/05/c3/db80b8d411b6bd58eb4b8d09891b2c0b5edaea3c1268aa10878137f2b72b/setuptools_cuda_cpp-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c4032f1d9ecc4475d2588a60315df674f90ac1c60517190719044041b1e042b6",
          "md5": "95184493bd0ef17afe9406b13e1da384",
          "sha256": "8f5022aecc4252d3483ae22be007293adc7fadf21fce096fa8c53bd6f4c8081e"
        },
        "downloads": -1,
        "filename": "setuptools-cuda-cpp-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "95184493bd0ef17afe9406b13e1da384",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23709,
        "upload_time": "2023-03-12T14:29:45",
        "upload_time_iso_8601": "2023-03-12T14:29:45.441316Z",
        "url": "https://files.pythonhosted.org/packages/c4/03/2f1d9ecc4475d2588a60315df674f90ac1c60517190719044041b1e042b6/setuptools-cuda-cpp-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0a4b9a0a263f0a650dd5942030c79d372828e7a8097e643ca17bcceabfdca5f6",
          "md5": "0763abd4379708161c15abe41fc9aac5",
          "sha256": "809d018d513e17ac32d4d97ad01c03713b9e1978bae3037eda4f8b3919b76ee2"
        },
        "downloads": -1,
        "filename": "setuptools_cuda_cpp-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0763abd4379708161c15abe41fc9aac5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18319,
        "upload_time": "2023-03-12T15:37:39",
        "upload_time_iso_8601": "2023-03-12T15:37:39.062377Z",
        "url": "https://files.pythonhosted.org/packages/0a/4b/9a0a263f0a650dd5942030c79d372828e7a8097e643ca17bcceabfdca5f6/setuptools_cuda_cpp-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "442d0d18183db086bd1386410a8baed4b71ce050648d399efc2fdbabb60032b8",
          "md5": "8ee5c46fc5678b932a877351fcf5539a",
          "sha256": "7b17eef33060c8b6dc36a8e9f86d6e5ac69a4b6f33f3884d85b8ab05a9526b92"
        },
        "downloads": -1,
        "filename": "setuptools-cuda-cpp-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8ee5c46fc5678b932a877351fcf5539a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23737,
        "upload_time": "2023-03-12T15:37:41",
        "upload_time_iso_8601": "2023-03-12T15:37:41.697881Z",
        "url": "https://files.pythonhosted.org/packages/44/2d/0d18183db086bd1386410a8baed4b71ce050648d399efc2fdbabb60032b8/setuptools-cuda-cpp-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "0a4b9a0a263f0a650dd5942030c79d372828e7a8097e643ca17bcceabfdca5f6",
        "md5": "0763abd4379708161c15abe41fc9aac5",
        "sha256": "809d018d513e17ac32d4d97ad01c03713b9e1978bae3037eda4f8b3919b76ee2"
      },
      "downloads": -1,
      "filename": "setuptools_cuda_cpp-0.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0763abd4379708161c15abe41fc9aac5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18319,
      "upload_time": "2023-03-12T15:37:39",
      "upload_time_iso_8601": "2023-03-12T15:37:39.062377Z",
      "url": "https://files.pythonhosted.org/packages/0a/4b/9a0a263f0a650dd5942030c79d372828e7a8097e643ca17bcceabfdca5f6/setuptools_cuda_cpp-0.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "442d0d18183db086bd1386410a8baed4b71ce050648d399efc2fdbabb60032b8",
        "md5": "8ee5c46fc5678b932a877351fcf5539a",
        "sha256": "7b17eef33060c8b6dc36a8e9f86d6e5ac69a4b6f33f3884d85b8ab05a9526b92"
      },
      "downloads": -1,
      "filename": "setuptools-cuda-cpp-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "8ee5c46fc5678b932a877351fcf5539a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23737,
      "upload_time": "2023-03-12T15:37:41",
      "upload_time_iso_8601": "2023-03-12T15:37:41.697881Z",
      "url": "https://files.pythonhosted.org/packages/44/2d/0d18183db086bd1386410a8baed4b71ce050648d399efc2fdbabb60032b8/setuptools-cuda-cpp-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}