{
  "info": {
    "author": "Claudio Walser",
    "author_email": "info@gitcd.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Security"
    ],
    "description": "Why\n===\n\nThere are a few reasons, why you would want to unlock your keyring automatically. I don't judge, everybody has her/his own reasons. Enabled autologin is one you find very often. But also headless systems without gnome-session handling, you still want to store your secrets safely I guess.\n\nI personally use a yubikey and decided a challenge-response is sufficient for my login. Also, I do have a GPG keypair, which is also stored on the yubikey.\nThe private key on the yubikey is protected through a pin. After 3 pin mismatches the private keys get deleted from the yubikey.\nOf course i do store password encrypted backups of my private keys within a encrypted database of a local password manager.\n\nLong story short, I do this because I don't want to type in my utterly long password everytime I log into the device. But, I also don't want to sacrifice security. \n\nThe idea is to store your password of the default gnome-keyring gpg-encrypted on your disk. This is fine for me with a yubikey, where the private keys aren't loaded in the system the whole time. I can un-plug my yubikey which effectively prevents my system from decrypting anything. With my private keys sitting in my .gnupg directory and beeing unlocked permanentely, I would not be that confident with this solution.\n\nThen also, gnome-keyring uses by default your user password for the default keyring. This makes sense, regarding the fact, your system unlocks the default keyring after login using your given password.\nIn this setup, I recommend using a different, unique password for your default keyring. You can change the keyrings password with seahorse, for example.\n\n.. container:: alert alert-warning\n\n    **One other \"solution\" you come across frightening often while searching for a solution: Use an empty password for your default keyring. DON'T DO THIS! This is the worst idea, better don't use gnome-keyring at all then.**\n\n\n\nSetup\n=====\n\n.. code-block:: bash\n\n    pip install --user --upgrade gnome-keyring-gpg-unlock\n    gnome-keyring-gpg-unlock setup --public-key <your-gpg-public-key> --secret <path-where-your-encrypted-password-is-stored>\n\nType in your keyring password when asked. \n\n\nCheck Setup\n===========\nCheck your password\n\n.. code-block:: bash\n\n    gpg --quiet --decrypt <path-where-your-encrypted-password-is-stored>\n\nCheck the service file\n\n.. code-block:: bash\n\n    systemctl --user cat gnome-keyring-gpg-unlock.service\n\nCheck unlock\nLock your default keyring in seahorse.\n\n.. code-block:: bash\n\n    gnome-keyring-gpg-unlock unlock --secret <path-where-your-encrypted-password-is-stored>\n\nSeahorse won't update it's ui, press the unlock button and the secrets will appear without a login prompt. Or close and reopen seahorse.\n\n\nCredits\n=======\n\n- Idea\n\nThe whole idea of this is not mine. I have seen it first at recolic's repository. Unfortunately i had issues compiling his project. So i deciced to take the (for me) simpler approach and rewrite it as a python package.\nhttps://github.com/recolic/gnome-keyring-yubikey-unlock\n\n- Unlock the keyring\n\nThere is a controversial debate going on about this. Libsecret does not provide an api for unlocking keyrings by password directly. For security reasons, they decided to only unlock via a password dialog under all circumstances. The same goes for the python module keyring. HÃ¥vard Moen solved this by interacting with the gnome-keyring control socket directly. You might want to look into his approach using the tpm chip anyway.\nhttps://codeberg.org/umglurf/gnome-keyring-unlock\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/claudio-walser/gnome-keyring-gpg-unlock",
    "keywords": "keyring,gnome-keyring,unlock,gnome-keyring-unlock",
    "license": "Apache License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gnome-keyring-gpg-unlock",
    "package_url": "https://pypi.org/project/gnome-keyring-gpg-unlock/",
    "platform": null,
    "project_url": "https://pypi.org/project/gnome-keyring-gpg-unlock/",
    "project_urls": {
      "Homepage": "https://github.com/claudio-walser/gnome-keyring-gpg-unlock"
    },
    "release_url": "https://pypi.org/project/gnome-keyring-gpg-unlock/0.0.2/",
    "requires_dist": [
      "simpcli",
      "python-gnupg",
      "argparse",
      "argcomplete",
      "typing"
    ],
    "requires_python": "",
    "summary": "Auto unlock your default gnome-keyring with a gpg encrypted password",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16949393,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0090069df8d875980f823c1325d8074d8c5aaaff263c00360509ddb00e9f0eb",
          "md5": "391ccc1d4fd72faa2f0207affd207ec7",
          "sha256": "f0f3fea446a5aaab56826b309d06630da9649aba8d01c6fbb270bf41aee7b93d"
        },
        "downloads": -1,
        "filename": "gnome_keyring_gpg_unlock-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "391ccc1d4fd72faa2f0207affd207ec7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8901,
        "upload_time": "2023-02-20T20:02:24",
        "upload_time_iso_8601": "2023-02-20T20:02:24.771043Z",
        "url": "https://files.pythonhosted.org/packages/f0/09/0069df8d875980f823c1325d8074d8c5aaaff263c00360509ddb00e9f0eb/gnome_keyring_gpg_unlock-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6101f457b14e726018d1a8fd9fdf03e442b18e0c6eef7865de64c106810823ed",
          "md5": "91016501a2913039e577313b1fdaca55",
          "sha256": "6ee5f8b4560ed3c8b401fe92b1019611e93e32f6b9dce9766de39351fbf8c8ba"
        },
        "downloads": -1,
        "filename": "gnome_keyring_gpg_unlock-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91016501a2913039e577313b1fdaca55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8905,
        "upload_time": "2023-02-20T20:14:08",
        "upload_time_iso_8601": "2023-02-20T20:14:08.978876Z",
        "url": "https://files.pythonhosted.org/packages/61/01/f457b14e726018d1a8fd9fdf03e442b18e0c6eef7865de64c106810823ed/gnome_keyring_gpg_unlock-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6101f457b14e726018d1a8fd9fdf03e442b18e0c6eef7865de64c106810823ed",
        "md5": "91016501a2913039e577313b1fdaca55",
        "sha256": "6ee5f8b4560ed3c8b401fe92b1019611e93e32f6b9dce9766de39351fbf8c8ba"
      },
      "downloads": -1,
      "filename": "gnome_keyring_gpg_unlock-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91016501a2913039e577313b1fdaca55",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8905,
      "upload_time": "2023-02-20T20:14:08",
      "upload_time_iso_8601": "2023-02-20T20:14:08.978876Z",
      "url": "https://files.pythonhosted.org/packages/61/01/f457b14e726018d1a8fd9fdf03e442b18e0c6eef7865de64c106810823ed/gnome_keyring_gpg_unlock-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}