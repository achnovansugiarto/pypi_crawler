{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Software Development"
    ],
    "description": "[![Downloads](http://pepy.tech/badge/opencv-python)](http://pepy.tech/project/opencv-python)\n\n## OpenCV on Wheels\n\n**Unofficial** pre-built OpenCV packages for Python.\n\n### Installation and Usage\n\n1. If you have previous/other manually installed (= not installed via ``pip``) version of OpenCV installed (e.g. cv2 module in the root of Python's site-packages), remove it before installation to avoid conflicts.\n2. Select the correct package for your environment:\n\n    There are four different packages and you should **select only one of them**. Do not install multiple different packages in the same environment. There is no plugin architecture: all the packages use the same namespace (`cv2`). If you installed multiple different packages in the same environment, uninstall them all with ``pip uninstall`` and reinstall only one package.\n\n    **a.** Packages for standard desktop environments (Windows, macOS, almost any GNU/Linux distribution)\n\n    - run ``pip install opencv-python`` if you need only main modules\n    - run ``pip install opencv-contrib-python`` if you need both main and contrib modules (check extra modules listing from [OpenCV documentation](https://docs.opencv.org/master/))\n\n    **b.** Packages for server (headless) environments\n\n    These packages do not contain any GUI functionality. They are smaller and suitable for more restricted environments.\n\n    - run ``pip install opencv-python-headless`` if you need only main modules\n    - run ``pip install opencv-contrib-python-headless`` if you need both main and contrib modules (check extra modules listing from [OpenCV documentation](https://docs.opencv.org/master/))\n\n3. Import the package:\n\n    ``import cv2``\n\n    All packages contain haarcascade files. ``cv2.data.haarcascades`` can be used as a shortcut to the data folder. For example:\n\n    ``cv2.CascadeClassifier(cv2.data.haarcascades + \"haarcascade_frontalface_default.xml\")``\n\n5. Read [OpenCV documentation](https://docs.opencv.org/master/)\n\n6. Before opening a new issue, read the FAQ below and have a look at the other issues which are already open.\n\nFrequently Asked Questions\n--------------------------\n\n**Q: Do I need to install also OpenCV separately?**\n\nA: No, the packages are special wheel binary packages and they already contain statically built OpenCV binaries.\n\n**Q: Pip fails with ``Could not find a version that satisfies the requirement ...``?**\n\nA: Most likely the issue is related to too old pip and can be fixed by running ``pip install --upgrade pip``. Note that the wheel (especially manylinux) format does not currently support properly ARM architecture so there are no packages for ARM based platforms in PyPI. However, ``opencv-python`` packages for Raspberry Pi can be found from https://www.piwheels.org/.\n\n**Q: Import fails on Windows: ``ImportError: DLL load failed: The specified module could not be found.``?**\n\nA: If the import fails on Windows, make sure you have [Visual C++ redistributable 2015](https://www.microsoft.com/en-us/download/details.aspx?id=48145) installed. If you are using older Windows version than Windows 10 and latest system updates are not installed, [Universal C Runtime](https://support.microsoft.com/en-us/help/2999226/update-for-universal-c-runtime-in-windows) might be also required.\n\nWindows N and KN editions do not include Media Feature Pack which is required by OpenCV. If you are using Windows N or KN edition, please install also [Windows Media Feature Pack](https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions).\n\nIf the above does not help, check if you are using Anaconda. Old Anaconda versions have a bug which causes the error, see [this issue](https://github.com/skvark/opencv-python/issues/36) for a manual fix.\n\nIf you still encounter the error after you have checked all the previous solutions, download [Dependencies](https://github.com/lucasg/Dependencies) and open the ``cv2.pyd`` (located usually at ``C:\\Users\\username\\AppData\\Local\\Programs\\Python\\PythonXX\\Lib\\site-packages\\cv2``) file with it to debug missing DLL issues.\n\n**Q: I have some other import errors?**\n\nA: Make sure you have removed old manual installations of OpenCV Python bindings (cv2.so or cv2.pyd in site-packages).\n\n**Q: Why the packages do not include non-free algorithms?**\n\nA: Non-free algorithms such as SIFT and SURF are not included in these packages because they are patented and therefore cannot be distributed as built binaries. See this issue for more info: https://github.com/skvark/opencv-python/issues/126\n\n**Q: Why the package and import are different (opencv-python vs. cv2)?**\n\nA: It's easier for users to understand ``opencv-python`` than ``cv2`` and it makes it easier to find the package with search engines. `cv2` (old interface in old OpenCV versions was named as `cv`) is the name that OpenCV developers chose when they created the binding generators. This is kept as the import name to be consistent with different kind of tutorials around the internet. Changing the import name or behaviour would be also confusing to experienced users who are accustomed to the ``import cv2``.\n\n## Documentation for opencv-python\n\n[![AppVeyor CI test status (Windows)](https://img.shields.io/appveyor/ci/skvark/opencv-python.svg?maxAge=3600&label=Windows)](https://ci.appveyor.com/project/skvark/opencv-python)\n[![Travis CI test status (Linux and OS X)](https://img.shields.io/travis/skvark/opencv-python.svg?maxAge=3600&label=Linux+macOS)](https://travis-ci.org/skvark/opencv-python)\n\nThe aim of this repository is to provide means to package each new [OpenCV release](https://github.com/opencv/opencv/releases) for the most used Python versions and platforms.\n\n### Build process\n\nThe project is structured like a normal Python package with a standard ``setup.py`` file.\nThe build process for a single entry in the build matrices is as follows (see for example ``appveyor.yml`` file):\n\n0. In Linux and MacOS build: get OpenCV's optional C dependencies that we compile against\n\n1. Checkout repository and submodules\n\n   -  OpenCV is included as submodule and the version is updated\n      manually by maintainers when a new OpenCV release has been made\n   -  Contrib modules are also included as a submodule\n\n2. Find OpenCV version from the sources\n3. Install Python dependencies\n\n   - ``setup.py`` installs the dependencies itself, so you need to run it in an environment\n     where you have the rights to install modules with Pip for the running Python\n\n4. Build OpenCV\n\n   -  tests are disabled, otherwise build time increases too much\n   -  there are 4 build matrix entries for each build combination: with and without contrib modules, with and without GUI (headless)\n   -  Linux builds run in manylinux Docker containers (CentOS 5)\n\n5. Rearrange OpenCV's build result, add our custom files and generate wheel\n\n6. Linux and macOS wheels are transformed with auditwheel and delocate, correspondingly\n\n7. Install the generated wheel\n8. Test that Python can import the library and run some sanity checks\n9. Use twine to upload the generated wheel to PyPI (only in release builds)\n\nSteps 1--5 are handled by ``setup.py bdist_wheel``.\n\nThe build can be customized with environment variables.\nIn addition to any variables that OpenCV's build accepts, we recognize:\n\n- ``ENABLE_CONTRIB`` and ``ENABLE_HEADLESS``. Set to ``1`` to build the contrib and/or headless version\n- ``CMAKE_ARGS``. Additional arguments for OpenCV's CMake invocation. You can use this to make a custom build.\n\n### Licensing\n\nOpencv-python package (scripts in this repository) is available under MIT license.\n\nOpenCV itself is available under [3-clause BSD License](https://github.com/opencv/opencv/blob/master/LICENSE).\n\nThird party package licenses are at [LICENSE-3RD-PARTY.txt](https://github.com/skvark/opencv-python/blob/master/LICENSE-3RD-PARTY.txt).\n\nAll wheels ship with [FFmpeg](http://ffmpeg.org) licensed under the [LGPLv2.1](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html).\n\nLinux and MacOS wheels ship with [Qt 4.8.7](http://doc.qt.io/qt-4.8/lgpl.html) licensed under the [LGPLv2.1](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html).\n\n### Versioning\n\n``find_version.py`` script searches for the version information from OpenCV sources and appends also a revision number specific to this repository to the version string.\n\n### Releases\n\nA release is made and uploaded to PyPI when a new tag is pushed to master branch. These tags differentiate packages (this repo might have modifications but OpenCV version stays same) and should be incremented sequentially. In practice, release version numbers look like this:\n\n``cv_major.cv_minor.cv_revision.package_revision`` e.g. ``3.1.0.0``\n\n### Development builds\n\nEvery commit to the master branch of this repo will be built. Possible build artifacts use local version identifiers:\n\n``cv_major.cv_minor.cv_revision+git_hash_of_this_repo`` e.g. ``3.1.0+14a8d39``\n\nThese artifacts can't be and will not be uploaded to PyPI.\n\n### Manylinux wheels\n\nLinux wheels are built using [manylinux](https://github.com/pypa/python-manylinux-demo). These wheels should work out of the box for most of the distros (which use GNU C standard library) out there since they are built against an old version of glibc.\n\nThe default ``manylinux`` images have been extended with some OpenCV dependencies. See [Docker folder](https://github.com/skvark/opencv-python/tree/master/docker) for more info.\n\n### Supported Python versions\n\nPython 2.7 is the only supported version in 2.x series. Python 2.7 support will be dropped in the end of 2019.\n\nPython 3.x releases follow Numpy releases. For example Python 3.3 is no longer supported by Numpy so support for it has been dropped in ``opencv-python``, too.\n\nCurrently, builds for following Python versions are provided:\n\n- 2.7\n- 3.4\n- 3.5\n- 3.6\n- 3.7\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skvark/opencv-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Olli-Pekka Heinisuo",
    "maintainer_email": "",
    "name": "opencv-openvino-contrib-python",
    "package_url": "https://pypi.org/project/opencv-openvino-contrib-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/opencv-openvino-contrib-python/",
    "project_urls": {
      "Homepage": "https://github.com/skvark/opencv-python"
    },
    "release_url": "https://pypi.org/project/opencv-openvino-contrib-python/4.1.1.26/",
    "requires_dist": [
      "numpy (>=1.17.0)"
    ],
    "requires_python": "",
    "summary": "Wrapper package for OpenCV python bindings.",
    "version": "4.1.1.26",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5842613,
  "releases": {
    "4.1.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d9a22925dc15ae303cd4e8d0252e0b58e07efe14b69b4c237be0399bea5c6ea",
          "md5": "c295e1775606fc03566e6730030beb9f",
          "sha256": "e0cacb6f801ed486c4437ca34e3b167c9be569083d747909532dd30c44e7b00d"
        },
        "downloads": -1,
        "filename": "opencv_openvino_contrib_python-4.1.1.26-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "c295e1775606fc03566e6730030beb9f",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "requires_python": null,
        "size": 58838668,
        "upload_time": "2019-09-17T16:22:41",
        "upload_time_iso_8601": "2019-09-17T16:22:41.893856Z",
        "url": "https://files.pythonhosted.org/packages/4d/9a/22925dc15ae303cd4e8d0252e0b58e07efe14b69b4c237be0399bea5c6ea/opencv_openvino_contrib_python-4.1.1.26-cp35-cp35m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d9a22925dc15ae303cd4e8d0252e0b58e07efe14b69b4c237be0399bea5c6ea",
        "md5": "c295e1775606fc03566e6730030beb9f",
        "sha256": "e0cacb6f801ed486c4437ca34e3b167c9be569083d747909532dd30c44e7b00d"
      },
      "downloads": -1,
      "filename": "opencv_openvino_contrib_python-4.1.1.26-cp35-cp35m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c295e1775606fc03566e6730030beb9f",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "requires_python": null,
      "size": 58838668,
      "upload_time": "2019-09-17T16:22:41",
      "upload_time_iso_8601": "2019-09-17T16:22:41.893856Z",
      "url": "https://files.pythonhosted.org/packages/4d/9a/22925dc15ae303cd4e8d0252e0b58e07efe14b69b4c237be0399bea5c6ea/opencv_openvino_contrib_python-4.1.1.26-cp35-cp35m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}