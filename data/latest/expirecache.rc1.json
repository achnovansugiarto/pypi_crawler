{
  "info": {
    "author": "Kael Zhang",
    "author_email": "i@kael.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "|Build Status|\n\nexpirecache\n========\n\nPython utilities and middleware for neuron.js\n\nexpirecache analyzes the dependencies from user defined facades according\nto the dependency tree, and outputs ``<script>`` tags and configurations\nfor `neuron.js <https://github.com/kaelzhang/neuron>`__\n\nThe dependency tree can be generated by\n`neuron-package-dependency <https://github.com/kaelzhang/neuron-package-dependency>`__\n\nInstall\n-------\n\n.. code:: sh\n\n    $ pip install expirecache\n\nUsage\n-----\n\n.. code:: py\n\n    from expirecache import Neuron\n\n    n = Neuron(\n      dependency_tree=dependency_tree,  # must defined\n      resolve=resolve,\n      version=version,\n      cache=cache,\n      debug=False)\n\n``expirecache`` could be used either in template file or your python\ncontroller.\n\n`Here <./sample/sample-jinja.html>`__ is a sample Jinja2 template file.\n\n-  **dependency\\_tree** ``dict`` the ``json.loads()``\\ ed dependency\n   tree\n-  **resolve** ``function(id)=`` (optional) implements your own custom\n   resolver. ``resolve`` accepts one parameter ``id`` which can be\n   either a ``str`` of module id or a ``list`` of module ids. If a\n   ``str`` is passed in, the method should returns the resolved absolute\n   url of the module id. If ``id`` is a ``list``, an url of comboed\n   script files should be returned.\n-  **debug** ``function|bool=False`` tells expirecache whether should\n   switch on debug mode. When on debug mode, no javascript files of\n   dependencies will be preloaded, and the output will not be\n   compressed.\n-  if ``debug`` is callable, expirecache will use the return value of\n   method ``debug``\n-  if ``debug`` is a boolean value, and ``debug`` is true, the debug\n   mode will be on.\n-  **cache** ``dict=None`` if ``cache`` is defined, it should contains 3\n   methods:\n-  ``cache.has(key)`` returns ``bool``\n-  ``cache.get(key)`` looks up and returns the cached value by key\n-  ``cache.set(key, value)`` sets the value by key\n-  **version** ``str`` only works if ``cache`` is defined. expirecache will\n   uses ``version`` to generate the key to cache the output result\n\nmodule id\n^^^^^^^^^\n\n.. code:: js\n\n    <name>@<version><path>  # for example: 'jquery@2.0.0/jquery.js'\n\nn.facade(entry, data=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  **entry** ``str`` id of the entry module\n\nRegisters a facade entry with ``data``. expirecache will\n\nReturns ``''``\\ (empty string), so you can use this method in python\ntemplate\n\nn.combo(id...)\n^^^^^^^^^^^^^^\n\nReturns ``''``\n\nn.css(id)\n^^^^^^^^^\n\nReturns ``''``\n\nn.output()\n^^^^^^^^^^\n\nReturns ``str``\n\nn.output\\_css()\n^^^^^^^^^^^^^^^\n\nReturns ``str``\n\nLicense\n-------\n\nMIT\n\n.. |Build Status| image:: https://travis-ci.org/kaelzhang/python-expirecache.svg?branch=master\n   :target: https://travis-ci.org/kaelzhang/python-expirecache",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kaelzhang/python-expire-cache",
    "keywords": "cache python expire memcached",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "expirecache",
    "package_url": "https://pypi.org/project/expirecache/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/expirecache/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/kaelzhang/python-expire-cache"
    },
    "release_url": "https://pypi.org/project/expirecache/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A process-safe python adapter to handle cache expiration.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1844308,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd309406d7e187b13758b6997d0d2d5a43ccc74ad759123dd83e228785bd0eda",
          "md5": "1eb47aa2578fd51e82a488de29f64947",
          "sha256": "4d2d6ef6c27cfbf9a4df089fae560227e5bcd2b5c90f4acc2bcf7ee66b03768b"
        },
        "downloads": -1,
        "filename": "expirecache-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1eb47aa2578fd51e82a488de29f64947",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1479,
        "upload_time": "2015-12-03T01:49:34",
        "upload_time_iso_8601": "2015-12-03T01:49:34.221237Z",
        "url": "https://files.pythonhosted.org/packages/cd/30/9406d7e187b13758b6997d0d2d5a43ccc74ad759123dd83e228785bd0eda/expirecache-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd309406d7e187b13758b6997d0d2d5a43ccc74ad759123dd83e228785bd0eda",
        "md5": "1eb47aa2578fd51e82a488de29f64947",
        "sha256": "4d2d6ef6c27cfbf9a4df089fae560227e5bcd2b5c90f4acc2bcf7ee66b03768b"
      },
      "downloads": -1,
      "filename": "expirecache-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1eb47aa2578fd51e82a488de29f64947",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1479,
      "upload_time": "2015-12-03T01:49:34",
      "upload_time_iso_8601": "2015-12-03T01:49:34.221237Z",
      "url": "https://files.pythonhosted.org/packages/cd/30/9406d7e187b13758b6997d0d2d5a43ccc74ad759123dd83e228785bd0eda/expirecache-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}