{
  "info": {
    "author": "Ioannis Biniaris",
    "author_email": "john_biniaris@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "libsearch | ![build](https://github.com/Johnbin89/SearchLibrary/workflows/Build%20Package/badge.svg)\n[![codecov](https://codecov.io/gh/Johnbin89/SearchLibrary/branch/master/graph/badge.svg?token=PQ74UIDAS9)](https://codecov.io/gh/Johnbin89/SearchLibrary)\n===============================================================================\n\n## Description\n\nA Library of search algorithms, used in _State Space Problems_ where the solution is based on a search into a collection of different states, starting from an **Initial state** and following specific rules to get from that state to next possible states until a **Goal state** has been reached.\n\n- Initial State ​ : the state which represents the current description of the problem, from\nwhich the search will begin.\n- State Space : ​ the set of all possible States\n- Actions ​ : a function that takes a State as an argument and return a set of resulting States.\n- Goal State(s) ​ : a State or a set of final States defined by specific rules to terminate the search\nand indicate that an acceptable solution was found.\n\n### Implemented Algorithms\nThe following algorithms are supported. \n#### _Blind Search_\n\n- Depth First Search\n- Breadth First Search\n- Iterative Deepening\n- Branch and Bound\n\n#### _Heuristic Search_\n\n- Best First Search\n- A Star\n- Iterative Deepening(A- Star)\n\n## Getting started\n\nInstall the latest version with:\n\n```shell\npip install libsearch\n```\n## Usage  \n\n```python\nfrom libsearch import function\n```\n\n**Replace _function_ with the algorithm you wish to use by following:**\n_In parenthesis you will find the required arguments for each function. (actions is a function as in description above  which returns child State(s) from a parent State)_\n\n#### Blind Search Algorithms:\n```python\ndepth_first_search(actions=actions, start=InitialState, goal=GoalState)\n```\n```python\nbreadth_first_search(actions=actions, start=InitialState, goal=GoalState)\n```\n```python\niterative_deepening(actions=actions, start=InitialState, goal=GoalState)\n```\n_For Branch and Bound a path_cost function should be provided which returns the cost of reaching a State._\n```python\nbranch_and_bound(actions=actions, start=InitialState, goal=GoalState, path_cost=path_cost)\n```\n\n#### Heuristic Search Algorithms:  \n_heuristic: A heuristic function defined be the user unique for each problem which returns an estimated cost to reach GoalState from current State._\n```python\nbest_first_search(actions=actions, start=InitialState, goal=GoalState, heuristic=heuristic)\n```\n```python\na_star(actions=actions, start=InitialState, goal=GoalState, heuristic=heuristic)\n```\n```python\niterative_deepening_a_star(actions=actions, start=InitialState, goal=GoalState, heuristic=heuristic)\n```\n\n#### (Optional arguments)\n_For evaluation purposes the following can be set as arguments alonside the required above to return the number of explored states or/and the states the algorithms explored before reaching the solution._\n```python\ncount_states=True            #if True it will return the number of explored states too. num_explored\nshow_explored=True           #if True it will return the explored(closed) set too.\n```\n\n#### Solution\nThe **solution** returned by algorithms is a python **Set** consisting of **(list_of_actions, list_of_states)**.  \n_list_of_actions_: the actions it took to reach each State on the path to Goal State  \n_list_of_states_: the path to the Goal State from Initial State\n\n## Example\n\nUsage of Branch and Bound algorithm for the well-known algorithmic problem [Traveling Salesman (TSP)](https://en.wikipedia.org/wiki/Travelling_salesman_problem).  \nIn the following Complete Weighted Graph figure each city is represented by a letter and each path has a path cost:\n\n<img src=\"https://github.com/Johnbin89/SearchLibrary/raw/master/examples/TSPGraph.png\" width=\"700\">\n\nWe use a Dictionary to implement this Graph in python:\n```python\ntspGraph = {'A': {'B':8, 'C':5, 'D':10, 'E':8},\n        'B': {'A':8, 'C':7, 'D':6, 'E':6},\n        'C': {'A':5, 'B':7, 'D':9, 'E':3},\n        'D': {'A':10, 'B':6, 'C':9, 'E':4},\n        'E': {'A':8, 'B':6, 'C':3, 'D':4}}\n```\n\nIn this problem States are cities represented by their letters and actions are moves from a city to another. \ne.g The action \"A-B\" applied to State \"A\" will result to a new State \"B\" and has a cost(weight) of 8.\n\nIn our module we import the branch and bound function:\n```python\nfrom libsearch import branch_and_bound\n```\n\nLets assign the function to a variable (eg. solution):\n ```python\nsolution = branch_and_bound(actions=g.fullneighbors, start='A', goal='A', path_cost=g.path_cost)\n```\n\nIf we were to print _solution_ we would get the following:\n```shell\n(['A-B', 'A-B-D', 'A-B-D-E', 'A-B-D-E-C', 'A-B-D-E-C-A'], ['B', 'D', 'E', 'C', 'A'])\n```\nThe first list are the actions (moving from each letter(State) to the next one) and the latter is a list of States representing the path to reach the Goal State \"A\", whereas in our case it is the same as the Initial State as described in TSP problem.\n\n##### Optinal arguments\nIf we wish to see how many states the branch and bound algorithm explored:\n ```python\nsolution, num_explored = branch_and_bound(actions=g.fullneighbors, start='A', goal='A', path_cost=g.path_cost, count_states=True)\n```\n\nChecking the value of num_explored we can see that 68 States(path combined) were explored before reaching the Goal.  \n\nMore details on the implementation of _fullneighbors_ function which return child States for the specific TSP problem and the path_cost function which return the cost assigned to each path, can be found on [graph.py](examples/graph.py) in examples folder.\n\n## Notes \nThis implementation of search algorithms as functions can be used virtually in any problem that can be defined as a search in a State Space, as long as the User will define the **actions** function to generate new State from an existing one and in case of Heuristic Search a **heuristic function** to estimate the cost of reaching the Goal State.\n\nIn examples folder you can experiment with different algorithms on a Maze problem [maze.py](examples/maze.py).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Johnbin89/SearchLibrary",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libsearch",
    "package_url": "https://pypi.org/project/libsearch/",
    "platform": "",
    "project_url": "https://pypi.org/project/libsearch/",
    "project_urls": {
      "Homepage": "https://github.com/Johnbin89/SearchLibrary"
    },
    "release_url": "https://pypi.org/project/libsearch/0.0.5.post1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A library of searh algorithms",
    "version": "0.0.5.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8720561,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2eebf911fd3a49def3d9d29b676741b4dcc503b90c5c2f316e94f97f27cea73c",
          "md5": "0da7b54814454c743f7c280e72ed11e9",
          "sha256": "f4787916ded169c0b7095ec7c82f33b977283827cb16ae9e676fa68e0ac2e986"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0da7b54814454c743f7c280e72ed11e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20309,
        "upload_time": "2020-11-22T12:58:24",
        "upload_time_iso_8601": "2020-11-22T12:58:24.858030Z",
        "url": "https://files.pythonhosted.org/packages/2e/eb/f911fd3a49def3d9d29b676741b4dcc503b90c5c2f316e94f97f27cea73c/libsearch-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d53e9ba12b051acde34785c3977c76f95282288c080d2205a9bb5e0831ba14d",
          "md5": "491db702e0fab9a7670e92d9b64f4290",
          "sha256": "67c5d05d2bcfd3614074c39a350508f8f29af6cff0cc2b864707d8e0714cd8c6"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "491db702e0fab9a7670e92d9b64f4290",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7276,
        "upload_time": "2020-11-22T12:58:28",
        "upload_time_iso_8601": "2020-11-22T12:58:28.148365Z",
        "url": "https://files.pythonhosted.org/packages/0d/53/e9ba12b051acde34785c3977c76f95282288c080d2205a9bb5e0831ba14d/libsearch-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7726c3d8a03f5af57469aab197991044cf11ba7da953fa6746da165ec0bfcf62",
          "md5": "5fe3c468c4313b9f4fcdc2b15d338de3",
          "sha256": "4f2c7832cee1e3efbd3be871c0d1bd5ca1ee2e8b8e9f43151cb7e00a1871fcf0"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fe3c468c4313b9f4fcdc2b15d338de3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34112,
        "upload_time": "2020-11-22T12:58:26",
        "upload_time_iso_8601": "2020-11-22T12:58:26.713713Z",
        "url": "https://files.pythonhosted.org/packages/77/26/c3d8a03f5af57469aab197991044cf11ba7da953fa6746da165ec0bfcf62/libsearch-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35820281c8182a619231c8b086b6eb2b547e9b987115c1f07b387e65d39ecaa9",
          "md5": "a9b856c42ede3b5304effef1861c3226",
          "sha256": "d7376d68821bbe37e6ca2f8e3588a207122547f6c37a5d6b84bff69c2a7b999f"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a9b856c42ede3b5304effef1861c3226",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14017,
        "upload_time": "2020-11-22T12:58:29",
        "upload_time_iso_8601": "2020-11-22T12:58:29.274096Z",
        "url": "https://files.pythonhosted.org/packages/35/82/0281c8182a619231c8b086b6eb2b547e9b987115c1f07b387e65d39ecaa9/libsearch-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbf5c69c6d169c48e1df7ad7d340c1bb14b301990615117b7a7f0d021c3ce369",
          "md5": "38350026119634c7acccd089d21b292c",
          "sha256": "fbd650e31d604fe08fd70d46b837e76409d5f8daf10825bca607a870bd397e59"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.5.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38350026119634c7acccd089d21b292c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45405,
        "upload_time": "2020-11-22T15:23:07",
        "upload_time_iso_8601": "2020-11-22T15:23:07.454059Z",
        "url": "https://files.pythonhosted.org/packages/db/f5/c69c6d169c48e1df7ad7d340c1bb14b301990615117b7a7f0d021c3ce369/libsearch-0.0.5.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "466ccaa6a713e05712b9ebfbaf1e950d7076430e2f707c3ec0e2de74d6ef50ae",
          "md5": "0272a43f9c5f34ed39866123d8e71e96",
          "sha256": "45c8c9ffb62ffdc02b5a503c4c329e7911948d6b934a77e6dd49d61f5299d758"
        },
        "downloads": -1,
        "filename": "libsearch-0.0.5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "0272a43f9c5f34ed39866123d8e71e96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14033,
        "upload_time": "2020-11-22T15:23:10",
        "upload_time_iso_8601": "2020-11-22T15:23:10.672041Z",
        "url": "https://files.pythonhosted.org/packages/46/6c/caa6a713e05712b9ebfbaf1e950d7076430e2f707c3ec0e2de74d6ef50ae/libsearch-0.0.5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dbf5c69c6d169c48e1df7ad7d340c1bb14b301990615117b7a7f0d021c3ce369",
        "md5": "38350026119634c7acccd089d21b292c",
        "sha256": "fbd650e31d604fe08fd70d46b837e76409d5f8daf10825bca607a870bd397e59"
      },
      "downloads": -1,
      "filename": "libsearch-0.0.5.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "38350026119634c7acccd089d21b292c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 45405,
      "upload_time": "2020-11-22T15:23:07",
      "upload_time_iso_8601": "2020-11-22T15:23:07.454059Z",
      "url": "https://files.pythonhosted.org/packages/db/f5/c69c6d169c48e1df7ad7d340c1bb14b301990615117b7a7f0d021c3ce369/libsearch-0.0.5.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "466ccaa6a713e05712b9ebfbaf1e950d7076430e2f707c3ec0e2de74d6ef50ae",
        "md5": "0272a43f9c5f34ed39866123d8e71e96",
        "sha256": "45c8c9ffb62ffdc02b5a503c4c329e7911948d6b934a77e6dd49d61f5299d758"
      },
      "downloads": -1,
      "filename": "libsearch-0.0.5.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "0272a43f9c5f34ed39866123d8e71e96",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14033,
      "upload_time": "2020-11-22T15:23:10",
      "upload_time_iso_8601": "2020-11-22T15:23:10.672041Z",
      "url": "https://files.pythonhosted.org/packages/46/6c/caa6a713e05712b9ebfbaf1e950d7076430e2f707c3ec0e2de74d6ef50ae/libsearch-0.0.5.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}