{
  "info": {
    "author": "Caroline McCue",
    "author_email": "caroline.t.mccue@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CellML\n\n[![PyPI version](https://badge.fury.io/py/crystalml.svg)](https://badge.fury.io/py/crystalml)\n[![Travis CI status](https://travis-ci.com/hlgirard/CrystalML.svg?branch=master)](https://travis-ci.com/hlgirard/CrystalML/branches)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://github.com/hlgirard/CrystalML/blob/master/LICENSE)\n[![DOI](https://zenodo.org/badge/167236947.svg)](https://zenodo.org/badge/latestdoi/167236947)\n\n**Disclaimer:** This program is undergoing active development and should _not_ be used for production. All APIs and commands are susceptible to change without notice.\n\nIntegrated tool to segment individual cells from optical cell images and use machine learning to determine whether cells are adherent or not based on their shapes.\n\nFrom a directory containing a time-series of images of cells on surfaces, the tool segments individual cells and uses a pre-trained CNN model to determine whether each cell is adherent or not.\n\n## Installation\n\n### Install with pip\n\nCellML is on PyPI so it can be installed with pip\n\n```\npip install cellml\n```\n\n### Install from source\n\nClone the repository to your computer\n\n```\ngit clone https://github.com/caromccue/CellML.git\n```\n\nand install with pip \n\n```\ncd CellML\npip install .\n```\n\n## Usage\n\n### Quickstart\n\nA time series of images of cells on surfaces must be stored in a directory prior to usage of CellML\nThe application can then be used to process the images as follows:\n```\ncellml process --save-plot path/to/directory\n```\n\n### `cellml process` command\n\nThe `process` command takes a directory of images, segments the cells in each image and determines how many cells are adherent or detached from the surface.\nThe program saves a `.csv` file at the root of that directory with the name of each image, the time it was taken (from EXIF data) and the number of cells (total, adherent and detached).\n\n#### Arguments\n\n- `-c`, `--check-segmentation` displays the result of segmenting an image (selected at approximately 80% of the time series) to verify that the segmentation algorithm works well before processing.\n- `-o`, `--save-overlay` resaves all images in the directory with an overlay showing detected cells in red (adherent) or green (detached) for process control.\n- `-p`, `--save-plot` generates and saves plots of cell detachment over time\n- `-v`, `--verbose` increases the verbosity level\n\n### `cellml segment` command\n\nThe `segment` command runs the segmentation algorithm on an image or a directory of images and saves the segmented cell images to disk.\n\n#### Arguments\n\n- `-o`, `--save-overlay` resaves all images in the directory with an overlay showing detected cells\n- `-v`, `--verbose` increases the verbosity level\n- `-p`, `--postsize` selects the size of microposts on the surfaces in the images to set the segmentation parameters accordingly\n\n### `cellml train` command\n\nThe `train` command is used to train the machine learning models used to label the segmented cells as adherent or not. A directory of training data is expected containing subdirectories named `Detached` and `Adherent` containing grayscale images of segmented cells (use the `segment` command to generate the images).\n\n#### Arguments\n\n- `-m`, `--model` selects the type of model to train (svm|cnn|cnn-transfer)\n- `-tb`, `--tensorboard` saves logs for tensorboard visualization in `<cwd>/logs`\n- `-v`, `--verbose` increases the verbosity level\n\n## Repository structure\n\n- `models`: pre-trained machine learning models for cell adhesion discrimination\n- `notebooks`: jupyer notebooks evaluating different image segmentation strategies\n- `src`: source code for the project\n    - `cell_processing`: processing pipeline from directory to detachment rate\n    - `data`: data processing methods, including segmentation and extraction\n    - `models`: model definition and training scripts for the cell binary labelling task\n    - `visualization`: visualization and plotting methods\n    - `cli.py`: entry point to the command line interface\n- `tests`: unittesting\n\n## License\n\nThis project is licensed under the GPLv3 License - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Credit\n\nInitial models were built starting from the example at:\nhttps://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html\n\nLive data visualization class TrainingPlot originally from:\nhttps://github.com/kapil-varshney/utilities/blob/master/training_plot/trainingplot.py\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/caromccue/CellML",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellml",
    "package_url": "https://pypi.org/project/cellml/",
    "platform": null,
    "project_url": "https://pypi.org/project/cellml/",
    "project_urls": {
      "Homepage": "https://github.com/caromccue/CellML"
    },
    "release_url": "https://pypi.org/project/cellml/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Integrated tool to measure the shapes of adherent cells on posts.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13220231,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c5f92271cac5406115e3a6f8fa56c33546c3164ab3e3949c2078159f4dda8f5",
          "md5": "c96614f9f6eec9f4a6fe3b8872032e01",
          "sha256": "c095602f99a420593d75efb0a5ec7da4988565e270efb4c7b9a732b7aa9669d4"
        },
        "downloads": -1,
        "filename": "cellml-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c96614f9f6eec9f4a6fe3b8872032e01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9109004,
        "upload_time": "2022-03-18T20:16:14",
        "upload_time_iso_8601": "2022-03-18T20:16:14.135176Z",
        "url": "https://files.pythonhosted.org/packages/2c/5f/92271cac5406115e3a6f8fa56c33546c3164ab3e3949c2078159f4dda8f5/cellml-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c5f92271cac5406115e3a6f8fa56c33546c3164ab3e3949c2078159f4dda8f5",
        "md5": "c96614f9f6eec9f4a6fe3b8872032e01",
        "sha256": "c095602f99a420593d75efb0a5ec7da4988565e270efb4c7b9a732b7aa9669d4"
      },
      "downloads": -1,
      "filename": "cellml-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c96614f9f6eec9f4a6fe3b8872032e01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9109004,
      "upload_time": "2022-03-18T20:16:14",
      "upload_time_iso_8601": "2022-03-18T20:16:14.135176Z",
      "url": "https://files.pythonhosted.org/packages/2c/5f/92271cac5406115e3a6f8fa56c33546c3164ab3e3949c2078159f4dda8f5/cellml-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}