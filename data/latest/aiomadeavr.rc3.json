{
  "info": {
    "author": "Fran√ßois Wautier",
    "author_email": "francois@wautier.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# aiomadeavr\n\nA library/utility to control Marantz/Denon devices over the telnet port.\n\n[![PyPI version fury.io](https://badge.fury.io/py/aiomadeavr.svg)](https://pypi.python.org/pypi/aiomadeavr)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-licen)\n[![GITHUB-BADGE](https://github.com/frawau/aiomadeavr/workflows/black/badge.svg)](https://github.com/psf/black)\n\n\n# Installation\n\nWe are on PyPi so\n\n    pip3 install aiomadeavr\n\n# Why?\n\nAnother project [aio_marantz_avr](https://github.com/silvester747/aio_marantz_avr) targets the\nsame problem. Unfortunately, it has a few shortcomings for my intended use. For one thing, whilst\nit is using asyncio, it is not really asynchronous as  you need to poll the device to get data. Second,\nthere is no automatic discovery of devices.\n\nSo I decided to write my own.\n\nNote that I lifted some code from [aio_marantz_avr](https://github.com/silvester747/aio_marantz_avr), but\nin the end, it is so far from the original that it made no sense to create this as a PR.\n\n# Running\n\nThis has been tested with a Marantz SR7013 receiver.\n\nAlthough aiomadeavr is meant to be use as a library, the module can be ran, just do\n\n\n    python3 -m aiomadeavr\n\nAfter a moment, if you type \"enter\", you should see a list of the device that have been\ndiscovered. You will be able to power the device on/off, mute/unmute it, set the volume, choose\nthe source and select the surround mode. You will also be able to change the sound channels bias.\n\n# Discovery\n\nThere is actually no way to discover the telnet service of those devices. So aiomadeavr cheats.\nAs far as I can tell all recent Marantz/Denon networked devices support Denon's\n[HEOS](https://www.denon.com/en-gb/heos). That service advertises itself over the [Simple Service Discovery Protocol](https://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol). Discovery looks for those services\nand, hopefoolly, the devices we can telnet to will answer the Denon/Marantz serial protocol.\n\n# Documentation\n\nHere are the exposed API functions and object\n\n## avr_factory\n\nThis is a coroutine. It is how one creates devices instances.\n\nParameters are:\n\n    name: The friendly name of the instances, a string\n    addr: The IP asddress, a string\n\nThese 2 are required, there are also 2 optional parameters:\n\n    port: The port to connect to. An integer. Default is 23\n    timeout: A timeout,currently not used default 3.0\n\nIf anything goes wrong, avr_factory will return None. If things go right, it will return an MDAVR object\n\n## MDAVR\n\nThis is the class used to communicate with the device.\n\nWhen created with avr_factory, the object will connect to the device and start reading the information\ncoming from the device. It will then issue a list of command to get the current state of the device.\n\nAll communications with a device must be performed through a MDAVR instance.\n\nHere are the exposed attributes and method of the MDAVR class.\n\n### String Attr: name\n\nThe friendly name of the device. This was passed to avr_factory at creation time.\n\n### Dictionary Attr: status\n\nCurrent status of the device. Below is a pretty printed example from a marantz SR7013:\n\n    Power:  On\n    Main Zone:      On\n    Zone 2: Off\n    Zone 3: Off\n    Muted:  False\n    Z2 Muted:       False\n    Z3 Muted:       False\n    Volume: 50.0\n    Z2 Volume:      50.0\n    Z3 Volume:      1.0\n    Source: Bluray\n    Z2 Source:      -\n    Z3 Source:      Online Music\n    Surround Mode:  Dolby Digital Surround\n    Channel Bias:\n        Front Left:     0.0\n        Front Right:    0.0\n        Centre: 0.0\n        Subwoofer:      0.0\n        Surround Left:  0.0\n        Surround Right: 0.0\n        Subwoofer2:     0.0\n        Front Top Left: 0.0\n        Front Top Right:        0.0\n        Rear Top Left:  0.0\n        Rear Top Right: 0.0\n    Picture Mode:   ISF Day\n    Eco Mode:       Auto\n    Sampling Rate:  192.0\n\n\n\n### String Attr: power, main_power, z2_power, z3_power\n\nCurrent status status of the device, one of 'On' or 'Standby', for 'power', \"On' or 'Off\" for the others.\n\n### Bool Attr: muted, z2_muted, z3_muted\n\nCurrent \"muted\" status of the device: True or False\n\n### Float Attr: volume, z2_volume, z3_volume\n\nCurrent zone volume of the device. From 0.0 to max_volume by 0,5 increments\n\n### Float Attr: max_volume\n\nMaximum of the volume range.\n\n### String Attr: source, z2_source, z3_source\n\nCurrent source of the device, for instance Bluray, CD, Set Top Box,...\n\n### List Attr: source_list\n\nList of all the possible sources. When setting a source, the name MUST BE in this list.\n\nNot all sources are available to all devices. aiomadeave will try to get the list of inputs available to the device.\n\n### String Attr: sound_mode\n\nCurrent sound processing mode, for instance: Stereo, DTS, Pure Direct,...\n\n### List Attr: sound_mode_list\n\nList of all the possible sound_mode. When setting a sound_mode, the name MUST BE in this list.\n\nNot all sound_mode are available to all devices.\n\n### String Attr: picture_mode\n\nCurrent video processing mode, for instance: Custum, Vivid, ISF Day,...\n\n### List Attr: picture_mode_list\n\nList of all the possible picture_mode. When setting a picture_mode, the name MUST BE in this list.\n\nNot all picture_mode are available to all devices.\n\n### String Attr: eco_mode\n\nCurrent economy mode setting, one of 'On', 'Off' or 'Auto'\n\n### List Attr: eco_mode_list\n\nList of all the possible economy mode settings. When setting the economy mode, the name MUST BE in this list.\n\nEconomy mode is not available on all devices.\n\n### Dictionary Attr: channels_bias\n\nThe bias for all the currently available channels. The key is the channel name, and the\nvalue is the bias as a float. The bias is between -12 dB and +12 dB\n\n### List Attr: channels_bias_list\n\nList of all the possible channels for which a bias can be set. When setting a channel bias the name MUST BE in this list.\n\nNote that this list is dynamic has it depends on the sound mode. Values are like: Front Right, Surrond Left,...\n\n### Method: refresh\n\nNo parameter.\n\nAsk the device to query its current status. Returns None.\n\n### Method: turn_on, main_tunr_on, z2_turn_on, z3_turn_on\n\nNo parameter.\n\nTurn on the device/zone. Returns None. 'turn_on' will affect all zones\n\n### Method: turn_off, main_power_off, z2_power_off, z3_poweer_off\n\nNo parameter.\n\nTurn off the device/zone. Returns None.\n\nNote that the associated value is \"Standby\" for'power' and \"Off\" for zones.\n\n### Method: mute_volume, z2_mute_volume, z3_mute_volume\n\nOne parameter:\n\n    mute: boolean\n\nReturns None.\n\n### Method: set_volume, z2_set_volume, z3_set_volume\n\nOne parameter:\n\n    level: float, valuer between 0.0 and 98.0 in 0.5 increments for main zone and 1.0 increment for other zones.\n\nSet the volume level.\n\nReturns None.\n\n\n### Method: volume_up, z2_volume_up, z3_volume_up\n\nNo parameter.\n\nRaise the volume level by 0.5 for main zone, 1.0 for others\n\nReturns None.\n\n### Method: volume_down, z2_volume_down, z3_volume_down\n\nNo parameter.\n\nLower the volume level by 0.5 for main zone, 1.0 for others\n\nReturns None.\\.\n\n### Method: set_channel_bias\n\nTwo parameter:\n\n    chan: The channel name. Must be in channels_bias_list\n    level: float, valuer between -12.0 and 12.0 in 0.5 increments\n\nSet the bias level for the specified channel.\n\nReturns None.\n\n### Method: channel_bias_up\n\nOne parameter:\n\n    chan: The channel name. Must be in channels_bias_list\n\nRaises the bias level for the specified channel by 0.5\n\nReturns None.\n\n### Method: channel_bias_down\n\nOne parameter:\n\n    chan: The channel name. Must be in channels_bias_list\n\nLower the bias level for the specified channel by 0.5\n\nReturns None.\n\n### Method: channel_bias_reset\n\nNo parameter.\n\nReset all the channels' bias to 0.0\n\nReturns None.\n\n### Method: select_source, z2_select_source, z3_select_source\n\nOne parameter:\n\n    source: The source name. Must be in source_list\n\nMake the source the current active one for the Main Zone\n\nReturns None.\n\n### Method: select_sound_mode\n\nOne parameter:\n\n    mode: The mode name. Must be in sound_mode_list\n\nSet the sound mode for the active zone. The name of the sound mode\nin the status may not be the same as the one set. For instance, setting 'Auto' may lead to a\n'Stereo' mode.\n\nReturns None.\n\n### Method: select_picture_mode\n\nOne parameter:\n\n    mode: The mode name. Must be in picture_mode_list\n\nSet the picture mode for the active zone.\n\nReturns None.\n\n### Method: select_eco_mode\n\nOne parameter:\n\n    mode: The mode name. Must be in eco_mode_list\n\nSet the eco mode for the device.\n\nReturns None.\n\n### Method: notifyme\n\nOne parameter:\n\n    func: A callable with 2 parameters:\n\n        lbl: The name of the property, a key in status\n        value: The new value\n\nThis function register a callable to be called when one\nof the status value changes. For 'Channel Bias' it is called\neverytime the channel bias info is received.\n\n## Coroutine start_discovery\n\nOne parameter:\n\n    addr: The multicast address to use for discovery, by default this is the multicast address for SSDP discovery.\n    callb: A callable. It is called when and HEOS service is discoverd. The callablew must accept one parameter, a dictionary with the following keys:\n\n        ip: ip address of the device\n        name: friendly name\n        model: The device model\n        serial: the device serial number\n\n\n# Caveat\n\n~~Trying to set the current value will often result in AvrTimeoutError exception.~~\n\nThe device will simply not respond to unknown commands and will secretly despise you for it. This makes it difficullt to use timeout on sending to detect disconnection.\n\n\n\nThe channel bias list may get out of sync when setting the sound mode to 'Auto'. It looks like there is a delay before that information is sent.\n\n# Afterthoughts\n\nThe module uses asyncio Streams. I think using protocols may have been a wiser choice.\n\n~~Currently, most of the coroutine of the MDAVR object generate a future and wait for it. Not sure it is a good idea. May be removed in the future. Oh, wait!~~\n\nAll that silly use of future has now been cleaned up.\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/frawau/aiomadeavr",
    "keywords": "Marantz,Denon,Control,Network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiomadeavr",
    "package_url": "https://pypi.org/project/aiomadeavr/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiomadeavr/",
    "project_urls": {
      "Homepage": "http://github.com/frawau/aiomadeavr"
    },
    "release_url": "https://pypi.org/project/aiomadeavr/0.6/",
    "requires_dist": [
      "aiohttp"
    ],
    "requires_python": "",
    "summary": "Library/utility to control Marantz/Denon devices over telnet.",
    "version": "0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7732324,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5b94b1df29f585c6c73b6596ed586f954c2315f797f103a0323ab684ce405f7",
          "md5": "2c1b2dfed09fb73b3c6c928bde67f00e",
          "sha256": "6c39c4f2f0fb4aa80dd9d74be66ff5b707b21652fb0735f357014dfa597dc266"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c1b2dfed09fb73b3c6c928bde67f00e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18951,
        "upload_time": "2020-07-16T12:23:36",
        "upload_time_iso_8601": "2020-07-16T12:23:36.022784Z",
        "url": "https://files.pythonhosted.org/packages/b5/b9/4b1df29f585c6c73b6596ed586f954c2315f797f103a0323ab684ce405f7/aiomadeavr-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e9ac1209b54d08f1732855cabf12fb913b1e9ed413aa0388db2612cc088dafd",
          "md5": "bbdae2e0af1d3893b4eacce1860dabf3",
          "sha256": "cc3dd780c1a05e44104604368f5b55b41bcfe99c9c3078532efea4e67f2776cb"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbdae2e0af1d3893b4eacce1860dabf3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17992,
        "upload_time": "2020-07-16T12:23:38",
        "upload_time_iso_8601": "2020-07-16T12:23:38.679367Z",
        "url": "https://files.pythonhosted.org/packages/0e/9a/c1209b54d08f1732855cabf12fb913b1e9ed413aa0388db2612cc088dafd/aiomadeavr-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b27c9c61dce04f540f3dc63daa253e54e13e237c37a92c5b8fcb41ef22271212",
          "md5": "6af56b4b71cc8d6fdf69437a2fb9c7b7",
          "sha256": "4d22dbb0e6be517d206df68c0eef9b47fdcabc7639e554680ac7ee5544ba925c"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6af56b4b71cc8d6fdf69437a2fb9c7b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19469,
        "upload_time": "2020-07-18T09:01:30",
        "upload_time_iso_8601": "2020-07-18T09:01:30.131434Z",
        "url": "https://files.pythonhosted.org/packages/b2/7c/9c61dce04f540f3dc63daa253e54e13e237c37a92c5b8fcb41ef22271212/aiomadeavr-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38c9780979e0b9652ec8a4102644874b8c35ac31af20b2dd2dab53dc88865af7",
          "md5": "c0199b0f0c07ee54dab616611491c9fa",
          "sha256": "ae7a249c398929fc9b965a34cda44b0dc8a5e8eb550e42e811bee2e15cd02dfd"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c0199b0f0c07ee54dab616611491c9fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18871,
        "upload_time": "2020-07-18T09:01:31",
        "upload_time_iso_8601": "2020-07-18T09:01:31.703937Z",
        "url": "https://files.pythonhosted.org/packages/38/c9/780979e0b9652ec8a4102644874b8c35ac31af20b2dd2dab53dc88865af7/aiomadeavr-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b61aeeb01a32e0270f6991d243d485f491eab40fbc13c6b29290750be4838cc5",
          "md5": "3f98f8bdc54250be85c390a87ae8d4b9",
          "sha256": "4a3afa73dcc8ff0823448ac53a4ca267a01b411e4865a208aee0c0f0b8f240ed"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f98f8bdc54250be85c390a87ae8d4b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20851,
        "upload_time": "2020-07-19T07:20:51",
        "upload_time_iso_8601": "2020-07-19T07:20:51.878514Z",
        "url": "https://files.pythonhosted.org/packages/b6/1a/eeb01a32e0270f6991d243d485f491eab40fbc13c6b29290750be4838cc5/aiomadeavr-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69591ea5b1c724f9b6120b987c9a5171f6aea0d3a677164d30e8f71c3f4f73c5",
          "md5": "eaee42ed633dc2b51a96ab17296f2292",
          "sha256": "9b0022b6a577528c6ed61b837e43f730f860c46728e3e66ecff4fb04f9733481"
        },
        "downloads": -1,
        "filename": "aiomadeavr-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "eaee42ed633dc2b51a96ab17296f2292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20785,
        "upload_time": "2020-07-19T07:20:53",
        "upload_time_iso_8601": "2020-07-19T07:20:53.533027Z",
        "url": "https://files.pythonhosted.org/packages/69/59/1ea5b1c724f9b6120b987c9a5171f6aea0d3a677164d30e8f71c3f4f73c5/aiomadeavr-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b61aeeb01a32e0270f6991d243d485f491eab40fbc13c6b29290750be4838cc5",
        "md5": "3f98f8bdc54250be85c390a87ae8d4b9",
        "sha256": "4a3afa73dcc8ff0823448ac53a4ca267a01b411e4865a208aee0c0f0b8f240ed"
      },
      "downloads": -1,
      "filename": "aiomadeavr-0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3f98f8bdc54250be85c390a87ae8d4b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20851,
      "upload_time": "2020-07-19T07:20:51",
      "upload_time_iso_8601": "2020-07-19T07:20:51.878514Z",
      "url": "https://files.pythonhosted.org/packages/b6/1a/eeb01a32e0270f6991d243d485f491eab40fbc13c6b29290750be4838cc5/aiomadeavr-0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "69591ea5b1c724f9b6120b987c9a5171f6aea0d3a677164d30e8f71c3f4f73c5",
        "md5": "eaee42ed633dc2b51a96ab17296f2292",
        "sha256": "9b0022b6a577528c6ed61b837e43f730f860c46728e3e66ecff4fb04f9733481"
      },
      "downloads": -1,
      "filename": "aiomadeavr-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "eaee42ed633dc2b51a96ab17296f2292",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20785,
      "upload_time": "2020-07-19T07:20:53",
      "upload_time_iso_8601": "2020-07-19T07:20:53.533027Z",
      "url": "https://files.pythonhosted.org/packages/69/59/1ea5b1c724f9b6120b987c9a5171f6aea0d3a677164d30e8f71c3f4f73c5/aiomadeavr-0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}