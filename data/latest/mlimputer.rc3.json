{
  "info": {
    "author": "Lu√≠s Santos",
    "author_email": "luisf_ssantos@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Customer Service",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "<br>\r\n<p align=\"center\">\r\n  <h2 align=\"center\"> MLimputer - Null Imputation Framework for Supervised Machine Learning\r\n  <br>\r\n  \r\n## Framework Contextualization <a name = \"ta\"></a>\r\n\r\nThe `MLimputer` project constitutes an complete and integrated pipeline to automate the handling of missing values in datasets through regression prediction and aims at reducing bias and increase the precision of imputation results when compared to more classic imputation methods.\r\nThis package provides multiple algorithm options to impute your data (shown bellow), in which every observed data column with existing missing values is fitted with a robust preprocessing approach and subsequently predicted.\r\n\r\nThe architecture design includes three main sections, these being: missing data analysis, data preprocessing and predictive model imputation which are organized in a customizable pipeline structure.\r\n\r\nThis project aims at providing the following application capabilities:\r\n\r\n* General applicability on tabular datasets: The developed imputation procedures are applicable on any data table associated with any Supervised ML scopes, based on missing data columns to be imputed.\r\n    \r\n* Robustness and improvement of predictive results: The application of the MLimputer preprocessing aims at improve the predictive performance through customization and optimization of existing missing values imputation in the dataset input columns. \r\n   \r\n#### Main Development Tools <a name = \"pre1\"></a>\r\n\r\nMajor frameworks used to built this project: \r\n\r\n* [Pandas](https://pandas.pydata.org/)\r\n* [Sklearn](https://scikit-learn.org/stable/)\r\n* [CatBoost](https://catboost.ai/)\r\n    \r\n## Where to get it <a name = \"ta\"></a>\r\n    \r\nBinary installer for the latest released version is available at the Python Package Index [(PyPI)](https://pypi.org/project/mlimputer/).   \r\n\r\nThe source code is currently hosted on GitHub at: https://github.com/TsLu1s/MLimputer\r\n\r\n## Installation  \r\n\r\nTo install this package from Pypi repository run the following command:\r\n\r\n```\r\npip install mlimputer\r\n```\r\n\r\n# Usage Examples\r\n    \r\nThe first needed step after importing the package is to load a dataset (split it) and define your choosen imputation model in`fit_imput` function.\r\nThe imputation model options for handling the missing data in your dataset are the following:\r\n* `RandomForest`\r\n* `ExtraTrees`\r\n* `GBR`\r\n* `KNN`\r\n* `XGBoost`\r\n* `Lightgbm`\r\n* `Catboost`\r\n\r\nAfter fitting your imputation model, you can load the `imputer` variable into `fit_configs` parameter in the `transform_imput` function. From there you can impute the future datasets (validate, test ...) with the same data properties. Note, as it shows in the example bellow, you can also customize your model imputer parameters by changing it's configurations and then, implementing them in the `imputer_configs` function parameter.\r\n\r\nThrough the `cross_validation` function you can also compare the predictive performance evalution of multiple imputations, allowing you to validate which imputation model fits better your future predictions.\r\n\r\nImportante Notes:\r\n\r\n* The actual version of this package does not incorporate the imputing of categorical values, just the automatic handling of numeric missing values is implemented.\r\n\r\n```py\r\n\r\nimport mlimputer as mli\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom sklearn.model_selection import train_test_split\r\nimport warnings\r\nwarnings.filterwarnings(\"ignore\", category=Warning) #-> For a clean console\r\n\r\ndata = pd.read_csv('csv_directory_path') # Dataframe Loading Example\r\n\r\ntrain, test= train_test_split(data, train_size=0.8)\r\ntrain,test=train.reset_index(drop=True), test.reset_index(drop=True) # <- Required\r\n\r\n# All model imputation options ->  \"RandomForest\",\"ExtraTrees\",\"GBR\",\"KNN\",\"XGBoost\",\"Lightgbm\",\"Catboost\"\r\n\r\n# Model Imputer Customization\r\nhparameters=mli.imputer_parameters()\r\n\r\n# Customizing parameters settings\r\nhparameters[\"RandomForest\"][\"n_estimators\"]=40\r\nhparameters[\"KNN\"][\"n_neighbors\"]=5\r\nprint(hparameters)\r\n    \r\n# Imputation Example 1 : RandomForest\r\n\r\nimputer_rf=mli.fit_imput(Dataset=train,imput_model=\"RandomForest\",imputer_configs=hparameters)\r\ntrain_rf=mli.transform_imput(Dataset=train,fit_configs=imputer_rf)\r\ntest_rf=mli.transform_imput(Dataset=test,fit_configs=imputer_rf)\r\n\r\n# Imputation Example 2 : KNN\r\n\r\nimputer_knn=mli.fit_imput(Dataset=train,imput_model=\"KNN\",imputer_configs=hparameters)\r\ntrain_knn=mli.transform_imput(Dataset=train,fit_configs=imputer_knn)\r\ntest_knn=mli.transform_imput(Dataset=test,fit_configs=imputer_knn)\r\n    \r\n#(...)\r\n    \r\n## Performance Evaluation Example - Imputation CrossValidation\r\n\r\nfrom sklearn.linear_model import LinearRegression\r\nfrom sklearn.ensemble import RandomForestRegressor\r\nfrom catboost import CatBoostRegressor\r\n        \r\nleaderboard_knn_imp=mli.cross_validation(Dataset=train_knn,\r\n                                         target=\"Target_Name_Col\", \r\n                                         test_size=0.2,\r\n                                         n_splits=3,\r\n                                         models=[LinearRegression(), RandomForestRegressor(), CatBoostRegressor()])\r\n\r\n## Export Imputation Metadata\r\n\r\n# KNN Imputation Metadata\r\nimport pickle \r\noutput = open(\"imputer_knn.pkl\", 'wb')\r\npickle.dump(imputer_knn, output)\r\n\r\n```  \r\n    \r\n## License\r\n\r\nDistributed under the MIT License. See [LICENSE](https://github.com/TsLu1s/TSForecasting/blob/main/LICENSE) for more information.\r\n\r\n## Contact \r\n \r\nLuis Santos - [LinkedIn](https://www.linkedin.com/in/lu%C3%ADsfssantos/)\r\n    \r\nFeel free to contact me and share your feedback.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TsLu1s/MLimputer",
    "keywords": "data science,machine learning,data preprecessing,null imputation,predictive null imputation,multiple null imputation,automated machine learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlimputer",
    "package_url": "https://pypi.org/project/mlimputer/",
    "platform": null,
    "project_url": "https://pypi.org/project/mlimputer/",
    "project_urls": {
      "Homepage": "https://github.com/TsLu1s/MLimputer"
    },
    "release_url": "https://pypi.org/project/mlimputer/1.0.0/",
    "requires_dist": [
      "scikit-learn (>=1.0.2)",
      "atlantic (>=1.0.12)",
      "catboost (>=1.1.1)",
      "xgboost (>=1.7.3)",
      "lightgbm (>=3.3.5)"
    ],
    "requires_python": "",
    "summary": "MLimputer - Null Imputation Framework for Supervised Machine Learning",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17261656,
  "releases": {
    "0.0.98": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d21b8b7a75178a31e560feceb0ea181b39319eef3a84f6da4c8411420321aad3",
          "md5": "a2980f1574ac8804c7b30c6a92f88f21",
          "sha256": "e7d7aaec8ccc9aba8ed96953766664b8942608686ce5a8df8538e560695db68f"
        },
        "downloads": -1,
        "filename": "mlimputer-0.0.98-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2980f1574ac8804c7b30c6a92f88f21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7898,
        "upload_time": "2023-02-08T15:41:06",
        "upload_time_iso_8601": "2023-02-08T15:41:06.964847Z",
        "url": "https://files.pythonhosted.org/packages/d2/1b/8b7a75178a31e560feceb0ea181b39319eef3a84f6da4c8411420321aad3/mlimputer-0.0.98-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e93753755d77dfef20eeee305ccef90e423c133d96c09ffdbf158146c7b08f64",
          "md5": "1e7598c392c90ad0e07bcb72ed94a0f4",
          "sha256": "87c5d5392525160d71b45ecfc4e3cf2c48da51fb15aa8834c2fd947a282dda01"
        },
        "downloads": -1,
        "filename": "mlimputer-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e7598c392c90ad0e07bcb72ed94a0f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9204,
        "upload_time": "2023-02-20T23:50:10",
        "upload_time_iso_8601": "2023-02-20T23:50:10.416608Z",
        "url": "https://files.pythonhosted.org/packages/e9/37/53755d77dfef20eeee305ccef90e423c133d96c09ffdbf158146c7b08f64/mlimputer-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c66d9b14652d69b438a5a6ba9c0a91d0f8613dac0e7b487cdd0e499c94e9d602",
          "md5": "81036c62d5bae04eb271df4b6b4bd881",
          "sha256": "3941e754949811909565e6455e1021d4947cc4f9902680f47d3dea8dc9d1484a"
        },
        "downloads": -1,
        "filename": "mlimputer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81036c62d5bae04eb271df4b6b4bd881",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9269,
        "upload_time": "2023-03-12T16:18:59",
        "upload_time_iso_8601": "2023-03-12T16:18:59.026645Z",
        "url": "https://files.pythonhosted.org/packages/c6/6d/9b14652d69b438a5a6ba9c0a91d0f8613dac0e7b487cdd0e499c94e9d602/mlimputer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c66d9b14652d69b438a5a6ba9c0a91d0f8613dac0e7b487cdd0e499c94e9d602",
        "md5": "81036c62d5bae04eb271df4b6b4bd881",
        "sha256": "3941e754949811909565e6455e1021d4947cc4f9902680f47d3dea8dc9d1484a"
      },
      "downloads": -1,
      "filename": "mlimputer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81036c62d5bae04eb271df4b6b4bd881",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9269,
      "upload_time": "2023-03-12T16:18:59",
      "upload_time_iso_8601": "2023-03-12T16:18:59.026645Z",
      "url": "https://files.pythonhosted.org/packages/c6/6d/9b14652d69b438a5a6ba9c0a91d0f8613dac0e7b487cdd0e499c94e9d602/mlimputer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}