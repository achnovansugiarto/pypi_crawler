{
  "info": {
    "author": "Anton Klenitskiy",
    "author_email": "ant-klen@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Clustering with maximum diameter\n\nCollection of clustering algorithms with maximum distance between points inside clusters.\n\nWhen we have interpretable metric like cosine distance it could be nice to have clusters with maximum distance between points. Then we can find good threshold for maximum distance and be confident that points inside clusters are really similar. Also we dont' need to specify number of clusters with such approach.\n\nUnfortunately most of popular clustering algorithms don't have such behavior.\n\nPossible applications:\n- Embeddings of text data with cosine distance.\n- Geo data with haversine distance.\n\n## Algorithms\n\n### MaxDiameterClustering\n\nA simple greedy algorithm, in which we add points one by one. If there is a cluster with all points close enough to new points, then we add new point to this cluster. If there is no such cluster, this point starts new cluster.\n\n### Quality Threshold Clustering\n\n[Explanation](https://sites.google.com/site/dataclusteringalgorithms/quality-threshold-clustering-algorithm-1).\n\nInspired by this [repository](https://github.com/melvrl13/python-quality-threshold).\n### Leader Clustering\n\n[Explanation on stackoverflow](https://stackoverflow.com/questions/36928654/leader-clustering-algorithm-explanation)\n\n[R package](https://cran.r-project.org/web/packages/leaderCluster/index.html)\n\n### Approximate Leader Clustering\n\nUse approximate nearest neighbors search (currently hnswlib) to speed up Leader Clustering.\n\n\n## Installation\n\nInstall from PyPI\n```sh\npip install diameter-clustering\n```\n\nInstall from source\n```sh\npip install git+git://github.com/antklen/diameter-clustering.git\n# or\ngit clone git@github.com:antklen/diameter-clustering.git\ncd diameter-clustering\npip install .\n```\n\n## Usage\n\n### MaxDiameterClustering\n\nBasic usage of MaxDiameterClustering:\n```python\nfrom sklearn.datasets import make_blobs\nfrom diameter_clustering import MaxDiameterClustering\n\nX, y = make_blobs(n_samples=100, n_features=50)\n\nmodel = MaxDiameterClustering(max_distance=0.3, metric='cosine')\nlabels = model.fit_predict(X)\n```\n\nInstead of using feature matrix `X` we can pass precomputed distance matrix:\n```python\nfrom diameter_clustering.dist_matrix import compute_sparse_dist_matrix\n\ndist_matrix = compute_sparse_dist_matrix(X, metric='cosine')\n\nmodel = MaxDiameterClustering(max_distance=0.3, precomputed_dist=True)\nlabels = model.fit_predict(dist_matrix)\n```\n\nBy default computation of distance matrix in sparse format is used (`sparse_dist=True`), because calculation of distance matrix between all points in dense format is expensive. But when dataset is not so big (roughly less than 20k-30k points) `sparse_dist=False` mode can be used. It could be faster for small datasets or useful when you already have precomputed distance matrix in dense format.\n```python\nmodel = MaxDiameterClustering(max_distance=0.3, metric='cosine', sparse_dist=False)\nlabels = model.fit_predict(X)\n\n\nfrom diameter_clustering.dist_matrix import compute_dist_matrix\n\ndist_matrix = compute_dist_matrix(X, max_distance=0.3, metric='cosine')\n\nmodel = MaxDiameterClustering(max_distance=0.3, sparse_dist=False, precomputed_dist=True)\nlabels = model.fit_predict(dist_matrix)\n```\n\nWhen we want to compute cosine distance in dense format and our vectors are normalized, it is better to use\n`inner_product` as metric because it is much faster:\n```python\nX_normalized = X/(np.linalg.norm(X, axis=-1, keepdims=True) + 1e-16)\n\nmodel = MaxDiameterClustering(max_distance=0.3, metric='inner_product', sparse_dist=False)\nlabels = model.fit_predict(X_normalized)\n```\n\nWith `deterministic=True` we can get reproducible results:\n```python\nmodel = MaxDiameterClustering(max_distance=0.3, metric='cosine', deterministic=True)\nlabels = model.fit_predict(X)\n```\n\n### Quality Threshold Clustering\n\n```python\nfrom diameter_clustering import QTClustering\n\nmodel = QTClustering(max_radius=0.15, metric='cosine', min_cluster_size=5)\nlabels = model.fit_predict(X)\n```\n\n`precomputed_dist`, `sparse_dist`, and `inner_product`\ncan be used as in MaxDiameterClustering. This algorithm is deterministic by design.\n\n### Leader Clustering\n\n```python\nfrom diameter_clustering import LeaderClustering\n\nmodel = LeaderClustering(max_radius=0.15, metric='cosine')\nlabels = model.fit_predict(X)\n```\n\n`precomputed_dist`, `sparse_dist`, `deterministic` and `inner_product`\ncan be used as in MaxDiameterClustering.\n\n### Approximate Leader Clustering\n\n```python\nfrom diameter_clustering.approx import HNSWIndex\nfrom diameter_clustering.approx import ApproxLeaderClustering\n\n# fit model\nhnsw_index = HNSWIndex(max_elements=len(X), space='cosine', dim=50,\n                       ef=100, ef_construction=200, M=16)\nmodel = ApproxLeaderClustering(hnsw_index, max_radius=0.15, deterministic=True)\nlabels = model.fit_predict(X)\n\n# save index for later usage\nhnsw_index.save('hnsw_index.bin')\n\n# predict clusters for new data later\nhnsw_index = HNSWIndex(max_elements=len(X_new), path='hnsw_index.bin',\n                        space='cosine', dim=50, ef=100)\nmodel = ApproxLeaderClustering(hnsw_index, max_radius=0.15, deterministic=True)\nnew_labels = model.predict(X_new)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antklen/diameter-clustering",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diameter-clustering",
    "package_url": "https://pypi.org/project/diameter-clustering/",
    "platform": null,
    "project_url": "https://pypi.org/project/diameter-clustering/",
    "project_urls": {
      "Homepage": "https://github.com/antklen/diameter-clustering"
    },
    "release_url": "https://pypi.org/project/diameter-clustering/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Clustering with maximum distance between points inside clusters",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14025031,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a591b1728fc37b687b86e3e4c6a4562dfd56bbaea9f1fad81251f0dadd8fbe48",
          "md5": "e8149ba23ea84c664d4c3f5d250a60c8",
          "sha256": "a6dfcd4b2d8379fae195a949e9350a31464a3a3d3646dea62714d1ba590254e9"
        },
        "downloads": -1,
        "filename": "diameter_clustering-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8149ba23ea84c664d4c3f5d250a60c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11374,
        "upload_time": "2021-05-29T17:00:21",
        "upload_time_iso_8601": "2021-05-29T17:00:21.062920Z",
        "url": "https://files.pythonhosted.org/packages/a5/91/b1728fc37b687b86e3e4c6a4562dfd56bbaea9f1fad81251f0dadd8fbe48/diameter_clustering-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e73e2922e56dd865da4b8a4877a3a31da550f30a17dd853ee5fb457838698b2",
          "md5": "4255705674c53dc44710e7a7d7b9e2ed",
          "sha256": "16e0981596072acde695706b82585d2d973a9987174bbee300e375cf6d75ec2b"
        },
        "downloads": -1,
        "filename": "diameter-clustering-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4255705674c53dc44710e7a7d7b9e2ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8320,
        "upload_time": "2021-05-29T17:00:22",
        "upload_time_iso_8601": "2021-05-29T17:00:22.686216Z",
        "url": "https://files.pythonhosted.org/packages/9e/73/e2922e56dd865da4b8a4877a3a31da550f30a17dd853ee5fb457838698b2/diameter-clustering-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a408808177cd863e1fcb22180e0a8e0549add52f7b0be7b46170ae4b3c89f34d",
          "md5": "c476ae7ce8c77d0ae2a9721a989a29de",
          "sha256": "dd6fc4b56cc8b55ed1a1baeaf170ed0a59bee4cca6a1968aceac61547664634f"
        },
        "downloads": -1,
        "filename": "diameter-clustering-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c476ae7ce8c77d0ae2a9721a989a29de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11991,
        "upload_time": "2022-06-03T15:04:52",
        "upload_time_iso_8601": "2022-06-03T15:04:52.401514Z",
        "url": "https://files.pythonhosted.org/packages/a4/08/808177cd863e1fcb22180e0a8e0549add52f7b0be7b46170ae4b3c89f34d/diameter-clustering-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a408808177cd863e1fcb22180e0a8e0549add52f7b0be7b46170ae4b3c89f34d",
        "md5": "c476ae7ce8c77d0ae2a9721a989a29de",
        "sha256": "dd6fc4b56cc8b55ed1a1baeaf170ed0a59bee4cca6a1968aceac61547664634f"
      },
      "downloads": -1,
      "filename": "diameter-clustering-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c476ae7ce8c77d0ae2a9721a989a29de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11991,
      "upload_time": "2022-06-03T15:04:52",
      "upload_time_iso_8601": "2022-06-03T15:04:52.401514Z",
      "url": "https://files.pythonhosted.org/packages/a4/08/808177cd863e1fcb22180e0a8e0549add52f7b0be7b46170ae4b3c89f34d/diameter-clustering-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}