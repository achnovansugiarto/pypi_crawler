{
  "info": {
    "author": "Matīss Rikters",
    "author_email": "m4t1ss@lielakeda.lv",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NMT Attention Alignment Visualizations\nAn attention alignment visualization tool for command line and web. \n\nA part of the web version was borrowed from [Nematus utils](https://github.com/rsennrich/nematus/tree/master/utils)\n\nThe [Machine Translation Marathon 2019](http://www.statmt.org/mtm19/programme.html) tutorial can be found [here](https://github.com/M4t1ss/SoftAlignments/tree/master/assets/MT-Marathon-2019)\n\n[![Build Status](https://travis-ci.org/M4t1ss/SoftAlignments.svg?branch=master)](https://travis-ci.org/M4t1ss/SoftAlignments)\n\nUsage\n---------\n\n  - Train a neural MT system (using [Marian](https://github.com/marian-nmt/marian-dev/), [Sockeye](https://github.com/awslabs/sockeye/) or [Neural Monkey](https://github.com/ufal/neuralmonkey/))\n  - Translate text and get word or subword level alignments\n  - Visualize the alignments\n    - in the command line standard output\n    - in a web browser (PHP required)\n\nRequirements\n---------\n\n* Python 3.6 or newer\n\n    * NLTK for BLEU calculation(requires Python versions 3.5, 3.6, 3.7, or 3.8)\n\n\t* Numpy\n\n\t```bash\n\tpip install numpy nltk\n\t```\n\n* PHP 5.4 or newer (for web visualization)\n\nHow to get alignment files from NMT systems\n---------\n\n* [Nematus](https://github.com/EdinburghNLP/nematus) (This worked for the Theano version. Not sure about the current Tensorflow version...)\n\t* Run [**nematus/translate.py**](https://github.com/EdinburghNLP/nematus#using-a-trained-model) with the `--output_alignment` or `-a` parameter\n\n* [Neural Monkey](https://github.com/ufal/neuralmonkey)\n\t* In the training.ini file add\n\n\t```Ini\n\t[alignment_saver]\n\tclass=runners.word_alignment_runner.WordAlignmentRunner\n\toutput_series=\"ali\"\n\tencoder=<encoder>\n\tdecoder=<decoder>\n\t```\n\n\tand add __alignment_saver__ to the __runners__ in **main**\n\n\t```Ini\n\trunners=[<runner_greedy>, <alignment_saver>]\n\t```\n\n\t* In the translation.ini file in **eval_data** add\n\t```Ini\n\ts_ali_out=\"out.alignment\"\n\t```\n\n* [Marian](https://github.com/marian-nmt/marian)\n\t* Run **marian-decoder** with the parameter `--alignment soft`\n\t* If you use the transformer model architecture, you will need to train it with guided alignments. See the [MT Marathon 2019 Tutorial](https://github.com/M4t1ss/SoftAlignments/tree/master/assets/MT-Marathon-2019) for details about this.\n\n* [OpenNMT](https://github.com/OpenNMT/OpenNMT)\n\tRun translate.lua to translate with the `-save_attention` parameter to save attentions to a file\n\n* [Sockeye](https://github.com/awslabs/sockeye)\n\t* Run sockeye.translate to translate with the `--output-type` parameter set to `translation_with_alignment_matrix` to save attentions to a file.\n\t* If you use the transformer model architecture, you will need to implement (copy in the correct places) code from [this pull requst](https://github.com/awslabs/sockeye/pull/504). Otherwise, Sockeye will return attention values of 0 for all tokens.\n\n\n* **Other**\n\tThe easiest format to use (and convert to) is the one used by Nematus.\n\n\tFor each sentence the first row should be `<sentence id> ||| <target words> ||| <score> ||| <source words> ||| <number of source words> <number of target words>`\n\n\tAfter that follow `<number of target words> + 1 (for <EOS> token)` rows with `<number of source words> + 1 (for <EOS> token)` columns with attention weights separated by spaces. \n\n\tAfter each sentence there should be an empty line.\n\n\tNote that the values of `<sentence id>`, ` <score>`, `<number of source words>` and `<number of target words>` are actually ignored when creating visualizations, so they may as well all be 0.\n\n\tAn example:\n\t```sh\n\t0 ||| Obama welcomes Netanyahu ||| 0 ||| Obama empfängt Net@@ any@@ ah@@ u ||| 7 4\n\t0.723834 0.0471278 0.126415 0.000413103 0.000774298 0.000715227 0.10072 \n\t0.00572539 0.743366 0.0342341 0.000315413 0.00550132 0.00150629 0.209351 \n\t0.0122618 0.0073559 0.909192 0.000606444 0.00614908 0.00256837 0.0618667 \n\t0.00110054 0.0214063 0.0759918 0.000446028 0.104856 0.0435644 0.752634 \n\n\t```\n\nPublications\n---------\n\nIf you use this tool, please cite the following paper:\n\nMatīss Rikters, Mark Fishel, Ondřej Bojar (2017). \"[Visualizing Neural Machine Translation Attention and Confidence.](https://ufal.mff.cuni.cz/pbml/109/art-rikters-fishel-bojar.pdf)\" In The Prague Bulletin of Mathematical Linguistics volume 109 (2017).\n\n```bibtex\n@inproceedings{Rikters-EtAl2017PBML,\n\tauthor = {Rikters, Matīss and Fishel, Mark and Bojar, Ond\\v{r}ej},\n\tjournal={The Prague Bulletin of Mathematical Linguistics},\n\tvolume={109},\n\tpages = {1--12},\n\ttitle = {{Visualizing Neural Machine Translation Attention and Confidence}},\n\taddress={Lisbon, Portugal},\n\tyear = {2017}\n}\n```\n\nExamples\n---------\n\n  - in the command line as shaded blocks. Example with Neural Monkey alignments (separate source and target subword unit files are required)\n\n\t```sh\n\tpython process_alignments.py \\\n\t-i test_data/neuralmonkey/alignments.npy  \\\n\t-o color \\\n\t-s test_data/neuralmonkey/src.en.bpe \\\n\t-t test_data/neuralmonkey/out.lv.bpe \\\n\t-f NeuralMonkey\n\t```\n\n  - the same with Nematus alignments (source and target subword units are in the same file)\n\n\t```sh\n\tpython process_alignments.py \\\n\t-i test_data/nematus/alignments.txt \\\n\t-o color \\\n\t-f Nematus\n\t```\n\n  - in a text file as Unicode block elements\n\n\t```sh\n\tpython process_alignments.py \\\n\t-i test_data/neuralmonkey/alignments.npy  \\\n\t-o block \\\n\t-s test_data/neuralmonkey/src.en.bpe \\\n\t-t test_data/neuralmonkey/out.lv.bpe \\\n\t-f NeuralMonkey\n\t```\n\n\t  or\n\n\t\tpython process_alignments.py \\\n\t\t-i test_data/neuralmonkey/alignments.npy  \\\n\t\t-o block2 \\\n\t\t-s test_data/neuralmonkey/src.en.bpe \\\n\t\t-t test_data/neuralmonkey/out.lv.bpe \\\n\t\t-f NeuralMonkey\n\n  - in the browser as links between words (demo [here](http://lielakeda.lv/other/NLP/alignments/?s=19))\n\n\t```sh\n\tpython process_alignments.py \\\n\t-i test_data/marian/marian.out.lv \\\n\t-s test_data/marian/marian.src.en \\\n\t-o web \\\n\t-f Marian\n\t```\n\nParameters for process_alignments.py\n---------\n\n| Option | Description                   \t\t\t\t\t| Required \t\t \t\t\t\t\t\t\t\t\t\t| Possible Values \t\t\t \t\t\t\t\t\t\t\t\t| Default Value  |\n|:------:|:-------------------------------------------------|:------------------------------------------------------|:--------------------------------------------------------------|:--------------:|\n| -f     | NMT framework where the alignments are from \t\t| No     \t \t\t \t\t\t\t\t\t\t\t\t| 'NeuralMonkey', 'Nematus', 'Marian', 'OpenNMT', 'Sockeye' \t| 'NeuralMonkey' |\n| -i     | input alignment file\t\t\t \t\t\t\t\t| Only if no configuration file is provided\t\t\t\t| Path to file\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -s     | source sentence subword units \t\t\t\t\t| For Neural Monkey or Marian \t\t\t\t\t\t\t| Path to file\t\t\t  \t \t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -t     | target sentence subword units \t\t\t\t\t| For Neural Monkey \t\t\t\t\t\t\t\t\t| Path to file\t\t\t  \t \t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -o     | output type\t\t\t\t\t \t\t\t\t\t| No      \t\t \t \t\t\t\t\t\t\t\t\t| 'web', 'color', 'block', 'block2', 'compare'\t\t\t\t\t| 'web'\t\t\t |\n| -r     | reference file for calculating BLEU score\t\t| No      \t\t \t \t\t\t\t\t\t\t\t\t| Path to file\t\t\t  \t \t\t\t\t\t\t\t\t\t|\t\t\t\t |\n|\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -n     | Number of a specific sentence \t\t\t\t\t| No     \t \t\t \t\t\t\t\t\t\t\t\t| Integer \t\t\t\t\t\t\t\t\t\t\t\t\t\t| -1 (show all)\t |\n| -c     | configuration file \t\t\t\t\t\t\t\t| No     \t \t\t \t\t\t\t\t\t\t\t\t| Path to file\t\t\t\t\t\t\t\t\t\t\t\t\t| \t\t\t\t |\n| -d     | Combine subword units (De-BPE) \t\t\t\t\t| No     \t \t\t \t\t\t\t\t\t\t\t\t| Integer \t\t\t\t\t\t\t\t\t\t\t\t\t\t| \t\t\t\t |\n|\t\t |\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -v     | NMT framework where the 2nd alignments are from \t| For output type'compare'     \t\t\t\t\t\t\t| 'NeuralMonkey', 'Nematus', 'Marian', 'OpenNMT', 'Sockeye' \t| 'NeuralMonkey' |\n| -w     | input file for the 2nd alignments\t\t \t\t| For output type'compare'     \t\t\t\t\t\t\t| Path to file\t\t\t\t\t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -x     | 2nd source sentence subword unit file  \t\t\t| For output type'compare' and Neural Monkey or Marian \t| Path to file\t\t\t  \t \t\t\t\t\t\t\t\t\t|\t\t\t\t |\n| -y     | 2nd target sentence subword unit file \t\t\t| For output type'compare' and Neural Monkey \t\t\t| Path to file\t\t\t  \t \t\t\t\t\t\t\t\t\t|\t\t\t\t |\n\nConfiguration file\n---------\n\nThe parameters can be provided via configuration .ini file to have a smaller mess in the command line when calling the script. \n\n| Block \t\t| Option\t \t| Description                   \t\t\t\t   |\n|:--------------|:--------------|:-------------------------------------------------|\n| AlignmentsOne | From \t\t \t| NMT framework where the alignments are from \t   |\n| AlignmentsOne | InputFile  \t| input alignment file\t\t\t \t\t\t\t   |\n| AlignmentsOne | SourceFile \t| source sentence subword units \t\t\t\t   |\n| AlignmentsOne | TargetFile \t| target sentence subword units \t\t\t\t   |\n| AlignmentsOne | ReferenceFile | reference file for calculating BLEU score\t\t   |\n|\t\t\t\t|\t\t\t \t|\t\t\t\t\t\t\t\t\t\t\t\t   |\n| Options \t\t| OutputType \t| output type\t\t\t\t\t \t\t\t\t   |\n| Options \t\t| Number\t \t| Number of a specific sentence \t\t\t\t   |\n|\t\t\t\t|\t\t\t \t|\t\t\t\t\t\t\t\t\t\t\t\t   |\n| AlignmentsTwo\t| From \t\t \t| NMT framework where the 2nd alignments are from  |\n| AlignmentsTwo\t| InputFile  \t| input file for the 2nd alignments\t\t\t\t   |\n| AlignmentsTwo\t| SourceFile \t| 2nd source sentence subword unit file  \t\t   |\n| AlignmentsTwo\t| TargetFile \t| 2nd target sentence subword unit file \t\t   |\n\nFor example, create a config.ini file:\n```Ini\n[AlignmentsOne]\nInputFile: ./test_data/neuralmonkey/alignments.npy\nSourceFile: ./test_data/neuralmonkey/src.en.bpe\nTargetFile: ./test_data/neuralmonkey/out.lv.bpe\nFrom: NeuralMonkey\n\n[Options]\nOutputType: color\n```\nAnd run:\n```sh\npython process_alignments.py -c config.ini\n```\n\nScreenshots\n---------\nColor, Block, Block2  \n![N|Solid](https://github.com/M4t1ss/sAliViz/blob/master/assets/Screenshots/colorAlignments.PNG?raw=true) ![N|Solid](https://github.com/M4t1ss/sAliViz/blob/master/assets/Screenshots/blockAlignments.PNG?raw=true) ![N|Solid](https://github.com/M4t1ss/sAliViz/blob/master/assets/Screenshots/block2.png?raw=true) \n\nWeb\n![N|Solid](https://github.com/M4t1ss/sAliViz/blob/master/assets/Screenshots/webAlignments.PNG?raw=true)\n\nCompare\n![N|Solid](https://github.com/M4t1ss/sAliViz/blob/master/assets/Screenshots/webCompare.png?raw=true)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/M4t1ss/SoftAlignments",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "softalignments",
    "package_url": "https://pypi.org/project/softalignments/",
    "platform": "",
    "project_url": "https://pypi.org/project/softalignments/",
    "project_urls": {
      "Homepage": "https://github.com/M4t1ss/SoftAlignments"
    },
    "release_url": "https://pypi.org/project/softalignments/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Neural macine translation soft alignment visualisations for web and command line",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7671753,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50937c9374a8bb0deb1fa054b2c0e30f586346e984636df9f242b2f93be53710",
          "md5": "4b6bfcbdc67bf5e60bdfc1652f669680",
          "sha256": "d81747bff59a29275a6f2cb1b34cc46577a03774e1087341ae40352c00b7ad4b"
        },
        "downloads": -1,
        "filename": "softalignments-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b6bfcbdc67bf5e60bdfc1652f669680",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12868,
        "upload_time": "2020-07-10T02:55:07",
        "upload_time_iso_8601": "2020-07-10T02:55:07.785261Z",
        "url": "https://files.pythonhosted.org/packages/50/93/7c9374a8bb0deb1fa054b2c0e30f586346e984636df9f242b2f93be53710/softalignments-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c6545c4d899da83cb973e6c30c2e4ac06e66fc8d0fedad5eea045a2815b3279",
          "md5": "1c1a581474ba064803565200f4464490",
          "sha256": "9c862354a2043517a3e291a049320141f1e85dd66df3c182a30c1b669c62403b"
        },
        "downloads": -1,
        "filename": "softalignments-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1c1a581474ba064803565200f4464490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14933,
        "upload_time": "2020-07-10T02:55:10",
        "upload_time_iso_8601": "2020-07-10T02:55:10.481035Z",
        "url": "https://files.pythonhosted.org/packages/4c/65/45c4d899da83cb973e6c30c2e4ac06e66fc8d0fedad5eea045a2815b3279/softalignments-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50937c9374a8bb0deb1fa054b2c0e30f586346e984636df9f242b2f93be53710",
        "md5": "4b6bfcbdc67bf5e60bdfc1652f669680",
        "sha256": "d81747bff59a29275a6f2cb1b34cc46577a03774e1087341ae40352c00b7ad4b"
      },
      "downloads": -1,
      "filename": "softalignments-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b6bfcbdc67bf5e60bdfc1652f669680",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12868,
      "upload_time": "2020-07-10T02:55:07",
      "upload_time_iso_8601": "2020-07-10T02:55:07.785261Z",
      "url": "https://files.pythonhosted.org/packages/50/93/7c9374a8bb0deb1fa054b2c0e30f586346e984636df9f242b2f93be53710/softalignments-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c6545c4d899da83cb973e6c30c2e4ac06e66fc8d0fedad5eea045a2815b3279",
        "md5": "1c1a581474ba064803565200f4464490",
        "sha256": "9c862354a2043517a3e291a049320141f1e85dd66df3c182a30c1b669c62403b"
      },
      "downloads": -1,
      "filename": "softalignments-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "1c1a581474ba064803565200f4464490",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14933,
      "upload_time": "2020-07-10T02:55:10",
      "upload_time_iso_8601": "2020-07-10T02:55:10.481035Z",
      "url": "https://files.pythonhosted.org/packages/4c/65/45c4d899da83cb973e6c30c2e4ac06e66fc8d0fedad5eea045a2815b3279/softalignments-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}