{
  "info": {
    "author": "Simone Fiorentini",
    "author_email": "simone.fiorentini@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Snowflake Extract Load Transorm framework  \nWhy in Snowflet L comes before E? I really like the sound of Snowflet\n\n## env variable required\n```\n\"PROJECT_ROOT\": \"${ProjectFolder}\"             # REQUIRED\n\"ACCOUNT\":  \"gsXXXXX.west-europe.azure\"        # REQUIRED\n\"USER\": \"user\"                                 # REQUIRED\n\"PASSWORD\": secret_password                    # REQUIRED\n\"DATABASE\": \"default_database\"                 # OPTIONAL\n\"SCHEMA\": \"default_schema\"                     # OPTIONAL\n\"WAREHOUSE\": \"\"                                # OPTIONAL\n\"ROLE\": \"\"                                     # OPTIONAL\n\"TIMEZONE\": \"europe/london\"                    # OPTIONAL\n```\n\n\n\n\n## *class* snowflet.db.DBExecutor() <br />\nSnowflake API wrapper <br />\n\n### Methods\n**validate_connection()** return the snowflake version <br />\n\n**query_exec()** execute the sql query  <br />\n\nParameters:\n- **file_query**: path to the query file, either this or query shall be passed, can contain {parameters} \n- **query**: sql query to be executed, can contain {parameters}  \n- **return_df**: Defaulted to False, passed True in case of SELECT query, it returns a pandas dataframe \n- **kwargs**: parameters in the sql are replaced with the corresponding kwarg value\n```\n    \"\"\" example \"\"\"\n    newdb = db()\n    newdb.query_exec(\n            query=\"create database {db}\",\n            db=test     #  {db} is replaced by test in the sql query        \n        ) # database test is created\n```\n### Usage\n```\ndb = db() # initiate the snowflake connection using env variables\ndb.close() # close and dismiss the connection\n```\n## *class* snowflet.db.PipelineExecutor() <br />\nAd hoc tool for executing pipeline in snowflake, the tool read a yaml file which describe the pipeline steps, and provides method to either run the pipeline or test it (unit and/or uat) <br />\n\n### Notes\nAll the query file shall be compliant with the follow (including CTE for mock data):\n- database and schema shall be explicit i.e. \"database\".\"schema\".\"table\" or database.schema.table \n\n\n\n### Methods\n**run()** execute the pipeline <br />\n\n**clone_prod() TBD** clone the prod db metadata <br />\n\n**clone_clean() TBD** removed the cloned databases <br />\n\n### Usage\n- for running the Pipeline\n\n```\nfrom snoflet import PipelineExecutor\npipeline = PipelineExecutor(\n    \"path_to_pipeline_folder/pipeline_name.yaml\")     # initiate PipelineExecutor for Run\npipeline.run()                                        # run the pipeline\n```\n\n- for ci-cd (testing)\n\n```\nfrom snoflet import PipelineExecutor\npipeline = PipelineExecutor(\n    \"path_to_pipeline_folder/pipeline_name.yaml\", \n    test=True\n    )                                                 # initiate PipelineExecutor for testing\npipeline.run_unit_tests()                             # run all unit tests in parallel\ntry:\n    pipeline.clone_prod()                    # copy tables' structure from prod\n    pipeline.run()                                    # run the pipeline on empty tables (dry_run)\nfinally:\n    pipeline.clone_clean()                          # cleans the dev/test environment\n```\n\n### YAML definition\n\n**Structure:**\n\n```\ndesc: \ndatabases: \nbatches:    \nrelease:\n```\n\n#### databases\n\nlist of database referenced in the pipeline\n```\n['database1', 'database2', 'database3']\n```\n#### release \nlist of files that are executed before the execution of the pipeline\n\nexample\n```\nrelease:\n  date: \"2020-05-07\"\n  desc: \"change table schema and delete a table from prod\"\n  files:\n    - path_to_file1\n```\n\n#### batches\n\n- contains the list of batches to execute\n- the batches are execute in serial\n- task within the batch runs in parallel\n\n```\nbatches:\n-   desc: creates table structure\n    tasks:\n-   desc: creates staging tables\n    tasks:\n-   desc: creates aggregated tables\n    tasks:\n```\n\n**tasks:**\n```\n-   desc: creates aggregated tables\n    tasks:\n    -   desc: use Database\n        object: query_executor\n        args:\n        -   file_query: path_to_file.sql\n    -   desc: create table1\n        object: create_table\n        args:\n        -   file: path_to_sql_query_select_file.sql\n            table_schema: path_to_schema_definition_file.sql\n            database_id: dbtest\n            schema_id: sctest\n            table_id: tbtest\n            mock_file: path_to_mock_file.sql\n            output_table_name: staging.attr_order_items_pk \n```\n#### type of objects\n\n- query_executor:\n\nit is a wrapper of snowflet.db.exec_query, same parameters\n\n- create_table:\n\nit is a wrapper of snowflet.db.create_table, same parameters\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bluefloyd00/snowflet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "snowflet",
    "package_url": "https://pypi.org/project/snowflet/",
    "platform": "",
    "project_url": "https://pypi.org/project/snowflet/",
    "project_urls": {
      "Homepage": "https://github.com/bluefloyd00/snowflet"
    },
    "release_url": "https://pypi.org/project/snowflet/0.0.2/",
    "requires_dist": [
      "wheel",
      "PyYAML (==5.3.1)",
      "snowflake-sqlalchemy",
      "numpy",
      "pandas",
      "nltk",
      "versioneer"
    ],
    "requires_python": ">=3.6",
    "summary": "Data engineering & Data science Pipeline Framework",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7541061,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "814c812b51ad271ad9976190ba26ce8efa73a39a420bf148fa07692c81692616",
          "md5": "2709eb061d983a9a96a38f5e51a9f394",
          "sha256": "e2f281f808d813237bfbdbd1c3fcf82c807003c620b46c0a5be20da521e9f2aa"
        },
        "downloads": -1,
        "filename": "snowflet-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2709eb061d983a9a96a38f5e51a9f394",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11308,
        "upload_time": "2020-06-19T09:42:17",
        "upload_time_iso_8601": "2020-06-19T09:42:17.673791Z",
        "url": "https://files.pythonhosted.org/packages/81/4c/812b51ad271ad9976190ba26ce8efa73a39a420bf148fa07692c81692616/snowflet-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d054cd7f429cbac935d2ac9d312d5dd8be318b2bdb0d00fba657fcb84245617",
          "md5": "8f7774626ded86ec20d6b18fae9e7b4d",
          "sha256": "2475af43372293a8ce86e54795dec3fc24254e9b69dcbf8db86082357787a461"
        },
        "downloads": -1,
        "filename": "snowflet-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8f7774626ded86ec20d6b18fae9e7b4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11432,
        "upload_time": "2020-06-19T09:42:19",
        "upload_time_iso_8601": "2020-06-19T09:42:19.543307Z",
        "url": "https://files.pythonhosted.org/packages/0d/05/4cd7f429cbac935d2ac9d312d5dd8be318b2bdb0d00fba657fcb84245617/snowflet-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c80bc2136928cee76443930a124fe84e26f74527f883b6caf00139642505ac5",
          "md5": "b53b0476cbd996ca5d8ae6e113089e68",
          "sha256": "6c455d5fb9312b98b47a63555bada01f91749342a0800d36036f514c02511d80"
        },
        "downloads": -1,
        "filename": "snowflet-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b53b0476cbd996ca5d8ae6e113089e68",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12047,
        "upload_time": "2020-06-23T09:12:08",
        "upload_time_iso_8601": "2020-06-23T09:12:08.216180Z",
        "url": "https://files.pythonhosted.org/packages/0c/80/bc2136928cee76443930a124fe84e26f74527f883b6caf00139642505ac5/snowflet-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64da8143c13f56cea531efda24569b852aba426887a4402e3eeddbca40d3d512",
          "md5": "1459d029087cc9b906ba308f7314fd3e",
          "sha256": "10d6cd43f601a0049206fc1fe5094cd0fdc5fe55ec4680a31c1a088029c88178"
        },
        "downloads": -1,
        "filename": "snowflet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1459d029087cc9b906ba308f7314fd3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12099,
        "upload_time": "2020-06-23T09:12:09",
        "upload_time_iso_8601": "2020-06-23T09:12:09.343923Z",
        "url": "https://files.pythonhosted.org/packages/64/da/8143c13f56cea531efda24569b852aba426887a4402e3eeddbca40d3d512/snowflet-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c80bc2136928cee76443930a124fe84e26f74527f883b6caf00139642505ac5",
        "md5": "b53b0476cbd996ca5d8ae6e113089e68",
        "sha256": "6c455d5fb9312b98b47a63555bada01f91749342a0800d36036f514c02511d80"
      },
      "downloads": -1,
      "filename": "snowflet-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b53b0476cbd996ca5d8ae6e113089e68",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12047,
      "upload_time": "2020-06-23T09:12:08",
      "upload_time_iso_8601": "2020-06-23T09:12:08.216180Z",
      "url": "https://files.pythonhosted.org/packages/0c/80/bc2136928cee76443930a124fe84e26f74527f883b6caf00139642505ac5/snowflet-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64da8143c13f56cea531efda24569b852aba426887a4402e3eeddbca40d3d512",
        "md5": "1459d029087cc9b906ba308f7314fd3e",
        "sha256": "10d6cd43f601a0049206fc1fe5094cd0fdc5fe55ec4680a31c1a088029c88178"
      },
      "downloads": -1,
      "filename": "snowflet-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1459d029087cc9b906ba308f7314fd3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12099,
      "upload_time": "2020-06-23T09:12:09",
      "upload_time_iso_8601": "2020-06-23T09:12:09.343923Z",
      "url": "https://files.pythonhosted.org/packages/64/da/8143c13f56cea531efda24569b852aba426887a4402e3eeddbca40d3d512/snowflet-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}