{
  "info": {
    "author": "",
    "author_email": "Ingo Wilms <ingo.wilms@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<!-- omit in toc -->\n# Table of Contents\n- [student2courses](#student2courses)\n  - [Abstract](#abstract)\n  - [Use case](#use-case)\n- [Usage](#usage)\n  - [Installation](#installation)\n  - [Import](#import)\n  - [Solve the Problem](#solve-the-problem)\n  - [Verify Solution](#verify-solution)\n- [Examples](#examples)\n  - [Excel input data](#excel-input-data)\n  - [csv input data](#csv-input-data)\n- [Math behind the Solver](#math-behind-the-solver)\n  \n# student2courses\n\n## Abstract \nSolves the problem of assigning $n$ students to $m$ courses taking into account the course preferences of each student. Each student chooses between 1 and $l$ courses. The complexity for time and space is both $O(lmn)$. Returns a dictionary (hashmap) with keys as student ids and values as course ids.\n\t\t\n## Use case\nOften universities offer courses with restricted capacities. The students are not randomly assigned, but assigned to a course of their preference whenever possible. For that, they are asked to vote for all courses of their preference. Now, is there a solution that respects all (or at least as many as possible) course preferences? The students are usually assigned manually by the administration. This tool was developed to avoid manual work and to provide an optimal solution. \n\n# Usage\n\n## Installation\n    pip install students2courses\n\n## Import\n    from students2courses import solver\n\t\n## Solve the Problem\nThe method `solver.students_to_courses` takes two arguments:\n* a dictionary of course capacities where the keys are the unique ids of the courses and the values are their capacities (integers).\n* a dictionary with the votes of all students where the keys are unique student ids and the values are their votes (list of unique course ids).\n\nExample:\n\n    from collections import Counter\n    from students2courses import solver\n\n    course_capacities = {'1': 1, '2': 2, '3': 3}\n    student_votes = {'A': ['1', '2'], 'B': ['1', '3'], 'C': ['2', '3'], 'D': ['1'], 'E': ['1', '2', '3'], 'F': ['3']}\n    courses = solver.students_to_courses(course_capacities, student_votes)\n\n    counter = Counter(courses.values())\n    if counter[None] == 0:\n        print('There is a solution.')\n    else:\n        print(f'There is no solution: {counter[None]} students cannot be assigned to their chosen courses.')\n\n    for student, course in courses.items():\n        if course is None:\n            print(f'student {student} has yet to be assigned.')\n        else:\n            print(f'student {student} -> course {course}')\n\nAfter execution our terminal tells us:\n\n    There is a solution.\n    student A -> course 2\n    student B -> course 3\n    student C -> course 2\n    student D -> course 1\n    student E -> course 3\n    student F -> course 3\n\n## Verify Solution\nThe solver-module has a method `verify_solution` that verifies a valid solution, but also verifies in case \na solution does not exist that the number of students not assigned is minimal. The test-module uses it, so look there for examples.\n\n# Examples\n\n## Excel input data\nIn this example, we use *pandas* to transform Excel-data into the desired lists. An output file named *output.csv* is generated.\n\n    import csv\n    import os\n    from  pathlib import Path\n    import re\n\n    import pandas\n\n    from students2courses import solver\n\n    DIR = Path(__file__).resolve().parent\n\n\n    def main():\n        df = pandas.read_excel(os.path.join(DIR, 'course_capacities.xlsx'))\n        df = df.fillna('')\n        courses = df.to_dict('records')\n        C = {clean_name(course['ID']): course['Capacity'] for course in courses}\n\n        df = pandas.read_excel(os.path.join(DIR, 'students_votes.xlsx'), usecols=['ID', 'Vote_1', 'Vote_2', 'Vote_3 (optional)'])\n        df = df.fillna('')\n        students = df.to_dict('records')\n        S = { student['ID'] : [student['Vote_1'], student['Vote_2'], student['Vote_3 (optional)']] for student in students }\n        S = { str(i): [clean_name(j) for j in vote if j] for i, vote in S.items() } \n\n        S2C = solver.students_to_courses(C, S)\n        print(S2C)\n\n        with open(os.path.join(DIR, 'output.csv'), 'w', encoding='utf-8') as f:\n            fieldnames = ['Student_ID', 'Course_ID']\n            writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL, lineterminator='\\n')        \n            writer.writeheader()\n            writer.writerows([ {'Student_ID': i, 'Course_ID': j} for i, j in S2C.items()])\n\n    def clean_name(name):\n        name = name.replace('\\xa0', ' ')   \n        name = name.strip() \n        m = re.search('^[\\s]*(.+[^\\s])[\\s]*$', name)\n        return m.group(0)   \n\n\n    if __name__ == '__main__': main()\n\n## csv input data\nLet's say we have 2 csv files:\n*course_capacities.csv* contains:\n\n    ID,Capacity\n    a,4\n    b,6\n    c,3\n    d,5\n    e,6\n\nand *student_votes.csv* contains:\n\n    ID,Courses\n    A,a\n    B,e\n    C,\"a,b,d\"\n    D,\"a,b,e\"\n    E,\"a,e\"\n    F,\"b,c\"\n    G,\"c,d,e\"\n    H,e\n    I,b\n    J,\"d,e\"\n    K,e\n    L,\"d,e\"\n    M,a\n    N,e\n    O,\"b,d\"\n    P,d\n    Q,\"b,c,e\"\n    R,\"c,d,e\"\n    S,d\n    T,\"a,c\"\n\nWe can solve this problem with the following code:\n\n    from pathlib import Path\n    import csv\n    import os\n\n    from students2courses import solver\n\n    DIR = Path(__file__).resolve().parent\n\n\n    with open(os.path.join(DIR, 'course_capacities.csv'), 'r', encoding='UTF-8') as f:\n        reader = csv.DictReader(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL, lineterminator='\\n')        \n        C = {row['ID']: int(row['Capacity']) for row in reader}\n\n    with open(os.path.join(DIR, 'student_votes.csv'), 'r', encoding='UTF-8') as f:\n        reader = csv.DictReader(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL, lineterminator='\\n')        \n        S = {row['ID']: row['Courses'].split(',') for row in reader}\n    \n    S2C = solver.students_to_courses(C, S)\n\n    with open(os.path.join(DIR, 'output.csv'), 'w', encoding='utf-8') as f:\n        fieldnames = ['Student_ID', 'Course_ID']\n        writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL, lineterminator='\\n')        \n        writer.writeheader()\n        writer.writerows([ {'Student_ID': i, 'Course_ID': j} for i, j in S2C.items()])\n\nNow, the generated *output.csv* looks like this:\n\n    Student_ID,Course_ID\n    A,a\n    B,e\n    C,b\n    D,a\n    E,a\n    F,b\n    G,c\n    H,e\n    I,b\n    J,d\n    K,e\n    L,d\n    M,a\n    N,e\n    O,b\n    P,d\n    Q,b\n    R,c\n    S,d\n    T,c\n\nAnd we can verify that this solution is valid:\n\n    >>> from collections import Counter\n    >>> print(Counter(S2C.values()))\n    Counter({'b': 5, 'a': 4, 'e': 4, 'd': 4, 'c': 3})\n\n# Math behind the Solver\nGiven are $n$ students who have all chosen at least one course, but at most $l$ courses from a set of $m$ courses. Every course $j\\in\\{1,\\dots,m\\}$ has a capacity $c_j$. Can we allocate the students to the courses in such a way that each student gets a course of their choice?\n\nLet $C = \\{1,\\dots, m\\}$ be the set of all courses and $S = \\{1,\\dots, n\\}$ be the set of all students.\nLet $V=\\{D : D\\subseteq C, 1\\leq |D|\\leq l\\}$ be the set of all possible course choices.\nFurther let $v: S\\rightarrow V, i\\mapsto v(i)=v_i$ be the course choice of student $i$ and\n   $c: C\\rightarrow \\mathbb{N}, j\\mapsto c(j)=c_j$ the capacity function where $c_j$ is the capacity of course $j$.\nWe call a tuple $(C, S, v, c)$ **course problem** and a function $f:S\\rightarrow C\\cup \\{\\emptyset\\}, i\\mapsto f(i)$ we call **mapping**.\n\nWe are now looking - if available - for a mapping $f$ of students to courses that does not overcrowd the courses and respects the course choices of the students. If that is true, we call $f$ **valid**. Written formally, $f$ is valid if the properties\n1. $|\\{i \\in S : f(i)=j\\}| \\leq c_j$ for all courses $j\\in C$ and\n2. $f(i) \\in v_i\\cup\\{\\emptyset\\}$ for all students $i\\in S$\n\nare fulfilled. We allow the empty set as a function value of $f$ so that we can also consider valid mappings if a course problem is not solvable in the sense of our problem.\n\nWhat are the prerequisites for our course problem to be solvable at all? An obvious requirement is that there must be at least as many course places as students. This can be generalized, because for each subset of courses, all students whose course choice is in this subset must fit into these courses. Therefore we call a course problem $(C, S, v, c)$ **suitable** if for all $D\\subseteq C\\$ holds\n$$\n|\\{ i\\in S : v_i\\subseteq D\\}| \\leq \\sum\\limits_{j\\in D} c_j.\n$$\n\nLater on we would like to be able to assess the quality of various mappings. One mapping is better than another if it manages to assign more students to their chosen courses.\nTo quantify this, we define the **kernel** of $f$ by $\\text{ker}(f)= \\{i \\in S:f(i)=\\emptyset\\}$. So the kernel of $f$ holds all students who did not get a course under $f$.\nLet $f$ and $g$ be two valid mappings of a course problem. Then both **are equally good** if $|\\text{ker}(f)|=|\\text{ker}(g)|$. We say $f$ is **better** than $g$ if $|\\text{ker}(f)|<|\\text{ker}(g)|$.\n\nNow one last definition: We call a course problem $(C,S,v,c)$ **solvable** if a valid mapping $f$ exists with $|\\text{ker}(f)|=0$ . That makes sense, because then we would have taken care of all the students to their satisfaction.\n\nWe would like to work towards a nice theorem and so that the proof of the theorem is as elegant as possible, we outsource the technical part to the following lemma:\n\n**Lemma**\n\nLet $(C, S, v, c)$ be a suitable course problem and $f$ a valid mapping of the course problem under which courses from $D\\subseteq C$ with $0<|D|<|C|$ are completely occupied .\nIf there is a student $i$ with $v_i\\subseteq D$ in $\\text{ker}(f)$, then there is an equally good mapping $g$ of the course problem with $\\text{ker}(f) = \\text{ker}(g)$, where there is a vacancy in one of the courses from $D$.\n\n*proof*\n\nSince there is a suitable course problem where Student $i\\in S$ is not yet assigned to a course, there must still be a free place in a course $j\\in C$. Let $k=|D|$ and we set $D_k=D$.\n\nIf there is a student in $D_k$ who chose $j$, we can reassign that to $j$ and we're done. Otherwise there must be a student $i_k$ from $D_k$ who chose a course from $C\\setminus (D_k\\cup\\{j\\})$ since the course problem is suitable but the courses from $D_k$ are full, although $i$ has only selected courses from $D_k$. Let $j_k$ be this course.\nNow there are two cases:\n1. There is still a free place in $j_k$. Then we can transfer this very student from $D_k$ to $j_k$ and we're done.\n2. There is no free space in $j_k$. Then we consider $D_{k+1}=D_k\\cup\\{j_k\\}$ and repeat the procedure for $k+1$.\n\n At the latest at $D_{m-1}$ the second case can no longer occur since there was a free slot. We now swap a few more students to create the free space in the original $D$. Suppose we have to go up to $k_{\\max}$ .\n With\n$$\n   g: S \\rightarrow C, i \\mapsto g(i)=\n  \\begin{cases}\n    j_k & \\text{for } i\\in \\{i_k,i_{k+1},\\dots,i_{k_{\\max}-1}\\},\\\\\n    j & \\text{for } i=i_{k_{\\max}},\\\\\n    f(i) & \\text{otherwise}\n  \\end{cases}\n$$\nwe have reached our goal, because there is now a place in the course $f(i_k)$.  $\\square$\n\nIn summary, the lemma says: If we have a set of full courses given a suitable course problem, and we cannot assign a student because his course choice lies in these full courses, then switching students can free up a place in one of his chosen courses .\nUltimately, a suitable course problem can free up a place for each student in one of their chosen courses without forcing another student out of all chosen courses. And with that we have already reached our goal.\n\n**Theorem**\n\nA course problem is solvable if and only if it is suitable.\n\n*proof*\n\nIf the course problem can be solved, it must also be suitable - we already knew that. For the inverse, we assume that a suitable course problem is unsolvable. Then there is a valid mapping $f$ where $|\\text{ker}(f)|>0$ is minimal among all valid mappings. There is a student $i$ in the kernel of $f$. The courses from $v_i$ are full. Since the course problem is suitable, there must be a course with a vacancy.\nWith our lemma there is then an equally good function $g$ with an identical kernel, where there is a free space in $v_i$. But then we could modify $g$ and now assign student $i$ to a course in $v_i$, making $g$ better than $f$, a contradiction. So the course problem must be solvable.  $\\square$\n\nNow even the best theory is useless here if we can't put it into practice. To check whether a course problem is solvable, we can e.g. iterate through all subsets of $C$ and, following the definition, check the prerequisites for whether the course problem is suitable. We need $2^m$ steps for the loop alone. This means exponential complexity. In addition, we then only know whether the course problem can be solved or not, but we do not obtain any solution.\n\nIf we look at the lemma again, it provides a faster and constructive way: we can successively assign the students to courses. If all the chosen courses of a student are occupied, we can either create a free place in one of these courses by swapping students who have already been assigned to other courses, or the course problem is not suitable.\nEvery time a student $i$ is assigned to course $j$ via $f(i) := j$ we keep track of which other courses from $v_i$ we can swap $i$. We can find a solution with time complexity $\\mathcal{O}(lmn)$ or, if there is no solution, at least a mapping with a minimal kernel. We can then allocate the students from the kernal to the remaining free course places as we wish.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2022 Ingo Wilms  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "students2courses",
    "package_url": "https://pypi.org/project/students2courses/",
    "platform": null,
    "project_url": "https://pypi.org/project/students2courses/",
    "project_urls": {
      "Bug Tracker": "https://github.com/oceanwhiskey/students2courses/issues",
      "Homepage": "https://github.com/oceanwhiskey/students2courses"
    },
    "release_url": "https://pypi.org/project/students2courses/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Solves the following problem: Students choose their course preferences from a set of courses. Assign a course to each student so that as many wishes as possible are fulfilled.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15944800,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2a6a1a9b7677cf7a753b37138a420c930ac7dede0372aaa4994ce63b584bb2a",
          "md5": "3b7629fbfa91a7f905f7e5468235e7d4",
          "sha256": "5d87fe401359b1a2381b29f05a337fc61c5735313d2be4d4f46fd7df4fe4ac0c"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b7629fbfa91a7f905f7e5468235e7d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12308,
        "upload_time": "2022-10-03T05:43:39",
        "upload_time_iso_8601": "2022-10-03T05:43:39.513621Z",
        "url": "https://files.pythonhosted.org/packages/b2/a6/a1a9b7677cf7a753b37138a420c930ac7dede0372aaa4994ce63b584bb2a/students2courses-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a73ca2d799a58f0b99d9408285f312488c7787fbaa3f1170add5ceab9851a7e9",
          "md5": "20c0104432006e8781b6e9bf0d637118",
          "sha256": "a89b1c5ffc2a2b88e514927bd14ab9fbba75df4d8bf871882b31ba14e214d236"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20c0104432006e8781b6e9bf0d637118",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10443,
        "upload_time": "2022-10-03T05:43:40",
        "upload_time_iso_8601": "2022-10-03T05:43:40.753070Z",
        "url": "https://files.pythonhosted.org/packages/a7/3c/a2d799a58f0b99d9408285f312488c7787fbaa3f1170add5ceab9851a7e9/students2courses-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671d683b0cdc5001a8cad2285bc600ed21917fff5eaafafad0b136094e833e2c",
          "md5": "94d355063760b0effcad2c0dac7367b9",
          "sha256": "51bb525b356cc72ab3ba86670686860867c4041644069cc1dd4e58fd03586814"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94d355063760b0effcad2c0dac7367b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12306,
        "upload_time": "2022-10-03T06:01:44",
        "upload_time_iso_8601": "2022-10-03T06:01:44.092825Z",
        "url": "https://files.pythonhosted.org/packages/67/1d/683b0cdc5001a8cad2285bc600ed21917fff5eaafafad0b136094e833e2c/students2courses-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "725af9322f87a618b75df10a021af574b11fdabe8c6442d5d65cb72608c285d0",
          "md5": "37cb2332c41883249b9da3d8db3aae2b",
          "sha256": "af0ef4758cb464bdc05f840af86faf5efc61bb045bed3adc5b8f9536ad72ef01"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "37cb2332c41883249b9da3d8db3aae2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10440,
        "upload_time": "2022-10-03T06:01:45",
        "upload_time_iso_8601": "2022-10-03T06:01:45.215079Z",
        "url": "https://files.pythonhosted.org/packages/72/5a/f9322f87a618b75df10a021af574b11fdabe8c6442d5d65cb72608c285d0/students2courses-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "936238babbecfd46a694a0aeb2f1fad9adf6da0b1143b0175f3912e39fe88645",
          "md5": "7a4b6363a07af37853406a20928413c8",
          "sha256": "e3d66ff844e0e3c4c698dc0a6a89e36fa8b324b5084640dd5f595c59d4886fb5"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a4b6363a07af37853406a20928413c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13071,
        "upload_time": "2022-10-03T09:55:25",
        "upload_time_iso_8601": "2022-10-03T09:55:25.184211Z",
        "url": "https://files.pythonhosted.org/packages/93/62/38babbecfd46a694a0aeb2f1fad9adf6da0b1143b0175f3912e39fe88645/students2courses-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "124216a7030548b0839e72a53f146c12d2315c4abbf5148f650a8b54ed192003",
          "md5": "18fa8005897e6003d9eb7c951462c244",
          "sha256": "79c9b0dffc7236cc56054a5ca5e8e9f7be4b7c330609b230acf98817be1b6060"
        },
        "downloads": -1,
        "filename": "students2courses-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "18fa8005897e6003d9eb7c951462c244",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11070,
        "upload_time": "2022-10-03T09:55:26",
        "upload_time_iso_8601": "2022-10-03T09:55:26.187733Z",
        "url": "https://files.pythonhosted.org/packages/12/42/16a7030548b0839e72a53f146c12d2315c4abbf5148f650a8b54ed192003/students2courses-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b10423d2762682ecfce5f38ab4738678370a2a2f6d1c974be4e0c9cf24bfc170",
          "md5": "39c6522b0467eb298491c6be3a878214",
          "sha256": "df1adc32e1d708bb8f3f9fa48244a83f4bdca4bf0edc29be5e92917624db8acd"
        },
        "downloads": -1,
        "filename": "students2courses-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39c6522b0467eb298491c6be3a878214",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13071,
        "upload_time": "2022-11-30T16:32:42",
        "upload_time_iso_8601": "2022-11-30T16:32:42.904222Z",
        "url": "https://files.pythonhosted.org/packages/b1/04/23d2762682ecfce5f38ab4738678370a2a2f6d1c974be4e0c9cf24bfc170/students2courses-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c2eef63c60fb2ae1759d0e754671bfb8a0f0272b5bc22ddc99c41d6d45846c3",
          "md5": "ad91351c2237244d9fa018213f03d629",
          "sha256": "52371c9e12b3814043189532888edbbe291d06871fb4035fd46942e4dee2cdf4"
        },
        "downloads": -1,
        "filename": "students2courses-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad91351c2237244d9fa018213f03d629",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11086,
        "upload_time": "2022-11-30T16:32:44",
        "upload_time_iso_8601": "2022-11-30T16:32:44.204998Z",
        "url": "https://files.pythonhosted.org/packages/4c/2e/ef63c60fb2ae1759d0e754671bfb8a0f0272b5bc22ddc99c41d6d45846c3/students2courses-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b10423d2762682ecfce5f38ab4738678370a2a2f6d1c974be4e0c9cf24bfc170",
        "md5": "39c6522b0467eb298491c6be3a878214",
        "sha256": "df1adc32e1d708bb8f3f9fa48244a83f4bdca4bf0edc29be5e92917624db8acd"
      },
      "downloads": -1,
      "filename": "students2courses-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39c6522b0467eb298491c6be3a878214",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13071,
      "upload_time": "2022-11-30T16:32:42",
      "upload_time_iso_8601": "2022-11-30T16:32:42.904222Z",
      "url": "https://files.pythonhosted.org/packages/b1/04/23d2762682ecfce5f38ab4738678370a2a2f6d1c974be4e0c9cf24bfc170/students2courses-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c2eef63c60fb2ae1759d0e754671bfb8a0f0272b5bc22ddc99c41d6d45846c3",
        "md5": "ad91351c2237244d9fa018213f03d629",
        "sha256": "52371c9e12b3814043189532888edbbe291d06871fb4035fd46942e4dee2cdf4"
      },
      "downloads": -1,
      "filename": "students2courses-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ad91351c2237244d9fa018213f03d629",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11086,
      "upload_time": "2022-11-30T16:32:44",
      "upload_time_iso_8601": "2022-11-30T16:32:44.204998Z",
      "url": "https://files.pythonhosted.org/packages/4c/2e/ef63c60fb2ae1759d0e754671bfb8a0f0272b5bc22ddc99c41d6d45846c3/students2courses-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}