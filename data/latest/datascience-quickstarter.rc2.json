{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Data Science Project Quickstarter\n\nThis is a tool for bootstrapping real-world datascience projects that are easy to understand,\neasy to deploy, easy to customise, and easy to maintain.\n\nThe quickstarter  lets you set up a new project with the following components:\n* ðŸ“š Python library\n* ðŸ“¨ Service\n* âš“ Docker container\n* âœ¨ Streamlit demo(s)\n\nThis repo also contains a few [examples](examples) of datascience projects that we bootstrapped with the quickstarter:\n* A [zero-shot text classifier](examples/aylien-zs-classifier) which runs out-of-the-box, with accompanying research notebooks and a streamlit demo.\n\n\n## Quickstart\n\n### Installation\n```\npip install datascience-quickstarter\n```\n\nAfter installation finishes, the the following new commands will be available:\n* `quickstart-project`\n* `quickstart-demo`\n\n### Creating a new project\n\nTo start a new project, simply run `quickstart-project` and you will be guided through the process.\n\nYou can also provide all required arguments directly, e.g.:\n```\nquickstart-project --path cool-project --libname cool_library\n```\nThis will create a project in `cool-project` , including a Python package/library named `cool_library`.\n\nNext, create and activate a new project-specific environment (we like [miniconda](https://docs.conda.io/en/latest/miniconda.html)):\n```\n# skip the next two lines if you prefer to create python environments in a different way\nconda create -n cool-project python=3.8\nconda activate cool-project\n```\nGo to the new project and install it:\n```\ncd cool-project && make dev\n```\n\n### Running the project's service\nNew projects are already setup with a mock service that receives POST requests.  Back in your project directory, start the service by simply running:\n```\nmake run\n```\n\nThe default service includes two routes as toy examples: `/reverse` which takes a `text` argument and `/count` with no arguments. Once the service is running, you try out sending requests, e.g. using\n```\nmake example-request-count\nmake example-request-reverse\n```\nor by using the [python script](quickstarter/templates/project/example_requests.py) which shows how to send requests and receive responses as a client:\n```\npython examples/example_requests.py\n```\n\n#### Containerize the service with Docker\nDeploying your service will be easy once you have a working Docker image!\nRun this to containerize the service implemented in the project:\n```bash\n# create Docker image\nmake build\n\n# run container locally\ndocker run -p 8000:8000 -e --rm -it <image name>:0.1\n```\n\nYou can interact with the containerized service in the same way as earlier, e.g. by running `python examples/example_requests.py`.\n\n\n### Creating new demos using Streamlit\nWe begin many projects by creating a proof-of-concept in a Streamlit demo.\nDemos live inside a project. Simply run:\n```\nquickstart-streamlit\n```\nthis will create new demo, e.g. called `cool-demo` in the `demos/` subdirectory of your new data science project. Move into the new demo directory and run the demo in the browser:\n```\ncd demos/cool-demo && make run\n```\n\nWithin the demo directory `demos/cool-demo` you can develop the demo which is implemented in the script `demos/cool-demo/demo.py`.\n\n#### Containerize demo with Docker\nYou can also containerize the whole demo using Docker! Within the demo folder, simply run:\n```\nmake build\n```\nThe Docker image will make sharing or deploying the demo easier.\n\n\n### Completing a project\nHere is a checklist to turn the new project into a fully functional tool:\n- [ ] implement your project's core functionality in the Python package\n- [ ] maintain dependencies in `requirements.txt`\n- [ ] implement a demo\n- [ ] implement service\n- [ ] build Docker image & make sure containerized service works afterwards (this often takes a few debugging cycles)\n- [ ] write tests for each new module in the Python package\n\n\n## Data Science Project Structure\n\nLet's have a closer look at how projects created by our quickstarter are built.\nThe top-level structure of our projects usually looks like this:\n```\n<project directory>/\nâ”œâ”€â”€ <python package name>/\nâ”œâ”€â”€ bin/\nâ”œâ”€â”€ Makefile\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ requirements.txt\nâ”œâ”€â”€ demos/\nâ”œâ”€â”€ research/\nâ”œâ”€â”€ resources/\nâ”œâ”€â”€ setup.py\nâ”œâ”€â”€ VERSION\n```\n\nAn overview of each component of this template follows. Let's use the zero-shot classification project in [examples/aylien-zs-classifier](examples/aylien-zs-classifier) as an example.\n\nData science projects are different than other software projects, because they often result in both a body of exploratory research _and_ a codebase that is used in production.\nSome engineering teams prefer to take prototypes from research and data-science teams and re-implement them from scratch, which is totally ok. However, we believe that\nit is good practice for researchers and data science teams to strive to produce code libraries that can be used in production, meaning that code is well-tested, and follows good API design principles.\n\nBelow we explain how we structure our projects to support both exploratory research and production-ready code in the same repo. We have used this simple pattern effectively in\nmany real-world projects, ranging from research papers with accompanying codebases, to production services wrapping ML-models which handle millions of requests per day.\n\n\n#### The [`research/`](examples/aylien-zs-classifier/research) directory\n\nIn this directory, anything goes. The `research/` directory is the home of Jupyter notebooks and other exploratory analysis tools. This directory gives us the freedom to iterate quickly and break things, while still using git to keep track of the code and to facilitate easy sharing and collaboration. Any code that is not ready for production, but that you still want to keep track of, can go into this directory.\nIf multiple members of the team are working on different ideas in parallel, just create multiple subdirectories in `research/` such as\n`research/GAN-graph-based-meta-reinforcement-learning/...` and `research/bayesian-flow-multi-horizon-hypercubes/...`.\n\nWe don't like to use branches for non-production code because ideas tend to get lost in unmerged branches. So we commit research code directly to the `main` branch, but we put it in the `research/` directory.\nWe only create branches for production features (see below).\n\n#### The Python package directory (for example: [`aylien_zs_classifier/`](examples/aylien-sz-classifier/aylien_zs_classifier))\n\nThis is where the main source code of a project lives. We generally structure each project around one Python package. In the early stages of a project, we tend to prototype new features in notebooks or scripts in the `research/` directory. Once we're confident that we have something working and useful, we add it to an existing or new module of the Python package from where it can be imported easily. For each module (`.py` file) in the package, we write unit tests in a file with a consistent naming convention: e.g. `test_classifier.py` for the module `classifier.py`.\nCode that is added to the main Python package should be submitted in a branch, and ideally reviewed by at least one other person. In our projects, multiple review cycles are common, and we somethimes even end up moving an idea\nto the `research/` directory if it's cool, but somehow not well-suited or relevant to the primary usecase of the project.\n\nOnce the project is mature, the code in the main Python package should be ready for production, meaning that it can be integrated into a larger system, shared on PyPI, or shipped in a docker container that exposes a service.\n\nThe main Python package also requires the `requirements.txt`, `setup.py` and `VERSION` files. Make sure to keep the dependencies in`requirements.txt` updated and depending on your deployment scenario, maintain the package version in the `VERSION` file.\n\n#### The [`demos/`](examples/aylien-zs-classifier/demos) directory\nThis is the newest addition to our template. Over the last few years, amazing libraries like [streamlit](https://streamlit.io/) have drastically reduced the effort required to make interactive demos of data science projects. Streamlit in particular is fast-becoming an essential library for anyone building Python-based prototypes. In  the `demos/` directory we put self-contained demos that are expected to have their own `requirements.txt` and `make run` commands. Interactive demos are one of the main ways for data scientists to communicate their work to the rest of an organization.\n\nCheck out our example for zero-shot-classification: [demos/zs-classifier-demo](demos/zs-classifier-demo)\n\n#### The `bin` directory\nThis directory contains executable scripts, usually written in Python or bash. These are usually one-off data processing or shell scripts that we keep separated from the python package modules for better clarity.\n\n#### The `resources/` directory\nWe usually store any large files required in a project such as model binaries or database-like files in `resources`. We usually add a `Makefile` command to obtain these resources locally from an external storage source, e.g. Google Cloud Storage, and do not track them with `git`.\n\n### Testing\n\nCheckout [Testing.md](Testing.md) for instructions to test the datascience project quickstarter, e.g. for making changes.\n\n### About\n\nThe datascience project quickstarter was conceived of and implemented by Demian Gholipour Ghalandari and Chris Hokamp.\nAishwarya Radhakrishnan provided feedback and code review, and created the current version of the model-serving library.\nMany of the ideas in this template are based on John Glover's excellent approach to ml-ops and productionization of research work, in particular the use of Makefiles to expose the main entrypoints to projects.\n\n![Aylien Labs Logo](vis/aylien-labs-logo-small.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datascience-quickstarter",
    "package_url": "https://pypi.org/project/datascience-quickstarter/",
    "platform": null,
    "project_url": "https://pypi.org/project/datascience-quickstarter/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/datascience-quickstarter/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tool for quick-starting new datascience projects, built by AYLIEN Labs.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15097525,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85fe6cb8adaceaa953024b19e0b0b95aad2088dbe7473a4c32b1a775822683b7",
          "md5": "3af0fb388bec37e1a9e27bf11780c1ae",
          "sha256": "00fc3011e613b3936d2fd67bcff81294b33f49656e9ff64064c637e45b13b24e"
        },
        "downloads": -1,
        "filename": "datascience_quickstarter-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3af0fb388bec37e1a9e27bf11780c1ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22514,
        "upload_time": "2022-08-10T15:43:44",
        "upload_time_iso_8601": "2022-08-10T15:43:44.358960Z",
        "url": "https://files.pythonhosted.org/packages/85/fe/6cb8adaceaa953024b19e0b0b95aad2088dbe7473a4c32b1a775822683b7/datascience_quickstarter-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0528092f7bbd508f51bf4b0aa796d4955d8abd1a98434d18e40c38f114932e74",
          "md5": "84c087ed2b79c8b7330e46c93b8b5223",
          "sha256": "1ae583a7016f3a287cfdddc9defe472a01cb2b4ca386e5cadc9ccff797582b4c"
        },
        "downloads": -1,
        "filename": "datascience-quickstarter-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84c087ed2b79c8b7330e46c93b8b5223",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12063,
        "upload_time": "2022-08-10T15:43:46",
        "upload_time_iso_8601": "2022-08-10T15:43:46.287998Z",
        "url": "https://files.pythonhosted.org/packages/05/28/092f7bbd508f51bf4b0aa796d4955d8abd1a98434d18e40c38f114932e74/datascience-quickstarter-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9741b00f52baba860ef6243afa21643284744000d0fc69d54b62b4a40e950cf",
          "md5": "f5c838815a9eb3a69db88cb87679064f",
          "sha256": "e7fcfd164cc6fb33ecf60eeadde7fe27b7812d0b369f541e09113959d67b5369"
        },
        "downloads": -1,
        "filename": "datascience_quickstarter-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5c838815a9eb3a69db88cb87679064f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23552,
        "upload_time": "2022-09-14T23:07:18",
        "upload_time_iso_8601": "2022-09-14T23:07:18.508998Z",
        "url": "https://files.pythonhosted.org/packages/b9/74/1b00f52baba860ef6243afa21643284744000d0fc69d54b62b4a40e950cf/datascience_quickstarter-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5253978d843b112b921b112387570cdfd0653fe576c52346bd5cf5b1f77f042c",
          "md5": "88cd39319ef3536a2fd578c4ab13433f",
          "sha256": "cdda27ea3fc9689856c1f854cb0ebd399c338820c98e1ca103dceaecd25d159d"
        },
        "downloads": -1,
        "filename": "datascience-quickstarter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88cd39319ef3536a2fd578c4ab13433f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12606,
        "upload_time": "2022-09-14T23:07:20",
        "upload_time_iso_8601": "2022-09-14T23:07:20.012611Z",
        "url": "https://files.pythonhosted.org/packages/52/53/978d843b112b921b112387570cdfd0653fe576c52346bd5cf5b1f77f042c/datascience-quickstarter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9741b00f52baba860ef6243afa21643284744000d0fc69d54b62b4a40e950cf",
        "md5": "f5c838815a9eb3a69db88cb87679064f",
        "sha256": "e7fcfd164cc6fb33ecf60eeadde7fe27b7812d0b369f541e09113959d67b5369"
      },
      "downloads": -1,
      "filename": "datascience_quickstarter-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5c838815a9eb3a69db88cb87679064f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 23552,
      "upload_time": "2022-09-14T23:07:18",
      "upload_time_iso_8601": "2022-09-14T23:07:18.508998Z",
      "url": "https://files.pythonhosted.org/packages/b9/74/1b00f52baba860ef6243afa21643284744000d0fc69d54b62b4a40e950cf/datascience_quickstarter-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5253978d843b112b921b112387570cdfd0653fe576c52346bd5cf5b1f77f042c",
        "md5": "88cd39319ef3536a2fd578c4ab13433f",
        "sha256": "cdda27ea3fc9689856c1f854cb0ebd399c338820c98e1ca103dceaecd25d159d"
      },
      "downloads": -1,
      "filename": "datascience-quickstarter-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "88cd39319ef3536a2fd578c4ab13433f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12606,
      "upload_time": "2022-09-14T23:07:20",
      "upload_time_iso_8601": "2022-09-14T23:07:20.012611Z",
      "url": "https://files.pythonhosted.org/packages/52/53/978d843b112b921b112387570cdfd0653fe576c52346bd5cf5b1f77f042c/datascience-quickstarter-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}