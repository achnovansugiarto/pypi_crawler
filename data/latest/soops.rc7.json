{
  "info": {
    "author": "Robert Cimrman",
    "author_email": "cimrman3@ntc.zcu.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "soops\n=====\n\nsoops = scoop output of parametric studies\n\nUtilities to run parametric studies in parallel using dask, and to scoop\nthe output files produced by the studies into a pandas dataframe.\n\n.. contents::\n\nInstallation\n------------\n\nThe latest release::\n\n  pip install soops\n\nThe source code of the development version in git::\n\n  git clone https://github.com/rc/soops.git\n  cd soops\n  pip install .\n\nor the development version via pip::\n\n  pip install git+https://github.com/rc/soops.git\n\nTesting\n-------\n\nInstall pytest::\n\n  pip install pytest\n\nInstall `soops` from sources (in the current directory)::\n\n  pip install .\n\nRun the tests (in any directory)::\n\n  python -c \"import soops; soops.test()\"\n\nRun tests in the source directory without installing soops::\n\n  export PYTHONPATH=.\n  python -c \"import soops; soops.test()\"\n  # or\n  pytest soops/tests\n\nExample\n-------\n\nBefore we begin - TL;DR:\n\n- Run a script in parallel with many combinations of parameters.\n- Scoop all the results in many output directories into a big ``DataFrame``.\n- Work with the ``DataFrame``.\n\nA Script\n''''''''\n\nSuppose we have a script that takes a number of command line arguments. The\nactual arguments are not so important, neither what the script does.\nNevertheless, to have something to work with, let us simulate the `Monty Hall\nproblem <https://en.wikipedia.org/wiki/Monty_Hall_problem>`_ in Python.\n\nFor the first reading of the example below, it is advisable not to delve in\ndetails of the script outputs and code listings and just read the text to get\nan overall idea. After understanding the idea, return to the details, or just\nhave a look at the `complete example script <soops/examples/monty_hall.py>`_.\n\nThis is our script and its arguments::\n\n  $ python soops/examples/monty_hall.py -h\n  usage: monty_hall.py [-h] [--switch] [--host {random,first}] [--num int]\n                       [--repeat int] [--seed int] [--plot-opts dict-like] [-n]\n                       [--silent]\n                       output_dir\n\n  The Monty Hall problem simulator parameterized with soops.\n\n  https://en.wikipedia.org/wiki/Monty_Hall_problem\n\n  <snip>\n\n  positional arguments:\n    output_dir            output directory\n\n  options:\n    -h, --help            show this help message and exit\n    --switch              if given, the contestant always switches the door,\n                          otherwise never switches\n    --host {random,first}\n                          the host strategy for opening doors\n    --num int             the number of rounds in a single simulation [default:\n                          100]\n    --repeat int          the number of simulations [default: 5]\n    --seed int            if given, the random seed is fixed to the given value\n    --plot-opts dict-like\n                          matplotlib plot() options [default:\n                          \"linewidth=3,alpha=0.5\"]\n    -n, --no-show         do not call matplotlib show()\n    --silent              do not print messages to screen\n\nBasic Run\n'''''''''\n\nA run with the default parameters::\n\n  $ python soops/examples/monty_hall.py output\n  monty_hall: num: 100\n  monty_hall: repeat: 5\n  monty_hall: switch: False\n  monty_hall: host strategy: random\n  monty_hall: elapsed: 0.004662119084969163\n  monty_hall: win rate: 0.25\n  monty_hall: elapsed: 0.0042096920078620315\n  monty_hall: win rate: 0.3\n  monty_hall: elapsed: 0.003894180990755558\n  monty_hall: win rate: 0.31\n  monty_hall: elapsed: 0.003928505931980908\n  monty_hall: win rate: 0.35\n  monty_hall: elapsed: 0.0035342529881745577\n  monty_hall: win rate: 0.31\n\nproduces some results:\n\n.. image:: doc/readme/wins.png\n   :alt: wins.png\n\nParameterization\n''''''''''''''''\n\nNow we would like to run it for various combinations of arguments and their\nvalues, for example:\n\n- `--num=[100,1000,10000]`\n- `--repeat=[10,20]`\n- `--switch` either given or not\n- `--seed` either given or not, changing together with `--seed`\n- `--host=['random', 'first']`\n\nand then collect and analyze the all results. Doing this manually is quite\ntedious, but `soops` can help.\n\nIn order to run a parametric study, first we have to define a function\ndescribing the arguments of our script:\n\n.. code:: python\n\n   def get_run_info():\n       # script_dir is added by soops-run, it is the normalized path to\n       # this script.\n       run_cmd = \"\"\"\n       {python} {script_dir}/monty_hall.py {output_dir}\n       \"\"\"\n       run_cmd = ' '.join(run_cmd.split())\n\n       # Arguments allowed to be missing in soops-run calls.\n       opt_args = {\n           '--num' : '--num={--num}',\n           '--repeat' : '--repeat={--repeat}',\n           '--switch' : '--switch',\n           '--host' : '--host={--host}',\n           '--seed' : '--seed={--seed}',\n           '--plot-opts' : '--plot-opts={--plot-opts}',\n           '--no-show' : '--no-show',\n           '--silent' : '--silent',\n       }\n\n       output_dir_key = 'output_dir'\n       is_finished_basename = 'wins.png'\n\n       return run_cmd, opt_args, output_dir_key, is_finished_basename\n\nThe `get_run_info()` functions should provide four items:\n\n#. A command to run given as a string, with the non-optional arguments and\n   their values (if any) given as ``str.format()`` keys.\n\n#. A dictionary of optional arguments and their values (if any) given as\n   ``str.format()`` keys.\n\n#. A special format key, that denotes the output directory argument of the\n   command. Note that the script must have an argument allowing an output\n   directory specification.\n\n#. A function ``is_finished(pars, options)``, where `pars` is the dictionary of\n   the actual values of the script arguments and `options` are `soops-run`\n   options, see below. The dictionary contains the output directory argument of\n   the script and the function should return True, whenever the results are\n   already present in the given output directory. Instead of a function, a file\n   name can be given, as in `get_run_info()` above. Then the existence of a\n   file with the specified name means that the results are present in the\n   output directory.\n\nRun Parametric Study\n''''''''''''''''''''\n\nPutting `get_run_info()` into our script allows running a parametric study using\n`soops-run`::\n\n  $ soops-run -h\n  usage: soops-run [-h] [--dry-run] [-r {0,1,2}] [-n int]\n                   [--run-function {subprocess.run,psutil.Popen,os.system}]\n                   [-t float]\n                   [--generate-pars dict-like: function=function_name,par0=val0,... or str]\n                   [-c key1+key2+..., ...]\n                   [--compute-pars dict-like: class=class_name,par0=val0,...]\n                   [-s str] [--silent] [--shell] [-o path]\n                   conf run_mod\n\n  Run parametric studies.\n\n  positional arguments:\n    conf                  a dict-like parametric study configuration or a study\n                          configuration file name\n    run_mod               the importable script/module with get_run_info()\n\n  options:\n    -h, --help            show this help message and exit\n    --dry-run             perform a trial run with no commands executed\n    -r {0,1,2}, --recompute {0,1,2}\n                          recomputation strategy: 0: do not recompute, 1:\n                          recompute only if is_finished() returns False, 2:\n                          always recompute [default: 1]\n    -n int, --n-workers int\n                          the number of dask workers [default: 2]\n    --run-function {subprocess.run,psutil.Popen,os.system}\n                          function for running the parameterized command\n                          [default: subprocess.run]\n    -t float, --timeout float\n                          if given, the timeout in seconds; requires setting\n                          --run-function=psutil.Popen\n    --generate-pars dict-like: function=function_name,par0=val0,... or str\n                          if given, generate values of parameters using the\n                          specified function; the generated parameters must be\n                          set to @generate in the parametric study\n                          configuration. Alternatively, a section key in a study\n                          configuration file.\n    -c key1+key2+..., ..., --contract key1+key2+..., ...\n                          list of option keys that should be contracted to vary\n                          in lockstep\n    --compute-pars dict-like: class=class_name,par0=val0,...\n                          if given, compute additional parameters using the\n                          specified class\n    -s str, --study str   study key when parameter sets are given by a study\n                          configuration file\n    --silent              do not print messages to screen\n    --shell               run ipython shell after all computations\n    -o path, --output-dir path\n                          output directory [default: output]\n\nIn our case (the arguments with no value (flags) can be specified either as\n``'@defined'`` or ``'@undefined'``)::\n\n  soops-run -r 1 -n 3 -c='--switch + --seed' -o output \"python='python3', output_dir='output/study/%s', --num=[100,1000,10000], --repeat=[10,20], --switch=['@undefined', '@defined', '@undefined', '@defined'], --seed=['@undefined', '@undefined', 12345, 12345], --host=['random', 'first'], --silent=@defined, --no-show=@defined\" soops/examples/monty_hall.py\n\nThis command runs our script using three dask workers (``-n 3`` option) and\nproduces a directory for each parameter set::\n\n  $ ls output/study/\n  000-7a6b546a625c2d37569346a286f2b2b6/  024-6f9810a492faf793b80de2ec32dec4b1/\n  001-1daf48cede910a9c7c700fb78ce3aa2d/  025-a4d05c2889189c4e086f9d6f56e1ba1d/\n  002-57c1271f4b9cbe00742e3c97e0c14e24/  026-67a251e1c40f65bae8bbf621c4e1a987/\n  003-2f828633fa9eefa8eb8b40873882247d/  027-9e3d30603d2b382256f62fdf17bc23ae/\n  004-24f370388496173d8e1d7a9e574262e0/  028-6ff18af0333367a65ed131d210078653/\n  005-7893091a6fedc4ccdf7d73d803a91687/  029-54d77d99e74402a043af583ac1e14c4e/\n  006-70132dc423f26c78f1d2e33f0607820c/  030-4bad1e59de5b446e80a621fdfb5fb127/\n  007-7e5ecb11154e4c402caa51878e283e63/  031-d65b7afd4d43b3159b580cf6c974a26c/\n  008-201e1ab3e47d3b994f2d6532859ac301/  032-cd83aafc620d81b994f005c6a7b1d2c4/\n  009-35105e72d8ec2ddfd8adc8ffa8c1f088/  033-e065bfc2596f3b285877e36578d77cce/\n  010-ff68ea026e0efba0e4c2a71d64e12f2c/  034-0533ff015142c967f86b365076fcee18/\n  011-217e45abc1d2b188b0755fc6a550dfe9/  035-f127408b640dae1de6acc9bce1b68669/\n  012-d6adcade17e2d7d843cbd8e14aebf76a/  036-56654b678decdd2d77ecc07ead326ad7/\n  013-cdff71cb542f8159ff5c5a023c91f61c/  037-d3d16497570cb3f934e73c3f0c519822/\n  014-551f32ba477c7e8e8fad0769ac793d3c/  038-5b3b21be9e6dbbd5c7d8e031bd621717/\n  015-856ad0b4ee0273da8cd8ad3cf222077b/  039-d11e877087ec25fe2c8062708687204c/\n  016-7eb991928b39b40c98e7cb7970d0f15b/  040-5cf056a63f2e10ee78d599e097eb4d0e/\n  017-9a3f4b32f5ba30ec173dd651c9810c6e/  041-ca696dc0edbe70890f2dcbcfcf99fe47/\n  018-9067a6dbbb4afaf285f5c9101fa5fa73/  042-9962ccd67846d21245580de2c5e83bcc/\n  019-03a0123bd55725fdabec32e0aeff9d44/  043-18503a94bf6398644e2a32d3a93e9450/\n  020-266ed9d092128d8e3c3c2f78669a0425/  044-6c46f7a9e9cd0b50d914d6e2a188a64d/\n  021-00a156df6ccecab8d35c5bdc5ddb6c0e/  045-0af51ef33a80a99ac38bfbac10fea9b2/\n  022-91f0d18a4d9cd2e6721d937c9de4dbe9/  046-746823fee6450a294869dc9ca7396e15/\n  023-e3edef5a83fe941c75df4257ac056ca5/  047-f9046e62d8da3159dfcdebcf687092f3/\n\nThe directory names consist of an integer allowing an easy location and a MD5\nhash of the run parameters. In each directory, there are four files::\n\n  $ ls output/study/000-7a6b546a625c2d37569346a286f2b2b6/\n  options.txt  output_log.txt  soops-parameters.csv  wins.png\n\nthree just like in the basic run above, and `soops-parameters.csv`, where the\nrun parameters (mostly command line arguments) are stored by `soops-run`. For\nconvenience, parameters of all runs are collected in `all_parameters.csv` in the\n`soops-run` output directory (`output` by default), using the data in all\n`soops-parameters.csv` files found.\n\nOur example script also stores the values of command line arguments in\n``options.txt`` for possible re-runs and inspection::\n\n  $ cat output/study/000-7a6b546a625c2d37569346a286f2b2b6/options.txt\n\n  command line\n  ------------\n\n  \"soops/examples/monty_hall.py\" \"output/study/000-7a6b546a625c2d37569346a286f2b2b6\" \"--num=100\" \"--repeat=10\" \"--host=random\" \"--no-show\" \"--silent\"\n\n  options\n  -------\n\n  host: random\n  num: 100\n  output_dir: output/study/000-7a6b546a625c2d37569346a286f2b2b6\n  plot_opts: {'linewidth': 3, 'alpha': 0.5}\n  repeat: 10\n  seed: None\n  show: False\n  silent: True\n  switch: False\n\nUsing Parametric Study Configuration Files\n''''''''''''''''''''''''''''''''''''''''''\n\nInstead of providing the parameter sets on the command line, a study\nconfiguration file can be used. Then the same parametric study as above\ncan be run using::\n\n  soops-run -r 1 -n 3 -c='--switch + --seed' --study=study -o output soops/examples/studies.cfg soops/examples/monty_hall.py\n\nwhere ``soops/examples/studies.cfg`` contains::\n\n  [study]\n  python='python3'\n  output_dir='output/study/%s'\n  --num=[100,1000,10000]\n  --repeat=[10,20]\n  --switch=['@undefined', '@defined', '@undefined', '@defined']\n  --seed=['@undefined', '@undefined', 12345, 12345]\n  --host=['random', 'first']\n  --silent=@defined\n  --no-show=@defined\n\nSeveral studies can be stored in a single file, see `soops/examples/studies.cfg\n<soops/examples/studies.cfg>`_. See also the docstring of\n`soops/examples/monty_hall.py <soops/examples/monty_hall.py>`_ for more\nexamples.\n\nShow Parameters Used in Each Output Directory\n'''''''''''''''''''''''''''''''''''''''''''''\n\nUse ``soops-info`` to explain which parameters were used in the given output\ndirectories::\n\n  $ soops-info -h\n  usage: soops-info [-h] [-e dirname [dirname ...]] [--shell] run_mod\n\n  Get parametric study configuration information.\n\n  positional arguments:\n    run_mod               the importable script/module with get_run_info()\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -e dirname [dirname ...], --explain dirname [dirname ...]\n                          explain parameters used in the given output\n                          directory/directories\n    --shell               run ipython shell after all computations\n\n::\n\n  $ soops-info soops/examples/monty_hall.py -e output/study/000-7a6b546a625c2d37569346a286f2b2b6/\n  info: output/study/000-7a6b546a625c2d37569346a286f2b2b6/\n  info:      finished: True\n  info: *      --host: random\n  info: *   --no-show: @defined\n  info: *       --num: 100\n  info: * --plot-opts: @undefined\n  info: *    --repeat: 10\n  info: *      --seed: @undefined\n  info: *    --silent: @defined\n  info: *    --switch: @undefined\n  info: *      python: python3\n  info:    output_dir: output/study/000-7a6b546a625c2d37569346a286f2b2b6\n  info:    script_dir: examples\n\nA `*` denotes a parameter used in the parameterization of the example script,\nother parameters are employed by `soops-run`.\n\nScoop Outputs of the Parametric Study\n'''''''''''''''''''''''''''''''''''''\n\nIn order to use ``soops-scoop`` to scoop/collect outputs of our parametric\nstudy, a new function needs to be defined:\n\n.. code:: python\n\n   import soops.scoop_outputs as sc\n\n   def get_scoop_info():\n       info = [\n           ('options.txt', partial(\n               sc.load_split_options,\n               split_keys=None,\n           ), True),\n           ('output_log.txt', scrape_output),\n       ]\n\n       return info\n\nThe function for loading the ``'options.txt'`` files is already in `soops`. The\nthird item in the tuple, if present and True, denotes that the output contains\ninput parameters that were used for the parameterization. This allows getting\nthe parameterization in post-processing plugins, see below\nthe ``plot_win_rates()`` function.\n\nThe function to get useful information from ``'output_log.txt'`` needs to be\nprovided:\n\n.. code:: python\n\n   def scrape_output(filename, rdata=None):\n       out = {}\n       with open(filename, 'r') as fd:\n           repeat = rdata['repeat']\n           for ii in range(4):\n               next(fd)\n\n           elapsed = []\n           win_rate = []\n           for ii in range(repeat):\n               line = next(fd).split()\n               elapsed.append(float(line[-1]))\n               line = next(fd).split()\n               win_rate.append(float(line[-1]))\n\n           out['elapsed'] = np.array(elapsed)\n           out['win_rate'] = np.array(win_rate)\n\n       return out\n\nThen we are ready to run ``soops-scoop``::\n\n  $ soops-scoop -h\n  usage: soops-scoop [-h] [-s column[,column,...]]\n                     [--filter filename[,filename,...]] [--no-plugins]\n                     [--use-plugins name[,name,...] | --omit-plugins\n                     name[,name,...]] [-p module] [--plugin-args dict-like]\n                     [--results filename] [--no-csv] [-r] [--write] [--shell]\n                     [--debug] [-o path]\n                     scoop_mod directories [directories ...]\n\n  Scoop output files.\n\n  positional arguments:\n    scoop_mod             the importable script/module with get_scoop_info()\n    directories           results directories. On \"Argument list too long\"\n                          system error, enclose the directories matching pattern\n                          in \"\", it will be expanded using glob.glob().\n\n  options:\n    -h, --help            show this help message and exit\n    -s column[,column,...], --sort column[,column,...]\n                          column keys for sorting of DataFrame rows\n    --filter filename[,filename,...]\n                          use only DataFrame rows with given files successfully\n                          scooped\n    --no-plugins          do not call post-processing plugins\n    --use-plugins name[,name,...]\n                          use only the named plugins (no effect with --no-\n                          plugins)\n    --omit-plugins name[,name,...]\n                          omit the named plugins (no effect with --no-plugins)\n    -p module, --plugin-mod module\n                          if given, the module that has get_plugin_info()\n                          instead of scoop_mod\n    --plugin-args dict-like\n                          optional arguments passed to plugins given as\n                          plugin_name={key1=val1, key2=val2, ...}, ...\n    --results filename    results file name [default: <output_dir>/results.h5]\n    --no-csv              do not save results as CSV (use only HDF5)\n    -r, --reuse           reuse previously scooped results file\n    --write               write results files even when results were loaded\n                          using --reuse option\n    --shell               run ipython shell after all computations\n    --debug               automatically start debugger when an exception is\n                          raised\n    -o path, --output-dir path\n                          output directory [default: .]\n\nas follows::\n\n  $ soops-scoop soops/examples/monty_hall.py output/study/ -s rdir -o output/study --no-plugins --shell\n\n  <snip>\n\n  Python 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)\n  Type 'copyright', 'credits' or 'license' for more information\n  IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.\n\n  In [1]: df.keys()\n  Out[1]:\n  Index(['rdir', 'rfiles', 'host', 'num', 'output_dir', 'plot_opts', 'repeat',\n         'seed', 'show', 'silent', 'switch', 'elapsed', 'win_rate', 'time'],\n        dtype='object')\n\n  In [2]: df.win_rate.head()\n  Out[2]:\n  0    [0.32, 0.4, 0.38, 0.27, 0.31, 0.39, 0.25, 0.33...\n  1    [0.64, 0.67, 0.68, 0.67, 0.73, 0.62, 0.66, 0.7...\n  2    [0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3...\n  3    [0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.6...\n  4    [0.28, 0.28, 0.35, 0.32, 0.29, 0.33, 0.29, 0.3...\n  Name: win_rate, dtype: object\n\n  In [3]: df.iloc[0]\n  Out[3]:\n  rdir          ~/projects/soops/output/study/000-7a6b546a625c...\n  rfiles                            [options.txt, output_log.txt]\n  host                                                     random\n  num                                                         100\n  output_dir    output/study/000-7a6b546a625c2d37569346a286f2b2b6\n  plot_opts                        {'linewidth': 3, 'alpha': 0.5}\n  repeat                                                       10\n  seed                                                        NaN\n  show                                                      False\n  silent                                                     True\n  switch                                                    False\n  elapsed       [0.0031552709988318384, 0.0032349379907827824,...\n  win_rate      [0.32, 0.4, 0.38, 0.27, 0.31, 0.39, 0.25, 0.33...\n  time                                 2021-02-07 14:34:30.202971\n  Name: 0, dtype: object\n\nThe ``DataFrame`` with the all results is saved in ``output/study/results.h5``\nfor reuse.\n\nPost-processing Plugins\n'''''''''''''''''''''''\n\nIt is also possible to define simple plugins that act on the resulting\n``DataFrame``. First, define a function that will register the plugins:\n\n.. code:: python\n\n   def get_plugin_info():\n       from soops.plugins import show_figures\n\n       info = [plot_win_rates, show_figures]\n\n       return info\n\nThe ``show_figures()`` plugin is defined in `soops`. The ``plot_win_rates()``\nplugin allows plotting the all results combined:\n\n.. code:: python\n\n   def plot_win_rates(df, data=None, colormap_name='viridis'):\n       import soops.plot_selected as sps\n\n       df = df.copy()\n       df['seed'] = df['seed'].where(df['seed'].notnull(), -1)\n\n       uniques = sc.get_uniques(df, [key for key in data.multi_par_keys\n                                     if key not in ['output_dir']])\n       output('parameterization:')\n       for key, val in uniques.items():\n           output(key, val)\n\n       selected = sps.normalize_selected(uniques)\n\n       styles = {key : {} for key in selected.keys()}\n       styles['seed'] = {'alpha' : [0.9, 0.1]}\n       styles['num'] = {'color' : colormap_name}\n       styles['repeat'] = {'lw' : np.linspace(3, 2,\n                                              len(selected.get('repeat', [1])))}\n       styles['host'] = {'ls' : ['-', ':']}\n       styles['switch'] = {'marker' : ['x', 'o'], 'mfc' : 'None', 'ms' : 10}\n\n       styles = sps.setup_plot_styles(selected, styles)\n\n       fig, ax = plt.subplots(figsize=(8, 8))\n       sps.plot_selected(ax, df, 'win_rate', selected, {}, styles)\n       ax.set_xlabel('simulation number')\n       ax.set_ylabel('win rate')\n       fig.tight_layout()\n       fig.savefig(os.path.join(data.output_dir, 'win_rates.png'))\n\n       return data\n\nThen, running::\n\n  soops-scoop soops/examples/monty_hall.py output/study/ -s rdir -o output/study -r\n\nreuses the ``output/study/results.h5`` file and plots the combined results:\n\n.. image:: doc/readme/win_rates.png\n   :alt: win_rates.png\n\nIt is possible to pass arguments to plugins using ``--plugin-args`` option, as\nfollows::\n\n  soops-scoop soops/examples/monty_hall.py output/study/ -s rdir -o output/study -r --plugin-args=plot_win_rates={colormap_name='plasma'}\n\nNotes\n'''''\n\n- The `get_run_info()`, `get_scoop_info()` and `get_plugin_info()` info\n  function can be in different modules.\n- The script that is being parameterized need not be a Python module - any\n  executable which can be run from a command line can be used.\n\nSpecial Argument Values\n'''''''''''''''''''''''\n\n- ``'@defined'`` denotes that a value-less argument is present.\n- ``'@undefined'`` denotes that a value-less argument is not present.\n- ``'@arange([start,] stop[, step,], dtype=None)'`` denotes values obtained by\n  calling ``numpy.arange()`` with the given arguments.\n- ``'@linspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)'``\n  denotes values obtained by calling ``numpy.linspace()`` with the given\n  arguments.\n- ``'@generate'`` denotes an argument whose values are generated, in connection\n  with ``--generate-pars`` option, see below.\n\nGenerated Arguments\n'''''''''''''''''''\n\nArgument sequences can be generated using a function with the help of\n``--generate-pars`` option. For example, the same results as above can be\nachieved by defining a function that generates ``--switch`` and ``--seed``\narguments values:\n\n.. code:: python\n\n   def generate_seed_switch(args, gkeys, dconf, options):\n       \"\"\"\n       Parameters\n       ----------\n       args : Struct\n           The arguments passed from the command line.\n       gkeys : list\n           The list of option keys to generate.\n       dconf : dict\n           The parsed parameters of the parametric study.\n       options : Namespace\n           The soops-run command line options.\n       \"\"\"\n       seeds, switches = zip(*product(args.seeds, args.switches))\n       gconf = {'--seed' : list(seeds), '--switch' : list(switches)}\n       return gconf\n\nand then calling `soops-run` as follows::\n\n  soops-run -r 1 -n 3 -c='--switch + --seed' -o output/study2 \"python='python3', output_dir='output/study2/%s', --num=[100,1000,10000], --repeat=[10,20], --switch=@generate, --seed=@generate, --host=['random', 'first'], --silent=@defined, --no-show=@defined\" --generate-pars=\"function=generate_seed_switch, seeds=['@undefined', 12345], switches=['@undefined', '@defined']\" soops/examples/monty_hall.py\n\nNotice the special ``@generate`` values of ``--switch`` and ``--seed``, and the\nuse of ``--generate-pars``: all key-value pairs, except the function name, are\npassed into :func:``generate_seed_switch()`` in the ``args`` dict-like\nargument.\n\nThe combined results can again be plotted using::\n\n  soops-scoop soops/examples/monty_hall.py output/study2/0* -s rdir -o output/study2/\n\nComputed Arguments\n''''''''''''''''''\n\nBy using ``--compute-pars`` option it is possible to define arguments depending\non other arguments values in a more general way than with ``--contract``.\nA callable class needs to be provided with the following structure:\n\n.. code:: python\n\n   class ComputePars:\n\n       def __init__(self, args, par_seqs, key_order, options):\n           \"\"\"\n           Called prior to the parametric study to pre-compute reusable data.\n           \"\"\"\n           pass\n\n       def __call__(self, all_pars):\n           \"\"\"\n           Called for each parameter set of the study.\n           \"\"\"\n           out = {}\n           return out\n\nFind Runs with Given Parameters\n'''''''''''''''''''''''''''''''\n\nFor very large parametric studies, it might be impractical to view\n`all_parameters.csv` directly when searching a directory of a run with given\nparameters. The `soops-find` script can be used instead::\n\n  $ soops-find -h\n  usage: soops-find [-h] [-q pandas-query-expression]\n                    [--engine {numexpr,python}] [--shell]\n                    directories [directories ...]\n\n  Find parametric studies with parameters satisfying a given query.\n\n  Option-like parameters are transformed to valid Python attribute names removing\n  initial dashes and replacing other dashes by underscores. For example\n  '--output-dir' becomes 'output_dir'.\n\n  positional arguments:\n    directories           one or more root directories with sub-directories\n                          containing parametric study results\n\n  options:\n    -h, --help            show this help message and exit\n    -q pandas-query-expression, --query pandas-query-expression\n                          pandas query expression applied to collected\n                          parameters\n    --engine {numexpr,python}\n                          pandas query evaluation engine [default: numexpr]\n    --shell               run ipython shell after all computations\n\nWithout options, it loads all parameter sets found in given directories into\na DataFrame and launches the ipython shell::\n\n  $ soops-find output/study\n  find: 48 parameter sets stored in `apdf` DataFrame\n  find: column names:\n  Index(['finished', 'host', 'no_show', 'num', 'plot_opts', 'repeat', 'seed',\n         'silent', 'switch', 'python', 'output_dir', 'script_dir'],\n        dtype='object')\n  Python 3.8.5 (default, Sep  4 2020, 07:30:14)\n  Type 'copyright', 'credits' or 'license' for more information\n  IPython 7.21.0 -- An enhanced Interactive Python. Type '?' for help.\n\n  In [1]:\n\nThe ``--query`` option can be used to limit the search, for example::\n\n  $ soops-find output/study -q \"num==1000 & repeat==20 & seed==12345\"\n\nSee Also\n--------\n\n- `automan <https://github.com/pypr/automan>`_\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rc/soops",
    "keywords": "run parametric studies,scoop output",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "soops",
    "package_url": "https://pypi.org/project/soops/",
    "platform": null,
    "project_url": "https://pypi.org/project/soops/",
    "project_urls": {
      "Homepage": "https://github.com/rc/soops"
    },
    "release_url": "https://pypi.org/project/soops/2022.2/",
    "requires_dist": [
      "pyparsing",
      "dask",
      "distributed",
      "pandas",
      "tables",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Run parametric studies and scoop output files.",
    "version": "2022.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15856225,
  "releases": {
    "2020.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ccf1157158ff64c6fd14b6f6d85038f929ed321e41870f3e495237c8a7c3cf",
          "md5": "715576df3e9cbd7300818ac759e06cd0",
          "sha256": "1cca8b4af2a06a0ac9b84bf79c281f086a04828c222af5e77878be7572d985bc"
        },
        "downloads": -1,
        "filename": "soops-2020.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "715576df3e9cbd7300818ac759e06cd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20093,
        "upload_time": "2020-04-28T14:48:19",
        "upload_time_iso_8601": "2020-04-28T14:48:19.867806Z",
        "url": "https://files.pythonhosted.org/packages/60/cc/f1157158ff64c6fd14b6f6d85038f929ed321e41870f3e495237c8a7c3cf/soops-2020.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fca501240ca5155a6f73d35bfae309e7ec5be7d98e35625f2dd0c44f704d1262",
          "md5": "e7abed5312992ddf468873c41593738d",
          "sha256": "ccd62e5f8515dfc462211f6102349ec1df7243be5309355dd59894315a3e072c"
        },
        "downloads": -1,
        "filename": "soops-2020.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e7abed5312992ddf468873c41593738d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 25416,
        "upload_time": "2020-04-28T14:48:21",
        "upload_time_iso_8601": "2020-04-28T14:48:21.541806Z",
        "url": "https://files.pythonhosted.org/packages/fc/a5/01240ca5155a6f73d35bfae309e7ec5be7d98e35625f2dd0c44f704d1262/soops-2020.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6aaf0b9906a6819cf09d0ffd11324eb303ccacef26e15012b5bb12671dd30ef7",
          "md5": "3d30718e2d3658e1b3ec8a123eefc306",
          "sha256": "4c9948b494550b6c475a2e128b57bbc41e6776ad591aa7f635fb29d999818997"
        },
        "downloads": -1,
        "filename": "soops-2020.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d30718e2d3658e1b3ec8a123eefc306",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12429,
        "upload_time": "2020-03-12T16:26:03",
        "upload_time_iso_8601": "2020-03-12T16:26:03.591680Z",
        "url": "https://files.pythonhosted.org/packages/6a/af/0b9906a6819cf09d0ffd11324eb303ccacef26e15012b5bb12671dd30ef7/soops-2020.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a047e67f9ba41685b04ee4286d4a24dc13fdcb8db8b334e46b52e95f60567c2",
          "md5": "f888f46d5d059f113f3afd61a33523d6",
          "sha256": "888c9ced540a46dea33efcc4f85f85f18e4836084bb2e9c663e89757cd470119"
        },
        "downloads": -1,
        "filename": "soops-2020.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "f888f46d5d059f113f3afd61a33523d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9358,
        "upload_time": "2020-03-12T16:26:05",
        "upload_time_iso_8601": "2020-03-12T16:26:05.681674Z",
        "url": "https://files.pythonhosted.org/packages/8a/04/7e67f9ba41685b04ee4286d4a24dc13fdcb8db8b334e46b52e95f60567c2/soops-2020.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.1rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a34b993fd29aa71f203d1f0e5e4bbfefd4d282893892fb89c9090158bebcca1",
          "md5": "9c15c4ac1677299efa15ec9725eafbf0",
          "sha256": "865139b7613e7fa9e2eac0ba53118484447fdbbf34e2e2a91c5f5b7ad9c98447"
        },
        "downloads": -1,
        "filename": "soops-2020.1rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c15c4ac1677299efa15ec9725eafbf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 19287,
        "upload_time": "2020-04-01T22:07:56",
        "upload_time_iso_8601": "2020-04-01T22:07:56.331868Z",
        "url": "https://files.pythonhosted.org/packages/5a/34/b993fd29aa71f203d1f0e5e4bbfefd4d282893892fb89c9090158bebcca1/soops-2020.1rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1939e88938b451b0771548ab07c6c037a1bbf5f699d9d31770a91e63b37883d",
          "md5": "828088634fb7570fbf6df08ef6048e26",
          "sha256": "5f78f169449e1d41c512d599419895f6cab060e4219b6db9af8f01d54708f425"
        },
        "downloads": -1,
        "filename": "soops-2020.1rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "828088634fb7570fbf6df08ef6048e26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 24539,
        "upload_time": "2020-04-01T22:07:57",
        "upload_time_iso_8601": "2020-04-01T22:07:57.982103Z",
        "url": "https://files.pythonhosted.org/packages/b1/93/9e88938b451b0771548ab07c6c037a1bbf5f699d9d31770a91e63b37883d/soops-2020.1rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2020.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e61378f2befe0843fbf9c312469a2710d9d7119cfdc10db50af50f3cb36b5d15",
          "md5": "a15fa163a3796c6d9aff30b8ba0af159",
          "sha256": "36462120ed0cb63d22e02c1a9dfb43f46780b876a871cb3a52bbb945ef9fcb88"
        },
        "downloads": -1,
        "filename": "soops-2020.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a15fa163a3796c6d9aff30b8ba0af159",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 22486,
        "upload_time": "2020-07-14T15:45:08",
        "upload_time_iso_8601": "2020-07-14T15:45:08.921928Z",
        "url": "https://files.pythonhosted.org/packages/e6/13/78f2befe0843fbf9c312469a2710d9d7119cfdc10db50af50f3cb36b5d15/soops-2020.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7065322e1df353e82a75ca42c6de65c9cfaf3e426bd96adcaebf0dddbf0e8d6b",
          "md5": "120bb29f6b39a7ef7322f8856d5034d9",
          "sha256": "c160c051cbbfb72764be22f12a990d3bfd348e61f6a3ecb4264bd21b8c2cd766"
        },
        "downloads": -1,
        "filename": "soops-2020.2.tar.gz",
        "has_sig": false,
        "md5_digest": "120bb29f6b39a7ef7322f8856d5034d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 30586,
        "upload_time": "2020-07-14T15:45:10",
        "upload_time_iso_8601": "2020-07-14T15:45:10.536781Z",
        "url": "https://files.pythonhosted.org/packages/70/65/322e1df353e82a75ca42c6de65c9cfaf3e426bd96adcaebf0dddbf0e8d6b/soops-2020.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2021.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc44bcc9270a11b6f565c4c5c534d2b2f690ddde095e890c067e82f9dff461c2",
          "md5": "2d9d73c3122a6ac28238d08f9361ec67",
          "sha256": "c0927cbc999ceb8de5bbdb102ec4e76c3118ba504147bb7c998c5598962b1184"
        },
        "downloads": -1,
        "filename": "soops-2021.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d9d73c3122a6ac28238d08f9361ec67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31554,
        "upload_time": "2021-03-30T22:30:31",
        "upload_time_iso_8601": "2021-03-30T22:30:31.817149Z",
        "url": "https://files.pythonhosted.org/packages/dc/44/bcc9270a11b6f565c4c5c534d2b2f690ddde095e890c067e82f9dff461c2/soops-2021.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44d29659c69c8b2c193dacc278906d0f832e2490e23c08996b3dbba7882bf4c2",
          "md5": "78b495dfe3a33762623ad80cb52cafd3",
          "sha256": "c6ff07b4bc02f359924c0d02c3e48f0da900cc8fdb3d10fb9fd301f185bf3ca3"
        },
        "downloads": -1,
        "filename": "soops-2021.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78b495dfe3a33762623ad80cb52cafd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40904,
        "upload_time": "2021-03-30T22:30:33",
        "upload_time_iso_8601": "2021-03-30T22:30:33.774782Z",
        "url": "https://files.pythonhosted.org/packages/44/d2/9659c69c8b2c193dacc278906d0f832e2490e23c08996b3dbba7882bf4c2/soops-2021.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fad6d45c55093c65e5d3f11164577c70f7b83939963a9e4041e9444e7d49a04",
          "md5": "24acd2b133520200c1269792e0fd97b4",
          "sha256": "7aee17f8f1c1f3b5dda394821f833cf21f03af0105f6b50931e0582267ca092c"
        },
        "downloads": -1,
        "filename": "soops-2022.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24acd2b133520200c1269792e0fd97b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37470,
        "upload_time": "2022-04-10T17:51:07",
        "upload_time_iso_8601": "2022-04-10T17:51:07.588854Z",
        "url": "https://files.pythonhosted.org/packages/8f/ad/6d45c55093c65e5d3f11164577c70f7b83939963a9e4041e9444e7d49a04/soops-2022.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "119b5caf1131d9c9c6a643a3badf9f190f31887452914cf4fec0c8ab56050672",
          "md5": "602e55b0c0d992856a45d8c47e0c7ac0",
          "sha256": "95cdc715e1521ae1476ddde22326a7fb2c25cd1217082c6eeb3c383a551a2740"
        },
        "downloads": -1,
        "filename": "soops-2022.1.tar.gz",
        "has_sig": false,
        "md5_digest": "602e55b0c0d992856a45d8c47e0c7ac0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 336512,
        "upload_time": "2022-04-10T17:51:09",
        "upload_time_iso_8601": "2022-04-10T17:51:09.717306Z",
        "url": "https://files.pythonhosted.org/packages/11/9b/5caf1131d9c9c6a643a3badf9f190f31887452914cf4fec0c8ab56050672/soops-2022.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2022.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43187b58ad4314d5aed1550a19fca07e34cbfa928fffb17a2685953fe239f578",
          "md5": "d5d5a6618270c6c14f5a79f3a74abfff",
          "sha256": "03abf3281d1c788b087d88f5632103abe13f9715aee4c5c64bd65da2306dec9c"
        },
        "downloads": -1,
        "filename": "soops-2022.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5d5a6618270c6c14f5a79f3a74abfff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39598,
        "upload_time": "2022-11-22T16:31:54",
        "upload_time_iso_8601": "2022-11-22T16:31:54.580883Z",
        "url": "https://files.pythonhosted.org/packages/43/18/7b58ad4314d5aed1550a19fca07e34cbfa928fffb17a2685953fe239f578/soops-2022.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0199fc970a0c413c08945c219234c0992625ae8968f35f6ded3903fc8b0d24ec",
          "md5": "e936305b5bb93262080f881a29bee1bd",
          "sha256": "a5464ae78b7724f6e4cadf87d83cc8366ccdf34a1fd91a69c7092ffc55167752"
        },
        "downloads": -1,
        "filename": "soops-2022.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e936305b5bb93262080f881a29bee1bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44821,
        "upload_time": "2022-11-22T16:31:56",
        "upload_time_iso_8601": "2022-11-22T16:31:56.951425Z",
        "url": "https://files.pythonhosted.org/packages/01/99/fc970a0c413c08945c219234c0992625ae8968f35f6ded3903fc8b0d24ec/soops-2022.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43187b58ad4314d5aed1550a19fca07e34cbfa928fffb17a2685953fe239f578",
        "md5": "d5d5a6618270c6c14f5a79f3a74abfff",
        "sha256": "03abf3281d1c788b087d88f5632103abe13f9715aee4c5c64bd65da2306dec9c"
      },
      "downloads": -1,
      "filename": "soops-2022.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5d5a6618270c6c14f5a79f3a74abfff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39598,
      "upload_time": "2022-11-22T16:31:54",
      "upload_time_iso_8601": "2022-11-22T16:31:54.580883Z",
      "url": "https://files.pythonhosted.org/packages/43/18/7b58ad4314d5aed1550a19fca07e34cbfa928fffb17a2685953fe239f578/soops-2022.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0199fc970a0c413c08945c219234c0992625ae8968f35f6ded3903fc8b0d24ec",
        "md5": "e936305b5bb93262080f881a29bee1bd",
        "sha256": "a5464ae78b7724f6e4cadf87d83cc8366ccdf34a1fd91a69c7092ffc55167752"
      },
      "downloads": -1,
      "filename": "soops-2022.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e936305b5bb93262080f881a29bee1bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44821,
      "upload_time": "2022-11-22T16:31:56",
      "upload_time_iso_8601": "2022-11-22T16:31:56.951425Z",
      "url": "https://files.pythonhosted.org/packages/01/99/fc970a0c413c08945c219234c0992625ae8968f35f6ded3903fc8b0d24ec/soops-2022.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}