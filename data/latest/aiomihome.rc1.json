{
  "info": {
    "author": "Marky Egeb√§ck",
    "author_email": "marky@egeback.se",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# aiomihome\n\nAsyncio version of https://github.com/Danielhiversen/PyXiaomiGateway\n\n## Description\nThe API only includes a thin layer with out proper handling of devices or sensors with seprate \n\nLibrary consist of two classes\n* **Service**<br>\n  Manage the multisocket interface to the xiaomi bridge and connecting to a gateway. Includes service for discovery of gateways\n\n* **Gateway**<br>\n  Handles the connection to the gateway\n\n\nThe bridge needs to be i local mode and key needs to be provided to communicate with the gateway\n  \n## Usage\n\nCreate a new service object. The gateway config key is required to be able to communicate with the gateway. If discovery is used and only one gateway exist only key is needed, if several provide sid or host.\n\nSee example folder for runnable code.\n\n### Connect go gateway\n#### Run auto discover:\n```python\ngateways_config = [\n    {\n      \"host\": \"10.0.4.104\", \n      \"sid\": \"7811dcb07917\",\n      \"port\": 9898,\n      \"key\": key\n     }\n]\nservice = XiaomiService(gateways_config=gateways_config)\n\n# Start the mulitcast socket listner\nawait service.listen()\n\n# Run the auto discover\ngateways = await service.discover()\n\nprint(\"Number of gateways found: {}\".format(len(gateways)))\n\n# Get first gateway\ngateway = gateways[0]\n```\n\n#### Directly connect to gateway:\n\n```python\nservice = XiaomiService()\n\n# Start the mulitcast socket listner\nawait service.listen()\n\n# Create a gatewate connetion\ngateway = await service.add_gateway(\"10.0.4.104\", 9898, \"7811dcb07917\", key)\n```\n\n#### Close conections\n```python\nawait service.close()\n```\n\n### Listners\n```python\nasync def heartbeat_callback(data):\n    print(\"HEARTBEAT RECIVED\", data)\n\nasync def device_callback(data):\n    print(\"Device data RECIVED\", data)\n\ngateway.heartbeat_callback = heartbeat_callback\ngateway.device_callback = device_callback\n```\n\n### Interact with the gateway\n#### Print devices\n```python\nprint(\"Turn on light\")\nfor device_type, devices in gateway.devices.items():\n  print(device_type, len(devices))\n  for device in devices:\n    print(\"     \", device['model'])\n    print(device)\n      for value_key, value in device['data'].items():\n        print(\"         \", value_key, value)\n```\n#### Set the gateway light\n```python\n# Red\nawait gateway.set_color(255, 0, 0)\nawait asyncio.sleep(1)\n# Green\nawait gateway.set_color(0, 255, 0)\nawait asyncio.sleep(1)\n# Blue\nawait gateway.set_color(0, 0, 255)\nawait asyncio.sleep(1)\n# Off\nawait gateway.turn_off_light()\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/egeback/aiomihome/archive/v1.0.3.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/egeback/aiomihome",
    "keywords": "xiaomi,aqara",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiomihome",
    "package_url": "https://pypi.org/project/aiomihome/",
    "platform": "any",
    "project_url": "https://pypi.org/project/aiomihome/",
    "project_urls": {
      "Download": "https://github.com/egeback/aiomihome/archive/v1.0.3.zip",
      "Homepage": "https://github.com/egeback/aiomihome"
    },
    "release_url": "https://pypi.org/project/aiomihome/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6.0",
    "summary": "Python asyncio implementation of Xiaomi Aqara Hub API",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7101610,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74f312116e5b3a3d4cc33f09da95a7421166a04c02077be83ecb7b1cc131c114",
          "md5": "6f86a948828acdd0269c0c1b88a07c80",
          "sha256": "c877cc9d52fb66a13bf7b3be34f0e7cad2cde4f6ddff918ef9be217e64023317"
        },
        "downloads": -1,
        "filename": "aiomihome-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6f86a948828acdd0269c0c1b88a07c80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 9545,
        "upload_time": "2020-04-25T22:49:48",
        "upload_time_iso_8601": "2020-04-25T22:49:48.046390Z",
        "url": "https://files.pythonhosted.org/packages/74/f3/12116e5b3a3d4cc33f09da95a7421166a04c02077be83ecb7b1cc131c114/aiomihome-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "74f312116e5b3a3d4cc33f09da95a7421166a04c02077be83ecb7b1cc131c114",
        "md5": "6f86a948828acdd0269c0c1b88a07c80",
        "sha256": "c877cc9d52fb66a13bf7b3be34f0e7cad2cde4f6ddff918ef9be217e64023317"
      },
      "downloads": -1,
      "filename": "aiomihome-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6f86a948828acdd0269c0c1b88a07c80",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 9545,
      "upload_time": "2020-04-25T22:49:48",
      "upload_time_iso_8601": "2020-04-25T22:49:48.046390Z",
      "url": "https://files.pythonhosted.org/packages/74/f3/12116e5b3a3d4cc33f09da95a7421166a04c02077be83ecb7b1cc131c114/aiomihome-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}