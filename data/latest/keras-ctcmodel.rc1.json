{
  "info": {
    "author": "Cyprien Ruffino",
    "author_email": "ruffino.cyprien@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "﻿\n# CTCModel : A Connectionnist Temporal Classification implementation for Keras\n\n[![PyPI version](https://badge.fury.io/py/keras-ctcmodel.svg)](https://badge.fury.io/py/keras-ctcmodel)  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Description\n\nCTCModel makes the training of a RNN with the Connectionnist Temporal Classification approach completely transparent.\n\nIt directly inherits from the traditionnal Keras Model and uses the TensorFlow implementation of the CTC loss and decoding functions.\n\n## Dependencies\n- Keras\n- Tensorflow\n- six (for the example only)\n\n## Installation\n$ pip install keras-ctcmodel\n\nOR\n\n$ git clone https://github.com/cyprienruffino/CTCModel  \n$ cd CTCModel\n$ python setup.py install --user\n\n## Getting started\nExample of a standard recurrent neural network with CTCModel in Keras.\n\n```\nfrom keras.layers import LSTM, TimeDistributed, Dense, Activation, Input\nfrom keras.optimizers import Adam\nfrom numpy import zeros\nfrom keras_ctcmodel.CTCModel import CTCModel as CTCModel\n\nh_features = 10\nnb_labels = 10\n\ninput_layer = Input((None, h_features))\nlstm0 = LSTM(128, return_sequences=True)(input_layer)\nlstm1 = LSTM(128, return_sequences=True)(lstm0)\ndense = TimeDistributed(Dense(nb_labels))(lstm1)\noutput_layer = Activation(\"sigmoid\")(dense)\n\nmodel = CTCModel([input_layer], [output_layer])\nmodel.compile(optimizer=Adam(lr=1e-4))\nmodel.summary()\n\nmodel.save_model(\"./\")\n\nloaded = CTCModel(None, None)\nloaded.load_model(\"./\", optimizer=Adam(lr=1e-4))\nloaded.summary()\n```\n\n\n----------\n\n\nThe standard inputs x and y of a Keras Model, where x is the observations and y the labels, are here defined differently. In CTCModel, you must provide as x:\n\n -  the **input observations**\n -  the **labels**\n -  the **lengths of the input sequences**\n -  the **lengths of the label sequences** \n\nHere, y is not used in a standard way and must be defined for Keras methods (as the labels or an empty structure of length equal to the length of labels).\nLet *x_train*, *y_train*, *x_train_len* and *y_train_len* those terms. Fit, evaluate and predict methods can be used as follow:\n\n```\nmodel.fit(x=[x_train,y_train,x_train_len,y_train_len], y=zeros(nb_train), batch_size=64)\nprint(model.evaluate(x=[x_test,y_test,x_test_len,y_test_len], batch_size=64))\nmodel.predict([x_test, x_test_len])\n```\n\n## Example\n\nThe file example.py is an exemple of the use of CTCModel. The dataset is composed of sequence of digits. This is images from the  MNIST datasets [Lecun 98] that have been concatenated to get observation sequences and label sequences.  \nThe example shows how to use the standard fit, predict and evaluate methods. From the observation and label sequences, we create two list per dataset containing the length of each sequence, one list for the observations and one for the labels. Then data are padded in order to provide inputs of fixed-size to the Keras methods.  \n\nA standard Reccurent Neural Network with bidirectional layers is defined and trained using the *fit* method of CTCModel. Then the *evaluate* method is performed to compute the loss, the label error rate and the sequence error rate on the test set.  The output of the *evaluate* method is thus a list containing the values of each metric. Finally, the *predict* method is applied to get the predictions on the test set. The first predicted sequence are printed in order to compare the predicted labels with the ground truth.  \n\n## Under the hood\nCTCModel works by adding three additionnal output layers to a recurrent network for computing the CTC loss, decoding and evaluating using standard metrics for sequence analysis (the sequence error rate and label error rate). Each one can be applied in a blind manner, by the use of standard Keras methods such as *fit*, *predict* and *evaluate*. Note that methods based on generator have been defined and can be used in a standard way, provided that input x and label y that are return by the generator have the specific structure seen above. \n\nExcept the three specific layers, CTCModel works as a standard Keras Model and most of the overriden methods just select the right output layer and call the related Keras Model method. There is also additional methods to save or load model parameters and other ones to get specific computations, e.g. the loss using *get_loss* or the input probabilities using *get_probas* (and the related *on_batch* and *generator* methods). \n\n## Credits and licence\nCTCModel was developped at the LITIS laboratory, Normandie University (http://www.litislab.fr) by Cyprien RUFFINO and Yann SOULLARD, under the supervision of Thierry PAQUET.  \n\nCTCModel is under the terms of the MIT licence.  \n\nCTCModel is hosted on PyPI (https://pypi.org/project/keras-ctcmodel/)\n\nIf you use CTCModel for research purposes, please consider adding the following citation to your paper:\n\n<code>\n@misc{ctcmodel,\nauthor = {Soullard, Yann and Ruffino, Cyprien and Paquet, Thierry},<br/>\ntitle = {{CTCModel: Connectionist Temporal Classification in Keras}},<br/>\nyear = {2018},<br/>\nee = {https://arxiv.org/abs/1901.07957},<br/>\narchivePrefix = {arXiv}\n}\n</code>\n\n\n## References\nF. Chollet et al.. Keras: Deep Learning for Python, https://github.com/keras-team/keras, 2015.   \nA. Graves, S. Fernández, F. Gomez, J. Schmidhuber. Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks. In Proceedings of the 23rd international conference on Machine learning (pp. 369-376). ACM, June 2006.  \nLeCun, Y. (1998). The MNIST database of handwritten digits. http://yann.lecun.com/exdb/mnist/.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cyprienruffino/CTCModel",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keras-ctcmodel",
    "package_url": "https://pypi.org/project/keras-ctcmodel/",
    "platform": "",
    "project_url": "https://pypi.org/project/keras-ctcmodel/",
    "project_urls": {
      "Homepage": "https://github.com/cyprienruffino/CTCModel"
    },
    "release_url": "https://pypi.org/project/keras-ctcmodel/1.0.0rc3/",
    "requires_dist": [
      "keras",
      "tensorflow"
    ],
    "requires_python": ">=3.5",
    "summary": "Easy-to-use Connectionnist Temporal Classification in Keras",
    "version": "1.0.0rc3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8755909,
  "releases": {
    "1.0.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b49502881c7be9bc17ffb4d53e628a161fd6e9151d87b82ddac653e5276a6f06",
          "md5": "90ab52c159ce728697e07bfec77d9b5c",
          "sha256": "91bcdcf853e810ec7656aa2c44943b64c7ea7fa6c81248f145e0423fb6183378"
        },
        "downloads": -1,
        "filename": "keras_ctcmodel-1.0.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90ab52c159ce728697e07bfec77d9b5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 17511,
        "upload_time": "2020-11-26T14:27:54",
        "upload_time_iso_8601": "2020-11-26T14:27:54.210461Z",
        "url": "https://files.pythonhosted.org/packages/b4/95/02881c7be9bc17ffb4d53e628a161fd6e9151d87b82ddac653e5276a6f06/keras_ctcmodel-1.0.0rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef59d5a4978d4f73ced22a450301c1dc211cc146cff678e754734af668c0537",
          "md5": "87581723f3e4c3c6a1ac788ce031c2a1",
          "sha256": "1f51cf1f59fbafa1ac551db4fbfa4cc3c59d010d5a57b7f7c022476e948b5f1e"
        },
        "downloads": -1,
        "filename": "keras_ctcmodel-1.0.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "87581723f3e4c3c6a1ac788ce031c2a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 19327,
        "upload_time": "2020-11-26T14:27:55",
        "upload_time_iso_8601": "2020-11-26T14:27:55.426699Z",
        "url": "https://files.pythonhosted.org/packages/1e/f5/9d5a4978d4f73ced22a450301c1dc211cc146cff678e754734af668c0537/keras_ctcmodel-1.0.0rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b49502881c7be9bc17ffb4d53e628a161fd6e9151d87b82ddac653e5276a6f06",
        "md5": "90ab52c159ce728697e07bfec77d9b5c",
        "sha256": "91bcdcf853e810ec7656aa2c44943b64c7ea7fa6c81248f145e0423fb6183378"
      },
      "downloads": -1,
      "filename": "keras_ctcmodel-1.0.0rc3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90ab52c159ce728697e07bfec77d9b5c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 17511,
      "upload_time": "2020-11-26T14:27:54",
      "upload_time_iso_8601": "2020-11-26T14:27:54.210461Z",
      "url": "https://files.pythonhosted.org/packages/b4/95/02881c7be9bc17ffb4d53e628a161fd6e9151d87b82ddac653e5276a6f06/keras_ctcmodel-1.0.0rc3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ef59d5a4978d4f73ced22a450301c1dc211cc146cff678e754734af668c0537",
        "md5": "87581723f3e4c3c6a1ac788ce031c2a1",
        "sha256": "1f51cf1f59fbafa1ac551db4fbfa4cc3c59d010d5a57b7f7c022476e948b5f1e"
      },
      "downloads": -1,
      "filename": "keras_ctcmodel-1.0.0rc3.tar.gz",
      "has_sig": false,
      "md5_digest": "87581723f3e4c3c6a1ac788ce031c2a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 19327,
      "upload_time": "2020-11-26T14:27:55",
      "upload_time_iso_8601": "2020-11-26T14:27:55.426699Z",
      "url": "https://files.pythonhosted.org/packages/1e/f5/9d5a4978d4f73ced22a450301c1dc211cc146cff678e754734af668c0537/keras_ctcmodel-1.0.0rc3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}