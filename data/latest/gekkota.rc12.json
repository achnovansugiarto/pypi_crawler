{
  "info": {
    "author": "Dmitry Gritsenko",
    "author_email": "k01419q45@ya.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/courage-tci/gekkota/build.yml?branch=pub)](https://github.com/courage-tci/gekkota/actions/workflows/build.yml)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/courage-tci/gekkota/test.yml?branch=pub&label=tests)](https://github.com/courage-tci/gekkota/actions/workflows/test.yml)\n[![PyPI](https://img.shields.io/pypi/v/gekkota)](https://pypi.org/project/gekkota/)\n![PyPI - Downloads](https://pepy.tech/badge/gekkota)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/gekkota)\n[![Coveralls](https://img.shields.io/coverallsCoverage/github/courage-tci/gekkota?label=test%20coverage)](https://coveralls.io/github/courage-tci/gekkota?branch=pub)\n![License](https://img.shields.io/github/license/courage-tci/gekkota)\n![Badge Count](https://img.shields.io/badge/badges-8-important)\n\nThis is a Python code-generation module.    \n\n- Generates any Python statement/expression\n- Places parens to ensure expression priorities are unchanged\n- Places extra newlines before/after class/function definitions to conform with PEP 8\n- 100% coverage of type hints, passing MyPy with `--disallow-any-expr`\n- Meaningful type hierarchy inspired by Python grammar\n- Covered with ~~diamonds~~ tests completely \n\n## Installation\n\nJust install `gekkota` package, e.g. with `python -m pip install gekkota` (or any other package manager of your choice)\n\n## Rendering and configuration\n\nTo render any `Renderable` into a string, you could use a few approaches:\n\n- `str(renderable)`: renders a Renderable with default configuration (check below)\n- `renderable.render_str()`: also default configuration\n- `renderable.render_str(config)`: overrides default config options with provided in `config` mapping. Unspecified keys remain at default values\n\nHere is current default config:\n```python\ndefault_config: Config = {\n    \"tab_size\": 4,  # how much chars to use in indentation\n    \"compact\": False,  # if True, renders without redundant whitespace (e.g \"for [i, e] in enumerate(a)\" renders as \"for[i,e]in enumerate(a)\")\n    \"tab_char\": \" \",  # character used for indentation\n    # \"place_semicolons\" and \"inline_small_stmts\" options have some performance impact, since those require checking for newlines in token stream before re-streaming tokens.\n    # this impact is probably negligible, but be aware of it\n    \"place_semicolons\": False,  # if True, semicolons are placed after one-line statements\n    \"inline_small_stmts\": False,  # if True, one-line statements are inlined. Overrides \"place_semicolons\" if True.\n}\n```\n\n\n## Expressions\n\n### Basic expressions\n\nYour starting points would be `to_expression` and `Name`:\n\n```python\nfrom gekkota import Name, to_expression\n\n# Name(name: str, annotation: Optional[Expression] = None)\n# to_expression(value: int | float | complex | str | bytes | bool | None)\n\na = Name(\"a\")\nb = Name(\"b\")\nsix = to_expression(6)\n\n# prints 'a + b * 6'\nprint(\n    (a + b * six)\n)\n\n```\n\n`Name`, as many other classes in the module, is an `Expression` instance\n\nExpressions support most operations to combine with other expressions.    \nExceptions are:\n\n- Attribute reference: for that you should use `Expression.getattr(other: str)`\n- Indexing: `Expression.index(index: Expression)`\n- Slicing: `Expression.index(index: Union[SliceExpr, Sequence[SliceExpr]])`\n- Equality / Inequality: `Expression.eq(right_hand_side)` and `Expression.neq(right_hand_side)` respectively\n- `is`: `Expression.is_(right_hand_side)`,\n- `is not`: `Expression.is_not(right_hand_side)`\n- `in`: `Expression.in_(right_hand_side)`\n- `not in`: `Expression.not_in(right_hand_side)`\n- `and`: `Expression.and_(right_hand_side)`\n- `or`: `Expression.or_(right_hand_side)`\n- `await`: `Expression.await_()`\n- `:=` assignment: `Expression.assign(value)`\n- Ternary operator: `Expression.if_(condition, alternative)`\n\nFor example:\n\n```python\nfrom gekkota import Name\n\na = Name(\"a\")\nb = Name(\"b\")\n\nexpression = a.await_().in_(b)\n\nprint(expression) # await a in b\n\n```\n\nFor any other operation on expressions you can just use familiar Python syntax:\n\n```python\nfrom gekkota import Name\n\na = Name(\"a\")\nb = Name(\"b\")\nc = Name(\"c\")\n\nprint(\n    (a + b * c / a(b, c)) # 'a + b * c / a(b, c)'\n)\n\n```\n\n### Sequences\n\nMost convenient way to create sequence literals is, again, `to_expression`:\n\n```python\nfrom gekkota import to_expression, Name\n\na = Name(\"a\")\nb = Name(\"b\")\n\nprint(\n    to_expression( (a, b, 6) ), # '(a, b, 6)' (notice that to_expression is recursive)\n    to_expression( (a, ) ),     # '(a, )'\n    to_expression([a, b]),      # '[a, b]'\n    to_expression([]),          # '[]'\n    to_expression({a: b}),      # '{a: b}'\n    to_expression(set()),       # 'set()'\n    to_expression([a, [a, b]]), # '[a, [a, b]]'\n)\n```\n\nIf you want to have more precise control, you can use `TupleExpr`, `ListExpr`, `SetExpr` and `DictExpr` for this.\nAll have same constructor signature: `(values: Sequence[Expression])` (except `DictExpr`, which has `KeyValue` values)\n\nTo create comprehensions:\n\n```python\nfrom gekkota import Name, GeneratorFor, GeneratorIf\nfrom gekkota import (\n    ListComprehension,\n    DictComprehension,\n    KeyValue,\n    SetComprehension, # same usage as ListComprehension\n)\n\na, b, c, d = map(Name, \"abcd\")\n\n# ListComprehension(generator_or_expr: GeneratorBase | Expression, parts: Sequence[GeneratorPart] = ())\nprint(\n    ListComprehension(\n        a, \n        [\n            # GeneratorFor(target: AssignmentTarget, iterator: Expression, *, is_async: bool = False)\n            GeneratorFor(b, c), \n            \n            # GeneratorIf(condition: Expression)\n            GeneratorIf(b.eq(d))\n        ]\n    )\n) # [a for b in c if b == d]\n\n# DictComprehension(generator_or_expr: GeneratorBase | KeyValue, parts: Sequence[GeneratorPart] = ())\n# GeneratorPart == GeneratorFor | GeneratorIf\nprint(\n    DictComprehension(KeyValue(a, b), [GeneratorFor(c, d), GeneratorIf(b.eq(d))])\n) # {a: b for c in d if b == d}\n\n```\n\n### Keyword call args\n\nUse `CallArg` to provide keyword call args:\n\n```python\nfrom gekkota import Name, to_expression\n\nprint_ = Name(\"print\")\n\n# CallArg(name: str, value: Optional[Expression] = None)\nprint(\n    print_(\n        Name(\"a\"),\n        CallArg(\"b\"),\n        CallArg(\"sep\", to_expression(\", \"))\n    )\n) # print(a, b, sep=', ')\n\n```\n\n### Type hints\n\nTo annotate a name, just pass an additional parameter to `Name`:\n\n```python\nfrom gekkota import Name\n\na = Name(\"a\", Name(\"int\"))\n\nprint(a) # a: int\n\n```\n\nBe aware that this usage is not restricted to valid places at the moment. For example:\n\n```python\nfrom gekkota import Name\n\na = Name(\"a\", Name(\"int\"))\n\n# doesn't produce any typecheck errors\nprint(a + a) # a: int + a: int\nprint(Name(\"b\", Name(\"a\", Name(\"int\")))) # b: a: int\n```\n\nThis would probably be fixed in the future in some way.\nAnnotations for other code (namely function args and return types) is described in relevant sections.\n\n## Statements\n\nTo render program code (with multiple statements), use `Code`:\n\n```python\nfrom gekkota import Code, Assignment, Name\n\na = Name(\"a\")\n\nsix = Literal(6)\n\ncreate_variable = Assignment(\n    [Name(\"a\")], \n    six + six\n)\n\nprint_variable = Name(\"print\")(a)\n\nprint(\n    Code([\n        create_variable,\n        print_variable,\n    ])\n)\n# prints:\n# a = 6 + 6\n# print(a)\n\n```\n\nTo render a block of code, use `Block`:\n\n```python\nfrom gekkota import Block, IfStmt, Assignment, Name\n\na = Name(\"a\")\nb = Name(\"b\")\n\nsix = Literal(6)\n\ncreate_variable = Assignment(\n    [Name(\"a\")], \n    six + six\n)\n\nprint_variable = Name(\"print\")(a)\n\nprint(\n    IfStmt(\n        b, \n        Block([\n            create_variable,\n            print_variable,\n        ])\n    )\n)\n# prints:\n# if b:\n#     a = 6 + 6\n#     print(a)\n\n```\n\nIf the difference between two is not obvious: `Code` just renders statements on separate lines, while block also adds a newline before the first statement and indentation to every line.\nMoreover, `Code([])` renders into `\"\"`, while `Block([])` â€” into `\"\\n    pass\"`\n\n\n### Small statements\n\nHere is an example of a few small statements:\n\n```python\nfrom gekkota import Name, SequenceExpr\nfrom gekkota import (\n    ReturnStmt, \n    DelStmt, \n    AssertStmt, \n    BreakStmt, \n    ContinueStmt, \n    YieldStmt, \n    YieldFromStmt, \n    NonLocalStmt, \n    GlobalStmt, \n    PassStmt, \n    RaiseStmt, \n    AsyncStmt\n)\n\na, b, c = map(Name, \"abc\")\n\nprint(ReturnStmt(a)) # 'return a'\n\nprint(YieldStmt(a)) # 'yield a'\nprint(YieldFromStmt(b)) # 'yield from b'\n\nprint(DelStmt(a, b)) # 'del a, b'\n\nprint(AssertStmt(a)) # 'assert a'\n\nprint(BreakStmt()) # 'break'\n\nprint(ContinueStmt()) # 'continue'\n\nprint(GlobalStmt(a, b)) # 'global a, b'\nprint(NonLocalStmt(a, b)) # 'nonlocal a, b'\n\nprint(PassStmt()) # 'pass'\n\nprint(RaiseStmt()) # 'raise' \nprint(RaiseStmt(a)) # 'raise a'\nprint(RaiseStmt(a, b)) # 'raise a from b'\n```\n\n### Assignment\n\nFor common assigment use `Assignment`:\n\n```python\nfrom gekkota import Assignment, Name\n\na, b, c = map(Name, \"abc\")\n\n# Assignment(targets: Sequence[AssignmentTarget] | AnnotatedTarget, value: Expression)\n\nprint(\n    Assignment([a], b), # a = b\n    Assignment([a.index(b)], c) # a[b] = c\n    Assignment([a, b], c), # a = b = c\n)\n\n```\n\nTo annotate assignment (or just annotate a variable), use `AnnotatedTarget`:\n\n```python\n\nfrom gekkota import Assignment, AnnotatedTarget, Name\n\na, b, c = map(Name, \"abc\")\nD = Name(\"D\")\n\n# AnnotatedTarget(target: AssignmentTarget, annotation: Expression)\nprint(\n    Assignment(AnnotatedTarget(a, D), b), # a: D = b\n    Assignment(AnnotatedTarget(a.index(b), D), c) # a[b]: D = c\n    Assignment([a, b], c), # a = b = c\n)\n\n```\n\nFor augmented assignment (e.g. `+=`) use `AugmentedAssignment`:\n\n```python\nfrom gekkota import Assignment, Name\n\na, b, c = map(Name, \"abc\")\n\n# AugmentedAssignment(target: AugAssignmentTarget, op: str, expression: Expression)\n\nprint(\n    AugmentedAssignment(a, \"+=\", b), # a += b\n    AugmentedAssignment(a.index(b), \"*=\", c) # a *= c\n)\n\n```\n\n### Control flow\n\nFor control flow you can use `IfStmt`, `ElifStmt` and `ElseStmt`:\n\n```python\nfrom gekkota import Name, IfStmt, ElifStmt, ElseStmt, Code\n\na, b, c = map(Name, \"abc\")\n\n# IfStmt(condition: Expression, body: Statement)\n# ElifStmt(condition: Expression, body: Statement)\n# ElseStmt(body: Statement)\ncode = Code([\n    IfStmt(a, b),\n    ElifStmt(b, a),\n    ElseStmt(c)\n])\n\nprint(code)\n\"\"\"\nif a: b\nelif b: a\nelse: c\n\"\"\"\n```\n\n### Loops\n\nUse `ForStmt` and `WhileStmt` for loops:\n\n```python\nfrom gekkota import ForStmt, WhileStmt, Name\n\na, b, c = map(Name, \"abc\")\n\n# ForStmt(target: Expression, iterator: Expression, body: Statement, *, is_async: bool = False)\nprint(\n    ForStmt(a, b, c)\n) # for a in b: c\n\n# WhileStmt(condition: Expression, body: Statement)\nprint(\n    WhileStmt(a, b)\n) # while a: b\n```\n\n### Functions\n\nTo render a function definition, you will need a `FuncDef`:\n\n```python\nfrom gekkota import Name, FuncDef\n\na, b, c = map(Name, \"abc\")\n\n# FuncDef(name: str, args: Sequence[FuncArg], body: Statement, *, rtype: Optional[Expression] = None, is_async: bool = False)\nprint(\n    FuncDef(\n        \"cool_func\",\n        [a],\n        b,\n        rtype=c,\n    )\n) # def cool_func(a) -> c: b\n```\n\nTo provide a default value and/or annotations to arguments, use `FuncArg`:\n\n```python\n\nfrom gekkota import Name, FuncDef, FuncArg, to_expression\n\na, b, c = map(Name, \"abc\")\n\n# FuncDef(name: str, args: Sequence[FuncArg], body: Statement, *, rtype: Optional[Expression] = None, is_async: bool = False)\n# FuncArg(name: str, annotation: Optional[Expression] = None, default_value: Optional[Expression] = None)\nprint(\n    FuncDef(\n        \"cool_func\",\n        [\n            FuncArg(\n                \"a\", \n                Name(\"int\"), \n                to_expression(0)\n            )\n        ],\n        b,\n        rtype=c,\n    )\n) # def cool_func(a: int = 0) -> c: b\n\n```\n\nOther argument types are:\n\n- `StarArg(value: T = None)`: generates `*value`, `*` by default\n- `DoubleStarArg(value)`: same as `StarArg`, but with `**`\n- `Slash()` is `/` (a mark of positional-only arguments in Python 3.8+)\n\nLambda functions are generated using `LambDef`:\n\n```python\nfrom gekkota import Name, LambDef\n\na, b, c = map(Name, \"abc\")\n\n# LambDef(args: Sequence[FuncArg], body: Expression)\nprint(\n    LambDef(\n        [a],\n        b,\n    )\n) # lambda a: b\n```\n\nTo decorate a function/class, use `Decorated`:\n\n```python\nfrom gekkota import Name, FuncDef, Decorated\n\ndecorator = Name(\"decorator\")\na, b, c = map(Name, \"abc\")\n\n# Decorated(decorator: Expression, statement: ClassDef | FuncDef)\n# FuncDef(name: str, args: Sequence[FuncArg], body: Statement, *, rtype: Optional[Expression] = None, is_async: bool = False)\nprint(\n    Decorated(\n        decorator,\n        FuncDef(\n            \"cool_func\",\n            [a],\n            b,\n            rtype=c,\n        )\n    )\n)\n# @decorator\n# def cool_func(a) -> c: b\n```\n\n### Classes\n\nTo define a class, use `ClassDef`:\n\n```python\nfrom gekkota import Name, ClassDef\n\na, b, c = map(Name, \"abc\")\n\n# ClassDef(name: str, args: Sequence[CallArg | Expression], body: Statement)\nprint(\n    ClassDef(\"MyClass1\", [], a)\n) # class MyClass1: a\n\nprint(\n    ClassDef(\"MyClass2\", [b], c)\n) # class MyClass2(b): c\n\n```\n\n### Imports\n\nTo render imports, use `ImportStmt` and `FromImportStmt`:\n\n```python\nfrom gekkota import Name, StarArg, ImportDots, ImportSource, ImportStmt, FromImportStmt, ImportAlias\n\n\n# ImportStmt(names: Sequence[ImportAlias | Name | StarArg[None]])\nprint(\n    ImportStmt([Name(\"a\")])\n) # import a\n\nprint(\n    ImportStmt([Name(\"a\"), Name(\"b\")])\n) # import a, b\n\n# FromImportStmt(source: ImportSource | Name, names: Sequence[ImportAlias | Name | StarArg[None]])\n# ImportAlias(name: Name, alias: Name | None = None)\nprint(\n    FromImportStmt(\n        Name(\"math\"), \n        [\n            Name(\"cos\"), \n            ImportAlias(Name(\"sin\"), Name(\"tan\")) # we do a little trolling\n        ]\n    )\n) # from math import cos, sin as tan\n\nprint(\n    FromImportStmt(\n        Name(\"gekkota\"),\n        [StarArg()]\n    )\n) # from gekkota import *\n\n# ImportDots(length: int = 1)\nprint(\n    FromImportStmt(\n        ImportDots(),\n        [StarArg()]\n    )\n) # from . import *\n\n# ImportSource(parts: Sequence[str])\nprint(\n    FromImportStmt(\n        ImportSource([\"\", \"values\"]),\n        [Name(\"Name\")]\n    )\n) # from .values import Name\n\n```\n\n### Exceptions\n\n```python\nfrom gekkota import Name, TryStmt, ExceptStmt, FinallyStmt, Block\n\na, b, e = map(Name, \"abe\")\n\n# TryStmt(body: Statement)\nprint(\n    TryStmt(a)\n) # try: a\n\n# ExceptStmt(exceptions: Sequence[Expression] | None, alias: Name | None, body: Statement)\nprint(\n    ExceptStmt(None, None, a)\n) # except: a\n\nprint(\n    ExceptStmt(None, None, Block([]))\n) \n# except:\n#     pass\n\nprint(\n    ExceptStmt([a], None, b)\n) # except a: b\n\nprint(\n    ExceptStmt([a], e, b)\n) # except a as e: b\n\n# FinallyStmt(body: Statement)\nprint(\n    FinallyStmt(a)\n) # finally: a\n\n```\n\n### Context Managers\n\n```python\nfrom gekkota import Name, WithStmt, WithTarget\n\na, b, e = map(Name, \"abe\")\n\n# WithStmt(targets: Sequence[WithTarget | Expression], body: Statement, *, is_async: bool = False,)\nprint(\n    WithStmt([a], b)\n) # with a: b\n\n# WithTarget(expression: Expression, alias: str | None = None)\nprint(\n    WithStmt([WithTarget(a, \"aaaa\")], b)\n) # with a as aaaa: b\n\nprint(\n    WithStmt([a], b, is_async=True)\n) # async with a: b\n\n```\n\n### Pattern matching\n\nThis section is currently unfinished, check [pattern_matching.py](https://github.com/courage-tci/gekkota/blob/pub/gekkota/pattern_matching.py)\n\n## Custom rendering\n\nIf your custom element can be meaningfully represented as a combination of existing elements, you can use a function instead of a class:\n\n```python\nfrom gekkota import Expression\n\ndef Square(e: Expression) -> Expression:\n    return e * e\n\n```\n\nThis is a pretty obvious approach, but often it works best.\n\n---\n\nWhile being aimed at Python code generation, `gekkota` is pretty extensible, and can be used to render different things.    \nYou can build custom renderables, statements, expressions, and so on.    \n\nThe simplest example of a custom renderable would be:\n\n```python\nfrom gekkota import Renderable, StrGen, Config\n\n\nclass RenderString(Renderable):\n    \"\"\"It renders whatever is passed to it\"\"\"\n\n    def __init__(self, value: str):\n        self.value = value\n\n    def render(self, config: Config) -> StrGen:\n        yield self.value\n```\n\nLet's suppose you want to render a custom expression: a custom sequence literal (obviously isn't valid in Python, but you need it for some reason).    \nSuppose your custom literal would be in form of `<|value1, value2, ...|>`.\n\nYou can extend `SequenceExpr` for that:\n\n```python\nfrom gekkota import SequenceExpr, Name\n\nclass MyCoolSequence(SequenceExpr):\n    parens = \"<|\", \"|>\"\n\n\nseq = MyCoolSequence([Name(\"a\"), Name(\"b\")])\n\nprint(seq) # <|a,b|>\n\n```\n\nThat's it, you're ready to render this literal (which, again, isn't valid in Python but anyway).\n\nOr you could go further and write rendering by yourself (it's easier than it sounds):\n\n```python\nfrom gekkota import Expression, Config\n\n\nclass MyCoolSequence(Expression):\n    def __init__(self, values: Sequence[Expression]):\n        self.values = values\n\n    # could be rewritten to be simpler, check `Useful utils` section below\n    def render(self, config: Config) -> StrGen:\n        yield \"<|\"\n\n        for i, item in enumerate(self.values):\n            yield from item.render(config)\n\n            if i + 1 < len(self.values): # no comma after last element\n                yield \",\"\n                yield \" \"\n\n        yield \"|>\"\n```\n\nIt's fairly easy, just render every part in the right order:\n\n- To render a string, use `yield string`\n- To render a `Renderable`, use `yield from renderable.render(config)`\n\n\n### Choosing a right base class\n\nTo choose a right base class, think in what context you want to use your renderable.    \nIf there is a similar context in Python (e.g. your renderable is a block statement, like `for` or `if`), extend that class.    \n\nAfter choosing a right base class, check if it has a predefined render, maybe you won't need to write everything by yourself.    \nFor example, with `BlockStmt` you need to provide `render_head` instead:\n\n```python\n# that's the actual source from module, not an example\n\nclass BlockStmt(Statement):\n    body: Statement\n\n    def render_head(self, config: Config) -> StrGen:\n        return NotImplemented\n\n    def render(self, config: Config) -> StrGen:\n        yield from self.render_head(config)\n        yield \":\"\n        yield \" \"\n        yield from self.body.render(config)\n\n[...]\n\nclass ElseStmt(BlockStmt):\n    def __init__(self, body: Statement):\n        self.body = body\n\n    def render_head(self, config: config) -> StrGen:\n        yield \"else\"\n```\n\n### Useful utils\n\n`gekkota.utils` provides `Utils` class which is useful for custom renderables. For example, custom `MyCoolSequence` could be implemented as:\n\n```python\nfrom gekkota import Expression, Utils\n\n\nclass MyCoolSequence(Expression):\n    def __init__(self, values: Sequence[Expression]):\n        self.values = values\n\n    def render(self, config: config) -> StrGen:\n        yield from Utils.wrap(\n            [\"<|\", \"|>\"],\n            Utils.comma_separated(self.values, config)\n        )\n```\n\nMethods provided in `Utils`:\n\n- `add_tab(generator: StrGen, config: Config) -> StrGen`    \n    Adds indentation to a stream of tokens, using provided `config`    \n    For example, `Utils.add_tab(Name(\"a\").render(config), config)` -> Iterable of ['    ', 'a']\n\n- `separated(separator: Sequence[str], renderables: Sequence[Renderable], config: Config) -> StrGen`    \n    Inserts separator between renderables (and renders them in stream)    \n    For example: `Utils.separated([\",\", \" \"], self.values, config)` - inserts \", \" between elements of `self.values`    \n\n- `separated_str(separator: Sequence[str], strings: Sequence[str], config: Config)`    \n    Same as previous, but for `str` sequences\n\n- `comma_separated(renderables: Sequence[Renderable], config: Config) -> StrGen`    \n    Alias for `Utils.separated([\",\", \" \"], renderables, config)`\n\n- `make_compact(generator: StrGen, config: Config) -> StrGen`    \n    Filters all unneccessary whitespace from stream (doesn't respect `config[\"compact\"]`). Config is unused at the moment, but provided for compatibility with future updates\n\n- `wrap(parens: Sequence[str], generator: StrGen) -> StrGen`    \n    Wraps a token stream with strings from `parens` array (should have 2 elements).    \n    In other words, inserts `parens[0]` at the start of the stream, and `parens[1]` at the end",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/courage-tci/gekkota",
    "keywords": "codegen",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gekkota",
    "package_url": "https://pypi.org/project/gekkota/",
    "platform": null,
    "project_url": "https://pypi.org/project/gekkota/",
    "project_urls": {
      "Homepage": "https://github.com/courage-tci/gekkota",
      "Repository": "https://github.com/courage-tci/gekkota"
    },
    "release_url": "https://pypi.org/project/gekkota/0.5.1/",
    "requires_dist": [
      "typing-extensions (>=4.4.0,<5.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Python code-generation for Python",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16234222,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b25d3f5bf694cbc498883c68ba733d0d70001be0c703dd67ab0dd726c846ffb2",
          "md5": "94773ceeea8744ec5e0040eff47995b7",
          "sha256": "167dbb774f3ba4456bf009f4866b885fe8f39a5e2e7ee362d8494a699d23745a"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94773ceeea8744ec5e0040eff47995b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 6222,
        "upload_time": "2022-07-25T18:26:59",
        "upload_time_iso_8601": "2022-07-25T18:26:59.290678Z",
        "url": "https://files.pythonhosted.org/packages/b2/5d/3f5bf694cbc498883c68ba733d0d70001be0c703dd67ab0dd726c846ffb2/gekkota-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "682ffdc5cc5ea9e65ca8175d0d1e1eaeb35c231df28794711bf89a510e8f300e",
          "md5": "d69f83a422b6b5660c4ca464e7c83424",
          "sha256": "58791681ce0020b7c267747c67a31eb0130ffdb02acd72c37a897557306cae71"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d69f83a422b6b5660c4ca464e7c83424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5960,
        "upload_time": "2022-07-25T18:27:00",
        "upload_time_iso_8601": "2022-07-25T18:27:00.945611Z",
        "url": "https://files.pythonhosted.org/packages/68/2f/fdc5cc5ea9e65ca8175d0d1e1eaeb35c231df28794711bf89a510e8f300e/gekkota-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83e5bb93fece55bc4aaf4736a70d2ee928b61c88b4521597d10d76cb97c18e3b",
          "md5": "b52de812429625d227f108ba6cd6df73",
          "sha256": "2e2d949a465861a8a68f4ea1ffeaacd530fff674b1e68dd11deb41824068c287"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b52de812429625d227f108ba6cd6df73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7732,
        "upload_time": "2022-07-25T18:29:43",
        "upload_time_iso_8601": "2022-07-25T18:29:43.433073Z",
        "url": "https://files.pythonhosted.org/packages/83/e5/bb93fece55bc4aaf4736a70d2ee928b61c88b4521597d10d76cb97c18e3b/gekkota-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e16aadb1c1724cae8e2a38698bbcf050f7cf65455a5140f7b1e5ad95beee62c",
          "md5": "5565f724d9d4da21a8793edd29fd04d0",
          "sha256": "b924d2197d21450310cefb2bfa17f6291d45b15e4ef1ec3a1d6079f9ae5fb87d"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5565f724d9d4da21a8793edd29fd04d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8245,
        "upload_time": "2022-07-25T18:29:45",
        "upload_time_iso_8601": "2022-07-25T18:29:45.340906Z",
        "url": "https://files.pythonhosted.org/packages/1e/16/aadb1c1724cae8e2a38698bbcf050f7cf65455a5140f7b1e5ad95beee62c/gekkota-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "235c89aa5509b9acfc7e1708e53644896f77910d1b3d729ac1e4ac1f0c4deeb2",
          "md5": "d50208d05635cc3d6872e0f07417fa46",
          "sha256": "fe0af1e3c16736945a4cee0a3afd30a9bbe3a3d3594bbd539ef411d9f53313ba"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d50208d05635cc3d6872e0f07417fa46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7589,
        "upload_time": "2022-07-25T19:33:07",
        "upload_time_iso_8601": "2022-07-25T19:33:07.290827Z",
        "url": "https://files.pythonhosted.org/packages/23/5c/89aa5509b9acfc7e1708e53644896f77910d1b3d729ac1e4ac1f0c4deeb2/gekkota-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1411648a70e66a7fc6cd8ffabcaffa66e47ce1acf909a7a7c3018be47c21592f",
          "md5": "dcf8dec11ac5ef0d2517081eb475532a",
          "sha256": "680517fa6d3557b810ad7b7345c63177b20006d7f709a28d67ee2c8b528617a7"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dcf8dec11ac5ef0d2517081eb475532a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9039,
        "upload_time": "2022-07-25T19:33:08",
        "upload_time_iso_8601": "2022-07-25T19:33:08.882376Z",
        "url": "https://files.pythonhosted.org/packages/14/11/648a70e66a7fc6cd8ffabcaffa66e47ce1acf909a7a7c3018be47c21592f/gekkota-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01cd66dcc70158b5211d3a3bb9509b5cb15cae4034e8fcb2d3bb596747d039fc",
          "md5": "c1a3b059f3fd5b85118a1089ae904cc8",
          "sha256": "62f840eba30270da38fb19dd2a75d860a018bed067070ce33b2029702b02e13b"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1a3b059f3fd5b85118a1089ae904cc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7592,
        "upload_time": "2022-07-25T19:35:20",
        "upload_time_iso_8601": "2022-07-25T19:35:20.716153Z",
        "url": "https://files.pythonhosted.org/packages/01/cd/66dcc70158b5211d3a3bb9509b5cb15cae4034e8fcb2d3bb596747d039fc/gekkota-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cab9650fd9b8bf8859afae12d2a3dc2dd8578f83c21b59d9542572abe281126b",
          "md5": "a1ab270d925be37ca82d569c89a85df1",
          "sha256": "7506d67ee6aa176bc96f9e9cdb5e4af3e97d00e0f43f3838bd498f28af1f639b"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a1ab270d925be37ca82d569c89a85df1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 8998,
        "upload_time": "2022-07-25T19:35:21",
        "upload_time_iso_8601": "2022-07-25T19:35:21.835712Z",
        "url": "https://files.pythonhosted.org/packages/ca/b9/650fd9b8bf8859afae12d2a3dc2dd8578f83c21b59d9542572abe281126b/gekkota-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c10d40489c7cc692d227431ccccb0f7ba9e8e51ced7d081f415171495ba7327b",
          "md5": "8b1589adafcc615390fe4749192e4d13",
          "sha256": "3056a5ad85e9171f205c804cf023daedd6bf67bcf8ce7823a7cb095ce99f7108"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b1589adafcc615390fe4749192e4d13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7585,
        "upload_time": "2022-07-26T16:46:06",
        "upload_time_iso_8601": "2022-07-26T16:46:06.827171Z",
        "url": "https://files.pythonhosted.org/packages/c1/0d/40489c7cc692d227431ccccb0f7ba9e8e51ced7d081f415171495ba7327b/gekkota-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c121593d04ad116108b6a681624950cadd879ac081344dc956529f5669086068",
          "md5": "667c61261a9a23b5fa983a95a9a8f115",
          "sha256": "9830444b27eee37a05911a04d63e5dc18fe53cb2899879d5be782f6bc7028233"
        },
        "downloads": -1,
        "filename": "gekkota-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "667c61261a9a23b5fa983a95a9a8f115",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9004,
        "upload_time": "2022-07-26T16:46:08",
        "upload_time_iso_8601": "2022-07-26T16:46:08.067676Z",
        "url": "https://files.pythonhosted.org/packages/c1/21/593d04ad116108b6a681624950cadd879ac081344dc956529f5669086068/gekkota-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ffb3161d62a21bc983ab43f191b9337e4ec5954640a3b2dfef161fd3b91d8d2",
          "md5": "bd9fa3d2e095fc2087ad70f06931b387",
          "sha256": "7de19d60d6c40aec32bc8ce05e1858209c574f7de098cebdeb22652dba0796f3"
        },
        "downloads": -1,
        "filename": "gekkota-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd9fa3d2e095fc2087ad70f06931b387",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7615,
        "upload_time": "2022-07-26T20:59:50",
        "upload_time_iso_8601": "2022-07-26T20:59:50.113506Z",
        "url": "https://files.pythonhosted.org/packages/7f/fb/3161d62a21bc983ab43f191b9337e4ec5954640a3b2dfef161fd3b91d8d2/gekkota-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "728e9fbf1db1e45479b5c106c04c40d7b217fc9e1dfb54dbf1dc4a291e36a204",
          "md5": "ffe777fc914ac4ae9ee1ac9734ec957d",
          "sha256": "0e44c109b41c25f9aacda763fe06206dbd28aee81c94fd47e011f5464645f50c"
        },
        "downloads": -1,
        "filename": "gekkota-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ffe777fc914ac4ae9ee1ac9734ec957d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9022,
        "upload_time": "2022-07-26T20:59:51",
        "upload_time_iso_8601": "2022-07-26T20:59:51.714928Z",
        "url": "https://files.pythonhosted.org/packages/72/8e/9fbf1db1e45479b5c106c04c40d7b217fc9e1dfb54dbf1dc4a291e36a204/gekkota-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41a7bfa0086d1017befaff122ded5e7d65c96c368ffd904d6e17215e97ae9688",
          "md5": "dbef937e0a1d9f6f7f0fa677f9542727",
          "sha256": "d87e8810426e4f7686f28bc0fb083979f33072cff2f4ebc224762c9467296123"
        },
        "downloads": -1,
        "filename": "gekkota-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbef937e0a1d9f6f7f0fa677f9542727",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7843,
        "upload_time": "2022-07-26T22:02:23",
        "upload_time_iso_8601": "2022-07-26T22:02:23.230583Z",
        "url": "https://files.pythonhosted.org/packages/41/a7/bfa0086d1017befaff122ded5e7d65c96c368ffd904d6e17215e97ae9688/gekkota-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f804de386887ad247c23b530599cd0a8e3802bdb47cbb6e0da9bac388324bb",
          "md5": "3c77133abacc73e5be4e9874ccdbbace",
          "sha256": "10977845015e788720c327c7825c36c05389b7d2caee0fe7c0c5d391abfb62d1"
        },
        "downloads": -1,
        "filename": "gekkota-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3c77133abacc73e5be4e9874ccdbbace",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 9245,
        "upload_time": "2022-07-26T22:02:24",
        "upload_time_iso_8601": "2022-07-26T22:02:24.550787Z",
        "url": "https://files.pythonhosted.org/packages/80/f8/04de386887ad247c23b530599cd0a8e3802bdb47cbb6e0da9bac388324bb/gekkota-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e09c42f14ca8f4d371269d50166415349084db6fde410071a48ecf99096d85b0",
          "md5": "977e622da0cac56793ca3002dd4ba4b2",
          "sha256": "f2b5df9f673ab8d693728f44ab55ac9ed3025e75d243345a3ae9f726831d95a9"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "977e622da0cac56793ca3002dd4ba4b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 24220,
        "upload_time": "2022-12-18T02:38:10",
        "upload_time_iso_8601": "2022-12-18T02:38:10.359958Z",
        "url": "https://files.pythonhosted.org/packages/e0/9c/42f14ca8f4d371269d50166415349084db6fde410071a48ecf99096d85b0/gekkota-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0738fdb2e20536b115ba6be98ce83378a4f556e442782e714c28cbbba7171392",
          "md5": "605600ed0482f2b2da7033a0e08fcaa2",
          "sha256": "89447fd80f78893cc632091345df8a9506358ad8194ce9dd1ca6c43e834b7722"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "605600ed0482f2b2da7033a0e08fcaa2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 24956,
        "upload_time": "2022-12-18T02:38:11",
        "upload_time_iso_8601": "2022-12-18T02:38:11.993218Z",
        "url": "https://files.pythonhosted.org/packages/07/38/fdb2e20536b115ba6be98ce83378a4f556e442782e714c28cbbba7171392/gekkota-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b849185250789831f032b132399fc86576cd23d0c42e1ea0326a69e5f3db9b",
          "md5": "3efc76d2f66ba5b26af2b82e562a8d78",
          "sha256": "55b63029c54ccbc7c53ddda9f3cf64cbff95e2e5aafe815649fc8a54631a392e"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3efc76d2f66ba5b26af2b82e562a8d78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 24236,
        "upload_time": "2022-12-18T02:47:34",
        "upload_time_iso_8601": "2022-12-18T02:47:34.205551Z",
        "url": "https://files.pythonhosted.org/packages/21/b8/49185250789831f032b132399fc86576cd23d0c42e1ea0326a69e5f3db9b/gekkota-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3c19a0771d2218a4d642de29ea42960476222bfb3f1b224e622f249679eb67b",
          "md5": "d80055c6f3636d946b4189f450f6f946",
          "sha256": "0ed005c089a32d10bab92fa54d941c9e45c72f82cb9b8d3ef50d3453ab5a0d86"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d80055c6f3636d946b4189f450f6f946",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 24996,
        "upload_time": "2022-12-18T02:47:35",
        "upload_time_iso_8601": "2022-12-18T02:47:35.312283Z",
        "url": "https://files.pythonhosted.org/packages/c3/c1/9a0771d2218a4d642de29ea42960476222bfb3f1b224e622f249679eb67b/gekkota-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75aec919fb972d244065ee3a0688f55e4f1450eff44b144977e9e07d5b27814c",
          "md5": "0a80caec4d057f21fe28867fb75dbf4f",
          "sha256": "dd7b7b4a99a58699659c15f3293f7245aa9118441a9c68d35ea033250fac2e9e"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a80caec4d057f21fe28867fb75dbf4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 24317,
        "upload_time": "2022-12-18T04:22:52",
        "upload_time_iso_8601": "2022-12-18T04:22:52.452120Z",
        "url": "https://files.pythonhosted.org/packages/75/ae/c919fb972d244065ee3a0688f55e4f1450eff44b144977e9e07d5b27814c/gekkota-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1c9804ee66f8b14ca4bcd71489f82636b3b33a2199213754744d33b09db7a92",
          "md5": "3a2ae5f2eee466e7f3455258bc6e6f68",
          "sha256": "4c9005a5c5902180e0b32a6dc8ace28c80026336527cf87029c2111343b793b9"
        },
        "downloads": -1,
        "filename": "gekkota-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3a2ae5f2eee466e7f3455258bc6e6f68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25152,
        "upload_time": "2022-12-18T04:22:54",
        "upload_time_iso_8601": "2022-12-18T04:22:54.368108Z",
        "url": "https://files.pythonhosted.org/packages/c1/c9/804ee66f8b14ca4bcd71489f82636b3b33a2199213754744d33b09db7a92/gekkota-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a49cb3c0a387ae23bc84454fb995ca1a9ccce175412708357286e29e9b39d8c3",
          "md5": "09cfa04d47fa00ec9ad38137b68bf85c",
          "sha256": "cfd2f372b9a3e343f2f1ae1e3cace1ec7279741b1ce9f998e0500c11c0c5eb24"
        },
        "downloads": -1,
        "filename": "gekkota-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09cfa04d47fa00ec9ad38137b68bf85c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 24500,
        "upload_time": "2022-12-19T19:01:32",
        "upload_time_iso_8601": "2022-12-19T19:01:32.799560Z",
        "url": "https://files.pythonhosted.org/packages/a4/9c/b3c0a387ae23bc84454fb995ca1a9ccce175412708357286e29e9b39d8c3/gekkota-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a2f81e052e306112820659b4c20628a8bcb2273ffced1aaca8832e0fdbb2e41",
          "md5": "101c8bcf79a2d459ad7fa9ce4f0b873a",
          "sha256": "ba14b8dd8668e4c23f57e34b407f0bd5c6a859bc710ae29e9795636303a4942e"
        },
        "downloads": -1,
        "filename": "gekkota-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "101c8bcf79a2d459ad7fa9ce4f0b873a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25372,
        "upload_time": "2022-12-19T19:01:34",
        "upload_time_iso_8601": "2022-12-19T19:01:34.268566Z",
        "url": "https://files.pythonhosted.org/packages/1a/2f/81e052e306112820659b4c20628a8bcb2273ffced1aaca8832e0fdbb2e41/gekkota-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38c6585ee7c3106bfc37fe5aacb99a6733344a51f6f7584799265d6d48437787",
          "md5": "b75a450fddd3077b404025fce9988602",
          "sha256": "6202812fef6d51e486e1155b899c6027dd8605a509587652951b67b0e5cb5f2c"
        },
        "downloads": -1,
        "filename": "gekkota-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b75a450fddd3077b404025fce9988602",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 24499,
        "upload_time": "2022-12-28T03:14:39",
        "upload_time_iso_8601": "2022-12-28T03:14:39.711904Z",
        "url": "https://files.pythonhosted.org/packages/38/c6/585ee7c3106bfc37fe5aacb99a6733344a51f6f7584799265d6d48437787/gekkota-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05706d7e86e459befb8c381dfdce479525928d23cbfc36ad092d2768b42b7638",
          "md5": "410d3976fba4dcad3559c54cd6950890",
          "sha256": "83d16f79a9faaade0f8bf1622f77c64978c002a6e3ef9e48581cbce82e5dbcec"
        },
        "downloads": -1,
        "filename": "gekkota-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "410d3976fba4dcad3559c54cd6950890",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25367,
        "upload_time": "2022-12-28T03:14:41",
        "upload_time_iso_8601": "2022-12-28T03:14:41.314033Z",
        "url": "https://files.pythonhosted.org/packages/05/70/6d7e86e459befb8c381dfdce479525928d23cbfc36ad092d2768b42b7638/gekkota-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38c6585ee7c3106bfc37fe5aacb99a6733344a51f6f7584799265d6d48437787",
        "md5": "b75a450fddd3077b404025fce9988602",
        "sha256": "6202812fef6d51e486e1155b899c6027dd8605a509587652951b67b0e5cb5f2c"
      },
      "downloads": -1,
      "filename": "gekkota-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b75a450fddd3077b404025fce9988602",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 24499,
      "upload_time": "2022-12-28T03:14:39",
      "upload_time_iso_8601": "2022-12-28T03:14:39.711904Z",
      "url": "https://files.pythonhosted.org/packages/38/c6/585ee7c3106bfc37fe5aacb99a6733344a51f6f7584799265d6d48437787/gekkota-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05706d7e86e459befb8c381dfdce479525928d23cbfc36ad092d2768b42b7638",
        "md5": "410d3976fba4dcad3559c54cd6950890",
        "sha256": "83d16f79a9faaade0f8bf1622f77c64978c002a6e3ef9e48581cbce82e5dbcec"
      },
      "downloads": -1,
      "filename": "gekkota-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "410d3976fba4dcad3559c54cd6950890",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 25367,
      "upload_time": "2022-12-28T03:14:41",
      "upload_time_iso_8601": "2022-12-28T03:14:41.314033Z",
      "url": "https://files.pythonhosted.org/packages/05/70/6d7e86e459befb8c381dfdce479525928d23cbfc36ad092d2768b42b7638/gekkota-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}