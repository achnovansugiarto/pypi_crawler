{
  "info": {
    "author": "Rui Apóstolo",
    "author_email": "ruiapostolo+lammpsgenie@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# lammpsgenie\n\nThis package is a collection of tools for handling LAMMPS data and dump files.\n\n## Scripts\n\n### mergedatafiles\n\nThe main way to interact with lammpsgenie is using the script `mergedatafiles`, which should be called with a settings file (YAML format) like so:\n\n```\nmergedatafiles merge_settings.yaml\n```\n\nIf called without any argument, it will search the current directory for a `merge.yaml` and `merge.yml` (in this order) and use the first one it finds, or return an error.\n\nThe YAML file should contain two dictionaries (`inputs` and `output`), with the following format:\n\n```\noutput:\n  filename: <filename/path where to write merged file>\n  boxsize: # new boxsize for the merged file\n    xlo: float\n    xhi: float\n    ylo: float\n    yhi: float\n    zlo: float\n    zhi: float\ninputs:\n  # as many of the following as needed\n  <filename/path of a data file to read from>:\n    minormax: <min or max>\n    value: float\n```\n\nThe script will gather the information from all the input files, shift coordinates to make sure they match the min/max values as given, and then write a new merged data file, with the new box limits provided.\n\nExample:\n\n```\noutput:\n  filename: merged_uadodecane.lammps\n  boxsize:\n    xlo: 0.0\n    xhi: 55.088\n    ylo: 0.0\n    yhi: 50.38\n    zlo: -20.0\n    zhi: 120.0\ninputs:\n  ../data/Fe2O3_50_down.lammps:\n    minormax: max\n    value: -1.5\n  ../data/Fe2O3_50_up.lammps:\n    minormax: min\n    value: 80.0\n  uadodecane.data:\n    minormax: min\n    value: 1.5\n```\n\n### saveiron\n\nThere are three variants of the `saveiron` script that write to the current working directory data files of the iron oxide surface:\n\n* saveiron50\n* saveiron100\n* saveironall\n\nThe first one writes the files of surfaces with side 50Å, the second the files for surfaces with side 100Å, and the last one writes the files for surfaces of both 50 and 100Å.\n\n\n## Development\n\n### Virtual Environment\n\nA virtual environment (venv) is like a sandbox, lets you install fresh version of packages (including local ones) without conflicting with your main python installation.\nIt is recommended to use `virtualenvwrapper`, a series of shell scripts that automates the creation, activation, deactivation, (among other things) of venvs.\nTo install `virtualenvwrapper` use the command:\n\n```\npip install virtualenvwrapper\n```\n\nThen you might need to export some variables on your `~/.profile` (order matters):\n\n```\n# virtualenvwrapper\n# if you have python2 installed, you might need:\nexport VIRTUALENVWRAPPER_PYTHON=$(which python3)\n# location of virtualenvwrapper.sh\nsource $(which virtualenvwrapper.sh)\n# where to store the files for each venv\nexport WORKON_HOME=$HOME/.virtualenvs\n# used when creating new projects\nexport PROJECT_HOME=$HOME/code\n```\n\nAnd restart your shell (or source `~/.profile`).\n\nTo create a new venv, use:\n\n```\nmkvirtualenv <name>\n```\n\nThis will create the venv and activate it.\nExit the venv with\n\n```\ndeactivate\n```\n\nand return to the venv with\n\n```\nworkon <name>\n```\n\nSometimes, you need to add the path of the project to a venv.\nThat is done, when one has the venv activated, with:\n\n```\nadd2virtualenv /absolute/path/to/package/\n```\n\n### Tests\n\nYou will need pytest and some plugins to run tests.\nThe required python packages are provided in test\\_requirements.txt, and can be installed with\n\n```\npip install -r test_requirements.txt\n```\n\nThis is better done inside a virtual environment, see the previous section.\n\nTests can be run from the package folder with:\n\n```\npytest\n```\n\nThis will run every test in the `tests/` folder.\nTo run only one of the test files, use:\n\n```\npytest tests/test_<name>.py\n```\n\nDuring development, a good way to keep an eye on tests when changing code (or adding new tests/test data) is to keep a separate terminal running `pytest-watch`.\nThis will scan the module and test files, and run the new test, or the tests affected by any changes, once it detects a file has been written.\nUse the commmand:\n\n```\nptw --runner \"pytest --testmon\"\n```\n\nTo check that the test cover the entirety of your code, use the coverage plugin for pytest:\n```\npytest --cov=lammpsgenie\n```\n\nThere are several settings that can be changed for this tool, to do so, add a `.coveragerc` file to the project directory.\nThe following are a good set of defaults:\n\n```\n[run]\nbranch = True\n\n[paths]\nsource =\n  lammpsgenie\n\n[report]\nshow_missing = True\nskip_empty = True\nprecision = 2\n```\n\n### DocStrings\n\nThe [numpy styleguide] was followed for DocString documentation.\n\n\n## Release\n\nInstall required packages with:\n\n```\npip install --upgrade build twine\n```\n\n1. Modify code\n2. Assure tests pass, and cover 100% of the code.\n3. Modify version in `_version.py`\n4. Create a build with `python3 -m build`.\n5. Check that the distribution files pass checks with `twine check dist/*`\n6. Upload to PyPi with `python3 -m twine upload --repository pypi dist/lammpsgenie-<version>*`\n\n\nNote: you need an account on pypi, and the necessary rights to upload, and a [registered token] saved on `.pypirc`\n\nTo test your distribution, you might want to test upload to the PyPi test repository with `python3 -m twine upload --repository pypi dist/lammpsgenie-<version>*`\n(Needs a separate registered account).\n\n[numpy styleguide]: https://numpydoc.readthedocs.io/en/latest/format.html\n[registered token]: https://pypi.org/help/#apitoken\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RuiApostolo/lmpdtmrg",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lammpsgenie",
    "package_url": "https://pypi.org/project/lammpsgenie/",
    "platform": null,
    "project_url": "https://pypi.org/project/lammpsgenie/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RuiApostolo/lammpsgenie/issues",
      "Homepage": "https://github.com/RuiApostolo/lmpdtmrg"
    },
    "release_url": "https://pypi.org/project/lammpsgenie/1.0.0/",
    "requires_dist": [
      "PyYAML (>=5.3.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package to help with LAMMPS data and dump files.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14057812,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa46a0886bd48ec799493e5a0c1b48c0cda3c73d988533e298406a903a13dd2d",
          "md5": "80df5568ef14d3a5605e8fcd19bf527d",
          "sha256": "bd67d6db8babb7a73b170c69865ac9d5619dd931bcaf904e136dfd328fa20f17"
        },
        "downloads": -1,
        "filename": "lammpsgenie-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80df5568ef14d3a5605e8fcd19bf527d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 867918,
        "upload_time": "2022-06-07T13:42:41",
        "upload_time_iso_8601": "2022-06-07T13:42:41.835099Z",
        "url": "https://files.pythonhosted.org/packages/aa/46/a0886bd48ec799493e5a0c1b48c0cda3c73d988533e298406a903a13dd2d/lammpsgenie-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d6c2dbef5d744144b02bcc86938be71fe9120b33f5446b9dc43569aab9d6daa",
          "md5": "bbc751cfcaea0f32d8162945f894d6c7",
          "sha256": "4cf2745170d2f306086ac54c65870bcec241a17e0c1e3f3daa8d1c366a68dd76"
        },
        "downloads": -1,
        "filename": "lammpsgenie-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbc751cfcaea0f32d8162945f894d6c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 865704,
        "upload_time": "2022-06-07T13:42:45",
        "upload_time_iso_8601": "2022-06-07T13:42:45.015189Z",
        "url": "https://files.pythonhosted.org/packages/7d/6c/2dbef5d744144b02bcc86938be71fe9120b33f5446b9dc43569aab9d6daa/lammpsgenie-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa46a0886bd48ec799493e5a0c1b48c0cda3c73d988533e298406a903a13dd2d",
        "md5": "80df5568ef14d3a5605e8fcd19bf527d",
        "sha256": "bd67d6db8babb7a73b170c69865ac9d5619dd931bcaf904e136dfd328fa20f17"
      },
      "downloads": -1,
      "filename": "lammpsgenie-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "80df5568ef14d3a5605e8fcd19bf527d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 867918,
      "upload_time": "2022-06-07T13:42:41",
      "upload_time_iso_8601": "2022-06-07T13:42:41.835099Z",
      "url": "https://files.pythonhosted.org/packages/aa/46/a0886bd48ec799493e5a0c1b48c0cda3c73d988533e298406a903a13dd2d/lammpsgenie-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d6c2dbef5d744144b02bcc86938be71fe9120b33f5446b9dc43569aab9d6daa",
        "md5": "bbc751cfcaea0f32d8162945f894d6c7",
        "sha256": "4cf2745170d2f306086ac54c65870bcec241a17e0c1e3f3daa8d1c366a68dd76"
      },
      "downloads": -1,
      "filename": "lammpsgenie-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bbc751cfcaea0f32d8162945f894d6c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 865704,
      "upload_time": "2022-06-07T13:42:45",
      "upload_time_iso_8601": "2022-06-07T13:42:45.015189Z",
      "url": "https://files.pythonhosted.org/packages/7d/6c/2dbef5d744144b02bcc86938be71fe9120b33f5446b9dc43569aab9d6daa/lammpsgenie-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}