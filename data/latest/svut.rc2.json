{
  "info": {
    "author": "Damien Pretet",
    "author_email": "Damien Pretet <damien.pretet@me.com>, Sarah Clark <sarahclark@google.com>, Sebastian Schaetz <seb.schaetz@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SystemVerilog Unit Test (SVUT)\n\n[![GitHub license](https://img.shields.io/github/license/dpretet/svut)](https://github.com/dpretet/svut/blob/master/LICENSE)\n![Github Actions](https://github.com/dpretet/svut/actions/workflows/ci_ubuntu.yaml/badge.svg)\n![Github Actions](https://github.com/dpretet/svut/actions/workflows/ci_macos.yaml/badge.svg)\n[![GitHub issues](https://img.shields.io/github/issues/dpretet/svut)](https://github.com/dpretet/svut/issues)\n[![GitHub stars](https://img.shields.io/github/stars/dpretet/svut)](https://github.com/dpretet/svut/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/dpretet/svut)](https://github.com/dpretet/svut/network)\n[![Twitter](https://img.shields.io/twitter/url/https/github.com/dpretet/svut?style=social)](https://twitter.com/intent/tweet?text=Wow:&url=https%3A%2F%2Fgithub.com%2Fdpretet%2Fsvut)\n\n\n## Introduction\n\nSVUT is a very simple flow to create a Verilog/SystemVerilog unit test.  It is\nwidely inspired by [SVUnit](http://agilesoc.com/open-source-projects/svunit/),\nbut it's written in python and run with [Icarus\nVerilog](http://iverilog.icarus.com/). SVUT follows KISS principle: [Keep It\nSimple, Stupid](https://en.wikipedia.org/wiki/KISS_principle).\n\nHope it can help you!\n\n### How to Install\n\n#### Pypi\n\nSVUT is availble on Pypi and can be installed as following:\n\n```bash\npip3 install svut\n```\n\n#### Git\n\nGit clone the repository in a path. Set up the SVUT environment variable\nand add SVUT to `$PATH`:\n\n```bash\nexport SVUT=$HOME/.svut\ngit clone https://github.com/dpretet/svut.git $SVUT\nexport PATH=$SVUT:$PATH\n```\n\nSVUT relies on [Icarus Verilog](http://iverilog.icarus.com/) as simulation\nback-end.  Please install it with your favourite package manager and be sure to\nuse a version greater or equal to v10.2. SVUT is tested with `v10.2` and cannot\nwork with with lower version (`<= v9.x`).\n\nSVUT can also use [Verilator](https://github.com/verilator/verilator) but the support\nis more limited for the moment. A future release will fix that. An example to understand\nhow to use it along Icarus can be found [here](https://github.com/dpretet/friscv/tree/master/test/common)\n\n\n### How to use it\n\n\nTo create a unit test of a verilog module, call the command:\n\n```bash\nsvutCreate your_file.v\n```\n\nNo argument is required. SVUT will create \"your_file_testbench.sv\" which contains your module\ninstanciated and a place to write your testcase(s). Some codes are also commented to describe the\ndifferent macros and how to create a clock or dump a VCD for GTKWave. To run a test, call the\ncommand:\n\n```bash\nsvutRun -test your_file_testbench.sv\n```\n\nor simply `svutRun` to execute all testbenchs in the current folder.\n\n```bash\nsvutRun\n```\n\nSVUT will scan your current folder, search for the files with \"\\_testbench.sv\"\nsuffix and run all tests available. Multiple suffix patterns are [possible](https://github.com/dpretet/svut/blob/master/svutRun.py#L46).\n\nsvutRun proposes several arguments, most optional:\n\n- `-test`: specify the testsuite file path or a folder containing tests\n- `-f`: pass the fileset description, default is `files.f`\n- `-sim`: specify the simulator, `icarus` or `verilator`\n- `-main`: specify the main.cpp file when using verilator, default is `sim_main.cpp`\n- `-define`: pass verilog defines to the tool, like `-define \"DEF1=2;DEF2;DEF3=3\"`\n- `-vpi`: specify a compiled VPI, for instance `-vpi \"-M. -mMyVPI\"`\n- `-dry-run`: print the commands but don't execute them\n- `-include`: to pass include path, several can be passed like `-include folder1 folder2`\n- `-no-splash`: don't print SVUT splash banner, printed by default\n- `-compile-only`: just compile the testbench, don't execute it\n- `-run-only`: just execute the testbench, if no executable found, also build it\n\n\n# Tutorial\n\nCopy/paste this basic FFD model in a file named ffd.v into a new folder:\n\n```verilog\n`timescale 1 ns / 1 ps\n\nmodule ffd\n    (\n    input  wire aclk,\n    input  wire arstn,\n    input  wire d,\n    output reg  q\n    );\n\n    always @ (posedge aclk or negedge arstn) begin\n        if (arstn == 1'b0) q <= 1'b0;\n        else q <= d;\n    end\n\nendmodule\n```\n\nThen run:\n\n```bash\nsvutCreate ffd.v\n```\n\nffd_testbench.v has been dropped in the folder from you called svutCreate. It\ncontains all you need to start populating your testcases. In the header, you\ncan include directly your DUT file (uncomment):\n\n```verilog\n`include \"ffd.v\"\n```\n\nor you can store the path to your file into a `files.f` file, automatically\nrecognized by SVUT. Populate it with the files describing your IP. You can\nalso specify include folder in this way:\n\n```bash\n+incdir+$HOME/path/to/include/\n```\n\nRight after the module instance, you can use the example to generate a clock\n(uncomment):\n\n```verilog\ninitial aclk = 0;\nalways #2 aclk <= ~aclk;\n```\n\nNext line explains how to dump your signals values into a VCD file to open a\nwaveform in GTKWave (uncomment):\n\n```verilog\ninitial $dumpvars(0, ffd_unit_test);\ninitial $dumpfile(\"ffd_testbench.vcd\");\n```\n\nTwo functions follow, `setup()` and `teardown()`. Use them to configure the\nenvironment of the testcases:\n- setup() is called before each testcase execution\n- teandown() after each testcase execution\n\nA testcase is enclosed between to specific defines:\n\n```verilog\n`UNIT_TEST(\"TESTNAME\")\n    ...\n`UNIT_TEST_END\n```\n\nTESTNAME is a string (optional), which will be displayed when test execution\nwill start. Then you can use the macros provided to display information,\nwarning, error and check some signals status and values. Each error found with\nmacros increments an error counter which determine a testcase status. If the\nerror counter is bigger than 0, the test is considered as failed.\n\nA testsuite, comprising several `UNIT_TEST` is declared with another define:\n\n```verilog\n`TEST_SUITE(\"SUITENAME\")\n    ...\n`TEST_SUITE_END\n```\n\nTo test the FFD, add the next line into `setup()` to drive the reset and init the\nFFD input:\n\n```verilog\narstn = 1'b0;\nd = 1'b0;\n#100;\narstn = 1'b1;\n```\n\nand into the testcase:\n\n```verilog\n`FAIL_IF(q);\n```\n\nHere is a basic unit test checking if the FFD output is 0 after reset. Once\ncalled `svutRun` in your shell, you should see something similar:\n\n```\nINFO: Start testsuite << FFD Testsuite >> (@ 0)\n\nINFO: Starting << Test 0: Check reset is applied >> (@ 0)\nI will test if Q output is 0 after reset (@ 100000)\nSUCCESS: Test 0 pass (@ 110000)\n\nINFO: Starting << Test 1: Drive the FFD >> (@ 110000)\nI will test if Q output is 1 after D assertion (@ 210000)\nSUCCESS: Test 1 pass (@ 236000)\n\nINFO: Stop testsuite 'FFD Testsuite' (@ 236000)\n  - Warning number:  0\n  - Critical number: 0\n  - Error number:    0\n  - STATUS: 2/2 test(s) passed\n```\n\nSVUT relies (optionally) on files.f to declare fileset and define. The user\ncan also choose to pass define in the command line:\n\n```bash\nsvutRun -test my_testbench.sv -define \"DEF1=1;DEF2;DEF3=3\"\n```\n\nSVUT doesn't check possible collision between define passed in command line\nand the others defined in files.f. Double check that point if unexpected\nbehavior occurs during testbench.\n\nFinally, SVUT supports VPI for Icarus. Follow an example to compile and set up\nthe flow of an hypothetic UART, compiled with iverilog and using a define \"PORT\":\n\n```bash\niverilog-vpi uart.c\nsvutRun -vpi \"-M. -muart\" -define \"PORT=3333\" -t ./my_testbench.sv &\n```\n\nNow you know the basics of SVUT. The generated testbench provides prototypes of\navailable macros. Try them and play around to test SVUT. You can find these\nfiles into the example folder.\n\nEnjoy!\n\n\n## License\n\nCopyright 2021 The SVUT Authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.  imitations under the License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dpretet/svut",
    "keywords": "verilog,systemverilog,testing",
    "license": "The MIT License Copyright (c) 2022 The SVUT Authors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svut",
    "package_url": "https://pypi.org/project/svut/",
    "platform": null,
    "project_url": "https://pypi.org/project/svut/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dpretet/svut/issues",
      "Homepage": "https://github.com/dpretet/svut"
    },
    "release_url": "https://pypi.org/project/svut/1.9.0/",
    "requires_dist": null,
    "requires_python": ">=3.7, <4",
    "summary": "SystemVerilog Unit Test (SVUT)",
    "version": "1.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15556881,
  "releases": {
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a154f622e57bcd28f76f802a786234c0b93949ecdf48696f7b8e0ed81d8ac91b",
          "md5": "3002b3cd7f660dbe597285e2a9c6d36d",
          "sha256": "cc4e5a9cd98751f352d19dffbc94334331a967f89a9af42bcdd090d9e09ae3e5"
        },
        "downloads": -1,
        "filename": "svut-1.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3002b3cd7f660dbe597285e2a9c6d36d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 18425,
        "upload_time": "2022-10-23T14:41:14",
        "upload_time_iso_8601": "2022-10-23T14:41:14.455457Z",
        "url": "https://files.pythonhosted.org/packages/a1/54/f622e57bcd28f76f802a786234c0b93949ecdf48696f7b8e0ed81d8ac91b/svut-1.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c3343e1a81395e9186c4e57ef33b31f8244749d53b95c69bf25a45b98d55701",
          "md5": "6aa1b10975658532070bc1205378c51e",
          "sha256": "76f2b32a5dc7cfa1a0e82189105bc552abb2f1232035859656e592990940f1c0"
        },
        "downloads": -1,
        "filename": "svut-1.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6aa1b10975658532070bc1205378c51e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 18165,
        "upload_time": "2022-10-23T14:41:16",
        "upload_time_iso_8601": "2022-10-23T14:41:16.504073Z",
        "url": "https://files.pythonhosted.org/packages/6c/33/43e1a81395e9186c4e57ef33b31f8244749d53b95c69bf25a45b98d55701/svut-1.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "686efffcfb6a507be1f8aecbfa812a6220b0884f98ac048eb078c5b56594eaec",
          "md5": "b6e686ac3dd19ddb52016a4ea3223383",
          "sha256": "7d88d74dfc3fc4d200ce0fbba3c3066c2b6a3ec2d910942bd2b4c6ce0a8daa86"
        },
        "downloads": -1,
        "filename": "svut-1.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6e686ac3dd19ddb52016a4ea3223383",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 20014,
        "upload_time": "2022-10-27T18:30:27",
        "upload_time_iso_8601": "2022-10-27T18:30:27.743534Z",
        "url": "https://files.pythonhosted.org/packages/68/6e/fffcfb6a507be1f8aecbfa812a6220b0884f98ac048eb078c5b56594eaec/svut-1.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c32e2d72021a636b242aefc18beebffa9229f392950ab167c49c0427a035e1c4",
          "md5": "7f6e91385927ab300a2c688774b7ae0f",
          "sha256": "859133ddb1d4bfa83faaadd9ef61d5488a84cfef6ed53ecae5ba604b75b0ee73"
        },
        "downloads": -1,
        "filename": "svut-1.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f6e91385927ab300a2c688774b7ae0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 19720,
        "upload_time": "2022-10-27T18:30:29",
        "upload_time_iso_8601": "2022-10-27T18:30:29.931745Z",
        "url": "https://files.pythonhosted.org/packages/c3/2e/2d72021a636b242aefc18beebffa9229f392950ab167c49c0427a035e1c4/svut-1.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "686efffcfb6a507be1f8aecbfa812a6220b0884f98ac048eb078c5b56594eaec",
        "md5": "b6e686ac3dd19ddb52016a4ea3223383",
        "sha256": "7d88d74dfc3fc4d200ce0fbba3c3066c2b6a3ec2d910942bd2b4c6ce0a8daa86"
      },
      "downloads": -1,
      "filename": "svut-1.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b6e686ac3dd19ddb52016a4ea3223383",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 20014,
      "upload_time": "2022-10-27T18:30:27",
      "upload_time_iso_8601": "2022-10-27T18:30:27.743534Z",
      "url": "https://files.pythonhosted.org/packages/68/6e/fffcfb6a507be1f8aecbfa812a6220b0884f98ac048eb078c5b56594eaec/svut-1.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c32e2d72021a636b242aefc18beebffa9229f392950ab167c49c0427a035e1c4",
        "md5": "7f6e91385927ab300a2c688774b7ae0f",
        "sha256": "859133ddb1d4bfa83faaadd9ef61d5488a84cfef6ed53ecae5ba604b75b0ee73"
      },
      "downloads": -1,
      "filename": "svut-1.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f6e91385927ab300a2c688774b7ae0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 19720,
      "upload_time": "2022-10-27T18:30:29",
      "upload_time_iso_8601": "2022-10-27T18:30:29.931745Z",
      "url": "https://files.pythonhosted.org/packages/c3/2e/2d72021a636b242aefc18beebffa9229f392950ab167c49c0427a035e1c4/svut-1.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}