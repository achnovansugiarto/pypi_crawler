{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# TBSK modem\n\nJapanese document ðŸ‘‰[Readme.md](Readme.md)\n\nTBSK (Trait Block Shift Keying) modem is a low-speed, short-range audio communication implementation without FFT/IFTT.\n\nIt can modulate a byte/bitstream to PCM  and demodulate PCM to a byte/bitstream.\n\nThere is a library for development and a console script [tbskmodem](tbskmodem.md).\n\n![preview_tbsk](https://user-images.githubusercontent.com/2483108/194768184-cecddff0-1fa4-4df8-af3f-f16ed4ef1718.gif)\n\nSee [Youtube](https://www.youtube.com/watch?v=4cB3hWATDUQ) with modulated sound.ðŸŽµ\n\n## For other platforms.\n- TBSKmodem for Python\n- [TBSKmodem for C#](https://github.com/nyatla/TBSKmodemCS)\n- [TBSKmodem for C++](https://github.com/nyatla/TBSKmodemCpp)\n- [TBSKmodem for JavaScript](https://github.com/nyatla/TBSKmodemJS)\n- [TBSKmodem for Java](https://github.com/nyatla/TBSKmodemJava)\n- [TBSKmodem for Processing](https://github.com/nyatla/TBSKmodem-for-Processing)\n- [TBSKmodem for MicroChip](https://github.com/nyatla/TBSKmodemMicro)\n\n\n\n## Performance\n\nThroughput in a quiet room is 5 bps to 1 kbps and transmit distance is about 1 meter.\nIt is possible with the microphone and speakers provided in a personal computer.\n\n\n## Specification\n\n| Parameters |  |\n| --- | --- |\n| Modulation method | Trait block differential modulation |\n| Bit rate | 5 - 1kbps |\n| Carrier frequency | Any |\n| Bandwidths | 5Hz -  |\n| Error correction/detection | No |\n\n### Trait block differential modulation\n\nTrait block differential modulation uses an any shaped tone signal and its inverted value as a binary transmission symbol instead of a waveform symbol.\nThe tone signal is a spread-spectrum Sin wave, but other shaped waveforms can be used.\nDemodulation is performed by delay detection of the correlation rate of adjacent symbols. The correlation rate indicates  1,-1, which is demodulated into bits.\n\nThis modulatlation method has the only one parameter that is tone signal length (number of ticks x carrier frequency). The demodulator can demodulate any type of signal as long as the tone signal length is compatible.\n\n### Signal Synchronization\n\nFirst signal detection is determined by observing the correlation value for a certain period of time. A first synchronization pattern longer than a normal symbol, it is placed at the head of the signal.\nAnd to maintain the state of synchronization, demodulator  uses the edge of the symbol in the signal  to detect the peak of the correlation.\n\nIf a signal is sent with symbols not inverted for a long time in an unstable carrier wave system, the transaction will be interrupted by lack of synchronization.\nShould be good to process the data to be transmitted so that the data is inverted once every few seconds.\n\n### Tone Signal\n\nDefault tone signal is a spread spectrum waveform with a sine wave phase-shifted by a PN code.\nThe tone signal can be any shape that is a high signal-to-noise ratio on the demodulation side. If the tone signal is sine, it behaves the same as DPSK modulation.\n\n### Disturbance Tolerance\n\nDisturbance tolerance becomes stronger the longer the tone signal, but lower the bit rate if longer the tone signal, \nThe communication rate relative to the carrier frequency is 0.01 bit/Hz is the realstic.\n\n\n### Packet format\nThe current protocol only implements signal detection and followed payload reading. Applications should implement packet size, termination identifier, error correction, and detection.\n\n## License\n\nThis software is provided under the MIT license. For hobby and research purposes, use it according to the MIT license.\n\nFor industrial applications, be careful with patents.\n\nThis library is MIT licensed open source software, but not patent free.\n\nRegarding patent rights, it seems that some of the rights owned by YAMAHA CORPORATION.\nIt is not supervised by experts, so check the details yourself.\n\n[j-platpat](https://www.j-platpat.inpit.go.jp/)\n\n[MODULATION DEVICE AND DEMODULATION DEVICE WO-A-2010/016589](https://www.j-platpat.inpit.go.jp/c1800/PU/WO-A-2010-016589/7847773A7250230D1C8D66BBF506D4E794BEF7F38B5DF2B8C11BE9225DF7BB10/50/ja)\n\n\n\n## GetStarted\n\nThe explanation assumes the Anaconda environment.\nPython 3.10.x is recommended.\n\nThe command line tool [tbskmodem](./tbskmodem.md) will be installed at the same time.\n\n#### Setup for Anaconda\nClone the sorce code from github.\n\n```\n>git clone https://github.com/nyatla/TBSKmodem.git\n```\n\nUntil step4, no external module is required .\nIf you go beyond step4, install numpy and sounddevice.\nIt is required for sound playback and capture.\n\n```\n>conda install -c anaconda numpy\n>conda install -c conda-forge python-sounddevice\n```\n#### Setup by pip\n\n```\n$pip install tbskmodem\n$sudo apt-get install portaudio19-dev\n```\n\nTBSKmodem requires portaudio library.\n\n### Location of sample scripts\n\nSample programs are in the TBSKmodem/getstarted directory.\n```\n> cd getstarted\n```\n\n#### step1. Modulate to wave file.\nstep1.modulate.py moduletes bits to wave file.\n\n```\n> python step1_modulate.py\nImported local library.\n[WARN] Imported local library.\n>\n```\nThis script modulates bits and save result to step1.wav.\n\n`[WARN] Imported local library.` is displayed? Do not warry, This means library is linked from local diractory, not python package.\n\n\nSee main function.\n```\ndef main():\n    tone=TbskTone.createXPskSin(10,10).mul(0.5)    # SSFM DPSK\n    payload=[0,1,0,1,0,1,0,1]*16 # 16byte\n    carrier=8000\n\n    #modulation\n    mod=TbskModulator(tone)\n    src_pcm=[i for i in mod.modulateAsBit(payload)]\n\n    #save to wave\n    with open(\"step1.wav\",\"wb\") as fp:\n        PcmData.dump(PcmData(src_pcm,16,carrier),fp)\n```\n\nFirst, this script creates TraitTone objects that use to transmission symbols.\nNext, create a modulator TbskModulator object and modulate it with the modulateAsBit function.\nModulating source is an array of bit values (1 or 0), totaling 8*16=128 bits.\n\nThe return value of the modulateAsBit function is an iterator that return the modulated amplitude values (float). Make list from it  and save it as a Wave file at the end.\n\n#### step2. Demodulate from wav file.\n\nstep2.modulate.py demodulates wav file to bits.\n\n```\n> python step2_demodulate.py\n[WARN] Imported local library.\n[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n>\n```\nIt is decodes to the original bits.\n\nSee main function.\n```\ndef main():\n    wav=None\n    with open(\"step1.wav\",\"rb\") as fp:\n        wav=PcmData.load(fp)\n\n    tone=TbskTone.createXPskSin(10,10)\n    demod=TbskDemodulator(tone)\n\n    ret=demod.demodulateAsBit(wav.dataAsFloat())\n    print([i for i in ret] if ret is not None else None)\n```\n\nFirst, open and read  step1.wav.\nNext, create a tone signal, create a TbskDemodulator demodulator  with it, demodulate it with the demodulateAsBit function.\n\nThe demodulateAsBit function returns an iterator that returns bit strings as ints.\nFinal, display this as a list.\n\nThe iterator continues returning bit values until the signal is no longer true. \n(Forget the question about signal termination for now.)\n\n#### step3. Modulate and demodulate byte data.\n\nOf course Functions for sending and receiving byte values are already exist.\nstep3_bytedata.py performs modulation and demodulation of bytes values.\n\n\n```\n> python .\\step3_bytedata.py\n[WARN] Imported local library.\n[b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9']\n> \n```\n\nSee main function.\n```\ndef main():\n    tone=TbskTone.createXPskSin(10,10).mul(0.5)    # SSFM DPSK\n    payload=b\"0123456789\" # 10byte\n    carrier=8000\n\n    #modulation\n    mod=TbskModulator(tone)\n    src_pcm=[i for i in mod.modulate(payload)]\n\n    #save to wave\n    wav=PcmData(src_pcm,16,carrier)\n    with open(\"step3.wav\",\"wb\") as fp:\n        PcmData.dump(wav,fp)\n\n    #demodulate to bytes\n    demod=TbskDemodulator(tone)\n    ret=demod.demodulateAsBytes(wav.dataAsFloat())\n    print([i for i in ret] if ret is not None else None)\n```\n\nThe structure seems to combines step1 and step2.\nNotice the mod.modulate function. This, it sets bytes to payload as is.\nAlso notice demod.demodulateAsBytes. It is a function that seems to return it as Bytes.\n\n\n#### step4. Modulate and demodulate text.\n\nstep4_text.py modulates and demodulate text as UTF-8.\n\n```\n> python .\\step4_text.py    \n[WARN] Imported local library.\n['ã‚¢', 'ãƒ³', 'ã‚¿', 'ãƒ¤', 'ãƒ«', 'ãƒ¼', 'ãƒ‹', 'ãƒ£']\n>\n```\n\nSee main function.\n```\ndef main():\n    tone=TbskTone.createXPskSin(10,10).mul(0.5)    # SSFM DPSK\n    payload=\"ã‚¢ãƒ³ã‚¿ãƒ¤ãƒ«ãƒ¼ãƒ‹ãƒ£\"\n    carrier=8000\n\n    #modulation\n    mod=TbskModulator(tone)\n    wav=PcmData([i for i in mod.modulate(payload)],16,carrier)\n    #save to wave\n    with open(\"step4.wav\",\"wb\") as fp:\n        PcmData.dump(wav,fp)\n\n    #demodulate to bytes\n    demod=TbskDemodulator(tone)\n    ret=demod.demodulateAsStr(wav.dataAsFloat())\n    print([i for i in ret] if ret is not None else None)\n```\n\nModulation part is mod.modulate as it is.\nThe changes is the demodulateAsStr function call in the demodulation part.\n\nThe modulator and demodulator each have override functions that take bit arrays, strings, hex strings, bytes, and uint8 arrays arguments.\n\nAs an astute you may have noticed, hex strings are a function for sending transactions on blockchain networks.ðŸ§±â›“\n\n\n\n#### step5. Testing microphone\n\nFor receiving signal needs microphone device.\nCheck the sound device is accessible from python with step5_microphone.py.\n\nNote: In virtual systems such as WSL, VirtualBox, etc., audio communication may not be established due to noise in the sound device.\n\n```\n> python .\\step5_microphone.py\n[WARN] Imported local library.\nPress [ENTER] to stop.\nVolume meter\n###\n```\n\nPlease sing a your best song selection into the microphone.\n\nIf the bar graph indicated by \"#\" is moving, python recognizes the microphone normally.\n\nDo not working? This is troubleshoot.\n\n1. Check connection of microphone to your computer.\n2. Change device_id parametor to any value(1,2,3...)\n3. Check other programs can connect microphone on same PC.\n4. Sing louder \n\nWhen finished singing, press ENTER to stop the program.\n\n\n#### step6. Realtime demodulation.\n\nThis is the final step. Demodulate the signal in real time with step6_realtime_receive.py.\nAre you ready for the microphone?\n\n\nNote: In virtual systems such as WSL, VirtualBox, etc., audio communication may not be established due to noise in the sound device.\n\n```\n> python .\\step6_realtime_receive.py\n[WARN] Imported local library.\n160.0 bps\nPlay step6.wave in your player.\nStart capturing\n>ã‚¢ãƒ³ã‚¿ãƒ¤ãƒ«ãƒ¼ãƒ‹ãƒ£\nEnd of signal.\n>\n```\n\nstep6.wav is generated in the executed directory.\nLet make listen to this wave file to python.\nA demodulated string is displayed.\n\nBy the way, The question remains. Where is the termination of the received signal? \n\nIn TBSK, after detecting a signal, it endlessly demodulates whatever the signal strength is above the threshold.\nFix the packet length in the upper communication specification or send the length parameter first.\n\n\nCongratulations! You are now a TBSK Master! [ã‚¢ãƒ³ã‚¿ãƒ¤ãƒ«ãƒ¼ãƒ‹ãƒ£](http://wiki.ffo.jp/html/2682.html)\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tbskmodem",
    "package_url": "https://pypi.org/project/tbskmodem/",
    "platform": null,
    "project_url": "https://pypi.org/project/tbskmodem/",
    "project_urls": {
      "homepage": "https://github.com/nyatla/TBSKmodem/"
    },
    "release_url": "https://pypi.org/project/tbskmodem/0.3.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Trait block shift keying modem.",
    "version": "0.3.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17281744,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17cfc99f8d3f9c5d0051c76c96c1540c88a008dcdf3ae31a37a1a1d6a27ff9de",
          "md5": "38dc523d5a063d6470786fffe7c2e730",
          "sha256": "d2af4d5b3a6edae0e137c97df3c410a1370666d55ca973839704715b395c3c88"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "38dc523d5a063d6470786fffe7c2e730",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 76064,
        "upload_time": "2022-10-09T16:38:28",
        "upload_time_iso_8601": "2022-10-09T16:38:28.745088Z",
        "url": "https://files.pythonhosted.org/packages/17/cf/c99f8d3f9c5d0051c76c96c1540c88a008dcdf3ae31a37a1a1d6a27ff9de/tbskmodem-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab93874916b1db11bf5e37f15af9ffd10b7c23a3a3104933dc3bcfd34638bca0",
          "md5": "315664e761bc64d0af8de67fb2dd1cd7",
          "sha256": "7eb35c6092c3e443a4d6e587e516a66ae861ee00944ef6c2ad029e927efe109b"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "315664e761bc64d0af8de67fb2dd1cd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66669,
        "upload_time": "2022-10-09T16:38:31",
        "upload_time_iso_8601": "2022-10-09T16:38:31.583487Z",
        "url": "https://files.pythonhosted.org/packages/ab/93/874916b1db11bf5e37f15af9ffd10b7c23a3a3104933dc3bcfd34638bca0/tbskmodem-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab78d387125476f68d0cda1c896b9c46db29e99099d49f4537ff49367ff0f78d",
          "md5": "e9e4fabbb618434bde6313711544b874",
          "sha256": "8bacbb2c98c8f233c67da78bef39d5b75a7c4ad40d2e1d4ad153d0a7a9b144d0"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9e4fabbb618434bde6313711544b874",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77461,
        "upload_time": "2022-10-27T14:39:16",
        "upload_time_iso_8601": "2022-10-27T14:39:16.256762Z",
        "url": "https://files.pythonhosted.org/packages/ab/78/d387125476f68d0cda1c896b9c46db29e99099d49f4537ff49367ff0f78d/tbskmodem-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eceee7a7a64cb977261a3bbdb4f4e4747909e7c1e99f748d6b59dc09b912ff47",
          "md5": "1616467d95caa4a923eccb9b0f4d34cf",
          "sha256": "a8d3447ca7f8b32b8520b2047e43f878d7fa4287754b6b8c2ade94ac00d16546"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1616467d95caa4a923eccb9b0f4d34cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68075,
        "upload_time": "2022-10-27T14:39:18",
        "upload_time_iso_8601": "2022-10-27T14:39:18.943451Z",
        "url": "https://files.pythonhosted.org/packages/ec/ee/e7a7a64cb977261a3bbdb4f4e4747909e7c1e99f748d6b59dc09b912ff47/tbskmodem-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0329462d9da66d66e952e97e213cc8d849f949093018139926d065bbbfc9059",
          "md5": "4cafba48424466e041c93125db2bf084",
          "sha256": "ce7716ac328acc94022784db50247b7f766915892b108f67e55bd12ef7b3de40"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cafba48424466e041c93125db2bf084",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 77822,
        "upload_time": "2023-01-20T14:15:10",
        "upload_time_iso_8601": "2023-01-20T14:15:10.513782Z",
        "url": "https://files.pythonhosted.org/packages/c0/32/9462d9da66d66e952e97e213cc8d849f949093018139926d065bbbfc9059/tbskmodem-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a43ccd9d94f7cd9d1154ecc0351d5ca5b857bb0537ad8833f05fe1cec80f976e",
          "md5": "736bd324d6f90dfbc3a032f1e8c6b41d",
          "sha256": "6b88f8db0d745f11f3ef2671e09f7801234396d3b413b9304431cd2378b0560e"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "736bd324d6f90dfbc3a032f1e8c6b41d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 68125,
        "upload_time": "2023-01-20T14:15:13",
        "upload_time_iso_8601": "2023-01-20T14:15:13.125934Z",
        "url": "https://files.pythonhosted.org/packages/a4/3c/cd9d94f7cd9d1154ecc0351d5ca5b857bb0537ad8833f05fe1cec80f976e/tbskmodem-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa2d450769d150e3af59488f3d5238ef6ca5ea906d520ec88787512754a254cc",
          "md5": "b9d7cf330c442bed8f09e16b804dc4ee",
          "sha256": "d99526c99b32d0c45bfa7af3b771f26ab7bbb7e2e19e009dda4bcaad2d37636d"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9d7cf330c442bed8f09e16b804dc4ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 82146,
        "upload_time": "2023-03-14T03:36:13",
        "upload_time_iso_8601": "2023-03-14T03:36:13.033930Z",
        "url": "https://files.pythonhosted.org/packages/fa/2d/450769d150e3af59488f3d5238ef6ca5ea906d520ec88787512754a254cc/tbskmodem-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cccf660bcc0f7cf3db3bfed9b5dffe33112121d9617cb1adc03008e4e933abce",
          "md5": "2a5ca4ee7b4651eaeec571a33a0bffc3",
          "sha256": "0aabde2f4c2076590673d9cff7ae7543be09a8e34c6f16644f97cdb933c3f2d2"
        },
        "downloads": -1,
        "filename": "tbskmodem-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2a5ca4ee7b4651eaeec571a33a0bffc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 65811,
        "upload_time": "2023-03-14T03:36:15",
        "upload_time_iso_8601": "2023-03-14T03:36:15.244988Z",
        "url": "https://files.pythonhosted.org/packages/cc/cf/660bcc0f7cf3db3bfed9b5dffe33112121d9617cb1adc03008e4e933abce/tbskmodem-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa2d450769d150e3af59488f3d5238ef6ca5ea906d520ec88787512754a254cc",
        "md5": "b9d7cf330c442bed8f09e16b804dc4ee",
        "sha256": "d99526c99b32d0c45bfa7af3b771f26ab7bbb7e2e19e009dda4bcaad2d37636d"
      },
      "downloads": -1,
      "filename": "tbskmodem-0.3.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b9d7cf330c442bed8f09e16b804dc4ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 82146,
      "upload_time": "2023-03-14T03:36:13",
      "upload_time_iso_8601": "2023-03-14T03:36:13.033930Z",
      "url": "https://files.pythonhosted.org/packages/fa/2d/450769d150e3af59488f3d5238ef6ca5ea906d520ec88787512754a254cc/tbskmodem-0.3.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cccf660bcc0f7cf3db3bfed9b5dffe33112121d9617cb1adc03008e4e933abce",
        "md5": "2a5ca4ee7b4651eaeec571a33a0bffc3",
        "sha256": "0aabde2f4c2076590673d9cff7ae7543be09a8e34c6f16644f97cdb933c3f2d2"
      },
      "downloads": -1,
      "filename": "tbskmodem-0.3.7.tar.gz",
      "has_sig": false,
      "md5_digest": "2a5ca4ee7b4651eaeec571a33a0bffc3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 65811,
      "upload_time": "2023-03-14T03:36:15",
      "upload_time_iso_8601": "2023-03-14T03:36:15.244988Z",
      "url": "https://files.pythonhosted.org/packages/cc/cf/660bcc0f7cf3db3bfed9b5dffe33112121d9617cb1adc03008e4e933abce/tbskmodem-0.3.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}