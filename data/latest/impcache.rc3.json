{
  "info": {
    "author": "",
    "author_email": "Andrew Timonin <timonin.andrew@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.11",
      "Topic :: Internet",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# impcache\n*Simple async cache with high performance. Easy to use & ready for production.*\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://github.com/impsite/impcache/blob/main/LICENSE)\n[![python](https://img.shields.io/badge/Python-3.11-brightgreen.svg?style=flat&logo=python&logoColor=white)](https://www.python.org)\n[![mypy](https://img.shields.io/badge/mypy-checked-brightgreen.svg?style=flat)](http://mypy-lang.org/)\n[![Code coverage](https://img.shields.io/badge/code%20coverage-100%25-brightgreen)](https://github.com/PyCQA/pylint)\n[![PyPI](https://img.shields.io/pypi/v/impcache?color=brightgreen&label=pypi%20package)](https://pypi.python.org/pypi/impcache/)\n[![Linting: pylint](https://img.shields.io/badge/linting-pylint-brightgreen)](https://github.com/PyCQA/pylint)\n[![Code style: flake8](https://img.shields.io/badge/code%20style-flake8-brightgreen.svg)](https://github.com/psf/black)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[![Tests](https://github.com/impsite/impcache/actions/workflows/tests.yaml/badge.svg?branch=main&event=push)](https://github.com/impsite/impcache/actions/workflows/tests.yaml)\n\n## Usage\n\n### Cache backend\nimpcache uses [Redis](https://redis.io) as a cache backend. To begin you’ll need a Redis server \nrunning either locally or on a remote machine.\n\n### Dependencies\nUnder the hood, impcache uses async [redis-py](https://pypi.org/project/redis/) with hiredis support \nfor faster performance. For serialization and deserialization we're using \n[orjson](https://pypi.org/project/orjson/) - the fastest Python library for JSON \n([benchmarks](https://github.com/ijl/orjson#performance)).\n\n### Install\n\nTo install a wheel from PyPI:\n```sh\npip install --upgrade impcache\n```\n\n### Quickstart\n\nThis is an example of setting and getting key from cache:\n\n```python\nimport asyncio\n\nfrom impcache import Cache, RedisCacheRepository\n\n\nasync def main():\n    cache = Cache(\n        repository=RedisCacheRepository(dsn=\"redis://redis:6379/0\"),\n        key_prefix=\"cache\",\n        version=1,\n    )\n    await cache.set(\"key\", \"value\", expire=100)\n    result = await cache.get(\"key\")\n    print(result)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n### Cache arguments\nCache can be configured to control caching behavior. These settings are provided as arguments for the Cache class. \nValid arguments are as follows:\n- **repository**: Only _RedisCacheRepository_ supported at the moment.\n- **key_prefix**: A string that will be automatically prepended to all cache keys. \nSee the [cache key prefixing](#cache-key-prefixing) for more information.\n- **version**: The default version number generated for cache keys (can be string or integer). \nSee the [cache versioning](#cache-versioning) for more information.\n\n### Cache key prefixing\nTo prevent cache key collision, impcache provides the ability to prefix all cache keys. When a particular cache key \nis saved or retrieved, impcache will automatically prefix the cache key with the value of the **key_prefix** argument.\n\n### Cache versioning\nWhen you change running code that uses cached values, you may need to purge any existing cached values. \nThe easiest way to do this is to use the version identifier, specified using the **version** argument for the Cache \nclass or on primitive cache functions level.\n\nBy default, any key automatically includes the version \"1\".\n\nFor example:\n\n```python\n>>> # Set version 2 of a cache key\n>>> await cache.set(\"key\", \"value\", expire=100, version=2)\n>>> # Get the default version (assuming version=1)\n>>> await cache.get(\"key\")\nNone\n# Get version 2 of the same key\n>>> await cache.get(\"key\", version=2)\nvalue\n```\n\n### Cache key format\nAs described in the previous two sections, the cache key provided by a user is not used verbatim – it is combined \nwith the cache prefix and key version to provide a final cache key. By default, the three parts are joined \nusing colons to produce a final string:\n```python\nf\"{key_prefix}:{key_version}:{key}\"\n```\n\n### Cache API\n#### set(key: str, value: JSON, expire: int, version: Optional[int | str] = None) -> Literal[True]:\n\nSets the value at key name to value with expiration.\n```python\n>>> await cache.set(\"key\", \"value\", expire=100)\nTrue\n```\n\n#### set_nx(key: str, value: JSON, expire: int, version: Optional[int | str] = None) -> bool:\n\nSets the value at key name to value with expiration only if key does not exist. \nReturns False if key exists, True otherwise.\n\n```python\n>>> await cache.set_nx(\"key\", \"value\", expire=100)\nTrue\n>>> await cache.set_nx(\"key\", \"value\", expire=100)\nFalse\n```\n\n#### set_many(data: dict[str, JSON], expire: int, version: Optional[int | str] = None) -> Literal[True]:\n\nSets key/values based on a dictionary of key-value pairs.\n\n```python\n>>> await cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, expire=100)\nTrue\n```\n\n#### get(key: str, version: Optional[int | str] = None) -> Optional[JSON]:\n\nReturns the value at key name, or None if the key doesn't exist.\n\n```python\n>>> await cache.set(\"key\", \"value\", expire=100)\nTrue\n>>> await cache.get(\"key\")\nvalue\n>>> await cache.get(\"non-existing-key\")\nNone\n```\n\n#### get_many(keys: list[str], version: Optional[int | str] = None) -> list[Optional[JSON]]:\n\nReturns a list of values ordered identically to keys, for every key that does not hold a value or does not exist, \nNone is returned.\n\n```python\n>>> await cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, expire=100)\nTrue\n>>> await cache.get_many([\"key1\", \"non-existing-key\", \"key2\"])\n[\"value1\", None, \"value2\"]\n```\n\n#### delete(key: str, version: Optional[int | str] = None) -> int:\n\nDeletes the key, returns the number of keys removed.\n\n```python\n>>> await cache.set(\"key\", \"value\", expire=100)\nTrue\n>>> await cache.delete(\"key\")\n1\n```\n\n#### delete_many(keys: list[str], version: Optional[int | str] = None) -> int:\n\nDeletes keys specified by keys list, returns the number of keys removed.\n\n```python\n>>> await cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, expire=100)\nTrue\n>>> await cache.delete_many([\"key1\", \"non-existing-key\", \"key2\"])\n2\n```\n\n#### delete_pattern(pattern: str, version: Optional[int | str] = None) -> int:\n\nDeletes keys specified by pattern, returns the number of keys removed.\n\nSupported patterns:\n- h?llo matches hello, hallo and hxllo\n- h*llo matches hllo and heeeello\n- h[ae]llo matches hello and hallo, but not hillo\n- h[^e]llo matches hallo, hbllo, ... but not hello\n- h[a-b]llo matches hallo and hbllo\n\n```python\n>>> await cache.set_many({\"hllo\": \"value1\", \"heeeello\": \"value2\"}, expire=100)\nTrue\n>>> # h*llo matches hllo and heeeello\n>>> await cache.delete_pattern(\"h*llo\")\n2\n```\n\n## Examples\n\n### FastAPI\n\nAll dependencies should be async to avoid running in the external threadpool, even if they just return an instance. \nSee the [FastAPI dependencies](https://fastapi.tiangolo.com/async/#dependencies) documentation for more information.\n\ndepencies.py:\n```python\nfrom impcache import Cache, RedisCacheRepository\n\nasync def cache_dependency() -> Cache:\n    return Cache(\n        repository=RedisCacheRepository(dsn=\"redis://redis:6379/0\"),\n        key_prefix=\"cache\",\n        version=1,\n    )\n```\n\napi.py:\n```python\nfrom fastapi import APIRouter, Depends\nfrom impcache import ICache\n\nfrom .depencies import cache_dependency\n\nrouter = APIRouter()\n\n\n@router.get(\"/test-cache\")\nasync def test_cache(\n        cache: ICache = Depends(cache_dependency),\n):\n    await cache.set(\"key\", \"value\", expire=100)\n    cached_value = await cache.get(\"key\")\n    return {\"cached_value\": cached_value}\n```\n\n## License\nThis project is licensed under the terms of the MIT license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "asyncio,cache,cachemanager,redis",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "impcache",
    "package_url": "https://pypi.org/project/impcache/",
    "platform": null,
    "project_url": "https://pypi.org/project/impcache/",
    "project_urls": {
      "Bug Tracker": "https://github.com/impsite/impcache/issues",
      "Documentation": "https://github.com/impsite/impcache",
      "Homepage": "https://github.com/impsite/impcache"
    },
    "release_url": "https://pypi.org/project/impcache/1.0.2/",
    "requires_dist": [
      "orjson>=3.8.3",
      "redis[hiredis]>=4.4.0"
    ],
    "requires_python": ">=3.11",
    "summary": "Simple async cache with high performance. Easy to use & ready for production.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16326177,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "118808d065fbdede4d5977957a8767cd9959562f5d5ca46f02a8d1a9697c6fa1",
          "md5": "00d0addbfbae078765311002f3bffde3",
          "sha256": "2e2813154e4dd770eaaab122a9ccfa81b3725da47705fe48031276abc3ea4d46"
        },
        "downloads": -1,
        "filename": "impcache-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00d0addbfbae078765311002f3bffde3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 8278,
        "upload_time": "2022-12-24T16:46:05",
        "upload_time_iso_8601": "2022-12-24T16:46:05.799112Z",
        "url": "https://files.pythonhosted.org/packages/11/88/08d065fbdede4d5977957a8767cd9959562f5d5ca46f02a8d1a9697c6fa1/impcache-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6aa893558332970640e9eb7a6c52123c17c6647f458d953342046ec1efe1fea",
          "md5": "b0b71058ec1f720ade09c0b4be4cb946",
          "sha256": "60d65907043c40347209b1cf0bd878bf2a6e7e2a07706eb84a38dfa7677ab59a"
        },
        "downloads": -1,
        "filename": "impcache-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b0b71058ec1f720ade09c0b4be4cb946",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 9309,
        "upload_time": "2022-12-24T16:46:07",
        "upload_time_iso_8601": "2022-12-24T16:46:07.276625Z",
        "url": "https://files.pythonhosted.org/packages/c6/aa/893558332970640e9eb7a6c52123c17c6647f458d953342046ec1efe1fea/impcache-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf4ff9b04fd6f81995bc5acc547a468fe2890a383389c615d4c24e5197afb844",
          "md5": "d2d238ee287a3ca0e285f605d032f015",
          "sha256": "332de9fdc68c820b9fe57402f2a62adaaca09a543ec2b252501edf093acdc3cb"
        },
        "downloads": -1,
        "filename": "impcache-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2d238ee287a3ca0e285f605d032f015",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 8288,
        "upload_time": "2022-12-24T17:23:48",
        "upload_time_iso_8601": "2022-12-24T17:23:48.699561Z",
        "url": "https://files.pythonhosted.org/packages/bf/4f/f9b04fd6f81995bc5acc547a468fe2890a383389c615d4c24e5197afb844/impcache-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d944d87f60af602d81a5a21c5bf611689e8dd98505bb7b7296b21ca248b49708",
          "md5": "5976ee09f6492ab5e93f274a40873566",
          "sha256": "7768c12865be6d09e719c61035b677b44563ec33f3c9d2f04c696b5a03584709"
        },
        "downloads": -1,
        "filename": "impcache-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5976ee09f6492ab5e93f274a40873566",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 9331,
        "upload_time": "2022-12-24T17:23:50",
        "upload_time_iso_8601": "2022-12-24T17:23:50.058040Z",
        "url": "https://files.pythonhosted.org/packages/d9/44/d87f60af602d81a5a21c5bf611689e8dd98505bb7b7296b21ca248b49708/impcache-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5770700553401228fb2a1e459acd6a5dfb185d959f81882c0a223ec24f0b950",
          "md5": "235af4d936709b54c4a3a33483adbb65",
          "sha256": "31f8da593a69ff44dc0c9d62b106f47b009bb70c00dabeaaadba7571e4011ab7"
        },
        "downloads": -1,
        "filename": "impcache-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "235af4d936709b54c4a3a33483adbb65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11",
        "size": 8451,
        "upload_time": "2023-01-06T02:15:42",
        "upload_time_iso_8601": "2023-01-06T02:15:42.511460Z",
        "url": "https://files.pythonhosted.org/packages/c5/77/0700553401228fb2a1e459acd6a5dfb185d959f81882c0a223ec24f0b950/impcache-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5595f987c8df566a47fff5bb585e13ebf6c885030f365ed00654d99a044b6fdd",
          "md5": "1afbacba661b2dc23985534c23bc693b",
          "sha256": "2a456a40cb79f5f0c951cf26e575c335ac9dc33b5886df7c74eedda62835f0db"
        },
        "downloads": -1,
        "filename": "impcache-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1afbacba661b2dc23985534c23bc693b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11",
        "size": 9354,
        "upload_time": "2023-01-06T02:15:43",
        "upload_time_iso_8601": "2023-01-06T02:15:43.924150Z",
        "url": "https://files.pythonhosted.org/packages/55/95/f987c8df566a47fff5bb585e13ebf6c885030f365ed00654d99a044b6fdd/impcache-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5770700553401228fb2a1e459acd6a5dfb185d959f81882c0a223ec24f0b950",
        "md5": "235af4d936709b54c4a3a33483adbb65",
        "sha256": "31f8da593a69ff44dc0c9d62b106f47b009bb70c00dabeaaadba7571e4011ab7"
      },
      "downloads": -1,
      "filename": "impcache-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "235af4d936709b54c4a3a33483adbb65",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11",
      "size": 8451,
      "upload_time": "2023-01-06T02:15:42",
      "upload_time_iso_8601": "2023-01-06T02:15:42.511460Z",
      "url": "https://files.pythonhosted.org/packages/c5/77/0700553401228fb2a1e459acd6a5dfb185d959f81882c0a223ec24f0b950/impcache-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5595f987c8df566a47fff5bb585e13ebf6c885030f365ed00654d99a044b6fdd",
        "md5": "1afbacba661b2dc23985534c23bc693b",
        "sha256": "2a456a40cb79f5f0c951cf26e575c335ac9dc33b5886df7c74eedda62835f0db"
      },
      "downloads": -1,
      "filename": "impcache-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1afbacba661b2dc23985534c23bc693b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11",
      "size": 9354,
      "upload_time": "2023-01-06T02:15:43",
      "upload_time_iso_8601": "2023-01-06T02:15:43.924150Z",
      "url": "https://files.pythonhosted.org/packages/55/95/f987c8df566a47fff5bb585e13ebf6c885030f365ed00654d99a044b6fdd/impcache-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}