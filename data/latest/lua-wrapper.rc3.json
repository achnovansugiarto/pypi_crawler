{
  "info": {
    "author": "Bas Wijnen",
    "author_email": "wijnen@debian.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "This module allows Lua code to be used in Python programs.\n\nThe interface allows passing Python objects into the Lua environment and using\nLua objects in the Python program.\n\n# Simple Example\n\n```Python\n# Setup.\nimport lua\ncode = lua.Lua()\ncode.run('python = require(\"python\")')\t# If you want to use it.\n\n# Define a Python function.\ndef pyfun(arg):\n\tprint('Python function called with arg %s' % arg)\n\n# Define a Lua function.\ncode.run('function luafun(arg) print(\"Lua function called with arg \" .. arg) end')\n\n# Make the Lua function accessible to Python (this could have been done in one step).\nluafun = code.run('return luafun')\n\n# Make the Python function accessible to Lua.\ncode.run(var = 'pyfun', value = pyfun)\n\n# Run the Lua function from Python.\nluafun('from Python')\n\n# Run the Python function from Lua.\ncode.run('pyfun(\"from Lua\")')\n\n# Create Python compound objects from Lua.\nprint(type(code.run('return {1, 2, 3}')))\t# Lua table (not a Python object)\nprint(type(code.run('return python.list{1,2,3}')))\t# Python list\nprint(type(code.run('return python.dict{foo = \"bar\"}')))\t# Python dict\n```\n\nThis generates the following output:\n```\nLua function called with arg from Python\nPython function called with arg from Lua\n<class 'lua.Table'>\n<class 'list'>\n<class 'dict'>\n```\n\n# API description\nThe module API is described below. Note that due to limited time available,\nthis may not be kept entirely up to date. If things don't seem to work as\ndescribed here, please check the source code.\n\n## Module Loading\nAt the time of this writing, when the module is imported it will load Lua\nversion 5.4. This can be adjusted using the environment variable\n`PYTHON_LUA_VERSION`, which should be set to the version (`'5.4'` is the\ndefault). This means that a program which requires a specific Lua version\nshould set this variable before importing the module, even if it is 5.4, to\nmake sure the correct version is loaded. Not doing so will allow the user to\ntry different versions.\n\n```Python\n# Optional. If this is used, it must come before importing lua.\nimport os\nos.environ['PYTHON_LUA_VERSION'] = '5.4'\n\n# Import Lua module.\nimport lua\n```\n\n## Creating a Lua instance\nTo use the module, an instance of the Lua class must be created. Creating\nmultiple instances of this class allows you to have completely separate\nenvironments, which do not share any state with each other. Note that combining\nvariables from different instances in one command results in undefined\nbehavior.\n\nWhen creating an instance, the default is to disable all Lua features that are\na risk for security or user privacy. Each of these features can be enabled by\nsetting the corresponding constructor parameter to True. The features are:\n\n- debug: enable the debugging library. Not actually unsafe (probably?), but should only be enabled explicitly.\n- loadlib: enable the loadlib function. Allows running code on host system and thus cause damage and violate privacy.\n- searchers: enable the default contents of package.searchers. This allows loading lua modules using require. When disabled, only standard modules and modules that have been explicitly provided by the host can be accessed.\n- doloadfile: enable the dofile and loadfile functions. Allows running lua code from external files. Should not pose risks to the system, but does contain a privacy risk, because lua can find out what other lua files are available on the system. Users should also normally expect that an embedded language cannot access external files, so disabling it follows the Principle of Least Astonishment.\n- io: enable the io library. This library allows arbitrary file access on the host system and should only be enabled for trusted Lua code.\n- os: enable all of the os module. Even when not enabled, `clock`, `date`, `difftime`, `setlocale` and `time` are still available. The rest of os allows running executables on the host system. This should only be enabled for trusted Lua code.\n\nAdditionally, the 'python' module, which contains list and dict constructors,\ncan be disabled by setting it to False. It is enabled by default. Note that\nthis setting does not create the `python` variable; it only allows lua code to\n`require` it.\n\nAn example instance that allows access of the host filesystem through `io` is:\n\n```Python\ncode = lua.Lua(io = True)\n```\n\n## Setting up the Lua environment\nLua code will usually require access to some variables or functions from\nPython. There are two methods for granting this access: setting variables, and\nproviding modules.\n\n### Setting variables\nTo set a Lua variable to a Python value, the run() method is used. This method\nis primarily intended for running Lua code (as described below), but it also\nserves to set a variable to a value. If a variable is set to a value and code\nto run is provided in the same call, the variable will be set before the code\nis run, so it has access to it.\n\nIf the variable is mutable (for example, it is a `list`), then changing the\ncontents of the value will result in a changed value in Python. In other words,\nmutable variables are passed by reference and remain owned by Python.\n\n```Python\nmy_list = [1, 2, 3]\ncode.run('foo[2] = \"bar\"', var = 'foo', value = my_list)\n# my_list is now [1, 'bar', 3]. Note that lua-indexing is 1-based.\n```\n\n### Providing modules\nThe more common way to provide access to host functionality is through a module\nthat can be loaded using the `require` function in Lua. This is done by calling\nthe `module` function. The argument is a dict, or a Python module. The contents\nof the argument are provided to Lua. Note that the object itself is not, so if\nnew items are added to the dict, these changes will not show up in Lua. Changes\nto the _values_ of the items will show up, however.\n\n```Python\nimport my_custom_module\ncode.module(my_custom_module)\ncode.run('mod = require \"my_custom_module\"; mod.custom_function()')\n```\n\n## Running Lua code\nThere are two ways to run Lua code. Using the `run()` function demonstrated in\nthe previous section, and using the `run_file()` function.\n\nThe `run_file()` function works very similar to `run()`. There are two\ndifferences:\n\n1. The parameter of `run_file` is a file name, for `run()` it is Lua code.\n1. `run()` allows setting a variable to a Python value. `run_file()` does not.\n\nThe intent of both functions is slightly different: `run()` is meant to be used\nmostly for situations where `eval` might have been used if it was Python code;\n`run_file()` is meant to be used when `exec` is more appropriate. In other\nwords, `run()` would be used for a short computation, while `run_file()` would\nbe more likely to be used for running a potentially large chunk of code.\nBecause of this, it is convenient for `run()` to pass a Python value, or\nperhaps a list or dict, to be used directly, while `run_file()` will normally\nneed much more, and the `module()` function will be used to provide it in a\nmore elegant way.\n\nHowever, while this is the consideration behind the functions, there is nothing\nto enforce it. If you want to run large amounts of code with `run()`, or a\nsingle line computation with `run_file()`, it will work without any problems.\n\n### Return values\nBoth `run()` and `run_file()` can return a value. This is the primary method\nfor accessing Lua values from Python. (The other option is to provide a\ncontainer from Python and injecting a value from Lua.) Because Lua functions\ncan return multiple values, this leads to a usability issue: the return value\ncould always be a sequence, but that is invonvenient for the usual case when\nzero or one value is returned.\n\nThis is solved by converting the result in those cases:\n\n- When 0 values are returned, the functions return None instead.\n- When 1 value is returned, the functions return that value.\n- When 2 or more values are returned, the functions return a list of return values.\n\nThis means that Python cannot see the difference between returning 0 values,\nand returning 1 value which is `nil`, or between multiple values and a single\nlist. Normally this will not be a problem, but if this is important to the\nPython program, it can pass the parameter `keep_single = True`. In that case\nthe returned value is always a list of values, even if it has 0 or 1 elements.\n\n## Operators\nMost Python operators have obvious behavior when applied to Lua objects and\nvice versa. For example, when using `*` the objects will be multiplied.\nHowever, there are some exceptions.\n\n1. In Lua there is a difference between adding numbers (which is done with `+`) and strings (which is done with `..`). Unfortunately there is no appropriate operator available in Python, so `..` has been mapped to `@`, the matrix multiplication operator. This means that running `lua_table @ python_object` from Python will call the `__concat` method in `lua_table`'s metatable, and that running `python_object .. lua_object` from Lua will call the `__matmul__` method on `python_object`. Note that this does not apply to simple objects like numbers and strings, because these are converted into native objects on both sides (so a Lua string that is passed to Python becomes a Python `str` object, and using the @ operator on that does not involve Lua).\n1. Lua uses the `__close` metatable method for to-be-closed variables. Python does not have this concept. The module will call the `__close__` method (which despite its name, does not have a special meaning in Python) on the Python object when the underlying Lua object is closed by Lua.\n\n## Using Lua tables from Python code\nIn addition to all the obvious operators (including `@` as concat) working\nnormally on Lua tables, there are a few extra members defined on them. Note\nthat attributes cannot be used to access table contents, so `luatable.foo` does\nnot work, but `luatable['foo']` does.\n\n- `luatable.dict()`: Converts the table to a Python dict, containing all items.\n- `luatable.list()`: Converts the table to a Python list. Only the values with integer keys are inserted, and the list stops at the first missing element. In other words, this is only useful for lists that don't contain nil \"values\". Also note that the indexing changes: luatable[1] is the first element, and it is the same as luatable.list()[0].\n- `luatable.pop(index = -1)`: Removes the last index (or the given index) from the table and shifts the contents of the table to fill its place using `table.remove`. The index must be an integer. If it is negative, the length of the table is added to it.\n- `code.make_table(data = ())`: Create a Lua table from the given data and return it as a Python object. The object is created in and owned by Lua. The first element in the sequence will have index 1 in the table.\n\n## First elements\nBecause there is a difference between the index of the first element of a list\nin Python (0) and that of a table in Lua (1), indexing such structures from the\nother language can be confusing. The module does not account for this. What\nthis means is that you must be aware of which language owns the object. When\nindexing a Lua table from Python code, the first index is 1, just like in Lua.\nWhen indexing a Python list from Lua, the first index is 0, just like in\nPython.\n\nHere's an example to show this:\n```Python\npython_list = ['zero', 'one', 'two']\nlua_table = code.run('return {\"one\", \"two\", \"three\"}')\n\ncode.run('print(\"element 2 in the python list is two: \" .. list[2])', var = 'list', value = python_list)\nprint('element 2 in the lua table is \"two\":', lua_table[2])\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wijnen/python-lua",
    "keywords": "",
    "license": "AGPL3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lua-wrapper",
    "package_url": "https://pypi.org/project/lua-wrapper/",
    "platform": null,
    "project_url": "https://pypi.org/project/lua-wrapper/",
    "project_urls": {
      "Bug Tracker": "https://github.com/wijnen/python-lua/issues",
      "Homepage": "https://github.com/wijnen/python-lua"
    },
    "release_url": "https://pypi.org/project/lua-wrapper/0.6/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "module for using Lua in Python programs",
    "version": "0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16951925,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e25c32225c62a92f83401b6fa1d47c4c9c1d2db3367faa50f2d0aab041667aa",
          "md5": "b6b275fd4de9b372bfddd04ab40ef9b3",
          "sha256": "f9810b1041bf7ef5daf47fd2a462bf05745dbb5d2a36686a535937c099b97ac2"
        },
        "downloads": -1,
        "filename": "lua_wrapper-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6b275fd4de9b372bfddd04ab40ef9b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 16395,
        "upload_time": "2023-01-28T16:31:04",
        "upload_time_iso_8601": "2023-01-28T16:31:04.673611Z",
        "url": "https://files.pythonhosted.org/packages/8e/25/c32225c62a92f83401b6fa1d47c4c9c1d2db3367faa50f2d0aab041667aa/lua_wrapper-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "007858dfc84e4b882f095a246a26d8d48385158c3310fb98c2d3e56b4e827680",
          "md5": "8cc4b09172383ea043fc05159297ecda",
          "sha256": "0c18865b56cb2c5d3b0dfcc97a757259b61b26619c1299891b3c46337e16b868"
        },
        "downloads": -1,
        "filename": "lua-wrapper-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8cc4b09172383ea043fc05159297ecda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 19587,
        "upload_time": "2023-01-28T16:31:06",
        "upload_time_iso_8601": "2023-01-28T16:31:06.438849Z",
        "url": "https://files.pythonhosted.org/packages/00/78/58dfc84e4b882f095a246a26d8d48385158c3310fb98c2d3e56b4e827680/lua-wrapper-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "709878043d73a368355fbbc99478ef60638cc8edc2293ce2cf78b63c799bd1db",
          "md5": "988c8a2615f76ac0511e38cf12eb68c9",
          "sha256": "3df9ad9fb1b38351d83802fc0cca705e6a381be04930223d2216f57629dd75a6"
        },
        "downloads": -1,
        "filename": "lua_wrapper-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "988c8a2615f76ac0511e38cf12eb68c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 29168,
        "upload_time": "2023-02-19T13:51:44",
        "upload_time_iso_8601": "2023-02-19T13:51:44.766544Z",
        "url": "https://files.pythonhosted.org/packages/70/98/78043d73a368355fbbc99478ef60638cc8edc2293ce2cf78b63c799bd1db/lua_wrapper-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fdec33d443e67e3c72e95b03aff81ab93afa23087cca1b87dfed6f4ec3ce6de",
          "md5": "4a500f2cb6a5bd003ecd3a0ac0b26b0c",
          "sha256": "517409fce2dac29138e1892adead22ca2334bd76e56108c29bbdde22e487b164"
        },
        "downloads": -1,
        "filename": "lua-wrapper-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4a500f2cb6a5bd003ecd3a0ac0b26b0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 32276,
        "upload_time": "2023-02-19T13:51:46",
        "upload_time_iso_8601": "2023-02-19T13:51:46.723273Z",
        "url": "https://files.pythonhosted.org/packages/0f/de/c33d443e67e3c72e95b03aff81ab93afa23087cca1b87dfed6f4ec3ce6de/lua-wrapper-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a29a72e956babb3f839c5935b043ccc8ea1128b3195480b4b845020552324cff",
          "md5": "5c77a4c68b522103f9c063e7c1d8eab6",
          "sha256": "2299ba6eefaf67671b65dcfdbc39eb50a2e4df9e39a8c817ad27e2bcbfe4be67"
        },
        "downloads": -1,
        "filename": "lua_wrapper-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c77a4c68b522103f9c063e7c1d8eab6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 29044,
        "upload_time": "2023-02-20T23:59:41",
        "upload_time_iso_8601": "2023-02-20T23:59:41.457283Z",
        "url": "https://files.pythonhosted.org/packages/a2/9a/72e956babb3f839c5935b043ccc8ea1128b3195480b4b845020552324cff/lua_wrapper-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60f6b4b3ecee7fb3d7ae70e37ad486f6a3c93d743ab55a3c87dc22202beda99",
          "md5": "5d848224567457a78fe004c933ec15a4",
          "sha256": "97effce7d6740d7cf19237165d5c535631a110b6e42748babee6e3d00221d82b"
        },
        "downloads": -1,
        "filename": "lua-wrapper-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5d848224567457a78fe004c933ec15a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 32266,
        "upload_time": "2023-02-20T23:59:43",
        "upload_time_iso_8601": "2023-02-20T23:59:43.360954Z",
        "url": "https://files.pythonhosted.org/packages/b6/0f/6b4b3ecee7fb3d7ae70e37ad486f6a3c93d743ab55a3c87dc22202beda99/lua-wrapper-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a29a72e956babb3f839c5935b043ccc8ea1128b3195480b4b845020552324cff",
        "md5": "5c77a4c68b522103f9c063e7c1d8eab6",
        "sha256": "2299ba6eefaf67671b65dcfdbc39eb50a2e4df9e39a8c817ad27e2bcbfe4be67"
      },
      "downloads": -1,
      "filename": "lua_wrapper-0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c77a4c68b522103f9c063e7c1d8eab6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 29044,
      "upload_time": "2023-02-20T23:59:41",
      "upload_time_iso_8601": "2023-02-20T23:59:41.457283Z",
      "url": "https://files.pythonhosted.org/packages/a2/9a/72e956babb3f839c5935b043ccc8ea1128b3195480b4b845020552324cff/lua_wrapper-0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60f6b4b3ecee7fb3d7ae70e37ad486f6a3c93d743ab55a3c87dc22202beda99",
        "md5": "5d848224567457a78fe004c933ec15a4",
        "sha256": "97effce7d6740d7cf19237165d5c535631a110b6e42748babee6e3d00221d82b"
      },
      "downloads": -1,
      "filename": "lua-wrapper-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5d848224567457a78fe004c933ec15a4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 32266,
      "upload_time": "2023-02-20T23:59:43",
      "upload_time_iso_8601": "2023-02-20T23:59:43.360954Z",
      "url": "https://files.pythonhosted.org/packages/b6/0f/6b4b3ecee7fb3d7ae70e37ad486f6a3c93d743ab55a3c87dc22202beda99/lua-wrapper-0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}