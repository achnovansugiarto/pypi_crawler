{
  "info": {
    "author": "Chris Moffitt",
    "author_email": "chris@moffitts.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# sidetable\n\n\n[![Pypi link](https://img.shields.io/pypi/v/sidetable.svg)](https://pypi.python.org/pypi/sidetable)\n![PyPI - Downloads](https://img.shields.io/pypi/dw/sidetable)\n\nsidetable started as a supercharged combination of pandas `value_counts` plus `crosstab` \nthat builds simple but useful summary tables of your pandas DataFrame. It has since expanded \nto provide support for common and useful pandas tasks such as adding subtotals to your \nDataFrame or flattening hierarchical columns.\n\n\nUsage is straightforward. Install and `import sidetable`. Then access it through the \nnew `.stb` accessor on your DataFrame. \n\nFor the Titanic data: `df.stb.freq(['class'])` will build a frequency table like this:\n\n|    | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | Third   |     491 |   55.1066 |                491 |              55.1066 |\n|  1 | First   |     216 |   24.2424 |                707 |              79.349  |\n|  2 | Second  |     184 |   20.651  |                891 |             100      |\n\nYou can also summarize missing values with `df.stb.missing()`:\n\n|             |   missing |   total |   percent |\n|:------------|----------:|--------:|----------:|\n| deck        |       688 |     891 | 77.2166   |\n| age         |       177 |     891 | 19.8653   |\n| embarked    |         2 |     891 |  0.224467 |\n| embark_town |         2 |     891 |  0.224467 |\n| survived    |         0 |     891 |  0        |\n| pclass      |         0 |     891 |  0        |\n| sex         |         0 |     891 |  0        |\n| sibsp       |         0 |     891 |  0        |\n| parch       |         0 |     891 |  0        |\n| fare        |         0 |     891 |  0        |\n| class       |         0 |     891 |  0        |\n| who         |         0 |     891 |  0        |\n| adult_male  |         0 |     891 |  0        |\n| alive       |         0 |     891 |  0        |\n| alone       |         0 |     891 |  0        |\n\nYou can group the data and add subtotals and grand totals with `stb.subtotal()`:\n\n```python\ndf.groupby(['sex', 'class']).agg({'fare': ['sum']}).stb.subtotal()\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>fare</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>sum</th>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <th>class</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">female</th>\n      <th>First</th>\n      <td>9975.8250</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>1669.7292</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>2321.1086</td>\n    </tr>\n    <tr>\n      <th>female - subtotal</th>\n      <td>13966.6628</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">male</th>\n      <th>First</th>\n      <td>8201.5875</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>2132.1125</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>4393.5865</td>\n    </tr>\n    <tr>\n      <th>male - subtotal</th>\n      <td>14727.2865</td>\n    </tr>\n    <tr>\n      <th>grand_total</th>\n      <th></th>\n      <td>28693.9493</td>\n    </tr>\n  </tbody>\n</table>\n\nYou can also turn a hierarchical column structure into this:\n\n```python\ntitanic.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack().stb.flatten()\n```\n\n|    | embark_town   | class   |   fare_sum_female |   fare_sum_male |   age_mean_female |   age_mean_male |\n|---:|:--------------|:--------|------------------:|----------------:|------------------:|----------------:|\n|  0 | Cherbourg     | First   |          4972.53  |        3928.54  |           36.0526 |         40.1111 |\n|  1 | Cherbourg     | Second  |           176.879 |         254.212 |           19.1429 |         25.9375 |\n|  2 | Cherbourg     | Third   |           337.983 |         402.146 |           14.0625 |         25.0168 |\n|  3 | Queenstown    | First   |            90     |          90     |           33      |         44      |\n|  4 | Queenstown    | Second  |            24.7   |          12.35  |           30      |         57      |\n|  5 | Queenstown    | Third   |           340.159 |         465.046 |           22.85   |         28.1429 |\n|  6 | Southampton   | First   |          4753.29  |        4183.05  |           32.7045 |         41.8972 |\n|  7 | Southampton   | Second  |          1468.15  |        1865.55  |           29.7197 |         30.8759 |\n|  8 | Southampton   | Third   |          1642.97  |        3526.39  |           23.2237 |         26.5748 |\n\n\nsidetable has several useful features:\n\n* See total counts and their relative percentages in one table. This is roughly equivalent to combining the\n  output of `value_counts()` and `value_counts(normalize=True)` into one table.\n* Include cumulative totals and percentages to better understand your thresholds. \n  The [Pareto principle](https://en.wikipedia.org/wiki/Pareto_principle) applies to many different scenarios\n  and this function makes it easy to see how your data is cumulatively distributed.\n* Aggregate multiple columns together to see frequency counts for grouped data.\n* Provide a threshold point above which all data is grouped into a single bucket. This is useful for\n  quickly identifying the areas to focus your analysis.\n* Get a count of the missing values in your data.\n* Count the number of unique values for each column.\n* Add grand totals on any DataFrame and subtotals to any grouped DataFrame.\n* Pretty print columns\n\n## Table of Contents:\n\n- [Quick Start](#quickstart)\n- [Rationale](#rationale)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [freq](#freq)\n  - [counts](#counts)\n  - [missing](#missing)\n  - [subtotal](#subtotal)\n  - [flatten](#flatten)\n  - [prettyprint](#prettyprint)\n- [Caveats](#caveats)\n- [TODO](#todo)\n- [Contributing](#contributing)\n- [Credits](#credits)\n\n## Quickstart\nFor the impatient:\n\n```batch\n$ python -m pip install sidetable\n```\n\n```python\nimport sidetable\nimport pandas as pd\n\n# Create your DataFrame\ndf = pd.read_csv(myfile.csv)\n\n# Build a frequency table for one or more columns\ndf.stb.freq(['column1', 'column2'])\n\n# See what data is missing\ndf.stb.missing()\n\n# Group data and add a subtotal\ndf.groupby(['column1', 'column2'])['col3'].sum().stb.subtotal()\n```\nThat's it. \n\nRead on for more details and more examples of what you can do sidetable.\n\n## Rationale\nThe idea behind sidetable is that there are a handful of useful data analysis tasks that\nyou might run on any data set early in the data analysis process. While each of these\ntasks can be done in a handful of lines of pandas code, it is a lot of typing and \ndifficult to remember.\n\nIn addition to providing useful functionality, this project is also a test to see how to\nbuild custom accessors using some of pandas relatively new API. I am hopeful this can\nserve as a model for other projects whether open source or just for your own usage.\nPlease check out the [release announcement](https://pbpython.com/sidetable.html) for more\ninformation about the usage and how to use this as a model for your own projects.\n\nThe solutions in sidetable are heavily based on three sources:\n\n- This [tweet thread](https://twitter.com/pmbaumgartner/status/1235925419012087809) by Peter Baumgartner\n- An [excellent article](https://opendatascience.com/frequencies-and-chaining-in-python-pandas/)\n  by Steve Miller that lays out many of the code concepts incorporated into sidetable.\n- Ted Petrou's [post](https://medium.com/dunder-data/finding-the-percentage-of-missing-values-in-a-pandas-dataframe-a04fa00f84ab) \n  on finding the percentage of missing values in a DataFrame.\n\nI very much appreciate the work that all three authors did to point me in this direction.\n\n## Installation\n\n```batch\n\n$  python -m pip install -U sidetable\n```\n\nThis is the preferred method to install sidetable, as it will always\ninstall the most recent stable release. sidetable requires pandas 1.0 or higher and no\nadditional dependencies. It should run anywhere that pandas runs.\n\nIf you prefer to use conda, sidetable is available on conda-forge:\n\n```batch\n$ conda install -c conda-forge sidetable\n```\n\n## Usage\n```python\nimport pandas as pd\nimport sidetable\nimport seaborn as sns\n\ndf = sns.load_dataset('titanic')\n```\n\nsidetable uses the pandas DataFrame [accessor api](https://pandas.pydata.org/pandas-docs/stable/development/extending.html) \nto add a `.stb` accessor to all of your DataFrames. Once you `import sidetable` you are ready to \ngo. In these examples, I will be using seaborn's Titanic dataset as an example but\nseaborn is not a direct dependency.\n\n### freq\nIf you have used `value_counts()` before, you have probably wished it were easier to\ncombine the values with percentage distribution.\n\n```python\ndf['class'].value_counts()\n\nThird     491\nFirst     216\nSecond    184\nName: class, dtype: int64\n\ndf['class'].value_counts(normalize=True)\n\nThird     0.551066\nFirst     0.242424\nSecond    0.206510\nName: class, dtype: float64\n```\n\nWhich can be done, but is messy and a lot of typing and remembering:\n\n```python\npd.concat([df['class'].value_counts().rename('count'), \n        df['class'].value_counts(normalize=True).mul(100).rename('percentage')], axis=1)\n```\n|        |   count |   percentage |\n|:-------|--------:|-------------:|\n| Third  |     491 |      55.1066 |\n| First  |     216 |      24.2424 |\n| Second |     184 |      20.651  |\n\nUsing sidetable is much simpler and you get cumulative totals, percents and more flexibility:\n\n```python\ndf.stb.freq(['class'])\n```\n|    | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | Third   |     491 |   55.1066 |                491 |              55.1066 |\n|  1 | First   |     216 |   24.2424 |                707 |              79.349  |\n|  2 | Second  |     184 |   20.651  |                891 |             100      |\n\nIf you want to style the results so percentages and large numbers are easier to read, \nuse `style=True`:\n\n```python\ndf.stb.freq(['class'], style=True)\n```\n|    | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | Third   |     491 |  55.11%   |                491 |               55.11% |\n|  1 | First   |     216 |  24.24%   |                707 |               79.35% |\n|  2 | Second  |     184 |  20.65%   |                891 |              100.00% |\n\n\n\nIn addition, you can group columns together. If we want to see the breakdown among\nclass and sex:\n\n```python\ndf.stb.freq(['sex', 'class'])\n```\n|    | sex    | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:-------|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | male   | Third   |     347 |  38.945   |                347 |              38.945  |\n|  1 | female | Third   |     144 |  16.1616  |                491 |              55.1066 |\n|  2 | male   | First   |     122 |  13.6925  |                613 |              68.7991 |\n|  3 | male   | Second  |     108 |  12.1212  |                721 |              80.9203 |\n|  4 | female | First   |      94 |  10.5499  |                815 |              91.4703 |\n|  5 | female | Second  |      76 |   8.52974 |                891 |             100      |\n\nYou can use as many groupings as you would like.\n\nBy default, sidetable counts the data. However, you can specify a `value` argument to \nindicate that the data should be summed based on the data in another column. \nFor this data set, we can see how the fares are distributed by class:\n\n```python\ndf.stb.freq(['class'], value='fare')\n```\n|    | class   |     fare |   percent |   cumulative_fare |   cumulative_percent |\n|---:|:--------|---------:|----------:|------------------:|---------------------:|\n|  0 | First   | 18177.4  |   63.3493 |           18177.4 |              63.3493 |\n|  1 | Third   |  6714.7  |   23.4011 |           24892.1 |              86.7504 |\n|  2 | Second  |  3801.84 |   13.2496 |           28693.9 |             100      |\n\nAnother feature of sidetable is that you can specify a threshold. For many data analysis,\nyou may want to break down into large groupings to focus on and ignore others. You can use\nthe `thresh` argument to define a threshold and group all entries above that threshold \ninto an \"other\" grouping:\n\n```python\ndf.stb.freq(['class', 'who'], value='fare', thresh=80)\n```\n|    | class   | who    |    fare |   percent |   cumulative_fare |   cumulative_percent |\n|---:|:--------|:-------|--------:|----------:|------------------:|---------------------:|\n|  0 | First   | woman  | 9492.94 |  33.0834  |           9492.94 |              33.0834 |\n|  1 | First   | man    | 7848.18 |  27.3513  |          17341.1  |              60.4348 |\n|  2 | Third   | man    | 3617.53 |  12.6073  |          20958.6  |              73.042  |\n|  3 | Second  | man    | 1886.36 |   6.57406 |          22845    |              79.6161 |\n|  4 | others  | others | 5848.95 |  20.3839  |          28693.9  |             100      |\n\nYou can further customize by specifying the label to use for all the others:\n```python\ndf.stb.freq(['class', 'who'], value='fare', thresh=80, other_label='All others')\n```\n|    | class      | who        |    fare |   percent |   cumulative_fare |   cumulative_percent |\n|---:|:-----------|:-----------|--------:|----------:|------------------:|---------------------:|\n|  0 | First      | woman      | 9492.94 |  33.0834  |           9492.94 |              33.0834 |\n|  1 | First      | man        | 7848.18 |  27.3513  |          17341.1  |              60.4348 |\n|  2 | Third      | man        | 3617.53 |  12.6073  |          20958.6  |              73.042  |\n|  3 | Second     | man        | 1886.36 |   6.57406 |          22845    |              79.6161 |\n|  4 | All others | All others | 5848.95 |  20.3839  |          28693.9  |             100      |\n\n### counts\nThe `counts()` function shows how many unique values are in each column as well as \nthe most and least frequent values & their total counts. This summary view can help you determine if you need\nto convert data to a categorical value. It can also help you understand the high \nlevel structure of your data.\n\n```python\ndf.stb.counts()\n```\n|             |   count |   unique | most_freq   |   most_freq_count | least_freq   |   least_freq_count |\n|:------------|--------:|---------:|:------------|------------------:|:-------------|-------------------:|\n| survived    |     891 |        2 | 0           |               549 | 1            |                342 |\n| sex         |     891 |        2 | male        |               577 | female       |                314 |\n| adult_male  |     891 |        2 | True        |               537 | False        |                354 |\n| alive       |     891 |        2 | no          |               549 | yes          |                342 |\n| alone       |     891 |        2 | True        |               537 | False        |                354 |\n| pclass      |     891 |        3 | 3           |               491 | 2            |                184 |\n| embarked    |     889 |        3 | S           |               644 | Q            |                 77 |\n| class       |     891 |        3 | Third       |               491 | Second       |                184 |\n| who         |     891 |        3 | man         |               537 | child        |                 83 |\n| embark_town |     889 |        3 | Southampton |               644 | Queenstown   |                 77 |\n| sibsp       |     891 |        7 | 0           |               608 | 5            |                  5 |\n| parch       |     891 |        7 | 0           |               678 | 6            |                  1 |\n| deck        |     203 |        7 | C           |                59 | G            |                  4 |\n| age         |     714 |       88 | 24.0        |                30 | 20.5         |                  1 |\n| fare        |     891 |      248 | 8.05        |                43 | 63.3583      |                  1 |\n\nBy default, all data types are included but you may use the `exclude` and `include` parameters\nto select specific types of columns. The syntax is the same as pandas \n[select_dtypes](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.select_dtypes.html)\n\nFor example,\n```python\ndf.stb.counts(exclude='number')\n```\n\n|             |   count |   unique | most_freq   |   most_freq_count | least_freq   |   least_freq_count |\n|:------------|--------:|---------:|:------------|------------------:|:-------------|-------------------:|\n| sex         |     891 |        2 | male        |               577 | female       |                314 |\n| adult_male  |     891 |        2 | True        |               537 | False        |                354 |\n| alive       |     891 |        2 | no          |               549 | yes          |                342 |\n| alone       |     891 |        2 | True        |               537 | False        |                354 |\n| embarked    |     889 |        3 | S           |               644 | Q            |                 77 |\n| class       |     891 |        3 | Third       |               491 | Second       |                184 |\n| who         |     891 |        3 | man         |               537 | child        |                 83 |\n| embark_town |     889 |        3 | Southampton |               644 | Queenstown   |                 77 |\n| deck        |     203 |        7 | C           |                59 | G            |                  4 |\n\n### missing\nsidetable also includes a summary table that shows the missing values in\nyour data by count and percentage of total missing values in a column.\n\n```python\ndf.stb.missing()\n```\n|             |   missing |   total |   percent |\n|:------------|----------:|--------:|----------:|\n| deck        |       688 |     891 | 77.2166   |\n| age         |       177 |     891 | 19.8653   |\n| embarked    |         2 |     891 |  0.224467 |\n| embark_town |         2 |     891 |  0.224467 |\n| survived    |         0 |     891 |  0        |\n| pclass      |         0 |     891 |  0        |\n| sex         |         0 |     891 |  0        |\n| sibsp       |         0 |     891 |  0        |\n| parch       |         0 |     891 |  0        |\n| fare        |         0 |     891 |  0        |\n| class       |         0 |     891 |  0        |\n| who         |         0 |     891 |  0        |\n| adult_male  |         0 |     891 |  0        |\n| alive       |         0 |     891 |  0        |\n| alone       |         0 |     891 |  0        |\n\nIf you wish to see the results with styles applied to the Percent and Total column,\nuse:\n\n```python\ndf.stb.missing(style=True)\n```\n\n|             |   missing |   total |    percent |\n|:------------|----------:|--------:|-----------:|\n| deck        |       688 |     891 | 77.22%     |\n| age         |       177 |     891 | 19.87%     |\n| embarked    |         2 |     891 | 0.22%      |\n| embark_town |         2 |     891 | 0.22%      |\n| survived    |         0 |     891 | 0          |\n| pclass      |         0 |     891 | 0          |\n| sex         |         0 |     891 | 0          |\n| sibsp       |         0 |     891 | 0          |\n| parch       |         0 |     891 | 0          |\n| fare        |         0 |     891 | 0          |\n| class       |         0 |     891 | 0          |\n| who         |         0 |     891 | 0          |\n| adult_male  |         0 |     891 | 0          |\n| alive       |         0 |     891 | 0          |\n| alone       |         0 |     891 | 0          |\n\nFinally, you can exclude the columns that have 0 missing values using\nthe `clip_0=True` parameter:\n\n```python\ndf.stb.missing(clip_0=True, style=True)\n```\n|             |   missing |   total |   percent |\n|:------------|----------:|--------:|----------:|\n| deck        |       688 |     891 | 77.22%    |\n| age         |       177 |     891 | 19.87%    |\n| embarked    |         2 |     891 |  0.22%    |\n| embark_town |         2 |     891 |  0.22%    |\n\n\n### subtotal\nAnother useful function is the subtotal function. Trying to add a subtotal \nto grouped pandas data is not easy. sidetable adds a `subtotal()` function that\nmakes adds a subtotal at one or more levels of a DataFrame.\n\nThe subtotal function can be applied to a simple DataFrame in order to add a Grand Total\nlabel:\n\n```python\ndf.stb.subtotal()\n```\n\n|             |   survived |   pclass | sex    |     age |   sibsp |   parch |     fare | embarked   | class   | who   |   adult_male | deck   | embark_town   | alive   |   alone |\n|:------------|-----------:|---------:|:-------|--------:|--------:|--------:|---------:|:-----------|:--------|:------|-------------:|:-------|:--------------|:--------|--------:|\n| 887         |          1 |        1 | female |    19   |       0 |       0 |    30    | S          | First   | woman |            0 | B      | Southampton   | yes     |       1 |\n| 888         |          0 |        3 | female |   nan   |       1 |       2 |    23.45 | S          | Third   | woman |            0 | nan    | Southampton   | no      |       0 |\n| 889         |          1 |        1 | male   |    26   |       0 |       0 |    30    | C          | First   | man   |            1 | C      | Cherbourg     | yes     |       1 |\n| 890         |          0 |        3 | male   |    32   |       0 |       0 |     7.75 | Q          | Third   | man   |            1 | nan    | Queenstown    | no      |       1 |\n| grand_total |        342 |     2057 | nan    | 21205.2 |     466 |     340 | 28693.9  | nan        | nan     | nan   |          537 | nan    | nan           | nan     |     537 |\n\nThe real power of subtotal is being able to add it to one or more levels of your \ngrouped data. For example, you can group the data and add a subtotal at each level:\n\n```python\ndf.groupby(['sex', 'class', 'embark_town']).agg({'fare': ['sum']}).stb.subtotal()\n```\n\nWhich yields this view (truncated for simplicity):\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>fare</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>sum</th>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <th>class</th>\n      <th>embark_town</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"13\" valign=\"top\">female</th>\n      <th rowspan=\"4\" valign=\"top\">First</th>\n      <th>Cherbourg</th>\n      <td>4972.5333</td>\n    </tr>\n    <tr>\n      <th>Queenstown</th>\n      <td>90.0000</td>\n    </tr>\n    <tr>\n      <th>Southampton</th>\n      <td>4753.2917</td>\n    </tr>\n    <tr>\n      <th>female | First - subtotal</th>\n      <td>9815.8250</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Second</th>\n      <th>Cherbourg</th>\n      <td>176.8792</td>\n    </tr>\n    <tr>\n      <th>Queenstown</th>\n      <td>24.7000</td>\n    </tr>\n    <tr>\n      <th>Southampton</th>\n      <td>1468.1500</td>\n    </tr>\n    <tr>\n      <th>female | Second - subtotal</th>\n      <td>1669.7292</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Third</th>\n      <th>Cherbourg</th>\n      <td>337.9833</td>\n    </tr>\n    <tr>\n      <th>Queenstown</th>\n      <td>340.1585</td>\n    </tr>\n    <tr>\n      <th>Southampton</th>\n      <td>1642.9668</td>\n    </tr>\n    <tr>\n      <th>female | Third - subtotal</th>\n      <td>2321.1086</td>\n    </tr>\n    <tr>\n      <th>female - subtotal</th>\n      <th></th>\n      <td>13806.6628</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">male</th>\n      <th rowspan=\"2\" valign=\"top\">First</th>\n      <th>Cherbourg</th>\n      <td>3928.5417</td>\n    </tr>\n    <tr>\n      <th>Queenstown</th>\n      <td>90.0000</td>\n    </tr>\n  </tbody>\n</table>\n\nBy default, every level in the DataFrame will be subtotaled but you can control this behavior\nby using the `sub_level` argument. For instance, you can subtotal on `sex` and `class` by \npassing the argument `sub_level=[1,2]`\n\n```python\nsummary_table = df.groupby(['sex', 'class', 'embark_town']).agg({'fare': ['sum']})\nsummary_table.stb.subtotal(sub_level=[1, 2])\n```\n\nThe `subtotal` function also allows the user to configure the labels and separators used in \nthe subtotal and Grand Total by using the `grand_label`, `sub_label`, `show_sep` and `sep`\narguments. \n\n### flatten\nWhen grouping and pivoting data, you can end up with a DataFrame that has a multiindex.\nOften times, you want a simple flat representation of the data.\n\nFor example, we can build a table using a `groupby()` plus `unstack()` that looks like this:\n\n```python\ndf.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack()\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">fare</th>\n      <th colspan=\"2\" halign=\"left\">age</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">sum</th>\n      <th colspan=\"2\" halign=\"left\">mean</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>sex</th>\n      <th>female</th>\n      <th>male</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>embark_town</th>\n      <th>class</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Cherbourg</th>\n      <th>First</th>\n      <td>4972.5333</td>\n      <td>3928.5417</td>\n      <td>36.052632</td>\n      <td>40.111111</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>176.8792</td>\n      <td>254.2125</td>\n      <td>19.142857</td>\n      <td>25.937500</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>337.9833</td>\n      <td>402.1462</td>\n      <td>14.062500</td>\n      <td>25.016800</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Queenstown</th>\n      <th>First</th>\n      <td>90.0000</td>\n      <td>90.0000</td>\n      <td>33.000000</td>\n      <td>44.000000</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>24.7000</td>\n      <td>12.3500</td>\n      <td>30.000000</td>\n      <td>57.000000</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>340.1585</td>\n      <td>465.0458</td>\n      <td>22.850000</td>\n      <td>28.142857</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Southampton</th>\n      <th>First</th>\n      <td>4753.2917</td>\n      <td>4183.0458</td>\n      <td>32.704545</td>\n      <td>41.897188</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>1468.1500</td>\n      <td>1865.5500</td>\n      <td>29.719697</td>\n      <td>30.875889</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>1642.9668</td>\n      <td>3526.3945</td>\n      <td>23.223684</td>\n      <td>26.574766</td>\n    </tr>\n  </tbody>\n</table>\n\nIf you wish to flatten it, use `stb.flatten()`:\n\n```python\ndf.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack().stb.flatten()\n```\n\n|    | embark_town   | class   |   fare_sum_female |   fare_sum_male |   age_mean_female |   age_mean_male |\n|---:|:--------------|:--------|------------------:|----------------:|------------------:|----------------:|\n|  0 | Cherbourg     | First   |          4972.53  |        3928.54  |           36.0526 |         40.1111 |\n|  1 | Cherbourg     | Second  |           176.879 |         254.212 |           19.1429 |         25.9375 |\n|  2 | Cherbourg     | Third   |           337.983 |         402.146 |           14.0625 |         25.0168 |\n|  3 | Queenstown    | First   |            90     |          90     |           33      |         44      |\n|  4 | Queenstown    | Second  |            24.7   |          12.35  |           30      |         57      |\n|  5 | Queenstown    | Third   |           340.159 |         465.046 |           22.85   |         28.1429 |\n|  6 | Southampton   | First   |          4753.29  |        4183.05  |           32.7045 |         41.8972 |\n|  7 | Southampton   | Second  |          1468.15  |        1865.55  |           29.7197 |         30.8759 |\n|  8 | Southampton   | Third   |          1642.97  |        3526.39  |           23.2237 |         26.5748 |\n\nflatten will also take additional arguments:\n* Add a custom separator using the `sep` argument - `stb.flatten(sep='|')`\n* Control whether or not to reset the index using `reset` argument - `stb.flatten(reset=False)`\n* Reorganize the output levels using `levels` argument `levels=2`\n  * `levels` can also take a list of valid levels if you want to reorganize the display\n     `levels=[0,2]`\n\n```python\nfares = df.groupby(['embark_town', 'class', 'sex']).agg({'fare': ['sum'], 'age': ['mean']}).unstack()\nfares.stb.flatten(sep='|', reset=False, levels=[0,2])\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>fare|female</th>\n      <th>fare|male</th>\n      <th>fare|female</th>\n      <th>fare|male</th>\n      <th>age|female</th>\n      <th>age|male</th>\n    </tr>\n    <tr>\n      <th>embark_town</th>\n      <th>class</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Cherbourg</th>\n      <th>First</th>\n      <td>4972.5333</td>\n      <td>3928.5417</td>\n      <td>115.640309</td>\n      <td>93.536707</td>\n      <td>36.052632</td>\n      <td>40.111111</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>176.8792</td>\n      <td>254.2125</td>\n      <td>25.268457</td>\n      <td>25.421250</td>\n      <td>19.142857</td>\n      <td>25.937500</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>337.9833</td>\n      <td>402.1462</td>\n      <td>14.694926</td>\n      <td>9.352237</td>\n      <td>14.062500</td>\n      <td>25.016800</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Queenstown</th>\n      <th>First</th>\n      <td>90.0000</td>\n      <td>90.0000</td>\n      <td>90.000000</td>\n      <td>90.000000</td>\n      <td>33.000000</td>\n      <td>44.000000</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>24.7000</td>\n      <td>12.3500</td>\n      <td>12.350000</td>\n      <td>12.350000</td>\n      <td>30.000000</td>\n      <td>57.000000</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>340.1585</td>\n      <td>465.0458</td>\n      <td>10.307833</td>\n      <td>11.924251</td>\n      <td>22.850000</td>\n      <td>28.142857</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Southampton</th>\n      <th>First</th>\n      <td>4753.2917</td>\n      <td>4183.0458</td>\n      <td>99.026910</td>\n      <td>52.949947</td>\n      <td>32.704545</td>\n      <td>41.897188</td>\n    </tr>\n    <tr>\n      <th>Second</th>\n      <td>1468.1500</td>\n      <td>1865.5500</td>\n      <td>21.912687</td>\n      <td>19.232474</td>\n      <td>29.719697</td>\n      <td>30.875889</td>\n    </tr>\n    <tr>\n      <th>Third</th>\n      <td>1642.9668</td>\n      <td>3526.3945</td>\n      <td>18.670077</td>\n      <td>13.307149</td>\n      <td>23.223684</td>\n      <td>26.574766</td>\n    </tr>\n  </tbody>\n</table>\n\n### prettyprint\nThis function interprets the magnitude of your numeric results and returns a nicely\nformatted version of all the numbers. This can be used on a full DataFrame or during\nyour analysis of aggregated data.\n\nFor instance, if you are summarizing data, you may get something that looks like this:\n\n```python\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'})\n```\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>fare</th>\n    </tr>\n    <tr>\n      <th>pclass</th>\n      <th>sex</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">1</th>\n      <th>female</th>\n      <td>9975.8250</td>\n    </tr>\n    <tr>\n      <th>male</th>\n      <td>8201.5875</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">2</th>\n      <th>female</th>\n      <td>1669.7292</td>\n    </tr>\n    <tr>\n      <th>male</th>\n      <td>2132.1125</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">3</th>\n      <th>female</th>\n      <td>2321.1086</td>\n    </tr>\n    <tr>\n      <th>male</th>\n      <td>4393.5865</td>\n    </tr>\n  </tbody>\n</table>\n\nUse `stb.pretty()` to format it nicely so you can have the same order or magnitude for all numbers:\n\n```python\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'}).div(df['fare'].sum()).stb.pretty()\n```\n<table id=\"T_1e94c\">\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_1e94c_level0_col0\" class=\"col_heading level0 col0\" >fare</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >pclass</th>\n      <th class=\"index_name level1\" >sex</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_1e94c_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">1</th>\n      <th id=\"T_1e94c_level1_row0\" class=\"row_heading level1 row0\" >female</th>\n      <td id=\"T_1e94c_row0_col0\" class=\"data row0 col0\" >9.98k</td>\n    </tr>\n    <tr>\n      <th id=\"T_1e94c_level1_row1\" class=\"row_heading level1 row1\" >male</th>\n      <td id=\"T_1e94c_row1_col0\" class=\"data row1 col0\" >8.20k</td>\n    </tr>\n    <tr>\n      <th id=\"T_1e94c_level0_row2\" class=\"row_heading level0 row2\" rowspan=\"2\">2</th>\n      <th id=\"T_1e94c_level1_row2\" class=\"row_heading level1 row2\" >female</th>\n      <td id=\"T_1e94c_row2_col0\" class=\"data row2 col0\" >1.67k</td>\n    </tr>\n    <tr>\n      <th id=\"T_1e94c_level1_row3\" class=\"row_heading level1 row3\" >male</th>\n      <td id=\"T_1e94c_row3_col0\" class=\"data row3 col0\" >2.13k</td>\n    </tr>\n    <tr>\n      <th id=\"T_1e94c_level0_row4\" class=\"row_heading level0 row4\" rowspan=\"2\">3</th>\n      <th id=\"T_1e94c_level1_row4\" class=\"row_heading level1 row4\" >female</th>\n      <td id=\"T_1e94c_row4_col0\" class=\"data row4 col0\" >2.32k</td>\n    </tr>\n    <tr>\n      <th id=\"T_1e94c_level1_row5\" class=\"row_heading level1 row5\" >male</th>\n      <td id=\"T_1e94c_row5_col0\" class=\"data row5 col0\" >4.39k</td>\n    </tr>\n  </tbody>\n</table>\n\nHere's an example of a percentage format:\n\n```python\ndf.groupby(['pclass', 'sex']).agg({'fare': 'sum'}).div(df['fare'].sum()).stb.pretty(precision=0, caption=\"Fare Percentage\")\n```\n\n<table id=\"T_e031b\">\n<caption>Fare Percentage</caption>\n  <thead>\n    <tr>\n      <th class=\"blank\" >&nbsp;</th>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_e031b_level0_col0\" class=\"col_heading level0 col0\" >fare</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >pclass</th>\n      <th class=\"index_name level1\" >sex</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e031b_level0_row0\" class=\"row_heading level0 row0\" rowspan=\"2\">1</th>\n      <th id=\"T_e031b_level1_row0\" class=\"row_heading level1 row0\" >female</th>\n      <td id=\"T_e031b_row0_col0\" class=\"data row0 col0\" >35%</td>\n    </tr>\n    <tr>\n      <th id=\"T_e031b_level1_row1\" class=\"row_heading level1 row1\" >male</th>\n      <td id=\"T_e031b_row1_col0\" class=\"data row1 col0\" >29%</td>\n    </tr>\n    <tr>\n      <th id=\"T_e031b_level0_row2\" class=\"row_heading level0 row2\" rowspan=\"2\">2</th>\n      <th id=\"T_e031b_level1_row2\" class=\"row_heading level1 row2\" >female</th>\n      <td id=\"T_e031b_row2_col0\" class=\"data row2 col0\" >6%</td>\n    </tr>\n    <tr>\n      <th id=\"T_e031b_level1_row3\" class=\"row_heading level1 row3\" >male</th>\n      <td id=\"T_e031b_row3_col0\" class=\"data row3 col0\" >7%</td>\n    </tr>\n    <tr>\n      <th id=\"T_e031b_level0_row4\" class=\"row_heading level0 row4\" rowspan=\"2\">3</th>\n      <th id=\"T_e031b_level1_row4\" class=\"row_heading level1 row4\" >female</th>\n      <td id=\"T_e031b_row4_col0\" class=\"data row4 col0\" >8%</td>\n    </tr>\n    <tr>\n      <th id=\"T_e031b_level1_row5\" class=\"row_heading level1 row5\" >male</th>\n      <td id=\"T_e031b_row5_col0\" class=\"data row5 col0\" >15%</td>\n    </tr>\n  </tbody>\n</table>\n\n\nBehind the scenes, `pretty` will attempt to normalize the values. You can control the\n`precision`, `rows` add a `caption`.\n\n\n## Caveats\nsidetable supports grouping on any data type in a pandas DataFrame. This means that\nyou could try something like:\n\n```python\ndf.stb.freq(['fare'])\n```\nIn some cases where there are a fairly small discrete number of this may be useful. However,\nif you have a lot of unique values, you should [bin the data](https://pbpython.com/pandas-qcut-cut.html)\nfirst. In the example, above the data would include 248 rows and not be terribly useful.\n\nOne alternative could be:\n\n```python\ndf['fare_bin'] = pd.qcut(df['fare'], q=4, labels=['low', 'medium', 'high', 'x-high'])\ndf.stb.freq(['fare_bin'])\n```\n|    | fare_bin   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:-----------|--------:|----------:|-------------------:|---------------------:|\n|  0 | medium     |     224 |   25.1403 |                224 |              25.1403 |\n|  1 | low        |     223 |   25.0281 |                447 |              50.1684 |\n|  2 | x-high     |     222 |   24.9158 |                669 |              75.0842 |\n|  3 | high       |     222 |   24.9158 |                891 |             100      |\n\nThe other caveat is that null or missing values can cause data to drop out while aggregating.\nFor instance, if we look at the `deck` variable, there are a lot of missing values.\n\n```python\ndf.stb.freq(['deck'])\n```\n|    | deck   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:-------|--------:|----------:|-------------------:|---------------------:|\n|  0 | C      |      59 |  29.064   |                 59 |              29.064  |\n|  1 | B      |      47 |  23.1527  |                106 |              52.2167 |\n|  2 | D      |      33 |  16.2562  |                139 |              68.4729 |\n|  3 | E      |      32 |  15.7635  |                171 |              84.2365 |\n|  4 | A      |      15 |   7.38916 |                186 |              91.6256 |\n|  5 | F      |      13 |   6.40394 |                199 |              98.0296 |\n|  6 | G      |       4 |   1.97044 |                203 |             100      |\n\n\nThe total cumulative count only goes up to 203 not the 891 we have seen in other examples.\nFuture versions of sidetable may handle this differently. For now, it is up to you to \ndecide how best to handle unknowns. For example, this version of the Titanic data set\nhas a categorical value for `deck` so using `fillna` requires an extra step:\n\n```python\ndf['deck_fillna'] = df['deck'].cat.add_categories('UNK').fillna('UNK')\ndf.stb.freq(['deck_fillna'])\n```\n|    | deck_fillna   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:--------------|--------:|----------:|-------------------:|---------------------:|\n|  0 | UNK           |     688 | 77.2166   |                688 |              77.2166 |\n|  1 | C             |      59 |  6.62177  |                747 |              83.8384 |\n|  2 | B             |      47 |  5.27497  |                794 |              89.1134 |\n|  3 | D             |      33 |  3.7037   |                827 |              92.8171 |\n|  4 | E             |      32 |  3.59147  |                859 |              96.4085 |\n|  5 | A             |      15 |  1.6835   |                874 |              98.092  |\n|  6 | F             |      13 |  1.45903  |                887 |              99.5511 |\n|  7 | G             |       4 |  0.448934 |                891 |             100      |\n\nAnother variant is that there might be certain groupings where there are no valid counts.\n\nFor instance, if we look at the `deck` and `class`:\n\n```python\ndf.stb.freq(['deck', 'class'])\n```\n|    | deck   | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:-------|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | C      | First   |      59 |  29.064   |                 59 |              29.064  |\n|  1 | B      | First   |      47 |  23.1527  |                106 |              52.2167 |\n|  2 | D      | First   |      29 |  14.2857  |                135 |              66.5025 |\n|  3 | E      | First   |      25 |  12.3153  |                160 |              78.8177 |\n|  4 | A      | First   |      15 |   7.38916 |                175 |              86.2069 |\n|  5 | F      | Second  |       8 |   3.94089 |                183 |              90.1478 |\n|  6 | F      | Third   |       5 |   2.46305 |                188 |              92.6108 |\n|  7 | G      | Third   |       4 |   1.97044 |                192 |              94.5813 |\n|  8 | E      | Second  |       4 |   1.97044 |                196 |              96.5517 |\n|  9 | D      | Second  |       4 |   1.97044 |                200 |              98.5222 |\n| 10 | E      | Third   |       3 |   1.47783 |                203 |             100      |\n\n\nThere are only 11 combinations. If we want to see all - even if there are not any passengers\nfitting that criteria, use `clip_0=False` \n\n```python\ndf.stb.freq(['deck', 'class'], clip_0=False)\n```\n|    | deck   | class   |   count |   percent |   cumulative_count |   cumulative_percent |\n|---:|:-------|:--------|--------:|----------:|-------------------:|---------------------:|\n|  0 | C      | First   |      59 |  29.064   |                 59 |              29.064  |\n|  1 | B      | First   |      47 |  23.1527  |                106 |              52.2167 |\n|  2 | D      | First   |      29 |  14.2857  |                135 |              66.5025 |\n|  3 | E      | First   |      25 |  12.3153  |                160 |              78.8177 |\n|  4 | A      | First   |      15 |   7.38916 |                175 |              86.2069 |\n|  5 | F      | Second  |       8 |   3.94089 |                183 |              90.1478 |\n|  6 | F      | Third   |       5 |   2.46305 |                188 |              92.6108 |\n|  7 | G      | Third   |       4 |   1.97044 |                192 |              94.5813 |\n|  8 | E      | Second  |       4 |   1.97044 |                196 |              96.5517 |\n|  9 | D      | Second  |       4 |   1.97044 |                200 |              98.5222 |\n| 10 | E      | Third   |       3 |   1.47783 |                203 |             100      |\n| 11 | G      | Second  |       0 |   0       |                203 |             100      |\n| 12 | G      | First   |       0 |   0       |                203 |             100      |\n| 13 | F      | First   |       0 |   0       |                203 |             100      |\n| 14 | D      | Third   |       0 |   0       |                203 |             100      |\n| 15 | C      | Third   |       0 |   0       |                203 |             100      |\n| 16 | C      | Second  |       0 |   0       |                203 |             100      |\n| 17 | B      | Third   |       0 |   0       |                203 |             100      |\n| 18 | B      | Second  |       0 |   0       |                203 |             100      |\n| 19 | A      | Third   |       0 |   0       |                203 |             100      |\n| 20 | A      | Second  |       0 |   0       |                203 |             100      |\n\nIn many cases this might be too much data, but sometimes the fact that a combination is \nmissing could be insightful.\n\nThe final caveat relates to `subtotal`. When working with the `subtotal` function, sidetable \nconvert a Categorical MultiIndex to a plain index in order to easily add the subtotal labels.\n\n## TODO\n\n- [ ] Handle NaN values more effectively\n- [ ] Offer binning options for continuous variables\n- [ ] Offer more options, maybe plotting?\n\n\n## Contributing\n\nContributions are welcome, and they are greatly appreciated! Every\nlittle bit helps, and credit will always be given. If you have a new idea for a simple table\nthat we should add, please submit a ticket.\n\nFor more info please click [here](./CONTRIBUTING.md)\n\n## Credits\n\nThis package was created with Cookiecutter and the `oldani/cookiecutter-simple-pypackage` project template.\nThe code used in this package is heavily based on the posts from Peter Baumgartner, Steve Miller\nand Ted Petrou. Thank you!\n\n- [Cookiecutter](https://github.com/audreyr/cookiecutter)\n- [oldani/cookiecutter-simple-pypackage](https://github.com/oldani/cookiecutter-simple-pypackage)\n- Peter Baumgartner - [tweet thread](https://twitter.com/pmbaumgartner/status/1235925419012087809)\n- Steve Miller - [article](https://opendatascience.com/frequencies-and-chaining-in-python-pandas/)\n- Ted Petrou - [post](https://medium.com/dunder-data/finding-the-percentage-of-missing-values-in-a-pandas-dataframe-a04fa00f84ab)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chris1610/sidetable",
    "keywords": "sidetable",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sidetable",
    "package_url": "https://pypi.org/project/sidetable/",
    "platform": null,
    "project_url": "https://pypi.org/project/sidetable/",
    "project_urls": {
      "Homepage": "https://github.com/chris1610/sidetable"
    },
    "release_url": "https://pypi.org/project/sidetable/0.9.1/",
    "requires_dist": [
      "pandas (>=1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "sidetable builds simple but useful summary tables of your data",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15581264,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3727db60e6ba14ceaf6fa0b73156bec397c9375030e76571460c51673460622b",
          "md5": "b2cc442af9f0901a418a91688db49b39",
          "sha256": "49e1438691f6ceb2381bc25ef68e87609221e828985579f743654f2dbb84f3c3"
        },
        "downloads": -1,
        "filename": "sidetable-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2cc442af9f0901a418a91688db49b39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14851,
        "upload_time": "2020-05-26T00:25:45",
        "upload_time_iso_8601": "2020-05-26T00:25:45.589781Z",
        "url": "https://files.pythonhosted.org/packages/37/27/db60e6ba14ceaf6fa0b73156bec397c9375030e76571460c51673460622b/sidetable-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b51f8ed00d72ac9611a9692d14c01e71105abbc91da1b195cc539f4a4859945b",
          "md5": "18b89eef882862ff31f5f6115ae07221",
          "sha256": "8328f4329e1fb438345dfec031a9ebf6199873b121554084d695c54b9948c902"
        },
        "downloads": -1,
        "filename": "sidetable-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "18b89eef882862ff31f5f6115ae07221",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14855,
        "upload_time": "2020-05-28T01:59:23",
        "upload_time_iso_8601": "2020-05-28T01:59:23.955129Z",
        "url": "https://files.pythonhosted.org/packages/b5/1f/8ed00d72ac9611a9692d14c01e71105abbc91da1b195cc539f4a4859945b/sidetable-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45cfd9d6ea5785788b0e748336657f60d0e73e372b4b4f25e461f0096d11b850",
          "md5": "24fa488f7bbcf404fb336030329660fa",
          "sha256": "c0d568f0dbabda056284ea615bd6efc28ed6ee5755e3ae2c592bd6ad9ce0e069"
        },
        "downloads": -1,
        "filename": "sidetable-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "24fa488f7bbcf404fb336030329660fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15656,
        "upload_time": "2020-05-31T22:33:27",
        "upload_time_iso_8601": "2020-05-31T22:33:27.164939Z",
        "url": "https://files.pythonhosted.org/packages/45/cf/d9d6ea5785788b0e748336657f60d0e73e372b4b4f25e461f0096d11b850/sidetable-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8be57c11bdfec481723c8d98570b613084cd4e367c769d67b473ab293aee5892",
          "md5": "0623989146ddb75b0cc3de1828e48ae2",
          "sha256": "718f2fbdf465a19dd4c44335461fbb861c32c3bf77d50eebf2824268ba93e320"
        },
        "downloads": -1,
        "filename": "sidetable-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0623989146ddb75b0cc3de1828e48ae2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13438,
        "upload_time": "2020-06-22T00:14:57",
        "upload_time_iso_8601": "2020-06-22T00:14:57.709640Z",
        "url": "https://files.pythonhosted.org/packages/8b/e5/7c11bdfec481723c8d98570b613084cd4e367c769d67b473ab293aee5892/sidetable-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe2249563cda1cf99da7b2d0156060ffa1cc5f2122a3d4dacfd44faea888173b",
          "md5": "88c4f65f6d8f4d45c6732b4b177b6619",
          "sha256": "6108b1cdc5f388e5e21870f6db71a84c39ff295756851d4f027c1fcc9ce40db7"
        },
        "downloads": -1,
        "filename": "sidetable-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88c4f65f6d8f4d45c6732b4b177b6619",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22433,
        "upload_time": "2020-06-22T00:15:03",
        "upload_time_iso_8601": "2020-06-22T00:15:03.082571Z",
        "url": "https://files.pythonhosted.org/packages/fe/22/49563cda1cf99da7b2d0156060ffa1cc5f2122a3d4dacfd44faea888173b/sidetable-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "146234be9ffa5597db00e229d423f3b73b3d11995f9877d233eefa9d076db488",
          "md5": "982db0d27292e442d9af47ae7239be82",
          "sha256": "35fc90b0b252ed4684ae91fff894de633d0690c6b7855109c08df721055fcd67"
        },
        "downloads": -1,
        "filename": "sidetable-0.4.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "982db0d27292e442d9af47ae7239be82",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11939,
        "upload_time": "2020-06-22T00:14:59",
        "upload_time_iso_8601": "2020-06-22T00:14:59.201615Z",
        "url": "https://files.pythonhosted.org/packages/14/62/34be9ffa5597db00e229d423f3b73b3d11995f9877d233eefa9d076db488/sidetable-0.4.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40e538021cab1b17c3af86402e341119c1f09677a971fbc9e26334f497c3d871",
          "md5": "fe344aa0b17fd6585ae371176f6bb113",
          "sha256": "55a3fadad66ef0ee8d6153460b9210154d459c0033a0ee07a88dc15862479771"
        },
        "downloads": -1,
        "filename": "sidetable-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe344aa0b17fd6585ae371176f6bb113",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13752,
        "upload_time": "2020-06-22T20:43:21",
        "upload_time_iso_8601": "2020-06-22T20:43:21.959002Z",
        "url": "https://files.pythonhosted.org/packages/40/e5/38021cab1b17c3af86402e341119c1f09677a971fbc9e26334f497c3d871/sidetable-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4cebae393895bfd07029c82ac15797a0aa4340b3a8b8137bf1b77ec1a433ceb",
          "md5": "f952751853508e1ec1237aedd91a0a1f",
          "sha256": "44695ab38e7e166664bf79cf5af23f4360f4d9a5e17114b5ebc4a6908f8be3d9"
        },
        "downloads": -1,
        "filename": "sidetable-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f952751853508e1ec1237aedd91a0a1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22760,
        "upload_time": "2020-06-22T20:43:27",
        "upload_time_iso_8601": "2020-06-22T20:43:27.054780Z",
        "url": "https://files.pythonhosted.org/packages/b4/ce/bae393895bfd07029c82ac15797a0aa4340b3a8b8137bf1b77ec1a433ceb/sidetable-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2e77f1f22ad2d9a7b1003f04b68e7baa9c5646b1a918c359dc2a1f514d04fb4",
          "md5": "b516da812d95cfabf47c3d6f21916743",
          "sha256": "8dd7d0d57f826dbda23f3411e671db00e613b9c1a37f5f606b0d215f0bc80257"
        },
        "downloads": -1,
        "filename": "sidetable-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b516da812d95cfabf47c3d6f21916743",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13727,
        "upload_time": "2020-07-04T17:48:28",
        "upload_time_iso_8601": "2020-07-04T17:48:28.462719Z",
        "url": "https://files.pythonhosted.org/packages/a2/e7/7f1f22ad2d9a7b1003f04b68e7baa9c5646b1a918c359dc2a1f514d04fb4/sidetable-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ae2121b0c87c75d4c7cc2c7148edc3dc4b8ba2eb75fba813200e88a9ac2ec4c",
          "md5": "1ec15013c6413acf261d61c9196cf1dd",
          "sha256": "3c1a972cb548220c035d5b6366dbb677164ae580e05a26dbc5ed7cd263d4ff00"
        },
        "downloads": -1,
        "filename": "sidetable-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ec15013c6413acf261d61c9196cf1dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 22371,
        "upload_time": "2020-07-04T17:48:34",
        "upload_time_iso_8601": "2020-07-04T17:48:34.900047Z",
        "url": "https://files.pythonhosted.org/packages/4a/e2/121b0c87c75d4c7cc2c7148edc3dc4b8ba2eb75fba813200e88a9ac2ec4c/sidetable-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cadba360a0eafea8f56386d668907a359e6b721c4fa457342795322cb11d52ee",
          "md5": "6302a31de7fe5c047d10c759ff509182",
          "sha256": "7a2586f5c4e9ea3c05e9827e8337897e81a885d7dee5e3d78c2cc5796d832d5c"
        },
        "downloads": -1,
        "filename": "sidetable-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6302a31de7fe5c047d10c759ff509182",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15586,
        "upload_time": "2020-08-21T20:35:28",
        "upload_time_iso_8601": "2020-08-21T20:35:28.500458Z",
        "url": "https://files.pythonhosted.org/packages/ca/db/a360a0eafea8f56386d668907a359e6b721c4fa457342795322cb11d52ee/sidetable-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33e88dc1dc79c61c368e3bb197aad1882c20e8a043709139660bbdc8d7498e1b",
          "md5": "3921ddc9489ae2a5afd22331500b93ae",
          "sha256": "6d98b43f038107a901e867bb60296ec8af2ee689b12d413931859fd9023ac9ce"
        },
        "downloads": -1,
        "filename": "sidetable-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3921ddc9489ae2a5afd22331500b93ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28859,
        "upload_time": "2020-08-21T20:35:36",
        "upload_time_iso_8601": "2020-08-21T20:35:36.498019Z",
        "url": "https://files.pythonhosted.org/packages/33/e8/8dc1dc79c61c368e3bb197aad1882c20e8a043709139660bbdc8d7498e1b/sidetable-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71a0380de6f4b8d8a03dfe14d183238c9f3300178b44e3000c8fc5076a736ca2",
          "md5": "b595a413080b4dc0d22992aefd27676b",
          "sha256": "f57063055f1a9e89eeb85001f483c1c3c3d1cd99e47ac8e69e657a2866c69fa0"
        },
        "downloads": -1,
        "filename": "sidetable-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b595a413080b4dc0d22992aefd27676b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15705,
        "upload_time": "2020-11-29T16:21:22",
        "upload_time_iso_8601": "2020-11-29T16:21:22.199411Z",
        "url": "https://files.pythonhosted.org/packages/71/a0/380de6f4b8d8a03dfe14d183238c9f3300178b44e3000c8fc5076a736ca2/sidetable-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65829a52133e9ba9cea7d6f696ee7947270d76b7d36922f3ccb500e3646adfa5",
          "md5": "a87d08d6af7508107ab8271d9d3b1355",
          "sha256": "acfac03527f2a8c28a0fcbe36d0a9929179264b66d7ccf39d0b3700a466341da"
        },
        "downloads": -1,
        "filename": "sidetable-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a87d08d6af7508107ab8271d9d3b1355",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29161,
        "upload_time": "2020-11-29T16:21:29",
        "upload_time_iso_8601": "2020-11-29T16:21:29.344511Z",
        "url": "https://files.pythonhosted.org/packages/65/82/9a52133e9ba9cea7d6f696ee7947270d76b7d36922f3ccb500e3646adfa5/sidetable-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d6783e0399b2c49e25dd25f9c84d42c1c70f00aa037ccc1877d72c80e282f2",
          "md5": "66c1b289469e5aad5db6517ef0111bc8",
          "sha256": "7678565d3bce93009a2fab1deda518bf470e30342b94de7f6cdd9de6a6aa86c0"
        },
        "downloads": -1,
        "filename": "sidetable-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66c1b289469e5aad5db6517ef0111bc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17696,
        "upload_time": "2021-08-19T00:47:41",
        "upload_time_iso_8601": "2021-08-19T00:47:41.319577Z",
        "url": "https://files.pythonhosted.org/packages/07/d6/783e0399b2c49e25dd25f9c84d42c1c70f00aa037ccc1877d72c80e282f2/sidetable-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b55184c6367798176b53e86a725da82fd671ad13983cd6af75213a095d7e30b2",
          "md5": "e0f9d363433c425069cbeb678405cc23",
          "sha256": "06e5551d38391f38b90dbe18a4d8354308cab42180364a1ebdc90ba8b754da23"
        },
        "downloads": -1,
        "filename": "sidetable-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0f9d363433c425069cbeb678405cc23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33719,
        "upload_time": "2021-08-19T00:47:53",
        "upload_time_iso_8601": "2021-08-19T00:47:53.119073Z",
        "url": "https://files.pythonhosted.org/packages/b5/51/84c6367798176b53e86a725da82fd671ad13983cd6af75213a095d7e30b2/sidetable-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ff5d8c0c5ab6ef8156eb879431d9f2867ae645f3becb3a9241c072b5383631",
          "md5": "9a68ae6fb03fded7f6c41ddba9b7039d",
          "sha256": "13f6076977eb7ca68f054463f90ec2dd7001a8df75b349ccc7bcb0377a75e4bc"
        },
        "downloads": -1,
        "filename": "sidetable-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a68ae6fb03fded7f6c41ddba9b7039d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19831,
        "upload_time": "2022-10-29T21:10:28",
        "upload_time_iso_8601": "2022-10-29T21:10:28.781571Z",
        "url": "https://files.pythonhosted.org/packages/a2/ff/5d8c0c5ab6ef8156eb879431d9f2867ae645f3becb3a9241c072b5383631/sidetable-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93d39a8da2dc72364eaecea6c1deb9528e5a9dae3efb7293b1c5ab0e7462d319",
          "md5": "07fd2c1ed031b679143f021c5194fe95",
          "sha256": "363d90e4ec0e83699ad34e4d688806e1156e9ebbe6a1d229ab5d44c8229c8a9d"
        },
        "downloads": -1,
        "filename": "sidetable-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07fd2c1ed031b679143f021c5194fe95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37987,
        "upload_time": "2022-10-29T21:10:41",
        "upload_time_iso_8601": "2022-10-29T21:10:41.965798Z",
        "url": "https://files.pythonhosted.org/packages/93/d3/9a8da2dc72364eaecea6c1deb9528e5a9dae3efb7293b1c5ab0e7462d319/sidetable-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2ff5d8c0c5ab6ef8156eb879431d9f2867ae645f3becb3a9241c072b5383631",
        "md5": "9a68ae6fb03fded7f6c41ddba9b7039d",
        "sha256": "13f6076977eb7ca68f054463f90ec2dd7001a8df75b349ccc7bcb0377a75e4bc"
      },
      "downloads": -1,
      "filename": "sidetable-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a68ae6fb03fded7f6c41ddba9b7039d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19831,
      "upload_time": "2022-10-29T21:10:28",
      "upload_time_iso_8601": "2022-10-29T21:10:28.781571Z",
      "url": "https://files.pythonhosted.org/packages/a2/ff/5d8c0c5ab6ef8156eb879431d9f2867ae645f3becb3a9241c072b5383631/sidetable-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93d39a8da2dc72364eaecea6c1deb9528e5a9dae3efb7293b1c5ab0e7462d319",
        "md5": "07fd2c1ed031b679143f021c5194fe95",
        "sha256": "363d90e4ec0e83699ad34e4d688806e1156e9ebbe6a1d229ab5d44c8229c8a9d"
      },
      "downloads": -1,
      "filename": "sidetable-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "07fd2c1ed031b679143f021c5194fe95",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 37987,
      "upload_time": "2022-10-29T21:10:41",
      "upload_time_iso_8601": "2022-10-29T21:10:41.965798Z",
      "url": "https://files.pythonhosted.org/packages/93/d3/9a8da2dc72364eaecea6c1deb9528e5a9dae3efb7293b1c5ab0e7462d319/sidetable-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}