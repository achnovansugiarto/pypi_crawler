{
  "info": {
    "author": "Swarna Kamal Paul",
    "author_email": "swarna.kpaul@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Combinator\n### The programming model to integrate AI components \n\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)\n\nCombinator is a programming model to build integrative AI solutions. Programs can be generated in the form of graphs such that functions are represented by nodes and dataflow between them by edges. It loosly follows the functional style of programming with lazy evaluation. The features of the programming model can be enumerated as following.\n\n- Dynamical program generation - Can generate aribitrary subprograms at runtime\n- Modularity - Every part of the program is modular \n- Expressivity - Preloaded with required primitives to build complex logics\n- Abstraction - Can build arbitrary reusable components\n- Ease of integration - With a proper UI programs can be easily built by connection nodes with edges. \n- API integration - This packaged model contains a basic version of the environment object to make post calls to remote APIs\n\nFor more details please check [this](https://link.springer.com/article/10.1007/s40031-021-00676-5) paper and [this](https://www.tandfonline.com/doi/abs/10.1080/03772063.2021.2004461) one.\n\n### Get started\nThe programming model is built on Python. You can install the package by running the following command\n\n```python\npip install combinator\n```\n\nThen load the package in Python by running the following command\n```python\nimport combinator as cb\n```\n\n### Examples\nHere are few program examples in combinator\n\n##### Add two constant numbers\n```Python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\noperation = '+' # this example can be run by setting operation as '-' or '*' or '/' or '^' or '=' or '>'\ngraph = creategraph('TestGraph') # Takes graphname as argument\ng1 = createnode(graph,'iW',init_world) # 1st argument should be the graph object, 2nd the node short name and 3rd argument should be specific parameters needed to create specific nodes. Except for initworld, constant, sensor and actuator 3rd argument is not needed. \ng2 = createnode(graph,'K',2);\ng3 = createnode(graph,'K',3)\ng4 = createnode(graph,operation)\naddlink(graph,g1); \naddlink(graph,g2,g1); # first argument should be the graph object, 2nd the node which needs to be connect to its parents and rest of the arguments should be the parent nodes in sequence.\naddlink(graph,g3,g1);\naddlink(graph,g4,g3,g2);\noutput = runp(g4,graph) # The first argument should be the terminal node which needs to be run and 2nd the graph object\nprint (output[0])\n```\n##### Conjuction of two boolean values\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\noperation = '&' # this example can also be run by setting operation as '|'\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',True);\ng3 = createnode(graph,'K',False)\ng4 = createnode(graph,operation)\naddlink(graph,g1);\naddlink(graph,g2,g1);\naddlink(graph,g3,g1);\naddlink(graph,g4,g3,g2);\noutput = runp(g4,graph)\nprint (output[0])\n```\n##### Conditional execution\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',2)\ng3 = createnode(graph,'K',3);\ng4 = createnode(graph,'=')\ng5 = createnode(graph,'if')\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1);addlink(graph,g4,g2,g3);addlink(graph,g5,g4,g1,g2);\noutput = runp(g5,graph)\nprint(output[0])\n```\n\n##### Square all elements of list with fmap\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',[3,4,5]);\ng3 = createnode(graph,'*')\ng4 = createnode(graph,'fm')\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1,g1);addlink(graph,g4,g3,g2);\noutput = runp(g4,graph)\nprint(output[0])\n```\n\n##### Zip two lists\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',[3,4,5]);\ng3 = createnode(graph,'K',[14,12,4]);\ng4 = createnode(graph,'zp')\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1);addlink(graph,g4,g3,g2);\noutput = runp(g4,graph)\nprint(output[0])\n```\n\n##### Run loop\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',2);\ng3 = createnode(graph,'+')\ng4 = createnode(graph,'lp')\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1,g1);addlink(graph,g4,g3,g2);\noutput = runp(g4,graph)\nprint(output[0])\n```\n\n##### Run Recurse\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',7);\ng3 = createnode(graph,'K',1);\ng4 = createnode(graph,'+');\ng5 = createnode(graph,'K',100);\ng6 = createnode(graph,'>');\ng7 = createnode(graph,'lg')\ng8 = createnode(graph,'lg')\ng9 = createnode(graph,'rc')\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1);addlink(graph,g4,g3,g1);addlink(graph,g5,g1);addlink(graph,g6,g1,g5);addlink(graph,g7,g6);addlink(graph,g8,g4);addlink(graph,g9,g8,g7,g2);\noutput = runp(g9,graph)\nprint(output[0])\n```\n\n##### API POST call with actuator and sensor\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',{'url':'https://httpbin.org/post','headers':{'Content-Type':'application/json'}})\ng3 = createnode(graph,'K','');\ng4 = createnode(graph,'ac','dict'); # the third argument in actuator or sensor node is the input type and output type respectively. If no argument is supplied the type is set as 'any'\ng5 = createnode(graph,'sn','any');\ng6 = createnode(graph,'ac','char');\ng7 = createnode(graph,'sn','any');\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g4,g2);\naddlink(graph,g5,g4);addlink(graph,g3,g5);addlink(graph,g6,g3);addlink(graph,g7,g6);\noutput = runp(g7,graph)\nprint(output[0])\n```\n\n##### Update the environment \n```python\nfrom combinator import init_world\ninit_world.update_env(<environment object>) # check environment/apienv.py to find out how to build an environment object. It can serve as an template to build your own custom environment object\n```\n\n##### Get runtime errors\n```python\nfrom combinator import creategraph, createnode, addlink, init_world, runp,combinatorruntimeerror\ngraph = creategraph()\ng1 = createnode(graph,'iW',init_world)\ng2 = createnode(graph,'K',2);\ng3 = createnode(graph,'K','3')\ng4 = createnode(graph,'-')\nprint(g1,g2,g2,g4)\naddlink(graph,g1);addlink(graph,g2,g1);addlink(graph,g3,g1);addlink(graph,g4,g3,g2);\ntry:\n  print(runp(g4,graph))\nexcept integratorruntimeerror as e:\n  print(e.error)\n```\n\n\n### List of available primitives\n\nFollowing are the list of available primitives in combinator:\n\n-------------------------------------------------------------------------\n\n| Full Name | short name | Description|\n|-----------|------------|------------|\n| initWorld | iW | Initializes the environment|\n| constant  | K  | Outputs a constant value as set during node creation |\n| identity  | id  | Outputs the input value unchanged |\n| add  | +  | Adds two input numbers. Joins two lists. Updates 2nd key-value pair in the 1st. |\n| subtract  | -  | Subtracts the number in 2nd input port from the 1st |\n| multiply  | *  | Multiplies two numbers |\n| divide  | /  | Divides the number in 1st input port with respect to the 2nd |\n| exponent  | ^  | Raises the number in the 1st input port to the power of the 2nd |\n| conjunction  | &  | Does logical AND operation between two inputs |\n| disjunction  | \\|  | Does logical OR operation between two inputs |\n| negate  | !  | Inverts the input boolean value |\n| greater  |>  | Outputs True if 1st input is greater than second else False |\n| equal  |=  | Outputs True if 1st input is equal to second else False |\n| emptylistordict  |nl  | Outputs empty key-value pair if input is 'keyvalue' else empty list |\n| head  |hd  | Outputs 1st element of the list |\n| tail  |tl | Outputs rest of the list except the 1st element |\n| pop  |pop | Outputs the _n_ th element from the list in the 2nd input port. The value _n_ should be provided in the 1st input port. It fetches the value corresponding to the key _k_ if 1st input is a key-value pair. In that case the 2nd input should provide the key _k_.  |\n|append| cn | Appends an element _e_ to the list provided in the 2nd input, where the 1st input provides the element _e_ |\n|addkey| ak | Adds a key value pair to the key-value pairs provided in the 1st input. The 2nd input should provide the key and 3rd the value. |\n|condition| if | Executes the parent graph connected to 2nd input port if 1st input is True else the parent graph of 3rd input port is executed. |\n|lambdagraph| lg | Outputs the parent graph as subgraph. The iW node in the subgraph is replaced with an identity node. Any other initial nodes in the subgraph is connected to the newly created idenity node. |\n|apply| ap | Outputs the parent graph as subgraph. The iW node in the subgraph is replaced with an identity node. Any other initial nodes in the subgraph is connected to the newly created idenity node. |\n|fmap| fm | Converts the subgraph corresponding to parentnode1, a function and thereby applies it to each element of the list supplied in the input port 2. It outputs the new list. |\n|zip| zp | Joins two list element wise. The two list should be provided in two input ports. It outputs a list of lists. |\n|aggregator| ag | Aggregates the element of a list by an aggregator function. The aggregator function should be provided in input port 1 and the list in input port 2. |\n|loop| lp | Converts the subgraph corresponding to parentnode1, a function and applies it _n_ number of times to its output. The initial argument of the function will be _n_ , where _n_ is supplied as an integer to its input port 2. |\n|recurse| rc | Takes 2 function and one data value of any type as input. The function supplied to input port 1 is applied recursively on the 3rd input until stopping condition is met. The function supplied to input port 2 is applied on 3rd input to evaluate the stopping condition. |\n|sensor| sn | sends a read request to the environment and outputs the recieved data|\n|actuator| ac | sends and write request to the environment and writes the input data|\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/swarna-kpaul/combinator",
    "keywords": "programming model,dataflow graph,functional programming,API integration,Integrative AI",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "combinator",
    "package_url": "https://pypi.org/project/combinator/",
    "platform": null,
    "project_url": "https://pypi.org/project/combinator/",
    "project_urls": {
      "Bug Tracker": "https://github.com/swarna-kpaul/combinator/issues",
      "Homepage": "https://github.com/swarna-kpaul/combinator"
    },
    "release_url": "https://pypi.org/project/combinator/1.2/",
    "requires_dist": [
      "sympy (==1.6.2)",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "The programming model to integrate AI components",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14997683,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4485fe5b54e28045921bbb669ade65c6951eb8077ea4b3ce0f2f327924fc54ef",
          "md5": "77bf4831af6fd1c6ebaf2de4618696c8",
          "sha256": "d49df29d98b8870e6203e184b0d67e23179d3e7212ea70eaea9b3d1e7a8f220b"
        },
        "downloads": -1,
        "filename": "combinator-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77bf4831af6fd1c6ebaf2de4618696c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24890,
        "upload_time": "2022-09-04T10:06:01",
        "upload_time_iso_8601": "2022-09-04T10:06:01.526343Z",
        "url": "https://files.pythonhosted.org/packages/44/85/fe5b54e28045921bbb669ade65c6951eb8077ea4b3ce0f2f327924fc54ef/combinator-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49d1080a3e70594cd9937695b81865ddda2c26c838f117f6bd2a21c6a63e07ad",
          "md5": "31c5964c779cec9d055d8ac2fd6b16d4",
          "sha256": "e90d8b16c74b643a90407c1f0c8b810298ff398ee00180a117708267a90b782f"
        },
        "downloads": -1,
        "filename": "combinator-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "31c5964c779cec9d055d8ac2fd6b16d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24140,
        "upload_time": "2022-09-04T10:06:03",
        "upload_time_iso_8601": "2022-09-04T10:06:03.612446Z",
        "url": "https://files.pythonhosted.org/packages/49/d1/080a3e70594cd9937695b81865ddda2c26c838f117f6bd2a21c6a63e07ad/combinator-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6529124277e8f62041308fc428213fdcd7b90c1bdd036319fe55a9e3a76ddbff",
          "md5": "afa1be35a22e0a8c08481c627072f052",
          "sha256": "3d5051321a11a0fd9edcfcb09a38d28ceae53b5601c88803a037273e64bbd861"
        },
        "downloads": -1,
        "filename": "combinator-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afa1be35a22e0a8c08481c627072f052",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25131,
        "upload_time": "2022-09-05T14:57:36",
        "upload_time_iso_8601": "2022-09-05T14:57:36.517147Z",
        "url": "https://files.pythonhosted.org/packages/65/29/124277e8f62041308fc428213fdcd7b90c1bdd036319fe55a9e3a76ddbff/combinator-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2f6a4f70f082b13eca8e5954316fce9ebc44474ea2a8ec6eba2134ead50bb3b",
          "md5": "da2d5e30330e50968882a61479f81fe5",
          "sha256": "86cf4952d19b1fc172a741bdf576faa5d7b12f9f7e1c08817f14027ab4eb94a6"
        },
        "downloads": -1,
        "filename": "combinator-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "da2d5e30330e50968882a61479f81fe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24260,
        "upload_time": "2022-09-05T14:57:38",
        "upload_time_iso_8601": "2022-09-05T14:57:38.471481Z",
        "url": "https://files.pythonhosted.org/packages/b2/f6/a4f70f082b13eca8e5954316fce9ebc44474ea2a8ec6eba2134ead50bb3b/combinator-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6529124277e8f62041308fc428213fdcd7b90c1bdd036319fe55a9e3a76ddbff",
        "md5": "afa1be35a22e0a8c08481c627072f052",
        "sha256": "3d5051321a11a0fd9edcfcb09a38d28ceae53b5601c88803a037273e64bbd861"
      },
      "downloads": -1,
      "filename": "combinator-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "afa1be35a22e0a8c08481c627072f052",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25131,
      "upload_time": "2022-09-05T14:57:36",
      "upload_time_iso_8601": "2022-09-05T14:57:36.517147Z",
      "url": "https://files.pythonhosted.org/packages/65/29/124277e8f62041308fc428213fdcd7b90c1bdd036319fe55a9e3a76ddbff/combinator-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2f6a4f70f082b13eca8e5954316fce9ebc44474ea2a8ec6eba2134ead50bb3b",
        "md5": "da2d5e30330e50968882a61479f81fe5",
        "sha256": "86cf4952d19b1fc172a741bdf576faa5d7b12f9f7e1c08817f14027ab4eb94a6"
      },
      "downloads": -1,
      "filename": "combinator-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "da2d5e30330e50968882a61479f81fe5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24260,
      "upload_time": "2022-09-05T14:57:38",
      "upload_time_iso_8601": "2022-09-05T14:57:38.471481Z",
      "url": "https://files.pythonhosted.org/packages/b2/f6/a4f70f082b13eca8e5954316fce9ebc44474ea2a8ec6eba2134ead50bb3b/combinator-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}