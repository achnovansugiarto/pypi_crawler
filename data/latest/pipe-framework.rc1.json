{
  "info": {
    "author": "NeZanyat",
    "author_email": "rlatyshenko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pipe Framework\n\nData-oriented web microframework allows you to create web services with ETL approach instead of traditional MVC.\n\n**Not related to HBO's Silicon Valley show.**\n\n## Introduction\n\nYou won't find Models, Controllers, and Views in the Pipe framework, but I'll use them to demonstrate its principles.\n\nAll functionality of the Pipe framework is built using Steps.\n\nStep is a self-sufficient, isolated piece of functionality, which does only one thing at a time\n(*single responsibility principle*).\n\n\nLet me explain this concept in detail.\n\nFor example, you have a simple task to create an API endpoint with todo tasks listing.\n\nIn the traditional approach, you'll have to create a Todo model, which will represent a database table.\nIn controller bound to route, you'll use the model instance to **extract** data about todo tasks,\nthen **transform** it to the http response and send it to the user.\n\n> I've marked **extract** and **transform** so you can link MVC concepts to the concepts used in Pipe framework.\n\nAccording to the paragraph above, we can set an analogy between **MVC** (Model-View-Controller) and **ETL** (Extract-Transform-Load):\n\nModel -> Extractor\n\nController -> Transformer\n\nView -> Loader\n\nThis analogy isn't 100% correct but it demonstrates how parts of the approach are related to each other.\n\n> As you can see, I've set the view layer as Loader. I'll explain it a bit later.\n\n## Your first route\n\nLet's implement the above-mentioned task using the Pipe framework.\n\nThe first thing you should know is there are three kinds of steps:\n\n* Extractor\n* Transformer\n* Loader\n\nHow to decide which step do you require?\n\n1. If you need to get the data from an external source: extractor.\n2. If you need to send data outside of the framework: loader.\n3. If you need to change data in some way: transformer.\n\n> That's why View is linked with Loader in the example. You can think of this as of loading data to the user browser.\n\nFirst, we need to decompose this functionality into smaller parts.\nFor this task, we need to do the following:\n\n1. Extract data from a database;\n2. Transform data to the JSON HTTP response;\n3. Load this response to the browser.\n\nSo we need 1 extractor, 1 transformer, and 1 loader.\nThankfully, the Pipe framework provides several generic steps, so we can skip some boring parts,\nbut anyway we need to write our own extractor to set the database access details for the step.\n\nAs `Step` is an independent part of the application not aware of anything going beyond the step purpose, it is easily transferable between apps.\nThe downside of this solution is that we cannot have a centralized configuration repository.\nAll configuration applying to steps should be stored in the exact step properties, but sometimes it means that\nwe need to write the same thing every time we write steps sharing the same configuration.\n\nFor this purposes, the Pipe framework provides `@configure` decorator. You simply write properties you want to add to the step like here:\n\n```python\nDATABASES = {\n    'default': {\n        'driver': 'postgres',\n        'host': 'localhost',\n        'database': 'todolist',\n        'user': 'user',\n        'password': '',\n        'prefix': ''\n    }\n}\n\nDB_STEP_CONFIG = {\n    'connection_config': DATABASES\n}\n```\n\nand then apply this to the step as in the example below:\n\n```python\n@configure(DB_STEP_CONFIG)\nclass EDatabase(EDBReadBase):\n    pass\n```\n\nAs you can tell, the name of the step begins with a capital letter E.\nIn the Pipe framework, you always implement Extractors, Transformers and Loaders, but it's really hard to keep names short if you use it like this:\n\n```python\nclass ExtractTodoFromDatabase(Step):\n    pass\n```\n\n> All steps should extend `Step` class, but implement or `extract` or `transform` or `load` method\n\nThat is why all generic steps follow an agreement to indicate the step type with the first letter of the step name:\n```python\nclass ETodoFromDatabase(Step):\n    pass\n```\n`E` is for extractor, `T` for transformer and `L` for loader.\nBut of course you are free to use any names you want.\n\nSo, let's create the project root folder:\n\n`pipe-sample/`\n\nThen create `src` folder inside of the `pipe-sample` folder:\n\n```\npipe-sample/\n    src/\n```\n\nAll database-related steps will be in the db package, so let's create it as well:\n\n```\npipe-sample/\n    src/\n        db/\n            __init__.py\n```\n\nCreate a `config.py` file, as there will be the database configuration:\n\n`pipe-sample/src/db/config.py`\n\n```python\nDATABASES = {\n    'default': {\n        'driver': 'postgres',\n        'host': 'localhost',\n        'database': 'todolist',\n        'user': 'user',\n        'password': '',\n        'prefix': ''\n    }\n}\n\nDB_STEP_CONFIG = {\n    'connection_config': DATABASES\n}\n```\nThen create the `extract.py` file to keep our configured extractor:\n\n`pipe-sample/src/db/extract.py`\n```python\nfrom src.db.config import DB_STEP_CONFIG # our configuration\n\n\"\"\"\nPipe framework includes some generics for database as well,\nyou can check them in the\nAPI documentation\n\"\"\"\nfrom pipe.generics.db.orator_orm.extract import EDBReadBase\n\n\n@configure(DB_STEP_CONFIG) # applying configuration to the step\nclass EDatabase(EDBReadBase):\n    pass\n    # we don't need to write anything inside the class,\n    # all logic is already implemented inside EDBReadBase\n```\n\n> Creating a whole folder structure could be an overhead for one small task, but this was done here to show the preferred folder structure for other projects.\n\nPretty easy so far. We don't need to repeat these actions with other steps, because they are not\nconfiguration-dependent.\n\nActually, we're ready to create our first pipe now.\n\nCreate `app.py` in the project root. Then put this code to the file:\n\n`pipe-sample/app.py`\n```python\nfrom pipe.server import HTTPPipe, app\nfrom src.db.extract import EDatabase\nfrom pipe.server.http.load import LJsonResponse\nfrom pipe.server.http.transform import TJsonResponseReady\n\n\n@app.route('/todo/') # this decorator tells to the WSGI app that this pipe serves this route\nclass TodoResource(HTTPPipe):\n    \"\"\"\n    we extending HTTPPipe class which provides pipe_schema\n    applicable to the http requests\n    \"\"\"\n\n    \"\"\"\n    pipe_schema is a dictionary with sub-pipes for every HTTP method.\n    'in' and 'out' is a direction inside the pipe, when pipe handles request,\n    first this request goes through 'in' and then through 'out' pipe.\n    Here we don't need any processing before the response, so only 'out' is presented\n    \"\"\"\n    pipe_schema = {\n        'GET': {\n            'out': (\n                EDatabase(table_name='todo-items'),\n                TJsonResponseReady(data_field='todo-items_list'),\n                LJsonResponse()\n            )\n        }\n    }\n\n\n\"\"\"\nPipe framework uses Werkzeug as a WSGI server, so configuration is pretty familiar except\n'use_inspection' argument. Inspection - is a mode for debugging. In case you set it to True\nbefore step execution framework will print data state and step name to the console\n\"\"\"\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=8080,\n            use_debugger=True,\n            use_reloader=True,\n            use_inspection=True\n            )\n\n```\n\nNow you can execute `$ python app.py` and go to `http://localhost:8000/todo/`.\n\n## Store validation\n\nFirst, we need to find out what is store in Pipe framework.\n\n### Store\n\nAfter pipe is started, but before the first step pipe is called `before_pipe` hook (you can use this hook to perform some operations on the store before executing). This hook accepts initial store, created from initial data passed to the pipe.\n\n```python\nclass BasePipe:\n   def __init__(self, initial, inspection: bool = False):\n        self.__inspection_mode = inspection\n        self.store = self.before_pipe(frozendict(initial))\n```\n\nAs you can see, store is nothing but the `frozendict` instance. Although you can't manipulate data inside the store, you can still create a new instance using the `frozendict().copy()` method. You can find more information in [readme file](https://github.com/slezica/python-frozendict).\n\n### Validation\n\nEven though steps are independent pieces of functionality, sometimes they could require the specific data in the store to perfom certain operations. For this purposes, there are the `required_fields` field in step configuration.\n\nThe Pipe framework uses [Valideer](https://github.com/podio/valideer) for validation, but it's a candidate for the deprecation during the next iterations.\n\n#### Example\n\nAll you have to do is to write a dict with the required fields (check [Valideer](https://github.com/podio/valideer) for more information about the available validators).\n\n```python\n    required_fields = {'+some_field': valideer.Type(dict)} # `+` means required field\n```\n\n#### Dynamic validation\n\nSometimes, you can have some dynamic fields in step, showing which store field contains required information.\nYou can't know how this field is named, but you do know in what step variable this value is available.\nIf you want to validate these fields as well, you'll have to add curly braces, inside which the name of a class field will be.\n\n```python\n    required_fields = {'+{pk_field}': valideer.Type(dict)} # everything else is the same\n```\nThe Pipe framework will substitute class field value for this field automatically, and then perform validation.\n\n## Steps arithmetics\n\nYou can combine two or more steps in case you need some conditional execution.\n\nIn this example, you can see the first operation available - `|` (OR)\n\n```python\n    pipe_schema = {\n        'GET': {\n            'out': (\n                # In this case, if EDatabase step throws\n                # any exception, then LNotFound step will be executed, with information about exception\n                # in store\n                EDatabase(table_name='todo-items') | LNotFound(),\n                TJsonResponseReady(data_field='todo-items_item'),\n                LJsonResponse()\n            )\n        },\n```\n\nThere is also the second operator - `&` (AND)\n\n```python\n    pipe_schema = {\n        'GET': {\n            'out': (\n                # In this case, if EDatabase step throws\n                # any exception, or SomethingImportantAsWell throws any exception\n                # then nothing happens and store without a change goes to next step\n                EDatabase(table_name='todo-items') & SomethingImportantAsWell(),\n                TJsonResponseReady(data_field='todo-items_item'),\n                LJsonResponse()\n            )\n        },\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jellyfish-tech/pipe-framework",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipe-framework",
    "package_url": "https://pypi.org/project/pipe-framework/",
    "platform": "",
    "project_url": "https://pypi.org/project/pipe-framework/",
    "project_urls": {
      "Homepage": "https://github.com/jellyfish-tech/pipe-framework"
    },
    "release_url": "https://pypi.org/project/pipe-framework/0.1.0a0/",
    "requires_dist": [
      "werkzeug (==1.0.1)",
      "Jinja2 (==2.11.2)",
      "frozendict (==1.2)",
      "orator (==0.9.9)",
      "rich (==5.2.1)",
      "valideer (==0.4.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Data oriented web framework",
    "version": "0.1.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9408286,
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "987c504b22a91f14ab99ef7c235e87dfb0260f1ea59e077188989799786191ff",
          "md5": "2e16fc66dd929c92e0f09b95a2ca4695",
          "sha256": "9328b6c400222df7f689089712f51cfd949649ad9756d3e56bb658d77f72022d"
        },
        "downloads": -1,
        "filename": "pipe_framework-0.1.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e16fc66dd929c92e0f09b95a2ca4695",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20283,
        "upload_time": "2021-02-13T15:59:08",
        "upload_time_iso_8601": "2021-02-13T15:59:08.695516Z",
        "url": "https://files.pythonhosted.org/packages/98/7c/504b22a91f14ab99ef7c235e87dfb0260f1ea59e077188989799786191ff/pipe_framework-0.1.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d31ec475c06b2148e7f572e746ba0114eef853150363d527a607829a40be26c5",
          "md5": "2325568f473ea1e10cfbe267c471e2f8",
          "sha256": "ea16943cd34dd1b2d7bda2d58918777d4a9e88f31b36cc4c2035346a88b3c279"
        },
        "downloads": -1,
        "filename": "pipe-framework-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "2325568f473ea1e10cfbe267c471e2f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18439,
        "upload_time": "2021-02-13T15:59:10",
        "upload_time_iso_8601": "2021-02-13T15:59:10.259424Z",
        "url": "https://files.pythonhosted.org/packages/d3/1e/c475c06b2148e7f572e746ba0114eef853150363d527a607829a40be26c5/pipe-framework-0.1.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "987c504b22a91f14ab99ef7c235e87dfb0260f1ea59e077188989799786191ff",
        "md5": "2e16fc66dd929c92e0f09b95a2ca4695",
        "sha256": "9328b6c400222df7f689089712f51cfd949649ad9756d3e56bb658d77f72022d"
      },
      "downloads": -1,
      "filename": "pipe_framework-0.1.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e16fc66dd929c92e0f09b95a2ca4695",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 20283,
      "upload_time": "2021-02-13T15:59:08",
      "upload_time_iso_8601": "2021-02-13T15:59:08.695516Z",
      "url": "https://files.pythonhosted.org/packages/98/7c/504b22a91f14ab99ef7c235e87dfb0260f1ea59e077188989799786191ff/pipe_framework-0.1.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d31ec475c06b2148e7f572e746ba0114eef853150363d527a607829a40be26c5",
        "md5": "2325568f473ea1e10cfbe267c471e2f8",
        "sha256": "ea16943cd34dd1b2d7bda2d58918777d4a9e88f31b36cc4c2035346a88b3c279"
      },
      "downloads": -1,
      "filename": "pipe-framework-0.1.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "2325568f473ea1e10cfbe267c471e2f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18439,
      "upload_time": "2021-02-13T15:59:10",
      "upload_time_iso_8601": "2021-02-13T15:59:10.259424Z",
      "url": "https://files.pythonhosted.org/packages/d3/1e/c475c06b2148e7f572e746ba0114eef853150363d527a607829a40be26c5/pipe-framework-0.1.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}