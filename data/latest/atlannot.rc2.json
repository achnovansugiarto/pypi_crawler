{
  "info": {
    "author": "Blue Brain Project, EPFL",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Atlas Annotation\n\n<img src=\"docs/images/Atlas-Annotation-banner.jpg\"/>\n\nOver the years the Allen Brain institute has constantly improved and updated\ntheir brain region annotation atlases. Unfortunately the old annotation atlases\nare not always aligned with the new ones. For example, the CCFv2 annotations\nand the Nissl volume are not compatible with the CCFv3 annotation and the\ncorresponding average brain volume. This package proposes a number of methods\nfor deforming the Nissl volume and the CCFv2 annotations in order to re-align\nthem to CCFv3.\n\n* [Installation](#installation)\n    * [Python Version and Environment](#python-version-and-environment)\n    * [Install \"Atlas Annotation\"](#install-atlas-annotation)\n* [Data](#data)\n    * [Remote Storage Access](#remote-storage-access)\n    * [Get the Data](#get-the-data)\n* [Examples](#examples)\n* [Notebooks, Widgets, and Experiments](#notebooks-widgets-and-experiments)\n* [Funding & Acknowledgment](#funding--acknowledgment)\n\n## Installation\n### Python Version and Environment\nThe currently supported python versions are `3.7`, `3.8`, and `3.9`.\n\nIf you are part of the Blue Brain Project and are working on the BB5 you can\nfind the correct python version in the archive modules:\n- `python3.7`: `archive/2020-02` - `archive/2020-12`\n- `python3.8`: `archive/2021-01` - `archive/2021-12`\n- `python3.9`: `archive/2022-01` - `unstable`.\n  Here's an example of a set of commands that will set up your environment on the BB5:\n\n```shell\nmodule purge\nmodule load archive/2020-12\nmodule load python\npython -m venv venv\n. ./venv/bin/activate\npython --version\n```\n\nWe also recommend that you make sure that `pip` is up-to-date and that the\npackages `wheel` and `setuptools` are installed:\n```shell\npip install --upgrade pip wheel setuptools\n```\n\n### Install \"Atlas Annotation\"\nIn order to access the data and the example scripts a local clone of this\nrepository is required. Run these commands to get it:\n```shell\ngit clone https://github.com/BlueBrain/atlas-annotation\ncd atlas-annotation\n```\n\nThe \"Atlas Interpolation\" package can now be installed directly from the clone\nwe just created:\n```shell\npip install '.[data, interactive]'\n```\n\n## Data\nThe data for this project is managed by the [DVC tool](https://dvc.org/) and all\nrelated files are located in the `data` directory. The DVC tool has already been\ninstalled together with the \"Atlas Interpolation\" package. Every time you need\nto run a DVC command (`dvc ...`) make sure to change to the `data` directory\nfirst (`cd data`).\n\n### Remote Storage Access\nWe have already prepared all the data, but it is located on a remote storage\nthat is only accessible to people within the Blue Brain Project who have\naccess permissions to project `proj101`. If you're unsure you can test your\npermissions with the following command:\n```shell\nssh bbpv1.bbp.epfl.ch \\\n\"ls /gpfs/bbp.cscs.ch/data/project/proj101/dvc_remotes\"\n```\nPossible outcomes:\n```shell\n# Access OK\natlas_annotation\natlas_interpolation\n\n# Access denied\nls: cannot open directory [...]: Permission denied\n```\nDepending on whether you have access to the remote storage in the following\nsections you will either pull the data from the remote (`dvc pull`) or download\nthe input data manually and re-run the data processing pipelines to reproduce\nthe output data (`dvc repro`).\n\nIf you work on the BB5 and have access to the remote storage then run the\nfollowing command to short-circuit the remote access (because the remote is\nlocated on the BB5 itself):\n```shell\ncd data\ndvc remote add --local gpfs_proj101 \\\n  /gpfs/bbp.cscs.ch/data/project/proj101/dvc_remotes/atlas_annotation\ncd ..\n```\n\n### Get the Data\nThe purpose of the \"Atlas Annotation\" package is to align brain volumes and\nthe corresponding atlases. This section explains how to get these data.\n\nIf you have access to the remote storage (see above) then all data can be\nreadily pulled from it:\n```shell\ncd data\ndvc pull\ncd ..\n```\n\nIn the case where you don't have access to the remote storage, the data need\nto be downloaded from the original sources and the pre-processing needs to\nbe run. Note that the pre-processing may take a long time (around an hour).\nRun the following commands to start this process:\n```shell\ncd data\ndvc repro\ncd ..\n```\n\nIn some cases you might not need all data. Then it is possible to download\nunprepared data that you need by running specific DVC stages. Refer to the\n[`data/README.md`](data/README.md) file for the description of different data\nfiles.\n\n## Examples\nHere are some examples of the functionalities that one can find in the\n`atlannot` package.\n\n### Registration\nOne can compute the registration between a fixed and a moving image. \nThose images can be of any type (for example Atlas Annotations or simply\nintensity images). The inputs can be 2D or 3D, the only constraint is that they\nhave to be of the same shape.\n\nThe main use-case of `atlannot` is the registration of brain volumes from one\ncoordinate framework to another. It is then needed to allow some flexibility in\nterms of inputs type to accept any data such as regions annotations, intensity\nimages. \n\n```python\nimport numpy as np\n\nfrom atlannot.ants import register, transform\n\nfixed = np.random.rand(20, 20)   # replace by a real image\nmoving = np.random.rand(20, 20)  # replace by a real image\n# Computation of the displacement field from moving image to fixed image.\nnii_data = register(fixed.astype(np.float32), moving.astype(np.float32)) \n# Apply the displacement to moving image.\nwarped = transform(moving.astype(np.float32), nii_data)\n```\n\n### Image Manipulation\n`atlannot` has also a lot of utility functions to manipulate images in order\nto make some pre-processing/post-processing on images.\n\nA concrete example could be to combine a region annotation and an intensity\nimage together and use the final result as an input to the registration.\nTo merge information from both images, one could superpose regions borders of\nthe annotation on top of the intensity image.\n\n```python\nimport numpy as np\nfrom atlannot.utils import edge_laplacian_thin, merge\n\nintensity_img = np.random.rand(20, 20) # Load intensity image here\n\n# Create fake annotation image\nannotation_img = np.zeros((20, 20))    # Load annotation image here\nannotation_img[5:15, 5:15] = 1         # Load annotation image here\n\n# Compute the borders of the annotation image\nborders = edge_laplacian_thin(annotation_img)\n\n# Merge intensity image and annotation image\nmerge_img = merge(intensity_img, borders)\n```\n\nSee here other manipulation one can do on any kind of images:\n```python\nimport numpy as np\nfrom atlannot.utils import (\n  add_middle_line, \n  edge_laplacian_thick, \n  edge_laplacian_thin, \n  edge_sobel, \n  image_convolution,\n  split_halfs,\n)\n\n# Instantiate an image \nimg = np.random.rand(20, 20)  # Please replace by a real image\n\n# Apply some convolution to the image\nkernel = [[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]]\nimg1 = image_convolution(img, kernel=kernel)\nimg2 = edge_laplacian_thick(img)\nimg3 = edge_sobel(img)\nimg4 = edge_laplacian_thick(img)\n\n# Add a middle line, can choose the axis, the tickness, ...\nimg5 = add_middle_line(img, axis=0, thickness=2)\n\n# Split the image into two \nhalf_imgs = split_halfs(img2, axis=0)[0]\n```\n\n### Utilities\nThe `atlannot` contains other utilities:\n- Atlas utilities:\n  - Merge atlases to harmonize the scripts\n  - Unfurl regions if the regions are structured in tree\n  - Compute misalignments\n  - Remapping the labels\n- Notebook utilities:\n  - Volume Viewer to see volume in every directions\n  - Add colored legend to atlas images\n\n### Concrete examples\nYou can find numerous examples of the usage of `atlannot` package in the\nscripts located in the [`experiments`](experiments) directory. \n```shell\ngit clone https://github.com/BlueBrain/atlas-annotation#egg=atlannot\ncd atlas-annotation/experiments\n```\n\nTo execute the scripts in this `experiments` folder, please first follow the\ndata preparation instructions found in the [data](#data) section. \n\nNext, one needs also to install additional packages for interactive use.\n```shell\npip install git+https://github.com/BlueBrain/atlas-annotation#egg=atlannot[interactive]\n```\n\nOnce the cloning, the installation and the download of data is done, you can \nuse any script, for example:\n```shell\npython ants2d_atlas_fine.py\n```\n\n## Notebooks, Widgets, and Experiments\nThe additional functionality related to notebooks, widgets, and experiment\nscripts is not activated by default. In order to use it you need to specify\nan additional `interactive` option upon installing this package. This can\nbe done as follows:\n```shell\npip install git+https://github.com/BlueBrain/atlas-annotation#egg=atlannot[interactive]\n```\n\nFurthermore, you will need JupyterLab or Jupyter Notebook installed in your\nvirtual environment, as well as the corresponding `ipywidgets` plugin. Follow\nthe following online instructions in order to do so:\n- How to install JupyterLab/Jupyter Notebook: https://jupyter.org\n- How to install the `ipywidgets` plugin:\n  https://ipywidgets.readthedocs.io/en/latest/user_install.html\n\n## Funding & Acknowledgment\nThe development of this software was supported by funding to the Blue Brain\nProject, a research center of the École polytechnique fédérale de Lausanne\n(EPFL), from the Swiss government’s ETH Board of the Swiss Federal Institutes\nof Technology.\n\nCopyright (c) 2021-2022 Blue Brain Project/EPFL\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BlueBrain/atlas-annotation",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atlannot",
    "package_url": "https://pypi.org/project/atlannot/",
    "platform": null,
    "project_url": "https://pypi.org/project/atlannot/",
    "project_urls": {
      "Homepage": "https://github.com/BlueBrain/atlas-annotation",
      "Source": "https://github.com/BlueBrain/atlas-annotation",
      "Tracker": "https://github.com/BlueBrain/atlas-annotation/issues"
    },
    "release_url": "https://pypi.org/project/atlannot/0.1.3/",
    "requires_dist": [
      "antspyx (>=0.2.7)",
      "atldld (>=0.2.2)",
      "matplotlib",
      "numpy (>1.20)",
      "pynrrd",
      "dvc[ssh] (>=2) ; extra == 'data'",
      "bandit ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "flake8-bugbear ; extra == 'dev'",
      "flake8-comprehensions ; extra == 'dev'",
      "flake8-docstrings ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "sphinx (>=1.3) ; extra == 'docs'",
      "sphinx-bluebrain-theme ; extra == 'docs'",
      "ipython ; extra == 'interactive'",
      "ipywidgets ; extra == 'interactive'",
      "nibabel ; extra == 'interactive'",
      "scipy ; extra == 'interactive'",
      "toml ; extra == 'interactive'",
      "tqdm ; extra == 'interactive'"
    ],
    "requires_python": ">=3.7",
    "summary": "Align and improve brain annotation atlases",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15914485,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe51c1b4346df825fe5909c9305047add0788e1b530d00e49aa2ed9f8b82e779",
          "md5": "bb6cba846bfb2349f8dafbcca82ba3ec",
          "sha256": "f4c4961678b1b473633265d1f0edaaaf1a811d30581774775de8e284dc7d7fad"
        },
        "downloads": -1,
        "filename": "atlannot-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb6cba846bfb2349f8dafbcca82ba3ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7.0",
        "size": 40686,
        "upload_time": "2021-11-03T10:40:34",
        "upload_time_iso_8601": "2021-11-03T10:40:34.613949Z",
        "url": "https://files.pythonhosted.org/packages/fe/51/c1b4346df825fe5909c9305047add0788e1b530d00e49aa2ed9f8b82e779/atlannot-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08b96edff732ad711e600b91d32052604987b744f054c049739df73c07ef0232",
          "md5": "5120cb99108f87875af93a8afc88bdff",
          "sha256": "145dac874752d5e5d093b977aa04798916daf31d1e942cc64d059175deea27df"
        },
        "downloads": -1,
        "filename": "atlannot-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5120cb99108f87875af93a8afc88bdff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7.0",
        "size": 58885,
        "upload_time": "2021-11-03T10:40:36",
        "upload_time_iso_8601": "2021-11-03T10:40:36.098244Z",
        "url": "https://files.pythonhosted.org/packages/08/b9/6edff732ad711e600b91d32052604987b744f054c049739df73c07ef0232/atlannot-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37dcb0f462aca397f4a253b83d6dfd9cfadef9e15b2733885a32b5613b11d23f",
          "md5": "566a9d5fe05e1156ba6b9b897f2062da",
          "sha256": "dc2475994cd441cde38c9627f98d20f63ed8e8206331dfb502ea02ee0b36a663"
        },
        "downloads": -1,
        "filename": "atlannot-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "566a9d5fe05e1156ba6b9b897f2062da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 55118,
        "upload_time": "2022-11-28T13:58:45",
        "upload_time_iso_8601": "2022-11-28T13:58:45.119150Z",
        "url": "https://files.pythonhosted.org/packages/37/dc/b0f462aca397f4a253b83d6dfd9cfadef9e15b2733885a32b5613b11d23f/atlannot-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60ddc6bc41ce1e08b49d1254aa94ae078720173dde77760fd695c30c679504d",
          "md5": "c917e81af97d6aecd78109cdd65b6889",
          "sha256": "66717d37dd7808f8d7543c8da4d2b09c7e21d9c6151474ad1079b10d7b66d243"
        },
        "downloads": -1,
        "filename": "atlannot-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c917e81af97d6aecd78109cdd65b6889",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 160009,
        "upload_time": "2022-11-28T13:58:48",
        "upload_time_iso_8601": "2022-11-28T13:58:48.393314Z",
        "url": "https://files.pythonhosted.org/packages/b6/0d/dc6bc41ce1e08b49d1254aa94ae078720173dde77760fd695c30c679504d/atlannot-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37dcb0f462aca397f4a253b83d6dfd9cfadef9e15b2733885a32b5613b11d23f",
        "md5": "566a9d5fe05e1156ba6b9b897f2062da",
        "sha256": "dc2475994cd441cde38c9627f98d20f63ed8e8206331dfb502ea02ee0b36a663"
      },
      "downloads": -1,
      "filename": "atlannot-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "566a9d5fe05e1156ba6b9b897f2062da",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 55118,
      "upload_time": "2022-11-28T13:58:45",
      "upload_time_iso_8601": "2022-11-28T13:58:45.119150Z",
      "url": "https://files.pythonhosted.org/packages/37/dc/b0f462aca397f4a253b83d6dfd9cfadef9e15b2733885a32b5613b11d23f/atlannot-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60ddc6bc41ce1e08b49d1254aa94ae078720173dde77760fd695c30c679504d",
        "md5": "c917e81af97d6aecd78109cdd65b6889",
        "sha256": "66717d37dd7808f8d7543c8da4d2b09c7e21d9c6151474ad1079b10d7b66d243"
      },
      "downloads": -1,
      "filename": "atlannot-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c917e81af97d6aecd78109cdd65b6889",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 160009,
      "upload_time": "2022-11-28T13:58:48",
      "upload_time_iso_8601": "2022-11-28T13:58:48.393314Z",
      "url": "https://files.pythonhosted.org/packages/b6/0d/dc6bc41ce1e08b49d1254aa94ae078720173dde77760fd695c30c679504d/atlannot-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}