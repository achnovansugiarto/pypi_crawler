{
  "info": {
    "author": "Node Contributors",
    "author_email": "dev@conestack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development"
    ],
    "description": "node.ext.fs\n===========\n\n.. image:: https://img.shields.io/pypi/v/node.ext.fs.svg\n    :target: https://pypi.python.org/pypi/node.ext.fs\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/node.ext.fs.svg\n    :target: https://pypi.python.org/pypi/node.ext.fs\n    :alt: Number of PyPI downloads\n\n.. image:: https://github.com/conestack/node.ext.fs/actions/workflows/test.yaml/badge.svg\n    :target: https://github.com/conestack/node.ext.fs/actions/workflows/test.yaml\n    :alt: Test node.ext.fs\n\n\nOverview\n--------\n\n``node.ext.fs`` is a node implementation for file system directories. It is\nthe successor of `node.ext.directory <https://pypi.python.org/pypi/node.ext.directory>`_.\n\nFor more information about ``node`` see\n`https://pypi.python.org/pypi/node <https://pypi.python.org/pypi/node>`_.\n\n\nUsage\n-----\n\nCreate new file:\n\n.. code-block:: python\n\n    from node.ext.fs import File\n\n    file_path = 'file.txt'\n    f = File(name=file_path)\n\n    # set contents via data attribute\n    f.data = 'data\\n'\n\n    # set contents via lines attribute\n    f.lines = ['data']\n\n    # set permissions\n    f.fs_mode = 0o644\n\n    # persist\n    f()\n\nRead existing file:\n\n.. code-block:: python\n\n    file_path = 'file.txt'\n    f = File(name=file_path)\n\n    assert(f.data == 'data\\n')\n    assert(f.lines == ['data'])\n    assert(f.fs_mode == 0o644)\n\nFiles with binary data:\n\n.. code-block:: python\n\n    from node.ext.fs import MODE_BINARY\n\n    file_path = 'file.txt'\n    f = File(name=file_path)\n    f.mode = MODE_BINARY\n\n    f.data = b'\\x00\\x00'\n\n    assert(f.data == b'\\x00\\x00')\n\n    # lines property won't work if file in binary mode\n    f.lines  # raises RuntimeError\n\nCreate directory:\n\n.. code-block:: python\n\n    from node.ext.fs import Directory\n\n    dir_path = '.'\n    d = Directory(name=dir_path)\n\n    # add subdirectories and files\n    d['sub'] = Directory()\n    d['file.txt'] = File()\n\n    # set permissions for directory\n    d['sub'].fs_mode = 0o755\n\n    # persist\n    d()\n\nRead existing directory:\n\n.. code-block:: python\n\n    dir_path = '.'\n    d = Directory(name=dir_path)\n\n.. code-block:: pycon\n\n    >>> d.printtree()\n    <class 'node.ext.fs.directory.Directory'>: .\n      <class 'node.ext.fs.directory.File'>: file.txt\n      <class 'node.ext.fs.directory.Directory'>: sub\n\nDefining the default factories for files and directories is done by setting\n``default_file_factory`` respective ``default_directory_factory``:\n\n.. code-block:: python\n\n    class CustomFile(File):\n        pass\n\n    class CustomDirectory(Directory):\n        default_file_factory = CustomFile\n\n    CustomDirectory.default_directory_factory = CustomDirectory\n\n    dir_path = '.'\n    d = CustomDirectory(name=dir_path)\n\n.. code-block:: pycon\n\n    >>> d.printtree()\n    <class '...CustomDirectory'>: .\n      <class '...CustomFile'>: file.txt\n      <class '...CustomDirectory'>: sub\n\nDefine wildcard factories. Factories can be defined for directories and files.\nPattern matching is done using ``fnmatch``. See\n``node.behaviors.WildcardFactory``:\n\n.. code-block:: python\n\n    class TextFile(File):\n        pass\n\n    class LogsDirectory(Directory):\n        pass\n\n    d = Directory(\n        name='.',\n        factories={\n            '*.txt': TextFile,\n            'logs': LogsDirectory\n        })\n\nNow when reading children, factories matching the file or directory name\npatterns are used to instantiate the children, using the default factories if\nno pattern matches.\n\n.. code-block:: pycon\n\n    >>> os.mkdir('logs')\n\n    >>> os.mkdir('other')\n\n    >>> with open('file.txt', 'w') as f:\n    ...     f.write('text')\n\n    >>> with open('file.rst', 'w') as f:\n    ...     f.write('rst')\n\n    >>> d = Directory(\n    ...     name='.',\n    ...     factories={\n    ...         '*.txt': TextFile,\n    ...         'logs': LogsDirectory\n    ...     })\n\n    >>> d.printtree()\n    <class 'node.ext.fs.directory.Directory'>: .\n      <class '...File'>: file.rst\n      <class '...TextFile'>: file.txt\n      <class '...LogsDirectory'>: logs\n      <class '...Directory'>: other\n\n\nPython Versions\n===============\n\n- Python 2.7, 3.7+\n- May work with other versions (untested)\n\n\nContributors\n============\n\n- Robert Niederreiter (Author)\n\n\nChanges\n=======\n\n1.1 (2022-12-21)\n----------------\n\n- Introduce ``node.ext.fs.interfaces.IDirectory.rename`` and implement in\n  ``node.ext.fs.directory.DirectoryStorage``.\n  [rnix]\n\n- Do not allow setting and deleting of directory children defined in\n  ``ignores``.\n  [rnix]\n\n\n1.0 (2022-10-06)\n----------------\n\n- Subclass ``threading.local`` for\n  ``node.ext.fs.directory._directory_context`` objects in order to safely\n  provide default values.\n  [rnix]\n\n- Introduce ``IFileIO`` interface and ``FileIO`` plumbing behavior.\n  [rnix]\n\n- Introduce ``IFileNode`` interface.\n  [rnix]\n\n- Pass ``name`` and ``parent`` to default file and directory factories.\n  [rnix]\n\n- ``DirectoryStorage`` accepts ``fs_path`` keyword argument.\n  [rnix]\n\n- Rename ``_FSModeMixin`` plumbing behavior to ``FSMode``. Setting the actual\n  file mode is now done by plumbing ``__call__`` function.\n  [rnix]\n\n- Introduce ``FSLocation`` plumbing behavior.\n  [rnix]\n\n**Breaking Changes**\n\n- Package has been renamed from ``node.ext.directory`` to ``node.ext.fs``.\n  There are too many breaking changes for a sane deprecation path.\n  [rnix]\n\n- ``DirectoryStorage.__init__`` no longer accepts deprecated ``backup`` keyword\n  argument.\n  [rnix]\n\n- ``DirectoryStorage.child_directory_factory`` has been renamed to\n  ``default_directory_factory``\n  [rnix]\n\n- ``DirectoryStorage`` derives from ``node.behaviors.WildcardFactory`` now.\n  Own factory pattern logic working with file endings has been removed.\n  Patterns must be adopted.\n  [rnix]\n\n- Remove global ``file_factories`` and ``DirectoryStorage.file_factories``.\n  Wildcard pattern related factories are defined via\n  ``DirectoryStorage.factories`` now.\n  [rnix]\n\n- Remove ``IFileAddedEvent`` and ``node.ext.fs.events`` module. If you need\n  lifecycle events, use ``node.behaviors.Lifecycle`` instead.\n  [rnix]\n\n- Basic ``File`` and ``Directory`` objects no longer use referencing related\n  plumbung behaviors. You need to define your own base objects plumbing\n  ``INodeReference`` implemeting behaviors.\n  [rnix]\n\n- Reduce ``IFile`` interface. It no longer inherits from ``ILeaf`` and default\n  file implementation related attributes were moved to ``IFileNode`` interface.\n  This way it is possible to implement very custom file implementations without\n  breaking the interface contract.\n  [rnix]\n\n- Rename ``FileStorage`` to ``FileNode``. It no longer inherits from\n  ``DictStorage``. Further file data is no longer kept in memory unless it\n  changes, then it's kept until it gets written to disk.\n  [rnix]\n\n- ``FileNode`` and ``DirectoryStorage`` not inherits from\n  ``_FSModeMixin`` respective now ``FSMode`` behavior any more. ``FSMode``\n  behavior must be applied explicit on nodes which should provide this\n  behavior.\n  [rnix]\n\n- Rename ``_fs_path`` helper function to ``get_fs_path``.\n  [rnix]\n\n- Rename ``_fs_mode`` helper function to ``get_fs_mode``.\n  [rnix]\n\n\n0.8 (2022-03-21)\n----------------\n\n- Replace deprecated use of ``Nodify`` by ``MappingNode``.\n  [rnix]\n\n- Replace deprecated use of ``Adopt`` by ``MappingAdopt``.\n  [rnix]\n\n\n0.7\n---\n\n- Python 3 support.\n  [rnix, 2017-06-06]\n\n- ``fs_mode`` is read from filesystem if file or directory exists and\n  fs_mode not set explicitely.\n  [rnix, 2017-06-06]\n\n- Remove ``backup`` option from ``IDirectory`` interface. It never really\n  worked properly and conceptually ``IDirectory`` is the wrong place for\n  handling backups of files.\n  [rnix, 2017-06-04]\n\n\n0.6\n---\n\n- Introduce ``node.ext.directory.interfaces.IFile.direct_sync`` setting.\n  [rnix, 2017-01-30]\n\n- Complete ``node.ext.directory.interfaces.IFile`` and\n  ``node.ext.directory.interfaces.IDirectory`` to reflect implemented features.\n  [rnix, 2017-01-30]\n\n- Move ``node.ext.directory.directory.MODE_TEXT`` and\n  ``node.ext.directory.directory.MODE_BINARY`` to\n  ``node.ext.directory.interfaces``.\n  [rnix, 2017-01-30]\n\n\n0.5.4\n-----\n\n- Check whether directory to be peristed already exists by name as file in\n  ``node.ext.directory.FileStorage.__call__``.\n  [rnix, 2015-10-05]\n\n- Implement fallback to ``path`` in\n  ``node.ext.directory.FileStorage.__call__`` if ``fs_path`` not exists.\n  [rnix, 2015-10-05]\n\n- Implement fallback to ``path`` in\n  ``node.ext.directory.FileStorage._get_data`` if ``fs_path`` not exists.\n  [rnix, 2015-10-05]\n\n- Set initial mode with ``self.mode`` property setter instead of internal\n  ``self._mode`` in ``node.ext.directory.FileStorage._get_mode``.\n  [rnix, 2015-10-05]\n\n\n0.5.3\n-----\n\n- Remove deleted keys from internal reference after ``__call__`` in order\n  to return the correct result when adding a file or directory with the same\n  key again.\n  [rnix, 2015-07-20]\n\n\n0.5.2\n-----\n\n- Use try/except instead of iteration to check whether directory child already\n  in memory.\n  [rnix, 2015-05-12]\n\n\n0.5.1\n-----\n\n- Always use ``os.chmod`` for setting directory permissions, not only if\n  already exists.\n  [rnix, 2015-03-03]\n\n\n0.5\n---\n\n- Introduce ``fs_mode`` on directories and files.\n  [rnix, 2015-03-03]\n\n\n0.4\n---\n\n- Return empty list in ``File.lines`` if no data.\n  [rnix, 2015-02-18]\n\n- Consider filesystem encoding. Defaults to UTF-8.\n  [rnix, 2015-02-18]\n\n- Tree locking on modification.\n  [rnix, 2014-09-02]\n\n- Prevent empty keys in ``__setitem__``.\n  [rnix, 2014-09-02]\n\n- Use ``plumbing`` decorator.\n  [rnix, 2014-08-25]\n\n\n0.3\n---\n\n- introduce ``default_file_factory`` on directories for controlling default\n  file child creation.\n  [rnix, 2013-12-09]\n\n- move file logic in ``FileStorage`` behavior.\n  [rnix, 2013-08-06]\n\n- make ``file_factories`` a class property on directory storage.\n  [rnix, 2013-08-06]\n\n- make ``ignores`` a class property on directory storage.\n  [rnix, 2013-08-06]\n\n- Cleanup interfaces.\n  [rnix, 2013-08-06]\n\n\n0.2\n---\n\n- Almost complete rewrite. Fits now paradigms of node based API's.\n  [rnix, 2012-01-30]\n\n\n0.1\n---\n\n- initial\n\n\nLicense\n=======\n\nCopyright (c) 2010-2021, BlueDynamics Alliance, Austria\nCopyright (c) 2021-2022, Node Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/conestack/node.ext.fs",
    "keywords": "node file system",
    "license": "Simplified BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "node.ext.fs",
    "package_url": "https://pypi.org/project/node.ext.fs/",
    "platform": null,
    "project_url": "https://pypi.org/project/node.ext.fs/",
    "project_urls": {
      "Homepage": "http://github.com/conestack/node.ext.fs"
    },
    "release_url": "https://pypi.org/project/node.ext.fs/1.1/",
    "requires_dist": [
      "node (>=1.0)",
      "setuptools",
      "coverage ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Filesystem abstraction based on nodes",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16170699,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1d7d5ac15528f07b70bc70b8ce9e29cfebfda9460fea09311e52a841bb0f7f3",
          "md5": "e450294d9764dda2313f8caf790f21c9",
          "sha256": "14a28b5ff7bcdfefca83e3f60fa82f561dcaf425ae9167b8b007b67b0ea5b5a6"
        },
        "downloads": -1,
        "filename": "node.ext.fs-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e450294d9764dda2313f8caf790f21c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15235,
        "upload_time": "2022-10-06T06:34:48",
        "upload_time_iso_8601": "2022-10-06T06:34:48.418896Z",
        "url": "https://files.pythonhosted.org/packages/f1/d7/d5ac15528f07b70bc70b8ce9e29cfebfda9460fea09311e52a841bb0f7f3/node.ext.fs-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27ebd3ad8f910519350f80c060c7614741c99da3f152317e5e36a5b1e5bf2a8a",
          "md5": "8276a7e8c72d1820ff169caf8d8deb49",
          "sha256": "b230d64ca7c83ef69f6814de3c1d9bb453ea98ab8bafd52100a14fbb5a2c5f23"
        },
        "downloads": -1,
        "filename": "node.ext.fs-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8276a7e8c72d1820ff169caf8d8deb49",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16493,
        "upload_time": "2022-10-06T06:34:51",
        "upload_time_iso_8601": "2022-10-06T06:34:51.107736Z",
        "url": "https://files.pythonhosted.org/packages/27/eb/d3ad8f910519350f80c060c7614741c99da3f152317e5e36a5b1e5bf2a8a/node.ext.fs-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2176259df2e250720a78ba6b837e0546ce6774fcdc4b63ca7e2e8964cc8ad90",
          "md5": "20aa6a431c68a8c1d6b72f520106ac0e",
          "sha256": "e59f12d8506296ee0461a6027c1591bac741071d3daf9e98a6e8ee3d22433f89"
        },
        "downloads": -1,
        "filename": "node.ext.fs-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20aa6a431c68a8c1d6b72f520106ac0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16371,
        "upload_time": "2022-12-21T07:33:05",
        "upload_time_iso_8601": "2022-12-21T07:33:05.929568Z",
        "url": "https://files.pythonhosted.org/packages/b2/17/6259df2e250720a78ba6b837e0546ce6774fcdc4b63ca7e2e8964cc8ad90/node.ext.fs-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce9a7ce93e153fb1fa9a3e925f0fe16502e43739b74b799d04065d205d6aaa52",
          "md5": "19e513081ccfc83488b148cb77ab99fd",
          "sha256": "997a358ddf0c791d85236f5f34cfd52aa8f9af869959564fdfa6bdccda54c14f"
        },
        "downloads": -1,
        "filename": "node.ext.fs-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19e513081ccfc83488b148cb77ab99fd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18358,
        "upload_time": "2022-12-21T07:33:07",
        "upload_time_iso_8601": "2022-12-21T07:33:07.892248Z",
        "url": "https://files.pythonhosted.org/packages/ce/9a/7ce93e153fb1fa9a3e925f0fe16502e43739b74b799d04065d205d6aaa52/node.ext.fs-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2176259df2e250720a78ba6b837e0546ce6774fcdc4b63ca7e2e8964cc8ad90",
        "md5": "20aa6a431c68a8c1d6b72f520106ac0e",
        "sha256": "e59f12d8506296ee0461a6027c1591bac741071d3daf9e98a6e8ee3d22433f89"
      },
      "downloads": -1,
      "filename": "node.ext.fs-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20aa6a431c68a8c1d6b72f520106ac0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16371,
      "upload_time": "2022-12-21T07:33:05",
      "upload_time_iso_8601": "2022-12-21T07:33:05.929568Z",
      "url": "https://files.pythonhosted.org/packages/b2/17/6259df2e250720a78ba6b837e0546ce6774fcdc4b63ca7e2e8964cc8ad90/node.ext.fs-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce9a7ce93e153fb1fa9a3e925f0fe16502e43739b74b799d04065d205d6aaa52",
        "md5": "19e513081ccfc83488b148cb77ab99fd",
        "sha256": "997a358ddf0c791d85236f5f34cfd52aa8f9af869959564fdfa6bdccda54c14f"
      },
      "downloads": -1,
      "filename": "node.ext.fs-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "19e513081ccfc83488b148cb77ab99fd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18358,
      "upload_time": "2022-12-21T07:33:07",
      "upload_time_iso_8601": "2022-12-21T07:33:07.892248Z",
      "url": "https://files.pythonhosted.org/packages/ce/9a/7ce93e153fb1fa9a3e925f0fe16502e43739b74b799d04065d205d6aaa52/node.ext.fs-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}