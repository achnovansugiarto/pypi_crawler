{
  "info": {
    "author": "nadir.izr,maykin",
    "author_email": "nadir@soundmindtech.com,support@maykinmedia.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "json-logic-py\n=============\n\nThis parser accepts `JsonLogic <http://jsonlogic.com>`__ rules and\nexecutes them in Python.\n\nThis is a fork of `json-logic-py <https://github.com/nadirizr/json-logic-py>`__ by\n`nadir.izr <https://github.com/nadirizr>`__, which is a Python porting of the\nGitHub project by `jwadhams <https://github.com/jwadhams>`__ for JavaScript:\n`json-logic-js <https://github.com/jwadhams/json-logic-js>`__.\n\n\nThe JsonLogic format is designed to allow you to share rules (logic)\nbetween front-end and back-end code (regardless of language difference),\neven to store logic along with a record in a database. JsonLogic is\ndocumented extensively at `JsonLogic.com <http://jsonlogic.com>`__,\nincluding examples of every `supported\noperation <http://jsonlogic.com/operations.html>`__ and a place to `try\nout rules in your browser <http://jsonlogic.com/play.html>`__.\n\nThe same format can also be executed in PHP by the library\n`json-logic-php <https://github.com/jwadhams/json-logic-php/>`__\n\nExamples\n--------\n\nSimple\n~~~~~~\n\n.. code:: python\n\n    from json_logic import jsonLogic\n    jsonLogic( { \"==\" : [1, 1] } )\n    # True\n\nThis is a simple test, equivalent to ``1 == 1``. A few things about the\nformat:\n\n1. The operator is always in the \"key\" position. There is only one key\n   per JsonLogic rule.\n2. The values are typically an array.\n3. Each value can be a string, number, boolean, array (non-associative),\n   or null\n\nCompound\n~~~~~~~~\n\nHere we're beginning to nest rules.\n\n.. code:: python\n\n    jsonLogic(\n      {\"and\" : [\n        { \">\" : [3,1] },\n        { \"<\" : [1,3] }\n      ] }\n    )\n    # True\n\nIn an infix language (like Python) this could be written as:\n\n.. code:: python\n\n    ( (3 > 1) and (1 < 3) )\n\nData-Driven\n~~~~~~~~~~~\n\nObviously these rules aren't very interesting if they can only take\nstatic literal data. Typically ``jsonLogic`` will be called with a rule\nobject and a data object. You can use the ``var`` operator to get\nattributes of the data object:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : [\"a\"] }, # Rule\n      { a : 1, b : 2 }   # Data\n    )\n    # 1\n\nIf you like, we support `syntactic\nsugar <https://en.wikipedia.org/wiki/Syntactic_sugar>`__ on unary\noperators to skip the array around values:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : \"a\" },\n      { a : 1, b : 2 }\n    )\n    # 1\n\nYou can also use the ``var`` operator to access an array by numeric\nindex:\n\n.. code:: python\n\n    jsonLogic(\n      {\"var\" : 1 },\n      [ \"apple\", \"banana\", \"carrot\" ]\n    )\n    # \"banana\"\n\nHere's a complex rule that mixes literals and data. The pie isn't ready\nto eat unless it's cooler than 110 degrees, *and* filled with apples.\n\n.. code:: python\n\n    rules = { \"and\" : [\n      {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n      {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n    ] }\n\n    data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } }\n\n    jsonLogic(rules, data)\n    # True\n\nDates\n~~~~~\n\nYou can use the ``date`` operator to include dates in the json logic. The dates are internally converted to ``datetime.date``\nobjects, and then the comparison is performed.\n\n.. code:: python\n\n    rule = {\"<=\": [{\"date\": {\"var\": \"testDate\"}}, {\"date\": \"2021-01-01\"}]}\n    data = {\"testDate\": \"2020-01-01\"}\n\n    jsonLogic(rule, data)\n    # True\n\n\nThe operator ``{\"today\": []}`` gets the current date. It is also possible to add/subtract years to a date. This makes use\nof ``relativedelta`` from ``dateutils``.\n\n.. code:: python\n\n    rule = {\"-\": [{\"date\": \"2021-01-01\"}, {\"years\": 18}]}\n\n    jsonLogic(rule)\n    # date(2003, 1, 1)\n\n\nDatetimes\n~~~~~~~~~\n\nYou can use the ``datetime`` operator to include datetimes in the json logic. The datetimes are internally converted to ``datetime.datetime``\nobjects, and then the comparison is performed.\n\n.. code:: python\n\n    rule = {\n        \"<=\": [\n            {\"datetime\": {\"var\": \"testDatetime\"}},\n            {\"datetime\": \"2022-12-01T10:00:00.000+02:00\"},\n        ]\n    }\n    data = {\"testDatetime\": \"2022-11-01T10:00:00.000+02:00\"}\n\n    jsonLogic(rule, data)\n    # True\n\nAlways and Never\n~~~~~~~~~~~~~~~~\n\nSometimes the rule you want to process is \"Always\" or \"Never.\" If the\nfirst parameter passed to ``jsonLogic`` is a non-object,\nnon-associative-array, it is returned immediately.\n\n.. code:: python\n\n    #Always\n    jsonLogic(True, data_will_be_ignored);\n    # True\n\n    #Never\n    jsonLogic(False, i_wasnt_even_supposed_to_be_here);\n    # False\n\nInstallation\n------------\n\nThe best way to install this library is via\n`PIP <https://pypi.python.org/pypi/>`__:\n\n.. code:: bash\n\n    pip install json-logic\n\nIf that doesn't suit you, and you want to manage updates yourself, the\nentire library is self-contained in ``json_logic.py`` and you can\ndownload it straight into your project as you see fit.\n\n.. code:: bash\n\n    curl -O https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maykinmedia/json-logic-py",
    "keywords": "jsonLogic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "maykin-json-logic-py",
    "package_url": "https://pypi.org/project/maykin-json-logic-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/maykin-json-logic-py/",
    "project_urls": {
      "Homepage": "https://github.com/maykinmedia/json-logic-py"
    },
    "release_url": "https://pypi.org/project/maykin-json-logic-py/0.11.0/",
    "requires_dist": [
      "coverage ; extra == 'coverage'",
      "flake8 ; extra == 'pep8'",
      "bumpversion ; extra == 'release'",
      "twine ; extra == 'release'",
      "tox ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "freezegun ; extra == 'tests'",
      "isort ; extra == 'tests'",
      "black ; extra == 'tests'",
      "flake8 ; extra == 'tests'",
      "coverage ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Build complex rules, serialize them as JSON, and execute them in Python",
    "version": "0.11.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16662881,
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "799ae3db517f98aee854b4da948012eb1920bb5c8b49ac4cec9d2fdf5527692a",
          "md5": "a2950c2bd9e531898ef0dba0be6b88cb",
          "sha256": "8f7fca26ef63e8660523dd580f6ce59f94ddb9545fc1cd1975c7aef8bafb8850"
        },
        "downloads": -1,
        "filename": "maykin_json_logic_py-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2950c2bd9e531898ef0dba0be6b88cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10999,
        "upload_time": "2023-01-26T10:58:52",
        "upload_time_iso_8601": "2023-01-26T10:58:52.162913Z",
        "url": "https://files.pythonhosted.org/packages/79/9a/e3db517f98aee854b4da948012eb1920bb5c8b49ac4cec9d2fdf5527692a/maykin_json_logic_py-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dabfa168d7a1fba6e09964be7ad8e3c2bd976b39adca2f49126aa331f91242ae",
          "md5": "f159bcc622d811ff9f9011f485032de8",
          "sha256": "b46d3bddbd78cf66fdd49f885b8a23766732b1b7e6c58dbd52f6b98c1fd23f5e"
        },
        "downloads": -1,
        "filename": "maykin-json-logic-py-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f159bcc622d811ff9f9011f485032de8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13078,
        "upload_time": "2023-01-26T10:58:53",
        "upload_time_iso_8601": "2023-01-26T10:58:53.834006Z",
        "url": "https://files.pythonhosted.org/packages/da/bf/a168d7a1fba6e09964be7ad8e3c2bd976b39adca2f49126aa331f91242ae/maykin-json-logic-py-0.10.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3668f0aac021d985e6ababee475b579e026970e3d4134c1ba0dff3e4100c6a6",
          "md5": "44c85b0ec5fd59c83322a1b30a18516f",
          "sha256": "8c46cc4722dbc8c3df21b5bd4fcbefc07088b4adae76e5baafbfd72e26cf77e3"
        },
        "downloads": -1,
        "filename": "maykin_json_logic_py-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44c85b0ec5fd59c83322a1b30a18516f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11144,
        "upload_time": "2023-02-02T08:55:55",
        "upload_time_iso_8601": "2023-02-02T08:55:55.799897Z",
        "url": "https://files.pythonhosted.org/packages/a3/66/8f0aac021d985e6ababee475b579e026970e3d4134c1ba0dff3e4100c6a6/maykin_json_logic_py-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d03d0da68c66299ec08b59cf69e03de3769f60d1a0dcbdc964549eb798d1c2e",
          "md5": "baf3aeb0363b782c8b5ef7fc536e2ca7",
          "sha256": "4d3ba24493a872326a27441a9294ebcf0b3f2d6b9374c6e7d53d6037c828adb1"
        },
        "downloads": -1,
        "filename": "maykin-json-logic-py-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "baf3aeb0363b782c8b5ef7fc536e2ca7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13228,
        "upload_time": "2023-02-02T08:55:57",
        "upload_time_iso_8601": "2023-02-02T08:55:57.915203Z",
        "url": "https://files.pythonhosted.org/packages/4d/03/d0da68c66299ec08b59cf69e03de3769f60d1a0dcbdc964549eb798d1c2e/maykin-json-logic-py-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96fd5d28c7749c89035e53d55c638a88871242909c0d506ddf1672a6c644e15d",
          "md5": "685e3dd891f2d529394d94792cb69521",
          "sha256": "63b514336bf1797fcc8adcfbaf514407571cb2e991401d7df15e98b79d579fc5"
        },
        "downloads": -1,
        "filename": "maykin_json_logic_py-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "685e3dd891f2d529394d94792cb69521",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10943,
        "upload_time": "2023-01-02T13:45:40",
        "upload_time_iso_8601": "2023-01-02T13:45:40.128059Z",
        "url": "https://files.pythonhosted.org/packages/96/fd/5d28c7749c89035e53d55c638a88871242909c0d506ddf1672a6c644e15d/maykin_json_logic_py-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bcb4dc077616e5f2cc2a17a93d73202aaa495e4a8c45b6ebd42a658e1fcd6c9",
          "md5": "2da0d34034c47ed8f04573d976f5693c",
          "sha256": "9bc2d2b6d73c6ed51a893ec6156b47d6ab69e58c959c0609ca58fc11e424a230"
        },
        "downloads": -1,
        "filename": "maykin-json-logic-py-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2da0d34034c47ed8f04573d976f5693c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13033,
        "upload_time": "2023-01-02T13:45:41",
        "upload_time_iso_8601": "2023-01-02T13:45:41.436705Z",
        "url": "https://files.pythonhosted.org/packages/6b/cb/4dc077616e5f2cc2a17a93d73202aaa495e4a8c45b6ebd42a658e1fcd6c9/maykin-json-logic-py-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3668f0aac021d985e6ababee475b579e026970e3d4134c1ba0dff3e4100c6a6",
        "md5": "44c85b0ec5fd59c83322a1b30a18516f",
        "sha256": "8c46cc4722dbc8c3df21b5bd4fcbefc07088b4adae76e5baafbfd72e26cf77e3"
      },
      "downloads": -1,
      "filename": "maykin_json_logic_py-0.11.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44c85b0ec5fd59c83322a1b30a18516f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11144,
      "upload_time": "2023-02-02T08:55:55",
      "upload_time_iso_8601": "2023-02-02T08:55:55.799897Z",
      "url": "https://files.pythonhosted.org/packages/a3/66/8f0aac021d985e6ababee475b579e026970e3d4134c1ba0dff3e4100c6a6/maykin_json_logic_py-0.11.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d03d0da68c66299ec08b59cf69e03de3769f60d1a0dcbdc964549eb798d1c2e",
        "md5": "baf3aeb0363b782c8b5ef7fc536e2ca7",
        "sha256": "4d3ba24493a872326a27441a9294ebcf0b3f2d6b9374c6e7d53d6037c828adb1"
      },
      "downloads": -1,
      "filename": "maykin-json-logic-py-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "baf3aeb0363b782c8b5ef7fc536e2ca7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13228,
      "upload_time": "2023-02-02T08:55:57",
      "upload_time_iso_8601": "2023-02-02T08:55:57.915203Z",
      "url": "https://files.pythonhosted.org/packages/4d/03/d0da68c66299ec08b59cf69e03de3769f60d1a0dcbdc964549eb798d1c2e/maykin-json-logic-py-0.11.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}