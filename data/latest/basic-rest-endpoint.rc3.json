{
  "info": {
    "author": "Swimlane",
    "author_email": "info@swimlane.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# basic-rest-endpoint\n\nFor a REST API, use the BasicRestEndpoint class.\n\nThis class allows easily creating a task for an endpoint. For example, say we want to integrate with example.com's\nindicator API. Here is a table of what their API looks like.\n\nEndpoint\tHTTP Method\tURL Parameters\nhttps://example.com/api/indicator\tGET\tindicator_id (int)\nhttps://example.com/api/indicator\tPOST/PATCH\tindicator_name, indicator_value\nhttps://example.com/api/indicator/{id}\tDELETE\t(none)\nSo we have 3 endpoints, each with different HTTP Methods and parameters, but the same base URL.\nWe can create a superclass for this integration, let's call it ExampleIntegration\n\n```python\nfrom basic_rest_endpoint import BasicRestEndpoint\n\n\nclass ExampleIntegration(BasicRestEndpoint):\n    def __init__(self, context):\n        super(ExampleIntegration, self).__init__(context.asset[\"host\"]\n        # raise_for_status=False  # If we wanted to supress non-200 http codes being raised, set this to False\n        )\n```\n## Basic Request\nTo make a request using this library, you just use `self.request(<method>, <endpoint>, **kwargs)`\nWhere `<method>` is an HTTP method, `<endpoint>` is the URL relative to the host, and `**kwargs`\nare optional params to pass into the requests.request(...) call\n\n## Basic GET Example\nNow we create a task, say for the GET /api/indicator endpoint\n```python\nfrom sw_example import ExampleIntegration  # Import our superclass from above\n\nclass SwMain(ExampleIntegration):\n    endpoint = \"/api/indicator\"\n    method = \"GET\"\n\n    def __init__(self, context):\n        super(SwMain, self).__init__(context)\n        self.kwargs['params'] = {\"indicator_id\": context.inputs[\"indicator_id\"]}  # Get indicator from inputs\n```\nBut we didn't actually make a request here! It is all handled by the BasicRestEndpoint superclass.\nThe params kwarg is passed into self.request which is used to create the full url with self.host that\nends up like https://example.com/api/indicator?indicator_id=<id>\n\n## Basic POST Example\nBut what if the data required from the API isn't in the URL params? And what if the data returned from\nwthe API isn't suitable for just returning, or needs some parsing?\n\nLet's take a look at the second endpoint, the POST /api/indicator.\n```python\nfrom sw_example import ExampleIntegration  # Import our superclass from above\n\n\nclass SwMain(ExampleIntegration):\n    endpoint = \"/api/indicator\"\n    method = \"POST\"\n\n    def parse_response(self, response):\n        data = response.json()  # Basically json.loads(response.text)\n        return data[\"data\"]\n\n    def __init__(self, context):\n        super(SwMain, self).__init__(context)\n        self.kwargs['json'] = {\n            \"indicator_name\": context.inputs[\"indicator_name\"],  # Get indicator from inputs\n            \"indicator_value\": context.inputs[\"indicator_value\"]\n        }\n}\n```\nThis time, the data is passed in under the `json` parameter to requests which automatically formats our data for\nus in the POST body. If the data were non-json, we would use `data` instead. We also parsed out the data returned,\nonly returning the JSON under the `data` key.\n\n## Basic DELETE Example\nSimilarly to a variable request method, we can have a variable URL. This is quite trivial\n```python\nclass SwMain(ExampleIntegration):\n    method = \"DELETE\"\n\n    def __init__(self, context):\n        super(SwMain, self).__init__(context)\n        self.endpoint = f\"/api/indicator/{context.inputs['iid']}\"\n```\n\n## Authentication\nBut what if example.com required authentication to make those calls?\nThere are options for these authentication methods, Basic Auth, Header Auth, Param Auth, and Custom Auth.\n\n### Basic Auth\n```python\nfrom basic_rest_endpoint import BasicRestEndpoint\n\nclass ExampleIntegration(BasicRestEndpoint):\n    def __init__(self, context):\n        super(ExampleIntegration, self).__init__(\n            host=context.asset[\"host\"],\n            auth=(context.asset[\"username\"], context.asset[\"password\"])\n        )\n```\nThis auth is handled by requests directly, and automatically parses it out and inserts it into the headers for us\n\n### Header Auth\n```python\nfrom basic_rest_endpoint import BasicRestEndpoint, HeaderAuth\n\nclass ExampleIntegration(BasicRestEndpoint):\n    def __init__(self, context):\n        super(ExampleIntegration, self).__init__(\n            host=context.asset[\"host\"],\n            auth=HeaderAuth({\"X-api-key\": context.asset[\"api_key\"]})\n        )\n```\nThis auth is when an API requires a certain header to be sent in each request\n\n### Param Auth\n```python\nfrom basic_rest_endpoint import BasicRestEndpoint, ParamAuth\n\nclass ExampleIntegration(BasicRestEndpoint):\n    def __init__(self, context):\n        super(ExampleIntegration, self).__init__(\n            host=context.asset[\"host\"],\n            auth=ParamAuth({\"username\": context.asset[\"username\"], \"password\" context.asset[\"password\"]})\n        )\n``````\nThis auth is used when the URL contains the authenticating information, like \nhttps://example.com/api/indicator?indicator_id=<id>&username=<username>&password=<password>\n\n## Polling Requests\nSometimes an API will return a status that indicates that they are still processing your request, \nand you will need to send requests until the processing is complete. We can use the polling request here.\n```python\n# def poll_request(self, method, endpoint, step=5, timeout=60, poll_func=None, **kwargs):\n\n# By default the polling stops if you receive a 200\n# Poll /my/endpoint with default settings\nself.poll_request(\"GET\", \"/my/endpoint\")\n\n# Poll /my/endpoint every 5 seconds, giving up after 20 seconds\nself.poll_request(\"GET\", \"/my/endpoint\", step=5, timeout=60)\n\n# Custom polling function to check if the json returned says it's finished\ndef my_poll_func(poll_method, poll_endpoint, poll_kwargs):\n    result = self.request(poll_method, poll_endpoint, **poll_kwargs)\n    if r.json()[\"status\"].lower() == \"done\":\n        return result  # Return the final response\n    else:\n        return False  # If what we return is falsey, then it will continue to poll\n\nself.poll_request(\"GET\" \"/my/endpoint\", poll_func=my_poll_func)\n```\n\n## Basic Pagination\nAn API may return a single page in a list of results of pages. To make this easy to process,\ninherit from BasicPaginationEndpoint and implement the following functions\n```python\nfrom basic_rest_endpoint import BasicRestPaginationEndpoint\n\ndef MyIntegration(BasicRestPaginationEndpoint):\n    def __init__(self, context):\n        # Same init as BasicRestEndpoint, excluding in example\n\n    def get_next_page(self, response):\n        data = response.json()\n        if \"next\" in data:\n            return data[\"next\"]  # Return the URL for the next call\n        else:\n            return None  # If this function returns None, all pages have been seen\n\n    def parse_response(self, response):\n        data = response.json()\n        data.pop(\"next\", None)  # Remove useless keys/clean data of each response here\n        return data\n\n    def combine_responses(self, results):\n        # Results is a list of parsed responses, from self.parse_response\n        all_data = []\n        for result in results:\n            all_data.extend(result)  # Use .extend to take [1,2,3] + [4,5] -> [1,2,3,4,5]\n\n        return all_data\n```\n\n## Link Headers Pagination\nSome (very few) APIs implement a standard called \"Link Headers\" which makes pagination very easy.\nThis implementation is completely done so all you have to do is implement combine_responses\n```python\nfrom basic_rest_endpoint import LinkHeadersPaginationEndpoint\n\ndef MyIntegration(LinkHeadersPaginationEndpoint):\n    def __init__(self, context):\n        # Same init as BasicRestEndpoint, excluding in example\n\n    def combine_responses(self, results):\n        # do parsing here\n```\n\n## Asset Parser\nThe `asset_parser` function is used to split the incoming Context object into a super() call for BasicRestEndpoint\n\nIn the following example, the Context object is parsed, and with auth set to \"basic\" the username and password are automatically set up for Basic HTTP auth.\n```python\nfrom basic_rest_endpoint import BasicRestEndpoint, asset_parser\n\n\nclass MyIntegration(BasicRestEndpoint):\n    def __init__(self, context):\n        super(MyIntegration, self).__init__(**asset_parser(context, auth=\"basic\"))\n\n\nclass Context(object):\n    asset = {\n        \"host\": \"abc.com\",\n        \"username\": \"bb\",\n        \"password\": \"cc\",\n        \"verify_ssl\": False,\n        \"http_proxy\": None\n    }\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/swimlane/basic-rest-endpoint",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "basic-rest-endpoint",
    "package_url": "https://pypi.org/project/basic-rest-endpoint/",
    "platform": "",
    "project_url": "https://pypi.org/project/basic-rest-endpoint/",
    "project_urls": {
      "Bug Tracker": "https://github.com/swimlane/basic-rest-endpoint/issues",
      "Homepage": "https://github.com/swimlane/basic-rest-endpoint"
    },
    "release_url": "https://pypi.org/project/basic-rest-endpoint/1.1.1/",
    "requires_dist": [
      "requests (<3,>=2)",
      "swimlane-connector-exceptions (<2,>=1.0.1)",
      "pyflattener (<2)",
      "polling (<1,>=0.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package that facilitates standard rest API flows.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12622597,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a36a1a36e11510fc7935191c5f921667a9614d9ae6a139ea64541164f507caaf",
          "md5": "a71549580aa760e8eb85a7f1afcf11d1",
          "sha256": "22c87192f3163252472b4004a24911d65ea1597c145b7e81a9b03cdff0e05416"
        },
        "downloads": -1,
        "filename": "basic_rest_endpoint-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a71549580aa760e8eb85a7f1afcf11d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7263,
        "upload_time": "2022-01-06T20:37:59",
        "upload_time_iso_8601": "2022-01-06T20:37:59.824004Z",
        "url": "https://files.pythonhosted.org/packages/a3/6a/1a36e11510fc7935191c5f921667a9614d9ae6a139ea64541164f507caaf/basic_rest_endpoint-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "443881e871e10a10ff98ab6345397a0291f4e3396203442e1fb5741d16b7fe13",
          "md5": "da67238a11a34ce6fa06d72d521b9dca",
          "sha256": "5c148f54ded7a173044ad1f4ced576b28037c3b9f471cc30faab18df95c277d8"
        },
        "downloads": -1,
        "filename": "basic-rest-endpoint-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da67238a11a34ce6fa06d72d521b9dca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6781,
        "upload_time": "2022-01-06T20:38:01",
        "upload_time_iso_8601": "2022-01-06T20:38:01.170165Z",
        "url": "https://files.pythonhosted.org/packages/44/38/81e871e10a10ff98ab6345397a0291f4e3396203442e1fb5741d16b7fe13/basic-rest-endpoint-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e1bd6c05261ce16eec205e82a883100ba943c724ffef1e7084934b57ad234d5",
          "md5": "dc1a85fbfcdd2330eba64e9815b0ff36",
          "sha256": "1c9e89ed6ffa551377937c8d98b5bd663230e8ecb6d26c7abbd7f7e5d4c02ec2"
        },
        "downloads": -1,
        "filename": "basic_rest_endpoint-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc1a85fbfcdd2330eba64e9815b0ff36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7738,
        "upload_time": "2022-01-06T21:16:59",
        "upload_time_iso_8601": "2022-01-06T21:16:59.222704Z",
        "url": "https://files.pythonhosted.org/packages/8e/1b/d6c05261ce16eec205e82a883100ba943c724ffef1e7084934b57ad234d5/basic_rest_endpoint-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "febc3c667a4b6097157704aa004cb3658562a2e5234360adf11aa39917a1e792",
          "md5": "52c479b2fd4bb3af8eaccefe174b4818",
          "sha256": "3007b5a5bb88ca41637d15fb896172f19970ab47c86ba3883bbf66cf73937e95"
        },
        "downloads": -1,
        "filename": "basic-rest-endpoint-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "52c479b2fd4bb3af8eaccefe174b4818",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7287,
        "upload_time": "2022-01-06T21:17:00",
        "upload_time_iso_8601": "2022-01-06T21:17:00.991991Z",
        "url": "https://files.pythonhosted.org/packages/fe/bc/3c667a4b6097157704aa004cb3658562a2e5234360adf11aa39917a1e792/basic-rest-endpoint-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8905b852e12040ccfc297cd88a651b3ead28b2fc5c6adb38bf2d4e641e28e11a",
          "md5": "f69cb02ecaaabb920e7f738ed9aa3b0b",
          "sha256": "4829d74e5633da744e58f1ae07f90a196893a046adc756ab0155d37d80238a4b"
        },
        "downloads": -1,
        "filename": "basic_rest_endpoint-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f69cb02ecaaabb920e7f738ed9aa3b0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10385,
        "upload_time": "2022-01-19T19:47:11",
        "upload_time_iso_8601": "2022-01-19T19:47:11.094955Z",
        "url": "https://files.pythonhosted.org/packages/89/05/b852e12040ccfc297cd88a651b3ead28b2fc5c6adb38bf2d4e641e28e11a/basic_rest_endpoint-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d761088ccc3691c83dd71671ef85dad6dcea2ce423829bb2ba46d731866cdce",
          "md5": "d41d96be8efb4d8d721edb1ce10de645",
          "sha256": "2cb91959ca3684355906e214b6d88b870cbcdce2904258bee801ec85758725b7"
        },
        "downloads": -1,
        "filename": "basic-rest-endpoint-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d41d96be8efb4d8d721edb1ce10de645",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9823,
        "upload_time": "2022-01-19T19:47:12",
        "upload_time_iso_8601": "2022-01-19T19:47:12.965649Z",
        "url": "https://files.pythonhosted.org/packages/3d/76/1088ccc3691c83dd71671ef85dad6dcea2ce423829bb2ba46d731866cdce/basic-rest-endpoint-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8905b852e12040ccfc297cd88a651b3ead28b2fc5c6adb38bf2d4e641e28e11a",
        "md5": "f69cb02ecaaabb920e7f738ed9aa3b0b",
        "sha256": "4829d74e5633da744e58f1ae07f90a196893a046adc756ab0155d37d80238a4b"
      },
      "downloads": -1,
      "filename": "basic_rest_endpoint-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f69cb02ecaaabb920e7f738ed9aa3b0b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10385,
      "upload_time": "2022-01-19T19:47:11",
      "upload_time_iso_8601": "2022-01-19T19:47:11.094955Z",
      "url": "https://files.pythonhosted.org/packages/89/05/b852e12040ccfc297cd88a651b3ead28b2fc5c6adb38bf2d4e641e28e11a/basic_rest_endpoint-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d761088ccc3691c83dd71671ef85dad6dcea2ce423829bb2ba46d731866cdce",
        "md5": "d41d96be8efb4d8d721edb1ce10de645",
        "sha256": "2cb91959ca3684355906e214b6d88b870cbcdce2904258bee801ec85758725b7"
      },
      "downloads": -1,
      "filename": "basic-rest-endpoint-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d41d96be8efb4d8d721edb1ce10de645",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9823,
      "upload_time": "2022-01-19T19:47:12",
      "upload_time_iso_8601": "2022-01-19T19:47:12.965649Z",
      "url": "https://files.pythonhosted.org/packages/3d/76/1088ccc3691c83dd71671ef85dad6dcea2ce423829bb2ba46d731866cdce/basic-rest-endpoint-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}