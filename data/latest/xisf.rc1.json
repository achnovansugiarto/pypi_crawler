{
  "info": {
    "author": "",
    "author_email": "Sergio Díaz <sergio.diaz.ruiz@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "description": "<a id=\"xisf\"></a>\n\n# xisf\n\n(Incomplete) XISF Encoder/Decoder (see https://pixinsight.com/xisf/).\n\nThis implementation is not endorsed nor related with PixInsight development team.\n\nCopyright (C) 2021-2022 Sergio Díaz, sergiodiaz.eu\n\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, version 3 of the License.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\nmore details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program.  If not, see <http://www.gnu.org/licenses/>.\n\n<a id=\"xisf.XISF\"></a>\n\n## XISF Objects\n\n```python\nclass XISF()\n```\n\nImplements an *incomplete* (attached images only) baseline XISF Decoder and a simple baseline Encoder.\nIt parses metadata from Image and Metadata XISF core elements. Image data is returned as a numpy ndarray \n(using the \"channels-last\" convention by default). \n\nWhat's supported: \n- Monolithic XISF files only\n    - XISF blocks with attachment block locations (neither inline nor embedded block locations as required \n      for a complete baseline decoder)\n    - Planar pixel storage models, *however it assumes 2D images only* (with multiple channels)\n    - UInt8/16/32 and Float32/64 pixel sample formats\n    - Grayscale and RGB color spaces     \n- Decoding:\n    - multiple Image core elements from a monolithic XISF file\n    - Support all standard compression codecs defined in this specification for decompression (zlib/lz4[hc]+\n      byte shuffling)\n- Encoding:\n    - Single image core element\n    - Uncompressed data blocks only       \n- \"Atomic\" properties only (Scalar, Strings, TimePoint)\n- Metadata and FITSKeyword core elements\n\nWhat's not supported (at least by now):\n- Read pixel data from XISF blocks with inline or embedded block locations\n- Read pixel data in the normal pixel storage models\n- Read pixel data in the planar pixel storage models other than 2D images\n- Complex, Vector, Matrix and Table properties\n- Any other not explicitly supported core elements (Resolution, Thumbnail, ICCProfile, etc.)\n\nUsage example:\n```\nfrom xisf import XISF\nimport matplotlib.pyplot as plt\nxisf = XISF(\"file.xisf\")\nfile_meta = xisf.get_file_metadata()    \nfile_meta\nims_meta = xisf.get_images_metadata()\nims_meta\nim_data = xisf.read_image(0)\nplt.imshow(im_data)\nplt.show()\nXISF.write(\n    \"output.xisf\", im_data, \n    creator_app=\"My script v1.0\", image_metadata=ims_meta[0], xisf_metadata=file_meta, \n    codec='lz4hc', shuffle=True\n)\n```\n\nIf the file is not huge and it contains only an image (or you're interested just in one of the \nimages inside the file), there is a convenience method for reading the data and the metadata:\n```\nfrom xisf import XISF\nimport matplotlib.pyplot as plt    \nim_data = XISF.read(\"file.xisf\")\nplt.imshow(im_data)\nplt.show()\n```\n\nThe XISF format specification is available at https://pixinsight.com/doc/docs/XISF-1.0-spec/XISF-1.0-spec.html\n\n<a id=\"xisf.XISF.__init__\"></a>\n\n#### \\_\\_init\\_\\_\n\n```python\ndef __init__(fname)\n```\n\nOpens a XISF file and extract its metadata. To get the metadata and the images, see get_file_metadata(),\nget_images_metadata() and read_image().\n\n**Arguments**:\n\n- `fname` - filename\n  \n\n**Returns**:\n\n  XISF object.\n\n<a id=\"xisf.XISF.get_images_metadata\"></a>\n\n#### get\\_images\\_metadata\n\n```python\ndef get_images_metadata()\n```\n\nProvides the metadata of all image blocks contained in the XISF File, extracted from\nthe header (<Image> core elements). To get the actual image data, see read_image().\n\nIt outputs a dictionary m_i for each image, with the following structure:\n\n```\nm_i = { \n    'geometry': (width, height, channels), # only 2D images (with multiple channels) are supported\n    'location': (pos, size), # used internally in read_image()\n    'dtype': np.dtype('...'), # derived from sampleFormat argument\n    'compression': (codec, uncompressed_size, item_size), # optional\n    'key': 'value', # other <Image> attributes are simply copied \n    ..., \n    'FITSKeywords': { <fits_keyword>: fits_keyword_values_list, ... }, \n    'XISFProperties': { <xisf_property_name>: property_dict, ... }\n}\n\nwhere:\n\nfits_keyword_values_list = [ {'value': <value>, 'comment': <comment> }, ...]\nproperty_dict = {'id': <xisf_property_name>, 'type': <xisf_type>, 'value': property_value, ...}\n```\n\n**Returns**:\n\n  list [ m_0, m_1, ..., m_{n-1} ] where m_i is a dict as described above.\n\n<a id=\"xisf.XISF.get_file_metadata\"></a>\n\n#### get\\_file\\_metadata\n\n```python\ndef get_file_metadata()\n```\n\nProvides the metadata from the header of the XISF File (<Metadata> core elements).\n\n**Returns**:\n\n  dictionary with one entry per property: { <xisf_property_name>: property_dict, ... }\n  where:\n  ```\n  property_dict = {'id': <xisf_property_name>, 'type': <xisf_type>, 'value': property_value, ...}\n  ```\n\n<a id=\"xisf.XISF.get_metadata_xml\"></a>\n\n#### get\\_metadata\\_xml\n\n```python\ndef get_metadata_xml()\n```\n\nReturns the complete XML header as a xml.etree.ElementTree.Element object.\n\n**Returns**:\n\n- `xml.etree.ElementTree.Element` - complete XML XISF header\n\n<a id=\"xisf.XISF.read_image\"></a>\n\n#### read\\_image\n\n```python\ndef read_image(n=0, data_format='channels_last')\n```\n\nExtracts an image from a XISF object.\n\n**Arguments**:\n\n- `n` - index of the image to extract in the list returned by get_images_metadata()\n- `data_format` - channels axis can be 'channels_first' or 'channels_last' (as used in\n  keras/tensorflow, pyplot's imshow, etc.), 0 by default.\n  \n\n**Returns**:\n\n  Numpy ndarray with the image data, in the requested format (channels_first or channels_last).\n\n<a id=\"xisf.XISF.read\"></a>\n\n#### read\n\n```python\n@staticmethod\ndef read(fname, n=0, image_metadata={}, xisf_metadata={})\n```\n\nConvenience method for reading a file containing a single image.\n\n**Arguments**:\n\n- `fname` _string_ - filename\n- `n` _int, optional_ - index of the image to extract (in the list returned by get_images_metadata()). Defaults to 0.\n- `image_metadata` _dict, optional_ - dictionary that will be updated with the metadata of the image.\n- `xisf_metadata` _dict, optional_ - dictionary that will be updated with the metadata of the file.\n  \n\n**Returns**:\n\n- `[np.ndarray]` - Numpy ndarray with the image data, in the requested format (channels_first or channels_last).\n\n<a id=\"xisf.XISF.write\"></a>\n\n#### write\n\n```python\n@staticmethod\ndef write(fname, im_data, creator_app=None, image_metadata={}, xisf_metadata={}, codec=None, shuffle=False, level=None)\n```\n\nWrites an image (numpy array) to a XISF file. Compression may be requested but it only\nwill be used if it actually reduces the data size.\n\n**Arguments**:\n\n- `fname` - filename (will overwrite if existing)\n- `im_data` - numpy ndarray with the image data\n- `creator_app` - string for XISF:CreatorApplication file property (defaults to python version in None provided)\n- `image_metadata` - dict with the same structure described for m_i in get_images_metadata().\n  Only 'FITSKeywords' and 'XISFProperties' keys are actually written, the rest are derived from im_data.\n- `xisf_metadata` - file metadata, dict with the same structure returned by get_file_metadata()\n- `codec` - compression codec ('zlib', 'lz4' or 'lz4hc'), or None to disable compression\n- `shuffle` - whether to apply byte-shuffling before compression (ignored if codec is None). Recommended\n  for 'lz4' and 'lz4hc' compression algorithms.\n- `level` - for zlib, 1..9 (default: 6); for lz4hc, 1..12 (default: 9). Higher means more compression.\n\n**Returns**:\n\n- `bytes_written` - the total number of bytes written into the output file.\n- `codec` - The codec actually used, i.e., None if compression did not reduce the data block size so\n  compression was not finally used.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "astronomy,XISF",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xisf",
    "package_url": "https://pypi.org/project/xisf/",
    "platform": null,
    "project_url": "https://pypi.org/project/xisf/",
    "project_urls": {
      "Homepage": "https://github.com/sergio-dr/xisf"
    },
    "release_url": "https://pypi.org/project/xisf/0.9.0/",
    "requires_dist": [
      "lz4",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Encoder/Decoder for XISF (Extensible Image Serialization Format)",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14306094,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95e700e80c7a358f4d484b7a8fce342a751fdf86f6de9b5641a7aa0a151fe180",
          "md5": "90b8fdc3d224dc6c1cbf69feb85c09e5",
          "sha256": "79df03dc7c7ce236c9008a829db9dfb440fcb9c8f3bf25061c2bba6cd99257a3"
        },
        "downloads": -1,
        "filename": "xisf-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90b8fdc3d224dc6c1cbf69feb85c09e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24143,
        "upload_time": "2022-07-01T09:25:02",
        "upload_time_iso_8601": "2022-07-01T09:25:02.922663Z",
        "url": "https://files.pythonhosted.org/packages/95/e7/00e80c7a358f4d484b7a8fce342a751fdf86f6de9b5641a7aa0a151fe180/xisf-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0178a91384a92afc74d479a18bf369319fe4d4cfced0103cb616d14d0b1aea7c",
          "md5": "0c1be82a9461925d8d18a37ba1296c68",
          "sha256": "a2a8a2b1e6ec10c4ade3e7661a566723c4a516f6c07bf0077baa78147130e31e"
        },
        "downloads": -1,
        "filename": "xisf-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c1be82a9461925d8d18a37ba1296c68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23115,
        "upload_time": "2022-07-01T09:25:04",
        "upload_time_iso_8601": "2022-07-01T09:25:04.716879Z",
        "url": "https://files.pythonhosted.org/packages/01/78/a91384a92afc74d479a18bf369319fe4d4cfced0103cb616d14d0b1aea7c/xisf-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95e700e80c7a358f4d484b7a8fce342a751fdf86f6de9b5641a7aa0a151fe180",
        "md5": "90b8fdc3d224dc6c1cbf69feb85c09e5",
        "sha256": "79df03dc7c7ce236c9008a829db9dfb440fcb9c8f3bf25061c2bba6cd99257a3"
      },
      "downloads": -1,
      "filename": "xisf-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "90b8fdc3d224dc6c1cbf69feb85c09e5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24143,
      "upload_time": "2022-07-01T09:25:02",
      "upload_time_iso_8601": "2022-07-01T09:25:02.922663Z",
      "url": "https://files.pythonhosted.org/packages/95/e7/00e80c7a358f4d484b7a8fce342a751fdf86f6de9b5641a7aa0a151fe180/xisf-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0178a91384a92afc74d479a18bf369319fe4d4cfced0103cb616d14d0b1aea7c",
        "md5": "0c1be82a9461925d8d18a37ba1296c68",
        "sha256": "a2a8a2b1e6ec10c4ade3e7661a566723c4a516f6c07bf0077baa78147130e31e"
      },
      "downloads": -1,
      "filename": "xisf-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0c1be82a9461925d8d18a37ba1296c68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23115,
      "upload_time": "2022-07-01T09:25:04",
      "upload_time_iso_8601": "2022-07-01T09:25:04.716879Z",
      "url": "https://files.pythonhosted.org/packages/01/78/a91384a92afc74d479a18bf369319fe4d4cfced0103cb616d14d0b1aea7c/xisf-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}