{
  "info": {
    "author": "Greg Henning",
    "author_email": "ghenning@iphc.cnrs.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: CEA CNRS Inria Logiciel Libre License, version 2.1 (CeCILL-2.1)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**A library to read Faster files with python**\n\n\nThe faster acquisiton system comes with it's own C++ code for data unpacking and analysis: `fasterac`\n\nHowever, if you use a Windows system, work on different systems, ... writing, compiling and deploying an analysis code can be tedious.\n\nWith Python, you can focus on writing the analysis code, without worrying about the dependencies, system paths, compilation, ...\n\nThat's why this `faster` python module was developped.\n\nThe project can be live tested on [Binder](https://mybinder.org/): [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/git/https%3A%2F%2Fgitlab.in2p3.fr%2Fgregoire.henning%2Ffaster-example-notebook/bb2c4cd04cf46352e7de83f88c11d91832f4cd60?filepath=example_notebook.ipynb)\n\n\n## Getting Started\n\nThe following instructions will get you a copy of the project up and running on your local machine.\n\n### Installing\n\nThe module comes with no external dependency, and can easily be installed with the `distul=tils` tools of Python (pip  packaging will come soon).\n\nGet the [`faster-202003.tar.gz`](dist/faster-202003.tar.gz) file. Then `cd` to the directory where the file was download and execute the following commands: \n\n```shell\ntar xvvzf faster-202003.tar.gz \ncd faster-202003\npython3 setup.py install\ncd ..\npython3.7 -m faster test\n```\n\nThis will unpack, build, install and test the `faster` module.\n\n## Running the tests\n\nThe package comes with built-in test. To run the test, just run the following command in the directory containning the module.\n```bash\n$ python3 -m faster test\n```\n\nThe output should be looking like\n\n```\n# Starting test ...\n# Module's path is '/the/path/to/faster/'\n# Elasped time: 0.601 seconds\n# Read 60211 of 60211 events from the test file\n#...done\n```\n\nYou can test the library online with Binder: \n\n\n## Dependencies\n\nThe module is built with no dependencies apart from the python standard library.\n\n# Usage\n\n## Module level commands\n\nThe module provide some direct commands that can be called using \n\n```bash\n$ python3 -m faster command\n```\n\nUse `python3.7 -m faster -h` for a short inline documentation.\n\n### test\n\nAs mentionned above, calling `python3 -m faster test` will perform a simple test: open a small file and iterate over it until the end. \n\n### more\n\nCalling \n\n```bash\n$ python3 -m faster more path/to/faster/file.fast\n```\n\nwill display the content of the file by group of 10 events until you type 'q' at the prompt after each 10 event groups, or the end of the file, or you send a KeyboardInterrupt signal (i.e. Ctrl-C).\n\n### stats\n\nCalling \n\n```bash\n$ python3 -m faster stats [--nmax=N] path/to/faster/file.fast\n```\n\nwill read the files until the end or N events from the file and display statitics about the types and labels of events that were red. \nThe outuput format is python like with a tuple containing dictionnaries..\n\n## File Reader\n\nThe `FileReader` class defines an iterator object that can be used to obtain the vents one by one.\n\nThe simplest way to create a FileReader object is `FileReader('./path/to/file.fast')`.\nA second agrgument can be added to define the maximum number of events to read. By default, the reader will read 180000000 events, which is equivalent to 2GB of 12 bytes events and should cover all the data file cases.\n\nThe best way to explore the file is to use a `for` loop:\n\n```python\nfor fastervent in FileReader('./path/to/file.fast'):\n\t# actions on `fasterevent` here\n```\n\nWhere `fasterevent` will be an [`Event`](#event) object.\n\n### Using `with`\n\n`FileReader` supports the python context manager:\n\n```python\nwith FileReader('./path/to/file.fast') as ffreader:\n\tfor evt in ffreader:\n\t\t# event processing loop\n```\n\n### `next`\n\nSince `FileReader` objects are iterators, the user can pull the events manually one by one by using the builtin `next` command:\n\n```python\nnext_event = next(ffreader)\n```\n\n## Event\n\nThe `Event` class defines the event data.\n\nAn `Event` object is normally instantiated by the FileReader. Its attributes are \n\n - `type_alias`: a number indicating the type alias\n - `clock`: an array of integer containning the clock information (timestamp)\n - `label`: an integer containing the event label\n - `load_size`: the size in bytes of the raw data\n - `raw data`: the raw (i.e. `byte`) data\n\n3 more attributes are accessibles and interpreted \"just-in-time\" for better perfomance:\n - `type`: a string representing the even type, the correspondance with a type_alias is defined within the dataunpacker file\n - `time`: the computed timestamp (without the tick interval multiplier)\n - `data`: a `dict` containning the unpacked data (by the unpackers). \n\n\n### *Just in Time* attributes\n\nSome attributes of the Event object are intrepreted \"*Just-in-Time*\" as needed. This is intended to save time and ressources as not all events, labels or types will need to be fully inspected in data analaysis. Thanks to specific inner mechanics of `python` objects, the JIT attributes are computed once and are not re-interpreted when called multiple times for the same event.\n\nThe JIT attributes are :\n - `type`: a string description of the event type. For example, an event with `type_alias==10` will have `type==\"group\"`. \n - `time`: the computed timestamp. \n - `data`: a dictionnary containning the interpreted data. See [data unpackers](#data-unpackers) documentation for the different types.\n\n### Data unpackers\n\nThe data unpackers are the submodules doing the data unpacking work. \n\nTo make the python faster package easy to extend, creating a new unpacker is simple. \n\nTo create a new unpacker, just create a file `type_XX.py` in the dataunpackers folder where X is the type_alias of the type of data the upacker will deal with.\n\nIn this file, you have to define\n - `alias`: the number corresponding to the type (i.e. XX)\n - `type_`: a string (prefereably no space) describing the type\n - a function `unpack(data)` that takes the rawdata as argument and returns a dictionnary with the interpreted data.\n\nIf you write an unpacker for a type not yet supported by the package, you are invited to submit it to the project so that it gets integrated with the module.\n\n## Speed\n\nSee [performances.md](performances.md) for a discussion about speed and memory.\n\n## Authors\n\n* **Greg Henning** - ghenning&#8203;*.at.*&#8203;iphc&#x2024;cnrs&#x2024;fr\n\n\n## License\n\nThis project is licensed under the CeCILL FREE SOFTWARE LICENSE AGREEMENT. \n\nSee [LICENSE](LICENSE) for more.\n\n## Acknowledgments\n\n* Thanks to D. Etasse (LPC Caen / CNRS) for support while coding the unpackers.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.in2p3.fr/gregoire.henning/faster",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "faster-filereader",
    "package_url": "https://pypi.org/project/faster-filereader/",
    "platform": "",
    "project_url": "https://pypi.org/project/faster-filereader/",
    "project_urls": {
      "Homepage": "https://gitlab.in2p3.fr/gregoire.henning/faster"
    },
    "release_url": "https://pypi.org/project/faster-filereader/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python faster system file reader",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9488538,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "020e2e2affabb664757f107b37328d98969ab392b6eb6129cd7bccbe19270a16",
          "md5": "62285295fabb41b09d7a4f2349793dd1",
          "sha256": "a51898cb4f4cbd5ceea5ec0b022cee08c68c33712a3900c6463f8dd701129fc8"
        },
        "downloads": -1,
        "filename": "faster_filereader-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62285295fabb41b09d7a4f2349793dd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 594896,
        "upload_time": "2021-02-22T13:33:02",
        "upload_time_iso_8601": "2021-02-22T13:33:02.149483Z",
        "url": "https://files.pythonhosted.org/packages/02/0e/2e2affabb664757f107b37328d98969ab392b6eb6129cd7bccbe19270a16/faster_filereader-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff495881fd5259fdd0c1fc467de374a404c427cc871a75596f560e1fb9e93c97",
          "md5": "47ac81c02ab89ec04bf220ccf71aed24",
          "sha256": "2b29eabbbf0fc0b343f02f28b5a7145b57836b2ffa758e412ce3f94e5bb6a706"
        },
        "downloads": -1,
        "filename": "faster-filereader-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47ac81c02ab89ec04bf220ccf71aed24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 570524,
        "upload_time": "2021-02-22T13:33:04",
        "upload_time_iso_8601": "2021-02-22T13:33:04.058620Z",
        "url": "https://files.pythonhosted.org/packages/ff/49/5881fd5259fdd0c1fc467de374a404c427cc871a75596f560e1fb9e93c97/faster-filereader-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "020e2e2affabb664757f107b37328d98969ab392b6eb6129cd7bccbe19270a16",
        "md5": "62285295fabb41b09d7a4f2349793dd1",
        "sha256": "a51898cb4f4cbd5ceea5ec0b022cee08c68c33712a3900c6463f8dd701129fc8"
      },
      "downloads": -1,
      "filename": "faster_filereader-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62285295fabb41b09d7a4f2349793dd1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 594896,
      "upload_time": "2021-02-22T13:33:02",
      "upload_time_iso_8601": "2021-02-22T13:33:02.149483Z",
      "url": "https://files.pythonhosted.org/packages/02/0e/2e2affabb664757f107b37328d98969ab392b6eb6129cd7bccbe19270a16/faster_filereader-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff495881fd5259fdd0c1fc467de374a404c427cc871a75596f560e1fb9e93c97",
        "md5": "47ac81c02ab89ec04bf220ccf71aed24",
        "sha256": "2b29eabbbf0fc0b343f02f28b5a7145b57836b2ffa758e412ce3f94e5bb6a706"
      },
      "downloads": -1,
      "filename": "faster-filereader-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47ac81c02ab89ec04bf220ccf71aed24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 570524,
      "upload_time": "2021-02-22T13:33:04",
      "upload_time_iso_8601": "2021-02-22T13:33:04.058620Z",
      "url": "https://files.pythonhosted.org/packages/ff/49/5881fd5259fdd0c1fc467de374a404c427cc871a75596f560e1fb9e93c97/faster-filereader-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}