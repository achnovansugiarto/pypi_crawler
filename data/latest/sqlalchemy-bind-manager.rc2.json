{
  "info": {
    "author": "Federico Busetti",
    "author_email": "729029+febus982@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Framework :: Pydantic",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# SQLAlchemy bind manager\n[![Stable Version](https://img.shields.io/pypi/v/sqlalchemy-bind-manager?color=blue)](https://pypi.org/project/sqlalchemy-bind-manager/)\n[![stability-beta](https://img.shields.io/badge/stability-beta-33bbff.svg)](https://github.com/mkenney/software-guides/blob/master/STABILITY-BADGES.md#beta)\n\n[![Python 3.8](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.8.yml/badge.svg?event=push)](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.8.yml)\n[![Python 3.9](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.9.yml/badge.svg?event=push)](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.9.yml)\n[![Python 3.10](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.10.yml/badge.svg?event=push)](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.10.yml)\n[![Python 3.11](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.11.yml/badge.svg?event=push)](https://github.com/febus982/sqlalchemy-bind-manager/actions/workflows/python-3.11.yml)\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/0140f7f4e559ae806887/maintainability)](https://codeclimate.com/github/febus982/sqlalchemy-bind-manager/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/0140f7f4e559ae806887/test_coverage)](https://codeclimate.com/github/febus982/sqlalchemy-bind-manager/test_coverage)\n[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThis package provides an easy way to configure and use SQLAlchemy engines and sessions\nwithout depending on frameworks.\n\nIt is composed by two main components:\n\n* A manager class for SQLAlchemy engine configuration\n* A repository/unit-of-work pattern implementation for model retrieval and persistence\n\n## Installation\n\n```bash\npip install sqlalchemy-bind-manager\n```\n\n## Components maturity\n\n[//]: # (https://github.com/mkenney/software-guides/blob/master/STABILITY-BADGES.md)\n* [![stability-beta](https://img.shields.io/badge/stability-beta-33bbff.svg)](https://github.com/mkenney/software-guides/blob/master/STABILITY-BADGES.md#beta) **SQLAlchemy manager:** Implementation is mostly finalised, needs testing in production.\n* [![stability-beta](https://img.shields.io/badge/stability-beta-33bbff.svg)](https://github.com/mkenney/software-guides/blob/master/STABILITY-BADGES.md#beta) **Repository / Unit of work:** Implementation is mostly finalised, needs testing in production.\n\n\n## SQLAlchemy manager \n\nInitialise the manager providing an instance of `SQLAlchemyConfig`\n\n```python\nfrom sqlalchemy_bind_manager import SQLAlchemyConfig, SQLAlchemyBindManager\n\nconfig = SQLAlchemyConfig(\n    engine_url=\"sqlite:///./sqlite.db\",\n    engine_options=dict(connect_args={\"check_same_thread\": False}, echo=True),\n    session_options=dict(expire_on_commit=False),\n)\n\nsa_manager = SQLAlchemyBindManager(config)\n```\n\nðŸš¨ NOTE: Using global variables is not thread-safe, please read the [Threading](#threading) section if your application uses multi-threading.\n\n`engine_url` and `engine_options` dictionary accept the same parameters as SQLAlchemy [create_engine()](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine)\n\n`session_options` dictionary accepts the same parameters as SQLALchemy [sessionmaker()](https://docs.sqlalchemy.org/en/14/orm/session_api.html#sqlalchemy.orm.sessionmaker)\n\nOnce the bind manager is initialised we can retrieve and use the SQLAlchemyBind using the method `get_bind()`\n\nThe `SQLAlchemyBind` class has the following attributes:\n\n* `bind_async`: A boolean property, `True` when the bind uses an async dialect (Note: async is not yet fully supported, see the section about asynchronous binds)\n* `engine`: The initialised SQLALchemy `Engine`\n* `model_declarative_base`: A base class that can be used to create [declarative models](https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#declarative-mapping)\n* `registry_mapper`: The `registry` associated with the `engine`. It can be used with Alembic or to achieve [imperative mapping](https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#imperative-mapping)\n* `session_class`: The class built by [sessionmaker()](https://docs.sqlalchemy.org/en/14/orm/session_api.html#sqlalchemy.orm.sessionmaker), either `Session` or `AsyncSession`\n\nThe `SQLAlchemyBindManager` provides some helper methods to quickly access some of the bind properties without using the `SQLAlchemyBind`:\n\n* `get_session`: returns a Session object\n* `get_mapper`: returns the mapper associated with the bind\n\nExample:\n\n```python\nbind = sa_manager.get_bind()\n\n\nclass DeclarativeModel(bind.model_declarative_base):\n    pass\n\n\nclass ImperativeModel:\n    id: int\n\n\nimperative_table = Table(\n    \"imperative\",\n    bind.registry_mapper.metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", String, primary_key=True),\n)\n\nbind.registry_mapper.map_imperatively(ImperativeModel, imperative_table)\n\n# or using the get_mapper() helper method\nsa_manager.get_mapper().map_imperatively(ImperativeModel, imperative_table)\n\n# Persist an object\no = ImperativeModel()  # also o = DeclarativeModel()\no.name = \"John\"\nwith sa_manager.get_bind().session_class()() as session:\n    session.add(o)\n    session.commit()\n\n# or using the get_session() helper method for better readability\nwith sa_manager.get_session() as session:\n    session.add(o)\n    session.commit()\n\n```\n\n### Multiple database binds\n\n`SQLAlchemyBindManager` accepts also multiple databases configuration, provided as a dictionary. The dictionary keys are used as a reference name for each bind.\n\n```python\nfrom sqlalchemy_bind_manager import SQLAlchemyConfig, SQLAlchemyBindManager\n\nconfig = {\n    \"default\": SQLAlchemyConfig(\n        engine_url=\"sqlite:///./sqlite.db\",\n        engine_options=dict(connect_args={\"check_same_thread\": False}, echo=True),\n        session_options=dict(expire_on_commit=False),\n    ),\n    \"secondary\": SQLAlchemyConfig(\n        engine_url=\"sqlite:///./secondary.db\",\n        engine_options=dict(connect_args={\"check_same_thread\": False}, echo=True),\n        session_options=dict(expire_on_commit=False),\n    ),\n}\n\nsa_manager = SQLAlchemyBindManager(config)\n```\n\nAll the `SQLAlchemyBindManager` helper methods accept the `bind_name` optional parameter:\n\n* `get_session(bind_name=\"default\")`: returns a `Session` or `AsyncSession` object\n* `get_mapper(bind_name=\"default\")`: returns the mapper associated with the bind\n\n### Threading\n\nGlobal variables in python are shared among threads. Neither `SQLAlchemyBindManager` class\nor the repositories implementation are thread safe on their own.\n\nIf your application uses multi-threads, the same `SQLAlchemyBindManager` object will be\nshared between different threads, together with the internal `Session` object,\nand changes on models could propagate among them, causing undesired operations.\n\nMake sure you check Python [Threading](https://docs.python.org/3/library/threading.html)\ndocumentation, especially the [Thread-local Data](https://docs.python.org/3/library/threading.html#thread-local-data)\nchapter to avoid issues.\n\n### Asynchronous database binds\n\nIs it possible to supply configurations for asyncio supported engines.\n\n```python\nconfig = SQLAlchemyAsyncConfig(\n    engine_url=\"postgresql+asyncpg://scott:tiger@localhost/test\",\n)\n```\n\nThis will make sure we have an `AsyncEngine` and an `AsyncSession` are initialised.\n\n```python\nasync with sa_manager.get_session() as session:\n    session.add(o)\n    session.commit()\n```\n\nNote that async implementation has several differences from the sync one, make sure\nto check [SQLAlchemy asyncio documentation](https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html)\n\n## Repository / Unit of work\n\nThe `SQLAlchemyRepository` and `SQLAlchemyAsyncRepository` class can be used simply by extending them.\n\n```python\nfrom sqlalchemy_bind_manager import SQLAlchemyRepository\n\n\nclass MyModel(model_declarative_base):\n    pass\n\n\nclass ModelRepository(SQLAlchemyRepository[MyModel]):\n    _model = MyModel\n\n\nrepo_instance = ModelRepository(sqlalchemy_bind_manager.get_bind())\n```\n\nThe classes provide some common use methods:\n\n* `get`: Retrieve a model by identifier\n* `save`: Persist a model\n* `save_many`: Persist multiple models in a single transaction\n* `delete`: Delete a model\n* `find`: Search for a list of models (basically an adapter for SELECT queries)\n\n### Session lifecycle in repositories\n\n[SQLAlchemy documentation](https://docs.sqlalchemy.org/en/20/orm/session_basics.html#when-do-i-construct-a-session-when-do-i-commit-it-and-when-do-i-close-it)\nrecommends we create `Session` object at the beginning of a logical operation where\ndatabase access is potentially anticipated.\n\nDoing this too soon might cause unexpected effects, like unexpected updates being committed,\nif the initialised session is shared among different repositories.\n\nA `Repository` represents a generic interface to persist data object to a storage, not necessarily\nusing SQLAlchemy. It makes sense that the lifecycle of a `Session` follows the one of the Repository\n(If we create a Repository, we're going to do a DB operation, otherwise we don't need a `Session`)\n\nThis ensures the `Session` we use is isolated, and the same for all the operations we do with the\nsame repository.\n\nThe session is automatically closed and reopen with each Repository operation, this make sure these\noperation are independent from each other.\n\nThese choices cause some consequences:\n* The operations that modify the database will reload the models from the DB, causing an additional\n  SELECT query to be issued.\n* We can't use SQLAlchemy lazy loading, so we'll need to make sure relationship are always loaded eagerly,\n  using either:\n  * Setup your model/table relationships to always use always eager loading\n  * Implement ad-hoc methods to deal with relationships as necessary\n\nAlso `AsyncSession` has [the same limitation on lazy loading](https://docs.sqlalchemy.org/en/20/orm/extensions/asyncio.html#asyncio-orm-avoid-lazyloads)\nso it makes sense that the two repository implementations behave consistently.\n\n### Use the Unit Of Work to share a session among multiple repositories\n\nIt is possible we need to run several operations in a single database get_session. While a single\nrepository provide by itself an isolated session for single operations, we have to use a different\napproach for multiple operations.\n\nWe can use the `UnitOfWork` or the `AsyncUnitOfWork` class to provide a shared session to\nbe used for repository operations, **assumed the same bind is used for all the repositories**.\n(Two phase transactions are not currently supported).\n\n```python\nclass MyRepo(SQLAlchemyRepository):\n    _model = MyModel\nclass MyOtherRepo(SQLAlchemyRepository):\n    _model = MyOtherModel\n\nbind = sa_manager.get_bind()\nuow = UnitOfWork(bind, (MyRepo, MyOtherRepo))\n\nwith uow.transaction():\n    uow.MyRepo.save(some_model)\n    uow.MyOtherRepo.save(some_other_model)\n\n# Optionally disable the commit/rollback handling\nwith uow.transaction(read_only=True):\n    model1 = uow.MyRepo.get(1)\n    model2 = uow.MyOtherRepo.get(2)\n```\n\nBoth the UnitOfWork classes create an internal `scoped_session` or `async_scoped_session`, behaving\nin the same way at the repositories do. This provides the freedom to tune the session lifecycle based\non our application requirements (e.g. one unit of work per http request, per domain, etc.)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/febus982/sqlalchemy-bind-manager",
    "keywords": "sqlalchemy,config,manager",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-bind-manager",
    "package_url": "https://pypi.org/project/sqlalchemy-bind-manager/",
    "platform": null,
    "project_url": "https://pypi.org/project/sqlalchemy-bind-manager/",
    "project_urls": {
      "Homepage": "https://github.com/febus982/sqlalchemy-bind-manager",
      "Repository": "https://github.com/febus982/sqlalchemy-bind-manager"
    },
    "release_url": "https://pypi.org/project/sqlalchemy-bind-manager/0.1.0/",
    "requires_dist": [
      "pydantic (>=1.10.2,<1.11.0)",
      "SQLAlchemy[asyncio,mypy] (>=2.0.0,<2.1.0)"
    ],
    "requires_python": ">=3.8,<3.12",
    "summary": "A manager to easily handle multiple SQLAlchemy configurations",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17018161,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af328631c5312e096b4bf917a47495774d4d04820df63e1044b14ca1ac51a98e",
          "md5": "e7e8fcafad2edec22953a539c4dfb209",
          "sha256": "ccaba9f1d4bf236bfcf1e17e630c77ffde587b6ac358a3e25f6d46e2328518c5"
        },
        "downloads": -1,
        "filename": "sqlalchemy_bind_manager-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7e8fcafad2edec22953a539c4dfb209",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.12",
        "size": 13782,
        "upload_time": "2023-02-09T16:41:58",
        "upload_time_iso_8601": "2023-02-09T16:41:58.072449Z",
        "url": "https://files.pythonhosted.org/packages/af/32/8631c5312e096b4bf917a47495774d4d04820df63e1044b14ca1ac51a98e/sqlalchemy_bind_manager-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "953ed44ad214f59bb6937defa71e77fa104c3abdaa9ed8baaba96f1b198d0a7f",
          "md5": "30a6c9e074edb2a7d059181c638e7dc6",
          "sha256": "5accec3c29b63207c0f7e5e22b677ef8d9fda3681483555fe9fd33f79cd3274a"
        },
        "downloads": -1,
        "filename": "sqlalchemy_bind_manager-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30a6c9e074edb2a7d059181c638e7dc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.12",
        "size": 14826,
        "upload_time": "2023-02-09T16:42:00",
        "upload_time_iso_8601": "2023-02-09T16:42:00.433732Z",
        "url": "https://files.pythonhosted.org/packages/95/3e/d44ad214f59bb6937defa71e77fa104c3abdaa9ed8baaba96f1b198d0a7f/sqlalchemy_bind_manager-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59806a5349378bd36990b12f5bb9d35ce44f9fa554aadc6153b7f561021013bd",
          "md5": "3b0b1d3a806942f0d665ee46f52dba6a",
          "sha256": "d37f0f62f288715377ae4e92482fdd4dc8a2f9911cc0abff0be116e6dca65b58"
        },
        "downloads": -1,
        "filename": "sqlalchemy_bind_manager-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b0b1d3a806942f0d665ee46f52dba6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<3.12",
        "size": 14648,
        "upload_time": "2023-02-24T20:06:43",
        "upload_time_iso_8601": "2023-02-24T20:06:43.133066Z",
        "url": "https://files.pythonhosted.org/packages/59/80/6a5349378bd36990b12f5bb9d35ce44f9fa554aadc6153b7f561021013bd/sqlalchemy_bind_manager-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2002d627771533361d86e609ee7f2a4024b01e5a9d1885c782270f1334eadcd7",
          "md5": "afdcf41b8bba8b018c2039cbdff4ed26",
          "sha256": "d49d97420cebb52d0cbf0e7a99362d3a6ec790c8b357d92eacf2577285e6e28d"
        },
        "downloads": -1,
        "filename": "sqlalchemy_bind_manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "afdcf41b8bba8b018c2039cbdff4ed26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<3.12",
        "size": 15205,
        "upload_time": "2023-02-24T20:06:44",
        "upload_time_iso_8601": "2023-02-24T20:06:44.454155Z",
        "url": "https://files.pythonhosted.org/packages/20/02/d627771533361d86e609ee7f2a4024b01e5a9d1885c782270f1334eadcd7/sqlalchemy_bind_manager-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59806a5349378bd36990b12f5bb9d35ce44f9fa554aadc6153b7f561021013bd",
        "md5": "3b0b1d3a806942f0d665ee46f52dba6a",
        "sha256": "d37f0f62f288715377ae4e92482fdd4dc8a2f9911cc0abff0be116e6dca65b58"
      },
      "downloads": -1,
      "filename": "sqlalchemy_bind_manager-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b0b1d3a806942f0d665ee46f52dba6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<3.12",
      "size": 14648,
      "upload_time": "2023-02-24T20:06:43",
      "upload_time_iso_8601": "2023-02-24T20:06:43.133066Z",
      "url": "https://files.pythonhosted.org/packages/59/80/6a5349378bd36990b12f5bb9d35ce44f9fa554aadc6153b7f561021013bd/sqlalchemy_bind_manager-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2002d627771533361d86e609ee7f2a4024b01e5a9d1885c782270f1334eadcd7",
        "md5": "afdcf41b8bba8b018c2039cbdff4ed26",
        "sha256": "d49d97420cebb52d0cbf0e7a99362d3a6ec790c8b357d92eacf2577285e6e28d"
      },
      "downloads": -1,
      "filename": "sqlalchemy_bind_manager-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "afdcf41b8bba8b018c2039cbdff4ed26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<3.12",
      "size": 15205,
      "upload_time": "2023-02-24T20:06:44",
      "upload_time_iso_8601": "2023-02-24T20:06:44.454155Z",
      "url": "https://files.pythonhosted.org/packages/20/02/d627771533361d86e609ee7f2a4024b01e5a9d1885c782270f1334eadcd7/sqlalchemy_bind_manager-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}