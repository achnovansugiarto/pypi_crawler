{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Deeprank-Core\n\n| Badges | |\n|:----:|----|\n| **fairness** |  [![fair-software.eu](https://img.shields.io/badge/fair--software.eu-%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F-green)](https://fair-software.eu) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/6403/badge)](https://bestpractices.coreinfrastructure.org/projects/6403) |\n| **package** |  [![PyPI version](https://badge.fury.io/py/deeprankcore.svg)](https://badge.fury.io/py/deeprankcore) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/f3f98b2d1883493ead50e3acaa23f2cc)](https://app.codacy.com/gh/DeepRank/deeprank-core?utm_source=github.com&utm_medium=referral&utm_content=DeepRank/deeprank-core&utm_campaign=Badge_Grade) |\n| **docs** | [![Documentation Status](https://readthedocs.org/projects/deeprankcore/badge/?version=latest)](https://deeprankcore.readthedocs.io/en/latest/?badge=latest) [![DOI](https://zenodo.org/badge/450496579.svg)](https://zenodo.org/badge/latestdoi/450496579) |\n| **tests** | [![Build Status](https://github.com/DeepRank/deeprank-core/actions/workflows/build.yml/badge.svg)](https://github.com/DeepRank/deeprank-core/actions) ![Linting status](https://github.com/DeepRank/deeprank-core/actions/workflows/linting.yml/badge.svg?branch=main) [![Coverage Status](https://coveralls.io/repos/github/DeepRank/deeprank-core/badge.svg?branch=main)](https://coveralls.io/github/DeepRank/deeprank-core?branch=main) |\n| **license** |  [![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)  |\n\n\n## Overview\n\n![alt-text](./deeprankcore.png)\n\nDeeprank-Core is a deep learning framework for data mining Protein-Protein Interactions (PPIs) using Graph Neural Networks. \n\nDeeprank-Core contains useful APIs for pre-processing PPIs data, computing features and targets, as well as training and testing GNN models.\n\n#### Features:\n- Predefined atom-level and residue-level PPI feature types\n  - e.g. atomic density, vdw energy, residue contacts, PSSM, etc.\n- Predefined target type\n  - e.g. binary class, CAPRI categories, DockQ, RMSD, FNAT, etc.\n- Flexible definition of both new features and targets\n- Graphs feature mapping\n- Efficient data storage in HDF5 format\n- Support both classification and regression (based on PyTorch and PyTorch Geometric)\n\nDeeprank-Core documentation can be found here : https://deeprankcore.rtfd.io/.\n\n## Table of contents\n\n- [Deeprank-Core](#deeprank-core)\n  - [Overview](#overview)\n      - [Features:](#features)\n  - [Table of contents](#table-of-contents)\n  - [Installation](#installation)\n    - [Dependencies](#dependencies)\n    - [Deeprank-core Package](#deeprank-core-package)\n  - [Documentation](#documentation)\n  - [Getting Started](#getting-started)\n    - [Data generation](#data-generation)\n    - [Data exploration](#data-exploration)\n    - [Dataset(s)](#datasets)\n    - [Training](#training)\n      - [Custom GNN](#custom-gnn)\n  - [h5x support](#h5x-support)\n  - [For the developers](#for-the-developers)\n    - [Software release](#software-release)\n\n## Installation\n\n### Dependencies\n\nBefore installing deeprank-core you need to install:\n\n * [reduce](https://github.com/rlabduke/reduce): follow the instructions in the README of the reduce repository.\n    * **How to build it without sudo privileges on a Linux machine**. After having run `make` in the reduce/ root directory, go to reduce/reduce_src/Makefile and modify `/usr/local/` to a folder in your home directory, such as `/home/user_name/apps`. Note that such a folder needs to be added to the PATH in the `.bashrc` file. Then run `make install` from reduce/. \n * [msms](https://ssbio.readthedocs.io/en/latest/instructions/msms.html): `conda install -c bioconda msms`. *For MacOS with M1 chip users*: you can follow [these instructions](https://ssbio.readthedocs.io/en/latest/instructions/msms.html).\n * [pytorch](https://pytorch.org/): `conda install pytorch -c pytorch`. Note that by default the CPU version of pytorch will be installed, but you can also customize that installation following the instructions on pytorch website.\n\n### Deeprank-core Package\n\nOnce the dependencies installed, you can install the latest release of deeprank-core using the PyPi package manager:\n\n```\npip install deeprankcore\n```\n\nYou can get all the new developments by cloning the repo and installing the code with\n\n```\ngit clone https://github.com/DeepRank/deeprank-core\ncd deeprank-core\npip install -e ./\n```\n\n * For MacOS with M1 chip users only: see [this](https://stackoverflow.com/questions/30145751/python3-cant-find-and-import-pyqt5) solution if you run into problems with PyQt5 during deeprank-core installation.\n\n## Documentation\n\nThe documentation can be found [here](https://deeprankcore.rtfd.io/).\n\n## Getting Started\n\n### Data generation\n\nThe process of generating graphs takes as input `.pdb` files representing protein-protein structural complexes and the correspondent Position-Specific Scoring Matrices (PSSMs) in the form of `.pssm` files. Query objects describe how the graphs should be built.\n\n```python\nfrom deeprankcore.preprocess import preprocess\nfrom deeprankcore.models.query import ProteinProteinInterfaceResidueQuery\nfrom deeprankcore.feature import bsa, pssm, amino_acid, biopython\n\nfeature_modules = [bsa, pssm, biopython, atomic_contact]\n\nqueries = []\n\n# Append data points\nqueries.append(ProteinProteinInterfaceResidueQuery(\n    pdb_path = \"1ATN_1w.pdb\",\n    chain_id1 = \"A\",\n    chain_id2 = \"B\",\n    targets = {\n        \"binary\": 0\n    },\n    pssm_paths = {\n        \"A\": \"1ATN.A.pdb.pssm\",\n        \"B\": \"1ATN.B.pdb.pssm\"\n    }\n))\nqueries.append(ProteinProteinInterfaceResidueQuery(\n    pdb_path = \"1ATN_2w.pdb\",\n    chain_id1 = \"A\",\n    chain_id2 = \"B\",\n    targets = {\n        \"binary\": 1\n    },\n    pssm_paths = {\n        \"A\": \"1ATN.A.pdb.pssm\",\n        \"B\": \"1ATN.B.pdb.pssm\"\n    }\n))\nqueries.append(ProteinProteinInterfaceResidueQuery(\n    pdb_path = \"1ATN_3w.pdb\",\n    chain_id1 = \"A\",\n    chain_id2 = \"B\",\n    targets = {\n        \"binary\": 0\n    },\n    pssm_paths = {\n        \"A\": \"1ATN.A.pdb.pssm\",\n        \"B\": \"1ATN.B.pdb.pssm\"\n    }\n))\n\n# Generate graphs and save them in hdf5 files\n# The default creates a number of hdf5 files equals to the cpu cores available\n# See deeprankcore.preprocess.preprocess for more details\noutput_paths = preprocess(feature_modules, queries, \"<output_folder>/<prefix_for_outputs>\")\n\n```\n\nThe user is free to implement his/her own query class. Each implementation requires the `build_graph` method to be present.\n\n\n### Data exploration\n\nAs representative example, the following is the hdf5 structure generated by the previous phase for `1ATN_1w.pdb`, so for one single graph:\n\n```bash\n└── ppi-1ATN_1w:A-B\n    ├── edge_features\n    │   ├── _index\n    │   ├── _name\n    │   ├── covalent\n    │   ├── distance\n    │   ├── electrostatic\n    │   ├── same_chain\n    │   ├── vanderwaals\n    ├── node_features\n    │   ├── _chain_id\n    │   ├── _name\n    │   ├── _position\n    │   ├── bsa\n    │   ├── hse\n    │   ├── info_content\n    │   ├── res_depth\n    │   ├── pssm\n    └── target_values\n        └── binary\n\n```\n\nThis graph represents the interface between two proteins contained in the `.pdb` file at the residue level. Each graph generated by deeprank-core has the above structure (apart from the features and the target that are specified by the user). \n\nIt is always a good practice to first explore the data, and then make decision about splitting them in training, test and validation sets. For this purpose, users can either use [HDF5View](https://www.hdfgroup.org/downloads/hdfview/), a visual tool written in Java for browsing and editing HDF5 files, or Python packages such as [h5py](https://docs.h5py.org/en/stable/). Few examples for the latter:\n\n```python\nimport h5py\nfrom deeprankcore.domain.features import groups\n\nwith h5py.File(\"<hdf5_path.hdf5>\", \"r\") as hdf5:\n\n    # List of all graphs in hdf5, each graph representing a ppi\n    ids = list(hdf5.keys())\n\n    # List of all node features\n    node_features = list(hdf5[ids[0]][\"node_features\"]) \n    # List of all edge features\n    edge_features = list(hdf5[ids[0]][\"edge_features\"])\n    # List of all edge targets\n    targets = list(hdf5[ids[0]][\"target_values\"])\n\n    # BSA feature for ids[0], numpy.ndarray\n    node_feat_polarity = hdf5[ids[0]][\"node_features\"][\"bsa\"][:] \n     # Electrostatic feature for ids[0], numpy.ndarray\n    edge_feat_electrostatic = hdf5[ids[0]][\"edge_features\"][\"electrostatic\"][:]\n```\n\n### Dataset(s)\n\nData can be split in sets implementing custom splits according to the specific application. Utility splitting functions are currently under development.\n\nAssuming that the training, validation and testing ids have been chosen (keys of the hdf5 file), then the corresponding graphs can be saved in hdf5 files containing only references (external links) to the original one. For example:\n\n```python\nfrom deeprankcore.DataSet import save_hdf5_keys\n\nsave_hdf5_keys(\"<original_hdf5_path.hdf5>\", train_ids, \"<train_hdf5_path.hdf5>\")\nsave_hdf5_keys(\"<original_hdf5_path.hdf5>\", valid_ids, \"<val_hdf5_path.hdf5>\")\nsave_hdf5_keys(\"<original_hdf5_path.hdf5>\", test_ids, \"<test_hdf5_path.hdf5>\")\n```\n\nNow the HDF5DataSet objects can be defined:\n\n```python\nfrom deeprankcore.DataSet import HDF5DataSet\n\nnode_features = [\"bsa\", \"res_depth\", \"hse\", \"info_content\", \"pssm\"]\nedge_features = [\"distance\"]\n\n# Creating HDF5DataSet objects\ndataset_train = HDF5DataSet(\n    hdf5_path = \"<train_hdf5_path.hdf5>\",\n    node_feature = node_features,\n    edge_feature = edge_features,\n    target = \"binary\"\n)\ndataset_val = HDF5DataSet(\n    hdf5_path = \"<val_hdf5_path.hdf5>\",\n    node_feature = node_features,\n    edge_feature = edge_features,\n    target = \"binary\"\n\n)\ndataset_test = HDF5DataSet(\n    hdf5_path = \"<test_hdf5_path.hdf5>\",\n    node_feature = node_features,\n    edge_feature = edge_features,\n    target = \"binary\"\n)\n```\n\n### Training\n\nLet's define a Trainer instance, using for example of the already existing GNNs, GINet:\n\n```python\nfrom deeprankcore.Trainer import Trainer\nfrom deeprankcore.ginet import GINet\nfrom deeprankcore.models.metrics import OutputExporter, ScatterPlotExporter\n\nmetrics_output_directory = \"./metrics\"\nmetrics_exporters = [OutputExporter(metrics_output_directory)]\n\ntrainer = Trainer(\n    dataset_train,\n    dataset_val,\n    dataset_test,\n    GINet,\n    batch_size = 64,\n    metrics_exporters = metrics_exporters\n)\n\n```\n\nOptimizer (`torch.optim.Adam` by default) and loss function can be defined by using dedicated functions:\n\n```python\nimport torch\n\ntrainer.configure_optimizers(torch.optim.Adamax, lr = 0.001, weight_decay = 1e-04)\n\n```\n\nThen the Trainer can be trained and tested, and the model can be saved:\n\n```python\ntrainer.train(nepoch = 50, validate = True)\ntrainer.test()\ntrainer.save_model(filename = \"<output_model_path.pth.tar>\")\n\n```\n\n\n#### Custom GNN\n\nIt is also possible to define new network architectures:\n\n```python\nimport torch \n\ndef normalized_cut_2d(edge_index, pos):\n    row, col = edge_index\n    edge_attr = torch.norm(pos[row] - pos[col], p=2, dim=1)\n    return normalized_cut(edge_index, edge_attr, num_nodes=pos.size(0))\n\nclass CustomNet(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = SplineConv(d.num_features, 32, dim=2, kernel_size=5)\n        self.conv2 = SplineConv(32, 64, dim=2, kernel_size=5)\n        self.fc1 = torch.nn.Linear(64, 128)\n        self.fc2 = torch.nn.Linear(128, 1)\n\n    def forward(self, data):\n        data.x = F.elu(self.conv1(data.x, data.edge_index, data.edge_attr))\n        weight = normalized_cut_2d(data.edge_index, data.pos)\n        cluster = graclus(data.edge_index, weight)\n        data = max_pool(cluster, data)\n\n        data.x = F.elu(self.conv2(data.x, data.edge_index, data.edge_attr))\n        weight = normalized_cut_2d(data.edge_index, data.pos)\n        cluster = graclus(data.edge_index, weight)\n        x, batch = max_pool_x(cluster, data.x, data.batch)\n\n        x = scatter_mean(x, batch, dim=0)\n        x = F.elu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        return F.log_softmax(self.fc2(x), dim=1)\n\ntrainer = Trainer(\n    dataset_train,\n    dataset_val,\n    dataset_test,\n    CustomNet,\n    batch_size = 64,\n    metrics_exporters = metrics_exporters\n)\n\ntrainer.train(nepoch=50)\n\n```\n\n## h5x support\n\nAfter installing  `h5xplorer`  (https://github.com/DeepRank/h5xplorer), you can execute the python file `deeprankcore/h5x/h5x.py` to explorer the connection graph used by deeprank-core. The context menu (right click on the name of the structure) allows to automatically plot the graphs using `plotly` as shown below.\n\n![alt-text](./h5_deeprankcore.png)\n\n## For the developers\n\n### Software release\n\nBefore creating a new package release, make sure to have updated all version strings in the source code. An easy way to do it is to run `bump2version [part]` from command line after having installed [bump2version](https://pypi.org/project/bump2version/) on your local environment. Instead of `[part]`, type the part of the version to increase, e.g. minor. The settings in `.bumpversion.cfg` will take care of updating all the files containing version strings. \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DeepRank/deeprank-core",
    "keywords": "graph neural network,protein-protein interface,pytorch",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deeprankcore",
    "package_url": "https://pypi.org/project/deeprankcore/",
    "platform": null,
    "project_url": "https://pypi.org/project/deeprankcore/",
    "project_urls": {
      "Bug Tracker": "https://github.com/DeepRank/deeprank-core/issues",
      "Homepage": "https://github.com/DeepRank/deeprank-core"
    },
    "release_url": "https://pypi.org/project/deeprankcore/1.0.0/",
    "requires_dist": [
      "tables (>=3.7)",
      "numpy (>=1.21.5)",
      "scipy (>=1.8.0)",
      "h5py (>=3.6.0)",
      "h5xplorer",
      "networkx (>=2.6.3)",
      "matplotlib (>=3.5.1)",
      "pdb2sql (>=0.5.1)",
      "scikit-learn (>=1.0.2)",
      "chart-studio (>=1.1.0)",
      "biopython (>=1.79)",
      "python-louvain (>=0.16)",
      "markov-clustering (>=0.0.6.dev0)",
      "tqdm (>=4.63.0)",
      "freesasa (>=2.1.0)",
      "tensorboard (>=2.9.0)",
      "protobuf (<=3.20.1)",
      "torch-scatter (>=2.0.6)",
      "torch-sparse (>=0.6.13)",
      "torch-cluster (>=1.6.0)",
      "torch-spline-conv (>=1.2.1)",
      "torch-geometric (>=2.0.4)",
      "yapf ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "recommonmark ; extra == 'doc'",
      "sphinx ; extra == 'doc'",
      "sphinx-rtd-theme ; extra == 'doc'",
      "build ; extra == 'publishing'",
      "twine ; extra == 'publishing'",
      "wheel ; extra == 'publishing'",
      "prospector[with_pyroma] ; extra == 'test'",
      "bump2version ; extra == 'test'",
      "coverage ; extra == 'test'",
      "pycodestyle ; extra == 'test'",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-runner ; extra == 'test'",
      "coveralls ; extra == 'test'"
    ],
    "requires_python": ">=3.9",
    "summary": "deeprank-core allows to train graph neural networks to classify protein-protein interface with a greater flexibility for the user.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15507903,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1da2e4f353040987c859d811deff5995de49580afdd581ce1662401e1e9553a0",
          "md5": "7a60a942c67b1d56613f2bf7d0363100",
          "sha256": "1ce746c1e925efc00d0fba2077b0aef63e75ad5a52db46740b9c727ffe4e7ccc"
        },
        "downloads": -1,
        "filename": "deeprankcore-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a60a942c67b1d56613f2bf7d0363100",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 90776,
        "upload_time": "2022-06-28T13:15:05",
        "upload_time_iso_8601": "2022-06-28T13:15:05.457856Z",
        "url": "https://files.pythonhosted.org/packages/1d/a2/e4f353040987c859d811deff5995de49580afdd581ce1662401e1e9553a0/deeprankcore-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd40462dcbdcd7d0ce1926151a4d67cfe40f754a7832ddcbc1a13348084fc0b8",
          "md5": "62b1071995f8ca7295b2dac8144e2919",
          "sha256": "ace2dea43302aa9a6ec39044c780ec341dac47240df82466a1ba9bd921991f92"
        },
        "downloads": -1,
        "filename": "deeprankcore-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "62b1071995f8ca7295b2dac8144e2919",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 74913,
        "upload_time": "2022-06-28T13:15:08",
        "upload_time_iso_8601": "2022-06-28T13:15:08.133281Z",
        "url": "https://files.pythonhosted.org/packages/dd/40/462dcbdcd7d0ce1926151a4d67cfe40f754a7832ddcbc1a13348084fc0b8/deeprankcore-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70df0e34a37c7cb853921b93dedd2329f834e2e109ff902f6ee24a415da2165",
          "md5": "959d244e2407c32b0d17aa534238b766",
          "sha256": "2bb0edf30b0c2aaf2a3964b4823487ba65e7fc1860d29c8a526a8c954545b13f"
        },
        "downloads": -1,
        "filename": "deeprankcore-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "959d244e2407c32b0d17aa534238b766",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 92276,
        "upload_time": "2022-08-10T11:50:20",
        "upload_time_iso_8601": "2022-08-10T11:50:20.435260Z",
        "url": "https://files.pythonhosted.org/packages/a7/0d/f0e34a37c7cb853921b93dedd2329f834e2e109ff902f6ee24a415da2165/deeprankcore-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a2bf5ec4f42a010009fe3e3673fa811d306286e7b1ce3b1f4795e1387a6926",
          "md5": "f7c51bfba1c6e5aa3429cc3fdfd17fb7",
          "sha256": "630a3420aa46ff2add9fabfe772d2000b4c9d2617579599a0d9e174ade0f3c9e"
        },
        "downloads": -1,
        "filename": "deeprankcore-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f7c51bfba1c6e5aa3429cc3fdfd17fb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 76660,
        "upload_time": "2022-08-10T11:50:22",
        "upload_time_iso_8601": "2022-08-10T11:50:22.066705Z",
        "url": "https://files.pythonhosted.org/packages/66/a2/bf5ec4f42a010009fe3e3673fa811d306286e7b1ce3b1f4795e1387a6926/deeprankcore-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "117f7efad70e8f55ea3cacf42084acf991e3335491271f3163b8c484a4e1c8c4",
          "md5": "ae6d8d4acc3cb67e72328ca1cecb7e13",
          "sha256": "cc69af86df4e83862d931315826819696ebba4525e5c59cb7626571b4cc4c922"
        },
        "downloads": -1,
        "filename": "deeprankcore-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae6d8d4acc3cb67e72328ca1cecb7e13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 203056,
        "upload_time": "2022-10-24T10:13:33",
        "upload_time_iso_8601": "2022-10-24T10:13:33.836775Z",
        "url": "https://files.pythonhosted.org/packages/11/7f/7efad70e8f55ea3cacf42084acf991e3335491271f3163b8c484a4e1c8c4/deeprankcore-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8054b9d80592db90594e16728d17f266c10d5620a4801df3b045afadaa018b3",
          "md5": "6018473b9a0e1d5506c59695814541ba",
          "sha256": "0e5985ee41bda41da347db16da56034402dbba6f5826e4eb48112a7165d19c7d"
        },
        "downloads": -1,
        "filename": "deeprankcore-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6018473b9a0e1d5506c59695814541ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 171277,
        "upload_time": "2022-10-24T10:13:35",
        "upload_time_iso_8601": "2022-10-24T10:13:35.605650Z",
        "url": "https://files.pythonhosted.org/packages/f8/05/4b9d80592db90594e16728d17f266c10d5620a4801df3b045afadaa018b3/deeprankcore-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "117f7efad70e8f55ea3cacf42084acf991e3335491271f3163b8c484a4e1c8c4",
        "md5": "ae6d8d4acc3cb67e72328ca1cecb7e13",
        "sha256": "cc69af86df4e83862d931315826819696ebba4525e5c59cb7626571b4cc4c922"
      },
      "downloads": -1,
      "filename": "deeprankcore-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ae6d8d4acc3cb67e72328ca1cecb7e13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 203056,
      "upload_time": "2022-10-24T10:13:33",
      "upload_time_iso_8601": "2022-10-24T10:13:33.836775Z",
      "url": "https://files.pythonhosted.org/packages/11/7f/7efad70e8f55ea3cacf42084acf991e3335491271f3163b8c484a4e1c8c4/deeprankcore-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8054b9d80592db90594e16728d17f266c10d5620a4801df3b045afadaa018b3",
        "md5": "6018473b9a0e1d5506c59695814541ba",
        "sha256": "0e5985ee41bda41da347db16da56034402dbba6f5826e4eb48112a7165d19c7d"
      },
      "downloads": -1,
      "filename": "deeprankcore-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6018473b9a0e1d5506c59695814541ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 171277,
      "upload_time": "2022-10-24T10:13:35",
      "upload_time_iso_8601": "2022-10-24T10:13:35.605650Z",
      "url": "https://files.pythonhosted.org/packages/f8/05/4b9d80592db90594e16728d17f266c10d5620a4801df3b045afadaa018b3/deeprankcore-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}