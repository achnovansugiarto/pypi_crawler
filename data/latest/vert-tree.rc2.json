{
  "info": {
    "author": "Michael Kepple",
    "author_email": "kepplemr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# vert_tree\n\nThis simple library displays conventional Python binary trees in an intuitive, vertical manner to either the terminal\nor a curses pad (useful for large trees!).\n\nA compatible Tree representation class:\n\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n```\n\nand example tree:\n\n```python\nroot = TreeNode(\"a\")\nroot.left = TreeNode(\"b\")\nroot.right = TreeNode(\"c\")\n```\n\n# terminal display\n\nusing our simple example tree, we can display it to terminal, attempt to mirror it, and display it again:\n\n```python\nfrom vert_tree import TerminalDisplay\n\ndef mirror(node):\n    if (node == None):\n        return\n    else:\n        temp = node\n        mirror(node.left)\n        mirror(node.right)\n        temp = node.left\n        node.left = node.right\n        node.right = temp\n\nterminal = TerminalDisplay()\nterminal.display_vert_tree(root)\nmirror(root)\nprint('after mirroring...')\nterminal.display_vert_tree(root)\n```\n\nexecution output:\n\n```bash\n$ python test.py\n    a\n   / \\\n  b   c\nafter mirroring...\n    a\n   / \\\n  c   b\n```\n\n# curses display\n\nterminal display is restricted by the width of the current terminal. Should a tree be too large, it can be displayed\nvertically in a curses pad instead.\n\nthe basic format is similar to our terminal display:\n\n```python\nfrom vert_tree import CursesDisplay\ncurses_display = CursesDisplay()\ncurses_display.display_vert_tree(root)\n```\nexcept when executed a curses window will allow for scrolling around the displayed tree. Arrow keys will move the screen\nand 'q' will exit the window.\n\nAdditionally, a curses display can be configured to exit automatically after a number of seconds by passing a timeout\nargument to the CursesDisplay constructor.\n\n```\nfrom vert_tree import CursesDisplay\ncurses_display = CursesDisplay(5)\ncurses_display.display_vert_tree(root)\n```\nin the above case the curses window will exit automatically after 5 seconds.\n\n# arrow spacing\n\nsome trees with considerable depth may take up a lot of space if we print consistent edge lines. For example:\n\n```bash\n                        SnCKkZLvPBMe\n                             / \\\n                            /   \\\n                           /     \\\n                          /       \\\n                         /         \\\n                        /           \\\n                       /             \\\n                      /               \\\n                     /                 \\\n                    /                   \\\n                   /                     \\\n                  /                       \\\n                 /                         \\\n                /                           \\\n               /                             \\\n     ajjUMZsoDBUgCsWpwW                bjnIUXLjqqWHQS\n             / \\                             / \\\n            /   \\                           /   \\\n           /     \\                         /     \\\n          /       \\                       /       \\\n         /         \\                     /         \\\n        /           \\                   /           \\\n       /             \\                 /             \\\n    hKqi     lKPwIcaDXsPtwlruMAX   oxKHLI           MHdg\n     /                                 \\\n    /                                   \\\n   /                                     \\\ndENnQtEJbRNCWxmJmgnM                     QyF\n                                           \\\n                                      PjhmeuYPGZRyf\n```\n\nby passing the arrow_spacing argument to either Terminal or Curses Displays, we can eliminate some of the depth by\nspacing out the edge representations to only print slashes every 'n'  number of chars. For instance the same tree can be\ndisplayed in a much more compact format:\n\n```python\nterminal.display_vert_tree(root, arrow_spacing=4)\n```\noutput:\n```bash\n                        SnCKkZLvPBMe\n                          /       \\\n                      /               \\\n                  /                       \\\n     ajjUMZsoDBUgCsWpwW                bjnIUXLjqqWHQS\n          /       \\                       /       \\\n    hKqi     lKPwIcaDXsPtwlruMAX   oxKHLI           MHdg\n    /                                   \\\ndENnQtEJbRNCWxmJmgnM                     QyF\n                                           \\\n                                      PjhmeuYPGZRyf\n```\n# limitations\n\n1) TerminalDisplay can only handle Trees that can fit within the current terminal screen width. If the tree is too wide\n   it will exit.\n2) CursesDisplay can handle LARGE trees (up to 32767x32767 on my system) but the underlying curses lib will eventually\n   crash given a large enough tree.\n2) TreeNode vals can be of any length, the displays will attempt to center them to the extent that they can. Any\n   collision with the bounds of the display or other TreeNode val's will result in the longer val getting trimmed.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kepplemr/vert_tree",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vert-tree",
    "package_url": "https://pypi.org/project/vert-tree/",
    "platform": "",
    "project_url": "https://pypi.org/project/vert-tree/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kepplemr/vert_tree/issues",
      "Homepage": "https://github.com/kepplemr/vert_tree"
    },
    "release_url": "https://pypi.org/project/vert-tree/1.1/",
    "requires_dist": null,
    "requires_python": ">=2.7",
    "summary": "Small library to visually display binary trees in terminal or curses pad.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10630403,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60e105ddbdcdbd112bf414729a9a9fbe7c4ce6c4a13c85bb6e3a84843fd30f18",
          "md5": "b4f909d263b9f35931ebc58e8aa7fd04",
          "sha256": "9699d62ab41cc0698937555e90fb649a92ee78005531267e2b7438009e1b8089"
        },
        "downloads": -1,
        "filename": "vert_tree-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4f909d263b9f35931ebc58e8aa7fd04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 19259,
        "upload_time": "2021-05-21T05:42:14",
        "upload_time_iso_8601": "2021-05-21T05:42:14.335969Z",
        "url": "https://files.pythonhosted.org/packages/60/e1/05ddbdcdbd112bf414729a9a9fbe7c4ce6c4a13c85bb6e3a84843fd30f18/vert_tree-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f8127eb81d2cbaaa114a24b2a56144019c7ae27667036b6cadafaf2ba4a2a3",
          "md5": "8295536d54b3b1d56964be65fddfb55b",
          "sha256": "297783015377dbad9a13cf717cd658cc452f4bfd91010ae46f91994637558941"
        },
        "downloads": -1,
        "filename": "vert_tree-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8295536d54b3b1d56964be65fddfb55b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 21720,
        "upload_time": "2021-05-21T05:42:16",
        "upload_time_iso_8601": "2021-05-21T05:42:16.000407Z",
        "url": "https://files.pythonhosted.org/packages/07/f8/127eb81d2cbaaa114a24b2a56144019c7ae27667036b6cadafaf2ba4a2a3/vert_tree-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01e7c0b52e4f50ef369656d3504901193c5a63712fc8d3cf29dd22c82c6c55cc",
          "md5": "c6e684fd6fcd96524db42288716e189b",
          "sha256": "475d5acf3e7ffeba4eb256214f2d904186cb1859a289ad5a89db3c5db7e028ec"
        },
        "downloads": -1,
        "filename": "vert_tree-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6e684fd6fcd96524db42288716e189b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=2.7",
        "size": 19405,
        "upload_time": "2021-06-12T11:34:10",
        "upload_time_iso_8601": "2021-06-12T11:34:10.667089Z",
        "url": "https://files.pythonhosted.org/packages/01/e7/c0b52e4f50ef369656d3504901193c5a63712fc8d3cf29dd22c82c6c55cc/vert_tree-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b76f50bc7c25c395639ccae5117b9226fc69ab90b7901ecfe9893982a048d3",
          "md5": "43d61d33382ee2f1a0e5fbe53442270a",
          "sha256": "cb259dd76b5fa74e1ffc2bdb8a83dd23b37f5ed840bc57e0707fb3d8692c0967"
        },
        "downloads": -1,
        "filename": "vert_tree-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43d61d33382ee2f1a0e5fbe53442270a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.7",
        "size": 21394,
        "upload_time": "2021-06-12T11:34:12",
        "upload_time_iso_8601": "2021-06-12T11:34:12.257682Z",
        "url": "https://files.pythonhosted.org/packages/f9/b7/6f50bc7c25c395639ccae5117b9226fc69ab90b7901ecfe9893982a048d3/vert_tree-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01e7c0b52e4f50ef369656d3504901193c5a63712fc8d3cf29dd22c82c6c55cc",
        "md5": "c6e684fd6fcd96524db42288716e189b",
        "sha256": "475d5acf3e7ffeba4eb256214f2d904186cb1859a289ad5a89db3c5db7e028ec"
      },
      "downloads": -1,
      "filename": "vert_tree-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6e684fd6fcd96524db42288716e189b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=2.7",
      "size": 19405,
      "upload_time": "2021-06-12T11:34:10",
      "upload_time_iso_8601": "2021-06-12T11:34:10.667089Z",
      "url": "https://files.pythonhosted.org/packages/01/e7/c0b52e4f50ef369656d3504901193c5a63712fc8d3cf29dd22c82c6c55cc/vert_tree-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9b76f50bc7c25c395639ccae5117b9226fc69ab90b7901ecfe9893982a048d3",
        "md5": "43d61d33382ee2f1a0e5fbe53442270a",
        "sha256": "cb259dd76b5fa74e1ffc2bdb8a83dd23b37f5ed840bc57e0707fb3d8692c0967"
      },
      "downloads": -1,
      "filename": "vert_tree-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "43d61d33382ee2f1a0e5fbe53442270a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.7",
      "size": 21394,
      "upload_time": "2021-06-12T11:34:12",
      "upload_time_iso_8601": "2021-06-12T11:34:12.257682Z",
      "url": "https://files.pythonhosted.org/packages/f9/b7/6f50bc7c25c395639ccae5117b9226fc69ab90b7901ecfe9893982a048d3/vert_tree-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}