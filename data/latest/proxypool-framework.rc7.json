{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# proxypool_framework \n\n### 介绍\nproxypool_framework 是通用ip代理池架构 + 内置的20+ 个免费代理ip网站爬取函数。\n从ip数量、ip质量、代理池实现本身的难度和代码行数、代理池扩展平台需要的代码行数和难度、配置方式、代理检测设计算法，\n是py史上最强的代理池，欢迎对比任意项目代理池项目，如果这不是最强的，可以写出理由反驳，并贴出更好代码的地址。\n\n使用方式如下，安装pip包，然后执行python -m proxypool_framework.proxy_collector 接一大串自定义的配置。（也可以拉取git使用）\n\n1)安装代理池框架\n\npip install proxypool_framework   \n\n2)python -m 运行起来\n\npython -m proxypool_framework.proxy_collector REDIS_URL=redis:// \nMAX_NUM_PROXY_IN_DB=500 MAX_SECONDS_MUST_CHECK_AGAIN=10 REQUESTS_TIMEOUT=5 FLASK_PORT=6795 PROXY_KEY_IN_REDIS_DEFAULT=proxy_free \n\n如果redis和python代码是同一台机器，并且其他配置不想重新设置的话可以 python -m proxypool_framework.proxy_collector 就完了。\n\n\n### 关于免费代理\n```\n关于免费代理，免费都是垃圾的论断，是由于被xici这类型的网站坑惨了，只弄过xici，然后发现可用数量比例低，响应时间大，接得出结论免费都是垃圾。\n为什么总是要用xici这种实验，是由于基础代码扩展性太差，导致没时间测试验证。代码写好了，验证一个平台就只需要3分钟了。\n目前验证了20个平台，得出结论是xici是中等网站，比xici更垃圾的也有一堆网站。但至少发现了有3个平台，每1个平台的可用数量都是xici的30倍以上。\n\n这种方式的代理池数量秒杀任意收费代理，质量超过大部分收费代理（可以通过参数配置调优，来控制数量和质量的平衡）。\n```\n\n\n### 设计思路\n```\n对于主流程相同，但其中某一个环节必须不同的项目代码布局，都用通用的设计思路，完全不需要设计规划打草稿，直接敲键盘就是了。\n对于这种项目，如果学了设计模式，就很容易轻松不懂大脑就能设计。\n\n设计这种项目主要有两种大的方向:\n一种是使用模板模式，模板基类实现主流程，空缺一个必须被继承的方法，然后各个扩展平台只需要继承实现那个方法就可以了。这是继承。\n另一种是使用策略模式，Context类实现业务主流程，接受一个策略类(也可以是策略函数)，context对象的运行随着策略类（策略函数）的不同而表现不同。\n这两种方式都能很好的轻松节约流程相似的代码，只需要写不相同部分的代码。本项目使用的是第二种是策略模式，扩展品台可以采用喜闻乐见的面向过程函数编程。\n\n设计ProxyCollector类和测试需要2小时，然后扩展一个代理平台由于只需要写一个函数3行代码，如果一个函数花费5分钟，这需要100分钟扩展20个平台。\n\n```\n\n### 介绍。\n```\n十分方便扩展各种免费和收费的代理池维护，具有高性能和高并发检测。\n\n只要写5行代理ip解析函数，传给ProxyCollector类，运行work方法，就可以循环执行拉取新代理ip并检测入库，\n同时按最后一次的检测时间戳,重新检测超过指定时间的存量代理ip\n\n代理ip池使用的是 redis的sortedset结构，键是代理ip，评分是检测时候的时间戳。\n\n可以一键 将多个网站维护到一个代理池，也可以维护多个不同的redis键代理池。\n```\n\n### 文件作用介绍\n```\nfunctions_of_get_https_proxy_from_websites.py \n是从各个网站或付费api获取代理ip的爬取函数大全。\n\nproxy_collector.py \n1）是自动维护代理池,是万能通用的代理池。可以用于任意免费平台或者收费平台进行代理池维护。\n2）启动一个web接口，/get_a_proxy接口返回一个代理ip。/get_a_proxy后面接的数字为最近检测时候的n个代理中随机返回一个，数字越小范围越小质量越好。 \n\nproxy_pool_config.py \n代理池配置,可以写在文件中也可以用python命令参数传参方式。\n\ntests/test_rate_of_success.py \n是大规模统计代理池中的ip访问互联网的成功率统计。\n```\n\n### 三种启动方式\n```\n初次运行时候由于redis中没有代理ip做爬取第三方网站的引子，会被免费代理网站反爬，ip在前几分钟内会比较少。之后会增多，耐心等待。\n    \n启动方式种类：\n1)\nexport PYTHONPATH=/codes/proxypool_framework （指的是你的代码的位置，codes换成你的位置） # 这个原理就不需解释了，不知道PYTHONPATH是什么就太low了。\n\npython proxy_collector.py REDIS_URL=redis:// MAX_NUM_PROXY_IN_DB=500 MAX_SECONDS_MUST_CHECK_AGAIN=12 REQUESTS_TIMEOUT=6 FLASK_PORT=6795 PROXY_KEY_IN_REDIS_DEFAULT=proxy_free\n或者在 proxy_pool_config.py 文件中把配置写好，就不需要命令行来传参了。直接 python proxy_collector.py\n\n2)pycharm中打开此项目，可以直接右键点击run proxy_collector.py\n\n3)pip install proxypool_framework\npython -m proxypool_framework.proxy_collector REDIS_URL=redis:// MAX_NUM_PROXY_IN_DB=500 MAX_SECONDS_MUST_CHECK_AGAIN=12 REQUESTS_TIMEOUT=6 FLASK_PORT=6795 PROXY_KEY_IN_REDIS_DEFAULT=proxy_free\n \n也可以分两次启动，指定不同的redis默认键和flask ，\n弄一个 MAX_SECONDS_MUST_CHECK_AGAIN  REQUESTS_TIMEOUT 时间小的启动配置,生成优质代理池默认维护在proxy1键中，数量少，成功率高。\n再启动一个 MAX_SECONDS_MUST_CHECK_AGAIN  REQUESTS_TIMEOUT 时间大的启动配置,生成中等代理池默认维护在proxy2键中，数量多，成功率低。\n\n\n启动后可以访问127.0.0.1:6795（指定的端口号），有多个api接口\nhttp://127.0.0.1:6795/get_a_proxy/30?u=user2&p=pass2  #指得是从最接近现在的检测时间的30个代理中随机返回一个。\n```\n\n### 配置说明\n```\n# 可以直接修改这里的值为自己的最终值，也可以使用命令行方式覆盖这里的配置。命令行是为了可以快速的不修改代码配置而进行方便质量数量调优,和不改配置，多次启动分别生成优质代理池、普通代理池。\nREDIS_URL = 'redis://:@'  # redis的url连接方式百度，可以指定db和ip和密码。\nMAX_NUM_PROXY_IN_DB = 1000  # redis中存在超过这个代理数量后，将不再拉取新代理，防止检测存量ip消耗资源过多。\n\n\"\"\"代理池是sorted set结构，键是ip,值是该ip最后一次的检测时间戳。一轮一轮的扫描，检测到存量代理ip的最后一次检测时间离现在超过这个时间就重新检测，否则此轮不检测此代理，\nMAX_SECONDS_MUST_CHECK_AGAIN 的值要适当，过大会导致检测不及时，取出来后使用时成功率变低；过小会导致检测存量代理ip的密度过大，当存量代理太多的时候，会导致cpu消耗高。\n\n如果使 MAX_SECONDS_MUST_CHECK_AGAIN = 2 REQUESTS_TIMEOUT = 1， 则会导致数据库检测及时，并且都是优质代理ip，但存量数量会有所减少（但数量还是秒杀任意收费代理），成功率和响应时间很好。\n如果使 MAX_SECONDS_MUST_CHECK_AGAIN = 10 REQUESTS_TIMEOUT = 5， 这个是比较均衡的配置，兼容数量和质量。\n如果使 MAX_SECONDS_MUST_CHECK_AGAIN = 18 REQUESTS_TIMEOUT = 10， 这个可以造成数据库中存量ip多，但有些代理ip响应时间长，随机使用成功率也会有所降低。\n如果使 MAX_SECONDS_MUST_CHECK_AGAIN = 30 REQUESTS_TIMEOUT = 20， 这样数量非常多。\n\n如果使 MAX_SECONDS_MUST_CHECK_AGAIN = 1 REQUESTS_TIMEOUT = 40，这种配置就相当不好了，会造成存量大质量差，但又想检测密度高，会造成cpu消耗高。\n建议MAX_SECONDS_MUST_CHECK_AGAIN是REQUESTS_TIMEOUT的 1-2 倍，可以根据自己要数量大自己重试还是实时必须响应速度快进行不同的配置调优。\n\n\"\"\"\nMAX_SECONDS_MUST_CHECK_AGAIN = 2\nREQUESTS_TIMEOUT = 1  # 请求响应时间超过这个值，视为废物代理。\nFLASK_PORT = 6795  # 代理ip获取的接口\nPROXY_KEY_IN_REDIS_DEFAULT = 'proxy_free' # 默认的redis sorted set键，指的是如果你不在ProxyCollector实例化时候亲自指定键的名字（主要是为了一次启动实现维护多个redis代理池）。\n```\n\n\n### 代理池维护的图片\n```\n代理池是sorted set结构，元素是代理ip本身，评分是该代理ip的最后一次的检测时间。\n\n流程是：\n\n1）有专门的n个独立线程去监控每个代理平台的页面，同时支持了分页监控。按照ProxyCollector对象的设置的时间来进行多久重新拉取一次代理ip，解析得到代理ip列表。\n\n2）使用了专门的线程池检测解析得到的代理ip列表，有效的跟新时间戳放到数据库，无效的丢弃。\n\n3）对于存量ip，检测完一轮后，休息1秒，然后进行下一轮扫描需要被重新检测的代理ip，有专门的线程池检测存量代理ip。\n如果一个存量代理的最后一次检测时间与当前时间差超过了 MAX_SECONDS_MUST_CHECK_AGAIN 则会重新检测，\n如果检测没有失效，则更新检测的时间戳为当前时间；如果检测失效了则删除。请求检测的requests timeout时间是使用 REQUESTS_TIMEOUT。\n一直高速循环检测。\n\n```\n![Image text](https://i.niupic.com/images/2020/06/18/8hbZ.png)\n\n\n### 随机统计检测代理池的质量\n```\n这是设置 MAX_SECONDS_MUST_CHECK_AGAIN=2 REQUESTS_TIMEOUT=1 配置的代理池维护的，然后取出来的随机测试结果。\n可以发现平均响应时间是1.5秒，只请求1次不做重试就成功的概率是98.5%。\n如果重试两次，可以保证成功率达到99.9%，这成功率足够可以秒杀任意收费代理。\n\npython -m proxypool_framework.proxy_collector REDIS_URL=redis:// MAX_NUM_PROXY_IN_DB=500 MAX_SECONDS_MUST_CHECK_AGAIN=2 REQUESTS_TIMEOUT=1 FLASK_PORT=6795 \n```\n![Image text](https://i.niupic.com/images/2020/06/18/8hbY.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "proxy,proxy_pool",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "proxypool-framework",
    "package_url": "https://pypi.org/project/proxypool-framework/",
    "platform": "all",
    "project_url": "https://pypi.org/project/proxypool-framework/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/proxypool-framework/2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "proxypool_framework 是万能通用代理池架构，实现核心代码很少只有87行，同时想扩展一个代理平台仅需要写三行代码。通用代理池附带20+ 免费网站代理",
    "version": "2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7869321,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "437ac4044b19776c25749e42c1f250cc960f9058b9a3953d6d7ec428ae438a4c",
          "md5": "7a228eb4109202c8c056ceebcb23aec2",
          "sha256": "8a86a137de5b32b3a0705510125494d91344f852d5f8e46940aec73eb5ca930e"
        },
        "downloads": -1,
        "filename": "proxypool_framework-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a228eb4109202c8c056ceebcb23aec2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16891,
        "upload_time": "2020-06-18T06:39:04",
        "upload_time_iso_8601": "2020-06-18T06:39:04.140715Z",
        "url": "https://files.pythonhosted.org/packages/43/7a/c4044b19776c25749e42c1f250cc960f9058b9a3953d6d7ec428ae438a4c/proxypool_framework-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9585fb842a212753ea2767f5a8c008a0d5456c16f6a13c76ba876933d93753b8",
          "md5": "f496bd2a4bf0855b201e1e4b0aefe1a5",
          "sha256": "97daea77e6165d000a895b11f44c56f20390dcd981ab302a9868dea4e263c951"
        },
        "downloads": -1,
        "filename": "proxypool_framework-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f496bd2a4bf0855b201e1e4b0aefe1a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53931,
        "upload_time": "2020-06-24T14:29:24",
        "upload_time_iso_8601": "2020-06-24T14:29:24.365995Z",
        "url": "https://files.pythonhosted.org/packages/95/85/fb842a212753ea2767f5a8c008a0d5456c16f6a13c76ba876933d93753b8/proxypool_framework-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc2eb7a7a5c9c10e00d9629d9a463854687c21e113e221d19ac424243186720e",
          "md5": "31dde01c727f6be8ca4bfe8ea8994599",
          "sha256": "5173f8ad0a0dd0ba7bbb4e3cf9513e224be61c6dbb6495103161eba62138fa4f"
        },
        "downloads": -1,
        "filename": "proxypool_framework-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "31dde01c727f6be8ca4bfe8ea8994599",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54507,
        "upload_time": "2020-06-28T09:38:26",
        "upload_time_iso_8601": "2020-06-28T09:38:26.356746Z",
        "url": "https://files.pythonhosted.org/packages/cc/2e/b7a7a5c9c10e00d9629d9a463854687c21e113e221d19ac424243186720e/proxypool_framework-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b361a5c7e5e54064a29a570767576cf354f0ae2065018b80a48577d7bf5f21",
          "md5": "a100e59f7a2045781e614da75f6c451f",
          "sha256": "202128355a75443f4673be5ff0d39fc1dec2e1266f47a3a2d06e92cbfdeb7e1e"
        },
        "downloads": -1,
        "filename": "proxypool_framework-1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a100e59f7a2045781e614da75f6c451f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54071,
        "upload_time": "2020-07-08T07:10:41",
        "upload_time_iso_8601": "2020-07-08T07:10:41.751438Z",
        "url": "https://files.pythonhosted.org/packages/28/b3/61a5c7e5e54064a29a570767576cf354f0ae2065018b80a48577d7bf5f21/proxypool_framework-1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6bb3e7b991b9e3fa062c253ded2894fb9aec16934950ecd6fa9b3bccd336d95",
          "md5": "2e3e671bfeec012659ceb6bb2cb1585e",
          "sha256": "78f3395356fce1d1affcf4d10f632048dd8d71e269a42ab6232313c2142aecbf"
        },
        "downloads": -1,
        "filename": "proxypool_framework-1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "2e3e671bfeec012659ceb6bb2cb1585e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54660,
        "upload_time": "2020-08-03T02:04:18",
        "upload_time_iso_8601": "2020-08-03T02:04:18.182970Z",
        "url": "https://files.pythonhosted.org/packages/d6/bb/3e7b991b9e3fa062c253ded2894fb9aec16934950ecd6fa9b3bccd336d95/proxypool_framework-1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "986443cb0128200cebcbc82a66b5f085082de65f19039c4c5388e4d753a98fbf",
          "md5": "072d6f2139e4ae8ae796800d505f7698",
          "sha256": "ca5956076c02042f48ffcc91c86e93a988dde371af2f0d108395684f037b6f48"
        },
        "downloads": -1,
        "filename": "proxypool_framework-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "072d6f2139e4ae8ae796800d505f7698",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54540,
        "upload_time": "2020-08-03T02:12:43",
        "upload_time_iso_8601": "2020-08-03T02:12:43.262274Z",
        "url": "https://files.pythonhosted.org/packages/98/64/43cb0128200cebcbc82a66b5f085082de65f19039c4c5388e4d753a98fbf/proxypool_framework-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "461b3b0c516c3affd85787ec878c10e22b5811566273dfa750ecf5893a1102a7",
          "md5": "68a10bca005ec84c25d34bb726ea76a7",
          "sha256": "5eab7f21ef343c8d6d4c78dcb02215b645576136c0fc016541c9322b732c61a9"
        },
        "downloads": -1,
        "filename": "proxypool_framework-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68a10bca005ec84c25d34bb726ea76a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54858,
        "upload_time": "2020-08-03T03:09:15",
        "upload_time_iso_8601": "2020-08-03T03:09:15.368935Z",
        "url": "https://files.pythonhosted.org/packages/46/1b/3b0c516c3affd85787ec878c10e22b5811566273dfa750ecf5893a1102a7/proxypool_framework-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "461b3b0c516c3affd85787ec878c10e22b5811566273dfa750ecf5893a1102a7",
        "md5": "68a10bca005ec84c25d34bb726ea76a7",
        "sha256": "5eab7f21ef343c8d6d4c78dcb02215b645576136c0fc016541c9322b732c61a9"
      },
      "downloads": -1,
      "filename": "proxypool_framework-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "68a10bca005ec84c25d34bb726ea76a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 54858,
      "upload_time": "2020-08-03T03:09:15",
      "upload_time_iso_8601": "2020-08-03T03:09:15.368935Z",
      "url": "https://files.pythonhosted.org/packages/46/1b/3b0c516c3affd85787ec878c10e22b5811566273dfa750ecf5893a1102a7/proxypool_framework-2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}