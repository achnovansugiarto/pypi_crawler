{
  "info": {
    "author": "Jonathan",
    "author_email": "pybots.il@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## InjectInLoop\n##### This module that I created for fun, lets you inject function calls inside the loop itself, between every iteration.\n\n### Important! currently, it only supports one-line for loop (only the \"signature\"), i.e.\n\n```python\nfor XYZ().xyz in obj([], [], []):\n```\nwill work, and \n```python\nfor XYZ().xyz in obj(\n        [],\n        [],\n        []\n):\n```\nWill not!\n\n\n### Usage:\n\n- import `inject_in_loop.Base` and inherit it with your own class.\n- The inheriting class **must** define an attribute/method named `function` that will be called between each iteration.\n- use the following syntax:\n> `for YourClass().item in Array:...`\n\n> `for YourClass().item1.item2 in Array:...`\n\n>`for YourClass().item1, YourClass().item2 in Array:...`\n\n>`for YourClass().item1, item2 in Array:...`\n\n- In the first scenario, the variable `item` will be available.\n- In the second scenario, the variables `item1` and `item2` will be available, It will only work in case that each element in the array can be unpacked into a two-items tuple, just like the regular `for a,b in array:...`\n- In the third scenario, the variables `item1` and `item2` will be available, just like the second example. However, In this scenario `YourClass.function` will be called two times per each iteration, since there are two objects in that example.\n- In the fourth scenario, the variables `item1` and `item2` will be available, like the second example, in fact it is the same as the second scenario.\n\nYou can also pass arguments to the class which will be sent into `function`:\n\nan example from `inject_in_loop/main.py`:\n\n```python\nfrom inject_in_loop import Base\nfrom time import sleep\n\n\nclass Sleep(Base):\n    function = sleep\n\n\nfor Sleep(0.3).range1.range2 in zip(range(10), range(10)):\n    print(range1 + range2, \"[obj.a.b] a + b\")\n```\n\nIt will sleep 0.3 seconds between each iteration, and the output will be:\n```\n0 [obj.a.b] a + b\n2 [obj.a.b] a + b\n4 [obj.a.b] a + b\n6 [obj.a.b] a + b\n8 [obj.a.b] a + b\n10 [obj.a.b] a + b\n12 [obj.a.b] a + b\n14 [obj.a.b] a + b\n16 [obj.a.b] a + b\n18 [obj.a.b] a + b\n```\nor:\n\n```python\nclass PrintNewLine(Base):\n    function = print\n\n\nfor PrintNewLine().item in (\"a\", \"b\", \"c\"):\n    print(item)\n```\n\nThe output will be\n```\na\n\nb\n\nc\n```\n\n\nYou can see a couple of examples in `inject_in_loop/main.py`.\n> In order to run those examples you need to run that file directly (not by importing it.).\n\nYou can also create mixins, which will call several functions with their corresponding arguments, as in the ex example:\n```python\nfrom inject_in_loop import Base\nfrom time import sleep\n\nclass Mixin(Base):\n    functions = [sleep, print]\n\nfor Mixin(f_params={\"sleep\": (1,),\"print\": ()}).element in range(10):\n    print(element)\n```\nYou must specify the parameter  `f_params` (must be a keyword argument) which will hold a dict with the corresponding tuple of arguments for each function.\nthe functions in a mixin will be held under an attribute named `functions` in the class.\n\nYou can also use unpacking in the for loop, as in the example:\n\n```python\nfrom inject_in_loop import Base\nfrom time import sleep\n\nclass Sleep(Base):\n    function = sleep\n    \n    \nfor Sleep(0.3, unpack=\"b\").a.b.c in [[\"a\", \"b\", \"c\", \"d\"]]*5:\n    print(a, b, c)\n```\nThe result will be:\n```\na ['b', 'c'] d\na ['b', 'c'] d\na ['b', 'c'] d\na ['b', 'c'] d\na ['b', 'c'] d\n```\n`b` is the \"starred\" argument, as in the expression `a, *b, c = [\"a\", \"b\", \"c\", \"d\"]`.\nYou can't have more than one starred argument.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jonatan1609/InjectInLoop",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "InjectInLoop",
    "package_url": "https://pypi.org/project/InjectInLoop/",
    "platform": "",
    "project_url": "https://pypi.org/project/InjectInLoop/",
    "project_urls": {
      "Homepage": "https://github.com/jonatan1609/InjectInLoop"
    },
    "release_url": "https://pypi.org/project/InjectInLoop/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "This module lets you inject a function call between every iteration without doing it manually. Created mainly for fun :)",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10899297,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e2535a404837db9277d1439417f1654cdfd1bea0d1e1a6d1b6f1b87d29f7937",
          "md5": "2c9388572b9b45039914e5c6c03d3c34",
          "sha256": "6d49795656f9707ad51920b38009d1ac8383aea6ab3a2fa0d43709344ab16dd9"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c9388572b9b45039914e5c6c03d3c34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4037,
        "upload_time": "2021-07-13T16:43:04",
        "upload_time_iso_8601": "2021-07-13T16:43:04.912850Z",
        "url": "https://files.pythonhosted.org/packages/7e/25/35a404837db9277d1439417f1654cdfd1bea0d1e1a6d1b6f1b87d29f7937/InjectInLoop-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcfa42ad1217e932c1cb4d53c95f16eb6a45736b1d1796c16cb3daed677351de",
          "md5": "785d1fb91801c98080d197a3c5f461c8",
          "sha256": "b708b875a93a33649d6b0663cc74454b78fbdc9510e004b5137fae2312acbb77"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "785d1fb91801c98080d197a3c5f461c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3544,
        "upload_time": "2021-07-13T16:43:06",
        "upload_time_iso_8601": "2021-07-13T16:43:06.269781Z",
        "url": "https://files.pythonhosted.org/packages/fc/fa/42ad1217e932c1cb4d53c95f16eb6a45736b1d1796c16cb3daed677351de/InjectInLoop-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04863ba681c909d0e30d8823616d27038cb43a16266e34d05859ad872623eb14",
          "md5": "a4bd85195635ce39f833397cfe4a2bb5",
          "sha256": "caaea6820d117a4668c1a2f73104bfcd0fe93ac531ee414316e4b6f19795bc4f"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4bd85195635ce39f833397cfe4a2bb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4035,
        "upload_time": "2021-07-13T16:48:56",
        "upload_time_iso_8601": "2021-07-13T16:48:56.486784Z",
        "url": "https://files.pythonhosted.org/packages/04/86/3ba681c909d0e30d8823616d27038cb43a16266e34d05859ad872623eb14/InjectInLoop-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b301861dfa8a3ec0706d1e2a2544019b100cafaab620ce001576fa08cd20a55",
          "md5": "c14f5363e0d91e3da8cb995e80f3584e",
          "sha256": "98be259a73c6df2225c8acce8f2cade0ef3b1b321b4f600b306985096d2d7a72"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c14f5363e0d91e3da8cb995e80f3584e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3547,
        "upload_time": "2021-07-13T16:48:59",
        "upload_time_iso_8601": "2021-07-13T16:48:59.335627Z",
        "url": "https://files.pythonhosted.org/packages/1b/30/1861dfa8a3ec0706d1e2a2544019b100cafaab620ce001576fa08cd20a55/InjectInLoop-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9414ceac7070e63f8fba816adabf4b7e894773a5bad0d895517b561514c56b34",
          "md5": "fdb4c0aa3868d6ff013f6ecc25157daa",
          "sha256": "cd71e2e48bcde2f6c782b4ef70b4993d9f925fab7478f2f912e7423d367f45a6"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fdb4c0aa3868d6ff013f6ecc25157daa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 4042,
        "upload_time": "2021-07-13T16:51:31",
        "upload_time_iso_8601": "2021-07-13T16:51:31.536048Z",
        "url": "https://files.pythonhosted.org/packages/94/14/ceac7070e63f8fba816adabf4b7e894773a5bad0d895517b561514c56b34/InjectInLoop-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a475888d049454f1d2ede9916548854ac62c66f88a82847bdc002ee92636b21",
          "md5": "c2c79fa71aa02bccb657b8d815cc29b3",
          "sha256": "8141ece8256530ae99cf10bdcf05e69812e50a58d0e5d5678ed3bcfb44054b1c"
        },
        "downloads": -1,
        "filename": "InjectInLoop-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c2c79fa71aa02bccb657b8d815cc29b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3529,
        "upload_time": "2021-07-13T16:51:34",
        "upload_time_iso_8601": "2021-07-13T16:51:34.770366Z",
        "url": "https://files.pythonhosted.org/packages/5a/47/5888d049454f1d2ede9916548854ac62c66f88a82847bdc002ee92636b21/InjectInLoop-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9414ceac7070e63f8fba816adabf4b7e894773a5bad0d895517b561514c56b34",
        "md5": "fdb4c0aa3868d6ff013f6ecc25157daa",
        "sha256": "cd71e2e48bcde2f6c782b4ef70b4993d9f925fab7478f2f912e7423d367f45a6"
      },
      "downloads": -1,
      "filename": "InjectInLoop-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fdb4c0aa3868d6ff013f6ecc25157daa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 4042,
      "upload_time": "2021-07-13T16:51:31",
      "upload_time_iso_8601": "2021-07-13T16:51:31.536048Z",
      "url": "https://files.pythonhosted.org/packages/94/14/ceac7070e63f8fba816adabf4b7e894773a5bad0d895517b561514c56b34/InjectInLoop-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a475888d049454f1d2ede9916548854ac62c66f88a82847bdc002ee92636b21",
        "md5": "c2c79fa71aa02bccb657b8d815cc29b3",
        "sha256": "8141ece8256530ae99cf10bdcf05e69812e50a58d0e5d5678ed3bcfb44054b1c"
      },
      "downloads": -1,
      "filename": "InjectInLoop-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c2c79fa71aa02bccb657b8d815cc29b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 3529,
      "upload_time": "2021-07-13T16:51:34",
      "upload_time_iso_8601": "2021-07-13T16:51:34.770366Z",
      "url": "https://files.pythonhosted.org/packages/5a/47/5888d049454f1d2ede9916548854ac62c66f88a82847bdc002ee92636b21/InjectInLoop-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}