{
  "info": {
    "author": "Felix Leeb",
    "author_email": "felixludos.info@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. role:: py(code)\n\n   :language: python\n\n\n\nThis package contains several high level utilities for python development, including:\n\n\n\n- Packing: Human Readable Serialization of Python Objects\n\n- Transactions: Grouping multiple python statements into an atomic operation that can be committed or aborted\n\n- Containers: dropin replacements for several common python types (including :py:`dict`, :py:`list`, :py:`set`, etc.)\n\n- Cryptography: simple utilities for common cryptography functionality (very high-level on top of standard python libraries)\n\n\n\n\n\nInstall\n\n=======\n\n\n\n.. install-marker-do-not-remove\n\n\n\nEverything is tested with Python 3.7 on Ubuntu 18.04, but there is no reason it shouldn't also work for Windows.\n\n\n\nYou can install this package through pip:\n\n\n\n.. code-block:: bash\n\n\n\n    pip install humpack\n\n\n\nAlternatively, you can clone this repo and install the local version for development:\n\n\n\n.. code-block:: bash\n\n\n\n    git clone https://github.com/felixludos/HumPack\n\n    pip install -e ./HumPack\n\n\n\n.. end-install-marker-do-not-remove\n\n\n\n\n\nQuick Start\n\n===========\n\n\n\n.. quickstart-marker-do-not-remove\n\n\n\n\n\n\n\nContainers\n\n----------\n\n\n\nThe provided containers: :py:`tdict`, :py:`tlist`, and :py:`tset` serve as drop-in replacements for pythons :py:`dict`, :py:`list`, and :py:`set` types that are :py:`Transactionable` and :py:`Packable` (more info below). Furthermore, all keys in :py:`adict` that are valid attribute names, can be treated as attributes.\n\n\n\nA few examples:\n\n\n\n.. code-block:: python\n\n\n\n    from humpack import adict, tdict, tlist, tset\n\n    from humpack import json_pack, json_unpack\n\n    from humpack import AbortTransaction\n\n\n\n    d = adict({'apple':1, 'orange':10, 'pear': 3})\n\n    d.apple += 10\n\n    d.update({'non-det banana':tset({2,3,7}), 'orange': None})\n\n    del d.pear\n\n    assert d.apple == 11 and 2 in d['non-det banana'] and 'pear' not in d\n\n    options = tlist(d.keys())\n\n    options.sort()\n\n    first = options[0]\n\n    assert first == 'apple'\n\n    d.order = options\n\n\n\n    json_d = json_pack(d)\n\n    assert isinstance(json_d, str)\n\n\n\n    d.begin() # starts a transaction (tracking all changes)\n\n    assert options.in_transaction()\n\n\n\n    d['non-det banana'].discard(7)\n\n    d.cherry = 4.2\n\n    assert 'cherry' in d and len(d['non-det banana']) == 2\n\n    d['order'].extend(['grape', 'lemon', 'apricot'])\n\n    assert 'grape' in options\n\n    del d.order[0]\n\n    del d['orange']\n\n    d.order.sort()\n\n    assert options[0] == 'apricot'\n\n\n\n    d.abort()\n\n    assert 'cherry' not in d and 7 in d['non-det banana']\n\n    assert 'grape' not in options\n\n\n\n    with d:\n\n        assert d['non-det banana'].in_transaction()\n\n        d.clear()\n\n        assert len(d) == 0\n\n        d.melon = 100j\n\n        assert 'melon' in d and d['melon'].real == 0\n\n        raise AbortTransaction\n\n\n\n    assert 'melon' not in d\n\n\n\n    assert json_pack(d) == json_d\n\n    assert sum(d['non-det banana']) == sum(json_unpack(json_d)['non-det banana'])\n\n\n\n    with d:\n\n        assert 'cherry' not in d\n\n        d.cherry = 5\n\n        # automatically commits transaction on exiting the context if no exception is thrown\n\n\n\n    assert 'cherry' in d\n\n\n\nWhen starting with data in standard python, it can be converted to using the \"t\" series counter parts using :py:`containerify`.\n\n\n\n.. code-block:: python\n\n\n\n    from humpack import containerify\n\n    from humpack import AbortTransaction\n\n\n\n    x = {'one': 1, 1:2, None: ['hello', 123j, {1,3,4,5}]}\n\n\n\n    d = containerify(x)\n\n\n\n    assert len(x) == len(d)\n\n    assert len(x[None]) == len(d[None])\n\n    assert x['one'] == d.one\n\n    with d:\n\n        assert d[None][-1].in_transaction()\n\n        del d.one\n\n        d.two = 2\n\n        d[None][-1].add(1000)\n\n        assert d['two'] == 2 and 'one' not in d and sum(d[None][-1]) > 1000\n\n        raise AbortTransaction\n\n    assert 1000 not in d[None][-1] and 'one' in d and 'two' not in d\n\n\n\nFinally, there are a few useful containers which don't have explicit types in standard python are also provided including heaps and stacks: :py:`theap` and :py:`tstack`.\n\n\n\n\n\nPacking (serialization)\n\n-----------------------\n\n\n\nTo serializing an object into a human-readable, json compliant format, this library implements packing and unpacking. When an object is packed, it can still be read (and manipulated, although that not recommended), converted to a valid json string, or encrypted/decrypted (see the Security section below). However for an obejct to be packable it and all of it's submembers (recursively) must either be primitives (:py:`int`, :py:`float`, :py:`str`, :py:`bool`, :py:`None`) or registered as a :py:`Packable`, which can be done\n\n\n\nPacking and unpacking is primarily done using the :py:`pack` and :py:`unpack` functions, however, several higher level functions are provided to combine packing and unpacking with other common features in object serialization. For custom classes to be :py:`Packable`, they must implement three methods: :py:`__pack__`, :py:`__create__`, :py:`__unpack__` (for more info see the documentation for :py:`Packable`). When implementing these methods, all members of the objects that should be packed/unpacked, must use :py:`pack_member` and :py:`unpack_member` to avoid reference loops.\n\n\n\n.. code-block:: python\n\n\n\n    from humpack import pack, unpack\n\n\n\n    x = {'one': 1, 1:2, None: ['hello', 123j, {1,3,4,5}]}\n\n\n\n    p = pack(x) # several standard python types are already packable\n\n    assert isinstance(p, dict)\n\n    deepcopy_x = unpack(p)\n\n    assert repr(x) == repr(deepcopy_x)\n\n\n\n    from humpack import json_pack, json_unpack # Convert to/from json string\n\n\n\n    j = json_pack(x)\n\n    assert isinstance(j, str)\n\n    deepcopy_x = json_unpack(j)\n\n    assert repr(x) == repr(deepcopy_x)\n\n\n\n\n\n    from humpack import save_pack, load_pack # Save/load packed object to disk as json file\n\n    import os, tempfile\n\n\n\n    fd, path = tempfile.mkstemp()\n\n    try:\n\n        with open(path, 'w') as tmp:\n\n            save_pack(x, tmp)\n\n        with open(path, 'r') as tmp:\n\n            deepcopy_x = load_pack(tmp)\n\n    finally:\n\n        os.remove(path)\n\n    assert repr(x) == repr(deepcopy_x)\n\n\n\n\n\nFor examples of how to any types can registered to be :py:`Packable` or objects can be wrapped in :py:`Packable` wrappers, see the :code:`humpack/common.py` and :code:`humpack/wrappers.py` scripts.\n\n\n\nTransactions\n\n------------\n\n\n\nFor examples of how :code:`Transactionable` objects behave see the \"Containers\" section above.\n\n\n\nTo enable transactions for a class, it must be a subclass of :code:`Transactionable` and implement the four required functions: :code:`begin`, :code:`in_transaction`, :code:`commit`, and :code:`abort`. Assuming these functions are implemented as specified (see documentation), you can manipulate instances of these classes in a transaction and then roll back all the changes by aborting the transaction.\n\n\n\nOne important thing to note with subclassing :code:`Transactionable`: any members of instances of :code:`Transactionable` subclasses should be checked for if they are also :code:`Transactionable`, and if so, they the call should be delegated. In the example below, :code:`Account` has to take into account that its attribute :code:`user` could be :code:`Transactionable`.\n\n\n\n.. code-block:: python\n\n\n\n    from humpack import Transactionable\n\n\n\n    class Account(Transactionable):\n\n        def __init__(self, user, balance=0.):\n\n            super().__init__()\n\n            self._in_transaction = False\n\n            self._shadow_user = None\n\n\n\n            self.user = user\n\n            self.balance = balance\n\n\n\n        def change(self, delta):\n\n\n\n            if self.balance + delta < 0.:\n\n                raise ValueError\n\n            self.balance += delta\n\n\n\n        def begin(self):\n\n            # FIRST: begin the transaction in self\n\n            self._shadow_user = self.user.copy(), self.balance # Assuming `user` can be shallow copied with `copy()`\n\n            self._in_transaction = True\n\n\n\n            # THEN: begin transactions in any members that are Transactionable\n\n            if isinstance(self.user, Transactionable):\n\n                self.user.begin()\n\n\n\n            # To be extra safe, you could also check `self.balance`, but we'll assume it's always a primitive (eg. float)\n\n\n\n        def in_transaction(self):\n\n            return self._in_transaction\n\n\n\n        def commit(self):\n\n            # FIRST: commit the transaction in self\n\n            self._in_transaction = False\n\n            self._shadow_user = None\n\n\n\n            # THEN: commit transactions in any members that are Transactionable\n\n            if isinstance(self.user, Transactionable):\n\n                self.user.commit()\n\n\n\n        def abort(self):\n\n            # FIRST: abort the transaction in self\n\n            if self.in_transaction(): # Note that this call only has an effect if self was in a transaction.\n\n                self.user, self.balance = self._shadow_user\n\n\n\n            self._in_transaction = False\n\n            self._shadow_user = None\n\n\n\n            # THEN: abort transactions in any members that are Transactionable\n\n            if isinstance(self.user, Transactionable):\n\n                self.user.abort()\n\n\n\n\n\nOptionally, for a more pythonic implementation, you can use :py:`try`/:py:`except` statements instead of type checking with :py:`isinstance`.\n\n\n\nSecurity\n\n--------\n\n\n\nThere are a few high-level cryptography routines. Nothing special, just meant to make integration in larger projects simple and smooth.\n\n\n\n.. end-quickstart-marker-do-not-remove\n\n\n\nTODO\n\n====\n\n\n\nFeatures that could be added/improved:\n\n\n\n- Enable simple conversion from containers to standard python (eg. decontainerify)\n\n- Add security functions to encrypt/decrypt files and directories (collecting/zipping contents in a tar)\n\n- Add Transactionable/Packable replacements for more standard python types (especially tuples)\n\n- Possibly add 1-2 tutorials\n\n- Write more comprehensive unit tests and report test coverage\n\n- Allow packing bound methods of Packable types\n\n- Add option to save class attributes\n\n\n\nContributions and suggestions are always welcome.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/felixludos/HumPack",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "humpack",
    "package_url": "https://pypi.org/project/humpack/",
    "platform": "",
    "project_url": "https://pypi.org/project/humpack/",
    "project_urls": {
      "Homepage": "https://github.com/felixludos/HumPack"
    },
    "release_url": "https://pypi.org/project/humpack/0.3.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Human Readable Object Serialization and more",
    "version": "0.3.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9351271,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a034dbb99da3e325ecab4891994e8660a00404ecc7d81a0f305ca933407f06",
          "md5": "6685f43f7c4b6595007741de3767e72f",
          "sha256": "1585ad38f09f23ab602215ac447c01c9a2d7871b37c2ff197e45dbf3a38ddbad"
        },
        "downloads": -1,
        "filename": "humpack-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6685f43f7c4b6595007741de3767e72f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20299,
        "upload_time": "2020-02-14T17:26:14",
        "upload_time_iso_8601": "2020-02-14T17:26:14.178723Z",
        "url": "https://files.pythonhosted.org/packages/d9/a0/34dbb99da3e325ecab4891994e8660a00404ecc7d81a0f305ca933407f06/humpack-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a11f389c3ce5a55a5cb9c2f482abc696234441d1a93eb18523009fe085e8c31d",
          "md5": "4718bc04b55e92cca89cda2f907d62b5",
          "sha256": "7d9f6562902d04faff90d519e9dc74e4df3cfc614a1d655769f5a23057dcdb65"
        },
        "downloads": -1,
        "filename": "humpack-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4718bc04b55e92cca89cda2f907d62b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19831,
        "upload_time": "2020-02-14T17:26:16",
        "upload_time_iso_8601": "2020-02-14T17:26:16.984527Z",
        "url": "https://files.pythonhosted.org/packages/a1/1f/389c3ce5a55a5cb9c2f482abc696234441d1a93eb18523009fe085e8c31d/humpack-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f166e0ed16a469020ecfe238ae17e47c1378c8a31e7aabffc27f3010d57d9d9a",
          "md5": "7d0c2d071936f75e1b3199ab3264b54f",
          "sha256": "eae77d9b283d34dd89d9b72581d99822c9d4f6a3e81fda51862f78cf3666c2df"
        },
        "downloads": -1,
        "filename": "humpack-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d0c2d071936f75e1b3199ab3264b54f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21814,
        "upload_time": "2020-07-25T16:42:37",
        "upload_time_iso_8601": "2020-07-25T16:42:37.974784Z",
        "url": "https://files.pythonhosted.org/packages/f1/66/e0ed16a469020ecfe238ae17e47c1378c8a31e7aabffc27f3010d57d9d9a/humpack-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "844c23244cbad11f5aa00372afb54f044b013e0909304ef5651bd0a20a67cd12",
          "md5": "6c5b31760876a692f0e3d924b0acedcf",
          "sha256": "d3dc0b607edfc399f1e6df72edbde554876c5d0a3362f3349d9afa0ca0fae980"
        },
        "downloads": -1,
        "filename": "humpack-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c5b31760876a692f0e3d924b0acedcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21804,
        "upload_time": "2020-07-25T17:02:22",
        "upload_time_iso_8601": "2020-07-25T17:02:22.507647Z",
        "url": "https://files.pythonhosted.org/packages/84/4c/23244cbad11f5aa00372afb54f044b013e0909304ef5651bd0a20a67cd12/humpack-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48d66a222a87d5f2c4faaf7771e853d535ab1d704349563739532f36a70e1dac",
          "md5": "5683d2cf932e532e12d666131d582fe2",
          "sha256": "6b9b99eb143a443ed2b07e34b71f0fc8a0d7e2f67795f4d6f1f291b2b1a4f88c"
        },
        "downloads": -1,
        "filename": "humpack-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5683d2cf932e532e12d666131d582fe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21870,
        "upload_time": "2020-08-05T10:28:58",
        "upload_time_iso_8601": "2020-08-05T10:28:58.662539Z",
        "url": "https://files.pythonhosted.org/packages/48/d6/6a222a87d5f2c4faaf7771e853d535ab1d704349563739532f36a70e1dac/humpack-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14860d037c7ade58880f48aa9c440ef9cfc89e0bf3352e907b4b6d86d284056e",
          "md5": "19cdee606b33c10c41f6fc49f13e6c4e",
          "sha256": "de98d910e7916cd6259732bb31bf6c2ad47c0d65fb81a38c87a9c9f5c0ac9633"
        },
        "downloads": -1,
        "filename": "humpack-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19cdee606b33c10c41f6fc49f13e6c4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26973,
        "upload_time": "2020-10-11T11:46:20",
        "upload_time_iso_8601": "2020-10-11T11:46:20.781888Z",
        "url": "https://files.pythonhosted.org/packages/14/86/0d037c7ade58880f48aa9c440ef9cfc89e0bf3352e907b4b6d86d284056e/humpack-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c22c5b5e6cbe429b3c2c64f3505474eaa4b83dea3eb6f61e8af6c15edb9513eb",
          "md5": "d7b5f32b67e47df85228bf560702f8e8",
          "sha256": "073b3cdeb81c8c8890bfaae69637e2308a0a87e542556353f6dfb55a999c2c4a"
        },
        "downloads": -1,
        "filename": "humpack-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d7b5f32b67e47df85228bf560702f8e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27766,
        "upload_time": "2021-02-02T16:20:40",
        "upload_time_iso_8601": "2021-02-02T16:20:40.028337Z",
        "url": "https://files.pythonhosted.org/packages/c2/2c/5b5e6cbe429b3c2c64f3505474eaa4b83dea3eb6f61e8af6c15edb9513eb/humpack-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "539cc372f9fdc86bb217857d35c18358874f60ab4ca73b9b0125edf2c2c7aadf",
          "md5": "07de7ba9521b684389a6e66e51e197c6",
          "sha256": "391b51231c265d73a3a56b04a57c7092f2a565365d892307c00b6b1552c097da"
        },
        "downloads": -1,
        "filename": "humpack-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "07de7ba9521b684389a6e66e51e197c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27761,
        "upload_time": "2021-02-07T19:49:13",
        "upload_time_iso_8601": "2021-02-07T19:49:13.329839Z",
        "url": "https://files.pythonhosted.org/packages/53/9c/c372f9fdc86bb217857d35c18358874f60ab4ca73b9b0125edf2c2c7aadf/humpack-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "add26f7333a83908f05e8d9ea22e22323e39a9eb86be52195377819b9ebae676",
          "md5": "76aaefbe3d619d909d14bee404ba6e99",
          "sha256": "8c45e382c416ddc8187a58f38b925cb2a8e3d751ef466ba6970e96b32812136f"
        },
        "downloads": -1,
        "filename": "humpack-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "76aaefbe3d619d909d14bee404ba6e99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27904,
        "upload_time": "2021-02-08T12:40:43",
        "upload_time_iso_8601": "2021-02-08T12:40:43.903222Z",
        "url": "https://files.pythonhosted.org/packages/ad/d2/6f7333a83908f05e8d9ea22e22323e39a9eb86be52195377819b9ebae676/humpack-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "add26f7333a83908f05e8d9ea22e22323e39a9eb86be52195377819b9ebae676",
        "md5": "76aaefbe3d619d909d14bee404ba6e99",
        "sha256": "8c45e382c416ddc8187a58f38b925cb2a8e3d751ef466ba6970e96b32812136f"
      },
      "downloads": -1,
      "filename": "humpack-0.3.4.tar.gz",
      "has_sig": false,
      "md5_digest": "76aaefbe3d619d909d14bee404ba6e99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 27904,
      "upload_time": "2021-02-08T12:40:43",
      "upload_time_iso_8601": "2021-02-08T12:40:43.903222Z",
      "url": "https://files.pythonhosted.org/packages/ad/d2/6f7333a83908f05e8d9ea22e22323e39a9eb86be52195377819b9ebae676/humpack-0.3.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}