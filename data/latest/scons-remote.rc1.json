{
  "info": {
    "author": "Daniel Molitor",
    "author_email": "connect@ripl.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: Free for non-commercial use",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# scons-remote\r\nThe goal of **scons-remote** is to extend the SCons build tool to support building targets \r\nin remote compute environments (via AWS EC2). Because **scons-remote** is built entirely on \r\nbase SCons classes, it achieves this goal while maintaining the robustness/flexibility of \r\nstandard SCons builds.\r\n\r\n## Installation\r\n```\r\npip install scons-remote\r\n```\r\n\r\n## Usage\r\nThe primary contribution of **scons-remote** is the `EnvironmentRemote` class \r\nwhich is built on top of the base SCons `Environment` class. This class\r\nimplements a remote extension of the base `Command` method as well as\r\nmethods/attributes to manage the remote execution environment and how targets\r\nare built within it.\r\n\r\n### Initializing Remote Connection\r\nIn order to correctly instantiate a remote compute node via AWS EC2\r\nwe need to initialize the connection parameters at the beginning of\r\nthe `SConstruct` script.\r\n\r\nThe `connection_initialize` method allows us to do this via the\r\nfollowing arguments:\r\n- *__client_args__*: A dictionary of arguments that is passed verbatim to\r\n[`boto3.client`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html#boto3.session.Session.client)\r\nto create an EC2 client.\r\n- *__instance_args__*: A dictionary of arguments that is passed verbatim to\r\nthe client's [`run_instances`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.run_instances)\r\nmethod.\r\n- *__ssh_args__*: A dictionary of arguments that is passed verbatim to\r\n[`fabric.connection.Connection`](https://docs.fabfile.org/en/2.6/api/connection.html).\r\n\r\nThe following shows how a simple remote configuration might be initialized\r\nin the `SConstruct` script:\r\n```python\r\nimport os\r\nfrom scons_remote.environment_remote import EnvironmentRemote\r\n\r\nenv = EnvironmentRemote(ENV=os.environ)\r\n\r\nclient_args = {\r\n    'region_name': 'us-west-2'\r\n}\r\n\r\ninstance_args = {\r\n    'ImageId': 'ami-xxxxxxxxxx',\r\n    'InstanceType': 't2.large',\r\n    'KeyName': 'xxxxxxx',\r\n    'MaxCount': 1,\r\n    'MinCount': 1,\r\n    'InstanceInitiatedShutdownBehavior': 'terminate'\r\n}\r\n\r\nssh_args = {\r\n    'user': 'ubuntu',\r\n    'connect_kwargs': {\r\n        'key_filename': 'path/to/private/key.pem'\r\n    }\r\n}\r\n\r\nenv.connection_initialize(client_args, instance_args, ssh_args)\r\n```\r\n\r\n### Building Targets Remotely\r\nThe base SCons `Environment.Command` method provides a flexible way of building \r\ntargets using generic commands. The general formatting of building a target with\r\n`Command` would look something like the following:\r\n```python\r\nimport os\r\n\r\nenv=Environment(ENV=os.environ)\r\n\r\nenv.Command(\r\n    target='foo.bar',\r\n    source='foo_bar.py',\r\n    action='python $SOURCES $TARGETS'\r\n)\r\n```\r\n\r\nTranslating the prior chunk to build the target using **scons-remote** would be quite simple:\r\n```python\r\nimport os\r\nfrom scons_remote.environment_remote import EnvironmentRemote\r\n\r\nenv=EnvironmentRemote(ENV=os.environ)\r\n\r\nenv.CommandRemote(\r\n    target='foo.bar',\r\n    source='foo_bar.py',\r\n    action=env.ActionRemote(cmd='python')\r\n)\r\n```\r\nThe only substantive difference between these two methods of building targets is that\r\n`CommandRemote` requires that the specified action is created using the environment's\r\n`ActionRemote` method whereas the base `Command` method accepts a string or a callable Python object.\r\n\r\n### Remote Actions\r\nConstructing a remote action is straightforward; `ActionRemote` accepts the following arguments:\r\n- *__cmd__*: A string specifying the command to execute\r\n- *__cmd_args__*: A string or list of strings specifying command line arguments\r\nto be passed to `cmd`.\r\n\r\nFor example, consider the following action passed to `Command`:\r\n```python\r\nenv.Command(\r\n    ...\r\n    action='python3 -B -v $SOURCES $TARGETS'\r\n)\r\n```\r\nThe same action translated for `CommandRemote` would be:\r\n```python\r\nenv.CommandRemote(\r\n    ...\r\n    action=env.ActionRemote(cmd='python3', cmd_args=['-B', '-v'])\r\n)\r\n```\r\n\r\n### Full SConstruct Example\r\nCombining the initialization step and the target building step described above, the full `SConstruct`\r\nscript for building `foo.bar` would look as follows:\r\n```python\r\nimport os\r\nfrom scons_remote.environment_remote import EnvironmentRemote\r\n\r\nenv = EnvironmentRemote(ENV=os.environ)\r\n\r\nclient_args = {\r\n    'region_name': 'us-west-2'\r\n}\r\n\r\ninstance_args = {\r\n    'ImageId': 'ami-xxxxxxxxxx',\r\n    'InstanceType': 't2.large',\r\n    'KeyName': 'xxxxxxx',\r\n    'MaxCount': 1,\r\n    'MinCount': 1,\r\n    'InstanceInitiatedShutdownBehavior': 'terminate'\r\n}\r\n\r\nssh_args = {\r\n    'user': 'ubuntu',\r\n    'connect_kwargs': {\r\n        'key_filename': 'path/to/private/key.pem'\r\n    }\r\n}\r\n\r\nenv.connection_initialize(client_args, instance_args, ssh_args)\r\n\r\nenv.CommandRemote(\r\n    target='foo.bar',\r\n    source='foo_bar.py',\r\n    action=env.ActionRemote(cmd='python')\r\n)\r\n```\r\nAnd voilà, the target has been built via AWS!\r\n\r\n### Force Targets to be Built Locally\r\nIn some cases it may be convenient to create an `SConstruct` file that invokes `CommandRemote` but still have\r\nthe ability to force all targets to be built locally. To accomodate this, **scons-remote** respects the\r\n`SCONS_REMOTE_MODE` environment variable set to *'local'*. If this variable is unset or any other value,\r\n**scons-remote** will simply ignore it.\r\n\r\nTo set this in Linux enter the following:\r\n```shell\r\nexport SCONS_REMOTE_MODE=local\r\n```\r\nAnd in PowerShell:\r\n```ps1\r\n$env:SCONS_REMOTE_MODE=\"local\"\r\n```\r\n\r\n## ⚠️Known Issues/Shortcomings⚠️\r\nThe following is a short list of known issues/shortcomings when using **scons-remote** (more will probably surface):\r\n- *__AWS Credentials Timeout__*: If your AWS credentials that are being passed to boto3 are of the\r\nexpiring-after-one-hour variety, long-running pipelines (greater than one hour) will lose the ability to manage\r\nAWS resources and will error out if any targets are attempted to be built after that point. However, any targets\r\nthat are already building should continue their build successfully.\r\n- *__Forcing Targets to Build Locally__*: Say you have forced all targets to be built locally (as described above).\r\nWhen you unset the `SCONS_REMOTE_MODE` environment variable, SCons will not recognize the targets as already\r\nbuilt and will re-build them remotely. This is because, under the hood, **scons-remote** is using two different\r\nbuilder actions which SCons recognizes and instructs that the targets be re-built. The converse action (switching\r\nfrom remote to local) will have the same behavior.\r\n- *__Matching Local and Remote Compute Environments__*: Currently **scons-remote** does no checking of the remote\r\ncompute environment to ensure that it has the necessary dependencies/tools required to successfully build the targets.\r\nThis falls entirely on the user to ensure that their AMI is compatible with their use-case.\r\n\r\n## Contributors\r\n- Daniel Molitor\r\n- Mark Howison\r\n\r\n## License\r\n**scons-remote** is freely available for non-commercial use under the license provided in LICENSE. To inquire about commercial use, please contact connect@ripl.org.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ripl-org/scons-remote",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scons-remote",
    "package_url": "https://pypi.org/project/scons-remote/",
    "platform": null,
    "project_url": "https://pypi.org/project/scons-remote/",
    "project_urls": {
      "Homepage": "https://github.com/ripl-org/scons-remote"
    },
    "release_url": "https://pypi.org/project/scons-remote/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Extends SCons to build targets in remote environments.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14352453,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ad607f0f930c7e570832690e6bbacf7d360f16020fc735ebe4793f28722e3fd",
          "md5": "1ec6a46500b60de0a4c58fa5b5ab269d",
          "sha256": "f387a019d1d64b30beaeeaf1e3c2e500b1a9a245428b1d2e1a0dd3ea4525c355"
        },
        "downloads": -1,
        "filename": "scons_remote-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ec6a46500b60de0a4c58fa5b5ab269d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9301,
        "upload_time": "2022-07-06T14:01:37",
        "upload_time_iso_8601": "2022-07-06T14:01:37.549164Z",
        "url": "https://files.pythonhosted.org/packages/6a/d6/07f0f930c7e570832690e6bbacf7d360f16020fc735ebe4793f28722e3fd/scons_remote-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3740b6c488013c84c54ee78b1bc21118656c7e06e352a125ad6ddeb1da2d04f",
          "md5": "6328b6da7d4a547d107b06f8b77c6058",
          "sha256": "ae97216adb580febbfd6188c71ed84dcdef9bf48051ad89eb91e0a582a8b118e"
        },
        "downloads": -1,
        "filename": "scons-remote-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6328b6da7d4a547d107b06f8b77c6058",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10413,
        "upload_time": "2022-07-06T14:01:24",
        "upload_time_iso_8601": "2022-07-06T14:01:24.114604Z",
        "url": "https://files.pythonhosted.org/packages/e3/74/0b6c488013c84c54ee78b1bc21118656c7e06e352a125ad6ddeb1da2d04f/scons-remote-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ad607f0f930c7e570832690e6bbacf7d360f16020fc735ebe4793f28722e3fd",
        "md5": "1ec6a46500b60de0a4c58fa5b5ab269d",
        "sha256": "f387a019d1d64b30beaeeaf1e3c2e500b1a9a245428b1d2e1a0dd3ea4525c355"
      },
      "downloads": -1,
      "filename": "scons_remote-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1ec6a46500b60de0a4c58fa5b5ab269d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9301,
      "upload_time": "2022-07-06T14:01:37",
      "upload_time_iso_8601": "2022-07-06T14:01:37.549164Z",
      "url": "https://files.pythonhosted.org/packages/6a/d6/07f0f930c7e570832690e6bbacf7d360f16020fc735ebe4793f28722e3fd/scons_remote-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3740b6c488013c84c54ee78b1bc21118656c7e06e352a125ad6ddeb1da2d04f",
        "md5": "6328b6da7d4a547d107b06f8b77c6058",
        "sha256": "ae97216adb580febbfd6188c71ed84dcdef9bf48051ad89eb91e0a582a8b118e"
      },
      "downloads": -1,
      "filename": "scons-remote-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6328b6da7d4a547d107b06f8b77c6058",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10413,
      "upload_time": "2022-07-06T14:01:24",
      "upload_time_iso_8601": "2022-07-06T14:01:24.114604Z",
      "url": "https://files.pythonhosted.org/packages/e3/74/0b6c488013c84c54ee78b1bc21118656c7e06e352a125ad6ddeb1da2d04f/scons-remote-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}