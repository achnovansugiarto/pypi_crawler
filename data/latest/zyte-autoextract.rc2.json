{
  "info": {
    "author": "Mikhail Korobov",
    "author_email": "kmike84@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "================\nzyte-autoextract\n================\n\n.. image:: https://img.shields.io/pypi/v/zyte-autoextract.svg\n   :target: https://pypi.python.org/pypi/zyte-autoextract\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/pypi/pyversions/zyte-autoextract.svg\n   :target: https://pypi.python.org/pypi/zyte-autoextract\n   :alt: Supported Python Versions\n\n.. image:: https://github.com/zytedata/zyte-autoextract/workflows/tox/badge.svg\n   :target: https://github.com/zytedata/zyte-autoextract/actions\n   :alt: Build Status\n\n.. image:: https://codecov.io/github/zytedata/zyte-autoextract/coverage.svg?branch=master\n   :target: https://codecov.io/gh/zytedata/zyte-autoextract\n   :alt: Coverage report\n\nPython client libraries for `Zyte Automatic Extraction API`_.\nIt allows to extract product, article, job posting, etc.\ninformation from any website - whatever the API supports.\n\nCommand-line utility, asyncio-based library and a simple synchronous wrapper\nare provided by this package.\n\nLicense is BSD 3-clause.\n\n.. _Zyte Automatic Extraction API: https://www.zyte.com/data-extraction/\n\n\nInstallation\n============\n\n::\n\n    pip install zyte-autoextract\n\nzyte-autoextract requires Python 3.6+ for CLI tool and for\nthe asyncio API; basic, synchronous API works with Python 3.5.\n\nUsage\n=====\n\nFirst, make sure you have an API key. To avoid passing it in ``api_key``\nargument with every call, you can set ``ZYTE_AUTOEXTRACT_KEY``\nenvironment variable with the key.\n\nCommand-line interface\n----------------------\n\nThe most basic way to use the client is from a command line.\nFirst, create a file with urls, an URL per line (e.g. ``urls.txt``).\nSecond, set ``ZYTE_AUTOEXTRACT_KEY`` env variable with your\nZyte Automatic Extraction API key (you can also pass API key as ``--api-key`` script\nargument).\n\nThen run a script, to get the results::\n\n    python -m autoextract urls.txt --page-type article --output res.jl\n\n.. note::\n    The results can be stored in an order which is different from the input\n    order. If you need to match the output results to the input URLs, the\n    best way is to use ``meta`` field (see below); it is passed through,\n    and returned as-is in ``row[\"query\"][\"userQuery\"][\"meta\"]``.\n\nIf you need more flexibility, you can customize the requests by creating\na JsonLines file with queries: a JSON object per line. You can pass any\nZyte Automatic Extraction options there. Example - store it in ``queries.jl`` file::\n\n    {\"url\": \"http://example.com\", \"meta\": \"id0\", \"articleBodyRaw\": false}\n    {\"url\": \"http://example.com/foo\", \"meta\": \"id1\", \"articleBodyRaw\": false}\n    {\"url\": \"http://example.com/bar\", \"meta\": \"id2\", \"articleBodyRaw\": false}\n\nSee `API docs`_ for a description of all supported parameters in these query\ndicts. API docs mention batch requests and their limitation\n(no more than 100 queries at time); these limits don't apply to the queries.jl\nfile (i.e. it may have millions of rows), as the command-line script does\nits own batching.\n\n.. _API docs: https://docs.zyte.com/automatic-extraction.html\n\nNote that in the example ``pageType`` argument is omitted; ``pageType``\nvalues are filled automatically from ``--page-type`` command line argument\nvalue. You can also set a different ``pageType`` for a row in ``queries.jl``\nfile; it has a priority over ``--page-type`` passed in cmdline.\n\nTo get results for this ``queries.jl`` file, run::\n\n    python -m autoextract --intype jl queries.jl --page-type article --output res.jl\n\nProcessing speed\n~~~~~~~~~~~~~~~~\n\nEach API key has a limit on RPS. To get your URLs processed faster you can\ntune concurrency options: batch size and a number of connections.\n\nBest options depend on the RPS limit and on websites you're extracting\ndata from. For example, if your API key has a limit of 3RPS, and average\nresponse time you observe for your websites is 10s, then to get to these\n3RPS you may set e.g. batch size = 2, number of connections = 15 - this\nwould allow to process 30 requests in parallel.\n\nTo set these options in the CLI, use ``--n-conn`` and ``--batch-size``\narguments::\n\n    python -m autoextract urls.txt --page-type articles --n-conn 15 --batch-size 2 --output res.jl\n\nIf too many requests are being processed in parallel, you'll be getting\nthrottling errors. They are handled by CLI automatically, but they make\nextraction less efficient; please tune the concurrency options to\nnot hit the throttling errors (HTTP 429) often.\n\nYou may be also limited by the website speed. Zyte Automatic Extraction tries not to hit\nany individual website too hard, but it could be better to limit this on\na client side as well. If you're extracting data from a single website,\nit could make sense to decrease the amount of parallel requests; it can ensure\nhigher success ratio overall.\n\nIf you're extracting data from multiple websites, it makes sense to spread the\nload across time: if you have websites A, B and C, don't send requests in\nAAAABBBBCCCC order, send them in ABCABCABCABC order instead.\n\nTo do so, you can change the order of the queries in your input file.\nAlternatively, you can pass ``--shuffle`` options; it randomly shuffles\ninput queries before sending them to the API:\n\n    python -m autoextract urls.txt --shuffle --page-type articles --output res.jl\n\nRun ``python -m autoextract --help`` to get description of all supported\noptions.\n\nErrors\n~~~~~~\n\nThe following errors could happen while making requests:\n\n- Network errors\n- `Request-level errors`_\n    - Authentication failure\n    - Malformed request\n    - Too many queries in request\n    - Request payload size is too large\n- `Query-level errors`_\n    - Downloader errors\n    - Proxy errors\n    - ...\n\nSome errors can be retried while others can't.\n\nFor example,\nyou can retry a query with a Proxy Timeout error\nbecause this is a temporary error\nand there are chances that this response will be different\nwithin the next retries.\n\nOn the other hand,\nit makes no sense to retry queries that return a 404 Not Found error\nbecause the response is not supposed to change if retried.\n\n.. _Request-level errors: https://docs.zyte.com/automatic-extraction.html#request-level\n.. _Query-level errors: https://docs.zyte.com/automatic-extraction.html#query-level\n\nRetries\n~~~~~~~\n\nBy default, we will automatically retry Network and Request-level errors.\nYou could also enable Query-level errors retries\nby specifying the ``--max-query-error-retries`` argument.\n\nEnable Query-level retries to increase the success rate\nat the cost of more requests being performed\nif you are interested in a higher success rate.\n\n.. code-block::\n\n    python -m autoextract urls.txt --page-type articles --max-query-error-retries 3 --output res.jl\n\nFailing queries are retried\nuntil the max number of retries or a timeout is reached.\nIf it's still not possible to fetch all queries without errors,\nthe last available result is written to the output\nincluding both queries with success and the ones with errors.\n\nSynchronous API\n---------------\n\nSynchronous API provides an easy way to try Zyte Automatic Extraction.\nFor production usage asyncio API is strongly recommended. Currently the\nsynchronous API doesn't handle throttling errors, and has other limitations;\nit is most suited for quickly checking extraction results for a few URLs.\n\nTo send a request, use ``request_raw`` function; consult with the\n`API docs`_ to understand how to populate the query::\n\n    from autoextract.sync import request_raw\n    query = [{'url': 'http://example.com.foo', 'pageType': 'article'}]\n    results = request_raw(query)\n\nNote that if there are several URLs in the query, results can be returned in\narbitrary order.\n\nThere is also a ``autoextract.sync.request_batch`` helper, which accepts URLs\nand page type, and ensures results are in the same order as requested URLs::\n\n    from autoextract.sync import request_batch\n    urls = ['http://example.com/foo', 'http://example.com/bar']\n    results = request_batch(urls, page_type='article')\n\n.. note::\n    Currently request_batch is limited to 100 URLs at time only.\n\nasyncio API\n-----------\n\nBasic usage is similar to the sync API (``request_raw``),\nbut asyncio event loop is used::\n\n    from autoextract.aio import request_raw\n\n    async def foo():\n        query = [{'url': 'http://example.com.foo', 'pageType': 'article'}]\n        results1 = await request_raw(query)\n        # ...\n\nThere is also ``request_parallel_as_completed`` function, which allows\nto process many URLs in parallel, using both batching and multiple\nconnections::\n\n    import sys\n    from autoextract.aio import request_parallel_as_completed, create_session\n    from autoextract import ArticleRequest\n\n    async def extract_from(urls):\n        requests = [ArticleRequest(url) for url in urls]\n        async with create_session() as session:\n            res_iter = request_parallel_as_completed(requests,\n                                        n_conn=15, batch_size=2,\n                                        session=session)\n            for fut in res_iter:\n                try:\n                    batch_result = await fut\n                    for res in batch_result:\n                        # do something with a result, e.g.\n                        print(json.dumps(res))\n                except RequestError as e:\n                    print(e, file=sys.stderr)\n                    raise\n\n``request_parallel_as_completed`` is modelled after ``asyncio.as_completed``\n(see https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed),\nand actually uses it under the hood.\n\nNote ``from autoextract import ArticleRequest`` and its usage in the\nexample above. There are several Request helper classes,\nwhich simplify building of the queries.\n\n``request_parallel_as_completed`` and ``request_raw`` functions handle\nthrottling (http 429 errors) and network errors, retrying a request in\nthese cases.\n\nCLI interface implementation (``autoextract/__main__.py``) can serve\nas an usage example.\n\nRequest helpers\n---------------\n\nTo query Zyte Automatic Extraction you need to create a dict with request parameters, e.g.::\n\n    {'url': 'http://example.com.foo', 'pageType': 'article'}\n\nTo simplify the library usage and avoid typos, zyte-autoextract\nprovides helper classes for constructing these dicts::\n\n* autoextract.Request\n* autoextract.ArticleRequest\n* autoextract.ProductRequest\n* autoextract.JobPostingRequest\n\nYou can pass instances of these classes instead of dicts everywhere when\nrequests dicts are accepted. So e.g. instead of writing this::\n\n    query = [{\"url\": url, \"pageType\": \"article\"} for url in urls]\n\nYou can write this::\n\n    query = [Request(url, pageType=\"article\") for url in urls]\n\nor this::\n\n    query = [ArticleRequest(url) for url in urls]\n\nThere is one difference: ``articleBodyRaw`` parameter is set to ``False``\nby default when Request or its variants are used, while it is ``True``\nby default in the API.\n\nYou can override API params passing a dictionary with extra data using the\n``extra`` argument. Note that it will overwrite any previous configuration\nmade using standard attributes like ``articleBodyRaw`` and ``fullHtml``.\n\nExtra parameters example::\n\n    request = ArticleRequest(\n        url=url,\n        fullHtml=True,\n        extra={\n            \"customField\": \"custom value\",\n            \"fullHtml\": False\n        }\n    )\n\nThis will generate a query that looks like this::\n\n    {\n        \"url\": url,\n        \"pageType\": \"article\",\n        \"fullHtml\": False,  # our extra parameter overrides the previous value\n        \"customField\": \"custom value\"  # not a default param but defined even then\n    }\n\n\nContributing\n============\n\n* Source code: https://github.com/zytedata/zyte-autoextract\n* Issue tracker: https://github.com/zytedata/zyte-autoextract/issues\n\nUse tox_ to run tests with different Python versions::\n\n    tox\n\nThe command above also runs type checks; we use mypy.\n\n.. _tox: https://tox.readthedocs.io\n\n\nChanges\n=======\n\n0.7.1 (2021-11-24)\n------------------\n\n* --disable-cert-validation option to disable TSL certificates validation.\n\n0.7.0 (2021-02-10)\n------------------\n\nUpdate to accommodate upstream rebranding changes, as Scrapinghub has become\nZyte.\n\nThis update involves some major changes:\n\n-   The repository name and the package name in the Python Package Index have\n    changed from ``scrapinghub-autoextract`` to ``zyte-autoextract``.\n\n-   The ``SCRAPINGHUB_AUTOEXTRACT_KEY`` environment variable has been renamed\n    to ``ZYTE_AUTOEXTRACT_KEY``.\n\n0.6.1 (2021-01-27)\n------------------\n\n* fixed ``max_retries`` behaviour. Total attempts must be max_retries + 1\n\n0.6.0 (2020-12-29)\n------------------\n\n* CLI changes: error display in the progress bar is changed;\n  summary is printed after the executions\n* more errors are retried when retrying is enabled, which allows for a higher\n  success rate\n* fixed tcp connection pooling\n* ``autoextract.aio.request_raw`` function allows to pass custom headers\n  to the API (not to remote websites)\n* ``autoextract.aio.request_raw`` now allows to customize the retry\n  behavior, via ``retrying`` argument\n* ``tenacity.RetryError`` is no longer raised by the library; concrete errors\n  are raised instead\n* Python 3.9 support\n* CI is moved from Travis to Github Actions\n\n0.5.2 (2020-11-27)\n------------------\n\n* ``QueryError`` is renamed to ``_QueryError``, as this is not an error\n  users of the library ever see.\n* Retrials were broken by having userAgent in the userQuery API output;\n  temporary workaround is added to make retrials work again.\n\n0.5.1 (2020-08-21)\n------------------\n\n* fix a problem that was preventing calls to ``request_raw`` when ``endpoint`` argument was ``None``\n\n0.5.0 (2020-08-21)\n------------------\n\n* add ``--api-endpoint`` option to the command line utility\n* improves documentation adding details about ``Request``'s extra parameters\n\n0.4.0 (2020-08-17)\n------------------\n\n``autoextract.Request`` helper class now allows to set arbitrary\nparameters for AutoExtract requests - they can be passed in ``extra`` argument.\n\n0.3.0 (2020-07-24)\n------------------\n\nIn this release retry-related features are added or improved.\nIt is now possible to fix some of the temporary errors\nby enabling query-level retries, and the default retry behavior is improved.\n\n* **backwards-incompatible**: autoextract.aio.ApiError is renamed\n  to autoextract.aio.RequestError\n* ``max_query_error_retries`` argument is added to\n  ``autoextract.aio.request_raw`` and\n  ``autoextract.aio.request_parallel_as_completed`` functions; it allows to\n  enable retries of temporary query-level errors returned by the API.\n* CLI: added ``--max-query-error-retries`` option to retry temporary\n  query-level errors.\n* HTTP 500 errors from server are retried now;\n* documentation and test improvements.\n\n0.2.0 (2020-04-15)\n------------------\n\n* asyncio API is rewritten, to simplify use in cases where passing meta\n  is required. ``autoextract.aio.request_parallel_as_completed`` is added,\n  ``autoextract.aio.request_parallel`` and ``autoextract.aio.request_batch``\n  are removed.\n* CLI: it now shows various stats: mean response and connect time,\n  % of throttling errors, % of network and other errors\n* CLI: new ``--intype jl`` option allows to process a .jl file\n  with arbitrary AutoExtract API queries\n* CLI: new ``--shuffle`` option allows to shuffle input data, to spread it\n  more evenly across websites.\n* CLI: it no longer exits on unrecoverable errors, to aid long-running\n  processing tasks.\n* retry logic is adjusted to handle network errors better.\n* ``autoextract.aio.request_raw`` and\n  ``autoextract.aio.request_parallel_as_completed`` functions provide an\n  interface to return statistics about requests made, including retries.\n* autoextract.Request, autoextract.ArticleRequest, autoextract.ProductRequest,\n  autoextract.JobPostingRequest helper classes\n* Documentation improvements.\n\n0.1.1 (2020-03-12)\n------------------\n\n* allow up to 100 elements in a batch, not up to 99\n* custom User-Agent header is added\n* Python 3.8 support is declared & tested\n\n0.1 (2019-10-09)\n----------------\n\nInitial release.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zytedata/zyte-autoextract",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zyte-autoextract",
    "package_url": "https://pypi.org/project/zyte-autoextract/",
    "platform": "",
    "project_url": "https://pypi.org/project/zyte-autoextract/",
    "project_urls": {
      "Homepage": "https://github.com/zytedata/zyte-autoextract"
    },
    "release_url": "https://pypi.org/project/zyte-autoextract/0.7.1/",
    "requires_dist": [
      "requests",
      "attrs",
      "runstats",
      "tenacity ; python_version >= \"3.6\"",
      "aiohttp (>=3.6.0) ; python_version >= \"3.6\"",
      "tqdm ; python_version >= \"3.6\""
    ],
    "requires_python": "",
    "summary": "Python interface to Zyte Automatic Extraction API",
    "version": "0.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12111401,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80f0218c134e4bd2abb735c202b89a14d764c5134f04461f1b37e6113bb43afd",
          "md5": "b9625894b6aaec0954320fc56c0efceb",
          "sha256": "5da7c5a317103de92c590812fd06e50fa67f872a6e1451bb84e185aca448a95d"
        },
        "downloads": -1,
        "filename": "zyte_autoextract-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9625894b6aaec0954320fc56c0efceb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23776,
        "upload_time": "2021-03-02T17:05:21",
        "upload_time_iso_8601": "2021-03-02T17:05:21.693828Z",
        "url": "https://files.pythonhosted.org/packages/80/f0/218c134e4bd2abb735c202b89a14d764c5134f04461f1b37e6113bb43afd/zyte_autoextract-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4835e66e4b7b638c4d1f084a7463c812fe6e52db055f2d5502d85bc7694ed03a",
          "md5": "a3d0671e10fbdb5d5b9a3e91e2173bf8",
          "sha256": "65a3bbf29d5a691498187af3a14353f7ed91c4f6254f4578e55a44d677b41cae"
        },
        "downloads": -1,
        "filename": "zyte-autoextract-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a3d0671e10fbdb5d5b9a3e91e2173bf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30919,
        "upload_time": "2021-03-02T17:05:23",
        "upload_time_iso_8601": "2021-03-02T17:05:23.095977Z",
        "url": "https://files.pythonhosted.org/packages/48/35/e66e4b7b638c4d1f084a7463c812fe6e52db055f2d5502d85bc7694ed03a/zyte-autoextract-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76c0048c33628fdbe6bc325c01a95389db4d1e3d664fcff6bae7adb08e31bd5f",
          "md5": "7981cfbd05ecdef9c9f510b91639bfc8",
          "sha256": "60b9b6ffe806f7e49fa277a44d799b3f014e6338fa5baf4eaa4bbe93e71e339b"
        },
        "downloads": -1,
        "filename": "zyte_autoextract-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7981cfbd05ecdef9c9f510b91639bfc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24009,
        "upload_time": "2021-11-24T09:51:16",
        "upload_time_iso_8601": "2021-11-24T09:51:16.820880Z",
        "url": "https://files.pythonhosted.org/packages/76/c0/048c33628fdbe6bc325c01a95389db4d1e3d664fcff6bae7adb08e31bd5f/zyte_autoextract-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5111e93b389443dbc300699c4cbbd07832a9f924b08820733be56fe6e28cbe8",
          "md5": "42921edf7000c80fc9955780df58fdf4",
          "sha256": "4473b63105ff148f357bd401904fcac215504bb8cf78cf8ff08247fe5fab378e"
        },
        "downloads": -1,
        "filename": "zyte-autoextract-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "42921edf7000c80fc9955780df58fdf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29669,
        "upload_time": "2021-11-24T09:51:18",
        "upload_time_iso_8601": "2021-11-24T09:51:18.423525Z",
        "url": "https://files.pythonhosted.org/packages/f5/11/1e93b389443dbc300699c4cbbd07832a9f924b08820733be56fe6e28cbe8/zyte-autoextract-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76c0048c33628fdbe6bc325c01a95389db4d1e3d664fcff6bae7adb08e31bd5f",
        "md5": "7981cfbd05ecdef9c9f510b91639bfc8",
        "sha256": "60b9b6ffe806f7e49fa277a44d799b3f014e6338fa5baf4eaa4bbe93e71e339b"
      },
      "downloads": -1,
      "filename": "zyte_autoextract-0.7.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7981cfbd05ecdef9c9f510b91639bfc8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24009,
      "upload_time": "2021-11-24T09:51:16",
      "upload_time_iso_8601": "2021-11-24T09:51:16.820880Z",
      "url": "https://files.pythonhosted.org/packages/76/c0/048c33628fdbe6bc325c01a95389db4d1e3d664fcff6bae7adb08e31bd5f/zyte_autoextract-0.7.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5111e93b389443dbc300699c4cbbd07832a9f924b08820733be56fe6e28cbe8",
        "md5": "42921edf7000c80fc9955780df58fdf4",
        "sha256": "4473b63105ff148f357bd401904fcac215504bb8cf78cf8ff08247fe5fab378e"
      },
      "downloads": -1,
      "filename": "zyte-autoextract-0.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "42921edf7000c80fc9955780df58fdf4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29669,
      "upload_time": "2021-11-24T09:51:18",
      "upload_time_iso_8601": "2021-11-24T09:51:18.423525Z",
      "url": "https://files.pythonhosted.org/packages/f5/11/1e93b389443dbc300699c4cbbd07832a9f924b08820733be56fe6e28cbe8/zyte-autoextract-0.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}