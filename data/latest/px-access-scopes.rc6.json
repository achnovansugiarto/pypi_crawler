{
  "info": {
    "author": "Alex Tkachenko",
    "author_email": "preusx.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "# Access scopes\n\nUtility package for access scopes definition and checking.\n\n## Installation\n\n```sh\npip install px-access-scopes\n```\n\n## Usage\n\nDefining access scopes:\n\n`access_scopes.py`\n\n```python\nfrom px_access_scopes import ScopeRegistry, ScopeDomain, auto, raw\n\n# Creating root access scopes registry.\nroot = ScopeRegistry.create_root(ScopeDomain('TOKENS'))\n\n# Tokens can be any Enum or even a simple object.\n@root.nest('TOKENS')\nclass Tokens(Enum):\n  AUTO1 = auto\n  AUTO2 = auto\n  RAW = raw('RAW')\n  FIXED = 'SOME'\n\n@Tokens.nest('NESTED')\nclass Nested:\n  AUTO = auto\n  SOME = 'OTHER'\n```\n\nDefining scopes aggregates(roles):\n\n`access_aggregates.py`\n\n```python\nfrom px_access_scopes import Aggregates\n\nfrom .access_scopes import Tokens, Nested\n\n\nclass Roles(Aggregates):\n  Simple = Aggregate('Simple')\n  First = Aggregate('First')\n\nRoles.Simple.add(Tokens.RAW)\nRoles.First.add(Tokens.RAW)\nRoles.First.add(Nested.SOME)\n```\n\nRun checkers whenever you need:\n\n```python\nfrom px_access_scopes import (\n  ScopesCheckRunner, scopes_checker, aggregates_checker, HierarchyChecker,\n  domain_path_hierarchy_lookup,\n)\nfrom .access_scopes import Tokens, Nested\nfrom .access_aggregates import Roles\n\n# Defining a checker. The result is just a simple callable.\n# ScopesCheckRunner receives special checker runners list and evaluates them,\n# until it founds a match.\nchecker = ScopesCheckRunner((\n  HierarchyChecker((\n    scopes_checker,\n    aggregates_checker,\n  ), hierarchy_lookup=domain_path_hierarchy_lookup),\n))\n\nUSER1 = {'scopes': [Nested.AUTO]}\nUSER2 = {'scopes': [Nested.AUTO], 'aggregates': [Roles.Simple]}\nUSER3 = {'scopes': [Nested.AUTO], 'aggregates': [Roles.First]}\n\n# It receives scopes list and kwargs, that internal checkers need to make decision.\nchecker((Nested.AUTO,), **USER1) # > True\nchecker((Nested.SOME,), **USER1) # > False\n\nchecker((Tokens.RAW,), **USER2) # > True\nchecker((Tokens.RAW,), **USER3) # > True\n\nchecker((Nested.AUTO,), **USER3) # > True\nchecker((Nested.SOME,), **USER3) # > True\n```\n\n### Django\n\nRegistering scopes registries and access tokens aggregates.\n\nOn every `manage.py migrate` auth Permissions and Groups will be autogenerated based on registered definitions.\n\n`settings.py`\n\n```python\nPX_ACCESS_TOKENS_REGISTRIES = [\n  'access_scopes.staff_root',\n]\nPX_ACCESS_TOKENS_AGGREGATES = [\n  'access_scopes.Roles',\n]\n```\n\n`access_scopes.py`\n\n```python\nfrom django.utils.translation import pgettext_lazy\nfrom django.db.models.enums import TextChoices\n\n# Has it's own, a little bit improved for django implementations:\nfrom px_access_scopes.contrib.django import Aggregate, Aggregates, ScopeRegistry\n\n\nclass Roles(Aggregates):\n  # First parameter for any django aggregate is group identifier.\n  # Second is a key name, and the third one is an aggregate's verbose_name.\n  Admin = Aggregate(5000, 'Admin', pgettext_lazy('staff', 'Admin'))\n  Owner = Aggregate(4900, 'Owner', pgettext_lazy('staff', 'Owner'))\n  Reader = Aggregate(4800, 'Reader', pgettext_lazy('staff', 'Reader'))\n\n\nstaff_root = ScopeRegistry.create_root('STAFF', pgettext_lazy('staff', 'Staff'))\n\n\n# TextChoices is also a Enum, but with labels so better use a django-specific registry.\n@staff_root.nest('USERS', pgettext_lazy('staff', 'Users'))\nclass Users(TextChoices):\n  VIEW = 'VIEW', pgettext_lazy('staff', 'View')\n  CHANGE = 'CHANGE', pgettext_lazy('staff', 'Change')\n  CHANGE_OWN = 'CHANGE_OWN', pgettext_lazy('staff', 'Change own')\n  DISABLE = 'DISABLE', pgettext_lazy('staff', 'Disable')\n\n\nSHARED = {Users.CHANGE_OWN}\n\n\nRoles.Admin.update(\n  SHARED\n  | {Users.CHANGE, Users.VIEW, Users.DISABLE}\n)\nRoles.Owner.update(\n  SHARED\n  | {Users.CHANGE_OWN, Users.VIEW}\n)\nRoles.Reader.update(\n  SHARED\n)\n```\n\nAnd so now you may run a checker for any user. Internally django checker will use user's `.has_perm`. So this way administrators cay manage access for any user.\n\n```python\nfrom px_access_scopes import (\n  ScopesChecker, HierarchyChecker, ScopesCheckRunner,\n  MultiregistryHierarchyLookup\n)\nfrom px_access_scopes.contrib.django import ScopeDomain, user_checker\n# All registries, that you've registered in config\nfrom px_access_scopes.contrib.django.globals import registries\n\nfrom .access_scopes import Users\n\n\n# Simple checker here.\nchecker: ScopesChecker = ScopesCheckRunner((\n  HierarchyChecker(\n    # Django-specific checker that calls `user.has_perm`.\n    (user_checker,),\n    hierarchy_lookup=MultiregistryHierarchyLookup(\n      # This might be any registries, not default ones.\n      registries=registries\n    )\n  ),\n))\n\n\ndef my_view(request):\n  can = checker(\n    # `.permission` - is the django's permission string.\n    (User.CHANGE.permission,),\n    # User kwarg is required for `user_checker`.\n    user=request.user,\n  )\n\n  if not can:\n    raise ...\n  ...\n```\n\nFor an easier usage scope on frontend there is an export mechanics:\n\n```python\nfrom px_access_scopes.contrib.django.export import export_scopes\n```\n\nFunction `export_scopes` exports all scopes from all registered registries. It has two modes: shorter one `export_scopes(as_leaves=True)` and more verbose and full `export_scopes(as_leaves=False)`. It's for you to decide which one is preferable.\n\n### DRF\n\nFor django rest framework there are ready-to use permission classes.\n\nThey use the same checker mechanics as described above in django checking section.\n\n`some_views.py`\n\n```python\nfrom rest_framework.permissions import IsAuthenticated\n\nfrom .access_scopes import Users\n\n\nclass UserUpdateDestroyAPIView:\n  permission_classes = (\n    IsAuthenticated\n    &\n    (\n      # You may pass multiple scopes here.\n      # Checker will be evaluated only for passed methods.\n      # `methods` keyword is optional as by default it will check permission\n      # for every possible method.\n      ScopePermission.from_scopes(Users.VIEW, methods=('GET',))\n      |\n      ScopePermission.from_scopes(Users.CHANGE, methods=('PUT', 'PATCH))\n      |\n      ScopePermission.from_scopes(Users.CHANGE_OWN, methods=('PUT', 'PATCH))\n      |\n      ScopePermission.from_scopes(Users.DISABLE, methods=('DELETE',))\n    ),\n  )\n  serializer_class = UserSerializer\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "px-access-scopes",
    "package_url": "https://pypi.org/project/px-access-scopes/",
    "platform": "",
    "project_url": "https://pypi.org/project/px-access-scopes/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/px-access-scopes/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Simple access-scopes utility package.",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10898168,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f060053ecb1df0b08abcfcb1150b1a37e9075883cdbada7f8fced9ec7ff71e84",
          "md5": "a008bfed31bd45b5c517f66b94081795",
          "sha256": "ad1a53cbf905acdcca92676dff35ba92d5fe9423f3ad5c3b261123aa97173ba7"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a008bfed31bd45b5c517f66b94081795",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5978,
        "upload_time": "2021-06-09T05:57:01",
        "upload_time_iso_8601": "2021-06-09T05:57:01.435279Z",
        "url": "https://files.pythonhosted.org/packages/f0/60/053ecb1df0b08abcfcb1150b1a37e9075883cdbada7f8fced9ec7ff71e84/px-access-scopes-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c857e45a2fbd3272ed0f338da5fe08ff3019d624fd48c7869486db10c86f9c",
          "md5": "a138bb35b152e3ecf8ef1de2a68a252f",
          "sha256": "250a91803b172b23dcda5c404aa6a8ffa795d93f472fb3a69c822551318aa6e5"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a138bb35b152e3ecf8ef1de2a68a252f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10250,
        "upload_time": "2021-06-22T08:17:45",
        "upload_time_iso_8601": "2021-06-22T08:17:45.506234Z",
        "url": "https://files.pythonhosted.org/packages/05/c8/57e45a2fbd3272ed0f338da5fe08ff3019d624fd48c7869486db10c86f9c/px-access-scopes-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "383e1e4867fb22c91b6512a1294e5447d1596181408469f55c19e0333e4b7d19",
          "md5": "8cc068986be5570d59fc81850aac41f0",
          "sha256": "ad7d354d6ab3a915884c277a93d1006c2caa7e0c563057452383ea7ea551a0b4"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8cc068986be5570d59fc81850aac41f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10317,
        "upload_time": "2021-06-22T08:28:38",
        "upload_time_iso_8601": "2021-06-22T08:28:38.523359Z",
        "url": "https://files.pythonhosted.org/packages/38/3e/1e4867fb22c91b6512a1294e5447d1596181408469f55c19e0333e4b7d19/px-access-scopes-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c4a05161168520027e45275a7f4e0e7762b017e29fbad86045b2afe32f4f04",
          "md5": "6cf9ebc285dc31ba1445a5bd0c861922",
          "sha256": "827bf2af027305ca3a606abcc6b7e35ad5dbff69f9e05f01f5784e6fc89e641b"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6cf9ebc285dc31ba1445a5bd0c861922",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11126,
        "upload_time": "2021-06-23T13:04:52",
        "upload_time_iso_8601": "2021-06-23T13:04:52.255347Z",
        "url": "https://files.pythonhosted.org/packages/93/c4/a05161168520027e45275a7f4e0e7762b017e29fbad86045b2afe32f4f04/px-access-scopes-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3bcba11e986ca8a403522af12a839f2cc5ad0ba09cab9019c0c5c723ec67f1d",
          "md5": "01d2dd139446d4ebeebc80d5922b86d4",
          "sha256": "ad2f783576d745aaa19816a63cbca9a718201d0e700f510b1d5e62ddd2d55d4b"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "01d2dd139446d4ebeebc80d5922b86d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11512,
        "upload_time": "2021-06-24T08:33:55",
        "upload_time_iso_8601": "2021-06-24T08:33:55.316291Z",
        "url": "https://files.pythonhosted.org/packages/a3/bc/ba11e986ca8a403522af12a839f2cc5ad0ba09cab9019c0c5c723ec67f1d/px-access-scopes-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfcd0d07dac5f3d0337a1ec62f417ec088444d76d98fd4f362176e291d3b9aa3",
          "md5": "41ebec7b21c9003e134498aede8ec88d",
          "sha256": "eef5a32e06231ad06dece7b1dcccde5f5093d581331807b04ef9268321f42ca8"
        },
        "downloads": -1,
        "filename": "px-access-scopes-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "41ebec7b21c9003e134498aede8ec88d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16224,
        "upload_time": "2021-07-13T15:00:08",
        "upload_time_iso_8601": "2021-07-13T15:00:08.639765Z",
        "url": "https://files.pythonhosted.org/packages/df/cd/0d07dac5f3d0337a1ec62f417ec088444d76d98fd4f362176e291d3b9aa3/px-access-scopes-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfcd0d07dac5f3d0337a1ec62f417ec088444d76d98fd4f362176e291d3b9aa3",
        "md5": "41ebec7b21c9003e134498aede8ec88d",
        "sha256": "eef5a32e06231ad06dece7b1dcccde5f5093d581331807b04ef9268321f42ca8"
      },
      "downloads": -1,
      "filename": "px-access-scopes-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "41ebec7b21c9003e134498aede8ec88d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16224,
      "upload_time": "2021-07-13T15:00:08",
      "upload_time_iso_8601": "2021-07-13T15:00:08.639765Z",
      "url": "https://files.pythonhosted.org/packages/df/cd/0d07dac5f3d0337a1ec62f417ec088444d76d98fd4f362176e291d3b9aa3/px-access-scopes-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}