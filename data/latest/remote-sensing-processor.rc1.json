{
  "info": {
    "author": "Mikhail Moskovchenko",
    "author_email": "moskovchenkomike@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: GPU :: NVIDIA CUDA",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "\n![image](logo_wide.png)\n\n----\n\n![AppVeyor](https://img.shields.io/appveyor/build/simonreise/remote-sensing-processor)\n![PyPI](https://img.shields.io/pypi/v/remote-sensing-processor)\n![Conda](https://img.shields.io/conda/pn/moskovchenkomike/remote-sensing-processor)\n\nRSP is a tool for geospatial raster data processing.\n\nMost of remote sensing data like Sentinel of Landsat imagery needs to be preprocessed before using. RSP can preprocess Sentinel-2 and Landsat imagery, create raster mosaics, calculate vegetation indices, cut rasters into tiles.\n\nRead the documentation for more details: https://remote-sensing-processor.readthedocs.io\n\n## Example\n\nHere is an example of some features that RSP provides. Sentinel-2 images are being preprocessed and merged into a mosaic, NDVI of that Sentinel-2 mosaic is calculated. Landcover images are merged into mosaic at the same resolution and projection as Sentinel-2 data. Then Sentinel-2 and landcover data is divided into tiles and U-Net model that predicts landcover based on Sentinel-2 data is trained. This model is used to create landcover map. \n```\nfrom glob import glob\nimport remote_sensing_processor as rsp\n\n\n# getting a list of sentinel-2 images\nsentinel2_imgs = glob('/home/rsp_test/sentinels/*.zip')\n\n# preprocessing sentinel-2 images\n# it includes converting L1 products to L2, superresolution for 20 and 60m bands and cloud masking\noutput_sentinels = rsp.sentinel2(sentinel2_imgs)\n\n# merging sentinel-2 images into one mosaic \n# in order from images with most nodata values on bottom to images with less nodata on top,\n# clipping it to the area of interest and reprojecting to the proj we need\nborder = '/home/rsp_test/border.gpkg'\nmosaic_sentinel = rsp.mosaic(output_sentinels, '/home/rsp_test/mosaics/sentinel/', clipper = border, projection = 'EPSG:4326', nodata_order = True)\n\n# calculating NDVI for sentinel-2 mosaic\nndvi = rsp.normalized_difference('NDVI', '/home/rsp_test/mosaics/sentinel/')\n\n# merging landcover files into mosaic \n#and bringing it to resolution and projection of a reference file (one of sentinel mosaic bands)\nlcs = glob('/home/rsp_test/landcover/*.tif')\nmosaic_landcover = rsp.mosaic(lcs, '/home/rsp_test/mosaics/landcover/', clipper = border, reference_raster = '/home/rsp_test/mosaics/sentinel/B1.tif', nodata = -1)\n\n# cutting sentinel (x) and landcover (y) data to 256x256 px tiles, \n# with random shuffling samples, splitting data into train,\n# validation and test subsets in proportion 3 to 1 to 1\n# and ignoring tiles with only nodata values\nx = mosaic_sentinel\ny = mosaic_landcover[0]\nx_i, y_i, tiles, samples = rsp.generate_tiles(x, y, num_classes = 11, tile_size = 256, shuffle = True, split = [3, 1, 1], nodata = -1)\nx_train = x_i[0]\nx_val = x_i[1]\nx_test = x_i[2]\ny_train = y_i[0]\ny_val = y_i[1]\ny_test = y_i[2]\n\n# training U-Net that predicts landcover class based on sentinel imagery\nfrom tensorflow import keras\n# =======================\n# here must be u-net code\n# =======================\nmodel.fit(x_train, y_train, batch_size = 16, epochs = 20, validation_data = (x_val, y_val), callbacks = callbacks)\n# testing_model\nmodel.evaluate(x_test, y_test)\n\n# mapping landcover based on predictions of our U-Net\ny_reference = '/home/rsp_test/mosaics/landcover/landcover01_mosaic.tif'\noutput_map = '/home/rsp_test/prediction.tif'\nrsp.generate_map([x_train, x_val, x_test], y_reference, model, output_map, tiles = tiles, samples = samples)\n```\n\n## Requirements\nTo run RSP you need these packages to be installed:\n- Python >= 3.7\n- Numpy\n- GDAL\n- Rasterio\n- Pyproj\n- Shapely\n- Fiona\n- Geopandas\n- Tensorflow >= 2.3\n\nAlso you need a Sen2Cor to be installed to process Sentinel-2 data. You should install it via SNAP plugin installer. [Here](http://wiki.awf.forst.uni-goettingen.de/wiki/index.php/Installation_of_SNAP) is the instruction how you can do it.\n\n## Installation\n\nFrom PyPI:\n```\npip install remote-sensing-processor\n```\nFrom Conda:\n```\nconda install -c moskovchenkomike remote-sensing-processor\n```\nFrom source:\n```\ngit clone https://github.com/simonreise/remote-sensing-processor\ncd remote-sensing-processor\npip install .\n```\n\n\n## License\nSee [LICENSE](LICENSE).\n\n## Thanks to\nRSP uses code from some other projects.\n\nSentinel-2 superresolution is based on [s2-superresolution] by UP42, which is based on [DSen-2] by lanha.\n\nSentinel-2 atmospheric correction is performed with [Sen2Cor].\n\nLandsat processing module uses code from [Semi-Automatic Classification Plugin](https://fromgistors.blogspot.com/p/semi-automatic-classification-plugin.html).\n\n\n\n   [s2-superresolution]: <https://github.com/up42/s2-superresolution>\n   [DSen-2]: <https://github.com/lanha/DSen2>\n   [Sen2Cor]: <https://step.esa.int/main/snap-supported-plugins/sen2cor/>\n   \n   \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/simonreise/remote-sensing-processor",
    "keywords": "remote sensing,landsat,sentinel,gdal,rasterio",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "remote-sensing-processor",
    "package_url": "https://pypi.org/project/remote-sensing-processor/",
    "platform": null,
    "project_url": "https://pypi.org/project/remote-sensing-processor/",
    "project_urls": {
      "Bug Tracker": "https://github.com/simonreise/remote-sensing-processor/issues",
      "Documentation": "https://remote-sensing-processor.readthedocs.io",
      "Homepage": "https://github.com/simonreise/remote-sensing-processor",
      "Source": "https://github.com/simonreise/remote-sensing-processor"
    },
    "release_url": "https://pypi.org/project/remote-sensing-processor/0.1/",
    "requires_dist": [
      "numpy",
      "h5py",
      "tensorflow (>=2.3)",
      "scikit-image",
      "rasterio",
      "pyproj",
      "geopandas"
    ],
    "requires_python": ">=3.7",
    "summary": "RSP is a tool for geospatial raster data processing",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14106172,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6b3478fee84f3972c295fdee419b1d032f9b90cd52a9d58836a98c3453cfc33",
          "md5": "52039916a7a02a0a206c11ef845797c2",
          "sha256": "fdb006079405000ffde5640957ef3627f72be262387d2ab3f5ce0144eeb1686e"
        },
        "downloads": -1,
        "filename": "remote_sensing_processor-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52039916a7a02a0a206c11ef845797c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 79746615,
        "upload_time": "2022-06-12T10:53:19",
        "upload_time_iso_8601": "2022-06-12T10:53:19.153269Z",
        "url": "https://files.pythonhosted.org/packages/b6/b3/478fee84f3972c295fdee419b1d032f9b90cd52a9d58836a98c3453cfc33/remote_sensing_processor-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81623bb9281d81ae5c6a1076eae55eee1ccfd3f3a2ff6511098349e2f28ae3e9",
          "md5": "ec463d78554747951c77fc8244ef6ea0",
          "sha256": "1c033824440005febe642d62effeaa7230123386a1d47c540082fd72b2b15b3c"
        },
        "downloads": -1,
        "filename": "remote-sensing-processor-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ec463d78554747951c77fc8244ef6ea0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 79860606,
        "upload_time": "2022-06-12T10:53:57",
        "upload_time_iso_8601": "2022-06-12T10:53:57.092784Z",
        "url": "https://files.pythonhosted.org/packages/81/62/3bb9281d81ae5c6a1076eae55eee1ccfd3f3a2ff6511098349e2f28ae3e9/remote-sensing-processor-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6b3478fee84f3972c295fdee419b1d032f9b90cd52a9d58836a98c3453cfc33",
        "md5": "52039916a7a02a0a206c11ef845797c2",
        "sha256": "fdb006079405000ffde5640957ef3627f72be262387d2ab3f5ce0144eeb1686e"
      },
      "downloads": -1,
      "filename": "remote_sensing_processor-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "52039916a7a02a0a206c11ef845797c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 79746615,
      "upload_time": "2022-06-12T10:53:19",
      "upload_time_iso_8601": "2022-06-12T10:53:19.153269Z",
      "url": "https://files.pythonhosted.org/packages/b6/b3/478fee84f3972c295fdee419b1d032f9b90cd52a9d58836a98c3453cfc33/remote_sensing_processor-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81623bb9281d81ae5c6a1076eae55eee1ccfd3f3a2ff6511098349e2f28ae3e9",
        "md5": "ec463d78554747951c77fc8244ef6ea0",
        "sha256": "1c033824440005febe642d62effeaa7230123386a1d47c540082fd72b2b15b3c"
      },
      "downloads": -1,
      "filename": "remote-sensing-processor-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ec463d78554747951c77fc8244ef6ea0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 79860606,
      "upload_time": "2022-06-12T10:53:57",
      "upload_time_iso_8601": "2022-06-12T10:53:57.092784Z",
      "url": "https://files.pythonhosted.org/packages/81/62/3bb9281d81ae5c6a1076eae55eee1ccfd3f3a2ff6511098349e2f28ae3e9/remote-sensing-processor-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}