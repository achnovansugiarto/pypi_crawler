{
  "info": {
    "author": "Trishkin Sergey",
    "author_email": "grdvsng@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "![example console log](./assets/logo.png)\n\nLight were, flexible and customize logging tools.\n__Threads and processes safely__!\nPackage has many default preset to use after installation. \nBut if you need customize your own logger, basic classe make you life better.\nSmart decorators help you logging your methods on code and catch errors.\nEvent handler help you connect your handler and send notification on specific events.\nMessage and field as Model, create you own generic fields, messages, and format.\nConfigurate multy logger and handle another formats and levels from one instance.\n\n\n# Curently avaible\n\n__Loggers presets__\n    * [Console Logger](./src/demure_loggers/console/__init__.py)\n    * [File Logger   ](./src/demure_loggers/file/__init__.py)\n    * [JSON Logger   ](./src/demure_loggers/json/__init__.py)\n\n__Programs__\n    * [Pipe handler](./scripts/demure-logger-pipe.py)\n\n\n__Console Logger__\nDebug and monitoring you applications via pretty console logging.\n![example console log](./assets/console.example.png)\n\n__Examples__\n```python\nimport os\nimport uuid\nimport random\nimport asyncio\n\nfrom demure_logger.log              import Levels\nfrom demure_loggers.console         import Logger, Format, Writer\nfrom demure_loggers.console.message import Message, TextField\n\n\n#? Exmaple basic console logger\nlogger = Logger( )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# >> FATAL   Test    7916    2022-04-10 21:23:40.749597+04:00        C:\\demure_logger\\examples\\console.py:18\n# >> ERROR   Test    7916    2022-04-10 21:23:40.828191+04:00        C:\\demure_logger\\examples\\console.py:19\n# >> WARN    Test    7916    2022-04-10 21:23:40.834189+04:00        C:\\demure_logger\\examples\\console.py:20\n# >> INFO    Test    7916    2022-04-10 21:23:40.840193+04:00        C:\\demure_logger\\examples\\console.py:#21\n# >> DEBUG   Test    7916    2022-04-10 21:23:40.845190+04:00        C:\\demure_logger\\examples\\console.py:22\n\n#? Example with specific formater\nlogger = Logger( format=Format( \"{event}\\tpid[{pid}]\\t{timestamp}\\t{message}\" ) )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# >> FATAL   pid[7916]       2022-04-10 21:23:40.848506+04:00        Test\n# >> ERROR   pid[7916]       2022-04-10 21:23:40.851197+04:00        Test\n# >> WARN    pid[7916]       2022-04-10 21:23:40.852485+04:00        Test\n# >> INFO    pid[7916]       2022-04-10 21:23:40.853072+04:00        Test\n# >> DEBUG   pid[7916]       2022-04-10 21:23:40.854629+04:00        Test\n\n#? Example mwith dynamic generate format\ndef random_fmt( ) -> str:\n    fmt = random.choice( [\n        \"{event}\\tpid[{pid}]\",\n        \"{event}\\tpid[{pid}]\\t{timestamp}\",\n        \"{event}\\tpid[{pid}]\\t{timestamp}\\t{message}\",\n    ] )\n\n    return Format( fmt )\n\nlogger = Logger( format=random_fmt )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# >> FATAL   pid[7916]       2022-04-10 21:23:40.856367+04:00\n# >> ERROR   pid[7916]       2022-04-10 21:23:40.857366+04:00        Test\n# >> WARN    pid[7916]       2022-04-10 21:23:40.858204+04:00        Test\n# >> INFO    pid[7916]\n# >> DEBUG   pid[7916]\n\n#? Example with custom field with default value as function\nos.environ[\"REMOTE_USER\"] = \"root\"\n\nclass CustomMessage( Message ):\n    user = TextField( default=lambda: os.environ.get( 'REMOTE_USER' ), color='cyan' )\n\nlogger = Logger( message_class=CustomMessage, format=Format( \"{event}\\tpid[{pid}]\\t{user}\\t{timestamp}\\t{message}\" ) )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# >> FATAL   pid[7916]       root    2022-04-10 21:23:40.861895+04:00        Test\n# >> ERROR   pid[7916]       root    2022-04-10 21:23:40.862892+04:00        Test\n# >> WARN    pid[7916]       root    2022-04-10 21:23:40.864283+04:00        Test\n# >> INFO    pid[7916]       root    2022-04-10 21:23:40.865289+04:00        Test\n# >> DEBUG   pid[7916]       root    2022-04-10 21:23:40.866884+04:00        Test\n\n#? Example how use custom writer\nclass CustomWriter( Writer ):\n    def write( self, message ):\n        print( f\"{message} ::{random.randint( 5, 15 )}\" )\n\n\nlogger = Logger( writer=CustomWriter( ) )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n \n# >> FATAL   Test    7916    2022-04-10 21:23:40.871144+04:00        C:\\demure_logger\\examples\\console.py:79 ::7\n# >> ERROR   Test    7916    2022-04-10 21:23:40.873586+04:00        C:\\demure_logger\\examples\\console.py:80 ::11\n# >> WARN    Test    7916    2022-04-10 21:23:40.880757+04:00        C:\\demure_logger\\examples\\console.py:81 ::6\n# >> INFO    Test    7916    2022-04-10 21:23:40.885183+04:00        C:\\demure_logger\\examples\\console.py:82 ::9\n# >> DEBUG   Test    7916    2022-04-10 21:23:40.889546+04:00        C:\\demure_logger\\examples\\console.py:83 ::8\n\n#? Example use as decorator\nlogger = Logger( )\n\n@logger.decorate\ndef decorated_func( ):\n    return random.randint( 1, 10 )\n\ndecorated_func( )\n\n# >> DEBUG   15292   2022-04-10 23:05:22.265649+04:00 start 'decorated_func'\n# >> DEBUG   15292   2022-04-10 23:05:22.267645+04:00 end 'decorated_func'\n\n@logger.decorate( Levels.info )\ndef decorated_func( ):\n    return random.randint( 1, 10 )\n\ndecorated_func( )\n\n# >> INFO    8480    2022-04-10 23:06:46.142603+04:00        start 'decorated_func'\n# >> INFO    8480    2022-04-10 23:06:46.146584+04:00        end 'decorated_func'\n\n@logger.decorate( Levels.warn, lambda f: f\"{ f.__name__ }\\t{ uuid.uuid4( ) }\" )\ndef decorated_func( ):\n    return random.randint( 1, 10 )\n\ndecorated_func( )\n\n# >> WARN    20376   2022-04-10 23:08:44.777405+04:00        start 'decorated_func   2abf32bb-5176-4dc1-be16-ed5c18179b23'\n# >> WARN    20376   2022-04-10 23:08:44.778962+04:00        end 'decorated_func     2abf32bb-5176-4dc1-be16-ed5c18179b23'\n\n@logger.decorate\nasync def decorated_func( ):\n    return random.randint( 1, 10 )\n\n\nloop = asyncio.new_event_loop( )\n\nasyncio.set_event_loop( loop ) \n\nloop.run_until_complete( decorated_func( ) )\n\n# >> DEBUG   17436   2022-04-10 23:14:24.882050+04:00        start async decorated_func\n# >> DEBUG   17436   2022-04-10 23:14:24.883049+04:00        end async decorated_func\n\n@logger.catch\ndef decorated_func( ):\n    raise Exception( \"test\" )\n\ntry:\n    decorated_func( )\nexcept Exception as _:\n    ...\n\n# >> WARN    19168   2022-04-10 23:28:34.154133+04:00        test\n\n@logger.catch( Levels.fatal )\ndef decorated_func( ):\n    raise Exception( \"test\" )\n\ntry:\n    decorated_func( )\nexcept Exception as _:\n    ...\n\n\n# >> FATAL   19168   2022-04-10 23:28:34.154133+04:00        test\n```\n\n__File Logger__\nGeneric file names, formaters, writers, good solution for serveci logging and debug.\n\n__Example__\n```python\nimport os\nimport json\n\nfrom datetime                    import datetime\nfrom demure_logger.log           import Levels\nfrom demure_loggers.file         import Logger, Format, Writer\nfrom demure_loggers.file.message import Message\n\n\n#? Exmaple basic file logger\nlogger = Logger( path=\"./.temp/test.log\", level=Levels.DEBUG )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# << \"./.temp/test.log\"\n# >> FATAL\t23644\t2022-04-11T11:51:51.499851+0400Z\tTest\n# >> ERROR\t23644\t2022-04-11T11:51:51.501831+0400Z\tTest\n# >> WARN\t23644\t2022-04-11T11:51:51.507830+0400Z\tTest\n# >> INFO\t23644\t2022-04-11T11:51:51.514833+0400Z\tTest\n# >> DEBUG\t23644\t2022-04-11T11:51:51.521107+0400Z\tTest\n\n#? Exmaple basic file logger with generic path\nlogger = Logger( \n    path=lambda : os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\") + \".log\" ), \n    level=Levels.DEBUG \n)\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# << ./.temp/2022-04-11.log\n# >> FATAL\t18044\t2022-04-11T11:54:40.606960+0400Z\tTest\n# >> ERROR\t18044\t2022-04-11T11:54:40.607960+0400Z\tTest\n# >> WARN\t18044\t2022-04-11T11:54:40.618964+0400Z\tTest\n# >> INFO\t18044\t2022-04-11T11:54:40.628961+0400Z\tTest\n# >> DEBUG\t18044\t2022-04-11T11:54:40.635963+0400Z\tTest\n\n#? Example load configuration from config\nconfig = f\"\"\"{{\n    \"name\"   : \"test-log\",\n    \"level\"  : \"debug\"   ,\n    \n    \"message_class\": \"demure_loggers.file.message.Message\",\n\n    \"writer\" : {{\n        \"props\" : {{ \n            \"path\": \"{ os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\" ) + \".log\" ) }\"\n        }} \n    }},\n    \n    \"format\" : {{\n        \"props\" : {{\n            \"format\": \"{{event}}\\\\t{{timestamp}}\\\\t{{message}}\" \n        }}\n    }}\n}}\"\"\"\n\nlogger = Logger.from_config( json.loads( config ) )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# << ./.temp/2022-04-11.log\n# >> FATAL\t18044\t2022-04-11T11:54:40.606960+0400Z\tTest\n# >> ERROR\t18044\t2022-04-11T11:54:40.607960+0400Z\tTest\n# >> WARN\t18044\t2022-04-11T11:54:40.618964+0400Z\tTest\n# >> INFO\t18044\t2022-04-11T11:54:40.628961+0400Z\tTest\n# >> DEBUG\t18044\t2022-04-11T11:54:40.635963+0400Z\tTest\n\n#? from config multi\nconfig = f\"\"\"[{{\n    \"name\"   : \"test-log-debug\",\n    \"level\"  : \"debug\"   ,\n    \n    \"message_class\": \"demure_loggers.file.message.OsEnvironMixin\",\n\n    \"writer\" : {{\n        \"props\" : {{ \n            \"path\": \"{ os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\" ) + \".full.log\" ) }\"\n        }} \n    }},\n    \n    \"format\" : {{\n        \"props\" : {{\n            \"format\": \"{{event}}\\\\t{{timestamp}}\\\\tuser={{USERNAME}}\\\\t{{OS}}\\\\t{{message}}\" \n        }}\n    }}\n}}, {{\n    \"name\"   : \"test-log-error\",\n    \"level\"  : \"error\"         ,\n    \n    \"message_class\": \"demure_loggers.file.message.TraceMixin\",\n\n    \"writer\" : {{\n        \"props\" : {{ \n            \"path\": \"{ os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\" ) + \".error.log\" ) }\"\n        }} \n    }},\n    \n    \"format\" : {{\n        \"props\" : {{\n            \"format\": \"{{event}}\\\\t{{timestamp}}\\\\t{{trace}}\\\\t{{message}}\" \n        }}\n    }}\n}}]\"\"\"\n\nlogger = Logger.from_config( *json.loads( config ) )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n# << ./.temp/2022-04-11.full.log\n# >> FATAL\t2022-04-13T19:45:04.353500+0400Z\tuser=root\tWindows_NT\tTest\n# >> ERROR\t2022-04-13T19:45:04.536819+0400Z\tuser=root\tWindows_NT\tTest\n# >> WARN\t2022-04-13T19:45:04.560209+0400Z\tuser=root\tWindows_NT\tTest\n# >> INFO\t2022-04-13T19:45:04.570357+0400Z\tuser=root\tWindows_NT\tTest\n# >> DEBUG\t2022-04-13T19:45:04.580500+0400Z\tuser=root\tWindows_NT\tTest\n\n\n# << ./.temp/2022-04-11.error.log\n# >> FATAL\t2022-04-13T19:22:16.206387+0400Z\tC:\\demure_logger\\examples\\file.py:125\tTest\n# >> ERROR\t2022-04-13T19:22:16.377245+0400Z\tC:\\demure_logger\\examples\\file.py:126\tTest\n\n#? Multy log via usual config\nlogger1 = Logger( \n    path=lambda : os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\") + \".full.log\" ), \n    level=Levels.DEBUG \n)\n\nlogger2 = Logger( \n    path=lambda : os.path.join( \"./.temp/\", datetime.now( ).strftime( \"%Y-%m-%d\") + \".error.log\" ), \n    level=Levels.ERROR \n)\n\nlogger = Logger.multy( logger1, logger2 )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.info ( \"Test\" )\nlogger.debug( \"Test\" )\n\n\n# << ./.temp/2022-04-11.full.log\n# >> FATAL\t23644\t2022-04-11T11:51:51.499851+0400Z\tTest\n# >> ERROR\t23644\t2022-04-11T11:51:51.501831+0400Z\tTest\n# >> WARN\t23644\t2022-04-11T11:51:51.507830+0400Z\tTest\n# >> INFO\t23644\t2022-04-11T11:51:51.514833+0400Z\tTest\n# >> DEBUG\t23644\t2022-04-11T11:51:51.521107+0400Z\tTest\n\n# << ./.temp/2022-04-11.error.log\n# >> FATAL\t23644\t2022-04-11T11:51:51.499851+0400Z\tTest\n# >> ERROR\t23644\t2022-04-11T11:51:51.501831+0400Z\tTest\n\n#? Treard safe\nimport threading\n\nlogger = Logger( \n    path=\"./.temp/test.threading.log\", \n    level=Levels.debug \n)\n\ntasks    = [ ]\n\ndef info( message ) : \n    return logger.info( message )\n\nfor message in range( 5 ):\n    task = threading.Thread( target = info, args = ( str( message ), ) )\n    \n    task.start( )\n\n    tasks.append( task )\n\nfor task in tasks: task.join( )\n\n# << ./.temp/test.threading.log\n# >> INFO\t15976\t2022-04-13T22:11:08.282878+0400Z\t0\n# >> INFO\t21180\t2022-04-13T22:11:08.282878+0400Z\t1\n# >> INFO\t10456\t2022-04-13T22:11:08.282878+0400Z\t2\n# >> INFO\t24328\t2022-04-13T22:11:08.282878+0400Z\t3\n# >> INFO\t21112\t2022-04-13T22:11:08.292814+0400Z\t4\n\n#? Multy fork safe\ntasks = [ ]\n\ndef info( message ) : \n    logger = Logger( \n        path=\"./.temp/test.forks.log\", \n        level=Levels.debug \n    )\n    \n    return logger.info( message )\n\nfor message in range( 5 ):\n    task = threading.Thread( target = info, args = ( str( message ), ) )\n    \n    task.start( )\n\n    tasks.append( task )\n\nfor task in tasks: task.join( )\n\n# << ./.temp/test.threading.log\n# >> INFO\t12440\t2022-04-13T22:13:59.878289+0400Z\t0\n# >> INFO\t21924\t2022-04-13T22:13:59.880309+0400Z\t1\n# >> INFO\t3956\t2022-04-13T22:13:59.881299+0400Z\t2\n# >> INFO\t21436\t2022-04-13T22:13:59.882290+0400Z\t3\n# >> INFO\t11792\t2022-04-13T22:13:59.883294+0400Z\t4\n# >> INFO\t7596\t2022-04-13T22:14:00.002828+0400Z\t0\n# >> INFO\t10768\t2022-04-13T22:14:00.003832+0400Z\t1\n# >> INFO\t24556\t2022-04-13T22:14:00.005832+0400Z\t2\n# >> INFO\t17008\t2022-04-13T22:14:00.006833+0400Z\t3\n# >> INFO\t20388\t2022-04-13T22:14:00.008832+0400Z\t4\n```\n\n__JSON Logger__\nLook like file logging, but more flexible and preferebly if you have some logging analizators or searching engines\n![example console log](./assets/json.example.png)\n\n__Examples__\n```python\nimport os\nimport sys\nimport socket\nimport pathlib\nimport threading\nfrom demure_logger.log           import Levels\nfrom demure_loggers.json         import Logger, Format, Message\nfrom demure_loggers.file.message import TextField\n\n#? Exmaple basic json logger\nlogger = Logger( path=\"./.temp/test.log.json\", level=Levels.DEBUG )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.debug( \"Test\" )\nlogger.info ( \"Test\" )\n\n# << ./.temp/test.log.json\n# >> {\n# >>     \"records\": [\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"e35cba65-f1ce-4f79-80d7-362eb39371b6\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.381391+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"DEBUG\",\n# >>             \"id\": \"337202b3-7eeb-43fa-9c82-c14515f36c42\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.372392+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"WARN\",\n# >>             \"id\": \"24a88ec4-acf7-4dec-8eb7-e47aa3617d26\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.363389+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"3ea23de5-5201-43d6-b326-c20b189688e8\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.355389+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"8d02e249-c517-4077-b248-dc93ca3a9ef6\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.352397+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"36da9ff1-bb05-4a66-b7a3-541a77b2c989\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.855272+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"DEBUG\",\n# >>             \"id\": \"87980859-d520-49db-89a1-ba86e29ee839\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.847277+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"WARN\",\n# >>             \"id\": \"d762b670-826e-407e-8139-cfbb3639c525\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.838271+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"cb03f2a6-ef1c-490f-aff2-a235ff0dca54\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.827426+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"9d7e4c56-62c1-4cad-8365-d5438d61327d\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.822147+0400Z\"\n# >>         }\n# >>     ]\n# >> }\n\n#? Exmaple with specific format json logger\nlogger = Logger( \n    format=Format( \n        record_type=lambda msg: str( msg.id )\n    ),\n    path=\"./.temp/test.log.foramted.json\", \n    level=Levels.DEBUG )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.debug( \"Test\" )\nlogger.info ( \"Test\" )\n\n# << ./.temp/test.log.foramted.json\n# >> {\n# >>     \"records\": {\n# >>         \"043597fe-ff4a-478f-8298-062fd8b1b3db\": {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"043597fe-ff4a-478f-8298-062fd8b1b3db\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.866270+0400Z\"\n# >>         },\n# >>         \"21103852-6007-4c11-b4bc-1940108065df\": {\n# >>             \"event\": \"DEBUG\",\n# >>             \"id\": \"21103852-6007-4c11-b4bc-1940108065df\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.426436+0400Z\"\n# >>         },\n# >>         \"33256d6f-2eac-49fa-8c5c-26c336c24d41\": {\n# >>             \"event\": \"WARN\",\n# >>             \"id\": \"33256d6f-2eac-49fa-8c5c-26c336c24d41\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.412206+0400Z\"\n# >>         },\n# >>         \"50da5004-0f89-4921-aee8-552aaf97365d\": {\n# >>             \"event\": \"DEBUG\",\n# >>             \"id\": \"50da5004-0f89-4921-aee8-552aaf97365d\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.885270+0400Z\"\n# >>         },\n# >>         \"518db91e-1497-4d43-9ab5-ac9d08d4b8db\": {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"518db91e-1497-4d43-9ab5-ac9d08d4b8db\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.864272+0400Z\"\n# >>         },\n# >>         \"b13359b6-6c3c-42bc-9596-a7d81add72e4\": {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"b13359b6-6c3c-42bc-9596-a7d81add72e4\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.402374+0400Z\"\n# >>         },\n# >>         \"bd65c88f-78e5-41af-9ced-8f7f850fa5d2\": {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"bd65c88f-78e5-41af-9ced-8f7f850fa5d2\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.402374+0400Z\"\n# >>         },\n# >>         \"dfbe34e1-7791-48bc-8951-c7b1f1ae867b\": {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"dfbe34e1-7791-48bc-8951-c7b1f1ae867b\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 92,\n# >>             \"timestamp\": \"2022-04-14T19:46:41.437085+0400Z\"\n# >>         },\n# >>         \"e4aef0eb-00f5-4c52-93da-4609524b2869\": {\n# >>             \"event\": \"WARN\",\n# >>             \"id\": \"e4aef0eb-00f5-4c52-93da-4609524b2869\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.877270+0400Z\"\n# >>         },\n# >>         \"ff2c0ef0-8c3e-4f3f-9816-8cedc8a53e03\": {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"ff2c0ef0-8c3e-4f3f-9816-8cedc8a53e03\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 11852,\n# >>             \"timestamp\": \"2022-04-14T19:46:11.893271+0400Z\"\n# >>         }\n# >>     }\n# >> }\n\n\n#? Exmaple with specific loginfo json logger and custom message class\nclass CustomMessage( Message ):\n    script = TextField( value=pathlib.Path( sys.argv[0] ).name )\n\n\nlogger = Logger( \n    message_class=CustomMessage,\n    format=Format( \n        record_type=lambda msg: str( msg.id ),\n        os         = os.environ.get( 'OS' ),\n        last_pi    = threading.current_thread( ).ident,\n        host       = socket.gethostname,\n        address    = lambda : socket.gethostbyname( socket.gethostname( ) )\n    ),\n    path=\"./.temp/test.log.foramted.with_info.json\", \n    level=Levels.DEBUG )\n\nlogger.info ( \"Test\" )\n\n# << ./.temp/test.log.foramted.with_info.json\n# >> {\n# >>     \"address\": \"192.168.1.11\",\n# >>     \"host\": \"DESKTOP-JISCVL4\",\n# >>     \"last_pi\": 3356,\n# >>     \"os\": \"Windows_NT\",\n# >>     \"records\": {\n# >>         \"8ed1a9ae-fbcc-4e6c-8e79-ea00126f18d3\": {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"8ed1a9ae-fbcc-4e6c-8e79-ea00126f18d3\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 3356,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T19:59:55.929278+0400Z\"\n# >>         }\n# >>     }\n# >> }]\n\n#? Multy log\nlogger_1 = Logger( \n    message_class=CustomMessage,\n    format=Format( \n        record_type=lambda msg: str( msg.id ),\n        os         = os.environ.get( 'OS' ),\n        last_pi    = threading.current_thread( ).ident,\n        host       = socket.gethostname,\n        address    = lambda : socket.gethostbyname( socket.gethostname( ) )\n    ),\n    path=\"./.temp/test.log.foramted.debug.json\", \n    level=Levels.DEBUG )\n\nlogger_2 = Logger( \n    path=\"./.temp/test.log.error.json\", \n    level=Levels.ERROR \n)\n\nlogger = logger.multy( logger_1, logger_2 )\n\nlogger.fatal( \"Test\" )\nlogger.error( \"Test\" )\nlogger.warn ( \"Test\" )\nlogger.debug( \"Test\" )\nlogger.info ( \"Test\" )\n\n# << ./.temp/test.log.foramted.debug.json\n# >> {\n# >>     \"address\": \"192.168.1.11\",\n# >>     \"host\": \"DESKTOP-JISCVL4\",\n# >>     \"last_pi\": 9424,\n# >>     \"os\": \"Windows_NT\",\n# >>     \"records\": {\n# >>         \"489fc39d-108d-40e6-a915-2000c1a87424\": {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"489fc39d-108d-40e6-a915-2000c1a87424\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T20:02:54.520485+0400Z\"\n# >>         },\n# >>         \"92567b88-b4ec-4cc1-b13c-9efe891ead28\": {\n# >>             \"event\": \"WARN\",\n# >>             \"id\": \"92567b88-b4ec-4cc1-b13c-9efe891ead28\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T20:02:54.565525+0400Z\"\n# >>         },\n# >>         \"95f321ca-3487-4f8f-8b5c-cb1e51c6c738\": {\n# >>             \"event\": \"DEBUG\",\n# >>             \"id\": \"95f321ca-3487-4f8f-8b5c-cb1e51c6c738\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T20:02:54.585553+0400Z\"\n# >>         },\n# >>         \"b157c61b-23c6-4c1c-86fc-0b4030e9fbd0\": {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"b157c61b-23c6-4c1c-86fc-0b4030e9fbd0\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T20:02:54.525501+0400Z\"\n# >>         },\n# >>         \"df28e2fb-c4c1-4354-9b18-a98055466756\": {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"df28e2fb-c4c1-4354-9b18-a98055466756\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"script\": \"_json.py\",\n# >>             \"timestamp\": \"2022-04-14T20:02:54.604020+0400Z\"\n# >>         }\n# >>     }\n# >> }\n\n# << ./.temp/test.log.error.json\n# >> {\n# >>     \"records\": [\n# >>         {\n# >>             \"event\": \"ERROR\",\n# >>             \"id\": \"cfd6e0cd-8585-4fff-8006-af67aed8d616\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"timestamp\": \"2022-04-14T20:02:54.545689+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"FATAL\",\n# >>             \"id\": \"f522dd88-9367-471d-948b-f5604128a596\",\n# >>             \"message\": \"Test\",\n# >>             \"pid\": 9424,\n# >>             \"timestamp\": \"2022-04-14T20:02:54.525501+0400Z\"\n# >>         }\n# >>     ]\n# >> }\n\n#? Thread safe\ntasks  = [ ]\nlogger = Logger( \n    path=\"./.temp/test.threard.json\", \n    level=Levels.debug \n)\n\ndef info( message ) : \n    return logger.info( message )\n\nfor message in range( 5 ):\n    task = threading.Thread( target = info, args = ( str( message ), ) )\n    \n    task.start( )\n\n    tasks.append( task )\n\nfor task in tasks: task.join( )\n\n# << ./.temp/test.threard.json\n# >> {\n# >>     \"records\": [\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"0ceb54c1-2188-4197-9967-65ff3e37790b\",\n# >>             \"message\": \"4\",\n# >>             \"pid\": 18072,\n# >>             \"timestamp\": \"2022-04-14T21:27:20.297679+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"0a43a0a5-a081-490e-8c00-ffe5e154c026\",\n# >>             \"message\": \"3\",\n# >>             \"pid\": 4264,\n# >>             \"timestamp\": \"2022-04-14T21:27:20.297679+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"94e7e281-b997-4ba2-9c7f-214997dacc4b\",\n# >>             \"message\": \"2\",\n# >>             \"pid\": 1268,\n# >>             \"timestamp\": \"2022-04-14T21:27:20.297679+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"26b72776-39a9-4209-867d-665978baf644\",\n# >>             \"message\": \"1\",\n# >>             \"pid\": 3976,\n# >>             \"timestamp\": \"2022-04-14T21:27:20.292607+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"e5a4b0ca-ae6e-43db-a4c8-625dab0ef9b8\",\n# >>             \"message\": \"0\",\n# >>             \"pid\": 3408,\n# >>             \"timestamp\": \"2022-04-14T21:27:20.292607+0400Z\"\n# >>         }\n# >>     ]\n# >> }\n\n#? Multy fork safe\ntasks = [ ]\n\ndef info( message ) : \n    logger = Logger( \n        path=\"./.temp/test.forks.json\", \n        level=Levels.debug \n    )\n    \n    return logger.info( message )\n\nfor message in range( 5 ):\n    task = threading.Thread( target = info, args = ( str( message ), ) )\n    \n    task.start( )\n\n    tasks.append( task )\n\nfor task in tasks: task.join( )\n\n# << ./.temp/test.forks.json\n# >> {\n# >>     \"records\": [\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"5c1f8d59-285d-46fa-9244-89637a392820\",\n# >>             \"message\": \"4\",\n# >>             \"pid\": 5160,\n# >>             \"timestamp\": \"2022-04-14T21:25:19.387790+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"b2b77d3d-c934-4872-a5ef-69a4bca5d1e6\",\n# >>             \"message\": \"3\",\n# >>             \"pid\": 13580,\n# >>             \"timestamp\": \"2022-04-14T21:25:19.387790+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"eef128cc-cc8b-430f-9b6c-2ba760e4fdb2\",\n# >>             \"message\": \"2\",\n# >>             \"pid\": 11364,\n# >>             \"timestamp\": \"2022-04-14T21:25:19.387790+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"1551f324-17ec-4c5d-9dd9-6191124740d4\",\n# >>             \"message\": \"1\",\n# >>             \"pid\": 7380,\n# >>             \"timestamp\": \"2022-04-14T21:25:19.387790+0400Z\"\n# >>         },\n# >>         {\n# >>             \"event\": \"INFO\",\n# >>             \"id\": \"d9e6b231-d386-4539-a313-207426469614\",\n# >>             \"message\": \"0\",\n# >>             \"pid\": 21908,\n# >>             \"timestamp\": \"2022-04-14T21:25:19.387790+0400Z\"\n# >>         }\n# >>     ]\n# >> }\n```\n__PIPE Logger__\nIt can help you when you debuging your application, need console output and write in some file.\n\n__Examples__\n```python\nimport pathlib\nimport os\nimport pathlib\n\n\nROOT = str( pathlib.Path( __file__ ).parent.parent )\n\nHANDLER_PATH = os.path.join( ROOT, 'scripts', 'demure-logger-pipe.py' )\nTEMP_SCRIPT  = os.path.join( ROOT, '.temp', 'test-program.py' )\nTEMP_CONFIG  = os.path.join( ROOT, '.temp', 'test-pipe-config.py' )\n\nwith open( TEMP_SCRIPT, 'w' ) as file:\n    file.write( '''\nimport lorem\n\nevents = [ \"info\", \"debug\", \"error\", \"fatal\", \"warn\" ]\n\nfor event in events:\n    print( f\"{ event } { lorem.sentence( ) }\" )\n''' )\n\nwith open( TEMP_CONFIG, 'w' ) as file:\n    file.write('''\nimport datetime\nimport pathlib\n\nfrom os                     import path as os_path\nfrom demure_logger.log      import Levels\nfrom demure_loggers.file    import Logger as FileLogger\nfrom demure_loggers.console import Logger as ConsoleLogger, Format\n\n\ndef FILE_LOG_PATH( ) -> str:\n    ymd    = datetime.datetime.now( ).strftime( \"%Y-%m-%d\" )\n    parent = str( pathlib.Path( __file__ ).parent.parent )\n\n    return os_path.join( parent, '.temp', ymd + \".log\" )\n\n\nTEXT_LOGGER = FileLogger(\n    path  = FILE_LOG_PATH, \n    level = Levels.DEBUG \n)\n\nCONSOLE_LOGGER = ConsoleLogger( \n    format=Format(\n        \"{event}\\\\tpid[{pid}]\\\\t{timestamp}\\\\t{message}\\\\r\" \n    )\n)\n\nloggers = (\n    TEXT_LOGGER,\n    CONSOLE_LOGGER,\n)\n''' )\n\nos.system( f'py {TEMP_SCRIPT} | py {HANDLER_PATH}' )\n\n# << .\\.temp\\2022-04-23.log\n# >> INFO    pid[5588]       2022-04-23 18:45:33.212309+04:00        info Aliquam voluptatem aliquam porro tempora.\n# >> DEBUG   pid[5588]       2022-04-23 18:45:33.226306+04:00        debug Aliquam quaerat quiquia aliquam est.\n# >> ERROR   pid[5588]       2022-04-23 18:45:33.239302+04:00        error Magnam consectetur eius quisquam velit voluptatem.\n# >> FATAL   pid[5588]       2022-04-23 18:45:33.250304+04:00        fatal Aliquam tempora consectetur ipsum.\n# >> WARN    pid[5588]       2022-04-23 18:45:33.261305+04:00        warn Magnam numquam neque modi etincidunt sed aliquam sed.\n\n# << console\n# >> INFO    pid[5588]       2022-04-23 18:45:33.212309+04:00        info Aliquam voluptatem aliquam porro tempora.\n# >> DEBUG   pid[5588]       2022-04-23 18:45:33.226306+04:00        debug Aliquam quaerat quiquia aliquam est.\n# >> ERROR   pid[5588]       2022-04-23 18:45:33.239302+04:00        error Magnam consectetur eius quisquam velit voluptatem.\n# >> FATAL   pid[5588]       2022-04-23 18:45:33.250304+04:00        fatal Aliquam tempora consectetur ipsum.\n# >> WARN    pid[5588]       2022-04-23 18:45:33.261305+04:00        warn Magnam numquam neque modi etincidunt sed aliquam sed.\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grdvsng/demure_logger",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "demure-logger",
    "package_url": "https://pypi.org/project/demure-logger/",
    "platform": null,
    "project_url": "https://pypi.org/project/demure-logger/",
    "project_urls": {
      "Homepage": "https://github.com/grdvsng/demure_logger"
    },
    "release_url": "https://pypi.org/project/demure-logger/0.9.1/",
    "requires_dist": [
      "anyio (>=3.5.0)",
      "asgiref (>=3.5.0)",
      "atomicwrites (>=1.4.0)",
      "attrs (>=21.4.0)",
      "click (>=8.1.2)",
      "colorama (>=0.4.4)",
      "fastapi (>=0.75.1)",
      "grep (>=0.3.2)",
      "h11 (>=0.13.0)",
      "httptools (>=0.4.0)",
      "idna (>=3.3)",
      "iniconfig (>=1.1.1)",
      "janus (>=1.0.0)",
      "lazyme (>=0.0.27)",
      "lorem (>=0.1.1)",
      "packaging (>=21.3)",
      "peewee (>=3.14.10)",
      "pluggy (>=1.0.0)",
      "psutil (>=5.9.0)",
      "py (>=1.11.0)",
      "pydantic (>=1.9.0)",
      "pyparsing (>=3.0.8)",
      "pytest (>=7.1.1)",
      "python-dateutil (>=2.8.2)",
      "python-dotenv (>=0.20.0)",
      "python-multipart (>=0.0.5)",
      "PyYAML (>=6.0)",
      "six (>=1.16.0)",
      "sniffio (>=1.2.0)",
      "starlette (>=0.17.1)",
      "tomli (>=2.0.1)",
      "typing-extensions (>=4.1.1)",
      "uvicorn (>=0.17.6)",
      "watchgod (>=0.8.2)",
      "websockets (>=10.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "Simple but customize captcha generator( image + voice )",
    "version": "0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13601080,
  "releases": {
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eae046d0aea290a5b5bfbee77c8c3e09ea18edb1d876e314147abfda7941717d",
          "md5": "337dd4c31d920e40b6519a11acf41974",
          "sha256": "4671af297a21d734f839ad2302b2c7951904f6ecb2040391fc00efc69ed163a7"
        },
        "downloads": -1,
        "filename": "demure_logger-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "337dd4c31d920e40b6519a11acf41974",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 44013,
        "upload_time": "2022-04-23T16:11:14",
        "upload_time_iso_8601": "2022-04-23T16:11:14.885782Z",
        "url": "https://files.pythonhosted.org/packages/ea/e0/46d0aea290a5b5bfbee77c8c3e09ea18edb1d876e314147abfda7941717d/demure_logger-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "210286f0815953419634dcbf7d6af773c0ef00e747e7d9417109012dc961caff",
          "md5": "c579a006195c035d760c5191a0b1cf1b",
          "sha256": "2ca16c91ea0c07f65fd0394614d46e41fed5466dc549cfce7eb6361beda1b1d3"
        },
        "downloads": -1,
        "filename": "demure_logger-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c579a006195c035d760c5191a0b1cf1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45709,
        "upload_time": "2022-04-23T16:11:18",
        "upload_time_iso_8601": "2022-04-23T16:11:18.180249Z",
        "url": "https://files.pythonhosted.org/packages/21/02/86f0815953419634dcbf7d6af773c0ef00e747e7d9417109012dc961caff/demure_logger-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eae046d0aea290a5b5bfbee77c8c3e09ea18edb1d876e314147abfda7941717d",
        "md5": "337dd4c31d920e40b6519a11acf41974",
        "sha256": "4671af297a21d734f839ad2302b2c7951904f6ecb2040391fc00efc69ed163a7"
      },
      "downloads": -1,
      "filename": "demure_logger-0.9.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "337dd4c31d920e40b6519a11acf41974",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 44013,
      "upload_time": "2022-04-23T16:11:14",
      "upload_time_iso_8601": "2022-04-23T16:11:14.885782Z",
      "url": "https://files.pythonhosted.org/packages/ea/e0/46d0aea290a5b5bfbee77c8c3e09ea18edb1d876e314147abfda7941717d/demure_logger-0.9.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "210286f0815953419634dcbf7d6af773c0ef00e747e7d9417109012dc961caff",
        "md5": "c579a006195c035d760c5191a0b1cf1b",
        "sha256": "2ca16c91ea0c07f65fd0394614d46e41fed5466dc549cfce7eb6361beda1b1d3"
      },
      "downloads": -1,
      "filename": "demure_logger-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c579a006195c035d760c5191a0b1cf1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 45709,
      "upload_time": "2022-04-23T16:11:18",
      "upload_time_iso_8601": "2022-04-23T16:11:18.180249Z",
      "url": "https://files.pythonhosted.org/packages/21/02/86f0815953419634dcbf7d6af773c0ef00e747e7d9417109012dc961caff/demure_logger-0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}