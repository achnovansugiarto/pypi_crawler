{
  "info": {
    "author": "AIDynamicAction",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/AIDynamicAction/rcognita/d0c7d1173b51e0ed5df044cf1fb1c92eca53d819/gfx/logo/rcognita-logo.png\n\nAbout\n=====\n\n``rcognita`` is a flexibly configurable framework for agent-enviroment simulation with a menu of predictive and safe\nreinforcement learning controllers. It is made for researchers and engineers in reinforcement learning and control theory.\nA detailed documentation is available `here <https://aidynamicaction.github.io/rcognita/>`__.\n\nExample run with a mobile robot simulation\n------------------------------------------\n\n.. image:: https://raw.githubusercontent.com/AIDynamicAction/rcognita/d0c7d1173b51e0ed5df044cf1fb1c92eca53d819/gfx/demo/3wheel_robot_exm_run.gif\n\nTable of content\n================\n\n-  `Installation <#Installation>`__\n    -  `Basic <#Basic>`__\n    -  `With model estimation tools <#With-model-estimation-tools>`__\n-  `General description <#General-description>`__\n-  `Usage <#Usage>`__\n    -  `Settings <#Settings>`__\n    -  `Advanced customization <#Advanced-customization>`__\n    -  `Experimental things <#Experimental-things>`__\n-  `Related literature <#Related-literature>`__\n-  `Closing remarks <#Closing-remarks>`__\n\nInstallation\n============\n\nBasic\n-----\n\n`To table of content <#Table-of-content>`__\n\nRun in terminal:\n\n::\n\n    pip3 install rcognita\n\nAlternatively, one can install the package direcly form the master\nbranch. The following instruction is for Unix-based systems, assuming a\nterminal and Python3 interpreter.\n\n::\n\n    git clone https://gitflic.ru/project/aidynamicaction/rcognita.git\n    cd rcognita\n    pip3 install .\n\nNotice that your Python 3 interpreter might be called something else,\nfor instance, just ``python``.\n\nWith PyTorch for neural networks\n--------------------------------\nIt is common for deep reinforcement learning software to make use of\nadvanced frameworks for building and training neural networks. ``rcognita``\nsupports integration with PyTorch, a powerful Python interface for deep learning.\n\nHere is how to install ``rcognita`` together with PyTorch.\n\n::\n\n    pip3 install rcognita[TORCH]\n\nor\n\n::\n\n    git clone https://gitflic.ru/project/aidynamicaction/rcognita.git\n    cd rcognita\n    pip3 install .[TORCH]\n\nWith CasADi for nonlinear optimization\n---------------------------------------\nIn model predictive control it is important that one can time-efficiently optimize over numerically integrated\nODEs. ``rcognita`` interfaces with CasADi, a python package that offers an efficient and convenient\ntoolset for optimization tasks of this kind.\n\nHere is how to install ``rcognita`` together with CasADi.\n\n::\n\n    pip3 install rcognita[CASADI]\n\nor\n\n::\n\n    git clone https://gitflic.ru/project/aidynamicaction/rcognita.git\n    cd rcognita\n    pip3 install .[CASADI]\n\n**You can use both CasADi and PyTorch. They are not mutually exclusive.**\n\n\n\nWhat is ``rcognita``?\n=====================\n\n`To table of content <#Table-of-content>`__\n\n.. image:: https://gitflic.ru/project/aidynamicaction/rcognita/blob/raw?file=gfx%2Fflowchart.png&commit=76314f91ccd6d5273b3c1feccca2a5655714cb0d\n\n``rcognita`` Python package is designed for hybrid simulation of agents\nand environments (i.e. controllers and control-systems). ``rcognita`` allows one to\nsimulate either discrete-time systems (environments) or continuous-time systems (environments)\nwith sampled feedback (agents that react to their observations at a finite frequency).\n\nFor instance, if you have a model of a robot and an agent of some kind, ``rcognita`` would allow\nyou to see how the robot would behave if this agent controlled the robot by\nissuing its actions at a given rate.\n\n::\n\n    import numpy as np\n    from rcognita.simulator import Simulator\n    from rcognita.systems import System\n    from rcognita.controllers import Controller\n    from scenarios import EpisodicScenario\n\n    class MyRobotSystem(System):\n        ...  ## Define the robot\n\n    class MyAgent(Controller):\n        ...  ## Define what your agent does\n\n    rate = 0.1  ## The agent performs actions once every 100ms\n    initial_state = np.zeros(...) ## In which state the robot will start\n\n    robot = MyRobotSystem(...)\n    controller = MyAgent(...)\n    simulator = Simulator(robot, initial_state, sampling_time=rate)\n    scenario = EpisodicScenario(simulator, controller)\n    scenario.run()\n\nNot only can you use ``rcognita`` to simulate things, but you can also\nuse it to run your training and tuning. ``Scenario`` objects are also meant to\nmanage your training pipeline for RL (if needed):\n\n::\n\n    import numpy as np\n    from rcognita.simulator import Simulator\n    from rcognita.systems import System\n    from rcognita.controllers import RLController\n    from rcognita.actors import Actor\n    from rcognita.critics import Critic\n    from scenarios import EpisodicScenario\n\n    class MyRobotSystem(System):\n        ...  ## Define the robot\n\n    class MyActor(Actor):\n        ...  ## Your custom actor\n\n    class MyCritic(Critic):\n        ...  ## Your custom critic\n\n    def my_reward(state, action):\n        return ... ## How the agent is rewarded\n\n    rate = 0.1  ## The agent performs actions once every 100ms\n    initial_state = np.zeros(...) ## In which state the robot will start\n\n    robot = MyRobotSystem(...)\n    actor = MyActor(...)\n    critic = MyCritic(...)\n    controller = RLController(actor=actor, critic=critic)\n    simulator = Simulator(robot, initial_state, sampling_time=rate)\n    scenario = EpisodicScenario(simulator, controller, objective=my_reward)\n    scenario.run()\n\nThe main intended advantages of ``rcognita`` are customizability and modularity.\nFor instance if you wanted to try out your own numerical methods for integrating\nODEs and whatnot, you could simply:\n::\n\n    class MySimulator(Simulator):\n        ... ## Your methods\n\nThis applies to just about any entity in ``rcognita``. Want a more advanced\ntraining pipeline? All it takes is too derive your own ``Scenario``.\nWant to push the boundaries of what an RL agent looks like? Say no more:\njust derive a child from ``RLController`` and modify it to your heart's content.\n\nBe sure to hit the API docs (or the source code) if you want figure out the\nbest way of deriving something yourself. In most cases you'll find that\nonly a few methods need to be overriden to produce the desired result. In fact,\nin a great number of cases no deriving is necessary.\n\n``rcognita``'s config pipeline\n==============================\nRL and control theory are infamous for having overwhelmingly many\nentities to keep track of: agents, environments, models, training routines,\nintegrators, predictors, observers, optimizers... Each of the above in turn\nhas a number of parameters of its own, and to make things worse,\nyour setup will most likely be highly sensitive to all of these. Therefore\ntweaking and tuning your setup may and will get tedeous unless you figure\nout a way to do it conveniently and systematically.\n\nEnter hierarchical configs! Rcognita has a builtin hierarchical config pipeline\nbuilt on top of ``hydra``. It must be noted that a regular ``hydra``\nconfig will run on ``rcognita`` just fine (but not vice versa), since\n``rcognita`` includes all of the original features and syntaxes of ``hydra``.\nHowever ``rcognita`` additionally provides convenient syntactic sugars that\n``hydra`` does not posses.\n\nKeep in mind that **using rcognita's config pipeline IS NOT mandatory** and\nthe examples mentioned in the previous section are totally valid. However, in\na more realistic usecase one will often find that the utility of\n``rcognita``'s configs is **IMMEASURABLE**.\nThe reader is thus encouraged to familiarize themselves\nwith ``hydra``.\n\nExample 1\n---------\nConsider the following files in your hypothetical project.\n\n``my_utilities.py``:\n::\n\n    from rcognita.systems import System\n    from rcognita.controllers import Controller\n\n    class MyRobotSystem(System):\n        def __init__(self, x, y, z):\n            ...\n\n        def ...\n\n    class MyAgent(Controller):\n        def __init__(self, a, b, c):\n            ...\n\n        def ...\n\n\n``my_config.yaml``:\n::\n\n    rate: 0.1\n\n    initial_state: = numpy.zeros(5) # The '=' lets us evaluate this\n                                    # python code 'numpy.zeros(5)'\n\n    robot:\n        _target_: my_utilities.MyRobotSystem # '_target_' is a special field\n        x: 1                                 # that should point to a class\n        y: 2\n        z: 3\n\n    agent:\n        _target_: my_utilities.MyAgent\n        a: 3\n        b: 4\n        c: 5\n\n``main.py``:\n::\n\n    import rcognita as r\n    from rcognita.simulator import Simulator\n    from rcognita.scenarios import EpisodicScenario\n    import my_utilities\n    import numpy\n\n\n    @r.main(\n        config_path=\".\",\n        config_name=\"my_config\",\n    )\n    def my_app(config):\n        robot = ~config.robot      # '~' instantiates the object\n        controller = ~config.agent # described in the corresponding\n                                   # field. It makes use of '_target_'.\n        simulator = Simulator(robot,\n                              config.initial_state,\n                              sampling_time=config.rate)\n        scenario = EpisodicScenario(simulator, controller)\n        scenario.run()\n\n\n    if __name__ == \"__main__\":\n        my_app()\n\nThe above example project is the equivalent to the first example in section\n\"What is ``rcognita``?\". Here instead of providing args for\nMyRobotSystem and MyAgent inside the python script, we instead specify\nboth the classes and their args in ``my_config.yaml``.\n\nNote, that the operator ``~`` is necessary to let rcognita know that\nthe corresponding node within the config describes an instance of a class\nand we would like to instantiate it\n(as opposed to accessing it as a config-dictionary).\n\nIn other words ``~config.robot`` evaluates to\n::\n\n    <my_utilities.MyRobotSystem object at 0x7fe53aa39220>\n\n, while ``config.robot`` evaluates to\n::\n\n    {'_target_':'my_utilities.MyRobotSystem', 'x':1, 'y':2, 'z':3}\n\nExample 2\n---------\nNote, that when using this config paradigm nothing impedes us from instantiating\n**literally everything** directly inside the config, leaving the python script\nalmost empty. Here's an example of how this can be done:\n\n``my_utilities.py``:\n::\n\n    from rcognita.systems import System\n    from rcognita.controllers import Controller\n\n    class MyRobotSystem(System):\n        def __init__(self, x, y, z):\n            ...\n\n        def ...\n\n    class MyAgent(Controller):\n        def __init__(self, a, b, c):\n            ...\n\n        def ...\n\n\n``my_config.yaml``:\n::\n\n    _target_: rcognita.scenarios.Scenario\n\n    simulator:\n        _target_: rcognita.simulator.Simulator\n        system:\n            _target_: my_utilities.MyRobotSystem\n            x: 1\n            y: 2\n            z: 3\n        initial_state: = numpy.zeros(5)\n        sampling_time: 0.1\n\n    controller:\n        _target_: my_utilities.MyAgent\n        a: 3\n        b: 4\n        c: 5\n\n``main.py``:\n::\n\n   import rcognita as r\n   import my_utilities\n   import numpy\n\n\n    @r.main(\n        config_path=\".\",\n        config_name=\"my_config\",\n    )\n    def my_app(config):\n        scenario = ~config\n        scenario.run()\n\n\n    if __name__ == \"__main__\":\n        my_app()\n\nThis way of doing it has numerous advantages. Notably, you can now\nconveniently override any input parameters, when running the script like so\n::\n\n    python3 main.py controller.a=10\n\nor even\n\n::\n\n    python3 main.py simulator._target_=MyOwnBetterSimulator\n\n\nA more detailed tutorial on building ``rcognita`` applications using the config pipeline\ncan be found `here <https://rcognita.website.yandexcloud.net/tutorials.html#>`__ .\n\nPresets\n=======\n\n`To table of content <#Table-of-content>`__\n\nTo get started with using ``rcognita`` the reader is advised to examine some concrete usecases.\n``rcognita``'s `repository <https://gitflic.ru/project/aidynamicaction/rcognita>`_ contains an\nassortment of presets, which can be both studied and conveniently repurposed.\n\nThe ``presets`` directory contains several working  ``rcognita`` projects:\n\n- ``presets/3wrobot``: Parking a three wheeled robot.\n- ``presets/3wrobot_ni``: Parking a massless three wheeled robot.\n- ``presets/grid_world``: Path-finding in a gridworld.\n- ``presets/inverted_pendululm``: Balancing and inverted pendulum.\n- ``presets/2tank``: Equalizing water levels in a two-tank system.\n\nFor instance, if one wanted to run the three wheeled robot parking project,\nall it would take is to execute the following:\n::\n\n    cd presets/3wrobot\n    python3 main.py\n\nOne could also override some of the global parameters when running the script.\nFor instance:\n::\n\n    python3 main.py sampling_time=0.2 time_final=20\n\nBelow is a table detailing some of the available overridable parameters for\nthe presets:\n\n+-------------------------+-------------+--------------------------------------------------------+\n| Parameter               | Type        | Description                                            |\n+=========================+=============+========================================================+\n| ``sampling_time`` *     | ``float``   | Controller sampling time                               |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``time_final`` *        | ``float``   | Final time                                             |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``state_init``          | ``ndarray`` | Initial state                                          |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``no_visual``           | ``bool``    | Flag to supress graphical output                       |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``prediction_horizon`` *| ``int``     | Horizon length (in steps) for predictive controllers   |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``data_buffer_size``    | ``int``     | Critic stack size (number of TDs)                      |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``discount_factor``     | ``float``   | Discount factor                                        |\n+-------------------------+-------------+--------------------------------------------------------+\n| ``ode_backend`` *       | ``str``     | ODE solving backend for simulation. \"SCIPY\" or \"CASADI\"|\n+-------------------------+-------------+--------------------------------------------------------+\n| ``animation_speedup``   | ``str``     | Makes the animation ``animation_speedup`` times faster.|\n+-------------------------+-------------+--------------------------------------------------------+\n\nParameters marked with a \"*\" are not present in ``presets/grid_world``.\n\nIt must be noted that one could in theory override any of the parameters\ndefined in the preset's config (i.e. ``presets/*/scenario.yaml``), because\nthat's just how the config pipeline works.\nFor instance, if you wanted to speed up you simulation you could try messing\nwith the ODE solver's tolerances:\n::\n\n    python3 main.py simulator.atol=0.1 simulator.rtol=0.1\n\nYou could, of course, instead just edit the config.\n\nRelated literature\n==================\n\n`To table of content <#Table-of-content>`__\n\n-  `Online actor-critic via stacked Q-learning and Kalman filter for\n   model estimation <https://arxiv.org/abs/2007.03999>`__\n-  `More on fusion of model-predictive control and reinforcement\n   learing <https://arxiv.org/abs/1906.02580>`__\n-  `More on \"RLSTAB\", joint actor-critic\n   (stabilizing) <https://arxiv.org/abs/2006.14034>`__\n-  `Some comparison of model-predictive control vs. stacked\n   Q-learning <https://arxiv.org/abs/2108.04802>`__\n\nClosing remarks\n===============\n\n`To table of content <#Table-of-content>`__\n\nPlease contact `me <mailto:p.osinenko@gmail.com>`__ for any inquiries\nand don't forget to give me credit for usage of this code. If you are\ninterested in stacked Q-learning, kindly read the\n`paper <https://arxiv.org/abs/2007.03999>`__.\n\nOriginal author: P. Osinenko, 2020\n\nBibtex reference\n----------------\n\n::\n\n    @misc{rcognita2020,\n    author =   {Pavel Osinenko},\n    title =    {Rcognita: a framework for hybrid agent-enviroment simultion},\n    howpublished = {\\url{https://github.com/AIDynamicAction/rcognita}},\n    year = {2020}\n    }\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitflic.ru/project/aidynamicaction/rcognita",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rcognita",
    "package_url": "https://pypi.org/project/rcognita/",
    "platform": null,
    "project_url": "https://pypi.org/project/rcognita/",
    "project_urls": {
      "Homepage": "https://gitflic.ru/project/aidynamicaction/rcognita"
    },
    "release_url": "https://pypi.org/project/rcognita/0.2.1/",
    "requires_dist": [
      "matplotlib (>=3.1.3)",
      "mpldatacursor-rcognita (==0.7.2)",
      "numpy (>=1.20.1)",
      "scipy (>=1.5.0)",
      "svgpath2mpl (==0.2.1)",
      "tabulate (>=0.8.7)",
      "systems (==0.1.0)",
      "shapely (==1.7.1)",
      "tabulate (==0.8.7)",
      "recursive-monkey-patch (==0.4.0)",
      "omegaconf (>=2.3.0)",
      "hydra-core (>=1.3.1)",
      "casadi (>=3.5.5) ; extra == 'casadi'",
      "sippy-rcognita (==0.2.1) ; extra == 'sippy'",
      "torch (>=1.12.1) ; extra == 'torch'"
    ],
    "requires_python": ">=3.6",
    "summary": "rcognita is a framework for hybrid agent-environment loop simulation, with a library of predictive and stabilizing reinforcement learning setups",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17450454,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e08a6079df1a8499d4f7d933762cdd13ea6f115b19bdf4b2b71de8d17213c38c",
          "md5": "1200756cc5cecc85fac416a868356124",
          "sha256": "51e85d0ec035e75cb8c125d0e05b2faca4d4a630a2b55b48283ffc84fd9ef893"
        },
        "downloads": -1,
        "filename": "rcognita-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1200756cc5cecc85fac416a868356124",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39040,
        "upload_time": "2021-09-13T20:52:39",
        "upload_time_iso_8601": "2021-09-13T20:52:39.746894Z",
        "url": "https://files.pythonhosted.org/packages/e0/8a/6079df1a8499d4f7d933762cdd13ea6f115b19bdf4b2b71de8d17213c38c/rcognita-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ea6c1aaf8e324d241e60c840b8495db63de2580ef6fc8e53e3365c5ab564c5f",
          "md5": "c3b01463b252a46f2128c9a21aaf9390",
          "sha256": "65edbd68768e0dd3ae2ca52148ecf47c49a96e86bddfde633386aedb41351b17"
        },
        "downloads": -1,
        "filename": "rcognita-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3b01463b252a46f2128c9a21aaf9390",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38964,
        "upload_time": "2021-09-14T01:42:13",
        "upload_time_iso_8601": "2021-09-14T01:42:13.449373Z",
        "url": "https://files.pythonhosted.org/packages/9e/a6/c1aaf8e324d241e60c840b8495db63de2580ef6fc8e53e3365c5ab564c5f/rcognita-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23b0d9a8bbab5c7abd767880562f56b4e966e94bc20e9ef716b2b785dec9e968",
          "md5": "79e7b5097405f01cf11b1adb8c2d2160",
          "sha256": "8d5b2cbb7d9aa9cb68fcf6ae9d36e75de019a26867d14c981eaf5dc8e8425f7e"
        },
        "downloads": -1,
        "filename": "rcognita-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79e7b5097405f01cf11b1adb8c2d2160",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37407,
        "upload_time": "2021-09-14T12:00:04",
        "upload_time_iso_8601": "2021-09-14T12:00:04.552225Z",
        "url": "https://files.pythonhosted.org/packages/23/b0/d9a8bbab5c7abd767880562f56b4e966e94bc20e9ef716b2b785dec9e968/rcognita-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f644d6e45ff0a750e4a062ac6d5b7dbbd1942b2c6aa7690e5055400bff4b829",
          "md5": "866820cc2e301a0fd675abd3dc436d81",
          "sha256": "16a324dc24d38a8c6ff55b0e4013265481b0061d5c395f0fe41edbcc6a67cd5e"
        },
        "downloads": -1,
        "filename": "rcognita-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "866820cc2e301a0fd675abd3dc436d81",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38960,
        "upload_time": "2021-09-14T12:00:06",
        "upload_time_iso_8601": "2021-09-14T12:00:06.257879Z",
        "url": "https://files.pythonhosted.org/packages/5f/64/4d6e45ff0a750e4a062ac6d5b7dbbd1942b2c6aa7690e5055400bff4b829/rcognita-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6752860ba5459874f45991dc3ae11dc97150aa8cb45b5adaab3d6950c9ff467a",
          "md5": "da088170b7721ac4899beaa961081d74",
          "sha256": "ce8cd55a55d669589447a7fb0cada1511761273f05e6f5ad161560d0ec5e8109"
        },
        "downloads": -1,
        "filename": "rcognita-0.1rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da088170b7721ac4899beaa961081d74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33494,
        "upload_time": "2021-09-07T16:32:34",
        "upload_time_iso_8601": "2021-09-07T16:32:34.579457Z",
        "url": "https://files.pythonhosted.org/packages/67/52/860ba5459874f45991dc3ae11dc97150aa8cb45b5adaab3d6950c9ff467a/rcognita-0.1rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f06447fde7e06096e574d63ee015970a4b1182db43680ebd7d78fd18565c4ca9",
          "md5": "998adad5e4af541a129c5e6f995b1872",
          "sha256": "e44bfab3960e56201872142a62dd7402e1fe1b101af8faf929031dbca2021cb0"
        },
        "downloads": -1,
        "filename": "rcognita-0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "998adad5e4af541a129c5e6f995b1872",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33277,
        "upload_time": "2021-09-07T16:32:36",
        "upload_time_iso_8601": "2021-09-07T16:32:36.625060Z",
        "url": "https://files.pythonhosted.org/packages/f0/64/47fde7e06096e574d63ee015970a4b1182db43680ebd7d78fd18565c4ca9/rcognita-0.1rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c0596adb488cb692a0fea9fba5a902b407c1fbd8fdaa3bcdca8c9fe64c8def4",
          "md5": "a6e9c61196f7f0cfe57b6021072164af",
          "sha256": "3db75688a38c567ed8f9f44ca833e23a8e130d468236571818d148c893aabb07"
        },
        "downloads": -1,
        "filename": "rcognita-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6e9c61196f7f0cfe57b6021072164af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 107533,
        "upload_time": "2022-12-30T10:33:04",
        "upload_time_iso_8601": "2022-12-30T10:33:04.872547Z",
        "url": "https://files.pythonhosted.org/packages/4c/05/96adb488cb692a0fea9fba5a902b407c1fbd8fdaa3bcdca8c9fe64c8def4/rcognita-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73a2e030cb42e725cd4dff915df864fac52f95d48e966adb2ad29eb331465307",
          "md5": "cdb773b3c72a1a485215b7881fa10cad",
          "sha256": "799465b1685fc2df5b1c00707ceadb3d0a3db0fafbcd26cad33e63bbe4416356"
        },
        "downloads": -1,
        "filename": "rcognita-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cdb773b3c72a1a485215b7881fa10cad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 93698,
        "upload_time": "2022-12-30T10:33:07",
        "upload_time_iso_8601": "2022-12-30T10:33:07.147065Z",
        "url": "https://files.pythonhosted.org/packages/73/a2/e030cb42e725cd4dff915df864fac52f95d48e966adb2ad29eb331465307/rcognita-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47a677d285717869f38418629f08c250e8592567c22feffae5bc983f9dcc3263",
          "md5": "c0311d9537e26843b046d85cc10d856a",
          "sha256": "e06ad3cb2c1f1acae7369489cb2119116da81c200d7b4876d571b36a02f61ade"
        },
        "downloads": -1,
        "filename": "rcognita-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0311d9537e26843b046d85cc10d856a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 100363,
        "upload_time": "2022-12-30T16:08:25",
        "upload_time_iso_8601": "2022-12-30T16:08:25.904361Z",
        "url": "https://files.pythonhosted.org/packages/47/a6/77d285717869f38418629f08c250e8592567c22feffae5bc983f9dcc3263/rcognita-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c60fef2c6dc8288da3b9b18fdad2b01e66e6821e3af5c42b49bc145d2eae9d8c",
          "md5": "050bfcdd7c503c9b3514b9c37a7e2b55",
          "sha256": "2a008eb5c829f3a1750b54428d99b3e776dd9d124bcb3599d0774333d78147cf"
        },
        "downloads": -1,
        "filename": "rcognita-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "050bfcdd7c503c9b3514b9c37a7e2b55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 92749,
        "upload_time": "2022-12-30T16:08:28",
        "upload_time_iso_8601": "2022-12-30T16:08:28.411463Z",
        "url": "https://files.pythonhosted.org/packages/c6/0f/ef2c6dc8288da3b9b18fdad2b01e66e6821e3af5c42b49bc145d2eae9d8c/rcognita-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47a677d285717869f38418629f08c250e8592567c22feffae5bc983f9dcc3263",
        "md5": "c0311d9537e26843b046d85cc10d856a",
        "sha256": "e06ad3cb2c1f1acae7369489cb2119116da81c200d7b4876d571b36a02f61ade"
      },
      "downloads": -1,
      "filename": "rcognita-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c0311d9537e26843b046d85cc10d856a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 100363,
      "upload_time": "2022-12-30T16:08:25",
      "upload_time_iso_8601": "2022-12-30T16:08:25.904361Z",
      "url": "https://files.pythonhosted.org/packages/47/a6/77d285717869f38418629f08c250e8592567c22feffae5bc983f9dcc3263/rcognita-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c60fef2c6dc8288da3b9b18fdad2b01e66e6821e3af5c42b49bc145d2eae9d8c",
        "md5": "050bfcdd7c503c9b3514b9c37a7e2b55",
        "sha256": "2a008eb5c829f3a1750b54428d99b3e776dd9d124bcb3599d0774333d78147cf"
      },
      "downloads": -1,
      "filename": "rcognita-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "050bfcdd7c503c9b3514b9c37a7e2b55",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 92749,
      "upload_time": "2022-12-30T16:08:28",
      "upload_time_iso_8601": "2022-12-30T16:08:28.411463Z",
      "url": "https://files.pythonhosted.org/packages/c6/0f/ef2c6dc8288da3b9b18fdad2b01e66e6821e3af5c42b49bc145d2eae9d8c/rcognita-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}