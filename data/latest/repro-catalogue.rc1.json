{
  "info": {
    "author": "The Alan Turing Institute Research Engineering Group",
    "author_email": "hut23@turing.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# repro-catalogue\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-7-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\nA command line tool to catalogue versions of data, code and results to support reproducibility of research projects.\n\n## Contents\n\n* [Introduction](#introduction)\n* [Installation](#installation)\n* [Getting started](#getting-started)\n  * [Catalogue overview](#catalogue-overview)\n  * [Available commands](#available-commands)\n* [Example usage](#example-usage)\n  * [Run analysis](#run-analysis)\n  * [Check outputs](#check-outputs)\n  * [Share outputs](#share-outputs)\n* [FAQs](#faqs)\n  * [Running in the wrong order](#running-in-the-wrong-order)\n  * [Intermediary data processing](#intermediary-data-processing)\n  * [Randomness](#randomness)\n\n## Introduction\n\nResearch projects are frequently updated - new data are added, and the code undergoes regular changes. Under these circumstances, it's easy to store results, yet lose track of the context in which they were produced.\n\nTo ensure reproducibility of any scientific results we need to reliably record:\n- what input data was used :floppy_disk:\n- what code was run :desktop_computer:\n- what outputs were produced :chart_with_upwards_trend:\n\nThe `catalogue` tool aids reproducibility by saving **hash values** of the input data and the results, along with the **git commit hash** of the code used to generate those results. The `catalogue` command line interface then allows the user to easily compare the hash values from different occasions on which the analysis was run so that changes to the input data, code and results can be identified and the impact on reproducibility can be understood.\n\n**Hash functions** map arbitrary sized data to a binary \"word\" of a fixed length. The mapping is deterministic and the generated hash values are (for all practical purposes) unique. This means that hashing the same file (or a directory of files) will always produce the same value unless something in the files has changed, in which case the hash function would produce a new value. Because the hash value of a given input is unique, comparing hash values is a quick and easy way to check whether two files are the same.\n\n## Installation\n\n```{bash}\ngit clone https://github.com/alan-turing-institute/repro-catalogue.git\ncd repro-catalogue\npip install .\n```\n\n## Getting started\n\n### Prerequisites\n\n**Data and code**\n\nTo use the tool, we assume you already have a project with some analysis code ready to run on your data. Your project structure might look something like this:\n\n```\n├── data/\n│   ├── my_data.csv\n├── analysis/\n│   ├── my_analysis.py\n├── results/\n```\n\n**Git**\n\nA pre-requisite for using `catalogue` is that the directory with the analysis code is a git repository. [Git](https://git-scm.com) is a really useful tool for version control (GitHub sits on top of git).\n\n**Command line interface**\n\nThe tool has a command line interface so you will need to open something like Terminal in macOS or Command Prompt in Windows to use it.\n\nThroughout, the tool will require you to provide paths to some directory or file. Note that the directory path will look different on different operating systems. On Linux and macOS it may look like `data/my_data.csv`, whereas on Windows it will be `data\\my_data.csv` (i.e., use a `\\` instead of `/`).\n\n### Catalogue overview\n\nThe `catalogue` tool comes with three commands (`engage`, `disengage`, `compare`) which should be run consecutively:\n\n```\nUSAGE\n  catalogue [-h] <command> [<arg1>] ... [<argN>]\n\nARGUMENTS\n  <command>       The command to execute\n  <arg>           The arguments of the command\n\nGLOBAL OPTIONS\n  -h (--help)     Display help message.\n\nAVAILABLE COMMANDS\n  engage          Run before an analysis. Saves hashes of `input_data` and `code`.\n  disengage       Run after an analysis. Check `input_data` and `code` hashes now\n                  are the same as at `engage`. Hash `output_data` and save all\n                  hashes to a `TIMESTAMP.json` file.\n  compare         Compare hashes.\n```\n\nNote that all arguments have default values which will be used if they are not provided. To see these use:\n\n```{bash}\ncatalogue <command> -h\n```\n### Available commands\n\n#### engage\n\nThis command is run before an analysis is conducted:\n\n```{bash}\ncatalogue engage --input_data <data directory> --code <code directory>\n```\n\nReplace `<data directory>` and `<code directory>` with the full or relative path to the data and code directories. In practice, this might look something like this:\n\n```{bash}\ncatalogue engage --input_data data --code analysis\n```\n\nThis will do a series of things. First it will check that the git working tree in our code folder is clean. It gives users a choice:\n\n```\nWorking directory contains uncommitted changes.\nDo you want to stage and commit all changes? (y/[n])\n```\n\nIf we choose to proceed, `catalogue` will stage and commit all changes in the code directory. Next it will create a temporary file `.lock` in json format:\n\n```json\n//catalogue_results/.lock\n{\n\"timestamp\" : {\n    \"engage\": \"<timestamp (of catalogue engage)>\"\n  },\n\"input_data\": {\n     \"<data_directory>\" : \"<hash of directory>\"\n   },\n\"code\" : {\n     \"<code_directory>\": \"<latest git commit hash>\"\n     }\n}\n```\n\nOnce catalogue is engaged, you can run your analysis.\n\n#### disengage\n\nThe `disengage` command is run **immediately after finishing an analysis** to version the results:\n\n```{bash}\ncatalogue disengage \\\n  --input_data <data directory> \\\n  --code <code directory> \\\n  --output_data <results directory>\n```\n\nReplace all `<...>`with path to the directory described. In practice, the command might look something like this:\n\n```{bash}\ncatalogue disengage --input_data data --code analysis --output_data results\n```\n\nThis checks that the `input_data` and `code` hashes match the hashes in `.lock` (created during `engage`). If they do, it will take hashes of the files in `output_data` and produce the following file:\n\n```json\n// catalogue_results/<TIMESTAMP>.json\n{\n\"timestamp\" : {\n     \"engage\": \"<timestamp (of .lock)>\",\n     \"disengage\": \"<timestamp (new)>\"\n   },\n\"input_data\": {\n     \"<data directory>\": \"<hash of directory>\"\n   },\n\"output_data\": {\n       \"<results directory>\":{\n           \"<output file 1>\": \"<hash of file>\",\n           \"<output file 2>\": \"<hash of file>\",\n           ...\n           }\n     },\n\"code\" : {\n     \"<code directory>\": \"<git commit hash>\"\n     }\n}\n```\n\nNote that the new file is saved in a `catalogue_results` directory.\n\n#### compare\n\nThe `compare` command can be used to compare two catalogue output files against each other:\n\n```{bash}\ncatalogue compare <TIMESTAMP1>.json <TIMESTAMP2>.json\n```\nThe arguments should be the path to the two files to be compared.\n\nFor example, I might want to compare results produced on different days to check nothing has changed in this period:\n\n```{bash}\ncd catalogue_results\ncatalogue compare 200510-120000.json 200514-120000.json\n```\n\nIf the hashes in the files are the same, this means the same analysis was run on the same data with the same outputs both times. In that case, `catalogue` will output something like:\n\n```\nresults differ in 1 places:\n=============================\ntimestamp\n\nresults matched in 3 places:\n==============================\ninput_data\ncode\noutput_data\n\nresults could not be compared in 0 places:\n============================================\n```\n\nIf only one input is provided to the `compare` command, then the input is compared with the current state of the working directory.\n\n## Example usage\n\nImagine that on a central sever we have a data repository\n```\n├── Data folder/\n│   ├── database release 1/\n│   ├── database release 2/\n⋮    ⋮\n│   └── version index\n```\n\nElsewhere, in our user directory, perhaps on another computer, things look like this.\n\n```\n├── latest_data/\n├── latest_code/\n├── results/\n│   ├── old_results_with_inputs_1/\n│   ├── old_results_with_inputs_2/\n│   └── latest_results/\n├── catalogue_results/\n│   ├── TIMESTAMP1.json\n│   ├── TIMESTAMP2.json\n│   ├── TIMESTAMP3.json\n│   └── TIMESTAMP4.json\n```\n\n### Run analysis\n\nWe've just made some minor tweaks to our code and now we want to run our analysis. Before we start running any of the scripts in our code folder, we run:\n\n```{bash}\ncatalogue engage --input_data latest_data --code latest_code\n```\n\nNow we run whatever we need to perform our analysis. Immediately after finishing this we run:\n\n```{bash}\ncatalogue disengage --input_data latest_data --output_data results/latest_results  --code latest_code\n```\n\nThis will produce the following file:\n\n```json\n// catalogue_results/TIMESTAMP5.json\n{\n\"timestamp\" : {\n     \"engage\": \"<timestamp (of .lock)>\",\n     \"disengage\": \"<timestamp (new)>\"\n   },\n\"input_data\": {\n     \"latest_data\" : \"<hash of directory>\"\n   },\n\"output_data\": {\n       \"results/latest results\":{\n           \"summary.txt\": \"<hash of file>\",\n           \"output.csv\": \"<hash of file>\",\n           \"metadata.json\": \"<hash of file>\"\n           }\n     },\n\"code\" : {\n     \"latest_code\": \"<git commit hash>\"\n     }\n}\n```\n\n### Check outputs\n\nLet's suppose that between TIMESTAMP4 and TIMESTAMP5 we modified the code to output a further file `summary.txt`, but that otherwise nothing has changed. We would like to check that our file `output.csv` hasn't changed but oops! We've just overwritten it. Luckily we can compare to the json at TIMESTAMP4.\n\n```\ncatalogue compare \\\n  catalogue_results/TIMESTAMP4.json \\\n  catalogue_results/TIMESTAMP5.json\n```\n\nLet us also suppose that one of the other files generated by our analysis, `metadata.json`, includes a timestamp. The diff would look something like this:\n\n```\nresults differ in 3 places:\n=============================\ntimestamp\ncode\nresults/latest_results/metadata.json\n\nresults matched in 2 places:\n==============================\ninput_data\nresults/latest_results/output.csv\n\nresults could not be compared in 1 places:\n============================================\nresults/latest_results/summary.text\n```\n\nOf course this is what we *want*:\n- The code has been updated to produce `summary.txt`, and the timestamps have changed\n- Our data and results have not changed at all\n- Our new file `summary.txt` could not be compared as that file was not present at TIMESTAMP4\n\nAlternatively, let's suppose that our changes to the code had affected our results, so that our `output.csv` file *has* changed. In that case `catalogue` would inform us of the problem without us having to permanently store the output of every analysis we run. The hashes alone would not be enough to recover the original TIMESTAMP4 version. But since we have recorded the timestamp, that information can help us track down the data version, and the git commit digest tells us exactly what version of the code is used, making it easier to try and reproduce those results should we wish to do so.\n\n### Share outputs\n\nWe can then send a zip file of the results to a colleague along with the hash json produced during the final analysis (`TIMESTAMP5.json`).\n\nThey can rerun the analysis and use `catalogue` to check that the json they received is the same as their own:\n\n```{bash}\ncatalogue compare TIMESTAMP4.json\n```\n\n## FAQs\n\n### Running in the wrong order\n\nThe commands `catalogue engage` and `catalogue disengage` are meant to be run in that order.\n\nThe `catalogue engage` command will check that a `.lock` file does *not* exist. If it does, it will warn:\n```\nAlready engaged (.lock file exists). To disengage run 'catalogue disengage...\nSee 'catalogue disengage --help' for details\n```\n\nThe `catalogue disengage` command will check that a `.lock` file exists. If it doesn't, it will warn:\n```\nNot currently engaged (could not find .lock file). To engage run 'catalogue engage...\nSee 'catalogue engage --help' for details\n```\n\n### Intermediary data processing\n\nIt is likely that the analysis includes some preprocessing steps. Ideally all of this preprocessing would be run automatically in synchrony with the rest of our code. In that case we consider it output data, and it should be contained in the `output_data` folder.\n\n### Randomness\n\n\nComparing two hashes tells you whether the hashed items are the same or different. This process cannot tell you if something is almost the same. If your analysis is non-deterministic, you will get a different hash every time.\n\nThere are several ways by which an analysis can be non-deterministic. One of the most common is the user of random numbers.\nTo deal with this, we recommend setting a random seed. Whatever language you're using should be able to provide you with documentation on how to do this - see, for example, the documentation for [Python](https://docs.python.org/3/library/random.html#random.seed).\n\nHashing tells you whether something is the same, or different. It cannot tell you if something is almost the same. If your analysis is non-deterministic, you will be getting a different hash every time. To deal with this, we recommend setting a random seed. Whatever language you're using should be able to provide you with documentation on how to do this.\n\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/LouiseABowler\"><img src=\"https://avatars1.githubusercontent.com/u/25640708?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Louise Bowler</b></sub></a><br /><a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=LouiseABowler\" title=\"Documentation\">📖</a> <a href=\"#ideas-LouiseABowler\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/pulls?q=is%3Apr+reviewed-by%3ALouiseABowler\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#projectManagement-LouiseABowler\" title=\"Project Management\">📆</a> <a href=\"#design-LouiseABowler\" title=\"Design\">🎨</a> <a href=\"#maintenance-LouiseABowler\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"http://isla.st\"><img src=\"https://avatars2.githubusercontent.com/u/23707851?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Isla</b></sub></a><br /><a href=\"#design-Islast\" title=\"Design\">🎨</a> <a href=\"#ideas-Islast\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=Islast\" title=\"Code\">💻</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=Islast\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://whitakerlab.github.io\"><img src=\"https://avatars1.githubusercontent.com/u/3626306?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kirstie Whitaker</b></sub></a><br /><a href=\"#design-KirstieJane\" title=\"Design\">🎨</a> <a href=\"#ideas-KirstieJane\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#infra-KirstieJane\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://sgibson91.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/44771837?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sarah Gibson</b></sub></a><br /><a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=sgibson91\" title=\"Code\">💻</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/pulls?q=is%3Apr+reviewed-by%3Asgibson91\" title=\"Reviewed Pull Requests\">👀</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kevinxufs\"><img src=\"https://avatars2.githubusercontent.com/u/48526846?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kevinxufs</b></sub></a><br /><a href=\"https://github.com/alan-turing-institute/repro-catalogue/pulls?q=is%3Apr+reviewed-by%3Akevinxufs\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#userTesting-kevinxufs\" title=\"User Testing\">📓</a></td>\n    <td align=\"center\"><a href=\"https://github.com/edaub\"><img src=\"https://avatars0.githubusercontent.com/u/45598892?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Eric Daub</b></sub></a><br /><a href=\"#design-edaub\" title=\"Design\">🎨</a> <a href=\"#ideas-edaub\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=edaub\" title=\"Code\">💻</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=edaub\" title=\"Documentation\">📖</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/pulls?q=is%3Apr+reviewed-by%3Aedaub\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#maintenance-edaub\" title=\"Maintenance\">🚧</a> <a href=\"#projectManagement-edaub\" title=\"Project Management\">📆</a></td>\n    <td align=\"center\"><a href=\"https://github.com/radka-j\"><img src=\"https://avatars2.githubusercontent.com/u/29207091?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Radka Jersakova</b></sub></a><br /><a href=\"#design-radka-j\" title=\"Design\">🎨</a> <a href=\"#ideas-radka-j\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=radka-j\" title=\"Code\">💻</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/pulls?q=is%3Apr+reviewed-by%3Aradka-j\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/alan-turing-institute/repro-catalogue/commits?author=radka-j\" title=\"Documentation\">📖</a> <a href=\"#maintenance-radka-j\" title=\"Maintenance\">🚧</a> <a href=\"#projectManagement-radka-j\" title=\"Project Management\">📆</a> <a href=\"#infra-radka-j\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alan-turing-institute/repro-catalogue",
    "keywords": "cli-tool management version-control hashing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "repro-catalogue",
    "package_url": "https://pypi.org/project/repro-catalogue/",
    "platform": "",
    "project_url": "https://pypi.org/project/repro-catalogue/",
    "project_urls": {
      "Homepage": "https://github.com/alan-turing-institute/repro-catalogue"
    },
    "release_url": "https://pypi.org/project/repro-catalogue/1.0.0/",
    "requires_dist": [
      "gitpython"
    ],
    "requires_python": ">=3.6",
    "summary": "Tool for reproducible analyses",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7240689,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dccc32d7b753bc564beb369812768082a8de9a3492226c0f4ced64a0f2b7e4ed",
          "md5": "04d5dcfae457e2ac095439fbfc7fc664",
          "sha256": "15d97b41f68ce79516bad36116766876848b2c7fc45892847a9272c90cc0c9de"
        },
        "downloads": -1,
        "filename": "repro_catalogue-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04d5dcfae457e2ac095439fbfc7fc664",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17667,
        "upload_time": "2020-05-14T13:39:43",
        "upload_time_iso_8601": "2020-05-14T13:39:43.974435Z",
        "url": "https://files.pythonhosted.org/packages/dc/cc/32d7b753bc564beb369812768082a8de9a3492226c0f4ced64a0f2b7e4ed/repro_catalogue-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14594afc86906fe29e824761a7f99bb1f0c57700f05cefd2d77774ddaae21f3",
          "md5": "294b4f1c31b7943bd28e750f64c46f78",
          "sha256": "12582b2a2cdda373da19a5b9a084dc671f69f9b6d37bf45167c0dcd95ca1e43f"
        },
        "downloads": -1,
        "filename": "repro-catalogue-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "294b4f1c31b7943bd28e750f64c46f78",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20947,
        "upload_time": "2020-05-14T13:39:45",
        "upload_time_iso_8601": "2020-05-14T13:39:45.976159Z",
        "url": "https://files.pythonhosted.org/packages/d1/45/94afc86906fe29e824761a7f99bb1f0c57700f05cefd2d77774ddaae21f3/repro-catalogue-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dccc32d7b753bc564beb369812768082a8de9a3492226c0f4ced64a0f2b7e4ed",
        "md5": "04d5dcfae457e2ac095439fbfc7fc664",
        "sha256": "15d97b41f68ce79516bad36116766876848b2c7fc45892847a9272c90cc0c9de"
      },
      "downloads": -1,
      "filename": "repro_catalogue-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "04d5dcfae457e2ac095439fbfc7fc664",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17667,
      "upload_time": "2020-05-14T13:39:43",
      "upload_time_iso_8601": "2020-05-14T13:39:43.974435Z",
      "url": "https://files.pythonhosted.org/packages/dc/cc/32d7b753bc564beb369812768082a8de9a3492226c0f4ced64a0f2b7e4ed/repro_catalogue-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d14594afc86906fe29e824761a7f99bb1f0c57700f05cefd2d77774ddaae21f3",
        "md5": "294b4f1c31b7943bd28e750f64c46f78",
        "sha256": "12582b2a2cdda373da19a5b9a084dc671f69f9b6d37bf45167c0dcd95ca1e43f"
      },
      "downloads": -1,
      "filename": "repro-catalogue-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "294b4f1c31b7943bd28e750f64c46f78",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20947,
      "upload_time": "2020-05-14T13:39:45",
      "upload_time_iso_8601": "2020-05-14T13:39:45.976159Z",
      "url": "https://files.pythonhosted.org/packages/d1/45/94afc86906fe29e824761a7f99bb1f0c57700f05cefd2d77774ddaae21f3/repro-catalogue-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}