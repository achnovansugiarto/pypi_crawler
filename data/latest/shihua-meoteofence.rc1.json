{
  "info": {
    "author": "shihua",
    "author_email": "15021408795@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n\n# Meoteofence-数值天气预报数据预处理工具\n\n![shields_version](/static/shields_version.svg)    ![shields_license](/static/shields_license.svg)    ![shields_author](/static/shields_author.svg)    ![shiedls_python](/static/shields_python.svg)\n\n![meoteofencesymbol](/static/meoteofencesymbol.JPG)\n\n## 介绍\n+ meoteofence是数值天气预报的预处理程序，主要用于根据起始时间、预报时间、空间层次、气象物理量和台站坐标网格五个维度对原始气象数据进行分割。主要技术使用HDF5组织分析后的矩阵数据（以加速磁盘IO），使用hook技术组织代码（方便扩展，动态挂载），并在预测时间级别添加并行处理（使用multiprocessing以异步非阻塞方式实现）。\n\n\n## 安装\nmeoteofence采用Python开发，得益于Python良好的社区环境，安装支持Pythonic风格的各种管理器。\n```\n\t$ pip install meoteofence-0.1-xxxxxxxxxxxx.whl\n```\n\n\n## 快速指南\n\n### python-sdk使用\n+ meoteofence提供python-sdk的使用方式\n\n+ meoteofence设计为三级API。\n\n  + 第一级API为__init__.py中的基础操作函数，包括根据给定坐标点形成对应分辨率网格，HDF5文件读写操作以及使用pygrib从grib2文件中读取数据矩阵。\n\n  + 第二级API为组合一级API进行气象数据预处理的必要步骤，主要包括四步：\n\n    + （1）根据场站坐标确定需求的区域（使用正方形网格）\n    + （2）使用pygrib从grib2中抽取（1）步骤中正方形网格上的对应数据矩阵\n    + （3）按照气象物理量-空间层级两个维度的层次将矩阵数据组织存储在HDF5中\n    + （4）使用scipy对抽取的结果数据从时间维度进行内插值（插值步骤：1.对两个时间点的数据文件夹下的数据进行解析抽取存储到HDF5文件中；2.对处理后的HDF5文件进行上钻操作，拼接两个时间点的数据矩阵；3.从拼接的数据矩阵进行时间维度上的内插值，然后选择前96点作为最终结果；注意，使用两天数据是为了避免一天数据插值会始终少3个点的缺陷）\n\n  + **第三级API（推荐）并行处理流程，优化速度；抽取算法应用必要的API，简化操作，适合不同程度开发人员使用。大致流程分为两步，第一步，气象数据预抽取解析，该步骤属低频操作，主要为了降低数据量，利用HDF5提高磁盘IO速度；第二步，对数据进行上钻操作，该步骤属高频操作，主要为了方便查询，解耦耗费IO的数据重组织和数据查询。**\n+ 以下为三级API的使用流程示例：\n\n+ 载入必要程序包\n\n```python\nfrom meoteofence.interface import Meoteodata,data_drill_up,data_interpolate\nfrom meoteofence import hdf5_read_ndarray\nimport pandas as pd\nimport numpy as np\n```\n\n+ 第一步，气象数据预抽取解析（示例中data文件夹为下载的原始气象数据，data_handled为预抽取解析后的气象数据存储路径，第二步数据上钻都在此文件夹中的数据上进行）\n\n```python\n### 一次执行多个文件夹\nfolders = ['20221123','20221124']\nfor tmp_folder in folders:\n    ### 创建气象数据对象\n    ### 配置初始参数，生成气象数据处理对象\n    meoteodata = Meoteodata(base_folder_path='./data/{}/'.format(tmp_folder),\n                            hdf5_store_path_pre= './data_handled/{}/'.format(tmp_folder),\n                            station_location = (35.23,95.24),\n                            variable_name_list = ['Temperature','Relative humidity','Total Cloud Cover','Wind speed (gust)'],\n                            resolution_ratio = 0.25,\n                            grid_size = 6,\n                            n_jobs = 24)\n    ### 开始执行气象预处理程序\n    result = meoteodata.run()\n    # result = meoteodata.run(func=secondary_api_meoteo_pretreatment) \n    print(result)\n```\n\n+ 第二步，从气象抽取解析结果中进行上钻操作，并整合出96时间点位的气象物理量（该步骤为频繁使用步骤，基于HDF5保证数据读取速度）\n\n```python\n### 根据变量和层级对指定文件夹下的数据进行上钻操作\ntmp_concat_df_a = data_drill_up(hdf5_store_path_pre='./data_handled/20221123/',\n                                variable_name = 'Wind speed (gust)',\n                                level_name = 'level_0',\n                                forecast_time = 24)\ntmp_concat_df_b = data_drill_up(hdf5_store_path_pre='./data_handled/20221124/',\n                                variable_name = 'Wind speed (gust)',\n                                level_name = 'level_0',\n                                forecast_time = 24)\ntmp_concat_df = pd.concat([tmp_concat_df_a,tmp_concat_df_b],axis=0)\ntmp_concat_df = tmp_concat_df.reset_index(drop=True)\n### 对目标数据集合进行内插值\ntmp_interpolate_df = data_interpolate(tmp_concat_df=tmp_concat_df,index_delta=0.25,kind='linear')\ntmp_target_df = tmp_interpolate_df.iloc[:96,:]\nprint(tmp_target_df)\n```\n\n+ 另外，如需要对第一步的预抽取解析数据直接进行读取，可参造如下例程使用meoteofence的一级API：\n\n```python\n### 从指定h5中读取对应ndarray数据（此步骤为一级API，一般不使用，为更高级自定义操作提供支持）\nvariable_name = 'Wind speed (gust)'#'#'Temperature' # 'Wind speed (gust)'\ntmp_ndarray = hdf5_read_ndarray(h5path='./data_handled/20221124/f23.h5',\n                                var_name=variable_name,level_name='level_0') \n# level_100_m\nprint(tmp_ndarray)\n```\n\n\n## 设计\n+ 基于pluggy的hook技术实现灵活扩展性\n+ **基于HDF5存储解析后数据，提高数据IO速度**\n+ **基于multiprocessing实现异步非阻塞并行**\n\n### 技术列表\n+ HDF5存储技术\n+ 基于pluggy的hook技术\n+ 气象专用pygrib\n+ multiprocessing异步非阻塞并行\n+ 静态方法\n+ __all__\n\n\n### 设计UML图\n以下是设计的UML图：\n![meoteofenceuml](/static/MeoteofenceUML.png)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/redblue0216/Meoteofence",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shihua-meoteofence",
    "package_url": "https://pypi.org/project/shihua-meoteofence/",
    "platform": null,
    "project_url": "https://pypi.org/project/shihua-meoteofence/",
    "project_urls": {
      "Homepage": "https://github.com/redblue0216/Meoteofence"
    },
    "release_url": "https://pypi.org/project/shihua-meoteofence/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9.12",
    "summary": "Meoteofence is a preprocessing program for numerical weather forecasting, which is mainly used to segment the original meteorological data according to the five dimensions of starting time, prediction time, spatial hierarchy, meteorological physical quantities and station coordinate grid. The main technology uses HDF5 to organize the matrix data after analysis, uses hook technology to organize the code, and adds parallel processing at the prediction time level.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17285028,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e42126e46a85cdb4a6ba88df3ec1417ac28af2818914f6ce3f6d37ebd2d5689",
          "md5": "d49321073dde61b74ade39cf2e12cc09",
          "sha256": "0b9ed4c30f354f51593c839bc593b35e53d57c4d288d1d2ae01c28d5d453bfac"
        },
        "downloads": -1,
        "filename": "shihua_meoteofence-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d49321073dde61b74ade39cf2e12cc09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.12",
        "size": 21198,
        "upload_time": "2023-03-14T09:44:07",
        "upload_time_iso_8601": "2023-03-14T09:44:07.996412Z",
        "url": "https://files.pythonhosted.org/packages/9e/42/126e46a85cdb4a6ba88df3ec1417ac28af2818914f6ce3f6d37ebd2d5689/shihua_meoteofence-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b23ba08504fd754989929b479c10a9c221f87169224fbb2bb3fe2a95c04ae8a3",
          "md5": "0930ebf0a2cadc8c9207a99d673954b1",
          "sha256": "8cd45463855b221b28ff4664a65e4a17afc63dde1a07bc5116f679cb121af586"
        },
        "downloads": -1,
        "filename": "shihua-meoteofence-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0930ebf0a2cadc8c9207a99d673954b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.12",
        "size": 16268,
        "upload_time": "2023-03-14T09:44:09",
        "upload_time_iso_8601": "2023-03-14T09:44:09.881207Z",
        "url": "https://files.pythonhosted.org/packages/b2/3b/a08504fd754989929b479c10a9c221f87169224fbb2bb3fe2a95c04ae8a3/shihua-meoteofence-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e42126e46a85cdb4a6ba88df3ec1417ac28af2818914f6ce3f6d37ebd2d5689",
        "md5": "d49321073dde61b74ade39cf2e12cc09",
        "sha256": "0b9ed4c30f354f51593c839bc593b35e53d57c4d288d1d2ae01c28d5d453bfac"
      },
      "downloads": -1,
      "filename": "shihua_meoteofence-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d49321073dde61b74ade39cf2e12cc09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.12",
      "size": 21198,
      "upload_time": "2023-03-14T09:44:07",
      "upload_time_iso_8601": "2023-03-14T09:44:07.996412Z",
      "url": "https://files.pythonhosted.org/packages/9e/42/126e46a85cdb4a6ba88df3ec1417ac28af2818914f6ce3f6d37ebd2d5689/shihua_meoteofence-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b23ba08504fd754989929b479c10a9c221f87169224fbb2bb3fe2a95c04ae8a3",
        "md5": "0930ebf0a2cadc8c9207a99d673954b1",
        "sha256": "8cd45463855b221b28ff4664a65e4a17afc63dde1a07bc5116f679cb121af586"
      },
      "downloads": -1,
      "filename": "shihua-meoteofence-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0930ebf0a2cadc8c9207a99d673954b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.12",
      "size": 16268,
      "upload_time": "2023-03-14T09:44:09",
      "upload_time_iso_8601": "2023-03-14T09:44:09.881207Z",
      "url": "https://files.pythonhosted.org/packages/b2/3b/a08504fd754989929b479c10a9c221f87169224fbb2bb3fe2a95c04ae8a3/shihua-meoteofence-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}