{
  "info": {
    "author": "Zhang Erning",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# 汉字转拼音 (hz2py)\n\n我们希望安居客的搜索引擎能够更好的做到同音字的容错，采用拼音容错是一个不错的方法。因此，需要一个将汉字转换为拼音的组件。同时，汉字转拼音组件还可以有多个用途，例如以拼音的首字母来检索小区名、人名等。\n\n这样我们需要一个通用的将汉字转换为拼音的服务。\n\n## 功能\n基本功能就是中文拉丁化，输入一段中文文本，输出转变为汉语拼音的文本。\n\n要求原文中的全角标点符号、空格等应该转为对应的半脚符号。原汉字与英文间如果没有空格分隔，转换为拼音后应该加入空格分隔。\n\n例如，“**我的英文名是Bob。**” 转化后为'**wo de ying wen ming shi Bob.**'\n\n### 多种输出格式\n\n* 声调\n    `wǒ dē yīng wén míng shì Bob`或`wo3 de1 ying1 wen2 ming2 shi4 Bob`\n\n* 声母输出\n    `w d y w m sh Bob`\n\n* 首字母输出\n    `w d y w m s Bob`\n\n### 词组形式的拼音输出\n允许将一个中文词组以拼音词组的形式输出。本服务不需考虑中文分词，要求输入的文本已经是分词完毕的。\n\n例如输入\n\n    南京市 长江 大桥\n    \n输出：\n    \n    nanjingshi changjiang daqiao\n\n注意与缺省情况下一个汉字一个拼音分隔的输出格式的区别。\n\n### 多音字处理\n应该能够智能的处理多音字的情况，例如\n输入：\n\n    南京市长江大桥\n\n输出：\n\n    nan jing shi chang jiang da qiao\n\n在无法智能辨认多音字的情况下，同时输出一个字或词的多个拼音，以|符号分隔多音字(词)。\n\n例如：输入：\n\n    南京市长江大桥\n\n输出：\n\n    nan jing shi chang|zhang jiang da|dai qiao\n\n以词组为切分单位时，输出整个词的多种拼音\n\n输入：\n\n    南京市 长江 大桥\n    \n输出：\n    \n    nanjingshi changjiang|zhangjiang daqiao|daiqiao\n\n需要建立合理的拼音词库以解决常用的多音字问题，例如“莘庄立交”、“北翟路”等\n\n### 南方口音\n不再区分前后鼻音、卷舌音、翘色音，例如\n\n    wo de yin wen min si Bob\n\n对应表为：\n\n    z = zh              c = ch              s = sh\n    k = g               f = h               l = n\n    an = ang            en = eng            in = ing\n    lan = lang          uan = uang          l = r\n\n\n## API\n\n服务名称：**hz2py**\n\n### convert(text, fmt=[df], sc=True, pp=False, fuzzy=0) ###\n\n#### 参数 ####\n\n* **text**\n    待转换的中文文本\n\n* **fmt**\n    设定转换的方式的格式。缺省为返回单字拆分的拼音格式\n\n    * `df` - Default 全拼\n    * `tm` - Tone Marks 全拼带音调\n    * `tn` - Tone Numbers 全拼带数字形式的音调\n    * `ic` - Initial Consonant only 声母\n    * `fl` - First Letter 首字母\n\n* **sc**\n    Split Character，是否以单个汉字为切割单位的拼音输出字为单位\n    * `True` - 单字拆分\n    * `False` - 不拆分。以输入的中文文本的分词为准\n\n* **pp**\n    Polyphone 是否输出无法判断的多音字(词)\n    * `False` - 不输出多音字\n    * `True` - 输出多音字\n\n* **fuzzy**\n    Puzzy 拼音模糊化\n    * `0` - 不处理\n    * `1` - 模糊化 z-zh c-ch s-sh\n    * `2` - 模糊化 k-g f-h l-n l-r\n    * `4` - 模糊化 an-ang en-eng in-ing lan-lang uan-uang\n\n#### 返回结果 ####\n如果只需要一个格式，直接返回转换后的结果。例如调用`convert('南京市长江大桥')` 返回：\n\n```\nnan jing shi chang jiang da qiao\n```\n如果有多个格式选项，返回所有格式的结果。例如调用`convert('南京市 长江 大桥', fmt=[tm,tn,fl], sc=False)` 返回：\n\n```\n{\n    'tm': 'nánjīngshì chángjīang dàqiáo'\n    'tn': 'nan2jing1shi4 chang2jiang1 da4qiao2'\n    'fl': 'njs cj dq'\n}\n```\n\n假设转拼音服务无法识别“莘”字在下面短语中的读音，当调用`convert('莘庄 立交', fmt=[tn,fl], sc=False, pp=True)`将返回：\n\n```\n{\n    'tn': 'xin1zhuang1|shen1zhuang1 li4jiao3'\n    'fl': 'xz|sz lj'\n}\n```",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anjuke/pinyin4py",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pinyin4py",
    "package_url": "https://pypi.org/project/pinyin4py/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pinyin4py/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/anjuke/pinyin4py"
    },
    "release_url": "https://pypi.org/project/pinyin4py/1.0.dev/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Convert hanzi to pinyin",
    "version": "1.0.dev",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 775866,
  "releases": {
    "1.0.dev": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06f6a7298961124050d72eee930226ec73390e496b2a3df742fb48f531285af9",
          "md5": "d4ab59bc4ae5a7d35c5e00ee583c705c",
          "sha256": "638ef27e60115dc9b358931861b58d224513eca6c5127ca5c374dcfaedef5f8d"
        },
        "downloads": -1,
        "filename": "pinyin4py-1.0.dev.tar.gz",
        "has_sig": false,
        "md5_digest": "d4ab59bc4ae5a7d35c5e00ee583c705c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 104026,
        "upload_time": "2013-06-21T07:54:19",
        "upload_time_iso_8601": "2013-06-21T07:54:19.973900Z",
        "url": "https://files.pythonhosted.org/packages/06/f6/a7298961124050d72eee930226ec73390e496b2a3df742fb48f531285af9/pinyin4py-1.0.dev.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06f6a7298961124050d72eee930226ec73390e496b2a3df742fb48f531285af9",
        "md5": "d4ab59bc4ae5a7d35c5e00ee583c705c",
        "sha256": "638ef27e60115dc9b358931861b58d224513eca6c5127ca5c374dcfaedef5f8d"
      },
      "downloads": -1,
      "filename": "pinyin4py-1.0.dev.tar.gz",
      "has_sig": false,
      "md5_digest": "d4ab59bc4ae5a7d35c5e00ee583c705c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 104026,
      "upload_time": "2013-06-21T07:54:19",
      "upload_time_iso_8601": "2013-06-21T07:54:19.973900Z",
      "url": "https://files.pythonhosted.org/packages/06/f6/a7298961124050d72eee930226ec73390e496b2a3df742fb48f531285af9/pinyin4py-1.0.dev.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}