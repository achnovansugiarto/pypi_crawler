{
  "info": {
    "author": null,
    "author_email": "\"Sterling G. Baird\" <sterling.baird@utah.edu>, Ramsey Issa <u1374011@utah.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# Adaptive Experimentation (Ax) Platform for Chemistry\n\nAxForChemistry is an unofficial wrapper for the [Ax platform](ax.dev) geared towards materials\nscience/[materials informatics](https://citrine.io/what-is-materials-informatics/) and chemistry/[cheminformatics](https://en.wikipedia.org/wiki/Cheminformatics) optimization tasks where the datasets are often characterized as:\n\n<p align=\"center\"><i>small</i>, <i>sparse</i>, <i>noisy</i>, <i>multiscale</i>, <i>heterogeneous</i>, <i>high-dimensional</i> <sup><a href=https://dx.doi.org/10.1021/acs.chemmater.9b04078>1</a></sup>,<br><i>nonlinearly correlated</i>, <i>discontinuous</i>, and <i>nonlinearly constrained</i></p>\n\nThe goal of this codebase is to expose state-of-the-art Bayesian optimization techniques to the materials informatics and cheminformatics communities for both experts and non-experts with minimal barriers to usage/modification while retaining advanced features. This is done through classes and scripts primarily based on real experimental and computational research within the [Sparks group](https://my.eng.utah.edu/~sparks/) across a range of subjects in both industry and academia. While we are not affiliated with Ax, [Ax developers have contributed extensively to development and troubleshooting](https://github.com/facebook/Ax/issues?q=is%3Aissue+is%3Aopen+commenter%3Asgbaird) that led to this codebase.\n\n## Why another materials adaptive design platform?\nThere are many existing domain- and non-domain-specific adaptive design packages. A nonexhaustive list of materials discovery resources is given as follows:\n- [Open Citrine Platform](https://citrination.com/search/simple) by [Citrine Informatics](https://citrine.io/) ([learn-citrination](https://github.com/CitrineInformatics/learn-citrination))\n- [Computational Autonomy for Materials Discovery (CAMD)](https://github.com/TRI-AMDD/CAMD)\n- [Sequential Learning App for Materials Discovery (SLAMD)](https://github.com/BAMresearch/SequentialLearningApp)\n- [Chemically Novel Materials Discovery via `mat_discover`](https://github.com/sparks-baird/mat_discover)\n- [Co-Optimization of Composition in CrabNet (CoCoCrab)](https://github.com/AndrewFalkowski/CoCoCrab)\n\nA nonexhaustive list of general optimization resources is given as follows:\n- [Adaptive Experimentation (Ax) Platform](ax.dev)\n- [Dragonfly: scalable Bayesian optimization](https://github.com/dragonfly/dragonfly)\n- [IBM Bayesian Optimization Accelerator](https://www.ibm.com/products/bayesian-optimization-accelerator)\n- [Google Vizier: A Service for Black-Box Optimization](https://cloud.google.com/ai-platform/optimizer/docs/overview) ([open-source implementation](https://github.com/tobegit3hub/advisor)) <!-- ([paper](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46180.pdf)) -->\n- [Modular Active Learning framework (ModAL)](https://github.com/modAL-python/modAL)\n- [Rocketsled: a black-box optimization framework \"on rails\" for high-throughput computation](https://github.com/hackingmaterials/rocketsled)\n- [COMmon Bayesian Optimization Library for Python 3 (COMBO3)](https://github.com/tsudalab/combo3)\n- [Gryffin for categorical variables and mixed categorical-continuous parameter domains](https://github.com/aspuru-guzik-group/gryffin)\n\n[RayTune](https://docs.ray.io/en/latest/tune/index.html), while geared primarily towards hyperparameter optimization, supports a [wide variety of search algorithms](https://docs.ray.io/en/latest/tune/api_docs/suggestion.html) including Ax and Dragonfly. We recommend looking through the descriptions to see which ones stand out to you.\n\nSo, why another platform? The answer lies in the features of the Adaptive Experimentation (Ax) platform. It is relatively easy-to-use, modular, well-documented, open-source, actively maintained and expanding, and importantly, contains state-of-the-art models for a wide variety of tasks. For example, Ax supports noisy, high-dimensional, multi-objective, nonlinearly constrained optimization.. all at once! However, simultaneously implementing these features for a single materials design problem is non-trivial; this is the motivation for our implementation, **AxForChemistry**. As mentioned before, our goal is to:\n\n> expose state-of-the-art Bayesian optimization techniques to the materials informatics and cheminformatics communities for both experts and non-experts with minimal barriers to usage/modification while retaining advanced features.\n\n## What are AxForChemistry's use-cases?\n\nInline with the course of development for this codebase, perhaps the best way to introduce its features is by describing the materials informatics tasks that brought it about. Each of the following tasks links to a tutorial. We encourage you to focus on the tutorials most relevant to your priorities. As an outline:\n\n- Neural Network Hyperparameter Optimization (`crabnet_hyperopt.ipynb`, Colab)\n- Industry: Multi-objective Optimization of Dental Resin Formulations (`dental_bayesopt.ipynb`, Colab)\n- ARPA-E: High-temperature Multi-Principal Element Alloy (MPEA) discovery using domain knowledge and predefined candidates (`mpea_predefined.ipynb`, Colab)\n- Industry: Maximize packing fraction for solid rocket fuel particle packing simulations under compositional constraints (`particle_packing.ipynb`, Colab)\n- CrabNet as a pseudo-materials discovery benchmark problem with fake compositional constraints (`pseudo_discovery_validation.ipynb`, Colab)\n- Experimental validation of materials discovery via Open Citrine Platform, DiSCoVeR, and AxForChemistry (`expt_validation_comparison.ipynb`, Colab)\n- Vickers Hardness adaptive design - let's consult the literature, again and again (`hardness_literature.ipynb`, Colab)\n- Sparse, multi-objective, heterogeneous, heteroskedastic, multi-fidelity Bayesian optimization (`sparse_moo.ipynb`, Colab)\n- Optimizing in a latent space: discovering high-performing crystal structures using VAEs (`crystal_bayesopt_vae.ipynb`, Colab)\n\n### Neural Network Hyperparameter Optimization\n\nLet's begin with the first publication related to this work, a high-dimensional hyperparameter optimization study of 23 neural network hyperparameters, including both numerical and categorical parameters. We used a recently introduced high-dimensional Bayesian optimization scheme within the Ax platform called Sparse Axis-Aligned Subspaces Bayesian Optimization ([SAASBO](https://ax.dev/tutorials/saasbo.html)) to set a new state-of-the-art benchmark on a Matbench task ([`matbench_expt_gap`](https://matbench.materialsproject.org/Leaderboards%20Per-Task/matbench_v0.1_matbench_expt_gap/)) with no prior knowledge other than (generous) bounds on the search space. See the [submission](https://matbench.materialsproject.org/Full%20Benchmark%20Data/matbench_v0.1_Ax_SAASBO_CrabNet_v1.2.7/), [notebook](https://github.com/materialsproject/matbench/blob/main/benchmarks/matbench_v0.1_Ax_SAASBO_CrabNet_v1.2.7/notebook.ipynb), and [paper](https://doi.org/10.48550/arXiv.2203.12597) for additional details.\n\n> Baird, S. G.; Liu, M.; Sparks, T. D. High-Dimensional Bayesian Optimization of Hyperparameters for an Attention-Based Network to Predict Materials Property: A Case Study on CrabNet Using Ax and SAASBO. [arXiv:2203.12597](https://doi.org/10.48550/arXiv.2203.12597) [cond-mat] 2022.\n\n### Multi-objective Optimization of Dental Resin Formulations (Industry)\nDental resins are made up of monomer resins, fillers, dyes, and inhibitors.\n\n#### Monomer optimization, without `max_components` constraint\nWe fix filler, dye, and inhibitor contributions and optimize over 16 distinct monomers in a continuous sense.\n\n#### Monomer optimization, with `max_components` constraint\nWe apply the same optimization, except with the constraint that suggested candidates may contain no more than `n` components out of `k` monomers. This reframes the problem as an nchoosek problem where each of the `k` parameters is a continuous variable.\n\n#### Multiple compositional constraints\nEach of the categories (resins, fillers, dyes, and inhibitors) can be restricted to total contribution ranges as well as maximum allowable number of components. For example, we can restrict the total resin contribution to 15-30% and the total filler contribution to 50-70% while also constraining the total contribution of all components to 100%.\n\n### High-temperature Multi-Principal Element Alloy (MPEA) discovery using domain knowledge and predefined candidates (ARPA-E)\nDiscovering new, high-temperature multi-principal element alloys can help unlock a new generation of efficient turbine engines. We limit the search to a max of `n` elements out of `k` possible elements (nchoosek) where the individual component contributions vary continuously from 0 to 1.\n\n### Maximize packing fraction for solid rocket fuel particle packing simulations under compositional constraints (Industry)\nParticle packing fraction of solid rocket fuel affects the combustion process through properties such as density, reactivity, surface area, and mechanical properties.\n\n#### Concurrent optimization for a large, initial training set (15000)\nTo reduce memory consumption, an exact (as opposed to noisy) acquisition function is applied during the search for candidates with high packing fractions. [RayTune's integrations with Ax](https://ax.dev/tutorials/raytune_pytorch_cnn.html) are used to perform task scheduling. Out of a pool of CPUs, as soon as one CPU becomes inactive, it is assigned a new task based on all available data (including recently generated data). This maximization of resource efficiency is especially important since simulation times can range from 20 min to over 20 hours. A CPU that completes a 20 minute simulation can run additional, adaptively suggested tasks while another CPU continues to run a 20 hour simulation.\n\n#### SAASBO, training from scratch\nWe test the performance of SAASBO on the particle packing simulations by hiding all training data, allowing SAASBO to search from scratch (SAASBO is limited to small datasets).\n\n#### Multi-fidelity\nDragonfly is used to perform multi-fidelity optimization of the particle packing simulations. Multi-fidelity in this context refers to the fact that simulation results tend to converge when a larger number of particles is used (slow, high-fidelity) and tends to have more noise when a smaller number of particles is used (fast, low-fidelity). Dragonfly interprets number of particles as the fidelity parameter and seeks to maximize search efficiency by leveraging both (fast) low-fidelity and (slow) high-fidelity simulations running concurrently.\n\n### Maximize (qualitative) coating quality of metal coated polymers (Industry)\nElectroless deposition of metals on polymers requires careful recipe generation to produce adhesive, uniform coatings. Researchers assign qualitative rankings of the coatings as the optimization objective.\n\n### CrabNet as a pseudo-materials discovery benchmark problem with fake compositional constraints\nHere, we compare Ax models to other state-of-the-art techniques on a fake materials discovery validation problem.\n\n### Experimental validation of materials discovery via Open Citrine Platform, DiSCoVeR, and AxForChemistry\n\n### Vickers Hardness adaptive design - let's consult the literature, again and again\nRather than immediately venture to the laboratory upon obtaining suggested candidates, we implement a loop where we consult the literature for the top `k` suggested compounds and update the model/suggestions until `n` of the `k` compounds do not contain data within the literature.\n\n### Sparse, multi-objective, heterogeneous, heteroskedastic, multi-fidelity Bayesian optimization\nNot implemented yet. How to deal with sparsity in the Ax framework? (open an issue).\n\n### Optimizing in a latent space: discovering high-performing crystal structures using VAEs\nNot implemented yet. Consider using https://github.com/PV-Lab/FTCP.\n\n<!-- _nonlinear correlations_ between variables, _discontinuity_ in the feature spaces, and nonlinear constraints_. -->\n\n<!-- - small\n- sparse\n- noisy\n- multiscale\n- heterogeneous\n- high-dimensional\n -->\n<!-- <table>\n<tbody>\n  <tr>\n    <td><li>small</li></td>\n    <td>multiscale</td>\n  </tr>\n  <tr>\n    <td>sparse</td>\n    <td>heterogeneous</td>\n  </tr>\n  <tr>\n    <td>noisy</td>\n    <td>high-dimensional</td>\n  </tr>\n</tbody>\n</table> -->\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "axforchemistry",
    "package_url": "https://pypi.org/project/axforchemistry/",
    "platform": null,
    "project_url": "https://pypi.org/project/axforchemistry/",
    "project_urls": {
      "Home": "https://github.com/sparks-baird/AxForChemistry"
    },
    "release_url": "https://pypi.org/project/axforchemistry/0.1.5/",
    "requires_dist": [
      "numpy",
      "pandas",
      "plotly",
      "ax_platform>=0.2.4",
      "pyro-ppl==1.8.1",
      "kaleido",
      "tqdm",
      "matplotlib",
      "scipy",
      "ipython",
      "scikit_learn"
    ],
    "requires_python": ">=3.7",
    "summary": "Bayesian optimization of formulations via Adaptive Experimentation (Ax) platform.",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13449657,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4555bee6c4cb499cfee5f24ec1744c98d2674be10d675af84b114cdbac3e45da",
          "md5": "beba6e00bdf202a18fb8b9567d424818",
          "sha256": "1cd45814b0ede7dc44d9d4c2fbdafe0ffb04313c52b7ae10f03f835b62613e97"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "beba6e00bdf202a18fb8b9567d424818",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 25434,
        "upload_time": "2022-04-07T03:19:18",
        "upload_time_iso_8601": "2022-04-07T03:19:18.472677Z",
        "url": "https://files.pythonhosted.org/packages/45/55/bee6c4cb499cfee5f24ec1744c98d2674be10d675af84b114cdbac3e45da/axforchemistry-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "1b6708dabb09aa49e2bcf22fd95c8e76f1eaaf4b0119c32ad8d760aea059a7c8",
          "md5": "75743255a4957e13e0155765f7f9b7c6",
          "sha256": "1becfa7cf4e3331bc884aaf4039e4f0081df6a2ac557daccb2af5087fbecaed9"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75743255a4957e13e0155765f7f9b7c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 56239,
        "upload_time": "2022-04-07T03:19:20",
        "upload_time_iso_8601": "2022-04-07T03:19:20.438309Z",
        "url": "https://files.pythonhosted.org/packages/1b/67/08dabb09aa49e2bcf22fd95c8e76f1eaaf4b0119c32ad8d760aea059a7c8/axforchemistry-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "28962ab02170415fbea6230c6705627880315c9c12c612b8a7502ce65979f201",
          "md5": "911dfd0e942a9a9785027c3e349e7dad",
          "sha256": "b715467bd0923283841ee9b05b58f5688b2a9bf4c28f49111c6d06558b6cdc20"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "911dfd0e942a9a9785027c3e349e7dad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25433,
        "upload_time": "2022-04-07T03:22:17",
        "upload_time_iso_8601": "2022-04-07T03:22:17.081924Z",
        "url": "https://files.pythonhosted.org/packages/28/96/2ab02170415fbea6230c6705627880315c9c12c612b8a7502ce65979f201/axforchemistry-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7bca21fa1000d0e1147e1858ad04dbed0128dba3c38792be63bf6ef41616ceae",
          "md5": "2be1d033cb378f4bb849181b88bec4cc",
          "sha256": "e6d7f9e32cb4dea4dc44cbd89ce205b47a1fb4d887cbe62f11a9e55f6712a39f"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2be1d033cb378f4bb849181b88bec4cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 56250,
        "upload_time": "2022-04-07T03:22:18",
        "upload_time_iso_8601": "2022-04-07T03:22:18.974648Z",
        "url": "https://files.pythonhosted.org/packages/7b/ca/21fa1000d0e1147e1858ad04dbed0128dba3c38792be63bf6ef41616ceae/axforchemistry-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "de5534b75f4ca8697b14966c8338160ddd41b4c168a860cd8f189fa4e9e34917",
          "md5": "c7b06ebfddc0524cc698116cae7f2114",
          "sha256": "4f65459d72e8288e49d428db912dfe6fec64e7e91fbdc5413db8748a631aa3c7"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7b06ebfddc0524cc698116cae7f2114",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25460,
        "upload_time": "2022-04-07T04:23:40",
        "upload_time_iso_8601": "2022-04-07T04:23:40.318620Z",
        "url": "https://files.pythonhosted.org/packages/de/55/34b75f4ca8697b14966c8338160ddd41b4c168a860cd8f189fa4e9e34917/axforchemistry-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "7ab3e16875b11d89a0a6822e8a55ceeaf19dd55fcb483cdef133d488f822b0bc",
          "md5": "c037a4f280e102d3846b3e16299d55b9",
          "sha256": "e71fd92af80903493f4338c49461def3a7030e5d38d6ef193045cc5166d263d1"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c037a4f280e102d3846b3e16299d55b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 68922,
        "upload_time": "2022-04-07T04:23:42",
        "upload_time_iso_8601": "2022-04-07T04:23:42.296085Z",
        "url": "https://files.pythonhosted.org/packages/7a/b3/e16875b11d89a0a6822e8a55ceeaf19dd55fcb483cdef133d488f822b0bc/axforchemistry-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9873c7fea89912a04e0d74d137743206341fa44eb1eb3cfb7897493eda46bf0f",
          "md5": "82ca572c0026b722927f81d33f9e8ded",
          "sha256": "fee36f22300269eb42633c8ea9b3f2ee49ef0b7ac1770efb8a51de7903b076cf"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82ca572c0026b722927f81d33f9e8ded",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25844,
        "upload_time": "2022-04-08T03:12:49",
        "upload_time_iso_8601": "2022-04-08T03:12:49.995464Z",
        "url": "https://files.pythonhosted.org/packages/98/73/c7fea89912a04e0d74d137743206341fa44eb1eb3cfb7897493eda46bf0f/axforchemistry-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a3b0ee686539c6879353f330d7cb839852225f683725b76b079176a280e80ad6",
          "md5": "5db90a862ac54b750ecf4fc735f428dc",
          "sha256": "c3053210239ee6cda5b779c8b3b2d6c88509e812d5fedfc4b5c2f358c19b7d1a"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5db90a862ac54b750ecf4fc735f428dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1385371,
        "upload_time": "2022-04-08T03:12:53",
        "upload_time_iso_8601": "2022-04-08T03:12:53.192007Z",
        "url": "https://files.pythonhosted.org/packages/a3/b0/ee686539c6879353f330d7cb839852225f683725b76b079176a280e80ad6/axforchemistry-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "57a4fdcbec189ab725df3caaefd1b0f33400c54d3f195e17a8c10c01527ced6f",
          "md5": "4b5ae462ba0062acf23f9981407fcdf8",
          "sha256": "3f814afdb5f3f4eb1f1de0224685d027a26fe46500f590e615ccfe5abad772fc"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b5ae462ba0062acf23f9981407fcdf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25861,
        "upload_time": "2022-04-08T03:24:07",
        "upload_time_iso_8601": "2022-04-08T03:24:07.447815Z",
        "url": "https://files.pythonhosted.org/packages/57/a4/fdcbec189ab725df3caaefd1b0f33400c54d3f195e17a8c10c01527ced6f/axforchemistry-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "11fd389d3c91719c78363fa4e2d33ba3a7c1eeb3b782858bd3b1991c0f390f2d",
          "md5": "129c6dcf6804c114da185e6ffce9e2bc",
          "sha256": "97eb3b26de90279a1ffd3066ee1bfaf1c5655d18f91b9e83bf7b44b848b65696"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "129c6dcf6804c114da185e6ffce9e2bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1385392,
        "upload_time": "2022-04-08T03:24:10",
        "upload_time_iso_8601": "2022-04-08T03:24:10.612443Z",
        "url": "https://files.pythonhosted.org/packages/11/fd/389d3c91719c78363fa4e2d33ba3a7c1eeb3b782858bd3b1991c0f390f2d/axforchemistry-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6e4518401f97af138751eb852b650e401b3ae09adf0ec1000270f3fbe5418d2c",
          "md5": "e57af5c770438bce735d4bbafdee061d",
          "sha256": "44e77a0cc14cb4c48efeeeb6bc651593c443769ded7cda7029c1639e387b8c51"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e57af5c770438bce735d4bbafdee061d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25858,
        "upload_time": "2022-04-08T03:34:39",
        "upload_time_iso_8601": "2022-04-08T03:34:39.786822Z",
        "url": "https://files.pythonhosted.org/packages/6e/45/18401f97af138751eb852b650e401b3ae09adf0ec1000270f3fbe5418d2c/axforchemistry-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "886df3d5176651bd7332521a60488f968a22ff9a84990c91a9927f420b6d1f5d",
          "md5": "8e5efbac529d20ee7962a0e9f25569e3",
          "sha256": "13345016b3f999dc45ba353829300a9381e5ea14abbf4d6447cba822e9765e81"
        },
        "downloads": -1,
        "filename": "axforchemistry-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8e5efbac529d20ee7962a0e9f25569e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1385389,
        "upload_time": "2022-04-08T03:34:42",
        "upload_time_iso_8601": "2022-04-08T03:34:42.890353Z",
        "url": "https://files.pythonhosted.org/packages/88/6d/f3d5176651bd7332521a60488f968a22ff9a84990c91a9927f420b6d1f5d/axforchemistry-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "6e4518401f97af138751eb852b650e401b3ae09adf0ec1000270f3fbe5418d2c",
        "md5": "e57af5c770438bce735d4bbafdee061d",
        "sha256": "44e77a0cc14cb4c48efeeeb6bc651593c443769ded7cda7029c1639e387b8c51"
      },
      "downloads": -1,
      "filename": "axforchemistry-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e57af5c770438bce735d4bbafdee061d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25858,
      "upload_time": "2022-04-08T03:34:39",
      "upload_time_iso_8601": "2022-04-08T03:34:39.786822Z",
      "url": "https://files.pythonhosted.org/packages/6e/45/18401f97af138751eb852b650e401b3ae09adf0ec1000270f3fbe5418d2c/axforchemistry-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "886df3d5176651bd7332521a60488f968a22ff9a84990c91a9927f420b6d1f5d",
        "md5": "8e5efbac529d20ee7962a0e9f25569e3",
        "sha256": "13345016b3f999dc45ba353829300a9381e5ea14abbf4d6447cba822e9765e81"
      },
      "downloads": -1,
      "filename": "axforchemistry-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8e5efbac529d20ee7962a0e9f25569e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 1385389,
      "upload_time": "2022-04-08T03:34:42",
      "upload_time_iso_8601": "2022-04-08T03:34:42.890353Z",
      "url": "https://files.pythonhosted.org/packages/88/6d/f3d5176651bd7332521a60488f968a22ff9a84990c91a9927f420b6d1f5d/axforchemistry-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}