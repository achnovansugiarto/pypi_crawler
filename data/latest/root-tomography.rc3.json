{
  "info": {
    "author": "Boris Bantysh",
    "author_email": "bbantysh60000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Root approach quantum tomography\n\nPython library for the discrete variables quantum state tomography using root approach and maximum likelihood estimation. The library contains a set of tools for quantum state reconstruction by the complementary measurements results, estimation of statistical adequacy and theoretical analysis of reconstruction fidelity.\n\n- [Installation](#installation)\n- [Definitions](#definitions)\n- [Algorithm](#algorithm)\n- [Data format](#format)\n- [Quantum state tomography](#qst)\n- [References](#references)\n- [License](#license)\n\n## <a name=\"installation\">Installation</a>\n```\npip install root-tomography\n```\n\n## <a name=\"definitions\">Definitions</a>\nConsider a quantum state in the Hilbert space of dimension <img alt=\"d\" src=\"https://render.githubusercontent.com/render/math?math=d\" />. The root approach to quantum state tomography implies reconstructing a purified quantum state <img alt=\"psi\" src=\"https://render.githubusercontent.com/render/math?math=\\psi\" /> of size <img alt=\"d-by-r\" src=\"https://render.githubusercontent.com/render/math?math=d\\times r\" /> instead of corresponding rank-<img alt=\"r\" src=\"https://render.githubusercontent.com/render/math?math=r\" /> **density matrix** <img alt=\"rho=psi*psi\" src=\"https://render.githubusercontent.com/render/math?math=\\rho=\\psi\\psi^\\dagger\" />. Thus, matrix <img alt=\"psi\" src=\"https://render.githubusercontent.com/render/math?math=\\psi\" /> defines a **square root** of the density matrix.\n\nWe measure the reconstruction accuracy by Uhlmann's **fidelity** between the true state <img alt=\"rho\" src=\"https://render.githubusercontent.com/render/math?math=\\rho\" /> and the reconstructed state <img alt=\"sigma\" src=\"https://render.githubusercontent.com/render/math?math=\\sigma\" />:\n<p align=\"center\"><img alt=\"fidelity\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle F(\\rho,\\sigma)=\\left[\\textrm{Tr}\\sqrt{\\sqrt\\rho\\sigma\\sqrt\\rho}\\right]^2.\" /></p>\n\nAccording to the quantum state estimation theory the **infidelity distribution** is bounded by the general chi-squared distribution with <img alt=\"nu\" src=\"https://render.githubusercontent.com/render/math?math=\\nu\" /> degrees of freedom [[1]](#ref1):\n<p align=\"center\"><img alt=\"infidelity as random variable\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle 1-F\\sim\\sum_{j=1}^{\\nu}{d_j\\xi_j^2},\" /></p>\n\nwhere <img alt=\"d_j\" src=\"https://render.githubusercontent.com/render/math?math=d_j\" /> are positive parameters and <img alt=\"xi_j\" src=\"https://render.githubusercontent.com/render/math?math=\\xi_j\" /> are independent random variables with standard normal distribution. The expected value and variance of infidelity are thus\n<p align=\"center\"><img alt=\"infidelity mean and variance\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle \\langle1-F\\rangle=\\sum_{j=1}^{\\nu}{d_j}, \\qquad \\sigma_{1-F}^2=2\\sum_{j=1}^{\\nu}{d_j^2}.\" /></p>\n\nAs the infidelity lower bound is inverse proportional to the total sample size <img alt=\"N\" src=\"https://render.githubusercontent.com/render/math?math=N\" /> over all measurements, we also use the so-called **loss function** <img alt=\"L=N*mean(1-F)\" src=\"https://render.githubusercontent.com/render/math?math=L=N\\langle1-F\\rangle\" /> independent of the sample size.\n\n## <a name=\"algorithm\">Algorithm</a>\nWe use the _maximum likelihood_ parameters estimation (MLE). In the case of quantum state tomography MLE results in the _likelihood equation_ [[1]](#ref1). Taking the density matrix normalization condition, one obtains\n<p align=\"center\"><img alt=\"likelihood equation\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle \\mu\\psi=J(\\psi\\psi^\\dagger)\\psi,\" /></p>\n\nwhere <img alt=\"mu\" src=\"https://render.githubusercontent.com/render/math?math=\\mu\" /> is a constant (usually equal to the total observed counts <img alt=\"sum(k_j)\" src=\"https://render.githubusercontent.com/render/math?math=\\sum_j{k_j}\" />) and\n<p align=\"center\"><img alt=\"J definitions\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle J(\\rho)=b_0(\\rho) I %2B \\sum_j{b_j(\\rho)P_j}.\" /></p>\n\nThe sums are taken over all measurements operators in all measurements schemes. The actual values of <img alt=\"b_0\" src=\"https://render.githubusercontent.com/render/math?math=b_0\" /> and <img alt=\"b_j\" src=\"https://render.githubusercontent.com/render/math?math=b_j\" /> depend on the measurements statistics (see [Measurements statistics](#statistics) section).\n\nAn equation solution is obtained by the fixed-point iteration method:\n<p align=\"center\"><img alt=\"fixed-point iterations\" src=\"https://render.githubusercontent.com/render/math?math=\\displaystyle \\psi_{i%2B1}=(1-a)\\mu^{-1}J(\\psi\\psi^\\dagger)\\psi_i %2B a\\psi_i.\" /></p>\n\nHere <img alt=\"a\" src=\"https://render.githubusercontent.com/render/math?math=a\" /> is the regularization parameter. We use Moore-Penrose pseudo-inversion to get <img alt=\"psi_0\" src=\"https://render.githubusercontent.com/render/math?math=\\psi_0\" />.\n\nThe root approach quantum tomography implies setting the model rank <img alt=\"r\" src=\"https://render.githubusercontent.com/render/math?math=r\" />. If the rank is unknown we estimate it using the _adequacy criterion_ [[1]](#ref1). To do this we vary <img alt=\"r\" src=\"https://render.githubusercontent.com/render/math?math=r\" /> from 1 to its maximal value until the reconstruction result becomes statistically significant at some pre-chosen significance level. The procedure is also terminated if the p-value of the rank-<img alt=\"(r+1)\" src=\"https://render.githubusercontent.com/render/math?math=(r%2B1)\" /> model is lower than p-value of the rank-<img alt=\"r\" src=\"https://render.githubusercontent.com/render/math?math=r\" /> model.\n\n\n## <a name=\"format\">Data format</a>\nFor the **quantum state tomography** one must specify a set of complementary measurement experiments over a quantum state density matrix <img alt=\"rho\" src=\"https://render.githubusercontent.com/render/math?math=\\rho\" />. Every experiment may be repeated many times with some sets of possible measurement outcomes. The probability to get _k_-th outcome is determined by the measurement operator <img alt=\"P_k\" src=\"https://render.githubusercontent.com/render/math?math=P_k\" /> as <img alt=\"p_k=trace(rho*P_k)\" src=\"https://render.githubusercontent.com/render/math?math=p_k=\\textrm{Tr}(\\rho P_k)\" />. The set of measurement operators and the number of experiments repetitions define the **_measurements protocol_**. The number of observations for each outcome define the **_measurements results_**. The following code describe the required data format.\n```python\nproto  # List of measurement operators matrices\nproto[j]  # 3d numpy array of measurement operator matrices in j-th measurement scheme\nproto[j][k, :, :]  # Measurement operator matrix for k-th outcome in j-th measurement scheme\n```\n```python\nnshots  # List of measurement schemes repetitions\nnshots[j]  # Number of j-th scheme repetitions\n```\n```python\nclicks  # List of outcomes\nclicks[j]  # 1d numpy array of measurement outcomes in j-th scheme\nclicks[j][k]  # Number of k-th outcome observations in j-th scheme\n```\nOne can specify `nshots` as a single integer describing the total sample size. Then it is automatically divided equally over all measurement schemes.\n\nOne can also pass a 3d numpy array for measurement operators and a 1d array for measurements results implying only a single possible outcome in each measurement:\n```python\nproto[j, :, :]  # Measurement operator matrix for j-th measurement scheme\nnshots[j]  # Number of j-th scheme repetitions\nclicks[j]  # Number of observations in j-th scheme\n```\n\n## <a name=\"qst\">Quantum state tomography</a>\n\nExamples directory of the project contains a set of examples that show basic features of the library. Below we briefly review the quantum state tomography example.\n\nConsider an example of a pure ququart state reconstruction using mutually-unbiased bases measurement protocol.\n```python\nfrom root_tomography.experiment import proto_measurement\nfrom root_tomography.entity import State\n\ndim = 4  # System dimension\nr_true = 1  # True state rank\nstate_true = State.random(dim, r_true)  # True state\nnshots = 10 ** 3  # Total sample size\nproto = proto_measurement(\"mub\", dim=dim)  # Generate measurements operators\n```\n\nThe `Experiment` class of `experiment` module allows one to store the tomography data.\n```python\nfrom root_tomography.experiment import Experiment\n\nex = Experiment(dim, State)  # Generate experiment instance\nex.set_data(proto=proto, nshots=nshots)  # Set measurements protocol\nex.set_data(clicks=clicks)  # Set measurements data\n```\n\nOne can also perform the measurement simulation.\n```python\nex.simulate(state_true.dm)  # Performs the simulation and stores it\n```\n\n\nThe reconstruction is performed using the `reconstruct_state` function of `estimator` module. By default the state rank is estimated automatically using the adequacy criteria.\n```python\nfrom root_tomography.estimator import reconstruct_state\n\nstate_rec = reconstruct_state(ex, display=10)\nfid = State.fidelity(state_true, state_rec)\nprint(f\"Fidelity: {fid:.6f}\")\n```\n\nOutput:\n```\n=== Automatic rank estimation ===\n=> Try rank 1\nOptimization: fixed point iteration method\nIteration 37 \t\t Delta 9.42e-09\n=> Rank 1 is statistically significant at significance level 0.05000. Procedure terminated.\nFidelity: 0.995364\n```\n\nUsing the fiducial approach and the theoretical infidelity distribution one can use the reconstruction result to estimate the guaranteed reconstruction fidelity. In the following code we estimate the 95%-probability fidelity bound ![F_95](https://latex.codecogs.com/svg.latex?F_%7B95%7D). That means that we get the fidelity ![F_95](https://latex.codecogs.com/svg.latex?F_%7B95%7D) or higher with probability 95%.\n```python\nfrom root_tomography.bound import bound\nfrom root_tomography import gchi2\n\nd = bound(state_rec, ex)  # Calculate variances\nfid95 = 1 - gchi2.ppf(d, 0.95)  # Get fidelity bound\nprint(f\"Fiducial 95% fidelity bound: {fid95:.6f}\")\n```\n\nOutput:\n```\nFiducial 95% fidelity bound: 0.992822\n```\n\nThe following code plots the infidelity distribution based on the true state and shows the fidelity of reconstructed state.\n```python\nimport matplotlib.pyplot as plt\n\nd = bound(state_true, ex)\np, df = gchi2.pdf(d)\nplt.figure(\"Infidelity\")\nplt.plot(df, p, label=\"Theory\")\nplt.plot([1-fid, 1-fid], [0, max(p)*1.05], label=\"Reconstruction\")\nplt.xlabel(\"infidelity\")\nplt.legend()\nplt.show()\n```\n\n![Theoretical distribution and reconstruction result](examples/infidelity.png?x=5)\n\nThe theoretical infidelity mean and variance could be obtained from the variance vector.\n```python\nsum(d)  # Mean infidelity\n2 * sum(d ** 2)  # Infidelity variance\n1-sum(d)  # Mean fidelity\n```\n\n## <a name=\"references\">References</a>\n\n<a name=\"ref1\">[1]</a> Bogdanov Yu. I. Unified statistical method for reconstructing quantum states by purification // _JETP_ **108(6)** 928-935 (2009); doi: 10.1134/S106377610906003X\n\n## <a name=\"license\">License</a>\n\nAll code found in this repository is licensed under GPL v3\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PQCLab/pyRootTomography",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "root-tomography",
    "package_url": "https://pypi.org/project/root-tomography/",
    "platform": "",
    "project_url": "https://pypi.org/project/root-tomography/",
    "project_urls": {
      "Homepage": "https://github.com/PQCLab/pyRootTomography"
    },
    "release_url": "https://pypi.org/project/root-tomography/0.5/",
    "requires_dist": [
      "numpy (>=1.20.2)",
      "scipy (>=1.6.2)"
    ],
    "requires_python": ">=3.7",
    "summary": "Python library for the root approach quantum tomography",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10393125,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddd63ec1bb8374667954d612a6fcb6201c697e99a59b6bf11b255b062a557450",
          "md5": "1166663cc0d0a721637df943fead2742",
          "sha256": "2f6c00c3e40b3ce40430657a3925f749be8fd879b7331ff60df59c9288f6397e"
        },
        "downloads": -1,
        "filename": "root_tomography-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1166663cc0d0a721637df943fead2742",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6815,
        "upload_time": "2020-07-27T21:51:02",
        "upload_time_iso_8601": "2020-07-27T21:51:02.879261Z",
        "url": "https://files.pythonhosted.org/packages/dd/d6/3ec1bb8374667954d612a6fcb6201c697e99a59b6bf11b255b062a557450/root_tomography-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e67556fded84a4693c0b9f98d08c3bcc473afbefe53e299d95eea1034e92c52",
          "md5": "c3cd428920d286b76972c2bb2f733625",
          "sha256": "de889bdfe43d6e4fa0b0f3e325620afd2a060fd31c2313c7238cf53bcfaae6f5"
        },
        "downloads": -1,
        "filename": "root-tomography-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3cd428920d286b76972c2bb2f733625",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6410,
        "upload_time": "2020-07-27T21:51:04",
        "upload_time_iso_8601": "2020-07-27T21:51:04.986787Z",
        "url": "https://files.pythonhosted.org/packages/8e/67/556fded84a4693c0b9f98d08c3bcc473afbefe53e299d95eea1034e92c52/root-tomography-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac00bdb8d8b2a3060377bb754d010188ea89e532068b2b46dcc4e54bf88d70d4",
          "md5": "a0cfb8c885bb0fe97005433f1d3c3505",
          "sha256": "39c27e432636d31553d962c80984ded0daf9172f04c5a8ad4eb74e11153febe6"
        },
        "downloads": -1,
        "filename": "root_tomography-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0cfb8c885bb0fe97005433f1d3c3505",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9678,
        "upload_time": "2020-07-28T09:07:56",
        "upload_time_iso_8601": "2020-07-28T09:07:56.046777Z",
        "url": "https://files.pythonhosted.org/packages/ac/00/bdb8d8b2a3060377bb754d010188ea89e532068b2b46dcc4e54bf88d70d4/root_tomography-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "193f42c16a75fdec545b6799e305580165fe2da0d4ba46825ae34be42a84bf20",
          "md5": "7291fac68cae73114bc6f5a580a52ea6",
          "sha256": "e38a9f29a4b7e4bb3199647e9a57cfd2efcbf57b9cb74630b3adedcae81dd4c8"
        },
        "downloads": -1,
        "filename": "root-tomography-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7291fac68cae73114bc6f5a580a52ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9564,
        "upload_time": "2020-07-28T09:07:58",
        "upload_time_iso_8601": "2020-07-28T09:07:58.090857Z",
        "url": "https://files.pythonhosted.org/packages/19/3f/42c16a75fdec545b6799e305580165fe2da0d4ba46825ae34be42a84bf20/root-tomography-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaea28fdb515c11652def0850497f48d422aa110c0b1a1b5d82333c08093751b",
          "md5": "172654a9983b4ed7703ba8cbb961f70e",
          "sha256": "d138eb239ae4f34f0377dd0971e4deb7b5187072e4757a2a5c931bf668bd6beb"
        },
        "downloads": -1,
        "filename": "root_tomography-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "172654a9983b4ed7703ba8cbb961f70e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31526,
        "upload_time": "2021-05-18T15:35:28",
        "upload_time_iso_8601": "2021-05-18T15:35:28.806630Z",
        "url": "https://files.pythonhosted.org/packages/ea/ea/28fdb515c11652def0850497f48d422aa110c0b1a1b5d82333c08093751b/root_tomography-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "018cd9363a8f6e946c8233b6b328c39c1f2987c22d6696203c963fe5dbfa4b7f",
          "md5": "de38c37e9076ddb654e3a8514329bd45",
          "sha256": "66f5fcb3957a2cb141cff5a231b82dd6fe9aa74de13ffb2ca2ef617fe964236d"
        },
        "downloads": -1,
        "filename": "root-tomography-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "de38c37e9076ddb654e3a8514329bd45",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29756,
        "upload_time": "2021-05-18T15:35:30",
        "upload_time_iso_8601": "2021-05-18T15:35:30.368718Z",
        "url": "https://files.pythonhosted.org/packages/01/8c/d9363a8f6e946c8233b6b328c39c1f2987c22d6696203c963fe5dbfa4b7f/root-tomography-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eaea28fdb515c11652def0850497f48d422aa110c0b1a1b5d82333c08093751b",
        "md5": "172654a9983b4ed7703ba8cbb961f70e",
        "sha256": "d138eb239ae4f34f0377dd0971e4deb7b5187072e4757a2a5c931bf668bd6beb"
      },
      "downloads": -1,
      "filename": "root_tomography-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "172654a9983b4ed7703ba8cbb961f70e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 31526,
      "upload_time": "2021-05-18T15:35:28",
      "upload_time_iso_8601": "2021-05-18T15:35:28.806630Z",
      "url": "https://files.pythonhosted.org/packages/ea/ea/28fdb515c11652def0850497f48d422aa110c0b1a1b5d82333c08093751b/root_tomography-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "018cd9363a8f6e946c8233b6b328c39c1f2987c22d6696203c963fe5dbfa4b7f",
        "md5": "de38c37e9076ddb654e3a8514329bd45",
        "sha256": "66f5fcb3957a2cb141cff5a231b82dd6fe9aa74de13ffb2ca2ef617fe964236d"
      },
      "downloads": -1,
      "filename": "root-tomography-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "de38c37e9076ddb654e3a8514329bd45",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29756,
      "upload_time": "2021-05-18T15:35:30",
      "upload_time_iso_8601": "2021-05-18T15:35:30.368718Z",
      "url": "https://files.pythonhosted.org/packages/01/8c/d9363a8f6e946c8233b6b328c39c1f2987c22d6696203c963fe5dbfa4b7f/root-tomography-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}