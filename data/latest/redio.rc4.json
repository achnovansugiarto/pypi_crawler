{
  "info": {
    "author": "L. Kärkkäinen",
    "author_email": "tronic@noreply.users.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Trio",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Networking"
    ],
    "description": "# RedIO - Redis for Trio\n\nA Python 3.7+ module for using Redis database in async programs based on the Trio library.\n\n```\npip install redio\n```\n\nThis module is not ready for production use and all APIs are still likely to change. It works with my applications and performs roughly at the same speed as other Redis modules for Python.\n\n## Normal mode (high level API)\n\n```python\nimport redio, trio\n\n# Initialise a connection pool\nredis = redio.Redis(\"redis://localhost/\")\n\nasync def main():\n    some, another = await redis().get(\"somekey\").get(\"anotherkey\")\n    print(\"Got values:\", some, another)\n\ntrio.run(main)\n```\n\nMost normal [Redis commands](https://redis.io/commands) are available and they can either be called in such sequence like above, or if more convenient, using a variable:\n\n```python\ndb = redis()  # Get a DB object\ndb.get(\"bar\")\ndb.set(\"bar\", \"value\").expire(\"bar\", 0.5)  # Automatically deleted after 500 ms\ndb.get(\"bar\")\nold_bar, expire, bar = await db\n```\n\nAll commands are queued and sent to server only on the next `await`, improving performance especially if the Redis server is not on localhost, as unnecessary server round-trips are eliminated and often everything fits in a single packet.\n\nResponses are returned as a list in the same order as the commands, noting that commands such as `set` do not produce any output.\n\n### Hash keys\n\nRedis keys may contain dictionaries with field names and values. RedIO `hset` allows specifying fields by **keyword arguments**:\n\n```python\nawait redis().hset(\n  \"hashkey\",\n  field1=bytes([255, 0, 255]),\n  field2=\"text\",\n  field3=1.23,\n)\n```\n\nInstead of keyword arguments, a `dict` may be used. Similarly, values returned by `hgetall` come as a dictionary:\n\n```python\n>>> await redis().hgetall(\"hashkey\").autodecode\n{\n  'field1': b'\\xff\\x00\\xff',\n  'field2': 'text',\n  'field3': 1.23,\n}\n```\n\n### Transactions\n\nA MULTI/EXEC transaction allows atomic execution without other clients running any commands in between. The following increments keys foo and bar atomically and returns their new values:\n\n```python\n>>> await redis().multi().incr(\"foo\").incr(\"bar\").exec()\n[1, 1]\n```\n\nNote: Redis cannot abort and undo an ongoing transaction once it has started. The server will attempt to execute all of the commands, even after errors.\n\nOne or more WATCH commands may be used prior to transaction to implement optimistic locking using *check-and-set* where the transaction is discarded if any of the watched keys were modified. Usually the operation is attempted again until successful:\n\n```python\ndb = redis()\n\n# Inverts the capitalization of foo (sets \"DEFAULT value\" if foo does not exist)\nwhile True:\n    db.watch(\"foo\")\n    foo = await db.get(\"foo\") or b\"default VALUE\"\n    db.multi()\n    db.set(\"foo\", foo.swapcase())\n    if await db.exec():\n        break\n```\n\n`False` is returned by `exec` if the transaction was discarded. Otherwise a list of responses or `True` is returned. In this example a boolean is always returned because the only command within the transaction was `set` which does not produce any output.\n\n## Pub/Sub channels\n\n### Sending messages\n\nMessages are published via normal `publish` commands:\n\n```python\nawait redis().publish(\"channel\", \"message\")\n```\n\n### Receiving messages\n\nReceiving connections can be created by calling `pubsub` on the connection pool:\n\n```python\nasync for message in redis.pubsub(\"channel\"):\n    print(message)\n```\n\nAdditional channels may be subscribed by `subscribe` and `psubscribe` commands\non the PubSub object, and zero or more initial channels may be specified while\ncreating the object by calling `redis.pubsub()`.\n\nBy default only messages are received. When subscribing multiple channels on the\nsame PubSub receiver, it may be useful to receive channel names as well, enabled\nby the `.with_channel` modifier. As with the standard interface, all commands\nand modifiers can be chained or called separately, as they return `self`.\n\n```python\npubsub = redis.pubsub().strdecode.with_channel\npubsub.subscribe(\"foo\", \"bar\")\npubsub.psubscribe(\"chan*\")\n\nasync for channel, message in pubsub:\n    print(message, \"from\", channel)\n```\n\nInstead of `async for` you may equivalently `await pubsub` to receive a single message.\n\n## Bytes encoding and decoding\n\n### Command encoding\n\nRedis commands only take bytes and have no other data types. Any non-bytes arguments are automatically encoded (strings, numbers, json):\n\n```python\ndb = redis()\ndb.set(\"binary\", bytes([128, 0, 255]))\ndb.set(\"number\", 10)\ndb.set(\"jsonkey\", dict(foo=123, bar=[1, 2, 3]))\nawait db\n```\n\n### Response decoding\n\nKeys such as field names and channel names are always decoded into `str` and the decoding modes only affect handling of values (content). Many Redis protocol commands also respond with typed integer, string or list responses which are not affected by this.\n\nThree decoding modes are provided for raw byte values. By default, values are not decoded. The other modes are enabled by modifiers `.strdecode` and `.autodecode`, which affect **only** the next `await`. Pub/Sub mode does not reset its decoding settings, so they persist once initially set.\n\n#### Default (no decoding)\n\n```python\n>>> await db.get(\"binary\").get(\"number\").get(\"jsonkey\")\n[\n  b\"\\x80\\x00\\xFF\",\n  b\"10\",\n  b'{\"foo\": 123, \"bar\": [1, 2, 3]}'\n]\n```\n\n#### .strdecode\n\n```python\n>>> await db.get(\"binary\").get(\"number\").get(\"jsonkey\").strdecode\n[\n  '\\udc80\\x00\\udcff',\n  '10',\n  '{\"foo\": 123, \"bar\": [1, 2, 3]}',\n]\n```\n\nAll values are decoded into `str` with invalid UTF-8 sequences replaced by Unicode surrogate values.\n\n#### .autodecode\n\n```python\n>>> await db.get(\"binary\").get(\"number\").get(\"jsonkey\").autodecode\n[\n  b\"\\x80\\x00\\xFF\",\n  10,\n  {'foo': 123, 'bar': [1, 2, 3]},\n]\n```\n\nThe autodecode mode tries to guess correct format based on content. This is mostly useful when you know that the data is only JSON or numbers. Arbitrary binary or string data might be accidentally decoded further than it should.\n\n## Async safety\n\nNotice that the `redis` object may be shared by multiple async workers but each must obtain a separate connection by calling it, as in the examples.\n\nA connection may be stored in a variable and used for multiple commands that rely on each other, e.g. transactions. This module attempts to keep track of whether the connection is reusable and thus can be returned to connection pool.\n\nIt is possible to use `.prevent_pooling` modifier on a DB object to prevent its connection being pooled after use.\n\n## Connection URLs\n\nThere are no separate arguments for hostname, port number and such. Instead all settings are encoded in an URL passed to Redis(). A format similar to other Redis modules is used. Some examples:\n\n* `redis://localhost/` - default setting (localhost:6379, database 0, no auth)\n* `redis://:password@localhost/2` - password authentication, using database 2\n* `rediss://secure.cloud/` or `redis+tls://secure.cloud/` - both are the same: secure connection\n* `redis+unix:///var/run/redis.sock?database=2` - UNIX socket connection must use three slashes\n* `redis+unix+tls://hostname.on.certificate/tmp/redis.sock` - why'd you want TLS on unix socket?\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tronic/redio",
    "keywords": "Redis,key-value store,trio,async,database,networking",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redio",
    "package_url": "https://pypi.org/project/redio/",
    "platform": null,
    "project_url": "https://pypi.org/project/redio/",
    "project_urls": {
      "Homepage": "https://github.com/Tronic/redio"
    },
    "release_url": "https://pypi.org/project/redio/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Redis async client for Trio",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14606049,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf85830960251fea3815cc97ddb3ce3c49ec556af807dd7b860c9c5474c3e293",
          "md5": "fef09434c2d6807bd415f4f64987b0b6",
          "sha256": "714735ef347f0556ee889ddf077cfecc05c9c57f93230b26ae6354a73b88dba4"
        },
        "downloads": -1,
        "filename": "redio-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fef09434c2d6807bd415f4f64987b0b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15626,
        "upload_time": "2020-03-02T16:31:13",
        "upload_time_iso_8601": "2020-03-02T16:31:13.453918Z",
        "url": "https://files.pythonhosted.org/packages/bf/85/830960251fea3815cc97ddb3ce3c49ec556af807dd7b860c9c5474c3e293/redio-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1de5511d6bf93ce00f8a74c0740eef2ca1e494c7dba8565e8eca5ebc8fc8fe94",
          "md5": "094583829ba370ed1bce7a6dc5148e6b",
          "sha256": "0d94a758ed47dce0e38b107309e26443dd46a0ece1d53981677d0d08bd109be8"
        },
        "downloads": -1,
        "filename": "redio-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "094583829ba370ed1bce7a6dc5148e6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18213,
        "upload_time": "2020-03-02T16:31:16",
        "upload_time_iso_8601": "2020-03-02T16:31:16.205182Z",
        "url": "https://files.pythonhosted.org/packages/1d/e5/511d6bf93ce00f8a74c0740eef2ca1e494c7dba8565e8eca5ebc8fc8fe94/redio-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39248ca12a98aef270b427d80647c58d0cad558654fa40c2d8fa1c9e65aee446",
          "md5": "d6f568e378f096a1345c2f756030f31e",
          "sha256": "7a5e6a8bebef8b674ea6318febc4b7c9e3e6b2a19f837356682f71228a7f0bfa"
        },
        "downloads": -1,
        "filename": "redio-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6f568e378f096a1345c2f756030f31e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15618,
        "upload_time": "2020-03-02T17:37:32",
        "upload_time_iso_8601": "2020-03-02T17:37:32.377158Z",
        "url": "https://files.pythonhosted.org/packages/39/24/8ca12a98aef270b427d80647c58d0cad558654fa40c2d8fa1c9e65aee446/redio-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bc4fdb213fb74eae70660410e574cd3a58573d82f04d2a723cf8d6ff7ad20cf",
          "md5": "3300f0a7b3ce71624b33d34635203057",
          "sha256": "0efad12ee13b93c6e6552961819dd5bc372d708912fc76144295279dfd050622"
        },
        "downloads": -1,
        "filename": "redio-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3300f0a7b3ce71624b33d34635203057",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18210,
        "upload_time": "2020-03-02T17:37:33",
        "upload_time_iso_8601": "2020-03-02T17:37:33.930816Z",
        "url": "https://files.pythonhosted.org/packages/2b/c4/fdb213fb74eae70660410e574cd3a58573d82f04d2a723cf8d6ff7ad20cf/redio-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bed913e9835a03a31824be1ab094783fb2802a67da5819ff3503b37696e7237",
          "md5": "fe77eaab74302bd198d47aef6518de8a",
          "sha256": "b4df24e127bfcf40bba491c19938352ceb396337cdf6939c2f3d836dcd5ee5d9"
        },
        "downloads": -1,
        "filename": "redio-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe77eaab74302bd198d47aef6518de8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15920,
        "upload_time": "2020-05-22T14:35:44",
        "upload_time_iso_8601": "2020-05-22T14:35:44.155886Z",
        "url": "https://files.pythonhosted.org/packages/2b/ed/913e9835a03a31824be1ab094783fb2802a67da5819ff3503b37696e7237/redio-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e2a71cccca5261a67764845f2857681111274b7b686fc2b49646796232c06b0",
          "md5": "a1bf5865a54f6d5e86122905b087ea77",
          "sha256": "b2e204f7666b9396043104cf8389cef56a2874846ecb9e5f63ad1e6b6db5a2cd"
        },
        "downloads": -1,
        "filename": "redio-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a1bf5865a54f6d5e86122905b087ea77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19114,
        "upload_time": "2020-05-22T14:35:45",
        "upload_time_iso_8601": "2020-05-22T14:35:45.575177Z",
        "url": "https://files.pythonhosted.org/packages/0e/2a/71cccca5261a67764845f2857681111274b7b686fc2b49646796232c06b0/redio-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34e62fba978e38a574db0573b2ffac186829e6e0552f7ac82ce5fe7ef9fa5863",
          "md5": "48250803e825f3c8c6a6ef61ec241d14",
          "sha256": "55fae41af0b059fa59055e8bcfff43b85785879afc85ad8ba40fa0f640bd218e"
        },
        "downloads": -1,
        "filename": "redio-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "48250803e825f3c8c6a6ef61ec241d14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18836,
        "upload_time": "2022-07-31T17:41:43",
        "upload_time_iso_8601": "2022-07-31T17:41:43.518806Z",
        "url": "https://files.pythonhosted.org/packages/34/e6/2fba978e38a574db0573b2ffac186829e6e0552f7ac82ce5fe7ef9fa5863/redio-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34e62fba978e38a574db0573b2ffac186829e6e0552f7ac82ce5fe7ef9fa5863",
        "md5": "48250803e825f3c8c6a6ef61ec241d14",
        "sha256": "55fae41af0b059fa59055e8bcfff43b85785879afc85ad8ba40fa0f640bd218e"
      },
      "downloads": -1,
      "filename": "redio-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "48250803e825f3c8c6a6ef61ec241d14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18836,
      "upload_time": "2022-07-31T17:41:43",
      "upload_time_iso_8601": "2022-07-31T17:41:43.518806Z",
      "url": "https://files.pythonhosted.org/packages/34/e6/2fba978e38a574db0573b2ffac186829e6e0552f7ac82ce5fe7ef9fa5863/redio-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}