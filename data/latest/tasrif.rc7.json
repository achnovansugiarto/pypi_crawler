{
  "info": {
    "author": "QCRI",
    "author_email": "uabbas@hbku.edu.qa",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<p align=\"center\">\n  <img width=\"75%\" src=\"https://tasrif.qcri.org/_static/logo.png\" alt=\"Tasrif\">\n</p>\n<p align=\"center\">\n  <b>A Python framework for processing wearable data in the health domain.</b>\n</p>\n<p align=\"center\">\n  <a href=\"https://tasrif.qcri.org\">\n    <img src=\"https://awesome.re/badge.svg\" alt=\"SIHA\">\n  </a>\n  <a href=\"https://www.python.org/\">\n    <img src=\"https://img.shields.io/badge/Made%20with-Python3-1f425f.svg\" alt=\"Made with Python\">\n  </a>\n  <a href=\"https://github.com/qcri/tasrif/graphs/commit-activity\">\n    <img src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" alt=\"Maintenance\">\n  </a>\n  <a href=\"https://github.com/qcri/tasrif/actions\">\n    <img src=\"https://github.com/qcri/tasrif/actions/workflows/ci.yml/badge.svg\" alt=\"Workflow Status\">\n  </a>\n  <a href=\"https://pypi.org/project/tasrif/\">\n    <img alt=\"PyPI - Downloads\" src=\"https://img.shields.io/pypi/dm/tasrif?style=flat\">\n  </a>\n  <a href=\"https://pypi.org/project/tasrif/\">\n    <img alt=\"PyPI - Version\" src=\"https://img.shields.io/pypi/v/tasrif\">\n  </a>\n  <a href=\"https://GitHub.com/qcri/tasrif/watchers/\">\n    <img src=\"https://img.shields.io/github/watchers/qcri/tasrif?style=social&label=Watch&maxAge=2592000\" alt=\"GitHub Watchers\">\n  </a>\n  <a href=\"https://GitHub.com/qcri/tasrif/stargazers/\">\n    <img src=\"https://img.shields.io/github/stars/qcri/tasrif?style=social&label=Star&maxAge=2592000\" alt=\"GitHub Stars\">\n  </a>\n</p>\n\n\n#\n\nTasrif is a library for processing of eHealth data. It provides:\n\n- A pipeline DSL for chaining together commonly used processing operations on time-series eHealth\n  data, such as resampling, normalization, etc.\n- DataReaders for reading eHealth datasets such as\n  [MyHeartCounts](https://www.synapse.org/?source=post_page---------------------------#!Synapse:syn11269541/wiki/), [SleepHealth](https://www.synapse.org/#!Synapse:syn18492837/wiki/) and data from FitBit devices.\n\n## Installation\n\nTo use Tasrif, you will need to have the package installed. Please follow the bellow steps to install Tasrif:\n\n\nFirst, create a virtual environment using [venv](https://docs.python.org/3/library/venv.html) with a linux operating system machine, or with [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install)\n\n```python\n# Create a virtual environment\npython3 -m venv tasrif-env\n\n# Activate the virtual environment\nsource tasrif-env/bin/activate\n\n# Upgrade pip\n(tasrif-env) pip install --upgrade pip\n```\n\nThen, install Tasrif either from PyPI\n\n```python\n(tasrif-env) pip install tasrif\n```\n\nor install from source\n\n```python\n(tasrif-env) git clone https://github.com/qcri/tasrif\n(tasrif-env) cd tasrif\n(tasrif-env) pip install -e .\n\n```\n\nIf no installation errors occur, see [Quick start by usecase](#quick-start-by-usecase) section to use Tasrif.\n\n### Note on feature extraction using Tasrif\n\nDue to some outdated internal Tasrif dependancies on Pypi, we have decided to place those dependancies in `requirements.txt`. Once those packages are updated in Pypi, we will move them back to `setup.py`. The current `requirements.txt` specifies the dependancies links directly from Github. If you plan to use the following two operators: `TSFreshFeatureExtractorOperator` or `CalculateTimeseriesPropertiesOperator`, you will need [TSFresh](https://github.com/blue-yonder/tsfresh) and [Kats](https://github.com/facebookresearch/Kats) packages installed, which can be done by running the following command\n\n```python\n(tasrif-env) MINIMAL_KATS=1 pip install -r requirements.txt\n```\n\nNote that `MINIMAL_KATS=1` is passed in the installation script to minimally install Kats. See [requirements.txt](requirements.txt) for details.\n\n## Features\n\n### Pipeline DSL\n\nTasrif provies a variety of processing operators that can be chained together in a pipeline. The\noperators themselves take as input and output [Pandas](https://pandas.pydata.org/)\n[DataFrames](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe).\n\nFor example, consider the `AggregateOperator`:\n\n```python\n>>> import pandas as pd\n>>> from tasrif.processing_pipeline.custom import AggregateOperator\n>>> from tasrif.processing_pipeline.pandas import DropNAOperator\n\n>>> df0 = pd.DataFrame([\n        ['Doha', 25, 30],\n        ['Doha', 17, 50],\n        ['Dubai', 20, 40],\n        ['Dubai', 21, 42]],\n        columns=['city', 'min_temp', 'max_temp'])\n\n>>> operator = AggregateOperator(\n    groupby_feature_names=\"city\",\n    aggregation_definition={\"min_temp\": [\"mean\", \"std\"]})\n\n>>> df0 = operator.process(df0)\n\n>>> df0\n\n[    city  min_temp_mean  min_temp_std\n0   Doha           21.0      5.656854\n1  Dubai           20.5      0.707107]\n```\n\nOperators are meant to be used as part of a pipeline, where they can be chained together for\nsequential processing of data:\n\n```python\n>>> import pandas as pd\n>>> from tasrif.processing_pipeline import SequenceOperator\n>>> from tasrif.processing_pipeline.custom import AggregateOperator, CreateFeatureOperator\n>>> from tasrif.processing_pipeline.pandas import ConvertToDatetimeOperator, SortOperator\n\n>>> df0 = pd.DataFrame([\n        ['15-07-2021', 'Doha', 25, 30],\n        ['16-07-2021', 'Doha', 17, 50],\n        ['15-07-2021', 'Dubai', 20, 40],\n        ['16-07-2021', 'Dubai', 21, 42]],\n        columns=['date', 'city', 'min_temp', 'max_temp'])\n\n>>> pipeline = SequenceOperator([\n        ConvertToDatetimeOperator(feature_names=[\"date\"]),\n        CreateFeatureOperator(\n            feature_name='avg_temp',\n            feature_creator=lambda df: (df['min_temp'] + df['max_temp'])/2),\n        SortOperator(by='avg_temp')\n    ])\n\n>>> pipeline.process(df0)\n[        date   city  min_temp  max_temp  avg_temp\n0 2021-07-15   Doha        25        30      27.5\n2 2021-07-15  Dubai        20        40      30.0\n3 2021-07-16  Dubai        21        42      31.5\n1 2021-07-16   Doha        17        50      33.5]\n```\n\n### DataReaders\n\nTasrif also comes with DataReader classes for importing various eHealth datasets into pipelines.\nThese readers preprocess the raw data and convert them into a DataFrame for downstream processing in a pipeline.\n\nSupported datasets include:\n- [MyHeartCounts](https://www.synapse.org/?source=post_page---------------------------#!Synapse:syn11269541/wiki/)\n- [SleepHealth](https://www.synapse.org/#!Synapse:syn18492837/wiki/)\n- [Zenodo FitBit](https://zenodo.org/record/53894)\n- Export data from FitBit devices\n- Export data from Withings devices\n- ...and more\n\nDataReaders can be used by treating them as source operators in a pipeline:\n\n```python\nfrom tasrif.processing_pipeline import SequenceOperator\nfrom tasrif.data_readers.my_heart_counts import DayOneSurveyDataset\nfrom tasrif.processing_pipeline import DropNAOperator\n\nday_one_survey_path = <path to MyHeartCounts DayOneSurvey file>\n\npipeline = Pipeline([\n    DayOneSurveyDataset(day_one_survey_path),\n    DropNAOperator,\n    SetIndexOperator('healthCode'),\n])\n\npipeline.process()\n```\n\n## Quick start by usecase\n\n- [Reading data](#reading-data)\n- [Compute statistics](#compute-statistics)\n- [Extract features from existing columns](#extract-features-from-existing-columns)\n- [Filter data](#filter-data)\n- [Wrangle data](#wrangle-data)\n- [Test prepared data](#test-prepared-data)\n- [Create a pipeline to link the operators](#create-a-pipeline-to-link-the-operators)\n- [Debug your pipeline](#debug-your-pipeline)\n- [Define a custom operator](#define-a-custom-operator)\n- [Other references](#other-references)\n\n\n### Reading data\n\nReading a single csv file\n\n```python\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\n\noperator = ReadCsvOperator('examples/quick_start/csvs/participant1.csv')\ndf = operator.process()[0]\n```\n\nReading multiple csvs in a folder\n\n```python\nfrom tasrif.processing_pipeline.custom import ReadCsvFolderOperator\n\noperator = ReadCsvFolderOperator(name_pattern='examples/quick_start/csvs/*.csv')\ndf = operator.process()[0]\n```\n\nby default, `ReadCsvFolderOperator` concatenates the csvs into one dataframe. if you would like to work on the csvs separately, you can pass the argument `concatenate=False` to `ReadCsvFolderOperator`, which returns a python generator that iterates the csvs.\n\n\nReading csvs referenced by a column in dataframe `df`\n\n```python\nimport pandas as pd\nfrom tasrif.processing_pipeline.custom import ReadNestedCsvOperator\n\ndf = pd.DataFrame({\"name\": ['Alfred', 'Roy'],\n                   \"age\": [43, 32],\n                   \"csv_files_column\": ['participant1.csv', 'participant2.csv']})\n\noperator = ReadNestedCsvOperator(folder_path='examples/quick_start/csvs/',\n                                 field='csv_files_column')\ngenerator = operator.process(df)[0]\n\nfor record, details in generator:\n    print(record)\n    print(details)\n```\n\nReading json files referenced by a column in dataframe `df`\n\n```python\nimport pandas as pd\nfrom tasrif.processing_pipeline.custom import IterateJsonOperator\n\ndf = pd.DataFrame({\"name\": ['Alfred', 'Roy'],\n                   \"age\": [43, 32],\n                   \"json_files_column\": ['participant1.json', 'participant2.json']})\n\noperator = IterateJsonOperator(folder_path='examples/quick_start/jsons/',\n                               field='json_files_column',\n                               pipeline=None)\ngenerator = operator.process(df)[0]\n\nfor record, details in generator:\n    print(record)\n    print(details)\n```\n\n### Compute statistics\n\nCompute quick statistics using `StatisticsOperator`. `StatisticsOperator` includes counts of rows, missing data, duplicate rows, and others.\n\n```python\n\nimport pandas as pd\nfrom tasrif.processing_pipeline.custom import StatisticsOperator\n\ndf = pd.DataFrame( [\n    ['2020-02-20', 1000, 1800, 1], ['2020-02-21', 5000, 2100, 1], ['2020-02-22', 10000, 2400, 1],\n    ['2020-02-20', 1000, 1800, 1], ['2020-02-21', 5000, 2100, 1], ['2020-02-22', 10000, 2400, 1],\n    ['2020-02-20', 0, 1600, 2], ['2020-02-21', 4000, 2000, 2], ['2020-02-22', 11000, 2400, 2],\n    ['2020-02-20', None, 2000, 3], ['2020-02-21', 0, 2700, 3], ['2020-02-22', 15000, 3100, 3]],\ncolumns=['Day', 'Steps', 'Calories', 'PersonId'])\n\nfilter_features = {\n    'Steps': lambda x : x > 0\n}\n\nsop = StatisticsOperator(participant_identifier='PersonId',\n                         date_feature_name='Day',\n                         filter_features=filter_features)\nsop.process(df)[0]\n```\n\nOr use `ParticipationOverviewOperator` to see statistics per participant. Pass the argument `overview_type=\"date_vs_features\"` to compute statistics per date. See below\n\n```python\n\nfrom tasrif.processing_pipeline.custom import ParticipationOverviewOperator\n\nsop = ParticipationOverviewOperator(participant_identifier='PersonId',\n                                    date_feature_name='Day',\n                                    overview_type='participant_vs_features')\nsop.process(df)[0]\n\n\n```\n\nUse `AggregateOperator` if you require specific statistics for some columns\n\n\n```python\nfrom tasrif.processing_pipeline.custom import AggregateOperator\n\noperator = AggregateOperator(groupby_feature_names =\"PersonId\",\n                            aggregation_definition= {\"Steps\": [\"mean\", \"std\"],\n                                                     \"Calories\": [\"sum\"]\n                                                    })\noperator.process(df)[0]\n\n```\n\n\n### Extract features from existing columns\n\nConvert time columns into cyclical features, which are more efficiently grasped by machine learning models\n\n```python\n\nfrom tasrif.processing_pipeline.custom import EncodeCyclicalFeaturesOperator\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\n\ndf = ReadCsvOperator('examples/quick_start/steps_per_day.csv',\n                     parse_dates=['Date']).process()[0]\n\noperator = EncodeCyclicalFeaturesOperator(date_feature_name=\"Date\",\n                                          category_definition=\"day\")\noperator.process(df)[0]\n\n\n```\n\n\nExtract timeseries features using `CalculateTimeseriesPropertiesOperator` which internally calls `kats` package\n\n```python\n\nfrom tasrif.processing_pipeline.kats import CalculateTimeseriesPropertiesOperator\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\n\ndf = ReadCsvOperator('examples/quick_start/long_ts.csv',\n                     parse_dates=['Date']).process()[0]\n\n\noperator = CalculateTimeseriesPropertiesOperator(date_feature_name=\"Date\", value_column='Steps')\noperator.process(df)[0]\n\n```\n\nExtract using features using `tsfresh` package\n\n```python\n\nfrom tasrif.processing_pipeline.custom import SlidingWindowOperator\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\nfrom tasrif.processing_pipeline.tsfresh import TSFreshFeatureExtractorOperator\n\ndf = ReadCsvOperator('examples/quick_start/cgm.csv',\n                     parse_dates=['dateTime']).process()[0]\n\n\nop = SlidingWindowOperator(winsize=\"1h15t\",\n                           time_col=\"dateTime\",\n                           label_col=\"CGM\",\n                           participant_identifier=\"patientID\")\n\ndf_timeseries, df_labels, df_label_time, df_pids = op.process(df)[0]\n\nop = TSFreshFeatureExtractorOperator(seq_id_col=\"seq_id\", date_feature_name='dateTime', value_col='CGM')\nfeatures = op.process(df_timeseries)[0]\nfeatures.dropna(axis=1)\n\n```\n\nNote that `TSFreshFeatureExtractorOperator` requires a column `seq_id`. This column indicates which entities the time series belong to. Features will be extracted individually for each entity (id). The resulting feature matrix will contain one row per id. The column can be created manually or be created via `SlidingWindowOperator`.\n\n\n### Filter data\n\nfilter rows, days, or participants with a custom condition using `FilterOperator`\n\n```python\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\nfrom tasrif.processing_pipeline.custom import FilterOperator\n\ndf = ReadCsvOperator('examples/quick_start/filter_example.csv',\n                     parse_dates=['Hours']).process()[0]\n\noperator = FilterOperator(participant_identifier=\"Id\",\n                          date_feature_name=\"Hours\",\n                          epoch_filter=lambda df: df['Steps'] > 10,\n                          day_filter={\n                              \"column\": \"Hours\",\n                              \"filter\": lambda x: x.count() < 10,\n                              \"consecutive_days\": (7, 12) # 7 minimum consecutive days, and 12 max\n                          },\n                          filter_type=\"include\")\n\noperator.process(df)[0]\n\n```\n\n### Wrangle data\n\nAdd a column using `CreateFeatureOperator`\n\n```python\nimport pandas as pd\nfrom pandas import Timestamp\n\ndf = pd.DataFrame([\n [Timestamp('2016-12-31 00:00:00'), Timestamp('2017-01-01 09:03:00'), 5470, 2968, 1],\n [Timestamp('2017-01-01 00:00:00'), Timestamp('2017-01-01 23:44:00'), 9769, 2073, 1],\n [Timestamp('2017-01-02 00:00:00'), Timestamp('2017-01-02 16:54:00'), 9444, 2883, 1],\n [Timestamp('2017-01-03 00:00:00'), Timestamp('2017-01-05 22:49:00'), 20064, 2287, 1],\n [Timestamp('2017-01-04 00:00:00'), Timestamp('2017-01-06 07:27:00'),16771, 2716, 1]],\n    columns = ['startTime', 'endTime', 'steps', 'calories', 'personId']\n)\n\noperator = CreateFeatureOperator(\n   feature_name=\"duration\",\n   feature_creator=lambda df: df['endTime'] - df['startTime'])\n\noperator.process(df)[0]\n\n```\n\nUpsample or downsample date features using `ResampleOperator`. The first argument `rule` can be minutes `min`, hours `H`, days `D`, and more. See details of resampling [here](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.resample.html)\n\n```python\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\nfrom tasrif.processing_pipeline.custom import ResampleOperator\n\ndf = ReadCsvOperator('examples/quick_start/sleep.csv',\n                     parse_dates=['timestamp'],\n                     index_col=['timestamp']).process()[0]\n\nop = ResampleOperator('D', {'sleep_level': 'mean'})\nop.process(df)\n```\n\nNote that, currently, the index of the dataframe has to be of type `DatetimeIndex` so that `ResampleOperator` can be called correctly.\nSet the start hour of the day to some hour using `SetStartHourOfDayOperator`\n\n```python\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\nfrom tasrif.processing_pipeline.custom import SetStartHourOfDayOperator\n\ndf = ReadCsvOperator('examples/quick_start/filter_example.csv',\n                     parse_dates=['Hours']).process()[0]\n\noperator = SetStartHourOfDayOperator(date_feature_name='Hours',\n                                     participant_identifier='Id',\n                                     shift=6)\noperator.process(df)[0]\n```\n\na new column `shifted_time_col` will be created. This can be useful if the user wants to calculate statistics at a redefined times of the day instead of midnight-to-midnight (e.g. 8:00 AM - 8:00 AM).\n\nConcatenate multiple dataframes or a generator using `ConcatOperator`\n\n```python\n\nimport pandas as pd\nfrom tasrif.processing_pipeline.pandas import ConcatOperator\n\ndf = pd.DataFrame([\n [Timestamp('2016-12-31 00:00:00'), Timestamp('2017-01-01 09:03:00'), 5470, 2968, 1],\n [Timestamp('2017-01-01 00:00:00'), Timestamp('2017-01-01 23:44:00'), 9769, 2073, 1],\n [Timestamp('2017-01-02 00:00:00'), Timestamp('2017-01-02 16:54:00'), 9444, 2883, 1],\n [Timestamp('2017-01-03 00:00:00'), Timestamp('2017-01-05 22:49:00'), 20064, 2287, 1],\n [Timestamp('2017-01-04 00:00:00'), Timestamp('2017-01-06 07:27:00'),16771, 2716, 1]],\n    columns = ['startTime', 'endTime', 'steps', 'calories', 'personId']\n)\n\ndf1 = df.copy()\ndf2 = df.copy()\n\nconcatenated_df = ConcatOperator().process(df1, df2)[0]\n\n```\n\nNormalize selected columns\n\n```python\nimport pandas as pd\nfrom tasrif.processing_pipeline.custom import NormalizeOperator\nfrom tasrif.processing_pipeline.custom import NormalizeTransformOperator\n\ndf = pd.DataFrame([\n    [1, \"2020-05-01 00:00:00\", 10],\n    [1, \"2020-05-01 01:00:00\", 15],\n    [1, \"2020-05-01 03:00:00\", 23],\n    [2, \"2020-05-02 00:00:00\", 17],\n    [2, \"2020-05-02 01:00:00\", 11]],\n    columns=['logId', 'timestamp', 'sleep_level'])\n\nop = NormalizeOperator('all', 'minmax', {'feature_range': (0, 2)})\noutput = op.process(df)\n```\n\nUse the fit normalizer on different data using `NormalizeTransformOperator`\n\n```python\n\ntrained_model = output[0][1]\n\nop = NormalizeTransformOperator('all', trained_model)\n\noutput = op.process(df)\noutput\n```\n\nUse `AggregateActivityDatesOperator` to view the start date and end date of a\ndataframe that has a date column per row per participant.\n\n```python\nimport pandas as pd\n\nfrom tasrif.processing_pipeline.custom import AggregateActivityDatesOperator\nfrom tasrif.processing_pipeline.pandas import ReadCsvOperator\n\nreader = ReadCsvOperator('examples/quick_start/activity_long.csv')\ndf = reader.process()[0]\n\noperator = AggregateActivityDatesOperator(date_feature_name=\"date\",\n                                        participant_identifier=['Id', 'logId'])\ndf = operator.process(df)[0]\ndf\n```\n\nYou can use `jqOperator` to process JSON data\n\n```python\nimport pandas as pd\nfrom tasrif.processing_pipeline.custom import JqOperator\ndf = [\n  {\n    \"date\": \"2020-01-01\",\n    \"sleep\": [\n      {\n        \"sleep_data\": [\n          {\n            \"level\": \"rem\",\n            \"minutes\": 180\n          },\n          {\n            \"level\": \"deep\",\n            \"minutes\": 80\n          },\n          {\n            \"level\": \"light\",\n            \"minutes\": 300\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"date\": \"2020-01-02\",\n    \"sleep\": [\n      {\n        \"sleep_data\": [\n          {\n            \"level\": \"rem\",\n            \"minutes\": 280\n          },\n          {\n            \"level\": \"deep\",\n            \"minutes\": 60\n          },\n          {\n            \"level\": \"light\",\n            \"minutes\": 200\n          }\n        ]\n      }\n    ]\n  }\n]\n\n\n\nop = JqOperator(\"map({date, sleep: .sleep[].sleep_data})\")\n\nop.process(df)\n```\n\n### Test prepared data\n\nSee if your prepared data can act as an input to a machine learning model\n\n```python\nfrom tasrif.processing_pipeline.custom import LinearFitOperator\ndf = pd.DataFrame([\n    [1, \"2020-05-01 00:00:00\", 10, 'poor'],\n    [1, \"2020-05-01 01:00:00\", 15, 'poor'],\n    [1, \"2020-05-01 03:00:00\", 23, 'good'],\n    [2, \"2020-05-02 00:00:00\", 17, 'good'],\n    [2, \"2020-05-02 01:00:00\", 11, 'poor']],\n    columns=['logId', 'timestamp', 'sleep_level', 'sleep_quality'])\n\nop = LinearFitOperator(feature_names='sleep_level',\n                       target='sleep_quality',\n                       target_type='categorical')\nop.process(df)\n```\n\n### Create a pipeline to link the operators\n\nChain operators using `SequenceOperator`\n\n```python\nimport pandas as pd\nfrom tasrif.processing_pipeline import SequenceOperator\nfrom tasrif.processing_pipeline.custom import AggregateOperator, CreateFeatureOperator, SetStartHourOfDayOperator\nfrom tasrif.processing_pipeline.pandas import ConvertToDatetimeOperator, SortOperator, ReadCsvOperator\n\ndf = ReadCsvOperator('examples/quick_start/cgm.csv').process()[0]\n\ndf\n\npipeline = SequenceOperator([\n    ConvertToDatetimeOperator(feature_names=[\"dateTime\"]),\n    SetStartHourOfDayOperator(date_feature_name='dateTime',\n                                     participant_identifier='patientID',\n                                     shift=6),\n    SortOperator(by='dateTime'),\n    AggregateOperator(groupby_feature_names =\"patientID\",\n                      aggregation_definition= {\"CGM\": [\"mean\", \"std\"]})\n\n])\n\npipeline.process(df)\n```\n\n\n### Debug your pipeline\n\nTasrif contains observers under `tasrif/processing_pipeline/observers/` that are useful for seeing how the operators change your data. For instance, you can print the head of processed dataframe after every operator. You can do so by passing an `observer` to the `observers` argument in `SequenceOperator`.\n\n```python\n\nimport pandas as pd\nfrom tasrif.processing_pipeline.pandas import RenameOperator\nfrom tasrif.processing_pipeline.observers import FunctionalObserver, LoggingObserver, GroupbyLoggingObserver\nfrom tasrif.processing_pipeline import SequenceOperator, Observer\n\ndf = pd.DataFrame([\n    [1, \"2020-05-01 00:00:00\", 1],\n    [1, \"2020-05-01 01:00:00\", 1],\n    [1, \"2020-05-01 03:00:00\", 2],\n    [2, \"2020-05-02 00:00:00\", 1],\n    [2, \"2020-05-02 01:00:00\", 1]],\n    columns=['logId', 'timestamp', 'sleep_level'])\n\npipeline = SequenceOperator([RenameOperator(columns={\"timestamp\": \"time\"}),\n                             RenameOperator(columns={\"time\": \"time_difference\"})],\n                             observers=[LoggingObserver(\"head,tail\")])\nresult = pipeline.process(df[0])\nresult\n\n```\n\n### Define a custom operator\n\nUsers can inherit from `MapProcessingOperator` to quickly build their own custom operators that perform map-like operations.\n\n```python\nfrom tasrif.processing_pipeline.map_processing_operator import MapProcessingOperator\n\nclass SizeOperator(MapProcessingOperator):\n    def _processing_function(self, df):\n        return df.size\n```\n\n\n### Other references\n\n- You may examine `tasrif/processing_pipeline/test_scripts/` for other minimal examples of Tasrif's operators.\n- Common Pandas functions can be found under `tasrif/processing_pipeline/pandas/`\n\n\n## Documentation\n\nTasrif's official documentation is hosted here: [https://tasrif.qcri.org](https://tasrif.qcri.org)\n\nYou can build the docs locally after installing the dependencies in `setup.py` and\n`requirements.txt` by:\n\n```\ncd docs\nmake html\n```\n\nYou can then browse through them by opening `docs/build/html/index.html` in a browser.\n\n# Contributing\n\n</a>\n   <a href=\"https://github.com/qcri/tasrif/network/dependencies\">\n   <img src=\"https://img.shields.io/github/contributors/qcri/tasrif\" alt=\"Contributors\">\n</a>\n\n\nThis project is much stronger with your collaboration. Be part of it!<br>\n<b>Thank you all amazing contributors!</b>\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<a href=\"https://github.com/uabbas\"><img src=\"https://avatars.githubusercontent.com/u/7748104?v=4\" class=\"avatar-user\" width=\"50px;\"/></a>\n<a href=\"https://github.com/abalhomaid\"><img src=\"https://avatars.githubusercontent.com/u/12021070?v=4\" class=\"avatar-user\" width=\"50px;\"/></a>\n<a href=\"https://github.com/hashimmoosavi\"><img src=\"https://avatars.githubusercontent.com/u/3678012?v=4\" class=\"avatar-user\" width=\"50px;\"/></a>\n<a href=\"https://github.com/joaopalotti\"><img src=\"https://avatars.githubusercontent.com/u/852343?s=400&v=4\" class=\"avatar-user\" width=\"50px;\"/></a>\n<a href=\"https://github.com/fabubaker\"><img src=\"https://avatars.githubusercontent.com/u/9405286?v=4\" class=\"avatar-user\" width=\"50px;\"/></a>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/qcri/tasrif",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tasrif",
    "package_url": "https://pypi.org/project/tasrif/",
    "platform": null,
    "project_url": "https://pypi.org/project/tasrif/",
    "project_urls": {
      "Homepage": "https://github.com/qcri/tasrif"
    },
    "release_url": "https://pypi.org/project/tasrif/0.1.0/",
    "requires_dist": [
      "pandas (>=1.1.1)",
      "numpy (<=1.20)",
      "pyjq (>=2.5.1)",
      "ummalqura (>=2.0.1)",
      "scikit-learn (>=0.22.1)",
      "tqdm (>=4.52.0)",
      "ray (>=1.7.0)",
      "dataprep (>=0.3.0)"
    ],
    "requires_python": ">= 3.7",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13178895,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12b7ec4080f84b90db22fe1eda1067d802773035e1606e62a3737da54d7e70f4",
          "md5": "14a3779afe720693916e139dc7452d28",
          "sha256": "72d25d9c622fea921e6a87ecaa0d895b103bad1351d43a58674f8283f4848911"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14a3779afe720693916e139dc7452d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 131952,
        "upload_time": "2021-12-06T04:47:09",
        "upload_time_iso_8601": "2021-12-06T04:47:09.846362Z",
        "url": "https://files.pythonhosted.org/packages/12/b7/ec4080f84b90db22fe1eda1067d802773035e1606e62a3737da54d7e70f4/tasrif-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c38a75c74223e747cfe9c0aa920ef892c7908bd95ef0bca844d0da2fe8a6c51",
          "md5": "2d2c914154aea5f0f6b92ee3b3c81a12",
          "sha256": "1a91c02c43c0e313a3d2c43b945ee2d0ada3bab3cb715a374412c6d836559e28"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2d2c914154aea5f0f6b92ee3b3c81a12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 89123,
        "upload_time": "2021-12-06T04:47:12",
        "upload_time_iso_8601": "2021-12-06T04:47:12.312884Z",
        "url": "https://files.pythonhosted.org/packages/4c/38/a75c74223e747cfe9c0aa920ef892c7908bd95ef0bca844d0da2fe8a6c51/tasrif-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c352a54183de68217dca19032555c668d1c23cf9ed62ce61d944aa014a8f9637",
          "md5": "34dd845b556fdd13329c998c6fb76896",
          "sha256": "b9864fd438b0db7e3fc216575c28130892b6137e66289f0a5c7ee1593f99ea5f"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34dd845b556fdd13329c998c6fb76896",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 131954,
        "upload_time": "2021-12-06T04:51:36",
        "upload_time_iso_8601": "2021-12-06T04:51:36.870504Z",
        "url": "https://files.pythonhosted.org/packages/c3/52/a54183de68217dca19032555c668d1c23cf9ed62ce61d944aa014a8f9637/tasrif-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dbb10c69449e99463cbead0a04b50050a4631f95b6822506d553b9ed5ed5dea2",
          "md5": "ee48447446e8356354e14ddcd6c6bd3b",
          "sha256": "b48fa8bbbfec0c977134720485dc3bd4066c7fb7827a9533bfc7e3ec6df8852e"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ee48447446e8356354e14ddcd6c6bd3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 89123,
        "upload_time": "2021-12-06T04:51:39",
        "upload_time_iso_8601": "2021-12-06T04:51:39.163681Z",
        "url": "https://files.pythonhosted.org/packages/db/b1/0c69449e99463cbead0a04b50050a4631f95b6822506d553b9ed5ed5dea2/tasrif-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0d1652d8bc5b93fc0275c21b48b0d30a4cd17789d89280f86c683106c759aea0",
          "md5": "f9dd72b22d94c03d76262b5fe857d0ef",
          "sha256": "7ce659f3be1a7de99ad9af8f4a2502be722b531bbd7bb493c38a14c153fcb890"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9dd72b22d94c03d76262b5fe857d0ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 131951,
        "upload_time": "2021-12-06T05:00:41",
        "upload_time_iso_8601": "2021-12-06T05:00:41.626223Z",
        "url": "https://files.pythonhosted.org/packages/0d/16/52d8bc5b93fc0275c21b48b0d30a4cd17789d89280f86c683106c759aea0/tasrif-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8891d5a043e8d2b87278f22e934bd43bf75ab72f3f707745a912267cac3f006b",
          "md5": "14ebae201487e27936fc64efd0731bf6",
          "sha256": "0f11fdf74d17881b88d0dc3be34faf1ce1887547d4140ece3b611ff53519032f"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "14ebae201487e27936fc64efd0731bf6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 89111,
        "upload_time": "2021-12-06T05:00:43",
        "upload_time_iso_8601": "2021-12-06T05:00:43.842702Z",
        "url": "https://files.pythonhosted.org/packages/88/91/d5a043e8d2b87278f22e934bd43bf75ab72f3f707745a912267cac3f006b/tasrif-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d33754372f4f01259613b27c35025375874e36e916bf760c01e3dfd16222690",
          "md5": "bdc72ffa4e5c14f3edc4a41af3b27d95",
          "sha256": "18b626661369dfc913b7ce7053379c1def98e6c3946e172c12838947ebb9cf6c"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdc72ffa4e5c14f3edc4a41af3b27d95",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 131955,
        "upload_time": "2021-12-06T05:40:35",
        "upload_time_iso_8601": "2021-12-06T05:40:35.868575Z",
        "url": "https://files.pythonhosted.org/packages/8d/33/754372f4f01259613b27c35025375874e36e916bf760c01e3dfd16222690/tasrif-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b0ad7dc0651ac8845784959617be1c0d639698b8dbd3b6de32dc6d3a7b5962c",
          "md5": "1be2866d3c4828c787cddbad9dc557a3",
          "sha256": "02f2e7050fb775cf5431a9839aaccf6b93f25dfa7464dfd5ba0d5bb1f93d0d51"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1be2866d3c4828c787cddbad9dc557a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 89112,
        "upload_time": "2021-12-06T05:40:37",
        "upload_time_iso_8601": "2021-12-06T05:40:37.796475Z",
        "url": "https://files.pythonhosted.org/packages/9b/0a/d7dc0651ac8845784959617be1c0d639698b8dbd3b6de32dc6d3a7b5962c/tasrif-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99700c8446224f250e858bc1de7d2bda47f9899e8d61df985d92fe485d0d8f87",
          "md5": "8e1e4a8678beb40aba242c9fbe4049e1",
          "sha256": "01313e9e5fa11c902251cf5e018d6afd685476dacb1a8f347c9fb57ff0e329cb"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e1e4a8678beb40aba242c9fbe4049e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 132274,
        "upload_time": "2021-12-06T06:50:42",
        "upload_time_iso_8601": "2021-12-06T06:50:42.410424Z",
        "url": "https://files.pythonhosted.org/packages/99/70/0c8446224f250e858bc1de7d2bda47f9899e8d61df985d92fe485d0d8f87/tasrif-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d738a95c11b177f25713b13a6e33698edb81d755d557e16c59e19a0bc9cced4",
          "md5": "fdef472d557056c973e07eb061b11cec",
          "sha256": "7f68bd6021753adc3f949945db87abc7e36f5d7af44bd07864687e804cf44949"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "fdef472d557056c973e07eb061b11cec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 89810,
        "upload_time": "2021-12-06T06:50:44",
        "upload_time_iso_8601": "2021-12-06T06:50:44.844569Z",
        "url": "https://files.pythonhosted.org/packages/7d/73/8a95c11b177f25713b13a6e33698edb81d755d557e16c59e19a0bc9cced4/tasrif-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f053f246b6b521930f09e7bd24e406ae3670d4d3b0fae07162781b8cebd05056",
          "md5": "34e7955ec77ef561de7c4ab4037ba872",
          "sha256": "12d0c9ae75eaad60d65057c695437e5f229f93581bb9e28d5eaf2f1977f4f538"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34e7955ec77ef561de7c4ab4037ba872",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 133418,
        "upload_time": "2021-12-07T08:11:51",
        "upload_time_iso_8601": "2021-12-07T08:11:51.720158Z",
        "url": "https://files.pythonhosted.org/packages/f0/53/f246b6b521930f09e7bd24e406ae3670d4d3b0fae07162781b8cebd05056/tasrif-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24548331634af2ebadac95bdcf03c8f20c6ff0dfde3148ea166b9a7a97a07028",
          "md5": "a1a9dd059ea31ceaa042744fbf5d9faa",
          "sha256": "89cc9dc7ea9fb82f49cec4414f2d5b31149e7e5d6c85b03479cbe153ae51a2a1"
        },
        "downloads": -1,
        "filename": "tasrif-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a1a9dd059ea31ceaa042744fbf5d9faa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 91112,
        "upload_time": "2021-12-07T08:11:54",
        "upload_time_iso_8601": "2021-12-07T08:11:54.320207Z",
        "url": "https://files.pythonhosted.org/packages/24/54/8331634af2ebadac95bdcf03c8f20c6ff0dfde3148ea166b9a7a97a07028/tasrif-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d01c9082a6044a06456bf39c2590ef26fb2faf7714724d79d3b23a725f3323d7",
          "md5": "0599b20123415a3858f32b6974b7ea7d",
          "sha256": "d32d49ec6a40d8102b76b7031afbf10c0d58396783c9e0cdf6f6321095c8cf70"
        },
        "downloads": -1,
        "filename": "tasrif-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0599b20123415a3858f32b6974b7ea7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">= 3.7",
        "size": 146337,
        "upload_time": "2022-03-15T08:10:13",
        "upload_time_iso_8601": "2022-03-15T08:10:13.457459Z",
        "url": "https://files.pythonhosted.org/packages/d0/1c/9082a6044a06456bf39c2590ef26fb2faf7714724d79d3b23a725f3323d7/tasrif-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e38be51365f5f5b5b2ead5f7bc7f75efe6981ff1b3fa1618af16fdaf254402ac",
          "md5": "7f1a477d02853d41de850cb8476a7b64",
          "sha256": "d0f0151bd569200e4ffa37b60ccdfd1e3b44a8a838b375c9181d13ada6f83005"
        },
        "downloads": -1,
        "filename": "tasrif-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f1a477d02853d41de850cb8476a7b64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.7",
        "size": 100694,
        "upload_time": "2022-03-15T08:10:15",
        "upload_time_iso_8601": "2022-03-15T08:10:15.515460Z",
        "url": "https://files.pythonhosted.org/packages/e3/8b/e51365f5f5b5b2ead5f7bc7f75efe6981ff1b3fa1618af16fdaf254402ac/tasrif-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d01c9082a6044a06456bf39c2590ef26fb2faf7714724d79d3b23a725f3323d7",
        "md5": "0599b20123415a3858f32b6974b7ea7d",
        "sha256": "d32d49ec6a40d8102b76b7031afbf10c0d58396783c9e0cdf6f6321095c8cf70"
      },
      "downloads": -1,
      "filename": "tasrif-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0599b20123415a3858f32b6974b7ea7d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">= 3.7",
      "size": 146337,
      "upload_time": "2022-03-15T08:10:13",
      "upload_time_iso_8601": "2022-03-15T08:10:13.457459Z",
      "url": "https://files.pythonhosted.org/packages/d0/1c/9082a6044a06456bf39c2590ef26fb2faf7714724d79d3b23a725f3323d7/tasrif-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e38be51365f5f5b5b2ead5f7bc7f75efe6981ff1b3fa1618af16fdaf254402ac",
        "md5": "7f1a477d02853d41de850cb8476a7b64",
        "sha256": "d0f0151bd569200e4ffa37b60ccdfd1e3b44a8a838b375c9181d13ada6f83005"
      },
      "downloads": -1,
      "filename": "tasrif-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f1a477d02853d41de850cb8476a7b64",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.7",
      "size": 100694,
      "upload_time": "2022-03-15T08:10:15",
      "upload_time_iso_8601": "2022-03-15T08:10:15.515460Z",
      "url": "https://files.pythonhosted.org/packages/e3/8b/e51365f5f5b5b2ead5f7bc7f75efe6981ff1b3fa1618af16fdaf254402ac/tasrif-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}