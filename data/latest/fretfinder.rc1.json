{
  "info": {
    "author": "Danilo de Jesus da Silva Bellini",
    "author_email": "danilo.bellini@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Sound/Audio :: MIDI",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# Guitar fret finder implementation in Python\n\nThis repository has a re-implementation of the algorithm proposed in\nthe following research article (written in Brazilian Portuguese),\navailable at <http://www.lta.poli.usp.br/lta/publicacoes/artigos/2008>:\n\n> Bellini, D.J.S.; Tavella, A.C.B.;\n> *Conversão de partituras para tablaturas*\n> *usando algoritmo baseado em autômato adaptativo*.\n> In: Segundo Workshop de Tecnologia Adaptativa - WTA 2008.\n> EPUSP, pages 39-42, 2008.\n\nThe algorithm can be regarded as a depth-first search\nimplemented through an \"adaptive Turing Machine\" model\n(a custom alternative to the adaptive automatons\nproposed by João José Neto)\nwith synchronized input/output \"tapes\" that can go back and forth.\nOne of the tapes has the data input\n(musical score/staff as a list of fret numbers for each string,\none list for each note)\nwhile the other has the output\n(the string index where one should play the notes from the input).\n\n\n## Installation\n\nThat can be done\ndirectly from [PyPI](https://pypi.org/project/fretfinder):\n\n```bash\npip install fretfinder\n```\n\n\n## Example\n\nIt's possible to run the Greensleaves excerpt example from the paper\nwith the following terminal command\n(it also works with `python -m fretfinder`):\n\n```bash\nfretfinder -rt Bass4 -M14 'A3 C4 D4 E4 F4 E4 D4'\n```\n\nOr, from Python:\n\n```python\n>>> from fretfinder import Tablature, Guitar, Staff\n>>> tab = Tablature(\n...     staff=Staff(\"A3 C4 D4 E4 F4 E4 D4\"),\n...     guitar=Guitar(\"Bass4\", max_fret=14),\n...     reverse=True,\n... )\n>>> tab.strings  # Result of fretfinder.find_strings(...)\n[[2], [1], [1], [0], [0], [0], [1]]\n>>> print(tab.ascii_tab())\nG3|----------9-10-9----||\nD3|----10-12--------12-||\nA2|-12-----------------||\nE2|--------------------||\n\n```\n\nThe guitar tuning is configured using the same syntax of a melody.\nFor more complex staves, use \"`R`\" for rests\nand parentheses to group simultaneous notes.\nFor more details, use:\n\n```bash\npython -m fretfinder --help\n```\n\n\n## Differences between the paper and this implementation\n\nMost of the content in this repository\ntried to emphasize the way the algorithm was proposed\nin the cited research article,\nbut there are a few differences between this implementation\nand the original specification, as follows:\n\n1. Most configuration defaults are the same of the paper, but one:\n   use `--disallow-open` explicitly\n   to get the original algorithm behavior.\n\n2. The following names were internally modified:\n\n  - `MinX` and `MaxX` were renamed to `min_x` and `max_x`,\n    not a big issue, that's just to follow the PEP8 convention;\n  - The `X(i)` function was renamed to the `is_valid_range` method;\n  - The `Ux` and `Bx` adaptive actions\n    were implemented as `update_x` and `backup_x`,\n    which are also their descriptive names in the paper;\n  - `fretStack` was renamed to `fret_history`,\n    it really behaves as a stack for most of the time,\n    but the new name is more descriptive for what it really stores,\n    and it's easier to access its contents\n    without requiring to pop-and-push its contents back and forth\n    just to update the `min_x` and `max_x`.\n\n3. The `Ux` (`update_x`) adaptive action\n   wasn't explicitly seen as a parametrized function\n   in the original article, unlike the \"string\" states\n   and the `X(i)` (`is_valid_range`) function.\n   In some sense, that's not really a difference,\n   but an implementation detail,\n   as the behavior is the same as the one described in the article.\n   That parameter is required in order to get the fret number\n   regarding the next string state the \"automaton\" is going to be in,\n   something that can be interpreted as a distinct `Ux`\n   for each possible target string (a parametrized implementation),\n   or a single `Ux` that \"knows\" the target state\n   (the article description).\n   One can store the fret number\n   when it's required to evaluate `X(i)`,\n   that's what the article assumes that had been done\n   since it's an optimization\n   to avoid calculating the same fret number twice.\n   Here the fret number is calculated twice\n   because of a strict \"software engineering\" constraint:\n   neither the state handlers nor `X(i)`\n   should have any collateral effect\n   as they're neither adaptive actions nor state transitions,\n   and the adaptive actions in this implementation\n   doesn't \"know\" the next target state,\n   hence `Ux` becomes a parametrized \"`Ux(i)`\".\n\n4. The `--reverse` option (the `reverse` keyword argument)\n   was created to let the evaluation\n   begin from the last string to the first\n   to solve the indeterminacy\n   when more than one string state is a possible next state.\n   The article proposes that the string order\n   should be from the first string (the highest pitched one)\n   to the last string (the lowest pitched one),\n   and that's the default behavior of this implementation.\n   On the other hand, the example from the article\n   results from applying the algorithm in the reverse direction\n   for an output whose last fret is 14\n   (e.g. to play on an acoustic guitar),\n   that's why this option had been included.\n\n5. The original paper tells us that the output tape storing action\n   was linked with the tape transitions to left/right.\n   The same happens in this implementation,\n   but the code doesn't enforce any link between the tape transition\n   and the output tape storing action.\n\n6. There's no \"open string\" for the algorithm proposed in the paper.\n   Here it's implemented as the `--allow-open/--disallow-open` options\n   (the `allow_open` keyword argument in Python),\n   which makes the notes bypass the valid fret range.\n   These open string notes are also filtered out\n   from the fret history window,\n   but they count as part of the window size.\n\n7. The `--distinct-only` option (the `distinct_only` argument)\n   has nothing to do with the paper, it's another way\n   to avoid the issue regarding the tremolo picking,\n   which was the reason underlying the choice\n   of the default window size of 7.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danilobellini/fretfinder",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fretfinder",
    "package_url": "https://pypi.org/project/fretfinder/",
    "platform": "",
    "project_url": "https://pypi.org/project/fretfinder/",
    "project_urls": {
      "Homepage": "https://github.com/danilobellini/fretfinder"
    },
    "release_url": "https://pypi.org/project/fretfinder/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Adaptive guitar fret finder algorithm implementation",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8887818,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "864806b0e8fc6adcac21e0c349a894324ece4529eb1f01b46f46b3e173908461",
          "md5": "046c2b8e1e0c2e0d98311f0b31272abf",
          "sha256": "e0738898e9ed183a1585762994d97cb8a6a27829bc865dd328e180b54558783c"
        },
        "downloads": -1,
        "filename": "fretfinder-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "046c2b8e1e0c2e0d98311f0b31272abf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17225,
        "upload_time": "2020-12-13T06:48:04",
        "upload_time_iso_8601": "2020-12-13T06:48:04.886108Z",
        "url": "https://files.pythonhosted.org/packages/86/48/06b0e8fc6adcac21e0c349a894324ece4529eb1f01b46f46b3e173908461/fretfinder-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "864806b0e8fc6adcac21e0c349a894324ece4529eb1f01b46f46b3e173908461",
        "md5": "046c2b8e1e0c2e0d98311f0b31272abf",
        "sha256": "e0738898e9ed183a1585762994d97cb8a6a27829bc865dd328e180b54558783c"
      },
      "downloads": -1,
      "filename": "fretfinder-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "046c2b8e1e0c2e0d98311f0b31272abf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17225,
      "upload_time": "2020-12-13T06:48:04",
      "upload_time_iso_8601": "2020-12-13T06:48:04.886108Z",
      "url": "https://files.pythonhosted.org/packages/86/48/06b0e8fc6adcac21e0c349a894324ece4529eb1f01b46f46b3e173908461/fretfinder-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}