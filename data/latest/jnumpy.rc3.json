{
  "info": {
    "author": "Jacob Valdez",
    "author_email": "jacobfv@msn.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Jnumpy\n\n[![PyPI version](https://badge.fury.io/py/jnumpy.svg)](https://badge.fury.io/py/jnumpy)\n[![](https://img.shields.io/badge/license-MIT-blue)](https://github.com/JacobFV/jnumpy/blob/main/LICENSE)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e1cb295484424f36acf2c813fae6f57e)](https://app.codacy.com/gh/JacobFV/jnumpy?utm_source=github.com&utm_medium=referral&utm_content=JacobFV/jnumpy&utm_campaign=Badge_Grade_Settings)\n\nJacob's numpy library for machine learning\n\n## Getting started\n\n1. Install from `pip` or clone locally:\n\n```bash\n$ pip install jnumpy\n# or\n$ git clone https://github.com/JacobFV/jnumpy.git\n$ cd jnumpy\n$ pip install .\n```\n\n2. Import the `jnumpy` module.\n\n```python\nimport jnumpy as jnp\n```\n\n## Examples\n\n### Low-level stuff\n\n```python\nimport jnumpy as jnp\n\nW = jnp.Var(np.random.randn(5, 3), trainable=True, name='W')\nb_const = jnp.Var(np.array([1., 2., 3.]), name='b')  # trainable=False by default\n\ndef model(x):\n    return x @ W + b_const\n\ndef loss(y, y_pred):\n    loss = (y - y_pred)**2\n    loss = jnp.ReduceSum(loss, axis=1)\n    loss = jnp.ReduceSum(loss, axis=0)\n    return loss\n\nopt = jnp.SGD(0.01)\n\nfor _ in range(10):\n    # make up some data\n    x = jnp.Var(np.random.randn(100, 5))\n    y = jnp.Var(np.random.randn(100, 3))\n\n    # forward pass\n    y_pred = model(x)\n    loss_val = loss(y, y_pred)\n\n    # backpropagation\n    opt.minimize(loss)\n```\n\n### Neural networks\n```python\nimport jnumpy as jnp\nimport jnumpy.nn as jnn\n\nconv_net = jnn.Sequential(\n    [\n        jnn.Conv2D(32, 3, 2, activation=jnp.Relu),\n        jnn.Conv2D(64, 3, 2, activation=jnp.Relu),\n        jnn.Flatten(),\n        jnn.Dense(512, jnp.Sigm),\n        jnn.Dense(1, jnp.Linear),\n    ]\n)\n```\n\n### Reinforcement learning\n\n```python\nimport jnumpy as jnp\nimport jnumpy.rl as jrl\n\nshared_encoder = conv_net  # same archiecture as the conv_net above\n\n# agents\nagentA_hparams = {...}\nagentB_hparams = {...}\nagentC_hparams = {...}\n\n# categorical deep Q-network:\n#   <q0,q1,..,qn> = dqn(o)\n#   a* = arg_i max qi\nagentA = jrl.agents.CategoricalDQN(\n    num_actions=agentA_hparams['num_actions'], \n    encoder=shared_encoder, \n    hparams=agentA_hparams, \n    name='agentA'\n    )\n\n# standard deep Q-network:\n#   a* = arg_a max dqn(o, a)\nagentB = jrl.agents.RealDQN(\n    num_actions=agentB_hparams['num_actions'], \n    encoder=shared_encoder, \n    hparams=agentB_hparams, \n    name='agentB'\n    )\n\n# random agent:\n#   pick a random action\nagentC = jrl.agents.RandomAgent(agentC_hparams['num_actions'], name='agentC')\n\n# init enviroments\ntrain_env = jrl.ParallelEnv(\n    batch_size=32,\n    env_init_fn=lambda: MyEnv(...),  # `jrl.Environment` subclass. Must have `reset` and `step` methods.\n)\ndev_env = jrl.ParallelEnv(\n    batch_size=8,\n    env_init_fn=lambda: MyEnv(...),\n)\ntest_env = jrl.ParallelEnv(\n    batch_size=8,\n    env_init_fn=lambda: MyEnv(...),\n)\n\n# train\ntrainer = jrl.ParallelTrainer(callbacks=[\n    jrl.PrintCallback(['epoch', 'agent', 'collect_reward', 'q_train', 'q_test']),\n    jrl.QEvalCallback(eval_on_train=True, eval_on_test=True),\n])\ntrainer.train(\n    agents={'agentA': agentA, 'agentB': agentB},\n    all_hparams={'agentA': agentA_hparams, 'agentB': agentB_hparams},\n    env=train_env,\n    test_env=dev_env,\n    training_epochs=10,\n)\n\n# test\ndriver = ParallelDriver()\ntrajs = driver.drive(\n    agents={'agentA': agentA, 'agentB': agentB},\n    env=test_env\n)\nper_agent_rewards = {\n    agent_name: sum(step.reward for step in traj) \n    for agent_name, traj in trajs.items()}\nprint('cumulative test rewards:', per_agent_rewards)\n```\n\n## Limitations and Future Work\n\nFuture versions will feature:\n- add `fit`, `evaluate`, and `predict` to `jnp.Sequential`\n- recurrent network layers\n- static execution graphs allowing breadth-first graph traversal\n- more optimizers, metrics, and losses\n- io loaders for csv's, images, and models (maybe also for graphs)\n- more examples\n\nAlso maybe for the future:\n- custom backends (i.e.: tensorflow or pytorch instead of numpy)\n\n## License\n\nAll code in this repository is licensed under the MIT license. No restrictions, but no warranties. See the [LICENSE](https://github.com/JacobFV/jnumpy/blob/main/LICENSE) file for details.\n\n## Contributing\n\nThis is a small project, and I don't plan on growing it much. You are welcome to fork and contribute or email me `jacob` [dot] `valdez` [at] `limboid` [dot] `ai` if you would like to take over. You can add your name to the copyright if you make a PR or your own branch.\n\nThe codebase is kept in only a few files, and I have tried to minimize the use of module prefixes because my CSE 4308/4309/4392 classes require the submissions to be stitched togethor in a single file. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JacobFV/jnumpy",
    "keywords": "numpy machine learning automatic differentiation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jnumpy",
    "package_url": "https://pypi.org/project/jnumpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/jnumpy/",
    "project_urls": {
      "Homepage": "https://github.com/JacobFV/jnumpy"
    },
    "release_url": "https://pypi.org/project/jnumpy/1.1/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Jacob's numpy library for machine learning.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12149148,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba22b103b5f934745d68c8db6a1c654e7d042f0b682031541b1a745e2632698e",
          "md5": "4f3f6036c9a142098a1c82c94716da33",
          "sha256": "6f4ab737d03332e80badbabf40852b7030dc2b63e3ef1916f1d2a12b36246152"
        },
        "downloads": -1,
        "filename": "jnumpy-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f3f6036c9a142098a1c82c94716da33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5481,
        "upload_time": "2021-10-20T18:07:43",
        "upload_time_iso_8601": "2021-10-20T18:07:43.072977Z",
        "url": "https://files.pythonhosted.org/packages/ba/22/b103b5f934745d68c8db6a1c654e7d042f0b682031541b1a745e2632698e/jnumpy-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0145dbb9cd59c3d120510953030f61cd4ca0219fbd1e83288105e08d56d445e5",
          "md5": "63e2bf8cf7b3c52b1c65bb7521998716",
          "sha256": "0fd983670d30e84470bcbfe0db92b6ede1449afc818a511cc28a3c389850aa05"
        },
        "downloads": -1,
        "filename": "jnumpy-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63e2bf8cf7b3c52b1c65bb7521998716",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4802,
        "upload_time": "2021-10-20T18:07:45",
        "upload_time_iso_8601": "2021-10-20T18:07:45.299023Z",
        "url": "https://files.pythonhosted.org/packages/01/45/dbb9cd59c3d120510953030f61cd4ca0219fbd1e83288105e08d56d445e5/jnumpy-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6010ddb9538c489afce938f71ebf36b90a909ee1fc097eb3109581af652f3c02",
          "md5": "79e339ba655fb08feaf1f90b9139a86d",
          "sha256": "ce3df83b73c7bdbb70f23b5d737c35091ad1cb92e42e21af2f42c6dda985ce81"
        },
        "downloads": -1,
        "filename": "jnumpy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79e339ba655fb08feaf1f90b9139a86d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5673,
        "upload_time": "2021-10-20T18:22:55",
        "upload_time_iso_8601": "2021-10-20T18:22:55.737381Z",
        "url": "https://files.pythonhosted.org/packages/60/10/ddb9538c489afce938f71ebf36b90a909ee1fc097eb3109581af652f3c02/jnumpy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "423d5dcd326e6d888d3ce849a7bf1ce852ca4d92aaba357d202448717d9563e4",
          "md5": "9e8c8f8120d93feb78eac7e6ef4589d9",
          "sha256": "c5e226bdd5554f96292694fc51812f40668f8a6cf81cc890f9ece6599bcab8df"
        },
        "downloads": -1,
        "filename": "jnumpy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e8c8f8120d93feb78eac7e6ef4589d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5019,
        "upload_time": "2021-10-20T18:22:58",
        "upload_time_iso_8601": "2021-10-20T18:22:58.213786Z",
        "url": "https://files.pythonhosted.org/packages/42/3d/5dcd326e6d888d3ce849a7bf1ce852ca4d92aaba357d202448717d9563e4/jnumpy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71a1a5e5b6eae5428b2c96d3e9afc32dcb8f0992c19642300604095dba1e849e",
          "md5": "93454abea6f543f3fb2b1787590b7370",
          "sha256": "6140c69ef65477513557071af8c8b4fe02194b508cf5039af01d4125c50abf0c"
        },
        "downloads": -1,
        "filename": "jnumpy-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93454abea6f543f3fb2b1787590b7370",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23491,
        "upload_time": "2021-11-28T23:54:58",
        "upload_time_iso_8601": "2021-11-28T23:54:58.212223Z",
        "url": "https://files.pythonhosted.org/packages/71/a1/a5e5b6eae5428b2c96d3e9afc32dcb8f0992c19642300604095dba1e849e/jnumpy-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "71a1a5e5b6eae5428b2c96d3e9afc32dcb8f0992c19642300604095dba1e849e",
        "md5": "93454abea6f543f3fb2b1787590b7370",
        "sha256": "6140c69ef65477513557071af8c8b4fe02194b508cf5039af01d4125c50abf0c"
      },
      "downloads": -1,
      "filename": "jnumpy-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93454abea6f543f3fb2b1787590b7370",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23491,
      "upload_time": "2021-11-28T23:54:58",
      "upload_time_iso_8601": "2021-11-28T23:54:58.212223Z",
      "url": "https://files.pythonhosted.org/packages/71/a1/a5e5b6eae5428b2c96d3e9afc32dcb8f0992c19642300604095dba1e849e/jnumpy-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}