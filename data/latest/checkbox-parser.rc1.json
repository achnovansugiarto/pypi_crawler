{
  "info": {
    "author": "ricardo cantu",
    "author_email": "ricardocantum@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# checkbox-parser\nA python module that takes a list object and transforms it to a HTML fieldsets with a question and its answers as checkboxs that can be rendered in flask. The purpose is that the list that is consumed could reside in a noSQL database as a document(MongoDB, Firestore, DynamoDB)\n\n# How it works?\nfirst, you need a list in this structured way \n\n```\n[\n    {\n        'id_question': 'first', \n        'question': 'What is the most important reason for choosing a gym?', \n        'answers': ['The price', 'That it has personalized attention', 'That it has the best facilities', 'That it has a very long schedule'], \n        'position': 1\n    }, \n    \n    {\n        'id_question': 'third', \n        'question': 'What pay period is the best for you to go to a gym?', \n        'answers': ['Annual', 'Bimonthly', 'Monthly'], \n        'position': 3\n    }, \n    \n    {\n        'id_question': 'second', \n        'question': 'What motivates you the most to join a gym?', \n        'answers': ['Physical appearance', 'Physical condition', 'Know another social circle'], \n        'position': 2\n    }\n        \n]\n\n```\nNote:\n* make sure that the id_question value does not repeat itself, this is was intended to map the question with the respectives anwsers\n\nThen you just create a html_parser object. This object just needs the list for work\nIn order to get the html you can use the get_html method, this will return the html as string\n\n\n```\n\nfrom checkbox_parser import html_parser\n\n\n...\n\n\nparser = html_parser(data)\nparser.get_html()\n```\n\n# Use with flask\n\nThis is a little snippet of how you can use it with flask\n\n```\nfrom flask import Flask, render_template\nfrom checkbox_parser import html_parser\n\n\napp=Flask(__name__)\n\n@app.route(\"/\")\ndef survey():\n\n    data = [\n    {\n        'id_question': 'first', \n        'question': 'What is the most important reason for choosing a gym?', \n        'answers': ['The price', 'That it has personalized attention', 'That it has the best facilities', 'That it has a very long schedule'], \n        'position': 1\n    }, \n    \n    {\n        'id_question': 'third', \n        'question': 'What pay period is the best for you to go to a gym?', \n        'answers': ['Annual', 'Bimonthly', 'Monthly'], \n        'position': 3\n    }, \n    \n    {\n        'id_question': 'second', \n        'question': 'What motivates you the most to join a gym?', \n        'answers': ['Physical appearance', 'Physical condition', 'Know another social circle'], \n        'position': 2\n    }\n        \n    ]\n\n    parser = html_parser(data)\n    html = parser.get_html()\n\n    return render_template(\"your_html_template.html\", html=html)\n\nif __name__ == \"__main__\":\n    app.run()\n```\nNote:\n* I recommend that in your ninja template use the decode method for the html object, in case this prevents bad characters to be rendered.\n\n```\n    <form action=\"/endpoint_get\" method=\"GET\" name=\"myForm\">\n\n        {{ html.decode('utf-8') | safe }}\n\n    <div class=\"container\">\n      <div class=\"center\">\n        <button id=\"submit\">submit</button>\n      </div>\n    </div>\n\n    </form>\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/richyxi/checkbox_parser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "checkbox-parser",
    "package_url": "https://pypi.org/project/checkbox-parser/",
    "platform": "",
    "project_url": "https://pypi.org/project/checkbox-parser/",
    "project_urls": {
      "Bug Tracker": "https://github.com/richyxi/checkbox_parser/issues",
      "Homepage": "https://github.com/richyxi/checkbox_parser"
    },
    "release_url": "https://pypi.org/project/checkbox-parser/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "this package can parse a list and give a html string",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10572014,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ce764bdbf51b49cd46a7f49299efebe7b87acb80c5e125e0ba725b0a22002e2",
          "md5": "a7a7c86011abe7546f3db1ca92b20e05",
          "sha256": "cbdf8155985984264d111fb6730ba2e5edd4c06f8597e1a19518b73a77760c9b"
        },
        "downloads": -1,
        "filename": "checkbox_parser-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a7c86011abe7546f3db1ca92b20e05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 4009,
        "upload_time": "2021-06-06T21:25:25",
        "upload_time_iso_8601": "2021-06-06T21:25:25.331583Z",
        "url": "https://files.pythonhosted.org/packages/9c/e7/64bdbf51b49cd46a7f49299efebe7b87acb80c5e125e0ba725b0a22002e2/checkbox_parser-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6bbd2002b68595d0866b55f0d083b5d2e603be14b1e5cae284479df98b570b9",
          "md5": "0f4218d55451749cf2b92e5c5e188594",
          "sha256": "8b8c608bd8585d55705650347ea93f50c6c3879132c86eeb2bb3e9f4aeefdf2c"
        },
        "downloads": -1,
        "filename": "checkbox_parser-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f4218d55451749cf2b92e5c5e188594",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3609,
        "upload_time": "2021-06-06T21:25:26",
        "upload_time_iso_8601": "2021-06-06T21:25:26.703771Z",
        "url": "https://files.pythonhosted.org/packages/b6/bb/d2002b68595d0866b55f0d083b5d2e603be14b1e5cae284479df98b570b9/checkbox_parser-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ce764bdbf51b49cd46a7f49299efebe7b87acb80c5e125e0ba725b0a22002e2",
        "md5": "a7a7c86011abe7546f3db1ca92b20e05",
        "sha256": "cbdf8155985984264d111fb6730ba2e5edd4c06f8597e1a19518b73a77760c9b"
      },
      "downloads": -1,
      "filename": "checkbox_parser-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a7a7c86011abe7546f3db1ca92b20e05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 4009,
      "upload_time": "2021-06-06T21:25:25",
      "upload_time_iso_8601": "2021-06-06T21:25:25.331583Z",
      "url": "https://files.pythonhosted.org/packages/9c/e7/64bdbf51b49cd46a7f49299efebe7b87acb80c5e125e0ba725b0a22002e2/checkbox_parser-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6bbd2002b68595d0866b55f0d083b5d2e603be14b1e5cae284479df98b570b9",
        "md5": "0f4218d55451749cf2b92e5c5e188594",
        "sha256": "8b8c608bd8585d55705650347ea93f50c6c3879132c86eeb2bb3e9f4aeefdf2c"
      },
      "downloads": -1,
      "filename": "checkbox_parser-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f4218d55451749cf2b92e5c5e188594",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3609,
      "upload_time": "2021-06-06T21:25:26",
      "upload_time_iso_8601": "2021-06-06T21:25:26.703771Z",
      "url": "https://files.pythonhosted.org/packages/b6/bb/d2002b68595d0866b55f0d083b5d2e603be14b1e5cae284479df98b570b9/checkbox_parser-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}