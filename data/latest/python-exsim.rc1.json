{
  "info": {
    "author": "zeroXone",
    "author_email": "support@zeroxone.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: No Input/Output (Daemon)",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Networking"
    ],
    "description": "\n=====\nexsim\n=====\n\n|  |Build Status|  |Docs|  |Coverage|  |PyPI|  |Python|\n|  |PePY Downloads|  |PePY Monthly|\n\nIntroduction\n------------\n\nThis is a simple financial exchange simulator.  It is intended for use\ntesting trading applications, protocol gateways, and the like.\n\nIt operates in two basic modes: standalone, or managed:\n\nIn standalone mode, the matching engine modules operate independently,\nprocessing orders according to their implementation.  This mode is\nintended for ad-hoc testing, demonstrations, etc.\n\nIn managed mode, the simulator is controlled by another process,\ntypically an integration test module, which can interact with the\nmatching engine to ensure that it implements a configured scenario\nexactly.\n\nPlugins\n-------\n\nThe basic framework can be extended with new matching engine\nbehaviours and protocol mappings using plugins: Python modules that\nprovide derived classes specialising the default behaviours.\n\nOnce imported, these modules can be registered with the framework\n(using a 'register' function), and are then available from the\nstandard factory functions.\n\nUsage\n-----\n\nIn a Python unittest module, you should import the exsim module, and\ncreate an instance of the API class.\n\nYou can then load any additional (third-party) plugins before\nconfiguring and creating a server instance.  The server instance is\ncreated by forking the calling process, so any Python setup or\nenvironment variables, etc, that exist are inherited by the service.\nAll subsequent interaction with the service uses IPC.\n\nDesign\n------\n\n* Run a basic event loop.\n* Listen on one-or-more TCP sockets, and accept connections.\n* Decode messages according to protocol module configured for that\n  session.\n* Dispatch messages via central dispatcher.\n* Support for automatic test-requests/heartbeats.\n* Messages can be queued for explicit handling in managed mode.\n* Policy modules can be loaded for automatic message handling.\n* Basic matching engine will manage books, publish data, and match\n  orders.\n\nClasses\n^^^^^^^\nEndpoint\n  A listening socket, attached to a matching engine, and configured\n  with a protocol to encode and decode received messages.\n\nSession\n  A socket connection, initiated by a client application.  Sessions\n  are created by Endpoints, and inherit their Endpoint's Protocol and\n  Engine.\n\nProtocol\n  An encoder and decoder that converts messages in a trading protocol\n  (like, FIX or OUCH) into Python dictionaries that are passed to the\n  matching engine for action.\n\n  The protocol can optionally handle some of the \"mechanics\" of the\n  communication: sequence numbers, heartbeats, etc.  But actual\n  trading messages are simply translated and handed off to the engine.\n\nManagement Protocol\n^^^^^^^^^^^^^^^^^^^\ncreate_engine name class\n  Create a matching engine of the specified class.\n\ndelete_engine name\n  Delete a matching engine.\n\nset_engine_property engine_name property_name value\n  Configure the engine.\n\ncreate_endpoint name engine protocol\n  Create a listening protocol endpoint, using a specified protocol,\n  and attach it to the specified engine.\n\ndelete_endpoint name\n  Delete a listening endpoint.\n\nset_protocol_property endpoint_name property_name value\n  Configure the protocol module.\n\ncreate_book name engine symbol\n  Create a book within a matching for trading of the specified instrument.\n\ndelete_book name engine\n  Delete a book from an engine.\n\ncreate_quote quote_id engine book_name\n  Create a (market maker) quote\n\nset_quote_property quote_id name value\n  Configure a quote\n\nsubmit_quote quote_id\n  Post a quote\n\ndelete_quote quote_id\n  Remove a quote.\n\ncreate_order order_id book_name\n  Create an order\n\nset_order_property order_id name value\n  Configure an order\n\nsubmit_order order_id\n  Post an order.\n\ndelete_order order_id\n  Manage an order.\n\nmatch_orders book_name order_a order_b\n  Match two orders.\n\nThe service starts with a control port listening for the management\nprotocol on a specified port.  The client API can connect to this\ncontrol port, and sends RPCs to the server.\n\nThere are no asynchronous events from the server: the client can poll\nfor queued events.  This simplifies the integration of the client API\nwith testing frameworks.\n\nIn managed mode, there is no configuration of the server other than via\nthe client API.  This ensures that test case code represents the\ncomplete description of the required environment.\n\nRoadmap\n-------\n\nM1\n^^\n* Basic FIX 4.x protocol module\n   * Single orders only\n   * Drop copy\n   * Market data\n\n* Basic simulation matching engine\n   * Price-time matching\n   * Orders only (no quoting, etc)\n   * Instrument types:\n      * Standard\n      * Auto-fill\n      * Auto-partial\n      * Auto-reject\n      * Auto-cancel\n      * Partial-then-cancel\n   * Activity levels\n      * None (client application trading only)\n      * Slow\n      * Fast\n\n* Read configuration from file\n   * Basically a script of the same operations as possible via the\n     (future) management protocol\n\nM2\n^^\n* Management protocol\n   * REST?  WSS?\n   * Logon authentication\n   * Read and queue data for collection\n   * Timeouts\n   * Heartbeats\n\n* Client-side API for Python\n   * Use requests module?\n      * Completely synchronous RPC-style.\n   * Optionally, spawn simulator process in background\n\n* Examples using unittest & pytest\n\nBacklog\n^^^^^^^\n\n* Support acquiring instruments and pricing data from an external source.\n   * Stream FIX (?) market data\n   * Figure out how best to allow trading against those quotes/orders.\n* Add ITCH/OUCH (with SOUP TCP) support to ensure the abstraction isn't\n  too FIX-specific\n* Add support for an RFQ workflow / matching engine.\n\n\nLicense\n-------\nexsim is licensed under the GNU Public License.\n\nWhile this is not legal advice, in short this means you're free to use\nthis code at no cost.  You may also change it and run the modifified\nversion, or integrate it with other code, but if you do you must not\ndistribute the changed code or a system that integrates this software\nunless it is also made available under the GPL license.\n\nContributing\n------------\nComments, suggestions, bug reports, bug fixes -- all contributions to\nthis project are welcomed.  See the project's `GitHub\n<https://github.com/da4089/exsim>`_ page for access to the latest\nsource code, and please open an `issue\n<https://github.com/da4089/exsim/issues>`_ for comments, suggestions,\nand bugs.\n\n\n.. |Build Status| image:: https://github.com/da4089/exsim/actions/workflows/build.yml/badge.svg?event=push\n    :target: https://github.com/da4089/exsim/actions/workflows/build.yml\n    :alt: Build status\n.. |Docs| image:: https://readthedocs.org/projects/exsim/badge/?version=latest\n    :target: http://exsim.readthedocs.io/en/latest/\n    :alt: Docs\n.. |Coverage| image:: https://coveralls.io/repos/github/da4089/exsim/badge.svg?branch=master\n    :target: https://coveralls.io/github/da4089/exsim?branch=master\n    :alt: Coverage\n.. |PyPI| image:: https://img.shields.io/pypi/v/python-exsim.svg\n    :target: https://pypi.python.org/pypi/python-exsim\n    :alt: PyPI\n.. |Python| image:: https://img.shields.io/pypi/pyversions/python-exsim.svg\n    :target: https://pypi.python.org/pypi/python-exsim\n    :alt: Python\n.. |PePY Downloads| image:: https://pepy.tech/badge/exsim\n    :target: https://pepy.tech/project/exsim\n    :alt: PyPI Downloads\n.. |PePY Monthly| image:: https://pepy.tech/badge/exsim/month\n    :target: https://pepy.tech/project/exsim\n    :alt: PyPI Monthly Downloads\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/da4089/exsim",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-exsim",
    "package_url": "https://pypi.org/project/python-exsim/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-exsim/",
    "project_urls": {
      "Homepage": "https://github.com/da4089/exsim"
    },
    "release_url": "https://pypi.org/project/python-exsim/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple exchange simulator",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16020573,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0a483059272fa40775118e0322bf3a033d5923d13442de346e805dde4f5b756",
          "md5": "74d0dd4adf1bc79c3e8088b4bd87c721",
          "sha256": "8c252046e4bf8c812360304047224d1aab863cfb74fb4b210b01dbd5a51deb6e"
        },
        "downloads": -1,
        "filename": "python_exsim-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74d0dd4adf1bc79c3e8088b4bd87c721",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 39812,
        "upload_time": "2022-12-07T13:19:50",
        "upload_time_iso_8601": "2022-12-07T13:19:50.737378Z",
        "url": "https://files.pythonhosted.org/packages/c0/a4/83059272fa40775118e0322bf3a033d5923d13442de346e805dde4f5b756/python_exsim-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27cc0c6f401bf618cc9bf3e5fa9a0ae7d3a4e0b1b093830ad52400b5fc71771e",
          "md5": "74aa47d50f7a671bd71bb2c9e7f83f3e",
          "sha256": "95169528ccaed7d93d3b582648190a0de87b986efd1140540aeb557fe2105e6c"
        },
        "downloads": -1,
        "filename": "python-exsim-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "74aa47d50f7a671bd71bb2c9e7f83f3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31829,
        "upload_time": "2022-12-07T13:19:53",
        "upload_time_iso_8601": "2022-12-07T13:19:53.573870Z",
        "url": "https://files.pythonhosted.org/packages/27/cc/0c6f401bf618cc9bf3e5fa9a0ae7d3a4e0b1b093830ad52400b5fc71771e/python-exsim-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0a483059272fa40775118e0322bf3a033d5923d13442de346e805dde4f5b756",
        "md5": "74d0dd4adf1bc79c3e8088b4bd87c721",
        "sha256": "8c252046e4bf8c812360304047224d1aab863cfb74fb4b210b01dbd5a51deb6e"
      },
      "downloads": -1,
      "filename": "python_exsim-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74d0dd4adf1bc79c3e8088b4bd87c721",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 39812,
      "upload_time": "2022-12-07T13:19:50",
      "upload_time_iso_8601": "2022-12-07T13:19:50.737378Z",
      "url": "https://files.pythonhosted.org/packages/c0/a4/83059272fa40775118e0322bf3a033d5923d13442de346e805dde4f5b756/python_exsim-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27cc0c6f401bf618cc9bf3e5fa9a0ae7d3a4e0b1b093830ad52400b5fc71771e",
        "md5": "74aa47d50f7a671bd71bb2c9e7f83f3e",
        "sha256": "95169528ccaed7d93d3b582648190a0de87b986efd1140540aeb557fe2105e6c"
      },
      "downloads": -1,
      "filename": "python-exsim-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "74aa47d50f7a671bd71bb2c9e7f83f3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 31829,
      "upload_time": "2022-12-07T13:19:53",
      "upload_time_iso_8601": "2022-12-07T13:19:53.573870Z",
      "url": "https://files.pythonhosted.org/packages/27/cc/0c6f401bf618cc9bf3e5fa9a0ae7d3a4e0b1b093830ad52400b5fc71771e/python-exsim-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}