{
  "info": {
    "author": "Sergey Lunkov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyFuncTest\n\nThe framework for functional testing of microservices\n\nFunctional —Åapabilities:\n1. Build a container from git repository\n2. Create, start and stop containers\n3. Send and receive messages from Kafka, RabbitMQ\n4. Write and read data from mySQL, MariaDB, PostgreSQL\n5. Write and read files from FTP, MinIO\n\nAdditional:\n1. You can create folders before running tests for FTP, MinIO\n2. You can migrate structure and data before running tests for databases\n3. You can replace configuration and other files inside container before work\n4. You can run docker services in a specific sequence before running tests\n\n# Table of Contents\n\n* [Install](#install)\n* [How it works ](#itworks)\n  * [Settings of modules](#settings)\n  * [Docker](#docker)\n    * [Build container](#docker-build)\n    * [Start container](#docker-start)\n    * [Start compose](#docker-start-compose)\n  * [FTP](#ftp)\n    * [Settings](#ftp-settings)\n    * [Testing](#ftp-testing)\n  * [Minio](#minio)\n    * [Settings](#minio-settings)\n    * [Testing](#minio-testing)\n  * [MySQL](#mysql)\n    * [Settings](#mysql-settings)\n    * [Testing](#mysql-testing)\n  * [PostgreSQL](#mysql)\n    * [Settings](#postgresql-settings)\n    * [Testing](#postgresql-testing)\n  * [RabbitMQ](#rabbitmq)\n    * [Settings](#rabbitmq-settings)\n    * [Testing](#rabbitmq-testing)\n  * [Kafka](#kafka)\n    * [Settings](#kafka-settings)\n    * [Testing](#kafka-testing)\n\n## Install<a name=\"install\"></a>\n\n```\npip3 install pyfunctest\n```\n\nUpgrade\n\n```\npip3 install --upgrade pyfunctest\n```\n\n# How it works<a name=\"itworks\"></a>\n\n## Settings of modules<a name=\"settings\"></a>\n\nThe main module is FMods. Its constructor has three parameters: path to settings, path to template folder and verbose.\nThe example of structure settings: https://github.com/Lunkov/pyfunctest/tree/master/data/mods\n\nThe example commands for tests\n\n```\nimport unittest\n\nclass TestServices(unittest.TestCase):\n\n  def setUp(self):\n    # New object of settings of modules\n    self.fm = FMods(\"mods/\", \"tmp/\", True)\n\n    # Read settings\n    self.fm.scan()\n\n    # Run all containers\n    self.fm.startAll()\n\n  def testReceiveMessage(self):\n    # New object of RabbitMQ Client\n    rabbitmq = self.fm.newRabbitMQ('rabbitmq')\n\n    # Create routes\n    queue = 'log3'\n    exchange = 'log3'\n    routing_key = ''\n    exchange_type = 'fanout'\t\n    self.assertTrue(rabbitmq.createRoute(exchange, exchange_type, routing_key, queue))\n\n    # Send message\n    self.assertTrue(rabbitmq.send(exchange, routing_key, 'message 1'))    \n\n    # New object of PostgreSQL Client\n    pg = self.fm.newPostgre('pg')\n\n    # Check structure of database\n    self.assertEqual(pg.getTableList(), [('public', 'messages')])\n\n    # Get and check data from table\n    self.assertEqual(pg.getData('select * from public.messages'), [(1, 'message 1')])\n\n  \n  def tearDown(self):\n    # Stop all containers\n    self.fm.stopAll()\n\nif __name__ == '__main__':\n  unittest.main()\n```\n\n\n## Docker<a name=\"docker\"></a>\n\n### Build container<a name=\"docker-build\"></a>\n\nExample file .yaml\n```\nname: srv-report\nactions:\n  - build\n\ngit:\n  src: \"https://github.com/Lunkov/srv-report.git\"\n  branch: master\n\ndocker:\n  name: srv-report-test\n  src: srv-report-test\n\n  dockerfile: Dockerfile\n  buildpath: .\n```\n\nCommands for tests\n```\n# New object of settings of modules\nfm = FMods(\"mods/\", \"tmp/\", True)\n\n# Read settings\nfm.scan()\n\n# Get module\nsrvDocker = fm.newDocker('srv-report')\n\n# Container must have status: not found\nself.assertTrue(srvDocker.statusWaiting('not found'))\n\n# Build container\nself.assertTrue(srvDocker.build())\n\n# Run container\nself.assertTrue(srvDocker.run())\n\n```\n\n### Start container<a name=\"docker-start\"></a>\n\nExample file .yaml\n```\nname: nginx\norder: 10\nactions:\n  - run\n\ndocker:\n  name: nginx-test\n  src: nginx\n  ports:\n    - \"3010:81\"\n\n  env:\n    - NGINX_PORT: 81\n  \n  volumes:\n    - \"data/mods/nginx/html/:/usr/share/nginx/html:ro\"\n    - \"data/mods/nginx/test.conf:/etc/nginx/conf.d/default.conf\"\n```\n\nCommands for tests\n```\n# New object of settings of modules\nfm = FMods(\"mods/\", \"tmp/\", True)\n\n# Read settings\nfm.scan()\n\n# Get module\nsrvNginx = fm.newDocker('nginx')\n\n# Run container\nself.assertTrue(srvNginx.run())\n\n# Container must have status: running\nself.assertEqual(srvNginx.status(), 'running')\n\n```\n\n### Start compose<a name=\"docker-start-compose\"></a>\n\nExample file .yaml\n```\nname: kafka\norder: 1\nactions:\n  - run\n  - init\n\ndocker:\n  name: kafka_kafka-test_1\n  compose: docker-compose.yml\n\n  network: test-net\n\n  init:\n    create_channels:\n      - channel-test\n      - channel1-test\n      - channel2-test\n\nkafka:\n  url_inside: \"localhost:9092\"\n  url_outside: \"localhost:9094\"\n  id_group: main\n```\n\nCommands for tests\n```\n# New object of settings of modules\nfm = FMods(\"mods/\", \"tmp/\", True)\n\n# Read settings\nfm.scan()\n\n# Get module\nsrvDocker = fm.newDocker('kafka') # Docker Compose\n\n# Run container\nself.assertTrue(srvDocker.startCompose())\n\n# Container must have status: running\nself.assertEqual(srvDocker.status(), 'running')\n\n# Stop container\nself.assertTrue(srvDocker.stopCompose())\n\n```\n\n\n## FTP<a name=\"ftp\"></a>\n\n### Settings<a name=\"ftp-settings\"></a>\n\n\nExample file .yaml\n```\nname: ftp\norder: 5\nactions:\n  - run\n\ndocker:\n  name: ftp-test\n  src: teezily/ftpd\n  ports:\n    - \"3021:21\"\n    - \"35000-35004:35000-35004\"\n\n  patch:\n    - start-ftp: /\n  env:\n    - FTP_USER: user\n    - FTP_PASSWORD: pwd\n    - PASV_MIN_PORT: 35000\n    - PASV_MAX_PORT: 35004\n\nftp:\n  user: user\n  password: pwd\n  port: 3021\n  init:\n    # You can create folders before running tests\n    create_folders:\n      - folder-test/folder-test1\n      - folder-test/folder-test2\n      - folder-test1\n\n```\n\n### Testing<a name=\"ftp-testing\"></a>\n\n```\n# New object of FTP Client\nftp = fm.newFTP('ftp')\n\n# Check structure of folder\nself.assertEqual(ftp.getDirList(), ['incoming'])\n\n# Upload file\nself.assertTrue(ftp.uploadFile('folder-test', 'test.txt', 'data/files/test.txt'))\n\n# Compare local and remote files \nself.assertTrue(ftp.compareFiles('folder-test', 'test.txt', 'data/files/test.txt'))\n```\n\n## Minio<a name=\"minio\"></a>\n\n### Settings<a name=\"minio-settings\"></a>\n\nExample file .yaml\n```\nname: minio\norder: 6\nactions:\n  - run\n  - init\n\ndocker:\n  name: minio-test\n  src: minio/minio\n  ports:\n    - \"3010:9000\"\n\n  run_command: \"server /data\"\n\n\ns3:\n  access_key: minioadmin\n  secret_key: minioadmin\n  port: 3010\n  init:\n    # You can create folders before running tests\n    create_folders:\n      - \"bucket-test:folder000\"\n      - \"bucket-test2:folder1/folder1\"\n```\n\n### Testing<a name=\"minio-testing\"></a>\n```\n# New object of Minio Client\nminio = fm.newMinIO('minio')\n\n# Check structure of basket\nself.assertEqual(minio.getBasketsList(), ['bucket-test'])\n\n# Upload file\nself.assertTrue(minio.uploadFile('bucket-test', 'test.txt', 'data/files/test.txt'))\n\n# Compare local and remote files \nself.assertTrue(minio.compareFiles('bucket-test', 'test.txt', 'data/files/test.txt'))\n```\n\n\n## MySQL<a name=\"mysql\"></a>\n\n### Settings<a name=\"mysql-settings\"></a>\n\nExample file .yaml\n```\nname: mysql\norder: 2\nactions:\n  - run\n  - migrate\n\ndocker:\n  name: mysql-test\n  src: mariadb\n\n  ports:\n    - \"17436:3306\"\n\n  # You can replace configuration file inside container before work\n  patch: \n    - 50-server.cnf: /etc/mysql/mariadb.conf.d/\n\n  env:\n    - MYSQL_ROOT_PASSWORD: pwd\n    - MYSQL_USER: user\n    - MYSQL_PASSWORD: pwd\n    - MYSQL_DATABASE: test-db\n    - ALLOW_EMPTY_PASSWORD: yes\n\ndb:\n  name: test-db\n  user: root\n  password: pwd\n  port: 17436\n\n# You can migrate your data before tests\nmigrate:\n  command: \"--path=/migrations/ --database=\\\"mysql://root:pwd@tcp(mysql-test:3306)/test-db\\\" up\"\n  path: migrations\n  timeout_before_migrate: 10\n```\n\n### Testing<a name=\"mysql-testing\"></a>\n\nCommands for tests\n```\n# New object of mySQL Client\nmsql = fm.newMySQL('mysql')\n\n# Check structure of database\nself.assertEqual(msql.getTableList(), ['article', 'article2', 'article3'])\n\n# Create table\nself.assertTrue(msql.loadSQL('data/mysql/create_tables.sql'))\n\n# Insert Data\nself.assertTrue(msql.loadSQL('data/mysql/insert.sql'))\n\n# Get and check data from table\nself.assertEqual(msql.getData('select * from article'), ((1, 'article 1', 'description'),))\n\n```\n\n## PostgreSQL<a name=\"postgresql\"></a>\n\n### Settings<a name=\"postgresql-settings\"></a>\n\nExample file .yaml\n```\nname: pg\nactions:\n  - run\n  - migrate\n\ndocker:\n\n  name: pg-test\n  src: postgres:alpine\n  ports:\n    - \"17432:5432\"\n  env:\n    - POSTGRES_PASSWORD: pwd\n    - POSTGRES_USER: user\n    - POSTGRES_DB: test-db\n\ndb:\n  name: test-db\n  user: user\n  password: pwd\n  port: 17432\n\nmigrate:\n  command: --path=/migrations/ --database=\"postgres://user:pwd@pg-test:5432/test-db?sslmode=disable\" up\n  path: migrate\n  timeout_before_migrate: 5\n```\n\n### Testing<a name=\"postgresql-testing\"></a>\n```\n# New object of PostgreSQL Client\npg = fm.newPostgre('pg')\n\n# Check structure of database\nself.assertEqual(pg.getTableList(), [('public', 'article'), ('public', 'article2'), ('public', 'article3')])\n\n# Create table\nself.assertTrue(pg.loadSQL('data/postgre/create_table.sql'))\n\n# Insert Data\nself.assertTrue(pg.loadSQL('data/postgre/insert.sql'))\n\n# Get and check data from table\nself.assertEqual(pg.getData('select * from public.article'), [(1, 'article 1', 'description', None)])\n\n```\n\n## RabbitMQ<a name=\"rabbitmq\"></a>\n\n### Settings<a name=\"rabbitmq-settings\"></a>\n\nExample file .yaml\n```\nname: rabbitmq\nactions:\n  - run\n  - init\n\ndocker:\n  name: rabbitmq-test\n  src: rabbitmq:management-alpine\n  ports:\n    - \"5672:5672\"\n    - \"15672:15672\"\n  env:\n    - RABBITMQ_DEFAULT_USER: user\n    - RABBITMQ_DEFAULT_PASS: pwd\n    - RABBITMQ_DEFAULT_VHOST: /\n\n\nrabbitmq:\n  url: \"amqp://user:pwd@localhost:5672/\"\n  user: user\n  password: pwd\n  init:\n    # You can create channels before running tests\n    create_channels:\n      - \"log3:fanout::log3\"\n      - \"log1:fanout::log1\"\n```\n\n### Testing<a name=\"rabbitmq-testing\"></a>\n```\n# New object of RabbitMQ Client\nrabbitmq = fm.newRabbitMQ('rabbitmq')\n\n# Create routes\nself.assertTrue(rabbitmq.createRoute(exchange, exchange_type, routing_key, queue))\n\n# Send message\nself.assertTrue(rabbitmq.send(exchange, routing_key, 'message 1'))\n\n# Recieve message\nmsg, ok = rabbitmq.receive(queue)\nself.assertTrue(ok)\nself.assertEqual(msg, 'message 1')\n\n# Send file\nself.assertTrue(rabbitmq.sendFile(exchange, routing_key, 'data/files/test.txt'))\n\n# Recieve and compare file\nself.assertTrue(rabbitmq.receiveAndCompareFile(queue, 'data/files/test.txt'))\n```\n\n## Kafka<a name=\"kafka\"></a>\n\n### Settings<a name=\"kafka-settings\"></a>\n\nExample file .yaml\n```\nname: kafka\norder: 1\nactions:\n  - run\n  - init\n\ndocker:\n  name: kafka_kafka-test_1\n  compose: docker-compose.yml\n\n  network: test-net\n\n  init:\n    # You can create channels before running tests\n    create_channels:\n      - channel-test\n      - channel1-test\n      - channel2-test\n\nkafka:\n  url_inside: \"localhost:9092\"\n  url_outside: \"localhost:9094\"\n  id_group: main\n```\n\n### Testing<a name=\"kafka-testing\"></a>\n```\n# New object of Kafka Client\nkafka = fm.newKafka('kafka')\n\n# Send message\nself.assertTrue(kafka.send(channel, 'message 1'))\n\n# Recieve message\nmsg, ok = kafka.receive(channel)\nself.assertTrue(ok)\nself.assertEqual(msg, 'message 1')\n\n# Send file\nself.assertTrue(kafka.sendFile(channel, 'data/files/test.txt'))\n\n# Recieve and compare file\nself.assertTrue(kafka.receiveAndCompareFile(channel, 'data/files/test.txt'))\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Lunkov/pyfunctest",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfunctest",
    "package_url": "https://pypi.org/project/pyfunctest/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyfunctest/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Lunkov/pyfunctest/issues",
      "Homepage": "https://github.com/Lunkov/pyfunctest"
    },
    "release_url": "https://pypi.org/project/pyfunctest/0.0.6/",
    "requires_dist": [
      "gitpython",
      "python-dotenv",
      "docker",
      "docker-compose",
      "minio",
      "mysqlclient",
      "psycopg2",
      "pika",
      "kafka-python"
    ],
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11244022,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "838a585b2a7cb6a39d68719f1f27ee6c64d9974b5114c210360de78e5bf566c4",
          "md5": "2640bbf4872cfbf72c07b7c537174000",
          "sha256": "46917895966a0be264cdd6003b280c5cc9ddf187cc2ea907fd46870ce942d35f"
        },
        "downloads": -1,
        "filename": "pyfunctest-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2640bbf4872cfbf72c07b7c537174000",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22035,
        "upload_time": "2021-08-21T10:42:17",
        "upload_time_iso_8601": "2021-08-21T10:42:17.536618Z",
        "url": "https://files.pythonhosted.org/packages/83/8a/585b2a7cb6a39d68719f1f27ee6c64d9974b5114c210360de78e5bf566c4/pyfunctest-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6613d388d222aafc815e577699cf385612d9d54325bb3af28fe262dd9960293",
          "md5": "fc5190a2f4e40fba4e0d21b187e70464",
          "sha256": "c85cc66b22a543ff1aa60e4b1088789ac86237475193c6d12a54ea4be7b3c749"
        },
        "downloads": -1,
        "filename": "pyfunctest-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fc5190a2f4e40fba4e0d21b187e70464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16929,
        "upload_time": "2021-08-21T10:42:19",
        "upload_time_iso_8601": "2021-08-21T10:42:19.278780Z",
        "url": "https://files.pythonhosted.org/packages/b6/61/3d388d222aafc815e577699cf385612d9d54325bb3af28fe262dd9960293/pyfunctest-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66101be4de0c023c5dde0189d69eb2c878466d64a85dd0ce90ae71d1a51a570c",
          "md5": "2cfa263f6fb37d21fefd797766f721cd",
          "sha256": "5891b8ad4b94916a8467b0fbfceb57c8ec71ad3c8d68892fb7c90f84e2ee682a"
        },
        "downloads": -1,
        "filename": "pyfunctest-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cfa263f6fb37d21fefd797766f721cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25188,
        "upload_time": "2021-08-22T11:36:32",
        "upload_time_iso_8601": "2021-08-22T11:36:32.034118Z",
        "url": "https://files.pythonhosted.org/packages/66/10/1be4de0c023c5dde0189d69eb2c878466d64a85dd0ce90ae71d1a51a570c/pyfunctest-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ac56ce93be8993e93558105e8d3023eef280d22426af9a80b4f4d2d5e91e0bc",
          "md5": "ff37df4aff1233256a8678eb7b5b91ba",
          "sha256": "291acc56f8c7aac07860ed7ce92877705022abea69c8a73b64394157953f8de9"
        },
        "downloads": -1,
        "filename": "pyfunctest-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ff37df4aff1233256a8678eb7b5b91ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17474,
        "upload_time": "2021-08-22T11:36:33",
        "upload_time_iso_8601": "2021-08-22T11:36:33.672159Z",
        "url": "https://files.pythonhosted.org/packages/0a/c5/6ce93be8993e93558105e8d3023eef280d22426af9a80b4f4d2d5e91e0bc/pyfunctest-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66101be4de0c023c5dde0189d69eb2c878466d64a85dd0ce90ae71d1a51a570c",
        "md5": "2cfa263f6fb37d21fefd797766f721cd",
        "sha256": "5891b8ad4b94916a8467b0fbfceb57c8ec71ad3c8d68892fb7c90f84e2ee682a"
      },
      "downloads": -1,
      "filename": "pyfunctest-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2cfa263f6fb37d21fefd797766f721cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25188,
      "upload_time": "2021-08-22T11:36:32",
      "upload_time_iso_8601": "2021-08-22T11:36:32.034118Z",
      "url": "https://files.pythonhosted.org/packages/66/10/1be4de0c023c5dde0189d69eb2c878466d64a85dd0ce90ae71d1a51a570c/pyfunctest-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0ac56ce93be8993e93558105e8d3023eef280d22426af9a80b4f4d2d5e91e0bc",
        "md5": "ff37df4aff1233256a8678eb7b5b91ba",
        "sha256": "291acc56f8c7aac07860ed7ce92877705022abea69c8a73b64394157953f8de9"
      },
      "downloads": -1,
      "filename": "pyfunctest-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "ff37df4aff1233256a8678eb7b5b91ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 17474,
      "upload_time": "2021-08-22T11:36:33",
      "upload_time_iso_8601": "2021-08-22T11:36:33.672159Z",
      "url": "https://files.pythonhosted.org/packages/0a/c5/6ce93be8993e93558105e8d3023eef280d22426af9a80b4f4d2d5e91e0bc/pyfunctest-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}