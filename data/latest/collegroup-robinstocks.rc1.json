{
  "info": {
    "author": "Colle Group",
    "author_email": "arthur@collegroup.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Robinhood API Library\n========================\n\nIntroduction\n========================\nThis library aims to create functions to interact with the\nRobinhood API, which are simple to use, easy to understand, and easy to modify the source code.\nThis is a pure python interface and it requires Python3. The purpose\nof this library is to allow people to make their own robo-investors or to view information on\nstocks, options, and crypto-currencies in real time.\n\nTo join our Slack channel where you can discuss trading and coding, click the link https://join.slack.com/t/robin-stocks/shared_invite/zt-7up2htza-wNSil5YDa3zrAglFFSxRIA\n\nInstalling\n========================\nThere is no need to download these files directly. This project is published on PyPi,\nso it can be installed by typing into terminal (on Mac) or into command prompt (on PC):\n\n>>> pip install robin_stocks\n\nAlso be sure that Python 3 is installed. If you need to install python you can download it from `Python.org <https://www.python.org/downloads/>`_.\nPip is the package installer for python, and is automatically installed when you install python. To learn more about Pip, you can go to `PyPi.org <https://pypi.org/project/pip/>`_.\n\nIf you would like to be able to make changes to the package yourself, clone the repository onto your computer by typing into terminal or command prompt:\n\n>>> git clone https://github.com/jmfernandes/robin_stocks.git\n>>> cd robin_stocks\n\nNow that you have cd into the repository you can type\n\n>>> pip install .\n\nand this will install whatever you changed in the local files. This will allow you to make changes and experiment with your own code.\n\nFunctions Contained\n========================\n\nFor a complete list of functions and how to use them, go to `robin-stocks.com <http://www.robin-stocks.com/en/latest/functions.html>`_.\n\nExample Usage\n========================\n\nWhen you write a new python script, you'll have to load the module and login to Robinhood. This is\naccomplished by typing\n\n>>> import robin_stocks as r\n>>> login = r.login('joshsmith@email.com','password')\n\nNot all of the functions contained in the module need the user to be authenticated. A lot of the functions\ncontained in the modules 'stocks' and 'options' do not require authentication, but it's still good practice\nto log into Robinhood at the start of each script.\n\nThere is the ability to buy and sell stocks, options, and crypto-currencies.\nThere is also the ability to submit market orders, limit orders, and stop orders as long as\nRobinhood supports it. Here is a list of possible trades you can make\n\n>>> #Buy 10 shares of Apple at market price\n>>> r.order_buy_market('AAPL',10)\n>>> #Sell half a Bitcoin is price reaches 10,000\n>>> r.order_sell_crypto_limit('BTC',0.5,10000)\n>>> #Buy $500 worth of Bitcoin\n>>> r.order_buy_crypto_by_price('BTC',500)\n>>> #Buy 5 $150 May 1st, 2020 SPY puts if the price per contract is $1.00. Good until cancelled.\n>>> r.order_buy_option_limit('open','debit',1.00,'SPY',5,'2020-05-01',150,'put','gtc')\n\nNow let's try a slightly more complex example. Let's say you wanted to sell half your Tesla stock if it fell to 200.00.\nTo do this you would type\n\n>>> positions_data = r.get_current_positions()\n>>> ## Note: This for loop adds the stock ticker to every order, since Robinhood\n>>> ## does not provide that information in the stock orders.\n>>> ## This process is very slow since it is making a GET request for each order.\n>>> for item in positions_data:\n>>>     item['symbol'] = r.get_symbol_by_url(item['instrument'])\n>>> TSLAData = [item for item in positions_data if item['symbol'] == 'TSLA']\n>>> sellQuantity = float(TSLAData['quantity'])//2.0\n>>> r.order_sell_limit('TSLA',sellQuantity,200.00)\n\nYou can also view all orders you have made. This includes filled orders, cancelled orders, and open orders.\nStocks, options, and cryptocurrencies are separated into three different locations.\nFor example, let's say that you have some limit orders to buy and sell Bitcoin and those orders have yet to be filled.\nIf you want to cancel all your limit sells, you would type\n\n>>> positions_data = r.get_all_open_crypto_orders()\n>>> ## Note: Again we are adding symbol to our list of orders because Robinhood\n>>> ## does not include this with the order information.\n>>> for item in positions_data:\n>>>    item['symbol'] = r.get_crypto_quote_from_id(item['currency_pair_id'], 'symbol')\n>>> btcOrders = [item for item in positions_data if item['symbol'] == 'BTCUSD' and item['side'] == 'sell']\n>>> for item in btcOrders:\n>>>    r.cancel_crypto_order(item['id'])\n\nIf you want to view all the call options for a list of stocks you could type\n\n>>> optionData = r.find_options_for_list_of_stocks_by_expiration_date(['fb','aapl','tsla','nflx'],\n>>>              expirationDate='2018-11-16',optionType='call')\n>>> for item in optionData:\n>>>     print(' price -',item['strike_price'],' exp - ',item['expiration_date'],' symbol - ',\n>>>           item['chain_symbol'],' delta - ',item['delta'],' theta - ',item['theta'])\n\nThere is a lot more that you can do with this API. Be sure to check out the examples folder to\nsee even more examples. This folder will get updated periodically to demonstrate new functionality\nand best practices.\n\nKeep in mind that the functions contained in the library are just wrappers around a functional API,\nand you are free to write your own functions that interact with the Robinhood API. I've\nexposed the get and post methods so any call to the Robinhood API could be made. The syntax is\n\n>>> url = 'https://api.robinhood.com/'\n>>> payload = { 'key1' : 'value1', 'key2' : 'value2'}\n>>> r.request_get(url,'regular',payload)\n\nThe above code would results in a get request to ``https://api.robinhood.com/?key1=value1&key2=value2`` (which is a\nmeaningless request). RobinHood returns most data as { 'previous' : None, 'results' : [], 'next' : None},\nwhere ‘results’ is either a dictionary or a list of dictionaries. If a particular query returns more entries than can be stored\nin 'results', then those will be stored in 'next', which is simply a url link to the next set of data.\nKeep in mind that RobinHood will sometimes return the data in a different format.\nTo compensate for this, request_get takes either 'regular', 'results', 'pagination', or 'indexzero' as the second parameter.\nIn most cases, you want to use 'pagination' to get all the results.\n\nUsing Option Spreads\n====================\nWhen viewing a spread in the robinhood app, it incorrectly identifies both legs as either \"buy\" or \"sell\" when closing a position. \nThe \"direction\" has to reverse when you try to close a spread position.\n\nI.e.\ndirection=\"credit\"\nwhen\n\"action\":\"sell\",\"effect\":\"close\"\n\nin the case of a long call or put spread.\n\nNew Features In The Works\n=========================\n\n- Trading using TD Ameritrade\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/collegroup/robin_stocks",
    "keywords": "robinhood,robin stocks,finance app,stocks,options,trading,investing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "collegroup-robinstocks",
    "package_url": "https://pypi.org/project/collegroup-robinstocks/",
    "platform": "",
    "project_url": "https://pypi.org/project/collegroup-robinstocks/",
    "project_urls": {
      "Homepage": "https://github.com/collegroup/robin_stocks"
    },
    "release_url": "https://pypi.org/project/collegroup-robinstocks/1.0.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3",
    "summary": "A Python wrapper around the Robinhood API",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8320813,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82eb886aa07a90f3df0d0841de65bd4e7333dbbdb31545925ef694426c2a02a7",
          "md5": "97c96052ccecb040f06bee5bd0dafb9b",
          "sha256": "b63751403d7b85833ed8d936f1ac61c093f0d96d20321711b7ad6e6fa25002d7"
        },
        "downloads": -1,
        "filename": "collegroup_robinstocks-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97c96052ccecb040f06bee5bd0dafb9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 33576,
        "upload_time": "2020-10-02T00:15:35",
        "upload_time_iso_8601": "2020-10-02T00:15:35.217616Z",
        "url": "https://files.pythonhosted.org/packages/82/eb/886aa07a90f3df0d0841de65bd4e7333dbbdb31545925ef694426c2a02a7/collegroup_robinstocks-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "82eb886aa07a90f3df0d0841de65bd4e7333dbbdb31545925ef694426c2a02a7",
        "md5": "97c96052ccecb040f06bee5bd0dafb9b",
        "sha256": "b63751403d7b85833ed8d936f1ac61c093f0d96d20321711b7ad6e6fa25002d7"
      },
      "downloads": -1,
      "filename": "collegroup_robinstocks-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "97c96052ccecb040f06bee5bd0dafb9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 33576,
      "upload_time": "2020-10-02T00:15:35",
      "upload_time_iso_8601": "2020-10-02T00:15:35.217616Z",
      "url": "https://files.pythonhosted.org/packages/82/eb/886aa07a90f3df0d0841de65bd4e7333dbbdb31545925ef694426c2a02a7/collegroup_robinstocks-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}