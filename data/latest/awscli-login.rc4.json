{
  "info": {
    "author": "David D. Riddle",
    "author_email": "ddriddle@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: https://github.com/techservicesillinois/awscli-login/workflows/CI/CD/badge.svg\n   :target: https://github.com/techservicesillinois/awscli-login/actions?query=workflow%3ACI%2FCD\n   :alt: Build Status\n\nThe awscli-login plugin allows retrieving temporary Amazon credentials\nby authenticating against a SAML Identity Provider (IdP).  This\napplication is fully supported under Linux, macOS, and the `Windows\nSubsystem for Linux <https://docs.microsoft.com/en-us/windows/wsl/about>`_.\nCurrently, Windows PowerShell, Command Prompt, and Git Shell for\nWindows are supported with limitations (See `Windows Issues`_).\n\n.. |--| unicode:: U+2013   .. en dash\n.. contents:: Jump to:\n   :depth: 1\n\nInstallation\n============\n\nThe simplest way to install the awscli-login plugin is to use pip::\n\n    $ pip install awscli-login\n\nAfter awscli-login has been installed, run the following command\nto enable the plugin::\n\n    $ aws configure set plugins.login awscli_login\n\nIf you receive a bad interpreter error or other error please see\nthe `Known Issues`_ section below.\n\nGetting Started\n===============\n\nBefore using awscli-login to retrieve temporary credentials,\noptionally configure one or more `named profiles\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html>`__\nfor use with the plugin. To configure this plugin, you must know\nthe URL of the ECP Endpoint for your IdP.  If you do not have this\ninformation, contact your IdP administrator.\n\nHere is an example configuring the default profile for use with the\nUniversity of Illinois at Urbana-Champaign's IdP::\n\n    $ aws login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]:\n    Enable Keyring [False]:\n    Duo Factor [None]:\n    Role ARN [None]:\n\nTo log in, type the following command::\n\n    $ aws login\n    Username [username]: netid\n    Password: ********\n    Factor: passcode\n    Code: 123456789\n\nThe ``username`` and ``password`` are the values needed to authenticate\nagainst the IdP configured for the selected profile.  The ``factor``\nis only required if your IdP requires Duo for authentication.  If\nit does not, leave ``factor`` blank. If your IdP does require Duo\nthen ``factor`` may be one of ``auto``, ``push``, ``passcode``,\n``sms``, or ``phone``.  If ``factor`` is left blank, ``auto`` is\nthe default. The ``code`` is a Duo code useful for use with a\nYubiKey, SMS codes, or other one-time codes.\n\nIf you have access to more than one role, you will be prompted to\nchoose one. For example::\n\n    $ aws login\n    Username [username]: netid\n    Password: ********\n    Factor:\n    Please choose the role you would like to assume:\n        Account: 978517677611\n            [ 0 ]: Admin\n        Account: 520135271718\n            [ 1 ]: ReadOnlyUser\n            [ 2 ]: S3Admin\n    Selection: 2\n\nTo switch roles, first log out, then log in again selecting a\ndifferent role. Note that if you log in to the same IdP using the\nsame username, you will not be prompted for your password or Duo\nfactor until the IdP session expires::\n\n    $ aws logout\n    $ aws login\n    Username [netid]:\n    Please choose the role you would like to assume:\n        Account: 520135271718\n            [ 0 ]: TestUser\n            [ 1 ]: IAMUser\n    Selection: 0\n\nAdvanced Usage\n==============\n\nIt is possible to be logged in to more than one role at the same\ntime using multiple `named profiles\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html>`__.\nFor example, consider the following configuration involving two\nprofiles |--| one called ``prod``, and the other ``test``::\n\n    $ aws --profile prod login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]: netid\n    Enable Keyring [False]: True\n    Duo Factor [None]: auto\n    Role ARN [None]: arn:aws:iam::999999999999:role/Admin\n\n    $ aws --profile test login configure\n    ECP Endpoint URL [None]: https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Username [None]: netid\n    Enable Keyring [False]: True\n    Duo Factor [None]: passcode\n    Role ARN [None]: arn:aws:iam::111111111111:role/Admin\n\nThis example involves several advanced features. First, we are\nsetting the username, factor, and role. This means we will not be\nprompted for this information when logging in to these two profiles.\nIn addition, we are using a keyring. On the first login using one\nof the profiles, the user will be prompted for his password.  On\nsubsequent logins the user will not be prompted for his password\nbecause it has been stored in a secure keyring.\n\nFor example, when we initially log in to prod::\n\n    $ export AWS_PROFILE=test\n    $ aws login\n    Password: ********\n    Code: 123456789\n\nWe are only prompted for the password and code. We're prompted for\nthe password because this is the initial login, and the code because\nthis profile is configured for use with a passcode device such as\na YubiKey. We are now no longer prompted when we log in to test::\n\n    $ aws --profile prod login\n\nEven if the IdP session has expired in this case, we will not be\nprompted for a password because it is stored in the keyring. The\nuser will receive either a phone call or a push to the default\nDuo device.\n\nAdvanced Configuration\n======================\n\nThe plugin's configuration file (``~/.aws-login/config``) is an ini\nfile that supports more configuration options than is exposed via\nthe basic interactive configuration as seen in the `Getting Started`_\nsection. Each section corresponds to an `AWS named profile\n<https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html>`__\njust like the awscli's credentials file ``~/.aws/credentials``.\n\nHere is a simple example configuration file::\n\n    [default]\n    ecp_endpoint_url = https://shib.uiuc.edu/idp/profile/SAML2/SOAP/ECP\n    username = netid\n    enable_keyring = True\n    factor = auto\n\n    [prod]\n    username = netid\n    ecp_endpoint_url = https://shib.uiuc.edu/idp/profile/SAML2/SOAP/ECP\n\nand the corresponding awscli configuration file ``~/.aws/config`` ::\n\n    [plugins]\n    login = awscli_login\n\n    [default]\n    region = us-east-2\n    output = json\n\n    [profile prod]\n    region = us-east-2\n    output = json\n\nAll configuration options are documented below in the `properties`_\nsection.\n\nProperties\n----------\n\nEach property can be overridden at the command line using a flag.\nSee the online documentation for further details by running ``aws\nlogin help``.\n\n..\n    Order matches cli help found __init__.py:class Login:ARG_TABLE\n\necp_endpoint_url\n    The ECP endpoint URL of the IdP. This is the only required\n    property::\n\n        ecp_endpoint_url = https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\nusername\n    The username to use on login to the IdP. If the username is not\n    supplied the user will be prompted::\n\n        username = netid\npassword\n    The password to use on login to the IdP. If the password is not\n    supplied the user will be prompted. It is not recommended to\n    use this property. Instead supply the password interactively\n    or use the keyring for secure storage::\n\n        password = secret\n\n    The password property and command line flag are ignored if the\n    keyring is enabled. When this happens a warning is issued.\nfactor\n    The `Duo factor <https://duo.com/docs/authapi#/auth>`_ to use\n    on login::\n\n        factor = auto\n\n    The following values are currently supported:\n\n    +------------------------+-------------------------------------------+\n    | factor                 |                                           |\n    +========================+===========================================+\n    | ``auto``               | authenticates with ``push`` if available, |\n    |                        | otherwise fallbacks to ``phone``          |\n    +------------------------+-------------------------------------------+\n    | ``push``               | authenticates with Duo Push               |\n    +------------------------+-------------------------------------------+\n    | ``passcode``           | authenticates the user with a user        |\n    |                        | supplied code from a hardware token,      |\n    |                        | Duo Mobile, or bypass code                |\n    +------------------------+-------------------------------------------+\n    + ``sms``                | sends a batch of SMS passcodes to the user|\n    +------------------------+-------------------------------------------+\n    | ``phone``              | Authenticates with phone callback         |\n    +------------------------+-------------------------------------------+\n\n    To login using ``sms``, requires two attempts. The first attempt\n    will send SMS passcodes, and return authentication failed. The\n    second attempt will use the passcodes::\n\n        $ aws login --factor sms\n        Authentication failed!\n        $ aws login --factor passcode\n        Code: 829437\npasscode\n    A bypass code or Duo `passcode\n    <https://duo.com/product/multi-factor-authentication-mfa/authentication-methods/tokens-and-passcodes>`_\n    generated by Duo Mobile, SMS, or a hardware token can be set\n    using the passcode property::\n\n        passcode = 829437\n\n    It is not recommended to store a passcode in your configuration\n    file since a passcode can only be used once. A passcode is\n    better passed interactivally or by the ``--passcode`` command\n    line flag.\nrole_arn\n    The role ARN to select. If the IdP returns a single role it is\n    autoselected::\n\n        role_arn = arn:aws:iam::999999999999:role/Admin\nenable_keyring\n    By default the keyring is not used for password storage. The\n    keyring is implemented using the Python module `keyring\n    <https://pypi.org/project/keyring/>`_, and supports various\n    secure backends such as the macOS Keychain, Windows Credential\n    Locker, and Linux keyrings. Additional, system configuration\n    may be required to use a keyring on Linux systems (See\n    https://pypi.org/project/keyring for details). Set to True to\n    enable::\n\n        enable_keyring = True\n\n    The password property and command line flag are ignored when\n    the keyring is enabled.\ndisable_refresh:\n    On POSIX systems tokens are refreshed automatically unless this\n    property is set to True::\n\n        disable-refresh = True\nrefresh\n    How often the refresh process attempts to renew the STS credentials\n    in seconds. When set to 0 the refresh process will refresh once\n    90% of the time till expiration has transpired (Default 0)::\n\n        refresh = 1800\nduration\n    Set the time in seconds that the STS token will last. The token\n    lasts for the duration you specify, or until the time specified\n    by the IdP, whichever is shorter. The default is an hour, and\n    the minimum is 15 minutes (See `AssumeRoleWithSAML\n    <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html>`_\n    for details)::\n\n        duration = 3600\nhttp_header_factor\n    HTTP Header to store the user's Duo factor::\n\n        http_header_factor = X-Shibboleth-Duo-Factor\nhttp_header_passcode\n    HTTP Header to store the user's passcode::\n\n        http_header_passcode = X-Shibboleth-Duo-Passcode\n\nCommand line arguments\n======================\n\nThe plugin supports two subcommands `login`_ and `logout`_.\n\nlogin\n-----\n\nDetailed online documentation can be accessed using the following\ncommand::\n\n    $ aws login help\n\nAll `properties`_, except for enable_keyring, can be overridden\nwith a corresponding command line option. Properties that contain\nan underscore will have a corresponding option with hyphens, for\nexample the property ecp_endpoint_url becomes ``--ecp-endpoint-url``.\nFor details on these options see the documentation above or refer\nto the online documentation. Options not avaliable as properties\nare documented below.\n\noptions\n```````\n\n``--ask-password``\n   Force prompt for password. This can be used to override the\n   ``enable_keyring`` property.\n``--force-refresh``\n    Forces the refresh process to retrieve new credentials for the\n    user selected role. If the refresh process is not running then\n    a normal login will proceed after a warning.\n``--verbose``\n    Display verbose output. The flag can be repeated up to three\n    times. Each time it is repeated more detailed information is\n    returned.\n\n\nconfigure\n`````````\n\nSee `Getting Started`_ and online documentation for documentation on this\nsubcommand::\n\n    $ aws login configure help\n\noptions\n\"\"\"\"\"\"\"\n\n``--verbose``\n    Display verbose output. The flag can be repeated up to three\n    times. Each time it is repeated more detailed information is\n    returned.\n\n\nlogout\n------\n\nSee `Getting Started`_ and online documentation for documentation on this\nsubcommand::\n\n    $ aws logout help\n\noptions\n```````\n\n``--verbose``\n    Display verbose output. The flag can be repeated up to three\n    times. Each time it is repeated more detailed information is\n    returned.\n\n\nKnown Issues\n============\n\nUnable to authenticate after changing password\n----------------------------------------------\n\nAfter the user changes his IdP password, subsequent logins fail.\nTo remedy the situation, change the data stored in the keyring as follows:\n\n    $ keyring set awscli_login username@hostname_of_your_IdP\n\nYou may be prompted for your user login password by your operating\nsystem, depending on how your key store is configured.\n\nCommand line flag ``--ecp-endpoint-url`` error parsing parameter\n----------------------------------------------------------------\n\nIf you encounter the following error it is because the awscli expects\nurls passed as arguments to return a 200 on an HTTP GET (See\n`aws-cli#4473 <https://github.com/aws/aws-cli/issues/4473>`_)::\n\n    $ aws login --ecp-endpoint-url https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP\n    Error parsing parameter '--ecp-endpoint-url': Unable to retrieve https://shibboleth.illinois.edu/idp/profile/SAML2/SOAP/ECP: received non 200 status code of 500\n\nThis check can be disabled on a per profile basis using the following\ncommand::\n\n    $ aws configure set cli_follow_urlparam off\n\nWindows issues\n--------------\n\nAuto-renewal is not supported under the Windows PowerShell, Command\nPrompt, or Git Shell for Windows. Auto-renewal is supported under\nthe Windows Subsystem for Linux (WSL).\n\nGitBash bad interpreter errors\n``````````````````````````````\n\nIf you receive a bad interpreter error from the aws command it may\nbe because you have a space in the path of your Python interpreter::\n\n    bash: /c/Users/me/AppData/Roaming/Python/Python38/Scripts/aws: c:\\program: bad interpreter: No such file or directory\n\nTo fix this issue either reinstall your Python interpreter to a\npath that does not contain a space and then reinstall the awscli\npackage, or more simply just define an alias in your bashrc file::\n\n    alias aws='python $(which aws)'\n\nWindows Subsystem for Linux bad interpreter error\n`````````````````````````````````````````````````\n\nIf you receive a bad interpreter error from the aws command on\nWindows Subsystem for Linux (WSL) it may be because the location\nwhere the awscli is installed is not listed in the WSL's PATH before\nthe location of a Windows install of awscli::\n\n    -bash: /mnt/c/Python39/Scripts/aws: c:\\python39\\python.exe^M: bad interpreter: No such file or directory\n\nTo remedy this issue please ensure that the location where the\nawscli is installed in the WSL comes before the location of the\nWindows install in the WSL PATH environment variable.",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/techservicesillinois/awscli-login",
    "keywords": "Amazon AWS SAML login access keys",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "awscli-login",
    "package_url": "https://pypi.org/project/awscli-login/",
    "platform": "",
    "project_url": "https://pypi.org/project/awscli-login/",
    "project_urls": {
      "Bug Reports": "https://github.com/techservicesillinois/awscli-login/issues",
      "Homepage": "https://github.com/techservicesillinois/awscli-login",
      "Source": "https://github.com/techservicesillinois/awscli-login"
    },
    "release_url": "https://pypi.org/project/awscli-login/0.2b1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Plugin for the AWS CLI that retrieves and rotates credentials using SAML ECP and STS.",
    "version": "0.2b1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9315174,
  "releases": {
    "0.1.0a4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a3260768e66dab57417e8a8e64cb93537af17794f417dd60639a1a919933abc",
          "md5": "82226414c8b176c0c47a410780e775ef",
          "sha256": "2f155d01b1ca9912c28378f77ac09027b5eac1700fa09ab6bf82f3336f2e1481"
        },
        "downloads": -1,
        "filename": "awscli_login-0.1.0a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82226414c8b176c0c47a410780e775ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 35901,
        "upload_time": "2018-05-12T23:56:08",
        "upload_time_iso_8601": "2018-05-12T23:56:08.211301Z",
        "url": "https://files.pythonhosted.org/packages/9a/32/60768e66dab57417e8a8e64cb93537af17794f417dd60639a1a919933abc/awscli_login-0.1.0a4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99608d48477207a4c21fb7c085df8c957a9e00383e109ff7778d06020dcdb6ac",
          "md5": "420dbe0bdf542c690bec94949b434635",
          "sha256": "a13b7b32bb6b8f8f3378830a12fb4fc70001b472b3ce3da893ba5355d75f9d54"
        },
        "downloads": -1,
        "filename": "awscli_login-0.1.0a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "420dbe0bdf542c690bec94949b434635",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 36388,
        "upload_time": "2018-05-19T21:08:39",
        "upload_time_iso_8601": "2018-05-19T21:08:39.511202Z",
        "url": "https://files.pythonhosted.org/packages/99/60/8d48477207a4c21fb7c085df8c957a9e00383e109ff7778d06020dcdb6ac/awscli_login-0.1.0a5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0a6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd5e4f480d335afc080291ee053b316e9d81f2769e6d649589d2372a549ef9e4",
          "md5": "959c8662f9c3d7726134cf2c64bf9ae5",
          "sha256": "bbd0654a43092724f2f42e285f644e3108301ba74e9289aa4a024ce546bfdb17"
        },
        "downloads": -1,
        "filename": "awscli_login-0.1.0a6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "959c8662f9c3d7726134cf2c64bf9ae5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 38486,
        "upload_time": "2019-09-19T22:04:16",
        "upload_time_iso_8601": "2019-09-19T22:04:16.978783Z",
        "url": "https://files.pythonhosted.org/packages/cd/5e/4f480d335afc080291ee053b316e9d81f2769e6d649589d2372a549ef9e4/awscli_login-0.1.0a6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dbd5f49f46120b1a331c9f6b6da41e6c861e00b29d3df5c64fdef5628afec37",
          "md5": "a3f937a53c76148efb64e377d123c7c4",
          "sha256": "8fcbfe00cee998a78f05732ff7e86ee4258d578bb75de793ad257329fe7cac27"
        },
        "downloads": -1,
        "filename": "awscli-login-0.1.0a6.tar.gz",
        "has_sig": false,
        "md5_digest": "a3f937a53c76148efb64e377d123c7c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 31789,
        "upload_time": "2019-09-19T22:04:18",
        "upload_time_iso_8601": "2019-09-19T22:04:18.731760Z",
        "url": "https://files.pythonhosted.org/packages/8d/bd/5f49f46120b1a331c9f6b6da41e6c861e00b29d3df5c64fdef5628afec37/awscli-login-0.1.0a6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36d5be9fa274094692631cac6633daff6cf93c6a2bfb4f9e61017b7797c90736",
          "md5": "497b95118721d27438084cb9c6a5430d",
          "sha256": "cfe1e4cbbbfca6e276818a8f0cb67103cace411d0d1810dcaf50f8a731643c4f"
        },
        "downloads": -1,
        "filename": "awscli-login-0.2b1.tar.gz",
        "has_sig": false,
        "md5_digest": "497b95118721d27438084cb9c6a5430d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 59227,
        "upload_time": "2021-02-04T06:51:47",
        "upload_time_iso_8601": "2021-02-04T06:51:47.130581Z",
        "url": "https://files.pythonhosted.org/packages/36/d5/be9fa274094692631cac6633daff6cf93c6a2bfb4f9e61017b7797c90736/awscli-login-0.2b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36d5be9fa274094692631cac6633daff6cf93c6a2bfb4f9e61017b7797c90736",
        "md5": "497b95118721d27438084cb9c6a5430d",
        "sha256": "cfe1e4cbbbfca6e276818a8f0cb67103cace411d0d1810dcaf50f8a731643c4f"
      },
      "downloads": -1,
      "filename": "awscli-login-0.2b1.tar.gz",
      "has_sig": false,
      "md5_digest": "497b95118721d27438084cb9c6a5430d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 59227,
      "upload_time": "2021-02-04T06:51:47",
      "upload_time_iso_8601": "2021-02-04T06:51:47.130581Z",
      "url": "https://files.pythonhosted.org/packages/36/d5/be9fa274094692631cac6633daff6cf93c6a2bfb4f9e61017b7797c90736/awscli-login-0.2b1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}