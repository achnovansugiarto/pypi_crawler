{
  "info": {
    "author": "josegcpa",
    "author_email": "jose.almeida@research.fchampalimaud.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# `imdm` - Python data models for images (and other stuff!)\n\n## What's the point\n\nThis module contains a few helpful and flexible data models which can be easily extended for other applications. Here, I focused on making some (very) specific validators focusing on MRI data. These can be used to test DICOM files, SITK-readable images or numpy-loadable arrays.\n\n## Installation\n\nThe project should be readily instalable with `poetry` (recommended) by running `poetry install`. \n\n## Usage\n\nThree fundamental abstract classes are used here: `Check`, which focuses on checking whether specific conditions are true given an input data, `DataValidator`, which focuses on validating a specific type of data, and `DataModel` which focuses on validating a sample (composed by multiple types of data).\n\n### `Check`\n\nA `Check` is a generic class that can be used as the base for data checks. These data checks, after being defined (`check = Check(target=\"hello\")`), can then be called with a given input argument (`check(\"hello)`) and the output (`True`) tells us whether the check has passed (`True` if the check has passed, `False` otherwise). \n\nThe check above considers only simple comparison - this is hardly useful when we want to perform more complicated comparisons. For example, we may want to know if our data is within a given range. To do this, we can define novel dataclasses from `Test` that perform *exactly* these comparisons, by redefining the `unpack` and `compare` methods:\n\n```python\nfrom imdm import Test\n\n@dataclass\nclass CheckRange(Test):\n    target: Tuple[Union[int,float],Union[int,float]]\n    \n    def __post_init__(self):\n        name = self.get_name()\n        self._success_msg = f\"Target shape {name} contains input values\"\n        self._fail_msg = f\"Target shape {name} does not contain input values\"\n\n    def unpack(self, x: Any) -> Any:\n        return np.min(x),np.max(x)\n\n    def compare(self, unpacked_x: Any) -> bool:\n        within_range = True\n        if self.target[0] is not None:\n            if unpacked_x[0] < self.target[0]:\n                within_range = False\n        if self.target[1] is not None:\n            if unpacked_x[1] > self.target[1]:\n                within_range = False\n        return within_range\n```\n\nBy redefining our `unpack` and `compare` methods, we can ensure that the correct checks are performed. These methods are then executed in the `__call__` method of the `Test` abstract class:\n\n```python\n    def __call__(self, x: Any) -> bool:\n        \"\"\"Performs the comparison using the input data and defines the \n        ``self.msg``.\n\n        Args:\n            x (Any): input data.\n\n        Returns:\n            bool: whether the comparison was successful or not.\n        \"\"\"\n        if self.target is None:\n            return self.target\n        unpacked_x = self.unpack(x)\n        result = self.compare(unpacked_x)\n        if result == True:\n            self.msg = self._success_msg\n        if result == False:\n            self.msg = self._fail_msg\n        return result\n```\n\nA `msg` attribute is defined with either `_success_msg` or `_fail_msg`, depending on whether the result is `True` or `False`. This is helpful in case verbosity is important for your applications.\n\n### `DataValidator`\n\nDefining a `DataValidator` is relatively easy:\n\n```python\nfrom imdm import DataValidator\n\ndata_validator = DataValidator(type=str,length=11,shape=None,range=None)\n```\n\nand running data validations is just as easy:\n\n```python\noutput = data_validator.validate(\"test_string\")\n\nprint(output)\n\n>>> {\"type\":True,\"length\":True,\"shape\":None,\"range\":None}\n```\n\nThe `DataValidator` method automatically checks for `type`, `length`, `shape` and `range` (if specified). If necessary, users can also add their own methods. For example, if you would to check whether a given path exists:\n\n```python\nimport os\n\ndata_validator.add_check(key=\"path\",check_fn=os.path.exists,data_stage=\"raw\")\n\noutput = data_validator.validate(\"test_string\")\n\nprint(output)\n\n>>> {\"type\":True,\"length\":True,\"shape\":None,\"range\":None,\"path\":False}\n```\n\nEasy! All arguments are relatively clear, but `data_stage` is somewhat more ellusive; for this reason I introduce here the concept of three data stages:\n\n* `raw` - the input exactly as it is. This is useful to check whether a file exists.\n* `preprocessed_data` - if a `preprocess_fn` is specified in the `DataValidator` constructor, checks can be applied to these functions. For instance, the `type` check is automatically ran on the `preprocessed_data` stage. \n* `value_data` - some files (SITK-readable files, for instance) require some non-obvious wrangling before one can actually use their values as `numpy` arrays, which is the assumed format for checking the `range`. This function (`value_fn`) is applied to the output of `preprocess_fn`. \n\nIf no `preprocess_fn` or `value_fn` are supplied, then `preprocessed_data` and `value_fn` will be identical to the input data.\n\n### `DataModel`\n\nA `DataModel` is simply a structure of `DataValidators`, i.e.\n\n```python\nfrom imdm import DataValidator,DataModel\n\ndata_model = DataModel(structures={\n    \"a\":DataValidator(type=str,length=11,shape=None,range=None),\n    \"b\":DataValidator(type=int,length=None,shape=None,range=[-10,10])\n    })\n```\n\nThis `data_model` can then be applied to any given data input that follows a structure similar to `data_model.structures`.\n\n### MRI- and image-specific data validators\n\nAn easy-to-use data validators have been implemented specifically for image data (`ImageFile`). I work with images, so these were especially useful for me. \n\nAdditionally, since I work with a lot of MRI data, specific methods for MRI data were also implemented (`DicomFile` and `SitkFile`). A more generic method for `numpy` files has also been (`NumpyFile`).\n\n### `pprint`\n\n`pprint` is a simple function that allows you to more easily inspect the output of `DataValidator` and `DataModel`. It comes with colours!\n\n## Unit testing\n\nTests for the data validators and models are available in `imdm/data_models/testing`. Test images were collected from:\n\n* https://www.rubomedical.com/dicom_files/ (.dcm)\n* https://github.com/neurolabusc/niivue-images (.nii.gz)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imdm",
    "package_url": "https://pypi.org/project/imdm/",
    "platform": null,
    "project_url": "https://pypi.org/project/imdm/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/imdm/0.1.1/",
    "requires_dist": [
      "simpleitk (>=2.2.1,<3.0.0)",
      "pydicom (>=2.3.1,<3.0.0)",
      "pytest (>=7.2.2,<8.0.0)",
      "numpy (>=1.24.2,<2.0.0)",
      "termcolor (>=2.2.0,<3.0.0)",
      "ruff (>=0.0.254,<0.0.255)",
      "pillow (>=9.4.0,<10.0.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Data models for MRI and image applications",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17240648,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "679b202bc3c405a4f39cbd2c39f35417f738ccfbf93a57ee7da8fb705a8a5a97",
          "md5": "2c357323518f7097a57661e76b5e7510",
          "sha256": "80671c052a2339ffdb5b655839b24f76e946be980c78cf2a3ea1c4b74216986d"
        },
        "downloads": -1,
        "filename": "imdm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c357323518f7097a57661e76b5e7510",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 10091,
        "upload_time": "2023-03-08T17:28:43",
        "upload_time_iso_8601": "2023-03-08T17:28:43.111839Z",
        "url": "https://files.pythonhosted.org/packages/67/9b/202bc3c405a4f39cbd2c39f35417f738ccfbf93a57ee7da8fb705a8a5a97/imdm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e790d57ee07ba900558700d14817cab26f2a633298a8c893593c71f100364b22",
          "md5": "20c85522d739b9437eb255ecb19fdf8f",
          "sha256": "ae3a5c912fcd9722d10ff590a657c3b6b19fef0447d3b705ee18848b3bf2d35a"
        },
        "downloads": -1,
        "filename": "imdm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20c85522d739b9437eb255ecb19fdf8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 9772,
        "upload_time": "2023-03-08T17:28:44",
        "upload_time_iso_8601": "2023-03-08T17:28:44.901073Z",
        "url": "https://files.pythonhosted.org/packages/e7/90/d57ee07ba900558700d14817cab26f2a633298a8c893593c71f100364b22/imdm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cb0e8dfcdd5ba9a1ae930871193d4d52738a495a48afe505cff5806b9dab76",
          "md5": "7d342e9ec8d8b31430b60638c966ad88",
          "sha256": "7c5209109b5938f371843f17f6895ad6151fbaf92a2e10f565fc7ad58123fcf7"
        },
        "downloads": -1,
        "filename": "imdm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d342e9ec8d8b31430b60638c966ad88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 8034,
        "upload_time": "2023-03-10T14:52:12",
        "upload_time_iso_8601": "2023-03-10T14:52:12.646351Z",
        "url": "https://files.pythonhosted.org/packages/d5/cb/0e8dfcdd5ba9a1ae930871193d4d52738a495a48afe505cff5806b9dab76/imdm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "639ee01303fe6150dd05269b3234b128e4f0cac62bfa8baba6f5ad02cd924595",
          "md5": "7d94221e33c52830203fd8c7e23de11b",
          "sha256": "58a7f322ecede47b9538bfb57b9c8849649ed216a74cd80adbb60bac4e06629a"
        },
        "downloads": -1,
        "filename": "imdm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7d94221e33c52830203fd8c7e23de11b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 7463,
        "upload_time": "2023-03-10T14:52:14",
        "upload_time_iso_8601": "2023-03-10T14:52:14.964215Z",
        "url": "https://files.pythonhosted.org/packages/63/9e/e01303fe6150dd05269b3234b128e4f0cac62bfa8baba6f5ad02cd924595/imdm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5cb0e8dfcdd5ba9a1ae930871193d4d52738a495a48afe505cff5806b9dab76",
        "md5": "7d342e9ec8d8b31430b60638c966ad88",
        "sha256": "7c5209109b5938f371843f17f6895ad6151fbaf92a2e10f565fc7ad58123fcf7"
      },
      "downloads": -1,
      "filename": "imdm-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d342e9ec8d8b31430b60638c966ad88",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 8034,
      "upload_time": "2023-03-10T14:52:12",
      "upload_time_iso_8601": "2023-03-10T14:52:12.646351Z",
      "url": "https://files.pythonhosted.org/packages/d5/cb/0e8dfcdd5ba9a1ae930871193d4d52738a495a48afe505cff5806b9dab76/imdm-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "639ee01303fe6150dd05269b3234b128e4f0cac62bfa8baba6f5ad02cd924595",
        "md5": "7d94221e33c52830203fd8c7e23de11b",
        "sha256": "58a7f322ecede47b9538bfb57b9c8849649ed216a74cd80adbb60bac4e06629a"
      },
      "downloads": -1,
      "filename": "imdm-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7d94221e33c52830203fd8c7e23de11b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 7463,
      "upload_time": "2023-03-10T14:52:14",
      "upload_time_iso_8601": "2023-03-10T14:52:14.964215Z",
      "url": "https://files.pythonhosted.org/packages/63/9e/e01303fe6150dd05269b3234b128e4f0cac62bfa8baba6f5ad02cd924595/imdm-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}