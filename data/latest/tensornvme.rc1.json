{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# TensorNVME\n\nA Python Library provides APIs to move PyTorch Tensors between CPU and NVMe.\n\n## Dependencies\n\n- [liburing](https://github.com/axboe/liburing)\n- [libaio](https://pagure.io/libaio)\n\n## Install\n\nThis package is only supported on Linux. `liburing` and `libaio` can be automatically installed. `liburing` is supported on Linux >= `5.10`, and it won't be installed if the version of your Linux < `5.10`.\n\nIt will search `libaio` and `liburing` in `/usr/lib`, `/usr/lib64` and `$LD_LIBRARY_PATH`. If not found, backends will be installed in `~/.tensornvme`, and `~/.bashrc` will be modified to set `$LD_LIBRARY_PATH` correctly. **Please `source ~/.bashrc` after installation.** If you use other shells, please make sure `$LD_LIBRARY_PATH` is set correctly.\n\n> You must install pytorch and cmake before installing tensornvme. Once you upgrade pytorch, remember to reinstall tensornvme.\n\n### From source\n\n```shell\ngit clone https://github.com/hpcaitech/TensorNVMe.git && cd TensorNVMe\n```\n\nFirst, install requirements:\n```shell\npip install -r requirements.txt\n```\n\nTo install `tensornvme` with `liburing` and `libaio`:\n```shell\npip install -v --no-cache-dir .\n```\n\nTo install `tensornvme` with only `liburing`:\n```shell\nDISABLE_AIO=1 pip install -v --no-cache-dir .\n```\n\nTo install `tensornvme` with only `libaio`:\n```shell\nDISABLE_URING=1 pip install -v --no-cache-dir .\n```\n\nIf you want to install `libaio` or `liburing` for system:\n```shell\nWITH_ROOT=1 sudo pip install -v --no-cache-dir .\n```\nThen they will be installed in `/usr` and `~/.bashrc` will not be modified. Make sure you have root access.\n\n### From PIP\n\n```shell\npip install packaging\npip install tensornvme\n```\nAll acceptable environment variables are the same as those when installing from source.\n\n## Use docker\n\n```shell\ngit clone https://github.com/hpcaitech/TensorNVMe.git && cd TensorNVMe/docker && docker build -t tensornvme .\n```\n\n## CLI\n\nWe provide a CLI to test whether backends work well.\n```shell\ntensornvme check\n```\n\n## Usage\n\nIt provide both synchronize and asynchronize I/O API.\n\n> Only CPU and contiguous tensors can be offloaded.\n\nSynchronize API:\n```python\nimport torch\nfrom tensornvme import DiskOffloader\n\nx = torch.rand(2, 2)\ny = torch.rand(4, 4, 4)\noffloader = DiskOffloader('./offload')\noffloader.sync_write(x)\n# x is saved to a file on disk (in ./offload folder) and the memory of x is freed\noffloader.sync_read(x)\n# x is restored\noffloader.sync_writev([x, y])\n# x and y are offloaded\noffloader.sync_readv([x, y])\n# x and y are restored.\n# sync_writev() and sync_readv() are order sensitive\n# E.g. sync_writev([x, y]) and sync_writev([y, x]) are different\n```\n\nAsynchronize API:\n```python\nimport torch\nfrom tensornvme import DiskOffloader\n\nx = torch.rand(2, 2)\ny = torch.rand(4, 4, 4)\noffloader = DiskOffloader('./offload')\noffloader.async_write(x)\n# x is being offloaded in the background\noffloader.sync_write_events()\n# x is offloaded and the memory of x is freed\noffloader.async_read(x)\n# x is being restored in the background\noffloader.sync_read_events()\n# x is restored\noffloader.async_writev([x, y])\n# x and y are being offloaded in the background\noffloader.synchronize()\n# synchronize() will synchronize both write and read events.\noffloader.async_readv([x, y])\noffloader.synchronize()\n# x and y are restored.\n# async_writev() and async_readv() are also order sensitive\n```\n\nYou can use asynchronize API to overlap computation and data moving.\n```python\ntensors = []\n\nfor _ in range(10):\n    tensor = torch.rand(2, 2)\n    tensors.append(tensor)\n    offloader.sync_write(tensor)\n\noffloader.sync_read(tensors[0])\n\nfor i, tensor in enumerate(tensors):\n    offloader.sync_read_events()\n    if i + 1 < len(tensors):\n        offloader.async_read(tensors[i+1])\n    tensor.mul_(2.0)\n    # compute with tensor\n    offloader.sync_write_events()\n    offloader.async_write(tensor)\noffloader.synchronize()\n```\n\n## How to test\n\nWe have C++ test scrpits for `AsyncIO` and `SpaceManager` class. Make sure you have installed `liburing` and `libaio`, and set environment variables correctly before testing. To run the tests:\n\n```shell\nmkdir build\ncd build\ncmake ..\nmake\n./test_asyncio\n./test_space_mgr\n```\n\nWe also have python unit tests. Make sure you have installed `pytest`. To run:\n\n```shell\npytest ./tests\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tensornvme",
    "package_url": "https://pypi.org/project/tensornvme/",
    "platform": null,
    "project_url": "https://pypi.org/project/tensornvme/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/tensornvme/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A tensor disk offloader without data copying.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14536413,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d91e36ffe41c95740f4e24772cf9fc9f9f9cd5c979f9a2173cdf39b747fd0b",
          "md5": "013f818500bd093300c0ffe669a56b88",
          "sha256": "d22aab70ab44adba69c2c8ca8dbfbf4698b9214097d13fd1198768fb8352c227"
        },
        "downloads": -1,
        "filename": "tensornvme-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "013f818500bd093300c0ffe669a56b88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13552,
        "upload_time": "2022-07-25T02:44:49",
        "upload_time_iso_8601": "2022-07-25T02:44:49.127831Z",
        "url": "https://files.pythonhosted.org/packages/46/d9/1e36ffe41c95740f4e24772cf9fc9f9f9cd5c979f9a2173cdf39b747fd0b/tensornvme-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46d91e36ffe41c95740f4e24772cf9fc9f9f9cd5c979f9a2173cdf39b747fd0b",
        "md5": "013f818500bd093300c0ffe669a56b88",
        "sha256": "d22aab70ab44adba69c2c8ca8dbfbf4698b9214097d13fd1198768fb8352c227"
      },
      "downloads": -1,
      "filename": "tensornvme-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "013f818500bd093300c0ffe669a56b88",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13552,
      "upload_time": "2022-07-25T02:44:49",
      "upload_time_iso_8601": "2022-07-25T02:44:49.127831Z",
      "url": "https://files.pythonhosted.org/packages/46/d9/1e36ffe41c95740f4e24772cf9fc9f9f9cd5c979f9a2173cdf39b747fd0b/tensornvme-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}