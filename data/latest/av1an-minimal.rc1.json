{
  "info": {
    "author": "Master_Of_Zen",
    "author_email": "master_of_zen@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align=\"center\">\n    <br>\n    Av1an\n    </br>\n</h1>\n\n<h2 align=\"center\">A cross-platform framework to streamline encoding</h2>\n\n![alt text](https://cdn.discordapp.com/attachments/696849974666985494/774368268860915732/av1an_pick2.png)\n\n<h4 align=\"center\">\n<a href=\"https://discord.gg/Ar8MvJh\"><img src=\"https://discordapp.com/api/guilds/696849974230515794/embed.png\" alt=\"Discord server\" /></a>\n<img src=\"https://github.com/master-of-zen/Av1an/workflows/tests/badge.svg\">\n<a href=\"https://codeclimate.com/github/master-of-zen/Av1an/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/41ea7ad221dcdad3fe8d/maintainability\" />\n<img= src=\"https://app.codacy.com/manual/Grenight/Av1an?utm_source=github.com&utm_medium=referral&utm_content=master-of-zen/Av1an&utm_campaign=Badge_Grade_Dashboard\"></a>\n<a href=\"https://www.codacy.com/manual/Grenight/Av1an?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=master-of-zen/Av1an&amp;utm_campaign=Badge_Grade\"><img src=\"https://api.codacy.com/project/badge/Grade/4632dbb2f6f34ad199142c01a3eb2aaf\"/></a>\n</h4>\n<h2 align=\"center\">Easy, Fast, Efficient and Feature Rich</h2>\n\nAn easy way to start using VVC / AV1 / HEVC / H264 / VP9 / VP8 encoding. AOM, RAV1E, SVT-AV1, SVT-VP9, VPX, x265, x264, VTM(Experimental) are supported.\n\nExample with default parameters:\n\n    av1an -i input\n\nWith your own parameters:\n\n    av1an -i input -enc aom -v \"--cpu-used=3 --end-usage=q --cq-level=30 --threads=8\" -w 10\n    --split_method aom_keyframes --target_quality 95 --vmaf_path \"vmaf_v0.6.1.pkl\" -min_q 20 -max_q 60\n    -ff \"-vf scale=-1:1080\" -a \"-c:a libopus -ac 2 -b:a 192k\" -s scenes.csv -log my_log -o output\n\n<h2 align=\"center\">Usage</h2>\n\n    -i   --input            Input file(s) (relative or absolute path)\n\n    -o   --output_file      Name/Path for output file (Default: (input file name)_(encoder).mkv)\n                            Output file ending is always `.mkv`\n\n    -enc --encoder          Encoder to use\n                            (`aom`,`rav1e`,`svt_av1`,`svt_vp9`,`vpx`,`x265`, `x264`,`vvc`)\n                            Default: aom\n                            Example: -enc rav1e\n\n    -v   --video_params     Encoder settings flags (If not set, will be used default parameters.)\n                            Must be inside ' ' or \" \"\n\n    -p   --passes           Set number of passes for encoding\n                            (Default: AOMENC: 2, rav1e: 1, SVT-AV1: 1, SVT-VP9: 1,\n                            VPX: 2, x265: 1, x264: 1, VVC:1)\n\n    -w   --workers          Override number of workers.\n\n    -r   --resume           If encode was stopped/quit resumes encode with saving all progress\n                            Resuming automatically skips scenedetection, audio encoding/copy,\n                            spliting, so resuming only possible after actuall encoding is started.\n                            temp folder must be presented for resume.\n\n    --no_check              Skip checking numbers of frames for source and encoded chunks.\n                            Needed if framerate changes to avoid console spam.\n                            By default any differences in frames of encoded files will be reported.\n\n    --keep                  Not deleting temprally folders after encode finished.\n\n    -q --quiet              Do not print tqdm to terminal.\n\n    -log --logging          Path to .log file(By default created in temp folder)\n\n    --temp                  Set path for temporally folders. Default: .temp\n\n    -cfg --config           Save/Read config file with encoder, encoder parameters,\n                            FFmpeg and audio settings.\n\n    --mkvmerge              Use mkvmerge for concatenating instead of ffmpeg.\n                            Use in case when concatenation fails.\n\n    -c  --config            Save config file with given name if doesn't exists.\n                            Reads config file with that name.\n                            Options provided to cli overwrite config values.\n                            All options excepth in/out/vmaf/log/temp/config paths are saved.\n\n    --webm                  Outputs webm file.\n                            Use only if you're sure source video and audio is compatible.\n\n<h3 align=\"center\">FFmpeg options</h3>\n\n    -a   --audio_params     FFmpeg audio settings (Default: copy audio from source to output)\n                            Example: -a '-c:a libopus -b:a  64k'\n\n    -ff  --ffmpeg           FFmpeg options video options. Applied to each encoding segment individually.\n                            (Warning: Cropping doesn't work with Target VMAF mode without\n                            specifying it in --vmaf_filter)\n                            Example:\n                            --ff \" -vf scale=320:240 \"\n\n    -fmt --pix_format       Setting custom pixel/bit format for piping\n                            (Default: 'yuv420p10le')\n                            Based on encoder, options should be adjusted accordingly.\n\n<h3 align=\"center\">Segmenting</h3>\n\n    --split_method          Method used for generating splits.(Default: PySceneDetect)\n                            Options: `pyscene`, `aom_keyframes`, `none`\n                            `pyscene` - PyScenedetect, content based scenedetection\n                            with threshold.\n                            `aom_keyframes` - using stat file of 1 pass of aomenc encode\n                            to get exact place where encoder will place new keyframes.\n                            (Keep in mind that speed also depends on set aomenc parameters)\n                            `ffmpeg` - Uses ffmpeg built in content based scene detection\n                            with threshold. Slower and less precise than pyscene but requires\n                            fewer dependencies.\n                            `none` -  skips scenedetection. Useful for splitting by time\n\n    -cm  --chunk_method     Determine way in which chunks made for encoding.\n                            By default selected best one avalable.\n                            vs_ffms2 > vs_lsmash > hybrid\n                            ['hybrid'(default), 'select', 'vs_ffms2'(Recomended To Install), 'vs_lsmash']\n\n    -tr  --threshold        PySceneDetect threshold for scene detection Default: 35\n\n    -s   --scenes           Path to file with scenes timestamps.\n                            If file not exist, new will be generated in current folder\n                            First run to generate stamps, all next reuse it.\n                            Example: \"-s scenes.csv\"\n\n    -xs  --extra_split      Adding extra splits if frame distance beetween splits bigger than\n                            given value. Pair with none for time based splitting or with any\n                            other splitting method to break up massive scenes.\n                            Example: 1000 frames video with single scene,\n                            -xs 200 will add splits at 200,400,600,800.\n\n\n<h3 align=\"center\">Target Quality</h3>\n\n\n    --target_quality        Quality value to target.\n                            VMAF used as substructure for algorithms.\n                            Supported for all encoders(Exception:VVC).\n                            Best works in range 85-97.\n                            When using this mode specify full encoding options.\n                            Encoding options must include quantizer based mode,\n                            and some quantizer option provided. (This value got replaced)\n                            `--crf`,`--cq-level`,`--quantizer` etc\n\n    --target_quality_method Type of algorithm for use.\n                            Options: per_shot, per_frame.\n                            Per frame avalable only for SVT-AV1.\n\n    --min_q, --max_q        Min,Max Q values limits\n                            If not set by user, default for encoder range will be used.\n\n    --vmaf                  Calculate vmaf after encode is done and make a plot.\n\n    --vmaf_plots            Make plots for target quality search decisions\n                            (Exception: early skips)\n                            Saved in temp folder\n\n    --vmaf_path             Custom path to libvmaf models.\n                            example: --vmaf_path \"vmaf_v0.6.1.pkl\"\n                            Recomended to place both files in encoding folder\n                            (`vmaf_v0.6.1.pkl` and `vmaf_v0.6.1.pkl.model`)\n                            (Required if vmaf calculation doesn't work by default)\n\n    --vmaf_res              Resolution scaling for vmaf calculation,\n                            vmaf_v0.6.1.pkl is 1920x1080 (by default),\n                            vmaf_4k_v0.6.1.pkl is 3840x2160 (don't forget about vmaf_path)\n\n    --probes                Number of probes for interpolation.\n                            1 and 2 probes have special cases to try to work with few data points.\n                            Optimal is 4-6 probes. Default: 4\n\n    --vmaf_filter           Filter used for vmaf calculation. Passed format is filter_complex.\n                            So if crop filter used ` -ff \" -vf crop=200:1000:0:0 \"`\n                            `--vmaf_filter` must be : ` --vmaf_filter \"crop=200:1000:0:0\"`\n\n    --probing_rate             Setting rate for vmaf probes (Every N frame used in probe, Default: 4)\n\n    --n_threads             Limit number of threads that used for vmaf calculation\n                            Example: --n_threads 12\n                            (Required if VMAF calculation gives error on high core counts)\n\n\n\n<h2 align=\"center\">Main Features</h2>\n\n**Spliting video by scenes for parallel encoding** because AV1 encoders are currently not good at multithreading, encoding is limited to single or couple of threads at the same time.\n\n*  [PySceneDetect](https://pyscenedetect.readthedocs.io/en/latest/) used for spliting video by scenes and running multiple encoders.\n*  Fastest way to encode AV1 without losing quality, as fast as many CPU cores you have :).\n*  Target Quality mode. Targeting end result reference visual quality. VMAF used as substructure\n*  Resuming encoding without loss of encoded progress.\n*  Simple and clean console look.\n*  Automatic detection of the number of workers the host can handle.\n*  Building encoding queue with bigger files first, minimizing waiting for the last scene to encode.\n*  Both video and audio transcoding with FFmpeg.\n*  Logging of progress of all encoders.\n\n## Install\n\n* Prerequisites:\n  *  [Install Python3](https://www.python.org/downloads/) <br>\nWhen installing under Windows, select the option `add Python to PATH` in the installer\n  *  [Install FFmpeg](https://ffmpeg.org/download.html)\n  * Recommended to install vapoursynth with lsmash for faster and better processing\n* Encoder of choice:\n  *  [Install AOMENC](https://aomedia.googlesource.com/aom/)\n  *  [Install rav1e](https://github.com/xiph/rav1e)\n  *  [Install SVT-AV1](https://github.com/OpenVisualCloud/SVT-AV1)\n  *  [Install SVT-VP9](https://github.com/OpenVisualCloud/SVT-VP9)\n  *  [Install vpx](https://chromium.googlesource.com/webm/libvpx/) VP9, VP8 encoding\n  *  [Install VTM](https://vcgit.hhi.fraunhofer.de/jvet/VVCSoftware_VTM) VVC encoding test model\n * Optional :\n   * [Vapoursynth](http://www.vapoursynth.com/)\n   * [ffms2](https://github.com/FFMS/ffms2)\n   * [lsmash](https://github.com/VFR-maniac/L-SMASH-Works)\n   * [mkvmerge](https://mkvtoolnix.download/)\n\n* With a package manager:\n  *  [PyPI](https://pypi.org/project/Av1an/)\n  *  [AUR](https://aur.archlinux.org/packages/python-av1an/)\n\n* Manually:\n  *  Clone Repo or Download from Releases\n  *  `python setup.py install`\n* Also:\n    On Ubuntu systems packages `python3-opencv` and `libsm6` are required\n\n### Support developer\n\nBitcoin - 1gU9aQ2qqoQPuvop2jqC68JKZh5cyCivG\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/master-of-zen/Av1an",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Av1an-minimal",
    "package_url": "https://pypi.org/project/Av1an-minimal/",
    "platform": "",
    "project_url": "https://pypi.org/project/Av1an-minimal/",
    "project_urls": {
      "Homepage": "https://github.com/master-of-zen/Av1an"
    },
    "release_url": "https://pypi.org/project/Av1an-minimal/5.5.4/",
    "requires_dist": [
      "numpy",
      "psutil",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "Cross-platform command-line AV1 / VP9 / HEVC / H264 / VVC encoding framework with per scene quality encoding",
    "version": "5.5.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9158863,
  "releases": {
    "5.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1f6441f4318e55bde659797c9c49661786b6096a83b384f198c9a802f69ce87",
          "md5": "9a3556dade4e166beff7452dbbe16b86",
          "sha256": "4e087cdf34b9986361fb349e57941134648192ee703e5a6e68ca8473cb40f1b4"
        },
        "downloads": -1,
        "filename": "Av1an_minimal-5.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a3556dade4e166beff7452dbbe16b86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72830,
        "upload_time": "2021-01-17T22:22:57",
        "upload_time_iso_8601": "2021-01-17T22:22:57.550239Z",
        "url": "https://files.pythonhosted.org/packages/e1/f6/441f4318e55bde659797c9c49661786b6096a83b384f198c9a802f69ce87/Av1an_minimal-5.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "567bf955fafe127a74acb9fdf1d6d957726820566171f97fc9a7ef02e1cc6c51",
          "md5": "c41ad30cc8058ec8229ab362f31d21f2",
          "sha256": "2c64793dab71a3e6244702377e7b44c1e454c3eb9517160dfac763cc5f909283"
        },
        "downloads": -1,
        "filename": "Av1an-minimal-5.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c41ad30cc8058ec8229ab362f31d21f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45023,
        "upload_time": "2021-01-17T22:22:59",
        "upload_time_iso_8601": "2021-01-17T22:22:59.132865Z",
        "url": "https://files.pythonhosted.org/packages/56/7b/f955fafe127a74acb9fdf1d6d957726820566171f97fc9a7ef02e1cc6c51/Av1an-minimal-5.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1f6441f4318e55bde659797c9c49661786b6096a83b384f198c9a802f69ce87",
        "md5": "9a3556dade4e166beff7452dbbe16b86",
        "sha256": "4e087cdf34b9986361fb349e57941134648192ee703e5a6e68ca8473cb40f1b4"
      },
      "downloads": -1,
      "filename": "Av1an_minimal-5.5.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9a3556dade4e166beff7452dbbe16b86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 72830,
      "upload_time": "2021-01-17T22:22:57",
      "upload_time_iso_8601": "2021-01-17T22:22:57.550239Z",
      "url": "https://files.pythonhosted.org/packages/e1/f6/441f4318e55bde659797c9c49661786b6096a83b384f198c9a802f69ce87/Av1an_minimal-5.5.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "567bf955fafe127a74acb9fdf1d6d957726820566171f97fc9a7ef02e1cc6c51",
        "md5": "c41ad30cc8058ec8229ab362f31d21f2",
        "sha256": "2c64793dab71a3e6244702377e7b44c1e454c3eb9517160dfac763cc5f909283"
      },
      "downloads": -1,
      "filename": "Av1an-minimal-5.5.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c41ad30cc8058ec8229ab362f31d21f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 45023,
      "upload_time": "2021-01-17T22:22:59",
      "upload_time_iso_8601": "2021-01-17T22:22:59.132865Z",
      "url": "https://files.pythonhosted.org/packages/56/7b/f955fafe127a74acb9fdf1d6d957726820566171f97fc9a7ef02e1cc6c51/Av1an-minimal-5.5.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}