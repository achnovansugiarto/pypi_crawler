{
  "info": {
    "author": "John H Williamson",
    "author_email": "johnhw@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pfilter\r\nBasic Python particle filter. Plain SIR filtering, with various resampling algorithms. Written to be simple and clear; not necessarily most efficient or most flexible implementation. Depends on [NumPy](http://numpy.org) only. \r\n\r\n## Uses\r\n\r\nThis repo is useful for understanding how a particle filter works, or a quick way to develop a custom filter of your own from a relatively simple codebase. \r\n### Alternatives\r\nThere are more mature and sophisticated packages for probabilistic filtering in Python (especially for Kalman filtering) if you want an off-the-shelf solution:\r\n\r\n#### Particle filtering\r\n* [particles](https://github.com/nchopin/particles) Extensive particle filtering, including smoothing and quasi-SMC algorithms\r\n* [FilterPy](https://github.com/rlabbe/filterpy) Provides extensive Kalman filtering and basic particle filtering.\r\n* [pyfilter](https://github.com/tingiskhan/pyfilter) provides Unscented Kalman Filtering, Sequential Importance Resampling and Auxiliary Particle Filter models, and has a number of advanced algorithms implemented, with PyTorch backend.\r\n\r\n#### Kalman filtering\r\n* [pykalman](https://github.com/pykalman/pykalman) Easy to use Kalman Filter, Extended Kalman Filter and Unscented Kalman Filter implementations\r\n* [simdkalman](https://github.com/oseiskar/simdkalman) Fast implmentations of plain Kalman filter banks.\r\n* [torch-kalman](https://github.com/strongio/torch-kalman) PyTorch implementation of Kalman filters, including Pandas dataframe support.\r\n\r\n\r\n## Installation\r\n\r\nAvailable via PyPI:\r\n\r\n    pip install pfilter\r\n    \r\nOr install the git version:\r\n\r\n    pip install git+https://github.com/johnhw/pfilter.git\r\n\r\n## Usage\r\nCreate a `ParticleFilter` object, then call `update(observation)` with an observation array to update the state of the particle filter.\r\n\r\nCalling `update()` without an observation will update the model without any data, i.e. perform a prediction step only.\r\n\r\n### Model\r\n\r\n* Internal state space of `d` dimensions\r\n* Observation space of `h` dimensions\r\n* `n` particles estimating state in each time step\r\n\r\nParticles are represented as an `(n,d)` matrix of states, one state per row. Observations are generated from this matrix into an `(n,h)` matrix of hypothesized observations via the observation function.\r\n\r\n### Functions \r\nYou need to specify at the minimum:\r\n\r\n* an **observation function** `observe_fn(state (n,d)) => observation matrix (n,h)` which will return a predicted observation for an internal state.\r\n* a function that samples from an **initial distributions** `prior_fn => state matrix (n,d)` for all of the internal state variables. These are usually distributions from `scipy.stats`. The utility function `independent_sample` makes it easy to concatenate sampling functions to sample the whole state vector.\r\n* a **weight function** `weight_fn(hyp_observed (n,h), real_observed (h,)) => weight vector (n,)` which specifies how well each of the `hyp_observed` arrays match the real observation `real_observed`. This must produce a strictly positive weight value for each hypothesized observation, where larger means more similar. This is often an RBF kernel or similar.\r\n\r\n\r\n\r\n---\r\n\r\nTypically, you would also specify:\r\n*  **dynamics** a function `dynamics_fn(state (n,d)) => predicted_state (n,d)` to update the state based on internal (forward prediction) dynamics, and a \r\n* **diffusion** a function `noise_fn(predicted_state (n,d)) => noisy_state (n,d)` to add diffusion into the sampling process (though you could also merge into the dynamics). \r\n\r\n---\r\n\r\nYou might also specify:\r\n\r\n* **Internal weighting** a function `internal_weight_fn(state (n,d)) => weight vector (n,)` which provides a weighting to apply on top of the weight function based on *internal* state. This is useful to impose penalties or to include learned inverse models in the inference.\r\n* **Post-processing transform function** a function `transform_fn(state (n,d), weights (n,)) => states(n, k)` which can apply a post-processing transform and store the result in `transformed_particles`\r\n\r\n#### Missing observations\r\nIf you want to be able to deal with partial missing values in the observations, the weight function should support masked arrays. The `squared_error(a,b)` function in `pfilter.py` does this, for example.\r\n\r\n### Passing values to functions\r\n\r\nSometimes it is useful to pass inputs to callback functions like `dynamics_fn(x)` at each time step. You can do this by giving keyword arguments to `update()`. \r\n\r\nIf you call `pf.update(y, t=5)` **all** of the functions `dynamics_fn, weight_fn, noise_fn, internal_weight_fn, observe_fn` will receive the keyword argument `t=5`. ALl `kwargs` are forwarded to these calls. You can just ignore them if not used (e.g. define `dynamics_fn = lambda x, **kwargs: real_dynamics(x)`) but this can be useful for propagating inputs that are neither internal states nor observed states to the filter. If no `kwargs` are given to `update`, then no extra arguments are passed to any of callbacks.\r\n\r\n## Attributes\r\n\r\nThe `ParticleFilter` object will have the following useful attributes after updating:\r\n\r\n* `original_particles` the `(n,d)` collection of particles in the last update step\r\n* `mean_state` the `(d,)` expectation of the state\r\n* `mean_hypothesized`  the `(h,)` expectation of the hypothesized observations\r\n* `cov_state` the `(d,d)` covariance matrix of the state\r\n* `map_state` the `(d,)` most likely state\r\n* `map_hypothesized` the `(h,)`  most likely hypothesized observation\r\n* `weights` the  `(n,)` normalised weights of each particle\r\n\r\n## In equations\r\n\r\n\r\n![](imgs/particle_equations.png)\r\n\r\n### Example\r\n\r\nFor example, assuming we observe 32x32 images and want to track a moving circle. Assume the internal state we are estimating is the 4D vector (x, y, dx, dy), with 200 particles\r\n\r\n```python\r\n        from pfilter import ParticleFilter, gaussian_noise, squared_error, independent_sample\r\n        columns = [\"x\", \"y\", \"radius\", \"dx\", \"dy\"]\r\n        from scipy.stats import norm, gamma, uniform \r\n        \r\n        # prior sampling function for each variable\r\n        # (assumes x and y are coordinates in the range 0-32)    \r\n        prior_fn = independent_sample([uniform(loc=0, scale=32).rvs, \r\n                    uniform(loc=0, scale=32).rvs, \r\n                    gamma(a=2,loc=0,scale=10).rvs,\r\n                    norm(loc=0, scale=0.5).rvs,\r\n                    norm(loc=0, scale=0.5).rvs])\r\n                                    \r\n        # very simple linear dynamics: x += dx\r\n        def velocity(x):\r\n            xp = np.array(x)\r\n            xp[0:2] += xp[3:5]        \r\n        return xp\r\n        \r\n        # create the filter\r\n        pf = pfilter.ParticleFilter(\r\n                        prior_fn=prior_fn, \r\n                        observe_fn=blob,\r\n                        n_particles=200,\r\n                        dynamics_fn=velocity,\r\n                        noise_fn=lambda x: \r\n                                    gaussian_noise(x, sigmas=[0.2, 0.2, 0.1, 0.05, 0.05]),\r\n                        weight_fn=lambda x,y:squared_error(x, y, sigma=2),\r\n                        resample_proportion=0.1,\r\n                        column_names = columns)\r\n                        \r\n        # assuming image of the same dimensions/type as blob will produce\r\n        pf.update(image) \r\n ```\r\n\r\n\r\n* `blob` (200, 4) -> (200, 1024) which draws a blob on an image of size 32x32 (1024 pixels) for each internal state, our observation function\r\n* `velocity` (200, 4) -> (200, 4), our dynamics function, which just applies a single Euler step integrating the velocity\r\n* `prior_fn` which generates a (200,4) initial random state\r\n* `gaussian_noise` (200, 4) -> (200,4) which adds noise to the internal state\r\n* `squared_error` ((200,1024), (1024,)) -> (200,) the similarity measurement\r\n\r\n\r\nSee the notebook [examples/example_filter.py](examples/test_filter.py) for a working example using `skimage` and `OpenCV` which tracks a moving white circle.\r\n\r\n    \r\n    \r\n\r\n\r\n---\r\n<!--\r\n\\begin{align*} \r\nd & \\in \\mathbb{Z}^+ & \\text{state dimension} \\\\\r\nh & \\in \\mathbb{Z}^+& \\text{observation dimension} \\\\\r\nn & \\in \\mathbb{Z}^+& \\text{number of particles} \\\\\r\n{\\bf x}^i &\\in \\mathbb{R}^d  & \\text{state vectors}\\\\\r\n{\\bf y}^i &\\in \\mathbb{R}^h & \\text{observation vectors}\\\\\r\n\r\n{\\bf x}^{i}(0) & \\sim \\pi({\\bf x}) & \\text{prior}\\\\\r\n{\\bf x}^i(t) & = g({\\bf x}^i(t-1)) + \\epsilon(t) & \\text{dynamics}\\\\\r\n{\\bf y}^i(t) & = f({\\bf x}^i(t))\\ & \\text{observation}\\\\\r\n\r\nw_i & = k\\left({\\bf y}^{i}(t), {\\bf y}'(t)\\right)v({\\bf x}^{i}(t)) & \\text{weight}\\\\\r\nw'_i & = \\frac{w_i}{\\sum_j w_j} & \\text{normalisation}\\\\\r\n\r\nk\\left({\\bf y}, {\\bf y'}\\right) & \\  (\\mathbb{R}^h, \\mathbb{R}^h) \\rightarrow \\mathbb{R^+} & \\text{weight function}\r\n\\\\ \r\nv({\\bf x}) &\\  \\mathbb{R}^d\\rightarrow\\mathbb{R}^+ & \\text{internal weight function}\\\\\r\ng(\\bf{x}) & \\ \\mathbb{R}^d \\rightarrow  \\mathbb{R}^d & \\text{dynamics function} \\\\\r\nf(\\bf{x}) & \\ \\mathbb{R}^d \\rightarrow  \\mathbb{R}^h & \\text{observation function} \\\\\r\n\\end{align*}\r\n-->\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/johnhw/pfilter/tarball/0.2.5",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnhw/pfilter",
    "keywords": "particle,probabilistic,stochastic,filter,filtering",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pfilter",
    "package_url": "https://pypi.org/project/pfilter/",
    "platform": null,
    "project_url": "https://pypi.org/project/pfilter/",
    "project_urls": {
      "Download": "https://github.com/johnhw/pfilter/tarball/0.2.5",
      "Homepage": "https://github.com/johnhw/pfilter"
    },
    "release_url": "https://pypi.org/project/pfilter/0.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A basic particle filter",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14102078,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "568c932f1203c876e2a596c646605de267bbffa27f45f524c3754f22d7ebca7e",
          "md5": "86448a680915e87c232877b8942f520a",
          "sha256": "1180512e67f48e1cd012bc0bbd9b2f00de86b647473f6f4a064d2cc2a6a75480"
        },
        "downloads": -1,
        "filename": "pfilter-0.1.zip",
        "has_sig": false,
        "md5_digest": "86448a680915e87c232877b8942f520a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4946,
        "upload_time": "2017-02-02T16:05:00",
        "upload_time_iso_8601": "2017-02-02T16:05:00.509810Z",
        "url": "https://files.pythonhosted.org/packages/56/8c/932f1203c876e2a596c646605de267bbffa27f45f524c3754f22d7ebca7e/pfilter-0.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfd5c94e57bb840f65150530adca15e5848de27d63411a29689fe06db5d1783b",
          "md5": "58457b062b7b50c884d18fec0136b523",
          "sha256": "b48d0f1fe14331a2c41f42006e6dc0da7a2503b4d64a5f481504cd095f066982"
        },
        "downloads": -1,
        "filename": "pfilter-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "58457b062b7b50c884d18fec0136b523",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4994,
        "upload_time": "2019-02-14T12:37:24",
        "upload_time_iso_8601": "2019-02-14T12:37:24.127072Z",
        "url": "https://files.pythonhosted.org/packages/cf/d5/c94e57bb840f65150530adca15e5848de27d63411a29689fe06db5d1783b/pfilter-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71667c9705021f6fb28e275cbfc2e78559d6c8f6c45d839506d48b4d05500fad",
          "md5": "410a587613870d81b2c30d98de6a012b",
          "sha256": "5eb1c75a64d7eede48e7aff5268a1827145de1bdf5fe679a4ed240ab9fc6b887"
        },
        "downloads": -1,
        "filename": "pfilter-0.2.1.zip",
        "has_sig": false,
        "md5_digest": "410a587613870d81b2c30d98de6a012b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6690,
        "upload_time": "2019-02-14T12:47:31",
        "upload_time_iso_8601": "2019-02-14T12:47:31.597154Z",
        "url": "https://files.pythonhosted.org/packages/71/66/7c9705021f6fb28e275cbfc2e78559d6c8f6c45d839506d48b4d05500fad/pfilter-0.2.1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "244db4bbae9105ca1da701564b6f75f8b5ddc00d05c77923277a5ff38b2ce537",
          "md5": "fc5f0b327be64dee91960bdf207cf3f7",
          "sha256": "c2b549a240dc0d60048e1d9772a240d4bade53dc0701c4f2f5e9336eb7e0fc67"
        },
        "downloads": -1,
        "filename": "pfilter-0.2.2.zip",
        "has_sig": false,
        "md5_digest": "fc5f0b327be64dee91960bdf207cf3f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9438,
        "upload_time": "2019-02-14T12:49:37",
        "upload_time_iso_8601": "2019-02-14T12:49:37.109877Z",
        "url": "https://files.pythonhosted.org/packages/24/4d/b4bbae9105ca1da701564b6f75f8b5ddc00d05c77923277a5ff38b2ce537/pfilter-0.2.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "374142860686cf703c92f6c411b6db6add30f4faef064c2eb8efa5658d5f0d83",
          "md5": "0aae2c1d85ad846b746447122fc6cc54",
          "sha256": "d774f579ffa613b9357c5f56ef1b26a509aa3fbab3f6a8e849de8ccaf1f8d079"
        },
        "downloads": -1,
        "filename": "pfilter-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0aae2c1d85ad846b746447122fc6cc54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9693,
        "upload_time": "2020-12-26T12:39:46",
        "upload_time_iso_8601": "2020-12-26T12:39:46.835815Z",
        "url": "https://files.pythonhosted.org/packages/37/41/42860686cf703c92f6c411b6db6add30f4faef064c2eb8efa5658d5f0d83/pfilter-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8aee8541490f74c6f8917ef644bf77645f8b56c572478ab9c8cfecffecdeb2bb",
          "md5": "2280b02a93171f55d8831870285c5cb3",
          "sha256": "931a47723291732df26b1950a663700eec1acf05d884a3f18056a5a0f187f5de"
        },
        "downloads": -1,
        "filename": "pfilter-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2280b02a93171f55d8831870285c5cb3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13488,
        "upload_time": "2022-06-11T16:01:09",
        "upload_time_iso_8601": "2022-06-11T16:01:09.145477Z",
        "url": "https://files.pythonhosted.org/packages/8a/ee/8541490f74c6f8917ef644bf77645f8b56c572478ab9c8cfecffecdeb2bb/pfilter-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8aee8541490f74c6f8917ef644bf77645f8b56c572478ab9c8cfecffecdeb2bb",
        "md5": "2280b02a93171f55d8831870285c5cb3",
        "sha256": "931a47723291732df26b1950a663700eec1acf05d884a3f18056a5a0f187f5de"
      },
      "downloads": -1,
      "filename": "pfilter-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2280b02a93171f55d8831870285c5cb3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13488,
      "upload_time": "2022-06-11T16:01:09",
      "upload_time_iso_8601": "2022-06-11T16:01:09.145477Z",
      "url": "https://files.pythonhosted.org/packages/8a/ee/8541490f74c6f8917ef644bf77645f8b56c572478ab9c8cfecffecdeb2bb/pfilter-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}