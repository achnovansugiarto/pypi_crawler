{
  "info": {
    "author": "Matt Brock",
    "author_email": "mtbrock@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "![badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/mtbrock/a4b117f575fe24d0555e1bee9e682013/raw/pytest-coverage__master.json)\n\n# Redis Decorators\nRedis cache decorators for automatically caching function return values in Python.\n\n## Get Started\n### Install\n```\npip install redis_decorators\n```\n\n### Initialize\nThe main class, `RedisCaching`, will initialize Redis for you.\n```\nfrom redis_decorators import RedisCaching\n\ncaching = RedisCaching('redis://redis:6379')\ncache = caching.get_cache()  # Redis instance\n```\n\n## Usage\nThe simplest way to start caching return values is to use one of the `RedisCaching.cache_*`\ndecorators. The cache key is generated automatically based on the function name and arguments.\n```python\n@caching.cache_string()\ndef my_string_function(arg1, arg2):\n    # ... do some calculation\n    return 'my_value'\n```\n\n### Calculate Cache Key\nIf you want to have control over how cache keys are calculated, you can specify `get_cache_key`\nin the following ways:\n\n#### Lambda function\n```python\n@caching.cache_string(get_cache_key=lambda arg1: return f'{arg1}-cache-key')\ndef my_string_function(arg1):\n    return 'my_value'\n```\n\n#### Separate function definition\nThe decorator returns a wrapper that allows you to define additional properties:\n```python\n@caching.cache_string()\ndef my_string_function(arg1):\n    return 'my_value'\n\n# The cache key function gets the same arguments as the value function.\n@my_string_function.cache_key\ndef my_string_function_cache_key(arg1):\n    return f'{arg1}-cache-key\n```\n\n### Key Expiration\nYou can define an expiration time in seconds or with a `datetime.timedelta`, similar to how you\nwould define the cache key calculation:\n```python\n# Define a static expiration time with expire_in kwarg:\n@caching.cache_string(expire_in=60)  # Cache key expires in 60 seconds.\ndef my_string_function(arg1):\n    return 'my_value'\n\n# Calculate expiration time with a function:\n@caching.cache_string()\ndef my_string_function(arg1):\n    return 'my_value'\n\n@my_string_function.expire_in\ndef my_string_function_expire_in(arg1):\n    # ... calculate seconds or a timedelta\n    return datetime.now() - some_other_datetime\n```\n\n## Included Value Types\nThere are decorators already defined for various common datatypes.\n\n| Decorator | Wrapped Function Return Type | Redis Set Function | Redis Get Function |\n| --------- | ---------------------------- | ------------------ | ------------------ |\n| `RedisCaching.cache_str` | `str` | `set` | `get` |\n| `RedisCaching.cache_dict_str` | `str` | `hset` | `hget` |\n| `RedisCaching.cache_dict` | `dict` | `hset` | `hgetall` |\n| `RedisCaching.cache_list` | `list` | `rpush` | `lrange` |\n\nYou can see how the various datatypes are stored and fetched in [cacheable.py](redis_decorators/cacheable.py).\n\n### Special Decorators\nAll decorators accept the same arguments except for the following:\n\n- #### RedisCaching.cache_dict_str\nThis decorator stores a value inside a cached dictionary (a redis hash).\n\n**Usage:**\n```python\n@caching.cache_dict_string(dict_key='foo', get_cache_key=lambda arg1: return f'{arg1}-cache-key')\ndef my_nested_value(arg1):\n    return \"bar\"\n```\nIn the above example, calling `my_nested_value('hello')` results in a cached hash with key `hello-cache-key` and value `{ 'foo': 'bar' }`.\n\n## Custom Data Types\nYou can cache and retrieve any arbitrary data type as long as it can be serialized/transformed into a type that redis supports.\n\n### Examples\n#### Cache a `decimal.Decimal`\nThis example serializes `Decimal` objects to strings and coerces fetched values back into `Decimal` objects.\n\n```python\n# Define a custom `CacheElement`\nclass CacheDecimal(CacheElement[Decimal, str]):\n    cacheable: Cacheable[str] = StringCacheable()\n\n    def load(self, value: str) -> Decimal:\n        return Decimal(value)\n\n    def dump(self, value: Decimal) -> str:\n        return str(value)\n\n# Use the custom CacheElement with RedisCaching.cache_value\n@caching.cache_value(CacheDecimal())\ndef my_decimal_function(arg1):\n    return Decimal('1.234')\n```\n\n#### Cache your own serializable type\nIf you have a custom data type that is serializable, you can define a custom `CacheElement` to cache it.\n\n```python\nclass MyObject:\n    def serialize(self):\n        # return a string representation\n\n    @classmethod\n    def from_str(cls, value):\n        # parse value and return a new instance\n\n\nclass CacheMyObject(CacheElement[MyObject, str]):\n    cacheable: Cacheable[str] = StringCacheable()\n\n    def load(self, value: str) -> MyObject:\n        return Decimal.from_str(value)\n\n    def dump(self, value: MyObject) -> str:\n        return value.serialize()\n\n# Use the custom CacheElement with RedisCaching.cache_value\n@caching.cache_value(CacheMyObject())\ndef my_decimal_function(arg1):\n    return MyObject()\n```\n\nNote the underlying `Cacheable` in these examples is `StringCacheable`. If you want to store your object as a different type,\nyou can use other `Cacheable` classes to do so. For example, to store your object as a dictionary, you would\nuse the `DictCacheable` instead of `StringCacheable`. With `DictCacheable`, the `load` function would take\na `dict` object as the `value` argument and return your object type; the `dump` function would take your\nobject type as the `value` argument and return a `dict`.\n\nSee [cacheable.py](redis_decorators/cacheable.py) and [cache_element.py](redis_decorators/cache_element.py) for examples of\n`Cacheable` and `CacheElement`, respectively.\n\n## Advanced Usage\n### Deferred Init\nIf your redis config is not available at the time `RedisCaching` is initialized, you can defer initialization using `RedisCaching.init`.\nThis use case is common when using web frameworks like Flask or Pyramid, where you may have modules that use cache decorators that get\nimported before your app configuration is initialized.\n\nYou can create a `RedisCaching` instance without providing a URL or redis config and use decorators throughout your code base. The cache functions\nwill get registered before the connection to redis is made.\n\n#### Example\nCreate an instance of `RedisCaching` in, for instance, `extensions.py`:\n```python\nfrom redis_decorators import RedisCaching\ncaching = RedisCaching()\n```\n\nUse the cache decorators wherever you need to:\n```python\nfrom extensions import caching\n\n@caching.cache_string()\ndef my_cached_string_function():\n    # ...\n```\n\nInitialize your `RedisCaching` instance after your config has been initialized:\n```python\nfrom extensions import caching\n\ndef app():\n    # initialize app and config, visit view modules, etc.\n    caching.init(app.config.REDIS_URL, **app.config.REDIS_CONFIG)\n```\n\n## Development\n### Install dev dependencies\n```sh\npip install -r requirements.txt\n```\n\n### Run tests with pytest\n```sh\npytest\n```\n### Run tests with a live redis server\nBy default, tests are run using `fakeredis` instead of connecting to a real redis server. To run tests agains a live (local) redis server:\n```sh\ndocker compose up -d\npytest --redis-url redis://localhost:6379\n```\n\n## Contributing\nPRs and issues are always welcome.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mtbrock/redis-decorators",
    "keywords": "redis,redis-py,cache,caching,decorators",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redis-decorators",
    "package_url": "https://pypi.org/project/redis-decorators/",
    "platform": null,
    "project_url": "https://pypi.org/project/redis-decorators/",
    "project_urls": {
      "Bug Reports": "https://github.com/mtbrock/redis-decorators/issues",
      "Homepage": "https://github.com/mtbrock/redis-decorators",
      "Source": "https://github.com/mtbrock/redis-decorators"
    },
    "release_url": "https://pypi.org/project/redis-decorators/1.0.1/",
    "requires_dist": [
      "redis"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "Cache function return values automatically with decorators.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13142123,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8afd7026edf6d95ef5c90cc75b31c979808f9c4b4463bbcb3c563e9fb0df8aec",
          "md5": "51d4987d8515effb3076542458463d99",
          "sha256": "3d6ece56f5477490cd3f63581832d39c489b0e7d690b1598aafd11dcb7b4b90e"
        },
        "downloads": -1,
        "filename": "redis_decorators-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "51d4987d8515effb3076542458463d99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 8272,
        "upload_time": "2022-03-06T23:07:41",
        "upload_time_iso_8601": "2022-03-06T23:07:41.026629Z",
        "url": "https://files.pythonhosted.org/packages/8a/fd/7026edf6d95ef5c90cc75b31c979808f9c4b4463bbcb3c563e9fb0df8aec/redis_decorators-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6064e55d500ebd84f7c9761f6d2f33950656140c612c9116d779c2b3e83660f",
          "md5": "9aa22dbfd37e773a9a8aef71ff96c320",
          "sha256": "bb6680e66ee661b8c5cbe98d233f83f306e8978be0831888cc86c0727b271cce"
        },
        "downloads": -1,
        "filename": "redis-decorators-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9aa22dbfd37e773a9a8aef71ff96c320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 7412,
        "upload_time": "2022-03-06T23:07:42",
        "upload_time_iso_8601": "2022-03-06T23:07:42.957276Z",
        "url": "https://files.pythonhosted.org/packages/c6/06/4e55d500ebd84f7c9761f6d2f33950656140c612c9116d779c2b3e83660f/redis-decorators-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c3eb7511521097f486c3446cc77ba0e33ef8e25e3e7908e8bed7107b62cadf1",
          "md5": "868c37fbc9af61ad21c7b2d8b7961b4f",
          "sha256": "cc1c35b9c433aa85382aaaee243dedc929c29ea56703290f2db828f005c2a864"
        },
        "downloads": -1,
        "filename": "redis_decorators-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "868c37fbc9af61ad21c7b2d8b7961b4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 11630,
        "upload_time": "2022-03-10T19:48:19",
        "upload_time_iso_8601": "2022-03-10T19:48:19.424296Z",
        "url": "https://files.pythonhosted.org/packages/6c/3e/b7511521097f486c3446cc77ba0e33ef8e25e3e7908e8bed7107b62cadf1/redis_decorators-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380d68a3288b053204374d82f1f472e6c8a2480e2012b1443582a96efbe1110d",
          "md5": "57515ff6708825a0e1490c4c8441fc3e",
          "sha256": "9e2fafb402a70676672c296bccd011ad066291e484a9d890294eb68979a69c16"
        },
        "downloads": -1,
        "filename": "redis-decorators-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "57515ff6708825a0e1490c4c8441fc3e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 12184,
        "upload_time": "2022-03-10T19:48:22",
        "upload_time_iso_8601": "2022-03-10T19:48:22.189888Z",
        "url": "https://files.pythonhosted.org/packages/38/0d/68a3288b053204374d82f1f472e6c8a2480e2012b1443582a96efbe1110d/redis-decorators-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c3eb7511521097f486c3446cc77ba0e33ef8e25e3e7908e8bed7107b62cadf1",
        "md5": "868c37fbc9af61ad21c7b2d8b7961b4f",
        "sha256": "cc1c35b9c433aa85382aaaee243dedc929c29ea56703290f2db828f005c2a864"
      },
      "downloads": -1,
      "filename": "redis_decorators-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "868c37fbc9af61ad21c7b2d8b7961b4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 11630,
      "upload_time": "2022-03-10T19:48:19",
      "upload_time_iso_8601": "2022-03-10T19:48:19.424296Z",
      "url": "https://files.pythonhosted.org/packages/6c/3e/b7511521097f486c3446cc77ba0e33ef8e25e3e7908e8bed7107b62cadf1/redis_decorators-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "380d68a3288b053204374d82f1f472e6c8a2480e2012b1443582a96efbe1110d",
        "md5": "57515ff6708825a0e1490c4c8441fc3e",
        "sha256": "9e2fafb402a70676672c296bccd011ad066291e484a9d890294eb68979a69c16"
      },
      "downloads": -1,
      "filename": "redis-decorators-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "57515ff6708825a0e1490c4c8441fc3e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 12184,
      "upload_time": "2022-03-10T19:48:22",
      "upload_time_iso_8601": "2022-03-10T19:48:22.189888Z",
      "url": "https://files.pythonhosted.org/packages/38/0d/68a3288b053204374d82f1f472e6c8a2480e2012b1443582a96efbe1110d/redis-decorators-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}