{
  "info": {
    "author": "Ghoul",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PycordUtils\n\nNote: This Library is A Port of [DiscordUtils](https://github.com/toxicrecker/DiscordUtils) \n\nA Useful Utility Library made to be used with [pycord](https://github.com/Pycord-Development/pycord)\n\n\n# Installation\nFor access to Pagination and InviteTracker use:\n```\npip install PycordUtils\n```\n\nor, instead use the following for access to Music functions aswell\n```\npip install PycordUtils[voice]\n```\nRequires py-cord[voice] so make sure you have all dependencies of it installed.\n\n# Example code\n\n### PycordUtils.Pagination.AutoEmbedPaginator\n```python\nimport PycordUtils\n\n@bot.command()\nasync def paginate(ctx):\n    embed1 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 1\")\n    embed2 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 2\")\n    embed3 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 3\")\n    paginator = PycordUtils.Pagination.AutoEmbedPaginator(ctx)\n    embeds = [embed1, embed2, embed3]\n    await paginator.run(embeds)\n```\n\n### PycordUtils.Pagination.CustomEmbedPaginator\n```python\nimport PycordUtils\n\n@bot.command()\nasync def paginate(ctx):\n    embed1 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 1\")\n    embed2 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 2\")\n    embed3 = discord.Embed(color=ctx.author.color).add_field(name=\"Example\", value=\"Page 3\")\n    paginator = PycordUtils.Pagination.CustomEmbedPaginator(ctx)\n    paginator.add_reaction('⏮️', \"first\")\n    paginator.add_reaction('⏪', \"back\")\n    paginator.add_reaction('🔐', \"lock\")\n    paginator.add_reaction('⏩', \"next\")\n    paginator.add_reaction('⏭️', \"last\")\n    embeds = [embed1, embed2, embed3]\n    await paginator.run(embeds)\n```\n\n### PycordUtils.InviteTracker\n```python\nimport discord\nfrom discord.ext import commands\nimport PycordUtils\n\nintents = discord.intents.default()\nintents.members = True\nbot = commands.AutoShardedBot(command_prefix=\"-\", intents=intents)\ntracker = PycordUtils.InviteTracker(bot)\n\n@bot.event\nasync def on_member_join(member):\n    inviter = await tracker.fetch_inviter(member) # inviter is the member who invited\n```\n\n### Pycord.Music\n```python\nimport discord\nfrom discord.ext import commands\nimport PycordUtils\n\nbot = commands.AutoShardedBot(command_prefix=\">\")\nmusic = PycordUtils.Music()\n\n@bot.command()\nasync def join(ctx):\n    await ctx.author.voice.channel.connect() #Joins author's voice channel\n    \n@bot.command()\nasync def leave(ctx):\n    await ctx.voice_client.disconnect()\n    \n@bot.command()\nasync def play(ctx, *, url):\n    player = music.get_player(guild_id=ctx.guild.id)\n    if not player:\n        player = music.create_player(ctx, ffmpeg_error_betterfix=True)\n    if not ctx.voice_client.is_playing():\n        await player.queue(url, search=True)\n        song = await player.play()\n        await ctx.send(f\"Playing {song.name}\")\n    else:\n        song = await player.queue(url, search=True)\n        await ctx.send(f\"Queued {song.name}\")\n        \n@bot.command()\nasync def pause(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.pause()\n    await ctx.send(f\"Paused {song.name}\")\n    \n@bot.command()\nasync def resume(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.resume()\n    await ctx.send(f\"Resumed {song.name}\")\n    \n@bot.command()\nasync def stop(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    await player.stop()\n    await ctx.send(\"Stopped\")\n    \n@bot.command()\nasync def loop(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.toggle_song_loop()\n    if song.is_looping:\n        await ctx.send(f\"Enabled loop for {song.name}\")\n    else:\n        await ctx.send(f\"Disabled loop for {song.name}\")\n    \n@bot.command()\nasync def queue(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    await ctx.send(f\"{', '.join([song.name for song in player.current_queue()])}\")\n    \n@bot.command()\nasync def np(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = player.now_playing()\n    await ctx.send(song.name)\n    \n@bot.command()\nasync def skip(ctx):\n    player = music.get_player(guild_id=ctx.guild.id)\n    data = await player.skip(force=True)\n    if len(data) == 2:\n        await ctx.send(f\"Skipped from {data[0].name} to {data[1].name}\")\n    else:\n        await ctx.send(f\"Skipped {data[0].name}\")\n\n@bot.command()\nasync def volume(ctx, vol):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song, volume = await player.change_volume(float(vol) / 100) # volume should be a float between 0 to 1\n    await ctx.send(f\"Changed volume for {song.name} to {volume*100}%\")\n    \n@bot.command()\nasync def remove(ctx, index):\n    player = music.get_player(guild_id=ctx.guild.id)\n    song = await player.remove_from_queue(int(index))\n    await ctx.send(f\"Removed {song.name} from queue\")\n```\n\nFor further information please read the docs\n\n# Links\n\n**[Documentation](https://ghoul.gitbook.io/pycordutils/)**\n\n**[Discord](discord.gg/qPcknbjAmb)**\n\n# Support\n**__Please make sure that you are on the latest version of [PycordUtils](https://pypi.org/project/PycordUtils) and [youtube_dl](https://pypi.org/project/youtube_dl) before contacting for support__**\n\nDM/PM `Ghoul#6066` on Discord for support",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xFGhoul/PycordUtils",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PycordUtils",
    "package_url": "https://pypi.org/project/PycordUtils/",
    "platform": "",
    "project_url": "https://pypi.org/project/PycordUtils/",
    "project_urls": {
      "Homepage": "https://github.com/xFGhoul/PycordUtils"
    },
    "release_url": "https://pypi.org/project/PycordUtils/0.0.2/",
    "requires_dist": null,
    "requires_python": ">= 3.6",
    "summary": "A Useful Utility Library made to be used with pycord",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11385813,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72fe20086242fcbf3b5f5f34b3c8512dc380b00166df77d9d04876e16379bfa3",
          "md5": "3861d130b27568648963c139a86aea2e",
          "sha256": "757234c2c58a7bd0d5ba9032143eae8e59329ba1d8c1017042710a6aaba2e77d"
        },
        "downloads": -1,
        "filename": "PycordUtils-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3861d130b27568648963c139a86aea2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 9841,
        "upload_time": "2021-09-06T23:57:30",
        "upload_time_iso_8601": "2021-09-06T23:57:30.937576Z",
        "url": "https://files.pythonhosted.org/packages/72/fe/20086242fcbf3b5f5f34b3c8512dc380b00166df77d9d04876e16379bfa3/PycordUtils-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "135f8c1e2094d5ad742d235e2d53a3d1cfeadeed7eb430d70263906fb9cc0c9c",
          "md5": "c7960b9ddad05af76fb7790aa569da82",
          "sha256": "89b05e2122a075e218f83e6de578f256bc5cbbbb5ed04675dbd7b009abe1c67a"
        },
        "downloads": -1,
        "filename": "PycordUtils-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c7960b9ddad05af76fb7790aa569da82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">= 3.6",
        "size": 10419,
        "upload_time": "2021-09-07T14:28:00",
        "upload_time_iso_8601": "2021-09-07T14:28:00.789839Z",
        "url": "https://files.pythonhosted.org/packages/13/5f/8c1e2094d5ad742d235e2d53a3d1cfeadeed7eb430d70263906fb9cc0c9c/PycordUtils-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "135f8c1e2094d5ad742d235e2d53a3d1cfeadeed7eb430d70263906fb9cc0c9c",
        "md5": "c7960b9ddad05af76fb7790aa569da82",
        "sha256": "89b05e2122a075e218f83e6de578f256bc5cbbbb5ed04675dbd7b009abe1c67a"
      },
      "downloads": -1,
      "filename": "PycordUtils-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c7960b9ddad05af76fb7790aa569da82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">= 3.6",
      "size": 10419,
      "upload_time": "2021-09-07T14:28:00",
      "upload_time_iso_8601": "2021-09-07T14:28:00.789839Z",
      "url": "https://files.pythonhosted.org/packages/13/5f/8c1e2094d5ad742d235e2d53a3d1cfeadeed7eb430d70263906fb9cc0c9c/PycordUtils-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}