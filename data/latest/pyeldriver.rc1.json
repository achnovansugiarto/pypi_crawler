{
  "info": {
    "author": "telboyWA",
    "author_email": "telstupple@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# PyelDriver\n\nA python HTML tool to use with FastAPI to deliver 'Hypermedia as The Engine of Application State'.\nThe idea is based on Apple's SwiftUI & Elm's HTML library and how it curries functions to return a 'super body'.\n\nIn scripts you can use all HTML elements as functions allowing deterministic HTML that can be tested.\n\n## Standard Examples\n\n- calling `div()` returns\n  `<div></div>`\n\n- calling `div(\"hello world\")` returns\n  `<div>hello world</world>`\n\n- calling `div(\"content\", atts({\"class\":\"active\"}))` returns\n  `<div class=\"active\">content</div>`\n\n- calling `div(\"content\", att({\"class\":\"active\", \"id\":\"my-div\"}))` returns\n  `<div class=\"active\" id=\"mydiv\">content</div>`\n\n- calling `div(\"content\", atts({\"special\": False}))` returns\n  `<div special >content</div>`\n  (edited)\n\n## Grouping Examples\n\nYou can optionally nest elements within each other.\n\n- `body(div(h1(\"Hello world))))` returns\n\n```\n<body>\n   <div>\n      <h1>Hello world</h1>\n   </div>\n</body>\n```\n\n- Sibling elements are wrapped with a `Children` function.\n\n```\nol(children([\n   li(\"item 1\"),\n   li(\"item 2\"),\n   ])\n)\n```\n\ngiving\n\n```\n<ol>\n   <li>Item 1</li>\n   <li>Item 2</li>\n</ol>\n```\n\n# Empty Elements\n\nElements that do not require an 'end tag' are called 'empty' elements.\nThis are automatically handled by El. (but you do currently need to know what they are)\n\n`img(atts({\"src\":\"test_image.jpg\", \"alt\":\"\"})`\nreturns\n\n```\n<img src=\"test_image.jpg\" alt=\"\" >\n```\n\n## Content and Attributes\n\nElements are made of a few parts. Ignoring empty elements for now we have:\n\n`<tagname>` `content` `</tagname>`\n\nOptionally all HTML elements can have attributes to provide additonal info.\nThese are always specified in the start tag and usually are name/value pairs.\n\n### Key Value Pairs\n\nAs elements can handle multiple attributes El handles attributes as a `dict` and iterates over them.\nThis is generally done by passing `atts` as the attributes argument. (although in theory you 'could' hand craft this in certain circumstances.\n\n`div(\"content\", atts({\"key\":\"value\"})`\n\nreturns\n\n`<div key=\"value\">content</content>`\n\n### Key Only Attribute\n\nCertain elements take just a key. In this circumstances you can set empty to True when passing them in.\n\n`video(\"Your browser does not support the video tag.\", atts({\"width\":\"320\", \"height\":\"240\", \"controls\": True}))`\n\n`<video width=\"320\" height=\"240\" controls>Your browser does not support the video tag.</video>`\n\n## Composable\n\nMuch like SwiftUi It is expected that multiple smaller items are bundled together to create views.\n\n```\nhead_view = head(title(\"Page title\"))\n\nnav_view = nav(\n    children(\n        [\n            a(\"HTML\", atts({\"href\": \"/html/\"})),\n            a(\"CSS\", atts({\"href\": \"/css/\"})),\n            a(\"JavaScript\", atts([\"href\": \"/js/\"})),\n            a(\"Python\", atts({\"href\": \"/python/\"})),\n        ]\n    )\n)\n\nbody_view = body(\n    children(\n        [\n            nav_view,\n            main(\n                children(\n                    [\n                        h1(\"Hello World\"),\n                        p(\n                            \"Chrome, Firefox, and Edge are the most popular browsers today.\"\n                        ),\n                        article(\n                            children(\n                                [\n                                    h2(\"Google Chrome\"),\n                                    p(\n                                        \"Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world's most popular web browser today!\"\n                                    ),\n                                ]\n                            )\n                        ),\n                    ]\n                )\n            ),\n        ]\n    )\n)\n\nhtml_output = html(\n    children(\n        [\n            head_view,\n            body_view,\n        ]\n    )\n)\n\n```\n\nreturns\n\n```\n<html>\n  <head>\n    <title>Page title</title>\n  </head>\n  <body>\n    <nav>\n      <a href=\"/html/\">HTML</a>\n      <a href=\"/css/\">CSS</a>\n      <a href=\"/js/\">JavaScript</a>\n      <a href=\"/python/\">Python</a>\n    </nav>\n    <main>\n      <h1>Hello World</h1>\n      <p>Chrome, Firefox, and Edge are the most popular browsers today.</p>\n      <article>\n        <h2>Google Chrome</h2>\n        <p>\n          Google Chrome is a web browser developed by Google, released in 2008.\n          Chrome is the world's most popular web browser today!\n        </p>\n      </article>\n    </main>\n  </body>\n</html>\n```\n\n## Helper functions\n\nWith all El outputs being `str` the opportunity to combine it with normal flow is useful.\n\nFor example converting a list to to `select` options is trivial.\n\n```\n\ncars = [\"Volvo\", \"Saab\", \"Mercedes\", \"Audi\"]\n\n\ndef car_options(cars: list) -> str:\n    return \"\".join(\n        [option(f\"{car}\", atts({\"value\": f\"{car}\".lower()})) for car in cars]\n    )\n\n\nhtml_output = children(\n    [\n        label(\"Choose a car:\", atts({\"for\": \"cars\"})),\n        select(car_options(cars)),\n    ]\n)\n```\n\noutputs\n\n```\n<label for=\"cars\">Choose a car:</label>\n\n<select>\n  <option value=\"volvo\">Volvo</option>\n  <option value=\"saab\">Saab</option>\n  <option value=\"mercedes\">Mercedes</option>\n  <option value=\"audi\">Audi</option>\n</select>\n```\n\n## Extensibility\n\nCan I extend this?\nProbably, it's just python.\n\nEach element is basically a lambda function assigned to a var.\nTo create an element you can add:\n\n`tagname = _el_factory(\"tagname\")`\n\nor\n\n`tagname = _el_factory(\"tagname\", end_tag=False)`\n\nfor a 'empty' element.\n\n## Thoughts and Considerations\n\n... But! this is hard to read! It's not very 'pythonic!'...\nI've played with Jinja and template partials but I don't like templating so much.\nI want to be able to bring in external data and use it like I normally use Python.\n\n## Todos\n\n- [] Add Tests ðŸ˜³\n- [] Add Pydantic to validate elements.\n- [] Add Components for rapid development\n- [] Auto 'Prettify' the output HTML as it currently just concatenates.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/telboyWA/pyel-driver",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyeldriver",
    "package_url": "https://pypi.org/project/pyeldriver/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyeldriver/",
    "project_urls": {
      "Homepage": "https://github.com/telboyWA/pyel-driver",
      "Repository": "https://github.com/telboyWA/pyel-driver"
    },
    "release_url": "https://pypi.org/project/pyeldriver/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.9,<4.0",
    "summary": "Python function -> HTML string utility.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14971671,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdaf8b07270ce47aed3c5b89ac700b0993a97195e8dc69e49ce029348d1ef434",
          "md5": "2300212cca4a2f94aacf76a84254bc91",
          "sha256": "a1f0131a895451d1140ee677af17a6f069e99c08612630ea33316bd90ddce23d"
        },
        "downloads": -1,
        "filename": "pyeldriver-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2300212cca4a2f94aacf76a84254bc91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 6337,
        "upload_time": "2022-09-02T07:44:32",
        "upload_time_iso_8601": "2022-09-02T07:44:32.611931Z",
        "url": "https://files.pythonhosted.org/packages/cd/af/8b07270ce47aed3c5b89ac700b0993a97195e8dc69e49ce029348d1ef434/pyeldriver-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4290b1400201386309a43c9b85820f4577248827f3a4c81aed65f1c7308f8001",
          "md5": "69f7fe2d8dad4e4096527afea3e9f6bb",
          "sha256": "254d223c5c472c3717d82c6860364c6a76885394cdbd649aaccece221ae9d56f"
        },
        "downloads": -1,
        "filename": "pyeldriver-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69f7fe2d8dad4e4096527afea3e9f6bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 6393,
        "upload_time": "2022-09-02T07:44:34",
        "upload_time_iso_8601": "2022-09-02T07:44:34.562454Z",
        "url": "https://files.pythonhosted.org/packages/42/90/b1400201386309a43c9b85820f4577248827f3a4c81aed65f1c7308f8001/pyeldriver-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdaf8b07270ce47aed3c5b89ac700b0993a97195e8dc69e49ce029348d1ef434",
        "md5": "2300212cca4a2f94aacf76a84254bc91",
        "sha256": "a1f0131a895451d1140ee677af17a6f069e99c08612630ea33316bd90ddce23d"
      },
      "downloads": -1,
      "filename": "pyeldriver-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2300212cca4a2f94aacf76a84254bc91",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 6337,
      "upload_time": "2022-09-02T07:44:32",
      "upload_time_iso_8601": "2022-09-02T07:44:32.611931Z",
      "url": "https://files.pythonhosted.org/packages/cd/af/8b07270ce47aed3c5b89ac700b0993a97195e8dc69e49ce029348d1ef434/pyeldriver-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4290b1400201386309a43c9b85820f4577248827f3a4c81aed65f1c7308f8001",
        "md5": "69f7fe2d8dad4e4096527afea3e9f6bb",
        "sha256": "254d223c5c472c3717d82c6860364c6a76885394cdbd649aaccece221ae9d56f"
      },
      "downloads": -1,
      "filename": "pyeldriver-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "69f7fe2d8dad4e4096527afea3e9f6bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 6393,
      "upload_time": "2022-09-02T07:44:34",
      "upload_time_iso_8601": "2022-09-02T07:44:34.562454Z",
      "url": "https://files.pythonhosted.org/packages/42/90/b1400201386309a43c9b85820f4577248827f3a4c81aed65f1c7308f8001/pyeldriver-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}