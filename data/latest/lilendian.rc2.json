{
  "info": {
    "author": "phx",
    "author_email": "emai@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "![lil endian](https://raw.githubusercontent.com/phx/lilendian/master/lilendian.png)\n\n# lil endian\n\nThis program is comptaible with both Python 2 and 3.\n\nIt simply returns escaped shell code in Little Endian format for whatever memory address is submitted as the first argument.\n\nIt's smart enough to distinguish between addresses with an `0x` prefix and accounts for that.\n\nIf the address is only in the 64-bit range, you will only receive the 64-bit output.\n\nIf the address can fit in the x86_64 ranges, you will receive both 32 and 64-bit output.\n\n## Install for python3 via PyPI:\n\n`pip3 install lilendian`\n\n## Install for python2 via setup.py:\n\n`python setup.py install`\n\n## Run in place:\n\n`./lilendian [single memory address]`\n\n### Examples\n\n```\n$ ./lilendian deadbeef\n\\xef\\xbe\\xad\\xde\n\\xef\\xbe\\xad\\xde\\x00\\x00\\x00\\x00\n\n$ ./lilendian 0xdeadbeef\n\\xef\\xbe\\xad\\xde\n\\xef\\xbe\\xad\\xde\\x00\\x00\\x00\\x00\n\n$ ./lilendian 0x00007fffffffd980\n\\x80\\xd9\\xff\\xff\\xff\\x7f\\x00\\x00\n```\n\n### Shell script example snippet:\n\nLet's say you wanted to get a piece of 64-bit shellcode for `0xdeadbeef + 0xbadcafe + 0xcafebabe + 0xabadbabe`.\n\n```sh\nfor addr in {0xdeadbeef,0xbadcafe,0xcafebabe,0xabadbabe}; do\n  lilendian $addr | tail -1\ndone | tr -d \"\\n\"; echo\n\nOutput:\n\\xef\\xbe\\xad\\xde\\x00\\x00\\x00\\x00\\xfe\\xca\\xad\\x0b\\x00\\x00\\x00\\x00\\xbe\\xba\\xfe\\xca\\x00\\x00\\x00\\x00\\xbe\\xba\\xad\\xab\\x00\\x00\\x00\\x00  \n```\n\nCopy and paste that guy straight into your payload.\n\n### Calling from within `gdb`:\n\n```\n(gdb) ! lilendian 0xdeadbeef\n\\xef\\xbe\\xad\\xde\n\\xef\\xbe\\xad\\xde\\x00\\x00\\x00\\x00\n```\n\n### Future:\n\nI might tweak it in the future to take multiple memory addresses, but as of right now, it only outputs a single memory address.\n\nI have kept it short and simple to be easily scriptable, so I'll leave the rest up to you.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phx/lilendian",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lilendian",
    "package_url": "https://pypi.org/project/lilendian/",
    "platform": "",
    "project_url": "https://pypi.org/project/lilendian/",
    "project_urls": {
      "Homepage": "https://github.com/phx/lilendian"
    },
    "release_url": "https://pypi.org/project/lilendian/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small program that simply returns escaped shell code in Little Endian format for whatever memory address you enter as the first argument.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10570032,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf2ff5cc7bb549758046ba02927cda7d24213b4070717dbd0d65af6ce7605ba8",
          "md5": "ace7ef0034f299b1e81a3d4d9a2a7f75",
          "sha256": "901662f41d789a0fde6e894d3d951fdb8abed5f3477043402c22d54b038bc7ec"
        },
        "downloads": -1,
        "filename": "lilendian-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ace7ef0034f299b1e81a3d4d9a2a7f75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3343,
        "upload_time": "2021-06-06T13:44:09",
        "upload_time_iso_8601": "2021-06-06T13:44:09.370191Z",
        "url": "https://files.pythonhosted.org/packages/bf/2f/f5cc7bb549758046ba02927cda7d24213b4070717dbd0d65af6ce7605ba8/lilendian-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98d624e4010a3fb8e9ccb3d4d14de1be033c0e90292f1238c62bf8ee887dbf0d",
          "md5": "ba989f705963cc41cbf6d938dcfd114d",
          "sha256": "c35812e3d8c4fe0243027ad53b8deb606851e6f3b584d53df64e144c9b844da0"
        },
        "downloads": -1,
        "filename": "lilendian-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba989f705963cc41cbf6d938dcfd114d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3328,
        "upload_time": "2021-06-06T14:00:19",
        "upload_time_iso_8601": "2021-06-06T14:00:19.078613Z",
        "url": "https://files.pythonhosted.org/packages/98/d6/24e4010a3fb8e9ccb3d4d14de1be033c0e90292f1238c62bf8ee887dbf0d/lilendian-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98d624e4010a3fb8e9ccb3d4d14de1be033c0e90292f1238c62bf8ee887dbf0d",
        "md5": "ba989f705963cc41cbf6d938dcfd114d",
        "sha256": "c35812e3d8c4fe0243027ad53b8deb606851e6f3b584d53df64e144c9b844da0"
      },
      "downloads": -1,
      "filename": "lilendian-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba989f705963cc41cbf6d938dcfd114d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3328,
      "upload_time": "2021-06-06T14:00:19",
      "upload_time_iso_8601": "2021-06-06T14:00:19.078613Z",
      "url": "https://files.pythonhosted.org/packages/98/d6/24e4010a3fb8e9ccb3d4d14de1be033c0e90292f1238c62bf8ee887dbf0d/lilendian-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}