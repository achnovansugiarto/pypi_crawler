{
  "info": {
    "author": "The github-release-retry Project Authors",
    "author_email": "android-graphics-tools-team@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# github-release-retry\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n\n`github-release-retry2` is a tool for creating GitHub Releases and uploading\nassets **reliably**. It differs from other tools because it uploads assets\nreliably by verifying that the asset exists, and retries\n(deleting partial assets) if not.\n\nThis is not an officially supported Google product.\nThis is a fork from the original github-release-retry with advanced patches\napplied for use in scancode-toolkit release scripts.\n\n## Install\n\nRequires Python 3.6+.\n\nTo ensure you use the `pip` module associated with your\npreferred Python 3.6+ binary:\n\n```bash\npython3 -m pip install --user github-release-retry\n# where `python3` is your preferred Python 3.6+ binary.\n# Omit `--user` to install for all users.\n```\n\nOr just:\n\n```bash\npip3 install --user github-release-retry\n# where `pip3` is your version of pip for Python 3.6+.\n# Omit `--user` to install for all users.\n```\n\n## Usage\n\nIf your [Python user scripts directory](https://www.python.org/dev/peps/pep-0370/)\nis not on your `PATH`,\nyou can use:\n\n```bash\npython3 -m github_release_retry.github_release_retry\n# where `python3` is your preferred Python 3.6+ binary.\n```\n\nOtherwise:\n\n```bash\n$ github-release-retry -h\nusage: github-release-retry [-h] --user USER --repo REPO --tag_name TAG_NAME\n                            [--target_commitish TARGET_COMMITISH]\n                            [--release_name RELEASE_NAME]\n                            (--body_string BODY_STRING | --body_file BODY_FILE)\n                            [--draft] [--prerelease]\n                            [--github_api_url GITHUB_API_URL]\n                            [--retry_limit RETRY_LIMIT]\n                            [files [files ...]]\n\nCreates a GitHub release (if it does not already exist) and uploads files to the release.\nPlease set the GITHUB_TOKEN environment variable.\nEXAMPLE:\ngithub-release-retry \\\n  --user paul \\\n  --repo hello-world \\\n  --tag_name v1.0 \\\n  --target_commitish 448301eb \\\n  --body_string \"My first release.\" \\\n  hello-world.zip RELEASE_NOTES.txt\n\npositional arguments:\n  files                 The files to upload to the release. (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --user USER           Required: The GitHub username or organization name in\n                        which the repo resides. (default: None)\n  --repo REPO           Required: The GitHub repo name in which to make the\n                        release. (default: None)\n  --tag_name TAG_NAME   Required: The name of the tag to create or use.\n                        (default: None)\n  --target_commitish TARGET_COMMITISH\n                        The commit-ish value where the tag will be created.\n                        Unused if the tag already exists. (default: None)\n  --release_name RELEASE_NAME\n                        The name of the release. Leave unset to use the\n                        tag_name (recommended). (default: None)\n  --body_string BODY_STRING\n                        Required (or use --body_file): Text describing the\n                        release. Ignored if the release already exists.\n                        (default: None)\n  --body_file BODY_FILE\n                        Required (or use --body_string): Text describing the\n                        release, which will be read from BODY_FILE. Ignored if\n                        the release already exists. (default: None)\n  --draft               Creates a draft release, which means it is\n                        unpublished. (default: False)\n  --prerelease          Creates a prerelease release, which means it will be\n                        marked as such. (default: False)\n  --github_api_url GITHUB_API_URL\n                        The GitHub API URL without a trailing slash. (default:\n                        https://api.github.com)\n  --retry_limit RETRY_LIMIT\n                        The number of times to retry creating/getting the\n                        release and/or uploading each file. (default: 10)\n```\n\n## Development\n\n> Optional: if you have just done `git pull`\nand `Pipfile.lock` was updated,\nyou can delete `.venv/` to start from a fresh virtual environment.\n\n> On Windows, you can use the Git Bash shell, or adapt the commands (including those inside `dev_shell.sh.template`) for the Windows command prompt.\n\nClone this repo and change to the directory that contains this README file. Execute `./dev_shell.sh.template`. If the default settings don't work, make a copy of the file called `dev_shell.sh` and modify according to the comments before executing. `pip` must be installed for the version of Python you wish to use. Note that you can do e.g. `export PYTHON=python3` first to set your preferred Python binary.\nWe currently target Python 3.6+.\n\n> Pip for Python 3.6 may be broken on certain Debian distributions.\n> You can just use the newer Python 3.7+ version provided by your\n> distribution.\n> Alternatively, see \"Installing Python\" below if you want to use Python 3.6.\n\nThe script generates a Python virtual environment (located at `.venv/`) with all dependencies installed.\nActivate the Python virtual environment via:\n\n* `source .venv/bin/activate` (on Linux)\n* `source .venv/Scripts/activate` (on Windows with the Git Bash shell)\n* `.venv/Scripts/activate.bat` (on Windows with cmd)\n\n\n### Presubmit checks\n\n* Execute `./check_all.sh` to run various presubmit checks, linters, etc.\n* Execute `./fix_all.sh` to automatically fix certain issues, such as formatting.\n\n\n### PyCharm\n\nUse PyCharm to open the directory containing this README file.\nIt should pick up the Python virtual environment\n(at `.venv/`) automatically\nfor both the code\nand when you open a `Terminal` or `Python Console` tab.\n\nInstall and configure plugins:\n\n* File Watchers (may already be installed)\n  * The watcher task should already be under version control.\n* Mypy: the built-in PyCharm type checking uses Mypy behind-the-scenes, but this plugin enhances it by using the latest version and allowing the use of stricter settings, matching the settings used by the `./check_all.sh` script.\n\nAdd `whitelist.dic` as a custom dictionary (search for \"Spelling\" in Actions). Do not add words via PyCharm's \"Quick Fixes\" feature, as the word will only be added to your personal dictionary. Instead, manually add the word to `whitelist.dic`.\n\n## [Coding conventions](docs/conventions.md)\n\n## Terminal\n\nThe `Terminal` tab in PyCharm is useful and will use the project's Python virtual environment.\n\n## Installing Python\n\nTo manually install Python on your Linux distribution, you can use `pyenv`.\n\nhttps://github.com/pyenv/pyenv#basic-github-checkout\n\nIn summary:\n\n* Install the required packages recommended [here](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\n\n* Then:\n\n```sh\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\n# Add the following two lines to your ~/.bashrc file.\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\n\n# In a new terminal:\neval \"$(pyenv init -)\"\npyenv install 3.6.9\npyenv global 3.6.9\n\n# Now execute the development shell script, as usual.\nexport PYTHON=\"python\"\n./dev_shell.sh.template\n```\n\nYou can reactivate the virtual environment later\nusing `source .venv/bin/activate`,\nwithout having to re-execute the above `pyenv` commands.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pombredanne/github-release-retry",
    "keywords": "GitHub Release Releases reliable retry upload assets",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "github-release-retry2",
    "package_url": "https://pypi.org/project/github-release-retry2/",
    "platform": "",
    "project_url": "https://pypi.org/project/github-release-retry2/",
    "project_urls": {
      "Documentation": "https://github.com/google/github-release-retry",
      "Homepage": "https://github.com/pombredanne/github-release-retry",
      "Source": "https://github.com/google/github-release-retry"
    },
    "release_url": "https://pypi.org/project/github-release-retry2/1.1.0/",
    "requires_dist": [
      "dataclasses-json",
      "requests",
      "dataclasses ; python_version == \"3.6\""
    ],
    "requires_python": ">=3.6",
    "summary": "A tool for creating GitHub Releases and uploading assets reliably. Temp fork with patch for https://github.com/google/github-release-retry/pull/6",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9011394,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10551948cbae4f61963bd7f1563d13fc7210376cc771d1e560beeaf4dfcc2426",
          "md5": "ead1cfdaabfb1cbadb7dcd2202939e33",
          "sha256": "754c93b3b16dd63bfd1a2873387a6c5c2368c2d6df1bf4be46df28ff7e4c22a1"
        },
        "downloads": -1,
        "filename": "github_release_retry2-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ead1cfdaabfb1cbadb7dcd2202939e33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15861,
        "upload_time": "2020-12-29T22:13:49",
        "upload_time_iso_8601": "2020-12-29T22:13:49.040226Z",
        "url": "https://files.pythonhosted.org/packages/10/55/1948cbae4f61963bd7f1563d13fc7210376cc771d1e560beeaf4dfcc2426/github_release_retry2-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a4e3a4ba9ce096f414db0a606a11fda59cac3627ecf6cc2dbc4684ddfa35489",
          "md5": "6d34da0bdbdf30991d5662f4509151da",
          "sha256": "d4922d3c891f007fe878f6100ccf27307932078817f6c26569994640f0a93758"
        },
        "downloads": -1,
        "filename": "github-release-retry2-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d34da0bdbdf30991d5662f4509151da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10517,
        "upload_time": "2020-12-29T22:13:50",
        "upload_time_iso_8601": "2020-12-29T22:13:50.505231Z",
        "url": "https://files.pythonhosted.org/packages/1a/4e/3a4ba9ce096f414db0a606a11fda59cac3627ecf6cc2dbc4684ddfa35489/github-release-retry2-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10551948cbae4f61963bd7f1563d13fc7210376cc771d1e560beeaf4dfcc2426",
        "md5": "ead1cfdaabfb1cbadb7dcd2202939e33",
        "sha256": "754c93b3b16dd63bfd1a2873387a6c5c2368c2d6df1bf4be46df28ff7e4c22a1"
      },
      "downloads": -1,
      "filename": "github_release_retry2-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ead1cfdaabfb1cbadb7dcd2202939e33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 15861,
      "upload_time": "2020-12-29T22:13:49",
      "upload_time_iso_8601": "2020-12-29T22:13:49.040226Z",
      "url": "https://files.pythonhosted.org/packages/10/55/1948cbae4f61963bd7f1563d13fc7210376cc771d1e560beeaf4dfcc2426/github_release_retry2-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a4e3a4ba9ce096f414db0a606a11fda59cac3627ecf6cc2dbc4684ddfa35489",
        "md5": "6d34da0bdbdf30991d5662f4509151da",
        "sha256": "d4922d3c891f007fe878f6100ccf27307932078817f6c26569994640f0a93758"
      },
      "downloads": -1,
      "filename": "github-release-retry2-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6d34da0bdbdf30991d5662f4509151da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10517,
      "upload_time": "2020-12-29T22:13:50",
      "upload_time_iso_8601": "2020-12-29T22:13:50.505231Z",
      "url": "https://files.pythonhosted.org/packages/1a/4e/3a4ba9ce096f414db0a606a11fda59cac3627ecf6cc2dbc4684ddfa35489/github-release-retry2-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}