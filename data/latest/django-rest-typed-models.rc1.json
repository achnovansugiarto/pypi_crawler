{
  "info": {
    "author": "Krystof Beuermann",
    "author_email": "krystof+django@blackbox.ms",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "[![image](https://travis-ci.org/apirobot/django-rest-typed-models.svg?branch=master)](https://travis-ci.org/apirobot/django-rest-typed-models)\n\n[![image](https://codecov.io/gh/apirobot/django-rest-typed-models/branch/master/graph/badge.svg)](https://codecov.io/gh/apirobot/django-rest-typed-models)\n\n[![image](https://badge.fury.io/py/django-rest-typed-models.svg)](https://badge.fury.io/py/django-rest-typed-models)\n\n  --------------------------\n  Django REST Typed models\n  --------------------------\n\nBased on the great work django-rest-typed-models by denisorehovsky\n\nTyped model serializers for Django REST Framework.\n\nOverview\n========\n\n`django-rest-typed-models` allows you to easily define serializers for\nyour inherited models that you have created using `django-typed-models`\nlibrary.\n\nInstallation\n============\n\nInstall using `pip`:\n\n``` {.bash}\n$ poetry add django-rest-typed-models\n```\n\nUsage\n=====\n\nDefine your typed models:\n\n``` {.python}\n# models.py\nfrom django.db import models\nfrom typedmodels.models import TypedModel\n\nclass Project(TypedModel):\n    topic = models.CharField(max_length=30)\n\n\nclass ArtProject(Project):\n    artist = models.CharField(max_length=30)\n\n\nclass ResearchProject(Project):\n    supervisor = models.CharField(max_length=30)\n```\n\nDefine serializers for each typed model the way you did it when you used\n`django-rest-framework`:\n\n``` {.python}\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import Project, ArtProject, ResearchProject\n\n\nclass ProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = ('topic', )\n\n\nclass ArtProjectSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = ArtProject\n        fields = ('topic', 'artist', 'url')\n        extra_kwargs = {\n            'url': {'view_name': 'project-detail', 'lookup_field': 'pk'},\n        }\n\n\nclass ResearchProjectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ResearchProject\n        fields = ('topic', 'supervisor')\n```\n\nNote that if you extend `HyperlinkedModelSerializer` instead of\n`ModelSerializer` you need to define `extra_kwargs` to direct the URL to\nthe appropriate view for your typed model serializer.\n\nThen you have to create a typed model serializer that serves as a mapper\nbetween models and serializers which you have defined above:\n\n``` {.python}\n# serializers.py\nfrom rest_typed_models.serializers import TypedModelSerializer\n\n\nclass ProjectTypedModelSerializer(TypedModelSerializer):\n    model_serializer_mapping = {\n        Project: ProjectSerializer,\n        ArtProject: ArtProjectSerializer,\n        ResearchProject: ResearchProjectSerializer\n    }\n```\n\nCreate viewset with serializer\\_class equals to your polymorphic\nserializer:\n\n``` {.python}\n# views.py\nfrom rest_framework import viewsets\nfrom .models import Project\nfrom .serializers import ProjectTypedModelSerializer\n\n\nclass ProjectViewSet(viewsets.ModelViewSet):\n    queryset = Project.objects.all()\n    serializer_class = ProjectTypedModelSerializer\n```\n\nTest it:\n\n``` {.bash}\n$ http GET \"http://localhost:8000/projects/\"\n```\n\n``` {.http}\nHTTP/1.0 200 OK\nContent-Length: 227\nContent-Type: application/json\n\n[\n    {\n        \"resourcetype\": \"Project\",\n        \"topic\": \"John's gathering\"\n    },\n    {\n        \"artist\": \"T. Turner\",\n        \"resourcetype\": \"ArtProject\",\n        \"topic\": \"Sculpting with Tim\",\n        \"url\": \"http://localhost:8000/projects/2/\"\n    },\n    {\n        \"resourcetype\": \"ResearchProject\",\n        \"supervisor\": \"Dr. Winter\",\n        \"topic\": \"Swallow Aerodynamics\"\n    }\n]\n```\n\n``` {.bash}\n$ http POST \"http://localhost:8000/projects/\" resourcetype=\"ArtProject\" topic=\"Guernica\" artist=\"Picasso\"\n```\n\n``` {.http}\nHTTP/1.0 201 Created\nContent-Length: 67\nContent-Type: application/json\n\n{\n    \"artist\": \"Picasso\",\n    \"resourcetype\": \"ArtProject\",\n    \"topic\": \"Guernica\",\n    \"url\": \"http://localhost:8000/projects/4/\"\n}\n```\n\nCustomize resource type\n=======================\n\nAs you can see from the example above, in order to specify the type of\nyour typed model, you need to send a request with resource type\nfield. The value of resource type should be the name of the model.\n\nIf you want to change the resource type field name from `resourcetype`\nto something else, you should override `resource_type_field_name`\nattribute:\n\n``` {.python}\nclass ProjectTypedModelSerializer(TypedModelSerializer):\n    resource_type_field_name = 'projecttype'\n    ...\n```\n\nIf you want to change the behavior of resource type, you should override\n`to_resource_type` method:\n\n``` {.python}\nclass ProjectTypedModelSerializer(TypedModelSerializer):\n    ...\n\n    def to_resource_type(self, model_or_instance):\n        return model_or_instance._meta.object_name.lower()\n```\n\nNow, the request for creating new object will look like this:\n\n``` {.bash}\n$ http POST \"http://localhost:8000/projects/\" projecttype=\"artproject\" topic=\"Guernica\" artist=\"Picasso\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-typed-models",
    "package_url": "https://pypi.org/project/django-rest-typed-models/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-rest-typed-models/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-rest-typed-models/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.10,<4.0",
    "summary": "Typed model serializers for Django REST Framework.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15816900,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27a4ed5b5160743f4a22399421a0e323c245bfc5db3beefd6b47e7c4eab4d380",
          "md5": "2d84bbfafa000f398b2ed5a0b11a5bd0",
          "sha256": "3ba5b7e078e35d372eaf773dfc529c90ac65916fd1869e7d0cafcf9f2acbf952"
        },
        "downloads": -1,
        "filename": "django_rest_typed_models-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d84bbfafa000f398b2ed5a0b11a5bd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 5598,
        "upload_time": "2022-11-18T16:16:36",
        "upload_time_iso_8601": "2022-11-18T16:16:36.714933Z",
        "url": "https://files.pythonhosted.org/packages/27/a4/ed5b5160743f4a22399421a0e323c245bfc5db3beefd6b47e7c4eab4d380/django_rest_typed_models-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f821b02983263097a3db3c9d691f5f9190e5f37a52190586797be0bce34053",
          "md5": "66f097c0f7acfebdee430d7fce0a1ddf",
          "sha256": "988b8da888f7c2c51f13b8a9699ec99e5e877b927cbd3aeeb70b6aa7bc44ae41"
        },
        "downloads": -1,
        "filename": "django_rest_typed_models-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66f097c0f7acfebdee430d7fce0a1ddf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 5354,
        "upload_time": "2022-11-18T16:16:38",
        "upload_time_iso_8601": "2022-11-18T16:16:38.342314Z",
        "url": "https://files.pythonhosted.org/packages/31/f8/21b02983263097a3db3c9d691f5f9190e5f37a52190586797be0bce34053/django_rest_typed_models-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27a4ed5b5160743f4a22399421a0e323c245bfc5db3beefd6b47e7c4eab4d380",
        "md5": "2d84bbfafa000f398b2ed5a0b11a5bd0",
        "sha256": "3ba5b7e078e35d372eaf773dfc529c90ac65916fd1869e7d0cafcf9f2acbf952"
      },
      "downloads": -1,
      "filename": "django_rest_typed_models-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2d84bbfafa000f398b2ed5a0b11a5bd0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 5598,
      "upload_time": "2022-11-18T16:16:36",
      "upload_time_iso_8601": "2022-11-18T16:16:36.714933Z",
      "url": "https://files.pythonhosted.org/packages/27/a4/ed5b5160743f4a22399421a0e323c245bfc5db3beefd6b47e7c4eab4d380/django_rest_typed_models-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31f821b02983263097a3db3c9d691f5f9190e5f37a52190586797be0bce34053",
        "md5": "66f097c0f7acfebdee430d7fce0a1ddf",
        "sha256": "988b8da888f7c2c51f13b8a9699ec99e5e877b927cbd3aeeb70b6aa7bc44ae41"
      },
      "downloads": -1,
      "filename": "django_rest_typed_models-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "66f097c0f7acfebdee430d7fce0a1ddf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 5354,
      "upload_time": "2022-11-18T16:16:38",
      "upload_time_iso_8601": "2022-11-18T16:16:38.342314Z",
      "url": "https://files.pythonhosted.org/packages/31/f8/21b02983263097a3db3c9d691f5f9190e5f37a52190586797be0bce34053/django_rest_typed_models-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}