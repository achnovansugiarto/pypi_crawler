{
  "info": {
    "author": "Aryan Kapoor",
    "author_email": "pro.akapoor@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "django-log-request-id\n=====================\n\n**Django/Daphne middleware and log filter to attach a unique ID to every log message generated as part of a request using context vars.**\n\n**Author:** Aryan Kapoor\n\n\n[![Build Status](https://travis-ci.org/dabapps/django-log-request-id.png?branch=master)](https://travis-ci.org/dabapps/django-log-request-id)\n\nExample\n-------\n\n```\nDEBUG [33031a43fc244539895fef70c433337e] myproject.apps.myapp.views: Doing something in a view\nDEBUG [33031a43fc244539895fef70c433337e] myproject.apps.myapp.forms: The form validated successfully!\nDEBUG [33031a43fc244539895fef70c433337e] myproject.apps.myapp.models: Doing some model magic\nDEBUG [33031a43fc244539895fef70c433337e] myproject.apps.myapp.views: Redirecting to form success page\n```\n\nWhy?\n----\n\nSo you can grep (or otherwise search) a set of logs for a high-traffic application to isolate all messages associated with a single request.\n\nHow?\n----\n\n**The request ID is stored in a thread local**. Use of thread locals is not generally considered best practice for Django applications, but seems to be the only viable approach in this case. Pull requests with better ideas are welcome.\n\nAny other neat features?\n------------------------\n\nIn some cases, components further up the HTTP stack such as load balancers or proxies may generate request IDs. For example, [Heroku's http-request-id feature](https://devcenter.heroku.com/articles/http-request-id) adds a header to the request called `X_REQUEST_ID`. If such a header is present (and configured in your settings, see below), this ID will be used (instead of generating one). You can configure your settings to use a generated ID or return a default request_id when you expect the ID in the request header but it is not available.\n\nThe ID also gets added to the `HttpRequest` object that is handed to your views, in case you need to use it in your application.\n\nIf you need to pass on the ID to other services in a multi-tier architecture,\nthe log_request_id.session module contains a wrapper for requests.Session which\nwill include the ID in outgoing requests, using the same header as configured in\nyour settings.\n\nInstallation and usage\n----------------------\n\nFirst, install the package: `pip install django-log-request-id`\n\nAdd the middleware to your `MIDDLEWARE_CLASSES` setting. It should be at the very top.\n\n```python\nMIDDLEWARE_CLASSES = (\n    'log_request_id.middleware.RequestIDMiddleware',\n    # ... other middleware goes here\n)\n```\n\nAdd the `log_request_id.filters.RequestIDFilter` to your `LOGGING` setting. You'll also need to update your `formatters` to include a format with the new `request_id` variable, add a handler to output the messages (eg to the console), and finally attach the handler to your application's logger.\n\nIf none of the above made sense, study [Django's logging documentation](https://docs.djangoproject.com/en/dev/topics/logging/).\n\nAn example `LOGGING` setting is below:\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'request_id': {\n            '()': 'log_request_id.filters.RequestIDFilter'\n        }\n    },\n    'formatters': {\n        'standard': {\n            'format': '%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s: %(message)s'\n        },\n    },\n    'handlers': {\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'filters': ['request_id'],\n            'formatter': 'standard',\n        },\n    },\n    'loggers': {\n        'myapp': {\n            'handlers': ['console'],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n    }\n}\n```\n\nYou can then output log messages as usual:\n\n```python\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.debug(\"A wild log message appears!\")\n```\n\nIf you wish to use an ID provided in a request header, add the following setting:\n\n```python\nLOG_REQUEST_ID_HEADER = \"HTTP_X_REQUEST_ID\"\n```\n\nSetting this value as above will enable requests having the header `X-Request-Id` to be logged with the header value supplied.\n\nNote that this value must conform to the format for [Django META keys](https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.META), otherwise it will be ignored.\n\nIf you wish to fall back to a generated ID when you have the `LOG_REQUEST_ID_HEADER` set but it was not provided in the request, add the following setting:\n\n```python\nGENERATE_REQUEST_ID_IF_NOT_IN_HEADER = True\n```\n\nIf you wish to include the request id in the response headers, add the following setting, where `RESPONSE_HEADER_NAME` is the name of the custom header you are going to use:\n\n```python\nREQUEST_ID_RESPONSE_HEADER = \"RESPONSE_HEADER_NAME\"\n```\n\nIf you wish to change the default `request_id` in the log output, the the following settings, where `none` (default) is the value you want to be the default value in case it's missing.\n\n```python\nNO_REQUEST_ID = \"none\"\n```\n\nLogging all requests\n--------------------\n\nThe `RequestIDMiddleware` also has the ability to log all requests received by the application, including some useful information such as the user ID (if present). To enable this feature, add `LOG_REQUESTS = True` to your settings. The messages are sent to the `log_request_id.middleware` logger at `INFO` level.\n\nLogging other user attributes\n--------------------\n\nIf you would like to log another user attribute instead of user ID, this can be specified with the `LOG_USER_ATTRIBUTE` setting. Eg. to log the username, use: `LOG_USER_ATTRIBUTE = \"username\"`\n\nPassing on the ID\n-----------------\n\n```python\nfrom log_request_id.session import Session\nsession = Session()\nsession.get('http://myservice.myapp.com/')\n```\n\nYou can customise the header used in the outgoing request with the `OUTGOING_REQUEST_ID_HEADER` setting.\n\n\nLicense\n-------\n\nCopyright Â© 2012-2018, DabApps.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without \nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this \nlist of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this \nlist of conditions and the following disclaimer in the documentation and/or \nother materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE \nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER \nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, \nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n## Code of conduct\n\nFor guidelines regarding the code of conduct when contributing to this repository please review [https://www.dabapps.com/open-source/code-of-conduct/](https://www.dabapps.com/open-source/code-of-conduct/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "context-vars-log-request-id",
    "package_url": "https://pypi.org/project/context-vars-log-request-id/",
    "platform": "",
    "project_url": "https://pypi.org/project/context-vars-log-request-id/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/context-vars-log-request-id/1.0.1/",
    "requires_dist": [
      "django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Django/Daphne middleware and log filter to attach a unique ID to every log message generated as part of a request using contextvars",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11024488,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1d6ed07a6c08588f4e969a47f20b83779db5c76ce4a3723530deadbb120f65c",
          "md5": "2a0fdb56574126789e17abb39d6ff01a",
          "sha256": "b1945cccfffb05d67d0fe647720d015dd417c06242e4d937aea11924d24c3638"
        },
        "downloads": -1,
        "filename": "context_vars_log_request_id-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a0fdb56574126789e17abb39d6ff01a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11581,
        "upload_time": "2021-07-27T12:32:24",
        "upload_time_iso_8601": "2021-07-27T12:32:24.974782Z",
        "url": "https://files.pythonhosted.org/packages/f1/d6/ed07a6c08588f4e969a47f20b83779db5c76ce4a3723530deadbb120f65c/context_vars_log_request_id-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f655b6833f69078ce450a5397c0b40b72f4fdb92e540caf164a31a6d364745f",
          "md5": "e4339cd40607fa06cdbdd42b4084a2fc",
          "sha256": "60c1230ed9edf154d63a508bd3e6d4a24a13c0d0b95a421c75ffc2a6470a082a"
        },
        "downloads": -1,
        "filename": "context-vars-log-request-id-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4339cd40607fa06cdbdd42b4084a2fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11860,
        "upload_time": "2021-07-27T12:32:26",
        "upload_time_iso_8601": "2021-07-27T12:32:26.827012Z",
        "url": "https://files.pythonhosted.org/packages/6f/65/5b6833f69078ce450a5397c0b40b72f4fdb92e540caf164a31a6d364745f/context-vars-log-request-id-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1551da37ff44f4a704a1f753312ac0dc66ea6baad347625764eed17f35c766e4",
          "md5": "87248a5c4b8c9e4e557b5f0aab2c0c17",
          "sha256": "fbf48191838e1cfe15377edec6819bdcdb484f09ed7f1bfe2205c3916ececd39"
        },
        "downloads": -1,
        "filename": "context_vars_log_request_id-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87248a5c4b8c9e4e557b5f0aab2c0c17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11354,
        "upload_time": "2021-07-28T06:44:22",
        "upload_time_iso_8601": "2021-07-28T06:44:22.324719Z",
        "url": "https://files.pythonhosted.org/packages/15/51/da37ff44f4a704a1f753312ac0dc66ea6baad347625764eed17f35c766e4/context_vars_log_request_id-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2a2c789277cdfe52ccaae702b0e32d2b5cc416772d851496300824fd1a712a",
          "md5": "60a582e0c51384bcd8d31dc2af351630",
          "sha256": "7898e4110a025bdca8b89dc91903596f5b655fb7980b7fe4b3fd99ee61384124"
        },
        "downloads": -1,
        "filename": "context-vars-log-request-id-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60a582e0c51384bcd8d31dc2af351630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8968,
        "upload_time": "2021-07-28T06:44:24",
        "upload_time_iso_8601": "2021-07-28T06:44:24.363744Z",
        "url": "https://files.pythonhosted.org/packages/4a/2a/2c789277cdfe52ccaae702b0e32d2b5cc416772d851496300824fd1a712a/context-vars-log-request-id-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1551da37ff44f4a704a1f753312ac0dc66ea6baad347625764eed17f35c766e4",
        "md5": "87248a5c4b8c9e4e557b5f0aab2c0c17",
        "sha256": "fbf48191838e1cfe15377edec6819bdcdb484f09ed7f1bfe2205c3916ececd39"
      },
      "downloads": -1,
      "filename": "context_vars_log_request_id-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87248a5c4b8c9e4e557b5f0aab2c0c17",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11354,
      "upload_time": "2021-07-28T06:44:22",
      "upload_time_iso_8601": "2021-07-28T06:44:22.324719Z",
      "url": "https://files.pythonhosted.org/packages/15/51/da37ff44f4a704a1f753312ac0dc66ea6baad347625764eed17f35c766e4/context_vars_log_request_id-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a2a2c789277cdfe52ccaae702b0e32d2b5cc416772d851496300824fd1a712a",
        "md5": "60a582e0c51384bcd8d31dc2af351630",
        "sha256": "7898e4110a025bdca8b89dc91903596f5b655fb7980b7fe4b3fd99ee61384124"
      },
      "downloads": -1,
      "filename": "context-vars-log-request-id-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "60a582e0c51384bcd8d31dc2af351630",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8968,
      "upload_time": "2021-07-28T06:44:24",
      "upload_time_iso_8601": "2021-07-28T06:44:24.363744Z",
      "url": "https://files.pythonhosted.org/packages/4a/2a/2c789277cdfe52ccaae702b0e32d2b5cc416772d851496300824fd1a712a/context-vars-log-request-id-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}