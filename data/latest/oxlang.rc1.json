{
  "info": {
    "author": "Ong Yong Xin",
    "author_email": "ongyongxin2020+github@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ox: the ox programming language 🐂\n\nox is a intepreted, dynamic programming language inspired by [Cub] (no relation to the [2011] one.)\nIts syntax borrows heavily from Cub itself and [golang].\n\nSince ox keeps most of Cub's semantics, existing Cub code should run in ox without any changes (backward-compatible).\n\nox is not meant to be a production language: rather as an experiment in implementing a programming language entirely in Python.\n\n## Why the name ox?\n\nBecause the zodiac animal this year is Ox, and to go along with the animal-themed names.\n\nWhat it **can** do:\n\n* Full Cub syntax support (except for `do` and `repeat while` loops).\n* Import modules (you can import math functions using `import math`)\n\nWhat it **cannot** do:\n\n* Recursive functions (because of Python stack limitations).\n  Maybe it would be a better idea to compile Ox code down into [Scorpion] bytecode and run it in an intepreter instead.\n* Struct methods (for now).\n\n## Todo\n\n- [x] finish full parser (rewrote using sly)\n- [x] code working intepreter \n- [x] add module system (puts all functions in global context though)\n- [ ] add ability to interface Python modules\n\n## Examples\n\n```swift\n// ox is kind of like untyped Swift (which is also what Cub was aiming for).\n// Currently, these primitive types are supported:\n\n// Strings (to have double quotes in a string, use single quotes, and vice versa.)\n// Of course, UTF-8 is supported.\nmy_var = \"Hello World!\"\n\n// Numbers are all floating-point as in Cub.\n// Like Python, variables do not have a fixed type, and can be reassigned.\n// (The '.0' can be omitted.)\nmy_var = 42\n\n// Booleans can either be true or false.\n// Comparisons will return a boolean.\na_bool = true\nis_the_answer_to_life_and_everything = my_var >= 42\n\n// Arrays are analogous to lists.\n// To append, use '+='.\nan_array = [4, 2, 0]\nan_array += 1\n\n// Functions define an operation so you don't have to keep copying and pasting the same section of code.\nfunc pi() {\n  return 3.141592\n}\n\n// Structs are similar to C structs.\n// Members are defined inside its context.\nstruct Point {\n  x, y\n}\n\n// A struct method (shown below) accepts a instance of the struct, plus any other parameter.\n// The first arg should be named self, but you can name it something else.\nfunc Point:distance(self) {\n  return (self.x ^ 2) + (self.y ^ 2)\n}\n\n// Like Lua, static methods (on a uninitalised struct) use '.',\n// while instance methods (on a initalised struct) use ':'.\n// Static methods do not receive the 'self' parameter.\nfunc Point.new_square(length) {\n  return Point(length, length)\n}\n\npoint = Point(0, 0)\nsquare_point = Point.new_square(10)\n\n// Structs can inherit members and methods from other structs.\n// New members can be defined on top of the inherited struct's definition.\nstruct RelativePoint(Point) {\n  cx, cy,\n}\n\nfunc RelativePoint:rel_distance(self) {\n  return (abs(self.cx - self.x) ^ 2) + (abs(self.cy - self.y) ^ 2)\n}\n```\n\n[2011]: https://en.wikipedia.org/wiki/Ox_(programming_language)\n[Cub]: https://github.com/louisdh/cub\n[golang]: https://golang.org\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ongyx/ox",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oxlang",
    "package_url": "https://pypi.org/project/oxlang/",
    "platform": "",
    "project_url": "https://pypi.org/project/oxlang/",
    "project_urls": {
      "Homepage": "https://github.com/ongyx/ox"
    },
    "release_url": "https://pypi.org/project/oxlang/0.0.1a0/",
    "requires_dist": [
      "sly>=0.4",
      "pytest>=6.2.2 ; extra == \"test\""
    ],
    "requires_python": ">=3.6",
    "summary": "Python implementation of ox.",
    "version": "0.0.1a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10660810,
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e28564f3d323b4154b4dcccf5f2bbbd10a641139871f5fcafcbd88bcbdc0376",
          "md5": "a79b13cbd9c8ba1f7a451c7fd3ba1e5d",
          "sha256": "7fd03a6d666d769b880716716213730f9fd9188a64348d6bfd768f32f328d821"
        },
        "downloads": -1,
        "filename": "oxlang-0.0.1a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a79b13cbd9c8ba1f7a451c7fd3ba1e5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13858,
        "upload_time": "2021-06-16T08:30:20",
        "upload_time_iso_8601": "2021-06-16T08:30:20.558716Z",
        "url": "https://files.pythonhosted.org/packages/7e/28/564f3d323b4154b4dcccf5f2bbbd10a641139871f5fcafcbd88bcbdc0376/oxlang-0.0.1a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75340c404cf64070f31489cb751a0c6927f2814fa498808377c86a49d3ffefb6",
          "md5": "02d72c17ee019c016670425915e08bfd",
          "sha256": "342271ab491d61b1b4791dfabce79580049e2617316d7966b6629d2ee7ecf2cb"
        },
        "downloads": -1,
        "filename": "oxlang-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "02d72c17ee019c016670425915e08bfd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15674,
        "upload_time": "2021-06-16T08:30:23",
        "upload_time_iso_8601": "2021-06-16T08:30:23.252503Z",
        "url": "https://files.pythonhosted.org/packages/75/34/0c404cf64070f31489cb751a0c6927f2814fa498808377c86a49d3ffefb6/oxlang-0.0.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e28564f3d323b4154b4dcccf5f2bbbd10a641139871f5fcafcbd88bcbdc0376",
        "md5": "a79b13cbd9c8ba1f7a451c7fd3ba1e5d",
        "sha256": "7fd03a6d666d769b880716716213730f9fd9188a64348d6bfd768f32f328d821"
      },
      "downloads": -1,
      "filename": "oxlang-0.0.1a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a79b13cbd9c8ba1f7a451c7fd3ba1e5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13858,
      "upload_time": "2021-06-16T08:30:20",
      "upload_time_iso_8601": "2021-06-16T08:30:20.558716Z",
      "url": "https://files.pythonhosted.org/packages/7e/28/564f3d323b4154b4dcccf5f2bbbd10a641139871f5fcafcbd88bcbdc0376/oxlang-0.0.1a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75340c404cf64070f31489cb751a0c6927f2814fa498808377c86a49d3ffefb6",
        "md5": "02d72c17ee019c016670425915e08bfd",
        "sha256": "342271ab491d61b1b4791dfabce79580049e2617316d7966b6629d2ee7ecf2cb"
      },
      "downloads": -1,
      "filename": "oxlang-0.0.1a0.tar.gz",
      "has_sig": false,
      "md5_digest": "02d72c17ee019c016670425915e08bfd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15674,
      "upload_time": "2021-06-16T08:30:23",
      "upload_time_iso_8601": "2021-06-16T08:30:23.252503Z",
      "url": "https://files.pythonhosted.org/packages/75/34/0c404cf64070f31489cb751a0c6927f2814fa498808377c86a49d3ffefb6/oxlang-0.0.1a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}