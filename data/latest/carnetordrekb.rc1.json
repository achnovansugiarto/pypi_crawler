{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "```python\n#Nous allons faire un test pour bien vÃ©rifier que notre exchange marche bien\n#Et pour Ã©galement bien expliquer les rÃ¨gles de ce dernier\norder_book = OrderBook()\n\n# On crÃ©e des ordres limites pour donner Ã  notre marchÃ© une profondeur\n\nlimit_orders = [{'type' : 'limit', \n                   'side' : 'ask', \n                    'quantity' : 5, \n                    'price' : 101,\n                    'trade_id' : 100},\n                   {'type' : 'limit', \n                    'side' : 'ask', \n                    'quantity' : 5, \n                    'price' : 103,\n                    'trade_id' : 101},\n                   {'type' : 'limit', \n                    'side' : 'ask', \n                    'quantity' : 5, \n                    'price' : 101,\n                    'trade_id' : 102},\n                   {'type' : 'limit', \n                    'side' : 'ask', \n                    'quantity' : 5, \n                    'price' : 101,\n                    'trade_id' : 103},\n                   {'type' : 'limit', \n                    'side' : 'bid', \n                    'quantity' : 5, \n                    'price' : 99,\n                    'trade_id' : 100},\n                   {'type' : 'limit', \n                    'side' : 'bid', \n                    'quantity' : 5, \n                    'price' : 98,\n                    'trade_id' : 101},\n                   {'type' : 'limit', \n                    'side' : 'bid', \n                    'quantity' : 5, \n                    'price' : 99,\n                    'trade_id' : 102},\n                   {'type' : 'limit', \n                    'side' : 'bid', \n                    'quantity' : 5, \n                    'price' : 97,\n                    'trade_id' : 103},\n                   ]\n\n# On rajoute les ordres dans notre Orderbook\nfor order in limit_orders:\n    trades, order_id = order_book.process_order(order, False, False)\n\n# Le book courant peut Ãªtre assimiler Ã  un print\nprint(order_book)\n# Comme nous pouvons le voir Ã  ce moment nous avons notre order books avec les Bids, les asks et les Trades\n# Il n'y a aucun trade pour le moment et c'est fait exprÃ¨s quand nous avons spÃ©cifier les ordres \n# Ce sont tous des ordres limites et qui ne se croisent pas donc la rÃ©sultante et qu'aucun trade ne peut s'effectuer\n# Voyons Ã©galement ce pourquoi nous avons choisie la structure d'arbre Bicolore car nous avons une double classification\n# Pour les bids ils sont classer dans un premier temps par prix dÃ©croissant et puis par le timestamp de l'ordre au sein d'un mÃªme prix en ordre croissant\n# Pour les asks ils sont classer dans un premier temps par prix en ordre croissant et puis par le timestamp des ordres au sein d'un mÃªme prix en ordre croissant\n# Autrement le meilleur Ask celui qui va Ãªtre privilÃ©gier pour tous ordre, qui sera prioritaire est le Ask ayant le prix le plus faible et Ã©tant arrivÃ© le plus tÃ´t\n# Et le meilleur Bid est celui qui va Ãªtre privilÃ©gier pour tous ordre Ask arrivant, le Bid qui sera prioritaire est le Bid ayant le prix le plus Ã©levÃ© et Ã©tant arrivÃ© le plus tÃ´t\n# Et c'est exactement comme celÃ  que fonctionne un exchange\n\nprint(order_book.get_best_ask())\nprint(order_book.get_volume_at_price('bid', order_book.get_best_bid()))\nprint(order_book.get_best_bid())\nbids, asks, trades_done = order_book.get_all()\nprint(trades_done)\nprint(bids[0])\nprint(asks)\nprint(\"#########################\")\n# On soumet un limit order Bid qui Ã  un prix plus Ã©levÃ© que le meilleur Ask soit le Ask ayant le prix le plus faible \ncrossing_limit_order = {'type': 'limit',\n                        'side': 'bid',\n                        'quantity': 2,\n                        'price': 102,\n                        'trade_id': 109}\n\nprint(crossing_limit_order)\ntrades, order_in_book = order_book.process_order(crossing_limit_order, False, False)\nprint(\"Un Trade Prend Place car le Bid entrant croise le meilleur Ask\")\nprint(trades)\n#Or on voit qu'un trade Ã  bien eu lieu au prix du meilleur Ask soit 101 et que 2 quantitÃ© ont Ã©tÃ© Ã©changer\n#L'Ã©lÃ©ment intÃ©ressent Ã  noter ici est bien que nous avons uniquement le premier acheteur qui a partciper Ã  la transaction\n#Et c'est bien lÃ  la preuve que nous avons bien l'ordre d'arriver des ordres qui compte c'est le meilleur Ask arrivÃ© le plus tot qui a participer Ã  la transaction\nprint(order_book)\nbids, asks, trades_done = order_book.get_all()\nprint(trades_done[0]['prix'])\nprint(trades_done[0]['quantitÃ©'])\nprint(trades_done)\n#Et lÃ  nous voyons bien comment le carnet d'ordre s'est actualisÃ© en consÃ©quence en effet les quantitÃ©s du meilleur ordre Ask ont diminuer de 2 pour arriver Ã  3\nprint(\"###############\")\n# If a limit order bid croise le meilleur Ask mais est partiellement matchÃ©, du a un volume insuffissant Ã  ce prix le volume restant sera\n# placer dans le book comme un lim order Bid pour la quantitÃ© restant tous en respectant l'ordre toujours\nbig_crossing_limit_order = {'type': 'limit',\n                            'side': 'bid',\n                            'quantity': 50,\n                            'price': 102,\n                            'trade_id': 110}\nprint(big_crossing_limit_order)\ntrades, order_in_book = order_book.process_order(big_crossing_limit_order, False, False)\nprint(\"Un gros ordre bid limit croise le meilleur ask. Le volume restant est placer dans le book\")\nprint(trades)\nprint(order_book)\nprint(\"###########################\")\n\n# Market Order\n#Les ordres aux marchÃ© se focus plus sur la quantitÃ© quelque soit le prix \n# Les Market orders ont besoin uniquement de la spÃ©cification d'un cotÃ© (bid ou ask), une quantitÃ©, et leur trade id unique\nmarket_order = {'type': 'market',\n                'side': 'ask',\n                'quantity': 40,\n                'trade_id': 111}\ntrades, order_id = order_book.process_order(market_order, False, False)\nprint(\"#################\")\nprint(trades)\nprint(\"#############\")\nprint(\"un market order prend le volume spÃ©cifiÃ© de l'intÃ©rieur du book, quelque soit le prix\")\n#Les market orders consomme de la liquiditÃ© dans le marchÃ©\nprint(\"Un market ask pour 40 nous donne:\")\nprint(order_book)\nprint(\"###############\")\n\n#A noter ici que nous considÃ©rons ici une variation du Capital Ã  partir du moment ou l'ordre est envoyÃ© et pas au moment \n#Ou le trade a eu lieu c'est une simplification bien sur mais en soit elle peut Ãªtre justifiÃ© par le fait que par soucis \n#De simplication aucun trader ne pourras changer ou supprimer son ordre mais Ã  noter que chaque trader peut modifier voir mÃªme\n#Supprimer son ordre notre Classe OrderBook() peux gÃ©rer ce cas sans problÃ¨me tous en conservant l'ordre\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef mvt_avg(a, n=3):\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] / n\n\norder_book = OrderBook()\ndef generate_lim_orders(nb_orders, price_range_bid, price_range_ask, qte_range_ask, qte_range_bid):\n  limit_orders = []\n  trade_id_list = []\n  for i in range(nb_orders):\n    order_type = 'limit'\n    alea = np.random.randint(0,2)\n    if alea == 0:\n      side = 'ask'\n      quantity = np.random.randint(qte_range_ask[0], qte_range_ask[1]+1)\n      price = np.random.randint(price_range_ask[0], price_range_ask[1]+1)\n      trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n      quote = {'type' : order_type, \n               'side' : side, \n               'quantity' : quantity, \n               'price' : price,\n               'trade_id' : trade_id}\n      limit_orders.append(quote)\n    else:\n      side = 'bid'\n      quantity = np.random.randint(qte_range_bid[0], qte_range_bid[1]+1)\n      price = np.random.randint(price_range_bid[0], price_range_bid[1]+1)\n      trade_id = 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n      quote = {'type' : order_type, \n               'side' : side, \n               'quantity' : quantity, \n               'price' : price,\n               'trade_id' : trade_id}\n      limit_orders.append(quote)\n  return limit_orders\n\n\n\nclass Trader_quantity:\n\n  def __init__(self, K, pnl=0, nb_actions=0):\n    self.K = K\n    self.K_initial = self.K\n    self.nb_actions = nb_actions \n    self.pnl = pnl\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    quote = {'type' : np.nan, \n               'side' : np.nan, \n               'quantity' : np.nan, \n               'price' : np.nan,\n               'trade_id' : self.trade_id}\n    self.rendement_actu = self.K/self.K_initial\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions, 'ordre_envoyÃ©' : quote}\n    self.val=False\n\n  def trade_first(self, order_book):\n    best_ask = order_book.get_best_ask()\n    best_bid = order_book.get_best_bid()\n    qte_best_ask = order_book.get_volume_at_price('ask', best_ask)\n    qte_best_bid = order_book.get_volume_at_price('bid', best_bid)\n    vol_possible_to_buy = self.K/best_ask\n    vol_possible_to_sell = self.nb_actions\n    if self.K>0 and vol_possible_to_buy<qte_best_ask:\n      self.order_type = 'limit'\n      self.side = 'ask'\n      self.quantity = vol_possible_to_buy\n      self.price = best_ask\n      self.last_price = best_ask\n      quote = {'type' : self.order_type, \n               'side' : self.side, \n               'quantity' : self.quantity, \n               'price' : self.price,\n               'trade_id' : self.trade_id}\n      self.K -= vol_possible_to_buy*best_ask\n      self.pnl -= vol_possible_to_buy*best_ask\n      self.nb_actions += self.quantity\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions, 'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=True\n    elif self.nb_actions<qte_best_bid and self.nb_actions>0:\n        self.order_type = 'limit'\n        self.side = 'bid'\n        self.quantity = max(self.nb_actions-1,0)\n        if self.quantity<=0:\n          quote = {'type' : np.nan, \n                  'side' : np.nan, \n                  'quantity' : np.nan, \n                  'price' : np.nan,\n                  'trade_id' : self.trade_id}\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=False\n        else:\n          self.price = best_bid\n          self.last_price = self.price\n          quote = {'type' : self.order_type, \n                  'side' : self.side, \n                  'quantity' : self.quantity, \n                  'price' : self.price,\n                  'trade_id' : self.trade_id}\n          self.K += self.quantity*best_bid\n          self.pnl += self.quantity*best_bid\n          self.nb_actions -= self.quantity\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\n  def tradeSecond(self, order_book):\n    if self.nb_actions>0 and self.val==True:\n      best_bid = order_book.get_best_bid()\n      if best_bid>self.last_price:\n        self.order_type = 'limit'\n        self.side = 'bid'\n        self.quantity = max(self.nb_actions-1,0)\n        if self.quantity<=0:\n          quote = {'type' : np.nan, \n                  'side' : np.nan, \n                  'quantity' : np.nan, \n                  'price' : np.nan,\n                  'trade_id' : self.trade_id}\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=False\n        else:\n          self.price = order_book.get_best_bid()\n          quote = {'type' : self.order_type, \n                  'side' : self.side, \n                  'quantity' : self.quantity, \n                  'price' : self.price,\n                  'trade_id' : self.trade_id}\n          self.K += self.quantity*best_bid\n          self.pnl += self.quantity*best_bid\n          self.nb_actions -= self.quantity\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=True\n      else:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\nclass Trader_Buy_and_sell:\n\n  def __init__(self, order_book):\n    best_ask = order_book.get_best_ask()\n    qte_best_ask = order_book.get_volume_at_price('ask', best_ask) \n    self.K = qte_best_ask*best_ask\n    self.K_initial = self.K \n    self.pnl = 0\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    self.last_price = best_ask\n    self.K -= self.K\n    self.pnl -= self.K\n    self.nb_actions = qte_best_ask\n    type_order = 'limit'\n    self.side = 'ask'\n    quote = {  'type' : type_order, \n               'side' : self.side, \n               'quantity' : qte_best_ask, \n               'price' : best_ask,\n               'trade_id' : self.trade_id}\n    self.rendement_actu = self.K/self.K_initial\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n    self.trader_balance_sheet.append(dico)\n    self.val=True\n\n  def trade(self, order_book):\n    if self.side == 'ask':\n      best_bid = order_book.get_best_bid()\n      qte_best_bid = max(self.nb_actions,0)\n      if qte_best_bid<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        if best_bid>self.last_price:\n          type_order = 'limit'\n          self.side = 'bid'\n          self.last_price = best_bid\n          self.K += best_bid*qte_best_bid\n          self.pnl += best_bid*qte_best_bid\n          self.nb_actions -= qte_best_bid\n          quote = {  'type' : type_order, \n                'side' : self.side, \n                'quantity' : qte_best_bid, \n                'price' : best_bid,\n                'trade_id' : self.trade_id}\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=True\n        else:\n          quote = {'type' : np.nan, \n                  'side' : np.nan, \n                  'quantity' : np.nan, \n                  'price' : np.nan,\n                  'trade_id' : self.trade_id}\n          self.rendement_actu = self.K/self.K_initial\n          dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n          self.trader_balance_sheet.append(dico)\n          self.val=False\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\nclass Trader_aleatoire:\n\n  def __init__(self, K, pnl, nb_actions):\n    self.K = K\n    self.K_initial = self.K \n    self.pnl = pnl\n    self.nb_actions = nb_actions\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    self.rendement_actu = self.K/self.K_initial\n    quote = {'type' : np.nan, \n               'side' : np.nan, \n               'quantity' : np.nan, \n               'price' : np.nan,\n               'trade_id' : self.trade_id}\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n    self.trader_balance_sheet.append(dico)\n    self.val = False\n\n  def trade(self, order_book):\n    x = np.random.randint(0,2)\n    if x == 0 and self.K >= 0:\n      type_order = 'market'\n      self.side = 'ask'\n      quantity = max(self.K/order_book.get_best_ask(),0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type': type_order,\n                  'side': self.side,\n                  'quantity': quantity,\n                  'trade_id': self.trade_id}\n        self.K -= quantity*order_book.get_best_ask()\n        self.pnl -= quantity*order_book.get_best_ask()\n        self.nb_actions += quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    elif x == 1 and self.nb_actions > 0:\n      type_order = 'market'\n      self.side = 'bid'\n      quantity = max(self.nb_actions-1,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type': type_order,\n                  'side': self.side,\n                  'quantity': quantity,\n                  'trade_id': self.trade_id}\n        self.K += quantity*order_book.get_best_bid()\n        self.pnl += quantity*order_book.get_best_bid()\n        self.nb_actions -= quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\nclass Trader_haussier:\n  #Ce trader pense qu'il pourra vendre trÃ¨s chere donc il va acheter en market order puis va envoyer un ordre lim de vente au pire des Bids\n  def __init__(self, K, pnl, nb_actions):\n    self.K = K\n    self.K_initial = self.K\n    self.nb_actions = nb_actions \n    self.pnl = pnl\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    self.rendement_actu = self.K/self.K_initial\n    quote = {'type' : np.nan, \n               'side' : np.nan, \n               'quantity' : np.nan, \n               'price' : np.nan,\n               'trade_id' : self.trade_id}\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n    self.trader_balance_sheet.append(dico)\n    self.val=False\n\n  def tradeFirst(self, order_book):\n     type_order = 'market'\n     self.side = 'ask'\n     quantity = max(self.K/order_book.get_best_ask(),0)\n     if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n     else:\n        quote = {'type': type_order,\n                  'side': self.side,\n                  'quantity': quantity,\n                  'trade_id': self.trade_id}\n        self.K -= quantity*order_book.get_best_ask()\n        self.pnl -= quantity*order_book.get_best_ask()\n        self.nb_actions += quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n     return self.val, quote, self.trader_balance_sheet\n\n  def SecondTrade(self, order_book):\n    if self.nb_actions>0:\n      worst_bid = order_book.get_worst_bid() \n      type_order = 'limit'\n      self.side = 'bid'\n      quantity = max(self.nb_actions-1,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type' : type_order, \n                'side' : self.side, \n                'quantity' : quantity, \n                'price' : worst_bid,\n                'trade_id' : self.trade_id}\n        self.K += quantity*worst_bid\n        self.pnl += quantity*worst_bid\n        self.rendement_actu = self.K/self.K_initial\n        self.nb_actions -= quantity\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\nclass Trader_baissier:\n  #Ce dernier c'est l'inverse du dernier il dispose dejÃ  d'actions et il pense qu'il pourra les racheter Ã  pas chÃ¨re du tout\n  def __init__(self, K, pnl, nb_actions):\n    self.K = K\n    self.K_initial = self.K\n    self.nb_actions = nb_actions \n    self.pnl = pnl\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    self.rendement_actu = self.K/self.K_initial\n    quote = {'type' : np.nan, \n               'side' : np.nan, \n               'quantity' : np.nan, \n               'price' : np.nan,\n               'trade_id' : self.trade_id}\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n    self.trader_balance_sheet.append(dico)\n    self.val = False\n\n  def tradeFirst(self, order_book):\n    if self.nb_actions>0:\n      type_order = 'market'\n      self.side = 'bid'\n      quantity = max(self.nb_actions-1,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type': type_order,\n                  'side': self.side,\n                  'quantity': quantity,\n                  'trade_id': self.trade_id}\n        self.K += quantity*order_book.get_best_ask()\n        self.pnl += quantity*order_book.get_best_ask()\n        self.nb_actions -= quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\n  def SecondTrade(self, order_book):\n    if self.nb_actions==0:\n      worst_ask = order_book.get_worst_ask() \n      type_order = 'limit'\n      self.side = 'ask'\n      quantity = max(self.K/order_book.get_worst_ask()-1,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type' : type_order, \n                'side' : self.side, \n                'quantity' : quantity, \n                'price' : worst_ask,\n                'trade_id' : self.trade_id}\n        self.K -= quantity*worst_ask\n        self.pnl -= quantity*worst_ask\n        self.rendement_actu = self.K/self.K_initial\n        self.nb_actions += quantity\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\n  def ThirdTrade(self, order_book):\n    if self.nb_actions>0:\n      worst_bid = order_book.get_worst_bid() \n      type_order = 'limit'\n      self.side = 'bid'\n      quantity = max(self.nb_actions,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        quote = {'type' : type_order, \n                'side' : self.side, \n                'quantity' : quantity, \n                'price' : worst_bid,\n                'trade_id' : self.trade_id}\n        self.K += quantity*worst_bid\n        self.pnl += quantity*worst_bid\n        self.rendement_actu = self.K/self.K_initial\n        self.nb_actions -= quantity\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\nclass Trader_MA:\n  #Ce trader va prendre la Moyenne mobile Ã  n jours des trades prix des trades et va par la suite regarder le moment ou ou le prix du dernier trade passe en dessous de cette MA(n) il vendera\n  #il enverra un ordre limite de vente adaptÃ© pour ne rien perdre pour chercher ainsi la meilleur Ã©xecution et inversement si le prix du dernier trade passe au dessus de cette MA(n) il achetera\n  def __init__(self, K, pnl, nb_actions, n):\n    self.val = False\n    self.K = K\n    self.K_initial = self.K\n    self.nb_actions = nb_actions \n    self.pnl = pnl\n    self.n = n\n    self.trade_id = 1000*np.random.randint(1,10) + 100*np.random.randint(1,10) + 10*np.random.randint(1,10) + np.random.randint(1,10)\n    self.trader_balance_sheet = []\n    self.rendement_actu = self.K/self.K_initial\n    quote = {'type' : np.nan, \n               'side' : np.nan, \n               'quantity' : np.nan, \n               'price' : np.nan,\n               'trade_id' : self.trade_id}\n    dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n    self.trader_balance_sheet.append(dico)\n\n  def firstTrade(self, order_book):\n    mva_order = self.n\n    bids, asks, trades_done = order_book.get_all()\n    prices_trades = [x['prix'] for x in trades_done[:-1]]\n    mva_avg = mvt_avg(prices_trades, mva_order)\n    if prices_trades[-1] > mva_avg[-1] and self.K > 0:\n      type_order = 'limit'\n      self.side = 'ask'\n      quantity = max(min(self.K/order_book.get_best_ask()-1, order_book.get_volume_at_price('ask',order_book.get_best_ask())),0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        price = order_book.get_best_ask()\n        quote = {'type' : type_order, \n                'side' : self.side, \n                'quantity' : quantity, \n                'price' : price,\n                'trade_id' : self.trade_id}\n        self.K -= price*quantity\n        self.pnl -= price*quantity\n        self.nb_actions += quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    elif prices_trades[-1] < mva_avg[-1] and self.nb_actions > 0:\n      type_order = 'limit'\n      self.side = 'bid'\n      quantity = max(self.nb_actions-1,0)\n      if quantity<=0:\n        quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=False\n      else:\n        price = order_book.get_best_bid()\n        quote = {'type' : type_order, \n                'side' : self.side, \n                'quantity' : quantity, \n                'price' : price,\n                'trade_id' : self.trade_id}\n        self.K += price*quantity\n        self.pnl += price*quantity\n        self.nb_actions -= quantity\n        self.rendement_actu = self.K/self.K_initial\n        dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n        self.trader_balance_sheet.append(dico)\n        self.val=True\n    else:\n      quote = {'type' : np.nan, \n                'side' : np.nan, \n                'quantity' : np.nan, \n                'price' : np.nan,\n                'trade_id' : self.trade_id}\n      self.rendement_actu = self.K/self.K_initial\n      dico = {'Capital Courant' : self.K, 'Pnl CumulÃ©' : self.pnl,'Rendement Actuelle Brute' : self.rendement_actu, 'nb_actions' : self.nb_actions,'ordre_envoyÃ©' : quote}\n      self.trader_balance_sheet.append(dico)\n      self.val=False\n    return self.val, quote, self.trader_balance_sheet\n\n\ndef GetStats(Balancesheet,nom_strat_trader, order_book, all_trades):\n\n  cap_courant = []\n  pnl_cum = []\n  rdm_act_brute = []\n\n  for i in range(len(Balancesheet)):\n    cap_courant.append(float(Balancesheet[i]['Capital Courant']))\n    pnl_cum.append(float(Balancesheet[i]['Pnl CumulÃ©']))\n    rdm_act_brute.append(float(Balancesheet[i]['Rendement Actuelle Brute']))\n\n  all_trades = [float(x) for x in all_trades]\n  trades_df = pd.DataFrame(list(zip(list(np.arange(len(all_trades))), all_trades)), columns = ['Ordre de trades', 'Prix des trades'])\n  mean_cap_courant = np.mean(cap_courant)\n  std_cap_courant = np.std(cap_courant)\n  min_cap_courant = np.min(cap_courant)\n  max_cap_courant = np.max(cap_courant)\n  q1_cap_courant = np.quantile(cap_courant, 0.25)\n  q2_cap_courant = np.quantile(cap_courant, 0.5)\n  q3_cap_courant = np.quantile(cap_courant, 0.75)\n  Var_cap_courant = np.quantile(cap_courant, 0.95)\n  count = len(cap_courant)\n  df_stats_cap_courant = pd.DataFrame([count, mean_cap_courant, std_cap_courant, min_cap_courant, max_cap_courant,q1_cap_courant,q2_cap_courant,q3_cap_courant, Var_cap_courant],\n                                      columns=['Statistique descriptives Capital Courant pour la strat: {}'.format(nom_strat_trader)],\n                                      index=['count', 'Moyenne', 'Ecart-type', 'Min', 'Max', '1er quartile', 'mÃ©diane', '3Ã¨me quartile', '95Ã¨me quantile(VAR)'])\n\n  mean_pnl_cum = np.mean(pnl_cum)\n  std_pnl_cum = np.std(pnl_cum)\n  min_pnl_cum = np.min(pnl_cum)\n  max_pnl_cum = np.max(pnl_cum)\n  q1_pnl_cum = np.quantile(pnl_cum, 0.25)\n  q2_pnl_cum = np.quantile(pnl_cum, 0.5)\n  q3_pnl_cum = np.quantile(pnl_cum, 0.75)\n  Var_pnl_cum = np.quantile(pnl_cum, 0.95)\n  count = len(pnl_cum)\n  df_stats_pnl_cum = pd.DataFrame([count, mean_pnl_cum, std_pnl_cum, min_pnl_cum, max_pnl_cum,q1_pnl_cum,q2_pnl_cum,q3_pnl_cum, Var_pnl_cum],\n                                      columns=['Statistique descriptives Pnl CumulÃ© pour la strat: {}'.format(nom_strat_trader)],\n                                      index=['count', 'Moyenne', 'Ecart-type', 'Min', 'Max', '1er quartile', 'mÃ©diane', '3Ã¨me quartile', '95Ã¨me quantile(VAR)'])\n\n  mean_rdm_act_brute = np.mean(rdm_act_brute)\n  std_rdm_act_brute = np.std(rdm_act_brute)\n  min_rdm_act_brute = np.min(rdm_act_brute)\n  max_rdm_act_brute = np.max(rdm_act_brute)\n  count = len(rdm_act_brute)\n  q1_rdm_act_brute = np.quantile(rdm_act_brute, 0.25)\n  q2_rdm_act_brute = np.quantile(rdm_act_brute, 0.5)\n  q3_rdm_act_brute = np.quantile(rdm_act_brute, 0.75)\n  Var_rdm_act_brute = np.quantile(rdm_act_brute, 0.95)\n  df_stats_rdm_act_brute = pd.DataFrame([count, mean_rdm_act_brute, std_rdm_act_brute, min_rdm_act_brute, max_rdm_act_brute,q1_rdm_act_brute,q2_rdm_act_brute,q3_rdm_act_brute, Var_rdm_act_brute],\n                                      columns=['Statistique descriptives Rendement Actuelle Brute pour la strat: {}'.format(nom_strat_trader)],\n                                      index=['count', 'Moyenne', 'Ecart-type', 'Min', 'Max', '1er quartile', 'mÃ©diane', '3Ã¨me quartile', '95Ã¨me quantile(VAR)'])\n\n  mean_all_trades = np.mean(all_trades)\n  std_all_trades = np.std(all_trades)\n  min_all_trades = np.min(all_trades)\n  max_all_trades = np.max(all_trades)\n  count = len(all_trades)\n  q1_all_trades = np.quantile(all_trades, 0.25)\n  q2_all_trades = np.quantile(all_trades, 0.5)\n  q3_all_trades = np.quantile(all_trades, 0.75)\n  Var_all_trades = np.quantile(all_trades, 0.95)\n  df_stats_all_trades = pd.DataFrame([count, mean_all_trades, std_all_trades, min_all_trades, max_all_trades, q1_all_trades, q2_all_trades, q3_all_trades, Var_all_trades],\n                                      columns=['Statistique descriptives Capital Courant pour la strat: {}'.format(nom_strat_trader)],\n                                      index=['count', 'Moyenne', 'Ecart-type', 'Min', 'Max', '1er quartile', 'mÃ©diane', '3Ã¨me quartile', '95Ã¨me quantile(VAR)'])\n\n  return df_stats_cap_courant, df_stats_pnl_cum, df_stats_rdm_act_brute, trades_df, cap_courant, pnl_cum, rdm_act_brute \n\n\ndef GetList(traders, nom_strat_trader, trajecs):\n\n    for Balancesheet, j in zip(traders, range(len(traders))):\n      cap_courant = []\n      pnl_cum = []\n      rdm_act_brute = []\n      trajec = []\n\n      for i in range(len(Balancesheet)):\n        cap_courant.append(float(Balancesheet[i]['Capital Courant']))\n        pnl_cum.append(float(Balancesheet[i]['Pnl CumulÃ©']))\n        rdm_act_brute.append(float(Balancesheet[i]['Rendement Actuelle Brute']))\n\n      for i in range(len(trajecs[j])):\n        trajec.append(float(trajecs[j][i]))\n      cap_courant = np.array(cap_courant)\n      pnl_cum = np.array(pnl_cum)\n      rdm_act_brute = np.array(rdm_act_brute)\n\n      if j==0:\n        df_cap_courant = pd.DataFrame(cap_courant, columns=[\"trader \"+str(j)+' '+nom_strat_trader])\n        df_pnl_cum = pd.DataFrame(pnl_cum, columns=[\"trader \"+str(j)+' '+nom_strat_trader])\n        df_rdm_act_brute = pd.DataFrame(rdm_act_brute, columns=[\"trader \"+str(j)+' '+nom_strat_trader])\n        df_trajec = pd.DataFrame(trajec, columns=[\"trajectoires \"+str(j)+' '+nom_strat_trader])\n\n      else:\n        df_cap_courant[\"trader \"+str(j)+' '+nom_strat_trader] = cap_courant\n        df_pnl_cum[\"trader \"+str(j)+' '+nom_strat_trader] = pnl_cum\n        df_rdm_act_brute[\"trader \"+str(j)+' '+nom_strat_trader] = rdm_act_brute\n        df_trajec = pd.DataFrame(trajec, columns=[\"trajectoires \"+str(j)+' '+nom_strat_trader])\n    GetVisualization2(df_cap_courant, df_pnl_cum, df_rdm_act_brute,df_trajec, nom_strat_trader)\n\ndef GetVisualization2(df_cap_courant, df_pnl_cum, df_rdm_act_brute,df_trajec, nom_strat_trader):\n  fig=plt.figure(figsize=(20,10))\n  fig1=fig.add_subplot(221)\n  df_pnl_cum.plot(ax=plt.gca(), legend=False, title=f'Pnl CumulÃ©s StratÃ©gie : {nom_strat_trader}')\n  fig2=fig.add_subplot(222)\n  df_rdm_act_brute.plot(ax=plt.gca(), legend=False, title=f'Rendement Brute StratÃ©gie : {nom_strat_trader}')\n  fig3=fig.add_subplot(2,2,3)\n  df_cap_courant.plot(ax=plt.gca(), legend=False, title=f'Capital Courant StratÃ©gie : {nom_strat_trader}')\n  fig4=fig.add_subplot(224)\n  df_trajec.plot(ax=plt.gca(), legend=False, title=f'Trades StratÃ©gie : {nom_strat_trader}')\n  plt.show()\n\nnb_ordre_depart = int(input(\"Veuillez PrÃ©cisez le nombre d'ordre limite de dÃ©part : \"))\n\nprice_range_bid_min = int(input(\"Veuillez prÃ©cisez le prix minimale pour les Bids : \"))\n\nprice_range_bid_max = int(input(\"Veuillez prÃ©cisez le prix maximale pour les Bids : \"))\n\nprice_range_ask_min = int(input(\"Veuillez prÃ©cisez le prix minimale pour les Asks : \"))\n\nprice_range_ask_max = int(input(\"Veuillez prÃ©cisez le prix maximale pour les Asks : \"))\n\nqte_range_ask_min = int(input(\"Veuillez prÃ©cisez la quantitÃ© minimale par Ask : \"))\n\nqte_range_ask_max = int(input(\"Veuillez prÃ©cisez la quantitÃ© maximale par Ask : \"))\n\nqte_range_bid_min = int(input(\"Veuillez prÃ©cisez la quantitÃ© minimale par Bid : \"))\n\nqte_range_bid_max = int(input(\"Veuillez prÃ©cisez la quantitÃ© maximale par Bid : \"))\n\n\norders = generate_lim_orders(nb_ordre_depart, [price_range_bid_min,price_range_bid_max], [price_range_ask_min,price_range_ask_max], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n\ntrajecs = []\ntrader_qte = []\ntrader_buy_and_sell = []\ndist_fin_trader_qte = []\ntrader_aleatoire = []\ntrader_haussier = []\ntrader_baissier = []\nall_trajecs = []\ntrader_MA = []\ndist_fin_trader_buy_and_sell = []\ndist_fin_trader_aleatoire = []\ndist_fin_trader_haussier = []\ndist_fin_trader_baissier = []\ndist_fin_trader_MA = []\n\norder_book = OrderBook()\n\nfor order in orders:\n    trades, order_id = order_book.process_order(order, False, False)\n\nnb_transac_times = int(input(\"Veuillez prÃ©cisez le nombre fois que nos traders pouront faire des transactions : \"))\n\nnb_trader_par_strat = int(input(\"Veuillez prÃ©cisez le nombre de Trader par transaction\"))\n\nK_trader_qte = int(input(\"Veuillez prÃ©ciser le capital initial de Trader_quantity : \"))\n\npnl_trader_qte = int(input(\"Veuillez prÃ©cisez le pnl de dÃ©part de Trader_quantity : \"))\n\nnb_act_trader_qte = int(input(\"Veuillez prÃ©cisez le nombre d'actions dÃ©tenus initialement par Trader_quantity : \"))\n\nK_trader_aleatoire = int(input(\"Veuillez prÃ©ciser le capital initial de Trader_aleatoire : \"))\n\npnl_trader_aleatoire = int(input(\"Veuillez prÃ©cisez le pnl de dÃ©part de Trader_aleatoire : \"))\n\nnb_act_trader_aleatoire = int(input(\"Veuillez prÃ©cisez le nombre d'actions dÃ©tenus initialement par Trader_aleatoire : \"))\n\nK_trader_haussier = int(input(\"Veuillez prÃ©ciser le capital initial de Trader_haussier : \"))\n\npnl_trader_haussier = int(input(\"Veuillez prÃ©cisez le pnl de dÃ©part de Trader_haussier : \"))\n\nnb_act_trader_haussier = int(input(\"Veuillez prÃ©cisez le nombre d'actions dÃ©tenus initialement par Trader_haussier : \"))\n\nK_trader_baissier = int(input(\"Veuillez prÃ©ciser le capital initial de Trader_baissier : \"))\n\npnl_trader_baissier = int(input(\"Veuillez prÃ©cisez le pnl de dÃ©part de Trader_baissier : \"))\n\nnb_act_trader_baissier =int(input(\"Veuillez prÃ©cisez le nombre d'actions dÃ©tenus initialement par Trader_baissier : \"))\n\nK_trader_MA = int(input(\"Veuillez prÃ©ciser le capital initial de Trader_MA : \"))\n\npnl_trader_MA = int(input(\"Veuillez prÃ©cisez le pnl de dÃ©part de Trader_MA : \"))\n\nnb_act_trader_MA = int(input(\"Veuillez prÃ©cisez le nombre d'actions dÃ©tenus initialement par Trader_MA : \"))\n\nmvg_trader_MA = int(input(\"Veuillez prÃ©cisez l'ordre de la moyenne mobile Ã  retenir : \"))\n\nfor n in range(nb_trader_par_strat):\n\n  all_trades = []\n  exec(f'T{n}_qte = Trader_quantity(K_trader_qte, pnl_trader_qte, nb_act_trader_qte)')\n  exec(f'T{n}_buy_and_sell = Trader_Buy_and_sell(order_book)')\n  exec(f'T{n}_aleatoire = Trader_aleatoire(K_trader_aleatoire, pnl_trader_aleatoire,nb_act_trader_aleatoire)')\n  exec(f'T{n}_haussier = Trader_haussier(K_trader_haussier, pnl_trader_haussier, nb_act_trader_haussier)')\n  exec(f'T{n}_baissier = Trader_baissier(K_trader_baissier, pnl_trader_baissier, nb_act_trader_baissier)')\n  exec(f'T{n}_MA = Trader_MA(K_trader_MA, pnl_trader_MA, nb_act_trader_MA, mvg_trader_MA)')\n  bids, asks, trades_done = order_book.get_all()\n  all_trades.append([x['prix'] for x in trades_done][-1])\n  for nb in np.arange(nb_transac_times):\n\n    exec(f'val, quote1_T{n}_qte, bs_T{n}_qte = T{n}_qte.trade_first(order_book)')\n    if val == True:\n      exec(f'order_book.process_order(quote1_T{n}_qte, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1]) \n      orders = generate_lim_orders(5, [price_range_bid_min+5,price_range_bid_max+5], [price_range_ask_min,price_range_ask_max], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote2_T{n}_qte, bs_T{n}_qte = T{n}_qte.tradeSecond(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote2_T{n}_qte, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote_T{n}_buy_and_sell, bs_T{n}_buy_and_sell = T{n}_buy_and_sell.trade(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote_T{n}_buy_and_sell, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(5, [price_range_bid_min+5,price_range_bid_max+5], [price_range_ask_min+6,price_range_ask_max+5], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote_T{n}_aleatoire, bs_T{n}_aleatoire = T{n}_aleatoire.trade(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote_T{n}_aleatoire, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])  \n    exec(f'val,quote1_T{n}_baissier, bs_T{n}_baissier = T{n}_baissier.tradeFirst(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote1_T{n}_baissier, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(2, [price_range_bid_min-5,price_range_bid_max-3], [price_range_ask_min-3,price_range_ask_max-5], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote2_T{n}_baissier, bs_T{n}_baissier = T{n}_baissier.SecondTrade(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote2_T{n}_baissier, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(5, [price_range_bid_min+5,price_range_bid_max+5], [price_range_ask_min+7,price_range_ask_max+10], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote3_T{n}_baissier, bs_T{n}_baissier = T{n}_baissier.ThirdTrade(order_book)')\n    if val == True:\n      exec(f'order_book.process_order(quote3_T{n}_baissier, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])  \n    exec(f'val,quote1_T{n}_haussier, bs_T{n}_haussier = T{n}_haussier.tradeFirst(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote1_T{n}_haussier, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(5, [price_range_bid_min+5,price_range_bid_max+5], [price_range_ask_min+4,price_range_ask_max+4], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote2_T{n}_haussier, bs_T{n}_haussier = T{n}_haussier.SecondTrade(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote2_T{n}_haussier, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(3, [price_range_bid_min-4,price_range_bid_max-4], [price_range_ask_min-2,price_range_ask_max-2], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n    exec(f'val,quote_T{n}_MA, bs_T{n}_MA = T{n}_MA.firstTrade(order_book)')\n\n    if val == True:\n      exec(f'order_book.process_order(quote_T{n}_MA, False, False)')\n      bids, asks, trades_done = order_book.get_all()\n      all_trades.append([x['prix'] for x in trades_done][-1])\n      orders = generate_lim_orders(2, [price_range_bid_min+1,price_range_bid_max+1], [price_range_ask_min+1,price_range_ask_max+2], [qte_range_ask_min,qte_range_ask_max], [qte_range_bid_min,qte_range_bid_max])\n      for order in orders:\n        trades, order_id = order_book.process_order(order, False, False)\n        bids, asks, trades_done = order_book.get_all()\n        all_trades.append([x['prix'] for x in trades_done][-1])\n\n  exec(f'dist_fin_trader_qte.append(bs_T{n}_qte[-1])')\n  exec(f'dist_fin_trader_buy_and_sell.append(bs_T{n}_buy_and_sell[-1])')\n  exec(f'dist_fin_trader_aleatoire.append(bs_T{n}_aleatoire[-1])')\n  exec(f'dist_fin_trader_haussier.append(bs_T{n}_haussier[-1])')\n  exec(f'dist_fin_trader_baissier.append(bs_T{n}_baissier[-1])')\n  exec(f'dist_fin_trader_MA.append(bs_T{n}_MA[-1])')\n  trajecs.append(all_trades[-1])\n  exec(f'trader_qte.append(bs_T{n}_qte)')\n  exec(f'trader_buy_and_sell.append(bs_T{n}_buy_and_sell)')\n  exec(f'trader_aleatoire.append(bs_T{n}_aleatoire)')\n  exec(f'trader_haussier.append(bs_T{n}_haussier)')\n  exec(f'trader_baissier.append(bs_T{n}_baissier)')\n  exec(f'trader_MA.append(bs_T{n}_MA)')\n  all_trajecs.append(all_trades)\n\n#On visualise les diffÃ©rentes simulations et leurs trajectoires pour diffÃ©rentes StratÃ©gies \nGetList(trader_qte, \"Trader_quantitÃ©\", all_trajecs)\nGetList(trader_buy_and_sell, \"Trader_Buy_and_sell\", all_trajecs)\nGetList(trader_aleatoire, \"Trader_aleatoire\", all_trajecs)\nGetList(trader_haussier, \"Trader_haussier\", all_trajecs)\nGetList(trader_baissier, \"Trader_baissier\", all_trajecs)\nGetList(trader_MA, \"Trader_MA\", all_trajecs)\n\ndf_stats_cap_courant_trader_qte, df_stats_pnl_cum_trader_qte, df_stats_rdm_act_brute_trader_qte, trades_df, cap_courant_trader_qte, pnl_cum_trader_qte, rdm_act_brute_trader_qte = GetStats(dist_fin_trader_qte,\"Trader_quantity\", order_book, trajecs)\ndf_stats_cap_courant_trader_Buy_and_sell, df_stats_pnl_cum_Buy_and_sell, df_stats_rdm_act_brute_Buy_and_sell, trades_df, cap_courant_Buy_and_sell, pnl_cum_Buy_and_sell, rdm_act_brute_Buy_and_sell = GetStats(dist_fin_trader_buy_and_sell,\"Trader_Buy_and_sell\", order_book, trajecs)\ndf_stats_cap_courant_trader_aleatoire, df_stats_pnl_cum_trader_aleatoire, df_stats_rdm_act_brute_trader_aleatoire, trades_df, cap_courant_trader_aleatoire, pnl_cum_trader_aleatoire, rdm_act_brute_trader_aleatoire = GetStats(dist_fin_trader_aleatoire,\"trader_aleatoire\", order_book, trajecs)\ndf_stats_cap_courant_trader_haussier, df_stats_pnl_cum_trader_haussier, df_stats_rdm_act_brute_trader_haussier, trades_df, cap_courant_trader_haussier, pnl_cum_trader_haussier, rdm_act_brute_trader_haussier = GetStats(dist_fin_trader_haussier,\"trader_haussier\", order_book, trajecs)\ndf_stats_cap_courant_trader_baissier, df_stats_pnl_cum_trader_baissier, df_stats_rdm_act_brute_trader_baissier, trades_df, cap_courant_trader_baissier, pnl_cum_trader_baissier, rdm_act_brute_trader_baissier = GetStats(dist_fin_trader_baissier,\"trader_baissier\", order_book, trajecs)\ndf_stats_cap_courant_trader_MA, df_stats_pnl_cum_trader_MA, df_stats_rdm_act_brute_trader_MA, trades_df, cap_courant_trader_MA, pnl_cum_trader_MA, rdm_act_brute_trader_MA = GetStats(dist_fin_trader_MA,\"trader_MA\", order_book, trajecs)\n\nprint(f\"Statistiques Descriptives de fin de pÃ©riode sur {nb_trader_par_strat} simulations faite avec la stratÃ©gie Trader_quantitÃ© avec les paramÃ¨tres spÃ©cifiÃ©s : \")\nDf_Trader_qte = pd.concat([df_stats_cap_courant_trader_qte,df_stats_pnl_cum_trader_qte,df_stats_rdm_act_brute_trader_qte], axis=1, ignore_index=True)\nDf_Trader_qte.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_Trader_qte)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader QuantitÃ© sur {nb_trader_par_strat} simulations.xlsx')\nDf_Trader_qte.to_excel(writer)\nwriter.save()\nprint(\"###################\")\nprint(\"Statistiques Descriptives de fin de pÃ©riode sur {} simulations faite avec la stratÃ©gie Trader_Buy_and_sell avec les paramÃ¨tres spÃ©cifiÃ©s : \".format(nb_trader_par_strat))\nDf_trader_Buy_and_sell = pd.concat([df_stats_cap_courant_trader_Buy_and_sell,df_stats_pnl_cum_Buy_and_sell,df_stats_rdm_act_brute_Buy_and_sell], axis=1, ignore_index=True)\nDf_trader_Buy_and_sell.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_trader_Buy_and_sell)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader Buy and Sell sur {nb_trader_par_strat} simulations.xlsx')\nDf_trader_Buy_and_sell.to_excel(writer)\nwriter.save()\nprint(\"##################\")\nprint(\"Statistiques Descriptives de fin de pÃ©riode sur {} simulations faite avec la stratÃ©gie Trader_aleatoire avec les paramÃ¨tres spÃ©cifiÃ©s : \".format(nb_trader_par_strat))\nDf_trader_trader_aleatoire = pd.concat([df_stats_cap_courant_trader_aleatoire,df_stats_pnl_cum_trader_aleatoire,df_stats_rdm_act_brute_trader_aleatoire], axis=1, ignore_index=True)\nDf_trader_trader_aleatoire.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_trader_trader_aleatoire)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader Aleatoire sur {nb_trader_par_strat} simulations.xlsx')\nDf_trader_trader_aleatoire.to_excel(writer)\nwriter.save()\nprint(\"##################\")\nprint(\"Statistiques Descriptives de fin de pÃ©riode sur {} simulations faite avec la stratÃ©gie Trader_haussier avec les paramÃ¨tres spÃ©cifiÃ©s : \".format(nb_trader_par_strat))\nDf_trader_trader_haussier = pd.concat([df_stats_cap_courant_trader_haussier,df_stats_pnl_cum_trader_haussier,df_stats_rdm_act_brute_trader_haussier], axis=1, ignore_index=True)\nDf_trader_trader_haussier.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_trader_trader_haussier)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader Haussier sur {nb_trader_par_strat} simulations.xlsx')\nDf_trader_trader_haussier.to_excel(writer)\nwriter.save()\nprint(\"##############\")\nprint(\"Statistiques Descriptives de fin de pÃ©riode sur {} simulations faite avec la stratÃ©gie Trader_baissier avec les paramÃ¨tres spÃ©cifiÃ©s : \".format(nb_trader_par_strat))\nDf_trader_trader_baissier = pd.concat([df_stats_cap_courant_trader_baissier,df_stats_pnl_cum_trader_baissier,df_stats_rdm_act_brute_trader_baissier], axis=1, ignore_index=True)\nDf_trader_trader_baissier.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_trader_trader_baissier)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader Baissier sur {nb_trader_par_strat} simulations.xlsx')\nDf_trader_trader_baissier.to_excel(writer)\nwriter.save()\nprint('############')\nprint(\"Statistiques Descriptives de fin de pÃ©riode sur {} simulations faite avec la stratÃ©gie Trader_MA avec les paramÃ¨tres spÃ©cifiÃ©s : \".format(nb_trader_par_strat))\nDf_trader_trader_MA = pd.concat([df_stats_cap_courant_trader_MA,df_stats_pnl_cum_trader_MA,df_stats_rdm_act_brute_trader_MA], axis=1, ignore_index=True)\nDf_trader_trader_MA.columns = ['Capital Courant', 'Pnl CumulÃ©', 'Rendement Brute']\nprint(Df_trader_trader_MA)\nwriter = pd.ExcelWriter(f'Statistiques de fin de pÃ©riode avec la stratÃ©gie Trader MA sur {nb_trader_par_strat} simulations.xlsx')\nDf_trader_trader_MA.to_excel(writer)\nwriter.save()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CARNETORDREKB",
    "package_url": "https://pypi.org/project/CARNETORDREKB/",
    "platform": "",
    "project_url": "https://pypi.org/project/CARNETORDREKB/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/CARNETORDREKB/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Algorithm for finance",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9761979,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4afdcf578caad2948b8ba39f54f9a7d25c5e4b3f9c14c8e1338764964b0ea92",
          "md5": "77e1c84ca6fdce1cb6bdb397c71d2ac3",
          "sha256": "f3e5eb684962d36bc9a19b85b4ba4470b143dca15bbd987d5b292ef9eb1b23a8"
        },
        "downloads": -1,
        "filename": "CARNETORDREKB-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77e1c84ca6fdce1cb6bdb397c71d2ac3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15591,
        "upload_time": "2021-03-13T18:23:13",
        "upload_time_iso_8601": "2021-03-13T18:23:13.392960Z",
        "url": "https://files.pythonhosted.org/packages/c4/af/dcf578caad2948b8ba39f54f9a7d25c5e4b3f9c14c8e1338764964b0ea92/CARNETORDREKB-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77c67544c11bd4ea4961555b36a5bf3bc8c97295946ff28fd46f7ca8a3d7fc0a",
          "md5": "5f2569b606bdeedd19e2102db3902eb4",
          "sha256": "087fa83873def4c9b8d66f24cea0e2adb7a30102d66aed5549fc3200e4e2d923"
        },
        "downloads": -1,
        "filename": "CARNETORDREKB-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5f2569b606bdeedd19e2102db3902eb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29257,
        "upload_time": "2021-03-13T18:23:16",
        "upload_time_iso_8601": "2021-03-13T18:23:16.569238Z",
        "url": "https://files.pythonhosted.org/packages/77/c6/7544c11bd4ea4961555b36a5bf3bc8c97295946ff28fd46f7ca8a3d7fc0a/CARNETORDREKB-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c4afdcf578caad2948b8ba39f54f9a7d25c5e4b3f9c14c8e1338764964b0ea92",
        "md5": "77e1c84ca6fdce1cb6bdb397c71d2ac3",
        "sha256": "f3e5eb684962d36bc9a19b85b4ba4470b143dca15bbd987d5b292ef9eb1b23a8"
      },
      "downloads": -1,
      "filename": "CARNETORDREKB-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77e1c84ca6fdce1cb6bdb397c71d2ac3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15591,
      "upload_time": "2021-03-13T18:23:13",
      "upload_time_iso_8601": "2021-03-13T18:23:13.392960Z",
      "url": "https://files.pythonhosted.org/packages/c4/af/dcf578caad2948b8ba39f54f9a7d25c5e4b3f9c14c8e1338764964b0ea92/CARNETORDREKB-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77c67544c11bd4ea4961555b36a5bf3bc8c97295946ff28fd46f7ca8a3d7fc0a",
        "md5": "5f2569b606bdeedd19e2102db3902eb4",
        "sha256": "087fa83873def4c9b8d66f24cea0e2adb7a30102d66aed5549fc3200e4e2d923"
      },
      "downloads": -1,
      "filename": "CARNETORDREKB-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5f2569b606bdeedd19e2102db3902eb4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29257,
      "upload_time": "2021-03-13T18:23:16",
      "upload_time_iso_8601": "2021-03-13T18:23:16.569238Z",
      "url": "https://files.pythonhosted.org/packages/77/c6/7544c11bd4ea4961555b36a5bf3bc8c97295946ff28fd46f7ca8a3d7fc0a/CARNETORDREKB-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}