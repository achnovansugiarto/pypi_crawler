{
  "info": {
    "author": "Michael Prieto (michaelpri10)",
    "author_email": "michaelpri10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "voicecoding\n===========\n\n.. image:: https://img.shields.io/pypi/v/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/dm/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/pyversions/voicecoding.svg\n    :target: https://pypi.python.org/pypi/voicecoding/\n    :alt: Supported Python Versions\n\n.. image:: https://travis-ci.org/michaelpri10/voicecoding.svg?branch=master\n    :target: https://travis-ci.org/michaelpri10/voicecoding\n    :alt: Status\n\nAbout\n-----\n\nvoicecoding is a program that will allow people to code in Python using their voice. Using different voice commands that can be found in the `documentation <#documentation>`__, users can perform simple tasks in Python in an environment similar to the Python command-line interpreter. voicecoding is currently only a command-line application, but the plan is for it to eventually become a full Python IDE controlled completely by voice, while still staying open source and free. You can check this project out on `PyPi  <https://pypi.python.org/pypi/voicecoding>`__ or fork it on `Github <https://github.com/michaelpri10/voicecoding>`__.\n\nAfter you've `installed <#installation>`__ the program, you can run it by typing\n\n``python -m voicecoding``\n\nin your command prompt or terminal.\n\nInstallation\n------------\n\nOn all operating systems, you first need to install the program itself using ``pip``:\n\n``pip install voicecoding``\n\nThat will also install `SpeechRecognition <https://pypi.python.org/pypi/SpeechRecognition/>`__ which voicecoding depends on. You will have to manually install `PyAudio <https://people.csail.mit.edu/hubert/pyaudio/>`__, the other library that voicecoding depends on. The method of installation varies by operating system.\n\nMicrosoft Windows\n~~~~~~~~~~~~~~~~~\n\nYou can simply just use ``pip``:\n\n``pip install pyaudio``\n\nMac OS X\n~~~~~~~~\n\nFirst, you must install the PortAudio library with ``brew`` and then use ``pip`` to install PyAudio:\n\n``brew install portaudio``\n\n``pip install pyaudio``\n\nUbuntu/Debian\n~~~~~~~~~~~~~\n\nRun:\n\n``sudo apt-get install python-pyaudio python3-pyaudio``\n\nIf that does not work, you should just try installing with ``pip``:\n\n``pip install pyaudio``\n\nDocumentation\n-------------\n\nCommands\n~~~~~~~~\n\nAssign\n''''''\n\n-  structure: \"assign\" {say a `data type <#data-types>`__ and a value}\n   \"to variable\" {say a name for the variable}\n-  assigns a value to a variable\n-  example inputs: \"assign 10 to variable x\", \"assign list hello cut\n   world to variable y\"\n-  example outputs: ``x = 10``, ``y = [\"hello\", \"world\"]``\n\nPrint\n'''''\n\n-  structure: \"print\" {say a `data type <#data-types>`__ and a value}\n-  prints out a value\n-  example inputs: \"print 10\", \"print hello comma world exclamation\n   point\"\n-  example outputs: ``print(10)``, ``print(\"hello, world!\")``\n\nCall\n''''\n\n-  structure: \"call\" {say a function or `method <#methods>`__\n   expression}\n-  calls any function or method that may modify another piece of data\n-  example inputs: \"call variable x method append parameters 1\", \"call\n   variable x method pop\"\n-  example outputs: ``x.append(1)``, ``x.pop()``\n\nImport\n''''''\n\n-  structure: \"import\" {say any module name}\n-  imports a module to allow its method to be used\n-  example inputs: \"import math\", \"import web browser\"\n-  example outputs: ``import math``, ``import webbrowser``\n\nIf/Elif/Else\n''''''''''''\n\n-  structure: \"if comparison\"(comparison is optional) {say a\n   `comparison <#comparison>`__} \"elif comparison\"(comparison is\n   optional) {say a `comparison <#comparison>`__} \"else\" \"end\" -\n   unindents or ends entire statements\n-  control flow statement based on logic; after saying one of the above\n   commands, you can use others command inside of it\n-  example inputs: \"if comparison variable x equals variable y\", \"elif\n   variable x is greater than variable y\", \"else\"\n-  example outputs: ``if x == y:``, ``elif x > y:``, ``else:``\n\nFor\n'''\n\n-  structure: \"for\" {variable name} \"in\" {say an iterable `data\n   type <#data-types>`__ and a value} \"end\" - unindents or ends entire\n   statement\n-  control flow statement that iterates over a data type; after using\n   the command, you can use other commands inside of it\n-  example inputs: \"for i in list one cut two cut three\", \"for i in\n   function range params one hundred\"\n-  example outputs: ``for i in [1, 2, 3]:``, ``for i in range(100)``\n\nWhile\n'''''\n\n-  structure: \"while comparison\"(comparison is optional) {say a\n   `comparison <#comparison>`__} \"end\" - unindents or ends entire\n   statement\n-  control flow statement that will continue while a condition is true;\n   after using this command, you can use other commands inside of it\n-  example inputs: \"while comparison i is less than one hundred\", \"while\n   true\"\n-  example outputs: ``while i < 100:``, ``while True:``\n\nDefine\n''''''\n\n-  structure: \"define function\"(function is optional) {say a name for\n   the function} \"parameters variable\"(variable is optional) {say a name\n   for the parameter} \"cut\" ...\n-  used to allow users to define their own functions; after using this\n   command, you can use other commands inside of it\n-  example inputs: \"define function fibonacci parameters variable\n   number\", \"define factorial params number\"\n-  example outputs: ``def fibonacci(number):``,\n   ``def factorial(number):``\n\nReturn\n''''''\n\n-  structure: \"return\" {say a `data type <#data-types>`__ and a value}\n-  returns data from a function; can only be used in functions\n-  example inputs: \"return variable x\", \"return false\"\n-  example outputs: ``return x``, ``return False``\n\nData Types\n~~~~~~~~~~\n\nInteger\\*\n'''''''''\n\n-  any whole number\n-  structure: \"integer\"(optional) {say any whole number}\n-  example inputs: \"integer one\", \"twelve\", \"one hundred forty two\"\n-  example outputs: ``1``,\\ ``12``, ``142``\n\nString\\*\n''''''''\n\n-  any piece of text; is iterable\n-  structure: \"string\"(optional) {say anything}\n-  example inputs: \"string hello comma world exclamation point\",\n   \"space\", \"if you're reading this it's too late\"\n-  example outputs: ``\"hello, world!\"``, ``\" \"``,\n   ``\"if you're reading this it's too late\"``\n\nFloat\\*\n'''''''\n\n-  a decimal number\n-  structure: \"float\"(optional) {say any decimal}\n-  example inputs: \"float one point two\", \"three point one four one five\n   nine\"\n-  example outputs: ``1.2``, ``3.14159``\n\nBoolean\\*\n'''''''''\n\n-  stores data as true or false\n-  structure: \"boolean\"(optional) {either \"true\" or \"false\"}\n-  example inputs: \"boolean true\", \"false\"\n-  example outputs: ``True``, ``False``\n\nVariable\\*\\*\n''''''''''''\n\n-  stores data types\n-  structure: \"variable\"(sometimes optional) {any name}\n-  example inputs: \"variable x\", \"variable hello world\", \"i\"\n-  example outputs: ``x``, ``hello_world``, ``i``\n\nModule\\*\\*\n''''''''''\n\n-  allows you to use functions and methods from different Python files (note: always used with a method)\n-  stucture: \"module method\" {method name}\n-  example inputs: \"module math method factorial parameters ten\", \"module web browser method open params URL\"\n-  example outputs: ``math.factorial(10)``, ``webbrowser.open(url)``\n\nEquation\n''''''''\n\n-  for math and simple string concatenation\n-  structure: \"equation\" {say a `data type <#data-types>`__ and a value}\n   {say an `equation operator <#equation-operators>`__ {say a `data\n   type <#data-types>`__ and a value} ...\n-  example inputs: \"equation one plus five\", \"equation 12 times 4 plus\n   3\", \"equation 6 mod 5\"\n-  example outputs: ``1 + 5``, ``12 * 4  + 3``, ``6 % 5``\n\nComparison\n''''''''''\n\n-  for comparing different Python objects\n-  structure: \"comparison\" {say a `data type <#data-types>`__ and a\n   value} {say a `comparison operator <#comparison-operators>`__} {say a\n   `data type <#data-types>`__ and a value} ...\n-  example inputs: \"comparison variable x is True\", \"comparison ten is\n   greater than twenty five\", \"comparison five is less than seven and\n   ten is greater than nine\"\n-  example outputs: ``x is True``, ``10 > 25``, ``5 < 7 and 10 > 9``\n\nList\n''''\n\n-  ordered group of different Python objects; is iterable\n-  structure: \"list\" {say a `data type <#data-types>`__} {say a value}\n   \"cut\" {say a `data type <#data-types>`__ and a value} ...\n-  example inputs: \"list\", \"list one cut two cut three\", \"list hello cut\n   one point five\"\n-  example outputs: ``[]``, ``[1, 2, 3]``, ``[\"hello\", 1.5]``\n\nTuple\n'''''\n\n-  immutable sequence of Python objects\n-  structure: \"tuple\" {say a `data type <#data-types>`__} {say a value}\n   \"cut\" {say a `data type <#data-types>`__ and a value} ...\n-  example inputs: \"tuple\", \"tuple one cut two cut three\", \"tuple hello\"\n-  example outputs: ``()``, ``(1, 2, 3)``, ``(\"hello\",)``\n\nSet\n'''\n\n-  group of unordered, unique Python objects\n-  structure: \"set\" {say a `data type <#data-types>`__ and a value}\n   \"cut\" {say a `data type <#data-types>`__} {say a value} ...\n-  example inputs: \"set\", \"set one cut one cut three\", \"set hello cut\n   one point five\"\n-  example outputs: ``set()``, ``{1, 3}``, ``{\"hello\", 1.5}``\n\nFunction\n''''''''\n\n-  blocks of code that can perform action on parameters; when naming a\n   builtin function, you can say what a shorthand name actually means;\n   ie: \"integer\" -> ``int()``, \"length\" -> ``len()``, \"has attribute\" ->\n   ``hasattr()``\n-  structure: \"function\" {say a function name} \"parameters\" {say a `data\n   type <#data-types>`__ and a value} cut ...\n-  example inputs: \"function list parameters hello\", \"function int\n   params string ten\"\n-  example outputs: ``list(\"hello\")``, ``int(\"10\")``\n\n\\*Doesn't have be said when using this data type in a command; ie: you\ncan just say \"one\" instead of \"integer one\" to get the result of ``1``.\n\n\\*\\*\\ `\"Variable\" <#variable>`__ doesn't have to be said if the variable\nhas been defined, is being used as a parameter in a `function <#function>`__ or `method <#methods>`__, or is the variable in a `for loop <#for>`__. `\"Module\" <#module>`__ doesn't have to be said if the module is already imported.\n\nOther Things\n~~~~~~~~~~~~\n\nMethods\n'''''''\n\n-  blocks of code that are called on class instances to perform actions\n-  structure: {say a `data type <#data-types>`__ and a value} \"method\"\n   {say a method name} \"parameters\" {say a `data type <#data-types>`__\n   and a value} cut ...\n-  example inputs: \"variable x method append parameters one\", \"space\n   method join params function list params hello\"\n-  example outputs: ``x.append(1)``, ``\" \".join(list(\"hello\"))``\n\nKeywords\n''''''''\n\n-  \"exit\" - exits the program\n-  \"cancel\" - cancels a multiline statement without exiting the program\n-  \"end\" - unindents or ends a `for loop <#for>`__, `while loop <#while>`__, `function definition <#define>`__, or `if/elif/else statement <#if-elif-else>`__\n\nEquation Operators\n''''''''''''''''''\n\n-  for use in equations\n-  ``+`` - \"plus\"\n-  ``-`` - \"minus\"\n-  ``*`` - \"times\", \"multiplied by\"\n-  ``/`` - \"divided by\"\n-  ``**`` - \"to the power of\"\n-  ``%`` - \"mod\", \"modulus\"\n\nComparison Operators\n''''''''''''''''''''\n\n-  for use in comparison expressions\n-  ``==`` - \"equals\", \"is equal to\"\n-  ``!=`` - \"does not equal\", \"is not equal to\"\n-  ``>`` - \"is greater than\"\n-  ``<`` - \"is less than\"\n-  ``>=`` - \"is greater than or equal to\"\n-  ``<=`` - \"is less than or equal to\"\n-  Key words\n-  ``and``\n-  ``or``\n-  ``is``\n-  ``not``\n-  ``in``\n\nShorthand words\n'''''''''''''''\n\n-  \"params\" can be used in place of \"parameters\"",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/michaelpri10/voicecoding",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "voicecoding",
    "package_url": "https://pypi.org/project/voicecoding/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/voicecoding/",
    "project_urls": {
      "Homepage": "https://github.com/michaelpri10/voicecoding"
    },
    "release_url": "https://pypi.org/project/voicecoding/2.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python program that allows to code with your voice",
    "version": "2.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1988596,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "816533c2ca80b80fd88b3c436e421b9cf1423b1d7d9f91e178ec29f774695097",
          "md5": "ee939672163ae0bf27779edc0c918a12",
          "sha256": "2721b1088b56aa0350f5717006e448a929820c346b0cc5a8970d6d9d7edee18b"
        },
        "downloads": -1,
        "filename": "voicecoding-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee939672163ae0bf27779edc0c918a12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19549,
        "upload_time": "2016-01-24T18:37:31",
        "upload_time_iso_8601": "2016-01-24T18:37:31.201309Z",
        "url": "https://files.pythonhosted.org/packages/81/65/33c2ca80b80fd88b3c436e421b9cf1423b1d7d9f91e178ec29f774695097/voicecoding-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c3dfa1394d0c56a94298cff4a78d98900cfc7e1d7367c9299a671529c195383",
          "md5": "bf4120af58d09175979171a2841c4492",
          "sha256": "bdf861c622934fa3c610abc5f5fd870aff418eeb688e8eea15ccd8d7b333981c"
        },
        "downloads": -1,
        "filename": "voicecoding-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf4120af58d09175979171a2841c4492",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23126,
        "upload_time": "2016-02-06T22:17:40",
        "upload_time_iso_8601": "2016-02-06T22:17:40.525846Z",
        "url": "https://files.pythonhosted.org/packages/1c/3d/fa1394d0c56a94298cff4a78d98900cfc7e1d7367c9299a671529c195383/voicecoding-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8e35d7fc46b63396daa5ea29d4d4f05f1a6467e00ef4dbfa36267f0b596fb47",
          "md5": "da55838f273d14b5aa598c77b6e1d7ca",
          "sha256": "a9c8276f99b4dfd7a0e629d186486391a2d2b503cffac5ed77a027dc03a8c445"
        },
        "downloads": -1,
        "filename": "voicecoding-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da55838f273d14b5aa598c77b6e1d7ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20939,
        "upload_time": "2016-02-14T21:49:10",
        "upload_time_iso_8601": "2016-02-14T21:49:10.991618Z",
        "url": "https://files.pythonhosted.org/packages/b8/e3/5d7fc46b63396daa5ea29d4d4f05f1a6467e00ef4dbfa36267f0b596fb47/voicecoding-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3c4ab07bff38cd891aa1038ac6b90daee2a2fdd7c0a95ecdc9d10d46e550134",
          "md5": "80436c155866c44aabfc24c4035ad5e1",
          "sha256": "52f106f16cea749b1764b2420193d906fc38012f667bfac1be8f1d654c89dc49"
        },
        "downloads": -1,
        "filename": "voicecoding-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80436c155866c44aabfc24c4035ad5e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20480,
        "upload_time": "2016-02-18T03:03:24",
        "upload_time_iso_8601": "2016-02-18T03:03:24.784176Z",
        "url": "https://files.pythonhosted.org/packages/d3/c4/ab07bff38cd891aa1038ac6b90daee2a2fdd7c0a95ecdc9d10d46e550134/voicecoding-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "813fa5395ee4fead0c60ca2e5ddf4313cc4146e147ee0acff37a70e8c3b4f5b8",
          "md5": "0474fedc6a26c00915f80bdf16c9a801",
          "sha256": "be130926ca11d5b7ba54a4ad4ba601e7a54242af290b448abcfc0cb67d431615"
        },
        "downloads": -1,
        "filename": "voicecoding-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0474fedc6a26c00915f80bdf16c9a801",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20489,
        "upload_time": "2016-02-18T03:09:48",
        "upload_time_iso_8601": "2016-02-18T03:09:48.863491Z",
        "url": "https://files.pythonhosted.org/packages/81/3f/a5395ee4fead0c60ca2e5ddf4313cc4146e147ee0acff37a70e8c3b4f5b8/voicecoding-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80baca0834a0ade591c8f8c8b3aa7affd4b24db46af85da9ff47ee740b2f20d0",
          "md5": "66b699dd3226bdead6086625863566a4",
          "sha256": "1ea39c7632d2b7dc417d55db8957e4c9bb0abe0fac8f2bd285c119c003b7496a"
        },
        "downloads": -1,
        "filename": "voicecoding-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66b699dd3226bdead6086625863566a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21422,
        "upload_time": "2016-02-27T05:31:02",
        "upload_time_iso_8601": "2016-02-27T05:31:02.090173Z",
        "url": "https://files.pythonhosted.org/packages/80/ba/ca0834a0ade591c8f8c8b3aa7affd4b24db46af85da9ff47ee740b2f20d0/voicecoding-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b8e7aab8c1ff411b6fe7e3e34a3e1646ddf83afe19ebe71c79d382c2536d4b8",
          "md5": "921ef5cecec768aaa9ed686fb58dbe94",
          "sha256": "769e7c775e49c011eec9e0c9d5eef3bcbc31cf337b25c42c4ca97649435ebeb1"
        },
        "downloads": -1,
        "filename": "voicecoding-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "921ef5cecec768aaa9ed686fb58dbe94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22142,
        "upload_time": "2016-03-01T02:36:37",
        "upload_time_iso_8601": "2016-03-01T02:36:37.687447Z",
        "url": "https://files.pythonhosted.org/packages/8b/8e/7aab8c1ff411b6fe7e3e34a3e1646ddf83afe19ebe71c79d382c2536d4b8/voicecoding-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a86491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368",
          "md5": "a878402b61c2c798fdbfdcd40ce21af1",
          "sha256": "b7ff26d6cc36faa365b1ca2c972822249df518f11785707fb585f9f371c4ed53"
        },
        "downloads": -1,
        "filename": "voicecoding-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a878402b61c2c798fdbfdcd40ce21af1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22174,
        "upload_time": "2016-03-04T01:00:09",
        "upload_time_iso_8601": "2016-03-04T01:00:09.771261Z",
        "url": "https://files.pythonhosted.org/packages/3a/86/491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368/voicecoding-2.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a86491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368",
        "md5": "a878402b61c2c798fdbfdcd40ce21af1",
        "sha256": "b7ff26d6cc36faa365b1ca2c972822249df518f11785707fb585f9f371c4ed53"
      },
      "downloads": -1,
      "filename": "voicecoding-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a878402b61c2c798fdbfdcd40ce21af1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22174,
      "upload_time": "2016-03-04T01:00:09",
      "upload_time_iso_8601": "2016-03-04T01:00:09.771261Z",
      "url": "https://files.pythonhosted.org/packages/3a/86/491f0ca497fdca03feb5954f1673c6d28a29dc9d151884d4ced25028e368/voicecoding-2.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}