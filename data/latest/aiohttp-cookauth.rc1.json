{
  "info": {
    "author": "Evgeny Solomatin",
    "author_email": "solgenya@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "aiohttp_cookauth\n================\n.. image:: https://img.shields.io/pypi/v/aiohttp-cookauth.svg\n    :target: https://pypi.python.org/pypi/aiohttp-cookauth\n\nThe library is a fork of `aiohttp_session`__ and `aiohttp_security`__. The fork provides identity and authorization for `aiohttp.web`__ only via cookies using redis storage.\n\n.. _aiohttp_web: http://aiohttp.readthedocs.org/en/latest/web.html\n\n__ aiohttp_web_\n\n.. _aiohttp_session: https://github.com/aio-libs/aiohttp-session\n\n__ aiohttp_session_\n\n.. _aiohttp_security: https://github.com/aio-libs/aiohttp-security\n\n__ aiohttp_session_\n\n\nFeatures\n____________\n\n - added the ability to forget all user sessions using forget_all function\n - check_permission function return userid now\n\nInstallation\n------------\n::\n\n    $ pip install aiohttp_cookauth\n\nExample\n--------\n::\n\n from aiohttp import web\n from aioredis import create_redis_pool\n from aiohttp_cookauth import check_permission, \\\n     is_anonymous, remember, forget, \\\n     setup as setup_cookauth, RedisStorage, forget_all\n from aiohttp_cookauth.abc import AbstractAuthorizationPolicy\n\n\n # Demo authorization policy for only one user.\n # User 'jack' has only 'listen' permission.\n class SimpleJack_AuthorizationPolicy(AbstractAuthorizationPolicy):\n     async def authorized_userid(self, identity):\n         \"\"\"Retrieve authorized user id.\n         Return the user_id of the user identified by the identity\n         or 'None' if no user exists related to the identity.\n         \"\"\"\n         if identity == 'jack':\n             return identity\n\n     async def permits(self, identity, permission, context=None):\n         \"\"\"Check user permissions.\n         Return True if the identity is allowed the permission\n         in the current context, else return False.\n         \"\"\"\n         return identity == 'jack' and permission in ('listen',)\n\n\n async def handler_root(request):\n     is_logged = not await is_anonymous(request)\n     return web.Response(text='''<html><head></head><body>\n             Hello, I'm Jack, I'm {logged} logged in.<br /><br />\n             <a href=\"/login\">Log me in</a><br />\n             <a href=\"/logout\">Log me out</a><br />\n             <a href=\"/logout/all\">Log out for all</a><br /><br />\n             Check my permissions,\n             when i'm logged in and logged out.<br />\n             <a href=\"/listen\">Can I listen?</a><br />\n             <a href=\"/speak\">Can I speak?</a><br />\n         </body></html>'''.format(\n             logged='' if is_logged else 'NOT',\n         ), content_type='text/html')\n\n\n async def handler_login_jack(request):\n     redirect_response = web.HTTPFound('/')\n     await remember(request, redirect_response, 'jack')\n     return redirect_response\n\n\n async def handler_logout(request):\n     redirect_response = web.HTTPFound('/')\n     await forget(request, redirect_response)\n     return redirect_response\n\n\n async def handler_logout_all(request):\n     redirect_response = web.HTTPFound('/')\n     await forget_all(request, identity='jack')\n     return redirect_response\n\n\n async def handler_listen(request):\n     await check_permission(request, 'listen')\n     return web.Response(body=\"I can listen!\")\n\n\n async def handler_speak(request):\n     await check_permission(request, 'speak')\n     return web.Response(body=\"I can speak!\")\n\n\n async def make_app():\n     # make app\n     app = web.Application()\n\n     # add the routes\n     app.add_routes([\n         web.get('/', handler_root),\n         web.get('/login', handler_login_jack),\n         web.get('/logout', handler_logout),\n         web.get('/logout/all', handler_logout_all),\n         web.get('/listen', handler_listen),\n         web.get('/speak', handler_speak)])\n\n     # set up policies\n     redis = await create_redis_pool(('localhost', 6379))\n     storage = RedisStorage(redis, cookie_name='MY_SESSION', max_age=900)\n     setup_cookauth(app, SimpleJack_AuthorizationPolicy(), storage)\n\n     return app\n\n\n if __name__ == '__main__':\n     web.run_app(make_app(), port=9000)\n\nDocumentation\n-------------\nUse aiohttp_security documentation:\n\nhttps://aiohttp-security.readthedocs.io/\n\n\nLicense\n-------\n\n``aiohttp_cookauth`` is offered under the Apache 2 license.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GenyaSol/aiohttp-cookauth/",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiohttp-cookauth",
    "package_url": "https://pypi.org/project/aiohttp-cookauth/",
    "platform": "",
    "project_url": "https://pypi.org/project/aiohttp-cookauth/",
    "project_urls": {
      "Homepage": "https://github.com/GenyaSol/aiohttp-cookauth/"
    },
    "release_url": "https://pypi.org/project/aiohttp-cookauth/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "authorization via cookies for aiohttp.web",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9049960,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "233d6bcf667a3be5d99762d0ddaa08ea3f756a70ca82c652834297cefcfa37d8",
          "md5": "552c32ab074d7d4bbc78839fa6fa0ea6",
          "sha256": "93ad1e4ae9b984be5f2a6760c4c9f7153e6ffcb95175da24a3cc53dd06ff48d6"
        },
        "downloads": -1,
        "filename": "aiohttp-cookauth-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "552c32ab074d7d4bbc78839fa6fa0ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9485,
        "upload_time": "2021-01-04T17:29:31",
        "upload_time_iso_8601": "2021-01-04T17:29:31.307021Z",
        "url": "https://files.pythonhosted.org/packages/23/3d/6bcf667a3be5d99762d0ddaa08ea3f756a70ca82c652834297cefcfa37d8/aiohttp-cookauth-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "233d6bcf667a3be5d99762d0ddaa08ea3f756a70ca82c652834297cefcfa37d8",
        "md5": "552c32ab074d7d4bbc78839fa6fa0ea6",
        "sha256": "93ad1e4ae9b984be5f2a6760c4c9f7153e6ffcb95175da24a3cc53dd06ff48d6"
      },
      "downloads": -1,
      "filename": "aiohttp-cookauth-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "552c32ab074d7d4bbc78839fa6fa0ea6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9485,
      "upload_time": "2021-01-04T17:29:31",
      "upload_time_iso_8601": "2021-01-04T17:29:31.307021Z",
      "url": "https://files.pythonhosted.org/packages/23/3d/6bcf667a3be5d99762d0ddaa08ea3f756a70ca82c652834297cefcfa37d8/aiohttp-cookauth-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}