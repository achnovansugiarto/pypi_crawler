{
  "info": {
    "author": "Bobby Steinbach",
    "author_email": "developers@meanpug.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# django-gsheets\nDjango app for keeping models and google sheets synced\n\n## Purpose\ndjango-gsheets is a pluggable Django app that adds functionality (via mixins) to models allowing them to sync data to and from Google Sheets. The app errs on the side of caution in that deletions from your DB won't propagate to the sheet and visa versa.\n\n## Installation\n### Install django-gsheets\n```\npip install django-gsheets\n```\n### Add django-gsheets to INSTALLED_APPS\n```python\nINSTALLED_APPS = [\n    ...\n    'gsheets',\n    ...\n]\n```\nAfter adding, make sure to run `migrate`\n\n### Create a Google Cloud Project and Download OAuth Client Secrets\nGoogle has a good guide for that [here](https://developers.google.com/sheets/api/quickstart/python) (you only need to do Step 1).\n\n### Update Project Settings\nUpdate your project settings to tell django-gsheets where the downloaded credentials are. You should just need the following:\n```python\nGSHEETS = {\n    'CLIENT_SECRETS': '<PATH TO DOWNLOADED CREDS>'\n}\n```\n\n### Add GSheets URLS to the Project\nUpdate your project URLs to include django-gsheets paths.\n```python\nurlpatterns = [\n    ...\n    path('', include('gsheets.urls')),\n]\n```\n\n## Usage\n### Add the SheetSyncableMixin to a Model\nIn order to provide two-way sync capability to a models' data, all you need to do is add the `SheetSyncableMixin` to it and tell the model what sheet to use. For example:\n\n```python\nfrom django.db import models\nfrom gsheets import mixins\nfrom uuid import uuid4\n\n\nclass Person(mixins.SheetSyncableMixin, models.Model):\n    spreadsheet_id = '18F_HLftNtaouHgA3fmfT2M1Va9oO-YWTBw2EDsuz8V4'\n    model_id_field = 'guid'\n\n    guid = models.CharField(primary_key=True, max_length=255, default=uuid4)\n\n    first_name = models.CharField(max_length=127)\n    last_name = models.CharField(max_length=127)\n    email = models.CharField(max_length=127, null=True, blank=True, default=None)\n    phone = models.CharField(max_length=127, null=True, blank=True, default=None)\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name} // {self.email} ({self.guid})'\n```\nTo two-way sync sheet data, simply run `Person.sync_sheet()`.\n\nIf you want to be more fine-grained and have models that either just push to Google Sheets or just pull, you can swap `SheetSyncableMixin` for `SheetPushableMixin` or `SheetPullableMixin` (respectively).\n\n### Authorize Google Sheets\nBefore your first usage, you'll need to authorize the app to perform operations on your Google Sheets. To do so, access `/gsheets/authorize/` on your application and go through the standard oauth flow.\n\n### Further Configuration\nYou can further configure the functionality of sheet sync by specifying any of the following fields on the model.\n\n| Field  | Default | Description |\n| ------------- | ------------- | ------------- |\n| spreadsheet_id  | None  | designates the Google Sheet to sync  |\n| sheet_name  | Sheet1  | the name of the sheet in the Google Sheet  |\n| data_range  | A1:Z  | the range of data in the sheet to keep synced. First row must contain field names that match model fields.  |\n| model_id_field  | id  | the name of the model field storing a unique ID for each row  |\n| sheet_id_field  | Django GUID  | the name of the field in the synced sheet that will store model instance IDs  |\n| batch_size  | 500  | (internal) the batch size to use when updating sheets with progress  |\n| max_rows  | 30000  | (internal) used for internal calculations, don't change unless you know what you're doing  |\n| max_col  | Z  | (internal) used for internal calculations, don't change unless you know what you're doing  |\n\n#### Postprocessing\nYou can hook into the postprocessing step of row pulling to perform operations like tying the model instance to a related object. For example, the following demonstrates using the `sheet_row_processed` signal to update a Car with it's owner information based on a field called `owner_last_name` in the spreadsheet\n```python\nfrom django.dispatch import receiver\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom gsheets.signals import sheet_row_processed\nfrom .models import Car, Person\n\n\n@receiver(sheet_row_processed, sender=Car)\ndef tie_car_to_owner(instance=None, created=None, row_data=None, **kwargs):\n    try:\n        instance.owner = Person.objects.get(last_name__iexact=row_data['owner_last_name'])\n        instance.save()\n    except (ObjectDoesNotExist, KeyError):\n        pass\n\n```\n\n## Management Commands\nIf you don't want to manually sync data to and from models to gsheets, `django-gsheets` ships with a handy management command that automatically discovers all models mixing in one of `SheetPullableMixin`, `SheetPushableMixin`, or `SheetSyncableMixin` and runs the appropriate sync command. To execute, simply run `python manage.py syncgsheets`.\n\n## Known Limitations\n\n* No support for Related fields\n\n## Development\nAny and all contributions welcome. To get started with a development environment, simply pull down a copy of this repo and bring up the environment with `docker-compose up -d`. Before doing so, however, you should have the following in place:\n\n1. A google project setup (notes on that in the `Installation` section above). After setting up, download the client credentials JSON file to the `creds` folder in this repo. This folder is volume mounted into the running application container at `/creds`.\n2. An ngrok (or similar) server set up to proxy an https connection to your local dev environment. You'll need this because Google OAuth2 only supports https redirect URIs.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rommel-Montgomery/django-gsheets",
    "keywords": "roymo",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-gsheets-roymo",
    "package_url": "https://pypi.org/project/django-gsheets-roymo/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-gsheets-roymo/",
    "project_urls": {
      "Homepage": "https://github.com/Rommel-Montgomery/django-gsheets"
    },
    "release_url": "https://pypi.org/project/django-gsheets-roymo/0.0.9.1/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Fork of django-gsheets",
    "version": "0.0.9.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9743701,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1ad0209407162fe92a1566db9667055d8e87cd57e5b0b5099fdf08506858b19",
          "md5": "c92843c60f40245650ee011255f48aa2",
          "sha256": "f77ef07568adc440ba7ef77225090281052553a105bf8f9f472cb4b1ab7746d5"
        },
        "downloads": -1,
        "filename": "django-gsheets-roymo-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c92843c60f40245650ee011255f48aa2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 15688,
        "upload_time": "2021-03-11T17:15:37",
        "upload_time_iso_8601": "2021-03-11T17:15:37.603511Z",
        "url": "https://files.pythonhosted.org/packages/b1/ad/0209407162fe92a1566db9667055d8e87cd57e5b0b5099fdf08506858b19/django-gsheets-roymo-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91bbf1a9760f5803abc461a6d0a06ef140ad1461075bc21dfae16e8bfcea73a4",
          "md5": "b8eaf5c72e7da5eb99921e24e7ba2405",
          "sha256": "c6a8aaa8c50265660cdd822fb1f42d0c751569ccc3711f8a8ef852d783392025"
        },
        "downloads": -1,
        "filename": "django-gsheets-roymo-0.0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b8eaf5c72e7da5eb99921e24e7ba2405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 19143,
        "upload_time": "2021-03-11T19:01:26",
        "upload_time_iso_8601": "2021-03-11T19:01:26.296531Z",
        "url": "https://files.pythonhosted.org/packages/91/bb/f1a9760f5803abc461a6d0a06ef140ad1461075bc21dfae16e8bfcea73a4/django-gsheets-roymo-0.0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "91bbf1a9760f5803abc461a6d0a06ef140ad1461075bc21dfae16e8bfcea73a4",
        "md5": "b8eaf5c72e7da5eb99921e24e7ba2405",
        "sha256": "c6a8aaa8c50265660cdd822fb1f42d0c751569ccc3711f8a8ef852d783392025"
      },
      "downloads": -1,
      "filename": "django-gsheets-roymo-0.0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b8eaf5c72e7da5eb99921e24e7ba2405",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 19143,
      "upload_time": "2021-03-11T19:01:26",
      "upload_time_iso_8601": "2021-03-11T19:01:26.296531Z",
      "url": "https://files.pythonhosted.org/packages/91/bb/f1a9760f5803abc461a6d0a06ef140ad1461075bc21dfae16e8bfcea73a4/django-gsheets-roymo-0.0.9.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}