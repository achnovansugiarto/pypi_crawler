{
  "info": {
    "author": "Zhan Shi",
    "author_email": "phe.zshi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<h1 align='center' >安全多方计算协议</h1>\n\n\n---\n\n## 项目背景\n\n安全多方计算（Secure Multi-Party Computation）的研究主要是针对无可信第三方的情况下，如何安全地计算一个约定函数的问题。安全多方计算是电子选举、门限签名以及电子拍卖等诸多应用得以实施的密码学基础。\n\n一个安全多方计算协议，如果对于拥有无限计算能力攻击者而言是安全的，则称作是信息论安全的或无条件安全的；如果对于拥有多项式计算能力的攻击者是安全的，则称为是密码学安全的或条件安全的。\n\n已有的结果证明了在无条件安全模型下，当且仅当恶意参与者的人数少于总人数的1/3时，安全的方案才存在。而在条件安全模型下，当且仅当恶意参与者的人数少于总人数的一半时，安全的方案才存在。\n\n安全多方计算起源于1982年[姚期智](https://baike.baidu.com/item/姚期智)的百万富翁问题。后来Oded Goldreich有比较细致系统的论述。\n\n基于[phe](https://github.com/data61/python-paillier)库 (Paillier Homomorphic Encryption) 的安全多方计算协议实现，包含：\n\n- 安全乘法协议\n- 安全除法协议\n- 安全最大值计算协议\n- 安全最小值计算协议\n- 安全奇偶性判断协议\n- 安全二进制分解协议\n- 安全二进制与协议\n- 安全二进制或协议\n- 安全二进制非协议\n- 安全二进制异或协议\n- 安全相等协议\n- 安全不相等协议\n- 安全大于协议\n- 安全大于等于协议\n- 安全小于协议\n- 安全小于等于协议\n\n---\n\n## 项目环境\n\n- `python3.8`\n- `gmpy2>=2.0.8`\n- `pandas>=1.2.4`\n- `phe>=1.4.0`\n- `tqdm>=4.59.0`\n- `numpy>=1.20.2`\n\n详见`requirements.txt`。\n\n---\n\n## 项目示例\n\n### 准备工作\n\n安全依赖环境: `pip install -r requirements.txt`\n\n安装`smpcp`库: `pip install smpcp`\n\n引入`phe`库: `import phe`\n\n引入`smpcp`库: `from smpcp import CloudPlatform, CloudPlatformThird, SecureMultiPartyComputationProtocol`\n\n### 生成密钥\n\n```python\npublic_key, secret_key = phe.generate_paillier_keypair(n_length=2048)\n```\n\n其中`n_length`为密钥长度。\n\n### 定义云服务器\n\n```python\ncloud1 = CloudPlatform(public_key=public_key)\ncloud2 = CloudPlatformThird(public_key=public_key, secret_key=secret_key)\n```\n\n### 定义安全多方计算协议\n\n```python\nprotocol = SecureMultiPartyComputationProtocol(c1=cloud1, c2=cloud2)\n```\n\n### 编码\n\n```python\nn1 = protocol.encode(public_key.encrypt(6))\nn2 = public_key.encrypt(3)\nb1 = protocol.encode(public_key.encrypt(1))\nb2 = public_key.encrypt(0)\n```\n\n### 解码\n\n```python\nassert secret_key.decrypt(n1.decode()) == 6\n```\n\n### 安全多方计算协议实现\n\n```python\n# TODO 安全乘法协议\nassert secret_key.decrypt(n1 * n2) == 18\n# TODO 安全除法协议\nassert secret_key.decrypt(n1 / n2) == 2\n# TODO 安全最大值协议\nassert secret_key.decrypt(n1.optimum(n2, 'max')) == 6\n# TODO 安全最小值协议\nassert secret_key.decrypt(n1.optimum(n2, 'min')) == 3\n# TODO 安全奇偶性判断协议\nassert secret_key.decrypt(n1.parity()) == 0\nassert secret_key.decrypt(protocol.encode(n2).parity()) == 1\n# TODO 安全二进制分解协议\nbit = []\nfor v in n1.bit_dec(3):\n    bit.append(secret_key.decrypt(v))\nassert bit == [1, 1, 0]\n# TODO 安全二进制与协议\nassert secret_key.decrypt(b1 | b2) == 1\n# TODO 安全二进制或协议\nassert secret_key.decrypt(b1 & b2) == 0\n# TODO 安全二进制非协议\nassert secret_key.decrypt(b1.bit_not()) == 0\n# TODO 安全二进制异或协议\nassert secret_key.decrypt(b1 ^ b2) == 1\n# TODO 安全相等协议\nassert secret_key.decrypt(n1 == n2) == 0\nassert secret_key.decrypt(n1 == n2 * 2) == 1\n# TODO 安全不相等协议\nassert secret_key.decrypt(n1 != n2) == 1\nassert secret_key.decrypt(n1 != n2 * 2) == 0\n# TODO 安全大于协议\nassert secret_key.decrypt(n1 > n2) == 1\nassert secret_key.decrypt(n2 > n1) == 0\n# TODO 安全大于等于协议\nassert secret_key.decrypt(n1 >= n2) == 1\nassert secret_key.decrypt(n2 >= n1) == 0\n# TODO 安全小于协议\nassert secret_key.decrypt(n1 < n2) == 0\nassert secret_key.decrypt(n2 < n1) == 1\n# TODO 安全小于等于协议\nassert secret_key.decrypt(n1 <= n2) == 0\nassert secret_key.decrypt(n2 <= n1) == 1\n```\n\n详见`example.py`。\n\n---\n\n## 项目测试\n\n经过`Unit Test`测试，测试结果如下：\n\n```python\nkey_length = 2048  # TODO 密钥长度\n\npublic_key, secret_key = phe.generate_paillier_keypair(n_length=key_length)  # 生成密钥对\n\ncloud1 = CloudPlatform(public_key=public_key)  # 云服务器1\ncloud2 = CloudPlatformThird(public_key=public_key, secret_key=secret_key)  # 云服务器2\n\nprotocol = SecureMultiPartyComputationProtocol(c1=cloud1, c2=cloud2)  # 安全多方计算协议类\n\n\nclass SMPCPTest(unittest.TestCase):\n    \"\"\"\n    安全多方计算协议测试类\n    \"\"\"\n\n    def setUp(self):\n        \"\"\"\n        测试前\n        \"\"\"\n        # 生成浮点数\n        self.float1 = int(\n            gmpy2.mpz_random(gmpy2.random_state(\n                int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)),\n                                     key_length))), key_length)) * random.uniform(0.1, 1.0)\n        self.float2 = int(\n            gmpy2.mpz_random(gmpy2.random_state(\n                int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n                key_length)) * random.uniform(0.1, 1.0)\n        self.float_n1 = protocol.encode(public_key.encrypt(self.float1))\n        self.float_n2 = public_key.encrypt(self.float2)\n        # 生成整数\n        self.int1 = int(gmpy2.mpz_random(gmpy2.random_state(\n            int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n            key_length))\n        self.int2 = int(gmpy2.mpz_random(gmpy2.random_state(\n            int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n            key_length))\n        self.int_n1 = protocol.encode(public_key.encrypt(self.int1))\n        self.int_n2 = public_key.encrypt(self.int2)\n        return super().setUp()\n\n    def tearDown(self):\n        \"\"\"\n        测试后\n        \"\"\"\n        return super().tearDown()\n\n    # TODO 安全乘法协议测试\n    # @unittest.skip('跳过安全乘法协议')\n    def test_mul(self):\n        \"\"\"\n        安全乘法协议\n        \"\"\"\n        # 浮点乘法测试：经过测试，最高支持8位浮点乘法\n        self.assertEqual(round(self.float1 * self.float2, 8),\n                         round(secret_key.decrypt(self.float_n1 * self.float_n2), 8))\n\n        # 整数乘法测试：经过测试，无明显问题\n        self.assertEqual(self.int1 * self.int2, secret_key.decrypt(self.int_n1 * self.int_n2))\n\n    # TODO 安全除法协议测试\n    # @unittest.skip('跳过安全除法协议')\n    def test_div(self):\n        \"\"\"\n        安全除法协议\n        \"\"\"\n        # 浮点除法测试：经过测试，最高支持10位浮点除法\n        self.assertEqual(round(self.float1 / self.float2, 10),\n                         round(secret_key.decrypt(self.float_n1 / self.float_n2), 10))\n\n        # 整数除法测试：经过测试，最高支持10位整数除法\n        self.assertEqual(round(self.int1 / self.int2, 10), round(secret_key.decrypt(self.int_n1 / self.int_n2), 10))\n\n    # TODO 安全最值计算协议测试\n    # @unittest.skip('跳过安全最值计算协议')\n    def test_optimum(self):\n        \"\"\"\n        安全最值计算协议\n        \"\"\"\n        mode = 'max' if random.random() > 0.5 else 'min'\n        if mode == 'max':\n            # 浮点最大值计算测试：经过测试，无明显问题\n            self.assertEqual(max(self.float1, self.float2),\n                             secret_key.decrypt(self.float_n1.optimum(self.float_n2, 'max')))\n\n            # 整数最大值计算测试：经过测试，无明显问题\n            self.assertEqual(max(self.int1, self.int2), secret_key.decrypt(self.int_n1.optimum(self.int_n2, 'max')))\n        else:\n            # 浮点最小值计算测试：经过测试，无明显问题\n            self.assertEqual(min(self.float1, self.float2),\n                             secret_key.decrypt(self.float_n1.optimum(self.float_n2, 'min')))\n\n            # 整数最小值计算测试：经过测试，无明显问题\n            self.assertEqual(min(self.int1, self.int2), secret_key.decrypt(self.int_n1.optimum(self.int_n2, 'min')))\n\n    # TODO 安全奇偶性判断协议测试\n    # @unittest.skip('跳过安全奇偶性判断协议')\n    def test_parity(self):\n        \"\"\"\n        安全奇偶性判断协议\n        \"\"\"\n        # 整数奇偶性判断测试：经过测试，无明显问题\n        self.assertEqual(self.int1 % 2, secret_key.decrypt(self.int_n1.parity()))\n\n    # TODO 安全二进制分解协议测试\n    # @unittest.skip('跳过安全二进制分解协议')\n    def test_bit_dec(self):\n        \"\"\"\n        安全二进制分解协议\n        \"\"\"\n        # 整数二进制分解测试：经过测试，无明显问题\n        bit = len(bin(self.int1).split('b')[1])\n        result = ''.join([str(secret_key.decrypt(v)) for v in self.int_n1.bit_dec(bit)])\n        self.assertEqual(bin(self.int1).split('b')[1], result)\n\n    # TODO 安全二进制与协议测试\n    # @unittest.skip('跳过安全二进制与协议')\n    def test_and(self):\n        \"\"\"\n        安全二进制与协议\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # 二进制或测试：经过测试，无明显问题\n        self.assertEqual(bit1 & bit2, secret_key.decrypt(bit_n1 & bit_n2))\n\n    # TODO 安全二进制或协议测试\n    # @unittest.skip('跳过安全二进制或协议')\n    def test_or(self):\n        \"\"\"\n        安全二进制或协议\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # 二进制或测试：经过测试，无明显问题\n        self.assertEqual(bit1 | bit2, secret_key.decrypt(bit_n1 | bit_n2))\n\n    # TODO 安全二进制非协议测试\n    # @unittest.skip('跳过安全二进制非协议')\n    def test_bit_not(self):\n        \"\"\"\n        安全二进制非协议\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        # 二进制或测试：经过测试，无明显问题\n        self.assertEqual(1 - bit1, secret_key.decrypt(bit_n1.bit_not()))\n\n    # TODO 安全二进制异或协议测试\n    # @unittest.skip('跳过安全二进制异或协议')\n    def test_xor(self):\n        \"\"\"\n        安全二进制异或协议\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # 二进制或测试：经过测试，无明显问题\n        self.assertEqual(bit1 ^ bit2, secret_key.decrypt(bit_n1 ^ bit_n2))\n\n    # TODO 安全相等协议测试\n    # @unittest.skip('跳过安全相等协议')\n    def test_eq(self):\n        \"\"\"\n        安全相等协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 == self.float1 else 0,\n                         secret_key.decrypt(self.float_n1 == self.float_n1.decode()))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 == self.int1 else 0, secret_key.decrypt(self.int_n1 == self.int_n1.decode()))\n\n    # TODO 安全不相等协议测试\n    # @unittest.skip('跳过安全不相等协议')\n    def test_ne(self):\n        \"\"\"\n        安全不相等协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 != self.float2 else 0, secret_key.decrypt(self.float_n1 != self.float_n2))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 != self.int2 else 0, secret_key.decrypt(self.int_n1 != self.int_n2))\n\n    # TODO 安全大于协议测试\n    # @unittest.skip('跳过安全大于协议')\n    def test_gt(self):\n        \"\"\"\n        安全大于协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 > self.float2 else 0, secret_key.decrypt(self.float_n1 > self.float_n2))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 > self.int2 else 0, secret_key.decrypt(self.int_n1 > self.int_n2))\n\n    # TODO 安全大于等于协议测试\n    # @unittest.skip('跳过安全大于等于协议')\n    def test_ge(self):\n        \"\"\"\n        安全大于等于协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 >= self.float2 else 0, secret_key.decrypt(self.float_n1 >= self.float_n2))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 >= self.int2 else 0, secret_key.decrypt(self.int_n1 >= self.int_n2))\n\n    # TODO 安全小于协议测试\n    # @unittest.skip('跳过安全小于协议')\n    def test_lt(self):\n        \"\"\"\n        安全小于协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 < self.float2 else 0, secret_key.decrypt(self.float_n1 < self.float_n2))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 < self.int2 else 0, secret_key.decrypt(self.int_n1 < self.int_n2))\n\n    # TODO 安全小于等于协议测试\n    # @unittest.skip('跳过安全小于等于协议')\n    def test_le(self):\n        \"\"\"\n        安全小于等于协议\n        \"\"\"\n        # 浮点数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.float1 <= self.float2 else 0, secret_key.decrypt(self.float_n1 <= self.float_n2))\n\n        # 整数相等测试：经过测试，极少数情况下，浮点数会影响结果\n        self.assertEqual(1 if self.int1 <= self.int2 else 0, secret_key.decrypt(self.int_n1 <= self.int_n2))\n```\n\n详见`test_case/test_smpcp.py`, 项目报告依赖基于`unittest`的[项目](https://github.com/TesterlifeRaymond/BeautifulReport)`test_case/BeautifulReport.py`。\n\n---\n\n## 联系方式\n\n作者：沈阳航空航天大学 数据安全与隐私计算课题组 施展\n\nGithub: https://github.com/shine813/\n\n邮箱：phe.zshi@gmail.com\n\n如有问题，可及时联系作者\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "smpcp",
    "package_url": "https://pypi.org/project/smpcp/",
    "platform": null,
    "project_url": "https://pypi.org/project/smpcp/",
    "project_urls": {
      "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
    },
    "release_url": "https://pypi.org/project/smpcp/2.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13729778,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a9293614e3c6c299759458b0f9f6cff4885e5d04b08d654834bf0f9db33ea59",
          "md5": "fa0f9d0481d2e018252c480fcc3c8cc5",
          "sha256": "60638ee7e9e6ce6938e75c458f453f560ba5cf34ca5cf14b812a79c58a201c3d"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa0f9d0481d2e018252c480fcc3c8cc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11475,
        "upload_time": "2022-05-06T04:07:22",
        "upload_time_iso_8601": "2022-05-06T04:07:22.976707Z",
        "url": "https://files.pythonhosted.org/packages/1a/92/93614e3c6c299759458b0f9f6cff4885e5d04b08d654834bf0f9db33ea59/smpcp-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7019f4b5a1df0dd6a76d5e6ce3ab236b8d84db3895a5556f77d8d3769a42a33b",
          "md5": "47d5c6160ad6b4a560a96b281538b443",
          "sha256": "006448bdc9264fb59450e1ab3c8841da8c0fee04f0c376b9b2bff57769e28ffd"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47d5c6160ad6b4a560a96b281538b443",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12515,
        "upload_time": "2022-05-06T04:07:26",
        "upload_time_iso_8601": "2022-05-06T04:07:26.058181Z",
        "url": "https://files.pythonhosted.org/packages/70/19/f4b5a1df0dd6a76d5e6ce3ab236b8d84db3895a5556f77d8d3769a42a33b/smpcp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d8cd2442e37d7b4c2b5eec9d4985a2b49955de2548cbdd7bce67b5e406db21d",
          "md5": "6d228616f1b3bed836dc7caf582c55ea",
          "sha256": "8853366a5ebd6bc3da477a7a0af3e8b9ceb3b31016b6b3ae213e5738d2a891b2"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d228616f1b3bed836dc7caf582c55ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14343,
        "upload_time": "2022-05-06T04:23:25",
        "upload_time_iso_8601": "2022-05-06T04:23:25.831544Z",
        "url": "https://files.pythonhosted.org/packages/3d/8c/d2442e37d7b4c2b5eec9d4985a2b49955de2548cbdd7bce67b5e406db21d/smpcp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcdad37a17f15d48bf7f8bd065d8a6d87c6f471380df453b4cbc5a46ac4c9cb4",
          "md5": "23b3095b96db99a712cd1bec2abbc063",
          "sha256": "31da0a9810027f4f989f7fa29e524fa64c6ffd77c0777a4d83f9b4a0d52e29b6"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23b3095b96db99a712cd1bec2abbc063",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16288,
        "upload_time": "2022-05-06T04:23:27",
        "upload_time_iso_8601": "2022-05-06T04:23:27.764435Z",
        "url": "https://files.pythonhosted.org/packages/bc/da/d37a17f15d48bf7f8bd065d8a6d87c6f471380df453b4cbc5a46ac4c9cb4/smpcp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b47833b7161f5de84e5170aac92d7371682f1ca922606d37813d88bba2f80c7e",
          "md5": "0efbfbfd0ef0c01a0c35f66e2759c2f9",
          "sha256": "665a02252ace163b731af3141aabde0a6a2d70953938419377a2307dd2a113c1"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0efbfbfd0ef0c01a0c35f66e2759c2f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7936,
        "upload_time": "2022-05-06T04:37:58",
        "upload_time_iso_8601": "2022-05-06T04:37:58.240803Z",
        "url": "https://files.pythonhosted.org/packages/b4/78/33b7161f5de84e5170aac92d7371682f1ca922606d37813d88bba2f80c7e/smpcp-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed658342e56299f84cb43a48432a31e4fb9324aafdee608909041fa35b87413e",
          "md5": "1f97fec8c115999c22b5ce4ebe9661c1",
          "sha256": "ba5e31edccd39b836ebef8d79c9d7126a3f9d4f07a3e07353688a395db7649ee"
        },
        "downloads": -1,
        "filename": "smpcp-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f97fec8c115999c22b5ce4ebe9661c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10763,
        "upload_time": "2022-05-06T04:38:00",
        "upload_time_iso_8601": "2022-05-06T04:38:00.663649Z",
        "url": "https://files.pythonhosted.org/packages/ed/65/8342e56299f84cb43a48432a31e4fb9324aafdee608909041fa35b87413e/smpcp-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7af9d1c86b4befd15ee014b63a42cf7c28d29b43df2d28bbb4eaf768a132dabf",
          "md5": "44d4f5fa75490dd2b93c932571ecd531",
          "sha256": "8c3eab9f6bea9561ad610be2e067d843c816c4a471965ebcdb00c673e61dbad6"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d4f5fa75490dd2b93c932571ecd531",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8457,
        "upload_time": "2022-05-06T04:45:53",
        "upload_time_iso_8601": "2022-05-06T04:45:53.601899Z",
        "url": "https://files.pythonhosted.org/packages/7a/f9/d1c86b4befd15ee014b63a42cf7c28d29b43df2d28bbb4eaf768a132dabf/smpcp-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1981d9673466c1714aa56aa271c0deda4d5fadfce3b1da43abae34b629886c08",
          "md5": "28b5dbc5ed6fe04fe14849ae6d2d55d7",
          "sha256": "b87712bed217dc1e685408fd8f7cf95415f0eb980ae4f9b9a8bba582b609244a"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28b5dbc5ed6fe04fe14849ae6d2d55d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11045,
        "upload_time": "2022-05-06T04:45:56",
        "upload_time_iso_8601": "2022-05-06T04:45:56.034225Z",
        "url": "https://files.pythonhosted.org/packages/19/81/d9673466c1714aa56aa271c0deda4d5fadfce3b1da43abae34b629886c08/smpcp-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a17e459e7ab4353236eaffcea1537f7b51c6ecb3da0825eee074c03b2b0432d",
          "md5": "affd539442fac89a0d6c83df963d0880",
          "sha256": "bb6eac628f5e1d827c1ca7818dc456cf8ea4985ca4713a8da1c116b0106624e3"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "affd539442fac89a0d6c83df963d0880",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8498,
        "upload_time": "2022-05-06T04:55:08",
        "upload_time_iso_8601": "2022-05-06T04:55:08.270293Z",
        "url": "https://files.pythonhosted.org/packages/8a/17/e459e7ab4353236eaffcea1537f7b51c6ecb3da0825eee074c03b2b0432d/smpcp-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffc4518a30b6471a01a7a51ed2d78775f28131abbf590f0c88531863faa0bc49",
          "md5": "9317f3d2a12b3f018e55e9bdc3316759",
          "sha256": "b98a82ec695cb7cfbb586046768ec8934f9d9c385411de689a76edc0f8f67af9"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9317f3d2a12b3f018e55e9bdc3316759",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11104,
        "upload_time": "2022-05-06T04:55:13",
        "upload_time_iso_8601": "2022-05-06T04:55:13.479165Z",
        "url": "https://files.pythonhosted.org/packages/ff/c4/518a30b6471a01a7a51ed2d78775f28131abbf590f0c88531863faa0bc49/smpcp-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d0ed2aa01cae4b57bb6e3fd325aefc4d106fb1a739971ad2d52189b03e0d4d4",
          "md5": "10fba74892c2583557a9dbba1076ed7a",
          "sha256": "6676c4bd9c8f59b2d71ab82eb57ed180d5f14224156e766279d3dfa34b485efa"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10fba74892c2583557a9dbba1076ed7a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8514,
        "upload_time": "2022-05-06T06:37:58",
        "upload_time_iso_8601": "2022-05-06T06:37:58.118510Z",
        "url": "https://files.pythonhosted.org/packages/5d/0e/d2aa01cae4b57bb6e3fd325aefc4d106fb1a739971ad2d52189b03e0d4d4/smpcp-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13535285cee64e66a32789cd8c0cef69ecd655fb96a7f923aab12a43a43c7747",
          "md5": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
          "sha256": "19f89edb51c99066024056ca8831b35bdfe1a256493cd91726db02f35169c2e5"
        },
        "downloads": -1,
        "filename": "smpcp-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11121,
        "upload_time": "2022-05-06T06:38:00",
        "upload_time_iso_8601": "2022-05-06T06:38:00.989425Z",
        "url": "https://files.pythonhosted.org/packages/13/53/5285cee64e66a32789cd8c0cef69ecd655fb96a7f923aab12a43a43c7747/smpcp-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d0ed2aa01cae4b57bb6e3fd325aefc4d106fb1a739971ad2d52189b03e0d4d4",
        "md5": "10fba74892c2583557a9dbba1076ed7a",
        "sha256": "6676c4bd9c8f59b2d71ab82eb57ed180d5f14224156e766279d3dfa34b485efa"
      },
      "downloads": -1,
      "filename": "smpcp-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10fba74892c2583557a9dbba1076ed7a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8514,
      "upload_time": "2022-05-06T06:37:58",
      "upload_time_iso_8601": "2022-05-06T06:37:58.118510Z",
      "url": "https://files.pythonhosted.org/packages/5d/0e/d2aa01cae4b57bb6e3fd325aefc4d106fb1a739971ad2d52189b03e0d4d4/smpcp-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13535285cee64e66a32789cd8c0cef69ecd655fb96a7f923aab12a43a43c7747",
        "md5": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
        "sha256": "19f89edb51c99066024056ca8831b35bdfe1a256493cd91726db02f35169c2e5"
      },
      "downloads": -1,
      "filename": "smpcp-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11121,
      "upload_time": "2022-05-06T06:38:00",
      "upload_time_iso_8601": "2022-05-06T06:38:00.989425Z",
      "url": "https://files.pythonhosted.org/packages/13/53/5285cee64e66a32789cd8c0cef69ecd655fb96a7f923aab12a43a43c7747/smpcp-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}