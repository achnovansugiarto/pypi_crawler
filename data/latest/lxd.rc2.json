{
  "info": {
    "author": "Alexander Vasin <alvassin@yandex-team.ru>",
    "author_email": "alvassin@yandex-team.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Natural Language :: Russian",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "Async python client for `LXD REST API`_ (currently under heavy development).\n\n.. _LXD REST API: https://linuxcontainers.org/lxd/api/master/#/\n\n.. contents::\n\n\nUsage\n=====\n\nInstallation\n------------\n\n.. code-block:: shell\n\n    pip install lxd\n\n\nInitialize client\n-----------------\n.. code-block:: python\n\n    import asyncio\n    from pathlib import Path\n\n    from yarl import URL\n\n    from lxd.client import lxd_client\n\n\n    async def main():\n        client = lxd_client(\n            URL('https://mylxd:8443/'),\n            cert_path=Path('~/.config/lxc/client.crt'),\n            key_path=Path('~/.config/lxc/client.key'),\n            endpoint_cert_path=Path('~/.config/lxc/servercerts/mylxd.crt'),\n        )\n\n        await client.authenticate(\n            cert_path=Path('~/.config/lxc/client.crt'),\n            password='your-trust-password'\n        )\n\n\n    asyncio.run(main())\n\nExample usages\n--------------\n.. code-block:: python\n\n    # Recursion 0 returns only links to objects,\n    # you can resolve them by awaiting\n    instance_links = await client.instances.list(recursion=0)\n    instance = await instance_links[0]\n\n    # Recursion 1 returns only some fields\n    instances = await client.instances.list(recursion=1)\n\n    # Recursion 2 returns all possible information\n    instances = await client.instances.list(recursion=2)\n\n\nChange instance state\n---------------------\n.. code-block:: python\n\n    from lxd.entities.instances import InstanceAction\n\n    instances = await client.instances.list()\n    operation = await client.instances.update_state(\n        instances[0].name, action=InstanceAction.STOP\n    )\n    await client.operations.wait(operation.id)  # wait as long as possible\n    await client.operations.wait(operation.id, timeout=30)  # 30s\n\n\nGet event stream\n----------------\n.. code-block:: python\n\n    async for event in client.server.get_events():\n        # See Event object for more properties\n        print(event.type)\n        print(event.metadata)\n\n\nAvailable Endpoints\n===================\n\nServer\n------\n\nserver.get\n~~~~~~~~~~\nGet server environment and configuration.\n\n.. code-block:: python\n\n    # See lxd.entities.server.Server\n    info = await client.server.get()\n    print(info.config)\n    print(info.environment)\n\n\nserver.update_configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nUpdate the entire `server configuration <https://linuxcontainers.org/lxd/docs/master/server/>`_.\n\n.. code-block:: python\n\n    await client.server.update_configuration({\n        'core.https_address': '0.0.0.0:8443'\n        'core.trust_password': 'very-strong-password'\n    })\n\n\nserver.update_configuration_subset\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nUpdate a subset of the `server configuration <https://linuxcontainers.org/lxd/docs/master/server/>`_.\n\n.. code-block:: python\n\n    await client.server.update_configuration_subset({\n        'images.remote_cache_expiry': 2\n    })\n\n\nserver.get_resources\n~~~~~~~~~~~~~~~~~~~~\nGets the hardware information profile of the LXD server.\n\n.. code-block:: python\n\n    # See lxd.entities.server.ServerResources\n    server_resources = await client.server.get_resources()\n    print(server_resources.cpu)\n\n\nserver.get_events\n~~~~~~~~~~~~~~~~~\nConnect to `event API <https://linuxcontainers.org/lxd/docs/master/events/>`_\nusing websocket.\n\n.. code-block:: python\n\n    # Listen all events\n    async for event in client.server.get_events():\n        print(event.type)\n        print(event.metadata)\n\n    # Listen to specific events\n    async for event in client.server.get_events(type='operation'):\n        print(event.metadata.id)\n        print(event.metadata.status)\n\n\nCertificates\n------------\ncertificates.list\n~~~~~~~~~~~~~~~~~\n\nReturns a list of trusted certificates.\n\n.. code-block:: python\n\n    # See lxd.entities.certificates.Certificate\n    certs = await client.certificates.list()\n    print(certs[0].fingerprint)\n\n\nIf you pass ``recursion=0`` parameter, lxd would return just references,\nwhich are represented in current module as\n``lxd.entities.certificates.CertificateLink`` objects.\n\nIf you ``await`` such link object - you would get object itself (separate http\nrequest is performed for every await call).\n\n.. code-block:: python\n\n    cert_links = await client.certificates.list(recursion=0)\n    certs = await asyncio.gather(*cert_links)\n\n\ncertificates.get\n~~~~~~~~~~~~~~~~\n\nGets a specific certificate entry from the trust store by fingerprint.\n\n.. code-block:: python\n\n    from cryptography.x509 import load_pem_x509_certificate\n    from cryptography.hazmat.primitives import hashes\n\n    fprint = '97f267c0fe20fd013b6b4ba3f5440ea3e9361ce8568d41c633f28c620ab37ea0'\n    cert = await client.certificates.get(fprint)\n\n    cert_obj = load_pem_x509_certificate(cert.certificate.encode())\n    assert cert_obj.fingerprint(hashes.SHA256()).hex() == fprint\n\n\ncertificates.add\n~~~~~~~~~~~~~~~~\n\nAdds a certificate to the trust store as trusted user (client certificate\nshould be trusted).\n\n.. code-block:: python\n\n    from cryptography import x509\n    from cryptography.x509.oid import NameOID\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import hashes, serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=default_backend()\n    )\n    subj = x509.Name([\n        x509.NameAttribute(NameOID.COMMON_NAME, \"alvassin@osx\")\n    ])\n\n    cert = x509.CertificateBuilder().subject_name(\n        subj\n    ).issuer_name(\n        subj\n    ).public_key(\n        private_key.public_key()\n    ).serial_number(\n        x509.random_serial_number()\n    ).not_valid_before(\n        datetime.utcnow()\n    ).not_valid_after(\n        datetime.utcnow() + timedelta(days=365)\n    ).sign(\n        private_key=private_key,\n        algorithm=hashes.SHA256(),\n        backend=default_backend()\n    )\n\n    await client.certificates.add(\n        cert.public_bytes(serialization.Encoding.PEM)\n    )\n\n\nIf ``password`` argument is specified, adds a certificate to the trust store\nas an untrusted user.\n\n.. code-block:: python\n\n    await client.certificates.add(\n        cert.public_bytes(serialization.Encoding.PEM),\n        password='your-trust-password'\n    )\n\n\ncertificates.update_configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUpdate the entire certificate configuration.\n\n.. code-block:: python\n\n    await client.certificates.update_configuration(\n        '97f267c0fe20fd013b6b4ba3f5440ea3e9361ce8568d41c633f28c620ab37ea0',\n        certificate='-----BEGIN CERTIFICATE-----\\n...',\n        name='new-name',\n        projects=[],\n        restricted=False,\n        type='client'\n    )\n\n\ncertificates.update_configuration_subset\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUpdate a subset of the certificate configuration.\n\n.. code-block:: python\n\n    await client.certificates.update_configuration_subset(\n        '97f267c0fe20fd013b6b4ba3f5440ea3e9361ce8568d41c633f28c620ab37ea0',\n        name='another-name'\n    )\n\ncertificates.remove\n~~~~~~~~~~~~~~~~~~~\n\nRemoves the certificate from the trust store.\n\n.. code-block:: python\n\n    await client.certificates.remove(\n        '97f267c0fe20fd013b6b4ba3f5440ea3e9361ce8568d41c633f28c620ab37ea0'\n    )\n\n\nInstances\n---------\n* client.instances.list\n* client.instances.get\n* client.instances.create\n* client.instances.delete\n* client.instances.get_state\n* client.instances.update_state\n\nOperations\n----------\n* client.operations.list\n* client.operations.get\n* client.operations.wait\n* client.operations.cancel\n\nTODO\n====\n* Add `filtering support`_.\n\n.. _filtering support: https://linuxcontainers.org/lxd/docs/master/rest-api/#filtering\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lxd",
    "package_url": "https://pypi.org/project/lxd/",
    "platform": "all",
    "project_url": "https://pypi.org/project/lxd/",
    "project_urls": {
      "Source": "https://github.com/alvassin/lxd"
    },
    "release_url": "https://pypi.org/project/lxd/0.2.16/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "LXD Client",
    "version": "0.2.16",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14379044,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "539b952f532cab0557aef2c3748c60e8256aec43a887cff476d6238f071b8853",
          "md5": "c92d3d4d6d63d8f9fa219e4621778b7d",
          "sha256": "10dd9170e735155732ff9607a2e24817b42e07a01252aec174c289246d899191"
        },
        "downloads": -1,
        "filename": "lxd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c92d3d4d6d63d8f9fa219e4621778b7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 8008,
        "upload_time": "2022-07-07T21:09:19",
        "upload_time_iso_8601": "2022-07-07T21:09:19.923250Z",
        "url": "https://files.pythonhosted.org/packages/53/9b/952f532cab0557aef2c3748c60e8256aec43a887cff476d6238f071b8853/lxd-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "099629bcd95d5ec4558fc2f9853bab094d438952af79c28ff5cb9e00af8a1977",
          "md5": "0e2f89dde8b17afd8ad6c514d2ac0998",
          "sha256": "723b01b583422560f63033b6bb2999132c0df6f6ac27670d9644d60ba4c47cd6"
        },
        "downloads": -1,
        "filename": "lxd-0.2.16.tar.gz",
        "has_sig": false,
        "md5_digest": "0e2f89dde8b17afd8ad6c514d2ac0998",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 11631,
        "upload_time": "2022-07-08T20:19:42",
        "upload_time_iso_8601": "2022-07-08T20:19:42.162038Z",
        "url": "https://files.pythonhosted.org/packages/09/96/29bcd95d5ec4558fc2f9853bab094d438952af79c28ff5cb9e00af8a1977/lxd-0.2.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "099629bcd95d5ec4558fc2f9853bab094d438952af79c28ff5cb9e00af8a1977",
        "md5": "0e2f89dde8b17afd8ad6c514d2ac0998",
        "sha256": "723b01b583422560f63033b6bb2999132c0df6f6ac27670d9644d60ba4c47cd6"
      },
      "downloads": -1,
      "filename": "lxd-0.2.16.tar.gz",
      "has_sig": false,
      "md5_digest": "0e2f89dde8b17afd8ad6c514d2ac0998",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 11631,
      "upload_time": "2022-07-08T20:19:42",
      "upload_time_iso_8601": "2022-07-08T20:19:42.162038Z",
      "url": "https://files.pythonhosted.org/packages/09/96/29bcd95d5ec4558fc2f9853bab094d438952af79c28ff5cb9e00af8a1977/lxd-0.2.16.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}