{
  "info": {
    "author": "WANG Ruohan",
    "author_email": "ruohawang2-c@my.cityu.edu.hk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# SCOT\nSCOT is an implementation of a probabilistic tensor decomposition framework for single-cell multi-omics data integration. SCOT accepts the input of datasets from multiple omics, with missing values allowed.\n\n![image](https://github.com/deepomicslab/SCOT/blob/main/framework.png)\n\n# Getting started\n\n## Prerequisite\n+ numpy\n+ pytorch 1.9.0\n\n## Install\n```\npip install SCOT-bio\n```\n\n## Examples\nThis is an example of multiple datasets when features have corresponding information.\n```Python\nfrom scot import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit(data) # the imputed data\nnp.savetxt(\"global_cell_embeddings.csv\", sc_model.C, delimiter = ',') # global cell embeddings\nnp.savetxt(\"global_gene_embeddings.csv\", sc_model.G, delimiter = ',') # global gene embeddings\nnp.savetxt(\"local_cell_embeddings.csv\", sc_model.C, delimiter = ',') # omics-specific cell embeddings\nnp.savetxt(\"local_gene_embeddings.csv\", sc_model.G, delimiter = ',') # omics-specific gene embeddings\n```\nWhen the features of different omics do not have corresponding information, please use the ```fit_list``` function, which accepts the input as a list of matrices.\n```Python\nfrom scot import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list(data)\n```\nIf the input does not contain missing values (\"NA\"), we provide ```fit_complete``` and ```fit_list_complete``` functions to accelerate the optimization since they take advantage of matrix operations.\n```Python\nfrom scot import sc_multi_omics\n\ndata = np.array([expression_data, methylation_data])\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_complete(data) # the imputed data\n```\n```Python\nfrom scot import sc_multi_omics\n\ndata = [expression_data, protein_data]\nsc_model = sc_multi_omics()\npredict_data = sc_model.fit_list_complete(data)\n```\n\nWe put the complete scripts for the analysis described in the manuscript under ```examples/``` directory for detailed usage examples and reproduction. The example data can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1F_WBwNsHggjTqgFfTm6IugNKpb0xJTje?usp=sharing).\n\n## Parameters\n###  ```sc_multi_omics```\n> + ```K1```: The local element-wise product parameter, see the manuscript for details (default=20).\n> + ```K2```: The local element-wise product parameter (default=20).\n> + ```K3```: The local element-wise product parameter (default=20).\n> + ```random_seed```: The random seed used in optimization (default=111).\n\n###  ```fit```\n> + ```opt```: The optimization algorithm for gradient descent, including SGD, Adam, Adadelta, Adagrad, AdamW, SparseAdam, Adamax, ASGD, LBFGS (default=\"Adam\").\n> + ```dist```:The distribution used for modeling, including gaussian, poisson, negative_bionomial (default=\"gaussian\").\n> + ```lr```: The learning rate for gradient descent (default=1e-2).\n> + ```n_epochs```: The number of optimization epochs (default=1000).\n> + ```lambda_C_regularizer```: The coefficient for the penalty term of global cell embeddings (default=0.01).\n> + ```lambda_G_regularizer```: The coefficient for the penalty term of global gene embeddings (default=0.01).\n> + ```lambda_O_regularizer```: The coefficient list for the penalty term of global omics embeddings; the length of the list should be the same with the number of omics (default=[0.01, 0.01]).\n> + ```lambda_OC_regularizer```: The coefficient list for the penalty term of omics-specific cell embeddings; the length of the list should be the same with the number of omics, not avaiable for complete functions (default=[1, 1]).\n> + ```lambda_OG_regularizer```: The coefficient list for the penalty term of omics-specific gene embeddings, the length of the list should be the same with the number of omics, not avaiable for list functions (default=[1, 1]).\n> + ```batch_size```: The batch size used for gradient descent, not avaiable for complete functions (default=1000).\n> + ```device```: CPU or GPU (default='cuda' if torch.cuda.is_available() else 'cpu').\n> + ```verbose```: Whether to print loss for each epoch (default=True).\n\n### Maintainer\nWANG Ruohan ruohawang2-c@my.cityu.edu.hk",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/deepomicslab/SCOT",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SCOT-bio",
    "package_url": "https://pypi.org/project/SCOT-bio/",
    "platform": null,
    "project_url": "https://pypi.org/project/SCOT-bio/",
    "project_urls": {
      "Homepage": "https://github.com/deepomicslab/SCOT"
    },
    "release_url": "https://pypi.org/project/SCOT-bio/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "SCOT is an implementation of a probabilistic tensor decomposition framework for single-cell multi-omics data integration.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13716593,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1b81e580c5db017c98b6e255cb9ad3d4d0ad5e24e2c0388d1b9efd007a31694",
          "md5": "984f70d750d16e8031cf5da40d5291aa",
          "sha256": "699b338ce7c8ff1eeb2cb4497c051dc9e8b0fb5c64a3e0033e2d310445b839ae"
        },
        "downloads": -1,
        "filename": "SCOT-bio-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "984f70d750d16e8031cf5da40d5291aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5923,
        "upload_time": "2022-05-05T02:39:11",
        "upload_time_iso_8601": "2022-05-05T02:39:11.381384Z",
        "url": "https://files.pythonhosted.org/packages/f1/b8/1e580c5db017c98b6e255cb9ad3d4d0ad5e24e2c0388d1b9efd007a31694/SCOT-bio-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1b81e580c5db017c98b6e255cb9ad3d4d0ad5e24e2c0388d1b9efd007a31694",
        "md5": "984f70d750d16e8031cf5da40d5291aa",
        "sha256": "699b338ce7c8ff1eeb2cb4497c051dc9e8b0fb5c64a3e0033e2d310445b839ae"
      },
      "downloads": -1,
      "filename": "SCOT-bio-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "984f70d750d16e8031cf5da40d5291aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5923,
      "upload_time": "2022-05-05T02:39:11",
      "upload_time_iso_8601": "2022-05-05T02:39:11.381384Z",
      "url": "https://files.pythonhosted.org/packages/f1/b8/1e580c5db017c98b6e255cb9ad3d4d0ad5e24e2c0388d1b9efd007a31694/SCOT-bio-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}