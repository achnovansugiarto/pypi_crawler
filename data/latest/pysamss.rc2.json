{
  "info": {
    "author": "Callum Bruce",
    "author_email": "callum.bruce1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pySAMSS\n\nPython Space Asset Management and Simulation System\n\nA Python package for managing and simulating assets in Space.\n\n![alt text](https://github.com/c-bruce/pysamss/blob/master/examples/ISS_example.png \"pySAMSS - ISS Example\")\n\n# Introduction\n\npySAMSS provides a full 6 degree of freedom state space model representation of CelestialBody and Vessel objects. Using a numerical integration scheme (i.e. Euler or RK4) the future state of CelestialBody and Vessel objects can be found explicitly where:\n\n```python\nstate0 = np.array([u, v, w, x, y, z, phi_d, theta_d, psi_d, qw, qx, qy, qz]) # State vector\n\nU = np.array([Fx, Fy, Fz, Mx, My, Mz]) # Input vector\n\nA = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5 * state0[6], -0.5 * state0[7], -0.5 * state0[8]],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5 * state0[6], 0, 0.5 * state0[8], -0.5 * state0[7]],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5 * state0[7], -0.5 * state0[8], 0, 0.5 * state0[6]],\n              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5 * state0[8], 0.5 * state0[7], -0.5 * state0[6], 0]]) # System matrix\n\nB = np.array([[1/m, 0, 0, 0, 0, 0],\n              [0, 1/m, 0, 0, 0, 0],\n              [0, 0, 1/m, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, Ii[0,0], Ii[0,1], Ii[0,2]],\n              [0, 0, 0, Ii[1,0], Ii[1,1], Ii[1,2]],\n              [0, 0, 0, Ii[2,0], Ii[2,1], Ii[2,2]],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0, 0]]) # Control matrix. Note: m = mass, Ii = inverse inertia matrix\n\nstate_d = np.dot(A, state0) + np.dot(B, U) # State derivative vector [u_d, v_d, w_d, x_d, y_d, z_d, phi_dd, theta_dd, psi_dd, qw_d, qx_d, qy_d, qz_d]\n```\n\n# Installation\n\nInstall latest version on pip using:\n\n```\npip install pysamss\n```\n\nAlternatively, to install the latest development version of pySAMSS first make sure you have git installed, see [here](https://git-scm.com/downloads), then clone the repository:\n\n```\ngit clone https://github.com/c-bruce/pysamss.git\n```\n\nNext, build the .tar.gz distributable:\n\n```\npython setup.py sdist\n```\n\nFinally, cd into the ./dist/ directory and install using pip:\n\n```\npip install pysamss-0.0.1.tar.gz\n```\n\n# Using pySAMSS\n\nBegin by creating a System instance and add CelestialBody and Vessel objects to the current Timestep:\n\n```python\n# Create System instance\nsystem = pysamss.System('EarthMoonISS')\n\n# Add CelestialBody objects to system\nsystem.current.addCelestialBody(pysamss.CelestialBody('Earth', 5.972e24, 6.371e6))\nsystem.current.addCelestialBody(pysamss.CelestialBody('Moon', 7.348e22, 1.737e6, parent_name='Earth'))\n\n# Add Vessel objects to system\nsystem.current.addVessel(pysamss.Vessel('ISS', [pysamss.Stage(419725, 1, 10, np.array([0, 0, 0]))], parent_name='Earth'))\n```\n\nDefine and set initial conditions for CelestialBody objects. This can be done convieniently using the [jplephem](https://pypi.org/project/jplephem/) package which can load and use ephemeris from NASA's Jet Propulsion Laboratory:\n\n```python\ntime = system.current.getJulianDate()\nkernel = SPK.open('de430.bsp')\n# Earth\nearth_pos, earth_vel = kernel[3,399].compute_and_differentiate(time)\nearth_pos *= 1000 # Convert from km -> m\nearth_vel /= 86.4 # Convert from km/day -> m/s\nsystem.current.celestial_bodies['Earth'].setPosition(earth_pos)\nsystem.current.celestial_bodies['Earth'].setVelocity(earth_vel)\n# Moon\nmoon_pos, moon_vel = kernel[3,301].compute_and_differentiate(time)\nmoon_pos *= 1000 # Convert from km -> m\nmoon_vel /= 86.4 # Convert from km/day -> m/s\nsystem.current.celestial_bodies['Moon'].setPosition(moon_pos)\nsystem.current.celestial_bodies['Moon'].setVelocity(moon_vel)\n```\n\nDefine and set initial conditions for Vessel objects. This can be done convieniently using the [spk4](https://pypi.org/project/sgp4/) package which takes Two Line Element (TLE) data from [CelesTrak](http://celestrak.com/) and returns position and velocity vectors relative to the Earth-centered inertial coordinate system:\n\n```python\n# Get TLE data from CelesTrak\nhttp = urllib3.PoolManager()\ntle = http.request('GET', 'https://www.celestrak.com/NORAD/elements/stations.txt')\ntle = tle.data.decode('utf-8').strip().split('\\r\\n') # Gets full TLE's for constelation into a list\n# ISS\ntime = np.modf(time) # Split Julian date into integer and decimal for spg4 library\niss_tle = tle[0:3]\niss = Satrec.twoline2rv(iss_tle[1], iss_tle[2])\ne, iss_pos, iss_vel = iss.sgp4(time[1], time[0])\niss_pos = np.array(iss_pos) * 1000\niss_vel = np.array(iss_vel) * 1000\nsystem.current.vessels['ISS'].setPosition(iss_pos, local=True)\nsystem.current.vessels['ISS'].setVelocity(iss_vel, local=True)\n```\n\nSet system timestep, end time, save interval and run the simulation:\n\n```python\n# Simulate system\nsystem.setDt(0.1)\nsystem.setEndTime(5561.0)\nsystem.setSaveInterval(10)\nsystem.simulateSystem()\n```\n\nAll simulation data is written out to *.h5 files saved in the *_data directory. Once a simulation is complete this data can be read and post processed. pySAMSS comes with an interactive widget, based on [mayavi](https://docs.enthought.com/mayavi/mayavi/), for visually post processing simulation data:\n\n```python\n# Load system data\nsystem.load('EarthMoonISS.psm')\n\n# Get data\niss_pos = system.timestep[100].vessels['ISS'].getPosition()\n\n# Visual post processing\nfig = pysamss.MainWidget()\nfig.loadSystem(system)\nfig.showMaximized()\nmlab.show()\n```\n\nSee the [examples](https://github.com/c-bruce/pysamss/tree/master/examples) directory for more pySAMSS examples. \n\nNotes:\n\n- The System class currently only supports a gravity as a force/torque source. See \"Future Developments\" for information on how this will change in the future.\n\n- CelestialBody and Vessel objects can be used and simulated independently. Falcon9_example.py shows an example of how this can be achieved - in this example, a Vessel \"falcon9\", has two force/torque sources - gravity and thrust. The Vessels orientation over time is controlled using a pitch PID controller. A disadvantage of this approach is that the user is required to manually set up all reference frames and relationships between objects - this is usually automatically handled by the System and Timestep classes.\n\n# Limitations\n\npySAMSS is currently in an early stage of development and as such there are a number of limitations, such as:\n\n- Performance (pySAMSS is currently not optimized for speed)\n- System class only includes gravity force/torque source\n- No aerodynamic force/torque source\n- Not able to use controllers inside System class\n\n# Future Developments\n\nIn no particular order here is a list of some planned future developments:\n\n- GroundStation class (to be able to do coverage analysis etc.)\n- Maneuver class (for maneuver/mission planning)\n- FlightProgram class (to support a series of Maneuvers for a given Vessel similar to Falcon9_example.py)\n- Aerodynamics force/torque source\n- Performance optimization\n- Support for advanced gravity models\n- Automatically define CelestialBody orientations at a given datetime (i.e. due to rotation speed)\n- Update parent CelestialBody depending on current sphere of influence\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/c-bruce/pysamss",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysamss",
    "package_url": "https://pypi.org/project/pysamss/",
    "platform": "",
    "project_url": "https://pypi.org/project/pysamss/",
    "project_urls": {
      "Homepage": "https://github.com/c-bruce/pysamss"
    },
    "release_url": "https://pypi.org/project/pysamss/0.0.2/",
    "requires_dist": [
      "h5py (>=2.10.0)",
      "jplephem (>=2.14)",
      "julian (>=0.14)",
      "mayavi (>=4.7.1)",
      "numpy (>=1.18.1)",
      "PyQt5 (>=5.14.2)",
      "pyquaternion (>=0.9.5)",
      "sgp4 (>=2.7)",
      "vtk (>=8.1.2)"
    ],
    "requires_python": "",
    "summary": "Python Space Asset Management and Simulation System",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7322311,
  "releases": {
    "0.0.1": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e57dc938ab51bf7dea0c197e62c8a40c8febce55ab28a370f5b5e220534c792a",
          "md5": "a4e05202f0f2ccf0cd0728297cd44e80",
          "sha256": "ce2f9b3e83bedfee0f56f9a1a118b2a7d5100437c902b49c5a1f97207e910eb1"
        },
        "downloads": -1,
        "filename": "pysamss-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4e05202f0f2ccf0cd0728297cd44e80",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17974527,
        "upload_time": "2020-05-25T21:41:36",
        "upload_time_iso_8601": "2020-05-25T21:41:36.674808Z",
        "url": "https://files.pythonhosted.org/packages/e5/7d/c938ab51bf7dea0c197e62c8a40c8febce55ab28a370f5b5e220534c792a/pysamss-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd56de3958192f8d4f56c889630ea08a39891ba58c5c5531df50692e117fb4a6",
          "md5": "799bf1c1e94572ef4921529d9c88cafe",
          "sha256": "4603970c80c799c8e2260c495a96aca128e2ae6c372c0e3207e786e3cd4f1257"
        },
        "downloads": -1,
        "filename": "pysamss-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "799bf1c1e94572ef4921529d9c88cafe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17968816,
        "upload_time": "2020-05-25T21:41:54",
        "upload_time_iso_8601": "2020-05-25T21:41:54.903609Z",
        "url": "https://files.pythonhosted.org/packages/dd/56/de3958192f8d4f56c889630ea08a39891ba58c5c5531df50692e117fb4a6/pysamss-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e57dc938ab51bf7dea0c197e62c8a40c8febce55ab28a370f5b5e220534c792a",
        "md5": "a4e05202f0f2ccf0cd0728297cd44e80",
        "sha256": "ce2f9b3e83bedfee0f56f9a1a118b2a7d5100437c902b49c5a1f97207e910eb1"
      },
      "downloads": -1,
      "filename": "pysamss-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a4e05202f0f2ccf0cd0728297cd44e80",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17974527,
      "upload_time": "2020-05-25T21:41:36",
      "upload_time_iso_8601": "2020-05-25T21:41:36.674808Z",
      "url": "https://files.pythonhosted.org/packages/e5/7d/c938ab51bf7dea0c197e62c8a40c8febce55ab28a370f5b5e220534c792a/pysamss-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd56de3958192f8d4f56c889630ea08a39891ba58c5c5531df50692e117fb4a6",
        "md5": "799bf1c1e94572ef4921529d9c88cafe",
        "sha256": "4603970c80c799c8e2260c495a96aca128e2ae6c372c0e3207e786e3cd4f1257"
      },
      "downloads": -1,
      "filename": "pysamss-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "799bf1c1e94572ef4921529d9c88cafe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17968816,
      "upload_time": "2020-05-25T21:41:54",
      "upload_time_iso_8601": "2020-05-25T21:41:54.903609Z",
      "url": "https://files.pythonhosted.org/packages/dd/56/de3958192f8d4f56c889630ea08a39891ba58c5c5531df50692e117fb4a6/pysamss-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}