{
  "info": {
    "author": "modaresi mr",
    "author_email": "modaresimr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# DataSet\n## Dataset Format:\n### Object:\n    An object is a primitive object, a vector or in the form of a tuple of data components:\n    Object ={o|     o is Primitive or\n\t                o=[o_1, ... , o_n] such that o_i is Object(Vector of object) or\n\t                o=(Prop_1, ... , Prop_n) forall i in {1...n}, Prop_i(o) is Object}\n### Time Object:\nTime might be a point, in case of an instantaneous event, or an interval during if it is durative. Supported durative time is range.\n\n    time | [start_time:end_time]\n\n\n### Event:\n|Type|Actor| Time |\n|-|-|-|\n### Sensor Events:\n|(Type, Value)|SensorId| Time |\n|-|-|-|\n\n### Activity Events:\n|ActivityId|ActorId| Time |\n|-|-|-|\n\n### DataInformation:\n#### Sensor Info\n| Id | Name | Cumulative | OnChange | Nominal | Range | Location | Object | Sensor |\n|-|-|-|-|-|-|-|-|-|\n\n\n\n#### Activity Info\n|Id|Name|\n|-|-|\n\n\n\n\n### File format: CSV\n#### Sensor Info:\n| Id | Name | Cumulative | OnChange | Nominal | Range | Location | Object | Sensor |\n|-|-|-|-|-|-|-|-|-|\n| int | string | bool | bool | bool | json {min,max}/{items} | string | string | string |\nin case of nominal sensors, the range contain items and for numeric sensors, the range contain min and max\n\n#### Sensor events:\n|Type | Value | SensorId | Time |\n|-|-|-|-|\n\n#### Activity events:\n|ActivityId|ActorId| StartTime | EndTime|\n|-|-|-|-|\n\n![](http://yuml.me/diagram/scruffy/class/[Preprocessing]->[Dispacher],[Dispacher]->[Segmentation],[Segmentation]->[FeatureExtraction],[FeatureExtraction]->[Classifier],[Classifier]->[Combiner],[Combiner]->[Evaluation])\n\n#### Approaches\n\\begin{Example}[Different Segmentation approaches]\n\\end{Example}\n    \\begin{lstlisting}[mathescape=true]\nfunction Fixed time window(S,X,r,l) {//S=SegmentHistory, X=Events, \n         //r=Shift, l=windowLength\n    p=begin(S[last])\n    return X.eventsIn([p + r : p + r + l]); \n}\nfunction Fixed siding window(S,X,r,l) {\n    prev_w=S[last]; p=begin(S[last])\n    be=first({e \\in X| p + r $\\leq$ time(e)}\n    return X.eventsIn([be : be + l]); \n}\nfunction Significant events(S,X,m) {//m=significant events per segments\n    se=significantEvents(X) $\\subseteq$ X\n    begin=time(se[1]);//next significant event \n    end=time(se[1 + m]);\n    return X.eventsIn([begin:end]); \n}\n//Probabilistic Approach\ngiven:(By analyzing training set) \n    $ws(A_m)$ is average window size of activity $A_m$\n    $w_1 = min \\{ws(A_1), ws(A_2), ..., ws(A_M)\\}$\n    $w_L = median\\{ws(A_1), ws(A_2), ..., ws(A_M)\\}$\n    $w_l=(w_L-w_1)\\times l/L+w_1$\n    $window\\_sizes= \\{w_1, w_2, . . . , w_L\\}$\n    $P(w_l /A_m)$//probability of windows length $w_l$ for an activity Am\n    $P(A_m /s_i)$//probability of Activity $A_i$ associated with the sensor $s_i$.\nfunction Probabilistic Approach(S,X) {\n    x=nextEvent(X)\n    $w^{\\star} =\\underset{w_l}{max}  \\{P(w_l /x)\\}=\\underset{w_l}{max}[P(w_l /A_m)\\times P(A_m /x)] $\n    end=time(x);//Next event\n    return X.eventsIn(end-$w^\\star$,end]); \n}\nfunction Metric base Approach(S,X) {//S=SegmentHistory, X=Events    \n    indx=len(S[last])+1 //first event not in old segment\n    $m_i=metric(\\{X[indx],...,X[i]\\})$\n    find first i which $H(\\{m_{0}....m_i\\})$ is true// \n    return X.eventsIn([time(X[indx]):time(X[i])]); \n}\nfunction SWAB Approach(S,X,bs) {//bs=Buffer size    \n    indx=len(S[last])+1 //first event not in old segment\n    $m=BottomUp(\\{X[indx],...,X[indx+bs]\\})$\n    return m[0]; \n}\n\\end{lstlisting}\n\n\n# Similar Works\n[pyActLearn](https://github.com/TinghuiWang/pyActLearn/) -> [documents](https://pyactlearn.readthedocs.io/en/latest/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/modaresimr/UnifiedAR",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "UnifiedAR",
    "package_url": "https://pypi.org/project/UnifiedAR/",
    "platform": "",
    "project_url": "https://pypi.org/project/UnifiedAR/",
    "project_urls": {
      "Homepage": "https://github.com/modaresimr/UnifiedAR"
    },
    "release_url": "https://pypi.org/project/UnifiedAR/1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Activity Recognition",
    "version": "1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6601477,
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55c054875e8985906bc5e8951ebe7acfa7f96ce74d964cc687c209c17b4dd546",
          "md5": "18a5254a7265c2b5c9407c28717232e6",
          "sha256": "fe12d5907e7eeb61f0f1341db3e9daab35aee87a88332d577f913a6195fc1832"
        },
        "downloads": -1,
        "filename": "UnifiedAR-1.tar.gz",
        "has_sig": false,
        "md5_digest": "18a5254a7265c2b5c9407c28717232e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 50556,
        "upload_time": "2020-02-10T09:55:49",
        "upload_time_iso_8601": "2020-02-10T09:55:49.479851Z",
        "url": "https://files.pythonhosted.org/packages/55/c0/54875e8985906bc5e8951ebe7acfa7f96ce74d964cc687c209c17b4dd546/UnifiedAR-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55c054875e8985906bc5e8951ebe7acfa7f96ce74d964cc687c209c17b4dd546",
        "md5": "18a5254a7265c2b5c9407c28717232e6",
        "sha256": "fe12d5907e7eeb61f0f1341db3e9daab35aee87a88332d577f913a6195fc1832"
      },
      "downloads": -1,
      "filename": "UnifiedAR-1.tar.gz",
      "has_sig": false,
      "md5_digest": "18a5254a7265c2b5c9407c28717232e6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 50556,
      "upload_time": "2020-02-10T09:55:49",
      "upload_time_iso_8601": "2020-02-10T09:55:49.479851Z",
      "url": "https://files.pythonhosted.org/packages/55/c0/54875e8985906bc5e8951ebe7acfa7f96ce74d964cc687c209c17b4dd546/UnifiedAR-1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}