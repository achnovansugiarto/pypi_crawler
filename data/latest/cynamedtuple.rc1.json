{
  "info": {
    "author": "Egor Dranischnikow",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# cynamedtuple\n\nMemory efficient and fast `namedtuple` implementation using `Cython`.\n\n## Installation\n\nTo install last released version:\n\n    pip install cynamedtuple\n\nAs `cynamedtuple` uses `Cython` under the hood, right C-compler/tool-chain is needed in order to be able to create `cynamedtuple`s.\n\nTo install the most current version use:\n\n    pip install https://github.com/realead/cynamedtuple/zipball/master\n\nThe necessary `Cython`-module will be installed as well, if not already in the installation.\n\n\n## Usage\n\nWhen providing the types of fields, the resulting tuple is not only named but also typed, i.e. the underlying fields backed by corresponding c-types thus needing less memory:\n\n    from cynamedtuple import typed_namedtuple\n    MyStruct = typed_namedtuple(\"MyStruct\", dict(a=\"int\", b=\"int\", c=\"int\"), defaults=[2,3])\n    s = MyStruct(5)\n    print(s.a, s.b, s.c)      # results in 5 2 3\n    print(s[0], s[1], s[-1])  # results in 5 2 3\n\nFor Python versions with non-ordered `dict`s (i.e. prior to Py3.6), version with name-type-pairs iterable can be used:\n\n    ...\n    typed_namedtuple(\"MyStruct\", [(\"a\",\"int\"), (\"b\",\"int\"), (\"c\",\"int\")])\n    ...\n\n\nWhen the fields cannot be statically typed, `untyped_namedtuple` can be used, which uses slightly less memory and is somewhat faster than Python's original `namedtuple`:\n\n    from cynamedtuple import untyped_namedtuple\n    MyStruct = untyped_namedtuple(\"MyStruct\", [\"a\", \"b\", \"c\"], defaults=[2,3])\n    s = MyStruct(5)\n    print(s.a, s.b, s.c)      # results in 5 2 3\n    print(s[0], s[1], s[-1])  # results in 5 2 3\n\n\n## Performance\n\nLet's compare the performance of the following implementation\n\n    P=collections.namedtuple(\"P\",[\"a\", \"b\"])\n    T=cynamedtuple.typed_namedtuple(\"T\", [(\"a\", \"int\"), (\"b\", \"int\")])\n    U=cynamedtuple.untyped_namedtuple(\"U\", [\"a\", \"b\"])\n\nwith the built-in (unnamed) `tuple`.\n\n### Memory usage\n\nMemory usage depends on the used types, using `int` instead of Python's integer means 3-4 times smaller memory footprint. For `1e7` elements in a list following memory was used:\n\n| Class     | Used memory (in MB)|\n|-----------|--------------------|\n|typed(T)   |         308        |\n|untyped(U) |         927        |\n|Python's(P)|        1082        |\n|tuple      |        1006        |\n\n\n### Timings\n\n#### Creation\n\nFor creation of `1e6` elements, typed cynamedtuple is almost as fast as usual tuple and about 4 times faster than Python's `namedtuple`:\n\n| Class      |        Times       |\n|------------|--------------------|\n|typed(T)    |       128 ms       |\n|untyped(U)  |       171 ms       |\n|Python's(P) |       504 ms       |\n|tuple       |       118 ms       |\n\n\n#### Accessing fields\n\nFor accessing a field, typed and untyped versions are about 30% faster than Python's `namedtuple` but slightly slower than the usual `tuple`:\n\n| Class     |        Times       |\n|-----------|--------------------|\n|typed(T)   |       51.5 ns      |\n|untyped(U) |       45.5 ns      |\n|Python's(P)|       68.4 ns      |\n|tuple      |       49.9 ns      |\n\n\n#### Accessing via index\n\nWarning: `cynamedtuple`s aren't optimized for access via index - it is linear in number of fields, thus should not be used if there are many fields.\n\n\n## Producing pyx-code\n\nUnder the hood cynamedtuple uses string code snippets from Cython (aka `cython.inline`), and with that some constrains come into play:\n\n  * Cython doesn't not yet supporting any cimports/includes from string code snippets\n  * it is not possible to define any types via `ctypedef` e.g. `ctypedef int myint` and use them in a `cynamedtuple`, thus the types of `cynamedtuple` are limited to the built-in types.\n\nA workaround is to use `typed_namedtuple_cycode` to produce the Cython code and to build a cython module from it. Use `cython_header`-argument to insert needed definitions, e.g.\n\n     typed_namedtuple_cycode(\"A\", ((\"a\", \"myint\"),), cython_header = [\"ctypedef int myint\"])\n\nwill yield the following cython-code:\n\n    ctypedef int myint\n    cdef class A:\n        cdef public myint a\n        def __init__(self,a):\n            self.a = a\n        def __getitem__(self, i):\n            if i==0 or i==-1: return self.a\n            raise IndexError('tuple index out of range')\n\nThere is also `untyped_namedtuple_cycode`-function as well.\n\n\n## Trivia:\n\n  * This project was inspired by the following SO-question: https://stackoverflow.com/q/65159938/5769463.\n  * While Python's `namedtuple` was an inspiration, `cynamedtuple`isn't a simple drop-in replacement.\n  * While cnamedtuple (https://pypi.org/project/cnamedtuple/) is all about speed, `cynamedtuple` is more about smaller memory footprint.\n\n\n## History:\n\n   *  0.1.0: 13.12.2020:\n       * introducing basic functionality",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/realead/cynamedtuple",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cynamedtuple",
    "package_url": "https://pypi.org/project/cynamedtuple/",
    "platform": "",
    "project_url": "https://pypi.org/project/cynamedtuple/",
    "project_urls": {
      "Homepage": "https://github.com/realead/cynamedtuple"
    },
    "release_url": "https://pypi.org/project/cynamedtuple/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Memory efficient and fast namedtuple implementation using Cython",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8886394,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7578ca279e19dd0af0dd8e6f73ca9cf3aea76704a9111f90da0eb16efde94822",
          "md5": "c8843ef37cb07ea8aa6655eb208d1bb4",
          "sha256": "10d4b43436a165e913a9baa99aa2a1a9def7908f91f3587f31f117eb15c4055d"
        },
        "downloads": -1,
        "filename": "cynamedtuple-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c8843ef37cb07ea8aa6655eb208d1bb4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4522,
        "upload_time": "2020-12-12T22:19:38",
        "upload_time_iso_8601": "2020-12-12T22:19:38.715390Z",
        "url": "https://files.pythonhosted.org/packages/75/78/ca279e19dd0af0dd8e6f73ca9cf3aea76704a9111f90da0eb16efde94822/cynamedtuple-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7578ca279e19dd0af0dd8e6f73ca9cf3aea76704a9111f90da0eb16efde94822",
        "md5": "c8843ef37cb07ea8aa6655eb208d1bb4",
        "sha256": "10d4b43436a165e913a9baa99aa2a1a9def7908f91f3587f31f117eb15c4055d"
      },
      "downloads": -1,
      "filename": "cynamedtuple-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c8843ef37cb07ea8aa6655eb208d1bb4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4522,
      "upload_time": "2020-12-12T22:19:38",
      "upload_time_iso_8601": "2020-12-12T22:19:38.715390Z",
      "url": "https://files.pythonhosted.org/packages/75/78/ca279e19dd0af0dd8e6f73ca9cf3aea76704a9111f90da0eb16efde94822/cynamedtuple-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}