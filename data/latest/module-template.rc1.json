{
  "info": {
    "author": "Ben Jolitz",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: BSD License",
      "Topic :: Utilities"
    ],
    "description": "Template for defining Python modules\r\n----------------------------------------\r\n\r\nPlease note this package is a designated \"dud\" package to prevent others from accidentally uploading their forks for the original template (at least to the same name).\r\n\r\nThis is a template designed to make it quick to bootstrap an installable Python module for private and professional purposes. It is based upon several issues and patterns I've experienced in deploying Python services and libraries.\r\n\r\nPython's unit of software distribution is a module. Most modules will have a ``setup.py`` or a ``setup.cfg`` defined. This approach has the following benefits:\r\n\r\n    - dependencies can be declared and automatically installed/upgraded\r\n    - one doesn't need to ``cd`` to a specific directory to start a service\r\n    - Easy upgrade path\r\n        + No issues with stale ``.pyc`` files\r\n\r\n\r\nPython modules can create source distributions (``sdist``) and binary distributions (``bdist_wheel``). This plays very nicely with a PyPI mirror, which allows for complex projects to be installed/updated on a routine basis.\r\n\r\nThere are several key points in a pain-free install:\r\n    - setup.py\r\n    - MANIFEST.in (necessary if you have non-Python files in your project)\r\n    - README.rst (README.md will require you to add README.md to MANIFEST.in)\r\n\r\nIn addition, you are suggested to follow the basic structure of ``module_template``.\r\n\r\nPlease note that ``module_template`` is just a name and you can freely rename it to reflect your\r\nwishes. Just be sure to update your ``setup.py``, your ``about.py`` and (if you have it defined) a ``MANIFEST.in``\r\n\r\n--------------------------\r\nExpected Behavior\r\n--------------------------\r\n\r\nIt is expected that all your business logic and assets will be in your project folder (currently named ``module_template`` with an ``__init__.py`` defined).\r\n\r\n----------------------------\r\nIncluding non Python files\r\n----------------------------\r\n\r\n``find_packages()`` will create a file listing for an install by looking for ``__init__.py`` files. Obviously, things like a Flask ``templates/`` folder and ``static/`` folder don't have python files (Static files normally should be served from S3 or from nginx).\r\n\r\nIn that case, you want a MANIFEST.in to graft those folders into the finalized modular installation.\r\n\r\nPlease see MANIFEST.in for more details.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/benjolitz/module_template",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/benjolitz/module_template",
    "keywords": "module,template,library",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "module_template",
    "package_url": "https://pypi.org/project/module_template/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/module_template/",
    "project_urls": {
      "Download": "https://github.com/benjolitz/module_template",
      "Homepage": "https://github.com/benjolitz/module_template"
    },
    "release_url": "https://pypi.org/project/module_template/0.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Template for creating python modules",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7220695,
  "releases": {
    "0.0.0": []
  },
  "urls": [],
  "vulnerabilities": []
}