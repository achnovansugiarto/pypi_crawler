{
  "info": {
    "author": "Clay Brooks",
    "author_email": "clay_brooks@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: The Unlicense (Unlicense)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Dwarfgen\n\n## Description\n\nUse dwarfgen to\n\n- Generate datastructures that promote easy domain specific analysis of code\n- Generate code in other languages\n- Generate IDL's (Interactive Data Language)\n\nDwarfgen introduces JIDL (JSON IDL) to the already crowded IDL space.  JIDL\nis less about being an IDL and more about being an intermediate representation\nof your code for downstream processing.\n\n``` cpp\n// sample.cpp, compiled with '-g -fPIC -gdwarf-2' and default alignment\ntypedef struct MyStruct\n{\n    char a;\n    int b;\n} MyStruct;\n```\n\n``` json\n// output of 'dwarfgen --file sample.o --to-idl jidl --to-idl-dest ~/jidl'\n{\n    \"namespaces\": {},\n    \"enumerations\": {},\n    \"unions\": {},\n    \"structures\": {\n        \"MyStruct\": {\n            \"byteSize\": 8,\n            \"members\": {\n                \"a\": {\n                    \"byteOffset\": 0,\n                    \"byteSize\": 1,\n                    \"type\": \"char\",\n                    \"accessibility\": \"public\"\n                },\n                \"b\": {\n                    \"byteOffset\": 4,\n                    \"byteSize\": 4,\n                    \"type\": \"int\",\n                    \"accessibility\": \"public\"\n                }\n            }\n        }\n    }\n}\n```\n\n``` python\n# Some simple domain-specific static analysis\nimport json\n\nwith open('/path/to/jidl.json', 'r') as f:\n    jidl = json.load(f)\n\n# list all public integers\nfor name, data in jidl['structures'].items():\n    for member_name, member_data in data['members'].items():\n        if member_data['accessibility'] == 'public' and member_data['type'] == 'int':\n            print (\"{}.{}\".format(name, member_name) + \" is a public int!\")\n```\n\nThe above example isn't extremely complicated or even useful.  It's meant to illustrate the simplicity of JIDL analysis\nwhere source code analysis would be rather difficult to implement correctly.  The amount of effort required for source\nlevel analysis only increases when multiple languages are involved.\n\nA more useful example would be to ensure types are identical in size, within and across shared objects.\n\n``` python\nimport json\n\nwith open('/path/to/jidl_1.json', 'r') as f:\n    jidl_1 = json.load(f)\n\nwith open('/path/to/jid_2.json', 'r') as f:\n    jidl_2 = json.load(f)\n\n# get structure 1 size\nstructure_1_size = jidl_1['structures']['Structure1']['byteSize']\n\n# get structure 2 size, that resides in a different namespace and is of a different name\nstructure_2_size = jidl_2['namespaces']['InnerNamespace']['structures']['Structure2']['byteSize']\n\n# ensure they are equal\nif structure_1_size != structure_2_size:\n    print (\"Structure1 != InnerNamespace::Structure2 !!\")\n```\n\nOne thing that can be easily missed when analyzing source code directly are packing rules of languages as well as\ncompiler options that can adjust alignment of structures.\n\nFor example\n\n``` cpp\ntypedef struct StructA {\n    char a;\n    int b;\n} StructA;\n\n#pragma pack(1)\ntypedef struct StructB {\n    char a;\n    int b;\n} StructB;\n```\n\nStructA bytesize is 8 while StructB bytesize is 5.  The `#pragma pack(1)` statement tells the compiler to not add\npadding to the structure.  This is easily handled by dwarfgen but can be difficult to implement correctly otherwise.\n\n>In general, analyzing the output of the compiler hides almost all complicating factors versus analyzing the source code\ndirectly.  The simple reason is that you would have to re-implement all compiler specific rules in your analysis\n(including platform specific differences)\n\n## Install\n\n```\npip install dwarfgen\n```\n\n# DWARF Version Support\n\n- :heavy_check_mark: - Language specific features implemented\n- :warning: - Core DWARF features implemented, language specific features are not implemented\n- :x: - Not implemented\n\n|          | Ada                |  C                 | C++                | Cobol              | Fortran            |\n| -------- | :----------------: | :----------------: | :----------------: | :----------------: | :----------------: |\n| DWARF v2 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning:          | :warning:          |\n| DWARF v3 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning:          | :warning:          |\n| DWARF v4 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning:          | :warning:          |\n| DWARF v5 | :x:                | :x:                | :x:                | :x:                | :x:                |\n\n# Compiler Support\n\n- :heavy_check_mark: - Tested\n- :warning: - Untested\n- :x: - Not Implemented\n\n|          | gcc                |  llvm              |\n| -------- | :----------------: | :----------------: |\n| DWARF v2 | :heavy_check_mark: | :warning:          |\n| DWARF v3 | :heavy_check_mark: | :warning:          |\n| DWARF v4 | :heavy_check_mark: | :warning:          |\n| DWARF v5 | :x:                | :x:                |\n\n# Language-Feature Support\n\n- :heavy_check_mark: - Implemented\n- :warning: - Results may vary\n- :x: - Not implemented\n\n| Common   | Accessibility      | Arrays             | Custom Types        |\n| -------- | :----------------: | :----------------: | :-----------------: |\n| DWARF v2 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:  |\n| DWARF v3 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:  |\n| DWARF v4 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:  |\n| DWARF v5 | :x:                | :x:                | :x:                 |\n\n| Ada      | Constrained Types        | Records            | Repspec            | Tagged Types       |\n| -------- | :----------------------: | :----------------: | :----------------: | :----------------: |\n| DWARF v2 | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v3 | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v4 | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v5 | :x:                      | :x:                | :x:                | :x:                |\n\n| C        | Enumerations       | Structures         | Unions             | Bitfields          |\n| -------- | :----------------: | :----------------: | :----:             | :----------------: |\n| DWARF v2 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v3 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v4 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| DWARF v5 | :x:                | :x:                | :x:                | :x:                |\n\n| C++      | Enumerations       | Structures         | Classes            | Unions             | Bitfields          | Inheritance        | STL       | Templates      |\n| -------- | :----------------: | :----------------: | :----------------: | :----:             | :----------------: | :----------------: | :-------: | :------------: |\n| DWARF v2 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning: | :warning:      |\n| DWARF v3 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning: | :warning:      |\n| DWARF v4 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :warning: | :warning:      |\n| DWARF v5 | :x:                | :x:                | :x:                | :x:                | :x:                | :x:                | :x:       | :x:            |\n\n## Examples\n\n``` python\n# Help command\npython -m dwarfgen -h\n```\n\n``` python\n# Generate JIDL from a shared object\npython -m dwarfgen --file /path/to/shared_object.so --to-idl jidl --to-idl-dest ~/jidl\n```\n\n``` python\n# Generate cpp code from a shared object\npython -m dwarfgen --file /path/to/shared_object.so --to-lang cpp --to-lang-dest ~/autogen/cpp\n```\n\n``` python\n# Register a custom language generator module and generate in that language\npython -m dwarfgen --file /path/to/shared_object.so \\\n                   --lang-generator python /path/to/module \\\n                   --to-lang python \\\n                   --to-lang-dest ~/autogen/python\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/claybrooks/dwarfgen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dwarfgen",
    "package_url": "https://pypi.org/project/dwarfgen/",
    "platform": "",
    "project_url": "https://pypi.org/project/dwarfgen/",
    "project_urls": {
      "Homepage": "https://github.com/claybrooks/dwarfgen"
    },
    "release_url": "https://pypi.org/project/dwarfgen/0.3/",
    "requires_dist": [
      "pyelftools",
      "pymanifest"
    ],
    "requires_python": "",
    "summary": "IDL/Code generation utility",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10427843,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed745e0ebfe39e4c5808281b14dc05b29afcb626795e894a90c6c65a0660a5e3",
          "md5": "3e7aa4530b8a48b21f49837139efb7da",
          "sha256": "1d3857c29027480ee2e541a4cc945660bbba3532934b9088b885e29bad27c734"
        },
        "downloads": -1,
        "filename": "dwarfgen-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e7aa4530b8a48b21f49837139efb7da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4789,
        "upload_time": "2021-05-01T20:20:22",
        "upload_time_iso_8601": "2021-05-01T20:20:22.107831Z",
        "url": "https://files.pythonhosted.org/packages/ed/74/5e0ebfe39e4c5808281b14dc05b29afcb626795e894a90c6c65a0660a5e3/dwarfgen-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "367cdca5bef02e01eed18ad42feb07482e3506c95a9ae89b41da7ad0aef1ff09",
          "md5": "c3d6244ebb0563808536e014175ce3ce",
          "sha256": "b3ded778c3b8e6a796208e8cf25e52bdf74ef9724b1e4eef902df44c3cc67772"
        },
        "downloads": -1,
        "filename": "dwarfgen-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3d6244ebb0563808536e014175ce3ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15762,
        "upload_time": "2021-05-10T02:40:48",
        "upload_time_iso_8601": "2021-05-10T02:40:48.494364Z",
        "url": "https://files.pythonhosted.org/packages/36/7c/dca5bef02e01eed18ad42feb07482e3506c95a9ae89b41da7ad0aef1ff09/dwarfgen-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d55e176fc484d922e359dbec84dc5c3b4eff686db667bdf8164a24a90b828ca5",
          "md5": "4392b4020f4c5ca024fd60970d8eb40e",
          "sha256": "7c623ad0c5d3495f1f0de375f9ab96c0f30c7b55c29b60a3e9a6c8ba9162de22"
        },
        "downloads": -1,
        "filename": "dwarfgen-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4392b4020f4c5ca024fd60970d8eb40e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16257,
        "upload_time": "2021-05-21T12:35:31",
        "upload_time_iso_8601": "2021-05-21T12:35:31.232341Z",
        "url": "https://files.pythonhosted.org/packages/d5/5e/176fc484d922e359dbec84dc5c3b4eff686db667bdf8164a24a90b828ca5/dwarfgen-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d55e176fc484d922e359dbec84dc5c3b4eff686db667bdf8164a24a90b828ca5",
        "md5": "4392b4020f4c5ca024fd60970d8eb40e",
        "sha256": "7c623ad0c5d3495f1f0de375f9ab96c0f30c7b55c29b60a3e9a6c8ba9162de22"
      },
      "downloads": -1,
      "filename": "dwarfgen-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4392b4020f4c5ca024fd60970d8eb40e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16257,
      "upload_time": "2021-05-21T12:35:31",
      "upload_time_iso_8601": "2021-05-21T12:35:31.232341Z",
      "url": "https://files.pythonhosted.org/packages/d5/5e/176fc484d922e359dbec84dc5c3b4eff686db667bdf8164a24a90b828ca5/dwarfgen-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}