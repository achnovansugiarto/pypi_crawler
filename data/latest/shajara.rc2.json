{
  "info": {
    "author": "Abdelkrime Aries",
    "author_email": "kariminfo0@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Shajara\n\n<img align=\"left\" src=\"assets/shajara-logo.svg\" width=\"100\" height=\"100\">\n**Shajara** means \"Tree\" in Arabic.\nIt is a project for manipulating trees.\nThere is a tree, there is a node and there is node processor.\n\n[![Project](https://img.shields.io/badge/Project-Shajara-0BDA51.svg?style=plastic)](https://kariminf.github.io/shajara/)\n[![License](https://img.shields.io/badge/License-MIT-0BDA51.svg?style=plastic)](https://opensource.org/licenses/MIT)\n[![PyPI](https://img.shields.io/pypi/v/shajara.svg?style=plastic)](https://pypi.python.org/pypi/shajara)\n[![Downloads](https://img.shields.io/pypi/dm/shajara.svg?style=plastic)](https://pypi.org/project/shajara/)\n[![Python version](https://img.shields.io/pypi/pyversions/shajara.svg?style=plastic)](https://pypi.org/project/shajara/)\n[![Documentation Status](https://readthedocs.org/projects/shajara/badge/?version=latest)](https://shajara.readthedocs.io/en/latest/?badge=latest)\n[![Travis](https://img.shields.io/travis/kariminf/shajara.svg?style=plastic)](https://travis-ci.org/kariminf/shajara)\n[![Codecov](https://img.shields.io/codecov/c/github/kariminf/shajara.svg?style=plastic)](https://codecov.io/gh/kariminf/shajara)\n[![CodeFactor](https://www.codefactor.io/repository/github/kariminf/shajara/badge/master)](https://www.codefactor.io/repository/github/kariminf/shajara/overview/master)\n[![codebeat badge](https://codebeat.co/badges/9ea7f2f7-58cb-4df9-b4b7-33d33aee07aa)](https://codebeat.co/projects/github-com-kariminf-shajara-master)\n[![Code Climate](https://img.shields.io/codeclimate/maintainability-percentage/kariminf/shajara.svg?style=plastic)](https://codeclimate.com/github/kariminf/shajara/)\n<br clear=\"left\"/>\n\n## Description\n\nA tree has one node which represents its root.\nEach node has a label, a value and many children.\nThe arc from the parent to the child is labeled.\n\n\n## Create a tree\n\n### Using shajara API\n\n```python\nfrom shajara import Tree, Node\n\n#create a tree with a root labeled \"a\"\nt = Tree(Node(label=\"a\"))\n# add childrend \"b\", \"c\" and \"d\" to \"a\"\nt.add_child(\"ab\", Node(label=\"b\")).add_child(\"ac\", Node(label=\"c\")).add_child(\"ad\", Node(label=\"d\"))\n# go to child \"b\" and add to it children \"e\" and \"f\"\nt.select_child(\"ab\").add_child(\"be\", Node(label=\"e\")).add_child(\"bf\", Node(label=\"f\"))\n# go up to \"a\", go to child \"d\" and add to it children \"g\" and \"h\"\nt.up().select_child(\"ad\").add_child(\"dg\", Node(label=\"g\")).add_child(\"dh\", Node(label=\"h\"))\n```\n\n![](assets/readme/shajara_api.png)\n\n### Using a dict representation\n\n```python\nfrom shajara.create import GenerateProcessor\nfrom shajara import Tree\n\n# the tree representation : the arcs must be labeled\nrep = {\n    \"label\": \"a\",\n    \"children\": {\n        \"ab\": {\n            \"label\": \"b\",\n            \"children\": {\n                \"be\": {\"label\": \"e\"},\n                \"bf\": {\"label\": \"f\"}\n            }\n        },\n        \"ac\": {\"label\": \"c\"},\n        \"ad\": {\"label\": \"d\"}\n    }\n}\n\n# Create a generator to this representation\ngenerator = GenerateProcessor(rep)\n#create an ampty tree (acrually the root exists without a label or a value)\nt = Tree()\n#fill the tree using the generator\nt.process(processor=generator)\n```\n\n![](assets/readme/generate_api.png)\n\n## Visualize a tree\n\nDOT description of a tree for Graphviz can be generated using **GraphvizProcessor**\n\n```python\nfrom shajara.plot import graphviz_processor\n\n# create the tree t using one of the methods above\n...\n#process the tree using graphviz_processor, which returns a DOT description (string)\ngraph = t.process(processor=graphviz_processor)\n\n# save the description in a file with extension .dot\nf = open(\"graphviz.dot\", \"w\")\nf.write(graph)\nf.close()\n\n```\n\n## Binary search trees (not balanced)\n\n### Create unbalanced binary search trees\n\n```python\nfrom shajara import Tree, Node\nfrom shajara.search.binary import binary_adder\n\nvalues = [5, 9, 2, 11, 3, 7, 2]\nlabels = [\"five\", \"nine\", \"two\", \"eleven\", \"three\", \"seven\", \"two_again\"]\n\nt = Tree()\n\nfor i in range(len(values)):\n    binary_adder.set_parameters(Node(value=values[i], label=labels[i]))\n    t.process(processor=binary_adder)\n\n```\n\n![](assets/readme/bsearch_api.png)\n\n### Search a value\n\n```python\nfrom shajara.search.binary import binary_searcher\n\n# create a tree t with a binary creator\n...\n\nsearch = [4, 5, 8, 10, 12]\n\nfor i in search:\n    binary_searcher.set_parameters(value=i)\n    rel, node = t.process(processor=binary_searcher)\n    if rel == \"=\" :\n        print (str(i) + \" is \" + node.label)\n    elif rel ==\"<\" :\n        print (str(i) + \" not found. It must be after \" + str(node.value))\n    else:\n        print (str(i) + \" not found. It must be before \" + str(node.value))\n\n```\nThe result :\n![](assets/readme/bsearch_api_res.png)\n\n### Search the max and the min\n\n```python\nfrom shajara.search.binary import binary_opti_searcher\n\n# create a tree t with a binary creator\n...\n\nbinary_opti_searcher.set_parameters(search=\"min\")\nmin_node = t.process(processor=binary_opti_searcher)\nprint(\"The minimum is \" + str(min_node.value))\n\nbinary_opti_searcher.set_parameters(search=\"max\")\nmax_node = t.process(processor=binary_opti_searcher)\nprint(\"The maximum is \" + str(max_node.value))\n\n```\nThe result :\n![](assets/readme/boptisearch_api_res.png)\n\n## Trie\n\n### Create a trie\n\n```python\nfrom shajara.search.trie import trie_adder\n\nstrings = [\"to\", \"ten\", \"inn\", \"in\", \"tea\", \"A\"]\n\nt = Tree()\nfor string in strings:\n    trie_adder.set_parameters(string)\n    t.process(processor=trie_adder)\n```\n\n![](assets/readme/trie_api.png)\n\n### Search a word in the trie\n\n```python\nfrom shajara.search.trie import trie_searcher\n\n# create a trie t\n...\n\nsearch = [\"tell\", \"tea\", \"inner\"]\nfor string in search:\n    trie_searcher.set_parameters(string)\n    found, node = t.process(processor=trie_searcher)\n    is_word = \"\"\n    if not node.value:\n        is_word = \" (not in dictionary)\"\n    print(\"searching: \" + string + \", found: \" + found + is_word)\n```\nThe result :\n![](assets/readme/trie_api_res.png)\n\n## License\n\nMIT License\n\nCopyright (c) 2020 Abdelkrime Aries",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kariminf/shajara",
    "keywords": "trees",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shajara",
    "package_url": "https://pypi.org/project/shajara/",
    "platform": "",
    "project_url": "https://pypi.org/project/shajara/",
    "project_urls": {
      "Homepage": "https://github.com/kariminf/shajara"
    },
    "release_url": "https://pypi.org/project/shajara/0.2.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manupilating trees",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7060121,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c1126b10c3d22f07fccf537399fdcc841b74b21248d8c259bab7628ee22d929",
          "md5": "7500367c8ae1cf291319713f15a6aef9",
          "sha256": "0cee6e081160e71fea33885d17a56f1b291d68f9ade85f109eab3fae22870640"
        },
        "downloads": -1,
        "filename": "shajara-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7500367c8ae1cf291319713f15a6aef9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5277,
        "upload_time": "2020-04-19T21:19:00",
        "upload_time_iso_8601": "2020-04-19T21:19:00.369764Z",
        "url": "https://files.pythonhosted.org/packages/1c/11/26b10c3d22f07fccf537399fdcc841b74b21248d8c259bab7628ee22d929/shajara-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddcad80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6",
          "md5": "4df3bb389b835934ca8ae1a51ab72eb6",
          "sha256": "d9677fd3a11a290a1110053272ac526eec833eb686c4c9f5084e9627b3940af6"
        },
        "downloads": -1,
        "filename": "shajara-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4df3bb389b835934ca8ae1a51ab72eb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5606,
        "upload_time": "2020-04-20T13:32:15",
        "upload_time_iso_8601": "2020-04-20T13:32:15.330857Z",
        "url": "https://files.pythonhosted.org/packages/dd/ca/d80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6/shajara-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddcad80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6",
        "md5": "4df3bb389b835934ca8ae1a51ab72eb6",
        "sha256": "d9677fd3a11a290a1110053272ac526eec833eb686c4c9f5084e9627b3940af6"
      },
      "downloads": -1,
      "filename": "shajara-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4df3bb389b835934ca8ae1a51ab72eb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5606,
      "upload_time": "2020-04-20T13:32:15",
      "upload_time_iso_8601": "2020-04-20T13:32:15.330857Z",
      "url": "https://files.pythonhosted.org/packages/dd/ca/d80258595e3f70ca532fd4a7b300fc57fa51b663ef381e6e540cc2f907f6/shajara-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}