{
  "info": {
    "author": "MrRhuezzler",
    "author_email": "anonymouspyro369@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "![delta-dx](https://github.com/MrRhuezzler/delta-dx/blob/main/images/d_cover.png)\n---\n[![PYPI Version](https://img.shields.io/pypi/v/delta-dx.svg)](https://pypi.org/project/delta-dx/)\n[![Publish to PYPI](https://github.com/MrRhuezzler/delta/actions/workflows/python-publish.yml/badge.svg)](https://github.com/MrRhuezzler/delta/actions/workflows/python-publish.yml)\n[![Run Python Tests](https://github.com/MrRhuezzler/delta/actions/workflows/pytest_actions.yml/badge.svg)](https://github.com/MrRhuezzler/delta/actions/workflows/pytest_actions.yml)  \n\nAuthor           : [MrRhuezzler](https://github.com/MrRhuezzler)  \nProject Language : Python  \nProject Year     : 2021  \n\n## How to Install\nThis currently avaiable on [PYPI](https://pypi.org/project/delta-dx/), from where it can be installed  using the following command.  \n(Note : pip and python must be added to the PATH for this command to work)\n```\npip install delta-dx\n```\n## Usage\n\n```python\nfrom delta import Expression\nexpression = Expression(\"x * e ^ x\")\nprint(Expression.differentiate(expression, nth_derivative=1))\n```\n\n## Approach\n\nThis Project uses all the basic rules of Mathematical Differentiation and converts them into a computer algorithm, which provides the power to differentiate various equations. One main advantage of this project is that it can differentiate between variables ( x, y, z, w, u, v ) and numbers (5, 0.56, e, pi, tau ).\n\nThinking of devising an algorithm to handle such a task is the goal, luckily Dynamic Programming can be used to devise such an algorithm. Let's take an example to explain.\n\n```\nExample:\n\nd(sin(2x)) / dx = cos(2x) * 2\n```\n\nIn the equation sin(2x), first we differentiate based on the rule d(sin(u)) / dx =cos(u) and then followed by differentiating u = 2x based on the rule d(cv) / dx = c dv/dx we get 2. \n\nFrom the above example, we can see that the process of differentiating sin(2x)is being broken down to first differentiating the outer sin(u) function and differentiating the inner 2x function and then combining both results to get the answer to the given problem.\n\nThe Next major problem is that, how is an equation being represented in the computer algorithm. To Tackle this problem, we have to see the various ways that an expression can be expressed. They are infix, prefix, postfix notations.\n```\nExample:\n\n(a+b) * (c + d) - Infix\n*+ab+cd         - Prefix\nab+cd+*         - Postfix\n```\nGiven the input expression, it can be converted to the prefix notation, with can be easily converted into a prefix expression tree, which can be used as an input to the algorithm and also devise the algorithm in such a way that it outputs a prefix expression tree, which makes it complete cycle (Enabling the algorithm to find multiorder derivatives).\n```\nExample:\n\nlog 10(cos(5 * x))\n\nExpression Tree :\n\n        log\n      /     \\\n    10        cos\n                \\ \n                 *\n                /  \\ \n              5     x\n\n```\nBy traversing the tree layer by layer and calling the algorithm, to solve for each layer, the problem of differentiating becomes a lot simpler. Let's take an example of differentiating a mathematical expression.\n\n```\nExample:\n\nsin(2*x)\n\nExpression Tree\n\n    sin\n      |\n      *\n    /   \\\n  2       x\n```\n```\n-> differentiate(sin) // Calling the algorithm to solve\n-> if input == sin // If the given head node of the tree represents sin function\n->    cos = cos // Creating a node representing cos function\n->    cos.child = input.child // Assigning the input for cos function\n->     multiply = * // Creating a multiplication node\n->    multiply.left = cos\n->    multiply.right = differentiate(input.child) // Recursively calling the algorithm to solve for 2*x\n->      return multiply // returning the result\n-> if input == * // If the input is a multiplication operation\n->     // Statements to handle this case and return the result.\n-> done\n```\nNow we are done with the differentiating algorithm.\n\nThe Next steps may be to simplify the output of the differentiating algorithm, so that it looks neat and simple, rather than having more additional terms in the final output expression. Such an expression folding algorithm is also implemented to fold into smaller expressions. And with some basic mathematics an algorithm was devised. It is not the most optimal solution for the problem. I learnt many things in making this package.\n\n## Resources\n- [The D* Symbolic Differentiation Algorithm](https://www.microsoft.com/en-us/research/publication/the-d-symbolic-differentiation-algorithm/) | Author : [Brian Guenter](https://www.microsoft.com/en-us/research/people/bguenter/) | Year : 2007\n- [A Webpage of the University of Texas at Austin](https://www.cs.utexas.edu/users/novak/asg-symdif.html) (Primary Inspiration for developing this package)\n- [A Webpage of MIT Press](https://mitpress.mit.edu/sites/default/files/sicp/full-text/sicp/book/node39.html) (Served as a quick reference material)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MrRhuezzler/delta-dx",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "delta-dx",
    "package_url": "https://pypi.org/project/delta-dx/",
    "platform": "",
    "project_url": "https://pypi.org/project/delta-dx/",
    "project_urls": {
      "Bug Tracker": "https://github.com/MrRhuezzler/delta-dx/issues",
      "Homepage": "https://github.com/MrRhuezzler/delta-dx"
    },
    "release_url": "https://pypi.org/project/delta-dx/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A Symbolic Differentiator",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12253129,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfe8ca309746d9f88dbc76e0ff8a57fec025362f3a1e6c624535d87dad235cd2",
          "md5": "f2588cf49ff896db934491ac738c072e",
          "sha256": "8ebfa312269db29e35af8bfd20036b808d821aa9b318d6fa6aa726cc7507c9c0"
        },
        "downloads": -1,
        "filename": "delta_dx-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2588cf49ff896db934491ac738c072e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11693,
        "upload_time": "2021-04-04T17:08:00",
        "upload_time_iso_8601": "2021-04-04T17:08:00.414907Z",
        "url": "https://files.pythonhosted.org/packages/bf/e8/ca309746d9f88dbc76e0ff8a57fec025362f3a1e6c624535d87dad235cd2/delta_dx-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81635eff0bf33d1e1d04622f8a3a0e25d5aeab05b203a4fbecc8dbc30c73d308",
          "md5": "5b34c8be96d54429f9a4d498a32ed200",
          "sha256": "a620a0712d579bd7b167e38c4af7f0e00f0a7e78ebbcdb3accde95a3daedd803"
        },
        "downloads": -1,
        "filename": "delta-dx-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b34c8be96d54429f9a4d498a32ed200",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8465,
        "upload_time": "2021-04-04T17:08:02",
        "upload_time_iso_8601": "2021-04-04T17:08:02.080156Z",
        "url": "https://files.pythonhosted.org/packages/81/63/5eff0bf33d1e1d04622f8a3a0e25d5aeab05b203a4fbecc8dbc30c73d308/delta-dx-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "feda45ea9bd1199c1da62c67663666874d004f4db8ccdf24bf029f284038c46d",
          "md5": "e7b81aa347d107aec211cc374ce0531e",
          "sha256": "8f0e4b27a72fafc588d307e44868a182d888df583e642618c1d3410d20584118"
        },
        "downloads": -1,
        "filename": "delta_dx-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7b81aa347d107aec211cc374ce0531e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11663,
        "upload_time": "2021-04-06T09:13:09",
        "upload_time_iso_8601": "2021-04-06T09:13:09.124531Z",
        "url": "https://files.pythonhosted.org/packages/fe/da/45ea9bd1199c1da62c67663666874d004f4db8ccdf24bf029f284038c46d/delta_dx-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07263812604a2712aa69727c5a71c15d396346440aa10b18f7ab8e588a0a9e91",
          "md5": "2e8036a22373e38ed9de3d951244df34",
          "sha256": "1b95ea456eb6dfe58345b86af53888bfb3f12771531f743c350939b305b4d907"
        },
        "downloads": -1,
        "filename": "delta-dx-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2e8036a22373e38ed9de3d951244df34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7751,
        "upload_time": "2021-04-06T09:13:10",
        "upload_time_iso_8601": "2021-04-06T09:13:10.124292Z",
        "url": "https://files.pythonhosted.org/packages/07/26/3812604a2712aa69727c5a71c15d396346440aa10b18f7ab8e588a0a9e91/delta-dx-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddab1470e057e934e5589982e87fd0f6eb90e8ad24bd4c0bbaa16440930f7859",
          "md5": "6eaaf5b1a55010626dd44c97072c171a",
          "sha256": "6ce7fed1ea7faa698fafe2909dcfbf5ca5397980b1fd63b6e176b621b7735a00"
        },
        "downloads": -1,
        "filename": "delta_dx-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6eaaf5b1a55010626dd44c97072c171a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13280,
        "upload_time": "2021-12-09T08:24:22",
        "upload_time_iso_8601": "2021-12-09T08:24:22.715075Z",
        "url": "https://files.pythonhosted.org/packages/dd/ab/1470e057e934e5589982e87fd0f6eb90e8ad24bd4c0bbaa16440930f7859/delta_dx-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e7137b1828e8b48593250924d4f1f17c94ee11ccfb012931a0a9d304f41810",
          "md5": "621388636f82100489018d5ffb54883c",
          "sha256": "f4b9a834e6bb77cb20ac81a75f77158e4752742c621c731e9e41dec66bdec775"
        },
        "downloads": -1,
        "filename": "delta-dx-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "621388636f82100489018d5ffb54883c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11677,
        "upload_time": "2021-12-09T08:24:24",
        "upload_time_iso_8601": "2021-12-09T08:24:24.155094Z",
        "url": "https://files.pythonhosted.org/packages/66/e7/137b1828e8b48593250924d4f1f17c94ee11ccfb012931a0a9d304f41810/delta-dx-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ddab1470e057e934e5589982e87fd0f6eb90e8ad24bd4c0bbaa16440930f7859",
        "md5": "6eaaf5b1a55010626dd44c97072c171a",
        "sha256": "6ce7fed1ea7faa698fafe2909dcfbf5ca5397980b1fd63b6e176b621b7735a00"
      },
      "downloads": -1,
      "filename": "delta_dx-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6eaaf5b1a55010626dd44c97072c171a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13280,
      "upload_time": "2021-12-09T08:24:22",
      "upload_time_iso_8601": "2021-12-09T08:24:22.715075Z",
      "url": "https://files.pythonhosted.org/packages/dd/ab/1470e057e934e5589982e87fd0f6eb90e8ad24bd4c0bbaa16440930f7859/delta_dx-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66e7137b1828e8b48593250924d4f1f17c94ee11ccfb012931a0a9d304f41810",
        "md5": "621388636f82100489018d5ffb54883c",
        "sha256": "f4b9a834e6bb77cb20ac81a75f77158e4752742c621c731e9e41dec66bdec775"
      },
      "downloads": -1,
      "filename": "delta-dx-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "621388636f82100489018d5ffb54883c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11677,
      "upload_time": "2021-12-09T08:24:24",
      "upload_time_iso_8601": "2021-12-09T08:24:24.155094Z",
      "url": "https://files.pythonhosted.org/packages/66/e7/137b1828e8b48593250924d4f1f17c94ee11ccfb012931a0a9d304f41810/delta-dx-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}