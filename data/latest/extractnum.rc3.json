{
  "info": {
    "author": "Keytoyze",
    "author_email": "cmx_1007@foxmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ExactNum\r\n\r\n![https://pypi.org/project/extractnum/](https://img.shields.io/pypi/v/extractnum)\r\n![https://pypi.org/project/extractnum/](https://img.shields.io/pypi/l/extractnum)\r\n\r\n\r\nA CLI for extracting arrays from an unstructured text file and plotting results.\r\n\r\nFor example, if you print some metrics into a log file, you can use this tool to extract them. This array can be plotting as a diagram to show the trend, or be saved into a stuctured file, e.g., json or csv.\r\n\r\n```bash\r\npip install extractnum\r\n```\r\n\r\n## Quick start\r\n\r\n### Plot an array from a log file\r\n\r\nIf you have an unstructured plain text file like:\r\n<pre>\r\n[[032m2022-09-10 21:43:03,770]Total epoch: 0. <b>model loss: 0.42456936836242676</b>.\r\n[[032m2022-09-10 21:43:03,791] token 0 - 5551, 1097.58837890625,  targeting\r\n token 1 - 1058.235107421875, InstoreAndOnline\r\n token 2 - 0.10239370167255402,  A\r\n token 3 - 0.10239171236753464,  sentence\r\n token 4 - 0.10238830745220184,  :\r\n token 5 - 977.8533935546875,  predict\r\n token 6 - 1051.5157470703125, --+\r\n[[032m2022-09-10 21:43:04,297]Total epoch: 1. <b>model loss: 0.39936694502830505</b>.\r\n[[032m2022-09-10 21:43:04,316] token 0 - 5551, 1097.58837890625,  targeting\r\n token 1 - 1058.3414306640625, InstoreAndOnline\r\n token 2 - 0.2732486128807068,  A\r\n token 3 - 0.2605493366718292,  sentence\r\n token 4 - 0.28173941373825073,  :\r\n token 5 - 978.6373291015625,  predict\r\n token 6 - 1051.77685546875, --+\r\n[[032m2022-09-10 21:43:04,840]Total epoch: 2. <b>model loss: 0.40558159351348877</b>.\r\n...\r\n</pre>\r\n\r\nAnd you may want to extract the `model loss` values of all epochs. You can run:\r\n```bash\r\nextractnum training.log --pattern \"model loss: {loss}\"\r\n```\r\n\r\nHere `model loss: ` is the prompt to the numbers, and `{loss}` specifies the placeholder for numbers. `loss` is the label of this array. \r\n\r\nAfter running, all the loss values in this file can be plotting:\r\n\r\n![](figure/loss.png)\r\n\r\n### Smooth the array\r\n\r\nExtractNum supports smoothing the array, like [TensorBoard](https://stackoverflow.com/questions/60683901/tensorboard-smoothing). Run the following command to smooth the loss, which shows the trend more clearly: \r\n\r\n```bash\r\nextractnum training.log --pattern \"model loss: {loss}\" --smooth 0.8\r\n```\r\n\r\n![](figure/smooth.png)\r\n\r\n### Plot multiple arrays\r\n\r\nYou can also plotting multiple arrays together. For example, plot `token 2`, `token 3` and `token 4` in one diagram:\r\n\r\n```bash\r\nextractnum training.log --pattern \"token 2 - {token_2}\" \"token 3 - {token_3}\" \"token 4 - {token_4}\"\r\n```\r\n\r\n![](figure/multi.png)\r\n\r\n\r\n### Save results\r\n\r\nIf you want to use these data for further usage, you can save them into a csv file.\r\n\r\n```bash\r\nextractnum training.log --pattern \"token 2 - {token_2}\" \"token 3 - {token_3}\" \"token 4 - {token_4}\" --output tokens.csv\r\n```\r\n\r\n```csv\r\ntoken_2,token_3,token_4\r\n0.10239370167255402,0.10239171236753464,0.10238830745220184\r\n0.2732486128807068,0.2605493366718292,0.28173941373825073\r\n0.43365949392318726,0.4471507668495178,0.4745367169380188\r\n0.6074557304382324,0.6768703460693359,0.6920053362846375\r\n0.8045746684074402,0.9262861013412476,0.9121480584144592\r\n0.9546961784362793,1.186927080154419,1.1203949451446533\r\n1.1149790287017822,1.4592962265014648,1.3308525085449219\r\n...\r\n```\r\n\r\nExtractNum detects the output format automatically by the path extension. Currently, the following formats are supported: \r\n\r\n- Any `image format` that matplotlib supports: save as an image file. \r\n- `*.csv`: save as a csv table format. \r\n- `*.json`: save as a json format. \r\n- `*.txt` / `stdout`: print a table to a text file or the standard output. \r\n- otherwise, show a matplotlib image window.\r\n\r\n\r\n## How does it work?\r\n\r\nFor each input pattern (e.g., `model loss: {loss}`), ExtractNum will replace the placeholder `{loss}` into a regex pattern. By default, a real number regex pattern `[+|-]?\\d*(\\.\\d*)?` is used, and you can change it by `--placehold_pattern {regex}`. Using this processed regex pattern, ExtractNum  scan the log file by lines and try to extract it. The label `loss` will be served as a group name in the processed pattern. You can also turn on the `--regex` mode, which regards the input pattern as a regex pattern without any further processing, and regard the group name as the label.\r\n\r\n## Usage\r\n```\r\nusage: extractnum [-h] [--pattern [<number pattern> ...]] [--x <label>]\r\n                  [--regex] [--placehold_pattern <regex>] [--output <path>]\r\n                  [--smooth <weight>] [--offset <offset>] [--limit <limit>]\r\n                  [--verbose]\r\n                  log_file\r\n\r\npositional arguments:\r\n  log_file              Log file path to parse\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --pattern [<number pattern> ...], -p [<number pattern> ...]\r\n                        Pattern for extracting real numbers from log. For\r\n                        example, for a log line 'training acc: 3.14%', a\r\n                        pattern 'acc: {accuracy}' will extract 3.14, and plot\r\n                        it with a label 'accuracy'. Note that this pattern\r\n                        could only handle simple case. For a more complicated\r\n                        case, please turn on --regex mode.\r\n  --x <label>           Specify a label as the X array for plotting. For\r\n                        example, if there exists an array with a label\r\n                        \"iteration\", you can use \"--x iteration\" to make this\r\n                        array as the plotting X array. Not that the label\r\n                        should be in one of the patterns. By default, a\r\n                        sequence of natural numbers will be used.\r\n  --regex               Regex mode. If enable, patterns will be interpreted as\r\n                        regex patterns. For example, for a log line 'training\r\n                        acc: 3.14%', a pattern\r\n                        'acc:\\s(?P<accuracy>[+|-]?\\d*(\\.\\d*)?)' will extract\r\n                        3.14, and plot it with a label 'accuracy'.\r\n  --placehold_pattern <regex>\r\n                        The regex to replace the placeholder label. By\r\n                        default, a real number regex is used:\r\n                        \"[+|-]?\\d*(\\.\\d*)?\".\r\n  --output <path>, -o <path>\r\n                        Output path. It supports the following types: (1) Any\r\n                        image format that matplotlib supports: save as an\r\n                        image file. (2) *.csv: save as a csv table format. (3)\r\n                        *.json: save as a json format. (4) *.txt / stdout:\r\n                        print a table to a text file or the standard output.\r\n                        (5) otherwise, show a matplotlib image window.\r\n  --smooth <weight>     Perform exponential moving average to smooth values\r\n                        when plotting. Default: 0\r\n  --offset <offset>     The number of skipping lines before parsing. Default:\r\n                        0\r\n  --limit <limit>       Max numbers for each label in parsing. 0 indicates no\r\n                        limits. Default: 0\r\n  --verbose, -v         Verbose mode.\r\n\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Keytoyze/ExtractNum",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "extractnum",
    "package_url": "https://pypi.org/project/extractnum/",
    "platform": null,
    "project_url": "https://pypi.org/project/extractnum/",
    "project_urls": {
      "Homepage": "https://github.com/Keytoyze/ExtractNum"
    },
    "release_url": "https://pypi.org/project/extractnum/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A CLI for extracting number arrays from an unstructured log file and plotting results.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15075951,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d4ce852a780c0b2020e8d769e0ca6ad3d3f2f57f4a19f17ded44d94fca6ff1b",
          "md5": "6d8b94c44eb1743dd1303c35f6c8138a",
          "sha256": "a7d67545f276b88d22b1009fdc14814454a6b50690281c7a033d2eccae5e2179"
        },
        "downloads": -1,
        "filename": "extractnum-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d8b94c44eb1743dd1303c35f6c8138a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6514,
        "upload_time": "2022-09-12T16:36:12",
        "upload_time_iso_8601": "2022-09-12T16:36:12.080873Z",
        "url": "https://files.pythonhosted.org/packages/8d/4c/e852a780c0b2020e8d769e0ca6ad3d3f2f57f4a19f17ded44d94fca6ff1b/extractnum-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c08464abb8be266e1d524a669102680d2701af63dcc8260d197b2e05e88cf1f",
          "md5": "50da52baeeb35119e08b99df9438bf15",
          "sha256": "28b9e249af3d65f6a4152bb3423fbf240bfe1749e799aee816897fcbd912552f"
        },
        "downloads": -1,
        "filename": "extractnum-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50da52baeeb35119e08b99df9438bf15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7065,
        "upload_time": "2022-09-12T16:44:56",
        "upload_time_iso_8601": "2022-09-12T16:44:56.673477Z",
        "url": "https://files.pythonhosted.org/packages/0c/08/464abb8be266e1d524a669102680d2701af63dcc8260d197b2e05e88cf1f/extractnum-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d0b06cf59be95f1a31e56c2f3f75045172fddaa3ef11bf0d6880c1e0c75bf40",
          "md5": "3408c8a5c6f82e5ed3915c867e6a6f52",
          "sha256": "521ef400462fe962f24acdf3459b6d4002681604cecb98240567d49f265b8f34"
        },
        "downloads": -1,
        "filename": "extractnum-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3408c8a5c6f82e5ed3915c867e6a6f52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7125,
        "upload_time": "2022-09-13T07:21:03",
        "upload_time_iso_8601": "2022-09-13T07:21:03.623804Z",
        "url": "https://files.pythonhosted.org/packages/4d/0b/06cf59be95f1a31e56c2f3f75045172fddaa3ef11bf0d6880c1e0c75bf40/extractnum-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d0b06cf59be95f1a31e56c2f3f75045172fddaa3ef11bf0d6880c1e0c75bf40",
        "md5": "3408c8a5c6f82e5ed3915c867e6a6f52",
        "sha256": "521ef400462fe962f24acdf3459b6d4002681604cecb98240567d49f265b8f34"
      },
      "downloads": -1,
      "filename": "extractnum-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3408c8a5c6f82e5ed3915c867e6a6f52",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7125,
      "upload_time": "2022-09-13T07:21:03",
      "upload_time_iso_8601": "2022-09-13T07:21:03.623804Z",
      "url": "https://files.pythonhosted.org/packages/4d/0b/06cf59be95f1a31e56c2f3f75045172fddaa3ef11bf0d6880c1e0c75bf40/extractnum-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}