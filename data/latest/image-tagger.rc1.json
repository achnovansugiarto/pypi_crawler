{
  "info": {
    "author": "Dimitrios S. Karageorgiou",
    "author_email": "soulrain@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Image Tagger\n#### A REST API for predicting ImageNet labels of images.\n\n## Description\nImage Tagger is REST API for tagging images with ImageNet-1K labels.\nIt wraps around an _EfficientNetB3_ model trained on _ILSVRC_ dataset,\nexposing its functionality through a simple endpoint. The API was built using\n_FastAPI_ python framework. It utilizes _Tensorflow_ for executing deep \nlearning models.  \n\n## Quick Start\nImage Tagger is available at PyPI and can be installed as following:\n\n1. `pip install image_tagger`\n\nIn order to start the server use:\n\n2. `uvicorn image_tagger.main:app --host 0.0.0.0 --port 8000`\n\nNow the server should be up and running. If port `8000` is occupied\nby something else on your machine, then try a different port.\n\nGet the url of an image you like and perform a GET request to the API like:\n\n3. `GET localhost:8000/predictions?url=https://example.com/path/to/image.png`\n\nYou will see a nice JSON response containing the label for your image. \nYou can perform a GET request either by navigating to the above location\nwith your browser, or by using a requests tool like _Postman_.\n\n4. Use your favorite browser and navigate to `localhost:8000/docs`.\n\nYou will see a nice documentation page for all the endpoints\nexposed by this API, along with the ability for interactively\ncalling them. \n\n5. Navigate to `localhost:8000/redoc`.\n\nYou will see another version of the documentation. This one is for\npeople who prefer the style of _Redoc_ docs, instead of the _Swagger UI_\nbased ones.\n\n## Endpoints\n\nCurrently, two endpoints are exposed by the API. The one for performing\npredictions and the other for obtaining versioning info about the live API.\n\n### GET `/predictions`\n##### Predicts the ImageNet-1K labels of an image.\n\nReturned labels can be filtered according to two parameters, `top` and `minconf`.\nThe first parameter controls the number of top-confidence labels to be\nreturned, sorted in descending order according to computed confidence. The\nsecond one, limits the returned labels to the ones whose confidence score is\nat least `minconf`. These two parameters can be combined, applying the restrictions\nof both, thus returning the most restrictive labels set.\nBy default, if `top` and `minconf` are omitted, only the label with the highest\nconfidence score is returned (the same as setting `top=1`).\n\nThe image format can be any format supported be the Pillow library. For\nmore info see: https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html\n\nImage retrieval is performed through a GET request on given url.\n\n#### Parameters\n\n- **url**: The url of the image file. It can be any https or http url pointing\n   to an image file. For example: 'https://example.com/path/to/image.jpg'\n- **top** [optional]: The number of top ImageNet labels to be returned. The number\n   of returned labels cannot exceed the number of available classes\n   (top<=1000).\n- **minconf** [optional]: The minimum confidence score a label should have in order to be\n   returned. It should be in the range `[0, 1]`.\n\n#### Responses\n\nSuccessful calls return a JSON containing the following attributes:\n\n* __url__: The same url passed into the request.\n* __predictions__: An array containing the predicted label objects in descending order.\n   Each object contains the following attributes:\n   - __label__: The predicted ImageNet-1K label.\n   - __confidence__: The confidence score of the label.\n\n###### Example\n```\n{\n    \"url\": \"https://example.com/path/to/image.jpg\",\n    \"predictions\": [\n        {\"label\": \"dog\", \"confidence\": 0.78},\n        {\"label\": \"wolf\", \"confidence\": 0.06},\n        {\"label\": \"tiger\", \"confidence\": 0.03},]\n}\n```\n\n##### Error 400: InvalidImage\n\nIn case the `url` points to a resource that is not a supported image format,\nresponse code is set to `400` and the following JSON is returned:\n```\n{\"error\": {\n    \"type\": \"InvalidImage\",\n    \"detail\": \"Url is not pointing to a valid image format.\"\n}}\n```\n\n##### Error 404: UnreachableURL\n\nIf the GET request on `url` fails, then response code is set to `404` and the\n   following JSON is returned:\n```\n{\"error\": {\n    \"type\": \"UnreachableURL\",\n    \"detail\": \"Url cannot be reached.\"\n}}\n```\n\n##### Error 422: ValidationError\n\nWhen the parameters of the request are invalid, response code is set to `422` and\n   a JSON describing the cause of the error is returned. An example response is\n   presented below:\n```\n{\"error\": {\n    \"type\": \"ValidationError\",\n    \"detail\": [{\"loc\": [\"query\", \"url\"],\n                \"message\": \"URL scheme not permitted\",\n                \"type\": \"value_error.url.scheme\"}]\n}}\n```\n\nThe only part of the response that is changing for different validation errors\nis the content of `detail` attribute. It is an array containing all validation\nerrors detected. The detail object of each detected violation contains the\nfollowing attributes:\n\n* __loc__:  An array describing the location of the error. For example\n   `[\"query\", \"url\"]` means that the value of query parameter `url` is invalid.\n* __message__: An informal message describing the cause of the error.\n* __type__: A formal identifier of the error.\n\n### GET `/`\n##### Returns general info about image tagger API.\n\nThis endpoint serves both as a placeholder for root path and as a way in order\nto retrieve versioning info.\n\n#### Responses\n\nCalls return a JSON containing the following attributes:\n\n* __description__: A short textual description of the API.\n* __version__: The version of the API in the format of semantic versioning\n   (e.g. 1.0.0). For more info see: https://semver.org/\n* __revision__: An integer indicating the current revision of the API.\n   Each newer version of the API is guaranteed to have a greater revision\n   number.\n* __author__: API author's name.\n* __github_url__: Link to the github repository containing the code of this API.\n\n## Documentation\n\nExcept from the REST endpoints described above, Image Tagger also provides a live version\nof their documentation.\n\n### `/docs`: Swagger UI based documentation.\n\n### `/redoc`: Redoc based documentation.\n\n## License:\nThis project is licensed under Apache License 2.0. A copy of this license is contained in current \nproject under `LICENSE` file. It applies to all files in this project whether or not it is stated in them.\n\nCopyright 2022 | Dimitrios S. Karageorgiou\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dkarageo/image_tagger",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "image-tagger",
    "package_url": "https://pypi.org/project/image-tagger/",
    "platform": "",
    "project_url": "https://pypi.org/project/image-tagger/",
    "project_urls": {
      "Bug Tracker": "https://github.com/dkarageo/image_tagger/issues",
      "Homepage": "https://github.com/dkarageo/image_tagger"
    },
    "release_url": "https://pypi.org/project/image-tagger/1.0.0/",
    "requires_dist": [
      "tensorflow",
      "Pillow",
      "numpy",
      "fastapi",
      "uvicorn[standard]",
      "pydantic"
    ],
    "requires_python": ">=3.9",
    "summary": "A simple API for predicting ImageNet-1K labels of an image.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12554266,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c77e28ab36189856bb24a309054e065d8324731b2787968c289ae77972eff81",
          "md5": "4c3ad256c9112f20316ccb8d200cf931",
          "sha256": "43877e096a17ed5c5e7d167e6f814f42d5a9718fc702b5ad5ac5c4f818482235"
        },
        "downloads": -1,
        "filename": "image_tagger-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c3ad256c9112f20316ccb8d200cf931",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 12985,
        "upload_time": "2022-01-12T20:06:58",
        "upload_time_iso_8601": "2022-01-12T20:06:58.387404Z",
        "url": "https://files.pythonhosted.org/packages/3c/77/e28ab36189856bb24a309054e065d8324731b2787968c289ae77972eff81/image_tagger-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76ec78ddbbcb858841fcd56a04028c63c3f09d7f12cd090fca2517b346974f0e",
          "md5": "8c1b920a21c2074d8022e16ebaa9f621",
          "sha256": "d7970e8d49d953df2ac4db08cd94674fbe107df2c3c2eb7bdc096de8083a74ae"
        },
        "downloads": -1,
        "filename": "image_tagger-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c1b920a21c2074d8022e16ebaa9f621",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 12103,
        "upload_time": "2022-01-12T20:07:02",
        "upload_time_iso_8601": "2022-01-12T20:07:02.077867Z",
        "url": "https://files.pythonhosted.org/packages/76/ec/78ddbbcb858841fcd56a04028c63c3f09d7f12cd090fca2517b346974f0e/image_tagger-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c77e28ab36189856bb24a309054e065d8324731b2787968c289ae77972eff81",
        "md5": "4c3ad256c9112f20316ccb8d200cf931",
        "sha256": "43877e096a17ed5c5e7d167e6f814f42d5a9718fc702b5ad5ac5c4f818482235"
      },
      "downloads": -1,
      "filename": "image_tagger-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4c3ad256c9112f20316ccb8d200cf931",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 12985,
      "upload_time": "2022-01-12T20:06:58",
      "upload_time_iso_8601": "2022-01-12T20:06:58.387404Z",
      "url": "https://files.pythonhosted.org/packages/3c/77/e28ab36189856bb24a309054e065d8324731b2787968c289ae77972eff81/image_tagger-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76ec78ddbbcb858841fcd56a04028c63c3f09d7f12cd090fca2517b346974f0e",
        "md5": "8c1b920a21c2074d8022e16ebaa9f621",
        "sha256": "d7970e8d49d953df2ac4db08cd94674fbe107df2c3c2eb7bdc096de8083a74ae"
      },
      "downloads": -1,
      "filename": "image_tagger-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c1b920a21c2074d8022e16ebaa9f621",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 12103,
      "upload_time": "2022-01-12T20:07:02",
      "upload_time_iso_8601": "2022-01-12T20:07:02.077867Z",
      "url": "https://files.pythonhosted.org/packages/76/ec/78ddbbcb858841fcd56a04028c63c3f09d7f12cd090fca2517b346974f0e/image_tagger-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}