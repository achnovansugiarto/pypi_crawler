{
  "info": {
    "author": "Rhet Turnbull",
    "author_email": "rturnbull+git@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# mdinfo\n\nMeta Data Info (mdinfo) is a command line tool for printing metadata information about files.\n\nIt is designed to be a simple, fast, and flexible tool for extracting metadata of all types from files\nusing a rich templating system. It is written in Python and can be used both as a package for your own\nPython projects or as a command line tool. mdinfo includes a plugin system for adding support for\nother types of metadata or different file formats.\n\nThe mdinfo command line tool can output selected metadata in CSV and JSON format.\n\nCurrently tested on Linux and macOS.\n## Synopsis\n\n```bash\n$ mdinfo -p \"{audio:artist}\" -p \"{audio:album}\" -p \"{audio:track}\" -p \"{size}\" music/*.mp3\ntrack1.mp3: The Piano Guys Wonders 1 8806978\ntrack10.mp3: The Piano Guys Wonders 10 5765646\ntrack11.mp3: The Piano Guys Wonders 11 8048782\ntrack12.mp3: The Piano Guys Wonders 12 7834054\ntrack2.mp3: The Piano Guys Wonders 2 8563796\ntrack3.mp3: The Piano Guys Wonders 3 6162443\ntrack4.mp3: The Piano Guys Wonders 4 7863944\ntrack5.mp3: The Piano Guys Wonders 5 8194232\ntrack6.mp3: The Piano Guys Wonders 6 8794087\ntrack7.mp3: The Piano Guys Wonders 7 8873454\ntrack8.mp3: The Piano Guys feat. Shweta Subram Wonders 8 8582158\ntrack9.mp3: The Piano Guys Wonders 9 9011851\n```\n\nCSV output:\n\n```bash\n$ mdinfo -p \"{audio:artist}\" -p \"{audio:album}\" -p \"{audio:track}\" -p \"{size}\" music/*.mp3 --csv\nfilename,audio:artist,audio:album,audio:track,size\ntrack1.mp3,The Piano Guys,Wonders,1,8806978\ntrack10.mp3,The Piano Guys,Wonders,10,5765646\ntrack11.mp3,The Piano Guys,Wonders,11,8048782\ntrack12.mp3,The Piano Guys,Wonders,12,7834054\ntrack2.mp3,The Piano Guys,Wonders,2,8563796\ntrack3.mp3,The Piano Guys,Wonders,3,6162443\ntrack4.mp3,The Piano Guys,Wonders,4,7863944\ntrack5.mp3,The Piano Guys,Wonders,5,8194232\ntrack6.mp3,The Piano Guys,Wonders,6,8794087\ntrack7.mp3,The Piano Guys,Wonders,7,8873454\ntrack8.mp3,The Piano Guys feat. Shweta Subram,Wonders,8,8582158\ntrack9.mp3,The Piano Guys,Wonders,9,9011851\n```\n\nJSON output:\n\n```bash\n$ mdinfo -p \"{audio:artist}\" -p \"{audio:album}\" -p \"{audio:track}\" -p \"{size}\" music/*.mp3 --json\n{\n    \"audio:album\": \"Wonders\",\n    \"audio:artist\": \"The Piano Guys\",\n    \"audio:track\": \"1\",\n    \"filename\": \"track1.mp3\",\n    \"size\": \"8806978\"\n}\n{\n    \"audio:album\": \"Wonders\",\n    \"audio:artist\": \"The Piano Guys\",\n    \"audio:track\": \"10\",\n    \"filename\": \"track10.mp3\",\n    \"size\": \"5765646\"\n}\n...\n```\n\nJSON array output:\n\n```bash\n$ mdinfo -p \"{audio:artist}\" -p \"{audio:album}\" -p \"{audio:track}\" -p \"{size}\" music/*.mp3 --json --array\n[\n    {\n        \"audio:album\": \"Wonders\",\n        \"audio:artist\": \"The Piano Guys\",\n        \"audio:track\": \"1\",\n        \"filename\": \"track1.mp3\",\n        \"size\": \"8806978\"\n    },\n    {\n        \"audio:album\": \"Wonders\",\n        \"audio:artist\": \"The Piano Guys\",\n        \"audio:track\": \"10\",\n        \"filename\": \"track10.mp3\",\n        \"size\": \"5765646\"\n    },\n    ...\n]\n```\n\n## Plugins\n\nmdinfo uses a plugin system to add support for different types of metadata and different file formats.\n\nThe following plugins are available and can be installed using `pip install <plugin>` or `pipx inject mdinfo <plugin>`:\n\n### mdinfo-exiftool\n\n[mdinfo-exiftool](https://github.com/RhetTbull/mdinfo-exiftool): Adds support for using [exiftool](https://exiftool.org/) to extract metadata from files.\n\n`pip install mdinfo-exiftool`\n\n```bash\nmdinfo -p \"{exiftool:XMP:Title}\" -p \"{exiftool:Keywords}\" *.jpeg\n```\n\n### mdinfo-macos\n\n[mdinfo-macos](https://github.com/RhetTbull/mdinfo_macos): Adds support for macOS native metadata including all Spotlight metadata.\n\n`pip install mdinfo-macos`\n\n```bash\nmdinfo -p \"{mac:kMDItemKeywords}\" -p \"{finder:comment}\" *.*\n```\n\n## Command Line Usage\n\n<!-- [[[cog\nimport cog\nfrom mdinfo.cli import cli\nfrom click.testing import CliRunner\nrunner = CliRunner()\nresult = runner.invoke(cli, [\"--help\"])\nhelp = result.output.replace(\"Usage: cli\", \"Usage: mdinfo\")\ncog.out(\n    \"```\\n{}\\n```\".format(help)\n)\n]]] -->\n```\nUsage: mdinfo [OPTIONS] FILES...\n\n  Print metadata info for files\n\nRequired:\n  -p, --print METADATA_TEMPLATE  Template to use for printing metadata to\n                                 stdout. May be repeated to print multiple\n                                 templates.   [required]\n\nOutput Type: [mutually exclusive]\n  -j, --json                     Print metadata as JSON. The JSON field name\n                                 will be the same as the template name. You may\n                                 specify a different field name by using the\n                                 syntax: 'field_name:{template}' or\n                                 'field_name={template}'.\n  -c, --csv                      Print metadata as CSV. The CSV field name will\n                                 be the same as the template name. You may\n                                 specify a different field name by using the\n                                 syntax: 'field_name:{template}' or\n                                 'field_name={template}'.\n\nFormatting Options:\n  -f, --no-filename              Do not print filename headers. Without -h/--no-\n                                 header, prints headers for each file which\n                                 varies based on output type: With -p/--print,\n                                 prints filename header before each line\n                                 (similar to output of grep). With -c/--csv,\n                                 prints filename as first column. With\n                                 -j/--json, includes 'filename' in JSON\n                                 dictionary which is set to the name of the\n                                 file. The use of -h/--no-header overrides the\n                                 default behavior such that: With -p/--print,\n                                 does not print filename header. With -c/--csv,\n                                 does not print filename in first column. With\n                                 -j/--json, does not include 'filename' in JSON\n                                 dictionary. See also -P/--path to print full\n                                 file path instead of filename.\n  -h, --no-header                Do not print headers with CSV output.\n  -0, --null-separator           Use null character as field separator with\n                                 -p/--print.\n  -u, --undefined TEXT           String to use for undefined values. Default is\n                                 empty string for standard output and --csv and\n                                 `null` for --json.\n  -d, --delimiter TEXT           Field delimiter for CSV output. Default is\n                                 comma (,). To use tab as delimiter, use `-d\n                                 '\\t'` or `-d tab`.\n  -a, --array                    When used with --json, outputs a JSON array of\n                                 objects instead single objects.\n  -P, --path                     Print full file path instead of filename. See\n                                 also -f/--no-filename.\n\nOther options:\n  --version                      Show the version and exit.\n  --help                         Show this message and exit.\n\nTemplate System\n\nmdinfo contains a rich templating system which allows fine-grained control over \nthe output format of metadata. The templating system converts one or template   \nstatements, written in metadata templating language (MTL), to one or more       \nrendered values using metadata information from the file being processed.       \n\nIn its simplest form, a template statement has the form: \"{template_field}\", for\nexample \"{size}\" which resolves to the size of the file. Template fields may    \nalso have subfields delineated by a : as in \"{audio:artist}\" which resolves to  \nthe artist name for an audio file (e.g. mp3).  In this example, the field is    \naudio and the subfield is artist.  Template fields may also have attributes     \ndelineated by a . as in \"{created.year}\" which resolves to the 4-digit year of  \nthe file creation date. In this example, the field is created and the attribute \nis year.                                                                        \n\nTemplate statements may contain one or more modifiers.  The full syntax is:     \n\n\"pretext{delim+template_field:subfield|filter[find,replace]                     \nconditional?bool_value,default}posttext\"                                        \n\nTemplate statements are white-space sensitive meaning that white space (spaces, \ntabs) changes the meaning of the template statement.                            \n\npretext and posttext are free form text.  For example, if an image file has     \nTitle (e.g. XMP:Title) \"My file Title\". the template statement \"The title of the\nfile is {exiftool:Title}\", resolves to \"The title of the file is My file Title\".\nThe pretext in this example is \"The title if the file is \" and the              \ntemplate_field is {Title}.  Note: some punctuation such as commas cannot be used\nin the pretext or posttext.  For this reason, the template system provides      \nspecial punctuation templates like {comma} to insert punctuation where needed.  \nFor example: {exiftool:Make}{comma}{exiftool:Model} could resolve to            \nApple,iPhone SE.                                                                \n\nDelimiter                                                                       \n\ndelim: optional delimiter string to use when expanding multi-valued template    \nvalues in-place                                                                 \n\n+: If present before template name, expands the template in place.  If delim not\nprovided, values are joined with no delimiter.                                  \n\ne.g. if image file keywords are [\"foo\",\"bar\"]:                                  \n\n • \"{exiftool:Keywords}\" renders to \"foo\", \"bar\"                                \n • \"{,+exiftool:Keywords}\" renders to: \"foo,bar\"                                \n • \"{; +exiftool:Keywords}\" renders to: \"foo; bar\"                              \n • \"{+exiftool:Keywords}\" renders to \"foobar\"                                   \n\ntemplate_field: The template field to resolve.                                  \n\n:subfield: Templates may have sub-fields; reserved for future use.              \n\nFilters                                                                         \n\n|filter: You may optionally append one or more filter commands to the end of the\ntemplate field using the vertical pipe ('|') symbol.  Filters may be combined,  \nseparated by '|' as in: {user|capitalize|parens}.                               \n\nValid filters are:                                                              \n\n • lower: Convert value to lower case, e.g. 'Value' => 'value'.                 \n • upper: Convert value to upper case, e.g. 'Value' => 'VALUE'.                 \n • strip: Strip whitespace from beginning/end of value, e.g. ' Value ' =>       \n   'Value'.                                                                     \n • titlecase: Convert value to title case, e.g. 'my value' => 'My Value'.       \n • capitalize: Capitalize first word of value and convert other words to lower  \n   case, e.g. 'MY VALUE' => 'My value'.                                         \n • braces: Enclose value in curly braces, e.g. 'value => '{value}'.             \n • parens: Enclose value in parentheses, e.g. 'value' => '(value').             \n • brackets: Enclose value in brackets, e.g. 'value' => '[value]'.              \n • split(x): Split value into a list of values using x as delimiter, e.g.       \n   'value1;value2' => ['value1', 'value2'] if used with split(;).               \n • autosplit: Automatically split delimited string into separate values (for    \n   example, keyword string in docx files); will split strings delimited by      \n   comma, semicolon, or space, e.g. 'value1,value2' => ['value1', 'value2'].    \n • chop(x): Remove x characters off the end of value, e.g. chop(1): 'Value' =>  \n   'Valu'; when applied to a list, chops characters from each list value, e.g.  \n   chop(1): [\"travel\", \"beach\"]=> [\"trave\", \"beac\"].                            \n • chomp(x): Remove x characters from the beginning of value, e.g. chomp(1):    \n   ['Value'] => ['alue']; when applied to a list, removes characters from each  \n   list value, e.g. chomp(1): [\"travel\", \"beach\"]=> [\"ravel\", \"each\"].          \n • sort: Sort list of values, e.g. ['c', 'b', 'a'] => ['a', 'b', 'c'].          \n • rsort: Sort list of values in reverse order, e.g. ['a', 'b', 'c'] => ['c',   \n   'b', 'a'].                                                                   \n • reverse: Reverse order of values, e.g. ['a', 'b', 'c'] => ['c', 'b', 'a'].   \n • uniq: Remove duplicate values, e.g. ['a', 'b', 'c', 'b', 'a'] => ['a', 'b',  \n   'c'].                                                                        \n • join(x): Join list of values with delimiter x, e.g. join(:): ['a', 'b', 'c'] \n   => 'a:b:c'; the DELIM option functions similar to join(x) but with DELIM, the\n   join happens before being passed to any filters.                             \n • append(x): Append x to list of values, e.g. append(d): ['a', 'b', 'c'] =>    \n   ['a', 'b', 'c', 'd'].                                                        \n • prepend(x): Prepend x to list of values, e.g. prepend(d): ['a', 'b', 'c'] => \n   ['d', 'a', 'b', 'c'].                                                        \n • appends(x): [append s(tring)] Append x to each value of list of values, e.g. \n   appends(d): ['a', 'b', 'c'] => ['ad', 'bd', 'cd'].                           \n • prepends(x): [prepend s(tring)] Prepend x to each value of list of values,   \n   e.g. prepends(d): ['a', 'b', 'c'] => ['da', 'db', 'dc'].                     \n • remove(x): Remove x from list of values, e.g. remove(b): ['a', 'b', 'c'] =>  \n   ['a', 'c'].                                                                  \n • slice(start:stop:step): Slice list using same semantics as Python's list     \n   slicing, e.g. slice(1:3): ['a', 'b', 'c', 'd'] => ['b', 'c']; slice(1:4:2):  \n   ['a', 'b', 'c', 'd'] => ['b', 'd']; slice(1:): ['a', 'b', 'c', 'd'] => ['b', \n   'c', 'd']; slice(:-1): ['a', 'b', 'c', 'd'] => ['a', 'b', 'c']; slice(::-1): \n   ['a', 'b', 'c', 'd'] => ['d', 'c', 'b', 'a']. See also sslice().             \n • sslice(start:stop:step): [s(tring) slice] Slice values in a list using same  \n   semantics as Python's string slicing, e.g. sslice(1:3):'abcd => 'bc';        \n   sslice(1:4:2): 'abcd' => 'bd', etc. See also slice().                        \n\n\ne.g. if file keywords are [\"FOO\",\"bar\"]:                                        \n\n • \"{exiftool:Keywords|lower}\" renders to \"foo\", \"bar\"                          \n • \"{exiftool:Keywords|upper}\" renders to: \"FOO\", \"BAR\"                         \n • \"{exiftool:Keywords|capitalize}\" renders to: \"Foo\", \"Bar\"                    \n • \"{exiftool:Keywords|lower|parens}\" renders to: \"(foo)\", \"(bar)\"              \n\ne.g. if an image file description is \"my description\":                          \n\n • \"{exiftool:Description|titlecase}\" renders to: \"My Description\"              \n\nFind/Replace                                                                    \n\n[find,replace]: optional text replacement to perform on rendered template value.\nFor example, to replace \"/\" in a a keyword, you could use the template          \n\"{exiftool:Keywords[/,-]}\".  Multiple replacements can be made by appending \"|\" \nand adding another find|replace pair.  e.g. to replace both \"/\" and \":\" in      \nkeywords: \"{exiftool:Keywords[/,-|:,-]}\".  find/replace pairs are not limited to\nsingle characters.  The \"|\" character cannot be used in a find/replace pair.    \n\nConditional Operators                                                           \n\nconditional: optional conditional expression that is evaluated as boolean       \n(True/False) for use with the ?bool_value modifier.  Conditional expressions    \ntake the form 'not operator value' where not is an optional modifier that       \nnegates the operator.  Note: the space before the conditional expression is     \nrequired if you use a conditional expression.  Valid comparison operators are:  \n\n • contains: template field contains value, similar to python's in              \n • matches: template field contains exactly value, unlike contains: does not    \n   match partial matches                                                        \n • startswith: template field starts with value                                 \n • endswith: template field ends with value                                     \n • <=: template field is less than or equal to value                            \n • >=: template field is greater than or equal to value                         \n • <: template field is less than value                                         \n • >: template field is greater than value                                      \n • ==: template field equals value                                              \n • !=: template field does not equal value                                      \n\nMultiple values may be separated by '|' (the pipe symbol) when used with        \ncontains, matches, startswith, and endswith.  value is itself a template        \nstatement so you can use one or more template fields in value which will be     \nresolved before the comparison occurs. When applied to multi-valued fields (ie. \nlists), the comparison is applied to each value in the list and evaluates to    \nTrue if any of the values match.                                                \n\nFor example:                                                                    \n\n • {exiftool:Keywords matches Beach} resolves to True if 'Beach' is a keyword.  \n   It would not match keyword 'BeachDay'.                                       \n • {exiftool:Keywords contains Beach} resolves to True if any keyword contains  \n   the word 'Beach' so it would match both 'Beach' and 'BeachDay'.              \n • {ISO < 100} resolves to True if the file's ISO is < 100.                     \n • {exiftool:Keywords|lower contains beach} uses the lower case filter to do    \n   case-insensitive matching to match any keyword that contains the word        \n   'beach'.                                                                     \n • {exiftool:Keywords|lower not contains beach} uses the not modifier to negate \n   the comparison so this resolves to True if there is no keyword that matches  \n   'beach'.                                                                     \n • {docx:author startswith John} resolves to True if the author of a docx file  \n   starts with 'John'.                                                          \n • {audio:bitrate == 320} resolves to True if the audio file's bitrate is 320   \n   kbps.                                                                        \n\nBoolean Values                                                                  \n\n?bool_value: Template fields may be evaluated as boolean (True/False) by        \nappending \"?\" after the field name or \"[find/replace]\".  If a field is True or  \nhas any value, the value following the \"?\" will be used to render the template  \ninstead of the actual field value.  If the template field evaluates to False or \nhas no value (e.g. file has no title and field is \"{audio:title}\") then the     \ndefault value following a \",\" will be used.                                     \n\ne.g. if file has a title                                                        \n\n • \"{audio:title?I have a title,I do not have a title}\" renders to \"I have a    \n   title\"                                                                       \n\nand if it does not have a title:                                                \n\n • \"{audio:title?I have a title,I do not have a title}\" renders to \"I do not    \n   have a title\"                                                                \n\nDefault Values                                                                  \n\n,default: optional default value to use if the template name has no value.  This\nmodifier is also used for the value if False for boolean-type fields (see above)\nas well as to hold a sub-template for values like {created.strftime}.  If no    \ndefault value provided and the field is null, mdinfo will use a default value of\n'_' (underscore character).                                                     \n\nTemplate fields such as created.strftime use the default value to pass the      \ntemplate to use for strftime.                                                   \n\ne.g., if file date is 4 February 2020, 19:07:38,                                \n\n • \"{created.strftime,%Y-%m-%d-%H%M%S}\" renders to \"2020-02-04-190738\"          \n\nSpecial Characters                                                              \n\nIf you want to include \"{\" or \"}\" in the output, use \"{openbrace}\" or           \n\"{closebrace}\" template substitution.                                           \n\ne.g. \"{created.year}/{openbrace}{audio.title}{closebrace}\" would result in      \n\"2020/{file Title}\".                                                            \n\nField Attributes                                                                \n\nSome templates have additional modifiers that can be appended to the template   \nname using dot notation to access specific attributes of the template field. For\nexample, the {filepath} template returns the path of the file being processed   \nand {filepath.parent} returns the parent directory.                             \n\nVariables                                                                       \n\nYou can define variables for later use in the template string using the format  \n{var:NAME,VALUE}.  Variables may then be referenced using the format %NAME. For \nexample: {var:foo,bar} defines the variable %foo to have value bar. This can be \nuseful if you want to re-use a complex template value in multiple places within \nyour template string or for allowing the use of characters that would otherwise \nbe prohibited in a template string. For example, the \"pipe\" (|) character is not\nallowed in a find/replace pair but you can get around this limitation like so:  \n{var:pipe,{pipe}}{audio:title[-,%pipe]} which replaces the - character with |   \n(the value of %pipe).                                                           \n\nVariables can also be referenced as fields in the template string, for example: \n{var:year,created.year}{filepath.stem}-{%year}{filepath.suffix}. In some cases, \nuse of variables can make your template string more readable.  Variables can be \nused as template fields, as values for filters, as values for conditional       \noperations, or as default values.  When used as a conditional value or default  \nvalue, variables should be treated like any other field and enclosed in braces  \nas conditional and default values are evaluated as template strings. For        \nexample: `{var:name,John}{docx:author contains {%name}?{%name},Not-{%name}}     \n\nIf you need to use a % (percent sign character), you can escape the percent sign\nby using %%.  You can also use the {percent} template field where a template    \nfield is required. For example:                                                 \n\n{audio:title[:,%%]} replaces the : with % and {audio:title contains             \nFoo?{audio:title}{percent},{audio:title}} adds % to the audio title if it       \ncontains Foo.                                                                   \n\nPunctuation Fields                                                              \n\nField           Description\n{comma}         A comma: ','\n{semicolon}     A semicolon: ';'\n{questionmark}  A question mark: '?'\n{pipe}          A vertical pipe: '|'\n{percent}       A percent sign: '%'\n{openbrace}     An open brace: '{'\n{closebrace}    A close brace: '}'\n{openparens}    An open parentheses: '('\n{closeparens}   A close parentheses: ')'\n{openbracket}   An open bracket: '['\n{closebracket}  A close bracket: ']'\n{newline}       A newline: '\\n'\n{lf}            A line feed: '\\n', alias for {newline}\n{cr}            A carriage return: '\\r'\n{crlf}          a carriage return + line feed: '\\r\\n'\n\nWithin the template system, many punctuation characters have special meaning,   \ne.g. {} indicates a template field and this means that some punctuation         \ncharacters cannot be inserted into the template. Thus, if you want to insert    \npunctuation into the rendered template value, you can use these punctuation     \nfields to do so. For example, {openbrace}value{closebrace} will render to       \n{value}.                                                                        \n\nString Formatting Fields                                                        \n\nField     Description\n{strip}   Use in form '{strip,TEMPLATE}'; strips whitespace from beginning and\n          end of rendered TEMPLATE value(s).\n{format}  Use in form, '{format:TYPE:FORMAT,TEMPLATE}'; converts TEMPLATE value\n          to TYPE then formats the value using python string formatting codes\n          specified by FORMAT; TYPE is one of: 'int', 'float', or 'str'.\n\nThe {strip} and {format} fields are used to format strings. {strip,TEMPLATE}    \nstrips whitespace from TEMPLATE. For example, {strip,{exiftool:Title}} will     \nstrip any excess whitespace from the title of an image file.                    \n\n{format:TYPE:FORMAT,TEMPLATE} formats TEMPLATE using python string formatting   \ncodes. For example:                                                             \n\n • {format:int:02d,{audio:track}} will format the track number of an audio file \n   to two digits with leading zeros.                                            \n • {format:str:-^30,{audio.title}} will center the title of an audio file and   \n   pad it to 30 characters with '-'.                                            \n\nTYPE must be one of 'int', 'float', or 'str'.                                   \n\nFORMAT may be a string or an variable. A variable may be helpful when you need  \nto use a character in the format string that would otherwise not be allowed. For\nexample, to use a comma separator, you could do this:                           \n\n{var:commaformat,{comma}}{format:int:%commaformat,{created.year}} which         \ntransforms \"2021\" to \"2,021\"                                                    \n\nSee https://docs.python.org/3.7/library/string.html#formatspec for more         \ninformation on valid FORMAT values.                                             \n\nFile Information Fields                                                         \n\nField    Description\n{size}   Size of file in bytes\n{uid}    User identifier of the file owner\n{gid}    Group identifier of the file owner\n{user}   User name of the file owner\n{group}  Group name of the file owner\n\nDate/Time Fields                                                                \n\nField       Description\n{created}   File creation date/time (MacOS only; only other platforms returns\n            file inode change time)\n{modified}  File modification date/time\n{accessed}  File last accessed date/time\n{today}     The current date/time (as of when {today} is first evaluated)\n{now}       The current date/time (evaluated at the time the template is\n            processed)\n\nDate/time fields may be formatted using \"dot notation\" attributes which are     \nappended to the field name following a . (period). For example, {created.month} \nresolves to the month name of the file's creation date in the user's locale,    \ne.g. December.                                                                  \n\nThe {today} and {now} fields resolve to the current date/time with one key      \ndistinction between them: {today} is the current date/time as of when {today} is\nfirst evaluated and will remain unchanged for every file processed; {now} is the\ncurrent date/time at the time each template is processed and will change with   \nevery file processed.                                                           \n\nThe following attributes are available:                                         \n\nAttribute  Description\ndate       ISO date, e.g. 2020-03-22\nyear       4-digit year, e.g. 2021\nyy         2-digit year, e.g. 21\nmonth      Month name as locale's full name, e.g. December\nmon        Month as locale's abbreviated name, e.g. Dec\nmm         2-digit month, e.g. 12\ndd         2-digit day of the month, e.g. 22\ndow        Day of the week as locale's full name, e.g. Tuesday\ndoy        Julian day of year starting from 001\nhour       2-digit hour, e.g. 10\nmin        2-digit minute, e.g. 15\nsec        2-digit second, e.g. 30\nstrftime   Apply strftime template to date/time. Should be used in form\n           {created.strftime,TEMPLATE} where TEMPLATE is a valid strftime\n           template, e.g. {created.strftime,%Y-%U} would result in year-week\n           number of year: '2020-23'. If used with no template will return null\n           value. See https://strftime.org/ for help on strftime templates.\n\nFile Path Fields                                                                \n\nField       Description\n{filepath}  The full path to the file being processed\n\nThe {filepath} fields returns the full path to the source file being processed. \nVarious attributes of the path can be accessed using \"dot notation\" (appended to\nthe filepath field with a '.'). For example, {filepath.name} returns just the   \nname of the file without the full path. {filepath.parent} returns the parent    \ndirectory of the file.                                                          \n\nPath attributes can be chained, for example {filepath.parent.name} returns just \nthe name of the immediate parent directory without the full directory path.     \n\nFor example, if the field {filepath} is '/Shared/files/IMG_1234.JPG':           \n\n • {filepath.parent} is '/Shared/files'                                         \n • {filepath.name} is 'IMG_1234.JPG'                                            \n • {filepath.stem} is 'IMG_1234'                                                \n • {filepath.suffix} is '.JPG'                                                  \n\nThe following attributes are available:                                         \n\nSubfield  Description\nname      The name of the file\nstem      The name of the file without the suffix (extension)\nsuffix    The suffix (extension) of the file, including the leading `.`\nparent    The parent directory of the file\n\nAudio Files                                                                     \n\nField    Description\n{audio}  Use in form '{audio:TAG}'; Returns tag value for various audio types\n         include mp3,\n\nThe {audio} field provides access to audio-file related tags for audio files.   \nThe following formats are supported:                                            \n\n • MP3 (ID3 v1, v1.1, v2.2, v2.3+)                                              \n • Wave/RIFF                                                                    \n • OGG                                                                          \n • OPUS                                                                         \n • FLAC                                                                         \n • WMA                                                                          \n • MP4/M4A/M4B                                                                  \n • AIFF/AIFF-C                                                                  \n\nThe {audio} field must be used with one or more the following subfields in the  \nform: {audio:SUBFIELD}, for example: {audio:title} or {audio:artist}.           \n\nSubfield      Description\nalbum         album as string\nalbumartist   album artist as string\nartist        artist name as string\naudio_offset  number of bytes before audio data begins\nbitrate       bitrate in kBits/s\ncomment       file comment as string\ncomposer      composer as string\ndisc          disc number\ndisc_total    the total number of discs\nduration      duration of the song in seconds\nfilesize      file size in bytes\ngenre         genre as string\nsamplerate    samples per second\ntitle         title of the song\ntrack         track number as string\ntrack_total   total number of tracks as string\nyear          year or data as string\n\nAdobe PDF Document Fields                                                       \n\nField  Description\n{pdf}  Access metadata properties of Adobe PDF files (.pdf); use in format\n       {pdf:SUBFIELD}\n\nAccess metadata properties of Adobe PDF files (.pdf). Use in format             \n{pdf:SUBFIELD} where SUBFIELD is one of the following:                          \n\nSubfield  Description\nauthor    Author of the document.\ncreator   The application that created the document.\nproducer  The application the produced the PDF (may be different than creator).\ncreated   Date of creation of the document; a date/time value.\nmodified  Date on which the document was changed; a date/time value.\nsubject   The topic of the content of the document.\ntitle     The name given to the document.\nkeywords  Keywords associated with the document; a string of delimited words.\n\nIf the subfield is a date/time value (created, modified) the following          \nattributes are available in dot notation (e.g. {pdf:created.year}):             \n\nAttribute  Description\ndate       ISO date, e.g. 2020-03-22\nyear       4-digit year, e.g. 2021\nyy         2-digit year, e.g. 21\nmonth      Month name as locale's full name, e.g. December\nmon        Month as locale's abbreviated name, e.g. Dec\nmm         2-digit month, e.g. 12\ndd         2-digit day of the month, e.g. 22\ndow        Day of the week as locale's full name, e.g. Tuesday\ndoy        Julian day of year starting from 001\nhour       2-digit hour, e.g. 10\nmin        2-digit minute, e.g. 15\nsec        2-digit second, e.g. 30\nstrftime   Apply strftime template to date/time. Should be used in form\n           {docx:created.strftime,TEMPLATE} where TEMPLATE is a valid strftime\n           template, e.g. {docx:created.strftime,%Y-%U} would result in year-\n           week number of year: '2020-23'. If used with no template will return\n           null value. See https://strftime.org/ for help on strftime templates.\n\nMicrosoft Word Document Fields                                                  \n\nField   Description\n{docx}  Access metadata properties of Microsoft Word document files (.docx); use\n        in format {docx:SUBFIELD}\n\nAccess metadata properties of Microsoft Word document files (.docx). Use in     \nformat {docx:SUBFIELD} where SUBFIELD is one of the following:                  \n\nSubfield          Description\nauthor            Named ‘creator’ in spec. An entity primarily responsible for\n                  making the content of the resource. (Dublin Core)\ncategory          A categorization of the content of this package. Example\n                  values for this property might include: Resume, Letter,\n                  Financial Forecast, Proposal, Technical Presentation, and so\n                  on. (Open Packaging Conventions)\ncomments          Named ‘description’ in spec. An explanation of the content of\n                  the resource. Values might include an abstract, table of\n                  contents, reference to a graphical representation of content,\n                  and a free-text account of the content. (Dublin Core)\ncontent_status    The status of the content. Values might include “Draft”,\n                  “Reviewed”, and “Final”. (Open Packaging Conventions)\ncreated           Date of creation of the resource; a date/time value. (Dublin\n                  Core)\nidentifier        An unambiguous reference to the resource within a given\n                  context. (Dublin Core)\nkeywords          A delimited set of keywords to support searching and indexing.\n                  This is typically a list of terms that are not available\n                  elsewhere in the properties. (Open Packaging Conventions)\nlanguage          The language of the intellectual content of the resource.\n                  (Dublin Core)\nlast_modified_by  The user who performed the last modification. The\n                  identification is environment-specific. Examples include a\n                  name, email address, or employee ID. It is recommended that\n                  this value be as concise as possible. (Open Packaging\n                  Conventions)\nlast_printed      The date and time of the last printing; a date/time value.\n                  (Open Packaging Conventions)\nmodified          Date on which the resource was changed; a date/time value.\n                  (Dublin Core)\nrevision          The revision number. This value might indicate the number of\n                  saves or revisions, provided the application updates it after\n                  each revision. (Open Packaging Conventions)\nsubject           The topic of the content of the resource. (Dublin Core)\ntitle             The name given to the resource. (Dublin Core)\nversion           The version designator. This value is set by the user or by\n                  the application. (Open Packaging Conventions)\n\nIf the subfield is a date/time value (created, modified, last_printed) the      \nfollowing attributes are available in dot notation (e.g. {docx:created.year}):  \n\nAttribute  Description\ndate       ISO date, e.g. 2020-03-22\nyear       4-digit year, e.g. 2021\nyy         2-digit year, e.g. 21\nmonth      Month name as locale's full name, e.g. December\nmon        Month as locale's abbreviated name, e.g. Dec\nmm         2-digit month, e.g. 12\ndd         2-digit day of the month, e.g. 22\ndow        Day of the week as locale's full name, e.g. Tuesday\ndoy        Julian day of year starting from 001\nhour       2-digit hour, e.g. 10\nmin        2-digit minute, e.g. 15\nsec        2-digit second, e.g. 30\nstrftime   Apply strftime template to date/time. Should be used in form\n           {docx:created.strftime,TEMPLATE} where TEMPLATE is a valid strftime\n           template, e.g. {docx:created.strftime,%Y-%U} would result in year-\n           week number of year: '2020-23'. If used with no template will return\n           null value. See https://strftime.org/ for help on strftime templates.\n\n\n\n\n```\n<!-- [[[end]]] -->\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdinfo",
    "package_url": "https://pypi.org/project/mdinfo/",
    "platform": null,
    "project_url": "https://pypi.org/project/mdinfo/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mdinfo/0.1.1/",
    "requires_dist": [
      "click (>=8.1.3,<9.0.0)",
      "cloup (>=2.0.0.post1,<3.0.0)",
      "datetime-tzutils (>=1.0.1,<2.0.0)",
      "pathvalidate (>=2.5.2,<3.0.0)",
      "pdfminer.six (>=20221105,<20221106)",
      "pluggy (>=1.0.0,<2.0.0)",
      "python-docx (>=0.8.11,<0.9.0)",
      "rich (>=13.3.1,<14.0.0)",
      "textX (>=3.1.1,<4.0.0)",
      "tinytag (>=1.8.1,<2.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "Print file metadata in various formats using a metadata template system.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17353656,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "902cda793bc0ad909af48d270afb3c58442e2c43a27d357902e472ddb06a12b8",
          "md5": "d90e218f0c79955d2a095842cb2d65e0",
          "sha256": "1fac42cf1af810fe27b82e078abf41cd3f17d324d15a545979e4efac2f994f01"
        },
        "downloads": -1,
        "filename": "mdinfo-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d90e218f0c79955d2a095842cb2d65e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 48925,
        "upload_time": "2023-03-17T13:22:43",
        "upload_time_iso_8601": "2023-03-17T13:22:43.680916Z",
        "url": "https://files.pythonhosted.org/packages/90/2c/da793bc0ad909af48d270afb3c58442e2c43a27d357902e472ddb06a12b8/mdinfo-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31f8e6bcad5e96b93bb1ea717b5c1b2ae776a06ab2c97c2f6b7e8242d67be2d5",
          "md5": "8ce811e0bf48ab12c5b7d3f74e35e9bb",
          "sha256": "05cbb8b3061176a0062d352394972b304e178f18867fbef4b0f137d692d1d56c"
        },
        "downloads": -1,
        "filename": "mdinfo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ce811e0bf48ab12c5b7d3f74e35e9bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 49285,
        "upload_time": "2023-03-17T13:22:45",
        "upload_time_iso_8601": "2023-03-17T13:22:45.603022Z",
        "url": "https://files.pythonhosted.org/packages/31/f8/e6bcad5e96b93bb1ea717b5c1b2ae776a06ab2c97c2f6b7e8242d67be2d5/mdinfo-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d0b301c5653bbce449aadcdd70aeedd6b94e9888c50bef89d848e57aafc2127",
          "md5": "e1e1c45c51e4b8ae26f3dedd4470707c",
          "sha256": "25269b6a33097d347b608b5b55fab1b486e817ac18eaf36a6e17ec75e54ca0a8"
        },
        "downloads": -1,
        "filename": "mdinfo-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1e1c45c51e4b8ae26f3dedd4470707c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 49166,
        "upload_time": "2023-03-19T13:35:45",
        "upload_time_iso_8601": "2023-03-19T13:35:45.333413Z",
        "url": "https://files.pythonhosted.org/packages/9d/0b/301c5653bbce449aadcdd70aeedd6b94e9888c50bef89d848e57aafc2127/mdinfo-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33f3b0f3e24607f50f7d30e0020f920b45654da64eed560f09157689409cf4f1",
          "md5": "39899096df6f5217d6402de22436d733",
          "sha256": "37550e189148287b74f351c48006e48e00185f67a952ad657737a64c8de99228"
        },
        "downloads": -1,
        "filename": "mdinfo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "39899096df6f5217d6402de22436d733",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 49748,
        "upload_time": "2023-03-19T13:35:47",
        "upload_time_iso_8601": "2023-03-19T13:35:47.305061Z",
        "url": "https://files.pythonhosted.org/packages/33/f3/b0f3e24607f50f7d30e0020f920b45654da64eed560f09157689409cf4f1/mdinfo-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d0b301c5653bbce449aadcdd70aeedd6b94e9888c50bef89d848e57aafc2127",
        "md5": "e1e1c45c51e4b8ae26f3dedd4470707c",
        "sha256": "25269b6a33097d347b608b5b55fab1b486e817ac18eaf36a6e17ec75e54ca0a8"
      },
      "downloads": -1,
      "filename": "mdinfo-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1e1c45c51e4b8ae26f3dedd4470707c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 49166,
      "upload_time": "2023-03-19T13:35:45",
      "upload_time_iso_8601": "2023-03-19T13:35:45.333413Z",
      "url": "https://files.pythonhosted.org/packages/9d/0b/301c5653bbce449aadcdd70aeedd6b94e9888c50bef89d848e57aafc2127/mdinfo-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33f3b0f3e24607f50f7d30e0020f920b45654da64eed560f09157689409cf4f1",
        "md5": "39899096df6f5217d6402de22436d733",
        "sha256": "37550e189148287b74f351c48006e48e00185f67a952ad657737a64c8de99228"
      },
      "downloads": -1,
      "filename": "mdinfo-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "39899096df6f5217d6402de22436d733",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 49748,
      "upload_time": "2023-03-19T13:35:47",
      "upload_time_iso_8601": "2023-03-19T13:35:47.305061Z",
      "url": "https://files.pythonhosted.org/packages/33/f3/b0f3e24607f50f7d30e0020f920b45654da64eed560f09157689409cf4f1/mdinfo-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}