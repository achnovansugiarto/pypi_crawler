{
  "info": {
    "author": "Brian Willett",
    "author_email": "bmwillett1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# top-choice\n\n## INTRODUCTION\n\nEver misclick on an ad, only to receive similar ads again and again? Or \nmaybe your friend asks you to order him some junk food on your \nonline grocery account, where you normally only order healthy foods, \nand now you are served bad recommendations?  Product recommendation systems\ncan be oversensitive to outlier orders, which we can think of as noise in the\ndata the system uses to find user preferences.  This can lead to user frustration.\n\nMy goal is to develop a product recommendation system which more robust to these outliers.  My approach is based on [topological \ndata analysis.](https://en.wikipedia.org/wiki/Topological_data_analysis)\n\nThe author of the repo is Brian Willett (bmwillett1 at gmail).\n\n## BACKGROUND\n\nA product recommendation system is an algorithm which determines for each user a set\nof products or services which they would like to purchase or interact with.  Typically these\nrely on a large dataset of users and products, for example, a history of\npast interactions between users and products.  A common approach to this problem is\nto use a machine learning algorithm trained on this dataset.  In particular, \nmodern approaches often use neural networks and deep learning techniques to \nachieve impressive accuracy.\n\nA potential pitfall of these techniques occurs when a user has some behavior that\nlies outside their normal preferences.  The recommendation system may then be led to suggest products based on \nthis behavior that are not desired by the user.  These outliers can be interpreted as \n\"noise\" in the user-product dataset, and it is desirable for the recommendation algorithm to \nbe somewhat robust against this noise.\n\nMany techniques have been developed for improving the performance of machine-learning\nalgorithms on noisy data.  In particular, topological data analysis (TDA) uses mathematical analysis\nof patterns in data to extract features of data robust to small variations such as noise.  In \nparticular, we will be interested in the Mapper-Classifier algorithm (MCA) of [arXiv:1910.08103](https://arxiv.org/pdf/1910.08103.pdf), \nwhich uses the concept of a Mapper graph from TDA to achieve improved robustness in image classification.  We will apply this algorithm to determine which products a user is likely to be interested in.\n\nIn this repo we implement some models with and without the MCA to evaluate\nthe performance of the recommendation systems in the presence of noise.  Concretely, we will\nfocus on the [Instacart dataset](https://www.instacart.com/datasets/grocery-shopping-2017).  Our task will be\nto predict what products a user reorders given their previous orders.\n\n## MODELS\n\n### Main models\n\n![Models](data/models.png)\n\nWe develop models in a modular fashion by first creating the following components:\n\n- **User latent models:** produces a latent vector depending only on the user data.  In principle\nthis and other latent models can be customized and used in the full models below.  Here we use an\nautoencoder based on collaborative filtering.\n- **Product latent model:** produces a latent vector depending only on the product data.  Our main\nlatent model here involves applying word2vec to the sequence of orders to group products\nthat are typically bought together, along with a tf-idf analysis of the words appearing\nin product names\n- **Feature model:** directly extract features from the order data.  Here we extract features\nsuch as total product orders across all users, average position in cart, and so on.\n\nFrom these models, we assemble our two main models:\n\n- **Model A:** We concatenate the outputs of the three models above and\nfeed the result into a dense neural network.  In our case, the network\nhas two layers and a single output, which predicts for each user and\nproduct pair whether the user will purchase that product in their next order\n\n- **Model B:** Similar to Model A, except after concatenating the\nmodels, we also feed the result into the mapper-classifier algorithm\nto obtain additional topological features.  The result is also fed into\na dense neural network.\n\n### Baseline models:\n\nAs baseline models for comparison, we consider simple models based on the following algorithms:\n\n- Random model (predicts reorders randomly)\n- Logistic regression\n- Random Forest\n- LGBoost \n\n## TESTS\n\nWe test models on basic classification metrics, such as accuracy, precision, recall, and f1 score.  In\naddition, the normalized discounted cumulative gain (NDCG) is a useful measure\nof how high in the predicted rankings the actual products appear.\n\nIn addition to performing these metrics on the original dataset, we test\nrobustness, or performance in the presence of spurious products, as follows. \nWe perform adversarial tests by randomly changing some products in a user's prior\norder history and seeing how model performance suffers. \n\n## RESULTS\n\nHere we show a plot showing the performance of the two main models and \nthe gradient boost (LGboost) baseline model on the robustness tests\n\n![Robustness tests](data/plot.png)\n\nWe see the model with topological encoding (Model B) performs slightly better than the\nnon-topological model (Model A), as well as the baseline gradient boost model (GB model), as we replace\nitems in the robustness test.  These results are suggestive, but further study is needed\nto conclusively determine the effectiveness of this approach.\n\n## DIRECTORY STRUCTURE\n\nSee above for more details on the models.\n\n```\n.\n├── README.md               - this readme file\n├── requirements.txt        - package requirements\n├── lib\n│   ├── data_class.py       - definition of main dataset class\n│   ├── mapper_class.py     - mapper classifier implementation\n│   ├── process_data.py     - helper function to process data\n│   └── tools.py            - general helper functions\n├── models\n│   ├── base_model.py       - base model class which others inherit\n│   ├── baseline_models.py  - baseline models for comparison\n│   ├── feature_models.py   - feature models\n│   ├── latent_models.py    - user and product latent models\n│   └── main_models.py      - main models\n└── tests\n    ├── mnist_tests.ipynb   - some tests of mapper classifier on MNIST dataset\n    ├── run_unit_tests.py    - runs all unit tests\n    └── runtests.py         - runs main accuracy and robustness tests\n```\n\n## SETUP\n\n\n- To run tests in this repo:\n\n```console\ngit clone https://github.com/bmwillett/topological-recommendations\npip install -r requirements.txt\npython tests/runtests.py\n```\n\n> (PACKAGE COMING SOON!) \n>\n> To install top-choice package:\n>\n> - In the command line, run:\n> ```console\n> pip install top-choice\n> ```\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bmwillett/topological-recommendations",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "top-choice",
    "package_url": "https://pypi.org/project/top-choice/",
    "platform": "",
    "project_url": "https://pypi.org/project/top-choice/",
    "project_urls": {
      "Homepage": "https://github.com/bmwillett/topological-recommendations"
    },
    "release_url": "https://pypi.org/project/top-choice/0.0.3/",
    "requires_dist": [
      "numpy (==1.17.2)",
      "pandas (==0.25.1)",
      "matplotlib (==3.1.1)",
      "scipy (==1.4.1)",
      "Keras (==2.3.1)",
      "tensorflow (==2.2.0)",
      "scikit-learn (>=0.21.3)",
      "predictor (==0.1.2)",
      "adversary (==1.1.1)",
      "pymapper (==0.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A package using topological data analysis to achieve robust product recommendations.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7653998,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "346735469131bf79c9d56f157535b1387464a3fbe2133af6654fa355bd505cac",
          "md5": "9abecf25ccba1e227aef0d6f77725269",
          "sha256": "d9502b24a265cad964ceadaa1be64ab2e2f55c74bb0e28a3613d7b5bb245c1b7"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9abecf25ccba1e227aef0d6f77725269",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28384,
        "upload_time": "2020-07-08T06:10:33",
        "upload_time_iso_8601": "2020-07-08T06:10:33.445058Z",
        "url": "https://files.pythonhosted.org/packages/34/67/35469131bf79c9d56f157535b1387464a3fbe2133af6654fa355bd505cac/top_choice-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4305bfb2903db936812bceef473d2f339e744d21ed0cf76edff9cd76dec72182",
          "md5": "190efb567699c5d59f2e9afb3688235e",
          "sha256": "4a9d4dadeed883d9f721fc79120be6f8bdcf8b4b20ccc4de91fb99f517e0ffa8"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "190efb567699c5d59f2e9afb3688235e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25876,
        "upload_time": "2020-07-08T06:10:41",
        "upload_time_iso_8601": "2020-07-08T06:10:41.993147Z",
        "url": "https://files.pythonhosted.org/packages/43/05/bfb2903db936812bceef473d2f339e744d21ed0cf76edff9cd76dec72182/top_choice-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9625c2ac07a20787da63cba94f0f2d7a2ab776871775dfd0a00b5d43f280fca0",
          "md5": "f13af9000f717568b64c16ab38ad0c07",
          "sha256": "0cde99007bf4f24365f384a00cc9af20ce1852a2d3c066014a579e2cefbe7eae"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f13af9000f717568b64c16ab38ad0c07",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28384,
        "upload_time": "2020-07-08T06:27:28",
        "upload_time_iso_8601": "2020-07-08T06:27:28.088920Z",
        "url": "https://files.pythonhosted.org/packages/96/25/c2ac07a20787da63cba94f0f2d7a2ab776871775dfd0a00b5d43f280fca0/top_choice-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2f8139825976eb88d6c43e569e788dce49322bfca1580b672691d9988a20863",
          "md5": "6fdde8401be9b54c2c0cd6e0a42797dd",
          "sha256": "0552a61cecab476a911478e90e1120fca64e4e3974b3aa854d75aefed0c5198a"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6fdde8401be9b54c2c0cd6e0a42797dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25147,
        "upload_time": "2020-07-08T06:27:29",
        "upload_time_iso_8601": "2020-07-08T06:27:29.393356Z",
        "url": "https://files.pythonhosted.org/packages/e2/f8/139825976eb88d6c43e569e788dce49322bfca1580b672691d9988a20863/top_choice-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3921bc220093a2a1dace1140c16764caae98777472aab77d113638f12a3eae3",
          "md5": "7407a2e033ae806c582450af597aa263",
          "sha256": "61cf3f57f0527769ce6f4a96d919f33868fc97f9e37e070fcb1756fd00e2914f"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7407a2e033ae806c582450af597aa263",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28504,
        "upload_time": "2020-07-08T06:39:20",
        "upload_time_iso_8601": "2020-07-08T06:39:20.239664Z",
        "url": "https://files.pythonhosted.org/packages/a3/92/1bc220093a2a1dace1140c16764caae98777472aab77d113638f12a3eae3/top_choice-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e43d34daab95a96058393d64f527ef05e12f49241cd3e5e4ea6d9b32a7f10ad",
          "md5": "727d2328899dac55c3a59cf07ff1332f",
          "sha256": "2f3667ee060a32748201866c0ded56b42caca352a029436a6c1c1cc92c2a758e"
        },
        "downloads": -1,
        "filename": "top_choice-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "727d2328899dac55c3a59cf07ff1332f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25359,
        "upload_time": "2020-07-08T06:39:21",
        "upload_time_iso_8601": "2020-07-08T06:39:21.366784Z",
        "url": "https://files.pythonhosted.org/packages/4e/43/d34daab95a96058393d64f527ef05e12f49241cd3e5e4ea6d9b32a7f10ad/top_choice-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3921bc220093a2a1dace1140c16764caae98777472aab77d113638f12a3eae3",
        "md5": "7407a2e033ae806c582450af597aa263",
        "sha256": "61cf3f57f0527769ce6f4a96d919f33868fc97f9e37e070fcb1756fd00e2914f"
      },
      "downloads": -1,
      "filename": "top_choice-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7407a2e033ae806c582450af597aa263",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28504,
      "upload_time": "2020-07-08T06:39:20",
      "upload_time_iso_8601": "2020-07-08T06:39:20.239664Z",
      "url": "https://files.pythonhosted.org/packages/a3/92/1bc220093a2a1dace1140c16764caae98777472aab77d113638f12a3eae3/top_choice-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e43d34daab95a96058393d64f527ef05e12f49241cd3e5e4ea6d9b32a7f10ad",
        "md5": "727d2328899dac55c3a59cf07ff1332f",
        "sha256": "2f3667ee060a32748201866c0ded56b42caca352a029436a6c1c1cc92c2a758e"
      },
      "downloads": -1,
      "filename": "top_choice-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "727d2328899dac55c3a59cf07ff1332f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25359,
      "upload_time": "2020-07-08T06:39:21",
      "upload_time_iso_8601": "2020-07-08T06:39:21.366784Z",
      "url": "https://files.pythonhosted.org/packages/4e/43/d34daab95a96058393d64f527ef05e12f49241cd3e5e4ea6d9b32a7f10ad/top_choice-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}