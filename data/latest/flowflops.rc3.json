{
  "info": {
    "author": "OneFlow",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# OneFlow-OpCounter | [**简体中文**](README_CN.md)\n\n[![PyPI version](https://img.shields.io/pypi/v/flowflops.svg)](https://pypi.org/project/flowflops/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/flowflops.svg)](https://pypi.org/project/flowflops/)\n[![PyPI license](https://img.shields.io/pypi/l/flowflops.svg)](https://pypi.org/project/flowflops/)\n\nmodified from `https://github.com/sovrasov/flops-counter.pytorch`\n\n## install\n\n```shell\npip install flowflops\n```\n\n## usage\n\n```python\nimport oneflow as flow\nfrom flowflops import get_model_complexity_info\nfrom flowflops.utils import flops_to_string, params_to_string\n\n\nmodel = ...              # your own model, nn.Module\ndsize = (1, 3, 224, 224) # B, C, H, W\n\ntotal_flops, total_params = get_model_complexity_info(\n    model, dsize,\n    as_strings=False,\n    print_per_layer_stat=False,\n    mode=\"eager\"         # eager or graph\n)\nprint(flops_to_string(total_flops), params_to_string(total_params))\n```\n\n## why graph?\n\n```python\nclass BasicBlock(nn.Module):\n    expansion: int = 1\n\n    def __init__(\n        self,\n        inplanes: int,\n        planes: int,\n        stride: int = 1,\n        downsample: Optional[nn.Module] = None,\n        groups: int = 1,\n        base_width: int = 64,\n        dilation: int = 1,\n        norm_layer: Optional[Callable[..., nn.Module]] = None,\n    ) -> None:\n        super(BasicBlock, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        if groups != 1 or base_width != 64:\n            raise ValueError(\"BasicBlock only supports groups=1 and base_width=64\")\n        if dilation > 1:\n            raise NotImplementedError(\"Dilation > 1 not supported in BasicBlock\")\n        # Both self.conv1 and self.downsample layers downsample the input when stride != 1\n        self.conv1 = conv3x3(inplanes, planes, stride)\n        self.bn1 = norm_layer(planes)\n        self.relu = nn.ReLU()\n        self.conv2 = conv3x3(planes, planes)\n        self.bn2 = norm_layer(planes)\n        self.downsample = downsample\n        self.stride = stride\n\n    def forward(self, x: Tensor) -> Tensor:\n        identity = x\n\n        out = self.conv1(x)\n        out = self.bn1(out)\n        out = self.relu(out)\n\n        out = self.conv2(out)\n        out = self.bn2(out)\n\n        if self.downsample is not None:\n            identity = self.downsample(x)\n\n        out += identity\n        # !!!NOTE!!!: this will make add-op flops that cannot be hooked in eager mode\n        out = self.relu(out)\n\n        return out\n```\n\n## sample\n\n`python benchmark/evaluate_famous_models.py`\n\n```\n====== eager ======\n+--------------------+----------+-------------+\n|       Model        |  Params  |    FLOPs    |\n+--------------------+----------+-------------+\n|      alexnet       |  61.1 M  | 718.16 MMac |\n|       vgg11        | 132.86 M |  7.63 GMac  |\n|      vgg11_bn      | 132.87 M |  7.64 GMac  |\n|   squeezenet1_0    |  1.25 M  | 830.05 MMac |\n|   squeezenet1_1    |  1.24 M  | 355.86 MMac |\n|      resnet18      | 11.69 M  |  1.82 GMac  |\n|      resnet50      | 25.56 M  |  4.12 GMac  |\n|  resnext50_32x4d   | 25.03 M  |  4.27 GMac  |\n| shufflenet_v2_x0_5 |  1.37 M  |  43.65 MMac |\n|   regnet_x_16gf    | 54.28 M  |  16.01 GMac |\n|  efficientnet_b0   |  5.29 M  | 401.67 MMac |\n|    densenet121     |  7.98 M  |  2.88 GMac  |\n+--------------------+----------+-------------+\n====== graph ======\n+--------------------+----------+-------------+\n|       Model        |  Params  |    FLOPs    |\n+--------------------+----------+-------------+\n|      alexnet       |  61.1 M  | 718.16 MMac |\n|       vgg11        | 132.86 M |  7.63 GMac  |\n|      vgg11_bn      | 132.87 M |  7.64 GMac  |\n|   squeezenet1_0    |  1.25 M  | 830.05 MMac |\n|   squeezenet1_1    |  1.24 M  | 355.86 MMac |\n|      resnet18      | 11.69 M  |  1.82 GMac  |\n|      resnet50      | 25.56 M  |  4.13 GMac  |\n|  resnext50_32x4d   | 25.03 M  |  4.28 GMac  |\n| shufflenet_v2_x0_5 |  1.37 M  |  43.7 MMac  |\n|   regnet_x_16gf    | 54.28 M  |  16.02 GMac |\n|  efficientnet_b0   |  5.29 M  | 410.35 MMac |\n|    densenet121     |  7.98 M  |  2.88 GMac  |\n+--------------------+----------+-------------+\n```\n\n## support\n\n### Eager\n\n> the outputs will be the same as the `ptflops`\n\nsupported layers:\n\n```python\n# convolutions\nnn.Conv1d\nnn.Conv2d\nnn.Conv3d\n# activations\nnn.ReLU\nnn.PReLU\nnn.ELU\nnn.LeakyReLU\nnn.ReLU6\n# poolings\nnn.MaxPool1d\nnn.AvgPool1d\nnn.AvgPool2d\nnn.MaxPool2d\nnn.MaxPool3d\nnn.AvgPool3d\n# nn.AdaptiveMaxPool1d\nnn.AdaptiveAvgPool1d\n# nn.AdaptiveMaxPool2d\nnn.AdaptiveAvgPool2d\n# nn.AdaptiveMaxPool3d\nnn.AdaptiveAvgPool3d\n# BNs\nnn.BatchNorm1d\nnn.BatchNorm2d\nnn.BatchNorm3d\n# INs\nnn.InstanceNorm1d\nnn.InstanceNorm2d\nnn.InstanceNorm3d\n# FC\nnn.Linear\n# Upscale\nnn.Upsample\n# Deconvolution\nnn.ConvTranspose1d\nnn.ConvTranspose2d\nnn.ConvTranspose3d\n# RNN\nnn.RNN\nnn.GRU\nnn.LSTM\nnn.RNNCell\nnn.LSTMCell\nnn.GRUCell\n```\n\n### Graph\n\nsupported ops:\n\n```python\n# conv\n\"conv1d\"\n\"conv2d\"\n\"conv3d\"\n# pool\n\"max_pool_1d\"\n\"max_pool_2d\"\n\"max_pool_3d\"\n\"avg_pool_1d\"\n\"avg_pool_2d\"\n\"avg_pool_3d\"\n\"adaptive_max_pool1d\"\n\"adaptive_max_pool2d\"\n\"adaptive_max_pool3d\"\n\"adaptive_avg_pool1d\"\n\"adaptive_avg_pool2d\"\n\"adaptive_avg_pool3d\"\n# activate\n\"relu\"\n\"leaky_relu\"\n\"prelu\"\n\"hardtanh\"\n\"elu\"\n\"silu\"\n\"sigmoid\"\n\"sigmoid_v2\"\n# add\n\"bias_add\"\n\"add_n\"\n# matmul\n\"matmul\"\n\"broadcast_matmul\"\n# norm\n\"normalization\"\n# scalar\n\"scalar_mul\"\n\"scalar_add\"\n\"scalar_sub\"\n\"scalar_div\"\n# stats\n\"var\"\n# math\n\"sqrt\"\n\"reduce_sum\"\n# broadcast\n\"broadcast_mul\"\n\"broadcast_add\"\n\"broadcast_sub\"\n\"broadcast_div\"\n# empty\n\"reshape\"\n\"ones_like\"\n\"zero_like\"\n\"flatten\"\n\"concat\"\n\"transpose\"\n\"slice\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flowflops",
    "package_url": "https://pypi.org/project/flowflops/",
    "platform": null,
    "project_url": "https://pypi.org/project/flowflops/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/flowflops/0.0.1.post2211300851/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A tool to count the FLOPs of OneFlow model.",
    "version": "0.0.1.post2211300851",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15939423,
  "releases": {
    "0.0.1.post2211140919": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f800121619d66f0c5f46bb72fe682983777acf5d6609092d2e0f3e2e2cf4de3d",
          "md5": "90c588423725cfcb19ec1c8970bfbf63",
          "sha256": "2d55ea58ccec8384523080b9595bb0799aa9db0ed0fbb4a9c6b8b6c5825e7dc6"
        },
        "downloads": -1,
        "filename": "flowflops-0.0.1.post2211140919-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90c588423725cfcb19ec1c8970bfbf63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13382,
        "upload_time": "2022-11-14T10:47:11",
        "upload_time_iso_8601": "2022-11-14T10:47:11.933378Z",
        "url": "https://files.pythonhosted.org/packages/f8/00/121619d66f0c5f46bb72fe682983777acf5d6609092d2e0f3e2e2cf4de3d/flowflops-0.0.1.post2211140919-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post2211151211": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceb4d9b698dbbc9ac092dba288b6b808bc282da1bf88c4a33695b6176833aa34",
          "md5": "9a7e7e0b263bd0efe584490fc3e567ca",
          "sha256": "4bd90f8fb1facf8ea3c7404e211603196bcf3f9a96278b2728d076c358433150"
        },
        "downloads": -1,
        "filename": "flowflops-0.0.1.post2211151211-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9a7e7e0b263bd0efe584490fc3e567ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13627,
        "upload_time": "2022-11-15T12:12:27",
        "upload_time_iso_8601": "2022-11-15T12:12:27.605432Z",
        "url": "https://files.pythonhosted.org/packages/ce/b4/d9b698dbbc9ac092dba288b6b808bc282da1bf88c4a33695b6176833aa34/flowflops-0.0.1.post2211151211-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post2211300851": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3aa5f4ba87b8663722d2e718199c354a83751af4e562f12508a1ec2a5778667",
          "md5": "5d01489892f65d4dfbd95c2bff956d00",
          "sha256": "4eb46774405453e6c076cb5e364c472508a6c421d7a6c475b685b601167edf96"
        },
        "downloads": -1,
        "filename": "flowflops-0.0.1.post2211300851-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d01489892f65d4dfbd95c2bff956d00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13615,
        "upload_time": "2022-11-30T08:52:00",
        "upload_time_iso_8601": "2022-11-30T08:52:00.177110Z",
        "url": "https://files.pythonhosted.org/packages/a3/aa/5f4ba87b8663722d2e718199c354a83751af4e562f12508a1ec2a5778667/flowflops-0.0.1.post2211300851-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3aa5f4ba87b8663722d2e718199c354a83751af4e562f12508a1ec2a5778667",
        "md5": "5d01489892f65d4dfbd95c2bff956d00",
        "sha256": "4eb46774405453e6c076cb5e364c472508a6c421d7a6c475b685b601167edf96"
      },
      "downloads": -1,
      "filename": "flowflops-0.0.1.post2211300851-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d01489892f65d4dfbd95c2bff956d00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13615,
      "upload_time": "2022-11-30T08:52:00",
      "upload_time_iso_8601": "2022-11-30T08:52:00.177110Z",
      "url": "https://files.pythonhosted.org/packages/a3/aa/5f4ba87b8663722d2e718199c354a83751af4e562f12508a1ec2a5778667/flowflops-0.0.1.post2211300851-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}