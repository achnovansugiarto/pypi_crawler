{
  "info": {
    "author": "Gavin Pai",
    "author_email": "gavinpai@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3.9",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# ZKBattleship\nThis project was built to demonstrate a protocol to play Battleship without a trusted party. In this project, multiple modules have been created to fulfill this task, and **all** code is my own. I will go over each module in the following sections. \n\n## Adaptable modules (useful for other cases)\n\n### random_prime.py\nThe random prime module was the first one I had designed. It's function is to return a random prime that fits certain sets of constraint depending on which function is called, such as the length of the prime in bits or if a prime of the form 4 * x + 1 is also a prime. It does so by finding a random odd number with the bit length specified and adding two until it is prime under a set of primality tests. These include the Fermat and Miller-Rabin primality tests.\n\n### pedersen.py\nNext, I designed the pedersen module because it had use with Bulletproofs, my initial design idea. This class was meant to generate, hold, create generators for, add, and verify Pedersen commitments (https://link.springer.com/chapter/10.1007/3-540-46766-1_9). Rather than holding the Pedersen generator as an instance of the Pedersen class, Pedersen generators are instead held as dataclasses inside the Pedersen class for ease of transporting values and referencing internal variables. The commitment outputs are held the same way. Rather than using an instance of the Pedersen class, most operations are done statically and through arguments.\n\n### bitproof.py\nThis module implements a modified Schnorr protocol (https://link.springer.com/article/10.1007/BF00196725) to prove knowledge of the message in a commitment was a bit. This protocol was modified such that one could cheat to prove that the value of the commitment was both a zero and a one if the value was either, giving the verifier zero knowledge of the message except that it is a bit. A Fiat-Shamir heuristic (https://link.springer.com/chapter/10.1007%2F3-540-47721-7_12) was also implemented to make the proof non interactive and easier to implement. This proof is also held in a data class for ease of transporting values and referencing the many variables in the proof.\n\n## Case specific modules (useful for Battleship only)\n\n### board.py\nIn the board module, each board that would be used in the actual Battleship was designed. First a board class that all others would be inherited from was programmed with the methods to return a spot on the board given a Battleship coordinate. Then boards for specific purposes like holding public commitments or responses from the other player were made. Finally, a ship board was made that inherited from the commitment board such that it could hold the commitments and spaces parallel to each other. The commitment board contains the functionality to create commitments and proofs for those commitments while the other two boards contain the functionality to return the board as a string and toggle a space.\n\n### __main__.py\nFinally, the main program was written. I designed a player class such that, theoretically, the two players can play online and there is a degree of encapsulation. It was asynchronous so that one player could wait until another player to input their board or do their turn without making IO operations broken. First both players input their board, and the game starts. Each player has the other player instance has a variable so that they can call a function to get the value of, say, a specific square. Players take turns asking squares until all ships are found.\n\n## stats.py\nThis module can be safely ignored. It is only for my personal use of analyzing the distributions of bitproofs or commitments and making graphs for my posterboard. This is the **only** module that uses libraries outside of the standard library. MatPlotLib and SciPy are not needed if this module is not used.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SteelShredder/ZKBattleship",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ZKBattleship",
    "package_url": "https://pypi.org/project/ZKBattleship/",
    "platform": "",
    "project_url": "https://pypi.org/project/ZKBattleship/",
    "project_urls": {
      "Bug Tracker": "https://github.com/SteelShredder/ZKBattleship/issues",
      "Homepage": "https://github.com/SteelShredder/ZKBattleship"
    },
    "release_url": "https://pypi.org/project/ZKBattleship/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Battleship with cryptographic protections and a zero-knowledge framework.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9671095,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d50bb16dedde728e8d991577b81c74453dea5fd80e3e417a7930343b55bf06a",
          "md5": "4e2ed6351ca95b4d295424f0897afc69",
          "sha256": "1d96013f95685f872c1fec1ef3025d587b45600cd3ee362d8deb68c979d40b8d"
        },
        "downloads": -1,
        "filename": "ZKBattleship-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e2ed6351ca95b4d295424f0897afc69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23337,
        "upload_time": "2021-03-05T01:19:21",
        "upload_time_iso_8601": "2021-03-05T01:19:21.674942Z",
        "url": "https://files.pythonhosted.org/packages/5d/50/bb16dedde728e8d991577b81c74453dea5fd80e3e417a7930343b55bf06a/ZKBattleship-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e49078b94b0be8e5b75a2262eb4c277d3a5a4f5ef94487831faee9a729cb6c33",
          "md5": "bbef96debfa7e1c6bb8de59cec58d5d3",
          "sha256": "da2278726ba8a3c318a8866dd0878a8d357e1a9feaa32af898bbda8634e65bb5"
        },
        "downloads": -1,
        "filename": "ZKBattleship-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbef96debfa7e1c6bb8de59cec58d5d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10992,
        "upload_time": "2021-03-05T01:19:22",
        "upload_time_iso_8601": "2021-03-05T01:19:22.845110Z",
        "url": "https://files.pythonhosted.org/packages/e4/90/78b94b0be8e5b75a2262eb4c277d3a5a4f5ef94487831faee9a729cb6c33/ZKBattleship-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d50bb16dedde728e8d991577b81c74453dea5fd80e3e417a7930343b55bf06a",
        "md5": "4e2ed6351ca95b4d295424f0897afc69",
        "sha256": "1d96013f95685f872c1fec1ef3025d587b45600cd3ee362d8deb68c979d40b8d"
      },
      "downloads": -1,
      "filename": "ZKBattleship-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4e2ed6351ca95b4d295424f0897afc69",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23337,
      "upload_time": "2021-03-05T01:19:21",
      "upload_time_iso_8601": "2021-03-05T01:19:21.674942Z",
      "url": "https://files.pythonhosted.org/packages/5d/50/bb16dedde728e8d991577b81c74453dea5fd80e3e417a7930343b55bf06a/ZKBattleship-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e49078b94b0be8e5b75a2262eb4c277d3a5a4f5ef94487831faee9a729cb6c33",
        "md5": "bbef96debfa7e1c6bb8de59cec58d5d3",
        "sha256": "da2278726ba8a3c318a8866dd0878a8d357e1a9feaa32af898bbda8634e65bb5"
      },
      "downloads": -1,
      "filename": "ZKBattleship-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bbef96debfa7e1c6bb8de59cec58d5d3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10992,
      "upload_time": "2021-03-05T01:19:22",
      "upload_time_iso_8601": "2021-03-05T01:19:22.845110Z",
      "url": "https://files.pythonhosted.org/packages/e4/90/78b94b0be8e5b75a2262eb4c277d3a5a4f5ef94487831faee9a729cb6c33/ZKBattleship-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}