{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n### Find the lower and upper neighbours in a pandas.Series\n\n\n\n```python\n\npip install a-pandas-ex-closest-neighbours\n\n```\n\n\n\n```python\n\n    Usage:\n\n\n\nfrom a_pandas_ex_closest_neighbours import pd_add_closest_neighbours\n\nimport pandas as pd\n\nfrom random import choice  # random dataframe\n\npd_add_closest_neighbours()\n\nsizes = list(range(1, 100))\n\ndf = pd.DataFrame([choice(sizes) for x in range(1000)])\n\ndf.columns = ['num']\n\n\n\n\n\n\n\n    df\n\nOut[3]:\n\n     num\n\n0     17\n\n1     32\n\n2     17\n\n3     90\n\n4     76\n\n..   ...\n\n995   69\n\n996   82\n\n997   65\n\n998   84\n\n999   62\n\n[1000 rows x 1 columns]\n\n\n\n\n\nmin_neighbours2, max_neighbours2 = df.num.s_find_closest_neighbours(value=72, convertdtypes=True,\n\n                                                   accept_exact_match=False)\n\nmin_neighbours2\n\nOut[8]:\n\n    lower_index  lower_value\n\n0            95           71\n\n1           184           71\n\n2           265           71\n\n3           291           71\n\n4           486           71\n\n5           569           71\n\n6           644           71\n\n7           652           71\n\n8           742           71\n\n9           804           71\n\n10          830           71\n\n11          964           71\n\n\n\nmax_neighbours2\n\nOut[9]:\n\n    upper_index  upper_value\n\n0            26           73\n\n1            44           73\n\n2           119           73\n\n3           161           73\n\n4           219           73\n\n5           397           73\n\n6           415           73\n\n7           492           73\n\n8           593           73\n\n9           610           73\n\n10          612           73\n\n11          802           73\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmin_neighbours2, max_neighbours2 = df.num.s_find_closest_neighbours(value=72, convertdtypes=True,\n\n                                                   accept_exact_match=True)\n\n\n\nmax_neighbours1\n\nOut[4]:\n\n    upper_index  upper_value\n\n0           105           72\n\n1           147           72\n\n2           210           72\n\n3           281           72\n\n4           317           72\n\n5           361           72\n\n6           377           72\n\n7           386           72\n\n8           485           72\n\n9           521           72\n\n10          675           72\n\n11          956           72\n\n12          957           72\n\nmin_neighbours1\n\n\n\nOut[5]:\n\n    lower_index  lower_value\n\n0           105           72\n\n1           147           72\n\n2           210           72\n\n3           281           72\n\n4           317           72\n\n5           361           72\n\n6           377           72\n\n7           386           72\n\n8           485           72\n\n9           521           72\n\n10          675           72\n\n11          956           72\n\n12          957           72\n\n\n\n\n\n    Parameters:\n\n        series:pd.Series\n\n            Only pandas.Series\n\n        value:Union[float,int]\n\n            the value you want to have the closest neighbours from\n\n        convertdtypes:bool\n\n            converts string numbers to numbers\n\n            (default=False)\n\n        accept_exact_match:bool\n\n            example:\n\n            True: if you are passing 72, and 72 is in the Series, the minimum and maximum values will be all the same, that means: 72\n\n            False: All cells with 72 are excluded, and you won't see 72 in the results\n\n            (default=False)\n\n    Returns:\n\n        tuple\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/a_pandas_ex_closest_neighbours",
    "keywords": "pandas,series,dataframe,neighbours",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "a-pandas-ex-closest-neighbours",
    "package_url": "https://pypi.org/project/a-pandas-ex-closest-neighbours/",
    "platform": null,
    "project_url": "https://pypi.org/project/a-pandas-ex-closest-neighbours/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/a_pandas_ex_closest_neighbours"
    },
    "release_url": "https://pypi.org/project/a-pandas-ex-closest-neighbours/0.10/",
    "requires_dist": [
      "a-pandas-ex-less-memory-more-speed",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Find the lower and upper neighbours in a pandas.Series",
    "version": "0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15424802,
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b14c06586721d4cb7dc94f1bfd0eeea6f988ec063f04191dc140259d0123a773",
          "md5": "756490b0e7ec3b76029cd8469a535488",
          "sha256": "31b49faec214708370d3d23bddf069bc08a84f34abd3edec872aff1b9104f4fe"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_closest_neighbours-0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "756490b0e7ec3b76029cd8469a535488",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7587,
        "upload_time": "2022-10-16T04:18:50",
        "upload_time_iso_8601": "2022-10-16T04:18:50.489748Z",
        "url": "https://files.pythonhosted.org/packages/b1/4c/06586721d4cb7dc94f1bfd0eeea6f988ec063f04191dc140259d0123a773/a_pandas_ex_closest_neighbours-0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "451956818d1cba9ff52fc7aed568be8dfac213124bc24ba55efb86fd2ccb6186",
          "md5": "9f2f57e3c8cecd0106008ee614978362",
          "sha256": "f11987ead5a093f12f95a0d849f25678100fc3c156dd414864fda589c8604b4b"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_closest_neighbours-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9f2f57e3c8cecd0106008ee614978362",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5570,
        "upload_time": "2022-10-16T04:18:52",
        "upload_time_iso_8601": "2022-10-16T04:18:52.163685Z",
        "url": "https://files.pythonhosted.org/packages/45/19/56818d1cba9ff52fc7aed568be8dfac213124bc24ba55efb86fd2ccb6186/a_pandas_ex_closest_neighbours-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b14c06586721d4cb7dc94f1bfd0eeea6f988ec063f04191dc140259d0123a773",
        "md5": "756490b0e7ec3b76029cd8469a535488",
        "sha256": "31b49faec214708370d3d23bddf069bc08a84f34abd3edec872aff1b9104f4fe"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_closest_neighbours-0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "756490b0e7ec3b76029cd8469a535488",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7587,
      "upload_time": "2022-10-16T04:18:50",
      "upload_time_iso_8601": "2022-10-16T04:18:50.489748Z",
      "url": "https://files.pythonhosted.org/packages/b1/4c/06586721d4cb7dc94f1bfd0eeea6f988ec063f04191dc140259d0123a773/a_pandas_ex_closest_neighbours-0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "451956818d1cba9ff52fc7aed568be8dfac213124bc24ba55efb86fd2ccb6186",
        "md5": "9f2f57e3c8cecd0106008ee614978362",
        "sha256": "f11987ead5a093f12f95a0d849f25678100fc3c156dd414864fda589c8604b4b"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_closest_neighbours-0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "9f2f57e3c8cecd0106008ee614978362",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5570,
      "upload_time": "2022-10-16T04:18:52",
      "upload_time_iso_8601": "2022-10-16T04:18:52.163685Z",
      "url": "https://files.pythonhosted.org/packages/45/19/56818d1cba9ff52fc7aed568be8dfac213124bc24ba55efb86fd2ccb6186/a_pandas_ex_closest_neighbours-0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}