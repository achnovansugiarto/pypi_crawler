{
  "info": {
    "author": "Teqniqly",
    "author_email": "farooq@teqniqly.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# DockieDb\nA simple in-memory document database.\n\n## Installation\n\nInstall using `pip install tq-dockie-db`.\n\n## Document Database Primer\nLooking at the tests in the `test` folder will give you a good idea on how to use DockieDb. Nevertheless,\nthis section offers some guidance.\n\nIn general, document database objects have the following hierarchy:\n\n`Database ---> Container (1 or more) --->Document (1 or more)`\n\nAt the root, there is a Database. A database consists of one or more Containers. A\nContainer holds one or more Documents. \n\nIf you're coming from a relational background then you can\nthink of the Database as the schema, a Container as the table, and a Document as a row in the table.\n\nWhereas the rows in the table conform to the same schema, Documents in a Container\nare schemaless. In other words you can store Documents of different shapes in the same container.\n\n[This tutorial](https://docs.microsoft.com/en-us/learn/paths/implement-modeling-partitioning-azure-cosmos-db-sql-api/) is a great read for those new to document databases. It does\na better job explaining it than I ever could in this readme.\n\n## Creating Database Objects\n\n### Create a Database\n```python\nfrom dockie.core.database import Database\n\ndb = Database()\n```\n\n### Create a Container\n```python\ncontainer = db.add_container(\"items\")\n```\n\n### Add a Document to the Container\n```python\nfrom dockie.core.document import Document\n\ndocument = Document(\"item1\", {\"name\": \"basketball\", \"price\": 29.99})\ncontainer.add_document(document)\n```\n<mark>A document id must be a string or integer.</mark>\n\n## Retrieving Documents\nThere are two ways to retrieve a document:\n\n- By its id.\n- By querying against one or more non-id attributes.\n\n### Retrieving a Document by ID\n```python\nfrom dockie.query.query import DocumentIdQuery\n\nquery = DocumentIdQuery()\ndocument = query.execute(container, document_id=\"item1\")\n```\n### Retrieving a Document by a Non-ID Attribute\nQuerying by non-ID attributes is accomplished with the [dictquery library](https://pypi.org/project/dictquery/).\n```python\nfrom dockie.query.query import DocumentAttributeQuery\n\nquery = DocumentAttributeQuery()\ndocument = query.execute(container, query='name==\"basketball\"')\n```\n\nRefer to the tests in this repository for more query examples. Refer to the dictquery\nhomepage for details on dictquery syntax.\n\n## Persisting the Database\nAlthough DockieDb is an in-memory database, it can be saved and loaded to/from a file.\n\n### Save the Database to File\n```python\nfrom dockie.core.persistence import persist_to_file\n\npersist_to_file(db, \"db.bak\")\n```\n\n### Load the Database from File\n```python\nfrom dockie.core.persistence import load_from_file\n\ndb = load_from_file(\"db.bak)\n```\n\n## Miscellania\n### Running Tests\nFrom the project root folder, run `pytest` without any arguments.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/farooq-teqniqly/tq-dockie-db",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tq-dockie-db",
    "package_url": "https://pypi.org/project/tq-dockie-db/",
    "platform": "",
    "project_url": "https://pypi.org/project/tq-dockie-db/",
    "project_urls": {
      "GitHub": "https://github.com/farooq-teqniqly/tq-dockie-db",
      "Homepage": "https://github.com/farooq-teqniqly/tq-dockie-db"
    },
    "release_url": "https://pypi.org/project/tq-dockie-db/1.0/",
    "requires_dist": [
      "dictquery"
    ],
    "requires_python": ">=3.9",
    "summary": "DockieDb is a simple in-memory document database.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12891617,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3ef95e21c793f8d35061af46fe5e394752e7eb26f756987946d5c89ebc596e2",
          "md5": "015a7f4b0bcde645dfe24b53d91bb87d",
          "sha256": "c9c7b987a99f9ac48f7928371a3b67b8da9cc71f50101702dac6aa3fcc804bad"
        },
        "downloads": -1,
        "filename": "tq_dockie_db-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "015a7f4b0bcde645dfe24b53d91bb87d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 3571,
        "upload_time": "2022-02-14T23:56:44",
        "upload_time_iso_8601": "2022-02-14T23:56:44.240340Z",
        "url": "https://files.pythonhosted.org/packages/b3/ef/95e21c793f8d35061af46fe5e394752e7eb26f756987946d5c89ebc596e2/tq_dockie_db-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3ef95e21c793f8d35061af46fe5e394752e7eb26f756987946d5c89ebc596e2",
        "md5": "015a7f4b0bcde645dfe24b53d91bb87d",
        "sha256": "c9c7b987a99f9ac48f7928371a3b67b8da9cc71f50101702dac6aa3fcc804bad"
      },
      "downloads": -1,
      "filename": "tq_dockie_db-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "015a7f4b0bcde645dfe24b53d91bb87d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 3571,
      "upload_time": "2022-02-14T23:56:44",
      "upload_time_iso_8601": "2022-02-14T23:56:44.240340Z",
      "url": "https://files.pythonhosted.org/packages/b3/ef/95e21c793f8d35061af46fe5e394752e7eb26f756987946d5c89ebc596e2/tq_dockie_db-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}