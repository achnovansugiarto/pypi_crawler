{
  "info": {
    "author": "",
    "author_email": "Mindee <contact@mindee.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://github.com/mindee/doctr/releases/download/v0.3.1/Logo_doctr.gif\" width=\"40%\">\n</p>\n\n[![Slack Icon](https://img.shields.io/badge/Slack-Community-4A154B?style=flat-square&logo=slack&logoColor=white)](https://slack.mindee.com) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE) ![Build Status](https://github.com/mindee/doctr/workflows/builds/badge.svg) [![codecov](https://codecov.io/gh/mindee/doctr/branch/main/graph/badge.svg?token=577MO567NM)](https://codecov.io/gh/mindee/doctr) [![CodeFactor](https://www.codefactor.io/repository/github/mindee/doctr/badge?s=bae07db86bb079ce9d6542315b8c6e70fa708a7e)](https://www.codefactor.io/repository/github/mindee/doctr) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/340a76749b634586a498e1c0ab998f08)](https://app.codacy.com/gh/mindee/doctr?utm_source=github.com&utm_medium=referral&utm_content=mindee/doctr&utm_campaign=Badge_Grade) [![Doc Status](https://github.com/mindee/doctr/workflows/doc-status/badge.svg)](https://mindee.github.io/doctr) [![Pypi](https://img.shields.io/badge/pypi-v0.6.0-blue.svg)](https://pypi.org/project/python-doctr/) [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/mindee/doctr) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/mindee/notebooks/blob/main/doctr/quicktour.ipynb)\n\n\n**Optical Character Recognition made seamless & accessible to anyone, powered by TensorFlow 2 & PyTorch**\n\n\nWhat you can expect from this repository:\n- efficient ways to parse textual information (localize and identify each word) from your documents\n- guidance on how to integrate this in your current architecture\n\n![OCR_example](https://github.com/mindee/doctr/releases/download/v0.2.0/ocr.png)\n\n## Quick Tour\n\n### Getting your pretrained model\n\nEnd-to-End OCR is achieved in docTR using a two-stage approach: text detection (localizing words), then text recognition (identify all characters in the word).\nAs such, you can select the architecture used for [text detection](https://mindee.github.io/doctr/latest/modules/models.html#doctr-models-detection), and the one for [text recognition](https://mindee.github.io/doctr/latest//modules/models.html#doctr-models-recognition) from the list of available implementations.\n\n```python\nfrom doctr.models import ocr_predictor\n\nmodel = ocr_predictor(det_arch='db_resnet50', reco_arch='crnn_vgg16_bn', pretrained=True)\n```\n\n### Reading files\n\nDocuments can be interpreted from PDF or images:\n\n```python\nfrom doctr.io import DocumentFile\n# PDF\npdf_doc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Image\nsingle_img_doc = DocumentFile.from_images(\"path/to/your/img.jpg\")\n# Webpage\nwebpage_doc = DocumentFile.from_url(\"https://www.yoursite.com\")\n# Multiple page images\nmulti_img_doc = DocumentFile.from_images([\"path/to/page1.jpg\", \"path/to/page2.jpg\"])\n```\n\n### Putting it together\nLet's use the default pretrained model for an example:\n```python\nfrom doctr.io import DocumentFile\nfrom doctr.models import ocr_predictor\n\nmodel = ocr_predictor(pretrained=True)\n# PDF\ndoc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Analyze\nresult = model(doc)\n```\n\n### Dealing with rotated documents\nShould you use docTR on documents that include rotated pages, or pages with multiple box orientations,\nyou have multiple options to handle it:\n\n- If you only use straight document pages with straight words (horizontal, same reading direction),\nconsider passing `assume_straight_boxes=True` to the ocr_predictor. It will directly fit straight boxes\non your page and return straight boxes, which makes it the fastest option.\n\n- If you want the predictor to output straight boxes (no matter the orientation of your pages, the final localizations\nwill be converted to straight boxes), you need to pass `export_as_straight_boxes=True` in the predictor. Otherwise, if `assume_straight_pages=False`, it will return rotated bounding boxes (potentially with an angle of 0Â°).\n\nIf both options are set to False, the predictor will always fit and return rotated boxes.\n\n\nTo interpret your model's predictions, you can visualize them interactively as follows:\n\n```python\nresult.show(doc)\n```\n\n![Visualization sample](https://github.com/mindee/doctr/releases/download/v0.1.1/doctr_example_script.gif)\n\nOr even rebuild the original document from its predictions:\n\n```python\nimport matplotlib.pyplot as plt\n\nsynthetic_pages = result.synthesize()\nplt.imshow(synthetic_pages[0]); plt.axis('off'); plt.show()\n```\n\n![Synthesis sample](https://github.com/mindee/doctr/releases/download/v0.3.1/synthesized_sample.png)\n\n\nThe `ocr_predictor` returns a `Document` object with a nested structure (with `Page`, `Block`, `Line`, `Word`, `Artefact`).\nTo get a better understanding of our document model, check our [documentation](https://mindee.github.io/doctr/modules/io.html#document-structure):\n\nYou can also export them as a nested dict, more appropriate for JSON format:\n\n```python\njson_output = result.export()\n```\n\n### Use the KIE predictor\nThe KIE predictor is a more flexible predictor compared to OCR as your detection model can detect multiple classes in a document. For example, you can have a detection model to detect just dates and adresses in a document.\n\nThe KIE predictor makes it possible to use detector with multiple classes with a recognition model and to have the whole pipeline already setup for you.\n\n```python\nfrom doctr.io import DocumentFile\nfrom doctr.models import kie_predictor\n\n# Model\nmodel = kie_predictor(det_arch='db_resnet50', reco_arch='crnn_vgg16_bn', pretrained=True)\n# PDF\ndoc = DocumentFile.from_pdf(\"path/to/your/doc.pdf\")\n# Analyze\nresult = model(doc)\n\npredictions = result.pages[0].predictions\nfor class_name in predictions.keys():\n    list_predictions = predictions[class_name]\n    for prediction in list_predictions:\n        print(f\"Prediction for {class_name}: {prediction}\")\n```\nThe KIE predictor results per page are in a dictionary format with each key representing a class name and it's value are the predictions for that class.\n\n\n### If you are looking for support from the Mindee team\n[![Bad OCR test detection image asking the developer if they need help](https://github.com/mindee/doctr/releases/download/v0.5.1/doctr-need-help.png)](https://mindee.com/product/doctr)\n\n## Installation\n\n### Prerequisites\n\nPython 3.6 (or higher) and [pip](https://pip.pypa.io/en/stable/) are required to install docTR.\n\nSince we use [weasyprint](https://weasyprint.readthedocs.io/), you will need extra dependencies if you are not running Linux.\n\nFor MacOS users, you can install them as follows:\n```shell\nbrew install cairo pango gdk-pixbuf libffi\n```\n\nFor Windows users, those dependencies are included in GTK. You can find the latest installer over [here](https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases).\n\n### Latest release\n\nYou can then install the latest release of the package using [pypi](https://pypi.org/project/python-doctr/) as follows:\n\n```shell\npip install python-doctr\n```\n> :warning: Please note that the basic installation is not standalone, as it does not provide a deep learning framework, which is required for the package to run.\n\nWe try to keep framework-specific dependencies to a minimum. You can install framework-specific builds as follows:\n\n```shell\n# for TensorFlow\npip install \"python-doctr[tf]\"\n# for PyTorch\npip install \"python-doctr[torch]\"\n```\n\nFor MacBooks with M1 chip, you will need some additional packages or specific versions:\n\n- TensorFlow 2: [metal plugin](https://developer.apple.com/metal/tensorflow-plugin/)\n- PyTorch: [version >= 1.12.0](https://pytorch.org/get-started/locally/#start-locally)\n\n### Developer mode\nAlternatively, you can install it from source, which will require you to install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\nFirst clone the project repository:\n\n```shell\ngit clone https://github.com/mindee/doctr.git\npip install -e doctr/.\n```\n\nAgain, if you prefer to avoid the risk of missing dependencies, you can install the TensorFlow or the PyTorch build:\n```shell\n# for TensorFlow\npip install -e doctr/.[tf]\n# for PyTorch\npip install -e doctr/.[torch]\n```\n\n\n## Models architectures\nCredits where it's due: this repository is implementing, among others, architectures from published research papers.\n\n### Text Detection\n- DBNet: [Real-time Scene Text Detection with Differentiable Binarization](https://arxiv.org/pdf/1911.08947.pdf).\n- LinkNet: [LinkNet: Exploiting Encoder Representations for Efficient Semantic Segmentation](https://arxiv.org/pdf/1707.03718.pdf)\n\n### Text Recognition\n- CRNN: [An End-to-End Trainable Neural Network for Image-based Sequence Recognition and Its Application to Scene Text Recognition](https://arxiv.org/pdf/1507.05717.pdf).\n- SAR: [Show, Attend and Read:A Simple and Strong Baseline for Irregular Text Recognition](https://arxiv.org/pdf/1811.00751.pdf).\n- MASTER: [MASTER: Multi-Aspect Non-local Network for Scene Text Recognition](https://arxiv.org/pdf/1910.02562.pdf).\n- ViTSTR: [Vision Transformer for Fast and Efficient Scene Text Recognition](https://arxiv.org/pdf/2105.08582.pdf).\n\n\n## More goodies\n\n### Documentation\n\nThe full package documentation is available [here](https://mindee.github.io/doctr/) for detailed specifications.\n\n\n### Demo app\n\nA minimal demo app is provided for you to play with our end-to-end OCR models!\n\n![Demo app](https://github.com/mindee/doctr/releases/download/v0.3.0/demo_update.png)\n\n#### Live demo\n\nCourtesy of :hugs: [HuggingFace](https://huggingface.co/) :hugs:, docTR has now a fully deployed version available on [Spaces](https://huggingface.co/spaces)!\nCheck it out [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/mindee/doctr)\n\n#### Running it locally\n\nIf you prefer to use it locally, there is an extra dependency ([Streamlit](https://streamlit.io/)) that is required.\n\n##### Tensorflow version\n```shell\npip install -r demo/tf-requirements.txt\n```\nThen run your app in your default browser with:\n\n```shell\nUSE_TF=1 streamlit run demo/app.py\n```\n\n##### PyTorch version\n```shell\npip install -r demo/pt-requirements.txt\n```\nThen run your app in your default browser with:\n\n```shell\nUSE_TORCH=1 streamlit run demo/app.py\n```\n\n#### TensorFlow.js\n\nInstead of having your demo actually running Python, you would prefer to run everything in your web browser?\nCheck out our [TensorFlow.js demo](https://github.com/mindee/doctr-tfjs-demo) to get started!\n\n![TFJS demo](https://github.com/mindee/doctr-tfjs-demo/releases/download/v0.1-models/demo_illustration_mini.png)\n\n\n### Docker container\n\nIf you wish to deploy containerized environments, you can use the provided Dockerfile to build a docker image:\n\n```shell\ndocker build . -t <YOUR_IMAGE_TAG>\n```\n\n### Example script\n\nAn example script is provided for a simple documentation analysis of a PDF or image file:\n\n```shell\npython scripts/analyze.py path/to/your/doc.pdf\n```\nAll script arguments can be checked using `python scripts/analyze.py --help`\n\n\n### Minimal API integration\n\nLooking to integrate docTR into your API? Here is a template to get you started with a fully working API using the wonderful [FastAPI](https://github.com/tiangolo/fastapi) framework.\n\n#### Deploy your API locally\nSpecific dependencies are required to run the API template, which you can install as follows:\n```shell\ncd api/\npip install poetry\nmake lock\npip install -r requirements.txt\n```\nYou can now run your API locally:\n\n```shell\nuvicorn --reload --workers 1 --host 0.0.0.0 --port=8002 --app-dir api/ app.main:app\n```\n\nAlternatively, you can run the same server on a docker container if you prefer using:\n```shell\nPORT=8002 docker-compose up -d --build\n```\n\n#### What you have deployed\n\nYour API should now be running locally on your port 8002. Access your automatically-built documentation at [http://localhost:8002/redoc](http://localhost:8002/redoc) and enjoy your three functional routes (\"/detection\", \"/recognition\", \"/ocr\", \"/kie\"). Here is an example with Python to send a request to the OCR route:\n\n```python\nimport requests\nwith open('/path/to/your/doc.jpg', 'rb') as f:\n    data = f.read()\nresponse = requests.post(\"http://localhost:8002/ocr\", files={'file': data}).json()\n```\n\n### Example notebooks\nLooking for more illustrations of docTR features? You might want to check the [Jupyter notebooks](https://github.com/mindee/doctr/tree/main/notebooks) designed to give you a broader overview.\n\n\n## Citation\n\nIf you wish to cite this project, feel free to use this [BibTeX](http://www.bibtex.org/) reference:\n\n```bibtex\n@misc{doctr2021,\n    title={docTR: Document Text Recognition},\n    author={Mindee},\n    year={2021},\n    publisher = {GitHub},\n    howpublished = {\\url{https://github.com/mindee/doctr}}\n}\n```\n\n\n## Contributing\n\nIf you scrolled down to this section, you most likely appreciate open source. Do you feel like extending the range of our supported characters? Or perhaps submitting a paper implementation? Or contributing in any other way?\n\nYou're in luck, we compiled a short guide (cf. [`CONTRIBUTING`](CONTRIBUTING.md)) for you to easily do so!\n\n\n## License\n\nDistributed under the Apache 2.0 License. See [`LICENSE`](LICENSE) for more information.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "OCR,deep learning,computer vision,tensorflow,pytorch,text detection,text recognition",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright 2022 Mindee  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
    "maintainer": "FranÃ§ois-Guillaume Fernandez, Charles Gaillard",
    "maintainer_email": "",
    "name": "indic-doctr",
    "package_url": "https://pypi.org/project/indic-doctr/",
    "platform": null,
    "project_url": "https://pypi.org/project/indic-doctr/",
    "project_urls": {
      "changelog": "https://github.com/mindee/doctr/latest/changelog.html",
      "documentation": "https://mindee.github.io/doctr",
      "repository": "https://github.com/mindee/doctr",
      "tracker": "https://github.com/mindee/doctr/issues"
    },
    "release_url": "https://pypi.org/project/indic-doctr/0.7.1a0/",
    "requires_dist": null,
    "requires_python": "<4,>=3.6.0",
    "summary": "Indic Document Text Recognition (indic-docTR): deep Learning for high-performance OCR on documents.",
    "version": "0.7.1a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17353475,
  "releases": {
    "0.7.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eea8931e41b1d4a418c5300095437e6efb8015e20ef92a15daf1d95422ed2e3",
          "md5": "1394f5464d8ccb34a9f8b85e2264fe3c",
          "sha256": "143ae449e0ef1e4de9fe23a2497be5ddba36e44be283788ba23103e34905e57a"
        },
        "downloads": -1,
        "filename": "indic-doctr-0.7.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "1394f5464d8ccb34a9f8b85e2264fe3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4,>=3.6.0",
        "size": 262238,
        "upload_time": "2023-03-19T13:10:30",
        "upload_time_iso_8601": "2023-03-19T13:10:30.842375Z",
        "url": "https://files.pythonhosted.org/packages/4e/ea/8931e41b1d4a418c5300095437e6efb8015e20ef92a15daf1d95422ed2e3/indic-doctr-0.7.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4eea8931e41b1d4a418c5300095437e6efb8015e20ef92a15daf1d95422ed2e3",
        "md5": "1394f5464d8ccb34a9f8b85e2264fe3c",
        "sha256": "143ae449e0ef1e4de9fe23a2497be5ddba36e44be283788ba23103e34905e57a"
      },
      "downloads": -1,
      "filename": "indic-doctr-0.7.1a0.tar.gz",
      "has_sig": false,
      "md5_digest": "1394f5464d8ccb34a9f8b85e2264fe3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "<4,>=3.6.0",
      "size": 262238,
      "upload_time": "2023-03-19T13:10:30",
      "upload_time_iso_8601": "2023-03-19T13:10:30.842375Z",
      "url": "https://files.pythonhosted.org/packages/4e/ea/8931e41b1d4a418c5300095437e6efb8015e20ef92a15daf1d95422ed2e3/indic-doctr-0.7.1a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}