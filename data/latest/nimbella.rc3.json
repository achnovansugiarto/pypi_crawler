{
  "info": {
    "author": "Nimbella Corporation",
    "author_email": "info@nimbella.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# Nimbella SDK for Python\n\nA Python package to interact with [`nimbella.com`](https://nimbella.com) services.\n\n## Installation\n\n```\npip install nimbella\n```\n\n## Usage\n\nThis SDK provides access to the following cloud services on Nimbella.com:\n\n- [Redis](https://redis.io/)\n- [Object Storage](https://en.wikipedia.org/wiki/Object_storage)\n\n### Redis\n\nThe `nimbella.redis()` method returns a pre-configured Redis client for use in your application. See the [Redis client library documentation](https://pypi.org/project/redis/) for the methods provided.\n\n```python\nimport nimbella\n\n# Redis\nredis = nimbella.redis()\nredis.set(\"key\", \"value\")\nvalue = redis.get(\"key\")\n```\n\n### Object Storage (GCP & S3)\n\nThe `nimbella.storage()` method returns a pre-configured object storage client. This client exposes a high-level storage API (details below) - which hides the underlying storage provider implementation. The storage client is automatically configured to use the storage service for the cloud it is running on - which is [GCS](https://cloud.google.com/storage/) on GCP and [S3 on AWS](https://aws.amazon.com/s3/).\n\n```python\nimport nimbella\n\n# Storage\nbucket = nimbella.storage()\nfilename = \"test.txt\"\nfile = bucket.file(filename)\nfile.save('Expected %s contents' % filename, 'text/plain')\n```\n\nThe `nimbella.storage()` constructor takes a single parameter `web` to determine whether the storage bucket is for a website (`nimbella.storage(web=True)`) or files (`nimbella.storage()`). Website buckets can be used for store web content (e.g. HTML & JS files) to host static websites.\n\n#### Object Storage API\n\n```python\n# Storage API\nclass StorageProvider(web=False):    \n    # External bucket URL\n    @property\n    def url() -> Union[str, None]:\n\n    # Configure website for web storage buckets\n    def setWebsite(mainPageSuffix, notFoundPage):\n\n    # Remove all files from the bucket (using optional prefix)    \n    def deleteFiles(force, prefix):\n\n    # Upload new file from path to bucket destination.\n    def upload(path, destination, contentType, cacheControl):\n\n    # Return storage file instance from bucket\n    def file(destination) -> StorageFile:\n\n    # Return all storage files (with optional prefix) instance from bucket\n    def getFiles(prefix) -> list:\n      \n# Storage File Class\nclass StorageFile():\n    # Name of the bucket file\n    @property\n    def name() -> str:\n\n    # key/value pairs for provider-specific object metadata\n    @property\n    def metadata() -> dict:\n\n    # does file exist?\n    def exists() -> bool:\n\n    # delete file from bucket\n    def delete() -> None:\n\n    # update file contents from string or bytes with content-type\n    def save(data: Union[str, bytes], contentType: str) -> None:\n\n    # return file contents as bytes\n    def download() -> bytes:\n\n    # return pre-signed url from file for external access\n    def signed_url(version: str, action: str, expires: int, contentType: str) -> str:\n```\n\n#### Embedded SQL support\n\nYou can access embedded sql with: `sql = nimbella.esql()`\n\nAvailable methods are:\n\n> `sql.exec(sql, *arg)` \n\nExcecute an `sql` statement. The statement is either a string in [SQL](https://sqlite.org/lang.html) or an id returned by `sql.prep` (a prepared statement). \n\nYou can also pass multiple additional `args`, for parametric statementns.\n\nIt returns an array of `[lastId, changedRows]`\n\nValues are significant where relevant (for insert or delete, but not for create for example).\n\nExample:\n\n```\n# single statement\nres = sql.exec(\"create table t(i int)\")\n# parametric statement\nres = sql.exec(\"insert into t(i) values(?),(?),(?)\",1,2,3)\n# returns [3,3]\n```\n\n> `sql.map(sql, *args [,limit=<n>])`\n\nExecute an `sql` statement. The statement is either a string in [SQL](https://sqlite.org/lang.html) or an id returned by `sql.prep` (a prepared statement). \n\nYou can also pass multiple additional `args`, for parametric statementns.\n\nIt returns the result of an SQL query (like a `SELECT`) as an an array of dictionaries. Each dictionary is a record, where the keys are the fields and the values are the field values.\n\nThe optional keyword argument is the maximum number of records returned, it will limit the size of the returned array to the first `<n>`\n\n\nExamples:\n\n```\nsql.map(\"select * from t\")\n# returns [{\"i\":1},{\"i\":2},{\"i\":3}]\nsql.map(\"select * from t where i >?\",1)\n# returns [{\"i\":2},{\"i\":3}]\nsql.map(\"select * from t where i >?\",1,limit=1)\n# returns [{\"i\":2}]\n```\n\n> `sql.arr(sql, *args [,limit=<n>])`\n\nExecute an `sql` statement. The statement is either a string in [SQL](https://sqlite.org/lang.html) or an id returned by `sql.prep` (a prepared statement). \n\nYou can also pass multiple additional `args`, for parametric statements.\n\nIt returns the result of an SQL query (like a `SELECT`) as an an array of arrays. Each array includes the field values of a record.\n\nThe optional keyword argument is the maximum number of records returned, it will limit the size of the returned array to the first `<n>`\n\nExamples:\n\n```\nsql.map(\"select * from t\")\n# returns [[1],[2],[3]]\nsql.map(\"select * from t where i >?\",1)\n# returns [[2],[3]]\nsql.map(\"select * from t where i >?\",1,limit=1)\n# returns [[2]]\n```\n\n> `prep(sql)`\n\n\nYou can prepare statements to save time from precompiling.\n\n```\nins =  sql.prep(\"insert into t(i) values(?)\")\nsel = sql.prep(\"select * from t where i>?\")\n```\n\nThe returned value is a number and can be used to execute the statement with `exec`, `map` and `arr`.\n\n```\n# executing statement\nres = sql.exec(ins,1)\n# executing query\nm = sql.map(sel,1,limit=1)\n```\n\nWhen you do not need any more you can close the statement running prep again with the returned value.\n\n```\n# closing prepared statements\nsql.prep(ins)\nsql.prep(sel)\n```\n\nNote that you can prepare up to 10000 statement at the same time without closing them, otherwise you will get an error `too many prepared statement`. In the unfortunate accident you fill the prepared statement cache, you can clear it with `prep(\"clean_prep_cache\")`\n\n## Support\n\nWe're always happy to help you with any issues you encounter. You may want to [join our Slack community](https://nimbella-community.slack.com/) to engage with us for a more rapid response.\n\n## License\n\nApache-2.0. See [LICENSE](LICENSE) to learn more.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nimbella/nimbella-sdk-python",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nimbella",
    "package_url": "https://pypi.org/project/nimbella/",
    "platform": "",
    "project_url": "https://pypi.org/project/nimbella/",
    "project_urls": {
      "Homepage": "https://github.com/nimbella/nimbella-sdk-python"
    },
    "release_url": "https://pypi.org/project/nimbella/2.1.1/",
    "requires_dist": [
      "google-cloud-storage (==1.35.1)",
      "redis (==3.4.1)",
      "boto3 (==1.17.5)"
    ],
    "requires_python": "",
    "summary": "A python package to interact with Nimbella cloud services.",
    "version": "2.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11110128,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12d6bef3b6f33a01fc737c0c8434d48e1b97df32cdf2ca0070b8bfd9ec4f502c",
          "md5": "c42055838f564ecdec048c958aa48109",
          "sha256": "c3b315fcec97be613d08e03134abdde5eb511fed69abe7c1fc03791c895314bd"
        },
        "downloads": -1,
        "filename": "nimbella-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c42055838f564ecdec048c958aa48109",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 7606,
        "upload_time": "2020-09-08T03:38:36",
        "upload_time_iso_8601": "2020-09-08T03:38:36.997260Z",
        "url": "https://files.pythonhosted.org/packages/12/d6/bef3b6f33a01fc737c0c8434d48e1b97df32cdf2ca0070b8bfd9ec4f502c/nimbella-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9ff5e77eb7d008bc4707b40598bd02cd023300918e362381b2235e41235418b",
          "md5": "16f04bb92e9d980b41b3c3c36da86363",
          "sha256": "f2cc79b7a3e7a126d36988afad79470e053321847a56ad36218dd218a33bda5a"
        },
        "downloads": -1,
        "filename": "nimbella-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16f04bb92e9d980b41b3c3c36da86363",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2736,
        "upload_time": "2020-09-08T03:38:38",
        "upload_time_iso_8601": "2020-09-08T03:38:38.998369Z",
        "url": "https://files.pythonhosted.org/packages/c9/ff/5e77eb7d008bc4707b40598bd02cd023300918e362381b2235e41235418b/nimbella-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df9a4ad3a74e95b9bb7764ba48eafba00da87064590fcbfbe88bd5459ed6c2eb",
          "md5": "4e915c419cc8394ede218290cff16bb1",
          "sha256": "15213259393fc04130675e4b9768436154c7a9e8c3e2901e09aed353fb588632"
        },
        "downloads": -1,
        "filename": "nimbella-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e915c419cc8394ede218290cff16bb1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17043,
        "upload_time": "2021-02-24T16:09:36",
        "upload_time_iso_8601": "2021-02-24T16:09:36.484864Z",
        "url": "https://files.pythonhosted.org/packages/df/9a/4ad3a74e95b9bb7764ba48eafba00da87064590fcbfbe88bd5459ed6c2eb/nimbella-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d543aa56962ae55240b0783f11c3a9064693d133417bb590994ae1c242f2970",
          "md5": "af2993162f4ba08020aeab055ab7c8cf",
          "sha256": "867d69cfa133e7994ba5f2ece6ccd1535a7435d3cd7db14a556e2ed7040b2450"
        },
        "downloads": -1,
        "filename": "nimbella-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af2993162f4ba08020aeab055ab7c8cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8693,
        "upload_time": "2021-02-24T16:09:37",
        "upload_time_iso_8601": "2021-02-24T16:09:37.663403Z",
        "url": "https://files.pythonhosted.org/packages/5d/54/3aa56962ae55240b0783f11c3a9064693d133417bb590994ae1c242f2970/nimbella-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66cbf14d5e4c67b24a34ffb5d2a9fbb959910ab655635693c8803c61bd196da9",
          "md5": "194001a16bfbae33f41e2209e16a938a",
          "sha256": "e80f95e44029e6b6ad0556f1b1542fae23c2873a08a0322fd778e9ce8926c162"
        },
        "downloads": -1,
        "filename": "nimbella-2.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "194001a16bfbae33f41e2209e16a938a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 20684,
        "upload_time": "2021-08-06T12:19:04",
        "upload_time_iso_8601": "2021-08-06T12:19:04.371914Z",
        "url": "https://files.pythonhosted.org/packages/66/cb/f14d5e4c67b24a34ffb5d2a9fbb959910ab655635693c8803c61bd196da9/nimbella-2.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a513e7a53fd21dba1ba2623abefa26bd808c0ef93e1c0ba7c54e084213e9455d",
          "md5": "88d9ff1d7e12bc9646b60c517c3afd11",
          "sha256": "b49738eed3908f60bacfffecbd4b2894b2c58d9dff34d61c2cdfde978e05bba6"
        },
        "downloads": -1,
        "filename": "nimbella-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88d9ff1d7e12bc9646b60c517c3afd11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16212,
        "upload_time": "2021-08-06T12:19:05",
        "upload_time_iso_8601": "2021-08-06T12:19:05.631001Z",
        "url": "https://files.pythonhosted.org/packages/a5/13/e7a53fd21dba1ba2623abefa26bd808c0ef93e1c0ba7c54e084213e9455d/nimbella-2.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66cbf14d5e4c67b24a34ffb5d2a9fbb959910ab655635693c8803c61bd196da9",
        "md5": "194001a16bfbae33f41e2209e16a938a",
        "sha256": "e80f95e44029e6b6ad0556f1b1542fae23c2873a08a0322fd778e9ce8926c162"
      },
      "downloads": -1,
      "filename": "nimbella-2.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "194001a16bfbae33f41e2209e16a938a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 20684,
      "upload_time": "2021-08-06T12:19:04",
      "upload_time_iso_8601": "2021-08-06T12:19:04.371914Z",
      "url": "https://files.pythonhosted.org/packages/66/cb/f14d5e4c67b24a34ffb5d2a9fbb959910ab655635693c8803c61bd196da9/nimbella-2.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a513e7a53fd21dba1ba2623abefa26bd808c0ef93e1c0ba7c54e084213e9455d",
        "md5": "88d9ff1d7e12bc9646b60c517c3afd11",
        "sha256": "b49738eed3908f60bacfffecbd4b2894b2c58d9dff34d61c2cdfde978e05bba6"
      },
      "downloads": -1,
      "filename": "nimbella-2.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "88d9ff1d7e12bc9646b60c517c3afd11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16212,
      "upload_time": "2021-08-06T12:19:05",
      "upload_time_iso_8601": "2021-08-06T12:19:05.631001Z",
      "url": "https://files.pythonhosted.org/packages/a5/13/e7a53fd21dba1ba2623abefa26bd808c0ef93e1c0ba7c54e084213e9455d/nimbella-2.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}