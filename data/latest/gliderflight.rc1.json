{
  "info": {
    "author": "Lucas Merckelbach",
    "author_email": "lucas.merckelbach@hzg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "|PyPI version| |Docs badge| |License|\n\nGliderFlight for Slocum ocean gliders\n=====================================\n\nSynopsis\n--------\n\nGliderflight is a python module to calibrate a model that predicts the\nglider flight through water. The model results can be used to estimate\nthe speed through water, a parameter which is required to compute\nturbulent dissipation rates from temperature microstructure or shear\nprobe data, collected with a turbulence profiler mounted on top of an\nocean glider.\n\nBackground\n------------\n\nThe dissipation rate of turbulent kinetic energy is a parameter that\nplays a key role in many physical and biogeo chemical processes in\noceans and coastal seas. However, direct oceanic measurements of\nturbulence are relatively scarce, as most observations stem from\nfree-falling profilers, operated from seagoing vessels.\n\n\nAn emerging alternative to ship-based profiling is the use of ocean\ngliders with mounted turbulence profilers.  A required parameter in\nthe processing of microstructure shear and temperature measurements is\nthe speed of flow past the sensors. This speed can be measured\ndirectly with additional sensor, such as an electromagnetic current\nmeter or mounted acoustic Doppler current profiler, but often gliders\nare not equipped with additional velocity sensors. Alternatively, a\nglider flight model can be used to estimate the speed through\nwater. Such a model is described in the paper *A dynamic flight model\nfor Slocum gliders and implications for turbulence microstructure\nmeasurements* [merckelbach2019]_. This Python\nmodel implements the steady-state and dynamic glider flight models,\ndescribed therein.\n\nDocumentation\n-------------\n\nDocumentation of this software package can be found at \nhttps://gliderflight.readthedocs.io/en/latest/\n\nSteady-state model\n------------------\n\nThe steady-state model implemented, considers a horizontal and\nvertical force balance. Vertical forces are a balance between\nbuoyancy, gravity and the vertical components of the lift and drag\nforces. The horizontal force balance consists of the horizontal\ncomponents of the lift and drag forces only. These two equations can\nbe solved for the angle of attack and the speed through water,\ndetermining the flight at any instance of time.\n\nInput to the model comes from parameters measured by the glider, such\nas the measured pitch angle (m_pitch), buoyancy change\n(m_ballast_pumped or m_de_oil_vol) and the in-situ\ndensity. Furthermore, the model requires the specification of a number\nof coefficients:\n\n* mg: mass of the glider (kg)\n* Vg: volume of the glider (m³)\n* Cd0: parasite drag coefficient\n* epsilon: compressibility of the hull (1/Pa)\n* ah: lift angle coefficient due to the hull (1/rad)\n* Cd1: induced drag coefficient (1/rad²)\n\nUsing the depth-rate from the pressure sensor as only model\nconstraint, the mass (or glider volume) and the parasite drag\ncoefficient can be determined. To determine the lift angle coefficient\nrequires an additional constraint that contains a horizontal velocity\ncomponent. Details of this procedure are given in [merckelbach2019]_.\n\nDynamic model\n-------------\nIn addition to a steady-state model, this code also implements a\ndynamic model, that is, including the inertial terms. Since this model\nneeds to be integrated, for which the Runge-Kutta method is used, it\nis more computational expensive. The dynamic model produces more\naccurate results when forcing conditions change rapidly, such as when\ncrossing a sharp pycnocline or during the transition from dive to\nclimb. Apart from the mathematical model underlying, the interfaces to\nboth models are the same.\n\nModel calibration and data masking\n----------------------------------\n\nTo calibrate a model, either steady-state or dynamic, we may wish not\nto include all the data in the evaluation of the cost-function. To\nthat end, data can be masked. The Calibrate class provides boolean\noperators to do this:\n\n* OR()\n* AND()\n* NAND()\n\nBy default a mask set to False for all data. To mask data for which a\ncondition evaluates to True, the OR() method should be used. For\nexample, ::\n\n   gm = SteadyStateCalibrate(rho0=1024)\n   gm.set_input_data(datadict)\n   \n   condition = depth<10\n   gm.OR(condition)\n   \n\nwhich would exclude all data points for which the depth is less than\n10 m from the evaluation of the cost-function.\n\nA truth table:\n\n+------+----------+----+-----+----+\n| mask | conditon | OR | AND |NAND|\n+------+----------+----+-----+----+\n|  0   |    0     |  0 |  0  | 1  |\n+------+----------+----+-----+----+\n|  1   |    0     |  1 |  0  | 1  |\n+------+----------+----+-----+----+\n|  1   |    1     |  1 |  1  | 0  |\n+------+----------+----+-----+----+\n|  0   |    1     |  1 |  0  | 1  |\n+------+----------+----+-----+----+\n\n\nExample\n-------\n\nAn example to calibrate a model::\n\n   # create a dictionary with the data\n\n   data = dict(time=t, pressure=P, pitch=pitch, buoyancy_change=deltaV)\n\n   gm = SteadyStateCalibrate()\n   # we have to define mass and volume at the minimum\n   gm.define(mg=70, Vg=70)\n\n   gm.set_input_data(data)\n\n   # mask all data below 10 m\n   gm.OR(pressure*10<10)\n   # mask all data exceeding 60 m\n   gm.OR(pressure*10>60)\n\n   result = gm.calibrate(\"mg\", \"Cd0\")\n   \n   print(\"Calibrated parameters:\")\n   for k,v in result.items():\n       print(\"{}: {}\".format(k,v)\n\n   # Instead of printing the parameters from the results, we could also\n   # get them from the corresponding attributes: print(\"Cd0:\", gm.Cd0).\n\n   print(\"Cd0:\", gm.Cd0)\n\n   # We also don't need to run the model again either. The model output\n   # is also accessible from attributes:\n   #\n   # gm.t # time\n   # gm.U # incident velocity\n   # gm.alpha # angle of attack\n   # gm.ug    # horizontal speed\n   # gm.wg    # vertical speed\n   # gm.w     # vertical water velocity\n   \n   # if we want to run a model with a given set of parameters\n\n   fm = DynamicGLiderModel(dt=1, rho0=1024, k1=0.02, k2=0.92)\n   # copy the settings from the steady state model\n   fm.copy_settings(gm)\n\n   solution = fm.solve(data)\n   \n   # solution is now a named tuple, according to the definition:\n   # Modelresult = namedtuple(\"Modelresult\", \"t u w U alpha pitch ww\")\n\n\nHow to cite\n-----------\nWhen you publish results that were obtained with this software, please use the\nfollowing citation:\n\n|   Merckelbach, L., A. Berger, G. Krahmann, M. Dengler, and J. Carpenter, 2019: A\n|            dynamic flight model for Slocum gliders and implications for turbulence\n|            microstructure measurements. J. Atmos. Oceanic Technol., 36(2),\n|            281-296, doi:10.1175/JTECH-D-18-0168.1.\n\n\nCopyright information\n---------------------\nCopyright (c) 2018, 2019 Helmholtz Zentrum Geesthacht, Germany\n                   Lucas Merckelbach, lucas.merckelbach@hzg.de\n\nSoftware is licensed under the MIT licence.\n\nReferences\n----------\n.. [merckelbach2019] Merckelbach, L., A. Berger, G. Krahmann, M. Dengler, and J. Carpenter, 2019: A\n   dynamic flight model for Slocum gliders and implications for\n   turbulence microstructure measurements. J. Atmos. Oceanic\n   Technol. 36(2), 281-296, doi:10.1175/JTECH-D-18-0168.1\n\n.. |PyPI version| image:: https://badgen.net/pypi/v/gliderflight\n   :target: https://pypi.org/project/gliderflight\n.. |Docs badge| image:: https://readthedocs.org/projects/dbdreader/badge/?version=latest\n   :target: https://gliderflight.readthedocs.io/en/latest/\n.. |License| image:: https://img.shields.io/badge/License-MIT-blue.svg\n   :target: https://github.com/smerckel/gliderflight/blob/master/LICENSE",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smerckel/gliderflight",
    "keywords": "ocean gliders,glider flight,oceanography",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gliderflight",
    "package_url": "https://pypi.org/project/gliderflight/",
    "platform": "",
    "project_url": "https://pypi.org/project/gliderflight/",
    "project_urls": {
      "Homepage": "https://github.com/smerckel/gliderflight"
    },
    "release_url": "https://pypi.org/project/gliderflight/1.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Flight model for Slocum ocean gliders",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6732510,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ce324034340b1c98ac3b558b16b85239b342e8c4df5bbb2d248f43a4a0cdba",
          "md5": "cdf074b0cc93363eae36d8b0471ce33b",
          "sha256": "e581065b1d4eb01f94acad355a15bf41d638a9b2408c4fa0c63370b5e5b404cb"
        },
        "downloads": -1,
        "filename": "gliderflight-1.1.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "cdf074b0cc93363eae36d8b0471ce33b",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 36502,
        "upload_time": "2020-03-02T10:25:11",
        "upload_time_iso_8601": "2020-03-02T10:25:11.559314Z",
        "url": "https://files.pythonhosted.org/packages/a6/ce/324034340b1c98ac3b558b16b85239b342e8c4df5bbb2d248f43a4a0cdba/gliderflight-1.1.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65ed4fb37589c6a3ceca078e35bae22fd8ad27dd7dcebd5ecd01e10da123e376",
          "md5": "3842a59fd0463cf9efba34cf23195044",
          "sha256": "d98743153fda5990a2773f482ce39e4fb9f470f91b046840193306edafa7462a"
        },
        "downloads": -1,
        "filename": "gliderflight-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3842a59fd0463cf9efba34cf23195044",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 359284,
        "upload_time": "2020-03-02T10:24:56",
        "upload_time_iso_8601": "2020-03-02T10:24:56.315095Z",
        "url": "https://files.pythonhosted.org/packages/65/ed/4fb37589c6a3ceca078e35bae22fd8ad27dd7dcebd5ecd01e10da123e376/gliderflight-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a6ce324034340b1c98ac3b558b16b85239b342e8c4df5bbb2d248f43a4a0cdba",
        "md5": "cdf074b0cc93363eae36d8b0471ce33b",
        "sha256": "e581065b1d4eb01f94acad355a15bf41d638a9b2408c4fa0c63370b5e5b404cb"
      },
      "downloads": -1,
      "filename": "gliderflight-1.1.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "cdf074b0cc93363eae36d8b0471ce33b",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 36502,
      "upload_time": "2020-03-02T10:25:11",
      "upload_time_iso_8601": "2020-03-02T10:25:11.559314Z",
      "url": "https://files.pythonhosted.org/packages/a6/ce/324034340b1c98ac3b558b16b85239b342e8c4df5bbb2d248f43a4a0cdba/gliderflight-1.1.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "65ed4fb37589c6a3ceca078e35bae22fd8ad27dd7dcebd5ecd01e10da123e376",
        "md5": "3842a59fd0463cf9efba34cf23195044",
        "sha256": "d98743153fda5990a2773f482ce39e4fb9f470f91b046840193306edafa7462a"
      },
      "downloads": -1,
      "filename": "gliderflight-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3842a59fd0463cf9efba34cf23195044",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 359284,
      "upload_time": "2020-03-02T10:24:56",
      "upload_time_iso_8601": "2020-03-02T10:24:56.315095Z",
      "url": "https://files.pythonhosted.org/packages/65/ed/4fb37589c6a3ceca078e35bae22fd8ad27dd7dcebd5ecd01e10da123e376/gliderflight-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}