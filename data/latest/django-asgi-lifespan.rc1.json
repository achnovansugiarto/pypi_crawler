{
  "info": {
    "author": "VÃ¡clav Dohnal",
    "author_email": "vaclav.dohnal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Django",
      "Framework :: Django :: 4",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# Django ASGI Handler with Lifespan protocol support\n\n[![pypi](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pypi](https://img.shields.io/pypi/v/django-asgi-lifespan.svg)](https://pypi.org/project/django-asgi-lifespan/)\n[![python](https://img.shields.io/pypi/pyversions/django-asgi-lifespan.svg)](https://pypi.org/project/django-asgi-lifespan/)\n[![Build Status](https://github.com/illagrenan/django-asgi-lifespan/actions/workflows/development.yml/badge.svg)](https://github.com/illagrenan/django-asgi-lifespan/actions/workflows/development.yml)\n[![codecov](https://codecov.io/gh/illagrenan/django-asgi-lifespan/branch/main/graphs/badge.svg)](https://codecov.io/github/illagrenan/django-asgi-lifespan)\n\n* Documentation: <https://illagrenan.github.io/django-asgi-lifespan>\n* PyPI: <https://pypi.org/project/django-asgi-lifespan/>\n* License: MIT\n    \n## Features\n\n* This package contains a subclass of the standard Django `ASGIHandler` that can\n  handle [ASGI Lifespan Protocol](https://asgi.readthedocs.io/en/latest/specs/lifespan.html). (Note: there is no change in handling HTTP requests.)\n* [Startup](https://asgi.readthedocs.io/en/latest/specs/lifespan.html#startup-receive-event)\n  and [Shutdown](https://asgi.readthedocs.io/en/latest/specs/lifespan.html#shutdown-receive-event) Lifespan events are\n  converted to [Django signals](https://docs.djangoproject.com/en/4.0/topics/signals/).\n* Signal **receivers can be awaited**. This way it is possible for example to\n  create [aiohttp ClientSession](https://docs.aiohttp.org/en/stable/client_reference.html)\n  /[httpx client](https://www.python-httpx.org/async/) when the application starts and close these resources safely when\n  the application shuts down. This concept is similar to events in\n  FastAPI (<https://fastapi.tiangolo.com/advanced/events/>).\n\n## Quickstart\n\n**:warning: This package is experimental. Lifespan signals work correctly only under uvicorn.**\n\n1. Install the package. Only Python 3.10 and Django 4 are supported. \n\n    ``` console\n    $ pip install --upgrade django-asgi-lifespan\n    ```\n\n2. Modify `asgi.py` to use a ASGI Lifespan compatible handler.\n\n    ``` py title=\"asgi.py\"\n    from django_asgi_lifespan.asgi import get_asgi_application\n    \n    django_application = get_asgi_application()\n    \n    \n    async def application(scope, receive, send):\n        if scope[\"type\"] in {\"http\", \"lifespan\"}:\n            await django_application(scope, receive, send)\n        else:\n            raise NotImplementedError(f\"Unknown scope type {scope['type']}\")\n    ```\n\n3. Subscribe your (async) code to the `asgi_startup` and `asgi_shutdown` Django signals that are sent when the server starts/shuts down. [See usage](https://illagrenan.github.io/django-asgi-lifespan/usage/) for a more advanced code sample.\n\n    ``` py title=\"handlers.py\" \n    import asyncio\n    \n    import httpx\n    \n    HTTPX_CLIENT = None\n    _signal_lock = asyncio.Lock()\n    \n    \n    async def create_httpx_client():\n        global HTTPX_CLIENT\n    \n        async with _signal_lock:\n            if not HTTPX_CLIENT:\n                HTTPX_CLIENT = httpx.AsyncClient()\n    \n    \n    async def close_httpx_client():\n        if isinstance(HTTPX_CLIENT, httpx.AsyncClient):\n            await asyncio.wait_for(asyncio.create_task(HTTPX_CLIENT.aclose()), timeout=5.0)\n \n    ```\n\n    ``` py title=\"apps.py\" \n    from django.apps import AppConfig\n\n    from django_asgi_lifespan.signals import asgi_shutdown, asgi_startup\n    from .handlers_quickstart import close_httpx_client, create_httpx_client\n    \n    \n    class ExampleAppConfig(AppConfig):\n        def ready(self):\n            asgi_startup.connect(create_httpx_client)\n            asgi_shutdown.connect(close_httpx_client)\n    ```\n\n4. Use some resource (in this case the HTTPX client) e.g. in views.\n\n    ``` py title=\"views.py\" \n    from django.http import HttpResponse\n\n    from . import handlers\n    \n    \n    async def my_library_view(*_) -> HttpResponse:\n        external_api_response = await handlers_quickstart.HTTPX_CLIENT.get(\"https://www.example.com/\")\n    \n        return HttpResponse(f\"{external_api_response.text[:42]}\", content_type=\"text/plain\")\n\n    ```\n\n5. Run uvicorn:\n\n   :warning: Lifespan protocol is not supported if you run uvicorn via gunicorn using [`worker_class`](https://docs.gunicorn.org/en/stable/settings.html#worker-class): `gunicorn -k uvicorn.workers.UvicornWorker`. See\n   other [limitations](https://illagrenan.github.io/django-asgi-lifespan/limitations/) in the documentation.\n\n    ``` console \n    uvicorn asgi:application --lifespan=on --port=8080\n    ```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/illagrenan/django-asgi-lifespan",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-asgi-lifespan",
    "package_url": "https://pypi.org/project/django-asgi-lifespan/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-asgi-lifespan/",
    "project_urls": {
      "Homepage": "https://github.com/illagrenan/django-asgi-lifespan"
    },
    "release_url": "https://pypi.org/project/django-asgi-lifespan/0.1.0/",
    "requires_dist": [
      "Django (>=4,<5)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Django ASGI handler with Lifespan Protocol support.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14645181,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47c51fe5c8cf56d5f88fc05d69a8d74cddf5ba76c6e71154d9d176beb3d5a55e",
          "md5": "ff92c181fd616ac4dec01f68a68bd745",
          "sha256": "23b0d7f649367111d383388e4ca207de8f38424c5a1549156abc309233f4690b"
        },
        "downloads": -1,
        "filename": "django_asgi_lifespan-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff92c181fd616ac4dec01f68a68bd745",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 5986,
        "upload_time": "2022-08-03T20:21:04",
        "upload_time_iso_8601": "2022-08-03T20:21:04.329224Z",
        "url": "https://files.pythonhosted.org/packages/47/c5/1fe5c8cf56d5f88fc05d69a8d74cddf5ba76c6e71154d9d176beb3d5a55e/django_asgi_lifespan-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "694a56369e8a27feeb41b94845e940c521bf29d83a14330c3ce2209928c22440",
          "md5": "35fa817ee1211d89c13625d93b6851b2",
          "sha256": "a8b2ce01c34def525d3acb494710ed944986e9e799c597b8382dae8fe54ba1b5"
        },
        "downloads": -1,
        "filename": "django-asgi-lifespan-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "35fa817ee1211d89c13625d93b6851b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 9737,
        "upload_time": "2022-08-03T20:21:05",
        "upload_time_iso_8601": "2022-08-03T20:21:05.742657Z",
        "url": "https://files.pythonhosted.org/packages/69/4a/56369e8a27feeb41b94845e940c521bf29d83a14330c3ce2209928c22440/django-asgi-lifespan-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47c51fe5c8cf56d5f88fc05d69a8d74cddf5ba76c6e71154d9d176beb3d5a55e",
        "md5": "ff92c181fd616ac4dec01f68a68bd745",
        "sha256": "23b0d7f649367111d383388e4ca207de8f38424c5a1549156abc309233f4690b"
      },
      "downloads": -1,
      "filename": "django_asgi_lifespan-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff92c181fd616ac4dec01f68a68bd745",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 5986,
      "upload_time": "2022-08-03T20:21:04",
      "upload_time_iso_8601": "2022-08-03T20:21:04.329224Z",
      "url": "https://files.pythonhosted.org/packages/47/c5/1fe5c8cf56d5f88fc05d69a8d74cddf5ba76c6e71154d9d176beb3d5a55e/django_asgi_lifespan-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "694a56369e8a27feeb41b94845e940c521bf29d83a14330c3ce2209928c22440",
        "md5": "35fa817ee1211d89c13625d93b6851b2",
        "sha256": "a8b2ce01c34def525d3acb494710ed944986e9e799c597b8382dae8fe54ba1b5"
      },
      "downloads": -1,
      "filename": "django-asgi-lifespan-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "35fa817ee1211d89c13625d93b6851b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 9737,
      "upload_time": "2022-08-03T20:21:05",
      "upload_time_iso_8601": "2022-08-03T20:21:05.742657Z",
      "url": "https://files.pythonhosted.org/packages/69/4a/56369e8a27feeb41b94845e940c521bf29d83a14330c3ce2209928c22440/django-asgi-lifespan-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}