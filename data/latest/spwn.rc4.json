{
  "info": {
    "author": "Chino",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Software Development :: Code Generators"
    ],
    "description": "# Spwn\n\nThis repository started as a translation of\n[pwninit](https://github.com/io12/pwninit). It has been created because I\nlove the utilities provided by pwninit, but I'm too lazy to learn Rust and\nI wanted to customize it, so I rewrote it in python (and added\nsome more features).\n\n## Features\n * Auto detect files (binary, libc, loader)\n * Get loader from libc version (if missing)\n * Unstrip the libc with `pwn.libcdb.unstrip_libc`\n * Set binary and loader executable\n * Set runpath and interpreter for the debug binary\n * Generate a basic script from a template\n * Interactively generate functions to interact with the binary\n * Print basic info about the files:\n   * `file`\n   * `checksec`\n   * libc version\n   * potentially vulnerable functions\n   * cryptographic constants\n   * seccomp rules\n * Launch decompiler\n * Run [cwe_checker](https://github.com/fkie-cad/cwe_checker)\n * Launch custom user-provided commands\n * Launch custom user-provided python scripts\n\n## Usage\n```\nspwn [-h] [-i] [-io] [-nd] [--setup] [{inter,i,ionly,io,nd,nodecomp,setup,} ...]\n\noptions:\n  -h, --help            show this help message and exit\n  -i, --inter           Interactively create interaction functions\n  -io, --ionly          Create the interaction functions, without doing any analysis\n  -nd, --nodecomp       Don't open the decompiler\n  --setup               Setup configs and quit\n```\n\nIf the files have weird names (such as the libc name not starting with\n\"libc\"), the autodetection will fail and fall in the manual selection,\nthe best fix for this is to rename the files.\n\nTo understand how the interactions creation works, I suggest to just try\nit out. It should be pretty straight forward, but if you want to pwn\nas fast as possible, you cannot waste any time :)\n\n## Installation\nNon python tools:\n```bash\nsudo apt update\nsudo apt install patchelf elfutils ruby-dev\nsudo gem install seccomp-tools\n```\nTo install [cwe_checker](https://github.com/fkie-cad/cwe_checker)\nfollow the instructions in their repository.\n\nMain package:\n```\npip install spwn\n```\nYou might need to add `~/.local/bin/` to your `$PATH`\n\n## Customization\nThis tool is written because I wanted to customize `pwninit` as much\nas possible. If you want to customize your own `spwn` you can:\n - Clone this repo\n - Modify whatever you want\n - In the repository's root directory: `pip install -U .`\n\nor directly modify the files in:\n`~/.local/lib/python3.{version}/site-packages/spwn`\n\nNote that the default configurations and templates, gets written\nonly if they are not already present (or updated if some fields\nare missing), so, if you want to customize those, you have to\nmodify the files as specified in the configurations section.\n\n## Configurations\nYou can configure some stuffs in the `config.json` file. Configuration\ngets written in `~/.config/spwn/` in the first run of `spwn` or by\ncalling `spwn --setup`. In the same directory you will also find\n`template.py`, the template of the script generated by `spwn`, which\nyou can modify to your liking.\n\n### Template\nThe template path can be directly edited in the config file, however,\nif you want to change the location of the config file, you will have to\nedit the source code. The variable is `CONFIG_PATH` in `spwn.py`.\nIts location should be\n`~/.local/lib/python3.{python-version}/site-packages/spwn/spwn.py`.\nNote that if you reinstall or update `spwn`, this variable will be\noverwritten.\n\n### Suppress warnings\nDon't show warning messages for non installed non-vital dependencies.\n\n### Custom commands\nThe pre and post analysis commands, are in the form `[command, timeout]`.\n`command` is a list of strings and should contain the `\"{binary}\"` or\n`\"{debug_binary}\"` string in order to be formatted with the correct\nexecutable path. You should use `debug_binary` only in the post analysis\nand if your command will run the binary. If you set `timeout` to `false`,\nthe program gets run with `subprocess.Popen`, thus the analysis will go\non while running it and the process will go on after `spwn` will have\nterminated. This might be used, for example, to run the ROP-gadgets\nsearch in the background. If you want to run the program without a\ntimeout (discouraged) you can set it to `null`. A couple of examples are:\n```\n[\"one_gadget {binary}\", 1]\n[\"ropr -njs {debug_binary} > gadgets\", false]\n```\n\n### Custom script\nYou can even run whole python scripts, all you have to do is to specify\ntheir path in the `preanalysis_scripts` or `postanalysis_scripts`. If\nyou just provide the file name, it will be searched in the config\ndirectory. The scripts must contain a `main` function that takes one\nparameter: `files`. This parameter is a `FileManager` object and its\nstructure is as follows:\n```python\nclass FileManager:\n    # Three `Binary` objects\n    self.binary\n    self.libc    # Can be None\n    self.loader  # Can be None\n    # libc and loader have their own type that are a subclasses of `Binary`\n    self.other_binaries  # list of relative paths\n\nclass Binary:\n    self.name  # relative path to the original binary\n    self.debug_name  # relative path to the debug binary, if there is none it is equal to `self.name`\n    self.pwnfile  # `pwn.ELF` object\n```\nFor example:\n```python\ndef main(files):\n    print(f\"The binary is {files.binary.name}\")\n```\n\n### Decompiler\nFor the decompilers commands, the syntax is the same of the pre and\npost analysis commands. I created an apposite config, rather than\nputting it in a pre analysis command, because I use IDA freeware\nand it can decompile only x86-64 binaries, so I have to use another\ndecompiler for other architectures (I have created this feature\nbefore the custom scripts thing, but since the decompiler is\nsomething that you will almost always launch, I left it to make\nit easier to use). If you want to use always the same decompiler,\nleave `idafree_command` empty and if you don't want to launch any\ndecompiler, just leave both configs empty. If you wish to modify\nthe conditions to select the decompiler, you can either modify\nthe `open_decompiler` function in `analyzer.py` or create a\ncustom script.\n\n---\nIf you have any question or feature request, feel free to ask\n[here](https://github.com/MarcoMeinardi/spwn/issues).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MarcoMeinardi/spwn",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spwn",
    "package_url": "https://pypi.org/project/spwn/",
    "platform": null,
    "project_url": "https://pypi.org/project/spwn/",
    "project_urls": {
      "Homepage": "https://github.com/MarcoMeinardi/spwn"
    },
    "release_url": "https://pypi.org/project/spwn/1.2.3/",
    "requires_dist": [
      "pwntools",
      "yara-python"
    ],
    "requires_python": "",
    "summary": "Automatic tool to quickly start a pwn CTF challenge",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17497588,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "431396215c009eee50c63212b32197d7a94acbb89d26c56351a91fa604791d08",
          "md5": "14dbdb03fde8cd2b7ce0f9dc4e006d39",
          "sha256": "e14e71b3aca649cb8bc0f192012a8a0c1bf37bcb21aa4142bcf18f33259d8306"
        },
        "downloads": -1,
        "filename": "spwn-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "14dbdb03fde8cd2b7ce0f9dc4e006d39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14006,
        "upload_time": "2023-01-15T10:48:55",
        "upload_time_iso_8601": "2023-01-15T10:48:55.373648Z",
        "url": "https://files.pythonhosted.org/packages/43/13/96215c009eee50c63212b32197d7a94acbb89d26c56351a91fa604791d08/spwn-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87bdbbdd80dd4dfb3523dadeab099de45bf8a7212ba44387087e875fc1b0e43c",
          "md5": "ca8ea3113f73a9c4b000e6ec875c9ce9",
          "sha256": "b443b8f34d7af913614fc62dee39cc613fde80af1b1f93afa8be8c32f539a050"
        },
        "downloads": -1,
        "filename": "spwn-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca8ea3113f73a9c4b000e6ec875c9ce9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14401,
        "upload_time": "2023-01-15T13:42:55",
        "upload_time_iso_8601": "2023-01-15T13:42:55.156174Z",
        "url": "https://files.pythonhosted.org/packages/87/bd/bbdd80dd4dfb3523dadeab099de45bf8a7212ba44387087e875fc1b0e43c/spwn-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46a48a7f036afba07d1438d5266152135ec8d3fd41d9f97ddf8ce58dd3ef6cae",
          "md5": "e69e6b60c2835a8c23203ff5067a2c8f",
          "sha256": "e6b625eb174e4a74f3fffa820d37568140889ec9d06cd304334abb361373118d"
        },
        "downloads": -1,
        "filename": "spwn-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e69e6b60c2835a8c23203ff5067a2c8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15590,
        "upload_time": "2023-02-22T20:21:21",
        "upload_time_iso_8601": "2023-02-22T20:21:21.528494Z",
        "url": "https://files.pythonhosted.org/packages/46/a4/8a7f036afba07d1438d5266152135ec8d3fd41d9f97ddf8ce58dd3ef6cae/spwn-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7f3816d191d999ff9f10d732701756cec218741f9f148106edb8d966f46e0de",
          "md5": "d44fbf6aea20d9ae6b4581b2ce1df2c0",
          "sha256": "9984a2bfc5e9c5d61eb5e3b31c0f5ffd271a9ffe6c3cc44db4b0e8e33ad4a2d4"
        },
        "downloads": -1,
        "filename": "spwn-1.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d44fbf6aea20d9ae6b4581b2ce1df2c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16407,
        "upload_time": "2023-03-29T18:08:59",
        "upload_time_iso_8601": "2023-03-29T18:08:59.462005Z",
        "url": "https://files.pythonhosted.org/packages/a7/f3/816d191d999ff9f10d732701756cec218741f9f148106edb8d966f46e0de/spwn-1.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f360d04985cd4d27fad1290ea3177cd9b505e73a7fc116f7f3ab43f44447196",
          "md5": "dc29221f584b604b09912d83b32aba20",
          "sha256": "ec97e5048ad33d578df3bd7b62ee2ce6c8f66b36445fdde748861e005157e1ba"
        },
        "downloads": -1,
        "filename": "spwn-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dc29221f584b604b09912d83b32aba20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15620,
        "upload_time": "2023-03-29T18:09:29",
        "upload_time_iso_8601": "2023-03-29T18:09:29.975801Z",
        "url": "https://files.pythonhosted.org/packages/4f/36/0d04985cd4d27fad1290ea3177cd9b505e73a7fc116f7f3ab43f44447196/spwn-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7f3816d191d999ff9f10d732701756cec218741f9f148106edb8d966f46e0de",
        "md5": "d44fbf6aea20d9ae6b4581b2ce1df2c0",
        "sha256": "9984a2bfc5e9c5d61eb5e3b31c0f5ffd271a9ffe6c3cc44db4b0e8e33ad4a2d4"
      },
      "downloads": -1,
      "filename": "spwn-1.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d44fbf6aea20d9ae6b4581b2ce1df2c0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16407,
      "upload_time": "2023-03-29T18:08:59",
      "upload_time_iso_8601": "2023-03-29T18:08:59.462005Z",
      "url": "https://files.pythonhosted.org/packages/a7/f3/816d191d999ff9f10d732701756cec218741f9f148106edb8d966f46e0de/spwn-1.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f360d04985cd4d27fad1290ea3177cd9b505e73a7fc116f7f3ab43f44447196",
        "md5": "dc29221f584b604b09912d83b32aba20",
        "sha256": "ec97e5048ad33d578df3bd7b62ee2ce6c8f66b36445fdde748861e005157e1ba"
      },
      "downloads": -1,
      "filename": "spwn-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "dc29221f584b604b09912d83b32aba20",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15620,
      "upload_time": "2023-03-29T18:09:29",
      "upload_time_iso_8601": "2023-03-29T18:09:29.975801Z",
      "url": "https://files.pythonhosted.org/packages/4f/36/0d04985cd4d27fad1290ea3177cd9b505e73a7fc116f7f3ab43f44447196/spwn-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}