{
  "info": {
    "author": "Ge Yang",
    "author_email": "ge.ike.yang@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Dynamic Graphical Memory Implementation\n=======================================\n\n-  `planning.py <https://github.com/geyang/sparse_graph/blob/master/sg_specs/planning.md>`__ shows how to use this graph\n   with graph_search.\n-  `graph_sparsification.py <https://github.com/geyang/sparse_graph/blob/master/sg_specs/graph_sparsification.md>`__\n   shows how to sparsify a graph\n-  `batch_sparsification.py <https://github.com/geyang/sparse_graph/blob/master/sg_specs/batch_sparsification.md>`__\n   efficiently sparsify a graph with as a batch\n-  `incremental_api.py <https://github.com/geyang/sparse_graph/blob/master/specs/incremental_api.md>`__ shows how to\n   extend with sparsity\n\nUsage\n-----\n\nTo instantiate a graph:\n\n.. code-block:: python\n\n   graph = AsymMesh(n=10_000, k=6, dim=2, img_dim=[2], kernel_fn=l2, embed_fn=id2D, d_max=20)\n\n   graph.extend(xys, images=xys, meta=xys)\n   graph.update_zs()\n   graph.update_edges()\n\nMost of the time it is better to enforce sparsity of the graph by only\nadding new vertices when there is no existing vertex that is close-by.\nThe new dedupe API allows us to do this in a batch fashion:\n\n.. code-block:: python\n\n   spots = graph.dedupe(images=xys, r_min=r_min)\n   xys = xys[spots]\n   ds = graph.to_goal(zs_2=xys)\n   if ds.size == 0:\n       graph.extend(xys, images=xys, meta=xys)\n   else:\n       m = ds.min(axis=-1) >= r_min\n       if m.sum() > 0:\n           graph.extend(xys[m], images=xys[m], meta=xys[m])\n       graph.update_edges()\n\n+---------------------+--------------+--------------------------------+\n| Dense               | Sparse       | Details                        |\n+=====================+==============+================================+\n| |dense_graph|       | |image1|     | 10x more edges in the dense    |\n|                     |              | graph in comparison to the     |\n|                     |              | sparse graph.                  |\n+---------------------+--------------+--------------------------------+\n\nTo Experiment\n-------------\n\nImport this module in the method module.\n\n.. |dense_graph| image:: figures/random_graph.png?raw=true\n.. |image1| image:: figures/batch_graph.png?raw=true\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/geyang/sparse-graphs",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sparse-graphs",
    "package_url": "https://pypi.org/project/sparse-graphs/",
    "platform": "",
    "project_url": "https://pypi.org/project/sparse-graphs/",
    "project_urls": {
      "Homepage": "https://github.com/geyang/sparse-graphs"
    },
    "release_url": "https://pypi.org/project/sparse-graphs/0.0.2/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "Efficient Implementation of Sparse Graphs with Numpy",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10735804,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ca93d36bac9081487066a6bbbcb828b84aeaf66e5d5e0b7cbf2e5ff3c2701a3",
          "md5": "a5af9a8c33f60d0bfe1ceddc418943e0",
          "sha256": "701efa4ce00a40f1c82cead99c13a1b9320db20c90cd4657508b4f0ec747406d"
        },
        "downloads": -1,
        "filename": "sparse_graphs-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5af9a8c33f60d0bfe1ceddc418943e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10141,
        "upload_time": "2020-10-28T20:00:49",
        "upload_time_iso_8601": "2020-10-28T20:00:49.354243Z",
        "url": "https://files.pythonhosted.org/packages/7c/a9/3d36bac9081487066a6bbbcb828b84aeaf66e5d5e0b7cbf2e5ff3c2701a3/sparse_graphs-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b851d35cf1c9b883c1be43559cd41cf36c0bbe13bb8b9443f056a7d335f712",
          "md5": "8f27c61e240567552d3a8a44d5093938",
          "sha256": "393a7e96e7f40491ea1aab651bdcd372bcdaca9ebc48bef594068ff7adaa08ee"
        },
        "downloads": -1,
        "filename": "sparse_graphs-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f27c61e240567552d3a8a44d5093938",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10421,
        "upload_time": "2021-06-24T20:16:05",
        "upload_time_iso_8601": "2021-06-24T20:16:05.803753Z",
        "url": "https://files.pythonhosted.org/packages/f9/b8/51d35cf1c9b883c1be43559cd41cf36c0bbe13bb8b9443f056a7d335f712/sparse_graphs-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9b851d35cf1c9b883c1be43559cd41cf36c0bbe13bb8b9443f056a7d335f712",
        "md5": "8f27c61e240567552d3a8a44d5093938",
        "sha256": "393a7e96e7f40491ea1aab651bdcd372bcdaca9ebc48bef594068ff7adaa08ee"
      },
      "downloads": -1,
      "filename": "sparse_graphs-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8f27c61e240567552d3a8a44d5093938",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10421,
      "upload_time": "2021-06-24T20:16:05",
      "upload_time_iso_8601": "2021-06-24T20:16:05.803753Z",
      "url": "https://files.pythonhosted.org/packages/f9/b8/51d35cf1c9b883c1be43559cd41cf36c0bbe13bb8b9443f056a7d335f712/sparse_graphs-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}