{
  "info": {
    "author": "Matthias Urlichs",
    "author_email": "matthias@urlichs.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: System :: Networking",
      "Topic :: System :: Shells",
      "Topic :: Terminals :: Telnet"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/asynctelnet.svg\n    :alt: Latest Version\n    :target: https://pypi.python.org/pypi/asynctelnet\n\n.. image:: https://img.shields.io/pypi/dm/asynctelnet.svg\n    :alt: Downloads\n    :target: https://pypi.python.org/pypi/asynctelnet\n\n\nIntroduction\n============\n\nasynctelnet is an asynchronous Telnet Client and Server library for python.\nThis project requires python 3.6 and later, using the anyio_ module.\n\n.. _anyio: https://anyio.readthedocs.io/\n\nasynctelnet is a heavily modified anyio-ization of the telnetlib3_ module.\n\n.. _telnetlib3: https://telnetlib3.readthedocs.io/\n\n\nQuick Example\n-------------\n\nAuthoring a Telnet Server using Streams interface that offers a basic war game:\n\n.. code-block:: python\n\n    import anyio, asynctelnet\n\n    async def shell(tcp):\n        async with asynctelnet.TelnetServer(tcp) as stream:\n            # this will fail if no charset has been negotiated\n            await stream.send('\\r\\nWould you like to play a game? ')\n            inp = await reader.receive(1)\n            if inp:\n                await stream.echo(inp)\n                await stream.send('\\r\\nThey say the only way to win '\n                                  'is to not play at all.\\r\\n')\n\n    async def main():\n        listener = await anyio.create_tcp_listener(local_port=56023)\n        await listener.serve(shell)\n    anyio.run(main)\n\nAuthoring a Telnet Client that plays the war game with this server:\n\n.. code-block:: python\n\n    import anyio, asynctelnet\n\n    async def shell(tcp):\n        async with asynctelnet.TelnetClient(tcp, client=True) as stream:\n            while True:\n                # read stream until '?' mark is found\n                outp = await stream.receive(1024)\n                if not outp:\n                    # End of File\n                    break\n                elif '?' in outp:\n                    # reply all questions with 'y'.\n                    await stream.send('y')\n    \n                # display all server output\n                print(outp, flush=True)\n     \n        # EOF\n        print()\n    \n    async def main():\n        async with await connect_tcp('localhost', 56023) as client:\n            await shell(client)\n    anyio.run(main)\n\n\nCommand Line\n------------\n\nTwo command line scripts are distributed with this package.\n\n``asynctelnet-client``\n\n  Small terminal telnet client.  Some example destinations and options::\n\n    asynctelnet-client nethack.alt.org\n    asynctelnet-client --encoding=cp437 --force-binary blackflag.acid.org\n    asynctelnet-client htc.zapto.org\n\n\n``asynctelnet-server``\n\n  Telnet server providing the default debugging shell.  This provides a simple\n  shell server that allows introspection of the session's values, for example::\n\n     tel:sh> help\n     quit, writer, slc, toggle [option|all], reader, proto\n\n     tel:sh> writer\n     <TelnetWriter server mode:kludge +lineflow -xon_any +slc_sim server-will:BINARY,ECHO,SGA client-will:BINARY,NAWS,NEW_ENVIRON,TTYPE>\n\n     tel:sh> reader\n     <TelnetReaderUnicode encoding='utf8' limit=65536 buflen=0 eof=False>\n\n     tel:sh> toggle all\n     wont echo.\n     wont suppress go-ahead.\n     wont outbinary.\n     dont inbinary.\n     xon-any enabled.\n     lineflow disabled.\n\n     tel:sh> reader\n     <TelnetReaderUnicode encoding='US-ASCII' limit=65536 buflen=1 eof=False>\n\n     tel:sh> writer\n     <TelnetWriter server mode:local -lineflow +xon_any +slc_sim client-will:NAWS,NEW_ENVIRON,TTYPE>\n\n\nBoth command-line scripts accept argument ``--shell=my_module.fn_shell``\ndescribing a python module path to a coroutine of signature\n``shell(reader, writer)``, just as the above examples.\n\nFeatures\n--------\n\nThe following RFC specifications are implemented:\n\n* `rfc-727`_, \"Telnet Logout Option,\" Apr 1977.\n* `rfc-779`_, \"Telnet Send-Location Option\", Apr 1981.\n* `rfc-854`_, \"Telnet Protocol Specification\", May 1983.\n* `rfc-855`_, \"Telnet Option Specifications\", May 1983.\n* `rfc-856`_, \"Telnet Binary Transmission\", May 1983.\n* `rfc-857`_, \"Telnet Echo Option\", May 1983.\n* `rfc-858`_, \"Telnet Suppress Go Ahead Option\", May 1983.\n* `rfc-859`_, \"Telnet Status Option\", May 1983.\n* `rfc-860`_, \"Telnet Timing mark Option\", May 1983.\n* `rfc-885`_, \"Telnet End of Record Option\", Dec 1983.\n* `rfc-1073`_, \"Telnet Window Size Option\", Oct 1988.\n* `rfc-1079`_, \"Telnet Terminal Speed Option\", Dec 1988.\n* `rfc-1091`_, \"Telnet Terminal-Type Option\", Feb 1989.\n* `rfc-1096`_, \"Telnet X Display Location Option\", Mar 1989.\n* `rfc-1123`_, \"Requirements for Internet Hosts\", Oct 1989.\n* `rfc-1184`_, \"Telnet Linemode Option (extended options)\", Oct 1990.\n* `rfc-1372`_, \"Telnet Remote Flow Control Option\", Oct 1992.\n* `rfc-1408`_, \"Telnet Environment Option\", Jan 1993.\n* `rfc-1571`_, \"Telnet Environment Option Interoperability Issues\", Jan 1994.\n* `rfc-1572`_, \"Telnet Environment Option\", Jan 1994.\n* `rfc-2066`_, \"Telnet Charset Option\", Jan 1997.\n\n.. _rfc-727: https://www.rfc-editor.org/rfc/rfc727.txt\n.. _rfc-779: https://www.rfc-editor.org/rfc/rfc779.txt\n.. _rfc-854: https://www.rfc-editor.org/rfc/rfc854.txt\n.. _rfc-855: https://www.rfc-editor.org/rfc/rfc855.txt\n.. _rfc-856: https://www.rfc-editor.org/rfc/rfc856.txt\n.. _rfc-857: https://www.rfc-editor.org/rfc/rfc857.txt\n.. _rfc-858: https://www.rfc-editor.org/rfc/rfc858.txt\n.. _rfc-859: https://www.rfc-editor.org/rfc/rfc859.txt\n.. _rfc-860: https://www.rfc-editor.org/rfc/rfc860.txt\n.. _rfc-885: https://www.rfc-editor.org/rfc/rfc885.txt\n.. _rfc-1073: https://www.rfc-editor.org/rfc/rfc1073.txt\n.. _rfc-1079: https://www.rfc-editor.org/rfc/rfc1079.txt\n.. _rfc-1091: https://www.rfc-editor.org/rfc/rfc1091.txt\n.. _rfc-1096: https://www.rfc-editor.org/rfc/rfc1096.txt\n.. _rfc-1123: https://www.rfc-editor.org/rfc/rfc1123.txt\n.. _rfc-1184: https://www.rfc-editor.org/rfc/rfc1184.txt\n.. _rfc-1372: https://www.rfc-editor.org/rfc/rfc1372.txt\n.. _rfc-1408: https://www.rfc-editor.org/rfc/rfc1408.txt\n.. _rfc-1571: https://www.rfc-editor.org/rfc/rfc1571.txt\n.. _rfc-1572: https://www.rfc-editor.org/rfc/rfc1572.txt\n.. _rfc-2066: https://www.rfc-editor.org/rfc/rfc2066.txt\n\nFurther Reading\n---------------\n\nFurther documentation available at https://asynctelnet.readthedocs.org/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://asynctelnet.readthedocs.io/",
    "keywords": "telnet,server,client,bbs,mud,utf8,cp437,api,library,anyio,trio,asyncio,talker",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asynctelnet",
    "package_url": "https://pypi.org/project/asynctelnet/",
    "platform": "any",
    "project_url": "https://pypi.org/project/asynctelnet/",
    "project_urls": {
      "Homepage": "http://asynctelnet.readthedocs.io/"
    },
    "release_url": "https://pypi.org/project/asynctelnet/0.2.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python 3 anyio Telnet server and client Protocol library",
    "version": "0.2.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9818147,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85189196d935431049ab96f3c7b719a10812bc4f6522a98ca27fa610ae85225d",
          "md5": "357ea64c63ed0d984f49b43c91f4231f",
          "sha256": "a1f51f2e5b77a62952c2f68aada662a516e973aa01ba86500abd03e01d86e88b"
        },
        "downloads": -1,
        "filename": "asynctelnet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "357ea64c63ed0d984f49b43c91f4231f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 102237,
        "upload_time": "2020-12-03T13:32:48",
        "upload_time_iso_8601": "2020-12-03T13:32:48.890452Z",
        "url": "https://files.pythonhosted.org/packages/85/18/9196d935431049ab96f3c7b719a10812bc4f6522a98ca27fa610ae85225d/asynctelnet-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d41b250debb6df022b9ec1ea4d037dfb956c61ea60d39021b596cde42922a030",
          "md5": "ff869943f86f77eb6cf2e87bef5aa9f2",
          "sha256": "0b522774a1d048c7f4e3f4f7452f3deb693025d89fa0157bb87b77bd5c391996"
        },
        "downloads": -1,
        "filename": "asynctelnet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff869943f86f77eb6cf2e87bef5aa9f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99849,
        "upload_time": "2020-12-03T18:35:11",
        "upload_time_iso_8601": "2020-12-03T18:35:11.114040Z",
        "url": "https://files.pythonhosted.org/packages/d4/1b/250debb6df022b9ec1ea4d037dfb956c61ea60d39021b596cde42922a030/asynctelnet-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "740affa00e399de30c52f850579ccf004ea94d377bd318c49bdc55093485b654",
          "md5": "da1febf2797716625eac5dc20cd98341",
          "sha256": "85b3f594c1597456c6765b9496bb52a8e548458cc61a03b94c067d9b7e9de666"
        },
        "downloads": -1,
        "filename": "asynctelnet-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "da1febf2797716625eac5dc20cd98341",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100295,
        "upload_time": "2020-12-04T13:19:19",
        "upload_time_iso_8601": "2020-12-04T13:19:19.065715Z",
        "url": "https://files.pythonhosted.org/packages/74/0a/ffa00e399de30c52f850579ccf004ea94d377bd318c49bdc55093485b654/asynctelnet-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a956d0c4ff51151280cd523f6dd7163ab08b362fee4e9381c9560faac7b411d",
          "md5": "59681a54a6d2446fa3449dc110ea1d9c",
          "sha256": "b40dd40927f991073611a6fd3f6733feadc284f2d63998cfe1d91c3ba0c879c2"
        },
        "downloads": -1,
        "filename": "asynctelnet-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "59681a54a6d2446fa3449dc110ea1d9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100445,
        "upload_time": "2020-12-04T18:35:35",
        "upload_time_iso_8601": "2020-12-04T18:35:35.188305Z",
        "url": "https://files.pythonhosted.org/packages/6a/95/6d0c4ff51151280cd523f6dd7163ab08b362fee4e9381c9560faac7b411d/asynctelnet-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "665a9ceac48f1939c5ff43c3f722a6d0a2600ec6f58f6c2caa2b468e7c1fddb2",
          "md5": "ecfd571f9d2b0c5a8c8ba66dc171b7bf",
          "sha256": "b4bb867c2dfca2b1d93a9f684adcc769d2025e46f4080611f119ec2a4089987f"
        },
        "downloads": -1,
        "filename": "asynctelnet-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ecfd571f9d2b0c5a8c8ba66dc171b7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100233,
        "upload_time": "2021-03-19T07:17:30",
        "upload_time_iso_8601": "2021-03-19T07:17:30.883712Z",
        "url": "https://files.pythonhosted.org/packages/66/5a/9ceac48f1939c5ff43c3f722a6d0a2600ec6f58f6c2caa2b468e7c1fddb2/asynctelnet-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "665a9ceac48f1939c5ff43c3f722a6d0a2600ec6f58f6c2caa2b468e7c1fddb2",
        "md5": "ecfd571f9d2b0c5a8c8ba66dc171b7bf",
        "sha256": "b4bb867c2dfca2b1d93a9f684adcc769d2025e46f4080611f119ec2a4089987f"
      },
      "downloads": -1,
      "filename": "asynctelnet-0.2.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ecfd571f9d2b0c5a8c8ba66dc171b7bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 100233,
      "upload_time": "2021-03-19T07:17:30",
      "upload_time_iso_8601": "2021-03-19T07:17:30.883712Z",
      "url": "https://files.pythonhosted.org/packages/66/5a/9ceac48f1939c5ff43c3f722a6d0a2600ec6f58f6c2caa2b468e7c1fddb2/asynctelnet-0.2.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}