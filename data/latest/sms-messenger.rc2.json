{
  "info": {
    "author": "Kenan Turner",
    "author_email": "coolspykee@satx.rr.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SMS Messenger\n\nA simple Python package for sending messages over SMS Gateways.\n\n## Description\n\nSMS Messenger is a simple Python package that enables the user to send and read text messages via [SMS Gateways.](https://en.wikipedia.org/wiki/SMS_gateway) This package handles all the sending and reading of emails to SMS addresses. Requires an email to setup.\n\n## Dependencies\n\n[imapclient](https://github.com/mjs/imapclient)  \n[pyzmail](https://github.com/aspineux/pyzmail)  \nAn Email _Preferably Gmail_\n\n## Features\n\n- Simple to use for sending and reading messages\n- easy installation\n- Lightweight with minimal external dependencies\n- Docstrings\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install sms-messenger.\n\n```bash\npip install sms_messenger\n```\n\n## Usage\n\n```python\nimport sms_messenger\nemail = \"example@gmail.com\"\npaswd = \"FooBar\"\naddresses = ['+12003004000@tmomail.net','+15006007000@txt.att.net'] #must specify gateway domain\n\nserver = sms_messenger.messageManager(email,paswd) #create a messageManager Object\nprint(server.getGateways()) #US SMS Gateways\nserver.sendTextMessage(\"Hello World!\",addresses)\n\nserver.sendTextMessage(\"This is the Body\",'tmpEmail@email.com','This is the subject') #works with emails too\n\nreplies = server.getTextMessages()\nprint(replies)\n\nserver.delMessagesToSMS(addresses) #Deletes from Sent Folder\n```\n\n## Help\n\n__If using gmail, look under the [security tab](https://myaccount.google.com/security) and turn ON Less secure app access.  \n![example.png](/img/example.png)  \nIt must be on for the package to work.__\n\n## Docstring\n\n```\nHelp on messageManager in module sms_messenger object:\n\nclass messageManager(builtins.object)\n |  messageManager(email, paswd, smtp='smtp.gmail.com', port=587)\n |  \n |  A simple class to handle sending and reading text messages via SMS Gateways.\n |  \n |  Dependencies:\n |      imapclient: https://github.com/mjs/imapclient\n |      pyzmail: https://github.com/aspineux/pyzmail\n |  \n |  Attributes:\n |      email: a string containing the email from which the texts will be sent.\n |      paswd: a string containing the password for the email above.\n |      stmp: (optional) a string containing the name of the stmp server.\n |      port: (optional) an int containing the port number to connect to smtp.\n |      SMS_Gateways_US: a dictionary containing the mobile carrier and their respective gateway\n |      GMAIL_FOLDERS: a list containing the respective names of gmail folders\n |      SEARCH_KEYS: a list containing all available search keys\n |  \n |  Methods defined here:\n |  \n |  __init__(self, email, paswd, smtp='smtp.gmail.com', port=587)\n |      Initialize self.\n |      \n |      Note:\n |          If not using gmail, the smtp and port must be specified.\n |  \n |  checkAccess(self)\n |      Attempts to log into the email server\n |      \n |      Returns:\n |          String on success, Nothing otherwise\n |  \n |  delMessagesBySelf(self, folder='[Gmail]/Sent Mail')\n |      Deletes all emails sent.\n |      \n |      Args:\n |          folder: (optional) Folder to be deleted from\n |          \n |      Returns:\n |          String on success, Nothing otherwise\n |  \n |  delMessagesByUIDs(self, UIDs, folder)\n |      Deletes all emails from UID list.\n |      \n |      Args:\n |          UIDs: Python list containing Unique IDs of the emails to be deleted\n |          folder: (optional) Folder to be deleted from\n |          \n |      Returns:\n |          String on success, Nothing otherwise\n |  \n |  delMessagesFromSMS(self, sms_address, folder='INBOX')\n |      Deletes all emails from aspecified sms gateway.\n |      \n |      Args:\n |          sms_address: String containing the sms from which emails will be deleted\n |          folder: (optional) Folder to be deleted from\n |          \n |      Returns:\n |          String on success, Nothing otherwise\n |  \n |  delMessagesToSMS(self, sms_address, folder='[Gmail]/Sent Mail')\n |      Deletes all emails to specified sms gateway.\n |      \n |      Args:\n |          sms_address: List containing the sms to which emails will be deleted\n |          folder: (optional) Folder to be deleted from\n |          \n |      Returns:\n |          Dictionary on success, Nothing otherwise\n |  \n |  getAddressesFromUIDs(self, UIDs, folder, readOnly=False)\n |      Returns the addresses from specified UIDs. \n |      \n |      Args:\n |          UIDs: List of UIDs\n |          folder: folder from which the UIDs came\n |          readOnly: (optional) Whether or not to mark the messages as read.\n |      \n |      Returns:\n |          a dictionary containing the UID and address as a pair.\n |  \n |  getFolders(self)\n |      Returns all the folders available.\n |      \n |      Returns:\n |          List containing all folders availabe\n |  \n |  getGateways(self)\n |      Returns all the US Mobile Carriers and respective SMS Gateways.\n |      \n |      Returns:\n |          SMS_GATEWAYS_US\n |  \n |  getGmailFolders(self)\n |      Returns all Gmail folders.\n |      \n |      Returns:\n |          GMAIL_FOLDERS\n |  \n |  getMessagesFromUIDs(self, UIDs, folder, readOnly=False)\n |      Returns the parsed message from specified UIDs. \n |      \n |      Args:\n |          UIDs: List of UIDs\n |          folder: folder from which the UIDs came\n |          readOnly: (optional) Whether or not to mark the messages as read.\n |      \n |      Returns:\n |          a dictionary containing the UID and message as a pair.\n |  \n |  getSearchKeys(self)\n |      Returns all search keys.\n |      \n |      Returns:\n |          SEARCH_KEYS\n |  \n |  getTextMessages(self, newMessagesOnly=False, returnUID=False)\n |      Grabs all recieved messages\n |      \n |      Retrieves all text messsages. Only retrieves the body of the email.\n |      \n |      Args:\n |          newMessagesOnly: (optional) Only retrieve unread messages\n |          returnUID: (option) Whether or not to return the UIDs\n |      \n |      Returns:\n |          Default:\n |              Python Dictionary containing the sms_address and a list of messages as a pair.\n |              Example\n |      \n |              {'+12003004000@tmomail.net': ['Hello','World'], '+15006007000@tmomail.net': ['foo','bar']}\n |              \n |              To get the message as a list just use exampleDict[sms_address]\n |      \n |          returnUID=True:\n |              Python Dictionary containing the sms_address and a dictionary of UID: message as a pair.\n |              example:\n |      \n |              {'+12003004000@tmomail.net': {123: 'Hello', 456: 'World'}}\n |  \n |  getTextMessagesFrom(self, sms_address, newMessagesOnly=False, returnUID=False)\n |      Grabs all messages sent by the sms address.\n |      \n |      Retrieves all text messsages sent by the specified sms address.\n |      Only retrieves the body of the email.\n |      \n |      Args:\n |          sms_address: List of strings containing the specified address.\n |          newMessagesOnly: (optional) Only retrieve unread messages\n |          returnUID: (option) Whether or not to return the UIDs\n |      \n |      Returns:\n |          Default:\n |              Python Dictionary containing the sms_address and a list of messages as a pair.\n |              Example\n |      \n |              {'+12003004000@tmomail.net': ['Hello','World'], '+15006007000@tmomail.net': ['foo','bar']}\n |              \n |              To get the message as a list just use exampleDict[sms_address]\n |      \n |          returnUID=True:\n |              Python Dictionary containing the sms_address and a dictionary of UID: message as a pair.\n |              example:\n |      \n |              {'+12003004000@tmomail.net': {123: 'Hello', 456: 'World'}}\n |  \n |  searchFolder(self, folder, *searchKeys)\n |      Searches the specified folder.\n |      \n |      Searches the folder specified by using searchKeys.\n |      Example:\n |          searchFolder('INBOX','FROM','foobar@email.com')\n |          searchFolder('[Gmail]/All Mail','UNSEEN','SUBJECT','Hello World','FROM','foobar@email.com')\n |          \n |      NOTE:\n |          UIDs are folder specific. A UID from INBOX only applies to INBOX.\n |          \n |      Args:\n |          folder: Folder to search from\n |          *searchKeys: List of search keys to be used\n |          \n |      Returns:\n |          List of UIDs for the specified folder.\n |  \n |  sendTextMessage(self, message, sms_address, subject='I am a bot. Beep Boop.')\n |      Sends text message to specified sms_address.\n |      \n |      Composes an email from the message and subject and sends it to the recipients.\n |      Example:\n |          I am a bot. Beep Boop./ Hello World.\n |      \n |      Args:\n |          sms_address: List of strings containing the addresses to be sent\n |          message: Text message to be sent.\n |          subject: (optional) message to be used on subject line.\n |      \n |      Returns:\n |          String on success, Nothing otherwise.\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  GMAIL_FOLDERS = ['INBOX', '[Gmail]/All Mail', '[Gmail]/Drafts', '[Gmai...\n |  \n |  SEARCH_KEYS = ['BEFORE', 'ON', 'SINCE', 'SUBJECT', 'BODY', 'TEXT', 'FR...\n |  \n |  SMS_GATEWAYS_US = {'AT&T': 'txt.att.net', 'Alltel': 'sms.alltelwireles...\n```\n\n## License\n[MIT](/LICENSE)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/coolspykee/sms_messenger",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sms-messenger",
    "package_url": "https://pypi.org/project/sms-messenger/",
    "platform": "",
    "project_url": "https://pypi.org/project/sms-messenger/",
    "project_urls": {
      "Homepage": "https://github.com/coolspykee/sms_messenger"
    },
    "release_url": "https://pypi.org/project/sms-messenger/1.2.0/",
    "requires_dist": [
      "imapclient (>=2.1.0)",
      "pyzmail (>=1.0.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple Python package for sending messages over SMS Gateways.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7862962,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53d4f7a4bfeb5ab8354cd77bbbbe870659a4c9afcab8bf8edfec6ae076d64add",
          "md5": "ba74a6abc33df01df35287df90d56d0e",
          "sha256": "15a6be384bb4c7056a3c48c8e90b286419e1fcae5f23b99033c33bfce35ea5dd"
        },
        "downloads": -1,
        "filename": "sms_messenger-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba74a6abc33df01df35287df90d56d0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7725,
        "upload_time": "2020-06-19T03:51:07",
        "upload_time_iso_8601": "2020-06-19T03:51:07.546154Z",
        "url": "https://files.pythonhosted.org/packages/53/d4/f7a4bfeb5ab8354cd77bbbbe870659a4c9afcab8bf8edfec6ae076d64add/sms_messenger-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c68d7b4651cda4e67610869db34c194bbb3af31026502b30ac0499cb50e583e7",
          "md5": "437e0a3f9cb709b1916cf231a4410078",
          "sha256": "6346cee30cae42000c27be065bdac08fceec7345ff5c079cf37fb3f85ff98b5d"
        },
        "downloads": -1,
        "filename": "sms_messenger-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "437e0a3f9cb709b1916cf231a4410078",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7046,
        "upload_time": "2020-06-19T03:51:09",
        "upload_time_iso_8601": "2020-06-19T03:51:09.070867Z",
        "url": "https://files.pythonhosted.org/packages/c6/8d/7b4651cda4e67610869db34c194bbb3af31026502b30ac0499cb50e583e7/sms_messenger-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8db8ac5773ec73719c0df3c35454d1e09dca214a634ce145d5573fb613d613fd",
          "md5": "7e577fd4b8c2348fb7e90101568c7131",
          "sha256": "cd23cbb1cb099708bbca5a36d2ea0dabfe353e6d62ec3ed20ee4caf95dfe80bf"
        },
        "downloads": -1,
        "filename": "sms_messenger-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e577fd4b8c2348fb7e90101568c7131",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7992,
        "upload_time": "2020-08-01T17:45:36",
        "upload_time_iso_8601": "2020-08-01T17:45:36.377612Z",
        "url": "https://files.pythonhosted.org/packages/8d/b8/ac5773ec73719c0df3c35454d1e09dca214a634ce145d5573fb613d613fd/sms_messenger-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64bd992f318311504c09da8226be8fd8765ec95bcbd4f9827e3e7f88ae41f404",
          "md5": "2ef872ced1d96df8b7c763f9d939ba54",
          "sha256": "a6ca7bef0e22539d5e708f105dc84ee01736a14d4e600f9fd0c5270d1f6ada9e"
        },
        "downloads": -1,
        "filename": "sms_messenger-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ef872ced1d96df8b7c763f9d939ba54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7589,
        "upload_time": "2020-08-01T17:45:37",
        "upload_time_iso_8601": "2020-08-01T17:45:37.659127Z",
        "url": "https://files.pythonhosted.org/packages/64/bd/992f318311504c09da8226be8fd8765ec95bcbd4f9827e3e7f88ae41f404/sms_messenger-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8db8ac5773ec73719c0df3c35454d1e09dca214a634ce145d5573fb613d613fd",
        "md5": "7e577fd4b8c2348fb7e90101568c7131",
        "sha256": "cd23cbb1cb099708bbca5a36d2ea0dabfe353e6d62ec3ed20ee4caf95dfe80bf"
      },
      "downloads": -1,
      "filename": "sms_messenger-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7e577fd4b8c2348fb7e90101568c7131",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7992,
      "upload_time": "2020-08-01T17:45:36",
      "upload_time_iso_8601": "2020-08-01T17:45:36.377612Z",
      "url": "https://files.pythonhosted.org/packages/8d/b8/ac5773ec73719c0df3c35454d1e09dca214a634ce145d5573fb613d613fd/sms_messenger-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64bd992f318311504c09da8226be8fd8765ec95bcbd4f9827e3e7f88ae41f404",
        "md5": "2ef872ced1d96df8b7c763f9d939ba54",
        "sha256": "a6ca7bef0e22539d5e708f105dc84ee01736a14d4e600f9fd0c5270d1f6ada9e"
      },
      "downloads": -1,
      "filename": "sms_messenger-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2ef872ced1d96df8b7c763f9d939ba54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7589,
      "upload_time": "2020-08-01T17:45:37",
      "upload_time_iso_8601": "2020-08-01T17:45:37.659127Z",
      "url": "https://files.pythonhosted.org/packages/64/bd/992f318311504c09da8226be8fd8765ec95bcbd4f9827e3e7f88ae41f404/sms_messenger-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}