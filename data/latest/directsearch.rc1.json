{
  "info": {
    "author": "Lindon Roberts",
    "author_email": "lindon.roberts@anu.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: IPython",
      "Framework :: Jupyter",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "==============================================================\ndirectsearch: derivative-free optimization using direct search\n==============================================================\n\n.. image::  https://github.com/lindonroberts/directsearch/actions/workflows/unit_tests.yml/badge.svg\n   :target: https://github.com/lindonroberts/directsearch/actions\n   :alt: Build Status\n\n.. image::  https://img.shields.io/badge/License-GPL%20v3-blue.svg\n   :target: https://www.gnu.org/licenses/gpl-3.0\n   :alt: GNU GPL v3 License\n\n``directsearch`` is a package for solving unconstrained minimization, without requiring derivatives of the objective. It is particularly useful when evaluations of the objective function are expensive and/or noisy.\n\nIt implements a family of direct search methods.\nFor general references on these methods, please consult:\n\n1. A R Conn, K Scheinberg, and L N Vicente. *Introduction to derivative-free optimization*. SIAM, 2009.\n2. C Audet, and W. Hare. Derivative-Free and Blackbox Optimization. Springer, 2017.\n3. T G Kolda, R M Lewis, and V Torczon. Optimization by Direct Search: New Perspectives on Some Classical and Modern Methods. *SIAM Review*, 45(3), 2003, 385-482.\n\nThis package extends general direct search methods to use randomized methods for improved practical performance and scalability.\n\nCitation\n--------\nIf you use this package, please cite:\n\nL Roberts, and C W Royer. Direct search based on probabilistic descent in reduced spaces, *In preparation*, (2022).\n\nInstallation\n------------\nPlease install using pip:\n\n.. code-block:: bash\n\n    $ pip install [--user] directsearch\n\nTo instead install from source run:\n\n.. code-block:: bash\n\n    $ git clone git@github.com:lindonroberts/directsearch.git\n    $ cd directsearch\n    $ pip install -e .\n\nThe ``-e`` option to pip allows you to modify the source code and for your Python installation to recognize this.\n\nUsage\n-----\nThis package can solve unconstrained nonlinear optimization problems of the form: ``min_{x in R^n} f(x)``.\nThe simplest usage of ``directsearch`` is\n\n.. code-block:: python\n\n    soln = directsearch.solve(f, x0)\n\nwhere\n\n* ``f`` is a callable objective function, taking in a ``numpy.ndarray`` the same shape as ``x0`` and returing a single ``float``.\n* ``x0`` is a one-dimensional ``numpy.ndarray`` (i.e. ``len(x0.shape)==1``), the starting point for the algorithm. It should be the best available guess of the minimizer.\n\nThe output is an object with fields:\n\n* ``soln.x``: the approximate minimizer, the best ``x`` value found (a ``numpy.ndarray`` the same shape as ``x0``).\n* ``soln.f``: the minimum value equal to ``f(soln.x)``.\n* ``soln.nf``: the number of evaluations of ``f`` required by the solve routine.\n* ``soln.flag``: an integer indicating the reason for termination.\n* ``soln.msg``: a string with a human-readable termination message.\n\nThe possible values of ``soln.flag`` are:\n\n* ``soln.EXIT_MAXFUN_REACHED``: termination on maximum number of objective evaluations.\n* ``soln.EXIT_ALPHA_MIN_REACHED``: termination on small step size (success).\n\nYou can print information about the solution using ``print(soln)``.\nThe ``examples`` directory has several scripts showing the usage of ``directsearch``.\n\n**Interfaces to solver instances**\n\nThere are many configurable options for the solver in `directsearch` and several ways to call specific direct search algorithm implementations.\nThe full set of available functions is:\n\n* ``directsearch.solve()`` applies a direct-search method to a given optimization problem. It is the most flexible available routine.\n* ``directsearch.solve_directsearch()`` applies regular direct-search techniques without sketching [1,2,3].\n* ``directsearch.solve_probabilistic_directsearch()`` applies direct search based on probabilistic descent without sketching [4].\n* ``directsearch.solve_subspace_directsearch()`` applies direct-search schemes based on polling directions in random subspaces [5].\n* ``directsearch.solve_stp()`` applies the stochastic three points method, a particular direct-search technique [6].\n\n**Optional parameters and more information**\n\nSee ``usage.txt`` for full details on how to call these functions.\nThe most commonly used optional inputs (to all functions) are:\n\n* ``maxevals``: the maximum number of allowed evaluations of ``f`` during the solve.\n* ``verbose``: a ``bool`` for whether or not to print progress information.\n* ``print_freq``: an ``int`` indicating how frequently to print progress information (1 is at every iteration).\n\n**Choosing a solver instance**\n\nAs a rule of thumb, if ``len(x0)`` is not too large (e.g. less than 50), then ``solve_directsearch()`` or ``solve_probabilistic_directsearch()`` are suitable choices.\nOf these, generally ``solve_probabilistic_directsearch()`` will solve with fewer evaluations of ``f``, but ``solve_directsearch()`` is a deterministic algorithm.\nIf ``len(x0)`` is larger, then ``directsearch.solve_subspace_directsearch()`` may be a better option.\nNote that ``solve_directsearch()`` is the only deterministic algorithm (i.e. reproducible without setting the numpy random seed).\n\n**References**\n\n1. A R Conn, K Scheinberg, and L N Vicente. *Introduction to derivative-free optimization*. SIAM, 2009.\n2. C Audet, and W. Hare. Derivative-Free and Blackbox Optimization. Springer, 2017.\n3. T G Kolda, R M Lewis, and V Torczon. Optimization by Direct Search: New Perspectives on Some Classical and Modern Methods. *SIAM Review*, 45(3), 2003, 385-482.\n4. S Gratton, C W Royer, L N Vicente, and Z Zhang. Direct Search Based on Probabilistic Descent. *SIAM J. Optimization*, 25(3), 2015, 1515-1541.\n5. L Roberts, and C W Royer. Direct search based on probabilistic descent in reduced spaces, *In preparation*, (2022).\n6. E H Bergou, E Gorbunov, and P Richtarik. Stochastic Three Points Method for Unconstrained Smooth Minimization. *SIAM J. Optimization*, 30(4), 2020, 2726-2749.\n\nBugs\n----\nPlease report any bugs using GitHub's issue tracker.\n\nLicense\n-------\nThis algorithm is released under the GNU GPL license.",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/lindonroberts/directsearch/archive/v1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lindonroberts/directsearch",
    "keywords": "mathematics derivative free optimization direct search",
    "license": "GNU GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "directsearch",
    "package_url": "https://pypi.org/project/directsearch/",
    "platform": null,
    "project_url": "https://pypi.org/project/directsearch/",
    "project_urls": {
      "Download": "https://github.com/lindonroberts/directsearch/archive/v1.0.tar.gz",
      "Homepage": "https://github.com/lindonroberts/directsearch"
    },
    "release_url": "https://pypi.org/project/directsearch/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A derivative-free solver for unconstrained minimization",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13368360,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42b0876bc174ff34a0b2e3b75f10d7c3c9a267a1f56dbac59e943b6f682f6aa8",
          "md5": "3cd5f5f93951a63f41928c8b332511e9",
          "sha256": "8093ecc401a3d5eff28f053d4ef1b726f5a9c577bd33d6a8b2413a5ba753c734"
        },
        "downloads": -1,
        "filename": "directsearch-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3cd5f5f93951a63f41928c8b332511e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13605,
        "upload_time": "2022-04-01T03:06:11",
        "upload_time_iso_8601": "2022-04-01T03:06:11.488459Z",
        "url": "https://files.pythonhosted.org/packages/42/b0/876bc174ff34a0b2e3b75f10d7c3c9a267a1f56dbac59e943b6f682f6aa8/directsearch-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42b0876bc174ff34a0b2e3b75f10d7c3c9a267a1f56dbac59e943b6f682f6aa8",
        "md5": "3cd5f5f93951a63f41928c8b332511e9",
        "sha256": "8093ecc401a3d5eff28f053d4ef1b726f5a9c577bd33d6a8b2413a5ba753c734"
      },
      "downloads": -1,
      "filename": "directsearch-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3cd5f5f93951a63f41928c8b332511e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13605,
      "upload_time": "2022-04-01T03:06:11",
      "upload_time_iso_8601": "2022-04-01T03:06:11.488459Z",
      "url": "https://files.pythonhosted.org/packages/42/b0/876bc174ff34a0b2e3b75f10d7c3c9a267a1f56dbac59e943b6f682f6aa8/directsearch-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}