{
  "info": {
    "author": "Kosuke Asada",
    "author_email": "laplaciannin102@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "copy-excel-format\n=================\n\n-  author: laplaciannin102(Kosuke Asada)\n-  date: 2021/01/12\n-  latest version: 0.1.9\n\n--------------\n\nTable of Contents\n-----------------\n\n-  `copy-excel-format <#copy-excel-format>`__\n\n   -  `Table of Contents <#table-of-contents>`__\n   -  `How to install <#how-to-install>`__\n   -  `概要 <#概要>`__\n\n      -  `何をするプログラム？ <#何をするプログラム>`__\n      -  `注意事項 <#注意事項>`__\n\n   -  `入出力 <#入出力>`__\n\n      -  `入力(Input) <#入力input>`__\n      -  `出力(Output) <#出力output>`__\n\n   -  `使用手順 <#使用手順>`__\n   -  `Example <#example>`__\n   -  `Repository <#repository>`__\n\n      -  `Github <#github>`__\n      -  `PyPI <#pypi>`__\n\n--------------\n\nHow to install\n--------------\n\n.. code:: shell\n\n   pip install copy_excel_format\n\n--------------\n\n概要\n----\n\n何をするプログラム？\n~~~~~~~~~~~~~~~~~~~~\n\n-  たくさんのテーブル(DataFrameを想定)をたくさんの書式付きexcelシートとして出力する.\n\n注意事項\n~~~~~~~~\n\n-  xlwingsを使用して並列処理する場合はexcelのインストール(Office)が必要.\n-  テスト等きちんと出来ていないのでバグがある可能性あり.\n\n--------------\n\n入出力\n------\n\n入力(Input)\n~~~~~~~~~~~\n\n-  複数のpandas.DataFrame.\n-  書式のテンプレートとして使用したいexcelシート.\n\n出力(Output)\n~~~~~~~~~~~~\n\n-  **書式付き**,\n   **テーブルの値が入力済み**\\ のシートが複数あるexcelファイル.\n\n   -  書式はテンプレートexcelファイルのもの.\n   -  テーブルの値はpandas.DataFrameのもの.\n\n--------------\n\n使用手順\n--------\n\n-  以下, JupyterNotebookなどのPython環境での操作を想定しています.\n\n-  copy-excel-formatモジュールをimportします.\n\n.. code:: python\n\n   import copy_excel_format as cef\n\n-  テンプレートとなるexcelファイルを準備します.\n\n   -  下記を実行すると,\n      sampleのexcelファイルおよびディレクトリ構成を取得, 設定できます.\n   -  とりあえず試してみたい時にご使用ください.\n\n.. code:: python\n\n   cef.load_sample_files()\n\n-  pandas.DataFrameを複数準備します.\n\n.. code:: python\n\n   import pandas as pd\n   df0 = pd.DataFrame(...) # 1つ目のpandas.DataFrame\n   df1 = pd.DataFrame(...) # 2つ目のpandas.DataFrame\n\n-  テンプレートexcelファイルのパス, pandas.DataFrameオブジェクト,\n   そのDataFrameの値を入力したいシートのシート名を引数にCopyExcelInfoHolderオブジェクトを作成し,\n   list変数に格納します.\n\n.. code:: python\n\n   \"\"\"\n   df0: 1つ目のpandas.DataFrame\n   df1: 2つ目のpandas.DataFrame\n   input_template_excel_path: テンプレートexcelファイルのパス\n   sheet_name0: 1つ目のsheet_name\n   sheet_name1: 2つ目のsheet_name\n   \"\"\"\n\n   # CopyExcelInfoHolderオブジェクトの作成\n   ceih0 = cef.CopyExcelInfoHolder(\n       template_excel_path = input_template_excel_path,\n       template_sheet_name = 'blank_template',\n       output_sheet_name = sheet_name0,\n       df = df0\n   )\n\n   ceih1 = cef.CopyExcelInfoHolder(\n       template_excel_path = input_template_excel_path,\n       template_sheet_name = 'blank_template',\n       output_sheet_name = sheet_name1,\n       df = df1\n   )\n\n   ceih_list = [ceih0, ceih1] # list変数\n\n-  copy_excel_format関数を実行します.\n\n   -  下記は直列処理での実行例.\n   -  output_excel_pathには出力excelファイルのパスを与えます.\n\n.. code:: python\n\n   # excel書式コピーを直列で実行\n   cef.copy_excel_format(\n       ceih_list = ceih_list,\n       output_excel_path = output_path + 'output_excel_sample.xlsx',\n       cef_manual_set_rows = None,\n       cef_force_dimension_copy = False,\n       cef_debug_mode = True,\n       write_index = False,\n       write_header = False,\n       copy_values = False\n   )\n\n[end]\n\n--------------\n\nExample\n-------\n\n-  sample ipynb:\n   `Githubリンク <https://github.com/laplaciannin102/copy_excel_format/blob/master/examples/copy_excel_format_sample.ipynb>`__\n\n-  sample program:\n\n.. code:: python\n\n\n   # --------------------------------------------------------------------------------\n   # Load modules\n   # --------------------------------------------------------------------------------\n   ## copy-excel-format module\n   import copy_excel_format as cef\n\n   ## other modules\n   import gc\n   import numpy as np\n   import pandas as pd\n   import random\n   import time\n   from datetime import datetime, timedelta\n   from dateutil.relativedelta import relativedelta\n\n\n   # --------------------------------------------------------------------------------\n   # Configure\n   # --------------------------------------------------------------------------------\n   # random seed\n   np.random.seed(57)\n   random.seed(57)\n\n\n   # --------------------------------------------------------------------------------\n   # Constants\n   # --------------------------------------------------------------------------------\n   # paths\n   ## directory paths\n   input_path = './input/'\n   output_path = './output/'\n   interm_path = './intermediate/'\n\n   ## file paths\n   input_template_excel_path = input_path + 'input_template_excel_sample.xlsx'\n   input_header_csv_path = input_path + 'input_header_df_sample.csv'\n\n\n   # --------------------------------------------------------------------------------\n   # Load sample files\n   # --------------------------------------------------------------------------------\n   cef.load_sample_files()\n\n\n   # --------------------------------------------------------------------------------\n   # Functions\n   # --------------------------------------------------------------------------------\n   # header dataframe\n   header_df = pd.read_csv(input_header_csv_path)\n\n   # get_sample_df\n   def get_sample_df(n_rows=10, header_df=header_df):\n       \"\"\"\n       sampleデータを作成する関数.\n       \n       Args:\n           n_rows: int, optional(default=10)\n               データ部分のDataFrameの行数.\n           \n           header_df: pandas.DataFrame\n               ヘッダー部分のDataFrame\n       \"\"\"\n       col1_samples = ['hoge', 'fuga', 'poyo', 'gray', None]\n       \n       sample_df = pd.DataFrame()\n       sample_df['No.'] = range(n_rows)\n       sample_df['No.'] = sample_df['No.'] + 1\n       sample_df['date'] = [datetime(2020, 11, 20) + relativedelta(days=jj*7) for jj in range(n_rows)]\n       sample_df['col1'] = random.choices(col1_samples, k=n_rows)\n       sample_df['col2'] = np.random.randint(0, 10, size=n_rows)\n       sample_df['col3'] = np.random.randint(100, 200, size=n_rows)\n       sample_df['col4'] = random.choices(col1_samples, k=n_rows)\n       sample_df['col5'] = np.random.randint(0, 10, size=n_rows)\n       sample_df['col6'] = np.random.randint(100, 200, size=n_rows)\n       \n       # headerをつける\n       tmp_name = random.choice(['hoge', 'fuga', 'poyo'])\n       tmp_header_df = header_df.copy()\n       tmp_header_df = tmp_header_df.replace('name: <name>', 'name: ' + tmp_name)\n       \n       sample_df = tmp_header_df.append(sample_df)\n       \n       return sample_df\n\n\n   # --------------------------------------------------------------------------------\n   # excel書式コピー準備\n   # --------------------------------------------------------------------------------\n   # テンプレートのexcelパスとシート名とDataFrameをセット\n   # DataFrameの数. シート数も同じ数.\n   n_df = 10\n\n   # CopyExcelInfoHolderオブジェクトインスタンスのリスト\n   ceih_list = []\n\n   # ceih_listというCopyExcelInfoHolderオブジェクトインスタンスのリストを作成しておく\n   for ii in range(n_df):\n       \n       tmp_sheet_name = 'sheet' + str(ii+1).zfill(3)\n       tmp_df = get_sample_df(\n           n_rows = np.random.randint(10, 28)\n       )\n\n       ceih = cef.CopyExcelInfoHolder(\n           template_excel_path = input_template_excel_path,\n           template_sheet_name = 'blank_template',\n           output_sheet_name = tmp_sheet_name,\n           df = tmp_df\n       )\n       \n       ceih_list += [ceih]\n       \n       del ceih\n       gc.collect()\n\n\n   # --------------------------------------------------------------------------------\n   # Execute\n   # --------------------------------------------------------------------------------\n   # excel書式コピーを直列で実行\n   cef.copy_excel_format(\n       ceih_list = ceih_list,\n       output_excel_path = output_path + 'output_excel_sample.xlsx',\n       cef_manual_set_rows = None,\n       cef_force_dimension_copy = False,\n       cef_debug_mode = True,\n       write_index = False,\n       write_header = False,\n       copy_values = False\n   )\n\n   # excel書式コピーを並列で実行1(1つの関数で実行)\n   cef.copy_excel_format_parallel(\n       ceih_list = ceih_list,\n       output_excel_path = output_path + 'output_excel_sample_parallel001.xlsx',\n       tmp_output_excel_dir_path = interm_path + 'tmp_output_excel/',\n       parallel_method = 'multiprocess',\n       n_jobs = None,\n       copy_sheet_method = 'xlwings',\n       sorted_sheet_names_list = None,\n       del_tmp_dir = True,\n       n_seconds_to_sleep = 1,\n       cef_manual_set_rows = None,\n       cef_force_dimension_copy = False,\n       cef_debug_mode = True,\n       write_index = False,\n       write_header = False,\n       copy_values = False\n   )\n\n   # excel書式コピーを並列で実行2(2つの関数に分けて実行)\n   # 並列処理を行い, 一時的な書式設定済みのexcelファイルを出力する.\n   cef.output_temporary_excel_parallel(\n       ceih_list = ceih_list,\n       tmp_output_excel_dir_path = interm_path + 'tmp_output_excel/',\n       parallel_method = 'multiprocess',\n       n_jobs = None,\n       cef_manual_set_rows = None,\n       cef_force_dimension_copy = False,\n       cef_debug_mode = True,\n       write_index = False,\n       write_header = False,\n       copy_values = False\n   )\n\n   # 一時的に出力した複数のexcelファイルをまとめて複数シートを持つ1つのexcelファイルとする.\n   cef.copy_excel_format_from_temporary_files(\n       ceih_list = ceih_list,\n       output_excel_path = output_path + 'output_excel_sample_parallel002.xlsx',\n       tmp_output_excel_dir_path = interm_path + 'tmp_output_excel/',\n       copy_sheet_method = 'xlwings',\n       sorted_sheet_names_list = None,\n       del_tmp_dir = True,\n       n_seconds_to_sleep = 1\n   )\n\n--------------\n\nRepository\n----------\n\nGithub\n~~~~~~\n\n-  https://github.com/laplaciannin102/copy_excel_format\n\nPyPI\n~~~~\n\n-  https://pypi.org/project/copy_excel_format/\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/laplaciannin102/copy_excel_format",
    "keywords": "",
    "license": "Copyright (c) 2021, Kosuke Asada\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
    "maintainer": "",
    "maintainer_email": "",
    "name": "copy_excel_format",
    "package_url": "https://pypi.org/project/copy_excel_format/",
    "platform": "",
    "project_url": "https://pypi.org/project/copy_excel_format/",
    "project_urls": {
      "Homepage": "https://github.com/laplaciannin102/copy_excel_format"
    },
    "release_url": "https://pypi.org/project/copy_excel_format/0.1.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "copy excel format",
    "version": "0.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9114348,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb017338fa7d10724ab05cd7e3ffd10687c8df16ac042e6743c5a430a4b521f9",
          "md5": "7d95004788d806c57c6bb8b3dbe06986",
          "sha256": "fa13fd1e88c5f48143dbf1d296a4f1d8ebed0551fe211dea7bc0727269860982"
        },
        "downloads": -1,
        "filename": "copy_excel_format-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d95004788d806c57c6bb8b3dbe06986",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 179583,
        "upload_time": "2020-12-22T23:58:17",
        "upload_time_iso_8601": "2020-12-22T23:58:17.786515Z",
        "url": "https://files.pythonhosted.org/packages/bb/01/7338fa7d10724ab05cd7e3ffd10687c8df16ac042e6743c5a430a4b521f9/copy_excel_format-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "473d8ca10adf2c9cf9e6fe9d132819d727f128ec238604c0aeef8bbef7c8dad8",
          "md5": "21295974e10290306e57a0cff53f1344",
          "sha256": "cb482b6591e8afaf1e90f3a6cb1987aa23f90ce6f4392eeb0e942564abe84afe"
        },
        "downloads": -1,
        "filename": "copy_excel_format-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21295974e10290306e57a0cff53f1344",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 180754,
        "upload_time": "2020-12-23T00:10:12",
        "upload_time_iso_8601": "2020-12-23T00:10:12.283442Z",
        "url": "https://files.pythonhosted.org/packages/47/3d/8ca10adf2c9cf9e6fe9d132819d727f128ec238604c0aeef8bbef7c8dad8/copy_excel_format-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2363a52f6e53661bacaddc33a886fa1d56990cf3bb0ffb5133489412086b5b27",
          "md5": "3617cbb787f015ef9aab2719996e7519",
          "sha256": "91585a67821a579cd7d7855453eb566a7c7df041e80f9779c9cdef20f5805fc0"
        },
        "downloads": -1,
        "filename": "copy_excel_format-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3617cbb787f015ef9aab2719996e7519",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35302,
        "upload_time": "2021-01-12T13:54:16",
        "upload_time_iso_8601": "2021-01-12T13:54:16.306381Z",
        "url": "https://files.pythonhosted.org/packages/23/63/a52f6e53661bacaddc33a886fa1d56990cf3bb0ffb5133489412086b5b27/copy_excel_format-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2363a52f6e53661bacaddc33a886fa1d56990cf3bb0ffb5133489412086b5b27",
        "md5": "3617cbb787f015ef9aab2719996e7519",
        "sha256": "91585a67821a579cd7d7855453eb566a7c7df041e80f9779c9cdef20f5805fc0"
      },
      "downloads": -1,
      "filename": "copy_excel_format-0.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "3617cbb787f015ef9aab2719996e7519",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35302,
      "upload_time": "2021-01-12T13:54:16",
      "upload_time_iso_8601": "2021-01-12T13:54:16.306381Z",
      "url": "https://files.pythonhosted.org/packages/23/63/a52f6e53661bacaddc33a886fa1d56990cf3bb0ffb5133489412086b5b27/copy_excel_format-0.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}