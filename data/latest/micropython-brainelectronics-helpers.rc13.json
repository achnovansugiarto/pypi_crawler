{
  "info": {
    "author": "brainelectronics",
    "author_email": "info@brainelectronics.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# MicroPython modules\n\n[![Downloads](https://pepy.tech/badge/micropython-brainelectronics-helpers)](https://pepy.tech/project/micropython-brainelectronics-helpers)\n![Release](https://img.shields.io/github/v/release/brainelectronics/micropython-modules?include_prereleases&color=success)\n![MicroPython](https://img.shields.io/badge/micropython-Ok-green.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://github.com/brainelectronics/micropython-brainelectronics-helpers/actions/workflows/release.yml/badge.svg)](https://github.com/brainelectronics/micropython-brainelectronics-helpers/actions/workflows/release.yml)\n\nCustom brainelectronics MicroPython helpers, modules and wrappers\n\n---------------\n\n## About\n\nThis is a collection of MicroPython modules required for the BE32-01 and other\nbrainelectronics projects.\n\n<!-- MarkdownTOC -->\n\n- [Available generators](#available-generators)\n- [Installation](#installation)\n    - [Install required tools](#install-required-tools)\n- [Setup](#setup)\n    - [Install package with pip](#install-package-with-pip)\n    - [Manually](#manually)\n    - [Generic Helper](#generic-helper)\n    - [LED Helper](#led-helper)\n        - [Onboard LED](#onboard-led)\n            - [Basics](#basics)\n            - [Advanced](#advanced)\n        - [Neopixel](#neopixel)\n            - [Basics](#basics-1)\n            - [Advanced](#advanced-1)\n    - [Modbus Bridge](#modbus-bridge)\n    - [Path Helper](#path-helper)\n    - [Time Helper](#time-helper)\n    - [WiFi Helper](#wifi-helper)\n\n<!-- /MarkdownTOC -->\n\n## Available generators\n\nFor the individual usage of a helper, module or wrapper read the brief\ndescription and usage instructions of each module.\n\n## Installation\n\n### Install required tools\n\nPython3 must be installed on your system. Check the current Python version\nwith the following command\n\n```bash\npython --version\npython3 --version\n```\n\nDepending on which command `Python 3.x.y` (with x.y as some numbers) is\nreturned, use that command to proceed.\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\n\npip install -r requirements.txt\n```\n\n## Setup\n\n### Install package with pip\n\nConnect your MicroPython board to a network\n\n```python\nimport network\nstation = network.WLAN(network.STA_IF)\nstation.active(True)\nstation.connect('SSID', 'PASSWORD')\nstation.isconnected()\n```\n\nand install this lib on the MicroPython device like this\n\n```python\nimport upip\nupip.install('micropython-brainelectronics-helpers')\n# its dependencies will be installed alongside\n```\n\n### Manually\n\nCopy the module to the MicroPython board and import them as shown below\nusing [Remote MicroPython shell][ref-remote-upy-shell]\n\nOpen the remote shell with the following command. Additionally use `-b 115200`\nin case no CP210x is used but a CH34x.\n\n```bash\nrshell -p /dev/tty.SLAB_USBtoUART --editor nano\n```\n\nPerform the following command to copy all files and folders to the device\n\n```bash\nmkdir /pyboard/lib\nmkdir /pyboard/lib/be_helpers\ncp be_helpers/* /pyboard/lib/be_helpers\n```\n\nInstall required dependencies (requires network connection, see may use the\n[`WifiHelper`][ref-wifi-helper])\n\n```python\nimport upip\nupip.install('micropython-ulogging')\n```\n\n### Generic Helper\n\nGeneric helper class with different usecases and functions.\n\n```python\nfrom be_helpers.generic_helper import GenericHelper\n\n# get a random value between zero and 100 (inclusive)\nGenericHelper.get_random_value(0, 100)\n# >>> 72\n\n# get amount of free disk space in kilobytes\nGenericHelper.df(path='/', unit='kb')\n# >>> '1984.000 kB'\n\n# get dict of free RAM with total, free and percentage used\nGenericHelper.get_free_memory()\n# >>> {'percentage': '99.76%', 'total': 4098240, 'free': 4088400}\n\n# get UUID of default length, might be different on PyCOM, MicroPython, ...\nGenericHelper.get_uuid()\n# >>> b'308398d9eefc'\n# GenericHelper.get_uuid(length=18)\n# >>> b'308398d9eefc308398'\n\n# get detailed info (full == True) RAM informations\nGenericHelper.free(full=True)\n# >>> 'Total: 4006.1 kB, Free: 3992.56 kB (99.76%)'\n\n# interpret a string as dictionary\nsome_string = \"{'klaus': 123}\"\nd = GenericHelper.str_to_dict(data=some_string)\ntype(d)\n# >>> <class 'dict'>\n\n# save a dictionary as JSON file\nGenericHelper.save_json(path='/test.json', data=d)\n\n# load a JSON file as dictionary\nread_back_dict = GenericHelper.load_json(path='/test.json')\nread_back_dict\n# >>> {'klaus': 123}\n\nread_back_dict == d\n# >>> True\n\n# save a string to file in non binary mode\nGenericHelper.save_file(path='/test.txt', data=some_string, mode='w')\n\n# load the content of a file in non binary mode\nread_back_str = GenericHelper.load_file(path='/test.txt', mode='r')\nread_back_str\n# >>> \"{'klaus': 123}\"\n\nread_back_str == some_string\n# >>> True\n```\n\n### LED Helper\n\nHandle the onbaord LED on a BE32-01, ESP32 or ESP8266 as well as Neopixel LEDs.\n\n#### Onboard LED\n\nThis example demonstrates how to interact with the onboard LED on the BE32-01\n\n##### Basics\n\nThe onboard LED is availabe on Pin 4 on the BE32-01 board in inverted mode.\n\n```python\nfrom be_helpers.led_helper import Led\n\n# Onboard LED is availabe on Pin 4 on BE32-01 in inverted mode\nled = Led()\nprint('Onboard LED is ON: {}'.format(led.on))\n# Onboard LED is ON: False\n\n# turn onboard LED on\nled.state = True\n\n# alternative way to turn onboard LED on\nled.turn_on()\n\n# turn onboard LED off\nled.state = False\n\n# alternative way to turn onboard LED off\nled.turn_off()\n\n# flash LED for 5 times, with 100ms delay between on and off states\n# this is blocking other actions until flashing operation finished\nled.flash(amount=5, delay_ms=100)\n```\n\n##### Advanced\n\nOther (LED) pins can be used by specifiying them at the beginning\n\n```python\nfrom be_helpers.led_helper import Led\n\n# LED at pin 12 will be active if pin is HIGH\nled = Led(led_pin=12, inverted=False)\nprint('LED is ON: {}'.format(led.on))\n```\n\n```python\nfrom be_helpers.led_helper import Led\n\n# Onboard LED is availabe on Pin 4 on BE32-01\nled = Led()\nprint('LED is ON: {}'.format(led.on))\n\n# let LED blink in a seperate thread with 100ms between on and off\nled.blink(delay_ms=100)\nprint('LED is blinking: {}'.format(led.blinking))\n# LED is blinking: True\n\n# stop the LED blinking\nled.blinking = False\n\n# set different blinking delay\nprint('Current blinking delay: {}ms'.format(led.blink_delay))\n# Current blinking delay: 100ms\nled.blink_delay = 50\n\n# start blinking again (with 50ms delay)\nled.blinking = True\n```\n\n#### Neopixel\n\nThis example demonstrates how to interact with the Neopixel LED on the BE32-01.\n\n##### Basics\n\nThe one Neopixel LED is availabe on Pin 27 on the BE32-01 board.\n\n```python\nfrom be_helpers.led_helper import Neopixel\n\n# Neopixel is by default attached to Pin 27 on BE32-01\npixel = Neopixel()\nprint('Neopixel is active: {}'.format(pixel.active))\n\n# turn Neopixel red with 50/255 intensity\npixel.red(50)\n# pixel.green(50)\n# pixel.blue(50)\n\npixel.active = False\n# turn Neopixel off\n\n# get the current Neopixel color\nprint('Neopixel color (RGB): {}'.format(pixel.color))\n# Neopixel color (RGB): [50, 0, 0]\n\n# get all available neopixel colors\npixel.colors\n# >>> {'red': [30, 0, 0], 'green': [0, 30, 0], ...}\n\n# turn Neopixel yellow\npixel.color = 'yellow'\n\n# get current intensity of Neopixel\nprint('Neopixel intensity: {}/255'.format(pixel.intensity))\n# Neopixel intensity: 30/255\n\n# reduce Neopixel intensity to 10/255\npixel.intensity = 10\n\n# turn Neopixel off, but remember last active color\npixel.clear()\n```\n\n##### Advanced\n\nOther Neopixel pin can be used by specifiying them at the beginning\n\n```python\nfrom be_helpers.led_helper import Neopixel\n\n# Neopixel at pin 37 will be active if pin is HIGH\npixel = Neopixel(neopixel_pin=37, neopixels=3)\nprint('Neopixel is active: {}'.format(pixel.active))\n```\n\n```python\nfrom be_helpers.led_helper import Neopixel\n\n# Neopixel is by default attached to Pin 27 on BE32-01\npixel = Neopixel()\n\n# set custom RGB color\npixel.set(rgb=[10, 20, 30])\n\n# let Neopixel fade the currently set color in a seperate thread with 100ms\n# between intensity changes, 50ms is default and quite smooth\npixel.fade(delay_ms=100)\n\n# stop the Neopixel fading\npixel.fading = False\n\n# set different fading delay\nprint('Current fading delay: {}ms'.format(pixel.fade_delay))\n# Current fading delay: 100ms\npixel.fade_delay = 50\n\n# start fading again (with 50ms delay)\npixel.fading = True\n\n# stop the Neopixel fading\npixel.fading = False\n\n# define a custom color and set the Neopixel to it\npixel.colors = {'DarlingColor': [26, 3, 18]}\npixel.color = 'DarlingColor'\n```\n\n### Modbus Bridge\n\nThis requires [brainelectronics MicroPython Modbus][ref-be-upy-modbus]. Forked\nand extended from [SFERALABS Exo Sense Py][ref-sferalabs-exo-sense].\n\nConnect the board to a network and install the package like this\n\n```python\nimport upip\nupip.install('micropython-modbus')\n```\n\n```python\nimport time\nimport machine\n\nfrom be_helpers.modbus_bridge import ModbusBridge\n\nregister_file = 'registers/modbusRegisters-MyEVSE.json'\nrtu_pins = (25, 26)     # (TX, RX)\ntcp_port = 180          # TCP port for Modbus connection\nrun_time = 60           # run this example for this amount of seconds\n\n# default level is 'warning', may use custom logger to get initial log data\nmb_bridge = ModbusBridge(register_file=register_file)\n\n# define and apply Modbus TCP host settings\nhost_settings = {\n    'type': 'tcp',\n    'unit': tcp_port,\n    'address': -1,\n    'baudrate': -1,\n    'mode': 'master'\n}\nmb_bridge.connection_settings_host = host_settings\n\n# setup Modbus connections to host and client\nmb_bridge.setup_connection(pins=rtu_pins)   # (TX, RX)\n\nprint('Modbus instances:')\nprint('\\t Act as Host: {} on {}'.format(mb_bridge.host, mb_bridge.host_unit))\nprint('\\t Act as Client: {} on {}'.format(mb_bridge.client, mb_bridge.client_unit))\n\n# readout the client registers once manually\n# mb_bridge.read_all_registers()\n\n# start collecting latest RTU client data in thread and TCP data provision\nmb_bridge.collecting_client_data = True\nmb_bridge.provisioning_host_data = True\n\nprint('Run client and host for {} seconds'.format(run_time))\nprint('Collect latest client data every {} seconds'.format(mb_bridge.collection_interval))\nprint('Synchronize Host-Client every {} seconds'.format(mb_bridge.synchronisation_interval))\n\nstart_time = time.time()\nwhile time.time() < (start_time + run_time):\n    try:\n        machine.idle()\n    except KeyboardInterrupt:\n        print('KeyboardInterrupt, stop collection + provisioning after {}'.\n              format(time.time() - start_time))\n        break\n    except Exception as e:\n        print('Exception: {}'.format(e))\n\n# stop collecting latest client data in thread and data provision via TCP\nmb_bridge.collecting_client_data = False\nmb_bridge.provisioning_host_data = False\n\n# wait for 5 more seconds to safely finish the may still running threads\ntime.sleep(5)\n```\n\n### Path Helper\n\nMicroPython does not have an `os.path.exists()` function. This small module\nadds this function.\n\n```python\nfrom be_helpers.path_helper import PathHelper\n\npath = 'registers/modbusRegisters.json'\nresult = PathHelper.exists(path=path)\nprint('File at path \"{}\" does exist: {}'.format(path, result))\n```\n\n### Time Helper\n\n```python\nfrom be_helpers.time_helper import TimeHelper\n\n# set the timezone offset to +2, default is +1\nth = TimeHelper(tz=2)\n\n# sync the RTC with the NTP server (valid network connection required)\nth.sync_time()\n\n# get current timestamp in ISO8601 format\nth.current_timestamp_iso8601\n# >>> '21:23:55 2021-10-04'\n\n# get current hour from RTC\nth.hour\n# >>> 21\n```\n\n### WiFi Helper\n\n```python\nfrom be_helpers.wifi_helper import WifiHelper\n\n# connect to the network 'MyNet' and it's password 'realPassword1'\nresult = WifiHelper.connect(ssid='MyNet', password='realPassword1', timedout=3)\nprint('Connection result is: {}'.format(result))\n\n# create an accesspoint named 'MyAP' with a password 'wpa_wpa2_valid_pw'\nresult = WifiHelper.create_ap(ssid='MyAP', password='wpa_wpa2_valid_pw', channel=10)\nprint('AP creation result is: {}'.format(result))\n\nwh = WifiHelper()\nfound_networks = wh.get_wifi_networks_sorted(scan_if_empty=True)\nprint('Found these networks: {}'.format(found_networks))\n\n# after a scan the networks are available as list of NamedTuple\nstrongest_net = wh.networks[0].ssid\nprint('SSID of strongest network: {}'.format(strongest_net))\n\n# convert dBm (RRSI) to quality index in percent\nquality = WifiHelper.dbm_to_quality(dBm=wh.networks[0].RSSI)\nprint('Quality of strongest network {}: {}%'.format(strongest_net, quality))\n```\n\n<!-- Links -->\n[ref-remote-upy-shell]: https://github.com/dhylands/rshell\n[ref-wifi-helper]: wifi_helper.py\n[ref-be-upy-modbus]: https://github.com/brainelectronics/micropython-modbus\n[ref-sferalabs-exo-sense]: https://github.com/sfera-labs/exo-sense-py-modbus\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brainelectronics/micropython-modules",
    "keywords": "micropython,brainelectronics,modules,library",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-brainelectronics-helpers",
    "package_url": "https://pypi.org/project/micropython-brainelectronics-helpers/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-brainelectronics-helpers/",
    "project_urls": {
      "Bug Reports": "https://github.com/brainelectronics/micropython-modules/issues",
      "Homepage": "https://github.com/brainelectronics/micropython-modules",
      "Source": "https://github.com/brainelectronics/micropython-modules"
    },
    "release_url": "https://pypi.org/project/micropython-brainelectronics-helpers/1.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "MicroPython brainelectronics helpers library",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16608484,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c38b40270998fe172a49027f35e3c735adb42ed45d2695a9455979b6caef948a",
          "md5": "8a9547782408559af77a40d1cc17acf4",
          "sha256": "f28732990595c21e23949d8dee1880e7384c395d261a3c5cc7b31d1f236eb9ad"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a9547782408559af77a40d1cc17acf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 27471,
        "upload_time": "2022-02-24T17:34:04",
        "upload_time_iso_8601": "2022-02-24T17:34:04.477507Z",
        "url": "https://files.pythonhosted.org/packages/c3/8b/40270998fe172a49027f35e3c735adb42ed45d2695a9455979b6caef948a/micropython-brainelectronics-helpers-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36274b0759c698ed89403bba6812318bf33c8275bab29921d84896b390c524de",
          "md5": "07657958445db03b9e20af6cbe275baa",
          "sha256": "885cd3d9176a0f9cf5e6a08d59fd3df017306988ee669c6c085be37a828fbf7b"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07657958445db03b9e20af6cbe275baa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29410,
        "upload_time": "2022-02-25T07:11:33",
        "upload_time_iso_8601": "2022-02-25T07:11:33.663205Z",
        "url": "https://files.pythonhosted.org/packages/36/27/4b0759c698ed89403bba6812318bf33c8275bab29921d84896b390c524de/micropython-brainelectronics-helpers-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "173095a4fb22a68280249062a8fc9b642a0d7dd5efebe3a0ce1a2627285aeb64",
          "md5": "e0f99f68e89aca9694d7c9671fa7b31a",
          "sha256": "808997bdf7233c1250c2b27ba359e1644170d378018f7dc7dfae9a87714e25b5"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e0f99f68e89aca9694d7c9671fa7b31a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29121,
        "upload_time": "2022-02-25T10:17:33",
        "upload_time_iso_8601": "2022-02-25T10:17:33.911763Z",
        "url": "https://files.pythonhosted.org/packages/17/30/95a4fb22a68280249062a8fc9b642a0d7dd5efebe3a0ce1a2627285aeb64/micropython-brainelectronics-helpers-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "079c3ac720ddf97e6bc55cfb125aeabc738a59974d77fcf1dfd76e684ac9035a",
          "md5": "766ffc57974489a1f8f375ff7a8135dd",
          "sha256": "53c11650fe1328e28bf3ee1cb48da23906e822a5982097ca0259e92e29ef128d"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "766ffc57974489a1f8f375ff7a8135dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29307,
        "upload_time": "2022-02-26T14:41:37",
        "upload_time_iso_8601": "2022-02-26T14:41:37.176894Z",
        "url": "https://files.pythonhosted.org/packages/07/9c/3ac720ddf97e6bc55cfb125aeabc738a59974d77fcf1dfd76e684ac9035a/micropython-brainelectronics-helpers-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca8df0da7ff23c746d310e8cd7f3ec2592ef19950d97720c114b744203fe1a0d",
          "md5": "91cf50f29936ccd75e55fa1a1e3bbc43",
          "sha256": "601eab682d9105d74dd6bc33e6ebc66844c2020c21a983c0ed369532432be564"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "91cf50f29936ccd75e55fa1a1e3bbc43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29826,
        "upload_time": "2022-03-07T09:44:41",
        "upload_time_iso_8601": "2022-03-07T09:44:41.576570Z",
        "url": "https://files.pythonhosted.org/packages/ca/8d/f0da7ff23c746d310e8cd7f3ec2592ef19950d97720c114b744203fe1a0d/micropython-brainelectronics-helpers-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c34822fbff262b7fcbdcac205bea3a0668327a85409bb2f1400ab13bc431ecf",
          "md5": "259941ba8c0fbba26ad0561697b4d33f",
          "sha256": "806618df11b73c5bfe3f2be1d9c76b3703c9eebc660caa1ca28f3c0e439255ff"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "259941ba8c0fbba26ad0561697b4d33f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29841,
        "upload_time": "2022-03-07T10:31:34",
        "upload_time_iso_8601": "2022-03-07T10:31:34.300712Z",
        "url": "https://files.pythonhosted.org/packages/6c/34/822fbff262b7fcbdcac205bea3a0668327a85409bb2f1400ab13bc431ecf/micropython-brainelectronics-helpers-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34bc99e170d19833b341198f5e923241e1b3988a8cc0f469e807eeadd1a97caa",
          "md5": "dafaebe7338f5ef19f048264a496722f",
          "sha256": "e7c89a8999315c35f28d845ed7d55f4d1b63b084811de63fcc6284c0b3d440dd"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dafaebe7338f5ef19f048264a496722f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29816,
        "upload_time": "2022-03-11T09:56:09",
        "upload_time_iso_8601": "2022-03-11T09:56:09.681261Z",
        "url": "https://files.pythonhosted.org/packages/34/bc/99e170d19833b341198f5e923241e1b3988a8cc0f469e807eeadd1a97caa/micropython-brainelectronics-helpers-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89fd81b33f64a6cdfc8a5982bafbced02507dd7387e0cf8a793daeb2b1a7a7f9",
          "md5": "d8c7ca69f7474fb7e5747d9e026c2506",
          "sha256": "a69e825dd49d4e1d80c006c672a21c31e9093d32372cdcbdf064c54d6261d5a4"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d8c7ca69f7474fb7e5747d9e026c2506",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29838,
        "upload_time": "2022-03-20T15:25:33",
        "upload_time_iso_8601": "2022-03-20T15:25:33.241705Z",
        "url": "https://files.pythonhosted.org/packages/89/fd/81b33f64a6cdfc8a5982bafbced02507dd7387e0cf8a793daeb2b1a7a7f9/micropython-brainelectronics-helpers-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6ec2874ce955f49368ceacd35625528b434384305b1f500e35b422f56ad82ea",
          "md5": "abe35cd84b3cab7d81f75d3e40022af6",
          "sha256": "fd7686ac96e27efbfe5cb641bc215bc8b1dbe4973818380a285df9b3ba0b75eb"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "abe35cd84b3cab7d81f75d3e40022af6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30083,
        "upload_time": "2022-04-16T11:50:32",
        "upload_time_iso_8601": "2022-04-16T11:50:32.508450Z",
        "url": "https://files.pythonhosted.org/packages/f6/ec/2874ce955f49368ceacd35625528b434384305b1f500e35b422f56ad82ea/micropython-brainelectronics-helpers-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8103db939417245dcc0b6051a9056cb2111a0c9625108a4553d5eecde22b405",
          "md5": "8d80c7ef147057966fa875b53e0bfebc",
          "sha256": "f89cdbcf5a6ad143fa936071b129717c14322a70519be48037e6711f52782331"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d80c7ef147057966fa875b53e0bfebc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30110,
        "upload_time": "2022-05-06T06:50:57",
        "upload_time_iso_8601": "2022-05-06T06:50:57.263164Z",
        "url": "https://files.pythonhosted.org/packages/b8/10/3db939417245dcc0b6051a9056cb2111a0c9625108a4553d5eecde22b405/micropython-brainelectronics-helpers-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78894d0e3033f25ceeec29625abe44aeb0272a6e9aa0f1305a2db40d696a1aa3",
          "md5": "ef379a76e01c9dbeb72a683479c4300b",
          "sha256": "5ed87630f9faaa7e9724a64d52cd43e6e25e005966cbee6c530887ac543c1ffd"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef379a76e01c9dbeb72a683479c4300b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29926,
        "upload_time": "2022-11-03T14:06:10",
        "upload_time_iso_8601": "2022-11-03T14:06:10.611026Z",
        "url": "https://files.pythonhosted.org/packages/78/89/4d0e3033f25ceeec29625abe44aeb0272a6e9aa0f1305a2db40d696a1aa3/micropython-brainelectronics-helpers-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7781226698f8f0beb917dbff7adedb09bd8b082660030afcc8dc5f48ce24220",
          "md5": "7a1634d843adef849f961eed2c2f0b1b",
          "sha256": "c005caf8977a4d4b99def4df7217bf294abf33e7731988cf69f582ac6db71a6b"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a1634d843adef849f961eed2c2f0b1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29974,
        "upload_time": "2022-12-11T11:36:23",
        "upload_time_iso_8601": "2022-12-11T11:36:23.193560Z",
        "url": "https://files.pythonhosted.org/packages/c7/78/1226698f8f0beb917dbff7adedb09bd8b082660030afcc8dc5f48ce24220/micropython-brainelectronics-helpers-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9de78a2288124c6958fe2aecb2b9f2e06cb91a3193abf1f66fce73494995cca8",
          "md5": "7967020296672d996ee5bc282130820c",
          "sha256": "3a39c40519b835d63d687d84d318a487e39bcd30fe00b1130e2c5ad945b3a7bb"
        },
        "downloads": -1,
        "filename": "micropython-brainelectronics-helpers-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7967020296672d996ee5bc282130820c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30212,
        "upload_time": "2023-01-29T13:02:03",
        "upload_time_iso_8601": "2023-01-29T13:02:03.928817Z",
        "url": "https://files.pythonhosted.org/packages/9d/e7/8a2288124c6958fe2aecb2b9f2e06cb91a3193abf1f66fce73494995cca8/micropython-brainelectronics-helpers-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9de78a2288124c6958fe2aecb2b9f2e06cb91a3193abf1f66fce73494995cca8",
        "md5": "7967020296672d996ee5bc282130820c",
        "sha256": "3a39c40519b835d63d687d84d318a487e39bcd30fe00b1130e2c5ad945b3a7bb"
      },
      "downloads": -1,
      "filename": "micropython-brainelectronics-helpers-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7967020296672d996ee5bc282130820c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30212,
      "upload_time": "2023-01-29T13:02:03",
      "upload_time_iso_8601": "2023-01-29T13:02:03.928817Z",
      "url": "https://files.pythonhosted.org/packages/9d/e7/8a2288124c6958fe2aecb2b9f2e06cb91a3193abf1f66fce73494995cca8/micropython-brainelectronics-helpers-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}