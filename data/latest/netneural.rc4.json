{
  "info": {
    "author": "fachter (Felix)",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Neural Network Framework\n\nA project done at the university JMU WÃ¼rzburg by [fachter](https://github.com/fachter) together with [marja-w](https://github.com/marja-w) and [mamadfrhi](https://github.com/mamadfrhi)\n\nThe package is being used by the remaining implementation of that project in another repository \ncalled [gesture-detection-neural-network](https://github.com/fachter/gesture-detection-neural-network)\nand further usage of this package can be seen in the implementation\n\nThere are two jupyter notebooks explaining how to use the package in its [repository](https://github.com/fachter/neural-network-framework)\n\n### Project by Felix Achter, Marja Wahl, Mohammad Farrahi\nThis repository is designated to creating, training, and using a neural network. There are five main tasks you can\ntackle:\n- **Data Preprocessing**: get the data ready for being trained on\n- **Creating the Network**: create your network by using information of your training data\n- **Training the Network**: train the resulting network by optionally choosing number of iterations, learning rate, and \noptionally optimizer\n- **Evaluation**: evaluate the trained network with metrics like accuracy and F1 score\n- **Predicting**: use the final network for predicting on unseen data\n\n## Data Preprocessing\n### Scaling\n \tYou don't have to scale your data in advance. \n    Creating a new NeuralNetwork instance, the Standard Scaler is set as the default scaler.\n    You can read more about creating a NeuralNetwork instance in section \"Creating the Network\".\n    \nThe [feature_scaling.py](netneural/network/feature_scaling.py) file provides two classes for scaling your data: the StandardScaler and\nthe NormalScaler class. You can scale your data, before instantiating a neural network, by creating an instance of either\nclass, fitting the scaler to your data, and then transform your data. The data can be transformed back by using the\ninverse_transform() function.\n\n```\nfrom netneural.network.feature_scaling import StandardScaler\n\nstandard_scaler = StandardScaler()\nstandard_scaler.fit(X)  # X being the training data\nX_scaled = standard_scaler.transform(X)\nX = standard_scaler.inverse_transform(X_scaled)  # returns original X\n``` \n\nDon't forget to set the right scaler, if you did not use the default StandardScaler, when creating a NeuralNetwork \ninstance:\n\n```\nfrom netneural.network.feature_scaling import NormalScaler\n\nnormal_scaler = NormalScaler()\nnormal_scaler.fit(X)  # X being the training data\nX_scaled = normal_scaler.transform(X)\n\nnn = NeuralNetwork(shape, scaler='normal')\n```\n\n### Encoding\n    You don't have to encode your target values in advance.\n    If no encoder is handed over when instantiating a NeuralNetwork, the data is encoded, if necessary.\n    You can read more about creating a NeuralNetwork instance in section \"Creating the Network\".\n\nThe [one_hot_encoder.py](netneural/network/one_hot_encoder.py) can be used for creating your own OneHotEncoder instance and encoding\nmulticlass labels into one hot encoded label lists.\n\n```\nfrom netneural.network.one_hot_encoder import OneHotEncoder\n\nencoder = OneHotEncoder()\ny_one_hot = encoder.encode(y)  # y being the target values with multiple labels\nunique_labels = encoder.unique_labels  # get unique labels found by encoder\n```\n\nDon't forget to pass the created encoder to a NeuralNetwork instance, if you encode the labels in advance:\n\n```\nnn = NeuralNetwork(shape, encoder=encoder)\n```\n\n### Training Test Split\nIn order to properly analyse your network's training, you will need to split the data into a training and a test set.\nYou can do that by the provided function `train_test_split()`in [data_loader.py](netneural/session/data_loader.py):\n\n```\n# take only the first four outputs, because no validation set is produced\nX_train, y_train, X_test, y_test = train_test_split(X, y, train_per=0.8, test_per=0.2, randomized=True)[:4]\n```\n\nYou can also divide your data into training, test, and validation set:\n\n```\nX_train, y_train, X_test, y_test, X_val, y_val = train_test_split(X, y, train_per=0.8, test_per=0.1, valid_per=0.1)\n```\n\n### Principal Component Analysis (PCA)\nAdditionally, you can perform PCA using methods provided in [pca.py](netneural/pca/pca.py). \n\nIf you do not know anything about PCA you can simply reduce your\nfeature count by specifying how much variance of data you want to cover with the remaining features:\n\n```\nfrom netneural.pca.pca import PCA\n\npca = PCA()\nX_pca = pca.pca(X, var_per=0.99)\n```\n\nIf you want to directly specify the number of desired features, you can also do so:\n\n```\nX_pca_10 = pca.pca(X, number_pcs=10)\n```\n\nYou can also specify both, where `number_pcs` would act like a maximum for the returned constructed features:\n\n```\nX_pca = pca.pca(X, var_per=0.99, number_pcs=10)  # returns 10 principal components, if more are needed for covering 99% of variance\n```\n\nYou can also directly work with eigenvectors and eigenvalues:\n\n```\neigenvectors, eigenvalues = pca.get_eigenvectors_and_values(X)\n\n# gets matrix with 'rank' of every attribute in every principal component\nordered_attributes_matrix = pca.analyze_eigenvectors(eigenvectors, attributes)  # attributes is list of original attributes\n\n# gets a list of the original attributes, ordered by its position in each eigenvector\nordered_attributes = pca.compute_order_attributes(ordered_attributes_matrix)\n\n# returns the number of principal components needed for covering the input percentage\nn_pc = pca.explained_variance(eigenvalues, 0.99, plots=True)  # if plots is True, plots variance covered per n principal components\n\nX_pca = pca.get_n_dimensions(X, n_pc, eigenvectors)\n```\n\n## Creating the Network\n\nFor creating the network, you need to create a new instance of the NeuralNetwork class, provided in [nn.py](netneural/network/nn.py).\nYou have to set several parameters when instantiating.\n\n- **Activation Function**: you can choose between sigmoid, tanh, and relu activation\n- **Architecture**: you will need to provide the number of neurons per layer\n- **Weigths**: you don't have to specifiy weights, but you can do so by passing a list of lists, each containing weights\nfor each layer\n\n```\nfrom netneural.network.nn import NeuralNetwork\n\nshape = (input_features, 2, 2, output_classes)  # variables store the number of input features/output classes\nnn = NeuralNetwork(shape, activation_function='sigmoid')  # uses randomly assigned weights\n```\n\nIf you want to train a neural network for regression, you will have to set the `regression` parameter to true:\n\n```\nnn = NeuralNetwork(shape, regression=True)\n```\n\n## Training the Network\nTraining the network requires several hyperparameters you have to set. The `train()` function of the NeuralNetwork class\ntakes severable variables in order to define them:\n\n- **Iterations**: choose how many epochs the neural network will train for\n- **Learning Rate**: decide on the learning rate for training\n- **Test Data**: you have the choice of handing over a test data set in order to receive feedback about the evaluation of\nthe network on this data set \n- **Optimizer**: you can choose between the default gradient descent or the Adam optimizer\n- **Cost function**: the network decides on the cost function on its own, whether your last layer has one or multiple nodes,\nit uses the Mean Squared Error function or Cross Entropy (with Softmax)\n- **Batch Size**: if a batch size is set, the model trains batches of the training data of this size every iteration, it \nupdates its weights after training each batch, and it sees each batch during one iteration. Each iteration, the training \nexamples are randomly assigned to a batch. If the batch size is not given, the model will normally train on all the training\ndata per one iteration\n- **Plotting**: if the `plots` variable is set to True, the function will plot the error, accuracy, and F1 score on training\nand eventually test data set after training\n- **Encode**: if you did not encode your data yet (multiclass classification) and did not hand over an encoder during the\ncreation of the neural network, you need to set this parameter to true, if your multiclass labels are not encoded yet\n\nThe function returns the training history on either the training data set or the test data set, which can later be used\nfor analyzing and visualizing.\n\n```\nf1_history, acc_history, err_history = nn.train(X, y, 100, 0.1)  # trains with default settings (optimizer=gradient descent, no test data, no plots)\n```\n```\nf1_history, acc_history, err_history = nn.train(X, y, 100, 0.1, X_test, y_test, optimizer='adam', batch_size=500, plots=True)  # trains while evaluating on test set, uses Adam optimizer, uses batches, plots results\n```\n\nFor the format of data sets applies:\n- the data matrix (X) should be formatted data points x features\n- the target values (y) should be formatted class x data points (one row for binary classification)\n\nWhen training a regression neural network, the only metric output afterwards is the history of the Mean Squared Error (MSE):\n\n```\nerror_history = nn.train(X, y, 100, 0.1)\n```\n\n### Training Sessions\nThe functions provided in the [session_util.py](netneural/session/nn_session_util.py) can be used for saving and loading a trained network.\nAlong with the network the function `save_session()` also takes other parameters, like the unique labels, PCA object, \ntraining history, training data, iterations, and learning rate, in order to easily reenact the documented session.\n\n```\nfrom netneural.session.nn_session_util import save_session\n\nlearning_rate = 0.1\niterations = 100\nf1_history, acc_history, err_history = nn.train(X, y, iterations, learning_rate)  # we train a neural network\n\n# save_session stores a .pkl file with a name consisting of current time and the final f1 score\nsave_session(nn, nn.encoder.unique_labels, pca, f1_history[-1])\n```\n\nAfter the file is stored, it can be used to again load the neural network:\n\n```\nfrom netneural.session.nn_session_util import load_from_config\n\nconfig_file = \"config_90_f1_2022-03-25 14-56-20.json\"  # path to the config file\nnn, pca, f1_history, learning_rate, X_train, y_train, X_test, y_test = load_session_from_config(config_file)\n```\n\nYou can also use these functions for a regression neural network and if you did not use PCA:\n\n```\nsave_session(nn, learning_rate, X, y, X_test, y_test, iterations, err_history)  # saves file in 'config_file'\n\n# returns None for values that weren't set, like pca and f1_history\nnn, pca = load_from_config(config_file)\n```\n\n## Evaluation\n### Metrics\nFor evaluating a trained model intrinsic metrics can be calculated using the methods provided in [metrics.py](netneural/network/metrics.py).\nThese include accuracy and the F1 score, which essentially compare the predictions of the model `h` to the ground truth `y`.\nThe output differs, depending if binary or multiclass classification is demanded.\n\n```\nfrom netneural.network.metrics import get_accuracy, get_f1_score\n\naccuracy_per_class, accuracy_mc = get_accuracy(h_multiclass, y_multiclass)  # additionally returns accuracy per class\naccuracy = get_accuracy(h, y)  \n\nf1_score_per_class, f1_score_mc = get_f1_score(h_multiclass, y_multiclass)\nf1_score = get_f1_score(h, y)\n```\n\nFor the format of the input values it is required that the rows stand for the number of classes.\n\nThe error can be calculated using the `get_error()` function of the NeuralNetwork class:\n\n```\nerrors = nn.get_error(h,y)  # returns error for every data point in a list\nerror = errors.mean()  # final error\n```\n\nWhen using a regression neural network, you don't have to take the mean over the error. We use the MSE, which will already\noutput the mean over the errors:\n\n```\nerror = nn.get_error(h,y)  # for nn with regression=True\n```\n\n## Plotting\nFor making plotting a little bit easier, two functions are introduced in the [plot_lib.py](netneural/network/plot_lib.py) script. One that \nplots a line and one function that creates a scatter plot.\n\n```\nfrom netneural.network.plot_lib import plot_line, plot_scatter\n\nplot_line(list_to_plot, x_label, y_label, title)  # plots a line\nplot_scatter(x_data, y_data, colors, x_label, y_label, title):  # creates scatter plot\n```\n\n## Predicting\nFinally, we can use the NeuralNetwork instance for predicting values. This can be done using the `predict()` provided in\nthe NeuralNetwork class:\n\n```\npredictions = nn.predict(input_values)\n```\n\nThe input values of this function need to be a `numpy array`, also if it is only one value.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,neural network,deep learning,nn,machine learning,neural net",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netneural",
    "package_url": "https://pypi.org/project/netneural/",
    "platform": null,
    "project_url": "https://pypi.org/project/netneural/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/netneural/0.0.5/",
    "requires_dist": [
      "numpy",
      "pandas",
      "pyyaml",
      "matplotlib",
      "jupyter",
      "tqdm",
      "python-mnist",
      "seaborn"
    ],
    "requires_python": "",
    "summary": "Neural Network package",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13479929,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "323078108dcbedf0a9ac5438d483903db78458f427e6357a4c42d4bc666961d7",
          "md5": "fb083d33af1a185e887a7bc5790ea4b9",
          "sha256": "07d003d47fb066b048b9091da53e0e28e6d6be37cbfc101c102405a2c81bbeac"
        },
        "downloads": -1,
        "filename": "netneural-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb083d33af1a185e887a7bc5790ea4b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17247,
        "upload_time": "2022-04-11T12:15:14",
        "upload_time_iso_8601": "2022-04-11T12:15:14.672110Z",
        "url": "https://files.pythonhosted.org/packages/32/30/78108dcbedf0a9ac5438d483903db78458f427e6357a4c42d4bc666961d7/netneural-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd2199c26977a0ab71b755dc13941764b32a189a20699cf57a6f2c4b14e77417",
          "md5": "ffedc97311d682c40f99f29938920721",
          "sha256": "7d46a33619f0445123161f83c880f2ea6c6953f914fdc372b707fc7f39c3a3c8"
        },
        "downloads": -1,
        "filename": "netneural-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ffedc97311d682c40f99f29938920721",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18782,
        "upload_time": "2022-04-11T12:15:16",
        "upload_time_iso_8601": "2022-04-11T12:15:16.423103Z",
        "url": "https://files.pythonhosted.org/packages/fd/21/99c26977a0ab71b755dc13941764b32a189a20699cf57a6f2c4b14e77417/netneural-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77cb512f673ddf733f30f834a6fece223d13e7424bb3e961db31d6ae91fac8bb",
          "md5": "3abdbb5b840b54d2361a254b6a5e1349",
          "sha256": "a2542a5f0b49b7231cee350631a01997513cee2f91ad53ac8a55e31ee4711752"
        },
        "downloads": -1,
        "filename": "netneural-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3abdbb5b840b54d2361a254b6a5e1349",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22298,
        "upload_time": "2022-04-11T14:00:44",
        "upload_time_iso_8601": "2022-04-11T14:00:44.489947Z",
        "url": "https://files.pythonhosted.org/packages/77/cb/512f673ddf733f30f834a6fece223d13e7424bb3e961db31d6ae91fac8bb/netneural-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ac74f507dbd9f42958b911744d3322e221d7ddafcf0b0204d0d23ffbaf779c0",
          "md5": "1f2bbc5b8bb9aa4a40e1f21fded6b27f",
          "sha256": "243a96a1b2ec8c3cb73e90d23af0c7021578658315731f8f7caacee927a0e869"
        },
        "downloads": -1,
        "filename": "netneural-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1f2bbc5b8bb9aa4a40e1f21fded6b27f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23396,
        "upload_time": "2022-04-11T14:00:46",
        "upload_time_iso_8601": "2022-04-11T14:00:46.499513Z",
        "url": "https://files.pythonhosted.org/packages/4a/c7/4f507dbd9f42958b911744d3322e221d7ddafcf0b0204d0d23ffbaf779c0/netneural-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01782668cddd23aef4655f9822964f146626ae2f651b3f58b5cd7f2327906d00",
          "md5": "5f5fd3f2fcdab589bd5686f83ff2572b",
          "sha256": "157d75aa3dce25da2f4800f0001e327004086553ad382203551b0e612547bdfa"
        },
        "downloads": -1,
        "filename": "netneural-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f5fd3f2fcdab589bd5686f83ff2572b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22289,
        "upload_time": "2022-04-11T15:57:29",
        "upload_time_iso_8601": "2022-04-11T15:57:29.144206Z",
        "url": "https://files.pythonhosted.org/packages/01/78/2668cddd23aef4655f9822964f146626ae2f651b3f58b5cd7f2327906d00/netneural-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aac7b802c2e22b5e7650f2cd96964a3e11f8d3709509c6b402b44f76fe5bf094",
          "md5": "b4d023b53ad64297c2b55695d8771f22",
          "sha256": "d694ef9b0a3b64bc4f881234222777f78168fc61ea7e8df45e21b34fe75f4212"
        },
        "downloads": -1,
        "filename": "netneural-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4d023b53ad64297c2b55695d8771f22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23297,
        "upload_time": "2022-04-11T15:57:31",
        "upload_time_iso_8601": "2022-04-11T15:57:31.805061Z",
        "url": "https://files.pythonhosted.org/packages/aa/c7/b802c2e22b5e7650f2cd96964a3e11f8d3709509c6b402b44f76fe5bf094/netneural-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dc5355cffb735b7165f1004dd17b217b1464e76304ffe502301fe0e9249ee3a",
          "md5": "a519747b5c9b4de34d1c915274d4129e",
          "sha256": "e1c6eca5a206b9d4499aafa917eda5789ec4ca5c44faf47d4186e7be729ad30e"
        },
        "downloads": -1,
        "filename": "netneural-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a519747b5c9b4de34d1c915274d4129e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22327,
        "upload_time": "2022-04-11T16:21:05",
        "upload_time_iso_8601": "2022-04-11T16:21:05.670555Z",
        "url": "https://files.pythonhosted.org/packages/7d/c5/355cffb735b7165f1004dd17b217b1464e76304ffe502301fe0e9249ee3a/netneural-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9d500b8787a40bab51a55d65dd94d6c38af96d566e0838975af2666624c9455",
          "md5": "5d387bdd18c8277330378654cd81cb8d",
          "sha256": "cc49d8df12dbde3bc256a6550f657000ef14b15ca5d9919e332fdc23eb859924"
        },
        "downloads": -1,
        "filename": "netneural-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5d387bdd18c8277330378654cd81cb8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23408,
        "upload_time": "2022-04-11T16:21:09",
        "upload_time_iso_8601": "2022-04-11T16:21:09.056924Z",
        "url": "https://files.pythonhosted.org/packages/f9/d5/00b8787a40bab51a55d65dd94d6c38af96d566e0838975af2666624c9455/netneural-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7dc5355cffb735b7165f1004dd17b217b1464e76304ffe502301fe0e9249ee3a",
        "md5": "a519747b5c9b4de34d1c915274d4129e",
        "sha256": "e1c6eca5a206b9d4499aafa917eda5789ec4ca5c44faf47d4186e7be729ad30e"
      },
      "downloads": -1,
      "filename": "netneural-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a519747b5c9b4de34d1c915274d4129e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22327,
      "upload_time": "2022-04-11T16:21:05",
      "upload_time_iso_8601": "2022-04-11T16:21:05.670555Z",
      "url": "https://files.pythonhosted.org/packages/7d/c5/355cffb735b7165f1004dd17b217b1464e76304ffe502301fe0e9249ee3a/netneural-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9d500b8787a40bab51a55d65dd94d6c38af96d566e0838975af2666624c9455",
        "md5": "5d387bdd18c8277330378654cd81cb8d",
        "sha256": "cc49d8df12dbde3bc256a6550f657000ef14b15ca5d9919e332fdc23eb859924"
      },
      "downloads": -1,
      "filename": "netneural-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5d387bdd18c8277330378654cd81cb8d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23408,
      "upload_time": "2022-04-11T16:21:09",
      "upload_time_iso_8601": "2022-04-11T16:21:09.056924Z",
      "url": "https://files.pythonhosted.org/packages/f9/d5/00b8787a40bab51a55d65dd94d6c38af96d566e0838975af2666624c9455/netneural-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}