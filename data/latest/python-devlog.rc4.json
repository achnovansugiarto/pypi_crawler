{
  "info": {
    "author": "めがねこ",
    "author_email": "evictory91@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![GitHub latest version](https://img.shields.io/github/v/release/MeGaNeKoS/devlog?style=for-the-badge)](https://github.com/MeGaNeKoS/devlog/releases/latest)\n[![Gitbug publish badge](https://img.shields.io/github/workflow/status/MeGaNeKoS/devlog/Tests?label=Test&style=for-the-badge)](https://github.com/MeGaNeKoS/devlog/actions/workflows/python-test.yml)\n[![Gitbug publish badge](https://img.shields.io/github/workflow/status/MeGaNeKoS/devlog/Publish%20Python%20%F0%9F%90%8D%20distributions%20%F0%9F%93%A6%20to%20PyPI%20and%20TestPyPI?label=Deployment&style=for-the-badge)](https://github.com/MeGaNeKoS/devlog/actions/workflows/python-publish.yml)\n![Size](https://img.shields.io/github/repo-size/MeGaNeKoS/devlog?style=for-the-badge)\n![License](https://img.shields.io/github/license/MeGaNeKoS/devlog?style=for-the-badge)\n\ndevlog\n=====\n\nNo more logging in your code business logic with python decorators.\n\nLogging is a very powerful tool for debugging and monitoring your code. But if you are often ommitting logging\nstatements, you will quickly find yourself overcrowded with logging statements.\n\nFortunately, you could avoid this by using the python decorator. This library provide easy logging for your code without\nstealing readability and maintainability. Furthermore, it also provides stack trace to get full local variable on the\nfunction.\n\nHow to use:\n-----------\nTo use this library, you just need to add the decorator to your function. Depending on when you want to log, you can use\nthe decorator as below:\n\n```python\nimport logging\n\nfrom devlog import log_on_start, log_on_end, log_on_error\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\n@log_on_start\n@log_on_end\ndef test_1(a, b):\n    return a + b\n\n\n@log_on_error\ndef test_2(a, b):\n    return a / b\n\n\nif __name__ == '__main__':\n    test_1(1, b=2)\n    # INFO:__main__:Start func test_1 with args (1,), kwargs {'b': 2}\n    # INFO:__main__:Successfully run func test_1 with args (1,), kwargs {'b': 2}\n\n    test_2(\"abc\", \"def\")\n    # ERROR:__main__:Error in func test_2 with args ('abc', 'def'), kwargs {}\n    # \tunsupported operand type(s) for /: 'str' and 'str'.\n```\n\nWhat devlog can do for you\n---------------------------\n\n### Decorators\n\ndevlog provides three different decorators:\n\n- LogOnStart: Log when the function is called.\n- LogOnEnd: Log when the function is finished.\n- LogOnError: Log when the function is finished with error.\n\nUse variables in messages\n=========================\nThe message given to decorators are treated as a format string which takes the function arguments as the format\narguments.\n\nThe following example shows how to use variables in messages:\n\n```python\nimport logging\n\nfrom devlog import log_on_start\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\n@log_on_start(logging.INFO, 'Start func {callable.__name__} with args {args}, kwargs {kwargs}')\ndef hello(name):\n    print(\"Hello, {}\".format(name))\n\n\nif __name__ == \"__main__\":\n    hello(\"World\")\n```\n\nWhich will print:\n```INFO:__main__:Start func hello with args ('World',), kwargs {}```\n\n### Documentation\n\n#### format variables\n\nThe following variables are available in the format string:\n\n| Default variable name | Description                                             | LogOnStart | LogOnEnd | LogOnError |\n|-----------------------|---------------------------------------------------------|------------|----------|------------|\n| callable              | The function object                                     | Yes        | Yes      | Yes        |\n| *args/kwargs*         | The arguments, key arguments passed to the function     | Yes        | Yes      | Yes        |\n| result                | The return value of the function                        | No         | Yes      | No         |\n| error                 | The error object if the function is finished with error | No         | No       | Yes        |\n\n#### base arguments\n\nAvailable arguments in all decorators are:\n\n| Arguments                | Description                                                                                                                                                                                   |\n|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| logger                   | The logger object. If no logger is given, the devlog will create a logger object with the name of the module where the function is defined. Default is `logging.getLogger(callable.__name__)` |\n| handler                  | A custom log handler object. Only available if no logger object is given,                                                                                                                     |\n| args_kwargs              | Set true if the message format using args, kwargs format or false to use function parameter name format. Default `True`                                                                       |\n| callable_format_variable | The format variable to use for callable. Default is `callable`                                                                                                                                |\n| trace_stack              | Set to True if you want to get the full stack trace. Default is `False` or `capture_local`                                                                                                    |\n| capture_locals           | Set to True if you want to get the local variable of the function. Default is `False` (or `trace_stack` on log_on_error decorator)                                                            |\n| include_decorator        | Set to True if you want to include the devlog libray on the stack. Default is `False`                                                                                                         |\n\n#### log_on_start\n\n| Arguments | Description                                                                                                                                                                 |\n|-----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| level     | The level of the log message. Default is `logging.INFO`                                                                                                                     |\n| message   | The message to log. Could using {args} {kwargs} or function parameter name but not both. <br/>Default is `Start func {callable.__name__} with args {args}, kwargs {kwargs}` |\n\n#### log_on_end\n\n| Arguments              | Description                                                                                                                                                                            |\n|------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| level                  | The level of the log message. Default is `logging.INFO`                                                                                                                                |\n| message                | The message to log. Could using {args} {kwargs} or function parameter name but not both. <br/>Default is `Successfully run func {callable.__name__} with args {args}, kwargs {kwargs}` |\n| result_format_variable | The format variable to use for reference the return from callable. Default is `result`                                                                                                 |\n\n#### log_on_error\n\n| Arguments                 | Description                                                                                                                                                                            |\n|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| level                     | The level of the log message. Default is `logging.ERROR`                                                                                                                               |\n| message                   | The message to log. Could using {args} {kwargs} or function parameter name but not both. <br/>Default is `Successfully run func {callable.__name__} with args {args}, kwargs {kwargs}` |\n| on_exceptions             | A tuple containing exception classes or a single exception, which should get caught and trigger the logging. Default is `tuple()` (All exception will get caught)                      |\n| reraise                   | Control whether the exception should be reraised after logging. Default is `True`                                                                                                      | \n| exception_format_variable | The format variable to use for reference the exception raised in callable. Default is `error`                                                                                          |\n\n### Extras\n\n#### Stack trace\n\nThe stack trace configuration.\n\n| method                   | Description                                                                                                                                        |\n|--------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| set_stack_start_frames   | The number of frames to skip at the start (positive value). Default is `0`                                                                         |\n| set_stack_removal_frames | The number of frames to remove from the back of the stack trace (positive value). Default is `6` (the last 6 frame usually from the devlog module) |\n\n#### Custom exception hook\n\nOverride the default exception hook with a custom function.\n\n```python\nimport devlog\n\ndevlog.system_excepthook_overwrite()  # Overwrite the default exception hook\n```\n\nThis will replace the sys.excepthook with the devlog.excepthook.\n\n| Arguments | Description                                                   |\n|-----------|---------------------------------------------------------------|\n| out_file  | The path to the file to write the log. Default is `crash.log` |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MeGaNeKoS/devlog",
    "keywords": "clean code,decorators,logging",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-devlog",
    "package_url": "https://pypi.org/project/python-devlog/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-devlog/",
    "project_urls": {
      "Homepage": "https://github.com/MeGaNeKoS/devlog"
    },
    "release_url": "https://pypi.org/project/python-devlog/1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "No more logging in your code business logic with decorators",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14109115,
  "releases": {
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b176f6b3106b82eaca3b4a938e89d40f68c517f1f73506cb5f5e6e4fa86e05c",
          "md5": "9be17d75a91f7307d148c7790fa94fbd",
          "sha256": "43b39d15736579cf606e6a9ce80afad9d30bd7ea43716536be6a746c9d3765be"
        },
        "downloads": -1,
        "filename": "python_devlog-1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9be17d75a91f7307d148c7790fa94fbd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8200,
        "upload_time": "2022-05-21T07:49:25",
        "upload_time_iso_8601": "2022-05-21T07:49:25.427352Z",
        "url": "https://files.pythonhosted.org/packages/8b/17/6f6b3106b82eaca3b4a938e89d40f68c517f1f73506cb5f5e6e4fa86e05c/python_devlog-1.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d430b0781fbdfda0558919e74419c7419b2ca45d64807befcb1f8d890d12ca5",
          "md5": "cda7729ce77c34304c1a10564ae85908",
          "sha256": "50294c244664618799028bad635181ce48d2b225dfd594ce2542c3cc60cbfc37"
        },
        "downloads": -1,
        "filename": "python-devlog-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "cda7729ce77c34304c1a10564ae85908",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9264,
        "upload_time": "2022-05-21T07:49:27",
        "upload_time_iso_8601": "2022-05-21T07:49:27.132887Z",
        "url": "https://files.pythonhosted.org/packages/2d/43/0b0781fbdfda0558919e74419c7419b2ca45d64807befcb1f8d890d12ca5/python-devlog-1.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74e6c93f114afec0e906a1b3e0ce9d3af04ac6f66df3815aa70e33093f2884db",
          "md5": "cfd35e5a690df33ae103374a6fb99db7",
          "sha256": "43f94de3845c3dc9aedf8f0149eec8a6b25969573fb9f1b9d6fafc6b430de052"
        },
        "downloads": -1,
        "filename": "python_devlog-1.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfd35e5a690df33ae103374a6fb99db7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8320,
        "upload_time": "2022-05-21T12:34:02",
        "upload_time_iso_8601": "2022-05-21T12:34:02.142288Z",
        "url": "https://files.pythonhosted.org/packages/74/e6/c93f114afec0e906a1b3e0ce9d3af04ac6f66df3815aa70e33093f2884db/python_devlog-1.0b2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a9d36a036f1713be9a37fc0780629dd706d82e33a4c6934c14e2864dbd22bef",
          "md5": "f1ff2e69b1ae57f91d993c8a32ad209f",
          "sha256": "2111f019502441ab45ea3e9dad4fb26b4f3976a53480e61fbe68f7da42412a92"
        },
        "downloads": -1,
        "filename": "python-devlog-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "f1ff2e69b1ae57f91d993c8a32ad209f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9356,
        "upload_time": "2022-05-21T12:34:03",
        "upload_time_iso_8601": "2022-05-21T12:34:03.270499Z",
        "url": "https://files.pythonhosted.org/packages/3a/9d/36a036f1713be9a37fc0780629dd706d82e33a4c6934c14e2864dbd22bef/python-devlog-1.0b2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f12bf6892d3a388e9c1547e4af55f6bd04a32959e78384803e3c437ded336b8e",
          "md5": "db16ac0139eab6c7c559df59c8914ec9",
          "sha256": "a0f5a6ce2939c143a641e7bba4c0847ca2c45ed2de9ba84e026b89efee41ac87"
        },
        "downloads": -1,
        "filename": "python_devlog-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db16ac0139eab6c7c559df59c8914ec9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8543,
        "upload_time": "2022-06-08T23:29:54",
        "upload_time_iso_8601": "2022-06-08T23:29:54.855092Z",
        "url": "https://files.pythonhosted.org/packages/f1/2b/f6892d3a388e9c1547e4af55f6bd04a32959e78384803e3c437ded336b8e/python_devlog-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6ddfe4f96ab027f2e4d96803271f50e4795ebb9959462cc012902fd5afcc764",
          "md5": "25cfbe9b5a8fd35e4fd46d68c6496e5d",
          "sha256": "d7cc5b78f18579a9d0e8dc3524f37059c290733fb47317666886e40ea101ee77"
        },
        "downloads": -1,
        "filename": "python-devlog-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25cfbe9b5a8fd35e4fd46d68c6496e5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10028,
        "upload_time": "2022-06-08T23:29:56",
        "upload_time_iso_8601": "2022-06-08T23:29:56.342588Z",
        "url": "https://files.pythonhosted.org/packages/b6/dd/fe4f96ab027f2e4d96803271f50e4795ebb9959462cc012902fd5afcc764/python-devlog-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb77eafc86609a310caa53112ba2a47eca9f41a94dcefe23f5a9b8fb5718177",
          "md5": "9b91cdbd8ffc7db8f52e67f7b9cf12cf",
          "sha256": "0341740edc2bc96e6d9b49dfb3313d4cd768404f2e1180a4ae4feeb20fbfc5a8"
        },
        "downloads": -1,
        "filename": "python_devlog-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b91cdbd8ffc7db8f52e67f7b9cf12cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8064,
        "upload_time": "2022-06-12T21:39:27",
        "upload_time_iso_8601": "2022-06-12T21:39:27.856313Z",
        "url": "https://files.pythonhosted.org/packages/fc/b7/7eafc86609a310caa53112ba2a47eca9f41a94dcefe23f5a9b8fb5718177/python_devlog-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "514721594d005ba50ce84f506981ee6eebbd41df490500488bff7763279f779a",
          "md5": "104bc8d08ba6d54579766d2b22dc2cfc",
          "sha256": "281393495a11ab8365fa6364d4e1b56338f8577e14f7eeb134bf2d41d88a1c48"
        },
        "downloads": -1,
        "filename": "python-devlog-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "104bc8d08ba6d54579766d2b22dc2cfc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9839,
        "upload_time": "2022-06-12T21:39:29",
        "upload_time_iso_8601": "2022-06-12T21:39:29.347093Z",
        "url": "https://files.pythonhosted.org/packages/51/47/21594d005ba50ce84f506981ee6eebbd41df490500488bff7763279f779a/python-devlog-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcb77eafc86609a310caa53112ba2a47eca9f41a94dcefe23f5a9b8fb5718177",
        "md5": "9b91cdbd8ffc7db8f52e67f7b9cf12cf",
        "sha256": "0341740edc2bc96e6d9b49dfb3313d4cd768404f2e1180a4ae4feeb20fbfc5a8"
      },
      "downloads": -1,
      "filename": "python_devlog-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b91cdbd8ffc7db8f52e67f7b9cf12cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8064,
      "upload_time": "2022-06-12T21:39:27",
      "upload_time_iso_8601": "2022-06-12T21:39:27.856313Z",
      "url": "https://files.pythonhosted.org/packages/fc/b7/7eafc86609a310caa53112ba2a47eca9f41a94dcefe23f5a9b8fb5718177/python_devlog-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "514721594d005ba50ce84f506981ee6eebbd41df490500488bff7763279f779a",
        "md5": "104bc8d08ba6d54579766d2b22dc2cfc",
        "sha256": "281393495a11ab8365fa6364d4e1b56338f8577e14f7eeb134bf2d41d88a1c48"
      },
      "downloads": -1,
      "filename": "python-devlog-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "104bc8d08ba6d54579766d2b22dc2cfc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9839,
      "upload_time": "2022-06-12T21:39:29",
      "upload_time_iso_8601": "2022-06-12T21:39:29.347093Z",
      "url": "https://files.pythonhosted.org/packages/51/47/21594d005ba50ce84f506981ee6eebbd41df490500488bff7763279f779a/python-devlog-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}