{
  "info": {
    "author": "Thiago Teixeira",
    "author_email": "me@thiagot.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# jsbuilder â€” convert Python code to JavaScript strings\n\nJust annotate a Python function with `@js` and then call `str()` on it to get\na fully-working JavaScript version of that function. Why? _Because why not._\n\n(If you like this, check out [htbuild](https://github.com/tvst/htbuild). It's the\nHTML equivalent of jsbuilder: an HTML string builder for Python folks who don't\nlike templating languages.)\n\n## Installation\n\nJust PIP it!\n\n```py\npip install jsbuilder\n```\n\n## Simple Example\n\n```py\nfrom jsbuilder import js\n\n@js\ndef js_code():\n\n  def sum_and_check_if_42(a, b):\n    c = a + b\n    if c == 42:\n      return True\n    else:\n      return False\n\n  result = sum_and_check_if_42(10, 30)\n  console.log(\"Is it 42?\", result)\n```\n\nNow you can just call `str(js_code)` or `print(js_code)` to see the JavaScript\nversion of that code:\n\n_(Note: the code below has been pretty-printed for clarity)_\n\n```js\nfunction sum_and_check_if_42(a, b) {\n  var c = (a + b);\n\n  if (c === 42) {\n    return true\n  } else {\n    return false\n  }\n};\n\nresult = sum_and_check_if_42(10, 30);\nconsole.log(\"Is it 42?\", result)\n```\n\n## Complex Example\n\nHere's some code that was copy/pasted directly from the D3 documentation,\nthen converted to Python:\n\n```py\nfrom jsbuilder import js\n\n@js\ndef js_code():\n    bleed = 100\n    width = 960\n    height = 760\n\n    pack = (d3.layout.pack()\n            .sort(None)\n            .size([width, height + bleed * 2])\n            .padding(2))\n\n    svg = (d3.select(\"body\").append(\"svg\")\n           .attr(\"width\", width)\n           .attr(\"height\", height)\n           .append(\"g\")\n           .attr(\"transform\", \"translate(0,\" + (-bleed) + \")\"))\n\n    def json_read(js, error, json):\n        if error:\n            raise error\n\n        node = (svg.selectAll(\".node\")\n                .data(pack.nodes(flatten(json)))\n                .filter(lambda d: not d.children)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"node\")\n                .attr(\"transform\", lambda d: \"translate(\" + d.x + \",\" + d.y + \")\"))\n\n        (node.append(\"circle\")\n         .attr(\"r\", lambda d: d.r))\n\n        (node.append(\"text\")\n         .text(lambda d: d.name)\n         .style(\"font-size\", lambda d: Math.min(2 * d.r, (2 * d.r - 8) / getComputedTextLength() * 24) + \"px\")\n         .attr(\"dy\", \".35em\"))\n\n    d3.json(\"README.json\", json_read)\n\n    def flatten(root):\n        nodes = []\n\n        def recurse(node):\n            if node.children:\n                node.children.forEach(recurse)\n            else:\n                nodes.push({\"name\": node.name, \"value\": node.size})\n\n        recurse(root)\n        return {\"children\": nodes}\n```\n\nAnd the JS-converted version is:\n\n```js\nvar bleed = 100;\nvar width = 960;\nvar height = 760;\n\nvar pack = d3.layout\n    .pack()\n    .sort(null)\n    .size([width, (height + (bleed * 2))])\n    .padding(2);\n\nvar svg = d3.select(\"body\")\n    .append(\"svg\")\n    .attr(\"width\", width).attr(\"height\", height)\n    .append(\"g\")\n    .attr(\"transform\", ((\"translate(0,\" + (-bleed)) + \")\"));\n\nfunction json_read(js, error, json) {\n    if (error) {\n        throw new Error(error)\n    } else {\n    };\n    var node = svg.selectAll(\".node\")\n        .data(pack.nodes(flatten(json)))\n        .filter(((d) => ((!d.children))))\n        .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", ((d) => (\n                ((((\"translate(\" + d.x) + \",\") + d.y) + \")\"))));\n    node.append(\"circle\")\n        .attr(\"r\", ((d) => (d.r)));\n    node.append(\"text\")\n        .text(((d) => (d.name)))\n        .style(\"font-size\", ((d) => (\n            (Math.min(\n                (2 * d.r),\n                ((((2 * d.r) - 8) / getComputedTextLength()) * 24)\n            ) + \"px\"))))\n        .attr(\"dy\", \".35em\")\n};\n\nd3.json(\"README.json\", json_read);\n\nfunction flatten(root) {\n    var nodes = [];\n\n    function recurse(node) {\n        if (node.children) {\n            node.children.forEach(recurse)\n        } else {\n            nodes.push({\"name\": node.name, \"value\": node.size})\n        }\n    };\n\n    recurse(root);\n    return {\"children\": nodes}\n}\n```\n\n# Support\n\nSome Python features are not yet supported (like `assert` and `async`) and others will likely never be, since they don't have an obvious analogue in JS (like slices, and the `in` operator).\n\nFor a full list, see the [source code](https://github.com/tvst/jsbuilder/blob/master/jsbuilder/__init__.py#L150).\n\nAlso note that Python has some keywords like `from` that are not keywords in JavaScript, so you cannot use those directly in your code for things like variable names and object members. If you really need to, you'll have to find work-arounds. For example, instead of `Array.from()` you'll have to use `Array['from']()`.\n\n## For loops\n\n`For` loops are a tricky one! They're supported, but Python and JS have different enough syntaxes for `for` loops that a perfect conversion isn't possible. Instead, Python's `for` is being mapped to JS's `.forEach()`. So you can do:\n\n```py\nfor word in [\"hello\", \"hi\", \"whattup\"]:\n  console.log(word)\n```\n\n...since that translates to:\n\n```js\n[\"hello\", \"hi\", \"whattup\"].forEach((word, _i) => console.log(word))\n```\n\nAnd note that if you're using things like `range()` and `enumerate()`, those don't exist in JS so you'll have to define them first. For example:\n\n```py\ndef range(n):\n  return Array['from'](Array(n).keys())\n\nfor i in range(10):\n  console.log(i)\n```\n\n...which translates to:\n\n```js\nfunction range(n) {\n    return Array[\"from\"](Array(n).keys())\n};\n\nrange(10).forEach((i, _i) => {\n    console.log(i)\n})\n```\n\nRelated: did you notice how you get a free `_i` variable in the JS version of the `for`/`forEach` loop? Feel free to use that variable inside the Python version of your JS code, since `enumerate()` doesn't work!\n\n## Variable declarations\n\nCode like this in Python gets translated correctly to JS:\n\n```py\n# Python\na = 0\na = 10\n```\n\n```js\n// JavaScript\nvar a = 0;\na = 10\n```\n\nAnd so do slightly more complex cases like:\n\n```py\n# Python\ndef foo(b):\n  a = 0\n  a = b = c = 10\n```\n\n```js\n// JavaScript\nfunction foo(b) {\n  var a = 0;\n  a = 10;\n  b = 10;\n  var c = 10\n}\n```\n\nHowever, because of the way Python and JS variable hoisting work, variable\ndeclarations in places like `if`/`else` blocks are not handled differently in\nthe two worlds. In particular, this Python code\n\n```py\nif x:\n  a = 10\nelse:\n  a = 100\n```\n\nbecomes this JS code\n\n```js\nif (x) {\n  var a = 10\n} else {\n  a = 100\n}\n```\n\n...which is correct, but rather odd!\n\nIf for any reason you need to solve this, just declare the variable above the\n`if`:\n\n\n```py\n# Python\n\na = None\n\nif x:\n  a = 10\nelse:\n  a = 100\n```\n\n```js\n// JavaScript\n\nvar a = null\n\nif (x) {\n  a = 10\n} else {\n  a = 100\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tvst/jsbuilder",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsbuilder",
    "package_url": "https://pypi.org/project/jsbuilder/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsbuilder/",
    "project_urls": {
      "Homepage": "https://github.com/tvst/jsbuilder"
    },
    "release_url": "https://pypi.org/project/jsbuilder/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Convert Python code to JavaScript strings, just by decorating it with @js!",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12656803,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2321151097e0435c28a25eb48457cbc231aaa2a09f4685755cffab545e8114bd",
          "md5": "7a6c8d9e9cadaad5a367ae25300eeee9",
          "sha256": "705f0e636839c1bd2715cb056892b7adff120c9b6d338ce9a55213726cdc6d01"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a6c8d9e9cadaad5a367ae25300eeee9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6628,
        "upload_time": "2020-03-30T04:47:09",
        "upload_time_iso_8601": "2020-03-30T04:47:09.855507Z",
        "url": "https://files.pythonhosted.org/packages/23/21/151097e0435c28a25eb48457cbc231aaa2a09f4685755cffab545e8114bd/jsbuilder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "904462a1806579b1cacccc46813e2d17d57fef25bd3ca72cd36effe7968d1b33",
          "md5": "34fbb8b98f12d34e831ee683954cc81e",
          "sha256": "5c33d0a67c181785c4e3bcb7ff4cabb002a1a3c1d8009eae74f2b1eb9b9077a6"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "34fbb8b98f12d34e831ee683954cc81e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8545,
        "upload_time": "2020-03-30T09:43:17",
        "upload_time_iso_8601": "2020-03-30T09:43:17.202781Z",
        "url": "https://files.pythonhosted.org/packages/90/44/62a1806579b1cacccc46813e2d17d57fef25bd3ca72cd36effe7968d1b33/jsbuilder-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8248ecb14b628d42f2e17983879f7d30f0d19b272347da914acbb69fa2bbc2",
          "md5": "8e0b165e3da1e4188243117d7f348578",
          "sha256": "a1a66c788e359f68287cea17eb8ab9ae0c7052c76aa532ed03a332be814663a1"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.5-py3.7.egg",
        "has_sig": false,
        "md5_digest": "8e0b165e3da1e4188243117d7f348578",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.5",
        "size": 7288,
        "upload_time": "2020-04-22T00:22:24",
        "upload_time_iso_8601": "2020-04-22T00:22:24.654612Z",
        "url": "https://files.pythonhosted.org/packages/4b/82/48ecb14b628d42f2e17983879f7d30f0d19b272347da914acbb69fa2bbc2/jsbuilder-0.0.5-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9638eb3c217221831ae6bf48503928f1c3b9f107f0b5567d74bc4524470d6b7",
          "md5": "a4d37c4925afbad194740fb9e8432454",
          "sha256": "01e5266f7077d8523bd53994ddbfa5ceb39efb2956badb3dd6d1017429ef681d"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a4d37c4925afbad194740fb9e8432454",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8594,
        "upload_time": "2020-04-22T00:07:39",
        "upload_time_iso_8601": "2020-04-22T00:07:39.130261Z",
        "url": "https://files.pythonhosted.org/packages/e9/63/8eb3c217221831ae6bf48503928f1c3b9f107f0b5567d74bc4524470d6b7/jsbuilder-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08a25e29b2b6bf0f92ad3c1a725f22c3c848caeb0dec523b3da82dd7a00c0105",
          "md5": "aa122af6abdc7c38a8e492688d41323b",
          "sha256": "fbebb0eb4836f10f21f0ca2f96d8b280b1c708453925d41524faa2ba2f77ba87"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "aa122af6abdc7c38a8e492688d41323b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8595,
        "upload_time": "2020-04-22T00:23:21",
        "upload_time_iso_8601": "2020-04-22T00:23:21.383207Z",
        "url": "https://files.pythonhosted.org/packages/08/a2/5e29b2b6bf0f92ad3c1a725f22c3c848caeb0dec523b3da82dd7a00c0105/jsbuilder-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94bce414b3c230d7c14e5a94f54033e9d25414ba09daa133488ead3bbde7cd41",
          "md5": "e2c7f68fc707a3f88c8441895942fddb",
          "sha256": "ba289f3890b4877e49e004f8588c85c7b53de858a5643e7991c5f27f55c86f25"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e2c7f68fc707a3f88c8441895942fddb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8645,
        "upload_time": "2020-04-22T00:31:16",
        "upload_time_iso_8601": "2020-04-22T00:31:16.909575Z",
        "url": "https://files.pythonhosted.org/packages/94/bc/e414b3c230d7c14e5a94f54033e9d25414ba09daa133488ead3bbde7cd41/jsbuilder-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e35e85261c555a0fdaecb2df1f0565a563c9556191337548753f27e92f1de681",
          "md5": "e63aebb1002405960601613719a33c4c",
          "sha256": "9be3fa1f23f75b235a6d99c1b2a7f3758c3e011492669ba38246227cf77fa4de"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e63aebb1002405960601613719a33c4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8861,
        "upload_time": "2020-04-22T00:58:18",
        "upload_time_iso_8601": "2020-04-22T00:58:18.198101Z",
        "url": "https://files.pythonhosted.org/packages/e3/5e/85261c555a0fdaecb2df1f0565a563c9556191337548753f27e92f1de681/jsbuilder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21c08deed96e4006913f922bc6b0b1585aa864635d05ecf5386cbbb80390cd0f",
          "md5": "009af5499b89d2da1e069dec25a753ed",
          "sha256": "2411a534ae3570a7ea696075f6b9b12bfc487e5505f15dbee9b461d40a931ca9"
        },
        "downloads": -1,
        "filename": "jsbuilder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "009af5499b89d2da1e069dec25a753ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11084,
        "upload_time": "2022-01-23T01:59:15",
        "upload_time_iso_8601": "2022-01-23T01:59:15.513912Z",
        "url": "https://files.pythonhosted.org/packages/21/c0/8deed96e4006913f922bc6b0b1585aa864635d05ecf5386cbbb80390cd0f/jsbuilder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21c08deed96e4006913f922bc6b0b1585aa864635d05ecf5386cbbb80390cd0f",
        "md5": "009af5499b89d2da1e069dec25a753ed",
        "sha256": "2411a534ae3570a7ea696075f6b9b12bfc487e5505f15dbee9b461d40a931ca9"
      },
      "downloads": -1,
      "filename": "jsbuilder-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "009af5499b89d2da1e069dec25a753ed",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 11084,
      "upload_time": "2022-01-23T01:59:15",
      "upload_time_iso_8601": "2022-01-23T01:59:15.513912Z",
      "url": "https://files.pythonhosted.org/packages/21/c0/8deed96e4006913f922bc6b0b1585aa864635d05ecf5386cbbb80390cd0f/jsbuilder-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}