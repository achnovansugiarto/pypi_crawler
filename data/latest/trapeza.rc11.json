{
  "info": {
    "author": "Louis Huebser",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "[<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/logo_trapeza.png\" alt=\"logo\" width=\"200\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/logo_trapeza.png)  \ntrapeza - simulation and backtesting of financial transactions\n________________________________________________________________________________________\n# About\n_trapeza_ is a library for simulation and backtesting of financial transactions and in particular of tradings strategies.  \nThere is a number of great backtesting libraries available for Python, which facilitate fast and easy-to-write \nbacktesting.  \nOn the other hand, _trapeza_ focuses on:\n\n  1. [<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/turn.png\" alt=\"icon_1\" width=\"30\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/turn.png) __Flexibility__:  \n     The _trapeza_ interface is designed for flexibility and customization such that a fast variety of\n     real-life situation can be modelled appropriately, e.g. custom fees for certain transaction types (for instance \n     volume dependent fees).\n  2. [<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/simulation.png\" alt=\"icon_2\" width=\"30\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/simulation.png) __Simulation & Modelling:__  \n     At its core, _trapeza_ implements a time-discrete (stack) automaton logic. Thereby, \n     transactions can be modelled with processing times, which would also occur in real-life situations such as time\n     needed to transmit messages via telecommunication networks. The elapsed time is controlled via setting an internal\n     clock. Furthermore, the user can control how much previous (historic) price and market information is available to \n     the user-defined trading strategy at each time step of simulation, i.e. when modelling path-dependent strategies. \n     _trapeza_ can handle multiple stocks and assets when defining a strategy.  \n  3. [<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/random.png\" alt=\"icon_3\" width=\"30\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/random.png) __Stochastic Analysis:__  \n     _trapeza_'s backtest engine does not only backtest on historic market data, but furthermore \n     slices input data, such as price and volume market data, into many sub-samples to analyze the performance of \n     trading strategies. This roughly emulates the logic of Monte Carlo simulations by emulating random sub-samples of \n     historic market data, which is especially useful when analyzing path-dependent strategies.  \n     Additionally, common metrics assume very basic distribution models (e.g. Gaussian normal distribution). Instead, \n     custom and more suitable distributions can be applied for calculating metrics. Even tough _trapeza_ provides some \n     basic metrics, the main goal of _trapeza_ is not to provide sophisticated metrics or indicators.  \n  4. [<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/dashboard.png\" alt=\"icon_4\" width=\"30\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/dashboard.png) __Visualization:__  \n     Even though sophisticated visualizations of analysis results is not the main goal of _trapeza_, \n     _trapeza_ offers a very basic, browser-based visualization dashboard implemented via Python Dash and \n     Plotly.\n\n_trapeza_ does not mainly focus on speed. Nevertheless, large parts of the library are transpiled to C/ C++ via Cython.  \n\nThe name _\"trapeza\"_ is derived from the tables, which were used by ancient greek moneychangers for their activities - one \nof the first records in history regarding banking and monetary activities.\n\n# Legal Disclaimer\n_trapeza_ is written for scientific, educational and research purpose only. The author of this software and accompanying \nmaterials makes no representation or warranties with respect to the accuracy, applicability, fitness, or completeness of\nthe contents. Therefore, if you wish to apply this software or ideas contained in this software, you are taking full \nresponsibility for your action. All opinions stated in this software should not be taken as financial advice. Neither \nas an investment recommendation. This software is provided \"as is\", use on your own risk and responsibility.  \n\nThis software is licensed under [_MIT License_](#license).\n\n# Quickstart\n_trapeza_ is built upon three main concepts:  \n1. __Account:__ A account conceptually represents a bank account/ trading depot. Basic transactions like deposit, \n   withdraw, sell or buy an asset are implemented on account level. Each account keeps a record of positions \n   regarding assets, which are hold by the account owner (called account.depot in this context).\n2. __Strategy:__ Users can define a custom trading strategy, which only have to follow the call signature \n   _strategy_func(accounts, price_data_point, reference_currency, volume_data_point, fxstrategy, **strategy_kwargs)_. \n   This strategy function, and a list of accounts (strategy function may use multiple accounts in its function body) \n   is then passed to a strategy object, which handles simulation execution and collecting simulation results.  \n3. __Engine:__  Multiple strategy functions can be passed to the engine object. The engine object slices market data \n   (i.e. price and volume data) into random sub-samples in order to perform Monte-Carlo-like stochastic simulation. \n   The engine object furthermore evaluates results with regard to user-defined metrics based on the simulation \n   results for each of the supplied strategies. This way, different strategies can be benchmarked against the same \n   market at once.  \n### Account\n````python\nfrom trapeza.account import FXAccount\n\n# initialize an account with reference currency set to EUR\n# if the user wants more performance at the cost of safety: parameter ignore_type_checking=True\nacc = FXAccount('EUR')  \n\n# deposit 100 EUR and take a fee of 5 EUR\nacc.deposit(100, 'EUR', 5)\n\n# get current depot status, returns a dict\nprint(acc.depot)\n# >>> {'EUR': 95}\n\n# suppose we have to transfer 50 EUR to a friend's account and the transaction takes 5 time steps to be processed at our\n# account and 10 time steps to arrive at our friend's account\nacc.transfer(friend_account, 50, 'EUR', payer_processing_duration=5, payee_processing_duration=10)\n# check depot status again\nprint(acc.depot)\n# >>> {'EUR': 95}     transfer has not taken effect yet, we first have to proceed in time steps\n\n# proceed one time step\nacc.tick()\nprint(acc.depot)\n# >>> {'EUR': 95}   transfer has not taken effect yet as it takes 5 time steps\n\n# set internal clock to 5 (fast forward...)\nacc.tick(5)\nprint(acc.depot)\n# >>> {'EUR': 45}   transfer is processed on our account now\n````\n### Strategy\n````python\nimport numpy as np\nfrom pandas_datareader import data\nfrom trapeza.strategy import FXStrategy\n\n# define a custom trading strategy\ndef avg_strategy(accounts, price_data_point, reference_currency, volume_data_point, fxstrategy):\n    # We sell if the average-10-days-line crosses the average-50-days-line from above and buy if it crosses from below\n\n    # price_data_point and volume_data_point: dict, tuples(currency_1, currency_2) as dict key, \n    #                                               list of floats representing exchange rates at distinct time steps \n    #                                               (here 52 time steps: current time_step at index=-1, lookback data of \n    #                                               51 time steps is prepended, see below for explanation) as dict value\n    # reference_currency: str, reference currency in which to evaluate strategy, can be different then the reference\n    #                     currency of accounts\n    # accounts: list of accounts, which are passed to FXStrategy\n    # fxstrategy: placeholder for FXStrategy, which calls itself, e.g. for adding trade signals to FXStrategy\n\n    avg_10_today = np.sum(price_data_point['BTC', 'EUR'][-10:]) / 10\n    avg_50_today = np.sum(price_data_point['BTC', 'EUR'][-50:]) / 50\n    avg_10_yesterday = np.sum(price_data_point['BTC', 'EUR'][-11:-1]) / 10\n    avg_50_yesterday = np.sum(price_data_point['BTC', 'EUR'][-51:-1]) / 50\n    price_today = price_data['BTC', 'EUR'][-1]\n\n    if avg_10_yesterday < avg_50_yesterday and avg_10_today > avg_50_today:\n        accounts[0].buy(1, price_today, 'BTC', 'EUR')  # buy 10 units\n        fxstrategy.add_signal(accounts[0], 'buy')   # add signal associated with account 0\n\n    if avg_10_yesterday > avg_50_yesterday and avg_10_today < avg_50_today:\n        accounts[0].sell(1, price_today, 'BTC', 'EUR') # sell 10 units\n        fxstrategy.add_signal(accounts[0], 'sell')  # add signal associated with account 0\n\n# first deposit some more cash to account\nacc.deposit(1_000_000, 'EUR')\nacc.deposit(2, 'BTC')\n\n# initialize strategy object\n# Parameter lookback controls how many previous time steps of market data (additional to current time step) is passed to \n# our custom strategy function. For our strategy we need to calculate a 50-days average. Furthermore we have to calculate\n# this value for one time step before we start analyzing our trading strategy (i.e. line crossing is detected by comparing\n# avg-10 and avg-50 of the previous day and the current day). Therefore, the lookback is 50 (avg-50 calculation) + 1 \n# (calculation of avg-50 for previous day): lookback=51.\n# if the user wants more performance at the cost of safety: parameter ignore_type_checking=True\nstrategy = FXStrategy('my_awesome_strategy', acc, avg_strategy, lookback=51)\n\n# We pull currency data from yahoo finance. This is somehow a bit tedious\nbtc_eur = data.DataReader('BTC-EUR', start='2020-06-01', end='2021-05-12',\n                          data_source='yahoo')['Close'].reset_index().drop_duplicates('Date', 'last')\neur_usd = data.DataReader('EURUSD=X', start='2020-06-01', end='2021-05-12',\n                          data_source='yahoo')['Close'].reset_index().drop_duplicates('Date', 'last')\nbtc_usd = data.DataReader('BTC-USD', start='2020-06-01', end='2021-05-12',\n                          data_source='yahoo')['Close'].reset_index().drop_duplicates('Date', 'last')\n# EUR|BTC is only traded on work days as opposed to cryptocurrencies, which are traded 365 days a year\n# so we need to restrict our data to work days only in order to be comparable\ncurrency_dates = eur_usd['Date'].to_numpy()\ncrypto_dates = btc_eur['Date'].to_numpy()\ncommon_dates = np.sort(np.array(list(set(currency_dates).intersection(set(crypto_dates))))) # filter out common days\nbtc_eur = btc_eur[btc_eur['Date'].isin(common_dates)]['Close'].to_numpy()\nbtc_usd = btc_usd[btc_usd['Date'].isin(common_dates)]['Close'].to_numpy()\neur_usd = eur_usd[eur_usd['Date'].isin(common_dates)]['Close'].to_numpy()\n# finally we can build our input data\nprice_data = {('BTC', 'EUR'): btc_eur, ('EUR', 'USD'): eur_usd, ('BTC', 'USD'): btc_usd}\n\n# run backtest and evaluate our strategy in USD, even though our account is referenced and billed in EUR\n# conversion from BTC and EUR (which are hold in account's depot) is done automatically\nstrategy.run(price_data, 'USD')\n\n# results can be accessed via attributes\nprint(strategy.merged_total_balances)   # returns total value over all accounts (in our case one account) given in USD\n# >>> [1196651.6894629002, 1196876.5245821476, 1203001.5259501934, ... , 1313077.8513996354]   \nprint(len(price_data['BTC', 'EUR']), len(strategy.merged_total_balances))\n# >>> 245 194   strategy runs over 194 time steps, we supplied 245 time steps of market data (of which 51 are used as \n#               lookback data for calculating our trading decisions)\n````\nResults can be visualized with any Python library of choice (here: matplotlib). Notice, that strategy execution starts \nat time step 51 (which elucidates the concept of lookback data):  \n[<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_strategy_example.png\" alt=\"strategy_results\" width=\"440\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_strategy_example.png)  \n_(BTC|EUR price and total value of trading strategy/ performance at each time step, both indexed to 1 at start time of \nstrategy execution at time step 51)_  \n\n[<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_strategy_signals_example.png\" alt=\"strategy_signals\" width=\"450\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_strategy_signals_example.png)  \n_(BTC|EUR price, avg10 and avg50 indicators at each time step)_  \n\nAs we can see from the plots, this strategy doesn't seem to outperform a basic buy-and-hold-strategy by much for the \nchosen time frame (which makes sense regarding the bullish trend within the market data).  \n### Engine\n````python\nfrom trapeza.engine import FXEngine\nfrom trapeza.dashboard import FXDashboard\n\n# initialize engine\n# if the user wants more performance at the cost of safety: parameter ignore_type_checking=True\nengine = FXEngine('backtesting', strategy, n_jobs=-1)  # n_jobs: use all available cores\n\n# Run stochastic backtesting wherein the length of a randomly drawn sub-sample is at least 5 time steps and at most\n# 50 time steps. All possible sub-samples, which comply to this condition, will be drawn. Alternatively, the max number\n# of draws can be defined via max_total_runs parameter. In this case we only draw 200 sub-samples.\nengine.run(price_data, 'USD', min_run_length=5, max_run_length=50, max_total_runs=200)\n\n# We now can analyze results. FXEngine has a set of standard metrics, but users can pass custom metrics as well.\ndef custom_metric(x):\n    return np.var(x)\nengine.analyze({'my_metric': custom_metric})\n\n# Results are stored in self.standard_analysis_results for the standard metrics implemented in FXEngine, and in\n# self.analysis_results for custom metrics\nprint(engine.standard_analysis_results)\n# metrics are evaluated for each strategy and for each sub-sample, which is defined by the window length (here between 5 \n# and 50) and by its start time step (index in time series data)\n# >>> {'my_awesome_strategy':\n#       {('10', '138'):\n#           {'total_rate_of_return': -0.3178841284640982, 'volatility': 0.05711533033257823, \n#            'expected_rate_of_return': -0.001678860489711134, 'expected_rate_of_log_return': -0.0016867536858783518, \n#            'sharpe_ratio': -7.924901653751582, 'sortino_ratio': -8.217863784511843, 'value_at_risk': -0.09134675866458732, \n#            'max_drawdown': 19997.846368551254\n#           },\n#        ('10', '140'): \n#           {'total_rate_of_return': -0.009707405842422023, ... \n#           },\n#        ...\n#        }\n#     }\nprint(engine.analysis_results)\n# >>> {'my_awesome_strategy': \n#       {('10', '138'): \n#           {'my_metric': 46553148.03839398\n#           }, \n#        ('10', '140'): \n#           {'my_metric': 30596348.629725147\n#           },\n#        ...\n#       }\n#     }\n\n# Furthermore, a simple dashboard visualization is provided by trapeza\ndash = FXDashboard(engine)\ndash.run(debug=False)   # dashboard can be opened in browser with local address\n# >>> Dash is running on http://127.0.0.1:8050/\n#     * Serving Flask app \"script_doc_examples\" (lazy loading)\n#     * Environment: production\n#       WARNING: This is a development server. Do not use it in a production deployment.\n#       Use a production WSGI server instead.\n#     * Debug mode: off\n\n# DO NOT FORGET TO CLOSE: this deletes all temporary cached files (even though this should also work without calling\n# self.close() explicitly - but safe is safe)\nengine.close()\n````\nEven though _trapeza_ does not focus on visualization, this library still provides a very basic dashboard:  \n[<img src=\"https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_dashboard_example.png\" alt=\"dashboard\" width=\"450\"/>](https://gitlab.com/LHuebser/trapeza/-/raw/master/doc/media/README_dashboard_example.png)  \n\nNonetheless, there are certainly better libraries for visualization then the one provided by _trapeza_.  \n\nAll the above example code located at: [_doc/script_readme_examples.py_](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/script_readme_examples.py).   \n\n__More examples at__: [docs/examples.md](doc/examples.md) (e.g. RSI-based trading strategy).\n### Custom Implementations\nFXAccount, FXStrategy, FXEngine and FXDashboard all inherit from respective base classes (i.e. BaseAccount, BaseStrategy, \nBaseEngine, BaseDashboard). Own implementations can be written as drop-in replacement.  \nIf those implementations shall be compatible in their use with existing classes, then they also have to inherit from \nthose base classes.  \nThe FX-implementations are all focused on (infinitely) divisible (often intangible) assets, such as currencies. Those \nimplementations can also be easily adapted for the use with e.g. stocks if rounding of volumes at FXAccount.buy() and \nFXAccount.sell() is done appropriately to the next integral number.  \n# Quick Install\n## Pip install\nInstallation is as easy as:  \n````\npip install trapeza\n````  \nThis should work for Windows, Linux and MacOS.  \nTested under Windows10/ Python3.6.7 and Ubuntu-20.04.2/ Python3.8.5.  \n_Not tested under MacOS yet._\n## Build from Source\n_trapeza_ can also be re-compiled and built from source, see the documentation regarding [_installation_](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/installation.md).  \nThis is useful for development purpose or if the user has complications with mpdecimal (external C-library used for \ndecimal math) and wants to re-compile mpdecimal separately, which also induces a re-compilation of _trapeza_.  \nMake sure to [_pip install -e ._](#pip-install-from-local-built) after re-compiling.  \n## Requirements\nRequirements for _trapeza_ (installs automatically if not already satisfied):  \n````\nnumpy\npandas\nscipy\njoblib\nscikit-learn\ndash\nplotly\nmatplotlib\nflask\nsetuptools\npathlib; python_version < \"3.4\"\n````  \n# [Documentation](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/README.md)\n* [Table of Content](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/table_of_content.md)\n* [Installation](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/installation.md)\n* [Main Concepts](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/main_concepts.md)\n    * [Account](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/account.md)\n    * [Order Management](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/order_management.md)\n    * [Strategy](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/strategy.md)\n    * [Engine](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/engine.md)\n    * [Visualization](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/visualization.md)\n    * [Metrics](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/metrics.md)\n* [Arithmetics](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/arithmetics.md) (Context Settings)\n* [Exceptions](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/exceptions.md)\n* [Examples](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/examples.md)\n* [Development Notes](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/development_notes.md)\n* [API Reference](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/api_reference.md)\n\n# Source Code\nSource code and documentation can be found at: [https://gitlab.com/LHuebser/trapeza](https://gitlab.com/LHuebser/trapeza)\n\n# Development Roadmap\n_trapeza_ is under active development and released as beta.  \nContribution and suggestions for improvements and future features are warmly welcome!  \nSee [Development Notes](doc/development_notes.md).  \n## Current Status\n- _trapeza_ is currently in its beta version. All provided classes, methods and functions are fully functional and extensively tested. \n- So far, the implementations _FXAccount, FXStrategy and FXEngine_ are conceptually tailored for monetary exchange transactions - or\n  more generally speaking for continuously divisible assets.\n  Nonetheless, if rounding to integral numbers is applied to trade volumes, then those concepts are also applicable for stocks \n  (i.e. base=stock, quote=currency).  \n- Current FXDashboard implementation has only very basic and limited visualization capabilities and only makes sense to use\n  in conjunction with classes, that implement Monte-Carlo-alike backtesting (e.g. FXEngine). Therefore, visualization in\n  FXDashboard focuses on representing distributions of metrics over multiple backtesting runs with randomly sub-sampled data.  \n- FXEngine limits the types of metrics, which can be evaluated. Only metrics, that output a single value given a time series of \n  a strategy's total value (calculated in a given reference currency) per time step are compatible with FXEngine.\n- Metrics provided in _trapeza.metrics_ are not checked in a scientific manner and are not compared to the latest research or\n  to the up-to-date state-of-the-art. __Metrics implemented in this software do not state financial advice or investment \n  recommendations, nor do they make any representation or warranties with respect to the accuracy, applicability, fitness, \n  or completeness of the contents. Therefore, if you wish to apply this metrics or ideas contained in this software, you \n  are taking full responsibility for your action.__  \n## To-Dos\n- Sometimes [_FXEngine_](doc/engine.md) does not use all cores, even if it is specified by method arguments. This is \n  due to some unknown behavior of [joblib](https://joblib.readthedocs.io/en/latest/parallel.html) (possibly interacting \n  with BLAS of [numpy](https://numpy.org/)), which is used for multi-processing in _trapeza_. This needs further \n  investigation but does not limit the general capability of _trapeza_.  \n- emin and emax in libmpdec (wrapper for mpdecimal C-library) are currently left at default (this should work without \n  any troubles), customization would be good.\n- extend examples, e.g. risk models (i.e. via sklearn), usage of other financial Python packages in conjunction with \n  _trapeza_, etc.\n- Implement win-loss metric in trapeza.metrics.   \n- Add an example where price data is generated dynamically inside the strategy decision function, e.g. when modelling \n  option or turbo bull prices (which change depending on the underyling) such that those prices do not have to be passed \n  within the price_data_dict argument supplied to FXStrategy.run() but are generated dynamically inside the strategy \n  decision function.  \n- Add benchmarks for testing the accuracy of the implemented metrics in comparison to other Python packages.  \n- Add benchmarks regarding backtesting strategies (compute time and accuracy) in comparison to other Python packages.  \n[Full To-Do list](doc/development_notes.md#todos)  \n## Future Development\n- Add further FX market specific mechanisms, e.g. roll-overs and margin trading (or dividends and ex-dividend prices \n  when handling stocks).  \n- Improve visualization in FXEngine.  \n- Implementation and integration of fixed point arithmetics as alternative to 'FLOAT', 'DECIMAL', \n  'LIBMPDEC_FAST' (uses ryu dtoa), 'LIBMPDEC' (uses dtoa of CPython) when setting trapeza.context.ARITHMETICS  \n  See todo in trapeza.arithmetics for adding rounding methods when implementing fixed point arithmetics.  \n  --> Currently, there is no urgent need for this as fixed point math can be emulated via \n  trapeza.context.ARBITRARY_QUANTIZE_SIZE setting. Only reason for implementing fixed point math separately would be \n  runtime performance...  \n- Implement more order types ([Order Management](doc/order_management.md)).  \n- Implement more [metrics](doc/metrics.md): tail value at risk, bias ratio, win-loss-ratio, average absolute deviation, \n  calmar ratio, long short exposure, sector exposure, etc. and more probability models (e.g. chebyshev) for calculating \n  metrics.  \n- Implement a delay element at order management between hitting limit price and actual order execution (price), e.g. \n  there's a difference between stop loss and stop loss limit, which are currently the same.  \n- Improve computation time of FXEngine.analyze().  \n- Implement some kind of liquidity simulation, which makes backtesting more realistic especially for larger trading \n  volumes.  \n\n# License\nMIT License  \n\nCopyright (c) 2021 Louis Huebser  \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  \n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  \n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.  \n\n\n________________________________________________________________________________________  \n[_Icon Attribution_](https://gitlab.com/LHuebser/trapeza/-/tree/master/doc/icon_attribution.md)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/LHuebser/trapeza.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trapeza",
    "package_url": "https://pypi.org/project/trapeza/",
    "platform": "any",
    "project_url": "https://pypi.org/project/trapeza/",
    "project_urls": {
      "Homepage": "https://gitlab.com/LHuebser/trapeza.git"
    },
    "release_url": "https://pypi.org/project/trapeza/0.0.11/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "joblib",
      "scikit-learn",
      "dash",
      "plotly",
      "matplotlib",
      "flask",
      "setuptools",
      "pathlib ; python_version < \"3.4\""
    ],
    "requires_python": "",
    "summary": "Backtesting and Simulation package for financial transactions and trading",
    "version": "0.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10879966,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19ce56dd22b9b0a0c37c49b3196438b56cfa1ce6b0cf4a387344098a95580fd3",
          "md5": "d68081ca55bcd9d8cc34050b4682ded1",
          "sha256": "a20cbdf29994876266627182c504daf7bb2dc784e153824628c70767f046a9c5"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.1-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d68081ca55bcd9d8cc34050b4682ded1",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1911095,
        "upload_time": "2021-07-06T19:18:56",
        "upload_time_iso_8601": "2021-07-06T19:18:56.738621Z",
        "url": "https://files.pythonhosted.org/packages/19/ce/56dd22b9b0a0c37c49b3196438b56cfa1ce6b0cf4a387344098a95580fd3/trapeza-0.0.1-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84dccfb2913613a0090f67b17e16bbedf04f6103106dd26ca1cc3b353fe83847",
          "md5": "9104fa6cd6bc4406edd34ba7fd86df72",
          "sha256": "37b4e5b0c46d5550c5f302316bebf49dd595617f45dc93c0ba37757490e9d78e"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9104fa6cd6bc4406edd34ba7fd86df72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7372875,
        "upload_time": "2021-07-06T19:19:28",
        "upload_time_iso_8601": "2021-07-06T19:19:28.706306Z",
        "url": "https://files.pythonhosted.org/packages/84/dc/cfb2913613a0090f67b17e16bbedf04f6103106dd26ca1cc3b353fe83847/trapeza-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1795b945b381a63d6361a280dc28b23b89117b50ea67676f20c89e8a31e597f",
          "md5": "8485b8917f5d9237c8031eeee68b4a0d",
          "sha256": "e9834a28db9e719ff3f76a2f20b14c3580c2f7a33a1fb97847ca7c9a7294eeb4"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.10-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8485b8917f5d9237c8031eeee68b4a0d",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1599072,
        "upload_time": "2021-07-11T20:01:52",
        "upload_time_iso_8601": "2021-07-11T20:01:52.317575Z",
        "url": "https://files.pythonhosted.org/packages/a1/79/5b945b381a63d6361a280dc28b23b89117b50ea67676f20c89e8a31e597f/trapeza-0.0.10-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9fc0bbf65344e74f1f753eb0a5fb9e6a14948b38f8143901f71b887cc5120e9",
          "md5": "8655ed1422624620f6a275b35d65b547",
          "sha256": "267af72b46ad114ab35bf12db4e4265ad8c4c39e0d41955f6721eb195b035b63"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "8655ed1422624620f6a275b35d65b547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 907047,
        "upload_time": "2021-07-11T20:01:58",
        "upload_time_iso_8601": "2021-07-11T20:01:58.096088Z",
        "url": "https://files.pythonhosted.org/packages/b9/fc/0bbf65344e74f1f753eb0a5fb9e6a14948b38f8143901f71b887cc5120e9/trapeza-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fccae89a881d1318f7dee496bbc01c2420a3fb5b83358c25199e3412474da13",
          "md5": "c3bfcd13c3952206aad3355471e639e0",
          "sha256": "072c43403d7120b79b08a803c667fa661706484543fa3125a8812ca363187031"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.11-cp37-cp37m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "c3bfcd13c3952206aad3355471e639e0",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 1574084,
        "upload_time": "2021-07-11T20:05:04",
        "upload_time_iso_8601": "2021-07-11T20:05:04.094584Z",
        "url": "https://files.pythonhosted.org/packages/8f/cc/ae89a881d1318f7dee496bbc01c2420a3fb5b83358c25199e3412474da13/trapeza-0.0.11-cp37-cp37m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31bd79c2a2a3c93a1468c149d3d4afe062650bbf040e1df7225761ef41b3e848",
          "md5": "79fbc133631f8c8500c309e0acd8430c",
          "sha256": "6a8a12924f58af0e89798beb7da65c5dea34f5035b730d677275e2a2f19c92b4"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "79fbc133631f8c8500c309e0acd8430c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 905953,
        "upload_time": "2021-07-11T20:05:09",
        "upload_time_iso_8601": "2021-07-11T20:05:09.362594Z",
        "url": "https://files.pythonhosted.org/packages/31/bd/79c2a2a3c93a1468c149d3d4afe062650bbf040e1df7225761ef41b3e848/trapeza-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92a7eff33d55e0e16a3924dae2d536fc5552cff4eddfb8809399f58c8036d33e",
          "md5": "246d0c463b836db91f99e2feb91b9783",
          "sha256": "c34b46ca86ea4b617a49c7fdf46372cd2458487c29cb772ca1289b8609ec3cbf"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.2-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "246d0c463b836db91f99e2feb91b9783",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1911752,
        "upload_time": "2021-07-07T02:22:02",
        "upload_time_iso_8601": "2021-07-07T02:22:02.765250Z",
        "url": "https://files.pythonhosted.org/packages/92/a7/eff33d55e0e16a3924dae2d536fc5552cff4eddfb8809399f58c8036d33e/trapeza-0.0.2-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61f8466e739800a81fd5a7de7760245d96babb6c637de36e86f0ddb4ecdd88f2",
          "md5": "dec638e102103d6d969e7d81d05edc77",
          "sha256": "252a7d4deb1dff0504745a52fc656f0affb3e78402fb5240054902a6db867192"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dec638e102103d6d969e7d81d05edc77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7373094,
        "upload_time": "2021-07-07T02:22:34",
        "upload_time_iso_8601": "2021-07-07T02:22:34.618672Z",
        "url": "https://files.pythonhosted.org/packages/61/f8/466e739800a81fd5a7de7760245d96babb6c637de36e86f0ddb4ecdd88f2/trapeza-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb1536bb44c69a09686f52d850bb2a5f9ff01c3f5c6b3ae6edb5320ea7a63d70",
          "md5": "7f77e7023851b3b82cff806a87e6e678",
          "sha256": "698983e150a80e8a8d13cbc5ecbc7128878f303512abf8aa63d6599d15483d71"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.3-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "7f77e7023851b3b82cff806a87e6e678",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1911821,
        "upload_time": "2021-07-07T14:08:41",
        "upload_time_iso_8601": "2021-07-07T14:08:41.259356Z",
        "url": "https://files.pythonhosted.org/packages/cb/15/36bb44c69a09686f52d850bb2a5f9ff01c3f5c6b3ae6edb5320ea7a63d70/trapeza-0.0.3-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66af9566dea2a72d7d7c81d5b3045c4c07906d0f2cf20fb63ceb116beead27ac",
          "md5": "34cf154ad096aedcd60d1c0df09bbd5e",
          "sha256": "f98e8e185b40c7041757a12a5acc8f02042682e16f7efc1ec955ab016a4d2415"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "34cf154ad096aedcd60d1c0df09bbd5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7373214,
        "upload_time": "2021-07-07T14:09:13",
        "upload_time_iso_8601": "2021-07-07T14:09:13.790235Z",
        "url": "https://files.pythonhosted.org/packages/66/af/9566dea2a72d7d7c81d5b3045c4c07906d0f2cf20fb63ceb116beead27ac/trapeza-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31389f6defba96e89488811dccd4eabf37e67c13f741dcba933ca207b6679572",
          "md5": "f496adbd9eb791b835b3e4439a13a31e",
          "sha256": "6f61a18525aa79c64cad56764ee4773cf5e712698b3438dd4accf582315d02aa"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.4-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "f496adbd9eb791b835b3e4439a13a31e",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1911814,
        "upload_time": "2021-07-07T14:21:45",
        "upload_time_iso_8601": "2021-07-07T14:21:45.542975Z",
        "url": "https://files.pythonhosted.org/packages/31/38/9f6defba96e89488811dccd4eabf37e67c13f741dcba933ca207b6679572/trapeza-0.0.4-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37e58382f87722daaf60535ec66388db2618073617fb4dfea784b437adc7e8bc",
          "md5": "0f0ad971e9bf3b94c0abc5fc7978fce3",
          "sha256": "3741f639648b86229bc3de25eeef37458c4a356f7d3a9a17490aaeafd51c2cdc"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0f0ad971e9bf3b94c0abc5fc7978fce3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7373166,
        "upload_time": "2021-07-07T14:22:17",
        "upload_time_iso_8601": "2021-07-07T14:22:17.385849Z",
        "url": "https://files.pythonhosted.org/packages/37/e5/8382f87722daaf60535ec66388db2618073617fb4dfea784b437adc7e8bc/trapeza-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5d00c6fbb6b51e018ae5afaa15a86165c1238653e1b3b93575dabe6d9093571",
          "md5": "670dc818bfe053c5eeee76888815cdd6",
          "sha256": "34acdd3d83349d9e67ffc7ab59f587f051986bff6e711ee71b0faa68fe4a0808"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.5-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "670dc818bfe053c5eeee76888815cdd6",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 1911777,
        "upload_time": "2021-07-07T14:39:18",
        "upload_time_iso_8601": "2021-07-07T14:39:18.813557Z",
        "url": "https://files.pythonhosted.org/packages/b5/d0/0c6fbb6b51e018ae5afaa15a86165c1238653e1b3b93575dabe6d9093571/trapeza-0.0.5-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dad5fccc4faf2c598253482db71937961e19b4f641a9daae6c0e1437f5bb55d1",
          "md5": "5dd9215ad3f90cd6e342db250f970206",
          "sha256": "58e8e98bbf59c9bc8115d081f25e4444d49647734207e5bc7d8b54e3035b5479"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5dd9215ad3f90cd6e342db250f970206",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7373180,
        "upload_time": "2021-07-07T14:39:50",
        "upload_time_iso_8601": "2021-07-07T14:39:50.991522Z",
        "url": "https://files.pythonhosted.org/packages/da/d5/fccc4faf2c598253482db71937961e19b4f641a9daae6c0e1437f5bb55d1/trapeza-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1edc9958059094a344fc3901eba8776352897769598c6f0e0b70b03ac0953347",
          "md5": "1a55144f4a70ee25e936e08d0c776a27",
          "sha256": "a4efd220ba89704f60d792ad3010875ae2c2465875b5b6575a824d2cbeb202a9"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.6-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "1a55144f4a70ee25e936e08d0c776a27",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "requires_python": null,
        "size": 2004526,
        "upload_time": "2021-07-11T15:10:02",
        "upload_time_iso_8601": "2021-07-11T15:10:02.846848Z",
        "url": "https://files.pythonhosted.org/packages/1e/dc/9958059094a344fc3901eba8776352897769598c6f0e0b70b03ac0953347/trapeza-0.0.6-cp36-cp36m-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63ba3d25a5bbc6c4b2a5554276046f00e9dcaea368883de790920262ab3448e4",
          "md5": "371e8f85d06bc1b810a8b118fe40972c",
          "sha256": "c00607deb35f41f019d4e933e55c4c05f47f8fe535649c930b11fa6ae72dc421"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "371e8f85d06bc1b810a8b118fe40972c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7375830,
        "upload_time": "2021-07-11T15:10:35",
        "upload_time_iso_8601": "2021-07-11T15:10:35.490641Z",
        "url": "https://files.pythonhosted.org/packages/63/ba/3d25a5bbc6c4b2a5554276046f00e9dcaea368883de790920262ab3448e4/trapeza-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f812f8bb9fba4122484f2c870159c829c751ddfdd708dd0be5d6bca9d4a235",
          "md5": "fcd893588c48a0cce71a132db1b3b3fd",
          "sha256": "a28a022f7d2cc41b391d34b18020f6e71b409d8188fb62e8374f724c2c255e67"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.7-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fcd893588c48a0cce71a132db1b3b3fd",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 8384949,
        "upload_time": "2021-07-11T16:14:12",
        "upload_time_iso_8601": "2021-07-11T16:14:12.653066Z",
        "url": "https://files.pythonhosted.org/packages/51/f8/12f8bb9fba4122484f2c870159c829c751ddfdd708dd0be5d6bca9d4a235/trapeza-0.0.7-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76631602e2dcb9d9cf2b9cd8e053b802f976070172f9595fdb6eabec98b8438d",
          "md5": "2672c809f3c7b8dd3c7db4a91ffea320",
          "sha256": "25a6c4f4c5f2e97800d6026463338473456795533e130d8b8a0a31ecb8fc0dd7"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "2672c809f3c7b8dd3c7db4a91ffea320",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6743859,
        "upload_time": "2021-07-11T16:14:42",
        "upload_time_iso_8601": "2021-07-11T16:14:42.183025Z",
        "url": "https://files.pythonhosted.org/packages/76/63/1602e2dcb9d9cf2b9cd8e053b802f976070172f9595fdb6eabec98b8438d/trapeza-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fee33877a543acaca3dd6ee8a36f7d3067a65d22e3f605400b2389eb40846cfe",
          "md5": "380db867fe4635fd8cf732c2973ecfbd",
          "sha256": "83d398678aa92494b102e29bc858ad4250ae282824f1b0b69e2ec90e7c777cde"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.8-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "380db867fe4635fd8cf732c2973ecfbd",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 8384946,
        "upload_time": "2021-07-11T16:52:24",
        "upload_time_iso_8601": "2021-07-11T16:52:24.708007Z",
        "url": "https://files.pythonhosted.org/packages/fe/e3/3877a543acaca3dd6ee8a36f7d3067a65d22e3f605400b2389eb40846cfe/trapeza-0.0.8-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d08806e9f8ab0020a06238d2bd0a74d644dc25ef8d4fab711481826b147e35c",
          "md5": "0d3c16ebdda19de6f544634d5298b37b",
          "sha256": "829784e4b1a5dd2f65083bc590fd7a6f5c13f87b627e1ddbb19a356345ae29ea"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0d3c16ebdda19de6f544634d5298b37b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6743930,
        "upload_time": "2021-07-11T16:52:54",
        "upload_time_iso_8601": "2021-07-11T16:52:54.112669Z",
        "url": "https://files.pythonhosted.org/packages/5d/08/806e9f8ab0020a06238d2bd0a74d644dc25ef8d4fab711481826b147e35c/trapeza-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15121ba0173589b48cf62fbbfc0f20cd6a4c83ab2c29bc91c8c688b04fd7a7b4",
          "md5": "ed01ce823b9f503852a1af77a8a01d13",
          "sha256": "fd591f560096f8027ebc03a4b253e9c0aa836b4ee47ef60eb5ccad77eb13d4a4"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.9-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ed01ce823b9f503852a1af77a8a01d13",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": null,
        "size": 1599057,
        "upload_time": "2021-07-11T19:56:36",
        "upload_time_iso_8601": "2021-07-11T19:56:36.922712Z",
        "url": "https://files.pythonhosted.org/packages/15/12/1ba0173589b48cf62fbbfc0f20cd6a4c83ab2c29bc91c8c688b04fd7a7b4/trapeza-0.0.9-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b853e430364ab071fcad8ceee7615958b601e66e50f41395efe566ceb6dcddb",
          "md5": "5706f1533fd68b81d7c50c5cd5bfad67",
          "sha256": "38e61e144f366b1f04ad7ae5ce3a497afa748901120f91d3d0ea0e0b5117440d"
        },
        "downloads": -1,
        "filename": "trapeza-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "5706f1533fd68b81d7c50c5cd5bfad67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 906982,
        "upload_time": "2021-07-11T19:56:42",
        "upload_time_iso_8601": "2021-07-11T19:56:42.747275Z",
        "url": "https://files.pythonhosted.org/packages/8b/85/3e430364ab071fcad8ceee7615958b601e66e50f41395efe566ceb6dcddb/trapeza-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8fccae89a881d1318f7dee496bbc01c2420a3fb5b83358c25199e3412474da13",
        "md5": "c3bfcd13c3952206aad3355471e639e0",
        "sha256": "072c43403d7120b79b08a803c667fa661706484543fa3125a8812ca363187031"
      },
      "downloads": -1,
      "filename": "trapeza-0.0.11-cp37-cp37m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "c3bfcd13c3952206aad3355471e639e0",
      "packagetype": "bdist_wheel",
      "python_version": "cp37",
      "requires_python": null,
      "size": 1574084,
      "upload_time": "2021-07-11T20:05:04",
      "upload_time_iso_8601": "2021-07-11T20:05:04.094584Z",
      "url": "https://files.pythonhosted.org/packages/8f/cc/ae89a881d1318f7dee496bbc01c2420a3fb5b83358c25199e3412474da13/trapeza-0.0.11-cp37-cp37m-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31bd79c2a2a3c93a1468c149d3d4afe062650bbf040e1df7225761ef41b3e848",
        "md5": "79fbc133631f8c8500c309e0acd8430c",
        "sha256": "6a8a12924f58af0e89798beb7da65c5dea34f5035b730d677275e2a2f19c92b4"
      },
      "downloads": -1,
      "filename": "trapeza-0.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "79fbc133631f8c8500c309e0acd8430c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 905953,
      "upload_time": "2021-07-11T20:05:09",
      "upload_time_iso_8601": "2021-07-11T20:05:09.362594Z",
      "url": "https://files.pythonhosted.org/packages/31/bd/79c2a2a3c93a1468c149d3d4afe062650bbf040e1df7225761ef41b3e848/trapeza-0.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}