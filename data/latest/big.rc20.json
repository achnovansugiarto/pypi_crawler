{
  "info": {
    "author": null,
    "author_email": "Larry Hastings <larry@hastings.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "![# big](/resources/images/big.header.png)\n\n##### Copyright 2022-2023 by Larry Hastings\n\n**big** is a Python package, a grab-bag of useful technology\nI always want to have handy.\n\nFinally!  For years, I've copied-and-pasted all my little\nhelper functions between projects--we've all done it.\nBut now I've finally taken the time to consolidate all those\nuseful little functions into one big package, so they're always\nat hand, ready to use.\nAnd, since it's a public package, you can use 'em too!\n\nNot only that, but I've taken my time and re-thought and\nretooled a lot of these functions.  All the difficult-to-use,\noverspecialized, cheap hacks have been upgraded with elegant\nnew APIs and clever functionality.\n**big** is a real pleasure to use!\n\n**big** requires Python 3.6 or newer.  Its only dependency\nis `python-dateutil`, and that's optional.\n\n*Think big!*\n\n## Using big\n\nTo use **big**, just install the **big** package (and its dependencies)\nfrom PyPI using your favorite Python package manager.\n\nOnce **big** is installed, you can simply import it.  However, the\ntop-level **big** package doesn't contain anything but a version number.\nInternally **big** is broken up into submodules, aggregated together\nloosely by problem domain, and you can selectively import just the\nfunctions you want.  For example, if you only want to use the text functions,\njust import the **text** submodule:\n\n```Python\nimport big.text\n```\n\nIf you'd prefer to import everything all at once, simply import the\n**big.all** module.  This one module imports all the other modules,\nand imports all their symbols too.  So, one convenient way to work\nwith **big** is this:\n\n```Python\nimport big.all as big\n```\n\nThat will make every symbol defined in **big** accessible from the `big`\nobject. For example, if you want to use\n[`multisplit`,](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nyou can call it with just `big.multisplit`.\n\nYou can also use **big.all** with `import *`:\n\n```Python\nfrom big.all import *\n```\n\nbut that's up to you.\n\n**big** is licensed using the [MIT license.](https://opensource.org/licenses/MIT)\nYou're free to use it and even ship it in your own programs, as long as you leave my copyright\nnotice on the source code.\n\n# Index\n\n[`ascii_newlines`](#newlines)\n\n[`ascii_newlines_without_dos`](#newlines)\n\n[`ascii_whitespace`](#whitespace)\n\n[`ascii_whitespace_without_dos`](#whitespace)\n\n[`big.boundinnerclass`](#`bigboundinnerclass`)\n\n[`big.builtin`](#bigbuiltin)\n\n[`big.file`](#bigfile)\n\n[`big.graph`](#biggraph)\n\n[`big.heap`](#bigheap)\n\n[`big.itertools`](#bigitertools)\n\n[`big.scheduler`](#bigscheduler)\n\n[`big.text`](#bigtext)\n\n[`big.time`](#bigtime)\n\n[`BoundInnerClass`](#boundinnerclasscls)\n\n[`CycleError`](#cycleerror)\n\n[`datetime_ensure_timezone(d, timezone)`](#datetime_ensure_timezoned-timezone)\n\n[`datetime_set_timezone(d, timezone)`](#datetime_set_timezoned-timezone)\n\n[`Event(scheduler, event, time, priority, sequence)`](#eventscheduler-event-time-priority-sequence)\n\n[`Event.cancel()`](#eventcancel)\n\n[`fgrep(path, text, *, encoding=None, enumerate=False, case_insensitive=False)`](#fgreppath-text--encodingnone-enumeratefalse-case_insensitivefalse)\n\n[`file_mtime(path)`](#file_mtimepath)\n\n[`file_mtime_ns(path)`](#file_mtime_nspath)\n\n[`file_size(path)`](#file_sizepath)\n\n[`gently_title(s, *, apostrophes=None, double_quotes=None)`](#gently_titles-apostrophesnone-double_quotesnone)\n\n[`get_float(o, default=_sentinel)`](#get_floato-default_sentinel)\n\n[`get_int(o, default=_sentinel)`](#get_into-default_sentinel)\n\n[`get_int_or_float(o, default=_sentinel)`](#get_int_or_floato-default_sentinel)\n\n[`grep(path, pattern, *, encoding=None, enumerate=False, flags=0)`](#greppath-pattern--encodingnone-enumeratefalse-flags0)\n\n[`Heap(i=None)`](#heapinone)\n\n[`Heap.append(o)`](#heapappendo)\n\n[`Heap.clear()`](#heapclear)\n\n[`Heap.copy()`](#heapcopy)\n\n[`Heap.extend(i)`](#heapextendi)\n\n[`Heap.remove(o)`](#heapremoveo)\n\n[`Heap.popleft()`](#heappopleft)\n\n[`Heap.append_and_popleft(o)`](#heapappend_and_poplefto)\n\n[`Heap.popleft_and_append(o)`](#heappopleft_and_append0)\n\n[`Heap.queue`](#heapqueue)\n\n[`lines(s, separators=None, *, line_number=1, column_number=1, tab_width=8, **kwargs)`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs)\n\n[`lines_convert_tabs_to_spaces(li)`](#lines_convert_tabs_to_spacesli)\n\n[`lines_filter_comment_lines(li, comment_separators)`](#lines_filter_comment_linesli-comment_separators)\n\n[`lines_containing(li, s, *, invert=False)`](#lines_containingli-s--invertfalse)\n\n[`lines_grep(li, pattern, *, invert=False, flags=0)`](#lines_grepli-pattern--invertfalse-flags0)\n\n[`lines_rstrip(li)`](#lines_rstripli)\n\n[`lines_sort(li, *, reverse=False)`](#lines_sortli--reversefalse)\n\n[`lines_strip(li)`](#lines_stripli)\n\n[`lines_strip_comments(li, comment_separators, *, quotes=('\"', \"'\"), backslash='\\\\', rstrip=True, triple_quotes=True)`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n\n[`lines_strip_indent(li)`](#lines_strip_indentli)\n\n[`merge_columns(*columns, column_separator=\" \", overflow_response=OverflowResponse.RAISE, overflow_before=0, overflow_after=0)`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\n\n[`multipartition(s, separators, count=1, *, reverse=False, separate=True)`](#multipartitions-separators-count1--reverseFalse-separateTrue)\n\n[`multisplit(s, separators, *, keep=False, maxsplit=-1, reverse=False, separate=False, strip=False)`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\n\n[`multistrip(s, separators, left=True, right=True)`](#multistrips-separators-leftTrue-rightTrue)\n\n[`newlines`](#newlines)\n\n[`newlines_without_dos`](#newlines)\n\n[`normalize_whitespace(s, separators=None, replacement=None)`](#normalize_whitespaces-separatorsNone-replacementnone)\n\n[`parse_timestamp_3339Z(s, *, timezone=None)`](#parse_timestamp_3339zs--timezonenone)\n\n[`PushbackIterator(iterable=None)`](#pushbackiteratoriterablenone)\n\n[`PushbackIterator.next(default=None)`](#pushbackiteratornextdefaultnone)\n\n[`PushbackIterator.push(o)`](#pushbackiteratorpusho)\n\n[`pushd(directory)`](#pushddirectory)\n\n[`re_partition(text, pattern, count=1, *, flags=0, reverse=False)`](#re_partitiontext-pattern-count1--flags0-reversefalse)\n\n[`re_rpartition(text, pattern, count=1, *, flags=0)`](#re_rpartitiontext-pattern-count1--flags0)\n\n[`Regulator()`](#regulator)\n\n[`Regulator.now()`](#regulatornow)\n\n[`Regulator.sleep(t)`](#regulatorsleept)\n\n[`Regulator.wake()`](#regulatorwake)\n\n[`safe_mkdir(path)`](#safe_mkdirpath)\n\n[`safe_unlink(path)`](#safe_unlinkpath)\n\n[`Scheduler(regulator=default_regulator)`](#schedulerregulatordefault_regulator)\n\n[`Scheduler.schedule(o, time, *, absolute=False, priority=DEFAULT_PRIORITY)`](#schedulerscheduleo-time--absolutefalse-prioritydefault_priority)\n\n[`Scheduler.cancel(event)`](#schedulercancelevent)\n\n[`Scheduler.queue`](#schedulerqueue)\n\n[`Scheduler.non_blocking()`](#schedulernon_blocking)\n\n[`SingleThreadedRegulator()`](#singlethreadedregulator)\n\n[`split_quoted_strings(s, quotes=('\"', \"'\"), *, triple_quotes=True, backslash='\\\\')`](#split_quoted_stringss-quotes---triple_quotestrue-backslash)\n\n[`split_text_with_code(s, *, tab_width=8, allow_code=True, code_indent=4, convert_tabs_to_spaces=True)`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\n\n[`timestamp_3339Z(t=None, want_microseconds=None)`](#timestamp_3339ztnone-want_microsecondsnone)\n\n[`timestamp_human(t=None, want_microseconds=None)`](#timestamp_humantnone-want_microsecondsnone)\n\n[`ThreadSafeRegulator()`](#threadsaferegulator)\n\n[`TopologicalSorter(graph=None)`](#topologicalsortergraphnone)\n\n[`TopologicalSorter.copy()`](#topologicalsortercopy)\n\n[`TopologicalSorter.cycle()`](#topologicalsortercycle)\n\n[`TopologicalSorter.print()`](#topologicalsorterprintprintprint)\n\n[`TopologicalSorter.remove(node)`](#topologicalsorterremovenode)\n\n[`TopologicalSorter.reset()`](#topologicalsorterreset)\n\n[`TopologicalSorter.View`](#topologicalsorterview-1)\n\n[`TopologicalSorter.view()`](#topologicalsorterview)\n\n[`TopologicalSorter.View.close()`](#topologicalsorterviewclose)\n\n[`TopologicalSorter.View.copy()`](#topologicalsorterviewcopy)\n\n[`TopologicalSorter.View.done(*nodes)`](#topologicalsorterviewdonenodes)\n\n[`TopologicalSorter.View.print(print=print)`](#topologicalsorterviewprintprintprint)\n\n[`TopologicalSorter.View.ready()`](#topologicalsorterviewready)\n\n[`TopologicalSorter.View.reset()`](#topologicalsorterviewreset)\n\n[`touch(path)`](#touchpath)\n\n[`translate_filename_to_exfat(s)`](#translate_filename_to_exfats)\n\n[`translate_filename_to_unix(s)`](#translate_filename_to_unixs)\n\n[`try_float(o)`](#try_floato)\n\n[`try_int(o)`](#try_into)\n\n[`UnboundInnerClass`](#unboundinnerclasscls)\n\n[`utf8_newlines`](#newlines)\n\n[`utf8_newlines_without_dos`](#newlines)\n\n[`utf8_whitespace`](#whitespace)\n\n[`utf8_whitespace_without_dos`](#whitespace)\n\n[`whitespace`](#whitespace)\n\n[`whitespace_without_dos`](#whitespace)\n\n[`wrap_words(words, margin=79, *, two_spaces=True)`](#wrap_wordswords-margin79--two_spacestrue)\n\n[**The `multi-` family of functions**](#The-multi--family-of-functions)\n\n[**`lines` and lines modifier functions**](#lines-and-lines-modifier-functions)\n\n[**Word wrapping and formatting**](#word-wrapping-and-formatting)\n\n[**Bound inner classes**](#bound-inner-classes)\n\n[**Enhanced `TopologicalSorter`**](#enhanced-topologicalsorter)\n\n\n# API Reference\n\n\n## `big.all`\n\nThis submodule doesn't define any of its own symbols.  Instead, it\nimports every other submodule in **big**, and uses `import *` to\nimport every symbol from every other submodule, too.  Every\npublic symbol in **big** is available in `big.all`.\n\n\n## `big.boundinnerclass`\n\nClass decorators that implement bound inner classes.  See the\n[**Bound inner classes**](#bound-inner-classes)\ndeep-dive for more information.\n\n#### `BoundInnerClass(cls)`\n\n> Class decorator for an inner class.  When accessing the inner class\n> through an instance of the outer class, \"binds\" the inner class to\n> the instance.  This changes the signature of the inner class's `__init__`\n> from\n> ```Python\n> def __init__(self, *args, **kwargs):`\n> ```\n> to\n> ```Python\n> def __init__(self, outer, *args, **kwargs):\n> ```\n> where `outer` is the instance of the outer class.\n\n#### `UnboundInnerClass(cls)`\n\n> Class decorator for an inner class that prevents binding\n> the inner class to an instance of the outer class.\n>\n> Subclasses of a class decorated with `BoundInnerClass` must always\n> be decorated with either `BoundInnerClass` or `UnboundInnerClass`.\n\n\n## `big.builtin`\n\nFunctions for working with builtins.  (Named `builtin` to avoid a\nname collision with the `builtins` module.)\n\nIn general, the idea with these functions is a principle I first\nread about in either\n[Code Complete](http://aroma.vn/web/wp-content/uploads/2016/11/code-complete-2nd-edition-v413hav.pdf)\nor\n[Writing Solid Code:](http://cs.brown.edu/courses/cs190/2008/documents/restricted/Writing%20Solid%20Code.pdf)\n\n> *Don't associate with losers.*\n\nThe intent here is, try to design APIs where it's impossible to call them\nthe wrong way.  Restrict the inputs to your functions to values you can\nalways handle, and you won't ever have to return an error.\n\nThe functions in this sub-module are designed to always work.  None of\nthem should ever raise an exception--no matter *what* nonsense you pass in.\n(But don't take that as a challenge!)\n\n#### `get_float(o, default=_sentinel)`\n\n> Returns `float(o)`, unless that conversion fails,\n> in which case returns the default value.  If\n> you don't pass in an explicit default value,\n> the default value is `o`.\n\n#### `get_int(o, default=_sentinel)`\n\n> Returns `int(o)`, unless that conversion fails,\n> in which case returns the default value.  If\n> you don't pass in an explicit default value,\n> the default value is `o`.\n\n#### `get_int_or_float(o, default=_sentinel)`\n\n> Converts `o` into a number, preferring an int to a float.\n>\n> If `o` is already an int or float, returns `o` unchanged.  Otherwise,\n> tries `int(o)`.  If that conversion succeeds, returns the result.\n> Otherwise, tries `float(o)`.  If that conversion succeeds, returns\n> the result.  Otherwise returns the default value.  If you don't\n> pass in an explicit default value, the default value is `o`.\n\n#### `try_float(o)`\n\n> Returns `True` if `o` can be converted into a float,\n> and `False` if it can't.\n\n#### `try_int(o)`\n\n> Returns `True` if `o` can be converted into an int,\n> and `False` if it can't.\n\n\n## `big.file`\n\nFunctions for working with files, directories, and I/O.\n\n#### `fgrep(path, text, *, encoding=None, enumerate=False, case_insensitive=False)`\n\n> Find the lines of a file that match some text, like the UNIX `fgrep` utility\n> program.\n>\n> `path` should be an object representing a path to an existing file, one of:\n>\n> * a string,\n> * a bytes object, or\n> * a `pathlib.Path` object.\n>\n> `text` should be either string or bytes.\n>\n> `encoding` is used as the file encoding when opening the file.\n>\n> if `text` is a str, the file is opened in text mode.\n> if `text` is a bytes object, the file is opened in binary mode.\n> `encoding` must be `None` when the file is opened in binary mode.\n>\n> If `case_insensitive` is true, perform the search in a case-insensitive\n> manner.\n>\n> Returns a list of lines in the file containing `text`.  The lines are either\n> strings or bytes objects, depending on the type of `pattern`.  The lines\n> have their newlines stripped but preserve all other whitespace.\n>\n> If `enumerate` is true, returns a list of tuples of (line_number, line).\n> The first line of the file is line number 1.\n>\n> For simplicity of implementation, the entire file is read in to memory\n> at one time.  If `case_insensitive` is True, a lowercased copy is also used.\n\n#### `file_mtime(path)`\n\n> Returns the modification time of `path`, in seconds since the epoch.\n> Note that seconds is a float, indicating the sub-second with some\n> precision.\n\n#### `file_mtime_ns(path)`\n\n> Returns the modification time of `path`, in nanoseconds since the epoch.\n\n#### `file_size(path)`\n\n> Returns the size of the file at `path`, as an integer representing the\n> number of bytes.\n\n#### `grep(path, pattern, *, encoding=None, enumerate=False, flags=0)`\n\n> Look for matches to a regular expression pattern in the lines of a file,\n> like the UNIX `grep` utility program.\n>\n> `path` should be an object representing a path to an existing file, one of:\n>\n> * a string,\n> * a bytes object, or\n> * a `pathlib.Path` object.\n>\n> `pattern` should be an object containing a regular expression, one of:\n> * a string,\n> * a bytes object, or\n> * an `re.Pattern`, initialized with either `str` or `bytes`.\n>\n> `encoding` is used as the file encoding when opening the file.\n>\n> if `pattern` uses a `str`, the file is opened in text mode.\n> if `pattern` uses a bytes object, the file is opened in binary mode.\n> `encoding` must be `None` when the file is opened in binary mode.\n>\n> `flags` is passed in as the `flags` argument to `re.compile` if `pattern`\n> is a string or bytes.  (It's ignored if `pattern` is an `re.Pattern` object.)\n>\n> Returns a list of lines in the file matching the pattern.  The lines\n> are either strings or bytes objects, depending on the type of `text`.\n> The lines have their newlines stripped but preserve all other whitespace.\n>\n> If `enumerate` is true, returns a list of tuples of `(line_number, line)`.\n> The first line of the file is line number 1.\n>\n> For simplicity of implementation, the entire file is read in to memory\n> at one time.\n>\n> Tip: to perform a case-insensitive pattern match, pass in the\n> `re.IGNORECASE` flag into flags for this function (if pattern is a string\n> or bytes) or when creating your regular expression object (if pattern is\n> an `re.Pattern` object.\n>\n> (In older versions of Python, `re.Pattern` was a private type called\n> `re._pattern_type`.)\n\n#### `pushd(directory)`\n\n> A context manager that temporarily changes the directory.\n> Example:\n>\n> ```Python\n> with big.pushd('x'):\n>     pass\n> ````\n>\n> This would change into the `'x'` subdirectory before\n> executing the nested block, then change back to\n> the original directory after the nested block.\n>\n> You can change directories in the nested block;\n> this won't affect pushd restoring the original current\n> working directory upon exiting the nested block.\n\n#### `safe_mkdir(path)`\n\n> Ensures that a directory exists at `path`.\n> If this function returns and doesn't raise,\n> it guarantees that a directory exists at `path`.\n>\n> If a directory already exists at `path`,\n> does nothing.\n>\n> If a file exists at `path`, unlinks it\n> then creates the directory.\n>\n> If the parent directory doesn't exist,\n> creates it, then creates `path`.\n>\n> This function can still fail:\n>\n> * 'path' could be on a read-only filesystem.\n> * You might lack the permissions to create `path`.\n> * You could ask to create the directory 'x/y'\n>   and 'x' is a file (not a directory).\n\n#### `safe_unlink(path)`\n\n> Unlinks `path`, if `path` exists and is a file.\n\n#### `touch(path)`\n\n> Ensures that `path` exists, and its modification time is the current time.\n>\n> If `path` does not exist, creates an empty file.\n>\n> If `path` exists, updates its modification time to the current time.\n\n#### `translate_filename_to_exfat(s)`\n\n> Ensures that all characters in s are legal for a FAT filesystem.\n>\n> Returns a copy of `s` where every character not allowed in a FAT\n> filesystem filename has been replaced with a character (or characters)\n> that are permitted.\n\n#### `translate_filename_to_unix(s)`\n\n> Ensures that all characters in s are legal for a UNIX filesystem.\n>\n> Returns a copy of `s` where every character not allowed in a UNIX\n> filesystem filename has been replaced with a character (or characters)\n> that are permitted.\n\n\n## `big.graph`\n\nA drop-in replacement for Python's\n[`graphlib.TopologicalSorter`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter)\nwith an enhanced API.  This version of `TopologicalSorter` allows modifying the\ngraph at any time, and supports multiple simultaneous *views,* allowing\niteration over the graph more than once.\n\nSee the [**Enhanced `TopologicalSorter`**](#enhanced-topologicalsorter) deep-dive for more information.\n\n#### `CycleError`\n\n> Exception thrown by `TopologicalSorter` when it detects a cycle.\n\n#### `TopologicalSorter(graph=None)`\n\n> An object representing a directed graph of nodes.  See Python's\n> [`graphlib.TopologicalSorter`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter)\n> for concepts and the basic API.\n\nNew methods on `TopologicalSorter`:\n\n#### `TopologicalSorter.copy()`\n\n> Returns a shallow copy of the graph.  The copy also duplicates\n> the state of `get_ready` and `done`.\n\n#### `TopologicalSorter.cycle()`\n\n> Checks the graph for cycles.  If no cycles exist, returns None.\n> If at least one cycle exists, returns a tuple containing nodes\n> that constitute a cycle.\n\n#### `TopologicalSorter.print(print=print)`\n\n> Prints the internal state of the graph.  Used for debugging.\n>\n> `print` is the function used for printing;\n> it should behave identically to the builtin `print` function.\n\n#### `TopologicalSorter.remove(node)`\n\n> Remove `node` from the graph.\n>\n> If any node `P` depends on a node `N`, and `N` is removed,\n> this dependency is also removed, but `P` is not\n> removed from the graph.\n>\n> remove() works but it's slow (O(N)).\n> TopologicalSorter is optimized for fast adds and fast views.\n\n#### `TopologicalSorter.reset()`\n\nResets `get_ready` and `done` to their initial state.\n\n#### `TopologicalSorter.view()`\n\n> Returns a new `View` object on this graph.\n\n#### `TopologicalSorter.View`\n\n> A view on a `TopologicalSorter` graph object.\n> Allows iterating over the nodes of the graph\n> in dependency order.\n\nMethods on a `View` object:\n\n#### `TopologicalSorter.View.__bool__()`\n\n> Returns `True` if more work can be done in the\n> view--if there are nodes waiting to be yielded by\n> `get_ready`, or waiting to be returned by `done`.\n>\n> Aliased to `TopologicalSorter.is_active` for compatibility\n> with graphlib.\n\n#### `TopologicalSorter.View.close()`\n\n> Closes the view.  A closed view can no longer be used.\n\n#### `TopologicalSorter.View.copy()`\n\n> Returns a shallow copy of the view, duplicating its current state.\n\n#### `TopologicalSorter.View.done(*nodes)`\n\n> Marks nodes returned by `ready` as \"done\",\n> possibly allowing additional nodes to be available\n> from `ready`.\n\n#### `TopologicalSorter.View.print(print=print)`\n\n> Prints the internal state of the view, and its graph.\n> Used for debugging.\n>\n> `print` is the function used for printing;\n> it should behave identically to the builtin `print` function.\n\n#### `TopologicalSorter.View.ready()`\n\n> Returns a tuple of \"ready\" nodes--nodes with no\n> predecessors, or nodes whose predecessors have all\n> been marked \"done\".\n>\n> Aliased to `TopologicalSorter.get_ready` for\n> compatibility with `graphlib`.\n\n#### `TopologicalSorter.View.reset()`\n\n> Resets the view to its initial state,\n> forgetting all \"ready\" and \"done\" state.\n\n\n## `big.heap`\n\nFunctions for working with heap objects.\nWell, just one heap object really.\n\n#### `Heap(i=None)`\n\n> An object-oriented wrapper around the `heapq` library, designed to be\n> easy to use--and easy to remember how to use.  The `heapq` library\n> implements a [binary heap](https://en.wikipedia.org/wiki/Binary_heap),\n> a data structure used for sorting;\n> you add objects to the heap, and you can then remove\n> objects in sorted order.  Heaps are useful because they have are efficient\n> both in space and in time; they're also inflexible, in that iterating over\n> the sorted items is destructive.\n>\n> Big's `Heap` API mimics the `list` and `collections.deque` objects;\n> this way, all you need to remember is \"it works kinda like a `list` object\".\n> You `append` new items to the heap, then `popleft` them off in sorted order.\n>\n> By default `Heap` creates an empty heap.  If you pass in an iterable `i`\n> to the constructor, this is equivalent to calling the `extend(i)` on the\n> freshly-constructed `Heap`.\n>\n> In addition to the below methods, `Heap` objects support iteration,\n> `len`, the `in` operator, and use as a boolean expression.  You can\n> also index or slice into a `Heap` object, which behaves as if the\n> heap is a list of objects in sorted order.  Getting the first item\n> (`Heap[0]`, aka *peek*) is cheap, the other operations can get very\n> expensive.\n>\n> Methods on a `Heap` object:\n\n#### `Heap.append(o)`\n\n> Adds object `o` to the heap.\n\n#### `Heap.clear()`\n\n> Removes all objects from the heap,\n> resetting it to empty.\n\n#### `Heap.copy()`\n\n> Returns a shallow copy of the heap.\n> Only duplicates the heap data structures itself;\n> does not duplicate the objects *in* the heap.\n\n#### `Heap.extend(i)`\n\n> Adds all the objects from the iterable `i` to the heap.\n\n#### `Heap.remove(o)`\n\n> If object `o` is in the heap, removes it.  If `o` is not\n> in the heap, raises `ValueError`.\n\n#### `Heap.popleft()`\n\n> If the heap is not empty, returns the first item in the\n> heap in sorted order.  If the heap is empty, raises `IndexError`.\n\n#### `Heap.append_and_popleft(o)`\n\n> Equivalent to calling `Heap.append(o)` immediately followed\n> by `Heap.popleft()`.  If `o` is smaller than any other object\n> in the heap at the time it's added, this will return `o`.\n\n#### `Heap.popleft_and_append(o)`\n\n> Equivalent to calling `Heap.popleft()` immediately followed\n> by `Heap.append(o)`.  This method will *never* return `o`,\n> unless `o` was already in the heap before the method was called.\n\n#### `Heap.queue`\n\n> Not a method, a property.  Returns a copy of the contents\n> of the heap, in sorted order.\n\n\n## `big.itertools`\n\nFunctions and classes for working with iteration.\nOnly one entry so far.\n\n#### `PushbackIterator(iterable=None)`\n\n> Wraps any iterator, allowing you to push items back on the iterator.\n> This allows you to \"peek\" at the next item (or items); you can get the\n> next item, examine it, and then push it back.  If any objects have\n> been pushed onto the iterator, they are yielded first, before attempting\n> to yield from the wrapped iterator.\n>\n> Pass in any `iterable` to the constructor.  Passing in an `iterable`\n> of `None` means the `PushbackIterator` is created in an exhausted state.\n>\n> When the wrapped `iterable` is exhausted (or if you passed in `None`\n> to the constructor) you can still call push to add new items, at which\n> point the `PushBackIterator` can be iterated over again.\n>\n> In addition to the following methods, `PushbackIterator` supports\n> the iterator protocol and testing for truth.  A `PushbackIterator`\n> is true if iterating over it will yield at least one value.\n\n#### `PushbackIterator.next(default=None)`\n\n> Equivalent to `next(PushbackIterator)`,\n> but won't raise `StopIteration`.\n> If the iterator is exhausted, returns\n> the `default` argument.\n\n#### `PushbackIterator.push(o)`\n\n> Pushes a value into the iterator's internal stack.\n> When a `PushbackIterator` is iterated over, and there are\n> any pushed values, the top value on the stack will be popped\n> and yielded.  `PushbackIterator` only yields from the\n> iterator it wraps when this internal stack is empty.\n\n\n## `big.scheduler`\n\n> A replacement for Python's `sched.scheduler` object,\n> adding full threading support and a modern Python interface.\n>\n> Python's `sched.scheduler` object was a clever idea for the\n> time.  It abstracted away the concept of time from its interface,\n> allowing it to be adapted to new schemes of measuring time--including\n> mock time used for testing.  Very nice!\n>\n> But unfortunately, `sched.scheduler` was designed in 1991--long\n> before multithreading was common, years before threading support\n> was added to Python.  Sadly its API isn't flexible enough to\n> correctly handle some scenarios:\n>\n> * If one thread has called `sched.scheduler.run`,\n>   and the next scheduled event will occur at time **T**,\n>   and a second thread schedules a new event which\n>   occurs at a time < **T**, `sched.scheduler.run` won't\n>   return any events to the first thread until time **T**.\n> * If one thread has called `sched.scheduler.run`,\n>   and the next scheduled event will occur at time **T**,\n>   and a second thread cancels all events,\n>   `sched.scheduler.run` won't exit until time **T**.\n>\n> Also, `sched.scheduler` is thirty years behind the times in\n> Python API design--its design predates many common modern\n> Python conventions.  Its events are callbacks, which it\n> calls directly.  `Scheduler` fixes this: its events are\n> objects, and you iterate over the `Scheduler` object to receive\n> events as they become due.\n>\n> `Scheduler` also benefits from thirty years of improvements\n> to `sched.scheduler`.  In particular, big reimplements the\n> bulk of the `sched.scheduler` test suite, to ensure that\n> `Scheduler` never repeats the historical problems discovered\n> over the lifetime of `sched.scheduler`.\n\n#### `Event(scheduler, event, time, priority, sequence)`\n\n> An object representing a scheduled event in a `Scheduler`.\n> You shouldn't need to create them manually; `Event` objects\n> are created automatically when you add events to a `Scheduler`.\n>\n> Supports one method:\n\n#### `Event.cancel()`\n\n> Cancels this event.  If this event has already been canceled,\n> raises `ValueError`.\n\n#### `Regulator()`\n\n> An abstract base class for `Scheduler` regulators.\n>\n> A \"regulator\" handles all the details about time\n> for a `Scheduler`.  `Scheduler` objects don't actually\n> understand time; it's all abstracted away by the\n> `Regulator`.\n>\n> You can implement your own `Regulator` and use it\n> with `Scheduler`.  Your `Regulator` subclass needs to\n> implement a minimum of three methods: `now`,\n> `sleep`, and `wake`.  It must also provide an\n> attribute called 'lock'.  The lock must implement\n> the context manager protocol, and should ensure thread\n> safety for the `Regulator`.  (`Scheduler` will only\n> request the `Regulator`'s lock if it's not already\n> holding it.  Put another way, the `Regulator` doesn't\n> need to be a \"reentrant\" lock, aka a \"recursive\" lock.)\n>\n> Normally a `Regulator` represents time using\n> a floating-point number, representing a fractional\n> number of seconds since some epoch.  But this\n> isn't strictly necessary.  Any Python object that\n> fulfills these requirements will work:\n>\n> * The time class must implement `__le__`, `__eq__`, `__add__`,\n> and `__sub__`, and these operations must be consistent in the\n> same way they are for number objects.\n> * If `a` and `b` are instances of the time class,\n> and `a.__le__(b)` is true, then `a` must either be\n> an earlier time, or a smaller interval of time.\n> * The time class must also implement rich comparison\n> with numbers (integers and floats), and `0` must\n> represent both the earliest time and a zero-length\n> interval of time.\n\n#### `Regulator.now()`\n\n> Returns the current time in local units.\n> Must be monotonically increasing; for any\n> two calls to now during the course of the\n> program, the later call must *never*\n> have a lower value than the earlier call.\n>\n> A `Scheduler` will only call this method while\n> holding this regulator's lock.\n\n#### `Regulator.sleep(t)`\n\n> Sleeps for some amount of time, in local units.\n> Must support an interval of `0`, which should\n> represent not sleeping.  (Though it's preferable\n> that an interval of `0` yields the rest of the\n> current thread's remaining time slice back to\n> the operating system.)\n>\n> If `wake` is called on this `Regulator` object while a\n> different thread has called this function to sleep,\n> `sleep` must abandon the rest of the sleep interval\n> and return immediately.\n>\n> A `Scheduler` will only call this method while\n> *not* holding this regulator's lock.\n\n#### `Regulator.wake()`\n\n> Aborts all current calls to `sleep` on this\n> `Regulator`, across all threads.\n>\n> A `Scheduler` will only call this method while\n> holding this regulator's lock.\n\n#### `Scheduler(regulator=default_regulator)`\n\n> Implements a scheduler.  The only argument is the\n> \"regulator\" object to use; the regulator abstracts away all\n> time-related details for the scheduler.  By default `Scheduler`\n> uses an instance of `SingleThreadedRegulator`,\n> which is not thread-safe.\n>\n> (If you need the scheduler to be thread-safe, pass in an\n> instance of a thread-safe `Regulator` class like\n> `ThreadSafeRegulator`.)\n>\n> In addition to the below methods, `Scheduler` objects support\n> being evaluated in a boolean context (they are true if they\n> contain any events), and they support being iterated over.\n> Iterating over a `Scheduler` object blocks until the next\n> event comes due, at which point the `Scheduler` yields that\n> event.  An empty `Scheduler` that is iterated over raises\n> `StopIteration`.  You can reuse `Scheduler` objects, iterating\n> over them until empty, then adding more objects and iterating\n> over them again.\n\n#### `Scheduler.schedule(o, time, *, absolute=False, priority=DEFAULT_PRIORITY)`\n\n> Schedules an object `o` to be yielded as an event by this `schedule` object\n> at some time in the future.\n>\n> By default the `time` value is a relative time value,\n> and is added to the current time; using a `time` value of 0\n> should schedule this event to be yielded immediately.\n>\n> If `absolute` is true, `time` is regarded as an absolute time value.\n>\n> If multiple events are scheduled for the same time, they will\n> be yielded by order of `priority`.  Lowever values of\n> `priority` represent higher priorities.  The default value\n> is `Scheduler.DEFAULT_PRIORITY`, which is 100.  If two events\n> are scheduled for the same time, and have the same priority,\n> `Scheduler` will yield the events in the order they were added.\n>\n> Returns an `Event` object, which can be used to cancel the event.\n\n#### `Scheduler.cancel(event)`\n\n> Cancels a scheduled event.  `event` must be an object\n> returned by this `Scheduler` object.  If `event` is not\n> currently scheduled in this `Scheduler` object,\n> raises `ValueError`.\n\n#### `Scheduler.queue`\n\n> A list of the currently scheduled `Event` objects,\n> in the order they will be yielded.\n\n#### `Scheduler.non_blocking()`\n\n> Returns an iterator for the events in the\n> `Scheduler` that only yields the events that\n> are currently due.  Never blocks; if the next\n> event is not due yet, raises `StopIteration`.\n\n### `SingleThreadedRegulator()`\n\n> An implementation of `Regulator` designed for\n> use in single-threaded programs.  It doesn't support\n> multiple threads, and in particular is not thread-safe.\n> But it's much higher performance\n> than thread-safe `Regulator` implementations.\n>\n> This `Regulator` isn't guaranteed to be safe\n> for use while in a signal-handler callback.\n\n### `ThreadSafeRegulator()`\n\n> A thread-safe implementation of `Regulator`\n> designed for use in multithreaded programs.\n>\n> This `Regulator` isn't guaranteed to be safe\n> for use while in a signal-handler callback.\n\n\n## `big.text`\n\n> Functions for working with text strings.  There are\n> several families of functions inside the `text` module;\n> for a higher-level view of those families, read the\n> following deep-dives:\n>\n> * [**The `multi-` family of functions**](#The-multi--family-of-functions)\n> * [**`lines` and lines modifier functions**](#lines-and-lines-modifier-functions)\n> * [**Word wrapping and formatting**](#word-wrapping-and-formatting)\n>\n> All the functions in `big.text` will work with either\n> `str` or `bytes` objects, except the three\n> [**Word wrapping and formatting**](#word-wrapping-and-formatting)\n> functions.  When working with `bytes`,\n> by default the functions will only work with ASCII\n> characters.\n\n#### `gently_title(s, *, apostrophes=None, double_quotes=None)`\n\n> Uppercase the first character of every word in `s`.\n> Leave the other letters alone.  s should be `str` or `bytes`.\n>\n> (For the purposes of this algorithm, words are\n> any blob of non-whitespace characters.)\n>\n> Capitalize the letter after an apostrophe if\n>\n> * the apostrophe is after whitespace or a\n> left parenthesis character (`'('`)\n> (or is the first letter of the string), or\n>\n> * if the apostrophe is after a letter O or D,\n> and that O or D is after whitespace (or is\n> the first letter of the string).  The O or D\n> here will also be capitalized.\n>\n> The first rule handles internally quoted strings:\n>\n>     He Said 'No I Did Not'\n>\n> and contractions that start with an apostrophe\n>\n>     'Twas The Night Before Christmas\n>\n> And the second rule handles certain Irish, French,\n> and Italian names.\n>\n>     Peter O'Toole\n>     Lord D'Arcy\n>\n> Capitalize the letter after a quote mark if\n> the quote mark is after whitespace (or is the\n> first letter of a string).\n>\n> A run of consecutive apostrophes and/or\n> quote marks is considered one quote mark for\n> the purposes of capitalization.\n>\n> If specified, `apostrophes` should be a `str`\n> or `bytes` object containing characters that\n> should be considered apostrophes.  If `apostrophes`\n> is false, and `s` is `bytes`, `apostrophes` is set to `\"'\"`.\n> If `apostrophes` is false and s is `str`, `apostrophes`\n> is set to a string containing these Unicode apostrophe code points:\n>     '‘’‚‛\n>\n> If specified, `double_quotes` should be a `str`\n> or `bytes` object containing characters that\n> should be considered double-quote characters.\n> If `double_quotes` is false, and `s` is `bytes`,\n> `double_quotes` is set to \"'\".\n> If `double_quotes` is false and `s` is `str`, double_quotes\n> is set to a string containing these Unicode double quote code points:\n>     \"“”„‟«»‹›\n\n#### `lines(s, separators=None, *, line_number=1, column_number=1, tab_width=8, **kwargs)`\n\n> A \"lines iterator\" object.  Splits s into lines, and iterates yielding those lines.\n>\n> `s` can be `str`, `bytes`, or any iterable.\n>\n> By default, if `s` is `str`, splits `s` by all Unicode line break characters.\n> If `s` is `bytes`, splits `s` by all ASCII line break characters.\n>\n> If `s` is neither str nor bytes, `s` must be an iterable;\n> lines yields successive elements of `s` as lines.\n>\n> `separators`, if not `None`, must be an iterable of strings of the\n> same type as `s`.  `lines` will split `s` using those strings as\n> separator strings (using\n> [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)).\n>\n> When iterated over, yields 2-tuples:\n>     (info, line)\n>\n> `info` is a `LineInfo` object, which contains three fields by\n> default:\n>\n> * `line` - the original line, never modified\n> * `line_number` - the line number of this line, starting at the\n> `line_number` passed in and adding 1 for each successive line\n> * `column_number` - the column this line starts on,\n> starting at the `column_number` passed in, and adjusted when\n> characters are removed from the beginning of `line`\n>\n> `tab_width` is not used by `lines` itself, but is stored\n> internally and may be used by other lines modifier functions\n> (e.g. `lines_convert_tabs_to_spaces`, `lines_strip_indent`).\n> Similarly, all keyword arguments passed in via `kwargs` are\n> stored internally and can be accessed by user-defined lines\n> modifier functions.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `LineInfo(line, line_number, column_number, **kwargs)`\n\n> The second object yielded by a\n> [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs)\n> iterator, containing metadata about the line.\n> You can add your own fields by passing them in\n> via `**kwargs`; you can also add new attributes\n> or modify existing attributes as needed from\n> inside a \"lines modifier\" function.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_convert_tabs_to_spaces(li)`\n\n> A lines modifier function.  Converts tabs to spaces for the lines\n> of a \"lines iterator\", using the `tab_width` passed in to\n> [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs).\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_filter_comment_lines(li, comment_separators)`\n\n> A lines modifier function.  Filters out comment lines from the\n> lines of a \"lines iterator\".  Comment lines are lines whose\n> first non-whitespace characters appear in the iterable of\n> `comment_separators` strings passed in.\n>\n> What's the difference between\n> [`lines_strip_comments`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n> and\n> [`lines_filter_comment_lines`](#lines_filter_comment_linesli-comment_separators)?\n>\n>  * [`lines_filter_comment_lines`](#lines_filter_comment_linesli-comment_separators)\n>    only recognizes lines that\n>    *start* with a comment separator (ignoring leading\n>    whitespace).  Also, it filters out those lines\n>    completely, rather than modifying the line.\n>  * [`lines_strip_comments`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n>    handles comment characters\n>    anywhere in the line, although it can ignore\n>    comments inside quoted strings.  It truncates the\n>    line but still always yields the line.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_containing(li, s, *, invert=False)`\n\n> A lines modifier function.  Only yields lines\n> that contain `s`.  (Filters out lines that\n> don't contain `s`.)\n>\n> If `invert` is true, returns the opposite--\n> filters out lines that contain `s`.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_grep(li, pattern, *, invert=False, flags=0)`\n\n> A lines modifier function.  Only yields lines\n> that match the regular expression `pattern`.\n> (Filters out lines that don't match `pattern`.)\n>\n> `pattern` can be `str`, `bytes`, or an `re.Pattern` object.\n> If `pattern` is not an `re.Pattern` object, it's compiled\n> with `re.compile(pattern, flags=flags)`.\n>\n> If `invert` is true, returns the opposite--\n> filters out lines that match `pattern`.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n>\n> (In older versions of Python, `re.Pattern` was a private type called\n> `re._pattern_type`.)\n\n#### `lines_rstrip(li)`\n\n> A lines modifier function.  Strips trailing whitespace from the\n> lines of a \"lines iterator\".\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_sort(li, *, reverse=False)`\n\n> A lines modifier function.  Sorts all\n> input lines before yielding them.\n>\n> Lines are sorted lexicographically,\n> from lowest to highest.\n> If `reverse` is true, lines are sorted\n> from highest to lowest.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_strip(li)`\n\n> A lines modifier function.  Strips leading and trailing whitespace\n> from the lines of a \"lines iterator\".\n>\n> If `lines_strip` removes leading whitespace from a line,\n> it updates `LineInfo.column_number` with the new starting\n> column number, and also adds a field to the `LinesInfo` object:\n>\n> * `leading` - the leading whitespace string that was removed\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_strip_comments(li, comment_separators, *, quotes=('\"', \"'\"), backslash='\\\\', rstrip=True, triple_quotes=True)`\n\n> A lines modifier function.  Strips comments from the lines\n> of a \"lines iterator\".  Comments are substrings that indicate\n> the rest of the line should be ignored; `lines_strip_comments`\n> truncates the line at the beginning of the leftmost comment\n> separator.\n>\n> If `rstrip` is true (the default), `lines_strip_comments` calls\n> the `rstrip()` method on `line` after it truncates the line.\n>\n> If `quotes` is true, it must be an iterable of quote characters.\n> (Each quote character *must* be a single character.)\n> `lines_strip_comments` will parse the line and ignore comment\n> characters inside quoted strings.  If `quotes` is false,\n> quote characters are ignored and `line_strip_comments` will truncate\n> anywhere in the line.\n>\n> `backslash` and `triple_quotes` are passed in to\n> `split_quoted_string`, which is used internally to detect the quoted\n> strings in the line.\n>\n> Sets a new field on the associated `LineInfo` object for every line:\n>\n>  * `comment` - the comment stripped from the line, if any.\n>     if no comment was found, `comment` will be an empty string.\n>\n> What's the difference between\n> [`lines_strip_comments`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n> and\n> [`lines_filter_comment_lines`](#lines_filter_comment_linesli-comment_separators)?\n>\n>  * [`lines_filter_comment_lines`](#lines_filter_comment_linesli-comment_separators)\n>    only recognizes lines that\n>    *start* with a comment separator (ignoring leading\n>    whitespace).  Also, it filters out those lines\n>    completely, rather than modifying the line.\n>  * [`lines_strip_comments`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n>    handles comment characters\n>    anywhere in the line, although it can ignore\n>    comments inside quoted strings.  It truncates the\n>    line but still always yields the line.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `lines_strip_indent(li)`\n\n> A lines modifier function.  Automatically measures and strips indents.\n>\n> Sets two new fields on the associated `LineInfo` object for every line:\n>\n> * `indent` - an integer indicating how many indents it's observed\n> * `leading` - the leading whitespace string that was removed\n>\n> Also updates LineInfo.column_number as needed.\n>\n> Uses an intentionally simple algorithm.\n> Only understands tab and space characters as indent characters.\n> Internally detabs to spaces first for consistency, using the\n> `tab_width` passed in to lines.\n>\n> You can only dedent out to a previous indent.\n> Raises `IndentationError` if there's an illegal dedent.\n>\n> For more information, see the deep-dive on\n> [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n\n#### `merge_columns(*columns, column_separator=\" \", overflow_response=OverflowResponse.RAISE, overflow_before=0, overflow_after=0)`\n\n> Merge n column tuples, with each column tuple being\n> formatted into its own column in the resulting string.\n> Returns a string.\n>\n> `columns` should be an iterable of column tuples.\n> Each column tuple should contain three items:\n> ```Python\n>     (text, min_width, max_width)\n> ```\n> `text` should be a single text string, with newline\n> characters separating lines. `min_width` and `max_width`\n> are the minimum and maximum permissible widths for that\n> column, not including the column separator (if any).\n>\n> Note that this function does not text-wrap the lines.\n>\n> `column_separator` is printed between every column.\n>\n> `overflow_strategy` tells merge_columns how to handle a column\n> with one or more lines that are wider than that column's `max_width`.\n> The supported values are:\n>\n> * `OverflowStrategy.RAISE`: Raise an OverflowError.  The default.\n> * `OverflowStrategy.INTRUDE_ALL`: Intrude into all subsequent columns\n>   on all lines where the overflowed column is wider than its `max_width`.\n> * `OverflowStrategy.DELAY_ALL`: Delay all columns after the overflowed\n>   column, not beginning any until after the last overflowed line\n>   in the overflowed column.\n>\n> When `overflow_strategy` is `INTRUDE_ALL` or `DELAY_ALL`, and\n> either `overflow_before` or `overflow_after` is nonzero, these\n> specify the number of extra lines before or after\n> the overflowed lines in a column.\n>\n> For more information, see the deep-dive on\n> [**Word wrapping and formatting.**](#word-wrapping-and-formatting)\n\n#### `multipartition(s, separators, count=1, *, reverse=False, separate=True)`\n\n> Like `str.partition`, but supports partitioning based on multiple\n> separator strings, and can partition more than once.\n>\n> `s` can be str or bytes.\n>\n> `separators` should be an iterable of objects of the same type as `s`.\n>\n> By default, if any of the strings in `separators` are found in `s`,\n> returns a tuple of three strings: the portion of `s` leading up to\n> the earliest separator, the separator, and the portion of `s` after\n> that separator.  Example:\n>\n>     multipartition('aXbYz', ('X', 'Y')) => ('a', 'X', 'bYz')\n>\n> If none of the separators are found in the string, returns\n> a tuple containing `s` unchanged followed by two empty strings.\n>\n> `multipartition` is *greedy:* if two or more separators appear at\n> the leftmost location in `s`, `multipartition` partitions using\n> the longest matching separator.  For example:\n>\n>     big.multipartition('wxabcyz', ('a', 'abc')) => `('wx', 'abc', 'yz')`\n>\n> Passing in an explicit `count` lets you control how many times\n> `multipartition` partitions the string.  `multipartition` will always\n> return a tuple containing `(2*count)+1` elements.\n> Passing in a `count` of 0 will always return a tuple containing `s`.\n>\n> If `separate` is true, multiple adjacent separator strings behave\n> like one separator.  Example:\n>\n>     big.text.multipartition('aXYbYXc', ('X', 'Y',), count=2, separate=False) => ('a', 'XY', 'b', 'YX', 'c')\n>     big.text.multipartition('aXYbYXc', ('X', 'Y',), count=2, separate=True ) => ('a', 'X', '', 'Y', 'bYXc')\n>\n> If `reverse` is true, multipartition behaves like `str.rpartition`.\n> It partitions starting on the right, scanning backwards through s\n> looking for separators.\n>\n> For more information, see the deep-dive on\n> [**The `multi-` family of functions.**](#The-multi--family-of-functions)\n\n#### `multisplit(s, separators, *, keep=False, maxsplit=-1, reverse=False, separate=False, strip=False)`\n\n> Splits strings like `str.split`, but with multiple separators and options.\n>\n> `s` can be `str` or `bytes`.\n>\n> `separators` should be an iterable.  Each element of `separators`\n> should be the same type as `text`.  If `separators` is a string or bytes\n> object, `multisplit` behaves as separators is a tuple containing each\n> individual character.\n>\n> Returns an iterator yielding the strings split from `s`.  If `keep`\n> is true (or `ALTERNATING`), and `strip` is false, joining these strings\n> together will recreate `s`.\n>\n> `multisplit` is *greedy:* if two or more separators start at the same\n> location in `s`, `multisplit` splits using the longest matching separator.\n> For example:\n>\n>     big.multisplit('wxabcyz', ('a', 'abc'))\n>\n> yields `'wx'` then `'yz'`.\n>\n> `keep` indicates whether or not multisplit should preserve the separator\n> strings in the strings it yields.  It supports four values:\n>\n>       false (the default)\n>            Discard the separators.\n>       true (apart from ALTERNATING and AS_PAIRS)\n>            Append the separators to the end of the split strings.\n>            You can recreate the original string by passing the\n>            list returned in to \"\".join .\n>       ALTERNATING\n>            Yield alternating strings in the output: strings consisting\n>            of separators, alternating with strings consisting of\n>            non-separators.  If \"separate\" is true, separator strings\n>            will contain exactly one separator, and non-separator strings\n>            may be empty; if \"separate\" is false, separator strings will\n>            contain one or more separators, and non-separator strings\n>            will never be empty, unless \"s\" was empty.\n>            You can recreate the original string by passing the\n>            list returned in to \"\".join .\n>       AS_PAIRS\n>            Yield 2-tuples containing a non-separator string and its\n>            subsequent separator string.  Either string may be empty;\n>            the separator string in the last 2-tuple will always be\n>            empty, and if \"s\" ends with a separator string, *both*\n>            strings in the final 2-tuple will be empty.\n>\n> `separate` indicates whether multisplit should consider adjacent\n> separator strings in `s` as one separator or as multiple separators\n> each separated by a zero-length string.  It supports two values:\n>\n>        false (the default)\n>            Multiple adjacent separators should behave as if they\n>            are one big separator.\n>        true\n>            Don't group separators together.  Each separator should\n>            split the string individually, even if there are no\n>            characters between two separators.\n>\n> `strip` indicates whether multisplit should strip separators from\n> the beginning and/or end of `s`.  It supports six values:\n>\n>        false (the default)\n>            Don't strip separators from the beginning or end of \"s\".\n>        true (apart from LEFT, RIGHT, and PROGRESSIVE)\n>            Strip separators from the beginning and end of \"s\"\n>            (similarly to `str.strip`).\n>        LEFT\n>            Strip separators only from the beginning of \"s\"\n>            (similarly to `str.lstrip`).\n>        RIGHT\n>            Strip separators only from the end of \"s\"\n>            (similarly to `str.rstrip`).\n>        PROGRESSIVE\n>            Strip from the beginning and end of \"s\", unless \"maxsplit\"\n>            is nonzero and the entire string is not split.  If\n>            splitting stops due to \"maxsplit\" before the entire string\n>            is split, and \"reverse\" is false, don't strip the end of\n>            the string. If splitting stops due to \"maxsplit\" before\n>            the entire string is split, and \"reverse\" is true, don't\n>            strip the beginning of the string.  (This is how str.strip\n>            and str.rstrip behave when you pass in sep=None .)\n>\n> `maxsplit` should be either an integer or `None`.  If `maxsplit` is an\n> integer greater than -1, multisplit will split `text` no more than\n> `maxsplit` times.\n>\n> `reverse` changes where `multisplit` starts splitting the string, and\n> what direction it moves through the string when parsing.\n>\n>        false (the default)\n>            Start splitting from the beginning of the string\n>            and parse moving right (towards the end).\n>        true\n>            Start splitting from the end of the string and\n>            parse moving left (towards the beginning).\n>\n>    Splitting starting from the end of the string and parsing to\n>    the left has two effects.  First, if `maxsplit` is a number\n>    greater than 0, the splits will start at the end of the string\n>    rather than the beginning.  Second, if there are overlapping\n>    instances of separators in the string, `multisplit` will prefer\n>    the rightmost separator rather than the left.  For example:\n>\n>        multisplit(\" x x \", (\" x \",), keep=big.ALTERNATING)\n>\n>    will split on the leftmost instance of `\" x \"`, yielding\n>\n>        \"\", \" x \", \"x \"\n>\n>    whereas\n>\n>        multisplit(\" x x \", (\" x \",), keep=big.ALTERNATING, reverse=True)\n>\n>    will split on the rightmost instance of `\" x \"`, yielding\n>\n>        \" x\", \" x \", \"\"\n>\n> For more information, see the deep-dive on\n> [**The `multi-` family of functions.**](#The-multi--family-of-functions)\n\n#### `multistrip(s, separators, left=True, right=True)`\n\n> Like `str.strip`, but supports stripping multiple substrings from `s`.\n>\n> Strips from the string `s` all leading and trailing instances of strings\n> found in `separators`.\n>\n> `s` should be str or bytes.\n>\n> `separators` should be an iterable of either `str` or `bytes`\n> objects matching the type of `s`.\n>\n> If `left` is a true value, strips all leading separators\n> from `s`.\n>\n> If `right` is a true value, strips all trailing separators\n> from `s`.\n>\n> Processing always stops at the first character that\n> doesn't match one of the separators.\n>\n> Returns a copy of `s` with the leading and/or trailing\n> separators stripped.  (If `left` and `right` are both\n> false, returns `s` unchanged.)\n>\n> For more information, see the deep-dive on\n> [**The `multi-` family of functions.**](#The-multi--family-of-functions)\n\n#### `newlines`\n\n> A list of all newline characters recognized by Python.\n> Includes many Unicode newline characters, like `'\\u2029'`\n> (a paragraph separator).  Useful as a list of separator\n> strings for `[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)` et al; `newlines` is specifically\n> used by the [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs) iterator constructor.\n>\n> **big** also defines `utf8_newlines`, which is `newlines`\n> with all strings encoded to UTF-8 (as bytes),\n> and `ascii_newlines`, with all strings converted into\n> bytes and all characters with code points greater than\n> 128 discarded.\n>\n> Note that `newlines` contains `'\\r\\n'`, the DOS sequence\n> of characters representing a newline.  This lets **big**\n> text-processing functions recognize this sequence as a\n> *single* newline marker, rather than as two *separate*\n> newline characters.  If you don't want this behavior,\n> you can use `newlines_without_dos` instead;\n> **big** also provides `utf8_newlines_without_dos` and\n> `ascii_newlines_without_dos`.\n\n\n#### `normalize_whitespace(s, separators=None, replacement=None)`\n\n> Returns `s`, but with every run of consecutive\n> separator characters turned into a replacement string.\n> By default turns all runs of consecutive whitespace\n> characters into a single space character.\n>\n> `s` may be `str` or `bytes`.\n> `separators` should be an iterable of either `str` or `bytes`\n> objects, matching `s`.\n> `replacement` should be either a `str` or `bytes` object,\n> also matching `s`, or `None` (the default).\n> If `replacement` is `None`, `normalize_whitespace` will use\n> a replacement string consisting of a single space character,\n> either `str` or `bytes` as appropriate.)\n>\n> Leading or trailing runs of separator characters will\n> be replaced with the replacement string, e.g.:\n>\n>     normalize_whitespace(\"   a    b   c\") == \" a b c\"\n\n#### `re_partition(text, pattern, count=1, *, flags=0, reverse=False)`\n\n> Like `str.partition`, but `pattern` is matched as a regular expression.\n>\n> `text` can be a string or a bytes object.\n>\n> `pattern` can be a string, bytes, or an `re.Pattern` object.\n>\n> `text` and `pattern` (or `pattern.pattern`) must be the same type.\n>\n> If `pattern` is found in text, returns a tuple\n> ```Python\n>     (before, match, after)\n> ```\n> where `before` is the text before the matched text,\n> `match` is the `re.Match` object resulting from the match, and\n> `after` is the text after the matched text.\n>\n> If `pattern` appears in `text` multiple times,\n> `re_partition` will match against the first (leftmost)\n> appearance.\n>\n> If `pattern` is not found in `text`, returns a tuple\n> ```Python\n>     (text, None, '')\n> ```\n> where the empty string is `str` or `bytes` as appropriate.\n>\n> Passing in an explicit `count` lets you control how many times\n> `re_partition` partitions the string.  `re_partition` will always\n> return a tuple containing `(2*count)+1` elements, and\n> odd-numbered elements will be either `re.Match` objects or `None`.\n> Passing in a `count` of 0 will always return a tuple containing `s`.\n>\n> If `pattern` is a string or bytes object, `flags` is passed in\n> as the `flags` argument to `re.compile`.\n>\n> If `reverse` is true, partitions starting at the right,\n> like [`re_rpartition`](#re_rpartitiontext-pattern-count1--flags0).\n>\n> (In older versions of Python, `re.Pattern` was a private type called\n> `re._pattern_type`.)\n\n#### `re_rpartition(text, pattern, count=1, *, flags=0)`\n\n> Like `str.rpartition`, but `pattern` is matched as a regular expression.\n>\n> `text` can be a string or a bytes object.\n>\n> `pattern` can be a string, bytes, or an `re.Pattern` object.\n>\n> `text` and `pattern` (or `pattern.pattern`) must be the same type.\n>\n> If `pattern` is found in `text`, returns a tuple\n> ```Python\n>     (before, match, after)\n> ```\n> where `before` is the text before the matched text,\n> `match` is the re.Match object resulting from the match, and\n> `after` is the text after the matched text.\n>\n> If `pattern` appears in `text` multiple times,\n> `re_partition` will match against the last (rightmost)\n> appearance.\n>\n> If `pattern` is not found in `text`, returns a tuple\n> ```Python\n>     ('', None, text)\n> ```\n> where the empty string is `str` or `bytes` as appropriate.\n>\n> Passing in an explicit `count` lets you control how many times\n> `re_rpartition` partitions the string.  `re_rpartition` will always\n> return a tuple containing `(2*count)+1` elements, and\n> odd-numbered elements will be either `re.Match` objects or `None`.\n> Passing in a `count` of 0 will always return a tuple containing `s`.\n>\n> If `pattern` is a string, `flags` is passed in\n> as the `flags` argument to `re.compile`.\n>\n> (In older versions of Python, `re.Pattern` was a private type called\n> `re._pattern_type`.)\n\n#### `split_quoted_strings(s, quotes=('\"', \"'\"), *, triple_quotes=True, backslash='\\\\')`\n\n> Splits s into quoted and unquoted segments.  Returns an iterator yielding 2-tuples:\n>     (is_quoted, segment)\n> where `segment` is a substring of `s`, and `is_quoted` is true if the segment is\n> quoted.  Joining all the segments together recreates `s`.\n>\n> `quotes` is an iterable of quote separators.  Note that `split_quoted_strings`\n> only supports quote *characters,* as in, each quote separator must be exactly\n> one character long.\n>\n> If `triple_quotes` is true, supports \"triple-quoted\" strings like Python.\n>\n> If `backslash` is a character, this character will quoting characters inside\n> a quoted string, like the backslash character inside strings in Python.\n\n#### `split_text_with_code(s, *, tab_width=8, allow_code=True, code_indent=4, convert_tabs_to_spaces=True)`\n\n> Splits the string `s` into individual words,\n> suitable for feeding into\n> [`wrap_words`](#wrap_wordswords-margin79--two_spacestrue).\n>\n> Paragraphs indented by less than `code_indent` will be\n> broken up into individual words.\n>\n> If `allow_code` is true, paragraphs indented by at least\n> `code_indent` spaces will preserve their whitespace:\n> internal whitespace is preserved, and the newline is\n> preserved.  (This will preserve the formatting of code\n> examples when these words are rejoined into lines by\n> [`wrap_words`](#wrap_wordswords-margin79--two_spacestrue).)\n>\n> For more information, see the deep-dive on\n> [**Word wrapping and formatting.**](#word-wrapping-and-formatting)\n\n#### `whitespace`\n\n> A list of all whitespace characters recognized by Python.\n> Includes many Unicode whitespace strings, like `'\\xa0'`\n> (a non-breaking space).  Useful as a list of separator\n> strings for `[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)` et al.\n>\n> **big** also defines `utf8_whitespace`, which is `whitespace`\n> with all strings encoded to UTF-8 (as bytes),\n> and `ascii_whitespace`, with all strings converted into\n> bytes and all characters with code points greater than\n> 128 discarded.\n>\n> Note that `whitespace` contains `'\\r\\n'`, the DOS sequence\n> of characters representing a newline.  This lets **big**\n> text-processing functions recognize this sequence as a\n> *single* whitespace marker, rather than as two *separate*\n> whitespace characters.  If you don't want this behavior,\n> you can use `whitespace_without_dos` instead;\n> **big** also provides `utf8_whitespace_without_dos` and\n> `ascii_whitespace_without_dos`.\n\n#### `wrap_words(words, margin=79, *, two_spaces=True)`\n\n> Combines `words` into lines and returns the result as a string.\n> Similar to `textwrap.wrap`.\n>\n> `words` should be an iterator containing text split at word\n> boundaries.  Example:\n> ```Python\n>      \"this is an example of text split at word boundaries\".split()\n> ```\n>\n> A single `'\\n'` indicates a line break.\n> If you want a paragraph break, embed two `'\\n'` characters in a row.\n>\n> `margin` specifies the maximum length of each line. The length of\n> every line will be less than or equal to `margin`, unless the length\n> of an individual element inside `words` is greater than `margin`.\n>\n> If `two_spaces` is true, elements from `words` that end in\n> sentence-ending punctuation (`'.'`, `'?'`, and `'!'`)\n> will be followed by two spaces, not one.\n>\n> Elements in `words` are not modified; any leading or trailing\n> whitespace will be preserved.  You can use this to preserve\n> whitespace where necessary, like in code examples.\n>\n> For more information, see the deep-dive on\n> [**Word wrapping and formatting.**](#word-wrapping-and-formatting)\n\n\n## `big.time`\n\nFunctions for working with time.  Currently deals specifically\nwith timestamps.  The time functions in **big** are designed\nto make it easy to use best practices.\n\n#### `date_ensure_timezone(d, timezone)`\n\n> Ensures that a `datetime.date` object has\n> a timezone set.\n>\n> If `d` has a timezone set, returns `d`.\n> Otherwise, returns a new `datetime.date`\n> object equivalent to `d` with its `tzinfo` set\n> to `timezone`.\n\n#### `date_set_timezone(d, timezone)`\n\n> Returns a new `datetime.date` object identical\n> to `d` but with its `tzinfo` set to `timezone`.\n\n#### `datetime_ensure_timezone(d, timezone)`\n\n> Ensures that a `datetime.datetime` object has\n> a timezone set.\n>\n> If `d` has a timezone set, returns `d`.\n> Otherwise, creates a new `datetime.datetime`\n> object equivalent to `d` with its `tzinfo` set\n> to `timezone`.\n\n#### `datetime_set_timezone(d, timezone)`\n\n> Returns a new `datetime.datetime` object identical\n> to `d` but with its `tzinfo` set to `timezone`.\n\n#### `parse_timestamp_3339Z(s, *, timezone=None)`\n\n> Parses a timestamp string returned by `timestamp_3339Z`.\n> Returns a `datetime.datetime` object.\n>\n> `timezone` is an optional default timezone, and should\n> be a `datetime.tzinfo` object (or `None`).  If provided,\n> and the time represented in the string doesn't specify\n> a timezone, the `tzinfo` attribute of the returned object\n> will be explicitly set to `timezone`.\n>\n> `parse_timestamp_3339Z` depends on the\n> [`python-dateutil`](https://github.com/dateutil/dateutil)\n> package.  If `python-dateutil` is unavailable,\n> `parse_timestamp_3339Z` will also be unavailable.\n\n#### `timestamp_3339Z(t=None, want_microseconds=None)`\n\n> Return a timestamp string in RFC 3339 format, in the UTC\n> time zone.  This format is intended for computer-parsable\n> timestamps; for human-readable timestamps, use `timestamp_human()`.\n>\n> Example timestamp: `'2021-05-25T06:46:35.425327Z'`\n>\n> `t` may be one of several types:\n>\n> - If `t` is None, `timestamp_3339Z` uses the current time in UTC.\n> - If `t` is an int or a float, it's interpreted as seconds\n> since the epoch in the UTC time zone.\n> - If `t` is a `time.struct_time` object or `datetime.datetime`\n> object, and it's not in UTC, it's converted to UTC.\n> (Technically, `time.struct_time` objects are converted to GMT,\n> using `time.gmtime`.  Sorry, pedants!)\n>\n> If `want_microseconds` is true, the timestamp ends with\n> microseconds, represented as a period and six digits between\n> the seconds and the `'Z'`.  If `want_microseconds`\n> is `false`, the timestamp will not include this text.\n> If `want_microseconds` is `None` (the default), the timestamp\n> ends with microseconds if the type of `t` can represent\n> fractional seconds: a float, a `datetime` object, or the\n> value `None`.\n\n#### `timestamp_human(t=None, want_microseconds=None)`\n\n> Return a timestamp string formatted in a pleasing way\n> using the currently-set local timezone.  This format\n> is intended for human readability; for computer-parsable\n> time, use `timestamp_3339Z()`.\n>\n> Example timestamp: `\"2021/05/24 23:42:49.099437\"`\n>\n> `t` can be one of several types:\n>\n> - If `t` is `None`, `timestamp_human` uses the current local time.\n> - If `t` is an int or float, it's interpreted as seconds since the epoch.\n> - If `t` is a `time.struct_time` or `datetime.datetime` object,\n> it's converted to the local timezone.\n>\n> If `want_microseconds` is true, the timestamp will end with\n> the microseconds, represented as \".######\".  If `want_microseconds`\n> is false, the timestamp will not include the microseconds.\n> If `want_microseconds` is `None` (the default), the timestamp\n> ends with microseconds if the type of `t` can represent\n> fractional seconds: a float, a `datetime` object, or the\n> value `None`.\n\n\n# Topic deep-dives\n\n## The `multi-` family of functions\n\nThis family of functions was inspired by Python's `str.strip`,\n`str.rstrip`, and `str.splitlines` functions.  These functions\nare well-designed, and often do what you want.  But they're\nsurprisingly opinionated.  And... what if your use case doesn't\nfit exactly into their narrow functionality?  `str.strip`\nsupports two specific modes of operation; if you want\nto split your string in a slightly different way, you\nprobably can't use `str.strip`.\n\nSo what *can* you use?  There's `re.strip`, but it can be\nhard to use.  Now there's a new answer:\n[`multisplit`.](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\n\n[`multisplit`'s](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\ngoal is to be the be-all end-all string splitting function.\nIt's designed to replace every mode of operation for\n`str.split`, `str.rstrip`, and `str.splitlines`, and it\ncan even replace `str.partition` and `str.rpartition`.\n(**big** uses\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nto implement\n[`multipartition`.)](#multipartitions-separators-count1--reverseFalse-separateTrue)\n\nTo use\n[`multisplit`,](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\npass in the string you want to split, the separators you\nwant to split on, and tweak its behavior with its five\nkeyword arguments.  It returns an iterator that yields\nstring segments from the original string in your preferred\nformat.\n\nThe cornerstone of [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nis the `separators` argument.\nThis is an iterable of strings, of the same type (`str` or `bytes`)\nas the string you want to split (`s`).  `multisplit` will split\nthe string at *each* non-overlapping instance of any string\nspecified in `separators`.  Internally, `multisplit` is\nimplemented using `re.split` for speed.\n\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nalso let you fine-tune how it splits, through five keyword-only\nparameters:\n\n* `keep` lets you include the separator strings in the output,\n  in a number of different formats.\n* `separate` lets you specify whether adjacent separator strings\n  should be grouped together (like `str.strip` operating on\n  whitespace) or regarded as separate (like `str.strip` when\n  you pass in an explicit `sep` separator).\n* `strip` lets you strip separator strings from the beginning,\n  end, or both ends of the string you're splitting.  It also\n  supports a special *progressive* mode that duplicates the\n  behavior of `str.strip` when you use `None` as the separator.\n* `maxsplit` lets you specify the maximum number of times to\n  split the string, exactly like the `maxsplit` argument to `str.strip`.\n* `reverse` lets you apply `maxsplit` to the end of the string\n  and splitting backwards, exactly like `str.rstrip`.\n\nTo make it slightly easier to remember, all these keyword-only\nparameters default to a false value.  (Well, technically,\n`maxsplit` defaults to the special value `-1`, for compatibility\nwith `str.split`.  But this is its special \"don't do anything\"\nmagic value.  All the *other* keyword-only parameters default\nto `False`.)\n\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nalso inspired [`multistrip`](#multistrips-separators-leftTrue-rightTrue)\n and [`multipartition`,](#multipartitions-separators-count1--reverseFalse-separateTrue)\nwhich also take this same `separators` arguments.  There are also\nother **big** functions that take a `separators` argument; for\nconsistency's sakes, the parameter name always has the word\n`separators` in it.\n(For example, `comment_separators` for `lines_filter_comment_lines`.)\n\nThe downside of [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nis that, since it *is* so\nsophisticated and tunable, it can be hard to use.  It takes\n*five keyword-only parameters* after all.  However, they're\ndesigned to be reasonably memorable, and their default values\nare designedo to be easy to remember.  But the best\nway to combat the complexity of calling\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nis to use it as a building block for your own\ntext splitting functions.  For example, inside **big**,\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nis used to implement\n[`multipartition`,](#multipartitions-separators-count1--reverseFalse-separateTrue)\n[`normalize_whitespace`,](#normalize_whitespaces-separatorsNone-replacementnone)\n[`lines`,](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs),\nand several others.\n\n### Demonstrations of each `multisplit` keyword-only parameter\n\nTo give you a sense of how the five keyword-only parameters changes the behavior of\n[`multisplit`,](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nhere's a breakdown of each of these parameters with examples.\n\n#### `maxsplit`\n\n`maxsplit` specifies the maximum number of times the string should be split.\nIt behaves the same as the `maxsplit` parameter to `str.split`.\n\nThe default value of `-1` means \"split as many times as you can\".  In our\nexample here, the string can be split a maximum of three times.  Therefore,\nspecifying a `maxsplit` of `-1` is equivalent to specifying a `maxsplit` of\n`2` or greater:\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'))) # \"maxsplit\" defaults to -1\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=0))\n    ['appleXbananaYcookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=1))\n    ['apple', 'bananaYcookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=2))\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=3))\n    ['apple', 'banana', 'cookie']\n```\n\n`maxsplit` has interactions with `reverse` and `strip`.  For more\ninformation, see the documentation regarding those parameters, below.\n\n#### `keep`\n\n`keep` indicates whether or not `multisplit` should preserve the separator\nstrings in the strings it yields.  It supports four values: false, true,\nand the special values `ALTERNATING` and `AS_PAIRS`.\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'))) # \"keep\" defaults to False\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), keep=False))\n    ['apple', 'banana', 'cookie']\n```\n\nWhen `keep` is true, `multisplit` keeps the separators, appending them to\nthe end of the separated string:\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), keep=True))\n    ['appleX', 'bananaY', 'cookie']\n```\n\nWhen `keep` is `ALTERNATING`, `multisplit` keeps the separators as separate\nstrings.  The first string yielded is always a non-separator string, and\nfrom then on it always alternates between a separator string and a non-separator\nstring.  Put another way, if you store the output of `multisplit` in a list,\nentries with an even-numbered index (0, 2, 4, ...) are always non-separator strings,\nand entries with an odd-numbered index (1, 3, 5, ...) are always separator strings.\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), keep=big.ALTERNATING))\n    ['apple', 'X', 'banana', 'Y', 'cookie']\n```\n\nNote that `ALTERNATING` always emits an odd number of strings; the first and last\nstrings are always non-separator strings.  Like `str.split`, if the string you're\nsplitting starts or ends with a separator string, `multisplit` will emit an empty\nstring there:\n\n```Python\n    >>> list(big.multisplit('1a1z1', ('1',), keep=big.ALTERNATING))\n    ['', '1', 'a', '1', 'z', '1', '']\n```\n\nFinally, when `keep` is `AS_PAIRS`,  `multisplit` keeps the separators as separate\nstrings.  But instead of yielding strings, it yields 2-tuples of strings.  Every\n2-tuple contains a non-separator string followed by a separator string.\n\nIf the original string starts with a separator, the first 2-tuple will contain\nan empty non-separator string and the separator:\n\n```Python\n    >>> list(big.multisplit('YappleXbananaYcookie', ('X', 'Y'), keep=big.AS_PAIRS))\n    [('', 'Y'), ('apple', 'X'), ('banana', 'Y'), ('cookie', '')]\n```\n\nThe last 2-tuple will *always* contain an empty separator string:\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), keep=big.AS_PAIRS))\n    [('apple', 'X'), ('banana', 'Y'), ('cookie', '')]\n    >>> list(big.multisplit('appleXbananaYcookieXXX', ('X', 'Y'), keep=big.AS_PAIRS, strip=True))\n    [('apple', 'X'), ('banana', 'Y'), ('cookie', '')]\n```\n\nBecause of this rule, if the original string ends with a separator,\nand `multisplit` doesn't `strip` the right side, `AS_PAIRS`\nwill emit a 2-tuple containing two empty strings:\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookieX', ('X', 'Y'), keep=big.AS_PAIRS))\n    [('apple', 'X'), ('banana', 'Y'), ('cookie', 'X'), ('', '')]\n```\n\nThis looks strange--but it *is* correct.  This behavior is discussed in the\n[Why do you sometimes get empty strings when you split?](#why-do-you-sometimes-get-empty-strings-when-you-split)\nsection below.\n\nThe behavior of `keep` can be affected by the value of `separate`.\nFor more information, see the next section, on `separate`.\n\n\n#### `separate`\n\n`separate` indicates whether multisplit should consider adjacent\nseparator strings in `s` as one separator or as multiple separators\neach separated by a zero-length string.  It can be either false or\ntrue.\n\n```Python\n    >>> list(big.multisplit('appleXYbananaYXYcookie', ('X', 'Y'))) # separate defaults to False\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXYbananaYXYcookie', ('X', 'Y'), separate=False))\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXYbananaYXYcookie', ('X', 'Y'), separate=True))\n    ['apple', '', 'banana', '', '', 'cookie']\n```\n\nIf `separate` and `keep` are both true values, and your string\nhas multiple adjacent separators, `multisplit` will view `s`\nas having zero-length non-separator strings between the\nadjacent separators:\n\n```Python\n    >>> list(big.multisplit('appleXYbananaYXYcookie', ('X', 'Y'), separate=True, keep=True))\n    ['appleX', 'Y', 'bananaY', 'X', 'Y', 'cookie']\n\n    >>> list(big.multisplit('appleXYbananaYXYcookie', ('X', 'Y'), separate=True, keep=big.AS_PAIRS))\n    [('apple', 'X'), ('', 'Y'), ('banana', 'Y'), ('', 'X'), ('', 'Y'), ('cookie', '')]\n```\n\n#### `strip`\n\n`strip` indicates whether multisplit should strip separators from\nthe beginning and/or end of `s`.  It supports six values:\nfalse, true, `big.LEFT`, `big.RIGHT`, and `big.PROGRESSIVE`.\n\nBy default, `strip` is false, which means it doesn't strip any\nleading or trailing separators:\n\n```Python\n    >>> list(big.multisplit('XYappleXbananaYcookieYXY', ('X', 'Y'))) # strip defaults to False\n    ['', 'apple', 'banana', 'cookie', '']\n```\n\nSetting `strip` to true strips both leading and trailing separators:\n\n```Python\n    >>> list(big.multisplit('XYappleXbananaYcookieYXY', ('X', 'Y'), strip=True))\n    ['apple', 'banana', 'cookie']\n```\n\n`big.LEFT` and `big.RIGHT` tell `multistrip` to only strip on that\nside of the string:\n\n```Python\n    >>> list(big.multisplit('XYappleXbananaYcookieYXY', ('X', 'Y'), strip=big.LEFT))\n    ['apple', 'banana', 'cookie', '']\n    >>> list(big.multisplit('XYappleXbananaYcookieYXY', ('X', 'Y'), strip=big.RIGHT))\n    ['', 'apple', 'banana', 'cookie']\n```\n\n`big.PROGRESSIVE` duplicates a specific behavior of `str.split` when using\n`maxsplit`.  It always strips on the left, but it only strips on the right\nif the string is completely split.  If `maxsplit` is reached before the entire\nstring is split, and `strip` is `big.PROGRESSIVE`, `multisplit` *won't* strip\nthe right side of the string.  Note in this example how the trailing separator\n`Y` isn't stripped from the input string when `maxsplit` is less than `3`.\n\n```Python\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), strip=big.PROGRESSIVE))\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), maxsplit=0, strip=big.PROGRESSIVE))\n    ['appleXbananaYcookieY']\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), maxsplit=1, strip=big.PROGRESSIVE))\n    ['apple', 'bananaYcookieY']\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), maxsplit=2, strip=big.PROGRESSIVE))\n    ['apple', 'banana', 'cookieY']\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), maxsplit=3, strip=big.PROGRESSIVE))\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('XappleXbananaYcookieY', ('X', 'Y'), maxsplit=4, strip=big.PROGRESSIVE))\n    ['apple', 'banana', 'cookie']\n```\n\n#### `reverse`\n\n`reverse` specifies where `multisplit` starts parsing the string--from\nthe beginning, or the end--and in what direction it moves when parsing\nthe string--towards the end, or towards the beginning.  It only supports\ntwo values: when it's false, `multisplit` starts at the beginning of the\nstring, and parses moving to the right (towards the end of the string).\nBut when `reverse` is true, `multisplit` starts at the *end* of the\nstring, and parses moving to the *left* (towards the *beginning*\nof the string).\n\nThis has two noticable effects on `multisplit`'s output.  First, this\nchanges which splits are kept when `maxsplit` is less than the total number\nof splits in the string.  When `reverse` is true, the splits are counted\nstarting on the right and moving towards the left:\n\n```Python\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), reverse=True)) # maxsplit defaults to -1\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=0, reverse=True))\n    ['appleXbananaYcookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=1, reverse=True))\n    ['appleXbanana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=2, reverse=True))\n    ['apple', 'banana', 'cookie']\n    >>> list(big.multisplit('appleXbananaYcookie', ('X', 'Y'), maxsplit=3, reverse=True))\n    ['apple', 'banana', 'cookie']\n```\n\nThe second effect is far more subtle.  It's only relevant when splitting strings\ncontaining multiple *overlapping* separators.  When `reverse` is false, and there\nare two (or more) overlapping separators, the string is split by the *leftmost*\noverlapping separator.  When `reverse` is true, and there are two (or more)\noverlapping separators, the string is split by the *rightmost* overlapping\nseparator.\n\nConsider these two calls to `multisplit`.  The only difference between them is\nthe value of `reverse`.  They produce different results, even though neither\none uses `maxsplit`.\n\n```Python\n    >>> list(big.multisplit('appleXAYbananaXAYcookie', ('XA', 'AY'))) # reverse defaults to False\n    ['apple', 'Ybanana', 'Ycookie']\n    >>> list(big.multisplit('appleXAYbananaXAYcookie', ('XA', 'AY'), reverse=True))\n    ['appleX', 'bananaX', 'cookie']\n```\n\n### Reimplementing library functions using `multisplit`\n\nFinally, here are some concrete examples of how you could use\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nto replace some common Python string splitting methods.  These exactly duplicate the\nbehavior of the originals:\n```Python\ndef _multisplit_to_split(s, sep, maxsplit, reverse):\n    separate = sep != None\n    if separate:\n        strip = False\n    else:\n        sep = big.ascii_whitespace if isinstance(s, bytes) else big.whitespace\n        strip = big.PROGRESSIVE\n    result = list(big.multisplit(s, sep,\n        maxsplit=maxsplit, reverse=reverse,\n        separate=separate, strip=strip))\n    if not separate:\n        # ''.split() == '   '.split() == []\n        if result and (not result[-1]):\n            result.pop()\n    return result\n\ndef str_split(s, sep=None, maxsplit=-1):\n    return _multisplit_to_split(s, sep, maxsplit, False)\n\ndef str_rsplit(s, sep=None, maxsplit=-1):\n    return _multisplit_to_split(s, sep, maxsplit, True)\n\ndef str_splitlines(s, keepends=False):\n    newlines = big.ascii_newlines if isinstance(s, bytes) else big.newlines\n    l = list(big.multisplit(s, newlines,\n        keep=keepends, separate=True, strip=False))\n    if l and not l[-1]:\n    \t# yes, ''.splitlines() returns an empty list\n        l.pop()\n    return l\n\ndef _partition_to_multisplit(s, sep, reverse):\n    if not sep:\n        raise ValueError(\"empty separator\")\n    l = tuple(big.multisplit(s, (sep,),\n        keep=big.ALTERNATING, maxsplit=1, reverse=reverse, separate=True))\n    if len(l) == 1:\n        empty = b'' if isinstance(s, bytes) else ''\n        if reverse:\n            l = (empty, empty) + l\n        else:\n            l = l + (empty, empty)\n    return l\n\ndef str_partition(s, sep):\n    return _partition_to_multisplit(s, sep, False)\n\ndef str_rpartition(s, sep):\n    return _partition_to_multisplit(s, sep, True)\n```\n\n### Why do you sometimes get empty strings when you split?\n\nSometimes when you split using\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse),\nyou'll get empty strings in the return value.  This might be unexpected,\nviolating the [Principle Of Least Astonishment.](https://en.wikipedia.org/wiki/Principle_of_least_astonishment)\nBut there are excellent reasons for this behavior.\n\nLet's start by observing what `str.split` does. `str.split` really has two\nmajor modes of operation: when you don't pass in a separator (or pass in `None` for the\nseparator), and when you pass in an explicit separator string.  In this latter mode,\nthe documentation says it regards every instance of a separator string as an individual\nseparator splitting the string.  What does that mean?  Watch what happens when you have\ntwo adjacent separators in the string you're splitting:\n\n```Python\n    >>> '1,2,,3'.split(',')\n    ['1', '2', '', '3']\n```\n\nWhat's that empty string doing between `'2'` and `'3'`?  Here's how you should think about it:\nwhen you pass in an explicit separator, `str.split` splits at *every* occurance of that\nseparator in the string.  It *always* splits the string into two places, whenever there's\na separator.  And when there are two adjacent separators, conceptually, they have a\nzero-length string in between them:\n\n```Python\n    >>> '1,2,,3'[4:4]\n    ''\n```\n\nThe empty string in the output of `str.split` represents the fact that there\nwere two adjacent separators.  If `str.split` didn't add that empty string,\nthe output would look like this:\n\n```Python\n    ['1', '2', '3']\n```\n\nBut then it'd be indistinguishable from splitting the same string *without*\ntwo separators in a row:\n\n```Python\n    >>> '1,2,3'.split(',')\n    ['1', '2', '3']\n```\n\nThis difference is crucial when you want to reconstruct the original string from\nthe split list.  `str.split` with a separator should always be reversable using\n`str.join`, and with that empty string there it works correctly:\n\n```Python\n    >>> ','.join(['1', '2', '3'])\n    '1,2,3'\n    >>> ','.join(['1', '2', '', '3'])\n    '1,2,,3'\n```\n\nNow take a look at what happens when the string\nyou're splitting starts or ends with a separator:\n\n```Python\n    >>> ',1,2,3,'.split(',')\n    ['', '1', '2', '3', '']\n```\n\nThis might seem weird.  But, just like with two adjacent separators,\nthis behavior is important for consistency.  Conceptually there's\na zero-length string between the beginning of the string and the first\ncomma.  And `str.join` needs those empty strings in order to correctly\nrecreate the original string.\n\n```Python\n    >>> ','.join(['', '1', '2', '3', ''])\n    ',1,2,3,'\n```\n\nNaturally,\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nlets you duplicate this behavior.  When you want\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nto behave just like `str.split` does with an explicit separator\nstring, just pass in `keep=False`, `separate=True`, and `strip=False`.\nThat is, if `a` and `b` are strings,\n\n```Python\n     big.multisplit(a, (b,), keep=False, separate=True, strip=False)\n```\n\nalways produces the same output as\n\n```Python\n     a.split(b)\n```\n\nFor example, here's\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\nsplitting the strings we've been playing with, using these parameters:\n\n```Python\n    >>> list(big.multisplit('1,2,,3', (',',), keep=False, separate=True, strip=False))\n    ['1', '2', '', '3']\n    >>> list(big.multisplit(',1,2,3,', (',',), keep=False, separate=True, strip=False))\n    ['', '1', '2', '3', '']\n```\n\nThis \"emit an empty string\" behavior also has ramifications when `keep` isn't false.\nThe behavior of `keep=True` is easy to predict; `multisplit` just appends the separators\nto the previous string segment:\n\n```Python\n    >>> list(big.multisplit('1,2,,3', (',',), keep=True, separate=True, strip=False))\n    ['1,', '2,', ',', '3']\n    >>> list(big.multisplit(',1,2,3,', (',',), keep=True, separate=True, strip=False))\n    [',', '1,', '2,', '3,', '']\n```\n\nThe principle here is that, when you use `keep=True`, you should be able to reconstitute\nthe original string with `''.join`:\n\n```Python\n    >>> ''.join(['1,', '2,', ',', '3'])\n    '1,2,,3'\n    >>> ''.join([',', '1,', '2,', '3,', ''])\n    ',1,2,3,'\n```\n\n`keep=big.ALTERNATING` is much the same, except we insert the separators as their\nown segments, rather than appending each one to the previous segment:\n\n```Python\n    >>> list(big.multisplit('1,2,,3', (',',), keep=big.ALTERNATING, separate=True, strip=False))\n    ['1', ',', '2', ',', '', ',', '3']\n    >>> list(big.multisplit(',1,2,3,', (',',), keep=big.ALTERNATING, separate=True, strip=False))\n    ['', ',', '1', ',', '2', ',', '3', ',', '']\n```\n\nRemember, `ALTERNATING` output always begins and ends with a non-separator string.\nIf the string you're splitting begins or ends with a separator, the output\nfrom `multisplit` specifying `keep=ALTERNATING` will correspondingly begin or end\nwith an empty string.\n\nAnd, as with `keep=True`, you can also recreate the original string by passing\nthese arrays in to `''.join`:\n\n```Python\n    >>> ''.join(['1', ',', '2', ',', '', ',', '3'])\n    '1,2,,3'\n    >>> ''.join(['', ',', '1', ',', '2', ',', '3', ',', ''])\n    ',1,2,3,'\n```\n\nFinally there's `keep=big.AS_PAIRS`.  The behavior here seemed so strange,\ninitially I thought it was wrong.  But I've given it a *lot* of thought, and\nI've convinced myself that this is correct:\n\n```Python\n    >>> list(big.multisplit('1,2,,3', (',',), keep=big.AS_PAIRS, separate=True, strip=False))\n    [('1', ','), ('2', ','), ('', ','), ('3', '')]\n    >>> list(big.multisplit(',1,2,3,', (',',), keep=big.AS_PAIRS, separate=True, strip=False))\n    [('', ','), ('1', ','), ('2', ','), ('3', ','), ('', '')]\n```\n\nThat tuple at the end, just containing two empty strings:\n\n```Python\n    ('', '')\n```\n\nIt's *so strange.*  How can that be right?\n\nIt's the same as `str.split`.\n[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\n*must* split the string into two pieces *every* time it finds the separator\nin the original string.  So it *must* emit the empty non-separator string.\nAnd since that zero-length string isn't (cannot!) be followed by a separator,\nwhen using `keep=AS_PAIRS` the final separator string is *also* empty.\n\nThink of it this way: with the tuple of empty strings there, you can easily\nconvert one `keep` format into any another.  (Provided that you know\nwhat the separators were--either the source `keep` format was not false,\nor you only used one separator string when calling `multisplit`).\nWithout that tuple of empty strings at the end, you'd also have to have an\n`if` statement to add or remove empty stuff from the end.\n\nI'll demonstrate this with a simple example.  Here's the output of\n`multisplit` splitting the string `'1a1z1'` by the separator `'1'`,\nin each of the four `keep` formats:\n\n```Python\n>>> list(big.multisplit('1a1z1', '1', keep=False))\n['', 'a', 'z', '']\n>>> list(big.multisplit('1a1z1', '1', keep=True))\n['1', 'a1', 'z1', '']\n>>> list(big.multisplit('1a1z1', '1', keep=big.ALTERNATING))\n['', '1', 'a', '1', 'z', '1', '']\n>>> list(big.multisplit('1a1z1', '1', keep=big.AS_PAIRS))\n[('', '1'), ('a', '1'), ('z', '1'), ('', '')]\n```\n\nBecause the `AS_PAIRS` output ends with that tuple of empty\nstrings, we can mechanically convert it into any of the other\nformats, like so:\n\n```Python\n>>> result = list(big.multisplit('1a1z1', '1', keep=big.AS_PAIRS))\n>>> result\n[('', '1'), ('a', '1'), ('z', '1'), ('', '')]\n>>> [s[0] for s in result] # convert to keep=False\n['', 'a', 'z', '']\n>>> [s[0]+s[1] for s in result] # convert to keep=True\n['1', 'a1', 'z1', '']\n>>> [s for t in result for s in t][:-1] # convert to keep=big.ALTERNATING\n['', '1', 'a', '1', 'z', '1', '']\n```\n\nIf the `AS_PAIRS` output *didn't* end with that tuple of empty strings,\nyou'd need to add an `if` statement to restore the trailing empty\nstrings as needed.\n\n\n## `lines` and lines modifier functions\n\n[`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs) creates an iterator that yields individual lines\nsplit from a string.  It's designed to make it easy to write\nwell-behaved simple text parsers.\n\nFor example, every yielded line is accompanied by a `LinesInfo`\nobject which provides the line number and starting column number\nfor each line.  This makes it easy for your parser to provide\nline and column information for error messages.\n\nThe output of [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs) can be modified by \"lines modifier\"\nfunctions.  These are functions that iterate over a lines\niterator and re-yield the values, possibly modifying or\ndiscarding them along the way.  For example, passing\na [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs) iterator into `lines_filter_empty_lines` results\nin an iterator that skips over the empty lines.\nAll the lines modifier functions that ship with big\nstart with the string `lines_`.\n\nActually there are additional constraints on lines modifier\nfunction names.  The second word in the function name,\nimmediately after `lines_`, may denote the lines modifier's\ncategory.  Some examples:\n\n* `lines_filter_` functions may remove\n  lines from the output.  For example, `lines_filter_empty_lines`\n  will only yield a line if it isn't empty.\n* `lines_strip_` functions may remove one or\n  more substrings from the line.  For example,\n  [`lines_strip_indent(li)`](#lines_strip_indentli)\n  strips the leading whitespace from a line before yielding\n  it.  (Whenever a lines modifier removes leading text from a line,\n  it will add a `leading` field to the accompanying `LineInfo` object\n  containing the removed substring, and will also update the\n  `column_number` of the line to reflect the new starting column.)\n* `lines_convert_` functions means this lines modifier may change one\n  or more substrings in the line.  For example,\n  `lines_convert_tabs_to_spaces` changes tab characters\n  to space characters in any lines it processes.\n\n(**big** isn't strict about these category names though.\nFor example,\n[`lines_containing(li, s, *, invert=False)`](#lines_containingli-s--invertfalse)\nand\n[`lines_grep(li, pattern, *, invert=False, flags=0)`](#lines_grepli-pattern--invertfalse-flags0)\nare obviously \"filter\" modifiers, but their names\ndon't start with `lines_filter_`.)\n\nAll lines modifier functions are composable with each\nother; you can \"stack\" them together simply by passing\nthe output of one into the input of another.  For example,\n\n```Python\n     with open(\"textfile.txt\", \"rt\") as f:\n         for info, lines in big.lines_filter_empty_lines(\n     \t     big.lines_rstrip(lines(f.read()))):\n     \t     ...\n```\n\nwill iterate over the lines of `textfile.txt`, skipping\nover all empty lines and lines that consist only of\nwhitespace.\n\nWhen you stack line modifiers in this way, note that the\n*outer* modifiers happen *later*.  In the above example,\neach line is first \"r-stripped\", and then discarded\nif it's empty.  If you stacked the line modifiers in\nthe opposite order:\n\n```Python\n     with open(\"textfile.txt\", \"rt\") as f:\n         for info, lines in big.lines_rstrip(\n     \t     big.lines_filter_empty_lines(lines(f.read()))):\n     \t     ...\n```\n\nthen it'd filter out empty lines first, and *then*\n\"r-strip\" the lines.  So lines in the input that contained\nonly whitespace would still get yielded as empty lines,\nwhich is probably not what you want.\n\nOf course, you can write your own lines modifier functions!\nSimply accept a lines iterator as an argument, iterate over\nit, and yield each line info and line, modifying them\n(or not yielding them!) as you see fit.  You can potentially\neven write your own lines iterator, a replacement for\n[`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs),\nif you need functionality\n[`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs) doesn't provide.\n\nNote that if you write your own lines modifier function,\nand it removes text from the beginning the line, you'll have to\nupdate the `LineInfo` object manually--it doesn't happen\nautomatically.\n\n\n## Word wrapping and formatting\n\n**big** contains three functions used to reflow and format text\nin a pleasing manner.  In the order you should use them, they are\n[`split_text_with_code`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue),\n[`wrap_words(),`](#wrap_wordswords-margin79--two_spacestrue),\nand optionally\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0).\nThis trio of functions gives you the following word-wrap superpowers:\n\n* Paragraphs of text representing embedded \"code\" don't get word-wrapped.\n  Instead, their formatting is preserved.\n* Multiple texts can be merged together into multiple columns.\n\n### \"text\" vs \"code\"\n\nThe **big** word wrapping functions also distinguish between\n\"text\" and \"code\".  The main distinction is, \"text\" lines can\nget word-wrapped, but \"code\" lines shouldn't.  **big** considers\nany line starting with enough whitespace to be a \"code\" line;\nby default, this is four spaces.  Any non-blank line that\nstarting with four spaces is a \"code\" line, and any non-blank\nline that starts with less than four spaces is a \"text\" line.\n\nIn \"text\" mode:\n\n* words are separated by whitespace,\n* initial whitespace on the line is discarded,\n* the amount of whitespace between words is irrelevant,\n* individual newline characters are ignored, and\n* more than two newline characters are converted into exactly\n  two newlines (aka a \"paragraph break\").\n\nIn \"code\" mode:\n\n* all whitespace is preserved, except for trailing whitespace on a line, and\n* all newline characters are preserved.\n\nAlso, whenever\n[`split_text_with_code`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\nswitches between\n\"text\" and \"code\" mode, it emits a paragraph break.\n\n#### Split text array\n\nA *split text array* is an intermediary data structure\nused by **big.text** functions to represent text.\nIt's literally just an array of strings, where the strings\nrepresent individual word-wrappable substrings.\n\n[`split_text_with_code`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\nreturns a *split text array,* and\n[`wrap_words()`](#wrap_wordswords-margin79--two_spacestrue)\nconsumes a *split text array.*\n\nYou'll see four kinds of strings in a *split text array:*\n\n* Individual words, ready to be word-wrapped.\n* Entire lines of \"code\", preserving their formatting.\n* Line breaks, represented by a single newline: `'\\n'`.\n* Paragraph breaks, represented by two newlines: `'\\n\\n'`.\n\n#### Examples\n\nThis might be clearer with an example or two.  The following text:\n\n```\nhello there!\nthis is text.\n\n\nthis is a second paragraph!\n```\n\nwould be represented in a Python string as:\n```Python\n\"hello there!\\nthis is text.\\n\\n\\nthis is a second paragraph!\"\n```\n\nNote the three newlines between the second and third lines.\n\nIf you then passed this string in to\n[`split_text_with_code`,](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\nit'd return this *split text array:*\n```Python\n[ 'hello', 'there!', 'this', 'is', 'text.', '\\n\\n',\n  'this', 'is', 'a', 'second', 'paragraph!']\n```\n\n[`split_text_with_code`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\nmerged the first two lines together into\na single paragraph, and collapsed the three newlines separating\nthe two paragraphs into a \"paragraph break\" marker\n(two newlines in one string).\n\n\nNow let's add an example of text with some \"code\".  This text:\n\n```\nWhat are the first four squared numbers?\n\n    for i in range(1, 5):\n\n\n        print(i**2)\n\nPython is just that easy!\n```\n\nwould be represented in a Python string as (broken up into multiple strings for clarity):\n```Python\n\"What are the first four squared numbers?\\n\\n\"\n+\n\"    for i in range(1, 5):\\n\\n\\n\"\n+\n\"        print(i**2)\\n\\nPython is just that easy!\"\n```\n\n[`split_text_with_code`](#split_text_with_codes--tab_width8-allow_codetrue-code_indent4-convert_tabs_to_spacestrue)\nconsiders the two lines with initial whitespace as \"code\" lines,\nand so the text is split into the following *split text array:*\n```Python\n['What', 'are', 'the', 'first', 'four', 'squared', 'numbers?', '\\n\\n',\n  '    for i in range(1, 5):', '\\n', '\\n', '\\n', '        print(i**2)', '\\n\\n',\n  'Python', 'is', 'just', 'that', 'easy!']\n```\n\nHere we have a \"text\" paragraph, followed by a \"code\" paragraph, followed\nby a second \"text\" paragraph.  The \"code\" paragraph preserves the internal\nnewlines, though they are represented as individual \"line break\" markers\n(strings containing a single newline).  Every paragraph is separated by\na \"paragraph marker\".\n\nHere's a simple algorithm for joining a *split text array* back into a\nsingle string:\n```Python\n\nprev = None\na = []\nfor word in split_text_array:\n    if not (prev and prev.isspace() and word.isspace()):\n        a.append(' ')\n    a.append(word)\ntext = \"\".join(a)\n```\n\nOf course, this algorithm is too simple to do word wrapping.\nNor does it handle adding two spaces after sentence-ending\npunctuation.  In practice, you shouldn't do this by hand;\nyou should use\n[`wrap_words`](#wrap_wordswords-margin79--two_spacestrue).\n\n#### Merging columns\n\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nmerges multiple strings into columns on the same line.\n\nFor example, it could merge these three Python strings:\n```Python\n[\n\"Here's the first\\ncolumn of text.\",\n\"More text over here!\\nIt's the second\\ncolumn!  How\\nexciting!\",\n\"And here's a\\nthird column.\",\n]\n```\n\ninto the following text:\n\n```\nHere's the first    More text over here!   And here's a\ncolumn of text.     It's the second        third column.\n                    column!  How\n                    exciting!\n```\n\n(Note that\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\ndoesn't do its own word-wrapping;\ninstead, it's designed to consume the output of\n[`wrap_words`](#wrap_wordswords-margin79--two_spacestrue).)\n\nEach column is passed in to\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nas a \"column tuple\":\n\n```Python\n(s, min_width, max_width)\n```\n\n`s` is the string,\n`min_width` is the minimum width of the column, and\n`max_width` is the minimum width of the column.\n\nAs you saw above, `s` can contain newline characters,\nand\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nobeys those when formatting each column.\n\nFor each column,\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nmeasures the longest\nline of each column.  The width of the column is determined\nas follows:\n\n- If the longest line is less than `min_width` characters long,\n  the column will be `min_width` characters wide.\n- If the longest line is less than or equal to `min_width`\n  characters long, and less than or equal to `max_width`\n  characters long, the column will be as wide as the longest line.\n- If the longest line is greater than `max_width` characters long,\n  the column will be `max_width` characters wide, and lines that\n  are longer than `max_width` characters will \"overflow\".\n\n#### Overflow\n\nWhat is \"overflow\"?  It's a condition\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nmay encounter when the text in a column is wider than that\ncolumn's `max_width`.\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nneeds to consider both \"overflow lines\",\nlines that are longer than `max_width`, and \"overflow columns\",\ncolumns that contain one or more overflow lines.\n\nWhat does\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\ndo when it encounters overflow?  It depends on what you want.\n[`merge_columns`](#merge_columnscolumns-column_separator--overflow_responseoverflowresponseraise-overflow_before0-overflow_after0)\nprovides three \"strategies\" to deal with this condition, and you can specify\nwhich one you want with its `overflow_strategy` parameter.  The three are:\n\n- `OverflowStrategy.RAISE`: Raise an `OverflowError` exception.  The default.\n\n- `OverflowStrategy.INTRUDE_ALL`: Intrude into all subsequent columns on\nall lines where the overflowed column is wider than its max_width.\nThe subsequent columns \"make space\" for the overflow text by not adding\ntext on those overflowed lines; this is called \"pausing\" their output.\n\n- `OverflowStrategy.DELAY_ALL`:  Delay all columns after the overflowed\ncolumn, not beginning any until after the last overflowed line\nin the overflowed column.  This is like `INTRUDE_ALL`, except that\nthey \"make space\" by pausing their output until the last overflowed\nline.\n\nWhen `overflow_strategy` is `INTRUDE_ALL` or `DELAY_ALL`, and\neither `overflow_before` or `overflow_after` is nonzero, these\nspecify the number of extra lines before or after\nthe overflowed lines in a column where the subsequent columns\n\"pause\".\n\n\n## Enhanced `TopologicalSorter`\n\n#### Overview\n\n**big**'s [`TopologicalSorter`](#topologicalsortergraphnone)\nis a drop-in replacement for\n[`graphlib.TopologicalSorter`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter)\nin the Python standard library (new in 3.9).\nHowever, the version in **big** has been greatly upgraded:\n\n- `prepare` is now optional, though it still performs a cycle check.\n- You can add nodes and edges to a graph at any time, even while\n  iterating over the graph.  Adding nodes and edges always succeeds.\n- You can remove nodes from graph `g` with the new method `g.remove(node)`.\n  Again, you can do this at any time, even while iterating over the graph.\n  Removing a node from the graph always succeeds, assuming the node is in the graph.\n- The functionality for iterating over a graph now lives in its own object called\n  a *view*.  View objects implement the `get_ready`, `done`, and `__bool__`\n  methods.  There's a default view built in to the graph object;\n  the `get_ready`, `done`, and `__bool__` methods on a graph just call\n  into the graph's default view.  You can create a new view at any time\n  by calling the new `view` method.\n\nNote that if you're using a view to iterate over the graph, and you modify the graph,\nand the view now represents a state that isn't *coherent* with the graph,\nattempting to use that view raises a `RuntimeError`.  More on what I mean\nby \"coherence\" in a minute.\n\nThis implementation also fixes some minor warts with the existing API:\n\n- In Python's implementation, `static_order` and `get_ready`/`done` are mutually exclusive.  If you ever call\n  `get_ready` on a graph,  you can never call `static_order`, and vice-versa.  The implementaiton in **big**\n  doesn't have this restriction, because its implementation of `static_order` creates and uses a new view object\n  every time it's called..\n- In Python's implementation, you can only iterate over the graph once, or call `static_order` once.\n  The implementation in **big** solves this in several ways: it allows you to create as many views as you\n  want, and you can call the new `reset` method on a view to reset it to its initial state.\n\n#### Graph / view coherence\n\nSo what does it mean for a view to no longer be coherent with the graph?\nConsider the following code:\n\n```Python\ng = big.TopologicalSorter()\ng.add('B', 'A')\ng.add('C', 'A')\ng.add('D', 'B', 'C')\ng.add('B', 'A')\nv = g.view()\ng.ready() # returns ('A',)\ng.add('A', 'Q')\n```\n\nFirst this code creates a graph `g` with a classic \"diamond\"\ndependency pattern.  Then it creates a new view `v`, and gets\nthe currently \"ready\" nodes, which consists just of the node\n`'A'`.  Finally it adds a new dependency: `'A'` depends on `'Q'`.\n\nAt this moment, view `v` is no longer _coherent._  `'A'` has been\nmarked as \"ready\", but `'Q'` has not.  And yet `'A'` depends on `'Q'`.\nAll those statements can't be true at the same time!\nSo view `v` is no longer _coherent,_  and any attempt to interact\nwith `v` raises an exception.\n\nTo state it more precisely: if view `v` is a view on graph `g`,\nand you call `g.add('Z', 'Y')`,\nand neither of these statements is true in view `v`:\n\n- `'Y'` has been marked as `done`.\n- `'Z'` has not yet been yielded by `get_ready`.\n\nthen `v` is no longer \"coherent\".\n\n(If `'Y'` has been marked as `done`, then it's okay to make `'Z'` dependent on\n`'Y'` regardless of what state `'Z'` is in.  Likewise, if `'Z'` hasn't been yielded\nby `get_ready` yet, then it's okay to make `'Z'` dependent on `'Y'` regardless\nof what state `'Y'` is in.)\n\nNote that you can restore a view to coherence.  In this case,\nremoving either `Y` or `Z` from `g` would resolve the incoherence\nbetween `v` and `g`, and `v` would start working again.\n\nAlso note that you can have multiple views, in various states of iteration,\nand by modifying the graph you may cause some to become incoherent but not\nothers.  Views are completely independent from each other.\n\n\n## Bound inner classes\n\n#### Overview\n\nOne minor complaint I have about Python is about inner classes.\nAn \"inner class\" is a class defined inside another class.  And,\nwell, inner classes seem kind of half-baked.   Unlike methods,\ninner classes don't get bound to the object.\n\nConsider this Python code:\n\n```Python\nclass Outer(object):\n    def method(self):\n        pass\n    class Inner(object):\n        def __init__(self):\n            pass\n\no = Outer()\no.method()\ni = o.Inner()\n```\n\nWhen `o.method` is called, Python automatically passes in the `o` object as the first parameter\n(generally called `self`).  In object-oriented lingo, `o` is *bound* to `method`, and indeed\nPython calls this object a *bound method*:\n\n\n    >>> o.method\n    <bound method Outer.method of <__main__.Outer object at 0x########>>\n\nBut that doesn't happen when `o.Inner` is called.  (It *does* pass in\na `self`, but in this case it's the newly-created `Inner` object.)\nThere's just no built-in way for the `o.Inner` object being constructed\nto *automatically* get a reference to `o`.  If you need one, you must\nexplicitly pass one in, like so:\n\n```Python\nclass Outer(object):\n    def method(self):\n        pass\n    class Inner(object):\n        def __init__(self, outer):\n            self.outer = outer\n\no = Outer()\no.method()\ni = o.Inner(o)\n```\n\nThis seems redundant.  You don't have to pass in `o` explicitly to method calls,\nwhy should you have to pass it in explicitly to inner classes?\n\nWell--now you don't have to!\nYou just need to decorate the inner class with `@big.BoundInnerClass`.\n\n#### Using bound inner classes\n\nLet's modify the above example to use our [`BoundInnerClass`](#boundinnerclasscls)\ndecorator:\n\n```Python\nfrom big import BoundInnerClass\n\nclass Outer(object):\n    def method(self):\n        pass\n\n    @BoundInnerClass\n    class Inner(object):\n        def __init__(self, outer):\n            self.outer = outer\n\no = Outer()\no.method()\ni = o.Inner()\n```\n\nNotice that `Inner.__init__` now accepts an `outer` parameter,\neven though you didn't pass in any arguments to `o.Inner`.\nAnd when it's called, `o` is magically passed in to `outer`!\nThanks, [`BoundInnerClass`](#boundinnerclasscls)!  You've saved the day.\n\nDecorating an inner class like this always adds a second positional\nparameter, after `self`.  And, like `self`, in theory you don't have\nto use the name `outer`.  (Although for consistency's sakes, it's probably\na good idea.)\n\n#### Inheritance\n\nBound inner classes get slightly complicated when mixed with inheritance.\nIt's not all that difficult, you merely need to obey the following rules:\n\n1. *A bound inner class can inherit normally from any unbound class.*\n\n2. *To subclass from a bound inner class while still inside the outer\nclass scope, or when referencing the inner class from the outer class\n(as opposed to an instance of the outer class), you must actually\nsubclass or reference `classname.cls`.*  This is because inside the\nouter class, the \"class\" you see is actually an instance of a\n[`BoundInnerClass`](#boundinnerclasscls) object.\n\n3. *All classes that inherit from a bound inner class must always call the\nsuperclass's `__init__`. You don't need to pass in the outer parameter;\nit'll be automatically passed in to the superclass's `__init__` as before.*\n\n4. *An inner class that inherits from a bound inner class, and which also wants\nto be bound to the outer object, should be decorated with\n[`BoundInnerClass`](#boundinnerclasscls).*\n\n5. *An inner class that inherits from a bound inner class, but doesn't want\nto be bound to the outer object, should be decorated with\n[`UnboundInnerClass`](#unboundinnerclasscls).*\n\nRestating the last two rules: every class that descends from any\n[`BoundInnerClass`](#boundinnerclasscls)\nshould be decorated with either\n[`BoundInnerClass`](#boundinnerclasscls)\nor\n[`UnboundInnerClass`](#unboundinnerclasscls).\n\nHere's a simple example using inheritance with bound inner classes:\n\n```Python\nfrom big import BoundInnerClass, UnboundInnerClass\n\nclass Outer(object):\n\n    @BoundInnerClass\n    class Inner(object):\n        def __init__(self, outer):\n            self.outer = outer\n\n    @UnboundInnerClass\n    class ChildOfInner(Inner.cls):\n        def __init__(self):\n            super(Outer.ChildOfInner, self).__init__()\n\no = Outer()\ni = o.ChildOfInner()\n```\n\nWe followed the rules:\n\n* `Inner` inherits from object; since object isn't a bound inner class,\n  there are no special rules about inheritance `Inner` needs to obey.\n* `ChildOfInner` inherits from `Inner.cls`, not `Inner`.\n* Since `ChildOfInner` inherits from a\n  [`BoundInnerClass`](#boundinnerclasscls),\n  it must be\n  decorated with either [`BoundInnerClass`](#boundinnerclasscls)\n  or [`UnboundInnerClass`](#unboundinnerclasscls).\n  It doesn't want the outer object passed in, so it's decorated\n  with [`UnboundInnerClass`](#unboundinnerclasscls).\n* `ChildOfInner.__init__` calls `super().__init__`.\n\nNote that, because `ChildOfInner` is decorated with\n[`UnboundInnerClass`](#unboundinnerclasscls),\nit doesn't take an `outer` parameter.  Nor does it pass in an `outer`\nargument when it calls `super().__init__`.  But when the constructor for\n`Inner` is called, the correct `outer` parameter is passed in--like magic!\nThanks again, [`BoundInnerClass`](#boundinnerclasscls)!\n\nIf you wanted `ChildOfInner` to also get the outer argument passed in to\nits `__init__`, just decorate it with [`BoundInnerClass`](#boundinnerclasscls)\ninstead of\n[`UnboundInnerClass`](#unboundinnerclasscls),\nlike so:\n\n```Python\nfrom big import BoundInnerClass\n\nclass Outer(object):\n\n    @BoundInnerClass\n    class Inner(object):\n        def __init__(self, outer):\n            self.outer = outer\n\n    @BoundInnerClass\n    class ChildOfInner(Inner.cls):\n        def __init__(self, outer):\n            super(Outer.ChildOfInner, self).__init__()\n            assert self.outer == outer\n\no = Outer()\ni = o.ChildOfInner()\n```\n\nAgain, `ChildOfInner.__init__` doesn't need to explicitly\npass in `outer` when calling `super.__init__`.\n\nYou can see more complex examples of using inheritance with\n[`BoundInnerClass`](#boundinnerclasscls)\n(and [`UnboundInnerClass`](#unboundinnerclasscls))\nin the **big** test suite.\n\n#### Miscellaneous notes\n\n* If you refer to a bound inner class directly from the outer class,\n  rather than using the outer instance, you get the original class.\n  This means that references to `Outer.Inner` are consistent, and it's\n  a base class of all the bound inner classes. This also means that if\n  you attempt to construct one without using an outer instance, you must\n  pass in the outer parameter by hand, just as you would have to pass\n  in the self parameter by hand when calling an unbound method.\n\n* If you refer to a bound inner class from an outer instance,\n  you get a subclass of the original class.\n\n* Bound classes are cached in the outer object, which both provides\n  a small speedup and ensures that `isinstance` relationships are\n  consistent.\n\n* You must not rename inner classes decorated with either\n  [`BoundInnerClass`](#boundinnerclasscls)\n  or [`UnboundInnerClass`](#unboundinnerclasscls)!\n  The implementation of\n  [`BoundInnerClass`](#boundinnerclasscls)\n  looks up\n  the bound inner class in the outer object by name in several places.\n  Adding aliases to bound inner classes is harmless, but the original\n  attribute name must always work.\n\n* Bound inner classes from different objects are different classes.\n  This is symmetric with bound methods; if you have two objects\n  `a` and `b` that are instances of the same class,\n  `a.BoundInnerClass != b.BoundInnerClass`, just as `a.method != b.method`.\n\n* The binding only goes one level deep; if you had an inner class `C`\n  inside another inner class `B` inside a class `A`, the constructor\n  for `C` would be called with the `B` object, not the `A` object.\n\n* Similarly, if you have a bound inner class `B` inside a class `A`,\n  and another bound inner class `D` inside a class `C`, and `D`\n  inherits from `B`, the constructor for `D` will be called with\n  the `B` object but not the `A` object. When `D` calls `super().__init__`\n  it'll have to fill in the `outer` parameter by hand.\n\n* There's a race condition in the implementation: if you access a\n  bound inner class through an outer instance from two separate threads,\n  and the bound inner class was not previously cached, the two threads\n  may get different (but equivalent) bound inner class objects, and only\n  one of those instances will get cached on the outer object.  This could\n  lead to confusion and possibly cause bugs. For example, you could have\n  two objects that would be considered equal if they were instances of\n  the same bound inner class, but would not be considered equal if\n  instantiated by different instances of that same bound inner class.\n  There's an easy workaround for this problem: access the bound inner\n  class from the `__init__` of the outer class, which should allow\n  the code to cache the bound inner class instance before a second\n  thread could ever get a reference to the outer object.\n\n\n## Release history\n\n**0.7.1**\n\n* Tweaked the implementation of `multisplit`.  Internally, it does the\n  string splitting using `re.split`, which returns a `list`.  It used\n  to iterate over the list and yield each element.  But that meant keeping\n  tne entire list around in memory until `multisplit` exited.  Now,\n  `multisplit` reverses the list, pops off the final element, and yields\n  that.  This means `multisplit` drops all references to the split strings\n  as it iterates over the string, which may help in low-memory situations.\n\n* Minor doc fixes.\n\n**0.7**\n\n* Breaking changes to the\n  [`Scheduler`](#schedulerregulatordefault_regulator):\n  * It's no longer thread-safe by default, which means it's much faster\n    for non-threaded workloads.\n  * The lock has been moved out of the\n    [`Scheduler`](#schedulerregulatordefault_regulator)\n    object and into the\n    [`Regulator`](#regulator).  Among other things, this\n    means that the\n    [`Scheduler`](#schedulerregulatordefault_regulator)\n    constructor no longer takes a `lock` argument.\n  * [`Regulator`](#regulator) is now an abstract base class.\n    `big.scheduler` also provides two concrete implementations:\n    [`SingleThreadedRegulator`](#singlethreadedregulator)\n    and\n    [`ThreadSafeRegulator`](#threadsaferegulator).\n  * [`Regulator`](#regulator) and\n    [`Event`](#eventscheduler-event-time-priority-sequence)\n    are now defined in the `big.scheduler` namespace.  They were\n    previously defined inside the `Scheduler` class.\n  * The arguments to the\n    [`Event`](#eventscheduler-event-time-priority-sequence)\n    constructor were rearranged.  (You shouldn't care, as you\n    shouldn't be manually constructing\n    [`Event`](#eventscheduler-event-time-priority-sequence)\n    objects anyway.)\n  * The `Scheduler` now guarantees that it will only call `now` and `wake`\n    on a `Regulator` object while holding that `Regulator`'s lock.\n\n* Minor doc fixes.\n\n**0.6.18**\n\n* Retooled\n  [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\n  and\n  [`multistrip`](#multistrips-separators-leftTrue-rightTrue)\n  argument verification code.  Both functions now consistently check all\n  their inputs, and use consistent error messages when raising an exception.\n\n**0.6.17**\n\n* Fixed a minor crashing bug in\n  [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse):\n  if you passed in a *list* of separators (or `separators`\n  was of any non-hashable type), and `reverse` was true,\n  `multisplit` would crash.  It used `separators` as a key\n  into a dict, which meant `separators` had to be hashable.\n* [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)\n  now verifies that the `s` passed in is either `str` or `bytes`.\n* Updated all copyright date notices to 2023.\n* Lots of doc fixes.\n\n**0.6.16**\n\n* Fixed Python 3.6 support! Some equals-signs-in-f-strings and some\n  other anachronisms had crept in.  0.6.16 has been tested on all\n  versions from 3.6 to 3.11 (as well as having 100% *coverage*).\n* Made the `dateutils` package an optional dependency.  Only one function\n  needs it, [`parse_timestamp_3339Z()`](#parse_timestamp_3339zs--timezonenone).\n* Minor cleanup in [`PushbackIterator()`](#pushbackiteratoriterablenone).\n  It also uses slots now, which should make it a bit faster.\n\n**0.6.15**\n\n* Added the new functions\n  [`datetime_ensure_timezone(d, timezone)`](#datetime_ensure_timezoned-timezone) and\n  [`datetime_set_timezone(d, timezone)`](#datetime_set_timezoned-timezone).\n  These allow you to ensure or explicitly set a timezone on a `datetime.datetime`\n  object.\n* Added the `timezone` argument to \n  [`parse_timestamp_3339Z()`](#parse_timestamp_3339zs--timezonenone).\n* [`gently_title()`](#gently_titles-apostrophesnone-double_quotesnone)\n  now capitalizes the first letter after a left parenthesis.\n* Changed the secret `multirpartition` function slightly.  Its `reverse`\n  parameter now means to un-reverse its reversing behavior.  Stated\n  another way, `multipartition(reverse=X)` and `multirpartition(reverse=not X)`\n  now do the same thing.\n\n**0.6.14**\n\n* Improved the text of the `RuntimeError` raised by `TopologicalSorter.View`\n  when the view is incoherent.  Now it tells you exactly what nodes are\n  conflicting.\n* Expanded the deep dive on `multisplit`.\n\n**0.6.13**\n\n* Changed [`translate_filename_to_exfat(s)`](#translate_filename_to_exfats)\n  behavior: when modifying a string with a colon (`':'`) *not* followed by\n  a space, it used to convert it to a dash (`'-'`).  Now it converts the\n  colon to a period (`'.'`), which looks a little more natural.  A colon\n  followed by a space is still converted to a dash followed by a space.\n\n*p.s.* There's a revision with a comment claiming it represents 0.6.13.  But\nI forgot to actually tag it and release it, and I forgot to actually.  Oops!\n\n**0.6.12**\n\n* Bugfix: When calling\n  [`TopologicalSorter.print()`](#topologicalsorterprintprintprint),\n  it sorts the list of nodes, for consistency's sakes.\n  But if the node objects don't support `<` or `>` comparison,\n  that throws an exception.  `TopologicalSorter.print()` now catches\n  that exception and simply \n* Added a secret (otherwise undocumented!) function: `multirpartition`,\n  which is like\n  [`multipartition`](#multipartitions-separators-count1--reverseFalse-separateTrue)\n  but with `reverse=True`.\n* Added the list of conflicted nodes to the \"node is incoherent\"\n  exception text.\n\n**0.6.11**\n\n* Changed the import strategy.  The top-level **big** module used\n  to import all its child modules, and `import *` all the symbols\n  from all those modules.  But a friend (hi Mark Shannon!) talked\n  me out of this.  It's convenient, but if a user doesn't care about\n  a particular module, why make them import it.  So now the top-level\n  **big** module contains nothing but a version number, and you\n  can either import just the submodules you need, or you can import\n  **big.all** to get all the symbols (like **big** itself used to do).\n\n**0.6.10**\n\n* All code changes had to do with\n  [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse):\n    * Fixed a subtle bug.  When splitting with a separator that can overlap\n      itself, like `' x '`, `multisplit` will prefer the *leftmost* instance.\n      But when `reverse=True`, it must prefer the *rightmost* instance.\n      Thanks to Eric V. Smith for suggesting the clever \"reverse everything,\n      call `re.split`, and un-reverse everything\" approach that meant I could\n      fix this bug while still implementing on top of `re.split`!\n    * Implemented `PROGRESSIVE` mode for the `strip` keyword.  This behaves\n      like `str.strip`: when splitting, strip on the left, then start splitting.\n      If we don't exhaust `maxsplit`, strip on the right; if we *do* exhaust\n      `maxsplit`, *don't* strip on the right.  (Similarly for `str.rstrip`\n      when `reverse=True`.)\n    * Changed the default for `strip` to `False`.  It used to be\n      `NOT_SEPARATE`.  But this was too surprising--I'd forget that it\n      was the default, and turning on `keep` wouldn't return everything I\n      thought I should get, and I'd head off to debug `multisplit`, when in\n      fact it was behaving as specified.  The Principle Of Least Surprise\n      tells me that `strip` defaulting to `False` is less surprising.\n      Also, maintaining the invariant that all the keyword-only parameters\n      to `multisplit` default to `False` is a helpful mnemonic device in\n      several ways.\n    * Removed `NOT_SEPARATE` (and the not-yet-implemented `STR_STRIP`)\n      modes for `strip`.  They're easy to implement yourself, and this\n      removes some surface area from the already-too-big\n      `multisplit` API.\n* Modernized `pyproject.toml` metadata to make `flit` happier.  This was\n  necessary to ensure that `pip install big` also installs its dependencies.\n\n**0.6.8**\n\n* Renamed two of the three freshly-added lines modifier functions:\n  `lines_filter_contains` is now \n  [`lines_containing`](#lines_containingli-s--invertfalse),\n  and `lines_filter_grep` is now\n  [`lines_grep`](#lines_grepli-pattern--invertfalse-flags0).\n\n**0.6.7**\n\n* Added three new lines modifier functions\n  to the [`text`](#bigtext) module:\n  `lines_filter_contains`,\n  `lines_filter_grep`,\n  and\n  [`lines_sort`](#lines_sortli--reversefalse).\n* [`gently_title`](#gently_titles-apostrophesnone-double_quotesnone)\n  now accepts `str` or `bytes`.  Also added the `apostrophes` and\n  `double_quotes` arguments.\n\n**0.6.6**\n\n* Fixed a bug in\n  [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse).\n  I thought when using `keep=AS_PAIRS` that it shouldn't ever emit a 2-tuple\n  containing just empty strings--but on further reflection I've realized that\n  that's correct.  This behavior is now tested and documented, along with\n  the reasoning behind it.\n* Added the `reverse` flag to\n  [`re_partition`](#re_partitiontext-pattern-count1--flags0-reversefalse).\n* `whitespace_without_dos` and `newlines_without_dos` still had the DOS\n  end-of-line sequence in them!  Oops!\n    * Added a unit test to check that.  The unit test also ensures that\n      `whitespace`, `newlines`, and all the variants (`utf8_`, `ascii_`,\n      and `_with_dos`) exactly match the set of characters Python considers\n      whitespace and newline characters.\n* Lots more documentation and formatting fixes.\n\n**0.6.5**\n\n* Added the new [`itertools`](#bigitertools) module, which so far only contains\n  [`PushbackIterator`](#pushbackiteratoriterablenone).\n* Added\n  [`lines_strip_comments`](#lines_strip_commentsli-comment_separators--quotes--backslash-rstriptrue-triple_quotestrue)\n  and\n  [`split_quoted_strings`](#split_quoted_stringss-quotes---triple_quotestrue-backslash)\n  to the\n  [`text`](#bigtext)\n  module.\n\n**0.6.1**\n\n* I realized that [`whitespace`](#whitespace) should contain the DOS end-of-line\n  sequence (`'\\r\\n'`), as it should be considered a single separator\n  when splitting etc.  I added that, along with [`whitespace_no_dos`](#whitespace),\n  and naturally [`utf8_whitespace_no_dos`](#whitespace) and\n  [`ascii_whitespace_no_dos`](#whitespace) too.\n* Minor doc fixes.\n\n**0.6**\n\nA **big** upgrade!\n\n* Completely retooled and upgraded\n  [`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse),\n  and added\n  [`multistrip`](#multistrips-separators-leftTrue-rightTrue)\n  and\n  [`multipartition`,](#multipartitions-separators-count1--reverseFalse-separateTrue)\n  collectively called\n  [**The `multi-` family of functions.**](#The-multi--family-of-functions)\n  (Thanks to Eric Smith for suggesting\n  [`multipartition`!](#multipartitions-separators-count1--reverseFalse-separateTrue)\n  Well, sort of.)\n  * `[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)`\n    now supports five (!) keyword-only parameters, allowing the caller\n    to tune its behavior to an amazing degree.\n  * Also, the original implementation of\n    `[`multisplit`](#multisplits-separators--keepFalse-maxsplit-1-reverseFalse-separateFalse-stripFalse)`\n    got its semantics a bit wrong; it was inconsistent and maybe a little buggy.\n  * [`multistrip`](#multistrips-separators-leftTrue-rightTrue)\n    is like `str.strip` but accepts an iterable of\n    separator strings.  It can strip from the left, right, both, or\n    neither (in which case it does nothing).\n  * [`multipartition`](#multipartitions-separators-count1--reverseFalse-separateTrue)\n    is like `str.partition`, but accepts an iterable\n    of separator strings.  It can also partition more than once,\n    and supports `reverse=True` which causes it to partition from the right\n    (like `str.rpartition`).\n  * Also added useful predefined lists of separators for use with all\n    the `multi` functions: [`whitespace`](#whitespace) and [`newlines`](#newlines),\n    with `ascii_` and `utf8_` versions of each, and `without_dos` variants of\n    all three [`newlines`](#newlines) variants.\n* Added the\n  [`Scheduler`](#schedulerregulatornone)\n  and\n  [`Heap`](#heapinone)\n  classes.  [`Scheduler`](#schedulerregulatornone)\n  is a replacement for Python's `sched.scheduler` class, with a modernized\n  interface and a major upgrade in functionality.  [`Heap`](#heapinone)\n  is an object-oriented interface to Python's `heapq` module, used by\n  [`Scheduler`](#schedulerregulatornone).\n  These are in their own modules.\n* Added\n  [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs)\n  and all the `lines_` modifiers.  These are great for writing little text parsers.\n  For more information, please see the deep-dive on\n  [**`lines` and lines modifier functions.**](#lines-and-lines-modifier-functions)\n* Removed`stripped_lines` and `rstripped_lines` from the `text` module,\n  as they're superceded by the far superior\n  [`lines`](#liness-separatorsnone--line_number1-column_number1-tab_width8-kwargs)\n  family.\n* Enhanced\n  [`normalize_whitespace`](#normalize_whitespaces-separatorsNone-replacementNone).\n  Added the `separators` and `replacement` parameters,\n  and added support for `bytes` objects.\n* Added the `count` parameter to\n  [`re_partition`](#re_partitiontext-pattern-count1--flags0)\n  and\n  [`re_rpartition`](#re_rpartitiontext-pattern-count1--flags0).\n\n**0.5.2**\n\n* Added `stripped_lines` and `rstripped_lines` to the [`text`](#bigtext) module.\n* Added support for `len` to the [`TopologicalSorter`](#topologicalsortergraphnone) object.\n\n**0.5.1**\n\n* Added\n  [`gently_title`](#gently_titles-apostrophesnone-double_quotesnone)\n  and\n  [`normalize_whitespace`](#normalize_whitespaces-separatorsNone-replacementNone)\n  to the [`text`](#bigtext) module.\n* Changed [`translate_filename_to_exfat`](#translate_filename_to_exfats)\n  to handle translating `':'` in a special way.\n  If the colon is followed by a space, then the colon is turned into `' -'`.\n  This yields a more natural translation when colons are used in text, e.g.\n  `'xXx: The Return Of Xander Cage'` is translated to `'xXx - The Return Of Xander Cage'`.\n  If the colon is not followed by a space, turns the colon into `'-'`.\n  This is good for tiresome modern gobbledygook like `'Re:code'`, which\n  will now be translated to `'Re-code'`.\n\n**0.5**\n\n* Initial release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "big",
    "package_url": "https://pypi.org/project/big/",
    "platform": null,
    "project_url": "https://pypi.org/project/big/",
    "project_urls": {
      "Source": "https://github.com/larryhastings/big/"
    },
    "release_url": "https://pypi.org/project/big/0.7.1/",
    "requires_dist": [
      "python-dateutil ; extra == \"time\""
    ],
    "requires_python": ">=3.6",
    "summary": "The big package is a grab-bag of cool code for use in your programs.",
    "version": "0.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17272569,
  "releases": {
    "0.5": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a68eb3f7d38df615045fc0cd31ed16e9d26e9ff78cb0c61840527e5058666439",
          "md5": "31028f5d11a857a2b1a9778ff95132cf",
          "sha256": "6313345fb1331bb8dca579be1eb19a7c19764e5cb344b7ea81ca8e1d7a81831e"
        },
        "downloads": -1,
        "filename": "big-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31028f5d11a857a2b1a9778ff95132cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 38422,
        "upload_time": "2022-06-12T21:49:27",
        "upload_time_iso_8601": "2022-06-12T21:49:27.274132Z",
        "url": "https://files.pythonhosted.org/packages/a6/8e/b3f7d38df615045fc0cd31ed16e9d26e9ff78cb0c61840527e5058666439/big-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b0e4ee57a7ddee9aaffb209bfa89ce1c21de810fab19c3684478c2c30492e54f",
          "md5": "bcbbdfcad0c774633d8aef16b2e5ef48",
          "sha256": "bd0a7f75c2fd280b31acb574df0c8ff9cd6642b29138731e33a7cdc9eb8dbc1f"
        },
        "downloads": -1,
        "filename": "big-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bcbbdfcad0c774633d8aef16b2e5ef48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1457214,
        "upload_time": "2022-06-12T21:49:31",
        "upload_time_iso_8601": "2022-06-12T21:49:31.004900Z",
        "url": "https://files.pythonhosted.org/packages/b0/e4/ee57a7ddee9aaffb209bfa89ce1c21de810fab19c3684478c2c30492e54f/big-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b4316e9d7d01bd42ef9803108ad3182a7119f2b83aec8ef0f8316353ec3b154f",
          "md5": "3797a78b1a82f66dbc85d2edc3aed0b9",
          "sha256": "c3feee7cbad07d80d786904ca33951173fb02864edb639c86c78a78c1bbd5c82"
        },
        "downloads": -1,
        "filename": "big-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3797a78b1a82f66dbc85d2edc3aed0b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40741,
        "upload_time": "2022-09-03T23:44:15",
        "upload_time_iso_8601": "2022-09-03T23:44:15.197017Z",
        "url": "https://files.pythonhosted.org/packages/b4/31/6e9d7d01bd42ef9803108ad3182a7119f2b83aec8ef0f8316353ec3b154f/big-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4ad9b8301da5e54a6c5f0d5a29d1708a805711a16cd61f6431d63638b56a7d37",
          "md5": "f2f4458159cf168eb899f3eefb330beb",
          "sha256": "beb05d02d8f03bbb1582ce5efdb22b2229fdca291303c646609f7aae0456a906"
        },
        "downloads": -1,
        "filename": "big-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2f4458159cf168eb899f3eefb330beb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1461436,
        "upload_time": "2022-09-03T23:44:21",
        "upload_time_iso_8601": "2022-09-03T23:44:21.291064Z",
        "url": "https://files.pythonhosted.org/packages/4a/d9/b8301da5e54a6c5f0d5a29d1708a805711a16cd61f6431d63638b56a7d37/big-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d1ead8b2856f4ac9a6fa9e6e76c6272c5305d9f5aa61483876146a3598bc6c23",
          "md5": "72212b0aae0ce496a78c814e49f4668a",
          "sha256": "1c88a0877f372417670226e3f8ee40f7d47544e6c163026983cf96dd3eee01f3"
        },
        "downloads": -1,
        "filename": "big-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72212b0aae0ce496a78c814e49f4668a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 41077,
        "upload_time": "2022-09-11T23:40:31",
        "upload_time_iso_8601": "2022-09-11T23:40:31.222881Z",
        "url": "https://files.pythonhosted.org/packages/d1/ea/d8b2856f4ac9a6fa9e6e76c6272c5305d9f5aa61483876146a3598bc6c23/big-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "bc9b7b69b32383a1419cd3c48dc9897a1d8b2ff81704f5bd333dd8161cc84c29",
          "md5": "e3671a4f55691edf1f5a992f0c0a18e3",
          "sha256": "b52830948ddedb44b3b1bb9a1dcbb3a00124410f7fe6aa45bad7e795dc4894ec"
        },
        "downloads": -1,
        "filename": "big-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e3671a4f55691edf1f5a992f0c0a18e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1462274,
        "upload_time": "2022-09-11T23:40:35",
        "upload_time_iso_8601": "2022-09-11T23:40:35.121664Z",
        "url": "https://files.pythonhosted.org/packages/bc/9b/7b69b32383a1419cd3c48dc9897a1d8b2ff81704f5bd333dd8161cc84c29/big-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a8cb1781f3a231a9e5bbdcee40756686f0f777611534f5cda666f46e632f9ed6",
          "md5": "234f7fe16930299d262312fa50034b6c",
          "sha256": "18359841be340aa458669e4a4ce2fe786cfc5a0c9478681945de572ce04891e0"
        },
        "downloads": -1,
        "filename": "big-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "234f7fe16930299d262312fa50034b6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59760,
        "upload_time": "2022-10-13T10:06:43",
        "upload_time_iso_8601": "2022-10-13T10:06:43.191096Z",
        "url": "https://files.pythonhosted.org/packages/a8/cb/1781f3a231a9e5bbdcee40756686f0f777611534f5cda666f46e632f9ed6/big-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f9076c2ca135325df2bdf7585bf62859469d11924fc2383ffa8dcff9e65849cc",
          "md5": "c4855a0ecd4e7baa26cb4293be16744f",
          "sha256": "705264a46300d69c5a78eed3a74d24d6518566ad54e297dc198f5e1aa330efa9"
        },
        "downloads": -1,
        "filename": "big-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c4855a0ecd4e7baa26cb4293be16744f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1497949,
        "upload_time": "2022-10-13T10:06:46",
        "upload_time_iso_8601": "2022-10-13T10:06:46.150563Z",
        "url": "https://files.pythonhosted.org/packages/f9/07/6c2ca135325df2bdf7585bf62859469d11924fc2383ffa8dcff9e65849cc/big-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a92994180a14a8f735136598a23538bf5c767be6fd2b23a45ed5fadcd79c8dbb",
          "md5": "9f351b824d84a655f4c116ed1ea61cac",
          "sha256": "4ab333853f9968f72d945640f70fb4fbee8ddbce6ef1c243dbc7ae8a7dcbce19"
        },
        "downloads": -1,
        "filename": "big-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f351b824d84a655f4c116ed1ea61cac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 60727,
        "upload_time": "2022-10-13T10:40:28",
        "upload_time_iso_8601": "2022-10-13T10:40:28.830013Z",
        "url": "https://files.pythonhosted.org/packages/a9/29/94180a14a8f735136598a23538bf5c767be6fd2b23a45ed5fadcd79c8dbb/big-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d5e74399ab33e5ce49103b37604e7c29bf4659cbd3283ac69d7030eb09262cfe",
          "md5": "102b2d936a84905d6eab21cf45b26c27",
          "sha256": "d801f2672df753d6fe16adff4901f1d11671cfd3ad9e64d44f3b83814d4bb264"
        },
        "downloads": -1,
        "filename": "big-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "102b2d936a84905d6eab21cf45b26c27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1499593,
        "upload_time": "2022-10-13T10:40:31",
        "upload_time_iso_8601": "2022-10-13T10:40:31.847453Z",
        "url": "https://files.pythonhosted.org/packages/d5/e7/4399ab33e5ce49103b37604e7c29bf4659cbd3283ac69d7030eb09262cfe/big-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.10": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "df579e3c6ab216d177597713fd8b6d120281acd3380edab9652fdf4e33ddfd2c",
          "md5": "9ab7e3db045bebfab3dc8456f7cb62a0",
          "sha256": "1e6b6e7462778e01b40c6c842ad7217aa8cd7e1c1c75c6fa67821f8005d843a1"
        },
        "downloads": -1,
        "filename": "big-0.6.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ab7e3db045bebfab3dc8456f7cb62a0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72267,
        "upload_time": "2022-10-27T05:30:29",
        "upload_time_iso_8601": "2022-10-27T05:30:29.985469Z",
        "url": "https://files.pythonhosted.org/packages/df/57/9e3c6ab216d177597713fd8b6d120281acd3380edab9652fdf4e33ddfd2c/big-0.6.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d94f32771e83ae0de19fadc232be749db18db0e55fb4a6b40e0ce280c8a1ce82",
          "md5": "611b7b7ef465592a0724acfad0e35617",
          "sha256": "576366e658401103b187957274d72842355886f3f20d13ac780a2e55542f63ee"
        },
        "downloads": -1,
        "filename": "big-0.6.10.tar.gz",
        "has_sig": false,
        "md5_digest": "611b7b7ef465592a0724acfad0e35617",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1521424,
        "upload_time": "2022-10-27T05:30:33",
        "upload_time_iso_8601": "2022-10-27T05:30:33.253426Z",
        "url": "https://files.pythonhosted.org/packages/d9/4f/32771e83ae0de19fadc232be749db18db0e55fb4a6b40e0ce280c8a1ce82/big-0.6.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.11": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "f6f3d01d3d71ac76276cdc402591436d6ab939abdb019606f24ca91544ea54c6",
          "md5": "a046fa84aaec3cb77c4715eee34c257a",
          "sha256": "4b401df0473967e7b2f480b79b0d0341927c1c9331f988aad458e5b30b5caaf0"
        },
        "downloads": -1,
        "filename": "big-0.6.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a046fa84aaec3cb77c4715eee34c257a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 73658,
        "upload_time": "2022-11-14T04:39:47",
        "upload_time_iso_8601": "2022-11-14T04:39:47.873551Z",
        "url": "https://files.pythonhosted.org/packages/f6/f3/d01d3d71ac76276cdc402591436d6ab939abdb019606f24ca91544ea54c6/big-0.6.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "213f514d3e5d1048ad33e126f1901bc16465dbd17acb2c991fd65b02c4863bfe",
          "md5": "97ddf6915a759b63e32c4a0003bcb87b",
          "sha256": "87d18cb0b4b4a98bbb558d1ebc3b6cbd9812d955044f8b179860a2899dffba2a"
        },
        "downloads": -1,
        "filename": "big-0.6.11.tar.gz",
        "has_sig": false,
        "md5_digest": "97ddf6915a759b63e32c4a0003bcb87b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1522836,
        "upload_time": "2022-11-14T04:39:51",
        "upload_time_iso_8601": "2022-11-14T04:39:51.453998Z",
        "url": "https://files.pythonhosted.org/packages/21/3f/514d3e5d1048ad33e126f1901bc16465dbd17acb2c991fd65b02c4863bfe/big-0.6.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.12": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d6dab11dc58e68d17a3dce43ee37c05178b1a3d47ba961cad194d37bf5d519a9",
          "md5": "23b13620065841c4c17b3fe0c711b7b4",
          "sha256": "52722e4363a943de3cef06568ef0db574503bb5f053b0f4e8add9fe9579b214a"
        },
        "downloads": -1,
        "filename": "big-0.6.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23b13620065841c4c17b3fe0c711b7b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 73843,
        "upload_time": "2022-12-04T10:52:22",
        "upload_time_iso_8601": "2022-12-04T10:52:22.385077Z",
        "url": "https://files.pythonhosted.org/packages/d6/da/b11dc58e68d17a3dce43ee37c05178b1a3d47ba961cad194d37bf5d519a9/big-0.6.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "707e0ec0b6ef5fd9403e6974953a801836bc5b2af0765d359bc7f7c2bfb0716b",
          "md5": "6a4b2d84aa9d69a0b52c5d0d9314678a",
          "sha256": "50b9becd8fab857e87c1901933310f92687bc7b4135edda6ffd0897d40ef4c21"
        },
        "downloads": -1,
        "filename": "big-0.6.12.tar.gz",
        "has_sig": false,
        "md5_digest": "6a4b2d84aa9d69a0b52c5d0d9314678a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1522989,
        "upload_time": "2022-12-04T10:52:25",
        "upload_time_iso_8601": "2022-12-04T10:52:25.817741Z",
        "url": "https://files.pythonhosted.org/packages/70/7e/0ec0b6ef5fd9403e6974953a801836bc5b2af0765d359bc7f7c2bfb0716b/big-0.6.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.13": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "0f9d08d4a09c2076aff2657f1fc1d01bc227c2f83c890fe823124e420085d486",
          "md5": "07fb9055dc80af80713b4ccb53a8ce8d",
          "sha256": "735c2f0d40c86366c77d8444a1d77a0c68074ce8984addbb5c57fdf6e65aa10b"
        },
        "downloads": -1,
        "filename": "big-0.6.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07fb9055dc80af80713b4ccb53a8ce8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 74082,
        "upload_time": "2022-12-06T03:38:40",
        "upload_time_iso_8601": "2022-12-06T03:38:40.532659Z",
        "url": "https://files.pythonhosted.org/packages/0f/9d/08d4a09c2076aff2657f1fc1d01bc227c2f83c890fe823124e420085d486/big-0.6.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8b9be358d38aa554b5786e327d92e8a66bbc75c5a9020638f724ef1276cd9cc4",
          "md5": "ed566fa94c1dfcfddfd47fd934c56924",
          "sha256": "79c5b1762e5e45596d64251610ac788b4e500dbed62bc9c76f888318d08e0e1b"
        },
        "downloads": -1,
        "filename": "big-0.6.13.tar.gz",
        "has_sig": false,
        "md5_digest": "ed566fa94c1dfcfddfd47fd934c56924",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1523542,
        "upload_time": "2022-12-06T03:38:44",
        "upload_time_iso_8601": "2022-12-06T03:38:44.328686Z",
        "url": "https://files.pythonhosted.org/packages/8b/9b/e358d38aa554b5786e327d92e8a66bbc75c5a9020638f724ef1276cd9cc4/big-0.6.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.14": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "5e6b7762c573b6f7b0f9515358926b98faa1d14e232c01b08ca50bdeb0055e57",
          "md5": "5174ba6fffc0eb72f934bdf3611e7dbf",
          "sha256": "1c6daea7014c61cad30b1dcd29fbaa72d4e0c435d839c08cb8eaec95aa6462f8"
        },
        "downloads": -1,
        "filename": "big-0.6.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5174ba6fffc0eb72f934bdf3611e7dbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 75787,
        "upload_time": "2022-12-12T07:50:02",
        "upload_time_iso_8601": "2022-12-12T07:50:02.801689Z",
        "url": "https://files.pythonhosted.org/packages/5e/6b/7762c573b6f7b0f9515358926b98faa1d14e232c01b08ca50bdeb0055e57/big-0.6.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "022f72ca0bf25278513d7c10b0ab1621cfcac9a166a9b84df6ed951a46cd88a7",
          "md5": "3b9fa6d1d9add251c2412049183cd862",
          "sha256": "122e52d0f3639d7af4f2ffefb6ff1e31bdc23a841b77b2537675637c2022f56a"
        },
        "downloads": -1,
        "filename": "big-0.6.14.tar.gz",
        "has_sig": false,
        "md5_digest": "3b9fa6d1d9add251c2412049183cd862",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1526599,
        "upload_time": "2022-12-12T07:50:06",
        "upload_time_iso_8601": "2022-12-12T07:50:06.266151Z",
        "url": "https://files.pythonhosted.org/packages/02/2f/72ca0bf25278513d7c10b0ab1621cfcac9a166a9b84df6ed951a46cd88a7/big-0.6.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.15": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d3e7b1ed6ef81c21ac25051742af18b3ec2175f334db7d3fb1cb84bd89d6bc44",
          "md5": "fd9cd512e04447b1a788875f6121ed3b",
          "sha256": "d73d5e6885f25a32f4557bdd1bbd227ffa9b13e057bee1c6fe74b1c512acb537"
        },
        "downloads": -1,
        "filename": "big-0.6.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd9cd512e04447b1a788875f6121ed3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 77288,
        "upload_time": "2023-01-08T05:05:45",
        "upload_time_iso_8601": "2023-01-08T05:05:45.915328Z",
        "url": "https://files.pythonhosted.org/packages/d3/e7/b1ed6ef81c21ac25051742af18b3ec2175f334db7d3fb1cb84bd89d6bc44/big-0.6.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "6874281786cb54ed5ba426b1626364df9e4698eb7b7251d7c04bba1236deb26a",
          "md5": "75d0ef18d0d0f99e35615bdae8a2bba9",
          "sha256": "9da8487cfbbe98920dd349857e5473a99ca1d4bf7c4bf9786e4274c3f48cc6b8"
        },
        "downloads": -1,
        "filename": "big-0.6.15.tar.gz",
        "has_sig": false,
        "md5_digest": "75d0ef18d0d0f99e35615bdae8a2bba9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1528971,
        "upload_time": "2023-01-08T05:05:48",
        "upload_time_iso_8601": "2023-01-08T05:05:48.810957Z",
        "url": "https://files.pythonhosted.org/packages/68/74/281786cb54ed5ba426b1626364df9e4698eb7b7251d7c04bba1236deb26a/big-0.6.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.16": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "67c1045189df9b83ad2f52cbb2dd2c28f267670d13c59b7892a9b2bb9243f82a",
          "md5": "4198edbb5355e53ba32799e65ae5fd9d",
          "sha256": "510e79150708d157e7f3e19b20fb847a81e6b9f9250a740975eb0fc4e94d1b3c"
        },
        "downloads": -1,
        "filename": "big-0.6.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4198edbb5355e53ba32799e65ae5fd9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 78003,
        "upload_time": "2023-02-27T05:12:48",
        "upload_time_iso_8601": "2023-02-27T05:12:48.485662Z",
        "url": "https://files.pythonhosted.org/packages/67/c1/045189df9b83ad2f52cbb2dd2c28f267670d13c59b7892a9b2bb9243f82a/big-0.6.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "4cfae883b23c3480a25d87af8e85684f213a5a3217519e9e47de1e26f29d639f",
          "md5": "d9e1add31d08d07afbf23a400fae4d70",
          "sha256": "99bc8c745c95e134344ab317409583de8a736c2a599f057ea4b2c32fb40f8e90"
        },
        "downloads": -1,
        "filename": "big-0.6.16.tar.gz",
        "has_sig": false,
        "md5_digest": "d9e1add31d08d07afbf23a400fae4d70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1530151,
        "upload_time": "2023-02-27T05:12:52",
        "upload_time_iso_8601": "2023-02-27T05:12:52.077168Z",
        "url": "https://files.pythonhosted.org/packages/4c/fa/e883b23c3480a25d87af8e85684f213a5a3217519e9e47de1e26f29d639f/big-0.6.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.17": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "77f80b4f070d11bc1d96859f312def04210f6edbaf2425037c5ddd2a402b0d7b",
          "md5": "682059d479c69d6b2abe70bd5808bf73",
          "sha256": "ed745fde2be88712852925c5c360a81697178b51116c4fcc944029707eb01920"
        },
        "downloads": -1,
        "filename": "big-0.6.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "682059d479c69d6b2abe70bd5808bf73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 79087,
        "upload_time": "2023-03-09T12:22:49",
        "upload_time_iso_8601": "2023-03-09T12:22:49.232963Z",
        "url": "https://files.pythonhosted.org/packages/77/f8/0b4f070d11bc1d96859f312def04210f6edbaf2425037c5ddd2a402b0d7b/big-0.6.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b47b9a8dd5ce8bb4ac0da6540a167188427c1e64e9631c8400d8d6189201ab88",
          "md5": "03a93c36324cc773fcb3e60b7285f56c",
          "sha256": "4355257295fd1bc8163455b73196b8c99152233a27c7d94b67245cb51293f816"
        },
        "downloads": -1,
        "filename": "big-0.6.17.tar.gz",
        "has_sig": false,
        "md5_digest": "03a93c36324cc773fcb3e60b7285f56c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1532649,
        "upload_time": "2023-03-09T12:22:52",
        "upload_time_iso_8601": "2023-03-09T12:22:52.572759Z",
        "url": "https://files.pythonhosted.org/packages/b4/7b/9a8dd5ce8bb4ac0da6540a167188427c1e64e9631c8400d8d6189201ab88/big-0.6.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.18": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "dfbcc8af978821febc18eadb95616107bb4fd6828b6190b0ef70d358a7810f8b",
          "md5": "de76ba4570733ae30d22e5e18370f7ea",
          "sha256": "a14f3c17debdcaf94ebf6dbd388da6af321df979638e9f586766aa5999003807"
        },
        "downloads": -1,
        "filename": "big-0.6.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "de76ba4570733ae30d22e5e18370f7ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 79296,
        "upload_time": "2023-03-09T13:10:33",
        "upload_time_iso_8601": "2023-03-09T13:10:33.641457Z",
        "url": "https://files.pythonhosted.org/packages/df/bc/c8af978821febc18eadb95616107bb4fd6828b6190b0ef70d358a7810f8b/big-0.6.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "32e90488b9126a78288d0748ad1a6e221ece5ef1b97aab8afe49aa44637c3c59",
          "md5": "ca891e731c9d4bebcc5417d036f68288",
          "sha256": "b02e4853131be4f93529d62650e8b10c56d6d28873dfeea34c7b4e223b73bd21"
        },
        "downloads": -1,
        "filename": "big-0.6.18.tar.gz",
        "has_sig": false,
        "md5_digest": "ca891e731c9d4bebcc5417d036f68288",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1533167,
        "upload_time": "2023-03-09T13:10:36",
        "upload_time_iso_8601": "2023-03-09T13:10:36.857892Z",
        "url": "https://files.pythonhosted.org/packages/32/e9/0488b9126a78288d0748ad1a6e221ece5ef1b97aab8afe49aa44637c3c59/big-0.6.18.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.5": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d886ab325a4a2bc981bb996c7efd66890467c7d8d454d381e32aab9d3fe37aca",
          "md5": "8d9ee1e61804be9f635cb087a2595af9",
          "sha256": "df951896ead8fed4a2c4e2e2be05f4c8f23de816e7930e2a43d2722ed67852c2"
        },
        "downloads": -1,
        "filename": "big-0.6.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d9ee1e61804be9f635cb087a2595af9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 65047,
        "upload_time": "2022-10-14T06:04:45",
        "upload_time_iso_8601": "2022-10-14T06:04:45.642670Z",
        "url": "https://files.pythonhosted.org/packages/d8/86/ab325a4a2bc981bb996c7efd66890467c7d8d454d381e32aab9d3fe37aca/big-0.6.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ed1cc6ecad37a0161adf006adeee7539de020994302b3ccc533c99f6eda0fdb2",
          "md5": "c83474bedcba09d5636655ae00706569",
          "sha256": "4358ba0ccd2bc3139ceb6dc0021fb5b6a9903eef366e26ddda8aa83d457c3762"
        },
        "downloads": -1,
        "filename": "big-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c83474bedcba09d5636655ae00706569",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1505738,
        "upload_time": "2022-10-14T06:04:49",
        "upload_time_iso_8601": "2022-10-14T06:04:49.004769Z",
        "url": "https://files.pythonhosted.org/packages/ed/1c/c6ecad37a0161adf006adeee7539de020994302b3ccc533c99f6eda0fdb2/big-0.6.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e03a0691006d444c68455ab730206f9574f8dc0e1f6c079a4020d2d60327dcd0",
          "md5": "b955afcdbaddd95c5bb26ae7d62a8dbb",
          "sha256": "0b0a53aaaf6d4da51a3f1d0732fde865d2ce4c9578941c8402fbdd7f6433d0e1"
        },
        "downloads": -1,
        "filename": "big-0.6.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b955afcdbaddd95c5bb26ae7d62a8dbb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 67692,
        "upload_time": "2022-10-15T05:54:25",
        "upload_time_iso_8601": "2022-10-15T05:54:25.670554Z",
        "url": "https://files.pythonhosted.org/packages/e0/3a/0691006d444c68455ab730206f9574f8dc0e1f6c079a4020d2d60327dcd0/big-0.6.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "a2c695738563524fcb327473a320a09479923709b55d4a2a08fbf33641e166c9",
          "md5": "a4c68dca44729eb03bdc70822f6636ff",
          "sha256": "066755e9c5399510876e996a74ad2125f533fe0a5fcbc766cfdeb844933e481d"
        },
        "downloads": -1,
        "filename": "big-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a4c68dca44729eb03bdc70822f6636ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1511774,
        "upload_time": "2022-10-15T05:54:28",
        "upload_time_iso_8601": "2022-10-15T05:54:28.756581Z",
        "url": "https://files.pythonhosted.org/packages/a2/c6/95738563524fcb327473a320a09479923709b55d4a2a08fbf33641e166c9/big-0.6.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "81809ad889411d274656b409f85c61d7d070fd65023fbaeba1d53a8c98ccdec3",
          "md5": "d23330900b0812b844926f22c453fa44",
          "sha256": "6b707e0bdce462320baa4fff8bc6ad766893141a0d134dac5ff0120b4e435a9c"
        },
        "downloads": -1,
        "filename": "big-0.6.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d23330900b0812b844926f22c453fa44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70108,
        "upload_time": "2022-10-16T09:47:42",
        "upload_time_iso_8601": "2022-10-16T09:47:42.358395Z",
        "url": "https://files.pythonhosted.org/packages/81/80/9ad889411d274656b409f85c61d7d070fd65023fbaeba1d53a8c98ccdec3/big-0.6.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "836fa5dd941c506058ad61088a03c31939833b2f3bb5c54cfdf737356f587579",
          "md5": "e6c2099b27ecefc8cd9af139d6f92656",
          "sha256": "40bc953d52ca6a26c316a5c11725cd0a29c2cd5cc888ebe41c92221d4e91edc9"
        },
        "downloads": -1,
        "filename": "big-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e6c2099b27ecefc8cd9af139d6f92656",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1516739,
        "upload_time": "2022-10-16T09:47:45",
        "upload_time_iso_8601": "2022-10-16T09:47:45.818039Z",
        "url": "https://files.pythonhosted.org/packages/83/6f/a5dd941c506058ad61088a03c31939833b2f3bb5c54cfdf737356f587579/big-0.6.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.8": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "324d5ae225c578ef04bf1b08253613d2f1d079d8a2a23881cfb7bb3bf7e63549",
          "md5": "8690711a6a16f59ad1dd6adb39288b6c",
          "sha256": "eb06d73ba09ecfb21ba9ac1e613dd390ec1a13f3d6e32386568866baa2fbf550"
        },
        "downloads": -1,
        "filename": "big-0.6.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8690711a6a16f59ad1dd6adb39288b6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 70154,
        "upload_time": "2022-10-16T18:54:33",
        "upload_time_iso_8601": "2022-10-16T18:54:33.338405Z",
        "url": "https://files.pythonhosted.org/packages/32/4d/5ae225c578ef04bf1b08253613d2f1d079d8a2a23881cfb7bb3bf7e63549/big-0.6.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "e075eb8d853d77b4bc5268911138d23da0fb33791966ccd8dc819cd27e379828",
          "md5": "680450e5375666766d54e0b4a7da0f9d",
          "sha256": "bfbc5ae30a951eeeaad262a531da20275756642a379441ff0fa695f141a1fdb0"
        },
        "downloads": -1,
        "filename": "big-0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "680450e5375666766d54e0b4a7da0f9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1516645,
        "upload_time": "2022-10-16T18:54:37",
        "upload_time_iso_8601": "2022-10-16T18:54:37.348747Z",
        "url": "https://files.pythonhosted.org/packages/e0/75/eb8d853d77b4bc5268911138d23da0fb33791966ccd8dc819cd27e379828/big-0.6.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "ec4a3ca38373d830f64d0a47d70e4091c1c59617831a455ce66a2b264f3161e4",
          "md5": "3c1aa812d5b1ae78d338d791dd8689cf",
          "sha256": "6c8a1a31d39cd8ced0a13ee4c934e6be772686c647a44580d20db7f8239dc366"
        },
        "downloads": -1,
        "filename": "big-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c1aa812d5b1ae78d338d791dd8689cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82022,
        "upload_time": "2023-03-11T18:12:01",
        "upload_time_iso_8601": "2023-03-11T18:12:01.043744Z",
        "url": "https://files.pythonhosted.org/packages/ec/4a/3ca38373d830f64d0a47d70e4091c1c59617831a455ce66a2b264f3161e4/big-0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "43dce68bb059961c4c1f23612047fe6813415ddefc575ea857f872927c4ce17a",
          "md5": "c3b69c37878c75ab07f6f5860cdeedc3",
          "sha256": "580607c896fe943d06c2fc2198002a57d45d28113a7852e4cf4ef67f7a689254"
        },
        "downloads": -1,
        "filename": "big-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c3b69c37878c75ab07f6f5860cdeedc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1538533,
        "upload_time": "2023-03-11T18:12:04",
        "upload_time_iso_8601": "2023-03-11T18:12:04.305706Z",
        "url": "https://files.pythonhosted.org/packages/43/dc/e68bb059961c4c1f23612047fe6813415ddefc575ea857f872927c4ce17a/big-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "df2611064f420532ce306b45b71db3e812b0befcb74902b866e9533e740aa9e4",
          "md5": "a57968cb90953b99b4286d35de3fca01",
          "sha256": "36e61b389587cd0b9f2813feed9e38d607b919b1a7bcb815ce85e5c5fe8435aa"
        },
        "downloads": -1,
        "filename": "big-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a57968cb90953b99b4286d35de3fca01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 82748,
        "upload_time": "2023-03-13T14:54:30",
        "upload_time_iso_8601": "2023-03-13T14:54:30.874443Z",
        "url": "https://files.pythonhosted.org/packages/df/26/11064f420532ce306b45b71db3e812b0befcb74902b866e9533e740aa9e4/big-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "b2f3417adbc4a482539d5ac153bc668fbe643e4038477f753f6cd708e7cdc308",
          "md5": "51dfaceabfc9e4c21632dfd11fb482d4",
          "sha256": "c8d56087e918f8b81b286309c872b3729960697505b8b6127a49d1e489ef7a05"
        },
        "downloads": -1,
        "filename": "big-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "51dfaceabfc9e4c21632dfd11fb482d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1539909,
        "upload_time": "2023-03-13T14:54:34",
        "upload_time_iso_8601": "2023-03-13T14:54:34.624459Z",
        "url": "https://files.pythonhosted.org/packages/b2/f3/417adbc4a482539d5ac153bc668fbe643e4038477f753f6cd708e7cdc308/big-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "df2611064f420532ce306b45b71db3e812b0befcb74902b866e9533e740aa9e4",
        "md5": "a57968cb90953b99b4286d35de3fca01",
        "sha256": "36e61b389587cd0b9f2813feed9e38d607b919b1a7bcb815ce85e5c5fe8435aa"
      },
      "downloads": -1,
      "filename": "big-0.7.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a57968cb90953b99b4286d35de3fca01",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 82748,
      "upload_time": "2023-03-13T14:54:30",
      "upload_time_iso_8601": "2023-03-13T14:54:30.874443Z",
      "url": "https://files.pythonhosted.org/packages/df/26/11064f420532ce306b45b71db3e812b0befcb74902b866e9533e740aa9e4/big-0.7.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "b2f3417adbc4a482539d5ac153bc668fbe643e4038477f753f6cd708e7cdc308",
        "md5": "51dfaceabfc9e4c21632dfd11fb482d4",
        "sha256": "c8d56087e918f8b81b286309c872b3729960697505b8b6127a49d1e489ef7a05"
      },
      "downloads": -1,
      "filename": "big-0.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "51dfaceabfc9e4c21632dfd11fb482d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1539909,
      "upload_time": "2023-03-13T14:54:34",
      "upload_time_iso_8601": "2023-03-13T14:54:34.624459Z",
      "url": "https://files.pythonhosted.org/packages/b2/f3/417adbc4a482539d5ac153bc668fbe643e4038477f753f6cd708e7cdc308/big-0.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}