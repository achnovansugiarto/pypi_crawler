{
  "info": {
    "author": "Aurelien Pelissier",
    "author_email": "aurelien.pelissier.38@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# REGIR: A Scalable Gillespie Algorithm for non-Markovian Stochastic Simulations\n\nRefer to the github folder for a full description (https://github.com/Aurelien-Pelissier/REGIR). Discrete stochastic processes are widespread in both nature and human-made systems, with applications across physics, biochemistry, epidemiology, social patterns and finance, just to name a few. In the majority of these systems, the dynamics cannot be properly described with memoryless (or Markovian) interactions, and thus require the use of numerical tools for analyzing these non-Markovian dynamics. This repository contains an implementattion of a general and scalable framework to simulate non-Markovian stochastic systems with arbitrary inter-event time distribution and accuracy. The algorithm is referred to as the Rejection Gillespie algorithm for non-Markovian Reactions (REGIR) [1].\n\n&nbsp;\n\n\n\n        \n        \n### Simulating a non-Markovian system\n\nFirst, you need to install REGIR, or you can use the `REGIR.py` file provided in the repository:\n\n\t- pip install REGIR\n\n\nThen, you can directly run a non-Markovian simulation with this toy example (other examples, including the three biochemical systems described in the paper: Cell division, differentiation and RNA transcription, are provided in the `/REGIR/Examples` folder.):\n\n\timport REGIR as gil\n\n\t#Set the simulation parameters:\n\tclass param:\n\t\tTend = 10\t\t#Length of the simulation\n\t\tN_simulations = 20\t#The simulation results should be averaged over many trials\n\t\tunit = 'h'\t\t#Unit of time (used for plotting only)\n\t\ttimepoints = 100\t#Number of timepoints to record (used for plotting only)\n\n\tr1 = 1\n\tr2 = 4\n\tr3 = 0.03\n\talpha1 = 20\n\talpha2 = 5\n      \n\t#Define the reaction chanels:\n\treaction1 = gil.Reaction_channel(param,rate=r1, shape_param=alpha1, distribution = 'Gamma')\n\treaction1.reactants = ['A']\n\treaction1.products = ['B']\t\n\treaction2 = gil.Reaction_channel(param,rate=r2, shape_param=alpha2, distribution = 'Weibull')\n\treaction2.reactants = ['B']\n\treaction2.products = ['C','A']\t\n\treaction3 = gil.Reaction_channel(param,rate=r3)\n\treaction3.reactants = ['A','B']\n\treaction3.products = []\n\t\t\n\t\n\t#Define the initial population of reactants:\n\tN_init = dict()\n\tN_init['A'] = 300\n\tN_init['B'] = 0\n\tN_init['C'] = 0\n\n\t#Initialize and run the Gillepsie simulation:\n\treaction_channel_list = [reaction1, reaction2, reaction3]\n\tG_simul = gil.Gillespie_simulation(N_init,param)\n\tG_simul.reaction_channel_list = reaction_channel_list\n\tG_simul.run_simulations(param.Tend, verbose = True)\n\tG_simul.plot_inter_event_time_distribution()\n\tG_simul.plot_populations()\n\nThe algorithm runs for a few seconds and output the following figures (note that you can disables all printing and plotting by passing the argument `verbose = False` when running the simulation)\n      \n### Implemented distributions\nWith the current implementation, each available distribution are characterised by their rate and a shape parameter as follow:\n\n      Exponential:\n          - rate: 1/mean\n          - shape parameter: None\n      \n      Normal:\n          - rate: 1/mean\n          - shape: std/mean\n      \n      LogNormal:\n          - rate: 1/mean\n          - shape: std/mean\n          \n      Gamma:\n          - rate: 1/mean\n          - shape: Î± >= 1 (https://en.wikipedia.org/wiki/Gamma_distribution)\n          \n      Weibull:\n          - rate: 1/mean\n          - shape: k >= 1 (https://en.wikipedia.org/wiki/Weibull_distribution)\n          \n      Cauchy:\n          - rate: 1/median\n          - shape: Î³ (https://en.wikipedia.org/wiki/Cauchy_distribution)\n      \n\nKeep in mind that non-Markovian simulations are only available for reaction channels with a single reactant, as the definition of inter-event time distribution is ambigious for channels with multiple reactants. If a channel is defined without or with more than one reactant, it will be considered as a Poisson process. Also, note that monotolically decreasing distributions, such as Weibull (k < 1), gamma (Î± < 1) or power laws, are not available in the current implementation of this repository, as these can be more elegantly and efficiently simulated with the Laplace Gillespie algorithm [2]. \n\n*Feel free to drop me an email if you have interest in me adding the Laplace Gillespie or any other relevant distributions to this implementation.* \n\n\n\n## References\n\n[1] Pelissier, A, Phan, M, et al. \"Practical and scalable simulations of non-Markovian stochastic processes\". Proceedings of the National Academy of Sciences (2022)\n\n[2] Masuda, Naoki, and Luis EC Rocha. \"A Gillespie algorithm for non-Markovian stochastic processes.\" Siam Review 60.1 (2018): 95-115.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Aurelien-Pelissier/REGIR/",
    "keywords": "Gillespie,modeling,stochastic,simulation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "REGIR",
    "package_url": "https://pypi.org/project/REGIR/",
    "platform": "",
    "project_url": "https://pypi.org/project/REGIR/",
    "project_urls": {
      "Homepage": "https://github.com/Aurelien-Pelissier/REGIR/"
    },
    "release_url": "https://pypi.org/project/REGIR/1.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An algorithm for non-Markovian stochastic simulation",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12788187,
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72a4c291cb1d0e02f11037dd52ff80d011cf72e189eb18107ad8a74224ccb301",
          "md5": "0c81a0527a25f6d4d95f2b73e0f7ac27",
          "sha256": "40fd5033320986e0e023bb1fe4562f771bd23d9c4b6c26a15934bf2ac004b75b"
        },
        "downloads": -1,
        "filename": "REGIR-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c81a0527a25f6d4d95f2b73e0f7ac27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12354,
        "upload_time": "2022-02-04T14:44:37",
        "upload_time_iso_8601": "2022-02-04T14:44:37.559875Z",
        "url": "https://files.pythonhosted.org/packages/72/a4/c291cb1d0e02f11037dd52ff80d011cf72e189eb18107ad8a74224ccb301/REGIR-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64b63cf907a8dd3ba24a3f170638dffb89fa97171ea234f6722c4ab9be2d2e33",
          "md5": "153054f68e181a47075f4e207bf57c08",
          "sha256": "0450cf2cabf05689da1c0c011ea5308533eff4e6bb1aeaa0bea09a57851908c6"
        },
        "downloads": -1,
        "filename": "REGIR-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "153054f68e181a47075f4e207bf57c08",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13655,
        "upload_time": "2022-02-04T14:44:39",
        "upload_time_iso_8601": "2022-02-04T14:44:39.084366Z",
        "url": "https://files.pythonhosted.org/packages/64/b6/3cf907a8dd3ba24a3f170638dffb89fa97171ea234f6722c4ab9be2d2e33/REGIR-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72a4c291cb1d0e02f11037dd52ff80d011cf72e189eb18107ad8a74224ccb301",
        "md5": "0c81a0527a25f6d4d95f2b73e0f7ac27",
        "sha256": "40fd5033320986e0e023bb1fe4562f771bd23d9c4b6c26a15934bf2ac004b75b"
      },
      "downloads": -1,
      "filename": "REGIR-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c81a0527a25f6d4d95f2b73e0f7ac27",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12354,
      "upload_time": "2022-02-04T14:44:37",
      "upload_time_iso_8601": "2022-02-04T14:44:37.559875Z",
      "url": "https://files.pythonhosted.org/packages/72/a4/c291cb1d0e02f11037dd52ff80d011cf72e189eb18107ad8a74224ccb301/REGIR-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64b63cf907a8dd3ba24a3f170638dffb89fa97171ea234f6722c4ab9be2d2e33",
        "md5": "153054f68e181a47075f4e207bf57c08",
        "sha256": "0450cf2cabf05689da1c0c011ea5308533eff4e6bb1aeaa0bea09a57851908c6"
      },
      "downloads": -1,
      "filename": "REGIR-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "153054f68e181a47075f4e207bf57c08",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13655,
      "upload_time": "2022-02-04T14:44:39",
      "upload_time_iso_8601": "2022-02-04T14:44:39.084366Z",
      "url": "https://files.pythonhosted.org/packages/64/b6/3cf907a8dd3ba24a3f170638dffb89fa97171ea234f6722c4ab9be2d2e33/REGIR-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}