{
  "info": {
    "author": "",
    "author_email": "Scott McLean <smclean@databankimx.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Scott McLean's Utility Scripts\r\n\r\nThis project includes my beginner collection of utility functions\r\n\r\n# Setup\r\n\r\nBy default, the relative paths dir_path() function will point to the directory of the running script.  \r\nTo specify a default subfolder, you have two options:\r\n\r\n## JSON Configuration File\r\nCreate a file called \"sm_utils.json\" in the directory containing your script and include the following:\r\n```json\r\n{\r\n    \"default_path\" : \"YOUR_SUBFOLDER\"\r\n}\r\n```\r\n\r\nor...\r\n\r\n## Call the set_path() function\r\nIn your code, add the following:\r\n```py\r\n# set_path example:\r\nfrom sm_utils import set_path\r\n\r\nset_path(\"YOUR_SUBFOLDER\")\r\n```\r\n\r\n# Usage\r\n\r\n## Timer\r\nTo use the timer function, simply import it and decorate the function you want to time with \"@timer\"\r\n```py\r\n# @timer example:\r\nfrom sm_utils import timer\r\n\r\n@timer\r\ndef timed_function():\r\n    # Your code\r\n```\r\n\r\n## Timer Class\r\nTo use the execution timer class, simply import it and decorate the function you want to count with \"@Timed\"\r\n```py\r\n# @Counted example\r\nfrom sm_utils import Timed\r\n\r\n@Timed\r\ndef timed():\r\n    # Your code\r\n```\r\n\r\n## Relative Paths\r\nThere are three relative path functions:\r\n\r\n- root_path()  \r\nreturns the path to the directory in which your script is running\r\n```py\r\n# root_path example:\r\nfrom sm_utils import root_path\r\n\r\ndir = root_path()\r\n```\r\n\r\n- dir_path(folder_path)  \r\nreturns the path to the specified subdirectory  \r\nif the subdirectory is omitted, returns the default subdirectory (or root_path() if no default is set)\r\n```py\r\n# dir_path example:\r\nfrom sm_utils import dir_path\r\n\r\ndir = dir_path(\"YOUR_OPTIONAL_SUBFOLDER\")\r\n```\r\n\r\n- file_path(filename, folder_path)  \r\nreturns the full path to the specified file in the specified subdirectory  \r\nif the subdirectory is omitted, returns the full path to the specified file in the default subdirectory  \r\n (or root_path() if no default is set)\r\n```py\r\n# file_path example:\r\nfrom sm_utils import file_path\r\n\r\nfile = file_path(\"YOUR_FILE_NAME\", \"YOUR_OPTIONAL_SUBFOLDER\")\r\n```\r\n\r\n## Run Function Lists\r\nThere are two function lists functions:\r\n\r\n- run(functions, *args, **kwargs)  \r\nExecutes each of the functions in the list (passing all additional arguments)  \r\nReturns a dictionary with key = function.__name__ and value = function return value for each execution\r\n```py\r\n# run example:\r\nfrom sm_utils import run\r\n\r\ndef foo1(bar):\r\n    # some code\r\ndef foo2(bar):\r\n    # some code\r\n\r\n# Run each of the functions\r\nresults = run([foo1, foo2], bar)\r\n```\r\n\r\n- run_repeat(repeat, functions, *args, **kwargs)  \r\nExecutes each of the functions in the list (passing all additional arguments) the number of times indicated by \"repeat\"  \r\nReturns a dictionary with key = function.__name__{repeat_counter} and value = function return value for each execution\r\n```py\r\n# run_repeat example:\r\nfrom sm_utils import run_repeat\r\n\r\ndef foo1(bar):\r\n    # some code\r\ndef foo2(bar):\r\n    # some code\r\n\r\n# Run each of the functions three times\r\nresults = run_repeat(3, [foo1, foo2], bar)\r\n```\r\n\r\n## Execution Counter Function\r\nTo use the counter function, simply import it and decorate the function you want to count with \"@counter\"  \r\nThen, you can access &lt;function&gt;.count to retrieve the number of times the function has been called\r\n```py\r\n# @counter example:\r\nfrom sm_utils import counter\r\n\r\n@counter\r\ndef counted_function():\r\n    # Your code\r\n\r\nnum_calls = counted_function.count\r\n```\r\n\r\nTo reset the counter for a given function, import and use the reset_counter() function\r\n```py\r\n# reset_counter example:\r\nfrom sm_utils import reset_counter\r\n\r\n@counter\r\ndef counted_function():\r\n    # Your code\r\n\r\nreset_counter(counted_function)\r\n```\r\n\r\n## Execution Counter Class\r\nTo use the Counted class, simply import it and decorate the function you want to count with \"@Counted\"  \r\nThen, you can access &lt;function&gt;.count to retrieve the number of times the function has been called  \r\nYou can reset the function counter to zero (or a passed int) using  &lt;function&gt;.reset()\r\n```py\r\n# @Counted example\r\nfrom sm_utils import Counted\r\n\r\n@Counted\r\ndef counted_function():\r\n    # Your code\r\n\r\nnum_calls = counted_function.count\r\n\r\ncounted_function.reset()\r\n```\r\n\r\n## Pause\r\nTo await user input, you can use the pause function\r\n\r\n- pause(end = False)  \r\nWaits for user input before continuing execution (input is not stored)  \r\nWhen \"end\" is True, terminates execution after user input\r\n```py\r\n# pause example:\r\nfrom sm_utils import pause\r\n\r\n# ...\r\n\r\n# Wait until user hits enter to proceed\r\npause()\r\n\r\n# ...\r\n```\r\n\r\n## Internal Notes for Packaging Training\r\n\r\nTo install, use the following command:  \r\n(From Test PyPI)\r\n```\r\npy -m pip install --index-url https://test.pypi.org/simple/ --no-deps sm_utils\r\n```\r\n\r\n(From PyPI)\r\n```\r\npy -m pip install sm_utils\r\n```\r\n\r\nTo build and publish, use the following commands:  \r\n(Build)\r\n```\r\npy -m build\r\n```\r\n\r\n(Upload Test PyPI)\r\n```\r\npy -m twine upload --repository testpypi dist/*\r\n```\r\n\r\n(Upload PyPI)\r\n```\r\npy -m twine upload dist/*\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sm-utils",
    "package_url": "https://pypi.org/project/sm-utils/",
    "platform": null,
    "project_url": "https://pypi.org/project/sm-utils/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/sm-utils/0.2.4/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Utility Scripts",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16999413,
  "releases": {
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d90ef2ed949a116f2d5a57e476fcb38350581410f242cc1ab991c481bbe762d",
          "md5": "b42f4a0be24050b05450219f1be0c2f0",
          "sha256": "83ca6794f103fafa4cc1bee768636fabc4ca788c20ee393f962c8bf904ae6852"
        },
        "downloads": -1,
        "filename": "sm_utils-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b42f4a0be24050b05450219f1be0c2f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5316,
        "upload_time": "2023-02-23T20:50:13",
        "upload_time_iso_8601": "2023-02-23T20:50:13.475414Z",
        "url": "https://files.pythonhosted.org/packages/2d/90/ef2ed949a116f2d5a57e476fcb38350581410f242cc1ab991c481bbe762d/sm_utils-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8778c9a12fe93e56a32e2da7d6ec5dbd6f4ec8f246e0b0c99ed91b43d2aca8a",
          "md5": "74573d713c206846e0633cfd1b5bbcbb",
          "sha256": "0ee42eae36ca24cd553feea2fb21459a431ad61f97cf205ead6951d8a26f63cd"
        },
        "downloads": -1,
        "filename": "sm_utils-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "74573d713c206846e0633cfd1b5bbcbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 4872,
        "upload_time": "2023-02-23T20:50:14",
        "upload_time_iso_8601": "2023-02-23T20:50:14.581140Z",
        "url": "https://files.pythonhosted.org/packages/b8/77/8c9a12fe93e56a32e2da7d6ec5dbd6f4ec8f246e0b0c99ed91b43d2aca8a/sm_utils-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d90ef2ed949a116f2d5a57e476fcb38350581410f242cc1ab991c481bbe762d",
        "md5": "b42f4a0be24050b05450219f1be0c2f0",
        "sha256": "83ca6794f103fafa4cc1bee768636fabc4ca788c20ee393f962c8bf904ae6852"
      },
      "downloads": -1,
      "filename": "sm_utils-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b42f4a0be24050b05450219f1be0c2f0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 5316,
      "upload_time": "2023-02-23T20:50:13",
      "upload_time_iso_8601": "2023-02-23T20:50:13.475414Z",
      "url": "https://files.pythonhosted.org/packages/2d/90/ef2ed949a116f2d5a57e476fcb38350581410f242cc1ab991c481bbe762d/sm_utils-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8778c9a12fe93e56a32e2da7d6ec5dbd6f4ec8f246e0b0c99ed91b43d2aca8a",
        "md5": "74573d713c206846e0633cfd1b5bbcbb",
        "sha256": "0ee42eae36ca24cd553feea2fb21459a431ad61f97cf205ead6951d8a26f63cd"
      },
      "downloads": -1,
      "filename": "sm_utils-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "74573d713c206846e0633cfd1b5bbcbb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 4872,
      "upload_time": "2023-02-23T20:50:14",
      "upload_time_iso_8601": "2023-02-23T20:50:14.581140Z",
      "url": "https://files.pythonhosted.org/packages/b8/77/8c9a12fe93e56a32e2da7d6ec5dbd6f4ec8f246e0b0c99ed91b43d2aca8a/sm_utils-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}