{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Other languages: [FRANCAIS](README_FR.md)\n# Kitronik-Pico-Autonomous-Robotics-Platform-MicroPython\nA class and sample code for the Kitronik Autonomous Robotics Platform for the Raspberry Pi Pico. (www.kitronik.co.uk/5335)\n\nOn the Autonomous Robotics Platform:  \n* Forward is defined as the end away from the power switch / castor  \n* Left and Right are defined when facing Forward  \n* The Pico should be inserted with the USB connector facing the rear (away from the Pen hole)  \n\nTo use, save PicoAutonomousRobotics.py file onto the Pico so it can be imported.\n## Import PicoAutonomousRobotics.py and construct an instance:\n```python\n    import PicoAutonomousRobotics\n    robot = PicoAutonomousRobotics.KitronikPicoRobotBuggy()\n ```\nThis will setup the various correct pins for motors / servos / sensors.  \n## Motors\n### Drive a motor:\n```python\n    robot.motorOn(motor, direction, speed)\n```\nwhere:\n* motor => \"l\" or \"r\" (left or right)\n* direction => \"f\" or \"r\" (forward or reverse)\n* speed => 0 to 100\n\n### Stop a motor:\n```python\n    robot.motorOff(motor)\n```\nwhere:\n* motor => \"l\" or \"r\" (left or right)\n\n## Servos\nThe servo PWM (20ms repeat, on period capped between 500 and 2500us) is driven using the Pico PIO.  \nThe servos are registered automatically in the initalisation of the class.   \nThis process sets the PIO PWM active on the servo pin.  \nIf the pin is needed for another purpose it can be 'deregistered' which sets the PIO to inactive.  \n ```python\n    robot.deregisterServo(servo)\n ```\nTo re-register a servo after it has been de-registered:  \n```python\n    robot.registerServo(servo)\n```\nwhere:\n* servo => the servo number (0-3)\n\n\n### Drive a servo:\n\n```python\n    robot.goToPosition(servo, degrees)\n```\nwhere:\n* servo => the servo to control (0-3)\n* degrees => 0-180\n\n\n```python\n    robot.goToPeriod(servo, period)\n ```   \nwhere:\n* servo => the servo to control (0-3)\n* period => 500-2500 in us\n\n## Ultrasonic Sensor\n### Read ultrasonic distance:\n```python\nrobot.getDistance(whichSensor)\n```\nwhere\n* whichSensor => \"f\" or \"r\" for front or rear sensor\nThis parameter is defaulted to \"f\" so the call can be:  \n```python\nrobot.getDistance()\n```\n\n### Setup the units:  \n```python\nrobot.setMeasurementsTo(units)\n```\nwhere:\n* units => \"inch\" for imperial (inch) measurements, \"cm\" for metric (cm) measuerments\n\n## Line Following\nSensors are marked on the sensor PCB for left, right, and centre. Left is defined as on the left side when looking down on the buggy, facing the front.  \nThe centre sensor is slightly ahead of the side sensors.\n\n### Read values:\n```python\nrobot.getRawLFValue(whichSensor):\n```\nreturns:\n* the raw sensor value in the range 0-65535 (low numbers represent dark surfaces)  \n\nwhere:\n* whichSensor => \"c\", \"l\", \"r\" (centre, left or right sensor)\n\nThe line following sensor can also return **true** or **false**:\n```python\nrobot.isLFSensorLight(whichSensor):\n```\nreturns:  \n* **True** when sensor is over a light surface and **False** when over a dark surface\n\nwhere:\n* whichSensor => \"l\",\"r\", or \"c\"\n\n### Set light / dark thresholds:\nThe light / dark determination is based on the values in \"darkThreshold\" and \"lightThreshold\".  \nTo set the thresholds use:\n```python\nrobot.setLFDarkValue(darkThreshold, OptionalLeftThreshold = -1, OptionalRightThreshold = -1)\n```\n```python\nrobot.setLFLightValue(lightThreshold, OptionalLeftThreshold = -1, OptionalRightThreshold = -1)\n```\nTypical values for 'Light' surfaces would be under 20000, and for 'Dark' surfaces over 30000.  \nOptional thresholds can set different values for Left and Right sensors in which case the first value sets the Centre threshold.  \nIf not used all 3 sensors have the same threshold.\n\n\n## Buzzer\nThe buzzer is driven with a PWM pin.  \n\n### Sound the buzzer:  \n```python\nrobot.soundFrequency(frequency)\n```\nwhere:\n  * frequency => 0-3000 (the frequency to sound in Hz)\n\n### Silence the buzzer:\n```python\nrobot.silence()\n```\n\n### Beep the buzzer (like a car horn):\n```python        \nrobot.beepHorn():\n```\n\n## ZIP LEDs\nZIP LEDs have a 2 stage operation...\n### Setup ZIP LEDs:  \nSet the LEDs with the colour required:  \n```python\nrobot.setLED(whichLED, whichColour)\n```\nwhere:  \n* whichLED => 0-3  \n* whichColour => tuple of (Red Value, Green Value, Blue Value), or one of the pre-defined colours:\n```python\nCOLOURS = (BLACK, RED, YELLOW, GREEN, CYAN, BLUE, PURPLE, WHITE)\n```\nTurn off the LEDs:\n```python\nrobot.clear(whichLED)\n```\nwhere:  \n* whichLED => 0-3\n\nControl the brightness:\n```python\nrobot.setBrightness(value)\n```\nwhere:  \n* value => 0-100 (brightness value in %)\n\n### Make the changes visible:\n```python\nrobot.show():\n```\n\n# Troubleshooting\n\nThis code is designed to be used as a module. See: https://kitronik.co.uk/blogs/resources/modules-micro-python-and-the-raspberry-pi-pico for more information\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "KitronikPicoAutonomousRoboticsPlatform",
    "package_url": "https://pypi.org/project/KitronikPicoAutonomousRoboticsPlatform/",
    "platform": null,
    "project_url": "https://pypi.org/project/KitronikPicoAutonomousRoboticsPlatform/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/KitronikPicoAutonomousRoboticsPlatform/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Kitronik Autonomous Robotics Platform (Buggy) for Pico",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16332065,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc18e9c997dbfce75efcba413775004dd4f8c795831c2ee16d07a0ee5f751758",
          "md5": "d45875e47be29248bebbd36962af8d21",
          "sha256": "76be4ca4072ddd450fd2de38475aadb42d9bdf30dcf747e2eec6b24f7906a399"
        },
        "downloads": -1,
        "filename": "KitronikPicoAutonomousRoboticsPlatform-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d45875e47be29248bebbd36962af8d21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9159,
        "upload_time": "2023-01-06T15:33:23",
        "upload_time_iso_8601": "2023-01-06T15:33:23.069575Z",
        "url": "https://files.pythonhosted.org/packages/fc/18/e9c997dbfce75efcba413775004dd4f8c795831c2ee16d07a0ee5f751758/KitronikPicoAutonomousRoboticsPlatform-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0815a1b18479e0318e3706406e6b4415e7fc9b7a289a5ffd666d8380d8b73974",
          "md5": "517cffb0a419c4fa1b2d0be49fd887f9",
          "sha256": "a031d6ba24992f1472c8b5a02e43414dbad8eb9d73054bee8f8686ccb5bb6da3"
        },
        "downloads": -1,
        "filename": "KitronikPicoAutonomousRoboticsPlatform-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "517cffb0a419c4fa1b2d0be49fd887f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8293,
        "upload_time": "2023-01-06T15:33:24",
        "upload_time_iso_8601": "2023-01-06T15:33:24.831589Z",
        "url": "https://files.pythonhosted.org/packages/08/15/a1b18479e0318e3706406e6b4415e7fc9b7a289a5ffd666d8380d8b73974/KitronikPicoAutonomousRoboticsPlatform-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc18e9c997dbfce75efcba413775004dd4f8c795831c2ee16d07a0ee5f751758",
        "md5": "d45875e47be29248bebbd36962af8d21",
        "sha256": "76be4ca4072ddd450fd2de38475aadb42d9bdf30dcf747e2eec6b24f7906a399"
      },
      "downloads": -1,
      "filename": "KitronikPicoAutonomousRoboticsPlatform-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d45875e47be29248bebbd36962af8d21",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9159,
      "upload_time": "2023-01-06T15:33:23",
      "upload_time_iso_8601": "2023-01-06T15:33:23.069575Z",
      "url": "https://files.pythonhosted.org/packages/fc/18/e9c997dbfce75efcba413775004dd4f8c795831c2ee16d07a0ee5f751758/KitronikPicoAutonomousRoboticsPlatform-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0815a1b18479e0318e3706406e6b4415e7fc9b7a289a5ffd666d8380d8b73974",
        "md5": "517cffb0a419c4fa1b2d0be49fd887f9",
        "sha256": "a031d6ba24992f1472c8b5a02e43414dbad8eb9d73054bee8f8686ccb5bb6da3"
      },
      "downloads": -1,
      "filename": "KitronikPicoAutonomousRoboticsPlatform-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "517cffb0a419c4fa1b2d0be49fd887f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8293,
      "upload_time": "2023-01-06T15:33:24",
      "upload_time_iso_8601": "2023-01-06T15:33:24.831589Z",
      "url": "https://files.pythonhosted.org/packages/08/15/a1b18479e0318e3706406e6b4415e7fc9b7a289a5ffd666d8380d8b73974/KitronikPicoAutonomousRoboticsPlatform-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}