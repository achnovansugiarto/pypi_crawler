{
  "info": {
    "author": "Joseph Fox",
    "author_email": "im.not.chatty@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Communications",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "********\npushjack\n********\n\n\nPush notifications for APNS (iOS) and GCM (Android). It provides HTTP/2 network protocol based APNS client.\n\nQuickstart\n==========\n\nInstall using pip:\n\n\n::\n\n    pip install pushjack-http2\n\n\nWhether using ``APNS`` or ``GCM``, pushjack provides clients for each. It also provides\na HTTP/2 based APNS client.\n\n\nAPNS (using certificates)\n-------------------------\n\nSend notifications using the ``APNSClient`` class:\n\n\n.. code-block:: python\n\n    from pushjack_http2 import APNSClient\n\n    client = APNSClient(certificate='<path/to/certificate.pem>',\n                        default_error_timeout=10,\n                        default_expiration_offset=2592000,\n                        default_batch_size=100,\n                        default_retries=5)\n\n    token = '<device token>'\n    alert = 'Hello world.'\n\n    # Send to single device.\n    # NOTE: Keyword arguments are optional.\n    res = client.send(token,\n                      alert,\n                      badge='badge count',\n                      sound='sound to play',\n                      category='category',\n                      content_available=True,\n                      title='Title',\n                      title_loc_key='t_loc_key',\n                      title_loc_args='t_loc_args',\n                      action_loc_key='a_loc_key',\n                      loc_key='loc_key',\n                      launch_image='path/to/image.jpg',\n                      extra={'custom': 'data'})\n\n    # Send to multiple devices by passing a list of tokens.\n    client.send([token], alert, **options)\n\n\nAccess response data.\n\n.. code-block:: python\n\n    # List of all tokens sent.\n    res.tokens\n\n    # List of errors as APNSServerError objects\n    res.errors\n\n    # Dict mapping errors as token => APNSServerError object.\n    res.token_errors\n\n\nOverride defaults for error_timeout, expiration_offset, and batch_size.\n\n.. code-block:: python\n\n    client.send(token,\n                alert,\n                expiration=int(time.time() + 604800),\n                error_timeout=5,\n                batch_size=200)\n\n\nSend a low priority message.\n\n.. code-block:: python\n\n    # The default is low_priority == False\n    client.send(token, alert, low_priority=True)\n\n\nGet expired tokens.\n\n.. code-block:: python\n\n    expired_tokens = client.get_expired_tokens()\n\n\nClose APNS connection.\n\n.. code-block:: python\n\n    client.close()\n\n\nFor the APNS sandbox, use ``APNSSandboxClient`` instead:\n\n\n.. code-block:: python\n\n    from pushjack_http2 import APNSSandboxClient\n\nAPNS (using Auth tokens)\n------------------------\n\nSend notifications using the ``APNSHTTP2Client`` class:\n\n\n.. code-block:: python\n\n    from pushjack_http2 import APNSHTTP2Client\n\n    key = \"my_key\"\n\n    token = apns.APNSAuthToken(\n        token=key,\n        team_id=\"my_team_id\",\n        key_id=\"my_key_id\",\n    )\n\n    client = apns.APNSHTTP2Client(\n        token=token,\n        bundle_id='my_bundle_id',\n    )\n\n    response = client.send_message(\n        device_id=\"my_device_id\",\n        message=\"message\",\n        content_available=True,\n        title=\"title\"\n    )\n\n\nClose APNS connection.\n\n.. code-block:: python\n\n    client.conn.close()\n\n\nFor the APNS sandbox, use ``APNSHTTP2SandboxClient`` instead:\n\n\n.. code-block:: python\n\n    from pushjack_http2 import APNSHTTP2SandboxClient\n\n\nGCM\n---\n\nSend notifications using the ``GCMClient`` class:\n\n\n.. code-block:: python\n\n    from pushjack_http2 import GCMClient\n\n    client = GCMClient(api_key='<api-key>')\n\n    registration_id = '<registration id>'\n    alert = 'Hello world.'\n    notification = {'title': 'Title', 'body': 'Body', 'icon': 'icon'}\n\n    # Send to single device.\n    # NOTE: Keyword arguments are optional.\n    res = client.send(registration_id,\n                      alert,\n                      notification=notification,\n                      collapse_key='collapse_key',\n                      delay_while_idle=True,\n                      time_to_live=604800)\n\n    # Send to multiple devices by passing a list of ids.\n    client.send([registration_id], alert, **options)\n\n\nAlert can also be be a dictionary with data fields.\n\n.. code-block:: python\n\n    alert = {'message': 'Hello world', 'custom_field': 'Custom Data'}\n\n\nAlert can also contain the notification payload.\n\n.. code-block:: python\n\n    alert = {'message': 'Hello world', 'notification': notification}\n\n\nSend a low priority message.\n\n.. code-block:: python\n\n    # The default is low_priority == False\n    client.send(registration_id, alert, low_priority=True)\n\n\nAccess response data.\n\n.. code-block:: python\n\n    # List of requests.Response objects from GCM Server.\n    res.responses\n\n    # List of messages sent.\n    res.messages\n\n    # List of registration ids sent.\n    res.registration_ids\n\n    # List of server response data from GCM.\n    res.data\n\n    # List of successful registration ids.\n    res.successes\n\n    # List of failed registration ids.\n    res.failures\n\n    # List of exceptions.\n    res.errors\n\n    # List of canonical ids (registration ids that have changed).\n    res.canonical_ids\n\n.. _changelog:\n\nChangelog\n=========\n\nv2.1.0 (28-02-2020)\n-------------------\n\n- Import `APNSAuthToken` to `__init__.py`.\n\n\nv1.5.0 (2018-07-29)\n-------------------\n\n- gcm: Use FCM URL instead of deprecated GCM URL. Thanks `Lukas Anzinger`_!\n\n\nv1.4.1 (2018-06-18)\n-------------------\n\n- apns: Remove restriction on token length due to incorrect assumption about tokens always being 64 characters long.\n\n\nv1.4.0 (2017-11-09)\n-------------------\n\n- apns: Add exceptions ``APNSProtocolError`` and ``APNSTimeoutError``.  Thanks `Jakub Kleň`_!\n- apns: Add retry mechanism to ``APNSClient.send``. Thanks `Jakub Kleň`_!\n\n  - Add ``default_retries`` argument to ``APNSClient`` initialization. Defaults to ``5``.\n  - Add ``retries`` argument to ``APNSClient.send``. By default will use ``APNSClient.default_retries`` unless explicitly passed in.\n  - If unable to send after ``retries``, an ``APNSTimeoutError`` will be raised.\n\n- apns: Fix bug in bulk ``APNSClient.send`` that resulted in an off-by-one error for message identifier in returned errors. Thanks `Jakub Kleň`_!\n- apns: Add max payload truncation option to ``APNSClient.send``.  Thanks `Jakub Kleň`_!\n\n  - Add ``default_max_payload_length`` argument to ``APNSClient`` initialization. Defaults to ``0`` which disabled max payload length check.\n  - Add ``max_payload_length`` argument to ``APNSClient.send``. By default will use ``APNSClient.default_max_payload_length`` unless explicitly passed in.\n  - When ``max_payload_length`` set, messages will be truncated to fit within the length restriction by trimming the \"message\" text and appending it with \"...\".\n\n\nv1.3.0 (2017-03-11)\n-------------------\n\n- apns: Optimize reading from APNS Feedback so that the number of bytes read are based on header and token lengths.\n- apns: Explicitly close connection to APNS Feedback service after reading data.\n- apns: Add support for ``mutable-content`` field (Apple Notification Service Extension) via ``mutable_content`` argument to ``APNSClient.send()``. Thanks `Ahmed Khedr`_!\n- apns: Add support for ``thread-id`` field (group identifier in Notification Center) via ``thread_id`` argument to ``APNSClient.send()``. Thanks `Ahmed Khedr`_!\n\n\nv1.2.1 (2015-12-14)\n-------------------\n\n- apns: Fix implementation of empty APNS notifications and allow notifications with ``{\"aps\": {}}`` to be sent. Thanks `Julius Seporaitis`_!\n\n\nv1.2.0 (2015-12-04)\n-------------------\n\n- gcm: Add support for ``priority`` field to GCM messages via ``low_priority`` keyword argument. Default behavior is for all messages to be ``\"high\"`` priority. This is the opposite of GCM messages but mirrors the behavior in the APNS module where the default priority is ``\"high\"``.\n\n\nv1.1.0 (2015-10-22)\n-------------------\n\n- gcm: Add support for ``notification`` field to GCM messages.\n- gcm: Replace ``registration_ids`` field with ``to`` field when sending to a single recipient since ``registration_ids`` field has been deprecated for single recipients.\n\n\nv1.0.1 (2015-05-07)\n-------------------\n\n- gcm: Fix incorrect authorization header in GCM client. Thanks `Brad Montgomery`_!\n\n\nv1.0.0 (2015-04-28)\n-------------------\n\n- apns: Add ``APNSSandboxClient`` for sending notifications to APNS sandbox server.\n- apns: Add ``message`` attribute to ``APNSResponse``.\n- pushjack: Add internal logging.\n- apns: Fix APNS error checking to properly handle reading when no data returned.\n- apns: Make APNS sending stop during iteration if a fatal error is received from APNS server (e.g. invalid topic, invalid payload size, etc).\n- apns/gcm: Make APNS and GCM clients maintain an active connection to server.\n- apns: Make APNS always return ``APNSResponse`` object instead of only raising ``APNSSendError`` when errors encountered. (**breaking change**)\n- apns/gcm: Remove APNS/GCM module send functions and only support client interfaces. (**breaking change**)\n- apns: Remove ``config`` argument from ``APNSClient`` and use individual method parameters as mapped below instead: (**breaking change**)\n\n    - ``APNS_ERROR_TIMEOUT`` => ``default_error_timeout``\n    - ``APNS_DEFAULT_EXPIRATION_OFFSET`` => ``default_expiration_offset``\n    - ``APNS_DEFAULT_BATCH_SIZE`` => ``default_batch_size``\n\n- gcm: Remove ``config`` argument from ``GCMClient`` and use individual method parameters as mapped below instead: (**breaking change**)\n\n    - ``GCM_API_KEY`` => ``api_key``\n\n- pushjack: Remove ``pushjack.clients`` module. (**breaking change**)\n- pushjack: Remove ``pushjack.config`` module. (**breaking change**)\n- gcm: Rename ``GCMResponse.payloads`` to ``GCMResponse.messages``. (**breaking change**)\n\n\nv0.5.0 (2015-04-22)\n-------------------\n\n- apns: Add new APNS configuration value ``APNS_DEFAULT_BATCH_SIZE`` and set to ``100``.\n- apns: Add ``batch_size`` parameter to APNS ``send`` that can be used to override ``APNS_DEFAULT_BATCH_SIZE``.\n- apns: Make APNS ``send`` batch multiple notifications into a single payload. Previously, individual socket writes were performed for each token. Now, socket writes are batched based on either the ``APNS_DEFAULT_BATCH_SIZE`` configuration value or the ``batch_size`` function argument value.\n- apns: Make APNS ``send`` resume sending from after the failed token when an error response is received.\n- apns: Make APNS ``send`` raise an ``APNSSendError`` when one or more error responses received. ``APNSSendError`` contains an aggregation of errors, all tokens attempted, failed tokens, and successful tokens. (**breaking change**)\n- apns: Replace ``priority`` argument to APNS ``send`` with ``low_priority=False``. (**breaking change**)\n\n\nv0.4.0 (2015-04-15)\n-------------------\n\n- apns: Improve error handling in APNS so that errors aren't missed.\n- apns: Improve handling of APNS socket connection during bulk sending so that connection is re-established when lost.\n- apns: Make APNS socket read/writes non-blocking.\n- apns: Make APNS socket frame packing easier to grok.\n- apns/gmc: Remove APNS and GCM ``send_bulk`` function. Modify ``send`` to support bulk notifications. (**breaking change**)\n- apns: Remove ``APNS_MAX_NOTIFICATION_SIZE`` as config option.\n- gcm: Remove ``GCM_MAX_RECIPIENTS`` as config option.\n- gcm: Remove ``request`` argument from GCM send function. (**breaking change**)\n- apns: Remove ``sock`` argument from APNS send function. (**breaking change**)\n- gcm: Return namedtuple for GCM canonical ids.\n- apns: Return namedtuple class for APNS expired tokens.\n\n\nv0.3.0 (2015-04-01)\n-------------------\n\n- gcm: Add ``restricted_package_name`` and ``dry_run`` fields to GCM sending.\n- gcm: Add exceptions for all GCM server error responses.\n- apns: Make ``apns.get_expired_tokens`` and ``APNSClient.get_expired_tokens`` accept an optional ``sock`` argument to provide a custom socket connection.\n- apns: Raise ``APNSAuthError`` instead of ``APNSError`` if certificate file cannot be read.\n- apns: Raise ``APNSInvalidPayloadSizeError`` instead of ``APNSDataOverflow``. (**breaking change**)\n- apns: Raise ``APNSInvalidTokenError`` instead of ``APNSError``.\n- gcm: Raise ``GCMAuthError`` if ``GCM_API_KEY`` is not set.\n- pushjack: Rename several function parameters:  (**breaking change**)\n\n    - gcm: ``alert`` to ``data``\n    - gcm: ``token``/``tokens`` to ``registration_id``/``registration_ids``\n    - gcm: ``Dispatcher``/``dispatcher`` to ``GCMRequest``/``request``\n    - Clients: ``registration_id`` to ``device_id``\n\n- gcm: Return ``GCMResponse`` object for ``GCMClient.send/send_bulk``. (**breaking change**)\n- gcm: Return ``requests.Response`` object(s) for ``gcm.send/send_bulk``. (**breaking change**)\n\n\nv0.2.2 (2015-03-30)\n-------------------\n\n- apns: Fix payload key assigments for ``title-loc``, ``title-loc-args``, and ``launch-image``. Previously, ``'_'`` was used in place of ``'-'``.\n\n\nv0.2.1 (2015-03-28)\n-------------------\n\n- apns: Fix incorrect variable reference in ``apns.receive_feedback``.\n\n\nv0.2.0 (2015-03-28)\n-------------------\n\n- pushjack: Fix handling of ``config`` in clients when ``config`` is a class object and subclass of ``Config``.\n- apns: Make ``apns.send/send_bulk`` accept additional ``alert`` fields: ``title``, ``title-loc``, ``title-loc-args``, and ``launch-image``.\n- gcm: Make ``gcm.send/send_bulk`` raise a ``GCMError`` exception if ``GCM_API_KEY`` is not set.\n- gcm: Make gcm payload creation cast ``data`` to dict if isn't not passed in as one. Original value of ``data`` is then set to ``{'message': data}``. (**breaking change**)\n- gcm: Make gcm payload creation not set defaults for optional keyword arguments. (**breaking change**)\n\n\nv0.1.0 (2015-03-26)\n-------------------\n\n- pushjack: Rename ``pushjack.settings`` module to ``pushjack.config``. (**breaking change**)\n- apns/gcm: Allow config settings overrides to be passed into ``create_gcm_config``, ``create_apns_config``, and ``create_apns_sandbox_config``.\n- pushjack: Override ``Config``'s ``update()`` method with custom method that functions similarly to ``from_object()`` except that it accepts a ``dict`` instead.\n\n\nv0.0.1 (2015-03-25)\n-------------------\n\n- First release.\n\n\n.. _Brad Montgomery: https://github.com/bradmontgomery\n.. _Julius Seporaitis: https://github.com/seporaitis\n.. _Ahmed Khedr: https://github.com/aakhedr\n.. _Jakub Kleň: https://github.com/kukosk\n.. _Lukas Anzinger: https://github.com/Lukas0907\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Derrick Gilland\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/joseph-fox/pushjack",
    "keywords": "apns ios gcm android push notifications",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pushjack-http2",
    "package_url": "https://pypi.org/project/pushjack-http2/",
    "platform": "",
    "project_url": "https://pypi.org/project/pushjack-http2/",
    "project_urls": {
      "Homepage": "https://github.com/joseph-fox/pushjack"
    },
    "release_url": "https://pypi.org/project/pushjack-http2/2.1.0/",
    "requires_dist": [
      "requests",
      "PyJWT",
      "hyper",
      "coverage ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "httmock ; extra == 'dev'",
      "invoke ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "Sphinx ; extra == 'dev'",
      "sphinx-rtd-theme ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "wheel ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Push notifications for APNS (iOS) and GCM (Android)",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9563954,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f0e3ccced555455606b4c1fa821edaab67eadd51d21a8f3e50764924292b9bb",
          "md5": "1fd4d5a1604d1ca5606870958663391a",
          "sha256": "f4cc082945c9916de9135cb07c31b6f104e7fab99ced67c7d72f1846d120e0aa"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fd4d5a1604d1ca5606870958663391a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25915,
        "upload_time": "2019-04-01T14:30:31",
        "upload_time_iso_8601": "2019-04-01T14:30:31.557680Z",
        "url": "https://files.pythonhosted.org/packages/5f/0e/3ccced555455606b4c1fa821edaab67eadd51d21a8f3e50764924292b9bb/pushjack_http2-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be01cdc7b913eaa43be9a1629ea23113d02da078e417403fd717d5a0991fede1",
          "md5": "6a3b1c0ed3bb993667d0404e8c8021d4",
          "sha256": "d5a175a4e60ec4aa02e47aeb050f93b0ee48183fa74afeaecafd305665db4547"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a3b1c0ed3bb993667d0404e8c8021d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42845,
        "upload_time": "2019-04-01T14:30:33",
        "upload_time_iso_8601": "2019-04-01T14:30:33.923101Z",
        "url": "https://files.pythonhosted.org/packages/be/01/cdc7b913eaa43be9a1629ea23113d02da078e417403fd717d5a0991fede1/pushjack_http2-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b01dc3a8e14577da8d88c3a6440771bbf2873fe48c5eb3e60d48758c127e534",
          "md5": "c061c521b1b43f40a0ce613b2c514a41",
          "sha256": "aaef4a1cd86ab6c418ff1b8400af82889ca5466e606cf97eeea5f2d8cf3af41f"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c061c521b1b43f40a0ce613b2c514a41",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25829,
        "upload_time": "2020-02-25T19:08:47",
        "upload_time_iso_8601": "2020-02-25T19:08:47.415031Z",
        "url": "https://files.pythonhosted.org/packages/7b/01/dc3a8e14577da8d88c3a6440771bbf2873fe48c5eb3e60d48758c127e534/pushjack_http2-2.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "731d1ac436ccf80336fc1f9a18f71a0d2771807c0cc86da84b3346ce7bf9ef8f",
          "md5": "7931f896a3a738442b3c2dcbdd8fa207",
          "sha256": "895048875e64d41d6c71f3e90c7fbe8851c202b57ac4e367aaeae89c8a69f962"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7931f896a3a738442b3c2dcbdd8fa207",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42603,
        "upload_time": "2020-02-25T19:08:49",
        "upload_time_iso_8601": "2020-02-25T19:08:49.790892Z",
        "url": "https://files.pythonhosted.org/packages/73/1d/1ac436ccf80336fc1f9a18f71a0d2771807c0cc86da84b3346ce7bf9ef8f/pushjack_http2-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cda00b254f46fd4c98ec7a1c13ec23b18aa2dfaf26a92ba48d84a6357c1e5851",
          "md5": "489a3b0091a27df8c1b431509c53e854",
          "sha256": "558344bedbee2db8c49fedd0fe6d6e50dd320b6c9f5eabc28b4a1f25d2ffe8d6"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "489a3b0091a27df8c1b431509c53e854",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25813,
        "upload_time": "2021-02-28T22:34:49",
        "upload_time_iso_8601": "2021-02-28T22:34:49.003759Z",
        "url": "https://files.pythonhosted.org/packages/cd/a0/0b254f46fd4c98ec7a1c13ec23b18aa2dfaf26a92ba48d84a6357c1e5851/pushjack_http2-2.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e91aca96180cc4d048070033c287f0a580de0751d6afa30c125efebb66eda715",
          "md5": "09a6ddd529ad33ad1db862813af5936b",
          "sha256": "7024d24be270833820dcc061036ae4456e595a2c923ba9cab032cc27a7aba71f"
        },
        "downloads": -1,
        "filename": "pushjack_http2-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "09a6ddd529ad33ad1db862813af5936b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45470,
        "upload_time": "2021-02-28T22:34:50",
        "upload_time_iso_8601": "2021-02-28T22:34:50.843914Z",
        "url": "https://files.pythonhosted.org/packages/e9/1a/ca96180cc4d048070033c287f0a580de0751d6afa30c125efebb66eda715/pushjack_http2-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cda00b254f46fd4c98ec7a1c13ec23b18aa2dfaf26a92ba48d84a6357c1e5851",
        "md5": "489a3b0091a27df8c1b431509c53e854",
        "sha256": "558344bedbee2db8c49fedd0fe6d6e50dd320b6c9f5eabc28b4a1f25d2ffe8d6"
      },
      "downloads": -1,
      "filename": "pushjack_http2-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "489a3b0091a27df8c1b431509c53e854",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 25813,
      "upload_time": "2021-02-28T22:34:49",
      "upload_time_iso_8601": "2021-02-28T22:34:49.003759Z",
      "url": "https://files.pythonhosted.org/packages/cd/a0/0b254f46fd4c98ec7a1c13ec23b18aa2dfaf26a92ba48d84a6357c1e5851/pushjack_http2-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e91aca96180cc4d048070033c287f0a580de0751d6afa30c125efebb66eda715",
        "md5": "09a6ddd529ad33ad1db862813af5936b",
        "sha256": "7024d24be270833820dcc061036ae4456e595a2c923ba9cab032cc27a7aba71f"
      },
      "downloads": -1,
      "filename": "pushjack_http2-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "09a6ddd529ad33ad1db862813af5936b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 45470,
      "upload_time": "2021-02-28T22:34:50",
      "upload_time_iso_8601": "2021-02-28T22:34:50.843914Z",
      "url": "https://files.pythonhosted.org/packages/e9/1a/ca96180cc4d048070033c287f0a580de0751d6afa30c125efebb66eda715/pushjack_http2-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}