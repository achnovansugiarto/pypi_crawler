{
  "info": {
    "author": "Yamada Hiroyuki",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Well-Bahaved Logging (wblog)\n\n## 1. Overview\n\nPython standard `logging` package has great functionalities, however,\nit is bit confusing.\n\nFor small one-time script, it is fine to use root logger functions\n(e.g. `logging.debug()`) with global config `logging.basicConfig()`.\nMoreover you don't need to call `logging.basicConfig()` explicitly\nbecause `logging.debug()` etc. internally call it\nto ensure the root logger has a handler.\n\n\nFor importable library, the situation is completely different. It is\nofficially recommended that loggers should not have any handlers\nexcept `logging.NullHandler`. Additionally, in our opinion, logging\nshould be configurable by end users through top level main script or\napplication.\n\n\nHere, we provide a set of small utility functions to help library\ndeveloppers realize well-behaved logging.\n\n\n## 2. Install\nwblog doesn't have any dependencies.\n\n\n```bash\npip install well-behaved-logging\n```\n\n## 3. Usage\n\n### 3.1 Get and Use Logger at Module\nYou can get module-level prepared `logging.Logger` instance by\n`wblog.getLogger()` function. The function automatically detects the\nmodule name (aka. `__name__`), so that you don't need to pass it.\n\n\nThe returned logger is standard `logging.Logger`, so that you can call\nlogging methods (e.g. `Logger.debug()`) as usual.\n\n\n```python\nimport wblog\n\nlogger = wblog.getLogger() # No __name__ is needed\n\nlogger.debug(\"Debug message\")\n```\n\nSince the logger is standart `logging.Logger`, it is also possible to\nset log level and to add handlers manually, however, it is not\nrecommended.\n\n\n### 3.2 Start Logging (by End Users or Application)\n`wblog.start_logging(name, level=None, *, handlers=None, propagate=False)`\nfunction enables logging of a specified package or module\n(as long as they are well behaved).\n\nIf no handlers are passed, `logging.StreamHandler` is used and log\nmessages are printed out at console `sys.stderr`.\n\nIf `propagate=Flase` (default), the module stops delegation to parent\nlogger.\n\nWe assume the module logger doesn't have any handlers except `logging.NullLogger`,\nand the function doesn't remove handlers.\n\n\n### 3.3 Stop Logging (by End Users or Application)\n`wblog.stop_logging(name)` function disables logging of a specified\npackage or module. It removes its log level and all handlers from `name`,\nand enables delegation to the parent logger again.\n\n\n### 3.4 Advanced Usage\nwblog doesn't manage handlers and fomatters.\nEnd users or application need to prepare them.\n\nHandler defines how and where the logging messages are outputted.\nThere are many handlers are implemented at the `logging` packages\n([ref1](https://docs.python.org/3/library/logging.handlers.html),\n[ref2](https://docs.python.org/3/howto/logging.html#useful-handlers)).\n\n- `StreamHandler` writes logs to stream (e.g. srandard error).\n- `FileHandler` writes logs to a file.\n- `RotatingFileHandler` writes logs to a file with log rotation.\n- etc.\n\n\n`logging.Handler` class can set log level and filter, so that it is\nalso possible that all logs are shown on the console standard error\nand only logs over `logging.WARNING` are written on the log file.\n\nIf you set only a single handler to your logger, we recommend not to\nspecify log level at the handler, then the handler manages all logs\nfrom the logger.\n\n\nFormatter defines logging format\n([ref](https://docs.python.org/3/library/logging.html#formatter-objects))\nand is set to handlers.\n\nThe default format is `%(levelname)s:%(name)s:%(message)s` which\ndoesn't include date time information at all.\n\nInformation can be used are described\n[here](https://docs.python.org/3/library/logging.html#logrecord-attributes).\n\n\n## 4. Design\n\n```\nroot logger <-- package top-level logger <-- ... <-- module logger\n```\n\nWe set `logging.NullHandler` to the package top-level logger.\n\n\nWhen users change root logger config by `logging.basicConfig()`,\nother (unconfigured) loggers should follow.\n\n\nIf users want to enable only a certain package or module, we should\nset log level and handlers to that level logger. Generally, delegation\nto its parent logger can be stopped, but it is better if it is\nconfigurable.\n\nDisabling such logging reverts to the original log level\n(`logging.NOTSET`), removes all handlers, and enables delegation again.\n\n\n## 5. Other Logging Libraries\n\nThere are many logging libraries. As far as we know, they are designed\nfor end users to log easily.\n\n- [logzero](https://github.com/metachris/logzero)\n  - Easy to setup `Logger`, `Handler`, and `Formatter`\n\t- Built on the standard `logging` package\n  - For end users or application, not for library\n- [Loguru](https://github.com/Delgan/loguru)\n  - Easy to logging\n\t- Built from scratch\n  - For end users or application, not for library\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "well-behaved-logging",
    "package_url": "https://pypi.org/project/well-behaved-logging/",
    "platform": null,
    "project_url": "https://pypi.org/project/well-behaved-logging/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/well-behaved-logging/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14421656,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a20c0404317275df56e411315bd27df56ea685eef5e8ffbaf4f0d0c8482709cc",
          "md5": "69e6d5a94f3b02b32bcdba98e574bca0",
          "sha256": "cb9134e39de6c4220412dafdacfc0ecd1bef40650d3a42ea5f6e9ae429486d12"
        },
        "downloads": -1,
        "filename": "well_behaved_logging-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69e6d5a94f3b02b32bcdba98e574bca0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4401,
        "upload_time": "2022-07-13T12:11:09",
        "upload_time_iso_8601": "2022-07-13T12:11:09.276674Z",
        "url": "https://files.pythonhosted.org/packages/a2/0c/0404317275df56e411315bd27df56ea685eef5e8ffbaf4f0d0c8482709cc/well_behaved_logging-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a20c0404317275df56e411315bd27df56ea685eef5e8ffbaf4f0d0c8482709cc",
        "md5": "69e6d5a94f3b02b32bcdba98e574bca0",
        "sha256": "cb9134e39de6c4220412dafdacfc0ecd1bef40650d3a42ea5f6e9ae429486d12"
      },
      "downloads": -1,
      "filename": "well_behaved_logging-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "69e6d5a94f3b02b32bcdba98e574bca0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4401,
      "upload_time": "2022-07-13T12:11:09",
      "upload_time_iso_8601": "2022-07-13T12:11:09.276674Z",
      "url": "https://files.pythonhosted.org/packages/a2/0c/0404317275df56e411315bd27df56ea685eef5e8ffbaf4f0d0c8482709cc/well_behaved_logging-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}