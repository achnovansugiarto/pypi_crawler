{
  "info": {
    "author": "Jon M. Dugan",
    "author_email": "jdugan@x1024.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 7 - Inactive",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Topic :: Internet"
    ],
    "description": "# fusnmp: a Python ctypes-based Net-SNMP wrapper module.\n\n:warning: NOTE: This was originally called DLNetSNMP and was written by Alessandro Iob.  I\nhave tried to contact him but was unable to. This is my fork of the last code\nthat was posted on the  dlevel.com website. This is minimally maintained to\nsupport a legacy system and I would not recommend it as a starting point for a\nnew project.\n\nThis is a small but almost complete wrapper for the [NetSNMP](http://net-snmp.sf.net/).\nThis library was originally based on the \"pynetsnmp\" module developed by cool people at \n[Zenoss](http://www.zenoss.com/).\n\nThe current version has been tested with Python 2.7 and NetSNMP 5.7.3.\n\n## Features\n\n- Synchronous and asynchronous \"get\", \"getbulk\", \"walk\" and \"set\" operations.\n- MIB management: set/get MIB paths, load new MIBs, get OID descriptions\n  from MIBs, oid to name (and vice versa) translation tools.\n- Session management, internal asynchronous events management, pluggable logger\n  and meaningful error reporting.\n- Multi-platform: runs under Linux (and I think other Unixes also), Windows and OS X.\n\n## Bugs and unsupported features\n\n- Does not work if used from multiple-threads.\n- Traps collection implemented but not tested.\n- Tables not implemented.\n\nYou can find some simple tests and usage patters at the end of the \"fusnmp.py\" file.\n\n# Installation\n\n    pip install fusnmp\n\n# Usage Guide\n\nSNMP sessions are managed by the SNMPManager class. This class is a singleton,\nso there is always a single instance of it.\n\n    import fusnmp\n    sm = fusnmp.SNMPManager()\n\nThe SNMPManager accepts the following optional parameters:\n\n- name: the manager's name (defaults to \"SNMPManager\")\n- log: callback function to use when logging SNMP messages. The callback must\n  accept two parameters: priority and message.\n- max_fd: maximum number of file descriptor to be used by the \"select\" stuff \n  (default is 1024)\n- threaded_processor: set to True (default) if the asynchronous SNMP events\n  processor must be executed in an independent thread. If False, the \n  \"process_sessions\" method must be called periodically.\n- process_sessions_sleep: float specifying the number of seconds the \"process_sessions\"\n  method must sleep after every loop (default is 0.01).\n- local_dir: path to directory where persistent data (MIBs, etc.) is and will be\n  stored. If not given (default is None), the module dir will be used.\n  In the given path a directory named 'mibs' must be present: all default MIBs\n  should be available here or you'll be presented with a lot of errors like \n  \"error : Cannot find module (IP-MIB): At line 1 in (none)\".\n\nWhen the SNMPManager is not needed anymore, it should be destroyed using the \n'destroy' method.\n\n## MIB management methods\n\n- set_mib_dir(PATH_TO_MIB_DIR): sets the directory where MIB files should be searched.\n\n- add_mib_dir(PATH_TO_MIB_DIR): adds a directory to the ones already defined, \n  where MIB files should be searched.\n\n- add_mib_dir(PATH_TO_MIB_DIR): removes a directory from the ones searched for \n  MIB files.\n\n- get_mib_dir(): returns the current directories searched for MIB files.\n\n- read_mib(PATH_TO_MIB_FILE): reads into memory a MIB file.\n\n- refresh_mibs(): reloads all MIB definitions in use.\n\n## Sessions management methods\n\n- add_session(name, version='1', **kargs): creates and opens a new SNMP session.\n  The parameters are:\n  - name: session unique name.\n  - version: SNMP protocol version ('1', '2', '3', default is '1')\n  - kargs: SNMP protocol specific session arguments. You can pass any valid session field here.\n    Commonly used, for versions '1' and '2':\n    - peername: hostname of the SNMP agent to be queried.\n    - community: community string to use.\n    - timeout: seconds before retry (default 1 second)\n    - retries: number of retries before failure (default 5)\n\n  Returns a Session object or raises an exception.\n\n- add_trapd_session(name, peername, fileno=-1): creates an SNMP trap daemon session.\n  TRAP MANAGEMENT IS NOT TESTED.\n\n- remove_session(name): closes and removes the given section.\n\n- find_session(sessid): returns the Session instance associated with the given\n  session ID.\n\n- snmp_manager_instance[SESSION_NAME]: returns the Session instance with the \n  given name.\n\n## Session events\n\n- bind(slot, uid, session, callback): binds a callback function to a session's\n  event slot. The parameters are:\n  - slot: slot name (see below).\n  - uid: unique identifier used to reference the binding.\n  - session: session name or None for all sessions.\n  - callback: callback function to be called on event. The callback signature\n    must be (slot, session_name, request_id, result).\n\n- unbind(slot, uid, session=None): removes the binded callback. \n  The parameters are:\n  - slot: slot name.\n  - uid: binding unique ID, as specified in the 'bind' call.\n  - session: session name or None for all sessions.\n\nThe available slots are:\n\n- 'get': emitted when an async 'get' response arrives.\n- 'getnext': emitted when an async 'getnext' response arrives.\n- 'getbulk': emitted when an async 'getbulk' response arrives.\n- 'set': emitted when an async 'set' response arrives.\n- 'inform': trap management (NOT TESTED).\n- 'trap': trap management (NOT TESTED).\n- 'trap2': trap management (NOT TESTED).\n- 'report': trap management (NOT TESTED).\n- 'response': emitted on any response kind, exept for 'timeout'.\n- 'timeout': emitted on request timeout. The assigned callback signature must be\n  (slot, session_name, request_id).\n\n## Session instances\n\n- get_description(oid, width=80, buffer_size=10240): returns an OID's description\n  from the MIB file. The parameters are:\n  - oid: oid name or oid tuple.\n  - width: formatting width of the returned description. The default value (80)\n    should be almost always right.\n  - buffer_size: size of the buffer where the description is stored. The default\n    value (80) should be almost always right.\n\n- sync_get(oids, exc_on_error=False): performs a synchronous 'get' request for\n  given oids. The parameters are:\n  - oids: list of oid names or tuples.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- sync_getbulk(nonrepeaters, maxrepetitions, oids, exc_on_error=False): performs\n  a synchronous 'getbulk' for given oids. The parameters are:\n  - nonrepeaters: number of non repeaters.\n  - maxrepetitions: maximum repetitions.\n  - oids: list of oid names or tuples.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- sync_walk(root, exc_on_error=False): performs a synchronous 'getnext' request\n  for the given oid. The parameters are:\n  - oids: oid name or tuple.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- sync_set(oids_values, exc_on_error=False): performs a synchronous 'set' request\n  for the given oids. The parameters are:\n  - oids: list of (oid name or tuple, value to set) tuples (or lists).\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- async_get(oids, wait=False, exc_on_error=False): performs an asynchronous 'get'\n  request for given oids. The parameters are:\n  - oids: list of oid names or tuples.\n  - wait: used to make async calls sync, MUST not be used and left to FALSE.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- async_getbulk(nonrepeaters, maxrepetitions, oids, wait=False, exc_on_error=False):\n  performs an asynchronous 'getbulk' for given oids. The parameters are:\n  - nonrepeaters: number of non repeaters.\n  - maxrepetitions: maximum repetitions.\n  - oids: list of oid names or tuples.\n  - wait: used to make async calls sync, MUST not be used and left to FALSE.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- async_walk(root, wait=False, exc_on_error=False): performs an asynchronous \n  'getnext' request for the given oid. The parameters are:\n  - oids: oid name or tuple.\n  - wait: used to make async calls sync, MUST not be used and left to FALSE.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n- async_set(oids_values, wait=False, exc_on_error=False): performs an asynchronous\n  'set' request for the given oids. The parameters are:\n  - oids: list of (oid name or tuple, value to set) tuples (or lists).\n  - wait: used to make async calls sync, MUST not be used and left to FALSE.\n  - exc_on_error: True to rise an exception if request fails (default is False).\n\n## Utilities\n\n- str_to_oid(s): converts a string to an oid tuple.\n\n- strs_to_oids(l): converts a list of strings to a list of oid tuples.\n\n- oid_to_str(oid): converts an oid tuple to string.\n\n- oids_to_strs(l): converts a list of oid tuples to a list of strings.\n\n- oid_to_dot(oid): converts an oid to a \"dotted\" string.\n\n- oids_to_dots(): converts a list of oids to a list of \"dotted\" strings.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jdugan1024/fusnmp/",
    "keywords": "snmp networking",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fusnmp",
    "package_url": "https://pypi.org/project/fusnmp/",
    "platform": "",
    "project_url": "https://pypi.org/project/fusnmp/",
    "project_urls": {
      "Homepage": "http://github.com/jdugan1024/fusnmp/"
    },
    "release_url": "https://pypi.org/project/fusnmp/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small but complete NetSNMP ctypes wrapper.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5401972,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9cd292a62610227aeb36a8607d1af54a6937f1756cbc33d16c51fa3e449c954",
          "md5": "ec5c7fd2c39db58d10dfa20da6c3e5c0",
          "sha256": "76c6143da97da46cd1220a520a42d822db87a8f8933b4852b0afcaa52ff4cc9d"
        },
        "downloads": -1,
        "filename": "fusnmp-1.0.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec5c7fd2c39db58d10dfa20da6c3e5c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 24023,
        "upload_time": "2018-08-15T21:49:07",
        "upload_time_iso_8601": "2018-08-15T21:49:07.193617Z",
        "url": "https://files.pythonhosted.org/packages/d9/cd/292a62610227aeb36a8607d1af54a6937f1756cbc33d16c51fa3e449c954/fusnmp-1.0.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e0c0dcb87d6cb2cfa1900281d334df6797972617f3d03c6729183b8b5a2391",
          "md5": "cb4fc7e14a33069fcc38ce482c257561",
          "sha256": "c27c0a1b0ef64653d55246ddc807eec299c715f2e8c9f0b84e26bf692930fa36"
        },
        "downloads": -1,
        "filename": "fusnmp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb4fc7e14a33069fcc38ce482c257561",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25925,
        "upload_time": "2018-08-15T21:49:08",
        "upload_time_iso_8601": "2018-08-15T21:49:08.483709Z",
        "url": "https://files.pythonhosted.org/packages/86/e0/c0dcb87d6cb2cfa1900281d334df6797972617f3d03c6729183b8b5a2391/fusnmp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12288608320250075398661056816179c217105e83d057646a22ab70bf83307d",
          "md5": "8ed62e5d8bc811e3e57fddf812365c55",
          "sha256": "3f40f230c0195bcce44ec6c1d2d36eec5c72ef6aaaef281f823b1f1cd87dbe6f"
        },
        "downloads": -1,
        "filename": "fusnmp-1.0.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ed62e5d8bc811e3e57fddf812365c55",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 30028,
        "upload_time": "2019-06-14T20:29:35",
        "upload_time_iso_8601": "2019-06-14T20:29:35.729432Z",
        "url": "https://files.pythonhosted.org/packages/12/28/8608320250075398661056816179c217105e83d057646a22ab70bf83307d/fusnmp-1.0.3-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9beac885a07ff172e6e9e7d16a05803f7bf1a4fec0a9bba939ff373c2e4eb2ae",
          "md5": "28a0eb9c7cd1f67e940b6b9fa1456a42",
          "sha256": "061d8a28abdb158815885827dffefbede7168c9238558823a95c2b7b4fa26df9"
        },
        "downloads": -1,
        "filename": "fusnmp-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "28a0eb9c7cd1f67e940b6b9fa1456a42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25940,
        "upload_time": "2019-06-14T20:29:37",
        "upload_time_iso_8601": "2019-06-14T20:29:37.258036Z",
        "url": "https://files.pythonhosted.org/packages/9b/ea/c885a07ff172e6e9e7d16a05803f7bf1a4fec0a9bba939ff373c2e4eb2ae/fusnmp-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12288608320250075398661056816179c217105e83d057646a22ab70bf83307d",
        "md5": "8ed62e5d8bc811e3e57fddf812365c55",
        "sha256": "3f40f230c0195bcce44ec6c1d2d36eec5c72ef6aaaef281f823b1f1cd87dbe6f"
      },
      "downloads": -1,
      "filename": "fusnmp-1.0.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "8ed62e5d8bc811e3e57fddf812365c55",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 30028,
      "upload_time": "2019-06-14T20:29:35",
      "upload_time_iso_8601": "2019-06-14T20:29:35.729432Z",
      "url": "https://files.pythonhosted.org/packages/12/28/8608320250075398661056816179c217105e83d057646a22ab70bf83307d/fusnmp-1.0.3-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9beac885a07ff172e6e9e7d16a05803f7bf1a4fec0a9bba939ff373c2e4eb2ae",
        "md5": "28a0eb9c7cd1f67e940b6b9fa1456a42",
        "sha256": "061d8a28abdb158815885827dffefbede7168c9238558823a95c2b7b4fa26df9"
      },
      "downloads": -1,
      "filename": "fusnmp-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "28a0eb9c7cd1f67e940b6b9fa1456a42",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 25940,
      "upload_time": "2019-06-14T20:29:37",
      "upload_time_iso_8601": "2019-06-14T20:29:37.258036Z",
      "url": "https://files.pythonhosted.org/packages/9b/ea/c885a07ff172e6e9e7d16a05803f7bf1a4fec0a9bba939ff373c2e4eb2ae/fusnmp-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}