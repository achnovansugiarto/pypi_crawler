{
  "info": {
    "author": "Michele Ciruzzi",
    "author_email": "tnto@hotmail.it",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Numba PLSA\nPLSA for sparse matrices implemented with Numba. Wicked fast.\n\n### Installation\n\n1. Clone the repo: ```git clone https://github.com/TnTo/numba-plsa.git ```\n2. Install: ```pip install .```\n3. Run the example: ```python example.py```\n\n### Usage\n\nThe numba-plsa package provides two implementations: a basic NumPy method and a numba method. The `plsa` method wraps the basic algorithmic functionality, and the algorithm is chosen by using the `method` argument (`method='numba'` or `method='basic'`, the default). The basic method works for any NumPy document-term matrix, whereas the numba method is optimized for sparse matrices. The `plsa` method automatically converts the input document-term matrix to a COO sparse matrix. The `plsa_direct` method is also available, which assumes the input is already in COO form and skips some precomputation for faster performance on large matrices.\n\nTwo very basic classes are included to assist with topic modeling tasks for text corpora. The `Corpus` class takes on text documents and can build a document-term matrix. The `PLSAModel` class has a `train` method which provides an interface to `plsa`.\n\nFor an example, see the example (conveniently named `example.py`). The numba method runs in under a second on a standard laptop with 4 GB of RAM available. The [20 newsgroups](https://archive.ics.uci.edu/ml/datasets/Twenty+Newsgroups) data set, which contains 2,000 documents, is used for evaluation. Assuming NumPy seeds play nice cross-OS, the results should be\n\n```\nTop topic terms\n================\nTopic 1: boswell, yalcin, onur, wright, mbytes\nTopic 2: premiums, yeast, vitamin, sinus, candida\nTopic 3: ports, pci, stereo, ankara, istanbul\nTopic 4: icons, atari, lsd, cyprus, apps\nTopic 5: wires, neutral, circuit, wiring, wire\nTopic 6: gifs, simtel, jfif, gif, jpeg\nTopic 7: nhl, sleeve, gant, players, league\nTopic 8: mormon, gaza, xxxx, israeli, arabs\nTopic 9: chi, det, suck, cubs, pit\nTopic 10: cramer, theism, odwyer, bds, clayton\n```\n\nWe can assign coherent labels to most topics, such as \"pharmaceuticals\" for Topic 2, \"middle east\" for Topic 8, and \"baseball\" for Topic 9. Adjusting corpus construction parameters, running for more iterations, or changing the number of topics can yield even better results.\n\n### Performance comparisons\n\nWe compare the two implementations on artificial problems of different sizes, all with document-term matrix sparsity around 95% (which is fairly dense for a text-based corpus). These results were obtained on a standard laptop with 4 GB of RAM available. The script `speed_test.py` can be used to recreate the figures. \n\n| Corpus size | Vocab size | Number of topics | Basic method avg. time / iteration (best of 3) | Numba method avg. time  / iteration (best of 3) |\n|:-----------:|:---------------:|:----------------:|:----------------------------------------------:|:-----------------------------------------------:|\n| 100  | 500  | 10 | 0.0047 s | **0.00058 s** |\n| 250  | 1000 | 10 | 0.024 s  | **0.0028 s**  |\n| 100  | 2500 | 10 | 0.026 s  | **0.0028 s**  |\n| 1000 | 5000 | 10 | 1.16 s   | **0.042 s**   |\n| 2000 | 6000 | 10 | 2.59 s   | **0.12 s**    |\n| 3000 | 5000 | 10 | 3.26 s   | **0.13 s**    |\n\nThe file `large_speed_test.py` carries out a test for a large matrix: 10,000 documents and 100,000 terms in the vocabulary with 99% sparsity (10 million non-zero entries). Running a 5 topic model for 10 iterations takes around 30 seconds, or 3 seconds per iteration.\n\nWe can also compare numba-plsa to a popular Python package on GitHub: [PLSA](https://github.com/hitalex/PLSA). We used the example data from the PLSA repo. The two methods resulted the same distributions when using the same initializations.\n\n| Implementation | Corpus size | Vocab size | Number of topics | Number of iterations | Time (best of 3) |\n|:--------------:|:-----------:|:---------------:|:----------------:|:----------------:|:----------------:|\n| [PLSA package](https://github.com/hitalex/PLSA) | 13 | 2126 | 5 | 30 | 44.89 s |\n| numba-plsa, basic | 13 | 2126 | 5 | 30 | 0.082 s |\n| **numba-plsa, numba** | 13 | 2126 | 5 | 30 | **0.006 s** |\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TnTo/numba-plsa",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "numba-plsa",
    "package_url": "https://pypi.org/project/numba-plsa/",
    "platform": "",
    "project_url": "https://pypi.org/project/numba-plsa/",
    "project_urls": {
      "Homepage": "https://github.com/TnTo/numba-plsa"
    },
    "release_url": "https://pypi.org/project/numba-plsa/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Numba implementation of PLSA",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10824752,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05c5088a1e20db941e76626430a78505cf35af773af559e5cc1d0b2233771ed6",
          "md5": "d7db39b94f0f1a28332ab81953387c63",
          "sha256": "a8fcc6a670eabd1a4ffc38b8f9880b5d60588fae537ea4c5fe45ac50ccfa82e9"
        },
        "downloads": -1,
        "filename": "numba_plsa-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d7db39b94f0f1a28332ab81953387c63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3748,
        "upload_time": "2021-07-05T09:22:55",
        "upload_time_iso_8601": "2021-07-05T09:22:55.233044Z",
        "url": "https://files.pythonhosted.org/packages/05/c5/088a1e20db941e76626430a78505cf35af773af559e5cc1d0b2233771ed6/numba_plsa-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27fe492ee573f624663d4c908cd7d3da762d1edcf1c882228289b4e4d402413d",
          "md5": "f80cb82d844c5b21ef11a728ebf3fbe5",
          "sha256": "5b1ba8422e9c80c74523473a75e47dafd1a69a9a2fbaa5de13f72e072950a669"
        },
        "downloads": -1,
        "filename": "numba_plsa-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f80cb82d844c5b21ef11a728ebf3fbe5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6144,
        "upload_time": "2021-07-05T09:44:50",
        "upload_time_iso_8601": "2021-07-05T09:44:50.784277Z",
        "url": "https://files.pythonhosted.org/packages/27/fe/492ee573f624663d4c908cd7d3da762d1edcf1c882228289b4e4d402413d/numba_plsa-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27fe492ee573f624663d4c908cd7d3da762d1edcf1c882228289b4e4d402413d",
        "md5": "f80cb82d844c5b21ef11a728ebf3fbe5",
        "sha256": "5b1ba8422e9c80c74523473a75e47dafd1a69a9a2fbaa5de13f72e072950a669"
      },
      "downloads": -1,
      "filename": "numba_plsa-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f80cb82d844c5b21ef11a728ebf3fbe5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6144,
      "upload_time": "2021-07-05T09:44:50",
      "upload_time_iso_8601": "2021-07-05T09:44:50.784277Z",
      "url": "https://files.pythonhosted.org/packages/27/fe/492ee573f624663d4c908cd7d3da762d1edcf1c882228289b4e4d402413d/numba_plsa-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}