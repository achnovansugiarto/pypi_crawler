{
  "info": {
    "author": "jdh99",
    "author_email": "jdh821@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# sbc\n\n## 介绍\nsbc: struct convert binary.C语言格式结构体和二进制转换库.\n\n本软件包已上传到pypi,可输入命令直接安装:\n```shell\npip install sbc\n```\n\n## Python和C对应类型\n本软件包封装了ctypes,支持cytpes所有类型,对应表如下:\n\ncyteps type|Ctype|Python type\n---|---|---\nc_bool|_Bool|bool (1)\nc_char|char|1-character bytes object\nc_wchar|wchar_t|1-character string\nc_byte|char|int\nc_ubyte|unsigned char|int\nc_short|short|int\nc_ushort|unsigned|short\tint\nc_int|int|int\nc_uint|unsigned int|int\nc_long|long|int\nc_ulong|unsigned long|int\nc_longlong|__int64 or long long|int\nc_ulonglong|unsigned __int64 or unsigned long long|int\nc_size_t|size_t|int\nc_ssize_t|ssize_t or Py_ssize_t|int\nc_float|float|float\nc_double|double|float\nc_longdouble|long double|float\nc_char_p|char * (NUL terminated)|bytes object or None\nc_wchar_p|wchar_t * (NUL terminated)|string or None\nc_void_p|void *|int or None\n\n## 使用说明\n软件包支持4种C语言结构：\n\n类名|说明\n---|---\nLEFormat|1字节对齐的小端结构体\nLEFormatAlign4|4字节对齐的小端结构体\nLEFormatAlign8|8字节对齐的小端结构体\nBEFormat|1字节对齐的大端结构体\nBEFormatAlign4|4字节对齐的大端结构体\nBEFormatAlign8|4字节对齐的大端结构体\n\n定义C语言结构体需继承对应的结构体,然后在_fields_中定义对应的成员。示例:\n```python\nclass TStruct1(sbc.LEFormat):\n    _fields_ = [\n        # (字段名, c类型)\n        ('a', sbc.c_uint32),\n        ('b', sbc.c_int16),\n        ('c', sbc.c_uint8),\n    ]\n```\n\nC结构体转换为二进制字节流使用方法encode,二进制字节流转换为C语言结构体使用方法decode.API:\n```python\n\"\"\"\nC语言格式结构体转换成二进制\n:return: 返回二进制字节流\n\"\"\"\ndef struct_to_bytearray(self) -> bytearray\n\n\"\"\"\n二进制转换成C语言结构体\n:return: 返回True表示转换成功,False表示转换失败\n\"\"\"\ndef bytearray_to_struct(self, data: bytearray) -> bool\n\n\"\"\"\n读取结构体字节数\n\"\"\"\ndef size(self) -> int\n```\n\n\n## 示例\n```python\nimport sbc\n\nimport unittest\n\n\nclass TStruct1(sbc.LEFormat):\n    _fields_ = [\n        # (字段名, c类型)\n        ('a', sbc.c_uint32),\n        ('b', sbc.c_int16),\n        ('c', sbc.c_uint8),\n    ]\n\n\nclass TStruct2(sbc.LEFormatAlign4):\n    _fields_ = [\n        # (字段名, c类型)\n        ('a', sbc.c_uint32),\n        ('b', sbc.c_int16),\n        ('c', sbc.c_uint8),\n    ]\n\n\nclass TStruct3(sbc.BEFormat):\n    _fields_ = [\n        # (字段名, c类型)\n        ('a', sbc.c_uint16),\n        ('b', sbc.c_uint8 * 5),\n        ('c', sbc.c_uint32),\n    ]\n\n\nclass _UnitTest(unittest.TestCase):\n    def test_case1(self):\n        \"\"\"\n        测试小端1字节对齐,C语言结构体转换为二进制\n        \"\"\"\n        ts = TStruct1()\n        ts.a = 0x12345678\n        ts.b = 0x2345\n        ts.c = 0x67\n        data = ts.struct_to_bytearray()\n        self.assertEqual(len(data), 7)\n        self.assertEqual(data, bytearray([0x78, 0x56, 0x34, 0x12, 0x45, 0x23, 0x67]))\n\n    def test_case2(self):\n        \"\"\"\n        测试小端1字节对齐,二进制转换为C语言结构体\n        \"\"\"\n        ts = TStruct1()\n        ts.bytearray_to_struct(bytearray([0x78, 0x56, 0x34, 0x12, 0x45, 0x23, 0x67]))\n        self.assertEqual(ts.a, 0x12345678)\n        self.assertEqual(ts.b, 0x2345)\n        self.assertEqual(ts.c, 0x67)\n\n    def test_case3(self):\n        \"\"\"\n        测试小端4字节对齐,C语言结构体转换为二进制\n        \"\"\"\n        ts = TStruct2()\n        ts.a = 0x12345678\n        ts.b = 0x2345\n        ts.c = 0x67\n        data = ts.struct_to_bytearray()\n        self.assertEqual(len(data), 8)\n        self.assertEqual(data, bytearray([0x78, 0x56, 0x34, 0x12, 0x45, 0x23, 0x67, 0x00]))\n\n    def test_case4(self):\n        \"\"\"\n        测试小端4字节对齐,二进制转换为C语言结构体\n        \"\"\"\n        ts = TStruct2()\n        ts.bytearray_to_struct(bytearray([0x78, 0x56, 0x34, 0x12, 0x45, 0x23, 0x67, 0x00]))\n        self.assertEqual(ts.a, 0x12345678)\n        self.assertEqual(ts.b, 0x2345)\n        self.assertEqual(ts.c, 0x67)\n\n    def test_case5(self):\n        \"\"\"\n        测试小端4字节对齐,二进制转换为C语言结构体\n        \"\"\"\n        ts = TStruct2()\n        err = ts.bytearray_to_struct(bytearray([0x78, 0x56, 0x34]))\n        self.assertEqual(err, False)\n\n    def test_case6(self):\n        \"\"\"\n        测试大端1字节对齐,C语言结构体转换为二进制\n        \"\"\"\n        ts = TStruct3()\n        ts.a = 0x2345\n        for i in range(5):\n            ts.b[i] = i\n        ts.c = 0x12345678\n        data = ts.struct_to_bytearray()\n        self.assertEqual(len(data), 11)\n        self.assertEqual(data, bytearray([0x23, 0x45, 0x00, 0x01, 0x02, 0x03, 0x04, 0x12, 0x34, 0x56, 0x78]))\n\n\ndef print_hex(data):\n    for i in data:\n        print('%x' % i, end=' ')\n    print()\n\n\nif __name__ == '__main__':\n    suite = unittest.TestSuite()\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jdhxyy/sbc-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sbc",
    "package_url": "https://pypi.org/project/sbc/",
    "platform": "",
    "project_url": "https://pypi.org/project/sbc/",
    "project_urls": {
      "Homepage": "https://github.com/jdhxyy/sbc-python"
    },
    "release_url": "https://pypi.org/project/sbc/1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "struct convert binary",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9953510,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03586f70bb430a3e0a2b114239debbf6b8d367cda543fb37e3d1059bf7fcf046",
          "md5": "da6b8bcc9f6d1655e0c9ad4a124044c5",
          "sha256": "fd36f32a5d2a4c64a504af1219aecfeb65684b000f97b25996dc4a545cea1cf5"
        },
        "downloads": -1,
        "filename": "sbc-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "da6b8bcc9f6d1655e0c9ad4a124044c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3290,
        "upload_time": "2021-02-20T05:22:55",
        "upload_time_iso_8601": "2021-02-20T05:22:55.254019Z",
        "url": "https://files.pythonhosted.org/packages/03/58/6f70bb430a3e0a2b114239debbf6b8d367cda543fb37e3d1059bf7fcf046/sbc-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b4f1e0c35ce4a94bccc5cf91eff6e2058317bb522dbbfaf1d4f24dc85638260",
          "md5": "a3fb56f9a4adee73f3d0f593a53d4064",
          "sha256": "4117d89ac742873bc96ce395c5d6b65c248f4e4a27dba89870832ba2ecdc799f"
        },
        "downloads": -1,
        "filename": "sbc-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a3fb56f9a4adee73f3d0f593a53d4064",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3292,
        "upload_time": "2021-02-20T05:25:05",
        "upload_time_iso_8601": "2021-02-20T05:25:05.002789Z",
        "url": "https://files.pythonhosted.org/packages/6b/4f/1e0c35ce4a94bccc5cf91eff6e2058317bb522dbbfaf1d4f24dc85638260/sbc-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8bbd0baffc3873d8ec174dbdd646dd52f1e6e932199b824f0b495801ba9ffe4",
          "md5": "02191a0e87aaf88219b57ec87213589d",
          "sha256": "945ce5a90ab25c39fce7c4c7082f82854f625bfc0af839e288ac568aeacd33e6"
        },
        "downloads": -1,
        "filename": "sbc-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02191a0e87aaf88219b57ec87213589d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3457,
        "upload_time": "2021-02-21T06:03:59",
        "upload_time_iso_8601": "2021-02-21T06:03:59.524610Z",
        "url": "https://files.pythonhosted.org/packages/e8/bb/d0baffc3873d8ec174dbdd646dd52f1e6e932199b824f0b495801ba9ffe4/sbc-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce8414e38d3f1539e29a3f18b6809cdb7849dbfbcdf7a8b31f4ce59f52f7900c",
          "md5": "ed0c6639f3a9c09addc013c36ce32f7a",
          "sha256": "419b6e4fb62dbd7f0a186218b466bdce91d0cf700c2ee94a3e680dc3272e2bdb"
        },
        "downloads": -1,
        "filename": "sbc-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ed0c6639f3a9c09addc013c36ce32f7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3475,
        "upload_time": "2021-04-02T02:40:25",
        "upload_time_iso_8601": "2021-04-02T02:40:25.954659Z",
        "url": "https://files.pythonhosted.org/packages/ce/84/14e38d3f1539e29a3f18b6809cdb7849dbfbcdf7a8b31f4ce59f52f7900c/sbc-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce8414e38d3f1539e29a3f18b6809cdb7849dbfbcdf7a8b31f4ce59f52f7900c",
        "md5": "ed0c6639f3a9c09addc013c36ce32f7a",
        "sha256": "419b6e4fb62dbd7f0a186218b466bdce91d0cf700c2ee94a3e680dc3272e2bdb"
      },
      "downloads": -1,
      "filename": "sbc-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ed0c6639f3a9c09addc013c36ce32f7a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3475,
      "upload_time": "2021-04-02T02:40:25",
      "upload_time_iso_8601": "2021-04-02T02:40:25.954659Z",
      "url": "https://files.pythonhosted.org/packages/ce/84/14e38d3f1539e29a3f18b6809cdb7849dbfbcdf7a8b31f4ce59f52f7900c/sbc-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}