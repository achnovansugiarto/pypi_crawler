{
  "info": {
    "author": "Maxime Peim",
    "author_email": "maxime.peim@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# CryptoHack Requester Package\n\nThis is a simple python package to ease interaction with CryptoHack's challenges over Netcat and Web API.\n\n## Installing / Getting started\n\nThe project has been tested with python >= 3.6.9. It may works with previous version, but nothing sure.\n\nTo install the package simply use `pip`:\n```shell\npython3 -m pip install CHRequester\n```\n\n## Features\n\nCryptoHack has some challenges working with a Web API ([Block Cipher Mode challenges](https://cryptohack.org/challenges/aes/)), and some through server comunication. They generaly need automation so it is recommanded in the [FAQ](https://cryptohack.org/faq/) to use the [Requets](https://requests.readthedocs.io/en/master/) package for web challenges and [Pwntools](http://docs.pwntools.com/en/stable/) to communicate to a challenge on a server.\nThis package offer a more user-firendly and less time-consuming way to communicate with these challenges.\n\n### Example of usage with the Web API:\n```python\nfrom ch_requester import URLRequester\n\nif __name__ == \"__main__\":\n    BASE_URL = \"http://aes.cryptohack.org/oh_snap/\"\n\n    R = URLRequester(BASE_URL)\n    # adding actions to the requester\n    # first give the name of the action\n    # then specify a tuple of inputs that are needed for this action\n    # then specify a tuple of outputs that can given in return\n\n    # 'error' can be specified as an output if the challenge returns\n    # useful information through an error message\n    # else, an Exception will be raised if an error is returned\n    # and the user does not specify it as a desired output.\n    # inputs must be in the order of the url, e.g.\n    # http://aes.cryptohack.org/oh_snap/ciphertext/nonce/\n    R.add_action('send_cmd', ('ciphertext', 'nonce'), ('msg', 'error'))\n\n    # we can then execute an action, by giving its name as first parameters.\n    # The following ordered arguments are the wanted outputs from this action.\n    # Even if we specified multiple possible outputs for this actions ('error')\n    # and 'msg', it is possible to retrieve a subset. If only one output is \n    # asked, then its value is returned by the function. Else a dictionnary\n    # is returned.\n    # Then inputs are specified through unordered arguments. There must always\n    # be given as bytes, the requester is in charge to send it as hex to the web \n    # server. If some day the Web API changes, and some arguments are not expected\n    # to be in hexadecimal, changes will be needed.\n    error_message = req.do_action('send_cmd', 'error', ciphertext=b'\\xff', nonce=b'\\xff')\n\n    # do awesome things to find the flag\n```\n\n### Example of usage with server communication using 'option' parameters:\n```python\nfrom ch_requester import NCRequester\n\nif __name__ == \"__main__\":\n\n    R = NCRequester(13397)\n    # adding actions to the requester\n    # first give the name of the action, and must match the option\n    # paramete of the server-side.\n    # then specify a tuple of inputs that are needed for this action\n    # then specify a tuple of outputs that can given in return.\n    # No particular ordering is needed here.\n    R.add_action(\"insert_key\", (\"key\",), (\"msg\"))\n    R.add_action(\"unlock\", (), (\"msg\",))\n\n    # we then open the connection (using pwntools)\n    R.open()\n    # some challenges print a line to welcome the challenger\n    # we can skip it\n    R.flush_line()\n\n    # As for the Web API, we can execute action, except this time\n    # the user is responsible to put input data into the correct\n    # format used by the server-side.\n    msg = req.do_action(\"insert_key\", \"msg\", key=(b\"\\x00\" * 16).hex())\n\n    print(msg)\n\n    flag = req.do_action(\"unlock\", \"msg\")\n\n    # do awesome things to find the flag\n\n    R.close()\n```\n\n### Example of usage with server communication without 'option' parameters:\n```python\nfrom ch_requester import NCRequester\nfrom base64 import b64decode\n\nif __name__ == \"__main__\":\n\n    R = NCRequester(13370)\n    # some challenges don't use the 'option' parameters\n    # so you can send your own dictionnary payload to the server\n\n    # we then open the connection (using pwntools)\n    R.open()\n    # some challenges print a line to welcome the challenger\n    # we can skip it\n    R.flush_line()\n\n    PAYLOAD = {'msg': 'request'}\n    ciphertext = b64decode(req.send_recv_raw_payload(PAYLOAD, 'ciphertext'))\n\n    # do awesome things to find the flag\n\n    R.close()\n```\n\n## Contributing\n\nIf you'd like to contribute, please fork the repository and use a feature\nbranch. Pull requests are warmly welcome.\n\n## Licensing\n\nThe code in this project is licensed under MIT license.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maxime-peim/cryptohack-requester",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CHRequester",
    "package_url": "https://pypi.org/project/CHRequester/",
    "platform": "",
    "project_url": "https://pypi.org/project/CHRequester/",
    "project_urls": {
      "Bug Tracker": "https://github.com/maxime-peim/cryptohack-requester/issues",
      "Homepage": "https://github.com/maxime-peim/cryptohack-requester"
    },
    "release_url": "https://pypi.org/project/CHRequester/0.0.1/",
    "requires_dist": [
      "requests (>=2.26)",
      "pwntools (>=4.6.0)"
    ],
    "requires_python": "",
    "summary": "Cryptohack URL/NetCat request maker.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11285488,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be71f3fe5807eef0aa4cf7250ccbaa3196859f09a5cd0e581929605fe12165b0",
          "md5": "5e11986e74321b99c22a0ed2bfd940dd",
          "sha256": "3a26cb28b4164296ff6577f602aef9acd91820faf0f439435bd9b5577fc1ec7a"
        },
        "downloads": -1,
        "filename": "CHRequester-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e11986e74321b99c22a0ed2bfd940dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6242,
        "upload_time": "2021-08-26T14:11:38",
        "upload_time_iso_8601": "2021-08-26T14:11:38.342785Z",
        "url": "https://files.pythonhosted.org/packages/be/71/f3fe5807eef0aa4cf7250ccbaa3196859f09a5cd0e581929605fe12165b0/CHRequester-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dcc0fc71ed37b55299644cb866a1db5d1a0846eee9c7d9d79e1e42c43c77cad",
          "md5": "d12b87abf4b7961dcba7217c6f599c0d",
          "sha256": "69ce7578b211daff2227e13b3b4364cd1c63ddbf658dbdccd97a7c766038d977"
        },
        "downloads": -1,
        "filename": "CHRequester-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d12b87abf4b7961dcba7217c6f599c0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5128,
        "upload_time": "2021-08-26T14:11:40",
        "upload_time_iso_8601": "2021-08-26T14:11:40.401605Z",
        "url": "https://files.pythonhosted.org/packages/5d/cc/0fc71ed37b55299644cb866a1db5d1a0846eee9c7d9d79e1e42c43c77cad/CHRequester-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be71f3fe5807eef0aa4cf7250ccbaa3196859f09a5cd0e581929605fe12165b0",
        "md5": "5e11986e74321b99c22a0ed2bfd940dd",
        "sha256": "3a26cb28b4164296ff6577f602aef9acd91820faf0f439435bd9b5577fc1ec7a"
      },
      "downloads": -1,
      "filename": "CHRequester-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e11986e74321b99c22a0ed2bfd940dd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6242,
      "upload_time": "2021-08-26T14:11:38",
      "upload_time_iso_8601": "2021-08-26T14:11:38.342785Z",
      "url": "https://files.pythonhosted.org/packages/be/71/f3fe5807eef0aa4cf7250ccbaa3196859f09a5cd0e581929605fe12165b0/CHRequester-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5dcc0fc71ed37b55299644cb866a1db5d1a0846eee9c7d9d79e1e42c43c77cad",
        "md5": "d12b87abf4b7961dcba7217c6f599c0d",
        "sha256": "69ce7578b211daff2227e13b3b4364cd1c63ddbf658dbdccd97a7c766038d977"
      },
      "downloads": -1,
      "filename": "CHRequester-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d12b87abf4b7961dcba7217c6f599c0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5128,
      "upload_time": "2021-08-26T14:11:40",
      "upload_time_iso_8601": "2021-08-26T14:11:40.401605Z",
      "url": "https://files.pythonhosted.org/packages/5d/cc/0fc71ed37b55299644cb866a1db5d1a0846eee9c7d9d79e1e42c43c77cad/CHRequester-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}