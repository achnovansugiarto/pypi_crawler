{
  "info": {
    "author": "Kushal Jain",
    "author_email": "kushal@neuralspace.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\"><img src=\"https://docs.google.com/drawings/d/e/2PACX-1vQ65pCWYymvOtQXCUSsWfq0xeaE6fFmQ-_QT003eZRbeLiwKoE7xvDe6fCeuBx_ha7aCjpN3mu_WLl9/pub?w=1536&h=480\" alt=\"logo\" width=\"70%\" /></p>  \n<p align=\"center\">\n  <a href=\"https://app.circleci.com/pipelines/github/Neural-Space\">\n    <img src=\"https://circleci.com/gh/Neural-Space/genos.svg?style=shield&circle-token=3658f580f8183f441023a1a4234716410bd74338\" alt=\"CircleCI\" />\n  </a>\n  <a href=\"https://lgtm.com/projects/g/Neural-Space/genos/alerts/\">\n    <img src=\"https://img.shields.io/lgtm/alerts/g/Neural-Space/genos.svg?logo=lgtm&logoWidth=18\" alt=\"Total alerts\" />\n  </a>\n  <a href=\"https://lgtm.com/projects/g/Neural-Space/genos/context:python\">\n    <img src=\"https://img.shields.io/lgtm/grade/python/g/Neural-Space/genos.svg?logo=lgtm&logoWidth=18\" alt=\"Language grade: Python\" />\n  </a>\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"mit\" />\n  </a>\n</p>\n\n--------------------------------------\n\n\n\nInstantiate objects and call functions using dictionary configs in Python using Genos. \nThis package was originally developed to help python developers in making configurable software components. \n\nWhile [Hydra](https://github.com/facebookresearch/hydra) lets you instantiate objects and functions, it doesn't support recursive instantiation. \nPlus, Hydra is mostly used for config management. \nSo, we decided to build Genos by referring to Hydra and added the functionality of recursive instantiation. E.g.,\n\n**Install Genos**\n```bash\npip install genos\n```\n\nInstantiate a Python Class using Genos\n\n```python\nfrom genos import recursive_instantiate\n\nned = {\n    \"cls\": \"genos.examples.King\",\n    \"params\":{\n        \"name\": \"Eddard Stark\",\n        \"queen\": \"Catelyn Stark\",\n        \"allegiance\": \"Robert Baratheon\"\n    }\n}\n\nobj = recursive_instantiate(ned)\nprint(obj)\n```   \n\n# Contributors\n\n[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/0)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/0)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/1)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/1)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/2)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/2)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/3)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/3)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/4)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/4)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/5)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/5)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/6)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/6)[![](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/images/7)](https://sourcerer.io/fame/kushalj001/Neural-Space/genos/links/7)\n\n# Install\n\n### Pip\n```bash\npip install genos\n```\n\n### Poetry\n```bash\npoetry add genos\n```\n\n# Basic Usage\n\nThe following examples will show how this library can make your life easier by letting you instantiate python objects from dictionaries.\nFirst, let's consider a basic example where we simply instantiate a single class. \n\n### Single Class Instantiation\n```python\nclass King:\n    def __init__(self, name:str, queen:str, allegiance:str):\n        self.name = name\n        self.queen = queen\n        self.allegiance = allegiance\n\n    def __repr__(self):\n        return f\"Name:{self.name}\\nQueen:{self.queen}\\nAllegiance:{self.allegiance}\"\n        \n    def print_name(self):\n        print(self.name)\n```\n\nWe need to pass 3 parameters to instantiate this class. \nNote that these classes are located in the `genos.examples.*` subpackage. \nSo, let's say we wish to instantiate a `King` object for Eddard Stark because, afterall, _Winter is coming._\n\n```python\nfrom genos import recursive_instantiate\n\nned = {\n    \"cls\": \"genos.examples.King\",\n    \"params\":{\n        \"name\": \"Eddard Stark\",\n        \"queen\": \"Catelyn Stark\",\n        \"allegiance\": \"Robert Baratheon\"\n    }\n}\n\nobj = recursive_instantiate(ned)\nprint(obj)\n# Name:Eddard Stark\n# Queen:Catelyn Stark\n# Allegiance:Robert Baratheon\n```\n\n### Recursive Class Instantiation\n\nWell, this seemed quite simple. \nBut rarely are things so simple in life. \nConsider another class that takes an instance of `King` as a parameter.\n\n```python\nclass House:\n    def __init__(self, king:King, home:str, sigil:str):\n        self.king = king\n        self.home = home\n        self.sigil = sigil\n\n    def __repr__(self):\n        return f\"King:{self.king.name}\\nHome:{self.home}\\nSigil:{self.sigil}\"\n\n```\n\nThis is where recursive instantiation comes into action. \nTo initialize an object for this class, we can very easily create a nested dictionary and pass it to our magic method. \nOf course, we'll be instantiating an object for House Stark.\n```python\nfrom genos import recursive_instantiate\n\nstark = {\n    \"cls\": \"genos.examples.House\",\n    \"params\": {\n        \"king\":{\n            \"cls\": \"genos.examples.King\",\n            \"params\":{\n                \"name\": \"Eddard Stark\",\n                \"queen\": \"Catelyn Stark\",\n                \"allegiance\": \"Robert Baratheon\"\n                }\n        },\n        \"home\":\"Winterfell\",\n        \"sigil\":\"Direwolf\"\n    }\n}\n\nobj = recursive_instantiate(stark)\nprint(obj)\n# output\n# King:Eddard Stark\n# Home:Winterfell\n# Sigil:Direwolf\n```\n\n### Instantiation Using Positional Arguments  \nThe examples shown above always use keyword arguments to instantiate the classes. But we can also choose to simply pass in the positional arguments as shown below.  \n\n```python\nfrom genos import recursive_instantiate\n\nstark = {\n    \"cls\": \"genos.examples.House\",\n    \"args\": [\n        {\n            \"cls\": \"genos.examples.King\",\n            \"params\":{\n                \"name\": \"Eddard Stark\",\n                \"queen\": \"Catelyn Stark\",\n                \"allegiance\": \"Robert Baratheon\"\n                }\n        },\n        \"Winterfell\",\n        \"Direwolf\"\n    ]\n}\n\nobj = recursive_instantiate(stark)\nprint(obj)\n# output\n# King:Eddard Stark\n# Home:Winterfell\n# Sigil:Direwolf\n```\n\n### Instantiation Using Positional and Keyword Arguments\nThe following example makes use of both positional and keyword arguments together to instantiate the `House` class. We do not pass the keyword for the `king` parameter but we do so for the following parameters:`home` and `sigil`.\n```python\nfrom genos import recursive_instantiate\n\nstark = {\n    \"cls\": \"genos.examples.House\",\n    \"args\": [\n        {\n            \"cls\": \"genos.examples.King\",\n            \"params\":{\n                \"name\": \"Eddard Stark\",\n                \"queen\": \"Catelyn Stark\",\n                \"allegiance\": \"Robert Baratheon\"\n                }\n        }\n    ],\n    \"params\": {\n        \"home\":\"Winterfell\",\n        \"sigil\":\"Direwolf\"\n    }\n}\n\nobj = recursive_instantiate(stark)\nprint(obj)\n# output\n# King:Eddard Stark\n# Home:Winterfell\n# Sigil:Direwolf\n```\n\n### Call A Function\nJust like we classes, we can also instantiate functions by calling `recursive_instantiate`. The following example shows how we can instantiate and call a simple `multiply` function using `genos`.\n```python\nfrom genos import recursive_instantiate\n\nfunction_call = {\n    \"cls\": \"genos.examples.multiply\",\n    \"args\": [12, 1.3]\n}\n\nresult = recursive_instantiate(function_call)\nprint(result)\n# output\n# 15.600000000000001\n```\n\n# Advanced Usage\n\n### Deep Learning Example using PyTorch\n\nFor running the following examples you will need to install `Pytorch`.\n\n```shell script\npip install torch\n```\n\nSuch workflows where we need to instantiate multiple classes recursively is more evident in Deep Learning and related fields. \nNeuralSpace has been actively working in this space, building tools for Natural Language Processing (NLP). We have created this tool to make things easier for us. \nThe following example shows a scenario where you need different components/modules to create your own custom neural network for some specific task. The individual classes are merely wrappers around `PyTorch` functions. Let's get started.\n\nThe following example classes can be found in `genos.examples.complex_examples.py`.\n\n```python\nfrom torch import nn\n\nclass ActivationLayer(nn.Module):\n    '''\n    Gives two choices for activation function: ReLU or Tanh.\n    Introduces non-linearity in neural-networks. Usually applied \n    after an affine transformation.\n    '''\n    def __init__(self, activation:str):\n        super().__init__()\n        \n        if activation == 'relu':\n            self.activation = nn.ReLU()\n        else:\n            self.activation = nn.Tanh()\n    \n    def forward(self, x):\n        return self.activation(x)\n    \n\nclass AffineLayer(nn.Module):\n    '''\n    Performs an affine transformation on the input tensor.\n    For an input tensor \"x\", the output is W.x + b, where W \n    is a trainable weight matrix and b is the bias vector.\n    '''\n    def __init__(self, in_features:int, out_features:int, activation: ActivationLayer):\n        super().__init__()\n        self.transform = nn.Linear(in_features=in_features, out_features=out_features)\n        self.activation = activation\n    \n    def forward(self, x):\n        return self.activation(self.transform(x))\n        \nclass LSTMLayer(nn.Module):\n    '''\n    A wrapper over LSTM layer.\n    '''\n    def __init__(self, input_size, hidden_size, batch_first, dropout):\n        super().__init__()\n        self.lstm = nn.LSTM(input_size=input_size, hidden_size=hidden_size, batch_first=batch_first)\n        self.dropout = nn.Dropout(dropout)\n    \n    def forward(self, x):\n        output, _ = self.lstm(x)\n        return self.dropout(output)        \n```\nThe three classes above will now be used to create a custom neural network. \nNote carefully that in order to instantiate an `AffineLayer`, we need to pass an object of `ActivationLayer`. \nThe `CustomModel` will comprise of two components: `AffineLayer` and `LSTMLayer`.\n\n```python\n\nclass CustomModel(nn.Module):\n    \n    def __init__(self, affine_layer:AffineLayer, lstm_layer:LSTMLayer):\n        super().__init__()\n        self.affine_layer = affine_layer\n        self.lstm_layer = lstm_layer\n    \n    def forward(self, x):\n        return self.affine_layer(self.lstm_layer(x))\n```\n\nThe instantiation of this class using genos will be as follows.\n\n```python\nfrom genos import recursive_instantiate\n\ncustom_obj = \\\n{\n    \"cls\": \"genos.examples.CustomModel\",\n    \"params\": {\n        \"affine_layer\": {\n            {\n                \"cls\": \"examples.example.AffineLayer\",\n                \"params\": {\n                    \"in_features\": 256,\n                    \"out_features\": 256,\n                    \"activation\": {\n                        \"cls\": \"genos.examples.ActivationLayer\",\n                        \"params\": {\n                            \"activation\": \"relu\"\n                        }\n                    }\n                }\n            },\n            {\n                \"cls\": \"genos.examples.LSTMLayer\",\n                \"params\":{\n                    \"input_size\": 256,\n                    \"hidden_size\":256,\n                    \"batch_first\":True,\n                }\n            }\n        }\n        \n    }\n}\n\n\nmodel = recursive_instantiate(custom_obj)\nx = torch.randn(32, 100, 256)\nout = model(x)\nprint(out.shape)\n# [32, 100, 256]\n```\n\n### Get Class Reference from Class Path\nIf you do not wish to use `genos` for instantiating your functions or classes, you can still use it to find and load different classes within your project structure. The following example shows the usage of `get_class()` function from `genos` to locate the `King` class.\n```python\nfrom genos import get_class\n\nclass_path = \"genos.examples.King\"\nclass_reference = get_class(class_path)\n\neddard_stark = class_reference(name=\"Eddard Stark\", queen=\"Catelyn Stark\", \n                               allegiance=\"Robert Baratheon\")\nprint(eddard_stark)\n# Name:Eddard Stark\n# Queen:Catelyn Stark\n# Allegiance:Robert Baratheon\n```\n\n\n### Get Function Reference from Class Path\nSimilar to the `get_class()` method above, you can also use `get_method()` function from `genos` to find functions in your project structure and instantiate them normally.\n```python\nfrom genos import get_method\n\nmethod_path = \"genos.examples.multiply\"\nmethod_reference = get_method(method_path)\n\nresult = method_reference(2, 3.5)\nprint(result)\n# 7.0\n```\n\n\n# Dev Setup\n\n## Prerequisites\n\n- Python >=3.7, <4\n- Tested on Mac 10.15.6 Catalina, Ubuntu 18.04\n\n\n## Install Bleeding Edge Version \n\n```shell script\n# clone the repo\n$ git clone https://github.com/Neural-Space/genos.git\n# Install system-level dependencies\n$ make install-system-deps\n # Install environment level dependencies\n$ make install-deps\n```\n\n### Testing and Code formatting\n\n```shell script\n# run the tests to make sure everything works\n$ make unit-test\n\n# check coverage of the code\n$ make test-coverage\n```\n\n# Contribution guide\nRead the contribution guideline over [here](https://github.com/Neural-Space/genos/blob/main/CONTRIBUTING.md).\n\n# Attribution\nIcons made by <a href=\"https://www.flaticon.com/authors/skyclick\" title=\"Skyclick\">Skyclick</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Neural-Space/genos",
    "keywords": "instantiation,objects,recursive instantiation,functio call,config instantiate",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genos",
    "package_url": "https://pypi.org/project/genos/",
    "platform": null,
    "project_url": "https://pypi.org/project/genos/",
    "project_urls": {
      "Homepage": "https://github.com/Neural-Space/genos"
    },
    "release_url": "https://pypi.org/project/genos/0.1.10/",
    "requires_dist": [
      "omegaconf (>=2.1.0)"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "Instantiate objects and call functions using dictionary configs in Python using Genos.",
    "version": "0.1.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13499923,
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b92290fece06ba5cf7ad5ccd1918bc3946cced52b4079fabcc01a5a43dbacde2",
          "md5": "f96003925b02e3b9758c49fe81b674a6",
          "sha256": "244c98f5d2ce67442a822d78feafad3da9ec120bd5c11f32b36f663740eb9825"
        },
        "downloads": -1,
        "filename": "genos-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f96003925b02e3b9758c49fe81b674a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 11537,
        "upload_time": "2022-04-13T09:10:56",
        "upload_time_iso_8601": "2022-04-13T09:10:56.599450Z",
        "url": "https://files.pythonhosted.org/packages/b9/22/90fece06ba5cf7ad5ccd1918bc3946cced52b4079fabcc01a5a43dbacde2/genos-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e5a84fcd8b1dce3b07830882ca710e29fada28921a12a952f9ace0c01e7e054",
          "md5": "7179061330fa39bd0a87dffb418e577a",
          "sha256": "0b96797238300d5843d1bf7752e8e544d16c20b2daaa764ff158fbf5f05c1e65"
        },
        "downloads": -1,
        "filename": "genos-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7179061330fa39bd0a87dffb418e577a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 13708,
        "upload_time": "2022-04-13T09:10:58",
        "upload_time_iso_8601": "2022-04-13T09:10:58.645615Z",
        "url": "https://files.pythonhosted.org/packages/9e/5a/84fcd8b1dce3b07830882ca710e29fada28921a12a952f9ace0c01e7e054/genos-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5045e0cbb89b16df15032d9e355e3dff3446acb5735b929740c2ea5ddfd9841a",
          "md5": "3510f4acb306416e33954540fdec8c83",
          "sha256": "453c0c8d285d85b3e8752b770f15265c437c4b68600874aea2d12a4070d2cef0"
        },
        "downloads": -1,
        "filename": "genos-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3510f4acb306416e33954540fdec8c83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 11403,
        "upload_time": "2020-11-09T20:52:46",
        "upload_time_iso_8601": "2020-11-09T20:52:46.842034Z",
        "url": "https://files.pythonhosted.org/packages/50/45/e0cbb89b16df15032d9e355e3dff3446acb5735b929740c2ea5ddfd9841a/genos-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1fa1436d975955609da8a142ab3e3a8e64a7a3928c22057f15c88d4799e490f",
          "md5": "8e85f02920e95e08de0e8d44ca2f2100",
          "sha256": "e9a9e7df9cb7ccb023ae7db7af35588af35820ec7e0ce93451416a56a05337d8"
        },
        "downloads": -1,
        "filename": "genos-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8e85f02920e95e08de0e8d44ca2f2100",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 13909,
        "upload_time": "2020-11-09T20:52:49",
        "upload_time_iso_8601": "2020-11-09T20:52:49.424837Z",
        "url": "https://files.pythonhosted.org/packages/e1/fa/1436d975955609da8a142ab3e3a8e64a7a3928c22057f15c88d4799e490f/genos-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "413595e7fc9e6af6d60a8931e69449c74462204f2dc485bef8b826e6be276d60",
          "md5": "60d4ce1d68f8a3cb7b6e13498515cdb1",
          "sha256": "91fa1d1049ffd4f73a006efd950892fe854c3092050f47403ae602f0232aced8"
        },
        "downloads": -1,
        "filename": "genos-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60d4ce1d68f8a3cb7b6e13498515cdb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 11506,
        "upload_time": "2020-11-09T21:10:44",
        "upload_time_iso_8601": "2020-11-09T21:10:44.927953Z",
        "url": "https://files.pythonhosted.org/packages/41/35/95e7fc9e6af6d60a8931e69449c74462204f2dc485bef8b826e6be276d60/genos-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5995ebf637f8c87c61e1b953132636d3a8020342587eda25d2725753ec88c75a",
          "md5": "197e062879113666aa050b5235780f1f",
          "sha256": "1761969cd7af2bde5d0096fd744f5f2601c3dcf861470ed69e9bddd9e07e3554"
        },
        "downloads": -1,
        "filename": "genos-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "197e062879113666aa050b5235780f1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 14143,
        "upload_time": "2020-11-09T21:10:46",
        "upload_time_iso_8601": "2020-11-09T21:10:46.138155Z",
        "url": "https://files.pythonhosted.org/packages/59/95/ebf637f8c87c61e1b953132636d3a8020342587eda25d2725753ec88c75a/genos-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "020ac485d8393b4c4d1c98f32b0b12ade5ef937e70206fb307729aa779532fc2",
          "md5": "332c66a320120de911f816f87351b617",
          "sha256": "80cb783059538837e076d879fd6ac65d26964ec6c14e86a9f74bd52ab9bc0293"
        },
        "downloads": -1,
        "filename": "genos-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "332c66a320120de911f816f87351b617",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 11525,
        "upload_time": "2022-04-13T06:34:56",
        "upload_time_iso_8601": "2022-04-13T06:34:56.877920Z",
        "url": "https://files.pythonhosted.org/packages/02/0a/c485d8393b4c4d1c98f32b0b12ade5ef937e70206fb307729aa779532fc2/genos-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1fd41e9306562f56568d84e82f82a0b6a3147d39c05865408f380e86dcdb85e",
          "md5": "1eeeae3bef7ee20253ba1a13339c7eeb",
          "sha256": "3c9636bd0be906fa61afdbb78fd7ef0e74d6d322d9a583d270abb1939559d3c4"
        },
        "downloads": -1,
        "filename": "genos-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1eeeae3bef7ee20253ba1a13339c7eeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 13701,
        "upload_time": "2022-04-13T06:34:59",
        "upload_time_iso_8601": "2022-04-13T06:34:59.055937Z",
        "url": "https://files.pythonhosted.org/packages/a1/fd/41e9306562f56568d84e82f82a0b6a3147d39c05865408f380e86dcdb85e/genos-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88f4f74b6c4e242642ae740563cf2c13f8a22ea54ca0216746d34e5b522ae8eb",
          "md5": "912628e9abc6ec5624a95d903839eb93",
          "sha256": "d6a985f6a3bbabc78315a24aa45be683af33d91e76d642c62df1d759a9ceb428"
        },
        "downloads": -1,
        "filename": "genos-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "912628e9abc6ec5624a95d903839eb93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 11527,
        "upload_time": "2022-04-13T07:14:45",
        "upload_time_iso_8601": "2022-04-13T07:14:45.906037Z",
        "url": "https://files.pythonhosted.org/packages/88/f4/f74b6c4e242642ae740563cf2c13f8a22ea54ca0216746d34e5b522ae8eb/genos-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eab7057b7b9b456c0de65748d887e285eb6c24cf419ef264f394e9e4d5ac2be",
          "md5": "8aceb22c6d2e19875ef052f90ae69db9",
          "sha256": "a339f7149576734366c9b46cecf577a05c726a73550f53d253516fa9f86209a7"
        },
        "downloads": -1,
        "filename": "genos-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8aceb22c6d2e19875ef052f90ae69db9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 13705,
        "upload_time": "2022-04-13T07:14:48",
        "upload_time_iso_8601": "2022-04-13T07:14:48.232165Z",
        "url": "https://files.pythonhosted.org/packages/5e/ab/7057b7b9b456c0de65748d887e285eb6c24cf419ef264f394e9e4d5ac2be/genos-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b92290fece06ba5cf7ad5ccd1918bc3946cced52b4079fabcc01a5a43dbacde2",
        "md5": "f96003925b02e3b9758c49fe81b674a6",
        "sha256": "244c98f5d2ce67442a822d78feafad3da9ec120bd5c11f32b36f663740eb9825"
      },
      "downloads": -1,
      "filename": "genos-0.1.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f96003925b02e3b9758c49fe81b674a6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 11537,
      "upload_time": "2022-04-13T09:10:56",
      "upload_time_iso_8601": "2022-04-13T09:10:56.599450Z",
      "url": "https://files.pythonhosted.org/packages/b9/22/90fece06ba5cf7ad5ccd1918bc3946cced52b4079fabcc01a5a43dbacde2/genos-0.1.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e5a84fcd8b1dce3b07830882ca710e29fada28921a12a952f9ace0c01e7e054",
        "md5": "7179061330fa39bd0a87dffb418e577a",
        "sha256": "0b96797238300d5843d1bf7752e8e544d16c20b2daaa764ff158fbf5f05c1e65"
      },
      "downloads": -1,
      "filename": "genos-0.1.10.tar.gz",
      "has_sig": false,
      "md5_digest": "7179061330fa39bd0a87dffb418e577a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 13708,
      "upload_time": "2022-04-13T09:10:58",
      "upload_time_iso_8601": "2022-04-13T09:10:58.645615Z",
      "url": "https://files.pythonhosted.org/packages/9e/5a/84fcd8b1dce3b07830882ca710e29fada28921a12a952f9ace0c01e7e054/genos-0.1.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}