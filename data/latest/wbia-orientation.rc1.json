{
  "info": {
    "author": "Olga Moskvyak, Jason Parham",
    "author_email": "olgamoskvyak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "===============================\nWildbook IA - wbia_orientation\n===============================\n\n|Build| |Pypi| |ReadTheDocs|\n\nOrientation Plug-in - Part of the WildMe / Wildbook IA Project.\n\nA plugin for automatic detection of object-oriented bounding box based on axis-aligned box\nfor wildlife species.\n\nInstallation\n------------\n\n.. code:: bash\n\n    ./run_developer_setup.sh\n\nREST API\n--------\n\nWith the plugin installed, register the module name with the `WBIAControl.py` file\nin the wbia repository located at `wbia/wbia/control/WBIAControl.py`.  Register\nthe module by adding the string `wbia_plugin_orientation` to the\nlist `AUTOLOAD_PLUGIN_MODNAMES`.\n\nThen, load the web-based WBIA IA service and open the URL that is registered with\nthe `@register_api decorator`.\n\n.. code:: bash\n\n    cd ~/code/wbia/\n    python dev.py --web\n\n.. TODO update Rest API\n.. Navigate in a browser to http://127.0.0.1:5000/api/plugin/example/helloworld/ where this returns a formatted JSON response, including the serialized returned valuefrom the `wbia_plugin_identification_example_hello_world()` function\n\n.. code:: json\n\n    {\"status\": {\"cache\": -1, \"message\": \"\", \"code\": 200, \"success\": true}, \"response\": \"[wbia_plugin_identification_example] hello world with WBIA controller <WBIAController(testdb1) at 0x11e776e90>\"}\n\nPython API\n----------\n\n.. code:: bash\n\n    python\n    >>> import wbia\n    >>> import wbia_orientation\n    >>> species = 'spotteddolphin'\n    >>> url = 'https://cthulhu.dyn.wildme.io/public/datasets/orientation.spotteddolphin.coco.tar.gz'\n    >>> ibs = wbia_orientation._plugin.wbia_orientation_test_ibs(species, dataset_url=url)\n    >>> aid_list = ibs.get_valid_aids()\n    >>> aid_list = aid_list[:10]\n    >>> output, theta = ibs.wbia_plugin_detect_oriented_box(aid_list, species, False, False)\n    >>> expected_theta = [-0.4158303737640381, 1.5231519937515259,\n                          2.0344438552856445, 1.6124389171600342,\n                          1.5768203735351562, 4.669830322265625,\n                          1.3162155151367188, 1.2578175067901611,\n                          0.9936041831970215,  0.8561460971832275]\n    >>> import numpy as np\n    >>> diff = np.abs(np.array(theta) - np.array(expected_theta))\n    >>> assert diff.all() < 1e-6\n\nThe function from the plugin is automatically added as a method to the ibs object\nas `ibs.wbia_plugin_detect_oriented_box()`, which is registered using the\n`@register_ibs_method decorator`.\n\nCode Style and Development Guidelines\n-------------------------------------\n\nContributing\n~~~~~~~~~~~~\n\nIt's recommended that you use ``pre-commit`` to ensure linting procedures are run\non any commit you make. (See also `pre-commit.com <https://pre-commit.com/>`_)\n\nReference `pre-commit's installation instructions <https://pre-commit.com/#install>`_ for software installation on your OS/platform. After you have the software installed, run ``pre-commit install`` on the command line. Now every time you commit to this project's code base the linter procedures will automatically run over the changed files.  To run pre-commit on files preemtively from the command line use:\n\n.. code:: bash\n\n    git add .\n    pre-commit run\n\n    # or\n\n    pre-commit run --all-files\n\nBrunette\n~~~~~~~~\n\nOur code base has been formatted by Brunette, which is a fork and more configurable version of Black (https://black.readthedocs.io/en/stable/).\n\nFlake8\n~~~~~~\n\nTry to conform to PEP8.  You should set up your preferred editor to use flake8 as its Python linter, but pre-commit will ensure compliance before a git commit is completed.\n\nTo run flake8 from the command line use:\n\n.. code:: bash\n\n    flake8\n\n\nThis will use the flake8 configuration within ``setup.cfg``,\nwhich ignores several errors and stylistic considerations.\nSee the ``setup.cfg`` file for a full and accurate listing of stylistic codes to ignore.\n\nPyTest\n~~~~~~\n\nOur code uses Google-style documentation tests (doctests) that uses pytest and xdoctest to enable full support.  To run the tests from the command line use:\n\n.. code:: bash\n\n    pytest\n\nTo run doctests with `+REQUIRES(--web-tests)` do:\n\n.. code:: bash\n\n    pytest --web-tests\n\nResults and Examples\n---------------------\n\nQuantitative and qualitative results are presented `here </wbia_orientation>`_\n\n\nImplementation details\n----------------------\nDependencies\n~~~~~~~~~~~~\n* Python >= 3.7\n* PyTorch >= 1.5\n\nData\n~~~~~~~~~~~~\n\nData used for training and evaluation:\n\n * sea turtle head parts - `orientation.seaturtle.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.seaturtle.coco.tar.gz>`_\n * sea dragon head parts - `orientation.seadragon.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.seadragon.coco.tar.gz>`_\n * manta ray body annotations - `orientation.mantaray.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.mantaray.coco.tar.gz>`_\n * spotted dolphin body annotations - `orientation.spotteddolphin.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.spotteddolphin.coco.tar.gz>`_\n * hammerhead shark body annotations - `orientation.hammerhead.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.hammerhead.coco.tar.gz>`_\n * right whale bonnet parts - `orientation.rightwhale.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.rightwhale.coco.tar.gz>`_\n * whale  shark - `orientation.whaleshark.coco.tar.gz <https://cthulhu.dyn.wildme.io/public/datasets/orientation.whaleshark.coco.tar.gz>`_\n\nData preprocessing\n~~~~~~~~~~~~~~~~~~\n\nEach dataset is preprocessed to speed-up image loading during training. At the first time of running a training or a testing script on a dataset the following operations are applied:\n * an object is cropped based on a segmentation boudnding box from annotations with a padding around equal to the half size of the box to allow for image augmentations\n * an image is resized so the smaller side is equal to the double size of a model input; the aspect ratio is preserved.\n\nThe preprocessed dataset is saved in `data` directory.\n\nData augmentations\n~~~~~~~~~~~~~~~~~~\n\nDuring the training the data is augmented online in the following way:\n\n * Random Horizontal Flips\n * Random Vertical Flips\n * Random Rotations\n * Random Scale\n * Random Crop\n * Color Jitter (variations in brightness, hue, contrast and saturation)\n\nBoth training and testing data are resized to the model input size and normalized.\n\nTraining\n~~~~~~~~~~~~\n\nRun the training script:\n\n.. code:: bash\n\n  python wbia_orientation/train.py --cfg <path_to_config_file> <additional_optional_params>\n\nConfiguration files are listed in `experiments` folder. For example, the following line trains the model with parameters specified in the config file:\n\n.. code:: bash\n\n  python wbia_orientation/train.py --cfg wbia_orientation/config/mantaray.yaml\n\n\nTo override a parameter in config, add this parameter as a command line argument:\n\n.. code:: bash\n\n  python wbia_orientation/train.py --cfg wbia_orientation/config/mantaray.yaml TRAIN.BS 64\n\nTesting\n~~~~~~~~~~~~\n\nThe test script evaluates on the test set with the best model saved during training:\n\n.. code:: bash\n\n  python wbia_orientation/test.py --cfg <path_to_config_file> <additional_optional_params>\n\nFor example:\n\n.. code:: bash\n\n  python wbia_orientation/test.py --cfg wbia_orientation/config/mantaray.yaml\n\nBy default, the accuracy of detected rotation angle is computed for a threshold of 10 degrees.\nPass a different value as a command line parameter to evaluate with another threshold:\n\n.. code:: bash\n\n  python wbia_orientation/test.py --cfg wbia_orientation/config/mantaray.yaml TEST.THETA_THR 15.\n\n.. code:: bash\n\n    pytest\n\n.. |Build| image:: https://img.shields.io/github/workflow/status/WildMeOrg/wbia-plugin-orientation/Build%20and%20upload%20to%20PyPI/main\n    :target: https://github.com/WildMeOrg/wbia-plugin-orientation/actions?query=branch%3Amain+workflow%3A%22Build+and+upload+to+PyPI%22\n    :alt: Build and upload to PyPI (main)\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/wbia-orientation.svg\n   :target: https://pypi.python.org/pypi/wbia-orientation\n   :alt: Latest PyPI version\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/wbia-plugin-orientation/badge/?version=latest\n    :target: https://wbia-plugin-orientation.readthedocs.io/en/latest/\n    :alt: Documentation on ReadTheDocs\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/WildbookOrg/wbia-plugin-orientation",
    "keywords": "",
    "license": "Apache Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wbia-orientation",
    "package_url": "https://pypi.org/project/wbia-orientation/",
    "platform": "",
    "project_url": "https://pypi.org/project/wbia-orientation/",
    "project_urls": {
      "Homepage": "https://github.com/WildbookOrg/wbia-plugin-orientation"
    },
    "release_url": "https://pypi.org/project/wbia-orientation/4.0.1/",
    "requires_dist": [
      "efficientnet-pytorch",
      "matplotlib",
      "numpy",
      "scikit-image",
      "tensorboardX",
      "torch",
      "torchvision",
      "tqdm",
      "wbia-utool",
      "wildbook-ia",
      "yacs",
      "cmake ; extra == 'all'",
      "ninja ; extra == 'all'",
      "scikit-build ; extra == 'all'",
      "setuptools ; extra == 'all'",
      "setuptools-scm[toml] ; extra == 'all'",
      "wheel ; extra == 'all'",
      "efficientnet-pytorch ; extra == 'all'",
      "matplotlib ; extra == 'all'",
      "numpy ; extra == 'all'",
      "scikit-image ; extra == 'all'",
      "tensorboardX ; extra == 'all'",
      "torch ; extra == 'all'",
      "torchvision ; extra == 'all'",
      "tqdm ; extra == 'all'",
      "wbia-utool ; extra == 'all'",
      "wildbook-ia ; extra == 'all'",
      "yacs ; extra == 'all'",
      "brunette ; extra == 'all'",
      "codecov ; extra == 'all'",
      "coverage ; extra == 'all'",
      "pytest ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "pytest-subprocess ; extra == 'all'",
      "xdoctest ; extra == 'all'",
      "cmake ; extra == 'build'",
      "ninja ; extra == 'build'",
      "scikit-build ; extra == 'build'",
      "setuptools ; extra == 'build'",
      "setuptools-scm[toml] ; extra == 'build'",
      "wheel ; extra == 'build'",
      "efficientnet-pytorch ; extra == 'runtime'",
      "matplotlib ; extra == 'runtime'",
      "numpy ; extra == 'runtime'",
      "scikit-image ; extra == 'runtime'",
      "tensorboardX ; extra == 'runtime'",
      "torch ; extra == 'runtime'",
      "torchvision ; extra == 'runtime'",
      "tqdm ; extra == 'runtime'",
      "wbia-utool ; extra == 'runtime'",
      "wildbook-ia ; extra == 'runtime'",
      "yacs ; extra == 'runtime'",
      "brunette ; extra == 'tests'",
      "codecov ; extra == 'tests'",
      "coverage ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "pytest-subprocess ; extra == 'tests'",
      "xdoctest ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "wbia_orientation - A plug-in for detecting the orientation of various species in images for WBIA system",
    "version": "4.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12264656,
  "releases": {
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a8d11ea7eab3a7653304ca57c617d90f7cca433cc9303031ccf19d4de85b940",
          "md5": "456ac32d8b0ba857b523a9e0a8830f86",
          "sha256": "a8f37d2b26bb36c4e0239e12e2e877384f0a2466d786f635db6f6cd0a8bfd0fa"
        },
        "downloads": -1,
        "filename": "wbia_orientation-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "456ac32d8b0ba857b523a9e0a8830f86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29437,
        "upload_time": "2021-12-10T08:18:19",
        "upload_time_iso_8601": "2021-12-10T08:18:19.396227Z",
        "url": "https://files.pythonhosted.org/packages/3a/8d/11ea7eab3a7653304ca57c617d90f7cca433cc9303031ccf19d4de85b940/wbia_orientation-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b82670f702f0165f08384a56e63692fca1cc640d90040b1f6860b4c28b621dd4",
          "md5": "654cb463d8c3b532cf04fe7425992989",
          "sha256": "5ce0e9a95b88e760501cc318e501969cc4f9c97481a0d6c29b01ebf4c8566d19"
        },
        "downloads": -1,
        "filename": "wbia-orientation-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "654cb463d8c3b532cf04fe7425992989",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6369727,
        "upload_time": "2021-12-10T08:18:20",
        "upload_time_iso_8601": "2021-12-10T08:18:20.969922Z",
        "url": "https://files.pythonhosted.org/packages/b8/26/70f702f0165f08384a56e63692fca1cc640d90040b1f6860b4c28b621dd4/wbia-orientation-4.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a8d11ea7eab3a7653304ca57c617d90f7cca433cc9303031ccf19d4de85b940",
        "md5": "456ac32d8b0ba857b523a9e0a8830f86",
        "sha256": "a8f37d2b26bb36c4e0239e12e2e877384f0a2466d786f635db6f6cd0a8bfd0fa"
      },
      "downloads": -1,
      "filename": "wbia_orientation-4.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "456ac32d8b0ba857b523a9e0a8830f86",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29437,
      "upload_time": "2021-12-10T08:18:19",
      "upload_time_iso_8601": "2021-12-10T08:18:19.396227Z",
      "url": "https://files.pythonhosted.org/packages/3a/8d/11ea7eab3a7653304ca57c617d90f7cca433cc9303031ccf19d4de85b940/wbia_orientation-4.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b82670f702f0165f08384a56e63692fca1cc640d90040b1f6860b4c28b621dd4",
        "md5": "654cb463d8c3b532cf04fe7425992989",
        "sha256": "5ce0e9a95b88e760501cc318e501969cc4f9c97481a0d6c29b01ebf4c8566d19"
      },
      "downloads": -1,
      "filename": "wbia-orientation-4.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "654cb463d8c3b532cf04fe7425992989",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6369727,
      "upload_time": "2021-12-10T08:18:20",
      "upload_time_iso_8601": "2021-12-10T08:18:20.969922Z",
      "url": "https://files.pythonhosted.org/packages/b8/26/70f702f0165f08384a56e63692fca1cc640d90040b1f6860b4c28b621dd4/wbia-orientation-4.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}