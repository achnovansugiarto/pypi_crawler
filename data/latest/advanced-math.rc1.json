{
  "info": {
    "author": "Vaibhav Kumar",
    "author_email": "vaibhavkrkm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "advanced_math module to handle advanced math operations\n\nDocumentation\n------------------\n\nNAME\n    advanced_math - advanced_math module for handling some advanced mathamatical operations\n\nCLASSES\n    builtins.object\n        Point\n        Point3D\n        Vector2\n        Vector3\n\n    class Point(builtins.object)\n     |  Point(x, y, formatting='default')\n     |  \n     |  Creates a 2D point object\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(self, another_point)\n     |  \n     |  __eq__(self, another_point)\n     |      Return self==value.\n     |  \n     |  __init__(self, x, y, formatting='default')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  __sub__(self, another_point)\n     |  \n     |  distance(self, another_point)\n     |      Calculates the distance between two points\n     |      :param another_point: Point\n     |      :return: float\n     |  \n     |  form_vector2(self, another_point)\n     |      Returns a new Vector2 object having x and y of subtraction of first point and second point.\n     |      :param another_point: Point\n     |      :return: Vector2\n     |  \n     |  format(self, formatting)\n     |      Changes the format in which the point is printed (converted into str).\n     |      Supported formats are: default, standard, expanded.\n     |      Although, it doesn't throw errors if any invalid formatting is presented, it's a bad practice doing that!\n     |      :param formatting: str\n     |      :return: None\n     |  \n     |  to_tuple(self)\n     |      Returns the point object in a tuple form\n     |      :return: Tuple\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |  \n     |  from_seq(sequence)\n     |  \n     |  make_point_from_seq(sequence)\n     |      Creates a new point using a sequence\n     |      :param sequence: Sequence\n     |      :return: Point\n     |  \n     |  origin()\n     |      Returns the origin point\n     |      :return: Point\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\n    class Point3D(builtins.object)\n     |  Point3D(x, y, z, formatting='default')\n     |  \n     |  Creates a 3D point object\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(self, another_point)\n     |  \n     |  __eq__(self, another_point)\n     |      Return self==value.\n     |  \n     |  __init__(self, x, y, z, formatting='default')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  __sub__(self, another_point)\n     |  \n     |  distance(self, another_point)\n     |      Calculates the distance between two points\n     |      :param another_point: Point3D\n     |      :return: float\n     |  \n     |  form_vector3(self, another_point)\n     |      TODO: IMPLEMENT AFTER VECTOR3\n     |      Returns a new Vector2 object having x and y of subtraction of first point and second point.\n     |      :param another_point: Point\n     |      :return: Vector2\n     |  \n     |  format(self, formatting)\n     |      Changes the format in which the point3D is printed (converted into str).\n     |      Supported formats are: default, standard, expanded.\n     |      Although, it doesn't throw errors if any invalid formatting is presented, it's a bad practice doing that!\n     |      :param formatting: str\n     |      :return: None\n     |  \n     |  to_tuple(self)\n     |      Returns the point3D object in a tuple form\n     |      :return: Tuple\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |  \n     |  from_seq(sequence)\n     |      Creates a new point using a sequence\n     |      :param sequence: Sequence\n     |      :return: Point3D\n     |  \n     |  origin()\n     |      Returns the origin point\n     |      :return: Point3D\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\n    class Vector2(builtins.object)\n     |  Vector2(x, y, formatting='default')\n     |  \n     |  Creates a new 2D vector object\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(self, another_vector)\n     |  \n     |  __eq__(self, another_vector)\n     |      Return self==value.\n     |  \n     |  __floordiv__(self, value)\n     |  \n     |  __init__(self, x, y, formatting='default')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __mul__(self, value)\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  __sub__(self, another_vector)\n     |  \n     |  __truediv__(self, value)\n     |  \n     |  direction(self)\n     |      Calculates the direction of a vector\n     |      :return: float\n     |  \n     |  format(self, formatting)\n     |      Changes the format in which the vector is printed (converted into str).\n     |      Supported formats are: default, standard, expanded.\n     |      Although, it doesn't throw errors if any invalid formatting is presented, it's a bad practice doing that!\n     |      :param formatting: str\n     |      :return: None\n     |  \n     |  from_seq(sequence)\n     |  \n     |  magnitude(self)\n     |      Calculates the magnitude of a 2D vector\n     |      :return: float\n     |  \n     |  to_tuple(self)\n     |      Returns the vector object in a tuple form\n     |      :return: Tuple\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |  \n     |  down()\n     |      Returns a unit vector in positive y direction\n     |  \n     |  left()\n     |      Returns a unit vector in negative x direction\n     |  \n     |  make_vector_from_seq(sequence)\n     |      Creates a new vector using a sequence\n     |      :param sequence: Sequence\n     |      :return: Vector2\n     |  \n     |  right()\n     |      Returns a unit vector in positive x direction\n     |  \n     |  up()\n     |      Returns a unit vector in negative y direction\n     |  \n     |  zero()\n     |      Returns the null or zero vector\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\n    class Vector3(builtins.object)\n     |  Vector3(x, y, z, formatting='default')\n     |  \n     |  Creates a new 3D vector object\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(self, another_vector)\n     |  \n     |  __eq__(self, another_vector)\n     |      Return self==value.\n     |  \n     |  __floordiv__(self, value)\n     |  \n     |  __init__(self, x, y, z, formatting='default')\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __mul__(self, value)\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  __sub__(self, another_vector)\n     |  \n     |  __truediv__(self, value)\n     |  \n     |  direction(self)\n     |      TODO: IMPLEMENT LATER\n     |      Calculates the direction of a vector\n     |      :return: float\n     |  \n     |  format(self, formatting)\n     |      Changes the format in which the vector is printed (converted into str).\n     |      Supported formats are: default, standard, expanded.\n     |      Although, it doesn't throw errors if any invalid formatting is presented, it's a bad practice doing that!\n     |      :param formatting: str\n     |      :return: None\n     |  \n     |  from_seq(sequence)\n     |      Creates a new vector using a sequence\n     |      :param sequence: Sequence\n     |      :return: Vector2\n     |  \n     |  magnitude(self)\n     |      Calculates the magnitude of a 3D vector\n     |      :return: float\n     |  \n     |  to_tuple(self)\n     |      Returns the vector object in a tuple form\n     |      :return: Tuple\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods defined here:\n     |  \n     |  down()\n     |      Returns a unit vector in positive y direction\n     |  \n     |  inward()\n     |      Returns a unit vector in positive z direction\n     |  \n     |  left()\n     |      Returns a unit vector in negative x direction\n     |  \n     |  outward()\n     |      Returns a unit vector in negative z direction\n     |  \n     |  right()\n     |      Returns a unit vector in positive x direction\n     |  \n     |  up()\n     |      Returns a unit vector in negative y direction\n     |  \n     |  zero()\n     |      Returns the null or zero vector\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vaibhavkrkm/advanced_math",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "advanced-math",
    "package_url": "https://pypi.org/project/advanced-math/",
    "platform": "",
    "project_url": "https://pypi.org/project/advanced-math/",
    "project_urls": {
      "Homepage": "https://github.com/vaibhavkrkm/advanced_math"
    },
    "release_url": "https://pypi.org/project/advanced-math/0.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "module to handle advanced math operations",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8982611,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c8583ea2632fd1a3fe10508c92d3a68805b80de1b0507ede0146323ce329035",
          "md5": "c1100be0019f6fdcf4d3438ebe638198",
          "sha256": "9605f2681f599ee2aa2b92880846a5886f580bbe5bb068c75a24f6ac9988a838"
        },
        "downloads": -1,
        "filename": "advanced_math-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1100be0019f6fdcf4d3438ebe638198",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5480,
        "upload_time": "2020-12-25T07:54:08",
        "upload_time_iso_8601": "2020-12-25T07:54:08.916729Z",
        "url": "https://files.pythonhosted.org/packages/9c/85/83ea2632fd1a3fe10508c92d3a68805b80de1b0507ede0146323ce329035/advanced_math-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c8583ea2632fd1a3fe10508c92d3a68805b80de1b0507ede0146323ce329035",
        "md5": "c1100be0019f6fdcf4d3438ebe638198",
        "sha256": "9605f2681f599ee2aa2b92880846a5886f580bbe5bb068c75a24f6ac9988a838"
      },
      "downloads": -1,
      "filename": "advanced_math-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c1100be0019f6fdcf4d3438ebe638198",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5480,
      "upload_time": "2020-12-25T07:54:08",
      "upload_time_iso_8601": "2020-12-25T07:54:08.916729Z",
      "url": "https://files.pythonhosted.org/packages/9c/85/83ea2632fd1a3fe10508c92d3a68805b80de1b0507ede0146323ce329035/advanced_math-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}