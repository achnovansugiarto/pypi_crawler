{
  "info": {
    "author": "mueller@ibb.uni-stuttgart.de",
    "author_email": "mueller@ibb.uni-stuttgart.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Test runs\n## Run python tests locally in the build folder \n### Not installed depencencies\nInside the docker container of 2.9 [Link](https://gitlab.dune-project.org/docker/ci/-/blob/master/dune-2.9/Dockerfile) the dune modules are not installed,\nsince `DUNECI_INSTALL_STAGE` is not set to 1, see [Link](https://gitlab.dune-project.org/docker/ci/-/blob/master/base-common/duneci-install-module#L118-L119)\n\nRunning the python tests of projectnameTest fails using the following commands. (To get this working i had to set \n`set (CMAKE_PREFIX_PATH \"/duneci/modules/dune-common/build-cmake\")` in the toplevel CMakeLists.txt)\n```shell\ndocker container run -it --entrypoint /bin/bash registry.dune-project.org/docker/ci/dune:2.9\ngit clone https://gitlab.dune-project.org/alexander.mueller/testpythonbindings.git\ncd testpythonbindings/\ndunecontrol --only=projectnameTest all\ncd build-cmake\nctest --verbose\n```\n\n`test1.py` and `test2.py` fails with:\n\n```python\n ValueError: Key INSTALL_PREFIX is expected to be unique across the given metadata. Got {'/usr/local', '/duneci/install'}\n```\n\n<details>\n  <summary>Full test results</summary>\n\n```shell\nduneci@e7fac7d916b9:~/testpythonbindings/build-cmake$ ctest --verbose\nUpdateCTestConfiguration  from :/duneci/testpythonbindings/build-cmake/DartConfiguration.tcl\nParse Config file:/duneci/testpythonbindings/build-cmake/DartConfiguration.tcl\nUpdateCTestConfiguration  from :/duneci/testpythonbindings/build-cmake/DartConfiguration.tcl\nParse Config file:/duneci/testpythonbindings/build-cmake/DartConfiguration.tcl\nTest project /duneci/testpythonbindings/build-cmake\nConstructing a list of tests\nDone constructing a list of tests\nUpdating test list for fixtures\nAdded 0 tests to meet fixture requirements\nChecking test dependency graph...\nChecking test dependency graph end\ntest 1\nStart 1: pytest1\n\n1: Test command: /duneci/testpythonbindings/build-cmake/run-in-dune-env \"python\" \"test1.py\"\n1: Test timeout computed to be: 3600\n1: Comparing build directories of installed dune modules with given build directories\n1: DUNE-INFO: Generating dune-py module in /duneci/modules/dune-common/build-cmake/dune-env/.cache/dune-py\n1: Help on package projectnameTest:\n1:\n1: NAME\n1:     projectnameTest\n1:\n1: DESCRIPTION\n1:     # SPDX-FileCopyrightText: Copyright Â© DUNE Project contributors, see file LICENSE.md in module root\n1:     # SPDX-License-Identifier: LicenseRef-GPL-2.0-only-with-DUNE-exception\n1:\n1: PACKAGE CONTENTS\n1:     _projectnameTest\n1:\n1: FUNCTIONS\n1:     add(...) method of builtins.PyCapsule instance\n1:         add(i: int, j: int) -> int\n1:         \n1:         A function which adds two numbers\n1:\n1: FILE\n1:     /duneci/testpythonbindings/build-cmake/python/projectnameTest/__init__.py\n1:\n1:\n1: Traceback (most recent call last):\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/common/__init__.py\", line 86, in FieldVector\n1:     return globals()[fv](values)\n1: KeyError: 'FieldVector_3'\n1:\n1: During handling of the above exception, another exception occurred:\n1:\n1: Traceback (most recent call last):\n1:   File \"/duneci/testpythonbindings/projectnameTest/python/test/test1.py\", line 17, in <module>\n1:     v = FieldVector([0, 1, 2])\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/common/__init__.py\", line 90, in FieldVector\n1:     cls = _loadVec(includes, typeName).FieldVector\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/common/__init__.py\", line 74, in _loadVec\n1:     return generator.load(\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/generator.py\", line 172, in load\n1:     return self.post(moduleName, source, postscript, extraCMake)\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/generator.py\", line 124, in post\n1:     module = builder.load(moduleName, source, self.typeName[0], extraCMake)\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 374, in load\n1:     self.initialize()\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 616, in initialize\n1:     super().initialize()\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 213, in initialize\n1:     self.build_dunepy_from_template(self.dune_py_dir)\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 448, in build_dunepy_from_template\n1:     force = Builder.generate_dunepy_from_template(dunepy_dir, force=force)\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 121, in generate_dunepy_from_template\n1:     context[\"install_prefix\"] = metaData.unique_value_across_modules(\"INSTALL_PREFIX\")\n1:   File \"/duneci/modules/dune-common/build-cmake/python/dune/packagemetadata.py\", line 496, in unique_value_across_modules\n1:     raise ValueError(f\"Key {key} is expected to be unique across the given metadata. Got {values}\")\n1: ValueError: Key INSTALL_PREFIX is expected to be unique across the given metadata. Got {'/usr/local', '/duneci/install'}\n1/2 Test #1: pytest1 ..........................***Failed    0.59 sec\ntest 2\nStart 2: pytest2\n\n2: Test command: /duneci/testpythonbindings/build-cmake/run-in-dune-env \"python\" \"test2.py\"\n2: Test timeout computed to be: 3600\n2: Comparing build directories of installed dune modules with given build directories\n2: DUNE-INFO: Generating dune-py module in /duneci/modules/dune-common/build-cmake/dune-env/.cache/dune-py\n2: Traceback (most recent call last):\n2:   File \"/duneci/testpythonbindings/projectnameTest/python/test/test2.py\", line 20, in <module>\n2:     grid = dune.grid.structuredGrid(lowerLeft,upperRight,elements)\n2:   File \"/duneci/modules/dune-grid/build-cmake/python/dune/grid/core.py\", line 13, in structuredGrid\n2:     return yaspGrid(domain, dimgrid=len(lower), coordinates=\"equidistantoffset\")\n2:   File \"/duneci/modules/dune-grid/build-cmake/python/dune/grid/_grids.py\", line 253, in yaspGrid\n2:     constructor = equidistantOffsetCoordinates(\n2:   File \"/duneci/modules/dune-grid/build-cmake/python/dune/grid/_grids.py\", line 165, in equidistantOffsetCoordinates\n2:     mod = moduleYaspCoordinates(dim,ctype)\n2:   File \"/duneci/modules/dune-grid/build-cmake/python/dune/grid/_grids.py\", line 159, in moduleYaspCoordinates\n2:     module = builder.load(moduleName, source, \"yasp coordinates dim={dim} ctype={ct}\".format(ct = ctype, dim = dim))\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 374, in load\n2:     self.initialize()\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 616, in initialize\n2:     super().initialize()\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 213, in initialize\n2:     self.build_dunepy_from_template(self.dune_py_dir)\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 448, in build_dunepy_from_template\n2:     force = Builder.generate_dunepy_from_template(dunepy_dir, force=force)\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/generator/cmakebuilder.py\", line 121, in generate_dunepy_from_template\n2:     context[\"install_prefix\"] = metaData.unique_value_across_modules(\"INSTALL_PREFIX\")\n2:   File \"/duneci/modules/dune-common/build-cmake/python/dune/packagemetadata.py\", line 496, in unique_value_across_modules\n2:     raise ValueError(f\"Key {key} is expected to be unique across the given metadata. Got {values}\")\n2: ValueError: Key INSTALL_PREFIX is expected to be unique across the given metadata. Got {'/usr/local', '/duneci/install'}\n2/2 Test #2: pytest2 ..........................***Failed    0.60 sec\n\n0% tests passed, 2 tests failed out of 2\n\nLabel Time Summary:\npython    =   1.19 sec*proc (2 tests)\nquick     =   1.19 sec*proc (2 tests)\n\nTotal Test time (real) =   1.19 sec\n\nThe following tests FAILED:\n1 - pytest1 (Failed)\n2 - pytest2 (Failed)\nErrors while running CTest\n```\n\n</details>\n\n### Installed\nWe use the same container but install the modules as similar? to https://gitlab.dune-project.org/docker/ci/-/blob/master/base-common/duneci-install-module#L118-L119.\n(To get this working i had to set\n`set (CMAKE_PREFIX_PATH \"/duneci/install/lib/cmake/dune-common\")` in the toplevel CMakeLists.txt)\nand removing the modules folder afterwards yields with the following commands\n```shell\ndocker container run -it --entrypoint /bin/bash registry.dune-project.org/docker/ci/dune:2.9\ncd modules/\ndunecontrol  --only=dune-common make install\ncd ..\nrm -rf modules/\ngit clone https://gitlab.dune-project.org/alexander.mueller/testpythonbindings.git\ncd testpythonbindings/\n/duneci/install/bin/dunecontrol --only=projectnameTest all\n```\nthe following error\n\n```\nERROR: The path \"/duneci/modules\" given in DUNE_CONTROL_PATH does not exist.\nExecution of dunecontrol terminated due to errors!\n```\nI suppose this is on purpose but why is the installation performed into the folder `/duneci/install/bin`and not into `/usr/bin` or `usr/local/bin`?\nSomehow the installed `dune-common` should not depend on the downloaded build folder?\nBut my Linux knowledge is not good enough here, maybe.\n\n### Test with homegrown MWE docker container\nFor the container see `DockerImages/DockerFile`\n**`test1.py` and `test2.py` fails with:\n\n```shell\ndocker container run -it --entrypoint /bin/bash rath3t/dunepythonbindings:installedmodules\ngit clone https://gitlab.dune-project.org/alexander.mueller/testpythonbindings.git\ncd testpythonbindings/\ndunecontrol --only=projectnameTest all\ncd build-cmake\nctest --verbose\n```\n\n\n\n```python\nbuild dir /usr/local/lib/cmake/dune-common for module dune-common is expected to be unique across the given metadata - found /dune/dune-common/build-cmake\n2: Dune python package could not be found.\n```\n\n<details>\n  <summary>Full test results</summary>\n\n```shell\nroot@e4f98ef9aa1e:/testpythonbindings/build-cmake# ctest --verbose\nUpdateCTestConfiguration  from :/testpythonbindings/build-cmake/DartConfiguration.tcl\nParse Config file:/testpythonbindings/build-cmake/DartConfiguration.tcl\nUpdateCTestConfiguration  from :/testpythonbindings/build-cmake/DartConfiguration.tcl\nParse Config file:/testpythonbindings/build-cmake/DartConfiguration.tcl\nTest project /testpythonbindings/build-cmake\nConstructing a list of tests\nDone constructing a list of tests\nUpdating test list for fixtures\nAdded 0 tests to meet fixture requirements\nChecking test dependency graph...\nChecking test dependency graph end\ntest 1\n    Start 1: pytest1\n\n1: Test command: /testpythonbindings/build-cmake/run-in-dune-env \"python\" \"test1.py\"\n1: Test timeout computed to be: 3600\n1: Comparing build directories of installed dune modules with given build directories\n1: build dir /usr/local/lib/cmake/dune-common for module dune-common is expected to be unique across the given metadata - found /dune/dune-common/build-cmake\n1: Dune python package could not be found.\n1/2 Test #1: pytest1 ..........................***Skipped   0.10 sec\ntest 2\n    Start 2: pytest2\n\n2: Test command: /testpythonbindings/build-cmake/run-in-dune-env \"python\" \"test2.py\"\n2: Test timeout computed to be: 3600\n2: Comparing build directories of installed dune modules with given build directories\n2: build dir /usr/local/lib/cmake/dune-common for module dune-common is expected to be unique across the given metadata - found /dune/dune-common/build-cmake\n2: Dune python package could not be found.\n2/2 Test #2: pytest2 ..........................***Skipped   0.10 sec\n\n100% tests passed, 0 tests failed out of 2\n\nLabel Time Summary:\npython    =   0.20 sec*proc (2 tests)\nquick     =   0.20 sec*proc (2 tests)\n\nTotal Test time (real) =   0.20 sec\n\nThe following tests did not run:\n          1 - pytest1 (Skipped)\n          2 - pytest2 (Skipped)\n\n```\n\n</details>\n\nNot removing the dune folder where dune-common is downloaded (commenting `RUN rm -rf dune/`) in `DockerImages/DockerFile` yields the same error.\n\nIt can be used via the docker image `rath3t/dunepythonbindings: installedmodulesNotDeletedBuildDir`.\n\n# Questions\n## Not installed python tests\n- Is this repository almost setup correctly in terms of python bindings? I got inspired by `dumux`, since I also want to have a module with its own namespace.\n- Why does the above tests complain with a reference to `/dune/dune-common/build-cmake` even when the module is installed and this folder is removed?\n- How to run the python tests correctly without installing the module projectnameTest? \n  - What needs to be present and how (installed dependencies) to circumvent the errors from above?\n  - Is there a magic combination of running these targets?\n        ```\n        build_tests\n        projectnameTest\n        _projectnameTest\n        test_python\n        build_python_tests\n        ```\n      I consider `metadata_install_python_package_dune,install_python_package_dune,install_python` as not needed for this question. Just from the naming they are use by installing the package\n\n## Installing the local python module to run python tests with installed module\nHow should the module be installed:\nFrom [dune-project.org/dev/adding_python](https://dune-project.org/dev/adding_python/ )\n`pip install -v --pre --log logfile --find-links file://$PWD/dist packagename==0.1` \nor using `metadata_install_python_package_dune,install_python_package_dune,install_python`  in some cobination.\n\nCan I then copy the test above `test1.py` and `test2.py` somewhere and then can I test it with `python test1.py` or does this still happen inside the venv and I have to write\n`run-in-dune-env python test1.py`? But where should the file `run-in-dune-env` be in this case, since all build directories are potentially deleted?\n\n\n\n\ngit-9bb0efaad99002ec03a51327413983d742dd3821\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "projectnameTest",
    "package_url": "https://pypi.org/project/projectnameTest/",
    "platform": null,
    "project_url": "https://pypi.org/project/projectnameTest/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/projectnameTest/0.1.dev20230215/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "",
    "version": "0.1.dev20230215",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16867408,
  "releases": {
    "0.1.dev20230214": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8958a6b3311aafd692fd2ba72892855f364deae206cc96e5c265158019cd382c",
          "md5": "0bb84432b4aa799da782e92f10fbf48b",
          "sha256": "ac5499c8682f41b1b76aa6b520cf34ef5fe13dafa0a463b366f17c0143b54fce"
        },
        "downloads": -1,
        "filename": "projectnameTest-0.1.dev20230214.tar.gz",
        "has_sig": false,
        "md5_digest": "0bb84432b4aa799da782e92f10fbf48b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 13537,
        "upload_time": "2023-02-14T16:34:10",
        "upload_time_iso_8601": "2023-02-14T16:34:10.110322Z",
        "url": "https://files.pythonhosted.org/packages/89/58/a6b3311aafd692fd2ba72892855f364deae206cc96e5c265158019cd382c/projectnameTest-0.1.dev20230214.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.dev20230215": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c871ac686e7cf3f8bcf248efac134129c3f20c8eda0a20b7825cdd249bde162f",
          "md5": "e1db3b1405dede16592156ca7d71cd67",
          "sha256": "de1f069f6ef0b5d008a4936744f8e059041a8d733d88a853849dfbfc6c7f5e52"
        },
        "downloads": -1,
        "filename": "projectnameTest-0.1.dev20230215.tar.gz",
        "has_sig": false,
        "md5_digest": "e1db3b1405dede16592156ca7d71cd67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 13532,
        "upload_time": "2023-02-15T07:02:22",
        "upload_time_iso_8601": "2023-02-15T07:02:22.367171Z",
        "url": "https://files.pythonhosted.org/packages/c8/71/ac686e7cf3f8bcf248efac134129c3f20c8eda0a20b7825cdd249bde162f/projectnameTest-0.1.dev20230215.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c871ac686e7cf3f8bcf248efac134129c3f20c8eda0a20b7825cdd249bde162f",
        "md5": "e1db3b1405dede16592156ca7d71cd67",
        "sha256": "de1f069f6ef0b5d008a4936744f8e059041a8d733d88a853849dfbfc6c7f5e52"
      },
      "downloads": -1,
      "filename": "projectnameTest-0.1.dev20230215.tar.gz",
      "has_sig": false,
      "md5_digest": "e1db3b1405dede16592156ca7d71cd67",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 13532,
      "upload_time": "2023-02-15T07:02:22",
      "upload_time_iso_8601": "2023-02-15T07:02:22.367171Z",
      "url": "https://files.pythonhosted.org/packages/c8/71/ac686e7cf3f8bcf248efac134129c3f20c8eda0a20b7825cdd249bde162f/projectnameTest-0.1.dev20230215.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}