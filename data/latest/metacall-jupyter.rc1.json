{
  "info": {
    "author": "Harsh Bardhan Mishra",
    "author_email": "erbeusgriffincasper@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# `MetaCall Jupyter Kernel`: Wrapper Kernel for MetaCall Core Library leveraging IPython and Jupyter\n\n![Python CI build](https://github.com/metacall/jupyter-kernel/actions/workflows/ci.yml/badge.svg)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/metacall/jupyter-kernel/master)\n![Version 0.1.0](https://img.shields.io/badge/Version-0.1.0-brightgreen.svg)\n![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)\n\n## Introduction\n\nMetaCall Jupyter Kernel is an open-source wrapper kernel that implements cross-language function calls through the [MetaCall Core](https://github.com/metacall/core) and the [Polyglot REPL](https://github.com/metacall/polyglot-repl). MetaCall Core is an open-source library that brings the polyglot programming experience to Developers. With MetaCall, developers can embed different programming languages through an easy-to-use high-level API.\n\nThe Kernel exposes the MetaCall Core API which can be loaded and launched through a Jupyter Notebook interface. With this Notebook, the\nusers can try out writing, mixing and embedding code in different programming languages. The project is available on [PyPi](https://pypi.org/project/metacall-jupyter/).\n\n## Key features\n\n`metacall_jupyter` is designed to be simple and concise with the following key features:\n\n- You can call functions in different programming languages, through cross-language function calls.\n- You use a high-level API to execute code in different programming languages.\n- Lists all the available functions and modules from the MetaCall's meta-object protocol.\n- Official support for Python and NodeJS with the Polyglot REPL.\n- Simple and intuitive user-experience centred around Polyglot development and components.\n\n## Installation\n\nIt is recommended to use a Virtual Environment to manage your dependencies and the application build. We will first start with setting up the Local Project Environment:\n\n```sh\ngit clone https://github.com/metacall/jupyter-kernel.git\nvirtualenv env\nsource env/bin/activate\n```\n\nNext we can download all the dependenices and setup the Kernel:\n\n```sh\ncurl -sL https://raw.githubusercontent.com/metacall/install/master/install.sh | sh\npython3 -m pip install --upgrade pip\npip3 install -r requirements.txt\npython3 setup.py install\npython3 -m metacall_jupyter.install\nmetacall npm install\n```\n\nStart your Jupyter Notebook by pushing the following command:\n\n```sh\npython3 -m metacall_jupyter.launcher\n```\n\nYou can pick `metacall_jupyter` from the drop-down options and start working with the Jupyter Notebook interface. Example Notebook are found [here](examples).\n\n## Docker\n\nBuild the image:\n\n```sh\ndocker build -t metacall/jupyter .\n```\n\nRun the image:\n\n```sh\ndocker run --rm --network=host -it metacall/jupyter\n```\n\n## Testing\n\nTo run the tests, push the following command:\n\n```sh\npytest test-kernel.py\n```\n\nThe script will run all the tests. To generate a coverage report, we are using the `pytest-cov` plugin, which can be invoked by pushing the following command:\n\n```sh\npytest --cov=metacall_jupyter test-kernel.py\n```\n\n## Documentation\n\nOur official documentation is available at [**metacall-jupyter-kernel.readthedocs.io**](https://metacall-jupyter-kernel.readthedocs.io/en/latest/index.html).\n\nTo edit the documentation you need a GitHub account. Once you have created one and logged in, you can edit any page by navigating to the corresponding file and clicking the edit (pen) icon. Alternatively create a fork, and then clone the repo and `cd` into the `docs` directory. Let us set the doucmentation up:\n\n```sh\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\nmake html\n```\n\nYou can now open the documentation site on `_build/html/index.html` in your browser. Make corresponding changes on the documentation site and then run `make clean && make html` to update the documentation. You can now create a pull request to get your changes merged into the upstream branch.\n\n## Contributing\n\nTo get started with contributing, check out the [Code of Conduct](CODE_OF_CONDUCT.md) and create an [Issue](https://github.com/metacall/jupyter-kernel/issues/new) to get started.\n\nIf you are new to Git & GitHub, you can find more information [here](https://metacall-jupyter-kernel.readthedocs.io/en/latest/contributing.html). It contains all the information about making the changes, linting, running the CI locally and submitting the pull request.\n\nYou can view the [Change Log](CHANGELOG.md) to see what has changed in the project, since its inception.\n\n## LICENSE\n\n[Apache-2.0 License](LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metacall/jupyter-kernel",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metacall-jupyter",
    "package_url": "https://pypi.org/project/metacall-jupyter/",
    "platform": "",
    "project_url": "https://pypi.org/project/metacall-jupyter/",
    "project_urls": {
      "Homepage": "https://github.com/metacall/jupyter-kernel"
    },
    "release_url": "https://pypi.org/project/metacall-jupyter/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Wrapper Kernel for MetaCall Core Library leveraging IPython and Jupyter",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11243212,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6c4d1ae9a291a57ad407a9ebea06a4c71c128fda5a98df96d32bb5e870749d2",
          "md5": "28327167eac2d7597610c5b98ccd439a",
          "sha256": "a3f66c99a5b8d57836cad431eefae10213c97c5ddf4574d7061e0c4a989724f1"
        },
        "downloads": -1,
        "filename": "metacall_jupyter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "28327167eac2d7597610c5b98ccd439a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7443,
        "upload_time": "2021-08-22T07:39:52",
        "upload_time_iso_8601": "2021-08-22T07:39:52.842443Z",
        "url": "https://files.pythonhosted.org/packages/f6/c4/d1ae9a291a57ad407a9ebea06a4c71c128fda5a98df96d32bb5e870749d2/metacall_jupyter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6c4d1ae9a291a57ad407a9ebea06a4c71c128fda5a98df96d32bb5e870749d2",
        "md5": "28327167eac2d7597610c5b98ccd439a",
        "sha256": "a3f66c99a5b8d57836cad431eefae10213c97c5ddf4574d7061e0c4a989724f1"
      },
      "downloads": -1,
      "filename": "metacall_jupyter-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "28327167eac2d7597610c5b98ccd439a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7443,
      "upload_time": "2021-08-22T07:39:52",
      "upload_time_iso_8601": "2021-08-22T07:39:52.842443Z",
      "url": "https://files.pythonhosted.org/packages/f6/c4/d1ae9a291a57ad407a9ebea06a4c71c128fda5a98df96d32bb5e870749d2/metacall_jupyter-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}