{
  "info": {
    "author": "Adam McDaniel",
    "author_email": "adam.mcdaniel17@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3"
    ],
    "description": "# small-vision\nA library for Vision Processing\n\n## What is small-vision?\n---\n\nSmall-vision is really just a library built on top of OpenCV. It abstracts away all of the awful C-like garbage, and makes it look more rust-like. Here's what I mean.\n\nIf I want to read an image from a file, show the original image, convert it to HSV, apply a mask, apply a gaussian blur, draw a circle around the largest blob, convert it back to BGR, and output the image, that can be done very concisely, like this:\n```python\nimport cv2\nfrom small_vision import *\n\nimage = cv2.imread(\"fuel.png\", 1)\n\n\n# show untouched image\n# convert to HSV\noriginal = Image(image).show(\"original\").convert_to_hsv()\n\n# HSV mask for neon yellow\nmask = original.get_mask(\n    [27, 100, 100],\n    [40, 255, 255]\n)\n\n# apply mask\n# blur 100%\n# draw circle around the largest blob\n# convert back to BGR\n# show image\noriginal.mask(mask).blur(1).draw_target(mask).convert_to_bgr().show(\"output\")\n\n\nwait_for_keypress()\nexit()\n```\n\nSee how easy that was?\n\n\nYou might be thinking that it's too high level to be useful. This is not so.\n\nYou can use methods like `get_blobs`, `get_largest_blob`, and several others to get the data you're looking for.\n\n## Documentation\n---\n\n```python\n# returns whether or not escape key pressed (True or False)\ndef escape_key_pressed()\n\n# waits for keypress\ndef wait_for_keypress()\n\n# destroys windows\ndef exit()\n\n\nclass Window:\n    # name the window\n    def __init__(self, name)\n\n    # adds a slider to the window with a given name\n    # set to the default value\n    # and with a max value of max\n    def add_slider(self, name, default=0, max=255)\n\n    # gets the value of a slider by name\n    def get_slider(self, name)\n\n    # gets a list of all slider values in the order you\n    # created the sliders\n    def get_sliders(self)\n\n\nclass Image:    \n    # Takes an opencv image (a numpy ndarray)\n    def __init__(self, image)\n\n    # returns a copy of the image that you\n    # can edit without affecting the original\n    def clone(self)\n\n    # Shows this image under a given window name and a size\n    def show(self, window_name, size=None)\n\n    # Resizes the image to a given size\n    def resize(self, size)\n\n    # gets rid of specs and closes holes in image\n    def smooth(self)\n\n    # gaussian blur on image using a percentage\n    def blur(self, blur_percentage)\n\n    # filter image with mask\n    def mask(self, mask)\n\n    # draw text with bottom_corner location\n    # (x and y are percentages of the screen width and height)\n    # color and size are optional\n    def draw_text(self, bottom_corner, text, color=(0, 255, 255), size=1)\n\n    # draw circle with center location\n    # (x and y are percentages of the screen width and height)\n    # and radius on image\n    # color and thickness are optional\n    def draw_circle(self, center, radius, color=(0, 255, 255), thickness=10)\n\n    # draws circle around the largest blob using a mask\n    # color and thickness are optional\n    def draw_target(self, mask, color=None, thickness=None)\n\n    # draws circles around each blob using a mask\n    # color and thickness are optional\n    def draw_targets(self, mask, color=None, thickness=None)\n\n    # returns image width\n    def get_width(self)\n\n    # returns image height\n    def get_height(self)\n\n    # returns image (width, height)\n    def get_size(self)\n\n    # get mask for values range a to b\n    # a and b are both lists 3 values long\n    # a is the lower limit for each channel in the image\n    # b is the upper limit for each channel in the image\n    def get_mask(self, a, b)\n\n    # returns a list of (x, y, radius) for each blob using a mask\n    def get_blobs(self, mask)\n\n    # returns a (x, y, radius) for the largest blob using a mask\n    def get_largest_blob(self, mask)\n\n    # converts image to HSV image\n    def convert_to_hsv(self)\n\n    # converts image to Gray image\n    def convert_to_gray(self)\n\n    # converts image to BGR image\n    def convert_to_bgr(self)\n```\n\n## Install Dependencies\n---\n```bash\npython3 -m pip install opencv-python\npython3 -m pip install numpy\n```\n\n## Future\n---\nI plan to develop this further to add features such as multithreaded, multiscaling template matching, and haarcascades. I also plan to add support for sliders.\n\nOther than that there's not much else to add, the base code is super small yet powerful, and flexible to change.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/adam-mcdaniel/small-vision",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "small-vision",
    "package_url": "https://pypi.org/project/small-vision/",
    "platform": "",
    "project_url": "https://pypi.org/project/small-vision/",
    "project_urls": {
      "Homepage": "http://github.com/adam-mcdaniel/small-vision"
    },
    "release_url": "https://pypi.org/project/small-vision/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A library for Vision Processing",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6404264,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cce09eceb33bd70789f8e84cac92edba20539e6145684c59210efe31e12eef5",
          "md5": "d5409f6127e9ff2cead9681f4a79211c",
          "sha256": "10d5f27d4f8e2d9afe4e15bb9a0edd3f141175dc8b0a6e0575a9bbfc9e640b47"
        },
        "downloads": -1,
        "filename": "small-vision-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5409f6127e9ff2cead9681f4a79211c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "<4",
        "size": 8486,
        "upload_time": "2020-01-06T20:11:53",
        "upload_time_iso_8601": "2020-01-06T20:11:53.063455Z",
        "url": "https://files.pythonhosted.org/packages/6c/ce/09eceb33bd70789f8e84cac92edba20539e6145684c59210efe31e12eef5/small-vision-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f2b8367f654f16bf08589231574c4189b6c07f4fc3fe8d76c8d019d7154fa0a",
          "md5": "6847b962212ee7f2e1eb80541ec32ce2",
          "sha256": "e928ae7b98d1e4e3c786ee0be8d7f3ab9092331ba7869060deb70e0e55358957"
        },
        "downloads": -1,
        "filename": "small-vision-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6847b962212ee7f2e1eb80541ec32ce2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5113,
        "upload_time": "2020-01-06T20:16:54",
        "upload_time_iso_8601": "2020-01-06T20:16:54.796136Z",
        "url": "https://files.pythonhosted.org/packages/0f/2b/8367f654f16bf08589231574c4189b6c07f4fc3fe8d76c8d019d7154fa0a/small-vision-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36e4648eca640afc96e8941f0fca49dfd81f04af29f30764a631237d91c1ae8a",
          "md5": "d91948c2e1b5c3feccf28db60e267d22",
          "sha256": "42a4223803ea89fc9f462ecae762f10d7c4c01be757dfe8f31ab00a057c6b3bd"
        },
        "downloads": -1,
        "filename": "small-vision-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d91948c2e1b5c3feccf28db60e267d22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5107,
        "upload_time": "2020-01-06T20:18:02",
        "upload_time_iso_8601": "2020-01-06T20:18:02.799607Z",
        "url": "https://files.pythonhosted.org/packages/36/e4/648eca640afc96e8941f0fca49dfd81f04af29f30764a631237d91c1ae8a/small-vision-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36e4648eca640afc96e8941f0fca49dfd81f04af29f30764a631237d91c1ae8a",
        "md5": "d91948c2e1b5c3feccf28db60e267d22",
        "sha256": "42a4223803ea89fc9f462ecae762f10d7c4c01be757dfe8f31ab00a057c6b3bd"
      },
      "downloads": -1,
      "filename": "small-vision-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d91948c2e1b5c3feccf28db60e267d22",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5107,
      "upload_time": "2020-01-06T20:18:02",
      "upload_time_iso_8601": "2020-01-06T20:18:02.799607Z",
      "url": "https://files.pythonhosted.org/packages/36/e4/648eca640afc96e8941f0fca49dfd81f04af29f30764a631237d91c1ae8a/small-vision-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}