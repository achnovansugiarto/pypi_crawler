{
  "info": {
    "author": "Jin BENIYAMA",
    "author_email": "beniyama@ioa.s.u-tokyo.ac.jp",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Moving Object Photometry (movphot)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[developer mail](mailto:beniyama@ioa.s.u-tokyo.ac.jp)\n\n## Overview\n\nPhotometry of moving objects could be done in this repository.\nThough optimized for Seimei/TriCCS data,\nyou can apply it for imaging data taken with\nother telescopes (MITSuME, MuSaSHI, MuSCUT, etc.)\n\nSuccessive analyses below are done using other scripts.\nSee README.md in each directory for detail.\n\n- Periodic analysis\nUse `package4peri`(in preparation).\n- Visualization (Plot object light curve, comparison light curve, etc.)\nand Spectral type estimation\nUse `package4vis`(in preparation) to plot lightcurve, color-color diagrams and\nreflectance on Bus-DeMeo templates.\n\n### Procedure\n\n1. Standard reduction\ndark(bias) subtraction, flat fielding, split fits from 3d to 2d\nUse `TriCCS Data Reduction (TDR)` ([bitbucket](https://bitbucket.org/jin_beniyama/triccs-data-reduction/src/master/)).\n2. Create a comparison star catalog\n3. Create standard location text (x, y, nframe)\n4. Photometry\n\n## Installing\n```\n# Install from PyPI\npip install movphot\n```\nor\n```\n# Install with `setup.py`\ngit clone https://jin_beniyama@bitbucket.org/jin_beniyama/movphot.git\npython setup.py install\n```\n\n## Usage\n\nHere 3-bands observation by Seimei/TriCCS is assumed.\nSo `psdb.py` is used to handling the database for comparison stars.\nIf you need other catalogs for data taken by other instruments,\nyou can also use `gaiadb.py` or other scripts.\n\n### 0. Standard reduction\n\nInput fits data should be 2-dimensional even taken with TriCCS.\nStandard reduction and splitting fits could be done using scripts in\n`TriCCS Data Reduction (TDR)` ([bitbucket](https://bitbucket.org/jin_beniyama/triccs-data-reduction/src/master/)).\n\n\n### 1. Create a comparison star catalog\n\nThe first step before photometry is to construct a homemade catalog database.\nWhen your fits file has almost correct WCS coordinates,\ntype commands below.\n\nAt first, create a catalog database you are interested in.\nWhen you used Seimei/TriCCS(Pan-STARRS system), create\nPan-STARRS catalog database as `ps.db` in `~/db4movphot/` (hereinafter `db`).\nPlease specify a directory to change the path of the database\nin `psdb.py` and in `phot_color` as optional arguments.\nThe database should be created manually until the automated function will be\nimplemented in near future.\n\n```\n[usage]\n# Create database (once)\npsdb.py dbstart --first\n# Create new tables\npsdb.py create --table (table name)\n# Insert stars to database\npsdb.py insert --tablename (table name) --ra (ra in degree) --dec (dec in degree)\n--radius (fov radius in degree) --magmin (minimum magnitude) --magmax (maximum magnitude)\n# Check stars in database\npsdb.py extract --tablename (table name) --ra (ra in degree) --dec (dec in degree)\n--radius (fov radius in degree) --magmin (minimum magnitude) --magmax (maximum magnitude)\n\n[example]\n# Create 2021DX1 table.\n# Observed locations are below.\npsdb.py create --table _2021DX1\npsdb.py insert --table _2021DX1 --ra 208.87 --dec 44.68 --radius 0.2 --magmin 12 --magmax 21\n```\n\n### 2. Create standard location text\n\nThe next step is registering target locations.\nEphemerides of newly discovered fast-moving (v > a few arcsec/s) asteroids\nare sometimes not perfect.\nIn this script, use some observed points of the target in the 2nd band and\ninterpolate and extrapolate them to determine photometry circle locations.\nIf the target is close to any stars, it is better to remove it as an outlier.\nBut `eflag` is useful to remove contaminations after photometry.\n\nAll information needed to create location text is x, y (pixel number) and\nnframe (number of frames).\nThe format example\nwhen moving object is at (100,200) and (150, 230) in 3rd and 13th frames.\n\n```\n[location_band2.txt]\nx y nframe\n100 200 3\n150 230 13\n```\n\n### 3. Photometry\n\nPhotometry is done using `ps.db`, `location.txt` and some input parameters.\nTypical FWHM is needed (by IRAF projection etc.)\nand should be converted to pixel scale by the observer.\nThere are 2 photometry types:\n\n1. app (circle aperture photometry)\n2. iso (isophotal photometry, in prep.)\n\nBefore photometry, create a fits list, for example, by\n\n```\ncat *(band unique character)*.fits > fitslist_band.txt\n```\n\nand save as `fitslist_band1.txt`, `fitslist_band2.txt` and `fitslist_band3.txt`.\n\nThe photometry command examples are below.\nIf the database is not in the current directory, please specify the `db` path.\n2 parameters, `refmagmax` and `refmagmin`, are used to\n\n1. create a mask to calculate `eflag` values (both target and comparison stars)\n2. do comparison star photometry\n.\n\n```\n[usage]\nphot_color (obj) (instrumental) (fitslist_band1.txt) (fitslist_band2.txt) (fitslist_band3.txt)\n(fitsdir) (location_band2.txt) --bands (band1) (band2) (band3) --catalog (catalogname)\n--table (tablename) --radius_ref (photometry radius of comparison stars)\n--radius_obj (photometry radius of object) --refphot (photometry type of comparison stars)\n--objphot (photmetry type of comparison stars)\n--refmagmax (maximum comparison magnitude) --refmagmin (minimum comparison magnitude)\n\n[example]\nphotcolor 2021DX1 TriCCS glist9.txt rlist9.txt zlist9.txt wcs\nstandardr9.txt --bands g r z --catalog ps --table _2021DX1 --radius_ref 25\n--radius_obj 25 --refphot app --objphot app --refmagmax 20 --refmagmin 12\n```\n\nThe result is saved as `photometry_result.txt`.\nVisualization and detail analyses can be done in other repositories in the overview.\nUnfavorable objects (such as too redder or low Quality) should be removed\nat that time.\n\n## Visualization\n\n1. Plot Color Term (CT), Color Transformation Gradient (CTG), Color\nTransformation Intercept (CTI) and object light curve by `plot_colorterm.py`\n\nThese values are important for absolute calibrations if standard stars\nare different in each frames (due to fast-moving etc.)\n\nCommand,\n\n```\n[usage]\nplot_colorterm.py (objname) photometric_result.csv\n--bands (band1) (bands2) (band3)\n\n[example]\nplot_colorterm.py 2021EX1 photometric_result.csv\n--bands g r i\n```\n\ngenerates\n\n- figure: `mag_inst - mag_catalog` vs `color_catalog`\n- figure: `color_instrument` vs `color_catalog`\n- figure: magnitude light curve\n- figure: color light curve\n- csv: time series result including colors\n.\n\n## Dependencies\n\nThis library is depending on `NumPy`, `SciPy` and `SEP`.\nScripts are developed on `Python 3.7.10`, `NumPy 1.19.2`, `SciPy 1.6.1`\nand `SEP 1.0.3`.\n\n## LICENCE\n\nThis software is released under the MIT License.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jin_beniyama/movphot/src/master/",
    "keywords": "",
    "license": "",
    "maintainer": "Jin BENIYAMA",
    "maintainer_email": "beniyama@ioa.s.u-tokyo.ac.jp",
    "name": "movphot",
    "package_url": "https://pypi.org/project/movphot/",
    "platform": "",
    "project_url": "https://pypi.org/project/movphot/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/jin_beniyama/movphot/src/master/"
    },
    "release_url": "https://pypi.org/project/movphot/0.0.1/",
    "requires_dist": [
      "astropy",
      "astroquery"
    ],
    "requires_python": "",
    "summary": "moving object photometry",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11066400,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe37d5bc5df478d0d88a46056c80a725e85498af9f970b79c1bf8001f1adfb56",
          "md5": "73d96d0e283d9910fba4f0ef6e783874",
          "sha256": "f6e8ddc058c236c2f662d3eb4458752cbb3320a340530051135a938a96a2efcb"
        },
        "downloads": -1,
        "filename": "movphot-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73d96d0e283d9910fba4f0ef6e783874",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34386,
        "upload_time": "2021-08-02T05:02:32",
        "upload_time_iso_8601": "2021-08-02T05:02:32.316706Z",
        "url": "https://files.pythonhosted.org/packages/fe/37/d5bc5df478d0d88a46056c80a725e85498af9f970b79c1bf8001f1adfb56/movphot-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe37d5bc5df478d0d88a46056c80a725e85498af9f970b79c1bf8001f1adfb56",
        "md5": "73d96d0e283d9910fba4f0ef6e783874",
        "sha256": "f6e8ddc058c236c2f662d3eb4458752cbb3320a340530051135a938a96a2efcb"
      },
      "downloads": -1,
      "filename": "movphot-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73d96d0e283d9910fba4f0ef6e783874",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34386,
      "upload_time": "2021-08-02T05:02:32",
      "upload_time_iso_8601": "2021-08-02T05:02:32.316706Z",
      "url": "https://files.pythonhosted.org/packages/fe/37/d5bc5df478d0d88a46056c80a725e85498af9f970b79c1bf8001f1adfb56/movphot-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}