{
  "info": {
    "author": "Shivam Singh",
    "author_email": "Shivamsingh2111@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# SOD-BASNET-Py\n# BASNet: Boundary-Aware Salient Object Detection\n\n- Deep Convolutional Neural Networks have been adopted for salient object detection and achieved the state-of-the-art performance. Most of the previous works however focus on region accuracy but not on the boundary quality.\n- In this project, we propose a predict-refine architecture, BASNet, and a new hybrid loss for Boundary-Aware Salient object detection. Specifically, the architecture is composed of a densely supervised Encoder-Decoder network and a residual refinement module, which are respectively in charge of saliency prediction and saliency map refinement.\n- The Research paper referred  is [BASNet: Boundary-Aware Salient Object Detection](https://openaccess.thecvf.com/content_CVPR_2019/papers/Qin_BASNet_Boundary-Aware_Salient_Object_Detection_CVPR_2019_paper.pdf \"BASNet: Boundary-Aware Salient Object Detection\") \n\n## Objective \n- The Official Code for the Basnet Model is provided by the authors on the [github](https://github.com/xuebinqin/BASNet \"github\").\n- The Official Deep Learning model is made using Pytorch , my Goal is to create a similar model using tensorflow.\n- Why ? Whilst Pytorch provide better developer experience and error handeling, I find Tensorflow to be a great ML Framework to work with for Beginners .  \n- So the objective for this repo is to create Basnet Model using Tensorflow.\n\n## Architecture\n- The Architecture Proposed by the authors is predict-refine architecture.\n- The Author have used  Transfer Learning  to improve model performance . They Used First 4 layers of the resnet34 model which is pretrained in imagenet dataset.\n- But for the sake of understanding abstract architecture of the Basnet model I haven't used the transfer learning method , instead created each layer individually.\n\n## Loss\n- The hybrid loss guides the network to learn the transformation between the input image and the ground truth in a three-level hierarchy â€“ pixel-, patch- and map- level â€“ by fusing Binary Cross Entropy (BCE), Structural SIMilarity (SSIM) and Intersectionover- Union (IoU) losses.\n## Thank You \n- This is my attempt to build the Basnet model using the research paper . If you find any error or mistakes let me know . Love all the feedbacks.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Shivam-21-11/Basnet-Model_Package",
    "keywords": "Machine Learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SODBASNET",
    "package_url": "https://pypi.org/project/SODBASNET/",
    "platform": null,
    "project_url": "https://pypi.org/project/SODBASNET/",
    "project_urls": {
      "Homepage": "https://github.com/Shivam-21-11/Basnet-Model_Package"
    },
    "release_url": "https://pypi.org/project/SODBASNET/0.0.5/",
    "requires_dist": [
      "tensorflow",
      "numpy",
      "keras"
    ],
    "requires_python": "",
    "summary": "BASNET model created using tensorflow.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15324343,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbd971d95615298747327165c79f95c42bd93c6ea35bfac7d91334f7b04514ed",
          "md5": "d6219bf65bb75e7cbabf90185d4351e1",
          "sha256": "6d9e330766785f2c77895ab017dc4407f2fecf931db6bcec4cc4e9d4483db6e5"
        },
        "downloads": -1,
        "filename": "SODBASNET-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6219bf65bb75e7cbabf90185d4351e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7557,
        "upload_time": "2022-09-03T05:57:18",
        "upload_time_iso_8601": "2022-09-03T05:57:18.826493Z",
        "url": "https://files.pythonhosted.org/packages/bb/d9/71d95615298747327165c79f95c42bd93c6ea35bfac7d91334f7b04514ed/SODBASNET-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d749033b86b204aab88e799160011d344a4c9700ea212133668d3e5fafb1e3bb",
          "md5": "5852319c3611413c18c537ec9dd31754",
          "sha256": "70e4c3ed1c5ffb9506aa77d66e1523c5d02c83396fe1c2fb1c3bb6154fb64274"
        },
        "downloads": -1,
        "filename": "SODBASNET-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5852319c3611413c18c537ec9dd31754",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6139,
        "upload_time": "2022-09-03T05:57:20",
        "upload_time_iso_8601": "2022-09-03T05:57:20.676971Z",
        "url": "https://files.pythonhosted.org/packages/d7/49/033b86b204aab88e799160011d344a4c9700ea212133668d3e5fafb1e3bb/SODBASNET-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbd971d95615298747327165c79f95c42bd93c6ea35bfac7d91334f7b04514ed",
        "md5": "d6219bf65bb75e7cbabf90185d4351e1",
        "sha256": "6d9e330766785f2c77895ab017dc4407f2fecf931db6bcec4cc4e9d4483db6e5"
      },
      "downloads": -1,
      "filename": "SODBASNET-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6219bf65bb75e7cbabf90185d4351e1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7557,
      "upload_time": "2022-09-03T05:57:18",
      "upload_time_iso_8601": "2022-09-03T05:57:18.826493Z",
      "url": "https://files.pythonhosted.org/packages/bb/d9/71d95615298747327165c79f95c42bd93c6ea35bfac7d91334f7b04514ed/SODBASNET-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d749033b86b204aab88e799160011d344a4c9700ea212133668d3e5fafb1e3bb",
        "md5": "5852319c3611413c18c537ec9dd31754",
        "sha256": "70e4c3ed1c5ffb9506aa77d66e1523c5d02c83396fe1c2fb1c3bb6154fb64274"
      },
      "downloads": -1,
      "filename": "SODBASNET-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "5852319c3611413c18c537ec9dd31754",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6139,
      "upload_time": "2022-09-03T05:57:20",
      "upload_time_iso_8601": "2022-09-03T05:57:20.676971Z",
      "url": "https://files.pythonhosted.org/packages/d7/49/033b86b204aab88e799160011d344a4c9700ea212133668d3e5fafb1e3bb/SODBASNET-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}