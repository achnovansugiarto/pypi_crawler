{
  "info": {
    "author": "Alex Liabakh",
    "author_email": "alex.lyabakh@occipital.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "[![PyPI version fury.io](https://badge.fury.io/py/django-consistency-model.svg)](https://pypi.python.org/pypi/django-consistency-model/) \n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/django-consistency-model.svg)](https://pypi.python.org/pypi/django-consistency-model/)\n[![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-consistency-model)](https://pypi.python.org/pypi/django-consistency-model/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# Django Consistency Model\n\nDCM is a set of tools that helps you to keep your data in your Django Models consistent.\n\n![Django Consistency Model](https://github.com/occipital/django-consistency-model/blob/master/title-800.png)\n\n## Motivation\n\n* You have a lot of legacy and inconsistent data in your project and you need to clean it out\n* You want to monitor the broken data\n* You are looking for a very simple solution.\n\n## Quick Start\n\nInstall the package:\n\n```bash\npip install django-consistency-model\n```\n\nAdd new app into `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = (\n    # ...\n    \"consistency_model\",\n)\n```\n\nAdd your first validator using decorator consistency_validator:\n\n```python\nfrom decimal import Decimal\nfrom django.db import models\nfrom consistency_model import consistency_validator\n\nclass Order(models.Model):\n    total = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n    refund = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n    revenue = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n\n    @consistency_validator\n    def validate_revenue(self):\n        assert self.revenue == self.total - self.refund, \"revenue = total - refund\"\n```\n\nRun command to check validators:\n\n```bash\n./manage.py consistency_model_check\n```\n\n## What if I need to check more than one condition in one validator\n\nThe first thing you may think of is using more than one validator, and it is common to have more than one validator (for example, one validator per field).\n\nSometimes, you want to check more than one aspect in one validator or have a complex calculation you don't want to do for every validator.\n\nFor those cases, you may want to use function `consistency_error`. It shows the system an error without raising an exception, so one validator can generate more than one error.\n\n```python\nfrom decimal import Decimal\n\nfrom django.db import models\n\nfrom consistency_model import consistency_validator, consistency_error\n\n\nclass Order(models.Model):\n    total = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n    refund = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n    revenue = models.DecimalField(\n        default=Decimal(\"0.00\"), decimal_places=2, max_digits=10\n    )\n\n    @consistency_validator\n    def validate_total(self):\n        assert self.total >= 0, \"can't be negative\"\n\n    @consistency_validator\n    def validate_revenue(self):\n        if self.revenue < 0:\n            consistency_error(\"can't be negative\", \"negative\")\n\n        if self.revenue != self.total - self.refund:\n            consistency_error(\"revenue = total - refund\", \"formula\")\n```\n\nAs you can see, one validator (`validate_revenue`) checks two factors of the field revenue.\n\nThe function `consistency_error` has two arguments - message and name(optional). The name is a unique value for the validator and will be used in monitoring.\n\n## I don't want to check all of the data, but only one model instead.\n\nWhen you add a new validator, you don't want to check all the data. You want to test only one validator instead.\n\nArgument `--filter` can help you with that\n\n```bash\n./manage.py consistency_model_check --filter storeapp.Order.validate_revenue\n```\n\nCheck only one model\n\n```bash\n./manage.py consistency_model_check --filter storeapp.Order\n```\n\nCheck the model but excluding one validator. Argument `--exclude` excludes validator from validation circle.\n\n```bash\n./manage.py consistency_model_check --filter storeapp.Order --exclude storeapp.Order.validate_revenue\n```\n\nCheck only one object. Using `--object` you can check a specific object in db.\n\n```bash\n./manage.py consistency_model_check --object storeapp.Order.56\n```\n\nYou can combine `--object` with `--filter` and `--exclude` as well.\n\n## I want to monitor my DB on consistency constantly.\n\nThe idea of consistency monitoring is very simple. You add the command `consistency_model_monitoring` to your cron. The command checks DB and saves all of the errors in `ConsistencyFail`. Nothing is too complicated.\n\nAs the result, you can see all of the inconsistency errors in admin panel. Or you can connect `pre_save` signal to `consistency_model.ConsistencyFail` and send an email notification in case of any new inconsistency.\n\n## Monitoring configuration.\n\nA typical situation is when you don't want to monitor all the data but only recently added/updated data. By default, the system checks only 10k recent IDs, but you have a lot of flexibility to change that with function `register_consistency`.\n\nLet's take a look of how one can be used.\n\nFor model `Order` you want to check only 10 last ids.\n\n```python\nfrom consistency_model import register_consistency\nregister_consistency(Order, limit=10)\n```\n\n`register_consistency` can be used as class decorator\n\n```python\nfrom consistency_model import register_consistency\n\n@register_consistency(limit=10)\nclass Order(models.Model):\n    # ...\n```\n\nyou can order not by id, but `modified_on` field\n\n```python\nfrom consistency_model import register_consistency\nregister_consistency(Order, order_by='modified_on')\n```\n\nyou can use a consistency checker class to overwrite the whole query for consistency check\n\n```python\nfrom django.db import models\n\nfrom consistency_model import register_consistency, ConsistencyChecker\n\n\nclass Order(models.Model):\n    is_legacy = models.BooleanField(dafult=False)\n    # ...\n\n\nclass OrderConsistencyChecker(ConsistencyChecker):\n    limit = None # I don't want to have any limitation\n    order_by = 'modified_on'\n\n    def get_queryset(self):\n        return self.cls.objects.filter(is_legacy=False)\n\nregister_consistency(Order, OrderConsistencyChecker)\n```\n\nAgain, it is possible to be used as class decorator for any  on both classes.\n\nFor Model:\n\n```python\nfrom django.db import models\n\nfrom consistency_model import register_consistency, ConsistencyChecker\n\n\nclass OrderConsistencyChecker(ConsistencyChecker):\n    # ...\n\n@register_consistency(OrderConsistencyChecker)\nclass Order(models.Model):\n    is_legacy = models.BooleanField(dafult=False)\n    # ...\n\n```\n\nFor Checker:\n\n```python\nfrom django.db import models\n\nfrom consistency_model import register_consistency, ConsistencyChecker\n\n\nclass Order(models.Model):\n    is_legacy = models.BooleanField(dafult=False)\n    # ...\n\n\n@register_consistency(Order)\nclass OrderConsistencyChecker(ConsistencyChecker):\n    # ...\n\n```\n\n## Settings\n\n`CONSISTENCY_DEFAULT_MONITORING_LIMIT` (default: `10_000`) - default limit rows per model\n\n`CONSISTENCY_DEFAULT_ORDER_BY` (default: `\"-id\"`) - defaul model ordering for monitoring\n\n`CONSISTENCY_DEFAULT_CHECKER` (default: `\"consistency_model.tools.ConsistencyChecker\"`) - default class for consistency monitoring\n\nIf you have `pid` package installed, one will be used for monitoring command to prevent running multiple monitpring process. The following settings will be used for monitoring\n\n`CONSISTENCY_PID_MONITORING_FILENAME` (default: `\"consistency_monitoring\"`) \n\n`CONSISTENCY_PID_MONITORING_FOLDER` (default: `None`) - folder the pid file is stored. `tempfile.gettempdir()` is using if it is `None`\n\n## Contributing\n\nWeâ€™re looking to grow the project and get more contributors especially to support more languages/versions. Weâ€™d also like to get the .pre-commit-hooks.yaml files added to popular linters without maintaining forks / mirrors.\n\nFeel free to submit bug reports, pull requests, and feature requests.\n\nTools:\n\n* [tox](https://tox.wiki/en/latest/)\n* [pre-commit](https://pre-commit.com/)\n* [black](https://github.com/psf/black)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/occipital/django-consistency-model",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-consistency-model",
    "package_url": "https://pypi.org/project/django-consistency-model/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-consistency-model/",
    "project_urls": {
      "Homepage": "https://github.com/occipital/django-consistency-model"
    },
    "release_url": "https://pypi.org/project/django-consistency-model/0.1.1/",
    "requires_dist": [
      "django (>=2.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "DCM is a set of tools that helps you to keep your data in your Django Models consistent.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12541822,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23eca8b9857d7ec8fbbd7a60bdad33ff815a4f4bc9f351d25b51cdf06b9623ed",
          "md5": "8e4b70875d9b50c4342e393333257af4",
          "sha256": "57e3a9c51182a404e887e24d66d5cc23a52f532516f69725796cd9cd9cfb2713"
        },
        "downloads": -1,
        "filename": "django_consistency_model-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e4b70875d9b50c4342e393333257af4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12608,
        "upload_time": "2022-01-11T15:08:35",
        "upload_time_iso_8601": "2022-01-11T15:08:35.223989Z",
        "url": "https://files.pythonhosted.org/packages/23/ec/a8b9857d7ec8fbbd7a60bdad33ff815a4f4bc9f351d25b51cdf06b9623ed/django_consistency_model-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67cd961d1049a3f8ee2c90dc29cbce3efcb8a767c30cf98813c5efef04a46a96",
          "md5": "3d317cb3662855cfd9c9b62fe4b3df75",
          "sha256": "0d3cbbb00dbb4c372ac93f6dd7c3227d21bb931e228d87df2d86acf86bc36a4e"
        },
        "downloads": -1,
        "filename": "django-consistency-model-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d317cb3662855cfd9c9b62fe4b3df75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13423,
        "upload_time": "2022-01-11T15:08:37",
        "upload_time_iso_8601": "2022-01-11T15:08:37.271243Z",
        "url": "https://files.pythonhosted.org/packages/67/cd/961d1049a3f8ee2c90dc29cbce3efcb8a767c30cf98813c5efef04a46a96/django-consistency-model-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "844c226fbe1aa09ae8004523ff1791c86b943b58a6e6a45857a728a4b7060c3f",
          "md5": "b37cf6d85444d1f3b8eb07f128c5bc72",
          "sha256": "8274ddcbcb7b9c81b181cf363d69d26c7dab08628d024aa6aa7eeca063b8047b"
        },
        "downloads": -1,
        "filename": "django_consistency_model-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b37cf6d85444d1f3b8eb07f128c5bc72",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 12780,
        "upload_time": "2022-01-11T17:09:03",
        "upload_time_iso_8601": "2022-01-11T17:09:03.143765Z",
        "url": "https://files.pythonhosted.org/packages/84/4c/226fbe1aa09ae8004523ff1791c86b943b58a6e6a45857a728a4b7060c3f/django_consistency_model-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f646730f865cbd1a025b8c4e572901f2e80eafdd4524c5b42d274b2132c70101",
          "md5": "4ed2205836d53d1eecfc0a08fda25d8a",
          "sha256": "1b28c62196c734770d75c4bbe4ccb54dfbdd2499efa823612a4824d35cec1747"
        },
        "downloads": -1,
        "filename": "django-consistency-model-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ed2205836d53d1eecfc0a08fda25d8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13664,
        "upload_time": "2022-01-11T17:09:05",
        "upload_time_iso_8601": "2022-01-11T17:09:05.185875Z",
        "url": "https://files.pythonhosted.org/packages/f6/46/730f865cbd1a025b8c4e572901f2e80eafdd4524c5b42d274b2132c70101/django-consistency-model-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "844c226fbe1aa09ae8004523ff1791c86b943b58a6e6a45857a728a4b7060c3f",
        "md5": "b37cf6d85444d1f3b8eb07f128c5bc72",
        "sha256": "8274ddcbcb7b9c81b181cf363d69d26c7dab08628d024aa6aa7eeca063b8047b"
      },
      "downloads": -1,
      "filename": "django_consistency_model-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b37cf6d85444d1f3b8eb07f128c5bc72",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 12780,
      "upload_time": "2022-01-11T17:09:03",
      "upload_time_iso_8601": "2022-01-11T17:09:03.143765Z",
      "url": "https://files.pythonhosted.org/packages/84/4c/226fbe1aa09ae8004523ff1791c86b943b58a6e6a45857a728a4b7060c3f/django_consistency_model-0.1.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f646730f865cbd1a025b8c4e572901f2e80eafdd4524c5b42d274b2132c70101",
        "md5": "4ed2205836d53d1eecfc0a08fda25d8a",
        "sha256": "1b28c62196c734770d75c4bbe4ccb54dfbdd2499efa823612a4824d35cec1747"
      },
      "downloads": -1,
      "filename": "django-consistency-model-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4ed2205836d53d1eecfc0a08fda25d8a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13664,
      "upload_time": "2022-01-11T17:09:05",
      "upload_time_iso_8601": "2022-01-11T17:09:05.185875Z",
      "url": "https://files.pythonhosted.org/packages/f6/46/730f865cbd1a025b8c4e572901f2e80eafdd4524c5b42d274b2132c70101/django-consistency-model-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}