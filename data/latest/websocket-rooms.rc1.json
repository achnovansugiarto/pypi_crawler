{
  "info": {
    "author": "Yoel Bassin",
    "author_email": "bassin.yoel@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Web Environment",
      "Framework :: AnyIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "![ci workflow](https://github.com/yoelbassin/Websocket-Rooms/actions/workflows/ci.yml/badge.svg)\n[![PyPI Version](https://img.shields.io/pypi/v/websocket-rooms?label=pypi%20package)](https://pypi.python.org/pypi/Websocket-Rooms)\n[![GitHub](https://img.shields.io/github/license/yoelbassin/Websocket-Rooms)](https://github.com/yoelbassin/Websocket-Rooms/blob/dev/LICENSE)\n<!-- ![PyPI - Downloads](https://img.shields.io/pypi/dm/PACKAGE) -->\n# Websocket Rooms: `websocket_rooms`\n\nA python library for creating WebSocket rooms, for message sharing or data distribution to multiple connections.\n\nThis library was created after building several real-time web apps and implementing the same mechanism to broadcast real-time messages between clients listening for the same real-time telemetries.\nThe library simplifies the solution for this issue and proposes a simpler way to handle multiple WebSocket clients that act the same way.\n\n## Basic use:\nLet's create a chatroom where everyone can post their messages:\n```python\nfrom websocket_rooms import Room\n\nchat_room = Room()\n\n@chat_room.on_receive(\"json\")\nasync def on_receive(room: Room, websocket: WebSocket, message: Any) -> None:\n    await room.push_json(message)\n\n@chat_room.on_connection\nasync def on_chatroom_connection(room: Room, websocket: WebSocket) -> None:\n    logging.info(\"{} joined the chat room\".format(websocket.client.host))\n\n@chat_app.websocket(\"/chat\")\nasync def connect_websocket(websocket: WebSocket):\n    await chat_room.connect(websocket)\n```\n## More advanced usage\n\nExample of a more advanced use case, with modification to the `Room` base class:\nSuppose a class `RoomWithClientId`, where each WebSocket has a `client_id` associated with it, which it receives on connection:\n```python\nclass RoomWithClientId(Room):\n    def __init__(self, base_room: Optional[BaseRoom] = None) -> None:\n        super().__init__(base_room)\n        self._id_to_ws = {}\n\n    async def connect(self, websocket: WebSocket, client_id: int) -> None:\n        self._id_to_ws[websocket] = client_id\n        await super().connect(websocket)\n\n    def get_client_id(self, websocket: WebSocket) -> int:\n        return self._id_to_ws.get(websocket)\n\n\nchat_room = RoomWithClientId()\n\n@chat_room.on_receive(\"json\")\nasync def on_chatroom_receive(room: RoomWithClientId, websocket: WebSocket, message: Any) -> None:\n    await room.push_json(message)\n\n@chat_room.on_connection\nasync def on_chatroom_connection(room: RoomWithClientId, websocket: WebSocket, client_id: int) -> None:\n    logging.info(\"{} joined the chat room\".format(client_id))\n\n@app.websocket(\"/chat/{client_id}\")\nasync def connect_websocket(websocket: WebSocket, client_id: int):\n    await chat_room.connect(websocket, client_id)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yoelbassin/Websocket-Rooms",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "websocket-rooms",
    "package_url": "https://pypi.org/project/websocket-rooms/",
    "platform": null,
    "project_url": "https://pypi.org/project/websocket-rooms/",
    "project_urls": {
      "Homepage": "https://github.com/yoelbassin/Websocket-Rooms"
    },
    "release_url": "https://pypi.org/project/websocket-rooms/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python library for simple websocket managment",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14415679,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d0f9eb5bc3ea2c7e9004c18c95684e0bbe7c64a1d570cce531ddee191d29657",
          "md5": "41a7aa5926730368f80e7060398d3ccf",
          "sha256": "ed029bc6bcb84efd7b3eb41dcbc466427cc2bbf44e29a18dfaca9ce7262882a9"
        },
        "downloads": -1,
        "filename": "websocket-rooms-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41a7aa5926730368f80e7060398d3ccf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8175,
        "upload_time": "2022-07-12T21:32:58",
        "upload_time_iso_8601": "2022-07-12T21:32:58.329989Z",
        "url": "https://files.pythonhosted.org/packages/6d/0f/9eb5bc3ea2c7e9004c18c95684e0bbe7c64a1d570cce531ddee191d29657/websocket-rooms-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d0f9eb5bc3ea2c7e9004c18c95684e0bbe7c64a1d570cce531ddee191d29657",
        "md5": "41a7aa5926730368f80e7060398d3ccf",
        "sha256": "ed029bc6bcb84efd7b3eb41dcbc466427cc2bbf44e29a18dfaca9ce7262882a9"
      },
      "downloads": -1,
      "filename": "websocket-rooms-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41a7aa5926730368f80e7060398d3ccf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8175,
      "upload_time": "2022-07-12T21:32:58",
      "upload_time_iso_8601": "2022-07-12T21:32:58.329989Z",
      "url": "https://files.pythonhosted.org/packages/6d/0f/9eb5bc3ea2c7e9004c18c95684e0bbe7c64a1d570cce531ddee191d29657/websocket-rooms-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}