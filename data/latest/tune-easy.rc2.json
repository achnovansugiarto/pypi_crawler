{
  "info": {
    "author": "Kenta Nakamura",
    "author_email": "c60evaporator@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Matplotlib",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "=========\ntune-easy\n=========\n\n|python| |pypi| |license|\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/tune-easy\n   :target: https://www.python.org/\n\n.. |pypi| image:: https://img.shields.io/pypi/v/tune-easy?color=blue\n   :target: https://pypi.org/project/tune-easy/\n\n.. |license| image:: https://img.shields.io/pypi/l/tune-easy?color=blue\n   :target: https://github.com/c60evaporator/tune-easy/blob/master/LICENSE\n\nA hyperparameter tuning tool, extremely easy to use.\n\nThis package supports scikit-learn API estimators, such as SVM and LightGBM.\n\n=====\nUsage\n=====\n\nExample of All-in-one Tuning\n============================\n\n.. code-block:: python\n\n    from tune_easy import AllInOneTuning\n    import seaborn as sns\n    # Load Dataset\n    iris = sns.load_dataset(\"iris\")\n    iris = iris[iris['species'] != 'setosa']  # Select 2 classes\n    TARGET_VARIALBLE = 'species'  # Target variable\n    USE_EXPLANATORY = ['petal_width', 'petal_length', 'sepal_width', 'sepal_length']  # Explanatory variables\n    y = iris[OBJECTIVE_VARIALBLE].values\n    X = iris[USE_EXPLANATORY].values\n    ###### Run All-in-one Tuning######\n    all_tuner = AllInOneTuning()\n    all_tuner.all_in_one_tuning(X, y, x_colnames=USE_EXPLANATORY, cv=2)\n    all_tuner.df_scores\n\n.. image:: https://user-images.githubusercontent.com/59557625/140383755-bca64ab3-1593-47ef-8401-affcd0b20a0a.png\n   :width: 320px\n\n.. image:: https://user-images.githubusercontent.com/59557625/145702196-50f6781e-2ca2-4cbf-9344-ab58cb08d34b.png\n   :width: 480px\n\nIf you want to know usage of the other classes, see `API Reference\n<https://c60evaporator.github.io/tune-easy/all_in_one_tuning.html>`__ and `Examples\n<https://github.com/c60evaporator/tune-easy/tree/master/examples/all_in_one_tuning>`__\n\nExample of Detailed Tuning\n==========================\n\n.. code-block:: python\n\n    from tune_easy import LGBMClassifierTuning\n    from sklearn.datasets import load_boston\n    import seaborn as sns\n    # Load dataset\n    iris = sns.load_dataset(\"iris\")\n    iris = iris[iris['species'] != 'setosa']  # Select 2 classes\n    OBJECTIVE_VARIALBLE = 'species'  # Target variable\n    USE_EXPLANATORY = ['petal_width', 'petal_length', 'sepal_width', 'sepal_length']  # Explanatory variables\n    y = iris[OBJECTIVE_VARIALBLE].values\n    X = iris[USE_EXPLANATORY].values\n    ###### Run Detailed Tuning######\n    tuning = LGBMClassifierTuning(X, y, USE_EXPLANATORY)  # Initialize tuning instance\n    tuning.plot_first_validation_curve(cv=2)  # Plot first validation curve\n    tuning.optuna_tuning(cv=2)  # Optimization using Optuna library\n    tuning.plot_search_history()  # Plot score increase history\n    tuning.plot_search_map()  # Visualize relationship between parameters and validation score\n    tuning.plot_best_learning_curve()  # Plot learning curve\n    tuning.plot_best_validation_curve()  # Plot validation curve\n\n.. image:: https://user-images.githubusercontent.com/59557625/145702586-8b341344-625c-46b3-a9ee-89cb592b1800.png\n   :width: 320px\n\n.. image:: https://user-images.githubusercontent.com/59557625/145702594-cc4b2194-2ed0-40b0-8a83-94ebd8162818.png\n   :width: 480px\n\n.. image:: https://user-images.githubusercontent.com/59557625/145702643-70e3b1f2-66aa-4619-9703-57402b3669aa.png\n   :width: 320px\n\nIf you want to know usage of the other classes, see `API Reference\n<https://c60evaporator.github.io/tune-easy/each_estimators.html>`__ and `Examples\n<https://github.com/c60evaporator/tune-easy/tree/master/examples/method_examples>`__\n\nExample of MLflow logging\n=========================\n\n.. code-block:: python\n\n    from tune_easy import AllInOneTuning\n    import seaborn as sns\n    # Load dataset\n    iris = sns.load_dataset(\"iris\")\n    iris = iris[iris['species'] != 'setosa']  # Select 2 classes\n    TARGET_VARIALBLE = 'species'  # Target variable\n    USE_EXPLANATORY = ['petal_width', 'petal_length', 'sepal_width', 'sepal_length']  # Explanatory variables\n    y = iris[TARGET_VARIALBLE].values\n    X = iris[USE_EXPLANATORY].values\n    ###### Run All-in-one Tuning with MLflow logging ######\n    all_tuner = AllInOneTuning()\n    all_tuner.all_in_one_tuning(X, y, x_colnames=USE_EXPLANATORY, cv=2,\n                                 mlflow_logging=True)  # Set MLflow logging argument\n\n.. image:: https://user-images.githubusercontent.com/59557625/147270240-f779cf1f-b216-42a2-8156-37169511ec3e.png\n   :width: 640px\n\nIf you want to know usage of the other classes, see `API Reference\n<https://c60evaporator.github.io/tune-easy/all_in_one_tuning.html#tune_easy.all_in_one_tuning.AllInOneTuning.all_in_one_tuning>`__ and `Examples\n<https://github.com/c60evaporator/tune-easy/tree/master/examples/mlflow>`__\n\n\n============\nRequirements\n============\nparam-tuning-utility 0.2.1 requires\n\n* Python >=3.6\n* Scikit-learn >=0.24.2\n* Numpy >=1.20.3\n* Pandas >=1.2.4\n* Matplotlib >=3.3.4\n* Seaborn >=0.11.0\n* Optuna >=2.7.0\n* BayesianOptimization >=1.2.0\n* MLFlow >=1.17.0\n* LightGBM >=3.3.2\n* XGBoost >=1.4.2\n* seaborn-analyzer >=0.2.11\n\n====================\nInstalling tune-easy\n====================\nUse pip to install the binary wheels on `PyPI <https://pypi.org/project/tune-easy/>`__\n\n.. code-block:: console\n\n    $ pip install tune-easy\n\n=======\nSupport\n=======\nBugs may be reported at https://github.com/c60evaporator/tune-easy/issues\n\n\nContact\n=======\nIf you have any questions or comments about param-tuning-utility,\nplease feel free to contact me via\neMail: c60evaporator@gmail.com\nor Twitter: https://twitter.com/c60evaporator\nThis project is hosted at https://github.com/c60evaporator/param-tuning-utility\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/c60evaporator/tune-easy",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/c60evaporator/tune-easy",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "Kenta Nakamura",
    "maintainer_email": "c60evaporator@gmail.com",
    "name": "tune-easy",
    "package_url": "https://pypi.org/project/tune-easy/",
    "platform": null,
    "project_url": "https://pypi.org/project/tune-easy/",
    "project_urls": {
      "Download": "https://github.com/c60evaporator/tune-easy",
      "Homepage": "https://github.com/c60evaporator/tune-easy"
    },
    "release_url": "https://pypi.org/project/tune-easy/0.2.1/",
    "requires_dist": [
      "scikit-learn (>=0.24.2)",
      "matplotlib (>=3.3.4)",
      "seaborn (>=0.11.0)",
      "numpy (>=1.20.3)",
      "pandas (>=1.2.4)",
      "optuna (>=2.7.0)",
      "bayesian-optimization (>=1.2.0)",
      "mlflow (>=1.17.0)",
      "lightgbm (>=3.3.2)",
      "xgboost (>=1.4.2)",
      "seaborn-analyzer (>=0.2.11)"
    ],
    "requires_python": ">=3.6",
    "summary": "tune-easy: A hyperparameter tuning tool, extremely easy to use.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13667590,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f30d71fec3e19fb972b2aa75d5455ef40659a9bd6eb860730963cea72acc35cb",
          "md5": "4ed903aa5cf52d309170694fc799c654",
          "sha256": "a02da59d917cc4f6ddddbb08cd7f4c36b56d39cf5975baefe698577af92a69f5"
        },
        "downloads": -1,
        "filename": "tune_easy-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ed903aa5cf52d309170694fc799c654",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52297,
        "upload_time": "2022-04-26T16:29:55",
        "upload_time_iso_8601": "2022-04-26T16:29:55.984889Z",
        "url": "https://files.pythonhosted.org/packages/f3/0d/71fec3e19fb972b2aa75d5455ef40659a9bd6eb860730963cea72acc35cb/tune_easy-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70080c71ea0f73c5676d818c86084034b10b786cc7f5a15988a7ec7ffde43769",
          "md5": "fcc837b3caf86d9d6e37a8af526b16b0",
          "sha256": "e2af0c1424c734bfc7a2841870504998ee0eb13cf6e7c49264e03534d1773c2f"
        },
        "downloads": -1,
        "filename": "tune-easy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcc837b3caf86d9d6e37a8af526b16b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45521,
        "upload_time": "2022-04-26T16:29:58",
        "upload_time_iso_8601": "2022-04-26T16:29:58.078131Z",
        "url": "https://files.pythonhosted.org/packages/70/08/0c71ea0f73c5676d818c86084034b10b786cc7f5a15988a7ec7ffde43769/tune-easy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94cf1ce8ee3504566bac3afb140d7fd8960acaa4887e3acd531982d920e1c098",
          "md5": "47a6f68b06fac043732fb621727670f9",
          "sha256": "616c44d4022f0be828aae9c38018e09e042a685ea9db3ec6abacb4b2d49f7a4e"
        },
        "downloads": -1,
        "filename": "tune_easy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47a6f68b06fac043732fb621727670f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52295,
        "upload_time": "2022-04-29T17:50:24",
        "upload_time_iso_8601": "2022-04-29T17:50:24.051526Z",
        "url": "https://files.pythonhosted.org/packages/94/cf/1ce8ee3504566bac3afb140d7fd8960acaa4887e3acd531982d920e1c098/tune_easy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3b0b144ed12ed6067188767780f7034582d48d0f13b73936bfb5649dbea4037",
          "md5": "78b68a7068397ed94cea198a3d0e0c32",
          "sha256": "a4e6a77636cba0923baa8d38021acb2f80ab130912b0fb71cf30cc34c727d6db"
        },
        "downloads": -1,
        "filename": "tune-easy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78b68a7068397ed94cea198a3d0e0c32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 45541,
        "upload_time": "2022-04-29T17:50:26",
        "upload_time_iso_8601": "2022-04-29T17:50:26.628878Z",
        "url": "https://files.pythonhosted.org/packages/b3/b0/b144ed12ed6067188767780f7034582d48d0f13b73936bfb5649dbea4037/tune-easy-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94cf1ce8ee3504566bac3afb140d7fd8960acaa4887e3acd531982d920e1c098",
        "md5": "47a6f68b06fac043732fb621727670f9",
        "sha256": "616c44d4022f0be828aae9c38018e09e042a685ea9db3ec6abacb4b2d49f7a4e"
      },
      "downloads": -1,
      "filename": "tune_easy-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47a6f68b06fac043732fb621727670f9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 52295,
      "upload_time": "2022-04-29T17:50:24",
      "upload_time_iso_8601": "2022-04-29T17:50:24.051526Z",
      "url": "https://files.pythonhosted.org/packages/94/cf/1ce8ee3504566bac3afb140d7fd8960acaa4887e3acd531982d920e1c098/tune_easy-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3b0b144ed12ed6067188767780f7034582d48d0f13b73936bfb5649dbea4037",
        "md5": "78b68a7068397ed94cea198a3d0e0c32",
        "sha256": "a4e6a77636cba0923baa8d38021acb2f80ab130912b0fb71cf30cc34c727d6db"
      },
      "downloads": -1,
      "filename": "tune-easy-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "78b68a7068397ed94cea198a3d0e0c32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 45541,
      "upload_time": "2022-04-29T17:50:26",
      "upload_time_iso_8601": "2022-04-29T17:50:26.628878Z",
      "url": "https://files.pythonhosted.org/packages/b3/b0/b144ed12ed6067188767780f7034582d48d0f13b73936bfb5649dbea4037/tune-easy-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}