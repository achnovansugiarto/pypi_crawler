{
  "info": {
    "author": "Guillaume Chorn",
    "author_email": "guillaume.chorn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# golden-marshmallows\nA better integration between SQLAlchemy and Marshmallow. A little (SQL)alchemy to turn `marshmallow`s into gold.\n\nNote: The default unknown field handling has been defaulted to `EXCLUDE` so it handles\ncloser to Marshmallow v2.\n\n# Installation\nSimply install with `pip`:\n```\n$ pip install golden-marshmallows\n```\n# Usage\n## Serialization\nTake these SQLAlchemy models as examples:\n```python\nclass WizardCollege(Base):\n    __tablename__ = 'wizard_college'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    alchemists = relationship('Alchemist')\n\n    def __repr__(self):\n        return '<WizardCollege(name={self.name!r})>'.format(self=self)\n\nclass Alchemist(Base):\n    __tablename__ = 'alchemists'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    school_id = Column(Integer, ForeignKey('wizard_college.id'))\n    formulae = relationship('Formula')\n\n    def __repr__(self):\n        return '<Alchemist(name={self.name!r})>'.format(self=self)\n\nclass Formula(Base):\n    __tablename__ = 'forumulae'\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    author_id = Column(Integer, ForeignKey('alchemists.id'))\n\n    def __repr__(self):\n        return '<Formula(title={self.title!r})>'.format(self=self)\n```\nThe `GoldenSchema` class allows quick and easy generation of `marshmallow` schemas that can be used for SQLAlchemy object serialization/deserialization. Simply pass the model class on initialization and you're ready to go:\n```python\nimport json\nfrom golden_marshmallows.schema import GoldenSchema\nfrom models import Alchemist, Formula, WizardCollege\n\nalchemist = Alchemist(name='Albertus Magnus', school_id=1)\nsession.add(alchemist)\nsession.flush()\n\nschema = GoldenSchema(Alchemist)\n\nserialized = schema.dump(alchemist)\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1\n# }\n```\nThat's it! No need to define your own `Schema` subclass, unless you really want to (more on that below).\n\n## Nested objects\nBut what about this alchemist's formulae? Nested objects can easily be added to the mix by passing in a dictionary mapping each field that contains a nested object (or objects) to the relevant SQLAlchemy class:\n```python\nnested_map = {\n    'formulae': {\n        'class': Formula,\n        'many': True\n    }\n}\n\nformula = Formula(title='transmutation')\nalchemist.formulae.append(formula)\nsession.commit()\n\nschema = GoldenSchema(Alchemist, nested_map=nested_map)\n\nserialized = schema.dump(alchemist)\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1,\n#     \"formulae\" : [\n#         {\n#             \"title\": \"transmutation\"\n#         }\n#     ]\n# }\n```\nIn fact, the `GoldenSchema` class supports arbitrary nesting in this fashion, simply adjust the map as necessary:\n```python\nnested_map = {\n    'alchemists': {\n        'class': Alchemist,\n        'many': True,\n        'nested_map': {\n            'formulae': {\n                'class': Formula,\n                'many': True\n            }\n        }\n    }\n}\n\ncollege = WizardCollege(name='Bogwarts')\ncollege.alchemists.append(alchemist)\nsession.add(college)\nsession.flush()\n\nschema = GoldenSchema(WizardCollege, nested_map=nested_map)\n\nserialized = schema.dump(college)\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Bogwarts\",\n#     \"alchemists\": [\n#         {\n#             \"id\": 1,\n#             \"school_id\": 1,\n#             \"name\": \"Albertus Magnus\",\n#             \"formulae\": [\n#                 {\n#                     \"title\": \"transmutation\",\n#                     \"author_id\": 1,\n#                     \"id\": 1\n#                 }\n#             ]\n#         }\n#     ]\n# }\n```\nYou may need more control over the `GoldenSchema` instances that are nested into your top-level schema in the `nested_map` parameter. If that's the case, you can simply create a nested `GoldenSchema` instance and pass it in directly like so:\n```python\nfrom marshmallow.fields import List, String\n\n\nFormulaSchema = GoldenSchema(Formula)\n\n\nclass FormulaSchemaWithIngredients(FormulaSchema):\n    ingredients = List(String())\n\n\nnested_map = {\n    'formulae': {\n        'class': FormulaSchemaWithIngredients,\n        'many': True\n    }\n}\n\nalchemist = session.query(Alchemist).first()\nformula = alchemist.formulae[0]\nformula.ingredients = ['lead', 'magic']\n\nschema = GoldenSchema(Alchemist, nested_map=nested_map)\n\nserialized = schema.dump(alchemist)\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1,\n#     \"formulae\" : [\n#         {\n#             \"title\": \"transmutation\",\n#             \"ingredients\": [\n#                 \"lead\",\n#                 \"magic\"\n#             ]\n#         }\n#     ]\n# }\n```\n## Deserialization\nOf course, you can deserialize data into SQLAlchemy objects just as easily:\n```python\n# Start at the end of the last example and work backwards\ndata = {\n    \"id\": 1,\n    \"name\": \"Bogwarts\",\n    \"alchemists\": [\n        {\n            \"formulae\": [\n                {\n                    \"title\": \"transmutation\",\n                    \"author_id\": 1,\n                    \"id\": 1\n                }\n            ],\n            \"school_id\": 1,\n            \"id\": 1,\n            \"name\": \"Albertus Magnus\"\n        }\n    ]\n}\n\ncollege = schema.load(data)\nprint(college)\n# <WizardCollege(name='Bogwarts')>\nprint(college.alchemists)\n# [<Alchemist(name='Albertus Magnus')>]\nprint(college.alchemists[0].formulae)\n# [<Formula(title='transmutation')>]\n```\n# Extra Features\n## camelCasing/snake_casing\nThe `snake_to_camel` flag allows serde to/from camelCase, for example when serializing Python data into JSON to send as an API Response:\n```python\n# `Formula.author_id` is easily converted to camelCase\nschema = GoldenSchema(Formula, snake_to_camel=True)\n\nserialized = schema.dump(formula)\n\nprint(json.dumps(serialized, indent=4))\n# Notice `author_id` has become `authorId`\n# {\n#     \"title\": \"transmutation\",\n#     \"authorId\": 1,\n#     \"id\": 1\n# }\n```\nThe same `GoldenSchema` instance, when used to `load` (deserialize) data, will expect camelCased attributes and load them as snake_cased attributes:\n```python\ndata = {\n    \"title\": \"transmutation\",\n    \"authorId\": 1,\n    \"id\": 1\n}\nformula = schema.load(data)\n\nprint(formula.author_id)\n# 1\n```\nA flag with the opposite behavior, `camel_to_snake`, is also included.\n\nThis feature also works for manually declared fields; that is, fields you yourself declare when subclassing `GoldenSchema` like so:\n```python\nclass MySchema(GoldenSchema):\n    manually_declared = fields.Function(lambda obj: 'my special value')\n\nmy_schema = MySchema(Formula, snake_to_camel=True)\n\nserialized = schema.dump(formula)\nprint(json.dumps(serialized, indent=4))\n# `manually_declared` has become camelCase\n# {\n#     \"title\": \"transmutation\",\n#     \"authorId\": 1,\n#     \"id\": 1,\n#     \"manuallyDeclared\": \"my special value\"\n# }\n```\nIn fact, you can use this feature without involving SQLAlchemy at all; just use `CaseChangingSchema`, the parent class of `GoldenSchema`:\n```python\nfrom golden_marshmallows.schema import CaseChangingSchema\n\nclass SnakeSchema(CaseChangingSchema):\n    attr_one = fields.String()\n    attr_two = fields.Integer()\n\nclass SnakeObj:\n    def __init__(self, attr_one, attr_two):\n        self.attr_one = attr_one\n        self.attr_two = attr_two\n\nschema = SnakeSchema(snake_to_camel=True)\nobj = SnakeObj('field1', 2)\n\nserialized = schema.dump(obj)\nprint(json.dumps(serialized, indent=4))\n# {\n#     'attrOne': 'field1',\n#     'attrTwo': 2\n# }\n```\n\n## Copying objects\nAs a minor convenience, you can pass the `new_obj` flag on initialization to indicate that any fields named `id` should be ignored during deserialization:\n```python\nschema = GoldenSchema(Formula, snake_to_camel=True, new_obj=True)\n\ndata = {\n    \"title\": \"transmutation\",\n    \"authorId\": 1,\n    \"id\": 1\n}\n\nnew_formula = schema.load(data)\nprint(new_formula.title)\n# 'transmutation'\nprint(new_formula.id)  # None\n```\nThis allows you to quickly deserialize data representations of existing objects into new copies.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/gchorn/golden-marshmallows/archive/v1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gchorn/golden-marshmallows",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "golden-marshmallows",
    "package_url": "https://pypi.org/project/golden-marshmallows/",
    "platform": "",
    "project_url": "https://pypi.org/project/golden-marshmallows/",
    "project_urls": {
      "Download": "https://github.com/gchorn/golden-marshmallows/archive/v1.0.0.tar.gz",
      "Homepage": "https://github.com/gchorn/golden-marshmallows"
    },
    "release_url": "https://pypi.org/project/golden-marshmallows/1.0.0/",
    "requires_dist": [
      "marshmallow",
      "SQLAlchemy"
    ],
    "requires_python": "",
    "summary": "Marshmallow Schema subclass that auto-defines fields based on SQLAlchemy classes",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8212670,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6058dd6b2dbe4fe5c27a9ea012aa63222b74ef541cfeec2da1a04ac955adef37",
          "md5": "8262dae6cbca6801d269f1142fa4b2a4",
          "sha256": "0af24553b59661ff87ca3bd3a92bc10f93bceecbb2109c8dec1119adbeb8d915"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8262dae6cbca6801d269f1142fa4b2a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4757,
        "upload_time": "2018-04-12T06:00:13",
        "upload_time_iso_8601": "2018-04-12T06:00:13.030614Z",
        "url": "https://files.pythonhosted.org/packages/60/58/dd6b2dbe4fe5c27a9ea012aa63222b74ef541cfeec2da1a04ac955adef37/golden_marshmallows-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb18d4cf2f51612e84803e0363e3cc7bce7a352f03a29b857498d153c433d0aa",
          "md5": "f659b892b98502eccc58fc425030df06",
          "sha256": "94cd0a3155d7a1ee4c00cbab3faaafe286f3aaf2e0617044dd4ddc3e81a54891"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f659b892b98502eccc58fc425030df06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6470,
        "upload_time": "2018-05-11T19:37:35",
        "upload_time_iso_8601": "2018-05-11T19:37:35.744194Z",
        "url": "https://files.pythonhosted.org/packages/fb/18/d4cf2f51612e84803e0363e3cc7bce7a352f03a29b857498d153c433d0aa/golden_marshmallows-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74b712bb4c39af9b325b164d988cac4a8d4baae7b8d0b1f984586553dc95574f",
          "md5": "4a86c84abcac1e67417c0143aa4b2e99",
          "sha256": "cdb238247f8a277a29e2736676c6b3120938c65b328f7b6ffd9d8f77326aadab"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a86c84abcac1e67417c0143aa4b2e99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7208,
        "upload_time": "2020-03-27T00:25:20",
        "upload_time_iso_8601": "2020-03-27T00:25:20.570907Z",
        "url": "https://files.pythonhosted.org/packages/74/b7/12bb4c39af9b325b164d988cac4a8d4baae7b8d0b1f984586553dc95574f/golden_marshmallows-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cbeaefed507986d85164c13aba06e0a415c4c9fee30218f0f59af8d25dc4f21",
          "md5": "199dcd4b6e0ce51e06e004bf3bd61a9a",
          "sha256": "d5bec337926dfc0dd04a314ee3c0bd5c670dc68ec48754076978d398ebb633e2"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "199dcd4b6e0ce51e06e004bf3bd61a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6545,
        "upload_time": "2020-03-04T19:55:14",
        "upload_time_iso_8601": "2020-03-04T19:55:14.749846Z",
        "url": "https://files.pythonhosted.org/packages/3c/be/aefed507986d85164c13aba06e0a415c4c9fee30218f0f59af8d25dc4f21/golden_marshmallows-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bfa4caf5500d9bd56a13c25e451c19091f91bfe0326ea11aab98f9eee19d552",
          "md5": "f73f402aabe2232e04aeab72d66e0939",
          "sha256": "457a6a0d197eef9cdaa0a6243e5f0049c4e4ff01eb843ca18b49d5b7890a301c"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f73f402aabe2232e04aeab72d66e0939",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8318,
        "upload_time": "2020-03-27T00:27:18",
        "upload_time_iso_8601": "2020-03-27T00:27:18.665390Z",
        "url": "https://files.pythonhosted.org/packages/2b/fa/4caf5500d9bd56a13c25e451c19091f91bfe0326ea11aab98f9eee19d552/golden_marshmallows-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c242e42344530dfc8f4a90d466fca887600f44ec0f76bac49366147730aeafa",
          "md5": "e67d9a3a2761c9a8fbeda68080e944af",
          "sha256": "d8f131e1d69c624e1e372287f6e85f66a0bdc9215b60331d5d0f86b419f6dbe1"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e67d9a3a2761c9a8fbeda68080e944af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7693,
        "upload_time": "2020-09-17T23:03:28",
        "upload_time_iso_8601": "2020-09-17T23:03:28.492069Z",
        "url": "https://files.pythonhosted.org/packages/0c/24/2e42344530dfc8f4a90d466fca887600f44ec0f76bac49366147730aeafa/golden_marshmallows-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a71048e43b7a735a7c79f44220b8d19f41913a5ceb516c93d7709aa37ec4000",
          "md5": "035bbf58d93f1af3a6a2148864e7354f",
          "sha256": "1e61dc795be4bf43fc50ba6ec8d67a32c275ba42bd3b52350cfe79359b1faf22"
        },
        "downloads": -1,
        "filename": "golden_marshmallows-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "035bbf58d93f1af3a6a2148864e7354f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8181,
        "upload_time": "2020-09-17T23:03:30",
        "upload_time_iso_8601": "2020-09-17T23:03:30.033982Z",
        "url": "https://files.pythonhosted.org/packages/7a/71/048e43b7a735a7c79f44220b8d19f41913a5ceb516c93d7709aa37ec4000/golden_marshmallows-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0c242e42344530dfc8f4a90d466fca887600f44ec0f76bac49366147730aeafa",
        "md5": "e67d9a3a2761c9a8fbeda68080e944af",
        "sha256": "d8f131e1d69c624e1e372287f6e85f66a0bdc9215b60331d5d0f86b419f6dbe1"
      },
      "downloads": -1,
      "filename": "golden_marshmallows-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e67d9a3a2761c9a8fbeda68080e944af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7693,
      "upload_time": "2020-09-17T23:03:28",
      "upload_time_iso_8601": "2020-09-17T23:03:28.492069Z",
      "url": "https://files.pythonhosted.org/packages/0c/24/2e42344530dfc8f4a90d466fca887600f44ec0f76bac49366147730aeafa/golden_marshmallows-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a71048e43b7a735a7c79f44220b8d19f41913a5ceb516c93d7709aa37ec4000",
        "md5": "035bbf58d93f1af3a6a2148864e7354f",
        "sha256": "1e61dc795be4bf43fc50ba6ec8d67a32c275ba42bd3b52350cfe79359b1faf22"
      },
      "downloads": -1,
      "filename": "golden_marshmallows-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "035bbf58d93f1af3a6a2148864e7354f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8181,
      "upload_time": "2020-09-17T23:03:30",
      "upload_time_iso_8601": "2020-09-17T23:03:30.033982Z",
      "url": "https://files.pythonhosted.org/packages/7a/71/048e43b7a735a7c79f44220b8d19f41913a5ceb516c93d7709aa37ec4000/golden_marshmallows-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}