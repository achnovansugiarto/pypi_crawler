{
  "info": {
    "author": "Mohamed Ragaey Saleh",
    "author_email": "mohamed.ragaiy.saleh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Environment :: MacOS X",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Pynamic\n\n> A FastAPI extension for making openapi.json values dynamic.\n\nEasily and quickly give openapi.json customizable dynamic values. Pynamic provides built-in dynamic variables that can be used as examples (e.g. `FULL_NAME`, `EMAIL`, `PHONE_NUMBER`, etc...), it also provides the ability to create custom tokens that can be used anywhere.\n\n## Installation\n\nThis package can be install with or without Faker. If the built-in dynamic variables are going to be used, then install it as following:\n\n```bash\npip install pynamic[faker]\n```\n\nOtherwise, simply install the package only:\n\n```bash\npip install pynamic\n```\n\n> Faker can be installed afterward if dynamic variables were needing later on.\n\n\n\n## Usage Examples\n\n### Example 1\n\n```python\nfrom fastapi import FastAPI, Query\nfrom fastapi.openapi.utils import get_openapi\nfrom pynamic import dynamic_openapi, dynamic_variables as dv\n\napp = FastAPI()\n\n\n@app.get(\"/greeting\")\nasync def greet(name: str = Query(None, example=dv.FIRST_NAME)):\n    return {\"greeting\": f\"Hello {name or 'World'}\"}\n\n\napp.openapi = dynamic_openapi(app, get_openapi)\n```\n\nTo get dynamically generated values with pynamic, there are only two steps:\n\n**step 1:** Assign a token instance to the variable the needs a dynamic value.\n\n```python\nexample=dv.FIRST_NAME\n```\n\n**step 2:** Replace the app's default openapi method with the output of the dynamic openapi function.\n\n```python\napp.openapi = dynamic_openapi(app, get_openapi)\n```\n\n### Example 2\n\n```python\nfrom pynamic import Token, dynamic_variables as dv\n\n\ndef bla_bla_factory(count: int = 1):\n    def inner_func():\n        nonlocal count\n        result = (\"bla \" * count)[:-1]\n        count += 1\n        return result\n\n    return inner_func\n\n\nbla_bla = Token(bla_bla_factory())\n\nconversation = f\"\"\"\n{dv.FIRST_NAME[1]}: {bla_bla}\n{dv.FIRST_NAME[2]}: {bla_bla[\"whaterver\"]}\n{dv.FIRST_NAME[1]}: {bla_bla}\n{dv.FIRST_NAME[2]}: {bla_bla}\n{dv.FIRST_NAME[1]}: {bla_bla[\"whaterver\"]}\n{dv.FIRST_NAME[2]}: {bla_bla}\n\"\"\"\n\nprint(Token.parse(conversation))\n\n# Output:\n\"\"\"\nErin: bla\nJeremy: bla bla\nErin: bla bla bla\nJeremy: bla bla bla bla\nErin: bla bla\nJeremy: bla bla bla bla bla\n\"\"\"\n```\n\nIn this example there are a couple of concepts:\n\n1. **Custom tokens:** To create a token with special behavior, a function that returns the desired values is passed to a new token instance. In this example the passed function will increase the number of times it repeats the phrase \"bla\" by one each time it's called.\n\n   ```python\n   bla_bla = Token(bla_bla_factory())\n   ```\n\n   > Notice that the function bla_bla_factory returns a function, and that's what will be used to generate the dynamic values. The reason it's written that way is to keep track of the count variable, this is something called closures.\n\n1. **Caching tokens:** In some use cases it might be required to use the same dynamic value in multiple places *(like in the case of this fake conversation between two random people)*. This is achieved by passing a key *(of type integer or string)* to the token instance, a cached instance of the token with a static value will be returned.\n\n   ```python\n   bla_bla[\"whaterver\"]\n   ```\n\n1. **Parsing strings:** When it's time to convert the raw string containing the tokens into its final form, the raw string should be passed to the token's class method `parse`.\n\n   ```python\n   print(Token.parse(conversation))\n   ```\n\n\n\n\n## API\n\n---\n\n**`Token(...)`**\n\nThe Token class is a subclass of string. Creating an instance of Token returns a placeholder used for injecting the replacement value.\n\nArguments:\n\n​\t[required]\n\n* `replacement`: \\<any\\>\n  The value or callable (that returns a value) that gets injected at the time of parsing.\n\n​\t[optional]\n\n* `full_match`: \\<bool\\> `=False`\n  Whether the replacement value should be a stand alone token or can be part of a string.\n* `anonymous`: \\<bool\\> `=False`\n  Whether this instance should be held onto for parsing or not.\n* `call_depth`: \\<int\\> `=10`\n  The number of nested callables a replacement can have.\n* `always_replace`: \\<bool\\> `=False`\n  Determines how to handle the replacement after exceeding the `call_depth`. If `True` the replacement will be returned regardless of its type. If `False` a `RuntimeError` will be raised if the replacement is still a callable.\n\n```python\nNONE = Token(None, full_match=True)\n```\n\n---\n\n**`Token.core`** *(class property)*\n\nReturns a proxy object that can be used as if it's the Faker instance. This should only be used for the replacement argument while creating a Token instance.\n\n```python\nNAME = Token(Token.core.first_name)\n\nALPHA_NUMERIC = Token(\n    Token.core.random_element(\n        elements=(\n            Token.core.random_digit(),\n            Token.core.random_lowercase_letter(),\n        )\n    )\n)\n```\n\n> **Notes:**\n>\n> * In the example above, passing the function itself `Token.core.first_name` or calling it `Token.core.first_name()` will be handled the same.\n> * By default the core property represents a Faker instance, so Faker should be installed in order for it to work out of the box. It is possible to have core represent a **customized instance of Faker** *(e.g. with support for other languages)*  or **different random value generator** by passing the generator to `Token.set_core(new_core)`.\n\n---\n\n**`Token.set_core(...)`** *(class method)*\n\nUsed for replacing the instance of Faker that is used by the proxy object.\n\nArguments:\n\n​\t[required]\n\n* `core`: \\<any\\>\n  The instance of the random value generator that will be used by proxy object.\n\n​\t[optional]\n\n* `reset`: \\<bool\\> `=True`\n  Weather or not values of the cached tokens using the old core should be replaced with valued using the new core.\n\n---\n\n**`Token.parse(...)`** *(class method)*\n\n---\n\n**`Token.reset_all_cache(...)`** *(class method)*\n\n---\n\n**`token.value`** *(instance property)*\n\n---\n\n**`token.inject_into(...)`** *(instance method)*\n\n---\n\n**`token.reset_cache(...)`** *(instance method)*\n\n---\n\n**`parse(...)`**\n\n---\n\n**`dynamic_openapi(...)`**\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Mox93/pynamic",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynamic",
    "package_url": "https://pypi.org/project/pynamic/",
    "platform": "",
    "project_url": "https://pypi.org/project/pynamic/",
    "project_urls": {
      "Homepage": "https://github.com/Mox93/pynamic"
    },
    "release_url": "https://pypi.org/project/pynamic/0.3.0/",
    "requires_dist": [
      "Faker (==8.1.3) ; extra == 'faker'"
    ],
    "requires_python": ">=3.6",
    "summary": "A package for injecting dynamic values into strings.",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11842576,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c3b60de39f04c760cd33362a5f7036b7ecdb86c0a18f457a7b6d85c7e92fb02",
          "md5": "d693659301cc7d433ad0feeb21d13c45",
          "sha256": "a3282217a44363ff80cade55c64afe8efcd3aaee3e38b9b0cee75309ecb74c69"
        },
        "downloads": -1,
        "filename": "pynamic-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d693659301cc7d433ad0feeb21d13c45",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14854,
        "upload_time": "2021-06-21T01:57:38",
        "upload_time_iso_8601": "2021-06-21T01:57:38.951487Z",
        "url": "https://files.pythonhosted.org/packages/0c/3b/60de39f04c760cd33362a5f7036b7ecdb86c0a18f457a7b6d85c7e92fb02/pynamic-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c1ea0bc9e4a7da5fb8ea05c63b5548502a62279a1a55faada82697be4797bbf",
          "md5": "dc872d9de9e68716d1985229c44cbbbf",
          "sha256": "6c13b76f061fa3ab247c553e4c1055b9592c6d9e87a808ad6e728a4bfae41b36"
        },
        "downloads": -1,
        "filename": "pynamic-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc872d9de9e68716d1985229c44cbbbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13518,
        "upload_time": "2021-06-21T01:57:41",
        "upload_time_iso_8601": "2021-06-21T01:57:41.013657Z",
        "url": "https://files.pythonhosted.org/packages/0c/1e/a0bc9e4a7da5fb8ea05c63b5548502a62279a1a55faada82697be4797bbf/pynamic-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3b5c92b1c6fcf7a5656a166a2b26bfbb2565c536000aadd1535b0d791efd498",
          "md5": "0eea884ccf33199cbf4344e2382407a3",
          "sha256": "d9b2a92465463874ac200598205ac15133d6a65a69c531cb23e3bc8040eeb646"
        },
        "downloads": -1,
        "filename": "pynamic-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0eea884ccf33199cbf4344e2382407a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16333,
        "upload_time": "2021-06-29T01:25:27",
        "upload_time_iso_8601": "2021-06-29T01:25:27.193110Z",
        "url": "https://files.pythonhosted.org/packages/b3/b5/c92b1c6fcf7a5656a166a2b26bfbb2565c536000aadd1535b0d791efd498/pynamic-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35f1e4909cc095bdad527f572d9b2ab055665bb9641bbe20bd2268441dfbf4d8",
          "md5": "3d24c223eb9f6484fc6a88ba013798c9",
          "sha256": "110ae6c466093dfdf4b6ea4797f43a778fcf70a87a2a49b3146569b61cbc5ab4"
        },
        "downloads": -1,
        "filename": "pynamic-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d24c223eb9f6484fc6a88ba013798c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16489,
        "upload_time": "2021-06-29T01:25:29",
        "upload_time_iso_8601": "2021-06-29T01:25:29.314784Z",
        "url": "https://files.pythonhosted.org/packages/35/f1/e4909cc095bdad527f572d9b2ab055665bb9641bbe20bd2268441dfbf4d8/pynamic-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "269755ce7b9166b6c8747ce5ecd211c1c46bd580bd2794cabc509c509282df43",
          "md5": "7a32e35dabd9926866c2a44e51ef0fc4",
          "sha256": "11a6aab33e2a8c150e2e4d53f9b0e0c0fe8a76bd059f4f5c0bd62915d6bc16b9"
        },
        "downloads": -1,
        "filename": "pynamic-0.3.00-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a32e35dabd9926866c2a44e51ef0fc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17628,
        "upload_time": "2021-10-27T04:32:43",
        "upload_time_iso_8601": "2021-10-27T04:32:43.639002Z",
        "url": "https://files.pythonhosted.org/packages/26/97/55ce7b9166b6c8747ce5ecd211c1c46bd580bd2794cabc509c509282df43/pynamic-0.3.00-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc64022e229e2e5ed3a2e901bcb7ae7f0f5d255a8d86365d41a79f261c30fa21",
          "md5": "20761c80c388d1087e4929341b557e7e",
          "sha256": "2e018121b487c61f5034d16f77410ede79b5eabb4c0ec37481a967eb432a06cd"
        },
        "downloads": -1,
        "filename": "pynamic-0.3.00.tar.gz",
        "has_sig": false,
        "md5_digest": "20761c80c388d1087e4929341b557e7e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19149,
        "upload_time": "2021-10-27T04:32:45",
        "upload_time_iso_8601": "2021-10-27T04:32:45.178859Z",
        "url": "https://files.pythonhosted.org/packages/dc/64/022e229e2e5ed3a2e901bcb7ae7f0f5d255a8d86365d41a79f261c30fa21/pynamic-0.3.00.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "269755ce7b9166b6c8747ce5ecd211c1c46bd580bd2794cabc509c509282df43",
        "md5": "7a32e35dabd9926866c2a44e51ef0fc4",
        "sha256": "11a6aab33e2a8c150e2e4d53f9b0e0c0fe8a76bd059f4f5c0bd62915d6bc16b9"
      },
      "downloads": -1,
      "filename": "pynamic-0.3.00-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7a32e35dabd9926866c2a44e51ef0fc4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17628,
      "upload_time": "2021-10-27T04:32:43",
      "upload_time_iso_8601": "2021-10-27T04:32:43.639002Z",
      "url": "https://files.pythonhosted.org/packages/26/97/55ce7b9166b6c8747ce5ecd211c1c46bd580bd2794cabc509c509282df43/pynamic-0.3.00-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc64022e229e2e5ed3a2e901bcb7ae7f0f5d255a8d86365d41a79f261c30fa21",
        "md5": "20761c80c388d1087e4929341b557e7e",
        "sha256": "2e018121b487c61f5034d16f77410ede79b5eabb4c0ec37481a967eb432a06cd"
      },
      "downloads": -1,
      "filename": "pynamic-0.3.00.tar.gz",
      "has_sig": false,
      "md5_digest": "20761c80c388d1087e4929341b557e7e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19149,
      "upload_time": "2021-10-27T04:32:45",
      "upload_time_iso_8601": "2021-10-27T04:32:45.178859Z",
      "url": "https://files.pythonhosted.org/packages/dc/64/022e229e2e5ed3a2e901bcb7ae7f0f5d255a8d86365d41a79f261c30fa21/pynamic-0.3.00.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}