{
  "info": {
    "author": "hebi-python-ninja",
    "author_email": "hebi@python-ninja.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Games/Entertainment"
    ],
    "description": "wonder - Python Game Engine\n===========================\n\nWhenever I have played a great computer game for the first time, I was **wonder**\\ ing how they do it. Then I tried to recreate it.\n-----------------------------------------------------------------------------------------------------------------------------------\n\n\n\n**Pygame** (https://www.pygame.org) is a great library for making your\nown game with python.\n\nWhen starting a new game from scratch you always need to build the basic\nstructure. The game engine ``wonder`` gives you a collection of\ncomponents you can use with **Pygame**.\n\nThe game engine ``wonder`` is only a frame for your programming, so you\nhave to know Pygame for creating new games.\n\nMany ideas in ``wonder`` are inspired by *Unity 3D* (https://unity.com)\n\nIf you are looking for more simple to use Pygame frameworks:\n\n-  **pygame zero** https://github.com/lordmauve/pgzero\n-  **python arcade library** https://arcade.academy\n\nThe game engine ``wonder`` includes Box2D as physics engine.\n\nGoals:\n\n-  explicit is better then implicit - wonder is only the frame for your\n   game\n-  Component based - more components, less classes\n-  Inspired by Unity 3D - Similar names for object types and methods\n-  Physics engine included\n\n\n\nIf you like it, use it. If you have some suggestions, tell me\n(hebi@ninja-python.com).\n\nAll game assets that I use in examples are free and from\nhttps://www.kenney.nl. Thank you.\n\nacclaimer\n---------\n\nYou can use this alpha version 0.1.0 of the game engine ``wonder`` but\nthere will be some changes in the future.\n\ninstalling wonder game engine\n-----------------------------\n\nInstall with pip\n\n.. code:: ipython3\n\n    pip install wonder\n\nIf that does not work on your platform you can install the different\ncomponents separately\n\nInstall **pygame**\n\n.. code:: ipython3\n\n    pip install pygame\n\nInstall physics engine **Box2D**\n\n.. code:: ipython3\n\n    pip install box2d\n\nFor installing **wonder** simply copy file **wonder.py** to your\ndirectory.\n\n.. code:: ipython3\n\n    cp wonder.py\n\nwonder game engine - making a new game\n--------------------------------------\n\nmain game\n~~~~~~~~~\n\n\nlevel 1 - scene\n~~~~~~~~~~~~~~~\n\nA scene contains of gameobject\n\ncreate\n\nadd gameobject\n\ngameobject\n~~~~~~~~~~\n\n| first gameobject Racket\n| add SpriteRender Component\n| fixed_rotation\n\n\ncreate border\n~~~~~~~~~~~~~\n\ncomponent rigidbody static\n\n\ncreate blocks\n~~~~~~~~~~~~~\n\nmove racket\n^^^^^^^^^^^\n\ndebug\n^^^^^\n\ncreate ball\n~~~~~~~~~~~\n\n| restitution\n| component rigidbody\n| component circlecollider\n\nmove ball\n^^^^^^^^^\n\n\ncreate block\n~~~~~~~~~~~~\n\n| component rigidbody\n| component boxcollider\n\ncreate scoremanager\n~~~~~~~~~~~~~~~~~~~\n\n| get_object\n| start_tag\n| draw_text\n\nrestrart\n~~~~~~~~\n\n0 ball level 1\n^^^^^^^^^^^^^^\n\nnext level\n~~~~~~~~~~\n\nwonder game engine - behind the curtain\n---------------------------------------\n\ncentral engine and the systems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\npattern singleton\n^^^^^^^^^^^^^^^^^\n\n\ngame loop update draw\n^^^^^^^^^^^^^^^^^^^^^\n\n| event\n| update\n| late_update\n| draw\n\ntiming\n^^^^^^\n\n\nevent system\n^^^^^^^^^^^^\n\non_load_scene\n\nobserver pattern\n\nget_object\n^^^^^^^^^^\n\nGetObject\n^^^^^^^^^\n\ngameobject\n~~~~~~~~~~\n\nmixin\n^^^^^\n\n\ntransform\n^^^^^^^^^\n\n\ncomponents\n^^^^^^^^^^\n\nSpriteRenderer\n\nscene\n-----\n\nlayered container for gameobject\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nrender system\n~~~~~~~~~~~~~\n\nlayered observer\n\nComponent SpriteRenderer\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n| Surface\n| load_from_file\n\nconsists of surface and rect\n\nchange current scene\n~~~~~~~~~~~~~~~~~~~~\n\nadd or remove gameobject\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nadd or remove component\n^^^^^^^^^^^^^^^^^^^^^^^\n\n\nphysic and collision system\n---------------------------\n\n| using Box2D\n  https://box2d.org/documentation/md__d_1__git_hub_box2d_docs_dynamics.html\n| python https://github.com/pybox2d/pybox2d\n\nbodies\n~~~~~~\n\nComponent Rigidbody is b2Body\n\nsynchornize transform\n^^^^^^^^^^^^^^^^^^^^^\n\n\nbody types\n^^^^^^^^^^\n\n| STATIC_BODY\n| physic system does not simulate this body\n| body has zero velocity\n| body does not collide with other static or kinematic bodies\n\n| KINEMATIC_BODY\n| physic system simulates this body\n| body does not respond to forces\n| program can move body normally by setting velocity\n| body does not collide with other static or kinematic bodies\n\n| DYNAMIC_BODY\n| physic system simulates this body\n| body collides with other bodies\n\nfixtures\n^^^^^^^^\n\ncomponent collider is b2Fixture\n\nboxcollider\n\ndebug\n^^^^^\n\njoints\n~~~~~~\n\ndistance joints\n^^^^^^^^^^^^^^^\n\nget_gameobject\n\nanimator component\n------------------\n\n| animator has states\n| state has clips\n\n\nparticle system\n---------------\n\n\ntile system\n-----------\n\n| A **TileMap** is an GameObject and consists of *width* x *height*\n  tiles.\n| Every tile has a width of *tile_width* pixels and a height of\n  *tile_height*.\n\n.. code:: ipython3\n\n    GRID_WIDTH = 5\n    GRID_HEIGHT = 7\n    \n    CELL_WIDTH = 64\n    CELL_HEIGHT = 64\n    \n    tilemap = TileMap(GRID_WIDTH,GRID_HEIGHT,CELL_WIDTH,CELL_HEIGHT)\n\nThe tilemap.transform.position is always the top left position of the\nmap. With changing position you can move the complete map.\n\n| A TileMap has a **palette** with different **TilePaletteItem** you can\n  use in a tilemap.\n| A **TilePaletteItem** has an unique **id**, an unique **tile_type**\n  and an **image**.\n\n.. code:: ipython3\n\n    tilemap.palette.add(TilePaletteItem(0, tile_type='ground', image=pygame.image.load('res_tile/ground.png')))\n    tilemap.palette.add(TilePaletteItem(1, tile_type='wall', image=pygame.image.load('res_tile/wall.png')))\n    ..\n\nTo create a tile from the palette at a specific position in the tile map\nuse the function\n**create_tile_from_palette**\\ (*position_x*,\\ *position_y*,\\ *tile_type*\nor *id*)\n\n.. code:: ipython3\n\n    tilemap.create_tile_from_palette(0,0,'ground')\n\n\n\nYou can create a complete tile map with **set_all_tiles**\n\n.. code:: ipython3\n\n    tilemap.set_all_tiles([[1,1,1,1,1],\n                           [1,0,0,0,1],\n                           [1,0,0,0,1],\n                           [1,0,0,0,1],\n                           [1,0,0,0,1],\n                           [1,0,0,0,1],\n                           [1,1,1,1,1]])\n\n\n\nA class **TileMap** can have more than one layer of tiles. Negative\nvalues are None.\n\n.. code:: ipython3\n\n    new_layer = tilemap.add_layer()\n    \n    tilemap.set_all_tiles([[-1,-1,-1,-1,-1],\n                           [-1, 4,-1,-1,-1],\n                          ..\n                           [-1,-1,-1, 2,-1],\n                           [-1,-1,-1,-1,-1]],tile_layer=new_layer)\n\n\n\nTo see something tilemap as gameobject needs rendering component\n\n.. code:: ipython3\n\n    tilemap.add(TileMapRenderer(tilemap))\n\nWith class **TileController** a tile can react\n\n.. code:: ipython3\n\n    tilemap.palette.add(TilePaletteItem(4, tile_type='player', image=pygame.image.load('res_tile/player_01.png'),\n                                        tile_controller_class=Player))\n\nClass **Player** is in gameloop update cycle\n\n.. code:: ipython3\n\n    class Player(TileController):\n        def __init__(self,tile:Tile):\n            super().__init__(tile)\n            ..\n            \n        def update(self, delta_time: float):\n            ..\n\nClass **TileController** has some convinient methods.\n\n| ``get_position()`` .. current tile position\n| ``tile = self.get_tile(pos)`` .. get tile at postion\n| ``tile.has_type('ground')`` .. has tile the that type\n| ``set_position(new_pos)``.. change position of tile\n\n\nChangelog\n---------\n\n======= =============\nVersion \n======= =============\n0.1.0   first version\n======= =============\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hebi-python-ninja/wonder",
    "keywords": "game,pygame,game engine,unity,box2d",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wonder",
    "package_url": "https://pypi.org/project/wonder/",
    "platform": "",
    "project_url": "https://pypi.org/project/wonder/",
    "project_urls": {
      "Homepage": "https://github.com/hebi-python-ninja/wonder"
    },
    "release_url": "https://pypi.org/project/wonder/0.1.0/",
    "requires_dist": [
      "pygame",
      "Box2D"
    ],
    "requires_python": "",
    "summary": "Python Game Engine",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11891170,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f197506b32cc574313cb02b0407bb469cb1947f59486adb4f0a53eb87bc71911",
          "md5": "eb948bba92cceae345349b6bf7a9aed8",
          "sha256": "ed6a7355838e3ae8f0d74436a56741ca2c1c9149e1b40fd3429ba71498ad4754"
        },
        "downloads": -1,
        "filename": "wonder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb948bba92cceae345349b6bf7a9aed8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15232,
        "upload_time": "2021-11-01T12:54:28",
        "upload_time_iso_8601": "2021-11-01T12:54:28.775035Z",
        "url": "https://files.pythonhosted.org/packages/f1/97/506b32cc574313cb02b0407bb469cb1947f59486adb4f0a53eb87bc71911/wonder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "599ff7fd201dfe47db2465aecca0cf6319577750b7d096074cfd565a7e783add",
          "md5": "4a58f803d8910e036aa275dab023b732",
          "sha256": "462e9d925831cea4e127ee7db92957126ad2788bd7db08d7d878ef48a7e4ffe7"
        },
        "downloads": -1,
        "filename": "wonder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a58f803d8910e036aa275dab023b732",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15430,
        "upload_time": "2021-11-01T12:54:30",
        "upload_time_iso_8601": "2021-11-01T12:54:30.343759Z",
        "url": "https://files.pythonhosted.org/packages/59/9f/f7fd201dfe47db2465aecca0cf6319577750b7d096074cfd565a7e783add/wonder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f197506b32cc574313cb02b0407bb469cb1947f59486adb4f0a53eb87bc71911",
        "md5": "eb948bba92cceae345349b6bf7a9aed8",
        "sha256": "ed6a7355838e3ae8f0d74436a56741ca2c1c9149e1b40fd3429ba71498ad4754"
      },
      "downloads": -1,
      "filename": "wonder-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb948bba92cceae345349b6bf7a9aed8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15232,
      "upload_time": "2021-11-01T12:54:28",
      "upload_time_iso_8601": "2021-11-01T12:54:28.775035Z",
      "url": "https://files.pythonhosted.org/packages/f1/97/506b32cc574313cb02b0407bb469cb1947f59486adb4f0a53eb87bc71911/wonder-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "599ff7fd201dfe47db2465aecca0cf6319577750b7d096074cfd565a7e783add",
        "md5": "4a58f803d8910e036aa275dab023b732",
        "sha256": "462e9d925831cea4e127ee7db92957126ad2788bd7db08d7d878ef48a7e4ffe7"
      },
      "downloads": -1,
      "filename": "wonder-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4a58f803d8910e036aa275dab023b732",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15430,
      "upload_time": "2021-11-01T12:54:30",
      "upload_time_iso_8601": "2021-11-01T12:54:30.343759Z",
      "url": "https://files.pythonhosted.org/packages/59/9f/f7fd201dfe47db2465aecca0cf6319577750b7d096074cfd565a7e783add/wonder-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}