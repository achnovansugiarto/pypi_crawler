{
  "info": {
    "author": "Tom Vettenburg",
    "author_email": "t.vettenburg@dundee.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "Macroscopic Maxwell Solver\n==========================\n\nIntroduction\n------------\n\nThis Python 3 package enables solving the macroscopic Maxwell equations\nin complex dielectric materials.\n\nThe material properties are defined on a rectangular grid (1D, 2D, or\n3D) for which each voxel defines an isotropic or anisotropic\npermittivity. Optionally, a heterogeneous (anisotropic) permeability as\nwell as bi-anisotropic coupling factors may be specified (e.g. for\nchiral media). The source, such as an incident laser field, is specified\nas an oscillating current-density distribution.\n\nThe method iteratively corrects an estimated solution for the electric\nfield (default: all zero). Its memory requirements are on the order of\nthe storage requirements for the material properties and the electric\nfield within the calculation volume. Full details can be found in the\n`open-access <https://doi.org/10.1364/OE.27.011946>`__ manuscript\n`\"Calculating coherent light-wave propagation in large heterogeneous\nmedia\" <https://doi.org/10.1364/OE.27.011946>`__. Automatic leveraging\nof detected GPU/Cloud is implemented using PyTorch (for further details\n`follow this link <https://arxiv.org/abs/2208.01118>`__).\n\nExamples of usage can be found in `the examples/\nsub-folder <examples>`__. The `Complete MacroMax\nDocumentation <https://macromax.readthedocs.io>`__ can be found at\nhttps://macromax.readthedocs.io. All `source\ncode <https://github.com/corilim/MacroMax>`__ is available on\n`GitHub <https://github.com/corilim/MacroMax>`__ under the `MIT\nLicense <https://opensource.org/licenses/MIT>`__\\ **:**\\ https://opensource.org/licenses/MIT\n\n|PyPI - Python Version| |PyPI - License| |PyPI| |PyPI - Status| |PyPI -\nWheel| |PyPI - Downloads| |GitHub code size in bytes| |GitHub last\ncommit| |Libraries.io dependency status for latest release|\n|Documentation Status|\n\nInstallation\n------------\n\nPrerequisites\n~~~~~~~~~~~~~\n\nThis library requires Python 3 with the ``numpy`` and ``scipy`` packages\nfor the main calculations. These modules will be automatically\ninstalled. The modules ``multiprocessing``, ``torch``, ``pyfftw``, and\n``mkl-fft`` (Intel(R) CPU specific) can significantly speed up the\ncalculations.\n\nThe examples require ``matplotlib`` for displaying the results. In the\ncreation of this package for distribution, the ``pypandoc`` package is\nused for translating this document to other formats. This is only\nnecessary for software development.\n\nThe code has been tested on Python 3.7 and 3.8, though it is expected to\nwork on versions 3.6 and above.\n\nInstalling\n~~~~~~~~~~\n\nInstalling the ``macromax`` package and its mandatory dependencies is as\nstraightforward as running the following command in a terminal:\n\n.. code:: sh\n\n   pip install macromax\n\nWhile this is sufficient to get started, optional packages are useful to\ndisplay the results and to speed-up the calculations.\n\nOptimizing execution speed\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe calculation time can be reduced to a fraction by ensuring you have\nthe fastest libraries installed for your system. Python packages for\nmulti-core CPUs and the FFTW library can be installed with:\n\n.. code:: sh\n\n   pip install macromax multiprocessing pyFFTW\n\nDo note that the `pyFFTW <https://pypi.org/project/pyFFTW/>`__ package\nrequires the `FFTW library <http://www.fftw.org/download.html>`__, and\ndoes not always install automatically. However, it is easy to install it\nusing Anaconda with the commands: ``conda install fftw``, or on\nDebian-based systems with ``sudo apt-get install fftw``.\n\nAlternatively, the `mkl-fft <https://github.com/IntelPython/mkl_fft>`__\npackage is available for Intel(R) CPUs, though it may require\ncompilation or relying on the `Anaconda <https://www.anaconda.com/>`__\nor `Intel\nPython <https://software.intel.com/content/www/us/en/develop/tools/distribution-for-python.html>`__\ndistributions:\n\n.. code:: sh\n\n   conda install -c intel intelpython\n\nNVidia CUDA-enabled GPU can be leveraged to offer an even more\nsignificant boost in efficiency. This can be as simple as installing the\nappropriate `CUDA\ndrivers <https://www.nvidia.co.uk/Download/index.aspx?lang=en-uk>`__ and\nthe PyTorch module following the `PyTorch\nGuide <https://pytorch.org/>`__. Note that for PyTorch to work\ncorrectly, Nvidia drivers need to be up to date and match the installed\nCUDA version. At the time of writing, for CUDA version 11.6, PyTorch can\nbe installed as follows using pip:\n\n.. code:: sh\n\n   pip install torch --extra-index-url https://download.pytorch.org/whl/cu116\n\nSpecifics for your CUDA version and operating system are listed on\n`PyTorch Guide <https://pytorch.org/>`__.\n\nWhen PyTorch and a GPU are detected, these will be used by default. If\nnot, FFTW and mkl-fft will be used if available. NumPy and SciPy will be\nused otherwise. The default backend can be set in your code or by\ncreating a text file named ``backend_config.json`` in the current\nworking directory with contents:\n\n.. code:: json\n\n   [\n     {\"type\": \"torch\", \"device\": \"cuda\"},\n     {\"type\": \"numpy\"}\n   ]\n\nto choose PyTorch with a CUDA GPU if available, and NumPy as a back-up\noption. The latter is usually faster when no GPU is available.\n\nAdditional packages\n^^^^^^^^^^^^^^^^^^^\n\nThe package comes with a submodule containing example code that should\nrun as-is on most desktop installations of Python. Some systems may\nrequire the installation of the ubiquitous ``matplotlib`` graphics\nlibrary:\n\n.. code:: sh\n\n   pip install matplotlib\n\nThe output logs can be colored by installing the coloredlogs packaged:\n\n.. code:: sh\n\n   pip install coloredlogs\n\nBuilding and distributing the library may require further packages as\nindicated below.\n\nUsage\n-----\n\nThe basic calculation procedure consists of the following steps:\n\n1. define the material\n\n2. define the coherent light source\n\n3. call ``solution = macromax.solve(...)``\n\n4. display the solution\n\nThe ``macromax`` package must be imported to be able to use the\n``solve`` function. The package also contains several utility functions\nthat may help in defining the property and source distributions.\n\nExamples can be found in `the examples package in the examples/\nfolder <examples>`__. Ensure that the entire ``examples/`` folder is\ndownloaded, including the ``__init__.py`` file with general definitions.\nRun the examples from the parent folder using e.g.\n``python -m examples.air_glass_air_1D``.\n\nThe complete functionality is described in the `Library Reference\nDocumentation <https://macromax.readthedocs.io>`__ at\nhttps://macromax.readthedocs.io.\n\nLoading the Python 3 package\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``macromax`` package can be imported using:\n\n.. code:: python\n\n   import macromax\n\n**Optional:** If the package is installed without a package manager, it\nmay not be on Python's search path. If necessary, add the library to\nPython's search path, e.g. using:\n\n.. code:: python\n\n   import sys\n   import os\n   sys.path.append(os.path.dirname(os.getcwd()))\n\nReminder: this library requires Python 3, ``numpy``, and ``scipy``.\nOptionally, ``pyfftw`` can be used to speed up the calculations. The\nexamples also require ``matplotlib``.\n\nSpecifying the material\n~~~~~~~~~~~~~~~~~~~~~~~\n\nDefining the sampling grid\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe material properties are sampled on a plaid uniform rectangular grid\nof voxels. The sample points are defined by one or more linearly\nincreasing coordinate ranges, one range per dimensions. The coordinates\nmust be specified in meters, e.g.:\n\n.. code:: python\n\n   import numpy as np\n   x_range = 50e-9 * np.arange(1000)\n\nRanges for multiple dimensions can be passed to ``solve(...)`` as a\ntuple of ranges: ``ranges = (x_range, y_range)``, or the convenience\nobject ``Grid`` in the ``macromax.utils.array`` sub-package. The latter\ncan be used as follows:\n\n.. code:: python\n\n   data_shape = (200, 400)\n   sample_pitch = 50e-9  # or (50e-9, 50e-9)\n   grid = macromax.Grid(data_shape, sample_pitch)\n\nThis defines a uniformly spaced plaid grid, centered around the origin,\nunless specified otherwise.\n\nDefining the material property distributions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe material properties are defined by ndarrays of 2+N dimensions, where\nN can be up to 3 for three-dimensional samples. In each sample point, or\nvoxel, a complex 3x3 matrix defines the anisotropy at that point in the\nsample volume. The first two dimensions of the ndarray are used to store\nthe 3x3 matrix, the following dimensions are the spatial indices x, y,\nand z. Four complex ndarrays can be specified: ``epsilon``, ``mu``,\n``xi``, and ``zeta``. These ndarrays represent the permittivity,\npermeability, and the two coupling factors, respectively.\n\nWhen the first two dimensions of a property are found to be both a\nsingleton, i.e. 1x1, that property is assumed to be isotropic.\nSimilarly, singleton spatial dimensions are interpreted as homogeneity\nin that property. The default permeability ``mu`` is 1, and the coupling\nconstants are zero by default.\n\nBoundary conditions\n'''''''''''''''''''\n\nThe underlying algorithm assumes `periodic boundary\nconditions <https://en.wikipedia.org/wiki/Periodic_boundary_conditions>`__.\nAlternative boundary conditions can be implemented by surrounding the\ncalculation area with absorbing (or reflective) layers. Back reflections\ncan be suppressed by e.g. linearly increasing the imaginary part of the\npermittivity with depth into a boundary with a thickness of a few\nwavelengths.\n\nDefining the source\n~~~~~~~~~~~~~~~~~~~\n\nThe coherent source is defined by as a spatially-variant free current\ndensity. Although the current density may be non-zero in all of space,\nit is more common to define a source at one of the edges of the volume,\nto model e.g. an incident laser beam; or even as a single voxel, to\nsimulate a dipole emitter. The source density can be specified as a\ncomplex number, indicating the phase and amplitude of the current at\neach point. If an extended source is defined, care should be taken so\nthat the source currents constructively interfere in the desired\ndirection. I.e. the current density at neighboring voxels should have a\nphase difference matching the k-vector in the background medium.\nOptionally, instead of a current density, the internally-used source\ndistribution may be specified directly. It is related to the current\ndensity as follows: ``S = i omega mu_0 J`` with units of rad s^-1 H m^-1\nA m^-2 = rad V m^-3, where ``omega`` is the angular frequency, and\n``mu_0`` is the vacuum permeability, mu_0.\n\nThe source distribution is stored as a complex ndarray with 1+N\ndimensions. The first dimension contains the current 3D direction and\namplitude for each voxel. The complex argument indicates the relative\nphase at each voxel.\n\nCalculating the electromagnetic light field\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOnce the ``macromax`` module is imported, the solution satisfying the\nmacroscopic Maxwell's equations is calculated by calling:\n\n.. code:: python\n\n   solution = macromax.solve(...)\n\nThe function arguments to ``macromax.solve(...)`` can be the following:\n\n-  ``grid|x_range``: A Grid object, a vector (1D), or tuple of vectors\n   (2D, or 3D) indicating the spatial coordinates of the sample points.\n   Each vector must be a uniformly increasing array of coordinates,\n   sufficiently dense to avoid aliasing artefacts.\n\n-  ``vacuum_wavelength|wave_number|anguler_frequency``: The wavelength\n   in vacuum of the coherent illumination in units of meters.\n\n-  ``current_density`` or ``source_distribution``: An ndarray of complex\n   values indicating the source value and direction at each sample\n   point. The source values define the free current density in the\n   sample. The first dimension contains the vector index, the following\n   dimensions contain the spatial dimensions. If the source distribution\n   is not specified, it is calculated as :math:``-i c k0 mu_0 J``, where\n   ``i`` is the imaginary constant, ``c``, ``k0``, and ``mu_0``, the\n   light-speed, wavenumber, and permeability in vacuum. Finally, ``J``\n   is the free current density (excluding the movement of bound charges\n   in a dielectric), specified as the input argument current_density.\n   These input arguments should be ``numpy.ndarray``\\ s with a shape as\n   specified by the ``grid`` input argument, or have one extra dimension\n   on the left to indicate the polarization. If polarization is not\n   specified the solution to the *scalar* wave equation is calculated.\n   However, when polarization is specified the *vectorial* problem is\n   solved. The returned ``macromax.Solution`` object has the property\n   ``vectorial`` to indicate whether polarization is accounted for or\n   not.\n\n-  ``refractive_index``: A complex ``numpy.ndarray`` of a shape as\n   indicated by the ``grid`` argument. Each value indicates the\n   refractive at the corresponding spatial grid point. Real values\n   indicate a loss-less material. A positive imaginary part indicates\n   the absorption coefficient, :math:``\\kappa``. This input argument is\n   not required if the permittivity, ``epsilon`` is specified.\n\n-  ``epsilon``: (optional, default: :math:``n^2``) A complex\n   ``numpy.ndarray`` of a shape as indicated by the ``grid`` argument\n   for *isotropic* media, or a shape with two extra dimensions on the\n   left to indicate *anisotropy/birefringence*. The array values\n   indicate the relative permittivity at all sample points in space. The\n   optional two first (left-most) dimensions may contain a 3x3 matrix at\n   each spatial location to indicate the anisotropy/birefringence. By\n   default the 3x3 identity matrix is assumed, scaled by the scalar\n   value of the array without the first two dimensions. Real values\n   indicate loss-less permittivity. This input argument is unit-less, it\n   is relative to the vacuum permittivity.\n\nOptionally one can also specify magnetic and coupling factors:\n\n-  ``mu``: A complex ndarray that defines the 3x3 permeability matrix at\n   all sample points. The first two dimensions contain the matrix\n   indices, the following dimensions contain the spatial dimensions.\n\n-  ``xi`` and ``zeta``: Complex ndarray that define the 3x3 coupling\n   matrices at all sample points. This may be useful to model chiral\n   materials. The first two dimensions contain the matrix indices, the\n   following dimensions contain the spatial dimensions.\n\nIt is often useful to also specify a callback function that tracks\nprogress. This can be done by defining the ``callback``-argument as a\nfunction that takes an intermediate solution as argument. This\nuser-defined callback function can display the intermediate solution and\ncheck if the convergence is adequate. The callback function should\nreturn ``True`` if more iterations are required, and ``False``\notherwise. E.g.:\n\n.. code:: python\n\n   callback=lambda s: s.residue > 0.01 and s.iteration < 1000\n\nwill iterate until the residue is at most 1% or until the number of\niterations reaches 1,000.\n\nThe solution object (of the Solution class) fully defines the state of\nthe iteration and the current solution as described below.\n\nThe ``macromax.solve(...)`` function returns a solution object. This\nobject contains the electric field vector distribution as well as\ndiagnostic information such as the number of iterations used and the\nmagnitude of the correction applied in the last iteration. It can also\ncalculate the displacement, magnetizing, and magnetic fields on demand.\nThese fields can be queried as follows:\n\n-  ``solution.E``: Returns the electric field distribution.\n-  ``solution.H``: Returns the magnetizing field distribution.\n-  ``solution.D``: Returns the electric displacement field distribution.\n-  ``solution.B``: Returns the magnetic flux density distribution.\n-  ``solution.S``: The Poynting vector distribution in the sample.\n\nThe field distributions are returned as complex ``numpy`` ndarrays in\nwhich the first dimensions is the polarization or direction index. The\nfollowing dimensions are the spatial dimensions of the problem, e.g. x,\ny, and z, for three-dimensional problems.\n\nThe solution object also keeps track of the iteration itself. It has the\nfollowing diagnostic properties:\n\n-  ``solution.iteration``: The number of iterations performed.\n-  ``solution.residue``: The relative magnitude of the correction during\n   the previous iteration. and it can be used as a Python iterator.\n\nFurther information can be found in the\n`examples <https://github.com/corilim/MacroMax/python/examples/>`__ and\nthe `signatures of each function and\nclass <https://github.com/corilim/MacroMax/python/macromax/>`__.\n\nComplete Example\n~~~~~~~~~~~~~~~~\n\nThe following code loads the library, defines the material and light\nsource, calculates the result, and displays it. To keep this example as\nsimple as possible, the calculation is limited to one dimension. Higher\ndimensional calculations simply require the definition of the material\nand light source in 2D or 3D.\n\nThe first section of the code loads the ``macromax`` library module as\nwell as its ``utils`` submodule. More\n\n.. code:: python\n\n   import macromax\n\n   import numpy as np\n   import matplotlib.pyplot as plt\n   # %matplotlib notebook  # Uncomment this line in an iPython Jupyter notebook\n\n   #\n   # Define the material properties\n   #\n   wavelength = 500e-9  # [ m ] In SI units as everything else here\n   source_polarization = np.array([0, 1, 0])[:, np.newaxis]  # y-polarized\n\n   # Set the sampling grid\n   nb_samples = 1024\n   sample_pitch = wavelength / 10  # [ m ]  # Sub-sample for display\n   boundary_thickness = 5e-6  # [ m ]\n   x_range = sample_pitch * np.arange(nb_samples) - boundary_thickness  # [ m ]\n\n   # Define the medium as a spatially-variant permittivity\n   # Don't forget absorbing boundary:\n   dist_in_boundary = np.maximum(0, np.maximum(-x_range,\n                                               x_range - (x_range[-1] - boundary_thickness)\n                                               ) / boundary_thickness)\n   permittivity = 1.0 + 0.25j * dist_in_boundary  # unit-less, relative to vacuum permittivity\n   # glass has a refractive index of about 1.5\n   permittivity[(x_range >= 20e-6) & (x_range < 30e-6)] += 1.5**2\n   permittivity = permittivity[np.newaxis, np.newaxis, ...]  # Define an isotropic material\n\n   #\n   # Define the illumination source\n   #\n   # point source at x = 0\n   current_density = source_polarization * (np.abs(x_range) < sample_pitch/4)\n\n   #\n   # Solve Maxwell's equations\n   #\n   # (the actual work is done in this line)\n   solution = macromax.solve(x_range, vacuum_wavelength=wavelength,\n                             current_density=current_density, epsilon=permittivity)\n\n   #\n   # Display the results\n   #\n   fig, ax = plt.subplots(2, 1, frameon=False, figsize=(8, 6))\n\n   x_range = solution.grid[0]  # coordinates\n   E = solution.E[1, :]  # Electric field in y\n   H = solution.H[2, :]  # Magnetizing field in z\n   S = solution.S_forw[0, :]  # Poynting vector in x\n   f = solution.f[0, :]  # Optical force in x\n   # Display the field for the polarization dimension\n   field_to_display = E\n   max_val_to_display = np.amax(np.abs(field_to_display))\n   poynting_normalization = np.amax(np.abs(S)) / max_val_to_display\n   ax[0].plot(x_range * 1e6,\n              np.abs(field_to_display) ** 2 / max_val_to_display,\n              color=[0, 0, 0])\n   ax[0].plot(x_range * 1e6, np.real(S) / poynting_normalization,\n              color=[1, 0, 1])\n   ax[0].plot(x_range * 1e6, np.real(field_to_display),\n              color=[0, 0.7, 0])\n   ax[0].plot(x_range * 1e6, np.imag(field_to_display),\n              color=[1, 0, 0])\n   figure_title = \"Iteration %d, \" % solution.iteration\n   ax[0].set_title(figure_title)\n   ax[0].set_xlabel(\"x  [$\\mu$m]\")\n   ax[0].set_ylabel(\"I, E  [a.u., V/m]\")\n   ax[0].set_xlim(x_range[[0, -1]] * 1e6)\n\n   ax[1].plot(x_range[-1] * 2e6, 0,\n              color=[0, 0, 0], label='I')\n   ax[1].plot(x_range[-1] * 2e6, 0,\n              color=[1, 0, 1], label='$S_{real}$')\n   ax[1].plot(x_range[-1] * 2e6, 0,\n              color=[0, 0.7, 0], label='$E_{real}$')\n   ax[1].plot(x_range[-1] * 2e6, 0,\n              color=[1, 0, 0], label='$E_{imag}$')\n   ax[1].plot(x_range * 1e6, permittivity[0, 0].real,\n              color=[0, 0, 1], label='$\\epsilon_{real}$')\n   ax[1].plot(x_range * 1e6, permittivity[0, 0].imag,\n              color=[0, 0.5, 0.5], label='$\\epsilon_{imag}$')\n   ax[1].set_xlabel('x  [$\\mu$m]')\n   ax[1].set_ylabel('$\\epsilon$')\n   ax[1].set_xlim(x_range[[0, -1]] * 1e6)\n   ax[1].legend(loc='upper right')\n\n   plt.show(block=True)  # Not needed for iPython Jupyter notebook\n\nOptimization of time and memory efficiency\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nElectromagnetic calculations tend to test the limits of the hardware.\nTwo factors should be considered when optimizing the calculation:\ncomputation and memory. Naturally, the number of operations and the\nduration of each operation should be minimized. However, the latter is\noften dominated by memory accesses and copying of arrays. The memory\nusage therefore does not only affect the size of the problems that can\nbe solved, it also tends to have an important impact on the total\ncalculation time.\n\nA straightforward method to reduce memory usage is to switch from\n128-bit precision complex numbers to 64-bit. By default, the precision\nof the source_density is used, which is typically ``np.complex128`` or\nits real equivalent. The ``Solution``'s default ``dtype`` can be\noverridden by specifying it as ``solve(... dtype=np.complex64)``.\nHalving the storage requirements can eliminate additional copies between\nthe main memory and CPU cache. In extreme cases it can also avoid\nswapping. Lower precision math also executes faster on many\narchitectures.\n\nWhile oversampling to less than 1/10th of the wavelength may aid\nvisualization, it is often sufficient to sample at a quarter of the\nwavelength. The sample solution represents a sinc-interpolated\ncontinuous function. The final result can be visualized with arbitrary\nresolution using interpolation.\n\nThe number of operations can be kept to a minimum by:\n\n-  using non-magnetic and non-chiral materials,\n-  using isotropic materials,\n-  limiting the largest difference in permittivity (including the\n   absorbing boundary), and\n-  using a scalar approximation whenever possible.\n\nOptimization of the implementation is another route to consider.\nPotentially areas of improvement are:\n\n-  Profiling of memory usage and elimination of redundant temporary\n   copies\n-  In-place fast-Fourier transforms. When available, the\n   `FFTW <http://fftw.org/>`__ library is used; however, the drop-in fft\n   and ifft replacements are used at the moment.\n-  Moving the calculations to a GPU or a cloud-computing environment.\n   Since the copying-overheads may quickly become a bottleneck, it is\n   important to consider the memory requirements for the problem you\n   want to solve.\n\nDevelopment\n-----------\n\nThe `Library API Documentation <https://macromax.readthedocs.io>`__ can\nbe found at https://macromax.readthedocs.io.\n\nSource code organization\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe source code is organized as follows:\n\n-  `/ <.>`__ (root): Module description and distribution files.\n-  `macromax/ <macromax/>`__: The iterative solver.\n\n   -  `macromax/utils/ <macromax/utils/>`__: Helper functionality used\n      in the solver and to use the solver.\n\n-  `examples/ <examples/>`__: Examples of how the solver can be used.\n-  `tests/ <tests/>`__: Automated unit tests of the solver's\n   functionality. Use this after making modifications to the solver and\n   extend it if new functionality is added.\n\nThe library functions are contained in ``macromax/``:\n\n-  `solver <macromax/solver.py>`__: Defines the ``solve(...)`` function\n   and the ``Solution`` class.\n-  `backend <macromax/backend/numpy.py>`__: Defines linear algebra\n   functions to work efficiently with large arrays of 3x3 matrices and\n   3-vectors.\n-  `utils/ <macromax/utils/>`__: Defines utility functions that can be\n   used to prepare and interpret function arguments.\n\nThe included examples in the `examples/ <examples/>`__ folder are:\n\n-  `notebook_example.ipynb <examples/notebook_example.ipynb>`__: An\n   iPython notebook demonstrating basic usage of the library.\n-  `air_glass_air_1D.py <examples/air_glass_air_1D.py>`__: Calculation\n   of the back reflection from an air-glass interface (one-dimensional\n   calculation)\n-  `air_glass_air_2D.py <examples/air_glass_air_2D.py>`__: Calculation\n   of the refraction and reflection of light hitting a glass window at\n   an angle (two-dimensional calculation)\n-  `birefringent_crystal.py <examples/birefringent_crystal.py>`__:\n   Demonstration of how an anisotropic permittivity can split a\n   diagonally polarized Gaussian beam into ordinary and extraordinary\n   beams.\n-  `polarizer.py <examples/polarizer.py>`__: Calculation of light wave\n   traversing a set of two and a set of three polarizers as a\n   demonstration of anisotropic absorption (non-Hermitian permittivity)\n-  `rutile.py <examples/rutile.py>`__: Scattering from disordered\n   collection of birefringent rutile (TiO2) particles.\n-  `benchmark.py <examples/benchmark.py>`__: Timing of a simple\n   two-dimensional calculation for comparison between versions.\n\nTesting\n~~~~~~~\n\nUnit tests are contained in ``macromax/tests``. The ``BackEnd`` class in\n``backend.py`` is well covered and specific tests have been written for\nthe ``Solution`` class in ``solver.py``.\n\nTo run the tests, make sure that the ``nose`` package is installed, and\nrun the following commands from the ``Macromax/python/`` directory:\n\n.. code:: sh\n\n   pip install nose\n   nosetests -v tests\n\nBuilding and Distributing\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `source code <https://github.com/corilim/MacroMax>`__ consists of\npure Python 3, hence only packaging is required for distribution. A\npackage is generated by ``setup.py``, which relies on the ``pypandoc``\npackage:\n\n.. code:: sh\n\n   pip install pypandoc\n\nPlease refer to: https://pypi.org/project/pypandoc/ for instructions on\nits installation for your operating system of choice.\n\nTo prepare a package for distribution, increase the ``__version__``\nnumber in `macromax/__init__.py <macromax/__init__.py>`__, and run:\n\n.. code:: sh\n\n   python setup.py sdist bdist_wheel\n   pip install . --upgrade\n\nThe second line installs the newly-forged ``macromax`` package for\ntesting.\n\nThe package can then be uploaded to a test repository as follows:\n\n.. code:: sh\n\n   pip install twine\n   twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n\nInstalling from the test repository is done as follows:\n\n.. code:: sh\n\n   pip install -i https://test.pypi.org/simple/ macromax --upgrade\n\nTo facilitate importing the code, IntelliJ IDEA/PyCharm project files\ncan be found in ``MacroMax/python/``: ``MacroMax/python/python.iml`` and\nthe folder ``MacroMax/python/.idea``.\n\n.. |PyPI - Python Version| image:: https://img.shields.io/pypi/pyversions/macromax\n   :target: https://www.python.org/downloads\n.. |PyPI - License| image:: https://img.shields.io/pypi/l/macromax\n   :target: https://opensource.org/licenses/MIT\n.. |PyPI| image:: https://img.shields.io/pypi/v/macromax?label=version&color=808000\n   :target: https://github.com/corilim/MacroMax/tree/master/python\n.. |PyPI - Status| image:: https://img.shields.io/pypi/status/macromax\n   :target: https://pypi.org/project/macromax/tree/master/python\n.. |PyPI - Wheel| image:: https://img.shields.io/pypi/wheel/macromax?label=python%20wheel\n   :target: https://pypi.org/project/macromax/#files\n.. |PyPI - Downloads| image:: https://img.shields.io/pypi/dm/macromax\n   :target: https://pypi.org/project/macromax/\n.. |GitHub code size in bytes| image:: https://img.shields.io/github/languages/code-size/corilim/MacroMax\n   :target: https://github.com/corilim/MacroMax\n.. |GitHub last commit| image:: https://img.shields.io/github/last-commit/corilim/MacroMax\n   :target: https://github.com/corilim/MacroMax\n.. |Libraries.io dependency status for latest release| image:: https://img.shields.io/librariesio/release/pypi/macromax\n   :target: https://libraries.io/pypi/macromax\n.. |Documentation Status| image:: https://readthedocs.org/projects/macromax/badge/?version=latest\n   :target: https://readthedocs.org/projects/macromax\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "light electromagnetic propagation anisotropy magnetic chiral optics Maxwell scattering heterogeneous",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "macromax",
    "package_url": "https://pypi.org/project/macromax/",
    "platform": null,
    "project_url": "https://pypi.org/project/macromax/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/macromax/0.2.1/",
    "requires_dist": [
      "numpy",
      "scipy"
    ],
    "requires_python": ">=3.6",
    "summary": "Library for solving macroscopic Maxwell's equations for electromagnetic waves in gain-free heterogeneous (bi-)(an)isotropic (non)magnetic materials. This is of particular interest to calculate the light field within complex, scattering, tissues.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15288497,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d891437bd6248e4aa38a09ee99037dbea9a159083771b6cbc0fc6bfd9cac7225",
          "md5": "4e6e641b70ef34bcc0990e810da50c40",
          "sha256": "7412d7d62dc1451049ac1a2aaad2338df0c24fdf4a7aec8525c2e512c2a6c2e0"
        },
        "downloads": -1,
        "filename": "macromax-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e6e641b70ef34bcc0990e810da50c40",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 55908,
        "upload_time": "2018-12-29T18:33:36",
        "upload_time_iso_8601": "2018-12-29T18:33:36.531872Z",
        "url": "https://files.pythonhosted.org/packages/d8/91/437bd6248e4aa38a09ee99037dbea9a159083771b6cbc0fc6bfd9cac7225/macromax-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79e7438b6fddfbb25076bea70a129037ab4310cd1b522719af476589cfacebb5",
          "md5": "5c2a42a766012a33ba5115fe9827dada",
          "sha256": "6b4b699f3b6dd0324361a154d1fe03e9b984d0853b3c4048b6a197998a5a5db9"
        },
        "downloads": -1,
        "filename": "macromax-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5c2a42a766012a33ba5115fe9827dada",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 233429,
        "upload_time": "2018-12-29T18:33:43",
        "upload_time_iso_8601": "2018-12-29T18:33:43.871219Z",
        "url": "https://files.pythonhosted.org/packages/79/e7/438b6fddfbb25076bea70a129037ab4310cd1b522719af476589cfacebb5/macromax-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3561441c9d0fa9c1ed59f10c8fe6c9384d4774081ab662452bfcaba25449dce6",
          "md5": "e3f77a785947349c2f857ad0b17a6bc8",
          "sha256": "79dcf5b65e1e755b1d753b03866518a21fc089f386c5c146995324f86492a91b"
        },
        "downloads": -1,
        "filename": "macromax-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3f77a785947349c2f857ad0b17a6bc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 56741,
        "upload_time": "2019-01-17T18:18:33",
        "upload_time_iso_8601": "2019-01-17T18:18:33.007778Z",
        "url": "https://files.pythonhosted.org/packages/35/61/441c9d0fa9c1ed59f10c8fe6c9384d4774081ab662452bfcaba25449dce6/macromax-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e170260b046ba628c37adbe7539bd73781a7624b839822c1ae33cbf883b4984",
          "md5": "495784d862cc902367628b98f6f5d0f9",
          "sha256": "3689ca493a9a4822ce58733d59697cb228598110b93c2712599d313b855f74ba"
        },
        "downloads": -1,
        "filename": "macromax-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "495784d862cc902367628b98f6f5d0f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 52819,
        "upload_time": "2019-01-17T18:18:34",
        "upload_time_iso_8601": "2019-01-17T18:18:34.701881Z",
        "url": "https://files.pythonhosted.org/packages/7e/17/0260b046ba628c37adbe7539bd73781a7624b839822c1ae33cbf883b4984/macromax-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bce0b7b3424d41fbd8f3aa24e77006bf6c34354949624a3a3478b8086db9e06b",
          "md5": "e5027f4bb28532bc5a7d95eb3945085a",
          "sha256": "8969e1776444b9f96b341c64adc86f848ab0412be18391fdf7caec706e1300d3"
        },
        "downloads": -1,
        "filename": "macromax-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5027f4bb28532bc5a7d95eb3945085a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 61101,
        "upload_time": "2019-09-11T20:59:43",
        "upload_time_iso_8601": "2019-09-11T20:59:43.299589Z",
        "url": "https://files.pythonhosted.org/packages/bc/e0/b7b3424d41fbd8f3aa24e77006bf6c34354949624a3a3478b8086db9e06b/macromax-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f21591c832b64ad9341d991a8a2ca1e8daafccd44c36056aafed5f2c2a349724",
          "md5": "fae75ea5a696f1664d16eb5caf127423",
          "sha256": "f32d217b413b1634475b15e3b381b9e0ad9cc3164ce3fc601d92954ad4dbe67f"
        },
        "downloads": -1,
        "filename": "macromax-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "fae75ea5a696f1664d16eb5caf127423",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 51400,
        "upload_time": "2019-09-11T20:59:45",
        "upload_time_iso_8601": "2019-09-11T20:59:45.445044Z",
        "url": "https://files.pythonhosted.org/packages/f2/15/91c832b64ad9341d991a8a2ca1e8daafccd44c36056aafed5f2c2a349724/macromax-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abd60314c7f195ef6c5c43cd3f544984539d04ee8b730c5d4964025973b4501b",
          "md5": "ffe40ee1cf0f4abcc449778494743eac",
          "sha256": "f105aeda4a2d943e0917d92405dbe002583c87857eda4fa03b494d0d0c8715a2"
        },
        "downloads": -1,
        "filename": "macromax-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffe40ee1cf0f4abcc449778494743eac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 38967,
        "upload_time": "2020-05-24T18:17:35",
        "upload_time_iso_8601": "2020-05-24T18:17:35.180968Z",
        "url": "https://files.pythonhosted.org/packages/ab/d6/0314c7f195ef6c5c43cd3f544984539d04ee8b730c5d4964025973b4501b/macromax-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "871e311f5ad538c0b7aea533cb8f18f4578eaf58fe2cd68a7d5d96736afb5286",
          "md5": "97035fd899dd4bb37ef29fa25fdcf4a8",
          "sha256": "5e62e0590fefc068bfd8abf8f57cfa71a14d5f4df4eba2505885956d55ce5867"
        },
        "downloads": -1,
        "filename": "macromax-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "97035fd899dd4bb37ef29fa25fdcf4a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 72231,
        "upload_time": "2020-05-24T18:17:41",
        "upload_time_iso_8601": "2020-05-24T18:17:41.892194Z",
        "url": "https://files.pythonhosted.org/packages/87/1e/311f5ad538c0b7aea533cb8f18f4578eaf58fe2cd68a7d5d96736afb5286/macromax-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e979157296d2c27a24a263e3f50934097c9b33a54fc75cc5bd63de811dda409a",
          "md5": "09ff6edfa5ace2d189a476c26dae4764",
          "sha256": "7ce1ba1049473906ba4b226cf5047563ae4e88961cd13caf82325a5f28307fab"
        },
        "downloads": -1,
        "filename": "macromax-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09ff6edfa5ace2d189a476c26dae4764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 78203,
        "upload_time": "2020-11-09T19:51:54",
        "upload_time_iso_8601": "2020-11-09T19:51:54.261389Z",
        "url": "https://files.pythonhosted.org/packages/e9/79/157296d2c27a24a263e3f50934097c9b33a54fc75cc5bd63de811dda409a/macromax-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "60ac97c58ca5a338e865ce3377091fd560e826f74e87c98337e7ad26da9ccf93",
          "md5": "c5c9b2227678750baebec66655dee753",
          "sha256": "a7d2fce48a7bc002870c5e5530fd972ffa47fbd1b942002d3232c1bf843707e7"
        },
        "downloads": -1,
        "filename": "macromax-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c5c9b2227678750baebec66655dee753",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 76088,
        "upload_time": "2020-11-09T19:51:56",
        "upload_time_iso_8601": "2020-11-09T19:51:56.468295Z",
        "url": "https://files.pythonhosted.org/packages/60/ac/97c58ca5a338e865ce3377091fd560e826f74e87c98337e7ad26da9ccf93/macromax-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d72578b91921dd0f319a9aaae725ee4617e00841788ed66ce09e1a89f1704f0",
          "md5": "96f40bf51d9183400a2c3260878b8b18",
          "sha256": "3096f9b5eab1d3a30407558aa8512bc56be1dc615a45cdb96119699f89e865a7"
        },
        "downloads": -1,
        "filename": "macromax-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96f40bf51d9183400a2c3260878b8b18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 80400,
        "upload_time": "2020-11-10T17:05:34",
        "upload_time_iso_8601": "2020-11-10T17:05:34.806706Z",
        "url": "https://files.pythonhosted.org/packages/2d/72/578b91921dd0f319a9aaae725ee4617e00841788ed66ce09e1a89f1704f0/macromax-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc4a619d11a898aecd48677e92755150e203c6bb4308859ff00999e895da8ee3",
          "md5": "423d905db065e49858ef0cafd5ed6c3c",
          "sha256": "772de485686a36cfe912fa6c0f3111b957bfdda974fb2af0e6372541c4843052"
        },
        "downloads": -1,
        "filename": "macromax-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "423d905db065e49858ef0cafd5ed6c3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 78282,
        "upload_time": "2020-11-10T17:05:37",
        "upload_time_iso_8601": "2020-11-10T17:05:37.165761Z",
        "url": "https://files.pythonhosted.org/packages/bc/4a/619d11a898aecd48677e92755150e203c6bb4308859ff00999e895da8ee3/macromax-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "002e4e079af25c0ca8a304a3ca8015e215b594221a4a5257ec086e44b5f97e6a",
          "md5": "11160e98a10d2d2776243058cf342887",
          "sha256": "281c89576e6d5bfddde8b26a2ebaa27ee5f44d41b4646d17026d4b30c99b5929"
        },
        "downloads": -1,
        "filename": "macromax-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11160e98a10d2d2776243058cf342887",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 50517,
        "upload_time": "2020-11-18T15:13:18",
        "upload_time_iso_8601": "2020-11-18T15:13:18.151058Z",
        "url": "https://files.pythonhosted.org/packages/00/2e/4e079af25c0ca8a304a3ca8015e215b594221a4a5257ec086e44b5f97e6a/macromax-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c05ba902313c1a3c1ff675ff03db5a2b0ac0a68970e2e4d564208f221983414",
          "md5": "25e49820a9fb5a812eaf69df815f76e5",
          "sha256": "28bb59eaf7d4041015921e579a2c37c33c57b7bc9fbed27806075e6d171731be"
        },
        "downloads": -1,
        "filename": "macromax-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "25e49820a9fb5a812eaf69df815f76e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 90420,
        "upload_time": "2020-11-18T15:13:20",
        "upload_time_iso_8601": "2020-11-18T15:13:20.124488Z",
        "url": "https://files.pythonhosted.org/packages/7c/05/ba902313c1a3c1ff675ff03db5a2b0ac0a68970e2e4d564208f221983414/macromax-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a2b857daf3986a3c9110b0e7e075fc11470eada2658c5e3d8cb29f7dbcff087",
          "md5": "99bd09a37ab27b57f72609fa695301d7",
          "sha256": "63e6ec13ae9eab1f3930873fe5bb05786fd0c11c1fcfd3f02ee62acab7aff9ab"
        },
        "downloads": -1,
        "filename": "macromax-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99bd09a37ab27b57f72609fa695301d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 81400,
        "upload_time": "2022-08-10T10:51:16",
        "upload_time_iso_8601": "2022-08-10T10:51:16.067480Z",
        "url": "https://files.pythonhosted.org/packages/4a/2b/857daf3986a3c9110b0e7e075fc11470eada2658c5e3d8cb29f7dbcff087/macromax-0.1.6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "import error"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93596cde551c64733107aef5f8108fda461157dd39805b8c61fc72b58d78c806",
          "md5": "cb277276c2140b7929dedb68281b1e07",
          "sha256": "297d87f81d90cd14d21e71d55ffa0cd27fece4d3d6ea925478179f15b546f3c1"
        },
        "downloads": -1,
        "filename": "macromax-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cb277276c2140b7929dedb68281b1e07",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 123021,
        "upload_time": "2022-08-10T10:51:18",
        "upload_time_iso_8601": "2022-08-10T10:51:18.475537Z",
        "url": "https://files.pythonhosted.org/packages/93/59/6cde551c64733107aef5f8108fda461157dd39805b8c61fc72b58d78c806/macromax-0.1.6.tar.gz",
        "yanked": true,
        "yanked_reason": "import error"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e18128dfeba900683fc6983744a14edc2e38bf9caf941cdb42c8d74b9edd567f",
          "md5": "a2b183669a85ba7c9373fe9e8a129532",
          "sha256": "64ede9704016a795910f833def2cbdeb0d6b2b0715bb95bb941dbb2583bc5009"
        },
        "downloads": -1,
        "filename": "macromax-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2b183669a85ba7c9373fe9e8a129532",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 81401,
        "upload_time": "2022-08-10T11:06:03",
        "upload_time_iso_8601": "2022-08-10T11:06:03.829479Z",
        "url": "https://files.pythonhosted.org/packages/e1/81/28dfeba900683fc6983744a14edc2e38bf9caf941cdb42c8d74b9edd567f/macromax-0.1.7-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "import error"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d420b0a6c77d61a4ffc72f725e1ad9f67e0f1e876e5e6c471cab3873181e0188",
          "md5": "b948542734f29c9f5207099f7732e076",
          "sha256": "9ee2a11aa783dc8a3619c156d0d5008777273fc0576973321112e296c4d5d530"
        },
        "downloads": -1,
        "filename": "macromax-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b948542734f29c9f5207099f7732e076",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 122265,
        "upload_time": "2022-08-10T11:06:07",
        "upload_time_iso_8601": "2022-08-10T11:06:07.623908Z",
        "url": "https://files.pythonhosted.org/packages/d4/20/b0a6c77d61a4ffc72f725e1ad9f67e0f1e876e5e6c471cab3873181e0188/macromax-0.1.7.tar.gz",
        "yanked": true,
        "yanked_reason": "import error"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a083068704356483d892edad7eaea98d0f206d027c10cafdb80eb1c2d993669",
          "md5": "838343bf18a5282bb897dd3227f62a36",
          "sha256": "dcd8f1cd2ceedadbab2335e8a623f8db7e445a804d905e43a5a367236d3ee93b"
        },
        "downloads": -1,
        "filename": "macromax-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "838343bf18a5282bb897dd3227f62a36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 98591,
        "upload_time": "2022-08-15T11:38:53",
        "upload_time_iso_8601": "2022-08-15T11:38:53.751049Z",
        "url": "https://files.pythonhosted.org/packages/7a/08/3068704356483d892edad7eaea98d0f206d027c10cafdb80eb1c2d993669/macromax-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65ee64b4e0276273ed6bc8907d92c765c5c6971d9937d57923ea9cbb5ef3bbc8",
          "md5": "40c6bf20f8ab644b8c6e256b74beb869",
          "sha256": "5860bdb0509a32c14a2a709d01d6b50eb4827cd588d3825531a15560816bc81c"
        },
        "downloads": -1,
        "filename": "macromax-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40c6bf20f8ab644b8c6e256b74beb869",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 96525,
        "upload_time": "2022-08-15T11:38:57",
        "upload_time_iso_8601": "2022-08-15T11:38:57.097278Z",
        "url": "https://files.pythonhosted.org/packages/65/ee/64b4e0276273ed6bc8907d92c765c5c6971d9937d57923ea9cbb5ef3bbc8/macromax-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a9e1d9e1d5be2412750e58786abd3a3765f6127e0745aff2e002c662f953a12",
          "md5": "b85f64a68eda389209dd92162aeabd29",
          "sha256": "5ef432947553a1fcfd9d071084f565e553dfecb53e3ac8d57e5fc3e18c44bbdf"
        },
        "downloads": -1,
        "filename": "macromax-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b85f64a68eda389209dd92162aeabd29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 98891,
        "upload_time": "2022-10-03T11:47:42",
        "upload_time_iso_8601": "2022-10-03T11:47:42.986321Z",
        "url": "https://files.pythonhosted.org/packages/1a/9e/1d9e1d5be2412750e58786abd3a3765f6127e0745aff2e002c662f953a12/macromax-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d99e9a4d779078348ca504fef7ad7455e9faf2760aeaa7438a1add3cf3661771",
          "md5": "ffb82631ab884f0331360fb4919ea1af",
          "sha256": "3b4c25d10567af672f3115b51da901c35e71ca3c74f76c1124123368838f8aef"
        },
        "downloads": -1,
        "filename": "macromax-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ffb82631ab884f0331360fb4919ea1af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 103771,
        "upload_time": "2022-10-03T11:47:45",
        "upload_time_iso_8601": "2022-10-03T11:47:45.076765Z",
        "url": "https://files.pythonhosted.org/packages/d9/9e/9a4d779078348ca504fef7ad7455e9faf2760aeaa7438a1add3cf3661771/macromax-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1a9e1d9e1d5be2412750e58786abd3a3765f6127e0745aff2e002c662f953a12",
        "md5": "b85f64a68eda389209dd92162aeabd29",
        "sha256": "5ef432947553a1fcfd9d071084f565e553dfecb53e3ac8d57e5fc3e18c44bbdf"
      },
      "downloads": -1,
      "filename": "macromax-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b85f64a68eda389209dd92162aeabd29",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 98891,
      "upload_time": "2022-10-03T11:47:42",
      "upload_time_iso_8601": "2022-10-03T11:47:42.986321Z",
      "url": "https://files.pythonhosted.org/packages/1a/9e/1d9e1d5be2412750e58786abd3a3765f6127e0745aff2e002c662f953a12/macromax-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d99e9a4d779078348ca504fef7ad7455e9faf2760aeaa7438a1add3cf3661771",
        "md5": "ffb82631ab884f0331360fb4919ea1af",
        "sha256": "3b4c25d10567af672f3115b51da901c35e71ca3c74f76c1124123368838f8aef"
      },
      "downloads": -1,
      "filename": "macromax-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ffb82631ab884f0331360fb4919ea1af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 103771,
      "upload_time": "2022-10-03T11:47:45",
      "upload_time_iso_8601": "2022-10-03T11:47:45.076765Z",
      "url": "https://files.pythonhosted.org/packages/d9/9e/9a4d779078348ca504fef7ad7455e9faf2760aeaa7438a1add3cf3661771/macromax-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}