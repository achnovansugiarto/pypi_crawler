{
  "info": {
    "author": "Antony Redman",
    "author_email": "RumataYounger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# FRAMEDORK.PY\n\nAn attempt to learn how frameworks like Django or Flask work internally by trying to implement my own version.\n***WARNING - this is by no means a production ready code and is not even supposed to be used in production. Changes might be applied to the codebase without any notice, so use cautiously***\n\n>**New in 0.2.0: we've refactored all of our code into the OOP, so the code created for the earlier version of the framedork will not work. Please refactor your application according to the new documentation**\n## Getting started\n\nTo start using framedork.py, simply clone the repository to your local machine with  `git clone https://github.com/RedmanPlus/framedork.py.git`. You can use all of the features by importing main file `framedork.py` into your main Python file like this:\n\n```Python\nfrom src.framedork import Framedork\nfrom src.preprocessors.response import Response\n\napp = Framedork()\n```\n\nHere you create an instance of a framedork, that will handle all of the routing and connections from now on\n\n## Defining a page\n\nTo define a page, write a simple function using a `@app.register` decorator like this:\n\n```Python\n@app.register('/', ['GET'])\ndef index(request):\n\treturn Response([\"index.html\", {}])\n```\n\nPage function accepts a request from a browser (a dictionary of all possible parameters from a request), and returns a Response object that accepts a relative adress of a template file and a dictionary with parameters that need to be added to the page. You can inspect a note on tempating later. \nYou will need to specify all allowed methods for the page. If a page is called by a method, that is not declarated in a `register` decorator, **framedork** will send a '405 Method not allowed' error.\n\n## Accessing URL parameters\n\nTo access URL parameters, add the variable that will hold the value of a parameter to the function input like so:\n\n```Python\ndef index(request, id=1):\n```\n\nWe recomend to set some default values to the parameter, so your program won't crash if a parameter is not present. You can use the value of your URL parameters in an inner logic of your page function.\n\n## Accessing POST body\n\nIf you wish to use a POST-requests with your page, you can access all of the POST-body parameters with `request[\"BODY\"]`.\n`request[\"BODY\"]` is a dictionary, containing all of the parameters, sent by a POST-request, alteady parsed and splitted by **framedork**. If you know in advance, what parameters are being sent, then you can simply access all the values by\n\n```Python\nparam_value = request[\"BODY\"][\"name_of_param\"]\n```\n\nor if you wish to make code cleaner:\n\n```Python\nbody = request[\"BODY\"]\nparam_value = body[\"name_of_param\"]\n```\n\nA `request[\"BODY\"]` field is present in all request by default, even in cases if the GET requests was sent. By default it is set to an empty list, so before accessing all of the POST values you need to check if the body is empty. \nPOST-request parameters can be used in inner logic of your program or for getting values into the database.\n\n## POST, PUT and DELETE methods\n\nAll three methods generate a `request['BODY']` dictionary, that you can accept. To differenciate between the methods inside your **framedork** function, we recomend to use `match request['METHOD']:` structure, or if you're using an older version of Python - `if request['METHOD'] == 'GET'` structure.\n\nIt looks something like this:\n\n```Python\n@app.register('/foo/', ['GET', 'POST', 'PUT', 'DELETE'])\ndef foo(request, id=1):\n\tmatch request['METHOD']:\n\t\tcase 'GET':\t\t# A simple GET request, just returns\n\t\t\treturn Response(['test2.html', {'value': str(id)}])\t# a page with values from parameters\n\t\tcase 'POST':\t\t\t\t\t\t\t\t\t\n\t\t\tvalues = request['BODY']\t# POST takes values from the request\n\t\t\tanimal.add(values)\t\t\t# and uses them to create a new record\n\t\t\tanimal.save()\t\t\t\t# in the database\n\t\t\treturn Response(['test2.html', {'value': str(id)}])\n\t\tcase 'PUT':\t\t\t\t\t\t\t\t\t\n\t\t\tvalues = request['BODY']\t# PUT request at first gets an entry\n\t\t\tcheck = animal.filter({'id': id})# that needs to be checked, then\n\t\t\tprint(check)\t\t\t\t# updates it with the data from a \n\t\t\tfor key, value in values.items(): # PUT requet and updates the data\n\t\t\t\ttry:\n\t\t\t\t\tcheck[0][key] = value\n\t\t\t\texcept KeyError:\n\t\t\t\t\tcontinue\n\t\t\tanimal.add(check[0])\n\t\t\tanimal.save()\n\t\t\treturn Response(['test2.html', {'value': str(id)}])\n\t\tcase 'DELETE':\t\t# DELETE takes data from your request\n\t\t\tvalues = request['BODY']\t# and deletes all entries that satisfy\n\t\t\tanimal.delete(values)\t\t# the condition\n\t\t\treturn Response(['test2.html', {'value': str(id)}])\n```\n\nAll of the methods can be used to create a more interractive backend or to make an API.\n\n## Templating\n\n**Framedork** uses custom html preprocessor akin to Jinja2, but at the current moment has much less functionality, so it is more like abridged Jinja2.\n\n### Inserting values into the page\n\nTo insert a value into a page, construct your html file like so:\n\n```HTML\n<h1>{value}</h1>\n```\n\nNow, in your page function, add a dictionary, where keys have the same name as the labels you put in your html file. For example, if you're using URL parameters in your page, you can write a function like this:\n\n```Python\ndef index(request, id=1):  # id is a hypothetic parameter from http://127.0.0.1:8080/?id=1\n\treturn 'test.html', {'value': str(id)}\n```\n\nThe value of the dictionary will then replace a label in your html page.\nSimilarly you can use values sent in a POST request, you'll just need to wrap them in a dictionary with names, that will correspond with the ones in your html.\n\nPlease also note that the amount of labels and passed values must be exactly the same at best (or not less than the labels in your html file at worst), to avoid errors and crashes.\n\n### Extending templates\n\nTo extend your html file by a template, create a template file like 'base.html'. Base file must contain an extendable block like so:\n\n```HTML\n{% block content %}\n```\n\nSimilarly, the file that you will pass from your function should look something like so:\n\n```HTML\n{% extends 'base.html' %}\n{% block content %}\n{% endblock %}\n```\n\nNow all of the html content placed between opening and ending of the block will be inserted into a template, and this template will be shipped to the browser.\n\nPlease note that the base template filename is a path relaive to the extendable file, and preferably they both should be located in the same folder.\n\n## DORM (or dorkORM)\n\n**DORM** is a custom ORM integrated into **framedork**. It can be used for connecting your web app with external database, so you can use this data in your web pages. DORM is currently *work-in-progress*, so any changes may apply.\n\n**DORM** only supports *PostgreSQL* connections for now\n\n### Creating and registering models\n\nFirst of all, import **DORM** into your main file like so:\n\n```Python\nfrom src.dorm import Model, StringField, IntField, FloatField, DateField\n```\n\nNow create a model of your SQL table:\n\n```Python\nanimal = Model(table='animal', fields=[\n\t\tStringField(null=False, max_len=20, name='name'),\n\t\tStringField(null=False, max_len=30, name='species'),\n\t\tIntField(name='life_expectancy')\n\t])\n```\n\nModel accepts two parameters - a name of a relative SQL table and a list of fields it will contain. Please note that your model can reflect an existing SQL table in your database - it will not fail and will just use this table and all it's data, but your model **must** reflect all of the columns 100% or it will crash. So on current stage of development we recomend to use **DORM** models with existing tables only in case these tables have only already implemented fields.\n\nCurrently **DORM** can only create 4 field types - String, Integer, Float and date. All of these fields have a `null` parameter, that will define on initiation, if a field can be nullable. By default it is set to `True`, and you don't have to add it into the definition.\n\nTo register a model, call a `register_model()` function:\n\n```Python\nframedork.register_model([animal])\n```\n\n`register_model` accepts a list of all models registered by you. It will check, if accociated tables exist in a database, and if not created - will create ones.\n\n### Using **DORM** models in your code\n\nTo use **DORM** models in your **framedork** functions, add `global` instruction in a beguining of the file like so:\n\n```Python\n@app.register('/animal/', ['GET'])\ndef animal_page(request, name='Hyena'):\n\tglobal animal\n```\n\nCurrently you can only get values from a database and create new entries.\n\n#### Getting values\n\nTo get values from a database, use `get()` and `filter()` methods. A `get()` methods returns all entries into a database in a list of dictionaries, where every dictionary is a separate entry, and every field in a dictionary represents a value with a key of the column name. `filter()` does the same, but it accepts a dictionary of search parameters. Every key in a dictionary must reflect a name of a column in your SQL table.\n\nNow you can use your fetched data in your inner logic or simply send it to the browser with templating.\n\n#### Setting values\n\nTo set values for your database, first of all use `add()` method of your model. `add()` method accepts a dictionary of all values, that you wish to write. Note that keys of the dictionary must reflect your SQL table column names, and all NOT NULL fields must be filled.\n\nThen you can use `save()` method and it will authomatically save your data in a database.\n\nIt looks something like so:\n\n```Python\nvals = {'name': 'Hyena', 'species': 'Hyaenidae', 'life_expectancy': 30}\nanimal.add(vals1)\nanimal.save()\n```\n\n#### Updating values\n\nTo update values in your database, you can also use `add()` and `save()` combination. `save()` method checks if the entry by this id already exists in your database and either updates it or creates a new one.\n\nFor example, you fetch some information from your database. Then you apply some transformation to this data. Now you can `add()` it back to the model and then `save()` it. It looks like so:\n\n```Python\nanimals = animal.get()\none = animals[0]\n\none['name'] = 'Qute Hyena'\n\nanimal.add(one)\nanimal.save()\n```\n\nWe recomend to apply any changes directly to the data you fetched to avoid any errors.\n\n#### Deleting values\n\nTo delete a value from your database, use `delete()` method. It accepts a dictionary, where every key represents a name of the field. The value represents a value of this particular column in the database, that will be deleted.\n\nIt looks like this:\n\n```Python\nanimal.delete({'name': 'Hyena'})\n```\nNote that `delete()` method may delete multiple entries in your database if your dictionary is not very specific or there is multiple entries that contain the value you specified to be deleted.\n\n## Adding settings\n\nSettings in your **framedork** application are used for specifiing what host and port to connect to, and what are the database credentials. You can set your settings in definition of a `Settings` class entity, that you'll then pass to the `Framedork` entity upon it's initialising. It looks like this:\n\n```Python\nsettings = Settings(\n    port=8000,\n    db=\"postgres\",\n    db_conn=DB_CONNECTION,\n    deploy=\"wsgi\"\n)\n\napp = Framedork(settings)\n```\n\nAll of the arguments to the `Settings` class are optional and `Settings` are optional for the `Framedork` instanse themselves, but you can define these fields:\n- host: an IP adress from which the server will send the data.\n- port: the port that will be used for connection.\n- conns: the amount of consequent connections that are avaliable simultaneously.\n- conn_size: the amount of bytes allowed to be recieved once at a time by the server from the client.\n- db: a database you will use. Currently accepts only 'psql' as a parameter.\n- db_conn: All of the necessary credential information to connect with the database. Please make sure that all of the credentials are correct.\n- deploy: will define if your app is ran locally or by a WSGI web server.\n\n\n## Using framedork for creating API-s\n\nYou can specify what kind of response will the function send to the browser. To make your function send a json string, specify the content type in your `@register` decorator:\n\n```Python\n@app.register('/api/', ['GET', 'POST'])\ndef api(request):\n\treturn Response([{'hi': 'you\\'re qute'}])\n```\n\nHere your function returns a `Response` object that accepts only the list with a dictionary in it. Now **framedork** will send it to the browser or to any endpoint that will call your website at this address. \n\nAlso, since **DORM** `get()` and `filter()` methods return a list of dictionaries with entries to the database, you can simply fetch all the data you need and straight up send the response to the client like so:\n\n```Python\n@app.register('/api/', ['GET', 'POST'])\ndef api(request, id=1):\n\tresponse = animal.filter({'id': id})\n\tif response == []:\n\t\treturn {'error': 'nothing found'}\n\treturn Response([response[0]])\n```\n\nThis way you can create a series of different endpoints that will communicate with the database, resulting in a full **framedork** backend.\n\n## Running your website\n\nTo run your website, you need to call a `run()` method of your `framedork` instance at the end of the file. Your `run()` method must accept all of the functions you've written **not called** so they can be registered by the framework. You can do it like so:\n\n```Python\napp.run(index)\n```\nThen simply run your file with\n\n```console\npython main.py\n```\nor\n\n```console\nmain.py\n```\n\nif you're using a !# at the beguining of a file.\n\nThe web server will be automatically started on 8080 port, where you can access it.\n\n**Please note that** currently you cannot shutdown your server from inside the program or terminal. You can try to use Ctrl-C, but it can result with sockets being left open. We recomend currently to stop the python process from your machine's controll panell.\n\n## Running framedork.py with Gunicorn\n\nTo run **framedork.py** with a web server, you'll need to change your file a little. Change your settings' `local` paramether to the `wsgi`. Now change your `app.run()` method at the end of the file to:\n\n```Python\nwsgi = app.run(index)\n```\n\nRegister all of your functions in a `run()` method. It will return an object, that we will then call with a Gunicorn.\n\nNow upload all of your work onto the server with Gunicorn installed on it and in a project directory call:\n\n```commandline\ngunicorn --workers=2 main:app\n```\n\nwhere\n- `main` is a name of your file\n- `wsgi` is the name of the object returned by your `run()` function\n\nNow your app will be hosted on a 127.0.0.1:8000, but you can specify the IP address.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/RedmanPlus/framedork.py/tarball/v0.1.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RedmanPlus/framedork.py",
    "keywords": "web,wsgi,framework",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "framedork.py",
    "package_url": "https://pypi.org/project/framedork.py/",
    "platform": null,
    "project_url": "https://pypi.org/project/framedork.py/",
    "project_urls": {
      "Download": "https://github.com/RedmanPlus/framedork.py/tarball/v0.1.0",
      "Homepage": "https://github.com/RedmanPlus/framedork.py"
    },
    "release_url": "https://pypi.org/project/framedork.py/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A meme web framework on Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15054318,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ea64a981ca5a5ff558e3702618861b837793db5d7e734a5d98bfcf6e3a646ad",
          "md5": "af30c26ca6e776bd67e206799486475d",
          "sha256": "533578bb8b3dd0acbe82f3e6ba86ee95c6a267b027c42d0c25b7215912ad5612"
        },
        "downloads": -1,
        "filename": "framedork.py-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af30c26ca6e776bd67e206799486475d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16443,
        "upload_time": "2022-09-10T23:00:55",
        "upload_time_iso_8601": "2022-09-10T23:00:55.867067Z",
        "url": "https://files.pythonhosted.org/packages/2e/a6/4a981ca5a5ff558e3702618861b837793db5d7e734a5d98bfcf6e3a646ad/framedork.py-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07029deddf8803a7e79a1fa6647931185aedfb82336f61243d8190926cef8221",
          "md5": "95eeaeaa49da08274f5ffe6272dc48a9",
          "sha256": "e94fc0fc7d2e833b9167779297234b967d54597a863dcb9dac234964af39d8bc"
        },
        "downloads": -1,
        "filename": "framedork.py-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "95eeaeaa49da08274f5ffe6272dc48a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19049,
        "upload_time": "2022-09-10T23:00:58",
        "upload_time_iso_8601": "2022-09-10T23:00:58.144111Z",
        "url": "https://files.pythonhosted.org/packages/07/02/9deddf8803a7e79a1fa6647931185aedfb82336f61243d8190926cef8221/framedork.py-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2ea64a981ca5a5ff558e3702618861b837793db5d7e734a5d98bfcf6e3a646ad",
        "md5": "af30c26ca6e776bd67e206799486475d",
        "sha256": "533578bb8b3dd0acbe82f3e6ba86ee95c6a267b027c42d0c25b7215912ad5612"
      },
      "downloads": -1,
      "filename": "framedork.py-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af30c26ca6e776bd67e206799486475d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 16443,
      "upload_time": "2022-09-10T23:00:55",
      "upload_time_iso_8601": "2022-09-10T23:00:55.867067Z",
      "url": "https://files.pythonhosted.org/packages/2e/a6/4a981ca5a5ff558e3702618861b837793db5d7e734a5d98bfcf6e3a646ad/framedork.py-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07029deddf8803a7e79a1fa6647931185aedfb82336f61243d8190926cef8221",
        "md5": "95eeaeaa49da08274f5ffe6272dc48a9",
        "sha256": "e94fc0fc7d2e833b9167779297234b967d54597a863dcb9dac234964af39d8bc"
      },
      "downloads": -1,
      "filename": "framedork.py-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "95eeaeaa49da08274f5ffe6272dc48a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 19049,
      "upload_time": "2022-09-10T23:00:58",
      "upload_time_iso_8601": "2022-09-10T23:00:58.144111Z",
      "url": "https://files.pythonhosted.org/packages/07/02/9deddf8803a7e79a1fa6647931185aedfb82336f61243d8190926cef8221/framedork.py-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}