{
  "info": {
    "author": "",
    "author_email": "\"Celio D. Santos-Junior\" <celio.diasjunior@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Simgenes \n\nPipeline to simulate and create random genes with selected features.\n\n[![Simgenes - Python package](https://github.com/celiosantosjr/simgenes/actions/workflows/python-package.yml/badge.svg)](https://github.com/celiosantosjr/simgenes/actions/workflows/python-package.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nIf you use this software in a publication please cite:\n\n>   Santos-JÃºnior C.D., 2023.\n>   Simgenes: Random gene sequences simulator.\n>   GitHub Repository. Available in: https://github.com/celiosantosjr/simgenes/\n\n---\n## Table of contents\n\n1. [Introduction](#introduction)\n2. [Installing](#install)\n3. [Usage](#usage)\n4. [Contact](#contact)\n\n---\n## Introduction\n\nSimulate random gene and protein sequences controlling for real parameters, such as GC content.\nThe package simgenes rely on very common libraries:\n\n   - Bio\n   - tqdm\n   - numpy\n\nIn a test with 1 million sequences generated using simgenes:\n\n```\nfrom simgenes import batch_random\n\nbatch_random(ofile='test_check', L=(30,1002), GC=None, transl=False, n=1_000_000)\n```\n\nThe time to generate 1 million gene sequences was 2765 s, equivalent to say that to simgenes can\ngenerate on average 361.66 sequences per second.\n\nWe obtained a file with gene sequences in a length ranging from 30 to 1002 bp,\nwith a very even distribution:\n\n<p align=\"center\">\n  <img src=\"https://github.com/celiosantosjr/simgenes/blob/main/.assets/random_gene_length_distribution.svg\" alt=\"drawing\" width=\"450\"/>\n</p>\n<p align=\"center\">\n  <em><b>Fig. 1</b> - Length distribution of generated genes in a simulation.</em>\n</p>\n\nAlso, the contents of the nucleotides in the genes ranged largely, but yet inside the limits established \ninternally in the pipeline according to [other authors](https://pubmed.ncbi.nlm.nih.gov/23028785/).\n\n<p align=\"center\">\n  <img src=\"https://github.com/celiosantosjr/simgenes/blob/main/.assets/GC_distribution.svg\" alt=\"drawing\" width=\"450\"/>\n</p>\n<p align=\"center\">\n  <em><b>Fig. 2</b> - GC contents distribution in genes from the simulation.</em>\n</p>\n\nThe 1 million genes generated did not match to any family of Uniprot, and did not cluster under\ncdhit at 95% of identity and 90% of coverage of the shorter sequence. This shows that random genes\nfrom simgenes definitely differ from the real genes, being interesting to work as a filter of\nartifacts in gene prediction. This system can easily be used to generate decoy sequences for\nmultiple purposes.\n\n---\n## Install\n\nTo install the package simgenes, you can easily create a conda environment:\n\n```\nconda env create -f simgenes_environment.yml\nconda activate simgenes\n```\n\nThen, just install the simgenes:\n\n```\npython3 -m pip install simgenes\n```\n\n---\n# Usage\n\nSimgenes has several functions to help the user to quantify randomness in the sequences or\ngenerate new sequences.\n\n**1. Entropy measurements**\n\nThis function can be used by simply entering the protein or nucleotide sequence\nand returns the entropy measured, the maximum possible entropy, and the relative\nentropy measure - Note that for all entropy calculations, we rely on the Log2 \napproximating the measures to the Shannon Entropy. Example of usage:\n\n```\nfrom simgenes import entropy\n\n# creating example sequences\nseq = 'ATACAGATGCGAGTAAACGAGCAAAAA'\nseq_aa = 'MKLMKLMLKLMLLLLLLAHHHHHHH'\n\nH, maxH, Hrel = entropy(seq)\n\nprint('''For nucleotides\nWe measured an entropy of: {H},\na possible maximum entropy of: {maxH},\nand as relative entropy of {Hrel}''')\n\nH, maxH, Hrel = entropy(seq_aa)\n\nprint('''For amino acids\nWe measured an entropy of: {H},\na possible maximum entropy of: {maxH},\nand as relative entropy of {Hrel}''')\n```\n\n**2. Translate nucleotides into amino acid sequence**\n\nThis function can be used by simply entering the nucleotide sequence\nand returns the translated sequence by using Standard Genetic Code, \ntranslation table 11. Example of usage:\n\n```\nfrom simgenes import get_prot\n\n# creating example sequence\nseq = 'ATACAGATGCGAGTAAACGAGCAAAAA'\n\nprotein = get_prot(seq)\n\nprint(protein)\n# IQMRVNEQK\n```\n\n**3. Check internal stop codons**\n\nThis function returns the indexes of nucleotides from which\nan internal stop codon is formed in the first frame. For example\nin the sequence ATGTAAAAATTTTGA, this function would return a list\nwith the indexes of stop codons in the sequence [1, 4]. With this\ninformation, one can easily (by multiplying by 3) check the position\nof such codons in the sequence: [3 - TAA, 12 - TGA]. Example of\nusage:\n\n```\nfrom simgenes import check_internal_stops\n\n# get example sequence\nseq = 'ATGAGGGAGGGGGTGGGGATGAGGGATGAAAGTGTAGGATAAGTGACGGGGTGTAAGGCTGGCTTGGTGGACC\nTGCAATTGAATGGCAAGGGCGGAGTAGATGTGGTGAGTGGAGAGAAGGTGGGAAAGTGTCAAATTCATGTGGGACGGTGGT\nGGTTGGAGGGTTGCGGGAAGATCGGTGTGTGGAAGTTAGTGGGTTAAAGGGAACGTGCAGTAGGGGGAGCAGCTGGACAGC\nTGGAAGGCGGGTCTGAGCGGCGGGGTGGGGTGGGTGGGGCGGGTTGGGGGGTTGGTGGTGTGCGGGAAAATCGGTGGGGGG\nTATGGGTTAGGGCGAGGGGGGGGTTCAGAAGTGTGGGTGGGCGAGGCGAATGAGGAAAGGAGGGGGAGGTGGGAATGTGTG\nGGGGACATGCGGGTAGGGAGAGCGAGCGGGAGTTGGTGGGGGGGAGTGGGGTACGGGGTTGGATGAAGGAGTGATGGGAGC\nGGTAGAGAAAGGCGCTGGAGGGAAGCGAAGGGTTAGTAGCGAAGCAAGGTGGTTTGGGCGACGAAATTCGGGTGGTAAGTT\nATAGTGGTATAGGCAGCAGGTAA'\n\nstop_codons = check_internal_stops(seq)\n\n# getting stops in the sequence:\nfor x in stop_codons:\n   print(seq[x*3: (3+(x*3))])\n\n# 'TAA'\n# 'TAA'\n# 'TGA'\n# 'TGA'\n# 'TAG'\n# 'TAA'\n\n# getting indexes of the stop codons:\nfor x in stop_codons:\n    print((x*3, 3+(x*3)))\n\n# (39, 42)\n# (198, 201)\n# (366, 369)\n# (468, 471)\n# (480, 483)\n# (579, 582)\n```\n\n**4. Determine random nucleotides distribution**\n\nAlthough users can easily attribute a GC content for the generated random sequence,\nthe exact distribution of A, T, C, G is not allowed to be set. This is because we are\ninterested on generating the most random gene sequences possibly, therefore, the\ndistribution is mostly attributed by randomly selecting the proportions that add up to\n100%, also respecting the GC proportion previously established. When user gives\nGC = -1, then the proportions are set to 25% for each nucleotide, alternatively user\ncan attribute 0 or no value (None) to get a completely random distribution that respects\nthe rule from [Mir et al. (2012)](https://pubmed.ncbi.nlm.nih.gov/23028785/) that says\nbacterial ORFs present a GC content between 21.4% and 74.9% of GC. For example:\n\n```\nfrom simgenes import det_props\n\n# using fixed proportions\n# [a = 25.00%, t = 25.00%, c = 25.00%, g = 25.00%]\nprops = det_props(GC=-1)\n\n# using completely random assignment\nprops = det_props(GC=None)\n# alternatively:\nprops = det_props()\n# as result, for example:\n# [23.2, 22.5, 18.8, 35.5]\n# in this case GC was randomly set to 54.3%\n\n# using an established GC content\nprops = det_props(GC=66.7)\n# as a result, we can have, for example:\n# [a = 22.60%, t = 10.70%, c = 27.60%, g = 39.10%]\n```\n\n**5. Getting a random length**\n\nUnless user specifies clearly one single length for the generated\nsequence (multiple of 3 because of codons counting), simgenes will attribute\na random length to the gene. It is also possible to create a range for the\nlength of this gene in a form of a tuple, e.g. (30, 300) in this case meaning\nthat the gene should encode proteins of 10 to 100 codons in total (counting start \nand stop as well). If a length that is not divisible by 3 is selected by the \nuser, then the program overules the input and select a random length. Usage\nexample follows:\n\n```\nfrom simgenes import get_len\n\n# getting a random length between 30 and 300\nL = get_len(30, 300)\n```\n\nIn simgenes, the length of genes by default varies between 300 and 900 bp,\nwith an average of 819 bp as suggested by\n[Rajic et al. (2005)](https://pubmed.ncbi.nlm.nih.gov/15883855/).\nIt is also important to mention that it is possible to generate small\ngenes as well by setting low multiple of 3 numbers, such as 30, 120, and so on.\n\n**6. Random gene**\n\nThis function returns a gene (and) protein sequence. User can provide a range to the\nlength of random genes, by attributing to L a tuple with min and max gene lengths in\nbase pairs, respectively. Users also can provide a fixed gene length by using an\ninteger, or yet conform with the randomly selected length from the range between\n300 to 900 base pairs. Another parameter to be selected is the GC gc content (0-100)\nof the desired genes, in case it is not given, the program will select randomly the\nproportion of nucleotides between 21.4 <= GC <= 74.9 (typical GC content of ORFs). \nThere is also the option GC=-1, which means that all nucleotides are expected at same\nfrequency. If user wants the corresponding protein sequence for the generated\ngene, then just set the \"trans\" parameter as True. Examples of usage:\n\n```\nfrom simgenes import random_gene\n\nL = [(30, 300), 333, 40, None]\ngc = [-1, 75.2, None]\nfor m in L:\n    for g in gc:\n        s, p = random_gene(L=m, gc=g, trans=True)\n        print(f'L={m}bp, GC={g}%, nt={s}, prot={p}')\n```\n    \n**7. Batch random - To generate a set of genes**\n\nThe option \"batch_random\" is interesting when the users need to generate a set of random\ngenes. It takes the same parameters of the random_gene function, such as length in bp (L),\nGC content (GC=0-100), translation (transl=True/False), and additionally accepts the\noutputfile address tag (as a string) and the number of desired sequences (n=int). If no\nparameter is given, this function should generate 1 million nucleotide sequences from 30 to\n300 bp with GC=50.8%, not translating them, and saving them into a file named\n'output_testseq.fna.xz'. Example of usage:\n\n```\nfrom simgenes import batch_random\n\nbatch_random(ofile='output_testseq',\n             L=1500,\n             GC=65.2,\n             transl=False,\n             n=1_000)\n```\n\n---\n## Contact\n\nIf you have any issues or want to contribute to the project, please contact the author [Celio Dias Santos Junior](mailto:celio.diasjunior@gmail.com).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Simgenes",
    "package_url": "https://pypi.org/project/Simgenes/",
    "platform": null,
    "project_url": "https://pypi.org/project/Simgenes/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/celiosantosjr/simgenes"
    },
    "release_url": "https://pypi.org/project/Simgenes/0.0.22/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A package to generate random gene/protein sequences",
    "version": "0.0.22",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16732935,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8103a07ab7d81acc404fefc18b190710d11f8d18d4f42c65541ff410807b8e",
          "md5": "d5318b2b4db24f9f5d0542f5daf29cab",
          "sha256": "b3c898547c753052a755178d611ad7a8ee477f8d3c86ca7efc66daa9b9e3e805"
        },
        "downloads": -1,
        "filename": "Simgenes-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5318b2b4db24f9f5d0542f5daf29cab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8434,
        "upload_time": "2023-02-07T18:53:13",
        "upload_time_iso_8601": "2023-02-07T18:53:13.745180Z",
        "url": "https://files.pythonhosted.org/packages/ab/81/03a07ab7d81acc404fefc18b190710d11f8d18d4f42c65541ff410807b8e/Simgenes-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "584c3ef48d4e9bd253f2146de12866b889ae4d37d05bcf540f92ae29785976ed",
          "md5": "d8dae96e9c842565b4d6c1473814d9df",
          "sha256": "dc6d62b73dba19b04d43859e0076e276bbdb081b3fcf5400475f4f4a3acd8b52"
        },
        "downloads": -1,
        "filename": "Simgenes-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8dae96e9c842565b4d6c1473814d9df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9183,
        "upload_time": "2023-02-07T18:53:15",
        "upload_time_iso_8601": "2023-02-07T18:53:15.780197Z",
        "url": "https://files.pythonhosted.org/packages/58/4c/3ef48d4e9bd253f2146de12866b889ae4d37d05bcf540f92ae29785976ed/Simgenes-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8ebbc1e1fba53a5eb1d566652eef509003adf9c870701748798223493521f23",
          "md5": "bb3f99c40772d9abf6c23022d5e5329a",
          "sha256": "2b29d3527930cf888b4fd94ca00946aab264928fc8e2b11f557ec617e5367717"
        },
        "downloads": -1,
        "filename": "simgenes-0.0.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb3f99c40772d9abf6c23022d5e5329a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8524,
        "upload_time": "2023-02-07T19:13:10",
        "upload_time_iso_8601": "2023-02-07T19:13:10.153157Z",
        "url": "https://files.pythonhosted.org/packages/d8/eb/bc1e1fba53a5eb1d566652eef509003adf9c870701748798223493521f23/simgenes-0.0.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a3562bd8c11f0ceddae5b5bb2a8ffb7ef837ba062bea6a3d0358520a22eb0b3",
          "md5": "745215dcc3f881d75eb57fefd38a6816",
          "sha256": "40c81dffaa2cb0188e8238f23b8bd3aeaeeead2c7e8bc67ca2569581ac93f7ca"
        },
        "downloads": -1,
        "filename": "simgenes-0.0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "745215dcc3f881d75eb57fefd38a6816",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21194,
        "upload_time": "2023-02-07T19:13:11",
        "upload_time_iso_8601": "2023-02-07T19:13:11.475548Z",
        "url": "https://files.pythonhosted.org/packages/3a/35/62bd8c11f0ceddae5b5bb2a8ffb7ef837ba062bea6a3d0358520a22eb0b3/simgenes-0.0.22.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8ebbc1e1fba53a5eb1d566652eef509003adf9c870701748798223493521f23",
        "md5": "bb3f99c40772d9abf6c23022d5e5329a",
        "sha256": "2b29d3527930cf888b4fd94ca00946aab264928fc8e2b11f557ec617e5367717"
      },
      "downloads": -1,
      "filename": "simgenes-0.0.22-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb3f99c40772d9abf6c23022d5e5329a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 8524,
      "upload_time": "2023-02-07T19:13:10",
      "upload_time_iso_8601": "2023-02-07T19:13:10.153157Z",
      "url": "https://files.pythonhosted.org/packages/d8/eb/bc1e1fba53a5eb1d566652eef509003adf9c870701748798223493521f23/simgenes-0.0.22-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a3562bd8c11f0ceddae5b5bb2a8ffb7ef837ba062bea6a3d0358520a22eb0b3",
        "md5": "745215dcc3f881d75eb57fefd38a6816",
        "sha256": "40c81dffaa2cb0188e8238f23b8bd3aeaeeead2c7e8bc67ca2569581ac93f7ca"
      },
      "downloads": -1,
      "filename": "simgenes-0.0.22.tar.gz",
      "has_sig": false,
      "md5_digest": "745215dcc3f881d75eb57fefd38a6816",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 21194,
      "upload_time": "2023-02-07T19:13:11",
      "upload_time_iso_8601": "2023-02-07T19:13:11.475548Z",
      "url": "https://files.pythonhosted.org/packages/3a/35/62bd8c11f0ceddae5b5bb2a8ffb7ef837ba062bea6a3d0358520a22eb0b3/simgenes-0.0.22.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}