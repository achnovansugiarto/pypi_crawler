{
  "info": {
    "author": "Shamaz Khan",
    "author_email": "shamaz.khan@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Finance Plot\n\nFinance Plotter, or finplot, is a performant library with a clean api to help you with your backtesting. It's\noptionated with good defaults, so you can start doing your work without having to setup plots, colors, scales,\nautoscaling, keybindings, handle panning+vertical zooming (which all non-finance libraries have problems with).\nAnd best of all: it can show hundreds of thousands of datapoints without batting an eye.\n\n<img src=\"https://badge.fury.io/py/finplot.svg\"/> <img src=\"https://pepy.tech/badge/finplot/month\"/> <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"/>\n\n\n## Features\n\n* Great performance compared to mpl_finance, plotly and Bokeh\n* Clean api\n* Works with both stocks as well as cryptocurrencies on any time resolution\n* Show as many charts as you want on the same time axis, zoom on all of them at once\n* Auto-reload position where you were looking last run\n* Overlays, fill between, value bands, symbols, labels, legend, volume profile, heatmaps, etc.\n* Can show real-time updates, including orderbook. Save screenshot.\n* Comes with a [dozen](https://github.com/highfestiva/finplot/blob/master/finplot/examples) great examples.\n\n![feature1](https://raw.githubusercontent.com/highfestiva/finplot/master/feature1.png)\n\n![feature2](https://raw.githubusercontent.com/highfestiva/finplot/master/feature2.jpg)\n\n![feature3](https://raw.githubusercontent.com/highfestiva/finplot/master/feature3.jpg)\n\n![feature3](https://raw.githubusercontent.com/highfestiva/finplot/master/feature-nuts.jpg)\n\n\n## What it is not\n\nfinplot is not a web app. It does not help you create an homebrew exchange. It does not work with Jupyter Labs.\n\nIt is only intended for you to do backtesting in. That is not to say that you can't create a ticker or a trade\nwidget yourself. The library is based on the eminent pyqtgraph, which is fast and flexible, so feel free to hack\naway if that's what you want.\n\n\n## Easy installation\n\n```bash\n$ pip install finplot\n```\n\n\n## Example\n\nIt's straight-forward to start using. This shows every daily candle of Apple since the 80'ies:\n\n```python\nimport finplot as fplt\nimport yfinance\n\ndf = yfinance.download('AAPL')\nfplt.candlestick_ochl(df[['Open', 'Close', 'High', 'Low']])\nfplt.show()\n```\n\n\n## Example 2\n\n![sample](https://raw.githubusercontent.com/highfestiva/finplot/master/screenshot.jpg)\n\n\nThis 25-liner pulls some BitCoin data off of Bittrex and shows the above:\n\n\n```python\nimport finplot as fplt\nimport numpy as np\nimport pandas as pd\nimport requests\n\n# pull some data\nsymbol = 'USDT-BTC'\nurl = 'https://bittrex.com/Api/v2.0/pub/market/GetTicks?marketName=%s&tickInterval=fiveMin' % symbol\ndata = requests.get(url).json()\n\n# format it in pandas\ndf = pd.DataFrame(data['result'])\ndf = df.rename(columns={'T':'time', 'O':'open', 'C':'close', 'H':'high', 'L':'low', 'V':'volume'})\ndf = df.astype({'time':'datetime64[ns]'})\n\n# create two axes\nax,ax2 = fplt.create_plot(symbol, rows=2)\n\n# plot candle sticks\ncandles = df[['time','open','close','high','low']]\nfplt.candlestick_ochl(candles, ax=ax)\n\n# overlay volume on the top plot\nvolumes = df[['time','open','close','volume']]\nfplt.volume_ocv(volumes, ax=ax.overlay())\n\n# put an MA on the close price\nfplt.plot(df['time'], df['close'].rolling(25).mean(), ax=ax, legend='ma-25')\n\n# place some dumb markers on low wicks\nlo_wicks = df[['open','close']].T.min() - df['low']\ndf.loc[(lo_wicks>lo_wicks.quantile(0.99)), 'marker'] = df['low']\nfplt.plot(df['time'], df['marker'], ax=ax, color='#4a5', style='^', legend='dumb mark')\n\n# draw some random crap on our second plot\nfplt.plot(df['time'], np.random.normal(size=len(df)), ax=ax2, color='#927', legend='stuff')\nfplt.set_y_range(-1.4, +3.7, ax=ax2) # hard-code y-axis range limitation\n\n# restore view (X-position and zoom) if we ever run this example again\nfplt.autoviewrestore()\n\n# we're done\nfplt.show()\n```\n\n\n## Real-time examples\n\nIncluded in this repo are [a 40-liner Bitfinex example](https://github.com/highfestiva/finplot/blob/master/finplot/examples/bfx.py)\nand [a slightly longer BitMEX websocket example](https://github.com/highfestiva/finplot/blob/master/finplot/examples/bitmex-ws.py),\nwhich both update in realtime with Bitcoin/Dollar pulled from the exchange.\n[A more complicated example](https://github.com/highfestiva/finplot/blob/master/finplot/examples/complicated.py) show real-time\nupdates and interactively varying of asset, time scales, indicators and color scheme.\n\nfinplot is mainly intended for backtesting, so the API is clunky for real-time applications. The\n[examples/complicated.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/complicated.py) was written a result\nof popular demand.\n\n\n## MACD, Parabolic SAR, RSI, volume profile and others\n\nThere are plenty of examples that show different indicators.\n\n| Indicator | Example |\n|-----------|---------|\n| MACD | [S&P 500](https://github.com/highfestiva/finplot/blob/master/finplot/examples/snp500.py) |\n| RSI | [Analyze](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze.py) |\n| SMA | [Analyze 2](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze-2.py) |\n| EMA | [Analyze](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze.py) |\n| TD sequential | [Bitfinex](https://github.com/highfestiva/finplot/blob/master/finplot/examples/bfx.py) |\n| Bollinger bands | [BitMEX](https://github.com/highfestiva/finplot/blob/master/finplot/examples/bitmex-ws.py) |\n| Parabolic SAR | [BitMEX](https://github.com/highfestiva/finplot/blob/master/finplot/examples/complicated.py) |\n| Heikin ashi | [Analyze](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze.py) |\n| Renko | [Renko dark mode](https://github.com/highfestiva/finplot/blob/master/finplot/examples/renko-dark-mode.py) |\n| Accumulation/distribution | [Analyze](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze.py) |\n| On balance volume | [Analyze](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze.py) |\n| Heat map | [Heatmap](https://github.com/highfestiva/finplot/blob/master/finplot/examples/heatmap.py) |\n| Volume profile | [Volume profile](https://github.com/highfestiva/finplot/blob/master/finplot/examples/volume-profile.py) |\n| VWAP | [Volume profile](https://github.com/highfestiva/finplot/blob/master/finplot/examples/volume-profile.py) |\n| Period returns | [Analyze 2](https://github.com/highfestiva/finplot/blob/master/finplot/examples/analyze-2.py) |\n| Asset correlation | [Overlay correlate](https://github.com/highfestiva/finplot/blob/master/finplot/examples/overlay-correlate.py) |\n| Lines | [Bitcoin long term](https://github.com/highfestiva/finplot/blob/master/finplot/examples/btc-long-term.py) |\n| ms time resolution | [Line](https://github.com/highfestiva/finplot/blob/master/finplot/examples/line.py) |\n\nFor interactively modifying what indicators are shown, see\n[examples/complicated.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/complicated.py).\n\n\n## Snippets\n\n### Background color\n```python\n# finplot uses no background (i.e. white) on even rows and a slightly different color on odd rows.\n# Set your own before creating the plot.\nfplt.background = '#ff0' # yellow\nfplt.odd_plot_background = '#f0f' # purple\nfplt.plot(df.Close)\nfplt.show()\n```\n\n### Unordered time series\nfinplot requires time-ordered time series - otherwise you'll get a crosshair and an X-axis showing the\nmillisecond epoch instead of the actual time. See my comment\n[here](https://github.com/highfestiva/finplot/issues/58#issuecomment-716054127) and\n[issue 50](https://github.com/highfestiva/finplot/issues/50) for more info.\n\nIt is also imperative that you either put your datetimes in your index, or in the first column. If your\ndatetime is in the first column, you normally want to have a zero-based range index,\n`df.reset_index(drop=True)`, before plotting.\n\n### Restore the zoom at startup\n```python\n# By default finplot shows all or a subset of your time series at startup. To store/restore zoom position:\nfplt.autoviewrestore()\nfplt.show() # will load zoom when showing, and save zoom when closing\n```\n\n### Time zone\n```python\n# Pandas normally reads datetimes in UTC time zone.\n# finplot by default use the local time zone of your computer (for crosshair and X-axis)\nfrom dateutil.tz import gettz\nfplt.display_timezone = gettz('Asia/Jakarta')\n\n# ... or in UTC = \"display same as timezone-unaware data\"\nimport datetime\nfinplot.display_timezone = datetime.timezone.utc\n```\n\n### Scatter plot with X-offset\nTo offset your scatter markers (say 0.2 time intervals to the left), see my comment\n[here](https://github.com/highfestiva/finplot/issues/31#issuecomment-695952455).\n\n### Align X-axes\nSee [issue 27](https://github.com/highfestiva/finplot/issues/27), and possibly (rarely a problem)\n[issue 4](https://github.com/highfestiva/finplot/issues/4).\n\n### Disable zoom/pan sync between axes\n```python\n# finplot assumes all your axes are in the same time span. To decouple the zoom/pan link, use:\nax2.decouple()\n```\n\n### Move viewport along X-axis (and autozoom)\nUse `fplt.set_x_pos(xmin, xmax, ax)`. See\n[examples/animate.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/animate.py).\n\n### Place Region of Interest (ROI) markers\nFor placing ellipses, see [issue 57](https://github.com/highfestiva/finplot/issues/57).\nFor drawing lines, see [examples/line.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/line.py).\n(Interactively use Ctrl+drag for lines and Ctrl+mbutton-drag for ellipses.)\n\n### More than one Y-axis in same viewbox\n```python\nfplt.candlestick_ochl(df2[['Open','Close','High','Low']], ax=ax.overlay(scale=1.0, yaxis='linear'))\n```\nThe `scale` parameter means it goes all the way to the top of the axis (volume normally stays at the bottom).\nThe `yaxis` parameter can be one of `False` (hidden which is default), `'linear'` or `'log'`.\nSee [issue 52](https://github.com/highfestiva/finplot/issues/52) for more info.\n\n### Plot non-timeseries\nfinplot is made for plotting time series. To plot something different use `ax.disable_x_index()`. See second\naxis of [examples/overlay-correlate.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/overlay-correlate.py).\n\n### Custom crosshair and legend\n[S&P500 example](https://github.com/highfestiva/finplot/blob/master/finplot/examples/snp500.py) shows how\nto set crosshair texts and update legend text+color as a result of mouse hover.\n\n### Custom axes ticks\nTo use your own labels on the X-axis see [comment on issue 50](https://github.com/highfestiva/finplot/issues/50#issuecomment-707929546).\nIf you want to roll your own Y-axis, inherit `fplt.YAxisItem`.\n\n### Saving screenshot\nSee [examples/line.py](https://github.com/highfestiva/finplot/blob/master/finplot/examples/line.py).\nTo keep screenshot in RAM see [issue 28](https://github.com/highfestiva/finplot/issues/28).\n\nFor creating multiple screenshots see [issue 71](https://github.com/highfestiva/finplot/issues/71#issuecomment-742015927).\n\n### Scaling plot heights\nSee [issue 56](https://github.com/highfestiva/finplot/issues/56). Changing the default window size can be\nachieved by setting `fplt.winw = 900; fplt.winh = 500;` before creating your plot.\n\n### Threading\nSee [issue 55](https://github.com/highfestiva/finplot/issues/55).\n\n### Titles on axes\nSee [issue 41](https://github.com/highfestiva/finplot/issues/41). To show grid and further adapt axes, etc:\n\n```python\nax.set_visible(crosshair=False, xaxis=False, yaxis=True, xgrid=True, ygrid=True)\n```\n\n### Fixing auto-zoom on realtime updates\nSee [issue 131](https://github.com/highfestiva/finplot/issues/131#issuecomment-786245998).\n\n### Beep\n```python\nfplt.play_sound('bot-happy.wav') # Ooh! Watch me - I just made a profit!\n```\n\n### Keys\n`Esc`, `Home`, `End`, `g`, `Left arrow`, `Right arrow`. `Ctrl+drag`.\n\n### Missing snippets\nPlot valign on mouse hover, update an orderbook, etc.\n\n\n## Coffee\n\nFor future support and features, consider a small donation.\n\nBTC: bc1qk8m8yh86l2pz4eypflchr0tkn5aeud6cmt426m\n\nETH: 0x684d7d4C52ed428AE9a36B2407ba909D896cDB67\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shamazkhan/quantlplot",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quantlplot",
    "package_url": "https://pypi.org/project/quantlplot/",
    "platform": "",
    "project_url": "https://pypi.org/project/quantlplot/",
    "project_urls": {
      "Homepage": "https://github.com/shamazkhan/quantlplot"
    },
    "release_url": "https://pypi.org/project/quantlplot/1.8.1/",
    "requires_dist": [
      "pandas",
      "PyQt5",
      "pyqtgraph (>=0.11.1)"
    ],
    "requires_python": "",
    "summary": "Finance plotting for Quantl",
    "version": "1.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10271387,
  "releases": {
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b39113f41d46566dbcb3ed1f5a3e920319960889da5e54d4d058375d5fce594",
          "md5": "bd5efb4f00c0e9bc434d9f7f99af0ada",
          "sha256": "40d24cf0daf9f868fa9fd0a73e4b9d7cdf8f8efb02b85208da5e92be65be94be"
        },
        "downloads": -1,
        "filename": "quantlplot-1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd5efb4f00c0e9bc434d9f7f99af0ada",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33740,
        "upload_time": "2021-05-06T00:50:55",
        "upload_time_iso_8601": "2021-05-06T00:50:55.063812Z",
        "url": "https://files.pythonhosted.org/packages/0b/39/113f41d46566dbcb3ed1f5a3e920319960889da5e54d4d058375d5fce594/quantlplot-1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d9276e0c8bcaa4cb8c06640f3d53e6a1012a4d2b240a9601e81566832708d8",
          "md5": "ac83f344b17c95da2fd85191c1e63dcf",
          "sha256": "628c02b4edfb4542a94a41efc02221ff02769cbabed48cf552604783ef4d96e6"
        },
        "downloads": -1,
        "filename": "quantlplot-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ac83f344b17c95da2fd85191c1e63dcf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38929,
        "upload_time": "2021-05-06T00:50:57",
        "upload_time_iso_8601": "2021-05-06T00:50:57.506788Z",
        "url": "https://files.pythonhosted.org/packages/15/d9/276e0c8bcaa4cb8c06640f3d53e6a1012a4d2b240a9601e81566832708d8/quantlplot-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65ed87c7cdddee483417f8afffbcfc124334ac51c3640547c3ab3228e1572798",
          "md5": "cfa2d51915d7ca0a04b461bcca9ebb73",
          "sha256": "6ca47c155fdd2bae0b31b373656dc529a3c7f341745904f6306d28cb55c25a9b"
        },
        "downloads": -1,
        "filename": "quantlplot-1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfa2d51915d7ca0a04b461bcca9ebb73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33738,
        "upload_time": "2021-05-06T01:00:05",
        "upload_time_iso_8601": "2021-05-06T01:00:05.427658Z",
        "url": "https://files.pythonhosted.org/packages/65/ed/87c7cdddee483417f8afffbcfc124334ac51c3640547c3ab3228e1572798/quantlplot-1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f765bb7ee3b52c50993f5bc38ee1b70ada1f0ca750deec91fa42a34fff20c4fd",
          "md5": "f85f2d0fdb58b586213b342e865a9b55",
          "sha256": "5134e5e4409acd294242b5f1409c3e3ce0ff2de13963e1721c4228d8814e16dd"
        },
        "downloads": -1,
        "filename": "quantlplot-1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "f85f2d0fdb58b586213b342e865a9b55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38939,
        "upload_time": "2021-05-06T01:00:07",
        "upload_time_iso_8601": "2021-05-06T01:00:07.440341Z",
        "url": "https://files.pythonhosted.org/packages/f7/65/bb7ee3b52c50993f5bc38ee1b70ada1f0ca750deec91fa42a34fff20c4fd/quantlplot-1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b580d6ce2e2007585c4044b65cf57132c22b02ecc9abc8526e45a2116b9b5cf",
          "md5": "3d3b89714a8cbb35b979c4bd1a3764de",
          "sha256": "edf0efa3f599c09e4103c0bca522e8bba2e7be84911603a6018935c6989359b1"
        },
        "downloads": -1,
        "filename": "quantlplot-1.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d3b89714a8cbb35b979c4bd1a3764de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33765,
        "upload_time": "2021-05-06T01:25:11",
        "upload_time_iso_8601": "2021-05-06T01:25:11.642917Z",
        "url": "https://files.pythonhosted.org/packages/5b/58/0d6ce2e2007585c4044b65cf57132c22b02ecc9abc8526e45a2116b9b5cf/quantlplot-1.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b91d5848eebe6fe7ccceecd964d4806ef306a63569200956dd7ff26aa84d45f",
          "md5": "c99c7759be4468a8d6805473460a2f97",
          "sha256": "24cdd9ebe229066338bc647a89ef370ea62332e904507697c2ab45984f1fab69"
        },
        "downloads": -1,
        "filename": "quantlplot-1.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c99c7759be4468a8d6805473460a2f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38933,
        "upload_time": "2021-05-06T01:25:13",
        "upload_time_iso_8601": "2021-05-06T01:25:13.622780Z",
        "url": "https://files.pythonhosted.org/packages/3b/91/d5848eebe6fe7ccceecd964d4806ef306a63569200956dd7ff26aa84d45f/quantlplot-1.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b580d6ce2e2007585c4044b65cf57132c22b02ecc9abc8526e45a2116b9b5cf",
        "md5": "3d3b89714a8cbb35b979c4bd1a3764de",
        "sha256": "edf0efa3f599c09e4103c0bca522e8bba2e7be84911603a6018935c6989359b1"
      },
      "downloads": -1,
      "filename": "quantlplot-1.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d3b89714a8cbb35b979c4bd1a3764de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 33765,
      "upload_time": "2021-05-06T01:25:11",
      "upload_time_iso_8601": "2021-05-06T01:25:11.642917Z",
      "url": "https://files.pythonhosted.org/packages/5b/58/0d6ce2e2007585c4044b65cf57132c22b02ecc9abc8526e45a2116b9b5cf/quantlplot-1.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b91d5848eebe6fe7ccceecd964d4806ef306a63569200956dd7ff26aa84d45f",
        "md5": "c99c7759be4468a8d6805473460a2f97",
        "sha256": "24cdd9ebe229066338bc647a89ef370ea62332e904507697c2ab45984f1fab69"
      },
      "downloads": -1,
      "filename": "quantlplot-1.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c99c7759be4468a8d6805473460a2f97",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38933,
      "upload_time": "2021-05-06T01:25:13",
      "upload_time_iso_8601": "2021-05-06T01:25:13.622780Z",
      "url": "https://files.pythonhosted.org/packages/3b/91/d5848eebe6fe7ccceecd964d4806ef306a63569200956dd7ff26aa84d45f/quantlplot-1.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}