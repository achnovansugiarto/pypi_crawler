{
  "info": {
    "author": "Zhe Wang",
    "author_email": "wangzhetju@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![logo](./assets/logo_small.png) \n# pyca \n\n[![Build Status](https://travis-ci.com/wangzhe3224/pyca.svg?branch=master)](https://travis-ci.com/wangzhe3224/pyca)\n\nCellular Automata, CA, in Python.\n\n## Features\n\n- easy to add new rules, check Rule30\n- you can even witch rules during compute\n- multiple dimensions universes (1d and 2d) support\n- support multiply cell types in one universe\n- support customized neighbour search \n- unit tests (more is coming)\n\n## Get started\n### See something running\n1. Clone the code\n2. Install libraries: `pip install -r requirements.txt`\n3. Pick a script form `example/` folder\n4. Magic...\n### Explore the code\n```python\nfrom pyca.universe1d import Universe1D\nfrom pyca.rules.Rules import Rule30\nfrom pyca.observer import plot1d_universe\n\nuniverse = Universe1D(300)\nuniverse.register_cell_type(Rule30, 'random', prob=0.5)\nuniverse.initialize()\nuniverse.compute(300)\nplot1d_universe(universe)\n```\n\nOr for classic rulexxx system, you can just pus a str represent rule for ClassicRule!\n\n```python\nfrom pyca.universe1d import Universe1D\nfrom pyca.rules.BaseRule import ClassicRule\nfrom pyca.observer import plot1d_universe\n\nsize = 600\nuniverse = Universe1D(size)\nuniverse.register_cell_type(ClassicRule, 'single', pos=size-1, rule='01101110')  # Rule110 here\nuniverse.initialize()\nuniverse.compute(size)\nplot1d_universe(universe)\n```\n\n## Concepts\n\n- Universe, contains all the cells, and function to trigger computation\n- CellType, rule of the cell is defined here\n- observer, way to observe universe, well it can be visual, but it can also be something else, like sounds!\n\nCurrently, 2 2D universe is supported, you can define a CA by injecting a \nnew type of CellType. \n\n## Road map\n\n- [ ] 3D universe\n- [ ] HyperGraph Universe\n- [ ] Interactive Observers\n- [ ] Musical Observers\n\n## Examples:\n\n### Rule 0 - Rule 255\n\n[pngs](./assets/255/)\n\n### 2D Cyclic AC\n\nhttp://psoup.math.wisc.edu/mcell/rullex_cycl.html\n\n[code](./example/2dCyclicAC.py)\n\n![2D Cyclic AC](./assets/2d_cyclic_ac.gif)\n\n### Game of Life\n\nhttps://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n\n[Code](./example/game_of_life.py)\n\n![A random game of life](./assets/game_of_life.gif)\n\n### Rule30\n\nhttps://en.wikipedia.org/wiki/Rule_30\n\n[Code](./example/rule30.py)\n\n![Rule 30](./assets/rule30.png)\n\n### Rule 110\n\nhttps://en.wikipedia.org/wiki/Rule_110\n\n[Code](./example/rule110.py)\n\n![Rule 110 ani](./assets/rule110_animtion.gif)\n\n![Rule 110](./assets/rule110.png)\n\n### Switch rules\n\n[Code](./example/switch_rules.py)\n\n![Switch Rules](./assets/switch_rules.png)\n\n\n## Related projects\n\n- [Cellular-Automaton-Viewer](https://github.com/jedlimlx/Cellular-Automaton-Viewer)\n- [cellularAutomata, Haskell version](https://github.com/bollu/cellularAutomata)\n- [A CA Game](https://sandspiel.club/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wangzhe3224/pyca",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycax",
    "package_url": "https://pypi.org/project/pycax/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycax/",
    "project_urls": {
      "Homepage": "https://github.com/wangzhe3224/pyca"
    },
    "release_url": "https://pypi.org/project/pycax/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Cellular Automata, CA, in Python.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8608345,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46ccd051515ce1bb7b3b847e74597c9bac4515179e505c7990228037139aae34",
          "md5": "7726b8437077da015b0eba209c7ac754",
          "sha256": "ad4ef59ea063dfe15a6d3bd10cbe109499deeaa23ef60aa8bc1be0bb5d3834a8"
        },
        "downloads": -1,
        "filename": "pycax-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7726b8437077da015b0eba209c7ac754",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12852,
        "upload_time": "2020-11-08T16:15:36",
        "upload_time_iso_8601": "2020-11-08T16:15:36.654869Z",
        "url": "https://files.pythonhosted.org/packages/46/cc/d051515ce1bb7b3b847e74597c9bac4515179e505c7990228037139aae34/pycax-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9b426baeec7bb8546ea02d98d9ac06deeeb36f240edab1a8c6879d6295df26b",
          "md5": "0578b77f6641eede99d81f909792eaa5",
          "sha256": "6440b3af26cccafb08c1261b13c6859a4914412a92936cfd179227986ce613c7"
        },
        "downloads": -1,
        "filename": "pycax-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0578b77f6641eede99d81f909792eaa5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9422,
        "upload_time": "2020-11-08T16:15:52",
        "upload_time_iso_8601": "2020-11-08T16:15:52.876455Z",
        "url": "https://files.pythonhosted.org/packages/d9/b4/26baeec7bb8546ea02d98d9ac06deeeb36f240edab1a8c6879d6295df26b/pycax-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46ccd051515ce1bb7b3b847e74597c9bac4515179e505c7990228037139aae34",
        "md5": "7726b8437077da015b0eba209c7ac754",
        "sha256": "ad4ef59ea063dfe15a6d3bd10cbe109499deeaa23ef60aa8bc1be0bb5d3834a8"
      },
      "downloads": -1,
      "filename": "pycax-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7726b8437077da015b0eba209c7ac754",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12852,
      "upload_time": "2020-11-08T16:15:36",
      "upload_time_iso_8601": "2020-11-08T16:15:36.654869Z",
      "url": "https://files.pythonhosted.org/packages/46/cc/d051515ce1bb7b3b847e74597c9bac4515179e505c7990228037139aae34/pycax-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9b426baeec7bb8546ea02d98d9ac06deeeb36f240edab1a8c6879d6295df26b",
        "md5": "0578b77f6641eede99d81f909792eaa5",
        "sha256": "6440b3af26cccafb08c1261b13c6859a4914412a92936cfd179227986ce613c7"
      },
      "downloads": -1,
      "filename": "pycax-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0578b77f6641eede99d81f909792eaa5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9422,
      "upload_time": "2020-11-08T16:15:52",
      "upload_time_iso_8601": "2020-11-08T16:15:52.876455Z",
      "url": "https://files.pythonhosted.org/packages/d9/b4/26baeec7bb8546ea02d98d9ac06deeeb36f240edab1a8c6879d6295df26b/pycax-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}