{
  "info": {
    "author": "Elmar Bucher",
    "author_email": "ulmusfagus@tutanota.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# cmIF fork: mplexable\n\n+ Author: engje, bue\n+ Date: 2020-11-01\n+ License: GPLv3\n+ Language: Python3\n\nDescription: mplexable is a fork from Jennifer Eng's original cmIF mplex\\_image software library (https://gitlab.com/engje/cmif).\ncmIF is a Python3 library for automated image processing and analysis of multiplex immunofluorescence images.\n\nSource: the latest version of this user manual can be found at https://gitlab.com/bue/mplexable/-/blob/master/README.md\n\n## HowTo\n\n### HowTo - Installation Mplexable\n\n**Python version:**\n\nA cornerstone of mplexable is **cellpose**, which is used for segmentation.\nCellpose requires at the moment of this writing python version 3.8.\nWe set the python requirement for mplexable accordingly in the setup.py.\nYou can check if these requirements are still true (https://github.com/MouseLand/cellpose/blob/master/environment.yml).\nIf this has changes, please drop us a line, that we can adjust the setup.py file. Thank you!\n\n\n**Python environment:**\n\nWe recommend installing mplexable in an own python environment.\nIff you run miniconda (or anaconda) you can generate a mplexable python environment like this:\n```bash\nconda create -n mplexable python=3.8\n```\nYou can activate the generated mplexable environment like this:\n```bash\nconda activate mplexable\n```\n\n\n**CPU based installation:**\n\n1. Install some basics.\n```bash\npip install ipython jupyterlab\n```\n\n2. Install torch.\n\nCheck out the pytorch side (https://pytorch.org/get-started/locally/),\nif you want to install torch with pip or from source, rather than with conda.\nInstalling pytorch is enough. There is no need to install torchaudio and torchvision.\n```bash\nconda install pytorch\n```\n\n3. Install cellpose.\n```bash\npip install cellpose\n```\n\n4. Install mplexable.\n```bash\npip install mplexable\npip install aicsimageio[czi]  # if you deal with carl zeiss images.\npip install imagecodecs  # if you deal with miltenyi macsima images.\n```\n\n5. Initialize a local config file.\n\nOpen a python shell and type:\n```python\nfrom mplexable import configure\nconfigure.link_local_config()\nexit()\n```\nThe local mplexable configuration file can be found at: `~/.mplexable/config.py`.\n\nUse your favorite [text editor](https://en.wikipedia.org/wiki/Text_editor) to edit the mplexable config file.\n\n\n**Nvidia GPU based installation:**\n\n1. Install some basics.\n```bash\nconda install ipython jupyterlab\n```\n\n2. Install torch.\n\nNote: For running touch on a GPU, you have to know which **cuda toolkit** version you have installed on your machine.\nHow depends on your operating system. We leave it your homework to figure out how to do that.\n\nCheck out the pytourch side (https://pytorch.org/get-started/locally/), to figure out how to install the latest version of torch, for your os, python package distro, and cuda toolkit.\nInstalling pytorch is enough. There is no need to install torchaudio and torchvision.\n\nThe final installation command will look something like below.\n```bash\nconda install pytorch cudatoolkit=nn.n -c pytorch\n```\n\n3. Install cellpose.\n\nIt is important that the GPU based version of pytorch is already installed, so that the CPU based version not get installed!\n```bash\npip install cellpose\n```\n\n4. Install mplexable.\n```bash\npip install mplexable\npip install aicsimageio[czi]  # if you deal with carl zeiss images.\npip install imagecodecs  # if you deal with miltenyi macsima images.\n```\n\n5. Initialize a local config file.\n\nOpen a **python shell** and type:\n```python\nfrom mplexable import configure\nconfigure.link_local_config()\nexit()\n```\nThe local mplexable configuration file can be found at: `~/.mplexable/config.py`.\n\nUse your favorite [text editor](https://en.wikipedia.org/wiki/Text_editor) to edit the mplexable config file.\n\n\n### HowTo - Update Mplexable\n\nAfter an update, it is important to re-link your local mplexable configuration file.\n\n1. Update mplexable.\n```bash\npip install -U mplexable\n```\n\n2. Link the local config file.\n\nOpen a **python shell** and type:\n```python\nfrom mplexable import configure\nconfigure.link_local_config()\nexit()\n```\n\n### HowTo - Run a Data Extraction Pipeline\n\nThe data extraction pipeline [jupyter notebooks](https://en.wikipedia.org/wiki/Project_Jupyter) are in the jupyter folder.\n\n+ mpleximage_data_extraction_pipeline.ipynb: most elaborate data extraction notebook.\n+ codex_data_extraction_pipeline.ipynb: notebook to process [codex](https://help.codex.bio/codex/cim/overview) data.\n+ mics_data_extraction_pipeline.ipynb: notebook to process [miltenyi](https://www.miltenyibiotec.com/US-en/products/macsima-imaging-system.html) macsima data.\n\nDownload the raw version of this notebook.\nOpen then notebook in [**Jupyter**](https://jupyter.org/) to process your data.\n\nFor each step in the pipleine there is a detailed description in the notebook.\n\nBesides, all functions have a [docstring](https://en.wikipedia.org/wiki/Docstring).\nTo receive additional help for a particular function, in the python shell type:\n```\nhelp(function)\n```\n\n### HowTo - Protein Marker\n\nAll biomarker used in the assay have to be specified in the local mplexable configuration file that can be found at: `~/.mplexable/config.py`.\n\nDAPI, quenching round, blank, and empty markers have to be specified in the `es_markerdapiblank_standard` variable.\n\nProteins have to be specified in the `es_markerpartition_standard` variable.\nWith the protein name, you have as well to specify where the protein in the cell is expressed.\nPossible partitions are: nucleus, nucleus membrane, ring (which is the cytoplasm), and cell membrane.\nIf proteins are expressed in more than one cell partition, then they can be specified more than once.\nThis is biological knowledge that becomes important in the feature extraction step of the pipeline.\nTo check where the proteins are exactly expressed, we recommend consulting the [human protein atlas](https://www.proteinatlas.org/).\n\nProteins that are used for cell segmentation have to be specified as keys in the `des_cytoplasmmarker_standard` variable.\nThese proteins are usually specific for a sudden cell type, or some cell types, but not all cell types.\nE.g. Ecad is expressed in cytoplasm of cancer cells and tonsil and can be used as cell segmentation marker.\nFor one cell type, more than one segmentation marker can be defined.\nIn the values part of the dictionary, all protein markers have to be specified that might be expressed in the cytoplasm of this particular cell type.\nE.g. CK5 might be expressed in the cytoplasm of cancer cells.\nYou can define as many cell types as you want.\nThis is biological knowledge that becomes important in the feature extraction step of the pipeline.\nAll the protein markers mentioned in the `des_cytoplasmmarker_standard` have also to be specified as ring partition protein in the `es_markerpartition_standard` variable.\n\n\n### HowTo - Naming Convention\n\nThe naming conventions are specified in the local mplexable configuration file that can be found at: `~/.mplexable/config.py`.\nThe standard naming convention is influenced by our use of axioscan and the zen software (both from [zeiss](https://www.zeiss.com/microscopy/int/home.html).\nIt is totally possible to adjust this setting to own needs.\nThe most crucial variables to look at are:\n\nBasic setting:\n+ d_nconv['s_round_axio']: how is in the filename the staining cycle round defined.\n+ d_nconv['s_quenching_axio']: how is in the filename a quenching round specified.\n+ d_nconv['s_color_dapi_axio']: how is in the filename the actual microscopy channel specified.\n+ d_nconv['ls_color_order_axio']: a by wavelength sorter list of microscopy channel labels.\n+ d_nconv['s_sep_marker_axio']: character used in the filename to separate markes.\n\nCzi image file name:\n+ d_nconv['s_czidir']: directory name where the raw czi images (with microscopy metadata) are stored.\n+ d_nconv['s_format_czidir_original']: string to specify the subfolder structure, e.g. one folder per slide, in the czi directory.\n+ d_nconv['s_regex_czi_original']: regular expression string to extract information from the czi filename.\n+ d_nconv['di_regex_czi_original']: dictionary to map the extracted information.\n\nRaw tiff image file name:\n+ d_nconv['s_rawdir']: directory where the raw tiff files, one tiff file per round and marker, are stored.\n+ d_nconv['s_regex_tiff_raw']: regular expression string to extract information from the raw tiff filename.\n+ d_nconv['s_format_czidir_original']: string to specify the subfolder structure, usually one folder per slide, in the raw directory.\n+ d_nconv['di_regex_tiff_raw']: dictionary to map the extracted information.\n\n\n### HowTo - Slurm\n\nAll calculation intensive function offer the option to be processed as [slurm](https://en.wikipedia.org/wiki/Slurm_Workload_Manager) job.\nThis can be achieved by setting the parameter: `s_type_processing = 'slurm'`.\nThe default setting is 'non-slurm'.\nUse the jupyter lab / Edit / Find ... and Replace All function, to replace them all.\n\nHowever, the core slurm function, `slurmbatch`, is specified in the local config file that can be found at: `~/.mplexable/config.py`.\nIf you want run mplexable on a slurm cluster, you might have to modify this function, so that the resulting slurm command fits the scheme required by your super computer.\nThe crucial parameter to look at and  manipulated are: `s_jobname`, `s_partition`, `s_gpu`, `s_mem`, `s_time`, `s_account`.\n\n\n## Tutorial\n\nThe tutorial is here: https://gitlab.com/bue/mplexable/-/blob/master/TUTORIAL.md\n\n\n## Discussion\n\nMplexable is a very lightweight and flexible pipeline to process cyclic immunofluorescence images.\nExcept for the registration code (which is [Matlab](https://en.wikipedia.org/wiki/MATLAB) script), mplexable is entirely written in Python3.\nTo run mplexable  you have to be savvy in the [**Python**](https://en.wikipedia.org/wiki/Python_(programming_language)) language, else you will struggle!\nTo adjust the file naming convention standard in the config file and the registration function call, you have to be familiar with [**regex**](https://en.wikipedia.org/wiki/Regular_expression).\n\n\n## References\n\n\"A framework for multiplex imaging optimization and reproducible analysis.\" *Eng J, Bucher E, Hu Z, Zheng T, Gibbs S, Chin K, Gray JW.* Biorxiv: https://doi.org/10.1101/2021.11.29.470281\n\n\"Cyclic Multiplexed-Immunofluorescence (cmIF), a Highly Multiplexed Method for Single-Cell Analysis.\" *Eng J, Thibault G, Luoh SW, Gray JW, Chang YH, Chin K.* Methods Mol Biol. 2020;2055:521-562. https://doi.org/10.1007/978-1-4939-9773-2_24\n\n\"cmIF: A Python Library for Scalable Multiplex Imaging Pipelines.\" *Eng J, Bucher E, Gray E, Campbell LG, Thibault G, Heiser L, Gibbs S, Gray JW, Chin K, Chang YH.* In: Mathematical and Computational Oncology. ISMCO 2019. Lecture Notes in Computer Science, vol 11826. Springer, Cham. https://doi.org/10.1007/978-3-030-35210-3_3\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/bue/mplexable",
    "keywords": "multiplex imaging,cyclic immunofluorescence,image processing,image data extraction,image analysis",
    "license": "GPL>=3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mplexable",
    "package_url": "https://pypi.org/project/mplexable/",
    "platform": null,
    "project_url": "https://pypi.org/project/mplexable/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/bue/mplexable/-/issues",
      "Homepage": "https://gitlab.com/bue/mplexable",
      "Say Thanks!": "https://donate.doctorswithoutborders.org",
      "Source": "https://gitlab.com/bue/mplexable"
    },
    "release_url": "https://pypi.org/project/mplexable/1.0.3/",
    "requires_dist": [
      "aicsimageio",
      "cellpose",
      "imagecodecs",
      "matplotlib",
      "numpy",
      "numba",
      "ome-types",
      "opencv-python",
      "pandas",
      "pillow",
      "scikit-image",
      "scipy",
      "seaborn",
      "torch"
    ],
    "requires_python": ">=3.6,<3.9",
    "summary": "A python3-based image analysis package to achieve fully-documented and reproducible visualization and analysis of bio-medical microscopy images. This is a fork from Jennifer Eng`s mplex_image software library.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14086325,
  "releases": {
    "0.0.50": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "296407a9d0ea5a920a1bd276d9b0e4a2a2b9637f90a3baa43b7d21b2a06149af",
          "md5": "c21e08345ff7fa0d71ce61e725165961",
          "sha256": "7d3af7686e754a7175c23872fd70cf081025cb3f9980d59688d09859323c458b"
        },
        "downloads": -1,
        "filename": "mplexable-0.0.50-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c21e08345ff7fa0d71ce61e725165961",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 132456,
        "upload_time": "2022-02-12T02:41:55",
        "upload_time_iso_8601": "2022-02-12T02:41:55.253413Z",
        "url": "https://files.pythonhosted.org/packages/29/64/07a9d0ea5a920a1bd276d9b0e4a2a2b9637f90a3baa43b7d21b2a06149af/mplexable-0.0.50-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b1e65a36a3d0bec32244275f1f5aff3df79b33273e0dec21ffab5377a0927d9",
          "md5": "eeac644d2295fabf4b3d1f62378a76ef",
          "sha256": "dda702e5067e4b4e1fdad25e5ae701e30f492b18b301680dd98b1d4c2757fa7c"
        },
        "downloads": -1,
        "filename": "mplexable-0.0.50.tar.gz",
        "has_sig": false,
        "md5_digest": "eeac644d2295fabf4b3d1f62378a76ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.9",
        "size": 114293,
        "upload_time": "2022-02-12T02:41:57",
        "upload_time_iso_8601": "2022-02-12T02:41:57.315100Z",
        "url": "https://files.pythonhosted.org/packages/7b/1e/65a36a3d0bec32244275f1f5aff3df79b33273e0dec21ffab5377a0927d9/mplexable-0.0.50.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "738352900d17edf3f571043c40fd0107cc436a7b3c918f5e5ae929dcdefd3fbf",
          "md5": "e74b77093e2fa155daa1f7873f756797",
          "sha256": "c3b9b80dd61262b6cb467761adb5b31c8e4023a257792d456e912a0df0969e9a"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e74b77093e2fa155daa1f7873f756797",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 140072,
        "upload_time": "2022-02-19T19:20:48",
        "upload_time_iso_8601": "2022-02-19T19:20:48.048068Z",
        "url": "https://files.pythonhosted.org/packages/73/83/52900d17edf3f571043c40fd0107cc436a7b3c918f5e5ae929dcdefd3fbf/mplexable-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f58264bec17d098bc9999511b8fbbcef2142c856d1b01fd1bae763bfd79c0fbf",
          "md5": "ceb46a0a519fa5b8783af30b4ac5535e",
          "sha256": "4645eb3755cdb07c97f7a792ce39af4803efecca3d8eca1c6645d660ee3fad10"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ceb46a0a519fa5b8783af30b4ac5535e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.9",
        "size": 114868,
        "upload_time": "2022-02-19T19:20:51",
        "upload_time_iso_8601": "2022-02-19T19:20:51.257119Z",
        "url": "https://files.pythonhosted.org/packages/f5/82/64bec17d098bc9999511b8fbbcef2142c856d1b01fd1bae763bfd79c0fbf/mplexable-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e10405e1a9d805c9808ddbf0c5aac2f6e73904c2465a709fdba11402027013a2",
          "md5": "20395ebdcafb2ef3ea3e08b2b02a000c",
          "sha256": "62364b6788f9bc47439e10f01c0f37a1f9c579280b9fb78cabd466de303d8bd5"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20395ebdcafb2ef3ea3e08b2b02a000c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 140111,
        "upload_time": "2022-03-08T02:11:13",
        "upload_time_iso_8601": "2022-03-08T02:11:13.559105Z",
        "url": "https://files.pythonhosted.org/packages/e1/04/05e1a9d805c9808ddbf0c5aac2f6e73904c2465a709fdba11402027013a2/mplexable-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f28065590f5b35e8eb19c6d3863f59b0d3016f692b9a95d9dbb0686d0e555c76",
          "md5": "350d3524a021ef6b2b335a62b6d17713",
          "sha256": "3b3f95848dd79858d416a9d74d2b314c07b3dfb78501a7f30c58011cfe13a185"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "350d3524a021ef6b2b335a62b6d17713",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.9",
        "size": 114885,
        "upload_time": "2022-03-08T02:11:19",
        "upload_time_iso_8601": "2022-03-08T02:11:19.376264Z",
        "url": "https://files.pythonhosted.org/packages/f2/80/65590f5b35e8eb19c6d3863f59b0d3016f692b9a95d9dbb0686d0e555c76/mplexable-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec90b97067d9255a88abb51a0700a2b0909b6cabacacecf1820b61c9f5d8377d",
          "md5": "ee0199b5523a0823c0399ee72f770bc7",
          "sha256": "3579853a85efe66bcd28a863bd4496cb4328238b6390f245430187f16d192a17"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee0199b5523a0823c0399ee72f770bc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 140261,
        "upload_time": "2022-03-10T20:38:55",
        "upload_time_iso_8601": "2022-03-10T20:38:55.210995Z",
        "url": "https://files.pythonhosted.org/packages/ec/90/b97067d9255a88abb51a0700a2b0909b6cabacacecf1820b61c9f5d8377d/mplexable-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efed43493fd4462e06c63229826e106d6f2ac7838e5ccf92a1909f1cb1fa869c",
          "md5": "41214d479cccaf3260bc9eb04c492a90",
          "sha256": "7b08eb0193b3974f0516b1c25f5b41aa27111a6efb645ab87f78b6a8eae82976"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "41214d479cccaf3260bc9eb04c492a90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.9",
        "size": 115037,
        "upload_time": "2022-03-10T20:39:00",
        "upload_time_iso_8601": "2022-03-10T20:39:00.567130Z",
        "url": "https://files.pythonhosted.org/packages/ef/ed/43493fd4462e06c63229826e106d6f2ac7838e5ccf92a1909f1cb1fa869c/mplexable-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5fc85fb04b5f3712b14fc9a0967fc68cc6aa530daba67d1d8112c401b82eaf4",
          "md5": "5e91cbfd3047a61e8d295cdcfcca2794",
          "sha256": "d9810d8bd2c5df292140d4f1c19fb4b3d56ca54bccbf2c2a7be6659ed6c6d85b"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e91cbfd3047a61e8d295cdcfcca2794",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<3.9",
        "size": 140183,
        "upload_time": "2022-06-09T19:18:23",
        "upload_time_iso_8601": "2022-06-09T19:18:23.672043Z",
        "url": "https://files.pythonhosted.org/packages/a5/fc/85fb04b5f3712b14fc9a0967fc68cc6aa530daba67d1d8112c401b82eaf4/mplexable-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d22b5d309a951f7fd67b3c522777c0c0dc82895e016bd2366d1f1a65a9a4342f",
          "md5": "f6c4b39d8d7997a8fe835c6b50e2960a",
          "sha256": "ab001b5b74be0bee699414729ab34235caf4e1689dda8ab062fbdf0e48ce4f4f"
        },
        "downloads": -1,
        "filename": "mplexable-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f6c4b39d8d7997a8fe835c6b50e2960a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<3.9",
        "size": 115158,
        "upload_time": "2022-06-09T19:18:32",
        "upload_time_iso_8601": "2022-06-09T19:18:32.486669Z",
        "url": "https://files.pythonhosted.org/packages/d2/2b/5d309a951f7fd67b3c522777c0c0dc82895e016bd2366d1f1a65a9a4342f/mplexable-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5fc85fb04b5f3712b14fc9a0967fc68cc6aa530daba67d1d8112c401b82eaf4",
        "md5": "5e91cbfd3047a61e8d295cdcfcca2794",
        "sha256": "d9810d8bd2c5df292140d4f1c19fb4b3d56ca54bccbf2c2a7be6659ed6c6d85b"
      },
      "downloads": -1,
      "filename": "mplexable-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e91cbfd3047a61e8d295cdcfcca2794",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<3.9",
      "size": 140183,
      "upload_time": "2022-06-09T19:18:23",
      "upload_time_iso_8601": "2022-06-09T19:18:23.672043Z",
      "url": "https://files.pythonhosted.org/packages/a5/fc/85fb04b5f3712b14fc9a0967fc68cc6aa530daba67d1d8112c401b82eaf4/mplexable-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d22b5d309a951f7fd67b3c522777c0c0dc82895e016bd2366d1f1a65a9a4342f",
        "md5": "f6c4b39d8d7997a8fe835c6b50e2960a",
        "sha256": "ab001b5b74be0bee699414729ab34235caf4e1689dda8ab062fbdf0e48ce4f4f"
      },
      "downloads": -1,
      "filename": "mplexable-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f6c4b39d8d7997a8fe835c6b50e2960a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<3.9",
      "size": 115158,
      "upload_time": "2022-06-09T19:18:32",
      "upload_time_iso_8601": "2022-06-09T19:18:32.486669Z",
      "url": "https://files.pythonhosted.org/packages/d2/2b/5d309a951f7fd67b3c522777c0c0dc82895e016bd2366d1f1a65a9a4342f/mplexable-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}