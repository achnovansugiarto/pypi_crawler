{
  "info": {
    "author": "Hitesh Jha",
    "author_email": "hitesh4official@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyBreadCrumbs\npybreadcrumbs is a lightweight function tracer and log enhancer for distributed systems written in python.\n\n## Inspiration\n* The inspiration for **PyBreadCrumbs** came to solve the daily trouble that we faced in our organisation in searching and sorting system logs that were generated.\n* It solves this by adding an extra key value pair to the log data which adds tracability to the logs.\n* It also adds an extra key value pair to add simple time taken based profiling as well.\n* It doesn't wish to compete with fully functional tracer or profiler nor it is a replacement for them, It's just there to make your logs more streamlined, readable and tracable.\n\n## Getting Started\n\n### Prerequisites\nA project of course where you want to integrate breadcrumbs.\n\n### Installing\n* pybreadcrumbs is available on PyPi.\n* you can use pip to install this using `pip install pybreadcrumbs`\n* It requires python 3.7 or greater to work.\n\n\n### Configuring\n* import the breadcrumbs configuration at the root python file from where the execution starts.\n* `from breadcrumbs.configuration import breadcrumbs_config`\n* `breadcrumbs_config` is a config dictionary with following options.\n* `trace_id_prefix` : the prefix which will be appended to system generated trace id key.\n* `key_prefix` : the prefix which will be added to every key of breadcrumbs log_payload.\n* `timezone` : the timezone string for datetime in log_payload. default value is `UTC`\n* `datetime_format ` : The datetime formate to be used in log_payload default value is `%Y-%m-%d %H:%M:%S.%f`\n* `additional_keys` : Additional keys that you wish to add to the tracable log payload.\n* `extraction_fallback_level`: this defines the stack trace level that a trace decorator should look for trace_id before creating a new trace id of it's own.\n\n### Using\n* Import the decorator `add_bowl` using.\n* `from breadcrumbs.base import add_bowl`\n* use the decorator on any function you would like to trace.\n* the fuction in which it is used needs to accept `kwargs` in function parameters.\n* to enhance other logging calls inside the function fetch the bowl object using\n* `breadcrumbs_bowl = kwargs.get(\"breadcrumbs_bowl\")`\n* then whenever logging something pass `extra=breadcrumbs_bowl.log_payload` in your logging call.\n* eg. `logger.info(\"test message that should be tracable\", extra=breadcrumbs_bowl.log_payload)`\n* you can also add a trace_text to your log_payload by using below method.\n* eg. `logger.info(\"test message that should be tracable\", extra=breadcrumbs_bowl.add_trace_text(\"CodeEventName\"))`\n* During the function call if you wish to add some meta data to the next logging calls you can store those meta data in the bowl object using add_trace_meta function.\n* eg. `breadcrumbs_bowl.add_trace_meta(key1=\"string_value\", key2=45)`\n* The next logging calls using bowl object in the same function will log this meta as well.\n* NOTE: meta data is never propogated to next called function, only the `trace_id` and keys defined by `additional_keys`\n\n### Advanced Usage\n* You can pass key value pairs for keys defined under `additional_keys` in the decorator itself.\n* this way the functional trace log will contain these key value pairs and these will also be added to all the upcoming `breadcrumbs_bowl.log_payload` and `breadcrumbs_bowl.add_trace_text(\"tTraceText\")` calls.\n* You can pass meta data key value pair in the decorator itself so as to insert meta data from the start itself rather then inside the fucntion manually using `add_trace_meta`.\n* You can pass custom trace_id of your choice by passing `trace_id` key and it's value in the decorator.\n* Similarily you can pass custom trace_text for the function tracing logs by passing `trace_text` key and it's value in the decorator.\n* You can pass python expression in place of value for any key in the decorator to extract value dynamically during a function call.\n* To do this you need to use `add_bowlv2` decorator instead of `add_bowl` available under  `breadcrumbs.base`\n* The expression should be a string starting with `@` to signify it's dynamic nature.\n* The python expression should be one liner and need to do operation on `args` or `kwargs` variable.\n* All the positional argument passed to the underlying function is stored in args which is a tuple.\n* All the keyword arguments passed to the underlying function is stored in kwargs which is a dict.\n* you can use the `|` operator and add two expression so that if first one fails second one can be used.\n* eg: `add_bowlv2(dynamic_key1='@args[0].attribute1[\"key1\"]')` or `add_bowlv2(dynamic_key1='@kwargs[\"key1\"].attribute1[0]')` or a complex one like `add_bowlv2(dynamic_key1='@args[0]|kwargs[\"key1\"].attribute1[0]')`\n\n## A Code block showing Usage\n\n    # initialise_project.py\n    from breadcrumbs.configuration import breadcrumbs_config\n\n    breadcrumbs_config.update({\n        \"trace_id_prefix\": \"test-\",\n        \"key_prefix\": \"log_\",\n        \"timezone\": \"Asia/Kolkata\",\n        \"additional_keys\": {\"key1\",\"key2\"}\n    })\n\n    # test.py\n    from breadcrumbs.base import add_bowl, add_bowlv2\n    import logging\n\n    logger = logging.getLogger(__name__)\n\n    @add_bowl(key1=\"value1\", meta_key1=\"meta_value1\")\n    def test_logging(**kwargs):\n        breadcrumbs_bowl = kwargs.get(\"breadcrumbs_bowl\")\n        # some operational statements here\n        test_advanced_logging(a_token=\"token123\")\n        logger.info(\"Requested action completed\", extra=breadcrumbs_bowl.add_trace_text(\"ActionCompleted\"))\n\n    @add_bowlv2(key1=\"@kwargs['a_token']\", \"key2\"=\"value2\", trace_text=\"Advanced Test Called\")\n    def test_advanced_logging(**kwargs):\n        breadcrumbs_bowl = kwargs.get(\"breadcrumbs_bowl\")\n        try:\n            # some operational statements here\n            breadcrumbs_bowl.add_trace_meta(meta_key2=\"meta_value2\")\n            logger.info(\n                \"A Major event in test_advanced_logging happened\",\n                extra=breadcrumbs_bowl.add_trace_text(\"MajorEvent2Completed\")\n            )\n        except Exception as e:\n            logger.exception(e, extra=breadcrumbs_bowl.log_payload)\n\n## The log output\n\n    {\n        \"msg\": \"test_logging initialised\",\n        \"levelname\": \"INFO\",\n        \"pathname\": \"/pybreadcrumbs/base.py\",\n        \"lineno\": 409,\n        \"log_trace_text\": \"pybreadcrumbs.tests.test.test_logging\",\n        \"log_trace_id\": \"test-d005ef1c-9f31-11ea-bfee-3e41543b0354\",\n        \"log_elapsed_time\": 0.0008239746,\n        \"log_trace_meta\": {\n            \"meta_key1\": \"meta_value1\"\n        },\n        \"log_key1\": \"value1\",\n        \"log_decorator_init_time\": 0.000039684,\n        \"log_event_datetime\": \"2020-06-13 14:48:08.096476\"\n    },\n    {\n        \"msg\": \"test_advanced_logging initialised\",\n        \"levelname\": \"INFO\",\n        \"pathname\": \"/pybreadcrumbs/base.py\",\n        \"lineno\": 409,\n        \"log_trace_text\": \"Advanced Test Called\",\n        \"log_trace_id\": \"test-d005ef1c-9f31-11ea-bfee-3e41543b0354\",\n        \"log_elapsed_time\": 0.0012239746,\n        \"log_trace_meta\": {},\n        \"log_key1\": \"token123\",\n        \"log_key2\": \"value2\",\n        \"log_decorator_init_time\": 0.000071684,\n        \"log_event_datetime\": \"2020-06-13 14:48:08.116476\"\n    },\n    {\n        \"msg\": \"A Major event in test_advanced_logging happened\",\n        \"levelname\": \"INFO\",\n        \"pathname\": \"/pybreadcrumbs/tests/test.py\",\n        \"lineno\": 36,\n        \"log_trace_text\": \"MajorEvent2Completed\",\n        \"log_trace_id\": \"test-d005ef1c-9f31-11ea-bfee-3e41543b0354\",\n        \"log_elapsed_time\": 0.0017239746,\n        \"log_trace_meta\": {\n            \"meta_key2\": \"meta_value2\"\n        },\n        \"log_key1\": \"token123\",\n        \"log_key2\": \"value2\",\n        \"log_event_datetime\": \"2020-06-13 14:48:08.146476\"\n    },\n    {\n        \"msg\": \"Requested action completed\",\n        \"levelname\": \"INFO\",\n        \"pathname\": \"/pybreadcrumbs/tests/test.py\",\n        \"lineno\": 12,\n        \"log_trace_text\": \"ActionCompleted\",\n        \"log_trace_id\": \"test-d005ef1c-9f31-11ea-bfee-3e41543b0354\",\n        \"log_elapsed_time\": 0.0023239746,\n        \"log_trace_meta\": {\n            \"meta_key2\": \"meta_value2\"\n        },\n        \"log_key1\": \"value1\",\n        \"log_event_datetime\": \"2020-06-13 14:48:08.176476\"\n    },\n\n* NOTE: the datetime and elapsed time values for representation purpose only, they do not reflect the actual time taken or the actual time on which this code was run.\n\n\n## Running the tests\n* will be added\n\n## Built With\n* python : https://www.python.org/\n* and some standard library available inside: asyncio, datetime, uuid, inspect and logging\n* ujson : https://pypi.org/project/ujson/\n\n## Contributing\nPlease read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\nWe use <a href=\"https://semver.org/\">SemVer</a> for versioning. For the versions available, see the tags on this repository.\n\n## Authors\n* Hitesh Jha\n\n* See also the list of contributors who participated in this project.\n\n## License\nThis project is licensed under the MIT License - see the LICENSE file for details\n\n## Future enhancements\n* Ensure child actions have a refrence to thier parents action.\n* Ensure correct time taken is calculated when in an async environment.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gofynd/pybreadcrumbs",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pybreadcrumbs",
    "package_url": "https://pypi.org/project/pybreadcrumbs/",
    "platform": "",
    "project_url": "https://pypi.org/project/pybreadcrumbs/",
    "project_urls": {
      "Homepage": "https://github.com/gofynd/pybreadcrumbs"
    },
    "release_url": "https://pypi.org/project/pybreadcrumbs/0.0.2/",
    "requires_dist": [
      "ujson"
    ],
    "requires_python": ">=3.7",
    "summary": "A lighweight functional tracer and log enhancer",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7469172,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04bc39c28283d76d54447560b32fe86b275f8e432d13d5e98cd9718c39e15c42",
          "md5": "af26069d9f0ccd76f1db372c2a6c1f11",
          "sha256": "d560793cebe660d7f0650053f11295dd48118c53a43f2c1dd18788296ed209e1"
        },
        "downloads": -1,
        "filename": "pybreadcrumbs-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af26069d9f0ccd76f1db372c2a6c1f11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8253,
        "upload_time": "2020-06-13T16:33:06",
        "upload_time_iso_8601": "2020-06-13T16:33:06.550951Z",
        "url": "https://files.pythonhosted.org/packages/04/bc/39c28283d76d54447560b32fe86b275f8e432d13d5e98cd9718c39e15c42/pybreadcrumbs-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53a675a59bbd9413d813f80611fe92dfb319b3a6d09fc4dc3089cb6dc82a31a3",
          "md5": "9dec0b7e5b7c8c9d026c0032d7d25736",
          "sha256": "f52edb3054ec67542deddd90f32c165326287d65d8bc647b5316c602f10918f3"
        },
        "downloads": -1,
        "filename": "pybreadcrumbs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9dec0b7e5b7c8c9d026c0032d7d25736",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8668,
        "upload_time": "2020-06-13T16:33:09",
        "upload_time_iso_8601": "2020-06-13T16:33:09.872493Z",
        "url": "https://files.pythonhosted.org/packages/53/a6/75a59bbd9413d813f80611fe92dfb319b3a6d09fc4dc3089cb6dc82a31a3/pybreadcrumbs-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a57b5801d90a4f07605d1c6671ce24f032196335c94d9cb59aff3051f738390",
          "md5": "0de5b6dcd8d3027e6ee37715cadfd999",
          "sha256": "3ee757b19fb47b0ec56fc47071380d1b011bc8c2209d6114eae34dc4902919be"
        },
        "downloads": -1,
        "filename": "pybreadcrumbs-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0de5b6dcd8d3027e6ee37715cadfd999",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9725,
        "upload_time": "2020-06-13T18:18:12",
        "upload_time_iso_8601": "2020-06-13T18:18:12.829871Z",
        "url": "https://files.pythonhosted.org/packages/3a/57/b5801d90a4f07605d1c6671ce24f032196335c94d9cb59aff3051f738390/pybreadcrumbs-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e1a6d92697645f157b85f4da440cc8b0389bb20389cbefe9f0cdb504aa2a2a4",
          "md5": "2895bb3dee9f28c9f6455f1a25ceee9d",
          "sha256": "74ecd01577e14470db4434b1c03b07844c83780e9ab931dc3368012e40f1d925"
        },
        "downloads": -1,
        "filename": "pybreadcrumbs-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2895bb3dee9f28c9f6455f1a25ceee9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11848,
        "upload_time": "2020-06-13T18:18:59",
        "upload_time_iso_8601": "2020-06-13T18:18:59.131741Z",
        "url": "https://files.pythonhosted.org/packages/7e/1a/6d92697645f157b85f4da440cc8b0389bb20389cbefe9f0cdb504aa2a2a4/pybreadcrumbs-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a57b5801d90a4f07605d1c6671ce24f032196335c94d9cb59aff3051f738390",
        "md5": "0de5b6dcd8d3027e6ee37715cadfd999",
        "sha256": "3ee757b19fb47b0ec56fc47071380d1b011bc8c2209d6114eae34dc4902919be"
      },
      "downloads": -1,
      "filename": "pybreadcrumbs-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0de5b6dcd8d3027e6ee37715cadfd999",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9725,
      "upload_time": "2020-06-13T18:18:12",
      "upload_time_iso_8601": "2020-06-13T18:18:12.829871Z",
      "url": "https://files.pythonhosted.org/packages/3a/57/b5801d90a4f07605d1c6671ce24f032196335c94d9cb59aff3051f738390/pybreadcrumbs-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e1a6d92697645f157b85f4da440cc8b0389bb20389cbefe9f0cdb504aa2a2a4",
        "md5": "2895bb3dee9f28c9f6455f1a25ceee9d",
        "sha256": "74ecd01577e14470db4434b1c03b07844c83780e9ab931dc3368012e40f1d925"
      },
      "downloads": -1,
      "filename": "pybreadcrumbs-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2895bb3dee9f28c9f6455f1a25ceee9d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11848,
      "upload_time": "2020-06-13T18:18:59",
      "upload_time_iso_8601": "2020-06-13T18:18:59.131741Z",
      "url": "https://files.pythonhosted.org/packages/7e/1a/6d92697645f157b85f4da440cc8b0389bb20389cbefe9f0cdb504aa2a2a4/pybreadcrumbs-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}