{
  "info": {
    "author": "Algo 2 Trade",
    "author_email": "help@algo2.trade",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python APIs for SAS Online Alpha Trade Web Platform\n# NOTE:: This is Unofficial python module, don't ask SAS support team for help, use it AS-IS\n\nThe Python APIs for communicating with the SAS Online Alpha Trade Web Platform.\n\nAlpha Trade Python library provides an easy to use python wrapper over the HTTPS APIs.\n\nThe HTTP calls have been converted to methods and JSON responses are wrapped into Python-compatible objects.\n\nWebsocket connections are handled automatically within the library.\n\nThis work is completely based on Python SDK / APIs for [AliceBlueOnline](https://github.com/krishnavelu/alice_blue.git).  \nThanks to [krishnavelu](https://github.com/krishnavelu/).  \n\n- **Author: [algo2t](https://github.com/algo2t/)**\n- **Github Repository: [alphatrade](https://github.com/algo2t/alphatrade.git)**\n\n## Installation\n\nThis module is installed via pip:\n\n```\npip install git+https://github.com/algo2t/alphatrade.git\n```\n\nIt can also be installed from [pypi](https://pypi.org/project/alphatrade/0.1.2/)  \n\n```\npip install alphatrade\n```\n\nTo force upgrade existing installations:\n\n```\npip uninstall alphatrade\npip --no-cache-dir install --upgrade alphatrade\n```\n\n### Prerequisites\n\nPython 3.x\n\nAlso, you need the following modules:\n\n- `protlib`\n- `websocket_client`\n- `requests`\n- `pandas`\n\nThe modules can also be installed using `pip`\n\n## Examples - Start Here - Important \n\nPlease clone this repository and check the examples folder to get started.  \nCheck [here](https://algo2t.github.io/alphatrade/#working-with-examples)\n\n## Getting started with API\n\n### Overview\n\nThere is only one class in the whole library: `AlphaTrade`. When the `AlphaTrade` object is created an access token from the SAS Online alpha trade server is stored in text file `access_token.txt` in the same directory. An access token is valid for 24 hours. See the examples folder with `config.py` file to see how to store your credentials.\nWith an access token, you can instantiate an AlphaTrade object again. Ideally you only need to create an access_token once every day.\n\n### REST Documentation\n\nThe original REST API that this SDK is based on is available online.\n[Alice Blue API REST documentation](http://antplus.aliceblueonline.com/#introduction)\n\n## Using the API\n\n### Logging\n\nThe whole library is equipped with pythonâ€˜s `logging` module for debugging. If more debug information is needed, enable logging using the following code.\n\n```python\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n### Get an access token\n\n1. Import alphatrade\n\n```python\nfrom alphatrade import *\n```\n\n2. Create `config.py` file  \nAlways keep credentials in a separate file\n```python\nlogin_id = \"RR249\"\npassword = \"SAS@249\"\ntwofa = \"rr\"\n\ntry:\n    access_token = open('access_token.txt', 'r').read().rstrip()\nexcept Exception as e:\n    print('Exception occurred :: {}'.format(e))\n    access_token = None\n```\n\n3. Import the config\n```python\nimport config\n```\n\n### Create AlphaTrade Object\n\n1. Create `AlphaTrade` object with your `login_id`, `password`, `2FA` and/or `access_token`.\n\nUse `config` object to get `login_id`, `password`, `twofa` and `access_token`.  \n\n```python\nfrom alphatrade import AlphaTrade\nimport config\nsas = AlphaTrade(login_id=config.login_id, password=config.password, twofa=config.twofa, access_token=config.access_token)\n```\n\n2. You can run commands here to check your connectivity\n\n```python\nprint(sas.get_balance()) # get balance / margin limits\nprint(sas.get_profile()) # get profile\nprint(sas.get_daywise_positions()) # get daywise positions\nprint(sas.get_netwise_positions()) # get netwise positions\nprint(sas.get_holding_positions()) # get holding positions\n```\n\n### Get master contracts\n\nGetting master contracts allow you to search for instruments by symbol name and place orders.\nMaster contracts are stored as an OrderedDict by token number and by symbol name. Whenever you get a trade update, order update, or quote update, the library will check if master contracts are loaded. If they are, it will attach the instrument object directly to the update. By default all master contracts of all enabled exchanges in your personal profile will be downloaded. i.e. If your profile contains the following as enabled exchanges `['NSE', 'BSE', 'CDS', 'MCX', NFO']` all contract notes of all exchanges will be downloaded by default. If you feel it takes too much time to download all exchange, or if you donâ€˜t need all exchanges to be downloaded, you can specify which exchange to download contract notes while creating the AlphaTrade object.\n\n```python\nsas = AlphaTrade(login_id=config.login_id, password=config.password, twofa=config.twofa, access_token=config.access_token, master_contracts_to_download=['NSE', 'BSE'])\n```\n\nThis will reduce a few milliseconds in object creation time of AlphaTrade object.\n\n### Get tradable instruments\n\nSymbols can be retrieved in multiple ways. Once you have the master contract loaded for an exchange, you can get an instrument in many ways.\n\nGet a single instrument by itâ€˜s name:\n\n```python\ntatasteel_nse_eq = sas.get_instrument_by_symbol('NSE', 'TATASTEEL')\nreliance_nse_eq = sas.get_instrument_by_symbol('NSE', 'RELIANCE')\nongc_bse_eq = sas.get_instrument_by_symbol('BSE', 'ONGC')\nindia_vix_nse_index = sas.get_instrument_by_symbol('NSE', 'India VIX')\nsensex_nse_index = sas.get_instrument_by_symbol('BSE', 'SENSEX')\n```\n\nGet a single instrument by itâ€˜s token number (generally useful only for BSE Equities):\n\n```python\nongc_bse_eq = sas.get_instrument_by_token('BSE', 500312)\nreliance_bse_eq = sas.get_instrument_by_token('BSE', 500325)\nacc_nse_eq = sas.get_instrument_by_token('NSE', 22)\n```\n\nGet FNO instruments easily by mentioning expiry, strike & call or put.\n\n```python\nbn_fut = sas.get_instrument_for_fno(symbol = 'BANKNIFTY', expiry_date=datetime.date(2019, 6, 27), is_fut=True, strike=None, is_call = False)\nbn_call = sas.get_instrument_for_fno(symbol = 'BANKNIFTY', expiry_date=datetime.date(2019, 6, 27), is_fut=False, strike=30000, is_call = True)\nbn_put = sas.get_instrument_for_fno(symbol = 'BANKNIFTY', expiry_date=datetime.date(2019, 6, 27), is_fut=False, strike=30000, is_call = False)\n```\n\n### Search for symbols\n\nSearch for multiple instruments by matching the name. This works case insensitive and returns all instrument which has the name in its symbol.\n\n```python\nall_sensex_scrips = sas.search_instruments('BSE', 'sEnSeX')\nprint(all_sensex_scrips)\n```\n\nThe above code results multiple symbol which has â€˜sensexâ€™ in its symbol.\n\n```\n[Instrument(exchange='BSE', token=1, symbol='SENSEX', name='SENSEX', expiry=None, lot_size=None), Instrument(exchange='BSE', token=540154, symbol='IDFSENSEXE B', name='IDFC Mutual Fund', expiry=None, lot_size=None), Instrument(exchange='BSE', token=532985, symbol='KTKSENSEX B', name='KOTAK MAHINDRA MUTUAL FUND', expiry=None, lot_size=None), Instrument(exchange='BSE', token=538683, symbol='NETFSENSEX B', name='NIPPON INDIA ETF SENSEX', expiry=None, lot_size=None), Instrument(exchange='BSE', token=535276, symbol='SBISENSEX B', name='SBI MUTUAL FUND - SBI ETF SENS', expiry=None, lot_size=None)]\n```\n\nSearch for multiple instruments by matching multiple names\n\n```python\nmultiple_underlying = ['BANKNIFTY','NIFTY','INFY','BHEL']\nall_scripts = sas.search_instruments('NFO', multiple_underlying)\n```\n\n#### Instrument object\n\nInstruments are represented by instrument objects. These are named-tuples that are created while getting the master contracts. They are used when placing an order and searching for an instrument. The structure of an instrument tuple is as follows:\n\n```python\nInstrument = namedtuple('Instrument', ['exchange', 'token', 'symbol',\n                                      'name', 'expiry', 'lot_size'])\n```\n\nAll instruments have the fields mentioned above. Wherever a field is not applicable for an instrument (for example, equity instruments donâ€˜t have strike prices), that value will be `None`\n\n### Quote update\n\nOnce you have master contracts loaded, you can easily subscribe to quote updates.\n\n#### Four types of feed data are available\n\nYou can subscribe any one type of quote update for a given scrip. Using the `LiveFeedType` enum, you can specify what type of live feed you need.\n\n- `LiveFeedType.MARKET_DATA`\n- `LiveFeedType.COMPACT`\n- `LiveFeedType.SNAPQUOTE`\n- `LiveFeedType.FULL_SNAPQUOTE`\n\nPlease refer to the original documentation [here](http://antplus.aliceblueonline.com/#marketdata) for more details of different types of quote update.\n\n#### Subscribe to a live feed\n\n```python\nsas.subscribe(sas.get_instrument_by_symbol('NSE', 'TATASTEEL'), LiveFeedType.MARKET_DATA)\nsas.subscribe(sas.get_instrument_by_symbol('BSE', 'RELIANCE'), LiveFeedType.COMPACT)\n```\n\nSubscribe to multiple instruments in a single call. Give an array of instruments to be subscribed.\n\n```python\nsas.subscribe([sas.get_instrument_by_symbol('NSE', 'TATASTEEL'), sas.get_instrument_by_symbol('NSE', 'ACC')], LiveFeedType.MARKET_DATA)\n```\n\nNote: There is a limit of 250 scrips that can be subscribed on total. Beyond this point the server may disconnect web-socket connection.\n\nStart getting live feed via socket\n\n```python\nsocket_opened = False\ndef event_handler_quote_update(message):\n    print(f\"quote update {message}\")\n\ndef open_callback():\n    global socket_opened\n    socket_opened = True\n\nsas.start_websocket(subscribe_callback=event_handler_quote_update,\n                      socket_open_callback=open_callback,\n                      run_in_background=True)\nwhile(socket_opened==False):\n    pass\nsas.subscribe(sas.get_instrument_by_symbol('NSE', 'ONGC'), LiveFeedType.MARKET_DATA)\nsleep(10)\n```\n\n#### Unsubscribe to a live feed\n\nUnsubscribe to an existing live feed\n\n```python\nsas.unsubscribe(sas.get_instrument_by_symbol('NSE', 'TATASTEEL'), LiveFeedType.MARKET_DATA)\nsas.unsubscribe(sas.get_instrument_by_symbol('BSE', 'RELIANCE'), LiveFeedType.COMPACT)\n```\n\nUnsubscribe to multiple instruments in a single call. Give an array of instruments to be unsubscribed.\n\n```python\nsas.unsubscribe([sas.get_instrument_by_symbol('NSE', 'TATASTEEL'), sas.get_instrument_by_symbol('NSE', 'ACC')], LiveFeedType.MARKET_DATA)\n```\n\n#### Get All Subscribed Symbols\n\n```python\nsas.get_all_subscriptions() # All\n```\n\n### Market Status messages & Exchange messages.\n\nSubscribe to market status messages\n\n```python\nsas.subscribe_market_status_messages()\n```\n\nGetting market status messages.\n\n```python\nprint(sas.get_market_status_messages())\n```\n\nExample result of `get_market_status_messages()`\n\n```\n[{'exchange': 'NSE', 'length_of_market_type': 6, 'market_type': b'NORMAL', 'length_of_status': 31, 'status': b'The Closing Session has closed.'}, {'exchange': 'NFO', 'length_of_market_type': 6, 'market_type': b'NORMAL', 'length_of_status': 45, 'status': b'The Normal market has closed for 22 MAY 2020.'}, {'exchange': 'CDS', 'length_of_market_type': 6, 'market_type': b'NORMAL', 'length_of_status': 45, 'status': b'The Normal market has closed for 22 MAY 2020.'}, {'exchange': 'BSE', 'length_of_market_type': 13, 'market_type': b'OTHER SESSION', 'length_of_status': 0, 'status': b''}]\n```\n\nNote: As per `alice blue` [documentation](http://antplus.aliceblueonline.com/#market-status) all market status messages should be having a timestamp. But in actual the server doesnâ€˜t send timestamp, so the library is unable to get timestamp for now.\n\nSubscribe to exchange messages\n\n```python\nsas.subscribe_exchange_messages()\n```\n\nGetting market status messages.\n\n```python\nprint(sas.get_exchange_messages())\n```\n\nExample result of `get_exchange_messages()`\n\n```\n[{'exchange': 'NSE', 'length': 32, 'message': b'DS : Bulk upload can be started.', 'exchange_time_stamp': 1590148595}, {'exchange': 'NFO', 'length': 200, 'message': b'MARKET WIDE LIMIT FOR VEDL IS 183919959. OPEN POSITIONS IN VEDL HAVE REACHED 84 PERCENT OF THE MARKET WIDE LIMIT.                                                                                       ', 'exchange_time_stamp': 1590146132}, {'exchange': 'CDS', 'length': 54, 'message': b'DS : Regular segment Bhav copy broadcast successfully.', 'exchange_time_stamp': 1590148932}, {'exchange': 'MCX', 'length': 7, 'message': b'.......', 'exchange_time_stamp': 1590196159}]\n```\n\n#### Market Status messages & Exchange messages through callbacks\n\n```python\nsocket_opened = False\ndef market_status_messages(message):\n    print(f\"market status messages {message}\")\n\ndef exchange_messages(message):\n    print(f\"exchange messages {message}\")\n\ndef open_callback():\n    global socket_opened\n    socket_opened = True\n\nsas.start_websocket(market_status_messages_callback=market_status_messages,\n\t\t\t\t\t  exchange_messages_callback=exchange_messages,\n                      socket_open_callback=open_callback,\n                      run_in_background=True)\nwhile(socket_opened==False):\n    pass\nsas.subscribe_market_status_messages()\nsas.subscribe_exchange_messages()\nsleep(10)\n```\n\n### Place an order\n\nPlace limit, market, SL, SL-M, AMO, BO, CO orders\n\n```python\nprint (sas.get_profile())\n\n# TransactionType.Buy, OrderType.Market, ProductType.Delivery\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Market,\n                     product_type = ProductType.Delivery,\n                     price = 0.0,\n                     trigger_price = None,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n   )\n\n# TransactionType.Buy, OrderType.Market, ProductType.Intraday\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Market,\n                     product_type = ProductType.Intraday,\n                     price = 0.0,\n                     trigger_price = None,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n# TransactionType.Buy, OrderType.Market, ProductType.CoverOrder\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Market,\n                     product_type = ProductType.CoverOrder,\n                     price = 0.0,\n                     trigger_price = 7.5, # trigger_price Here the trigger_price is taken as stop loss (provide stop loss in actual amount)\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n# TransactionType.Buy, OrderType.Limit, ProductType.BracketOrder\n# OCO Order can't be of type market\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%4%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Limit,\n                     product_type = ProductType.BracketOrder,\n                     price = 8.0,\n                     trigger_price = None,\n                     stop_loss = 6.0,\n                     square_off = 10.0,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n# TransactionType.Buy, OrderType.Limit, ProductType.Intraday\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%5%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Limit,\n                     product_type = ProductType.Intraday,\n                     price = 8.0,\n                     trigger_price = None,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n# TransactionType.Buy, OrderType.Limit, ProductType.CoverOrder\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%6%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.Limit,\n                     product_type = ProductType.CoverOrder,\n                     price = 7.0,\n                     trigger_price = 6.5, # trigger_price Here the trigger_price is taken as stop loss (provide stop loss in actual amount)\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n###############################\n\n# TransactionType.Buy, OrderType.StopLossMarket, ProductType.Delivery\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%7%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.StopLossMarket,\n                     product_type = ProductType.Delivery,\n                     price = 0.0,\n                     trigger_price = 8.0,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n# TransactionType.Buy, OrderType.StopLossMarket, ProductType.Intraday\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%8%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.StopLossMarket,\n                     product_type = ProductType.Intraday,\n                     price = 0.0,\n                     trigger_price = 8.0,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n\n# TransactionType.Buy, OrderType.StopLossMarket, ProductType.CoverOrder\n# CO order is of type Limit and And Market Only\n\n# TransactionType.Buy, OrderType.StopLossMarket, ProductType.BO\n# BO order is of type Limit and And Market Only\n\n###################################\n\n# TransactionType.Buy, OrderType.StopLossLimit, ProductType.Delivery\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%9%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.StopLossMarket,\n                     product_type = ProductType.Delivery,\n                     price = 8.0,\n                     trigger_price = 8.0,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n# TransactionType.Buy, OrderType.StopLossLimit, ProductType.Intraday\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%10%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.StopLossLimit,\n                     product_type = ProductType.Intraday,\n                     price = 8.0,\n                     trigger_price = 8.0,\n                     stop_loss = None,\n                     square_off = None,\n                     trailing_sl = None,\n                     is_amo = False)\n)\n\n\n\n# TransactionType.Buy, OrderType.StopLossLimit, ProductType.CoverOrder\n# CO order is of type Limit and And Market Only\n\n\n# TransactionType.Buy, OrderType.StopLossLimit, ProductType.BracketOrder\n\nprint (\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%11%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\nprint(\n   sas.place_order(transaction_type = TransactionType.Buy,\n                     instrument = sas.get_instrument_by_symbol('NSE', 'INFY'),\n                     quantity = 1,\n                     order_type = OrderType.StopLossLimit,\n                     product_type = ProductType.BracketOrder,\n                     price = 8.0,\n                     trigger_price = 8.0,\n                     stop_loss = 1.0,\n                     square_off = 1.0,\n                     trailing_sl = 20,\n                     is_amo = False)\n)\n```\n\n### Place basket order\n\nBasket order is used to buy or sell group of securities simultaneously.\n\n```python\norder1 = {  \"instrument\"        : sas.get_instrument_by_symbol('NSE', 'INFY'),\n            \"order_type\"        : OrderType.Market,\n            \"quantity\"          : 1,\n            \"transaction_type\"  : TransactionType.Buy,\n            \"product_type\"      : ProductType.Delivery}\norder2 = {  \"instrument\"        : sas.get_instrument_by_symbol('NSE', 'SBIN'),\n            \"order_type\"        : OrderType.Limit,\n            \"quantity\"          : 2,\n            \"price\"             : 280.0,\n            \"transaction_type\"  : TransactionType.Sell,\n            \"product_type\"      : ProductType.Intraday}\norder = [order1, order2]\nprint(sas.place_basket_order(orders))\n```\n\n### Cancel an order\n\n```python\nsas.cancel_order('170713000075481') #Cancel an open order\n```\n\n### Getting order history and trade details\n\n#### Get order history of a particular order\n\n```python\nprint(sas.get_order_history('170713000075481'))\n```\n\n#### Get order history of all orders.\n\n```python\nprint(sas.get_order_history())\n```\n\n#### Get trade book\n\n```python\nprint(sas.get_trade_book())\n```\n\n#### Get historical candles data\n\nThis will provide historical data but **not for current day**.  \nThis returns a `pandas` `DataFrame` object which be used with `pandas_ta` to get various indicators values.  \n\n```python\nfrom datetime import datetime\nprint(sas.get_historical_candles('MCX', 'NATURALGAS NOV FUT', datetime(2020, 10, 19), datetime.now() ,interval=30))\n```\n\nOutput \n\n```console\nInstrument(exchange='MCX', token=224365, symbol='NATURALGAS NOV FUT', name='', expiry=datetime.date(2020, 11, 24), lot_size=None)\n                            open   high    low  close  volume\ndate\n2020-10-19 09:00:00+05:30  238.9  239.2  238.4  239.0     373\n2020-10-19 09:30:00+05:30  239.0  239.0  238.4  238.6     210\n2020-10-19 10:00:00+05:30  238.7  238.7  238.1  238.1     213\n2020-10-19 10:30:00+05:30  238.0  238.4  238.0  238.1     116\n2020-10-19 11:00:00+05:30  238.1  238.2  238.0  238.0      69\n...                          ...    ...    ...    ...     ...\n2020-10-23 21:00:00+05:30  237.5  238.1  237.3  237.6     331\n2020-10-23 21:30:00+05:30  237.6  238.5  237.6  237.9     754\n2020-10-23 22:00:00+05:30  237.9  238.1  237.2  237.9     518\n2020-10-23 22:30:00+05:30  237.9  238.7  237.7  238.1     897\n2020-10-23 23:00:00+05:30  238.2  238.3  236.3  236.5    1906\n\n```\n\nBetter way to get historical data, first get the latest version from github  \n\n`python -m pip install git+https://github.com/algo2t/alphatrade.git`\n\n```python\nfrom datetime import datetime\nindia_vix_nse_index = sas.get_instrument_by_symbol('NSE', 'India VIX')\nprint(sas.get_historical_candles(india_vix_nse_index.exchange, india_vix_nse_index.symbol, datetime(2020, 10, 19), datetime.now() ,interval=30))\n```\n\n\n#### Get intraday candles data\n\nThis will give candles data for **current day only**.  \nThis returns a `pandas` `DataFrame` object which be used with `pandas_ta` to get various indicators values.  \n\n```python\nprint(sas.get_intraday_candles('MCX', 'NATURALGAS NOV FUT', interval=15))\n```\n\nBetter way to get intraday data, first get the latest version from github  \n\n`python -m pip install git+https://github.com/algo2t/alphatrade.git`\n\n```python\nfrom datetime import datetime\nnifty_bank_nse_index = sas.get_instrument_by_symbol('NSE', 'Nifty Bank')\nprint(sas.get_intraday_candles(nifty_bank_nse_index.exchange, nifty_bank_nse_index.symbol, datetime(2020, 10, 19), datetime.now(), interval=10))\n```\n\n### Order properties as enums\n\nOrder properties such as TransactionType, OrderType, and others have been safely classified as enums so you donâ€˜t have to write them out as strings\n\n#### TransactionType\n\nTransaction types indicate whether you want to buy or sell. Valid transaction types are of the following:\n\n- `TransactionType.Buy` - buy\n- `TransactionType.Sell` - sell\n\n#### OrderType\n\nOrder type specifies the type of order you want to send. Valid order types include:\n\n- `OrderType.Market` - Place the order with a market price\n- `OrderType.Limit` - Place the order with a limit price (limit price parameter is mandatory)\n- `OrderType.StopLossLimit` - Place as a stop loss limit order\n- `OrderType.StopLossMarket` - Place as a stop loss market order\n\n#### ProductType\n\nProduct types indicate the complexity of the order you want to place. Valid product types are:\n\n- `ProductType.Intraday` - Intraday order that will get squared off before market close\n- `ProductType.Delivery` - Delivery order that will be held with you after market close\n- `ProductType.CoverOrder` - Cover order\n- `ProductType.BracketOrder` - One cancels other order. Also known as bracket order\n\n## Working with examples\n\n[Here](https://github.com/algo2t/alphatrade/tree/main/examples), examples directory there are 3 files `sas_login_eg.py`, `streaming_data.py` and `stop.txt`\n\n### Steps\n\n- Clone the repository to your local machine `git clone https://github.com/algo2t/alphatrade.git`\n- Copy the examples directory to any location where you want to write your code\n- Install the `alphatrade` module using `pip` => `python -m pip install https://github.com/algo2t/alphatrade.git`\n- Open the examples directory in your favorite editor, in our case it is [VSCodium](https://vscodium.com/)\n- Open the `sas_login_eg.py` file in the editor\n- Now, create `config.py` file as per instructions given below and in the above file\n- Provide correct login credentials like login_id, password and twofa\n- twofa must be same for all questions under two factor authentication\n- This is generally set from the homepage of alpha web trading platform [here](https://alpha.sasonline.in/)\n- Click on `FORGET PASSWORD?` => Select `Reset 2FA` radio button.  ![image](https://raw.githubusercontent.com/algo2t/alphatrade/main/snaps/forget_password.png)\n- Enter the CLIENT ID (LOGIN_ID), EMAIL ID and PAN NUMBER, click on `RESET` button.  ![image](https://raw.githubusercontent.com/algo2t/alphatrade/main/snaps/reset_two_fa.png)\n- Click on `BACK TO LOGIN` and enter `CLIENT ID` and `PASSWORD`, click on `SECURED SIGN-IN`\n- Set same answers for 5 questions and click on `SUBMIT` button.  ![image](https://raw.githubusercontent.com/algo2t/alphatrade/main/snaps/set_answers.png)\n\n`config.py`\n```python\nlogin_id = \"RR249\"\npassword = \"SAS@249\"\ntwofa = \"rr\"\n\ntry:\n    access_token = open('access_token.txt', 'r').read().rstrip()\nexcept Exception as e:\n    print('Exception occurred :: {}'.format(e))\n    access_token = None\n\n```\n\n## Example strategy using alpha trade API\n\n[Here](https://github.com/algo2t/alphatrade/blob/main/examples/streaming_data.py) is an example moving average strategy using alpha trade web API.\nThis strategy generates a buy signal when 5-EMA > 20-EMA (golden cross) or a sell signal when 5-EMA < 20-EMA (death cross).\n\n## Example for getting historical and intraday candles data\n\n[Here](https://github.com/algo2t/alphatrade/blob/main/examples/historical_data.py) is an example for getting historical data using alpha trade web API.\n\nFor historical candles data `start_time` and `end_time` must be provided in format as shown below.\nIt can also be provided as `timedelta`. Check the script `historical_data.py` in examples.\n\n```python\nfrom datetime import datetime, timedelta\nstart_time = datetime(2020, 10, 19, 9, 15, 0)\nend_time = datetime(2020, 10, 21, 16, 59, 0)\n\ndf = sas.get_historical_candles('MCX', 'NATURALGAS OCT FUT', start_time, end_time, 5)\nprint(df)\nend_time = start_time + timedelta(days=5)\ndf = sas.get_historical_candles('MCX', 'NATURALGAS NOV FUT', start_time, end_time, 15)\nprint(df)\n```\n\nFor intraday or todayâ€˜s / current dayâ€˜s candles data.  \n\n```python\ndf = sas.get_intraday_candles('MCX', 'NATURALGAS OCT FUT')\nprint(df)\ndf = sas.get_intraday_candles('MCX', 'NATURALGAS NOV FUT', 15)\nprint(df)\n```\n\n\n## Read this before creating an issue\n\nBefore creating an issue in this library, please follow the following steps.\n\n1. Search the problem you are facing is already asked by someone else. There might be some issues already there, either solved/unsolved related to your problem. Go to [issues](https://github.com/algo2t/alphatrade/issues) page, use `is:issue` as filter and search your problem. ![image](https://user-images.githubusercontent.com/38440742/85207058-376ee400-b2f4-11ea-91ad-c8fd8a682a12.png)\n2. If you feel your problem is not asked by anyone or no issues are related to your problem, then create a new issue.\n3. Describe your problem in detail while creating the issue. If you donâ€˜t have time to detail/describe the problem you are facing, assume that I also wonâ€˜t be having time to respond to your problem.\n4. Post a sample code of the problem you are facing. If I copy paste the code directly from issue, I should be able to reproduce the problem you are facing.\n5. Before posting the sample code, test your sample code yourself once. Only sample code should be tested, no other addition should be there while you are testing.\n6. Have some print() function calls to display the values of some variables related to your problem.\n7. Post the results of print() functions also in the issue.\n8. Use the insert code feature of github to inset code and print outputs, so that the code is displayed neat. ![image](https://user-images.githubusercontent.com/38440742/85207234-4dc96f80-b2f5-11ea-990c-df013dd69cf2.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/algo2t/alphatrade",
    "keywords": "alphatrade,alpha-trade,sasonline,python,sdk,trading,stock markets",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alphatrade",
    "package_url": "https://pypi.org/project/alphatrade/",
    "platform": "",
    "project_url": "https://pypi.org/project/alphatrade/",
    "project_urls": {
      "Homepage": "https://github.com/algo2t/alphatrade"
    },
    "release_url": "https://pypi.org/project/alphatrade/0.1.3/",
    "requires_dist": [
      "requests",
      "websocket-client",
      "protlib",
      "pandas"
    ],
    "requires_python": ">=3.6",
    "summary": "Python APIs for SAS Online Alpha Trade Web Platform",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11298768,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdfe8716bb1a0d7e2f7d0acb47378a34995d6e4c18bc7a9c0a962a061ca91dd7",
          "md5": "cd9257af9121f495b687c94eba36e647",
          "sha256": "57e66643b85f2475b16c40c15d1013b555babbad130a2856c3d8bdf936c092c8"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd9257af9121f495b687c94eba36e647",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 18618,
        "upload_time": "2020-10-24T11:58:03",
        "upload_time_iso_8601": "2020-10-24T11:58:03.490144Z",
        "url": "https://files.pythonhosted.org/packages/cd/fe/8716bb1a0d7e2f7d0acb47378a34995d6e4c18bc7a9c0a962a061ca91dd7/alphatrade-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee3fdb4647546de20011104a75f7451c8961a2d5da316de0af054770bf4a1a8",
          "md5": "42274780130cf445e9e4b9eb64018d6f",
          "sha256": "dd7df927bd4ca0faf13be1acf4468a1889bfe2ec09b038853c8dee664380b038"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "42274780130cf445e9e4b9eb64018d6f",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 31474,
        "upload_time": "2020-10-24T11:58:06",
        "upload_time_iso_8601": "2020-10-24T11:58:06.222920Z",
        "url": "https://files.pythonhosted.org/packages/0e/e3/fdb4647546de20011104a75f7451c8961a2d5da316de0af054770bf4a1a8/alphatrade-0.1.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee256c4648a2fee6682d356ec21d5188c4a3ddb0be451f3d6d1b241d393a95ca",
          "md5": "0430bec6ba0e00aba9e6aa279f71a189",
          "sha256": "b7a5b7c9162c00de639e713c0e093185160a8002d396f4e3b3cdbc13c645eb42"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0430bec6ba0e00aba9e6aa279f71a189",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26586,
        "upload_time": "2020-10-24T11:58:07",
        "upload_time_iso_8601": "2020-10-24T11:58:07.711981Z",
        "url": "https://files.pythonhosted.org/packages/ee/25/6c4648a2fee6682d356ec21d5188c4a3ddb0be451f3d6d1b241d393a95ca/alphatrade-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7ab2c6690813e291e723ef9e7708ae0fbc8dd3f74c5e0ebacafab9a56ba4ed0",
          "md5": "2ce0d5ccb80ebd01334e88eebadb4222",
          "sha256": "c4d6f5d7b52fc11802c313750f8ff8014e9fd3be10baec9be972ab682207192d"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ce0d5ccb80ebd01334e88eebadb4222",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 19432,
        "upload_time": "2020-10-24T21:29:55",
        "upload_time_iso_8601": "2020-10-24T21:29:55.441756Z",
        "url": "https://files.pythonhosted.org/packages/e7/ab/2c6690813e291e723ef9e7708ae0fbc8dd3f74c5e0ebacafab9a56ba4ed0/alphatrade-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "11d13b56f2adc5761b30af58102fa68524627eef507ad29851fe83ea88dd9c2e",
          "md5": "b482d1c38f984ecc609fe2c1ead839fd",
          "sha256": "c714db5ec23eb7748dd4063834a9bc1d1eb05707bd0396748082e0dc8096e043"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.2-py3.7.egg",
        "has_sig": false,
        "md5_digest": "b482d1c38f984ecc609fe2c1ead839fd",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 33920,
        "upload_time": "2020-10-24T21:29:57",
        "upload_time_iso_8601": "2020-10-24T21:29:57.162908Z",
        "url": "https://files.pythonhosted.org/packages/11/d1/3b56f2adc5761b30af58102fa68524627eef507ad29851fe83ea88dd9c2e/alphatrade-0.1.2-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77a7f5b080f0e1a9d18970e6a219486a2f87f34ed9fb3751df19c7330382b044",
          "md5": "febf702cb1656f58a431a2f9260ba421",
          "sha256": "710b547e7679fd9799d182b00c22e78905f7551093f75535c1ff3689f5272f8e"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "febf702cb1656f58a431a2f9260ba421",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29796,
        "upload_time": "2020-10-24T21:29:58",
        "upload_time_iso_8601": "2020-10-24T21:29:58.761585Z",
        "url": "https://files.pythonhosted.org/packages/77/a7/f5b080f0e1a9d18970e6a219486a2f87f34ed9fb3751df19c7330382b044/alphatrade-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e41bf9019ea12cacbbe50d7c53b364d407a889f537de897dd9483b98efc0decc",
          "md5": "b59531ea04582aee422895e6d94da44c",
          "sha256": "389dff6e71a8f1987fd929e3aeb9c7625a53064a99d2977fbd65d4a3cea1cc8e"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b59531ea04582aee422895e6d94da44c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 21048,
        "upload_time": "2021-08-27T21:24:15",
        "upload_time_iso_8601": "2021-08-27T21:24:15.834783Z",
        "url": "https://files.pythonhosted.org/packages/e4/1b/f9019ea12cacbbe50d7c53b364d407a889f537de897dd9483b98efc0decc/alphatrade-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5a3b801f881a6fcc6b9b0ecd17d45e1e2713b005c351d614d2e79a81420797b",
          "md5": "23644aa445643ba8630deee37ab185eb",
          "sha256": "8d4f120d91a6ab2f664dfd59529e454ff7469ae627191132186e308b5d0acedd"
        },
        "downloads": -1,
        "filename": "alphatrade-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "23644aa445643ba8630deee37ab185eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34703,
        "upload_time": "2021-08-27T21:24:20",
        "upload_time_iso_8601": "2021-08-27T21:24:20.118780Z",
        "url": "https://files.pythonhosted.org/packages/a5/a3/b801f881a6fcc6b9b0ecd17d45e1e2713b005c351d614d2e79a81420797b/alphatrade-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e41bf9019ea12cacbbe50d7c53b364d407a889f537de897dd9483b98efc0decc",
        "md5": "b59531ea04582aee422895e6d94da44c",
        "sha256": "389dff6e71a8f1987fd929e3aeb9c7625a53064a99d2977fbd65d4a3cea1cc8e"
      },
      "downloads": -1,
      "filename": "alphatrade-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b59531ea04582aee422895e6d94da44c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 21048,
      "upload_time": "2021-08-27T21:24:15",
      "upload_time_iso_8601": "2021-08-27T21:24:15.834783Z",
      "url": "https://files.pythonhosted.org/packages/e4/1b/f9019ea12cacbbe50d7c53b364d407a889f537de897dd9483b98efc0decc/alphatrade-0.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5a3b801f881a6fcc6b9b0ecd17d45e1e2713b005c351d614d2e79a81420797b",
        "md5": "23644aa445643ba8630deee37ab185eb",
        "sha256": "8d4f120d91a6ab2f664dfd59529e454ff7469ae627191132186e308b5d0acedd"
      },
      "downloads": -1,
      "filename": "alphatrade-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "23644aa445643ba8630deee37ab185eb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34703,
      "upload_time": "2021-08-27T21:24:20",
      "upload_time_iso_8601": "2021-08-27T21:24:20.118780Z",
      "url": "https://files.pythonhosted.org/packages/a5/a3/b801f881a6fcc6b9b0ecd17d45e1e2713b005c351d614d2e79a81420797b/alphatrade-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}