{
  "info": {
    "author": "ryxcommar",
    "author_email": "ryxcommar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Dispatchlib\n\nDispatchlib is a metaprogramming library for creating single-dispatched generic functions, similar to `functools.singledispatch`, with a few additional goodies:\n\n- Supports type annotations that utilize Python's builtin `typing` module.\n- Lazy-loads string annotations (i.e. types declared via string).\n- Priority dispatching: you can set the \"priority\" of an overloaded implementation. Basically `dispatchlib.dispatch` is a big ol `if elif elif` factory, and the order is determined by `@f.register(priority=?)`\n- A \"`metadispatch`\" that lets you overload the dispatcher itself. (Hard to explain; see example for clarification.)\n\nDispatchlib's `dispatch` decorator is not a strict superset of `functools.singledispatch`. There are a few things in `functools.singledispatch` that are not in `single`:\n\n- `dispatchlib.dispatch` requires that you always call the register decorator like this: `@f.regsiter()` whereas `functools.singledispatch`. The reason why is because `dispatchlib.dispatch` can dispatch not just based on types but also based on functions , so the first arg in the `register` decorator being a function is not sufficient to conclude whether it's being called or not prior to decoration.\n- `functools.singledispatch` supports dynamic polymorphism using `__mro__`, whereas `dispatchlib.dispatch` dispatches based on running a check for each overloaded implementation; by default, checks are run in FIFO order, with the exception of the \"base\" function, which is always run last.\n- `functools.singledispatch` is faster.\n\n## Install\n\n```shell\npip install dispatchlib\n```\n\n## Examples\n\n### Basic Example 1\n\n```python\nfrom dispatchlib import dispatch\nfrom typing import Any, Dict, List\n\n@dispatch\ndef mul_by_two(x: Any):\n    \"\"\"Multiply numbers by two\"\"\"\n    return x * 2\n\n# Support for builtin typing module:\n\n@mul_by_two.register()\ndef _(x: Dict[Any, int]):\n    return {k: v * 2 for k, v in x.items()}\n\n@mul_by_two.register()\ndef _(x: List[int]):\n    return [i * 2 for i in x]\n\n# lazy-loaded type hints:\n\n@mul_by_two.register()\ndef _(x: 'pandas.DataFrame'):\n    return x.select_dtypes(include='number') * 2\n\n# Assert it all works as intended:\n\nassert mul_by_two(3) == 6\nassert mul_by_two([2, 3, 4]) == [4, 6, 8]\nassert mul_by_two({'a': 2, 'b': 3}) == {'a': 4, 'b': 6}\n\n# Testing lazy-load functionality:\n\ntry:\n    import pandas as pd\nexcept ModuleNotFoundError:\n    pass\nelse:\n    print(mul_by_two(pd.DataFrame({\n        'a': range(10),\n        'b': ['exclude me'] * 10\n    })))\n```\n\n### Basic Example 2\n\n```python\nfrom dispatchlib import Dispatcher\nfrom types import FunctionType\n\n# You can call Dispatcher() to skip a implementation\n# It's also useful for type-checking.\n\nalways_return_figure = Dispatcher()\n\nassert isinstance(always_return_figure, Dispatcher)\nassert isinstance(always_return_figure, FunctionType)\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n\n# Implementations can be chained together:\n\n@always_return_figure.register('matplotlib.pyplot.Axes')\n@always_return_figure.register('matplotlib.pyplot.Subplot')\ndef return_figure1(x):\n    return x.figure\n\n@always_return_figure.register('matplotlib.pyplot.Figure')\ndef return_figure2(x):\n    return x\n\n\nfig, ax = plt.subplots()\n\nassert always_return_figure(ax) == always_return_figure(fig)\n\nplt.close(fig)\n```\n\n### Metadispatch example\n\n```python\nfrom dispatchlib import dispatch\nfrom dispatchlib import metadispatch\n\nclass HTTPException(Exception):\n    status_code: int\n\nclass PageNotFoundError(HTTPException):\n    status_code: int = 404\n\nclass ForbiddenError(HTTPException):\n    status_code: int = 403\n\ncustom_metadispatcher = metadispatch()\n\n# This metadispatcher knows how to interpret when a user registers a function\n# with an integer: The integer represents an HTTP status code.\n\n@custom_metadispatcher.register(lambda val: isinstance(val, int))\ndef _(val: int):\n    def checker(x: HTTPException):\n        return x.status_code == val\n    return checker\n\n@dispatch(metadispatcher=custom_metadispatcher)\ndef status_code_message(code):\n    raise TypeError('Unknown status code.')\n\n@status_code_message.register(404)\ndef _(code):\n    return 'Page not found.'\n\n@status_code_message.register(403)\ndef _(code):\n    return 'Forbidden.'\n\nassert status_code_message(PageNotFoundError()) == 'Page not found.'\nassert status_code_message(ForbiddenError()) == 'Forbidden.'\n```\n\n## Warning\n\nI'm currently using Dispatchlib as part of another larger project. Dispatchlib exists separately of that project because I think it makes sense as its own separate thing. With that said, I plan on doing some bugfixing of use-cases as that project unfolds. So for this version of dispatchlib:\n\n- There may be some bugs. \n- The API may break between changes.\n\nWhen this message is no longer here, consider the module more stable.\n\nI'm interested to\n\n### Todo\n\n- create `dispatchmethod` akin to singledispatchmethod.\n- decorator for making functions and methods dispatchable without immediately registering them to a dispatcher.\n- support MRO for dispatching somehow.\n- make code faster.\n- make code more DRY via abstracting out the shared stuff in both `metadispatch` and `dispatch`.\n- flesh out docs.\n- add unit-tests.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dispatchlib",
    "package_url": "https://pypi.org/project/dispatchlib/",
    "platform": "",
    "project_url": "https://pypi.org/project/dispatchlib/",
    "project_urls": {
      "Documentation": "https://ryxcommar.github.io/dispatchlib/",
      "Source": "https://github.com/ryxcommar/dispatchlib",
      "Tracker": "https://github.com/ryxcommar/dispatchlib/issues"
    },
    "release_url": "https://pypi.org/project/dispatchlib/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Tools for creating dispatchable functions.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8176978,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bc4a222801b827f61207d5a39bdec5d4d70e32efa3affa0af5e290395673347",
          "md5": "25b0e63188ac646d871610883aa70c91",
          "sha256": "61e77a5ef4bf7e2566fecb21c6575e96564e2f55c4904a1acb425ae231be7719"
        },
        "downloads": -1,
        "filename": "dispatchlib-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25b0e63188ac646d871610883aa70c91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3931,
        "upload_time": "2020-09-13T20:58:26",
        "upload_time_iso_8601": "2020-09-13T20:58:26.040503Z",
        "url": "https://files.pythonhosted.org/packages/2b/c4/a222801b827f61207d5a39bdec5d4d70e32efa3affa0af5e290395673347/dispatchlib-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bc4a222801b827f61207d5a39bdec5d4d70e32efa3affa0af5e290395673347",
        "md5": "25b0e63188ac646d871610883aa70c91",
        "sha256": "61e77a5ef4bf7e2566fecb21c6575e96564e2f55c4904a1acb425ae231be7719"
      },
      "downloads": -1,
      "filename": "dispatchlib-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "25b0e63188ac646d871610883aa70c91",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3931,
      "upload_time": "2020-09-13T20:58:26",
      "upload_time_iso_8601": "2020-09-13T20:58:26.040503Z",
      "url": "https://files.pythonhosted.org/packages/2b/c4/a222801b827f61207d5a39bdec5d4d70e32efa3affa0af5e290395673347/dispatchlib-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}