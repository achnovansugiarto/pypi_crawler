{
  "info": {
    "author": "Advestis",
    "author_email": "pythondev@advestis.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![doc](https://img.shields.io/badge/-Documentation-blue)](https://advestis.github.io/adannealing)\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n#### Status\n[![pytests](https://github.com/Advestis/adannealing/actions/workflows/pull-request.yml/badge.svg)](https://github.com/Advestis/adannealing/actions/workflows/pull-request.yml)\n[![push-pypi](https://github.com/Advestis/adannealing/actions/workflows/push-pypi.yml/badge.svg)](https://github.com/Advestis/adannealing/actions/workflows/push-pypi.yml)\n[![push-doc](https://github.com/Advestis/adannealing/actions/workflows/push-doc.yml/badge.svg)](https://github.com/Advestis/adannealing/actions/workflows/push-doc.yml)\n\n![maintained](https://img.shields.io/badge/Maintained%3F-yes-green.svg)\n![issues](https://img.shields.io/github/issues/Advestis/adannealing.svg)\n![pr](https://img.shields.io/github/issues-pr/Advestis/adannealing.svg)\n\n\n#### Compatibilities\n![ubuntu](https://img.shields.io/badge/Ubuntu-supported--tested-success)\n![unix](https://img.shields.io/badge/Other%20Unix-supported--untested-yellow)\n\n![python](https://img.shields.io/pypi/pyversions/adannealing)\n\n\n##### Contact\n[![linkedin](https://img.shields.io/badge/LinkedIn-Advestis-blue)](https://www.linkedin.com/company/advestis/)\n[![website](https://img.shields.io/badge/website-Advestis.com-blue)](https://www.advestis.com/)\n[![mail](https://img.shields.io/badge/mail-maintainers-blue)](mailto:pythondev@advestis.com)\n\n# AdAnnealing\n\nA package doing simulated annealing\n\n## Installation\n\n```\ngit clone https://github.com/pcotteadvestis/adannealing\ncd adannealing\npip install .\n```\n\n## Usage\n\nSimple usage :\n```python\nfrom adannealing import Annealer\n\nclass LossFunc2D:\n    def __init__(self):\n        self.constraints = None\n\n    def __call__(self, w) -> float:\n        \"\"\"\n        A __call__ method must be present. It will be called to evaluate the loss. The argument passed is the \n        parameter value at which the loss has to be computed.\n        \"\"\"\n        x = w[0]\n        y = w[1]\n        return (x - 5) * (x - 2) * (x - 1) * x + 10 * y ** 2\n\n    def on_fit_start(self, val):\n        \"\"\"\n        This method is called by the fitter before optimisation. The argument passed is either the starting point of the\n        optimiser (for single annealer) or the tuple containing different starting points if more than one annealer is used\n        \"\"\"\n        pass\n\n    def on_fit_end(self, val):\n        \"\"\"\n        This method is called by the fitter after optimisation. The argument passed is either the result of the \n        optimiser (for single annealer) or the list of results if more than one annealer reache the end of fit.\n        \"\"\"\n        pass\n\ninit_states, bounds, acceptance = (3.0, 0.5), np.array([[0, 5], [-1, 1]]), 0.01\n\nann = Annealer(\n    loss=LossFunc2D(),\n    weights_step_size=0.1,\n    init_states=init_states,  # Optional\n    bounds=bounds,\n    verbose=True\n)\n\n# Weights of local minimum, and loss at local minimum\nw0, lmin, _, _, _, _ = ann.fit(stopping_limit=acceptance)\n```\n\nUse multiple initial states in parallel runs and get one output per init states :\n```python\nfrom adannealing import Annealer\n\nAnnealer.set_parallel()\n\n\nclass LossFunc2D:\n    def __init__(self):\n        self.constraints = None\n\n    def __call__(self, w) -> float:\n        \"\"\"\n        A __call__ method must be present. It will be called to evaluate the loss. The argument passed is the \n        parameter value at which the loss has to be computed.\n        \"\"\"\n        x = w[0]\n        y = w[1]\n        return (x - 5) * (x - 2) * (x - 1) * x + 10 * y ** 2\n\n    def on_fit_start(self, val):\n        \"\"\"\n        This method is called by the fitter before optimisation. The argument passed is either the starting point of the\n        optimiser (for single annealer) or the tuple containing different starting points if more than one annealer is used\n        \"\"\"\n        pass\n\n    def on_fit_end(self, val):\n        \"\"\"\n        This method is called by the fitter after optimisation. The argument passed is either the result of the \n        optimiser (for single annealer) or the list of results if more than one annealer reache the end of fit.\n        \"\"\"\n        pass\n\nbounds, acceptance, n =  np.array([[0, 5], [-1, 1]]), 0.01, 5\n\nann = Annealer(\n    loss=LossFunc2D(),\n    weights_step_size=0.1,\n    bounds=bounds,\n    verbose=True\n)\n\n# Iterable of n weights of local minimum and loss at local minimum\nresults = ann.fit(npoints=n, stopping_limit=acceptance)\nfor w0, lmin, _, _, _, _ in results:\n    \"\"\"do something\"\"\"\n```\n\nUse multiple initial states in parallel runs and get the result with the smallest loss :\n\n```python\nfrom adannealing import Annealer\n\nAnnealer.set_parallel()\n\n\nclass LossFunc2D:\n    def __init__(self):\n        self.constraints = None\n\nclass LossFunc2D:\n    def __init__(self):\n        self.constraints = None\n\n    def __call__(self, w) -> float:\n        \"\"\"\n        A __call__ method must be present. It will be called to evaluate the loss. The argument passed is the \n        parameter value at which the loss has to be computed.\n        \"\"\"\n        x = w[0]\n        y = w[1]\n        return (x - 5) * (x - 2) * (x - 1) * x + 10 * y ** 2\n\n    def on_fit_start(self, val):\n        \"\"\"\n        This method is called by the fitter before optimisation. The argument passed is either the starting point of the\n        optimiser (for single annealer) or the tuple containing different starting points if more than one annealer is used\n        \"\"\"\n        pass\n\n    def on_fit_end(self, val):\n        \"\"\"\n        This method is called by the fitter after optimisation. The argument passed is either the result of the \n        optimiser (for single annealer) or the list of results if more than one annealer reache the end of fit.\n        \"\"\"\n        pass\n\nbounds, acceptance, n = np.array([[0, 5], [-1, 1]]), 0.01, 5\n\nann = Annealer(\n    loss=LossFunc2D(),\n    weights_step_size=0.1,\n    bounds=bounds,\n    verbose=True\n)\n\n# Weights of the best local minimum and loss at the best local minimum\nw0, lmin, _, _, _, _ = ann.fit(npoints=n, stopping_limit=acceptance, stop_at_first_found=True)\n```\n\nOne can save the history of the learning by giving a path :\n\n```python\nfrom adannealing import Annealer\n\nAnnealer.set_parallel()\n\nclass LossFunc2D:\n    def __init__(self):\n        self.constraints = None\n\n    def __call__(self, w) -> float:\n        \"\"\"\n        A __call__ method must be present. It will be called to evaluate the loss. The argument passed is the \n        parameter value at which the loss has to be computed.\n        \"\"\"\n        x = w[0]\n        y = w[1]\n        return (x - 5) * (x - 2) * (x - 1) * x + 10 * y ** 2\n\n    def on_fit_start(self, val):\n        \"\"\"\n        This method is called by the fitter before optimisation. The argument passed is either the starting point of the\n        optimiser (for single annealer) or the tuple containing different starting points if more than one annealer is used\n        \"\"\"\n        pass\n\n    def on_fit_end(self, val):\n        \"\"\"\n        This method is called by the fitter after optimisation. The argument passed is either the result of the \n        optimiser (for single annealer) or the list of results if more than one annealer reache the end of fit.\n        \"\"\"\n        pass\n\n\nbounds, acceptance, n = np.array([[0, 5], [-1, 1]]), 0.01, 5\n\nann = Annealer(\n    loss=LossFunc2D(),\n    weights_step_size=0.1,\n    bounds=bounds,\n    verbose=True\n)\n\n# Weights of the best local minimum and loss at the best local minimum\nw0, lmin, _, _, _, _ = ann.fit(\n    npoints=n,\n    stopping_limit=acceptance,\n    history_path=\"logs\"\n)\n```\n\nIn this example, calling **fit** will produce **n** directories in **logs**, each containing 2 files: **history.csv** and **returns.csv**.\nThe first is the entier history of the fit, the second is only the iteration that found the local minimum.\nIf only one point is asked (either by using *npoints=1* or *stop_at_first_found=True*), will produce **history.csv** and **returns.csv**\ndirectly in **logs**, and will delete the subfolders of the runs that did not produce the local minimum.\n\nOne can plot the result of a fit by doing\n\n```python\n# figure will be saved in logs/annealing.pdf\nfig = ann.plot(\"logs\", nweights=2, weights_names=[\"A\", \"B\", \"C\"], do_3d=True)\n```\n\nIf the argument *do_3d=True*, then 3-dimensional dynamical figures are produced to inspect the phase space marginalised over different couples of components.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Advestis/adannealing",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adannealing",
    "package_url": "https://pypi.org/project/adannealing/",
    "platform": null,
    "project_url": "https://pypi.org/project/adannealing/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Advestis/adannealing/issues",
      "Documentation": "https://advestis.github.io/adannealing",
      "Homepage": "https://github.com/Advestis/adannealing",
      "Source Code": "https://github.com/Advestis/adannealing/"
    },
    "release_url": "https://pypi.org/project/adannealing/0.1.78/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A package doing simulated and quantum annealing",
    "version": "0.1.78",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13628241,
  "releases": {
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aad3690a997a26907167c1dbb189b8069f12235e87af2543d8095b443844162f",
          "md5": "5e2d27bd21d98f0d17beaecf53e86484",
          "sha256": "f4f02896d02f2ef3ee6fafa19e7b116b12a34940378fcc83ea59c521dd8a5e1d"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "5e2d27bd21d98f0d17beaecf53e86484",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46212788,
        "upload_time": "2022-02-02T11:45:54",
        "upload_time_iso_8601": "2022-02-02T11:45:54.213682Z",
        "url": "https://files.pythonhosted.org/packages/aa/d3/690a997a26907167c1dbb189b8069f12235e87af2543d8095b443844162f/adannealing-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7a0de54bb51aa2a934d27ee6c9c8d17d5af5d51a3d6e6150c9a02a6e09ca74b",
          "md5": "3dd2faaaedb04237815cdc34184031fb",
          "sha256": "f55fb036a876718632c9c60805d22874d48317c48b6c98f337f7aa1d20aacfe5"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "3dd2faaaedb04237815cdc34184031fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46217050,
        "upload_time": "2022-03-16T13:02:46",
        "upload_time_iso_8601": "2022-03-16T13:02:46.730326Z",
        "url": "https://files.pythonhosted.org/packages/f7/a0/de54bb51aa2a934d27ee6c9c8d17d5af5d51a3d6e6150c9a02a6e09ca74b/adannealing-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8670b0eb0059245026d7973a5692cd3bdc0fb39f491286ad9536dbe6ebf20175",
          "md5": "2eac04cfa15154d42b7b18b44177cfe3",
          "sha256": "a7d55a31584143c642b7978a3857d83fbf2e84b2826841356f6b604bb5423cb2"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "2eac04cfa15154d42b7b18b44177cfe3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46219739,
        "upload_time": "2022-03-29T15:14:17",
        "upload_time_iso_8601": "2022-03-29T15:14:17.833254Z",
        "url": "https://files.pythonhosted.org/packages/86/70/b0eb0059245026d7973a5692cd3bdc0fb39f491286ad9536dbe6ebf20175/adannealing-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f51d61f9361d6eec27fb0605b501b43e4f578d29aa0b35d27733ab682220387d",
          "md5": "aeefaa1053452131d2d63fbd8b3dc502",
          "sha256": "b0bb11f029498b1090f40908359551104858545b6164288bb7c302dee357ada0"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "aeefaa1053452131d2d63fbd8b3dc502",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46219705,
        "upload_time": "2022-03-29T15:14:35",
        "upload_time_iso_8601": "2022-03-29T15:14:35.002053Z",
        "url": "https://files.pythonhosted.org/packages/f5/1d/61f9361d6eec27fb0605b501b43e4f578d29aa0b35d27733ab682220387d/adannealing-0.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7f36a5598e41a42e425b75ce153517b1778ce21c616771f94a49fb593fce74f",
          "md5": "ae46e28a2f3b8927cff67fa04404e9dc",
          "sha256": "38b0f20bc33ab6bbbe10f7623575186db7d3e1b07362a1e3374397fafb9e988d"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "ae46e28a2f3b8927cff67fa04404e9dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46219750,
        "upload_time": "2022-03-29T15:14:44",
        "upload_time_iso_8601": "2022-03-29T15:14:44.933943Z",
        "url": "https://files.pythonhosted.org/packages/e7/f3/6a5598e41a42e425b75ce153517b1778ce21c616771f94a49fb593fce74f/adannealing-0.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08dcf155da8dca6acc174dd1dae99c3161d47fe1798bd79f0203eed0eaeaff92",
          "md5": "244c53b0baf94bd4f84e48ecda2de7e5",
          "sha256": "7f8720840f50879ab123f262a7eb8709761c6d51649d8849e067a31071535504"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.31.tar.gz",
        "has_sig": false,
        "md5_digest": "244c53b0baf94bd4f84e48ecda2de7e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46230233,
        "upload_time": "2022-03-30T09:27:43",
        "upload_time_iso_8601": "2022-03-30T09:27:43.685821Z",
        "url": "https://files.pythonhosted.org/packages/08/dc/f155da8dca6acc174dd1dae99c3161d47fe1798bd79f0203eed0eaeaff92/adannealing-0.1.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.32": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94cc77c1991a2f941b05e92d3076cf17be46b75b8cf9e78db3c401108edf0ea4",
          "md5": "04a4ddbc39229e597f2c7b24faa846c4",
          "sha256": "65781b59a0b238957688b13a4f8d0d003945ab20ec4cd768197b175b16963064"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.32.tar.gz",
        "has_sig": false,
        "md5_digest": "04a4ddbc39229e597f2c7b24faa846c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46262109,
        "upload_time": "2022-04-01T08:39:38",
        "upload_time_iso_8601": "2022-04-01T08:39:38.870583Z",
        "url": "https://files.pythonhosted.org/packages/94/cc/77c1991a2f941b05e92d3076cf17be46b75b8cf9e78db3c401108edf0ea4/adannealing-0.1.32.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b83737441f110e022530a61721ee8534e97870e4e1e1138d222b77c57c4ebfd",
          "md5": "089c44408c14052afefe9037b130cd73",
          "sha256": "721fc154da510e13c2b4c37c6a66c235b68ffedd68a8d947ec857ab18a52d1a2"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "089c44408c14052afefe9037b130cd73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 69224965,
        "upload_time": "2022-01-25T10:54:29",
        "upload_time_iso_8601": "2022-01-25T10:54:29.222739Z",
        "url": "https://files.pythonhosted.org/packages/1b/83/737441f110e022530a61721ee8534e97870e4e1e1138d222b77c57c4ebfd/adannealing-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8858b88d6da1304159a9cdc7f5ad7a79e82cb58ae9e4b8c2e245baf221a9609d",
          "md5": "da776d6acbfcfb223bfcc374636018bb",
          "sha256": "b7a3333092ed07556956a10dc7db68f4bbc4815afef6ce78f7f4fd9f3e03e18e"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "da776d6acbfcfb223bfcc374636018bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46204062,
        "upload_time": "2022-01-25T11:00:43",
        "upload_time_iso_8601": "2022-01-25T11:00:43.802913Z",
        "url": "https://files.pythonhosted.org/packages/88/58/b88d6da1304159a9cdc7f5ad7a79e82cb58ae9e4b8c2e245baf221a9609d/adannealing-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.74": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c65e07a3c6e17c6860fb633fd45e7748f9bb807f17814f17c4ed984a038d9af",
          "md5": "2b58360e04aff85d567e86385e92c584",
          "sha256": "5d938e95aaa59d79f5fb985907c3b88efbd5a9f3260d5d965ec0cdcea1668b05"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.74.tar.gz",
        "has_sig": false,
        "md5_digest": "2b58360e04aff85d567e86385e92c584",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23068980,
        "upload_time": "2022-04-26T10:26:38",
        "upload_time_iso_8601": "2022-04-26T10:26:38.225554Z",
        "url": "https://files.pythonhosted.org/packages/6c/65/e07a3c6e17c6860fb633fd45e7748f9bb807f17814f17c4ed984a038d9af/adannealing-0.1.74.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.78": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76b4c1eb337f27e7feb92794b5aad8c7095d05f92edd4e762555b578226d8920",
          "md5": "0951cb5b950682e03a9d000f6cd78d1d",
          "sha256": "f674646d6a209970a0747dcbe25242b8ce694314332907b030b1d31cb1b74545"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.78.tar.gz",
        "has_sig": false,
        "md5_digest": "0951cb5b950682e03a9d000f6cd78d1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23069097,
        "upload_time": "2022-04-26T14:10:37",
        "upload_time_iso_8601": "2022-04-26T14:10:37.904673Z",
        "url": "https://files.pythonhosted.org/packages/76/b4/c1eb337f27e7feb92794b5aad8c7095d05f92edd4e762555b578226d8920/adannealing-0.1.78.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c2c3ad2b3f6644627046ad0cb5858aaa9aa8ca4680b5cb1cc7a259ab059499a",
          "md5": "687140a0f6c5a6ccd5162dd0c640eede",
          "sha256": "96b98a4a57b6c538d51fe55682532efb4ba8b2946db068a901f9ab1433a84bc3"
        },
        "downloads": -1,
        "filename": "adannealing-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "687140a0f6c5a6ccd5162dd0c640eede",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46204427,
        "upload_time": "2022-01-25T11:02:40",
        "upload_time_iso_8601": "2022-01-25T11:02:40.306906Z",
        "url": "https://files.pythonhosted.org/packages/2c/2c/3ad2b3f6644627046ad0cb5858aaa9aa8ca4680b5cb1cc7a259ab059499a/adannealing-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76b4c1eb337f27e7feb92794b5aad8c7095d05f92edd4e762555b578226d8920",
        "md5": "0951cb5b950682e03a9d000f6cd78d1d",
        "sha256": "f674646d6a209970a0747dcbe25242b8ce694314332907b030b1d31cb1b74545"
      },
      "downloads": -1,
      "filename": "adannealing-0.1.78.tar.gz",
      "has_sig": false,
      "md5_digest": "0951cb5b950682e03a9d000f6cd78d1d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 23069097,
      "upload_time": "2022-04-26T14:10:37",
      "upload_time_iso_8601": "2022-04-26T14:10:37.904673Z",
      "url": "https://files.pythonhosted.org/packages/76/b4/c1eb337f27e7feb92794b5aad8c7095d05f92edd4e762555b578226d8920/adannealing-0.1.78.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}