{
  "info": {
    "author": "Johan Berdat",
    "author_email": "jojolebarjos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic",
      "Topic :: Utilities"
    ],
    "description": "\n# Itemset embeddings\n\nThis is yet another variation of the well-known _word2vec_ method, proposed by\n[Mikolov et al.](#ref_word2vec), applied to unordered sequences, which are\ncommonly referred as itemsets. The contribution of _itembed_ is twofold:\n\n 1. Modifying the base algorithm to handle unordered sequences, which has an\n    impact on the definition of context windows;\n 2. Using the two embedding sets introduced in _word2vec_ for supervised\n    learning.\n\nA similar philosophy is described by [Wu et al.](#ref_starspace) in\n_StarSpace_ and by [Barkan and Koenigstein](#ref_item2vec) in _item2vec_.\n_itembed_ uses [Numba](#ref_numba) to achieve high performances.\n\n\n## Installation\n\nInstall from [PyPI](https://pypi.org/project/itembed/):\n\n```\npip install itembed\n```\n\nOr install from source, to ensure latest version:\n\n```\npip install git+https://gitlab.com/jojolebarjos/itembed.git\n```\n\n\n## Getting started\n\nItemsets must be provided as so-called packed arrays, i.e. a pair of integer\narrays describing _indices_ and _offsets_. The index array is defined as the\nconcatenation of all N itemsets. The offset array contains the N+1 boundaries.\n\n```python\nimport numpy as np\n\nindices = np.array([\n    0, 1, 4, 7,\n    0, 1, 6,\n    2, 3, 5, 6, 7,\n], dtype=np.int32)\n\noffsets = np.array([\n    0, 4, 7, 12\n])\n```\n\nThis is similar to [compressed sparse matrices](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html):\n\n```python\nfrom scipy.sparse import csr_matrix\n\ndense = np.array([\n    [1, 1, 0, 0, 1, 0, 0, 1],\n    [1, 1, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 1, 0, 1, 1, 1],\n], dtype=np.int32)\n\nsparse = csr_matrix(dense)\n\nassert (indices == sparse.indices).all()\nassert (offsets == sparse.indptr).all()\n\n```\n\nTraining methods do not handle other data types. Also note that:\n\n * indices start at 0;\n * item order in an itemset is not important;\n * an itemset can contain duplicated items;\n * itemsets order is not important;\n * there is no weight associated to items, nor itemsets.\n\nHowever, a small helper is provided for simple cases:\n\n```python\nfrom itembed import pack_itemsets\n\nitemsets = [\n    [\"apple\", \"sugar\", \"flour\"],\n    [\"pear\", \"sugar\", \"flour\", \"butter\"],\n    [\"apple\", \"pear\", \"sugar\", \"buffer\", \"cinnamon\"],\n    [\"salt\", \"flour\", \"oil\"],\n    # ...\n]\n\nlabels, indices, offsets = pack_itemsets(itemsets, min_count=2, min_length=2)\nnum_label = len(labels)\n```\n\nThe next step is to define at least one task. For now, let us stick to the\nunsupervised case, where co-occurrence is used as knowledge source. This is\nsimilar to the continuous bag-of-word and continuous skip-gram tasks defined\nin _word2vec_.\n\nFirst, two embedding sets must be allocated. Both should capture the same\ninformation, and one is the complement of the other. This is a not-so\ndocumented question of _word2vec_, but empirical results have shown that it is\nbetter than reusing the same set twice.\n\n```python\nfrom itembed import initialize_syn\n\nnum_dimension = 64\nsyn0 = initialize_syn(num_label, num_dimension)\nsyn1 = initialize_syn(num_label, num_dimension)\n```\n\nSecond, define a task object that holds all the descriptors:\n\n```python\nfrom itembed import UnsupervisedTask\n\ntask = UnsupervisedTask(indices, offsets, syn0, syn1, num_negative=5)\n```\n\nThird, the `do_batch` method must be invoked multiple times, until convergence.\nAnother helper is provided to handle the training loop. Note that, due to a\ndifferent sampling strategy, a larger number of iteration is needed.\n\n```python\nfrom itembed import train\n\ntrain(task, num_epoch=100)\n```\n\nThe full code is therefore as follows:\n\n```python\nimport numpy as np\n\nfrom itembed import (\n    pack_itemsets,\n    initialize_syn,\n    UnsupervisedTask,\n    train,\n)\n\n# Get your own itemsets\nitemsets = [\n    [\"apple\", \"sugar\", \"flour\"],\n    [\"pear\", \"sugar\", \"flour\", \"butter\"],\n    [\"apple\", \"pear\", \"sugar\", \"buffer\", \"cinnamon\"],\n    [\"salt\", \"flour\", \"oil\"],\n    # ...\n]\n\n# Pack itemsets into contiguous arrays\nlabels, indices, offsets = pack_itemsets(itemsets, min_count=2, min_length=2)\nnum_label = len(labels)\n\n# Initialize embeddings sets from uniform distribution\nnum_dimension = 64\nsyn0 = initialize_syn(num_label, num_dimension)\nsyn1 = initialize_syn(num_label, num_dimension)\n\n# Define unsupervised task, i.e. using co-occurrences\ntask = UnsupervisedTask(indices, offsets, syn0, syn1, num_negative=5)\n\n# Do training\n# Note: due to a different sampling strategy, more epochs than word2vec are needed\ntrain(task, num_epoch=100)\n\n# Both embedding sets are equivalent, just choose one of them\nsyn = syn0\n```\n\nMore examples can be found in `./example/`. See the\n[documentation](https://itembed.readthedocs.io/en/stable/) for more detailed\ninformation.\n\n\n## Performance improvement\n\nAs [suggested](https://numba.pydata.org/numba-doc/dev/user/performance-tips.html#intel-svml) in Numba's documentation, Intel's short vector math library can be used to increase performances:\n\n```\nconda install -c numba icc_rt\n```\n\n\n## Citation\n\nIf you use this software in your work, it would be appreciated if you would cite this tool, for instance using the following Bibtex reference:\n\n```bibtex\n@software{itembed,\n  author = {Johan Berdat},\n  title = {itembed},\n  url = {https://gitlab.com/jojolebarjos/itembed},\n  version = {0.5.0},\n  date = {2020-06-24},\n}\n```\n\n\n## References\n\n<ol>\n    <li><a name=\"ref_word2vec\"></a>\n        <i>Efficient Estimation of Word Representations in Vector Space</i>,\n        2013,\n        Tomas Mikolov, Kai Chen, Greg Corrado, Jeffrey Dean,\n        https://arxiv.org/abs/1301.3781\n    </li>\n    <li><a name=\"ref_starspace\"></a>\n        <i>StarSpace: Embed All The Things!</i>,\n        2017,\n        Ledell Wu, Adam Fisch, Sumit Chopra, Keith Adams, Antoine Bordes, Jason Weston,\n        https://arxiv.org/abs/1709.03856\n    </li>\n    <li><a name=\"ref_item2vec\"></a>\n        <i>Item2Vec: Neural Item Embedding for Collaborative Filtering</i>,\n        2016,\n        Oren Barkan, Noam Koenigstein,\n        https://arxiv.org/abs/1603.04259\n    </li>\n    <li><a name=\"ref_numba\"></a>\n        <i>Numba: a LLVM-based Python JIT compiler</i>,\n        2015,\n        Siu Kwan Lam, Antoine Pitrou, Stanley Seibert,\n        https://doi.org/10.1145/2833157.2833162\n    </li>\n</ol>\n\n\n## Changelog\n\n * 0.5.0 - 2020-06-24\n    * Add weighted itemset support\n    * Improve documentation and examples\n    * Bug fixes\n * 0.4.2 - 2020-06-10\n    * Clean documentation and examples\n    * Bug fixes\n * 0.4.1 - 2020-05-13\n    * Clean and rename, to avoid confusion\n * 0.4.0 - 2020-05-04\n    * Refactor to make training task explicit\n    * Add supervised task\n * 0.3.0 - 2020-03-26\n    * Complete refactor to increase performances and reusability\n * 0.2.1 - 2020-03-24\n    * Allow keyboard interruption\n    * Fix label count argument\n    * Fix learning rate issue\n    * Add optimization flags to Numba JIT\n * 0.2.0 - 2019-11-08\n    * Clean and refactor\n    * Allow training from plain arrays\n * 0.1.0 - 2019-09-13\n    * Initial version\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jojolebarjos/itembed",
    "keywords": "itemset,word2vec,embedding",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "itembed",
    "package_url": "https://pypi.org/project/itembed/",
    "platform": "",
    "project_url": "https://pypi.org/project/itembed/",
    "project_urls": {
      "Documentation": "https://itembed.readthedocs.io/en/stable/",
      "Homepage": "https://gitlab.com/jojolebarjos/itembed",
      "Tracker": "https://gitlab.com/jojolebarjos/itembed/-/issues"
    },
    "release_url": "https://pypi.org/project/itembed/0.5.0/",
    "requires_dist": [
      "numba (>=0.34)",
      "scipy (>=0.16)",
      "tqdm (>=1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "word2vec for itemsets",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11358138,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c6671b1b423580d889d880d55aa8f6425bccc5171768006f8d8b51460d6416a",
          "md5": "6fe73574743bd33579e738d8b04b45c4",
          "sha256": "f33ff61ffed2ddce6fb16eda331ad673f1e6a682fd2fe1c6ce6488834f1d7032"
        },
        "downloads": -1,
        "filename": "itembed-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fe73574743bd33579e738d8b04b45c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9969,
        "upload_time": "2020-05-13T08:02:53",
        "upload_time_iso_8601": "2020-05-13T08:02:53.407146Z",
        "url": "https://files.pythonhosted.org/packages/0c/66/71b1b423580d889d880d55aa8f6425bccc5171768006f8d8b51460d6416a/itembed-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a57c8eec48d9a7be3bfe5fd9b931dcc85260431638d8b1016620d6e10d21b58d",
          "md5": "cefd5d43d04545ab58a491942b3e56e0",
          "sha256": "f6c954c84d7b501f90c637c30f463cc1ed0aa152d2de5cb29129e8e0b48b5921"
        },
        "downloads": -1,
        "filename": "itembed-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cefd5d43d04545ab58a491942b3e56e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11395,
        "upload_time": "2020-05-13T08:02:55",
        "upload_time_iso_8601": "2020-05-13T08:02:55.382370Z",
        "url": "https://files.pythonhosted.org/packages/a5/7c/8eec48d9a7be3bfe5fd9b931dcc85260431638d8b1016620d6e10d21b58d/itembed-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca7e87e4f08ae04ff71af17eaa9230ebaeab9076d90d72f1964b125e1b1d8a0",
          "md5": "a2bb60a6bbfb4d09bf0ec8eab70d7857",
          "sha256": "57e4367435821e26ae2338b5defb905a1e6f49e03367bf8970a8461293fb38a7"
        },
        "downloads": -1,
        "filename": "itembed-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2bb60a6bbfb4d09bf0ec8eab70d7857",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10371,
        "upload_time": "2020-06-10T11:24:20",
        "upload_time_iso_8601": "2020-06-10T11:24:20.570478Z",
        "url": "https://files.pythonhosted.org/packages/9c/a7/e87e4f08ae04ff71af17eaa9230ebaeab9076d90d72f1964b125e1b1d8a0/itembed-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a541979cb513098c5fbabea97456b2a46531d216eb560733a97bf0f214eacf8",
          "md5": "d4a2a020cf7aa87da9cf654308faff48",
          "sha256": "a03c7fda0f51f9732c4f32a543accaa5f3c575a88026e026c04db55aa4c0c801"
        },
        "downloads": -1,
        "filename": "itembed-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d4a2a020cf7aa87da9cf654308faff48",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12130,
        "upload_time": "2020-06-10T11:24:21",
        "upload_time_iso_8601": "2020-06-10T11:24:21.550787Z",
        "url": "https://files.pythonhosted.org/packages/1a/54/1979cb513098c5fbabea97456b2a46531d216eb560733a97bf0f214eacf8/itembed-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76ded4a29b1b7a34a4af13a1d15b105a65021a090159ea5b9b47b2e70a2a169d",
          "md5": "85a5254e963438fb7d4794e1a58b7801",
          "sha256": "95db546331b1aeba804824beb084b4c36d36edbd9641e04af30134b8ef4147ea"
        },
        "downloads": -1,
        "filename": "itembed-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85a5254e963438fb7d4794e1a58b7801",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11558,
        "upload_time": "2021-09-03T13:40:40",
        "upload_time_iso_8601": "2021-09-03T13:40:40.920700Z",
        "url": "https://files.pythonhosted.org/packages/76/de/d4a29b1b7a34a4af13a1d15b105a65021a090159ea5b9b47b2e70a2a169d/itembed-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3f536018d83da75cdcb9423e5d1d3e709fb86abdcf33dd4ffe1a8ac3179b255",
          "md5": "464a6a1e2136b43504a8f24de832dd41",
          "sha256": "ff0c811de637b0a6b691488469c49b06abebda007f083d3938fc04e2bef6596a"
        },
        "downloads": -1,
        "filename": "itembed-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "464a6a1e2136b43504a8f24de832dd41",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13398,
        "upload_time": "2021-09-03T13:40:41",
        "upload_time_iso_8601": "2021-09-03T13:40:41.809399Z",
        "url": "https://files.pythonhosted.org/packages/b3/f5/36018d83da75cdcb9423e5d1d3e709fb86abdcf33dd4ffe1a8ac3179b255/itembed-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76ded4a29b1b7a34a4af13a1d15b105a65021a090159ea5b9b47b2e70a2a169d",
        "md5": "85a5254e963438fb7d4794e1a58b7801",
        "sha256": "95db546331b1aeba804824beb084b4c36d36edbd9641e04af30134b8ef4147ea"
      },
      "downloads": -1,
      "filename": "itembed-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "85a5254e963438fb7d4794e1a58b7801",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11558,
      "upload_time": "2021-09-03T13:40:40",
      "upload_time_iso_8601": "2021-09-03T13:40:40.920700Z",
      "url": "https://files.pythonhosted.org/packages/76/de/d4a29b1b7a34a4af13a1d15b105a65021a090159ea5b9b47b2e70a2a169d/itembed-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3f536018d83da75cdcb9423e5d1d3e709fb86abdcf33dd4ffe1a8ac3179b255",
        "md5": "464a6a1e2136b43504a8f24de832dd41",
        "sha256": "ff0c811de637b0a6b691488469c49b06abebda007f083d3938fc04e2bef6596a"
      },
      "downloads": -1,
      "filename": "itembed-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "464a6a1e2136b43504a8f24de832dd41",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13398,
      "upload_time": "2021-09-03T13:40:41",
      "upload_time_iso_8601": "2021-09-03T13:40:41.809399Z",
      "url": "https://files.pythonhosted.org/packages/b3/f5/36018d83da75cdcb9423e5d1d3e709fb86abdcf33dd4ffe1a8ac3179b255/itembed-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}