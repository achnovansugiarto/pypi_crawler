{
  "info": {
    "author": "Luk치cs G치bor, Moln치r Andr치s",
    "author_email": "lukacs.hod@gmail.com, molnar.andras.jozsef@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img src=\"./openlostcat_logo.png\" alt=\"[Logo]\" width=\"25%\" height=\"25%\">\n\n# OpenLostCat - A Location Categorizer Based on OpenStreetMap\n\n## What is it?\n\nOpenLostCat (Open Logic-based Simple Tag-bundle Categorizer) is a utility written in Python for data analysts, engineers and scientists \nwho want to determine the characteristics of geolocated points in their datasets. \nOpenLostCat does the job by assigning category labels to each data point \nbased on logical rules defined in JSON for tags of OpenStreetMap objects located in the proximity of the point.\n\n### Typical Use Cases\n\n* Given a point dataset of events or incidents, see where they happened in terms of co-located or nearby geographical objects (type of area, nearby streets or point features such as amenities or others).\n\n* Given a point dataset of events or incidents, see whether their attributes correlate with specific location characteristics.\n\n* Given a set of geotagged photos or media posts, determine where they were made in terms of present or absent geographic feature types or constellations (how many of them were posted at which type of location).\n\n* Given a set of candidate locations for specific activities, determine the most or least suitable ones based on what each location provides or features.\n\n* Given the locations of self-managed facilities, create an overview of which (and how many) of them is located at a given type of location, and whether there is any correlation in the type of location and the facility condition. \n\n* ... and what is your use case...?\n\n\n\n## Feature Overwiew\n\n* Query OpenStretMap objects at locations given by WGS 84 coordinates via Overpass API (customizable proximity distance)\n\n* Assignment of user-defined location category labels to the given locations, based on queried OpenStreetMap objects in their proximity\n\n* Comprehensive and extensible location category rule syntax in JSON, where a tag bundle represents an OpenStreetMap object\n\n* Single-category (first matching rule strategy) or multi-category (all matching rule strategy) labeling for locations\n\n* Target categories indexed in the order of rules, mapped to category names\n\n* Reusable rules or subexpressions by named references (inside a location category catalog)\n\n* Visualization of the category catalog (set of parsed expression rules)\n\n* Debug feature with explicit AST (abstract syntax tree) output\n\n* Example category rules showcasing rule definition features\n\n* Demo notebook with the examples, including map visualization\n\n* Rule language of univariate first-order logic with two levels of operations (item and category-level)\n\n  * Filter semantics on the item level: an item-level rule subexpression results in a subset of the tag bundles for a single location\n    and the category assignment is based on the eventual (non-)emptiness of this set or its size in relation with the original (non-filtered) tag bundle set specified by a quantifier\n\n  * Boolean semantics on the category-level: a category-level subexpression results in a true/false value for a single location\n\n  * Atomic filters with equality conditions for tag values or allowed value lists (item-level)\n  \n  * Atomic filters with existence or optionality conditions for specific tags (item-level)\n\n  * Combinations of atomic filters for different tags of tag bundles (item-level)\n\n  * Logical filter operators AND, OR, NOT and implication for tag bundles (item-level)\n\n  * Existential (ANY) and universal (ALL) quantification (from item-level to category-level; ANY matches if the filtered tag bundle set is nonempty, ALL matches if it equals its non-filtered original)\n  \n  * Common-sense default quantifier wrapping for filters (such as ANY for atomic filters, ALL for implications)\n\n  * Boolean combinations of category-level (quantified) rule subexpressions: AND, OR, NOT and implication for single true/false-valued expressions\n  \n  * Constant subexpressions for technical use and logical language completeness\n\n  * Named references of item- (filter) or category-level (bool) subexpressions\n\n\n## Licence\n\n[Apache 2.0.](./LICENCE)\n\n## Getting started\n\n### Requirements, Environment\n\nOpenLostCat requires `python >= 3.6`, due to the following issue:\n\n[https://pypi.org/project/immutabledict/](https://pypi.org/project/immutabledict/)\n\nYou may either use a _jupyter notebook_ or standalone python as well.\n\nUtilizing _pandas_ makes using OpenLostCat simpler and more effective, but it is not necessary.\n\nAfter cloning the OpenLostCat github repository, you may install it in your environment from the repository root folder by running the command `pip install .` .\n\n### Your First OpenLostCat Run\n\nUse the following python commands to try out OpenLostCat for a simple location categorization, \nwhere two geolocated points (a central railway station and a picnic area outside the city) are categorized \naccording to their public transport accessibility:\n\n```\nfrom openlostcat.main_osm_categorizer import MainOsmCategorizer\nfrom openlostcat.osmqueryutils.ask_osm import ask_osm, ask_osm_around_point\nimport json\n                         \n# Query the OpenStreetMap objects in the proximity of the two points:  \nosm_neighborhood_railway_station = ask_osm_around_point(47.5001, 19.0247, distance = 300)\nosm_neighborhood_picnic_area     = ask_osm_around_point(47.4945, 18.9464, distance = 300)\n\n# Create the categorizer by parsing JSON rules:  \ncategorizer = MainOsmCategorizer(json.loads('{ \"type\": \"CategoryRuleCollection\", \"categoryRules\": [ { \"pt_accessible\": { \"public_transport\": \"stop_position\" } }, { \"pt_inaccessible\": true } ] }'))\n\n# Print the list of categories:  \nprint(categorizer.get_categories_enumerated_key_map())\n\n# Do the categorization of the railway station and print its category:  \ncategory_railway_station = categorizer.categorize(osm_neighborhood_railway_station)\nprint(category_railway_station)\n\n# Do the categorization of the railway station and print its category:  \ncategory_picnic_area = categorizer.categorize(osm_neighborhood_picnic_area)\nprint(category_picnic_area)\n\n# Print the categorizer with the syntax tree of the parsed categorizing rules:  \nprint(categorizer)\n\n```\nIf you have reached this point successfully: Congrats! \nYou are ready to use OpenLostCat and do some more interesting stuff!\nKeep on reading...\n\n### Demo and Examples\n\nSee and run our jupyter notebook [examples/Budapest\\_hotels\\_categorization.ipynb](examples/Budapest_hotels_categorization.ipynb) \nusing example rulesets in the directory [examples/rules/](examples/rules) for trying out different scenarios and features OpenLostCat provides.\nDetailed explanations of features and possibilities can be found below.\n\n\n## General Usage\n\nThe main interface of the OpenLostCat utility library is the class _MainOsmCategorizer_ located in the file _main\\_osm\\_categorizer.py_. \nIt must be initialized with a file path string or a python dictionary of JSON content describing the source category catalog with the rules. \nThe initializer parses the given category rules and becomes ready for categorizing locations.\n\nThe file _osmqueryutils/ask\\_osm.py_ contains OpenStreetMap-specific query strings and functions for single and multiple locations given by coordinates in different type of datasets. The appropriate function should be used to query the map objects with their tags in the required proximity of our locations.\n\nAfter querying the OpenStreetMap objects around the locations, the _categorize(...)_ method of _MainOsmCategorizer_ must be called for each location separately to assign location category labels based on the parsed rules. \n\nThe returning data is either a tuple (for single-category-matching) or a list of tuples containing the index of the category (in the order of appearance in the rule collection file), the name of the category and, optionally, debug information. If no category matches, the returned index is -1, the name is Null and the debug info remains empty.\n\nRefer to the Quick User Reference at the bottom of this document for a listing of functions and operators.\n\n## Category Catalog (Rule Collection) Format\n\nThe basic skeleton of the expected JSON structure is as follows. It must be a valid JSON object or file.\n\n\n```\n{\n     \"type\": \"CategoryRuleCollection\",\n     \"properties\": {\n         \"evaluationStrategy\": \"all\"\n     },\n     \"categoryRules\": [\n        {\n            \"category_or_reference_1_name\": ...rules_of_category_or_reference_1...\n        },\n        {\n            \"category_or_reference_2\": ...rules_of_category_or_reference_2...\n        },\n        ...further_category_or_reference_definitions...\n     ]\n}\n```\n\nThe attribute `type` must always be given in the above form, in order to make sure the intention of the JSON object/file is a category rule collection for OpenLostCat.\n\nRule definitions must be given in the form of a JSON array, each of its elements containing a category or a reference (named reusable subexpression) definition with its rules.\nSuch a definition must be a json object with a single key, which is the name of the category or reference. An identifier starting with `#` denotes a reference, otherwise a category. The order of items in the array is important, and any reference used in a rule must be defined in advance. Rules follow as JSON objects or arrays as shown below. \n\nThe `properties` part is optional, where general directives can be specified for the whole categorization process.\n\n### References: named subexpressions\n\nIf a name (JSON key) starts with the character `#` under the definitions of `categoryRules`, it is treated as a _reference_, that is, a named subexpression (part of a rule), which can be referenced from multiple category definitions. This way, repeated parts of rules do not have to be explicitly duplicated and whenever a change is necessary, it can be done at one place.\n\nRemark: References starting with `##` are _category-level_ (a.k.a. _bool-level_) references, while a single `#` name prefix means a (tag-bundle-)_set-level_ (a.k.a. _filter-level_) reference. See the explanation in the examples below.\n\n### Category Catalog (Rule Collection) Properties\n\nCurrently only `evaluationStrategy` is supported in `properties`. Its possible values are:\n* `all` : A location is evaluated for matching with each defined category and the labels of all matching categories are assigned. \n* `firstMatching` : A location is evaluated for matching the categories in their order of appearance in the catalog, and the label of the first matching category is assigned.\n\nIf no properties are given, `firstMatching` is assumed by default.\n\n\n\n## Simple Category Rule Features by Example\n\n\n### Atomic Filter: Simple Tag-Value Checking\n\nChecks whether a key is present in a tag bundle and the value of the tag equals the desirable value.\n\nFor example, the following condition matches all locations where a public transport stop position is present in any of the tag bundles of queried nearby map objects:\n\n```\n{ \"public_transport\": \"stop_position\" }\n```\n\nThe tag value be a single value or a list of values in the form of a JSON array, as in the following example. It finds all locations where either a stop position or platform is found:\n\n```\n{ \"public_transport\": [\"stop_position\", \"platform\"] }\n```\n\nSuch conditions can be directly used to define a category, as in the following example, or used to compose more complex conditions (see later).\n\n```\n\"categoryRules\": [\n    {\n        \"pt_accessible\": { \"public_transport\": [\"stop_position\", \"platform\"] }\n    }\n]\n```\n\n### Value Types and Conversion\n\nOpenStreetMap tags are strings. OpenLostCat can consume other JSON data types and it converts them to strings in the following way:\n\n* numers are translated to strings in the conventional way,\n* booleans are translated to strings, in the OpenStreetMap style: true to \"yes\" and false to \"no\",\n* null values are treated in a specific way: if a null value is added to the list of accepted values for a tag then the absence of the tag counts as a match (optionality). See more details and examples in further sections.\n\nFor instance, the following example condition matches any location where a map object with OpenStreetMap tag `subway=yes` is found:\n\n```\n{ \"subway\": true }\n```\n\n### Multiple Tag-Value Checking (_AND_)\n\nMultiple tag-value checking conditions (atomic filters) can be but together into a JSON object. In such cases, the condition matches if both of them is met for at least one of the tag bundles of the queried objects at a location (a.k.a. conjunctive, or _AND_ condition). The following condition evaluates to true for every location where a subway stop position is found (there must be a single object having both tags with the given values):\n\n```\n{\n    \"public_transport\": \"stop_position\",\n    \"subway\": true\n}\n```\nA similar rule example follows, which matches locations with at least one wheelchair-accessible (barrier-free) supermarket nearby:\n\n```\n{\n    \"shop\": \"supermarket\",\n    \"wheelchair\": true\n}\n```\n\nNote that a JSON object with multiple key-value pairs is parsed as an _AND_ condition, while a singleton JSON object is directly translated to the single condition it contains.\n\nAdditional remark: An _AND_ condition can also be expressed using an explicit JSON keyword prefix `__AND_`. The above exampe is equivalent with this expression:\n\n```\n{\n    \"__AND_\":\n        {\n            \"shop\": \"supermarket\",\n            \"wheelchair\": true\n        }\n}\n```\n\nNote that these combinations apply together for each map object (tag bundle) in the proximity. If you want to formulate a condition referring to different map objects, such as stating a supermarket and a (maybe another) wheelchair-accessible asset is nearby, then these two conditions must be formulated and bracketed as separate subexpressions, each (or at least one of them) wrapped into an ANY quantifier and combined together with a (boolean/category-level) conjunction. Details follow (see the section about the ANY quantifier below).\n\n### Optional Tag-Value Checking (_null_ in value list)\n\nIf `null` is added to a tag value list, it means the tag key is not mandatory to be present among the tags, but if present then its value must be one of the other elements in the list.\nAn obvious example is to find locations which are candidates for wheelchair-shopping (there is a supermarket with either explicit wheelchair-accessibility or limited accessibility, or no wheelchair information, i.e. no explicit negation of wheelchair accessibility):\n\n```\n{\n    \"shop\": \"supermarket\",\n    \"wheelchair\": [true, \"limited\", null]\n}\n```\n\n### Negative Condition (_NOT_)\n\nAn explicit negation may be added to the positive key-value conditions, stating a location matches only if there is at least one nearby object matching the listed positive condition(s) and not matching the condition(s) written inside the negated part at the same time. The following example matches all locations where a supermarket is found without an explicit statement of wheelchair inaccessibility (this is in fact, equivalent with the above example, if there are no more possible values of _wheelchair_ than listed above and here): \n\n```\n{\n    \"shop\": \"supermarket\",\n    \"__NOT_\": { \"wheelchair\": false }\n}\n```\n\nNote: the keyword `__NOT_` can be enhanced with an arbitrary, distinctive index or name of its (sub)condition, especially if there are multiple not-conditions in one level. This is because a JSON object must have distinct keys. \n\nIn the following example, a supermarket must be found with no explicit wheelchair inaccessibility and no required membership for shopping:\n\n```\n{\n    \"shop\": \"supermarket\",\n    \"__NOT_inaccessible\": { \"wheelchair\": false },\n    \"__NOT_membership\": { \"membership\": true }\n}\n```\n\n### Checking the Existence or Absence of a Tag (_null_ value)\n\nUsing a _null_ JSON value as a tag value in OpenLostCat conditions means a no-value, that is, the tag named should be missing (or, if not missing, must have the other values listed).\n\nIn the following example, matching means a map object must be present in the proximity of the location in question with _public\\_transport=yes_ having no subway tag at all:\n\n```\n{\n    \"public_transport\": true,\n    \"subway\": null\n}\n```\n\nHere, the _subway_ tag must either have the value of \"no\" or is missing (by at least one map object nearby):\n\n```\n{\n    \"public_transport\": true,\n    \"subway\": [false, null]\n}\n```\n\nIf we want to formulate a condition for the existence of a tag without any prescribed value(s), we should negate the null-condition.\n\nThe following example matches wherever a map object is found nearby with a _public\\_transport_ tag with any value:\n\n```\n{\n    \"__NOT_\": { \"public_transport\": null }\n}\n```\n\n### Alternative Tag-Value Checking (_OR_)\n\nMultiple key-value matching conditions can be combined as alternatives (a.k.a. disjunctive or _OR_ conditions), using standalone JSON arrays. The following example evaluates to true for a location if one of the queried nearby map objects have either one of the listed tag-values (either light-rail-, or subway-, or train-tagged): \n\n\n```\n[\n    { \"light_rail\": true },\n    { \"subway\": true },\n    { \"train\": true }\n]\n```\n\nIn order to get meaningful conditions, the conjunctive and disjunctive conditions can be combined with each other, such as in the following example, where a stop position is looked for, with either one of the specified transport modes:\n\n```\n[\n    { \"public_transport\": \"stop_position\", \"light_rail\": true },\n    { \"public_transport\": \"stop_position\", \"subway\": true },\n    { \"public_transport\": \"stop_position\", \"train\": true }\n]\n```\nThe above condition is equivalent with the following, where the special key `__OR_` introduces the alternative (sub)conditions:\n\n```\n{                \n    \"public_transport\": \"stop_position\",\n    \"__OR_\": [\n        {\"light_rail\": true},\n        {\"subway\": true},\n        {\"train\": true}\n    ]\n}\n```\n\nNote: the keyword `__OR_` can be enhanced with an arbitrary, distinctive index or name of the (sub)conditions, especially if there are multiple of them in one level, such as in the following example. Here, a nearby map object matching both OR-conditions must be found in order for the location to meet the combined condition:\n\n```\n{\n    \"__OR_1\": [ \n        {\"public_transport\": \"stop_position\"},\n        {\"railway\": \"platform\"}\n    ],\n    \"__OR_2\": [\n        {\"light_rail\": true},\n        {\"subway\": true},\n        {\"train\": true}\n    ]\n}\n```\n\nNote that a JSON array with multiple values is parsed as an _OR_ condition, while a JSON array is directly translated to the single condition it contains.\n\n## Reusing Subexpressions by References (#, ## and _REF_)\n\nIf a name being defined in the ruleset starts with the `#` character, it means a reference instead of a category definition. It does not generate a category but instead, a (sub)expression being named for reuse in possibly multiple rules.\n\nUsing references is encouraged not only for better comprehensibility and reducing redundancy in rule definitions, but also for effective processing, since OpenLostCat uses a caching mechanism to speed up evaluation of rules or rule sets. If a reference is used multiple times during a categorization process, it will only be evaluated once.\n\nThe next example shows a definition of two references defined for different types of public transport accessibility, being combined into a category with an or-condition:\n\n```\n\"categoryRules\": [\n    {\n        \"#pt_platform_close\": [\n            {\"public_transport\": [\"stop_position\", \"platform\"] },\n            {\"railway\": \"platform\"}\n        ]\n    },\n    {\n        \"#pt_ferry_close\": {\"amenity\": \"ferry_terminal\"}\n    },\n    {\n        \"pt_accessible\": [ #pt_platform_close, #pt_ferry_close ]\n    }\n```\n\nWe can also use a reference in a JSON object-context, using the keyword `__REF_`, as follows, where we use one of the references above in defining a category with an and-condition:\n\n```\n    {\n        \"subway_accessible\": {\n            \"__REF_\": \"#pt_platform_close\",\n            \"subway\": true\n        }\n    }\n\n```\n\nReferences can be nested into each other. Cycles of references are not possible as any reference can only be used only after having been defined.  \n\nNote: Some (sub)expressions must be preceded with two hashmarks `##` to be defined as references, depending on their intended logical level of use in category definitions (also influenced by the type of operators they contain). See more details later (Section _Two types of references_) about this.\n\n\n### Const Expression and Default (Fallback) Category (_true_ constant)\n\nA _constant_ operand is either an explicit _true_ or _false_ boolean value, which can be used at any point where a subexpression is expected in OpenLostCat rules.\n\nThe default categorization strategy is `firstMatch`, which means the rules of category definitions are evaluated for a location in the order of appearance in the JSON category catalog, and the first matching category is assigned, without further evaluation. If no category is matched, OpenLostCat returns the category index -1. By adding a default fallback category with a simple _bool constant_ rule, this can be substituted with a named category for locations not matching any of the other categories. \n\nThe following example defines two categories for public transport accessibility and non-accessibility. \n\n```\n\"categoryRules\": [\n    {\n        \"pt_accessible\": [\n            {\"public_transport\": [\"stop_position\", \"platform\"] },\n            {\"amenity\": \"ferry_terminal\"}\n        ]\n    },\n    {\n        \"pt_inaccessible\": true\n    }\n]\n```\n\nNote: For this to be evaluated correctly, the  `evaluationStrategy` must be set to `firstMatching` in the `properties` of the category catalog, or left out, as it is the default.\n\n### Implication Condition (_IMPL_)\n\nLogical implication is a form of statement saying whenever a given condition is true then another condition must also be true. \nOpenLostCat can treat such statements as categorization conditions with the keyword `__IMPL_`, meaning that a location matches the category defined by the implication \nif it is valid for _all_ queried OpenStretMap elements in its proximity.\n\nIf we want to define, for example, that each public transport stop or platform nearby a location is wheelchair-accessible, we may use the following condition:\n\n```\n{ \n    \"__IMPL_\": [ \n        {\"public_transport\": [\"stop_position\", \"platform\"] }, \n        {\"wheelchair\": [true, \"designated\"]} \n    ]\n}\n```\n\nThe implication may have multiple premises and a single conclusion. In such cases, wherever each of the premises match, the conclusion must also hold, in order for the location to be categorized as matching. The following example defines the same as above, with a restriction to subway stations, that is, the wheelchair-accessibility must only hold if the stop is a subway station:\n\n```\n{\n    \"__IMPL_\": [ \n        {\"public_transport\": [\"stop_position\", \"platform\"] }, \n        {\"subway\": true},\n        {\"wheelchair\": [true, \"designated\"]} \n    ]\n}\n```\n\nAn implication condition being evaluated for a single object (tag bundle) is basically equivalent to a disjunction (_OR_ condition) where all its premises are negated and its single conclusion remains positive. Therefore, if any of the premises evaluates to false, the implication becomes true for the object (tag bundle) without looking at its conclusion or further premises.\n\nApplying to sets of tag bundles, the implication is in fact a universal condition, that is, a category defined by a single implication will match only if _all_ queried map elements in its proximity matches the condition. \nIn the example above, it means each element having a _public\\_transport_ tag with either a _stop\\_position_ or _platform_ value must have a _wheelchair_ tag as well with the value _yes_ or _designated_.\n\nWarning! From the above, it follows that the truth of implication does not mean there is any map object in the proximity with the given premises. The above example rules will match even if there is no public transport station in the proximity.\n\n### All-Condition (_ALL_, universal quantification)\n\nAny condition can be turned into universal by using the universal quantification, denoted by the keyword `__ALL_`. \nIt naturally makes sense with negated conditions, as seen in the following example, where we define the condition of a location not having public transport accessibility, that is, for all queried map elements in its proximity, there is no public transport stop or platform tag. In other words, neither of the queried map elements is a public transport stop or platform object:\n\n```\n{\n    \"__ALL_\": {\n        \"__NOT_\": { \"public_transport\": [\"stop_position\", \"platform\"] }\n    }\n}\n```\n\nThe last implication in the previous section is logically equivalent with the following condition, literally stating that each map object in the proximity must either not be a public transport stop or platform, or not being tagged with subway=yes, or be wheelchair-accessible, for the location to belong to the category defined by this rule:\n```\n{\n    \"__ALL_\": [\n         { \"__NOT_\": { \"public_transport\": [\"stop_position\", \"platform\"] },\n         { \"__NOT_\": { \"subway\": true },\n         { \"wheelchair\": [true, \"designated\"] }\n    ]\n}\n```\n\nNote that whenever a reference to a quantified (sub)expression is defined, its name must start with `##`. More explanation follows. \n\nWarning! If the input set of map objects in the proximity happens to be empty, the result of a universal quantification for the empty set will be `true`.\n\n### Any-Condition (_ANY_, existential quantification)\n\nSimilarly to the universal quantification introduced above, the existential quantifier \"__ANY_\" can be used in rules, stating explicitly that at least one map object in the proximity of the location must be found with the nested condition, in order the location to match the category defined by the rule.\n\nThe following two rule examples are equivalent when they define a category without any other rules. In fact, the first one is a shorthand for the second one:\n\n```\n{ \"public_transport\": \"stop_position\" }\n```\n\n```\n{\n    \"__ANY_\": { \"public_transport\": \"stop_position\" }\n}\n```\n\nAn explicit existential quantification makes sense, for example, if we want a location to have multiple facitilites in its proximity, in order to be put into a certain category. The following example is a rule matching a location which has both a light-rail and a subway stop in its proximity:\n\n```\n{\n    \"__ANY_lr\": { \"public_transport\": [\"stop_position\", \"platform\"], \"light_rail\": true },\n    \"__ANY_sw\": { \"public_transport\": [\"stop_position\", \"platform\"], \"subway\": true }\n}\n```\n\nIt can be simplified with the reference `\"#pt_stop\": { \"public_transport\": [\"stop_position\", \"platform\"] }` having been defined:\n\n```\n{\n    \"__ANY_lr\": { \"__REF_\": \"#pt_stop\", \"light_rail\": true },\n    \"__ANY_sw\": { \"__REF_\": \"#pt_stop\", \"subway\": true }\n}\n```\n\n### The Two-Level Nature of the Rule Language\n\nA simple condition is evaluated in principle for each queried map object in the proximity of a location being categorized, \nand thus produces a true/false value for each single map object. These single values must eventually be aggregated into a single true/false value\nso that it can be decided whether the location (having a _set_ of map objects queried in its proximity) actually belongs to a particular category.\nThis is always done by using quantifiers, either explicitly or implicitly.\n\nOpenLostCat applies quantifiers to each rule expression defining a category at some point. If the whole expression is explicitly quantified using `__ANY_` or `__ALL_`,\nthen it is already complete. If not, OpenLostCat wraps the expression implicitly with a quantifier, whose type depends on the operators in the expression (explained below in a separate section).\n\nTherefore, each rule defining a category must be quantified, either explicitly or implicitly. This results in our language having two levels of (sub)expression:\n* _Item-level_ (a.k.a. _filter-level_) subexpressions are non-quantified expressions being evaluated on an input set of queried map objects in the proximity of the location one-by-one, \nthus resulting a subset of their input set with the matching map objects (actually, the tag bundles of them).\n* _Category-level_ (a.k.a. _bool-level_) (sub/)expressions are (explicitly or implicitly) quantified expressions resulting a single boolean value. \n  * _Quantifiers_ operate on item-level subexpressions and produce a single aggregated boolean value, \n  * Other operations on the category level work with boolean inputs and produce boolean results.\n\n### Complex Rule Cases\n\nAs we have seen in the section of any-conditions, logical operators can be used on the category-level as well, making it possible to combine quantified expressions for defining a category.\nAll simple logical constructs (and, or, not, implication) can be used both on the item-level as filter conditions, or the (quantified) category-level as (simple) boolean conditions.\n\nFor example, the following rule states a location belongs to the category being defined if all public transport facilities nearby are wheelchair-accessible, and there is at least one wheelchair-accessible supermarket nearby as well:\n\n```\n{\n    \"__ALL_\": {\n        \"__IMPL_\": [ \n            {\"public_transport\": [\"stop_position\", \"platform\"] }, \n            {\"wheelchair\": [true, \"designated\"]} \n        ]\n    },\n    \"__ANY_\": {\n        \"shop\": \"supermarket\",\n        \"wheelchair\": [true, \"designated\"]\n    }\n}\n```\n\nNote that the implication part is an item(filter)-level subexpression, while the parts enclosed with the quantifiers ALL and ANY, as well as the whole expression are category(bool)-level (sub)expressions.\n\nConsidering implicit quantifier wrapping, the above expression is equivalent with either one of the following.  \n```\n{\n    \"__IMPL_\": [ \n            {\"public_transport\": [\"stop_position\", \"platform\"] }, \n            {\"wheelchair\": [true, \"designated\"]} \n    ],\n    \"__ANY_\": {\n        \"shop\": \"supermarket\",\n        \"wheelchair\": [true, \"designated\"]\n    }\n```\n```\n{\n    \"__ALL_\": {\n        \"__IMPL_\": [ \n                {\"public_transport\": [\"stop_position\", \"platform\"] }, \n                {\"wheelchair\": [true, \"designated\"]} \n        ]\n    },\n    \"__AND_\": {\n        \"shop\": \"supermarket\",\n        \"wheelchair\": [true, \"designated\"]\n    }\n```\n\nNote that one of the quantifiers must be kept, since it will explicitly raise the level of expression to the category (bool) level, enforcing an implicit quantification of the other operand. If both quantifiers were omitted, the expression would remain on the item (filter) level, and therefore, the whole as a conjunction (AND condition) would be implicitly quantified, which would not be equivalent with the above. \n\nNor the explicit `__AND_` condition cannot be left out from the latter variant, since otherwise the atomic filters would be quantified one by one.\n\n### The Two Types of References (# vs. ##)\n\nAs mentioned already, references are named subexpressions as shorthands for reusing them multiple times in the rules. Their definition looks similar as a category definition but their name starts with `#`. Names of some references start with `##`. This distinction has a meaning, and separates two types of references explicitly:\n\n* __Non-quantified, item(filter)-level references start with a single `#`.__ They define a property being evaluated for potentially each single map object in the proximity of a location being categorized. \nThese references can be used inside quantified expressions, or can be used directly as category-level expressions in which case they will be implicitly wrapped by a quantifier.\n* __Quantified, category(bool)-level references start with `##`.__ They define a property being evaluated once for the whole set of map objects in the proximity of a location being categorized.\nThese references must either be explicitly quantified in their definition expression, or will be implicitly wrapped with a quantifier directly. They can be used as a standalone category definition or combined with category(bool)-level operators to define more complex category rules.\n\nIn short: A reference with a double `##` prefix can be used only on the category (bool) level (if it contains a set/filter level expression, it will implicitly be quantified _by_ the reference itself), while a reference with a single `#` prefix can either be used on the set/filter level or on the category/bool level, in the latter case, implicit quantification will be done on the level of expression containing the reference. An explicitly quantified expression can not be used in a reference with a single `#` prefix. \n\nFor instance, the complex example above can alternatively be defined by references, where the wheelchair-accessibility (barrier-freeness) is defined as an item-level reference as being a property of single map objects, and the condition of the existence of a barrier-free supermarket on one hand, and the public transport facilities being each barrier-free on the other hand, are defined as category-level references:\n\n```\n\"categoryRules\": [\n    {\n        \"#barrier-free\": {\"wheelchair\": [true, \"designated\"]}\n    },\n    {\n        \"##all-pt-bf\": {\n            \"__ALL_\": {\n                \"__IMPL_\": [ \n                    {\"public_transport\": [\"stop_position\", \"platform\"] }, \n                    \"#barrier-free\" \n                ]\n            }\n        }\n    },\n    {\n        \"##any-sm-bf\": {\n            \"__ANY_\": {\n                \"shop\": \"supermarket\",\n                \"__REF_\": \"#barrier-free\"\n            }\n        }\n    },\n    {\n        \"barrier-free-shopping-hub-category\": {\n            \"__REF_1\": \"##all-pt-bf\",\n            \"__REF_2\": \"##any-sm-bf\"\n        }\n    }\n]\n```\n\nSince the implication wraps with an ALL, and the conjunction of simple conditions wrap into an ANY, the above rules can be shortened by the following. Note this is because the reference prefix `##` enforces the expression to become category(bool)-level, and the referenced subexpression will be wrapped with a quantifier directly at the point of the reference. \n\n```\n\"categoryRules\": [\n    {\n        \"#barrier-free\": {\"wheelchair\": [true, \"designated\"]}\n    },\n    {\n        \"##all-pt-bf\": {\n            \"__IMPL_\": [ \n                {\"public_transport\": [\"stop_position\", \"platform\"] }, \n                \"#barrier-free\" \n            ]\n        }\n    },\n    {\n        \"##any-sm-bf\": {\n            \"shop\": \"supermarket\",\n            \"__REF_\": \"#barrier-free\"\n        }\n    },\n    {\n        \"barrier-free-shopping-hub-category\": {\n            \"__REF_1\": \"##all-pt-bf\",\n            \"__REF_2\": \"##any-sm-bf\"\n        }\n    }\n]\n```\n\nNote that in the latter example, the ##-named references could syntactically have been #-named references as well, but the meaning of the whole ruleset would have been different (and thus incorrect), due to the fact that the implicit quantifier wrapping will not be enforced at the point of the usage of the references, but only at the top-level of the whole expression.\n\nThe defined references can be (re)used for creating other categories in a simple manner, such as, for example, being added to the array of `categoryRules`:\n\n```\n        \"any-barrier-free-shopping-category\": \"##any-sm-bf\",\n        \"all-barrier-free-pt-category\": \"##all-pt-bf\",\n        \"either-any-bf-sm-or-all-bf-pt-category\": [ \"##any-sm-bf\", \"##all-pt-bf\" ],\n        \"any-barrier-free-facility-category\": \"#barrier-free\"\n```\n\nNote that the last category is defined using an item(filter)-level reference expression, which is being wrapped by an existential quantifier. In other terms, the last category definition is a shorthand of the following one:\n```\n        \"any-barrier-free-facility-category\": { \"__ANY_\": \"#barrier-free\" }\n```\n\n### Quantifier Wrapping in Detail\n\nIf a non-quantified (item-level, a.k.a. filter-) (sub)expression appears somewhere where a quantified (category-level, a.k.a. bool-) expression is required, OpenLostCat wraps the (sub)expression implicitly with a quantifier. In most cases the wrapper becomes an `__ANY_`, which means the default usual interpretation of non-quantified expressions is existential, that is, to find if there is at least one map object in the proximity of the location matching the expression as a rule. \n\nRecall from the section of any-conditions the following examples as being equivalent, with the first one being a shorthand for the second one:\n\n```\n{ \"public_transport\": \"stop_position\" }\n```\n\n```\n{\n    \"__ANY_\": { \"public_transport\": \"stop_position\" }\n}\n```\n\nAny combinations of such conditions with _and_, _or_, or _not_ logical constructs will be wrapped by default with `__ANY_` when directly used as the definition of a category.\n\nHowever, for instance, in the case of the implication, the default wrapper quantifier is `__ALL_`. Therefore, the following two examples are equvalent, with the first one being a shorthand for the second one:\n\n```\n{ \n    \"__IMPL_\": [ \n        {\"public_transport\": [\"stop_position\", \"platform\"] }, \n        {\"wheelchair\": [true, \"designated\"]} \n    ]\n}\n```\n\n```\n{\n    \"__ALL_\": {\n        \"__IMPL_\": [ \n            {\"public_transport\": [\"stop_position\", \"platform\"] }, \n            {\"wheelchair\": [true, \"designated\"]} \n        ]\n    }\n}\n```\n\nThe and-combination of implication subexpressions will also result in universal quantification. In other words, defining two or more implication rules for a single category will be interpreted as each of them must hold for all map objects in the proximity of the location, to be in the defined category. It is, in fact, follows the common-sense interpretation of combining implication rules. \n\nThe following examples are therefore equivalent, with the first one being a shorthand of the second one, meaning a place belongs to the category being defined if _all_ nearby public transport services and supermarkets are wheelchair-accessible:\n\n```\n{ \n    \"__IMPL_pt_wa\": [ \n        {\"public_transport\": [\"stop_position\", \"platform\"] }, \n        {\"wheelchair\": [true, \"designated\"]} \n    ],\n    \"__IMPL_sm_wa\": [ \n        {\"supermarket\": true }, \n        {\"wheelchair\": [true, \"designated\"]} \n    ]\n}\n```\n\n```\n{\n    \"__ALL_\": {\n        \"__IMPL_pt_wa\": [ \n            {\"public_transport\": [\"stop_position\", \"platform\"] }, \n            {\"wheelchair\": [true, \"designated\"]} \n        ],\n       \"__IMPL_sm_wa\": [ \n            {\"supermarket\": true }, \n            {\"wheelchair\": [true, \"designated\"]} \n        ]\n     }\n}\n```\n\nQuantifier wrapping is well-defined for any combination of different subexpressions using the following rules:\n\nIf a set(filter)-level (sub)expression becomes a top-level (sub)expression defining a category, \nor becomes an operand of a multi-ary logical operator having category(bool)-level operands (subexpressions),\nthe set(filter)-level (sub)expression will be wrapped by a quantifier to become a category(bool)-level (sub)expression.\n\nEach set(filter)-level operator type has its default wrapper quantifier for the cases \nwherever a category(bool)-level (sub)expression is expected and it must be wrapped to become such:\n* wrapper quantifier of an atomic (or constant boolean) filter will default to ANY\n* wrapper quantifier of implication will default to ALL\n* wrapper quantifier of a 'not' or #ref is inherited from its subexpression (operand)\n* wrapper quantifier of 'and' will default to ALL if each of its subexpressions (operands) defaults to ALL, otherwise it will default to ANY\n* wrapper quantifier of 'or' will default to ALL if at least one subexpressions (operands) defaults to ALL, otherwise it will default to ANY.\n\nFor complex cases, it is however advised to use explicit quantifiers as it is easier to be followed by human eyes.\n\n### Expressive Power and Algebraic Equivalences\n\nThe rule language of OpenLostCat is a univariate first-order logic, somewhat similar to tuple calculus. It is relatively simple with an expressive power suited to usual scenarios as listed earlier in this document.\n\nA category assessment is based on exact values of OpenStreetMap tags, or the presence or absence of tags, logical combinations of such item-based conditions - on the item/filter level -, the existence of an element in the set of nearby map objects (in a given proximity of the location) with such properties, or a universal condition regarding such properties - for instance, all elements in the set of nearby objects must have a specific tag, value or constellation -, and finally, logical combinations of such existential or universal conditions on the category level. \n\nAs the general logical equivalences hold (such as the algebaic commutativity, associativity, distributivity etc. of logical operators), the same meaning can be expressed usually in different forms.\n\nA classical equivalence is the exchangeability of quantifiers with negation, which swaps the quantifiers, such as in the following example, which defines a category where no primary or secondary road is present. The two rules are logically equivalent:\n\n```\n\"__ALL_\" : {\n    \"__NOT_\" : {\"highway\": [\"primary\", \"secondary\"]}\n}\n```\n\n```\n\"__NOT_\" : {\n    \"__ANY_\" : {\"highway\": [\"primary\", \"secondary\"]}\n}\n```\n\nNote that the quantifier ANY cannot be omitted from the second variant, because in that case, the implicit quantification would have been done on the top level of the expression, meaning there is a map object nearby not having a highway tag with any of the listed values. This would almost always evaluate to true, wherever there is any map object not tagged with highway in the proximity of the location. \n\nFor a similar reason, nor can the quantifier ALL be omitted from the first variant, because the implicit quantification of the operator NOT is ANY, meaning there is a map object nearby not having a highway tag with any of the listed values.\n\nThe above quantifier-negation interchangeability can be derived from the so-called _De Morgan_ rules, stating the interchangeability of negation with conjunctive and disjunctive conditions in the following way. The two expressions below are equivalent:\n\n```\n{\n    \"__NOT_\": [\n        {\"public_transport\": [\"stop_position\", \"platform\"] },\n        {\"amenity\": \"ferry_terminal\"}\n    ]       \n}\n```\n```\n{\n    \"__NOT_1\": { \"public_transport\": [\"stop_position\", \"platform\"] },\n    \"__NOT_2\": { \"amenity\": \"ferry_terminal\"}\n}\n```\nAnd similarly:\n```\n{\n    \"__NOT_\": { \n        \"public_transport\": [\"stop_position\", \"platform\"], \n        \"wheelchair\": [true, \"designated\"]\n    }\n}\n```\n```\n{{\"public_transport\": [\"stop_position\", \"platform\"] }, \n        {\"wheelchair\": [true, \"designated\"]} \n    \"__OR_\": [\n        { \"__NOT_\": { \"public_transport\": [\"stop_position\", \"platform\"] } }, \n        { \"__NOT_\": { \"wheelchair\": [true, \"designated\"] } }\n    ]\n}\n```\n\nEquivalences present on the level of multiple categories as well.\n\nFor example, using first-matching category evaluation, the following two examples are equvalent definitions of a category catalog (if the allowed values for _wheelchair_ are the listed ones in the second variant):\n\n```\n\"categoryRules\": [\n    {\n        \"#wheelchair_accessible\": {\"wheelchair\": [true, \"limited\", \"designated\"]}\n    }\n    {\n        \"wheelchair_shopping\": { \"shop\": \"supermarket\", \"#wheelchair_accessible\" }\n    },\n    {\n        \"wheelchair_shopping_paradise\": {\n            \"__IMPL_\": [{\"shop\": \"supermarket\"}, \"#wheelchair_accessible\"]\n         }\n    },\n    {\n        \"no_wheelchair_shopping\": true\n    }\n]\n```\n\n```\n\"categoryRules\": [\n    {\n        \"no_wheelchair_shopping\": {\n            \"__IMPL_\": [{\"shop\": \"supermarket\"}, {\"wheelchair\": [false, null]}]\n        }\n    },\n    {\n        \"wheelchair_shopping_paradise\": {\n            \"__IMPL_\": [{\"shop\": \"supermarket\"}, {\"wheelchair\": [true, \"limited\", \"designated\"]}]\n         }\n    },\n    {\n        \"wheelchair_shopping\": true\n    }\n]\n```\n\n### Repeating Category Names\n\nAn alternative way of expressing certain rules is by utilizing the explicit order of rules and (re)using the same category name at different points.\n\nIt is possible to define a category name multiple times. Since OpenLostCat indexes the categories, such a definition will yield a category assignment with a different index but the same name. This can be utilized in special cases, when, for example, the user treats these as a single category by name, but wants to know which rule caused the location being categorized as such.\n\nThe following rules assign the same category name to locations with general public transport stops and stations, and locations having only ferry connections, but the latter gets a different numeric index for its category:\n\n```\n\"categoryRules\": [\n    {\n        \"pt_accessible\": {\"public_transport\": [\"stop_position\", \"platform\"] }\n    },\n    {\n        \"pt_accessible\": {\"amenity\": \"ferry_terminal\"}\n    },\n    {\n        \"pt_inaccessible\": true\n    }\n]\n```\n\nAnother example is when a category is defined using a positive-negative-positive scheme, such as in the following example, where the third category definition rule (after the reference definition) yields the same category name as the first one, but gets a different numeric index for the category (indicating here the locations with bus stops being only tagged using legacy tagging scheme):\n\n```\n\"categoryRules\": [\n    {\n        \"#pt_stop\": { \"public_transport\": [\"stop_position\", \"platform\"] }\n    },\n    {\n        \"bus_accessible\": { \"bus\": true, \"__REF_\": \"#pt_stop\"}\n    },\n    {\n        \"pt_accessible\": \"#pt_stop\"\n    },\n    {\n        \"bus_accessible\": {\"highway\": \"bus_stop\"}\n    },\n    {\n        \"pt_inaccessible\": true\n    }\n]\n```\n\nBoth of the above examples are meant being evaluated by the (default) first matching strategy. \n\nIf only the category names are relevant, they can be rewritten using the logical operators without a default rule.\n\n## Rule Syntax Reference\n\nThe rule syntax is summarized below in the form of a generative grammar:\n \n\n```\nCategoryOrRefDef ::= CategoryDef | BoolRefDef | FilterRefDef\nBoolRefDef ::= { BoolRefName = StandaloneBoolRule }\nBoolRefName ::= \"##.*\"\nFilterRefDef ::= { FilterRefName = StandaloneFilterRule }\nFilterRefName ::= \"#[^#].*\"\nCategoryDef ::= { CategoryName = StandaloneRule }\nCategoryName ::= \"[^#].*\"\n\nStandaloneBoolRule ::= bool | BoolAndObj | BoolOrObj | BoolRefName | StandaloneFilterRule\nBoolAndObj ::= { KeyValueBoolRule, ... }\nBoolOrObj ::= [ StandaloneBoolRule, ... ]\nKeyValueBoolRule ::= \n    \"__AND_.*\"   : BoolAndObj | \n    \"__OR_.*\"    : BoolOrObj | \n    \"__IMPL_.*\"  : BoolOrObj | \n    \"__NOT_.*\"   : StandaloneBoolRule | \n    \"__ALL_.*\"   : StandaloneFilterRule | \n    \"__ANY_.*\"   : StandaloneFilterRule | \n    \"__REF_.*\"   : BoolRefName |\n    \"__CONST_.*\" : bool |\n    KeyValueFilterRule\n\nStandaloneFilterRule ::= bool | FilterAndObj | FilterOrObj | FilterRefName\nFilterAndObj ::= { KeyValueFilterRule, ... }\nFilterOrObj ::= [ StandaloneFilterRule, ... ]\nKeyValueFilterRule ::= \n    \"__AND_.*\"  : FilterAndObj | \n    \"__OR_.*\"   : FilterOrObj | \n    \"__IMPL_.*\" : FilterOrObj | \n    \"__NOT_.*\"  : StandaloneFilterRule | \n    \"__REF_.*\"  : FilterRefName |\n    \"__CONST_.*\": bool |\n    AtomicFilter\n\nAtomicFilter ::= \"[^_].*\" : ValueOrList\nValueOrList ::= SingleValue | [SingleValue, ...]\nSingleValue ::= bool | str | int | null\n```\n\nwhere\n - bool, str, int, null : the corresponding JSON type\n - \\[ x, ... \\]  :  JSON array (list) of elements of type x\n - { t, ... }  : json object (dict) elements of tuples (key-value pairs of type t\n - x | y : an element of type x or y\n - \"...\" : JSON string matching the given regexp (.* stands for any sequence of characters, \\[^x\\] stands for a character not being x)\n  \nSingleValue conversions/semantics in atomic filters:\n\n - bool: true is mapped to \"yes\"; false to \"no\"\n - str: str (no conversion for strings)\n - int: string representation of int \n - null: the key is optional in the tag bundle\n\nPrinting the categorizer outputs the abstract syntax tree of the parsed category catalog, where the operators on set/filter level are written with lowercase and the operators on category/bool level with uppercase letters.\n\n## Quick User Reference of Classes and Methods \n\n\n### MainOsmCategorizer \n[main_osm_categorizer.py](openlostcat/main_osm_categorizer.py) \n\nMethods:\n\n#### Constructor\n```__init__(self, category_catalog_source, debug=False, category_catalog_parser=None)```\n\nInitializes the categorizer by setting up the category catalog\n\nParameters\n - `category_catalog_source`:   a JSON structure as python dictionary or a file path string\n - `debug`:                     Boolean, set to true for more detailed output\n - `category_catalog_parser`:   parse using the given parser\n \n Example\n \n ```categorizer =  MainOsmCategorizer(json.loads('{ \"type\": \"CategoryRuleCollection\", \"categoryRules\": [ { \"pt_accessible\": { \"public_transport\": \"stop_position\" } }, { \"pt_inaccessible\": true } ] }'))```\n \n _or_\n \n ```categorizer = MainOsmCategorizer('rules/publictransport_rules.json')```\n ___\n \n#### categorize\n\n```categorize(self, osm_json_dict)```\n\nCategorizes a location by the osm tag bundle set of the objects located there/nearby\n\nParameters\n - `osm_json_dict`: tag bundle set of the osm objects at/near the location\n \n `return` categories matching the location by the given strategy\n \n \nExample\n\n```categorizer.categorize(osm_neighborhood_railway_station)```\n```categorizer.categorize(ask_osm_around_point(47.5001, 19.0247, distance = 300))```\n \n___\n\n#### get_categories_enumerated_key_map\n \n```get_categories_enumerated_key_map(self)```\n \n \n\n```get_categories_enumerated_key_map()```\n\nRetrieves the categories parsed by init\n\n`return` categories\n\nExample\n\n```categorizer.get_categories_enumerated_key_map()```\n\n___\n#### print\n\nVisualization of the category catalog (set of parsed expression rules)\n\n```print(categorizer)```\n\n___\n\n### Ask_osm\n[osmqueryutils/ask_osm.py](openlostcat/osmqueryutils/ask_osm.py)\n\nMethods:\n\n#### ask_osm\n```ask_osm(query, url=overpass_url)```\n\nQueries the Overpass API with a query string\n\nParameters\n - `query`: an overpass query string\n - `url`:   API address\n \n `return` query results in json\n \n Example\n \n ```\n ask_osm(\"\"\"[out:json];\n                nwr[tourism=hotel](47.507, 19.034, 47.566, 19.063);\n            out tags center;\"\"\")\n ```\n \n___\n#### ask_osm_around_point\n\n```ask_osm_around_point(lat, lng, distance=100, url=overpass_url)```\n\nQueries the Overpass API around a point with a distance as radius\n\nParameters\n - `lat`:       wgs84 latitude\n - `lng`:       wgs84 longitude\n - `distance`:  radius in meters\n - `url`:       API address\n \n `return` query results in json\n \n Example\n \n ```ask_osm_around_point(47.5001, 19.0247, distance = 300)```\n \n___\n#### ask_osm_around_point_df\n \n```ask_osm_around_point_df(df_row, distance=100, url=overpass_url)```\n\nQueries the Overpass API around a point with a distance as radius, given in a dataframe\n\nParameters\n - `df_row`:    a dataframe row with wgs84 coordinates in fields named lat, lng\n - `distance`:  radius in meters\n - `url`:       API address\n \n `return` query results in json\n \n Example\n \n ```df.T.apply(ask_osm_around_point_df)``` \n _or_  \n ```df.apply(ask_osm_around_point_df, axis = 1)```\n \n___\n#### ask_osm_around_point_np\n\n```ask_osm_around_point_np(coord_row, distance=100, lat_index=0, lng_index=1, url=overpass_url)```\n\nQueries the Overpass API around a point with a distance as radius, given in a np array of coords\n\nParameters\n - `df_row`:    a dataframe row with wgs84 coordinates in fields named lat, lng\n - `distance`:  radius in meters\n - `url`:       API address\n \n `return` query results in json\n \n Example\n \n ```np.apply_along_axis(ask_osm_around_point_np, 1, coords)```\n\n## Quick User Reference of JSON Rule Operators\n\nA valid OpenLostCat rule collection JSON file looks like: \n\n\n```\n{\n     \"type\": \"CategoryRuleCollection\",\n     \"properties\": {\n         \"evaluationStrategy\": \"all\"\n     },\n     \"categoryRules\": [\n        {\n            \"category_or_reference_1_name\": ...rules_of_category_or_reference_1...\n        },\n        {\n            \"category_or_reference_2\": ...rules_of_category_or_reference_2...\n        },\n        ...further_category_or_reference_definitions...\n     ][ \"##pt_accessible\", { \"__ANY_\" : { \"shop\" : \"supermarket\" } } ]\n}\n```\n\nThe operators used in category and reference definitions are the following: \n\n|  Name *        |  Operator Level {Default quantifier wrapper}                 |  Description                                                                                                          |  Key-value syntax  |  Standalone syntax  |  Example  |\n|  ----         |  -----                                                        |  -----------                                                                                                          |  ----------------  |  -----------------  |  -------  |\n| atomic filter |  item(filter) {ANY}                                           |  Tests whether a tag value equals the given value, or any of the given values (list case), or is missing (null)       |  `\"key\" : \"value\"`, `\"key\" : [\"value1\", ...]`, `\"key\" : null` | - | `\"public_transport\" : \"stop_position\"`, `\"public_transport\" : [\"stop_position\", \"platform\"]` |\n| const         |  item(filter) {CONST}                                         |  Always true or false, according to the value given.                                                                  |  `\"__CONST_xy\" : true`, 틫\"__CONST_xy\": false틫 | `true`, `false` | `true` |\n| CONST         |  category(bool)                                               |  Always true or false, according to the value given.                                                                  |  `\"__CONST_xy\" : true`, 틫\"__CONST_xy\": false틫 | `true`, `false` | `true` |\n| ANY           |  item(filter) --> category(bool)                              |  Tests whether the truth set of the operand is not empty (there is at least one item for which the operand it true).  |  `\"__ANY_xy\" : ...` | - |  `\"__ANY_\": { \"public_transport\" : \"stop_position\" }` |\n| ALL           |  item(filter) --> category(bool)                              |  Tests whether the truth set of the operand equals to the input set (the operand it true for all items).              |  `\"__ALL_xy\" : ...` | - |  `\"__ALL_\": { \"public_transport\" : null }` |\n| ref (#)       |  item(filter) {inherits from operand}                         |  Tests whether the expression defined by the reference is true (gives the truth set of the operand).                  |  `\"__REF_xy\" : \"#ref_name\"` | `\"#ref_name\"` | `\"#pt_platform\"` where it was defined in a separate rule ss ` { \"#pt_platform\" : { \"public_transport\" : \"stop_position\" } }` | \n| REF (##)      |  category(bool)                                               |  Tests whether the expression defined by the reference is true.                                                       |  `\"__REF_xy\" : \"##ref_name\"` | `\"##ref_name\"` | `\"##pt_accessible\"` where it was defined in a separate rule ss ` { \"##pt_accessible\" : { \"__ANY_\": { \"public_transport\" : \"stop_position\" } } }` |\n| and           |  item(filter) {ALL if each operand wraps to ALL, else ANY}    |  True if all operands are true (intersects the truth sets of the operands).                                           |  `\"__AND_xy\" : { ..., ..., ..... }` | `{ ..., ..., ..... }` | `{\"public_transport\" : \"stop_position\", \"wheelchair\" : \"yes\" } |\n| AND           |  category(bool)                                               |  True if all operands are true.                                                                                       |  `\"__AND_xy\" : { ..., ..., ..... }` | `{ ..., ..., ..... }` | `{ \"__REF_\" : \"##pt_accessible\", \"__ANY_\" : { \"shop\" : \"supermarket\" } } }` |\n| or            |  item(filter) {ALL if either operand wraps to ALL, else ANY}  |  True if either of the operands is true (unites the truth sets of the operands).                                      |  `\"__OR_xy\" : [ ..., ..., ..... ]` | `[ ..., ..., ..... ]` | `[ \"#pt_platform\", { \"shop\" : \"supermarket\" } ]` |\n| OR            |  category(bool)                                               |  True if either of the operands is true.                                                                              |  `\"__OR_xy\" : [ ..., ..., ..... ]` | `[ ..., ..., ..... ]` | `[ \"##pt_accessible\", { \"__ANY_\" : { \"shop\" : \"supermarket\" } } ]` |\n| not           |  item(filter) {inherits from operand}                         |  Negates the truth value of the operand (forms the complementer set of the truth set of the operand).                 |  `\"__NOT_xy\" : ...` | - | `\"__NOT_\" : { \"shop\" : null }` |\n| NOT           |  category(bool)                                               |  Negates the truth value of the operand.                                                                              |  `\"__NOT_xy\" : ...` | - | `\"__NOT_\" : \"##pt_accessible\"` |\n| impl          |  item(filter) {ALL}                                           |  Tests whether the last operand (conclusion) is implied by the other operands (premises).                             |  `\"__IMPL_xy\" : [ ..., ..., ..... ]` | - | `\"__IMPL_\" : [ \"#pt_platform\", { \"wheelchair\" : \"yes\" } ]` |\n| IMPL          |  category(bool)                                               |  Tests whether the last operand (conclusion) is implied by the other operands (premises).                             |  `\"__IMPL_xy\" : [ ..., ..., ..... ]` | - | `\"__IMPL_\" : [ \"##pt_accessible\", { \"__ANY_\" : { \"shop\" : \"supermarket\" } } ]` |\n\nRemark: * Names are written always in uppercase in rule defitions. Here, writing of names follow the way they are output by the OpenLostCat AST console log (lowercase: set-level, uppercase: category-level operators).   \n\n## Further Info and Contribution\n\nSee the Developers' Documentation in [devdoc](devdoc/).\n\nContact the creators G치bor Luk치cs ([lukacsg](https://github.com/lukacsg)) and Andr치s Moln치r ([zarandras](https://github.com/zarandras)) with any questions, suggestions or contributions.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/sampleproject",
    "keywords": "",
    "license": "GPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openlostcat",
    "package_url": "https://pypi.org/project/openlostcat/",
    "platform": "",
    "project_url": "https://pypi.org/project/openlostcat/",
    "project_urls": {
      "Homepage": "https://github.com/pypa/sampleproject"
    },
    "release_url": "https://pypi.org/project/openlostcat/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Open Logic-based Simple Tag-bundle Categorizer",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10253554,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a68323639999fa3cdf8e07d5893e91e2e4937e64a7a6ef0093503879a12da30b",
          "md5": "06f4da213db66dc37e5783a48186586f",
          "sha256": "6e6be19e7dc8f819aeafaa6246dc347e78700564e2e142084d321e5c0a367948"
        },
        "downloads": -1,
        "filename": "openlostcat-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06f4da213db66dc37e5783a48186586f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 67012,
        "upload_time": "2021-05-04T13:45:46",
        "upload_time_iso_8601": "2021-05-04T13:45:46.440431Z",
        "url": "https://files.pythonhosted.org/packages/a6/83/23639999fa3cdf8e07d5893e91e2e4937e64a7a6ef0093503879a12da30b/openlostcat-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a68323639999fa3cdf8e07d5893e91e2e4937e64a7a6ef0093503879a12da30b",
        "md5": "06f4da213db66dc37e5783a48186586f",
        "sha256": "6e6be19e7dc8f819aeafaa6246dc347e78700564e2e142084d321e5c0a367948"
      },
      "downloads": -1,
      "filename": "openlostcat-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "06f4da213db66dc37e5783a48186586f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 67012,
      "upload_time": "2021-05-04T13:45:46",
      "upload_time_iso_8601": "2021-05-04T13:45:46.440431Z",
      "url": "https://files.pythonhosted.org/packages/a6/83/23639999fa3cdf8e07d5893e91e2e4937e64a7a6ef0093503879a12da30b/openlostcat-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}