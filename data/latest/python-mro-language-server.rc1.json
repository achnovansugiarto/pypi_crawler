{
  "info": {
    "author": "Kaiyan XIAO",
    "author_email": "k.max.xiao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Python MRO Language Server\n\nA simple Python language server to provide **MRO** (Method Resolution Order) inference.\n\n**MRO** is the order in which Python looks for a method in a hierarchy of classes. Python uses *C3 Linearisation* [(wiki page)](https://en.wikipedia.org/wiki/C3_linearization) as the underlying algorithm.\n\nThis project conforms to Microsoft's [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) but only support Hover and CodeLens requests. Python 3.6+ are supported.\n\n![Continuous Integration Status](https://github.com/mosckital/python-mro-language-server/workflows/Continuous%20Integration/badge.svg)\n[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/Naereen/StrapDown.js/blob/master/LICENSE)\n\n## Installation\n\nThe Python MRO language server can be easily installed by:\n\n```shell\npip install python-mro-language-server\n```\n\nThe language server uses `jedi` for static syntax analysis and `python-jsonrpc-server` for the JsonRPC communications. These two packages and their dependencies, `ujson` and `parso`, will be installed by the about command as well.\n\n## Usage\n\nThe Python MRO language server can be launched by the following command:\n\n```shell\npython -m mrols.server [port]\n```\n\nWhere `port` is 3000 by default if not specified.\n\n## Language Server Features\n\nThe main purpose of this language server is to *infer and return the MRO of a target in request* via static syntax analysis of the provided source codes.\n\nBy static syntax analysis, there is a minimum level of security risk since the source codes will not be run. This is at the expense that the inference may be incomplete in some situations, like when using a dynamically declared type or having no information about the external library. However, the user can expect that the inference should work in a large part of the common cases.\n\nThe necessary static syntax analysis is achieved by using both the [`jedi`](https://github.com/davidhalter/jedi) analysis library and the Python built-in library `ast` (stands for Abstract Syntax Trees). The `jedi` library is in primary use and the `ast` library provides additional supports.\n\n### Hover functionality\n\nThe Python MRO Language Server implements the [**Hover Request**](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_hover) of the Language Server Protocol. The user can fetch the MRO list of a class or its instance by hovering over the class name (implemented) or instance name (to implement very soon).\n\n### CodeLens functionality\n\nThe Python MRO Language Server implements the [**Code Lens Request**](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_codeLens) and the [**Code Lens Resolve Request**](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#codeLens_resolve) as well. A code lens will appear at the first line of every class declaration. The user can get the MRO list of the declared class by clicking the code lens.\n\n## Relation to the Python MRO extension for VS Code\n\nThis language server is the backend server used in the [Python MRO](https://github.com/mosckital/vscode_python_mro) extension for VS Code.\n\nIt is very welcomed that this language server can be used in any other extensions to any editor that supports the Language Server Protocol.\n\n## Incoming Features\n\nThe following list includes the features to add into the Python MRO Language Server in the next releases.\n\n* New Features:\n  * Hover:\n    * add support to show MRO list when hovering over a class instance\n    * add support to show the which class in the MRO list will provide the actual implementation when hovering over a method of a class instance (lower priority, scheduled after finishing the other features)\n  * CodeLens:\n    * change the way to show MRO list when clicking a code lens from showing in a pop-up message window to showing in a side panel like [what GitLens does](https://github.com/eamodio/vscode-gitlens#git-code-lens-).\n* Project Reliability\n  * increase the readability of the documentations\n  * add coverage check and show the result as a badge in README\n  * add pylint check and show the score as a badge in README\n  * add logging to the whole scope of the project and save the last logs in file\n\n## Contribution\n\nAny contribution is welcomed!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mosckital/python-mro-language-server",
    "keywords": "MRO,language-server,method-resolution-order,syntax-analysis",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-mro-language-server",
    "package_url": "https://pypi.org/project/python-mro-language-server/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-mro-language-server/",
    "project_urls": {
      "Homepage": "https://github.com/mosckital/python-mro-language-server"
    },
    "release_url": "https://pypi.org/project/python-mro-language-server/0.0.1/",
    "requires_dist": [
      "jedi (==0.17.2)",
      "python-jsonrpc-server (==0.4.0)",
      "parso (==0.7.1) ; python_version >= \"2.7\" and python_version not in \"3.0, 3.1, 3.2, 3.3\"",
      "ujson (==3.2.0) ; python_version >= \"3.5\""
    ],
    "requires_python": ">=3.6",
    "summary": "A simple Python language server to provide MRO (Method Resolution Order) inference via Hover and CodeLens.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9907245,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35a9aa39f6dea75c6b5c48432d98a1afbe0112a7ef1e1b4ebb96d76b7ab06a33",
          "md5": "c8123d7759a07d208d57319adefc8e67",
          "sha256": "71af9634c20a3cfe93f92a1cf19f9ca154252b99a540f89b8f5b90c22f5c908a"
        },
        "downloads": -1,
        "filename": "python_mro_language_server-0.0.1-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8123d7759a07d208d57319adefc8e67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14888,
        "upload_time": "2021-03-28T19:51:02",
        "upload_time_iso_8601": "2021-03-28T19:51:02.584082Z",
        "url": "https://files.pythonhosted.org/packages/35/a9/aa39f6dea75c6b5c48432d98a1afbe0112a7ef1e1b4ebb96d76b7ab06a33/python_mro_language_server-0.0.1-1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98aaad7322e96debbcb358c460ba909f886a3aaddfc0c2f0ec953337e6a49a5d",
          "md5": "e9f6a0e73b971fdb3c52097bdac3daef",
          "sha256": "22afdb49f11f8e5da679b978379fc1fffe4b17475729be072da19a5d6c83efa6"
        },
        "downloads": -1,
        "filename": "python-mro-language-server-0.0.1-1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9f6a0e73b971fdb3c52097bdac3daef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25558,
        "upload_time": "2021-03-28T19:52:20",
        "upload_time_iso_8601": "2021-03-28T19:52:20.898671Z",
        "url": "https://files.pythonhosted.org/packages/98/aa/ad7322e96debbcb358c460ba909f886a3aaddfc0c2f0ec953337e6a49a5d/python-mro-language-server-0.0.1-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35a9aa39f6dea75c6b5c48432d98a1afbe0112a7ef1e1b4ebb96d76b7ab06a33",
        "md5": "c8123d7759a07d208d57319adefc8e67",
        "sha256": "71af9634c20a3cfe93f92a1cf19f9ca154252b99a540f89b8f5b90c22f5c908a"
      },
      "downloads": -1,
      "filename": "python_mro_language_server-0.0.1-1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c8123d7759a07d208d57319adefc8e67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14888,
      "upload_time": "2021-03-28T19:51:02",
      "upload_time_iso_8601": "2021-03-28T19:51:02.584082Z",
      "url": "https://files.pythonhosted.org/packages/35/a9/aa39f6dea75c6b5c48432d98a1afbe0112a7ef1e1b4ebb96d76b7ab06a33/python_mro_language_server-0.0.1-1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "98aaad7322e96debbcb358c460ba909f886a3aaddfc0c2f0ec953337e6a49a5d",
        "md5": "e9f6a0e73b971fdb3c52097bdac3daef",
        "sha256": "22afdb49f11f8e5da679b978379fc1fffe4b17475729be072da19a5d6c83efa6"
      },
      "downloads": -1,
      "filename": "python-mro-language-server-0.0.1-1.tar.gz",
      "has_sig": false,
      "md5_digest": "e9f6a0e73b971fdb3c52097bdac3daef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25558,
      "upload_time": "2021-03-28T19:52:20",
      "upload_time_iso_8601": "2021-03-28T19:52:20.898671Z",
      "url": "https://files.pythonhosted.org/packages/98/aa/ad7322e96debbcb358c460ba909f886a3aaddfc0c2f0ec953337e6a49a5d/python-mro-language-server-0.0.1-1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}