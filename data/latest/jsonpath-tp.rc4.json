{
  "info": {
    "author": "\"Joey Sullivan\",",
    "author_email": "\"monkeydevtools@gmail.com\"",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# The **jsonpath_tp** Package.\n\nThe **jsonpath_tp** is a [jsonpath](https://goessner.net/articles/JsonPath/) implementation built on top of \n[treepath](https://pypi.org/project/treepath/) technology.  Jsonpath is \n[query language](https://en.wikipedia.org/wiki/Query_language) for extracting data from \n[json](https://docs.python.org/3/library/json.html) document.   The jsonpath_tp attempts to follow the \nstandard defined in \n[jsonpath](https://www.ietf.org/archive/id/draft-goessner-dispatch-jsonpath-00.html#name-detailed-definition) with \nthe exceptions:\n* script expression are not supported\n* filter (script) expression support any single argument python function.\n* filter expression support regular expression\n\nThe jsonpath_tp can be used programmatically or via th OS command line interface (CLI) with the addition of \n[jsonpath_cli](https://pypi.org/project/jsonpath-cli/) with package.\n\n\n# Quick Start Programmatically\nAll the jsonpath_tp components should be imported as follows:\n```python\nfrom jsonpath_tp import get, find\n```\n\nA jsonpath example that gets c's value from json data.\n\n```python\ndata = {\n    \"a\": {\n        \"b\": [\n            {\n                \"c\": 1\n            },\n            {\n                \"c\": 2\n            }]\n    }\n}\nvalue = get(\"$.a.b[0].c\", data)\nassert value == 1\n\n```\nA jsonpath example that gets c's value from json data.\n\n```python\nvalue = [value for value in find(\"$.a.b[*].c\", data)]\nassert value == [1, 2]\n```\n\n# Solar System Json Document\n\nThe examples shown in this README use the following json document.  It describes our solar system. Click to expand.  \n<details><summary>solar_system = {...}</summary>\n<p>\n\n```json\n\n{\n  \"star\": {\n    \"name\": \"Sun\",\n    \"diameter\": 1391016,\n    \"age\": null,\n    \"planets\": {\n      \"inner\": [\n        {\n          \"name\": \"Mercury\",\n          \"Number of Moons\": \"0\",\n          \"diameter\": 4879,\n          \"has-moons\": false\n        },\n        {\n          \"name\": \"Venus\",\n          \"Number of Moons\": \"0\",\n          \"diameter\": 12104,\n          \"has-moons\": false\n        },\n        {\n          \"name\": \"Earth\",\n          \"Number of Moons\": \"1\",\n          \"diameter\": 12756,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Mars\",\n          \"Number of Moons\": \"2\",\n          \"diameter\": 6792,\n          \"has-moons\": true\n        }\n      ],\n      \"outer\": [\n        {\n          \"name\": \"Jupiter\",\n          \"Number of Moons\": \"79\",\n          \"diameter\": 142984,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Saturn\",\n          \"Number of Moons\": \"82\",\n          \"diameter\": 120536,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Uranus\",\n          \"Number of Moons\": \"27\",\n          \"diameter\": 51118,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Neptune\",\n          \"Number of Moons\": \"14\",\n          \"diameter\": 49528,\n          \"has-moons\": true\n        }\n      ]\n    }\n  }\n}\n\n\n```\n\n</p>\n</details>\n\n\n# query examples.\n\n| Description                                 | Xpath                               | jsonpath                                  | treepath                            |\n|----------------------------------------------|-------------------------------------|-------------------------------------------|------------------------------------|\n| Find planet earth.                           | /star/planets/inner[name='Earth']   | $.star.planets.inner[?(@.name=='Earth')]  | path.star.planets.inner[*][?(@.name == 'Earth')]   |\n| List the names of all inner planets.         | /star/planets/inner[*].name         | $.star.planets.inner[*].name              | path.star.planets.inner[*].name   |\n| List the names of all planets.               | /star/planets/*/name                | $.star.planets.*[*].name                   | path.star.planets.wc[*].name      |\n| List the names of all celestial bodies       | //name                              | $..name                                   | path.rec.name                      |  \n| List all nodes in the tree Preorder          | //*                                 | $..                                       | path.rec                           |\n| Get the third rock from the sun              | /star/planets/inner[3]              | $.star.planets.inner[2]                   | path.star.planets.inner[2]         |\n| List first two inner planets                 | /star/planets.inner[position()<3]   | $.star.planets.inner[:2]                  | path.star.planets.inner[0:2]       |\n|                                              |                                     | $.star.planets.inner[0, 1]                | path.star.planets.inner[0, 2]      |\n| List planets smaller than earth              | /star/planets/inner[diameter < 1]   | $.star.planets.inner[?(@.diameter < 12756)]              | path.star.planets.inner[wc][has(path.diameter < 12756)]      |\n| List celestial bodies that have planets.     | //*[planets]/name                   | $..[?(@.planets)].name                   | path.rec[?(@.planets)].name       |\n| List the planets with more than 50 moons     |                                     | $..[?(int(@['Number of Moons']) > 50)].name | path.rec[wc][has(path['Number of Moons'] > 50, int)].name |\n\n\n# Traversal Functions\n## get\nThe **get** function returns the first value the path leads to.\n\nGet the star name from the solar_system\n\n```python\nsun = get(\"$.star.name\", solar_system)\nassert sun == 'Sun'\n\n```\nWhen there is no match, MatchNotFoundError is thrown.\n\n```python\ntry:\n    get(\"$.star.human_population\", solar_system)\n    assert False, \"Not expecting humans on the sun\"\nexcept MatchNotFoundError:\n    pass\n\n```\nOr if preferred, a default value can be given.\n\n```python\nhuman_population = get(\"$.star.human_population\", solar_system, default=0)\nassert human_population == 0\n\n```\nIn addition to a constant, the default value may also be a callable\n\n```python\ndef population():\n    return 0\n\nhuman_population = get(\"$.star.human_population\", solar_system, default=population)\nassert human_population == 0\n\n```\nThe default value can be automatically injected in to json document\n\n```python\nhuman_population = get(\"$.star.human_population\", solar_system, default=1, store_default=True)\nassert human_population == solar_system['star'][\"human_population\"]\n```\n## find\nThe **find** function returns an Iterator that iterates to each value the path leads to.  Each value is\ndetermine on its iteration.\n\nFind All the planet names.\n\n```python\ninner_planets = [planet for planet in find(\"$.star.planets.inner[*].name\", solar_system)]\nassert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n```\n## Tracing Debugging\nAll the functions: get, find, support tracing.   An option, when enabled,\nrecords the route the algorithm takes to determine a match.\n\nThis example logs the route the algorithm takes to find the inner planets.  The **print**\nfunction is give to capture the logs, but any single argument function can be used.\n\n```python\ninner_planets = [planet for planet in find(\"$.star.planets.inner[*].name\", solar_system, trace=log_to(print))]\nassert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n\n```\nThe results\n\n```python\n\"\"\"\nat $.star got {'name': 'Sun', 'dia...\nat $.star.planets got {'inner': [{'name': ...\nat $.star.planets.inner got [{'name': 'Mercury',...\nat $.star.planets.inner[*] got {'name': 'Mercury', ...\nat $.star.planets.inner[0].name got 'Mercury'\nat $.star.planets.inner[*] got {'name': 'Venus', 'N...\nat $.star.planets.inner[1].name got 'Venus'\nat $.star.planets.inner[*] got {'name': 'Earth', 'N...\nat $.star.planets.inner[2].name got 'Earth'\nat $.star.planets.inner[*] got {'name': 'Mars', 'Nu...\nat $.star.planets.inner[3].name got 'Mars'\n\"\"\"\n```\n# Path\n## The root\nThe **$** point to root of the tree.\n\n```python\nvalue = get(\"$\", solar_system)\n\nassert value == solar_system\n\n```\nIn a filter, the **@**  point to the current element.\n\n```python\nvalue = get(\"$.star[?(@ == 'Sun')]\", solar_system)\n\nassert value == 'Sun'\n```\n## Dictionaries\n### Keys\nThe dictionary keys are referenced as dynamic attributes on a path.\n\n```python\ninner_from_attribute = get(\"$.star.planets.inner\", solar_system)\ninner_from_string_keys = get(\"$.['star']['planets']['inner']\", solar_system)\n\nassert inner_from_attribute == inner_from_string_keys == solar_system['star']['planets']['inner']\n```\n### Keys With Special Characters\nDictionary keys that are not valid python syntax can be referenced as quoted strings.\n\n```python\nsun_equatorial_diameter = get(\"$.star.planets.inner[0]['Number of Moons']\", solar_system)\n\nassert sun_equatorial_diameter == solar_system['star']['planets']['inner'][0]['Number of Moons']\n```\n### Wildcard as a Key.\nThe * attribute specifies all sibling keys.   It is useful for iterating over attributes.\n\n```python\nstar_children = [child for child in find(\"$.star.*\", solar_system)]\nassert star_children == [solar_system['star']['name'],\n                         solar_system['star']['diameter'],\n                         solar_system['star'][\"age\"],\n                         solar_system['star']['planets'], ]\n```\n### Comma Delimited Keys\nMultiple dictionary keys can be specified using a comma delimited list.\n\n```python\nlast_and_first = [planet for planet in find(\"$.star['diameter', 'name']\", solar_system)]\nassert last_and_first == [1391016, \"Sun\"]\n```\n## List\n### Indexes\nList can be access using index.\n\n```python\nearth = get(\"$.star.planets.inner[2]\", solar_system)\nassert earth == solar_system['star']['planets']['inner'][2]\n\n```\nList the third inner and outer planet.\n\n```python\nlast_two = [planet for planet in find(\"$.star.*.*[2].name\", solar_system)]\nassert last_two == ['Earth', 'Uranus']\n```\n### Comma Delimited Indexes.\nList indexes can be specified as a comma delimited list.\n\n```python\nlast_and_first = [planet for planet in find(\"$.star.planets.outer[3, 0].name\", solar_system)]\nassert last_and_first == [\"Neptune\", \"Jupiter\"]\n```\n### Slices\nList can be access using slices.\n\nList the first two planets.\n\n```python\nfirst_two = [planet for planet in find(\"$.star.planets.outer[:2].name\", solar_system)]\nassert first_two == [\"Jupiter\", \"Saturn\"]\n\n```\nList the last two planets.\n\n```python\nlast_two = [planet for planet in find(\"$.star.planets.outer[-2:].name\", solar_system)]\nassert last_two == [\"Uranus\", \"Neptune\"]\n\n```\nList all outer planets in reverse.\n\n```python\nlast_two = [planet for planet in find(\"$.star.planets.outer[::-1].name\", solar_system)]\nassert last_two == [\"Neptune\", \"Uranus\", \"Saturn\", \"Jupiter\"]\n\n```\nList the last inner and outer planets.\n\n```python\nlast_two = [planet for planet in find(\"$.star.*.*[-1:].name\", solar_system)]\nassert last_two == [\"Mars\", \"Neptune\"]\n```\n### Wildcard as an Index.\nThe * token can be used as a list index.   It is useful for iterating over attributes.\n\n```python\nall_outer = [planet for planet in find(\"$.star.planets.outer[*].name\", solar_system)]\nassert all_outer == [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n```\n## Recursion\nThe .. double dot implies recursive search.  It executes a preorder tree traversal.  The search algorithm\ndescends the tree hierarchy evaluating the path on each vertex until a match occurs.  On each iteration it\ncontinues where it left off. This is an example that finds all the planets names.\n\n```python\nall_planets = [p for p in find(\"$.star.planets..name\", solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nHere is another example that finds all the celestial bodies names.\n\n```python\nall_celestial_bodies = [p for p in find(\"$..name\", solar_system)]\nassert all_celestial_bodies == ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\n                                'Neptune']\n```\n## Filters\n\nFilters are use to add additional search criteria.\n\n### filter \nThe ?() is a filter that evaluates a branched off path relative to its parent path.  This example\nfinds all celestial bodies that have planets.\n\n```python\nsun = get(\"$..[?(@.planets)].name\", solar_system)\nassert sun == \"Sun\"\n\n```\nThis search finds all celestial bodies that have a has-moons attribute.\n\n```python\nall_celestial_bodies_moon_attribute = [planet for planet in find(\"$..[?(@['has-moons'])].name\", solar_system)]\nassert all_celestial_bodies_moon_attribute == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\n                                               'Neptune']\n\n```\nThis search finds all celestial bodies that have moons. Note the **operator.truth** is used to exclude planets\nthat don't have moons.\n\n```python\noperator_truth = operator.truth\nall_celestial_bodies_moon_attribute = [planet for planet in\n                                       find(\"$..[?(operator_truth(@['has-moons']))].name\",\n                                            solar_system,\n                                            locals=locals()\n                                            )]\nassert all_celestial_bodies_moon_attribute == ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### has filter comparison operators\nFilters can be specified with a comparison operator.\n\n```python\nearth = [planet for planet in find(\"$..[?(@.diameter == 12756)].name\", solar_system)]\nassert earth == ['Earth']\n\nearth = [planet for planet in find(\"$..[?(@.diameter != 12756)].name\", solar_system)]\nassert earth == ['Sun', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(\"$..[?(@.diameter > 12756)].name\", solar_system)]\nassert earth == ['Sun', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(\"$..[?(@.diameter >= 12756)].name\", solar_system)]\nassert earth == ['Sun', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(\"$..[?(@.diameter < 12756)].name\", solar_system)]\nassert earth == ['Mercury', 'Venus', 'Mars']\n\nearth = [planet for planet in find(\"$..[?(@.diameter <= 12756)].name\", solar_system)]\nassert earth == ['Mercury', 'Venus', 'Earth', 'Mars']\n\n```\nThere is also a regular expression operator.   This example finds\nall the planets that end with the letter s.\n\n```python\nearth = [planet for planet in find(r\"$..[?(@.name =~ '\\w+s')].name\", solar_system)]\nassert earth == ['Venus', 'Mars', 'Uranus']\n```\n### has filter type conversion\nSometimes the value is the wrong type for the comparison operator. In this example the attribute\n'Number of Moons' is str type.\n\n```python\nplanets = [planet for planet in find(\"$..[?(@['Number of Moons'] > '5')].name\", solar_system)]\nassert planets == ['Jupiter', 'Saturn']\n\n```\nThis is how to convert the type to an int before applying the comparison operator.\n\n```python\nplanets = [planet for planet in find(\"$..[?(int(@['Number of Moons']) > 5)].name\", solar_system)]\nassert planets == ['Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### has filter comparison operators as single argument functions\nA filter operator can be specified as a single argument function.  Here an example that searches for planets that\nhave the same diameter as earth.\n\n```python\nearths_diameter = partial(operator.eq, 12756)\nearth = [planet for planet in find(\"$..[?(earths_diameter(@.diameter))].name\", solar_system, locals=locals())]\nassert earth == ['Earth']\n\n```\nAny single argument function can be used as an operator.  This example uses a Regular Expression to finds\nplanets that end with the letter s.\n\n```python\nname_ends_with_s = re.compile(r\"\\w+s\").match\nearth = [planet for planet in find(\"$..[?(name_ends_with_s(@.name))].name\", solar_system, locals=locals())]\nassert earth == ['Venus', 'Mars', 'Uranus']\n\n```\nThis example uses a closure to find planets that have the same diameter as earth.\n\n```python\ndef smaller_than_earth(value):\n    return value < 12756\n\nearth = [planet for planet in find(\"$..[?(smaller_than_earth(@.diameter))].name\", solar_system, locals=locals())]\nassert earth == ['Mercury', 'Venus', 'Mars']\n```\n### logical and, or and not filters\n#### and\nA regular express to test if the second letter in the value is 'a'.\n\n```python\nsecond_letter_is_a = re.compile(r\".a.*\").fullmatch\n\n```\nThe **and** function evaluates as the logical **and** operator.   It is equivalent to: (arg1 and arg2 and ...)\n\n```python\nfound = [planet for planet in find(\"$..[?(@.diameter < 10000 and (second_letter_is_a(@.name)))].name\",\n                                   solar_system,\n                                   locals=locals())\n         ]\nassert found == ['Mars']\n\n```\n#### or\nThe **or** function evaluates as the logical **or** operator.   It is equivalent to: (arg1 and arg2 and ...)\n\n```python\nfound = [planet for planet in find(\"$..[?(@.diameter < 10000 or (second_letter_is_a(@.name)))].name\",\n                                   solar_system,\n                                   locals=locals()\n                                   )\n         ]\nassert found == ['Mercury', 'Earth', 'Mars', 'Saturn']\n\n```\n#### not\nThe **not** function evaluates as the logical **not** operator.   It is equivalent to: (not arg)\nThis example find all the planets names not not equal to Earth.  Note the double nots.\n\n```python\nfound = [planet for planet in find(\"$..[?(not (@.name != 'Earth'))].name\", solar_system)]\nassert found == ['Earth']\n\n```\n#### Combining has, and, or, and not filters.\nEach of the **has** function can be passed as arguments to any of the other **has** function to construct complex\nboolean equation.  This example is equivalent to:\n(10000 > diameter  or diameter > 20000) and second_letter_is_a(name))\n\n```python\nfound = [planet for planet in\n         find(\"$..[?((@.diameter < 10000 or @.diameter > 20000) and (second_letter_is_a(@.name)))].name\",\n              solar_system,\n              locals=locals()\n              )\n         ]\nassert found == ['Mars', 'Saturn']\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/monkeydevtools/jsonpath_tp",
    "keywords": "",
    "license": "\"Apache Software License\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonpath-tp",
    "package_url": "https://pypi.org/project/jsonpath-tp/",
    "platform": "any",
    "project_url": "https://pypi.org/project/jsonpath-tp/",
    "project_urls": {
      "Homepage": "https://github.com/monkeydevtools/jsonpath_tp"
    },
    "release_url": "https://pypi.org/project/jsonpath-tp/1.0.1/",
    "requires_dist": [
      "treepath"
    ],
    "requires_python": ">=3.7",
    "summary": "A jsonpath implementation powered by treepath technology.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16336313,
  "releases": {
    "0.0.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "684b05f2d49b06b7086207e7bd6551df615791d2d280c0ec79352021e022f33a",
          "md5": "219e5c9b7db0f32e46b3b5f0f6e2ad06",
          "sha256": "11f11a6a4887fbba79f1addb040408833bf86d3f3922a205517de1a3b2c8abbc"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-0.0.0.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "219e5c9b7db0f32e46b3b5f0f6e2ad06",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 6855,
        "upload_time": "2022-10-30T03:00:12",
        "upload_time_iso_8601": "2022-10-30T03:00:12.127032Z",
        "url": "https://files.pythonhosted.org/packages/68/4b/05f2d49b06b7086207e7bd6551df615791d2d280c0ec79352021e022f33a/jsonpath_tp-0.0.0.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21f6c4c9f5d0b10cd1ba17d4f9737ae399e52d103d55c970178b27e846cce99f",
          "md5": "d69e9b460c3d93942d596317e85fc7fa",
          "sha256": "3e91226511156f15fc9f0febcfe4c746aede74e73113133c7c0608fedefc5d56"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-0.0.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "d69e9b460c3d93942d596317e85fc7fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5930,
        "upload_time": "2022-10-30T03:00:13",
        "upload_time_iso_8601": "2022-10-30T03:00:13.771219Z",
        "url": "https://files.pythonhosted.org/packages/21/f6/c4c9f5d0b10cd1ba17d4f9737ae399e52d103d55c970178b27e846cce99f/jsonpath_tp-0.0.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "921083f4f1b6051be433e6299084a65e90d9ca332da9796079ae6050bc5b88e8",
          "md5": "d190848e1ebbff86596cf03dd49a1418",
          "sha256": "0d083256fb1c99c80a3333772a3cc581c9c5b36d21d3566de7c09bb44e279547"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-0.0.0.dev4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d190848e1ebbff86596cf03dd49a1418",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17254,
        "upload_time": "2022-12-30T19:05:13",
        "upload_time_iso_8601": "2022-12-30T19:05:13.459471Z",
        "url": "https://files.pythonhosted.org/packages/92/10/83f4f1b6051be433e6299084a65e90d9ca332da9796079ae6050bc5b88e8/jsonpath_tp-0.0.0.dev4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9e828cc68ee5c5e41362d887c9d2975d9e7ba57dd5b50eebbdde7f4509da3a4",
          "md5": "4f5a6384447d3fc7f75d3ba014c45771",
          "sha256": "3ed624da821fd9389ffbc543632055627736177dcc3ab7fb9223be43ea910d8a"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-0.0.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "4f5a6384447d3fc7f75d3ba014c45771",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19604,
        "upload_time": "2022-12-30T19:05:14",
        "upload_time_iso_8601": "2022-12-30T19:05:14.890091Z",
        "url": "https://files.pythonhosted.org/packages/d9/e8/28cc68ee5c5e41362d887c9d2975d9e7ba57dd5b50eebbdde7f4509da3a4/jsonpath_tp-0.0.0.dev4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4650b882a0f8f516887483a2b3a0995a28ccaa365779c46eb565e2659a6730c2",
          "md5": "c10a55d5822efa62fe908c88b8cf00e1",
          "sha256": "1c3ffcfa849fb23b16820e148a5bf61c25be010dcced2aea43d9ee18828de37a"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c10a55d5822efa62fe908c88b8cf00e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17122,
        "upload_time": "2023-01-06T23:40:13",
        "upload_time_iso_8601": "2023-01-06T23:40:13.969329Z",
        "url": "https://files.pythonhosted.org/packages/46/50/b882a0f8f516887483a2b3a0995a28ccaa365779c46eb565e2659a6730c2/jsonpath_tp-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee4e4e5f5dd8d1d96825840cd5cc98f6f8d5a0c7fce6ebe770c935a0fa48e290",
          "md5": "e047a27abec93b838b869172d38c66cd",
          "sha256": "a7078f5df74613aa0660f3e782d9c0e85647288954a37d4324ca8687923b0c07"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e047a27abec93b838b869172d38c66cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19448,
        "upload_time": "2023-01-06T23:40:15",
        "upload_time_iso_8601": "2023-01-06T23:40:15.549461Z",
        "url": "https://files.pythonhosted.org/packages/ee/4e/4e5f5dd8d1d96825840cd5cc98f6f8d5a0c7fce6ebe770c935a0fa48e290/jsonpath_tp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848e1a367b0c8123c4419a2d04432b95121031fe6f17246baa6f7d3521c4b658",
          "md5": "64d05beef8ee7f6dbbaba7798229468a",
          "sha256": "200f09ed0df4bec80e4ee4d71d6779e933bd4d964cc9fbf5deb388d49985c6cb"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64d05beef8ee7f6dbbaba7798229468a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17121,
        "upload_time": "2023-01-06T23:44:57",
        "upload_time_iso_8601": "2023-01-06T23:44:57.843801Z",
        "url": "https://files.pythonhosted.org/packages/84/8e/1a367b0c8123c4419a2d04432b95121031fe6f17246baa6f7d3521c4b658/jsonpath_tp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "585ebe1363e32960d85eb42a70712d6ea80738ae0bc079cf8cb26f4e005e70e0",
          "md5": "b2d62fc75d4464447f9e07284d3fd211",
          "sha256": "c0823fc592b125a4b4434b556db6b28751e594900d3560cb9e3b1236eb5bab51"
        },
        "downloads": -1,
        "filename": "jsonpath_tp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2d62fc75d4464447f9e07284d3fd211",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19451,
        "upload_time": "2023-01-06T23:44:59",
        "upload_time_iso_8601": "2023-01-06T23:44:59.386084Z",
        "url": "https://files.pythonhosted.org/packages/58/5e/be1363e32960d85eb42a70712d6ea80738ae0bc079cf8cb26f4e005e70e0/jsonpath_tp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "848e1a367b0c8123c4419a2d04432b95121031fe6f17246baa6f7d3521c4b658",
        "md5": "64d05beef8ee7f6dbbaba7798229468a",
        "sha256": "200f09ed0df4bec80e4ee4d71d6779e933bd4d964cc9fbf5deb388d49985c6cb"
      },
      "downloads": -1,
      "filename": "jsonpath_tp-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64d05beef8ee7f6dbbaba7798229468a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 17121,
      "upload_time": "2023-01-06T23:44:57",
      "upload_time_iso_8601": "2023-01-06T23:44:57.843801Z",
      "url": "https://files.pythonhosted.org/packages/84/8e/1a367b0c8123c4419a2d04432b95121031fe6f17246baa6f7d3521c4b658/jsonpath_tp-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "585ebe1363e32960d85eb42a70712d6ea80738ae0bc079cf8cb26f4e005e70e0",
        "md5": "b2d62fc75d4464447f9e07284d3fd211",
        "sha256": "c0823fc592b125a4b4434b556db6b28751e594900d3560cb9e3b1236eb5bab51"
      },
      "downloads": -1,
      "filename": "jsonpath_tp-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b2d62fc75d4464447f9e07284d3fd211",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19451,
      "upload_time": "2023-01-06T23:44:59",
      "upload_time_iso_8601": "2023-01-06T23:44:59.386084Z",
      "url": "https://files.pythonhosted.org/packages/58/5e/be1363e32960d85eb42a70712d6ea80738ae0bc079cf8cb26f4e005e70e0/jsonpath_tp-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}