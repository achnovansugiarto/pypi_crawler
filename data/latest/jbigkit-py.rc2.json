{
  "info": {
    "author": "Aiyu Xiao",
    "author_email": "hypersine.git@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Multimedia :: Graphics :: Graphics Conversion"
    ],
    "description": "# jbigkit-py\n\njbigkit-py is a Python binding library to [jbigkit](https://www.cl.cam.ac.uk/~mgk25/jbigkit/), making you able to encode/decode image to/from [JBIG](https://en.wikipedia.org/wiki/JBIG) format.\n\njbigkit-py is designed for Python3.6+. It has not been tested on Python2 yet.\n\n## Install\n\nFrom pip:\n\n```console\n$ pip install jbigkit-py\n```\n\nOr from source:\n\n```bash\n# make sure you have c++ compiler installed before\n# make sure you have setuptools, pybind11 installed in pip before\n\n$ git clone --recurse-submodules https://github.com/HyperSine/jbigkit-py.git\n$ cd jbigkit-py\n$ pip install .\n```\n\nTo perform tests after installation:\n\n```bash\n# make sure you have pytest, Pillow installed in pip before\n\n$ python -m pytest .\n```\n\n## Tutorial\n\nA decode example:\n\n```py\n#!/usr/bin/env python3\nimport jbigkit\n\nwith open('path to a .jbg file', 'rb') as f:\n    jbg_data = f.read()\n\ndecoder = jbigkit.JbgDecoder()\nstatus, processed_len = decoder.decode_in(jbg_data)\n\n# status should be JbgErrno.EOK if a valid .jbg file was given\nassert status == jbigkit.JbgErrno.EOK\n\n# make sure all processed\nassert processed_len == len(jbg_data)\n\nw, h = decoder.get_width(), decoder.get_height()\nprint('the .jbg file has image size {:d}x{:d}'.format(w, h))\nprint('the .jbg file has {:d} planes.'.format(decoder.get_planes_num()))\n\n# to get the i-th plane\nith_plane = decoder.get_plane(i)    # type: memoryview\n\n# pass the i-th plane to Pillow library for further processing\nimport PIL.Image\nimg = PIL.Image.frombytes('1', (w, h), bytes(ith_plane), 'raw', '1;I')\n```\n\nFor encode, see `tests/test_JbgEncoder.py`\n\n## API Reference\n\n| APIs                                                 | Descriptions                                                                                                                                           |\n|:-----------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `JbgEncoder.__init__(x, y, *planes)`                 | Equivalent to call `jbg_enc_init`.<br/> Planes data is pass via `*planes` variadic arguments. Each one for a plane, and must be Bytes-like object.     |\n| `JbgEncoder.set_lrlmax(mwidth, mheight)`             | Equivalent to call `jbg_enc_lrlmax`.                                                                                                                   |\n| `JbgEncoder.set_layers(d)`                           | Equivalent to call `jbg_enc_layers`.                                                                                                                   |\n| `JbgEncoder.set_lrange(dl, dh)`                      | Equivalent to call `jbg_enc_lrange`.                                                                                                                   |\n| `JbgEncoder.set_options(order, options, l0, mx, my)` | Equivalent to call `jbg_enc_options`.                                                                                                                  |\n| `JbgEncoder.encode_out()`                            | Equivalent to call `jbg_enc_out`, but returns a `bytes` object which is the encode result.                                                             |\n| `JbgDecoder.__init__`                                | Equivalent to call `jbg_dec_init`.                                                                                                                     |\n| `JbgDecoder.set_maxsize(xmax, ymax)`                 | Equivalent to call `jbg_dec_maxsize`.                                                                                                                  |\n| `JbgDecoder.decode_in(buf)`                          | Equivalent to call `jbg_dec_in`. `buf` must be Bytes-like object.                                                                                      |\n| `JbgDecoder.get_width()`                             | Equivalent to call `jbg_dec_getwidth`.                                                                                                                 |\n| `JbgDecoder.get_height()`                            | Equivalent to call `jbg_dec_getheight`.                                                                                                                |\n| `JbgDecoder.get_plane(plane)`                        | Equivalent to call `jbg_dec_getimage` and `jbg_dec_getsize`.<br/> It returns a readonly `memoryview` object which is the data of user-specified plane. |\n| `JbgDecoder.get_planes_num()`                        | Equivalent to call `jbg_dec_getplanes`.                                                                                                                |\n| `JbgDecoder.merge_planes(use_graycode)`              | Equivalent to call `jbg_dec_merge_planes`.                                                                                                             |\n| `JbgErrno.to_string()`                               | Equivalent to call `jbg_strerror`.                                                                                                                     |\n\n## Version Convention\n\nAs this project is based on the C library [jbigkit](https://www.cl.cam.ac.uk/~mgk25/jbigkit/), this project uses the following scheme for versioning:\n\n```\n<version of C library jbigkit>.<a integer for jbigkit-py version>\n```\n\nFor example, a release with version `2.1.1` means it is based on jbitkit-2.1 and is the 1st release of jbigkit-py.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Hypersine/jbigkit-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jbigkit-py",
    "package_url": "https://pypi.org/project/jbigkit-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/jbigkit-py/",
    "project_urls": {
      "Homepage": "https://github.com/Hypersine/jbigkit-py"
    },
    "release_url": "https://pypi.org/project/jbigkit-py/2.1.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python binding library to jbigkit.",
    "version": "2.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15370258,
  "releases": {
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51251320a1868849fa875612a4a6b6419e9b732612ef029c7b6ae7e1649a37f7",
          "md5": "f32d8a0c8ede8c8f03c187dad9622d3b",
          "sha256": "1eac779616600857d8b3fe14e6e6924906a3b1e794427318ba8f26e79a2973ac"
        },
        "downloads": -1,
        "filename": "jbigkit-py-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f32d8a0c8ede8c8f03c187dad9622d3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44500,
        "upload_time": "2022-10-10T08:08:54",
        "upload_time_iso_8601": "2022-10-10T08:08:54.458821Z",
        "url": "https://files.pythonhosted.org/packages/51/25/1320a1868849fa875612a4a6b6419e9b732612ef029c7b6ae7e1649a37f7/jbigkit-py-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671728665b749a337f14fe92418715eb1cfdbaa6e7506dea5e7e2e32597a2454",
          "md5": "a6ea9d7008bd5c5cac30f12f4034aee3",
          "sha256": "625727ca44257524a80dbd7e961d1e7e4e0a6133a55a320f77c266137a7beda8"
        },
        "downloads": -1,
        "filename": "jbigkit-py-2.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a6ea9d7008bd5c5cac30f12f4034aee3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44743,
        "upload_time": "2022-10-11T07:33:06",
        "upload_time_iso_8601": "2022-10-11T07:33:06.883002Z",
        "url": "https://files.pythonhosted.org/packages/67/17/28665b749a337f14fe92418715eb1cfdbaa6e7506dea5e7e2e32597a2454/jbigkit-py-2.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "671728665b749a337f14fe92418715eb1cfdbaa6e7506dea5e7e2e32597a2454",
        "md5": "a6ea9d7008bd5c5cac30f12f4034aee3",
        "sha256": "625727ca44257524a80dbd7e961d1e7e4e0a6133a55a320f77c266137a7beda8"
      },
      "downloads": -1,
      "filename": "jbigkit-py-2.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a6ea9d7008bd5c5cac30f12f4034aee3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44743,
      "upload_time": "2022-10-11T07:33:06",
      "upload_time_iso_8601": "2022-10-11T07:33:06.883002Z",
      "url": "https://files.pythonhosted.org/packages/67/17/28665b749a337f14fe92418715eb1cfdbaa6e7506dea5e7e2e32597a2454/jbigkit-py-2.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}