{
  "info": {
    "author": "Vlad Apopei & Kary Främling",
    "author_email": "ioan-vlad.apopei@aalto.fi, kary.framling@umu.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Documentation"
    ],
    "description": "# py-ciu\n\n*Explainable Machine Learning through Contextual Importance and Utility*\n\n**NOTE: This python implementation is currently a work in progress. As such some of the functionality present in the original R version is not quite yet available.**\n\nThe *py-ciu* library provides methods to generate post-hoc explanations for\nmachine learning-based classifiers.\n\n# What is CIU?\n\n**Remark**: It seems like Github Markdown doesn’t show correctly the “{”\nand “}” characters in Latex equations, whereas they are shown correctly\nin Rstudio. Therefore, in most cases where there is an $i$ shown in\nGithub, it actually signifies `{i}` and where there is an $I$ it\nsignifies `{I}`.\n\nCIU is a model-agnostic method for producing outcome explanations of\nresults of any “black-box” model `y=f(x)`. CIU directly estimates two\nelements of explanation by observing the behaviour of the black-box\nmodel (without creating any “surrogate” model `g` of `f(x)`).\n\n**Contextual Importance (CI)** answers the question: *how much can the\nresult (or the utility of it) change as a function of feature* $i$ or a\nset of features $\\{i\\}$ jointly, in the context $x$?\n\n**Contextual Utility (CU)** answers the question: *how favorable is the\nvalue of feature* $i$ (or a set of features $\\{i\\}$ jointly) for a good\n(high-utility) result, in the context $x$?\n\nCI of one feature or a set of features (jointly) $\\{i\\}$ compared to a\nsuperset of features $\\{I\\}$ is defined as\n\n$$\n\\omega_{j,\\{i\\},\\{I\\}}(x)=\\frac{umax_{j}(x,\\{i\\})-umin_{j}(x,\\{i\\})}{umax_{j}(x,\\{I\\})-umin_{j}(x,\\{I\\})},  \n$$\n\nwhere $\\{i\\} \\subseteq \\{I\\}$ and $\\{I\\} \\subseteq \\{1,\\dots,n\\}$. $x$\nis the instance/context to be explained and defines the values of input\nfeatures that do not belong to $\\{i\\}$ or $\\{I\\}$. In practice, CI is\ncalculated as:\n\n$$\n\\omega_{j,\\{i\\},\\{I\\}}(x)= \\frac{ymax_{j,\\{i\\}}(x)-ymin_{j,\\{i\\}}(x)}{ ymax_{j,\\{I\\}}(x)-ymin_{j,\\{I\\}}(x)}, \n$$\n\nwhere $ymin_{j}()$ and $ymax_{j}()$ are the minimal and maximal $y_{j}$\nvalues observed for output $j$.\n\nCU is defined as\n\n$$\nCU_{j,\\{i\\}}(x)=\\frac{u_{j}(x)-umin_{j,\\{i\\}}(x)}{umax_{j,\\{i\\}}(x)-umin_{j,\\{i\\}}(x)}. \n$$\n\nWhen $u_{j}(y_{j})=Ay_{j}+b$, this can be written as:\n\n$$\nCU_{j,\\{i\\}}(x)=\\left|\\frac{ y_{j}(x)-yumin_{j,\\{i\\}}(x)}{ymax_{j,\\{i\\}}(x)-ymin_{j,\\{i\\}}(x)}\\right|, \n$$\n\nwhere $yumin=ymin$ if $A$ is positive and $yumin=ymax$ if $A$ is\nnegative.\n\n## Usage\n\nFirst, install the required dependencies. NOTE: this is to be run in your environment's terminal; \nsome environments such as Google Colab might require an exclamation mark before the command, such as `!pip install`.\n\n```\npip install py-ciu\n```\n\nImport the library:\n\n```python\nfrom ciu import determine_ciu\n```\n\nNow, we can call the ``determine_ciu`` function which takes the following parameters:\n\n* ``case``: A dictionary that contains the data of the case.\n\n\n* ``predictor``: The prediction function of the black-box model *py-ciu* should\n                 call.\n\n* ```dataset```: Dataset to deduct min_maxs from (dictionary).\n                            Defaults to ``None``.\n\n* ``min_maxs`` (optional): dictionary (``'feature_name': [min, max, is_int]`` for each feature),\n                    or infered from dataset. Defaults to ``None``\n* \n* ``samples`` (optional): The number of samples *py-ciu* will generate. Defaults\n                          to ``1000``.\n\n* ``prediction_index`` (optional): In case the model returns several\n                                   predictions, it is possible to provide the\n                                   index of the relevant prediction. Defaults to\n                                   ``None``.\n                                   \n* ``category_mapping`` (optional): A mapping of one-hot encoded categorical\n                                   variables to lists of categories and category\n                                   names. Defaults to ``None``.\n                                   \n* ``feature_interactions`` (optional): A list of ``{key: list}`` tuples of\n                                       features whose interactions should be\n                                       evaluated. Defaults to ``[]``.\n\nHere we can use a simple example with the well known Iris flower dataset\n```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\niris=datasets.load_iris()\n\ndf = pd.DataFrame(data = np.c_[iris['data'], iris['target']],\n              columns = iris['feature_names'] + ['target'])\ndf['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\ndf.columns = ['s_length', 's_width', 'p_length', 'p_width', 'target', 'species']\n\nX = df[['s_length', 's_width', 'p_length', 'p_width']]\ny = df['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)\n```\n\nThen create and train a model, in this case an `LDA` model\n```python\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(X_train, y_train)\n```\n\nNow simply use our Iris flower data and the model, following the parameter descriptions above\n```python\niris_df = df.apply(pd.to_numeric, errors='ignore')\n\niris_ciu = determine_ciu(\n    X_test.iloc[[42]],\n    model.predict_proba,\n    iris_df.to_dict('list'),\n    samples = 1000,\n    prediction_index = 2\n)\n```\n## Example Output\n\nLet's import a test from the ciu_tests file\n\n```python\nfrom ciu_tests.boston_gbm import get_boston_gbm_test\n```\n\nThe ```get_boston_gbm_test``` function returns a CIU Object that we can simply store and use as such\n```python\nboston_ciu = get_boston_gbm_test()\nboston_ciu.explain_tabular()\n```\n\nNow we can also plot the CI/CU values using the CIU Object's ``plot_ciu`` function\n\n```python\nboston_ciu.plot_ciu()\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_basement_plot.png)\nLikewise there are also several options available using the following parameters:\n\n* ``plot_mode``: defines the type plot to use between 'default', 'overlap' and 'combined'.            \n* ``include``: defines whether to include interactions or not.                                        \n* ``sort``: defines the order of the plot bars by the 'ci' (default), 'cu' values or unsorted if None.\n* ``color_blind``: defines accessible color maps to use for the plots, such as 'protanopia',          \n                                   'deuteranopia' and 'tritanopia'.                           \n* ``color_edge_cu``: defines the hex or named color for the CU edge in the overlap plot mode.         \n* ``color_fill_cu``: defines the hex or named color for the CU fill in the overlap plot mode.         \n* ``color_edge_ci``: defines the hex or named color for the CI edge in the overlap plot mode.         \n* ``color_fill_ci``: defines the hex or named color for the CI fill in the overlap plot mode.         \n\nHere's quick example using some of these parameters to create a modified version of the above plot \n```python\nboston_ciu.plot_ciu(plot_mode=\"combined\", color_blind='tritanopia', sort='cu')\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/modified_plot.png)\n\n## Contextual influence\n\nContextual influence and can be calculated from CI and CU as follows:\n\n$$\n\\phi_{j,\\{i\\},\\{I\\}}(x)=\\omega_{j,\\{i\\},\\{I\\}}(x)(CU_{j,\\{i\\}}(x) - \\phi_{0}),\n$$\n\nwhere $\\phi_{0}$ is the *baseline/reference* value ($y(u(0))$ in the\nplot). For instance, $\\phi_{0}=0.5$ signifies using the average utility\nvalue $0.5$ as the baseline, which is the case in the $age$ plot above.\nAn explanation using Contextual influence on the titanic dataset can be obtained as follows:\n\n*Note*: the dataset and model used are not identical to the R version, \ntherefore the results will see a slight variance. \n```python\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom ciu.ciu_core import determine_ciu\n\ndata = pd.read_csv(\"https://raw.githubusercontent.com/KaryFramling/py-ciu/master/ciu_tests/data/titanic.csv\")\ndata = data.drop(data.columns[0], axis=1)\nunused = ['PassengerId','Cabin','Name','Ticket']\n\nfor col in unused:\n    data = data.drop(col, axis=1)\n\nfrom sklearn.preprocessing import LabelEncoder\ndata = data.dropna().apply(LabelEncoder().fit_transform)\ntrain = data.drop('Survived', axis=1)\n\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(train, data.Survived)\n```\nCreating a new instance for the CIU Object\n\n```python\n# Create test instance (8-year old boy)\nnew_passenger = pd.DataFrame.from_dict({\"Pclass\" : [1], \"Sex\": [1], \"Age\": [8], \"SibSp\": [0], \"Parch\": [0], \"Fare\": [72], \"Embarked\": [2]})\n\nciu_titanic = determine_ciu(\n    new_passenger,\n    model.predict_proba,\n    train.to_dict('list'),\n    samples = 1000,\n    prediction_index = 1,\n    intermediate_concepts=intermediate_tit\n)\n```\n\nOutput a barplot using Contextual Influence:\n```python\nciu_titanic.plot_ciu(use_influence=True, include_intermediate_concepts='no')\n```\n\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/titanic_influence.png)<!-- -->\n\n**Remark:** The Equation for Contextual influence is similar to the\ndefinition of Shapley values for linear models, except that the input\nvalue $x_{i}$ is replaced by its utility value(s) $CU_{j,\\{i\\}}(x)$. In\npractice, **all *Additive Feature Attribution (AFA)* methods estimate\ninfluence values, not feature importance. Most state-of-the-art methods\nsuch as *Shapley values*, *LIME*,** are AFA methods.\n\nInfluence values give no counter-factual information and are easily\nmisinterpreted. Below, we create a Shapley value explanation using the\nIML package. In that explanation, for instance the close-to-zero Shapley\nvalue for $Parch$ gives the impression that it’s a non-important\nfeature, which is clearly wrong based on the CIU explanation.\n\n```python\nimport shap\nexplainer = shap.Explainer(model, train)\nshap_values = explainer(new_passenger)\nshap.plots.bar(shap_values[0,:,1], order=np.argsort(shap_values[0,:,1].values)[::-1])\n```\n\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/titanic_shap.png)\n\nIt might be worth mentioning also that the Shapley value explanation has\na much greater variance than the CIU (and Contextual influence)\nexplanation with same number of samples. This is presumably due to the\nfundamental difference between estimating min/max output values for CIU,\ncompared to estimating a kind of gradient with AFA methods.\n\n## Intermediate Concepts\nCIU can use named feature coalitions and structured vocabularies. \nSuch vocabularies allow explanations at any abstraction level and can make explanations interactive.\n\n###Titanic Example\n\nWe define a small vocabulary for Titanic as follows:\n\n```python\nintermediate_tit = [\n        {\"Wealth\":['Pclass', 'Fare']},\n        {\"Family\":['SibSp', 'Parch']},\n        {\"Gender\":['Sex']},\n        {\"Age_years\":['Age']},\n        {\"Embarked_Place\":['Embarked']}\n    ]\n```\n\nThen we create a new CIU object that uses that vocabulary and get\ntop-level explanation.\n\n```python\nciu_titanic = determine_ciu(\n    new_passenger,\n    model.predict_proba,\n    train.to_dict('list'),\n    samples = 1000,\n    prediction_index = 1,\n    intermediate_concepts=intermediate_tit\n)\n```\n\nFirst barplot explanation:\n\n```python\nciu_titanic.plot_ciu(include_intermediate_concepts='only', plot_mode='overlap')\n```\n\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/titanic_intermediate.png)<!-- -->\n\nThen explain WEALTH and FAMILY\n\n```python\nciu_titanic.plot_ciu(target_concept=\"Family\", plot_mode=\"overlap\")\n```\n\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/titanic_family.png)<!-- -->\n\n``` r\nciu_titanic.plot_ciu(target_concept=\"Wealth\", plot_mode=\"overlap\")\n```\n\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/titanic_wealth.png)<!-- -->\n\nSame thing using textual explanations:\n\n```python\nciu_titanic.explain_text(include_intermediate_concepts=\"only\")\n```\n\n    ## The feature \"Wealth\", which is of normal importance (CI=46.15%), is somewhat typical for its prediction (CU=30.95%).\n    ## The feature \"Family\", which is of normal importance (CI=45.05%), is somewhat typical for its prediction (CU=39.02%).\n    ## The feature \"Gender\", which is of very low importance (CI=19.76%), is not typical for its prediction (CU=0.1%).\n    ## The feature \"Age_years\", which is of high importance (CI=75.82%), is very typical for its prediction (CU=89.86%).\n    ## The feature \"Embarked_Place\", which is of very low importance (CI=6.59%), is very typical for its prediction (CU=100.0%)\n\n```python\nciu_titanic.explain_text(target_concept=\"Family\")\n```\n\n    ## 'The intermediate concept \"Family\", is somewhat typical for its prediction (CU=39.02%).',\n    ## 'The feature \"SibSp\", which is of normal importance (CI=46.34%), is very typical for its prediction (CU=84.21%).',\n    ## 'The feature \"Parch\", which is of normal importance (CI=56.1%), is not typical for its prediction (CU=0.1%).'\n\n```python\nciu_titanic.explain_text(target_concept=\"Wealth\")\n```\n\n    ## 'The intermediate concept \"Wealth\", is somewhat typical for its prediction (CU=30.95%).',\n    ## 'The feature \"Pclass\", which is of very low importance (CI=4.76%), is not typical for its prediction (CU=0.1%).',\n    ## 'The feature \"Fare\", which is of low importance (CI=36.51%), is typical for its prediction (CU=58.7%).'\n\n###Ames Housing Example\nAmes housing is a data set about properties in the town Ames in the US. \nIt contains over 80 features that can be used for learning to estimate the sales price. \nThe following code imports the data set, does some pre-processing and trains a Gradient Boosting model:\n```python\nfrom ciu.ciu_core import determine_ciu\nimport pandas as pd\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('AmesHousing.csv')\n\n#Checking for missing data\nmissing_data_count = df.isnull().sum()\nmissing_data_percent = df.isnull().sum() / len(df) * 100\n\nmissing_data = pd.DataFrame({\n    'Count': missing_data_count,\n    'Percent': missing_data_percent\n})\n\nmissing_data = missing_data[missing_data.Count > 0]\nmissing_data.sort_values(by='Count', ascending=False, inplace=True)\n\n#This one has spaces for some reason\ndf.columns = df.columns.str.replace(' ', '')\n\n\n#Taking care of missing values\nfrom sklearn.impute import SimpleImputer\n# Group 1:\ngroup_1 = [\n    'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType',\n    'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond',\n    'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType'\n]\ndf[group_1] = df[group_1].fillna(\"None\")\n\n# Group 2:\ngroup_2 = [\n    'GarageArea', 'GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n    'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'MasVnrArea'\n]\n\ndf[group_2] = df[group_2].fillna(0)\n\n# Group 3:\ngroup_3a = [\n    'Functional', 'MSZoning', 'Electrical', 'KitchenQual', 'Exterior1st',\n    'Exterior2nd', 'SaleType', 'Utilities'\n]\n\nimputer = SimpleImputer(strategy='most_frequent')\ndf[group_3a] = pd.DataFrame(imputer.fit_transform(df[group_3a]), index=df.index)\n\ndf.LotFrontage = df.LotFrontage.fillna(df.LotFrontage.mean())\ndf.GarageYrBlt = df.GarageYrBlt.fillna(df.YearBuilt)\n\n#Label encoding\nfrom sklearn.preprocessing import LabelEncoder\ndf = df.apply(LabelEncoder().fit_transform)\n\ndata = df.drop(columns=['SalePrice'])\ntarget = df.SalePrice\n\n#Splitting and training\nX_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3, random_state=123)\nxg_reg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.5, learning_rate = 0.1, max_depth = 15, alpha = 10)\n\nxg_reg.fit(X_train,y_train)\n```\nThen we create our vocabulary of intermediate concepts, in this case a list containing dictionaries of a `concept->[columns]`structure as follows:\n```python\nintermediate = [\n    {\"Garage\":list(df.columns[[58,59,60,61,62,63]])},\n    {\"Basement\":list(df.columns[[30,31,33,34,35,36,37,38,47,48]])},\n    {\"Lot\":list(df.columns[[3,4,7,8,9,10,11]])},\n    {\"Access\":list(df.columns[[13,14]])},\n    {\"House_type\":list(df.columns[[1,15,16,21]])},\n    {\"House_aesthetics\":list(df.columns[[22,23,24,25,26]])},\n    {\"House_condition\":list(df.columns[[17,18,19,20,27,28]])},\n    {\"First_floor_surface\":list(df.columns[[43]])},\n    {\"Above_ground_living area\":[c for c in df.columns if 'GrLivArea' in c]}\n]\n```\nNow we can initialise the CIU object with a relatively favourable test case and our newly defined intermediate concepts:\n```python\ntest_data_ames = X_test.iloc[[345]]\n\nciu = determine_ciu(\n    test_data_ames,\n    xg_reg.predict,\n    df.to_dict('list'),\n    samples = 1000,\n    prediction_index = None,\n    intermediate_concepts = intermediate\n)\n```\nWe start with an “explanation” using all 80 basic features, which is not very readable and overly detailed for “ordinary” humans to understand:\n```python\nciu_ames.plot_ciu(include_intermediate_concepts='no', plot_mode='overlap')\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_default_plot.png)\nThen the same, using highest-level concepts:\n```python\nciu_ames.plot_ciu(include_intermediate_concepts='only', plot_mode='overlap')\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_high_plot.png)\nThen explain further some intermediate concepts:\n```python\nciu_ames.plot_ciu(target_concept=\"House_condition\", plot_mode=\"overlap\")\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_house_cond_plot.png)\n```python\nciu_ames.plot_ciu(target_concept=\"Basement\", plot_mode=\"overlap\")\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_basement_plot.png)\n```python\nciu_ames.plot_ciu(target_concept=\"Garage\", plot_mode=\"overlap\")\n```\n![](https://raw.githubusercontent.com/KaryFramling/py-ciu/master/images/ames_garage_plot.png)\n\nThis vocabulary is just an example of what kind of concepts a human typically deals with. \nVocabularies can be built freely (or learned, if possible) and used freely, even so that different vocabularies can be used with different users.\n\n# Related resources\n\nThe original R implementation can be found at: <https://github.com/KaryFramling/ciu>\n\nThere are also two implementations of CIU for explaining images:\n\n- R: <https://github.com/KaryFramling/ciu.image>\n\n- Python: <https://github.com/KaryFramling/py.ciu.image>\n\nImage explanation packages can be considered to be at proof-of-concept\nlevel (Nov. 2022). Future work on image explanation will presumably\nfocus on the Python version, due to the extensive use of deep neural\nnetworks that tend to be implemented mainly for Python.\n\n## Authors\n* [Vlad Apopei](https://github.com/vladapopei/)\n* [Timotheus Kampik](https://github.com/TimKam/)\n* [Kary Främling](https://github.com/KaryFramling)\n\nThe current version of py-ciu re-uses research code provided by [Timotheus Kampik](https://github.com/TimKam/) and replaces it. The old code is available in the branch \"Historical\".",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KaryFramling/py-ciu",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-ciu",
    "package_url": "https://pypi.org/project/py-ciu/",
    "platform": "any",
    "project_url": "https://pypi.org/project/py-ciu/",
    "project_urls": {
      "Code": "https://github.com/KaryFramling/py-ciu",
      "Homepage": "https://github.com/KaryFramling/py-ciu"
    },
    "release_url": "https://pypi.org/project/py-ciu/0.1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python documentation generator",
    "version": "0.1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16100074,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "875c2edbc11257ffb1955467a62508086a43ee8d7b716219eaa91af2c55f529b",
          "md5": "bc6106e7e6a6b0e00cacd4f460a198af",
          "sha256": "9ec4f7751ec67eaba23b4e8b2102b0b840389b942c5c412bdbf816c71d93779e"
        },
        "downloads": -1,
        "filename": "py_ciu-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc6106e7e6a6b0e00cacd4f460a198af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6867,
        "upload_time": "2020-02-28T21:34:20",
        "upload_time_iso_8601": "2020-02-28T21:34:20.508697Z",
        "url": "https://files.pythonhosted.org/packages/87/5c/2edbc11257ffb1955467a62508086a43ee8d7b716219eaa91af2c55f529b/py_ciu-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a554920fc8ef3b86766fd0d763537a6203ffe6f2ade24c2ce4e7ef7970ff1a41",
          "md5": "2d0a8a6536679677f6ca8d79efcd139d",
          "sha256": "ee8c8df7c01b42a516ce65af2e1c39c8c1b309462f9a647d5207f4d735ecebd1"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d0a8a6536679677f6ca8d79efcd139d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5893,
        "upload_time": "2020-02-28T21:34:22",
        "upload_time_iso_8601": "2020-02-28T21:34:22.969292Z",
        "url": "https://files.pythonhosted.org/packages/a5/54/920fc8ef3b86766fd0d763537a6203ffe6f2ade24c2ce4e7ef7970ff1a41/py-ciu-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b584e3f95e9b4383f4a3a389d43a486a4b0c8b1b0867e1d15e668965fc329315",
          "md5": "21b2acf9521e9cd02ba576a1ebdc21a6",
          "sha256": "afb5f88434555c7c34df62f2f3c2e75f3591e74a46240f1113c5fa9b52f4769f"
        },
        "downloads": -1,
        "filename": "py_ciu-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21b2acf9521e9cd02ba576a1ebdc21a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 6974,
        "upload_time": "2020-02-29T23:44:26",
        "upload_time_iso_8601": "2020-02-29T23:44:26.470315Z",
        "url": "https://files.pythonhosted.org/packages/b5/84/e3f95e9b4383f4a3a389d43a486a4b0c8b1b0867e1d15e668965fc329315/py_ciu-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb4f863db7696a0e00c5558aa2d8d4e819e929349fc637649c07415221a82d16",
          "md5": "c1fc025aebe93372d858823ac09b7647",
          "sha256": "b4bd8817bf428e5196fcec6a168f11307bf479996c5a1c8e0da91681f2633858"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1fc025aebe93372d858823ac09b7647",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 5988,
        "upload_time": "2020-02-29T23:44:28",
        "upload_time_iso_8601": "2020-02-29T23:44:28.626557Z",
        "url": "https://files.pythonhosted.org/packages/fb/4f/863db7696a0e00c5558aa2d8d4e819e929349fc637649c07415221a82d16/py-ciu-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "523cafbc493d88783fd6636a60b4fed53e16a675c3a7fcde3841faa81ec2a558",
          "md5": "8361924b10923988db6df21b5e7c48ba",
          "sha256": "873bfaef430c9acc06363a5acaf93e021a48dd0542e7fc6849024e2c16a5db5c"
        },
        "downloads": -1,
        "filename": "py_ciu-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8361924b10923988db6df21b5e7c48ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7033,
        "upload_time": "2020-03-03T21:32:41",
        "upload_time_iso_8601": "2020-03-03T21:32:41.601328Z",
        "url": "https://files.pythonhosted.org/packages/52/3c/afbc493d88783fd6636a60b4fed53e16a675c3a7fcde3841faa81ec2a558/py_ciu-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a9922900d0e4d9e48cda5c2d566b8cc22b5edeae3a142efd50e3479b041d1d0",
          "md5": "390a86d67b377b0021eab57ac4c1ac35",
          "sha256": "916ee97adbf208eb7d84a2a33e57ffa48096e724f3741b135c54eddba1d83021"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "390a86d67b377b0021eab57ac4c1ac35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6057,
        "upload_time": "2020-03-03T21:32:45",
        "upload_time_iso_8601": "2020-03-03T21:32:45.262566Z",
        "url": "https://files.pythonhosted.org/packages/6a/99/22900d0e4d9e48cda5c2d566b8cc22b5edeae3a142efd50e3479b041d1d0/py-ciu-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca2d82882352d231c7bc04c6cdd49cd7480ffb72ff4c9d2484efcc78d2f89481",
          "md5": "392cd84df138c9a2e67c50ed5aaefbfa",
          "sha256": "ee3a85a13d9428801151b05ea554dd042697a205feb8f2e8558b75236ac2b737"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "392cd84df138c9a2e67c50ed5aaefbfa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12976,
        "upload_time": "2022-11-25T14:57:22",
        "upload_time_iso_8601": "2022-11-25T14:57:22.118074Z",
        "url": "https://files.pythonhosted.org/packages/ca/2d/82882352d231c7bc04c6cdd49cd7480ffb72ff4c9d2484efcc78d2f89481/py-ciu-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "093da89b1fac277d9407bcf29916cd479b1c592be628336038bac34333b9e13c",
          "md5": "2dab2328c89a8ea6351c137162292865",
          "sha256": "6c234ae3f6c1d6205da30e2503bc22bbc2bd474666ea9fde3c72d67821e4bda1"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2dab2328c89a8ea6351c137162292865",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19027,
        "upload_time": "2022-12-09T11:06:02",
        "upload_time_iso_8601": "2022-12-09T11:06:02.772080Z",
        "url": "https://files.pythonhosted.org/packages/09/3d/a89b1fac277d9407bcf29916cd479b1c592be628336038bac34333b9e13c/py-ciu-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "630b96dc35387eb16174bb90a0a50110dc510646075336019110628050d667c2",
          "md5": "7a4fbd2d15abbe9e65354e73d204ef74",
          "sha256": "d79ecb718e89127c1705eb44c4c862f95b74fce810a75dd0c1e2491ddf5a59b6"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7a4fbd2d15abbe9e65354e73d204ef74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19027,
        "upload_time": "2022-12-09T11:19:13",
        "upload_time_iso_8601": "2022-12-09T11:19:13.719577Z",
        "url": "https://files.pythonhosted.org/packages/63/0b/96dc35387eb16174bb90a0a50110dc510646075336019110628050d667c2/py-ciu-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37a31cbe3793fa3b8e3e42268ec20cf5df583cf3806716019c8b2fb35e186d87",
          "md5": "06c6450c574146c4e0c93c19b3e3a135",
          "sha256": "fe686bc65bb5514fac1c9e2291bd4c1994347d700d4c94963ca0275f9a2c49a4"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "06c6450c574146c4e0c93c19b3e3a135",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19028,
        "upload_time": "2022-12-09T11:22:16",
        "upload_time_iso_8601": "2022-12-09T11:22:16.661222Z",
        "url": "https://files.pythonhosted.org/packages/37/a3/1cbe3793fa3b8e3e42268ec20cf5df583cf3806716019c8b2fb35e186d87/py-ciu-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "438ae55d9e56bd2a1167c703325636b21298246fc28571991c21429f7bae18e4",
          "md5": "253ef8e174495f5465003ed7281402f8",
          "sha256": "331bf88d8dd537de017b1540d3318e6d4f351be86e54938587b8d73de8f38e31"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "253ef8e174495f5465003ed7281402f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19046,
        "upload_time": "2022-12-09T11:25:37",
        "upload_time_iso_8601": "2022-12-09T11:25:37.926010Z",
        "url": "https://files.pythonhosted.org/packages/43/8a/e55d9e56bd2a1167c703325636b21298246fc28571991c21429f7bae18e4/py-ciu-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f626a0338195c3a080ab03da57bcd11850242a42a2f91c69fe6e67c75c43c56",
          "md5": "9b27b59e04eaee77d5e3e5ef0dbafe29",
          "sha256": "783121bd060bc9758324591fbd85904f8902b53b7708a9c32ddcb87f8f91ec86"
        },
        "downloads": -1,
        "filename": "py-ciu-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9b27b59e04eaee77d5e3e5ef0dbafe29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19131,
        "upload_time": "2022-12-09T11:29:04",
        "upload_time_iso_8601": "2022-12-09T11:29:04.993630Z",
        "url": "https://files.pythonhosted.org/packages/9f/62/6a0338195c3a080ab03da57bcd11850242a42a2f91c69fe6e67c75c43c56/py-ciu-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de7eb52e315219f76368304d6728209c25c6b23f06bcbb83f10b9dfb1ffa2d2f",
          "md5": "2cd4024d0dabf873ec7ad1eb3f94df34",
          "sha256": "75edf30c38ea127cbed53166707f1f6d1123d85eb0a65c04e29dcf9fe1e232f3"
        },
        "downloads": -1,
        "filename": "py-ciu-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2cd4024d0dabf873ec7ad1eb3f94df34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 231585,
        "upload_time": "2022-12-09T11:39:45",
        "upload_time_iso_8601": "2022-12-09T11:39:45.346550Z",
        "url": "https://files.pythonhosted.org/packages/de/7e/b52e315219f76368304d6728209c25c6b23f06bcbb83f10b9dfb1ffa2d2f/py-ciu-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb7a314adf491fae49aef62c886ac0e15c773e3b13fc4bdb5fff7c1ea9eaa4c",
          "md5": "58ffff5a893b1a80ec2d102a6862cdda",
          "sha256": "d9b5c250049eda129f630636ebbd6e20eaf0f2b3e0ca16a23b832b6a2dccae6f"
        },
        "downloads": -1,
        "filename": "py-ciu-0.1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58ffff5a893b1a80ec2d102a6862cdda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 232227,
        "upload_time": "2022-12-09T12:14:21",
        "upload_time_iso_8601": "2022-12-09T12:14:21.281503Z",
        "url": "https://files.pythonhosted.org/packages/3b/b7/a314adf491fae49aef62c886ac0e15c773e3b13fc4bdb5fff7c1ea9eaa4c/py-ciu-0.1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90046755263a5958f41cb17d02dc43b2d0638dbde647d0685d5669504c0ce599",
          "md5": "842677f1176796c8a9b4c51a0cddda37",
          "sha256": "cd5b9c315eb23f79cfef1a310773d6379b8eafbc13f6e9d0f107c0c8d4ee9899"
        },
        "downloads": -1,
        "filename": "py-ciu-0.1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "842677f1176796c8a9b4c51a0cddda37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 231582,
        "upload_time": "2022-12-09T12:19:01",
        "upload_time_iso_8601": "2022-12-09T12:19:01.992131Z",
        "url": "https://files.pythonhosted.org/packages/90/04/6755263a5958f41cb17d02dc43b2d0638dbde647d0685d5669504c0ce599/py-ciu-0.1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59584f61f2ef5260dc378185f4868725ecf079faa2ba8acec553331ca5b76491",
          "md5": "58e78d18ae591be5e94e723d5d34ea40",
          "sha256": "b7034c97496a2e60da8cc11fc387df40c9eea17dd670f29dba60cb983d6f348b"
        },
        "downloads": -1,
        "filename": "py-ciu-0.1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "58e78d18ae591be5e94e723d5d34ea40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 235745,
        "upload_time": "2022-12-14T13:16:19",
        "upload_time_iso_8601": "2022-12-14T13:16:19.430074Z",
        "url": "https://files.pythonhosted.org/packages/59/58/4f61f2ef5260dc378185f4868725ecf079faa2ba8acec553331ca5b76491/py-ciu-0.1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "59584f61f2ef5260dc378185f4868725ecf079faa2ba8acec553331ca5b76491",
        "md5": "58e78d18ae591be5e94e723d5d34ea40",
        "sha256": "b7034c97496a2e60da8cc11fc387df40c9eea17dd670f29dba60cb983d6f348b"
      },
      "downloads": -1,
      "filename": "py-ciu-0.1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "58e78d18ae591be5e94e723d5d34ea40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 235745,
      "upload_time": "2022-12-14T13:16:19",
      "upload_time_iso_8601": "2022-12-14T13:16:19.430074Z",
      "url": "https://files.pythonhosted.org/packages/59/58/4f61f2ef5260dc378185f4868725ecf079faa2ba8acec553331ca5b76491/py-ciu-0.1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}