{
  "info": {
    "author": "Ren√© Monshouwer",
    "author_email": "rene.monshouwer@radboudumc.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyConquest\n\n## Introduction\n\nPython code to partly mimic the functionality of the Conquest Pacs system ( http://www.natura-ingenium.nl/dicom.html ).\nNo (source) code of Conquest was used to write this python code. Program was optimised to be partly compatible (files and database), so queries etc. can \nbe re-used.\n\n## Description:\nClass is used to organise and index sets of dicom files. The dicom files are stored in\na directory (default name : data), with the files of each patient stored in a \nsubdirectory with the patientid as the name. The class will index all files in the \ndirectory and store information (tag information of the dicom files) \nin a sqlite database (default name : conquest.db).\nWhich tags are stored in the database can be defined by the dicom.sql file, this \nfile is optional, a standard set is used when not present.\n\nStandard file/directory layout is :\n```\nconquest.db                       database file\ndata                              data_directory\n    1                             subdirectory with name of PatientID\n      file1_of_pat1.dcm           files of patient1\n      file2_of_pat1.dcm\n      ..\n      ..\n    2                             subdirectory with name of PatientID\n      file1_of_pat2               files of patient2\n      file2_of_pat2\n      ..\n      ..\n[dicom.sql]                       optional definition of the database\n```\n\n### Implemented features :\n- indexer properties : read a dicom tree and build a sqlite database from this which conforms to the Conquest standard.\n- use the conquest style dicom.sql file to define the columns\n- add some special columns,with for instance the roinames in a RTSTRUCT file\n- provide low level procedures to write and read to the database and helper files to create queries\n- provide basic SCU and SCP functionality\n- basic printing of data properties\n\n### What it is not and when you should use Conquest\n- no attempt made to mimic full dicom functionality (this is no PACS)\n- lua scripting\n- image visualisation\n\n# Examples\n\nNote : use the argument *loglevel='INFO'* when creating the instance to get logging output\n### (Re)create database and rebuild database\n\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest(loglevel='INFO')\nc.create_standard_dicom_tables()\nnr_files=c.rebuild_database_from_dicom()\n# only rebuild a single MRN/patient\nc.rebuild_database_from_dicom(mrn='1234567')\n# build for every MRN, even if the MRN already exists in Database\nc.rebuild_database_from_dicom(compute_only_missing=False)\n```\n### Basic database summary\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nc.dicom_series_summary()\n```\n\n## Extracting extra data from the dicomfiles\n### adds data concerning images to the dicomseries table\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nc.analyse_images()\n\n```\n### Saving database information to a csv file\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\n\n# by table(s) or views, specification of filenames is optional\nc.dump_data_to_csv(table='dicomstudies')\nc.dump_data_to_csv(table=['dicomseries','dicompatients'],\n                   filename_dict={'dicomseries': 'dicomseries_filename', 'dicompatients': 'dicompatients_filename'} )\n# by query\nc.dump_data_to_csv(query='select * from dicomstudies',filename='query_filename.csv')\n```\n\n### More advanced querying and extraction from the database:\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\n\n# extract python list type of selected seriesuids \nquery='select * from dicomseries where modality='CT'\nlist_of_seriesuid=c.execute_db_query(query,return_list_from_col='SeriesInst')\nfor seriesuid in list_of_seriesuid:\n  print(seriesuid)\n```\n### Using non standard names and directories\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest(\n    data_directory='data2',\n    sql_inifile_name='dicom2.sql',\n    database_filename='test.db',\n    connect_and_read_sql=True)\n    \nnr_files=c.rebuild_database_from_dicom()   \nc.dicom_series_summary()\n```\n\n\n## Adding and deleting files to the database\n### Adding a single file specified by name (optionally remove original)\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nc.store_dicom_file('1.2.840.113704.1.111....931a31.dcm')\nc.store_dicom_file('1.2.840.113704.1.111....931a31.dcm', remove_after_store=True)\n```\n### Enter all dicom files in a directory into the database\n````\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nc.store_dicom_files_from_directory('input_directory_name')\nc.store_dicom_files_from_directory('input_directory_name', remove_after_store=True)\n\n# using below, the filename is made equal to the sopinstanceuid :\nc.store_dicom_files_from_directory('input_directory_name', sopinstance_as_filename=True)\n\n````\n\n### Deleting series or list of series from the database (optionally 'real' deletion of the file)\n````\nc.delete_series(seriesuid='2.16.840.1.11....152.20190524082318.537836')\nc.delete_series(seriesuid=['2.16..7836','1.2.666...55'])\n#or by query\nc.delete_series(query='select * from dicomseries where modality=\"CT\"')\n\n# Really pyhsically remove the files (otherwise only the DB entries are removed)\nc.delete_series('2.16.840.1.11....152.20190524082318.537836', delete_files=True)\n````\n\n## Sending and receiving files via dicom connectivity\n\n### Send dicom files via dicom protocol, by patientid, seriesuid or query\n\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nc.connect_db()\nc.send_dicom(addres='127.0.0.1', port=5678, patientid='1234567', ae_title=b'destinationAE',  sending_ae_title=b'MY_AE_TITLE')\nc.send_dicom(seriesuid='2.16.840.1.113669.2.931128.880152.20190524082318.537836')\n\nRTPLAN_query=\"select seriesinst from dicomseries where modality=\\'RTPLAN\\'\"\nc.send_dicom(query=RTPLAN_query)\n```\n\n### Start receiver (received files are stored in data directory and database is updated )\n\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest(data_directory='data2')\nc.start_dicom_listener(port=5678)\n# Below does not update the database which saves time\nc.start_dicom_listener(port=104, write_to_database=False)\n```\n\n\n\n## Copying files of a series on the disk to another directory\n#### by seriesuid or list of seriesuids\n```\nfrom pyconquest import pyconquest\n\nc.copy_dicom_files_to_dest(seriesuid='1.2...8024597.12',destination='out', UseSubDirectories=True)\nc.copy_dicom_files_to_dest(seriesuid=['1.2.84..97.12','2.16.840....33'],destination='data2')\n```\n\n#### Or by query (query should return seriesinst)\n```\nfrom pyconquest import pyconquest\n\nc=pyconquest()\nCTquery=\"select seriesinst from dicomseries where modality=\\'CT\\'\"\nc.copy_dicom_files_to_dest(query=CTquery, destination='CTdata',UseSubDirectories=True)\n```\n\n\n## Definition of the database structure\nThe database can be defined using various ways\n- If a file dicom.sql exist that file is used\n- If an alternative file is specified on creation of the instance, that file is used\n    - use sql_infilename='filename.sql' when creating \n- If no file is found, a hardcoded definition is taken\n    - You can add columns to this definition as illustrated below:\n\n\n````\nfrom pyconquest import pyconquest\n\nc=pyconquest(sql_inifile_name='dicom.sql',loglevel='INFO')\nc.add_column_to_database(tablename='DICOMpatients',column_definition=['0x0020', '0x000d', 'StudyInst'])\nc.create_standard_dicom_tables()\n\n````\nthe .sql files are compatible with the original Conquest file format\n\n### To install and upload to PyPi:\n```\npython setup.py sdist\ntwine upload dist/*\n```\n\n# CHANGELOG\n\n### version 0.1.2\n- Added method **analyse_images** to analyse CT/MR/PET images and add data to DicomSeries table. Data added is number of slices, min/max slicepositions and a check for slice consistency is done.\n- Added postprocessing routine **database_postprocessing()** of the database to enrich the database with entries that can only be added when the database is\ncomplete. For instance the Referenced seriesuid in DICOMseries table for RTDOSE. Routine is automatically\nexecuted at the end of **rebuild_database_from_dicom()** \n- Added option called **sopinstance_as_filename** to **store_dicom_files_from_directory()** and **store_dicom_file()** to change the actual filename in the database from the original (default)\nto  sopinstanceUID.dcm\n\n### version 0.1.1 (skipped to 0.1.1 because some systems take 0.0.51 as default)\n- Added option **dump_data_to_csv()** to dump data from the database to csv files\n- Logging of errors to a (rotating) log file : \"pyconquest_error.log\"\n- Added option **write_to_database** to dicom_listener, if FALSE, sqlite db is not updated (for speed)\n- For RTDOSE the referenced SOP UID of the RTPLAN is saved to DicomImages table\n- For RTPLAN the referenced SOP UID of the RTSTUCT is saved to DicomImages table\n### version 0.0.7\n- added option not to check for double entries when rebuilding the database (for speed)\n- added fast option to delete a patient from the database\n- database indices are now created when creating a new database\n- made index tables non unique to improve robustness\n\n### version 0.0.6\n- **Rebuild_database_from_dicom()** now has option to rebuild only missing directories\n- When closing the database, the time elapsed is printed\n- Referenced seriesuid is now extracted from RTSTRUCT and placed in dicomseries and dicomimages table\n- **Dicom_series_summary()** now prints result directly to stdout, so no need for pandas to make a readable table\n- The view **v_series** now only combines series and study table (previous version was too slow due to complexity)\n- New view : **v_seriesRT** now combines series,study and image tables for only RT dicom objects (so not for images)\n### version 0.0.5\n- a view (**v_series**) is added to the sqlite database that joins study,series and image table\n- delete_series can now handle query to define the series to delete\n- series argument of delete_series changed from positional to named\n- added option to rebuild database for a single mrn  (mrn='1234567')\n- added option sending_ae_title to send_dicom() and send_dicom_file()\n- bugfix in name of file in store_dicom (wrong path was used)\n- execute_db_query now has an option to return (only) a list of a single column\n\n### version 0.0.4\n- Added function **insert_dict** to class to easily insert your own data in the database. Also takes care of creating the\ntable when the first dict is inserted\n- If a database has no tables, tables are created automatically on db opening (so on instance creation)\n- In **create_buildquery**, now columns can be defined with formats deviating from default and the default can be defined\n- Number of  fractions and number of beams saved from RTPLAN to database columns \n- For RTDOSE, RTPLAN and RTSTRUCT file hashes are calculated and saved in dicomimage table\n- Added **delete_series** function to delete the series from database and optionally delete the .dcm files\n- Added **filter_roinames()** and **set_roi_filter()** methods to facilitate filtering of roi name lists for child classes\n### version 0.0.3\n- Improved documentation and docstrings\n- uniformity in calling send and copy routines",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ReneMonshouwer/pyconquest",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyconquest",
    "package_url": "https://pypi.org/project/pyconquest/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyconquest/",
    "project_urls": {
      "Homepage": "https://github.com/ReneMonshouwer/pyconquest"
    },
    "release_url": "https://pypi.org/project/pyconquest/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python code which partly mimics the conquest pacs",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16078308,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f07236b0674c9098d7fdd7e7f7ab87454c6caa3429f456d22e1e845a9ced5b3",
          "md5": "78ceffaf7cbbdeb84ee1e65d5e1318a1",
          "sha256": "292d22f808c91ead2f4f8bbdb8ac713600ce4141f734474462710491d3108d0c"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "78ceffaf7cbbdeb84ee1e65d5e1318a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6532,
        "upload_time": "2021-12-26T17:28:43",
        "upload_time_iso_8601": "2021-12-26T17:28:43.787450Z",
        "url": "https://files.pythonhosted.org/packages/5f/07/236b0674c9098d7fdd7e7f7ab87454c6caa3429f456d22e1e845a9ced5b3/pyconquest-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f2f078e9747569b59bfebfadbd8f120f370f290981a35cf7806147b156fe2e2",
          "md5": "1a2319ddc47dfc5c3c568103e43ff5f2",
          "sha256": "75bb424bf36b8b309965720e80df25ca39ec0d0218360763fb09c07427a62c91"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1a2319ddc47dfc5c3c568103e43ff5f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10533,
        "upload_time": "2021-12-29T20:39:10",
        "upload_time_iso_8601": "2021-12-29T20:39:10.519310Z",
        "url": "https://files.pythonhosted.org/packages/2f/2f/078e9747569b59bfebfadbd8f120f370f290981a35cf7806147b156fe2e2/pyconquest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7870de9de8355a2d1a38d414c9d08ed635e6d552c5c7d9bc824a36d8a84bdc9",
          "md5": "3c301e6119573294fc9014bab735dcd7",
          "sha256": "5e688268f221624aab38c4198c6d24b84112cf29940f321f7a4e6b53e91478b9"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3c301e6119573294fc9014bab735dcd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13535,
        "upload_time": "2022-01-12T09:03:30",
        "upload_time_iso_8601": "2022-01-12T09:03:30.314222Z",
        "url": "https://files.pythonhosted.org/packages/d7/87/0de9de8355a2d1a38d414c9d08ed635e6d552c5c7d9bc824a36d8a84bdc9/pyconquest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b09b8646bebd007f7ddd43bf572dba37f8cb7b6ae79b532ea77a8a428d5fd8b",
          "md5": "074191fda30872910b0d32096705ca5c",
          "sha256": "8b861bed9e6bc90b2d13f566ca80dc40afbf91779f93772b664ba5635e8e04d7"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "074191fda30872910b0d32096705ca5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16956,
        "upload_time": "2022-02-02T10:39:15",
        "upload_time_iso_8601": "2022-02-02T10:39:15.481176Z",
        "url": "https://files.pythonhosted.org/packages/4b/09/b8646bebd007f7ddd43bf572dba37f8cb7b6ae79b532ea77a8a428d5fd8b/pyconquest-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ded2baec6be6dd4be10fc35a1b9d4b177922c900aacf12ae83bd8b0d8026fe2",
          "md5": "720638541d213cce57e1ed56d4360ca4",
          "sha256": "a564edbc4b31c055ee6a16cfb6e6d7b08f97bc06d7781b326045d9b2ca379c38"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "720638541d213cce57e1ed56d4360ca4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15028,
        "upload_time": "2022-03-06T15:46:45",
        "upload_time_iso_8601": "2022-03-06T15:46:45.447372Z",
        "url": "https://files.pythonhosted.org/packages/2d/ed/2baec6be6dd4be10fc35a1b9d4b177922c900aacf12ae83bd8b0d8026fe2/pyconquest-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.51": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10f1f10e336401dd951f1aba0f0ed08532174a44dcca3847590b16db958d8c1b",
          "md5": "9dbdfda60deb62b961d52375c4672ac2",
          "sha256": "9087bb4db96940b3ace9c7ab84694a1741b127937072dc9b40a5999ac2f5e168"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.51.tar.gz",
        "has_sig": false,
        "md5_digest": "9dbdfda60deb62b961d52375c4672ac2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18123,
        "upload_time": "2022-03-06T15:56:03",
        "upload_time_iso_8601": "2022-03-06T15:56:03.371315Z",
        "url": "https://files.pythonhosted.org/packages/10/f1/f10e336401dd951f1aba0f0ed08532174a44dcca3847590b16db958d8c1b/pyconquest-0.0.51.tar.gz",
        "yanked": true,
        "yanked_reason": "numbering is wrong and makes it always latest"
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2daa423ee6ab2888c5bb8e03a9766c1442c5f639a5bf167eaadab21c69476f90",
          "md5": "9ed1fa30bf371e37b786c4168f64f4d8",
          "sha256": "8fc1898826b8b0e66af960476f4483c428ef954679aa6ae9cb096e0f89d4cb43"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9ed1fa30bf371e37b786c4168f64f4d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19402,
        "upload_time": "2022-03-22T21:50:11",
        "upload_time_iso_8601": "2022-03-22T21:50:11.613425Z",
        "url": "https://files.pythonhosted.org/packages/2d/aa/423ee6ab2888c5bb8e03a9766c1442c5f639a5bf167eaadab21c69476f90/pyconquest-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5889b2904298fecb90fbe40a5337f77797be116f13a2912b2392d5eead9fa303",
          "md5": "d51f58df95f027ba27ac8f6709143415",
          "sha256": "24b60feae5cf9f0d67e8981c509e5f72d4dcc02482a2d5334535c604e5b4b777"
        },
        "downloads": -1,
        "filename": "pyconquest-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d51f58df95f027ba27ac8f6709143415",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19884,
        "upload_time": "2022-04-07T11:56:50",
        "upload_time_iso_8601": "2022-04-07T11:56:50.630683Z",
        "url": "https://files.pythonhosted.org/packages/58/89/b2904298fecb90fbe40a5337f77797be116f13a2912b2392d5eead9fa303/pyconquest-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81c39ef0b4f12cd01cf6213b769b58653665040152d270a88b1227f3fd6e2c7c",
          "md5": "9415cb52184982ecd2084098f9705359",
          "sha256": "dbc324bd011785748839e49af9d8330e89102dd1115a895d0888377b5f53a7ab"
        },
        "downloads": -1,
        "filename": "pyconquest-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9415cb52184982ecd2084098f9705359",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21577,
        "upload_time": "2022-08-03T08:14:49",
        "upload_time_iso_8601": "2022-08-03T08:14:49.412002Z",
        "url": "https://files.pythonhosted.org/packages/81/c3/9ef0b4f12cd01cf6213b769b58653665040152d270a88b1227f3fd6e2c7c/pyconquest-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81b857aa8eb6c2931acb2a9e0f4f9769e4589653e14fbe24a28040fd95a0310f",
          "md5": "96d07e2f137273eb6c43240454f267a7",
          "sha256": "22f249b41fd8a29d213b6bfbaefe022c2f4170507826352b5fc6a281eb253daa"
        },
        "downloads": -1,
        "filename": "pyconquest-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "96d07e2f137273eb6c43240454f267a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23494,
        "upload_time": "2022-12-12T20:07:55",
        "upload_time_iso_8601": "2022-12-12T20:07:55.009925Z",
        "url": "https://files.pythonhosted.org/packages/81/b8/57aa8eb6c2931acb2a9e0f4f9769e4589653e14fbe24a28040fd95a0310f/pyconquest-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81b857aa8eb6c2931acb2a9e0f4f9769e4589653e14fbe24a28040fd95a0310f",
        "md5": "96d07e2f137273eb6c43240454f267a7",
        "sha256": "22f249b41fd8a29d213b6bfbaefe022c2f4170507826352b5fc6a281eb253daa"
      },
      "downloads": -1,
      "filename": "pyconquest-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "96d07e2f137273eb6c43240454f267a7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23494,
      "upload_time": "2022-12-12T20:07:55",
      "upload_time_iso_8601": "2022-12-12T20:07:55.009925Z",
      "url": "https://files.pythonhosted.org/packages/81/b8/57aa8eb6c2931acb2a9e0f4f9769e4589653e14fbe24a28040fd95a0310f/pyconquest-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}