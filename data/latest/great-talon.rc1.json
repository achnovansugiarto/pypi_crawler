{
  "info": {
    "author": "Mailgun Inc. && entamburini",
    "author_email": "entamburini@uc.cl",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Great-talon\n===========\n\nThis is the Mailgun library to extract message quotations and signatures but updated because the Mailgun team doesn't respond anything ðŸ˜…. \n\nAny help is welcome :).\n\nIf you ever tried to parse message quotations or signatures you know that absence of any formatting standards in this area could make this task a nightmare. Hopefully this library will make your life much easier. The name of the project is inspired by TALON - multipurpose robot designed to perform missions ranging from reconnaissance to combat and operate in a number of hostile environments. Thatâ€™s what a good quotations and signature parser should be like :smile:\n\nUsage\n-----\n\nHereâ€™s how you initialize the library and extract a reply from a text\nmessage:\n\n.. code:: python\n\n    import talon\n    from talon import quotations\n\n    talon.init()\n\n    text =  \"\"\"Reply\n\n    -----Original Message-----\n\n    Quote\"\"\"\n\n    reply = quotations.extract_from(text, 'text/plain')\n    reply = quotations.extract_from_plain(text)\n    # reply == \"Reply\"\n\nTo extract a reply from html:\n\n.. code:: python\n\n    html = \"\"\"Reply\n    <blockquote>\n\n      <div>\n        On 11-Apr-2011, at 6:54 PM, Bob &lt;bob@example.com&gt; wrote:\n      </div>\n\n      <div>\n        Quote\n      </div>\n\n    </blockquote>\"\"\"\n\n    reply = quotations.extract_from(html, 'text/html')\n    reply = quotations.extract_from_html(html)\n    # reply == \"<html><body><p>Reply</p></body></html>\"\n\nOften the best way is the easiest one. Hereâ€™s how you can extract\nsignature from email message without any\nmachine learning fancy stuff:\n\n.. code:: python\n\n    from talon.signature.bruteforce import extract_signature\n\n\n    message = \"\"\"Wow. Awesome!\n    --\n    Bob Smith\"\"\"\n\n    text, signature = extract_signature(message)\n    # text == \"Wow. Awesome!\"\n    # signature == \"--\\nBob Smith\"\n\nQuick and works like a charm 90% of the time. For other 10% you can use\nthe power of machine learning algorithms:\n\n.. code:: python\n\n    import talon\n    # don't forget to init the library first\n    # it loads machine learning classifiers\n    talon.init()\n\n    from talon import signature\n\n\n    message = \"\"\"Thanks Sasha, I can't go any higher and is why I limited it to the\n    homepage.\n\n    John Doe\n    via mobile\"\"\"\n\n    text, signature = signature.extract(message, sender='john.doe@example.com')\n    # text == \"Thanks Sasha, I can't go any higher and is why I limited it to the\\nhomepage.\"\n    # signature == \"John Doe\\nvia mobile\"\n\nFor machine learning talon currently uses the `scikit-learn`_ library to build SVM\nclassifiers. The core of machine learning algorithm lays in\n``talon.signature.learning package``. It defines a set of features to\napply to a message (``featurespace.py``), how data sets are built\n(``dataset.py``), classifierâ€™s interface (``classifier.py``).\n\nCurrently the data used for training is taken from our personal email\nconversations and from `ENRON`_ dataset. As a result of applying our set\nof features to the dataset we provide files ``classifier`` and\n``train.data`` that donâ€™t have any personal information but could be\nused to load trained classifier. Those files should be regenerated every\ntime the feature/data set is changed.\n\nTo regenerate the model files, you can run\n\n.. code:: sh\n\n    python train.py\n\nor\n\n.. code:: python\n    \n    from talon.signature import EXTRACTOR_FILENAME, EXTRACTOR_DATA\n    from talon.signature.learning.classifier import train, init\n    train(init(), EXTRACTOR_DATA, EXTRACTOR_FILENAME)\n\nOpen-source Dataset\n-------------------\n\nRecently we started a `forge`_ project to create an open-source, annotated dataset of raw emails. In the project we\nused a subset of `ENRON`_ data, cleansed of private, health and financial information by `EDRM`_. At the moment over 190\nemails are annotated. Any contribution and collaboration on the project are welcome. Once the dataset is ready we plan to\nstart using it for talon.\n\n.. _scikit-learn: http://scikit-learn.org\n.. _ENRON: https://www.cs.cmu.edu/~enron/\n.. _EDRM: http://www.edrm.net/resources/data-sets/edrm-enron-email-data-set\n.. _forge: https://github.com/mailgun/forge\n\nTraining on your dataset\n------------------------\n\ntalon comes with a pre-processed dataset and a pre-trained classifier. To retrain the classifier on your own dataset of raw emails, structure and annotate them in the same way the `forge`_ project does. Then do:\n\n.. code:: python\n\n    from talon.signature.learning.dataset import build_extraction_dataset\n    from talon.signature.learning import classifier as c \n    \n    build_extraction_dataset(\"/path/to/your/P/folder\", \"/path/to/talon/signature/data/train.data\")\n    c.train(c.init(), \"/path/to/talon/signature/data/train.data\", \"/path/to/talon/signature/data/classifier\")\n\nNote that for signature extraction you need just the folder with the positive samples with annotated signature lines (P folder).\n\n.. _forge: https://github.com/mailgun/forge\n\nResearch\n--------\n\nThe library is inspired by the following research papers and projects:\n\n-  http://www.cs.cmu.edu/~vitor/papers/sigFilePaper_finalversion.pdf\n-  http://www.cs.cornell.edu/people/tj/publications/joachims_01a.pdf",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/entamburini/talon",
    "keywords": "",
    "license": "APACHE2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "great-talon",
    "package_url": "https://pypi.org/project/great-talon/",
    "platform": "",
    "project_url": "https://pypi.org/project/great-talon/",
    "project_urls": {
      "Homepage": "https://github.com/entamburini/talon"
    },
    "release_url": "https://pypi.org/project/great-talon/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mailgun library to extract message quotations and signatures.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7610445,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f83f2a7682407450fee73ae214a8c13917b72f4f5c4184a1388824086caddbba",
          "md5": "ab030a5cae8f20778faa3047cbcbd2aa",
          "sha256": "c4ce811de517742b0ed0e6c72edd97cf009dd648db277a9bcdb445a567f13029"
        },
        "downloads": -1,
        "filename": "great-talon-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab030a5cae8f20778faa3047cbcbd2aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32333,
        "upload_time": "2020-07-01T21:46:25",
        "upload_time_iso_8601": "2020-07-01T21:46:25.695316Z",
        "url": "https://files.pythonhosted.org/packages/f8/3f/2a7682407450fee73ae214a8c13917b72f4f5c4184a1388824086caddbba/great-talon-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f83f2a7682407450fee73ae214a8c13917b72f4f5c4184a1388824086caddbba",
        "md5": "ab030a5cae8f20778faa3047cbcbd2aa",
        "sha256": "c4ce811de517742b0ed0e6c72edd97cf009dd648db277a9bcdb445a567f13029"
      },
      "downloads": -1,
      "filename": "great-talon-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab030a5cae8f20778faa3047cbcbd2aa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32333,
      "upload_time": "2020-07-01T21:46:25",
      "upload_time_iso_8601": "2020-07-01T21:46:25.695316Z",
      "url": "https://files.pythonhosted.org/packages/f8/3f/2a7682407450fee73ae214a8c13917b72f4f5c4184a1388824086caddbba/great-talon-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}