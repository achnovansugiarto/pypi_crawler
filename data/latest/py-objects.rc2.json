{
  "info": {
    "author": "Ofer Nave",
    "author_email": "odigity@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "## What / Why\n\nI dislike Python enums.  I find them weird and off-putting, with their restrictive structure and foundation of metaprogramming black magic.  It's especially awful for beginners, who are ill-equipped to deal with the madness that awaits them on that journey &mdash; especially if the poor fools escalate to Django enums, or god-forbid, Graphene enums.  (Avoid [Graphene](https://graphene-python.org/) like the plague.)\n\nSo, why use them at all, when plain old objects are already familiar and can do nearly anything?  That's what this is &mdash; a pair of simple classes (`Object` and `ObjectManager`), inspired by the Django Model pattern, which lets you declare a family of multi-attribute objects in a single line, and then do cool stuff with them.\n\n## Object Definition\n\nA new object type is defined as a subclass of `Object`, using the class method `define`:\n\n    from objects import Object\n\n    Color = Object.define( \"Color\", \"RED\", \"GREEN\", \"BLUE\" )\n    assert issubclass( Color, Object )\n\nEach object has exactly one mandatory attribute &mdash; `canonical_name` &mdash;, and is accessible as a class attribute via it's canonical name:\n\n    assert isinstance( Color.RED, Color )\n    Color.RED.canonical_name  ->  \"RED\"\n\nHowever, that's just the simplest case.\n\n### Form 2: With Labels\n\nIf you pass kwargs instead of args, the value will be given the attribute name `label`:\n\n    Color = Object.define( \"Color\", RED=\"ff0000\", GREEN=\"00ff00\", BLUE=\"0000ff\" )\n    Color.RED.label  ->  \"ff0000\"\n\n*Note:* It doesn't have to be a string.\n\n### Form 3: Arbitrary Attributes\n\nThe last and most advanced form lets you define as many attributes as you like:\n\n    Color = Object.define(\n        \"Color\",\n        RED=dict(   hex=\"ff0000\", like=True  ),\n        GREEN=dict( hex=\"00ff00\", like=True  ),\n        BLUE=dict(  hex=\"0000ff\", like=False ),\n    )\n\n## Object Manager\n\nIf you want to work with the whole set of objects, use the Object Manager:\n\n    Color.objects.all  ->  [ Color.RED, Color.GREEN, ... ]\n\nYou can also fetch an object by name:\n\n    red = Color.objects[ \"RED\" ]\n\nOr check if a name is part of the set:\n\n    assert \"RED\" in Color.objects\n\nBoth methods will accept either a string or object:\n\n    red = Color.objects[ Color.RED ]\n    assert Color.RED in Color.objects\n\nSo it's safe to use as a \"wrapping\" method to turn args of unknown type into a proper object:\n\n    obj = Color.objects[ some_arg ]\n\n### Select Methods\n\nTo search for objects with specific attribute values, use `select()` or one of the select-based methods, which are the ones that accept `kwargs`.\n\n    fav_colors = Color.objects.select( like=True )\n    fav_color  = Color.objects.first(  like=True )\n\nIf you pass multiple kwargs, they will be \"AND\"-ed, meaning only objects that match both criteria will be returned.\n\nWith no kwargs, it behavees identically to `all`.\n\n## Cheatsheet\n\n    # Form 1\n    Color = Object.define( \"Color\", \"RED\", \"GREEN\", \"BLUE\" )\n\n    # Form 2\n    Color = Object.define( \"Color\", RED=\"ff0000\", GREEN=\"00ff00\", BLUE=\"0000ff\" )\n\n    # Form 3\n    Color = Object.define(\n        \"Color\",\n        RED=dict(   hex=\"ff0000\", like=True  ),\n        GREEN=dict( hex=\"00ff00\", like=True  ),\n        BLUE=dict(  hex=\"0000ff\", like=False ),\n    )\n\n    Object\n\n        # Class\n        objects                                 # Object Manager\n        create(     cn,          **kwargs )     # create and register one object\n        createmany(       *args, **kwargs )     # create and register many objects          (three forms)\n        define(     name, *args, **kwargs )     # create a class with objects in one line   (three forms)\n\n        # Instance\n        __eq__                                  # compares canonical names\n        __hash__                                # returns hash of canonical_name\n        __len__                                 # returns length of canonical_name\n        __repr__                                # returns canonical_name\n        __str__                                 # returns canonical_name\n        cn_lower                                # returns lower-cased canonical_name\n        cn_title                                # returns titlized canonical_name  (FOO_BAR  ->  \"Foo Bar\")\n        ordinal                                 # returns 1-based index representing creation order\n\n    ObjectManager\n\n        __contains__( cn_or_obj )               # returns True | False\n        __getitem__(  cn_or_obj )               # returns obj | None\n        __len__                                 # returns count of registered objects\n        all                                     # returns list\n        filter( func )                          # returns list of 0 or more objects after applying filter function\n        first(  **kwargs )                      # returns obj | None\n        get(    **kwargs )                      # returns obj or raises ValueError\n        last(   **kwargs )                      # returns obj | None\n        max_length                              # returns length of longest canonical_name\n        random()                                # returns randomly-chosen obj\n        select( **kwargs )                      # returns list of 0 or more objects\n\n## Subclassing\n\nIf you want to add your own features to Object, just subclass it:\n\n    class MyObject( Object ):\n        def my_new_method( self ):\n            ...\n\n    Color = MyObject.define( \"Color\", \"RED\", \"GREEN\", \"BLUE\" )\n    Color.RED.my_new_method()\n\nThat works well for defining a project-wide base class, but what if you just want a one-off class to add a feature to a specific object type in your collection?  Easy &mdash; just skip past `define`, which is just a helper method around `createmany`, and use `createmany` directly:\n\n    class Planet( MyObject ):\n        @property\n        def circumference( self ):\n            return self.diameter * 3.14\n\n    Planet.createmany(\n        EARTH=dict( diameter=12742 ),\n        MARS=dict(  diameter=6794  ),\n    )\n\n    Planet.EARTH.circumference\n\n## Bonus: ErrorSet\n\nA variation on the enum theme for Python exceptions.  Declare a family of Exception classes in one line:\n\n    from objects import ErrorSet\n\n    APIError = ErrorSet( \"APIError\", \"CERTIFICATE_ERROR\", \"CONNECTION_ERROR\", \"VERSION_ERROR\" )\n\n    raise APIError(\"...\")\n    raise APIError.VERSION_ERROR(\"...\")\n\nCatch the most specific errors:\n\n    try:\n        ...\n    except APIError.VERSION_ERROR as e:\n        ...\n\nOr the whole family:\n\n    try:\n        ...\n    except APIError as e:\n        ...\n\n_Notice the difference &mdash; Objects are classes with instances attached, whereas ErrorSets are classes with subclasses attached._\n\n## Bonus: Help for Django Users\n\nStop using Django.\n\n.\n\nIf you must use Django, I suggest adding the following to your personal Object base class:\n\n    def django_pair( self ):\n        django_value = self.canonical_name\n        django_label = self.label if hasattr( self, \"label\" ) else self.canonical_name\n        return ( django_value, django_label )\n\n    @classmethod\n    def choices( cls, filter=None ):\n        objects = cls.objects.filter( filter ) if filter else cls.objects.all\n        return [ obj.django_pair() for obj in objects ]\n\nThen you can use Objects instead of Enums in model fields:\n\n    color = models.CharField(\n        choices    = Color.choices(),                                   # use all values\n            -or-\n        choices    = Color.choices( filter=lambda o: o != \"BLUE\" ),     # filter out some\n        max_length = Color.objects.max_length,\n        default    = Color.RED,\n    )\n\n## Bonus: Help for Graphene Users\n\nStop using Graphene.\n\n.\n\nSeriously, it's really really bad.\n\n.\n\nIf you must use Graphene, I suggest adding the following to you personal Object base class:\n\n    from functools import cache\n    from graphene import Enum\n\n    def graphene_pair( self ):\n        graphene_name  = self.canonical_name\n        graphene_value = self.canonical_name\n        return ( graphene_name, graphene_value )\n\n    def graphene_description( self ):\n        if hasattr( self, \"description\" ):\n            return self.description\n        if hasattr( self, \"label\" ):\n            return self.label\n        return None\n\n    @classmethod\n    @cache\n    def graphene( cls, name=None, filter=None ):\n        name         = name or cls.__name__\n        objects      = cls.objects.filter( filter ) if filter else cls.objects.all\n        enum_items   = [ obj.graphene_pair() for obj in objects ]\n        descriptions = { obj.graphene_pair()[ 0 ]: obj.graphene_description() for obj in objects }\n\n        def description( enum_obj ):\n            return descriptions[ enum_obj.name ] if enum_obj else cls.__doc__\n\n        return graphene.Enum( name, enum_items, description=description )\n\nThen you can use Objects instead of Enums and still generate Graphene enums from them:\n\n    ColorEnum = Color.graphene()\n\n    class Foo( graphene.ObjectType ):\n        color = ColorEnum( required=True )\n        ...\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/odigity/py-objects/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-objects",
    "package_url": "https://pypi.org/project/py-objects/",
    "platform": null,
    "project_url": "https://pypi.org/project/py-objects/",
    "project_urls": {
      "Homepage": "https://github.com/odigity/py-objects/",
      "Repository": "https://github.com/odigity/py-objects/"
    },
    "release_url": "https://pypi.org/project/py-objects/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Better Than Enums",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17472260,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c85fc81b18bc010bac5546d1a431495eaf4545bd7012e5f60fcbf96d65f63c7",
          "md5": "9961c97b99bdc3ef666291b1d00021d0",
          "sha256": "e6b474b9d0d85bcf0bcb781675e572939302b1f99dc36ee04b73428927c7744a"
        },
        "downloads": -1,
        "filename": "py_objects-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9961c97b99bdc3ef666291b1d00021d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 1935,
        "upload_time": "2023-03-27T18:27:29",
        "upload_time_iso_8601": "2023-03-27T18:27:29.946546Z",
        "url": "https://files.pythonhosted.org/packages/4c/85/fc81b18bc010bac5546d1a431495eaf4545bd7012e5f60fcbf96d65f63c7/py_objects-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101b94e8b40e0dd3286609958996db31ae1e69177d069aae306994ec99cd2114",
          "md5": "6196bd430d41de6cff61f1661dc84c0b",
          "sha256": "90bab5d6919193a2fa6c90ca762c8e598f4386d31ef31dcba6c1e153534745fe"
        },
        "downloads": -1,
        "filename": "py_objects-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6196bd430d41de6cff61f1661dc84c0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 1117,
        "upload_time": "2023-03-27T18:27:31",
        "upload_time_iso_8601": "2023-03-27T18:27:31.672139Z",
        "url": "https://files.pythonhosted.org/packages/10/1b/94e8b40e0dd3286609958996db31ae1e69177d069aae306994ec99cd2114/py_objects-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c62eee77ad9fadc5c37f15809ea63540117bf2171b0b6f4d670e8176c4e94ecb",
          "md5": "25349929d577bc7e649614d0127717b6",
          "sha256": "d2256ce767a97e64ccc7415fb3146d019b350f8e9fa40667246f4c3470767279"
        },
        "downloads": -1,
        "filename": "py_objects-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25349929d577bc7e649614d0127717b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7032,
        "upload_time": "2023-03-28T01:58:28",
        "upload_time_iso_8601": "2023-03-28T01:58:28.850185Z",
        "url": "https://files.pythonhosted.org/packages/c6/2e/ee77ad9fadc5c37f15809ea63540117bf2171b0b6f4d670e8176c4e94ecb/py_objects-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0025d59ca53fc637dcdff015269e7fae97bbbcf97b42ea465b41b5f0bb12b5a",
          "md5": "c43ec5a25bc5d09ff64f567eb88e880f",
          "sha256": "0ab355246f3ad10ee98cc4bde42d81d5f4413ffd9658fa75c2340c9be2d02df0"
        },
        "downloads": -1,
        "filename": "py_objects-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c43ec5a25bc5d09ff64f567eb88e880f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5922,
        "upload_time": "2023-03-28T01:58:30",
        "upload_time_iso_8601": "2023-03-28T01:58:30.416849Z",
        "url": "https://files.pythonhosted.org/packages/e0/02/5d59ca53fc637dcdff015269e7fae97bbbcf97b42ea465b41b5f0bb12b5a/py_objects-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c62eee77ad9fadc5c37f15809ea63540117bf2171b0b6f4d670e8176c4e94ecb",
        "md5": "25349929d577bc7e649614d0127717b6",
        "sha256": "d2256ce767a97e64ccc7415fb3146d019b350f8e9fa40667246f4c3470767279"
      },
      "downloads": -1,
      "filename": "py_objects-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25349929d577bc7e649614d0127717b6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 7032,
      "upload_time": "2023-03-28T01:58:28",
      "upload_time_iso_8601": "2023-03-28T01:58:28.850185Z",
      "url": "https://files.pythonhosted.org/packages/c6/2e/ee77ad9fadc5c37f15809ea63540117bf2171b0b6f4d670e8176c4e94ecb/py_objects-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0025d59ca53fc637dcdff015269e7fae97bbbcf97b42ea465b41b5f0bb12b5a",
        "md5": "c43ec5a25bc5d09ff64f567eb88e880f",
        "sha256": "0ab355246f3ad10ee98cc4bde42d81d5f4413ffd9658fa75c2340c9be2d02df0"
      },
      "downloads": -1,
      "filename": "py_objects-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c43ec5a25bc5d09ff64f567eb88e880f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5922,
      "upload_time": "2023-03-28T01:58:30",
      "upload_time_iso_8601": "2023-03-28T01:58:30.416849Z",
      "url": "https://files.pythonhosted.org/packages/e0/02/5d59ca53fc637dcdff015269e7fae97bbbcf97b42ea465b41b5f0bb12b5a/py_objects-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}