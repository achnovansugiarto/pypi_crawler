{
  "info": {
    "author": "John Carter",
    "author_email": "jfcarter2358@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Pipeline Reader\n\n## About\n\n`pipeline-reader` is a package designed to make it easier to user Jenkinsfile-like pipeline files in Python projects. While JSON and YAML are generally sufficient for this task, there may be times where you want to execute code, which JSON and YAML are not well-suited for. In this case, pipeline-reader allows you to define stages containing Python code which are then run sequentially.\n\n## Examples\n\n### Writing a Pipeline\n\nA basic pipeline consists of a pipeline block containing stages as follows:\n```\npipeline {\n    stages {\n        stage('foo') {\n            print('do something')\n        }\n    }\n}\n```\nYou can then add an options block like so\n```\npipeline {\n    options {\n        \"foo1\": \"bar1\"\n        \"foo2\": \"bar2\"\n    }\n    stages {\n        stage('foo') {\n            print('do something')\n        }\n    }\n}\n```\nThese options will then be stored in a dictionary and made available via the Pipeline object that `pipeline-reader` returns (this object is also available to the pipeline itself at the `_pipeline` variable)\nYou can then access these options inside your pipeline script like so:\n```\npipeline {\n    options {\n        \"foo1\": \"bar1\"\n        \"foo2\": \"bar2\"\n    }\n    stages {\n        stage('foo') {\n            print(_pipeline.options)\n        }\n    }\n}\n```\nThere are also a group of \"protected\" options, in the sense that they have an effect on how the pipieline runs. The list of protected options is shown below:\n- `exit_on_failure`\n    - boolean\n    - If True, then pipeline exits on a failed stage, otherwise pipeline will continue running\nIn addition, the code context carries over between stages, so running\n```\npipeline {\n    stages {\n        stage('foo') {\n            variable = True\n        }\n        stage('bar') {\n            print(variable)\n        }\n    }\n}\n```\nwill output `True`.\nYou can also get a little bit fancy with the stages by utilizing a `when` block to control if it fires or not\n```\npipeline {\n    options {\n        \"foo\": \"bar\"\n    }\n    stages {\n        stage('foo') {\n            when {\n                _pipeline.options[\"foo\"] == \"bar\"\n            }\n            # This will run only if the \"foo\" option is set to \"bar\"\n        }\n    }\n}\n```\nIf you need to run specific code before your stage executes, you can use a `pre` block to make it more readable\n```\npipeline {\n    stages {\n        stage('foo') {\n            pre {\n                message = 'hello world'\n            }\n            # this will print \"hello world\"\n            print(message)\n        }\n    }\n}\n```\nYou can then control what happens after a stage through the use of a `post` block. `post` blocks support `always`, `success`, and `failure` sub-blocks with `always` being run first\n```\npipeline {\n    stages {\n        stage('foo') {\n            # if this succeeds then it will run the `always` block followed by the `success` block\n            post {\n                success {\n                    print('Success!')\n                }\n                failure {\n                    print('failure!')\n                }\n                always {\n                    print('Always!')\n                }\n            }\n        }\n    }\n}\n```\nTo help with processes that fail often, you can set a `retry` directive in your stage to tell the pipeline how many times you'll want that staged to be retried\n```\npipeline {\n    stages {\n        stage('foo') {\n            retry {5}\n            # this will retry 5 times after the inital try\n        }\n    }\n}\n```\nYou can also jump to another stage in any of the post blocks if you so desire with the `goto` directive\n```\npipeline {\n    stages {\n        stage('foo') {\n            # this stage will jump to another depending on success or failure\n            post {\n                success {\n                    goto {Success Stage}\n                }\n                failure {\n                    goto {Failure Stage}\n                }\n            }\n        }\n        stage('Success Stage') {\n            # this will be run on a success of the `foo` stage\n        }\n        stage('Failure Stage') {\n            # this will be run on a failure of the `foo` stage\n        }\n    }\n}\n```\nFinally, Python and C style comments are both supported inside the pipeline files.\n```\n# this will be ignored when the file is loaded in\npipeline {\n    stages {\n        // this will also be ignored\n        stage('foo') {\n            # even comments inside of stages are stripped out\n            print('do something')\n        }\n    }\n}\n```\n\n### Using `pipeline-reader` in an Application\nTo utilize `pipeline-reader`, you'll want to use something like what is shown below\n\n```Python\nimport pipeline_reader\n\n# this will load your pipeline\nwith open('filename.pipeline') as f:\n    pipeline = pipeline_reader.load(f)\n\n# this will execute your pipeline\npipeline_reader.run(pipeline, globals(), locals())\n\n```\n## To Do\n\n- [x] Parse pipeline file\n- [x] Run loaded pipelines\n- [x] Pre-stage\n- [x] Post-stage\n- [x] When-condition\n- [x] Catch stage success\n- [x] Catch stage failure\n- [x] Goto directive\n- [x] Retry directive\n- [ ] Allow loading of arbitrary block types as plugins\n\n## Contact\n\nIf you have any questions or concerns, please reach out to me (John Carter) at jfcarter2358@gmail.com\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jfcarter2358/pipeline-reader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipeline-reader",
    "package_url": "https://pypi.org/project/pipeline-reader/",
    "platform": "",
    "project_url": "https://pypi.org/project/pipeline-reader/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jfcarter2358/pipeline-reader/issues",
      "Homepage": "https://github.com/jfcarter2358/pipeline-reader"
    },
    "release_url": "https://pypi.org/project/pipeline-reader/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package for reading Jenkinsfile-like pipeline files",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12832281,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcb5a9821afcbe510979e9e178860e8c52d8d50a7091cb15d0cd2e1c7d9b67d0",
          "md5": "48a2ac49c043e35af473158d0ca0b527",
          "sha256": "2b59319d70a4c11fc2dc36c46906fa86d3dba186b929107f625eb640b28b8c6e"
        },
        "downloads": -1,
        "filename": "pipeline_reader-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48a2ac49c043e35af473158d0ca0b527",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5161,
        "upload_time": "2021-07-27T01:22:10",
        "upload_time_iso_8601": "2021-07-27T01:22:10.260346Z",
        "url": "https://files.pythonhosted.org/packages/bc/b5/a9821afcbe510979e9e178860e8c52d8d50a7091cb15d0cd2e1c7d9b67d0/pipeline_reader-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "508be736ed902f7b87eece31ad3700e3bb9c27124cd4d90f2c2331eb99bb0139",
          "md5": "1aad76a75d88132e8653ba0e8b871ab0",
          "sha256": "57cad505cfb3039dfe6eb38ce6264c694576c29cac404490aceb5010d04c45bb"
        },
        "downloads": -1,
        "filename": "pipeline-reader-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1aad76a75d88132e8653ba0e8b871ab0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3492,
        "upload_time": "2021-07-27T01:22:11",
        "upload_time_iso_8601": "2021-07-27T01:22:11.425114Z",
        "url": "https://files.pythonhosted.org/packages/50/8b/e736ed902f7b87eece31ad3700e3bb9c27124cd4d90f2c2331eb99bb0139/pipeline-reader-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a76d2d39f1c12256284e6009750301dcd33cade552694764df77c9cb58befcd5",
          "md5": "ceed642df52d954ee0036eeda185cb9e",
          "sha256": "9a8ba8c2095e99492b8d187fdb4e80a5a7165ccfbcf202de212aebec478b5dd3"
        },
        "downloads": -1,
        "filename": "pipeline_reader-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ceed642df52d954ee0036eeda185cb9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7262,
        "upload_time": "2021-11-03T19:35:31",
        "upload_time_iso_8601": "2021-11-03T19:35:31.328132Z",
        "url": "https://files.pythonhosted.org/packages/a7/6d/2d39f1c12256284e6009750301dcd33cade552694764df77c9cb58befcd5/pipeline_reader-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a7513623a95797cfc51600cd38eb2b85caf1d25c57bbceae104d5dd75160270",
          "md5": "14c597a46dc72cc7a1f9cad0bbee1bd2",
          "sha256": "078f2ea6cc05f167924d91fd618acda25e359ece7240f76f1a062d89eb453135"
        },
        "downloads": -1,
        "filename": "pipeline-reader-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "14c597a46dc72cc7a1f9cad0bbee1bd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8112,
        "upload_time": "2021-11-03T19:35:32",
        "upload_time_iso_8601": "2021-11-03T19:35:32.527596Z",
        "url": "https://files.pythonhosted.org/packages/2a/75/13623a95797cfc51600cd38eb2b85caf1d25c57bbceae104d5dd75160270/pipeline-reader-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96285a92590a4ad4ce74834961abe8c267e0d5c5ae4d693f969e2c157ecc137e",
          "md5": "c465dd7327f0c66f98117d2a859ada4b",
          "sha256": "fd25edcbb605ed13795132938bf3c16977d6d690dbe6d59a7b39e8f66eaf7fca"
        },
        "downloads": -1,
        "filename": "pipeline_reader-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c465dd7327f0c66f98117d2a859ada4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7262,
        "upload_time": "2022-02-08T22:06:49",
        "upload_time_iso_8601": "2022-02-08T22:06:49.501211Z",
        "url": "https://files.pythonhosted.org/packages/96/28/5a92590a4ad4ce74834961abe8c267e0d5c5ae4d693f969e2c157ecc137e/pipeline_reader-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37f2e5c975d92f5ea96dc223bb25d248e9b049f436800b7b70269290f5812aac",
          "md5": "fc9f4c0c03ded2310d6b705135a0306c",
          "sha256": "f59df0b2d2438af466db52100ef13a45ebc7a0ab216957ff0f8916d78f9d6698"
        },
        "downloads": -1,
        "filename": "pipeline-reader-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fc9f4c0c03ded2310d6b705135a0306c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8116,
        "upload_time": "2022-02-08T22:06:51",
        "upload_time_iso_8601": "2022-02-08T22:06:51.421303Z",
        "url": "https://files.pythonhosted.org/packages/37/f2/e5c975d92f5ea96dc223bb25d248e9b049f436800b7b70269290f5812aac/pipeline-reader-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c24c67e9a9b64a670ddf7fd7f443d0c56b4746948f31c3a760db26c505e10783",
          "md5": "d531bfc995e59a3531d8f938146719b1",
          "sha256": "ab8a9f840245c7cfcbda01ad99b814fb9730304b5cadacbd5d373f20a4f3d2a9"
        },
        "downloads": -1,
        "filename": "pipeline_reader-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d531bfc995e59a3531d8f938146719b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7274,
        "upload_time": "2022-02-08T22:55:39",
        "upload_time_iso_8601": "2022-02-08T22:55:39.822386Z",
        "url": "https://files.pythonhosted.org/packages/c2/4c/67e9a9b64a670ddf7fd7f443d0c56b4746948f31c3a760db26c505e10783/pipeline_reader-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c59cef682e5b5e3d98585519238e246155127bb56c96249a01f8a2abac69609",
          "md5": "2e42a8b33240f43bbaa6905214b59437",
          "sha256": "a815c2d75eb4673d18048028578e51ea4d5206107f64a3ed8365352d368b5bf9"
        },
        "downloads": -1,
        "filename": "pipeline-reader-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2e42a8b33240f43bbaa6905214b59437",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8122,
        "upload_time": "2022-02-08T22:55:41",
        "upload_time_iso_8601": "2022-02-08T22:55:41.133016Z",
        "url": "https://files.pythonhosted.org/packages/9c/59/cef682e5b5e3d98585519238e246155127bb56c96249a01f8a2abac69609/pipeline-reader-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c24c67e9a9b64a670ddf7fd7f443d0c56b4746948f31c3a760db26c505e10783",
        "md5": "d531bfc995e59a3531d8f938146719b1",
        "sha256": "ab8a9f840245c7cfcbda01ad99b814fb9730304b5cadacbd5d373f20a4f3d2a9"
      },
      "downloads": -1,
      "filename": "pipeline_reader-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d531bfc995e59a3531d8f938146719b1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7274,
      "upload_time": "2022-02-08T22:55:39",
      "upload_time_iso_8601": "2022-02-08T22:55:39.822386Z",
      "url": "https://files.pythonhosted.org/packages/c2/4c/67e9a9b64a670ddf7fd7f443d0c56b4746948f31c3a760db26c505e10783/pipeline_reader-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c59cef682e5b5e3d98585519238e246155127bb56c96249a01f8a2abac69609",
        "md5": "2e42a8b33240f43bbaa6905214b59437",
        "sha256": "a815c2d75eb4673d18048028578e51ea4d5206107f64a3ed8365352d368b5bf9"
      },
      "downloads": -1,
      "filename": "pipeline-reader-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "2e42a8b33240f43bbaa6905214b59437",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8122,
      "upload_time": "2022-02-08T22:55:41",
      "upload_time_iso_8601": "2022-02-08T22:55:41.133016Z",
      "url": "https://files.pythonhosted.org/packages/9c/59/cef682e5b5e3d98585519238e246155127bb56c96249a01f8a2abac69609/pipeline-reader-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}