{
  "info": {
    "author": "Flip Hess",
    "author_email": "flip@fliphess.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Json HTTP to MQTT utility.\n\nJson2mqtt is a little python daemon that retrieves data\nfrom json api's and sends selected fields to an MQTT broker.\n\nIt can be used to retrieve data from any http api that returns json.\n\nWrite a (bunch of) schema file(s),\nfeed it to the daemon by files or over mqtt\nand every interval you receive the returns on a mqtt topic.\n\nUsing the schemas you can give fine-grained instructions to the daemon\nwhich elements you want to publish at which interval\n\n\n## Timers\n\nFor each schema, a new timer is started in its own thread.\n\nThey remain in sleep state until the next interval,\nand keep doing this until their count value is reached (or indefinitely).\n\nWhen a timer triggers a new data retrieval,\nthe requested fields and some metrics about the request\nare sent to the mqtt broker.\n\n## Schemas\n\nAll schemas, in the `schemas_dir` directory, as configured in `settings.yaml`\nare loaded at start-up unless explicitly disabled\nsetting `\"enabled\": false` in the schema definition.\n\nThere are some predefined schemas that can be used\nin the `schemas` directory in this repository,\nthat you can use to poll a rooted Toon.\n\nA schema is a json definition containing instructions\nfor the daemon on which fields to publish to MQTT\n\nYou can write your own schemas and feed them\nto this service as a file or over MQTT.\n\n\n### Schema required fields\n\nA schema consists of 4 main (required) elements:\n\n- `name`     - The name of the schema\n- `url` -    - The url to retrieve json data from\n\n- `interval` - The time in seconds between retrievals\n\n- `fields`   - A list of dictionaries each containing a path and a type element defining fields that\n               are to be expected in the retrieved json. (more info below)\n\n\n### Additional/Optional schema elements\n\nAdditional optional elements are:\n\n- `topic`    - Override the topic where to send the data to.\n               (The topic is appended with the value of the `name` of the schema)\n\n- `count`    - How many times the crawl should be performed. Default is `-1`,\n               which keeps repeating the request until the timer is stopped,\n               waiting to be started again\n\n- `timeout`  - The timeout for the http requests (Default is 10s)\n\n- `headers`  - A list of key value pairs with additional headers (can be used for host, auth, user-agent etc)\n\n- `enabled`  - Explicitly enable or disable the schema at startup (The schema needs to exist on disk to be loaded at startup)\n\n\n### Fields\n\nA `field` element consists of 2 required fields:\n\n- `path`   - The jmespath of the value to send to mqtt\n- `type`   - The type of data in this field\n\n\nOptional fields are:\n\n- `cast`   - Cast the current `type` to another type, useful for \"number\" or \"true\" and other returned strings.\n             Allowed values are equal to the `type` element, but with a bit of common sense, and a bit of python added.\n\nThe types available:\n\n- `String`\n- `Integer`\n- `Float`\n- `Boolean`\n- `None`\n- `List`\n- `Dictionary`\n\n\n### Schema example\n\nExample: retrieve the module version data from the toon and send over MQTT\n\n```json\n{\n    \"name\": \"module_version\",\n    \"url\": \"http:///toon.local/happ_thermstat?action=getModuleVersion\",\n    \"interval\": 3600,\n    \"timeout\": 30,\n    \"headers\": [\n        {\n            \"key\": \"User-Agent\",\n            \"value\": \"Json2MQTT\"\n        },\n        {\n            \"key\": \"Authorization\",\n            \"value\": \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\"\n        }\n    ],\n    \"fields\": {\n        \"mmb\": {\n            \"type\": \"String\",\n            \"cast\": \"Boolean\",\n            \"path\": \"mmb\"\n        },\n        \"version\": {\n            \"type\": \"String\",\n            \"path\": \"version\"\n        }\n    }\n}\n```\n\nThe topics used to publish to in this example are:\n- `home/json2mqtt/module_version/mmb`\n- `home/json2mqtt/module_version/version`\n\nOr you can override the topics using the `topic` field.\n\n\n## Install\n\n### Clone the repo\n\n```shell\ngit clone https://github.com/fliphess/json2mqtt.git && cd json2mqtt\n```\n\n\n### Install in a virtualenv\n\n#### Create venv\n\nCreate a virtualenv and install `json2mqtt` and its requirements:\n\n```shell\npython3 -m venv venv\nsource venv/bin/activate\n\npip install  .\n```\n\n#### Create a config\n\nA config file is created on first run if nonexistent:\n\n```shell\njson2mqtt --settings settings.yaml --init\n\nvim settings.yaml\n```\n\n### Run json2mqtt\n\n```shell\njson2mqtt --config settings -vvv\n```\n\n\n## Install using docker\n\n### Build the container:\n\n```shell\ndocker build -t json2mqtt .\n```\n\n### Create a config file\n\n```shell\ndocker run \\\n  -ti \\\n  -v \"/tmp:/cfg\" \\\n  --rm json2mqtt \\\n  --config /cfg/settings.yaml\n\nmv /tmp/settings.yaml .\nvim settings.yaml\n```\n\n### Run\n\n```shell\ndocker run \\\n\t--rm \\\n\t-ti \\\n\t-v \"$(pwd)/settings.yaml:/opt/json2mqtt/settings.yaml\" \\\n        -v \"$(pwd)/schemas:/opt/json2mqtt/schemas\" \\\n\tjson2mqtt --config settings.yaml -vvv\n```\n\n\n## The `settings.yaml` file\n\nThe config file will be created on first run if it does not exist.\nIt will fill up the required fields with the default values.\nThis will not suffice to start the daemon, as you need to configure your broker first.\n\nA full configuration file contains:\n\n```yaml\nmqtt_host: \"some.broker\"\nmqtt_port: 1883\n\nmqtt_username: \"username\"\nmqtt_password: \"password\"\n\nmqtt_topic: home/toon2mqtt\n\nmqtt_ssl: true\nmqtt_cert: \"/etc/ssl/cert.pem\"\n\nschema_dir: ./schemas\n```\n\n\n## Controlling the daemon\n\nYou can control the daemon over MQTT.\n\nYou can start and stop timers, add, remove and reload schemas.\n\n\n## MQTT Topics:\n\n### Publishing topics:\n\nThe topics to which the retrieved data and response metrics are send:\n```\nhome/json2mqtt/<schema name>/<key>               # Retrieved json keys from api\nhome/json2mqtt/<schema name>/request/success     # If the last request succeeded\nhome/json2mqtt/<schema name>/request/status_code # The status code of the last request\nhome/json2mqtt/<schema name>/request/reason      # The reason of the last request\nhome/json2mqtt/<schema name>/request/url         # The full url of the request\n```\n\n### Command topics\n\nThe topics to publish to, to create, list and manipulate the schemas\n\n```\nhome/json2mqtt/command/schema/add                # Add a json schema from the mqtt payload\n                                                 # Input: a json schema\n\nhome/json2mqtt/command/schema/add_file           # Add a json schema from a file that is present on disk\n                                                 # Input: a filename of a file in the schema_dir\n\nhome/json2mqtt/command/schema/remove             # Remove/Disable a schema\n                                                 # Input: the name of the schema to remove (See: `schema/list`)\n\nhome/json2mqtt/command/schema/list               # List all json schemas\n                                                 # No input required, an empty string or a 0 suffices.\n\nhome/json2mqtt/command/schema/import             # Import all schemas from disk\n                                                 # No input required, an empty string or a 0 suffices.\n\nhome/json2mqtt/command/schema/dump               # Write all schemas to disk\n                                                 # No input required, an empty string or a 0 suffices.\n```\n\nSchemas can be manipulated, loaded and written to disk.\nThey are used by the scheduler, but not automatically renewed.\nTo update the timers that use the schemas, you additionally need to reload the scheduler task(s)\n\n### Timer topics\n\n\nTimers can be controlled separately from the schemas that are used to instruct what to crawl and how often.\n```\nhome/json2mqtt/command/scheduler/list            # List all timers\n                                                 # No input required, an empty string or a 0 suffices.\n\nhome/json2mqtt/command/scheduler/stop            # Stop all timers\n                                                 # No input required, an empty string or a 0 suffices.\n\nhome/json2mqtt/command/scheduler/start           # Start all (not running) timers\n                                                 # No input required, an empty string or a 0 suffices.\n\nhome/json2mqtt/command/scheduler/add_timer       # Add a timer using a json schema, do not save anything to schemas, \n                                                 # just start the timer (single use, will be gone after a restart)\n\nhome/json2mqtt/command/scheduler/remove_timer    # Remove a timer\nhome/json2mqtt/command/scheduler/start_timer     # Start a stopped timer\nhome/json2mqtt/command/scheduler/pause_timer     # Stop a running timer\n```\n\nAll commands return their output to `home/json2mqtt/talkback`\n\n\n## Known issues\n\n### Casting to bool\n\nCasting string \"1\" and \"0\" values to a boolean is tricky:\n\n```\nIn [1]: bool(\"0\")\nOut[1]: True\n```\n\nInstead, don't do a cast at all and use  the `1` and `0` strings directly.\n\n### Dotted fields\n\nDue to the way [jmespath for python](https://pypi.org/project/jmespath/) works, keys containing a dot,\nneed to be contained by escaped double quotes:\n\n```\n{\n  \"fields\": {\n      \"electricity_delivered_lt_flow\": {\n        \"type\": \"String\",\n        \"path\": \"\\\"dev_2.6\\\".CurrentElectricityFlow\"\n      },\n  }\n}\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fliphess/json2mqtt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "json2mqtt",
    "package_url": "https://pypi.org/project/json2mqtt/",
    "platform": "",
    "project_url": "https://pypi.org/project/json2mqtt/",
    "project_urls": {
      "Homepage": "https://github.com/fliphess/json2mqtt"
    },
    "release_url": "https://pypi.org/project/json2mqtt/0.0.2/",
    "requires_dist": [
      "jmespath",
      "jsonschema",
      "multitimer",
      "paho-mqtt",
      "pid",
      "requests",
      "rfc3986-validator",
      "ruamel.yaml",
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "pyproject-flake8 ; extra == \"test\"",
      "mock ; extra == \"test\""
    ],
    "requires_python": ">=3.7",
    "summary": "Json2MQTT: A simple python daemon that crawls json apis and sends a selection of the data to a MQTT broker",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10033115,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10783dff4e7577f48bb8f5b41a84102e4224de880209178fa08f2860b7075bca",
          "md5": "a549782e0a600688a597421ca0002381",
          "sha256": "3e0adce3e2a2082885ff915110ac7fcc1f1964677229f51896a00de8dae40d77"
        },
        "downloads": -1,
        "filename": "json2mqtt-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a549782e0a600688a597421ca0002381",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 12879,
        "upload_time": "2021-04-11T17:56:28",
        "upload_time_iso_8601": "2021-04-11T17:56:28.611885Z",
        "url": "https://files.pythonhosted.org/packages/10/78/3dff4e7577f48bb8f5b41a84102e4224de880209178fa08f2860b7075bca/json2mqtt-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2f11925d0e99ae10d0f6c5e3e8b3fd7c605bc0a7a433434404e922a21a01294",
          "md5": "aa6db0f9f46ee036aef1ab6b78d7136f",
          "sha256": "5d0cea50761c35e4b05a9f517fb7e2e65a548644031cc42fae690cebce21b783"
        },
        "downloads": -1,
        "filename": "json2mqtt-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aa6db0f9f46ee036aef1ab6b78d7136f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15852,
        "upload_time": "2021-04-11T17:56:29",
        "upload_time_iso_8601": "2021-04-11T17:56:29.629147Z",
        "url": "https://files.pythonhosted.org/packages/c2/f1/1925d0e99ae10d0f6c5e3e8b3fd7c605bc0a7a433434404e922a21a01294/json2mqtt-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "10783dff4e7577f48bb8f5b41a84102e4224de880209178fa08f2860b7075bca",
        "md5": "a549782e0a600688a597421ca0002381",
        "sha256": "3e0adce3e2a2082885ff915110ac7fcc1f1964677229f51896a00de8dae40d77"
      },
      "downloads": -1,
      "filename": "json2mqtt-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a549782e0a600688a597421ca0002381",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 12879,
      "upload_time": "2021-04-11T17:56:28",
      "upload_time_iso_8601": "2021-04-11T17:56:28.611885Z",
      "url": "https://files.pythonhosted.org/packages/10/78/3dff4e7577f48bb8f5b41a84102e4224de880209178fa08f2860b7075bca/json2mqtt-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2f11925d0e99ae10d0f6c5e3e8b3fd7c605bc0a7a433434404e922a21a01294",
        "md5": "aa6db0f9f46ee036aef1ab6b78d7136f",
        "sha256": "5d0cea50761c35e4b05a9f517fb7e2e65a548644031cc42fae690cebce21b783"
      },
      "downloads": -1,
      "filename": "json2mqtt-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aa6db0f9f46ee036aef1ab6b78d7136f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15852,
      "upload_time": "2021-04-11T17:56:29",
      "upload_time_iso_8601": "2021-04-11T17:56:29.629147Z",
      "url": "https://files.pythonhosted.org/packages/c2/f1/1925d0e99ae10d0f6c5e3e8b3fd7c605bc0a7a433434404e922a21a01294/json2mqtt-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}