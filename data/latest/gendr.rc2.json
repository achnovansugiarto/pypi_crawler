{
  "info": {
    "author": "Felix Petersen",
    "author_email": "ads0475@felix-petersen.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# GenDR - The Generalized Differentiable Renderer\n\n![gendr_logo](gendr_logo.png)\n\nOfficial implementation for our CVPR 2022 Paper \"GenDR: A Generalized Differentiable Renderer\".\n\nPaper @ [ArXiv](https://arxiv.org/abs/2204.13845),\nVideo @ [Youtube](https://youtu.be/p-ZCcUWzriE).\n\n## 💻 Installation\n\n`gendr` can be installed via pip from PyPI with\n```shell\npip install gendr\n```\n> ⚠️ Note that `gendr` requires CUDA, the CUDA Toolkit (for compilation), and `torch>=1.9.0` (matching the CUDA version).\n\nAlternatively, GenDR may be installed from source, e.g., in a virtual environment like\n```shell\nvirtualenv -p python3 .env1\n. .env1/bin/activate\npip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\npip install .\n```\nMake sure that the CUDA version of PyTorch (e.g., `cu111` for CUDA 11.1) matches the locally installed version.\nHowever, on some machines, compiling works only with specific subversions that may be unequal to the local subversion, \nso a potential quick fix is trying different PyTorch version and CUDA subversion combinations.\n\n## 👩‍💻 Documentation\n\nA differentiable renderer may be defined as follows\n\n```python\nimport gendr\n\ndiff_renderer = gendr.GenDR(\n    image_size=256,\n    dist_func='uniform',\n    dist_scale=0.01,\n    dist_squared=False,\n    aggr_alpha_func='probabilistic',\n    aggr_rgb_func='hard',\n)\n```\n\nIn the following, we provide the entire set of arguments of `GenDR`.\nThe most important parameters are marked in **bold**.\nFor the essential parameters `dist_func` and `aggr_alpha_func`, we give a set of options. \nFor a reference, see [the paper](https://arxiv.org/abs/2204.13845).\n\n* `image_size` **the size of the rendered image** (default: 256)\n* `background_color` (default: [0, 0, 0])\n* `anti_aliasing` render it at 2x the resolution and average to reduce aliasing (default: False)\n\n* `dist_func` **the distribution used for the differentiable occlusion test** (default: uniform)\n  * `hard` hard, non-differentiable rendering, Dirac delta distribution, Heaviside function (alias `heaviside`)\n  * `uniform` uniform distribution\n  * `cubic_hermite` Cubic-Hermite sigmoid function\n  * `wigner_semicircle` Wigner Semicircle distribution\n  * `gaussian` Gaussian Distribution\n  * `laplace` Laplace Distribution\n  * `logistic` logistic Distribution\n  * `gudermannian` Gudermannian function, hyperbolic secant distribution (alias `hyperbolic_secant`)\n  * `cauchy` Cauchy distribution\n  * `reciprocal` reciprocal sigmoid function\n  * `gumbel_max` Gumbel-max distribution\n  * `gumbel_min` Gumbel-min distribution\n  * `exponential` exponential distribution\n  * `exponential_rev` exponential distribution (reversed / mirrored)\n  * `gamma` gamma distribution\n  * `gamma_rev` gamma distribution (reversed / mirrored)\n  * `levy` Levy distribution\n  * `levy_rev` Levy distribution (reversed / mirrored)\n* `dist_scale` **the scale parameter of the distribution, tau in the paper** (default: 1e-2)\n* `dist_squared` optionally, use the square-root distribution of `dist_func` (default: False)\n* `dist_shape` for some distributions, we need a shape parameter (default: None)\n* `dist_shift` for some distributions, we need an optional shift parameter (default: None or 0)\n* `dist_eps` pixels further away than `dist_scale*dist_eps` are ignored for performance reasons (default: 1e4)\n\n* `aggr_alpha_func` **the t-conorm used to aggregate occlusion values** (default: probabilistic)\n  * `hard` to be used with `dist_func='hard'`\n  * `max` maximum T-conorm\n  * `probabilistic` probabilistic T-conorm\n  * `einstein` Einstein sum T-conorm\n  * `hamacher` Hamacher T-conorm\n  * `frank` Frank T-conorm\n  * `yager` Yager T-conorm\n  * `aczel_alsina` Aczel-Alsina T-conorm\n  * `dombi` Dombi T-conorm\n  * `schweizer_sklar` Schweizer-Sklar T-conorm\n* `aggr_alpha_t_conorm_p` for some t-conorms, we need a shape parameter (default: None)\n\n* `aggr_rgb_func` (default: softmax)\n* `aggr_rgb_eps` (default: 1e-3)\n* `aggr_rgb_gamma` (default: 1e-3)\n\n* `near` value for the viewing frustum (default: 1)\n* `far` value for the viewing frustum (default: 100)\n* `double_side` render all faces from both sides (default: False)\n* `texture_type` type of texture sampling (default: surface; options: surface, vertex)\n\n\n## 🧪 Experiments\n\n### 🐼 Shape Optimization (`opt_shape.py`)\n\n```shell\npython experiments/opt_shape.py -sq --gif\n```\n\n### 📽 Camera Pose Optimization (`opt_camera.py`)\n\n```shell\npython experiments/opt_camera.py -sq --gif\n```\n\n### ✈️ Single-View 3D Reconstruction (`train_reconstruction.py`)\n\nOptimal default parameters for `--dist_scale` are automatically used in the script for the set of distributions\nand t-conorms that are benchmarked on this task in the paper.\n\n```shell\npython experiments/train_reconstruction.py --distribution uniform --t_conorm probabilistic\n```\n\n## 📖 Citing\n\n```bibtex\n@inproceedings{petersen2022gendr,\n  title={{GenDR: A Generalized Differentiable Renderer}},\n  author={Petersen, Felix and Goldluecke, Bastian and Borgelt, Christian and Deussen, Oliver},\n  booktitle={IEEE/CVF International Conference on Computer Vision and Pattern Recognition (CVPR)},\n  year={2022}\n}\n```\n\n## License\n\n`gendr` is released under the MIT license. See [LICENSE](LICENSE) for additional details about it.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Felix-Petersen/gendr",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gendr",
    "package_url": "https://pypi.org/project/gendr/",
    "platform": null,
    "project_url": "https://pypi.org/project/gendr/",
    "project_urls": {
      "Homepage": "https://github.com/Felix-Petersen/gendr"
    },
    "release_url": "https://pypi.org/project/gendr/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "GenDR - The Generalized Differentiable Renderer",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14114712,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34cefdb0d551a3cf2837d616b048f15285c80b02919ca1d079d9cc1709cf39d8",
          "md5": "770b698a3786722370da8515ba7285ca",
          "sha256": "9c90d1e31d4e3cbdb03334c67e0f22efdf3c8cd52ca9985fc4f13cc10d28b7a8"
        },
        "downloads": -1,
        "filename": "gendr-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "770b698a3786722370da8515ba7285ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 1259,
        "upload_time": "2021-12-13T16:53:18",
        "upload_time_iso_8601": "2021-12-13T16:53:18.810885Z",
        "url": "https://files.pythonhosted.org/packages/34/ce/fdb0d551a3cf2837d616b048f15285c80b02919ca1d079d9cc1709cf39d8/gendr-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d978e3475f7460bd97dbc5aab77ea551069aca7df966f08ffe9131ef08f27c9",
          "md5": "7f794671f0256aa02cb50f5c8b0aa73c",
          "sha256": "086329fea5933a88da381404c1ff9a6d3c2d0d15e505f061f97a98d710712976"
        },
        "downloads": -1,
        "filename": "gendr-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f794671f0256aa02cb50f5c8b0aa73c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30336,
        "upload_time": "2022-06-13T12:09:44",
        "upload_time_iso_8601": "2022-06-13T12:09:44.461945Z",
        "url": "https://files.pythonhosted.org/packages/1d/97/8e3475f7460bd97dbc5aab77ea551069aca7df966f08ffe9131ef08f27c9/gendr-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d978e3475f7460bd97dbc5aab77ea551069aca7df966f08ffe9131ef08f27c9",
        "md5": "7f794671f0256aa02cb50f5c8b0aa73c",
        "sha256": "086329fea5933a88da381404c1ff9a6d3c2d0d15e505f061f97a98d710712976"
      },
      "downloads": -1,
      "filename": "gendr-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7f794671f0256aa02cb50f5c8b0aa73c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30336,
      "upload_time": "2022-06-13T12:09:44",
      "upload_time_iso_8601": "2022-06-13T12:09:44.461945Z",
      "url": "https://files.pythonhosted.org/packages/1d/97/8e3475f7460bd97dbc5aab77ea551069aca7df966f08ffe9131ef08f27c9/gendr-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}