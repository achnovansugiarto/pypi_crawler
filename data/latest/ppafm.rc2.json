{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# Probe Particle Model (PPM)\n\nSimple and efficient **simulation software for high-resolution atomic force microscopy** (**HR-AFM**) and other scanning probe microscopy (SPM) techniques with sub-molecular resolution (STM, IETS, TERS). It simulates deflection of the particle attached to the tip (typically CO molecule, but also e.g. Xe, Cl-, H2O and others).\n\n### Further information\n- Publications: https://github.com/Probe-Particle/ProbeParticleModel#notable-publications-using-probe-particle-model\n- Wiki: https://github.com/Probe-Particle/ProbeParticleModel/wiki\n- API documentation: https://probeparticlemodel.readthedocs.io/en/main\n\n## Flavors of PPM\n\nSince 2014 PPM developed into the toolbox of various methodologies adjusted for a particular use case. \n\n1. **CPU version:** - Original implementation using Python & C/C++. It can simulate a typical AFM experiment (3D stack of AFM images) in ~1 minute. It is the base version for the development of new features and methodology. All available simulation models are implemented in this version, including:\n   1. **Point charge electrostatics + Lennard-Jones:** Original fully classical implementation allows the user to set up calculation without any ab-initio input simply by specifying atomic positions, types and charges.\n   2. **Hartree-potential electrostatics + Lennard-Jones:** Electrostatics is considerably improved by using Hartree potential from DFT calculation (e.g. LOCPOT from VASP) and using the Quadrupole model for CO-tip. We found this crucial to properly simulate polar molecules (e.g. H2O clusters, carboxylic acids, PTCDA) which exhibit strong electrostatic distortions of AFM images. Thanks to implementation using fast Fourier transform (FFT) this improvement does not increase the computational time (still ~1 minute), as long as the input electrostatic field is accessible.\n   3. **Hartree-potential electrostatics + Density overlap:** Further accuracy improvement is achieved when Pauli repulsion between electron shells of atoms is modeled by the overlap between electron density of tip and sample. This repulsive term replaces the repulsive part of Lennard-Jones while the attractive part (C6) remains. This modification considerably improves especially simulation of molecules with electron pairs (-NH-, -OH, =O group), triple bonds and other strongly concentrated electrons. Calculation of the overlap repulsive potential is again accelerated by FFT to achieve minimal computational overhead (2-3 minutes) as long as input densities of tip and sample are available.\n2. **GPU version:** - Version specially designed for generation of training data for machine learning. Implementation using `pyOpenCL` can parallelize the evaluation of forcefield and relaxation of probe-particle positions over hundreds or thousands of stream-processors of the graphical accelerator. Further speed-up is achieved by using hardware accelerated trilinear interpolation of 3D textures available in most GPUs. This allows simulating 10-100 AFM experiments per second on consumer-grade desktop GPU.\n   * GPU version is designed to work in collaboration with machine-learning software for AFM (https://github.com/SINGROUP/ASD-AFM) and use various generators of molecular geometry.    \n3. **GUI @ GPU** - The speed of GPU implementation also allows to make interactive GUI where AFM images of molecules can be updated on the fly (<<0.1s) on a common laptop computer while the user is editing molecular geometry or parameters of the tip. This provides an invaluable tool especially to experimentalists trying to identify and interpret the structure and configuration of molecules in experiments on-the-fly while running the experiment. \n\n#### Other branches\n\n* **master_backup** - Old `master` branch was recently significantly updated and named `main`. For users who miss the old master branch, we provided a backup copy. However, this version is very old and its use is discouraged. If you miss some functionality or are not satisfied with the behavior of current `main` branch please let us know by creating an *issue*.\n* **PhotonMap** - implements the latest developments concerning sub-molecular scanning probe combined with Raman spectroscopy (TERS)y and fluorescent spectroscopy (LSTM).\n* **complex_tip** - Modification of probe-particle model with 2 particles allows a better fit to experimental results at the cost of additional fitting parameters. \n\n## Installation & running examples\n\nAll development and testing were done on **linux** OS (mostly ubuntu). For the windows version, `docker` version will be prepared soon. In the meantime - several people successfully used probe-particle on windows using [mingw](https://www.mingw-w64.org/).\n\n#### Install & run CPU version\n\n**Requirements:** Python3 (numpy,matplotlib) & C/C++ compiler (g++,make)\n\n##### First run: Graphene with point-charges\n 1. clone the repository: `clone https://github.com/Probe-Particle/ProbeParticleModel.git` \n 2. compile the C/C++ modules\n    * `cd ProbeParticleModel/Graphene`\n    * `make`\n 3. Navigate to examples directory `cd ProbeParticleModel/examples/Graphene`this example uses simple (Point-charges + Lennard-Jones)\n 4. run the example `./run.sh`\n 5. output directory `/examples/Graphene/Q-0.05K0.50/Amp2.0` should contain simulated images with tip charge -0.05e, stiffness 0.5N/m and ossicaltion amplitude 2.0A.\n\n*NOTE:* Python package is designed to automatically recompile the C/C++ automatically, which is convenient for development, so explicit compilation in step #2 maybe not be necessary. see e.g. `cpp_utils.make(\"PP\")` in `ppafm/core.py`\n\n##### Example 2: PTCDA with Hartree potential\n\n1. navigate to `ProbeParticleModel/examples/PTCDA_Hartree`\n2. run the example `./run.sh`\n   \n*NOTE:* Notice that the script `run.sh` downloads and unpack LOCPOT file:\n`wget --no-check-certificate \"https://www.dropbox.com/s/18eg89l89npll8x/LOCPOT.xsf.zip\"`\n`unzip LOCPOT.xsf.zip`\nthis is a large 3D volumetric file which contains Hartree electrostatic potential (in this example computed by VASP) which have to be provided.\n\n##### Example 3: Pyridine with Density-overlap\n\n1. navigate to `ProbeParticleModel/examples/pyridineDensOverlap`\n2. run the example `./run.sh`\n\n*NOTE:* Notice that the script `run.sh` downloads and unpacks files `CHGCAR.xsf` & `LOCPOT.xsf` and places them in subdirectories `sample` and `tip`. These are electron density and Hartree potential which need to be provided from DFT calculation (this time from VASP).\n\n#### Install & run GPU GUI\n\nInstall prerequisites (Ubuntu):\n```sh\nsudo apt install git python3-pip python3-pyqt5\npip install matplotlib numpy pyopencl reikna ase\n```\n\nAdditionally an OpenCL Installable Client Driver (ICD) for your compute device is required:\n* Nvidia GPU: comes with the standard Nvidia driver (nvidia-driver-xxx)\n* AMD GPU: `sudo apt install mesa-opencl-icd`\n* Intel HD Graphics: `sudo apt install intel-opencl-icd`\n* CPU: `sudo apt install pocl-opencl-icd`\n\nRun the GUI application:\n```sh\n./ppm-gui\n```\n  \n###### Usage:\n* Open a file by clicking `Open File...` at the bottom or provide an input file as a command line argument using the `-i` or `--input` option. The input file can be a .xyz geometry file (possibly with point charges*), a VASP POSCAR or CONTCAR file, an FHI-aims .in file, or a .xsf or .cube Hartree potential file. Loading large files may take some time.\n* Changing any number in any input box will automatically update the image. There are also presets for some commonly used tip configurations.\nHover the mouse cursor over any parameter for a tooltip explaining the meaning of the parameter.\n* Click anywhere on the image to bring up a plot of the df approach curve for that point in the image.\n* Scroll anywhere on the image to zoom the scan window in/out of that spot.\n* Click on the `View Geometry` button to show the system geometry in ASE GUI.\n* Click on the `Edit Geometry` button to edit the positions, types, and charges of the atoms in the system. Note that for Hartree potential inputs editing charges is disabled and editing the geometry only affects the Lennard-Jones force field.\n* Click on the `View Forcefield` button to view different components of the force field. Note that the forcefield box size is inferred automatically from the scan size and is bigger than the scan size. Take into account the probe particle equilibrium distance when comparing the reported z-coordinates between the forcefield and the df image.\n* Click on the `Edit Forcefield` button to edit the per-species parameters of the Lennard-Jones forcefield.\n* Save the current image or df data by clicking the `Save Image...` or `Save df...` buttons at the bottom.\n* In case there are multiple OpenCL devices installed on the system, use the `-l` or `--list-devices` option to list available devices and choose the device using the `-d` or `--device` option with the device platform number as the argument.\n\n*Note that while input files without charges work, depending on the system, the resulting image may be significantly different from an image with electrostatics, and therefore may not be representative of reality. If no electrostatics are included, this is indicated in the title of the image.\n\n#### Run GPU generator for machine learning\n\n* `examples/CorrectionLoopGraphene` use GPU accelerated PPM to iteratively improve the estimate of molecular geometry by comparing simulated AFM images with reference. This is work-in-progress. Currently, modification of estimate geometry is random (Monte-Carlo), while later we plan to develop a more clever (e.g. Machine-Learned) heuristic for more efficient improvment.\n* `examples/Generator` quickly generates a batch of simulated AFM images (resp. 3D data stacks) which can be further used for machine learning. Especially in connection with (https://github.com/SINGROUP/ASD-AFM).\n\n### Notable publications using Probe Particle Model\n\n* [Prokop Hapala, Georgy Kichin, Christian Wagner, F. Stefan Tautz, Ruslan Temirov, and Pavel Jelínek, Mechanism of high-resolution STM/AFM imaging with functionalized tips, Phys. Rev. B 90, 085421 – Published 19 August 2014](http://journals.aps.org/prb/abstract/10.1103/PhysRevB.90.085421)\n* [Prokop Hapala, Ruslan Temirov, F. Stefan Tautz, and Pavel Jelínek, Origin of High-Resolution IETS-STM Images of Organic Molecules with Functionalized Tips, Phys. Rev. Lett. 113, 226101 – Published 25 November 2014,](http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.113.226101) \n\n### License\nMIT\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ppafm",
    "package_url": "https://pypi.org/project/ppafm/",
    "platform": null,
    "project_url": "https://pypi.org/project/ppafm/",
    "project_urls": {
      "Homepage": "https://github.com/Probe-Particle/ProbeParticleModel"
    },
    "release_url": "https://pypi.org/project/ppafm/0.1.0/",
    "requires_dist": [
      "ase",
      "matplotlib",
      "numpy",
      "pyopencl",
      "reikna",
      "pre-commit ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Classical force field model for simulating atomic force microscopy images.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17176396,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dea77b07fed0bab07a4e7fbffdf8f88f8dcb8b2df1255d10f2300d379144d2d",
          "md5": "5505ef5beb9a1d58fd3a806e7de89757",
          "sha256": "073b1c45c60ef21b69243ee8c97f41a9c3662aebd5e97eb25cb58d4d2b0e72f0"
        },
        "downloads": -1,
        "filename": "ppafm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5505ef5beb9a1d58fd3a806e7de89757",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 85825,
        "upload_time": "2022-11-30T16:18:54",
        "upload_time_iso_8601": "2022-11-30T16:18:54.254334Z",
        "url": "https://files.pythonhosted.org/packages/4d/ea/77b07fed0bab07a4e7fbffdf8f88f8dcb8b2df1255d10f2300d379144d2d/ppafm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12d1d2cb654ce5731ab02ef203dca39cfe33efda00fb53c4d99bcbb3099953a4",
          "md5": "bf3b6e775132fafe5526d02e12e56c88",
          "sha256": "0de054c0062ed0061c3f3e855205ceab106bd77404cfe34720fbc11cc3801c23"
        },
        "downloads": -1,
        "filename": "ppafm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf3b6e775132fafe5526d02e12e56c88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 81021,
        "upload_time": "2022-11-30T16:18:57",
        "upload_time_iso_8601": "2022-11-30T16:18:57.287412Z",
        "url": "https://files.pythonhosted.org/packages/12/d1/d2cb654ce5731ab02ef203dca39cfe33efda00fb53c4d99bcbb3099953a4/ppafm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c96847a05d36a7ce8c1ccc41bbc974b832f0c18aac52fde8a468fcb953d03fac",
          "md5": "3b8a56ab9f6dca61c3f08cb5dd45054e",
          "sha256": "3a4c384a756bc4791a78532a7c134f7c4e675685072040543d2a99229345ff9e"
        },
        "downloads": -1,
        "filename": "ppafm-0.2.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b8a56ab9f6dca61c3f08cb5dd45054e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 197933,
        "upload_time": "2023-03-06T15:01:41",
        "upload_time_iso_8601": "2023-03-06T15:01:41.742462Z",
        "url": "https://files.pythonhosted.org/packages/c9/68/47a05d36a7ce8c1ccc41bbc974b832f0c18aac52fde8a468fcb953d03fac/ppafm-0.2.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dea77b07fed0bab07a4e7fbffdf8f88f8dcb8b2df1255d10f2300d379144d2d",
        "md5": "5505ef5beb9a1d58fd3a806e7de89757",
        "sha256": "073b1c45c60ef21b69243ee8c97f41a9c3662aebd5e97eb25cb58d4d2b0e72f0"
      },
      "downloads": -1,
      "filename": "ppafm-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5505ef5beb9a1d58fd3a806e7de89757",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 85825,
      "upload_time": "2022-11-30T16:18:54",
      "upload_time_iso_8601": "2022-11-30T16:18:54.254334Z",
      "url": "https://files.pythonhosted.org/packages/4d/ea/77b07fed0bab07a4e7fbffdf8f88f8dcb8b2df1255d10f2300d379144d2d/ppafm-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12d1d2cb654ce5731ab02ef203dca39cfe33efda00fb53c4d99bcbb3099953a4",
        "md5": "bf3b6e775132fafe5526d02e12e56c88",
        "sha256": "0de054c0062ed0061c3f3e855205ceab106bd77404cfe34720fbc11cc3801c23"
      },
      "downloads": -1,
      "filename": "ppafm-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bf3b6e775132fafe5526d02e12e56c88",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 81021,
      "upload_time": "2022-11-30T16:18:57",
      "upload_time_iso_8601": "2022-11-30T16:18:57.287412Z",
      "url": "https://files.pythonhosted.org/packages/12/d1/d2cb654ce5731ab02ef203dca39cfe33efda00fb53c4d99bcbb3099953a4/ppafm-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}