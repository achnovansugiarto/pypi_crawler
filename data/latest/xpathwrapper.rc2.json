{
  "info": {
    "author": "Elango SK",
    "author_email": "elango111000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Xpath Wrapper\n------------\n    Selenium xpath wrapper framework\n\tSelenium Xpath wrapper , support browsers Chrome, Firefox, Supported OS Windows, Linux, Ubuntu, Mac\n\n# Examples :\n\n# To Use Chrome Browser :\n\n### from xpathwrapper.basec import driver,checkbyxpath\n\n### driver.get('http://testing.pythonautomation.tk/')\n\n### checkbyxpath(\"//ul[@class='actions']//li/a[text()='Test Me']\").click()\n\n# To Use Firefox Browser :\n\n### from xpathwrapper.basec import driver,checkbyxpath\n\n### driver.get('http://testing.pythonautomation.tk/')\n\n### checkbyxpath(\"//ul[@class='actions']//li/a[text()='Test Me']\").click()\n\n.................................... Key Words ..........................\n\n# checkbyid(locator):\n    \"\"\"\n    checkbyid(locator)\n\n    Locating by Id; Use this when you know id attribute of an element. With this strategy, \n    the first element with the id attribute value matching the location will be returned.\n    If no element has a matching id attribute, a NoSuchElementException will be raised..\n\n    checkbyid('loginForm')\n\n    \"\"\"\n    driver.find_element_by_id(locator)\n\n# checkbyname(locator):\n    \"\"\"\n    checkbyname(locator)\n\n    Locating by Name; Use this when you know name attribute of an element. With this strategy,\n     the first element with the name attribute value matching the location will be returned. \n     If no element has a matching name attribute, a NoSuchElementException will be raised. \n\n    checkbyname('username')\n\n    \"\"\"\n    driver.find_element_by_name(locator)\n\n# checkbyxpath(locator):\n    \"\"\"\n    checkbyxpath(locator)\n\n    Locating by XPath; XPath is the language used for locating nodes in an XML document. As HTML can \n    be an implementation of XML (XHTML), Selenium users can leverage this powerful language to target \n    elements in their web applications. XPath extends beyond (as well as supporting) the simple methods \n    of locating by id or name attributes, and opens up all sorts of new possibilities such as locating \n    the third checkbox on the page.\n\n    One of the main reasons for using XPath is when you don't have a suitable id or name attribute for \n    the element you wish to locate. You can use XPath to either locate the element in absolute terms \n    (not advised), or relative to an element that does have an id or name attribute. XPath locators can \n    also be used to specify elements via attributes other than id and name.\n\n    Absolute XPaths contain the location of all elements from the root (html) and as a result are likely \n    to fail with only the slightest adjustment to the application. By finding a nearby element with an id \n    or name attribute (ideally a parent element) you can locate your target element based on the \n    relationship. This is much less likely to change and can make your tests more robust. \n\n    checkbyxpath('/html/body/form[1]')\n\n    \"\"\"\n    driver.find_element_by_xpath(locator)\n\n# checkbylinktext(locator):\n    \"\"\"\n    checkbylinktext(locator)\n\n    Locating Hyperlinks by Link Text; Use this when you know link text used within an anchor tag. \n    With this strategy, the first element with the link text value matching the location will be \n    returned. If no element has a matching link text attribute, a NoSuchElementException will be raised.\n\n    checkbylinktext('Continue')\n\n    \"\"\"\n    driver.find_element_by_link_text(locator)\n\n# checkbypartialtext(locator):\n    \"\"\"\n    checkbypartialtext(locator)\n\n    findFileByName; Search the file by using name of the file in directory.\n    Once using name indicates the file name and path indicates the directory where\n    you want to search. \n\n    checkbypartialtext('Conti')\n\n    \"\"\"\n    driver.find_element_by_partial_link_text(locator)\n\n# checkbytag(locator):\n    \"\"\"\n    checkbytag(locator)\n\n    Locating Elements by Tag Name; Use this when you want to locate an element by tag name. \n    With this strategy, the first element with the given tag name will be returned. If no \n    element has a matching tag name, a NoSuchElementException will be raised.\n\n    checkbytag('h1')\n\n    \"\"\"\n    driver.find_element_by_tag_name(locator)\n\n# checkbyclass(locator):\n    \"\"\"\n    checkbyclass(locator)\n\n    Locating Elements by Class Name; Use this when you want to locate an element by class \n    attribute name. With this strategy, the first element with the matching class attribute \n    name will be returned. If no element has a matching class attribute name, a \n    NoSuchElementException will be raised. \n\n    checkbyclass('content')\n\n    \"\"\"\n    driver.find_element_by_class_name(locator)\n\n# checkbycss(locator):\n    \"\"\"\n    checkbycss(locator)\n\n    Locating Elements by CSS Selectors; Use this when you want to locate an element by CSS selector\n    syntax. With this strategy, the first element with the matching CSS selector will be returned.\n    If no element has a matching CSS selector, a NoSuchElementException will be raised. \n\n    checkbycss('p.content')\n\n    \"\"\"\n    driver.find_element_by_css_selector(locator)\n\n# checkbynames(locator):\n    \"\"\"\n    checkbynames(locator)\n\n    Locating by Name; Use this when you know name attribute of an element. With this strategy,\n    the first element with the name attribute value matching the location will be returned. \n    If no element has a matching name attribute, a NoSuchElementException will be raised. \n\n    checkbynames('username')\n\n    \"\"\"\n    driver.find_elements_by_name(locator)\n\n# checkxpathelements(locator):\n    \"\"\"\n    checkxpathelements(locator)\n\n    Locating by XPath; XPath is the language used for locating nodes in an XML document. As HTML can \n    be an implementation of XML (XHTML), Selenium users can leverage this powerful language to target \n    elements in their web applications. XPath extends beyond (as well as supporting) the simple methods \n    of locating by id or name attributes, and opens up all sorts of new possibilities such as locating \n    the third checkbox on the page.\n\n    One of the main reasons for using XPath is when you don't have a suitable id or name attribute for \n    the element you wish to locate. You can use XPath to either locate the element in absolute terms \n    (not advised), or relative to an element that does have an id or name attribute. XPath locators can \n    also be used to specify elements via attributes other than id and name.\n\n    Absolute XPaths contain the location of all elements from the root (html) and as a result are likely \n    to fail with only the slightest adjustment to the application. By finding a nearby element with an id \n    or name attribute (ideally a parent element) you can locate your target element based on the \n    relationship. This is much less likely to change and can make your tests more robust. \n\n    checkxpathelements('/html/body/form[1]')\n\n    \"\"\"\n    driver.find_elements_by_xpath(locator)\n\n# checkbylinktexts(locator):\n    \"\"\"\n    checkbylinktexts(locator)\n\n    Locating Hyperlinks by Link Text; Use this when you know link text used within an anchor tag. \n    With this strategy, the first element with the link text value matching the location will be \n    returned. If no element has a matching link text attribute, a NoSuchElementException will be raised.\n\n    checkbylinktexts('Continue')\n\n    \"\"\"\n    driver.find_elements_by_link_text(locator)\n\n# checkbypartialtexts(locator):\n    \"\"\"\n    checkbypartialtexts(locator)\n\n    findFileByName; Search the file by using name of the file in directory.\n    Once using name indicates the file name and path indicates the directory where\n    you want to search. \n\n    checkbypartialtexts('Conti')\n\n    \"\"\"\n    driver.find_elements_by_partial_link_text(locator)\n\n# checkbytagelements(locator):\n    \"\"\"\n    checkbytagelements(locator)\n\n    Locating Elements by Tag Name; Use this when you want to locate an element by tag name. \n    With this strategy, the first element with the given tag name will be returned. If no \n    element has a matching tag name, a NoSuchElementException will be raised.\n\n    checkbytagelements('h1')\n\n    \"\"\"\n    driver.find_elements_by_tag_name(locator)\n\n# checkbyclassnames(locator):\n    \"\"\"\n    checkbyclassnames(locator)\n\n    Locating Elements by Class Name; Use this when you want to locate an element by class \n    attribute name. With this strategy, the first element with the matching class attribute \n    name will be returned. If no element has a matching class attribute name, a \n    NoSuchElementException will be raised. \n\n    checkbyclassnames('content')\n\n    \"\"\"\n    driver.find_elements_by_class_name(locator)\n\n# checkbycssselectors(locator):\n    \"\"\"\n    checkbycssselectors(locator)\n\n    Locating Elements by CSS Selectors; Use this when you want to locate an element by CSS selector\n    syntax. With this strategy, the first element with the matching CSS selector will be returned.\n    If no element has a matching CSS selector, a NoSuchElementException will be raised. \n\n    checkbycssselectors('p.content')\n\n    \"\"\"\n    driver.find_elements_by_css_selector(locator)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/elaaisolution/FindXpath",
    "keywords": "xpath,selenium,wrapper",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xpathwrapper",
    "package_url": "https://pypi.org/project/xpathwrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/xpathwrapper/",
    "project_urls": {
      "Homepage": "https://github.com/elaaisolution/FindXpath"
    },
    "release_url": "https://pypi.org/project/xpathwrapper/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Selenium xpath wrapper to easily use in automation python",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7177531,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "506e18ef354c96b656f44c172fc67e779dfaccc8e2814642f902964c666d0da8",
          "md5": "206974783d58eb42b63988b33256442d",
          "sha256": "1224ab736c0a2033d7f82ff29eacf3bb0ef72bb9f5908edc083bbc179669be64"
        },
        "downloads": -1,
        "filename": "xpathwrapper-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "206974783d58eb42b63988b33256442d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9846,
        "upload_time": "2020-05-06T04:26:28",
        "upload_time_iso_8601": "2020-05-06T04:26:28.911582Z",
        "url": "https://files.pythonhosted.org/packages/50/6e/18ef354c96b656f44c172fc67e779dfaccc8e2814642f902964c666d0da8/xpathwrapper-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "618e779123c4b1eea37fc1354e07647e1a35681198d138eec4c01b0a49db9cff",
          "md5": "0a15966a2ddd2b2c5f7c9297a4c5bbda",
          "sha256": "9e8c4e77c3b7bdb7584b4d06070c5270d47c5d37fff9b8e6fdfdbee2952a91c1"
        },
        "downloads": -1,
        "filename": "xpathwrapper-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a15966a2ddd2b2c5f7c9297a4c5bbda",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5319,
        "upload_time": "2020-05-06T04:26:31",
        "upload_time_iso_8601": "2020-05-06T04:26:31.340152Z",
        "url": "https://files.pythonhosted.org/packages/61/8e/779123c4b1eea37fc1354e07647e1a35681198d138eec4c01b0a49db9cff/xpathwrapper-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ee56faf75836a393c890805f01c5a178cb9e9c2067e05c8cfa61f56a49f7b88",
          "md5": "f9c216f7486a8fe58caaf28cc733263e",
          "sha256": "4e251382da2d712cecb71b20092df75b5522a901df348012522102a98fe1cbf7"
        },
        "downloads": -1,
        "filename": "xpathwrapper-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9c216f7486a8fe58caaf28cc733263e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10002,
        "upload_time": "2020-05-06T04:42:01",
        "upload_time_iso_8601": "2020-05-06T04:42:01.331109Z",
        "url": "https://files.pythonhosted.org/packages/9e/e5/6faf75836a393c890805f01c5a178cb9e9c2067e05c8cfa61f56a49f7b88/xpathwrapper-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f58ac4beaf6d4988fe397e6cdf9a51661625391eb74b0f036e7b78c6e6318a4c",
          "md5": "06f23f4e478ca6f3ca83230a92480d01",
          "sha256": "7e58f24197ac810a49a5da34f383d0c7d7eb40fa1866c48348ac50fcce3fe3dc"
        },
        "downloads": -1,
        "filename": "xpathwrapper-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06f23f4e478ca6f3ca83230a92480d01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5329,
        "upload_time": "2020-05-06T04:42:03",
        "upload_time_iso_8601": "2020-05-06T04:42:03.195872Z",
        "url": "https://files.pythonhosted.org/packages/f5/8a/c4beaf6d4988fe397e6cdf9a51661625391eb74b0f036e7b78c6e6318a4c/xpathwrapper-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9ee56faf75836a393c890805f01c5a178cb9e9c2067e05c8cfa61f56a49f7b88",
        "md5": "f9c216f7486a8fe58caaf28cc733263e",
        "sha256": "4e251382da2d712cecb71b20092df75b5522a901df348012522102a98fe1cbf7"
      },
      "downloads": -1,
      "filename": "xpathwrapper-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f9c216f7486a8fe58caaf28cc733263e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10002,
      "upload_time": "2020-05-06T04:42:01",
      "upload_time_iso_8601": "2020-05-06T04:42:01.331109Z",
      "url": "https://files.pythonhosted.org/packages/9e/e5/6faf75836a393c890805f01c5a178cb9e9c2067e05c8cfa61f56a49f7b88/xpathwrapper-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f58ac4beaf6d4988fe397e6cdf9a51661625391eb74b0f036e7b78c6e6318a4c",
        "md5": "06f23f4e478ca6f3ca83230a92480d01",
        "sha256": "7e58f24197ac810a49a5da34f383d0c7d7eb40fa1866c48348ac50fcce3fe3dc"
      },
      "downloads": -1,
      "filename": "xpathwrapper-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "06f23f4e478ca6f3ca83230a92480d01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5329,
      "upload_time": "2020-05-06T04:42:03",
      "upload_time_iso_8601": "2020-05-06T04:42:03.195872Z",
      "url": "https://files.pythonhosted.org/packages/f5/8a/c4beaf6d4988fe397e6cdf9a51661625391eb74b0f036e7b78c6e6318a4c/xpathwrapper-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}