{
  "info": {
    "author": "Chanic Panic",
    "author_email": "dev@chanicpanic.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Linguistic",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# lark-ambig-tools\n\n`lark-ambig-tools` is a collection of utilities for [lark](https://github.com/lark-parser/lark)'s ambiguous parse\ntrees[^1].\n\n[^1]: A `Tree` containing `\"_ambig\"` nodes often produced with the `ambiguity=\"explicit\"` option.\n\nWhether your ambiguous grammar is a bug or a feature, `lark-ambig-tools` helps\nyou process ambiguity quickly and easily.\n\n## Features:\n\n- Count the total number of derivations in an ambiguous tree\n- Lazily iterate over the unambiguous derivations of a tree\n- Obtain all unambiguous trees faster and more efficiently than `lark.visitors.CollapseAmbiguities`\n\n## Requirements\n\n- Python 3.6+\n- lark 1.0+\n\n**Note**: Only `lark` 1.0+ is officially supported, but `lark-ambig-tools` may\nwork with older versions.\n\n## Installation\n\n```\npip install lark-ambig-tools\n```\n\nAlternatively, include `lark_ambig_tools.py` in your Python project with a copy\nof the license.\n\n## Usage\n\n### `CountedTree`\n\n`CountedTree` is a subclass of `lark.Tree` with an additional attribute:\n`derivation_count`. `derivation_count` contains the total number of unambiguous trees\nthat are represented by the tree.\n\n#### Examples\n\n1. Use `CountedTree` during parsing:\n\n```python\nfrom lark import Lark\nfrom lark_ambig_tools import CountedTree\n\nparser = Lark(grammar, ambiguity=\"explicit\", tree_class=CountedTree)\ntree = parser.parse(text)\nprint(tree.derivation_count)\n```\n\n2. Transform a `Tree` into a `CountedTree`:\n\n```python\nfrom lark import Lark\nfrom lark_ambig_tools import CountTrees\n\nparser = Lark(grammar, ambiguity=\"explicit\")\ntree = parser.parse(text)\ncounted_tree = CountTrees().transform(tree)\nprint(counted_tree.derivation_count)\n```\n\n**Note**: It is not generally recommended to construct `CountedTree`s directly.\n\n### `Disambiguator`\n\n`Disambiguator` is a `lark.Interpreter` that lazily iterates over the unambiguous\ntrees represented by an ambiguous tree. It is a faster and more memory-efficient\nalternative to lark's `CollapseAmbiguities`. By providing trees in the\nsame order trees as `CollapseAmbiguities`, `Disambiguator` is a drop-in replacement.\n\n#### Example\n\n```python\nfrom lark import Lark\nfrom lark_ambig_tools import Disambiguator\n\nparser = Lark(grammar, ambiguity=\"explicit\")\nambig_tree = parser.parse(text)\n\ndisambiguator = Disambiguator()\nfor tree in disambiguator.visit(ambig_tree):\n    # process unambiguous tree\n    ...\n```\n\n#### Extra Lazy `Disambiguator`\n\nWhen an instance of `CountedTree` is passed to `Disambiguator.visit`,\n`Disambiguator` takes advantage the known derivation counts to be even more\nlazy -- reducing computation and memory usage. Using  `Disambiguator` with\n`CountedTree` is ideal when you do not need to iterate over all the trees. i.e.\nYou stop iterating when you find one tree that meets your requirements.\nIf you always need all the trees, most of the time it is better to pass a regular\n`Tree`.\n\nFor more insights into how to best use `Disambiguator`, see the [benchmarks](#benchmarks).\n\n## Benchmarks\n\n### Overview\n\n`benchmark.py` contains benchmarks to test the performance of `Disambiguator`\n(with both `Tree` and `CountedTree`) and `CollapseAmbiguities`.\n\n#### Tasks\n\nThe benchmarks cover two different use cases with the following tests:\n\n- Getting the first unambiguous tree\n- Getting all unambiguous trees\n\n#### Trees\n\nEach task is run with three different types of ambiguous trees:\n\n- A small tree that is neither deep nor of high degree (4 derivations)\n- A deep tree that is deep and of low degree (64 derivations)\n- A wide tree that is not deep and of a high degree (216 derivations)\n\n### Running\n\n1. Install the requirements:\n\n```\npip install lark_ambig_tools[benchmark]\n```\n\n2. Run the benchmarks:\n\n```\npytest benchmark.py\n```\n\n### Results\n\nThe following table summarizes some of the key metrics from one run of the\nbenchmarks.\n\n\n| Name (time in us)                        |         Min         |          Max          |       Mean          |   StdDev          |     Median          |\n| -----------------------------------------|---------------------|-----------------------|---------------------|-------------------|---------------------|\n| test_disambiguator_counted_first[small]  |     13.6640 (1.0)   |      52.6320 (1.04)   |    14.2129 (1.0)    |   1.5089 (1.37)   |    14.0090 (1.0)    |\n| test_disambiguator_first[small]          |     15.5660 (1.14)  |      50.6990 (1.0)    |    16.1473 (1.14)   |   1.6425 (1.49)   |    15.9220 (1.14)   |\n| test_disambiguator_counted_first[wide]   |     21.0970 (1.54)  |      56.4830 (1.11)   |    21.7083 (1.53)   |   1.9241 (1.75)   |    21.4750 (1.53)   |\n| test_disambiguator_all[small]            |     28.4980 (2.09)  |      90.8440 (1.79)   |    29.1030 (2.05)   |   1.1015 (1.0)    |    28.9740 (2.07)   |\n| test_disambiguator_counted_all[small]    |     32.6300 (2.39)  |      95.0600 (1.87)   |    33.6988 (2.37)   |   2.9152 (2.65)   |    33.2920 (2.38)   |\n| test_collapse_ambiguities_all[small]     |     39.0030 (2.85)  |      97.3070 (1.92)   |    40.0052 (2.81)   |   2.9053 (2.64)   |    39.6080 (2.83)   |\n| test_disambiguator_counted_first[deep]   |     46.9520 (3.44)  |     120.7470 (2.38)   |    48.3013 (3.40)   |   4.5244 (4.11)   |    47.6360 (3.40)   |\n| test_disambiguator_first[wide]           |     83.5920 (6.12)  |     207.2310 (4.09)   |    86.4240 (6.08)   |   7.1662 (6.51)   |    85.4380 (6.10)   |\n| test_disambiguator_first[deep]           |    330.8410 (24.21) |  11,565.8670 (228.13) |   342.4290 (24.09)  | 236.3552 (214.58) |   334.1530 (23.85)  |\n| test_disambiguator_counted_all[wide]     |    440.9970 (32.27) |   1,000.8610 (19.74)  |   448.8748 (31.58)  |  25.9656 (23.57)  |   444.5130 (31.73)  |\n| test_disambiguator_all[wide]             |    643.2160 (47.07) |  11,475.9880 (226.36) |   728.5492 (51.26)  | 840.6795 (763.25) |   650.9210 (46.46)  |\n| test_disambiguator_all[deep]             |    716.1010 (52.41) |  12,895.9900 (254.36) |   831.8742 (58.53)  | 966.1033 (877.12) |   739.4460 (52.78)  |\n| test_collapse_ambiguities_all[deep]      |    924.8430 (67.68) |  12,040.0150 (237.48) | 1,019.8753 (71.76)  | 932.9566 (847.02) |   931.7700 (66.51)  |\n| test_collapse_ambiguities_all[wide]      |  1,008.2290 (73.79) |  12,064.4850 (237.96) | 1,104.9380 (77.74)  | 910.6654 (826.78) | 1,016.4430 (72.56)  |\n| test_disambiguator_counted_all[deep]     |  1,014.4010 (74.24) |  12,216.7780 (240.97) | 1,118.3364 (78.68)  | 952.4029 (864.68) | 1,022.4965 (72.99)  |\n\n\n**Note**: Getting the first tree from `CollapseAmbiguities` is the same as\ngetting all the trees.\n\n#### Insights\n\nThe following insights may be gathered from the above results:\n\n- `Disambiguator` with `CountedTree` is the fastest way to get the first tree.\n- `Disambiguator` with `Tree` beats `CollapseAmbiguities` in getting all trees for any tree type.\n- Deep ambiguous trees tend to require more computation than wide trees even when they have fewer total derivations.\n\n#### Limitations\n\nOf course, the performance of the different classes may vary depending on the\nhardware, environment, and workload. Furthermore, these benchmarks only test\nthe runtime of the code. They do not take into account other relevant\ncharacteristics such as memory usage and performance with varying frequencies of requests.\n\nHowever, hopefully these results offer a helpful starting point for using\n`Disambiguator`.\n\n## Testing\n\nRun the tests with\n\n```\npython test_lark_ambig_tools.py\n```\n\nor with tox:\n\n```\ntox\n```\n\n## License\n\nThis project is under the [MIT](LICENSE) license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chanicpanic/lark-ambig-tools",
    "keywords": "lark ambiguity earley tree",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lark-ambig-tools",
    "package_url": "https://pypi.org/project/lark-ambig-tools/",
    "platform": "any",
    "project_url": "https://pypi.org/project/lark-ambig-tools/",
    "project_urls": {
      "Homepage": "https://github.com/chanicpanic/lark-ambig-tools"
    },
    "release_url": "https://pypi.org/project/lark-ambig-tools/1.0.0/",
    "requires_dist": [
      "lark",
      "pytest (~=7.0) ; extra == 'benchmark'",
      "pytest-benchmark (~=3.0) ; extra == 'benchmark'"
    ],
    "requires_python": ">=3.6",
    "summary": "Utilities for lark's ambiguous trees",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14709291,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8833cac9919082ba62b2198391165d088680a71d4a872ef0eeba7b6f985e82d5",
          "md5": "62c4d2a63a66341c0f68b2d97d1d3c32",
          "sha256": "dbc98f34a48e9caa1c5a1eee4892886c34427f23bc82f64cd3efc3ebc48df8c2"
        },
        "downloads": -1,
        "filename": "lark_ambig_tools-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62c4d2a63a66341c0f68b2d97d1d3c32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6938,
        "upload_time": "2022-08-09T22:34:56",
        "upload_time_iso_8601": "2022-08-09T22:34:56.166539Z",
        "url": "https://files.pythonhosted.org/packages/88/33/cac9919082ba62b2198391165d088680a71d4a872ef0eeba7b6f985e82d5/lark_ambig_tools-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea37923760c10bb9ff642684519ee12d69b2211f8e546a96bfc22ce7036c742e",
          "md5": "747524252d4a86965996acb2511d7c0d",
          "sha256": "9b9cb31ccae15a2f8b4d6b662fcc3bc54527059362229825d119367294921078"
        },
        "downloads": -1,
        "filename": "lark-ambig-tools-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "747524252d4a86965996acb2511d7c0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6746,
        "upload_time": "2022-08-09T22:34:58",
        "upload_time_iso_8601": "2022-08-09T22:34:58.801737Z",
        "url": "https://files.pythonhosted.org/packages/ea/37/923760c10bb9ff642684519ee12d69b2211f8e546a96bfc22ce7036c742e/lark-ambig-tools-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8833cac9919082ba62b2198391165d088680a71d4a872ef0eeba7b6f985e82d5",
        "md5": "62c4d2a63a66341c0f68b2d97d1d3c32",
        "sha256": "dbc98f34a48e9caa1c5a1eee4892886c34427f23bc82f64cd3efc3ebc48df8c2"
      },
      "downloads": -1,
      "filename": "lark_ambig_tools-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "62c4d2a63a66341c0f68b2d97d1d3c32",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6938,
      "upload_time": "2022-08-09T22:34:56",
      "upload_time_iso_8601": "2022-08-09T22:34:56.166539Z",
      "url": "https://files.pythonhosted.org/packages/88/33/cac9919082ba62b2198391165d088680a71d4a872ef0eeba7b6f985e82d5/lark_ambig_tools-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea37923760c10bb9ff642684519ee12d69b2211f8e546a96bfc22ce7036c742e",
        "md5": "747524252d4a86965996acb2511d7c0d",
        "sha256": "9b9cb31ccae15a2f8b4d6b662fcc3bc54527059362229825d119367294921078"
      },
      "downloads": -1,
      "filename": "lark-ambig-tools-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "747524252d4a86965996acb2511d7c0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6746,
      "upload_time": "2022-08-09T22:34:58",
      "upload_time_iso_8601": "2022-08-09T22:34:58.801737Z",
      "url": "https://files.pythonhosted.org/packages/ea/37/923760c10bb9ff642684519ee12d69b2211f8e546a96bfc22ce7036c742e/lark-ambig-tools-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}