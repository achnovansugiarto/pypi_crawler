{
  "info": {
    "author": "FMR LLC",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Selective: Feature Selection Library\n**Selective** is a white-box feature selection library that supports unsupervised and supervised selection methods for classification and regression tasks. \n\nThe library provides:\n\n* Simple to complex selection methods: Variance, Correlation, Statistical, Linear, Tree-based, or Customized.\n* Interoperable with data frames as the input.\n* Automated task detection. No need to know what feature selection method works with what machine learning task.\n* Benchmarking multiple selectors using cross-validation with built-in parallelization.\n* Inspection of the results and feature importance. \n\nSelective is developed by the Artificial Intelligence Center of Excellence at Fidelity Investments.\n\n## Quick Start\n```python\n# Import Selective and SelectionMethod\nfrom sklearn.datasets import load_boston\nfrom feature.utils import get_data_label\nfrom feature.selector import Selective, SelectionMethod\n\n# Data\ndata, label = get_data_label(load_boston())\n\n# Feature selectors from simple to more complex\nselector = Selective(SelectionMethod.Variance(threshold=0.0))\nselector = Selective(SelectionMethod.Correlation(threshold=0.5, method=\"pearson\"))\nselector = Selective(SelectionMethod.Statistical(num_features=3, method=\"anova\"))\nselector = Selective(SelectionMethod.Linear(num_features=3, regularization=\"none\"))\nselector = Selective(SelectionMethod.TreeBased(num_features=3))\n\n# Feature reduction\nsubset = selector.fit_transform(data, label)\nprint(\"Reduction:\", list(subset.columns))\nprint(\"Scores:\", list(selector.get_absolute_scores()))\n```\n\n\n## Available Methods\n\n| Method | Options |\n| :---------------: | :-----: |\n| [Variance per Feature](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.VarianceThreshold.html) | `threshold` |\n| [Correlation pairwise Features](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html) | [Pearson Correlation Coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient) <br> [Kendall Rank Correlation Coefficient](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient) <br> [Spearman's Rank Correlation Coefficient](https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient) <br> |\n| [Statistical Analysis](https://scikit-learn.org/stable/modules/feature_selection.html#univariate-feature-selection) | [ANOVA F-test Classification](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_classif.html) <br> [F-value Regression](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.f_regression.html) <br> [Chi-Square](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.chi2.html) <br> [Mutual Information Classification](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.mutual_info_classif.html) <br> [Variance Inflation Factor](https://www.statsmodels.org/stable/generated/statsmodels.stats.outliers_influence.variance_inflation_factor.html) |\n| [Linear Methods](https://en.wikipedia.org/wiki/Linear_regression) | [Linear Regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html?highlight=linear%20regression#sklearn.linear_model.LinearRegression) <br> [Logistic Regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html?highlight=logistic%20regression#sklearn.linear_model.LogisticRegression) <br> [Lasso Regularization](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html#sklearn.linear_model.Lasso) <br> [Ridge Regularization](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html#sklearn.linear_model.Ridge) <br> |\n| [Tree-based Methods](https://scikit-learn.org/stable/modules/tree.html) | [Decision Tree](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier) <br> [Random Forest](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html?highlight=random%20forest#sklearn.ensemble.RandomForestClassifier) <br> [Extra Trees Classifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesClassifier.html) <br> [XGBoost](https://xgboost.readthedocs.io/en/latest/) <br> [LightGBM](https://lightgbm.readthedocs.io/en/latest/) <br> [AdaBoost](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html) <br> [CatBoost](https://github.com/catboost)<br> [Gradient Boosting Tree](http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html) <br> |\n\n\n\n## Benchmarking\n\n```python\n# Imports\nfrom sklearn.datasets import load_boston\nfrom feature.utils import get_data_label\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom feature.selector import SelectionMethod, benchmark, calculate_statistics\n\n# Data\ndata, label = get_data_label(load_boston())\n\n# Selectors\ncorr_threshold = 0.5\nnum_features = 3\ntree_params = {\"n_estimators\": 50, \"max_depth\": 5, \"random_state\": 111, \"n_jobs\": 4}\nselectors = {\n\n  # Correlation methods\n  \"corr_pearson\": SelectionMethod.Correlation(corr_threshold, method=\"pearson\"),\n  \"corr_kendall\": SelectionMethod.Correlation(corr_threshold, method=\"kendall\"),\n  \"corr_spearman\": SelectionMethod.Correlation(corr_threshold, method=\"spearman\"),\n  \n  # Statistical methods\n  \"stat_anova\": SelectionMethod.Statistical(num_features, method=\"anova\"),\n  \"stat_chi_square\": SelectionMethod.Statistical(num_features, method=\"chi_square\"),\n  \"stat_mutual_info\": SelectionMethod.Statistical(num_features, method=\"mutual_info\"),\n  \n  # Linear methods\n  \"linear\": SelectionMethod.Linear(num_features, regularization=\"none\"),\n  \"lasso\": SelectionMethod.Linear(num_features, regularization=\"lasso\", alpha=1000),\n  \"ridge\": SelectionMethod.Linear(num_features, regularization=\"ridge\", alpha=1000),\n  \n  # Non-linear tree-based methods\n  \"random_forest\": SelectionMethod.TreeBased(num_features),\n  \"xgboost_classif\": SelectionMethod.TreeBased(num_features, estimator=XGBClassifier(**tree_params)),\n  \"xgboost_regress\": SelectionMethod.TreeBased(num_features, estimator=XGBRegressor(**tree_params))\n}\n\n# Benchmark (sequential)\nscore_df, selected_df, runtime_df = benchmark(selectors, data, label, cv=5)\nprint(score_df, \"\\n\\n\", selected_df, \"\\n\\n\", runtime_df)\n\n# Benchmark (in parallel)\nscore_df, selected_df, runtime_df = benchmark(selectors, data, label, cv=5, n_jobs=4)\nprint(score_df, \"\\n\\n\", selected_df, \"\\n\\n\", runtime_df)\n\n# Get benchmark statistics by feature\nstats_df = calculate_statistics(score_df, selected_df)\nprint(stats_df)\n```\n\n\n## Visualization\n\n```python\nimport pandas as pd\nfrom sklearn.datasets import load_boston\nfrom feature.utils import get_data_label\nfrom feature.selector import SelectionMethod, Selective, plot_importance\n\n# Data\ndata, label = get_data_label(load_boston())\n\n# Feature Selector\nselector = Selective(SelectionMethod.Linear(num_features=10, regularization=\"none\"))\nsubset = selector.fit_transform(data, label)\n\n# Plot Feature Importance\ndf = pd.DataFrame(selector.get_absolute_scores(), index=data.columns)\nplot_importance(df)\n```\n\n## Installation\n\nSelective is available to install as `pip install selective`. \n\n## Source \n\nAlternatively, you can build a wheel package on your platform from scratch using the source code:\n\n```bash\ngit clone https://github.com/fidelity/selective.git\ncd selective\npip install setuptools wheel # if wheel is not installed\npython setup.py sdist bdist_wheel\npip install dist/selective-X.X.X-py3-none-any.whl\n```\n\n## Test your set up\n\n```\ncd selective\npython -m unittest discover tests\n```\n\n## Support\n\nPlease submit bug reports and feature requests as [Issues](https://github.com/fidelity/selective/issues).\n\n## License\nSelective is licensed under the [GNU GPL 3.0.](https://github.com/fidelity/selective/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fidelity/selective",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "selective",
    "package_url": "https://pypi.org/project/selective/",
    "platform": "",
    "project_url": "https://pypi.org/project/selective/",
    "project_urls": {
      "Homepage": "https://github.com/fidelity/selective",
      "Source": "https://github.com/fidelity/selective"
    },
    "release_url": "https://pypi.org/project/selective/1.1.1/",
    "requires_dist": [
      "catboost",
      "joblib",
      "lightgbm",
      "numpy",
      "pandas",
      "scikit-learn",
      "seaborn",
      "statsmodels",
      "xgboost"
    ],
    "requires_python": ">=3.6",
    "summary": "feature selection library",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12840787,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "addae6d3e252777c2f41062816f7df7c95edc2f600eaa44f9cecb57abf50f9de",
          "md5": "8ca5ec2b053539a22ec9f286f53bcdb5",
          "sha256": "01da768f239388ac985f87c645d6da1c428944a0c5e7be076ef519d9e4fbd9a5"
        },
        "downloads": -1,
        "filename": "selective-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ca5ec2b053539a22ec9f286f53bcdb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34046,
        "upload_time": "2021-02-08T20:35:45",
        "upload_time_iso_8601": "2021-02-08T20:35:45.291626Z",
        "url": "https://files.pythonhosted.org/packages/ad/da/e6d3e252777c2f41062816f7df7c95edc2f600eaa44f9cecb57abf50f9de/selective-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0d3d11b3e79bc20b0a50cb4c68820df19fe8726817615ae267494b2c16cbcdc",
          "md5": "352614ea031771efb0cda52017df3722",
          "sha256": "f10ed7ba1f91b3d2c8cfd14df717c3fd9bdf8d69152263bdf31637af011f6ef8"
        },
        "downloads": -1,
        "filename": "selective-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "352614ea031771efb0cda52017df3722",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34403,
        "upload_time": "2021-03-31T14:32:58",
        "upload_time_iso_8601": "2021-03-31T14:32:58.167934Z",
        "url": "https://files.pythonhosted.org/packages/a0/d3/d11b3e79bc20b0a50cb4c68820df19fe8726817615ae267494b2c16cbcdc/selective-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32a31a72bf3f4b9aa66fb86f0e1d8d5e179489c073265d21c1b64eb85fe39355",
          "md5": "212aa12a8d052440f0ec8232c0024d4a",
          "sha256": "931203e8fa7e6a6112ddbbf3e942c8e4a5c23dcb6ce84b5f4f30468dec6620bc"
        },
        "downloads": -1,
        "filename": "selective-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "212aa12a8d052440f0ec8232c0024d4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20040,
        "upload_time": "2021-03-31T14:32:59",
        "upload_time_iso_8601": "2021-03-31T14:32:59.713506Z",
        "url": "https://files.pythonhosted.org/packages/32/a3/1a72bf3f4b9aa66fb86f0e1d8d5e179489c073265d21c1b64eb85fe39355/selective-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cdd1631d40eee3179054ef510fb9a2b30011bb3d86c89b2eb5817cee3f60a54",
          "md5": "c0a4c6244a1147ebf9951b2e7b4dea54",
          "sha256": "bae144db4c8eb93556100cd06c5ac2bfefaa0c04556cee81165502b8f9d5eb31"
        },
        "downloads": -1,
        "filename": "selective-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0a4c6244a1147ebf9951b2e7b4dea54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 34911,
        "upload_time": "2021-06-16T13:18:41",
        "upload_time_iso_8601": "2021-06-16T13:18:41.161258Z",
        "url": "https://files.pythonhosted.org/packages/4c/dd/1631d40eee3179054ef510fb9a2b30011bb3d86c89b2eb5817cee3f60a54/selective-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "913223ab42d656c75d5d43a78b1305c0d0f2afc3d344522f720fb3ebde98f451",
          "md5": "d126987c909abd82c1d568d6f58c378e",
          "sha256": "a7525463bb2a3f766a7e500f1fec15d6d3d6d21b838e36d2ab629f22f50323df"
        },
        "downloads": -1,
        "filename": "selective-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d126987c909abd82c1d568d6f58c378e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20568,
        "upload_time": "2021-06-16T13:18:43",
        "upload_time_iso_8601": "2021-06-16T13:18:43.087855Z",
        "url": "https://files.pythonhosted.org/packages/91/32/23ab42d656c75d5d43a78b1305c0d0f2afc3d344522f720fb3ebde98f451/selective-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3c4f8c0e88a03e5e29bf2b8cb6f6461ada805b092c25bc8e1a4f86fe4f64488",
          "md5": "c73a8698ed946716f70d5f933232fd78",
          "sha256": "9dc19dd025a1fc913d064a64f806c103ee453006396c4d72c47386474067a179"
        },
        "downloads": -1,
        "filename": "selective-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c73a8698ed946716f70d5f933232fd78",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35041,
        "upload_time": "2022-02-09T17:21:33",
        "upload_time_iso_8601": "2022-02-09T17:21:33.047900Z",
        "url": "https://files.pythonhosted.org/packages/a3/c4/f8c0e88a03e5e29bf2b8cb6f6461ada805b092c25bc8e1a4f86fe4f64488/selective-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a3c4f8c0e88a03e5e29bf2b8cb6f6461ada805b092c25bc8e1a4f86fe4f64488",
        "md5": "c73a8698ed946716f70d5f933232fd78",
        "sha256": "9dc19dd025a1fc913d064a64f806c103ee453006396c4d72c47386474067a179"
      },
      "downloads": -1,
      "filename": "selective-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c73a8698ed946716f70d5f933232fd78",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 35041,
      "upload_time": "2022-02-09T17:21:33",
      "upload_time_iso_8601": "2022-02-09T17:21:33.047900Z",
      "url": "https://files.pythonhosted.org/packages/a3/c4/f8c0e88a03e5e29bf2b8cb6f6461ada805b092c25bc8e1a4f86fe4f64488/selective-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}