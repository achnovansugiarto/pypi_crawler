{
  "info": {
    "author": "VaultSec, Julio Lira, Matheus Oliveira",
    "author_email": "contato@vaultsec.com.br, jul10l1r4@disroot.org, matheusoliveiratux4me@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet",
      "Topic :: Security"
    ],
    "description": "# BRIntelcollector\n\nPesquisa por indicadores de ameaças nacionais, através de diferentes fontes. Através da ferramenta é possível criar um banco de dados com ameaças nacionais e assim facilitar as pesquisas, identificação de organizações buscar por possíveis ameaças.\n\nAtualmente estamos trabalhando duas fontes de dados: OTX da Alienvault e XFE da IBM\n\n## Instalação e uso\n\n> **Pré requisitos:** para instalar é necessário ter o python na versão 3+ e o pip correspondente. E possuir as chaves de API do [Open Threat Exchange](https://support.rocketcyber.com/hc/en-us/articles/360017914637-Setup-Alienvault-OTX-Threat-Intel-API-Key) e do [IBM X-Force Exchange](https://api.xforce.ibmcloud.com/doc/#/)(Lembre-se da especificidade da chave que [deve ser](https://github.com/Jul10l1r4/X-force#use): `$chave:$senha` em base64)\n\n```pypi\npip3 install BRIntel\n```\nConfigure dessa forma seu `.env`. Claro: Substitua `<sua chave e senha>` pelo seu código da API e senha respectivamente.\n\n```bash\necho \"OTX_KEY = '<sua chave>'\" > .env\necho \"IBM_KEY = '<sua chave + senha em base64>'\" >> .env\n```\nPara usar, basta importar os módulos que serão exemplificados:\n```python\nfrom BRIntel import allSources, default\n\n# Retornará uma list contendo a busca padrão \n# das duas fontes, todos os valores em dict\nallSources(\"Termo de busca\")\n\n# Da mesma forma da outra função também retornará\n# lista de valores em dict, mas na estrutura padrão:\ndefault(\"Termo de busca\")\n```\nA primeira função retorna de forma absoluta os valores das buscas, já a segunda reduz alguns dados para o trabalho na manipulação.\nRetorno da busca padrão (`BRIntel.defaul`):\n- [\"title\"]: Título do pulse/relatório\n- [\"description\"]: Descrição mais detalhada explicando o pulse/relatório\n- [\"author\"]: Nome do autor do pulse/relatório\n- [\"created\"]: Data de criação do pulse/relatório\n- [\"Modified\"]: Data de modificação do pulse/relatório\n- [\"tlp\"]: Traffic Light Protocol ([TLP](https://www.gov.br/cisc/pt-br/tlp)) de pulse/relatório\n- [\"url\"]: Url de pulse/relatório\n\nÉ possível fazer a busca em fontes específicas, exemplo:\n```python\nfrom BRIntel import xfe, otx\n\n# O RETORNO SERÁ UMA LIST\n# stix 2.1\nxfe.search(\"Termo de busca\")\n# Formato aberto de pulse OTX\notx.search(\"Termo de busca\")\n```\nAlém de busca em fonte específica, também é possível fazer isso de forma que siga o padrão citado à cima\n```python\nfrom BRIntel import xfe, otx\n\n# Ambas as funções recebem o dict que corresponde a um valor\n# de pulse/relatorio\nxfe.show(xfe_search[x])\notx.show(otx_search[x])\n```\nAlém da busca com o retorno em padrão de exibição, é possível buscar os detalhes de um pulse/relatório específico. Dessa forma:\n```python\nfrom BRIntel import xfe, otx\n\n# Ambas as funções recebem o ID, uma como string e outra como int, respectivamente\nxfe.details(xfe_search[x][\"id\"])\notx.details(otx_search[x][\"id\"])\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/VaultSEC/BRIntelcollector",
    "keywords": "threat intelligence security ibm xforce x-force blueteam search query api exchange otx cti oct OTX otx open threat CTI brazil brasil br",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BRIntel",
    "package_url": "https://pypi.org/project/BRIntel/",
    "platform": null,
    "project_url": "https://pypi.org/project/BRIntel/",
    "project_urls": {
      "Github profile": "https://github.com/VaultSEC",
      "Homepage": "https://github.com/VaultSEC/BRIntelcollector",
      "Vault Cyber Security": "https://vaultsec.com.br/"
    },
    "release_url": "https://pypi.org/project/BRIntel/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Cyber Threat Intelligence (CTI) usando fontes e indicadores de ameaças nacionais, ou até globais, mas com evidencias ou indicadores nacionais do Brasil",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16624635,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e17387b35d1be027077b4c8fa0965f36031247682984116add33c696e92196e7",
          "md5": "84db03071126b3bf6921fb261973a5d4",
          "sha256": "8e58084d42f4982bb302fedc363e804fb06acd3a8632c738ebecf0532f239dbe"
        },
        "downloads": -1,
        "filename": "BRIntel-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84db03071126b3bf6921fb261973a5d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4623,
        "upload_time": "2023-01-30T21:08:03",
        "upload_time_iso_8601": "2023-01-30T21:08:03.310845Z",
        "url": "https://files.pythonhosted.org/packages/e1/73/87b35d1be027077b4c8fa0965f36031247682984116add33c696e92196e7/BRIntel-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfdc0a4dd11c06cedb2c91d080e11ba906bb21b3507b04b989119dac84babab9",
          "md5": "cd1a28ce533c15580a33204fe8758c36",
          "sha256": "3aef78ff3afd21e002f8ad7ce873f33bf8abf317f1f49a75cc72340d7ef85946"
        },
        "downloads": -1,
        "filename": "BRIntel-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd1a28ce533c15580a33204fe8758c36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4259,
        "upload_time": "2023-01-30T21:08:05",
        "upload_time_iso_8601": "2023-01-30T21:08:05.543681Z",
        "url": "https://files.pythonhosted.org/packages/df/dc/0a4dd11c06cedb2c91d080e11ba906bb21b3507b04b989119dac84babab9/BRIntel-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e17387b35d1be027077b4c8fa0965f36031247682984116add33c696e92196e7",
        "md5": "84db03071126b3bf6921fb261973a5d4",
        "sha256": "8e58084d42f4982bb302fedc363e804fb06acd3a8632c738ebecf0532f239dbe"
      },
      "downloads": -1,
      "filename": "BRIntel-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "84db03071126b3bf6921fb261973a5d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4623,
      "upload_time": "2023-01-30T21:08:03",
      "upload_time_iso_8601": "2023-01-30T21:08:03.310845Z",
      "url": "https://files.pythonhosted.org/packages/e1/73/87b35d1be027077b4c8fa0965f36031247682984116add33c696e92196e7/BRIntel-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfdc0a4dd11c06cedb2c91d080e11ba906bb21b3507b04b989119dac84babab9",
        "md5": "cd1a28ce533c15580a33204fe8758c36",
        "sha256": "3aef78ff3afd21e002f8ad7ce873f33bf8abf317f1f49a75cc72340d7ef85946"
      },
      "downloads": -1,
      "filename": "BRIntel-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd1a28ce533c15580a33204fe8758c36",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4259,
      "upload_time": "2023-01-30T21:08:05",
      "upload_time_iso_8601": "2023-01-30T21:08:05.543681Z",
      "url": "https://files.pythonhosted.org/packages/df/dc/0a4dd11c06cedb2c91d080e11ba906bb21b3507b04b989119dac84babab9/BRIntel-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}