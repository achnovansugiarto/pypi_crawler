{
  "info": {
    "author": "Nguyen Hoang Nam",
    "author_email": "nguyenhoangnam.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Contrast-image\n\nBase on multiple papers about contrast, I create this library to contrast images with opencv.\n\n## Installation\n\n```bash\npip install contrast-image\n```\n\n## Usage\n\n```python\nfrom contrast_image import contrast_image\nimport cv2 as cv\n\ninput = cv.imread('input.jpg')\n\nci = CI(input, 'HSV')\noutput = ci.GHE()\n```\n\n## API\n\n### CI\n\nStore all functions to contrast image\n\n```python\nfrom contrast_image import contrast_image\n\nci = CI(image, color_space = 'HSV')\n```\n\n#### GHE (Global Histogram Equalization)\n\nThis function is similar to ```equalizeHist(image)``` in opencv.\n\n```python\nci.GHE()\n```\n\n- Return: image after equalization\n\n#### BBHE (Brightness Preserving Histogram Equalization)\n\nThis function separate the histogram by the mean of the image, then equalize histogram of each part.\n\nThis method tries to preserve brightness of output image by assume PDF is symmetrical distribution.\n\n```python\nci.BBHE()\n```\n\n- Return: image after equalization\n\n#### DSIHE (Dualistic Sub-Image Histogram Equalization)\n\nThis function is similar to BBHE except using median instead of mean.\n\nUnlike BBHE, DSIHE tries to preserve brightness of output image by maximum entropy after separate.\n\n```python\nci.DSIHE()\n```\n\n- Return: image after equalization\n\n#### MMBEBHE (Minimum Mean Brightness Error Histogram Equalization)\n\nThis function is similar to BBHE except using minimum mean brightness error instead of mean.\n\nTheortically, mean of output image (by GHE) is middle gray level. Therefore, MMBEBHE believe by separate histogram such that mean of output image near mean of input image must preserve brightness.\n\n```python\nci.MMBEBHE()\n```\n\n- Return: image after equalization\n\n#### BPHEME (Brightness Preserving Histogram Equalization with Maximum Entropy)\n\nThis function finds matching function such that make output image maximum entropy, then using histogram specification to match input's histogram and matching function.\n\nBased on idea of DSIHE, BPHEME tries to generalize by using histogram specification and solve optimize problem by Lagrange interpolation.\n\n```python\nci.BPHEME()\n```\n\n- Return: image after equalization\n\n#### RLBHE (Range Limited Bi-Histogram Equalization)\n\nThis function is similar to BBHE except using otsu's method instead of mean. Moreover, this limit range of gray level such that output image has minimum mean brightness error.\n\nThis method tries to equalize histogram for foreground and background separately by Otsu's method.\n\n```python\nci.RLBHE()\n```\n\n- Return: image after equalization\n\n#### RMSHE (Recursively Mean-Separate Histogram Equalization)\n\nThis function recursively separate histogram by mean. Therefore, ```recursive = 2``` will create 4 sub-histograms, then equalize each sub-histograms.\n\nSame idea as BBHE but recursively separate to preserve more brightness.\n\n```python\nci.RMSHE(recursive = 2)\n```\n\n- Parameter recurive: number of recursive time\n- Return: image after equalization\n\n#### RSIHE (Recursive Sub-Image Histogram Equalization)\n\nThis function is similar to RMSHE except using median instead of mean.\n\nSame idea as DSIHE but recursively separate to preserve more brightness.\n\n```python\nci.RSIHE(recursive = 2)\n```\n\n- Parameter recurive: number of recursive time\n- Return: image after equalization\n\n#### RSWHE (Recursive Separated and Weighted Histogram Equalization)\n\nThis function recursively separate histogram by mean or median, then weighting each sub-histogram before equalize them.\n\nThis method similar to RMSHE and RSIHE except weighting sub-histogram to avoid local extreme value in histogram.\n\n```python\nci.RSWHE(type = 'mean', beta = 0, recursive = 2)\n```\n\n- Parameter type: 'mean' or 'median'\n- Parameter beta: increasing more brightness in output image\n- Parameter recurive: number of recursive time\n- Return: image after equalization\n\n#### FHSABP (Flattest Histogram Specification with Accurate Brightness Preservation)\n\nThis function finds matching function such that make the flattest output's histogram, then using histogram specification to match input's histogram and matching function.\n\nBecause of discrete, histogram equalization does not often the flattest histogram. FHSABP tries to solve optimization function to find the flattest output's histogram.\n\n```python\nci.FHSABP()\n```\n\n- Return: image after equalization\n\n#### WTHE (Weighted Thresholded Histogram Equalization)\n\nThis function weight histogram before equalize it.\n\n```python\nci.WTHE(root, value, lower = 0)\n```\n\n- Return: image after equalization\n\n#### AGCWD (Adaptive Gamma Correction with Weighting Distribution)\n\nThis function automatic correct gamma using weighting distribution\n\n```python\nci.AGCWD(alpha)\n```\n\n- Parameter alpha: adjustment\n- Return: image after equalization\n\n#### AGCCPF (Adaptive Gamma Correction Color Preserving Framework)\n\nThis similar to AGCWD except smooth pdf\n\n```python\nci.AGCCPF(alpha)\n```\n\n- Parameter alpha: adjustment\n- Return: image after equalization\n\n### Quantitation\n\nStore all functions to quantity output image\n\n```python\nfrom contrast_image import quantitation\n\nquantitation = Quantitation()\n```\n\n#### AMBE (Absolute Mean Brightness Error)\n\n```python\nci.AMBE(input_image, output_image)\n```\n\n#### PSNR (Peak Signal to Noise Ratio)\n\n```python\nci.PSNR(input_image, output_image)\n```\n\n#### Entropy\n\n```python\nci.Entropy(image)\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Nguyen-Hoang-Nam/contrast-image",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "contrast-image",
    "package_url": "https://pypi.org/project/contrast-image/",
    "platform": "",
    "project_url": "https://pypi.org/project/contrast-image/",
    "project_urls": {
      "Homepage": "https://github.com/Nguyen-Hoang-Nam/contrast-image"
    },
    "release_url": "https://pypi.org/project/contrast-image/0.1.6/",
    "requires_dist": [
      "numpy",
      "opencv-python"
    ],
    "requires_python": "",
    "summary": "ðŸŒˆ Library to work with contrast",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9968524,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76729ad5419f44eed6c1c84af36df52c7e5d1051429dd7f2dd3ea7afeb2fa458",
          "md5": "068589f304170182c459aad92bb2e9fb",
          "sha256": "a0c96b1f8c5e72719e84a514dcc04c41bcce4f5bdee159d7861e50c9a9c3539f"
        },
        "downloads": -1,
        "filename": "contrast_image-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "068589f304170182c459aad92bb2e9fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9410,
        "upload_time": "2021-04-04T02:18:23",
        "upload_time_iso_8601": "2021-04-04T02:18:23.711081Z",
        "url": "https://files.pythonhosted.org/packages/76/72/9ad5419f44eed6c1c84af36df52c7e5d1051429dd7f2dd3ea7afeb2fa458/contrast_image-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a850ed8f5777cd0ba08445e2dc8f219e72d030ec3e4657bda1acece0b8a510c",
          "md5": "8adc37db3cbc9fe827cb57d2d88e995a",
          "sha256": "65a39d292e19b565815b0d08cde860b94b4f982c6e32e7e2c072d9dd835e84be"
        },
        "downloads": -1,
        "filename": "contrast_image-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8adc37db3cbc9fe827cb57d2d88e995a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9230,
        "upload_time": "2021-04-04T02:18:25",
        "upload_time_iso_8601": "2021-04-04T02:18:25.413722Z",
        "url": "https://files.pythonhosted.org/packages/7a/85/0ed8f5777cd0ba08445e2dc8f219e72d030ec3e4657bda1acece0b8a510c/contrast_image-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76729ad5419f44eed6c1c84af36df52c7e5d1051429dd7f2dd3ea7afeb2fa458",
        "md5": "068589f304170182c459aad92bb2e9fb",
        "sha256": "a0c96b1f8c5e72719e84a514dcc04c41bcce4f5bdee159d7861e50c9a9c3539f"
      },
      "downloads": -1,
      "filename": "contrast_image-0.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "068589f304170182c459aad92bb2e9fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9410,
      "upload_time": "2021-04-04T02:18:23",
      "upload_time_iso_8601": "2021-04-04T02:18:23.711081Z",
      "url": "https://files.pythonhosted.org/packages/76/72/9ad5419f44eed6c1c84af36df52c7e5d1051429dd7f2dd3ea7afeb2fa458/contrast_image-0.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a850ed8f5777cd0ba08445e2dc8f219e72d030ec3e4657bda1acece0b8a510c",
        "md5": "8adc37db3cbc9fe827cb57d2d88e995a",
        "sha256": "65a39d292e19b565815b0d08cde860b94b4f982c6e32e7e2c072d9dd835e84be"
      },
      "downloads": -1,
      "filename": "contrast_image-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "8adc37db3cbc9fe827cb57d2d88e995a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9230,
      "upload_time": "2021-04-04T02:18:25",
      "upload_time_iso_8601": "2021-04-04T02:18:25.413722Z",
      "url": "https://files.pythonhosted.org/packages/7a/85/0ed8f5777cd0ba08445e2dc8f219e72d030ec3e4657bda1acece0b8a510c/contrast_image-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}